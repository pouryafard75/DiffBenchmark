{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "InlineVariables",
      "right" : "InlineVariables",
      "info" : "TypeDeclaration[1430-26185]:TypeDeclaration[1430-26316]"
    }, {
      "left" : "private final AbstractCompiler compiler;",
      "right" : "private final AbstractCompiler compiler;",
      "info" : "FieldDeclaration[2201-2241]:FieldDeclaration[2201-2241]"
    }, {
      "left" : "enum : Mode",
      "right" : "enum : Mode",
      "info" : "EnumDeclaration[2245-2381]:EnumDeclaration[2245-2381]"
    }, {
      "left" : "private final Mode mode;",
      "right" : "private final Mode mode;",
      "info" : "FieldDeclaration[2385-2409]:FieldDeclaration[2385-2409]"
    }, {
      "left" : "private final boolean inlineAllStrings;",
      "right" : "private final boolean inlineAllStrings;",
      "info" : "FieldDeclaration[2493-2532]:FieldDeclaration[2493-2532]"
    }, {
      "left" : "private final IdentifyConstants identifyConstants = new IdentifyConstants();",
      "right" : "private final IdentifyConstants identifyConstants = new IdentifyConstants();",
      "info" : "FieldDeclaration[2536-2612]:FieldDeclaration[2536-2612]"
    }, {
      "left" : "InlineVariables(\n      AbstractCompiler compiler,\n      Mode mode,\n      boolean inlineAllStrings)",
      "right" : "InlineVariables(\n      AbstractCompiler compiler,\n      Mode mode,\n      boolean inlineAllStrings)",
      "info" : "MethodDeclaration[2616-2818]:MethodDeclaration[2616-2818]"
    }, {
      "left" : "public void process(Node externs, Node root)",
      "right" : "public void process(Node externs, Node root)",
      "info" : "MethodDeclaration[2822-3060]:MethodDeclaration[2822-3060]"
    }, {
      "left" : "private Predicate<Var> getFilterForMode()",
      "right" : "private Predicate<Var> getFilterForMode()",
      "info" : "MethodDeclaration[3064-3384]:MethodDeclaration[3064-3384]"
    }, {
      "left" : "IdentifyConstants",
      "right" : "IdentifyConstants",
      "info" : "TypeDeclaration[3388-3870]:TypeDeclaration[3388-3870]"
    }, {
      "left" : "public boolean apply(Var var)",
      "right" : "public boolean apply(Var var)",
      "info" : "MethodDeclaration[3787-3866]:MethodDeclaration[3787-3866]"
    }, {
      "left" : "IdentifyLocals",
      "right" : "IdentifyLocals",
      "info" : "TypeDeclaration[3874-4071]:TypeDeclaration[3874-4071]"
    }, {
      "left" : "public boolean apply(Var var)",
      "right" : "public boolean apply(Var var)",
      "info" : "MethodDeclaration[3982-4067]:MethodDeclaration[3982-4067]"
    }, {
      "left" : "AliasCandidate",
      "right" : "AliasCandidate",
      "info" : "TypeDeclaration[4075-4316]:TypeDeclaration[4075-4316]"
    }, {
      "left" : "private final Var alias;",
      "right" : "private final Var alias;",
      "info" : "FieldDeclaration[4117-4141]:FieldDeclaration[4117-4141]"
    }, {
      "left" : "private final ReferenceCollection refInfo;",
      "right" : "private final ReferenceCollection refInfo;",
      "info" : "FieldDeclaration[4146-4188]:FieldDeclaration[4146-4188]"
    }, {
      "left" : "AliasCandidate(Var alias, ReferenceCollection refInfo)",
      "right" : "AliasCandidate(Var alias, ReferenceCollection refInfo)",
      "info" : "MethodDeclaration[4194-4312]:MethodDeclaration[4194-4312]"
    }, {
      "left" : "InliningBehavior",
      "right" : "InliningBehavior",
      "info" : "TypeDeclaration[4320-26183]:TypeDeclaration[4320-26314]"
    }, {
      "left" : "private final Set<Var> staleVars = Sets.newHashSet();",
      "right" : "private final Set<Var> staleVars = Sets.newHashSet();",
      "info" : "FieldDeclaration[4545-4754]:FieldDeclaration[4545-4754]"
    }, {
      "left" : "final Map<Node, AliasCandidate> aliasCandidates = Maps.newHashMap();",
      "right" : "final Map<Node, AliasCandidate> aliasCandidates = Maps.newHashMap();",
      "info" : "FieldDeclaration[4760-5027]:FieldDeclaration[4760-5027]"
    }, {
      "left" : "public void afterExitScope(NodeTraversal t, ReferenceMap referenceMap)",
      "right" : "public void afterExitScope(NodeTraversal t, ReferenceMap referenceMap)",
      "info" : "MethodDeclaration[5033-5214]:MethodDeclaration[5033-5214]"
    }, {
      "left" : "private void collectAliasCandidates(NodeTraversal t,\n        ReferenceMap referenceMap)",
      "right" : "private void collectAliasCandidates(NodeTraversal t,\n        ReferenceMap referenceMap)",
      "info" : "MethodDeclaration[5220-6374]:MethodDeclaration[5220-6374]"
    }, {
      "left" : "private void doInlinesForScope(NodeTraversal t, ReferenceMap referenceMap)",
      "right" : "private void doInlinesForScope(NodeTraversal t, ReferenceMap referenceMap)",
      "info" : "MethodDeclaration[6380-7835]:MethodDeclaration[6380-7835]"
    }, {
      "left" : "private boolean maybeEscapedOrModifiedArguments(\n        Scope scope, ReferenceMap referenceMap)",
      "right" : "private boolean maybeEscapedOrModifiedArguments(\n        Scope scope, ReferenceMap referenceMap)",
      "info" : "MethodDeclaration[7841-8666]:MethodDeclaration[7841-8666]"
    }, {
      "left" : "private boolean isLValue(Node n)",
      "right" : "private boolean isLValue(Node n)",
      "info" : "MethodDeclaration[8672-8894]:MethodDeclaration[8672-8894]"
    }, {
      "left" : "private void inlineNonConstants(\n        Var v, ReferenceCollection referenceInfo,\n        boolean maybeModifiedArguments)",
      "right" : "private void inlineNonConstants(\n        Var v, ReferenceCollection referenceInfo,\n        boolean maybeModifiedArguments)",
      "info" : "MethodDeclaration[8900-12268]:MethodDeclaration[8900-12399]"
    }, {
      "left" : "private void blacklistVarReferencesInTree(Node root, Scope scope)",
      "right" : "private void blacklistVarReferencesInTree(Node root, Scope scope)",
      "info" : "MethodDeclaration[12274-12728]:MethodDeclaration[12405-12859]"
    }, {
      "left" : "private boolean isVarInlineForbidden(Var var)",
      "right" : "private boolean isVarInlineForbidden(Var var)",
      "info" : "MethodDeclaration[12734-13446]:MethodDeclaration[12865-13577]"
    }, {
      "left" : "private void inline(Var v, Reference decl, Reference init, Reference ref)",
      "right" : "private void inline(Var v, Reference decl, Reference init, Reference ref)",
      "info" : "MethodDeclaration[13452-14412]:MethodDeclaration[13583-14543]"
    }, {
      "left" : "private void inlineWellDefinedVariable(Var v, Node value,\n        List<Reference> refSet)",
      "right" : "private void inlineWellDefinedVariable(Var v, Node value,\n        List<Reference> refSet)",
      "info" : "MethodDeclaration[14418-14778]:MethodDeclaration[14549-14909]"
    }, {
      "left" : "private void inlineDeclaredConstant(Var v, Node value,\n        List<Reference> refSet)",
      "right" : "private void inlineDeclaredConstant(Var v, Node value,\n        List<Reference> refSet)",
      "info" : "MethodDeclaration[14784-15231]:MethodDeclaration[14915-15362]"
    }, {
      "left" : "private void removeDeclaration(Reference decl)",
      "right" : "private void removeDeclaration(Reference decl)",
      "info" : "MethodDeclaration[15237-15721]:MethodDeclaration[15368-15852]"
    }, {
      "left" : "private void inlineValue(Var v, Reference ref, Node value)",
      "right" : "private void inlineValue(Var v, Reference ref, Node value)",
      "info" : "MethodDeclaration[15727-16423]:MethodDeclaration[15858-16554]"
    }, {
      "left" : "private boolean isInlineableDeclaredConstant(Var var,\n        ReferenceCollection refInfo)",
      "right" : "private boolean isInlineableDeclaredConstant(Var var,\n        ReferenceCollection refInfo)",
      "info" : "MethodDeclaration[16429-17515]:MethodDeclaration[16560-17646]"
    }, {
      "left" : "private boolean isStringWorthInlining(Var var, List<Reference> refs)",
      "right" : "private boolean isStringWorthInlining(Var var, List<Reference> refs)",
      "info" : "MethodDeclaration[17521-18583]:MethodDeclaration[17652-18714]"
    }, {
      "left" : "private boolean canInline(\n        Reference declaration,\n        Reference initialization,\n        Reference reference)",
      "right" : "private boolean canInline(\n        Reference declaration,\n        Reference initialization,\n        Reference reference)",
      "info" : "MethodDeclaration[18589-21090]:MethodDeclaration[18720-21221]"
    }, {
      "left" : "private boolean canMoveAggressively(Node value)",
      "right" : "private boolean canMoveAggressively(Node value)",
      "info" : "MethodDeclaration[21096-21430]:MethodDeclaration[21227-21561]"
    }, {
      "left" : "private boolean canMoveModerately(\n        Reference initialization,\n        Reference reference)",
      "right" : "private boolean canMoveModerately(\n        Reference initialization,\n        Reference reference)",
      "info" : "MethodDeclaration[21436-22978]:MethodDeclaration[21567-23109]"
    }, {
      "left" : "private boolean isValidDeclaration(Reference declaration)",
      "right" : "private boolean isValidDeclaration(Reference declaration)",
      "info" : "MethodDeclaration[22984-23311]:MethodDeclaration[23115-23442]"
    }, {
      "left" : "private boolean isValidInitialization(Reference initialization)",
      "right" : "private boolean isValidInitialization(Reference initialization)",
      "info" : "MethodDeclaration[23317-24219]:MethodDeclaration[23448-24350]"
    }, {
      "left" : "private boolean isValidReference(Reference reference)",
      "right" : "private boolean isValidReference(Reference reference)",
      "info" : "MethodDeclaration[24225-24433]:MethodDeclaration[24356-24564]"
    }, {
      "left" : "private boolean isImmutableAndWellDefinedVariable(Var v,\n        ReferenceCollection refInfo)",
      "right" : "private boolean isImmutableAndWellDefinedVariable(Var v,\n        ReferenceCollection refInfo)",
      "info" : "MethodDeclaration[24439-26179]:MethodDeclaration[24570-26310]"
    } ],
    "mappings" : [
 {
      "left" : "CompilerPass",
      "right" : "CompilerPass",
      "info" : "SimpleType[2183-2195]:SimpleType[2183-2195]"
    }, {
      "left" : "InlineVariables",
      "right" : "InlineVariables",
      "info" : "SimpleName[2616-2631]:SimpleName[2616-2631]"
    }, {
      "left" : "AbstractCompiler compiler",
      "right" : "AbstractCompiler compiler",
      "info" : "SingleVariableDeclaration[2639-2664]:SingleVariableDeclaration[2639-2664]"
    }, {
      "left" : "Mode mode",
      "right" : "Mode mode",
      "info" : "SingleVariableDeclaration[2672-2681]:SingleVariableDeclaration[2672-2681]"
    }, {
      "left" : "boolean inlineAllStrings",
      "right" : "boolean inlineAllStrings",
      "info" : "SingleVariableDeclaration[2689-2713]:SingleVariableDeclaration[2689-2713]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2715-2818]:Block[2715-2818]"
    }, {
      "left" : "this.compiler = compiler;",
      "right" : "this.compiler = compiler;",
      "info" : "ExpressionStatement[2721-2746]:ExpressionStatement[2721-2746]"
    }, {
      "left" : "this.mode = mode;",
      "right" : "this.mode = mode;",
      "info" : "ExpressionStatement[2751-2768]:ExpressionStatement[2751-2768]"
    }, {
      "left" : "this.inlineAllStrings = inlineAllStrings;",
      "right" : "this.inlineAllStrings = inlineAllStrings;",
      "info" : "ExpressionStatement[2773-2814]:ExpressionStatement[2773-2814]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[2822-2831]:MarkerAnnotation[2822-2831]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[2834-2840]:Modifier[2834-2840]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[2841-2845]:PrimitiveType[2841-2845]"
    }, {
      "left" : "process",
      "right" : "process",
      "info" : "SimpleName[2846-2853]:SimpleName[2846-2853]"
    }, {
      "left" : "Node externs",
      "right" : "Node externs",
      "info" : "SingleVariableDeclaration[2854-2866]:SingleVariableDeclaration[2854-2866]"
    }, {
      "left" : "Node root",
      "right" : "Node root",
      "info" : "SingleVariableDeclaration[2868-2877]:SingleVariableDeclaration[2868-2877]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2879-3060]:Block[2879-3060]"
    }, {
      "left" : "ReferenceCollectingCallback callback = new ReferenceCollectingCallback(\n        compiler, new InliningBehavior(), getFilterForMode());",
      "right" : "ReferenceCollectingCallback callback = new ReferenceCollectingCallback(\n        compiler, new InliningBehavior(), getFilterForMode());",
      "info" : "VariableDeclarationStatement[2885-3019]:VariableDeclarationStatement[2885-3019]"
    }, {
      "left" : "callback.process(externs, root);",
      "right" : "callback.process(externs, root);",
      "info" : "ExpressionStatement[3024-3056]:ExpressionStatement[3024-3056]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[3064-3071]:Modifier[3064-3071]"
    }, {
      "left" : "Predicate<Var>",
      "right" : "Predicate<Var>",
      "info" : "ParameterizedType[3072-3086]:ParameterizedType[3072-3086]"
    }, {
      "left" : "getFilterForMode",
      "right" : "getFilterForMode",
      "info" : "SimpleName[3087-3103]:SimpleName[3087-3103]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3106-3384]:Block[3106-3384]"
    }, {
      "left" : "switch (mode) {\n      case ALL:\n        return Predicates.<Var>alwaysTrue();\n      case LOCALS_ONLY:\n        return new IdentifyLocals();\n      case CONSTANTS_ONLY:\n        return new IdentifyConstants();\n      default:\n        throw new IllegalStateException();\n    }",
      "right" : "switch (mode) {\n      case ALL:\n        return Predicates.<Var>alwaysTrue();\n      case LOCALS_ONLY:\n        return new IdentifyLocals();\n      case CONSTANTS_ONLY:\n        return new IdentifyConstants();\n      default:\n        throw new IllegalStateException();\n    }",
      "info" : "SwitchStatement[3112-3380]:SwitchStatement[3112-3380]"
    }, {
      "left" : "case ALL:",
      "right" : "case ALL:",
      "info" : "SwitchCase[3134-3143]:SwitchCase[3134-3143]"
    }, {
      "left" : "return Predicates.<Var>alwaysTrue();",
      "right" : "return Predicates.<Var>alwaysTrue();",
      "info" : "ReturnStatement[3152-3188]:ReturnStatement[3152-3188]"
    }, {
      "left" : "case LOCALS_ONLY:",
      "right" : "case LOCALS_ONLY:",
      "info" : "SwitchCase[3195-3212]:SwitchCase[3195-3212]"
    }, {
      "left" : "return new IdentifyLocals();",
      "right" : "return new IdentifyLocals();",
      "info" : "ReturnStatement[3221-3249]:ReturnStatement[3221-3249]"
    }, {
      "left" : "case CONSTANTS_ONLY:",
      "right" : "case CONSTANTS_ONLY:",
      "info" : "SwitchCase[3256-3276]:SwitchCase[3256-3276]"
    }, {
      "left" : "return new IdentifyConstants();",
      "right" : "return new IdentifyConstants();",
      "info" : "ReturnStatement[3285-3316]:ReturnStatement[3285-3316]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[3323-3331]:SwitchCase[3323-3331]"
    }, {
      "left" : "throw new IllegalStateException();",
      "right" : "throw new IllegalStateException();",
      "info" : "ThrowStatement[3340-3374]:ThrowStatement[3340-3374]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[3723-3730]:Modifier[3723-3730]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[3731-3736]:TYPE_DECLARATION_KIND[3731-3736]"
    }, {
      "left" : "IdentifyConstants",
      "right" : "IdentifyConstants",
      "info" : "SimpleName[3737-3754]:SimpleName[3737-3754]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[3787-3796]:MarkerAnnotation[3787-3796]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[3801-3807]:Modifier[3801-3807]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[3808-3815]:PrimitiveType[3808-3815]"
    }, {
      "left" : "apply",
      "right" : "apply",
      "info" : "SimpleName[3816-3821]:SimpleName[3816-3821]"
    }, {
      "left" : "Var var",
      "right" : "Var var",
      "info" : "SingleVariableDeclaration[3822-3829]:SingleVariableDeclaration[3822-3829]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3831-3866]:Block[3831-3866]"
    }, {
      "left" : "return var.isConst();",
      "right" : "return var.isConst();",
      "info" : "ReturnStatement[3839-3860]:ReturnStatement[3839-3860]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[3921-3928]:Modifier[3921-3928]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[3929-3934]:TYPE_DECLARATION_KIND[3929-3934]"
    }, {
      "left" : "IdentifyLocals",
      "right" : "IdentifyLocals",
      "info" : "SimpleName[3935-3949]:SimpleName[3935-3949]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[3982-3991]:MarkerAnnotation[3982-3991]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[3996-4002]:Modifier[3996-4002]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[4003-4010]:PrimitiveType[4003-4010]"
    }, {
      "left" : "apply",
      "right" : "apply",
      "info" : "SimpleName[4011-4016]:SimpleName[4011-4016]"
    }, {
      "left" : "Var var",
      "right" : "Var var",
      "info" : "SingleVariableDeclaration[4017-4024]:SingleVariableDeclaration[4017-4024]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4026-4067]:Block[4026-4067]"
    }, {
      "left" : "return var.scope.isLocal();",
      "right" : "return var.scope.isLocal();",
      "info" : "ReturnStatement[4034-4061]:ReturnStatement[4034-4061]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[4075-4082]:Modifier[4075-4082]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[4083-4089]:Modifier[4083-4089]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[4090-4095]:TYPE_DECLARATION_KIND[4090-4095]"
    }, {
      "left" : "AliasCandidate",
      "right" : "AliasCandidate",
      "info" : "SimpleName[4096-4110]:SimpleName[4096-4110]"
    }, {
      "left" : "AliasCandidate",
      "right" : "AliasCandidate",
      "info" : "SimpleName[4194-4208]:SimpleName[4194-4208]"
    }, {
      "left" : "Var alias",
      "right" : "Var alias",
      "info" : "SingleVariableDeclaration[4209-4218]:SingleVariableDeclaration[4209-4218]"
    }, {
      "left" : "ReferenceCollection refInfo",
      "right" : "ReferenceCollection refInfo",
      "info" : "SingleVariableDeclaration[4220-4247]:SingleVariableDeclaration[4220-4247]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4249-4312]:Block[4249-4312]"
    }, {
      "left" : "this.alias = alias;",
      "right" : "this.alias = alias;",
      "info" : "ExpressionStatement[4257-4276]:ExpressionStatement[4257-4276]"
    }, {
      "left" : "this.refInfo = refInfo;",
      "right" : "this.refInfo = refInfo;",
      "info" : "ExpressionStatement[4283-4306]:ExpressionStatement[4283-4306]"
    }, {
      "left" : "Behavior",
      "right" : "Behavior",
      "info" : "SimpleType[4529-4537]:SimpleType[4529-4537]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[5033-5042]:MarkerAnnotation[5033-5042]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[5047-5053]:Modifier[5047-5053]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[5054-5058]:PrimitiveType[5054-5058]"
    }, {
      "left" : "afterExitScope",
      "right" : "afterExitScope",
      "info" : "SimpleName[5059-5073]:SimpleName[5059-5073]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[5074-5089]:SingleVariableDeclaration[5074-5089]"
    }, {
      "left" : "ReferenceMap referenceMap",
      "right" : "ReferenceMap referenceMap",
      "info" : "SingleVariableDeclaration[5091-5116]:SingleVariableDeclaration[5091-5116]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5118-5214]:Block[5118-5214]"
    }, {
      "left" : "collectAliasCandidates(t, referenceMap);",
      "right" : "collectAliasCandidates(t, referenceMap);",
      "info" : "ExpressionStatement[5126-5166]:ExpressionStatement[5126-5166]"
    }, {
      "left" : "doInlinesForScope(t, referenceMap);",
      "right" : "doInlinesForScope(t, referenceMap);",
      "info" : "ExpressionStatement[5173-5208]:ExpressionStatement[5173-5208]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[5352-5359]:Modifier[5352-5359]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[5360-5364]:PrimitiveType[5360-5364]"
    }, {
      "left" : "collectAliasCandidates",
      "right" : "collectAliasCandidates",
      "info" : "SimpleName[5365-5387]:SimpleName[5365-5387]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[5388-5403]:SingleVariableDeclaration[5388-5403]"
    }, {
      "left" : "ReferenceMap referenceMap",
      "right" : "ReferenceMap referenceMap",
      "info" : "SingleVariableDeclaration[5413-5438]:SingleVariableDeclaration[5413-5438]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5440-6374]:Block[5440-6374]"
    }, {
      "left" : "if (mode != Mode.CONSTANTS_ONLY)",
      "right" : "if (mode != Mode.CONSTANTS_ONLY)",
      "info" : "IfStatement[5448-6368]:IfStatement[5448-6368]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5481-6368]:Block[5481-6368]"
    }, {
      "left" : "for (Iterator<Var> it = t.getScope().getVars(); it.hasNext())",
      "right" : "for (Iterator<Var> it = t.getScope().getVars(); it.hasNext())",
      "info" : "ForStatement[5491-6360]:ForStatement[5491-6360]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5554-6360]:Block[5554-6360]"
    }, {
      "left" : "Var v = it.next();",
      "right" : "Var v = it.next();",
      "info" : "VariableDeclarationStatement[5566-5584]:VariableDeclarationStatement[5566-5584]"
    }, {
      "left" : "ReferenceCollection referenceInfo = referenceMap.getReferences(v);",
      "right" : "ReferenceCollection referenceInfo = referenceMap.getReferences(v);",
      "info" : "VariableDeclarationStatement[5595-5661]:VariableDeclarationStatement[5595-5661]"
    }, {
      "left" : "if (referenceInfo != null && referenceInfo.references.size() >= 2 &&\n              referenceInfo.isWellDefined() &&\n              referenceInfo.isAssignedOnceInLifetime())",
      "right" : "if (referenceInfo != null && referenceInfo.references.size() >= 2 &&\n              referenceInfo.isWellDefined() &&\n              referenceInfo.isAssignedOnceInLifetime())",
      "info" : "IfStatement[5899-6350]:IfStatement[5899-6350]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6071-6350]:Block[6071-6350]"
    }, {
      "left" : "Reference init = referenceInfo.getInitializingReference();",
      "right" : "Reference init = referenceInfo.getInitializingReference();",
      "info" : "VariableDeclarationStatement[6085-6143]:VariableDeclarationStatement[6085-6143]"
    }, {
      "left" : "Node value = init.getAssignedValue();",
      "right" : "Node value = init.getAssignedValue();",
      "info" : "VariableDeclarationStatement[6156-6193]:VariableDeclarationStatement[6156-6193]"
    }, {
      "left" : "if (value != null && value.isName())",
      "right" : "if (value != null && value.isName())",
      "info" : "IfStatement[6206-6338]:IfStatement[6206-6338]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6243-6338]:Block[6243-6338]"
    }, {
      "left" : "aliasCandidates.put(value, new AliasCandidate(v, referenceInfo));",
      "right" : "aliasCandidates.put(value, new AliasCandidate(v, referenceInfo));",
      "info" : "ExpressionStatement[6259-6324]:ExpressionStatement[6259-6324]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[6515-6522]:Modifier[6515-6522]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[6523-6527]:PrimitiveType[6523-6527]"
    }, {
      "left" : "doInlinesForScope",
      "right" : "doInlinesForScope",
      "info" : "SimpleName[6528-6545]:SimpleName[6528-6545]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[6546-6561]:SingleVariableDeclaration[6546-6561]"
    }, {
      "left" : "ReferenceMap referenceMap",
      "right" : "ReferenceMap referenceMap",
      "info" : "SingleVariableDeclaration[6563-6588]:SingleVariableDeclaration[6563-6588]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6590-7835]:Block[6590-7835]"
    }, {
      "left" : "boolean maybeModifiedArguments =\n          maybeEscapedOrModifiedArguments(t.getScope(), referenceMap);",
      "right" : "boolean maybeModifiedArguments =\n          maybeEscapedOrModifiedArguments(t.getScope(), referenceMap);",
      "info" : "VariableDeclarationStatement[6599-6702]:VariableDeclarationStatement[6599-6702]"
    }, {
      "left" : "for (Iterator<Var> it = t.getScope().getVars(); it.hasNext())",
      "right" : "for (Iterator<Var> it = t.getScope().getVars(); it.hasNext())",
      "info" : "ForStatement[6709-7829]:ForStatement[6709-7829]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6772-7829]:Block[6772-7829]"
    }, {
      "left" : "Var v = it.next();",
      "right" : "Var v = it.next();",
      "info" : "VariableDeclarationStatement[6782-6800]:VariableDeclarationStatement[6782-6800]"
    }, {
      "left" : "ReferenceCollection referenceInfo = referenceMap.getReferences(v);",
      "right" : "ReferenceCollection referenceInfo = referenceMap.getReferences(v);",
      "info" : "VariableDeclarationStatement[6810-6876]:VariableDeclarationStatement[6810-6876]"
    }, {
      "left" : "if (referenceInfo == null || isVarInlineForbidden(v))",
      "right" : "if (referenceInfo == null || isVarInlineForbidden(v))",
      "info" : "IfStatement[7003-7821]:IfStatement[7003-7821]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7057-7235]:Block[7057-7235]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[7216-7225]:ContinueStatement[7216-7225]"
    }, {
      "left" : "if (isInlineableDeclaredConstant(v, referenceInfo))",
      "right" : "if (isInlineableDeclaredConstant(v, referenceInfo))",
      "info" : "IfStatement[7241-7821]:IfStatement[7241-7821]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7293-7531]:Block[7293-7531]"
    }, {
      "left" : "Reference init = referenceInfo.getInitializingReferenceForConstants();",
      "right" : "Reference init = referenceInfo.getInitializingReferenceForConstants();",
      "info" : "VariableDeclarationStatement[7305-7375]:VariableDeclarationStatement[7305-7375]"
    }, {
      "left" : "Node value = init.getAssignedValue();",
      "right" : "Node value = init.getAssignedValue();",
      "info" : "VariableDeclarationStatement[7386-7423]:VariableDeclarationStatement[7386-7423]"
    }, {
      "left" : "inlineDeclaredConstant(v, value, referenceInfo.references);",
      "right" : "inlineDeclaredConstant(v, value, referenceInfo.references);",
      "info" : "ExpressionStatement[7434-7493]:ExpressionStatement[7434-7493]"
    }, {
      "left" : "staleVars.add(v);",
      "right" : "staleVars.add(v);",
      "info" : "ExpressionStatement[7504-7521]:ExpressionStatement[7504-7521]"
    }, {
      "left" : "if (mode == Mode.CONSTANTS_ONLY)",
      "right" : "if (mode == Mode.CONSTANTS_ONLY)",
      "info" : "IfStatement[7537-7821]:IfStatement[7537-7821]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7570-7732]:Block[7570-7732]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[7713-7722]:ContinueStatement[7713-7722]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7738-7821]:Block[7738-7821]"
    }, {
      "left" : "inlineNonConstants(v, referenceInfo, maybeModifiedArguments);",
      "right" : "inlineNonConstants(v, referenceInfo, maybeModifiedArguments);",
      "info" : "ExpressionStatement[7750-7811]:ExpressionStatement[7750-7811]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[7841-7848]:Modifier[7841-7848]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[7849-7856]:PrimitiveType[7849-7856]"
    }, {
      "left" : "maybeEscapedOrModifiedArguments",
      "right" : "maybeEscapedOrModifiedArguments",
      "info" : "SimpleName[7857-7888]:SimpleName[7857-7888]"
    }, {
      "left" : "Scope scope",
      "right" : "Scope scope",
      "info" : "SingleVariableDeclaration[7898-7909]:SingleVariableDeclaration[7898-7909]"
    }, {
      "left" : "ReferenceMap referenceMap",
      "right" : "ReferenceMap referenceMap",
      "info" : "SingleVariableDeclaration[7911-7936]:SingleVariableDeclaration[7911-7936]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7938-8666]:Block[7938-8666]"
    }, {
      "left" : "if (scope.isLocal())",
      "right" : "if (scope.isLocal())",
      "info" : "IfStatement[7946-8640]:IfStatement[7946-8640]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7967-8640]:Block[7967-8640]"
    }, {
      "left" : "Var arguments = scope.getArgumentsVar();",
      "right" : "Var arguments = scope.getArgumentsVar();",
      "info" : "VariableDeclarationStatement[7977-8017]:VariableDeclarationStatement[7977-8017]"
    }, {
      "left" : "ReferenceCollection refs = referenceMap.getReferences(arguments);",
      "right" : "ReferenceCollection refs = referenceMap.getReferences(arguments);",
      "info" : "VariableDeclarationStatement[8026-8091]:VariableDeclarationStatement[8026-8091]"
    }, {
      "left" : "if (refs != null && !refs.references.isEmpty())",
      "right" : "if (refs != null && !refs.references.isEmpty())",
      "info" : "IfStatement[8100-8632]:IfStatement[8100-8632]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8148-8632]:Block[8148-8632]"
    }, {
      "left" : "for (Reference ref : refs.references)",
      "right" : "for (Reference ref : refs.references)",
      "info" : "EnhancedForStatement[8160-8622]:EnhancedForStatement[8160-8622]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8198-8622]:Block[8198-8622]"
    }, {
      "left" : "Node refNode = ref.getNode();",
      "right" : "Node refNode = ref.getNode();",
      "info" : "VariableDeclarationStatement[8212-8241]:VariableDeclarationStatement[8212-8241]"
    }, {
      "left" : "Node refParent = ref.getParent();",
      "right" : "Node refParent = ref.getParent();",
      "info" : "VariableDeclarationStatement[8254-8287]:VariableDeclarationStatement[8254-8287]"
    }, {
      "left" : "if (!(NodeUtil.isGet(refParent)\n                && refNode == ref.getParent().getFirstChild()\n                && !isLValue(refParent)))",
      "right" : "if (!(NodeUtil.isGet(refParent)\n                && refNode == ref.getParent().getFirstChild()\n                && !isLValue(refParent)))",
      "info" : "IfStatement[8432-8610]:IfStatement[8432-8610]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8568-8610]:Block[8568-8610]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[8584-8596]:ReturnStatement[8584-8596]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[8647-8660]:ReturnStatement[8647-8660]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[8672-8679]:Modifier[8672-8679]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[8680-8687]:PrimitiveType[8680-8687]"
    }, {
      "left" : "isLValue",
      "right" : "isLValue",
      "info" : "SimpleName[8688-8696]:SimpleName[8688-8696]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[8697-8703]:SingleVariableDeclaration[8697-8703]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8705-8894]:Block[8705-8894]"
    }, {
      "left" : "Node parent = n.getParent();",
      "right" : "Node parent = n.getParent();",
      "info" : "VariableDeclarationStatement[8713-8741]:VariableDeclarationStatement[8713-8741]"
    }, {
      "left" : "return (parent.isInc()\n          || parent.isDec()\n          || (NodeUtil.isAssignmentOp(parent)\n          && parent.getFirstChild() == n));",
      "right" : "return (parent.isInc()\n          || parent.isDec()\n          || (NodeUtil.isAssignmentOp(parent)\n          && parent.getFirstChild() == n));",
      "info" : "ReturnStatement[8748-8888]:ReturnStatement[8748-8888]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[8900-8907]:Modifier[8900-8907]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[8908-8912]:PrimitiveType[8908-8912]"
    }, {
      "left" : "inlineNonConstants",
      "right" : "inlineNonConstants",
      "info" : "SimpleName[8913-8931]:SimpleName[8913-8931]"
    }, {
      "left" : "Var v",
      "right" : "Var v",
      "info" : "SingleVariableDeclaration[8941-8946]:SingleVariableDeclaration[8941-8946]"
    }, {
      "left" : "ReferenceCollection referenceInfo",
      "right" : "ReferenceCollection referenceInfo",
      "info" : "SingleVariableDeclaration[8948-8981]:SingleVariableDeclaration[8948-8981]"
    }, {
      "left" : "boolean maybeModifiedArguments",
      "right" : "boolean maybeModifiedArguments",
      "info" : "SingleVariableDeclaration[8991-9021]:SingleVariableDeclaration[8991-9021]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9023-12268]:Block[9023-12399]"
    }, {
      "left" : "int refCount = referenceInfo.references.size();",
      "right" : "int refCount = referenceInfo.references.size();",
      "info" : "VariableDeclarationStatement[9031-9078]:VariableDeclarationStatement[9031-9078]"
    }, {
      "left" : "Reference declaration = referenceInfo.references.get(0);",
      "right" : "Reference declaration = referenceInfo.references.get(0);",
      "info" : "VariableDeclarationStatement[9085-9141]:VariableDeclarationStatement[9085-9141]"
    }, {
      "left" : "Reference init = referenceInfo.getInitializingReference();",
      "right" : "Reference init = referenceInfo.getInitializingReference();",
      "info" : "VariableDeclarationStatement[9148-9206]:VariableDeclarationStatement[9148-9206]"
    }, {
      "left" : "int firstRefAfterInit = (declaration == init) ? 2 : 3;",
      "right" : "int firstRefAfterInit = (declaration == init) ? 2 : 3;",
      "info" : "VariableDeclarationStatement[9213-9267]:VariableDeclarationStatement[9213-9267]"
    }, {
      "left" : "if (refCount > 1 &&\n          isImmutableAndWellDefinedVariable(v, referenceInfo))",
      "right" : "if (refCount > 1 &&\n          isImmutableAndWellDefinedVariable(v, referenceInfo))",
      "info" : "IfStatement[9275-10801]:IfStatement[9275-10801]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9358-9951]:Block[9358-9951]"
    }, {
      "left" : "Node value;",
      "right" : "Node value;",
      "info" : "VariableDeclarationStatement[9513-9524]:VariableDeclarationStatement[9513-9524]"
    }, {
      "left" : "if (init != null)",
      "right" : "if (init != null)",
      "info" : "IfStatement[9533-9803]:IfStatement[9533-9803]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9551-9605]:Block[9551-9605]"
    }, {
      "left" : "value = init.getAssignedValue();",
      "right" : "value = init.getAssignedValue();",
      "info" : "ExpressionStatement[9563-9595]:ExpressionStatement[9563-9595]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9611-9803]:Block[9611-9803]"
    }, {
      "left" : "Node srcLocation = declaration.getNode();",
      "right" : "Node srcLocation = declaration.getNode();",
      "info" : "VariableDeclarationStatement[9694-9735]:VariableDeclarationStatement[9694-9735]"
    }, {
      "left" : "value = NodeUtil.newUndefinedNode(srcLocation);",
      "right" : "value = NodeUtil.newUndefinedNode(srcLocation);",
      "info" : "ExpressionStatement[9746-9793]:ExpressionStatement[9746-9793]"
    }, {
      "left" : "Preconditions.checkNotNull(value);",
      "right" : "Preconditions.checkNotNull(value);",
      "info" : "ExpressionStatement[9812-9846]:ExpressionStatement[9812-9846]"
    }, {
      "left" : "inlineWellDefinedVariable(v, value, referenceInfo.references);",
      "right" : "inlineWellDefinedVariable(v, value, referenceInfo.references);",
      "info" : "ExpressionStatement[9855-9917]:ExpressionStatement[9855-9917]"
    }, {
      "left" : "staleVars.add(v);",
      "right" : "staleVars.add(v);",
      "info" : "ExpressionStatement[9926-9943]:ExpressionStatement[9926-9943]"
    }, {
      "left" : "if (refCount == firstRefAfterInit)",
      "right" : "if (refCount == firstRefAfterInit)",
      "info" : "IfStatement[9957-10801]:IfStatement[9957-10801]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9992-10342]:Block[9992-10342]"
    }, {
      "left" : "Reference reference = referenceInfo.references.get(\n            firstRefAfterInit - 1);",
      "right" : "Reference reference = referenceInfo.references.get(\n            firstRefAfterInit - 1);",
      "info" : "VariableDeclarationStatement[10103-10190]:VariableDeclarationStatement[10103-10190]"
    }, {
      "left" : "if (canInline(declaration, init, reference))",
      "right" : "if (canInline(declaration, init, reference))",
      "info" : "IfStatement[10199-10334]:IfStatement[10199-10334]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10244-10334]:Block[10244-10334]"
    }, {
      "left" : "inline(v, declaration, init, reference);",
      "right" : "inline(v, declaration, init, reference);",
      "info" : "ExpressionStatement[10256-10296]:ExpressionStatement[10256-10296]"
    }, {
      "left" : "staleVars.add(v);",
      "right" : "staleVars.add(v);",
      "info" : "ExpressionStatement[10307-10324]:ExpressionStatement[10307-10324]"
    }, {
      "left" : "if (declaration != init && refCount == 2)",
      "right" : "if (declaration != init && refCount == 2)",
      "info" : "IfStatement[10348-10801]:IfStatement[10348-10801]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10390-10801]:Block[10390-10801]"
    }, {
      "left" : "if (isValidDeclaration(declaration) && isValidInitialization(init))",
      "right" : "if (isValidDeclaration(declaration) && isValidInitialization(init))",
      "info" : "IfStatement[10400-10793]:IfStatement[10400-10793]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10468-10793]:Block[10468-10793]"
    }, {
      "left" : "Node value = init.getAssignedValue();",
      "right" : "Node value = init.getAssignedValue();",
      "info" : "VariableDeclarationStatement[10600-10637]:VariableDeclarationStatement[10600-10637]"
    }, {
      "left" : "Preconditions.checkNotNull(value);",
      "right" : "Preconditions.checkNotNull(value);",
      "info" : "ExpressionStatement[10648-10682]:ExpressionStatement[10648-10682]"
    }, {
      "left" : "inlineWellDefinedVariable(v, value, referenceInfo.references);",
      "right" : "inlineWellDefinedVariable(v, value, referenceInfo.references);",
      "info" : "ExpressionStatement[10693-10755]:ExpressionStatement[10693-10755]"
    }, {
      "left" : "staleVars.add(v);",
      "right" : "staleVars.add(v);",
      "info" : "ExpressionStatement[10766-10783]:ExpressionStatement[10766-10783]"
    }, {
      "left" : "if (!maybeModifiedArguments &&\n          !staleVars.contains(v) &&\n          referenceInfo.isWellDefined() &&\n          referenceInfo.isAssignedOnceInLifetime())",
      "right" : "if (!maybeModifiedArguments &&\n          !staleVars.contains(v) &&\n          referenceInfo.isWellDefined() &&\n          referenceInfo.isAssignedOnceInLifetime() &&\n          // Inlining the variable based solely on well-defined and assigned\n          // once is *NOT* correct. We relax the correctness requirement if\n          // the variable is declared constant.\n          (isInlineableDeclaredConstant(v, referenceInfo) ||\n           referenceInfo.isOnlyAssignmentSameScopeAsDeclaration()))",
      "info" : "IfStatement[11047-12262]:IfStatement[11047-12393]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11209-12262]:Block[11541-12393]"
    }, {
      "left" : "List<Reference> refs = referenceInfo.references;",
      "right" : "List<Reference> refs = referenceInfo.references;",
      "info" : "VariableDeclarationStatement[11420-11468]:VariableDeclarationStatement[11551-11599]"
    }, {
      "left" : "for (int i = 1 /* start from a read */; i < refs.size(); i++)",
      "right" : "for (int i = 1 /* start from a read */; i < refs.size(); i++)",
      "info" : "ForStatement[11477-12254]:ForStatement[11608-12385]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11539-12254]:Block[11670-12385]"
    }, {
      "left" : "Node nameNode = refs.get(i).getNode();",
      "right" : "Node nameNode = refs.get(i).getNode();",
      "info" : "VariableDeclarationStatement[11551-11589]:VariableDeclarationStatement[11682-11720]"
    }, {
      "left" : "if (aliasCandidates.containsKey(nameNode))",
      "right" : "if (aliasCandidates.containsKey(nameNode))",
      "info" : "IfStatement[11600-12244]:IfStatement[11731-12375]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11643-12244]:Block[11774-12375]"
    }, {
      "left" : "AliasCandidate candidate = aliasCandidates.get(nameNode);",
      "right" : "AliasCandidate candidate = aliasCandidates.get(nameNode);",
      "info" : "VariableDeclarationStatement[11657-11714]:VariableDeclarationStatement[11788-11845]"
    }, {
      "left" : "if (!staleVars.contains(candidate.alias) &&\n                !isVarInlineForbidden(candidate.alias))",
      "right" : "if (!staleVars.contains(candidate.alias) &&\n                !isVarInlineForbidden(candidate.alias))",
      "info" : "IfStatement[11727-12232]:IfStatement[11858-12363]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11827-12232]:Block[11958-12363]"
    }, {
      "left" : "Reference aliasInit;",
      "right" : "Reference aliasInit;",
      "info" : "VariableDeclarationStatement[11843-11863]:VariableDeclarationStatement[11974-11994]"
    }, {
      "left" : "aliasInit = candidate.refInfo.getInitializingReference();",
      "right" : "aliasInit = candidate.refInfo.getInitializingReference();",
      "info" : "ExpressionStatement[11878-11935]:ExpressionStatement[12009-12066]"
    }, {
      "left" : "Node value = aliasInit.getAssignedValue();",
      "right" : "Node value = aliasInit.getAssignedValue();",
      "info" : "VariableDeclarationStatement[11950-11992]:VariableDeclarationStatement[12081-12123]"
    }, {
      "left" : "Preconditions.checkNotNull(value);",
      "right" : "Preconditions.checkNotNull(value);",
      "info" : "ExpressionStatement[12007-12041]:ExpressionStatement[12138-12172]"
    }, {
      "left" : "inlineWellDefinedVariable(candidate.alias,\n                  value,\n                  candidate.refInfo.references);",
      "right" : "inlineWellDefinedVariable(candidate.alias,\n                  value,\n                  candidate.refInfo.references);",
      "info" : "ExpressionStatement[12056-12172]:ExpressionStatement[12187-12303]"
    }, {
      "left" : "staleVars.add(candidate.alias);",
      "right" : "staleVars.add(candidate.alias);",
      "info" : "ExpressionStatement[12187-12218]:ExpressionStatement[12318-12349]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[12436-12443]:Modifier[12567-12574]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[12444-12448]:PrimitiveType[12575-12579]"
    }, {
      "left" : "blacklistVarReferencesInTree",
      "right" : "blacklistVarReferencesInTree",
      "info" : "SimpleName[12449-12477]:SimpleName[12580-12608]"
    }, {
      "left" : "Node root",
      "right" : "Node root",
      "info" : "SingleVariableDeclaration[12478-12487]:SingleVariableDeclaration[12609-12618]"
    }, {
      "left" : "Scope scope",
      "right" : "Scope scope",
      "info" : "SingleVariableDeclaration[12489-12500]:SingleVariableDeclaration[12620-12631]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12502-12728]:Block[12633-12859]"
    }, {
      "left" : "for (Node c = root.getFirstChild(); c != null; c = c.getNext())",
      "right" : "for (Node c = root.getFirstChild(); c != null; c = c.getNext())",
      "info" : "ForStatement[12510-12631]:ForStatement[12641-12762]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12574-12631]:Block[12705-12762]"
    }, {
      "left" : "blacklistVarReferencesInTree(c, scope);",
      "right" : "blacklistVarReferencesInTree(c, scope);",
      "info" : "ExpressionStatement[12584-12623]:ExpressionStatement[12715-12754]"
    }, {
      "left" : "if (root.isName())",
      "right" : "if (root.isName())",
      "info" : "IfStatement[12639-12722]:IfStatement[12770-12853]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12658-12722]:Block[12789-12853]"
    }, {
      "left" : "staleVars.add(scope.getVar(root.getString()));",
      "right" : "staleVars.add(scope.getVar(root.getString()));",
      "info" : "ExpressionStatement[12668-12714]:ExpressionStatement[12799-12845]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[12817-12824]:Modifier[12948-12955]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[12825-12832]:PrimitiveType[12956-12963]"
    }, {
      "left" : "isVarInlineForbidden",
      "right" : "isVarInlineForbidden",
      "info" : "SimpleName[12833-12853]:SimpleName[12964-12984]"
    }, {
      "left" : "Var var",
      "right" : "Var var",
      "info" : "SingleVariableDeclaration[12854-12861]:SingleVariableDeclaration[12985-12992]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12863-13446]:Block[12994-13577]"
    }, {
      "left" : "return var.isExtern()\n          || compiler.getCodingConvention().isExported(var.name)\n          || RenameProperties.RENAME_PROPERTY_FUNCTION_NAME.equals(var.name)\n          || staleVars.contains(var);",
      "right" : "return var.isExtern()\n          || compiler.getCodingConvention().isExported(var.name)\n          || RenameProperties.RENAME_PROPERTY_FUNCTION_NAME.equals(var.name)\n          || staleVars.contains(var);",
      "info" : "ReturnStatement[13239-13440]:ReturnStatement[13370-13571]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[13559-13566]:Modifier[13690-13697]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[13567-13571]:PrimitiveType[13698-13702]"
    }, {
      "left" : "inline",
      "right" : "inline",
      "info" : "SimpleName[13572-13578]:SimpleName[13703-13709]"
    }, {
      "left" : "Var v",
      "right" : "Var v",
      "info" : "SingleVariableDeclaration[13579-13584]:SingleVariableDeclaration[13710-13715]"
    }, {
      "left" : "Reference decl",
      "right" : "Reference decl",
      "info" : "SingleVariableDeclaration[13586-13600]:SingleVariableDeclaration[13717-13731]"
    }, {
      "left" : "Reference init",
      "right" : "Reference init",
      "info" : "SingleVariableDeclaration[13602-13616]:SingleVariableDeclaration[13733-13747]"
    }, {
      "left" : "Reference ref",
      "right" : "Reference ref",
      "info" : "SingleVariableDeclaration[13618-13631]:SingleVariableDeclaration[13749-13762]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13633-14412]:Block[13764-14543]"
    }, {
      "left" : "Node value = init.getAssignedValue();",
      "right" : "Node value = init.getAssignedValue();",
      "info" : "VariableDeclarationStatement[13641-13678]:VariableDeclarationStatement[13772-13809]"
    }, {
      "left" : "Preconditions.checkState(value != null);",
      "right" : "Preconditions.checkState(value != null);",
      "info" : "ExpressionStatement[13685-13725]:ExpressionStatement[13816-13856]"
    }, {
      "left" : "boolean isFunctionDeclaration = NodeUtil.isFunctionDeclaration(value);",
      "right" : "boolean isFunctionDeclaration = NodeUtil.isFunctionDeclaration(value);",
      "info" : "VariableDeclarationStatement[13811-13881]:VariableDeclarationStatement[13942-14012]"
    }, {
      "left" : "compiler.reportChangeToEnclosingScope(ref.getNode());",
      "right" : "compiler.reportChangeToEnclosingScope(ref.getNode());",
      "info" : "ExpressionStatement[13888-13941]:ExpressionStatement[14019-14072]"
    }, {
      "left" : "inlineValue(v, ref, value.detachFromParent());",
      "right" : "inlineValue(v, ref, value.detachFromParent());",
      "info" : "ExpressionStatement[13948-13994]:ExpressionStatement[14079-14125]"
    }, {
      "left" : "if (decl != init)",
      "right" : "if (decl != init)",
      "info" : "IfStatement[14001-14208]:IfStatement[14132-14339]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14019-14208]:Block[14150-14339]"
    }, {
      "left" : "Node expressRoot = init.getGrandparent();",
      "right" : "Node expressRoot = init.getGrandparent();",
      "info" : "VariableDeclarationStatement[14029-14070]:VariableDeclarationStatement[14160-14201]"
    }, {
      "left" : "Preconditions.checkState(expressRoot.isExprResult());",
      "right" : "Preconditions.checkState(expressRoot.isExprResult());",
      "info" : "ExpressionStatement[14079-14132]:ExpressionStatement[14210-14263]"
    }, {
      "left" : "NodeUtil.removeChild(expressRoot.getParent(), expressRoot);",
      "right" : "NodeUtil.removeChild(expressRoot.getParent(), expressRoot);",
      "info" : "ExpressionStatement[14141-14200]:ExpressionStatement[14272-14331]"
    }, {
      "left" : "if (!isFunctionDeclaration)",
      "right" : "if (!isFunctionDeclaration)",
      "info" : "IfStatement[14273-14406]:IfStatement[14404-14537]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14301-14406]:Block[14432-14537]"
    }, {
      "left" : "compiler.reportChangeToEnclosingScope(decl.getNode());",
      "right" : "compiler.reportChangeToEnclosingScope(decl.getNode());",
      "info" : "ExpressionStatement[14311-14365]:ExpressionStatement[14442-14496]"
    }, {
      "left" : "removeDeclaration(decl);",
      "right" : "removeDeclaration(decl);",
      "info" : "ExpressionStatement[14374-14398]:ExpressionStatement[14505-14529]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[14498-14505]:Modifier[14629-14636]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[14506-14510]:PrimitiveType[14637-14641]"
    }, {
      "left" : "inlineWellDefinedVariable",
      "right" : "inlineWellDefinedVariable",
      "info" : "SimpleName[14511-14536]:SimpleName[14642-14667]"
    }, {
      "left" : "Var v",
      "right" : "Var v",
      "info" : "SingleVariableDeclaration[14537-14542]:SingleVariableDeclaration[14668-14673]"
    }, {
      "left" : "Node value",
      "right" : "Node value",
      "info" : "SingleVariableDeclaration[14544-14554]:SingleVariableDeclaration[14675-14685]"
    }, {
      "left" : "List<Reference> refSet",
      "right" : "List<Reference> refSet",
      "info" : "SingleVariableDeclaration[14564-14586]:SingleVariableDeclaration[14695-14717]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14588-14778]:Block[14719-14909]"
    }, {
      "left" : "Reference decl = refSet.get(0);",
      "right" : "Reference decl = refSet.get(0);",
      "info" : "VariableDeclarationStatement[14596-14627]:VariableDeclarationStatement[14727-14758]"
    }, {
      "left" : "for (int i = 1; i < refSet.size(); i++)",
      "right" : "for (int i = 1; i < refSet.size(); i++)",
      "info" : "ForStatement[14634-14741]:ForStatement[14765-14872]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14674-14741]:Block[14805-14872]"
    }, {
      "left" : "inlineValue(v, refSet.get(i), value.cloneTree());",
      "right" : "inlineValue(v, refSet.get(i), value.cloneTree());",
      "info" : "ExpressionStatement[14684-14733]:ExpressionStatement[14815-14864]"
    }, {
      "left" : "removeDeclaration(decl);",
      "right" : "removeDeclaration(decl);",
      "info" : "ExpressionStatement[14748-14772]:ExpressionStatement[14879-14903]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[14835-14842]:Modifier[14966-14973]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[14843-14847]:PrimitiveType[14974-14978]"
    }, {
      "left" : "inlineDeclaredConstant",
      "right" : "inlineDeclaredConstant",
      "info" : "SimpleName[14848-14870]:SimpleName[14979-15001]"
    }, {
      "left" : "Var v",
      "right" : "Var v",
      "info" : "SingleVariableDeclaration[14871-14876]:SingleVariableDeclaration[15002-15007]"
    }, {
      "left" : "Node value",
      "right" : "Node value",
      "info" : "SingleVariableDeclaration[14878-14888]:SingleVariableDeclaration[15009-15019]"
    }, {
      "left" : "List<Reference> refSet",
      "right" : "List<Reference> refSet",
      "info" : "SingleVariableDeclaration[14898-14920]:SingleVariableDeclaration[15029-15051]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14922-15231]:Block[15053-15362]"
    }, {
      "left" : "Reference decl = null;",
      "right" : "Reference decl = null;",
      "info" : "VariableDeclarationStatement[14986-15008]:VariableDeclarationStatement[15117-15139]"
    }, {
      "left" : "for (Reference r : refSet)",
      "right" : "for (Reference r : refSet)",
      "info" : "EnhancedForStatement[15016-15193]:EnhancedForStatement[15147-15324]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15043-15193]:Block[15174-15324]"
    }, {
      "left" : "if (r.getNode() == v.getNameNode())",
      "right" : "if (r.getNode() == v.getNameNode())",
      "info" : "IfStatement[15053-15185]:IfStatement[15184-15316]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15089-15120]:Block[15220-15251]"
    }, {
      "left" : "decl = r;",
      "right" : "decl = r;",
      "info" : "ExpressionStatement[15101-15110]:ExpressionStatement[15232-15241]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15126-15185]:Block[15257-15316]"
    }, {
      "left" : "inlineValue(v, r, value.cloneTree());",
      "right" : "inlineValue(v, r, value.cloneTree());",
      "info" : "ExpressionStatement[15138-15175]:ExpressionStatement[15269-15306]"
    }, {
      "left" : "removeDeclaration(decl);",
      "right" : "removeDeclaration(decl);",
      "info" : "ExpressionStatement[15201-15225]:ExpressionStatement[15332-15356]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[15294-15301]:Modifier[15425-15432]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[15302-15306]:PrimitiveType[15433-15437]"
    }, {
      "left" : "removeDeclaration",
      "right" : "removeDeclaration",
      "info" : "SimpleName[15307-15324]:SimpleName[15438-15455]"
    }, {
      "left" : "Reference decl",
      "right" : "Reference decl",
      "info" : "SingleVariableDeclaration[15325-15339]:SingleVariableDeclaration[15456-15470]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15341-15721]:Block[15472-15852]"
    }, {
      "left" : "Node varNode = decl.getParent();",
      "right" : "Node varNode = decl.getParent();",
      "info" : "VariableDeclarationStatement[15349-15381]:VariableDeclarationStatement[15480-15512]"
    }, {
      "left" : "Node grandparent = decl.getGrandparent();",
      "right" : "Node grandparent = decl.getGrandparent();",
      "info" : "VariableDeclarationStatement[15388-15429]:VariableDeclarationStatement[15519-15560]"
    }, {
      "left" : "compiler.reportChangeToEnclosingScope(decl.getNode());",
      "right" : "compiler.reportChangeToEnclosingScope(decl.getNode());",
      "info" : "ExpressionStatement[15437-15491]:ExpressionStatement[15568-15622]"
    }, {
      "left" : "varNode.removeChild(decl.getNode());",
      "right" : "varNode.removeChild(decl.getNode());",
      "info" : "ExpressionStatement[15498-15534]:ExpressionStatement[15629-15665]"
    }, {
      "left" : "if (!varNode.hasChildren())",
      "right" : "if (!varNode.hasChildren())",
      "info" : "IfStatement[15575-15715]:IfStatement[15706-15846]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15603-15715]:Block[15734-15846]"
    }, {
      "left" : "Preconditions.checkState(varNode.isVar());",
      "right" : "Preconditions.checkState(varNode.isVar());",
      "info" : "ExpressionStatement[15613-15655]:ExpressionStatement[15744-15786]"
    }, {
      "left" : "NodeUtil.removeChild(grandparent, varNode);",
      "right" : "NodeUtil.removeChild(grandparent, varNode);",
      "info" : "ExpressionStatement[15664-15707]:ExpressionStatement[15795-15838]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[16008-16015]:Modifier[16139-16146]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[16016-16020]:PrimitiveType[16147-16151]"
    }, {
      "left" : "inlineValue",
      "right" : "inlineValue",
      "info" : "SimpleName[16021-16032]:SimpleName[16152-16163]"
    }, {
      "left" : "Var v",
      "right" : "Var v",
      "info" : "SingleVariableDeclaration[16033-16038]:SingleVariableDeclaration[16164-16169]"
    }, {
      "left" : "Reference ref",
      "right" : "Reference ref",
      "info" : "SingleVariableDeclaration[16040-16053]:SingleVariableDeclaration[16171-16184]"
    }, {
      "left" : "Node value",
      "right" : "Node value",
      "info" : "SingleVariableDeclaration[16055-16065]:SingleVariableDeclaration[16186-16196]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16067-16423]:Block[16198-16554]"
    }, {
      "left" : "compiler.reportChangeToEnclosingScope(ref.getNode());",
      "right" : "compiler.reportChangeToEnclosingScope(ref.getNode());",
      "info" : "ExpressionStatement[16075-16128]:ExpressionStatement[16206-16259]"
    }, {
      "left" : "if (ref.isSimpleAssignmentToName())",
      "right" : "if (ref.isSimpleAssignmentToName())",
      "info" : "IfStatement[16135-16365]:IfStatement[16266-16496]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16171-16290]:Block[16302-16421]"
    }, {
      "left" : "ref.getGrandparent().replaceChild(ref.getParent(), value);",
      "right" : "ref.getGrandparent().replaceChild(ref.getParent(), value);",
      "info" : "ExpressionStatement[16224-16282]:ExpressionStatement[16355-16413]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16296-16365]:Block[16427-16496]"
    }, {
      "left" : "ref.getParent().replaceChild(ref.getNode(), value);",
      "right" : "ref.getParent().replaceChild(ref.getNode(), value);",
      "info" : "ExpressionStatement[16306-16357]:ExpressionStatement[16437-16488]"
    }, {
      "left" : "blacklistVarReferencesInTree(value, v.scope);",
      "right" : "blacklistVarReferencesInTree(value, v.scope);",
      "info" : "ExpressionStatement[16372-16417]:ExpressionStatement[16503-16548]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[16543-16550]:Modifier[16674-16681]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[16551-16558]:PrimitiveType[16682-16689]"
    }, {
      "left" : "isInlineableDeclaredConstant",
      "right" : "isInlineableDeclaredConstant",
      "info" : "SimpleName[16559-16587]:SimpleName[16690-16718]"
    }, {
      "left" : "Var var",
      "right" : "Var var",
      "info" : "SingleVariableDeclaration[16588-16595]:SingleVariableDeclaration[16719-16726]"
    }, {
      "left" : "ReferenceCollection refInfo",
      "right" : "ReferenceCollection refInfo",
      "info" : "SingleVariableDeclaration[16605-16632]:SingleVariableDeclaration[16736-16763]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16634-17515]:Block[16765-17646]"
    }, {
      "left" : "if (!identifyConstants.apply(var))",
      "right" : "if (!identifyConstants.apply(var))",
      "info" : "IfStatement[16642-16708]:IfStatement[16773-16839]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16677-16708]:Block[16808-16839]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[16687-16700]:ReturnStatement[16818-16831]"
    }, {
      "left" : "if (!refInfo.isAssignedOnceInLifetime())",
      "right" : "if (!refInfo.isAssignedOnceInLifetime())",
      "info" : "IfStatement[16716-16788]:IfStatement[16847-16919]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16757-16788]:Block[16888-16919]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[16767-16780]:ReturnStatement[16898-16911]"
    }, {
      "left" : "Reference init = refInfo.getInitializingReferenceForConstants();",
      "right" : "Reference init = refInfo.getInitializingReferenceForConstants();",
      "info" : "VariableDeclarationStatement[16796-16860]:VariableDeclarationStatement[16927-16991]"
    }, {
      "left" : "if (init == null)",
      "right" : "if (init == null)",
      "info" : "IfStatement[16867-16916]:IfStatement[16998-17047]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16885-16916]:Block[17016-17047]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[16895-16908]:ReturnStatement[17026-17039]"
    }, {
      "left" : "Node value = init.getAssignedValue();",
      "right" : "Node value = init.getAssignedValue();",
      "info" : "VariableDeclarationStatement[16924-16961]:VariableDeclarationStatement[17055-17092]"
    }, {
      "left" : "if (value == null)",
      "right" : "if (value == null)",
      "info" : "IfStatement[16968-17231]:IfStatement[17099-17362]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16987-17231]:Block[17118-17362]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[17210-17223]:ReturnStatement[17341-17354]"
    }, {
      "left" : "if (!NodeUtil.isImmutableValue(value))",
      "right" : "if (!NodeUtil.isImmutableValue(value))",
      "info" : "IfStatement[17283-17353]:IfStatement[17414-17484]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17322-17353]:Block[17453-17484]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[17332-17345]:ReturnStatement[17463-17476]"
    }, {
      "left" : "return !value.isString() ||\n          isStringWorthInlining(var, refInfo.references);",
      "right" : "return !value.isString() ||\n          isStringWorthInlining(var, refInfo.references);",
      "info" : "ReturnStatement[17424-17509]:ReturnStatement[17555-17640]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[17596-17603]:Modifier[17727-17734]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[17604-17611]:PrimitiveType[17735-17742]"
    }, {
      "left" : "isStringWorthInlining",
      "right" : "isStringWorthInlining",
      "info" : "SimpleName[17612-17633]:SimpleName[17743-17764]"
    }, {
      "left" : "Var var",
      "right" : "Var var",
      "info" : "SingleVariableDeclaration[17634-17641]:SingleVariableDeclaration[17765-17772]"
    }, {
      "left" : "List<Reference> refs",
      "right" : "List<Reference> refs",
      "info" : "SingleVariableDeclaration[17643-17663]:SingleVariableDeclaration[17774-17794]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17665-18583]:Block[17796-18714]"
    }, {
      "left" : "if (!inlineAllStrings && !var.isDefine())",
      "right" : "if (!inlineAllStrings && !var.isDefine())",
      "info" : "IfStatement[17673-18557]:IfStatement[17804-18688]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17715-18557]:Block[17846-18688]"
    }, {
      "left" : "int len = var.getInitialValue().getString().length() + \"''\".length();",
      "right" : "int len = var.getInitialValue().getString().length() + \"''\".length();",
      "info" : "VariableDeclarationStatement[17725-17794]:VariableDeclarationStatement[17856-17925]"
    }, {
      "left" : "int noInlineBytes = \"var xx=;\".length() + len +\n                            4 * (refs.size() - 1);",
      "right" : "int noInlineBytes = \"var xx=;\".length() + len +\n                            4 * (refs.size() - 1);",
      "info" : "VariableDeclarationStatement[18046-18144]:VariableDeclarationStatement[18177-18275]"
    }, {
      "left" : "int inlineBytes = (len - 1) * (refs.size() - 1);",
      "right" : "int inlineBytes = (len - 1) * (refs.size() - 1);",
      "info" : "VariableDeclarationStatement[18356-18404]:VariableDeclarationStatement[18487-18535]"
    }, {
      "left" : "return noInlineBytes >= inlineBytes;",
      "right" : "return noInlineBytes >= inlineBytes;",
      "info" : "ReturnStatement[18513-18549]:ReturnStatement[18644-18680]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[18565-18577]:ReturnStatement[18696-18708]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[18730-18737]:Modifier[18861-18868]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[18738-18745]:PrimitiveType[18869-18876]"
    }, {
      "left" : "canInline",
      "right" : "canInline",
      "info" : "SimpleName[18746-18755]:SimpleName[18877-18886]"
    }, {
      "left" : "Reference declaration",
      "right" : "Reference declaration",
      "info" : "SingleVariableDeclaration[18765-18786]:SingleVariableDeclaration[18896-18917]"
    }, {
      "left" : "Reference initialization",
      "right" : "Reference initialization",
      "info" : "SingleVariableDeclaration[18796-18820]:SingleVariableDeclaration[18927-18951]"
    }, {
      "left" : "Reference reference",
      "right" : "Reference reference",
      "info" : "SingleVariableDeclaration[18830-18849]:SingleVariableDeclaration[18961-18980]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18851-21090]:Block[18982-21221]"
    }, {
      "left" : "if (!isValidDeclaration(declaration)\n          || !isValidInitialization(initialization)\n          || !isValidReference(reference))",
      "right" : "if (!isValidDeclaration(declaration)\n          || !isValidInitialization(initialization)\n          || !isValidReference(reference))",
      "info" : "IfStatement[18859-19022]:IfStatement[18990-19153]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18991-19022]:Block[19122-19153]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[19001-19014]:ReturnStatement[19132-19145]"
    }, {
      "left" : "if (declaration != initialization &&\n          !initialization.getGrandparent().isExprResult())",
      "right" : "if (declaration != initialization &&\n          !initialization.getGrandparent().isExprResult())",
      "info" : "IfStatement[19199-19326]:IfStatement[19330-19457]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19295-19326]:Block[19426-19457]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[19305-19318]:ReturnStatement[19436-19449]"
    }, {
      "left" : "if (declaration.getBasicBlock() != initialization.getBasicBlock()\n          || declaration.getBasicBlock() != reference.getBasicBlock())",
      "right" : "if (declaration.getBasicBlock() != initialization.getBasicBlock()\n          || declaration.getBasicBlock() != reference.getBasicBlock())",
      "info" : "IfStatement[19428-19596]:IfStatement[19559-19727]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19565-19596]:Block[19696-19727]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[19575-19588]:ReturnStatement[19706-19719]"
    }, {
      "left" : "Node value = initialization.getAssignedValue();",
      "right" : "Node value = initialization.getAssignedValue();",
      "info" : "VariableDeclarationStatement[19942-19989]:VariableDeclarationStatement[20073-20120]"
    }, {
      "left" : "Preconditions.checkState(value != null);",
      "right" : "Preconditions.checkState(value != null);",
      "info" : "ExpressionStatement[19996-20036]:ExpressionStatement[20127-20167]"
    }, {
      "left" : "if (value.isGetProp()\n          && reference.getParent().isCall()\n          && reference.getParent().getFirstChild() == reference.getNode())",
      "right" : "if (value.isGetProp()\n          && reference.getParent().isCall()\n          && reference.getParent().getFirstChild() == reference.getNode())",
      "info" : "IfStatement[20043-20215]:IfStatement[20174-20346]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20184-20215]:Block[20315-20346]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[20194-20207]:ReturnStatement[20325-20338]"
    }, {
      "left" : "if (value.isFunction())",
      "right" : "if (value.isFunction())",
      "info" : "IfStatement[20223-20984]:IfStatement[20354-21115]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20247-20984]:Block[20378-21115]"
    }, {
      "left" : "Node callNode = reference.getParent();",
      "right" : "Node callNode = reference.getParent();",
      "info" : "VariableDeclarationStatement[20257-20295]:VariableDeclarationStatement[20388-20426]"
    }, {
      "left" : "if (reference.getParent().isCall())",
      "right" : "if (reference.getParent().isCall())",
      "info" : "IfStatement[20304-20976]:IfStatement[20435-21107]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20340-20976]:Block[20471-21107]"
    }, {
      "left" : "CodingConvention convention = compiler.getCodingConvention();",
      "right" : "CodingConvention convention = compiler.getCodingConvention();",
      "info" : "VariableDeclarationStatement[20352-20413]:VariableDeclarationStatement[20483-20544]"
    }, {
      "left" : "SubclassRelationship relationship =\n              convention.getClassesDefinedByCall(callNode);",
      "right" : "SubclassRelationship relationship =\n              convention.getClassesDefinedByCall(callNode);",
      "info" : "VariableDeclarationStatement[20562-20657]:VariableDeclarationStatement[20693-20788]"
    }, {
      "left" : "if (relationship != null)",
      "right" : "if (relationship != null)",
      "info" : "IfStatement[20668-20733]:IfStatement[20799-20864]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20694-20733]:Block[20825-20864]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[20708-20721]:ReturnStatement[20839-20852]"
    }, {
      "left" : "if (convention.getSingletonGetterClassName(callNode) != null)",
      "right" : "if (convention.getSingletonGetterClassName(callNode) != null)",
      "info" : "IfStatement[20865-20966]:IfStatement[20996-21097]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20927-20966]:Block[21058-21097]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[20941-20954]:ReturnStatement[21072-21085]"
    }, {
      "left" : "return canMoveAggressively(value) ||\n          canMoveModerately(initialization, reference);",
      "right" : "return canMoveAggressively(value) ||\n          canMoveModerately(initialization, reference);",
      "info" : "ReturnStatement[20992-21084]:ReturnStatement[21123-21215]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[21189-21196]:Modifier[21320-21327]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[21197-21204]:PrimitiveType[21328-21335]"
    }, {
      "left" : "canMoveAggressively",
      "right" : "canMoveAggressively",
      "info" : "SimpleName[21205-21224]:SimpleName[21336-21355]"
    }, {
      "left" : "Node value",
      "right" : "Node value",
      "info" : "SingleVariableDeclaration[21225-21235]:SingleVariableDeclaration[21356-21366]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21237-21430]:Block[21368-21561]"
    }, {
      "left" : "return NodeUtil.isLiteralValue(value, true)\n          || value.isFunction();",
      "right" : "return NodeUtil.isLiteralValue(value, true)\n          || value.isFunction();",
      "info" : "ReturnStatement[21348-21424]:ReturnStatement[21479-21555]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[21670-21677]:Modifier[21801-21808]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[21678-21685]:PrimitiveType[21809-21816]"
    }, {
      "left" : "canMoveModerately",
      "right" : "canMoveModerately",
      "info" : "SimpleName[21686-21703]:SimpleName[21817-21834]"
    }, {
      "left" : "Reference initialization",
      "right" : "Reference initialization",
      "info" : "SingleVariableDeclaration[21713-21737]:SingleVariableDeclaration[21844-21868]"
    }, {
      "left" : "Reference reference",
      "right" : "Reference reference",
      "info" : "SingleVariableDeclaration[21747-21766]:SingleVariableDeclaration[21878-21897]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21768-22978]:Block[21899-23109]"
    }, {
      "left" : "Iterator<Node> it;",
      "right" : "Iterator<Node> it;",
      "info" : "VariableDeclarationStatement[21877-21895]:VariableDeclarationStatement[22008-22026]"
    }, {
      "left" : "if (initialization.getParent().isVar())",
      "right" : "if (initialization.getParent().isVar())",
      "info" : "IfStatement[21902-22765]:IfStatement[22033-22896]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21942-22167]:Block[22073-22298]"
    }, {
      "left" : "it = NodeIterators.LocalVarMotion.forVar(\n            initialization.getNode(),     // NAME\n            initialization.getParent(),       // VAR\n            initialization.getGrandparent());",
      "right" : "it = NodeIterators.LocalVarMotion.forVar(\n            initialization.getNode(),     // NAME\n            initialization.getParent(),       // VAR\n            initialization.getGrandparent());",
      "info" : "ExpressionStatement[21952-22142]:ExpressionStatement[22083-22273]"
    }, {
      "left" : "if (initialization.getParent().isAssign())",
      "right" : "if (initialization.getParent().isAssign())",
      "info" : "IfStatement[22173-22765]:IfStatement[22304-22896]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22216-22616]:Block[22347-22747]"
    }, {
      "left" : "Preconditions.checkState(\n            initialization.getGrandparent().isExprResult());",
      "right" : "Preconditions.checkState(\n            initialization.getGrandparent().isExprResult());",
      "info" : "ExpressionStatement[22226-22312]:ExpressionStatement[22357-22443]"
    }, {
      "left" : "it = NodeIterators.LocalVarMotion.forAssign(\n            initialization.getNode(),     // NAME\n            initialization.getParent(),       // ASSIGN\n            initialization.getGrandparent(),  // EXPR_RESULT\n            initialization.getGrandparent().getParent());",
      "right" : "it = NodeIterators.LocalVarMotion.forAssign(\n            initialization.getNode(),     // NAME\n            initialization.getParent(),       // ASSIGN\n            initialization.getGrandparent(),  // EXPR_RESULT\n            initialization.getGrandparent().getParent());",
      "info" : "ExpressionStatement[22321-22590]:ExpressionStatement[22452-22721]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22622-22765]:Block[22753-22896]"
    }, {
      "left" : "throw new IllegalStateException(\"Unexpected initialization parent \" +\n            initialization.getParent().toStringTree());",
      "right" : "throw new IllegalStateException(\"Unexpected initialization parent \" +\n            initialization.getParent().toStringTree());",
      "info" : "ThrowStatement[22632-22757]:ThrowStatement[22763-22888]"
    }, {
      "left" : "Node targetName = reference.getNode();",
      "right" : "Node targetName = reference.getNode();",
      "info" : "VariableDeclarationStatement[22772-22810]:VariableDeclarationStatement[22903-22941]"
    }, {
      "left" : "while (it.hasNext())",
      "right" : "while (it.hasNext())",
      "info" : "WhileStatement[22817-22951]:WhileStatement[22948-23082]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22838-22951]:Block[22969-23082]"
    }, {
      "left" : "Node curNode = it.next();",
      "right" : "Node curNode = it.next();",
      "info" : "VariableDeclarationStatement[22848-22873]:VariableDeclarationStatement[22979-23004]"
    }, {
      "left" : "if (curNode == targetName)",
      "right" : "if (curNode == targetName)",
      "info" : "IfStatement[22882-22943]:IfStatement[23013-23074]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22909-22943]:Block[23040-23074]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[22921-22933]:ReturnStatement[23052-23064]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[22959-22972]:ReturnStatement[23090-23103]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[23078-23085]:Modifier[23209-23216]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[23086-23093]:PrimitiveType[23217-23224]"
    }, {
      "left" : "isValidDeclaration",
      "right" : "isValidDeclaration",
      "info" : "SimpleName[23094-23112]:SimpleName[23225-23243]"
    }, {
      "left" : "Reference declaration",
      "right" : "Reference declaration",
      "info" : "SingleVariableDeclaration[23113-23134]:SingleVariableDeclaration[23244-23265]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23136-23311]:Block[23267-23442]"
    }, {
      "left" : "return (declaration.getParent().isVar()\n          && !declaration.getGrandparent().isFor())\n          || NodeUtil.isFunctionDeclaration(declaration.getParent());",
      "right" : "return (declaration.getParent().isVar()\n          && !declaration.getGrandparent().isFor())\n          || NodeUtil.isFunctionDeclaration(declaration.getParent());",
      "info" : "ReturnStatement[23144-23305]:ReturnStatement[23275-23436]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[23382-23389]:Modifier[23513-23520]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[23390-23397]:PrimitiveType[23521-23528]"
    }, {
      "left" : "isValidInitialization",
      "right" : "isValidInitialization",
      "info" : "SimpleName[23398-23419]:SimpleName[23529-23550]"
    }, {
      "left" : "Reference initialization",
      "right" : "Reference initialization",
      "info" : "SingleVariableDeclaration[23420-23444]:SingleVariableDeclaration[23551-23575]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23446-24219]:Block[23577-24350]"
    }, {
      "left" : "if (initialization == null)",
      "right" : "if (initialization == null)",
      "info" : "IfStatement[23454-24036]:IfStatement[23585-24167]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23482-23513]:Block[23613-23644]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[23492-23505]:ReturnStatement[23623-23636]"
    }, {
      "left" : "if (initialization.isDeclaration())",
      "right" : "if (initialization.isDeclaration())",
      "info" : "IfStatement[23519-24036]:IfStatement[23650-24167]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23555-23839]:Block[23686-23970]"
    }, {
      "left" : "if (!NodeUtil.isFunctionDeclaration(initialization.getParent())\n            && initialization.getNode().getFirstChild() == null)",
      "right" : "if (!NodeUtil.isFunctionDeclaration(initialization.getParent())\n            && initialization.getNode().getFirstChild() == null)",
      "info" : "IfStatement[23667-23831]:IfStatement[23798-23962]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23796-23831]:Block[23927-23962]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[23808-23821]:ReturnStatement[23939-23952]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23845-24036]:Block[23976-24167]"
    }, {
      "left" : "Node parent = initialization.getParent();",
      "right" : "Node parent = initialization.getParent();",
      "info" : "VariableDeclarationStatement[23855-23896]:VariableDeclarationStatement[23986-24027]"
    }, {
      "left" : "Preconditions.checkState(\n            parent.isAssign()\n            && parent.getFirstChild() == initialization.getNode());",
      "right" : "Preconditions.checkState(\n            parent.isAssign()\n            && parent.getFirstChild() == initialization.getNode());",
      "info" : "ExpressionStatement[23905-24028]:ExpressionStatement[24036-24159]"
    }, {
      "left" : "Node n = initialization.getAssignedValue();",
      "right" : "Node n = initialization.getAssignedValue();",
      "info" : "VariableDeclarationStatement[24044-24087]:VariableDeclarationStatement[24175-24218]"
    }, {
      "left" : "if (n.isFunction())",
      "right" : "if (n.isFunction())",
      "info" : "IfStatement[24094-24193]:IfStatement[24225-24324]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24114-24193]:Block[24245-24324]"
    }, {
      "left" : "return compiler.getCodingConvention().isInlinableFunction(n);",
      "right" : "return compiler.getCodingConvention().isInlinableFunction(n);",
      "info" : "ReturnStatement[24124-24185]:ReturnStatement[24255-24316]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[24201-24213]:ReturnStatement[24332-24344]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[24306-24313]:Modifier[24437-24444]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[24314-24321]:PrimitiveType[24445-24452]"
    }, {
      "left" : "isValidReference",
      "right" : "isValidReference",
      "info" : "SimpleName[24322-24338]:SimpleName[24453-24469]"
    }, {
      "left" : "Reference reference",
      "right" : "Reference reference",
      "info" : "SingleVariableDeclaration[24339-24358]:SingleVariableDeclaration[24470-24489]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24360-24433]:Block[24491-24564]"
    }, {
      "left" : "return !reference.isDeclaration() && !reference.isLvalue();",
      "right" : "return !reference.isDeclaration() && !reference.isLvalue();",
      "info" : "ReturnStatement[24368-24427]:ReturnStatement[24499-24558]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[24636-24643]:Modifier[24767-24774]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[24644-24651]:PrimitiveType[24775-24782]"
    }, {
      "left" : "isImmutableAndWellDefinedVariable",
      "right" : "isImmutableAndWellDefinedVariable",
      "info" : "SimpleName[24652-24685]:SimpleName[24783-24816]"
    }, {
      "left" : "Var v",
      "right" : "Var v",
      "info" : "SingleVariableDeclaration[24686-24691]:SingleVariableDeclaration[24817-24822]"
    }, {
      "left" : "ReferenceCollection refInfo",
      "right" : "ReferenceCollection refInfo",
      "info" : "SingleVariableDeclaration[24701-24728]:SingleVariableDeclaration[24832-24859]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24730-26179]:Block[24861-26310]"
    }, {
      "left" : "List<Reference> refSet = refInfo.references;",
      "right" : "List<Reference> refSet = refInfo.references;",
      "info" : "VariableDeclarationStatement[24738-24782]:VariableDeclarationStatement[24869-24913]"
    }, {
      "left" : "int startingReadRef = 1;",
      "right" : "int startingReadRef = 1;",
      "info" : "VariableDeclarationStatement[24789-24813]:VariableDeclarationStatement[24920-24944]"
    }, {
      "left" : "Reference refDecl = refSet.get(0);",
      "right" : "Reference refDecl = refSet.get(0);",
      "info" : "VariableDeclarationStatement[24820-24854]:VariableDeclarationStatement[24951-24985]"
    }, {
      "left" : "if (!isValidDeclaration(refDecl))",
      "right" : "if (!isValidDeclaration(refDecl))",
      "info" : "IfStatement[24861-24926]:IfStatement[24992-25057]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24895-24926]:Block[25026-25057]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[24905-24918]:ReturnStatement[25036-25049]"
    }, {
      "left" : "boolean isNeverAssigned = refInfo.isNeverAssigned();",
      "right" : "boolean isNeverAssigned = refInfo.isNeverAssigned();",
      "info" : "VariableDeclarationStatement[24934-24986]:VariableDeclarationStatement[25065-25117]"
    }, {
      "left" : "if (!isNeverAssigned)",
      "right" : "if (!isNeverAssigned)",
      "info" : "IfStatement[25087-25971]:IfStatement[25218-26102]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25109-25971]:Block[25240-26102]"
    }, {
      "left" : "Reference refInit = refInfo.getInitializingReference();",
      "right" : "Reference refInit = refInfo.getInitializingReference();",
      "info" : "VariableDeclarationStatement[25119-25174]:VariableDeclarationStatement[25250-25305]"
    }, {
      "left" : "if (!isValidInitialization(refInit))",
      "right" : "if (!isValidInitialization(refInit))",
      "info" : "IfStatement[25183-25255]:IfStatement[25314-25386]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25220-25255]:Block[25351-25386]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[25232-25245]:ReturnStatement[25363-25376]"
    }, {
      "left" : "if (refDecl != refInit)",
      "right" : "if (refDecl != refInit)",
      "info" : "IfStatement[25265-25393]:IfStatement[25396-25524]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25289-25393]:Block[25420-25524]"
    }, {
      "left" : "Preconditions.checkState(refInit == refSet.get(1));",
      "right" : "Preconditions.checkState(refInit == refSet.get(1));",
      "info" : "ExpressionStatement[25301-25352]:ExpressionStatement[25432-25483]"
    }, {
      "left" : "startingReadRef = 2;",
      "right" : "startingReadRef = 2;",
      "info" : "ExpressionStatement[25363-25383]:ExpressionStatement[25494-25514]"
    }, {
      "left" : "if (!refInfo.isWellDefined())",
      "right" : "if (!refInfo.isWellDefined())",
      "info" : "IfStatement[25403-25468]:IfStatement[25534-25599]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25433-25468]:Block[25564-25599]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[25445-25458]:ReturnStatement[25576-25589]"
    }, {
      "left" : "Node value = refInit.getAssignedValue();",
      "right" : "Node value = refInit.getAssignedValue();",
      "info" : "VariableDeclarationStatement[25478-25518]:VariableDeclarationStatement[25609-25649]"
    }, {
      "left" : "Preconditions.checkNotNull(value);",
      "right" : "Preconditions.checkNotNull(value);",
      "info" : "ExpressionStatement[25527-25561]:ExpressionStatement[25658-25692]"
    }, {
      "left" : "boolean isImmutableValueWorthInlining =\n            NodeUtil.isImmutableValue(value) &&\n            (!value.isString() ||\n                isStringWorthInlining(v, refInfo.references));",
      "right" : "boolean isImmutableValueWorthInlining =\n            NodeUtil.isImmutableValue(value) &&\n            (!value.isString() ||\n                isStringWorthInlining(v, refInfo.references));",
      "info" : "VariableDeclarationStatement[25571-25755]:VariableDeclarationStatement[25702-25886]"
    }, {
      "left" : "boolean isInlinableThisAlias =\n            value.isThis() &&\n            !refInfo.isEscaped();",
      "right" : "boolean isInlinableThisAlias =\n            value.isThis() &&\n            !refInfo.isEscaped();",
      "info" : "VariableDeclarationStatement[25764-25858]:VariableDeclarationStatement[25895-25989]"
    }, {
      "left" : "if (!isImmutableValueWorthInlining && !isInlinableThisAlias)",
      "right" : "if (!isImmutableValueWorthInlining && !isInlinableThisAlias)",
      "info" : "IfStatement[25867-25963]:IfStatement[25998-26094]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25928-25963]:Block[26059-26094]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[25940-25953]:ReturnStatement[26071-26084]"
    }, {
      "left" : "for (int i = startingReadRef; i < refSet.size(); i++)",
      "right" : "for (int i = startingReadRef; i < refSet.size(); i++)",
      "info" : "ForStatement[25979-26153]:ForStatement[26110-26284]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26033-26153]:Block[26164-26284]"
    }, {
      "left" : "Reference ref = refSet.get(i);",
      "right" : "Reference ref = refSet.get(i);",
      "info" : "VariableDeclarationStatement[26043-26073]:VariableDeclarationStatement[26174-26204]"
    }, {
      "left" : "if (!isValidReference(ref))",
      "right" : "if (!isValidReference(ref))",
      "info" : "IfStatement[26082-26145]:IfStatement[26213-26276]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26110-26145]:Block[26241-26276]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[26122-26135]:ReturnStatement[26253-26266]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[26161-26173]:ReturnStatement[26292-26304]"
    } ]
  },
  "interFileMappings" : { }
}