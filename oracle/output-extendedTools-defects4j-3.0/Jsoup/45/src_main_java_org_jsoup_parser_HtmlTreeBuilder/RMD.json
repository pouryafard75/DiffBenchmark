{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "HtmlTreeBuilder",
      "right" : "HtmlTreeBuilder",
      "info" : "TypeDeclaration[210-24726]:TypeDeclaration[210-24726]"
    }, {
      "left" : "private static final String[] TagsScriptStyle = new String[]{\"script\", \"style\"};",
      "right" : "private static final String[] TagsScriptStyle = new String[]{\"script\", \"style\"};",
      "info" : "FieldDeclaration[342-422]:FieldDeclaration[342-422]"
    }, {
      "left" : "public static final String[] TagsSearchInScope = new String[]{\"applet\", \"caption\", \"html\", \"table\", \"td\", \"th\", \"marquee\", \"object\"};",
      "right" : "public static final String[] TagsSearchInScope = new String[]{\"applet\", \"caption\", \"html\", \"table\", \"td\", \"th\", \"marquee\", \"object\"};",
      "info" : "FieldDeclaration[427-560]:FieldDeclaration[427-560]"
    }, {
      "left" : "private static final String[] TagSearchList = new String[]{\"ol\", \"ul\"};",
      "right" : "private static final String[] TagSearchList = new String[]{\"ol\", \"ul\"};",
      "info" : "FieldDeclaration[565-636]:FieldDeclaration[565-636]"
    }, {
      "left" : "private static final String[] TagSearchButton = new String[]{\"button\"};",
      "right" : "private static final String[] TagSearchButton = new String[]{\"button\"};",
      "info" : "FieldDeclaration[641-712]:FieldDeclaration[641-712]"
    }, {
      "left" : "private static final String[] TagSearchTableScope = new String[]{\"html\", \"table\"};",
      "right" : "private static final String[] TagSearchTableScope = new String[]{\"html\", \"table\"};",
      "info" : "FieldDeclaration[717-799]:FieldDeclaration[717-799]"
    }, {
      "left" : "private static final String[] TagSearchSelectScope = new String[]{\"optgroup\", \"option\"};",
      "right" : "private static final String[] TagSearchSelectScope = new String[]{\"optgroup\", \"option\"};",
      "info" : "FieldDeclaration[804-892]:FieldDeclaration[804-892]"
    }, {
      "left" : "private static final String[] TagSearchEndTags = new String[]{\"dd\", \"dt\", \"li\", \"option\", \"optgroup\", \"p\", \"rp\", \"rt\"};",
      "right" : "private static final String[] TagSearchEndTags = new String[]{\"dd\", \"dt\", \"li\", \"option\", \"optgroup\", \"p\", \"rp\", \"rt\"};",
      "info" : "FieldDeclaration[897-1016]:FieldDeclaration[897-1016]"
    }, {
      "left" : "private static final String[] TagSearchSpecial = new String[]{\"address\", \"applet\", \"area\", \"article\", \"aside\", \"base\", \"basefont\", \"bgsound\",\n            \"blockquote\", \"body\", \"br\", \"button\", \"caption\", \"center\", \"col\", \"colgroup\", \"command\", \"dd\",\n            \"details\", \"dir\", \"div\", \"dl\", \"dt\", \"embed\", \"fieldset\", \"figcaption\", \"figure\", \"footer\", \"form\",\n            \"frame\", \"frameset\", \"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\", \"head\", \"header\", \"hgroup\", \"hr\", \"html\",\n            \"iframe\", \"img\", \"input\", \"isindex\", \"li\", \"link\", \"listing\", \"marquee\", \"menu\", \"meta\", \"nav\",\n            \"noembed\", \"noframes\", \"noscript\", \"object\", \"ol\", \"p\", \"param\", \"plaintext\", \"pre\", \"script\",\n            \"section\", \"select\", \"style\", \"summary\", \"table\", \"tbody\", \"td\", \"textarea\", \"tfoot\", \"th\", \"thead\",\n            \"title\", \"tr\", \"ul\", \"wbr\", \"xmp\"};",
      "right" : "private static final String[] TagSearchSpecial = new String[]{\"address\", \"applet\", \"area\", \"article\", \"aside\", \"base\", \"basefont\", \"bgsound\",\n            \"blockquote\", \"body\", \"br\", \"button\", \"caption\", \"center\", \"col\", \"colgroup\", \"command\", \"dd\",\n            \"details\", \"dir\", \"div\", \"dl\", \"dt\", \"embed\", \"fieldset\", \"figcaption\", \"figure\", \"footer\", \"form\",\n            \"frame\", \"frameset\", \"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\", \"head\", \"header\", \"hgroup\", \"hr\", \"html\",\n            \"iframe\", \"img\", \"input\", \"isindex\", \"li\", \"link\", \"listing\", \"marquee\", \"menu\", \"meta\", \"nav\",\n            \"noembed\", \"noframes\", \"noscript\", \"object\", \"ol\", \"p\", \"param\", \"plaintext\", \"pre\", \"script\",\n            \"section\", \"select\", \"style\", \"summary\", \"table\", \"tbody\", \"td\", \"textarea\", \"tfoot\", \"th\", \"thead\",\n            \"title\", \"tr\", \"ul\", \"wbr\", \"xmp\"};",
      "info" : "FieldDeclaration[1021-1868]:FieldDeclaration[1021-1868]"
    }, {
      "left" : "private HtmlTreeBuilderState state;",
      "right" : "private HtmlTreeBuilderState state;",
      "info" : "FieldDeclaration[1874-1909]:FieldDeclaration[1874-1909]"
    }, {
      "left" : "private HtmlTreeBuilderState originalState;",
      "right" : "private HtmlTreeBuilderState originalState;",
      "info" : "FieldDeclaration[1935-1978]:FieldDeclaration[1935-1978]"
    }, {
      "left" : "private boolean baseUriSetFromDoc = false;",
      "right" : "private boolean baseUriSetFromDoc = false;",
      "info" : "FieldDeclaration[2011-2053]:FieldDeclaration[2011-2053]"
    }, {
      "left" : "private Element headElement;",
      "right" : "private Element headElement;",
      "info" : "FieldDeclaration[2058-2086]:FieldDeclaration[2058-2086]"
    }, {
      "left" : "private FormElement formElement;",
      "right" : "private FormElement formElement;",
      "info" : "FieldDeclaration[2119-2151]:FieldDeclaration[2119-2151]"
    }, {
      "left" : "private Element contextElement;",
      "right" : "private Element contextElement;",
      "info" : "FieldDeclaration[2184-2215]:FieldDeclaration[2184-2215]"
    }, {
      "left" : "private ArrayList<Element> formattingElements = new ArrayList<Element>();",
      "right" : "private ArrayList<Element> formattingElements = new ArrayList<Element>();",
      "info" : "FieldDeclaration[2288-2361]:FieldDeclaration[2288-2361]"
    }, {
      "left" : "private List<String> pendingTableCharacters = new ArrayList<String>();",
      "right" : "private List<String> pendingTableCharacters = new ArrayList<String>();",
      "info" : "FieldDeclaration[2403-2473]:FieldDeclaration[2403-2473]"
    }, {
      "left" : "private Token.EndTag emptyEnd = new Token.EndTag();",
      "right" : "private Token.EndTag emptyEnd = new Token.EndTag();",
      "info" : "FieldDeclaration[2514-2565]:FieldDeclaration[2514-2565]"
    }, {
      "left" : "private boolean framesetOk = true;",
      "right" : "private boolean framesetOk = true;",
      "info" : "FieldDeclaration[2595-2629]:FieldDeclaration[2595-2629]"
    }, {
      "left" : "private boolean fosterInserts = false;",
      "right" : "private boolean fosterInserts = false;",
      "info" : "FieldDeclaration[2663-2701]:FieldDeclaration[2663-2701]"
    }, {
      "left" : "private boolean fragmentParsing = false;",
      "right" : "private boolean fragmentParsing = false;",
      "info" : "FieldDeclaration[2744-2784]:FieldDeclaration[2744-2784]"
    }, {
      "left" : "HtmlTreeBuilder()",
      "right" : "HtmlTreeBuilder()",
      "info" : "MethodDeclaration[2823-2843]:MethodDeclaration[2823-2843]"
    }, {
      "left" : "Document parse(String input, String baseUri, ParseErrorList errors)",
      "right" : "Document parse(String input, String baseUri, ParseErrorList errors)",
      "info" : "MethodDeclaration[2849-3071]:MethodDeclaration[2849-3071]"
    }, {
      "left" : "List<Node> parseFragment(String inputFragment, Element context, String baseUri, ParseErrorList errors)",
      "right" : "List<Node> parseFragment(String inputFragment, Element context, String baseUri, ParseErrorList errors)",
      "info" : "MethodDeclaration[3077-5222]:MethodDeclaration[3077-5222]"
    }, {
      "left" : "protected boolean process(Token token)",
      "right" : "protected boolean process(Token token)",
      "info" : "MethodDeclaration[5228-5366]:MethodDeclaration[5228-5366]"
    }, {
      "left" : "boolean process(Token token, HtmlTreeBuilderState state)",
      "right" : "boolean process(Token token, HtmlTreeBuilderState state)",
      "info" : "MethodDeclaration[5372-5509]:MethodDeclaration[5372-5509]"
    }, {
      "left" : "void transition(HtmlTreeBuilderState state)",
      "right" : "void transition(HtmlTreeBuilderState state)",
      "info" : "MethodDeclaration[5515-5594]:MethodDeclaration[5515-5594]"
    }, {
      "left" : "HtmlTreeBuilderState state()",
      "right" : "HtmlTreeBuilderState state()",
      "info" : "MethodDeclaration[5600-5658]:MethodDeclaration[5600-5658]"
    }, {
      "left" : "void markInsertionMode()",
      "right" : "void markInsertionMode()",
      "info" : "MethodDeclaration[5664-5727]:MethodDeclaration[5664-5727]"
    }, {
      "left" : "HtmlTreeBuilderState originalState()",
      "right" : "HtmlTreeBuilderState originalState()",
      "info" : "MethodDeclaration[5733-5807]:MethodDeclaration[5733-5807]"
    }, {
      "left" : "void framesetOk(boolean framesetOk)",
      "right" : "void framesetOk(boolean framesetOk)",
      "info" : "MethodDeclaration[5813-5894]:MethodDeclaration[5813-5894]"
    }, {
      "left" : "boolean framesetOk()",
      "right" : "boolean framesetOk()",
      "info" : "MethodDeclaration[5900-5955]:MethodDeclaration[5900-5955]"
    }, {
      "left" : "Document getDocument()",
      "right" : "Document getDocument()",
      "info" : "MethodDeclaration[5961-6011]:MethodDeclaration[5961-6011]"
    }, {
      "left" : "String getBaseUri()",
      "right" : "String getBaseUri()",
      "info" : "MethodDeclaration[6017-6068]:MethodDeclaration[6017-6068]"
    }, {
      "left" : "void maybeSetBaseUri(Element base)",
      "right" : "void maybeSetBaseUri(Element base)",
      "info" : "MethodDeclaration[6074-6529]:MethodDeclaration[6074-6529]"
    }, {
      "left" : "boolean isFragmentParsing()",
      "right" : "boolean isFragmentParsing()",
      "info" : "MethodDeclaration[6535-6602]:MethodDeclaration[6535-6602]"
    }, {
      "left" : "void error(HtmlTreeBuilderState state)",
      "right" : "void error(HtmlTreeBuilderState state)",
      "info" : "MethodDeclaration[6608-6819]:MethodDeclaration[6608-6819]"
    }, {
      "left" : "Element insert(Token.StartTag startTag)",
      "right" : "Element insert(Token.StartTag startTag)",
      "info" : "MethodDeclaration[6825-7587]:MethodDeclaration[6825-7587]"
    }, {
      "left" : "Element insertStartTag(String startTagName)",
      "right" : "Element insertStartTag(String startTagName)",
      "info" : "MethodDeclaration[7593-7753]:MethodDeclaration[7593-7753]"
    }, {
      "left" : "void insert(Element el)",
      "right" : "void insert(Element el)",
      "info" : "MethodDeclaration[7759-7837]:MethodDeclaration[7759-7837]"
    }, {
      "left" : "Element insertEmpty(Token.StartTag startTag)",
      "right" : "Element insertEmpty(Token.StartTag startTag)",
      "info" : "MethodDeclaration[7843-8485]:MethodDeclaration[7843-8485]"
    }, {
      "left" : "FormElement insertForm(Token.StartTag startTag, boolean onStack)",
      "right" : "FormElement insertForm(Token.StartTag startTag, boolean onStack)",
      "info" : "MethodDeclaration[8491-8807]:MethodDeclaration[8491-8807]"
    }, {
      "left" : "void insert(Token.Comment commentToken)",
      "right" : "void insert(Token.Comment commentToken)",
      "info" : "MethodDeclaration[8813-8961]:MethodDeclaration[8813-8961]"
    }, {
      "left" : "void insert(Token.Character characterToken)",
      "right" : "void insert(Token.Character characterToken)",
      "info" : "MethodDeclaration[8967-9513]:MethodDeclaration[8967-9513]"
    }, {
      "left" : "private void insertNode(Node node)",
      "right" : "private void insertNode(Node node)",
      "info" : "MethodDeclaration[9519-10096]:MethodDeclaration[9519-10096]"
    }, {
      "left" : "Element pop()",
      "right" : "Element pop()",
      "info" : "MethodDeclaration[10102-10193]:MethodDeclaration[10102-10193]"
    }, {
      "left" : "void push(Element element)",
      "right" : "void push(Element element)",
      "info" : "MethodDeclaration[10199-10261]:MethodDeclaration[10199-10261]"
    }, {
      "left" : "ArrayList<Element> getStack()",
      "right" : "ArrayList<Element> getStack()",
      "info" : "MethodDeclaration[10267-10326]:MethodDeclaration[10267-10326]"
    }, {
      "left" : "boolean onStack(Element el)",
      "right" : "boolean onStack(Element el)",
      "info" : "MethodDeclaration[10332-10411]:MethodDeclaration[10332-10411]"
    }, {
      "left" : "private boolean isElementInQueue(ArrayList<Element> queue, Element element)",
      "right" : "private boolean isElementInQueue(ArrayList<Element> queue, Element element)",
      "info" : "MethodDeclaration[10417-10712]:MethodDeclaration[10417-10712]"
    }, {
      "left" : "Element getFromStack(String elName)",
      "right" : "Element getFromStack(String elName)",
      "info" : "MethodDeclaration[10718-10987]:MethodDeclaration[10718-10987]"
    }, {
      "left" : "boolean removeFromStack(Element el)",
      "right" : "boolean removeFromStack(Element el)",
      "info" : "MethodDeclaration[10993-11278]:MethodDeclaration[10993-11278]"
    }, {
      "left" : "void popStackToClose(String elName)",
      "right" : "void popStackToClose(String elName)",
      "info" : "MethodDeclaration[11284-11541]:MethodDeclaration[11284-11541]"
    }, {
      "left" : "void popStackToClose(String... elNames)",
      "right" : "void popStackToClose(String... elNames)",
      "info" : "MethodDeclaration[11547-11817]:MethodDeclaration[11547-11817]"
    }, {
      "left" : "void popStackToBefore(String elName)",
      "right" : "void popStackToBefore(String elName)",
      "info" : "MethodDeclaration[11823-12122]:MethodDeclaration[11823-12122]"
    }, {
      "left" : "void clearStackToTableContext()",
      "right" : "void clearStackToTableContext()",
      "info" : "MethodDeclaration[12128-12205]:MethodDeclaration[12128-12205]"
    }, {
      "left" : "void clearStackToTableBodyContext()",
      "right" : "void clearStackToTableBodyContext()",
      "info" : "MethodDeclaration[12211-12310]:MethodDeclaration[12211-12310]"
    }, {
      "left" : "void clearStackToTableRowContext()",
      "right" : "void clearStackToTableRowContext()",
      "info" : "MethodDeclaration[12316-12393]:MethodDeclaration[12316-12393]"
    }, {
      "left" : "private void clearStackToContext(String... nodeNames)",
      "right" : "private void clearStackToContext(String... nodeNames)",
      "info" : "MethodDeclaration[12399-12740]:MethodDeclaration[12399-12740]"
    }, {
      "left" : "Element aboveOnStack(Element el)",
      "right" : "Element aboveOnStack(Element el)",
      "info" : "MethodDeclaration[12746-13032]:MethodDeclaration[12746-13032]"
    }, {
      "left" : "void insertOnStackAfter(Element after, Element in)",
      "right" : "void insertOnStackAfter(Element after, Element in)",
      "info" : "MethodDeclaration[13038-13200]:MethodDeclaration[13038-13200]"
    }, {
      "left" : "void replaceOnStack(Element out, Element in)",
      "right" : "void replaceOnStack(Element out, Element in)",
      "info" : "MethodDeclaration[13206-13298]:MethodDeclaration[13206-13298]"
    }, {
      "left" : "private void replaceInQueue(ArrayList<Element> queue, Element out, Element in)",
      "right" : "private void replaceInQueue(ArrayList<Element> queue, Element out, Element in)",
      "info" : "MethodDeclaration[13304-13490]:MethodDeclaration[13304-13490]"
    }, {
      "left" : "void resetInsertionMode()",
      "right" : "void resetInsertionMode()",
      "info" : "MethodDeclaration[13496-15492]:MethodDeclaration[13496-15492]"
    }, {
      "left" : "private String[] specificScopeTarget = {null};",
      "right" : "private String[] specificScopeTarget = {null};",
      "info" : "FieldDeclaration[15545-15591]:FieldDeclaration[15545-15591]"
    }, {
      "left" : "private boolean inSpecificScope(String targetName, String[] baseTypes, String[] extraTypes)",
      "right" : "private boolean inSpecificScope(String targetName, String[] baseTypes, String[] extraTypes)",
      "info" : "MethodDeclaration[15597-15817]:MethodDeclaration[15597-15817]"
    }, {
      "left" : "private boolean inSpecificScope(String[] targetNames, String[] baseTypes, String[] extraTypes)",
      "right" : "private boolean inSpecificScope(String[] targetNames, String[] baseTypes, String[] extraTypes)",
      "info" : "MethodDeclaration[15823-16414]:MethodDeclaration[15823-16414]"
    }, {
      "left" : "boolean inScope(String[] targetNames)",
      "right" : "boolean inScope(String[] targetNames)",
      "info" : "MethodDeclaration[16420-16535]:MethodDeclaration[16420-16535]"
    }, {
      "left" : "boolean inScope(String targetName)",
      "right" : "boolean inScope(String targetName)",
      "info" : "MethodDeclaration[16541-16625]:MethodDeclaration[16541-16625]"
    }, {
      "left" : "boolean inScope(String targetName, String[] extras)",
      "right" : "boolean inScope(String targetName, String[] extras)",
      "info" : "MethodDeclaration[16631-16897]:MethodDeclaration[16631-16897]"
    }, {
      "left" : "boolean inListItemScope(String targetName)",
      "right" : "boolean inListItemScope(String targetName)",
      "info" : "MethodDeclaration[16903-17004]:MethodDeclaration[16903-17004]"
    }, {
      "left" : "boolean inButtonScope(String targetName)",
      "right" : "boolean inButtonScope(String targetName)",
      "info" : "MethodDeclaration[17010-17111]:MethodDeclaration[17010-17111]"
    }, {
      "left" : "boolean inTableScope(String targetName)",
      "right" : "boolean inTableScope(String targetName)",
      "info" : "MethodDeclaration[17117-17235]:MethodDeclaration[17117-17235]"
    }, {
      "left" : "boolean inSelectScope(String targetName)",
      "right" : "boolean inSelectScope(String targetName)",
      "info" : "MethodDeclaration[17241-17701]:MethodDeclaration[17241-17701]"
    }, {
      "left" : "void setHeadElement(Element headElement)",
      "right" : "void setHeadElement(Element headElement)",
      "info" : "MethodDeclaration[17707-17795]:MethodDeclaration[17707-17795]"
    }, {
      "left" : "Element getHeadElement()",
      "right" : "Element getHeadElement()",
      "info" : "MethodDeclaration[17801-17861]:MethodDeclaration[17801-17861]"
    }, {
      "left" : "boolean isFosterInserts()",
      "right" : "boolean isFosterInserts()",
      "info" : "MethodDeclaration[17867-17930]:MethodDeclaration[17867-17930]"
    }, {
      "left" : "void setFosterInserts(boolean fosterInserts)",
      "right" : "void setFosterInserts(boolean fosterInserts)",
      "info" : "MethodDeclaration[17936-18032]:MethodDeclaration[17936-18032]"
    }, {
      "left" : "FormElement getFormElement()",
      "right" : "FormElement getFormElement()",
      "info" : "MethodDeclaration[18038-18102]:MethodDeclaration[18038-18102]"
    }, {
      "left" : "void setFormElement(FormElement formElement)",
      "right" : "void setFormElement(FormElement formElement)",
      "info" : "MethodDeclaration[18108-18200]:MethodDeclaration[18108-18200]"
    }, {
      "left" : "void newPendingTableCharacters()",
      "right" : "void newPendingTableCharacters()",
      "info" : "MethodDeclaration[18206-18304]:MethodDeclaration[18206-18304]"
    }, {
      "left" : "List<String> getPendingTableCharacters()",
      "right" : "List<String> getPendingTableCharacters()",
      "info" : "MethodDeclaration[18310-18397]:MethodDeclaration[18310-18397]"
    }, {
      "left" : "void setPendingTableCharacters(List<String> pendingTableCharacters)",
      "right" : "void setPendingTableCharacters(List<String> pendingTableCharacters)",
      "info" : "MethodDeclaration[18403-18540]:MethodDeclaration[18403-18540]"
    }, {
      "left" : "void generateImpliedEndTags(String excludeTag)",
      "right" : "void generateImpliedEndTags(String excludeTag)",
      "info" : "MethodDeclaration[18546-19393]:MethodDeclaration[18546-19393]"
    }, {
      "left" : "void generateImpliedEndTags()",
      "right" : "void generateImpliedEndTags()",
      "info" : "MethodDeclaration[19399-19474]:MethodDeclaration[19399-19474]"
    }, {
      "left" : "boolean isSpecial(Element el)",
      "right" : "boolean isSpecial(Element el)",
      "info" : "MethodDeclaration[19480-19694]:MethodDeclaration[19480-19694]"
    }, {
      "left" : "Element lastFormattingElement()",
      "right" : "Element lastFormattingElement()",
      "info" : "MethodDeclaration[19700-19846]:MethodDeclaration[19700-19846]"
    }, {
      "left" : "Element removeLastFormattingElement()",
      "right" : "Element removeLastFormattingElement()",
      "info" : "MethodDeclaration[19852-20057]:MethodDeclaration[19852-20057]"
    }, {
      "left" : "void pushActiveFormattingElements(Element in)",
      "right" : "void pushActiveFormattingElements(Element in)",
      "info" : "MethodDeclaration[20097-20603]:MethodDeclaration[20097-20603]"
    }, {
      "left" : "private boolean isSameFormattingElement(Element a, Element b)",
      "right" : "private boolean isSameFormattingElement(Element a, Element b)",
      "info" : "MethodDeclaration[20609-20991]:MethodDeclaration[20609-20991]"
    }, {
      "left" : "void reconstructFormattingElements()",
      "right" : "void reconstructFormattingElements()",
      "info" : "MethodDeclaration[20997-22498]:MethodDeclaration[20997-22498]"
    }, {
      "left" : "void clearFormattingElementsToLastMarker()",
      "right" : "void clearFormattingElementsToLastMarker()",
      "info" : "MethodDeclaration[22504-22719]:MethodDeclaration[22504-22719]"
    }, {
      "left" : "void removeFromActiveFormattingElements(Element el)",
      "right" : "void removeFromActiveFormattingElements(Element el)",
      "info" : "MethodDeclaration[22725-23037]:MethodDeclaration[22725-23037]"
    }, {
      "left" : "boolean isInActiveFormattingElements(Element el)",
      "right" : "boolean isInActiveFormattingElements(Element el)",
      "info" : "MethodDeclaration[23043-23156]:MethodDeclaration[23043-23156]"
    }, {
      "left" : "Element getActiveFormattingElement(String nodeName)",
      "right" : "Element getActiveFormattingElement(String nodeName)",
      "info" : "MethodDeclaration[23162-23533]:MethodDeclaration[23162-23533]"
    }, {
      "left" : "void replaceActiveFormattingElement(Element out, Element in)",
      "right" : "void replaceActiveFormattingElement(Element out, Element in)",
      "info" : "MethodDeclaration[23539-23660]:MethodDeclaration[23539-23660]"
    }, {
      "left" : "void insertMarkerToFormattingElements()",
      "right" : "void insertMarkerToFormattingElements()",
      "info" : "MethodDeclaration[23666-23751]:MethodDeclaration[23666-23751]"
    }, {
      "left" : "void insertInFosterParent(Node in)",
      "right" : "void insertInFosterParent(Node in)",
      "info" : "MethodDeclaration[23757-24476]:MethodDeclaration[23757-24476]"
    }, {
      "left" : "public String toString()",
      "right" : "public String toString()",
      "info" : "MethodDeclaration[24482-24724]:MethodDeclaration[24482-24724]"
    } ],
    "mappings" : [
 {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[267-273]:Modifier[267-273]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[274-279]:TYPE_DECLARATION_KIND[274-279]"
    }, {
      "left" : "HtmlTreeBuilder",
      "right" : "HtmlTreeBuilder",
      "info" : "SimpleName[280-295]:SimpleName[280-295]"
    }, {
      "left" : "TreeBuilder",
      "right" : "TreeBuilder",
      "info" : "SimpleType[304-315]:SimpleType[304-315]"
    }, {
      "left" : "HtmlTreeBuilder",
      "right" : "HtmlTreeBuilder",
      "info" : "SimpleName[2823-2838]:SimpleName[2823-2838]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2841-2843]:Block[2841-2843]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[2849-2858]:MarkerAnnotation[2849-2858]"
    }, {
      "left" : "Document",
      "right" : "Document",
      "info" : "SimpleType[2863-2871]:SimpleType[2863-2871]"
    }, {
      "left" : "parse",
      "right" : "parse",
      "info" : "SimpleName[2872-2877]:SimpleName[2872-2877]"
    }, {
      "left" : "String input",
      "right" : "String input",
      "info" : "SingleVariableDeclaration[2878-2890]:SingleVariableDeclaration[2878-2890]"
    }, {
      "left" : "String baseUri",
      "right" : "String baseUri",
      "info" : "SingleVariableDeclaration[2892-2906]:SingleVariableDeclaration[2892-2906]"
    }, {
      "left" : "ParseErrorList errors",
      "right" : "ParseErrorList errors",
      "info" : "SingleVariableDeclaration[2908-2929]:SingleVariableDeclaration[2908-2929]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2931-3071]:Block[2931-3071]"
    }, {
      "left" : "state = HtmlTreeBuilderState.Initial;",
      "right" : "state = HtmlTreeBuilderState.Initial;",
      "info" : "ExpressionStatement[2941-2978]:ExpressionStatement[2941-2978]"
    }, {
      "left" : "baseUriSetFromDoc = false;",
      "right" : "baseUriSetFromDoc = false;",
      "info" : "ExpressionStatement[2987-3013]:ExpressionStatement[2987-3013]"
    }, {
      "left" : "return super.parse(input, baseUri, errors);",
      "right" : "return super.parse(input, baseUri, errors);",
      "info" : "ReturnStatement[3022-3065]:ReturnStatement[3022-3065]"
    }, {
      "left" : "List<Node>",
      "right" : "List<Node>",
      "info" : "ParameterizedType[3077-3087]:ParameterizedType[3077-3087]"
    }, {
      "left" : "parseFragment",
      "right" : "parseFragment",
      "info" : "SimpleName[3088-3101]:SimpleName[3088-3101]"
    }, {
      "left" : "String inputFragment",
      "right" : "String inputFragment",
      "info" : "SingleVariableDeclaration[3102-3122]:SingleVariableDeclaration[3102-3122]"
    }, {
      "left" : "Element context",
      "right" : "Element context",
      "info" : "SingleVariableDeclaration[3124-3139]:SingleVariableDeclaration[3124-3139]"
    }, {
      "left" : "String baseUri",
      "right" : "String baseUri",
      "info" : "SingleVariableDeclaration[3141-3155]:SingleVariableDeclaration[3141-3155]"
    }, {
      "left" : "ParseErrorList errors",
      "right" : "ParseErrorList errors",
      "info" : "SingleVariableDeclaration[3157-3178]:SingleVariableDeclaration[3157-3178]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3180-5222]:Block[3180-5222]"
    }, {
      "left" : "state = HtmlTreeBuilderState.Initial;",
      "right" : "state = HtmlTreeBuilderState.Initial;",
      "info" : "ExpressionStatement[3221-3258]:ExpressionStatement[3221-3258]"
    }, {
      "left" : "initialiseParse(inputFragment, baseUri, errors);",
      "right" : "initialiseParse(inputFragment, baseUri, errors);",
      "info" : "ExpressionStatement[3267-3315]:ExpressionStatement[3267-3315]"
    }, {
      "left" : "contextElement = context;",
      "right" : "contextElement = context;",
      "info" : "ExpressionStatement[3324-3349]:ExpressionStatement[3324-3349]"
    }, {
      "left" : "fragmentParsing = true;",
      "right" : "fragmentParsing = true;",
      "info" : "ExpressionStatement[3358-3381]:ExpressionStatement[3358-3381]"
    }, {
      "left" : "Element root = null;",
      "right" : "Element root = null;",
      "info" : "VariableDeclarationStatement[3390-3410]:VariableDeclarationStatement[3390-3410]"
    }, {
      "left" : "if (context != null)",
      "right" : "if (context != null)",
      "info" : "IfStatement[3420-5061]:IfStatement[3420-5061]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3441-5061]:Block[3441-5061]"
    }, {
      "left" : "if (context.ownerDocument() != null)",
      "right" : "if (context.ownerDocument() != null)",
      "info" : "IfStatement[3455-3578]:IfStatement[3455-3578]"
    }, {
      "left" : "doc.quirksMode(context.ownerDocument().quirksMode());",
      "right" : "doc.quirksMode(context.ownerDocument().quirksMode());",
      "info" : "ExpressionStatement[3525-3578]:ExpressionStatement[3525-3578]"
    }, {
      "left" : "String contextTag = context.tagName();",
      "right" : "String contextTag = context.tagName();",
      "info" : "VariableDeclarationStatement[3639-3677]:VariableDeclarationStatement[3639-3677]"
    }, {
      "left" : "if (StringUtil.in(contextTag, \"title\", \"textarea\"))",
      "right" : "if (StringUtil.in(contextTag, \"title\", \"textarea\"))",
      "info" : "IfStatement[3690-4410]:IfStatement[3690-4410]"
    }, {
      "left" : "tokeniser.transition(TokeniserState.Rcdata);",
      "right" : "tokeniser.transition(TokeniserState.Rcdata);",
      "info" : "ExpressionStatement[3758-3802]:ExpressionStatement[3758-3802]"
    }, {
      "left" : "if (StringUtil.in(contextTag, \"iframe\", \"noembed\", \"noframes\", \"style\", \"xmp\"))",
      "right" : "if (StringUtil.in(contextTag, \"iframe\", \"noembed\", \"noframes\", \"style\", \"xmp\"))",
      "info" : "IfStatement[3820-4410]:IfStatement[3820-4410]"
    }, {
      "left" : "tokeniser.transition(TokeniserState.Rawtext);",
      "right" : "tokeniser.transition(TokeniserState.Rawtext);",
      "info" : "ExpressionStatement[3916-3961]:ExpressionStatement[3916-3961]"
    }, {
      "left" : "if (contextTag.equals(\"script\"))",
      "right" : "if (contextTag.equals(\"script\"))",
      "info" : "IfStatement[3979-4410]:IfStatement[3979-4410]"
    }, {
      "left" : "tokeniser.transition(TokeniserState.ScriptData);",
      "right" : "tokeniser.transition(TokeniserState.ScriptData);",
      "info" : "ExpressionStatement[4028-4076]:ExpressionStatement[4028-4076]"
    }, {
      "left" : "if (contextTag.equals((\"noscript\")))",
      "right" : "if (contextTag.equals((\"noscript\")))",
      "info" : "IfStatement[4094-4410]:IfStatement[4094-4410]"
    }, {
      "left" : "tokeniser.transition(TokeniserState.Data);",
      "right" : "tokeniser.transition(TokeniserState.Data);",
      "info" : "ExpressionStatement[4147-4189]:ExpressionStatement[4147-4189]"
    }, {
      "left" : "if (contextTag.equals(\"plaintext\"))",
      "right" : "if (contextTag.equals(\"plaintext\"))",
      "info" : "IfStatement[4240-4410]:IfStatement[4240-4410]"
    }, {
      "left" : "tokeniser.transition(TokeniserState.Data);",
      "right" : "tokeniser.transition(TokeniserState.Data);",
      "info" : "ExpressionStatement[4292-4334]:ExpressionStatement[4292-4334]"
    }, {
      "left" : "tokeniser.transition(TokeniserState.Data);",
      "right" : "tokeniser.transition(TokeniserState.Data);",
      "info" : "ExpressionStatement[4368-4410]:ExpressionStatement[4368-4410]"
    }, {
      "left" : "root = new Element(Tag.valueOf(\"html\"), baseUri);",
      "right" : "root = new Element(Tag.valueOf(\"html\"), baseUri);",
      "info" : "ExpressionStatement[4435-4484]:ExpressionStatement[4435-4484]"
    }, {
      "left" : "doc.appendChild(root);",
      "right" : "doc.appendChild(root);",
      "info" : "ExpressionStatement[4497-4519]:ExpressionStatement[4497-4519]"
    }, {
      "left" : "stack.add(root);",
      "right" : "stack.add(root);",
      "info" : "ExpressionStatement[4532-4548]:ExpressionStatement[4532-4548]"
    }, {
      "left" : "resetInsertionMode();",
      "right" : "resetInsertionMode();",
      "info" : "ExpressionStatement[4561-4582]:ExpressionStatement[4561-4582]"
    }, {
      "left" : "Elements contextChain = context.parents();",
      "right" : "Elements contextChain = context.parents();",
      "info" : "VariableDeclarationStatement[4750-4792]:VariableDeclarationStatement[4750-4792]"
    }, {
      "left" : "contextChain.add(0, context);",
      "right" : "contextChain.add(0, context);",
      "info" : "ExpressionStatement[4805-4834]:ExpressionStatement[4805-4834]"
    }, {
      "left" : "for (Element parent: contextChain)",
      "right" : "for (Element parent: contextChain)",
      "info" : "EnhancedForStatement[4847-5051]:EnhancedForStatement[4847-5051]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4882-5051]:Block[4882-5051]"
    }, {
      "left" : "if (parent instanceof FormElement)",
      "right" : "if (parent instanceof FormElement)",
      "info" : "IfStatement[4900-5037]:IfStatement[4900-5037]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4935-5037]:Block[4935-5037]"
    }, {
      "left" : "formElement = (FormElement) parent;",
      "right" : "formElement = (FormElement) parent;",
      "info" : "ExpressionStatement[4957-4992]:ExpressionStatement[4957-4992]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[5013-5019]:BreakStatement[5013-5019]"
    }, {
      "left" : "runParser();",
      "right" : "runParser();",
      "info" : "ExpressionStatement[5071-5083]:ExpressionStatement[5071-5083]"
    }, {
      "left" : "if (context != null && root != null)",
      "right" : "if (context != null && root != null)",
      "info" : "IfStatement[5092-5216]:IfStatement[5092-5216]"
    }, {
      "left" : "return root.childNodes();",
      "right" : "return root.childNodes();",
      "info" : "ReturnStatement[5141-5166]:ReturnStatement[5141-5166]"
    }, {
      "left" : "return doc.childNodes();",
      "right" : "return doc.childNodes();",
      "info" : "ReturnStatement[5192-5216]:ReturnStatement[5192-5216]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[5228-5237]:MarkerAnnotation[5228-5237]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[5242-5251]:Modifier[5242-5251]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[5252-5259]:PrimitiveType[5252-5259]"
    }, {
      "left" : "process",
      "right" : "process",
      "info" : "SimpleName[5260-5267]:SimpleName[5260-5267]"
    }, {
      "left" : "Token token",
      "right" : "Token token",
      "info" : "SingleVariableDeclaration[5268-5279]:SingleVariableDeclaration[5268-5279]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5281-5366]:Block[5281-5366]"
    }, {
      "left" : "currentToken = token;",
      "right" : "currentToken = token;",
      "info" : "ExpressionStatement[5291-5312]:ExpressionStatement[5291-5312]"
    }, {
      "left" : "return this.state.process(token, this);",
      "right" : "return this.state.process(token, this);",
      "info" : "ReturnStatement[5321-5360]:ReturnStatement[5321-5360]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[5372-5379]:PrimitiveType[5372-5379]"
    }, {
      "left" : "process",
      "right" : "process",
      "info" : "SimpleName[5380-5387]:SimpleName[5380-5387]"
    }, {
      "left" : "Token token",
      "right" : "Token token",
      "info" : "SingleVariableDeclaration[5388-5399]:SingleVariableDeclaration[5388-5399]"
    }, {
      "left" : "HtmlTreeBuilderState state",
      "right" : "HtmlTreeBuilderState state",
      "info" : "SingleVariableDeclaration[5401-5427]:SingleVariableDeclaration[5401-5427]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5429-5509]:Block[5429-5509]"
    }, {
      "left" : "currentToken = token;",
      "right" : "currentToken = token;",
      "info" : "ExpressionStatement[5439-5460]:ExpressionStatement[5439-5460]"
    }, {
      "left" : "return state.process(token, this);",
      "right" : "return state.process(token, this);",
      "info" : "ReturnStatement[5469-5503]:ReturnStatement[5469-5503]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[5515-5519]:PrimitiveType[5515-5519]"
    }, {
      "left" : "transition",
      "right" : "transition",
      "info" : "SimpleName[5520-5530]:SimpleName[5520-5530]"
    }, {
      "left" : "HtmlTreeBuilderState state",
      "right" : "HtmlTreeBuilderState state",
      "info" : "SingleVariableDeclaration[5531-5557]:SingleVariableDeclaration[5531-5557]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5559-5594]:Block[5559-5594]"
    }, {
      "left" : "this.state = state;",
      "right" : "this.state = state;",
      "info" : "ExpressionStatement[5569-5588]:ExpressionStatement[5569-5588]"
    }, {
      "left" : "HtmlTreeBuilderState",
      "right" : "HtmlTreeBuilderState",
      "info" : "SimpleType[5600-5620]:SimpleType[5600-5620]"
    }, {
      "left" : "state",
      "right" : "state",
      "info" : "SimpleName[5621-5626]:SimpleName[5621-5626]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5629-5658]:Block[5629-5658]"
    }, {
      "left" : "return state;",
      "right" : "return state;",
      "info" : "ReturnStatement[5639-5652]:ReturnStatement[5639-5652]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[5664-5668]:PrimitiveType[5664-5668]"
    }, {
      "left" : "markInsertionMode",
      "right" : "markInsertionMode",
      "info" : "SimpleName[5669-5686]:SimpleName[5669-5686]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5689-5727]:Block[5689-5727]"
    }, {
      "left" : "originalState = state;",
      "right" : "originalState = state;",
      "info" : "ExpressionStatement[5699-5721]:ExpressionStatement[5699-5721]"
    }, {
      "left" : "HtmlTreeBuilderState",
      "right" : "HtmlTreeBuilderState",
      "info" : "SimpleType[5733-5753]:SimpleType[5733-5753]"
    }, {
      "left" : "originalState",
      "right" : "originalState",
      "info" : "SimpleName[5754-5767]:SimpleName[5754-5767]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5770-5807]:Block[5770-5807]"
    }, {
      "left" : "return originalState;",
      "right" : "return originalState;",
      "info" : "ReturnStatement[5780-5801]:ReturnStatement[5780-5801]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[5813-5817]:PrimitiveType[5813-5817]"
    }, {
      "left" : "framesetOk",
      "right" : "framesetOk",
      "info" : "SimpleName[5818-5828]:SimpleName[5818-5828]"
    }, {
      "left" : "boolean framesetOk",
      "right" : "boolean framesetOk",
      "info" : "SingleVariableDeclaration[5829-5847]:SingleVariableDeclaration[5829-5847]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5849-5894]:Block[5849-5894]"
    }, {
      "left" : "this.framesetOk = framesetOk;",
      "right" : "this.framesetOk = framesetOk;",
      "info" : "ExpressionStatement[5859-5888]:ExpressionStatement[5859-5888]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[5900-5907]:PrimitiveType[5900-5907]"
    }, {
      "left" : "framesetOk",
      "right" : "framesetOk",
      "info" : "SimpleName[5908-5918]:SimpleName[5908-5918]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5921-5955]:Block[5921-5955]"
    }, {
      "left" : "return framesetOk;",
      "right" : "return framesetOk;",
      "info" : "ReturnStatement[5931-5949]:ReturnStatement[5931-5949]"
    }, {
      "left" : "Document",
      "right" : "Document",
      "info" : "SimpleType[5961-5969]:SimpleType[5961-5969]"
    }, {
      "left" : "getDocument",
      "right" : "getDocument",
      "info" : "SimpleName[5970-5981]:SimpleName[5970-5981]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5984-6011]:Block[5984-6011]"
    }, {
      "left" : "return doc;",
      "right" : "return doc;",
      "info" : "ReturnStatement[5994-6005]:ReturnStatement[5994-6005]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[6017-6023]:SimpleType[6017-6023]"
    }, {
      "left" : "getBaseUri",
      "right" : "getBaseUri",
      "info" : "SimpleName[6024-6034]:SimpleName[6024-6034]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6037-6068]:Block[6037-6068]"
    }, {
      "left" : "return baseUri;",
      "right" : "return baseUri;",
      "info" : "ReturnStatement[6047-6062]:ReturnStatement[6047-6062]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[6074-6078]:PrimitiveType[6074-6078]"
    }, {
      "left" : "maybeSetBaseUri",
      "right" : "maybeSetBaseUri",
      "info" : "SimpleName[6079-6094]:SimpleName[6079-6094]"
    }, {
      "left" : "Element base",
      "right" : "Element base",
      "info" : "SingleVariableDeclaration[6095-6107]:SingleVariableDeclaration[6095-6107]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6109-6529]:Block[6109-6529]"
    }, {
      "left" : "if (baseUriSetFromDoc)",
      "right" : "if (baseUriSetFromDoc)",
      "info" : "IfStatement[6119-6210]:IfStatement[6119-6210]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[6203-6210]:ReturnStatement[6203-6210]"
    }, {
      "left" : "String href = base.absUrl(\"href\");",
      "right" : "String href = base.absUrl(\"href\");",
      "info" : "VariableDeclarationStatement[6220-6254]:VariableDeclarationStatement[6220-6254]"
    }, {
      "left" : "if (href.length() != 0)",
      "right" : "if (href.length() != 0)",
      "info" : "IfStatement[6263-6523]:IfStatement[6263-6523]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6287-6523]:Block[6287-6523]"
    }, {
      "left" : "baseUri = href;",
      "right" : "baseUri = href;",
      "info" : "ExpressionStatement[6329-6344]:ExpressionStatement[6329-6344]"
    }, {
      "left" : "baseUriSetFromDoc = true;",
      "right" : "baseUriSetFromDoc = true;",
      "info" : "ExpressionStatement[6357-6382]:ExpressionStatement[6357-6382]"
    }, {
      "left" : "doc.setBaseUri(href);",
      "right" : "doc.setBaseUri(href);",
      "info" : "ExpressionStatement[6395-6416]:ExpressionStatement[6395-6416]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[6535-6542]:PrimitiveType[6535-6542]"
    }, {
      "left" : "isFragmentParsing",
      "right" : "isFragmentParsing",
      "info" : "SimpleName[6543-6560]:SimpleName[6543-6560]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6563-6602]:Block[6563-6602]"
    }, {
      "left" : "return fragmentParsing;",
      "right" : "return fragmentParsing;",
      "info" : "ReturnStatement[6573-6596]:ReturnStatement[6573-6596]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[6608-6612]:PrimitiveType[6608-6612]"
    }, {
      "left" : "error",
      "right" : "error",
      "info" : "SimpleName[6613-6618]:SimpleName[6613-6618]"
    }, {
      "left" : "HtmlTreeBuilderState state",
      "right" : "HtmlTreeBuilderState state",
      "info" : "SingleVariableDeclaration[6619-6645]:SingleVariableDeclaration[6619-6645]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6647-6819]:Block[6647-6819]"
    }, {
      "left" : "if (errors.canAddError())",
      "right" : "if (errors.canAddError())",
      "info" : "IfStatement[6657-6813]:IfStatement[6657-6813]"
    }, {
      "left" : "errors.add(new ParseError(reader.pos(), \"Unexpected token [%s] when in state [%s]\", currentToken.tokenType(), state));",
      "right" : "errors.add(new ParseError(reader.pos(), \"Unexpected token [%s] when in state [%s]\", currentToken.tokenType(), state));",
      "info" : "ExpressionStatement[6695-6813]:ExpressionStatement[6695-6813]"
    }, {
      "left" : "Element",
      "right" : "Element",
      "info" : "SimpleType[6825-6832]:SimpleType[6825-6832]"
    }, {
      "left" : "insert",
      "right" : "insert",
      "info" : "SimpleName[6833-6839]:SimpleName[6833-6839]"
    }, {
      "left" : "Token.StartTag startTag",
      "right" : "Token.StartTag startTag",
      "info" : "SingleVariableDeclaration[6840-6863]:SingleVariableDeclaration[6840-6863]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6865-7587]:Block[6865-7587]"
    }, {
      "left" : "if (startTag.isSelfClosing())",
      "right" : "if (startTag.isSelfClosing())",
      "info" : "IfStatement[7027-7439]:IfStatement[7027-7439]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7057-7439]:Block[7057-7439]"
    }, {
      "left" : "Element el = insertEmpty(startTag);",
      "right" : "Element el = insertEmpty(startTag);",
      "info" : "VariableDeclarationStatement[7071-7106]:VariableDeclarationStatement[7071-7106]"
    }, {
      "left" : "stack.add(el);",
      "right" : "stack.add(el);",
      "info" : "ExpressionStatement[7119-7133]:ExpressionStatement[7119-7133]"
    }, {
      "left" : "tokeniser.transition(TokeniserState.Data);",
      "right" : "tokeniser.transition(TokeniserState.Data);",
      "info" : "ExpressionStatement[7146-7188]:ExpressionStatement[7146-7188]"
    }, {
      "left" : "tokeniser.emit(emptyEnd.reset().name(el.tagName()));",
      "right" : "tokeniser.emit(emptyEnd.reset().name(el.tagName()));",
      "info" : "ExpressionStatement[7272-7324]:ExpressionStatement[7272-7324]"
    }, {
      "left" : "return el;",
      "right" : "return el;",
      "info" : "ReturnStatement[7419-7429]:ReturnStatement[7419-7429]"
    }, {
      "left" : "Element el = new Element(Tag.valueOf(startTag.name()), baseUri, startTag.attributes);",
      "right" : "Element el = new Element(Tag.valueOf(startTag.name()), baseUri, startTag.attributes);",
      "info" : "VariableDeclarationStatement[7457-7542]:VariableDeclarationStatement[7457-7542]"
    }, {
      "left" : "insert(el);",
      "right" : "insert(el);",
      "info" : "ExpressionStatement[7551-7562]:ExpressionStatement[7551-7562]"
    }, {
      "left" : "return el;",
      "right" : "return el;",
      "info" : "ReturnStatement[7571-7581]:ReturnStatement[7571-7581]"
    }, {
      "left" : "Element",
      "right" : "Element",
      "info" : "SimpleType[7593-7600]:SimpleType[7593-7600]"
    }, {
      "left" : "insertStartTag",
      "right" : "insertStartTag",
      "info" : "SimpleName[7601-7615]:SimpleName[7601-7615]"
    }, {
      "left" : "String startTagName",
      "right" : "String startTagName",
      "info" : "SingleVariableDeclaration[7616-7635]:SingleVariableDeclaration[7616-7635]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7637-7753]:Block[7637-7753]"
    }, {
      "left" : "Element el = new Element(Tag.valueOf(startTagName), baseUri);",
      "right" : "Element el = new Element(Tag.valueOf(startTagName), baseUri);",
      "info" : "VariableDeclarationStatement[7647-7708]:VariableDeclarationStatement[7647-7708]"
    }, {
      "left" : "insert(el);",
      "right" : "insert(el);",
      "info" : "ExpressionStatement[7717-7728]:ExpressionStatement[7717-7728]"
    }, {
      "left" : "return el;",
      "right" : "return el;",
      "info" : "ReturnStatement[7737-7747]:ReturnStatement[7737-7747]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[7759-7763]:PrimitiveType[7759-7763]"
    }, {
      "left" : "insert",
      "right" : "insert",
      "info" : "SimpleName[7764-7770]:SimpleName[7764-7770]"
    }, {
      "left" : "Element el",
      "right" : "Element el",
      "info" : "SingleVariableDeclaration[7771-7781]:SingleVariableDeclaration[7771-7781]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7783-7837]:Block[7783-7837]"
    }, {
      "left" : "insertNode(el);",
      "right" : "insertNode(el);",
      "info" : "ExpressionStatement[7793-7808]:ExpressionStatement[7793-7808]"
    }, {
      "left" : "stack.add(el);",
      "right" : "stack.add(el);",
      "info" : "ExpressionStatement[7817-7831]:ExpressionStatement[7817-7831]"
    }, {
      "left" : "Element",
      "right" : "Element",
      "info" : "SimpleType[7843-7850]:SimpleType[7843-7850]"
    }, {
      "left" : "insertEmpty",
      "right" : "insertEmpty",
      "info" : "SimpleName[7851-7862]:SimpleName[7851-7862]"
    }, {
      "left" : "Token.StartTag startTag",
      "right" : "Token.StartTag startTag",
      "info" : "SingleVariableDeclaration[7863-7886]:SingleVariableDeclaration[7863-7886]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7888-8485]:Block[7888-8485]"
    }, {
      "left" : "Tag tag = Tag.valueOf(startTag.name());",
      "right" : "Tag tag = Tag.valueOf(startTag.name());",
      "info" : "VariableDeclarationStatement[7898-7937]:VariableDeclarationStatement[7898-7937]"
    }, {
      "left" : "Element el = new Element(tag, baseUri, startTag.attributes);",
      "right" : "Element el = new Element(tag, baseUri, startTag.attributes);",
      "info" : "VariableDeclarationStatement[7946-8006]:VariableDeclarationStatement[7946-8006]"
    }, {
      "left" : "insertNode(el);",
      "right" : "insertNode(el);",
      "info" : "ExpressionStatement[8015-8030]:ExpressionStatement[8015-8030]"
    }, {
      "left" : "if (startTag.isSelfClosing())",
      "right" : "if (startTag.isSelfClosing())",
      "info" : "IfStatement[8039-8460]:IfStatement[8039-8460]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8069-8460]:Block[8069-8460]"
    }, {
      "left" : "if (tag.isKnownTag())",
      "right" : "if (tag.isKnownTag())",
      "info" : "IfStatement[8083-8450]:IfStatement[8083-8450]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8105-8237]:Block[8105-8237]"
    }, {
      "left" : "if (tag.isSelfClosing())",
      "right" : "if (tag.isSelfClosing())",
      "info" : "IfStatement[8123-8187]:IfStatement[8123-8187]"
    }, {
      "left" : "tokeniser.acknowledgeSelfClosingFlag();",
      "right" : "tokeniser.acknowledgeSelfClosingFlag();",
      "info" : "ExpressionStatement[8148-8187]:ExpressionStatement[8148-8187]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8243-8450]:Block[8243-8450]"
    }, {
      "left" : "tag.setSelfClosing();",
      "right" : "tag.setSelfClosing();",
      "info" : "ExpressionStatement[8334-8355]:ExpressionStatement[8334-8355]"
    }, {
      "left" : "tokeniser.acknowledgeSelfClosingFlag();",
      "right" : "tokeniser.acknowledgeSelfClosingFlag();",
      "info" : "ExpressionStatement[8372-8411]:ExpressionStatement[8372-8411]"
    }, {
      "left" : "return el;",
      "right" : "return el;",
      "info" : "ReturnStatement[8469-8479]:ReturnStatement[8469-8479]"
    }, {
      "left" : "FormElement",
      "right" : "FormElement",
      "info" : "SimpleType[8491-8502]:SimpleType[8491-8502]"
    }, {
      "left" : "insertForm",
      "right" : "insertForm",
      "info" : "SimpleName[8503-8513]:SimpleName[8503-8513]"
    }, {
      "left" : "Token.StartTag startTag",
      "right" : "Token.StartTag startTag",
      "info" : "SingleVariableDeclaration[8514-8537]:SingleVariableDeclaration[8514-8537]"
    }, {
      "left" : "boolean onStack",
      "right" : "boolean onStack",
      "info" : "SingleVariableDeclaration[8539-8554]:SingleVariableDeclaration[8539-8554]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8556-8807]:Block[8556-8807]"
    }, {
      "left" : "Tag tag = Tag.valueOf(startTag.name());",
      "right" : "Tag tag = Tag.valueOf(startTag.name());",
      "info" : "VariableDeclarationStatement[8566-8605]:VariableDeclarationStatement[8566-8605]"
    }, {
      "left" : "FormElement el = new FormElement(tag, baseUri, startTag.attributes);",
      "right" : "FormElement el = new FormElement(tag, baseUri, startTag.attributes);",
      "info" : "VariableDeclarationStatement[8614-8682]:VariableDeclarationStatement[8614-8682]"
    }, {
      "left" : "setFormElement(el);",
      "right" : "setFormElement(el);",
      "info" : "ExpressionStatement[8691-8710]:ExpressionStatement[8691-8710]"
    }, {
      "left" : "insertNode(el);",
      "right" : "insertNode(el);",
      "info" : "ExpressionStatement[8719-8734]:ExpressionStatement[8719-8734]"
    }, {
      "left" : "if (onStack)",
      "right" : "if (onStack)",
      "info" : "IfStatement[8743-8782]:IfStatement[8743-8782]"
    }, {
      "left" : "stack.add(el);",
      "right" : "stack.add(el);",
      "info" : "ExpressionStatement[8768-8782]:ExpressionStatement[8768-8782]"
    }, {
      "left" : "return el;",
      "right" : "return el;",
      "info" : "ReturnStatement[8791-8801]:ReturnStatement[8791-8801]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[8813-8817]:PrimitiveType[8813-8817]"
    }, {
      "left" : "insert",
      "right" : "insert",
      "info" : "SimpleName[8818-8824]:SimpleName[8818-8824]"
    }, {
      "left" : "Token.Comment commentToken",
      "right" : "Token.Comment commentToken",
      "info" : "SingleVariableDeclaration[8825-8851]:SingleVariableDeclaration[8825-8851]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8853-8961]:Block[8853-8961]"
    }, {
      "left" : "Comment comment = new Comment(commentToken.getData(), baseUri);",
      "right" : "Comment comment = new Comment(commentToken.getData(), baseUri);",
      "info" : "VariableDeclarationStatement[8863-8926]:VariableDeclarationStatement[8863-8926]"
    }, {
      "left" : "insertNode(comment);",
      "right" : "insertNode(comment);",
      "info" : "ExpressionStatement[8935-8955]:ExpressionStatement[8935-8955]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[8967-8971]:PrimitiveType[8967-8971]"
    }, {
      "left" : "insert",
      "right" : "insert",
      "info" : "SimpleName[8972-8978]:SimpleName[8972-8978]"
    }, {
      "left" : "Token.Character characterToken",
      "right" : "Token.Character characterToken",
      "info" : "SingleVariableDeclaration[8979-9009]:SingleVariableDeclaration[8979-9009]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9011-9513]:Block[9011-9513]"
    }, {
      "left" : "Node node;",
      "right" : "Node node;",
      "info" : "VariableDeclarationStatement[9021-9031]:VariableDeclarationStatement[9021-9031]"
    }, {
      "left" : "String tagName = currentElement().tagName();",
      "right" : "String tagName = currentElement().tagName();",
      "info" : "VariableDeclarationStatement[9117-9161]:VariableDeclarationStatement[9117-9161]"
    }, {
      "left" : "if (tagName.equals(\"script\") || tagName.equals(\"style\"))",
      "right" : "if (tagName.equals(\"script\") || tagName.equals(\"style\"))",
      "info" : "IfStatement[9170-9375]:IfStatement[9170-9375]"
    }, {
      "left" : "node = new DataNode(characterToken.getData(), baseUri);",
      "right" : "node = new DataNode(characterToken.getData(), baseUri);",
      "info" : "ExpressionStatement[9239-9294]:ExpressionStatement[9239-9294]"
    }, {
      "left" : "node = new TextNode(characterToken.getData(), baseUri);",
      "right" : "node = new TextNode(characterToken.getData(), baseUri);",
      "info" : "ExpressionStatement[9320-9375]:ExpressionStatement[9320-9375]"
    }, {
      "left" : "currentElement().appendChild(node);",
      "right" : "currentElement().appendChild(node);",
      "info" : "ExpressionStatement[9384-9419]:ExpressionStatement[9384-9419]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[9519-9526]:Modifier[9519-9526]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[9527-9531]:PrimitiveType[9527-9531]"
    }, {
      "left" : "insertNode",
      "right" : "insertNode",
      "info" : "SimpleName[9532-9542]:SimpleName[9532-9542]"
    }, {
      "left" : "Node node",
      "right" : "Node node",
      "info" : "SingleVariableDeclaration[9543-9552]:SingleVariableDeclaration[9543-9552]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9554-10096]:Block[9554-10096]"
    }, {
      "left" : "if (stack.size() == 0)",
      "right" : "if (stack.size() == 0)",
      "info" : "IfStatement[9657-9851]:IfStatement[9657-9851]"
    }, {
      "left" : "doc.appendChild(node);",
      "right" : "doc.appendChild(node);",
      "info" : "ExpressionStatement[9692-9714]:ExpressionStatement[9692-9714]"
    }, {
      "left" : "if (isFosterInserts())",
      "right" : "if (isFosterInserts())",
      "info" : "IfStatement[9728-9851]:IfStatement[9728-9851]"
    }, {
      "left" : "insertInFosterParent(node);",
      "right" : "insertInFosterParent(node);",
      "info" : "ExpressionStatement[9763-9790]:ExpressionStatement[9763-9790]"
    }, {
      "left" : "currentElement().appendChild(node);",
      "right" : "currentElement().appendChild(node);",
      "info" : "ExpressionStatement[9816-9851]:ExpressionStatement[9816-9851]"
    }, {
      "left" : "if (node instanceof Element && ((Element) node).tag().isFormListed())",
      "right" : "if (node instanceof Element && ((Element) node).tag().isFormListed())",
      "info" : "IfStatement[9916-10090]:IfStatement[9916-10090]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9986-10090]:Block[9986-10090]"
    }, {
      "left" : "if (formElement != null)",
      "right" : "if (formElement != null)",
      "info" : "IfStatement[10000-10080]:IfStatement[10000-10080]"
    }, {
      "left" : "formElement.addElement((Element) node);",
      "right" : "formElement.addElement((Element) node);",
      "info" : "ExpressionStatement[10041-10080]:ExpressionStatement[10041-10080]"
    }, {
      "left" : "Element",
      "right" : "Element",
      "info" : "SimpleType[10102-10109]:SimpleType[10102-10109]"
    }, {
      "left" : "pop",
      "right" : "pop",
      "info" : "SimpleName[10110-10113]:SimpleName[10110-10113]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10116-10193]:Block[10116-10193]"
    }, {
      "left" : "int size = stack.size();",
      "right" : "int size = stack.size();",
      "info" : "VariableDeclarationStatement[10126-10150]:VariableDeclarationStatement[10126-10150]"
    }, {
      "left" : "return stack.remove(size-1);",
      "right" : "return stack.remove(size-1);",
      "info" : "ReturnStatement[10159-10187]:ReturnStatement[10159-10187]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[10199-10203]:PrimitiveType[10199-10203]"
    }, {
      "left" : "push",
      "right" : "push",
      "info" : "SimpleName[10204-10208]:SimpleName[10204-10208]"
    }, {
      "left" : "Element element",
      "right" : "Element element",
      "info" : "SingleVariableDeclaration[10209-10224]:SingleVariableDeclaration[10209-10224]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10226-10261]:Block[10226-10261]"
    }, {
      "left" : "stack.add(element);",
      "right" : "stack.add(element);",
      "info" : "ExpressionStatement[10236-10255]:ExpressionStatement[10236-10255]"
    }, {
      "left" : "ArrayList<Element>",
      "right" : "ArrayList<Element>",
      "info" : "ParameterizedType[10267-10285]:ParameterizedType[10267-10285]"
    }, {
      "left" : "getStack",
      "right" : "getStack",
      "info" : "SimpleName[10286-10294]:SimpleName[10286-10294]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10297-10326]:Block[10297-10326]"
    }, {
      "left" : "return stack;",
      "right" : "return stack;",
      "info" : "ReturnStatement[10307-10320]:ReturnStatement[10307-10320]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[10332-10339]:PrimitiveType[10332-10339]"
    }, {
      "left" : "onStack",
      "right" : "onStack",
      "info" : "SimpleName[10340-10347]:SimpleName[10340-10347]"
    }, {
      "left" : "Element el",
      "right" : "Element el",
      "info" : "SingleVariableDeclaration[10348-10358]:SingleVariableDeclaration[10348-10358]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10360-10411]:Block[10360-10411]"
    }, {
      "left" : "return isElementInQueue(stack, el);",
      "right" : "return isElementInQueue(stack, el);",
      "info" : "ReturnStatement[10370-10405]:ReturnStatement[10370-10405]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[10417-10424]:Modifier[10417-10424]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[10425-10432]:PrimitiveType[10425-10432]"
    }, {
      "left" : "isElementInQueue",
      "right" : "isElementInQueue",
      "info" : "SimpleName[10433-10449]:SimpleName[10433-10449]"
    }, {
      "left" : "ArrayList<Element> queue",
      "right" : "ArrayList<Element> queue",
      "info" : "SingleVariableDeclaration[10450-10474]:SingleVariableDeclaration[10450-10474]"
    }, {
      "left" : "Element element",
      "right" : "Element element",
      "info" : "SingleVariableDeclaration[10476-10491]:SingleVariableDeclaration[10476-10491]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10493-10712]:Block[10493-10712]"
    }, {
      "left" : "for (int pos = queue.size() -1; pos >= 0; pos--)",
      "right" : "for (int pos = queue.size() -1; pos >= 0; pos--)",
      "info" : "ForStatement[10503-10684]:ForStatement[10503-10684]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10552-10684]:Block[10552-10684]"
    }, {
      "left" : "Element next = queue.get(pos);",
      "right" : "Element next = queue.get(pos);",
      "info" : "VariableDeclarationStatement[10566-10596]:VariableDeclarationStatement[10566-10596]"
    }, {
      "left" : "if (next == element)",
      "right" : "if (next == element)",
      "info" : "IfStatement[10609-10674]:IfStatement[10609-10674]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10630-10674]:Block[10630-10674]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[10648-10660]:ReturnStatement[10648-10660]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[10693-10706]:ReturnStatement[10693-10706]"
    }, {
      "left" : "Element",
      "right" : "Element",
      "info" : "SimpleType[10718-10725]:SimpleType[10718-10725]"
    }, {
      "left" : "getFromStack",
      "right" : "getFromStack",
      "info" : "SimpleName[10726-10738]:SimpleName[10726-10738]"
    }, {
      "left" : "String elName",
      "right" : "String elName",
      "info" : "SingleVariableDeclaration[10739-10752]:SingleVariableDeclaration[10739-10752]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10754-10987]:Block[10754-10987]"
    }, {
      "left" : "for (int pos = stack.size() -1; pos >= 0; pos--)",
      "right" : "for (int pos = stack.size() -1; pos >= 0; pos--)",
      "info" : "ForStatement[10764-10960]:ForStatement[10764-10960]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10813-10960]:Block[10813-10960]"
    }, {
      "left" : "Element next = stack.get(pos);",
      "right" : "Element next = stack.get(pos);",
      "info" : "VariableDeclarationStatement[10827-10857]:VariableDeclarationStatement[10827-10857]"
    }, {
      "left" : "if (next.nodeName().equals(elName))",
      "right" : "if (next.nodeName().equals(elName))",
      "info" : "IfStatement[10870-10950]:IfStatement[10870-10950]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10906-10950]:Block[10906-10950]"
    }, {
      "left" : "return next;",
      "right" : "return next;",
      "info" : "ReturnStatement[10924-10936]:ReturnStatement[10924-10936]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[10969-10981]:ReturnStatement[10969-10981]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[10993-11000]:PrimitiveType[10993-11000]"
    }, {
      "left" : "removeFromStack",
      "right" : "removeFromStack",
      "info" : "SimpleName[11001-11016]:SimpleName[11001-11016]"
    }, {
      "left" : "Element el",
      "right" : "Element el",
      "info" : "SingleVariableDeclaration[11017-11027]:SingleVariableDeclaration[11017-11027]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11029-11278]:Block[11029-11278]"
    }, {
      "left" : "for (int pos = stack.size() -1; pos >= 0; pos--)",
      "right" : "for (int pos = stack.size() -1; pos >= 0; pos--)",
      "info" : "ForStatement[11039-11250]:ForStatement[11039-11250]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11088-11250]:Block[11088-11250]"
    }, {
      "left" : "Element next = stack.get(pos);",
      "right" : "Element next = stack.get(pos);",
      "info" : "VariableDeclarationStatement[11102-11132]:VariableDeclarationStatement[11102-11132]"
    }, {
      "left" : "if (next == el)",
      "right" : "if (next == el)",
      "info" : "IfStatement[11145-11240]:IfStatement[11145-11240]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11161-11240]:Block[11161-11240]"
    }, {
      "left" : "stack.remove(pos);",
      "right" : "stack.remove(pos);",
      "info" : "ExpressionStatement[11179-11197]:ExpressionStatement[11179-11197]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[11214-11226]:ReturnStatement[11214-11226]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[11259-11272]:ReturnStatement[11259-11272]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[11284-11288]:PrimitiveType[11284-11288]"
    }, {
      "left" : "popStackToClose",
      "right" : "popStackToClose",
      "info" : "SimpleName[11289-11304]:SimpleName[11289-11304]"
    }, {
      "left" : "String elName",
      "right" : "String elName",
      "info" : "SingleVariableDeclaration[11305-11318]:SingleVariableDeclaration[11305-11318]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11320-11541]:Block[11320-11541]"
    }, {
      "left" : "for (int pos = stack.size() -1; pos >= 0; pos--)",
      "right" : "for (int pos = stack.size() -1; pos >= 0; pos--)",
      "info" : "ForStatement[11330-11535]:ForStatement[11330-11535]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11379-11535]:Block[11379-11535]"
    }, {
      "left" : "Element next = stack.get(pos);",
      "right" : "Element next = stack.get(pos);",
      "info" : "VariableDeclarationStatement[11393-11423]:VariableDeclarationStatement[11393-11423]"
    }, {
      "left" : "stack.remove(pos);",
      "right" : "stack.remove(pos);",
      "info" : "ExpressionStatement[11436-11454]:ExpressionStatement[11436-11454]"
    }, {
      "left" : "if (next.nodeName().equals(elName))",
      "right" : "if (next.nodeName().equals(elName))",
      "info" : "IfStatement[11467-11525]:IfStatement[11467-11525]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[11519-11525]:BreakStatement[11519-11525]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[11547-11551]:PrimitiveType[11547-11551]"
    }, {
      "left" : "popStackToClose",
      "right" : "popStackToClose",
      "info" : "SimpleName[11552-11567]:SimpleName[11552-11567]"
    }, {
      "left" : "String... elNames",
      "right" : "String... elNames",
      "info" : "SingleVariableDeclaration[11568-11585]:SingleVariableDeclaration[11568-11585]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11587-11817]:Block[11587-11817]"
    }, {
      "left" : "for (int pos = stack.size() -1; pos >= 0; pos--)",
      "right" : "for (int pos = stack.size() -1; pos >= 0; pos--)",
      "info" : "ForStatement[11597-11811]:ForStatement[11597-11811]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11646-11811]:Block[11646-11811]"
    }, {
      "left" : "Element next = stack.get(pos);",
      "right" : "Element next = stack.get(pos);",
      "info" : "VariableDeclarationStatement[11660-11690]:VariableDeclarationStatement[11660-11690]"
    }, {
      "left" : "stack.remove(pos);",
      "right" : "stack.remove(pos);",
      "info" : "ExpressionStatement[11703-11721]:ExpressionStatement[11703-11721]"
    }, {
      "left" : "if (StringUtil.in(next.nodeName(), elNames))",
      "right" : "if (StringUtil.in(next.nodeName(), elNames))",
      "info" : "IfStatement[11734-11801]:IfStatement[11734-11801]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[11795-11801]:BreakStatement[11795-11801]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[11823-11827]:PrimitiveType[11823-11827]"
    }, {
      "left" : "popStackToBefore",
      "right" : "popStackToBefore",
      "info" : "SimpleName[11828-11844]:SimpleName[11828-11844]"
    }, {
      "left" : "String elName",
      "right" : "String elName",
      "info" : "SingleVariableDeclaration[11845-11858]:SingleVariableDeclaration[11845-11858]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11860-12122]:Block[11860-12122]"
    }, {
      "left" : "for (int pos = stack.size() -1; pos >= 0; pos--)",
      "right" : "for (int pos = stack.size() -1; pos >= 0; pos--)",
      "info" : "ForStatement[11870-12116]:ForStatement[11870-12116]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11919-12116]:Block[11919-12116]"
    }, {
      "left" : "Element next = stack.get(pos);",
      "right" : "Element next = stack.get(pos);",
      "info" : "VariableDeclarationStatement[11933-11963]:VariableDeclarationStatement[11933-11963]"
    }, {
      "left" : "if (next.nodeName().equals(elName))",
      "right" : "if (next.nodeName().equals(elName))",
      "info" : "IfStatement[11976-12106]:IfStatement[11976-12106]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12012-12050]:Block[12012-12050]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[12030-12036]:BreakStatement[12030-12036]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12056-12106]:Block[12056-12106]"
    }, {
      "left" : "stack.remove(pos);",
      "right" : "stack.remove(pos);",
      "info" : "ExpressionStatement[12074-12092]:ExpressionStatement[12074-12092]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[12128-12132]:PrimitiveType[12128-12132]"
    }, {
      "left" : "clearStackToTableContext",
      "right" : "clearStackToTableContext",
      "info" : "SimpleName[12133-12157]:SimpleName[12133-12157]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12160-12205]:Block[12160-12205]"
    }, {
      "left" : "clearStackToContext(\"table\");",
      "right" : "clearStackToContext(\"table\");",
      "info" : "ExpressionStatement[12170-12199]:ExpressionStatement[12170-12199]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[12211-12215]:PrimitiveType[12211-12215]"
    }, {
      "left" : "clearStackToTableBodyContext",
      "right" : "clearStackToTableBodyContext",
      "info" : "SimpleName[12216-12244]:SimpleName[12216-12244]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12247-12310]:Block[12247-12310]"
    }, {
      "left" : "clearStackToContext(\"tbody\", \"tfoot\", \"thead\");",
      "right" : "clearStackToContext(\"tbody\", \"tfoot\", \"thead\");",
      "info" : "ExpressionStatement[12257-12304]:ExpressionStatement[12257-12304]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[12316-12320]:PrimitiveType[12316-12320]"
    }, {
      "left" : "clearStackToTableRowContext",
      "right" : "clearStackToTableRowContext",
      "info" : "SimpleName[12321-12348]:SimpleName[12321-12348]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12351-12393]:Block[12351-12393]"
    }, {
      "left" : "clearStackToContext(\"tr\");",
      "right" : "clearStackToContext(\"tr\");",
      "info" : "ExpressionStatement[12361-12387]:ExpressionStatement[12361-12387]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[12399-12406]:Modifier[12399-12406]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[12407-12411]:PrimitiveType[12407-12411]"
    }, {
      "left" : "clearStackToContext",
      "right" : "clearStackToContext",
      "info" : "SimpleName[12412-12431]:SimpleName[12412-12431]"
    }, {
      "left" : "String... nodeNames",
      "right" : "String... nodeNames",
      "info" : "SingleVariableDeclaration[12432-12451]:SingleVariableDeclaration[12432-12451]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12453-12740]:Block[12453-12740]"
    }, {
      "left" : "for (int pos = stack.size() -1; pos >= 0; pos--)",
      "right" : "for (int pos = stack.size() -1; pos >= 0; pos--)",
      "info" : "ForStatement[12463-12734]:ForStatement[12463-12734]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12512-12734]:Block[12512-12734]"
    }, {
      "left" : "Element next = stack.get(pos);",
      "right" : "Element next = stack.get(pos);",
      "info" : "VariableDeclarationStatement[12526-12556]:VariableDeclarationStatement[12526-12556]"
    }, {
      "left" : "if (StringUtil.in(next.nodeName(), nodeNames) || next.nodeName().equals(\"html\"))",
      "right" : "if (StringUtil.in(next.nodeName(), nodeNames) || next.nodeName().equals(\"html\"))",
      "info" : "IfStatement[12569-12724]:IfStatement[12569-12724]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[12666-12672]:BreakStatement[12666-12672]"
    }, {
      "left" : "stack.remove(pos);",
      "right" : "stack.remove(pos);",
      "info" : "ExpressionStatement[12706-12724]:ExpressionStatement[12706-12724]"
    }, {
      "left" : "Element",
      "right" : "Element",
      "info" : "SimpleType[12746-12753]:SimpleType[12746-12753]"
    }, {
      "left" : "aboveOnStack",
      "right" : "aboveOnStack",
      "info" : "SimpleName[12754-12766]:SimpleName[12754-12766]"
    }, {
      "left" : "Element el",
      "right" : "Element el",
      "info" : "SingleVariableDeclaration[12767-12777]:SingleVariableDeclaration[12767-12777]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12779-13032]:Block[12779-13032]"
    }, {
      "left" : "assert onStack(el);",
      "right" : "assert onStack(el);",
      "info" : "AssertStatement[12789-12808]:AssertStatement[12789-12808]"
    }, {
      "left" : "for (int pos = stack.size() -1; pos >= 0; pos--)",
      "right" : "for (int pos = stack.size() -1; pos >= 0; pos--)",
      "info" : "ForStatement[12817-13005]:ForStatement[12817-13005]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12866-13005]:Block[12866-13005]"
    }, {
      "left" : "Element next = stack.get(pos);",
      "right" : "Element next = stack.get(pos);",
      "info" : "VariableDeclarationStatement[12880-12910]:VariableDeclarationStatement[12880-12910]"
    }, {
      "left" : "if (next == el)",
      "right" : "if (next == el)",
      "info" : "IfStatement[12923-12995]:IfStatement[12923-12995]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12939-12995]:Block[12939-12995]"
    }, {
      "left" : "return stack.get(pos-1);",
      "right" : "return stack.get(pos-1);",
      "info" : "ReturnStatement[12957-12981]:ReturnStatement[12957-12981]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[13014-13026]:ReturnStatement[13014-13026]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[13038-13042]:PrimitiveType[13038-13042]"
    }, {
      "left" : "insertOnStackAfter",
      "right" : "insertOnStackAfter",
      "info" : "SimpleName[13043-13061]:SimpleName[13043-13061]"
    }, {
      "left" : "Element after",
      "right" : "Element after",
      "info" : "SingleVariableDeclaration[13062-13075]:SingleVariableDeclaration[13062-13075]"
    }, {
      "left" : "Element in",
      "right" : "Element in",
      "info" : "SingleVariableDeclaration[13077-13087]:SingleVariableDeclaration[13077-13087]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13089-13200]:Block[13089-13200]"
    }, {
      "left" : "int i = stack.lastIndexOf(after);",
      "right" : "int i = stack.lastIndexOf(after);",
      "info" : "VariableDeclarationStatement[13099-13132]:VariableDeclarationStatement[13099-13132]"
    }, {
      "left" : "Validate.isTrue(i != -1);",
      "right" : "Validate.isTrue(i != -1);",
      "info" : "ExpressionStatement[13141-13166]:ExpressionStatement[13141-13166]"
    }, {
      "left" : "stack.add(i+1, in);",
      "right" : "stack.add(i+1, in);",
      "info" : "ExpressionStatement[13175-13194]:ExpressionStatement[13175-13194]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[13206-13210]:PrimitiveType[13206-13210]"
    }, {
      "left" : "replaceOnStack",
      "right" : "replaceOnStack",
      "info" : "SimpleName[13211-13225]:SimpleName[13211-13225]"
    }, {
      "left" : "Element out",
      "right" : "Element out",
      "info" : "SingleVariableDeclaration[13226-13237]:SingleVariableDeclaration[13226-13237]"
    }, {
      "left" : "Element in",
      "right" : "Element in",
      "info" : "SingleVariableDeclaration[13239-13249]:SingleVariableDeclaration[13239-13249]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13251-13298]:Block[13251-13298]"
    }, {
      "left" : "replaceInQueue(stack, out, in);",
      "right" : "replaceInQueue(stack, out, in);",
      "info" : "ExpressionStatement[13261-13292]:ExpressionStatement[13261-13292]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[13304-13311]:Modifier[13304-13311]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[13312-13316]:PrimitiveType[13312-13316]"
    }, {
      "left" : "replaceInQueue",
      "right" : "replaceInQueue",
      "info" : "SimpleName[13317-13331]:SimpleName[13317-13331]"
    }, {
      "left" : "ArrayList<Element> queue",
      "right" : "ArrayList<Element> queue",
      "info" : "SingleVariableDeclaration[13332-13356]:SingleVariableDeclaration[13332-13356]"
    }, {
      "left" : "Element out",
      "right" : "Element out",
      "info" : "SingleVariableDeclaration[13358-13369]:SingleVariableDeclaration[13358-13369]"
    }, {
      "left" : "Element in",
      "right" : "Element in",
      "info" : "SingleVariableDeclaration[13371-13381]:SingleVariableDeclaration[13371-13381]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13383-13490]:Block[13383-13490]"
    }, {
      "left" : "int i = queue.lastIndexOf(out);",
      "right" : "int i = queue.lastIndexOf(out);",
      "info" : "VariableDeclarationStatement[13393-13424]:VariableDeclarationStatement[13393-13424]"
    }, {
      "left" : "Validate.isTrue(i != -1);",
      "right" : "Validate.isTrue(i != -1);",
      "info" : "ExpressionStatement[13433-13458]:ExpressionStatement[13433-13458]"
    }, {
      "left" : "queue.set(i, in);",
      "right" : "queue.set(i, in);",
      "info" : "ExpressionStatement[13467-13484]:ExpressionStatement[13467-13484]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[13496-13500]:PrimitiveType[13496-13500]"
    }, {
      "left" : "resetInsertionMode",
      "right" : "resetInsertionMode",
      "info" : "SimpleName[13501-13519]:SimpleName[13501-13519]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13522-15492]:Block[13522-15492]"
    }, {
      "left" : "boolean last = false;",
      "right" : "boolean last = false;",
      "info" : "VariableDeclarationStatement[13532-13553]:VariableDeclarationStatement[13532-13553]"
    }, {
      "left" : "for (int pos = stack.size() -1; pos >= 0; pos--)",
      "right" : "for (int pos = stack.size() -1; pos >= 0; pos--)",
      "info" : "ForStatement[13562-15486]:ForStatement[13562-15486]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13611-15486]:Block[13611-15486]"
    }, {
      "left" : "Element node = stack.get(pos);",
      "right" : "Element node = stack.get(pos);",
      "info" : "VariableDeclarationStatement[13625-13655]:VariableDeclarationStatement[13625-13655]"
    }, {
      "left" : "if (pos == 0)",
      "right" : "if (pos == 0)",
      "info" : "IfStatement[13668-13765]:IfStatement[13668-13765]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13682-13765]:Block[13682-13765]"
    }, {
      "left" : "last = true;",
      "right" : "last = true;",
      "info" : "ExpressionStatement[13700-13712]:ExpressionStatement[13700-13712]"
    }, {
      "left" : "node = contextElement;",
      "right" : "node = contextElement;",
      "info" : "ExpressionStatement[13729-13751]:ExpressionStatement[13729-13751]"
    }, {
      "left" : "String name = node.nodeName();",
      "right" : "String name = node.nodeName();",
      "info" : "VariableDeclarationStatement[13778-13808]:VariableDeclarationStatement[13778-13808]"
    }, {
      "left" : "if (\"select\".equals(name))",
      "right" : "if (\"select\".equals(name))",
      "info" : "IfStatement[13821-15476]:IfStatement[13821-15476]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13848-13953]:Block[13848-13953]"
    }, {
      "left" : "transition(HtmlTreeBuilderState.InSelect);",
      "right" : "transition(HtmlTreeBuilderState.InSelect);",
      "info" : "ExpressionStatement[13866-13908]:ExpressionStatement[13866-13908]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[13925-13931]:BreakStatement[13925-13931]"
    }, {
      "left" : "if ((\"td\".equals(name) || \"td\".equals(name) && !last))",
      "right" : "if ((\"td\".equals(name) || \"th\".equals(name) && !last))",
      "info" : "IfStatement[13959-15476]:IfStatement[13959-15476]"
    }, {
      "left" : "\"td\".equals(name)",
      "right" : "\"td\".equals(name)",
      "info" : "MethodInvocation[13985-14002]:MethodInvocation[13964-13981]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14014-14109]:Block[14014-14109]"
    }, {
      "left" : "transition(HtmlTreeBuilderState.InCell);",
      "right" : "transition(HtmlTreeBuilderState.InCell);",
      "info" : "ExpressionStatement[14032-14072]:ExpressionStatement[14032-14072]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[14089-14095]:BreakStatement[14089-14095]"
    }, {
      "left" : "if (\"tr\".equals(name))",
      "right" : "if (\"tr\".equals(name))",
      "info" : "IfStatement[14115-15476]:IfStatement[14115-15476]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14138-14232]:Block[14138-14232]"
    }, {
      "left" : "transition(HtmlTreeBuilderState.InRow);",
      "right" : "transition(HtmlTreeBuilderState.InRow);",
      "info" : "ExpressionStatement[14156-14195]:ExpressionStatement[14156-14195]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[14212-14218]:BreakStatement[14212-14218]"
    }, {
      "left" : "if (\"tbody\".equals(name) || \"thead\".equals(name) || \"tfoot\".equals(name))",
      "right" : "if (\"tbody\".equals(name) || \"thead\".equals(name) || \"tfoot\".equals(name))",
      "info" : "IfStatement[14238-15476]:IfStatement[14238-15476]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14312-14412]:Block[14312-14412]"
    }, {
      "left" : "transition(HtmlTreeBuilderState.InTableBody);",
      "right" : "transition(HtmlTreeBuilderState.InTableBody);",
      "info" : "ExpressionStatement[14330-14375]:ExpressionStatement[14330-14375]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[14392-14398]:BreakStatement[14392-14398]"
    }, {
      "left" : "if (\"caption\".equals(name))",
      "right" : "if (\"caption\".equals(name))",
      "info" : "IfStatement[14418-15476]:IfStatement[14418-15476]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14446-14544]:Block[14446-14544]"
    }, {
      "left" : "transition(HtmlTreeBuilderState.InCaption);",
      "right" : "transition(HtmlTreeBuilderState.InCaption);",
      "info" : "ExpressionStatement[14464-14507]:ExpressionStatement[14464-14507]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[14524-14530]:BreakStatement[14524-14530]"
    }, {
      "left" : "if (\"colgroup\".equals(name))",
      "right" : "if (\"colgroup\".equals(name))",
      "info" : "IfStatement[14550-15476]:IfStatement[14550-15476]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14579-14689]:Block[14579-14689]"
    }, {
      "left" : "transition(HtmlTreeBuilderState.InColumnGroup);",
      "right" : "transition(HtmlTreeBuilderState.InColumnGroup);",
      "info" : "ExpressionStatement[14597-14644]:ExpressionStatement[14597-14644]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[14661-14667]:BreakStatement[14661-14667]"
    }, {
      "left" : "if (\"table\".equals(name))",
      "right" : "if (\"table\".equals(name))",
      "info" : "IfStatement[14695-15476]:IfStatement[14695-15476]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14721-14817]:Block[14721-14817]"
    }, {
      "left" : "transition(HtmlTreeBuilderState.InTable);",
      "right" : "transition(HtmlTreeBuilderState.InTable);",
      "info" : "ExpressionStatement[14739-14780]:ExpressionStatement[14739-14780]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[14797-14803]:BreakStatement[14797-14803]"
    }, {
      "left" : "if (\"head\".equals(name))",
      "right" : "if (\"head\".equals(name))",
      "info" : "IfStatement[14823-15476]:IfStatement[14823-15476]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14848-14951]:Block[14848-14951]"
    }, {
      "left" : "transition(HtmlTreeBuilderState.InBody);",
      "right" : "transition(HtmlTreeBuilderState.InBody);",
      "info" : "ExpressionStatement[14866-14906]:ExpressionStatement[14866-14906]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[14923-14929]:BreakStatement[14923-14929]"
    }, {
      "left" : "if (\"body\".equals(name))",
      "right" : "if (\"body\".equals(name))",
      "info" : "IfStatement[14957-15476]:IfStatement[14957-15476]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14982-15077]:Block[14982-15077]"
    }, {
      "left" : "transition(HtmlTreeBuilderState.InBody);",
      "right" : "transition(HtmlTreeBuilderState.InBody);",
      "info" : "ExpressionStatement[15000-15040]:ExpressionStatement[15000-15040]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[15057-15063]:BreakStatement[15057-15063]"
    }, {
      "left" : "if (\"frameset\".equals(name))",
      "right" : "if (\"frameset\".equals(name))",
      "info" : "IfStatement[15083-15476]:IfStatement[15083-15476]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15112-15219]:Block[15112-15219]"
    }, {
      "left" : "transition(HtmlTreeBuilderState.InFrameset);",
      "right" : "transition(HtmlTreeBuilderState.InFrameset);",
      "info" : "ExpressionStatement[15130-15174]:ExpressionStatement[15130-15174]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[15191-15197]:BreakStatement[15191-15197]"
    }, {
      "left" : "if (\"html\".equals(name))",
      "right" : "if (\"html\".equals(name))",
      "info" : "IfStatement[15225-15476]:IfStatement[15225-15476]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15250-15357]:Block[15250-15357]"
    }, {
      "left" : "transition(HtmlTreeBuilderState.BeforeHead);",
      "right" : "transition(HtmlTreeBuilderState.BeforeHead);",
      "info" : "ExpressionStatement[15268-15312]:ExpressionStatement[15268-15312]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[15329-15335]:BreakStatement[15329-15335]"
    }, {
      "left" : "if (last)",
      "right" : "if (last)",
      "info" : "IfStatement[15363-15476]:IfStatement[15363-15476]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15373-15476]:Block[15373-15476]"
    }, {
      "left" : "transition(HtmlTreeBuilderState.InBody);",
      "right" : "transition(HtmlTreeBuilderState.InBody);",
      "info" : "ExpressionStatement[15391-15431]:ExpressionStatement[15391-15431]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[15448-15454]:BreakStatement[15448-15454]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[15597-15604]:Modifier[15597-15604]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[15605-15612]:PrimitiveType[15605-15612]"
    }, {
      "left" : "inSpecificScope",
      "right" : "inSpecificScope",
      "info" : "SimpleName[15613-15628]:SimpleName[15613-15628]"
    }, {
      "left" : "String targetName",
      "right" : "String targetName",
      "info" : "SingleVariableDeclaration[15629-15646]:SingleVariableDeclaration[15629-15646]"
    }, {
      "left" : "String[] baseTypes",
      "right" : "String[] baseTypes",
      "info" : "SingleVariableDeclaration[15648-15666]:SingleVariableDeclaration[15648-15666]"
    }, {
      "left" : "String[] extraTypes",
      "right" : "String[] extraTypes",
      "info" : "SingleVariableDeclaration[15668-15687]:SingleVariableDeclaration[15668-15687]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15689-15817]:Block[15689-15817]"
    }, {
      "left" : "specificScopeTarget[0] = targetName;",
      "right" : "specificScopeTarget[0] = targetName;",
      "info" : "ExpressionStatement[15699-15735]:ExpressionStatement[15699-15735]"
    }, {
      "left" : "return inSpecificScope(specificScopeTarget, baseTypes, extraTypes);",
      "right" : "return inSpecificScope(specificScopeTarget, baseTypes, extraTypes);",
      "info" : "ReturnStatement[15744-15811]:ReturnStatement[15744-15811]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[15823-15830]:Modifier[15823-15830]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[15831-15838]:PrimitiveType[15831-15838]"
    }, {
      "left" : "inSpecificScope",
      "right" : "inSpecificScope",
      "info" : "SimpleName[15839-15854]:SimpleName[15839-15854]"
    }, {
      "left" : "String[] targetNames",
      "right" : "String[] targetNames",
      "info" : "SingleVariableDeclaration[15855-15875]:SingleVariableDeclaration[15855-15875]"
    }, {
      "left" : "String[] baseTypes",
      "right" : "String[] baseTypes",
      "info" : "SingleVariableDeclaration[15877-15895]:SingleVariableDeclaration[15877-15895]"
    }, {
      "left" : "String[] extraTypes",
      "right" : "String[] extraTypes",
      "info" : "SingleVariableDeclaration[15897-15916]:SingleVariableDeclaration[15897-15916]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15918-16414]:Block[15918-16414]"
    }, {
      "left" : "for (int pos = stack.size() -1; pos >= 0; pos--)",
      "right" : "for (int pos = stack.size() -1; pos >= 0; pos--)",
      "info" : "ForStatement[15928-16336]:ForStatement[15928-16336]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15977-16336]:Block[15977-16336]"
    }, {
      "left" : "Element el = stack.get(pos);",
      "right" : "Element el = stack.get(pos);",
      "info" : "VariableDeclarationStatement[15991-16019]:VariableDeclarationStatement[15991-16019]"
    }, {
      "left" : "String elName = el.nodeName();",
      "right" : "String elName = el.nodeName();",
      "info" : "VariableDeclarationStatement[16032-16062]:VariableDeclarationStatement[16032-16062]"
    }, {
      "left" : "if (StringUtil.in(elName, targetNames))",
      "right" : "if (StringUtil.in(elName, targetNames))",
      "info" : "IfStatement[16075-16143]:IfStatement[16075-16143]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[16131-16143]:ReturnStatement[16131-16143]"
    }, {
      "left" : "if (StringUtil.in(elName, baseTypes))",
      "right" : "if (StringUtil.in(elName, baseTypes))",
      "info" : "IfStatement[16156-16223]:IfStatement[16156-16223]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[16210-16223]:ReturnStatement[16210-16223]"
    }, {
      "left" : "if (extraTypes != null && StringUtil.in(elName, extraTypes))",
      "right" : "if (extraTypes != null && StringUtil.in(elName, extraTypes))",
      "info" : "IfStatement[16236-16326]:IfStatement[16236-16326]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[16313-16326]:ReturnStatement[16313-16326]"
    }, {
      "left" : "Validate.fail(\"Should not be reachable\");",
      "right" : "Validate.fail(\"Should not be reachable\");",
      "info" : "ExpressionStatement[16345-16386]:ExpressionStatement[16345-16386]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[16395-16408]:ReturnStatement[16395-16408]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[16420-16427]:PrimitiveType[16420-16427]"
    }, {
      "left" : "inScope",
      "right" : "inScope",
      "info" : "SimpleName[16428-16435]:SimpleName[16428-16435]"
    }, {
      "left" : "String[] targetNames",
      "right" : "String[] targetNames",
      "info" : "SingleVariableDeclaration[16436-16456]:SingleVariableDeclaration[16436-16456]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16458-16535]:Block[16458-16535]"
    }, {
      "left" : "return inSpecificScope(targetNames, TagsSearchInScope, null);",
      "right" : "return inSpecificScope(targetNames, TagsSearchInScope, null);",
      "info" : "ReturnStatement[16468-16529]:ReturnStatement[16468-16529]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[16541-16548]:PrimitiveType[16541-16548]"
    }, {
      "left" : "inScope",
      "right" : "inScope",
      "info" : "SimpleName[16549-16556]:SimpleName[16549-16556]"
    }, {
      "left" : "String targetName",
      "right" : "String targetName",
      "info" : "SingleVariableDeclaration[16557-16574]:SingleVariableDeclaration[16557-16574]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16576-16625]:Block[16576-16625]"
    }, {
      "left" : "return inScope(targetName, null);",
      "right" : "return inScope(targetName, null);",
      "info" : "ReturnStatement[16586-16619]:ReturnStatement[16586-16619]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[16631-16638]:PrimitiveType[16631-16638]"
    }, {
      "left" : "inScope",
      "right" : "inScope",
      "info" : "SimpleName[16639-16646]:SimpleName[16639-16646]"
    }, {
      "left" : "String targetName",
      "right" : "String targetName",
      "info" : "SingleVariableDeclaration[16647-16664]:SingleVariableDeclaration[16647-16664]"
    }, {
      "left" : "String[] extras",
      "right" : "String[] extras",
      "info" : "SingleVariableDeclaration[16666-16681]:SingleVariableDeclaration[16666-16681]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16683-16897]:Block[16683-16897]"
    }, {
      "left" : "return inSpecificScope(targetName, TagsSearchInScope, extras);",
      "right" : "return inSpecificScope(targetName, TagsSearchInScope, extras);",
      "info" : "ReturnStatement[16693-16755]:ReturnStatement[16693-16755]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[16903-16910]:PrimitiveType[16903-16910]"
    }, {
      "left" : "inListItemScope",
      "right" : "inListItemScope",
      "info" : "SimpleName[16911-16926]:SimpleName[16911-16926]"
    }, {
      "left" : "String targetName",
      "right" : "String targetName",
      "info" : "SingleVariableDeclaration[16927-16944]:SingleVariableDeclaration[16927-16944]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16946-17004]:Block[16946-17004]"
    }, {
      "left" : "return inScope(targetName, TagSearchList);",
      "right" : "return inScope(targetName, TagSearchList);",
      "info" : "ReturnStatement[16956-16998]:ReturnStatement[16956-16998]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[17010-17017]:PrimitiveType[17010-17017]"
    }, {
      "left" : "inButtonScope",
      "right" : "inButtonScope",
      "info" : "SimpleName[17018-17031]:SimpleName[17018-17031]"
    }, {
      "left" : "String targetName",
      "right" : "String targetName",
      "info" : "SingleVariableDeclaration[17032-17049]:SingleVariableDeclaration[17032-17049]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17051-17111]:Block[17051-17111]"
    }, {
      "left" : "return inScope(targetName, TagSearchButton);",
      "right" : "return inScope(targetName, TagSearchButton);",
      "info" : "ReturnStatement[17061-17105]:ReturnStatement[17061-17105]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[17117-17124]:PrimitiveType[17117-17124]"
    }, {
      "left" : "inTableScope",
      "right" : "inTableScope",
      "info" : "SimpleName[17125-17137]:SimpleName[17125-17137]"
    }, {
      "left" : "String targetName",
      "right" : "String targetName",
      "info" : "SingleVariableDeclaration[17138-17155]:SingleVariableDeclaration[17138-17155]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17157-17235]:Block[17157-17235]"
    }, {
      "left" : "return inSpecificScope(targetName, TagSearchTableScope, null);",
      "right" : "return inSpecificScope(targetName, TagSearchTableScope, null);",
      "info" : "ReturnStatement[17167-17229]:ReturnStatement[17167-17229]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[17241-17248]:PrimitiveType[17241-17248]"
    }, {
      "left" : "inSelectScope",
      "right" : "inSelectScope",
      "info" : "SimpleName[17249-17262]:SimpleName[17249-17262]"
    }, {
      "left" : "String targetName",
      "right" : "String targetName",
      "info" : "SingleVariableDeclaration[17263-17280]:SingleVariableDeclaration[17263-17280]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17282-17701]:Block[17282-17701]"
    }, {
      "left" : "for (int pos = stack.size() -1; pos >= 0; pos--)",
      "right" : "for (int pos = stack.size() -1; pos >= 0; pos--)",
      "info" : "ForStatement[17292-17623]:ForStatement[17292-17623]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17341-17623]:Block[17341-17623]"
    }, {
      "left" : "Element el = stack.get(pos);",
      "right" : "Element el = stack.get(pos);",
      "info" : "VariableDeclarationStatement[17355-17383]:VariableDeclarationStatement[17355-17383]"
    }, {
      "left" : "String elName = el.nodeName();",
      "right" : "String elName = el.nodeName();",
      "info" : "VariableDeclarationStatement[17396-17426]:VariableDeclarationStatement[17396-17426]"
    }, {
      "left" : "if (elName.equals(targetName))",
      "right" : "if (elName.equals(targetName))",
      "info" : "IfStatement[17439-17498]:IfStatement[17439-17498]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[17486-17498]:ReturnStatement[17486-17498]"
    }, {
      "left" : "if (!StringUtil.in(elName, TagSearchSelectScope))",
      "right" : "if (!StringUtil.in(elName, TagSearchSelectScope))",
      "info" : "IfStatement[17511-17613]:IfStatement[17511-17613]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[17600-17613]:ReturnStatement[17600-17613]"
    }, {
      "left" : "Validate.fail(\"Should not be reachable\");",
      "right" : "Validate.fail(\"Should not be reachable\");",
      "info" : "ExpressionStatement[17632-17673]:ExpressionStatement[17632-17673]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[17682-17695]:ReturnStatement[17682-17695]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[17707-17711]:PrimitiveType[17707-17711]"
    }, {
      "left" : "setHeadElement",
      "right" : "setHeadElement",
      "info" : "SimpleName[17712-17726]:SimpleName[17712-17726]"
    }, {
      "left" : "Element headElement",
      "right" : "Element headElement",
      "info" : "SingleVariableDeclaration[17727-17746]:SingleVariableDeclaration[17727-17746]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17748-17795]:Block[17748-17795]"
    }, {
      "left" : "this.headElement = headElement;",
      "right" : "this.headElement = headElement;",
      "info" : "ExpressionStatement[17758-17789]:ExpressionStatement[17758-17789]"
    }, {
      "left" : "Element",
      "right" : "Element",
      "info" : "SimpleType[17801-17808]:SimpleType[17801-17808]"
    }, {
      "left" : "getHeadElement",
      "right" : "getHeadElement",
      "info" : "SimpleName[17809-17823]:SimpleName[17809-17823]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17826-17861]:Block[17826-17861]"
    }, {
      "left" : "return headElement;",
      "right" : "return headElement;",
      "info" : "ReturnStatement[17836-17855]:ReturnStatement[17836-17855]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[17867-17874]:PrimitiveType[17867-17874]"
    }, {
      "left" : "isFosterInserts",
      "right" : "isFosterInserts",
      "info" : "SimpleName[17875-17890]:SimpleName[17875-17890]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17893-17930]:Block[17893-17930]"
    }, {
      "left" : "return fosterInserts;",
      "right" : "return fosterInserts;",
      "info" : "ReturnStatement[17903-17924]:ReturnStatement[17903-17924]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[17936-17940]:PrimitiveType[17936-17940]"
    }, {
      "left" : "setFosterInserts",
      "right" : "setFosterInserts",
      "info" : "SimpleName[17941-17957]:SimpleName[17941-17957]"
    }, {
      "left" : "boolean fosterInserts",
      "right" : "boolean fosterInserts",
      "info" : "SingleVariableDeclaration[17958-17979]:SingleVariableDeclaration[17958-17979]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17981-18032]:Block[17981-18032]"
    }, {
      "left" : "this.fosterInserts = fosterInserts;",
      "right" : "this.fosterInserts = fosterInserts;",
      "info" : "ExpressionStatement[17991-18026]:ExpressionStatement[17991-18026]"
    }, {
      "left" : "FormElement",
      "right" : "FormElement",
      "info" : "SimpleType[18038-18049]:SimpleType[18038-18049]"
    }, {
      "left" : "getFormElement",
      "right" : "getFormElement",
      "info" : "SimpleName[18050-18064]:SimpleName[18050-18064]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18067-18102]:Block[18067-18102]"
    }, {
      "left" : "return formElement;",
      "right" : "return formElement;",
      "info" : "ReturnStatement[18077-18096]:ReturnStatement[18077-18096]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[18108-18112]:PrimitiveType[18108-18112]"
    }, {
      "left" : "setFormElement",
      "right" : "setFormElement",
      "info" : "SimpleName[18113-18127]:SimpleName[18113-18127]"
    }, {
      "left" : "FormElement formElement",
      "right" : "FormElement formElement",
      "info" : "SingleVariableDeclaration[18128-18151]:SingleVariableDeclaration[18128-18151]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18153-18200]:Block[18153-18200]"
    }, {
      "left" : "this.formElement = formElement;",
      "right" : "this.formElement = formElement;",
      "info" : "ExpressionStatement[18163-18194]:ExpressionStatement[18163-18194]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[18206-18210]:PrimitiveType[18206-18210]"
    }, {
      "left" : "newPendingTableCharacters",
      "right" : "newPendingTableCharacters",
      "info" : "SimpleName[18211-18236]:SimpleName[18211-18236]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18239-18304]:Block[18239-18304]"
    }, {
      "left" : "pendingTableCharacters = new ArrayList<String>();",
      "right" : "pendingTableCharacters = new ArrayList<String>();",
      "info" : "ExpressionStatement[18249-18298]:ExpressionStatement[18249-18298]"
    }, {
      "left" : "List<String>",
      "right" : "List<String>",
      "info" : "ParameterizedType[18310-18322]:ParameterizedType[18310-18322]"
    }, {
      "left" : "getPendingTableCharacters",
      "right" : "getPendingTableCharacters",
      "info" : "SimpleName[18323-18348]:SimpleName[18323-18348]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18351-18397]:Block[18351-18397]"
    }, {
      "left" : "return pendingTableCharacters;",
      "right" : "return pendingTableCharacters;",
      "info" : "ReturnStatement[18361-18391]:ReturnStatement[18361-18391]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[18403-18407]:PrimitiveType[18403-18407]"
    }, {
      "left" : "setPendingTableCharacters",
      "right" : "setPendingTableCharacters",
      "info" : "SimpleName[18408-18433]:SimpleName[18408-18433]"
    }, {
      "left" : "List<String> pendingTableCharacters",
      "right" : "List<String> pendingTableCharacters",
      "info" : "SingleVariableDeclaration[18434-18469]:SingleVariableDeclaration[18434-18469]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18471-18540]:Block[18471-18540]"
    }, {
      "left" : "this.pendingTableCharacters = pendingTableCharacters;",
      "right" : "this.pendingTableCharacters = pendingTableCharacters;",
      "info" : "ExpressionStatement[18481-18534]:ExpressionStatement[18481-18534]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[19152-19156]:PrimitiveType[19152-19156]"
    }, {
      "left" : "generateImpliedEndTags",
      "right" : "generateImpliedEndTags",
      "info" : "SimpleName[19157-19179]:SimpleName[19157-19179]"
    }, {
      "left" : "String excludeTag",
      "right" : "String excludeTag",
      "info" : "SingleVariableDeclaration[19180-19197]:SingleVariableDeclaration[19180-19197]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19199-19393]:Block[19199-19393]"
    }, {
      "left" : "while ((excludeTag != null && !currentElement().nodeName().equals(excludeTag)) &&\n                StringUtil.in(currentElement().nodeName(), TagSearchEndTags))\n            pop();",
      "right" : "while ((excludeTag != null && !currentElement().nodeName().equals(excludeTag)) &&\n                StringUtil.in(currentElement().nodeName(), TagSearchEndTags))\n            pop();",
      "info" : "WhileStatement[19209-19387]:WhileStatement[19209-19387]"
    }, {
      "left" : "pop();",
      "right" : "pop();",
      "info" : "ExpressionStatement[19381-19387]:ExpressionStatement[19381-19387]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[19399-19403]:PrimitiveType[19399-19403]"
    }, {
      "left" : "generateImpliedEndTags",
      "right" : "generateImpliedEndTags",
      "info" : "SimpleName[19404-19426]:SimpleName[19404-19426]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19429-19474]:Block[19429-19474]"
    }, {
      "left" : "generateImpliedEndTags(null);",
      "right" : "generateImpliedEndTags(null);",
      "info" : "ExpressionStatement[19439-19468]:ExpressionStatement[19439-19468]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[19480-19487]:PrimitiveType[19480-19487]"
    }, {
      "left" : "isSpecial",
      "right" : "isSpecial",
      "info" : "SimpleName[19488-19497]:SimpleName[19488-19497]"
    }, {
      "left" : "Element el",
      "right" : "Element el",
      "info" : "SingleVariableDeclaration[19498-19508]:SingleVariableDeclaration[19498-19508]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19510-19694]:Block[19510-19694]"
    }, {
      "left" : "String name = el.nodeName();",
      "right" : "String name = el.nodeName();",
      "info" : "VariableDeclarationStatement[19606-19634]:VariableDeclarationStatement[19606-19634]"
    }, {
      "left" : "return StringUtil.in(name, TagSearchSpecial);",
      "right" : "return StringUtil.in(name, TagSearchSpecial);",
      "info" : "ReturnStatement[19643-19688]:ReturnStatement[19643-19688]"
    }, {
      "left" : "Element",
      "right" : "Element",
      "info" : "SimpleType[19700-19707]:SimpleType[19700-19707]"
    }, {
      "left" : "lastFormattingElement",
      "right" : "lastFormattingElement",
      "info" : "SimpleName[19708-19729]:SimpleName[19708-19729]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19732-19846]:Block[19732-19846]"
    }, {
      "left" : "return formattingElements.size() > 0 ? formattingElements.get(formattingElements.size()-1) : null;",
      "right" : "return formattingElements.size() > 0 ? formattingElements.get(formattingElements.size()-1) : null;",
      "info" : "ReturnStatement[19742-19840]:ReturnStatement[19742-19840]"
    }, {
      "left" : "Element",
      "right" : "Element",
      "info" : "SimpleType[19852-19859]:SimpleType[19852-19859]"
    }, {
      "left" : "removeLastFormattingElement",
      "right" : "removeLastFormattingElement",
      "info" : "SimpleName[19860-19887]:SimpleName[19860-19887]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19890-20057]:Block[19890-20057]"
    }, {
      "left" : "int size = formattingElements.size();",
      "right" : "int size = formattingElements.size();",
      "info" : "VariableDeclarationStatement[19900-19937]:VariableDeclarationStatement[19900-19937]"
    }, {
      "left" : "if (size > 0)",
      "right" : "if (size > 0)",
      "info" : "IfStatement[19946-20051]:IfStatement[19946-20051]"
    }, {
      "left" : "return formattingElements.remove(size-1);",
      "right" : "return formattingElements.remove(size-1);",
      "info" : "ReturnStatement[19972-20013]:ReturnStatement[19972-20013]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[20039-20051]:ReturnStatement[20039-20051]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[20097-20101]:PrimitiveType[20097-20101]"
    }, {
      "left" : "pushActiveFormattingElements",
      "right" : "pushActiveFormattingElements",
      "info" : "SimpleName[20102-20130]:SimpleName[20102-20130]"
    }, {
      "left" : "Element in",
      "right" : "Element in",
      "info" : "SingleVariableDeclaration[20131-20141]:SingleVariableDeclaration[20131-20141]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20143-20603]:Block[20143-20603]"
    }, {
      "left" : "int numSeen = 0;",
      "right" : "int numSeen = 0;",
      "info" : "VariableDeclarationStatement[20153-20169]:VariableDeclarationStatement[20153-20169]"
    }, {
      "left" : "for (int pos = formattingElements.size() -1; pos >= 0; pos--)",
      "right" : "for (int pos = formattingElements.size() -1; pos >= 0; pos--)",
      "info" : "ForStatement[20178-20561]:ForStatement[20178-20561]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20240-20561]:Block[20240-20561]"
    }, {
      "left" : "Element el = formattingElements.get(pos);",
      "right" : "Element el = formattingElements.get(pos);",
      "info" : "VariableDeclarationStatement[20254-20295]:VariableDeclarationStatement[20254-20295]"
    }, {
      "left" : "if (el == null)",
      "right" : "if (el == null)",
      "info" : "IfStatement[20308-20356]:IfStatement[20308-20356]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[20350-20356]:BreakStatement[20350-20356]"
    }, {
      "left" : "if (isSameFormattingElement(in, el))",
      "right" : "if (isSameFormattingElement(in, el))",
      "info" : "IfStatement[20370-20433]:IfStatement[20370-20433]"
    }, {
      "left" : "numSeen++;",
      "right" : "numSeen++;",
      "info" : "ExpressionStatement[20423-20433]:ExpressionStatement[20423-20433]"
    }, {
      "left" : "if (numSeen == 3)",
      "right" : "if (numSeen == 3)",
      "info" : "IfStatement[20447-20551]:IfStatement[20447-20551]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20465-20551]:Block[20465-20551]"
    }, {
      "left" : "formattingElements.remove(pos);",
      "right" : "formattingElements.remove(pos);",
      "info" : "ExpressionStatement[20483-20514]:ExpressionStatement[20483-20514]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[20531-20537]:BreakStatement[20531-20537]"
    }, {
      "left" : "formattingElements.add(in);",
      "right" : "formattingElements.add(in);",
      "info" : "ExpressionStatement[20570-20597]:ExpressionStatement[20570-20597]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[20609-20616]:Modifier[20609-20616]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[20617-20624]:PrimitiveType[20617-20624]"
    }, {
      "left" : "isSameFormattingElement",
      "right" : "isSameFormattingElement",
      "info" : "SimpleName[20625-20648]:SimpleName[20625-20648]"
    }, {
      "left" : "Element a",
      "right" : "Element a",
      "info" : "SingleVariableDeclaration[20649-20658]:SingleVariableDeclaration[20649-20658]"
    }, {
      "left" : "Element b",
      "right" : "Element b",
      "info" : "SingleVariableDeclaration[20660-20669]:SingleVariableDeclaration[20660-20669]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20671-20991]:Block[20671-20991]"
    }, {
      "left" : "return a.nodeName().equals(b.nodeName()) &&\n                // a.namespace().equals(b.namespace()) &&\n                a.attributes().equals(b.attributes());",
      "right" : "return a.nodeName().equals(b.nodeName()) &&\n                // a.namespace().equals(b.namespace()) &&\n                a.attributes().equals(b.attributes());",
      "info" : "ReturnStatement[20801-20957]:ReturnStatement[20801-20957]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[20997-21001]:PrimitiveType[20997-21001]"
    }, {
      "left" : "reconstructFormattingElements",
      "right" : "reconstructFormattingElements",
      "info" : "SimpleName[21002-21031]:SimpleName[21002-21031]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21034-22498]:Block[21034-22498]"
    }, {
      "left" : "Element last = lastFormattingElement();",
      "right" : "Element last = lastFormattingElement();",
      "info" : "VariableDeclarationStatement[21044-21083]:VariableDeclarationStatement[21044-21083]"
    }, {
      "left" : "if (last == null || onStack(last))",
      "right" : "if (last == null || onStack(last))",
      "info" : "IfStatement[21092-21146]:IfStatement[21092-21146]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[21139-21146]:ReturnStatement[21139-21146]"
    }, {
      "left" : "Element entry = last;",
      "right" : "Element entry = last;",
      "info" : "VariableDeclarationStatement[21156-21177]:VariableDeclarationStatement[21156-21177]"
    }, {
      "left" : "int size = formattingElements.size();",
      "right" : "int size = formattingElements.size();",
      "info" : "VariableDeclarationStatement[21186-21223]:VariableDeclarationStatement[21186-21223]"
    }, {
      "left" : "int pos = size - 1;",
      "right" : "int pos = size - 1;",
      "info" : "VariableDeclarationStatement[21232-21251]:VariableDeclarationStatement[21232-21251]"
    }, {
      "left" : "boolean skip = false;",
      "right" : "boolean skip = false;",
      "info" : "VariableDeclarationStatement[21260-21281]:VariableDeclarationStatement[21260-21281]"
    }, {
      "left" : "while (true)",
      "right" : "while (true)",
      "info" : "WhileStatement[21290-21680]:WhileStatement[21290-21680]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21303-21680]:Block[21303-21680]"
    }, {
      "left" : "if (pos == 0)",
      "right" : "if (pos == 0)",
      "info" : "IfStatement[21317-21435]:IfStatement[21317-21435]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21331-21435]:Block[21331-21435]"
    }, {
      "left" : "skip = true;",
      "right" : "skip = true;",
      "info" : "ExpressionStatement[21386-21398]:ExpressionStatement[21386-21398]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[21415-21421]:BreakStatement[21415-21421]"
    }, {
      "left" : "entry = formattingElements.get(--pos);",
      "right" : "entry = formattingElements.get(--pos);",
      "info" : "ExpressionStatement[21448-21486]:ExpressionStatement[21448-21486]"
    }, {
      "left" : "if (entry == null || onStack(entry))",
      "right" : "if (entry == null || onStack(entry))",
      "info" : "IfStatement[21533-21632]:IfStatement[21533-21632]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[21626-21632]:BreakStatement[21626-21632]"
    }, {
      "left" : "while(true)",
      "right" : "while(true)",
      "info" : "WhileStatement[21689-22492]:WhileStatement[21689-22492]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21701-22492]:Block[21701-22492]"
    }, {
      "left" : "if (!skip)",
      "right" : "if (!skip)",
      "info" : "IfStatement[21715-21811]:IfStatement[21715-21811]"
    }, {
      "left" : "entry = formattingElements.get(++pos);",
      "right" : "entry = formattingElements.get(++pos);",
      "info" : "ExpressionStatement[21773-21811]:ExpressionStatement[21773-21811]"
    }, {
      "left" : "Validate.notNull(entry);",
      "right" : "Validate.notNull(entry);",
      "info" : "ExpressionStatement[21824-21848]:ExpressionStatement[21824-21848]"
    }, {
      "left" : "skip = false;",
      "right" : "skip = false;",
      "info" : "ExpressionStatement[22001-22014]:ExpressionStatement[22001-22014]"
    }, {
      "left" : "Element newEl = insertStartTag(entry.nodeName());",
      "right" : "Element newEl = insertStartTag(entry.nodeName());",
      "info" : "VariableDeclarationStatement[22062-22111]:VariableDeclarationStatement[22062-22111]"
    }, {
      "left" : "newEl.attributes().addAll(entry.attributes());",
      "right" : "newEl.attributes().addAll(entry.attributes());",
      "info" : "ExpressionStatement[22226-22272]:ExpressionStatement[22226-22272]"
    }, {
      "left" : "formattingElements.set(pos, newEl);",
      "right" : "formattingElements.set(pos, newEl);",
      "info" : "ExpressionStatement[22334-22369]:ExpressionStatement[22334-22369]"
    }, {
      "left" : "if (pos == size-1)",
      "right" : "if (pos == size-1)",
      "info" : "IfStatement[22401-22482]:IfStatement[22401-22482]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[22476-22482]:BreakStatement[22476-22482]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[22504-22508]:PrimitiveType[22504-22508]"
    }, {
      "left" : "clearFormattingElementsToLastMarker",
      "right" : "clearFormattingElementsToLastMarker",
      "info" : "SimpleName[22509-22544]:SimpleName[22509-22544]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22547-22719]:Block[22547-22719]"
    }, {
      "left" : "while (!formattingElements.isEmpty())",
      "right" : "while (!formattingElements.isEmpty())",
      "info" : "WhileStatement[22557-22713]:WhileStatement[22557-22713]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22595-22713]:Block[22595-22713]"
    }, {
      "left" : "Element el = removeLastFormattingElement();",
      "right" : "Element el = removeLastFormattingElement();",
      "info" : "VariableDeclarationStatement[22609-22652]:VariableDeclarationStatement[22609-22652]"
    }, {
      "left" : "if (el == null)",
      "right" : "if (el == null)",
      "info" : "IfStatement[22665-22703]:IfStatement[22665-22703]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[22697-22703]:BreakStatement[22697-22703]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[22725-22729]:PrimitiveType[22725-22729]"
    }, {
      "left" : "removeFromActiveFormattingElements",
      "right" : "removeFromActiveFormattingElements",
      "info" : "SimpleName[22730-22764]:SimpleName[22730-22764]"
    }, {
      "left" : "Element el",
      "right" : "Element el",
      "info" : "SingleVariableDeclaration[22765-22775]:SingleVariableDeclaration[22765-22775]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22777-23037]:Block[22777-23037]"
    }, {
      "left" : "for (int pos = formattingElements.size() -1; pos >= 0; pos--)",
      "right" : "for (int pos = formattingElements.size() -1; pos >= 0; pos--)",
      "info" : "ForStatement[22787-23031]:ForStatement[22787-23031]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22849-23031]:Block[22849-23031]"
    }, {
      "left" : "Element next = formattingElements.get(pos);",
      "right" : "Element next = formattingElements.get(pos);",
      "info" : "VariableDeclarationStatement[22863-22906]:VariableDeclarationStatement[22863-22906]"
    }, {
      "left" : "if (next == el)",
      "right" : "if (next == el)",
      "info" : "IfStatement[22919-23021]:IfStatement[22919-23021]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22935-23021]:Block[22935-23021]"
    }, {
      "left" : "formattingElements.remove(pos);",
      "right" : "formattingElements.remove(pos);",
      "info" : "ExpressionStatement[22953-22984]:ExpressionStatement[22953-22984]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[23001-23007]:BreakStatement[23001-23007]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[23043-23050]:PrimitiveType[23043-23050]"
    }, {
      "left" : "isInActiveFormattingElements",
      "right" : "isInActiveFormattingElements",
      "info" : "SimpleName[23051-23079]:SimpleName[23051-23079]"
    }, {
      "left" : "Element el",
      "right" : "Element el",
      "info" : "SingleVariableDeclaration[23080-23090]:SingleVariableDeclaration[23080-23090]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23092-23156]:Block[23092-23156]"
    }, {
      "left" : "return isElementInQueue(formattingElements, el);",
      "right" : "return isElementInQueue(formattingElements, el);",
      "info" : "ReturnStatement[23102-23150]:ReturnStatement[23102-23150]"
    }, {
      "left" : "Element",
      "right" : "Element",
      "info" : "SimpleType[23162-23169]:SimpleType[23162-23169]"
    }, {
      "left" : "getActiveFormattingElement",
      "right" : "getActiveFormattingElement",
      "info" : "SimpleName[23170-23196]:SimpleName[23170-23196]"
    }, {
      "left" : "String nodeName",
      "right" : "String nodeName",
      "info" : "SingleVariableDeclaration[23197-23212]:SingleVariableDeclaration[23197-23212]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23214-23533]:Block[23214-23533]"
    }, {
      "left" : "for (int pos = formattingElements.size() -1; pos >= 0; pos--)",
      "right" : "for (int pos = formattingElements.size() -1; pos >= 0; pos--)",
      "info" : "ForStatement[23224-23506]:ForStatement[23224-23506]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23286-23506]:Block[23286-23506]"
    }, {
      "left" : "Element next = formattingElements.get(pos);",
      "right" : "Element next = formattingElements.get(pos);",
      "info" : "VariableDeclarationStatement[23300-23343]:VariableDeclarationStatement[23300-23343]"
    }, {
      "left" : "if (next == null)",
      "right" : "if (next == null)",
      "info" : "IfStatement[23356-23496]:IfStatement[23356-23496]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[23406-23412]:BreakStatement[23406-23412]"
    }, {
      "left" : "if (next.nodeName().equals(nodeName))",
      "right" : "if (next.nodeName().equals(nodeName))",
      "info" : "IfStatement[23430-23496]:IfStatement[23430-23496]"
    }, {
      "left" : "return next;",
      "right" : "return next;",
      "info" : "ReturnStatement[23484-23496]:ReturnStatement[23484-23496]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[23515-23527]:ReturnStatement[23515-23527]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[23539-23543]:PrimitiveType[23539-23543]"
    }, {
      "left" : "replaceActiveFormattingElement",
      "right" : "replaceActiveFormattingElement",
      "info" : "SimpleName[23544-23574]:SimpleName[23544-23574]"
    }, {
      "left" : "Element out",
      "right" : "Element out",
      "info" : "SingleVariableDeclaration[23575-23586]:SingleVariableDeclaration[23575-23586]"
    }, {
      "left" : "Element in",
      "right" : "Element in",
      "info" : "SingleVariableDeclaration[23588-23598]:SingleVariableDeclaration[23588-23598]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23600-23660]:Block[23600-23660]"
    }, {
      "left" : "replaceInQueue(formattingElements, out, in);",
      "right" : "replaceInQueue(formattingElements, out, in);",
      "info" : "ExpressionStatement[23610-23654]:ExpressionStatement[23610-23654]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[23666-23670]:PrimitiveType[23666-23670]"
    }, {
      "left" : "insertMarkerToFormattingElements",
      "right" : "insertMarkerToFormattingElements",
      "info" : "SimpleName[23671-23703]:SimpleName[23671-23703]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23706-23751]:Block[23706-23751]"
    }, {
      "left" : "formattingElements.add(null);",
      "right" : "formattingElements.add(null);",
      "info" : "ExpressionStatement[23716-23745]:ExpressionStatement[23716-23745]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[23757-23761]:PrimitiveType[23757-23761]"
    }, {
      "left" : "insertInFosterParent",
      "right" : "insertInFosterParent",
      "info" : "SimpleName[23762-23782]:SimpleName[23762-23782]"
    }, {
      "left" : "Node in",
      "right" : "Node in",
      "info" : "SingleVariableDeclaration[23783-23790]:SingleVariableDeclaration[23783-23790]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23792-24476]:Block[23792-24476]"
    }, {
      "left" : "Element fosterParent;",
      "right" : "Element fosterParent;",
      "info" : "VariableDeclarationStatement[23802-23823]:VariableDeclarationStatement[23802-23823]"
    }, {
      "left" : "Element lastTable = getFromStack(\"table\");",
      "right" : "Element lastTable = getFromStack(\"table\");",
      "info" : "VariableDeclarationStatement[23832-23874]:VariableDeclarationStatement[23832-23874]"
    }, {
      "left" : "boolean isLastTableParent = false;",
      "right" : "boolean isLastTableParent = false;",
      "info" : "VariableDeclarationStatement[23883-23917]:VariableDeclarationStatement[23883-23917]"
    }, {
      "left" : "if (lastTable != null)",
      "right" : "if (lastTable != null)",
      "info" : "IfStatement[23926-24252]:IfStatement[23926-24252]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23949-24174]:Block[23949-24174]"
    }, {
      "left" : "if (lastTable.parent() != null)",
      "right" : "if (lastTable.parent() != null)",
      "info" : "IfStatement[23963-24164]:IfStatement[23963-24164]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23995-24103]:Block[23995-24103]"
    }, {
      "left" : "fosterParent = lastTable.parent();",
      "right" : "fosterParent = lastTable.parent();",
      "info" : "ExpressionStatement[24013-24047]:ExpressionStatement[24013-24047]"
    }, {
      "left" : "isLastTableParent = true;",
      "right" : "isLastTableParent = true;",
      "info" : "ExpressionStatement[24064-24089]:ExpressionStatement[24064-24089]"
    }, {
      "left" : "fosterParent = aboveOnStack(lastTable);",
      "right" : "fosterParent = aboveOnStack(lastTable);",
      "info" : "ExpressionStatement[24125-24164]:ExpressionStatement[24125-24164]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24180-24252]:Block[24180-24252]"
    }, {
      "left" : "fosterParent = stack.get(0);",
      "right" : "fosterParent = stack.get(0);",
      "info" : "ExpressionStatement[24214-24242]:ExpressionStatement[24214-24242]"
    }, {
      "left" : "if (isLastTableParent)",
      "right" : "if (isLastTableParent)",
      "info" : "IfStatement[24262-24470]:IfStatement[24262-24470]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24285-24415]:Block[24285-24415]"
    }, {
      "left" : "Validate.notNull(lastTable);",
      "right" : "Validate.notNull(lastTable);",
      "info" : "ExpressionStatement[24299-24327]:ExpressionStatement[24299-24327]"
    }, {
      "left" : "lastTable.before(in);",
      "right" : "lastTable.before(in);",
      "info" : "ExpressionStatement[24384-24405]:ExpressionStatement[24384-24405]"
    }, {
      "left" : "fosterParent.appendChild(in);",
      "right" : "fosterParent.appendChild(in);",
      "info" : "ExpressionStatement[24441-24470]:ExpressionStatement[24441-24470]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[24482-24491]:MarkerAnnotation[24482-24491]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[24496-24502]:Modifier[24496-24502]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[24503-24509]:SimpleType[24503-24509]"
    }, {
      "left" : "toString",
      "right" : "toString",
      "info" : "SimpleName[24510-24518]:SimpleName[24510-24518]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24521-24724]:Block[24521-24724]"
    }, {
      "left" : "return \"TreeBuilder{\" +\n                \"currentToken=\" + currentToken +\n                \", state=\" + state +\n                \", currentElement=\" + currentElement() +\n                '}';",
      "right" : "return \"TreeBuilder{\" +\n                \"currentToken=\" + currentToken +\n                \", state=\" + state +\n                \", currentElement=\" + currentElement() +\n                '}';",
      "info" : "ReturnStatement[24531-24718]:ReturnStatement[24531-24718]"
    } ]
  },
  "interFileMappings" : { }
}