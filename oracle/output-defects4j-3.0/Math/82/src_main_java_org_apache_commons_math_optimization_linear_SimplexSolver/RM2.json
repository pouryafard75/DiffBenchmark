{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "SimplexSolver",
      "right" : "SimplexSolver",
      "info" : "TypeDeclaration[1038-7013]:TypeDeclaration[1038-7012]"
    }, {
      "left" : "private static final double DEFAULT_EPSILON = 1.0e-6;",
      "right" : "private static final double DEFAULT_EPSILON = 1.0e-6;",
      "info" : "FieldDeclaration[1219-1349]:FieldDeclaration[1219-1349]"
    }, {
      "left" : "protected final double epsilon;",
      "right" : "protected final double epsilon;",
      "info" : "FieldDeclaration[1355-1455]:FieldDeclaration[1355-1455]"
    }, {
      "left" : "public SimplexSolver()",
      "right" : "public SimplexSolver()",
      "info" : "MethodDeclaration[1463-1593]:MethodDeclaration[1463-1593]"
    }, {
      "left" : "public SimplexSolver(final double epsilon)",
      "right" : "public SimplexSolver(final double epsilon)",
      "info" : "MethodDeclaration[1599-1851]:MethodDeclaration[1599-1851]"
    }, {
      "left" : "private Integer getPivotColumn(SimplexTableau tableau)",
      "right" : "private Integer getPivotColumn(SimplexTableau tableau)",
      "info" : "MethodDeclaration[1857-2501]:MethodDeclaration[1857-2501]"
    }, {
      "left" : "private Integer getPivotRow(final int col, final SimplexTableau tableau)",
      "right" : "private Integer getPivotRow(final int col, final SimplexTableau tableau)",
      "info" : "MethodDeclaration[2507-3485]:MethodDeclaration[2507-3484]"
    }, {
      "left" : "protected void doIteration(final SimplexTableau tableau)\n        throws OptimizationException",
      "right" : "protected void doIteration(final SimplexTableau tableau)\n        throws OptimizationException",
      "info" : "MethodDeclaration[3492-4566]:MethodDeclaration[3491-4565]"
    }, {
      "left" : "private boolean isPhase1Solved(final SimplexTableau tableau)",
      "right" : "private boolean isPhase1Solved(final SimplexTableau tableau)",
      "info" : "MethodDeclaration[4572-5128]:MethodDeclaration[4571-5127]"
    }, {
      "left" : "public boolean isOptimal(final SimplexTableau tableau)",
      "right" : "public boolean isOptimal(final SimplexTableau tableau)",
      "info" : "MethodDeclaration[5134-5710]:MethodDeclaration[5133-5709]"
    }, {
      "left" : "protected void solvePhase1(final SimplexTableau tableau)\n        throws OptimizationException",
      "right" : "protected void solvePhase1(final SimplexTableau tableau)\n        throws OptimizationException",
      "info" : "MethodDeclaration[5716-6557]:MethodDeclaration[5715-6556]"
    }, {
      "left" : "public RealPointValuePair doOptimize()\n        throws OptimizationException",
      "right" : "public RealPointValuePair doOptimize()\n        throws OptimizationException",
      "info" : "MethodDeclaration[6563-7010]:MethodDeclaration[6562-7009]"
    } ],
    "mappings" : [
 {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[1153-1159]:Modifier[1153-1159]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[1160-1165]:TYPE_DECLARATION_KIND[1160-1165]"
    }, {
      "left" : "SimplexSolver",
      "right" : "SimplexSolver",
      "info" : "SimpleName[1166-1179]:SimpleName[1166-1179]"
    }, {
      "left" : "AbstractLinearOptimizer",
      "right" : "AbstractLinearOptimizer",
      "info" : "SimpleType[1188-1211]:SimpleType[1188-1211]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[1532-1538]:Modifier[1532-1538]"
    }, {
      "left" : "SimplexSolver",
      "right" : "SimplexSolver",
      "info" : "SimpleName[1539-1552]:SimpleName[1539-1552]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1555-1593]:Block[1555-1593]"
    }, {
      "left" : "this(DEFAULT_EPSILON);",
      "right" : "this(DEFAULT_EPSILON);",
      "info" : "ConstructorInvocation[1565-1587]:ConstructorInvocation[1565-1587]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[1769-1775]:Modifier[1769-1775]"
    }, {
      "left" : "SimplexSolver",
      "right" : "SimplexSolver",
      "info" : "SimpleName[1776-1789]:SimpleName[1776-1789]"
    }, {
      "left" : "final double epsilon",
      "right" : "final double epsilon",
      "info" : "SingleVariableDeclaration[1790-1810]:SingleVariableDeclaration[1790-1810]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1812-1851]:Block[1812-1851]"
    }, {
      "left" : "this.epsilon = epsilon;",
      "right" : "this.epsilon = epsilon;",
      "info" : "ExpressionStatement[1822-1845]:ExpressionStatement[1822-1845]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[2075-2082]:Modifier[2075-2082]"
    }, {
      "left" : "Integer",
      "right" : "Integer",
      "info" : "SimpleType[2083-2090]:SimpleType[2083-2090]"
    }, {
      "left" : "getPivotColumn",
      "right" : "getPivotColumn",
      "info" : "SimpleName[2091-2105]:SimpleName[2091-2105]"
    }, {
      "left" : "SimplexTableau tableau",
      "right" : "SimplexTableau tableau",
      "info" : "SingleVariableDeclaration[2106-2128]:SingleVariableDeclaration[2106-2128]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2130-2501]:Block[2130-2501]"
    }, {
      "left" : "double minValue = 0;",
      "right" : "double minValue = 0;",
      "info" : "VariableDeclarationStatement[2140-2160]:VariableDeclarationStatement[2140-2160]"
    }, {
      "left" : "Integer minPos = null;",
      "right" : "Integer minPos = null;",
      "info" : "VariableDeclarationStatement[2169-2191]:VariableDeclarationStatement[2169-2191]"
    }, {
      "left" : "for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getWidth() - 1; i++)",
      "right" : "for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getWidth() - 1; i++)",
      "info" : "ForStatement[2200-2472]:ForStatement[2200-2472]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2282-2472]:Block[2282-2472]"
    }, {
      "left" : "if (MathUtils.compareTo(tableau.getEntry(0, i), minValue, epsilon) < 0)",
      "right" : "if (MathUtils.compareTo(tableau.getEntry(0, i), minValue, epsilon) < 0)",
      "info" : "IfStatement[2296-2462]:IfStatement[2296-2462]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2368-2462]:Block[2368-2462]"
    }, {
      "left" : "minValue = tableau.getEntry(0, i);",
      "right" : "minValue = tableau.getEntry(0, i);",
      "info" : "ExpressionStatement[2386-2420]:ExpressionStatement[2386-2420]"
    }, {
      "left" : "minPos = i;",
      "right" : "minPos = i;",
      "info" : "ExpressionStatement[2437-2448]:ExpressionStatement[2437-2448]"
    }, {
      "left" : "return minPos;",
      "right" : "return minPos;",
      "info" : "ReturnStatement[2481-2495]:ReturnStatement[2481-2495]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[2802-2809]:Modifier[2802-2809]"
    }, {
      "left" : "getPivotRow",
      "right" : "getPivotRow",
      "info" : "SimpleName[2818-2829]:SimpleName[2818-2829]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2875-3485]:Block[2875-3484]"
    }, {
      "left" : "double minRatio = Double.MAX_VALUE;",
      "right" : "double minRatio = Double.MAX_VALUE;",
      "info" : "VariableDeclarationStatement[2885-2920]:VariableDeclarationStatement[2885-2920]"
    }, {
      "left" : "Integer minRatioPos = null;",
      "right" : "Integer minRatioPos = null;",
      "info" : "VariableDeclarationStatement[2929-2956]:VariableDeclarationStatement[2929-2956]"
    }, {
      "left" : "for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++)",
      "right" : "for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++)",
      "info" : "ForStatement[2965-3451]:ForStatement[2965-3450]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3044-3451]:Block[3044-3450]"
    }, {
      "left" : "final double rhs = tableau.getEntry(i, tableau.getWidth() - 1);",
      "right" : "final double rhs = tableau.getEntry(i, tableau.getWidth() - 1);",
      "info" : "VariableDeclarationStatement[3058-3121]:VariableDeclarationStatement[3058-3121]"
    }, {
      "left" : "final double entry = tableau.getEntry(i, col);",
      "right" : "final double entry = tableau.getEntry(i, col);",
      "info" : "VariableDeclarationStatement[3134-3180]:VariableDeclarationStatement[3134-3180]"
    }, {
      "left" : "if (MathUtils.compareTo(entry, 0, epsilon) >= 0)",
      "right" : "if (MathUtils.compareTo(entry, 0, epsilon) > 0)",
      "info" : "IfStatement[3193-3441]:IfStatement[3193-3440]"
    }, {
      "left" : ">=",
      "right" : ">",
      "info" : "INFIX_EXPRESSION_OPERATOR[3236-3238]:INFIX_EXPRESSION_OPERATOR[3236-3237]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3242-3441]:Block[3241-3440]"
    }, {
      "left" : "final double ratio = rhs / entry;",
      "right" : "final double ratio = rhs / entry;",
      "info" : "VariableDeclarationStatement[3260-3293]:VariableDeclarationStatement[3259-3292]"
    }, {
      "left" : "if (ratio < minRatio)",
      "right" : "if (ratio < minRatio)",
      "info" : "IfStatement[3310-3427]:IfStatement[3309-3426]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3332-3427]:Block[3331-3426]"
    }, {
      "left" : "minRatio = ratio;",
      "right" : "minRatio = ratio;",
      "info" : "ExpressionStatement[3354-3371]:ExpressionStatement[3353-3370]"
    }, {
      "left" : "minRatioPos = i;",
      "right" : "minRatioPos = i;",
      "info" : "ExpressionStatement[3392-3408]:ExpressionStatement[3391-3407]"
    }, {
      "left" : "return minRatioPos;",
      "right" : "return minRatioPos;",
      "info" : "ReturnStatement[3460-3479]:ReturnStatement[3459-3478]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[3778-3787]:Modifier[3777-3786]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[3788-3792]:PrimitiveType[3787-3791]"
    }, {
      "left" : "doIteration",
      "right" : "doIteration",
      "info" : "SimpleName[3793-3804]:SimpleName[3792-3803]"
    }, {
      "left" : "final SimplexTableau tableau",
      "right" : "final SimplexTableau tableau",
      "info" : "SingleVariableDeclaration[3805-3833]:SingleVariableDeclaration[3804-3832]"
    }, {
      "left" : "OptimizationException",
      "right" : "OptimizationException",
      "info" : "SimpleType[3850-3871]:SimpleType[3849-3870]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3872-4566]:Block[3871-4565]"
    }, {
      "left" : "incrementIterationsCounter();",
      "right" : "incrementIterationsCounter();",
      "info" : "ExpressionStatement[3883-3912]:ExpressionStatement[3882-3911]"
    }, {
      "left" : "Integer pivotCol = getPivotColumn(tableau);",
      "right" : "Integer pivotCol = getPivotColumn(tableau);",
      "info" : "VariableDeclarationStatement[3922-3965]:VariableDeclarationStatement[3921-3964]"
    }, {
      "left" : "Integer pivotRow = getPivotRow(pivotCol, tableau);",
      "right" : "Integer pivotRow = getPivotRow(pivotCol, tableau);",
      "info" : "VariableDeclarationStatement[3974-4024]:VariableDeclarationStatement[3973-4023]"
    }, {
      "left" : "if (pivotRow == null)",
      "right" : "if (pivotRow == null)",
      "info" : "IfStatement[4033-4118]:IfStatement[4032-4117]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4055-4118]:Block[4054-4117]"
    }, {
      "left" : "throw new UnboundedSolutionException();",
      "right" : "throw new UnboundedSolutionException();",
      "info" : "ThrowStatement[4069-4108]:ThrowStatement[4068-4107]"
    }, {
      "left" : "double pivotVal = tableau.getEntry(pivotRow, pivotCol);",
      "right" : "double pivotVal = tableau.getEntry(pivotRow, pivotCol);",
      "info" : "VariableDeclarationStatement[4166-4221]:VariableDeclarationStatement[4165-4220]"
    }, {
      "left" : "tableau.divideRow(pivotRow, pivotVal);",
      "right" : "tableau.divideRow(pivotRow, pivotVal);",
      "info" : "ExpressionStatement[4230-4268]:ExpressionStatement[4229-4267]"
    }, {
      "left" : "for (int i = 0; i < tableau.getHeight(); i++)",
      "right" : "for (int i = 0; i < tableau.getHeight(); i++)",
      "info" : "ForStatement[4327-4560]:ForStatement[4326-4559]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4373-4560]:Block[4372-4559]"
    }, {
      "left" : "if (i != pivotRow)",
      "right" : "if (i != pivotRow)",
      "info" : "IfStatement[4387-4550]:IfStatement[4386-4549]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4406-4550]:Block[4405-4549]"
    }, {
      "left" : "double multiplier = tableau.getEntry(i, pivotCol);",
      "right" : "double multiplier = tableau.getEntry(i, pivotCol);",
      "info" : "VariableDeclarationStatement[4424-4474]:VariableDeclarationStatement[4423-4473]"
    }, {
      "left" : "tableau.subtractRow(i, pivotRow, multiplier);",
      "right" : "tableau.subtractRow(i, pivotRow, multiplier);",
      "info" : "ExpressionStatement[4491-4536]:ExpressionStatement[4490-4535]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[4723-4730]:Modifier[4722-4729]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[4731-4738]:PrimitiveType[4730-4737]"
    }, {
      "left" : "isPhase1Solved",
      "right" : "isPhase1Solved",
      "info" : "SimpleName[4739-4753]:SimpleName[4738-4752]"
    }, {
      "left" : "final SimplexTableau tableau",
      "right" : "final SimplexTableau tableau",
      "info" : "SingleVariableDeclaration[4754-4782]:SingleVariableDeclaration[4753-4781]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4784-5128]:Block[4783-5127]"
    }, {
      "left" : "if (tableau.getNumArtificialVariables() == 0)",
      "right" : "if (tableau.getNumArtificialVariables() == 0)",
      "info" : "IfStatement[4794-4876]:IfStatement[4793-4875]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4840-4876]:Block[4839-4875]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[4854-4866]:ReturnStatement[4853-4865]"
    }, {
      "left" : "for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getWidth() - 1; i++)",
      "right" : "for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getWidth() - 1; i++)",
      "info" : "ForStatement[4885-5101]:ForStatement[4884-5100]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4967-5101]:Block[4966-5100]"
    }, {
      "left" : "if (MathUtils.compareTo(tableau.getEntry(0, i), 0, epsilon) < 0)",
      "right" : "if (MathUtils.compareTo(tableau.getEntry(0, i), 0, epsilon) < 0)",
      "info" : "IfStatement[4981-5091]:IfStatement[4980-5090]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5046-5091]:Block[5045-5090]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[5064-5077]:ReturnStatement[5063-5076]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[5110-5122]:ReturnStatement[5109-5121]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[5311-5317]:Modifier[5310-5316]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[5318-5325]:PrimitiveType[5317-5324]"
    }, {
      "left" : "isOptimal",
      "right" : "isOptimal",
      "info" : "SimpleName[5326-5335]:SimpleName[5325-5334]"
    }, {
      "left" : "final SimplexTableau tableau",
      "right" : "final SimplexTableau tableau",
      "info" : "SingleVariableDeclaration[5336-5364]:SingleVariableDeclaration[5335-5363]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5366-5710]:Block[5365-5709]"
    }, {
      "left" : "if (tableau.getNumArtificialVariables() > 0)",
      "right" : "if (tableau.getNumArtificialVariables() > 0)",
      "info" : "IfStatement[5376-5458]:IfStatement[5375-5457]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5421-5458]:Block[5420-5457]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[5435-5448]:ReturnStatement[5434-5447]"
    }, {
      "left" : "for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getWidth() - 1; i++)",
      "right" : "for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getWidth() - 1; i++)",
      "info" : "ForStatement[5467-5683]:ForStatement[5466-5682]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5549-5683]:Block[5548-5682]"
    }, {
      "left" : "if (MathUtils.compareTo(tableau.getEntry(0, i), 0, epsilon) < 0)",
      "right" : "if (MathUtils.compareTo(tableau.getEntry(0, i), 0, epsilon) < 0)",
      "info" : "IfStatement[5563-5673]:IfStatement[5562-5672]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5628-5673]:Block[5627-5672]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[5646-5659]:ReturnStatement[5645-5658]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[5692-5704]:ReturnStatement[5691-5703]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[6028-6037]:Modifier[6027-6036]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[6038-6042]:PrimitiveType[6037-6041]"
    }, {
      "left" : "solvePhase1",
      "right" : "solvePhase1",
      "info" : "SimpleName[6043-6054]:SimpleName[6042-6053]"
    }, {
      "left" : "final SimplexTableau tableau",
      "right" : "final SimplexTableau tableau",
      "info" : "SingleVariableDeclaration[6055-6083]:SingleVariableDeclaration[6054-6082]"
    }, {
      "left" : "OptimizationException",
      "right" : "OptimizationException",
      "info" : "SimpleType[6100-6121]:SimpleType[6099-6120]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6122-6557]:Block[6121-6556]"
    }, {
      "left" : "if (tableau.getNumArtificialVariables() == 0)",
      "right" : "if (tableau.getNumArtificialVariables() == 0)",
      "info" : "IfStatement[6170-6247]:IfStatement[6169-6246]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6216-6247]:Block[6215-6246]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[6230-6237]:ReturnStatement[6229-6236]"
    }, {
      "left" : "while (!isPhase1Solved(tableau))",
      "right" : "while (!isPhase1Solved(tableau))",
      "info" : "WhileStatement[6257-6335]:WhileStatement[6256-6334]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6290-6335]:Block[6289-6334]"
    }, {
      "left" : "doIteration(tableau);",
      "right" : "doIteration(tableau);",
      "info" : "ExpressionStatement[6304-6325]:ExpressionStatement[6303-6324]"
    }, {
      "left" : "if (!MathUtils.equals(tableau.getEntry(0, tableau.getRhsOffset()), 0, epsilon))",
      "right" : "if (!MathUtils.equals(tableau.getEntry(0, tableau.getRhsOffset()), 0, epsilon))",
      "info" : "IfStatement[6407-6551]:IfStatement[6406-6550]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6487-6551]:Block[6486-6550]"
    }, {
      "left" : "throw new NoFeasibleSolutionException();",
      "right" : "throw new NoFeasibleSolutionException();",
      "info" : "ThrowStatement[6501-6541]:ThrowStatement[6500-6540]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[6588-6597]:MarkerAnnotation[6587-6596]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[6602-6608]:Modifier[6601-6607]"
    }, {
      "left" : "RealPointValuePair",
      "right" : "RealPointValuePair",
      "info" : "SimpleType[6609-6627]:SimpleType[6608-6626]"
    }, {
      "left" : "doOptimize",
      "right" : "doOptimize",
      "info" : "SimpleName[6628-6638]:SimpleName[6627-6637]"
    }, {
      "left" : "OptimizationException",
      "right" : "OptimizationException",
      "info" : "SimpleType[6656-6677]:SimpleType[6655-6676]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6678-7010]:Block[6677-7009]"
    }, {
      "left" : "final SimplexTableau tableau =\n            new SimplexTableau(f, constraints, goalType, restrictToNonNegative, epsilon);",
      "right" : "final SimplexTableau tableau =\n            new SimplexTableau(f, constraints, goalType, restrictToNonNegative, epsilon);",
      "info" : "VariableDeclarationStatement[6688-6808]:VariableDeclarationStatement[6687-6807]"
    }, {
      "left" : "solvePhase1(tableau);",
      "right" : "solvePhase1(tableau);",
      "info" : "ExpressionStatement[6817-6838]:ExpressionStatement[6816-6837]"
    }, {
      "left" : "tableau.discardArtificialVariables();",
      "right" : "tableau.discardArtificialVariables();",
      "info" : "ExpressionStatement[6847-6884]:ExpressionStatement[6846-6883]"
    }, {
      "left" : "while (!isOptimal(tableau))",
      "right" : "while (!isOptimal(tableau))",
      "info" : "WhileStatement[6893-6966]:WhileStatement[6892-6965]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6921-6966]:Block[6920-6965]"
    }, {
      "left" : "doIteration(tableau);",
      "right" : "doIteration(tableau);",
      "info" : "ExpressionStatement[6935-6956]:ExpressionStatement[6934-6955]"
    }, {
      "left" : "return tableau.getSolution();",
      "right" : "return tableau.getSolution();",
      "info" : "ReturnStatement[6975-7004]:ReturnStatement[6974-7003]"
    } ]
  },
  "interFileMappings" : { }
}