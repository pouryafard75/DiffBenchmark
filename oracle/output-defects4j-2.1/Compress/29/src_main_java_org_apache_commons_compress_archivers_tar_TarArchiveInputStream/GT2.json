{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "TarArchiveInputStream",
      "right" : "TarArchiveInputStream",
      "info" : "TypeDeclaration[1610-24621]:TypeDeclaration[1610-24682]"
    }, {
      "left" : "private static final int SMALL_BUFFER_SIZE = 256;",
      "right" : "private static final int SMALL_BUFFER_SIZE = 256;",
      "info" : "FieldDeclaration[1917-1966]:FieldDeclaration[1917-1966]"
    }, {
      "left" : "private final byte[] SMALL_BUF = new byte[SMALL_BUFFER_SIZE];",
      "right" : "private final byte[] SMALL_BUF = new byte[SMALL_BUFFER_SIZE];",
      "info" : "FieldDeclaration[1972-2033]:FieldDeclaration[1972-2033]"
    }, {
      "left" : "private final int recordSize;",
      "right" : "private final int recordSize;",
      "info" : "FieldDeclaration[2039-2103]:FieldDeclaration[2039-2103]"
    }, {
      "left" : "private final int blockSize;",
      "right" : "private final int blockSize;",
      "info" : "FieldDeclaration[2109-2168]:FieldDeclaration[2109-2168]"
    }, {
      "left" : "private boolean hasHitEOF;",
      "right" : "private boolean hasHitEOF;",
      "info" : "FieldDeclaration[2174-2236]:FieldDeclaration[2174-2236]"
    }, {
      "left" : "private long entrySize;",
      "right" : "private long entrySize;",
      "info" : "FieldDeclaration[2242-2302]:FieldDeclaration[2242-2302]"
    }, {
      "left" : "private long entryOffset;",
      "right" : "private long entryOffset;",
      "info" : "FieldDeclaration[2308-2384]:FieldDeclaration[2308-2384]"
    }, {
      "left" : "private final InputStream is;",
      "right" : "private final InputStream is;",
      "info" : "FieldDeclaration[2390-2459]:FieldDeclaration[2390-2459]"
    }, {
      "left" : "private TarArchiveEntry currEntry;",
      "right" : "private TarArchiveEntry currEntry;",
      "info" : "FieldDeclaration[2465-2548]:FieldDeclaration[2465-2548]"
    }, {
      "left" : "private final ZipEncoding zipEncoding;",
      "right" : "private final ZipEncoding zipEncoding;",
      "info" : "FieldDeclaration[2554-2628]:FieldDeclaration[2554-2628]"
    }, {
      "left" : "public TarArchiveInputStream(InputStream is)",
      "right" : "public TarArchiveInputStream(InputStream is)",
      "info" : "MethodDeclaration[2681-2907]:MethodDeclaration[2708-2934]"
    }, {
      "left" : "public TarArchiveInputStream(InputStream is, String encoding)",
      "right" : "public TarArchiveInputStream(InputStream is, String encoding)",
      "info" : "MethodDeclaration[2913-3263]:MethodDeclaration[2940-3290]"
    }, {
      "left" : "public TarArchiveInputStream(InputStream is, int blockSize)",
      "right" : "public TarArchiveInputStream(InputStream is, int blockSize)",
      "info" : "MethodDeclaration[3269-3537]:MethodDeclaration[3296-3564]"
    }, {
      "left" : "public TarArchiveInputStream(InputStream is, int blockSize,\n                                 String encoding)",
      "right" : "public TarArchiveInputStream(InputStream is, int blockSize,\n                                 String encoding)",
      "info" : "MethodDeclaration[3543-3955]:MethodDeclaration[3570-3982]"
    }, {
      "left" : "public TarArchiveInputStream(InputStream is, int blockSize, int recordSize)",
      "right" : "public TarArchiveInputStream(InputStream is, int blockSize, int recordSize)",
      "info" : "MethodDeclaration[3961-4287]:MethodDeclaration[3988-4314]"
    }, {
      "left" : "public TarArchiveInputStream(InputStream is, int blockSize, int recordSize,\n                                 String encoding)",
      "right" : "public TarArchiveInputStream(InputStream is, int blockSize, int recordSize,\n                                 String encoding)",
      "info" : "MethodDeclaration[4293-4899]:MethodDeclaration[4320-4960]"
    }, {
      "left" : "public void close() throws IOException",
      "right" : "public void close() throws IOException",
      "info" : "MethodDeclaration[4905-5102]:MethodDeclaration[4966-5163]"
    }, {
      "left" : "public int getRecordSize()",
      "right" : "public int getRecordSize()",
      "info" : "MethodDeclaration[5108-5297]:MethodDeclaration[5169-5358]"
    }, {
      "left" : "public int available() throws IOException",
      "right" : "public int available() throws IOException",
      "info" : "MethodDeclaration[5303-6114]:MethodDeclaration[5364-6175]"
    }, {
      "left" : "public long skip(final long n) throws IOException",
      "right" : "public long skip(final long n) throws IOException",
      "info" : "MethodDeclaration[6125-7213]:MethodDeclaration[6186-7274]"
    }, {
      "left" : "public boolean markSupported()",
      "right" : "public boolean markSupported()",
      "info" : "MethodDeclaration[7219-7404]:MethodDeclaration[7280-7465]"
    }, {
      "left" : "public void mark(int markLimit)",
      "right" : "public void mark(int markLimit)",
      "info" : "MethodDeclaration[7410-7593]:MethodDeclaration[7471-7654]"
    }, {
      "left" : "public synchronized void reset()",
      "right" : "public synchronized void reset()",
      "info" : "MethodDeclaration[7599-7733]:MethodDeclaration[7660-7794]"
    }, {
      "left" : "public TarArchiveEntry getNextTarEntry() throws IOException",
      "right" : "public TarArchiveEntry getNextTarEntry() throws IOException",
      "info" : "MethodDeclaration[7739-10487]:MethodDeclaration[7800-10548]"
    }, {
      "left" : "private void skipRecordPadding() throws IOException",
      "right" : "private void skipRecordPadding() throws IOException",
      "info" : "MethodDeclaration[10497-11023]:MethodDeclaration[10558-11084]"
    }, {
      "left" : "protected byte[] getLongNameData() throws IOException",
      "right" : "protected byte[] getLongNameData() throws IOException",
      "info" : "MethodDeclaration[11029-12162]:MethodDeclaration[11090-12223]"
    }, {
      "left" : "private byte[] getRecord() throws IOException",
      "right" : "private byte[] getRecord() throws IOException",
      "info" : "MethodDeclaration[12168-13061]:MethodDeclaration[12229-13122]"
    }, {
      "left" : "protected boolean isEOFRecord(byte[] record)",
      "right" : "protected boolean isEOFRecord(byte[] record)",
      "info" : "MethodDeclaration[13067-13476]:MethodDeclaration[13128-13537]"
    }, {
      "left" : "protected byte[] readRecord() throws IOException",
      "right" : "protected byte[] readRecord() throws IOException",
      "info" : "MethodDeclaration[13486-13946]:MethodDeclaration[13547-14007]"
    }, {
      "left" : "private void paxHeaders() throws IOExceptio",
      "right" : "private void paxHeaders() throws IOExceptio",
      "info" : "MethodDeclaration[13952-14165]:MethodDeclaration[14013-14226]"
    }, {
      "left" : "Map<String, String> parsePaxHeaders(InputStream i) throws IOException",
      "right" : "Map<String, String> parsePaxHeaders(InputStream i) throws IOException",
      "info" : "MethodDeclaration[14171-16229]:MethodDeclaration[14232-16290]"
    }, {
      "left" : "private void applyPaxHeadersToCurrentEntry(Map<String, String> headers)",
      "right" : "private void applyPaxHeadersToCurrentEntry(Map<String, String> headers)",
      "info" : "MethodDeclaration[16235-17858]:MethodDeclaration[16296-17919]"
    }, {
      "left" : "private void readGNUSparse() throws IOException",
      "right" : "private void readGNUSparse() throws IOException",
      "info" : "MethodDeclaration[17864-18853]:MethodDeclaration[17925-18914]"
    }, {
      "left" : "public ArchiveEntry getNextEntry() throws IOException",
      "right" : "public ArchiveEntry getNextEntry() throws IOException",
      "info" : "MethodDeclaration[18859-19199]:MethodDeclaration[18920-19260]"
    }, {
      "left" : "private void tryToConsumeSecondEOFRecord() throws IOException",
      "right" : "private void tryToConsumeSecondEOFRecord() throws IOException",
      "info" : "MethodDeclaration[19209-20127]:MethodDeclaration[19270-20188]"
    }, {
      "left" : "public int read(byte[] buf, int offset, int numToRead) throws IOException",
      "right" : "public int read(byte[] buf, int offset, int numToRead) throws IOException",
      "info" : "MethodDeclaration[20133-21389]:MethodDeclaration[20194-21450]"
    }, {
      "left" : "public boolean canReadEntryData(ArchiveEntry ae)",
      "right" : "public boolean canReadEntryData(ArchiveEntry ae)",
      "info" : "MethodDeclaration[21395-21787]:MethodDeclaration[21456-21848]"
    }, {
      "left" : "public TarArchiveEntry getCurrentEntry()",
      "right" : "public TarArchiveEntry getCurrentEntry()",
      "info" : "MethodDeclaration[21793-22010]:MethodDeclaration[21854-22071]"
    }, {
      "left" : "protected final void setCurrentEntry(TarArchiveEntry e)",
      "right" : "protected final void setCurrentEntry(TarArchiveEntry e)",
      "info" : "MethodDeclaration[22016-22102]:MethodDeclaration[22077-22163]"
    }, {
      "left" : "protected final boolean isAtEOF()",
      "right" : "protected final boolean isAtEOF()",
      "info" : "MethodDeclaration[22108-22175]:MethodDeclaration[22169-22236]"
    }, {
      "left" : "protected final void setAtEOF(boolean b)",
      "right" : "protected final void setAtEOF(boolean b)",
      "info" : "MethodDeclaration[22181-22252]:MethodDeclaration[22242-22313]"
    }, {
      "left" : "private void consumeRemainderOfLastBlock() throws IOException",
      "right" : "private void consumeRemainderOfLastBlock() throws IOException",
      "info" : "MethodDeclaration[22258-22768]:MethodDeclaration[22319-22829]"
    }, {
      "left" : "public static boolean matches(byte[] signature, int length)",
      "right" : "public static boolean matches(byte[] signature, int length)",
      "info" : "MethodDeclaration[22774-24618]:MethodDeclaration[22835-24679]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2822-2907]:Block[2849-2934]"
    }, {
      "left" : "this(is, TarConstants.DEFAULT_BLKSIZE, TarConstants.DEFAULT_RCDSIZE);",
      "right" : "this(is, TarConstants.DEFAULT_BLKSIZE, TarConstants.DEFAULT_RCDSIZE);",
      "info" : "ConstructorInvocation[2832-2901]:ConstructorInvocation[2859-2928]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3155-3263]:Block[3182-3290]"
    }, {
      "left" : "this(is, TarConstants.DEFAULT_BLKSIZE, TarConstants.DEFAULT_RCDSIZE,\n             encoding);",
      "right" : "this(is, TarConstants.DEFAULT_BLKSIZE, TarConstants.DEFAULT_RCDSIZE,\n             encoding);",
      "info" : "ConstructorInvocation[3165-3257]:ConstructorInvocation[3192-3284]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3471-3537]:Block[3498-3564]"
    }, {
      "left" : "this(is, blockSize, TarConstants.DEFAULT_RCDSIZE);",
      "right" : "this(is, blockSize, TarConstants.DEFAULT_RCDSIZE);",
      "info" : "ConstructorInvocation[3481-3531]:ConstructorInvocation[3508-3558]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3879-3955]:Block[3906-3982]"
    }, {
      "left" : "this(is, blockSize, TarConstants.DEFAULT_RCDSIZE, encoding);",
      "right" : "this(is, blockSize, TarConstants.DEFAULT_RCDSIZE, encoding);",
      "info" : "ConstructorInvocation[3889-3949]:ConstructorInvocation[3916-3976]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4227-4287]:Block[4254-4314]"
    }, {
      "left" : "this(is, blockSize, recordSize, null);",
      "right" : "this(is, blockSize, recordSize, null);",
      "info" : "ConstructorInvocation[4237-4275]:ConstructorInvocation[4264-4302]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4693-4899]:Block[4720-4960]"
    }, {
      "left" : "this.is = is;",
      "right" : "this.is = is;",
      "info" : "ExpressionStatement[4703-4716]:ExpressionStatement[4730-4743]"
    }, {
      "left" : "this.hasHitEOF = false;",
      "right" : "this.hasHitEOF = false;",
      "info" : "ExpressionStatement[4725-4748]:ExpressionStatement[4752-4775]"
    }, {
      "left" : "this.zipEncoding = ZipEncodingHelper.getZipEncoding(encoding);",
      "right" : "this.zipEncoding = ZipEncodingHelper.getZipEncoding(encoding);",
      "info" : "ExpressionStatement[4757-4819]:ExpressionStatement[4818-4880]"
    }, {
      "left" : "this.recordSize = recordSize;",
      "right" : "this.recordSize = recordSize;",
      "info" : "ExpressionStatement[4828-4857]:ExpressionStatement[4889-4918]"
    }, {
      "left" : "this.blockSize = blockSize;",
      "right" : "this.blockSize = blockSize;",
      "info" : "ExpressionStatement[4866-4893]:ExpressionStatement[4927-4954]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5075-5102]:Block[5136-5163]"
    }, {
      "left" : "is.close();",
      "right" : "is.close();",
      "info" : "ExpressionStatement[5085-5096]:ExpressionStatement[5146-5157]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5263-5297]:Block[5324-5358]"
    }, {
      "left" : "return recordSize;",
      "right" : "return recordSize;",
      "info" : "ReturnStatement[5273-5291]:ReturnStatement[5334-5352]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5952-6114]:Block[6013-6175]"
    }, {
      "left" : "if (entrySize - entryOffset > Integer.MAX_VALUE)",
      "right" : "if (entrySize - entryOffset > Integer.MAX_VALUE)",
      "info" : "IfStatement[5962-6060]:IfStatement[6023-6121]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6011-6060]:Block[6072-6121]"
    }, {
      "left" : "return Integer.MAX_VALUE;",
      "right" : "return Integer.MAX_VALUE;",
      "info" : "ReturnStatement[6025-6050]:ReturnStatement[6086-6111]"
    }, {
      "left" : "return (int) (entrySize - entryOffset);",
      "right" : "return (int) (entrySize - entryOffset);",
      "info" : "ReturnStatement[6069-6108]:ReturnStatement[6130-6169]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6952-7213]:Block[7013-7274]"
    }, {
      "left" : "if (n <= 0)",
      "right" : "if (n <= 0)",
      "info" : "IfStatement[6962-7007]:IfStatement[7023-7068]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6974-7007]:Block[7035-7068]"
    }, {
      "left" : "return 0;",
      "right" : "return 0;",
      "info" : "ReturnStatement[6988-6997]:ReturnStatement[7049-7058]"
    }, {
      "left" : "final long available = entrySize - entryOffset;",
      "right" : "final long available = entrySize - entryOffset;",
      "info" : "VariableDeclarationStatement[7017-7064]:VariableDeclarationStatement[7078-7125]"
    }, {
      "left" : "final long skipped = is.skip(Math.min(n, available));",
      "right" : "final long skipped = is.skip(Math.min(n, available));",
      "info" : "VariableDeclarationStatement[7073-7126]:VariableDeclarationStatement[7134-7187]"
    }, {
      "left" : "count(skipped);",
      "right" : "count(skipped);",
      "info" : "ExpressionStatement[7136-7151]:ExpressionStatement[7197-7212]"
    }, {
      "left" : "entryOffset += skipped;",
      "right" : "entryOffset += skipped;",
      "info" : "ExpressionStatement[7160-7183]:ExpressionStatement[7221-7244]"
    }, {
      "left" : "return skipped;",
      "right" : "return skipped;",
      "info" : "ReturnStatement[7192-7207]:ReturnStatement[7253-7268]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7375-7404]:Block[7436-7465]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[7385-7398]:ReturnStatement[7446-7459]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7586-7593]:Block[7647-7654]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7726-7733]:Block[7787-7794]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8371-10487]:Block[8432-10548]"
    }, {
      "left" : "if (hasHitEOF)",
      "right" : "if (hasHitEOF)",
      "info" : "IfStatement[8381-8432]:IfStatement[8442-8493]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8396-8432]:Block[8457-8493]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[8410-8422]:ReturnStatement[8471-8483]"
    }, {
      "left" : "if (currEntry != null)",
      "right" : "if (currEntry != null)",
      "info" : "IfStatement[8442-8679]:IfStatement[8503-8740]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8465-8679]:Block[8526-8740]"
    }, {
      "left" : "IOUtils.skip(this, Long.MAX_VALUE);",
      "right" : "IOUtils.skip(this, Long.MAX_VALUE);",
      "info" : "ExpressionStatement[8547-8582]:ExpressionStatement[8608-8643]"
    }, {
      "left" : "skipRecordPadding();",
      "right" : "skipRecordPadding();",
      "info" : "ExpressionStatement[8649-8669]:ExpressionStatement[8710-8730]"
    }, {
      "left" : "byte[] headerBuf = getRecord();",
      "right" : "byte[] headerBuf = getRecord();",
      "info" : "VariableDeclarationStatement[8689-8720]:VariableDeclarationStatement[8750-8781]"
    }, {
      "left" : "if (headerBuf == null)",
      "right" : "if (headerBuf == null)",
      "info" : "IfStatement[8730-8845]:IfStatement[8791-8906]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8753-8845]:Block[8814-8906]"
    }, {
      "left" : "currEntry = null;",
      "right" : "currEntry = null;",
      "info" : "ExpressionStatement[8793-8810]:ExpressionStatement[8854-8871]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[8823-8835]:ReturnStatement[8884-8896]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[8855-9123]:TryStatement[8916-9184]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8859-8939]:Block[8920-9000]"
    }, {
      "left" : "currEntry = new TarArchiveEntry(headerBuf, zipEncoding);",
      "right" : "currEntry = new TarArchiveEntry(headerBuf, zipEncoding);",
      "info" : "ExpressionStatement[8873-8929]:ExpressionStatement[8934-8990]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8975-9123]:Block[9036-9184]"
    }, {
      "left" : "IOException ioe = new IOException(\"Error detected parsing the header\");",
      "right" : "IOException ioe = new IOException(\"Error detected parsing the header\");",
      "info" : "VariableDeclarationStatement[8989-9060]:VariableDeclarationStatement[9050-9121]"
    }, {
      "left" : "ioe.initCause(e);",
      "right" : "ioe.initCause(e);",
      "info" : "ExpressionStatement[9073-9090]:ExpressionStatement[9134-9151]"
    }, {
      "left" : "throw ioe;",
      "right" : "throw ioe;",
      "info" : "ThrowStatement[9103-9113]:ThrowStatement[9164-9174]"
    }, {
      "left" : "entryOffset = 0;",
      "right" : "entryOffset = 0;",
      "info" : "ExpressionStatement[9133-9149]:ExpressionStatement[9194-9210]"
    }, {
      "left" : "entrySize = currEntry.getSize();",
      "right" : "entrySize = currEntry.getSize();",
      "info" : "ExpressionStatement[9158-9190]:ExpressionStatement[9219-9251]"
    }, {
      "left" : "if (currEntry.isGNULongLinkEntry())",
      "right" : "if (currEntry.isGNULongLinkEntry())",
      "info" : "IfStatement[9200-9589]:IfStatement[9261-9650]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9236-9589]:Block[9297-9650]"
    }, {
      "left" : "byte[] longLinkData = getLongNameData();",
      "right" : "byte[] longLinkData = getLongNameData();",
      "info" : "VariableDeclarationStatement[9250-9290]:VariableDeclarationStatement[9311-9351]"
    }, {
      "left" : "if (longLinkData == null)",
      "right" : "if (longLinkData == null)",
      "info" : "IfStatement[9303-9510]:IfStatement[9364-9571]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9329-9510]:Block[9390-9571]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[9484-9496]:ReturnStatement[9545-9557]"
    }, {
      "left" : "currEntry.setLinkName(zipEncoding.decode(longLinkData));",
      "right" : "currEntry.setLinkName(zipEncoding.decode(longLinkData));",
      "info" : "ExpressionStatement[9523-9579]:ExpressionStatement[9584-9640]"
    }, {
      "left" : "if (currEntry.isGNULongNameEntry())",
      "right" : "if (currEntry.isGNULongNameEntry())",
      "info" : "IfStatement[9599-9979]:IfStatement[9660-10040]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9635-9979]:Block[9696-10040]"
    }, {
      "left" : "byte[] longNameData = getLongNameData();",
      "right" : "byte[] longNameData = getLongNameData();",
      "info" : "VariableDeclarationStatement[9649-9689]:VariableDeclarationStatement[9710-9750]"
    }, {
      "left" : "if (longNameData == null)",
      "right" : "if (longNameData == null)",
      "info" : "IfStatement[9702-9904]:IfStatement[9763-9965]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9728-9904]:Block[9789-9965]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[9878-9890]:ReturnStatement[9939-9951]"
    }, {
      "left" : "currEntry.setName(zipEncoding.decode(longNameData));",
      "right" : "currEntry.setName(zipEncoding.decode(longNameData));",
      "info" : "ExpressionStatement[9917-9969]:ExpressionStatement[9978-10030]"
    }, {
      "left" : "if (currEntry.isPaxHeader())",
      "right" : "if (currEntry.isPaxHeader())",
      "info" : "IfStatement[9989-10077]:IfStatement[10050-10138]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10017-10077]:Block[10078-10138]"
    }, {
      "left" : "paxHeaders();",
      "right" : "paxHeaders();",
      "info" : "ExpressionStatement[10054-10067]:ExpressionStatement[10115-10128]"
    }, {
      "left" : "if (currEntry.isGNUSparse())",
      "right" : "if (currEntry.isGNUSparse())",
      "info" : "IfStatement[10087-10179]:IfStatement[10148-10240]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10115-10179]:Block[10176-10240]"
    }, {
      "left" : "readGNUSparse();",
      "right" : "readGNUSparse();",
      "info" : "ExpressionStatement[10153-10169]:ExpressionStatement[10214-10230]"
    }, {
      "left" : "entrySize = currEntry.getSize();",
      "right" : "entrySize = currEntry.getSize();",
      "info" : "ExpressionStatement[10422-10454]:ExpressionStatement[10483-10515]"
    }, {
      "left" : "return currEntry;",
      "right" : "return currEntry;",
      "info" : "ReturnStatement[10464-10481]:ReturnStatement[10525-10542]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10703-11023]:Block[10764-11084]"
    }, {
      "left" : "if (this.entrySize > 0 && this.entrySize % this.recordSize != 0)",
      "right" : "if (this.entrySize > 0 && this.entrySize % this.recordSize != 0)",
      "info" : "IfStatement[10713-11017]:IfStatement[10774-11078]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10778-11017]:Block[10839-11078]"
    }, {
      "left" : "long numRecords = (this.entrySize / this.recordSize) + 1;",
      "right" : "long numRecords = (this.entrySize / this.recordSize) + 1;",
      "info" : "VariableDeclarationStatement[10792-10849]:VariableDeclarationStatement[10853-10910]"
    }, {
      "left" : "long padding = (numRecords * this.recordSize) - this.entrySize;",
      "right" : "long padding = (numRecords * this.recordSize) - this.entrySize;",
      "info" : "VariableDeclarationStatement[10862-10925]:VariableDeclarationStatement[10923-10986]"
    }, {
      "left" : "long skipped = IOUtils.skip(is, padding);",
      "right" : "long skipped = IOUtils.skip(is, padding);",
      "info" : "VariableDeclarationStatement[10938-10979]:VariableDeclarationStatement[10999-11040]"
    }, {
      "left" : "count(skipped);",
      "right" : "count(skipped);",
      "info" : "ExpressionStatement[10992-11007]:ExpressionStatement[11053-11068]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11278-12162]:Block[11339-12223]"
    }, {
      "left" : "ByteArrayOutputStream longName = new ByteArrayOutputStream();",
      "right" : "ByteArrayOutputStream longName = new ByteArrayOutputStream();",
      "info" : "VariableDeclarationStatement[11316-11377]:VariableDeclarationStatement[11377-11438]"
    }, {
      "left" : "int length = 0;",
      "right" : "int length = 0;",
      "info" : "VariableDeclarationStatement[11386-11401]:VariableDeclarationStatement[11447-11462]"
    }, {
      "left" : "while ((length = read(SMALL_BUF)) >= 0)",
      "right" : "while ((length = read(SMALL_BUF)) >= 0)",
      "info" : "WhileStatement[11410-11511]:WhileStatement[11471-11572]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11450-11511]:Block[11511-11572]"
    }, {
      "left" : "longName.write(SMALL_BUF, 0, length);",
      "right" : "longName.write(SMALL_BUF, 0, length);",
      "info" : "ExpressionStatement[11464-11501]:ExpressionStatement[11525-11562]"
    }, {
      "left" : "getNextEntry();",
      "right" : "getNextEntry();",
      "info" : "ExpressionStatement[11520-11535]:ExpressionStatement[11581-11596]"
    }, {
      "left" : "if (currEntry == null)",
      "right" : "if (currEntry == null)",
      "info" : "IfStatement[11544-11708]:IfStatement[11605-11769]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11567-11708]:Block[11628-11769]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[11686-11698]:ReturnStatement[11747-11759]"
    }, {
      "left" : "byte[] longNameData = longName.toByteArray();",
      "right" : "byte[] longNameData = longName.toByteArray();",
      "info" : "VariableDeclarationStatement[11717-11762]:VariableDeclarationStatement[11778-11823]"
    }, {
      "left" : "length = longNameData.length;",
      "right" : "length = longNameData.length;",
      "info" : "ExpressionStatement[11817-11846]:ExpressionStatement[11878-11907]"
    }, {
      "left" : "while (length > 0 && longNameData[length - 1] == 0)",
      "right" : "while (length > 0 && longNameData[length - 1] == 0)",
      "info" : "WhileStatement[11855-11940]:WhileStatement[11916-12001]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11907-11940]:Block[11968-12001]"
    }, {
      "left" : "--length;",
      "right" : "--length;",
      "info" : "ExpressionStatement[11921-11930]:ExpressionStatement[11982-11991]"
    }, {
      "left" : "if (length != longNameData.length)",
      "right" : "if (length != longNameData.length)",
      "info" : "IfStatement[11949-12127]:IfStatement[12010-12188]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11984-12127]:Block[12045-12188]"
    }, {
      "left" : "byte[] l = new byte[length];",
      "right" : "byte[] l = new byte[length];",
      "info" : "VariableDeclarationStatement[11998-12026]:VariableDeclarationStatement[12059-12087]"
    }, {
      "left" : "System.arraycopy(longNameData, 0, l, 0, length);",
      "right" : "System.arraycopy(longNameData, 0, l, 0, length);",
      "info" : "ExpressionStatement[12039-12087]:ExpressionStatement[12100-12148]"
    }, {
      "left" : "longNameData = l;",
      "right" : "longNameData = l;",
      "info" : "ExpressionStatement[12100-12117]:ExpressionStatement[12161-12178]"
    }, {
      "left" : "return longNameData;",
      "right" : "return longNameData;",
      "info" : "ReturnStatement[12136-12156]:ReturnStatement[12197-12217]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12771-13061]:Block[12832-13122]"
    }, {
      "left" : "byte[] headerBuf = readRecord();",
      "right" : "byte[] headerBuf = readRecord();",
      "info" : "VariableDeclarationStatement[12781-12813]:VariableDeclarationStatement[12842-12874]"
    }, {
      "left" : "hasHitEOF = isEOFRecord(headerBuf);",
      "right" : "hasHitEOF = isEOFRecord(headerBuf);",
      "info" : "ExpressionStatement[12822-12857]:ExpressionStatement[12883-12918]"
    }, {
      "left" : "if (hasHitEOF && headerBuf != null)",
      "right" : "if (hasHitEOF && headerBuf != null)",
      "info" : "IfStatement[12866-13029]:IfStatement[12927-13090]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12902-13029]:Block[12963-13090]"
    }, {
      "left" : "tryToConsumeSecondEOFRecord();",
      "right" : "tryToConsumeSecondEOFRecord();",
      "info" : "ExpressionStatement[12916-12946]:ExpressionStatement[12977-13007]"
    }, {
      "left" : "consumeRemainderOfLastBlock();",
      "right" : "consumeRemainderOfLastBlock();",
      "info" : "ExpressionStatement[12959-12989]:ExpressionStatement[13020-13050]"
    }, {
      "left" : "headerBuf = null;",
      "right" : "headerBuf = null;",
      "info" : "ExpressionStatement[13002-13019]:ExpressionStatement[13063-13080]"
    }, {
      "left" : "return headerBuf;",
      "right" : "return headerBuf;",
      "info" : "ReturnStatement[13038-13055]:ReturnStatement[13099-13116]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13390-13476]:Block[13451-13537]"
    }, {
      "left" : "return record == null || ArchiveUtils.isArrayZero(record, recordSize);",
      "right" : "return record == null || ArchiveUtils.isArrayZero(record, recordSize);",
      "info" : "ReturnStatement[13400-13470]:ReturnStatement[13461-13531]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13718-13946]:Block[13779-14007]"
    }, {
      "left" : "byte[] record = new byte[recordSize];",
      "right" : "byte[] record = new byte[recordSize];",
      "info" : "VariableDeclarationStatement[13729-13766]:VariableDeclarationStatement[13790-13827]"
    }, {
      "left" : "int readNow = IOUtils.readFully(is, record);",
      "right" : "int readNow = IOUtils.readFully(is, record);",
      "info" : "VariableDeclarationStatement[13776-13820]:VariableDeclarationStatement[13837-13881]"
    }, {
      "left" : "count(readNow);",
      "right" : "count(readNow);",
      "info" : "ExpressionStatement[13829-13844]:ExpressionStatement[13890-13905]"
    }, {
      "left" : "if (readNow != recordSize)",
      "right" : "if (readNow != recordSize)",
      "info" : "IfStatement[13853-13916]:IfStatement[13914-13977]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13880-13916]:Block[13941-13977]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[13894-13906]:ReturnStatement[13955-13967]"
    }, {
      "left" : "return record;",
      "right" : "return record;",
      "info" : "ReturnStatement[13926-13940]:ReturnStatement[13987-14001]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13996-14165]:Block[14057-14226]"
    }, {
      "left" : "Map<String, String> headers = parsePaxHeaders(this);",
      "right" : "Map<String, String> headers = parsePaxHeaders(this);",
      "info" : "VariableDeclarationStatement[14006-14058]:VariableDeclarationStatement[14067-14119]"
    }, {
      "left" : "getNextEntry();",
      "right" : "getNextEntry();",
      "info" : "ExpressionStatement[14067-14082]:ExpressionStatement[14128-14143]"
    }, {
      "left" : "applyPaxHeadersToCurrentEntry(headers);",
      "right" : "applyPaxHeadersToCurrentEntry(headers);",
      "info" : "ExpressionStatement[14120-14159]:ExpressionStatement[14181-14220]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14241-16229]:Block[14302-16290]"
    }, {
      "left" : "Map<String, String> headers = new HashMap<String, String>();",
      "right" : "Map<String, String> headers = new HashMap<String, String>();",
      "info" : "VariableDeclarationStatement[14251-14311]:VariableDeclarationStatement[14312-14372]"
    }, {
      "left" : "while(true)",
      "right" : "while(true)",
      "info" : "WhileStatement[14367-16199]:WhileStatement[14428-16260]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14378-16199]:Block[14439-16260]"
    }, {
      "left" : "int ch;",
      "right" : "int ch;",
      "info" : "VariableDeclarationStatement[14406-14413]:VariableDeclarationStatement[14467-14474]"
    }, {
      "left" : "int len = 0;",
      "right" : "int len = 0;",
      "info" : "VariableDeclarationStatement[14426-14438]:VariableDeclarationStatement[14487-14499]"
    }, {
      "left" : "int read = 0;",
      "right" : "int read = 0;",
      "info" : "VariableDeclarationStatement[14451-14464]:VariableDeclarationStatement[14512-14525]"
    }, {
      "left" : "while((ch = i.read()) != -1)",
      "right" : "while((ch = i.read()) != -1)",
      "info" : "WhileStatement[14477-16118]:WhileStatement[14538-16179]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14506-16118]:Block[14567-16179]"
    }, {
      "left" : "read++;",
      "right" : "read++;",
      "info" : "ExpressionStatement[14524-14531]:ExpressionStatement[14585-14592]"
    }, {
      "left" : "if (ch == ' ')",
      "right" : "if (ch == ' ')",
      "info" : "IfStatement[14548-16044]:IfStatement[14609-16105]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14562-16044]:Block[14623-16105]"
    }, {
      "left" : "ByteArrayOutputStream coll = new ByteArrayOutputStream();",
      "right" : "ByteArrayOutputStream coll = new ByteArrayOutputStream();",
      "info" : "VariableDeclarationStatement[14643-14700]:VariableDeclarationStatement[14704-14761]"
    }, {
      "left" : "while((ch = i.read()) != -1)",
      "right" : "while((ch = i.read()) != -1)",
      "info" : "WhileStatement[14721-15972]:WhileStatement[14782-16033]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14750-15972]:Block[14811-16033]"
    }, {
      "left" : "read++;",
      "right" : "read++;",
      "info" : "ExpressionStatement[14776-14783]:ExpressionStatement[14837-14844]"
    }, {
      "left" : "if (ch == '=')",
      "right" : "if (ch == '=')",
      "info" : "IfStatement[14808-15903]:IfStatement[14869-15964]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14822-15903]:Block[14883-15964]"
    }, {
      "left" : "String keyword = coll.toString(CharsetNames.UTF_8);",
      "right" : "String keyword = coll.toString(CharsetNames.UTF_8);",
      "info" : "VariableDeclarationStatement[14870-14921]:VariableDeclarationStatement[14931-14982]"
    }, {
      "left" : "final int restLen = len - read;",
      "right" : "final int restLen = len - read;",
      "info" : "VariableDeclarationStatement[14999-15030]:VariableDeclarationStatement[15060-15091]"
    }, {
      "left" : "byte[] rest = new byte[restLen];",
      "right" : "byte[] rest = new byte[restLen];",
      "info" : "VariableDeclarationStatement[15059-15091]:VariableDeclarationStatement[15120-15152]"
    }, {
      "left" : "int got = IOUtils.readFully(i, rest);",
      "right" : "int got = IOUtils.readFully(i, rest);",
      "info" : "VariableDeclarationStatement[15120-15157]:VariableDeclarationStatement[15181-15218]"
    }, {
      "left" : "if (got != restLen)",
      "right" : "if (got != restLen)",
      "info" : "IfStatement[15186-15586]:IfStatement[15247-15647]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15206-15586]:Block[15267-15647]"
    }, {
      "left" : "throw new IOException(\"Failed to read \"\n                                                      + \"Paxheader. Expected \"\n                                                      + restLen\n                                                      + \" bytes, read \"\n                                                      + got);",
      "right" : "throw new IOException(\"Failed to read \"\n                                                      + \"Paxheader. Expected \"\n                                                      + restLen\n                                                      + \" bytes, read \"\n                                                      + got);",
      "info" : "ThrowStatement[15240-15556]:ThrowStatement[15301-15617]"
    }, {
      "left" : "String value = new String(rest, 0,\n                                                      restLen - 1, CharsetNames.UTF_8);",
      "right" : "String value = new String(rest, 0,\n                                                      restLen - 1, CharsetNames.UTF_8);",
      "info" : "VariableDeclarationStatement[15663-15785]:VariableDeclarationStatement[15724-15846]"
    }, {
      "left" : "headers.put(keyword, value);",
      "right" : "headers.put(keyword, value);",
      "info" : "ExpressionStatement[15814-15842]:ExpressionStatement[15875-15903]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[15871-15877]:BreakStatement[15932-15938]"
    }, {
      "left" : "coll.write((byte) ch);",
      "right" : "coll.write((byte) ch);",
      "info" : "ExpressionStatement[15928-15950]:ExpressionStatement[15989-16011]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[15993-15999]:BreakStatement[16054-16060]"
    }, {
      "left" : "len *= 10;",
      "right" : "len *= 10;",
      "info" : "ExpressionStatement[16061-16071]:ExpressionStatement[16122-16132]"
    }, {
      "left" : "len += ch - '0';",
      "right" : "len += ch - '0';",
      "info" : "ExpressionStatement[16088-16104]:ExpressionStatement[16149-16165]"
    }, {
      "left" : "if (ch == -1)",
      "right" : "if (ch == -1)",
      "info" : "IfStatement[16131-16189]:IfStatement[16192-16250]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16144-16189]:Block[16205-16250]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[16169-16175]:BreakStatement[16230-16236]"
    }, {
      "left" : "return headers;",
      "right" : "return headers;",
      "info" : "ReturnStatement[16208-16223]:ReturnStatement[16269-16284]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16307-17858]:Block[16368-17919]"
    }, {
      "left" : "for (Entry<String, String> ent : headers.entrySet())",
      "right" : "for (Entry<String, String> ent : headers.entrySet())",
      "info" : "EnhancedForStatement[16682-17852]:EnhancedForStatement[16743-17913]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16734-17852]:Block[16795-17913]"
    }, {
      "left" : "String key = ent.getKey();",
      "right" : "String key = ent.getKey();",
      "info" : "VariableDeclarationStatement[16748-16774]:VariableDeclarationStatement[16809-16835]"
    }, {
      "left" : "String val = ent.getValue();",
      "right" : "String val = ent.getValue();",
      "info" : "VariableDeclarationStatement[16787-16815]:VariableDeclarationStatement[16848-16876]"
    }, {
      "left" : "if (\"path\".equals(key))",
      "right" : "if (\"path\".equals(key))",
      "info" : "IfStatement[16828-17842]:IfStatement[16889-17903]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16851-16906]:Block[16912-16967]"
    }, {
      "left" : "currEntry.setName(val);",
      "right" : "currEntry.setName(val);",
      "info" : "ExpressionStatement[16869-16892]:ExpressionStatement[16930-16953]"
    }, {
      "left" : "if (\"linkpath\".equals(key))",
      "right" : "if (\"linkpath\".equals(key))",
      "info" : "IfStatement[16912-17842]:IfStatement[16973-17903]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16939-16998]:Block[17000-17059]"
    }, {
      "left" : "currEntry.setLinkName(val);",
      "right" : "currEntry.setLinkName(val);",
      "info" : "ExpressionStatement[16957-16984]:ExpressionStatement[17018-17045]"
    }, {
      "left" : "if (\"gid\".equals(key))",
      "right" : "if (\"gid\".equals(key))",
      "info" : "IfStatement[17004-17842]:IfStatement[17065-17903]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17026-17102]:Block[17087-17163]"
    }, {
      "left" : "currEntry.setGroupId(Integer.parseInt(val));",
      "right" : "currEntry.setGroupId(Integer.parseInt(val));",
      "info" : "ExpressionStatement[17044-17088]:ExpressionStatement[17105-17149]"
    }, {
      "left" : "if (\"gname\".equals(key))",
      "right" : "if (\"gname\".equals(key))",
      "info" : "IfStatement[17108-17842]:IfStatement[17169-17903]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17132-17192]:Block[17193-17253]"
    }, {
      "left" : "currEntry.setGroupName(val);",
      "right" : "currEntry.setGroupName(val);",
      "info" : "ExpressionStatement[17150-17178]:ExpressionStatement[17211-17239]"
    }, {
      "left" : "if (\"uid\".equals(key))",
      "right" : "if (\"uid\".equals(key))",
      "info" : "IfStatement[17198-17842]:IfStatement[17259-17903]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17220-17295]:Block[17281-17356]"
    }, {
      "left" : "currEntry.setUserId(Integer.parseInt(val));",
      "right" : "currEntry.setUserId(Integer.parseInt(val));",
      "info" : "ExpressionStatement[17238-17281]:ExpressionStatement[17299-17342]"
    }, {
      "left" : "if (\"uname\".equals(key))",
      "right" : "if (\"uname\".equals(key))",
      "info" : "IfStatement[17301-17842]:IfStatement[17362-17903]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17325-17384]:Block[17386-17445]"
    }, {
      "left" : "currEntry.setUserName(val);",
      "right" : "currEntry.setUserName(val);",
      "info" : "ExpressionStatement[17343-17370]:ExpressionStatement[17404-17431]"
    }, {
      "left" : "if (\"size\".equals(key))",
      "right" : "if (\"size\".equals(key))",
      "info" : "IfStatement[17390-17842]:IfStatement[17451-17903]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17413-17484]:Block[17474-17545]"
    }, {
      "left" : "currEntry.setSize(Long.parseLong(val));",
      "right" : "currEntry.setSize(Long.parseLong(val));",
      "info" : "ExpressionStatement[17431-17470]:ExpressionStatement[17492-17531]"
    }, {
      "left" : "if (\"mtime\".equals(key))",
      "right" : "if (\"mtime\".equals(key))",
      "info" : "IfStatement[17490-17842]:IfStatement[17551-17903]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17514-17608]:Block[17575-17669]"
    }, {
      "left" : "currEntry.setModTime((long) (Double.parseDouble(val) * 1000));",
      "right" : "currEntry.setModTime((long) (Double.parseDouble(val) * 1000));",
      "info" : "ExpressionStatement[17532-17594]:ExpressionStatement[17593-17655]"
    }, {
      "left" : "if (\"SCHILY.devminor\".equals(key))",
      "right" : "if (\"SCHILY.devminor\".equals(key))",
      "info" : "IfStatement[17614-17842]:IfStatement[17675-17903]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17648-17725]:Block[17709-17786]"
    }, {
      "left" : "currEntry.setDevMinor(Integer.parseInt(val));",
      "right" : "currEntry.setDevMinor(Integer.parseInt(val));",
      "info" : "ExpressionStatement[17666-17711]:ExpressionStatement[17727-17772]"
    }, {
      "left" : "if (\"SCHILY.devmajor\".equals(key))",
      "right" : "if (\"SCHILY.devmajor\".equals(key))",
      "info" : "IfStatement[17731-17842]:IfStatement[17792-17903]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17765-17842]:Block[17826-17903]"
    }, {
      "left" : "currEntry.setDevMajor(Integer.parseInt(val));",
      "right" : "currEntry.setDevMajor(Integer.parseInt(val));",
      "info" : "ExpressionStatement[17783-17828]:ExpressionStatement[17844-17889]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18185-18853]:Block[18246-18914]"
    }, {
      "left" : "if (currEntry.isExtended())",
      "right" : "if (currEntry.isExtended())",
      "info" : "IfStatement[18342-18847]:IfStatement[18403-18908]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18370-18847]:Block[18431-18908]"
    }, {
      "left" : "TarArchiveSparseEntry entry;",
      "right" : "TarArchiveSparseEntry entry;",
      "info" : "VariableDeclarationStatement[18384-18412]:VariableDeclarationStatement[18445-18473]"
    }, {
      "left" : "do{...}",
      "right" : "do{...}",
      "info" : "DoStatement[18425-18837]:DoStatement[18486-18898]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18428-18809]:Block[18489-18870]"
    }, {
      "left" : "byte[] headerBuf = getRecord();",
      "right" : "byte[] headerBuf = getRecord();",
      "info" : "VariableDeclarationStatement[18446-18477]:VariableDeclarationStatement[18507-18538]"
    }, {
      "left" : "if (headerBuf == null)",
      "right" : "if (headerBuf == null)",
      "info" : "IfStatement[18494-18601]:IfStatement[18555-18662]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18517-18601]:Block[18578-18662]"
    }, {
      "left" : "currEntry = null;",
      "right" : "currEntry = null;",
      "info" : "ExpressionStatement[18539-18556]:ExpressionStatement[18600-18617]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[18577-18583]:BreakStatement[18638-18644]"
    }, {
      "left" : "entry = new TarArchiveSparseEntry(headerBuf);",
      "right" : "entry = new TarArchiveSparseEntry(headerBuf);",
      "info" : "ExpressionStatement[18618-18663]:ExpressionStatement[18679-18724]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19158-19199]:Block[19219-19260]"
    }, {
      "left" : "return getNextTarEntry();",
      "right" : "return getNextTarEntry();",
      "info" : "ReturnStatement[19168-19193]:ReturnStatement[19229-19254]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19751-20127]:Block[19812-20188]"
    }, {
      "left" : "boolean shouldReset = true;",
      "right" : "boolean shouldReset = true;",
      "info" : "VariableDeclarationStatement[19761-19788]:VariableDeclarationStatement[19822-19849]"
    }, {
      "left" : "boolean marked = is.markSupported();",
      "right" : "boolean marked = is.markSupported();",
      "info" : "VariableDeclarationStatement[19797-19833]:VariableDeclarationStatement[19858-19894]"
    }, {
      "left" : "if (marked)",
      "right" : "if (marked)",
      "info" : "IfStatement[19842-19898]:IfStatement[19903-19959]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19854-19898]:Block[19915-19959]"
    }, {
      "left" : "is.mark(recordSize);",
      "right" : "is.mark(recordSize);",
      "info" : "ExpressionStatement[19868-19888]:ExpressionStatement[19929-19949]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[19907-20121]:TryStatement[19968-20182]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19911-19976]:Block[19972-20037]"
    }, {
      "left" : "shouldReset = !isEOFRecord(readRecord());",
      "right" : "shouldReset = !isEOFRecord(readRecord());",
      "info" : "ExpressionStatement[19925-19966]:ExpressionStatement[19986-20027]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19985-20121]:Block[20046-20182]"
    }, {
      "left" : "if (shouldReset && marked)",
      "right" : "if (shouldReset && marked)",
      "info" : "IfStatement[19999-20111]:IfStatement[20060-20172]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20026-20111]:Block[20087-20172]"
    }, {
      "left" : "pushedBackBytes(recordSize);",
      "right" : "pushedBackBytes(recordSize);",
      "info" : "ExpressionStatement[20044-20072]:ExpressionStatement[20105-20133]"
    }, {
      "left" : "is.reset();",
      "right" : "is.reset();",
      "info" : "ExpressionStatement[20086-20097]:ExpressionStatement[20147-20158]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20738-21389]:Block[20799-21450]"
    }, {
      "left" : "int totalRead = 0;",
      "right" : "int totalRead = 0;",
      "info" : "VariableDeclarationStatement[20745-20763]:VariableDeclarationStatement[20806-20824]"
    }, {
      "left" : "if (hasHitEOF || entryOffset >= entrySize)",
      "right" : "if (hasHitEOF || entryOffset >= entrySize)",
      "info" : "IfStatement[20773-20850]:IfStatement[20834-20911]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20816-20850]:Block[20877-20911]"
    }, {
      "left" : "return -1;",
      "right" : "return -1;",
      "info" : "ReturnStatement[20830-20840]:ReturnStatement[20891-20901]"
    }, {
      "left" : "if (currEntry == null)",
      "right" : "if (currEntry == null)",
      "info" : "IfStatement[20860-20963]:IfStatement[20921-21024]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20883-20963]:Block[20944-21024]"
    }, {
      "left" : "throw new IllegalStateException(\"No current tar entry\");",
      "right" : "throw new IllegalStateException(\"No current tar entry\");",
      "info" : "ThrowStatement[20897-20953]:ThrowStatement[20958-21014]"
    }, {
      "left" : "numToRead = Math.min(numToRead, available());",
      "right" : "numToRead = Math.min(numToRead, available());",
      "info" : "ExpressionStatement[20973-21018]:ExpressionStatement[21034-21079]"
    }, {
      "left" : "totalRead = is.read(buf, offset, numToRead);",
      "right" : "totalRead = is.read(buf, offset, numToRead);",
      "info" : "ExpressionStatement[21036-21080]:ExpressionStatement[21097-21141]"
    }, {
      "left" : "if (totalRead == -1)",
      "right" : "if (totalRead == -1)",
      "info" : "IfStatement[21098-21356]:IfStatement[21159-21417]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21119-21271]:Block[21180-21332]"
    }, {
      "left" : "if (numToRead > 0)",
      "right" : "if (numToRead > 0)",
      "info" : "IfStatement[21133-21231]:IfStatement[21194-21292]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21152-21231]:Block[21213-21292]"
    }, {
      "left" : "throw new IOException(\"Truncated TAR archive\");",
      "right" : "throw new IOException(\"Truncated TAR archive\");",
      "info" : "ThrowStatement[21170-21217]:ThrowStatement[21231-21278]"
    }, {
      "left" : "hasHitEOF = true;",
      "right" : "hasHitEOF = true;",
      "info" : "ExpressionStatement[21244-21261]:ExpressionStatement[21305-21322]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21277-21356]:Block[21338-21417]"
    }, {
      "left" : "count(totalRead);",
      "right" : "count(totalRead);",
      "info" : "ExpressionStatement[21291-21308]:ExpressionStatement[21352-21369]"
    }, {
      "left" : "entryOffset += totalRead;",
      "right" : "entryOffset += totalRead;",
      "info" : "ExpressionStatement[21321-21346]:ExpressionStatement[21382-21407]"
    }, {
      "left" : "return totalRead;",
      "right" : "return totalRead;",
      "info" : "ReturnStatement[21366-21383]:ReturnStatement[21427-21444]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21610-21787]:Block[21671-21848]"
    }, {
      "left" : "if (ae instanceof TarArchiveEntry)",
      "right" : "if (ae instanceof TarArchiveEntry)",
      "info" : "IfStatement[21620-21759]:IfStatement[21681-21820]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21655-21759]:Block[21716-21820]"
    }, {
      "left" : "TarArchiveEntry te = (TarArchiveEntry) ae;",
      "right" : "TarArchiveEntry te = (TarArchiveEntry) ae;",
      "info" : "VariableDeclarationStatement[21669-21711]:VariableDeclarationStatement[21730-21772]"
    }, {
      "left" : "return !te.isGNUSparse();",
      "right" : "return !te.isGNUSparse();",
      "info" : "ReturnStatement[21724-21749]:ReturnStatement[21785-21810]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[21768-21781]:ReturnStatement[21829-21842]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21977-22010]:Block[22038-22071]"
    }, {
      "left" : "return currEntry;",
      "right" : "return currEntry;",
      "info" : "ReturnStatement[21987-22004]:ReturnStatement[22048-22065]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22072-22102]:Block[22133-22163]"
    }, {
      "left" : "currEntry = e;",
      "right" : "currEntry = e;",
      "info" : "ExpressionStatement[22082-22096]:ExpressionStatement[22143-22157]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22142-22175]:Block[22203-22236]"
    }, {
      "left" : "return hasHitEOF;",
      "right" : "return hasHitEOF;",
      "info" : "ReturnStatement[22152-22169]:ReturnStatement[22213-22230]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22222-22252]:Block[22283-22313]"
    }, {
      "left" : "hasHitEOF = b;",
      "right" : "hasHitEOF = b;",
      "info" : "ExpressionStatement[22232-22246]:ExpressionStatement[22293-22307]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22540-22768]:Block[22601-22829]"
    }, {
      "left" : "long bytesReadOfLastBlock = getBytesRead() % blockSize;",
      "right" : "long bytesReadOfLastBlock = getBytesRead() % blockSize;",
      "info" : "VariableDeclarationStatement[22550-22605]:VariableDeclarationStatement[22611-22666]"
    }, {
      "left" : "if (bytesReadOfLastBlock > 0)",
      "right" : "if (bytesReadOfLastBlock > 0)",
      "info" : "IfStatement[22614-22762]:IfStatement[22675-22823]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22644-22762]:Block[22705-22823]"
    }, {
      "left" : "long skipped = IOUtils.skip(is, blockSize - bytesReadOfLastBlock);",
      "right" : "long skipped = IOUtils.skip(is, blockSize - bytesReadOfLastBlock);",
      "info" : "VariableDeclarationStatement[22658-22724]:VariableDeclarationStatement[22719-22785]"
    }, {
      "left" : "count(skipped);",
      "right" : "count(skipped);",
      "info" : "ExpressionStatement[22737-22752]:ExpressionStatement[22798-22813]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23135-24618]:Block[23196-24679]"
    }, {
      "left" : "if (length < TarConstants.VERSION_OFFSET+TarConstants.VERSIONLEN)",
      "right" : "if (length < TarConstants.VERSION_OFFSET+TarConstants.VERSIONLEN)",
      "info" : "IfStatement[23145-23248]:IfStatement[23206-23309]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23211-23248]:Block[23272-23309]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[23225-23238]:ReturnStatement[23286-23299]"
    }, {
      "left" : "if (ArchiveUtils.matchAsciiBuffer(TarConstants.MAGIC_POSIX,\n                signature, TarConstants.MAGIC_OFFSET, TarConstants.MAGICLEN)\n            &&\n            ArchiveUtils.matchAsciiBuffer(TarConstants.VERSION_POSIX,\n                signature, TarConstants.VERSION_OFFSET, TarConstants.VERSIONLEN))",
      "right" : "if (ArchiveUtils.matchAsciiBuffer(TarConstants.MAGIC_POSIX,\n                signature, TarConstants.MAGIC_OFFSET, TarConstants.MAGICLEN)\n            &&\n            ArchiveUtils.matchAsciiBuffer(TarConstants.VERSION_POSIX,\n                signature, TarConstants.VERSION_OFFSET, TarConstants.VERSIONLEN))",
      "info" : "IfStatement[23258-23614]:IfStatement[23319-23675]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23578-23614]:Block[23639-23675]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[23592-23604]:ReturnStatement[23653-23665]"
    }, {
      "left" : "if (ArchiveUtils.matchAsciiBuffer(TarConstants.MAGIC_GNU,\n                signature, TarConstants.MAGIC_OFFSET, TarConstants.MAGICLEN)\n            &&\n            (\n             ArchiveUtils.matchAsciiBuffer(TarConstants.VERSION_GNU_SPACE,\n                signature, TarConstants.VERSION_OFFSET, TarConstants.VERSIONLEN)\n            ||\n            ArchiveUtils.matchAsciiBuffer(TarConstants.VERSION_GNU_ZERO,\n                signature, TarConstants.VERSION_OFFSET, TarConstants.VERSIONLEN)\n            ))",
      "right" : "if (ArchiveUtils.matchAsciiBuffer(TarConstants.MAGIC_GNU,\n                signature, TarConstants.MAGIC_OFFSET, TarConstants.MAGICLEN)\n            &&\n            (\n             ArchiveUtils.matchAsciiBuffer(TarConstants.VERSION_GNU_SPACE,\n                signature, TarConstants.VERSION_OFFSET, TarConstants.VERSIONLEN)\n            ||\n            ArchiveUtils.matchAsciiBuffer(TarConstants.VERSION_GNU_ZERO,\n                signature, TarConstants.VERSION_OFFSET, TarConstants.VERSIONLEN)\n            ))",
      "info" : "IfStatement[23623-24179]:IfStatement[23684-24240]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24143-24179]:Block[24204-24240]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[24157-24169]:ReturnStatement[24218-24230]"
    }, {
      "left" : "if (ArchiveUtils.matchAsciiBuffer(TarConstants.MAGIC_ANT,\n                signature, TarConstants.MAGIC_OFFSET, TarConstants.MAGICLEN)\n            &&\n            ArchiveUtils.matchAsciiBuffer(TarConstants.VERSION_ANT,\n                signature, TarConstants.VERSION_OFFSET, TarConstants.VERSIONLEN))",
      "right" : "if (ArchiveUtils.matchAsciiBuffer(TarConstants.MAGIC_ANT,\n                signature, TarConstants.MAGIC_OFFSET, TarConstants.MAGICLEN)\n            &&\n            ArchiveUtils.matchAsciiBuffer(TarConstants.VERSION_ANT,\n                signature, TarConstants.VERSION_OFFSET, TarConstants.VERSIONLEN))",
      "info" : "IfStatement[24238-24590]:IfStatement[24299-24651]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24554-24590]:Block[24615-24651]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[24568-24580]:ReturnStatement[24629-24641]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[24599-24612]:ReturnStatement[24660-24673]"
    } ]
  },
  "interFileMappings" : { }
}