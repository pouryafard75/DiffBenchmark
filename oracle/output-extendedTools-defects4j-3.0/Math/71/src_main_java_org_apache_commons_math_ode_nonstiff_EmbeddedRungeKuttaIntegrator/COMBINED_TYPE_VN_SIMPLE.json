{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "EmbeddedRungeKuttaIntegrator",
      "right" : "EmbeddedRungeKuttaIntegrator",
      "info" : "TypeDeclaration[1291-14844]:TypeDeclaration[1291-15023]"
    }, {
      "left" : "private final boolean fsal;",
      "right" : "private final boolean fsal;",
      "info" : "FieldDeclaration[2712-2785]:FieldDeclaration[2712-2785]"
    }, {
      "left" : "private final double[] c;",
      "right" : "private final double[] c;",
      "info" : "FieldDeclaration[2791-2883]:FieldDeclaration[2791-2883]"
    }, {
      "left" : "private final double[][] a;",
      "right" : "private final double[][] a;",
      "info" : "FieldDeclaration[2889-2994]:FieldDeclaration[2889-2994]"
    }, {
      "left" : "private final double[] b;",
      "right" : "private final double[] b;",
      "info" : "FieldDeclaration[3000-3099]:FieldDeclaration[3000-3099]"
    }, {
      "left" : "private final RungeKuttaStepInterpolator prototype;",
      "right" : "private final RungeKuttaStepInterpolator prototype;",
      "info" : "FieldDeclaration[3105-3203]:FieldDeclaration[3105-3203]"
    }, {
      "left" : "private final double exp;",
      "right" : "private final double exp;",
      "info" : "FieldDeclaration[3209-3272]:FieldDeclaration[3209-3272]"
    }, {
      "left" : "private double safety;",
      "right" : "private double safety;",
      "info" : "FieldDeclaration[3278-3347]:FieldDeclaration[3278-3347]"
    }, {
      "left" : "private double minReduction;",
      "right" : "private double minReduction;",
      "info" : "FieldDeclaration[3353-3439]:FieldDeclaration[3353-3439]"
    }, {
      "left" : "private double maxGrowth;",
      "right" : "private double maxGrowth;",
      "info" : "FieldDeclaration[3445-3525]:FieldDeclaration[3445-3525]"
    }, {
      "left" : "protected EmbeddedRungeKuttaIntegrator(final String name, final boolean fsal,\n                                         final double[] c, final double[][] a, final double[] b,\n                                         final RungeKuttaStepInterpolator prototype,\n                                         final double minStep, final double maxStep,\n                                         final double scalAbsoluteTolerance,\n                                         final double scalRelativeTolerance)",
      "right" : "protected EmbeddedRungeKuttaIntegrator(final String name, final boolean fsal,\n                                         final double[] c, final double[][] a, final double[] b,\n                                         final RungeKuttaStepInterpolator prototype,\n                                         final double minStep, final double maxStep,\n                                         final double scalAbsoluteTolerance,\n                                         final double scalRelativeTolerance)",
      "info" : "MethodDeclaration[3529-5204]:MethodDeclaration[3529-5204]"
    }, {
      "left" : "protected EmbeddedRungeKuttaIntegrator(final String name, final boolean fsal,\n                                         final double[] c, final double[][] a, final double[] b,\n                                         final RungeKuttaStepInterpolator prototype,\n                                         final double   minStep, final double maxStep,\n                                         final double[] vecAbsoluteTolerance,\n                                         final double[] vecRelativeTolerance)",
      "right" : "protected EmbeddedRungeKuttaIntegrator(final String name, final boolean fsal,\n                                         final double[] c, final double[][] a, final double[] b,\n                                         final RungeKuttaStepInterpolator prototype,\n                                         final double   minStep, final double maxStep,\n                                         final double[] vecAbsoluteTolerance,\n                                         final double[] vecRelativeTolerance)",
      "info" : "MethodDeclaration[5208-6883]:MethodDeclaration[5208-6883]"
    }, {
      "left" : "public abstract int getOrder();",
      "right" : "public abstract int getOrder();",
      "info" : "MethodDeclaration[6887-6992]:MethodDeclaration[6887-6992]"
    }, {
      "left" : "public double getSafety()",
      "right" : "public double getSafety()",
      "info" : "MethodDeclaration[6996-7129]:MethodDeclaration[6996-7129]"
    }, {
      "left" : "public void setSafety(final double safety)",
      "right" : "public void setSafety(final double safety)",
      "info" : "MethodDeclaration[7133-7296]:MethodDeclaration[7133-7296]"
    }, {
      "left" : "public double integrate(final FirstOrderDifferentialEquations equations,\n                          final double t0, final double[] y0,\n                          final double t, final double[] y)\n  throws DerivativeException, IntegratorException",
      "right" : "public double integrate(final FirstOrderDifferentialEquations equations,\n                          final double t0, final double[] y0,\n                          final double t, final double[] y)\n  throws DerivativeException, IntegratorException",
      "info" : "MethodDeclaration[7300-13596]:MethodDeclaration[7300-13775]"
    }, {
      "left" : "public double getMinReduction()",
      "right" : "public double getMinReduction()",
      "info" : "MethodDeclaration[13600-13767]:MethodDeclaration[13779-13946]"
    }, {
      "left" : "public void setMinReduction(final double minReduction)",
      "right" : "public void setMinReduction(final double minReduction)",
      "info" : "MethodDeclaration[13771-13986]:MethodDeclaration[13950-14165]"
    }, {
      "left" : "public double getMaxGrowth()",
      "right" : "public double getMaxGrowth()",
      "info" : "MethodDeclaration[13990-14145]:MethodDeclaration[14169-14324]"
    }, {
      "left" : "public void setMaxGrowth(final double maxGrowth)",
      "right" : "public void setMaxGrowth(final double maxGrowth)",
      "info" : "MethodDeclaration[14149-14343]:MethodDeclaration[14328-14522]"
    }, {
      "left" : "protected abstract double estimateError(double[][] yDotK,\n                                          double[] y0, double[] y1,\n                                          double h);",
      "right" : "protected abstract double estimateError(double[][] yDotK,\n                                          double[] y0, double[] y1,\n                                          double h);",
      "info" : "MethodDeclaration[14347-14841]:MethodDeclaration[14526-15020]"
    } ],
    "mappings" : [
 {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[2617-2623]:Modifier[2617-2623]"
    }, {
      "left" : "abstract",
      "right" : "abstract",
      "info" : "Modifier[2624-2632]:Modifier[2624-2632]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[2633-2638]:TYPE_DECLARATION_KIND[2633-2638]"
    }, {
      "left" : "EmbeddedRungeKuttaIntegrator",
      "right" : "EmbeddedRungeKuttaIntegrator",
      "info" : "SimpleName[2639-2667]:SimpleName[2639-2667]"
    }, {
      "left" : "AdaptiveStepsizeIntegrator",
      "right" : "AdaptiveStepsizeIntegrator",
      "info" : "SimpleType[2678-2704]:SimpleType[2678-2704]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[4318-4327]:Modifier[4318-4327]"
    }, {
      "left" : "EmbeddedRungeKuttaIntegrator",
      "right" : "EmbeddedRungeKuttaIntegrator",
      "info" : "SimpleName[4328-4356]:SimpleName[4328-4356]"
    }, {
      "left" : "final String name",
      "right" : "final String name",
      "info" : "SingleVariableDeclaration[4357-4374]:SingleVariableDeclaration[4357-4374]"
    }, {
      "left" : "final boolean fsal",
      "right" : "final boolean fsal",
      "info" : "SingleVariableDeclaration[4376-4394]:SingleVariableDeclaration[4376-4394]"
    }, {
      "left" : "final double[] c",
      "right" : "final double[] c",
      "info" : "SingleVariableDeclaration[4437-4453]:SingleVariableDeclaration[4437-4453]"
    }, {
      "left" : "final double[][] a",
      "right" : "final double[][] a",
      "info" : "SingleVariableDeclaration[4455-4473]:SingleVariableDeclaration[4455-4473]"
    }, {
      "left" : "final double[] b",
      "right" : "final double[] b",
      "info" : "SingleVariableDeclaration[4475-4491]:SingleVariableDeclaration[4475-4491]"
    }, {
      "left" : "final RungeKuttaStepInterpolator prototype",
      "right" : "final RungeKuttaStepInterpolator prototype",
      "info" : "SingleVariableDeclaration[4534-4576]:SingleVariableDeclaration[4534-4576]"
    }, {
      "left" : "final double minStep",
      "right" : "final double minStep",
      "info" : "SingleVariableDeclaration[4619-4639]:SingleVariableDeclaration[4619-4639]"
    }, {
      "left" : "final double maxStep",
      "right" : "final double maxStep",
      "info" : "SingleVariableDeclaration[4641-4661]:SingleVariableDeclaration[4641-4661]"
    }, {
      "left" : "final double scalAbsoluteTolerance",
      "right" : "final double scalAbsoluteTolerance",
      "info" : "SingleVariableDeclaration[4704-4738]:SingleVariableDeclaration[4704-4738]"
    }, {
      "left" : "final double scalRelativeTolerance",
      "right" : "final double scalRelativeTolerance",
      "info" : "SingleVariableDeclaration[4781-4815]:SingleVariableDeclaration[4781-4815]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4817-5204]:Block[4817-5204]"
    }, {
      "left" : "super(name, minStep, maxStep, scalAbsoluteTolerance, scalRelativeTolerance);",
      "right" : "super(name, minStep, maxStep, scalAbsoluteTolerance, scalRelativeTolerance);",
      "info" : "SuperConstructorInvocation[4824-4900]:SuperConstructorInvocation[4824-4900]"
    }, {
      "left" : "this.fsal      = fsal;",
      "right" : "this.fsal      = fsal;",
      "info" : "ExpressionStatement[4906-4928]:ExpressionStatement[4906-4928]"
    }, {
      "left" : "this.c         = c;",
      "right" : "this.c         = c;",
      "info" : "ExpressionStatement[4933-4952]:ExpressionStatement[4933-4952]"
    }, {
      "left" : "this.a         = a;",
      "right" : "this.a         = a;",
      "info" : "ExpressionStatement[4957-4976]:ExpressionStatement[4957-4976]"
    }, {
      "left" : "this.b         = b;",
      "right" : "this.b         = b;",
      "info" : "ExpressionStatement[4981-5000]:ExpressionStatement[4981-5000]"
    }, {
      "left" : "this.prototype = prototype;",
      "right" : "this.prototype = prototype;",
      "info" : "ExpressionStatement[5005-5032]:ExpressionStatement[5005-5032]"
    }, {
      "left" : "exp = -1.0 / getOrder();",
      "right" : "exp = -1.0 / getOrder();",
      "info" : "ExpressionStatement[5038-5062]:ExpressionStatement[5038-5062]"
    }, {
      "left" : "setSafety(0.9);",
      "right" : "setSafety(0.9);",
      "info" : "ExpressionStatement[5134-5149]:ExpressionStatement[5134-5149]"
    }, {
      "left" : "setMinReduction(0.2);",
      "right" : "setMinReduction(0.2);",
      "info" : "ExpressionStatement[5154-5175]:ExpressionStatement[5154-5175]"
    }, {
      "left" : "setMaxGrowth(10.0);",
      "right" : "setMaxGrowth(10.0);",
      "info" : "ExpressionStatement[5180-5199]:ExpressionStatement[5180-5199]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[5995-6004]:Modifier[5995-6004]"
    }, {
      "left" : "EmbeddedRungeKuttaIntegrator",
      "right" : "EmbeddedRungeKuttaIntegrator",
      "info" : "SimpleName[6005-6033]:SimpleName[6005-6033]"
    }, {
      "left" : "final String name",
      "right" : "final String name",
      "info" : "SingleVariableDeclaration[6034-6051]:SingleVariableDeclaration[6034-6051]"
    }, {
      "left" : "final boolean fsal",
      "right" : "final boolean fsal",
      "info" : "SingleVariableDeclaration[6053-6071]:SingleVariableDeclaration[6053-6071]"
    }, {
      "left" : "final double[] c",
      "right" : "final double[] c",
      "info" : "SingleVariableDeclaration[6114-6130]:SingleVariableDeclaration[6114-6130]"
    }, {
      "left" : "final double[][] a",
      "right" : "final double[][] a",
      "info" : "SingleVariableDeclaration[6132-6150]:SingleVariableDeclaration[6132-6150]"
    }, {
      "left" : "final double[] b",
      "right" : "final double[] b",
      "info" : "SingleVariableDeclaration[6152-6168]:SingleVariableDeclaration[6152-6168]"
    }, {
      "left" : "final RungeKuttaStepInterpolator prototype",
      "right" : "final RungeKuttaStepInterpolator prototype",
      "info" : "SingleVariableDeclaration[6211-6253]:SingleVariableDeclaration[6211-6253]"
    }, {
      "left" : "final double   minStep",
      "right" : "final double   minStep",
      "info" : "SingleVariableDeclaration[6296-6318]:SingleVariableDeclaration[6296-6318]"
    }, {
      "left" : "final double maxStep",
      "right" : "final double maxStep",
      "info" : "SingleVariableDeclaration[6320-6340]:SingleVariableDeclaration[6320-6340]"
    }, {
      "left" : "final double[] vecAbsoluteTolerance",
      "right" : "final double[] vecAbsoluteTolerance",
      "info" : "SingleVariableDeclaration[6383-6418]:SingleVariableDeclaration[6383-6418]"
    }, {
      "left" : "final double[] vecRelativeTolerance",
      "right" : "final double[] vecRelativeTolerance",
      "info" : "SingleVariableDeclaration[6461-6496]:SingleVariableDeclaration[6461-6496]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6498-6883]:Block[6498-6883]"
    }, {
      "left" : "super(name, minStep, maxStep, vecAbsoluteTolerance, vecRelativeTolerance);",
      "right" : "super(name, minStep, maxStep, vecAbsoluteTolerance, vecRelativeTolerance);",
      "info" : "SuperConstructorInvocation[6505-6579]:SuperConstructorInvocation[6505-6579]"
    }, {
      "left" : "this.fsal      = fsal;",
      "right" : "this.fsal      = fsal;",
      "info" : "ExpressionStatement[6585-6607]:ExpressionStatement[6585-6607]"
    }, {
      "left" : "this.c         = c;",
      "right" : "this.c         = c;",
      "info" : "ExpressionStatement[6612-6631]:ExpressionStatement[6612-6631]"
    }, {
      "left" : "this.a         = a;",
      "right" : "this.a         = a;",
      "info" : "ExpressionStatement[6636-6655]:ExpressionStatement[6636-6655]"
    }, {
      "left" : "this.b         = b;",
      "right" : "this.b         = b;",
      "info" : "ExpressionStatement[6660-6679]:ExpressionStatement[6660-6679]"
    }, {
      "left" : "this.prototype = prototype;",
      "right" : "this.prototype = prototype;",
      "info" : "ExpressionStatement[6684-6711]:ExpressionStatement[6684-6711]"
    }, {
      "left" : "exp = -1.0 / getOrder();",
      "right" : "exp = -1.0 / getOrder();",
      "info" : "ExpressionStatement[6717-6741]:ExpressionStatement[6717-6741]"
    }, {
      "left" : "setSafety(0.9);",
      "right" : "setSafety(0.9);",
      "info" : "ExpressionStatement[6813-6828]:ExpressionStatement[6813-6828]"
    }, {
      "left" : "setMinReduction(0.2);",
      "right" : "setMinReduction(0.2);",
      "info" : "ExpressionStatement[6833-6854]:ExpressionStatement[6833-6854]"
    }, {
      "left" : "setMaxGrowth(10.0);",
      "right" : "setMaxGrowth(10.0);",
      "info" : "ExpressionStatement[6859-6878]:ExpressionStatement[6859-6878]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[6961-6967]:Modifier[6961-6967]"
    }, {
      "left" : "abstract",
      "right" : "abstract",
      "info" : "Modifier[6968-6976]:Modifier[6968-6976]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[6977-6980]:PrimitiveType[6977-6980]"
    }, {
      "left" : "getOrder",
      "right" : "getOrder",
      "info" : "SimpleName[6981-6989]:SimpleName[6981-6989]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[7079-7085]:Modifier[7079-7085]"
    }, {
      "left" : "double",
      "right" : "double",
      "info" : "PrimitiveType[7086-7092]:PrimitiveType[7086-7092]"
    }, {
      "left" : "getSafety",
      "right" : "getSafety",
      "info" : "SimpleName[7093-7102]:SimpleName[7093-7102]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7105-7129]:Block[7105-7129]"
    }, {
      "left" : "return safety;",
      "right" : "return safety;",
      "info" : "ReturnStatement[7111-7125]:ReturnStatement[7111-7125]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[7222-7228]:Modifier[7222-7228]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[7229-7233]:PrimitiveType[7229-7233]"
    }, {
      "left" : "setSafety",
      "right" : "setSafety",
      "info" : "SimpleName[7234-7243]:SimpleName[7234-7243]"
    }, {
      "left" : "final double safety",
      "right" : "final double safety",
      "info" : "SingleVariableDeclaration[7244-7263]:SingleVariableDeclaration[7244-7263]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7265-7296]:Block[7265-7296]"
    }, {
      "left" : "this.safety = safety;",
      "right" : "this.safety = safety;",
      "info" : "ExpressionStatement[7271-7292]:ExpressionStatement[7271-7292]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[7323-7332]:MarkerAnnotation[7323-7332]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[7335-7341]:Modifier[7335-7341]"
    }, {
      "left" : "double",
      "right" : "double",
      "info" : "PrimitiveType[7342-7348]:PrimitiveType[7342-7348]"
    }, {
      "left" : "integrate",
      "right" : "integrate",
      "info" : "SimpleName[7349-7358]:SimpleName[7349-7358]"
    }, {
      "left" : "final FirstOrderDifferentialEquations equations",
      "right" : "final FirstOrderDifferentialEquations equations",
      "info" : "SingleVariableDeclaration[7359-7406]:SingleVariableDeclaration[7359-7406]"
    }, {
      "left" : "final double t0",
      "right" : "final double t0",
      "info" : "SingleVariableDeclaration[7434-7449]:SingleVariableDeclaration[7434-7449]"
    }, {
      "left" : "final double[] y0",
      "right" : "final double[] y0",
      "info" : "SingleVariableDeclaration[7451-7468]:SingleVariableDeclaration[7451-7468]"
    }, {
      "left" : "final double t",
      "right" : "final double t",
      "info" : "SingleVariableDeclaration[7496-7510]:SingleVariableDeclaration[7496-7510]"
    }, {
      "left" : "final double[] y",
      "right" : "final double[] y",
      "info" : "SingleVariableDeclaration[7512-7528]:SingleVariableDeclaration[7512-7528]"
    }, {
      "left" : "DerivativeException",
      "right" : "DerivativeException",
      "info" : "SimpleType[7539-7558]:SimpleType[7539-7558]"
    }, {
      "left" : "IntegratorException",
      "right" : "IntegratorException",
      "info" : "SimpleType[7560-7579]:SimpleType[7560-7579]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7580-13596]:Block[7580-13775]"
    }, {
      "left" : "sanityChecks(equations, t0, y0, t, y);",
      "right" : "sanityChecks(equations, t0, y0, t, y);",
      "info" : "ExpressionStatement[7587-7625]:ExpressionStatement[7587-7625]"
    }, {
      "left" : "setEquations(equations);",
      "right" : "setEquations(equations);",
      "info" : "ExpressionStatement[7630-7654]:ExpressionStatement[7630-7654]"
    }, {
      "left" : "resetEvaluations();",
      "right" : "resetEvaluations();",
      "info" : "ExpressionStatement[7659-7678]:ExpressionStatement[7659-7678]"
    }, {
      "left" : "final boolean forward = t > t0;",
      "right" : "final boolean forward = t > t0;",
      "info" : "VariableDeclarationStatement[7683-7714]:VariableDeclarationStatement[7683-7714]"
    }, {
      "left" : "final int stages = c.length + 1;",
      "right" : "final int stages = c.length + 1;",
      "info" : "VariableDeclarationStatement[7763-7795]:VariableDeclarationStatement[7763-7795]"
    }, {
      "left" : "if (y != y0)",
      "right" : "if (y != y0)",
      "info" : "IfStatement[7800-7868]:IfStatement[7800-7868]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7813-7868]:Block[7813-7868]"
    }, {
      "left" : "System.arraycopy(y0, 0, y, 0, y0.length);",
      "right" : "System.arraycopy(y0, 0, y, 0, y0.length);",
      "info" : "ExpressionStatement[7821-7862]:ExpressionStatement[7821-7862]"
    }, {
      "left" : "final double[][] yDotK = new double[stages][y0.length];",
      "right" : "final double[][] yDotK = new double[stages][y0.length];",
      "info" : "VariableDeclarationStatement[7873-7928]:VariableDeclarationStatement[7873-7928]"
    }, {
      "left" : "final double[] yTmp = new double[y0.length];",
      "right" : "final double[] yTmp = new double[y0.length];",
      "info" : "VariableDeclarationStatement[7933-7977]:VariableDeclarationStatement[7933-7977]"
    }, {
      "left" : "AbstractStepInterpolator interpolator;",
      "right" : "AbstractStepInterpolator interpolator;",
      "info" : "VariableDeclarationStatement[8043-8081]:VariableDeclarationStatement[8043-8081]"
    }, {
      "left" : "if (requiresDenseOutput() || (! eventsHandlersManager.isEmpty()))",
      "right" : "if (requiresDenseOutput() || (! eventsHandlersManager.isEmpty()))",
      "info" : "IfStatement[8086-8424]:IfStatement[8086-8424]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8152-8329]:Block[8152-8329]"
    }, {
      "left" : "final RungeKuttaStepInterpolator rki = (RungeKuttaStepInterpolator) prototype.copy();",
      "right" : "final RungeKuttaStepInterpolator rki = (RungeKuttaStepInterpolator) prototype.copy();",
      "info" : "VariableDeclarationStatement[8160-8245]:VariableDeclarationStatement[8160-8245]"
    }, {
      "left" : "rki.reinitialize(this, yTmp, yDotK, forward);",
      "right" : "rki.reinitialize(this, yTmp, yDotK, forward);",
      "info" : "ExpressionStatement[8252-8297]:ExpressionStatement[8252-8297]"
    }, {
      "left" : "interpolator = rki;",
      "right" : "interpolator = rki;",
      "info" : "ExpressionStatement[8304-8323]:ExpressionStatement[8304-8323]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8335-8424]:Block[8335-8424]"
    }, {
      "left" : "interpolator = new DummyStepInterpolator(yTmp, yDotK[stages - 1], forward);",
      "right" : "interpolator = new DummyStepInterpolator(yTmp, yDotK[stages - 1], forward);",
      "info" : "ExpressionStatement[8343-8418]:ExpressionStatement[8343-8418]"
    }, {
      "left" : "interpolator.storeTime(t0);",
      "right" : "interpolator.storeTime(t0);",
      "info" : "ExpressionStatement[8429-8456]:ExpressionStatement[8429-8456]"
    }, {
      "left" : "stepStart         = t0;",
      "right" : "stepStart         = t0;",
      "info" : "ExpressionStatement[8504-8527]:ExpressionStatement[8504-8527]"
    }, {
      "left" : "double  hNew      = 0;",
      "right" : "double  hNew      = 0;",
      "info" : "VariableDeclarationStatement[8532-8554]:VariableDeclarationStatement[8532-8554]"
    }, {
      "left" : "boolean firstTime = true;",
      "right" : "boolean firstTime = true;",
      "info" : "VariableDeclarationStatement[8559-8584]:VariableDeclarationStatement[8559-8584]"
    }, {
      "left" : "for (StepHandler handler : stepHandlers)",
      "right" : "for (StepHandler handler : stepHandlers)",
      "info" : "EnhancedForStatement[8589-8662]:EnhancedForStatement[8589-8662]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8630-8662]:Block[8630-8662]"
    }, {
      "left" : "handler.reset();",
      "right" : "handler.reset();",
      "info" : "ExpressionStatement[8640-8656]:ExpressionStatement[8640-8656]"
    }, {
      "left" : "CombinedEventsManager manager = addEndTimeChecker(t0, t, eventsHandlersManager);",
      "right" : "CombinedEventsManager manager = addEndTimeChecker(t0, t, eventsHandlersManager);",
      "info" : "VariableDeclarationStatement[8667-8747]:VariableDeclarationStatement[8667-8747]"
    }, {
      "left" : "boolean lastStep = false;",
      "right" : "boolean lastStep = false;",
      "info" : "VariableDeclarationStatement[8752-8777]:VariableDeclarationStatement[8752-8777]"
    }, {
      "left" : "while (!lastStep)",
      "right" : "while (!lastStep)",
      "info" : "WhileStatement[8812-13504]:WhileStatement[8812-13683]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8830-13504]:Block[8830-13683]"
    }, {
      "left" : "interpolator.shift();",
      "right" : "interpolator.shift();",
      "info" : "ExpressionStatement[8839-8860]:ExpressionStatement[8839-8860]"
    }, {
      "left" : "double error = 0;",
      "right" : "double error = 0;",
      "info" : "VariableDeclarationStatement[8868-8885]:VariableDeclarationStatement[8868-8885]"
    }, {
      "left" : "for (boolean loop = true; loop)",
      "right" : "for (boolean loop = true; loop)",
      "info" : "ForStatement[8892-11865]:ForStatement[8892-12044]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8925-11865]:Block[8925-12044]"
    }, {
      "left" : "if (firstTime || !fsal)",
      "right" : "if (firstTime || !fsal)",
      "info" : "IfStatement[8936-9050]:IfStatement[8936-9050]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8960-9050]:Block[8960-9050]"
    }, {
      "left" : "computeDerivatives(stepStart, y, yDotK[0]);",
      "right" : "computeDerivatives(stepStart, y, yDotK[0]);",
      "info" : "ExpressionStatement[8997-9040]:ExpressionStatement[8997-9040]"
    }, {
      "left" : "if (firstTime)",
      "right" : "if (firstTime)",
      "info" : "IfStatement[9060-9724]:IfStatement[9060-9724]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9075-9724]:Block[9075-9724]"
    }, {
      "left" : "final double[] scale = new double[y0.length];",
      "right" : "final double[] scale = new double[y0.length];",
      "info" : "VariableDeclarationStatement[9087-9132]:VariableDeclarationStatement[9087-9132]"
    }, {
      "left" : "if (vecAbsoluteTolerance == null)",
      "right" : "if (vecAbsoluteTolerance == null)",
      "info" : "IfStatement[9143-9541]:IfStatement[9143-9541]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9177-9354]:Block[9177-9354]"
    }, {
      "left" : "for (int i = 0; i < scale.length; ++i)",
      "right" : "for (int i = 0; i < scale.length; ++i)",
      "info" : "ForStatement[9193-9340]:ForStatement[9193-9340]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9232-9340]:Block[9232-9340]"
    }, {
      "left" : "scale[i] = scalAbsoluteTolerance + scalRelativeTolerance * Math.abs(y[i]);",
      "right" : "scale[i] = scalAbsoluteTolerance + scalRelativeTolerance * Math.abs(y[i]);",
      "info" : "ExpressionStatement[9250-9324]:ExpressionStatement[9250-9324]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9360-9541]:Block[9360-9541]"
    }, {
      "left" : "for (int i = 0; i < scale.length; ++i)",
      "right" : "for (int i = 0; i < scale.length; ++i)",
      "info" : "ForStatement[9376-9527]:ForStatement[9376-9527]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9415-9527]:Block[9415-9527]"
    }, {
      "left" : "scale[i] = vecAbsoluteTolerance[i] + vecRelativeTolerance[i] * Math.abs(y[i]);",
      "right" : "scale[i] = vecAbsoluteTolerance[i] + vecRelativeTolerance[i] * Math.abs(y[i]);",
      "info" : "ExpressionStatement[9433-9511]:ExpressionStatement[9433-9511]"
    }, {
      "left" : "hNew = initializeStep(equations, forward, getOrder(), scale,\n                                stepStart, y, yDotK[0], yTmp, yDotK[1]);",
      "right" : "hNew = initializeStep(equations, forward, getOrder(), scale,\n                                stepStart, y, yDotK[0], yTmp, yDotK[1]);",
      "info" : "ExpressionStatement[9552-9685]:ExpressionStatement[9552-9685]"
    }, {
      "left" : "firstTime = false;",
      "right" : "firstTime = false;",
      "info" : "ExpressionStatement[9696-9714]:ExpressionStatement[9696-9714]"
    }, {
      "left" : "stepSize = hNew;",
      "right" : "stepSize = hNew;",
      "info" : "ExpressionStatement[9734-9750]:ExpressionStatement[9734-9750]"
    }, {
      "left" : "for (int k = 1; k < stages; ++k)",
      "right" : "for (int k = 1; k < stages; ++k)",
      "info" : "ForStatement[9783-10164]:ForStatement[9783-10164]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9816-10164]:Block[9816-10164]"
    }, {
      "left" : "for (int j = 0; j < y0.length; ++j)",
      "right" : "for (int j = 0; j < y0.length; ++j)",
      "info" : "ForStatement[9829-10075]:ForStatement[9829-10075]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9865-10075]:Block[9865-10075]"
    }, {
      "left" : "double sum = a[k-1][0] * yDotK[0][j];",
      "right" : "double sum = a[k-1][0] * yDotK[0][j];",
      "info" : "VariableDeclarationStatement[9879-9916]:VariableDeclarationStatement[9879-9916]"
    }, {
      "left" : "for (int l = 1; l < k; ++l)",
      "right" : "for (int l = 1; l < k; ++l)",
      "info" : "ForStatement[9929-10018]:ForStatement[9929-10018]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9957-10018]:Block[9957-10018]"
    }, {
      "left" : "sum += a[k-1][l] * yDotK[l][j];",
      "right" : "sum += a[k-1][l] * yDotK[l][j];",
      "info" : "ExpressionStatement[9973-10004]:ExpressionStatement[9973-10004]"
    }, {
      "left" : "yTmp[j] = y[j] + stepSize * sum;",
      "right" : "yTmp[j] = y[j] + stepSize * sum;",
      "info" : "ExpressionStatement[10031-10063]:ExpressionStatement[10031-10063]"
    }, {
      "left" : "computeDerivatives(stepStart + c[k-1] * stepSize, yTmp, yDotK[k]);",
      "right" : "computeDerivatives(stepStart + c[k-1] * stepSize, yTmp, yDotK[k]);",
      "info" : "ExpressionStatement[10087-10153]:ExpressionStatement[10087-10153]"
    }, {
      "left" : "for (int j = 0; j < y0.length; ++j)",
      "right" : "for (int j = 0; j < y0.length; ++j)",
      "info" : "ForStatement[10227-10462]:ForStatement[10227-10462]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10263-10462]:Block[10263-10462]"
    }, {
      "left" : "double sum    = b[0] * yDotK[0][j];",
      "right" : "double sum    = b[0] * yDotK[0][j];",
      "info" : "VariableDeclarationStatement[10275-10310]:VariableDeclarationStatement[10275-10310]"
    }, {
      "left" : "for (int l = 1; l < stages; ++l)",
      "right" : "for (int l = 1; l < stages; ++l)",
      "info" : "ForStatement[10321-10409]:ForStatement[10321-10409]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10354-10409]:Block[10354-10409]"
    }, {
      "left" : "sum    += b[l] * yDotK[l][j];",
      "right" : "sum    += b[l] * yDotK[l][j];",
      "info" : "ExpressionStatement[10368-10397]:ExpressionStatement[10368-10397]"
    }, {
      "left" : "yTmp[j] = y[j] + stepSize * sum;",
      "right" : "yTmp[j] = y[j] + stepSize * sum;",
      "info" : "ExpressionStatement[10420-10452]:ExpressionStatement[10420-10452]"
    }, {
      "left" : "error = estimateError(yDotK, y, yTmp, stepSize);",
      "right" : "error = estimateError(yDotK, y, yTmp, stepSize);",
      "info" : "ExpressionStatement[10525-10573]:ExpressionStatement[10525-10573]"
    }, {
      "left" : "if (error <= 1.0)",
      "right" : "if (error <= 1.0)",
      "info" : "IfStatement[10582-11856]:IfStatement[10582-12035]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10600-11553]:Block[10600-11732]"
    }, {
      "left" : "interpolator.storeTime(stepStart + stepSize);",
      "right" : "interpolator.storeTime(stepStart + stepSize);",
      "info" : "ExpressionStatement[10651-10696]:ExpressionStatement[10651-10696]"
    }, {
      "left" : "if (manager.evaluateStep(interpolator))",
      "right" : "if (manager.evaluateStep(interpolator))",
      "info" : "IfStatement[10707-11542]:IfStatement[10707-11721]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10747-11466]:Block[10747-11645]"
    }, {
      "left" : "final double dt = manager.getEventTime() - stepStart;",
      "right" : "final double dt = manager.getEventTime() - stepStart;",
      "info" : "VariableDeclarationStatement[10763-10816]:VariableDeclarationStatement[10763-10816]"
    }, {
      "left" : "if (Math.abs(dt) <= Math.ulp(stepStart))",
      "right" : "if (Math.abs(dt) <= Math.ulp(stepStart))",
      "info" : "IfStatement[10831-11454]:IfStatement[10831-11633]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10872-11327]:Block[11651-11721]"
    }, {
      "left" : "loop     = false;",
      "right" : "loop = false;",
      "info" : "ExpressionStatement[11294-11311]:ExpressionStatement[11696-11709]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11333-11454]:Block[11512-11633]"
    }, {
      "left" : "hNew = dt;",
      "right" : "hNew = dt;",
      "info" : "ExpressionStatement[11428-11438]:ExpressionStatement[11607-11617]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11559-11856]:Block[11738-12035]"
    }, {
      "left" : "final double factor =\n              Math.min(maxGrowth,\n                       Math.max(minReduction, safety * Math.pow(error, exp)));",
      "right" : "final double factor =\n              Math.min(maxGrowth,\n                       Math.max(minReduction, safety * Math.pow(error, exp)));",
      "info" : "VariableDeclarationStatement[11648-11782]:VariableDeclarationStatement[11827-11961]"
    }, {
      "left" : "hNew = filterStep(stepSize * factor, forward, false);",
      "right" : "hNew = filterStep(stepSize * factor, forward, false);",
      "info" : "ExpressionStatement[11793-11846]:ExpressionStatement[11972-12025]"
    }, {
      "left" : "final double nextStep = stepStart + stepSize;",
      "right" : "final double nextStep = stepStart + stepSize;",
      "info" : "VariableDeclarationStatement[11909-11954]:VariableDeclarationStatement[12088-12133]"
    }, {
      "left" : "System.arraycopy(yTmp, 0, y, 0, y0.length);",
      "right" : "System.arraycopy(yTmp, 0, y, 0, y0.length);",
      "info" : "ExpressionStatement[11961-12004]:ExpressionStatement[12140-12183]"
    }, {
      "left" : "manager.stepAccepted(nextStep, y);",
      "right" : "manager.stepAccepted(nextStep, y);",
      "info" : "ExpressionStatement[12011-12045]:ExpressionStatement[12190-12224]"
    }, {
      "left" : "lastStep = manager.stop();",
      "right" : "lastStep = manager.stop();",
      "info" : "ExpressionStatement[12052-12078]:ExpressionStatement[12231-12257]"
    }, {
      "left" : "interpolator.storeTime(nextStep);",
      "right" : "interpolator.storeTime(nextStep);",
      "info" : "ExpressionStatement[12137-12170]:ExpressionStatement[12316-12349]"
    }, {
      "left" : "for (StepHandler handler : stepHandlers)",
      "right" : "for (StepHandler handler : stepHandlers)",
      "info" : "EnhancedForStatement[12177-12281]:EnhancedForStatement[12356-12460]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12218-12281]:Block[12397-12460]"
    }, {
      "left" : "handler.handleStep(interpolator, lastStep);",
      "right" : "handler.handleStep(interpolator, lastStep);",
      "info" : "ExpressionStatement[12230-12273]:ExpressionStatement[12409-12452]"
    }, {
      "left" : "stepStart = nextStep;",
      "right" : "stepStart = nextStep;",
      "info" : "ExpressionStatement[12288-12309]:ExpressionStatement[12467-12488]"
    }, {
      "left" : "if (fsal)",
      "right" : "if (fsal)",
      "info" : "IfStatement[12317-12462]:IfStatement[12496-12641]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12327-12462]:Block[12506-12641]"
    }, {
      "left" : "System.arraycopy(yDotK[stages - 1], 0, yDotK[0], 0, y0.length);",
      "right" : "System.arraycopy(yDotK[stages - 1], 0, yDotK[0], 0, y0.length);",
      "info" : "ExpressionStatement[12391-12454]:ExpressionStatement[12570-12633]"
    }, {
      "left" : "if (manager.reset(stepStart, y) && ! lastStep)",
      "right" : "if (manager.reset(stepStart, y) && ! lastStep)",
      "info" : "IfStatement[12470-12700]:IfStatement[12649-12879]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12517-12700]:Block[12696-12879]"
    }, {
      "left" : "computeDerivatives(stepStart, y, yDotK[0]);",
      "right" : "computeDerivatives(stepStart, y, yDotK[0]);",
      "info" : "ExpressionStatement[12649-12692]:ExpressionStatement[12828-12871]"
    }, {
      "left" : "if (! lastStep)",
      "right" : "if (! lastStep)",
      "info" : "IfStatement[12708-13497]:IfStatement[12887-13676]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12724-13497]:Block[12903-13676]"
    }, {
      "left" : "stepSize = filterStep(stepSize, forward, true);",
      "right" : "stepSize = filterStep(stepSize, forward, true);",
      "info" : "ExpressionStatement[12965-13012]:ExpressionStatement[13144-13191]"
    }, {
      "left" : "final double factor = Math.min(maxGrowth,\n                                       Math.max(minReduction,\n                                                safety * Math.pow(error, exp)));",
      "right" : "final double factor = Math.min(maxGrowth,\n                                       Math.max(minReduction,\n                                                safety * Math.pow(error, exp)));",
      "info" : "VariableDeclarationStatement[13064-13248]:VariableDeclarationStatement[13243-13427]"
    }, {
      "left" : "final double  scaledH    = stepSize * factor;",
      "right" : "final double  scaledH    = stepSize * factor;",
      "info" : "VariableDeclarationStatement[13257-13302]:VariableDeclarationStatement[13436-13481]"
    }, {
      "left" : "final double  nextT      = stepStart + scaledH;",
      "right" : "final double  nextT      = stepStart + scaledH;",
      "info" : "VariableDeclarationStatement[13311-13358]:VariableDeclarationStatement[13490-13537]"
    }, {
      "left" : "final boolean nextIsLast = forward ? (nextT >= t) : (nextT <= t);",
      "right" : "final boolean nextIsLast = forward ? (nextT >= t) : (nextT <= t);",
      "info" : "VariableDeclarationStatement[13367-13432]:VariableDeclarationStatement[13546-13611]"
    }, {
      "left" : "hNew = filterStep(scaledH, forward, nextIsLast);",
      "right" : "hNew = filterStep(scaledH, forward, nextIsLast);",
      "info" : "ExpressionStatement[13441-13489]:ExpressionStatement[13620-13668]"
    }, {
      "left" : "final double stopTime = stepStart;",
      "right" : "final double stopTime = stepStart;",
      "info" : "VariableDeclarationStatement[13510-13544]:VariableDeclarationStatement[13689-13723]"
    }, {
      "left" : "resetInternalState();",
      "right" : "resetInternalState();",
      "info" : "ExpressionStatement[13549-13570]:ExpressionStatement[13728-13749]"
    }, {
      "left" : "return stopTime;",
      "right" : "return stopTime;",
      "info" : "ReturnStatement[13575-13591]:ReturnStatement[13754-13770]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[13705-13711]:Modifier[13884-13890]"
    }, {
      "left" : "double",
      "right" : "double",
      "info" : "PrimitiveType[13712-13718]:PrimitiveType[13891-13897]"
    }, {
      "left" : "getMinReduction",
      "right" : "getMinReduction",
      "info" : "SimpleName[13719-13734]:SimpleName[13898-13913]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13737-13767]:Block[13916-13946]"
    }, {
      "left" : "return minReduction;",
      "right" : "return minReduction;",
      "info" : "ReturnStatement[13743-13763]:ReturnStatement[13922-13942]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[13888-13894]:Modifier[14067-14073]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[13895-13899]:PrimitiveType[14074-14078]"
    }, {
      "left" : "setMinReduction",
      "right" : "setMinReduction",
      "info" : "SimpleName[13900-13915]:SimpleName[14079-14094]"
    }, {
      "left" : "final double minReduction",
      "right" : "final double minReduction",
      "info" : "SingleVariableDeclaration[13916-13941]:SingleVariableDeclaration[14095-14120]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13943-13986]:Block[14122-14165]"
    }, {
      "left" : "this.minReduction = minReduction;",
      "right" : "this.minReduction = minReduction;",
      "info" : "ExpressionStatement[13949-13982]:ExpressionStatement[14128-14161]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[14089-14095]:Modifier[14268-14274]"
    }, {
      "left" : "double",
      "right" : "double",
      "info" : "PrimitiveType[14096-14102]:PrimitiveType[14275-14281]"
    }, {
      "left" : "getMaxGrowth",
      "right" : "getMaxGrowth",
      "info" : "SimpleName[14103-14115]:SimpleName[14282-14294]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14118-14145]:Block[14297-14324]"
    }, {
      "left" : "return maxGrowth;",
      "right" : "return maxGrowth;",
      "info" : "ReturnStatement[14124-14141]:ReturnStatement[14303-14320]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[14257-14263]:Modifier[14436-14442]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[14264-14268]:PrimitiveType[14443-14447]"
    }, {
      "left" : "setMaxGrowth",
      "right" : "setMaxGrowth",
      "info" : "SimpleName[14269-14281]:SimpleName[14448-14460]"
    }, {
      "left" : "final double maxGrowth",
      "right" : "final double maxGrowth",
      "info" : "SingleVariableDeclaration[14282-14304]:SingleVariableDeclaration[14461-14483]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14306-14343]:Block[14485-14522]"
    }, {
      "left" : "this.maxGrowth = maxGrowth;",
      "right" : "this.maxGrowth = maxGrowth;",
      "info" : "ExpressionStatement[14312-14339]:ExpressionStatement[14491-14518]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[14663-14672]:Modifier[14842-14851]"
    }, {
      "left" : "abstract",
      "right" : "abstract",
      "info" : "Modifier[14673-14681]:Modifier[14852-14860]"
    }, {
      "left" : "double",
      "right" : "double",
      "info" : "PrimitiveType[14682-14688]:PrimitiveType[14861-14867]"
    }, {
      "left" : "estimateError",
      "right" : "estimateError",
      "info" : "SimpleName[14689-14702]:SimpleName[14868-14881]"
    }, {
      "left" : "double[][] yDotK",
      "right" : "double[][] yDotK",
      "info" : "SingleVariableDeclaration[14703-14719]:SingleVariableDeclaration[14882-14898]"
    }, {
      "left" : "double[] y0",
      "right" : "double[] y0",
      "info" : "SingleVariableDeclaration[14763-14774]:SingleVariableDeclaration[14942-14953]"
    }, {
      "left" : "double[] y1",
      "right" : "double[] y1",
      "info" : "SingleVariableDeclaration[14776-14787]:SingleVariableDeclaration[14955-14966]"
    }, {
      "left" : "double h",
      "right" : "double h",
      "info" : "SingleVariableDeclaration[14831-14839]:SingleVariableDeclaration[15010-15018]"
    } ]
  },
  "interFileMappings" : { }
}