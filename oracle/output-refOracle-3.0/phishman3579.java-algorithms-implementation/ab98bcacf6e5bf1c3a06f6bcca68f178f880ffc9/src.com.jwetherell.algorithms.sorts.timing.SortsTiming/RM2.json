{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "SortsTiming",
      "right" : "SortsTiming",
      "info" : "TypeDeclaration[625-32325]:TypeDeclaration[625-15331]"
    }, {
      "left" : "private static final DecimalFormat FORMAT = new DecimalFormat(\"#.###\");",
      "right" : "private static final DecimalFormat FORMAT = new DecimalFormat(\"#.###\");",
      "info" : "FieldDeclaration[657-728]:FieldDeclaration[657-728]"
    }, {
      "left" : "private static final int SIZE = 1024*20;",
      "right" : "private static final int SIZE = 1024*100;",
      "info" : "FieldDeclaration[733-773]:FieldDeclaration[733-774]"
    }, {
      "left" : "private static final boolean showResult = false;",
      "right" : "private static final boolean showResult = false;",
      "info" : "FieldDeclaration[779-827]:FieldDeclaration[779-827]"
    }, {
      "left" : "private static final boolean checkResults = true;",
      "right" : "private static final boolean checkResults = true;",
      "info" : "FieldDeclaration[888-937]:FieldDeclaration[832-881]"
    }, {
      "left" : "private static int insertionCount = 0;",
      "right" : "private static int insertionCount = 0;",
      "info" : "FieldDeclaration[943-981]:FieldDeclaration[887-925]"
    }, {
      "left" : "private static final double[] insertionResults = new double[1 * 3];",
      "right" : "private static double[] insertionResults = null;",
      "info" : "FieldDeclaration[986-1053]:FieldDeclaration[930-978]"
    }, {
      "left" : "private static int bubbleCount = 0;",
      "right" : "private static int bubbleCount = 0;",
      "info" : "FieldDeclaration[1058-1093]:FieldDeclaration[983-1018]"
    }, {
      "left" : "private static final double[] bubbleResults = new double[1 * 3];",
      "right" : "private static double[] bubbleResults = null;",
      "info" : "FieldDeclaration[1098-1162]:FieldDeclaration[1023-1068]"
    }, {
      "left" : "private static int shellCount = 0;",
      "right" : "private static int shellCount = 0;",
      "info" : "FieldDeclaration[1167-1201]:FieldDeclaration[1073-1107]"
    }, {
      "left" : "private static final double[] shellResults = new double[1 * 3];",
      "right" : "private static double[] shellResults = null;",
      "info" : "FieldDeclaration[1206-1269]:FieldDeclaration[1112-1156]"
    }, {
      "left" : "private static int quickCount = 0;",
      "right" : "private static int quickCount = 0;",
      "info" : "FieldDeclaration[1522-1556]:FieldDeclaration[1249-1283]"
    }, {
      "left" : "private static final double[] quickResults = new double[3 * 3];",
      "right" : "private static double[] quickResults = null;",
      "info" : "FieldDeclaration[1561-1624]:FieldDeclaration[1288-1332]"
    }, {
      "left" : "private static int heapCount = 0;",
      "right" : "private static int heapCount = 0;",
      "info" : "FieldDeclaration[1629-1662]:FieldDeclaration[1337-1370]"
    }, {
      "left" : "private static final double[] heapResults = new double[1 * 3];",
      "right" : "private static double[] heapResults = null;",
      "info" : "FieldDeclaration[1667-1729]:FieldDeclaration[1375-1418]"
    }, {
      "left" : "private static int countingCount = 0;",
      "right" : "private static int countingCount = 0;",
      "info" : "FieldDeclaration[1734-1771]:FieldDeclaration[1423-1460]"
    }, {
      "left" : "private static final double[] countingResults = new double[1 * 3];",
      "right" : "private static double[] countingResults = null;",
      "info" : "FieldDeclaration[1776-1842]:FieldDeclaration[1465-1512]"
    }, {
      "left" : "private static int radixCount = 0;",
      "right" : "private static int radixCount = 0;",
      "info" : "FieldDeclaration[1847-1881]:FieldDeclaration[1517-1551]"
    }, {
      "left" : "private static final double[] radixResults = new double[1 * 3];",
      "right" : "private static double[] radixResults = null;",
      "info" : "FieldDeclaration[1886-1949]:FieldDeclaration[1556-1600]"
    }, {
      "left" : "private static int americanFlagCount = 0;",
      "right" : "private static int americanFlagCount = 0;",
      "info" : "FieldDeclaration[1954-1995]:FieldDeclaration[1605-1646]"
    }, {
      "left" : "private static final double[] americanFlagResults = new double[1 * 3];",
      "right" : "private static double[] americanFlagResults = null;",
      "info" : "FieldDeclaration[2000-2070]:FieldDeclaration[1651-1702]"
    }, {
      "left" : "private static Integer[] unsorted = null;",
      "right" : "private static Integer[] unsorted = null;",
      "info" : "FieldDeclaration[2618-2659]:FieldDeclaration[1708-1749]"
    }, {
      "left" : "private static Integer[] sorted = null;",
      "right" : "private static Integer[] sorted = null;",
      "info" : "FieldDeclaration[2664-2703]:FieldDeclaration[1754-1793]"
    }, {
      "left" : "private static Integer[] reverse = null;",
      "right" : "private static Integer[] reverse = null;",
      "info" : "FieldDeclaration[2708-2748]:FieldDeclaration[1798-1838]"
    }, {
      "left" : "public static void main(String[] args)",
      "right" : "public static void main(String[] args)",
      "info" : "MethodDeclaration[2754-27363]:MethodDeclaration[1844-4669]"
    }, {
      "left" : "private static final void showComparison()",
      "right" : "private static final void showComparison()",
      "info" : "MethodDeclaration[27369-30418]:MethodDeclaration[10338-13424]"
    }, {
      "left" : "private static final void showResult(Integer[] u, Integer[] r)",
      "right" : "private static final void showResult(Integer[] u, Integer[] r)",
      "info" : "MethodDeclaration[30424-30626]:MethodDeclaration[13430-13632]"
    }, {
      "left" : "private static final boolean check(Integer[] array)",
      "right" : "private static final boolean check(Integer[] array)",
      "info" : "MethodDeclaration[30632-30842]:MethodDeclaration[13638-13848]"
    }, {
      "left" : "public static final String print(Integer[] array)",
      "right" : "public static final String print(Integer[] array)",
      "info" : "MethodDeclaration[30848-30951]:MethodDeclaration[13854-13957]"
    }, {
      "left" : "public static final String print(Integer[] array, int start, int length)",
      "right" : "public static final String print(Integer[] array, int start, int length)",
      "info" : "MethodDeclaration[30957-31300]:MethodDeclaration[13963-14306]"
    }, {
      "left" : "public static final String printWithPivot(Integer[] array, int pivotIndex, int start, int length)",
      "right" : "public static final String printWithPivot(Integer[] array, int pivotIndex, int start, int length)",
      "info" : "MethodDeclaration[31306-31776]:MethodDeclaration[14312-14782]"
    }, {
      "left" : "private static final void putOutTheGarbage()",
      "right" : "private static final void putOutTheGarbage()",
      "info" : "MethodDeclaration[31782-31912]:MethodDeclaration[14788-14918]"
    }, {
      "left" : "private static final long fSLEEP_INTERVAL = 100;",
      "right" : "private static final long fSLEEP_INTERVAL = 100;",
      "info" : "FieldDeclaration[31918-31966]:FieldDeclaration[14924-14972]"
    }, {
      "left" : "private static final void collectGarbage()",
      "right" : "private static final void collectGarbage()",
      "info" : "MethodDeclaration[31972-32323]:MethodDeclaration[14978-15329]"
    } ],
    "mappings" : [
 {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[625-631]:Modifier[625-631]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[632-637]:TYPE_DECLARATION_KIND[632-637]"
    }, {
      "left" : "SortsTiming",
      "right" : "SortsTiming",
      "info" : "SimpleName[638-649]:SimpleName[638-649]"
    }, {
      "left" : "20",
      "right" : "100",
      "info" : "NumberLiteral[770-772]:NumberLiteral[770-773]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[2754-2760]:Modifier[1844-1850]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[2761-2767]:Modifier[1851-1857]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[2768-2772]:PrimitiveType[1858-1862]"
    }, {
      "left" : "main",
      "right" : "main",
      "info" : "SimpleName[2773-2777]:SimpleName[1863-1867]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2793-27363]:Block[1883-4669]"
    }, {
      "left" : "System.out.println(\"Generating random array.\");",
      "right" : "System.out.println(\"Generating random array.\");",
      "info" : "ExpressionStatement[2803-2850]:ExpressionStatement[1893-1940]"
    }, {
      "left" : "Random random = new Random();",
      "right" : "Random random = new Random();",
      "info" : "VariableDeclarationStatement[2859-2888]:VariableDeclarationStatement[1949-1978]"
    }, {
      "left" : "unsorted = new Integer[SIZE];",
      "right" : "unsorted = new Integer[SIZE];",
      "info" : "ExpressionStatement[2897-2926]:ExpressionStatement[1987-2016]"
    }, {
      "left" : "int i = 0;",
      "right" : "int i = 0;",
      "info" : "VariableDeclarationStatement[2935-2945]:VariableDeclarationStatement[2025-2035]"
    }, {
      "left" : "while (i < unsorted.length)",
      "right" : "while (i < unsorted.length)",
      "info" : "WhileStatement[2954-3082]:WhileStatement[2044-2172]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2982-3082]:Block[2072-2172]"
    }, {
      "left" : "int j = random.nextInt(unsorted.length * 10);",
      "right" : "int j = random.nextInt(unsorted.length * 10);",
      "info" : "VariableDeclarationStatement[2996-3041]:VariableDeclarationStatement[2086-2131]"
    }, {
      "left" : "unsorted[i++] = j;",
      "right" : "unsorted[i++] = j;",
      "info" : "ExpressionStatement[3054-3072]:ExpressionStatement[2144-2162]"
    }, {
      "left" : "System.out.println(\"Generated random array.\");",
      "right" : "System.out.println(\"Generated random array.\");",
      "info" : "ExpressionStatement[3091-3137]:ExpressionStatement[2181-2227]"
    }, {
      "left" : "System.out.println(\"Generating sorted array.\");",
      "right" : "System.out.println(\"Generating sorted array.\");",
      "info" : "ExpressionStatement[3147-3194]:ExpressionStatement[2237-2284]"
    }, {
      "left" : "sorted = new Integer[SIZE];",
      "right" : "sorted = new Integer[SIZE];",
      "info" : "ExpressionStatement[3203-3230]:ExpressionStatement[2293-2320]"
    }, {
      "left" : "for (i = 0; i < sorted.length; i++)",
      "right" : "for (i = 0; i < sorted.length; i++)",
      "info" : "ForStatement[3239-3313]:ForStatement[2329-2403]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3275-3313]:Block[2365-2403]"
    }, {
      "left" : "sorted[i] = i;",
      "right" : "sorted[i] = i;",
      "info" : "ExpressionStatement[3289-3303]:ExpressionStatement[2379-2393]"
    }, {
      "left" : "System.out.println(\"Generated sorted array.\");",
      "right" : "System.out.println(\"Generated sorted array.\");",
      "info" : "ExpressionStatement[3322-3368]:ExpressionStatement[2412-2458]"
    }, {
      "left" : "System.out.println(\"Generating reverse sorted array.\");",
      "right" : "System.out.println(\"Generating reverse sorted array.\");",
      "info" : "ExpressionStatement[3378-3433]:ExpressionStatement[2468-2523]"
    }, {
      "left" : "reverse = new Integer[SIZE];",
      "right" : "reverse = new Integer[SIZE];",
      "info" : "ExpressionStatement[3442-3470]:ExpressionStatement[2532-2560]"
    }, {
      "left" : "for (i = (reverse.length - 1); i >= 0; i--)",
      "right" : "for (i = (reverse.length - 1); i >= 0; i--)",
      "info" : "ForStatement[3479-3575]:ForStatement[2569-2665]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3523-3575]:Block[2613-2665]"
    }, {
      "left" : "reverse[i] = (SIZE - 1) - i;",
      "right" : "reverse[i] = (SIZE - 1) - i;",
      "info" : "ExpressionStatement[3537-3565]:ExpressionStatement[2627-2655]"
    }, {
      "left" : "System.out.println(\"Generated reverse sorted array.\");",
      "right" : "System.out.println(\"Generated reverse sorted array.\");",
      "info" : "ExpressionStatement[3584-3638]:ExpressionStatement[2674-2728]"
    }, {
      "left" : "System.out.println();",
      "right" : "System.out.println();",
      "info" : "ExpressionStatement[3647-3668]:ExpressionStatement[2737-2758]"
    }, {
      "left" : "System.out.flush();",
      "right" : "System.out.flush();",
      "info" : "ExpressionStatement[3677-3696]:ExpressionStatement[2767-2786]"
    }, {
      "left" : "System.out.println(\"Starting sorts...\");",
      "right" : "System.out.println(\"Starting sorts...\");",
      "info" : "ExpressionStatement[3706-3746]:ExpressionStatement[2796-2836]"
    }, {
      "left" : "System.out.println();",
      "right" : "System.out.println();",
      "info" : "ExpressionStatement[3755-3776]:ExpressionStatement[2845-2866]"
    }, {
      "left" : "System.out.flush();",
      "right" : "System.out.flush();",
      "info" : "ExpressionStatement[3785-3804]:ExpressionStatement[2875-2894]"
    }, {
      "left" : "long bInsertion = System.nanoTime();",
      "right" : "long bInsertion = System.nanoTime();",
      "info" : "VariableDeclarationStatement[3876-3912]:VariableDeclarationStatement[4804-4840]"
    }, {
      "left" : "Integer[] result = InsertionSort.sort(unsorted.clone());",
      "right" : "Integer[] result = testable.sort(unsorted.clone());",
      "info" : "VariableDeclarationStatement[3925-3981]:VariableDeclarationStatement[4849-4900]"
    }, {
      "left" : "InsertionSort",
      "right" : "testable",
      "info" : "SimpleName[3944-3957]:SimpleName[4868-4876]"
    }, {
      "left" : "if (checkResults && !check(result))",
      "right" : "if (checkResults && !check(result))",
      "info" : "IfStatement[3994-4090]:IfStatement[4909-5007]"
    }, {
      "left" : "System.err.println(\"InsertionSort failed.\");",
      "right" : "System.err.println(testable.getName()+\"InsertionSort.\");",
      "info" : "ExpressionStatement[4046-4090]:ExpressionStatement[6016-6072]"
    }, {
      "left" : "long aInsertion = System.nanoTime();",
      "right" : "long aInsertion = System.nanoTime();",
      "info" : "VariableDeclarationStatement[4103-4139]:VariableDeclarationStatement[5016-5052]"
    }, {
      "left" : "double diff = (aInsertion - bInsertion) / 1000000d / 1000d;",
      "right" : "double diff = (aInsertion - bInsertion) / 1000000d / 1000d;",
      "info" : "VariableDeclarationStatement[4152-4211]:VariableDeclarationStatement[5061-5120]"
    }, {
      "left" : "System.out.println(\"Random: InsertionSort=\" + FORMAT.format(diff) + \" secs\");",
      "right" : "System.out.println(\"Random: \"+testable.getName()+\"=\" + FORMAT.format(diff) + \" secs\");",
      "info" : "ExpressionStatement[4224-4301]:ExpressionStatement[5129-5215]"
    }, {
      "left" : "\"Random: InsertionSort=\"",
      "right" : "\"Random: \"",
      "info" : "StringLiteral[4243-4267]:StringLiteral[5148-5158]"
    }, {
      "left" : "if (showResult)",
      "right" : "if (showResult)",
      "info" : "IfStatement[4314-4375]:IfStatement[5224-5281]"
    }, {
      "left" : "showResult(unsorted, result);",
      "right" : "showResult(unsorted, result);",
      "info" : "ExpressionStatement[4346-4375]:ExpressionStatement[5252-5281]"
    }, {
      "left" : "insertionResults[insertionCount++] = diff;",
      "right" : "bubbleCount = runTest(new Bubble(), unsorted, sorted, bubbleResults, bubbleCount);",
      "info" : "ExpressionStatement[4424-4466]:ExpressionStatement[3123-3205]"
    }, {
      "left" : "diff",
      "right" : "bubbleCount",
      "info" : "SimpleName[4461-4465]:SimpleName[3123-3134]"
    }, {
      "left" : "putOutTheGarbage();",
      "right" : "putOutTheGarbage();",
      "info" : "ExpressionStatement[4479-4498]:ExpressionStatement[5323-5342]"
    }, {
      "left" : "bInsertion = System.nanoTime();",
      "right" : "bInsertion = System.nanoTime();",
      "info" : "ExpressionStatement[4512-4543]:ExpressionStatement[5352-5383]"
    }, {
      "left" : "result = InsertionSort.sort(sorted.clone());",
      "right" : "result = InsertionSort.sort(sorted.clone());",
      "info" : "ExpressionStatement[4556-4600]:ExpressionStatement[5392-5436]"
    }, {
      "left" : "if (checkResults && !check(result))",
      "right" : "if (checkResults && !check(result))",
      "info" : "IfStatement[4613-4709]:IfStatement[5445-5543]"
    }, {
      "left" : "System.err.println(\"InsertionSort failed.\");",
      "right" : "System.err.println(testable.getName()+\"InsertionSort.\");",
      "info" : "ExpressionStatement[4665-4709]:ExpressionStatement[6016-6072]"
    }, {
      "left" : "aInsertion = System.nanoTime();",
      "right" : "aInsertion = System.nanoTime();",
      "info" : "ExpressionStatement[4722-4753]:ExpressionStatement[5552-5583]"
    }, {
      "left" : "diff = (aInsertion - bInsertion) / 1000000d / 1000d;",
      "right" : "diff = (aInsertion - bInsertion) / 1000000d / 1000d;",
      "info" : "ExpressionStatement[4766-4818]:ExpressionStatement[5592-5644]"
    }, {
      "left" : "System.out.println(\"Sorted: InsertionSort=\" + FORMAT.format(diff) + \" secs\");",
      "right" : "System.out.println(\"Sorted: \"+testable.getName()+\"=\" + FORMAT.format(diff) + \" secs\");",
      "info" : "ExpressionStatement[4831-4908]:ExpressionStatement[5653-5739]"
    }, {
      "left" : "\"Sorted: InsertionSort=\"",
      "right" : "\"Sorted: \"",
      "info" : "StringLiteral[4850-4874]:StringLiteral[5672-5682]"
    }, {
      "left" : "if (showResult)",
      "right" : "if (showResult)",
      "info" : "IfStatement[4921-4980]:IfStatement[5748-5803]"
    }, {
      "left" : "showResult(sorted, result);",
      "right" : "showResult(sorted, result);",
      "info" : "ExpressionStatement[4953-4980]:ExpressionStatement[5776-5803]"
    }, {
      "left" : "insertionResults[insertionCount++] = diff;",
      "right" : "quickCount = runTest(new QuickFirst(), unsorted, sorted, quickResults, quickCount);",
      "info" : "ExpressionStatement[5029-5071]:ExpressionStatement[3699-3782]"
    }, {
      "left" : "diff",
      "right" : "quickCount",
      "info" : "SimpleName[5066-5070]:SimpleName[3699-3709]"
    }, {
      "left" : "putOutTheGarbage();",
      "right" : "putOutTheGarbage();",
      "info" : "ExpressionStatement[5084-5103]:ExpressionStatement[5845-5864]"
    }, {
      "left" : "bInsertion = System.nanoTime();",
      "right" : "bInsertion = System.nanoTime();",
      "info" : "ExpressionStatement[5117-5148]:ExpressionStatement[5874-5905]"
    }, {
      "left" : "result = InsertionSort.sort(reverse.clone());",
      "right" : "result = InsertionSort.sort(reverse.clone());",
      "info" : "ExpressionStatement[5161-5206]:ExpressionStatement[5914-5959]"
    }, {
      "left" : "if (checkResults && !check(result))",
      "right" : "if (checkResults && !check(result))",
      "info" : "IfStatement[5219-5315]:IfStatement[5968-6072]"
    }, {
      "left" : "System.err.println(\"InsertionSort failed.\");",
      "right" : "System.err.println(testable.getName()+\"InsertionSort.\");",
      "info" : "ExpressionStatement[5271-5315]:ExpressionStatement[6016-6072]"
    }, {
      "left" : "aInsertion = System.nanoTime();",
      "right" : "aInsertion = System.nanoTime();",
      "info" : "ExpressionStatement[5328-5359]:ExpressionStatement[6081-6112]"
    }, {
      "left" : "diff = (aInsertion - bInsertion) / 1000000d / 1000d;",
      "right" : "diff = (aInsertion - bInsertion) / 1000000d / 1000d;",
      "info" : "ExpressionStatement[5372-5424]:ExpressionStatement[6121-6173]"
    }, {
      "left" : "System.out.println(\"Reverse sorted: InsertionSort=\" + FORMAT.format(diff) + \" secs\");",
      "right" : "System.out.println(\"Reverse sorted: \"+testable.getName()+\"=\" + FORMAT.format(diff) + \" secs\");",
      "info" : "ExpressionStatement[5437-5522]:ExpressionStatement[6182-6276]"
    }, {
      "left" : "\"Reverse sorted: InsertionSort=\"",
      "right" : "\"Reverse sorted: \"",
      "info" : "StringLiteral[5456-5488]:StringLiteral[6201-6219]"
    }, {
      "left" : "if (showResult)",
      "right" : "if (showResult)",
      "info" : "IfStatement[5535-5595]:IfStatement[6285-6341]"
    }, {
      "left" : "showResult(reverse, result);",
      "right" : "showResult(reverse, result);",
      "info" : "ExpressionStatement[5567-5595]:ExpressionStatement[6313-6341]"
    }, {
      "left" : "insertionResults[insertionCount++] = diff;",
      "right" : "quickCount = runTest(new QuickMiddle(), unsorted, sorted, quickResults, quickCount);",
      "info" : "ExpressionStatement[5644-5686]:ExpressionStatement[3791-3875]"
    }, {
      "left" : "diff",
      "right" : "quickCount",
      "info" : "SimpleName[5681-5685]:SimpleName[3791-3801]"
    }, {
      "left" : "putOutTheGarbage();",
      "right" : "putOutTheGarbage();",
      "info" : "ExpressionStatement[5699-5718]:ExpressionStatement[6383-6402]"
    }, {
      "left" : "System.out.println();",
      "right" : "System.out.println();",
      "info" : "ExpressionStatement[5732-5753]:ExpressionStatement[6412-6433]"
    }, {
      "left" : "System.out.flush();",
      "right" : "System.out.flush();",
      "info" : "ExpressionStatement[5766-5785]:ExpressionStatement[6442-6461]"
    }, {
      "left" : "long bBubble = System.nanoTime();",
      "right" : "long bInsertion = System.nanoTime();",
      "info" : "VariableDeclarationStatement[5862-5895]:VariableDeclarationStatement[4804-4840]"
    }, {
      "left" : "bBubble",
      "right" : "bInsertion",
      "info" : "SimpleName[5867-5874]:SimpleName[4809-4819]"
    }, {
      "left" : "Integer[] result = BubbleSort.sort(unsorted.clone());",
      "right" : "Integer[] result = testable.sort(unsorted.clone());",
      "info" : "VariableDeclarationStatement[5908-5961]:VariableDeclarationStatement[4849-4900]"
    }, {
      "left" : "BubbleSort",
      "right" : "testable",
      "info" : "SimpleName[5927-5937]:SimpleName[4868-4876]"
    }, {
      "left" : "if (checkResults && !check(result))",
      "right" : "if (checkResults && !check(result))",
      "info" : "IfStatement[5974-6067]:IfStatement[4909-5007]"
    }, {
      "left" : "System.err.println(\"BubbleSort failed.\");",
      "right" : "System.err.println(testable.getName()+\" failed.\");",
      "info" : "ExpressionStatement[6026-6067]:ExpressionStatement[4957-5007]"
    }, {
      "left" : "long aBubble = System.nanoTime();",
      "right" : "long aInsertion = System.nanoTime();",
      "info" : "VariableDeclarationStatement[6080-6113]:VariableDeclarationStatement[5016-5052]"
    }, {
      "left" : "aBubble",
      "right" : "aInsertion",
      "info" : "SimpleName[6085-6092]:SimpleName[5021-5031]"
    }, {
      "left" : "double diff = (aBubble - bBubble) / 1000000d / 1000d;",
      "right" : "double diff = (aInsertion - bInsertion) / 1000000d / 1000d;",
      "info" : "VariableDeclarationStatement[6126-6179]:VariableDeclarationStatement[5061-5120]"
    }, {
      "left" : "aBubble",
      "right" : "aInsertion",
      "info" : "SimpleName[6141-6148]:SimpleName[5076-5086]"
    }, {
      "left" : "bBubble",
      "right" : "bInsertion",
      "info" : "SimpleName[6151-6158]:SimpleName[5089-5099]"
    }, {
      "left" : "System.out.println(\"Random: BubbleSort=\" + FORMAT.format(diff) + \" secs\");",
      "right" : "System.out.println(\"Random: \"+testable.getName()+\"=\" + FORMAT.format(diff) + \" secs\");",
      "info" : "ExpressionStatement[6192-6266]:ExpressionStatement[5129-5215]"
    }, {
      "left" : "\"Random: BubbleSort=\"",
      "right" : "\"Random: \"",
      "info" : "StringLiteral[6211-6232]:StringLiteral[5148-5158]"
    }, {
      "left" : "if (showResult)",
      "right" : "if (showResult)",
      "info" : "IfStatement[6279-6340]:IfStatement[5224-5281]"
    }, {
      "left" : "showResult(unsorted, result);",
      "right" : "showResult(unsorted, result);",
      "info" : "ExpressionStatement[6311-6340]:ExpressionStatement[5252-5281]"
    }, {
      "left" : "bubbleResults",
      "right" : "results",
      "info" : "SimpleName[6389-6402]:SimpleName[5812-5819]"
    }, {
      "left" : "bubbleResults[bubbleCount++] = diff;",
      "right" : "results[count++] = diff;",
      "info" : "ExpressionStatement[6389-6425]:ExpressionStatement[5812-5836]"
    }, {
      "left" : "bubbleCount",
      "right" : "count",
      "info" : "SimpleName[6403-6414]:SimpleName[5820-5825]"
    }, {
      "left" : "putOutTheGarbage();",
      "right" : "putOutTheGarbage();",
      "info" : "ExpressionStatement[6438-6457]:ExpressionStatement[5323-5342]"
    }, {
      "left" : "bBubble",
      "right" : "bInsertion",
      "info" : "SimpleName[6471-6478]:SimpleName[5352-5362]"
    }, {
      "left" : "bBubble = System.nanoTime();",
      "right" : "bInsertion = System.nanoTime();",
      "info" : "ExpressionStatement[6471-6499]:ExpressionStatement[5352-5383]"
    }, {
      "left" : "result = BubbleSort.sort(sorted.clone());",
      "right" : "result = InsertionSort.sort(sorted.clone());",
      "info" : "ExpressionStatement[6512-6553]:ExpressionStatement[5392-5436]"
    }, {
      "left" : "BubbleSort",
      "right" : "InsertionSort",
      "info" : "SimpleName[6521-6531]:SimpleName[5401-5414]"
    }, {
      "left" : "if (checkResults && !check(result))",
      "right" : "if (checkResults && !check(result))",
      "info" : "IfStatement[6566-6659]:IfStatement[5445-5543]"
    }, {
      "left" : "System.err.println(\"BubbleSort failed.\");",
      "right" : "System.err.println(testable.getName()+\" failed.\");",
      "info" : "ExpressionStatement[6618-6659]:ExpressionStatement[5493-5543]"
    }, {
      "left" : "aBubble",
      "right" : "aInsertion",
      "info" : "SimpleName[6672-6679]:SimpleName[5552-5562]"
    }, {
      "left" : "aBubble = System.nanoTime();",
      "right" : "aInsertion = System.nanoTime();",
      "info" : "ExpressionStatement[6672-6700]:ExpressionStatement[5552-5583]"
    }, {
      "left" : "diff = (aBubble - bBubble) / 1000000d / 1000d;",
      "right" : "diff = (aInsertion - bInsertion) / 1000000d / 1000d;",
      "info" : "ExpressionStatement[6713-6759]:ExpressionStatement[5592-5644]"
    }, {
      "left" : "aBubble",
      "right" : "aInsertion",
      "info" : "SimpleName[6721-6728]:SimpleName[5600-5610]"
    }, {
      "left" : "bBubble",
      "right" : "bInsertion",
      "info" : "SimpleName[6731-6738]:SimpleName[5613-5623]"
    }, {
      "left" : "System.out.println(\"Sorted: BubbleSort=\" + FORMAT.format(diff) + \" secs\");",
      "right" : "System.out.println(\"Sorted: \"+testable.getName()+\"=\" + FORMAT.format(diff) + \" secs\");",
      "info" : "ExpressionStatement[6772-6846]:ExpressionStatement[5653-5739]"
    }, {
      "left" : "\"Sorted: BubbleSort=\"",
      "right" : "\"Sorted: \"",
      "info" : "StringLiteral[6791-6812]:StringLiteral[5672-5682]"
    }, {
      "left" : "if (showResult)",
      "right" : "if (showResult)",
      "info" : "IfStatement[6859-6918]:IfStatement[5748-5803]"
    }, {
      "left" : "showResult(sorted, result);",
      "right" : "showResult(sorted, result);",
      "info" : "ExpressionStatement[6891-6918]:ExpressionStatement[5776-5803]"
    }, {
      "left" : "bubbleResults",
      "right" : "results",
      "info" : "SimpleName[6967-6980]:SimpleName[6350-6357]"
    }, {
      "left" : "bubbleResults[bubbleCount++] = diff;",
      "right" : "results[count++] = diff;",
      "info" : "ExpressionStatement[6967-7003]:ExpressionStatement[6350-6374]"
    }, {
      "left" : "bubbleCount",
      "right" : "count",
      "info" : "SimpleName[6981-6992]:SimpleName[6358-6363]"
    }, {
      "left" : "putOutTheGarbage();",
      "right" : "putOutTheGarbage();",
      "info" : "ExpressionStatement[7016-7035]:ExpressionStatement[5845-5864]"
    }, {
      "left" : "bBubble",
      "right" : "bInsertion",
      "info" : "SimpleName[7049-7056]:SimpleName[5874-5884]"
    }, {
      "left" : "bBubble = System.nanoTime();",
      "right" : "bInsertion = System.nanoTime();",
      "info" : "ExpressionStatement[7049-7077]:ExpressionStatement[5874-5905]"
    }, {
      "left" : "result = BubbleSort.sort(reverse.clone());",
      "right" : "result = InsertionSort.sort(reverse.clone());",
      "info" : "ExpressionStatement[7090-7132]:ExpressionStatement[5914-5959]"
    }, {
      "left" : "BubbleSort",
      "right" : "InsertionSort",
      "info" : "SimpleName[7099-7109]:SimpleName[5923-5936]"
    }, {
      "left" : "if (checkResults && !check(result))",
      "right" : "if (checkResults && !check(result))",
      "info" : "IfStatement[7145-7238]:IfStatement[5968-6072]"
    }, {
      "left" : "System.err.println(\"BubbleSort failed.\");",
      "right" : "System.err.println(testable.getName()+\" failed.\");",
      "info" : "ExpressionStatement[7197-7238]:ExpressionStatement[4957-5007]"
    }, {
      "left" : "aBubble",
      "right" : "aInsertion",
      "info" : "SimpleName[7251-7258]:SimpleName[6081-6091]"
    }, {
      "left" : "aBubble = System.nanoTime();",
      "right" : "aInsertion = System.nanoTime();",
      "info" : "ExpressionStatement[7251-7279]:ExpressionStatement[6081-6112]"
    }, {
      "left" : "diff = (aBubble - bBubble) / 1000000d / 1000d;",
      "right" : "diff = (aInsertion - bInsertion) / 1000000d / 1000d;",
      "info" : "ExpressionStatement[7292-7338]:ExpressionStatement[6121-6173]"
    }, {
      "left" : "aBubble",
      "right" : "aInsertion",
      "info" : "SimpleName[7300-7307]:SimpleName[6129-6139]"
    }, {
      "left" : "bBubble",
      "right" : "bInsertion",
      "info" : "SimpleName[7310-7317]:SimpleName[6142-6152]"
    }, {
      "left" : "System.out.println(\"Reverse sorted: BubbleSort=\" + FORMAT.format(diff) + \" secs\");",
      "right" : "System.out.println(\"Reverse sorted: \"+testable.getName()+\"=\" + FORMAT.format(diff) + \" secs\");",
      "info" : "ExpressionStatement[7351-7433]:ExpressionStatement[6182-6276]"
    }, {
      "left" : "\"Reverse sorted: BubbleSort=\"",
      "right" : "\"Reverse sorted: \"",
      "info" : "StringLiteral[7370-7399]:StringLiteral[6201-6219]"
    }, {
      "left" : "if (showResult)",
      "right" : "if (showResult)",
      "info" : "IfStatement[7446-7506]:IfStatement[6285-6341]"
    }, {
      "left" : "showResult(reverse, result);",
      "right" : "showResult(reverse, result);",
      "info" : "ExpressionStatement[7478-7506]:ExpressionStatement[6313-6341]"
    }, {
      "left" : "bubbleResults",
      "right" : "results",
      "info" : "SimpleName[7555-7568]:SimpleName[5812-5819]"
    }, {
      "left" : "bubbleResults[bubbleCount++] = diff;",
      "right" : "results[count++] = diff;",
      "info" : "ExpressionStatement[7555-7591]:ExpressionStatement[5812-5836]"
    }, {
      "left" : "bubbleCount",
      "right" : "count",
      "info" : "SimpleName[7569-7580]:SimpleName[5820-5825]"
    }, {
      "left" : "putOutTheGarbage();",
      "right" : "putOutTheGarbage();",
      "info" : "ExpressionStatement[7604-7623]:ExpressionStatement[6383-6402]"
    }, {
      "left" : "System.out.println();",
      "right" : "System.out.println();",
      "info" : "ExpressionStatement[7637-7658]:ExpressionStatement[6412-6433]"
    }, {
      "left" : "System.out.flush();",
      "right" : "System.out.flush();",
      "info" : "ExpressionStatement[7671-7690]:ExpressionStatement[6442-6461]"
    }, {
      "left" : "long bShell = System.nanoTime();",
      "right" : "long bInsertion = System.nanoTime();",
      "info" : "VariableDeclarationStatement[7821-7853]:VariableDeclarationStatement[4804-4840]"
    }, {
      "left" : "bShell",
      "right" : "bInsertion",
      "info" : "SimpleName[7826-7832]:SimpleName[4809-4819]"
    }, {
      "left" : "if (checkResults && !check(result))",
      "right" : "if (checkResults && !check(result))",
      "info" : "IfStatement[7939-8031]:IfStatement[4909-5007]"
    }, {
      "left" : "System.err.println(\"ShellSort failed.\");",
      "right" : "System.err.println(testable.getName()+\" failed.\");",
      "info" : "ExpressionStatement[7991-8031]:ExpressionStatement[5493-5543]"
    }, {
      "left" : "long aShell = System.nanoTime();",
      "right" : "long aInsertion = System.nanoTime();",
      "info" : "VariableDeclarationStatement[8044-8076]:VariableDeclarationStatement[5016-5052]"
    }, {
      "left" : "aShell",
      "right" : "aInsertion",
      "info" : "SimpleName[8049-8055]:SimpleName[5021-5031]"
    }, {
      "left" : "double diff = (aShell - bShell) / 1000000d / 1000d;",
      "right" : "double diff = (aInsertion - bInsertion) / 1000000d / 1000d;",
      "info" : "VariableDeclarationStatement[8089-8140]:VariableDeclarationStatement[5061-5120]"
    }, {
      "left" : "aShell",
      "right" : "aInsertion",
      "info" : "SimpleName[8104-8110]:SimpleName[5076-5086]"
    }, {
      "left" : "bShell",
      "right" : "bInsertion",
      "info" : "SimpleName[8113-8119]:SimpleName[5089-5099]"
    }, {
      "left" : "System.out.println(\"Random: ShellSort=\" + FORMAT.format(diff) + \" secs\");",
      "right" : "System.out.println(\"Random: \"+testable.getName()+\"=\" + FORMAT.format(diff) + \" secs\");",
      "info" : "ExpressionStatement[8153-8226]:ExpressionStatement[5129-5215]"
    }, {
      "left" : "\"Random: ShellSort=\"",
      "right" : "\"Random: \"",
      "info" : "StringLiteral[8172-8192]:StringLiteral[5148-5158]"
    }, {
      "left" : "if (showResult)",
      "right" : "if (showResult)",
      "info" : "IfStatement[8239-8300]:IfStatement[5224-5281]"
    }, {
      "left" : "showResult(unsorted, result);",
      "right" : "showResult(unsorted, result);",
      "info" : "ExpressionStatement[8271-8300]:ExpressionStatement[5252-5281]"
    }, {
      "left" : "shellResults",
      "right" : "results",
      "info" : "SimpleName[8349-8361]:SimpleName[5290-5297]"
    }, {
      "left" : "shellResults[shellCount++] = diff;",
      "right" : "results[count++] = diff;",
      "info" : "ExpressionStatement[8349-8383]:ExpressionStatement[5290-5314]"
    }, {
      "left" : "shellCount",
      "right" : "count",
      "info" : "SimpleName[8362-8372]:SimpleName[5298-5303]"
    }, {
      "left" : "putOutTheGarbage();",
      "right" : "putOutTheGarbage();",
      "info" : "ExpressionStatement[8396-8415]:ExpressionStatement[5323-5342]"
    }, {
      "left" : "bShell",
      "right" : "bInsertion",
      "info" : "SimpleName[8429-8435]:SimpleName[5352-5362]"
    }, {
      "left" : "bShell = System.nanoTime();",
      "right" : "bInsertion = System.nanoTime();",
      "info" : "ExpressionStatement[8429-8456]:ExpressionStatement[5352-5383]"
    }, {
      "left" : "result = ShellSort.sort(shells, sorted.clone());",
      "right" : "result = InsertionSort.sort(sorted.clone());",
      "info" : "ExpressionStatement[8469-8517]:ExpressionStatement[5392-5436]"
    }, {
      "left" : "ShellSort",
      "right" : "InsertionSort",
      "info" : "SimpleName[8478-8487]:SimpleName[5401-5414]"
    }, {
      "left" : "if (checkResults && !check(result))",
      "right" : "if (checkResults && !check(result))",
      "info" : "IfStatement[8530-8622]:IfStatement[5445-5543]"
    }, {
      "left" : "System.err.println(\"ShellSort failed.\");",
      "right" : "System.err.println(testable.getName()+\" failed.\");",
      "info" : "ExpressionStatement[8582-8622]:ExpressionStatement[4957-5007]"
    }, {
      "left" : "aShell",
      "right" : "aInsertion",
      "info" : "SimpleName[8635-8641]:SimpleName[5552-5562]"
    }, {
      "left" : "aShell = System.nanoTime();",
      "right" : "aInsertion = System.nanoTime();",
      "info" : "ExpressionStatement[8635-8662]:ExpressionStatement[5552-5583]"
    }, {
      "left" : "diff = (aShell - bShell) / 1000000d / 1000d;",
      "right" : "diff = (aInsertion - bInsertion) / 1000000d / 1000d;",
      "info" : "ExpressionStatement[8675-8719]:ExpressionStatement[5592-5644]"
    }, {
      "left" : "aShell",
      "right" : "aInsertion",
      "info" : "SimpleName[8683-8689]:SimpleName[5600-5610]"
    }, {
      "left" : "bShell",
      "right" : "bInsertion",
      "info" : "SimpleName[8692-8698]:SimpleName[5613-5623]"
    }, {
      "left" : "System.out.println(\"Sorted: ShellSort=\" + FORMAT.format(diff) + \" secs\");",
      "right" : "System.out.println(\"Sorted: \"+testable.getName()+\"=\" + FORMAT.format(diff) + \" secs\");",
      "info" : "ExpressionStatement[8732-8805]:ExpressionStatement[5653-5739]"
    }, {
      "left" : "\"Sorted: ShellSort=\"",
      "right" : "\"Sorted: \"",
      "info" : "StringLiteral[8751-8771]:StringLiteral[5672-5682]"
    }, {
      "left" : "if (showResult)",
      "right" : "if (showResult)",
      "info" : "IfStatement[8818-8877]:IfStatement[5748-5803]"
    }, {
      "left" : "showResult(sorted, result);",
      "right" : "showResult(sorted, result);",
      "info" : "ExpressionStatement[8850-8877]:ExpressionStatement[5776-5803]"
    }, {
      "left" : "shellResults",
      "right" : "results",
      "info" : "SimpleName[8926-8938]:SimpleName[5812-5819]"
    }, {
      "left" : "shellResults[shellCount++] = diff;",
      "right" : "results[count++] = diff;",
      "info" : "ExpressionStatement[8926-8960]:ExpressionStatement[5812-5836]"
    }, {
      "left" : "shellCount",
      "right" : "count",
      "info" : "SimpleName[8939-8949]:SimpleName[5820-5825]"
    }, {
      "left" : "putOutTheGarbage();",
      "right" : "putOutTheGarbage();",
      "info" : "ExpressionStatement[8973-8992]:ExpressionStatement[5845-5864]"
    }, {
      "left" : "bShell",
      "right" : "bInsertion",
      "info" : "SimpleName[9006-9012]:SimpleName[5874-5884]"
    }, {
      "left" : "bShell = System.nanoTime();",
      "right" : "bInsertion = System.nanoTime();",
      "info" : "ExpressionStatement[9006-9033]:ExpressionStatement[5874-5905]"
    }, {
      "left" : "result = ShellSort.sort(shells, reverse.clone());",
      "right" : "result = InsertionSort.sort(reverse.clone());",
      "info" : "ExpressionStatement[9046-9095]:ExpressionStatement[5914-5959]"
    }, {
      "left" : "ShellSort",
      "right" : "InsertionSort",
      "info" : "SimpleName[9055-9064]:SimpleName[5923-5936]"
    }, {
      "left" : "if (checkResults && !check(result))",
      "right" : "if (checkResults && !check(result))",
      "info" : "IfStatement[9108-9200]:IfStatement[5968-6072]"
    }, {
      "left" : "System.err.println(\"ShellSort failed.\");",
      "right" : "System.err.println(testable.getName()+\" failed.\");",
      "info" : "ExpressionStatement[9160-9200]:ExpressionStatement[5493-5543]"
    }, {
      "left" : "aShell",
      "right" : "aInsertion",
      "info" : "SimpleName[9213-9219]:SimpleName[6081-6091]"
    }, {
      "left" : "aShell = System.nanoTime();",
      "right" : "aInsertion = System.nanoTime();",
      "info" : "ExpressionStatement[9213-9240]:ExpressionStatement[6081-6112]"
    }, {
      "left" : "diff = (aShell - bShell) / 1000000d / 1000d;",
      "right" : "diff = (aInsertion - bInsertion) / 1000000d / 1000d;",
      "info" : "ExpressionStatement[9253-9297]:ExpressionStatement[6121-6173]"
    }, {
      "left" : "aShell",
      "right" : "aInsertion",
      "info" : "SimpleName[9261-9267]:SimpleName[6129-6139]"
    }, {
      "left" : "bShell",
      "right" : "bInsertion",
      "info" : "SimpleName[9270-9276]:SimpleName[6142-6152]"
    }, {
      "left" : "System.out.println(\"Reverse sorted: ShellSort=\" + FORMAT.format(diff) + \" secs\");",
      "right" : "System.out.println(\"Reverse sorted: \"+testable.getName()+\"=\" + FORMAT.format(diff) + \" secs\");",
      "info" : "ExpressionStatement[9310-9391]:ExpressionStatement[6182-6276]"
    }, {
      "left" : "\"Reverse sorted: ShellSort=\"",
      "right" : "\"Reverse sorted: \"",
      "info" : "StringLiteral[9329-9357]:StringLiteral[6201-6219]"
    }, {
      "left" : "if (showResult)",
      "right" : "if (showResult)",
      "info" : "IfStatement[9404-9464]:IfStatement[6285-6341]"
    }, {
      "left" : "showResult(reverse, result);",
      "right" : "showResult(reverse, result);",
      "info" : "ExpressionStatement[9436-9464]:ExpressionStatement[6313-6341]"
    }, {
      "left" : "shellResults",
      "right" : "results",
      "info" : "SimpleName[9513-9525]:SimpleName[6350-6357]"
    }, {
      "left" : "shellResults[shellCount++] = diff;",
      "right" : "results[count++] = diff;",
      "info" : "ExpressionStatement[9513-9547]:ExpressionStatement[6350-6374]"
    }, {
      "left" : "shellCount",
      "right" : "count",
      "info" : "SimpleName[9526-9536]:SimpleName[6358-6363]"
    }, {
      "left" : "putOutTheGarbage();",
      "right" : "putOutTheGarbage();",
      "info" : "ExpressionStatement[9560-9579]:ExpressionStatement[6383-6402]"
    }, {
      "left" : "System.out.println();",
      "right" : "System.out.println();",
      "info" : "ExpressionStatement[9593-9614]:ExpressionStatement[6412-6433]"
    }, {
      "left" : "System.out.flush();",
      "right" : "System.out.flush();",
      "info" : "ExpressionStatement[9627-9646]:ExpressionStatement[6442-6461]"
    }, {
      "left" : "long bMerge = System.nanoTime();",
      "right" : "long bInsertion = System.nanoTime();",
      "info" : "VariableDeclarationStatement[9731-9763]:VariableDeclarationStatement[4804-4840]"
    }, {
      "left" : "bMerge",
      "right" : "bInsertion",
      "info" : "SimpleName[9736-9742]:SimpleName[4809-4819]"
    }, {
      "left" : "if (checkResults && !check(result))",
      "right" : "if (checkResults && !check(result))",
      "info" : "IfStatement[9876-9968]:IfStatement[4909-5007]"
    }, {
      "left" : "System.err.println(\"MergeSort failed.\");",
      "right" : "System.err.println(testable.getName()+\" failed.\");",
      "info" : "ExpressionStatement[9928-9968]:ExpressionStatement[4957-5007]"
    }, {
      "left" : "long aMerge = System.nanoTime();",
      "right" : "long aInsertion = System.nanoTime();",
      "info" : "VariableDeclarationStatement[9981-10013]:VariableDeclarationStatement[5016-5052]"
    }, {
      "left" : "aMerge",
      "right" : "aInsertion",
      "info" : "SimpleName[9986-9992]:SimpleName[5021-5031]"
    }, {
      "left" : "double diff = (aMerge - bMerge) / 1000000d / 1000d;",
      "right" : "double diff = (aInsertion - bInsertion) / 1000000d / 1000d;",
      "info" : "VariableDeclarationStatement[10026-10077]:VariableDeclarationStatement[5061-5120]"
    }, {
      "left" : "aMerge",
      "right" : "aInsertion",
      "info" : "SimpleName[10041-10047]:SimpleName[5076-5086]"
    }, {
      "left" : "bMerge",
      "right" : "bInsertion",
      "info" : "SimpleName[10050-10056]:SimpleName[5089-5099]"
    }, {
      "left" : "System.out.println(\"Random: MergeSort=\" + FORMAT.format(diff) + \" secs\");",
      "right" : "System.out.println(\"Random: \"+testable.getName()+\"=\" + FORMAT.format(diff) + \" secs\");",
      "info" : "ExpressionStatement[10090-10163]:ExpressionStatement[5129-5215]"
    }, {
      "left" : "\"Random: MergeSort=\"",
      "right" : "\"Random: \"",
      "info" : "StringLiteral[10109-10129]:StringLiteral[5148-5158]"
    }, {
      "left" : "if (showResult)",
      "right" : "if (showResult)",
      "info" : "IfStatement[10176-10237]:IfStatement[5224-5281]"
    }, {
      "left" : "showResult(unsorted, result);",
      "right" : "showResult(unsorted, result);",
      "info" : "ExpressionStatement[10208-10237]:ExpressionStatement[5252-5281]"
    }, {
      "left" : "mergeNotInPlaceResults[mergeNotInPlaceCount++] = diff;",
      "right" : "insertionCount = runTest(new Insertion(), unsorted, sorted, insertionResults, insertionCount);",
      "info" : "ExpressionStatement[10286-10340]:ExpressionStatement[2950-3044]"
    }, {
      "left" : "diff",
      "right" : "insertionCount",
      "info" : "SimpleName[10335-10339]:SimpleName[2950-2964]"
    }, {
      "left" : "putOutTheGarbage();",
      "right" : "putOutTheGarbage();",
      "info" : "ExpressionStatement[10353-10372]:ExpressionStatement[5323-5342]"
    }, {
      "left" : "bMerge",
      "right" : "bInsertion",
      "info" : "SimpleName[10386-10392]:SimpleName[5352-5362]"
    }, {
      "left" : "bMerge = System.nanoTime();",
      "right" : "bInsertion = System.nanoTime();",
      "info" : "ExpressionStatement[10386-10413]:ExpressionStatement[5352-5383]"
    }, {
      "left" : "if (checkResults && !check(result))",
      "right" : "if (checkResults && !check(result))",
      "info" : "IfStatement[10514-10606]:IfStatement[5445-5543]"
    }, {
      "left" : "System.err.println(\"MergeSort failed.\");",
      "right" : "System.err.println(testable.getName()+\" failed.\");",
      "info" : "ExpressionStatement[10566-10606]:ExpressionStatement[5493-5543]"
    }, {
      "left" : "aMerge",
      "right" : "aInsertion",
      "info" : "SimpleName[10619-10625]:SimpleName[5552-5562]"
    }, {
      "left" : "aMerge = System.nanoTime();",
      "right" : "aInsertion = System.nanoTime();",
      "info" : "ExpressionStatement[10619-10646]:ExpressionStatement[5552-5583]"
    }, {
      "left" : "diff = (aMerge - bMerge) / 1000000d / 1000d;",
      "right" : "diff = (aInsertion - bInsertion) / 1000000d / 1000d;",
      "info" : "ExpressionStatement[10659-10703]:ExpressionStatement[5592-5644]"
    }, {
      "left" : "aMerge",
      "right" : "aInsertion",
      "info" : "SimpleName[10667-10673]:SimpleName[5600-5610]"
    }, {
      "left" : "bMerge",
      "right" : "bInsertion",
      "info" : "SimpleName[10676-10682]:SimpleName[5613-5623]"
    }, {
      "left" : "System.out.println(\"Sorted: MergeSort=\" + FORMAT.format(diff) + \" secs\");",
      "right" : "System.out.println(\"Sorted: \"+testable.getName()+\"=\" + FORMAT.format(diff) + \" secs\");",
      "info" : "ExpressionStatement[10716-10789]:ExpressionStatement[5653-5739]"
    }, {
      "left" : "\"Sorted: MergeSort=\"",
      "right" : "\"Sorted: \"",
      "info" : "StringLiteral[10735-10755]:StringLiteral[5672-5682]"
    }, {
      "left" : "if (showResult)",
      "right" : "if (showResult)",
      "info" : "IfStatement[10802-10861]:IfStatement[5748-5803]"
    }, {
      "left" : "showResult(sorted, result);",
      "right" : "showResult(sorted, result);",
      "info" : "ExpressionStatement[10834-10861]:ExpressionStatement[5776-5803]"
    }, {
      "left" : "mergeNotInPlaceResults[mergeNotInPlaceCount++] = diff;",
      "right" : "mergeCount = runTest(new MergeNotInPlace(), unsorted, sorted, mergeResults, mergeCount);",
      "info" : "ExpressionStatement[10910-10964]:ExpressionStatement[3439-3527]"
    }, {
      "left" : "diff",
      "right" : "mergeCount",
      "info" : "SimpleName[10959-10963]:SimpleName[3439-3449]"
    }, {
      "left" : "putOutTheGarbage();",
      "right" : "putOutTheGarbage();",
      "info" : "ExpressionStatement[10977-10996]:ExpressionStatement[5845-5864]"
    }, {
      "left" : "bMerge",
      "right" : "bInsertion",
      "info" : "SimpleName[11010-11016]:SimpleName[5874-5884]"
    }, {
      "left" : "bMerge = System.nanoTime();",
      "right" : "bInsertion = System.nanoTime();",
      "info" : "ExpressionStatement[11010-11037]:ExpressionStatement[5874-5905]"
    }, {
      "left" : "result = MergeSort.sort(MergeSort.SPACE_TYPE.NOT_IN_PLACE, reverse.clone());",
      "right" : "result = InsertionSort.sort(reverse.clone());",
      "info" : "ExpressionStatement[11050-11126]:ExpressionStatement[5914-5959]"
    }, {
      "left" : "MergeSort",
      "right" : "InsertionSort",
      "info" : "SimpleName[11059-11068]:SimpleName[5923-5936]"
    }, {
      "left" : "if (checkResults && !check(result))",
      "right" : "if (checkResults && !check(result))",
      "info" : "IfStatement[11139-11231]:IfStatement[5968-6072]"
    }, {
      "left" : "System.err.println(\"MergeSort failed.\");",
      "right" : "System.err.println(testable.getName()+\" failed.\");",
      "info" : "ExpressionStatement[11191-11231]:ExpressionStatement[4957-5007]"
    }, {
      "left" : "aMerge",
      "right" : "aInsertion",
      "info" : "SimpleName[11244-11250]:SimpleName[6081-6091]"
    }, {
      "left" : "aMerge = System.nanoTime();",
      "right" : "aInsertion = System.nanoTime();",
      "info" : "ExpressionStatement[11244-11271]:ExpressionStatement[6081-6112]"
    }, {
      "left" : "diff = (aMerge - bMerge) / 1000000d / 1000d;",
      "right" : "diff = (aInsertion - bInsertion) / 1000000d / 1000d;",
      "info" : "ExpressionStatement[11284-11328]:ExpressionStatement[6121-6173]"
    }, {
      "left" : "aMerge",
      "right" : "aInsertion",
      "info" : "SimpleName[11292-11298]:SimpleName[6129-6139]"
    }, {
      "left" : "bMerge",
      "right" : "bInsertion",
      "info" : "SimpleName[11301-11307]:SimpleName[6142-6152]"
    }, {
      "left" : "System.out.println(\"Reverse sorted: MergeSort=\" + FORMAT.format(diff) + \" secs\");",
      "right" : "System.out.println(\"Reverse sorted: \"+testable.getName()+\"=\" + FORMAT.format(diff) + \" secs\");",
      "info" : "ExpressionStatement[11341-11422]:ExpressionStatement[6182-6276]"
    }, {
      "left" : "\"Reverse sorted: MergeSort=\"",
      "right" : "\"Reverse sorted: \"",
      "info" : "StringLiteral[11360-11388]:StringLiteral[6201-6219]"
    }, {
      "left" : "if (showResult)",
      "right" : "if (showResult)",
      "info" : "IfStatement[11435-11495]:IfStatement[6285-6341]"
    }, {
      "left" : "showResult(reverse, result);",
      "right" : "showResult(reverse, result);",
      "info" : "ExpressionStatement[11467-11495]:ExpressionStatement[6313-6341]"
    }, {
      "left" : "mergeNotInPlaceResults[mergeNotInPlaceCount++] = diff;",
      "right" : "countingCount = runTest(new Counting(), unsorted, sorted, countingResults, countingCount);",
      "info" : "ExpressionStatement[11544-11598]:ExpressionStatement[4200-4290]"
    }, {
      "left" : "diff",
      "right" : "countingCount",
      "info" : "SimpleName[11593-11597]:SimpleName[4200-4213]"
    }, {
      "left" : "putOutTheGarbage();",
      "right" : "putOutTheGarbage();",
      "info" : "ExpressionStatement[11611-11630]:ExpressionStatement[6383-6402]"
    }, {
      "left" : "System.out.println();",
      "right" : "System.out.println();",
      "info" : "ExpressionStatement[11644-11665]:ExpressionStatement[6412-6433]"
    }, {
      "left" : "System.out.flush();",
      "right" : "System.out.flush();",
      "info" : "ExpressionStatement[11678-11697]:ExpressionStatement[6442-6461]"
    }, {
      "left" : "long bMerge = System.nanoTime();",
      "right" : "long bInsertion = System.nanoTime();",
      "info" : "VariableDeclarationStatement[11779-11811]:VariableDeclarationStatement[4804-4840]"
    }, {
      "left" : "bMerge",
      "right" : "bInsertion",
      "info" : "SimpleName[11784-11790]:SimpleName[4809-4819]"
    }, {
      "left" : "if (checkResults && !check(result))",
      "right" : "if (checkResults && !check(result))",
      "info" : "IfStatement[11920-12012]:IfStatement[4909-5007]"
    }, {
      "left" : "System.err.println(\"MergeSort failed.\");",
      "right" : "System.err.println(testable.getName()+\" failed.\");",
      "info" : "ExpressionStatement[11972-12012]:ExpressionStatement[5493-5543]"
    }, {
      "left" : "long aMerge = System.nanoTime();",
      "right" : "long aInsertion = System.nanoTime();",
      "info" : "VariableDeclarationStatement[12025-12057]:VariableDeclarationStatement[5016-5052]"
    }, {
      "left" : "aMerge",
      "right" : "aInsertion",
      "info" : "SimpleName[12030-12036]:SimpleName[5021-5031]"
    }, {
      "left" : "double diff = (aMerge - bMerge) / 1000000d / 1000d;",
      "right" : "double diff = (aInsertion - bInsertion) / 1000000d / 1000d;",
      "info" : "VariableDeclarationStatement[12070-12121]:VariableDeclarationStatement[5061-5120]"
    }, {
      "left" : "aMerge",
      "right" : "aInsertion",
      "info" : "SimpleName[12085-12091]:SimpleName[5076-5086]"
    }, {
      "left" : "bMerge",
      "right" : "bInsertion",
      "info" : "SimpleName[12094-12100]:SimpleName[5089-5099]"
    }, {
      "left" : "System.out.println(\"Random: MergeSort=\" + FORMAT.format(diff) + \" secs\");",
      "right" : "System.out.println(\"Random: \"+testable.getName()+\"=\" + FORMAT.format(diff) + \" secs\");",
      "info" : "ExpressionStatement[12134-12207]:ExpressionStatement[5129-5215]"
    }, {
      "left" : "\"Random: MergeSort=\"",
      "right" : "\"Random: \"",
      "info" : "StringLiteral[12153-12173]:StringLiteral[5148-5158]"
    }, {
      "left" : "if (showResult)",
      "right" : "if (showResult)",
      "info" : "IfStatement[12220-12281]:IfStatement[5224-5281]"
    }, {
      "left" : "showResult(unsorted, result);",
      "right" : "showResult(unsorted, result);",
      "info" : "ExpressionStatement[12252-12281]:ExpressionStatement[5252-5281]"
    }, {
      "left" : "mergeInPlaceResults[mergeInPlaceCount++] = diff;",
      "right" : "mergeCount = runTest(new MergeInPlace(), unsorted, sorted, mergeResults, mergeCount);",
      "info" : "ExpressionStatement[12330-12378]:ExpressionStatement[3536-3621]"
    }, {
      "left" : "diff",
      "right" : "mergeCount",
      "info" : "SimpleName[12373-12377]:SimpleName[3536-3546]"
    }, {
      "left" : "putOutTheGarbage();",
      "right" : "putOutTheGarbage();",
      "info" : "ExpressionStatement[12391-12410]:ExpressionStatement[5323-5342]"
    }, {
      "left" : "bMerge",
      "right" : "bInsertion",
      "info" : "SimpleName[12424-12430]:SimpleName[5352-5362]"
    }, {
      "left" : "bMerge = System.nanoTime();",
      "right" : "bInsertion = System.nanoTime();",
      "info" : "ExpressionStatement[12424-12451]:ExpressionStatement[5352-5383]"
    }, {
      "left" : "if (checkResults && !check(result))",
      "right" : "if (checkResults && !check(result))",
      "info" : "IfStatement[12548-12640]:IfStatement[5445-5543]"
    }, {
      "left" : "System.err.println(\"MergeSort failed.\");",
      "right" : "System.err.println(testable.getName()+\" failed.\");",
      "info" : "ExpressionStatement[12600-12640]:ExpressionStatement[4957-5007]"
    }, {
      "left" : "aMerge",
      "right" : "aInsertion",
      "info" : "SimpleName[12653-12659]:SimpleName[5552-5562]"
    }, {
      "left" : "aMerge = System.nanoTime();",
      "right" : "aInsertion = System.nanoTime();",
      "info" : "ExpressionStatement[12653-12680]:ExpressionStatement[5552-5583]"
    }, {
      "left" : "diff = (aMerge - bMerge) / 1000000d / 1000d;",
      "right" : "diff = (aInsertion - bInsertion) / 1000000d / 1000d;",
      "info" : "ExpressionStatement[12693-12737]:ExpressionStatement[5592-5644]"
    }, {
      "left" : "aMerge",
      "right" : "aInsertion",
      "info" : "SimpleName[12701-12707]:SimpleName[5600-5610]"
    }, {
      "left" : "bMerge",
      "right" : "bInsertion",
      "info" : "SimpleName[12710-12716]:SimpleName[5613-5623]"
    }, {
      "left" : "System.out.println(\"Sorted: MergeSort=\" + FORMAT.format(diff) + \" secs\");",
      "right" : "System.out.println(\"Sorted: \"+testable.getName()+\"=\" + FORMAT.format(diff) + \" secs\");",
      "info" : "ExpressionStatement[12750-12823]:ExpressionStatement[5653-5739]"
    }, {
      "left" : "\"Sorted: MergeSort=\"",
      "right" : "\"Sorted: \"",
      "info" : "StringLiteral[12769-12789]:StringLiteral[5672-5682]"
    }, {
      "left" : "if (showResult)",
      "right" : "if (showResult)",
      "info" : "IfStatement[12836-12895]:IfStatement[5748-5803]"
    }, {
      "left" : "showResult(sorted, result);",
      "right" : "showResult(sorted, result);",
      "info" : "ExpressionStatement[12868-12895]:ExpressionStatement[5776-5803]"
    }, {
      "left" : "mergeInPlaceResults[mergeInPlaceCount++] = diff;",
      "right" : "americanFlagCount = runTest(new AmericanFlag(), unsorted, sorted, americanFlagResults, americanFlagCount);",
      "info" : "ExpressionStatement[12944-12992]:ExpressionStatement[4531-4637]"
    }, {
      "left" : "diff",
      "right" : "americanFlagCount",
      "info" : "SimpleName[12987-12991]:SimpleName[4531-4548]"
    }, {
      "left" : "putOutTheGarbage();",
      "right" : "putOutTheGarbage();",
      "info" : "ExpressionStatement[13005-13024]:ExpressionStatement[5845-5864]"
    }, {
      "left" : "bMerge",
      "right" : "bInsertion",
      "info" : "SimpleName[13038-13044]:SimpleName[5874-5884]"
    }, {
      "left" : "bMerge = System.nanoTime();",
      "right" : "bInsertion = System.nanoTime();",
      "info" : "ExpressionStatement[13038-13065]:ExpressionStatement[5874-5905]"
    }, {
      "left" : "result = MergeSort.sort(MergeSort.SPACE_TYPE.IN_PLACE, reverse.clone());",
      "right" : "result = InsertionSort.sort(reverse.clone());",
      "info" : "ExpressionStatement[13078-13150]:ExpressionStatement[5914-5959]"
    }, {
      "left" : "MergeSort",
      "right" : "InsertionSort",
      "info" : "SimpleName[13087-13096]:SimpleName[5923-5936]"
    }, {
      "left" : "if (checkResults && !check(result))",
      "right" : "if (checkResults && !check(result))",
      "info" : "IfStatement[13163-13255]:IfStatement[5968-6072]"
    }, {
      "left" : "System.err.println(\"MergeSort failed.\");",
      "right" : "System.err.println(testable.getName()+\" failed.\");",
      "info" : "ExpressionStatement[13215-13255]:ExpressionStatement[5493-5543]"
    }, {
      "left" : "aMerge",
      "right" : "aInsertion",
      "info" : "SimpleName[13268-13274]:SimpleName[6081-6091]"
    }, {
      "left" : "aMerge = System.nanoTime();",
      "right" : "aInsertion = System.nanoTime();",
      "info" : "ExpressionStatement[13268-13295]:ExpressionStatement[6081-6112]"
    }, {
      "left" : "diff = (aMerge - bMerge) / 1000000d / 1000d;",
      "right" : "diff = (aInsertion - bInsertion) / 1000000d / 1000d;",
      "info" : "ExpressionStatement[13308-13352]:ExpressionStatement[6121-6173]"
    }, {
      "left" : "aMerge",
      "right" : "aInsertion",
      "info" : "SimpleName[13316-13322]:SimpleName[6129-6139]"
    }, {
      "left" : "bMerge",
      "right" : "bInsertion",
      "info" : "SimpleName[13325-13331]:SimpleName[6142-6152]"
    }, {
      "left" : "System.out.println(\"Reverse sorted: MergeSort=\" + FORMAT.format(diff) + \" secs\");",
      "right" : "System.out.println(\"Reverse sorted: \"+testable.getName()+\"=\" + FORMAT.format(diff) + \" secs\");",
      "info" : "ExpressionStatement[13365-13446]:ExpressionStatement[6182-6276]"
    }, {
      "left" : "\"Reverse sorted: MergeSort=\"",
      "right" : "\"Reverse sorted: \"",
      "info" : "StringLiteral[13384-13412]:StringLiteral[6201-6219]"
    }, {
      "left" : "if (showResult)",
      "right" : "if (showResult)",
      "info" : "IfStatement[13459-13519]:IfStatement[6285-6341]"
    }, {
      "left" : "showResult(reverse, result);",
      "right" : "showResult(reverse, result);",
      "info" : "ExpressionStatement[13491-13519]:ExpressionStatement[6313-6341]"
    }, {
      "left" : "putOutTheGarbage();",
      "right" : "putOutTheGarbage();",
      "info" : "ExpressionStatement[13629-13648]:ExpressionStatement[6383-6402]"
    }, {
      "left" : "System.out.println();",
      "right" : "System.out.println();",
      "info" : "ExpressionStatement[13662-13683]:ExpressionStatement[6412-6433]"
    }, {
      "left" : "System.out.flush();",
      "right" : "System.out.flush();",
      "info" : "ExpressionStatement[13696-13715]:ExpressionStatement[6442-6461]"
    }, {
      "left" : "long bQuick = System.nanoTime();",
      "right" : "long bInsertion = System.nanoTime();",
      "info" : "VariableDeclarationStatement[13789-13821]:VariableDeclarationStatement[4804-4840]"
    }, {
      "left" : "bQuick",
      "right" : "bInsertion",
      "info" : "SimpleName[13794-13800]:SimpleName[4809-4819]"
    }, {
      "left" : "if (checkResults && !check(result))",
      "right" : "if (checkResults && !check(result))",
      "info" : "IfStatement[13927-14019]:IfStatement[4909-5007]"
    }, {
      "left" : "System.err.println(\"QuickSort failed.\");",
      "right" : "System.err.println(testable.getName()+\" failed.\");",
      "info" : "ExpressionStatement[13979-14019]:ExpressionStatement[4957-5007]"
    }, {
      "left" : "long aQuick = System.nanoTime();",
      "right" : "long aInsertion = System.nanoTime();",
      "info" : "VariableDeclarationStatement[14032-14064]:VariableDeclarationStatement[5016-5052]"
    }, {
      "left" : "aQuick",
      "right" : "aInsertion",
      "info" : "SimpleName[14037-14043]:SimpleName[5021-5031]"
    }, {
      "left" : "double diff = (aQuick - bQuick) / 1000000d / 1000d;",
      "right" : "double diff = (aInsertion - bInsertion) / 1000000d / 1000d;",
      "info" : "VariableDeclarationStatement[14077-14128]:VariableDeclarationStatement[5061-5120]"
    }, {
      "left" : "aQuick",
      "right" : "aInsertion",
      "info" : "SimpleName[14092-14098]:SimpleName[5076-5086]"
    }, {
      "left" : "bQuick",
      "right" : "bInsertion",
      "info" : "SimpleName[14101-14107]:SimpleName[5089-5099]"
    }, {
      "left" : "System.out.println(\"Random: QuickSort first element pivot=\" + FORMAT.format(diff) + \" secs\");",
      "right" : "System.out.println(\"Random: \"+testable.getName()+\"=\" + FORMAT.format(diff) + \" secs\");",
      "info" : "ExpressionStatement[14141-14234]:ExpressionStatement[5129-5215]"
    }, {
      "left" : "\"Random: QuickSort first element pivot=\"",
      "right" : "\"Random: \"",
      "info" : "StringLiteral[14160-14200]:StringLiteral[5148-5158]"
    }, {
      "left" : "if (showResult)",
      "right" : "if (showResult)",
      "info" : "IfStatement[14247-14308]:IfStatement[5224-5281]"
    }, {
      "left" : "showResult(unsorted, result);",
      "right" : "showResult(unsorted, result);",
      "info" : "ExpressionStatement[14279-14308]:ExpressionStatement[5252-5281]"
    }, {
      "left" : "quickResults[quickCount++] = diff;",
      "right" : "radixCount = runTest(new Radix(), unsorted, sorted, radixResults, radixCount);",
      "info" : "ExpressionStatement[14357-14391]:ExpressionStatement[4368-4446]"
    }, {
      "left" : "quickResults",
      "right" : "results",
      "info" : "SimpleName[14357-14369]:SimpleName[5290-5297]"
    }, {
      "left" : "quickResults[quickCount++] = diff;",
      "right" : "results[count++] = diff;",
      "info" : "ExpressionStatement[14357-14391]:ExpressionStatement[5290-5314]"
    }, {
      "left" : "quickResults",
      "right" : "results",
      "info" : "SimpleName[14357-14369]:SimpleName[6350-6357]"
    }, {
      "left" : "quickResults[quickCount++] = diff;",
      "right" : "results[count++] = diff;",
      "info" : "ExpressionStatement[14357-14391]:ExpressionStatement[6350-6374]"
    }, {
      "left" : "quickCount",
      "right" : "count",
      "info" : "SimpleName[14370-14380]:SimpleName[5298-5303]"
    }, {
      "left" : "quickCount",
      "right" : "count",
      "info" : "SimpleName[14370-14380]:SimpleName[6358-6363]"
    }, {
      "left" : "diff",
      "right" : "radixCount",
      "info" : "SimpleName[14386-14390]:SimpleName[4368-4378]"
    }, {
      "left" : "putOutTheGarbage();",
      "right" : "putOutTheGarbage();",
      "info" : "ExpressionStatement[14404-14423]:ExpressionStatement[5323-5342]"
    }, {
      "left" : "bQuick",
      "right" : "bInsertion",
      "info" : "SimpleName[14437-14443]:SimpleName[5352-5362]"
    }, {
      "left" : "bQuick = System.nanoTime();",
      "right" : "bInsertion = System.nanoTime();",
      "info" : "ExpressionStatement[14437-14464]:ExpressionStatement[5352-5383]"
    }, {
      "left" : "result = QuickSort.sort(QuickSort.PIVOT_TYPE.FIRST, sorted.clone());",
      "right" : "result = InsertionSort.sort(sorted.clone());",
      "info" : "ExpressionStatement[14477-14545]:ExpressionStatement[5392-5436]"
    }, {
      "left" : "QuickSort",
      "right" : "InsertionSort",
      "info" : "SimpleName[14486-14495]:SimpleName[5401-5414]"
    }, {
      "left" : "if (checkResults && !check(result))",
      "right" : "if (checkResults && !check(result))",
      "info" : "IfStatement[14558-14650]:IfStatement[5445-5543]"
    }, {
      "left" : "System.err.println(\"QuickSort failed.\");",
      "right" : "System.err.println(testable.getName()+\" failed.\");",
      "info" : "ExpressionStatement[14610-14650]:ExpressionStatement[5493-5543]"
    }, {
      "left" : "aQuick",
      "right" : "aInsertion",
      "info" : "SimpleName[14663-14669]:SimpleName[5552-5562]"
    }, {
      "left" : "aQuick = System.nanoTime();",
      "right" : "aInsertion = System.nanoTime();",
      "info" : "ExpressionStatement[14663-14690]:ExpressionStatement[5552-5583]"
    }, {
      "left" : "diff = (aQuick - bQuick) / 1000000d / 1000d;",
      "right" : "diff = (aInsertion - bInsertion) / 1000000d / 1000d;",
      "info" : "ExpressionStatement[14703-14747]:ExpressionStatement[5592-5644]"
    }, {
      "left" : "aQuick",
      "right" : "aInsertion",
      "info" : "SimpleName[14711-14717]:SimpleName[5600-5610]"
    }, {
      "left" : "bQuick",
      "right" : "bInsertion",
      "info" : "SimpleName[14720-14726]:SimpleName[5613-5623]"
    }, {
      "left" : "System.out.println(\"Sorted: QuickSort first element pivot=\" + FORMAT.format(diff) + \" secs\");",
      "right" : "System.out.println(\"Sorted: \"+testable.getName()+\"=\" + FORMAT.format(diff) + \" secs\");",
      "info" : "ExpressionStatement[14760-14853]:ExpressionStatement[5653-5739]"
    }, {
      "left" : "\"Sorted: QuickSort first element pivot=\"",
      "right" : "\"Sorted: \"",
      "info" : "StringLiteral[14779-14819]:StringLiteral[5672-5682]"
    }, {
      "left" : "if (showResult)",
      "right" : "if (showResult)",
      "info" : "IfStatement[14866-14925]:IfStatement[5748-5803]"
    }, {
      "left" : "showResult(sorted, result);",
      "right" : "showResult(sorted, result);",
      "info" : "ExpressionStatement[14898-14925]:ExpressionStatement[5776-5803]"
    }, {
      "left" : "quickResults",
      "right" : "results",
      "info" : "SimpleName[14974-14986]:SimpleName[5290-5297]"
    }, {
      "left" : "quickResults[quickCount++] = diff;",
      "right" : "results[count++] = diff;",
      "info" : "ExpressionStatement[14974-15008]:ExpressionStatement[5290-5314]"
    }, {
      "left" : "quickCount",
      "right" : "count",
      "info" : "SimpleName[14987-14997]:SimpleName[5298-5303]"
    }, {
      "left" : "putOutTheGarbage();",
      "right" : "putOutTheGarbage();",
      "info" : "ExpressionStatement[15021-15040]:ExpressionStatement[5845-5864]"
    }, {
      "left" : "bQuick",
      "right" : "bInsertion",
      "info" : "SimpleName[15054-15060]:SimpleName[5874-5884]"
    }, {
      "left" : "bQuick = System.nanoTime();",
      "right" : "bInsertion = System.nanoTime();",
      "info" : "ExpressionStatement[15054-15081]:ExpressionStatement[5874-5905]"
    }, {
      "left" : "result = QuickSort.sort(QuickSort.PIVOT_TYPE.FIRST, reverse.clone());",
      "right" : "result = InsertionSort.sort(reverse.clone());",
      "info" : "ExpressionStatement[15094-15163]:ExpressionStatement[5914-5959]"
    }, {
      "left" : "QuickSort",
      "right" : "InsertionSort",
      "info" : "SimpleName[15103-15112]:SimpleName[5923-5936]"
    }, {
      "left" : "if (checkResults && !check(result))",
      "right" : "if (checkResults && !check(result))",
      "info" : "IfStatement[15176-15268]:IfStatement[5968-6072]"
    }, {
      "left" : "System.err.println(\"QuickSort failed.\");",
      "right" : "System.err.println(testable.getName()+\" failed.\");",
      "info" : "ExpressionStatement[15228-15268]:ExpressionStatement[4957-5007]"
    }, {
      "left" : "aQuick",
      "right" : "aInsertion",
      "info" : "SimpleName[15281-15287]:SimpleName[6081-6091]"
    }, {
      "left" : "aQuick = System.nanoTime();",
      "right" : "aInsertion = System.nanoTime();",
      "info" : "ExpressionStatement[15281-15308]:ExpressionStatement[6081-6112]"
    }, {
      "left" : "diff = (aQuick - bQuick) / 1000000d / 1000d;",
      "right" : "diff = (aInsertion - bInsertion) / 1000000d / 1000d;",
      "info" : "ExpressionStatement[15321-15365]:ExpressionStatement[6121-6173]"
    }, {
      "left" : "aQuick",
      "right" : "aInsertion",
      "info" : "SimpleName[15329-15335]:SimpleName[6129-6139]"
    }, {
      "left" : "bQuick",
      "right" : "bInsertion",
      "info" : "SimpleName[15338-15344]:SimpleName[6142-6152]"
    }, {
      "left" : "System.out.println(\"Reverse sorted: QuickSort first element pivot=\" + FORMAT.format(diff) + \" secs\");",
      "right" : "System.out.println(\"Reverse sorted: \"+testable.getName()+\"=\" + FORMAT.format(diff) + \" secs\");",
      "info" : "ExpressionStatement[15378-15479]:ExpressionStatement[6182-6276]"
    }, {
      "left" : "\"Reverse sorted: QuickSort first element pivot=\"",
      "right" : "\"Reverse sorted: \"",
      "info" : "StringLiteral[15397-15445]:StringLiteral[6201-6219]"
    }, {
      "left" : "if (showResult)",
      "right" : "if (showResult)",
      "info" : "IfStatement[15492-15552]:IfStatement[6285-6341]"
    }, {
      "left" : "showResult(reverse, result);",
      "right" : "showResult(reverse, result);",
      "info" : "ExpressionStatement[15524-15552]:ExpressionStatement[6313-6341]"
    }, {
      "left" : "quickResults",
      "right" : "results",
      "info" : "SimpleName[15601-15613]:SimpleName[5812-5819]"
    }, {
      "left" : "quickResults[quickCount++] = diff;",
      "right" : "results[count++] = diff;",
      "info" : "ExpressionStatement[15601-15635]:ExpressionStatement[5812-5836]"
    }, {
      "left" : "quickCount",
      "right" : "count",
      "info" : "SimpleName[15614-15624]:SimpleName[5820-5825]"
    }, {
      "left" : "putOutTheGarbage();",
      "right" : "putOutTheGarbage();",
      "info" : "ExpressionStatement[15648-15667]:ExpressionStatement[6383-6402]"
    }, {
      "left" : "System.out.println();",
      "right" : "System.out.println();",
      "info" : "ExpressionStatement[15681-15702]:ExpressionStatement[6412-6433]"
    }, {
      "left" : "System.out.flush();",
      "right" : "System.out.flush();",
      "info" : "ExpressionStatement[15715-15734]:ExpressionStatement[6442-6461]"
    }, {
      "left" : "System.nanoTime()",
      "right" : "System.nanoTime()",
      "info" : "MethodInvocation[15757-15774]:MethodInvocation[4822-4839]"
    }, {
      "left" : "result = QuickSort.sort(QuickSort.PIVOT_TYPE.MIDDLE, unsorted.clone());",
      "right" : "result = InsertionSort.sort(sorted.clone());",
      "info" : "ExpressionStatement[15788-15859]:ExpressionStatement[5392-5436]"
    }, {
      "left" : "QuickSort",
      "right" : "InsertionSort",
      "info" : "SimpleName[15797-15806]:SimpleName[5401-5414]"
    }, {
      "left" : "unsorted",
      "right" : "sorted",
      "info" : "SimpleName[15841-15849]:SimpleName[5420-5426]"
    }, {
      "left" : "if (checkResults && !check(result))",
      "right" : "if (checkResults && !check(result))",
      "info" : "IfStatement[15872-15964]:IfStatement[4909-5007]"
    }, {
      "left" : "System.err.println(\"QuickSort failed.\");",
      "right" : "System.err.println(testable.getName()+\" failed.\");",
      "info" : "ExpressionStatement[15924-15964]:ExpressionStatement[5493-5543]"
    }, {
      "left" : "System.nanoTime()",
      "right" : "System.nanoTime()",
      "info" : "MethodInvocation[15986-16003]:MethodInvocation[5034-5051]"
    }, {
      "left" : "diff",
      "right" : "diff",
      "info" : "SimpleName[16017-16021]:SimpleName[5068-5072]"
    }, {
      "left" : "(aQuick - bQuick) / 1000000d / 1000d",
      "right" : "(aInsertion - bInsertion) / 1000000d / 1000d",
      "info" : "InfixExpression[16024-16060]:InfixExpression[5075-5119]"
    }, {
      "left" : "aQuick",
      "right" : "aInsertion",
      "info" : "SimpleName[16025-16031]:SimpleName[5076-5086]"
    }, {
      "left" : "bQuick",
      "right" : "bInsertion",
      "info" : "SimpleName[16034-16040]:SimpleName[5089-5099]"
    }, {
      "left" : "System.out.println(\"Random: QuickSort middle element pivot=\" + FORMAT.format(diff) + \" secs\");",
      "right" : "System.out.println(\"Random: \"+testable.getName()+\"=\" + FORMAT.format(diff) + \" secs\");",
      "info" : "ExpressionStatement[16074-16168]:ExpressionStatement[5129-5215]"
    }, {
      "left" : "\"Random: QuickSort middle element pivot=\"",
      "right" : "\"Random: \"",
      "info" : "StringLiteral[16093-16134]:StringLiteral[5148-5158]"
    }, {
      "left" : "if (showResult)",
      "right" : "if (showResult)",
      "info" : "IfStatement[16181-16242]:IfStatement[5224-5281]"
    }, {
      "left" : "showResult(unsorted, result);",
      "right" : "showResult(unsorted, result);",
      "info" : "ExpressionStatement[16213-16242]:ExpressionStatement[5252-5281]"
    }, {
      "left" : "quickResults",
      "right" : "results",
      "info" : "SimpleName[16291-16303]:SimpleName[6350-6357]"
    }, {
      "left" : "quickResults[quickCount++] = diff;",
      "right" : "results[count++] = diff;",
      "info" : "ExpressionStatement[16291-16325]:ExpressionStatement[6350-6374]"
    }, {
      "left" : "quickCount",
      "right" : "count",
      "info" : "SimpleName[16304-16314]:SimpleName[6358-6363]"
    }, {
      "left" : "putOutTheGarbage();",
      "right" : "putOutTheGarbage();",
      "info" : "ExpressionStatement[16338-16357]:ExpressionStatement[5323-5342]"
    }, {
      "left" : "bQuick",
      "right" : "bInsertion",
      "info" : "SimpleName[16371-16377]:SimpleName[5352-5362]"
    }, {
      "left" : "bQuick = System.nanoTime();",
      "right" : "bInsertion = System.nanoTime();",
      "info" : "ExpressionStatement[16371-16398]:ExpressionStatement[5352-5383]"
    }, {
      "left" : "result = QuickSort.sort(QuickSort.PIVOT_TYPE.MIDDLE, sorted.clone());",
      "right" : "result = InsertionSort.sort(sorted.clone());",
      "info" : "ExpressionStatement[16411-16480]:ExpressionStatement[5392-5436]"
    }, {
      "left" : "QuickSort",
      "right" : "InsertionSort",
      "info" : "SimpleName[16420-16429]:SimpleName[5401-5414]"
    }, {
      "left" : "if (checkResults && !check(result))",
      "right" : "if (checkResults && !check(result))",
      "info" : "IfStatement[16493-16585]:IfStatement[5445-5543]"
    }, {
      "left" : "System.err.println(\"QuickSort failed.\");",
      "right" : "System.err.println(testable.getName()+\" failed.\");",
      "info" : "ExpressionStatement[16545-16585]:ExpressionStatement[4957-5007]"
    }, {
      "left" : "aQuick",
      "right" : "aInsertion",
      "info" : "SimpleName[16598-16604]:SimpleName[5552-5562]"
    }, {
      "left" : "aQuick = System.nanoTime();",
      "right" : "aInsertion = System.nanoTime();",
      "info" : "ExpressionStatement[16598-16625]:ExpressionStatement[5552-5583]"
    }, {
      "left" : "diff = (aQuick - bQuick) / 1000000d / 1000d;",
      "right" : "diff = (aInsertion - bInsertion) / 1000000d / 1000d;",
      "info" : "ExpressionStatement[16638-16682]:ExpressionStatement[5592-5644]"
    }, {
      "left" : "aQuick",
      "right" : "aInsertion",
      "info" : "SimpleName[16646-16652]:SimpleName[5600-5610]"
    }, {
      "left" : "bQuick",
      "right" : "bInsertion",
      "info" : "SimpleName[16655-16661]:SimpleName[5613-5623]"
    }, {
      "left" : "System.out.println(\"Sorted: QuickSort middle element pivot=\" + FORMAT.format(diff) + \" secs\");",
      "right" : "System.out.println(\"Sorted: \"+testable.getName()+\"=\" + FORMAT.format(diff) + \" secs\");",
      "info" : "ExpressionStatement[16695-16789]:ExpressionStatement[5653-5739]"
    }, {
      "left" : "\"Sorted: QuickSort middle element pivot=\"",
      "right" : "\"Sorted: \"",
      "info" : "StringLiteral[16714-16755]:StringLiteral[5672-5682]"
    }, {
      "left" : "if (showResult)",
      "right" : "if (showResult)",
      "info" : "IfStatement[16802-16861]:IfStatement[5748-5803]"
    }, {
      "left" : "showResult(sorted, result);",
      "right" : "showResult(sorted, result);",
      "info" : "ExpressionStatement[16834-16861]:ExpressionStatement[5776-5803]"
    }, {
      "left" : "quickResults",
      "right" : "results",
      "info" : "SimpleName[16910-16922]:SimpleName[5290-5297]"
    }, {
      "left" : "quickResults[quickCount++] = diff;",
      "right" : "results[count++] = diff;",
      "info" : "ExpressionStatement[16910-16944]:ExpressionStatement[5290-5314]"
    }, {
      "left" : "quickCount",
      "right" : "count",
      "info" : "SimpleName[16923-16933]:SimpleName[5298-5303]"
    }, {
      "left" : "putOutTheGarbage();",
      "right" : "putOutTheGarbage();",
      "info" : "ExpressionStatement[16957-16976]:ExpressionStatement[5845-5864]"
    }, {
      "left" : "bQuick",
      "right" : "bInsertion",
      "info" : "SimpleName[16990-16996]:SimpleName[5874-5884]"
    }, {
      "left" : "bQuick = System.nanoTime();",
      "right" : "bInsertion = System.nanoTime();",
      "info" : "ExpressionStatement[16990-17017]:ExpressionStatement[5874-5905]"
    }, {
      "left" : "result = QuickSort.sort(QuickSort.PIVOT_TYPE.MIDDLE, reverse.clone());",
      "right" : "result = InsertionSort.sort(reverse.clone());",
      "info" : "ExpressionStatement[17030-17100]:ExpressionStatement[5914-5959]"
    }, {
      "left" : "QuickSort",
      "right" : "InsertionSort",
      "info" : "SimpleName[17039-17048]:SimpleName[5923-5936]"
    }, {
      "left" : "if (checkResults && !check(result))",
      "right" : "if (checkResults && !check(result))",
      "info" : "IfStatement[17113-17205]:IfStatement[5968-6072]"
    }, {
      "left" : "System.err.println(\"QuickSort failed.\");",
      "right" : "System.err.println(testable.getName()+\" failed.\");",
      "info" : "ExpressionStatement[17165-17205]:ExpressionStatement[5493-5543]"
    }, {
      "left" : "aQuick",
      "right" : "aInsertion",
      "info" : "SimpleName[17218-17224]:SimpleName[6081-6091]"
    }, {
      "left" : "aQuick = System.nanoTime();",
      "right" : "aInsertion = System.nanoTime();",
      "info" : "ExpressionStatement[17218-17245]:ExpressionStatement[6081-6112]"
    }, {
      "left" : "diff = (aQuick - bQuick) / 1000000d / 1000d;",
      "right" : "diff = (aInsertion - bInsertion) / 1000000d / 1000d;",
      "info" : "ExpressionStatement[17258-17302]:ExpressionStatement[6121-6173]"
    }, {
      "left" : "aQuick",
      "right" : "aInsertion",
      "info" : "SimpleName[17266-17272]:SimpleName[6129-6139]"
    }, {
      "left" : "bQuick",
      "right" : "bInsertion",
      "info" : "SimpleName[17275-17281]:SimpleName[6142-6152]"
    }, {
      "left" : "System.out.println(\"Reverse sorted: QuickSort middle element pivot=\" + FORMAT.format(diff) + \" secs\");",
      "right" : "System.out.println(\"Reverse sorted: \"+testable.getName()+\"=\" + FORMAT.format(diff) + \" secs\");",
      "info" : "ExpressionStatement[17315-17417]:ExpressionStatement[6182-6276]"
    }, {
      "left" : "\"Reverse sorted: QuickSort middle element pivot=\"",
      "right" : "\"Reverse sorted: \"",
      "info" : "StringLiteral[17334-17383]:StringLiteral[6201-6219]"
    }, {
      "left" : "if (showResult)",
      "right" : "if (showResult)",
      "info" : "IfStatement[17430-17490]:IfStatement[6285-6341]"
    }, {
      "left" : "showResult(reverse, result);",
      "right" : "showResult(reverse, result);",
      "info" : "ExpressionStatement[17462-17490]:ExpressionStatement[6313-6341]"
    }, {
      "left" : "quickResults",
      "right" : "results",
      "info" : "SimpleName[17539-17551]:SimpleName[5812-5819]"
    }, {
      "left" : "quickResults[quickCount++] = diff;",
      "right" : "results[count++] = diff;",
      "info" : "ExpressionStatement[17539-17573]:ExpressionStatement[5812-5836]"
    }, {
      "left" : "quickCount",
      "right" : "count",
      "info" : "SimpleName[17552-17562]:SimpleName[5820-5825]"
    }, {
      "left" : "putOutTheGarbage();",
      "right" : "putOutTheGarbage();",
      "info" : "ExpressionStatement[17586-17605]:ExpressionStatement[6383-6402]"
    }, {
      "left" : "System.out.println();",
      "right" : "System.out.println();",
      "info" : "ExpressionStatement[17619-17640]:ExpressionStatement[6412-6433]"
    }, {
      "left" : "System.out.flush();",
      "right" : "System.out.flush();",
      "info" : "ExpressionStatement[17653-17672]:ExpressionStatement[6442-6461]"
    }, {
      "left" : "System.nanoTime()",
      "right" : "System.nanoTime()",
      "info" : "MethodInvocation[17695-17712]:MethodInvocation[4822-4839]"
    }, {
      "left" : "result = QuickSort.sort(QuickSort.PIVOT_TYPE.RANDOM, unsorted.clone());",
      "right" : "result = InsertionSort.sort(sorted.clone());",
      "info" : "ExpressionStatement[17726-17797]:ExpressionStatement[5392-5436]"
    }, {
      "left" : "QuickSort",
      "right" : "InsertionSort",
      "info" : "SimpleName[17735-17744]:SimpleName[5401-5414]"
    }, {
      "left" : "unsorted",
      "right" : "sorted",
      "info" : "SimpleName[17779-17787]:SimpleName[5420-5426]"
    }, {
      "left" : "if (checkResults && !check(result))",
      "right" : "if (checkResults && !check(result))",
      "info" : "IfStatement[17810-17909]:IfStatement[4909-5007]"
    }, {
      "left" : "System.err.println(\"Random QuickSort failed.\");",
      "right" : "System.err.println(testable.getName()+\"InsertionSort.\");",
      "info" : "ExpressionStatement[17862-17909]:ExpressionStatement[6016-6072]"
    }, {
      "left" : "System.nanoTime()",
      "right" : "System.nanoTime()",
      "info" : "MethodInvocation[17931-17948]:MethodInvocation[5034-5051]"
    }, {
      "left" : "diff",
      "right" : "diff",
      "info" : "SimpleName[17962-17966]:SimpleName[5068-5072]"
    }, {
      "left" : "(aQuick - bQuick) / 1000000d / 1000d",
      "right" : "(aInsertion - bInsertion) / 1000000d / 1000d",
      "info" : "InfixExpression[17969-18005]:InfixExpression[5075-5119]"
    }, {
      "left" : "aQuick",
      "right" : "aInsertion",
      "info" : "SimpleName[17970-17976]:SimpleName[5076-5086]"
    }, {
      "left" : "bQuick",
      "right" : "bInsertion",
      "info" : "SimpleName[17979-17985]:SimpleName[5089-5099]"
    }, {
      "left" : "System.out.println(\"Random: Randomized QuickSort=\" + FORMAT.format(diff) + \" secs\");",
      "right" : "System.out.println(\"Random: \"+testable.getName()+\"=\" + FORMAT.format(diff) + \" secs\");",
      "info" : "ExpressionStatement[18019-18103]:ExpressionStatement[5129-5215]"
    }, {
      "left" : "\"Random: Randomized QuickSort=\"",
      "right" : "\"Random: \"",
      "info" : "StringLiteral[18038-18069]:StringLiteral[5148-5158]"
    }, {
      "left" : "if (showResult)",
      "right" : "if (showResult)",
      "info" : "IfStatement[18116-18177]:IfStatement[5224-5281]"
    }, {
      "left" : "showResult(unsorted, result);",
      "right" : "showResult(unsorted, result);",
      "info" : "ExpressionStatement[18148-18177]:ExpressionStatement[5252-5281]"
    }, {
      "left" : "quickResults",
      "right" : "results",
      "info" : "SimpleName[18226-18238]:SimpleName[6350-6357]"
    }, {
      "left" : "quickResults[quickCount++] = diff;",
      "right" : "results[count++] = diff;",
      "info" : "ExpressionStatement[18226-18260]:ExpressionStatement[6350-6374]"
    }, {
      "left" : "quickCount",
      "right" : "count",
      "info" : "SimpleName[18239-18249]:SimpleName[6358-6363]"
    }, {
      "left" : "putOutTheGarbage();",
      "right" : "putOutTheGarbage();",
      "info" : "ExpressionStatement[18273-18292]:ExpressionStatement[5323-5342]"
    }, {
      "left" : "bQuick",
      "right" : "bInsertion",
      "info" : "SimpleName[18306-18312]:SimpleName[5352-5362]"
    }, {
      "left" : "bQuick = System.nanoTime();",
      "right" : "bInsertion = System.nanoTime();",
      "info" : "ExpressionStatement[18306-18333]:ExpressionStatement[5352-5383]"
    }, {
      "left" : "result = QuickSort.sort(QuickSort.PIVOT_TYPE.RANDOM, sorted.clone());",
      "right" : "result = InsertionSort.sort(sorted.clone());",
      "info" : "ExpressionStatement[18346-18415]:ExpressionStatement[5392-5436]"
    }, {
      "left" : "QuickSort",
      "right" : "InsertionSort",
      "info" : "SimpleName[18355-18364]:SimpleName[5401-5414]"
    }, {
      "left" : "if (checkResults && !check(result))",
      "right" : "if (checkResults && !check(result))",
      "info" : "IfStatement[18428-18527]:IfStatement[5445-5543]"
    }, {
      "left" : "System.err.println(\"Random QuickSort failed.\");",
      "right" : "System.err.println(testable.getName()+\"InsertionSort.\");",
      "info" : "ExpressionStatement[18480-18527]:ExpressionStatement[6016-6072]"
    }, {
      "left" : "aQuick",
      "right" : "aInsertion",
      "info" : "SimpleName[18540-18546]:SimpleName[5552-5562]"
    }, {
      "left" : "aQuick = System.nanoTime();",
      "right" : "aInsertion = System.nanoTime();",
      "info" : "ExpressionStatement[18540-18567]:ExpressionStatement[5552-5583]"
    }, {
      "left" : "diff = (aQuick - bQuick) / 1000000d / 1000d;",
      "right" : "diff = (aInsertion - bInsertion) / 1000000d / 1000d;",
      "info" : "ExpressionStatement[18580-18624]:ExpressionStatement[5592-5644]"
    }, {
      "left" : "aQuick",
      "right" : "aInsertion",
      "info" : "SimpleName[18588-18594]:SimpleName[5600-5610]"
    }, {
      "left" : "bQuick",
      "right" : "bInsertion",
      "info" : "SimpleName[18597-18603]:SimpleName[5613-5623]"
    }, {
      "left" : "System.out.println(\"Sorted: Randomized QuickSort=\" + FORMAT.format(diff) + \" secs\");",
      "right" : "System.out.println(\"Sorted: \"+testable.getName()+\"=\" + FORMAT.format(diff) + \" secs\");",
      "info" : "ExpressionStatement[18637-18721]:ExpressionStatement[5653-5739]"
    }, {
      "left" : "\"Sorted: Randomized QuickSort=\"",
      "right" : "\"Sorted: \"",
      "info" : "StringLiteral[18656-18687]:StringLiteral[5672-5682]"
    }, {
      "left" : "if (showResult)",
      "right" : "if (showResult)",
      "info" : "IfStatement[18734-18793]:IfStatement[5748-5803]"
    }, {
      "left" : "showResult(sorted, result);",
      "right" : "showResult(sorted, result);",
      "info" : "ExpressionStatement[18766-18793]:ExpressionStatement[5776-5803]"
    }, {
      "left" : "quickResults",
      "right" : "results",
      "info" : "SimpleName[18842-18854]:SimpleName[5290-5297]"
    }, {
      "left" : "quickResults[quickCount++] = diff;",
      "right" : "results[count++] = diff;",
      "info" : "ExpressionStatement[18842-18876]:ExpressionStatement[5290-5314]"
    }, {
      "left" : "quickCount",
      "right" : "count",
      "info" : "SimpleName[18855-18865]:SimpleName[5298-5303]"
    }, {
      "left" : "putOutTheGarbage();",
      "right" : "putOutTheGarbage();",
      "info" : "ExpressionStatement[18889-18908]:ExpressionStatement[5845-5864]"
    }, {
      "left" : "bQuick",
      "right" : "bInsertion",
      "info" : "SimpleName[18922-18928]:SimpleName[5874-5884]"
    }, {
      "left" : "bQuick = System.nanoTime();",
      "right" : "bInsertion = System.nanoTime();",
      "info" : "ExpressionStatement[18922-18949]:ExpressionStatement[5874-5905]"
    }, {
      "left" : "result = QuickSort.sort(QuickSort.PIVOT_TYPE.RANDOM, reverse.clone());",
      "right" : "result = InsertionSort.sort(reverse.clone());",
      "info" : "ExpressionStatement[18962-19032]:ExpressionStatement[5914-5959]"
    }, {
      "left" : "QuickSort",
      "right" : "InsertionSort",
      "info" : "SimpleName[18971-18980]:SimpleName[5923-5936]"
    }, {
      "left" : "if (checkResults && !check(result))",
      "right" : "if (checkResults && !check(result))",
      "info" : "IfStatement[19045-19144]:IfStatement[5968-6072]"
    }, {
      "left" : "System.err.println(\"Random QuickSort failed.\");",
      "right" : "System.err.println(testable.getName()+\"InsertionSort.\");",
      "info" : "ExpressionStatement[19097-19144]:ExpressionStatement[6016-6072]"
    }, {
      "left" : "aQuick",
      "right" : "aInsertion",
      "info" : "SimpleName[19157-19163]:SimpleName[6081-6091]"
    }, {
      "left" : "aQuick = System.nanoTime();",
      "right" : "aInsertion = System.nanoTime();",
      "info" : "ExpressionStatement[19157-19184]:ExpressionStatement[6081-6112]"
    }, {
      "left" : "diff = (aQuick - bQuick) / 1000000d / 1000d;",
      "right" : "diff = (aInsertion - bInsertion) / 1000000d / 1000d;",
      "info" : "ExpressionStatement[19197-19241]:ExpressionStatement[6121-6173]"
    }, {
      "left" : "aQuick",
      "right" : "aInsertion",
      "info" : "SimpleName[19205-19211]:SimpleName[6129-6139]"
    }, {
      "left" : "bQuick",
      "right" : "bInsertion",
      "info" : "SimpleName[19214-19220]:SimpleName[6142-6152]"
    }, {
      "left" : "System.out.println(\"Reverse sorted: Randomized QuickSort=\" + FORMAT.format(diff) + \" secs\");",
      "right" : "System.out.println(\"Reverse sorted: \"+testable.getName()+\"=\" + FORMAT.format(diff) + \" secs\");",
      "info" : "ExpressionStatement[19254-19346]:ExpressionStatement[6182-6276]"
    }, {
      "left" : "\"Reverse sorted: Randomized QuickSort=\"",
      "right" : "\"Reverse sorted: \"",
      "info" : "StringLiteral[19273-19312]:StringLiteral[6201-6219]"
    }, {
      "left" : "if (showResult)",
      "right" : "if (showResult)",
      "info" : "IfStatement[19359-19419]:IfStatement[6285-6341]"
    }, {
      "left" : "showResult(reverse, result);",
      "right" : "showResult(reverse, result);",
      "info" : "ExpressionStatement[19391-19419]:ExpressionStatement[6313-6341]"
    }, {
      "left" : "quickResults",
      "right" : "results",
      "info" : "SimpleName[19468-19480]:SimpleName[5812-5819]"
    }, {
      "left" : "quickResults[quickCount++] = diff;",
      "right" : "results[count++] = diff;",
      "info" : "ExpressionStatement[19468-19502]:ExpressionStatement[5812-5836]"
    }, {
      "left" : "quickCount",
      "right" : "count",
      "info" : "SimpleName[19481-19491]:SimpleName[5820-5825]"
    }, {
      "left" : "putOutTheGarbage();",
      "right" : "putOutTheGarbage();",
      "info" : "ExpressionStatement[19515-19534]:ExpressionStatement[6383-6402]"
    }, {
      "left" : "System.out.println();",
      "right" : "System.out.println();",
      "info" : "ExpressionStatement[19548-19569]:ExpressionStatement[6412-6433]"
    }, {
      "left" : "System.out.flush();",
      "right" : "System.out.flush();",
      "info" : "ExpressionStatement[19582-19601]:ExpressionStatement[6442-6461]"
    }, {
      "left" : "long bHeap = System.nanoTime();",
      "right" : "long bInsertion = System.nanoTime();",
      "info" : "VariableDeclarationStatement[19673-19704]:VariableDeclarationStatement[4804-4840]"
    }, {
      "left" : "bHeap",
      "right" : "bInsertion",
      "info" : "SimpleName[19678-19683]:SimpleName[4809-4819]"
    }, {
      "left" : "Integer[] result = HeapSort.sort(unsorted.clone());",
      "right" : "Integer[] result = testable.sort(unsorted.clone());",
      "info" : "VariableDeclarationStatement[19717-19768]:VariableDeclarationStatement[4849-4900]"
    }, {
      "left" : "HeapSort",
      "right" : "testable",
      "info" : "SimpleName[19736-19744]:SimpleName[4868-4876]"
    }, {
      "left" : "if (checkResults && !check(result))",
      "right" : "if (checkResults && !check(result))",
      "info" : "IfStatement[19781-19872]:IfStatement[4909-5007]"
    }, {
      "left" : "System.err.println(\"HeapSort failed.\");",
      "right" : "System.err.println(testable.getName()+\" failed.\");",
      "info" : "ExpressionStatement[19833-19872]:ExpressionStatement[4957-5007]"
    }, {
      "left" : "long aHeap = System.nanoTime();",
      "right" : "long aInsertion = System.nanoTime();",
      "info" : "VariableDeclarationStatement[19885-19916]:VariableDeclarationStatement[5016-5052]"
    }, {
      "left" : "aHeap",
      "right" : "aInsertion",
      "info" : "SimpleName[19890-19895]:SimpleName[5021-5031]"
    }, {
      "left" : "double diff = (aHeap - bHeap) / 1000000d / 1000d;",
      "right" : "double diff = (aInsertion - bInsertion) / 1000000d / 1000d;",
      "info" : "VariableDeclarationStatement[19929-19978]:VariableDeclarationStatement[5061-5120]"
    }, {
      "left" : "aHeap",
      "right" : "aInsertion",
      "info" : "SimpleName[19944-19949]:SimpleName[5076-5086]"
    }, {
      "left" : "bHeap",
      "right" : "bInsertion",
      "info" : "SimpleName[19952-19957]:SimpleName[5089-5099]"
    }, {
      "left" : "System.out.println(\"Random: HeapSort=\" + FORMAT.format(diff) + \" secs\");",
      "right" : "System.out.println(\"Random: \"+testable.getName()+\"=\" + FORMAT.format(diff) + \" secs\");",
      "info" : "ExpressionStatement[19991-20063]:ExpressionStatement[5129-5215]"
    }, {
      "left" : "\"Random: HeapSort=\"",
      "right" : "\"Random: \"",
      "info" : "StringLiteral[20010-20029]:StringLiteral[5148-5158]"
    }, {
      "left" : "if (showResult)",
      "right" : "if (showResult)",
      "info" : "IfStatement[20076-20137]:IfStatement[5224-5281]"
    }, {
      "left" : "showResult(unsorted, result);",
      "right" : "showResult(unsorted, result);",
      "info" : "ExpressionStatement[20108-20137]:ExpressionStatement[5252-5281]"
    }, {
      "left" : "heapResults",
      "right" : "results",
      "info" : "SimpleName[20186-20197]:SimpleName[5290-5297]"
    }, {
      "left" : "heapResults[heapCount++] = diff;",
      "right" : "results[count++] = diff;",
      "info" : "ExpressionStatement[20186-20218]:ExpressionStatement[5290-5314]"
    }, {
      "left" : "heapCount",
      "right" : "count",
      "info" : "SimpleName[20198-20207]:SimpleName[5298-5303]"
    }, {
      "left" : "putOutTheGarbage();",
      "right" : "putOutTheGarbage();",
      "info" : "ExpressionStatement[20231-20250]:ExpressionStatement[5323-5342]"
    }, {
      "left" : "bHeap",
      "right" : "bInsertion",
      "info" : "SimpleName[20264-20269]:SimpleName[5352-5362]"
    }, {
      "left" : "bHeap = System.nanoTime();",
      "right" : "bInsertion = System.nanoTime();",
      "info" : "ExpressionStatement[20264-20290]:ExpressionStatement[5352-5383]"
    }, {
      "left" : "result = HeapSort.sort(sorted.clone());",
      "right" : "result = InsertionSort.sort(sorted.clone());",
      "info" : "ExpressionStatement[20303-20342]:ExpressionStatement[5392-5436]"
    }, {
      "left" : "HeapSort",
      "right" : "InsertionSort",
      "info" : "SimpleName[20312-20320]:SimpleName[5401-5414]"
    }, {
      "left" : "if (checkResults && !check(result))",
      "right" : "if (checkResults && !check(result))",
      "info" : "IfStatement[20355-20446]:IfStatement[5445-5543]"
    }, {
      "left" : "System.err.println(\"HeapSort failed.\");",
      "right" : "System.err.println(testable.getName()+\" failed.\");",
      "info" : "ExpressionStatement[20407-20446]:ExpressionStatement[5493-5543]"
    }, {
      "left" : "aHeap",
      "right" : "aInsertion",
      "info" : "SimpleName[20459-20464]:SimpleName[5552-5562]"
    }, {
      "left" : "aHeap = System.nanoTime();",
      "right" : "aInsertion = System.nanoTime();",
      "info" : "ExpressionStatement[20459-20485]:ExpressionStatement[5552-5583]"
    }, {
      "left" : "diff = (aHeap - bHeap) / 1000000d / 1000d;",
      "right" : "diff = (aInsertion - bInsertion) / 1000000d / 1000d;",
      "info" : "ExpressionStatement[20498-20540]:ExpressionStatement[5592-5644]"
    }, {
      "left" : "aHeap",
      "right" : "aInsertion",
      "info" : "SimpleName[20506-20511]:SimpleName[5600-5610]"
    }, {
      "left" : "bHeap",
      "right" : "bInsertion",
      "info" : "SimpleName[20514-20519]:SimpleName[5613-5623]"
    }, {
      "left" : "System.out.println(\"Sorted: HeapSort=\" + FORMAT.format(diff) + \" secs\");",
      "right" : "System.out.println(\"Sorted: \"+testable.getName()+\"=\" + FORMAT.format(diff) + \" secs\");",
      "info" : "ExpressionStatement[20553-20625]:ExpressionStatement[5653-5739]"
    }, {
      "left" : "\"Sorted: HeapSort=\"",
      "right" : "\"Sorted: \"",
      "info" : "StringLiteral[20572-20591]:StringLiteral[5672-5682]"
    }, {
      "left" : "if (showResult)",
      "right" : "if (showResult)",
      "info" : "IfStatement[20638-20697]:IfStatement[5748-5803]"
    }, {
      "left" : "showResult(sorted, result);",
      "right" : "showResult(sorted, result);",
      "info" : "ExpressionStatement[20670-20697]:ExpressionStatement[5776-5803]"
    }, {
      "left" : "heapResults",
      "right" : "results",
      "info" : "SimpleName[20746-20757]:SimpleName[5812-5819]"
    }, {
      "left" : "heapResults[heapCount++] = diff;",
      "right" : "results[count++] = diff;",
      "info" : "ExpressionStatement[20746-20778]:ExpressionStatement[5812-5836]"
    }, {
      "left" : "heapCount",
      "right" : "count",
      "info" : "SimpleName[20758-20767]:SimpleName[5820-5825]"
    }, {
      "left" : "putOutTheGarbage();",
      "right" : "putOutTheGarbage();",
      "info" : "ExpressionStatement[20791-20810]:ExpressionStatement[5845-5864]"
    }, {
      "left" : "bHeap",
      "right" : "bInsertion",
      "info" : "SimpleName[20824-20829]:SimpleName[5874-5884]"
    }, {
      "left" : "bHeap = System.nanoTime();",
      "right" : "bInsertion = System.nanoTime();",
      "info" : "ExpressionStatement[20824-20850]:ExpressionStatement[5874-5905]"
    }, {
      "left" : "result = HeapSort.sort(reverse.clone());",
      "right" : "result = InsertionSort.sort(reverse.clone());",
      "info" : "ExpressionStatement[20863-20903]:ExpressionStatement[5914-5959]"
    }, {
      "left" : "HeapSort",
      "right" : "InsertionSort",
      "info" : "SimpleName[20872-20880]:SimpleName[5923-5936]"
    }, {
      "left" : "if (checkResults && !check(result))",
      "right" : "if (checkResults && !check(result))",
      "info" : "IfStatement[20916-21007]:IfStatement[5968-6072]"
    }, {
      "left" : "System.err.println(\"HeapSort failed.\");",
      "right" : "System.err.println(testable.getName()+\" failed.\");",
      "info" : "ExpressionStatement[20968-21007]:ExpressionStatement[4957-5007]"
    }, {
      "left" : "aHeap",
      "right" : "aInsertion",
      "info" : "SimpleName[21020-21025]:SimpleName[6081-6091]"
    }, {
      "left" : "aHeap = System.nanoTime();",
      "right" : "aInsertion = System.nanoTime();",
      "info" : "ExpressionStatement[21020-21046]:ExpressionStatement[6081-6112]"
    }, {
      "left" : "diff = (aHeap - bHeap) / 1000000d / 1000d;",
      "right" : "diff = (aInsertion - bInsertion) / 1000000d / 1000d;",
      "info" : "ExpressionStatement[21059-21101]:ExpressionStatement[6121-6173]"
    }, {
      "left" : "aHeap",
      "right" : "aInsertion",
      "info" : "SimpleName[21067-21072]:SimpleName[6129-6139]"
    }, {
      "left" : "bHeap",
      "right" : "bInsertion",
      "info" : "SimpleName[21075-21080]:SimpleName[6142-6152]"
    }, {
      "left" : "System.out.println(\"Reverse sorted: HeapSort=\" + FORMAT.format(diff) + \" secs\");",
      "right" : "System.out.println(\"Reverse sorted: \"+testable.getName()+\"=\" + FORMAT.format(diff) + \" secs\");",
      "info" : "ExpressionStatement[21114-21194]:ExpressionStatement[6182-6276]"
    }, {
      "left" : "\"Reverse sorted: HeapSort=\"",
      "right" : "\"Reverse sorted: \"",
      "info" : "StringLiteral[21133-21160]:StringLiteral[6201-6219]"
    }, {
      "left" : "if (showResult)",
      "right" : "if (showResult)",
      "info" : "IfStatement[21207-21267]:IfStatement[6285-6341]"
    }, {
      "left" : "showResult(reverse, result);",
      "right" : "showResult(reverse, result);",
      "info" : "ExpressionStatement[21239-21267]:ExpressionStatement[6313-6341]"
    }, {
      "left" : "heapResults",
      "right" : "results",
      "info" : "SimpleName[21316-21327]:SimpleName[6350-6357]"
    }, {
      "left" : "heapResults[heapCount++] = diff;",
      "right" : "results[count++] = diff;",
      "info" : "ExpressionStatement[21316-21348]:ExpressionStatement[6350-6374]"
    }, {
      "left" : "heapCount",
      "right" : "count",
      "info" : "SimpleName[21328-21337]:SimpleName[6358-6363]"
    }, {
      "left" : "putOutTheGarbage();",
      "right" : "putOutTheGarbage();",
      "info" : "ExpressionStatement[21361-21380]:ExpressionStatement[6383-6402]"
    }, {
      "left" : "System.out.println();",
      "right" : "System.out.println();",
      "info" : "ExpressionStatement[21394-21415]:ExpressionStatement[6412-6433]"
    }, {
      "left" : "System.out.flush();",
      "right" : "System.out.flush();",
      "info" : "ExpressionStatement[21428-21447]:ExpressionStatement[6442-6461]"
    }, {
      "left" : "long bCounting = System.nanoTime();",
      "right" : "long bInsertion = System.nanoTime();",
      "info" : "VariableDeclarationStatement[21528-21563]:VariableDeclarationStatement[4804-4840]"
    }, {
      "left" : "bCounting",
      "right" : "bInsertion",
      "info" : "SimpleName[21533-21542]:SimpleName[4809-4819]"
    }, {
      "left" : "Integer[] result = CountingSort.sort(unsorted.clone());",
      "right" : "Integer[] result = testable.sort(unsorted.clone());",
      "info" : "VariableDeclarationStatement[21576-21631]:VariableDeclarationStatement[4849-4900]"
    }, {
      "left" : "CountingSort",
      "right" : "testable",
      "info" : "SimpleName[21595-21607]:SimpleName[4868-4876]"
    }, {
      "left" : "if (checkResults && !check(result))",
      "right" : "if (checkResults && !check(result))",
      "info" : "IfStatement[21644-21739]:IfStatement[4909-5007]"
    }, {
      "left" : "System.err.println(\"CountingSort failed.\");",
      "right" : "System.err.println(testable.getName()+\"InsertionSort.\");",
      "info" : "ExpressionStatement[21696-21739]:ExpressionStatement[6016-6072]"
    }, {
      "left" : "long aCounting = System.nanoTime();",
      "right" : "long aInsertion = System.nanoTime();",
      "info" : "VariableDeclarationStatement[21752-21787]:VariableDeclarationStatement[5016-5052]"
    }, {
      "left" : "aCounting",
      "right" : "aInsertion",
      "info" : "SimpleName[21757-21766]:SimpleName[5021-5031]"
    }, {
      "left" : "double diff = (aCounting - bCounting) / 1000000d / 1000d;",
      "right" : "double diff = (aInsertion - bInsertion) / 1000000d / 1000d;",
      "info" : "VariableDeclarationStatement[21800-21857]:VariableDeclarationStatement[5061-5120]"
    }, {
      "left" : "aCounting",
      "right" : "aInsertion",
      "info" : "SimpleName[21815-21824]:SimpleName[5076-5086]"
    }, {
      "left" : "bCounting",
      "right" : "bInsertion",
      "info" : "SimpleName[21827-21836]:SimpleName[5089-5099]"
    }, {
      "left" : "System.out.println(\"Random: CountingSort=\" + FORMAT.format(diff) + \" secs\");",
      "right" : "System.out.println(\"Random: \"+testable.getName()+\"=\" + FORMAT.format(diff) + \" secs\");",
      "info" : "ExpressionStatement[21870-21946]:ExpressionStatement[5129-5215]"
    }, {
      "left" : "\"Random: CountingSort=\"",
      "right" : "\"Random: \"",
      "info" : "StringLiteral[21889-21912]:StringLiteral[5148-5158]"
    }, {
      "left" : "if (showResult)",
      "right" : "if (showResult)",
      "info" : "IfStatement[21959-22020]:IfStatement[5224-5281]"
    }, {
      "left" : "showResult(unsorted, result);",
      "right" : "showResult(unsorted, result);",
      "info" : "ExpressionStatement[21991-22020]:ExpressionStatement[5252-5281]"
    }, {
      "left" : "countingResults[countingCount++] = diff;",
      "right" : "shellCount = runTest(new Shell(), unsorted, sorted, shellResults, shellCount);",
      "info" : "ExpressionStatement[22069-22109]:ExpressionStatement[3283-3361]"
    }, {
      "left" : "countingResults",
      "right" : "results",
      "info" : "SimpleName[22069-22084]:SimpleName[5812-5819]"
    }, {
      "left" : "countingResults[countingCount++] = diff;",
      "right" : "results[count++] = diff;",
      "info" : "ExpressionStatement[22069-22109]:ExpressionStatement[5812-5836]"
    }, {
      "left" : "countingResults",
      "right" : "results",
      "info" : "SimpleName[22069-22084]:SimpleName[6350-6357]"
    }, {
      "left" : "countingResults[countingCount++] = diff;",
      "right" : "results[count++] = diff;",
      "info" : "ExpressionStatement[22069-22109]:ExpressionStatement[6350-6374]"
    }, {
      "left" : "countingCount",
      "right" : "count",
      "info" : "SimpleName[22085-22098]:SimpleName[5820-5825]"
    }, {
      "left" : "countingCount",
      "right" : "count",
      "info" : "SimpleName[22085-22098]:SimpleName[6358-6363]"
    }, {
      "left" : "diff",
      "right" : "shellCount",
      "info" : "SimpleName[22104-22108]:SimpleName[3283-3293]"
    }, {
      "left" : "putOutTheGarbage();",
      "right" : "putOutTheGarbage();",
      "info" : "ExpressionStatement[22122-22141]:ExpressionStatement[5323-5342]"
    }, {
      "left" : "bCounting",
      "right" : "bInsertion",
      "info" : "SimpleName[22155-22164]:SimpleName[5352-5362]"
    }, {
      "left" : "bCounting = System.nanoTime();",
      "right" : "bInsertion = System.nanoTime();",
      "info" : "ExpressionStatement[22155-22185]:ExpressionStatement[5352-5383]"
    }, {
      "left" : "result = CountingSort.sort(sorted.clone());",
      "right" : "result = InsertionSort.sort(sorted.clone());",
      "info" : "ExpressionStatement[22198-22241]:ExpressionStatement[5392-5436]"
    }, {
      "left" : "CountingSort",
      "right" : "InsertionSort",
      "info" : "SimpleName[22207-22219]:SimpleName[5401-5414]"
    }, {
      "left" : "if (checkResults && !check(result))",
      "right" : "if (checkResults && !check(result))",
      "info" : "IfStatement[22254-22349]:IfStatement[5445-5543]"
    }, {
      "left" : "System.err.println(\"CountingSort failed.\");",
      "right" : "System.err.println(testable.getName()+\"InsertionSort.\");",
      "info" : "ExpressionStatement[22306-22349]:ExpressionStatement[6016-6072]"
    }, {
      "left" : "aCounting",
      "right" : "aInsertion",
      "info" : "SimpleName[22362-22371]:SimpleName[5552-5562]"
    }, {
      "left" : "aCounting = System.nanoTime();",
      "right" : "aInsertion = System.nanoTime();",
      "info" : "ExpressionStatement[22362-22392]:ExpressionStatement[5552-5583]"
    }, {
      "left" : "diff = (aCounting - bCounting) / 1000000d / 1000d;",
      "right" : "diff = (aInsertion - bInsertion) / 1000000d / 1000d;",
      "info" : "ExpressionStatement[22405-22455]:ExpressionStatement[5592-5644]"
    }, {
      "left" : "aCounting",
      "right" : "aInsertion",
      "info" : "SimpleName[22413-22422]:SimpleName[5600-5610]"
    }, {
      "left" : "bCounting",
      "right" : "bInsertion",
      "info" : "SimpleName[22425-22434]:SimpleName[5613-5623]"
    }, {
      "left" : "System.out.println(\"Sorted: CountingSort=\" + FORMAT.format(diff) + \" secs\");",
      "right" : "System.out.println(\"Sorted: \"+testable.getName()+\"=\" + FORMAT.format(diff) + \" secs\");",
      "info" : "ExpressionStatement[22468-22544]:ExpressionStatement[5653-5739]"
    }, {
      "left" : "\"Sorted: CountingSort=\"",
      "right" : "\"Sorted: \"",
      "info" : "StringLiteral[22487-22510]:StringLiteral[5672-5682]"
    }, {
      "left" : "if (showResult)",
      "right" : "if (showResult)",
      "info" : "IfStatement[22557-22616]:IfStatement[5748-5803]"
    }, {
      "left" : "showResult(sorted, result);",
      "right" : "showResult(sorted, result);",
      "info" : "ExpressionStatement[22589-22616]:ExpressionStatement[5776-5803]"
    }, {
      "left" : "countingResults[countingCount++] = diff;",
      "right" : "quickCount = runTest(new QuickRandom(), unsorted, sorted, quickResults, quickCount);",
      "info" : "ExpressionStatement[22665-22705]:ExpressionStatement[3884-3968]"
    }, {
      "left" : "countingResults",
      "right" : "results",
      "info" : "SimpleName[22665-22680]:SimpleName[6350-6357]"
    }, {
      "left" : "countingResults[countingCount++] = diff;",
      "right" : "results[count++] = diff;",
      "info" : "ExpressionStatement[22665-22705]:ExpressionStatement[6350-6374]"
    }, {
      "left" : "countingCount",
      "right" : "count",
      "info" : "SimpleName[22681-22694]:SimpleName[6358-6363]"
    }, {
      "left" : "diff",
      "right" : "quickCount",
      "info" : "SimpleName[22700-22704]:SimpleName[3884-3894]"
    }, {
      "left" : "putOutTheGarbage();",
      "right" : "putOutTheGarbage();",
      "info" : "ExpressionStatement[22718-22737]:ExpressionStatement[5845-5864]"
    }, {
      "left" : "bCounting",
      "right" : "bInsertion",
      "info" : "SimpleName[22751-22760]:SimpleName[5874-5884]"
    }, {
      "left" : "bCounting = System.nanoTime();",
      "right" : "bInsertion = System.nanoTime();",
      "info" : "ExpressionStatement[22751-22781]:ExpressionStatement[5874-5905]"
    }, {
      "left" : "result = CountingSort.sort(reverse.clone());",
      "right" : "result = InsertionSort.sort(reverse.clone());",
      "info" : "ExpressionStatement[22794-22838]:ExpressionStatement[5914-5959]"
    }, {
      "left" : "CountingSort",
      "right" : "InsertionSort",
      "info" : "SimpleName[22803-22815]:SimpleName[5923-5936]"
    }, {
      "left" : "if (checkResults && !check(result))",
      "right" : "if (checkResults && !check(result))",
      "info" : "IfStatement[22851-22946]:IfStatement[5968-6072]"
    }, {
      "left" : "System.err.println(\"CountingSort failed.\");",
      "right" : "System.err.println(testable.getName()+\"InsertionSort.\");",
      "info" : "ExpressionStatement[22903-22946]:ExpressionStatement[6016-6072]"
    }, {
      "left" : "aCounting",
      "right" : "aInsertion",
      "info" : "SimpleName[22959-22968]:SimpleName[6081-6091]"
    }, {
      "left" : "aCounting = System.nanoTime();",
      "right" : "aInsertion = System.nanoTime();",
      "info" : "ExpressionStatement[22959-22989]:ExpressionStatement[6081-6112]"
    }, {
      "left" : "diff = (aCounting - bCounting) / 1000000d / 1000d;",
      "right" : "diff = (aInsertion - bInsertion) / 1000000d / 1000d;",
      "info" : "ExpressionStatement[23002-23052]:ExpressionStatement[6121-6173]"
    }, {
      "left" : "aCounting",
      "right" : "aInsertion",
      "info" : "SimpleName[23010-23019]:SimpleName[6129-6139]"
    }, {
      "left" : "bCounting",
      "right" : "bInsertion",
      "info" : "SimpleName[23022-23031]:SimpleName[6142-6152]"
    }, {
      "left" : "System.out.println(\"Reverse sorted: CountingSort=\" + FORMAT.format(diff) + \" secs\");",
      "right" : "System.out.println(\"Reverse sorted: \"+testable.getName()+\"=\" + FORMAT.format(diff) + \" secs\");",
      "info" : "ExpressionStatement[23065-23149]:ExpressionStatement[6182-6276]"
    }, {
      "left" : "\"Reverse sorted: CountingSort=\"",
      "right" : "\"Reverse sorted: \"",
      "info" : "StringLiteral[23084-23115]:StringLiteral[6201-6219]"
    }, {
      "left" : "if (showResult)",
      "right" : "if (showResult)",
      "info" : "IfStatement[23162-23222]:IfStatement[6285-6341]"
    }, {
      "left" : "showResult(reverse, result);",
      "right" : "showResult(reverse, result);",
      "info" : "ExpressionStatement[23194-23222]:ExpressionStatement[6313-6341]"
    }, {
      "left" : "countingResults[countingCount++] = diff;",
      "right" : "heapCount = runTest(new Heap(), unsorted, sorted, heapResults, heapCount);",
      "info" : "ExpressionStatement[23271-23311]:ExpressionStatement[4045-4119]"
    }, {
      "left" : "diff",
      "right" : "heapCount",
      "info" : "SimpleName[23306-23310]:SimpleName[4045-4054]"
    }, {
      "left" : "putOutTheGarbage();",
      "right" : "putOutTheGarbage();",
      "info" : "ExpressionStatement[23324-23343]:ExpressionStatement[6383-6402]"
    }, {
      "left" : "System.out.println();",
      "right" : "System.out.println();",
      "info" : "ExpressionStatement[23357-23378]:ExpressionStatement[6412-6433]"
    }, {
      "left" : "System.out.flush();",
      "right" : "System.out.flush();",
      "info" : "ExpressionStatement[23391-23410]:ExpressionStatement[6442-6461]"
    }, {
      "left" : "long bRadix = System.nanoTime();",
      "right" : "long bInsertion = System.nanoTime();",
      "info" : "VariableDeclarationStatement[23485-23517]:VariableDeclarationStatement[4804-4840]"
    }, {
      "left" : "bRadix",
      "right" : "bInsertion",
      "info" : "SimpleName[23490-23496]:SimpleName[4809-4819]"
    }, {
      "left" : "Integer[] result = RadixSort.sort(unsorted.clone());",
      "right" : "Integer[] result = testable.sort(unsorted.clone());",
      "info" : "VariableDeclarationStatement[23530-23582]:VariableDeclarationStatement[4849-4900]"
    }, {
      "left" : "RadixSort",
      "right" : "testable",
      "info" : "SimpleName[23549-23558]:SimpleName[4868-4876]"
    }, {
      "left" : "if (checkResults && !check(result))",
      "right" : "if (checkResults && !check(result))",
      "info" : "IfStatement[23595-23687]:IfStatement[4909-5007]"
    }, {
      "left" : "System.err.println(\"RadixSort failed.\");",
      "right" : "System.err.println(testable.getName()+\" failed.\");",
      "info" : "ExpressionStatement[23647-23687]:ExpressionStatement[5493-5543]"
    }, {
      "left" : "long aRadix = System.nanoTime();",
      "right" : "long aInsertion = System.nanoTime();",
      "info" : "VariableDeclarationStatement[23700-23732]:VariableDeclarationStatement[5016-5052]"
    }, {
      "left" : "aRadix",
      "right" : "aInsertion",
      "info" : "SimpleName[23705-23711]:SimpleName[5021-5031]"
    }, {
      "left" : "double diff = (aRadix - bRadix) / 1000000d / 1000d;",
      "right" : "double diff = (aInsertion - bInsertion) / 1000000d / 1000d;",
      "info" : "VariableDeclarationStatement[23745-23796]:VariableDeclarationStatement[5061-5120]"
    }, {
      "left" : "aRadix",
      "right" : "aInsertion",
      "info" : "SimpleName[23760-23766]:SimpleName[5076-5086]"
    }, {
      "left" : "bRadix",
      "right" : "bInsertion",
      "info" : "SimpleName[23769-23775]:SimpleName[5089-5099]"
    }, {
      "left" : "System.out.println(\"Random: RadixSort=\" + FORMAT.format(diff) + \" secs\");",
      "right" : "System.out.println(\"Random: \"+testable.getName()+\"=\" + FORMAT.format(diff) + \" secs\");",
      "info" : "ExpressionStatement[23809-23882]:ExpressionStatement[5129-5215]"
    }, {
      "left" : "\"Random: RadixSort=\"",
      "right" : "\"Random: \"",
      "info" : "StringLiteral[23828-23848]:StringLiteral[5148-5158]"
    }, {
      "left" : "if (showResult)",
      "right" : "if (showResult)",
      "info" : "IfStatement[23895-23956]:IfStatement[5224-5281]"
    }, {
      "left" : "showResult(unsorted, result);",
      "right" : "showResult(unsorted, result);",
      "info" : "ExpressionStatement[23927-23956]:ExpressionStatement[5252-5281]"
    }, {
      "left" : "radixResults",
      "right" : "results",
      "info" : "SimpleName[24005-24017]:SimpleName[6350-6357]"
    }, {
      "left" : "radixResults[radixCount++] = diff;",
      "right" : "results[count++] = diff;",
      "info" : "ExpressionStatement[24005-24039]:ExpressionStatement[6350-6374]"
    }, {
      "left" : "radixCount",
      "right" : "count",
      "info" : "SimpleName[24018-24028]:SimpleName[6358-6363]"
    }, {
      "left" : "putOutTheGarbage();",
      "right" : "putOutTheGarbage();",
      "info" : "ExpressionStatement[24052-24071]:ExpressionStatement[5323-5342]"
    }, {
      "left" : "bRadix",
      "right" : "bInsertion",
      "info" : "SimpleName[24085-24091]:SimpleName[5352-5362]"
    }, {
      "left" : "bRadix = System.nanoTime();",
      "right" : "bInsertion = System.nanoTime();",
      "info" : "ExpressionStatement[24085-24112]:ExpressionStatement[5352-5383]"
    }, {
      "left" : "result = RadixSort.sort(sorted.clone());",
      "right" : "result = InsertionSort.sort(sorted.clone());",
      "info" : "ExpressionStatement[24125-24165]:ExpressionStatement[5392-5436]"
    }, {
      "left" : "RadixSort",
      "right" : "InsertionSort",
      "info" : "SimpleName[24134-24143]:SimpleName[5401-5414]"
    }, {
      "left" : "if (checkResults && !check(result))",
      "right" : "if (checkResults && !check(result))",
      "info" : "IfStatement[24178-24270]:IfStatement[5445-5543]"
    }, {
      "left" : "System.err.println(\"RadixSort failed.\");",
      "right" : "System.err.println(testable.getName()+\" failed.\");",
      "info" : "ExpressionStatement[24230-24270]:ExpressionStatement[4957-5007]"
    }, {
      "left" : "aRadix",
      "right" : "aInsertion",
      "info" : "SimpleName[24283-24289]:SimpleName[5552-5562]"
    }, {
      "left" : "aRadix = System.nanoTime();",
      "right" : "aInsertion = System.nanoTime();",
      "info" : "ExpressionStatement[24283-24310]:ExpressionStatement[5552-5583]"
    }, {
      "left" : "diff = (aRadix - bRadix) / 1000000d / 1000d;",
      "right" : "diff = (aInsertion - bInsertion) / 1000000d / 1000d;",
      "info" : "ExpressionStatement[24323-24367]:ExpressionStatement[5592-5644]"
    }, {
      "left" : "aRadix",
      "right" : "aInsertion",
      "info" : "SimpleName[24331-24337]:SimpleName[5600-5610]"
    }, {
      "left" : "bRadix",
      "right" : "bInsertion",
      "info" : "SimpleName[24340-24346]:SimpleName[5613-5623]"
    }, {
      "left" : "System.out.println(\"Sorted: RadixSort=\" + FORMAT.format(diff) + \" secs\");",
      "right" : "System.out.println(\"Sorted: \"+testable.getName()+\"=\" + FORMAT.format(diff) + \" secs\");",
      "info" : "ExpressionStatement[24380-24453]:ExpressionStatement[5653-5739]"
    }, {
      "left" : "\"Sorted: RadixSort=\"",
      "right" : "\"Sorted: \"",
      "info" : "StringLiteral[24399-24419]:StringLiteral[5672-5682]"
    }, {
      "left" : "if (showResult)",
      "right" : "if (showResult)",
      "info" : "IfStatement[24466-24525]:IfStatement[5748-5803]"
    }, {
      "left" : "showResult(sorted, result);",
      "right" : "showResult(sorted, result);",
      "info" : "ExpressionStatement[24498-24525]:ExpressionStatement[5776-5803]"
    }, {
      "left" : "radixResults",
      "right" : "results",
      "info" : "SimpleName[24574-24586]:SimpleName[5290-5297]"
    }, {
      "left" : "radixResults[radixCount++] = diff;",
      "right" : "results[count++] = diff;",
      "info" : "ExpressionStatement[24574-24608]:ExpressionStatement[5290-5314]"
    }, {
      "left" : "radixCount",
      "right" : "count",
      "info" : "SimpleName[24587-24597]:SimpleName[5298-5303]"
    }, {
      "left" : "putOutTheGarbage();",
      "right" : "putOutTheGarbage();",
      "info" : "ExpressionStatement[24621-24640]:ExpressionStatement[5845-5864]"
    }, {
      "left" : "bRadix",
      "right" : "bInsertion",
      "info" : "SimpleName[24654-24660]:SimpleName[5874-5884]"
    }, {
      "left" : "bRadix = System.nanoTime();",
      "right" : "bInsertion = System.nanoTime();",
      "info" : "ExpressionStatement[24654-24681]:ExpressionStatement[5874-5905]"
    }, {
      "left" : "result = RadixSort.sort(reverse.clone());",
      "right" : "result = InsertionSort.sort(reverse.clone());",
      "info" : "ExpressionStatement[24694-24735]:ExpressionStatement[5914-5959]"
    }, {
      "left" : "RadixSort",
      "right" : "InsertionSort",
      "info" : "SimpleName[24703-24712]:SimpleName[5923-5936]"
    }, {
      "left" : "if (checkResults && !check(result))",
      "right" : "if (checkResults && !check(result))",
      "info" : "IfStatement[24748-24840]:IfStatement[5968-6072]"
    }, {
      "left" : "System.err.println(\"RadixSort failed.\");",
      "right" : "System.err.println(testable.getName()+\" failed.\");",
      "info" : "ExpressionStatement[24800-24840]:ExpressionStatement[5493-5543]"
    }, {
      "left" : "aRadix",
      "right" : "aInsertion",
      "info" : "SimpleName[24853-24859]:SimpleName[6081-6091]"
    }, {
      "left" : "aRadix = System.nanoTime();",
      "right" : "aInsertion = System.nanoTime();",
      "info" : "ExpressionStatement[24853-24880]:ExpressionStatement[6081-6112]"
    }, {
      "left" : "diff = (aRadix - bRadix) / 1000000d / 1000d;",
      "right" : "diff = (aInsertion - bInsertion) / 1000000d / 1000d;",
      "info" : "ExpressionStatement[24893-24937]:ExpressionStatement[6121-6173]"
    }, {
      "left" : "aRadix",
      "right" : "aInsertion",
      "info" : "SimpleName[24901-24907]:SimpleName[6129-6139]"
    }, {
      "left" : "bRadix",
      "right" : "bInsertion",
      "info" : "SimpleName[24910-24916]:SimpleName[6142-6152]"
    }, {
      "left" : "System.out.println(\"Reverse sorted: RadixSort=\" + FORMAT.format(diff) + \" secs\");",
      "right" : "System.out.println(\"Reverse sorted: \"+testable.getName()+\"=\" + FORMAT.format(diff) + \" secs\");",
      "info" : "ExpressionStatement[24950-25031]:ExpressionStatement[6182-6276]"
    }, {
      "left" : "\"Reverse sorted: RadixSort=\"",
      "right" : "\"Reverse sorted: \"",
      "info" : "StringLiteral[24969-24997]:StringLiteral[6201-6219]"
    }, {
      "left" : "if (showResult)",
      "right" : "if (showResult)",
      "info" : "IfStatement[25044-25104]:IfStatement[6285-6341]"
    }, {
      "left" : "showResult(reverse, result);",
      "right" : "showResult(reverse, result);",
      "info" : "ExpressionStatement[25076-25104]:ExpressionStatement[6313-6341]"
    }, {
      "left" : "radixResults",
      "right" : "results",
      "info" : "SimpleName[25153-25165]:SimpleName[5812-5819]"
    }, {
      "left" : "radixResults[radixCount++] = diff;",
      "right" : "results[count++] = diff;",
      "info" : "ExpressionStatement[25153-25187]:ExpressionStatement[5812-5836]"
    }, {
      "left" : "radixCount",
      "right" : "count",
      "info" : "SimpleName[25166-25176]:SimpleName[5820-5825]"
    }, {
      "left" : "putOutTheGarbage();",
      "right" : "putOutTheGarbage();",
      "info" : "ExpressionStatement[25200-25219]:ExpressionStatement[6383-6402]"
    }, {
      "left" : "System.out.println();",
      "right" : "System.out.println();",
      "info" : "ExpressionStatement[25233-25254]:ExpressionStatement[6412-6433]"
    }, {
      "left" : "System.out.flush();",
      "right" : "System.out.flush();",
      "info" : "ExpressionStatement[25267-25286]:ExpressionStatement[6442-6461]"
    }, {
      "left" : "long bRadix = System.nanoTime();",
      "right" : "long bInsertion = System.nanoTime();",
      "info" : "VariableDeclarationStatement[25376-25408]:VariableDeclarationStatement[4804-4840]"
    }, {
      "left" : "bRadix",
      "right" : "bInsertion",
      "info" : "SimpleName[25381-25387]:SimpleName[4809-4819]"
    }, {
      "left" : "Integer[] result = AmericanFlagSort.sort(unsorted.clone());",
      "right" : "Integer[] result = testable.sort(unsorted.clone());",
      "info" : "VariableDeclarationStatement[25421-25480]:VariableDeclarationStatement[4849-4900]"
    }, {
      "left" : "AmericanFlagSort",
      "right" : "testable",
      "info" : "SimpleName[25440-25456]:SimpleName[4868-4876]"
    }, {
      "left" : "if (checkResults && !check(result))",
      "right" : "if (checkResults && !check(result))",
      "info" : "IfStatement[25493-25593]:IfStatement[4909-5007]"
    }, {
      "left" : "System.err.println(\"AmericanFlag sort failed.\");",
      "right" : "System.err.println(testable.getName()+\"InsertionSort.\");",
      "info" : "ExpressionStatement[25545-25593]:ExpressionStatement[6016-6072]"
    }, {
      "left" : "long aRadix = System.nanoTime();",
      "right" : "long aInsertion = System.nanoTime();",
      "info" : "VariableDeclarationStatement[25606-25638]:VariableDeclarationStatement[5016-5052]"
    }, {
      "left" : "aRadix",
      "right" : "aInsertion",
      "info" : "SimpleName[25611-25617]:SimpleName[5021-5031]"
    }, {
      "left" : "double diff = (aRadix - bRadix) / 1000000d / 1000d;",
      "right" : "double diff = (aInsertion - bInsertion) / 1000000d / 1000d;",
      "info" : "VariableDeclarationStatement[25651-25702]:VariableDeclarationStatement[5061-5120]"
    }, {
      "left" : "aRadix",
      "right" : "aInsertion",
      "info" : "SimpleName[25666-25672]:SimpleName[5076-5086]"
    }, {
      "left" : "bRadix",
      "right" : "bInsertion",
      "info" : "SimpleName[25675-25681]:SimpleName[5089-5099]"
    }, {
      "left" : "System.out.println(\"Random: AmericanFlag sort=\" + FORMAT.format(diff) + \" secs\");",
      "right" : "System.out.println(\"Random: \"+testable.getName()+\"=\" + FORMAT.format(diff) + \" secs\");",
      "info" : "ExpressionStatement[25715-25796]:ExpressionStatement[5129-5215]"
    }, {
      "left" : "\"Random: AmericanFlag sort=\"",
      "right" : "\"Random: \"",
      "info" : "StringLiteral[25734-25762]:StringLiteral[5148-5158]"
    }, {
      "left" : "if (showResult)",
      "right" : "if (showResult)",
      "info" : "IfStatement[25809-25870]:IfStatement[5224-5281]"
    }, {
      "left" : "showResult(unsorted, result);",
      "right" : "showResult(unsorted, result);",
      "info" : "ExpressionStatement[25841-25870]:ExpressionStatement[5252-5281]"
    }, {
      "left" : "putOutTheGarbage();",
      "right" : "putOutTheGarbage();",
      "info" : "ExpressionStatement[25980-25999]:ExpressionStatement[5323-5342]"
    }, {
      "left" : "bRadix",
      "right" : "bInsertion",
      "info" : "SimpleName[26013-26019]:SimpleName[5352-5362]"
    }, {
      "left" : "bRadix = System.nanoTime();",
      "right" : "bInsertion = System.nanoTime();",
      "info" : "ExpressionStatement[26013-26040]:ExpressionStatement[5352-5383]"
    }, {
      "left" : "result = AmericanFlagSort.sort(sorted.clone());",
      "right" : "result = InsertionSort.sort(sorted.clone());",
      "info" : "ExpressionStatement[26053-26100]:ExpressionStatement[5392-5436]"
    }, {
      "left" : "AmericanFlagSort",
      "right" : "InsertionSort",
      "info" : "SimpleName[26062-26078]:SimpleName[5401-5414]"
    }, {
      "left" : "if (checkResults && !check(result))",
      "right" : "if (checkResults && !check(result))",
      "info" : "IfStatement[26113-26213]:IfStatement[5445-5543]"
    }, {
      "left" : "System.err.println(\"AmericanFlag sort failed.\");",
      "right" : "System.err.println(testable.getName()+\"InsertionSort.\");",
      "info" : "ExpressionStatement[26165-26213]:ExpressionStatement[6016-6072]"
    }, {
      "left" : "aRadix",
      "right" : "aInsertion",
      "info" : "SimpleName[26226-26232]:SimpleName[5552-5562]"
    }, {
      "left" : "aRadix = System.nanoTime();",
      "right" : "aInsertion = System.nanoTime();",
      "info" : "ExpressionStatement[26226-26253]:ExpressionStatement[5552-5583]"
    }, {
      "left" : "diff = (aRadix - bRadix) / 1000000d / 1000d;",
      "right" : "diff = (aInsertion - bInsertion) / 1000000d / 1000d;",
      "info" : "ExpressionStatement[26266-26310]:ExpressionStatement[5592-5644]"
    }, {
      "left" : "aRadix",
      "right" : "aInsertion",
      "info" : "SimpleName[26274-26280]:SimpleName[5600-5610]"
    }, {
      "left" : "bRadix",
      "right" : "bInsertion",
      "info" : "SimpleName[26283-26289]:SimpleName[5613-5623]"
    }, {
      "left" : "System.out.println(\"Sorted: AmericanFlag sort=\" + FORMAT.format(diff) + \" secs\");",
      "right" : "System.out.println(\"Sorted: \"+testable.getName()+\"=\" + FORMAT.format(diff) + \" secs\");",
      "info" : "ExpressionStatement[26323-26404]:ExpressionStatement[5653-5739]"
    }, {
      "left" : "\"Sorted: AmericanFlag sort=\"",
      "right" : "\"Sorted: \"",
      "info" : "StringLiteral[26342-26370]:StringLiteral[5672-5682]"
    }, {
      "left" : "if (showResult)",
      "right" : "if (showResult)",
      "info" : "IfStatement[26417-26476]:IfStatement[5748-5803]"
    }, {
      "left" : "showResult(sorted, result);",
      "right" : "showResult(sorted, result);",
      "info" : "ExpressionStatement[26449-26476]:ExpressionStatement[5776-5803]"
    }, {
      "left" : "putOutTheGarbage();",
      "right" : "putOutTheGarbage();",
      "info" : "ExpressionStatement[26586-26605]:ExpressionStatement[5845-5864]"
    }, {
      "left" : "bRadix",
      "right" : "bInsertion",
      "info" : "SimpleName[26619-26625]:SimpleName[5874-5884]"
    }, {
      "left" : "bRadix = System.nanoTime();",
      "right" : "bInsertion = System.nanoTime();",
      "info" : "ExpressionStatement[26619-26646]:ExpressionStatement[5874-5905]"
    }, {
      "left" : "result = AmericanFlagSort.sort(reverse.clone());",
      "right" : "result = InsertionSort.sort(reverse.clone());",
      "info" : "ExpressionStatement[26659-26707]:ExpressionStatement[5914-5959]"
    }, {
      "left" : "AmericanFlagSort",
      "right" : "InsertionSort",
      "info" : "SimpleName[26668-26684]:SimpleName[5923-5936]"
    }, {
      "left" : "if (checkResults && !check(result))",
      "right" : "if (checkResults && !check(result))",
      "info" : "IfStatement[26720-26820]:IfStatement[5968-6072]"
    }, {
      "left" : "System.err.println(\"AmericanFlag sort failed.\");",
      "right" : "System.err.println(testable.getName()+\"InsertionSort.\");",
      "info" : "ExpressionStatement[26772-26820]:ExpressionStatement[6016-6072]"
    }, {
      "left" : "aRadix",
      "right" : "aInsertion",
      "info" : "SimpleName[26833-26839]:SimpleName[6081-6091]"
    }, {
      "left" : "aRadix = System.nanoTime();",
      "right" : "aInsertion = System.nanoTime();",
      "info" : "ExpressionStatement[26833-26860]:ExpressionStatement[6081-6112]"
    }, {
      "left" : "diff = (aRadix - bRadix) / 1000000d / 1000d;",
      "right" : "diff = (aInsertion - bInsertion) / 1000000d / 1000d;",
      "info" : "ExpressionStatement[26873-26917]:ExpressionStatement[6121-6173]"
    }, {
      "left" : "aRadix",
      "right" : "aInsertion",
      "info" : "SimpleName[26881-26887]:SimpleName[6129-6139]"
    }, {
      "left" : "bRadix",
      "right" : "bInsertion",
      "info" : "SimpleName[26890-26896]:SimpleName[6142-6152]"
    }, {
      "left" : "System.out.println(\"Reverse sorted: AmericanFlag sort=\" + FORMAT.format(diff) + \" secs\");",
      "right" : "System.out.println(\"Reverse sorted: \"+testable.getName()+\"=\" + FORMAT.format(diff) + \" secs\");",
      "info" : "ExpressionStatement[26930-27019]:ExpressionStatement[6182-6276]"
    }, {
      "left" : "\"Reverse sorted: AmericanFlag sort=\"",
      "right" : "\"Reverse sorted: \"",
      "info" : "StringLiteral[26949-26985]:StringLiteral[6201-6219]"
    }, {
      "left" : "if (showResult)",
      "right" : "if (showResult)",
      "info" : "IfStatement[27032-27092]:IfStatement[6285-6341]"
    }, {
      "left" : "showResult(reverse, result);",
      "right" : "showResult(reverse, result);",
      "info" : "ExpressionStatement[27064-27092]:ExpressionStatement[6313-6341]"
    }, {
      "left" : "putOutTheGarbage();",
      "right" : "putOutTheGarbage();",
      "info" : "ExpressionStatement[27202-27221]:ExpressionStatement[6383-6402]"
    }, {
      "left" : "System.out.println();",
      "right" : "System.out.println();",
      "info" : "ExpressionStatement[27235-27256]:ExpressionStatement[6412-6433]"
    }, {
      "left" : "System.out.flush();",
      "right" : "System.out.flush();",
      "info" : "ExpressionStatement[27269-27288]:ExpressionStatement[6442-6461]"
    }, {
      "left" : "showComparison();",
      "right" : "showComparison();",
      "info" : "ExpressionStatement[27340-27357]:ExpressionStatement[3053-3070]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[27369-27376]:Modifier[10338-10345]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[27377-27383]:Modifier[10346-10352]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[27384-27389]:Modifier[10353-10358]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[27390-27394]:PrimitiveType[10359-10363]"
    }, {
      "left" : "showComparison",
      "right" : "showComparison",
      "info" : "SimpleName[27395-27409]:SimpleName[10364-10378]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27412-30418]:Block[10381-13424]"
    }, {
      "left" : "StringBuilder resultsBuilder = new StringBuilder();",
      "right" : "StringBuilder resultsBuilder = new StringBuilder();",
      "info" : "VariableDeclarationStatement[27422-27473]:VariableDeclarationStatement[10391-10442]"
    }, {
      "left" : "String format = \"%-32s%-15s%-15s%-15s\\n\";",
      "right" : "String format = \"%-32s%-15s%-15s%-15s\\n\";",
      "info" : "VariableDeclarationStatement[27482-27523]:VariableDeclarationStatement[10533-10574]"
    }, {
      "left" : "Formatter formatter = new Formatter(resultsBuilder, Locale.US);",
      "right" : "Formatter formatter = new Formatter(resultsBuilder, Locale.US);",
      "info" : "VariableDeclarationStatement[27532-27595]:VariableDeclarationStatement[10583-10646]"
    }, {
      "left" : "formatter.format(format, \"Algorithm\",\"Random\",\"Sorted\",\"Reverse Sorted\");",
      "right" : "formatter.format(format, \"Algorithm\",\"Random\",\"Sorted\",\"Reverse Sorted\");",
      "info" : "ExpressionStatement[27605-27678]:ExpressionStatement[10656-10729]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27706-27910]:Block[10766-10970]"
    }, {
      "left" : "int i = 0;",
      "right" : "int i = 0;",
      "info" : "VariableDeclarationStatement[27720-27730]:VariableDeclarationStatement[11243-11253]"
    }, {
      "left" : "formatter.format(format, \"Insertion sort\", FORMAT.format(insertionResults[i++]), FORMAT.format(insertionResults[i++]), FORMAT.format(insertionResults[i++]));",
      "right" : "formatter.format(format, \"Insertion sort\", FORMAT.format(insertionResults[i++]), FORMAT.format(insertionResults[i++]), FORMAT.format(insertionResults[i++]));",
      "info" : "ExpressionStatement[27743-27900]:ExpressionStatement[10803-10960]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27935-28127]:Block[11004-11196]"
    }, {
      "left" : "int i = 0;",
      "right" : "int i = 0;",
      "info" : "VariableDeclarationStatement[27949-27959]:VariableDeclarationStatement[10780-10790]"
    }, {
      "left" : "formatter.format(format, \"Bubble sort\", FORMAT.format(bubbleResults[i++]), FORMAT.format(bubbleResults[i++]), FORMAT.format(bubbleResults[i++]));",
      "right" : "formatter.format(format, \"Bubble sort\", FORMAT.format(bubbleResults[i++]), FORMAT.format(bubbleResults[i++]), FORMAT.format(bubbleResults[i++]));",
      "info" : "ExpressionStatement[27972-28117]:ExpressionStatement[11041-11186]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28151-28339]:Block[11229-11417]"
    }, {
      "left" : "int i = 0;",
      "right" : "int i = 0;",
      "info" : "VariableDeclarationStatement[28165-28175]:VariableDeclarationStatement[12452-12462]"
    }, {
      "left" : "formatter.format(format, \"Shell sort\", FORMAT.format(shellResults[i++]), FORMAT.format(shellResults[i++]), FORMAT.format(shellResults[i++]));",
      "right" : "formatter.format(format, \"Shell sort\", FORMAT.format(shellResults[i++]), FORMAT.format(shellResults[i++]), FORMAT.format(shellResults[i++]));",
      "info" : "ExpressionStatement[28188-28329]:ExpressionStatement[11266-11407]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28370-28590]:Block[11450-11818]"
    }, {
      "left" : "int i = 0;",
      "right" : "int i = 0;",
      "info" : "VariableDeclarationStatement[28384-28394]:VariableDeclarationStatement[13133-13143]"
    }, {
      "left" : "formatter.format(format, \"Merge (in-place) sort\", FORMAT.format(mergeInPlaceResults[i++]), FORMAT.format(mergeInPlaceResults[i++]), FORMAT.format(mergeInPlaceResults[i++]));",
      "right" : "formatter.format(format, \"Merge (in-place) sort\", FORMAT.format(mergeResults[i++]), FORMAT.format(mergeResults[i++]), FORMAT.format(mergeResults[i++]));",
      "info" : "ExpressionStatement[28407-28580]:ExpressionStatement[11487-11639]"
    }, {
      "left" : "mergeInPlaceResults",
      "right" : "mergeResults",
      "info" : "SimpleName[28471-28490]:SimpleName[11551-11563]"
    }, {
      "left" : "mergeInPlaceResults",
      "right" : "mergeResults",
      "info" : "SimpleName[28512-28531]:SimpleName[11585-11597]"
    }, {
      "left" : "mergeInPlaceResults",
      "right" : "mergeResults",
      "info" : "SimpleName[28553-28572]:SimpleName[11619-11631]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28624-28857]:Block[12658-12858]"
    }, {
      "left" : "int i = 0;",
      "right" : "int i = 0;",
      "info" : "VariableDeclarationStatement[28638-28648]:VariableDeclarationStatement[12672-12682]"
    }, {
      "left" : "formatter.format(format, \"Merge (not-in-place) sort\", FORMAT.format(mergeNotInPlaceResults[i++]), FORMAT.format(mergeNotInPlaceResults[i++]), FORMAT.format(mergeNotInPlaceResults[i++]));",
      "right" : "formatter.format(format, \"Merge (not-in-place) sort\", FORMAT.format(mergeResults[i++]), FORMAT.format(mergeResults[i++]), FORMAT.format(mergeResults[i++]));",
      "info" : "ExpressionStatement[28661-28847]:ExpressionStatement[11652-11808]"
    }, {
      "left" : "mergeNotInPlaceResults",
      "right" : "mergeResults",
      "info" : "SimpleName[28729-28751]:SimpleName[11720-11732]"
    }, {
      "left" : "mergeNotInPlaceResults",
      "right" : "mergeResults",
      "info" : "SimpleName[28773-28795]:SimpleName[11754-11766]"
    }, {
      "left" : "mergeNotInPlaceResults",
      "right" : "mergeResults",
      "info" : "SimpleName[28817-28839]:SimpleName[11788-11800]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28881-29436]:Block[11851-12406]"
    }, {
      "left" : "int i = 0;",
      "right" : "int i = 0;",
      "info" : "VariableDeclarationStatement[28895-28905]:VariableDeclarationStatement[11464-11474]"
    }, {
      "left" : "formatter.format(format, \"Quicksort with first as pivot\", FORMAT.format(quickResults[i++]), FORMAT.format(quickResults[i++]), FORMAT.format(quickResults[i++]));",
      "right" : "formatter.format(format, \"Quicksort with first as pivot\", FORMAT.format(quickResults[i++]), FORMAT.format(quickResults[i++]), FORMAT.format(quickResults[i++]));",
      "info" : "ExpressionStatement[28918-29078]:ExpressionStatement[11888-12048]"
    }, {
      "left" : "formatter.format(format, \"Quicksort with middle as pivot\", FORMAT.format(quickResults[i++]), FORMAT.format(quickResults[i++]), FORMAT.format(quickResults[i++]));",
      "right" : "formatter.format(format, \"Quicksort with middle as pivot\", FORMAT.format(quickResults[i++]), FORMAT.format(quickResults[i++]), FORMAT.format(quickResults[i++]));",
      "info" : "ExpressionStatement[29091-29252]:ExpressionStatement[12061-12222]"
    }, {
      "left" : "formatter.format(format, \"Quicksort with random as pivot\", FORMAT.format(quickResults[i++]), FORMAT.format(quickResults[i++]), FORMAT.format(quickResults[i++]));",
      "right" : "formatter.format(format, \"Quicksort with random as pivot\", FORMAT.format(quickResults[i++]), FORMAT.format(quickResults[i++]), FORMAT.format(quickResults[i++]));",
      "info" : "ExpressionStatement[29265-29426]:ExpressionStatement[12235-12396]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29459-29643]:Block[12438-12622]"
    }, {
      "left" : "int i = 0;",
      "right" : "int i = 0;",
      "info" : "VariableDeclarationStatement[29473-29483]:VariableDeclarationStatement[11865-11875]"
    }, {
      "left" : "formatter.format(format, \"Heap sort\", FORMAT.format(heapResults[i++]), FORMAT.format(heapResults[i++]), FORMAT.format(heapResults[i++]));",
      "right" : "formatter.format(format, \"Heap sort\", FORMAT.format(heapResults[i++]), FORMAT.format(heapResults[i++]), FORMAT.format(heapResults[i++]));",
      "info" : "ExpressionStatement[29496-29633]:ExpressionStatement[12475-12612]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29670-29870]:Block[12891-13079]"
    }, {
      "left" : "int i = 0;",
      "right" : "int i = 0;",
      "info" : "VariableDeclarationStatement[29684-29694]:VariableDeclarationStatement[12905-12915]"
    }, {
      "left" : "formatter.format(format, \"Counting sort\", FORMAT.format(countingResults[i++]), FORMAT.format(countingResults[i++]), FORMAT.format(countingResults[i++]));",
      "right" : "formatter.format(format, \"Counting sort\", FORMAT.format(countingResults[i++]), FORMAT.format(countingResults[i++]), FORMAT.format(countingResults[i++]));",
      "info" : "ExpressionStatement[29707-29860]:ExpressionStatement[12695-12848]"
    }, {
      "left" : "int i = 0;",
      "right" : "int i = 0;",
      "info" : "VariableDeclarationStatement[29908-29918]:VariableDeclarationStatement[11018-11028]"
    }, {
      "left" : "formatter.format(format, \"Radix sort\", FORMAT.format(radixResults[i++]), FORMAT.format(radixResults[i++]), FORMAT.format(radixResults[i++]));",
      "right" : "formatter.format(format, \"Radix sort\", FORMAT.format(radixResults[i++]), FORMAT.format(radixResults[i++]), FORMAT.format(radixResults[i++]));",
      "info" : "ExpressionStatement[29931-30072]:ExpressionStatement[12928-13069]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30113-30330]:Block[13119-13336]"
    }, {
      "left" : "formatter.format(format, \"American Flag sort\", FORMAT.format(americanFlagResults[i++]), FORMAT.format(americanFlagResults[i++]), FORMAT.format(americanFlagResults[i++]));",
      "right" : "formatter.format(format, \"American Flag sort\", FORMAT.format(americanFlagResults[i++]), FORMAT.format(americanFlagResults[i++]), FORMAT.format(americanFlagResults[i++]));",
      "info" : "ExpressionStatement[30150-30320]:ExpressionStatement[13156-13326]"
    }, {
      "left" : "formatter.close();",
      "right" : "formatter.close();",
      "info" : "ExpressionStatement[30339-30357]:ExpressionStatement[13345-13363]"
    }, {
      "left" : "System.out.println(resultsBuilder.toString());",
      "right" : "System.out.println(resultsBuilder.toString());",
      "info" : "ExpressionStatement[30366-30412]:ExpressionStatement[13372-13418]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[30424-30431]:Modifier[13430-13437]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[30432-30438]:Modifier[13438-13444]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[30439-30444]:Modifier[13445-13450]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[30445-30449]:PrimitiveType[13451-13455]"
    }, {
      "left" : "showResult",
      "right" : "showResult",
      "info" : "SimpleName[30450-30460]:SimpleName[13456-13466]"
    }, {
      "left" : "Integer[] u",
      "right" : "Integer[] u",
      "info" : "SingleVariableDeclaration[30461-30472]:SingleVariableDeclaration[13467-13478]"
    }, {
      "left" : "Integer[] r",
      "right" : "Integer[] r",
      "info" : "SingleVariableDeclaration[30474-30485]:SingleVariableDeclaration[13480-13491]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30487-30626]:Block[13493-13632]"
    }, {
      "left" : "System.out.println(\"Unsorted: \" + print(u));",
      "right" : "System.out.println(\"Unsorted: \" + print(u));",
      "info" : "ExpressionStatement[30497-30541]:ExpressionStatement[13503-13547]"
    }, {
      "left" : "System.out.println(\"Sorted: \" + print(r));",
      "right" : "System.out.println(\"Sorted: \" + print(r));",
      "info" : "ExpressionStatement[30550-30592]:ExpressionStatement[13556-13598]"
    }, {
      "left" : "System.out.flush();",
      "right" : "System.out.flush();",
      "info" : "ExpressionStatement[30601-30620]:ExpressionStatement[13607-13626]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[30632-30639]:Modifier[13638-13645]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[30640-30646]:Modifier[13646-13652]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[30647-30652]:Modifier[13653-13658]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[30653-30660]:PrimitiveType[13659-13666]"
    }, {
      "left" : "check",
      "right" : "check",
      "info" : "SimpleName[30661-30666]:SimpleName[13667-13672]"
    }, {
      "left" : "Integer[] array",
      "right" : "Integer[] array",
      "info" : "SingleVariableDeclaration[30667-30682]:SingleVariableDeclaration[13673-13688]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30684-30842]:Block[13690-13848]"
    }, {
      "left" : "for (int i = 1; i < array.length; i++)",
      "right" : "for (int i = 1; i < array.length; i++)",
      "info" : "ForStatement[30694-30815]:ForStatement[13700-13821]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30733-30815]:Block[13739-13821]"
    }, {
      "left" : "if (array[i - 1] > array[i])",
      "right" : "if (array[i - 1] > array[i])",
      "info" : "IfStatement[30747-30805]:IfStatement[13753-13811]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[30792-30805]:ReturnStatement[13798-13811]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[30824-30836]:ReturnStatement[13830-13842]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[30848-30854]:Modifier[13854-13860]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[30855-30861]:Modifier[13861-13867]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[30862-30867]:Modifier[13868-13873]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[30868-30874]:SimpleType[13874-13880]"
    }, {
      "left" : "print",
      "right" : "print",
      "info" : "SimpleName[30875-30880]:SimpleName[13881-13886]"
    }, {
      "left" : "Integer[] array",
      "right" : "Integer[] array",
      "info" : "SingleVariableDeclaration[30881-30896]:SingleVariableDeclaration[13887-13902]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30898-30951]:Block[13904-13957]"
    }, {
      "left" : "return print(array, 0, array.length);",
      "right" : "return print(array, 0, array.length);",
      "info" : "ReturnStatement[30908-30945]:ReturnStatement[13914-13951]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[30957-30963]:Modifier[13963-13969]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[30964-30970]:Modifier[13970-13976]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[30971-30976]:Modifier[13977-13982]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[30977-30983]:SimpleType[13983-13989]"
    }, {
      "left" : "print",
      "right" : "print",
      "info" : "SimpleName[30984-30989]:SimpleName[13990-13995]"
    }, {
      "left" : "Integer[] array",
      "right" : "Integer[] array",
      "info" : "SingleVariableDeclaration[30990-31005]:SingleVariableDeclaration[13996-14011]"
    }, {
      "left" : "int start",
      "right" : "int start",
      "info" : "SingleVariableDeclaration[31007-31016]:SingleVariableDeclaration[14013-14022]"
    }, {
      "left" : "int length",
      "right" : "int length",
      "info" : "SingleVariableDeclaration[31018-31028]:SingleVariableDeclaration[14024-14034]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31030-31300]:Block[14036-14306]"
    }, {
      "left" : "final Integer[] clone = array.clone();",
      "right" : "final Integer[] clone = array.clone();",
      "info" : "VariableDeclarationStatement[31040-31078]:VariableDeclarationStatement[14046-14084]"
    }, {
      "left" : "StringBuilder builder = new StringBuilder();",
      "right" : "StringBuilder builder = new StringBuilder();",
      "info" : "VariableDeclarationStatement[31087-31131]:VariableDeclarationStatement[14093-14137]"
    }, {
      "left" : "for (int i = 0; i < length; i++)",
      "right" : "for (int i = 0; i < length; i++)",
      "info" : "ForStatement[31140-31259]:ForStatement[14146-14265]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31173-31259]:Block[14179-14265]"
    }, {
      "left" : "int e = clone[start + i];",
      "right" : "int e = clone[start + i];",
      "info" : "VariableDeclarationStatement[31187-31212]:VariableDeclarationStatement[14193-14218]"
    }, {
      "left" : "builder.append(e + \" \");",
      "right" : "builder.append(e + \" \");",
      "info" : "ExpressionStatement[31225-31249]:ExpressionStatement[14231-14255]"
    }, {
      "left" : "return builder.toString();",
      "right" : "return builder.toString();",
      "info" : "ReturnStatement[31268-31294]:ReturnStatement[14274-14300]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[31306-31312]:Modifier[14312-14318]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[31313-31319]:Modifier[14319-14325]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[31320-31325]:Modifier[14326-14331]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[31326-31332]:SimpleType[14332-14338]"
    }, {
      "left" : "printWithPivot",
      "right" : "printWithPivot",
      "info" : "SimpleName[31333-31347]:SimpleName[14339-14353]"
    }, {
      "left" : "Integer[] array",
      "right" : "Integer[] array",
      "info" : "SingleVariableDeclaration[31348-31363]:SingleVariableDeclaration[14354-14369]"
    }, {
      "left" : "int pivotIndex",
      "right" : "int pivotIndex",
      "info" : "SingleVariableDeclaration[31365-31379]:SingleVariableDeclaration[14371-14385]"
    }, {
      "left" : "int start",
      "right" : "int start",
      "info" : "SingleVariableDeclaration[31381-31390]:SingleVariableDeclaration[14387-14396]"
    }, {
      "left" : "int length",
      "right" : "int length",
      "info" : "SingleVariableDeclaration[31392-31402]:SingleVariableDeclaration[14398-14408]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31404-31776]:Block[14410-14782]"
    }, {
      "left" : "final Integer[] clone = array.clone();",
      "right" : "final Integer[] clone = array.clone();",
      "info" : "VariableDeclarationStatement[31414-31452]:VariableDeclarationStatement[14420-14458]"
    }, {
      "left" : "StringBuilder builder = new StringBuilder();",
      "right" : "StringBuilder builder = new StringBuilder();",
      "info" : "VariableDeclarationStatement[31461-31505]:VariableDeclarationStatement[14467-14511]"
    }, {
      "left" : "for (int i = 0; i < length; i++)",
      "right" : "for (int i = 0; i < length; i++)",
      "info" : "ForStatement[31514-31735]:ForStatement[14520-14741]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31547-31735]:Block[14553-14741]"
    }, {
      "left" : "int e = clone[start + i];",
      "right" : "int e = clone[start + i];",
      "info" : "VariableDeclarationStatement[31561-31586]:VariableDeclarationStatement[14567-14592]"
    }, {
      "left" : "if (i == pivotIndex)",
      "right" : "if (i == pivotIndex)",
      "info" : "IfStatement[31599-31725]:IfStatement[14605-14731]"
    }, {
      "left" : "builder.append(\"`\" + e + \"` \");",
      "right" : "builder.append(\"`\" + e + \"` \");",
      "info" : "ExpressionStatement[31636-31667]:ExpressionStatement[14642-14673]"
    }, {
      "left" : "builder.append(e + \" \");",
      "right" : "builder.append(e + \" \");",
      "info" : "ExpressionStatement[31701-31725]:ExpressionStatement[14707-14731]"
    }, {
      "left" : "return builder.toString();",
      "right" : "return builder.toString();",
      "info" : "ReturnStatement[31744-31770]:ReturnStatement[14750-14776]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[31782-31789]:Modifier[14788-14795]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[31790-31796]:Modifier[14796-14802]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[31797-31802]:Modifier[14803-14808]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[31803-31807]:PrimitiveType[14809-14813]"
    }, {
      "left" : "putOutTheGarbage",
      "right" : "putOutTheGarbage",
      "info" : "SimpleName[31808-31824]:SimpleName[14814-14830]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31827-31912]:Block[14833-14918]"
    }, {
      "left" : "collectGarbage();",
      "right" : "collectGarbage();",
      "info" : "ExpressionStatement[31837-31854]:ExpressionStatement[14843-14860]"
    }, {
      "left" : "collectGarbage();",
      "right" : "collectGarbage();",
      "info" : "ExpressionStatement[31863-31880]:ExpressionStatement[14869-14886]"
    }, {
      "left" : "collectGarbage();",
      "right" : "collectGarbage();",
      "info" : "ExpressionStatement[31889-31906]:ExpressionStatement[14895-14912]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[31972-31979]:Modifier[14978-14985]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[31980-31986]:Modifier[14986-14992]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[31987-31992]:Modifier[14993-14998]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[31993-31997]:PrimitiveType[14999-15003]"
    }, {
      "left" : "collectGarbage",
      "right" : "collectGarbage",
      "info" : "SimpleName[31998-32012]:SimpleName[15004-15018]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32015-32323]:Block[15021-15329]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[32025-32317]:TryStatement[15031-15323]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32029-32239]:Block[15035-15245]"
    }, {
      "left" : "System.gc();",
      "right" : "System.gc();",
      "info" : "ExpressionStatement[32043-32055]:ExpressionStatement[15049-15061]"
    }, {
      "left" : "System.gc();",
      "right" : "System.gc();",
      "info" : "ExpressionStatement[32068-32080]:ExpressionStatement[15074-15086]"
    }, {
      "left" : "System.gc();",
      "right" : "System.gc();",
      "info" : "ExpressionStatement[32093-32105]:ExpressionStatement[15099-15111]"
    }, {
      "left" : "Thread.sleep(fSLEEP_INTERVAL);",
      "right" : "Thread.sleep(fSLEEP_INTERVAL);",
      "info" : "ExpressionStatement[32118-32148]:ExpressionStatement[15124-15154]"
    }, {
      "left" : "System.runFinalization();",
      "right" : "System.runFinalization();",
      "info" : "ExpressionStatement[32161-32186]:ExpressionStatement[15167-15192]"
    }, {
      "left" : "Thread.sleep(fSLEEP_INTERVAL);",
      "right" : "Thread.sleep(fSLEEP_INTERVAL);",
      "info" : "ExpressionStatement[32199-32229]:ExpressionStatement[15205-15235]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32272-32317]:Block[15278-15323]"
    }, {
      "left" : "ex.printStackTrace();",
      "right" : "ex.printStackTrace();",
      "info" : "ExpressionStatement[32286-32307]:ExpressionStatement[15292-15313]"
    } ]
  },
  "interFileMappings" : { }
}