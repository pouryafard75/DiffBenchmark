{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "GaussNewtonOptimizer",
      "right" : "GaussNewtonOptimizer",
      "info" : "TypeDeclaration[1720-7206]:TypeDeclaration[1720-7214]"
    }, {
      "left" : "private final boolean useLU;",
      "right" : "private final boolean useLU;",
      "info" : "FieldDeclaration[2391-2468]:FieldDeclaration[2391-2468]"
    }, {
      "left" : "public GaussNewtonOptimizer(ConvergenceChecker<PointVectorValuePair> checker)",
      "right" : "public GaussNewtonOptimizer(ConvergenceChecker<PointVectorValuePair> checker)",
      "info" : "MethodDeclaration[2474-2770]:MethodDeclaration[2474-2770]"
    }, {
      "left" : "public GaussNewtonOptimizer(final boolean useLU,\n                                ConvergenceChecker<PointVectorValuePair> checker)",
      "right" : "public GaussNewtonOptimizer(final boolean useLU,\n                                ConvergenceChecker<PointVectorValuePair> checker)",
      "info" : "MethodDeclaration[2776-3190]:MethodDeclaration[2776-3190]"
    }, {
      "left" : "public PointVectorValuePair doOptimize()",
      "right" : "public PointVectorValuePair doOptimize()",
      "info" : "MethodDeclaration[3196-6830]:MethodDeclaration[3196-6838]"
    }, {
      "left" : "private void checkParameters()",
      "right" : "private void checkParameters()",
      "info" : "MethodDeclaration[6836-7204]:MethodDeclaration[6844-7212]"
    } ],
    "mappings" : [
 {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[2313-2319]:Modifier[2313-2319]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[2320-2325]:TYPE_DECLARATION_KIND[2320-2325]"
    }, {
      "left" : "GaussNewtonOptimizer",
      "right" : "GaussNewtonOptimizer",
      "info" : "SimpleName[2326-2346]:SimpleName[2326-2346]"
    }, {
      "left" : "AbstractLeastSquaresOptimizer",
      "right" : "AbstractLeastSquaresOptimizer",
      "info" : "SimpleType[2355-2384]:SimpleType[2355-2384]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[2656-2662]:Modifier[2656-2662]"
    }, {
      "left" : "GaussNewtonOptimizer",
      "right" : "GaussNewtonOptimizer",
      "info" : "SimpleName[2663-2683]:SimpleName[2663-2683]"
    }, {
      "left" : "ConvergenceChecker<PointVectorValuePair> checker",
      "right" : "ConvergenceChecker<PointVectorValuePair> checker",
      "info" : "SingleVariableDeclaration[2684-2732]:SingleVariableDeclaration[2684-2732]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2734-2770]:Block[2734-2770]"
    }, {
      "left" : "this(true, checker);",
      "right" : "this(true, checker);",
      "info" : "ConstructorInvocation[2744-2764]:ConstructorInvocation[2744-2764]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[3000-3006]:Modifier[3000-3006]"
    }, {
      "left" : "GaussNewtonOptimizer",
      "right" : "GaussNewtonOptimizer",
      "info" : "SimpleName[3007-3027]:SimpleName[3007-3027]"
    }, {
      "left" : "final boolean useLU",
      "right" : "final boolean useLU",
      "info" : "SingleVariableDeclaration[3028-3047]:SingleVariableDeclaration[3028-3047]"
    }, {
      "left" : "ConvergenceChecker<PointVectorValuePair> checker",
      "right" : "ConvergenceChecker<PointVectorValuePair> checker",
      "info" : "SingleVariableDeclaration[3081-3129]:SingleVariableDeclaration[3081-3129]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3131-3190]:Block[3131-3190]"
    }, {
      "left" : "super(checker);",
      "right" : "super(checker);",
      "info" : "SuperConstructorInvocation[3141-3156]:SuperConstructorInvocation[3141-3156]"
    }, {
      "left" : "this.useLU = useLU;",
      "right" : "this.useLU = useLU;",
      "info" : "ExpressionStatement[3165-3184]:ExpressionStatement[3165-3184]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[3221-3230]:MarkerAnnotation[3221-3230]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[3235-3241]:Modifier[3235-3241]"
    }, {
      "left" : "PointVectorValuePair",
      "right" : "PointVectorValuePair",
      "info" : "SimpleType[3242-3262]:SimpleType[3242-3262]"
    }, {
      "left" : "doOptimize",
      "right" : "doOptimize",
      "info" : "SimpleName[3263-3273]:SimpleName[3263-3273]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3276-6830]:Block[3276-6838]"
    }, {
      "left" : "checkParameters();",
      "right" : "checkParameters();",
      "info" : "ExpressionStatement[3286-3304]:ExpressionStatement[3286-3304]"
    }, {
      "left" : "final ConvergenceChecker<PointVectorValuePair> checker\n            = getConvergenceChecker();",
      "right" : "final ConvergenceChecker<PointVectorValuePair> checker\n            = getConvergenceChecker();",
      "info" : "VariableDeclarationStatement[3314-3407]:VariableDeclarationStatement[3314-3407]"
    }, {
      "left" : "if (checker == null)",
      "right" : "if (checker == null)",
      "info" : "IfStatement[3492-3571]:IfStatement[3492-3571]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3513-3571]:Block[3513-3571]"
    }, {
      "left" : "throw new NullArgumentException();",
      "right" : "throw new NullArgumentException();",
      "info" : "ThrowStatement[3527-3561]:ThrowStatement[3527-3561]"
    }, {
      "left" : "final double[] targetValues = getTarget();",
      "right" : "final double[] targetValues = getTarget();",
      "info" : "VariableDeclarationStatement[3581-3623]:VariableDeclarationStatement[3581-3623]"
    }, {
      "left" : "final int nR = targetValues.length;",
      "right" : "final int nR = targetValues.length;",
      "info" : "VariableDeclarationStatement[3632-3667]:VariableDeclarationStatement[3632-3667]"
    }, {
      "left" : "final RealMatrix weightMatrix = getWeight();",
      "right" : "final RealMatrix weightMatrix = getWeight();",
      "info" : "VariableDeclarationStatement[3705-3749]:VariableDeclarationStatement[3705-3749]"
    }, {
      "left" : "final double[] residualsWeights = new double[nR];",
      "right" : "final double[] residualsWeights = new double[nR];",
      "info" : "VariableDeclarationStatement[3800-3849]:VariableDeclarationStatement[3800-3849]"
    }, {
      "left" : "for (int i = 0; i < nR; i++)",
      "right" : "for (int i = 0; i < nR; i++)",
      "info" : "ForStatement[3858-3961]:ForStatement[3858-3961]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3887-3961]:Block[3887-3961]"
    }, {
      "left" : "residualsWeights[i] = weightMatrix.getEntry(i, i);",
      "right" : "residualsWeights[i] = weightMatrix.getEntry(i, i);",
      "info" : "ExpressionStatement[3901-3951]:ExpressionStatement[3901-3951]"
    }, {
      "left" : "final double[] currentPoint = getStartPoint();",
      "right" : "final double[] currentPoint = getStartPoint();",
      "info" : "VariableDeclarationStatement[3971-4017]:VariableDeclarationStatement[3971-4017]"
    }, {
      "left" : "final int nC = currentPoint.length;",
      "right" : "final int nC = currentPoint.length;",
      "info" : "VariableDeclarationStatement[4026-4061]:VariableDeclarationStatement[4026-4061]"
    }, {
      "left" : "PointVectorValuePair current = null;",
      "right" : "PointVectorValuePair current = null;",
      "info" : "VariableDeclarationStatement[4119-4155]:VariableDeclarationStatement[4119-4155]"
    }, {
      "left" : "for (boolean converged = false; !converged)",
      "right" : "for (boolean converged = false; !converged)",
      "info" : "ForStatement[4186-6755]:ForStatement[4164-6763]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4231-6755]:Block[4209-6763]"
    }, {
      "left" : "++iter;",
      "right" : "incrementIterationCount();",
      "info" : "ExpressionStatement[4245-4252]:ExpressionStatement[4223-4249]"
    }, {
      "left" : "iter",
      "right" : "incrementIterationCount",
      "info" : "SimpleName[4247-4251]:SimpleName[4223-4246]"
    }, {
      "left" : "PointVectorValuePair previous = current;",
      "right" : "PointVectorValuePair previous = current;",
      "info" : "VariableDeclarationStatement[4330-4370]:VariableDeclarationStatement[4327-4367]"
    }, {
      "left" : "final double[] currentObjective = computeObjectiveValue(currentPoint);",
      "right" : "final double[] currentObjective = computeObjectiveValue(currentPoint);",
      "info" : "VariableDeclarationStatement[4449-4519]:VariableDeclarationStatement[4446-4516]"
    }, {
      "left" : "final double[] currentResiduals = computeResiduals(currentObjective);",
      "right" : "final double[] currentResiduals = computeResiduals(currentObjective);",
      "info" : "VariableDeclarationStatement[4532-4601]:VariableDeclarationStatement[4529-4598]"
    }, {
      "left" : "final RealMatrix weightedJacobian = computeWeightedJacobian(currentPoint);",
      "right" : "final RealMatrix weightedJacobian = computeWeightedJacobian(currentPoint);",
      "info" : "VariableDeclarationStatement[4614-4688]:VariableDeclarationStatement[4611-4685]"
    }, {
      "left" : "current = new PointVectorValuePair(currentPoint, currentObjective);",
      "right" : "current = new PointVectorValuePair(currentPoint, currentObjective);",
      "info" : "ExpressionStatement[4701-4768]:ExpressionStatement[4698-4765]"
    }, {
      "left" : "final double[]   b = new double[nC];",
      "right" : "final double[]   b = new double[nC];",
      "info" : "VariableDeclarationStatement[4822-4858]:VariableDeclarationStatement[4819-4855]"
    }, {
      "left" : "final double[][] a = new double[nC][nC];",
      "right" : "final double[][] a = new double[nC][nC];",
      "info" : "VariableDeclarationStatement[4871-4911]:VariableDeclarationStatement[4868-4908]"
    }, {
      "left" : "for (int i = 0; i < nR; ++i)",
      "right" : "for (int i = 0; i < nR; ++i)",
      "info" : "ForStatement[4924-5712]:ForStatement[4921-5709]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4953-5712]:Block[4950-5709]"
    }, {
      "left" : "final double[] grad   = weightedJacobian.getRow(i);",
      "right" : "final double[] grad   = weightedJacobian.getRow(i);",
      "info" : "VariableDeclarationStatement[4972-5023]:VariableDeclarationStatement[4969-5020]"
    }, {
      "left" : "final double weight   = residualsWeights[i];",
      "right" : "final double weight   = residualsWeights[i];",
      "info" : "VariableDeclarationStatement[5040-5084]:VariableDeclarationStatement[5037-5081]"
    }, {
      "left" : "final double residual = currentResiduals[i];",
      "right" : "final double residual = currentResiduals[i];",
      "info" : "VariableDeclarationStatement[5101-5145]:VariableDeclarationStatement[5098-5142]"
    }, {
      "left" : "final double wr = weight * residual;",
      "right" : "final double wr = weight * residual;",
      "info" : "VariableDeclarationStatement[5210-5246]:VariableDeclarationStatement[5207-5243]"
    }, {
      "left" : "for (int j = 0; j < nC; ++j)",
      "right" : "for (int j = 0; j < nC; ++j)",
      "info" : "ForStatement[5263-5353]:ForStatement[5260-5350]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5292-5353]:Block[5289-5350]"
    }, {
      "left" : "b[j] += wr * grad[j];",
      "right" : "b[j] += wr * grad[j];",
      "info" : "ExpressionStatement[5314-5335]:ExpressionStatement[5311-5332]"
    }, {
      "left" : "for (int k = 0; k < nC; ++k)",
      "right" : "for (int k = 0; k < nC; ++k)",
      "info" : "ForStatement[5438-5698]:ForStatement[5435-5695]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5467-5698]:Block[5464-5695]"
    }, {
      "left" : "double[] ak = a[k];",
      "right" : "double[] ak = a[k];",
      "info" : "VariableDeclarationStatement[5489-5508]:VariableDeclarationStatement[5486-5505]"
    }, {
      "left" : "double wgk = weight * grad[k];",
      "right" : "double wgk = weight * grad[k];",
      "info" : "VariableDeclarationStatement[5529-5559]:VariableDeclarationStatement[5526-5556]"
    }, {
      "left" : "for (int l = 0; l < nC; ++l)",
      "right" : "for (int l = 0; l < nC; ++l)",
      "info" : "ForStatement[5580-5680]:ForStatement[5577-5677]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5609-5680]:Block[5606-5677]"
    }, {
      "left" : "ak[l] += wgk * grad[l];",
      "right" : "ak[l] += wgk * grad[l];",
      "info" : "ExpressionStatement[5635-5658]:ExpressionStatement[5632-5655]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[5726-6441]:TryStatement[5723-6438]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5730-6292]:Block[5727-6289]"
    }, {
      "left" : "RealMatrix mA = new BlockRealMatrix(a);",
      "right" : "RealMatrix mA = new BlockRealMatrix(a);",
      "info" : "VariableDeclarationStatement[5810-5849]:VariableDeclarationStatement[5807-5846]"
    }, {
      "left" : "DecompositionSolver solver = useLU ?\n                        new LUDecomposition(mA).getSolver() :\n                        new QRDecomposition(mA).getSolver();",
      "right" : "DecompositionSolver solver = useLU ?\n                        new LUDecomposition(mA).getSolver() :\n                        new QRDecomposition(mA).getSolver();",
      "info" : "VariableDeclarationStatement[5866-6025]:VariableDeclarationStatement[5863-6022]"
    }, {
      "left" : "final double[] dX = solver.solve(new ArrayRealVector(b, false)).toArray();",
      "right" : "final double[] dX = solver.solve(new ArrayRealVector(b, false)).toArray();",
      "info" : "VariableDeclarationStatement[6042-6116]:VariableDeclarationStatement[6039-6113]"
    }, {
      "left" : "for (int i = 0; i < nC; ++i)",
      "right" : "for (int i = 0; i < nC; ++i)",
      "info" : "ForStatement[6184-6278]:ForStatement[6181-6275]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6213-6278]:Block[6210-6275]"
    }, {
      "left" : "currentPoint[i] += dX[i];",
      "right" : "currentPoint[i] += dX[i];",
      "info" : "ExpressionStatement[6235-6260]:ExpressionStatement[6232-6257]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6327-6441]:Block[6324-6438]"
    }, {
      "left" : "throw new ConvergenceException(LocalizedFormats.UNABLE_TO_SOLVE_SINGULAR_PROBLEM);",
      "right" : "throw new ConvergenceException(LocalizedFormats.UNABLE_TO_SOLVE_SINGULAR_PROBLEM);",
      "info" : "ThrowStatement[6345-6427]:ThrowStatement[6342-6424]"
    }, {
      "left" : "if (previous != null)",
      "right" : "if (previous != null)",
      "info" : "IfStatement[6489-6745]:IfStatement[6486-6753]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6511-6745]:Block[6508-6753]"
    }, {
      "left" : "converged = checker.converged(iter, previous, current);",
      "right" : "converged = checker.converged(getIterations(), previous, current);",
      "info" : "ExpressionStatement[6529-6584]:ExpressionStatement[6526-6592]"
    }, {
      "left" : "iter",
      "right" : "getIterations",
      "info" : "SimpleName[6559-6563]:SimpleName[6556-6569]"
    }, {
      "left" : "if (converged)",
      "right" : "if (converged)",
      "info" : "IfStatement[6601-6731]:IfStatement[6609-6739]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6616-6731]:Block[6624-6739]"
    }, {
      "left" : "setCost(computeCost(currentResiduals));",
      "right" : "setCost(computeCost(currentResiduals));",
      "info" : "ExpressionStatement[6638-6677]:ExpressionStatement[6646-6685]"
    }, {
      "left" : "return current;",
      "right" : "return current;",
      "info" : "ReturnStatement[6698-6713]:ReturnStatement[6706-6721]"
    }, {
      "left" : "throw new MathInternalError();",
      "right" : "throw new MathInternalError();",
      "info" : "ThrowStatement[6794-6824]:ThrowStatement[6802-6832]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[6992-6999]:Modifier[7000-7007]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[7000-7004]:PrimitiveType[7008-7012]"
    }, {
      "left" : "checkParameters",
      "right" : "checkParameters",
      "info" : "SimpleName[7005-7020]:SimpleName[7013-7028]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7023-7204]:Block[7031-7212]"
    }, {
      "left" : "if (getLowerBound() != null ||\n            getUpperBound() != null)",
      "right" : "if (getLowerBound() != null ||\n            getUpperBound() != null)",
      "info" : "IfStatement[7033-7198]:IfStatement[7041-7206]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7101-7198]:Block[7109-7206]"
    }, {
      "left" : "throw new MathUnsupportedOperationException(LocalizedFormats.CONSTRAINT);",
      "right" : "throw new MathUnsupportedOperationException(LocalizedFormats.CONSTRAINT);",
      "info" : "ThrowStatement[7115-7188]:ThrowStatement[7123-7196]"
    } ]
  },
  "interFileMappings" : { }
}