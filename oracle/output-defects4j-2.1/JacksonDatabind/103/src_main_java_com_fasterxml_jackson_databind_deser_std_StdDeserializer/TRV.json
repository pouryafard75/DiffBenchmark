{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "private static final long serialVersionUID = 1L;",
      "right" : "private static final long serialVersionUID = 1L;",
      "info" : "FieldDeclaration[1431-1479]:FieldDeclaration[1431-1479]"
    }, {
      "left" : "protected final static int F_MASK_INT_COERCIONS = \n            DeserializationFeature.USE_BIG_INTEGER_FOR_INTS.getMask()\n            | DeserializationFeature.USE_LONG_FOR_INTS.getMask();",
      "right" : "protected final static int F_MASK_INT_COERCIONS = \n            DeserializationFeature.USE_BIG_INTEGER_FOR_INTS.getMask()\n            | DeserializationFeature.USE_LONG_FOR_INTS.getMask();",
      "info" : "FieldDeclaration[1485-1952]:FieldDeclaration[1485-1952]"
    }, {
      "left" : "protected final static int F_MASK_ACCEPT_ARRAYS =\n            DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS.getMask() |\n            DeserializationFeature.ACCEPT_EMPTY_ARRAY_AS_NULL_OBJECT.getMask();",
      "right" : "protected final static int F_MASK_ACCEPT_ARRAYS =\n            DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS.getMask() |\n            DeserializationFeature.ACCEPT_EMPTY_ARRAY_AS_NULL_OBJECT.getMask();",
      "info" : "FieldDeclaration[1976-2179]:FieldDeclaration[1976-2179]"
    }, {
      "left" : "final protected Class<?> _valueClass;",
      "right" : "final protected Class<?> _valueClass;",
      "info" : "FieldDeclaration[2190-2458]:FieldDeclaration[2190-2458]"
    }, {
      "left" : "protected StdDeserializer(Class<?> vc)",
      "right" : "protected StdDeserializer(Class<?> vc)",
      "info" : "MethodDeclaration[2464-2536]:MethodDeclaration[2464-2536]"
    }, {
      "left" : "protected StdDeserializer(JavaType valueType)",
      "right" : "protected StdDeserializer(JavaType valueType)",
      "info" : "MethodDeclaration[2542-2763]:MethodDeclaration[2542-2763]"
    }, {
      "left" : "protected StdDeserializer(StdDeserializer<?> src)",
      "right" : "protected StdDeserializer(StdDeserializer<?> src)",
      "info" : "MethodDeclaration[2769-3074]:MethodDeclaration[2769-3074]"
    }, {
      "left" : "public Class<?> handledType()",
      "right" : "public Class<?> handledType()",
      "info" : "MethodDeclaration[3245-3312]:MethodDeclaration[3245-3312]"
    }, {
      "left" : "public final Class<?> getValueClass()",
      "right" : "public final Class<?> getValueClass()",
      "info" : "MethodDeclaration[3486-3641]:MethodDeclaration[3486-3641]"
    }, {
      "left" : "public JavaType getValueType()",
      "right" : "public JavaType getValueType()",
      "info" : "MethodDeclaration[3647-3835]:MethodDeclaration[3647-3835]"
    }, {
      "left" : "protected boolean isDefaultDeserializer(JsonDeserializer<?> deserializer)",
      "right" : "protected boolean isDefaultDeserializer(JsonDeserializer<?> deserializer)",
      "info" : "MethodDeclaration[3841-4293]:MethodDeclaration[3841-4293]"
    }, {
      "left" : "protected boolean isDefaultKeyDeserializer(KeyDeserializer keyDeser)",
      "right" : "protected boolean isDefaultKeyDeserializer(KeyDeserializer keyDeser)",
      "info" : "MethodDeclaration[4299-4428]:MethodDeclaration[4299-4428]"
    }, {
      "left" : "public Object deserializeWithType(JsonParser p, DeserializationContext ctxt,\n            TypeDeserializer typeDeserializer) throws IOException",
      "right" : "public Object deserializeWithType(JsonParser p, DeserializationContext ctxt,\n            TypeDeserializer typeDeserializer) throws IOException",
      "info" : "MethodDeclaration[4634-5066]:MethodDeclaration[4634-5066]"
    }, {
      "left" : "protected final boolean _parseBooleanPrimitive(JsonParser p, DeserializationContext ctxt) throws IOException",
      "right" : "protected final boolean _parseBooleanPrimitive(JsonParser p, DeserializationContext ctxt) throws IOException",
      "info" : "MethodDeclaration[5399-7166]:MethodDeclaration[5399-7166]"
    }, {
      "left" : "protected boolean _parseBooleanFromInt(JsonParser p, DeserializationContext ctxt)\n        throws IOException",
      "right" : "protected boolean _parseBooleanFromInt(JsonParser p, DeserializationContext ctxt)\n        throws IOException",
      "info" : "MethodDeclaration[7172-7762]:MethodDeclaration[7172-7762]"
    }, {
      "left" : "protected final byte _parseBytePrimitive(JsonParser p, DeserializationContext ctxt)\n        throws IOException",
      "right" : "protected final byte _parseBytePrimitive(JsonParser p, DeserializationContext ctxt)\n        throws IOException",
      "info" : "MethodDeclaration[7768-8281]:MethodDeclaration[7768-8281]"
    }, {
      "left" : "protected final short _parseShortPrimitive(JsonParser p, DeserializationContext ctxt)\n        throws IOException",
      "right" : "protected final short _parseShortPrimitive(JsonParser p, DeserializationContext ctxt)\n        throws IOException",
      "info" : "MethodDeclaration[8287-8806]:MethodDeclaration[8287-8806]"
    }, {
      "left" : "protected final int _parseIntPrimitive(JsonParser p, DeserializationContext ctxt)\n        throws IOException",
      "right" : "protected final int _parseIntPrimitive(JsonParser p, DeserializationContext ctxt)\n        throws IOException",
      "info" : "MethodDeclaration[8812-10173]:MethodDeclaration[8812-10173]"
    }, {
      "left" : "protected final int _parseIntPrimitive(DeserializationContext ctxt, String text) throws IOException",
      "right" : "protected final int _parseIntPrimitive(DeserializationContext ctxt, String text) throws IOException",
      "info" : "MethodDeclaration[10179-11103]:MethodDeclaration[10179-11103]"
    }, {
      "left" : "protected final long _parseLongPrimitive(JsonParser p, DeserializationContext ctxt)\n        throws IOException",
      "right" : "protected final long _parseLongPrimitive(JsonParser p, DeserializationContext ctxt)\n        throws IOException",
      "info" : "MethodDeclaration[11113-12423]:MethodDeclaration[11113-12423]"
    }, {
      "left" : "protected final long _parseLongPrimitive(DeserializationContext ctxt, String text) throws IOException",
      "right" : "protected final long _parseLongPrimitive(DeserializationContext ctxt, String text) throws IOException",
      "info" : "MethodDeclaration[12429-12885]:MethodDeclaration[12429-12885]"
    }, {
      "left" : "protected final float _parseFloatPrimitive(JsonParser p, DeserializationContext ctxt)\n        throws IOException",
      "right" : "protected final float _parseFloatPrimitive(JsonParser p, DeserializationContext ctxt)\n        throws IOException",
      "info" : "MethodDeclaration[12891-14104]:MethodDeclaration[12891-14104]"
    }, {
      "left" : "protected final float _parseFloatPrimitive(DeserializationContext ctxt, String text)\n        throws IOException",
      "right" : "protected final float _parseFloatPrimitive(DeserializationContext ctxt, String text)\n        throws IOException",
      "info" : "MethodDeclaration[14110-14942]:MethodDeclaration[14110-14942]"
    }, {
      "left" : "protected final double _parseDoublePrimitive(JsonParser p, DeserializationContext ctxt)\n        throws IOException",
      "right" : "protected final double _parseDoublePrimitive(JsonParser p, DeserializationContext ctxt)\n        throws IOException",
      "info" : "MethodDeclaration[14948-16167]:MethodDeclaration[14948-16167]"
    }, {
      "left" : "protected final double _parseDoublePrimitive(DeserializationContext ctxt, String text)\n        throws IOException",
      "right" : "protected final double _parseDoublePrimitive(DeserializationContext ctxt, String text)\n        throws IOException",
      "info" : "MethodDeclaration[16173-17059]:MethodDeclaration[16173-17059]"
    }, {
      "left" : "protected java.util.Date _parseDate(JsonParser p, DeserializationContext ctxt)\n        throws IOException",
      "right" : "protected java.util.Date _parseDate(JsonParser p, DeserializationContext ctxt)\n        throws IOException",
      "info" : "MethodDeclaration[17065-18081]:MethodDeclaration[17065-18081]"
    }, {
      "left" : "protected java.util.Date _parseDateFromArray(JsonParser p, DeserializationContext ctxt)\n            throws IOException",
      "right" : "protected java.util.Date _parseDateFromArray(JsonParser p, DeserializationContext ctxt)\n            throws IOException",
      "info" : "MethodDeclaration[18105-18982]:MethodDeclaration[18105-18982]"
    }, {
      "left" : "protected final static double parseDouble(String numStr) throws NumberFormatException",
      "right" : "protected final static double parseDouble(String numStr) throws NumberFormatException",
      "info" : "MethodDeclaration[19640-20204]:MethodDeclaration[19655-20219]"
    }, {
      "left" : "protected final String _parseString(JsonParser p, DeserializationContext ctxt) throws IOException",
      "right" : "protected final String _parseString(JsonParser p, DeserializationContext ctxt) throws IOException",
      "info" : "MethodDeclaration[20214-21283]:MethodDeclaration[20229-21298]"
    }, {
      "left" : "protected T _deserializeFromEmpty(JsonParser p, DeserializationContext ctxt)\n        throws IOException",
      "right" : "protected T _deserializeFromEmpty(JsonParser p, DeserializationContext ctxt)\n        throws IOException",
      "info" : "MethodDeclaration[21289-22421]:MethodDeclaration[21304-22436]"
    }, {
      "left" : "protected boolean _hasTextualNull(String value)",
      "right" : "protected boolean _hasTextualNull(String value)",
      "info" : "MethodDeclaration[22427-22727]:MethodDeclaration[22442-22742]"
    }, {
      "left" : "protected boolean _isEmptyOrTextualNull(String value)",
      "right" : "protected boolean _isEmptyOrTextualNull(String value)",
      "info" : "MethodDeclaration[22733-22884]:MethodDeclaration[22748-22899]"
    }, {
      "left" : "protected final boolean _isNegInf(String text)",
      "right" : "protected final boolean _isNegInf(String text)",
      "info" : "MethodDeclaration[22894-23012]:MethodDeclaration[22909-23027]"
    }, {
      "left" : "protected final boolean _isPosInf(String text)",
      "right" : "protected final boolean _isPosInf(String text)",
      "info" : "MethodDeclaration[23018-23134]:MethodDeclaration[23033-23149]"
    }, {
      "left" : "protected final boolean _isNaN(String text)",
      "right" : "protected final boolean _isNaN(String text)",
      "info" : "MethodDeclaration[23140-23214]:MethodDeclaration[23155-23229]"
    }, {
      "left" : "protected T _deserializeFromArray(JsonParser p, DeserializationContext ctxt) throws IOException",
      "right" : "protected T _deserializeFromArray(JsonParser p, DeserializationContext ctxt) throws IOException",
      "info" : "MethodDeclaration[23459-25271]:MethodDeclaration[23474-25286]"
    }, {
      "left" : "protected T _deserializeWrappedValue(JsonParser p, DeserializationContext ctxt) throws IOException",
      "right" : "protected T _deserializeWrappedValue(JsonParser p, DeserializationContext ctxt) throws IOException",
      "info" : "MethodDeclaration[25277-26370]:MethodDeclaration[25292-26385]"
    }, {
      "left" : "protected void _failDoubleToIntCoercion(JsonParser p, DeserializationContext ctxt,\n            String type) throws IOException",
      "right" : "protected void _failDoubleToIntCoercion(JsonParser p, DeserializationContext ctxt,\n            String type) throws IOException",
      "info" : "MethodDeclaration[26557-26906]:MethodDeclaration[26572-26921]"
    }, {
      "left" : "protected Object _coerceIntegral(JsonParser p, DeserializationContext ctxt) throws IOException",
      "right" : "protected Object _coerceIntegral(JsonParser p, DeserializationContext ctxt) throws IOException",
      "info" : "MethodDeclaration[26912-27837]:MethodDeclaration[26927-27852]"
    }, {
      "left" : "protected Object _coerceNullToken(DeserializationContext ctxt, boolean isPrimitive) throws JsonMappingException",
      "right" : "protected Object _coerceNullToken(DeserializationContext ctxt, boolean isPrimitive) throws JsonMappingException",
      "info" : "MethodDeclaration[27843-28279]:MethodDeclaration[27858-28294]"
    }, {
      "left" : "protected Object _coerceTextualNull(DeserializationContext ctxt, boolean isPrimitive) throws JsonMappingException",
      "right" : "protected Object _coerceTextualNull(DeserializationContext ctxt, boolean isPrimitive) throws JsonMappingException",
      "info" : "MethodDeclaration[28285-29091]:MethodDeclaration[28300-29106]"
    }, {
      "left" : "protected Object _coerceEmptyString(DeserializationContext ctxt, boolean isPrimitive) throws JsonMappingException",
      "right" : "protected Object _coerceEmptyString(DeserializationContext ctxt, boolean isPrimitive) throws JsonMappingException",
      "info" : "MethodDeclaration[29097-29926]:MethodDeclaration[29112-29941]"
    }, {
      "left" : "protected final void _verifyNullForPrimitive(DeserializationContext ctxt) throws JsonMappingException",
      "right" : "protected final void _verifyNullForPrimitive(DeserializationContext ctxt) throws JsonMappingException",
      "info" : "MethodDeclaration[29950-30338]:MethodDeclaration[29965-30353]"
    }, {
      "left" : "protected final void _verifyNullForPrimitiveCoercion(DeserializationContext ctxt, String str) throws JsonMappingException",
      "right" : "protected final void _verifyNullForPrimitiveCoercion(DeserializationContext ctxt, String str) throws JsonMappingException",
      "info" : "MethodDeclaration[30402-31140]:MethodDeclaration[30417-31155]"
    }, {
      "left" : "protected final void _verifyNullForScalarCoercion(DeserializationContext ctxt, String str) throws JsonMappingException",
      "right" : "protected final void _verifyNullForScalarCoercion(DeserializationContext ctxt, String str) throws JsonMappingException",
      "info" : "MethodDeclaration[31203-31620]:MethodDeclaration[31218-31635]"
    }, {
      "left" : "protected void _verifyStringForScalarCoercion(DeserializationContext ctxt, String str) throws JsonMappingException",
      "right" : "protected void _verifyStringForScalarCoercion(DeserializationContext ctxt, String str) throws JsonMappingException",
      "info" : "MethodDeclaration[31644-32078]:MethodDeclaration[31659-32093]"
    }, {
      "left" : "protected void _verifyNumberForScalarCoercion(DeserializationContext ctxt, JsonParser p) throws IOException",
      "right" : "protected void _verifyNumberForScalarCoercion(DeserializationContext ctxt, JsonParser p) throws IOException",
      "info" : "MethodDeclaration[32102-32762]:MethodDeclaration[32117-32777]"
    }, {
      "left" : "protected void _reportFailedNullCoerce(DeserializationContext ctxt, boolean state, Enum<?> feature,\n            String inputDesc) throws JsonMappingException",
      "right" : "protected void _reportFailedNullCoerce(DeserializationContext ctxt, boolean state, Enum<?> feature,\n            String inputDesc) throws JsonMappingException",
      "info" : "MethodDeclaration[32772-33205]:MethodDeclaration[32787-33220]"
    }, {
      "left" : "protected String _coercedTypeDesc()",
      "right" : "protected String _coercedTypeDesc()",
      "info" : "MethodDeclaration[33215-34328]:MethodDeclaration[33230-34343]"
    }, {
      "left" : "protected JsonDeserializer<Object> findDeserializer(DeserializationContext ctxt,\n            JavaType type, BeanProperty property)\n        throws JsonMappingException",
      "right" : "protected JsonDeserializer<Object> findDeserializer(DeserializationContext ctxt,\n            JavaType type, BeanProperty property)\n        throws JsonMappingException",
      "info" : "MethodDeclaration[34528-35205]:MethodDeclaration[34543-35220]"
    }, {
      "left" : "protected final boolean _isIntNumber(String text)",
      "right" : "protected final boolean _isIntNumber(String text)",
      "info" : "MethodDeclaration[35211-35940]:MethodDeclaration[35226-35955]"
    }, {
      "left" : "protected JsonDeserializer<?> findConvertingContentDeserializer(DeserializationContext ctxt,\n            BeanProperty prop, JsonDeserializer<?> existingDeserializer)\n        throws JsonMappingException",
      "right" : "protected JsonDeserializer<?> findConvertingContentDeserializer(DeserializationContext ctxt,\n            BeanProperty prop, JsonDeserializer<?> existingDeserializer)\n        throws JsonMappingException",
      "info" : "MethodDeclaration[36143-37616]:MethodDeclaration[36158-37631]"
    }, {
      "left" : "protected JsonFormat.Value findFormatOverrides(DeserializationContext ctxt,\n            BeanProperty prop, Class<?> typeForDefaults)",
      "right" : "protected JsonFormat.Value findFormatOverrides(DeserializationContext ctxt,\n            BeanProperty prop, Class<?> typeForDefaults)",
      "info" : "MethodDeclaration[37834-38572]:MethodDeclaration[37849-38587]"
    }, {
      "left" : "protected Boolean findFormatFeature(DeserializationContext ctxt,\n            BeanProperty prop, Class<?> typeForDefaults, JsonFormat.Feature feat)",
      "right" : "protected Boolean findFormatFeature(DeserializationContext ctxt,\n            BeanProperty prop, Class<?> typeForDefaults, JsonFormat.Feature feat)",
      "info" : "MethodDeclaration[38578-39341]:MethodDeclaration[38593-39356]"
    }, {
      "left" : "protected final NullValueProvider findValueNullProvider(DeserializationContext ctxt,\n            SettableBeanProperty prop, PropertyMetadata propMetadata)\n        throws JsonMappingException",
      "right" : "protected final NullValueProvider findValueNullProvider(DeserializationContext ctxt,\n            SettableBeanProperty prop, PropertyMetadata propMetadata)\n        throws JsonMappingException",
      "info" : "MethodDeclaration[39347-39970]:MethodDeclaration[39362-39985]"
    }, {
      "left" : "protected NullValueProvider findContentNullProvider(DeserializationContext ctxt,\n            BeanProperty prop, JsonDeserializer<?> valueDeser)\n        throws JsonMappingException",
      "right" : "protected NullValueProvider findContentNullProvider(DeserializationContext ctxt,\n            BeanProperty prop, JsonDeserializer<?> valueDeser)\n        throws JsonMappingException",
      "info" : "MethodDeclaration[39976-40835]:MethodDeclaration[39991-40850]"
    }, {
      "left" : "protected Nulls findContentNullStyle(DeserializationContext ctxt, BeanProperty prop)\n        throws JsonMappingException",
      "right" : "protected Nulls findContentNullStyle(DeserializationContext ctxt, BeanProperty prop)\n        throws JsonMappingException",
      "info" : "MethodDeclaration[40841-41089]:MethodDeclaration[40856-41104]"
    }, {
      "left" : "protected final NullValueProvider _findNullProvider(DeserializationContext ctxt,\n            BeanProperty prop, Nulls nulls, JsonDeserializer<?> valueDeser)\n        throws JsonMappingException",
      "right" : "protected final NullValueProvider _findNullProvider(DeserializationContext ctxt,\n            BeanProperty prop, Nulls nulls, JsonDeserializer<?> valueDeser)\n        throws JsonMappingException",
      "info" : "MethodDeclaration[41113-43158]:MethodDeclaration[41128-43173]"
    }, {
      "left" : "protected void handleUnknownProperty(JsonParser p, DeserializationContext ctxt,\n            Object instanceOrClass, String propName)\n        throws IOException",
      "right" : "protected void handleUnknownProperty(JsonParser p, DeserializationContext ctxt,\n            Object instanceOrClass, String propName)\n        throws IOException",
      "info" : "MethodDeclaration[43365-44752]:MethodDeclaration[43380-44767]"
    }, {
      "left" : "protected void handleMissingEndArrayForSingle(JsonParser p, DeserializationContext ctxt)\n        throws IOException",
      "right" : "protected void handleMissingEndArrayForSingle(JsonParser p, DeserializationContext ctxt)\n        throws IOException",
      "info" : "MethodDeclaration[44758-45249]:MethodDeclaration[44773-45264]"
    }, {
      "left" : "protected void _verifyEndArrayForSingle(JsonParser p, DeserializationContext ctxt) throws IOException",
      "right" : "protected void _verifyEndArrayForSingle(JsonParser p, DeserializationContext ctxt) throws IOException",
      "info" : "MethodDeclaration[45255-45520]:MethodDeclaration[45270-45535]"
    }, {
      "left" : "protected final static boolean _neitherNull(Object a, Object b)",
      "right" : "protected final static boolean _neitherNull(Object a, Object b)",
      "info" : "MethodDeclaration[45699-45847]:MethodDeclaration[45714-45862]"
    }, {
      "left" : "protected final boolean _byteOverflow(int value)",
      "right" : "protected final boolean _byteOverflow(int value)",
      "info" : "MethodDeclaration[45853-46136]:MethodDeclaration[45868-46151]"
    }, {
      "left" : "protected final boolean _shortOverflow(int value)",
      "right" : "protected final boolean _shortOverflow(int value)",
      "info" : "MethodDeclaration[46146-46306]:MethodDeclaration[46161-46321]"
    }, {
      "left" : "protected final boolean _intOverflow(long value)",
      "right" : "protected final boolean _intOverflow(long value)",
      "info" : "MethodDeclaration[46312-46475]:MethodDeclaration[46327-46490]"
    }, {
      "left" : "protected Number _nonNullNumber(Number n)",
      "right" : "protected Number _nonNullNumber(Number n)",
      "info" : "MethodDeclaration[46481-46653]:MethodDeclaration[46496-46668]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2503-2536]:Block[2503-2536]"
    }, {
      "left" : "_valueClass = vc;",
      "right" : "_valueClass = vc;",
      "info" : "ExpressionStatement[2513-2530]:ExpressionStatement[2513-2530]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2588-2763]:Block[2588-2763]"
    }, {
      "left" : "_valueClass = (valueType == null) ? Object.class : valueType.getRawClass();",
      "right" : "_valueClass = (valueType == null) ? Object.class : valueType.getRawClass();",
      "info" : "ExpressionStatement[2682-2757]:ExpressionStatement[2682-2757]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3028-3074]:Block[3028-3074]"
    }, {
      "left" : "_valueClass = src._valueClass;",
      "right" : "_valueClass = src._valueClass;",
      "info" : "ExpressionStatement[3038-3068]:ExpressionStatement[3038-3068]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3289-3312]:Block[3289-3312]"
    }, {
      "left" : "return _valueClass;",
      "right" : "return _valueClass;",
      "info" : "ReturnStatement[3291-3310]:ReturnStatement[3291-3310]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3618-3641]:Block[3618-3641]"
    }, {
      "left" : "return _valueClass;",
      "right" : "return _valueClass;",
      "info" : "ReturnStatement[3620-3639]:ReturnStatement[3620-3639]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3819-3835]:Block[3819-3835]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[3821-3833]:ReturnStatement[3821-3833]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4229-4293]:Block[4229-4293]"
    }, {
      "left" : "return ClassUtil.isJacksonStdImpl(deserializer);",
      "right" : "return ClassUtil.isJacksonStdImpl(deserializer);",
      "info" : "ReturnStatement[4239-4287]:ReturnStatement[4239-4287]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4368-4428]:Block[4368-4428]"
    }, {
      "left" : "return ClassUtil.isJacksonStdImpl(keyDeser);",
      "right" : "return ClassUtil.isJacksonStdImpl(keyDeser);",
      "info" : "ReturnStatement[4378-4422]:ReturnStatement[4378-4422]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4993-5066]:Block[4993-5066]"
    }, {
      "left" : "return typeDeserializer.deserializeTypedFromAny(p, ctxt);",
      "right" : "return typeDeserializer.deserializeTypedFromAny(p, ctxt);",
      "info" : "ReturnStatement[5003-5060]:ReturnStatement[5003-5060]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5512-7166]:Block[5512-7166]"
    }, {
      "left" : "JsonToken t = p.getCurrentToken();",
      "right" : "JsonToken t = p.getCurrentToken();",
      "info" : "VariableDeclarationStatement[5522-5556]:VariableDeclarationStatement[5522-5556]"
    }, {
      "left" : "if (t == JsonToken.VALUE_TRUE)",
      "right" : "if (t == JsonToken.VALUE_TRUE)",
      "info" : "IfStatement[5565-5608]:IfStatement[5565-5608]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[5596-5608]:ReturnStatement[5596-5608]"
    }, {
      "left" : "if (t == JsonToken.VALUE_FALSE)",
      "right" : "if (t == JsonToken.VALUE_FALSE)",
      "info" : "IfStatement[5617-5662]:IfStatement[5617-5662]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[5649-5662]:ReturnStatement[5649-5662]"
    }, {
      "left" : "if (t == JsonToken.VALUE_NULL)",
      "right" : "if (t == JsonToken.VALUE_NULL)",
      "info" : "IfStatement[5671-5782]:IfStatement[5671-5782]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5702-5782]:Block[5702-5782]"
    }, {
      "left" : "_verifyNullForPrimitive(ctxt);",
      "right" : "_verifyNullForPrimitive(ctxt);",
      "info" : "ExpressionStatement[5716-5746]:ExpressionStatement[5716-5746]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[5759-5772]:ReturnStatement[5759-5772]"
    }, {
      "left" : "if (t == JsonToken.VALUE_NUMBER_INT)",
      "right" : "if (t == JsonToken.VALUE_NUMBER_INT)",
      "info" : "IfStatement[5856-5954]:IfStatement[5856-5954]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5893-5954]:Block[5893-5954]"
    }, {
      "left" : "return _parseBooleanFromInt(p, ctxt);",
      "right" : "return _parseBooleanFromInt(p, ctxt);",
      "info" : "ReturnStatement[5907-5944]:ReturnStatement[5907-5944]"
    }, {
      "left" : "if (t == JsonToken.VALUE_STRING)",
      "right" : "if (t == JsonToken.VALUE_STRING)",
      "info" : "IfStatement[6027-6713]:IfStatement[6027-6713]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6060-6713]:Block[6060-6713]"
    }, {
      "left" : "String text = p.getText().trim();",
      "right" : "String text = p.getText().trim();",
      "info" : "VariableDeclarationStatement[6074-6107]:VariableDeclarationStatement[6074-6107]"
    }, {
      "left" : "if (\"true\".equals(text) || \"True\".equals(text))",
      "right" : "if (\"true\".equals(text) || \"True\".equals(text))",
      "info" : "IfStatement[6165-6257]:IfStatement[6165-6257]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6213-6257]:Block[6213-6257]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[6231-6243]:ReturnStatement[6231-6243]"
    }, {
      "left" : "if (\"false\".equals(text) || \"False\".equals(text))",
      "right" : "if (\"false\".equals(text) || \"False\".equals(text))",
      "info" : "IfStatement[6270-6365]:IfStatement[6270-6365]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6320-6365]:Block[6320-6365]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[6338-6351]:ReturnStatement[6338-6351]"
    }, {
      "left" : "if (_isEmptyOrTextualNull(text))",
      "right" : "if (_isEmptyOrTextualNull(text))",
      "info" : "IfStatement[6378-6517]:IfStatement[6378-6517]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6411-6517]:Block[6411-6517]"
    }, {
      "left" : "_verifyNullForPrimitiveCoercion(ctxt, text);",
      "right" : "_verifyNullForPrimitiveCoercion(ctxt, text);",
      "info" : "ExpressionStatement[6429-6473]:ExpressionStatement[6429-6473]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[6490-6503]:ReturnStatement[6490-6503]"
    }, {
      "left" : "Boolean b = (Boolean) ctxt.handleWeirdStringValue(_valueClass, text,\n                    \"only \\\"true\\\" or \\\"false\\\" recognized\");",
      "right" : "Boolean b = (Boolean) ctxt.handleWeirdStringValue(_valueClass, text,\n                    \"only \\\"true\\\" or \\\"false\\\" recognized\");",
      "info" : "VariableDeclarationStatement[6530-6660]:VariableDeclarationStatement[6530-6660]"
    }, {
      "left" : "return Boolean.TRUE.equals(b);",
      "right" : "return Boolean.TRUE.equals(b);",
      "info" : "ReturnStatement[6673-6703]:ReturnStatement[6673-6703]"
    }, {
      "left" : "if (t == JsonToken.START_ARRAY && ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS))",
      "right" : "if (t == JsonToken.START_ARRAY && ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS))",
      "info" : "IfStatement[6748-7041]:IfStatement[6748-7041]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6849-7041]:Block[6849-7041]"
    }, {
      "left" : "p.nextToken();",
      "right" : "p.nextToken();",
      "info" : "ExpressionStatement[6863-6877]:ExpressionStatement[6863-6877]"
    }, {
      "left" : "final boolean parsed = _parseBooleanPrimitive(p, ctxt);",
      "right" : "final boolean parsed = _parseBooleanPrimitive(p, ctxt);",
      "info" : "VariableDeclarationStatement[6890-6945]:VariableDeclarationStatement[6890-6945]"
    }, {
      "left" : "_verifyEndArrayForSingle(p, ctxt);",
      "right" : "_verifyEndArrayForSingle(p, ctxt);",
      "info" : "ExpressionStatement[6958-6992]:ExpressionStatement[6958-6992]"
    }, {
      "left" : "return parsed;",
      "right" : "return parsed;",
      "info" : "ReturnStatement[7005-7019]:ReturnStatement[7005-7019]"
    }, {
      "left" : "return ((Boolean) ctxt.handleUnexpectedToken(_valueClass, p)).booleanValue();",
      "right" : "return ((Boolean) ctxt.handleUnexpectedToken(_valueClass, p)).booleanValue();",
      "info" : "ReturnStatement[7083-7160]:ReturnStatement[7083-7160]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7285-7762]:Block[7285-7762]"
    }, {
      "left" : "_verifyNumberForScalarCoercion(ctxt, p);",
      "right" : "_verifyNumberForScalarCoercion(ctxt, p);",
      "info" : "ExpressionStatement[7554-7594]:ExpressionStatement[7554-7594]"
    }, {
      "left" : "return !\"0\".equals(p.getText());",
      "right" : "return !\"0\".equals(p.getText());",
      "info" : "ReturnStatement[7724-7756]:ReturnStatement[7724-7756]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7883-8281]:Block[7883-8281]"
    }, {
      "left" : "int value = _parseIntPrimitive(p, ctxt);",
      "right" : "int value = _parseIntPrimitive(p, ctxt);",
      "info" : "VariableDeclarationStatement[7893-7933]:VariableDeclarationStatement[7893-7933]"
    }, {
      "left" : "if (_byteOverflow(value))",
      "right" : "if (_byteOverflow(value))",
      "info" : "IfStatement[7986-8246]:IfStatement[7986-8246]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8012-8246]:Block[8012-8246]"
    }, {
      "left" : "Number v = (Number) ctxt.handleWeirdStringValue(_valueClass, String.valueOf(value),\n                    \"overflow, value cannot be represented as 8-bit value\");",
      "right" : "Number v = (Number) ctxt.handleWeirdStringValue(_valueClass, String.valueOf(value),\n                    \"overflow, value cannot be represented as 8-bit value\");",
      "info" : "VariableDeclarationStatement[8026-8186]:VariableDeclarationStatement[8026-8186]"
    }, {
      "left" : "return _nonNullNumber(v).byteValue();",
      "right" : "return _nonNullNumber(v).byteValue();",
      "info" : "ReturnStatement[8199-8236]:ReturnStatement[8199-8236]"
    }, {
      "left" : "return (byte) value;",
      "right" : "return (byte) value;",
      "info" : "ReturnStatement[8255-8275]:ReturnStatement[8255-8275]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8404-8806]:Block[8404-8806]"
    }, {
      "left" : "int value = _parseIntPrimitive(p, ctxt);",
      "right" : "int value = _parseIntPrimitive(p, ctxt);",
      "info" : "VariableDeclarationStatement[8414-8454]:VariableDeclarationStatement[8414-8454]"
    }, {
      "left" : "if (_shortOverflow(value))",
      "right" : "if (_shortOverflow(value))",
      "info" : "IfStatement[8507-8770]:IfStatement[8507-8770]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8534-8770]:Block[8534-8770]"
    }, {
      "left" : "Number v = (Number) ctxt.handleWeirdStringValue(_valueClass, String.valueOf(value),\n                    \"overflow, value cannot be represented as 16-bit value\");",
      "right" : "Number v = (Number) ctxt.handleWeirdStringValue(_valueClass, String.valueOf(value),\n                    \"overflow, value cannot be represented as 16-bit value\");",
      "info" : "VariableDeclarationStatement[8548-8709]:VariableDeclarationStatement[8548-8709]"
    }, {
      "left" : "return _nonNullNumber(v).shortValue();",
      "right" : "return _nonNullNumber(v).shortValue();",
      "info" : "ReturnStatement[8722-8760]:ReturnStatement[8722-8760]"
    }, {
      "left" : "return (short) value;",
      "right" : "return (short) value;",
      "info" : "ReturnStatement[8779-8800]:ReturnStatement[8779-8800]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8925-10173]:Block[8925-10173]"
    }, {
      "left" : "if (p.hasToken(JsonToken.VALUE_NUMBER_INT))",
      "right" : "if (p.hasToken(JsonToken.VALUE_NUMBER_INT))",
      "info" : "IfStatement[8935-9026]:IfStatement[8935-9026]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8979-9026]:Block[8979-9026]"
    }, {
      "left" : "return p.getIntValue();",
      "right" : "return p.getIntValue();",
      "info" : "ReturnStatement[8993-9016]:ReturnStatement[8993-9016]"
    }, {
      "left" : "switch (p.getCurrentTokenId()) {\n        case JsonTokenId.ID_STRING:\n            String text = p.getText().trim();\n            if (_isEmptyOrTextualNull(text)) {\n                _verifyNullForPrimitiveCoercion(ctxt, text);\n                return 0;\n            }\n            return _parseIntPrimitive(ctxt, text);\n        case JsonTokenId.ID_NUMBER_FLOAT:\n            if (!ctxt.isEnabled(DeserializationFeature.ACCEPT_FLOAT_AS_INT)) {\n                _failDoubleToIntCoercion(p, ctxt, \"int\");\n            }\n            return p.getValueAsInt();\n        case JsonTokenId.ID_NULL:\n            _verifyNullForPrimitive(ctxt);\n            return 0;\n        case JsonTokenId.ID_START_ARRAY:\n            if (ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS)) {\n                p.nextToken();\n                final int parsed = _parseIntPrimitive(p, ctxt);\n                _verifyEndArrayForSingle(p, ctxt);\n                return parsed;            \n            }\n            break;\n        default:\n        }",
      "right" : "switch (p.getCurrentTokenId()) {\n        case JsonTokenId.ID_STRING:\n            String text = p.getText().trim();\n            if (_isEmptyOrTextualNull(text)) {\n                _verifyNullForPrimitiveCoercion(ctxt, text);\n                return 0;\n            }\n            return _parseIntPrimitive(ctxt, text);\n        case JsonTokenId.ID_NUMBER_FLOAT:\n            if (!ctxt.isEnabled(DeserializationFeature.ACCEPT_FLOAT_AS_INT)) {\n                _failDoubleToIntCoercion(p, ctxt, \"int\");\n            }\n            return p.getValueAsInt();\n        case JsonTokenId.ID_NULL:\n            _verifyNullForPrimitive(ctxt);\n            return 0;\n        case JsonTokenId.ID_START_ARRAY:\n            if (ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS)) {\n                p.nextToken();\n                final int parsed = _parseIntPrimitive(p, ctxt);\n                _verifyEndArrayForSingle(p, ctxt);\n                return parsed;            \n            }\n            break;\n        default:\n        }",
      "info" : "SwitchStatement[9035-10053]:SwitchStatement[9035-10053]"
    }, {
      "left" : "case JsonTokenId.ID_STRING:",
      "right" : "case JsonTokenId.ID_STRING:",
      "info" : "SwitchCase[9076-9103]:SwitchCase[9076-9103]"
    }, {
      "left" : "String text = p.getText().trim();",
      "right" : "String text = p.getText().trim();",
      "info" : "VariableDeclarationStatement[9116-9149]:VariableDeclarationStatement[9116-9149]"
    }, {
      "left" : "if (_isEmptyOrTextualNull(text))",
      "right" : "if (_isEmptyOrTextualNull(text))",
      "info" : "IfStatement[9162-9297]:IfStatement[9162-9297]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9195-9297]:Block[9195-9297]"
    }, {
      "left" : "_verifyNullForPrimitiveCoercion(ctxt, text);",
      "right" : "_verifyNullForPrimitiveCoercion(ctxt, text);",
      "info" : "ExpressionStatement[9213-9257]:ExpressionStatement[9213-9257]"
    }, {
      "left" : "return 0;",
      "right" : "return 0;",
      "info" : "ReturnStatement[9274-9283]:ReturnStatement[9274-9283]"
    }, {
      "left" : "return _parseIntPrimitive(ctxt, text);",
      "right" : "return _parseIntPrimitive(ctxt, text);",
      "info" : "ReturnStatement[9310-9348]:ReturnStatement[9310-9348]"
    }, {
      "left" : "case JsonTokenId.ID_NUMBER_FLOAT:",
      "right" : "case JsonTokenId.ID_NUMBER_FLOAT:",
      "info" : "SwitchCase[9357-9390]:SwitchCase[9357-9390]"
    }, {
      "left" : "if (!ctxt.isEnabled(DeserializationFeature.ACCEPT_FLOAT_AS_INT))",
      "right" : "if (!ctxt.isEnabled(DeserializationFeature.ACCEPT_FLOAT_AS_INT))",
      "info" : "IfStatement[9403-9541]:IfStatement[9403-9541]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9468-9541]:Block[9468-9541]"
    }, {
      "left" : "_failDoubleToIntCoercion(p, ctxt, \"int\");",
      "right" : "_failDoubleToIntCoercion(p, ctxt, \"int\");",
      "info" : "ExpressionStatement[9486-9527]:ExpressionStatement[9486-9527]"
    }, {
      "left" : "return p.getValueAsInt();",
      "right" : "return p.getValueAsInt();",
      "info" : "ReturnStatement[9554-9579]:ReturnStatement[9554-9579]"
    }, {
      "left" : "case JsonTokenId.ID_NULL:",
      "right" : "case JsonTokenId.ID_NULL:",
      "info" : "SwitchCase[9588-9613]:SwitchCase[9588-9613]"
    }, {
      "left" : "_verifyNullForPrimitive(ctxt);",
      "right" : "_verifyNullForPrimitive(ctxt);",
      "info" : "ExpressionStatement[9626-9656]:ExpressionStatement[9626-9656]"
    }, {
      "left" : "return 0;",
      "right" : "return 0;",
      "info" : "ReturnStatement[9669-9678]:ReturnStatement[9669-9678]"
    }, {
      "left" : "case JsonTokenId.ID_START_ARRAY:",
      "right" : "case JsonTokenId.ID_START_ARRAY:",
      "info" : "SwitchCase[9687-9719]:SwitchCase[9687-9719]"
    }, {
      "left" : "if (ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS))",
      "right" : "if (ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS))",
      "info" : "IfStatement[9732-10007]:IfStatement[9732-10007]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9803-10007]:Block[9803-10007]"
    }, {
      "left" : "p.nextToken();",
      "right" : "p.nextToken();",
      "info" : "ExpressionStatement[9821-9835]:ExpressionStatement[9821-9835]"
    }, {
      "left" : "final int parsed = _parseIntPrimitive(p, ctxt);",
      "right" : "final int parsed = _parseIntPrimitive(p, ctxt);",
      "info" : "VariableDeclarationStatement[9852-9899]:VariableDeclarationStatement[9852-9899]"
    }, {
      "left" : "_verifyEndArrayForSingle(p, ctxt);",
      "right" : "_verifyEndArrayForSingle(p, ctxt);",
      "info" : "ExpressionStatement[9916-9950]:ExpressionStatement[9916-9950]"
    }, {
      "left" : "return parsed;",
      "right" : "return parsed;",
      "info" : "ReturnStatement[9967-9981]:ReturnStatement[9967-9981]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[10020-10026]:BreakStatement[10020-10026]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[10035-10043]:SwitchCase[10035-10043]"
    }, {
      "left" : "return ((Number) ctxt.handleUnexpectedToken(_valueClass, p)).intValue();",
      "right" : "return ((Number) ctxt.handleUnexpectedToken(_valueClass, p)).intValue();",
      "info" : "ReturnStatement[10095-10167]:ReturnStatement[10095-10167]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10317-11103]:Block[10317-11103]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[10327-11097]:TryStatement[10327-11097]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10331-10874]:Block[10331-10874]"
    }, {
      "left" : "if (text.length() > 9)",
      "right" : "if (text.length() > 9)",
      "info" : "IfStatement[10345-10817]:IfStatement[10345-10817]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10368-10817]:Block[10368-10817]"
    }, {
      "left" : "long l = Long.parseLong(text);",
      "right" : "long l = Long.parseLong(text);",
      "info" : "VariableDeclarationStatement[10386-10416]:VariableDeclarationStatement[10386-10416]"
    }, {
      "left" : "if (_intOverflow(l))",
      "right" : "if (_intOverflow(l))",
      "info" : "IfStatement[10433-10771]:IfStatement[10433-10771]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10454-10771]:Block[10454-10771]"
    }, {
      "left" : "Number v = (Number) ctxt.handleWeirdStringValue(_valueClass, text,\n                        \"Overflow: numeric value (%s) out of range of int (%d -%d)\",\n                        text, Integer.MIN_VALUE, Integer.MAX_VALUE);",
      "right" : "Number v = (Number) ctxt.handleWeirdStringValue(_valueClass, text,\n                        \"Overflow: numeric value (%s) out of range of int (%d -%d)\",\n                        text, Integer.MIN_VALUE, Integer.MAX_VALUE);",
      "info" : "VariableDeclarationStatement[10476-10696]:VariableDeclarationStatement[10476-10696]"
    }, {
      "left" : "return _nonNullNumber(v).intValue();",
      "right" : "return _nonNullNumber(v).intValue();",
      "info" : "ReturnStatement[10717-10753]:ReturnStatement[10717-10753]"
    }, {
      "left" : "return (int) l;",
      "right" : "return (int) l;",
      "info" : "ReturnStatement[10788-10803]:ReturnStatement[10788-10803]"
    }, {
      "left" : "return NumberInput.parseInt(text);",
      "right" : "return NumberInput.parseInt(text);",
      "info" : "ReturnStatement[10830-10864]:ReturnStatement[10830-10864]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10912-11097]:Block[10912-11097]"
    }, {
      "left" : "Number v = (Number) ctxt.handleWeirdStringValue(_valueClass, text,\n                    \"not a valid int value\");",
      "right" : "Number v = (Number) ctxt.handleWeirdStringValue(_valueClass, text,\n                    \"not a valid int value\");",
      "info" : "VariableDeclarationStatement[10926-11038]:VariableDeclarationStatement[10926-11038]"
    }, {
      "left" : "return _nonNullNumber(v).intValue();",
      "right" : "return _nonNullNumber(v).intValue();",
      "info" : "ReturnStatement[11051-11087]:ReturnStatement[11051-11087]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11228-12423]:Block[11228-12423]"
    }, {
      "left" : "if (p.hasToken(JsonToken.VALUE_NUMBER_INT))",
      "right" : "if (p.hasToken(JsonToken.VALUE_NUMBER_INT))",
      "info" : "IfStatement[11238-11330]:IfStatement[11238-11330]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11282-11330]:Block[11282-11330]"
    }, {
      "left" : "return p.getLongValue();",
      "right" : "return p.getLongValue();",
      "info" : "ReturnStatement[11296-11320]:ReturnStatement[11296-11320]"
    }, {
      "left" : "switch (p.getCurrentTokenId()) {\n        case JsonTokenId.ID_STRING:\n            String text = p.getText().trim();\n            if (_isEmptyOrTextualNull(text)) {\n                _verifyNullForPrimitiveCoercion(ctxt, text);\n                return 0L;\n            }\n            return _parseLongPrimitive(ctxt, text);\n        case JsonTokenId.ID_NUMBER_FLOAT:\n            if (!ctxt.isEnabled(DeserializationFeature.ACCEPT_FLOAT_AS_INT)) {\n                _failDoubleToIntCoercion(p, ctxt, \"long\");\n            }\n            return p.getValueAsLong();\n        case JsonTokenId.ID_NULL:\n            _verifyNullForPrimitive(ctxt);\n            return 0L;\n        case JsonTokenId.ID_START_ARRAY:\n            if (ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS)) {\n                p.nextToken();\n                final long parsed = _parseLongPrimitive(p, ctxt);\n                _verifyEndArrayForSingle(p, ctxt);\n                return parsed;\n            }\n            break;\n        }",
      "right" : "switch (p.getCurrentTokenId()) {\n        case JsonTokenId.ID_STRING:\n            String text = p.getText().trim();\n            if (_isEmptyOrTextualNull(text)) {\n                _verifyNullForPrimitiveCoercion(ctxt, text);\n                return 0L;\n            }\n            return _parseLongPrimitive(ctxt, text);\n        case JsonTokenId.ID_NUMBER_FLOAT:\n            if (!ctxt.isEnabled(DeserializationFeature.ACCEPT_FLOAT_AS_INT)) {\n                _failDoubleToIntCoercion(p, ctxt, \"long\");\n            }\n            return p.getValueAsLong();\n        case JsonTokenId.ID_NULL:\n            _verifyNullForPrimitive(ctxt);\n            return 0L;\n        case JsonTokenId.ID_START_ARRAY:\n            if (ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS)) {\n                p.nextToken();\n                final long parsed = _parseLongPrimitive(p, ctxt);\n                _verifyEndArrayForSingle(p, ctxt);\n                return parsed;\n            }\n            break;\n        }",
      "info" : "SwitchStatement[11339-12335]:SwitchStatement[11339-12335]"
    }, {
      "left" : "case JsonTokenId.ID_STRING:",
      "right" : "case JsonTokenId.ID_STRING:",
      "info" : "SwitchCase[11380-11407]:SwitchCase[11380-11407]"
    }, {
      "left" : "String text = p.getText().trim();",
      "right" : "String text = p.getText().trim();",
      "info" : "VariableDeclarationStatement[11420-11453]:VariableDeclarationStatement[11420-11453]"
    }, {
      "left" : "if (_isEmptyOrTextualNull(text))",
      "right" : "if (_isEmptyOrTextualNull(text))",
      "info" : "IfStatement[11466-11602]:IfStatement[11466-11602]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11499-11602]:Block[11499-11602]"
    }, {
      "left" : "_verifyNullForPrimitiveCoercion(ctxt, text);",
      "right" : "_verifyNullForPrimitiveCoercion(ctxt, text);",
      "info" : "ExpressionStatement[11517-11561]:ExpressionStatement[11517-11561]"
    }, {
      "left" : "return 0L;",
      "right" : "return 0L;",
      "info" : "ReturnStatement[11578-11588]:ReturnStatement[11578-11588]"
    }, {
      "left" : "return _parseLongPrimitive(ctxt, text);",
      "right" : "return _parseLongPrimitive(ctxt, text);",
      "info" : "ReturnStatement[11615-11654]:ReturnStatement[11615-11654]"
    }, {
      "left" : "case JsonTokenId.ID_NUMBER_FLOAT:",
      "right" : "case JsonTokenId.ID_NUMBER_FLOAT:",
      "info" : "SwitchCase[11663-11696]:SwitchCase[11663-11696]"
    }, {
      "left" : "if (!ctxt.isEnabled(DeserializationFeature.ACCEPT_FLOAT_AS_INT))",
      "right" : "if (!ctxt.isEnabled(DeserializationFeature.ACCEPT_FLOAT_AS_INT))",
      "info" : "IfStatement[11709-11848]:IfStatement[11709-11848]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11774-11848]:Block[11774-11848]"
    }, {
      "left" : "_failDoubleToIntCoercion(p, ctxt, \"long\");",
      "right" : "_failDoubleToIntCoercion(p, ctxt, \"long\");",
      "info" : "ExpressionStatement[11792-11834]:ExpressionStatement[11792-11834]"
    }, {
      "left" : "return p.getValueAsLong();",
      "right" : "return p.getValueAsLong();",
      "info" : "ReturnStatement[11861-11887]:ReturnStatement[11861-11887]"
    }, {
      "left" : "case JsonTokenId.ID_NULL:",
      "right" : "case JsonTokenId.ID_NULL:",
      "info" : "SwitchCase[11896-11921]:SwitchCase[11896-11921]"
    }, {
      "left" : "_verifyNullForPrimitive(ctxt);",
      "right" : "_verifyNullForPrimitive(ctxt);",
      "info" : "ExpressionStatement[11934-11964]:ExpressionStatement[11934-11964]"
    }, {
      "left" : "return 0L;",
      "right" : "return 0L;",
      "info" : "ReturnStatement[11977-11987]:ReturnStatement[11977-11987]"
    }, {
      "left" : "case JsonTokenId.ID_START_ARRAY:",
      "right" : "case JsonTokenId.ID_START_ARRAY:",
      "info" : "SwitchCase[11996-12028]:SwitchCase[11996-12028]"
    }, {
      "left" : "if (ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS))",
      "right" : "if (ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS))",
      "info" : "IfStatement[12041-12306]:IfStatement[12041-12306]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12112-12306]:Block[12112-12306]"
    }, {
      "left" : "p.nextToken();",
      "right" : "p.nextToken();",
      "info" : "ExpressionStatement[12130-12144]:ExpressionStatement[12130-12144]"
    }, {
      "left" : "final long parsed = _parseLongPrimitive(p, ctxt);",
      "right" : "final long parsed = _parseLongPrimitive(p, ctxt);",
      "info" : "VariableDeclarationStatement[12161-12210]:VariableDeclarationStatement[12161-12210]"
    }, {
      "left" : "_verifyEndArrayForSingle(p, ctxt);",
      "right" : "_verifyEndArrayForSingle(p, ctxt);",
      "info" : "ExpressionStatement[12227-12261]:ExpressionStatement[12227-12261]"
    }, {
      "left" : "return parsed;",
      "right" : "return parsed;",
      "info" : "ReturnStatement[12278-12292]:ReturnStatement[12278-12292]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[12319-12325]:BreakStatement[12319-12325]"
    }, {
      "left" : "return ((Number) ctxt.handleUnexpectedToken(_valueClass, p)).longValue();",
      "right" : "return ((Number) ctxt.handleUnexpectedToken(_valueClass, p)).longValue();",
      "info" : "ReturnStatement[12344-12417]:ReturnStatement[12344-12417]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12569-12885]:Block[12569-12885]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[12579-12683]:TryStatement[12579-12683]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12583-12642]:Block[12583-12642]"
    }, {
      "left" : "return NumberInput.parseLong(text);",
      "right" : "return NumberInput.parseLong(text);",
      "info" : "ReturnStatement[12597-12632]:ReturnStatement[12597-12632]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12680-12683]:Block[12680-12683]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12692-12879]:Block[12692-12879]"
    }, {
      "left" : "Number v = (Number) ctxt.handleWeirdStringValue(_valueClass, text,\n                    \"not a valid long value\");",
      "right" : "Number v = (Number) ctxt.handleWeirdStringValue(_valueClass, text,\n                    \"not a valid long value\");",
      "info" : "VariableDeclarationStatement[12706-12819]:VariableDeclarationStatement[12706-12819]"
    }, {
      "left" : "return _nonNullNumber(v).longValue();",
      "right" : "return _nonNullNumber(v).longValue();",
      "info" : "ReturnStatement[12832-12869]:ReturnStatement[12832-12869]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13008-14104]:Block[13008-14104]"
    }, {
      "left" : "if (p.hasToken(JsonToken.VALUE_NUMBER_FLOAT))",
      "right" : "if (p.hasToken(JsonToken.VALUE_NUMBER_FLOAT))",
      "info" : "IfStatement[13018-13113]:IfStatement[13018-13113]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13064-13113]:Block[13064-13113]"
    }, {
      "left" : "return p.getFloatValue();",
      "right" : "return p.getFloatValue();",
      "info" : "ReturnStatement[13078-13103]:ReturnStatement[13078-13103]"
    }, {
      "left" : "switch (p.getCurrentTokenId()) {\n        case JsonTokenId.ID_STRING:\n            String text = p.getText().trim();\n            if (_isEmptyOrTextualNull(text)) {\n                _verifyNullForPrimitiveCoercion(ctxt, text);\n                return 0.0f;\n            }\n            return _parseFloatPrimitive(ctxt, text);\n        case JsonTokenId.ID_NUMBER_INT:\n            return p.getFloatValue();\n        case JsonTokenId.ID_NULL:\n            _verifyNullForPrimitive(ctxt);\n            return 0.0f;\n        case JsonTokenId.ID_START_ARRAY:\n            if (ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS)) {\n                p.nextToken();\n                final float parsed = _parseFloatPrimitive(p, ctxt);\n                _verifyEndArrayForSingle(p, ctxt);\n                return parsed;            \n            }\n            break;\n        }",
      "right" : "switch (p.getCurrentTokenId()) {\n        case JsonTokenId.ID_STRING:\n            String text = p.getText().trim();\n            if (_isEmptyOrTextualNull(text)) {\n                _verifyNullForPrimitiveCoercion(ctxt, text);\n                return 0.0f;\n            }\n            return _parseFloatPrimitive(ctxt, text);\n        case JsonTokenId.ID_NUMBER_INT:\n            return p.getFloatValue();\n        case JsonTokenId.ID_NULL:\n            _verifyNullForPrimitive(ctxt);\n            return 0.0f;\n        case JsonTokenId.ID_START_ARRAY:\n            if (ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS)) {\n                p.nextToken();\n                final float parsed = _parseFloatPrimitive(p, ctxt);\n                _verifyEndArrayForSingle(p, ctxt);\n                return parsed;            \n            }\n            break;\n        }",
      "info" : "SwitchStatement[13122-13982]:SwitchStatement[13122-13982]"
    }, {
      "left" : "case JsonTokenId.ID_STRING:",
      "right" : "case JsonTokenId.ID_STRING:",
      "info" : "SwitchCase[13163-13190]:SwitchCase[13163-13190]"
    }, {
      "left" : "String text = p.getText().trim();",
      "right" : "String text = p.getText().trim();",
      "info" : "VariableDeclarationStatement[13203-13236]:VariableDeclarationStatement[13203-13236]"
    }, {
      "left" : "if (_isEmptyOrTextualNull(text))",
      "right" : "if (_isEmptyOrTextualNull(text))",
      "info" : "IfStatement[13249-13387]:IfStatement[13249-13387]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13282-13387]:Block[13282-13387]"
    }, {
      "left" : "_verifyNullForPrimitiveCoercion(ctxt, text);",
      "right" : "_verifyNullForPrimitiveCoercion(ctxt, text);",
      "info" : "ExpressionStatement[13300-13344]:ExpressionStatement[13300-13344]"
    }, {
      "left" : "return 0.0f;",
      "right" : "return 0.0f;",
      "info" : "ReturnStatement[13361-13373]:ReturnStatement[13361-13373]"
    }, {
      "left" : "return _parseFloatPrimitive(ctxt, text);",
      "right" : "return _parseFloatPrimitive(ctxt, text);",
      "info" : "ReturnStatement[13400-13440]:ReturnStatement[13400-13440]"
    }, {
      "left" : "case JsonTokenId.ID_NUMBER_INT:",
      "right" : "case JsonTokenId.ID_NUMBER_INT:",
      "info" : "SwitchCase[13449-13480]:SwitchCase[13449-13480]"
    }, {
      "left" : "return p.getFloatValue();",
      "right" : "return p.getFloatValue();",
      "info" : "ReturnStatement[13493-13518]:ReturnStatement[13493-13518]"
    }, {
      "left" : "case JsonTokenId.ID_NULL:",
      "right" : "case JsonTokenId.ID_NULL:",
      "info" : "SwitchCase[13527-13552]:SwitchCase[13527-13552]"
    }, {
      "left" : "_verifyNullForPrimitive(ctxt);",
      "right" : "_verifyNullForPrimitive(ctxt);",
      "info" : "ExpressionStatement[13565-13595]:ExpressionStatement[13565-13595]"
    }, {
      "left" : "return 0.0f;",
      "right" : "return 0.0f;",
      "info" : "ReturnStatement[13608-13620]:ReturnStatement[13608-13620]"
    }, {
      "left" : "case JsonTokenId.ID_START_ARRAY:",
      "right" : "case JsonTokenId.ID_START_ARRAY:",
      "info" : "SwitchCase[13629-13661]:SwitchCase[13629-13661]"
    }, {
      "left" : "if (ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS))",
      "right" : "if (ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS))",
      "info" : "IfStatement[13674-13953]:IfStatement[13674-13953]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13745-13953]:Block[13745-13953]"
    }, {
      "left" : "p.nextToken();",
      "right" : "p.nextToken();",
      "info" : "ExpressionStatement[13763-13777]:ExpressionStatement[13763-13777]"
    }, {
      "left" : "final float parsed = _parseFloatPrimitive(p, ctxt);",
      "right" : "final float parsed = _parseFloatPrimitive(p, ctxt);",
      "info" : "VariableDeclarationStatement[13794-13845]:VariableDeclarationStatement[13794-13845]"
    }, {
      "left" : "_verifyEndArrayForSingle(p, ctxt);",
      "right" : "_verifyEndArrayForSingle(p, ctxt);",
      "info" : "ExpressionStatement[13862-13896]:ExpressionStatement[13862-13896]"
    }, {
      "left" : "return parsed;",
      "right" : "return parsed;",
      "info" : "ReturnStatement[13913-13927]:ReturnStatement[13913-13927]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[13966-13972]:BreakStatement[13966-13972]"
    }, {
      "left" : "return ((Number) ctxt.handleUnexpectedToken(_valueClass, p)).floatValue();",
      "right" : "return ((Number) ctxt.handleUnexpectedToken(_valueClass, p)).floatValue();",
      "info" : "ReturnStatement[14024-14098]:ReturnStatement[14024-14098]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14260-14942]:Block[14260-14942]"
    }, {
      "left" : "switch (text.charAt(0)) {\n        case 'I':\n            if (_isPosInf(text)) {\n                return Float.POSITIVE_INFINITY;\n            }\n            break;\n        case 'N':\n            if (_isNaN(text)) { return Float.NaN; }\n            break;\n        case '-':\n            if (_isNegInf(text)) {\n                return Float.NEGATIVE_INFINITY;\n            }\n            break;\n        }",
      "right" : "switch (text.charAt(0)) {\n        case 'I':\n            if (_isPosInf(text)) {\n                return Float.POSITIVE_INFINITY;\n            }\n            break;\n        case 'N':\n            if (_isNaN(text)) { return Float.NaN; }\n            break;\n        case '-':\n            if (_isNegInf(text)) {\n                return Float.NEGATIVE_INFINITY;\n            }\n            break;\n        }",
      "info" : "SwitchStatement[14270-14662]:SwitchStatement[14270-14662]"
    }, {
      "left" : "case 'I':",
      "right" : "case 'I':",
      "info" : "SwitchCase[14304-14313]:SwitchCase[14304-14313]"
    }, {
      "left" : "if (_isPosInf(text))",
      "right" : "if (_isPosInf(text))",
      "info" : "IfStatement[14326-14410]:IfStatement[14326-14410]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14347-14410]:Block[14347-14410]"
    }, {
      "left" : "return Float.POSITIVE_INFINITY;",
      "right" : "return Float.POSITIVE_INFINITY;",
      "info" : "ReturnStatement[14365-14396]:ReturnStatement[14365-14396]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[14423-14429]:BreakStatement[14423-14429]"
    }, {
      "left" : "case 'N':",
      "right" : "case 'N':",
      "info" : "SwitchCase[14438-14447]:SwitchCase[14438-14447]"
    }, {
      "left" : "if (_isNaN(text))",
      "right" : "if (_isNaN(text))",
      "info" : "IfStatement[14460-14499]:IfStatement[14460-14499]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14478-14499]:Block[14478-14499]"
    }, {
      "left" : "return Float.NaN;",
      "right" : "return Float.NaN;",
      "info" : "ReturnStatement[14480-14497]:ReturnStatement[14480-14497]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[14512-14518]:BreakStatement[14512-14518]"
    }, {
      "left" : "case '-':",
      "right" : "case '-':",
      "info" : "SwitchCase[14527-14536]:SwitchCase[14527-14536]"
    }, {
      "left" : "if (_isNegInf(text))",
      "right" : "if (_isNegInf(text))",
      "info" : "IfStatement[14549-14633]:IfStatement[14549-14633]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14570-14633]:Block[14570-14633]"
    }, {
      "left" : "return Float.NEGATIVE_INFINITY;",
      "right" : "return Float.NEGATIVE_INFINITY;",
      "info" : "ReturnStatement[14588-14619]:ReturnStatement[14588-14619]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[14646-14652]:BreakStatement[14646-14652]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[14671-14770]:TryStatement[14671-14770]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14675-14729]:Block[14675-14729]"
    }, {
      "left" : "return Float.parseFloat(text);",
      "right" : "return Float.parseFloat(text);",
      "info" : "ReturnStatement[14689-14719]:ReturnStatement[14689-14719]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14767-14770]:Block[14767-14770]"
    }, {
      "left" : "Number v = (Number) ctxt.handleWeirdStringValue(_valueClass, text,\n                \"not a valid float value\");",
      "right" : "Number v = (Number) ctxt.handleWeirdStringValue(_valueClass, text,\n                \"not a valid float value\");",
      "info" : "VariableDeclarationStatement[14779-14889]:VariableDeclarationStatement[14779-14889]"
    }, {
      "left" : "return _nonNullNumber(v).floatValue();",
      "right" : "return _nonNullNumber(v).floatValue();",
      "info" : "ReturnStatement[14898-14936]:ReturnStatement[14898-14936]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15067-16167]:Block[15067-16167]"
    }, {
      "left" : "if (p.hasToken(JsonToken.VALUE_NUMBER_FLOAT))",
      "right" : "if (p.hasToken(JsonToken.VALUE_NUMBER_FLOAT))",
      "info" : "IfStatement[15077-15173]:IfStatement[15077-15173]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15123-15173]:Block[15123-15173]"
    }, {
      "left" : "return p.getDoubleValue();",
      "right" : "return p.getDoubleValue();",
      "info" : "ReturnStatement[15137-15163]:ReturnStatement[15137-15163]"
    }, {
      "left" : "switch (p.getCurrentTokenId()) {\n        case JsonTokenId.ID_STRING:\n            String text = p.getText().trim();\n            if (_isEmptyOrTextualNull(text)) {\n                _verifyNullForPrimitiveCoercion(ctxt, text);\n                return 0.0;\n            }\n            return _parseDoublePrimitive(ctxt, text);\n        case JsonTokenId.ID_NUMBER_INT:\n            return p.getDoubleValue();\n        case JsonTokenId.ID_NULL:\n            _verifyNullForPrimitive(ctxt);\n            return 0.0;\n        case JsonTokenId.ID_START_ARRAY:\n            if (ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS)) {\n                p.nextToken();\n                final double parsed = _parseDoublePrimitive(p, ctxt);\n                _verifyEndArrayForSingle(p, ctxt);\n                return parsed;            \n            }\n            break;\n        }",
      "right" : "switch (p.getCurrentTokenId()) {\n        case JsonTokenId.ID_STRING:\n            String text = p.getText().trim();\n            if (_isEmptyOrTextualNull(text)) {\n                _verifyNullForPrimitiveCoercion(ctxt, text);\n                return 0.0;\n            }\n            return _parseDoublePrimitive(ctxt, text);\n        case JsonTokenId.ID_NUMBER_INT:\n            return p.getDoubleValue();\n        case JsonTokenId.ID_NULL:\n            _verifyNullForPrimitive(ctxt);\n            return 0.0;\n        case JsonTokenId.ID_START_ARRAY:\n            if (ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS)) {\n                p.nextToken();\n                final double parsed = _parseDoublePrimitive(p, ctxt);\n                _verifyEndArrayForSingle(p, ctxt);\n                return parsed;            \n            }\n            break;\n        }",
      "info" : "SwitchStatement[15182-16044]:SwitchStatement[15182-16044]"
    }, {
      "left" : "case JsonTokenId.ID_STRING:",
      "right" : "case JsonTokenId.ID_STRING:",
      "info" : "SwitchCase[15223-15250]:SwitchCase[15223-15250]"
    }, {
      "left" : "String text = p.getText().trim();",
      "right" : "String text = p.getText().trim();",
      "info" : "VariableDeclarationStatement[15263-15296]:VariableDeclarationStatement[15263-15296]"
    }, {
      "left" : "if (_isEmptyOrTextualNull(text))",
      "right" : "if (_isEmptyOrTextualNull(text))",
      "info" : "IfStatement[15309-15446]:IfStatement[15309-15446]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15342-15446]:Block[15342-15446]"
    }, {
      "left" : "_verifyNullForPrimitiveCoercion(ctxt, text);",
      "right" : "_verifyNullForPrimitiveCoercion(ctxt, text);",
      "info" : "ExpressionStatement[15360-15404]:ExpressionStatement[15360-15404]"
    }, {
      "left" : "return 0.0;",
      "right" : "return 0.0;",
      "info" : "ReturnStatement[15421-15432]:ReturnStatement[15421-15432]"
    }, {
      "left" : "return _parseDoublePrimitive(ctxt, text);",
      "right" : "return _parseDoublePrimitive(ctxt, text);",
      "info" : "ReturnStatement[15459-15500]:ReturnStatement[15459-15500]"
    }, {
      "left" : "case JsonTokenId.ID_NUMBER_INT:",
      "right" : "case JsonTokenId.ID_NUMBER_INT:",
      "info" : "SwitchCase[15509-15540]:SwitchCase[15509-15540]"
    }, {
      "left" : "return p.getDoubleValue();",
      "right" : "return p.getDoubleValue();",
      "info" : "ReturnStatement[15553-15579]:ReturnStatement[15553-15579]"
    }, {
      "left" : "case JsonTokenId.ID_NULL:",
      "right" : "case JsonTokenId.ID_NULL:",
      "info" : "SwitchCase[15588-15613]:SwitchCase[15588-15613]"
    }, {
      "left" : "_verifyNullForPrimitive(ctxt);",
      "right" : "_verifyNullForPrimitive(ctxt);",
      "info" : "ExpressionStatement[15626-15656]:ExpressionStatement[15626-15656]"
    }, {
      "left" : "return 0.0;",
      "right" : "return 0.0;",
      "info" : "ReturnStatement[15669-15680]:ReturnStatement[15669-15680]"
    }, {
      "left" : "case JsonTokenId.ID_START_ARRAY:",
      "right" : "case JsonTokenId.ID_START_ARRAY:",
      "info" : "SwitchCase[15689-15721]:SwitchCase[15689-15721]"
    }, {
      "left" : "if (ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS))",
      "right" : "if (ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS))",
      "info" : "IfStatement[15734-16015]:IfStatement[15734-16015]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15805-16015]:Block[15805-16015]"
    }, {
      "left" : "p.nextToken();",
      "right" : "p.nextToken();",
      "info" : "ExpressionStatement[15823-15837]:ExpressionStatement[15823-15837]"
    }, {
      "left" : "final double parsed = _parseDoublePrimitive(p, ctxt);",
      "right" : "final double parsed = _parseDoublePrimitive(p, ctxt);",
      "info" : "VariableDeclarationStatement[15854-15907]:VariableDeclarationStatement[15854-15907]"
    }, {
      "left" : "_verifyEndArrayForSingle(p, ctxt);",
      "right" : "_verifyEndArrayForSingle(p, ctxt);",
      "info" : "ExpressionStatement[15924-15958]:ExpressionStatement[15924-15958]"
    }, {
      "left" : "return parsed;",
      "right" : "return parsed;",
      "info" : "ReturnStatement[15975-15989]:ReturnStatement[15975-15989]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[16028-16034]:BreakStatement[16028-16034]"
    }, {
      "left" : "return ((Number) ctxt.handleUnexpectedToken(_valueClass, p)).doubleValue();",
      "right" : "return ((Number) ctxt.handleUnexpectedToken(_valueClass, p)).doubleValue();",
      "info" : "ReturnStatement[16086-16161]:ReturnStatement[16086-16161]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16325-17059]:Block[16325-17059]"
    }, {
      "left" : "switch (text.charAt(0)) {\n        case 'I':\n            if (_isPosInf(text)) {\n                return Double.POSITIVE_INFINITY;\n            }\n            break;\n        case 'N':\n            if (_isNaN(text)) {\n                return Double.NaN;\n            }\n            break;\n        case '-':\n            if (_isNegInf(text)) {\n                return Double.NEGATIVE_INFINITY;\n            }\n            break;\n        }",
      "right" : "switch (text.charAt(0)) {\n        case 'I':\n            if (_isPosInf(text)) {\n                return Double.POSITIVE_INFINITY;\n            }\n            break;\n        case 'N':\n            if (_isNaN(text)) {\n                return Double.NaN;\n            }\n            break;\n        case '-':\n            if (_isNegInf(text)) {\n                return Double.NEGATIVE_INFINITY;\n            }\n            break;\n        }",
      "info" : "SwitchStatement[16335-16758]:SwitchStatement[16335-16758]"
    }, {
      "left" : "case 'I':",
      "right" : "case 'I':",
      "info" : "SwitchCase[16369-16378]:SwitchCase[16369-16378]"
    }, {
      "left" : "if (_isPosInf(text))",
      "right" : "if (_isPosInf(text))",
      "info" : "IfStatement[16391-16476]:IfStatement[16391-16476]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16412-16476]:Block[16412-16476]"
    }, {
      "left" : "return Double.POSITIVE_INFINITY;",
      "right" : "return Double.POSITIVE_INFINITY;",
      "info" : "ReturnStatement[16430-16462]:ReturnStatement[16430-16462]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[16489-16495]:BreakStatement[16489-16495]"
    }, {
      "left" : "case 'N':",
      "right" : "case 'N':",
      "info" : "SwitchCase[16504-16513]:SwitchCase[16504-16513]"
    }, {
      "left" : "if (_isNaN(text))",
      "right" : "if (_isNaN(text))",
      "info" : "IfStatement[16526-16594]:IfStatement[16526-16594]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16544-16594]:Block[16544-16594]"
    }, {
      "left" : "return Double.NaN;",
      "right" : "return Double.NaN;",
      "info" : "ReturnStatement[16562-16580]:ReturnStatement[16562-16580]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[16607-16613]:BreakStatement[16607-16613]"
    }, {
      "left" : "case '-':",
      "right" : "case '-':",
      "info" : "SwitchCase[16622-16631]:SwitchCase[16622-16631]"
    }, {
      "left" : "if (_isNegInf(text))",
      "right" : "if (_isNegInf(text))",
      "info" : "IfStatement[16644-16729]:IfStatement[16644-16729]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16665-16729]:Block[16665-16729]"
    }, {
      "left" : "return Double.NEGATIVE_INFINITY;",
      "right" : "return Double.NEGATIVE_INFINITY;",
      "info" : "ReturnStatement[16683-16715]:ReturnStatement[16683-16715]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[16742-16748]:BreakStatement[16742-16748]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[16767-16861]:TryStatement[16767-16861]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16771-16820]:Block[16771-16820]"
    }, {
      "left" : "return parseDouble(text);",
      "right" : "return parseDouble(text);",
      "info" : "ReturnStatement[16785-16810]:ReturnStatement[16785-16810]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16858-16861]:Block[16858-16861]"
    }, {
      "left" : "Number v = (Number) ctxt.handleWeirdStringValue(_valueClass, text, \n                \"not a valid double value (as String to convert)\");",
      "right" : "Number v = (Number) ctxt.handleWeirdStringValue(_valueClass, text, \n                \"not a valid double value (as String to convert)\");",
      "info" : "VariableDeclarationStatement[16870-17005]:VariableDeclarationStatement[16870-17005]"
    }, {
      "left" : "return _nonNullNumber(v).doubleValue();",
      "right" : "return _nonNullNumber(v).doubleValue();",
      "info" : "ReturnStatement[17014-17053]:ReturnStatement[17014-17053]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17175-18081]:Block[17175-18081]"
    }, {
      "left" : "switch (p.getCurrentTokenId()) {\n        case JsonTokenId.ID_STRING:\n            return _parseDate(p.getText().trim(), ctxt);\n        case JsonTokenId.ID_NUMBER_INT:\n            {\n                long ts;\n                try {\n                    ts = p.getLongValue();\n                } catch (JsonParseException e) {\n                    Number v = (Number) ctxt.handleWeirdNumberValue(_valueClass, p.getNumberValue(),\n                            \"not a valid 64-bit long for creating `java.util.Date`\");\n                    ts = v.longValue();\n                }\n                return new java.util.Date(ts);\n            }\n        case JsonTokenId.ID_NULL:\n            return (java.util.Date) getNullValue(ctxt);\n        case JsonTokenId.ID_START_ARRAY:\n            return _parseDateFromArray(p, ctxt);\n        }",
      "right" : "switch (p.getCurrentTokenId()) {\n        case JsonTokenId.ID_STRING:\n            return _parseDate(p.getText().trim(), ctxt);\n        case JsonTokenId.ID_NUMBER_INT:\n            {\n                long ts;\n                try {\n                    ts = p.getLongValue();\n                } catch (JsonParseException e) {\n                    Number v = (Number) ctxt.handleWeirdNumberValue(_valueClass, p.getNumberValue(),\n                            \"not a valid 64-bit long for creating `java.util.Date`\");\n                    ts = v.longValue();\n                }\n                return new java.util.Date(ts);\n            }\n        case JsonTokenId.ID_NULL:\n            return (java.util.Date) getNullValue(ctxt);\n        case JsonTokenId.ID_START_ARRAY:\n            return _parseDateFromArray(p, ctxt);\n        }",
      "info" : "SwitchStatement[17185-17999]:SwitchStatement[17185-17999]"
    }, {
      "left" : "case JsonTokenId.ID_STRING:",
      "right" : "case JsonTokenId.ID_STRING:",
      "info" : "SwitchCase[17226-17253]:SwitchCase[17226-17253]"
    }, {
      "left" : "return _parseDate(p.getText().trim(), ctxt);",
      "right" : "return _parseDate(p.getText().trim(), ctxt);",
      "info" : "ReturnStatement[17266-17310]:ReturnStatement[17266-17310]"
    }, {
      "left" : "case JsonTokenId.ID_NUMBER_INT:",
      "right" : "case JsonTokenId.ID_NUMBER_INT:",
      "info" : "SwitchCase[17319-17350]:SwitchCase[17319-17350]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17363-17809]:Block[17363-17809]"
    }, {
      "left" : "long ts;",
      "right" : "long ts;",
      "info" : "VariableDeclarationStatement[17381-17389]:VariableDeclarationStatement[17381-17389]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[17406-17748]:TryStatement[17406-17748]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17410-17472]:Block[17410-17472]"
    }, {
      "left" : "ts = p.getLongValue();",
      "right" : "ts = p.getLongValue();",
      "info" : "ExpressionStatement[17432-17454]:ExpressionStatement[17432-17454]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17502-17748]:Block[17502-17748]"
    }, {
      "left" : "Number v = (Number) ctxt.handleWeirdNumberValue(_valueClass, p.getNumberValue(),\n                            \"not a valid 64-bit long for creating `java.util.Date`\");",
      "right" : "Number v = (Number) ctxt.handleWeirdNumberValue(_valueClass, p.getNumberValue(),\n                            \"not a valid 64-bit long for creating `java.util.Date`\");",
      "info" : "VariableDeclarationStatement[17524-17690]:VariableDeclarationStatement[17524-17690]"
    }, {
      "left" : "ts = v.longValue();",
      "right" : "ts = v.longValue();",
      "info" : "ExpressionStatement[17711-17730]:ExpressionStatement[17711-17730]"
    }, {
      "left" : "return new java.util.Date(ts);",
      "right" : "return new java.util.Date(ts);",
      "info" : "ReturnStatement[17765-17795]:ReturnStatement[17765-17795]"
    }, {
      "left" : "case JsonTokenId.ID_NULL:",
      "right" : "case JsonTokenId.ID_NULL:",
      "info" : "SwitchCase[17818-17843]:SwitchCase[17818-17843]"
    }, {
      "left" : "return (java.util.Date) getNullValue(ctxt);",
      "right" : "return (java.util.Date) getNullValue(ctxt);",
      "info" : "ReturnStatement[17856-17899]:ReturnStatement[17856-17899]"
    }, {
      "left" : "case JsonTokenId.ID_START_ARRAY:",
      "right" : "case JsonTokenId.ID_START_ARRAY:",
      "info" : "SwitchCase[17908-17940]:SwitchCase[17908-17940]"
    }, {
      "left" : "return _parseDateFromArray(p, ctxt);",
      "right" : "return _parseDateFromArray(p, ctxt);",
      "info" : "ReturnStatement[17953-17989]:ReturnStatement[17953-17989]"
    }, {
      "left" : "return (java.util.Date) ctxt.handleUnexpectedToken(_valueClass, p);",
      "right" : "return (java.util.Date) ctxt.handleUnexpectedToken(_valueClass, p);",
      "info" : "ReturnStatement[18008-18075]:ReturnStatement[18008-18075]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18228-18982]:Block[18228-18982]"
    }, {
      "left" : "JsonToken t;",
      "right" : "JsonToken t;",
      "info" : "VariableDeclarationStatement[18238-18250]:VariableDeclarationStatement[18238-18250]"
    }, {
      "left" : "if (ctxt.hasSomeOfFeatures(F_MASK_ACCEPT_ARRAYS))",
      "right" : "if (ctxt.hasSomeOfFeatures(F_MASK_ACCEPT_ARRAYS))",
      "info" : "IfStatement[18259-18891]:IfStatement[18259-18891]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18309-18837]:Block[18309-18837]"
    }, {
      "left" : "t = p.nextToken();",
      "right" : "t = p.nextToken();",
      "info" : "ExpressionStatement[18323-18341]:ExpressionStatement[18323-18341]"
    }, {
      "left" : "if (t == JsonToken.END_ARRAY)",
      "right" : "if (t == JsonToken.END_ARRAY)",
      "info" : "IfStatement[18354-18577]:IfStatement[18354-18577]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18384-18577]:Block[18384-18577]"
    }, {
      "left" : "if (ctxt.isEnabled(DeserializationFeature.ACCEPT_EMPTY_ARRAY_AS_NULL_OBJECT))",
      "right" : "if (ctxt.isEnabled(DeserializationFeature.ACCEPT_EMPTY_ARRAY_AS_NULL_OBJECT))",
      "info" : "IfStatement[18402-18563]:IfStatement[18402-18563]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18480-18563]:Block[18480-18563]"
    }, {
      "left" : "return (java.util.Date) getNullValue(ctxt);",
      "right" : "return (java.util.Date) getNullValue(ctxt);",
      "info" : "ReturnStatement[18502-18545]:ReturnStatement[18502-18545]"
    }, {
      "left" : "if (ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS))",
      "right" : "if (ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS))",
      "info" : "IfStatement[18590-18827]:IfStatement[18590-18827]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18661-18827]:Block[18661-18827]"
    }, {
      "left" : "final Date parsed = _parseDate(p, ctxt);",
      "right" : "final Date parsed = _parseDate(p, ctxt);",
      "info" : "VariableDeclarationStatement[18679-18719]:VariableDeclarationStatement[18679-18719]"
    }, {
      "left" : "_verifyEndArrayForSingle(p, ctxt);",
      "right" : "_verifyEndArrayForSingle(p, ctxt);",
      "info" : "ExpressionStatement[18736-18770]:ExpressionStatement[18736-18770]"
    }, {
      "left" : "return parsed;",
      "right" : "return parsed;",
      "info" : "ReturnStatement[18787-18801]:ReturnStatement[18787-18801]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18843-18891]:Block[18843-18891]"
    }, {
      "left" : "t = p.getCurrentToken();",
      "right" : "t = p.getCurrentToken();",
      "info" : "ExpressionStatement[18857-18881]:ExpressionStatement[18857-18881]"
    }, {
      "left" : "return (java.util.Date) ctxt.handleUnexpectedToken(_valueClass, t, p, null);",
      "right" : "return (java.util.Date) ctxt.handleUnexpectedToken(_valueClass, t, p, null);",
      "info" : "ReturnStatement[18900-18976]:ReturnStatement[18900-18976]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19916-20204]:Block[19931-20219]"
    }, {
      "left" : "if (NumberInput.NASTY_SMALL_DOUBLE.equals(numStr))",
      "right" : "if (NumberInput.NASTY_SMALL_DOUBLE.equals(numStr))",
      "info" : "IfStatement[20021-20155]:IfStatement[20036-20170]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20072-20155]:Block[20087-20170]"
    }, {
      "left" : "return Double.MIN_NORMAL;",
      "right" : "return Double.MIN_NORMAL;",
      "info" : "ReturnStatement[20086-20111]:ReturnStatement[20101-20126]"
    }, {
      "left" : "return Double.parseDouble(numStr);",
      "right" : "return Double.parseDouble(numStr);",
      "info" : "ReturnStatement[20164-20198]:ReturnStatement[20179-20213]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20495-21283]:Block[20510-21298]"
    }, {
      "left" : "JsonToken t = p.getCurrentToken();",
      "right" : "JsonToken t = p.getCurrentToken();",
      "info" : "VariableDeclarationStatement[20505-20539]:VariableDeclarationStatement[20520-20554]"
    }, {
      "left" : "if (t == JsonToken.VALUE_STRING)",
      "right" : "if (t == JsonToken.VALUE_STRING)",
      "info" : "IfStatement[20548-20624]:IfStatement[20563-20639]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20581-20624]:Block[20596-20639]"
    }, {
      "left" : "return p.getText();",
      "right" : "return p.getText();",
      "info" : "ReturnStatement[20595-20614]:ReturnStatement[20610-20629]"
    }, {
      "left" : "String value = p.getValueAsString();",
      "right" : "String value = p.getValueAsString();",
      "info" : "VariableDeclarationStatement[21107-21143]:VariableDeclarationStatement[21122-21158]"
    }, {
      "left" : "if (value != null)",
      "right" : "if (value != null)",
      "info" : "IfStatement[21152-21208]:IfStatement[21167-21223]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21171-21208]:Block[21186-21223]"
    }, {
      "left" : "return value;",
      "right" : "return value;",
      "info" : "ReturnStatement[21185-21198]:ReturnStatement[21200-21213]"
    }, {
      "left" : "return (String) ctxt.handleUnexpectedToken(String.class, p);",
      "right" : "return (String) ctxt.handleUnexpectedToken(String.class, p);",
      "info" : "ReturnStatement[21217-21277]:ReturnStatement[21232-21292]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21647-22421]:Block[21662-22436]"
    }, {
      "left" : "JsonToken t = p.getCurrentToken();",
      "right" : "JsonToken t = p.getCurrentToken();",
      "info" : "VariableDeclarationStatement[21657-21691]:VariableDeclarationStatement[21672-21706]"
    }, {
      "left" : "if (t == JsonToken.START_ARRAY)",
      "right" : "if (t == JsonToken.START_ARRAY)",
      "info" : "IfStatement[21700-22350]:IfStatement[21715-22365]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21732-22056]:Block[21747-22071]"
    }, {
      "left" : "if (ctxt.isEnabled(DeserializationFeature.ACCEPT_EMPTY_ARRAY_AS_NULL_OBJECT))",
      "right" : "if (ctxt.isEnabled(DeserializationFeature.ACCEPT_EMPTY_ARRAY_AS_NULL_OBJECT))",
      "info" : "IfStatement[21746-22046]:IfStatement[21761-22061]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21824-22046]:Block[21839-22061]"
    }, {
      "left" : "t = p.nextToken();",
      "right" : "t = p.nextToken();",
      "info" : "ExpressionStatement[21842-21860]:ExpressionStatement[21857-21875]"
    }, {
      "left" : "if (t == JsonToken.END_ARRAY)",
      "right" : "if (t == JsonToken.END_ARRAY)",
      "info" : "IfStatement[21877-21959]:IfStatement[21892-21974]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21907-21959]:Block[21922-21974]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[21929-21941]:ReturnStatement[21944-21956]"
    }, {
      "left" : "return (T) ctxt.handleUnexpectedToken(handledType(), p);",
      "right" : "return (T) ctxt.handleUnexpectedToken(handledType(), p);",
      "info" : "ReturnStatement[21976-22032]:ReturnStatement[21991-22047]"
    }, {
      "left" : "if (t == JsonToken.VALUE_STRING)",
      "right" : "if (t == JsonToken.VALUE_STRING)",
      "info" : "IfStatement[22062-22350]:IfStatement[22077-22365]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22095-22350]:Block[22110-22365]"
    }, {
      "left" : "if (ctxt.isEnabled(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT))",
      "right" : "if (ctxt.isEnabled(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT))",
      "info" : "IfStatement[22109-22340]:IfStatement[22124-22355]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22188-22340]:Block[22203-22355]"
    }, {
      "left" : "String str = p.getText().trim();",
      "right" : "String str = p.getText().trim();",
      "info" : "VariableDeclarationStatement[22206-22238]:VariableDeclarationStatement[22221-22253]"
    }, {
      "left" : "if (str.isEmpty())",
      "right" : "if (str.isEmpty())",
      "info" : "IfStatement[22255-22326]:IfStatement[22270-22341]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22274-22326]:Block[22289-22341]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[22296-22308]:ReturnStatement[22311-22323]"
    }, {
      "left" : "return (T) ctxt.handleUnexpectedToken(handledType(), p);",
      "right" : "return (T) ctxt.handleUnexpectedToken(handledType(), p);",
      "info" : "ReturnStatement[22359-22415]:ReturnStatement[22374-22430]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22683-22727]:Block[22698-22742]"
    }, {
      "left" : "return \"null\".equals(value);",
      "right" : "return \"null\".equals(value);",
      "info" : "ReturnStatement[22693-22721]:ReturnStatement[22708-22736]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22821-22884]:Block[22836-22899]"
    }, {
      "left" : "return value.isEmpty() || \"null\".equals(value);",
      "right" : "return value.isEmpty() || \"null\".equals(value);",
      "info" : "ReturnStatement[22831-22878]:ReturnStatement[22846-22893]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22941-23012]:Block[22956-23027]"
    }, {
      "left" : "return \"-Infinity\".equals(text) || \"-INF\".equals(text);",
      "right" : "return \"-Infinity\".equals(text) || \"-INF\".equals(text);",
      "info" : "ReturnStatement[22951-23006]:ReturnStatement[22966-23021]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23065-23134]:Block[23080-23149]"
    }, {
      "left" : "return \"Infinity\".equals(text) || \"INF\".equals(text);",
      "right" : "return \"Infinity\".equals(text) || \"INF\".equals(text);",
      "info" : "ReturnStatement[23075-23128]:ReturnStatement[23090-23143]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23184-23214]:Block[23199-23229]"
    }, {
      "left" : "return \"NaN\".equals(text);",
      "right" : "return \"NaN\".equals(text);",
      "info" : "ReturnStatement[23186-23212]:ReturnStatement[23201-23227]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24395-25271]:Block[24410-25286]"
    }, {
      "left" : "JsonToken t;",
      "right" : "JsonToken t;",
      "info" : "VariableDeclarationStatement[24405-24417]:VariableDeclarationStatement[24420-24432]"
    }, {
      "left" : "if (ctxt.hasSomeOfFeatures(F_MASK_ACCEPT_ARRAYS))",
      "right" : "if (ctxt.hasSomeOfFeatures(F_MASK_ACCEPT_ARRAYS))",
      "info" : "IfStatement[24426-25127]:IfStatement[24441-25142]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24476-25073]:Block[24491-25088]"
    }, {
      "left" : "t = p.nextToken();",
      "right" : "t = p.nextToken();",
      "info" : "ExpressionStatement[24490-24508]:ExpressionStatement[24505-24523]"
    }, {
      "left" : "if (t == JsonToken.END_ARRAY)",
      "right" : "if (t == JsonToken.END_ARRAY)",
      "info" : "IfStatement[24521-24727]:IfStatement[24536-24742]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24551-24727]:Block[24566-24742]"
    }, {
      "left" : "if (ctxt.isEnabled(DeserializationFeature.ACCEPT_EMPTY_ARRAY_AS_NULL_OBJECT))",
      "right" : "if (ctxt.isEnabled(DeserializationFeature.ACCEPT_EMPTY_ARRAY_AS_NULL_OBJECT))",
      "info" : "IfStatement[24569-24713]:IfStatement[24584-24728]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24647-24713]:Block[24662-24728]"
    }, {
      "left" : "return getNullValue(ctxt);",
      "right" : "return getNullValue(ctxt);",
      "info" : "ReturnStatement[24669-24695]:ReturnStatement[24684-24710]"
    }, {
      "left" : "if (ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS))",
      "right" : "if (ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS))",
      "info" : "IfStatement[24740-25063]:IfStatement[24755-25078]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24811-25063]:Block[24826-25078]"
    }, {
      "left" : "final T parsed = deserialize(p, ctxt);",
      "right" : "final T parsed = deserialize(p, ctxt);",
      "info" : "VariableDeclarationStatement[24829-24867]:VariableDeclarationStatement[24844-24882]"
    }, {
      "left" : "if (p.nextToken() != JsonToken.END_ARRAY)",
      "right" : "if (p.nextToken() != JsonToken.END_ARRAY)",
      "info" : "IfStatement[24884-25006]:IfStatement[24899-25021]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24926-25006]:Block[24941-25021]"
    }, {
      "left" : "handleMissingEndArrayForSingle(p, ctxt);",
      "right" : "handleMissingEndArrayForSingle(p, ctxt);",
      "info" : "ExpressionStatement[24948-24988]:ExpressionStatement[24963-25003]"
    }, {
      "left" : "return parsed;",
      "right" : "return parsed;",
      "info" : "ReturnStatement[25023-25037]:ReturnStatement[25038-25052]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25079-25127]:Block[25094-25142]"
    }, {
      "left" : "t = p.getCurrentToken();",
      "right" : "t = p.getCurrentToken();",
      "info" : "ExpressionStatement[25093-25117]:ExpressionStatement[25108-25132]"
    }, {
      "left" : "@SuppressWarnings(\"unchecked\")\n        T result = (T) ctxt.handleUnexpectedToken(_valueClass, t, p, null);",
      "right" : "@SuppressWarnings(\"unchecked\")\n        T result = (T) ctxt.handleUnexpectedToken(_valueClass, t, p, null);",
      "info" : "VariableDeclarationStatement[25136-25242]:VariableDeclarationStatement[25151-25257]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[25251-25265]:ReturnStatement[25266-25280]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25659-26370]:Block[25674-26385]"
    }, {
      "left" : "if (p.hasToken(JsonToken.START_ARRAY))",
      "right" : "if (p.hasToken(JsonToken.START_ARRAY))",
      "info" : "IfStatement[25830-26323]:IfStatement[25845-26338]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25869-26323]:Block[25884-26338]"
    }, {
      "left" : "String msg = String.format(\n\"Cannot deserialize instance of %s out of %s token: nested Arrays not allowed with %s\",\n                    ClassUtil.nameOf(_valueClass), JsonToken.START_ARRAY,\n                    \"DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS\");",
      "right" : "String msg = String.format(\n\"Cannot deserialize instance of %s out of %s token: nested Arrays not allowed with %s\",\n                    ClassUtil.nameOf(_valueClass), JsonToken.START_ARRAY,\n                    \"DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS\");",
      "info" : "VariableDeclarationStatement[25883-26146]:VariableDeclarationStatement[25898-26161]"
    }, {
      "left" : "@SuppressWarnings(\"unchecked\")\n            T result = (T) ctxt.handleUnexpectedToken(_valueClass, p.getCurrentToken(), p, msg);",
      "right" : "@SuppressWarnings(\"unchecked\")\n            T result = (T) ctxt.handleUnexpectedToken(_valueClass, p.getCurrentToken(), p, msg);",
      "info" : "VariableDeclarationStatement[26159-26286]:VariableDeclarationStatement[26174-26301]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[26299-26313]:ReturnStatement[26314-26328]"
    }, {
      "left" : "return (T) deserialize(p, ctxt);",
      "right" : "return (T) deserialize(p, ctxt);",
      "info" : "ReturnStatement[26332-26364]:ReturnStatement[26347-26379]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26688-26906]:Block[26703-26921]"
    }, {
      "left" : "ctxt.reportInputMismatch(handledType(),\n\"Cannot coerce a floating-point value ('%s') into %s (enable `DeserializationFeature.ACCEPT_FLOAT_AS_INT` to allow)\",\n                p.getValueAsString(), type);",
      "right" : "ctxt.reportInputMismatch(handledType(),\n\"Cannot coerce a floating-point value ('%s') into %s (enable `DeserializationFeature.ACCEPT_FLOAT_AS_INT` to allow)\",\n                p.getValueAsString(), type);",
      "info" : "ExpressionStatement[26698-26900]:ExpressionStatement[26713-26915]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27446-27837]:Block[27461-27852]"
    }, {
      "left" : "int feats = ctxt.getDeserializationFeatures();",
      "right" : "int feats = ctxt.getDeserializationFeatures();",
      "info" : "VariableDeclarationStatement[27456-27502]:VariableDeclarationStatement[27471-27517]"
    }, {
      "left" : "if (DeserializationFeature.USE_BIG_INTEGER_FOR_INTS.enabledIn(feats))",
      "right" : "if (DeserializationFeature.USE_BIG_INTEGER_FOR_INTS.enabledIn(feats))",
      "info" : "IfStatement[27511-27635]:IfStatement[27526-27650]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27581-27635]:Block[27596-27650]"
    }, {
      "left" : "return p.getBigIntegerValue();",
      "right" : "return p.getBigIntegerValue();",
      "info" : "ReturnStatement[27595-27625]:ReturnStatement[27610-27640]"
    }, {
      "left" : "if (DeserializationFeature.USE_LONG_FOR_INTS.enabledIn(feats))",
      "right" : "if (DeserializationFeature.USE_LONG_FOR_INTS.enabledIn(feats))",
      "info" : "IfStatement[27644-27755]:IfStatement[27659-27770]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27707-27755]:Block[27722-27770]"
    }, {
      "left" : "return p.getLongValue();",
      "right" : "return p.getLongValue();",
      "info" : "ReturnStatement[27721-27745]:ReturnStatement[27736-27760]"
    }, {
      "left" : "return p.getBigIntegerValue();",
      "right" : "return p.getBigIntegerValue();",
      "info" : "ReturnStatement[27764-27794]:ReturnStatement[27779-27809]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28157-28279]:Block[28172-28294]"
    }, {
      "left" : "if (isPrimitive)",
      "right" : "if (isPrimitive)",
      "info" : "IfStatement[28167-28238]:IfStatement[28182-28253]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28184-28238]:Block[28199-28253]"
    }, {
      "left" : "_verifyNullForPrimitive(ctxt);",
      "right" : "_verifyNullForPrimitive(ctxt);",
      "info" : "ExpressionStatement[28198-28228]:ExpressionStatement[28213-28243]"
    }, {
      "left" : "return getNullValue(ctxt);",
      "right" : "return getNullValue(ctxt);",
      "info" : "ReturnStatement[28247-28273]:ReturnStatement[28262-28288]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28516-29091]:Block[28531-29106]"
    }, {
      "left" : "Enum<?> feat;",
      "right" : "Enum<?> feat;",
      "info" : "VariableDeclarationStatement[28526-28539]:VariableDeclarationStatement[28541-28554]"
    }, {
      "left" : "boolean enable;",
      "right" : "boolean enable;",
      "info" : "VariableDeclarationStatement[28548-28563]:VariableDeclarationStatement[28563-28578]"
    }, {
      "left" : "if (!ctxt.isEnabled(MapperFeature.ALLOW_COERCION_OF_SCALARS))",
      "right" : "if (!ctxt.isEnabled(MapperFeature.ALLOW_COERCION_OF_SCALARS))",
      "info" : "IfStatement[28573-28992]:IfStatement[28588-29007]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28635-28733]:Block[28650-28748]"
    }, {
      "left" : "feat = MapperFeature.ALLOW_COERCION_OF_SCALARS;",
      "right" : "feat = MapperFeature.ALLOW_COERCION_OF_SCALARS;",
      "info" : "ExpressionStatement[28649-28696]:ExpressionStatement[28664-28711]"
    }, {
      "left" : "enable = true;",
      "right" : "enable = true;",
      "info" : "ExpressionStatement[28709-28723]:ExpressionStatement[28724-28738]"
    }, {
      "left" : "if (isPrimitive && ctxt.isEnabled(DeserializationFeature.FAIL_ON_NULL_FOR_PRIMITIVES))",
      "right" : "if (isPrimitive && ctxt.isEnabled(DeserializationFeature.FAIL_ON_NULL_FOR_PRIMITIVES))",
      "info" : "IfStatement[28739-28992]:IfStatement[28754-29007]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28826-28936]:Block[28841-28951]"
    }, {
      "left" : "feat = DeserializationFeature.FAIL_ON_NULL_FOR_PRIMITIVES;",
      "right" : "feat = DeserializationFeature.FAIL_ON_NULL_FOR_PRIMITIVES;",
      "info" : "ExpressionStatement[28840-28898]:ExpressionStatement[28855-28913]"
    }, {
      "left" : "enable = false;",
      "right" : "enable = false;",
      "info" : "ExpressionStatement[28911-28926]:ExpressionStatement[28926-28941]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28942-28992]:Block[28957-29007]"
    }, {
      "left" : "return getNullValue(ctxt);",
      "right" : "return getNullValue(ctxt);",
      "info" : "ReturnStatement[28956-28982]:ReturnStatement[28971-28997]"
    }, {
      "left" : "_reportFailedNullCoerce(ctxt, enable, feat, \"String \\\"null\\\"\");",
      "right" : "_reportFailedNullCoerce(ctxt, enable, feat, \"String \\\"null\\\"\");",
      "info" : "ExpressionStatement[29001-29064]:ExpressionStatement[29016-29079]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[29073-29085]:ReturnStatement[29088-29100]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29347-29926]:Block[29362-29941]"
    }, {
      "left" : "Enum<?> feat;",
      "right" : "Enum<?> feat;",
      "info" : "VariableDeclarationStatement[29357-29370]:VariableDeclarationStatement[29372-29385]"
    }, {
      "left" : "boolean enable;",
      "right" : "boolean enable;",
      "info" : "VariableDeclarationStatement[29379-29394]:VariableDeclarationStatement[29394-29409]"
    }, {
      "left" : "if (!ctxt.isEnabled(MapperFeature.ALLOW_COERCION_OF_SCALARS))",
      "right" : "if (!ctxt.isEnabled(MapperFeature.ALLOW_COERCION_OF_SCALARS))",
      "info" : "IfStatement[29404-29823]:IfStatement[29419-29838]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29466-29564]:Block[29481-29579]"
    }, {
      "left" : "feat = MapperFeature.ALLOW_COERCION_OF_SCALARS;",
      "right" : "feat = MapperFeature.ALLOW_COERCION_OF_SCALARS;",
      "info" : "ExpressionStatement[29480-29527]:ExpressionStatement[29495-29542]"
    }, {
      "left" : "enable = true;",
      "right" : "enable = true;",
      "info" : "ExpressionStatement[29540-29554]:ExpressionStatement[29555-29569]"
    }, {
      "left" : "if (isPrimitive && ctxt.isEnabled(DeserializationFeature.FAIL_ON_NULL_FOR_PRIMITIVES))",
      "right" : "if (isPrimitive && ctxt.isEnabled(DeserializationFeature.FAIL_ON_NULL_FOR_PRIMITIVES))",
      "info" : "IfStatement[29570-29823]:IfStatement[29585-29838]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29657-29767]:Block[29672-29782]"
    }, {
      "left" : "feat = DeserializationFeature.FAIL_ON_NULL_FOR_PRIMITIVES;",
      "right" : "feat = DeserializationFeature.FAIL_ON_NULL_FOR_PRIMITIVES;",
      "info" : "ExpressionStatement[29671-29729]:ExpressionStatement[29686-29744]"
    }, {
      "left" : "enable = false;",
      "right" : "enable = false;",
      "info" : "ExpressionStatement[29742-29757]:ExpressionStatement[29757-29772]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29773-29823]:Block[29788-29838]"
    }, {
      "left" : "return getNullValue(ctxt);",
      "right" : "return getNullValue(ctxt);",
      "info" : "ReturnStatement[29787-29813]:ReturnStatement[29802-29828]"
    }, {
      "left" : "_reportFailedNullCoerce(ctxt, enable, feat, \"empty String (\\\"\\\")\");",
      "right" : "_reportFailedNullCoerce(ctxt, enable, feat, \"empty String (\\\"\\\")\");",
      "info" : "ExpressionStatement[29832-29899]:ExpressionStatement[29847-29914]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[29908-29920]:ReturnStatement[29923-29935]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30056-30338]:Block[30071-30353]"
    }, {
      "left" : "if (ctxt.isEnabled(DeserializationFeature.FAIL_ON_NULL_FOR_PRIMITIVES))",
      "right" : "if (ctxt.isEnabled(DeserializationFeature.FAIL_ON_NULL_FOR_PRIMITIVES))",
      "info" : "IfStatement[30066-30332]:IfStatement[30081-30347]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30138-30332]:Block[30153-30347]"
    }, {
      "left" : "ctxt.reportInputMismatch(this,\n\"Cannot coerce `null` %s (disable `DeserializationFeature.FAIL_ON_NULL_FOR_PRIMITIVES` to allow)\",\n                    _coercedTypeDesc());",
      "right" : "ctxt.reportInputMismatch(this,\n\"Cannot coerce `null` %s (disable `DeserializationFeature.FAIL_ON_NULL_FOR_PRIMITIVES` to allow)\",\n                    _coercedTypeDesc());",
      "info" : "ExpressionStatement[30152-30322]:ExpressionStatement[30167-30337]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30528-31140]:Block[30543-31155]"
    }, {
      "left" : "Enum<?> feat;",
      "right" : "Enum<?> feat;",
      "info" : "VariableDeclarationStatement[30538-30551]:VariableDeclarationStatement[30553-30566]"
    }, {
      "left" : "boolean enable;",
      "right" : "boolean enable;",
      "info" : "VariableDeclarationStatement[30560-30575]:VariableDeclarationStatement[30575-30590]"
    }, {
      "left" : "if (!ctxt.isEnabled(MapperFeature.ALLOW_COERCION_OF_SCALARS))",
      "right" : "if (!ctxt.isEnabled(MapperFeature.ALLOW_COERCION_OF_SCALARS))",
      "info" : "IfStatement[30585-30970]:IfStatement[30600-30985]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30647-30745]:Block[30662-30760]"
    }, {
      "left" : "feat = MapperFeature.ALLOW_COERCION_OF_SCALARS;",
      "right" : "feat = MapperFeature.ALLOW_COERCION_OF_SCALARS;",
      "info" : "ExpressionStatement[30661-30708]:ExpressionStatement[30676-30723]"
    }, {
      "left" : "enable = true;",
      "right" : "enable = true;",
      "info" : "ExpressionStatement[30721-30735]:ExpressionStatement[30736-30750]"
    }, {
      "left" : "if (ctxt.isEnabled(DeserializationFeature.FAIL_ON_NULL_FOR_PRIMITIVES))",
      "right" : "if (ctxt.isEnabled(DeserializationFeature.FAIL_ON_NULL_FOR_PRIMITIVES))",
      "info" : "IfStatement[30751-30970]:IfStatement[30766-30985]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30823-30933]:Block[30838-30948]"
    }, {
      "left" : "feat = DeserializationFeature.FAIL_ON_NULL_FOR_PRIMITIVES;",
      "right" : "feat = DeserializationFeature.FAIL_ON_NULL_FOR_PRIMITIVES;",
      "info" : "ExpressionStatement[30837-30895]:ExpressionStatement[30852-30910]"
    }, {
      "left" : "enable = false;",
      "right" : "enable = false;",
      "info" : "ExpressionStatement[30908-30923]:ExpressionStatement[30923-30938]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30939-30970]:Block[30954-30985]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[30953-30960]:ReturnStatement[30968-30975]"
    }, {
      "left" : "String strDesc = str.isEmpty() ? \"empty String (\\\"\\\")\" : String.format(\"String \\\"%s\\\"\", str);",
      "right" : "String strDesc = str.isEmpty() ? \"empty String (\\\"\\\")\" : String.format(\"String \\\"%s\\\"\", str);",
      "info" : "VariableDeclarationStatement[30979-31072]:VariableDeclarationStatement[30994-31087]"
    }, {
      "left" : "_reportFailedNullCoerce(ctxt, enable, feat, strDesc);",
      "right" : "_reportFailedNullCoerce(ctxt, enable, feat, strDesc);",
      "info" : "ExpressionStatement[31081-31134]:ExpressionStatement[31096-31149]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31326-31620]:Block[31341-31635]"
    }, {
      "left" : "if (!ctxt.isEnabled(MapperFeature.ALLOW_COERCION_OF_SCALARS))",
      "right" : "if (!ctxt.isEnabled(MapperFeature.ALLOW_COERCION_OF_SCALARS))",
      "info" : "IfStatement[31336-31614]:IfStatement[31351-31629]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31398-31614]:Block[31413-31629]"
    }, {
      "left" : "String strDesc = str.isEmpty() ? \"empty String (\\\"\\\")\" : String.format(\"String \\\"%s\\\"\", str);",
      "right" : "String strDesc = str.isEmpty() ? \"empty String (\\\"\\\")\" : String.format(\"String \\\"%s\\\"\", str);",
      "info" : "VariableDeclarationStatement[31412-31505]:VariableDeclarationStatement[31427-31520]"
    }, {
      "left" : "_reportFailedNullCoerce(ctxt, true, MapperFeature.ALLOW_COERCION_OF_SCALARS, strDesc);",
      "right" : "_reportFailedNullCoerce(ctxt, true, MapperFeature.ALLOW_COERCION_OF_SCALARS, strDesc);",
      "info" : "ExpressionStatement[31518-31604]:ExpressionStatement[31533-31619]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31763-32078]:Block[31778-32093]"
    }, {
      "left" : "MapperFeature feat = MapperFeature.ALLOW_COERCION_OF_SCALARS;",
      "right" : "MapperFeature feat = MapperFeature.ALLOW_COERCION_OF_SCALARS;",
      "info" : "VariableDeclarationStatement[31773-31834]:VariableDeclarationStatement[31788-31849]"
    }, {
      "left" : "if (!ctxt.isEnabled(feat))",
      "right" : "if (!ctxt.isEnabled(feat))",
      "info" : "IfStatement[31843-32072]:IfStatement[31858-32087]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31870-32072]:Block[31885-32087]"
    }, {
      "left" : "ctxt.reportInputMismatch(this, \"Cannot coerce String \\\"%s\\\" %s (enable `%s.%s` to allow)\",\n                str, _coercedTypeDesc(), feat.getClass().getSimpleName(), feat.name());",
      "right" : "ctxt.reportInputMismatch(this, \"Cannot coerce String \\\"%s\\\" %s (enable `%s.%s` to allow)\",\n                str, _coercedTypeDesc(), feat.getClass().getSimpleName(), feat.name());",
      "info" : "ExpressionStatement[31884-32062]:ExpressionStatement[31899-32077]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32214-32762]:Block[32229-32777]"
    }, {
      "left" : "MapperFeature feat = MapperFeature.ALLOW_COERCION_OF_SCALARS;",
      "right" : "MapperFeature feat = MapperFeature.ALLOW_COERCION_OF_SCALARS;",
      "info" : "VariableDeclarationStatement[32224-32285]:VariableDeclarationStatement[32239-32300]"
    }, {
      "left" : "if (!ctxt.isEnabled(feat))",
      "right" : "if (!ctxt.isEnabled(feat))",
      "info" : "IfStatement[32294-32756]:IfStatement[32309-32771]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32321-32756]:Block[32336-32771]"
    }, {
      "left" : "String valueDesc = p.getText();",
      "right" : "String valueDesc = p.getText();",
      "info" : "VariableDeclarationStatement[32520-32551]:VariableDeclarationStatement[32535-32566]"
    }, {
      "left" : "ctxt.reportInputMismatch(this, \"Cannot coerce Number (%s) %s (enable `%s.%s` to allow)\",\n                valueDesc, _coercedTypeDesc(), feat.getClass().getSimpleName(), feat.name());",
      "right" : "ctxt.reportInputMismatch(this, \"Cannot coerce Number (%s) %s (enable `%s.%s` to allow)\",\n                valueDesc, _coercedTypeDesc(), feat.getClass().getSimpleName(), feat.name());",
      "info" : "ExpressionStatement[32564-32746]:ExpressionStatement[32579-32761]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32934-33205]:Block[32949-33220]"
    }, {
      "left" : "String enableDesc = state ? \"enable\" : \"disable\";",
      "right" : "String enableDesc = state ? \"enable\" : \"disable\";",
      "info" : "VariableDeclarationStatement[32944-32993]:VariableDeclarationStatement[32959-33008]"
    }, {
      "left" : "ctxt.reportInputMismatch(this, \"Cannot coerce %s to Null value %s (%s `%s.%s` to allow)\",\n            inputDesc, _coercedTypeDesc(), enableDesc, feature.getClass().getSimpleName(), feature.name());",
      "right" : "ctxt.reportInputMismatch(this, \"Cannot coerce %s to Null value %s (%s `%s.%s` to allow)\",\n            inputDesc, _coercedTypeDesc(), enableDesc, feature.getClass().getSimpleName(), feature.name());",
      "info" : "ExpressionStatement[33002-33199]:ExpressionStatement[33017-33214]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33589-34328]:Block[33604-34343]"
    }, {
      "left" : "boolean structured;",
      "right" : "boolean structured;",
      "info" : "VariableDeclarationStatement[33599-33618]:VariableDeclarationStatement[33614-33633]"
    }, {
      "left" : "String typeDesc;",
      "right" : "String typeDesc;",
      "info" : "VariableDeclarationStatement[33627-33643]:VariableDeclarationStatement[33642-33658]"
    }, {
      "left" : "JavaType t = getValueType();",
      "right" : "JavaType t = getValueType();",
      "info" : "VariableDeclarationStatement[33653-33681]:VariableDeclarationStatement[33668-33696]"
    }, {
      "left" : "if ((t != null) && !t.isPrimitive())",
      "right" : "if ((t != null) && !t.isPrimitive())",
      "info" : "IfStatement[33690-34198]:IfStatement[33705-34213]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33727-33960]:Block[33742-33975]"
    }, {
      "left" : "structured = (t.isContainerType() || t.isReferenceType());",
      "right" : "structured = (t.isContainerType() || t.isReferenceType());",
      "info" : "ExpressionStatement[33741-33799]:ExpressionStatement[33756-33814]"
    }, {
      "left" : "typeDesc = \"'\"+t.toString()+\"'\";",
      "right" : "typeDesc = \"'\"+t.toString()+\"'\";",
      "info" : "ExpressionStatement[33918-33950]:ExpressionStatement[33933-33965]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33966-34198]:Block[33981-34213]"
    }, {
      "left" : "Class<?> cls = handledType();",
      "right" : "Class<?> cls = handledType();",
      "info" : "VariableDeclarationStatement[33980-34009]:VariableDeclarationStatement[33995-34024]"
    }, {
      "left" : "structured = cls.isArray() || Collection.class.isAssignableFrom(cls)\n                || Map.class.isAssignableFrom(cls);",
      "right" : "structured = cls.isArray() || Collection.class.isAssignableFrom(cls)\n                || Map.class.isAssignableFrom(cls);",
      "info" : "ExpressionStatement[34022-34142]:ExpressionStatement[34037-34157]"
    }, {
      "left" : "typeDesc = ClassUtil.nameOf(cls);",
      "right" : "typeDesc = ClassUtil.nameOf(cls);",
      "info" : "ExpressionStatement[34155-34188]:ExpressionStatement[34170-34203]"
    }, {
      "left" : "if (structured)",
      "right" : "if (structured)",
      "info" : "IfStatement[34207-34285]:IfStatement[34222-34300]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34223-34285]:Block[34238-34300]"
    }, {
      "left" : "return \"as content of type \"+typeDesc;",
      "right" : "return \"as content of type \"+typeDesc;",
      "info" : "ReturnStatement[34237-34275]:ReturnStatement[34252-34290]"
    }, {
      "left" : "return \"for type \"+typeDesc;",
      "right" : "return \"for type \"+typeDesc;",
      "info" : "ReturnStatement[34294-34322]:ReturnStatement[34309-34337]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35129-35205]:Block[35144-35220]"
    }, {
      "left" : "return ctxt.findContextualValueDeserializer(type, property);",
      "right" : "return ctxt.findContextualValueDeserializer(type, property);",
      "info" : "ReturnStatement[35139-35199]:ReturnStatement[35154-35214]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35456-35940]:Block[35471-35955]"
    }, {
      "left" : "final int len = text.length();",
      "right" : "final int len = text.length();",
      "info" : "VariableDeclarationStatement[35466-35496]:VariableDeclarationStatement[35481-35511]"
    }, {
      "left" : "if (len > 0)",
      "right" : "if (len > 0)",
      "info" : "IfStatement[35505-35912]:IfStatement[35520-35927]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35518-35912]:Block[35533-35927]"
    }, {
      "left" : "char c = text.charAt(0);",
      "right" : "char c = text.charAt(0);",
      "info" : "VariableDeclarationStatement[35532-35556]:VariableDeclarationStatement[35547-35571]"
    }, {
      "left" : "int i = (c == '-' || c == '+') ? 1 : 0;",
      "right" : "int i = (c == '-' || c == '+') ? 1 : 0;",
      "info" : "VariableDeclarationStatement[35652-35691]:VariableDeclarationStatement[35667-35706]"
    }, {
      "left" : "for (; i < len; ++i)",
      "right" : "for (; i < len; ++i)",
      "info" : "ForStatement[35704-35877]:ForStatement[35719-35892]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35725-35877]:Block[35740-35892]"
    }, {
      "left" : "int ch = text.charAt(i);",
      "right" : "int ch = text.charAt(i);",
      "info" : "VariableDeclarationStatement[35743-35767]:VariableDeclarationStatement[35758-35782]"
    }, {
      "left" : "if (ch > '9' || ch < '0')",
      "right" : "if (ch > '9' || ch < '0')",
      "info" : "IfStatement[35784-35863]:IfStatement[35799-35878]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35810-35863]:Block[35825-35878]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[35832-35845]:ReturnStatement[35847-35860]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[35890-35902]:ReturnStatement[35905-35917]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[35921-35934]:ReturnStatement[35936-35949]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36721-37616]:Block[36736-37631]"
    }, {
      "left" : "final AnnotationIntrospector intr = ctxt.getAnnotationIntrospector();",
      "right" : "final AnnotationIntrospector intr = ctxt.getAnnotationIntrospector();",
      "info" : "VariableDeclarationStatement[36731-36800]:VariableDeclarationStatement[36746-36815]"
    }, {
      "left" : "if (_neitherNull(intr, prop))",
      "right" : "if (_neitherNull(intr, prop))",
      "info" : "IfStatement[36809-37573]:IfStatement[36824-37588]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36839-37573]:Block[36854-37588]"
    }, {
      "left" : "AnnotatedMember member = prop.getMember();",
      "right" : "AnnotatedMember member = prop.getMember();",
      "info" : "VariableDeclarationStatement[36853-36895]:VariableDeclarationStatement[36868-36910]"
    }, {
      "left" : "if (member != null)",
      "right" : "if (member != null)",
      "info" : "IfStatement[36908-37563]:IfStatement[36923-37578]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36928-37563]:Block[36943-37578]"
    }, {
      "left" : "Object convDef = intr.findDeserializationContentConverter(member);",
      "right" : "Object convDef = intr.findDeserializationContentConverter(member);",
      "info" : "VariableDeclarationStatement[36946-37012]:VariableDeclarationStatement[36961-37027]"
    }, {
      "left" : "if (convDef != null)",
      "right" : "if (convDef != null)",
      "info" : "IfStatement[37029-37549]:IfStatement[37044-37564]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37050-37549]:Block[37065-37564]"
    }, {
      "left" : "Converter<Object,Object> conv = ctxt.converterInstance(prop.getMember(), convDef);",
      "right" : "Converter<Object,Object> conv = ctxt.converterInstance(prop.getMember(), convDef);",
      "info" : "VariableDeclarationStatement[37072-37154]:VariableDeclarationStatement[37087-37169]"
    }, {
      "left" : "JavaType delegateType = conv.getInputType(ctxt.getTypeFactory());",
      "right" : "JavaType delegateType = conv.getInputType(ctxt.getTypeFactory());",
      "info" : "VariableDeclarationStatement[37175-37240]:VariableDeclarationStatement[37190-37255]"
    }, {
      "left" : "if (existingDeserializer == null)",
      "right" : "if (existingDeserializer == null)",
      "info" : "IfStatement[37261-37423]:IfStatement[37276-37438]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37295-37423]:Block[37310-37438]"
    }, {
      "left" : "existingDeserializer = ctxt.findContextualValueDeserializer(delegateType, prop);",
      "right" : "existingDeserializer = ctxt.findContextualValueDeserializer(delegateType, prop);",
      "info" : "ExpressionStatement[37321-37401]:ExpressionStatement[37336-37416]"
    }, {
      "left" : "return new StdDelegatingDeserializer<Object>(conv, delegateType, existingDeserializer);",
      "right" : "return new StdDelegatingDeserializer<Object>(conv, delegateType, existingDeserializer);",
      "info" : "ReturnStatement[37444-37531]:ReturnStatement[37459-37546]"
    }, {
      "left" : "return existingDeserializer;",
      "right" : "return existingDeserializer;",
      "info" : "ReturnStatement[37582-37610]:ReturnStatement[37597-37625]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38293-38572]:Block[38308-38587]"
    }, {
      "left" : "if (prop != null)",
      "right" : "if (prop != null)",
      "info" : "IfStatement[38303-38411]:IfStatement[38318-38426]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38321-38411]:Block[38336-38426]"
    }, {
      "left" : "return prop.findPropertyFormat(ctxt.getConfig(), typeForDefaults);",
      "right" : "return prop.findPropertyFormat(ctxt.getConfig(), typeForDefaults);",
      "info" : "ReturnStatement[38335-38401]:ReturnStatement[38350-38416]"
    }, {
      "left" : "return ctxt.getDefaultPropertyFormat(typeForDefaults);",
      "right" : "return ctxt.getDefaultPropertyFormat(typeForDefaults);",
      "info" : "ReturnStatement[38512-38566]:ReturnStatement[38527-38581]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39145-39341]:Block[39160-39356]"
    }, {
      "left" : "JsonFormat.Value format = findFormatOverrides(ctxt, prop, typeForDefaults);",
      "right" : "JsonFormat.Value format = findFormatOverrides(ctxt, prop, typeForDefaults);",
      "info" : "VariableDeclarationStatement[39155-39230]:VariableDeclarationStatement[39170-39245]"
    }, {
      "left" : "if (format != null)",
      "right" : "if (format != null)",
      "info" : "IfStatement[39239-39314]:IfStatement[39254-39329]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39259-39314]:Block[39274-39329]"
    }, {
      "left" : "return format.getFeature(feat);",
      "right" : "return format.getFeature(feat);",
      "info" : "ReturnStatement[39273-39304]:ReturnStatement[39288-39319]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[39323-39335]:ReturnStatement[39338-39350]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39775-39970]:Block[39790-39985]"
    }, {
      "left" : "if (prop != null)",
      "right" : "if (prop != null)",
      "info" : "IfStatement[39785-39943]:IfStatement[39800-39958]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39803-39943]:Block[39818-39958]"
    }, {
      "left" : "return _findNullProvider(ctxt, prop, propMetadata.getValueNulls(),\n                    prop.getValueDeserializer());",
      "right" : "return _findNullProvider(ctxt, prop, propMetadata.getValueNulls(),\n                    prop.getValueDeserializer());",
      "info" : "ReturnStatement[39817-39933]:ReturnStatement[39832-39948]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[39952-39964]:ReturnStatement[39967-39979]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40496-40835]:Block[40511-40850]"
    }, {
      "left" : "final Nulls nulls = findContentNullStyle(ctxt, prop);",
      "right" : "final Nulls nulls = findContentNullStyle(ctxt, prop);",
      "info" : "VariableDeclarationStatement[40506-40559]:VariableDeclarationStatement[40521-40574]"
    }, {
      "left" : "if (nulls == Nulls.SKIP)",
      "right" : "if (nulls == Nulls.SKIP)",
      "info" : "IfStatement[40568-40656]:IfStatement[40583-40671]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40593-40656]:Block[40608-40671]"
    }, {
      "left" : "return NullsConstantProvider.skipper();",
      "right" : "return NullsConstantProvider.skipper();",
      "info" : "ReturnStatement[40607-40646]:ReturnStatement[40622-40661]"
    }, {
      "left" : "NullValueProvider prov = _findNullProvider(ctxt, prop, nulls, valueDeser);",
      "right" : "NullValueProvider prov = _findNullProvider(ctxt, prop, nulls, valueDeser);",
      "info" : "VariableDeclarationStatement[40665-40739]:VariableDeclarationStatement[40680-40754]"
    }, {
      "left" : "if (prov != null)",
      "right" : "if (prov != null)",
      "info" : "IfStatement[40748-40802]:IfStatement[40763-40817]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40766-40802]:Block[40781-40817]"
    }, {
      "left" : "return prov;",
      "right" : "return prov;",
      "info" : "ReturnStatement[40780-40792]:ReturnStatement[40795-40807]"
    }, {
      "left" : "return valueDeser;",
      "right" : "return valueDeser;",
      "info" : "ReturnStatement[40811-40829]:ReturnStatement[40826-40844]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40966-41089]:Block[40981-41104]"
    }, {
      "left" : "if (prop != null)",
      "right" : "if (prop != null)",
      "info" : "IfStatement[40976-41062]:IfStatement[40991-41077]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40994-41062]:Block[41009-41077]"
    }, {
      "left" : "return prop.getMetadata().getContentNulls();",
      "right" : "return prop.getMetadata().getContentNulls();",
      "info" : "ReturnStatement[41008-41052]:ReturnStatement[41023-41067]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[41071-41083]:ReturnStatement[41086-41098]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41310-43158]:Block[41325-43173]"
    }, {
      "left" : "if (nulls == Nulls.FAIL)",
      "right" : "if (nulls == Nulls.FAIL)",
      "info" : "IfStatement[41320-41577]:IfStatement[41335-41592]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41345-41577]:Block[41360-41592]"
    }, {
      "left" : "if (prop == null)",
      "right" : "if (prop == null)",
      "info" : "IfStatement[41359-41502]:IfStatement[41374-41517]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41377-41502]:Block[41392-41517]"
    }, {
      "left" : "return NullsFailProvider.constructForRootValue(ctxt.constructType(valueDeser.handledType()));",
      "right" : "return NullsFailProvider.constructForRootValue(ctxt.constructType(valueDeser.handledType()));",
      "info" : "ReturnStatement[41395-41488]:ReturnStatement[41410-41503]"
    }, {
      "left" : "return NullsFailProvider.constructForProperty(prop);",
      "right" : "return NullsFailProvider.constructForProperty(prop);",
      "info" : "ReturnStatement[41515-41567]:ReturnStatement[41530-41582]"
    }, {
      "left" : "if (nulls == Nulls.AS_EMPTY)",
      "right" : "if (nulls == Nulls.AS_EMPTY)",
      "info" : "IfStatement[41586-43034]:IfStatement[41601-43049]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41615-43034]:Block[41630-43049]"
    }, {
      "left" : "if (valueDeser == null)",
      "right" : "if (valueDeser == null)",
      "info" : "IfStatement[41764-41832]:IfStatement[41779-41847]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41788-41832]:Block[41803-41847]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[41806-41818]:ReturnStatement[41821-41833]"
    }, {
      "left" : "if (valueDeser instanceof BeanDeserializerBase)",
      "right" : "if (valueDeser instanceof BeanDeserializerBase)",
      "info" : "IfStatement[42066-42514]:IfStatement[42081-42529]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42114-42514]:Block[42129-42529]"
    }, {
      "left" : "ValueInstantiator vi = ((BeanDeserializerBase) valueDeser).getValueInstantiator();",
      "right" : "ValueInstantiator vi = ((BeanDeserializerBase) valueDeser).getValueInstantiator();",
      "info" : "VariableDeclarationStatement[42132-42214]:VariableDeclarationStatement[42147-42229]"
    }, {
      "left" : "if (!vi.canCreateUsingDefault())",
      "right" : "if (!vi.canCreateUsingDefault())",
      "info" : "IfStatement[42231-42500]:IfStatement[42246-42515]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42264-42500]:Block[42279-42515]"
    }, {
      "left" : "final JavaType type = prop.getType();",
      "right" : "final JavaType type = prop.getType();",
      "info" : "VariableDeclarationStatement[42286-42323]:VariableDeclarationStatement[42301-42338]"
    }, {
      "left" : "ctxt.reportBadDefinition(type,\n                            String.format(\"Cannot create empty instance of %s, no default Creator\", type));",
      "right" : "ctxt.reportBadDefinition(type,\n                            String.format(\"Cannot create empty instance of %s, no default Creator\", type));",
      "info" : "ExpressionStatement[42344-42482]:ExpressionStatement[42359-42497]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42576-42967]:Block[42591-42982]"
    }, {
      "left" : "AccessPattern access = valueDeser.getEmptyAccessPattern();",
      "right" : "AccessPattern access = valueDeser.getEmptyAccessPattern();",
      "info" : "VariableDeclarationStatement[42594-42652]:VariableDeclarationStatement[42609-42667]"
    }, {
      "left" : "if (access == AccessPattern.ALWAYS_NULL)",
      "right" : "if (access == AccessPattern.ALWAYS_NULL)",
      "info" : "IfStatement[42669-42788]:IfStatement[42684-42803]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42710-42788]:Block[42725-42803]"
    }, {
      "left" : "return NullsConstantProvider.nuller();",
      "right" : "return NullsConstantProvider.nuller();",
      "info" : "ReturnStatement[42732-42770]:ReturnStatement[42747-42785]"
    }, {
      "left" : "if (access == AccessPattern.CONSTANT)",
      "right" : "if (access == AccessPattern.CONSTANT)",
      "info" : "IfStatement[42805-42953]:IfStatement[42820-42968]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42843-42953]:Block[42858-42968]"
    }, {
      "left" : "return NullsConstantProvider.forValue(valueDeser.getEmptyValue(ctxt));",
      "right" : "return NullsConstantProvider.forValue(valueDeser.getEmptyValue(ctxt));",
      "info" : "ReturnStatement[42865-42935]:ReturnStatement[42880-42950]"
    }, {
      "left" : "return new NullsAsEmptyProvider(valueDeser);",
      "right" : "return new NullsAsEmptyProvider(valueDeser);",
      "info" : "ReturnStatement[42980-43024]:ReturnStatement[42995-43039]"
    }, {
      "left" : "if (nulls == Nulls.SKIP)",
      "right" : "if (nulls == Nulls.SKIP)",
      "info" : "IfStatement[43043-43131]:IfStatement[43058-43146]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43068-43131]:Block[43083-43146]"
    }, {
      "left" : "return NullsConstantProvider.skipper();",
      "right" : "return NullsConstantProvider.skipper();",
      "info" : "ReturnStatement[43082-43121]:ReturnStatement[43097-43136]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[43140-43152]:ReturnStatement[43155-43167]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44283-44752]:Block[44298-44767]"
    }, {
      "left" : "if (instanceOrClass == null)",
      "right" : "if (instanceOrClass == null)",
      "info" : "IfStatement[44293-44378]:IfStatement[44308-44393]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44322-44378]:Block[44337-44393]"
    }, {
      "left" : "instanceOrClass = handledType();",
      "right" : "instanceOrClass = handledType();",
      "info" : "ExpressionStatement[44336-44368]:ExpressionStatement[44351-44383]"
    }, {
      "left" : "if (ctxt.handleUnknownProperty(p, this, instanceOrClass, propName))",
      "right" : "if (ctxt.handleUnknownProperty(p, this, instanceOrClass, propName))",
      "info" : "IfStatement[44454-44553]:IfStatement[44469-44568]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44522-44553]:Block[44537-44568]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[44536-44543]:ReturnStatement[44551-44558]"
    }, {
      "left" : "p.skipChildren();",
      "right" : "p.skipChildren();",
      "info" : "ExpressionStatement[44729-44746]:ExpressionStatement[44744-44761]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44878-45249]:Block[44893-45264]"
    }, {
      "left" : "ctxt.reportWrongTokenException(this, JsonToken.END_ARRAY, \n\"Attempted to unwrap '%s' value from an array (with `DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS`) but it contains more than one value\",\nhandledType().getName());",
      "right" : "ctxt.reportWrongTokenException(this, JsonToken.END_ARRAY, \n\"Attempted to unwrap '%s' value from an array (with `DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS`) but it contains more than one value\",\nhandledType().getName());",
      "info" : "ExpressionStatement[44888-45115]:ExpressionStatement[44903-45130]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45361-45520]:Block[45376-45535]"
    }, {
      "left" : "JsonToken t = p.nextToken();",
      "right" : "JsonToken t = p.nextToken();",
      "info" : "VariableDeclarationStatement[45371-45399]:VariableDeclarationStatement[45386-45414]"
    }, {
      "left" : "if (t != JsonToken.END_ARRAY)",
      "right" : "if (t != JsonToken.END_ARRAY)",
      "info" : "IfStatement[45408-45502]:IfStatement[45423-45517]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45438-45502]:Block[45453-45517]"
    }, {
      "left" : "handleMissingEndArrayForSingle(p, ctxt);",
      "right" : "handleMissingEndArrayForSingle(p, ctxt);",
      "info" : "ExpressionStatement[45452-45492]:ExpressionStatement[45467-45507]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45797-45847]:Block[45812-45862]"
    }, {
      "left" : "return (a != null) && (b != null);",
      "right" : "return (a != null) && (b != null);",
      "info" : "ReturnStatement[45807-45841]:ReturnStatement[45822-45856]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45936-46136]:Block[45951-46151]"
    }, {
      "left" : "return (value < Byte.MIN_VALUE || value > 255);",
      "right" : "return (value < Byte.MIN_VALUE || value > 255);",
      "info" : "ReturnStatement[46083-46130]:ReturnStatement[46098-46145]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46230-46306]:Block[46245-46321]"
    }, {
      "left" : "return (value < Short.MIN_VALUE || value > Short.MAX_VALUE);",
      "right" : "return (value < Short.MIN_VALUE || value > Short.MAX_VALUE);",
      "info" : "ReturnStatement[46240-46300]:ReturnStatement[46255-46315]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46395-46475]:Block[46410-46490]"
    }, {
      "left" : "return (value < Integer.MIN_VALUE || value > Integer.MAX_VALUE);",
      "right" : "return (value < Integer.MIN_VALUE || value > Integer.MAX_VALUE);",
      "info" : "ReturnStatement[46405-46469]:ReturnStatement[46420-46484]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46557-46653]:Block[46572-46668]"
    }, {
      "left" : "if (n == null)",
      "right" : "if (n == null)",
      "info" : "IfStatement[46567-46629]:IfStatement[46582-46644]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46582-46629]:Block[46597-46644]"
    }, {
      "left" : "n = Integer.valueOf(0);",
      "right" : "n = Integer.valueOf(0);",
      "info" : "ExpressionStatement[46596-46619]:ExpressionStatement[46611-46634]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[46638-46647]:ReturnStatement[46653-46662]"
    } ]
  },
  "interFileMappings" : { }
}