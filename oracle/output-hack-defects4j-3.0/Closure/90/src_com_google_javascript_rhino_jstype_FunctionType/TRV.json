{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "private static final long serialVersionUID = 1L;",
      "right" : "private static final long serialVersionUID = 1L;",
      "info" : "FieldDeclaration[2536-2584]:FieldDeclaration[2536-2584]"
    }, {
      "left" : "enum : Kind",
      "right" : "enum : Kind",
      "info" : "EnumDeclaration[2588-2656]:EnumDeclaration[2588-2656]"
    }, {
      "left" : "private ArrowType call;",
      "right" : "private ArrowType call;",
      "info" : "FieldDeclaration[2660-2727]:FieldDeclaration[2660-2727]"
    }, {
      "left" : "private FunctionPrototypeType prototype;",
      "right" : "private FunctionPrototypeType prototype;",
      "info" : "FieldDeclaration[2731-3104]:FieldDeclaration[2731-3104]"
    }, {
      "left" : "private final Kind kind;",
      "right" : "private final Kind kind;",
      "info" : "FieldDeclaration[3108-3235]:FieldDeclaration[3108-3235]"
    }, {
      "left" : "private ObjectType typeOfThis;",
      "right" : "private ObjectType typeOfThis;",
      "info" : "FieldDeclaration[3239-3342]:FieldDeclaration[3239-3342]"
    }, {
      "left" : "private Node source;",
      "right" : "private Node source;",
      "info" : "FieldDeclaration[3346-3453]:FieldDeclaration[3346-3453]"
    }, {
      "left" : "private List<ObjectType> implementedInterfaces = ImmutableList.of();",
      "right" : "private List<ObjectType> implementedInterfaces = ImmutableList.of();",
      "info" : "FieldDeclaration[3457-3664]:FieldDeclaration[3457-3664]"
    }, {
      "left" : "private List<FunctionType> subTypes;",
      "right" : "private List<FunctionType> subTypes;",
      "info" : "FieldDeclaration[3668-3835]:FieldDeclaration[3668-3835]"
    }, {
      "left" : "private String templateTypeName;",
      "right" : "private String templateTypeName;",
      "info" : "FieldDeclaration[3839-3933]:FieldDeclaration[3839-3933]"
    }, {
      "left" : "FunctionType(JSTypeRegistry registry, String name, Node source,\n      ArrowType arrowType, ObjectType typeOfThis,\n      String templateTypeName,  boolean isConstructor, boolean nativeType)",
      "right" : "FunctionType(JSTypeRegistry registry, String name, Node source,\n      ArrowType arrowType, ObjectType typeOfThis,\n      String templateTypeName,  boolean isConstructor, boolean nativeType)",
      "info" : "MethodDeclaration[3937-4959]:MethodDeclaration[3937-4959]"
    }, {
      "left" : "private FunctionType(JSTypeRegistry registry, String name, Node source)",
      "right" : "private FunctionType(JSTypeRegistry registry, String name, Node source)",
      "info" : "MethodDeclaration[4963-5537]:MethodDeclaration[4963-5537]"
    }, {
      "left" : "static FunctionType forInterface(\n      JSTypeRegistry registry, String name, Node source)",
      "right" : "static FunctionType forInterface(\n      JSTypeRegistry registry, String name, Node source)",
      "info" : "MethodDeclaration[5541-5756]:MethodDeclaration[5541-5756]"
    }, {
      "left" : "public boolean isInstanceType()",
      "right" : "public boolean isInstanceType()",
      "info" : "MethodDeclaration[5760-5947]:MethodDeclaration[5760-5947]"
    }, {
      "left" : "public boolean isConstructor()",
      "right" : "public boolean isConstructor()",
      "info" : "MethodDeclaration[5951-6036]:MethodDeclaration[5951-6036]"
    }, {
      "left" : "public boolean isInterface()",
      "right" : "public boolean isInterface()",
      "info" : "MethodDeclaration[6040-6121]:MethodDeclaration[6040-6121]"
    }, {
      "left" : "public boolean isOrdinaryFunction()",
      "right" : "public boolean isOrdinaryFunction()",
      "info" : "MethodDeclaration[6125-6212]:MethodDeclaration[6125-6212]"
    }, {
      "left" : "public boolean isFunctionType()",
      "right" : "public boolean isFunctionType()",
      "info" : "MethodDeclaration[6216-6282]:MethodDeclaration[6216-6282]"
    }, {
      "left" : "public boolean canBeCalled()",
      "right" : "public boolean canBeCalled()",
      "info" : "MethodDeclaration[6286-6349]:MethodDeclaration[6286-6349]"
    }, {
      "left" : "public Iterable<Node> getParameters()",
      "right" : "public Iterable<Node> getParameters()",
      "info" : "MethodDeclaration[6353-6534]:MethodDeclaration[6353-6534]"
    }, {
      "left" : "public Node getParametersNode()",
      "right" : "public Node getParametersNode()",
      "info" : "MethodDeclaration[6538-6667]:MethodDeclaration[6538-6667]"
    }, {
      "left" : "public int getMinArguments()",
      "right" : "public int getMinArguments()",
      "info" : "MethodDeclaration[6671-7152]:MethodDeclaration[6671-7152]"
    }, {
      "left" : "public int getMaxArguments()",
      "right" : "public int getMaxArguments()",
      "info" : "MethodDeclaration[7156-7592]:MethodDeclaration[7156-7592]"
    }, {
      "left" : "public JSType getReturnType()",
      "right" : "public JSType getReturnType()",
      "info" : "MethodDeclaration[7596-7659]:MethodDeclaration[7596-7659]"
    }, {
      "left" : "public boolean isReturnTypeInferred()",
      "right" : "public boolean isReturnTypeInferred()",
      "info" : "MethodDeclaration[7663-7742]:MethodDeclaration[7663-7742]"
    }, {
      "left" : "ArrowType getInternalArrowType()",
      "right" : "ArrowType getInternalArrowType()",
      "info" : "MethodDeclaration[7746-7868]:MethodDeclaration[7746-7868]"
    }, {
      "left" : "public FunctionPrototypeType getPrototype()",
      "right" : "public FunctionPrototypeType getPrototype()",
      "info" : "MethodDeclaration[7872-8251]:MethodDeclaration[7872-8251]"
    }, {
      "left" : "public void setPrototypeBasedOn(ObjectType baseType)",
      "right" : "public void setPrototypeBasedOn(ObjectType baseType)",
      "info" : "MethodDeclaration[8255-8664]:MethodDeclaration[8255-8664]"
    }, {
      "left" : "public boolean setPrototype(FunctionPrototypeType prototype)",
      "right" : "public boolean setPrototype(FunctionPrototypeType prototype)",
      "info" : "MethodDeclaration[8668-9327]:MethodDeclaration[8668-9327]"
    }, {
      "left" : "public Iterable<ObjectType> getAllImplementedInterfaces()",
      "right" : "public Iterable<ObjectType> getAllImplementedInterfaces()",
      "info" : "MethodDeclaration[9331-9897]:MethodDeclaration[9331-9897]"
    }, {
      "left" : "private void addRelatedInterfaces(ObjectType instance, Set<ObjectType> set)",
      "right" : "private void addRelatedInterfaces(ObjectType instance, Set<ObjectType> set)",
      "info" : "MethodDeclaration[9901-10342]:MethodDeclaration[9901-10342]"
    }, {
      "left" : "public Iterable<ObjectType> getImplementedInterfaces()",
      "right" : "public Iterable<ObjectType> getImplementedInterfaces()",
      "info" : "MethodDeclaration[10346-10762]:MethodDeclaration[10346-10762]"
    }, {
      "left" : "public void setImplementedInterfaces(List<ObjectType> implementedInterfaces)",
      "right" : "public void setImplementedInterfaces(List<ObjectType> implementedInterfaces)",
      "info" : "MethodDeclaration[10766-11103]:MethodDeclaration[10766-11103]"
    }, {
      "left" : "public boolean hasProperty(String name)",
      "right" : "public boolean hasProperty(String name)",
      "info" : "MethodDeclaration[11107-11228]:MethodDeclaration[11107-11228]"
    }, {
      "left" : "public boolean hasOwnProperty(String name)",
      "right" : "public boolean hasOwnProperty(String name)",
      "info" : "MethodDeclaration[11232-11359]:MethodDeclaration[11232-11359]"
    }, {
      "left" : "public JSType getPropertyType(String name)",
      "right" : "public JSType getPropertyType(String name)",
      "info" : "MethodDeclaration[11363-13511]:MethodDeclaration[11363-13511]"
    }, {
      "left" : "boolean defineProperty(String name, JSType type,\n      boolean inferred, boolean inExterns)",
      "right" : "boolean defineProperty(String name, JSType type,\n      boolean inferred, boolean inExterns)",
      "info" : "MethodDeclaration[13515-14069]:MethodDeclaration[13515-14069]"
    }, {
      "left" : "public boolean isPropertyTypeInferred(String property)",
      "right" : "public boolean isPropertyTypeInferred(String property)",
      "info" : "MethodDeclaration[14073-14236]:MethodDeclaration[14073-14236]"
    }, {
      "left" : "public JSType getLeastSupertype(JSType that)",
      "right" : "public JSType getLeastSupertype(JSType that)",
      "info" : "MethodDeclaration[14240-14342]:MethodDeclaration[14240-14342]"
    }, {
      "left" : "public JSType getGreatestSubtype(JSType that)",
      "right" : "public JSType getGreatestSubtype(JSType that)",
      "info" : "MethodDeclaration[14346-14450]:MethodDeclaration[14346-14450]"
    }, {
      "left" : "private JSType supAndInfHelper(JSType that, boolean leastSuper)",
      "right" : "private JSType supAndInfHelper(JSType that, boolean leastSuper)",
      "info" : "MethodDeclaration[14454-18055]:MethodDeclaration[14454-18055]"
    }, {
      "left" : "private FunctionType tryMergeFunctionPiecewise(\n      FunctionType other, boolean leastSuper)",
      "right" : "private FunctionType tryMergeFunctionPiecewise(\n      FunctionType other, boolean leastSuper)",
      "info" : "MethodDeclaration[18059-19648]:MethodDeclaration[18059-19648]"
    }, {
      "left" : "public FunctionType getSuperClassConstructor()",
      "right" : "public FunctionType getSuperClassConstructor()",
      "info" : "MethodDeclaration[19652-20096]:MethodDeclaration[19652-20096]"
    }, {
      "left" : "public boolean hasUnknownSupertype()",
      "right" : "public boolean hasUnknownSupertype()",
      "info" : "MethodDeclaration[20100-21027]:MethodDeclaration[20100-21027]"
    }, {
      "left" : "public JSType getTopMostDefiningType(String propertyName)",
      "right" : "public JSType getTopMostDefiningType(String propertyName)",
      "info" : "MethodDeclaration[21031-21673]:MethodDeclaration[21031-21673]"
    }, {
      "left" : "public boolean isEquivalentTo(JSType otherType)",
      "right" : "public boolean isEquivalentTo(JSType otherType)",
      "info" : "MethodDeclaration[21677-22545]:MethodDeclaration[21677-22545]"
    }, {
      "left" : "public int hashCode()",
      "right" : "public int hashCode()",
      "info" : "MethodDeclaration[22549-22664]:MethodDeclaration[22549-22664]"
    }, {
      "left" : "public boolean hasEqualCallType(FunctionType otherType)",
      "right" : "public boolean hasEqualCallType(FunctionType otherType)",
      "info" : "MethodDeclaration[22668-22782]:MethodDeclaration[22668-22782]"
    }, {
      "left" : "public String toString()",
      "right" : "public String toString()",
      "info" : "MethodDeclaration[22786-24115]:MethodDeclaration[22786-24115]"
    }, {
      "left" : "private void appendVarArgsString(StringBuilder builder, JSType paramType)",
      "right" : "private void appendVarArgsString(StringBuilder builder, JSType paramType)",
      "info" : "MethodDeclaration[24119-24541]:MethodDeclaration[24119-24541]"
    }, {
      "left" : "public boolean isSubtype(JSType that)",
      "right" : "public boolean isSubtype(JSType that)",
      "info" : "MethodDeclaration[24545-25983]:MethodDeclaration[24545-25983]"
    }, {
      "left" : "public <T> T visit(Visitor<T> visitor)",
      "right" : "public <T> T visit(Visitor<T> visitor)",
      "info" : "MethodDeclaration[25987-26086]:MethodDeclaration[25987-26086]"
    }, {
      "left" : "public ObjectType getInstanceType()",
      "right" : "public ObjectType getInstanceType()",
      "info" : "MethodDeclaration[26090-26382]:MethodDeclaration[26090-26382]"
    }, {
      "left" : "void setInstanceType(ObjectType instanceType)",
      "right" : "void setInstanceType(ObjectType instanceType)",
      "info" : "MethodDeclaration[26386-26552]:MethodDeclaration[26386-26552]"
    }, {
      "left" : "public boolean hasInstanceType()",
      "right" : "public boolean hasInstanceType()",
      "info" : "MethodDeclaration[26556-26713]:MethodDeclaration[26556-26713]"
    }, {
      "left" : "public ObjectType getTypeOfThis()",
      "right" : "public ObjectType getTypeOfThis()",
      "info" : "MethodDeclaration[26717-26939]:MethodDeclaration[26717-26939]"
    }, {
      "left" : "public Node getSource()",
      "right" : "public Node getSource()",
      "info" : "MethodDeclaration[26943-27069]:MethodDeclaration[26943-27069]"
    }, {
      "left" : "public void setSource(Node source)",
      "right" : "public void setSource(Node source)",
      "info" : "MethodDeclaration[27073-27178]:MethodDeclaration[27073-27178]"
    }, {
      "left" : "private void addSubType(FunctionType subType)",
      "right" : "private void addSubType(FunctionType subType)",
      "info" : "MethodDeclaration[27182-27393]:MethodDeclaration[27182-27393]"
    }, {
      "left" : "public List<FunctionType> getSubTypes()",
      "right" : "public List<FunctionType> getSubTypes()",
      "info" : "MethodDeclaration[27397-27664]:MethodDeclaration[27397-27664]"
    }, {
      "left" : "public boolean hasCachedValues()",
      "right" : "public boolean hasCachedValues()",
      "info" : "MethodDeclaration[27668-27775]:MethodDeclaration[27668-27775]"
    }, {
      "left" : "public String getTemplateTypeName()",
      "right" : "public String getTemplateTypeName()",
      "info" : "MethodDeclaration[27779-27895]:MethodDeclaration[27779-27895]"
    }, {
      "left" : "public String toDebugHashCodeString()",
      "right" : "public String toDebugHashCodeString()",
      "info" : "MethodDeclaration[29536-30508]:MethodDeclaration[29649-30621]"
    }, {
      "left" : "private String getDebugHashCodeStringOf(JSType type)",
      "right" : "private String getDebugHashCodeStringOf(JSType type)",
      "info" : "MethodDeclaration[30512-30675]:MethodDeclaration[30625-30788]"
    } ],
    "mappings" : [
 {
      "left" : "FunctionType",
      "right" : "FunctionType",
      "info" : "SimpleName[4010-4022]:SimpleName[4010-4022]"
    }, {
      "left" : "JSTypeRegistry registry",
      "right" : "JSTypeRegistry registry",
      "info" : "SingleVariableDeclaration[4023-4046]:SingleVariableDeclaration[4023-4046]"
    }, {
      "left" : "String name",
      "right" : "String name",
      "info" : "SingleVariableDeclaration[4048-4059]:SingleVariableDeclaration[4048-4059]"
    }, {
      "left" : "Node source",
      "right" : "Node source",
      "info" : "SingleVariableDeclaration[4061-4072]:SingleVariableDeclaration[4061-4072]"
    }, {
      "left" : "ArrowType arrowType",
      "right" : "ArrowType arrowType",
      "info" : "SingleVariableDeclaration[4080-4099]:SingleVariableDeclaration[4080-4099]"
    }, {
      "left" : "ObjectType typeOfThis",
      "right" : "ObjectType typeOfThis",
      "info" : "SingleVariableDeclaration[4101-4122]:SingleVariableDeclaration[4101-4122]"
    }, {
      "left" : "String templateTypeName",
      "right" : "String templateTypeName",
      "info" : "SingleVariableDeclaration[4130-4153]:SingleVariableDeclaration[4130-4153]"
    }, {
      "left" : "boolean isConstructor",
      "right" : "boolean isConstructor",
      "info" : "SingleVariableDeclaration[4156-4177]:SingleVariableDeclaration[4156-4177]"
    }, {
      "left" : "boolean nativeType",
      "right" : "boolean nativeType",
      "info" : "SingleVariableDeclaration[4179-4197]:SingleVariableDeclaration[4179-4197]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4199-4959]:Block[4199-4959]"
    }, {
      "left" : "super(registry, name,\n        registry.getNativeObjectType(JSTypeNative.FUNCTION_INSTANCE_TYPE),\n        nativeType);",
      "right" : "super(registry, name,\n        registry.getNativeObjectType(JSTypeNative.FUNCTION_INSTANCE_TYPE),\n        nativeType);",
      "info" : "SuperConstructorInvocation[4205-4322]:SuperConstructorInvocation[4205-4322]"
    }, {
      "left" : "Preconditions.checkArgument(source == null ||\n        Token.FUNCTION == source.getType());",
      "right" : "Preconditions.checkArgument(source == null ||\n        Token.FUNCTION == source.getType());",
      "info" : "ExpressionStatement[4327-4417]:ExpressionStatement[4327-4417]"
    }, {
      "left" : "Preconditions.checkNotNull(arrowType);",
      "right" : "Preconditions.checkNotNull(arrowType);",
      "info" : "ExpressionStatement[4422-4460]:ExpressionStatement[4422-4460]"
    }, {
      "left" : "this.source = source;",
      "right" : "this.source = source;",
      "info" : "ExpressionStatement[4465-4486]:ExpressionStatement[4465-4486]"
    }, {
      "left" : "this.kind = isConstructor ? Kind.CONSTRUCTOR : Kind.ORDINARY;",
      "right" : "this.kind = isConstructor ? Kind.CONSTRUCTOR : Kind.ORDINARY;",
      "info" : "ExpressionStatement[4491-4552]:ExpressionStatement[4491-4552]"
    }, {
      "left" : "if (isConstructor)",
      "right" : "if (isConstructor)",
      "info" : "IfStatement[4557-4882]:IfStatement[4557-4882]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4576-4734]:Block[4576-4734]"
    }, {
      "left" : "this.typeOfThis = typeOfThis != null && typeOfThis.isNoObjectType() ?\n          typeOfThis : new InstanceObjectType(registry, this, nativeType);",
      "right" : "this.typeOfThis = typeOfThis != null && typeOfThis.isNoObjectType() ?\n          typeOfThis : new InstanceObjectType(registry, this, nativeType);",
      "info" : "ExpressionStatement[4584-4728]:ExpressionStatement[4584-4728]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4740-4882]:Block[4740-4882]"
    }, {
      "left" : "this.typeOfThis = typeOfThis != null ?\n          typeOfThis :\n          registry.getNativeObjectType(JSTypeNative.UNKNOWN_TYPE);",
      "right" : "this.typeOfThis = typeOfThis != null ?\n          typeOfThis :\n          registry.getNativeObjectType(JSTypeNative.UNKNOWN_TYPE);",
      "info" : "ExpressionStatement[4748-4876]:ExpressionStatement[4748-4876]"
    }, {
      "left" : "this.call = arrowType;",
      "right" : "this.call = arrowType;",
      "info" : "ExpressionStatement[4887-4909]:ExpressionStatement[4887-4909]"
    }, {
      "left" : "this.templateTypeName = templateTypeName;",
      "right" : "this.templateTypeName = templateTypeName;",
      "info" : "ExpressionStatement[4914-4955]:ExpressionStatement[4914-4955]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[5029-5036]:Modifier[5029-5036]"
    }, {
      "left" : "FunctionType",
      "right" : "FunctionType",
      "info" : "SimpleName[5037-5049]:SimpleName[5037-5049]"
    }, {
      "left" : "JSTypeRegistry registry",
      "right" : "JSTypeRegistry registry",
      "info" : "SingleVariableDeclaration[5050-5073]:SingleVariableDeclaration[5050-5073]"
    }, {
      "left" : "String name",
      "right" : "String name",
      "info" : "SingleVariableDeclaration[5075-5086]:SingleVariableDeclaration[5075-5086]"
    }, {
      "left" : "Node source",
      "right" : "Node source",
      "info" : "SingleVariableDeclaration[5088-5099]:SingleVariableDeclaration[5088-5099]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5101-5537]:Block[5101-5537]"
    }, {
      "left" : "super(registry, name,\n        registry.getNativeObjectType(JSTypeNative.FUNCTION_INSTANCE_TYPE));",
      "right" : "super(registry, name,\n        registry.getNativeObjectType(JSTypeNative.FUNCTION_INSTANCE_TYPE));",
      "info" : "SuperConstructorInvocation[5107-5204]:SuperConstructorInvocation[5107-5204]"
    }, {
      "left" : "Preconditions.checkArgument(source == null ||\n        Token.FUNCTION == source.getType());",
      "right" : "Preconditions.checkArgument(source == null ||\n        Token.FUNCTION == source.getType());",
      "info" : "ExpressionStatement[5209-5299]:ExpressionStatement[5209-5299]"
    }, {
      "left" : "Preconditions.checkArgument(name != null);",
      "right" : "Preconditions.checkArgument(name != null);",
      "info" : "ExpressionStatement[5304-5346]:ExpressionStatement[5304-5346]"
    }, {
      "left" : "this.source = source;",
      "right" : "this.source = source;",
      "info" : "ExpressionStatement[5351-5372]:ExpressionStatement[5351-5372]"
    }, {
      "left" : "this.call = new ArrowType(registry, new Node(Token.LP), null);",
      "right" : "this.call = new ArrowType(registry, new Node(Token.LP), null);",
      "info" : "ExpressionStatement[5377-5439]:ExpressionStatement[5377-5439]"
    }, {
      "left" : "this.kind = Kind.INTERFACE;",
      "right" : "this.kind = Kind.INTERFACE;",
      "info" : "ExpressionStatement[5444-5471]:ExpressionStatement[5444-5471]"
    }, {
      "left" : "this.typeOfThis = new InstanceObjectType(registry, this);",
      "right" : "this.typeOfThis = new InstanceObjectType(registry, this);",
      "info" : "ExpressionStatement[5476-5533]:ExpressionStatement[5476-5533]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[5607-5613]:Modifier[5607-5613]"
    }, {
      "left" : "FunctionType",
      "right" : "FunctionType",
      "info" : "SimpleType[5614-5626]:SimpleType[5614-5626]"
    }, {
      "left" : "forInterface",
      "right" : "forInterface",
      "info" : "SimpleName[5627-5639]:SimpleName[5627-5639]"
    }, {
      "left" : "JSTypeRegistry registry",
      "right" : "JSTypeRegistry registry",
      "info" : "SingleVariableDeclaration[5647-5670]:SingleVariableDeclaration[5647-5670]"
    }, {
      "left" : "String name",
      "right" : "String name",
      "info" : "SingleVariableDeclaration[5672-5683]:SingleVariableDeclaration[5672-5683]"
    }, {
      "left" : "Node source",
      "right" : "Node source",
      "info" : "SingleVariableDeclaration[5685-5696]:SingleVariableDeclaration[5685-5696]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5698-5756]:Block[5698-5756]"
    }, {
      "left" : "return new FunctionType(registry, name, source);",
      "right" : "return new FunctionType(registry, name, source);",
      "info" : "ReturnStatement[5704-5752]:ReturnStatement[5704-5752]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[5760-5769]:MarkerAnnotation[5760-5769]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[5772-5778]:Modifier[5772-5778]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[5779-5786]:PrimitiveType[5779-5786]"
    }, {
      "left" : "isInstanceType",
      "right" : "isInstanceType",
      "info" : "SimpleName[5787-5801]:SimpleName[5787-5801]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5804-5947]:Block[5804-5947]"
    }, {
      "left" : "return isEquivalentTo(registry.getNativeType(U2U_CONSTRUCTOR_TYPE));",
      "right" : "return isEquivalentTo(registry.getNativeType(U2U_CONSTRUCTOR_TYPE));",
      "info" : "ReturnStatement[5875-5943]:ReturnStatement[5875-5943]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[5951-5960]:MarkerAnnotation[5951-5960]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[5963-5969]:Modifier[5963-5969]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[5970-5977]:PrimitiveType[5970-5977]"
    }, {
      "left" : "isConstructor",
      "right" : "isConstructor",
      "info" : "SimpleName[5978-5991]:SimpleName[5978-5991]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5994-6036]:Block[5994-6036]"
    }, {
      "left" : "return kind == Kind.CONSTRUCTOR;",
      "right" : "return kind == Kind.CONSTRUCTOR;",
      "info" : "ReturnStatement[6000-6032]:ReturnStatement[6000-6032]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[6040-6049]:MarkerAnnotation[6040-6049]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[6052-6058]:Modifier[6052-6058]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[6059-6066]:PrimitiveType[6059-6066]"
    }, {
      "left" : "isInterface",
      "right" : "isInterface",
      "info" : "SimpleName[6067-6078]:SimpleName[6067-6078]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6081-6121]:Block[6081-6121]"
    }, {
      "left" : "return kind == Kind.INTERFACE;",
      "right" : "return kind == Kind.INTERFACE;",
      "info" : "ReturnStatement[6087-6117]:ReturnStatement[6087-6117]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[6125-6134]:MarkerAnnotation[6125-6134]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[6137-6143]:Modifier[6137-6143]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[6144-6151]:PrimitiveType[6144-6151]"
    }, {
      "left" : "isOrdinaryFunction",
      "right" : "isOrdinaryFunction",
      "info" : "SimpleName[6152-6170]:SimpleName[6152-6170]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6173-6212]:Block[6173-6212]"
    }, {
      "left" : "return kind == Kind.ORDINARY;",
      "right" : "return kind == Kind.ORDINARY;",
      "info" : "ReturnStatement[6179-6208]:ReturnStatement[6179-6208]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[6216-6225]:MarkerAnnotation[6216-6225]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[6228-6234]:Modifier[6228-6234]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[6235-6242]:PrimitiveType[6235-6242]"
    }, {
      "left" : "isFunctionType",
      "right" : "isFunctionType",
      "info" : "SimpleName[6243-6257]:SimpleName[6243-6257]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6260-6282]:Block[6260-6282]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[6266-6278]:ReturnStatement[6266-6278]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[6286-6295]:MarkerAnnotation[6286-6295]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[6298-6304]:Modifier[6298-6304]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[6305-6312]:PrimitiveType[6305-6312]"
    }, {
      "left" : "canBeCalled",
      "right" : "canBeCalled",
      "info" : "SimpleName[6313-6324]:SimpleName[6313-6324]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6327-6349]:Block[6327-6349]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[6333-6345]:ReturnStatement[6333-6345]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[6353-6359]:Modifier[6353-6359]"
    }, {
      "left" : "Iterable<Node>",
      "right" : "Iterable<Node>",
      "info" : "ParameterizedType[6360-6374]:ParameterizedType[6360-6374]"
    }, {
      "left" : "getParameters",
      "right" : "getParameters",
      "info" : "SimpleName[6375-6388]:SimpleName[6375-6388]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6391-6534]:Block[6391-6534]"
    }, {
      "left" : "Node n = getParametersNode();",
      "right" : "Node n = getParametersNode();",
      "info" : "VariableDeclarationStatement[6397-6426]:VariableDeclarationStatement[6397-6426]"
    }, {
      "left" : "if (n != null)",
      "right" : "if (n != null)",
      "info" : "IfStatement[6431-6530]:IfStatement[6431-6530]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6446-6480]:Block[6446-6480]"
    }, {
      "left" : "return n.children();",
      "right" : "return n.children();",
      "info" : "ReturnStatement[6454-6474]:ReturnStatement[6454-6474]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6486-6530]:Block[6486-6530]"
    }, {
      "left" : "return Collections.emptySet();",
      "right" : "return Collections.emptySet();",
      "info" : "ReturnStatement[6494-6524]:ReturnStatement[6494-6524]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[6602-6608]:Modifier[6602-6608]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[6609-6613]:SimpleType[6609-6613]"
    }, {
      "left" : "getParametersNode",
      "right" : "getParametersNode",
      "info" : "SimpleName[6614-6631]:SimpleName[6614-6631]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6634-6667]:Block[6634-6667]"
    }, {
      "left" : "return call.parameters;",
      "right" : "return call.parameters;",
      "info" : "ReturnStatement[6640-6663]:ReturnStatement[6640-6663]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[6746-6752]:Modifier[6746-6752]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[6753-6756]:PrimitiveType[6753-6756]"
    }, {
      "left" : "getMinArguments",
      "right" : "getMinArguments",
      "info" : "SimpleName[6757-6772]:SimpleName[6757-6772]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6775-7152]:Block[6775-7152]"
    }, {
      "left" : "int i = 0;",
      "right" : "int i = 0;",
      "info" : "VariableDeclarationStatement[6976-6986]:VariableDeclarationStatement[6976-6986]"
    }, {
      "left" : "int min = 0;",
      "right" : "int min = 0;",
      "info" : "VariableDeclarationStatement[6991-7003]:VariableDeclarationStatement[6991-7003]"
    }, {
      "left" : "for (Node n : getParameters())",
      "right" : "for (Node n : getParameters())",
      "info" : "EnhancedForStatement[7008-7132]:EnhancedForStatement[7008-7132]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7039-7132]:Block[7039-7132]"
    }, {
      "left" : "i++;",
      "right" : "i++;",
      "info" : "ExpressionStatement[7047-7051]:ExpressionStatement[7047-7051]"
    }, {
      "left" : "if (!n.isOptionalArg() && !n.isVarArgs())",
      "right" : "if (!n.isOptionalArg() && !n.isVarArgs())",
      "info" : "IfStatement[7058-7126]:IfStatement[7058-7126]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7100-7126]:Block[7100-7126]"
    }, {
      "left" : "min = i;",
      "right" : "min = i;",
      "info" : "ExpressionStatement[7110-7118]:ExpressionStatement[7110-7118]"
    }, {
      "left" : "return min;",
      "right" : "return min;",
      "info" : "ReturnStatement[7137-7148]:ReturnStatement[7137-7148]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[7306-7312]:Modifier[7306-7312]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[7313-7316]:PrimitiveType[7313-7316]"
    }, {
      "left" : "getMaxArguments",
      "right" : "getMaxArguments",
      "info" : "SimpleName[7317-7332]:SimpleName[7317-7332]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7335-7592]:Block[7335-7592]"
    }, {
      "left" : "Node params = getParametersNode();",
      "right" : "Node params = getParametersNode();",
      "info" : "VariableDeclarationStatement[7341-7375]:VariableDeclarationStatement[7341-7375]"
    }, {
      "left" : "if (params != null)",
      "right" : "if (params != null)",
      "info" : "IfStatement[7380-7557]:IfStatement[7380-7557]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7400-7557]:Block[7400-7557]"
    }, {
      "left" : "Node lastParam = params.getLastChild();",
      "right" : "Node lastParam = params.getLastChild();",
      "info" : "VariableDeclarationStatement[7408-7447]:VariableDeclarationStatement[7408-7447]"
    }, {
      "left" : "if (lastParam == null || !lastParam.isVarArgs())",
      "right" : "if (lastParam == null || !lastParam.isVarArgs())",
      "info" : "IfStatement[7454-7551]:IfStatement[7454-7551]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7503-7551]:Block[7503-7551]"
    }, {
      "left" : "return params.getChildCount();",
      "right" : "return params.getChildCount();",
      "info" : "ReturnStatement[7513-7543]:ReturnStatement[7513-7543]"
    }, {
      "left" : "return Integer.MAX_VALUE;",
      "right" : "return Integer.MAX_VALUE;",
      "info" : "ReturnStatement[7563-7588]:ReturnStatement[7563-7588]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[7596-7602]:Modifier[7596-7602]"
    }, {
      "left" : "JSType",
      "right" : "JSType",
      "info" : "SimpleType[7603-7609]:SimpleType[7603-7609]"
    }, {
      "left" : "getReturnType",
      "right" : "getReturnType",
      "info" : "SimpleName[7610-7623]:SimpleName[7610-7623]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7626-7659]:Block[7626-7659]"
    }, {
      "left" : "return call.returnType;",
      "right" : "return call.returnType;",
      "info" : "ReturnStatement[7632-7655]:ReturnStatement[7632-7655]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[7663-7669]:Modifier[7663-7669]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[7670-7677]:PrimitiveType[7670-7677]"
    }, {
      "left" : "isReturnTypeInferred",
      "right" : "isReturnTypeInferred",
      "info" : "SimpleName[7678-7698]:SimpleName[7678-7698]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7701-7742]:Block[7701-7742]"
    }, {
      "left" : "return call.returnTypeInferred;",
      "right" : "return call.returnTypeInferred;",
      "info" : "ReturnStatement[7707-7738]:ReturnStatement[7707-7738]"
    }, {
      "left" : "ArrowType",
      "right" : "ArrowType",
      "info" : "SimpleType[7813-7822]:SimpleType[7813-7822]"
    }, {
      "left" : "getInternalArrowType",
      "right" : "getInternalArrowType",
      "info" : "SimpleName[7823-7843]:SimpleName[7823-7843]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7846-7868]:Block[7846-7868]"
    }, {
      "left" : "return call;",
      "right" : "return call;",
      "info" : "ReturnStatement[7852-7864]:ReturnStatement[7852-7864]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[8026-8032]:Modifier[8026-8032]"
    }, {
      "left" : "FunctionPrototypeType",
      "right" : "FunctionPrototypeType",
      "info" : "SimpleType[8033-8054]:SimpleType[8033-8054]"
    }, {
      "left" : "getPrototype",
      "right" : "getPrototype",
      "info" : "SimpleName[8055-8067]:SimpleName[8055-8067]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8070-8251]:Block[8070-8251]"
    }, {
      "left" : "if (prototype == null)",
      "right" : "if (prototype == null)",
      "info" : "IfStatement[8126-8225]:IfStatement[8126-8225]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8149-8225]:Block[8149-8225]"
    }, {
      "left" : "setPrototype(new FunctionPrototypeType(registry, this, null));",
      "right" : "setPrototype(new FunctionPrototypeType(registry, this, null));",
      "info" : "ExpressionStatement[8157-8219]:ExpressionStatement[8157-8219]"
    }, {
      "left" : "return prototype;",
      "right" : "return prototype;",
      "info" : "ReturnStatement[8230-8247]:ReturnStatement[8230-8247]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[8389-8395]:Modifier[8389-8395]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[8396-8400]:PrimitiveType[8396-8400]"
    }, {
      "left" : "setPrototypeBasedOn",
      "right" : "setPrototypeBasedOn",
      "info" : "SimpleName[8401-8420]:SimpleName[8401-8420]"
    }, {
      "left" : "ObjectType baseType",
      "right" : "ObjectType baseType",
      "info" : "SingleVariableDeclaration[8421-8440]:SingleVariableDeclaration[8421-8440]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8442-8664]:Block[8442-8664]"
    }, {
      "left" : "if (prototype == null)",
      "right" : "if (prototype == null)",
      "info" : "IfStatement[8448-8660]:IfStatement[8448-8660]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8471-8599]:Block[8471-8599]"
    }, {
      "left" : "setPrototype(\n          new FunctionPrototypeType(\n              registry, this, baseType, isNativeObjectType()));",
      "right" : "setPrototype(\n          new FunctionPrototypeType(\n              registry, this, baseType, isNativeObjectType()));",
      "info" : "ExpressionStatement[8479-8593]:ExpressionStatement[8479-8593]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8605-8660]:Block[8605-8660]"
    }, {
      "left" : "prototype.setImplicitPrototype(baseType);",
      "right" : "prototype.setImplicitPrototype(baseType);",
      "info" : "ExpressionStatement[8613-8654]:ExpressionStatement[8613-8654]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[8815-8821]:Modifier[8815-8821]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[8822-8829]:PrimitiveType[8822-8829]"
    }, {
      "left" : "setPrototype",
      "right" : "setPrototype",
      "info" : "SimpleName[8830-8842]:SimpleName[8830-8842]"
    }, {
      "left" : "FunctionPrototypeType prototype",
      "right" : "FunctionPrototypeType prototype",
      "info" : "SingleVariableDeclaration[8843-8874]:SingleVariableDeclaration[8843-8874]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8876-9327]:Block[8876-9327]"
    }, {
      "left" : "if (prototype == null)",
      "right" : "if (prototype == null)",
      "info" : "IfStatement[8882-8932]:IfStatement[8882-8932]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8905-8932]:Block[8905-8932]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[8913-8926]:ReturnStatement[8913-8926]"
    }, {
      "left" : "if (isConstructor() && prototype == getInstanceType())",
      "right" : "if (isConstructor() && prototype == getInstanceType())",
      "info" : "IfStatement[9003-9085]:IfStatement[9003-9085]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9058-9085]:Block[9058-9085]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[9066-9079]:ReturnStatement[9066-9079]"
    }, {
      "left" : "this.prototype = prototype;",
      "right" : "this.prototype = prototype;",
      "info" : "ExpressionStatement[9091-9118]:ExpressionStatement[9091-9118]"
    }, {
      "left" : "if (isConstructor() || isInterface())",
      "right" : "if (isConstructor() || isInterface())",
      "info" : "IfStatement[9124-9306]:IfStatement[9124-9306]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9162-9306]:Block[9162-9306]"
    }, {
      "left" : "FunctionType superClass = getSuperClassConstructor();",
      "right" : "FunctionType superClass = getSuperClassConstructor();",
      "info" : "VariableDeclarationStatement[9170-9223]:VariableDeclarationStatement[9170-9223]"
    }, {
      "left" : "if (superClass != null)",
      "right" : "if (superClass != null)",
      "info" : "IfStatement[9230-9300]:IfStatement[9230-9300]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9254-9300]:Block[9254-9300]"
    }, {
      "left" : "superClass.addSubType(this);",
      "right" : "superClass.addSubType(this);",
      "info" : "ExpressionStatement[9264-9292]:ExpressionStatement[9264-9292]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[9311-9323]:ReturnStatement[9311-9323]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[9554-9560]:Modifier[9554-9560]"
    }, {
      "left" : "Iterable<ObjectType>",
      "right" : "Iterable<ObjectType>",
      "info" : "ParameterizedType[9561-9581]:ParameterizedType[9561-9581]"
    }, {
      "left" : "getAllImplementedInterfaces",
      "right" : "getAllImplementedInterfaces",
      "info" : "SimpleName[9582-9609]:SimpleName[9582-9609]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9612-9897]:Block[9612-9897]"
    }, {
      "left" : "Set<ObjectType> interfaces = Sets.newLinkedHashSet();",
      "right" : "Set<ObjectType> interfaces = Sets.newLinkedHashSet();",
      "info" : "VariableDeclarationStatement[9707-9760]:VariableDeclarationStatement[9707-9760]"
    }, {
      "left" : "for (ObjectType type : getImplementedInterfaces())",
      "right" : "for (ObjectType type : getImplementedInterfaces())",
      "info" : "EnhancedForStatement[9766-9870]:EnhancedForStatement[9766-9870]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9817-9870]:Block[9817-9870]"
    }, {
      "left" : "addRelatedInterfaces(type, interfaces);",
      "right" : "addRelatedInterfaces(type, interfaces);",
      "info" : "ExpressionStatement[9825-9864]:ExpressionStatement[9825-9864]"
    }, {
      "left" : "return interfaces;",
      "right" : "return interfaces;",
      "info" : "ReturnStatement[9875-9893]:ReturnStatement[9875-9893]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[9901-9908]:Modifier[9901-9908]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[9909-9913]:PrimitiveType[9909-9913]"
    }, {
      "left" : "addRelatedInterfaces",
      "right" : "addRelatedInterfaces",
      "info" : "SimpleName[9914-9934]:SimpleName[9914-9934]"
    }, {
      "left" : "ObjectType instance",
      "right" : "ObjectType instance",
      "info" : "SingleVariableDeclaration[9935-9954]:SingleVariableDeclaration[9935-9954]"
    }, {
      "left" : "Set<ObjectType> set",
      "right" : "Set<ObjectType> set",
      "info" : "SingleVariableDeclaration[9956-9975]:SingleVariableDeclaration[9956-9975]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9977-10342]:Block[9977-10342]"
    }, {
      "left" : "FunctionType constructor = instance.getConstructor();",
      "right" : "FunctionType constructor = instance.getConstructor();",
      "info" : "VariableDeclarationStatement[9983-10036]:VariableDeclarationStatement[9983-10036]"
    }, {
      "left" : "if (constructor != null)",
      "right" : "if (constructor != null)",
      "info" : "IfStatement[10041-10338]:IfStatement[10041-10338]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10066-10338]:Block[10066-10338]"
    }, {
      "left" : "if (!constructor.isInterface())",
      "right" : "if (!constructor.isInterface())",
      "info" : "IfStatement[10074-10131]:IfStatement[10074-10131]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10106-10131]:Block[10106-10131]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[10116-10123]:ReturnStatement[10116-10123]"
    }, {
      "left" : "set.add(instance);",
      "right" : "set.add(instance);",
      "info" : "ExpressionStatement[10139-10157]:ExpressionStatement[10139-10157]"
    }, {
      "left" : "if (constructor.getSuperClassConstructor() != null)",
      "right" : "if (constructor.getSuperClassConstructor() != null)",
      "info" : "IfStatement[10165-10332]:IfStatement[10165-10332]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10217-10332]:Block[10217-10332]"
    }, {
      "left" : "addRelatedInterfaces(\n            constructor.getSuperClassConstructor().getInstanceType(), set);",
      "right" : "addRelatedInterfaces(\n            constructor.getSuperClassConstructor().getInstanceType(), set);",
      "info" : "ExpressionStatement[10227-10324]:ExpressionStatement[10227-10324]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[10425-10431]:Modifier[10425-10431]"
    }, {
      "left" : "Iterable<ObjectType>",
      "right" : "Iterable<ObjectType>",
      "info" : "ParameterizedType[10432-10452]:ParameterizedType[10432-10452]"
    }, {
      "left" : "getImplementedInterfaces",
      "right" : "getImplementedInterfaces",
      "info" : "SimpleName[10453-10477]:SimpleName[10453-10477]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10480-10762]:Block[10480-10762]"
    }, {
      "left" : "FunctionType superCtor = isConstructor() ?\n        getSuperClassConstructor() : null;",
      "right" : "FunctionType superCtor = isConstructor() ?\n        getSuperClassConstructor() : null;",
      "info" : "VariableDeclarationStatement[10486-10571]:VariableDeclarationStatement[10486-10571]"
    }, {
      "left" : "if (superCtor == null)",
      "right" : "if (superCtor == null)",
      "info" : "IfStatement[10576-10758]:IfStatement[10576-10758]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10599-10642]:Block[10599-10642]"
    }, {
      "left" : "return implementedInterfaces;",
      "right" : "return implementedInterfaces;",
      "info" : "ReturnStatement[10607-10636]:ReturnStatement[10607-10636]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10648-10758]:Block[10648-10758]"
    }, {
      "left" : "return Iterables.concat(\n          implementedInterfaces, superCtor.getImplementedInterfaces());",
      "right" : "return Iterables.concat(\n          implementedInterfaces, superCtor.getImplementedInterfaces());",
      "info" : "ReturnStatement[10656-10752]:ReturnStatement[10656-10752]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[10766-10772]:Modifier[10766-10772]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[10773-10777]:PrimitiveType[10773-10777]"
    }, {
      "left" : "setImplementedInterfaces",
      "right" : "setImplementedInterfaces",
      "info" : "SimpleName[10778-10802]:SimpleName[10778-10802]"
    }, {
      "left" : "List<ObjectType> implementedInterfaces",
      "right" : "List<ObjectType> implementedInterfaces",
      "info" : "SingleVariableDeclaration[10803-10841]:SingleVariableDeclaration[10803-10841]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10843-11103]:Block[10843-11103]"
    }, {
      "left" : "for (ObjectType type : implementedInterfaces)",
      "right" : "for (ObjectType type : implementedInterfaces)",
      "info" : "EnhancedForStatement[10906-11021]:EnhancedForStatement[10906-11021]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10952-11021]:Block[10952-11021]"
    }, {
      "left" : "registry.registerTypeImplementingInterface(this, type);",
      "right" : "registry.registerTypeImplementingInterface(this, type);",
      "info" : "ExpressionStatement[10960-11015]:ExpressionStatement[10960-11015]"
    }, {
      "left" : "this.implementedInterfaces = ImmutableList.copyOf(implementedInterfaces);",
      "right" : "this.implementedInterfaces = ImmutableList.copyOf(implementedInterfaces);",
      "info" : "ExpressionStatement[11026-11099]:ExpressionStatement[11026-11099]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[11107-11116]:MarkerAnnotation[11107-11116]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[11119-11125]:Modifier[11119-11125]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[11126-11133]:PrimitiveType[11126-11133]"
    }, {
      "left" : "hasProperty",
      "right" : "hasProperty",
      "info" : "SimpleName[11134-11145]:SimpleName[11134-11145]"
    }, {
      "left" : "String name",
      "right" : "String name",
      "info" : "SingleVariableDeclaration[11146-11157]:SingleVariableDeclaration[11146-11157]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11159-11228]:Block[11159-11228]"
    }, {
      "left" : "return super.hasProperty(name) || \"prototype\".equals(name);",
      "right" : "return super.hasProperty(name) || \"prototype\".equals(name);",
      "info" : "ReturnStatement[11165-11224]:ReturnStatement[11165-11224]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[11232-11241]:MarkerAnnotation[11232-11241]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[11244-11250]:Modifier[11244-11250]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[11251-11258]:PrimitiveType[11251-11258]"
    }, {
      "left" : "hasOwnProperty",
      "right" : "hasOwnProperty",
      "info" : "SimpleName[11259-11273]:SimpleName[11259-11273]"
    }, {
      "left" : "String name",
      "right" : "String name",
      "info" : "SingleVariableDeclaration[11274-11285]:SingleVariableDeclaration[11274-11285]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11287-11359]:Block[11287-11359]"
    }, {
      "left" : "return super.hasOwnProperty(name) || \"prototype\".equals(name);",
      "right" : "return super.hasOwnProperty(name) || \"prototype\".equals(name);",
      "info" : "ReturnStatement[11293-11355]:ReturnStatement[11293-11355]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[11363-11372]:MarkerAnnotation[11363-11372]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[11375-11381]:Modifier[11375-11381]"
    }, {
      "left" : "JSType",
      "right" : "JSType",
      "info" : "SimpleType[11382-11388]:SimpleType[11382-11388]"
    }, {
      "left" : "getPropertyType",
      "right" : "getPropertyType",
      "info" : "SimpleName[11389-11404]:SimpleName[11389-11404]"
    }, {
      "left" : "String name",
      "right" : "String name",
      "info" : "SingleVariableDeclaration[11405-11416]:SingleVariableDeclaration[11405-11416]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11418-13511]:Block[11418-13511]"
    }, {
      "left" : "if (\"prototype\".equals(name))",
      "right" : "if (\"prototype\".equals(name))",
      "info" : "IfStatement[11424-13507]:IfStatement[11424-13507]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11454-11490]:Block[11454-11490]"
    }, {
      "left" : "return getPrototype();",
      "right" : "return getPrototype();",
      "info" : "ReturnStatement[11462-11484]:ReturnStatement[11462-11484]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11496-13507]:Block[11496-13507]"
    }, {
      "left" : "if (!hasOwnProperty(name))",
      "right" : "if (!hasOwnProperty(name))",
      "info" : "IfStatement[11504-13458]:IfStatement[11504-13458]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11531-13458]:Block[11531-13458]"
    }, {
      "left" : "if (\"call\".equals(name))",
      "right" : "if (\"call\".equals(name))",
      "info" : "IfStatement[11541-13450]:IfStatement[11541-13450]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11566-12591]:Block[11566-12591]"
    }, {
      "left" : "Node params = getParametersNode();",
      "right" : "Node params = getParametersNode();",
      "info" : "VariableDeclarationStatement[11626-11660]:VariableDeclarationStatement[11626-11660]"
    }, {
      "left" : "if (params == null)",
      "right" : "if (params == null)",
      "info" : "IfStatement[11671-12581]:IfStatement[11671-12581]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11691-12006]:Block[11691-12006]"
    }, {
      "left" : "defineDeclaredProperty(name,\n                new FunctionBuilder(registry)\n                    .withReturnType(getReturnType())\n                    .build(),\n                false);",
      "right" : "defineDeclaredProperty(name,\n                new FunctionBuilder(registry)\n                    .withReturnType(getReturnType())\n                    .build(),\n                false);",
      "info" : "ExpressionStatement[11813-11994]:ExpressionStatement[11813-11994]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12012-12581]:Block[12012-12581]"
    }, {
      "left" : "params = params.cloneTree();",
      "right" : "params = params.cloneTree();",
      "info" : "ExpressionStatement[12026-12054]:ExpressionStatement[12026-12054]"
    }, {
      "left" : "Node thisTypeNode = Node.newString(Token.NAME, \"thisType\");",
      "right" : "Node thisTypeNode = Node.newString(Token.NAME, \"thisType\");",
      "info" : "VariableDeclarationStatement[12067-12126]:VariableDeclarationStatement[12067-12126]"
    }, {
      "left" : "thisTypeNode.setJSType(\n                registry.createOptionalNullableType(getTypeOfThis()));",
      "right" : "thisTypeNode.setJSType(\n                registry.createOptionalNullableType(getTypeOfThis()));",
      "info" : "ExpressionStatement[12139-12233]:ExpressionStatement[12139-12233]"
    }, {
      "left" : "params.addChildToFront(thisTypeNode);",
      "right" : "params.addChildToFront(thisTypeNode);",
      "info" : "ExpressionStatement[12246-12283]:ExpressionStatement[12246-12283]"
    }, {
      "left" : "thisTypeNode.setOptionalArg(true);",
      "right" : "thisTypeNode.setOptionalArg(true);",
      "info" : "ExpressionStatement[12296-12330]:ExpressionStatement[12296-12330]"
    }, {
      "left" : "defineDeclaredProperty(name,\n                new FunctionBuilder(registry)\n                    .withParamsNode(params)\n                    .withReturnType(getReturnType())\n                    .build(),\n                false);",
      "right" : "defineDeclaredProperty(name,\n                new FunctionBuilder(registry)\n                    .withParamsNode(params)\n                    .withReturnType(getReturnType())\n                    .build(),\n                false);",
      "info" : "ExpressionStatement[12344-12569]:ExpressionStatement[12344-12569]"
    }, {
      "left" : "if (\"apply\".equals(name))",
      "right" : "if (\"apply\".equals(name))",
      "info" : "IfStatement[12597-13450]:IfStatement[12597-13450]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12623-13450]:Block[12623-13450]"
    }, {
      "left" : "FunctionParamBuilder builder = new FunctionParamBuilder(registry);",
      "right" : "FunctionParamBuilder builder = new FunctionParamBuilder(registry);",
      "info" : "VariableDeclarationStatement[12684-12750]:VariableDeclarationStatement[12684-12750]"
    }, {
      "left" : "builder.addOptionalParams(\n              registry.createNullableType(getTypeOfThis()),\n              registry.createNullableType(\n                  registry.getNativeType(JSTypeNative.OBJECT_TYPE)));",
      "right" : "builder.addOptionalParams(\n              registry.createNullableType(getTypeOfThis()),\n              registry.createNullableType(\n                  registry.getNativeType(JSTypeNative.OBJECT_TYPE)));",
      "info" : "ExpressionStatement[13017-13216]:ExpressionStatement[13017-13216]"
    }, {
      "left" : "defineDeclaredProperty(name,\n              new FunctionBuilder(registry)\n                  .withParams(builder)\n                  .withReturnType(getReturnType())\n                  .build(),\n              false);",
      "right" : "defineDeclaredProperty(name,\n              new FunctionBuilder(registry)\n                  .withParams(builder)\n                  .withReturnType(getReturnType())\n                  .build(),\n              false);",
      "info" : "ExpressionStatement[13228-13440]:ExpressionStatement[13228-13440]"
    }, {
      "left" : "return super.getPropertyType(name);",
      "right" : "return super.getPropertyType(name);",
      "info" : "ReturnStatement[13466-13501]:ReturnStatement[13466-13501]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[13515-13524]:MarkerAnnotation[13515-13524]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[13527-13534]:PrimitiveType[13527-13534]"
    }, {
      "left" : "defineProperty",
      "right" : "defineProperty",
      "info" : "SimpleName[13535-13549]:SimpleName[13535-13549]"
    }, {
      "left" : "String name",
      "right" : "String name",
      "info" : "SingleVariableDeclaration[13550-13561]:SingleVariableDeclaration[13550-13561]"
    }, {
      "left" : "JSType type",
      "right" : "JSType type",
      "info" : "SingleVariableDeclaration[13563-13574]:SingleVariableDeclaration[13563-13574]"
    }, {
      "left" : "boolean inferred",
      "right" : "boolean inferred",
      "info" : "SingleVariableDeclaration[13582-13598]:SingleVariableDeclaration[13582-13598]"
    }, {
      "left" : "boolean inExterns",
      "right" : "boolean inExterns",
      "info" : "SingleVariableDeclaration[13600-13617]:SingleVariableDeclaration[13600-13617]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13619-14069]:Block[13619-14069]"
    }, {
      "left" : "if (\"prototype\".equals(name))",
      "right" : "if (\"prototype\".equals(name))",
      "info" : "IfStatement[13625-13999]:IfStatement[13625-13999]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13655-13999]:Block[13655-13999]"
    }, {
      "left" : "ObjectType objType = type.toObjectType();",
      "right" : "ObjectType objType = type.toObjectType();",
      "info" : "VariableDeclarationStatement[13663-13704]:VariableDeclarationStatement[13663-13704]"
    }, {
      "left" : "if (objType != null)",
      "right" : "if (objType != null)",
      "info" : "IfStatement[13711-13993]:IfStatement[13711-13993]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13732-13956]:Block[13732-13956]"
    }, {
      "left" : "if (objType.isEquivalentTo(prototype))",
      "right" : "if (objType.isEquivalentTo(prototype))",
      "info" : "IfStatement[13742-13815]:IfStatement[13742-13815]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13781-13815]:Block[13781-13815]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[13793-13805]:ReturnStatement[13793-13805]"
    }, {
      "left" : "return setPrototype(\n            new FunctionPrototypeType(\n                registry, this, objType, isNativeObjectType()));",
      "right" : "return setPrototype(\n            new FunctionPrototypeType(\n                registry, this, objType, isNativeObjectType()));",
      "info" : "ReturnStatement[13824-13948]:ReturnStatement[13824-13948]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13962-13993]:Block[13962-13993]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[13972-13985]:ReturnStatement[13972-13985]"
    }, {
      "left" : "return super.defineProperty(name, type, inferred, inExterns);",
      "right" : "return super.defineProperty(name, type, inferred, inExterns);",
      "info" : "ReturnStatement[14004-14065]:ReturnStatement[14004-14065]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[14073-14082]:MarkerAnnotation[14073-14082]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[14085-14091]:Modifier[14085-14091]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[14092-14099]:PrimitiveType[14092-14099]"
    }, {
      "left" : "isPropertyTypeInferred",
      "right" : "isPropertyTypeInferred",
      "info" : "SimpleName[14100-14122]:SimpleName[14100-14122]"
    }, {
      "left" : "String property",
      "right" : "String property",
      "info" : "SingleVariableDeclaration[14123-14138]:SingleVariableDeclaration[14123-14138]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14140-14236]:Block[14140-14236]"
    }, {
      "left" : "return \"prototype\".equals(property) ||\n        super.isPropertyTypeInferred(property);",
      "right" : "return \"prototype\".equals(property) ||\n        super.isPropertyTypeInferred(property);",
      "info" : "ReturnStatement[14146-14232]:ReturnStatement[14146-14232]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[14240-14249]:MarkerAnnotation[14240-14249]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[14252-14258]:Modifier[14252-14258]"
    }, {
      "left" : "JSType",
      "right" : "JSType",
      "info" : "SimpleType[14259-14265]:SimpleType[14259-14265]"
    }, {
      "left" : "getLeastSupertype",
      "right" : "getLeastSupertype",
      "info" : "SimpleName[14266-14283]:SimpleName[14266-14283]"
    }, {
      "left" : "JSType that",
      "right" : "JSType that",
      "info" : "SingleVariableDeclaration[14284-14295]:SingleVariableDeclaration[14284-14295]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14297-14342]:Block[14297-14342]"
    }, {
      "left" : "return supAndInfHelper(that, true);",
      "right" : "return supAndInfHelper(that, true);",
      "info" : "ReturnStatement[14303-14338]:ReturnStatement[14303-14338]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[14346-14355]:MarkerAnnotation[14346-14355]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[14358-14364]:Modifier[14358-14364]"
    }, {
      "left" : "JSType",
      "right" : "JSType",
      "info" : "SimpleType[14365-14371]:SimpleType[14365-14371]"
    }, {
      "left" : "getGreatestSubtype",
      "right" : "getGreatestSubtype",
      "info" : "SimpleName[14372-14390]:SimpleName[14372-14390]"
    }, {
      "left" : "JSType that",
      "right" : "JSType that",
      "info" : "SingleVariableDeclaration[14391-14402]:SingleVariableDeclaration[14391-14402]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14404-14450]:Block[14404-14450]"
    }, {
      "left" : "return supAndInfHelper(that, false);",
      "right" : "return supAndInfHelper(that, false);",
      "info" : "ReturnStatement[14410-14446]:ReturnStatement[14410-14446]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[14811-14818]:Modifier[14811-14818]"
    }, {
      "left" : "JSType",
      "right" : "JSType",
      "info" : "SimpleType[14819-14825]:SimpleType[14819-14825]"
    }, {
      "left" : "supAndInfHelper",
      "right" : "supAndInfHelper",
      "info" : "SimpleName[14826-14841]:SimpleName[14826-14841]"
    }, {
      "left" : "JSType that",
      "right" : "JSType that",
      "info" : "SingleVariableDeclaration[14842-14853]:SingleVariableDeclaration[14842-14853]"
    }, {
      "left" : "boolean leastSuper",
      "right" : "boolean leastSuper",
      "info" : "SingleVariableDeclaration[14855-14873]:SingleVariableDeclaration[14855-14873]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14875-18055]:Block[14875-18055]"
    }, {
      "left" : "if (isFunctionType() && that.isFunctionType())",
      "right" : "if (isFunctionType() && that.isFunctionType())",
      "info" : "IfStatement[15625-17946]:IfStatement[15625-17946]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15672-17946]:Block[15672-17946]"
    }, {
      "left" : "if (isEquivalentTo(that))",
      "right" : "if (isEquivalentTo(that))",
      "info" : "IfStatement[15680-15736]:IfStatement[15680-15736]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15706-15736]:Block[15706-15736]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[15716-15728]:ReturnStatement[15716-15728]"
    }, {
      "left" : "FunctionType other = null;",
      "right" : "FunctionType other = null;",
      "info" : "VariableDeclarationStatement[15744-15770]:VariableDeclarationStatement[15744-15770]"
    }, {
      "left" : "if (that instanceof FunctionType)",
      "right" : "if (that instanceof FunctionType)",
      "info" : "IfStatement[15777-15857]:IfStatement[15777-15857]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15811-15857]:Block[15811-15857]"
    }, {
      "left" : "other = (FunctionType) that;",
      "right" : "other = (FunctionType) that;",
      "info" : "ExpressionStatement[15821-15849]:ExpressionStatement[15821-15849]"
    }, {
      "left" : "if (other != null &&\n          isOrdinaryFunction() && that.isOrdinaryFunction() &&\n          !this.call.hasUnknownParamsOrReturn() &&\n          !other.call.hasUnknownParamsOrReturn())",
      "right" : "if (other != null &&\n          isOrdinaryFunction() && that.isOrdinaryFunction() &&\n          !this.call.hasUnknownParamsOrReturn() &&\n          !other.call.hasUnknownParamsOrReturn())",
      "info" : "IfStatement[16105-16906]:IfStatement[16105-16906]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16290-16906]:Block[16290-16906]"
    }, {
      "left" : "boolean isSubtypeOfThat = this.isSubtype(that);",
      "right" : "boolean isSubtypeOfThat = this.isSubtype(that);",
      "info" : "VariableDeclarationStatement[16397-16444]:VariableDeclarationStatement[16397-16444]"
    }, {
      "left" : "boolean isSubtypeOfThis = that.isSubtype(this);",
      "right" : "boolean isSubtypeOfThis = that.isSubtype(this);",
      "info" : "VariableDeclarationStatement[16453-16500]:VariableDeclarationStatement[16453-16500]"
    }, {
      "left" : "if (isSubtypeOfThat && !isSubtypeOfThis)",
      "right" : "if (isSubtypeOfThat && !isSubtypeOfThis)",
      "info" : "IfStatement[16509-16705]:IfStatement[16509-16705]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16550-16604]:Block[16550-16604]"
    }, {
      "left" : "return leastSuper ? that : this;",
      "right" : "return leastSuper ? that : this;",
      "info" : "ReturnStatement[16562-16594]:ReturnStatement[16562-16594]"
    }, {
      "left" : "if (isSubtypeOfThis && !isSubtypeOfThat)",
      "right" : "if (isSubtypeOfThis && !isSubtypeOfThat)",
      "info" : "IfStatement[16610-16705]:IfStatement[16610-16705]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16651-16705]:Block[16651-16705]"
    }, {
      "left" : "return leastSuper ? this : that;",
      "right" : "return leastSuper ? this : that;",
      "info" : "ReturnStatement[16663-16695]:ReturnStatement[16663-16695]"
    }, {
      "left" : "FunctionType merged = tryMergeFunctionPiecewise(other, leastSuper);",
      "right" : "FunctionType merged = tryMergeFunctionPiecewise(other, leastSuper);",
      "info" : "VariableDeclarationStatement[16766-16833]:VariableDeclarationStatement[16766-16833]"
    }, {
      "left" : "if (merged != null)",
      "right" : "if (merged != null)",
      "info" : "IfStatement[16842-16898]:IfStatement[16842-16898]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16862-16898]:Block[16862-16898]"
    }, {
      "left" : "return merged;",
      "right" : "return merged;",
      "info" : "ReturnStatement[16874-16888]:ReturnStatement[16874-16888]"
    }, {
      "left" : "JSType functionInstance = registry.getNativeType(\n          JSTypeNative.FUNCTION_INSTANCE_TYPE);",
      "right" : "JSType functionInstance = registry.getNativeType(\n          JSTypeNative.FUNCTION_INSTANCE_TYPE);",
      "info" : "VariableDeclarationStatement[17019-17116]:VariableDeclarationStatement[17019-17116]"
    }, {
      "left" : "if (functionInstance.isEquivalentTo(that))",
      "right" : "if (functionInstance.isEquivalentTo(that))",
      "info" : "IfStatement[17123-17315]:IfStatement[17123-17315]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17166-17216]:Block[17166-17216]"
    }, {
      "left" : "return leastSuper ? that : this;",
      "right" : "return leastSuper ? that : this;",
      "info" : "ReturnStatement[17176-17208]:ReturnStatement[17176-17208]"
    }, {
      "left" : "if (functionInstance.isEquivalentTo(this))",
      "right" : "if (functionInstance.isEquivalentTo(this))",
      "info" : "IfStatement[17222-17315]:IfStatement[17222-17315]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17265-17315]:Block[17265-17315]"
    }, {
      "left" : "return leastSuper ? this : that;",
      "right" : "return leastSuper ? this : that;",
      "info" : "ReturnStatement[17275-17307]:ReturnStatement[17275-17307]"
    }, {
      "left" : "FunctionType greatestFn =\n          registry.getNativeFunctionType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);",
      "right" : "FunctionType greatestFn =\n          registry.getNativeFunctionType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);",
      "info" : "VariableDeclarationStatement[17685-17787]:VariableDeclarationStatement[17685-17787]"
    }, {
      "left" : "FunctionType leastFn =\n          registry.getNativeFunctionType(JSTypeNative.LEAST_FUNCTION_TYPE);",
      "right" : "FunctionType leastFn =\n          registry.getNativeFunctionType(JSTypeNative.LEAST_FUNCTION_TYPE);",
      "info" : "VariableDeclarationStatement[17794-17892]:VariableDeclarationStatement[17794-17892]"
    }, {
      "left" : "return leastSuper ? greatestFn : leastFn;",
      "right" : "return leastSuper ? greatestFn : leastFn;",
      "info" : "ReturnStatement[17899-17940]:ReturnStatement[17899-17940]"
    }, {
      "left" : "return leastSuper ?\n        super.getLeastSupertype(that) :\n        super.getGreatestSubtype(that);",
      "right" : "return leastSuper ?\n        super.getLeastSupertype(that) :\n        super.getGreatestSubtype(that);",
      "info" : "ReturnStatement[17952-18051]:ReturnStatement[17952-18051]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[18161-18168]:Modifier[18161-18168]"
    }, {
      "left" : "FunctionType",
      "right" : "FunctionType",
      "info" : "SimpleType[18169-18181]:SimpleType[18169-18181]"
    }, {
      "left" : "tryMergeFunctionPiecewise",
      "right" : "tryMergeFunctionPiecewise",
      "info" : "SimpleName[18182-18207]:SimpleName[18182-18207]"
    }, {
      "left" : "FunctionType other",
      "right" : "FunctionType other",
      "info" : "SingleVariableDeclaration[18215-18233]:SingleVariableDeclaration[18215-18233]"
    }, {
      "left" : "boolean leastSuper",
      "right" : "boolean leastSuper",
      "info" : "SingleVariableDeclaration[18235-18253]:SingleVariableDeclaration[18235-18253]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18255-19648]:Block[18255-19648]"
    }, {
      "left" : "Node newParamsNode = null;",
      "right" : "Node newParamsNode = null;",
      "info" : "VariableDeclarationStatement[18261-18287]:VariableDeclarationStatement[18261-18287]"
    }, {
      "left" : "if (call.hasEqualParameters(other.call))",
      "right" : "if (call.hasEqualParameters(other.call))",
      "info" : "IfStatement[18292-18542]:IfStatement[18292-18542]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18333-18379]:Block[18333-18379]"
    }, {
      "left" : "newParamsNode = call.parameters;",
      "right" : "newParamsNode = call.parameters;",
      "info" : "ExpressionStatement[18341-18373]:ExpressionStatement[18341-18373]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18385-18542]:Block[18385-18542]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[18524-18536]:ReturnStatement[18524-18536]"
    }, {
      "left" : "JSType newReturnType = leastSuper ?\n        call.returnType.getLeastSupertype(other.call.returnType) :\n        call.returnType.getGreatestSubtype(other.call.returnType);",
      "right" : "JSType newReturnType = leastSuper ?\n        call.returnType.getLeastSupertype(other.call.returnType) :\n        call.returnType.getGreatestSubtype(other.call.returnType);",
      "info" : "VariableDeclarationStatement[18548-18717]:VariableDeclarationStatement[18548-18717]"
    }, {
      "left" : "ObjectType newTypeOfThis = null;",
      "right" : "ObjectType newTypeOfThis = null;",
      "info" : "VariableDeclarationStatement[18723-18755]:VariableDeclarationStatement[18723-18755]"
    }, {
      "left" : "if (isEquivalent(typeOfThis, other.typeOfThis))",
      "right" : "if (isEquivalent(typeOfThis, other.typeOfThis))",
      "info" : "IfStatement[18760-19338]:IfStatement[18760-19338]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18808-18849]:Block[18808-18849]"
    }, {
      "left" : "newTypeOfThis = typeOfThis;",
      "right" : "newTypeOfThis = typeOfThis;",
      "info" : "ExpressionStatement[18816-18843]:ExpressionStatement[18816-18843]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18855-19338]:Block[18855-19338]"
    }, {
      "left" : "JSType maybeNewTypeOfThis = leastSuper ?\n          typeOfThis.getLeastSupertype(other.typeOfThis) :\n          typeOfThis.getGreatestSubtype(other.typeOfThis);",
      "right" : "JSType maybeNewTypeOfThis = leastSuper ?\n          typeOfThis.getLeastSupertype(other.typeOfThis) :\n          typeOfThis.getGreatestSubtype(other.typeOfThis);",
      "info" : "VariableDeclarationStatement[18863-19021]:VariableDeclarationStatement[18863-19021]"
    }, {
      "left" : "if (maybeNewTypeOfThis instanceof ObjectType)",
      "right" : "if (maybeNewTypeOfThis instanceof ObjectType)",
      "info" : "IfStatement[19028-19332]:IfStatement[19028-19332]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19074-19140]:Block[19074-19140]"
    }, {
      "left" : "newTypeOfThis = (ObjectType) maybeNewTypeOfThis;",
      "right" : "newTypeOfThis = (ObjectType) maybeNewTypeOfThis;",
      "info" : "ExpressionStatement[19084-19132]:ExpressionStatement[19084-19132]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19146-19332]:Block[19146-19332]"
    }, {
      "left" : "newTypeOfThis = leastSuper ?\n            registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE) :\n            registry.getNativeObjectType(JSTypeNative.NO_OBJECT_TYPE);",
      "right" : "newTypeOfThis = leastSuper ?\n            registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE) :\n            registry.getNativeObjectType(JSTypeNative.NO_OBJECT_TYPE);",
      "info" : "ExpressionStatement[19156-19324]:ExpressionStatement[19156-19324]"
    }, {
      "left" : "boolean newReturnTypeInferred =\n        call.returnTypeInferred || other.call.returnTypeInferred;",
      "right" : "boolean newReturnTypeInferred =\n        call.returnTypeInferred || other.call.returnTypeInferred;",
      "info" : "VariableDeclarationStatement[19344-19441]:VariableDeclarationStatement[19344-19441]"
    }, {
      "left" : "return new FunctionType(\n        registry, null, null,\n        new ArrowType(\n            registry, newParamsNode, newReturnType, newReturnTypeInferred),\n        newTypeOfThis, null, false, false);",
      "right" : "return new FunctionType(\n        registry, null, null,\n        new ArrowType(\n            registry, newParamsNode, newReturnType, newReturnTypeInferred),\n        newTypeOfThis, null, false, false);",
      "info" : "ReturnStatement[19447-19644]:ReturnStatement[19447-19644]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[19779-19785]:Modifier[19779-19785]"
    }, {
      "left" : "FunctionType",
      "right" : "FunctionType",
      "info" : "SimpleType[19786-19798]:SimpleType[19786-19798]"
    }, {
      "left" : "getSuperClassConstructor",
      "right" : "getSuperClassConstructor",
      "info" : "SimpleName[19799-19823]:SimpleName[19799-19823]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19826-20096]:Block[19826-20096]"
    }, {
      "left" : "Preconditions.checkArgument(isConstructor() || isInterface());",
      "right" : "Preconditions.checkArgument(isConstructor() || isInterface());",
      "info" : "ExpressionStatement[19832-19894]:ExpressionStatement[19832-19894]"
    }, {
      "left" : "ObjectType maybeSuperInstanceType = getPrototype().getImplicitPrototype();",
      "right" : "ObjectType maybeSuperInstanceType = getPrototype().getImplicitPrototype();",
      "info" : "VariableDeclarationStatement[19899-19973]:VariableDeclarationStatement[19899-19973]"
    }, {
      "left" : "if (maybeSuperInstanceType == null)",
      "right" : "if (maybeSuperInstanceType == null)",
      "info" : "IfStatement[19978-20040]:IfStatement[19978-20040]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20014-20040]:Block[20014-20040]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[20022-20034]:ReturnStatement[20022-20034]"
    }, {
      "left" : "return maybeSuperInstanceType.getConstructor();",
      "right" : "return maybeSuperInstanceType.getConstructor();",
      "info" : "ReturnStatement[20045-20092]:ReturnStatement[20045-20092]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[20234-20240]:Modifier[20234-20240]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[20241-20248]:PrimitiveType[20241-20248]"
    }, {
      "left" : "hasUnknownSupertype",
      "right" : "hasUnknownSupertype",
      "info" : "SimpleName[20249-20268]:SimpleName[20249-20268]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20271-21027]:Block[20271-21027]"
    }, {
      "left" : "Preconditions.checkArgument(isConstructor() || isInterface());",
      "right" : "Preconditions.checkArgument(isConstructor() || isInterface());",
      "info" : "ExpressionStatement[20277-20339]:ExpressionStatement[20277-20339]"
    }, {
      "left" : "Preconditions.checkArgument(!this.isUnknownType());",
      "right" : "Preconditions.checkArgument(!this.isUnknownType());",
      "info" : "ExpressionStatement[20344-20395]:ExpressionStatement[20344-20395]"
    }, {
      "left" : "FunctionType ctor = this;",
      "right" : "FunctionType ctor = this;",
      "info" : "VariableDeclarationStatement[20536-20561]:VariableDeclarationStatement[20536-20561]"
    }, {
      "left" : "while (true)",
      "right" : "while (true)",
      "info" : "WhileStatement[20566-21023]:WhileStatement[20566-21023]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20579-21023]:Block[20579-21023]"
    }, {
      "left" : "ObjectType maybeSuperInstanceType =\n          ctor.getPrototype().getImplicitPrototype();",
      "right" : "ObjectType maybeSuperInstanceType =\n          ctor.getPrototype().getImplicitPrototype();",
      "info" : "VariableDeclarationStatement[20587-20676]:VariableDeclarationStatement[20587-20676]"
    }, {
      "left" : "if (maybeSuperInstanceType == null)",
      "right" : "if (maybeSuperInstanceType == null)",
      "info" : "IfStatement[20683-20750]:IfStatement[20683-20750]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20719-20750]:Block[20719-20750]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[20729-20742]:ReturnStatement[20729-20742]"
    }, {
      "left" : "if (maybeSuperInstanceType.isUnknownType())",
      "right" : "if (maybeSuperInstanceType.isUnknownType())",
      "info" : "IfStatement[20757-20831]:IfStatement[20757-20831]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20801-20831]:Block[20801-20831]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[20811-20823]:ReturnStatement[20811-20823]"
    }, {
      "left" : "ctor = maybeSuperInstanceType.getConstructor();",
      "right" : "ctor = maybeSuperInstanceType.getConstructor();",
      "info" : "ExpressionStatement[20838-20885]:ExpressionStatement[20838-20885]"
    }, {
      "left" : "if (ctor == null)",
      "right" : "if (ctor == null)",
      "info" : "IfStatement[20892-20941]:IfStatement[20892-20941]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20910-20941]:Block[20910-20941]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[20920-20933]:ReturnStatement[20920-20933]"
    }, {
      "left" : "Preconditions.checkState(ctor.isConstructor() || ctor.isInterface());",
      "right" : "Preconditions.checkState(ctor.isConstructor() || ctor.isInterface());",
      "info" : "ExpressionStatement[20948-21017]:ExpressionStatement[20948-21017]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[21205-21211]:Modifier[21205-21211]"
    }, {
      "left" : "JSType",
      "right" : "JSType",
      "info" : "SimpleType[21212-21218]:SimpleType[21212-21218]"
    }, {
      "left" : "getTopMostDefiningType",
      "right" : "getTopMostDefiningType",
      "info" : "SimpleName[21219-21241]:SimpleName[21219-21241]"
    }, {
      "left" : "String propertyName",
      "right" : "String propertyName",
      "info" : "SingleVariableDeclaration[21242-21261]:SingleVariableDeclaration[21242-21261]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21263-21673]:Block[21263-21673]"
    }, {
      "left" : "Preconditions.checkState(isConstructor() || isInterface());",
      "right" : "Preconditions.checkState(isConstructor() || isInterface());",
      "info" : "ExpressionStatement[21269-21328]:ExpressionStatement[21269-21328]"
    }, {
      "left" : "Preconditions.checkArgument(getPrototype().hasProperty(propertyName));",
      "right" : "Preconditions.checkArgument(getPrototype().hasProperty(propertyName));",
      "info" : "ExpressionStatement[21333-21403]:ExpressionStatement[21333-21403]"
    }, {
      "left" : "FunctionType ctor = this;",
      "right" : "FunctionType ctor = this;",
      "info" : "VariableDeclarationStatement[21408-21433]:VariableDeclarationStatement[21408-21433]"
    }, {
      "left" : "JSType topInstanceType;",
      "right" : "JSType topInstanceType;",
      "info" : "VariableDeclarationStatement[21438-21461]:VariableDeclarationStatement[21438-21461]"
    }, {
      "left" : "do{...}",
      "right" : "do{...}",
      "info" : "DoStatement[21466-21641]:DoStatement[21466-21641]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21469-21570]:Block[21469-21570]"
    }, {
      "left" : "topInstanceType = ctor.getInstanceType();",
      "right" : "topInstanceType = ctor.getInstanceType();",
      "info" : "ExpressionStatement[21477-21518]:ExpressionStatement[21477-21518]"
    }, {
      "left" : "ctor = ctor.getSuperClassConstructor();",
      "right" : "ctor = ctor.getSuperClassConstructor();",
      "info" : "ExpressionStatement[21525-21564]:ExpressionStatement[21525-21564]"
    }, {
      "left" : "return topInstanceType;",
      "right" : "return topInstanceType;",
      "info" : "ReturnStatement[21646-21669]:ReturnStatement[21646-21669]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[21836-21845]:MarkerAnnotation[21836-21845]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[21848-21854]:Modifier[21848-21854]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[21855-21862]:PrimitiveType[21855-21862]"
    }, {
      "left" : "isEquivalentTo",
      "right" : "isEquivalentTo",
      "info" : "SimpleName[21863-21877]:SimpleName[21863-21877]"
    }, {
      "left" : "JSType otherType",
      "right" : "JSType otherType",
      "info" : "SingleVariableDeclaration[21878-21894]:SingleVariableDeclaration[21878-21894]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21896-22545]:Block[21896-22545]"
    }, {
      "left" : "if (!(otherType instanceof FunctionType))",
      "right" : "if (!(otherType instanceof FunctionType))",
      "info" : "IfStatement[21902-21971]:IfStatement[21902-21971]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21944-21971]:Block[21944-21971]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[21952-21965]:ReturnStatement[21952-21965]"
    }, {
      "left" : "FunctionType that = (FunctionType) otherType;",
      "right" : "FunctionType that = (FunctionType) otherType;",
      "info" : "VariableDeclarationStatement[21976-22021]:VariableDeclarationStatement[21976-22021]"
    }, {
      "left" : "if (!that.isFunctionType())",
      "right" : "if (!that.isFunctionType())",
      "info" : "IfStatement[22026-22081]:IfStatement[22026-22081]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22054-22081]:Block[22054-22081]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[22062-22075]:ReturnStatement[22062-22075]"
    }, {
      "left" : "if (this.isConstructor())",
      "right" : "if (this.isConstructor())",
      "info" : "IfStatement[22086-22210]:IfStatement[22086-22210]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22112-22210]:Block[22112-22210]"
    }, {
      "left" : "if (that.isConstructor())",
      "right" : "if (that.isConstructor())",
      "info" : "IfStatement[22120-22184]:IfStatement[22120-22184]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22146-22184]:Block[22146-22184]"
    }, {
      "left" : "return this == that;",
      "right" : "return this == that;",
      "info" : "ReturnStatement[22156-22176]:ReturnStatement[22156-22176]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[22191-22204]:ReturnStatement[22191-22204]"
    }, {
      "left" : "if (this.isInterface())",
      "right" : "if (this.isInterface())",
      "info" : "IfStatement[22215-22378]:IfStatement[22215-22378]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22239-22378]:Block[22239-22378]"
    }, {
      "left" : "if (that.isInterface())",
      "right" : "if (that.isInterface())",
      "info" : "IfStatement[22247-22352]:IfStatement[22247-22352]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22271-22352]:Block[22271-22352]"
    }, {
      "left" : "return this.getReferenceName().equals(that.getReferenceName());",
      "right" : "return this.getReferenceName().equals(that.getReferenceName());",
      "info" : "ReturnStatement[22281-22344]:ReturnStatement[22281-22344]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[22359-22372]:ReturnStatement[22359-22372]"
    }, {
      "left" : "if (that.isInterface())",
      "right" : "if (that.isInterface())",
      "info" : "IfStatement[22383-22434]:IfStatement[22383-22434]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22407-22434]:Block[22407-22434]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[22415-22428]:ReturnStatement[22415-22428]"
    }, {
      "left" : "return this.typeOfThis.isEquivalentTo(that.typeOfThis) &&\n        this.call.isEquivalentTo(that.call);",
      "right" : "return this.typeOfThis.isEquivalentTo(that.typeOfThis) &&\n        this.call.isEquivalentTo(that.call);",
      "info" : "ReturnStatement[22439-22541]:ReturnStatement[22439-22541]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[22549-22558]:MarkerAnnotation[22549-22558]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[22561-22567]:Modifier[22561-22567]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[22568-22571]:PrimitiveType[22568-22571]"
    }, {
      "left" : "hashCode",
      "right" : "hashCode",
      "info" : "SimpleName[22572-22580]:SimpleName[22572-22580]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22583-22664]:Block[22583-22664]"
    }, {
      "left" : "return isInterface() ? getReferenceName().hashCode() : call.hashCode();",
      "right" : "return isInterface() ? getReferenceName().hashCode() : call.hashCode();",
      "info" : "ReturnStatement[22589-22660]:ReturnStatement[22589-22660]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[22668-22674]:Modifier[22668-22674]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[22675-22682]:PrimitiveType[22675-22682]"
    }, {
      "left" : "hasEqualCallType",
      "right" : "hasEqualCallType",
      "info" : "SimpleName[22683-22699]:SimpleName[22683-22699]"
    }, {
      "left" : "FunctionType otherType",
      "right" : "FunctionType otherType",
      "info" : "SingleVariableDeclaration[22700-22722]:SingleVariableDeclaration[22700-22722]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22724-22782]:Block[22724-22782]"
    }, {
      "left" : "return this.call.isEquivalentTo(otherType.call);",
      "right" : "return this.call.isEquivalentTo(otherType.call);",
      "info" : "ReturnStatement[22730-22778]:ReturnStatement[22730-22778]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[23058-23067]:MarkerAnnotation[23058-23067]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[23070-23076]:Modifier[23070-23076]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[23077-23083]:SimpleType[23077-23083]"
    }, {
      "left" : "toString",
      "right" : "toString",
      "info" : "SimpleName[23084-23092]:SimpleName[23084-23092]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23095-24115]:Block[23095-24115]"
    }, {
      "left" : "if (this == registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE))",
      "right" : "if (this == registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE))",
      "info" : "IfStatement[23101-23206]:IfStatement[23101-23206]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23174-23206]:Block[23174-23206]"
    }, {
      "left" : "return \"Function\";",
      "right" : "return \"Function\";",
      "info" : "ReturnStatement[23182-23200]:ReturnStatement[23182-23200]"
    }, {
      "left" : "StringBuilder b = new StringBuilder(32);",
      "right" : "StringBuilder b = new StringBuilder(32);",
      "info" : "VariableDeclarationStatement[23212-23252]:VariableDeclarationStatement[23212-23252]"
    }, {
      "left" : "b.append(\"function (\");",
      "right" : "b.append(\"function (\");",
      "info" : "ExpressionStatement[23257-23280]:ExpressionStatement[23257-23280]"
    }, {
      "left" : "int paramNum = call.parameters.getChildCount();",
      "right" : "int paramNum = call.parameters.getChildCount();",
      "info" : "VariableDeclarationStatement[23285-23332]:VariableDeclarationStatement[23285-23332]"
    }, {
      "left" : "boolean hasKnownTypeOfThis = !typeOfThis.isUnknownType();",
      "right" : "boolean hasKnownTypeOfThis = !typeOfThis.isUnknownType();",
      "info" : "VariableDeclarationStatement[23337-23394]:VariableDeclarationStatement[23337-23394]"
    }, {
      "left" : "if (hasKnownTypeOfThis)",
      "right" : "if (hasKnownTypeOfThis)",
      "info" : "IfStatement[23399-23494]:IfStatement[23399-23494]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23423-23494]:Block[23423-23494]"
    }, {
      "left" : "b.append(\"this:\");",
      "right" : "b.append(\"this:\");",
      "info" : "ExpressionStatement[23431-23449]:ExpressionStatement[23431-23449]"
    }, {
      "left" : "b.append(typeOfThis.toString());",
      "right" : "b.append(typeOfThis.toString());",
      "info" : "ExpressionStatement[23456-23488]:ExpressionStatement[23456-23488]"
    }, {
      "left" : "if (paramNum > 0)",
      "right" : "if (paramNum > 0)",
      "info" : "IfStatement[23499-24034]:IfStatement[23499-24034]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23517-24034]:Block[23517-24034]"
    }, {
      "left" : "if (hasKnownTypeOfThis)",
      "right" : "if (hasKnownTypeOfThis)",
      "info" : "IfStatement[23525-23582]:IfStatement[23525-23582]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23549-23582]:Block[23549-23582]"
    }, {
      "left" : "b.append(\", \");",
      "right" : "b.append(\", \");",
      "info" : "ExpressionStatement[23559-23574]:ExpressionStatement[23559-23574]"
    }, {
      "left" : "Node p = call.parameters.getFirstChild();",
      "right" : "Node p = call.parameters.getFirstChild();",
      "info" : "VariableDeclarationStatement[23589-23630]:VariableDeclarationStatement[23589-23630]"
    }, {
      "left" : "if (p.isVarArgs())",
      "right" : "if (p.isVarArgs())",
      "info" : "IfStatement[23637-23771]:IfStatement[23637-23771]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23656-23712]:Block[23656-23712]"
    }, {
      "left" : "appendVarArgsString(b, p.getJSType());",
      "right" : "appendVarArgsString(b, p.getJSType());",
      "info" : "ExpressionStatement[23666-23704]:ExpressionStatement[23666-23704]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23718-23771]:Block[23718-23771]"
    }, {
      "left" : "b.append(p.getJSType().toString());",
      "right" : "b.append(p.getJSType().toString());",
      "info" : "ExpressionStatement[23728-23763]:ExpressionStatement[23728-23763]"
    }, {
      "left" : "p = p.getNext();",
      "right" : "p = p.getNext();",
      "info" : "ExpressionStatement[23778-23794]:ExpressionStatement[23778-23794]"
    }, {
      "left" : "while (p != null)",
      "right" : "while (p != null)",
      "info" : "WhileStatement[23801-24028]:WhileStatement[23801-24028]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23819-24028]:Block[23819-24028]"
    }, {
      "left" : "b.append(\", \");",
      "right" : "b.append(\", \");",
      "info" : "ExpressionStatement[23829-23844]:ExpressionStatement[23829-23844]"
    }, {
      "left" : "if (p.isVarArgs())",
      "right" : "if (p.isVarArgs())",
      "info" : "IfStatement[23853-23995]:IfStatement[23853-23995]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23872-23932]:Block[23872-23932]"
    }, {
      "left" : "appendVarArgsString(b, p.getJSType());",
      "right" : "appendVarArgsString(b, p.getJSType());",
      "info" : "ExpressionStatement[23884-23922]:ExpressionStatement[23884-23922]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23938-23995]:Block[23938-23995]"
    }, {
      "left" : "b.append(p.getJSType().toString());",
      "right" : "b.append(p.getJSType().toString());",
      "info" : "ExpressionStatement[23950-23985]:ExpressionStatement[23950-23985]"
    }, {
      "left" : "p = p.getNext();",
      "right" : "p = p.getNext();",
      "info" : "ExpressionStatement[24004-24020]:ExpressionStatement[24004-24020]"
    }, {
      "left" : "b.append(\"): \");",
      "right" : "b.append(\"): \");",
      "info" : "ExpressionStatement[24039-24055]:ExpressionStatement[24039-24055]"
    }, {
      "left" : "b.append(call.returnType);",
      "right" : "b.append(call.returnType);",
      "info" : "ExpressionStatement[24060-24086]:ExpressionStatement[24060-24086]"
    }, {
      "left" : "return b.toString();",
      "right" : "return b.toString();",
      "info" : "ReturnStatement[24091-24111]:ReturnStatement[24091-24111]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[24180-24187]:Modifier[24180-24187]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[24188-24192]:PrimitiveType[24188-24192]"
    }, {
      "left" : "appendVarArgsString",
      "right" : "appendVarArgsString",
      "info" : "SimpleName[24193-24212]:SimpleName[24193-24212]"
    }, {
      "left" : "StringBuilder builder",
      "right" : "StringBuilder builder",
      "info" : "SingleVariableDeclaration[24213-24234]:SingleVariableDeclaration[24213-24234]"
    }, {
      "left" : "JSType paramType",
      "right" : "JSType paramType",
      "info" : "SingleVariableDeclaration[24236-24252]:SingleVariableDeclaration[24236-24252]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24254-24541]:Block[24254-24541]"
    }, {
      "left" : "if (paramType.isUnionType())",
      "right" : "if (paramType.isUnionType())",
      "info" : "IfStatement[24260-24468]:IfStatement[24260-24468]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24289-24468]:Block[24289-24468]"
    }, {
      "left" : "paramType = ((UnionType) paramType).getRestrictedUnion(\n          registry.getNativeType(JSTypeNative.VOID_TYPE));",
      "right" : "paramType = ((UnionType) paramType).getRestrictedUnion(\n          registry.getNativeType(JSTypeNative.VOID_TYPE));",
      "info" : "ExpressionStatement[24348-24462]:ExpressionStatement[24348-24462]"
    }, {
      "left" : "builder.append(\"...[\").append(paramType.toString()).append(\"]\");",
      "right" : "builder.append(\"...[\").append(paramType.toString()).append(\"]\");",
      "info" : "ExpressionStatement[24473-24537]:ExpressionStatement[24473-24537]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[24737-24746]:MarkerAnnotation[24737-24746]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[24749-24755]:Modifier[24749-24755]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[24756-24763]:PrimitiveType[24756-24763]"
    }, {
      "left" : "isSubtype",
      "right" : "isSubtype",
      "info" : "SimpleName[24764-24773]:SimpleName[24764-24773]"
    }, {
      "left" : "JSType that",
      "right" : "JSType that",
      "info" : "SingleVariableDeclaration[24774-24785]:SingleVariableDeclaration[24774-24785]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24787-25983]:Block[24787-25983]"
    }, {
      "left" : "if (JSType.isSubtype(this, that))",
      "right" : "if (JSType.isSubtype(this, that))",
      "info" : "IfStatement[24793-24853]:IfStatement[24793-24853]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24827-24853]:Block[24827-24853]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[24835-24847]:ReturnStatement[24835-24847]"
    }, {
      "left" : "if (that.isFunctionType())",
      "right" : "if (that.isFunctionType())",
      "info" : "IfStatement[24859-25903]:IfStatement[24859-25903]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24886-25903]:Block[24886-25903]"
    }, {
      "left" : "if (((FunctionType) that).isInterface())",
      "right" : "if (((FunctionType) that).isInterface())",
      "info" : "IfStatement[24894-25031]:IfStatement[24894-25031]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24935-25031]:Block[24935-25031]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[25011-25023]:ReturnStatement[25011-25023]"
    }, {
      "left" : "if (this.isInterface())",
      "right" : "if (this.isInterface())",
      "info" : "IfStatement[25038-25158]:IfStatement[25038-25158]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25062-25158]:Block[25062-25158]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[25137-25150]:ReturnStatement[25137-25150]"
    }, {
      "left" : "FunctionType other = (FunctionType) that;",
      "right" : "FunctionType other = (FunctionType) that;",
      "info" : "VariableDeclarationStatement[25627-25668]:VariableDeclarationStatement[25627-25668]"
    }, {
      "left" : "return (this.isConstructor() || other.isConstructor() ||\n              other.typeOfThis.isSubtype(this.typeOfThis) ||\n              this.typeOfThis.isSubtype(other.typeOfThis)) &&\n          this.call.isSubtype(other.call);",
      "right" : "return (this.isConstructor() || other.isConstructor() ||\n              other.typeOfThis.isSubtype(this.typeOfThis) ||\n              this.typeOfThis.isSubtype(other.typeOfThis)) &&\n          this.call.isSubtype(other.call);",
      "info" : "ReturnStatement[25675-25897]:ReturnStatement[25675-25897]"
    }, {
      "left" : "return getNativeType(JSTypeNative.FUNCTION_PROTOTYPE).isSubtype(that);",
      "right" : "return getNativeType(JSTypeNative.FUNCTION_PROTOTYPE).isSubtype(that);",
      "info" : "ReturnStatement[25909-25979]:ReturnStatement[25909-25979]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[25987-25996]:MarkerAnnotation[25987-25996]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[25999-26005]:Modifier[25999-26005]"
    }, {
      "left" : "T",
      "right" : "T",
      "info" : "TypeParameter[26007-26008]:TypeParameter[26007-26008]"
    }, {
      "left" : "T",
      "right" : "T",
      "info" : "SimpleType[26010-26011]:SimpleType[26010-26011]"
    }, {
      "left" : "visit",
      "right" : "visit",
      "info" : "SimpleName[26012-26017]:SimpleName[26012-26017]"
    }, {
      "left" : "Visitor<T> visitor",
      "right" : "Visitor<T> visitor",
      "info" : "SingleVariableDeclaration[26018-26036]:SingleVariableDeclaration[26018-26036]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26038-26086]:Block[26038-26086]"
    }, {
      "left" : "return visitor.caseFunctionType(this);",
      "right" : "return visitor.caseFunctionType(this);",
      "info" : "ReturnStatement[26044-26082]:ReturnStatement[26044-26082]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[26269-26275]:Modifier[26269-26275]"
    }, {
      "left" : "ObjectType",
      "right" : "ObjectType",
      "info" : "SimpleType[26276-26286]:SimpleType[26276-26286]"
    }, {
      "left" : "getInstanceType",
      "right" : "getInstanceType",
      "info" : "SimpleName[26287-26302]:SimpleName[26287-26302]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26305-26382]:Block[26305-26382]"
    }, {
      "left" : "Preconditions.checkState(hasInstanceType());",
      "right" : "Preconditions.checkState(hasInstanceType());",
      "info" : "ExpressionStatement[26311-26355]:ExpressionStatement[26311-26355]"
    }, {
      "left" : "return typeOfThis;",
      "right" : "return typeOfThis;",
      "info" : "ReturnStatement[26360-26378]:ReturnStatement[26360-26378]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[26470-26474]:PrimitiveType[26470-26474]"
    }, {
      "left" : "setInstanceType",
      "right" : "setInstanceType",
      "info" : "SimpleName[26475-26490]:SimpleName[26475-26490]"
    }, {
      "left" : "ObjectType instanceType",
      "right" : "ObjectType instanceType",
      "info" : "SingleVariableDeclaration[26491-26514]:SingleVariableDeclaration[26491-26514]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26516-26552]:Block[26516-26552]"
    }, {
      "left" : "typeOfThis = instanceType;",
      "right" : "typeOfThis = instanceType;",
      "info" : "ExpressionStatement[26522-26548]:ExpressionStatement[26522-26548]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[26630-26636]:Modifier[26630-26636]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[26637-26644]:PrimitiveType[26637-26644]"
    }, {
      "left" : "hasInstanceType",
      "right" : "hasInstanceType",
      "info" : "SimpleName[26645-26660]:SimpleName[26645-26660]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26663-26713]:Block[26663-26713]"
    }, {
      "left" : "return isConstructor() || isInterface();",
      "right" : "return isConstructor() || isInterface();",
      "info" : "ReturnStatement[26669-26709]:ReturnStatement[26669-26709]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[26782-26788]:Modifier[26782-26788]"
    }, {
      "left" : "ObjectType",
      "right" : "ObjectType",
      "info" : "SimpleType[26789-26799]:SimpleType[26789-26799]"
    }, {
      "left" : "getTypeOfThis",
      "right" : "getTypeOfThis",
      "info" : "SimpleName[26800-26813]:SimpleName[26800-26813]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26816-26939]:Block[26816-26939]"
    }, {
      "left" : "return typeOfThis.isNoObjectType() ?\n        registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE) : typeOfThis;",
      "right" : "return typeOfThis.isNoObjectType() ?\n        registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE) : typeOfThis;",
      "info" : "ReturnStatement[26822-26935]:ReturnStatement[26822-26935]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[27021-27027]:Modifier[27021-27027]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[27028-27032]:SimpleType[27028-27032]"
    }, {
      "left" : "getSource",
      "right" : "getSource",
      "info" : "SimpleName[27033-27042]:SimpleName[27033-27042]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27045-27069]:Block[27045-27069]"
    }, {
      "left" : "return source;",
      "right" : "return source;",
      "info" : "ReturnStatement[27051-27065]:ReturnStatement[27051-27065]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[27112-27118]:Modifier[27112-27118]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[27119-27123]:PrimitiveType[27119-27123]"
    }, {
      "left" : "setSource",
      "right" : "setSource",
      "info" : "SimpleName[27124-27133]:SimpleName[27124-27133]"
    }, {
      "left" : "Node source",
      "right" : "Node source",
      "info" : "SingleVariableDeclaration[27134-27145]:SingleVariableDeclaration[27134-27145]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27147-27178]:Block[27147-27178]"
    }, {
      "left" : "this.source = source;",
      "right" : "this.source = source;",
      "info" : "ExpressionStatement[27153-27174]:ExpressionStatement[27153-27174]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[27242-27249]:Modifier[27242-27249]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[27250-27254]:PrimitiveType[27250-27254]"
    }, {
      "left" : "addSubType",
      "right" : "addSubType",
      "info" : "SimpleName[27255-27265]:SimpleName[27255-27265]"
    }, {
      "left" : "FunctionType subType",
      "right" : "FunctionType subType",
      "info" : "SingleVariableDeclaration[27266-27286]:SingleVariableDeclaration[27266-27286]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27288-27393]:Block[27288-27393]"
    }, {
      "left" : "if (subTypes == null)",
      "right" : "if (subTypes == null)",
      "info" : "IfStatement[27294-27362]:IfStatement[27294-27362]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27316-27362]:Block[27316-27362]"
    }, {
      "left" : "subTypes = Lists.newArrayList();",
      "right" : "subTypes = Lists.newArrayList();",
      "info" : "ExpressionStatement[27324-27356]:ExpressionStatement[27324-27356]"
    }, {
      "left" : "subTypes.add(subType);",
      "right" : "subTypes.add(subType);",
      "info" : "ExpressionStatement[27367-27389]:ExpressionStatement[27367-27389]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[27598-27604]:Modifier[27598-27604]"
    }, {
      "left" : "List<FunctionType>",
      "right" : "List<FunctionType>",
      "info" : "ParameterizedType[27605-27623]:ParameterizedType[27605-27623]"
    }, {
      "left" : "getSubTypes",
      "right" : "getSubTypes",
      "info" : "SimpleName[27624-27635]:SimpleName[27624-27635]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27638-27664]:Block[27638-27664]"
    }, {
      "left" : "return subTypes;",
      "right" : "return subTypes;",
      "info" : "ReturnStatement[27644-27660]:ReturnStatement[27644-27660]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[27668-27677]:MarkerAnnotation[27668-27677]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[27680-27686]:Modifier[27680-27686]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[27687-27694]:PrimitiveType[27687-27694]"
    }, {
      "left" : "hasCachedValues",
      "right" : "hasCachedValues",
      "info" : "SimpleName[27695-27710]:SimpleName[27695-27710]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27713-27775]:Block[27713-27775]"
    }, {
      "left" : "return prototype != null || super.hasCachedValues();",
      "right" : "return prototype != null || super.hasCachedValues();",
      "info" : "ReturnStatement[27719-27771]:ReturnStatement[27719-27771]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[27825-27831]:Modifier[27825-27831]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[27832-27838]:SimpleType[27832-27838]"
    }, {
      "left" : "getTemplateTypeName",
      "right" : "getTemplateTypeName",
      "info" : "SimpleName[27839-27858]:SimpleName[27839-27858]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27861-27895]:Block[27861-27895]"
    }, {
      "left" : "return templateTypeName;",
      "right" : "return templateTypeName;",
      "info" : "ReturnStatement[27867-27891]:ReturnStatement[27867-27891]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[29536-29545]:MarkerAnnotation[29649-29658]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[29548-29554]:Modifier[29661-29667]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[29555-29561]:SimpleType[29668-29674]"
    }, {
      "left" : "toDebugHashCodeString",
      "right" : "toDebugHashCodeString",
      "info" : "SimpleName[29562-29583]:SimpleName[29675-29696]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29586-30508]:Block[29699-30621]"
    }, {
      "left" : "if (this == registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE))",
      "right" : "if (this == registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE))",
      "info" : "IfStatement[29592-29716]:IfStatement[29705-29829]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29665-29716]:Block[29778-29829]"
    }, {
      "left" : "return super.toDebugHashCodeString();",
      "right" : "return super.toDebugHashCodeString();",
      "info" : "ReturnStatement[29673-29710]:ReturnStatement[29786-29823]"
    }, {
      "left" : "StringBuilder b = new StringBuilder(32);",
      "right" : "StringBuilder b = new StringBuilder(32);",
      "info" : "VariableDeclarationStatement[29722-29762]:VariableDeclarationStatement[29835-29875]"
    }, {
      "left" : "b.append(\"function (\");",
      "right" : "b.append(\"function (\");",
      "info" : "ExpressionStatement[29767-29790]:ExpressionStatement[29880-29903]"
    }, {
      "left" : "int paramNum = call.parameters.getChildCount();",
      "right" : "int paramNum = call.parameters.getChildCount();",
      "info" : "VariableDeclarationStatement[29795-29842]:VariableDeclarationStatement[29908-29955]"
    }, {
      "left" : "boolean hasKnownTypeOfThis = !typeOfThis.isUnknownType();",
      "right" : "boolean hasKnownTypeOfThis = !typeOfThis.isUnknownType();",
      "info" : "VariableDeclarationStatement[29847-29904]:VariableDeclarationStatement[29960-30017]"
    }, {
      "left" : "if (hasKnownTypeOfThis)",
      "right" : "if (hasKnownTypeOfThis)",
      "info" : "IfStatement[29909-30019]:IfStatement[30022-30132]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29933-30019]:Block[30046-30132]"
    }, {
      "left" : "b.append(\"this:\");",
      "right" : "b.append(\"this:\");",
      "info" : "ExpressionStatement[29941-29959]:ExpressionStatement[30054-30072]"
    }, {
      "left" : "b.append(getDebugHashCodeStringOf(typeOfThis));",
      "right" : "b.append(getDebugHashCodeStringOf(typeOfThis));",
      "info" : "ExpressionStatement[29966-30013]:ExpressionStatement[30079-30126]"
    }, {
      "left" : "if (paramNum > 0)",
      "right" : "if (paramNum > 0)",
      "info" : "IfStatement[30024-30383]:IfStatement[30137-30496]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30042-30383]:Block[30155-30496]"
    }, {
      "left" : "if (hasKnownTypeOfThis)",
      "right" : "if (hasKnownTypeOfThis)",
      "info" : "IfStatement[30050-30107]:IfStatement[30163-30220]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30074-30107]:Block[30187-30220]"
    }, {
      "left" : "b.append(\", \");",
      "right" : "b.append(\", \");",
      "info" : "ExpressionStatement[30084-30099]:ExpressionStatement[30197-30212]"
    }, {
      "left" : "Node p = call.parameters.getFirstChild();",
      "right" : "Node p = call.parameters.getFirstChild();",
      "info" : "VariableDeclarationStatement[30114-30155]:VariableDeclarationStatement[30227-30268]"
    }, {
      "left" : "b.append(getDebugHashCodeStringOf(p.getJSType()));",
      "right" : "b.append(getDebugHashCodeStringOf(p.getJSType()));",
      "info" : "ExpressionStatement[30162-30212]:ExpressionStatement[30275-30325]"
    }, {
      "left" : "p = p.getNext();",
      "right" : "p = p.getNext();",
      "info" : "ExpressionStatement[30219-30235]:ExpressionStatement[30332-30348]"
    }, {
      "left" : "while (p != null)",
      "right" : "while (p != null)",
      "info" : "WhileStatement[30242-30377]:WhileStatement[30355-30490]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30260-30377]:Block[30373-30490]"
    }, {
      "left" : "b.append(\", \");",
      "right" : "b.append(\", \");",
      "info" : "ExpressionStatement[30270-30285]:ExpressionStatement[30383-30398]"
    }, {
      "left" : "b.append(getDebugHashCodeStringOf(p.getJSType()));",
      "right" : "b.append(getDebugHashCodeStringOf(p.getJSType()));",
      "info" : "ExpressionStatement[30294-30344]:ExpressionStatement[30407-30457]"
    }, {
      "left" : "p = p.getNext();",
      "right" : "p = p.getNext();",
      "info" : "ExpressionStatement[30353-30369]:ExpressionStatement[30466-30482]"
    }, {
      "left" : "b.append(\")\");",
      "right" : "b.append(\")\");",
      "info" : "ExpressionStatement[30388-30402]:ExpressionStatement[30501-30515]"
    }, {
      "left" : "b.append(\": \");",
      "right" : "b.append(\": \");",
      "info" : "ExpressionStatement[30407-30422]:ExpressionStatement[30520-30535]"
    }, {
      "left" : "b.append(getDebugHashCodeStringOf(call.returnType));",
      "right" : "b.append(getDebugHashCodeStringOf(call.returnType));",
      "info" : "ExpressionStatement[30427-30479]:ExpressionStatement[30540-30592]"
    }, {
      "left" : "return b.toString();",
      "right" : "return b.toString();",
      "info" : "ReturnStatement[30484-30504]:ReturnStatement[30597-30617]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[30512-30519]:Modifier[30625-30632]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[30520-30526]:SimpleType[30633-30639]"
    }, {
      "left" : "getDebugHashCodeStringOf",
      "right" : "getDebugHashCodeStringOf",
      "info" : "SimpleName[30527-30551]:SimpleName[30640-30664]"
    }, {
      "left" : "JSType type",
      "right" : "JSType type",
      "info" : "SingleVariableDeclaration[30552-30563]:SingleVariableDeclaration[30665-30676]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30565-30675]:Block[30678-30788]"
    }, {
      "left" : "if (type == this)",
      "right" : "if (type == this)",
      "info" : "IfStatement[30571-30671]:IfStatement[30684-30784]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30589-30615]:Block[30702-30728]"
    }, {
      "left" : "return \"me\";",
      "right" : "return \"me\";",
      "info" : "ReturnStatement[30597-30609]:ReturnStatement[30710-30722]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30621-30671]:Block[30734-30784]"
    }, {
      "left" : "return type.toDebugHashCodeString();",
      "right" : "return type.toDebugHashCodeString();",
      "info" : "ReturnStatement[30629-30665]:ReturnStatement[30742-30778]"
    } ]
  },
  "interFileMappings" : { }
}