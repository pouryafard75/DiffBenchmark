{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "Parser",
      "right" : "Parser",
      "info" : "TypeDeclaration[116-9820]:TypeDeclaration[116-9854]"
    }, {
      "left" : "private static final String SQ = \"'\";",
      "right" : "private static final String SQ = \"'\";",
      "info" : "FieldDeclaration[326-363]:FieldDeclaration[326-363]"
    }, {
      "left" : "private static final String DQ = \"\\\"\";",
      "right" : "private static final String DQ = \"\\\"\";",
      "info" : "FieldDeclaration[368-406]:FieldDeclaration[368-406]"
    }, {
      "left" : "private static final Tag htmlTag = Tag.valueOf(\"html\");",
      "right" : "private static final Tag htmlTag = Tag.valueOf(\"html\");",
      "info" : "FieldDeclaration[412-467]:FieldDeclaration[412-467]"
    }, {
      "left" : "private static final Tag headTag = Tag.valueOf(\"head\");",
      "right" : "private static final Tag headTag = Tag.valueOf(\"head\");",
      "info" : "FieldDeclaration[472-527]:FieldDeclaration[472-527]"
    }, {
      "left" : "private static final Tag bodyTag = Tag.valueOf(\"body\");",
      "right" : "private static final Tag bodyTag = Tag.valueOf(\"body\");",
      "info" : "FieldDeclaration[532-587]:FieldDeclaration[532-587]"
    }, {
      "left" : "private static final Tag titleTag = Tag.valueOf(\"title\");",
      "right" : "private static final Tag titleTag = Tag.valueOf(\"title\");",
      "info" : "FieldDeclaration[592-649]:FieldDeclaration[592-649]"
    }, {
      "left" : "private static final Tag textareaTag = Tag.valueOf(\"textarea\");",
      "right" : "private static final Tag textareaTag = Tag.valueOf(\"textarea\");",
      "info" : "FieldDeclaration[654-717]:FieldDeclaration[654-717]"
    }, {
      "left" : "private final LinkedList<Element> stack;",
      "right" : "private final LinkedList<Element> stack;",
      "info" : "FieldDeclaration[723-763]:FieldDeclaration[723-763]"
    }, {
      "left" : "private final TokenQueue tq;",
      "right" : "private final TokenQueue tq;",
      "info" : "FieldDeclaration[768-796]:FieldDeclaration[768-796]"
    }, {
      "left" : "private final Document doc;",
      "right" : "private final Document doc;",
      "info" : "FieldDeclaration[801-828]:FieldDeclaration[801-828]"
    }, {
      "left" : "private String baseUri;",
      "right" : "private String baseUri;",
      "info" : "FieldDeclaration[833-856]:FieldDeclaration[833-856]"
    }, {
      "left" : "private Parser(String html, String baseUri, boolean isBodyFragment)",
      "right" : "private Parser(String html, String baseUri, boolean isBodyFragment)",
      "info" : "MethodDeclaration[862-1326]:MethodDeclaration[862-1326]"
    }, {
      "left" : "public static Document parse(String html, String baseUri)",
      "right" : "public static Document parse(String html, String baseUri)",
      "info" : "MethodDeclaration[1332-1697]:MethodDeclaration[1332-1697]"
    }, {
      "left" : "public static Document parseBodyFragment(String bodyHtml, String baseUri)",
      "right" : "public static Document parseBodyFragment(String bodyHtml, String baseUri)",
      "info" : "MethodDeclaration[1703-2165]:MethodDeclaration[1703-2165]"
    }, {
      "left" : "private Document parse()",
      "right" : "private Document parse()",
      "info" : "MethodDeclaration[2171-2739]:MethodDeclaration[2171-2739]"
    }, {
      "left" : "private void parseComment()",
      "right" : "private void parseComment()",
      "info" : "MethodDeclaration[2745-3043]:MethodDeclaration[2745-3043]"
    }, {
      "left" : "private void parseXmlDecl()",
      "right" : "private void parseXmlDecl()",
      "info" : "MethodDeclaration[3049-3398]:MethodDeclaration[3049-3398]"
    }, {
      "left" : "private void parseEndTag()",
      "right" : "private void parseEndTag()",
      "info" : "MethodDeclaration[3404-3658]:MethodDeclaration[3404-3658]"
    }, {
      "left" : "private void parseStartTag()",
      "right" : "private void parseStartTag()",
      "info" : "MethodDeclaration[3664-5657]:MethodDeclaration[3664-5691]"
    }, {
      "left" : "private Attribute parseAttribute()",
      "right" : "private Attribute parseAttribute()",
      "info" : "MethodDeclaration[5663-6742]:MethodDeclaration[5697-6776]"
    }, {
      "left" : "private void parseTextNode()",
      "right" : "private void parseTextNode()",
      "info" : "MethodDeclaration[6748-6934]:MethodDeclaration[6782-6968]"
    }, {
      "left" : "private void parseCdata()",
      "right" : "private void parseCdata()",
      "info" : "MethodDeclaration[6940-7179]:MethodDeclaration[6974-7213]"
    }, {
      "left" : "private Element addChildToParent(Element child, boolean isEmptyElement)",
      "right" : "private Element addChildToParent(Element child, boolean isEmptyElement)",
      "info" : "MethodDeclaration[7185-8273]:MethodDeclaration[7219-8307]"
    }, {
      "left" : "private boolean stackHasValidParent(Tag childTag)",
      "right" : "private boolean stackHasValidParent(Tag childTag)",
      "info" : "MethodDeclaration[8279-8714]:MethodDeclaration[8313-8748]"
    }, {
      "left" : "private Element popStackToSuitableContainer(Tag tag)",
      "right" : "private Element popStackToSuitableContainer(Tag tag)",
      "info" : "MethodDeclaration[8720-8976]:MethodDeclaration[8754-9010]"
    }, {
      "left" : "private Element popStackToClose(Tag tag)",
      "right" : "private Element popStackToClose(Tag tag)",
      "info" : "MethodDeclaration[8982-9750]:MethodDeclaration[9016-9784]"
    }, {
      "left" : "private Element last()",
      "right" : "private Element last()",
      "info" : "MethodDeclaration[9756-9818]:MethodDeclaration[9790-9852]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[930-1326]:Block[930-1326]"
    }, {
      "left" : "Validate.notNull(html);",
      "right" : "Validate.notNull(html);",
      "info" : "ExpressionStatement[940-963]:ExpressionStatement[940-963]"
    }, {
      "left" : "Validate.notNull(baseUri);",
      "right" : "Validate.notNull(baseUri);",
      "info" : "ExpressionStatement[972-998]:ExpressionStatement[972-998]"
    }, {
      "left" : "stack = new LinkedList<Element>();",
      "right" : "stack = new LinkedList<Element>();",
      "info" : "ExpressionStatement[1008-1042]:ExpressionStatement[1008-1042]"
    }, {
      "left" : "tq = new TokenQueue(html);",
      "right" : "tq = new TokenQueue(html);",
      "info" : "ExpressionStatement[1051-1077]:ExpressionStatement[1051-1077]"
    }, {
      "left" : "this.baseUri = baseUri;",
      "right" : "this.baseUri = baseUri;",
      "info" : "ExpressionStatement[1086-1109]:ExpressionStatement[1086-1109]"
    }, {
      "left" : "if (isBodyFragment)",
      "right" : "if (isBodyFragment)",
      "info" : "IfStatement[1119-1320]:IfStatement[1119-1320]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1139-1234]:Block[1139-1234]"
    }, {
      "left" : "doc = Document.createShell(baseUri);",
      "right" : "doc = Document.createShell(baseUri);",
      "info" : "ExpressionStatement[1153-1189]:ExpressionStatement[1153-1189]"
    }, {
      "left" : "stack.add(doc.body());",
      "right" : "stack.add(doc.body());",
      "info" : "ExpressionStatement[1202-1224]:ExpressionStatement[1202-1224]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1240-1320]:Block[1240-1320]"
    }, {
      "left" : "doc = new Document(baseUri);",
      "right" : "doc = new Document(baseUri);",
      "info" : "ExpressionStatement[1254-1282]:ExpressionStatement[1254-1282]"
    }, {
      "left" : "stack.add(doc);",
      "right" : "stack.add(doc);",
      "info" : "ExpressionStatement[1295-1310]:ExpressionStatement[1295-1310]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1601-1697]:Block[1601-1697]"
    }, {
      "left" : "Parser parser = new Parser(html, baseUri, false);",
      "right" : "Parser parser = new Parser(html, baseUri, false);",
      "info" : "VariableDeclarationStatement[1611-1660]:VariableDeclarationStatement[1611-1660]"
    }, {
      "left" : "return parser.parse();",
      "right" : "return parser.parse();",
      "info" : "ReturnStatement[1669-1691]:ReturnStatement[1669-1691]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2066-2165]:Block[2066-2165]"
    }, {
      "left" : "Parser parser = new Parser(bodyHtml, baseUri, true);",
      "right" : "Parser parser = new Parser(bodyHtml, baseUri, true);",
      "info" : "VariableDeclarationStatement[2076-2128]:VariableDeclarationStatement[2076-2128]"
    }, {
      "left" : "return parser.parse();",
      "right" : "return parser.parse();",
      "info" : "ReturnStatement[2137-2159]:ReturnStatement[2137-2159]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2196-2739]:Block[2196-2739]"
    }, {
      "left" : "while (!tq.isEmpty())",
      "right" : "while (!tq.isEmpty())",
      "info" : "WhileStatement[2206-2701]:WhileStatement[2206-2701]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2228-2701]:Block[2228-2701]"
    }, {
      "left" : "if (tq.matches(\"<!--\"))",
      "right" : "if (tq.matches(\"<!--\"))",
      "info" : "IfStatement[2242-2691]:IfStatement[2242-2691]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2266-2313]:Block[2266-2313]"
    }, {
      "left" : "parseComment();",
      "right" : "parseComment();",
      "info" : "ExpressionStatement[2284-2299]:ExpressionStatement[2284-2299]"
    }, {
      "left" : "if (tq.matches(\"<![CDATA[\"))",
      "right" : "if (tq.matches(\"<![CDATA[\"))",
      "info" : "IfStatement[2319-2691]:IfStatement[2319-2691]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2348-2393]:Block[2348-2393]"
    }, {
      "left" : "parseCdata();",
      "right" : "parseCdata();",
      "info" : "ExpressionStatement[2366-2379]:ExpressionStatement[2366-2379]"
    }, {
      "left" : "if (tq.matches(\"<?\") || tq.matches(\"<!\"))",
      "right" : "if (tq.matches(\"<?\") || tq.matches(\"<!\"))",
      "info" : "IfStatement[2399-2691]:IfStatement[2399-2691]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2441-2488]:Block[2441-2488]"
    }, {
      "left" : "parseXmlDecl();",
      "right" : "parseXmlDecl();",
      "info" : "ExpressionStatement[2459-2474]:ExpressionStatement[2459-2474]"
    }, {
      "left" : "if (tq.matches(\"</\"))",
      "right" : "if (tq.matches(\"</\"))",
      "info" : "IfStatement[2494-2691]:IfStatement[2494-2691]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2516-2562]:Block[2516-2562]"
    }, {
      "left" : "parseEndTag();",
      "right" : "parseEndTag();",
      "info" : "ExpressionStatement[2534-2548]:ExpressionStatement[2534-2548]"
    }, {
      "left" : "if (tq.matches(\"<\"))",
      "right" : "if (tq.matches(\"<\"))",
      "info" : "IfStatement[2568-2691]:IfStatement[2568-2691]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2589-2637]:Block[2589-2637]"
    }, {
      "left" : "parseStartTag();",
      "right" : "parseStartTag();",
      "info" : "ExpressionStatement[2607-2623]:ExpressionStatement[2607-2623]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2643-2691]:Block[2643-2691]"
    }, {
      "left" : "parseTextNode();",
      "right" : "parseTextNode();",
      "info" : "ExpressionStatement[2661-2677]:ExpressionStatement[2661-2677]"
    }, {
      "left" : "return doc.normalise();",
      "right" : "return doc.normalise();",
      "info" : "ReturnStatement[2710-2733]:ReturnStatement[2710-2733]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2773-3043]:Block[2773-3043]"
    }, {
      "left" : "tq.consume(\"<!--\");",
      "right" : "tq.consume(\"<!--\");",
      "info" : "ExpressionStatement[2783-2802]:ExpressionStatement[2783-2802]"
    }, {
      "left" : "String data = tq.chompTo(\"->\");",
      "right" : "String data = tq.chompTo(\"->\");",
      "info" : "VariableDeclarationStatement[2811-2842]:VariableDeclarationStatement[2811-2842]"
    }, {
      "left" : "if (data.endsWith(\"-\"))",
      "right" : "if (data.endsWith(\"-\"))",
      "info" : "IfStatement[2852-2946]:IfStatement[2852-2946]"
    }, {
      "left" : "data = data.substring(0, data.length()-1);",
      "right" : "data = data.substring(0, data.length()-1);",
      "info" : "ExpressionStatement[2904-2946]:ExpressionStatement[2904-2946]"
    }, {
      "left" : "Comment comment = new Comment(data, baseUri);",
      "right" : "Comment comment = new Comment(data, baseUri);",
      "info" : "VariableDeclarationStatement[2955-3000]:VariableDeclarationStatement[2955-3000]"
    }, {
      "left" : "last().appendChild(comment);",
      "right" : "last().appendChild(comment);",
      "info" : "ExpressionStatement[3009-3037]:ExpressionStatement[3009-3037]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3077-3398]:Block[3077-3398]"
    }, {
      "left" : "tq.consume(\"<\");",
      "right" : "tq.consume(\"<\");",
      "info" : "ExpressionStatement[3087-3103]:ExpressionStatement[3087-3103]"
    }, {
      "left" : "Character firstChar = tq.consume();",
      "right" : "Character firstChar = tq.consume();",
      "info" : "VariableDeclarationStatement[3112-3147]:VariableDeclarationStatement[3112-3147]"
    }, {
      "left" : "boolean procInstr = firstChar.toString().equals(\"!\");",
      "right" : "boolean procInstr = firstChar.toString().equals(\"!\");",
      "info" : "VariableDeclarationStatement[3189-3242]:VariableDeclarationStatement[3189-3242]"
    }, {
      "left" : "String data = tq.chompTo(\">\");",
      "right" : "String data = tq.chompTo(\">\");",
      "info" : "VariableDeclarationStatement[3251-3281]:VariableDeclarationStatement[3251-3281]"
    }, {
      "left" : "XmlDeclaration decl = new XmlDeclaration(data, baseUri, procInstr);",
      "right" : "XmlDeclaration decl = new XmlDeclaration(data, baseUri, procInstr);",
      "info" : "VariableDeclarationStatement[3291-3358]:VariableDeclarationStatement[3291-3358]"
    }, {
      "left" : "last().appendChild(decl);",
      "right" : "last().appendChild(decl);",
      "info" : "ExpressionStatement[3367-3392]:ExpressionStatement[3367-3392]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3431-3658]:Block[3431-3658]"
    }, {
      "left" : "tq.consume(\"</\");",
      "right" : "tq.consume(\"</\");",
      "info" : "ExpressionStatement[3441-3458]:ExpressionStatement[3441-3458]"
    }, {
      "left" : "String tagName = tq.consumeWord();",
      "right" : "String tagName = tq.consumeWord();",
      "info" : "VariableDeclarationStatement[3467-3501]:VariableDeclarationStatement[3467-3501]"
    }, {
      "left" : "tq.chompTo(\">\");",
      "right" : "tq.chompTo(\">\");",
      "info" : "ExpressionStatement[3510-3526]:ExpressionStatement[3510-3526]"
    }, {
      "left" : "if (tagName.length() != 0)",
      "right" : "if (tagName.length() != 0)",
      "info" : "IfStatement[3536-3652]:IfStatement[3536-3652]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3563-3652]:Block[3563-3652]"
    }, {
      "left" : "Tag tag = Tag.valueOf(tagName);",
      "right" : "Tag tag = Tag.valueOf(tagName);",
      "info" : "VariableDeclarationStatement[3577-3608]:VariableDeclarationStatement[3577-3608]"
    }, {
      "left" : "popStackToClose(tag);",
      "right" : "popStackToClose(tag);",
      "info" : "ExpressionStatement[3621-3642]:ExpressionStatement[3621-3642]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3693-5657]:Block[3693-5691]"
    }, {
      "left" : "tq.consume(\"<\");",
      "right" : "tq.consume(\"<\");",
      "info" : "ExpressionStatement[3703-3719]:ExpressionStatement[3703-3719]"
    }, {
      "left" : "String tagName = tq.consumeWord();",
      "right" : "String tagName = tq.consumeWord();",
      "info" : "VariableDeclarationStatement[3728-3762]:VariableDeclarationStatement[3728-3762]"
    }, {
      "left" : "if (tagName.length() == 0)",
      "right" : "if (tagName.length() == 0)",
      "info" : "IfStatement[3772-3975]:IfStatement[3772-3975]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3799-3975]:Block[3799-3975]"
    }, {
      "left" : "tq.addFirst(\"&lt;\");",
      "right" : "tq.addFirst(\"&lt;\");",
      "info" : "ExpressionStatement[3896-3916]:ExpressionStatement[3896-3916]"
    }, {
      "left" : "parseTextNode();",
      "right" : "parseTextNode();",
      "info" : "ExpressionStatement[3929-3945]:ExpressionStatement[3929-3945]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[3958-3965]:ReturnStatement[3958-3965]"
    }, {
      "left" : "Attributes attributes = new Attributes();",
      "right" : "Attributes attributes = new Attributes();",
      "info" : "VariableDeclarationStatement[3985-4026]:VariableDeclarationStatement[3985-4026]"
    }, {
      "left" : "while (!tq.matchesAny(\"<\", \"/>\", \">\") && !tq.isEmpty())",
      "right" : "while (!tq.matchesAny(\"<\", \"/>\", \">\") && !tq.isEmpty())",
      "info" : "WhileStatement[4035-4232]:WhileStatement[4035-4232]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4091-4232]:Block[4091-4232]"
    }, {
      "left" : "Attribute attribute = parseAttribute();",
      "right" : "Attribute attribute = parseAttribute();",
      "info" : "VariableDeclarationStatement[4105-4144]:VariableDeclarationStatement[4105-4144]"
    }, {
      "left" : "if (attribute != null)",
      "right" : "if (attribute != null)",
      "info" : "IfStatement[4157-4222]:IfStatement[4157-4222]"
    }, {
      "left" : "attributes.put(attribute);",
      "right" : "attributes.put(attribute);",
      "info" : "ExpressionStatement[4196-4222]:ExpressionStatement[4196-4222]"
    }, {
      "left" : "Tag tag = Tag.valueOf(tagName);",
      "right" : "Tag tag = Tag.valueOf(tagName);",
      "info" : "VariableDeclarationStatement[4242-4273]:VariableDeclarationStatement[4242-4273]"
    }, {
      "left" : "Element child = new Element(tag, baseUri, attributes);",
      "right" : "Element child = new Element(tag, baseUri, attributes);",
      "info" : "VariableDeclarationStatement[4282-4336]:VariableDeclarationStatement[4282-4336]"
    }, {
      "left" : "boolean isEmptyElement = tag.isEmpty();",
      "right" : "boolean isEmptyElement = tag.isEmpty();",
      "info" : "VariableDeclarationStatement[4346-4385]:VariableDeclarationStatement[4346-4385]"
    }, {
      "left" : "if (tq.matchChomp(\"/>\"))",
      "right" : "if (tq.matchChomp(\"/>\"))",
      "info" : "IfStatement[4461-4611]:IfStatement[4461-4611]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4486-4562]:Block[4486-4562]"
    }, {
      "left" : "isEmptyElement = true;",
      "right" : "isEmptyElement = true;",
      "info" : "ExpressionStatement[4530-4552]:ExpressionStatement[4530-4552]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4568-4611]:Block[4568-4611]"
    }, {
      "left" : "tq.matchChomp(\">\");",
      "right" : "tq.matchChomp(\">\");",
      "info" : "ExpressionStatement[4582-4601]:ExpressionStatement[4582-4601]"
    }, {
      "left" : "addChildToParent(child, isEmptyElement);",
      "right" : "addChildToParent(child, isEmptyElement);",
      "info" : "ExpressionStatement[4620-4660]:ExpressionStatement[4620-4660]"
    }, {
      "left" : "if (tag.isData())",
      "right" : "if (tag.isData())",
      "info" : "IfStatement[4762-5286]:IfStatement[4762-5320]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4780-5286]:Block[4780-5320]"
    }, {
      "left" : "String data = tq.chompTo(\"</\" + tagName);",
      "right" : "String data = tq.chompTo(\"</\" + tagName);",
      "info" : "VariableDeclarationStatement[4794-4835]:VariableDeclarationStatement[4794-4835]"
    }, {
      "left" : "tq.chompTo(\">\");",
      "right" : "popStackToClose(tag);",
      "info" : "ExpressionStatement[4848-4864]:ExpressionStatement[4877-4898]"
    }, {
      "left" : "Node dataNode;",
      "right" : "Node dataNode;",
      "info" : "VariableDeclarationStatement[4890-4904]:VariableDeclarationStatement[4924-4938]"
    }, {
      "left" : "if (tag.equals(titleTag) || tag.equals(textareaTag))",
      "right" : "if (tag.equals(titleTag) || tag.equals(textareaTag))",
      "info" : "IfStatement[4917-5186]:IfStatement[4951-5220]"
    }, {
      "left" : "dataNode = TextNode.createFromEncoded(data, baseUri);",
      "right" : "dataNode = TextNode.createFromEncoded(data, baseUri);",
      "info" : "ExpressionStatement[5060-5113]:ExpressionStatement[5094-5147]"
    }, {
      "left" : "dataNode = new DataNode(data, baseUri);",
      "right" : "dataNode = new DataNode(data, baseUri);",
      "info" : "ExpressionStatement[5147-5186]:ExpressionStatement[5181-5220]"
    }, {
      "left" : "child.appendChild(dataNode);",
      "right" : "child.appendChild(dataNode);",
      "info" : "ExpressionStatement[5245-5273]:ExpressionStatement[5279-5307]"
    }, {
      "left" : "if (child.tagName().equals(\"base\"))",
      "right" : "if (child.tagName().equals(\"base\"))",
      "info" : "IfStatement[5340-5651]:IfStatement[5374-5685]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5376-5651]:Block[5410-5685]"
    }, {
      "left" : "String href = child.absUrl(\"href\");",
      "right" : "String href = child.absUrl(\"href\");",
      "info" : "VariableDeclarationStatement[5390-5425]:VariableDeclarationStatement[5424-5459]"
    }, {
      "left" : "if (href.length() != 0)",
      "right" : "if (href.length() != 0)",
      "info" : "IfStatement[5438-5641]:IfStatement[5472-5675]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5462-5641]:Block[5496-5675]"
    }, {
      "left" : "baseUri = href;",
      "right" : "baseUri = href;",
      "info" : "ExpressionStatement[5508-5523]:ExpressionStatement[5542-5557]"
    }, {
      "left" : "doc.setBaseUri(href);",
      "right" : "doc.setBaseUri(href);",
      "info" : "ExpressionStatement[5540-5561]:ExpressionStatement[5574-5595]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5698-6742]:Block[5732-6776]"
    }, {
      "left" : "tq.consumeWhitespace();",
      "right" : "tq.consumeWhitespace();",
      "info" : "ExpressionStatement[5708-5731]:ExpressionStatement[5742-5765]"
    }, {
      "left" : "String key = tq.consumeAttributeKey();",
      "right" : "String key = tq.consumeAttributeKey();",
      "info" : "VariableDeclarationStatement[5740-5778]:VariableDeclarationStatement[5774-5812]"
    }, {
      "left" : "String value = \"\";",
      "right" : "String value = \"\";",
      "info" : "VariableDeclarationStatement[5787-5805]:VariableDeclarationStatement[5821-5839]"
    }, {
      "left" : "tq.consumeWhitespace();",
      "right" : "tq.consumeWhitespace();",
      "info" : "ExpressionStatement[5814-5837]:ExpressionStatement[5848-5871]"
    }, {
      "left" : "if (tq.matchChomp(\"=\"))",
      "right" : "if (tq.matchChomp(\"=\"))",
      "info" : "IfStatement[5846-6522]:IfStatement[5880-6556]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5870-6522]:Block[5904-6556]"
    }, {
      "left" : "tq.consumeWhitespace();",
      "right" : "tq.consumeWhitespace();",
      "info" : "ExpressionStatement[5884-5907]:ExpressionStatement[5918-5941]"
    }, {
      "left" : "if (tq.matchChomp(SQ))",
      "right" : "if (tq.matchChomp(SQ))",
      "info" : "IfStatement[5921-6476]:IfStatement[5955-6510]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5944-5999]:Block[5978-6033]"
    }, {
      "left" : "value = tq.chompTo(SQ);",
      "right" : "value = tq.chompTo(SQ);",
      "info" : "ExpressionStatement[5962-5985]:ExpressionStatement[5996-6019]"
    }, {
      "left" : "if (tq.matchChomp(DQ))",
      "right" : "if (tq.matchChomp(DQ))",
      "info" : "IfStatement[6005-6476]:IfStatement[6039-6510]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6028-6083]:Block[6062-6117]"
    }, {
      "left" : "value = tq.chompTo(DQ);",
      "right" : "value = tq.chompTo(DQ);",
      "info" : "ExpressionStatement[6046-6069]:ExpressionStatement[6080-6103]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6089-6476]:Block[6123-6510]"
    }, {
      "left" : "StringBuilder valueAccum = new StringBuilder();",
      "right" : "StringBuilder valueAccum = new StringBuilder();",
      "info" : "VariableDeclarationStatement[6107-6154]:VariableDeclarationStatement[6141-6188]"
    }, {
      "left" : "while (!tq.matchesAny(\"<\", \"/>\", \">\") && !tq.matchesWhitespace() && !tq.isEmpty())",
      "right" : "while (!tq.matchesAny(\"<\", \"/>\", \">\") && !tq.matchesWhitespace() && !tq.isEmpty())",
      "info" : "WhileStatement[6260-6415]:WhileStatement[6294-6449]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6343-6415]:Block[6377-6449]"
    }, {
      "left" : "valueAccum.append(tq.consume());",
      "right" : "valueAccum.append(tq.consume());",
      "info" : "ExpressionStatement[6365-6397]:ExpressionStatement[6399-6431]"
    }, {
      "left" : "value = valueAccum.toString();",
      "right" : "value = valueAccum.toString();",
      "info" : "ExpressionStatement[6432-6462]:ExpressionStatement[6466-6496]"
    }, {
      "left" : "tq.consumeWhitespace();",
      "right" : "tq.consumeWhitespace();",
      "info" : "ExpressionStatement[6489-6512]:ExpressionStatement[6523-6546]"
    }, {
      "left" : "if (key.length() != 0)",
      "right" : "if (key.length() != 0)",
      "info" : "IfStatement[6531-6736]:IfStatement[6565-6770]"
    }, {
      "left" : "return Attribute.createFromEncoded(key, value);",
      "right" : "return Attribute.createFromEncoded(key, value);",
      "info" : "ReturnStatement[6566-6613]:ReturnStatement[6600-6647]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6627-6736]:Block[6661-6770]"
    }, {
      "left" : "tq.consume();",
      "right" : "tq.consume();",
      "info" : "ExpressionStatement[6641-6654]:ExpressionStatement[6675-6688]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[6714-6726]:ReturnStatement[6748-6760]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6777-6934]:Block[6811-6968]"
    }, {
      "left" : "String text = tq.consumeTo(\"<\");",
      "right" : "String text = tq.consumeTo(\"<\");",
      "info" : "VariableDeclarationStatement[6787-6819]:VariableDeclarationStatement[6821-6853]"
    }, {
      "left" : "TextNode textNode = TextNode.createFromEncoded(text, baseUri);",
      "right" : "TextNode textNode = TextNode.createFromEncoded(text, baseUri);",
      "info" : "VariableDeclarationStatement[6828-6890]:VariableDeclarationStatement[6862-6924]"
    }, {
      "left" : "last().appendChild(textNode);",
      "right" : "last().appendChild(textNode);",
      "info" : "ExpressionStatement[6899-6928]:ExpressionStatement[6933-6962]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6966-7179]:Block[7000-7213]"
    }, {
      "left" : "tq.consume(\"<![CDATA[\");",
      "right" : "tq.consume(\"<![CDATA[\");",
      "info" : "ExpressionStatement[6976-7000]:ExpressionStatement[7010-7034]"
    }, {
      "left" : "String rawText = tq.chompTo(\"]]>\");",
      "right" : "String rawText = tq.chompTo(\"]]>\");",
      "info" : "VariableDeclarationStatement[7009-7044]:VariableDeclarationStatement[7043-7078]"
    }, {
      "left" : "TextNode textNode = new TextNode(rawText, baseUri);",
      "right" : "TextNode textNode = new TextNode(rawText, baseUri);",
      "info" : "VariableDeclarationStatement[7053-7104]:VariableDeclarationStatement[7087-7138]"
    }, {
      "left" : "last().appendChild(textNode);",
      "right" : "last().appendChild(textNode);",
      "info" : "ExpressionStatement[7144-7173]:ExpressionStatement[7178-7207]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7257-8273]:Block[7291-8307]"
    }, {
      "left" : "Element parent = popStackToSuitableContainer(child.tag());",
      "right" : "Element parent = popStackToSuitableContainer(child.tag());",
      "info" : "VariableDeclarationStatement[7267-7325]:VariableDeclarationStatement[7301-7359]"
    }, {
      "left" : "Tag childTag = child.tag();",
      "right" : "Tag childTag = child.tag();",
      "info" : "VariableDeclarationStatement[7334-7361]:VariableDeclarationStatement[7368-7395]"
    }, {
      "left" : "boolean validAncestor = stackHasValidParent(childTag);",
      "right" : "boolean validAncestor = stackHasValidParent(childTag);",
      "info" : "VariableDeclarationStatement[7370-7424]:VariableDeclarationStatement[7404-7458]"
    }, {
      "left" : "if (!validAncestor)",
      "right" : "if (!validAncestor)",
      "info" : "IfStatement[7434-8144]:IfStatement[7468-8178]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7454-8144]:Block[7488-8178]"
    }, {
      "left" : "Tag parentTag = childTag.getImplicitParent();",
      "right" : "Tag parentTag = childTag.getImplicitParent();",
      "info" : "VariableDeclarationStatement[7524-7569]:VariableDeclarationStatement[7558-7603]"
    }, {
      "left" : "Element implicit = new Element(parentTag, baseUri);",
      "right" : "Element implicit = new Element(parentTag, baseUri);",
      "info" : "VariableDeclarationStatement[7582-7633]:VariableDeclarationStatement[7616-7667]"
    }, {
      "left" : "if (child.tag().equals(bodyTag))",
      "right" : "if (child.tag().equals(bodyTag))",
      "info" : "IfStatement[7723-7877]:IfStatement[7757-7911]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7756-7877]:Block[7790-7911]"
    }, {
      "left" : "Element head = new Element(headTag, baseUri);",
      "right" : "Element head = new Element(headTag, baseUri);",
      "info" : "VariableDeclarationStatement[7774-7819]:VariableDeclarationStatement[7808-7853]"
    }, {
      "left" : "implicit.appendChild(head);",
      "right" : "implicit.appendChild(head);",
      "info" : "ExpressionStatement[7836-7863]:ExpressionStatement[7870-7897]"
    }, {
      "left" : "implicit.appendChild(child);",
      "right" : "implicit.appendChild(child);",
      "info" : "ExpressionStatement[7890-7918]:ExpressionStatement[7924-7952]"
    }, {
      "left" : "Element root = addChildToParent(implicit, false);",
      "right" : "Element root = addChildToParent(implicit, false);",
      "info" : "VariableDeclarationStatement[7989-8038]:VariableDeclarationStatement[8023-8072]"
    }, {
      "left" : "if (!isEmptyElement)",
      "right" : "if (!isEmptyElement)",
      "info" : "IfStatement[8051-8109]:IfStatement[8085-8143]"
    }, {
      "left" : "stack.addLast(child);",
      "right" : "stack.addLast(child);",
      "info" : "ExpressionStatement[8088-8109]:ExpressionStatement[8122-8143]"
    }, {
      "left" : "return root;",
      "right" : "return root;",
      "info" : "ReturnStatement[8122-8134]:ReturnStatement[8156-8168]"
    }, {
      "left" : "parent.appendChild(child);",
      "right" : "parent.appendChild(child);",
      "info" : "ExpressionStatement[8154-8180]:ExpressionStatement[8188-8214]"
    }, {
      "left" : "if (!isEmptyElement)",
      "right" : "if (!isEmptyElement)",
      "info" : "IfStatement[8190-8244]:IfStatement[8224-8278]"
    }, {
      "left" : "stack.addLast(child);",
      "right" : "stack.addLast(child);",
      "info" : "ExpressionStatement[8223-8244]:ExpressionStatement[8257-8278]"
    }, {
      "left" : "return parent;",
      "right" : "return parent;",
      "info" : "ReturnStatement[8253-8267]:ReturnStatement[8287-8301]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8329-8714]:Block[8363-8748]"
    }, {
      "left" : "if (stack.size() == 1 && childTag.equals(htmlTag))",
      "right" : "if (stack.size() == 1 && childTag.equals(htmlTag))",
      "info" : "IfStatement[8339-8414]:IfStatement[8373-8448]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[8402-8414]:ReturnStatement[8436-8448]"
    }, {
      "left" : "for (int i = stack.size() -1; i >= 0; i--)",
      "right" : "for (int i = stack.size() -1; i >= 0; i--)",
      "info" : "ForStatement[8463-8686]:ForStatement[8497-8720]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8506-8686]:Block[8540-8720]"
    }, {
      "left" : "Element el = stack.get(i);",
      "right" : "Element el = stack.get(i);",
      "info" : "VariableDeclarationStatement[8520-8546]:VariableDeclarationStatement[8554-8580]"
    }, {
      "left" : "Tag parent2 = el.tag();",
      "right" : "Tag parent2 = el.tag();",
      "info" : "VariableDeclarationStatement[8559-8582]:VariableDeclarationStatement[8593-8616]"
    }, {
      "left" : "if (parent2.isValidParent(childTag))",
      "right" : "if (parent2.isValidParent(childTag))",
      "info" : "IfStatement[8595-8676]:IfStatement[8629-8710]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8632-8676]:Block[8666-8710]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[8650-8662]:ReturnStatement[8684-8696]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[8695-8708]:ReturnStatement[8729-8742]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8773-8976]:Block[8807-9010]"
    }, {
      "left" : "while (!stack.isEmpty())",
      "right" : "while (!stack.isEmpty())",
      "info" : "WhileStatement[8783-8949]:WhileStatement[8817-8983]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8808-8949]:Block[8842-8983]"
    }, {
      "left" : "if (last().tag().canContain(tag))",
      "right" : "if (last().tag().canContain(tag))",
      "info" : "IfStatement[8822-8939]:IfStatement[8856-8973]"
    }, {
      "left" : "return last();",
      "right" : "return last();",
      "info" : "ReturnStatement[8872-8886]:ReturnStatement[8906-8920]"
    }, {
      "left" : "stack.removeLast();",
      "right" : "stack.removeLast();",
      "info" : "ExpressionStatement[8920-8939]:ExpressionStatement[8954-8973]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[8958-8970]:ReturnStatement[8992-9004]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9023-9750]:Block[9057-9784]"
    }, {
      "left" : "int counter = 0;",
      "right" : "int counter = 0;",
      "info" : "VariableDeclarationStatement[9128-9144]:VariableDeclarationStatement[9162-9178]"
    }, {
      "left" : "Element elToClose = null;",
      "right" : "Element elToClose = null;",
      "info" : "VariableDeclarationStatement[9153-9178]:VariableDeclarationStatement[9187-9212]"
    }, {
      "left" : "for (int i = stack.size() -1; i > 0; i--)",
      "right" : "for (int i = stack.size() -1; i > 0; i--)",
      "info" : "ForStatement[9187-9577]:ForStatement[9221-9611]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9229-9577]:Block[9263-9611]"
    }, {
      "left" : "counter++;",
      "right" : "counter++;",
      "info" : "ExpressionStatement[9243-9253]:ExpressionStatement[9277-9287]"
    }, {
      "left" : "Element el = stack.get(i);",
      "right" : "Element el = stack.get(i);",
      "info" : "VariableDeclarationStatement[9266-9292]:VariableDeclarationStatement[9300-9326]"
    }, {
      "left" : "Tag elTag = el.tag();",
      "right" : "Tag elTag = el.tag();",
      "info" : "VariableDeclarationStatement[9305-9326]:VariableDeclarationStatement[9339-9360]"
    }, {
      "left" : "if (elTag.equals(bodyTag) || elTag.equals(htmlTag))",
      "right" : "if (elTag.equals(bodyTag) || elTag.equals(htmlTag))",
      "info" : "IfStatement[9339-9567]:IfStatement[9373-9601]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9391-9468]:Block[9425-9502]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[9448-9454]:BreakStatement[9482-9488]"
    }, {
      "left" : "if (elTag.equals(tag))",
      "right" : "if (elTag.equals(tag))",
      "info" : "IfStatement[9474-9567]:IfStatement[9508-9601]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9497-9567]:Block[9531-9601]"
    }, {
      "left" : "elToClose = el;",
      "right" : "elToClose = el;",
      "info" : "ExpressionStatement[9515-9530]:ExpressionStatement[9549-9564]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[9547-9553]:BreakStatement[9581-9587]"
    }, {
      "left" : "if (elToClose != null)",
      "right" : "if (elToClose != null)",
      "info" : "IfStatement[9586-9718]:IfStatement[9620-9752]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9609-9718]:Block[9643-9752]"
    }, {
      "left" : "for (int i = 0; i < counter; i++)",
      "right" : "for (int i = 0; i < counter; i++)",
      "info" : "ForStatement[9623-9708]:ForStatement[9657-9742]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9657-9708]:Block[9691-9742]"
    }, {
      "left" : "stack.removeLast();",
      "right" : "stack.removeLast();",
      "info" : "ExpressionStatement[9675-9694]:ExpressionStatement[9709-9728]"
    }, {
      "left" : "return elToClose;",
      "right" : "return elToClose;",
      "info" : "ReturnStatement[9727-9744]:ReturnStatement[9761-9778]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9779-9818]:Block[9813-9852]"
    }, {
      "left" : "return stack.getLast();",
      "right" : "return stack.getLast();",
      "info" : "ReturnStatement[9789-9812]:ReturnStatement[9823-9846]"
    } ]
  },
  "interFileMappings" : { }
}