{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "CpioArchiveInputStream",
      "right" : "CpioArchiveInputStream",
      "info" : "TypeDeclaration[1360-18674]:TypeDeclaration[1360-18735]"
    }, {
      "left" : "private boolean closed = false;",
      "right" : "private boolean closed = false;",
      "info" : "FieldDeclaration[2576-2607]:FieldDeclaration[2576-2607]"
    }, {
      "left" : "private CpioArchiveEntry entry;",
      "right" : "private CpioArchiveEntry entry;",
      "info" : "FieldDeclaration[2613-2644]:FieldDeclaration[2613-2644]"
    }, {
      "left" : "private long entryBytesRead = 0;",
      "right" : "private long entryBytesRead = 0;",
      "info" : "FieldDeclaration[2650-2682]:FieldDeclaration[2650-2682]"
    }, {
      "left" : "private boolean entryEOF = false;",
      "right" : "private boolean entryEOF = false;",
      "info" : "FieldDeclaration[2688-2721]:FieldDeclaration[2688-2721]"
    }, {
      "left" : "private final byte tmpbuf[] = new byte[4096];",
      "right" : "private final byte tmpbuf[] = new byte[4096];",
      "info" : "FieldDeclaration[2727-2772]:FieldDeclaration[2727-2772]"
    }, {
      "left" : "private long crc = 0;",
      "right" : "private long crc = 0;",
      "info" : "FieldDeclaration[2778-2799]:FieldDeclaration[2778-2799]"
    }, {
      "left" : "private final InputStream in;",
      "right" : "private final InputStream in;",
      "info" : "FieldDeclaration[2805-2834]:FieldDeclaration[2805-2834]"
    }, {
      "left" : "private final byte[] TWO_BYTES_BUF = new byte[2];",
      "right" : "private final byte[] TWO_BYTES_BUF = new byte[2];",
      "info" : "FieldDeclaration[2946-2995]:FieldDeclaration[2946-2995]"
    }, {
      "left" : "private final byte[] FOUR_BYTES_BUF = new byte[4];",
      "right" : "private final byte[] FOUR_BYTES_BUF = new byte[4];",
      "info" : "FieldDeclaration[3000-3050]:FieldDeclaration[3000-3050]"
    }, {
      "left" : "private final byte[] SIX_BYTES_BUF = new byte[6];",
      "right" : "private final byte[] SIX_BYTES_BUF = new byte[6];",
      "info" : "FieldDeclaration[3055-3104]:FieldDeclaration[3055-3104]"
    }, {
      "left" : "private final int blockSize;",
      "right" : "private final int blockSize;",
      "info" : "FieldDeclaration[3110-3138]:FieldDeclaration[3110-3138]"
    }, {
      "left" : "private final ZipEncoding zipEncoding;",
      "right" : "private final ZipEncoding zipEncoding;",
      "info" : "FieldDeclaration[3144-3251]:FieldDeclaration[3144-3251]"
    }, {
      "left" : "public CpioArchiveInputStream(final InputStream in)",
      "right" : "public CpioArchiveInputStream(final InputStream in)",
      "info" : "MethodDeclaration[3304-3640]:MethodDeclaration[3331-3667]"
    }, {
      "left" : "public CpioArchiveInputStream(final InputStream in, String encoding)",
      "right" : "public CpioArchiveInputStream(final InputStream in, String encoding)",
      "info" : "MethodDeclaration[3646-4101]:MethodDeclaration[3673-4128]"
    }, {
      "left" : "public CpioArchiveInputStream(final InputStream in, int blockSize)",
      "right" : "public CpioArchiveInputStream(final InputStream in, int blockSize)",
      "info" : "MethodDeclaration[4107-4544]:MethodDeclaration[4134-4571]"
    }, {
      "left" : "public CpioArchiveInputStream(final InputStream in, int blockSize, String encoding)",
      "right" : "public CpioArchiveInputStream(final InputStream in, int blockSize, String encoding)",
      "info" : "MethodDeclaration[4550-5175]:MethodDeclaration[4577-5236]"
    }, {
      "left" : "public int available() throws IOException",
      "right" : "public int available() throws IOException",
      "info" : "MethodDeclaration[5181-5816]:MethodDeclaration[5242-5877]"
    }, {
      "left" : "public void close() throws IOException",
      "right" : "public void close() throws IOException",
      "info" : "MethodDeclaration[5822-6112]:MethodDeclaration[5883-6173]"
    }, {
      "left" : "private void closeEntry() throws IOException",
      "right" : "private void closeEntry() throws IOException",
      "info" : "MethodDeclaration[6118-6645]:MethodDeclaration[6179-6706]"
    }, {
      "left" : "private void ensureOpen() throws IOException",
      "right" : "private void ensureOpen() throws IOException",
      "info" : "MethodDeclaration[6651-6957]:MethodDeclaration[6712-7018]"
    }, {
      "left" : "public CpioArchiveEntry getNextCPIOEntry() throws IOException",
      "right" : "public CpioArchiveEntry getNextCPIOEntry() throws IOException",
      "info" : "MethodDeclaration[6963-8851]:MethodDeclaration[7024-8912]"
    }, {
      "left" : "private void skip(int bytes) throws IOExceptio",
      "right" : "private void skip(int bytes) throws IOExceptio",
      "info" : "MethodDeclaration[8857-9040]:MethodDeclaration[8918-9101]"
    }, {
      "left" : "public int read(final byte[] b, final int off, final int len)\n            throws IOException",
      "right" : "public int read(final byte[] b, final int off, final int len)\n            throws IOException",
      "info" : "MethodDeclaration[9046-10922]:MethodDeclaration[9107-10983]"
    }, {
      "left" : "private final int readFully(final byte[] b, final int off, final int len)\n            throws IOException",
      "right" : "private final int readFully(final byte[] b, final int off, final int len)\n            throws IOException",
      "info" : "MethodDeclaration[10928-11215]:MethodDeclaration[10989-11276]"
    }, {
      "left" : "private long readBinaryLong(final int length, final boolean swapHalfWord)\n            throws IOException",
      "right" : "private long readBinaryLong(final int length, final boolean swapHalfWord)\n            throws IOException",
      "info" : "MethodDeclaration[11221-11470]:MethodDeclaration[11282-11531]"
    }, {
      "left" : "private long readAsciiLong(final int length, final int radix)\n            throws IOException",
      "right" : "private long readAsciiLong(final int length, final int radix)\n            throws IOException",
      "info" : "MethodDeclaration[11476-11749]:MethodDeclaration[11537-11810]"
    }, {
      "left" : "private CpioArchiveEntry readNewEntry(final boolean hasCrc)\n            throws IOException",
      "right" : "private CpioArchiveEntry readNewEntry(final boolean hasCrc)\n            throws IOException",
      "info" : "MethodDeclaration[11755-13115]:MethodDeclaration[11816-13176]"
    }, {
      "left" : "private CpioArchiveEntry readOldAsciiEntry() throws IOException",
      "right" : "private CpioArchiveEntry readOldAsciiEntry() throws IOException",
      "info" : "MethodDeclaration[13121-14119]:MethodDeclaration[13182-14180]"
    }, {
      "left" : "private CpioArchiveEntry readOldBinaryEntry(final boolean swapHalfWord)\n            throws IOException",
      "right" : "private CpioArchiveEntry readOldBinaryEntry(final boolean swapHalfWord)\n            throws IOException",
      "info" : "MethodDeclaration[14125-15317]:MethodDeclaration[14186-15378]"
    }, {
      "left" : "private String readCString(final int length) throws IOException",
      "right" : "private String readCString(final int length) throws IOException",
      "info" : "MethodDeclaration[15323-15625]:MethodDeclaration[15384-15686]"
    }, {
      "left" : "public long skip(final long n) throws IOException",
      "right" : "public long skip(final long n) throws IOException",
      "info" : "MethodDeclaration[15631-16627]:MethodDeclaration[15692-16688]"
    }, {
      "left" : "public ArchiveEntry getNextEntry() throws IOException",
      "right" : "public ArchiveEntry getNextEntry() throws IOException",
      "info" : "MethodDeclaration[16633-16743]:MethodDeclaration[16694-16804]"
    }, {
      "left" : "private void skipRemainderOfLastBlock() throws IOException",
      "right" : "private void skipRemainderOfLastBlock() throws IOException",
      "info" : "MethodDeclaration[16749-17280]:MethodDeclaration[16810-17341]"
    }, {
      "left" : "public static boolean matches(byte[] signature, int length)",
      "right" : "public static boolean matches(byte[] signature, int length)",
      "info" : "MethodDeclaration[17286-18672]:MethodDeclaration[17347-18733]"
    } ],
    "mappings" : [
 {
      "left" : "ArchiveInputStream",
      "right" : "ArchiveInputStream",
      "info" : "SimpleType[2517-2535]:SimpleType[2517-2535]"
    }, {
      "left" : "CpioConstants",
      "right" : "CpioConstants",
      "info" : "SimpleType[2555-2568]:SimpleType[2555-2568]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[3528-3534]:Modifier[3555-3561]"
    }, {
      "left" : "CpioArchiveInputStream",
      "right" : "CpioArchiveInputStream",
      "info" : "SimpleName[3535-3557]:SimpleName[3562-3584]"
    }, {
      "left" : "final InputStream in",
      "right" : "final InputStream in",
      "info" : "SingleVariableDeclaration[3558-3578]:SingleVariableDeclaration[3585-3605]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3580-3640]:Block[3607-3667]"
    }, {
      "left" : "this(in, BLOCK_SIZE, CharsetNames.US_ASCII);",
      "right" : "this(in, BLOCK_SIZE, CharsetNames.US_ASCII);",
      "info" : "ConstructorInvocation[3590-3634]:ConstructorInvocation[3617-3661]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[3985-3991]:Modifier[4012-4018]"
    }, {
      "left" : "CpioArchiveInputStream",
      "right" : "CpioArchiveInputStream",
      "info" : "SimpleName[3992-4014]:SimpleName[4019-4041]"
    }, {
      "left" : "final InputStream in",
      "right" : "final InputStream in",
      "info" : "SingleVariableDeclaration[4015-4035]:SingleVariableDeclaration[4042-4062]"
    }, {
      "left" : "String encoding",
      "right" : "String encoding",
      "info" : "SingleVariableDeclaration[4037-4052]:SingleVariableDeclaration[4064-4079]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4054-4101]:Block[4081-4128]"
    }, {
      "left" : "this(in, BLOCK_SIZE, encoding);",
      "right" : "this(in, BLOCK_SIZE, encoding);",
      "info" : "ConstructorInvocation[4064-4095]:ConstructorInvocation[4091-4122]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[4418-4424]:Modifier[4445-4451]"
    }, {
      "left" : "CpioArchiveInputStream",
      "right" : "CpioArchiveInputStream",
      "info" : "SimpleName[4425-4447]:SimpleName[4452-4474]"
    }, {
      "left" : "final InputStream in",
      "right" : "final InputStream in",
      "info" : "SingleVariableDeclaration[4448-4468]:SingleVariableDeclaration[4475-4495]"
    }, {
      "left" : "int blockSize",
      "right" : "int blockSize",
      "info" : "SingleVariableDeclaration[4470-4483]:SingleVariableDeclaration[4497-4510]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4485-4544]:Block[4512-4571]"
    }, {
      "left" : "this(in, blockSize, CharsetNames.US_ASCII);",
      "right" : "this(in, blockSize, CharsetNames.US_ASCII);",
      "info" : "ConstructorInvocation[4495-4538]:ConstructorInvocation[4522-4565]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[4955-4961]:Modifier[4982-4988]"
    }, {
      "left" : "CpioArchiveInputStream",
      "right" : "CpioArchiveInputStream",
      "info" : "SimpleName[4962-4984]:SimpleName[4989-5011]"
    }, {
      "left" : "final InputStream in",
      "right" : "final InputStream in",
      "info" : "SingleVariableDeclaration[4985-5005]:SingleVariableDeclaration[5012-5032]"
    }, {
      "left" : "int blockSize",
      "right" : "int blockSize",
      "info" : "SingleVariableDeclaration[5007-5020]:SingleVariableDeclaration[5034-5047]"
    }, {
      "left" : "String encoding",
      "right" : "String encoding",
      "info" : "SingleVariableDeclaration[5022-5037]:SingleVariableDeclaration[5049-5064]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5039-5175]:Block[5066-5236]"
    }, {
      "left" : "this.in = in;",
      "right" : "this.in = in;",
      "info" : "ExpressionStatement[5049-5062]:ExpressionStatement[5076-5089]"
    }, {
      "left" : "this.blockSize = blockSize;",
      "right" : "this.blockSize = blockSize;",
      "info" : "ExpressionStatement[5071-5098]:ExpressionStatement[5098-5125]"
    }, {
      "left" : "this.zipEncoding = ZipEncodingHelper.getZipEncoding(encoding);",
      "right" : "this.zipEncoding = ZipEncodingHelper.getZipEncoding(encoding);",
      "info" : "ExpressionStatement[5107-5169]:ExpressionStatement[5168-5230]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[5652-5661]:MarkerAnnotation[5713-5722]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[5666-5672]:Modifier[5727-5733]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[5673-5676]:PrimitiveType[5734-5737]"
    }, {
      "left" : "available",
      "right" : "available",
      "info" : "SimpleName[5677-5686]:SimpleName[5738-5747]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[5696-5707]:SimpleType[5757-5768]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5708-5816]:Block[5769-5877]"
    }, {
      "left" : "ensureOpen();",
      "right" : "ensureOpen();",
      "info" : "ExpressionStatement[5718-5731]:ExpressionStatement[5779-5792]"
    }, {
      "left" : "if (this.entryEOF)",
      "right" : "if (this.entryEOF)",
      "info" : "IfStatement[5740-5792]:IfStatement[5801-5853]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5759-5792]:Block[5820-5853]"
    }, {
      "left" : "return 0;",
      "right" : "return 0;",
      "info" : "ReturnStatement[5773-5782]:ReturnStatement[5834-5843]"
    }, {
      "left" : "return 1;",
      "right" : "return 1;",
      "info" : "ReturnStatement[5801-5810]:ReturnStatement[5862-5871]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[5958-5967]:MarkerAnnotation[6019-6028]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[5972-5978]:Modifier[6033-6039]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[5979-5983]:PrimitiveType[6040-6044]"
    }, {
      "left" : "close",
      "right" : "close",
      "info" : "SimpleName[5984-5989]:SimpleName[6045-6050]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[5999-6010]:SimpleType[6060-6071]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6011-6112]:Block[6072-6173]"
    }, {
      "left" : "if (!this.closed)",
      "right" : "if (!this.closed)",
      "info" : "IfStatement[6021-6106]:IfStatement[6082-6167]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6039-6106]:Block[6100-6167]"
    }, {
      "left" : "in.close();",
      "right" : "in.close();",
      "info" : "ExpressionStatement[6053-6064]:ExpressionStatement[6114-6125]"
    }, {
      "left" : "this.closed = true;",
      "right" : "this.closed = true;",
      "info" : "ExpressionStatement[6077-6096]:ExpressionStatement[6138-6157]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[6370-6377]:Modifier[6431-6438]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[6378-6382]:PrimitiveType[6439-6443]"
    }, {
      "left" : "closeEntry",
      "right" : "closeEntry",
      "info" : "SimpleName[6383-6393]:SimpleName[6444-6454]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[6403-6414]:SimpleType[6464-6475]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6415-6645]:Block[6476-6706]"
    }, {
      "left" : "while (skip((long) Integer.MAX_VALUE) == Integer.MAX_VALUE)",
      "right" : "while (skip((long) Integer.MAX_VALUE) == Integer.MAX_VALUE)",
      "info" : "WhileStatement[6533-6639]:WhileStatement[6594-6700]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6593-6639]:Block[6654-6700]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[6816-6823]:Modifier[6877-6884]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[6824-6828]:PrimitiveType[6885-6889]"
    }, {
      "left" : "ensureOpen",
      "right" : "ensureOpen",
      "info" : "SimpleName[6829-6839]:SimpleName[6890-6900]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[6849-6860]:SimpleType[6910-6921]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6861-6957]:Block[6922-7018]"
    }, {
      "left" : "if (this.closed)",
      "right" : "if (this.closed)",
      "info" : "IfStatement[6871-6951]:IfStatement[6932-7012]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6888-6951]:Block[6949-7012]"
    }, {
      "left" : "throw new IOException(\"Stream closed\");",
      "right" : "throw new IOException(\"Stream closed\");",
      "info" : "ThrowStatement[6902-6941]:ThrowStatement[6963-7002]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[7266-7272]:Modifier[7327-7333]"
    }, {
      "left" : "CpioArchiveEntry",
      "right" : "CpioArchiveEntry",
      "info" : "SimpleType[7273-7289]:SimpleType[7334-7350]"
    }, {
      "left" : "getNextCPIOEntry",
      "right" : "getNextCPIOEntry",
      "info" : "SimpleName[7290-7306]:SimpleName[7351-7367]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[7316-7327]:SimpleType[7377-7388]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7328-8851]:Block[7389-8912]"
    }, {
      "left" : "ensureOpen();",
      "right" : "ensureOpen();",
      "info" : "ExpressionStatement[7338-7351]:ExpressionStatement[7399-7412]"
    }, {
      "left" : "if (this.entry != null)",
      "right" : "if (this.entry != null)",
      "info" : "IfStatement[7360-7421]:IfStatement[7421-7482]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7384-7421]:Block[7445-7482]"
    }, {
      "left" : "closeEntry();",
      "right" : "closeEntry();",
      "info" : "ExpressionStatement[7398-7411]:ExpressionStatement[7459-7472]"
    }, {
      "left" : "readFully(TWO_BYTES_BUF, 0, TWO_BYTES_BUF.length);",
      "right" : "readFully(TWO_BYTES_BUF, 0, TWO_BYTES_BUF.length);",
      "info" : "ExpressionStatement[7430-7480]:ExpressionStatement[7491-7541]"
    }, {
      "left" : "if (CpioUtil.byteArray2long(TWO_BYTES_BUF, false) == MAGIC_OLD_BINARY)",
      "right" : "if (CpioUtil.byteArray2long(TWO_BYTES_BUF, false) == MAGIC_OLD_BINARY)",
      "info" : "IfStatement[7489-8564]:IfStatement[7550-8625]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7560-7623]:Block[7621-7684]"
    }, {
      "left" : "this.entry = readOldBinaryEntry(false);",
      "right" : "this.entry = readOldBinaryEntry(false);",
      "info" : "ExpressionStatement[7574-7613]:ExpressionStatement[7635-7674]"
    }, {
      "left" : "if (CpioUtil.byteArray2long(TWO_BYTES_BUF, true)\n                   == MAGIC_OLD_BINARY)",
      "right" : "if (CpioUtil.byteArray2long(TWO_BYTES_BUF, true)\n                   == MAGIC_OLD_BINARY)",
      "info" : "IfStatement[7629-8564]:IfStatement[7690-8625]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7718-7780]:Block[7779-7841]"
    }, {
      "left" : "this.entry = readOldBinaryEntry(true);",
      "right" : "this.entry = readOldBinaryEntry(true);",
      "info" : "ExpressionStatement[7732-7770]:ExpressionStatement[7793-7831]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7786-8564]:Block[7847-8625]"
    }, {
      "left" : "System.arraycopy(TWO_BYTES_BUF, 0, SIX_BYTES_BUF, 0,\n                             TWO_BYTES_BUF.length);",
      "right" : "System.arraycopy(TWO_BYTES_BUF, 0, SIX_BYTES_BUF, 0,\n                             TWO_BYTES_BUF.length);",
      "info" : "ExpressionStatement[7800-7904]:ExpressionStatement[7861-7965]"
    }, {
      "left" : "readFully(SIX_BYTES_BUF, TWO_BYTES_BUF.length,\n                      FOUR_BYTES_BUF.length);",
      "right" : "readFully(SIX_BYTES_BUF, TWO_BYTES_BUF.length,\n                      FOUR_BYTES_BUF.length);",
      "info" : "ExpressionStatement[7917-8009]:ExpressionStatement[7978-8070]"
    }, {
      "left" : "String magicString = ArchiveUtils.toAsciiString(SIX_BYTES_BUF);",
      "right" : "String magicString = ArchiveUtils.toAsciiString(SIX_BYTES_BUF);",
      "info" : "VariableDeclarationStatement[8022-8085]:VariableDeclarationStatement[8083-8146]"
    }, {
      "left" : "if (magicString.equals(MAGIC_NEW))",
      "right" : "if (magicString.equals(MAGIC_NEW))",
      "info" : "IfStatement[8098-8554]:IfStatement[8159-8615]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8133-8198]:Block[8194-8259]"
    }, {
      "left" : "this.entry = readNewEntry(false);",
      "right" : "this.entry = readNewEntry(false);",
      "info" : "ExpressionStatement[8151-8184]:ExpressionStatement[8212-8245]"
    }, {
      "left" : "if (magicString.equals(MAGIC_NEW_CRC))",
      "right" : "if (magicString.equals(MAGIC_NEW_CRC))",
      "info" : "IfStatement[8204-8554]:IfStatement[8265-8615]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8243-8307]:Block[8304-8368]"
    }, {
      "left" : "this.entry = readNewEntry(true);",
      "right" : "this.entry = readNewEntry(true);",
      "info" : "ExpressionStatement[8261-8293]:ExpressionStatement[8322-8354]"
    }, {
      "left" : "if (magicString.equals(MAGIC_OLD_ASCII))",
      "right" : "if (magicString.equals(MAGIC_OLD_ASCII))",
      "info" : "IfStatement[8313-8554]:IfStatement[8374-8615]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8354-8419]:Block[8415-8480]"
    }, {
      "left" : "this.entry = readOldAsciiEntry();",
      "right" : "this.entry = readOldAsciiEntry();",
      "info" : "ExpressionStatement[8372-8405]:ExpressionStatement[8433-8466]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8425-8554]:Block[8486-8615]"
    }, {
      "left" : "throw new IOException(\"Unknown magic [\" + magicString + \"]. Occured at byte: \" + getBytesRead());",
      "right" : "throw new IOException(\"Unknown magic [\" + magicString + \"]. Occured at byte: \" + getBytesRead());",
      "info" : "ThrowStatement[8443-8540]:ThrowStatement[8504-8601]"
    }, {
      "left" : "this.entryBytesRead = 0;",
      "right" : "this.entryBytesRead = 0;",
      "info" : "ExpressionStatement[8574-8598]:ExpressionStatement[8635-8659]"
    }, {
      "left" : "this.entryEOF = false;",
      "right" : "this.entryEOF = false;",
      "info" : "ExpressionStatement[8607-8629]:ExpressionStatement[8668-8690]"
    }, {
      "left" : "this.crc = 0;",
      "right" : "this.crc = 0;",
      "info" : "ExpressionStatement[8638-8651]:ExpressionStatement[8699-8712]"
    }, {
      "left" : "if (this.entry.getName().equals(CPIO_TRAILER))",
      "right" : "if (this.entry.getName().equals(CPIO_TRAILER))",
      "info" : "IfStatement[8661-8818]:IfStatement[8722-8879]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8708-8818]:Block[8769-8879]"
    }, {
      "left" : "this.entryEOF = true;",
      "right" : "this.entryEOF = true;",
      "info" : "ExpressionStatement[8722-8743]:ExpressionStatement[8783-8804]"
    }, {
      "left" : "skipRemainderOfLastBlock();",
      "right" : "skipRemainderOfLastBlock();",
      "info" : "ExpressionStatement[8756-8783]:ExpressionStatement[8817-8844]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[8796-8808]:ReturnStatement[8857-8869]"
    }, {
      "left" : "return this.entry;",
      "right" : "return this.entry;",
      "info" : "ReturnStatement[8827-8845]:ReturnStatement[8888-8906]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[8857-8864]:Modifier[8918-8925]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[8865-8869]:PrimitiveType[8926-8930]"
    }, {
      "left" : "skip",
      "right" : "skip",
      "info" : "SimpleName[8870-8874]:SimpleName[8931-8935]"
    }, {
      "left" : "int bytes",
      "right" : "int bytes",
      "info" : "SingleVariableDeclaration[8875-8884]:SingleVariableDeclaration[8936-8945]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[8893-8904]:SimpleType[8954-8965]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8904-9040]:Block[8965-9101]"
    }, {
      "left" : "if (bytes > 0)",
      "right" : "if (bytes > 0)",
      "info" : "IfStatement[8959-9034]:IfStatement[9020-9095]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8974-9034]:Block[9035-9095]"
    }, {
      "left" : "readFully(FOUR_BYTES_BUF, 0, bytes);",
      "right" : "readFully(FOUR_BYTES_BUF, 0, bytes);",
      "info" : "ExpressionStatement[8988-9024]:ExpressionStatement[9049-9085]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[9622-9631]:MarkerAnnotation[9683-9692]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[9636-9642]:Modifier[9697-9703]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[9643-9646]:PrimitiveType[9704-9707]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[9647-9651]:SimpleName[9708-9712]"
    }, {
      "left" : "final byte[] b",
      "right" : "final byte[] b",
      "info" : "SingleVariableDeclaration[9652-9666]:SingleVariableDeclaration[9713-9727]"
    }, {
      "left" : "final int off",
      "right" : "final int off",
      "info" : "SingleVariableDeclaration[9668-9681]:SingleVariableDeclaration[9729-9742]"
    }, {
      "left" : "final int len",
      "right" : "final int len",
      "info" : "SingleVariableDeclaration[9683-9696]:SingleVariableDeclaration[9744-9757]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[9717-9728]:SimpleType[9778-9789]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9729-10922]:Block[9790-10983]"
    }, {
      "left" : "ensureOpen();",
      "right" : "ensureOpen();",
      "info" : "ExpressionStatement[9739-9752]:ExpressionStatement[9800-9813]"
    }, {
      "left" : "if (off < 0 || len < 0 || off > b.length - len)",
      "right" : "if (off < 0 || len < 0 || off > b.length - len)",
      "info" : "IfStatement[9761-9924]:IfStatement[9822-9985]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9809-9871]:Block[9870-9932]"
    }, {
      "left" : "throw new IndexOutOfBoundsException();",
      "right" : "throw new IndexOutOfBoundsException();",
      "info" : "ThrowStatement[9823-9861]:ThrowStatement[9884-9922]"
    }, {
      "left" : "if (len == 0)",
      "right" : "if (len == 0)",
      "info" : "IfStatement[9877-9924]:IfStatement[9938-9985]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9891-9924]:Block[9952-9985]"
    }, {
      "left" : "return 0;",
      "right" : "return 0;",
      "info" : "ReturnStatement[9905-9914]:ReturnStatement[9966-9975]"
    }, {
      "left" : "if (this.entry == null || this.entryEOF)",
      "right" : "if (this.entry == null || this.entryEOF)",
      "info" : "IfStatement[9934-10009]:IfStatement[9995-10070]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9975-10009]:Block[10036-10070]"
    }, {
      "left" : "return -1;",
      "right" : "return -1;",
      "info" : "ReturnStatement[9989-9999]:ReturnStatement[10050-10060]"
    }, {
      "left" : "if (this.entryBytesRead == this.entry.getSize())",
      "right" : "if (this.entryBytesRead == this.entry.getSize())",
      "info" : "IfStatement[10018-10454]:IfStatement[10079-10515]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10067-10454]:Block[10128-10515]"
    }, {
      "left" : "skip(entry.getDataPadCount());",
      "right" : "skip(entry.getDataPadCount());",
      "info" : "ExpressionStatement[10081-10111]:ExpressionStatement[10142-10172]"
    }, {
      "left" : "this.entryEOF = true;",
      "right" : "this.entryEOF = true;",
      "info" : "ExpressionStatement[10124-10145]:ExpressionStatement[10185-10206]"
    }, {
      "left" : "if (this.entry.getFormat() == FORMAT_NEW_CRC\n                && this.crc != this.entry.getChksum())",
      "right" : "if (this.entry.getFormat() == FORMAT_NEW_CRC\n                && this.crc != this.entry.getChksum())",
      "info" : "IfStatement[10158-10399]:IfStatement[10219-10460]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10258-10399]:Block[10319-10460]"
    }, {
      "left" : "throw new IOException(\"CRC Error. Occured at byte: \"\n                                      + getBytesRead());",
      "right" : "throw new IOException(\"CRC Error. Occured at byte: \"\n                                      + getBytesRead());",
      "info" : "ThrowStatement[10276-10385]:ThrowStatement[10337-10446]"
    }, {
      "left" : "return -1;",
      "right" : "return -1;",
      "info" : "ReturnStatement[10412-10422]:ReturnStatement[10473-10483]"
    }, {
      "left" : "int tmplength = (int) Math.min(len, this.entry.getSize()\n                - this.entryBytesRead);",
      "right" : "int tmplength = (int) Math.min(len, this.entry.getSize()\n                - this.entryBytesRead);",
      "info" : "VariableDeclarationStatement[10463-10559]:VariableDeclarationStatement[10524-10620]"
    }, {
      "left" : "if (tmplength < 0)",
      "right" : "if (tmplength < 0)",
      "info" : "IfStatement[10568-10621]:IfStatement[10629-10682]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10587-10621]:Block[10648-10682]"
    }, {
      "left" : "return -1;",
      "right" : "return -1;",
      "info" : "ReturnStatement[10601-10611]:ReturnStatement[10662-10672]"
    }, {
      "left" : "int tmpread = readFully(b, off, tmplength);",
      "right" : "int tmpread = readFully(b, off, tmplength);",
      "info" : "VariableDeclarationStatement[10631-10674]:VariableDeclarationStatement[10692-10735]"
    }, {
      "left" : "if (this.entry.getFormat() == FORMAT_NEW_CRC)",
      "right" : "if (this.entry.getFormat() == FORMAT_NEW_CRC)",
      "info" : "IfStatement[10683-10851]:IfStatement[10744-10912]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10729-10851]:Block[10790-10912]"
    }, {
      "left" : "for (int pos = 0; pos < tmpread; pos++)",
      "right" : "for (int pos = 0; pos < tmpread; pos++)",
      "info" : "ForStatement[10743-10841]:ForStatement[10804-10902]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10783-10841]:Block[10844-10902]"
    }, {
      "left" : "this.crc += b[pos] & 0xFF;",
      "right" : "this.crc += b[pos] & 0xFF;",
      "info" : "ExpressionStatement[10801-10827]:ExpressionStatement[10862-10888]"
    }, {
      "left" : "this.entryBytesRead += tmpread;",
      "right" : "this.entryBytesRead += tmpread;",
      "info" : "ExpressionStatement[10860-10891]:ExpressionStatement[10921-10952]"
    }, {
      "left" : "return tmpread;",
      "right" : "return tmpread;",
      "info" : "ReturnStatement[10901-10916]:ReturnStatement[10962-10977]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[10928-10935]:Modifier[10989-10996]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[10936-10941]:Modifier[10997-11002]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[10942-10945]:PrimitiveType[11003-11006]"
    }, {
      "left" : "readFully",
      "right" : "readFully",
      "info" : "SimpleName[10946-10955]:SimpleName[11007-11016]"
    }, {
      "left" : "final byte[] b",
      "right" : "final byte[] b",
      "info" : "SingleVariableDeclaration[10956-10970]:SingleVariableDeclaration[11017-11031]"
    }, {
      "left" : "final int off",
      "right" : "final int off",
      "info" : "SingleVariableDeclaration[10972-10985]:SingleVariableDeclaration[11033-11046]"
    }, {
      "left" : "final int len",
      "right" : "final int len",
      "info" : "SingleVariableDeclaration[10987-11000]:SingleVariableDeclaration[11048-11061]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[11021-11032]:SimpleType[11082-11093]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11033-11215]:Block[11094-11276]"
    }, {
      "left" : "int count = IOUtils.readFully(in, b, off, len);",
      "right" : "int count = IOUtils.readFully(in, b, off, len);",
      "info" : "VariableDeclarationStatement[11043-11090]:VariableDeclarationStatement[11104-11151]"
    }, {
      "left" : "count(count);",
      "right" : "count(count);",
      "info" : "ExpressionStatement[11099-11112]:ExpressionStatement[11160-11173]"
    }, {
      "left" : "if (count < len)",
      "right" : "if (count < len)",
      "info" : "IfStatement[11121-11187]:IfStatement[11182-11248]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11138-11187]:Block[11199-11248]"
    }, {
      "left" : "throw new EOFException();",
      "right" : "throw new EOFException();",
      "info" : "ThrowStatement[11152-11177]:ThrowStatement[11213-11238]"
    }, {
      "left" : "return count;",
      "right" : "return count;",
      "info" : "ReturnStatement[11196-11209]:ReturnStatement[11257-11270]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[11221-11228]:Modifier[11282-11289]"
    }, {
      "left" : "long",
      "right" : "long",
      "info" : "PrimitiveType[11229-11233]:PrimitiveType[11290-11294]"
    }, {
      "left" : "readBinaryLong",
      "right" : "readBinaryLong",
      "info" : "SimpleName[11234-11248]:SimpleName[11295-11309]"
    }, {
      "left" : "final int length",
      "right" : "final int length",
      "info" : "SingleVariableDeclaration[11249-11265]:SingleVariableDeclaration[11310-11326]"
    }, {
      "left" : "final boolean swapHalfWord",
      "right" : "final boolean swapHalfWord",
      "info" : "SingleVariableDeclaration[11267-11293]:SingleVariableDeclaration[11328-11354]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[11314-11325]:SimpleType[11375-11386]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11326-11470]:Block[11387-11531]"
    }, {
      "left" : "byte tmp[] = new byte[length];",
      "right" : "byte tmp[] = new byte[length];",
      "info" : "VariableDeclarationStatement[11336-11366]:VariableDeclarationStatement[11397-11427]"
    }, {
      "left" : "readFully(tmp, 0, tmp.length);",
      "right" : "readFully(tmp, 0, tmp.length);",
      "info" : "ExpressionStatement[11375-11405]:ExpressionStatement[11436-11466]"
    }, {
      "left" : "return CpioUtil.byteArray2long(tmp, swapHalfWord);",
      "right" : "return CpioUtil.byteArray2long(tmp, swapHalfWord);",
      "info" : "ReturnStatement[11414-11464]:ReturnStatement[11475-11525]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[11476-11483]:Modifier[11537-11544]"
    }, {
      "left" : "long",
      "right" : "long",
      "info" : "PrimitiveType[11484-11488]:PrimitiveType[11545-11549]"
    }, {
      "left" : "readAsciiLong",
      "right" : "readAsciiLong",
      "info" : "SimpleName[11489-11502]:SimpleName[11550-11563]"
    }, {
      "left" : "final int length",
      "right" : "final int length",
      "info" : "SingleVariableDeclaration[11503-11519]:SingleVariableDeclaration[11564-11580]"
    }, {
      "left" : "final int radix",
      "right" : "final int radix",
      "info" : "SingleVariableDeclaration[11521-11536]:SingleVariableDeclaration[11582-11597]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[11557-11568]:SimpleType[11618-11629]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11569-11749]:Block[11630-11810]"
    }, {
      "left" : "byte tmpBuffer[] = new byte[length];",
      "right" : "byte tmpBuffer[] = new byte[length];",
      "info" : "VariableDeclarationStatement[11579-11615]:VariableDeclarationStatement[11640-11676]"
    }, {
      "left" : "readFully(tmpBuffer, 0, tmpBuffer.length);",
      "right" : "readFully(tmpBuffer, 0, tmpBuffer.length);",
      "info" : "ExpressionStatement[11624-11666]:ExpressionStatement[11685-11727]"
    }, {
      "left" : "return Long.parseLong(ArchiveUtils.toAsciiString(tmpBuffer), radix);",
      "right" : "return Long.parseLong(ArchiveUtils.toAsciiString(tmpBuffer), radix);",
      "info" : "ReturnStatement[11675-11743]:ReturnStatement[11736-11804]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[11755-11762]:Modifier[11816-11823]"
    }, {
      "left" : "CpioArchiveEntry",
      "right" : "CpioArchiveEntry",
      "info" : "SimpleType[11763-11779]:SimpleType[11824-11840]"
    }, {
      "left" : "readNewEntry",
      "right" : "readNewEntry",
      "info" : "SimpleName[11780-11792]:SimpleName[11841-11853]"
    }, {
      "left" : "final boolean hasCrc",
      "right" : "final boolean hasCrc",
      "info" : "SingleVariableDeclaration[11793-11813]:SingleVariableDeclaration[11854-11874]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[11834-11845]:SimpleType[11895-11906]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11846-13115]:Block[11907-13176]"
    }, {
      "left" : "CpioArchiveEntry ret;",
      "right" : "CpioArchiveEntry ret;",
      "info" : "VariableDeclarationStatement[11856-11877]:VariableDeclarationStatement[11917-11938]"
    }, {
      "left" : "if (hasCrc)",
      "right" : "if (hasCrc)",
      "info" : "IfStatement[11886-12034]:IfStatement[11947-12095]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11898-11965]:Block[11959-12026]"
    }, {
      "left" : "ret = new CpioArchiveEntry(FORMAT_NEW_CRC);",
      "right" : "ret = new CpioArchiveEntry(FORMAT_NEW_CRC);",
      "info" : "ExpressionStatement[11912-11955]:ExpressionStatement[11973-12016]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11971-12034]:Block[12032-12095]"
    }, {
      "left" : "ret = new CpioArchiveEntry(FORMAT_NEW);",
      "right" : "ret = new CpioArchiveEntry(FORMAT_NEW);",
      "info" : "ExpressionStatement[11985-12024]:ExpressionStatement[12046-12085]"
    }, {
      "left" : "ret.setInode(readAsciiLong(8, 16));",
      "right" : "ret.setInode(readAsciiLong(8, 16));",
      "info" : "ExpressionStatement[12044-12079]:ExpressionStatement[12105-12140]"
    }, {
      "left" : "long mode = readAsciiLong(8, 16);",
      "right" : "long mode = readAsciiLong(8, 16);",
      "info" : "VariableDeclarationStatement[12088-12121]:VariableDeclarationStatement[12149-12182]"
    }, {
      "left" : "if (CpioUtil.fileType(mode) != 0)",
      "right" : "if (CpioUtil.fileType(mode) != 0)",
      "info" : "IfStatement[12130-12233]:IfStatement[12191-12294]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12163-12233]:Block[12224-12294]"
    }, {
      "left" : "ret.setMode(mode);",
      "right" : "ret.setMode(mode);",
      "info" : "ExpressionStatement[12205-12223]:ExpressionStatement[12266-12284]"
    }, {
      "left" : "ret.setUID(readAsciiLong(8, 16));",
      "right" : "ret.setUID(readAsciiLong(8, 16));",
      "info" : "ExpressionStatement[12242-12275]:ExpressionStatement[12303-12336]"
    }, {
      "left" : "ret.setGID(readAsciiLong(8, 16));",
      "right" : "ret.setGID(readAsciiLong(8, 16));",
      "info" : "ExpressionStatement[12284-12317]:ExpressionStatement[12345-12378]"
    }, {
      "left" : "ret.setNumberOfLinks(readAsciiLong(8, 16));",
      "right" : "ret.setNumberOfLinks(readAsciiLong(8, 16));",
      "info" : "ExpressionStatement[12326-12369]:ExpressionStatement[12387-12430]"
    }, {
      "left" : "ret.setTime(readAsciiLong(8, 16));",
      "right" : "ret.setTime(readAsciiLong(8, 16));",
      "info" : "ExpressionStatement[12378-12412]:ExpressionStatement[12439-12473]"
    }, {
      "left" : "ret.setSize(readAsciiLong(8, 16));",
      "right" : "ret.setSize(readAsciiLong(8, 16));",
      "info" : "ExpressionStatement[12421-12455]:ExpressionStatement[12482-12516]"
    }, {
      "left" : "ret.setDeviceMaj(readAsciiLong(8, 16));",
      "right" : "ret.setDeviceMaj(readAsciiLong(8, 16));",
      "info" : "ExpressionStatement[12464-12503]:ExpressionStatement[12525-12564]"
    }, {
      "left" : "ret.setDeviceMin(readAsciiLong(8, 16));",
      "right" : "ret.setDeviceMin(readAsciiLong(8, 16));",
      "info" : "ExpressionStatement[12512-12551]:ExpressionStatement[12573-12612]"
    }, {
      "left" : "ret.setRemoteDeviceMaj(readAsciiLong(8, 16));",
      "right" : "ret.setRemoteDeviceMaj(readAsciiLong(8, 16));",
      "info" : "ExpressionStatement[12560-12605]:ExpressionStatement[12621-12666]"
    }, {
      "left" : "ret.setRemoteDeviceMin(readAsciiLong(8, 16));",
      "right" : "ret.setRemoteDeviceMin(readAsciiLong(8, 16));",
      "info" : "ExpressionStatement[12614-12659]:ExpressionStatement[12675-12720]"
    }, {
      "left" : "long namesize = readAsciiLong(8, 16);",
      "right" : "long namesize = readAsciiLong(8, 16);",
      "info" : "VariableDeclarationStatement[12668-12705]:VariableDeclarationStatement[12729-12766]"
    }, {
      "left" : "ret.setChksum(readAsciiLong(8, 16));",
      "right" : "ret.setChksum(readAsciiLong(8, 16));",
      "info" : "ExpressionStatement[12714-12750]:ExpressionStatement[12775-12811]"
    }, {
      "left" : "String name = readCString((int) namesize);",
      "right" : "String name = readCString((int) namesize);",
      "info" : "VariableDeclarationStatement[12759-12801]:VariableDeclarationStatement[12820-12862]"
    }, {
      "left" : "ret.setName(name);",
      "right" : "ret.setName(name);",
      "info" : "ExpressionStatement[12810-12828]:ExpressionStatement[12871-12889]"
    }, {
      "left" : "if (CpioUtil.fileType(mode) == 0 && !name.equals(CPIO_TRAILER))",
      "right" : "if (CpioUtil.fileType(mode) == 0 && !name.equals(CPIO_TRAILER))",
      "info" : "IfStatement[12837-13049]:IfStatement[12898-13110]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12900-13049]:Block[12961-13110]"
    }, {
      "left" : "throw new IOException(\"Mode 0 only allowed in the trailer. Found entry name: \"+name + \" Occured at byte: \" + getBytesRead());",
      "right" : "throw new IOException(\"Mode 0 only allowed in the trailer. Found entry name: \"+name + \" Occured at byte: \" + getBytesRead());",
      "info" : "ThrowStatement[12914-13039]:ThrowStatement[12975-13100]"
    }, {
      "left" : "skip(ret.getHeaderPadCount());",
      "right" : "skip(ret.getHeaderPadCount());",
      "info" : "ExpressionStatement[13058-13088]:ExpressionStatement[13119-13149]"
    }, {
      "left" : "return ret;",
      "right" : "return ret;",
      "info" : "ReturnStatement[13098-13109]:ReturnStatement[13159-13170]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[13121-13128]:Modifier[13182-13189]"
    }, {
      "left" : "CpioArchiveEntry",
      "right" : "CpioArchiveEntry",
      "info" : "SimpleType[13129-13145]:SimpleType[13190-13206]"
    }, {
      "left" : "readOldAsciiEntry",
      "right" : "readOldAsciiEntry",
      "info" : "SimpleName[13146-13163]:SimpleName[13207-13224]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[13173-13184]:SimpleType[13234-13245]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13185-14119]:Block[13246-14180]"
    }, {
      "left" : "CpioArchiveEntry ret = new CpioArchiveEntry(FORMAT_OLD_ASCII);",
      "right" : "CpioArchiveEntry ret = new CpioArchiveEntry(FORMAT_OLD_ASCII);",
      "info" : "VariableDeclarationStatement[13195-13257]:VariableDeclarationStatement[13256-13318]"
    }, {
      "left" : "ret.setDevice(readAsciiLong(6, 8));",
      "right" : "ret.setDevice(readAsciiLong(6, 8));",
      "info" : "ExpressionStatement[13267-13302]:ExpressionStatement[13328-13363]"
    }, {
      "left" : "ret.setInode(readAsciiLong(6, 8));",
      "right" : "ret.setInode(readAsciiLong(6, 8));",
      "info" : "ExpressionStatement[13311-13345]:ExpressionStatement[13372-13406]"
    }, {
      "left" : "final long mode = readAsciiLong(6, 8);",
      "right" : "final long mode = readAsciiLong(6, 8);",
      "info" : "VariableDeclarationStatement[13354-13392]:VariableDeclarationStatement[13415-13453]"
    }, {
      "left" : "if (CpioUtil.fileType(mode) != 0)",
      "right" : "if (CpioUtil.fileType(mode) != 0)",
      "info" : "IfStatement[13401-13477]:IfStatement[13462-13538]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13435-13477]:Block[13496-13538]"
    }, {
      "left" : "ret.setMode(mode);",
      "right" : "ret.setMode(mode);",
      "info" : "ExpressionStatement[13449-13467]:ExpressionStatement[13510-13528]"
    }, {
      "left" : "ret.setUID(readAsciiLong(6, 8));",
      "right" : "ret.setUID(readAsciiLong(6, 8));",
      "info" : "ExpressionStatement[13486-13518]:ExpressionStatement[13547-13579]"
    }, {
      "left" : "ret.setGID(readAsciiLong(6, 8));",
      "right" : "ret.setGID(readAsciiLong(6, 8));",
      "info" : "ExpressionStatement[13527-13559]:ExpressionStatement[13588-13620]"
    }, {
      "left" : "ret.setNumberOfLinks(readAsciiLong(6, 8));",
      "right" : "ret.setNumberOfLinks(readAsciiLong(6, 8));",
      "info" : "ExpressionStatement[13568-13610]:ExpressionStatement[13629-13671]"
    }, {
      "left" : "ret.setRemoteDevice(readAsciiLong(6, 8));",
      "right" : "ret.setRemoteDevice(readAsciiLong(6, 8));",
      "info" : "ExpressionStatement[13619-13660]:ExpressionStatement[13680-13721]"
    }, {
      "left" : "ret.setTime(readAsciiLong(11, 8));",
      "right" : "ret.setTime(readAsciiLong(11, 8));",
      "info" : "ExpressionStatement[13669-13703]:ExpressionStatement[13730-13764]"
    }, {
      "left" : "long namesize = readAsciiLong(6, 8);",
      "right" : "long namesize = readAsciiLong(6, 8);",
      "info" : "VariableDeclarationStatement[13712-13748]:VariableDeclarationStatement[13773-13809]"
    }, {
      "left" : "ret.setSize(readAsciiLong(11, 8));",
      "right" : "ret.setSize(readAsciiLong(11, 8));",
      "info" : "ExpressionStatement[13757-13791]:ExpressionStatement[13818-13852]"
    }, {
      "left" : "final String name = readCString((int) namesize);",
      "right" : "final String name = readCString((int) namesize);",
      "info" : "VariableDeclarationStatement[13800-13848]:VariableDeclarationStatement[13861-13909]"
    }, {
      "left" : "ret.setName(name);",
      "right" : "ret.setName(name);",
      "info" : "ExpressionStatement[13857-13875]:ExpressionStatement[13918-13936]"
    }, {
      "left" : "if (CpioUtil.fileType(mode) == 0 && !name.equals(CPIO_TRAILER))",
      "right" : "if (CpioUtil.fileType(mode) == 0 && !name.equals(CPIO_TRAILER))",
      "info" : "IfStatement[13884-14092]:IfStatement[13945-14153]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13947-14092]:Block[14008-14153]"
    }, {
      "left" : "throw new IOException(\"Mode 0 only allowed in the trailer. Found entry: \"+ name + \" Occured at byte: \" + getBytesRead());",
      "right" : "throw new IOException(\"Mode 0 only allowed in the trailer. Found entry: \"+ name + \" Occured at byte: \" + getBytesRead());",
      "info" : "ThrowStatement[13961-14082]:ThrowStatement[14022-14143]"
    }, {
      "left" : "return ret;",
      "right" : "return ret;",
      "info" : "ReturnStatement[14102-14113]:ReturnStatement[14163-14174]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[14125-14132]:Modifier[14186-14193]"
    }, {
      "left" : "CpioArchiveEntry",
      "right" : "CpioArchiveEntry",
      "info" : "SimpleType[14133-14149]:SimpleType[14194-14210]"
    }, {
      "left" : "readOldBinaryEntry",
      "right" : "readOldBinaryEntry",
      "info" : "SimpleName[14150-14168]:SimpleName[14211-14229]"
    }, {
      "left" : "final boolean swapHalfWord",
      "right" : "final boolean swapHalfWord",
      "info" : "SingleVariableDeclaration[14169-14195]:SingleVariableDeclaration[14230-14256]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[14216-14227]:SimpleType[14277-14288]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14228-15317]:Block[14289-15378]"
    }, {
      "left" : "CpioArchiveEntry ret = new CpioArchiveEntry(FORMAT_OLD_BINARY);",
      "right" : "CpioArchiveEntry ret = new CpioArchiveEntry(FORMAT_OLD_BINARY);",
      "info" : "VariableDeclarationStatement[14238-14301]:VariableDeclarationStatement[14299-14362]"
    }, {
      "left" : "ret.setDevice(readBinaryLong(2, swapHalfWord));",
      "right" : "ret.setDevice(readBinaryLong(2, swapHalfWord));",
      "info" : "ExpressionStatement[14311-14358]:ExpressionStatement[14372-14419]"
    }, {
      "left" : "ret.setInode(readBinaryLong(2, swapHalfWord));",
      "right" : "ret.setInode(readBinaryLong(2, swapHalfWord));",
      "info" : "ExpressionStatement[14367-14413]:ExpressionStatement[14428-14474]"
    }, {
      "left" : "final long mode = readBinaryLong(2, swapHalfWord);",
      "right" : "final long mode = readBinaryLong(2, swapHalfWord);",
      "info" : "VariableDeclarationStatement[14422-14472]:VariableDeclarationStatement[14483-14533]"
    }, {
      "left" : "if (CpioUtil.fileType(mode) != 0)",
      "right" : "if (CpioUtil.fileType(mode) != 0)",
      "info" : "IfStatement[14481-14556]:IfStatement[14542-14617]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14514-14556]:Block[14575-14617]"
    }, {
      "left" : "ret.setMode(mode);",
      "right" : "ret.setMode(mode);",
      "info" : "ExpressionStatement[14528-14546]:ExpressionStatement[14589-14607]"
    }, {
      "left" : "ret.setUID(readBinaryLong(2, swapHalfWord));",
      "right" : "ret.setUID(readBinaryLong(2, swapHalfWord));",
      "info" : "ExpressionStatement[14565-14609]:ExpressionStatement[14626-14670]"
    }, {
      "left" : "ret.setGID(readBinaryLong(2, swapHalfWord));",
      "right" : "ret.setGID(readBinaryLong(2, swapHalfWord));",
      "info" : "ExpressionStatement[14618-14662]:ExpressionStatement[14679-14723]"
    }, {
      "left" : "ret.setNumberOfLinks(readBinaryLong(2, swapHalfWord));",
      "right" : "ret.setNumberOfLinks(readBinaryLong(2, swapHalfWord));",
      "info" : "ExpressionStatement[14671-14725]:ExpressionStatement[14732-14786]"
    }, {
      "left" : "ret.setRemoteDevice(readBinaryLong(2, swapHalfWord));",
      "right" : "ret.setRemoteDevice(readBinaryLong(2, swapHalfWord));",
      "info" : "ExpressionStatement[14734-14787]:ExpressionStatement[14795-14848]"
    }, {
      "left" : "ret.setTime(readBinaryLong(4, swapHalfWord));",
      "right" : "ret.setTime(readBinaryLong(4, swapHalfWord));",
      "info" : "ExpressionStatement[14796-14841]:ExpressionStatement[14857-14902]"
    }, {
      "left" : "long namesize = readBinaryLong(2, swapHalfWord);",
      "right" : "long namesize = readBinaryLong(2, swapHalfWord);",
      "info" : "VariableDeclarationStatement[14850-14898]:VariableDeclarationStatement[14911-14959]"
    }, {
      "left" : "ret.setSize(readBinaryLong(4, swapHalfWord));",
      "right" : "ret.setSize(readBinaryLong(4, swapHalfWord));",
      "info" : "ExpressionStatement[14907-14952]:ExpressionStatement[14968-15013]"
    }, {
      "left" : "final String name = readCString((int) namesize);",
      "right" : "final String name = readCString((int) namesize);",
      "info" : "VariableDeclarationStatement[14961-15009]:VariableDeclarationStatement[15022-15070]"
    }, {
      "left" : "ret.setName(name);",
      "right" : "ret.setName(name);",
      "info" : "ExpressionStatement[15018-15036]:ExpressionStatement[15079-15097]"
    }, {
      "left" : "if (CpioUtil.fileType(mode) == 0 && !name.equals(CPIO_TRAILER))",
      "right" : "if (CpioUtil.fileType(mode) == 0 && !name.equals(CPIO_TRAILER))",
      "info" : "IfStatement[15045-15251]:IfStatement[15106-15312]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15108-15251]:Block[15169-15312]"
    }, {
      "left" : "throw new IOException(\"Mode 0 only allowed in the trailer. Found entry: \"+name + \"Occured at byte: \" + getBytesRead());",
      "right" : "throw new IOException(\"Mode 0 only allowed in the trailer. Found entry: \"+name + \"Occured at byte: \" + getBytesRead());",
      "info" : "ThrowStatement[15122-15241]:ThrowStatement[15183-15302]"
    }, {
      "left" : "skip(ret.getHeaderPadCount());",
      "right" : "skip(ret.getHeaderPadCount());",
      "info" : "ExpressionStatement[15260-15290]:ExpressionStatement[15321-15351]"
    }, {
      "left" : "return ret;",
      "right" : "return ret;",
      "info" : "ReturnStatement[15300-15311]:ReturnStatement[15361-15372]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[15323-15330]:Modifier[15384-15391]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[15331-15337]:SimpleType[15392-15398]"
    }, {
      "left" : "readCString",
      "right" : "readCString",
      "info" : "SimpleName[15338-15349]:SimpleName[15399-15410]"
    }, {
      "left" : "final int length",
      "right" : "final int length",
      "info" : "SingleVariableDeclaration[15350-15366]:SingleVariableDeclaration[15411-15427]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[15375-15386]:SimpleType[15436-15447]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15387-15625]:Block[15448-15686]"
    }, {
      "left" : "byte tmpBuffer[] = new byte[length - 1];",
      "right" : "byte tmpBuffer[] = new byte[length - 1];",
      "info" : "VariableDeclarationStatement[15458-15498]:VariableDeclarationStatement[15519-15559]"
    }, {
      "left" : "readFully(tmpBuffer, 0, tmpBuffer.length);",
      "right" : "readFully(tmpBuffer, 0, tmpBuffer.length);",
      "info" : "ExpressionStatement[15507-15549]:ExpressionStatement[15568-15610]"
    }, {
      "left" : "this.in.read();",
      "right" : "this.in.read();",
      "info" : "ExpressionStatement[15558-15573]:ExpressionStatement[15619-15634]"
    }, {
      "left" : "return zipEncoding.decode(tmpBuffer);",
      "right" : "return zipEncoding.decode(tmpBuffer);",
      "info" : "ReturnStatement[15582-15619]:ReturnStatement[15643-15680]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[15979-15988]:MarkerAnnotation[16040-16049]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[15993-15999]:Modifier[16054-16060]"
    }, {
      "left" : "long",
      "right" : "long",
      "info" : "PrimitiveType[16000-16004]:PrimitiveType[16061-16065]"
    }, {
      "left" : "skip",
      "right" : "skip",
      "info" : "SimpleName[16005-16009]:SimpleName[16066-16070]"
    }, {
      "left" : "final long n",
      "right" : "final long n",
      "info" : "SingleVariableDeclaration[16010-16022]:SingleVariableDeclaration[16071-16083]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[16031-16042]:SimpleType[16092-16103]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16043-16627]:Block[16104-16688]"
    }, {
      "left" : "if (n < 0)",
      "right" : "if (n < 0)",
      "info" : "IfStatement[16053-16147]:IfStatement[16114-16208]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16064-16147]:Block[16125-16208]"
    }, {
      "left" : "throw new IllegalArgumentException(\"negative skip length\");",
      "right" : "throw new IllegalArgumentException(\"negative skip length\");",
      "info" : "ThrowStatement[16078-16137]:ThrowStatement[16139-16198]"
    }, {
      "left" : "ensureOpen();",
      "right" : "ensureOpen();",
      "info" : "ExpressionStatement[16156-16169]:ExpressionStatement[16217-16230]"
    }, {
      "left" : "int max = (int) Math.min(n, Integer.MAX_VALUE);",
      "right" : "int max = (int) Math.min(n, Integer.MAX_VALUE);",
      "info" : "VariableDeclarationStatement[16178-16225]:VariableDeclarationStatement[16239-16286]"
    }, {
      "left" : "int total = 0;",
      "right" : "int total = 0;",
      "info" : "VariableDeclarationStatement[16234-16248]:VariableDeclarationStatement[16295-16309]"
    }, {
      "left" : "while (total < max)",
      "right" : "while (total < max)",
      "info" : "WhileStatement[16258-16599]:WhileStatement[16319-16660]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16278-16599]:Block[16339-16660]"
    }, {
      "left" : "int len = max - total;",
      "right" : "int len = max - total;",
      "info" : "VariableDeclarationStatement[16292-16314]:VariableDeclarationStatement[16353-16375]"
    }, {
      "left" : "if (len > this.tmpbuf.length)",
      "right" : "if (len > this.tmpbuf.length)",
      "info" : "IfStatement[16327-16414]:IfStatement[16388-16475]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16357-16414]:Block[16418-16475]"
    }, {
      "left" : "len = this.tmpbuf.length;",
      "right" : "len = this.tmpbuf.length;",
      "info" : "ExpressionStatement[16375-16400]:ExpressionStatement[16436-16461]"
    }, {
      "left" : "len = read(this.tmpbuf, 0, len);",
      "right" : "len = read(this.tmpbuf, 0, len);",
      "info" : "ExpressionStatement[16427-16459]:ExpressionStatement[16488-16520]"
    }, {
      "left" : "if (len == -1)",
      "right" : "if (len == -1)",
      "info" : "IfStatement[16472-16563]:IfStatement[16533-16624]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16487-16563]:Block[16548-16624]"
    }, {
      "left" : "this.entryEOF = true;",
      "right" : "this.entryEOF = true;",
      "info" : "ExpressionStatement[16505-16526]:ExpressionStatement[16566-16587]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[16543-16549]:BreakStatement[16604-16610]"
    }, {
      "left" : "total += len;",
      "right" : "total += len;",
      "info" : "ExpressionStatement[16576-16589]:ExpressionStatement[16637-16650]"
    }, {
      "left" : "return total;",
      "right" : "return total;",
      "info" : "ReturnStatement[16608-16621]:ReturnStatement[16669-16682]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[16633-16642]:MarkerAnnotation[16694-16703]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[16647-16653]:Modifier[16708-16714]"
    }, {
      "left" : "ArchiveEntry",
      "right" : "ArchiveEntry",
      "info" : "SimpleType[16654-16666]:SimpleType[16715-16727]"
    }, {
      "left" : "getNextEntry",
      "right" : "getNextEntry",
      "info" : "SimpleName[16667-16679]:SimpleName[16728-16740]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[16689-16700]:SimpleType[16750-16761]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16701-16743]:Block[16762-16804]"
    }, {
      "left" : "return getNextCPIOEntry();",
      "right" : "return getNextCPIOEntry();",
      "info" : "ReturnStatement[16711-16737]:ReturnStatement[16772-16798]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[16832-16839]:Modifier[16893-16900]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[16840-16844]:PrimitiveType[16901-16905]"
    }, {
      "left" : "skipRemainderOfLastBlock",
      "right" : "skipRemainderOfLastBlock",
      "info" : "SimpleName[16845-16869]:SimpleName[16906-16930]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[16879-16890]:SimpleType[16940-16951]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16891-17280]:Block[16952-17341]"
    }, {
      "left" : "long readFromLastBlock = getBytesRead() % blockSize;",
      "right" : "long readFromLastBlock = getBytesRead() % blockSize;",
      "info" : "VariableDeclarationStatement[16901-16953]:VariableDeclarationStatement[16962-17014]"
    }, {
      "left" : "long remainingBytes = readFromLastBlock == 0 ? 0\n            : blockSize - readFromLastBlock;",
      "right" : "long remainingBytes = readFromLastBlock == 0 ? 0\n            : blockSize - readFromLastBlock;",
      "info" : "VariableDeclarationStatement[16962-17055]:VariableDeclarationStatement[17023-17116]"
    }, {
      "left" : "while (remainingBytes > 0)",
      "right" : "while (remainingBytes > 0)",
      "info" : "WhileStatement[17064-17274]:WhileStatement[17125-17335]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17091-17274]:Block[17152-17335]"
    }, {
      "left" : "long skipped = skip(blockSize - readFromLastBlock);",
      "right" : "long skipped = skip(blockSize - readFromLastBlock);",
      "info" : "VariableDeclarationStatement[17105-17156]:VariableDeclarationStatement[17166-17217]"
    }, {
      "left" : "if (skipped <= 0)",
      "right" : "if (skipped <= 0)",
      "info" : "IfStatement[17169-17225]:IfStatement[17230-17286]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17187-17225]:Block[17248-17286]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[17205-17211]:BreakStatement[17266-17272]"
    }, {
      "left" : "remainingBytes -= skipped;",
      "right" : "remainingBytes -= skipped;",
      "info" : "ExpressionStatement[17238-17264]:ExpressionStatement[17299-17325]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[17614-17620]:Modifier[17675-17681]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[17621-17627]:Modifier[17682-17688]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[17628-17635]:PrimitiveType[17689-17696]"
    }, {
      "left" : "matches",
      "right" : "matches",
      "info" : "SimpleName[17636-17643]:SimpleName[17697-17704]"
    }, {
      "left" : "byte[] signature",
      "right" : "byte[] signature",
      "info" : "SingleVariableDeclaration[17644-17660]:SingleVariableDeclaration[17705-17721]"
    }, {
      "left" : "int length",
      "right" : "int length",
      "info" : "SingleVariableDeclaration[17662-17672]:SingleVariableDeclaration[17723-17733]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17674-18672]:Block[17735-18733]"
    }, {
      "left" : "if (length < 6)",
      "right" : "if (length < 6)",
      "info" : "IfStatement[17684-17737]:IfStatement[17745-17798]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17700-17737]:Block[17761-17798]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[17714-17727]:ReturnStatement[17775-17788]"
    }, {
      "left" : "if (signature[0] == 0x71 && (signature[1] & 0xFF) == 0xc7)",
      "right" : "if (signature[0] == 0x71 && (signature[1] & 0xFF) == 0xc7)",
      "info" : "IfStatement[17778-17873]:IfStatement[17839-17934]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17837-17873]:Block[17898-17934]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[17851-17863]:ReturnStatement[17912-17924]"
    }, {
      "left" : "if (signature[1] == 0x71 && (signature[0] & 0xFF) == 0xc7)",
      "right" : "if (signature[1] == 0x71 && (signature[0] & 0xFF) == 0xc7)",
      "info" : "IfStatement[17882-17977]:IfStatement[17943-18038]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17941-17977]:Block[18002-18038]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[17955-17967]:ReturnStatement[18016-18028]"
    }, {
      "left" : "if (signature[0] != 0x30)",
      "right" : "if (signature[0] != 0x30)",
      "info" : "IfStatement[18052-18115]:IfStatement[18113-18176]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18078-18115]:Block[18139-18176]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[18092-18105]:ReturnStatement[18153-18166]"
    }, {
      "left" : "if (signature[1] != 0x37)",
      "right" : "if (signature[1] != 0x37)",
      "info" : "IfStatement[18124-18187]:IfStatement[18185-18248]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18150-18187]:Block[18211-18248]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[18164-18177]:ReturnStatement[18225-18238]"
    }, {
      "left" : "if (signature[2] != 0x30)",
      "right" : "if (signature[2] != 0x30)",
      "info" : "IfStatement[18196-18259]:IfStatement[18257-18320]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18222-18259]:Block[18283-18320]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[18236-18249]:ReturnStatement[18297-18310]"
    }, {
      "left" : "if (signature[3] != 0x37)",
      "right" : "if (signature[3] != 0x37)",
      "info" : "IfStatement[18268-18331]:IfStatement[18329-18392]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18294-18331]:Block[18355-18392]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[18308-18321]:ReturnStatement[18369-18382]"
    }, {
      "left" : "if (signature[4] != 0x30)",
      "right" : "if (signature[4] != 0x30)",
      "info" : "IfStatement[18340-18403]:IfStatement[18401-18464]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18366-18403]:Block[18427-18464]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[18380-18393]:ReturnStatement[18441-18454]"
    }, {
      "left" : "if (signature[5] == 0x31)",
      "right" : "if (signature[5] == 0x31)",
      "info" : "IfStatement[18439-18501]:IfStatement[18500-18562]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18465-18501]:Block[18526-18562]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[18479-18491]:ReturnStatement[18540-18552]"
    }, {
      "left" : "if (signature[5] == 0x32)",
      "right" : "if (signature[5] == 0x32)",
      "info" : "IfStatement[18510-18572]:IfStatement[18571-18633]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18536-18572]:Block[18597-18633]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[18550-18562]:ReturnStatement[18611-18623]"
    }, {
      "left" : "if (signature[5] == 0x37)",
      "right" : "if (signature[5] == 0x37)",
      "info" : "IfStatement[18581-18643]:IfStatement[18642-18704]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18607-18643]:Block[18668-18704]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[18621-18633]:ReturnStatement[18682-18694]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[18653-18666]:ReturnStatement[18714-18727]"
    } ]
  },
  "interFileMappings" : { }
}