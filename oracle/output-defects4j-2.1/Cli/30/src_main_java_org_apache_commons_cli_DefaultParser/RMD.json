{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "DefaultParser",
      "right" : "DefaultParser",
      "info" : "TypeDeclaration[975-20260]:TypeDeclaration[975-20560]"
    }, {
      "left" : "protected CommandLine cmd;",
      "right" : "protected CommandLine cmd;",
      "info" : "FieldDeclaration[1143-1169]:FieldDeclaration[1143-1169]"
    }, {
      "left" : "protected Options options;",
      "right" : "protected Options options;",
      "info" : "FieldDeclaration[1174-1200]:FieldDeclaration[1174-1200]"
    }, {
      "left" : "protected boolean stopAtNonOption;",
      "right" : "protected boolean stopAtNonOption;",
      "info" : "FieldDeclaration[1206-1451]:FieldDeclaration[1206-1451]"
    }, {
      "left" : "protected String currentToken;",
      "right" : "protected String currentToken;",
      "info" : "FieldDeclaration[1457-1529]:FieldDeclaration[1457-1529]"
    }, {
      "left" : "protected Option currentOption;",
      "right" : "protected Option currentOption;",
      "info" : "FieldDeclaration[1539-1605]:FieldDeclaration[1539-1605]"
    }, {
      "left" : "protected boolean skipParsing;",
      "right" : "protected boolean skipParsing;",
      "info" : "FieldDeclaration[1615-1762]:FieldDeclaration[1615-1762]"
    }, {
      "left" : "protected List expectedOpts;",
      "right" : "protected List expectedOpts;",
      "info" : "FieldDeclaration[1772-1884]:FieldDeclaration[1772-1884]"
    }, {
      "left" : "public CommandLine parse(Options options, String[] arguments) throws ParseException",
      "right" : "public CommandLine parse(Options options, String[] arguments) throws ParseException",
      "info" : "MethodDeclaration[1894-2037]:MethodDeclaration[1894-2037]"
    }, {
      "left" : "public CommandLine parse(Options options, String[] arguments, Properties properties) throws ParseException",
      "right" : "public CommandLine parse(Options options, String[] arguments, Properties properties) throws ParseException",
      "info" : "MethodDeclaration[2043-2663]:MethodDeclaration[2043-2663]"
    }, {
      "left" : "public CommandLine parse(Options options, String[] arguments, boolean stopAtNonOption) throws ParseException",
      "right" : "public CommandLine parse(Options options, String[] arguments, boolean stopAtNonOption) throws ParseException",
      "info" : "MethodDeclaration[2669-2854]:MethodDeclaration[2669-2854]"
    }, {
      "left" : "public CommandLine parse(Options options, String[] arguments, Properties properties, boolean stopAtNonOption) throws ParseException",
      "right" : "public CommandLine parse(Options options, String[] arguments, Properties properties, boolean stopAtNonOption) throws ParseException",
      "info" : "MethodDeclaration[2860-4642]:MethodDeclaration[2860-4642]"
    }, {
      "left" : "private void handleProperties(Properties properties) throws ParseException",
      "right" : "private void handleProperties(Properties properties) throws ParseException",
      "info" : "MethodDeclaration[4648-6218]:MethodDeclaration[4648-6518]"
    }, {
      "left" : "private void checkRequiredOptions() throws MissingOptionException",
      "right" : "private void checkRequiredOptions() throws MissingOptionException",
      "info" : "MethodDeclaration[6224-6714]:MethodDeclaration[6524-7014]"
    }, {
      "left" : "private void checkRequiredArgs() throws ParseException",
      "right" : "private void checkRequiredArgs() throws ParseException",
      "info" : "MethodDeclaration[6720-7077]:MethodDeclaration[7020-7377]"
    }, {
      "left" : "private void handleToken(String token) throws ParseException",
      "right" : "private void handleToken(String token) throws ParseException",
      "info" : "MethodDeclaration[7083-8133]:MethodDeclaration[7383-8433]"
    }, {
      "left" : "private boolean isArgument(String token)",
      "right" : "private boolean isArgument(String token)",
      "info" : "MethodDeclaration[8139-8349]:MethodDeclaration[8439-8649]"
    }, {
      "left" : "private boolean isNegativeNumber(String token)",
      "right" : "private boolean isNegativeNumber(String token)",
      "info" : "MethodDeclaration[8355-8687]:MethodDeclaration[8655-8987]"
    }, {
      "left" : "private boolean isOption(String token)",
      "right" : "private boolean isOption(String token)",
      "info" : "MethodDeclaration[8693-8895]:MethodDeclaration[8993-9195]"
    }, {
      "left" : "private boolean isShortOption(String token)",
      "right" : "private boolean isShortOption(String token)",
      "info" : "MethodDeclaration[8901-9220]:MethodDeclaration[9201-9520]"
    }, {
      "left" : "private boolean isLongOption(String token)",
      "right" : "private boolean isLongOption(String token)",
      "info" : "MethodDeclaration[9226-9932]:MethodDeclaration[9526-10232]"
    }, {
      "left" : "private void handleUnknownToken(String token) throws ParseException",
      "right" : "private void handleUnknownToken(String token) throws ParseException",
      "info" : "MethodDeclaration[9938-10743]:MethodDeclaration[10238-11043]"
    }, {
      "left" : "private void handleLongOption(String token) throws ParseException",
      "right" : "private void handleLongOption(String token) throws ParseException",
      "info" : "MethodDeclaration[10749-11217]:MethodDeclaration[11049-11517]"
    }, {
      "left" : "private void handleLongOptionWithoutEqual(String token) throws ParseException",
      "right" : "private void handleLongOptionWithoutEqual(String token) throws ParseException",
      "info" : "MethodDeclaration[11223-11880]:MethodDeclaration[11523-12180]"
    }, {
      "left" : "private void handleLongOptionWithEqual(String token) throws ParseException",
      "right" : "private void handleLongOptionWithEqual(String token) throws ParseException",
      "info" : "MethodDeclaration[11886-13007]:MethodDeclaration[12186-13307]"
    }, {
      "left" : "private void handleShortAndLongOption(String token) throws ParseException",
      "right" : "private void handleShortAndLongOption(String token) throws ParseException",
      "info" : "MethodDeclaration[13013-16114]:MethodDeclaration[13313-16414]"
    }, {
      "left" : "private String getLongPrefix(String token)",
      "right" : "private String getLongPrefix(String token)",
      "info" : "MethodDeclaration[16120-16663]:MethodDeclaration[16420-16963]"
    }, {
      "left" : "private boolean isJavaProperty(String token)",
      "right" : "private boolean isJavaProperty(String token)",
      "info" : "MethodDeclaration[16669-17022]:MethodDeclaration[16969-17322]"
    }, {
      "left" : "private void handleOption(Option option) throws ParseException",
      "right" : "private void handleOption(Option option) throws ParseException",
      "info" : "MethodDeclaration[17028-17509]:MethodDeclaration[17328-17809]"
    }, {
      "left" : "private void updateRequiredOptions(Option option) throws AlreadySelectedException",
      "right" : "private void updateRequiredOptions(Option option) throws AlreadySelectedException",
      "info" : "MethodDeclaration[17515-18213]:MethodDeclaration[17815-18513]"
    }, {
      "left" : "protected void handleConcatenatedOptions(String token) throws ParseException",
      "right" : "protected void handleConcatenatedOptions(String token) throws ParseException",
      "info" : "MethodDeclaration[18219-20258]:MethodDeclaration[18519-20558]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1982-2037]:Block[1982-2037]"
    }, {
      "left" : "return parse(options, arguments, null);",
      "right" : "return parse(options, arguments, null);",
      "info" : "ReturnStatement[1992-2031]:ReturnStatement[1992-2031]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2595-2663]:Block[2595-2663]"
    }, {
      "left" : "return parse(options, arguments, properties, false);",
      "right" : "return parse(options, arguments, properties, false);",
      "info" : "ReturnStatement[2605-2657]:ReturnStatement[2605-2657]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2782-2854]:Block[2782-2854]"
    }, {
      "left" : "return parse(options, arguments, null, stopAtNonOption);",
      "right" : "return parse(options, arguments, null, stopAtNonOption);",
      "info" : "ReturnStatement[2792-2848]:ReturnStatement[2792-2848]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3723-4642]:Block[3723-4642]"
    }, {
      "left" : "this.options = options;",
      "right" : "this.options = options;",
      "info" : "ExpressionStatement[3733-3756]:ExpressionStatement[3733-3756]"
    }, {
      "left" : "this.stopAtNonOption = stopAtNonOption;",
      "right" : "this.stopAtNonOption = stopAtNonOption;",
      "info" : "ExpressionStatement[3765-3804]:ExpressionStatement[3765-3804]"
    }, {
      "left" : "skipParsing = false;",
      "right" : "skipParsing = false;",
      "info" : "ExpressionStatement[3813-3833]:ExpressionStatement[3813-3833]"
    }, {
      "left" : "currentOption = null;",
      "right" : "currentOption = null;",
      "info" : "ExpressionStatement[3842-3863]:ExpressionStatement[3842-3863]"
    }, {
      "left" : "expectedOpts = new ArrayList(options.getRequiredOptions());",
      "right" : "expectedOpts = new ArrayList(options.getRequiredOptions());",
      "info" : "ExpressionStatement[3872-3931]:ExpressionStatement[3872-3931]"
    }, {
      "left" : "for (Iterator it = options.getOptionGroups().iterator(); it.hasNext())",
      "right" : "for (Iterator it = options.getOptionGroups().iterator(); it.hasNext())",
      "info" : "ForStatement[3991-4176]:ForStatement[3991-4176]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4071-4176]:Block[4071-4176]"
    }, {
      "left" : "OptionGroup group = (OptionGroup) it.next();",
      "right" : "OptionGroup group = (OptionGroup) it.next();",
      "info" : "VariableDeclarationStatement[4085-4129]:VariableDeclarationStatement[4085-4129]"
    }, {
      "left" : "group.setSelected(null);",
      "right" : "group.setSelected(null);",
      "info" : "ExpressionStatement[4142-4166]:ExpressionStatement[4142-4166]"
    }, {
      "left" : "cmd = new CommandLine();",
      "right" : "cmd = new CommandLine();",
      "info" : "ExpressionStatement[4194-4218]:ExpressionStatement[4194-4218]"
    }, {
      "left" : "if (arguments != null)",
      "right" : "if (arguments != null)",
      "info" : "IfStatement[4228-4396]:IfStatement[4228-4396]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4259-4396]:Block[4259-4396]"
    }, {
      "left" : "for (int i = 0; i < arguments.length; i++)",
      "right" : "for (int i = 0; i < arguments.length; i++)",
      "info" : "ForStatement[4273-4386]:ForStatement[4273-4386]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4328-4386]:Block[4328-4386]"
    }, {
      "left" : "handleToken(arguments[i]);",
      "right" : "handleToken(arguments[i]);",
      "info" : "ExpressionStatement[4346-4372]:ExpressionStatement[4346-4372]"
    }, {
      "left" : "checkRequiredArgs();",
      "right" : "checkRequiredArgs();",
      "info" : "ExpressionStatement[4464-4484]:ExpressionStatement[4464-4484]"
    }, {
      "left" : "handleProperties(properties);",
      "right" : "handleProperties(properties);",
      "info" : "ExpressionStatement[4537-4566]:ExpressionStatement[4537-4566]"
    }, {
      "left" : "checkRequiredOptions();",
      "right" : "checkRequiredOptions();",
      "info" : "ExpressionStatement[4584-4607]:ExpressionStatement[4584-4607]"
    }, {
      "left" : "return cmd;",
      "right" : "return cmd;",
      "info" : "ReturnStatement[4625-4636]:ReturnStatement[4625-4636]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4892-6218]:Block[4892-6518]"
    }, {
      "left" : "if (properties == null)",
      "right" : "if (properties == null)",
      "info" : "IfStatement[4902-4965]:IfStatement[4902-4965]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4934-4965]:Block[4934-4965]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[4948-4955]:ReturnStatement[4948-4955]"
    }, {
      "left" : "for (Enumeration e = properties.propertyNames(); e.hasMoreElements())",
      "right" : "for (Enumeration e = properties.propertyNames(); e.hasMoreElements())",
      "info" : "ForStatement[4983-6212]:ForStatement[4983-6512]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5062-6212]:Block[5062-6512]"
    }, {
      "left" : "String option = e.nextElement().toString();",
      "right" : "String option = e.nextElement().toString();",
      "info" : "VariableDeclarationStatement[5076-5119]:VariableDeclarationStatement[5076-5119]"
    }, {
      "left" : "if (!cmd.hasOption(option))",
      "right" : "if (!cmd.hasOption(option) && !selected)",
      "info" : "IfStatement[5145-6202]:IfStatement[5618-6502]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5185-6202]:Block[5671-6502]"
    }, {
      "left" : "Option opt = options.getOption(option);",
      "right" : "Option opt = options.getOption(option);",
      "info" : "VariableDeclarationStatement[5203-5242]:VariableDeclarationStatement[5145-5184]"
    }, {
      "left" : "String value = properties.getProperty(option);",
      "right" : "String value = properties.getProperty(option);",
      "info" : "VariableDeclarationStatement[5442-5488]:VariableDeclarationStatement[5742-5788]"
    }, {
      "left" : "if (opt.hasArg())",
      "right" : "if (opt.hasArg())",
      "info" : "IfStatement[5522-6098]:IfStatement[5822-6398]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5556-5757]:Block[5856-6057]"
    }, {
      "left" : "if (opt.getValues() == null || opt.getValues().length == 0)",
      "right" : "if (opt.getValues() == null || opt.getValues().length == 0)",
      "info" : "IfStatement[5578-5739]:IfStatement[5878-6039]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5658-5739]:Block[5958-6039]"
    }, {
      "left" : "opt.addValueForProcessing(value);",
      "right" : "opt.addValueForProcessing(value);",
      "info" : "ExpressionStatement[5684-5717]:ExpressionStatement[5984-6017]"
    }, {
      "left" : "if (!(\"yes\".equalsIgnoreCase(value)\n                        || \"true\".equalsIgnoreCase(value)\n                        || \"1\".equalsIgnoreCase(value)))",
      "right" : "if (!(\"yes\".equalsIgnoreCase(value)\n                        || \"true\".equalsIgnoreCase(value)\n                        || \"1\".equalsIgnoreCase(value)))",
      "info" : "IfStatement[5779-6098]:IfStatement[6079-6398]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5946-6098]:Block[6246-6398]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[6071-6080]:ContinueStatement[6371-6380]"
    }, {
      "left" : "handleOption(opt);",
      "right" : "handleOption(opt);",
      "info" : "ExpressionStatement[6132-6150]:ExpressionStatement[6432-6450]"
    }, {
      "left" : "currentOption = null;",
      "right" : "currentOption = null;",
      "info" : "ExpressionStatement[6167-6188]:ExpressionStatement[6467-6488]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6512-6714]:Block[6812-7014]"
    }, {
      "left" : "if (!expectedOpts.isEmpty())",
      "right" : "if (!expectedOpts.isEmpty())",
      "info" : "IfStatement[6600-6708]:IfStatement[6900-7008]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6637-6708]:Block[6937-7008]"
    }, {
      "left" : "throw new MissingOptionException(expectedOpts);",
      "right" : "throw new MissingOptionException(expectedOpts);",
      "info" : "ThrowStatement[6651-6698]:ThrowStatement[6951-6998]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6921-7077]:Block[7221-7377]"
    }, {
      "left" : "if (currentOption != null && currentOption.requiresArg())",
      "right" : "if (currentOption != null && currentOption.requiresArg())",
      "info" : "IfStatement[6931-7071]:IfStatement[7231-7371]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6997-7071]:Block[7297-7371]"
    }, {
      "left" : "throw new MissingArgumentException(currentOption);",
      "right" : "throw new MissingArgumentException(currentOption);",
      "info" : "ThrowStatement[7011-7061]:ThrowStatement[7311-7361]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7293-8133]:Block[7593-8433]"
    }, {
      "left" : "currentToken = token;",
      "right" : "currentToken = token;",
      "info" : "ExpressionStatement[7303-7324]:ExpressionStatement[7603-7624]"
    }, {
      "left" : "if (skipParsing)",
      "right" : "if (skipParsing)",
      "info" : "IfStatement[7342-7998]:IfStatement[7642-8298]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7367-7409]:Block[7667-7709]"
    }, {
      "left" : "cmd.addArg(token);",
      "right" : "cmd.addArg(token);",
      "info" : "ExpressionStatement[7381-7399]:ExpressionStatement[7681-7699]"
    }, {
      "left" : "if (\"--\".equals(token))",
      "right" : "if (\"--\".equals(token))",
      "info" : "IfStatement[7423-7998]:IfStatement[7723-8298]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7455-7498]:Block[7755-7798]"
    }, {
      "left" : "skipParsing = true;",
      "right" : "skipParsing = true;",
      "info" : "ExpressionStatement[7469-7488]:ExpressionStatement[7769-7788]"
    }, {
      "left" : "if (currentOption != null && currentOption.acceptsArg() && isArgument(token))",
      "right" : "if (currentOption != null && currentOption.acceptsArg() && isArgument(token))",
      "info" : "IfStatement[7512-7998]:IfStatement[7812-8298]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7598-7701]:Block[7898-8001]"
    }, {
      "left" : "currentOption.addValueForProcessing(Util.stripLeadingAndTrailingQuotes(token));",
      "right" : "currentOption.addValueForProcessing(Util.stripLeadingAndTrailingQuotes(token));",
      "info" : "ExpressionStatement[7612-7691]:ExpressionStatement[7912-7991]"
    }, {
      "left" : "if (token.startsWith(\"--\"))",
      "right" : "if (token.startsWith(\"--\"))",
      "info" : "IfStatement[7715-7998]:IfStatement[8015-8298]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7751-7799]:Block[8051-8099]"
    }, {
      "left" : "handleLongOption(token);",
      "right" : "handleLongOption(token);",
      "info" : "ExpressionStatement[7765-7789]:ExpressionStatement[8065-8089]"
    }, {
      "left" : "if (token.startsWith(\"-\") && !\"-\".equals(token))",
      "right" : "if (token.startsWith(\"-\") && !\"-\".equals(token))",
      "info" : "IfStatement[7813-7998]:IfStatement[8113-8298]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7870-7926]:Block[8170-8226]"
    }, {
      "left" : "handleShortAndLongOption(token);",
      "right" : "handleShortAndLongOption(token);",
      "info" : "ExpressionStatement[7884-7916]:ExpressionStatement[8184-8216]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7948-7998]:Block[8248-8298]"
    }, {
      "left" : "handleUnknownToken(token);",
      "right" : "handleUnknownToken(token);",
      "info" : "ExpressionStatement[7962-7988]:ExpressionStatement[8262-8288]"
    }, {
      "left" : "if (currentOption != null && !currentOption.acceptsArg())",
      "right" : "if (currentOption != null && !currentOption.acceptsArg())",
      "info" : "IfStatement[8016-8127]:IfStatement[8316-8427]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8082-8127]:Block[8382-8427]"
    }, {
      "left" : "currentOption = null;",
      "right" : "currentOption = null;",
      "info" : "ExpressionStatement[8096-8117]:ExpressionStatement[8396-8417]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8282-8349]:Block[8582-8649]"
    }, {
      "left" : "return !isOption(token) || isNegativeNumber(token);",
      "right" : "return !isOption(token) || isNegativeNumber(token);",
      "info" : "ReturnStatement[8292-8343]:ReturnStatement[8592-8643]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8498-8687]:Block[8798-8987]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[8508-8681]:TryStatement[8808-8981]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8520-8595]:Block[8820-8895]"
    }, {
      "left" : "Double.parseDouble(token);",
      "right" : "Double.parseDouble(token);",
      "info" : "ExpressionStatement[8534-8560]:ExpressionStatement[8834-8860]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[8573-8585]:ReturnStatement[8873-8885]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8644-8681]:Block[8944-8981]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[8658-8671]:ReturnStatement[8958-8971]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8828-8895]:Block[9128-9195]"
    }, {
      "left" : "return isLongOption(token) || isShortOption(token);",
      "right" : "return isLongOption(token) || isShortOption(token);",
      "info" : "ReturnStatement[8838-8889]:ReturnStatement[9138-9189]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9046-9220]:Block[9346-9520]"
    }, {
      "left" : "return token.startsWith(\"-\") && token.length() >= 2 && options.hasShortOption(token.substring(1, 2));",
      "right" : "return token.startsWith(\"-\") && token.length() >= 2 && options.hasShortOption(token.substring(1, 2));",
      "info" : "ReturnStatement[9113-9214]:ReturnStatement[9413-9514]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9369-9932]:Block[9669-10232]"
    }, {
      "left" : "if (!token.startsWith(\"-\") || token.length() == 1)",
      "right" : "if (!token.startsWith(\"-\") || token.length() == 1)",
      "info" : "IfStatement[9379-9475]:IfStatement[9679-9775]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9438-9475]:Block[9738-9775]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[9452-9465]:ReturnStatement[9752-9765]"
    }, {
      "left" : "int pos = token.indexOf(\"=\");",
      "right" : "int pos = token.indexOf(\"=\");",
      "info" : "VariableDeclarationStatement[9485-9514]:VariableDeclarationStatement[9785-9814]"
    }, {
      "left" : "String t = pos == -1 ? token : token.substring(0, pos);",
      "right" : "String t = pos == -1 ? token : token.substring(0, pos);",
      "info" : "VariableDeclarationStatement[9523-9578]:VariableDeclarationStatement[9823-9878]"
    }, {
      "left" : "if (!options.getMatchingOptions(t).isEmpty())",
      "right" : "if (!options.getMatchingOptions(t).isEmpty())",
      "info" : "IfStatement[9596-9903]:IfStatement[9896-10203]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9650-9765]:Block[9950-10065]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[9743-9755]:ReturnStatement[10043-10055]"
    }, {
      "left" : "if (getLongPrefix(token) != null && !token.startsWith(\"--\"))",
      "right" : "if (getLongPrefix(token) != null && !token.startsWith(\"--\"))",
      "info" : "IfStatement[9779-9903]:IfStatement[10079-10203]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9848-9903]:Block[10148-10203]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[9881-9893]:ReturnStatement[10181-10193]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[9913-9926]:ReturnStatement[10213-10226]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10431-10743]:Block[10731-11043]"
    }, {
      "left" : "if (token.startsWith(\"-\") && token.length() > 1 && !stopAtNonOption)",
      "right" : "if (token.startsWith(\"-\") && token.length() > 1 && !stopAtNonOption)",
      "info" : "IfStatement[10441-10620]:IfStatement[10741-10920]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10518-10620]:Block[10818-10920]"
    }, {
      "left" : "throw new UnrecognizedOptionException(\"Unrecognized option: \" + token, token);",
      "right" : "throw new UnrecognizedOptionException(\"Unrecognized option: \" + token, token);",
      "info" : "ThrowStatement[10532-10610]:ThrowStatement[10832-10910]"
    }, {
      "left" : "cmd.addArg(token);",
      "right" : "cmd.addArg(token);",
      "info" : "ExpressionStatement[10638-10656]:ExpressionStatement[10938-10956]"
    }, {
      "left" : "if (stopAtNonOption)",
      "right" : "if (stopAtNonOption)",
      "info" : "IfStatement[10665-10737]:IfStatement[10965-11037]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10694-10737]:Block[10994-11037]"
    }, {
      "left" : "skipParsing = true;",
      "right" : "skipParsing = true;",
      "info" : "ExpressionStatement[10708-10727]:ExpressionStatement[11008-11027]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10989-11217]:Block[11289-11517]"
    }, {
      "left" : "if (token.indexOf('=') == -1)",
      "right" : "if (token.indexOf('=') == -1)",
      "info" : "IfStatement[10999-11211]:IfStatement[11299-11511]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11037-11097]:Block[11337-11397]"
    }, {
      "left" : "handleLongOptionWithoutEqual(token);",
      "right" : "handleLongOptionWithoutEqual(token);",
      "info" : "ExpressionStatement[11051-11087]:ExpressionStatement[11351-11387]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11119-11211]:Block[11419-11511]"
    }, {
      "left" : "handleLongOptionWithEqual(token);",
      "right" : "handleLongOptionWithEqual(token);",
      "info" : "ExpressionStatement[11133-11166]:ExpressionStatement[11433-11466]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11469-11880]:Block[11769-12180]"
    }, {
      "left" : "List matchingOpts = options.getMatchingOptions(token);",
      "right" : "List matchingOpts = options.getMatchingOptions(token);",
      "info" : "VariableDeclarationStatement[11479-11533]:VariableDeclarationStatement[11779-11833]"
    }, {
      "left" : "if (matchingOpts.isEmpty())",
      "right" : "if (matchingOpts.isEmpty())",
      "info" : "IfStatement[11542-11874]:IfStatement[11842-12174]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11578-11635]:Block[11878-11935]"
    }, {
      "left" : "handleUnknownToken(currentToken);",
      "right" : "handleUnknownToken(currentToken);",
      "info" : "ExpressionStatement[11592-11625]:ExpressionStatement[11892-11925]"
    }, {
      "left" : "if (matchingOpts.size() > 1)",
      "right" : "if (matchingOpts.size() > 1)",
      "info" : "IfStatement[11649-11874]:IfStatement[11949-12174]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11686-11766]:Block[11986-12066]"
    }, {
      "left" : "throw new AmbiguousOptionException(token, matchingOpts);",
      "right" : "throw new AmbiguousOptionException(token, matchingOpts);",
      "info" : "ThrowStatement[11700-11756]:ThrowStatement[12000-12056]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11788-11874]:Block[12088-12174]"
    }, {
      "left" : "handleOption(options.getOption((String) matchingOpts.get(0)));",
      "right" : "handleOption(options.getOption((String) matchingOpts.get(0)));",
      "info" : "ExpressionStatement[11802-11864]:ExpressionStatement[12102-12164]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12137-13007]:Block[12437-13307]"
    }, {
      "left" : "int pos = token.indexOf('=');",
      "right" : "int pos = token.indexOf('=');",
      "info" : "VariableDeclarationStatement[12147-12176]:VariableDeclarationStatement[12447-12476]"
    }, {
      "left" : "String value = token.substring(pos + 1);",
      "right" : "String value = token.substring(pos + 1);",
      "info" : "VariableDeclarationStatement[12186-12226]:VariableDeclarationStatement[12486-12526]"
    }, {
      "left" : "String opt = token.substring(0, pos);",
      "right" : "String opt = token.substring(0, pos);",
      "info" : "VariableDeclarationStatement[12244-12281]:VariableDeclarationStatement[12544-12581]"
    }, {
      "left" : "List matchingOpts = options.getMatchingOptions(opt);",
      "right" : "List matchingOpts = options.getMatchingOptions(opt);",
      "info" : "VariableDeclarationStatement[12299-12351]:VariableDeclarationStatement[12599-12651]"
    }, {
      "left" : "if (matchingOpts.isEmpty())",
      "right" : "if (matchingOpts.isEmpty())",
      "info" : "IfStatement[12360-13001]:IfStatement[12660-13301]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12396-12453]:Block[12696-12753]"
    }, {
      "left" : "handleUnknownToken(currentToken);",
      "right" : "handleUnknownToken(currentToken);",
      "info" : "ExpressionStatement[12410-12443]:ExpressionStatement[12710-12743]"
    }, {
      "left" : "if (matchingOpts.size() > 1)",
      "right" : "if (matchingOpts.size() > 1)",
      "info" : "IfStatement[12467-13001]:IfStatement[12767-13301]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12504-12582]:Block[12804-12882]"
    }, {
      "left" : "throw new AmbiguousOptionException(opt, matchingOpts);",
      "right" : "throw new AmbiguousOptionException(opt, matchingOpts);",
      "info" : "ThrowStatement[12518-12572]:ThrowStatement[12818-12872]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12604-13001]:Block[12904-13301]"
    }, {
      "left" : "Option option = options.getOption((String) matchingOpts.get(0));",
      "right" : "Option option = options.getOption((String) matchingOpts.get(0));",
      "info" : "VariableDeclarationStatement[12618-12682]:VariableDeclarationStatement[12918-12982]"
    }, {
      "left" : "if (option.acceptsArg())",
      "right" : "if (option.acceptsArg())",
      "info" : "IfStatement[12708-12991]:IfStatement[13008-13291]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12745-12896]:Block[13045-13196]"
    }, {
      "left" : "handleOption(option);",
      "right" : "handleOption(option);",
      "info" : "ExpressionStatement[12763-12784]:ExpressionStatement[13063-13084]"
    }, {
      "left" : "currentOption.addValueForProcessing(value);",
      "right" : "currentOption.addValueForProcessing(value);",
      "info" : "ExpressionStatement[12801-12844]:ExpressionStatement[13101-13144]"
    }, {
      "left" : "currentOption = null;",
      "right" : "currentOption = null;",
      "info" : "ExpressionStatement[12861-12882]:ExpressionStatement[13161-13182]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12926-12991]:Block[13226-13291]"
    }, {
      "left" : "handleUnknownToken(currentToken);",
      "right" : "handleUnknownToken(currentToken);",
      "info" : "ExpressionStatement[12944-12977]:ExpressionStatement[13244-13277]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13364-16114]:Block[13664-16414]"
    }, {
      "left" : "String t = Util.stripLeadingHyphens(token);",
      "right" : "String t = Util.stripLeadingHyphens(token);",
      "info" : "VariableDeclarationStatement[13374-13417]:VariableDeclarationStatement[13674-13717]"
    }, {
      "left" : "int pos = t.indexOf('=');",
      "right" : "int pos = t.indexOf('=');",
      "info" : "VariableDeclarationStatement[13435-13460]:VariableDeclarationStatement[13735-13760]"
    }, {
      "left" : "if (t.length() == 1)",
      "right" : "if (t.length() == 1)",
      "info" : "IfStatement[13478-16108]:IfStatement[13778-16408]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13507-13747]:Block[13807-14047]"
    }, {
      "left" : "if (options.hasShortOption(t))",
      "right" : "if (options.hasShortOption(t))",
      "info" : "IfStatement[13539-13737]:IfStatement[13839-14037]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13582-13649]:Block[13882-13949]"
    }, {
      "left" : "handleOption(options.getOption(t));",
      "right" : "handleOption(options.getOption(t));",
      "info" : "ExpressionStatement[13600-13635]:ExpressionStatement[13900-13935]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13679-13737]:Block[13979-14037]"
    }, {
      "left" : "handleUnknownToken(token);",
      "right" : "handleUnknownToken(token);",
      "info" : "ExpressionStatement[13697-13723]:ExpressionStatement[13997-14023]"
    }, {
      "left" : "if (pos == -1)",
      "right" : "if (pos == -1)",
      "info" : "IfStatement[13761-16108]:IfStatement[14061-16408]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13784-15000]:Block[14084-15300]"
    }, {
      "left" : "if (options.hasShortOption(t))",
      "right" : "if (options.hasShortOption(t))",
      "info" : "IfStatement[13798-14990]:IfStatement[14098-15290]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13841-13908]:Block[14141-14208]"
    }, {
      "left" : "handleOption(options.getOption(t));",
      "right" : "handleOption(options.getOption(t));",
      "info" : "ExpressionStatement[13859-13894]:ExpressionStatement[14159-14194]"
    }, {
      "left" : "if (!options.getMatchingOptions(t).isEmpty())",
      "right" : "if (!options.getMatchingOptions(t).isEmpty())",
      "info" : "IfStatement[13926-14990]:IfStatement[14226-15290]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13984-14080]:Block[14284-14380]"
    }, {
      "left" : "handleLongOptionWithoutEqual(token);",
      "right" : "handleLongOptionWithoutEqual(token);",
      "info" : "ExpressionStatement[14030-14066]:ExpressionStatement[14330-14366]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14110-14990]:Block[14410-15290]"
    }, {
      "left" : "String opt = getLongPrefix(t);",
      "right" : "String opt = getLongPrefix(t);",
      "info" : "VariableDeclarationStatement[14181-14211]:VariableDeclarationStatement[14481-14511]"
    }, {
      "left" : "if (opt != null && options.getOption(opt).acceptsArg())",
      "right" : "if (opt != null && options.getOption(opt).acceptsArg())",
      "info" : "IfStatement[14245-14976]:IfStatement[14545-15276]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14317-14520]:Block[14617-14820]"
    }, {
      "left" : "handleOption(options.getOption(opt));",
      "right" : "handleOption(options.getOption(opt));",
      "info" : "ExpressionStatement[14339-14376]:ExpressionStatement[14639-14676]"
    }, {
      "left" : "currentOption.addValueForProcessing(t.substring(opt.length()));",
      "right" : "currentOption.addValueForProcessing(t.substring(opt.length()));",
      "info" : "ExpressionStatement[14397-14460]:ExpressionStatement[14697-14760]"
    }, {
      "left" : "currentOption = null;",
      "right" : "currentOption = null;",
      "info" : "ExpressionStatement[14481-14502]:ExpressionStatement[14781-14802]"
    }, {
      "left" : "if (isJavaProperty(t))",
      "right" : "if (isJavaProperty(t))",
      "info" : "IfStatement[14542-14976]:IfStatement[14842-15276]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14581-14824]:Block[14881-15124]"
    }, {
      "left" : "handleOption(options.getOption(t.substring(0, 1)));",
      "right" : "handleOption(options.getOption(t.substring(0, 1)));",
      "info" : "ExpressionStatement[14640-14691]:ExpressionStatement[14940-14991]"
    }, {
      "left" : "currentOption.addValueForProcessing(t.substring(1));",
      "right" : "currentOption.addValueForProcessing(t.substring(1));",
      "info" : "ExpressionStatement[14712-14764]:ExpressionStatement[15012-15064]"
    }, {
      "left" : "currentOption = null;",
      "right" : "currentOption = null;",
      "info" : "ExpressionStatement[14785-14806]:ExpressionStatement[15085-15106]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14862-14976]:Block[15162-15276]"
    }, {
      "left" : "handleConcatenatedOptions(token);",
      "right" : "handleConcatenatedOptions(token);",
      "info" : "ExpressionStatement[14925-14958]:ExpressionStatement[15225-15258]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15022-16108]:Block[15322-16408]"
    }, {
      "left" : "String opt = t.substring(0, pos);",
      "right" : "String opt = t.substring(0, pos);",
      "info" : "VariableDeclarationStatement[15036-15069]:VariableDeclarationStatement[15336-15369]"
    }, {
      "left" : "String value = t.substring(pos + 1);",
      "right" : "String value = t.substring(pos + 1);",
      "info" : "VariableDeclarationStatement[15082-15118]:VariableDeclarationStatement[15382-15418]"
    }, {
      "left" : "if (opt.length() == 1)",
      "right" : "if (opt.length() == 1)",
      "info" : "IfStatement[15144-16098]:IfStatement[15444-16398]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15179-15621]:Block[15479-15921]"
    }, {
      "left" : "Option option = options.getOption(opt);",
      "right" : "Option option = options.getOption(opt);",
      "info" : "VariableDeclarationStatement[15221-15260]:VariableDeclarationStatement[15521-15560]"
    }, {
      "left" : "if (option != null && option.acceptsArg())",
      "right" : "if (option != null && option.acceptsArg())",
      "info" : "IfStatement[15277-15607]:IfStatement[15577-15907]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15336-15503]:Block[15636-15803]"
    }, {
      "left" : "handleOption(option);",
      "right" : "handleOption(option);",
      "info" : "ExpressionStatement[15358-15379]:ExpressionStatement[15658-15679]"
    }, {
      "left" : "currentOption.addValueForProcessing(value);",
      "right" : "currentOption.addValueForProcessing(value);",
      "info" : "ExpressionStatement[15400-15443]:ExpressionStatement[15700-15743]"
    }, {
      "left" : "currentOption = null;",
      "right" : "currentOption = null;",
      "info" : "ExpressionStatement[15464-15485]:ExpressionStatement[15764-15785]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15541-15607]:Block[15841-15907]"
    }, {
      "left" : "handleUnknownToken(token);",
      "right" : "handleUnknownToken(token);",
      "info" : "ExpressionStatement[15563-15589]:ExpressionStatement[15863-15889]"
    }, {
      "left" : "if (isJavaProperty(opt))",
      "right" : "if (isJavaProperty(opt))",
      "info" : "IfStatement[15639-16098]:IfStatement[15939-16398]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15676-15971]:Block[15976-16271]"
    }, {
      "left" : "handleOption(options.getOption(opt.substring(0, 1)));",
      "right" : "handleOption(options.getOption(opt.substring(0, 1)));",
      "info" : "ExpressionStatement[15735-15788]:ExpressionStatement[16035-16088]"
    }, {
      "left" : "currentOption.addValueForProcessing(opt.substring(1));",
      "right" : "currentOption.addValueForProcessing(opt.substring(1));",
      "info" : "ExpressionStatement[15805-15859]:ExpressionStatement[16105-16159]"
    }, {
      "left" : "currentOption.addValueForProcessing(value);",
      "right" : "currentOption.addValueForProcessing(value);",
      "info" : "ExpressionStatement[15876-15919]:ExpressionStatement[16176-16219]"
    }, {
      "left" : "currentOption = null;",
      "right" : "currentOption = null;",
      "info" : "ExpressionStatement[15936-15957]:ExpressionStatement[16236-16257]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16001-16098]:Block[16301-16398]"
    }, {
      "left" : "handleLongOptionWithEqual(token);",
      "right" : "handleLongOptionWithEqual(token);",
      "info" : "ExpressionStatement[16051-16084]:ExpressionStatement[16351-16384]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16284-16663]:Block[16584-16963]"
    }, {
      "left" : "String t = Util.stripLeadingHyphens(token);",
      "right" : "String t = Util.stripLeadingHyphens(token);",
      "info" : "VariableDeclarationStatement[16294-16337]:VariableDeclarationStatement[16594-16637]"
    }, {
      "left" : "int i;",
      "right" : "int i;",
      "info" : "VariableDeclarationStatement[16355-16361]:VariableDeclarationStatement[16655-16661]"
    }, {
      "left" : "String opt = null;",
      "right" : "String opt = null;",
      "info" : "VariableDeclarationStatement[16370-16388]:VariableDeclarationStatement[16670-16688]"
    }, {
      "left" : "for (i = t.length() - 2; i > 1; i--)",
      "right" : "for (i = t.length() - 2; i > 1; i--)",
      "info" : "ForStatement[16397-16628]:ForStatement[16697-16928]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16442-16628]:Block[16742-16928]"
    }, {
      "left" : "String prefix = t.substring(0, i);",
      "right" : "String prefix = t.substring(0, i);",
      "info" : "VariableDeclarationStatement[16456-16490]:VariableDeclarationStatement[16756-16790]"
    }, {
      "left" : "if (options.hasLongOption(prefix))",
      "right" : "if (options.hasLongOption(prefix))",
      "info" : "IfStatement[16503-16618]:IfStatement[16803-16918]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16550-16618]:Block[16850-16918]"
    }, {
      "left" : "opt = prefix;",
      "right" : "opt = prefix;",
      "info" : "ExpressionStatement[16568-16581]:ExpressionStatement[16868-16881]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[16598-16604]:BreakStatement[16898-16904]"
    }, {
      "left" : "return opt;",
      "right" : "return opt;",
      "info" : "ReturnStatement[16646-16657]:ReturnStatement[16946-16957]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16809-17022]:Block[17109-17322]"
    }, {
      "left" : "String opt = token.substring(0, 1);",
      "right" : "String opt = token.substring(0, 1);",
      "info" : "VariableDeclarationStatement[16819-16854]:VariableDeclarationStatement[17119-17154]"
    }, {
      "left" : "Option option = options.getOption(opt);",
      "right" : "Option option = options.getOption(opt);",
      "info" : "VariableDeclarationStatement[16863-16902]:VariableDeclarationStatement[17163-17202]"
    }, {
      "left" : "return option != null && (option.getArgs() >= 2 || option.getArgs() == Option.UNLIMITED_VALUES);",
      "right" : "return option != null && (option.getArgs() >= 2 || option.getArgs() == Option.UNLIMITED_VALUES);",
      "info" : "ReturnStatement[16920-17016]:ReturnStatement[17220-17316]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17095-17509]:Block[17395-17809]"
    }, {
      "left" : "checkRequiredArgs();",
      "right" : "checkRequiredArgs();",
      "info" : "ExpressionStatement[17171-17191]:ExpressionStatement[17471-17491]"
    }, {
      "left" : "option = (Option) option.clone();",
      "right" : "option = (Option) option.clone();",
      "info" : "ExpressionStatement[17209-17242]:ExpressionStatement[17509-17542]"
    }, {
      "left" : "updateRequiredOptions(option);",
      "right" : "updateRequiredOptions(option);",
      "info" : "ExpressionStatement[17260-17290]:ExpressionStatement[17560-17590]"
    }, {
      "left" : "cmd.addOption(option);",
      "right" : "cmd.addOption(option);",
      "info" : "ExpressionStatement[17308-17330]:ExpressionStatement[17608-17630]"
    }, {
      "left" : "if (option.hasArg())",
      "right" : "if (option.hasArg())",
      "info" : "IfStatement[17348-17503]:IfStatement[17648-17803]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17377-17436]:Block[17677-17736]"
    }, {
      "left" : "currentOption = option;",
      "right" : "currentOption = option;",
      "info" : "ExpressionStatement[17391-17414]:ExpressionStatement[17691-17714]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17458-17503]:Block[17758-17803]"
    }, {
      "left" : "currentOption = null;",
      "right" : "currentOption = null;",
      "info" : "ExpressionStatement[17472-17493]:ExpressionStatement[17772-17793]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17721-18213]:Block[18021-18513]"
    }, {
      "left" : "if (option.isRequired())",
      "right" : "if (option.isRequired())",
      "info" : "IfStatement[17731-17825]:IfStatement[18031-18125]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17764-17825]:Block[18064-18125]"
    }, {
      "left" : "expectedOpts.remove(option.getKey());",
      "right" : "expectedOpts.remove(option.getKey());",
      "info" : "ExpressionStatement[17778-17815]:ExpressionStatement[18078-18115]"
    }, {
      "left" : "if (options.getOptionGroup(option) != null)",
      "right" : "if (options.getOptionGroup(option) != null)",
      "info" : "IfStatement[17931-18207]:IfStatement[18231-18507]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17983-18207]:Block[18283-18507]"
    }, {
      "left" : "OptionGroup group = options.getOptionGroup(option);",
      "right" : "OptionGroup group = options.getOptionGroup(option);",
      "info" : "VariableDeclarationStatement[17997-18048]:VariableDeclarationStatement[18297-18348]"
    }, {
      "left" : "if (group.isRequired())",
      "right" : "if (group.isRequired())",
      "info" : "IfStatement[18062-18157]:IfStatement[18362-18457]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18098-18157]:Block[18398-18457]"
    }, {
      "left" : "expectedOpts.remove(group);",
      "right" : "expectedOpts.remove(group);",
      "info" : "ExpressionStatement[18116-18143]:ExpressionStatement[18416-18443]"
    }, {
      "left" : "group.setSelected(option);",
      "right" : "group.setSelected(option);",
      "info" : "ExpressionStatement[18171-18197]:ExpressionStatement[18471-18497]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19528-20258]:Block[19828-20558]"
    }, {
      "left" : "for (int i = 1; i < token.length(); i++)",
      "right" : "for (int i = 1; i < token.length(); i++)",
      "info" : "ForStatement[19538-20252]:ForStatement[19838-20552]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19587-20252]:Block[19887-20552]"
    }, {
      "left" : "String ch = String.valueOf(token.charAt(i));",
      "right" : "String ch = String.valueOf(token.charAt(i));",
      "info" : "VariableDeclarationStatement[19601-19645]:VariableDeclarationStatement[19901-19945]"
    }, {
      "left" : "if (options.hasOption(ch))",
      "right" : "if (options.hasOption(ch))",
      "info" : "IfStatement[19659-20242]:IfStatement[19959-20542]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19698-20067]:Block[19998-20367]"
    }, {
      "left" : "handleOption(options.getOption(ch));",
      "right" : "handleOption(options.getOption(ch));",
      "info" : "ExpressionStatement[19716-19752]:ExpressionStatement[20016-20052]"
    }, {
      "left" : "if (currentOption != null && (token.length() != (i + 1)))",
      "right" : "if (currentOption != null && (token.length() != (i + 1)))",
      "info" : "IfStatement[19786-20053]:IfStatement[20086-20353]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19860-20053]:Block[20160-20353]"
    }, {
      "left" : "currentOption.addValueForProcessing(token.substring(i + 1));",
      "right" : "currentOption.addValueForProcessing(token.substring(i + 1));",
      "info" : "ExpressionStatement[19948-20008]:ExpressionStatement[20248-20308]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[20029-20035]:BreakStatement[20329-20335]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20097-20242]:Block[20397-20542]"
    }, {
      "left" : "handleUnknownToken(stopAtNonOption && i > 1 ? token.substring(i) : token);",
      "right" : "handleUnknownToken(stopAtNonOption && i > 1 ? token.substring(i) : token);",
      "info" : "ExpressionStatement[20131-20205]:ExpressionStatement[20431-20505]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[20222-20228]:BreakStatement[20522-20528]"
    } ]
  },
  "interFileMappings" : { }
}