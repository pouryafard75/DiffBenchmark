{
  "matchedElements" : [
 {
    "left" : "class : IndexTest",
    "right" : "class : IndexTest",
    "info" : "TypeDeclaration[1883-18070]:TypeDeclaration[1893-18080]"
  }, {
    "left" : "FACTORY_ID",
    "right" : "FACTORY_ID",
    "info" : "FieldDeclaration[1983-2017]:FieldDeclaration[1993-2027]"
  }, {
    "left" : "ss",
    "right" : "ss",
    "info" : "FieldDeclaration[2023-2175]:FieldDeclaration[2033-2185]"
  }, {
    "left" : "public testBasics() : void",
    "right" : "public testBasics() : void",
    "info" : "MethodDeclaration[2181-2268]:MethodDeclaration[2191-2278]"
  }, {
    "left" : "private newRecord(key , attributeValue ) : ",
    "right" : "private newRecord(key , attributeValue ) : ",
    "info" : "MethodDeclaration[2274-2417]:MethodDeclaration[2284-2427]"
  }, {
    "left" : "public testRemoveEnumIndex() : void",
    "right" : "public testRemoveEnumIndex() : void",
    "info" : "MethodDeclaration[2423-2953]:MethodDeclaration[2433-2963]"
  }, {
    "left" : "public testIndex() : void",
    "right" : "public testIndex() : void",
    "info" : "MethodDeclaration[2959-5719]:MethodDeclaration[2969-5729]"
  }, {
    "left" : "public testIndexWithNull() : void",
    "right" : "public testIndexWithNull() : void",
    "info" : "MethodDeclaration[5725-6641]:MethodDeclaration[5735-6651]"
  }, {
    "left" : "class : TestPortableFactory",
    "right" : "class : TestPortableFactory",
    "info" : "TypeDeclaration[6647-6991]:TypeDeclaration[6657-7001]"
  }, {
    "left" : "public create(classId int) : ",
    "right" : "public create(classId int) : ",
    "info" : "MethodDeclaration[6719-6907]:MethodDeclaration[6729-6917]"
  }, {
    "left" : "public getFactoryId() : int",
    "right" : "public getFactoryId() : int",
    "info" : "MethodDeclaration[6917-6985]:MethodDeclaration[6927-6995]"
  }, {
    "left" : "class : SerializableWithEnum",
    "right" : "class : SerializableWithEnum",
    "info" : "TypeDeclaration[6997-7677]:TypeDeclaration[7007-7687]"
  }, {
    "left" : "favoriteCity",
    "right" : "favoriteCity",
    "info" : "FieldDeclaration[7190-7216]:FieldDeclaration[7200-7226]"
  }, {
    "left" : "private SerializableWithEnum()",
    "right" : "private SerializableWithEnum()",
    "info" : "MethodDeclaration[7226-7268]:MethodDeclaration[7236-7278]"
  }, {
    "left" : "private SerializableWithEnum(favoriteCity )",
    "right" : "private SerializableWithEnum(favoriteCity )",
    "info" : "MethodDeclaration[7278-7383]:MethodDeclaration[7288-7393]"
  }, {
    "left" : "public writeData(out ) : void",
    "right" : "public writeData(out ) : void",
    "info" : "MethodDeclaration[7393-7528]:MethodDeclaration[7403-7538]"
  }, {
    "left" : "public readData(in ) : void",
    "right" : "public readData(in ) : void",
    "info" : "MethodDeclaration[7538-7671]:MethodDeclaration[7548-7681]"
  }, {
    "left" : "class : MainPortable",
    "right" : "class : MainPortable",
    "info" : "TypeDeclaration[7683-11374]:TypeDeclaration[7693-11384]"
  }, {
    "left" : "b",
    "right" : "b",
    "info" : "FieldDeclaration[7748-7755]:FieldDeclaration[7758-7765]"
  }, {
    "left" : "bool",
    "right" : "bool",
    "info" : "FieldDeclaration[7764-7777]:FieldDeclaration[7774-7787]"
  }, {
    "left" : "c",
    "right" : "c",
    "info" : "FieldDeclaration[7786-7793]:FieldDeclaration[7796-7803]"
  }, {
    "left" : "s",
    "right" : "s",
    "info" : "FieldDeclaration[7802-7810]:FieldDeclaration[7812-7820]"
  }, {
    "left" : "i",
    "right" : "i",
    "info" : "FieldDeclaration[7819-7825]:FieldDeclaration[7829-7835]"
  }, {
    "left" : "l",
    "right" : "l",
    "info" : "FieldDeclaration[7834-7841]:FieldDeclaration[7844-7851]"
  }, {
    "left" : "f",
    "right" : "f",
    "info" : "FieldDeclaration[7850-7858]:FieldDeclaration[7860-7868]"
  }, {
    "left" : "d",
    "right" : "d",
    "info" : "FieldDeclaration[7867-7876]:FieldDeclaration[7877-7886]"
  }, {
    "left" : "str",
    "right" : "str",
    "info" : "FieldDeclaration[7885-7896]:FieldDeclaration[7895-7906]"
  }, {
    "left" : "private MainPortable()",
    "right" : "private MainPortable()",
    "info" : "MethodDeclaration[7906-7940]:MethodDeclaration[7916-7950]"
  }, {
    "left" : "private MainPortable(bool boolean, d double, str )",
    "right" : "private MainPortable(bool boolean, d double, str )",
    "info" : "MethodDeclaration[7950-8100]:MethodDeclaration[7960-8110]"
  }, {
    "left" : "private MainPortable(b byte, bool boolean, c char, s short, i int, l long, f float, d double, str )",
    "right" : "private MainPortable(b byte, bool boolean, c char, s short, i int, l long, f float, d double, str )",
    "info" : "MethodDeclaration[8110-8482]:MethodDeclaration[8120-8492]"
  }, {
    "left" : "public getClassId() : int",
    "right" : "public getClassId() : int",
    "info" : "MethodDeclaration[8492-8549]:MethodDeclaration[8502-8559]"
  }, {
    "left" : "public writePortable(writer ) : void",
    "right" : "public writePortable(writer ) : void",
    "info" : "MethodDeclaration[8559-8995]:MethodDeclaration[8569-9005]"
  }, {
    "left" : "public readPortable(reader ) : void",
    "right" : "public readPortable(reader ) : void",
    "info" : "MethodDeclaration[9005-9440]:MethodDeclaration[9015-9450]"
  }, {
    "left" : "public equals(o ) : boolean",
    "right" : "public equals(o ) : boolean",
    "info" : "MethodDeclaration[9450-10170]:MethodDeclaration[9460-10180]"
  }, {
    "left" : "public hashCode() : int",
    "right" : "public hashCode() : int",
    "info" : "MethodDeclaration[10180-10851]:MethodDeclaration[10190-10861]"
  }, {
    "left" : "public toString() : ",
    "right" : "public toString() : ",
    "info" : "MethodDeclaration[10861-11290]:MethodDeclaration[10871-11300]"
  }, {
    "left" : "public getFactoryId() : int",
    "right" : "public getFactoryId() : int",
    "info" : "MethodDeclaration[11300-11368]:MethodDeclaration[11310-11378]"
  }, {
    "left" : "class : QueryRecord",
    "right" : "class : QueryRecord",
    "info" : "TypeDeclaration[11380-12806]:TypeDeclaration[11390-12816]"
  }, {
    "left" : "key",
    "right" : "key",
    "info" : "FieldDeclaration[11434-11443]:FieldDeclaration[11444-11453]"
  }, {
    "left" : "attributeValue",
    "right" : "attributeValue",
    "info" : "FieldDeclaration[11452-11478]:FieldDeclaration[11462-11488]"
  }, {
    "left" : "package QueryRecord(key , attributeValue )",
    "right" : "package QueryRecord(key , attributeValue )",
    "info" : "MethodDeclaration[11488-11626]:MethodDeclaration[11498-11636]"
  }, {
    "left" : "public getAttribute(attributeName ) : ",
    "right" : "public getAttribute(attributeName ) : ",
    "info" : "MethodDeclaration[11636-11757]:MethodDeclaration[11646-11767]"
  }, {
    "left" : "public getAttributeType(attributeName ) : ",
    "right" : "public getAttributeType(attributeName ) : ",
    "info" : "MethodDeclaration[11767-11919]:MethodDeclaration[11777-11929]"
  }, {
    "left" : "public getKeyData() : ",
    "right" : "public getKeyData() : ",
    "info" : "MethodDeclaration[11929-11989]:MethodDeclaration[11939-11999]"
  }, {
    "left" : "public getValueData() : ",
    "right" : "public getValueData() : ",
    "info" : "MethodDeclaration[11999-12062]:MethodDeclaration[12009-12072]"
  }, {
    "left" : "public getIndexKey() : ",
    "right" : "public getIndexKey() : ",
    "info" : "MethodDeclaration[12072-12133]:MethodDeclaration[12082-12143]"
  }, {
    "left" : "public getCreationTime() : long",
    "right" : "public getCreationTime() : long",
    "info" : "MethodDeclaration[12143-12206]:MethodDeclaration[12153-12216]"
  }, {
    "left" : "public getLastAccessTime() : long",
    "right" : "public getLastAccessTime() : long",
    "info" : "MethodDeclaration[12216-12281]:MethodDeclaration[12226-12291]"
  }, {
    "left" : "public getKey() : ",
    "right" : "public getKey() : ",
    "info" : "MethodDeclaration[12291-12349]:MethodDeclaration[12301-12359]"
  }, {
    "left" : "public getValue() : ",
    "right" : "public getValue() : ",
    "info" : "MethodDeclaration[12359-12420]:MethodDeclaration[12369-12430]"
  }, {
    "left" : "public setValue(value ) : ",
    "right" : "public setValue(value ) : ",
    "info" : "MethodDeclaration[12430-12503]:MethodDeclaration[12440-12513]"
  }, {
    "left" : "public changeAttribute(newAttributeValue ) : void",
    "right" : "public changeAttribute(newAttributeValue ) : void",
    "info" : "MethodDeclaration[12513-12635]:MethodDeclaration[12523-12645]"
  }, {
    "left" : "public writeData(out ) : void",
    "right" : "public writeData(out ) : void",
    "info" : "MethodDeclaration[12645-12719]:MethodDeclaration[12655-12729]"
  }, {
    "left" : "public readData(in ) : void",
    "right" : "public readData(in ) : void",
    "info" : "MethodDeclaration[12729-12800]:MethodDeclaration[12739-12810]"
  }, {
    "left" : "private testIt(ordered boolean) : void",
    "right" : "private testIt(ordered boolean) : void",
    "info" : "MethodDeclaration[12812-18068]:MethodDeclaration[12822-18078]"
  } ],
  "mappings" : [
 {
    "left" : "com.hazelcast.query.Predicates.AndPredicate",
    "right" : "com.hazelcast.query.impl.predicates.AndPredicate",
    "info" : "QualifiedName[1212-1255]:QualifiedName[1212-1260]"
  }, {
    "left" : "com.hazelcast.query.Predicates.EqualPredicate",
    "right" : "com.hazelcast.query.impl.predicates.EqualPredicate",
    "info" : "QualifiedName[1264-1309]:QualifiedName[1269-1319]"
  }, {
    "left" : "@RunWith(HazelcastSerialClassRunner.class)",
    "right" : "@RunWith(HazelcastSerialClassRunner.class)",
    "info" : "SingleMemberAnnotation[1883-1925]:SingleMemberAnnotation[1893-1935]"
  }, {
    "left" : "@Category(QuickTest.class)",
    "right" : "@Category(QuickTest.class)",
    "info" : "SingleMemberAnnotation[1926-1952]:SingleMemberAnnotation[1936-1962]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[1953-1959]:Modifier[1963-1969]"
  }, {
    "left" : "class",
    "right" : "class",
    "info" : "TYPE_DECLARATION_KIND[1960-1965]:TYPE_DECLARATION_KIND[1970-1975]"
  }, {
    "left" : "@Test",
    "right" : "@Test",
    "info" : "MarkerAnnotation[2181-2186]:MarkerAnnotation[2191-2196]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[2191-2197]:Modifier[2201-2207]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[2198-2202]:PrimitiveType[2208-2212]"
  }, {
    "left" : "testBasics",
    "right" : "testBasics",
    "info" : "SimpleName[2203-2213]:SimpleName[2213-2223]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[2216-2268]:Block[2226-2278]"
  }, {
    "left" : "testIt(true);",
    "right" : "testIt(true);",
    "info" : "ExpressionStatement[2226-2239]:ExpressionStatement[2236-2249]"
  }, {
    "left" : "testIt(false);",
    "right" : "testIt(false);",
    "info" : "ExpressionStatement[2248-2262]:ExpressionStatement[2258-2272]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[2274-2281]:Modifier[2284-2291]"
  }, {
    "left" : "QueryRecord",
    "right" : "QueryRecord",
    "info" : "SimpleType[2282-2293]:SimpleType[2292-2303]"
  }, {
    "left" : "newRecord",
    "right" : "newRecord",
    "info" : "SimpleName[2294-2303]:SimpleName[2304-2313]"
  }, {
    "left" : "Object key",
    "right" : "Object key",
    "info" : "SingleVariableDeclaration[2304-2314]:SingleVariableDeclaration[2314-2324]"
  }, {
    "left" : "final Comparable attributeValue",
    "right" : "final Comparable attributeValue",
    "info" : "SingleVariableDeclaration[2316-2347]:SingleVariableDeclaration[2326-2357]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[2349-2417]:Block[2359-2427]"
  }, {
    "left" : "return new QueryRecord(toData(key), attributeValue);",
    "right" : "return new QueryRecord(toData(key), attributeValue);",
    "info" : "ReturnStatement[2359-2411]:ReturnStatement[2369-2421]"
  }, {
    "left" : "@Test",
    "right" : "@Test",
    "info" : "MarkerAnnotation[2423-2428]:MarkerAnnotation[2433-2438]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[2433-2439]:Modifier[2443-2449]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[2440-2444]:PrimitiveType[2450-2454]"
  }, {
    "left" : "testRemoveEnumIndex",
    "right" : "testRemoveEnumIndex",
    "info" : "SimpleName[2445-2464]:SimpleName[2455-2474]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[2467-2953]:Block[2477-2963]"
  }, {
    "left" : "IndexService is = new IndexService();",
    "right" : "IndexService is = new IndexService();",
    "info" : "VariableDeclarationStatement[2477-2514]:VariableDeclarationStatement[2487-2524]"
  }, {
    "left" : "is.addOrGetIndex(\"favoriteCity\", false);",
    "right" : "is.addOrGetIndex(\"favoriteCity\", false);",
    "info" : "ExpressionStatement[2523-2563]:ExpressionStatement[2533-2573]"
  }, {
    "left" : "Data key = ss.toData(1);",
    "right" : "Data key = ss.toData(1);",
    "info" : "VariableDeclarationStatement[2572-2596]:VariableDeclarationStatement[2582-2606]"
  }, {
    "left" : "Data value = ss.toData(new SerializableWithEnum(SerializableWithEnum.City.Istanbul));",
    "right" : "Data value = ss.toData(new SerializableWithEnum(SerializableWithEnum.City.Istanbul));",
    "info" : "VariableDeclarationStatement[2605-2690]:VariableDeclarationStatement[2615-2700]"
  }, {
    "left" : "is.saveEntryIndex(new QueryEntry(ss, key, key, value));",
    "right" : "is.saveEntryIndex(new QueryEntry(ss, key, key, value));",
    "info" : "ExpressionStatement[2699-2754]:ExpressionStatement[2709-2764]"
  }, {
    "left" : "assertNotNull(is.getIndex(\"favoriteCity\"));",
    "right" : "assertNotNull(is.getIndex(\"favoriteCity\"));",
    "info" : "ExpressionStatement[2763-2806]:ExpressionStatement[2773-2816]"
  }, {
    "left" : "is.removeEntryIndex(key);",
    "right" : "is.removeEntryIndex(key);",
    "info" : "ExpressionStatement[2815-2840]:ExpressionStatement[2825-2850]"
  }, {
    "left" : "assertEquals(0,is.getIndex(\"favoriteCity\").getRecords(SerializableWithEnum.City.Istanbul).size());",
    "right" : "assertEquals(0,is.getIndex(\"favoriteCity\").getRecords(SerializableWithEnum.City.Istanbul).size());",
    "info" : "ExpressionStatement[2849-2947]:ExpressionStatement[2859-2957]"
  }, {
    "left" : "@Test",
    "right" : "@Test",
    "info" : "MarkerAnnotation[2959-2964]:MarkerAnnotation[2969-2974]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[2969-2975]:Modifier[2979-2985]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[2976-2980]:PrimitiveType[2986-2990]"
  }, {
    "left" : "testIndex",
    "right" : "testIndex",
    "info" : "SimpleName[2981-2990]:SimpleName[2991-3000]"
  }, {
    "left" : "QueryException",
    "right" : "QueryException",
    "info" : "SimpleType[3000-3014]:SimpleType[3010-3024]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3015-5719]:Block[3025-5729]"
  }, {
    "left" : "IndexService is = new IndexService();",
    "right" : "IndexService is = new IndexService();",
    "info" : "VariableDeclarationStatement[3025-3062]:VariableDeclarationStatement[3035-3072]"
  }, {
    "left" : "Index dIndex = is.addOrGetIndex(\"d\", false);",
    "right" : "Index dIndex = is.addOrGetIndex(\"d\", false);",
    "info" : "VariableDeclarationStatement[3071-3115]:VariableDeclarationStatement[3081-3125]"
  }, {
    "left" : "Index boolIndex = is.addOrGetIndex(\"bool\", false);",
    "right" : "Index boolIndex = is.addOrGetIndex(\"bool\", false);",
    "info" : "VariableDeclarationStatement[3124-3174]:VariableDeclarationStatement[3134-3184]"
  }, {
    "left" : "Index strIndex = is.addOrGetIndex(\"str\", false);",
    "right" : "Index strIndex = is.addOrGetIndex(\"str\", false);",
    "info" : "VariableDeclarationStatement[3183-3231]:VariableDeclarationStatement[3193-3241]"
  }, {
    "left" : "for (int i = 0; i < 1000; i++)",
    "right" : "for (int i = 0; i < 1000; i++)",
    "info" : "ForStatement[3240-3473]:ForStatement[3250-3483]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3271-3473]:Block[3281-3483]"
  }, {
    "left" : "Data key = ss.toData(i);",
    "right" : "Data key = ss.toData(i);",
    "info" : "VariableDeclarationStatement[3285-3309]:VariableDeclarationStatement[3295-3319]"
  }, {
    "left" : "Data value = ss.toData(new MainPortable(i % 2 == 0, -10.34d, \"joe\" + i));",
    "right" : "Data value = ss.toData(new MainPortable(i % 2 == 0, -10.34d, \"joe\" + i));",
    "info" : "VariableDeclarationStatement[3322-3395]:VariableDeclarationStatement[3332-3405]"
  }, {
    "left" : "is.saveEntryIndex(new QueryEntry(ss, key, key, value));",
    "right" : "is.saveEntryIndex(new QueryEntry(ss, key, key, value));",
    "info" : "ExpressionStatement[3408-3463]:ExpressionStatement[3418-3473]"
  }, {
    "left" : "assertEquals(1000, dIndex.getRecords(-10.34d).size());",
    "right" : "assertEquals(1000, dIndex.getRecords(-10.34d).size());",
    "info" : "ExpressionStatement[3482-3536]:ExpressionStatement[3492-3546]"
  }, {
    "left" : "assertEquals(1, strIndex.getRecords(\"joe23\").size());",
    "right" : "assertEquals(1, strIndex.getRecords(\"joe23\").size());",
    "info" : "ExpressionStatement[3545-3598]:ExpressionStatement[3555-3608]"
  }, {
    "left" : "assertEquals(500, boolIndex.getRecords(true).size());",
    "right" : "assertEquals(500, boolIndex.getRecords(true).size());",
    "info" : "ExpressionStatement[3607-3660]:ExpressionStatement[3617-3670]"
  }, {
    "left" : "for (int i = 0; i < 1000; i++)",
    "right" : "for (int i = 0; i < 1000; i++)",
    "info" : "ForStatement[3669-3892]:ForStatement[3679-3902]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3700-3892]:Block[3710-3902]"
  }, {
    "left" : "Data key = ss.toData(i);",
    "right" : "Data key = ss.toData(i);",
    "info" : "VariableDeclarationStatement[3714-3738]:VariableDeclarationStatement[3724-3748]"
  }, {
    "left" : "Data value = ss.toData(new MainPortable(false, 11.34d, \"joe\"));",
    "right" : "Data value = ss.toData(new MainPortable(false, 11.34d, \"joe\"));",
    "info" : "VariableDeclarationStatement[3751-3814]:VariableDeclarationStatement[3761-3824]"
  }, {
    "left" : "is.saveEntryIndex(new QueryEntry(ss, key, key, value));",
    "right" : "is.saveEntryIndex(new QueryEntry(ss, key, key, value));",
    "info" : "ExpressionStatement[3827-3882]:ExpressionStatement[3837-3892]"
  }, {
    "left" : "assertEquals(0, dIndex.getRecords(-10.34d).size());",
    "right" : "assertEquals(0, dIndex.getRecords(-10.34d).size());",
    "info" : "ExpressionStatement[3901-3952]:ExpressionStatement[3911-3962]"
  }, {
    "left" : "assertEquals(0, strIndex.getRecords(\"joe23\").size());",
    "right" : "assertEquals(0, strIndex.getRecords(\"joe23\").size());",
    "info" : "ExpressionStatement[3961-4014]:ExpressionStatement[3971-4024]"
  }, {
    "left" : "assertEquals(1000, strIndex.getRecords(\"joe\").size());",
    "right" : "assertEquals(1000, strIndex.getRecords(\"joe\").size());",
    "info" : "ExpressionStatement[4023-4077]:ExpressionStatement[4033-4087]"
  }, {
    "left" : "assertEquals(1000, boolIndex.getRecords(false).size());",
    "right" : "assertEquals(1000, boolIndex.getRecords(false).size());",
    "info" : "ExpressionStatement[4086-4141]:ExpressionStatement[4096-4151]"
  }, {
    "left" : "assertEquals(0, boolIndex.getRecords(true).size());",
    "right" : "assertEquals(0, boolIndex.getRecords(true).size());",
    "info" : "ExpressionStatement[4150-4201]:ExpressionStatement[4160-4211]"
  }, {
    "left" : "for (int i = 0; i < 1000; i++)",
    "right" : "for (int i = 0; i < 1000; i++)",
    "info" : "ForStatement[4210-4443]:ForStatement[4220-4453]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4241-4443]:Block[4251-4453]"
  }, {
    "left" : "Data key = ss.toData(i);",
    "right" : "Data key = ss.toData(i);",
    "info" : "VariableDeclarationStatement[4255-4279]:VariableDeclarationStatement[4265-4289]"
  }, {
    "left" : "Data value = ss.toData(new MainPortable(false, -1 * (i + 1), \"joe\" + i));",
    "right" : "Data value = ss.toData(new MainPortable(false, -1 * (i + 1), \"joe\" + i));",
    "info" : "VariableDeclarationStatement[4292-4365]:VariableDeclarationStatement[4302-4375]"
  }, {
    "left" : "is.saveEntryIndex(new QueryEntry(ss, key, key, value));",
    "right" : "is.saveEntryIndex(new QueryEntry(ss, key, key, value));",
    "info" : "ExpressionStatement[4378-4433]:ExpressionStatement[4388-4443]"
  }, {
    "left" : "assertEquals(0, dIndex.getSubRecordsBetween(1d, 1001d).size());",
    "right" : "assertEquals(0, dIndex.getSubRecordsBetween(1d, 1001d).size());",
    "info" : "ExpressionStatement[4452-4515]:ExpressionStatement[4462-4525]"
  }, {
    "left" : "assertEquals(1000, dIndex.getSubRecordsBetween(-1d, -1001d).size());",
    "right" : "assertEquals(1000, dIndex.getSubRecordsBetween(-1d, -1001d).size());",
    "info" : "ExpressionStatement[4524-4592]:ExpressionStatement[4534-4602]"
  }, {
    "left" : "for (int i = 0; i < 1000; i++)",
    "right" : "for (int i = 0; i < 1000; i++)",
    "info" : "ForStatement[4601-4833]:ForStatement[4611-4843]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4632-4833]:Block[4642-4843]"
  }, {
    "left" : "Data key = ss.toData(i);",
    "right" : "Data key = ss.toData(i);",
    "info" : "VariableDeclarationStatement[4646-4670]:VariableDeclarationStatement[4656-4680]"
  }, {
    "left" : "Data value = ss.toData(new MainPortable(false, 1 * (i + 1), \"joe\" + i));",
    "right" : "Data value = ss.toData(new MainPortable(false, 1 * (i + 1), \"joe\" + i));",
    "info" : "VariableDeclarationStatement[4683-4755]:VariableDeclarationStatement[4693-4765]"
  }, {
    "left" : "is.saveEntryIndex(new QueryEntry(ss, key, key, value));",
    "right" : "is.saveEntryIndex(new QueryEntry(ss, key, key, value));",
    "info" : "ExpressionStatement[4768-4823]:ExpressionStatement[4778-4833]"
  }, {
    "left" : "assertEquals(1000, dIndex.getSubRecordsBetween(1d, 1001d).size());",
    "right" : "assertEquals(1000, dIndex.getSubRecordsBetween(1d, 1001d).size());",
    "info" : "ExpressionStatement[4842-4908]:ExpressionStatement[4852-4918]"
  }, {
    "left" : "assertEquals(0, dIndex.getSubRecordsBetween(-1d, -1001d).size());",
    "right" : "assertEquals(0, dIndex.getSubRecordsBetween(-1d, -1001d).size());",
    "info" : "ExpressionStatement[4917-4982]:ExpressionStatement[4927-4992]"
  }, {
    "left" : "assertEquals(400, dIndex.getSubRecords(ComparisonType.GREATER, 600d).size());",
    "right" : "assertEquals(400, dIndex.getSubRecords(ComparisonType.GREATER, 600d).size());",
    "info" : "ExpressionStatement[4991-5068]:ExpressionStatement[5001-5078]"
  }, {
    "left" : "assertEquals(401, dIndex.getSubRecords(ComparisonType.GREATER_EQUAL, 600d).size());",
    "right" : "assertEquals(401, dIndex.getSubRecords(ComparisonType.GREATER_EQUAL, 600d).size());",
    "info" : "ExpressionStatement[5077-5160]:ExpressionStatement[5087-5170]"
  }, {
    "left" : "assertEquals(9, dIndex.getSubRecords(ComparisonType.LESSER, 10d).size());",
    "right" : "assertEquals(9, dIndex.getSubRecords(ComparisonType.LESSER, 10d).size());",
    "info" : "ExpressionStatement[5169-5242]:ExpressionStatement[5179-5252]"
  }, {
    "left" : "assertEquals(10, dIndex.getSubRecords(ComparisonType.LESSER_EQUAL, 10d).size());",
    "right" : "assertEquals(10, dIndex.getSubRecords(ComparisonType.LESSER_EQUAL, 10d).size());",
    "info" : "ExpressionStatement[5251-5331]:ExpressionStatement[5261-5341]"
  }, {
    "left" : "assertEquals(1, is.query(new AndPredicate(new EqualPredicate(\"d\", 1d), new EqualPredicate(\"bool\", \"false\"))).size());",
    "right" : "assertEquals(1, is.query(new AndPredicate(new EqualPredicate(\"d\", 1d), new EqualPredicate(\"bool\", \"false\"))).size());",
    "info" : "ExpressionStatement[5340-5457]:ExpressionStatement[5350-5467]"
  }, {
    "left" : "assertEquals(1, is.query(new AndPredicate(new EqualPredicate(\"d\", 1), new EqualPredicate(\"bool\", Boolean.FALSE))).size());",
    "right" : "assertEquals(1, is.query(new AndPredicate(new EqualPredicate(\"d\", 1), new EqualPredicate(\"bool\", Boolean.FALSE))).size());",
    "info" : "ExpressionStatement[5466-5588]:ExpressionStatement[5476-5598]"
  }, {
    "left" : "assertEquals(1, is.query(new AndPredicate(new EqualPredicate(\"d\", \"1\"), new EqualPredicate(\"bool\", false))).size());",
    "right" : "assertEquals(1, is.query(new AndPredicate(new EqualPredicate(\"d\", \"1\"), new EqualPredicate(\"bool\", false))).size());",
    "info" : "ExpressionStatement[5597-5713]:ExpressionStatement[5607-5723]"
  }, {
    "left" : "@Test",
    "right" : "@Test",
    "info" : "MarkerAnnotation[5725-5730]:MarkerAnnotation[5735-5740]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[5735-5741]:Modifier[5745-5751]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[5742-5746]:PrimitiveType[5752-5756]"
  }, {
    "left" : "testIndexWithNull",
    "right" : "testIndexWithNull",
    "info" : "SimpleName[5747-5764]:SimpleName[5757-5774]"
  }, {
    "left" : "QueryException",
    "right" : "QueryException",
    "info" : "SimpleType[5774-5788]:SimpleType[5784-5798]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5789-6641]:Block[5799-6651]"
  }, {
    "left" : "IndexService is = new IndexService();",
    "right" : "IndexService is = new IndexService();",
    "info" : "VariableDeclarationStatement[5799-5836]:VariableDeclarationStatement[5809-5846]"
  }, {
    "left" : "Index strIndex = is.addOrGetIndex(\"str\", true);",
    "right" : "Index strIndex = is.addOrGetIndex(\"str\", true);",
    "info" : "VariableDeclarationStatement[5845-5892]:VariableDeclarationStatement[5855-5902]"
  }, {
    "left" : "Data value = ss.toData(new MainPortable(false, 1, null));",
    "right" : "Data value = ss.toData(new MainPortable(false, 1, null));",
    "info" : "VariableDeclarationStatement[5902-5959]:VariableDeclarationStatement[5912-5969]"
  }, {
    "left" : "Data key1 = ss.toData(0);",
    "right" : "Data key1 = ss.toData(0);",
    "info" : "VariableDeclarationStatement[5968-5993]:VariableDeclarationStatement[5978-6003]"
  }, {
    "left" : "is.saveEntryIndex(new QueryEntry(ss, key1, key1, value));",
    "right" : "is.saveEntryIndex(new QueryEntry(ss, key1, key1, value));",
    "info" : "ExpressionStatement[6002-6059]:ExpressionStatement[6012-6069]"
  }, {
    "left" : "value = ss.toData(new MainPortable(false, 2, null));",
    "right" : "value = ss.toData(new MainPortable(false, 2, null));",
    "info" : "ExpressionStatement[6069-6121]:ExpressionStatement[6079-6131]"
  }, {
    "left" : "Data key2 = ss.toData(1);",
    "right" : "Data key2 = ss.toData(1);",
    "info" : "VariableDeclarationStatement[6130-6155]:VariableDeclarationStatement[6140-6165]"
  }, {
    "left" : "is.saveEntryIndex(new QueryEntry(ss, key2, key2, value));",
    "right" : "is.saveEntryIndex(new QueryEntry(ss, key2, key2, value));",
    "info" : "ExpressionStatement[6164-6221]:ExpressionStatement[6174-6231]"
  }, {
    "left" : "for (int i = 2; i < 1000; i++)",
    "right" : "for (int i = 2; i < 1000; i++)",
    "info" : "ForStatement[6232-6459]:ForStatement[6242-6469]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6263-6459]:Block[6273-6469]"
  }, {
    "left" : "Data key = ss.toData(i);",
    "right" : "Data key = ss.toData(i);",
    "info" : "VariableDeclarationStatement[6277-6301]:VariableDeclarationStatement[6287-6311]"
  }, {
    "left" : "value = ss.toData(new MainPortable(false, 1 * (i + 1), \"joe\" + i));",
    "right" : "value = ss.toData(new MainPortable(false, 1 * (i + 1), \"joe\" + i));",
    "info" : "ExpressionStatement[6314-6381]:ExpressionStatement[6324-6391]"
  }, {
    "left" : "is.saveEntryIndex(new QueryEntry(ss, key, key, value));",
    "right" : "is.saveEntryIndex(new QueryEntry(ss, key, key, value));",
    "info" : "ExpressionStatement[6394-6449]:ExpressionStatement[6404-6459]"
  }, {
    "left" : "Comparable c = null;",
    "right" : "Comparable c = null;",
    "info" : "VariableDeclarationStatement[6469-6489]:VariableDeclarationStatement[6479-6499]"
  }, {
    "left" : "assertEquals(2, strIndex.getRecords(c).size());",
    "right" : "assertEquals(2, strIndex.getRecords(c).size());",
    "info" : "ExpressionStatement[6498-6545]:ExpressionStatement[6508-6555]"
  }, {
    "left" : "assertEquals(998, strIndex.getSubRecords(ComparisonType.NOT_EQUAL, null).size());",
    "right" : "assertEquals(998, strIndex.getSubRecords(ComparisonType.NOT_EQUAL, null).size());",
    "info" : "ExpressionStatement[6554-6635]:ExpressionStatement[6564-6645]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[6647-6654]:Modifier[6657-6664]"
  }, {
    "left" : "class",
    "right" : "class",
    "info" : "TYPE_DECLARATION_KIND[6655-6660]:TYPE_DECLARATION_KIND[6665-6670]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[6719-6725]:Modifier[6729-6735]"
  }, {
    "left" : "Portable",
    "right" : "Portable",
    "info" : "SimpleType[6726-6734]:SimpleType[6736-6744]"
  }, {
    "left" : "create",
    "right" : "create",
    "info" : "SimpleName[6735-6741]:SimpleName[6745-6751]"
  }, {
    "left" : "int classId",
    "right" : "int classId",
    "info" : "SingleVariableDeclaration[6742-6753]:SingleVariableDeclaration[6752-6763]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6755-6907]:Block[6765-6917]"
  }, {
    "left" : "switch (classId) {\n                case 1:\n                    return new MainPortable();\n            }",
    "right" : "switch (classId) {\n                case 1:\n                    return new MainPortable();\n            }",
    "info" : "SwitchStatement[6769-6872]:SwitchStatement[6779-6882]"
  }, {
    "left" : "case 1:",
    "right" : "case 1:",
    "info" : "SwitchCase[6804-6811]:SwitchCase[6814-6821]"
  }, {
    "left" : "return new MainPortable();",
    "right" : "return new MainPortable();",
    "info" : "ReturnStatement[6832-6858]:ReturnStatement[6842-6868]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[6885-6897]:ReturnStatement[6895-6907]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[6917-6923]:Modifier[6927-6933]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[6924-6927]:PrimitiveType[6934-6937]"
  }, {
    "left" : "getFactoryId",
    "right" : "getFactoryId",
    "info" : "SimpleName[6928-6940]:SimpleName[6938-6950]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6943-6985]:Block[6953-6995]"
  }, {
    "left" : "return FACTORY_ID;",
    "right" : "return FACTORY_ID;",
    "info" : "ReturnStatement[6957-6975]:ReturnStatement[6967-6985]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[6997-7004]:Modifier[7007-7014]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[7005-7011]:Modifier[7015-7021]"
  }, {
    "left" : "class",
    "right" : "class",
    "info" : "TYPE_DECLARATION_KIND[7012-7017]:TYPE_DECLARATION_KIND[7022-7027]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[7226-7233]:Modifier[7236-7243]"
  }, {
    "left" : "SerializableWithEnum",
    "right" : "SerializableWithEnum",
    "info" : "SimpleName[7234-7254]:SimpleName[7244-7264]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7257-7268]:Block[7267-7278]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[7278-7285]:Modifier[7288-7295]"
  }, {
    "left" : "SerializableWithEnum",
    "right" : "SerializableWithEnum",
    "info" : "SimpleName[7286-7306]:SimpleName[7296-7316]"
  }, {
    "left" : "City favoriteCity",
    "right" : "City favoriteCity",
    "info" : "SingleVariableDeclaration[7307-7324]:SingleVariableDeclaration[7317-7334]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7326-7383]:Block[7336-7393]"
  }, {
    "left" : "this.favoriteCity = favoriteCity;",
    "right" : "this.favoriteCity = favoriteCity;",
    "info" : "ExpressionStatement[7340-7373]:ExpressionStatement[7350-7383]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[7393-7402]:MarkerAnnotation[7403-7412]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[7411-7417]:Modifier[7421-7427]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[7418-7422]:PrimitiveType[7428-7432]"
  }, {
    "left" : "writeData",
    "right" : "writeData",
    "info" : "SimpleName[7423-7432]:SimpleName[7433-7442]"
  }, {
    "left" : "ObjectDataOutput out",
    "right" : "ObjectDataOutput out",
    "info" : "SingleVariableDeclaration[7433-7453]:SingleVariableDeclaration[7443-7463]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[7462-7473]:SimpleType[7472-7483]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7474-7528]:Block[7484-7538]"
  }, {
    "left" : "out.writeObject(favoriteCity);",
    "right" : "out.writeObject(favoriteCity);",
    "info" : "ExpressionStatement[7488-7518]:ExpressionStatement[7498-7528]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[7538-7547]:MarkerAnnotation[7548-7557]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[7556-7562]:Modifier[7566-7572]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[7563-7567]:PrimitiveType[7573-7577]"
  }, {
    "left" : "readData",
    "right" : "readData",
    "info" : "SimpleName[7568-7576]:SimpleName[7578-7586]"
  }, {
    "left" : "ObjectDataInput in",
    "right" : "ObjectDataInput in",
    "info" : "SingleVariableDeclaration[7577-7595]:SingleVariableDeclaration[7587-7605]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[7604-7615]:SimpleType[7614-7625]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7616-7671]:Block[7626-7681]"
  }, {
    "left" : "favoriteCity = in.readObject();",
    "right" : "favoriteCity = in.readObject();",
    "info" : "ExpressionStatement[7630-7661]:ExpressionStatement[7640-7671]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[7683-7690]:Modifier[7693-7700]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[7691-7697]:Modifier[7701-7707]"
  }, {
    "left" : "class",
    "right" : "class",
    "info" : "TYPE_DECLARATION_KIND[7698-7703]:TYPE_DECLARATION_KIND[7708-7713]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[7906-7913]:Modifier[7916-7923]"
  }, {
    "left" : "MainPortable",
    "right" : "MainPortable",
    "info" : "SimpleName[7914-7926]:SimpleName[7924-7936]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7929-7940]:Block[7939-7950]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[7950-7957]:Modifier[7960-7967]"
  }, {
    "left" : "MainPortable",
    "right" : "MainPortable",
    "info" : "SimpleName[7958-7970]:SimpleName[7968-7980]"
  }, {
    "left" : "boolean bool",
    "right" : "boolean bool",
    "info" : "SingleVariableDeclaration[7971-7983]:SingleVariableDeclaration[7981-7993]"
  }, {
    "left" : "double d",
    "right" : "double d",
    "info" : "SingleVariableDeclaration[7985-7993]:SingleVariableDeclaration[7995-8003]"
  }, {
    "left" : "String str",
    "right" : "String str",
    "info" : "SingleVariableDeclaration[7995-8005]:SingleVariableDeclaration[8005-8015]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8007-8100]:Block[8017-8110]"
  }, {
    "left" : "this.bool = bool;",
    "right" : "this.bool = bool;",
    "info" : "ExpressionStatement[8021-8038]:ExpressionStatement[8031-8048]"
  }, {
    "left" : "this.d = d;",
    "right" : "this.d = d;",
    "info" : "ExpressionStatement[8051-8062]:ExpressionStatement[8061-8072]"
  }, {
    "left" : "this.str = str;",
    "right" : "this.str = str;",
    "info" : "ExpressionStatement[8075-8090]:ExpressionStatement[8085-8100]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[8110-8117]:Modifier[8120-8127]"
  }, {
    "left" : "MainPortable",
    "right" : "MainPortable",
    "info" : "SimpleName[8118-8130]:SimpleName[8128-8140]"
  }, {
    "left" : "byte b",
    "right" : "byte b",
    "info" : "SingleVariableDeclaration[8131-8137]:SingleVariableDeclaration[8141-8147]"
  }, {
    "left" : "boolean bool",
    "right" : "boolean bool",
    "info" : "SingleVariableDeclaration[8139-8151]:SingleVariableDeclaration[8149-8161]"
  }, {
    "left" : "char c",
    "right" : "char c",
    "info" : "SingleVariableDeclaration[8153-8159]:SingleVariableDeclaration[8163-8169]"
  }, {
    "left" : "short s",
    "right" : "short s",
    "info" : "SingleVariableDeclaration[8161-8168]:SingleVariableDeclaration[8171-8178]"
  }, {
    "left" : "int i",
    "right" : "int i",
    "info" : "SingleVariableDeclaration[8170-8175]:SingleVariableDeclaration[8180-8185]"
  }, {
    "left" : "long l",
    "right" : "long l",
    "info" : "SingleVariableDeclaration[8177-8183]:SingleVariableDeclaration[8187-8193]"
  }, {
    "left" : "float f",
    "right" : "float f",
    "info" : "SingleVariableDeclaration[8185-8192]:SingleVariableDeclaration[8195-8202]"
  }, {
    "left" : "double d",
    "right" : "double d",
    "info" : "SingleVariableDeclaration[8223-8231]:SingleVariableDeclaration[8233-8241]"
  }, {
    "left" : "String str",
    "right" : "String str",
    "info" : "SingleVariableDeclaration[8233-8243]:SingleVariableDeclaration[8243-8253]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8245-8482]:Block[8255-8492]"
  }, {
    "left" : "this.b = b;",
    "right" : "this.b = b;",
    "info" : "ExpressionStatement[8259-8270]:ExpressionStatement[8269-8280]"
  }, {
    "left" : "this.bool = bool;",
    "right" : "this.bool = bool;",
    "info" : "ExpressionStatement[8283-8300]:ExpressionStatement[8293-8310]"
  }, {
    "left" : "this.c = c;",
    "right" : "this.c = c;",
    "info" : "ExpressionStatement[8313-8324]:ExpressionStatement[8323-8334]"
  }, {
    "left" : "this.s = s;",
    "right" : "this.s = s;",
    "info" : "ExpressionStatement[8337-8348]:ExpressionStatement[8347-8358]"
  }, {
    "left" : "this.i = i;",
    "right" : "this.i = i;",
    "info" : "ExpressionStatement[8361-8372]:ExpressionStatement[8371-8382]"
  }, {
    "left" : "this.l = l;",
    "right" : "this.l = l;",
    "info" : "ExpressionStatement[8385-8396]:ExpressionStatement[8395-8406]"
  }, {
    "left" : "this.f = f;",
    "right" : "this.f = f;",
    "info" : "ExpressionStatement[8409-8420]:ExpressionStatement[8419-8430]"
  }, {
    "left" : "this.d = d;",
    "right" : "this.d = d;",
    "info" : "ExpressionStatement[8433-8444]:ExpressionStatement[8443-8454]"
  }, {
    "left" : "this.str = str;",
    "right" : "this.str = str;",
    "info" : "ExpressionStatement[8457-8472]:ExpressionStatement[8467-8482]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[8492-8498]:Modifier[8502-8508]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[8499-8502]:PrimitiveType[8509-8512]"
  }, {
    "left" : "getClassId",
    "right" : "getClassId",
    "info" : "SimpleName[8503-8513]:SimpleName[8513-8523]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8516-8549]:Block[8526-8559]"
  }, {
    "left" : "return 1;",
    "right" : "return 1;",
    "info" : "ReturnStatement[8530-8539]:ReturnStatement[8540-8549]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[8559-8565]:Modifier[8569-8575]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[8566-8570]:PrimitiveType[8576-8580]"
  }, {
    "left" : "writePortable",
    "right" : "writePortable",
    "info" : "SimpleName[8571-8584]:SimpleName[8581-8594]"
  }, {
    "left" : "PortableWriter writer",
    "right" : "PortableWriter writer",
    "info" : "SingleVariableDeclaration[8585-8606]:SingleVariableDeclaration[8595-8616]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[8615-8626]:SimpleType[8625-8636]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8627-8995]:Block[8637-9005]"
  }, {
    "left" : "writer.writeByte(\"b\", b);",
    "right" : "writer.writeByte(\"b\", b);",
    "info" : "ExpressionStatement[8641-8666]:ExpressionStatement[8651-8676]"
  }, {
    "left" : "writer.writeBoolean(\"bool\", bool);",
    "right" : "writer.writeBoolean(\"bool\", bool);",
    "info" : "ExpressionStatement[8679-8713]:ExpressionStatement[8689-8723]"
  }, {
    "left" : "writer.writeChar(\"c\", c);",
    "right" : "writer.writeChar(\"c\", c);",
    "info" : "ExpressionStatement[8726-8751]:ExpressionStatement[8736-8761]"
  }, {
    "left" : "writer.writeShort(\"s\", s);",
    "right" : "writer.writeShort(\"s\", s);",
    "info" : "ExpressionStatement[8764-8790]:ExpressionStatement[8774-8800]"
  }, {
    "left" : "writer.writeInt(\"i\", i);",
    "right" : "writer.writeInt(\"i\", i);",
    "info" : "ExpressionStatement[8803-8827]:ExpressionStatement[8813-8837]"
  }, {
    "left" : "writer.writeLong(\"l\", l);",
    "right" : "writer.writeLong(\"l\", l);",
    "info" : "ExpressionStatement[8840-8865]:ExpressionStatement[8850-8875]"
  }, {
    "left" : "writer.writeFloat(\"f\", f);",
    "right" : "writer.writeFloat(\"f\", f);",
    "info" : "ExpressionStatement[8878-8904]:ExpressionStatement[8888-8914]"
  }, {
    "left" : "writer.writeDouble(\"d\", d);",
    "right" : "writer.writeDouble(\"d\", d);",
    "info" : "ExpressionStatement[8917-8944]:ExpressionStatement[8927-8954]"
  }, {
    "left" : "writer.writeUTF(\"str\", str);",
    "right" : "writer.writeUTF(\"str\", str);",
    "info" : "ExpressionStatement[8957-8985]:ExpressionStatement[8967-8995]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[9005-9011]:Modifier[9015-9021]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[9012-9016]:PrimitiveType[9022-9026]"
  }, {
    "left" : "readPortable",
    "right" : "readPortable",
    "info" : "SimpleName[9017-9029]:SimpleName[9027-9039]"
  }, {
    "left" : "PortableReader reader",
    "right" : "PortableReader reader",
    "info" : "SingleVariableDeclaration[9030-9051]:SingleVariableDeclaration[9040-9061]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[9060-9071]:SimpleType[9070-9081]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9072-9440]:Block[9082-9450]"
  }, {
    "left" : "b = reader.readByte(\"b\");",
    "right" : "b = reader.readByte(\"b\");",
    "info" : "ExpressionStatement[9086-9111]:ExpressionStatement[9096-9121]"
  }, {
    "left" : "bool = reader.readBoolean(\"bool\");",
    "right" : "bool = reader.readBoolean(\"bool\");",
    "info" : "ExpressionStatement[9124-9158]:ExpressionStatement[9134-9168]"
  }, {
    "left" : "c = reader.readChar(\"c\");",
    "right" : "c = reader.readChar(\"c\");",
    "info" : "ExpressionStatement[9171-9196]:ExpressionStatement[9181-9206]"
  }, {
    "left" : "s = reader.readShort(\"s\");",
    "right" : "s = reader.readShort(\"s\");",
    "info" : "ExpressionStatement[9209-9235]:ExpressionStatement[9219-9245]"
  }, {
    "left" : "i = reader.readInt(\"i\");",
    "right" : "i = reader.readInt(\"i\");",
    "info" : "ExpressionStatement[9248-9272]:ExpressionStatement[9258-9282]"
  }, {
    "left" : "l = reader.readLong(\"l\");",
    "right" : "l = reader.readLong(\"l\");",
    "info" : "ExpressionStatement[9285-9310]:ExpressionStatement[9295-9320]"
  }, {
    "left" : "f = reader.readFloat(\"f\");",
    "right" : "f = reader.readFloat(\"f\");",
    "info" : "ExpressionStatement[9323-9349]:ExpressionStatement[9333-9359]"
  }, {
    "left" : "d = reader.readDouble(\"d\");",
    "right" : "d = reader.readDouble(\"d\");",
    "info" : "ExpressionStatement[9362-9389]:ExpressionStatement[9372-9399]"
  }, {
    "left" : "str = reader.readUTF(\"str\");",
    "right" : "str = reader.readUTF(\"str\");",
    "info" : "ExpressionStatement[9402-9430]:ExpressionStatement[9412-9440]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[9450-9459]:MarkerAnnotation[9460-9469]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[9468-9474]:Modifier[9478-9484]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[9475-9482]:PrimitiveType[9485-9492]"
  }, {
    "left" : "equals",
    "right" : "equals",
    "info" : "SimpleName[9483-9489]:SimpleName[9493-9499]"
  }, {
    "left" : "Object o",
    "right" : "Object o",
    "info" : "SingleVariableDeclaration[9490-9498]:SingleVariableDeclaration[9500-9508]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9500-10170]:Block[9510-10180]"
  }, {
    "left" : "if (this == o)",
    "right" : "if (this == o)",
    "info" : "IfStatement[9514-9541]:IfStatement[9524-9551]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[9529-9541]:ReturnStatement[9539-9551]"
  }, {
    "left" : "if (o == null || getClass() != o.getClass())",
    "right" : "if (o == null || getClass() != o.getClass())",
    "info" : "IfStatement[9554-9612]:IfStatement[9564-9622]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[9599-9612]:ReturnStatement[9609-9622]"
  }, {
    "left" : "MainPortable that = (MainPortable) o;",
    "right" : "MainPortable that = (MainPortable) o;",
    "info" : "VariableDeclarationStatement[9625-9662]:VariableDeclarationStatement[9635-9672]"
  }, {
    "left" : "if (b != that.b)",
    "right" : "if (b != that.b)",
    "info" : "IfStatement[9675-9705]:IfStatement[9685-9715]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[9692-9705]:ReturnStatement[9702-9715]"
  }, {
    "left" : "if (bool != that.bool)",
    "right" : "if (bool != that.bool)",
    "info" : "IfStatement[9718-9754]:IfStatement[9728-9764]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[9741-9754]:ReturnStatement[9751-9764]"
  }, {
    "left" : "if (c != that.c)",
    "right" : "if (c != that.c)",
    "info" : "IfStatement[9767-9797]:IfStatement[9777-9807]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[9784-9797]:ReturnStatement[9794-9807]"
  }, {
    "left" : "if (Double.compare(that.d, d) != 0)",
    "right" : "if (Double.compare(that.d, d) != 0)",
    "info" : "IfStatement[9810-9859]:IfStatement[9820-9869]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[9846-9859]:ReturnStatement[9856-9869]"
  }, {
    "left" : "if (Float.compare(that.f, f) != 0)",
    "right" : "if (Float.compare(that.f, f) != 0)",
    "info" : "IfStatement[9872-9920]:IfStatement[9882-9930]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[9907-9920]:ReturnStatement[9917-9930]"
  }, {
    "left" : "if (i != that.i)",
    "right" : "if (i != that.i)",
    "info" : "IfStatement[9933-9963]:IfStatement[9943-9973]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[9950-9963]:ReturnStatement[9960-9973]"
  }, {
    "left" : "if (l != that.l)",
    "right" : "if (l != that.l)",
    "info" : "IfStatement[9976-10006]:IfStatement[9986-10016]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[9993-10006]:ReturnStatement[10003-10016]"
  }, {
    "left" : "if (s != that.s)",
    "right" : "if (s != that.s)",
    "info" : "IfStatement[10019-10049]:IfStatement[10029-10059]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[10036-10049]:ReturnStatement[10046-10059]"
  }, {
    "left" : "if (str != null ? !str.equals(that.str) : that.str != null)",
    "right" : "if (str != null ? !str.equals(that.str) : that.str != null)",
    "info" : "IfStatement[10062-10135]:IfStatement[10072-10145]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[10122-10135]:ReturnStatement[10132-10145]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[10148-10160]:ReturnStatement[10158-10170]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[10180-10189]:MarkerAnnotation[10190-10199]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[10198-10204]:Modifier[10208-10214]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[10205-10208]:PrimitiveType[10215-10218]"
  }, {
    "left" : "hashCode",
    "right" : "hashCode",
    "info" : "SimpleName[10209-10217]:SimpleName[10219-10227]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10220-10851]:Block[10230-10861]"
  }, {
    "left" : "int result;",
    "right" : "int result;",
    "info" : "VariableDeclarationStatement[10234-10245]:VariableDeclarationStatement[10244-10255]"
  }, {
    "left" : "long temp;",
    "right" : "long temp;",
    "info" : "VariableDeclarationStatement[10258-10268]:VariableDeclarationStatement[10268-10278]"
  }, {
    "left" : "result = (int) b;",
    "right" : "result = (int) b;",
    "info" : "ExpressionStatement[10281-10298]:ExpressionStatement[10291-10308]"
  }, {
    "left" : "result = 31 * result + (bool ? 1 : 0);",
    "right" : "result = 31 * result + (bool ? 1 : 0);",
    "info" : "ExpressionStatement[10311-10349]:ExpressionStatement[10321-10359]"
  }, {
    "left" : "result = 31 * result + (int) c;",
    "right" : "result = 31 * result + (int) c;",
    "info" : "ExpressionStatement[10362-10393]:ExpressionStatement[10372-10403]"
  }, {
    "left" : "result = 31 * result + (int) s;",
    "right" : "result = 31 * result + (int) s;",
    "info" : "ExpressionStatement[10406-10437]:ExpressionStatement[10416-10447]"
  }, {
    "left" : "result = 31 * result + i;",
    "right" : "result = 31 * result + i;",
    "info" : "ExpressionStatement[10450-10475]:ExpressionStatement[10460-10485]"
  }, {
    "left" : "result = 31 * result + (int) (l ^ (l >>> 32));",
    "right" : "result = 31 * result + (int) (l ^ (l >>> 32));",
    "info" : "ExpressionStatement[10488-10534]:ExpressionStatement[10498-10544]"
  }, {
    "left" : "result = 31 * result + (f != +0.0f ? Float.floatToIntBits(f) : 0);",
    "right" : "result = 31 * result + (f != +0.0f ? Float.floatToIntBits(f) : 0);",
    "info" : "ExpressionStatement[10547-10613]:ExpressionStatement[10557-10623]"
  }, {
    "left" : "temp = d != +0.0d ? Double.doubleToLongBits(d) : 0L;",
    "right" : "temp = d != +0.0d ? Double.doubleToLongBits(d) : 0L;",
    "info" : "ExpressionStatement[10626-10678]:ExpressionStatement[10636-10688]"
  }, {
    "left" : "result = 31 * result + (int) (temp ^ (temp >>> 32));",
    "right" : "result = 31 * result + (int) (temp ^ (temp >>> 32));",
    "info" : "ExpressionStatement[10691-10743]:ExpressionStatement[10701-10753]"
  }, {
    "left" : "result = 31 * result + (str != null ? str.hashCode() : 0);",
    "right" : "result = 31 * result + (str != null ? str.hashCode() : 0);",
    "info" : "ExpressionStatement[10756-10814]:ExpressionStatement[10766-10824]"
  }, {
    "left" : "return result;",
    "right" : "return result;",
    "info" : "ReturnStatement[10827-10841]:ReturnStatement[10837-10851]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[10861-10870]:MarkerAnnotation[10871-10880]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[10879-10885]:Modifier[10889-10895]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[10886-10892]:SimpleType[10896-10902]"
  }, {
    "left" : "toString",
    "right" : "toString",
    "info" : "SimpleName[10893-10901]:SimpleName[10903-10911]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10904-11290]:Block[10914-11300]"
  }, {
    "left" : "return \"MainPortable{\" +\n                    \"b=\" + b +\n                    \", bool=\" + bool +\n                    \", c=\" + c +\n                    \", s=\" + s +\n                    \", i=\" + i +\n                    \", l=\" + l +\n                    \", f=\" + f +\n                    \", d=\" + d +\n                    \", str='\" + str + '\\'' +\n                    '}';",
    "right" : "return \"MainPortable{\" +\n                    \"b=\" + b +\n                    \", bool=\" + bool +\n                    \", c=\" + c +\n                    \", s=\" + s +\n                    \", i=\" + i +\n                    \", l=\" + l +\n                    \", f=\" + f +\n                    \", d=\" + d +\n                    \", str='\" + str + '\\'' +\n                    '}';",
    "info" : "ReturnStatement[10918-11280]:ReturnStatement[10928-11290]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[11300-11306]:Modifier[11310-11316]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[11307-11310]:PrimitiveType[11317-11320]"
  }, {
    "left" : "getFactoryId",
    "right" : "getFactoryId",
    "info" : "SimpleName[11311-11323]:SimpleName[11321-11333]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11326-11368]:Block[11336-11378]"
  }, {
    "left" : "return FACTORY_ID;",
    "right" : "return FACTORY_ID;",
    "info" : "ReturnStatement[11340-11358]:ReturnStatement[11350-11368]"
  }, {
    "left" : "class",
    "right" : "class",
    "info" : "TYPE_DECLARATION_KIND[11380-11385]:TYPE_DECLARATION_KIND[11390-11395]"
  }, {
    "left" : "QueryRecord",
    "right" : "QueryRecord",
    "info" : "SimpleName[11488-11499]:SimpleName[11498-11509]"
  }, {
    "left" : "Data key",
    "right" : "Data key",
    "info" : "SingleVariableDeclaration[11500-11508]:SingleVariableDeclaration[11510-11518]"
  }, {
    "left" : "Comparable attributeValue",
    "right" : "Comparable attributeValue",
    "info" : "SingleVariableDeclaration[11510-11535]:SingleVariableDeclaration[11520-11545]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11537-11626]:Block[11547-11636]"
  }, {
    "left" : "this.key = key;",
    "right" : "this.key = key;",
    "info" : "ExpressionStatement[11551-11566]:ExpressionStatement[11561-11576]"
  }, {
    "left" : "this.attributeValue = attributeValue;",
    "right" : "this.attributeValue = attributeValue;",
    "info" : "ExpressionStatement[11579-11616]:ExpressionStatement[11589-11626]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[11636-11642]:Modifier[11646-11652]"
  }, {
    "left" : "Comparable",
    "right" : "Comparable",
    "info" : "SimpleType[11643-11653]:SimpleType[11653-11663]"
  }, {
    "left" : "getAttribute",
    "right" : "getAttribute",
    "info" : "SimpleName[11654-11666]:SimpleName[11664-11676]"
  }, {
    "left" : "String attributeName",
    "right" : "String attributeName",
    "info" : "SingleVariableDeclaration[11667-11687]:SingleVariableDeclaration[11677-11697]"
  }, {
    "left" : "QueryException",
    "right" : "QueryException",
    "info" : "SimpleType[11696-11710]:SimpleType[11706-11720]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11711-11757]:Block[11721-11767]"
  }, {
    "left" : "return attributeValue;",
    "right" : "return attributeValue;",
    "info" : "ReturnStatement[11725-11747]:ReturnStatement[11735-11757]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[11767-11773]:Modifier[11777-11783]"
  }, {
    "left" : "AttributeType",
    "right" : "AttributeType",
    "info" : "SimpleType[11774-11787]:SimpleType[11784-11797]"
  }, {
    "left" : "getAttributeType",
    "right" : "getAttributeType",
    "info" : "SimpleName[11788-11804]:SimpleName[11798-11814]"
  }, {
    "left" : "String attributeName",
    "right" : "String attributeName",
    "info" : "SingleVariableDeclaration[11805-11825]:SingleVariableDeclaration[11815-11835]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11827-11919]:Block[11837-11929]"
  }, {
    "left" : "return ReflectionHelper.getAttributeType(attributeValue.getClass());",
    "right" : "return ReflectionHelper.getAttributeType(attributeValue.getClass());",
    "info" : "ReturnStatement[11841-11909]:ReturnStatement[11851-11919]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[11929-11935]:Modifier[11939-11945]"
  }, {
    "left" : "Data",
    "right" : "Data",
    "info" : "SimpleType[11936-11940]:SimpleType[11946-11950]"
  }, {
    "left" : "getKeyData",
    "right" : "getKeyData",
    "info" : "SimpleName[11941-11951]:SimpleName[11951-11961]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11954-11989]:Block[11964-11999]"
  }, {
    "left" : "return key;",
    "right" : "return key;",
    "info" : "ReturnStatement[11968-11979]:ReturnStatement[11978-11989]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[11999-12005]:Modifier[12009-12015]"
  }, {
    "left" : "Data",
    "right" : "Data",
    "info" : "SimpleType[12006-12010]:SimpleType[12016-12020]"
  }, {
    "left" : "getValueData",
    "right" : "getValueData",
    "info" : "SimpleName[12011-12023]:SimpleName[12021-12033]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12026-12062]:Block[12036-12072]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[12040-12052]:ReturnStatement[12050-12062]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[12072-12078]:Modifier[12082-12088]"
  }, {
    "left" : "Data",
    "right" : "Data",
    "info" : "SimpleType[12079-12083]:SimpleType[12089-12093]"
  }, {
    "left" : "getIndexKey",
    "right" : "getIndexKey",
    "info" : "SimpleName[12084-12095]:SimpleName[12094-12105]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12098-12133]:Block[12108-12143]"
  }, {
    "left" : "return key;",
    "right" : "return key;",
    "info" : "ReturnStatement[12112-12123]:ReturnStatement[12122-12133]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[12143-12149]:Modifier[12153-12159]"
  }, {
    "left" : "long",
    "right" : "long",
    "info" : "PrimitiveType[12150-12154]:PrimitiveType[12160-12164]"
  }, {
    "left" : "getCreationTime",
    "right" : "getCreationTime",
    "info" : "SimpleName[12155-12170]:SimpleName[12165-12180]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12173-12206]:Block[12183-12216]"
  }, {
    "left" : "return 0;",
    "right" : "return 0;",
    "info" : "ReturnStatement[12187-12196]:ReturnStatement[12197-12206]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[12216-12222]:Modifier[12226-12232]"
  }, {
    "left" : "long",
    "right" : "long",
    "info" : "PrimitiveType[12223-12227]:PrimitiveType[12233-12237]"
  }, {
    "left" : "getLastAccessTime",
    "right" : "getLastAccessTime",
    "info" : "SimpleName[12228-12245]:SimpleName[12238-12255]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12248-12281]:Block[12258-12291]"
  }, {
    "left" : "return 0;",
    "right" : "return 0;",
    "info" : "ReturnStatement[12262-12271]:ReturnStatement[12272-12281]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[12291-12297]:Modifier[12301-12307]"
  }, {
    "left" : "Object",
    "right" : "Object",
    "info" : "SimpleType[12298-12304]:SimpleType[12308-12314]"
  }, {
    "left" : "getKey",
    "right" : "getKey",
    "info" : "SimpleName[12305-12311]:SimpleName[12315-12321]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12314-12349]:Block[12324-12359]"
  }, {
    "left" : "return key;",
    "right" : "return key;",
    "info" : "ReturnStatement[12328-12339]:ReturnStatement[12338-12349]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[12359-12365]:Modifier[12369-12375]"
  }, {
    "left" : "Object",
    "right" : "Object",
    "info" : "SimpleType[12366-12372]:SimpleType[12376-12382]"
  }, {
    "left" : "getValue",
    "right" : "getValue",
    "info" : "SimpleName[12373-12381]:SimpleName[12383-12391]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12384-12420]:Block[12394-12430]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[12398-12410]:ReturnStatement[12408-12420]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[12430-12436]:Modifier[12440-12446]"
  }, {
    "left" : "Object",
    "right" : "Object",
    "info" : "SimpleType[12437-12443]:SimpleType[12447-12453]"
  }, {
    "left" : "setValue",
    "right" : "setValue",
    "info" : "SimpleName[12444-12452]:SimpleName[12454-12462]"
  }, {
    "left" : "Object value",
    "right" : "Object value",
    "info" : "SingleVariableDeclaration[12453-12465]:SingleVariableDeclaration[12463-12475]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12467-12503]:Block[12477-12513]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[12481-12493]:ReturnStatement[12491-12503]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[12513-12519]:Modifier[12523-12529]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[12520-12524]:PrimitiveType[12530-12534]"
  }, {
    "left" : "changeAttribute",
    "right" : "changeAttribute",
    "info" : "SimpleName[12525-12540]:SimpleName[12535-12550]"
  }, {
    "left" : "Comparable newAttributeValue",
    "right" : "Comparable newAttributeValue",
    "info" : "SingleVariableDeclaration[12541-12569]:SingleVariableDeclaration[12551-12579]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12571-12635]:Block[12581-12645]"
  }, {
    "left" : "this.attributeValue = newAttributeValue;",
    "right" : "this.attributeValue = newAttributeValue;",
    "info" : "ExpressionStatement[12585-12625]:ExpressionStatement[12595-12635]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[12645-12651]:Modifier[12655-12661]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[12652-12656]:PrimitiveType[12662-12666]"
  }, {
    "left" : "writeData",
    "right" : "writeData",
    "info" : "SimpleName[12657-12666]:SimpleName[12667-12676]"
  }, {
    "left" : "ObjectDataOutput out",
    "right" : "ObjectDataOutput out",
    "info" : "SingleVariableDeclaration[12667-12687]:SingleVariableDeclaration[12677-12697]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[12696-12707]:SimpleType[12706-12717]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12708-12719]:Block[12718-12729]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[12729-12735]:Modifier[12739-12745]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[12736-12740]:PrimitiveType[12746-12750]"
  }, {
    "left" : "readData",
    "right" : "readData",
    "info" : "SimpleName[12741-12749]:SimpleName[12751-12759]"
  }, {
    "left" : "ObjectDataInput in",
    "right" : "ObjectDataInput in",
    "info" : "SingleVariableDeclaration[12750-12768]:SingleVariableDeclaration[12760-12778]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[12777-12788]:SimpleType[12787-12798]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12789-12800]:Block[12799-12810]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[12812-12819]:Modifier[12822-12829]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[12820-12824]:PrimitiveType[12830-12834]"
  }, {
    "left" : "testIt",
    "right" : "testIt",
    "info" : "SimpleName[12825-12831]:SimpleName[12835-12841]"
  }, {
    "left" : "boolean ordered",
    "right" : "boolean ordered",
    "info" : "SingleVariableDeclaration[12832-12847]:SingleVariableDeclaration[12842-12857]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12849-18068]:Block[12859-18078]"
  }, {
    "left" : "IndexImpl index = new IndexImpl(null, ordered);",
    "right" : "IndexImpl index = new IndexImpl(null, ordered);",
    "info" : "VariableDeclarationStatement[12859-12906]:VariableDeclarationStatement[12869-12916]"
  }, {
    "left" : "assertEquals(0, index.getRecords(0L).size());",
    "right" : "assertEquals(0, index.getRecords(0L).size());",
    "info" : "ExpressionStatement[12915-12960]:ExpressionStatement[12925-12970]"
  }, {
    "left" : "assertEquals(0, index.getSubRecordsBetween(0L, 1000L).size());",
    "right" : "assertEquals(0, index.getSubRecordsBetween(0L, 1000L).size());",
    "info" : "ExpressionStatement[12969-13031]:ExpressionStatement[12979-13041]"
  }, {
    "left" : "QueryRecord record5 = newRecord(5L, 55L);",
    "right" : "QueryRecord record5 = newRecord(5L, 55L);",
    "info" : "VariableDeclarationStatement[13040-13081]:VariableDeclarationStatement[13050-13091]"
  }, {
    "left" : "index.saveEntryIndex(record5);",
    "right" : "index.saveEntryIndex(record5);",
    "info" : "ExpressionStatement[13090-13120]:ExpressionStatement[13100-13130]"
  }, {
    "left" : "assertEquals(1, index.getRecordValues().size());",
    "right" : "assertEquals(1, index.getRecordValues().size());",
    "info" : "ExpressionStatement[13129-13177]:ExpressionStatement[13139-13187]"
  }, {
    "left" : "assertEquals(55L, index.getRecordValues().get(record5.getIndexKey()));",
    "right" : "assertEquals(55L, index.getRecordValues().get(record5.getIndexKey()));",
    "info" : "ExpressionStatement[13186-13256]:ExpressionStatement[13196-13266]"
  }, {
    "left" : "QueryRecord record6 = newRecord(6L, 66L);",
    "right" : "QueryRecord record6 = newRecord(6L, 66L);",
    "info" : "VariableDeclarationStatement[13265-13306]:VariableDeclarationStatement[13275-13316]"
  }, {
    "left" : "index.saveEntryIndex(record6);",
    "right" : "index.saveEntryIndex(record6);",
    "info" : "ExpressionStatement[13315-13345]:ExpressionStatement[13325-13355]"
  }, {
    "left" : "assertEquals(2, index.getRecordValues().size());",
    "right" : "assertEquals(2, index.getRecordValues().size());",
    "info" : "ExpressionStatement[13354-13402]:ExpressionStatement[13364-13412]"
  }, {
    "left" : "assertEquals(new Long(66L), index.getRecordValues().get(record6.getIndexKey()));",
    "right" : "assertEquals(new Long(66L), index.getRecordValues().get(record6.getIndexKey()));",
    "info" : "ExpressionStatement[13411-13491]:ExpressionStatement[13421-13501]"
  }, {
    "left" : "record5.changeAttribute(555L);",
    "right" : "record5.changeAttribute(555L);",
    "info" : "ExpressionStatement[13500-13530]:ExpressionStatement[13510-13540]"
  }, {
    "left" : "index.saveEntryIndex(record5);",
    "right" : "index.saveEntryIndex(record5);",
    "info" : "ExpressionStatement[13539-13569]:ExpressionStatement[13549-13579]"
  }, {
    "left" : "assertEquals(2, index.getRecordValues().size());",
    "right" : "assertEquals(2, index.getRecordValues().size());",
    "info" : "ExpressionStatement[13578-13626]:ExpressionStatement[13588-13636]"
  }, {
    "left" : "assertEquals(new Long(555L), index.getRecordValues().get(record5.getIndexKey()));",
    "right" : "assertEquals(new Long(555L), index.getRecordValues().get(record5.getIndexKey()));",
    "info" : "ExpressionStatement[13635-13716]:ExpressionStatement[13645-13726]"
  }, {
    "left" : "assertEquals(1, index.getRecords(555L).size());",
    "right" : "assertEquals(1, index.getRecords(555L).size());",
    "info" : "ExpressionStatement[13725-13772]:ExpressionStatement[13735-13782]"
  }, {
    "left" : "assertEquals(2, index.getSubRecordsBetween(55L, 555L).size());",
    "right" : "assertEquals(2, index.getSubRecordsBetween(55L, 555L).size());",
    "info" : "ExpressionStatement[13781-13843]:ExpressionStatement[13791-13853]"
  }, {
    "left" : "assertEquals(2, index.getSubRecordsBetween(66L, 555L).size());",
    "right" : "assertEquals(2, index.getSubRecordsBetween(66L, 555L).size());",
    "info" : "ExpressionStatement[13852-13914]:ExpressionStatement[13862-13924]"
  }, {
    "left" : "assertEquals(1, index.getSubRecordsBetween(555L, 555L).size());",
    "right" : "assertEquals(1, index.getSubRecordsBetween(555L, 555L).size());",
    "info" : "ExpressionStatement[13923-13986]:ExpressionStatement[13933-13996]"
  }, {
    "left" : "QueryRecord record50 = newRecord(50L, 555L);",
    "right" : "QueryRecord record50 = newRecord(50L, 555L);",
    "info" : "VariableDeclarationStatement[13995-14039]:VariableDeclarationStatement[14005-14049]"
  }, {
    "left" : "index.saveEntryIndex(record50);",
    "right" : "index.saveEntryIndex(record50);",
    "info" : "ExpressionStatement[14048-14079]:ExpressionStatement[14058-14089]"
  }, {
    "left" : "assertEquals(3, index.getRecordValues().size());",
    "right" : "assertEquals(3, index.getRecordValues().size());",
    "info" : "ExpressionStatement[14088-14136]:ExpressionStatement[14098-14146]"
  }, {
    "left" : "assertEquals(new Long(555L), index.getRecordValues().get(record5.getIndexKey()));",
    "right" : "assertEquals(new Long(555L), index.getRecordValues().get(record5.getIndexKey()));",
    "info" : "ExpressionStatement[14145-14226]:ExpressionStatement[14155-14236]"
  }, {
    "left" : "assertEquals(new Long(555L), index.getRecordValues().get(record50.getIndexKey()));",
    "right" : "assertEquals(new Long(555L), index.getRecordValues().get(record50.getIndexKey()));",
    "info" : "ExpressionStatement[14235-14317]:ExpressionStatement[14245-14327]"
  }, {
    "left" : "ConcurrentMap<Data, QueryableEntry> records = index.getRecordMap(555L);",
    "right" : "ConcurrentMap<Data, QueryableEntry> records = index.getRecordMap(555L);",
    "info" : "VariableDeclarationStatement[14326-14397]:VariableDeclarationStatement[14336-14407]"
  }, {
    "left" : "assertNotNull(records);",
    "right" : "assertNotNull(records);",
    "info" : "ExpressionStatement[14406-14429]:ExpressionStatement[14416-14439]"
  }, {
    "left" : "assertEquals(2, records.size());",
    "right" : "assertEquals(2, records.size());",
    "info" : "ExpressionStatement[14438-14470]:ExpressionStatement[14448-14480]"
  }, {
    "left" : "assertEquals(record5, records.get(record5.getIndexKey()));",
    "right" : "assertEquals(record5, records.get(record5.getIndexKey()));",
    "info" : "ExpressionStatement[14479-14537]:ExpressionStatement[14489-14547]"
  }, {
    "left" : "assertEquals(record50, records.get(record50.getIndexKey()));",
    "right" : "assertEquals(record50, records.get(record50.getIndexKey()));",
    "info" : "ExpressionStatement[14546-14606]:ExpressionStatement[14556-14616]"
  }, {
    "left" : "assertEquals(2, index.getRecords(555L).size());",
    "right" : "assertEquals(2, index.getRecords(555L).size());",
    "info" : "ExpressionStatement[14615-14662]:ExpressionStatement[14625-14672]"
  }, {
    "left" : "assertEquals(3, index.getSubRecordsBetween(55L, 555L).size());",
    "right" : "assertEquals(3, index.getSubRecordsBetween(55L, 555L).size());",
    "info" : "ExpressionStatement[14671-14733]:ExpressionStatement[14681-14743]"
  }, {
    "left" : "assertEquals(3, index.getSubRecordsBetween(66L, 555L).size());",
    "right" : "assertEquals(3, index.getSubRecordsBetween(66L, 555L).size());",
    "info" : "ExpressionStatement[14742-14804]:ExpressionStatement[14752-14814]"
  }, {
    "left" : "assertEquals(2, index.getSubRecordsBetween(555L, 555L).size());",
    "right" : "assertEquals(2, index.getSubRecordsBetween(555L, 555L).size());",
    "info" : "ExpressionStatement[14813-14876]:ExpressionStatement[14823-14886]"
  }, {
    "left" : "assertEquals(0, index.getSubRecords(ComparisonType.LESSER, 66L).size());",
    "right" : "assertEquals(0, index.getSubRecords(ComparisonType.LESSER, 66L).size());",
    "info" : "ExpressionStatement[14885-14957]:ExpressionStatement[14895-14967]"
  }, {
    "left" : "assertEquals(1, index.getSubRecords(ComparisonType.LESSER_EQUAL, 66L).size());",
    "right" : "assertEquals(1, index.getSubRecords(ComparisonType.LESSER_EQUAL, 66L).size());",
    "info" : "ExpressionStatement[14966-15044]:ExpressionStatement[14976-15054]"
  }, {
    "left" : "assertEquals(1, index.getSubRecords(ComparisonType.LESSER_EQUAL, 67L).size());",
    "right" : "assertEquals(1, index.getSubRecords(ComparisonType.LESSER_EQUAL, 67L).size());",
    "info" : "ExpressionStatement[15053-15131]:ExpressionStatement[15063-15141]"
  }, {
    "left" : "assertEquals(2, index.getSubRecords(ComparisonType.GREATER, 66L).size());",
    "right" : "assertEquals(2, index.getSubRecords(ComparisonType.GREATER, 66L).size());",
    "info" : "ExpressionStatement[15140-15213]:ExpressionStatement[15150-15223]"
  }, {
    "left" : "assertEquals(3, index.getSubRecords(ComparisonType.GREATER_EQUAL, 66L).size());",
    "right" : "assertEquals(3, index.getSubRecords(ComparisonType.GREATER_EQUAL, 66L).size());",
    "info" : "ExpressionStatement[15222-15301]:ExpressionStatement[15232-15311]"
  }, {
    "left" : "assertEquals(3, index.getSubRecords(ComparisonType.GREATER_EQUAL, 61L).size());",
    "right" : "assertEquals(3, index.getSubRecords(ComparisonType.GREATER_EQUAL, 61L).size());",
    "info" : "ExpressionStatement[15310-15389]:ExpressionStatement[15320-15399]"
  }, {
    "left" : "assertEquals(3, index.getSubRecords(ComparisonType.NOT_EQUAL, 61L).size());",
    "right" : "assertEquals(3, index.getSubRecords(ComparisonType.NOT_EQUAL, 61L).size());",
    "info" : "ExpressionStatement[15398-15473]:ExpressionStatement[15408-15483]"
  }, {
    "left" : "assertEquals(2, index.getSubRecords(ComparisonType.NOT_EQUAL, 66L).size());",
    "right" : "assertEquals(2, index.getSubRecords(ComparisonType.NOT_EQUAL, 66L).size());",
    "info" : "ExpressionStatement[15482-15557]:ExpressionStatement[15492-15567]"
  }, {
    "left" : "assertEquals(1, index.getSubRecords(ComparisonType.NOT_EQUAL, 555L).size());",
    "right" : "assertEquals(1, index.getSubRecords(ComparisonType.NOT_EQUAL, 555L).size());",
    "info" : "ExpressionStatement[15566-15642]:ExpressionStatement[15576-15652]"
  }, {
    "left" : "assertEquals(3, index.getRecords(new Comparable[]{66L, 555L, 34234L}).size());",
    "right" : "assertEquals(3, index.getRecords(new Comparable[]{66L, 555L, 34234L}).size());",
    "info" : "ExpressionStatement[15651-15729]:ExpressionStatement[15661-15739]"
  }, {
    "left" : "assertEquals(2, index.getRecords(new Comparable[]{555L, 34234L}).size());",
    "right" : "assertEquals(2, index.getRecords(new Comparable[]{555L, 34234L}).size());",
    "info" : "ExpressionStatement[15738-15811]:ExpressionStatement[15748-15821]"
  }, {
    "left" : "index.removeEntryIndex(record5.getIndexKey());",
    "right" : "index.removeEntryIndex(record5.getIndexKey());",
    "info" : "ExpressionStatement[15820-15866]:ExpressionStatement[15830-15876]"
  }, {
    "left" : "assertEquals(2, index.getRecordValues().size());",
    "right" : "assertEquals(2, index.getRecordValues().size());",
    "info" : "ExpressionStatement[15875-15923]:ExpressionStatement[15885-15933]"
  }, {
    "left" : "assertEquals(new Long(555L), index.getRecordValues().get(record50.getIndexKey()));",
    "right" : "assertEquals(new Long(555L), index.getRecordValues().get(record50.getIndexKey()));",
    "info" : "ExpressionStatement[15932-16014]:ExpressionStatement[15942-16024]"
  }, {
    "left" : "assertEquals(null, index.getRecordValues().get(record5.getIndexKey()));",
    "right" : "assertEquals(null, index.getRecordValues().get(record5.getIndexKey()));",
    "info" : "ExpressionStatement[16023-16094]:ExpressionStatement[16033-16104]"
  }, {
    "left" : "records = index.getRecordMap(555L);",
    "right" : "records = index.getRecordMap(555L);",
    "info" : "ExpressionStatement[16103-16138]:ExpressionStatement[16113-16148]"
  }, {
    "left" : "assertNotNull(records);",
    "right" : "assertNotNull(records);",
    "info" : "ExpressionStatement[16147-16170]:ExpressionStatement[16157-16180]"
  }, {
    "left" : "assertEquals(null, records.get(5L));",
    "right" : "assertEquals(null, records.get(5L));",
    "info" : "ExpressionStatement[16179-16215]:ExpressionStatement[16189-16225]"
  }, {
    "left" : "assertEquals(record50, records.get(toData(50L)));",
    "right" : "assertEquals(record50, records.get(toData(50L)));",
    "info" : "ExpressionStatement[16224-16273]:ExpressionStatement[16234-16283]"
  }, {
    "left" : "assertEquals(1, index.getRecords(555L).size());",
    "right" : "assertEquals(1, index.getRecords(555L).size());",
    "info" : "ExpressionStatement[16282-16329]:ExpressionStatement[16292-16339]"
  }, {
    "left" : "assertEquals(2, index.getSubRecordsBetween(55L, 555L).size());",
    "right" : "assertEquals(2, index.getSubRecordsBetween(55L, 555L).size());",
    "info" : "ExpressionStatement[16338-16400]:ExpressionStatement[16348-16410]"
  }, {
    "left" : "assertEquals(2, index.getSubRecordsBetween(66L, 555L).size());",
    "right" : "assertEquals(2, index.getSubRecordsBetween(66L, 555L).size());",
    "info" : "ExpressionStatement[16409-16471]:ExpressionStatement[16419-16481]"
  }, {
    "left" : "assertEquals(1, index.getSubRecordsBetween(555L, 555L).size());",
    "right" : "assertEquals(1, index.getSubRecordsBetween(555L, 555L).size());",
    "info" : "ExpressionStatement[16480-16543]:ExpressionStatement[16490-16553]"
  }, {
    "left" : "assertEquals(0, index.getSubRecords(ComparisonType.LESSER, 66L).size());",
    "right" : "assertEquals(0, index.getSubRecords(ComparisonType.LESSER, 66L).size());",
    "info" : "ExpressionStatement[16552-16624]:ExpressionStatement[16562-16634]"
  }, {
    "left" : "assertEquals(1, index.getSubRecords(ComparisonType.LESSER_EQUAL, 66L).size());",
    "right" : "assertEquals(1, index.getSubRecords(ComparisonType.LESSER_EQUAL, 66L).size());",
    "info" : "ExpressionStatement[16633-16711]:ExpressionStatement[16643-16721]"
  }, {
    "left" : "assertEquals(1, index.getSubRecords(ComparisonType.LESSER_EQUAL, 67L).size());",
    "right" : "assertEquals(1, index.getSubRecords(ComparisonType.LESSER_EQUAL, 67L).size());",
    "info" : "ExpressionStatement[16720-16798]:ExpressionStatement[16730-16808]"
  }, {
    "left" : "assertEquals(1, index.getSubRecords(ComparisonType.GREATER, 66L).size());",
    "right" : "assertEquals(1, index.getSubRecords(ComparisonType.GREATER, 66L).size());",
    "info" : "ExpressionStatement[16807-16880]:ExpressionStatement[16817-16890]"
  }, {
    "left" : "assertEquals(2, index.getSubRecords(ComparisonType.GREATER_EQUAL, 66L).size());",
    "right" : "assertEquals(2, index.getSubRecords(ComparisonType.GREATER_EQUAL, 66L).size());",
    "info" : "ExpressionStatement[16889-16968]:ExpressionStatement[16899-16978]"
  }, {
    "left" : "assertEquals(2, index.getSubRecords(ComparisonType.GREATER_EQUAL, 61L).size());",
    "right" : "assertEquals(2, index.getSubRecords(ComparisonType.GREATER_EQUAL, 61L).size());",
    "info" : "ExpressionStatement[16977-17056]:ExpressionStatement[16987-17066]"
  }, {
    "left" : "index.removeEntryIndex(record50.getIndexKey());",
    "right" : "index.removeEntryIndex(record50.getIndexKey());",
    "info" : "ExpressionStatement[17065-17112]:ExpressionStatement[17075-17122]"
  }, {
    "left" : "assertEquals(1, index.getRecordValues().size());",
    "right" : "assertEquals(1, index.getRecordValues().size());",
    "info" : "ExpressionStatement[17121-17169]:ExpressionStatement[17131-17179]"
  }, {
    "left" : "assertEquals(null, index.getRecordValues().get(50L));",
    "right" : "assertEquals(null, index.getRecordValues().get(50L));",
    "info" : "ExpressionStatement[17178-17231]:ExpressionStatement[17188-17241]"
  }, {
    "left" : "records = index.getRecordMap(555L);",
    "right" : "records = index.getRecordMap(555L);",
    "info" : "ExpressionStatement[17240-17275]:ExpressionStatement[17250-17285]"
  }, {
    "left" : "assertNull(records);",
    "right" : "assertNull(records);",
    "info" : "ExpressionStatement[17284-17304]:ExpressionStatement[17294-17314]"
  }, {
    "left" : "assertEquals(0, index.getRecords(555L).size());",
    "right" : "assertEquals(0, index.getRecords(555L).size());",
    "info" : "ExpressionStatement[17313-17360]:ExpressionStatement[17323-17370]"
  }, {
    "left" : "assertEquals(1, index.getSubRecordsBetween(55L, 555L).size());",
    "right" : "assertEquals(1, index.getSubRecordsBetween(55L, 555L).size());",
    "info" : "ExpressionStatement[17369-17431]:ExpressionStatement[17379-17441]"
  }, {
    "left" : "assertEquals(1, index.getSubRecordsBetween(66L, 555L).size());",
    "right" : "assertEquals(1, index.getSubRecordsBetween(66L, 555L).size());",
    "info" : "ExpressionStatement[17440-17502]:ExpressionStatement[17450-17512]"
  }, {
    "left" : "assertEquals(0, index.getSubRecordsBetween(555L, 555L).size());",
    "right" : "assertEquals(0, index.getSubRecordsBetween(555L, 555L).size());",
    "info" : "ExpressionStatement[17511-17574]:ExpressionStatement[17521-17584]"
  }, {
    "left" : "index.removeEntryIndex(record6.getIndexKey());",
    "right" : "index.removeEntryIndex(record6.getIndexKey());",
    "info" : "ExpressionStatement[17583-17629]:ExpressionStatement[17593-17639]"
  }, {
    "left" : "assertEquals(0, index.getRecordValues().size());",
    "right" : "assertEquals(0, index.getRecordValues().size());",
    "info" : "ExpressionStatement[17638-17686]:ExpressionStatement[17648-17696]"
  }, {
    "left" : "assertEquals(null, index.getRecordValues().get(6L));",
    "right" : "assertEquals(null, index.getRecordValues().get(6L));",
    "info" : "ExpressionStatement[17695-17747]:ExpressionStatement[17705-17757]"
  }, {
    "left" : "assertNull(index.getRecordMap(66L));",
    "right" : "assertNull(index.getRecordMap(66L));",
    "info" : "ExpressionStatement[17756-17792]:ExpressionStatement[17766-17802]"
  }, {
    "left" : "assertEquals(0, index.getRecords(555L).size());",
    "right" : "assertEquals(0, index.getRecords(555L).size());",
    "info" : "ExpressionStatement[17801-17848]:ExpressionStatement[17811-17858]"
  }, {
    "left" : "assertEquals(0, index.getSubRecordsBetween(55L, 555L).size());",
    "right" : "assertEquals(0, index.getSubRecordsBetween(55L, 555L).size());",
    "info" : "ExpressionStatement[17857-17919]:ExpressionStatement[17867-17929]"
  }, {
    "left" : "assertEquals(0, index.getSubRecordsBetween(66L, 555L).size());",
    "right" : "assertEquals(0, index.getSubRecordsBetween(66L, 555L).size());",
    "info" : "ExpressionStatement[17928-17990]:ExpressionStatement[17938-18000]"
  }, {
    "left" : "assertEquals(0, index.getSubRecordsBetween(555L, 555L).size());",
    "right" : "assertEquals(0, index.getSubRecordsBetween(555L, 555L).size());",
    "info" : "ExpressionStatement[17999-18062]:ExpressionStatement[18009-18072]"
  } ]
}