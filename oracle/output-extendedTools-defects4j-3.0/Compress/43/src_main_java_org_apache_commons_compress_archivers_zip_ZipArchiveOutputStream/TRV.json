{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "static final int BUFFER_SIZE = 512;",
      "right" : "static final int BUFFER_SIZE = 512;",
      "info" : "FieldDeclaration[3911-3946]:FieldDeclaration[3911-3946]"
    }, {
      "left" : "private static final int LFH_SIG_OFFSET = 0;",
      "right" : "private static final int LFH_SIG_OFFSET = 0;",
      "info" : "FieldDeclaration[3951-3995]:FieldDeclaration[3951-3995]"
    }, {
      "left" : "private static final int LFH_VERSION_NEEDED_OFFSET = 4;",
      "right" : "private static final int LFH_VERSION_NEEDED_OFFSET = 4;",
      "info" : "FieldDeclaration[4000-4055]:FieldDeclaration[4000-4055]"
    }, {
      "left" : "private static final int LFH_GPB_OFFSET = 6;",
      "right" : "private static final int LFH_GPB_OFFSET = 6;",
      "info" : "FieldDeclaration[4060-4104]:FieldDeclaration[4060-4104]"
    }, {
      "left" : "private static final int LFH_METHOD_OFFSET = 8;",
      "right" : "private static final int LFH_METHOD_OFFSET = 8;",
      "info" : "FieldDeclaration[4109-4156]:FieldDeclaration[4109-4156]"
    }, {
      "left" : "private static final int LFH_TIME_OFFSET = 10;",
      "right" : "private static final int LFH_TIME_OFFSET = 10;",
      "info" : "FieldDeclaration[4161-4207]:FieldDeclaration[4161-4207]"
    }, {
      "left" : "private static final int LFH_CRC_OFFSET = 14;",
      "right" : "private static final int LFH_CRC_OFFSET = 14;",
      "info" : "FieldDeclaration[4212-4257]:FieldDeclaration[4212-4257]"
    }, {
      "left" : "private static final int LFH_COMPRESSED_SIZE_OFFSET = 18;",
      "right" : "private static final int LFH_COMPRESSED_SIZE_OFFSET = 18;",
      "info" : "FieldDeclaration[4262-4319]:FieldDeclaration[4262-4319]"
    }, {
      "left" : "private static final int LFH_ORIGINAL_SIZE_OFFSET = 22;",
      "right" : "private static final int LFH_ORIGINAL_SIZE_OFFSET = 22;",
      "info" : "FieldDeclaration[4324-4379]:FieldDeclaration[4324-4379]"
    }, {
      "left" : "private static final int LFH_FILENAME_LENGTH_OFFSET = 26;",
      "right" : "private static final int LFH_FILENAME_LENGTH_OFFSET = 26;",
      "info" : "FieldDeclaration[4384-4441]:FieldDeclaration[4384-4441]"
    }, {
      "left" : "private static final int LFH_EXTRA_LENGTH_OFFSET = 28;",
      "right" : "private static final int LFH_EXTRA_LENGTH_OFFSET = 28;",
      "info" : "FieldDeclaration[4446-4500]:FieldDeclaration[4446-4500]"
    }, {
      "left" : "private static final int LFH_FILENAME_OFFSET = 30;",
      "right" : "private static final int LFH_FILENAME_OFFSET = 30;",
      "info" : "FieldDeclaration[4505-4555]:FieldDeclaration[4505-4555]"
    }, {
      "left" : "private static final int CFH_SIG_OFFSET = 0;",
      "right" : "private static final int CFH_SIG_OFFSET = 0;",
      "info" : "FieldDeclaration[4560-4604]:FieldDeclaration[4560-4604]"
    }, {
      "left" : "private static final int CFH_VERSION_MADE_BY_OFFSET = 4;",
      "right" : "private static final int CFH_VERSION_MADE_BY_OFFSET = 4;",
      "info" : "FieldDeclaration[4609-4665]:FieldDeclaration[4609-4665]"
    }, {
      "left" : "private static final int CFH_VERSION_NEEDED_OFFSET = 6;",
      "right" : "private static final int CFH_VERSION_NEEDED_OFFSET = 6;",
      "info" : "FieldDeclaration[4670-4725]:FieldDeclaration[4670-4725]"
    }, {
      "left" : "private static final int CFH_GPB_OFFSET = 8;",
      "right" : "private static final int CFH_GPB_OFFSET = 8;",
      "info" : "FieldDeclaration[4730-4774]:FieldDeclaration[4730-4774]"
    }, {
      "left" : "private static final int CFH_METHOD_OFFSET = 10;",
      "right" : "private static final int CFH_METHOD_OFFSET = 10;",
      "info" : "FieldDeclaration[4779-4827]:FieldDeclaration[4779-4827]"
    }, {
      "left" : "private static final int CFH_TIME_OFFSET = 12;",
      "right" : "private static final int CFH_TIME_OFFSET = 12;",
      "info" : "FieldDeclaration[4832-4878]:FieldDeclaration[4832-4878]"
    }, {
      "left" : "private static final int CFH_CRC_OFFSET = 16;",
      "right" : "private static final int CFH_CRC_OFFSET = 16;",
      "info" : "FieldDeclaration[4883-4928]:FieldDeclaration[4883-4928]"
    }, {
      "left" : "private static final int CFH_COMPRESSED_SIZE_OFFSET = 20;",
      "right" : "private static final int CFH_COMPRESSED_SIZE_OFFSET = 20;",
      "info" : "FieldDeclaration[4933-4990]:FieldDeclaration[4933-4990]"
    }, {
      "left" : "private static final int CFH_ORIGINAL_SIZE_OFFSET = 24;",
      "right" : "private static final int CFH_ORIGINAL_SIZE_OFFSET = 24;",
      "info" : "FieldDeclaration[4995-5050]:FieldDeclaration[4995-5050]"
    }, {
      "left" : "private static final int CFH_FILENAME_LENGTH_OFFSET = 28;",
      "right" : "private static final int CFH_FILENAME_LENGTH_OFFSET = 28;",
      "info" : "FieldDeclaration[5055-5112]:FieldDeclaration[5055-5112]"
    }, {
      "left" : "private static final int CFH_EXTRA_LENGTH_OFFSET = 30;",
      "right" : "private static final int CFH_EXTRA_LENGTH_OFFSET = 30;",
      "info" : "FieldDeclaration[5117-5171]:FieldDeclaration[5117-5171]"
    }, {
      "left" : "private static final int CFH_COMMENT_LENGTH_OFFSET = 32;",
      "right" : "private static final int CFH_COMMENT_LENGTH_OFFSET = 32;",
      "info" : "FieldDeclaration[5176-5232]:FieldDeclaration[5176-5232]"
    }, {
      "left" : "private static final int CFH_DISK_NUMBER_OFFSET = 34;",
      "right" : "private static final int CFH_DISK_NUMBER_OFFSET = 34;",
      "info" : "FieldDeclaration[5237-5290]:FieldDeclaration[5237-5290]"
    }, {
      "left" : "private static final int CFH_INTERNAL_ATTRIBUTES_OFFSET = 36;",
      "right" : "private static final int CFH_INTERNAL_ATTRIBUTES_OFFSET = 36;",
      "info" : "FieldDeclaration[5295-5356]:FieldDeclaration[5295-5356]"
    }, {
      "left" : "private static final int CFH_EXTERNAL_ATTRIBUTES_OFFSET = 38;",
      "right" : "private static final int CFH_EXTERNAL_ATTRIBUTES_OFFSET = 38;",
      "info" : "FieldDeclaration[5361-5422]:FieldDeclaration[5361-5422]"
    }, {
      "left" : "private static final int CFH_LFH_OFFSET = 42;",
      "right" : "private static final int CFH_LFH_OFFSET = 42;",
      "info" : "FieldDeclaration[5427-5472]:FieldDeclaration[5427-5472]"
    }, {
      "left" : "private static final int CFH_FILENAME_OFFSET = 46;",
      "right" : "private static final int CFH_FILENAME_OFFSET = 46;",
      "info" : "FieldDeclaration[5477-5527]:FieldDeclaration[5477-5527]"
    }, {
      "left" : "protected boolean finished = false;",
      "right" : "protected boolean finished = false;",
      "info" : "FieldDeclaration[5533-5658]:FieldDeclaration[5533-5658]"
    }, {
      "left" : "public static final int DEFLATED = java.util.zip.ZipEntry.DEFLATED;",
      "right" : "public static final int DEFLATED = java.util.zip.ZipEntry.DEFLATED;",
      "info" : "FieldDeclaration[5664-5795]:FieldDeclaration[5664-5795]"
    }, {
      "left" : "public static final int DEFAULT_COMPRESSION = Deflater.DEFAULT_COMPRESSION;",
      "right" : "public static final int DEFAULT_COMPRESSION = Deflater.DEFAULT_COMPRESSION;",
      "info" : "FieldDeclaration[5801-5947]:FieldDeclaration[5801-5947]"
    }, {
      "left" : "public static final int STORED = java.util.zip.ZipEntry.STORED;",
      "right" : "public static final int STORED = java.util.zip.ZipEntry.STORED;",
      "info" : "FieldDeclaration[5953-6078]:FieldDeclaration[5953-6078]"
    }, {
      "left" : "static final String DEFAULT_ENCODING = ZipEncodingHelper.UTF8;",
      "right" : "static final String DEFAULT_ENCODING = ZipEncodingHelper.UTF8;",
      "info" : "FieldDeclaration[6084-6214]:FieldDeclaration[6084-6214]"
    }, {
      "left" : "@Deprecated\n    public static final int EFS_FLAG = GeneralPurposeBit.UFT8_NAMES_FLAG;",
      "right" : "@Deprecated\n    public static final int EFS_FLAG = GeneralPurposeBit.UFT8_NAMES_FLAG;",
      "info" : "FieldDeclaration[6220-6483]:FieldDeclaration[6220-6483]"
    }, {
      "left" : "private static final byte[] EMPTY = new byte[0];",
      "right" : "private static final byte[] EMPTY = new byte[0];",
      "info" : "FieldDeclaration[6489-6537]:FieldDeclaration[6489-6537]"
    }, {
      "left" : "private CurrentEntry entry;",
      "right" : "private CurrentEntry entry;",
      "info" : "FieldDeclaration[6543-6608]:FieldDeclaration[6543-6608]"
    }, {
      "left" : "private String comment = \"\";",
      "right" : "private String comment = \"\";",
      "info" : "FieldDeclaration[6614-6683]:FieldDeclaration[6614-6683]"
    }, {
      "left" : "private int level = DEFAULT_COMPRESSION;",
      "right" : "private int level = DEFAULT_COMPRESSION;",
      "info" : "FieldDeclaration[6689-6786]:FieldDeclaration[6689-6786]"
    }, {
      "left" : "private boolean hasCompressionLevelChanged = false;",
      "right" : "private boolean hasCompressionLevelChanged = false;",
      "info" : "FieldDeclaration[6792-6940]:FieldDeclaration[6792-6940]"
    }, {
      "left" : "private int method = java.util.zip.ZipEntry.DEFLATED;",
      "right" : "private int method = java.util.zip.ZipEntry.DEFLATED;",
      "info" : "FieldDeclaration[6946-7065]:FieldDeclaration[6946-7065]"
    }, {
      "left" : "private final List<ZipArchiveEntry> entries =\n        new LinkedList<>();",
      "right" : "private final List<ZipArchiveEntry> entries =\n        new LinkedList<>();",
      "info" : "FieldDeclaration[7071-7209]:FieldDeclaration[7071-7209]"
    }, {
      "left" : "private final StreamCompressor streamCompressor;",
      "right" : "private final StreamCompressor streamCompressor;",
      "info" : "FieldDeclaration[7215-7263]:FieldDeclaration[7215-7263]"
    }, {
      "left" : "private long cdOffset = 0;",
      "right" : "private long cdOffset = 0;",
      "info" : "FieldDeclaration[7269-7346]:FieldDeclaration[7269-7346]"
    }, {
      "left" : "private long cdLength = 0;",
      "right" : "private long cdLength = 0;",
      "info" : "FieldDeclaration[7352-7430]:FieldDeclaration[7352-7430]"
    }, {
      "left" : "private static final byte[] ZERO = {0, 0};",
      "right" : "private static final byte[] ZERO = {0, 0};",
      "info" : "FieldDeclaration[7436-7526]:FieldDeclaration[7436-7526]"
    }, {
      "left" : "private static final byte[] LZERO = {0, 0, 0, 0};",
      "right" : "private static final byte[] LZERO = {0, 0, 0, 0};",
      "info" : "FieldDeclaration[7532-7628]:FieldDeclaration[7532-7628]"
    }, {
      "left" : "private static final byte[] ONE = ZipLong.getBytes(1L);",
      "right" : "private static final byte[] ONE = ZipLong.getBytes(1L);",
      "info" : "FieldDeclaration[7634-7689]:FieldDeclaration[7634-7689]"
    }, {
      "left" : "private final Map<ZipArchiveEntry, EntryMetaData> metaData =\n        new HashMap<>();",
      "right" : "private final Map<ZipArchiveEntry, EntryMetaData> metaData =\n        new HashMap<>();",
      "info" : "FieldDeclaration[7695-7848]:FieldDeclaration[7695-7848]"
    }, {
      "left" : "private String encoding = DEFAULT_ENCODING;",
      "right" : "private String encoding = DEFAULT_ENCODING;",
      "info" : "FieldDeclaration[7854-8209]:FieldDeclaration[7854-8209]"
    }, {
      "left" : "private ZipEncoding zipEncoding =\n        ZipEncodingHelper.getZipEncoding(DEFAULT_ENCODING);",
      "right" : "private ZipEncoding zipEncoding =\n        ZipEncodingHelper.getZipEncoding(DEFAULT_ENCODING);",
      "info" : "FieldDeclaration[8215-8491]:FieldDeclaration[8215-8491]"
    }, {
      "left" : "protected final Deflater def;",
      "right" : "protected final Deflater def;",
      "info" : "FieldDeclaration[8498-8598]:FieldDeclaration[8498-8598]"
    }, {
      "left" : "private final SeekableByteChannel channel;",
      "right" : "private final SeekableByteChannel channel;",
      "info" : "FieldDeclaration[8603-8699]:FieldDeclaration[8603-8699]"
    }, {
      "left" : "private final OutputStream out;",
      "right" : "private final OutputStream out;",
      "info" : "FieldDeclaration[8705-8736]:FieldDeclaration[8705-8736]"
    }, {
      "left" : "private boolean useUTF8Flag = true;",
      "right" : "private boolean useUTF8Flag = true;",
      "info" : "FieldDeclaration[8742-8888]:FieldDeclaration[8742-8888]"
    }, {
      "left" : "private boolean fallbackToUTF8 = false;",
      "right" : "private boolean fallbackToUTF8 = false;",
      "info" : "FieldDeclaration[8895-9010]:FieldDeclaration[8895-9010]"
    }, {
      "left" : "private UnicodeExtraFieldPolicy createUnicodeExtraFields = UnicodeExtraFieldPolicy.NEVER;",
      "right" : "private UnicodeExtraFieldPolicy createUnicodeExtraFields = UnicodeExtraFieldPolicy.NEVER;",
      "info" : "FieldDeclaration[9016-9186]:FieldDeclaration[9016-9186]"
    }, {
      "left" : "private boolean hasUsedZip64 = false;",
      "right" : "private boolean hasUsedZip64 = false;",
      "info" : "FieldDeclaration[9192-9340]:FieldDeclaration[9192-9340]"
    }, {
      "left" : "private Zip64Mode zip64Mode = Zip64Mode.AsNeeded;",
      "right" : "private Zip64Mode zip64Mode = Zip64Mode.AsNeeded;",
      "info" : "FieldDeclaration[9346-9395]:FieldDeclaration[9346-9395]"
    }, {
      "left" : "private final byte[] copyBuffer = new byte[32768];",
      "right" : "private final byte[] copyBuffer = new byte[32768];",
      "info" : "FieldDeclaration[9401-9451]:FieldDeclaration[9401-9451]"
    }, {
      "left" : "private final Calendar calendarInstance = Calendar.getInstance();",
      "right" : "private final Calendar calendarInstance = Calendar.getInstance();",
      "info" : "FieldDeclaration[9456-9521]:FieldDeclaration[9456-9521]"
    }, {
      "left" : "public ZipArchiveOutputStream(final OutputStream out)",
      "right" : "public ZipArchiveOutputStream(final OutputStream out)",
      "info" : "MethodDeclaration[9527-9873]:MethodDeclaration[9527-9873]"
    }, {
      "left" : "public ZipArchiveOutputStream(final File file) throws IOException",
      "right" : "public ZipArchiveOutputStream(final File file) throws IOException",
      "info" : "MethodDeclaration[9879-11092]:MethodDeclaration[9879-11092]"
    }, {
      "left" : "public ZipArchiveOutputStream(SeekableByteChannel channel) throws IOException",
      "right" : "public ZipArchiveOutputStream(SeekableByteChannel channel) throws IOException",
      "info" : "MethodDeclaration[11098-11713]:MethodDeclaration[11098-11713]"
    }, {
      "left" : "public boolean isSeekable()",
      "right" : "public boolean isSeekable()",
      "info" : "MethodDeclaration[11719-12150]:MethodDeclaration[11719-12150]"
    }, {
      "left" : "public void setEncoding(final String encoding)",
      "right" : "public void setEncoding(final String encoding)",
      "info" : "MethodDeclaration[12156-12847]:MethodDeclaration[12156-12847]"
    }, {
      "left" : "public String getEncoding()",
      "right" : "public String getEncoding()",
      "info" : "MethodDeclaration[12853-13071]:MethodDeclaration[12853-13071]"
    }, {
      "left" : "public void setUseLanguageEncodingFlag(final boolean b)",
      "right" : "public void setUseLanguageEncodingFlag(final boolean b)",
      "info" : "MethodDeclaration[13077-13457]:MethodDeclaration[13077-13457]"
    }, {
      "left" : "public void setCreateUnicodeExtraFields(final UnicodeExtraFieldPolicy b)",
      "right" : "public void setCreateUnicodeExtraFields(final UnicodeExtraFieldPolicy b)",
      "info" : "MethodDeclaration[13463-13747]:MethodDeclaration[13463-13747]"
    }, {
      "left" : "public void setFallbackToUTF8(final boolean b)",
      "right" : "public void setFallbackToUTF8(final boolean b)",
      "info" : "MethodDeclaration[13753-14190]:MethodDeclaration[13753-14190]"
    }, {
      "left" : "public void setUseZip64(final Zip64Mode mode)",
      "right" : "public void setUseZip64(final Zip64Mode mode)",
      "info" : "MethodDeclaration[14196-16659]:MethodDeclaration[14196-16659]"
    }, {
      "left" : "public void finish() throws IOException",
      "right" : "public void finish() throws IOException",
      "info" : "MethodDeclaration[16665-17549]:MethodDeclaration[16665-17549]"
    }, {
      "left" : "private void writeCentralDirectoryInChunks() throws IOException",
      "right" : "private void writeCentralDirectoryInChunks() throws IOException",
      "info" : "MethodDeclaration[17555-18183]:MethodDeclaration[17555-18183]"
    }, {
      "left" : "public void closeArchiveEntry() throws IOException",
      "right" : "public void closeArchiveEntry() throws IOException",
      "info" : "MethodDeclaration[18189-19045]:MethodDeclaration[18189-19045]"
    }, {
      "left" : "private void closeCopiedEntry(final boolean phased) throws IOException",
      "right" : "private void closeCopiedEntry(final boolean phased) throws IOException",
      "info" : "MethodDeclaration[19051-19929]:MethodDeclaration[19051-19929]"
    }, {
      "left" : "private void closeEntry(final boolean actuallyNeedsZip64, final boolean phased) throws IOException",
      "right" : "private void closeEntry(final boolean actuallyNeedsZip64, final boolean phased) throws IOException",
      "info" : "MethodDeclaration[19935-20247]:MethodDeclaration[19935-20247]"
    }, {
      "left" : "private void preClose() throws IOException",
      "right" : "private void preClose() throws IOException",
      "info" : "MethodDeclaration[20253-20588]:MethodDeclaration[20253-20588]"
    }, {
      "left" : "public void addRawArchiveEntry(final ZipArchiveEntry entry, final InputStream rawStream)\n            throws IOException",
      "right" : "public void addRawArchiveEntry(final ZipArchiveEntry entry, final InputStream rawStream)\n            throws IOException",
      "info" : "MethodDeclaration[20594-22014]:MethodDeclaration[20594-22014]"
    }, {
      "left" : "private void flushDeflater() throws IOException",
      "right" : "private void flushDeflater() throws IOException",
      "info" : "MethodDeclaration[22020-22271]:MethodDeclaration[22020-22271]"
    }, {
      "left" : "private boolean handleSizesAndCrc(final long bytesWritten, final long crc,\n                                      final Zip64Mode effectiveMode)\n        throws ZipException",
      "right" : "private boolean handleSizesAndCrc(final long bytesWritten, final long crc,\n                                      final Zip64Mode effectiveMode)\n        throws ZipException",
      "info" : "MethodDeclaration[22277-24185]:MethodDeclaration[22277-24185]"
    }, {
      "left" : "private boolean checkIfNeedsZip64(final Zip64Mode effectiveMode)\n            throws ZipException",
      "right" : "private boolean checkIfNeedsZip64(final Zip64Mode effectiveMode)\n            throws ZipException",
      "info" : "MethodDeclaration[24191-24767]:MethodDeclaration[24191-24767]"
    }, {
      "left" : "private boolean isZip64Required(final ZipArchiveEntry entry1, final Zip64Mode requestedMode)",
      "right" : "private boolean isZip64Required(final ZipArchiveEntry entry1, final Zip64Mode requestedMode)",
      "info" : "MethodDeclaration[24773-24952]:MethodDeclaration[24773-24952]"
    }, {
      "left" : "private boolean isTooLageForZip32(final ZipArchiveEntry zipArchiveEntry",
      "right" : "private boolean isTooLageForZip32(final ZipArchiveEntry zipArchiveEntry",
      "info" : "MethodDeclaration[24958-25148]:MethodDeclaration[24958-25148]"
    }, {
      "left" : "private void rewriteSizesAndCrc(final boolean actuallyNeedsZip64)\n        throws IOException",
      "right" : "private void rewriteSizesAndCrc(final boolean actuallyNeedsZip64)\n        throws IOException",
      "info" : "MethodDeclaration[25154-27441]:MethodDeclaration[25154-27441]"
    }, {
      "left" : "public void putArchiveEntry(final ArchiveEntry archiveEntry) throws IOException",
      "right" : "public void putArchiveEntry(final ArchiveEntry archiveEntry) throws IOException",
      "info" : "MethodDeclaration[27447-27893]:MethodDeclaration[27447-27893]"
    }, {
      "left" : "private void putArchiveEntry(final ArchiveEntry archiveEntry, final boolean phased) throws IOException",
      "right" : "private void putArchiveEntry(final ArchiveEntry archiveEntry, final boolean phased) throws IOException",
      "info" : "MethodDeclaration[27899-30400]:MethodDeclaration[27899-30400]"
    }, {
      "left" : "private void setDefaults(final ZipArchiveEntry entry)",
      "right" : "private void setDefaults(final ZipArchiveEntry entry)",
      "info" : "MethodDeclaration[30406-30795]:MethodDeclaration[30406-30795]"
    }, {
      "left" : "private void validateSizeInformation(final Zip64Mode effectiveMode)\n        throws ZipException",
      "right" : "private void validateSizeInformation(final Zip64Mode effectiveMode)\n        throws ZipException",
      "info" : "MethodDeclaration[30801-32212]:MethodDeclaration[30801-32212]"
    }, {
      "left" : "private boolean shouldAddZip64Extra(final ZipArchiveEntry entry, final Zip64Mode mode)",
      "right" : "private boolean shouldAddZip64Extra(final ZipArchiveEntry entry, final Zip64Mode mode)",
      "info" : "MethodDeclaration[32218-33001]:MethodDeclaration[32218-33001]"
    }, {
      "left" : "public void setComment(final String comment)",
      "right" : "public void setComment(final String comment)",
      "info" : "MethodDeclaration[33007-33170]:MethodDeclaration[33007-33170]"
    }, {
      "left" : "public void setLevel(final int level)",
      "right" : "public void setLevel(final int level)",
      "info" : "MethodDeclaration[33176-33826]:MethodDeclaration[33176-33826]"
    }, {
      "left" : "public void setMethod(final int method)",
      "right" : "public void setMethod(final int method)",
      "info" : "MethodDeclaration[33832-34103]:MethodDeclaration[33832-34103]"
    }, {
      "left" : "public boolean canWriteEntryData(final ArchiveEntry ae)",
      "right" : "public boolean canWriteEntryData(final ArchiveEntry ae)",
      "info" : "MethodDeclaration[34109-34747]:MethodDeclaration[34109-34747]"
    }, {
      "left" : "public void write(final byte[] b, final int offset, final int length) throws IOException",
      "right" : "public void write(final byte[] b, final int offset, final int length) throws IOException",
      "info" : "MethodDeclaration[34753-35387]:MethodDeclaration[34753-35387]"
    }, {
      "left" : "private void writeCounted(final byte[] data) throws IOException",
      "right" : "private void writeCounted(final byte[] data) throws IOException",
      "info" : "MethodDeclaration[35393-35656]:MethodDeclaration[35393-35656]"
    }, {
      "left" : "private void copyFromZipInputStream(final InputStream src) throws IOException",
      "right" : "private void copyFromZipInputStream(final InputStream src) throws IOException",
      "info" : "MethodDeclaration[35662-36126]:MethodDeclaration[35662-36126]"
    }, {
      "left" : "public void close() throws IOException",
      "right" : "public void close() throws IOException",
      "info" : "MethodDeclaration[36132-36645]:MethodDeclaration[36132-36645]"
    }, {
      "left" : "public void flush() throws IOException",
      "right" : "public void flush() throws IOException",
      "info" : "MethodDeclaration[36651-36960]:MethodDeclaration[36651-36960]"
    }, {
      "left" : "static final byte[] LFH_SIG = ZipLong.LFH_SIG.getBytes();",
      "right" : "static final byte[] LFH_SIG = ZipLong.LFH_SIG.getBytes();",
      "info" : "FieldDeclaration[37071-37179]:FieldDeclaration[37071-37179]"
    }, {
      "left" : "static final byte[] DD_SIG = ZipLong.DD_SIG.getBytes();",
      "right" : "static final byte[] DD_SIG = ZipLong.DD_SIG.getBytes();",
      "info" : "FieldDeclaration[37194-37298]:FieldDeclaration[37194-37298]"
    }, {
      "left" : "static final byte[] CFH_SIG = ZipLong.CFH_SIG.getBytes();",
      "right" : "static final byte[] CFH_SIG = ZipLong.CFH_SIG.getBytes();",
      "info" : "FieldDeclaration[37313-37423]:FieldDeclaration[37313-37423]"
    }, {
      "left" : "static final byte[] EOCD_SIG = ZipLong.getBytes(0X06054B50L);",
      "right" : "static final byte[] EOCD_SIG = ZipLong.getBytes(0X06054B50L);",
      "info" : "FieldDeclaration[37438-37551]:FieldDeclaration[37438-37551]"
    }, {
      "left" : "static final byte[] ZIP64_EOCD_SIG = ZipLong.getBytes(0X06064B50L);",
      "right" : "static final byte[] ZIP64_EOCD_SIG = ZipLong.getBytes(0X06064B50L);",
      "info" : "FieldDeclaration[37566-37691]:FieldDeclaration[37566-37691]"
    }, {
      "left" : "static final byte[] ZIP64_EOCD_LOC_SIG = ZipLong.getBytes(0X07064B50L);",
      "right" : "static final byte[] ZIP64_EOCD_LOC_SIG = ZipLong.getBytes(0X07064B50L);",
      "info" : "FieldDeclaration[37706-37843]:FieldDeclaration[37706-37843]"
    }, {
      "left" : "protected final void deflate() throws IOException",
      "right" : "protected final void deflate() throws IOException",
      "info" : "MethodDeclaration[37859-38070]:MethodDeclaration[37859-38070]"
    }, {
      "left" : "protected void writeLocalFileHeader(final ZipArchiveEntry ze) throws IOException",
      "right" : "protected void writeLocalFileHeader(final ZipArchiveEntry ze) throws IOException",
      "info" : "MethodDeclaration[38076-38335]:MethodDeclaration[38076-38335]"
    }, {
      "left" : "private void addUnicodeExtraFields(final ZipArchiveEntry ze, final boolean encodable,\n                                       final ByteBuffer name)\n        throws IOException",
      "right" : "private void addUnicodeExtraFields(final ZipArchiveEntry ze, final boolean encodable,\n                                       final ByteBuffer name)\n        throws IOException",
      "info" : "MethodDeclaration[43166-44804]:MethodDeclaration[43182-44820]"
    }, {
      "left" : "protected void writeCentralFileHeader(final ZipArchiveEntry ze) throws IOException",
      "right" : "protected void writeCentralFileHeader(final ZipArchiveEntry ze) throws IOException",
      "info" : "MethodDeclaration[45543-46030]:MethodDeclaration[45556-46043]"
    }, {
      "left" : "private byte[] createCentralFileHeader(final ZipArchiveEntry ze) throws IOException",
      "right" : "private byte[] createCentralFileHeader(final ZipArchiveEntry ze) throws IOException",
      "info" : "MethodDeclaration[46036-46973]:MethodDeclaration[46049-46986]"
    }, {
      "left" : "private byte[] createCentralFileHeader(final ZipArchiveEntry ze, final ByteBuffer name,\n                                           final EntryMetaData entryMetaData,\n                                           final boolean needsZip64Extra) throws IOException",
      "right" : "private byte[] createCentralFileHeader(final ZipArchiveEntry ze, final ByteBuffer name,\n                                           final EntryMetaData entryMetaData,\n                                           final boolean needsZip64Extra) throws IOException",
      "info" : "MethodDeclaration[46979-50759]:MethodDeclaration[46992-50772]"
    }, {
      "left" : "private void handleZip64Extra(final ZipArchiveEntry ze, final long lfhOffset,\n                                  final boolean needsZip64Extra)",
      "right" : "private void handleZip64Extra(final ZipArchiveEntry ze, final long lfhOffset,\n                                  final boolean needsZip64Extra)",
      "info" : "MethodDeclaration[50765-51846]:MethodDeclaration[50778-51859]"
    }, {
      "left" : "protected void writeCentralDirectoryEnd() throws IOException",
      "right" : "protected void writeCentralDirectoryEnd() throws IOException",
      "info" : "MethodDeclaration[51852-53565]:MethodDeclaration[51865-53578]"
    }, {
      "left" : "protected void writeZip64CentralDirectory() throws IOException",
      "right" : "protected void writeZip64CentralDirectory() throws IOException",
      "info" : "MethodDeclaration[53571-55951]:MethodDeclaration[53584-55964]"
    }, {
      "left" : "protected final void writeOut(final byte[] data) throws IOException",
      "right" : "protected final void writeOut(final byte[] data) throws IOException",
      "info" : "MethodDeclaration[55957-56236]:MethodDeclaration[55970-56249]"
    }, {
      "left" : "protected final void writeOut(final byte[] data, final int offset, final int length)\n            throws IOException",
      "right" : "protected final void writeOut(final byte[] data, final int offset, final int length)\n            throws IOException",
      "info" : "MethodDeclaration[56243-56674]:MethodDeclaration[56256-56687]"
    }, {
      "left" : "private GeneralPurposeBit getGeneralPurposeBits(final boolean utfFallback, boolean usesDataDescriptor)",
      "right" : "private GeneralPurposeBit getGeneralPurposeBits(final boolean utfFallback, boolean usesDataDescriptor)",
      "info" : "MethodDeclaration[56681-57008]:MethodDeclaration[56694-57021]"
    }, {
      "left" : "private int versionNeededToExtract(final int zipMethod, final boolean zip64, final boolean usedDataDescriptor)",
      "right" : "private int versionNeededToExtract(final int zipMethod, final boolean zip64, final boolean usedDataDescriptor)",
      "info" : "MethodDeclaration[57014-57349]:MethodDeclaration[57027-57362]"
    }, {
      "left" : "private int versionNeededToExtractMethod(int zipMethod)",
      "right" : "private int versionNeededToExtractMethod(int zipMethod)",
      "info" : "MethodDeclaration[57481-57622]:MethodDeclaration[57521-57662]"
    }, {
      "left" : "public ArchiveEntry createArchiveEntry(final File inputFile, final String entryName)\n        throws IOException",
      "right" : "public ArchiveEntry createArchiveEntry(final File inputFile, final String entryName)\n        throws IOException",
      "info" : "MethodDeclaration[57628-58361]:MethodDeclaration[57668-58401]"
    }, {
      "left" : "private Zip64ExtendedInformationExtraField\n        getZip64Extra(final ZipArchiveEntry ze)",
      "right" : "private Zip64ExtendedInformationExtraField\n        getZip64Extra(final ZipArchiveEntry ze)",
      "info" : "MethodDeclaration[58367-59429]:MethodDeclaration[58407-59469]"
    }, {
      "left" : "private boolean hasZip64Extra(final ZipArchiveEntry ze)",
      "right" : "private boolean hasZip64Extra(final ZipArchiveEntry ze)",
      "info" : "MethodDeclaration[59435-59750]:MethodDeclaration[59475-59790]"
    }, {
      "left" : "private Zip64Mode getEffectiveZip64Mode(final ZipArchiveEntry ze)",
      "right" : "private Zip64Mode getEffectiveZip64Mode(final ZipArchiveEntry ze)",
      "info" : "MethodDeclaration[59756-60293]:MethodDeclaration[59796-60333]"
    }, {
      "left" : "private ZipEncoding getEntryEncoding(final ZipArchiveEntry ze)",
      "right" : "private ZipEncoding getEntryEncoding(final ZipArchiveEntry ze)",
      "info" : "MethodDeclaration[60299-60549]:MethodDeclaration[60339-60589]"
    }, {
      "left" : "private ByteBuffer getName(final ZipArchiveEntry ze) throws IOException",
      "right" : "private ByteBuffer getName(final ZipArchiveEntry ze) throws IOException",
      "info" : "MethodDeclaration[60555-60692]:MethodDeclaration[60595-60732]"
    }, {
      "left" : "void destroy() throws IOException",
      "right" : "void destroy() throws IOException",
      "info" : "MethodDeclaration[60698-61153]:MethodDeclaration[60738-61193]"
    }, {
      "left" : "UnicodeExtraFieldPolicy",
      "right" : "UnicodeExtraFieldPolicy",
      "info" : "TypeDeclaration[61159-62146]:TypeDeclaration[61199-62186]"
    }, {
      "left" : "public static final UnicodeExtraFieldPolicy ALWAYS = new UnicodeExtraFieldPolicy(\"always\");",
      "right" : "public static final UnicodeExtraFieldPolicy ALWAYS = new UnicodeExtraFieldPolicy(\"always\");",
      "info" : "FieldDeclaration[61327-61489]:FieldDeclaration[61367-61529]"
    }, {
      "left" : "public static final UnicodeExtraFieldPolicy NEVER = new UnicodeExtraFieldPolicy(\"never\");",
      "right" : "public static final UnicodeExtraFieldPolicy NEVER = new UnicodeExtraFieldPolicy(\"never\");",
      "info" : "FieldDeclaration[61498-61657]:FieldDeclaration[61538-61697]"
    }, {
      "left" : "public static final UnicodeExtraFieldPolicy NOT_ENCODEABLE =\n            new UnicodeExtraFieldPolicy(\"not encodeable\");",
      "right" : "public static final UnicodeExtraFieldPolicy NOT_ENCODEABLE =\n            new UnicodeExtraFieldPolicy(\"not encodeable\");",
      "info" : "FieldDeclaration[61666-61926]:FieldDeclaration[61706-61966]"
    }, {
      "left" : "private final String name;",
      "right" : "private final String name;",
      "info" : "FieldDeclaration[61936-61962]:FieldDeclaration[61976-62002]"
    }, {
      "left" : "private UnicodeExtraFieldPolicy(final String n)",
      "right" : "private UnicodeExtraFieldPolicy(final String n)",
      "info" : "MethodDeclaration[61971-62052]:MethodDeclaration[62011-62092]"
    }, {
      "left" : "public String toString()",
      "right" : "public String toString()",
      "info" : "MethodDeclaration[62061-62140]:MethodDeclaration[62101-62180]"
    }, {
      "left" : "CurrentEntry",
      "right" : "CurrentEntry",
      "info" : "TypeDeclaration[62152-63462]:TypeDeclaration[62192-63502]"
    }, {
      "left" : "private CurrentEntry(final ZipArchiveEntry entry)",
      "right" : "private CurrentEntry(final ZipArchiveEntry entry)",
      "info" : "MethodDeclaration[62312-62405]:MethodDeclaration[62352-62445]"
    }, {
      "left" : "private final ZipArchiveEntry entry;",
      "right" : "private final ZipArchiveEntry entry;",
      "info" : "FieldDeclaration[62414-62504]:FieldDeclaration[62454-62544]"
    }, {
      "left" : "private long localDataStart = 0;",
      "right" : "private long localDataStart = 0;",
      "info" : "FieldDeclaration[62513-62677]:FieldDeclaration[62553-62717]"
    }, {
      "left" : "private long dataStart = 0;",
      "right" : "private long dataStart = 0;",
      "info" : "FieldDeclaration[62686-62775]:FieldDeclaration[62726-62815]"
    }, {
      "left" : "private long bytesRead = 0;",
      "right" : "private long bytesRead = 0;",
      "info" : "FieldDeclaration[62784-62959]:FieldDeclaration[62824-62999]"
    }, {
      "left" : "private boolean causedUseOfZip64 = false;",
      "right" : "private boolean causedUseOfZip64 = false;",
      "info" : "FieldDeclaration[62968-63106]:FieldDeclaration[63008-63146]"
    }, {
      "left" : "private boolean hasWritten;",
      "right" : "private boolean hasWritten;",
      "info" : "FieldDeclaration[63115-63456]:FieldDeclaration[63155-63496]"
    }, {
      "left" : "EntryMetaData",
      "right" : "EntryMetaData",
      "info" : "TypeDeclaration[63468-63776]:TypeDeclaration[63508-63816]"
    }, {
      "left" : "private final long offset;",
      "right" : "private final long offset;",
      "info" : "FieldDeclaration[63519-63545]:FieldDeclaration[63559-63585]"
    }, {
      "left" : "private final boolean usesDataDescriptor;",
      "right" : "private final boolean usesDataDescriptor;",
      "info" : "FieldDeclaration[63554-63595]:FieldDeclaration[63594-63635]"
    }, {
      "left" : "private EntryMetaData(long offset, boolean usesDataDescriptor)",
      "right" : "private EntryMetaData(long offset, boolean usesDataDescriptor)",
      "info" : "MethodDeclaration[63604-63770]:MethodDeclaration[63644-63810]"
    } ],
    "mappings" : [
 {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[9656-9662]:Modifier[9656-9662]"
    }, {
      "left" : "ZipArchiveOutputStream",
      "right" : "ZipArchiveOutputStream",
      "info" : "SimpleName[9663-9685]:SimpleName[9663-9685]"
    }, {
      "left" : "final OutputStream out",
      "right" : "final OutputStream out",
      "info" : "SingleVariableDeclaration[9686-9708]:SingleVariableDeclaration[9686-9708]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9710-9873]:Block[9710-9873]"
    }, {
      "left" : "this.out = out;",
      "right" : "this.out = out;",
      "info" : "ExpressionStatement[9720-9735]:ExpressionStatement[9720-9735]"
    }, {
      "left" : "this.channel = null;",
      "right" : "this.channel = null;",
      "info" : "ExpressionStatement[9744-9764]:ExpressionStatement[9744-9764]"
    }, {
      "left" : "def = new Deflater(level, true);",
      "right" : "def = new Deflater(level, true);",
      "info" : "ExpressionStatement[9773-9805]:ExpressionStatement[9773-9805]"
    }, {
      "left" : "streamCompressor = StreamCompressor.create(out, def);",
      "right" : "streamCompressor = StreamCompressor.create(out, def);",
      "info" : "ExpressionStatement[9814-9867]:ExpressionStatement[9814-9867]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[10070-10076]:Modifier[10070-10076]"
    }, {
      "left" : "ZipArchiveOutputStream",
      "right" : "ZipArchiveOutputStream",
      "info" : "SimpleName[10077-10099]:SimpleName[10077-10099]"
    }, {
      "left" : "final File file",
      "right" : "final File file",
      "info" : "SingleVariableDeclaration[10100-10115]:SingleVariableDeclaration[10100-10115]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[10124-10135]:SimpleType[10124-10135]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10136-11092]:Block[10136-11092]"
    }, {
      "left" : "def = new Deflater(level, true);",
      "right" : "def = new Deflater(level, true);",
      "info" : "ExpressionStatement[10146-10178]:ExpressionStatement[10146-10178]"
    }, {
      "left" : "OutputStream o = null;",
      "right" : "OutputStream o = null;",
      "info" : "VariableDeclarationStatement[10187-10209]:VariableDeclarationStatement[10187-10209]"
    }, {
      "left" : "SeekableByteChannel _channel = null;",
      "right" : "SeekableByteChannel _channel = null;",
      "info" : "VariableDeclarationStatement[10218-10254]:VariableDeclarationStatement[10218-10254]"
    }, {
      "left" : "StreamCompressor _streamCompressor = null;",
      "right" : "StreamCompressor _streamCompressor = null;",
      "info" : "VariableDeclarationStatement[10263-10305]:VariableDeclarationStatement[10263-10305]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[10314-10995]:TryStatement[10314-10995]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10318-10773]:Block[10318-10773]"
    }, {
      "left" : "_channel = Files.newByteChannel(file.toPath(),\n                EnumSet.of(StandardOpenOption.CREATE, StandardOpenOption.WRITE,\n                           StandardOpenOption.READ,\n                           StandardOpenOption.TRUNCATE_EXISTING));",
      "right" : "_channel = Files.newByteChannel(file.toPath(),\n                EnumSet.of(StandardOpenOption.CREATE, StandardOpenOption.WRITE,\n                           StandardOpenOption.READ,\n                           StandardOpenOption.TRUNCATE_EXISTING));",
      "info" : "ExpressionStatement[10332-10577]:ExpressionStatement[10332-10577]"
    }, {
      "left" : "_streamCompressor = StreamCompressor.create(_channel, def);",
      "right" : "_streamCompressor = StreamCompressor.create(_channel, def);",
      "info" : "ExpressionStatement[10694-10753]:ExpressionStatement[10694-10753]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10802-10995]:Block[10802-10995]"
    }, {
      "left" : "IOUtils.closeQuietly(_channel);",
      "right" : "IOUtils.closeQuietly(_channel);",
      "info" : "ExpressionStatement[10816-10847]:ExpressionStatement[10816-10847]"
    }, {
      "left" : "_channel = null;",
      "right" : "_channel = null;",
      "info" : "ExpressionStatement[10860-10876]:ExpressionStatement[10860-10876]"
    }, {
      "left" : "o = new FileOutputStream(file);",
      "right" : "o = new FileOutputStream(file);",
      "info" : "ExpressionStatement[10889-10920]:ExpressionStatement[10889-10920]"
    }, {
      "left" : "_streamCompressor = StreamCompressor.create(o, def);",
      "right" : "_streamCompressor = StreamCompressor.create(o, def);",
      "info" : "ExpressionStatement[10933-10985]:ExpressionStatement[10933-10985]"
    }, {
      "left" : "out = o;",
      "right" : "out = o;",
      "info" : "ExpressionStatement[11004-11012]:ExpressionStatement[11004-11012]"
    }, {
      "left" : "channel = _channel;",
      "right" : "channel = _channel;",
      "info" : "ExpressionStatement[11021-11040]:ExpressionStatement[11021-11040]"
    }, {
      "left" : "streamCompressor = _streamCompressor;",
      "right" : "streamCompressor = _streamCompressor;",
      "info" : "ExpressionStatement[11049-11086]:ExpressionStatement[11049-11086]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[11469-11475]:Modifier[11469-11475]"
    }, {
      "left" : "ZipArchiveOutputStream",
      "right" : "ZipArchiveOutputStream",
      "info" : "SimpleName[11476-11498]:SimpleName[11476-11498]"
    }, {
      "left" : "SeekableByteChannel channel",
      "right" : "SeekableByteChannel channel",
      "info" : "SingleVariableDeclaration[11499-11526]:SingleVariableDeclaration[11499-11526]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[11535-11546]:SimpleType[11535-11546]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11547-11713]:Block[11547-11713]"
    }, {
      "left" : "this.channel = channel;",
      "right" : "this.channel = channel;",
      "info" : "ExpressionStatement[11557-11580]:ExpressionStatement[11557-11580]"
    }, {
      "left" : "def = new Deflater(level, true);",
      "right" : "def = new Deflater(level, true);",
      "info" : "ExpressionStatement[11589-11621]:ExpressionStatement[11589-11621]"
    }, {
      "left" : "streamCompressor = StreamCompressor.create(channel, def);",
      "right" : "streamCompressor = StreamCompressor.create(channel, def);",
      "info" : "ExpressionStatement[11630-11687]:ExpressionStatement[11630-11687]"
    }, {
      "left" : "out = null;",
      "right" : "out = null;",
      "info" : "ExpressionStatement[11696-11707]:ExpressionStatement[11696-11707]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[12083-12089]:Modifier[12083-12089]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[12090-12097]:PrimitiveType[12090-12097]"
    }, {
      "left" : "isSeekable",
      "right" : "isSeekable",
      "info" : "SimpleName[12098-12108]:SimpleName[12098-12108]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12111-12150]:Block[12111-12150]"
    }, {
      "left" : "return channel != null;",
      "right" : "return channel != null;",
      "info" : "ReturnStatement[12121-12144]:ReturnStatement[12121-12144]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[12579-12585]:Modifier[12579-12585]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[12586-12590]:PrimitiveType[12586-12590]"
    }, {
      "left" : "setEncoding",
      "right" : "setEncoding",
      "info" : "SimpleName[12591-12602]:SimpleName[12591-12602]"
    }, {
      "left" : "final String encoding",
      "right" : "final String encoding",
      "info" : "SingleVariableDeclaration[12603-12624]:SingleVariableDeclaration[12603-12624]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12626-12847]:Block[12626-12847]"
    }, {
      "left" : "this.encoding = encoding;",
      "right" : "this.encoding = encoding;",
      "info" : "ExpressionStatement[12636-12661]:ExpressionStatement[12636-12661]"
    }, {
      "left" : "this.zipEncoding = ZipEncodingHelper.getZipEncoding(encoding);",
      "right" : "this.zipEncoding = ZipEncodingHelper.getZipEncoding(encoding);",
      "info" : "ExpressionStatement[12670-12732]:ExpressionStatement[12670-12732]"
    }, {
      "left" : "if (useUTF8Flag && !ZipEncodingHelper.isUTF8(encoding))",
      "right" : "if (useUTF8Flag && !ZipEncodingHelper.isUTF8(encoding))",
      "info" : "IfStatement[12741-12841]:IfStatement[12741-12841]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12797-12841]:Block[12797-12841]"
    }, {
      "left" : "useUTF8Flag = false;",
      "right" : "useUTF8Flag = false;",
      "info" : "ExpressionStatement[12811-12831]:ExpressionStatement[12811-12831]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[13011-13017]:Modifier[13011-13017]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[13018-13024]:SimpleType[13018-13024]"
    }, {
      "left" : "getEncoding",
      "right" : "getEncoding",
      "info" : "SimpleName[13025-13036]:SimpleName[13025-13036]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13039-13071]:Block[13039-13071]"
    }, {
      "left" : "return encoding;",
      "right" : "return encoding;",
      "info" : "ReturnStatement[13049-13065]:ReturnStatement[13049-13065]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[13331-13337]:Modifier[13331-13337]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[13338-13342]:PrimitiveType[13338-13342]"
    }, {
      "left" : "setUseLanguageEncodingFlag",
      "right" : "setUseLanguageEncodingFlag",
      "info" : "SimpleName[13343-13369]:SimpleName[13343-13369]"
    }, {
      "left" : "final boolean b",
      "right" : "final boolean b",
      "info" : "SingleVariableDeclaration[13370-13385]:SingleVariableDeclaration[13370-13385]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13387-13457]:Block[13387-13457]"
    }, {
      "left" : "useUTF8Flag = b && ZipEncodingHelper.isUTF8(encoding);",
      "right" : "useUTF8Flag = b && ZipEncodingHelper.isUTF8(encoding);",
      "info" : "ExpressionStatement[13397-13451]:ExpressionStatement[13397-13451]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[13629-13635]:Modifier[13629-13635]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[13636-13640]:PrimitiveType[13636-13640]"
    }, {
      "left" : "setCreateUnicodeExtraFields",
      "right" : "setCreateUnicodeExtraFields",
      "info" : "SimpleName[13641-13668]:SimpleName[13641-13668]"
    }, {
      "left" : "final UnicodeExtraFieldPolicy b",
      "right" : "final UnicodeExtraFieldPolicy b",
      "info" : "SingleVariableDeclaration[13669-13700]:SingleVariableDeclaration[13669-13700]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13702-13747]:Block[13702-13747]"
    }, {
      "left" : "createUnicodeExtraFields = b;",
      "right" : "createUnicodeExtraFields = b;",
      "info" : "ExpressionStatement[13712-13741]:ExpressionStatement[13712-13741]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[14108-14114]:Modifier[14108-14114]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[14115-14119]:PrimitiveType[14115-14119]"
    }, {
      "left" : "setFallbackToUTF8",
      "right" : "setFallbackToUTF8",
      "info" : "SimpleName[14120-14137]:SimpleName[14120-14137]"
    }, {
      "left" : "final boolean b",
      "right" : "final boolean b",
      "info" : "SingleVariableDeclaration[14138-14153]:SingleVariableDeclaration[14138-14153]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14155-14190]:Block[14155-14190]"
    }, {
      "left" : "fallbackToUTF8 = b;",
      "right" : "fallbackToUTF8 = b;",
      "info" : "ExpressionStatement[14165-14184]:ExpressionStatement[14165-14184]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[16580-16586]:Modifier[16580-16586]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[16587-16591]:PrimitiveType[16587-16591]"
    }, {
      "left" : "setUseZip64",
      "right" : "setUseZip64",
      "info" : "SimpleName[16592-16603]:SimpleName[16592-16603]"
    }, {
      "left" : "final Zip64Mode mode",
      "right" : "final Zip64Mode mode",
      "info" : "SingleVariableDeclaration[16604-16624]:SingleVariableDeclaration[16604-16624]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16626-16659]:Block[16626-16659]"
    }, {
      "left" : "zip64Mode = mode;",
      "right" : "zip64Mode = mode;",
      "info" : "ExpressionStatement[16636-16653]:ExpressionStatement[16636-16653]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[16901-16910]:MarkerAnnotation[16901-16910]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[16915-16921]:Modifier[16915-16921]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[16922-16926]:PrimitiveType[16922-16926]"
    }, {
      "left" : "finish",
      "right" : "finish",
      "info" : "SimpleName[16927-16933]:SimpleName[16927-16933]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[16943-16954]:SimpleType[16943-16954]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16955-17549]:Block[16955-17549]"
    }, {
      "left" : "if (finished)",
      "right" : "if (finished)",
      "info" : "IfStatement[16965-17067]:IfStatement[16965-17067]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16979-17067]:Block[16979-17067]"
    }, {
      "left" : "throw new IOException(\"This archive has already been finished\");",
      "right" : "throw new IOException(\"This archive has already been finished\");",
      "info" : "ThrowStatement[16993-17057]:ThrowStatement[16993-17057]"
    }, {
      "left" : "if (entry != null)",
      "right" : "if (entry != null)",
      "info" : "IfStatement[17077-17185]:IfStatement[17077-17185]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17096-17185]:Block[17096-17185]"
    }, {
      "left" : "throw new IOException(\"This archive contains unclosed entries.\");",
      "right" : "throw new IOException(\"This archive contains unclosed entries.\");",
      "info" : "ThrowStatement[17110-17175]:ThrowStatement[17110-17175]"
    }, {
      "left" : "cdOffset = streamCompressor.getTotalBytesWritten();",
      "right" : "cdOffset = streamCompressor.getTotalBytesWritten();",
      "info" : "ExpressionStatement[17195-17246]:ExpressionStatement[17195-17246]"
    }, {
      "left" : "writeCentralDirectoryInChunks();",
      "right" : "writeCentralDirectoryInChunks();",
      "info" : "ExpressionStatement[17255-17287]:ExpressionStatement[17255-17287]"
    }, {
      "left" : "cdLength = streamCompressor.getTotalBytesWritten() - cdOffset;",
      "right" : "cdLength = streamCompressor.getTotalBytesWritten() - cdOffset;",
      "info" : "ExpressionStatement[17297-17359]:ExpressionStatement[17297-17359]"
    }, {
      "left" : "writeZip64CentralDirectory();",
      "right" : "writeZip64CentralDirectory();",
      "info" : "ExpressionStatement[17368-17397]:ExpressionStatement[17368-17397]"
    }, {
      "left" : "writeCentralDirectoryEnd();",
      "right" : "writeCentralDirectoryEnd();",
      "info" : "ExpressionStatement[17406-17433]:ExpressionStatement[17406-17433]"
    }, {
      "left" : "metaData.clear();",
      "right" : "metaData.clear();",
      "info" : "ExpressionStatement[17442-17459]:ExpressionStatement[17442-17459]"
    }, {
      "left" : "entries.clear();",
      "right" : "entries.clear();",
      "info" : "ExpressionStatement[17468-17484]:ExpressionStatement[17468-17484]"
    }, {
      "left" : "streamCompressor.close();",
      "right" : "streamCompressor.close();",
      "info" : "ExpressionStatement[17493-17518]:ExpressionStatement[17493-17518]"
    }, {
      "left" : "finished = true;",
      "right" : "finished = true;",
      "info" : "ExpressionStatement[17527-17543]:ExpressionStatement[17527-17543]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[17555-17562]:Modifier[17555-17562]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[17563-17567]:PrimitiveType[17563-17567]"
    }, {
      "left" : "writeCentralDirectoryInChunks",
      "right" : "writeCentralDirectoryInChunks",
      "info" : "SimpleName[17568-17597]:SimpleName[17568-17597]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[17607-17618]:SimpleType[17607-17618]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17619-18183]:Block[17619-18183]"
    }, {
      "left" : "final int NUM_PER_WRITE = 1000;",
      "right" : "final int NUM_PER_WRITE = 1000;",
      "info" : "VariableDeclarationStatement[17629-17660]:VariableDeclarationStatement[17629-17660]"
    }, {
      "left" : "final ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream(70 * NUM_PER_WRITE);",
      "right" : "final ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream(70 * NUM_PER_WRITE);",
      "info" : "VariableDeclarationStatement[17669-17767]:VariableDeclarationStatement[17669-17767]"
    }, {
      "left" : "int count = 0;",
      "right" : "int count = 0;",
      "info" : "VariableDeclarationStatement[17776-17790]:VariableDeclarationStatement[17776-17790]"
    }, {
      "left" : "for (final ZipArchiveEntry ze : entries)",
      "right" : "for (final ZipArchiveEntry ze : entries)",
      "info" : "EnhancedForStatement[17799-18118]:EnhancedForStatement[17799-18118]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17840-18118]:Block[17840-18118]"
    }, {
      "left" : "byteArrayOutputStream.write(createCentralFileHeader(ze));",
      "right" : "byteArrayOutputStream.write(createCentralFileHeader(ze));",
      "info" : "ExpressionStatement[17854-17911]:ExpressionStatement[17854-17911]"
    }, {
      "left" : "if (++count > NUM_PER_WRITE)",
      "right" : "if (++count > NUM_PER_WRITE)",
      "info" : "IfStatement[17924-18108]:IfStatement[17924-18108]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17952-18108]:Block[17952-18108]"
    }, {
      "left" : "writeCounted(byteArrayOutputStream.toByteArray());",
      "right" : "writeCounted(byteArrayOutputStream.toByteArray());",
      "info" : "ExpressionStatement[17970-18020]:ExpressionStatement[17970-18020]"
    }, {
      "left" : "byteArrayOutputStream.reset();",
      "right" : "byteArrayOutputStream.reset();",
      "info" : "ExpressionStatement[18037-18067]:ExpressionStatement[18037-18067]"
    }, {
      "left" : "count = 0;",
      "right" : "count = 0;",
      "info" : "ExpressionStatement[18084-18094]:ExpressionStatement[18084-18094]"
    }, {
      "left" : "writeCounted(byteArrayOutputStream.toByteArray());",
      "right" : "writeCounted(byteArrayOutputStream.toByteArray());",
      "info" : "ExpressionStatement[18127-18177]:ExpressionStatement[18127-18177]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[18459-18468]:MarkerAnnotation[18459-18468]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[18473-18479]:Modifier[18473-18479]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[18480-18484]:PrimitiveType[18480-18484]"
    }, {
      "left" : "closeArchiveEntry",
      "right" : "closeArchiveEntry",
      "info" : "SimpleName[18485-18502]:SimpleName[18485-18502]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[18512-18523]:SimpleType[18512-18523]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18524-19045]:Block[18524-19045]"
    }, {
      "left" : "preClose();",
      "right" : "preClose();",
      "info" : "ExpressionStatement[18534-18545]:ExpressionStatement[18534-18545]"
    }, {
      "left" : "flushDeflater();",
      "right" : "flushDeflater();",
      "info" : "ExpressionStatement[18555-18571]:ExpressionStatement[18555-18571]"
    }, {
      "left" : "final long bytesWritten = streamCompressor.getTotalBytesWritten() - entry.dataStart;",
      "right" : "final long bytesWritten = streamCompressor.getTotalBytesWritten() - entry.dataStart;",
      "info" : "VariableDeclarationStatement[18581-18665]:VariableDeclarationStatement[18581-18665]"
    }, {
      "left" : "final long realCrc = streamCompressor.getCrc32();",
      "right" : "final long realCrc = streamCompressor.getCrc32();",
      "info" : "VariableDeclarationStatement[18674-18723]:VariableDeclarationStatement[18674-18723]"
    }, {
      "left" : "entry.bytesRead = streamCompressor.getBytesRead();",
      "right" : "entry.bytesRead = streamCompressor.getBytesRead();",
      "info" : "ExpressionStatement[18732-18782]:ExpressionStatement[18732-18782]"
    }, {
      "left" : "final Zip64Mode effectiveMode = getEffectiveZip64Mode(entry.entry);",
      "right" : "final Zip64Mode effectiveMode = getEffectiveZip64Mode(entry.entry);",
      "info" : "VariableDeclarationStatement[18791-18858]:VariableDeclarationStatement[18791-18858]"
    }, {
      "left" : "final boolean actuallyNeedsZip64 = handleSizesAndCrc(bytesWritten, realCrc, effectiveMode);",
      "right" : "final boolean actuallyNeedsZip64 = handleSizesAndCrc(bytesWritten, realCrc, effectiveMode);",
      "info" : "VariableDeclarationStatement[18867-18958]:VariableDeclarationStatement[18867-18958]"
    }, {
      "left" : "closeEntry(actuallyNeedsZip64, false);",
      "right" : "closeEntry(actuallyNeedsZip64, false);",
      "info" : "ExpressionStatement[18967-19005]:ExpressionStatement[18967-19005]"
    }, {
      "left" : "streamCompressor.reset();",
      "right" : "streamCompressor.reset();",
      "info" : "ExpressionStatement[19014-19039]:ExpressionStatement[19014-19039]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[19581-19588]:Modifier[19581-19588]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[19589-19593]:PrimitiveType[19589-19593]"
    }, {
      "left" : "closeCopiedEntry",
      "right" : "closeCopiedEntry",
      "info" : "SimpleName[19594-19610]:SimpleName[19594-19610]"
    }, {
      "left" : "final boolean phased",
      "right" : "final boolean phased",
      "info" : "SingleVariableDeclaration[19611-19631]:SingleVariableDeclaration[19611-19631]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[19640-19651]:SimpleType[19640-19651]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19652-19929]:Block[19652-19929]"
    }, {
      "left" : "preClose();",
      "right" : "preClose();",
      "info" : "ExpressionStatement[19662-19673]:ExpressionStatement[19662-19673]"
    }, {
      "left" : "entry.bytesRead = entry.entry.getSize();",
      "right" : "entry.bytesRead = entry.entry.getSize();",
      "info" : "ExpressionStatement[19682-19722]:ExpressionStatement[19682-19722]"
    }, {
      "left" : "final Zip64Mode effectiveMode = getEffectiveZip64Mode(entry.entry);",
      "right" : "final Zip64Mode effectiveMode = getEffectiveZip64Mode(entry.entry);",
      "info" : "VariableDeclarationStatement[19731-19798]:VariableDeclarationStatement[19731-19798]"
    }, {
      "left" : "final boolean actuallyNeedsZip64 = checkIfNeedsZip64(effectiveMode);",
      "right" : "final boolean actuallyNeedsZip64 = checkIfNeedsZip64(effectiveMode);",
      "info" : "VariableDeclarationStatement[19807-19875]:VariableDeclarationStatement[19807-19875]"
    }, {
      "left" : "closeEntry(actuallyNeedsZip64, phased);",
      "right" : "closeEntry(actuallyNeedsZip64, phased);",
      "info" : "ExpressionStatement[19884-19923]:ExpressionStatement[19884-19923]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[19935-19942]:Modifier[19935-19942]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[19943-19947]:PrimitiveType[19943-19947]"
    }, {
      "left" : "closeEntry",
      "right" : "closeEntry",
      "info" : "SimpleName[19948-19958]:SimpleName[19948-19958]"
    }, {
      "left" : "final boolean actuallyNeedsZip64",
      "right" : "final boolean actuallyNeedsZip64",
      "info" : "SingleVariableDeclaration[19959-19991]:SingleVariableDeclaration[19959-19991]"
    }, {
      "left" : "final boolean phased",
      "right" : "final boolean phased",
      "info" : "SingleVariableDeclaration[19993-20013]:SingleVariableDeclaration[19993-20013]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[20022-20033]:SimpleType[20022-20033]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20034-20247]:Block[20034-20247]"
    }, {
      "left" : "if (!phased && channel != null)",
      "right" : "if (!phased && channel != null)",
      "info" : "IfStatement[20044-20139]:IfStatement[20044-20139]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20076-20139]:Block[20076-20139]"
    }, {
      "left" : "rewriteSizesAndCrc(actuallyNeedsZip64);",
      "right" : "rewriteSizesAndCrc(actuallyNeedsZip64);",
      "info" : "ExpressionStatement[20090-20129]:ExpressionStatement[20090-20129]"
    }, {
      "left" : "if (!phased)",
      "right" : "if (!phased)",
      "info" : "IfStatement[20149-20219]:IfStatement[20149-20219]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20162-20219]:Block[20162-20219]"
    }, {
      "left" : "writeDataDescriptor(entry.entry);",
      "right" : "writeDataDescriptor(entry.entry);",
      "info" : "ExpressionStatement[20176-20209]:ExpressionStatement[20176-20209]"
    }, {
      "left" : "entry = null;",
      "right" : "entry = null;",
      "info" : "ExpressionStatement[20228-20241]:ExpressionStatement[20228-20241]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[20253-20260]:Modifier[20253-20260]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[20261-20265]:PrimitiveType[20261-20265]"
    }, {
      "left" : "preClose",
      "right" : "preClose",
      "info" : "SimpleName[20266-20274]:SimpleName[20266-20274]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[20284-20295]:SimpleType[20284-20295]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20296-20588]:Block[20296-20588]"
    }, {
      "left" : "if (finished)",
      "right" : "if (finished)",
      "info" : "IfStatement[20306-20402]:IfStatement[20306-20402]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20320-20402]:Block[20320-20402]"
    }, {
      "left" : "throw new IOException(\"Stream has already been finished\");",
      "right" : "throw new IOException(\"Stream has already been finished\");",
      "info" : "ThrowStatement[20334-20392]:ThrowStatement[20334-20392]"
    }, {
      "left" : "if (entry == null)",
      "right" : "if (entry == null)",
      "info" : "IfStatement[20412-20506]:IfStatement[20412-20506]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20431-20506]:Block[20431-20506]"
    }, {
      "left" : "throw new IOException(\"No current entry to close\");",
      "right" : "throw new IOException(\"No current entry to close\");",
      "info" : "ThrowStatement[20445-20496]:ThrowStatement[20445-20496]"
    }, {
      "left" : "if (!entry.hasWritten)",
      "right" : "if (!entry.hasWritten)",
      "info" : "IfStatement[20516-20582]:IfStatement[20516-20582]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20539-20582]:Block[20539-20582]"
    }, {
      "left" : "write(EMPTY, 0, 0);",
      "right" : "write(EMPTY, 0, 0);",
      "info" : "ExpressionStatement[20553-20572]:ExpressionStatement[20553-20572]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[21136-21142]:Modifier[21136-21142]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[21143-21147]:PrimitiveType[21143-21147]"
    }, {
      "left" : "addRawArchiveEntry",
      "right" : "addRawArchiveEntry",
      "info" : "SimpleName[21148-21166]:SimpleName[21148-21166]"
    }, {
      "left" : "final ZipArchiveEntry entry",
      "right" : "final ZipArchiveEntry entry",
      "info" : "SingleVariableDeclaration[21167-21194]:SingleVariableDeclaration[21167-21194]"
    }, {
      "left" : "final InputStream rawStream",
      "right" : "final InputStream rawStream",
      "info" : "SingleVariableDeclaration[21196-21223]:SingleVariableDeclaration[21196-21223]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[21244-21255]:SimpleType[21244-21255]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21256-22014]:Block[21256-22014]"
    }, {
      "left" : "final ZipArchiveEntry ae = new ZipArchiveEntry(entry);",
      "right" : "final ZipArchiveEntry ae = new ZipArchiveEntry(entry);",
      "info" : "VariableDeclarationStatement[21266-21320]:VariableDeclarationStatement[21266-21320]"
    }, {
      "left" : "if (hasZip64Extra(ae))",
      "right" : "if (hasZip64Extra(ae))",
      "info" : "IfStatement[21329-21663]:IfStatement[21329-21663]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21352-21663]:Block[21352-21663]"
    }, {
      "left" : "ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);",
      "right" : "ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);",
      "info" : "ExpressionStatement[21587-21653]:ExpressionStatement[21587-21653]"
    }, {
      "left" : "final boolean is2PhaseSource = ae.getCrc() != ZipArchiveEntry.CRC_UNKNOWN\n                && ae.getSize() != ArchiveEntry.SIZE_UNKNOWN\n                && ae.getCompressedSize() != ArchiveEntry.SIZE_UNKNOWN;",
      "right" : "final boolean is2PhaseSource = ae.getCrc() != ZipArchiveEntry.CRC_UNKNOWN\n                && ae.getSize() != ArchiveEntry.SIZE_UNKNOWN\n                && ae.getCompressedSize() != ArchiveEntry.SIZE_UNKNOWN;",
      "info" : "VariableDeclarationStatement[21672-21878]:VariableDeclarationStatement[21672-21878]"
    }, {
      "left" : "putArchiveEntry(ae, is2PhaseSource);",
      "right" : "putArchiveEntry(ae, is2PhaseSource);",
      "info" : "ExpressionStatement[21887-21923]:ExpressionStatement[21887-21923]"
    }, {
      "left" : "copyFromZipInputStream(rawStream);",
      "right" : "copyFromZipInputStream(rawStream);",
      "info" : "ExpressionStatement[21932-21966]:ExpressionStatement[21932-21966]"
    }, {
      "left" : "closeCopiedEntry(is2PhaseSource);",
      "right" : "closeCopiedEntry(is2PhaseSource);",
      "info" : "ExpressionStatement[21975-22008]:ExpressionStatement[21975-22008]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[22109-22116]:Modifier[22109-22116]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[22117-22121]:PrimitiveType[22117-22121]"
    }, {
      "left" : "flushDeflater",
      "right" : "flushDeflater",
      "info" : "SimpleName[22122-22135]:SimpleName[22122-22135]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[22145-22156]:SimpleType[22145-22156]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22157-22271]:Block[22157-22271]"
    }, {
      "left" : "if (entry.entry.getMethod() == DEFLATED)",
      "right" : "if (entry.entry.getMethod() == DEFLATED)",
      "info" : "IfStatement[22167-22265]:IfStatement[22167-22265]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22208-22265]:Block[22208-22265]"
    }, {
      "left" : "streamCompressor.flushDeflater();",
      "right" : "streamCompressor.flushDeflater();",
      "info" : "ExpressionStatement[22222-22255]:ExpressionStatement[22222-22255]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[22528-22535]:Modifier[22528-22535]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[22536-22543]:PrimitiveType[22536-22543]"
    }, {
      "left" : "handleSizesAndCrc",
      "right" : "handleSizesAndCrc",
      "info" : "SimpleName[22544-22561]:SimpleName[22544-22561]"
    }, {
      "left" : "final long bytesWritten",
      "right" : "final long bytesWritten",
      "info" : "SingleVariableDeclaration[22562-22585]:SingleVariableDeclaration[22562-22585]"
    }, {
      "left" : "final long crc",
      "right" : "final long crc",
      "info" : "SingleVariableDeclaration[22587-22601]:SingleVariableDeclaration[22587-22601]"
    }, {
      "left" : "final Zip64Mode effectiveMode",
      "right" : "final Zip64Mode effectiveMode",
      "info" : "SingleVariableDeclaration[22641-22670]:SingleVariableDeclaration[22641-22670]"
    }, {
      "left" : "ZipException",
      "right" : "ZipException",
      "info" : "SimpleType[22687-22699]:SimpleType[22687-22699]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22700-24185]:Block[22700-24185]"
    }, {
      "left" : "if (entry.entry.getMethod() == DEFLATED)",
      "right" : "if (entry.entry.getMethod() == DEFLATED)",
      "info" : "IfStatement[22710-24129]:IfStatement[22710-24129]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22751-23099]:Block[22751-23099]"
    }, {
      "left" : "entry.entry.setSize(entry.bytesRead);",
      "right" : "entry.entry.setSize(entry.bytesRead);",
      "info" : "ExpressionStatement[22957-22994]:ExpressionStatement[22957-22994]"
    }, {
      "left" : "entry.entry.setCompressedSize(bytesWritten);",
      "right" : "entry.entry.setCompressedSize(bytesWritten);",
      "info" : "ExpressionStatement[23007-23051]:ExpressionStatement[23007-23051]"
    }, {
      "left" : "entry.entry.setCrc(crc);",
      "right" : "entry.entry.setCrc(crc);",
      "info" : "ExpressionStatement[23064-23088]:ExpressionStatement[23064-23088]"
    }, {
      "left" : "if (channel == null)",
      "right" : "if (channel == null)",
      "info" : "IfStatement[23105-24129]:IfStatement[23105-24129]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23126-23916]:Block[23126-23916]"
    }, {
      "left" : "if (entry.entry.getCrc() != crc)",
      "right" : "if (entry.entry.getCrc() != crc)",
      "info" : "IfStatement[23140-23528]:IfStatement[23140-23528]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23173-23528]:Block[23173-23528]"
    }, {
      "left" : "throw new ZipException(\"bad CRC checksum for entry \"\n                                       + entry.entry.getName() + \": \"\n                                       + Long.toHexString(entry.entry.getCrc())\n                                       + \" instead of \"\n                                       + Long.toHexString(crc));",
      "right" : "throw new ZipException(\"bad CRC checksum for entry \"\n                                       + entry.entry.getName() + \": \"\n                                       + Long.toHexString(entry.entry.getCrc())\n                                       + \" instead of \"\n                                       + Long.toHexString(crc));",
      "info" : "ThrowStatement[23191-23514]:ThrowStatement[23191-23514]"
    }, {
      "left" : "if (entry.entry.getSize() != bytesWritten)",
      "right" : "if (entry.entry.getSize() != bytesWritten)",
      "info" : "IfStatement[23542-23906]:IfStatement[23542-23906]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23585-23906]:Block[23585-23906]"
    }, {
      "left" : "throw new ZipException(\"bad size for entry \"\n                                       + entry.entry.getName() + \": \"\n                                       + entry.entry.getSize()\n                                       + \" instead of \"\n                                       + bytesWritten);",
      "right" : "throw new ZipException(\"bad size for entry \"\n                                       + entry.entry.getName() + \": \"\n                                       + entry.entry.getSize()\n                                       + \" instead of \"\n                                       + bytesWritten);",
      "info" : "ThrowStatement[23603-23892]:ThrowStatement[23603-23892]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23922-24129]:Block[23922-24129]"
    }, {
      "left" : "entry.entry.setSize(bytesWritten);",
      "right" : "entry.entry.setSize(bytesWritten);",
      "info" : "ExpressionStatement[23991-24025]:ExpressionStatement[23991-24025]"
    }, {
      "left" : "entry.entry.setCompressedSize(bytesWritten);",
      "right" : "entry.entry.setCompressedSize(bytesWritten);",
      "info" : "ExpressionStatement[24038-24082]:ExpressionStatement[24038-24082]"
    }, {
      "left" : "entry.entry.setCrc(crc);",
      "right" : "entry.entry.setCrc(crc);",
      "info" : "ExpressionStatement[24095-24119]:ExpressionStatement[24095-24119]"
    }, {
      "left" : "return checkIfNeedsZip64(effectiveMode);",
      "right" : "return checkIfNeedsZip64(effectiveMode);",
      "info" : "ReturnStatement[24139-24179]:ReturnStatement[24139-24179]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[24355-24362]:Modifier[24355-24362]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[24363-24370]:PrimitiveType[24363-24370]"
    }, {
      "left" : "checkIfNeedsZip64",
      "right" : "checkIfNeedsZip64",
      "info" : "SimpleName[24371-24388]:SimpleName[24371-24388]"
    }, {
      "left" : "final Zip64Mode effectiveMode",
      "right" : "final Zip64Mode effectiveMode",
      "info" : "SingleVariableDeclaration[24389-24418]:SingleVariableDeclaration[24389-24418]"
    }, {
      "left" : "ZipException",
      "right" : "ZipException",
      "info" : "SimpleType[24439-24451]:SimpleType[24439-24451]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24452-24767]:Block[24452-24767]"
    }, {
      "left" : "final boolean actuallyNeedsZip64 = isZip64Required(entry.entry, effectiveMode);",
      "right" : "final boolean actuallyNeedsZip64 = isZip64Required(entry.entry, effectiveMode);",
      "info" : "VariableDeclarationStatement[24462-24541]:VariableDeclarationStatement[24462-24541]"
    }, {
      "left" : "if (actuallyNeedsZip64 && effectiveMode == Zip64Mode.Never)",
      "right" : "if (actuallyNeedsZip64 && effectiveMode == Zip64Mode.Never)",
      "info" : "IfStatement[24550-24726]:IfStatement[24550-24726]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24610-24726]:Block[24610-24726]"
    }, {
      "left" : "throw new Zip64RequiredException(Zip64RequiredException.getEntryTooBigMessage(entry.entry));",
      "right" : "throw new Zip64RequiredException(Zip64RequiredException.getEntryTooBigMessage(entry.entry));",
      "info" : "ThrowStatement[24624-24716]:ThrowStatement[24624-24716]"
    }, {
      "left" : "return actuallyNeedsZip64;",
      "right" : "return actuallyNeedsZip64;",
      "info" : "ReturnStatement[24735-24761]:ReturnStatement[24735-24761]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[24773-24780]:Modifier[24773-24780]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[24781-24788]:PrimitiveType[24781-24788]"
    }, {
      "left" : "isZip64Required",
      "right" : "isZip64Required",
      "info" : "SimpleName[24789-24804]:SimpleName[24789-24804]"
    }, {
      "left" : "final ZipArchiveEntry entry1",
      "right" : "final ZipArchiveEntry entry1",
      "info" : "SingleVariableDeclaration[24805-24833]:SingleVariableDeclaration[24805-24833]"
    }, {
      "left" : "final Zip64Mode requestedMode",
      "right" : "final Zip64Mode requestedMode",
      "info" : "SingleVariableDeclaration[24835-24864]:SingleVariableDeclaration[24835-24864]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24866-24952]:Block[24866-24952]"
    }, {
      "left" : "return requestedMode == Zip64Mode.Always || isTooLageForZip32(entry1);",
      "right" : "return requestedMode == Zip64Mode.Always || isTooLageForZip32(entry1);",
      "info" : "ReturnStatement[24876-24946]:ReturnStatement[24876-24946]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[24958-24965]:Modifier[24958-24965]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[24966-24973]:PrimitiveType[24966-24973]"
    }, {
      "left" : "isTooLageForZip32",
      "right" : "isTooLageForZip32",
      "info" : "SimpleName[24974-24991]:SimpleName[24974-24991]"
    }, {
      "left" : "final ZipArchiveEntry zipArchiveEntry",
      "right" : "final ZipArchiveEntry zipArchiveEntry",
      "info" : "SingleVariableDeclaration[24992-25029]:SingleVariableDeclaration[24992-25029]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25030-25148]:Block[25030-25148]"
    }, {
      "left" : "return zipArchiveEntry.getSize() >= ZIP64_MAGIC || zipArchiveEntry.getCompressedSize() >= ZIP64_MAGIC;",
      "right" : "return zipArchiveEntry.getSize() >= ZIP64_MAGIC || zipArchiveEntry.getCompressedSize() >= ZIP64_MAGIC;",
      "info" : "ReturnStatement[25040-25142]:ReturnStatement[25040-25142]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[25345-25352]:Modifier[25345-25352]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[25353-25357]:PrimitiveType[25353-25357]"
    }, {
      "left" : "rewriteSizesAndCrc",
      "right" : "rewriteSizesAndCrc",
      "info" : "SimpleName[25358-25376]:SimpleName[25358-25376]"
    }, {
      "left" : "final boolean actuallyNeedsZip64",
      "right" : "final boolean actuallyNeedsZip64",
      "info" : "SingleVariableDeclaration[25377-25409]:SingleVariableDeclaration[25377-25409]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[25426-25437]:SimpleType[25426-25437]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25438-27441]:Block[25438-27441]"
    }, {
      "left" : "final long save = channel.position();",
      "right" : "final long save = channel.position();",
      "info" : "VariableDeclarationStatement[25448-25485]:VariableDeclarationStatement[25448-25485]"
    }, {
      "left" : "channel.position(entry.localDataStart);",
      "right" : "channel.position(entry.localDataStart);",
      "info" : "ExpressionStatement[25495-25534]:ExpressionStatement[25495-25534]"
    }, {
      "left" : "writeOut(ZipLong.getBytes(entry.entry.getCrc()));",
      "right" : "writeOut(ZipLong.getBytes(entry.entry.getCrc()));",
      "info" : "ExpressionStatement[25543-25592]:ExpressionStatement[25543-25592]"
    }, {
      "left" : "if (!hasZip64Extra(entry.entry) || !actuallyNeedsZip64)",
      "right" : "if (!hasZip64Extra(entry.entry) || !actuallyNeedsZip64)",
      "info" : "IfStatement[25601-25929]:IfStatement[25601-25929]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25657-25804]:Block[25657-25804]"
    }, {
      "left" : "writeOut(ZipLong.getBytes(entry.entry.getCompressedSize()));",
      "right" : "writeOut(ZipLong.getBytes(entry.entry.getCompressedSize()));",
      "info" : "ExpressionStatement[25671-25731]:ExpressionStatement[25671-25731]"
    }, {
      "left" : "writeOut(ZipLong.getBytes(entry.entry.getSize()));",
      "right" : "writeOut(ZipLong.getBytes(entry.entry.getSize()));",
      "info" : "ExpressionStatement[25744-25794]:ExpressionStatement[25744-25794]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25810-25929]:Block[25810-25929]"
    }, {
      "left" : "writeOut(ZipLong.ZIP64_MAGIC.getBytes());",
      "right" : "writeOut(ZipLong.ZIP64_MAGIC.getBytes());",
      "info" : "ExpressionStatement[25824-25865]:ExpressionStatement[25824-25865]"
    }, {
      "left" : "writeOut(ZipLong.ZIP64_MAGIC.getBytes());",
      "right" : "writeOut(ZipLong.ZIP64_MAGIC.getBytes());",
      "info" : "ExpressionStatement[25878-25919]:ExpressionStatement[25878-25919]"
    }, {
      "left" : "if (hasZip64Extra(entry.entry))",
      "right" : "if (hasZip64Extra(entry.entry))",
      "info" : "IfStatement[25939-27403]:IfStatement[25939-27403]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25971-27403]:Block[25971-27403]"
    }, {
      "left" : "final ByteBuffer name = getName(entry.entry);",
      "right" : "final ByteBuffer name = getName(entry.entry);",
      "info" : "VariableDeclarationStatement[25985-26030]:VariableDeclarationStatement[25985-26030]"
    }, {
      "left" : "final int nameLen = name.limit() - name.position();",
      "right" : "final int nameLen = name.limit() - name.position();",
      "info" : "VariableDeclarationStatement[26043-26094]:VariableDeclarationStatement[26043-26094]"
    }, {
      "left" : "channel.position(entry.localDataStart + 3 * WORD + 2 * SHORT\n                             + nameLen + 2 * SHORT);",
      "right" : "channel.position(entry.localDataStart + 3 * WORD + 2 * SHORT\n                             + nameLen + 2 * SHORT);",
      "info" : "ExpressionStatement[26176-26289]:ExpressionStatement[26176-26289]"
    }, {
      "left" : "writeOut(ZipEightByteInteger.getBytes(entry.entry.getSize()));",
      "right" : "writeOut(ZipEightByteInteger.getBytes(entry.entry.getSize()));",
      "info" : "ExpressionStatement[26424-26486]:ExpressionStatement[26424-26486]"
    }, {
      "left" : "writeOut(ZipEightByteInteger.getBytes(entry.entry.getCompressedSize()));",
      "right" : "writeOut(ZipEightByteInteger.getBytes(entry.entry.getCompressedSize()));",
      "info" : "ExpressionStatement[26499-26571]:ExpressionStatement[26499-26571]"
    }, {
      "left" : "if (!actuallyNeedsZip64)",
      "right" : "if (!actuallyNeedsZip64)",
      "info" : "IfStatement[26585-27393]:IfStatement[26585-27393]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26610-27393]:Block[26610-27393]"
    }, {
      "left" : "channel.position(entry.localDataStart  - 5 * SHORT);",
      "right" : "channel.position(entry.localDataStart  - 5 * SHORT);",
      "info" : "ExpressionStatement[26719-26771]:ExpressionStatement[26719-26771]"
    }, {
      "left" : "writeOut(ZipShort.getBytes(versionNeededToExtract(entry.entry.getMethod(), false, false)));",
      "right" : "writeOut(ZipShort.getBytes(versionNeededToExtract(entry.entry.getMethod(), false, false)));",
      "info" : "ExpressionStatement[26788-26879]:ExpressionStatement[26788-26879]"
    }, {
      "left" : "entry.entry.removeExtraField(Zip64ExtendedInformationExtraField\n                                             .HEADER_ID);",
      "right" : "entry.entry.removeExtraField(Zip64ExtendedInformationExtraField\n                                             .HEADER_ID);",
      "info" : "ExpressionStatement[27009-27130]:ExpressionStatement[27009-27130]"
    }, {
      "left" : "entry.entry.setExtra();",
      "right" : "entry.entry.setExtra();",
      "info" : "ExpressionStatement[27147-27170]:ExpressionStatement[27147-27170]"
    }, {
      "left" : "if (entry.causedUseOfZip64)",
      "right" : "if (entry.causedUseOfZip64)",
      "info" : "IfStatement[27290-27379]:IfStatement[27290-27379]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27318-27379]:Block[27318-27379]"
    }, {
      "left" : "hasUsedZip64 = false;",
      "right" : "hasUsedZip64 = false;",
      "info" : "ExpressionStatement[27340-27361]:ExpressionStatement[27340-27361]"
    }, {
      "left" : "channel.position(save);",
      "right" : "channel.position(save);",
      "info" : "ExpressionStatement[27412-27435]:ExpressionStatement[27412-27435]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[27746-27755]:MarkerAnnotation[27746-27755]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[27760-27766]:Modifier[27760-27766]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[27767-27771]:PrimitiveType[27767-27771]"
    }, {
      "left" : "putArchiveEntry",
      "right" : "putArchiveEntry",
      "info" : "SimpleName[27772-27787]:SimpleName[27772-27787]"
    }, {
      "left" : "final ArchiveEntry archiveEntry",
      "right" : "final ArchiveEntry archiveEntry",
      "info" : "SingleVariableDeclaration[27788-27819]:SingleVariableDeclaration[27788-27819]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[27828-27839]:SimpleType[27828-27839]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27840-27893]:Block[27840-27893]"
    }, {
      "left" : "putArchiveEntry(archiveEntry, false);",
      "right" : "putArchiveEntry(archiveEntry, false);",
      "info" : "ExpressionStatement[27850-27887]:ExpressionStatement[27850-27887]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[28527-28534]:Modifier[28527-28534]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[28535-28539]:PrimitiveType[28535-28539]"
    }, {
      "left" : "putArchiveEntry",
      "right" : "putArchiveEntry",
      "info" : "SimpleName[28540-28555]:SimpleName[28540-28555]"
    }, {
      "left" : "final ArchiveEntry archiveEntry",
      "right" : "final ArchiveEntry archiveEntry",
      "info" : "SingleVariableDeclaration[28556-28587]:SingleVariableDeclaration[28556-28587]"
    }, {
      "left" : "final boolean phased",
      "right" : "final boolean phased",
      "info" : "SingleVariableDeclaration[28589-28609]:SingleVariableDeclaration[28589-28609]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[28618-28629]:SimpleType[28618-28629]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28630-30400]:Block[28630-30400]"
    }, {
      "left" : "if (finished)",
      "right" : "if (finished)",
      "info" : "IfStatement[28640-28736]:IfStatement[28640-28736]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28654-28736]:Block[28654-28736]"
    }, {
      "left" : "throw new IOException(\"Stream has already been finished\");",
      "right" : "throw new IOException(\"Stream has already been finished\");",
      "info" : "ThrowStatement[28668-28726]:ThrowStatement[28668-28726]"
    }, {
      "left" : "if (entry != null)",
      "right" : "if (entry != null)",
      "info" : "IfStatement[28746-28809]:IfStatement[28746-28809]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28765-28809]:Block[28765-28809]"
    }, {
      "left" : "closeArchiveEntry();",
      "right" : "closeArchiveEntry();",
      "info" : "ExpressionStatement[28779-28799]:ExpressionStatement[28779-28799]"
    }, {
      "left" : "entry = new CurrentEntry((ZipArchiveEntry) archiveEntry);",
      "right" : "entry = new CurrentEntry((ZipArchiveEntry) archiveEntry);",
      "info" : "ExpressionStatement[28819-28876]:ExpressionStatement[28819-28876]"
    }, {
      "left" : "entries.add(entry.entry);",
      "right" : "entries.add(entry.entry);",
      "info" : "ExpressionStatement[28885-28910]:ExpressionStatement[28885-28910]"
    }, {
      "left" : "setDefaults(entry.entry);",
      "right" : "setDefaults(entry.entry);",
      "info" : "ExpressionStatement[28920-28945]:ExpressionStatement[28920-28945]"
    }, {
      "left" : "final Zip64Mode effectiveMode = getEffectiveZip64Mode(entry.entry);",
      "right" : "final Zip64Mode effectiveMode = getEffectiveZip64Mode(entry.entry);",
      "info" : "VariableDeclarationStatement[28955-29022]:VariableDeclarationStatement[28955-29022]"
    }, {
      "left" : "validateSizeInformation(effectiveMode);",
      "right" : "validateSizeInformation(effectiveMode);",
      "info" : "ExpressionStatement[29031-29070]:ExpressionStatement[29031-29070]"
    }, {
      "left" : "if (shouldAddZip64Extra(entry.entry, effectiveMode))",
      "right" : "if (shouldAddZip64Extra(entry.entry, effectiveMode))",
      "info" : "IfStatement[29080-30151]:IfStatement[29080-30151]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29133-30151]:Block[29133-30151]"
    }, {
      "left" : "final Zip64ExtendedInformationExtraField z64 = getZip64Extra(entry.entry);",
      "right" : "final Zip64ExtendedInformationExtraField z64 = getZip64Extra(entry.entry);",
      "info" : "VariableDeclarationStatement[29148-29222]:VariableDeclarationStatement[29148-29222]"
    }, {
      "left" : "ZipEightByteInteger size, compressedSize;",
      "right" : "ZipEightByteInteger size, compressedSize;",
      "info" : "VariableDeclarationStatement[29236-29277]:VariableDeclarationStatement[29236-29277]"
    }, {
      "left" : "if (phased)",
      "right" : "if (phased)",
      "info" : "IfStatement[29290-30023]:IfStatement[29290-30023]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29302-29522]:Block[29302-29522]"
    }, {
      "left" : "size = new ZipEightByteInteger(entry.entry.getSize());",
      "right" : "size = new ZipEightByteInteger(entry.entry.getSize());",
      "info" : "ExpressionStatement[29363-29417]:ExpressionStatement[29363-29417]"
    }, {
      "left" : "compressedSize = new ZipEightByteInteger(entry.entry.getCompressedSize());",
      "right" : "compressedSize = new ZipEightByteInteger(entry.entry.getCompressedSize());",
      "info" : "ExpressionStatement[29434-29508]:ExpressionStatement[29434-29508]"
    }, {
      "left" : "if (entry.entry.getMethod() == STORED\n                    && entry.entry.getSize() != ArchiveEntry.SIZE_UNKNOWN)",
      "right" : "if (entry.entry.getMethod() == STORED\n                    && entry.entry.getSize() != ArchiveEntry.SIZE_UNKNOWN)",
      "info" : "IfStatement[29528-30023]:IfStatement[29528-30023]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29641-29799]:Block[29641-29799]"
    }, {
      "left" : "compressedSize = size = new ZipEightByteInteger(entry.entry.getSize());",
      "right" : "compressedSize = size = new ZipEightByteInteger(entry.entry.getSize());",
      "info" : "ExpressionStatement[29714-29785]:ExpressionStatement[29714-29785]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29805-30023]:Block[29805-30023]"
    }, {
      "left" : "compressedSize = size = ZipEightByteInteger.ZERO;",
      "right" : "compressedSize = size = ZipEightByteInteger.ZERO;",
      "info" : "ExpressionStatement[29960-30009]:ExpressionStatement[29960-30009]"
    }, {
      "left" : "z64.setSize(size);",
      "right" : "z64.setSize(size);",
      "info" : "ExpressionStatement[30036-30054]:ExpressionStatement[30036-30054]"
    }, {
      "left" : "z64.setCompressedSize(compressedSize);",
      "right" : "z64.setCompressedSize(compressedSize);",
      "info" : "ExpressionStatement[30067-30105]:ExpressionStatement[30067-30105]"
    }, {
      "left" : "entry.entry.setExtra();",
      "right" : "entry.entry.setExtra();",
      "info" : "ExpressionStatement[30118-30141]:ExpressionStatement[30118-30141]"
    }, {
      "left" : "if (entry.entry.getMethod() == DEFLATED && hasCompressionLevelChanged)",
      "right" : "if (entry.entry.getMethod() == DEFLATED && hasCompressionLevelChanged)",
      "info" : "IfStatement[30161-30324]:IfStatement[30161-30324]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30232-30324]:Block[30232-30324]"
    }, {
      "left" : "def.setLevel(level);",
      "right" : "def.setLevel(level);",
      "info" : "ExpressionStatement[30246-30266]:ExpressionStatement[30246-30266]"
    }, {
      "left" : "hasCompressionLevelChanged = false;",
      "right" : "hasCompressionLevelChanged = false;",
      "info" : "ExpressionStatement[30279-30314]:ExpressionStatement[30279-30314]"
    }, {
      "left" : "writeLocalFileHeader((ZipArchiveEntry) archiveEntry, phased);",
      "right" : "writeLocalFileHeader((ZipArchiveEntry) archiveEntry, phased);",
      "info" : "ExpressionStatement[30333-30394]:ExpressionStatement[30333-30394]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[30511-30518]:Modifier[30511-30518]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[30519-30523]:PrimitiveType[30519-30523]"
    }, {
      "left" : "setDefaults",
      "right" : "setDefaults",
      "info" : "SimpleName[30524-30535]:SimpleName[30524-30535]"
    }, {
      "left" : "final ZipArchiveEntry entry",
      "right" : "final ZipArchiveEntry entry",
      "info" : "SingleVariableDeclaration[30536-30563]:SingleVariableDeclaration[30536-30563]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30565-30795]:Block[30565-30795]"
    }, {
      "left" : "if (entry.getMethod() == -1)",
      "right" : "if (entry.getMethod() == -1)",
      "info" : "IfStatement[30575-30669]:IfStatement[30575-30669]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30604-30669]:Block[30604-30669]"
    }, {
      "left" : "entry.setMethod(method);",
      "right" : "entry.setMethod(method);",
      "info" : "ExpressionStatement[30635-30659]:ExpressionStatement[30635-30659]"
    }, {
      "left" : "if (entry.getTime() == -1)",
      "right" : "if (entry.getTime() == -1)",
      "info" : "IfStatement[30679-30789]:IfStatement[30679-30789]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30706-30789]:Block[30706-30789]"
    }, {
      "left" : "entry.setTime(System.currentTimeMillis());",
      "right" : "entry.setTime(System.currentTimeMillis());",
      "info" : "ExpressionStatement[30737-30779]:ExpressionStatement[30737-30779]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[31042-31049]:Modifier[31042-31049]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[31050-31054]:PrimitiveType[31050-31054]"
    }, {
      "left" : "validateSizeInformation",
      "right" : "validateSizeInformation",
      "info" : "SimpleName[31055-31078]:SimpleName[31055-31078]"
    }, {
      "left" : "final Zip64Mode effectiveMode",
      "right" : "final Zip64Mode effectiveMode",
      "info" : "SingleVariableDeclaration[31079-31108]:SingleVariableDeclaration[31079-31108]"
    }, {
      "left" : "ZipException",
      "right" : "ZipException",
      "info" : "SimpleType[31125-31137]:SimpleType[31125-31137]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31138-32212]:Block[31138-32212]"
    }, {
      "left" : "if (entry.entry.getMethod() == STORED && channel == null)",
      "right" : "if (entry.entry.getMethod() == STORED && channel == null)",
      "info" : "IfStatement[31212-31879]:IfStatement[31212-31879]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31270-31879]:Block[31270-31879]"
    }, {
      "left" : "if (entry.entry.getSize() == ArchiveEntry.SIZE_UNKNOWN)",
      "right" : "if (entry.entry.getSize() == ArchiveEntry.SIZE_UNKNOWN)",
      "info" : "IfStatement[31284-31561]:IfStatement[31284-31561]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31340-31561]:Block[31340-31561]"
    }, {
      "left" : "throw new ZipException(\"uncompressed size is required for\"\n                                       + \" STORED method when not writing to a\"\n                                       + \" file\");",
      "right" : "throw new ZipException(\"uncompressed size is required for\"\n                                       + \" STORED method when not writing to a\"\n                                       + \" file\");",
      "info" : "ThrowStatement[31358-31547]:ThrowStatement[31358-31547]"
    }, {
      "left" : "if (entry.entry.getCrc() == ZipArchiveEntry.CRC_UNKNOWN)",
      "right" : "if (entry.entry.getCrc() == ZipArchiveEntry.CRC_UNKNOWN)",
      "info" : "IfStatement[31574-31803]:IfStatement[31574-31803]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31631-31803]:Block[31631-31803]"
    }, {
      "left" : "throw new ZipException(\"crc checksum is required for STORED\"\n                                       + \" method when not writing to a file\");",
      "right" : "throw new ZipException(\"crc checksum is required for STORED\"\n                                       + \" method when not writing to a file\");",
      "info" : "ThrowStatement[31649-31789]:ThrowStatement[31649-31789]"
    }, {
      "left" : "entry.entry.setCompressedSize(entry.entry.getSize());",
      "right" : "entry.entry.setCompressedSize(entry.entry.getSize());",
      "info" : "ExpressionStatement[31816-31869]:ExpressionStatement[31816-31869]"
    }, {
      "left" : "if ((entry.entry.getSize() >= ZIP64_MAGIC\n             || entry.entry.getCompressedSize() >= ZIP64_MAGIC)\n            && effectiveMode == Zip64Mode.Never)",
      "right" : "if ((entry.entry.getSize() >= ZIP64_MAGIC\n             || entry.entry.getCompressedSize() >= ZIP64_MAGIC)\n            && effectiveMode == Zip64Mode.Never)",
      "info" : "IfStatement[31889-32206]:IfStatement[31889-32206]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32044-32206]:Block[32044-32206]"
    }, {
      "left" : "throw new Zip64RequiredException(Zip64RequiredException\n                                             .getEntryTooBigMessage(entry.entry));",
      "right" : "throw new Zip64RequiredException(Zip64RequiredException\n                                             .getEntryTooBigMessage(entry.entry));",
      "info" : "ThrowStatement[32058-32196]:ThrowStatement[32058-32196]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[32640-32647]:Modifier[32640-32647]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[32648-32655]:PrimitiveType[32648-32655]"
    }, {
      "left" : "shouldAddZip64Extra",
      "right" : "shouldAddZip64Extra",
      "info" : "SimpleName[32656-32675]:SimpleName[32656-32675]"
    }, {
      "left" : "final ZipArchiveEntry entry",
      "right" : "final ZipArchiveEntry entry",
      "info" : "SingleVariableDeclaration[32676-32703]:SingleVariableDeclaration[32676-32703]"
    }, {
      "left" : "final Zip64Mode mode",
      "right" : "final Zip64Mode mode",
      "info" : "SingleVariableDeclaration[32705-32725]:SingleVariableDeclaration[32705-32725]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32727-33001]:Block[32727-33001]"
    }, {
      "left" : "return mode == Zip64Mode.Always\n            || entry.getSize() >= ZIP64_MAGIC\n            || entry.getCompressedSize() >= ZIP64_MAGIC\n            || (entry.getSize() == ArchiveEntry.SIZE_UNKNOWN\n                && channel != null && mode != Zip64Mode.Never);",
      "right" : "return mode == Zip64Mode.Always\n            || entry.getSize() >= ZIP64_MAGIC\n            || entry.getCompressedSize() >= ZIP64_MAGIC\n            || (entry.getSize() == ArchiveEntry.SIZE_UNKNOWN\n                && channel != null && mode != Zip64Mode.Never);",
      "info" : "ReturnStatement[32737-32995]:ReturnStatement[32737-32995]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[33086-33092]:Modifier[33086-33092]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[33093-33097]:PrimitiveType[33093-33097]"
    }, {
      "left" : "setComment",
      "right" : "setComment",
      "info" : "SimpleName[33098-33108]:SimpleName[33098-33108]"
    }, {
      "left" : "final String comment",
      "right" : "final String comment",
      "info" : "SingleVariableDeclaration[33109-33129]:SingleVariableDeclaration[33109-33129]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33131-33170]:Block[33131-33170]"
    }, {
      "left" : "this.comment = comment;",
      "right" : "this.comment = comment;",
      "info" : "ExpressionStatement[33141-33164]:ExpressionStatement[33141-33164]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[33448-33454]:Modifier[33448-33454]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[33455-33459]:PrimitiveType[33455-33459]"
    }, {
      "left" : "setLevel",
      "right" : "setLevel",
      "info" : "SimpleName[33460-33468]:SimpleName[33460-33468]"
    }, {
      "left" : "final int level",
      "right" : "final int level",
      "info" : "SingleVariableDeclaration[33469-33484]:SingleVariableDeclaration[33469-33484]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33486-33826]:Block[33486-33826]"
    }, {
      "left" : "if (level < Deflater.DEFAULT_COMPRESSION\n            || level > Deflater.BEST_COMPRESSION)",
      "right" : "if (level < Deflater.DEFAULT_COMPRESSION\n            || level > Deflater.BEST_COMPRESSION)",
      "info" : "IfStatement[33496-33732]:IfStatement[33496-33732]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33587-33732]:Block[33587-33732]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Invalid compression level: \"\n                                               + level);",
      "right" : "throw new IllegalArgumentException(\"Invalid compression level: \"\n                                               + level);",
      "info" : "ThrowStatement[33601-33722]:ThrowStatement[33601-33722]"
    }, {
      "left" : "hasCompressionLevelChanged = (this.level != level);",
      "right" : "hasCompressionLevelChanged = (this.level != level);",
      "info" : "ExpressionStatement[33741-33792]:ExpressionStatement[33741-33792]"
    }, {
      "left" : "this.level = level;",
      "right" : "this.level = level;",
      "info" : "ExpressionStatement[33801-33820]:ExpressionStatement[33801-33820]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[34026-34032]:Modifier[34026-34032]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[34033-34037]:PrimitiveType[34033-34037]"
    }, {
      "left" : "setMethod",
      "right" : "setMethod",
      "info" : "SimpleName[34038-34047]:SimpleName[34038-34047]"
    }, {
      "left" : "final int method",
      "right" : "final int method",
      "info" : "SingleVariableDeclaration[34048-34064]:SingleVariableDeclaration[34048-34064]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34066-34103]:Block[34066-34103]"
    }, {
      "left" : "this.method = method;",
      "right" : "this.method = method;",
      "info" : "ExpressionStatement[34076-34097]:ExpressionStatement[34076-34097]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[34341-34350]:MarkerAnnotation[34341-34350]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[34355-34361]:Modifier[34355-34361]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[34362-34369]:PrimitiveType[34362-34369]"
    }, {
      "left" : "canWriteEntryData",
      "right" : "canWriteEntryData",
      "info" : "SimpleName[34370-34387]:SimpleName[34370-34387]"
    }, {
      "left" : "final ArchiveEntry ae",
      "right" : "final ArchiveEntry ae",
      "info" : "SingleVariableDeclaration[34388-34409]:SingleVariableDeclaration[34388-34409]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34411-34747]:Block[34411-34747]"
    }, {
      "left" : "if (ae instanceof ZipArchiveEntry)",
      "right" : "if (ae instanceof ZipArchiveEntry)",
      "info" : "IfStatement[34421-34719]:IfStatement[34421-34719]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34456-34719]:Block[34456-34719]"
    }, {
      "left" : "final ZipArchiveEntry zae = (ZipArchiveEntry) ae;",
      "right" : "final ZipArchiveEntry zae = (ZipArchiveEntry) ae;",
      "info" : "VariableDeclarationStatement[34470-34519]:VariableDeclarationStatement[34470-34519]"
    }, {
      "left" : "return zae.getMethod() != ZipMethod.IMPLODING.getCode()\n                && zae.getMethod() != ZipMethod.UNSHRINKING.getCode()\n                && ZipUtil.canHandleEntryData(zae);",
      "right" : "return zae.getMethod() != ZipMethod.IMPLODING.getCode()\n                && zae.getMethod() != ZipMethod.UNSHRINKING.getCode()\n                && ZipUtil.canHandleEntryData(zae);",
      "info" : "ReturnStatement[34532-34709]:ReturnStatement[34532-34709]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[34728-34741]:ReturnStatement[34728-34741]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[34983-34992]:MarkerAnnotation[34983-34992]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[34997-35003]:Modifier[34997-35003]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[35004-35008]:PrimitiveType[35004-35008]"
    }, {
      "left" : "write",
      "right" : "write",
      "info" : "SimpleName[35009-35014]:SimpleName[35009-35014]"
    }, {
      "left" : "final byte[] b",
      "right" : "final byte[] b",
      "info" : "SingleVariableDeclaration[35015-35029]:SingleVariableDeclaration[35015-35029]"
    }, {
      "left" : "final int offset",
      "right" : "final int offset",
      "info" : "SingleVariableDeclaration[35031-35047]:SingleVariableDeclaration[35031-35047]"
    }, {
      "left" : "final int length",
      "right" : "final int length",
      "info" : "SingleVariableDeclaration[35049-35065]:SingleVariableDeclaration[35049-35065]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[35074-35085]:SimpleType[35074-35085]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35086-35387]:Block[35086-35387]"
    }, {
      "left" : "if (entry == null)",
      "right" : "if (entry == null)",
      "info" : "IfStatement[35096-35191]:IfStatement[35096-35191]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35115-35191]:Block[35115-35191]"
    }, {
      "left" : "throw new IllegalStateException(\"No current entry\");",
      "right" : "throw new IllegalStateException(\"No current entry\");",
      "info" : "ThrowStatement[35129-35181]:ThrowStatement[35129-35181]"
    }, {
      "left" : "ZipUtil.checkRequestedFeatures(entry.entry);",
      "right" : "ZipUtil.checkRequestedFeatures(entry.entry);",
      "info" : "ExpressionStatement[35200-35244]:ExpressionStatement[35200-35244]"
    }, {
      "left" : "final long writtenThisTime = streamCompressor.write(b, offset, length, entry.entry.getMethod());",
      "right" : "final long writtenThisTime = streamCompressor.write(b, offset, length, entry.entry.getMethod());",
      "info" : "VariableDeclarationStatement[35253-35349]:VariableDeclarationStatement[35253-35349]"
    }, {
      "left" : "count(writtenThisTime);",
      "right" : "count(writtenThisTime);",
      "info" : "ExpressionStatement[35358-35381]:ExpressionStatement[35358-35381]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[35540-35547]:Modifier[35540-35547]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[35548-35552]:PrimitiveType[35548-35552]"
    }, {
      "left" : "writeCounted",
      "right" : "writeCounted",
      "info" : "SimpleName[35553-35565]:SimpleName[35553-35565]"
    }, {
      "left" : "final byte[] data",
      "right" : "final byte[] data",
      "info" : "SingleVariableDeclaration[35566-35583]:SingleVariableDeclaration[35566-35583]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[35592-35603]:SimpleType[35592-35603]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35604-35656]:Block[35604-35656]"
    }, {
      "left" : "streamCompressor.writeCounted(data);",
      "right" : "streamCompressor.writeCounted(data);",
      "info" : "ExpressionStatement[35614-35650]:ExpressionStatement[35614-35650]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[35662-35669]:Modifier[35662-35669]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[35670-35674]:PrimitiveType[35670-35674]"
    }, {
      "left" : "copyFromZipInputStream",
      "right" : "copyFromZipInputStream",
      "info" : "SimpleName[35675-35697]:SimpleName[35675-35697]"
    }, {
      "left" : "final InputStream src",
      "right" : "final InputStream src",
      "info" : "SingleVariableDeclaration[35698-35719]:SingleVariableDeclaration[35698-35719]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[35728-35739]:SimpleType[35728-35739]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35740-36126]:Block[35740-36126]"
    }, {
      "left" : "if (entry == null)",
      "right" : "if (entry == null)",
      "info" : "IfStatement[35750-35845]:IfStatement[35750-35845]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35769-35845]:Block[35769-35845]"
    }, {
      "left" : "throw new IllegalStateException(\"No current entry\");",
      "right" : "throw new IllegalStateException(\"No current entry\");",
      "info" : "ThrowStatement[35783-35835]:ThrowStatement[35783-35835]"
    }, {
      "left" : "ZipUtil.checkRequestedFeatures(entry.entry);",
      "right" : "ZipUtil.checkRequestedFeatures(entry.entry);",
      "info" : "ExpressionStatement[35854-35898]:ExpressionStatement[35854-35898]"
    }, {
      "left" : "entry.hasWritten = true;",
      "right" : "entry.hasWritten = true;",
      "info" : "ExpressionStatement[35907-35931]:ExpressionStatement[35907-35931]"
    }, {
      "left" : "int length;",
      "right" : "int length;",
      "info" : "VariableDeclarationStatement[35940-35951]:VariableDeclarationStatement[35940-35951]"
    }, {
      "left" : "while ((length = src.read(copyBuffer)) >= 0)",
      "right" : "while ((length = src.read(copyBuffer)) >= 0)",
      "info" : "WhileStatement[35960-36120]:WhileStatement[35960-36120]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36014-36120]:Block[36014-36120]"
    }, {
      "left" : "streamCompressor.writeCounted(copyBuffer, 0, length);",
      "right" : "streamCompressor.writeCounted(copyBuffer, 0, length);",
      "info" : "ExpressionStatement[36028-36081]:ExpressionStatement[36028-36081]"
    }, {
      "left" : "count( length );",
      "right" : "count( length );",
      "info" : "ExpressionStatement[36094-36110]:ExpressionStatement[36094-36110]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[36509-36518]:MarkerAnnotation[36509-36518]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[36523-36529]:Modifier[36523-36529]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[36530-36534]:PrimitiveType[36530-36534]"
    }, {
      "left" : "close",
      "right" : "close",
      "info" : "SimpleName[36535-36540]:SimpleName[36535-36540]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[36550-36561]:SimpleType[36550-36561]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36562-36645]:Block[36562-36645]"
    }, {
      "left" : "if (!finished)",
      "right" : "if (!finished)",
      "info" : "IfStatement[36572-36620]:IfStatement[36572-36620]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36587-36620]:Block[36587-36620]"
    }, {
      "left" : "finish();",
      "right" : "finish();",
      "info" : "ExpressionStatement[36601-36610]:ExpressionStatement[36601-36610]"
    }, {
      "left" : "destroy();",
      "right" : "destroy();",
      "info" : "ExpressionStatement[36629-36639]:ExpressionStatement[36629-36639]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[36838-36847]:MarkerAnnotation[36838-36847]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[36852-36858]:Modifier[36852-36858]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[36859-36863]:PrimitiveType[36859-36863]"
    }, {
      "left" : "flush",
      "right" : "flush",
      "info" : "SimpleName[36864-36869]:SimpleName[36864-36869]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[36879-36890]:SimpleType[36879-36890]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36891-36960]:Block[36891-36960]"
    }, {
      "left" : "if (out != null)",
      "right" : "if (out != null)",
      "info" : "IfStatement[36901-36954]:IfStatement[36901-36954]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36918-36954]:Block[36918-36954]"
    }, {
      "left" : "out.flush();",
      "right" : "out.flush();",
      "info" : "ExpressionStatement[36932-36944]:ExpressionStatement[36932-36944]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[37977-37986]:Modifier[37977-37986]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[37987-37992]:Modifier[37987-37992]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[37993-37997]:PrimitiveType[37993-37997]"
    }, {
      "left" : "deflate",
      "right" : "deflate",
      "info" : "SimpleName[37998-38005]:SimpleName[37998-38005]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[38015-38026]:SimpleType[38015-38026]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38027-38070]:Block[38027-38070]"
    }, {
      "left" : "streamCompressor.deflate();",
      "right" : "streamCompressor.deflate();",
      "info" : "ExpressionStatement[38037-38064]:ExpressionStatement[38037-38064]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[38206-38215]:Modifier[38206-38215]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[38216-38220]:PrimitiveType[38216-38220]"
    }, {
      "left" : "writeLocalFileHeader",
      "right" : "writeLocalFileHeader",
      "info" : "SimpleName[38221-38241]:SimpleName[38221-38241]"
    }, {
      "left" : "final ZipArchiveEntry ze",
      "right" : "final ZipArchiveEntry ze",
      "info" : "SingleVariableDeclaration[38242-38266]:SingleVariableDeclaration[38242-38266]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[38275-38286]:SimpleType[38275-38286]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38287-38335]:Block[38287-38335]"
    }, {
      "left" : "writeLocalFileHeader(ze, false);",
      "right" : "writeLocalFileHeader(ze, false);",
      "info" : "ExpressionStatement[38297-38329]:ExpressionStatement[38297-38329]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[43333-43340]:Modifier[43349-43356]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[43341-43345]:PrimitiveType[43357-43361]"
    }, {
      "left" : "addUnicodeExtraFields",
      "right" : "addUnicodeExtraFields",
      "info" : "SimpleName[43346-43367]:SimpleName[43362-43383]"
    }, {
      "left" : "final ZipArchiveEntry ze",
      "right" : "final ZipArchiveEntry ze",
      "info" : "SingleVariableDeclaration[43368-43392]:SingleVariableDeclaration[43384-43408]"
    }, {
      "left" : "final boolean encodable",
      "right" : "final boolean encodable",
      "info" : "SingleVariableDeclaration[43394-43417]:SingleVariableDeclaration[43410-43433]"
    }, {
      "left" : "final ByteBuffer name",
      "right" : "final ByteBuffer name",
      "info" : "SingleVariableDeclaration[43458-43479]:SingleVariableDeclaration[43474-43495]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[43496-43507]:SimpleType[43512-43523]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43508-44804]:Block[43524-44820]"
    }, {
      "left" : "if (createUnicodeExtraFields == UnicodeExtraFieldPolicy.ALWAYS\n            || !encodable)",
      "right" : "if (createUnicodeExtraFields == UnicodeExtraFieldPolicy.ALWAYS\n            || !encodable)",
      "info" : "IfStatement[43518-43976]:IfStatement[43534-43992]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43608-43976]:Block[43624-43992]"
    }, {
      "left" : "ze.addExtraField(new UnicodePathExtraField(ze.getName(),\n                                                       name.array(),\n                                                       name.arrayOffset(),\n                                                       name.limit()\n                                                       - name.position()));",
      "right" : "ze.addExtraField(new UnicodePathExtraField(ze.getName(),\n                                                       name.array(),\n                                                       name.arrayOffset(),\n                                                       name.limit()\n                                                       - name.position()));",
      "info" : "ExpressionStatement[43622-43966]:ExpressionStatement[43638-43982]"
    }, {
      "left" : "final String comm = ze.getComment();",
      "right" : "final String comm = ze.getComment();",
      "info" : "VariableDeclarationStatement[43986-44022]:VariableDeclarationStatement[44002-44038]"
    }, {
      "left" : "if (comm != null && !\"\".equals(comm))",
      "right" : "if (comm != null && !\"\".equals(comm))",
      "info" : "IfStatement[44031-44798]:IfStatement[44047-44814]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44069-44798]:Block[44085-44814]"
    }, {
      "left" : "final boolean commentEncodable = zipEncoding.canEncode(comm);",
      "right" : "final boolean commentEncodable = zipEncoding.canEncode(comm);",
      "info" : "VariableDeclarationStatement[44084-44145]:VariableDeclarationStatement[44100-44161]"
    }, {
      "left" : "if (createUnicodeExtraFields == UnicodeExtraFieldPolicy.ALWAYS\n                || !commentEncodable)",
      "right" : "if (createUnicodeExtraFields == UnicodeExtraFieldPolicy.ALWAYS\n                || !commentEncodable)",
      "info" : "IfStatement[44159-44788]:IfStatement[44175-44804]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44260-44788]:Block[44276-44804]"
    }, {
      "left" : "final ByteBuffer commentB = getEntryEncoding(ze).encode(comm);",
      "right" : "final ByteBuffer commentB = getEntryEncoding(ze).encode(comm);",
      "info" : "VariableDeclarationStatement[44278-44340]:VariableDeclarationStatement[44294-44356]"
    }, {
      "left" : "ze.addExtraField(new UnicodeCommentExtraField(comm,\n                                                              commentB.array(),\n                                                              commentB.arrayOffset(),\n                                                              commentB.limit()\n                                                              - commentB.position())\n                                 );",
      "right" : "ze.addExtraField(new UnicodeCommentExtraField(comm,\n                                                              commentB.array(),\n                                                              commentB.arrayOffset(),\n                                                              commentB.limit()\n                                                              - commentB.position())\n                                 );",
      "info" : "ExpressionStatement[44357-44774]:ExpressionStatement[44373-44790]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[45829-45838]:Modifier[45842-45851]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[45839-45843]:PrimitiveType[45852-45856]"
    }, {
      "left" : "writeCentralFileHeader",
      "right" : "writeCentralFileHeader",
      "info" : "SimpleName[45844-45866]:SimpleName[45857-45879]"
    }, {
      "left" : "final ZipArchiveEntry ze",
      "right" : "final ZipArchiveEntry ze",
      "info" : "SingleVariableDeclaration[45867-45891]:SingleVariableDeclaration[45880-45904]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[45900-45911]:SimpleType[45913-45924]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45912-46030]:Block[45925-46043]"
    }, {
      "left" : "final byte[] centralFileHeader = createCentralFileHeader(ze);",
      "right" : "final byte[] centralFileHeader = createCentralFileHeader(ze);",
      "info" : "VariableDeclarationStatement[45922-45983]:VariableDeclarationStatement[45935-45996]"
    }, {
      "left" : "writeCounted(centralFileHeader);",
      "right" : "writeCounted(centralFileHeader);",
      "info" : "ExpressionStatement[45992-46024]:ExpressionStatement[46005-46037]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[46036-46043]:Modifier[46049-46056]"
    }, {
      "left" : "byte[]",
      "right" : "byte[]",
      "info" : "ArrayType[46044-46050]:ArrayType[46057-46063]"
    }, {
      "left" : "createCentralFileHeader",
      "right" : "createCentralFileHeader",
      "info" : "SimpleName[46051-46074]:SimpleName[46064-46087]"
    }, {
      "left" : "final ZipArchiveEntry ze",
      "right" : "final ZipArchiveEntry ze",
      "info" : "SingleVariableDeclaration[46075-46099]:SingleVariableDeclaration[46088-46112]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[46108-46119]:SimpleType[46121-46132]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46120-46973]:Block[46133-46986]"
    }, {
      "left" : "final EntryMetaData entryMetaData = metaData.get(ze);",
      "right" : "final EntryMetaData entryMetaData = metaData.get(ze);",
      "info" : "VariableDeclarationStatement[46131-46184]:VariableDeclarationStatement[46144-46197]"
    }, {
      "left" : "final boolean needsZip64Extra = hasZip64Extra(ze)\n                || ze.getCompressedSize() >= ZIP64_MAGIC\n                || ze.getSize() >= ZIP64_MAGIC\n                || entryMetaData.offset >= ZIP64_MAGIC\n                || zip64Mode == Zip64Mode.Always;",
      "right" : "final boolean needsZip64Extra = hasZip64Extra(ze)\n                || ze.getCompressedSize() >= ZIP64_MAGIC\n                || ze.getSize() >= ZIP64_MAGIC\n                || entryMetaData.offset >= ZIP64_MAGIC\n                || zip64Mode == Zip64Mode.Always;",
      "info" : "VariableDeclarationStatement[46193-46451]:VariableDeclarationStatement[46206-46464]"
    }, {
      "left" : "if (needsZip64Extra && zip64Mode == Zip64Mode.Never)",
      "right" : "if (needsZip64Extra && zip64Mode == Zip64Mode.Never)",
      "info" : "IfStatement[46461-46806]:IfStatement[46474-46819]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46514-46806]:Block[46527-46819]"
    }, {
      "left" : "throw new Zip64RequiredException(Zip64RequiredException\n                    .ARCHIVE_TOO_BIG_MESSAGE);",
      "right" : "throw new Zip64RequiredException(Zip64RequiredException\n                    .ARCHIVE_TOO_BIG_MESSAGE);",
      "info" : "ThrowStatement[46694-46796]:ThrowStatement[46707-46809]"
    }, {
      "left" : "handleZip64Extra(ze, entryMetaData.offset, needsZip64Extra);",
      "right" : "handleZip64Extra(ze, entryMetaData.offset, needsZip64Extra);",
      "info" : "ExpressionStatement[46817-46877]:ExpressionStatement[46830-46890]"
    }, {
      "left" : "return createCentralFileHeader(ze, getName(ze), entryMetaData, needsZip64Extra);",
      "right" : "return createCentralFileHeader(ze, getName(ze), entryMetaData, needsZip64Extra);",
      "info" : "ReturnStatement[46887-46967]:ReturnStatement[46900-46980]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[47200-47207]:Modifier[47213-47220]"
    }, {
      "left" : "byte[]",
      "right" : "byte[]",
      "info" : "ArrayType[47208-47214]:ArrayType[47221-47227]"
    }, {
      "left" : "createCentralFileHeader",
      "right" : "createCentralFileHeader",
      "info" : "SimpleName[47215-47238]:SimpleName[47228-47251]"
    }, {
      "left" : "final ZipArchiveEntry ze",
      "right" : "final ZipArchiveEntry ze",
      "info" : "SingleVariableDeclaration[47239-47263]:SingleVariableDeclaration[47252-47276]"
    }, {
      "left" : "final ByteBuffer name",
      "right" : "final ByteBuffer name",
      "info" : "SingleVariableDeclaration[47265-47286]:SingleVariableDeclaration[47278-47299]"
    }, {
      "left" : "final EntryMetaData entryMetaData",
      "right" : "final EntryMetaData entryMetaData",
      "info" : "SingleVariableDeclaration[47331-47364]:SingleVariableDeclaration[47344-47377]"
    }, {
      "left" : "final boolean needsZip64Extra",
      "right" : "final boolean needsZip64Extra",
      "info" : "SingleVariableDeclaration[47409-47438]:SingleVariableDeclaration[47422-47451]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[47447-47458]:SimpleType[47460-47471]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47459-50759]:Block[47472-50772]"
    }, {
      "left" : "final byte[] extra = ze.getCentralDirectoryExtra();",
      "right" : "final byte[] extra = ze.getCentralDirectoryExtra();",
      "info" : "VariableDeclarationStatement[47469-47520]:VariableDeclarationStatement[47482-47533]"
    }, {
      "left" : "String comm = ze.getComment();",
      "right" : "String comm = ze.getComment();",
      "info" : "VariableDeclarationStatement[47561-47591]:VariableDeclarationStatement[47574-47604]"
    }, {
      "left" : "if (comm == null)",
      "right" : "if (comm == null)",
      "info" : "IfStatement[47600-47652]:IfStatement[47613-47665]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47618-47652]:Block[47631-47665]"
    }, {
      "left" : "comm = \"\";",
      "right" : "comm = \"\";",
      "info" : "ExpressionStatement[47632-47642]:ExpressionStatement[47645-47655]"
    }, {
      "left" : "final ByteBuffer commentB = getEntryEncoding(ze).encode(comm);",
      "right" : "final ByteBuffer commentB = getEntryEncoding(ze).encode(comm);",
      "info" : "VariableDeclarationStatement[47662-47724]:VariableDeclarationStatement[47675-47737]"
    }, {
      "left" : "final int nameLen = name.limit() - name.position();",
      "right" : "final int nameLen = name.limit() - name.position();",
      "info" : "VariableDeclarationStatement[47733-47784]:VariableDeclarationStatement[47746-47797]"
    }, {
      "left" : "final int commentLen = commentB.limit() - commentB.position();",
      "right" : "final int commentLen = commentB.limit() - commentB.position();",
      "info" : "VariableDeclarationStatement[47793-47855]:VariableDeclarationStatement[47806-47868]"
    }, {
      "left" : "final int len= CFH_FILENAME_OFFSET + nameLen + extra.length + commentLen;",
      "right" : "final int len= CFH_FILENAME_OFFSET + nameLen + extra.length + commentLen;",
      "info" : "VariableDeclarationStatement[47864-47937]:VariableDeclarationStatement[47877-47950]"
    }, {
      "left" : "final byte[] buf = new byte[len];",
      "right" : "final byte[] buf = new byte[len];",
      "info" : "VariableDeclarationStatement[47946-47979]:VariableDeclarationStatement[47959-47992]"
    }, {
      "left" : "System.arraycopy(CFH_SIG,  0, buf, CFH_SIG_OFFSET, WORD);",
      "right" : "System.arraycopy(CFH_SIG,  0, buf, CFH_SIG_OFFSET, WORD);",
      "info" : "ExpressionStatement[47989-48046]:ExpressionStatement[48002-48059]"
    }, {
      "left" : "putShort((ze.getPlatform() << 8) | (!hasUsedZip64 ? DATA_DESCRIPTOR_MIN_VERSION : ZIP64_MIN_VERSION),\n                buf, CFH_VERSION_MADE_BY_OFFSET);",
      "right" : "putShort((ze.getPlatform() << 8) | (!hasUsedZip64 ? DATA_DESCRIPTOR_MIN_VERSION : ZIP64_MIN_VERSION),\n                buf, CFH_VERSION_MADE_BY_OFFSET);",
      "info" : "ExpressionStatement[48121-48272]:ExpressionStatement[48134-48285]"
    }, {
      "left" : "final int zipMethod = ze.getMethod();",
      "right" : "final int zipMethod = ze.getMethod();",
      "info" : "VariableDeclarationStatement[48282-48319]:VariableDeclarationStatement[48295-48332]"
    }, {
      "left" : "final boolean encodable = zipEncoding.canEncode(ze.getName());",
      "right" : "final boolean encodable = zipEncoding.canEncode(ze.getName());",
      "info" : "VariableDeclarationStatement[48328-48390]:VariableDeclarationStatement[48341-48403]"
    }, {
      "left" : "putShort(versionNeededToExtract(zipMethod, needsZip64Extra, entryMetaData.usesDataDescriptor),\n            buf, CFH_VERSION_NEEDED_OFFSET);",
      "right" : "putShort(versionNeededToExtract(zipMethod, needsZip64Extra, entryMetaData.usesDataDescriptor),\n            buf, CFH_VERSION_NEEDED_OFFSET);",
      "info" : "ExpressionStatement[48399-48538]:ExpressionStatement[48412-48551]"
    }, {
      "left" : "getGeneralPurposeBits(!encodable && fallbackToUTF8, entryMetaData.usesDataDescriptor).encode(buf, CFH_GPB_OFFSET);",
      "right" : "getGeneralPurposeBits(!encodable && fallbackToUTF8, entryMetaData.usesDataDescriptor).encode(buf, CFH_GPB_OFFSET);",
      "info" : "ExpressionStatement[48547-48661]:ExpressionStatement[48560-48674]"
    }, {
      "left" : "putShort(zipMethod, buf, CFH_METHOD_OFFSET);",
      "right" : "putShort(zipMethod, buf, CFH_METHOD_OFFSET);",
      "info" : "ExpressionStatement[48701-48745]:ExpressionStatement[48714-48758]"
    }, {
      "left" : "ZipUtil.toDosTime(calendarInstance, ze.getTime(), buf, CFH_TIME_OFFSET);",
      "right" : "ZipUtil.toDosTime(calendarInstance, ze.getTime(), buf, CFH_TIME_OFFSET);",
      "info" : "ExpressionStatement[48791-48863]:ExpressionStatement[48804-48876]"
    }, {
      "left" : "putLong(ze.getCrc(), buf, CFH_CRC_OFFSET);",
      "right" : "putLong(ze.getCrc(), buf, CFH_CRC_OFFSET);",
      "info" : "ExpressionStatement[48948-48990]:ExpressionStatement[48961-49003]"
    }, {
      "left" : "if (ze.getCompressedSize() >= ZIP64_MAGIC\n                || ze.getSize() >= ZIP64_MAGIC\n                || zip64Mode == Zip64Mode.Always)",
      "right" : "if (ze.getCompressedSize() >= ZIP64_MAGIC\n                || ze.getSize() >= ZIP64_MAGIC\n                || zip64Mode == Zip64Mode.Always)",
      "info" : "IfStatement[48999-49456]:IfStatement[49012-49469]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49138-49295]:Block[49151-49308]"
    }, {
      "left" : "ZipLong.ZIP64_MAGIC.putLong(buf, CFH_COMPRESSED_SIZE_OFFSET);",
      "right" : "ZipLong.ZIP64_MAGIC.putLong(buf, CFH_COMPRESSED_SIZE_OFFSET);",
      "info" : "ExpressionStatement[49152-49213]:ExpressionStatement[49165-49226]"
    }, {
      "left" : "ZipLong.ZIP64_MAGIC.putLong(buf, CFH_ORIGINAL_SIZE_OFFSET);",
      "right" : "ZipLong.ZIP64_MAGIC.putLong(buf, CFH_ORIGINAL_SIZE_OFFSET);",
      "info" : "ExpressionStatement[49226-49285]:ExpressionStatement[49239-49298]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49301-49456]:Block[49314-49469]"
    }, {
      "left" : "putLong(ze.getCompressedSize(), buf, CFH_COMPRESSED_SIZE_OFFSET);",
      "right" : "putLong(ze.getCompressedSize(), buf, CFH_COMPRESSED_SIZE_OFFSET);",
      "info" : "ExpressionStatement[49315-49380]:ExpressionStatement[49328-49393]"
    }, {
      "left" : "putLong(ze.getSize(), buf, CFH_ORIGINAL_SIZE_OFFSET);",
      "right" : "putLong(ze.getSize(), buf, CFH_ORIGINAL_SIZE_OFFSET);",
      "info" : "ExpressionStatement[49393-49446]:ExpressionStatement[49406-49459]"
    }, {
      "left" : "putShort(nameLen, buf, CFH_FILENAME_LENGTH_OFFSET);",
      "right" : "putShort(nameLen, buf, CFH_FILENAME_LENGTH_OFFSET);",
      "info" : "ExpressionStatement[49466-49517]:ExpressionStatement[49479-49530]"
    }, {
      "left" : "putShort(extra.length, buf, CFH_EXTRA_LENGTH_OFFSET);",
      "right" : "putShort(extra.length, buf, CFH_EXTRA_LENGTH_OFFSET);",
      "info" : "ExpressionStatement[49557-49610]:ExpressionStatement[49570-49623]"
    }, {
      "left" : "putShort(commentLen, buf, CFH_COMMENT_LENGTH_OFFSET);",
      "right" : "putShort(commentLen, buf, CFH_COMMENT_LENGTH_OFFSET);",
      "info" : "ExpressionStatement[49620-49673]:ExpressionStatement[49633-49686]"
    }, {
      "left" : "System.arraycopy(ZERO, 0, buf, CFH_DISK_NUMBER_OFFSET, SHORT);",
      "right" : "System.arraycopy(ZERO, 0, buf, CFH_DISK_NUMBER_OFFSET, SHORT);",
      "info" : "ExpressionStatement[49712-49774]:ExpressionStatement[49725-49787]"
    }, {
      "left" : "putShort(ze.getInternalAttributes(), buf, CFH_INTERNAL_ATTRIBUTES_OFFSET);",
      "right" : "putShort(ze.getInternalAttributes(), buf, CFH_INTERNAL_ATTRIBUTES_OFFSET);",
      "info" : "ExpressionStatement[49820-49894]:ExpressionStatement[49833-49907]"
    }, {
      "left" : "putLong(ze.getExternalAttributes(), buf, CFH_EXTERNAL_ATTRIBUTES_OFFSET);",
      "right" : "putLong(ze.getExternalAttributes(), buf, CFH_EXTERNAL_ATTRIBUTES_OFFSET);",
      "info" : "ExpressionStatement[49940-50013]:ExpressionStatement[49953-50026]"
    }, {
      "left" : "if (entryMetaData.offset >= ZIP64_MAGIC || zip64Mode == Zip64Mode.Always)",
      "right" : "if (entryMetaData.offset >= ZIP64_MAGIC || zip64Mode == Zip64Mode.Always)",
      "info" : "IfStatement[50057-50301]:IfStatement[50070-50314]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50131-50197]:Block[50144-50210]"
    }, {
      "left" : "putLong(ZIP64_MAGIC, buf, CFH_LFH_OFFSET);",
      "right" : "putLong(ZIP64_MAGIC, buf, CFH_LFH_OFFSET);",
      "info" : "ExpressionStatement[50145-50187]:ExpressionStatement[50158-50200]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50203-50301]:Block[50216-50314]"
    }, {
      "left" : "putLong(Math.min(entryMetaData.offset, ZIP64_MAGIC), buf, CFH_LFH_OFFSET);",
      "right" : "putLong(Math.min(entryMetaData.offset, ZIP64_MAGIC), buf, CFH_LFH_OFFSET);",
      "info" : "ExpressionStatement[50217-50291]:ExpressionStatement[50230-50304]"
    }, {
      "left" : "System.arraycopy(name.array(), name.arrayOffset(), buf, CFH_FILENAME_OFFSET, nameLen);",
      "right" : "System.arraycopy(name.array(), name.arrayOffset(), buf, CFH_FILENAME_OFFSET, nameLen);",
      "info" : "ExpressionStatement[50332-50418]:ExpressionStatement[50345-50431]"
    }, {
      "left" : "final int extraStart = CFH_FILENAME_OFFSET + nameLen;",
      "right" : "final int extraStart = CFH_FILENAME_OFFSET + nameLen;",
      "info" : "VariableDeclarationStatement[50428-50481]:VariableDeclarationStatement[50441-50494]"
    }, {
      "left" : "System.arraycopy(extra, 0, buf, extraStart, extra.length);",
      "right" : "System.arraycopy(extra, 0, buf, extraStart, extra.length);",
      "info" : "ExpressionStatement[50490-50548]:ExpressionStatement[50503-50561]"
    }, {
      "left" : "final int commentStart = extraStart + extra.length;",
      "right" : "final int commentStart = extraStart + extra.length;",
      "info" : "VariableDeclarationStatement[50558-50609]:VariableDeclarationStatement[50571-50622]"
    }, {
      "left" : "System.arraycopy(commentB.array(), commentB.arrayOffset(), buf, commentStart, commentLen);",
      "right" : "System.arraycopy(commentB.array(), commentB.arrayOffset(), buf, commentStart, commentLen);",
      "info" : "ExpressionStatement[50643-50733]:ExpressionStatement[50656-50746]"
    }, {
      "left" : "return buf;",
      "right" : "return buf;",
      "info" : "ReturnStatement[50742-50753]:ReturnStatement[50755-50766]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[50892-50899]:Modifier[50905-50912]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[50900-50904]:PrimitiveType[50913-50917]"
    }, {
      "left" : "handleZip64Extra",
      "right" : "handleZip64Extra",
      "info" : "SimpleName[50905-50921]:SimpleName[50918-50934]"
    }, {
      "left" : "final ZipArchiveEntry ze",
      "right" : "final ZipArchiveEntry ze",
      "info" : "SingleVariableDeclaration[50922-50946]:SingleVariableDeclaration[50935-50959]"
    }, {
      "left" : "final long lfhOffset",
      "right" : "final long lfhOffset",
      "info" : "SingleVariableDeclaration[50948-50968]:SingleVariableDeclaration[50961-50981]"
    }, {
      "left" : "final boolean needsZip64Extra",
      "right" : "final boolean needsZip64Extra",
      "info" : "SingleVariableDeclaration[51004-51033]:SingleVariableDeclaration[51017-51046]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51035-51846]:Block[51048-51859]"
    }, {
      "left" : "if (needsZip64Extra)",
      "right" : "if (needsZip64Extra)",
      "info" : "IfStatement[51045-51840]:IfStatement[51058-51853]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51066-51840]:Block[51079-51853]"
    }, {
      "left" : "final Zip64ExtendedInformationExtraField z64 = getZip64Extra(ze);",
      "right" : "final Zip64ExtendedInformationExtraField z64 = getZip64Extra(ze);",
      "info" : "VariableDeclarationStatement[51080-51145]:VariableDeclarationStatement[51093-51158]"
    }, {
      "left" : "if (ze.getCompressedSize() >= ZIP64_MAGIC\n                || ze.getSize() >= ZIP64_MAGIC\n                || zip64Mode == Zip64Mode.Always)",
      "right" : "if (ze.getCompressedSize() >= ZIP64_MAGIC\n                || ze.getSize() >= ZIP64_MAGIC\n                || zip64Mode == Zip64Mode.Always)",
      "info" : "IfStatement[51158-51631]:IfStatement[51171-51644]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51297-51468]:Block[51310-51481]"
    }, {
      "left" : "z64.setCompressedSize(new ZipEightByteInteger(ze.getCompressedSize()));",
      "right" : "z64.setCompressedSize(new ZipEightByteInteger(ze.getCompressedSize()));",
      "info" : "ExpressionStatement[51315-51386]:ExpressionStatement[51328-51399]"
    }, {
      "left" : "z64.setSize(new ZipEightByteInteger(ze.getSize()));",
      "right" : "z64.setSize(new ZipEightByteInteger(ze.getSize()));",
      "info" : "ExpressionStatement[51403-51454]:ExpressionStatement[51416-51467]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51474-51631]:Block[51487-51644]"
    }, {
      "left" : "z64.setCompressedSize(null);",
      "right" : "z64.setCompressedSize(null);",
      "info" : "ExpressionStatement[51554-51582]:ExpressionStatement[51567-51595]"
    }, {
      "left" : "z64.setSize(null);",
      "right" : "z64.setSize(null);",
      "info" : "ExpressionStatement[51599-51617]:ExpressionStatement[51612-51630]"
    }, {
      "left" : "if (lfhOffset >= ZIP64_MAGIC || zip64Mode == Zip64Mode.Always)",
      "right" : "if (lfhOffset >= ZIP64_MAGIC || zip64Mode == Zip64Mode.Always)",
      "info" : "IfStatement[51644-51803]:IfStatement[51657-51816]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51707-51803]:Block[51720-51816]"
    }, {
      "left" : "z64.setRelativeHeaderOffset(new ZipEightByteInteger(lfhOffset));",
      "right" : "z64.setRelativeHeaderOffset(new ZipEightByteInteger(lfhOffset));",
      "info" : "ExpressionStatement[51725-51789]:ExpressionStatement[51738-51802]"
    }, {
      "left" : "ze.setExtra();",
      "right" : "ze.setExtra();",
      "info" : "ExpressionStatement[51816-51830]:ExpressionStatement[51829-51843]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[52170-52179]:Modifier[52183-52192]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[52180-52184]:PrimitiveType[52193-52197]"
    }, {
      "left" : "writeCentralDirectoryEnd",
      "right" : "writeCentralDirectoryEnd",
      "info" : "SimpleName[52185-52209]:SimpleName[52198-52222]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[52219-52230]:SimpleType[52232-52243]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52231-53565]:Block[52244-53578]"
    }, {
      "left" : "writeCounted(EOCD_SIG);",
      "right" : "writeCounted(EOCD_SIG);",
      "info" : "ExpressionStatement[52241-52264]:ExpressionStatement[52254-52277]"
    }, {
      "left" : "writeCounted(ZERO);",
      "right" : "writeCounted(ZERO);",
      "info" : "ExpressionStatement[52298-52317]:ExpressionStatement[52311-52330]"
    }, {
      "left" : "writeCounted(ZERO);",
      "right" : "writeCounted(ZERO);",
      "info" : "ExpressionStatement[52326-52345]:ExpressionStatement[52339-52358]"
    }, {
      "left" : "final int numberOfEntries = entries.size();",
      "right" : "final int numberOfEntries = entries.size();",
      "info" : "VariableDeclarationStatement[52384-52427]:VariableDeclarationStatement[52397-52440]"
    }, {
      "left" : "if (numberOfEntries > ZIP64_MAGIC_SHORT\n            && zip64Mode == Zip64Mode.Never)",
      "right" : "if (numberOfEntries > ZIP64_MAGIC_SHORT\n            && zip64Mode == Zip64Mode.Never)",
      "info" : "IfStatement[52436-52673]:IfStatement[52449-52686]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52521-52673]:Block[52534-52686]"
    }, {
      "left" : "throw new Zip64RequiredException(Zip64RequiredException\n                                             .TOO_MANY_ENTRIES_MESSAGE);",
      "right" : "throw new Zip64RequiredException(Zip64RequiredException\n                                             .TOO_MANY_ENTRIES_MESSAGE);",
      "info" : "ThrowStatement[52535-52663]:ThrowStatement[52548-52676]"
    }, {
      "left" : "if (cdOffset > ZIP64_MAGIC && zip64Mode == Zip64Mode.Never)",
      "right" : "if (cdOffset > ZIP64_MAGIC && zip64Mode == Zip64Mode.Never)",
      "info" : "IfStatement[52682-52893]:IfStatement[52695-52906]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52742-52893]:Block[52755-52906]"
    }, {
      "left" : "throw new Zip64RequiredException(Zip64RequiredException\n                                             .ARCHIVE_TOO_BIG_MESSAGE);",
      "right" : "throw new Zip64RequiredException(Zip64RequiredException\n                                             .ARCHIVE_TOO_BIG_MESSAGE);",
      "info" : "ThrowStatement[52756-52883]:ThrowStatement[52769-52896]"
    }, {
      "left" : "final byte[] num = ZipShort.getBytes(Math.min(numberOfEntries,\n                                                ZIP64_MAGIC_SHORT));",
      "right" : "final byte[] num = ZipShort.getBytes(Math.min(numberOfEntries,\n                                                ZIP64_MAGIC_SHORT));",
      "info" : "VariableDeclarationStatement[52903-53034]:VariableDeclarationStatement[52916-53047]"
    }, {
      "left" : "writeCounted(num);",
      "right" : "writeCounted(num);",
      "info" : "ExpressionStatement[53043-53061]:ExpressionStatement[53056-53074]"
    }, {
      "left" : "writeCounted(num);",
      "right" : "writeCounted(num);",
      "info" : "ExpressionStatement[53070-53088]:ExpressionStatement[53083-53101]"
    }, {
      "left" : "writeCounted(ZipLong.getBytes(Math.min(cdLength, ZIP64_MAGIC)));",
      "right" : "writeCounted(ZipLong.getBytes(Math.min(cdLength, ZIP64_MAGIC)));",
      "info" : "ExpressionStatement[53135-53199]:ExpressionStatement[53148-53212]"
    }, {
      "left" : "writeCounted(ZipLong.getBytes(Math.min(cdOffset, ZIP64_MAGIC)));",
      "right" : "writeCounted(ZipLong.getBytes(Math.min(cdOffset, ZIP64_MAGIC)));",
      "info" : "ExpressionStatement[53208-53272]:ExpressionStatement[53221-53285]"
    }, {
      "left" : "final ByteBuffer data = this.zipEncoding.encode(comment);",
      "right" : "final ByteBuffer data = this.zipEncoding.encode(comment);",
      "info" : "VariableDeclarationStatement[53310-53367]:VariableDeclarationStatement[53323-53380]"
    }, {
      "left" : "final int dataLen = data.limit() - data.position();",
      "right" : "final int dataLen = data.limit() - data.position();",
      "info" : "VariableDeclarationStatement[53376-53427]:VariableDeclarationStatement[53389-53440]"
    }, {
      "left" : "writeCounted(ZipShort.getBytes(dataLen));",
      "right" : "writeCounted(ZipShort.getBytes(dataLen));",
      "info" : "ExpressionStatement[53436-53477]:ExpressionStatement[53449-53490]"
    }, {
      "left" : "streamCompressor.writeCounted(data.array(), data.arrayOffset(), dataLen);",
      "right" : "streamCompressor.writeCounted(data.array(), data.arrayOffset(), dataLen);",
      "info" : "ExpressionStatement[53486-53559]:ExpressionStatement[53499-53572]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[53760-53769]:Modifier[53773-53782]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[53770-53774]:PrimitiveType[53783-53787]"
    }, {
      "left" : "writeZip64CentralDirectory",
      "right" : "writeZip64CentralDirectory",
      "info" : "SimpleName[53775-53801]:SimpleName[53788-53814]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[53811-53822]:SimpleType[53824-53835]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53823-55951]:Block[53836-55964]"
    }, {
      "left" : "if (zip64Mode == Zip64Mode.Never)",
      "right" : "if (zip64Mode == Zip64Mode.Never)",
      "info" : "IfStatement[53833-53898]:IfStatement[53846-53911]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53867-53898]:Block[53880-53911]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[53881-53888]:ReturnStatement[53894-53901]"
    }, {
      "left" : "if (!hasUsedZip64\n            && (cdOffset >= ZIP64_MAGIC || cdLength >= ZIP64_MAGIC\n                || entries.size() >= ZIP64_MAGIC_SHORT))",
      "right" : "if (!hasUsedZip64\n            && (cdOffset >= ZIP64_MAGIC || cdLength >= ZIP64_MAGIC\n                || entries.size() >= ZIP64_MAGIC_SHORT))",
      "info" : "IfStatement[53908-54129]:IfStatement[53921-54142]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54050-54129]:Block[54063-54142]"
    }, {
      "left" : "hasUsedZip64 = true;",
      "right" : "hasUsedZip64 = true;",
      "info" : "ExpressionStatement[54099-54119]:ExpressionStatement[54112-54132]"
    }, {
      "left" : "if (!hasUsedZip64)",
      "right" : "if (!hasUsedZip64)",
      "info" : "IfStatement[54139-54189]:IfStatement[54152-54202]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54158-54189]:Block[54171-54202]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[54172-54179]:ReturnStatement[54185-54192]"
    }, {
      "left" : "final long offset = streamCompressor.getTotalBytesWritten();",
      "right" : "final long offset = streamCompressor.getTotalBytesWritten();",
      "info" : "VariableDeclarationStatement[54199-54259]:VariableDeclarationStatement[54212-54272]"
    }, {
      "left" : "writeOut(ZIP64_EOCD_SIG);",
      "right" : "writeOut(ZIP64_EOCD_SIG);",
      "info" : "ExpressionStatement[54269-54294]:ExpressionStatement[54282-54307]"
    }, {
      "left" : "writeOut(ZipEightByteInteger\n                 .getBytes(SHORT   /* version made by */\n                           + SHORT /* version needed to extract */\n                           + WORD  /* disk number */\n                           + WORD  /* disk with central directory */\n                           + DWORD /* number of entries in CD on this disk */\n                           + DWORD /* total number of entries */\n                           + DWORD /* size of CD */\n                           + (long) DWORD /* offset of CD */\n                           ));",
      "right" : "writeOut(ZipEightByteInteger\n                 .getBytes(SHORT   /* version made by */\n                           + SHORT /* version needed to extract */\n                           + WORD  /* disk number */\n                           + WORD  /* disk with central directory */\n                           + DWORD /* number of entries in CD on this disk */\n                           + DWORD /* total number of entries */\n                           + DWORD /* size of CD */\n                           + (long) DWORD /* offset of CD */\n                           ));",
      "info" : "ExpressionStatement[54417-54978]:ExpressionStatement[54430-54991]"
    }, {
      "left" : "writeOut(ZipShort.getBytes(ZIP64_MIN_VERSION));",
      "right" : "writeOut(ZipShort.getBytes(ZIP64_MIN_VERSION));",
      "info" : "ExpressionStatement[55045-55092]:ExpressionStatement[55058-55105]"
    }, {
      "left" : "writeOut(ZipShort.getBytes(ZIP64_MIN_VERSION));",
      "right" : "writeOut(ZipShort.getBytes(ZIP64_MIN_VERSION));",
      "info" : "ExpressionStatement[55101-55148]:ExpressionStatement[55114-55161]"
    }, {
      "left" : "writeOut(LZERO);",
      "right" : "writeOut(LZERO);",
      "info" : "ExpressionStatement[55205-55221]:ExpressionStatement[55218-55234]"
    }, {
      "left" : "writeOut(LZERO);",
      "right" : "writeOut(LZERO);",
      "info" : "ExpressionStatement[55230-55246]:ExpressionStatement[55243-55259]"
    }, {
      "left" : "final byte[] num = ZipEightByteInteger.getBytes(entries.size());",
      "right" : "final byte[] num = ZipEightByteInteger.getBytes(entries.size());",
      "info" : "VariableDeclarationStatement[55285-55349]:VariableDeclarationStatement[55298-55362]"
    }, {
      "left" : "writeOut(num);",
      "right" : "writeOut(num);",
      "info" : "ExpressionStatement[55358-55372]:ExpressionStatement[55371-55385]"
    }, {
      "left" : "writeOut(num);",
      "right" : "writeOut(num);",
      "info" : "ExpressionStatement[55381-55395]:ExpressionStatement[55394-55408]"
    }, {
      "left" : "writeOut(ZipEightByteInteger.getBytes(cdLength));",
      "right" : "writeOut(ZipEightByteInteger.getBytes(cdLength));",
      "info" : "ExpressionStatement[55442-55491]:ExpressionStatement[55455-55504]"
    }, {
      "left" : "writeOut(ZipEightByteInteger.getBytes(cdOffset));",
      "right" : "writeOut(ZipEightByteInteger.getBytes(cdOffset));",
      "info" : "ExpressionStatement[55500-55549]:ExpressionStatement[55513-55562]"
    }, {
      "left" : "writeOut(ZIP64_EOCD_LOC_SIG);",
      "right" : "writeOut(ZIP64_EOCD_LOC_SIG);",
      "info" : "ExpressionStatement[55677-55706]:ExpressionStatement[55690-55719]"
    }, {
      "left" : "writeOut(LZERO);",
      "right" : "writeOut(LZERO);",
      "info" : "ExpressionStatement[55769-55785]:ExpressionStatement[55782-55798]"
    }, {
      "left" : "writeOut(ZipEightByteInteger.getBytes(offset));",
      "right" : "writeOut(ZipEightByteInteger.getBytes(offset));",
      "info" : "ExpressionStatement[55842-55889]:ExpressionStatement[55855-55902]"
    }, {
      "left" : "writeOut(ONE);",
      "right" : "writeOut(ONE);",
      "info" : "ExpressionStatement[55931-55945]:ExpressionStatement[55944-55958]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[56104-56113]:Modifier[56117-56126]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[56114-56119]:Modifier[56127-56132]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[56120-56124]:PrimitiveType[56133-56137]"
    }, {
      "left" : "writeOut",
      "right" : "writeOut",
      "info" : "SimpleName[56125-56133]:SimpleName[56138-56146]"
    }, {
      "left" : "final byte[] data",
      "right" : "final byte[] data",
      "info" : "SingleVariableDeclaration[56134-56151]:SingleVariableDeclaration[56147-56164]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[56160-56171]:SimpleType[56173-56184]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56172-56236]:Block[56185-56249]"
    }, {
      "left" : "streamCompressor.writeOut(data, 0, data.length);",
      "right" : "streamCompressor.writeOut(data, 0, data.length);",
      "info" : "ExpressionStatement[56182-56230]:ExpressionStatement[56195-56243]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[56494-56503]:Modifier[56507-56516]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[56504-56509]:Modifier[56517-56522]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[56510-56514]:PrimitiveType[56523-56527]"
    }, {
      "left" : "writeOut",
      "right" : "writeOut",
      "info" : "SimpleName[56515-56523]:SimpleName[56528-56536]"
    }, {
      "left" : "final byte[] data",
      "right" : "final byte[] data",
      "info" : "SingleVariableDeclaration[56524-56541]:SingleVariableDeclaration[56537-56554]"
    }, {
      "left" : "final int offset",
      "right" : "final int offset",
      "info" : "SingleVariableDeclaration[56543-56559]:SingleVariableDeclaration[56556-56572]"
    }, {
      "left" : "final int length",
      "right" : "final int length",
      "info" : "SingleVariableDeclaration[56561-56577]:SingleVariableDeclaration[56574-56590]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[56598-56609]:SimpleType[56611-56622]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56610-56674]:Block[56623-56687]"
    }, {
      "left" : "streamCompressor.writeOut(data, offset, length);",
      "right" : "streamCompressor.writeOut(data, offset, length);",
      "info" : "ExpressionStatement[56620-56668]:ExpressionStatement[56633-56681]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[56681-56688]:Modifier[56694-56701]"
    }, {
      "left" : "GeneralPurposeBit",
      "right" : "GeneralPurposeBit",
      "info" : "SimpleType[56689-56706]:SimpleType[56702-56719]"
    }, {
      "left" : "getGeneralPurposeBits",
      "right" : "getGeneralPurposeBits",
      "info" : "SimpleName[56707-56728]:SimpleName[56720-56741]"
    }, {
      "left" : "final boolean utfFallback",
      "right" : "final boolean utfFallback",
      "info" : "SingleVariableDeclaration[56729-56754]:SingleVariableDeclaration[56742-56767]"
    }, {
      "left" : "boolean usesDataDescriptor",
      "right" : "boolean usesDataDescriptor",
      "info" : "SingleVariableDeclaration[56756-56782]:SingleVariableDeclaration[56769-56795]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56784-57008]:Block[56797-57021]"
    }, {
      "left" : "final GeneralPurposeBit b = new GeneralPurposeBit();",
      "right" : "final GeneralPurposeBit b = new GeneralPurposeBit();",
      "info" : "VariableDeclarationStatement[56794-56846]:VariableDeclarationStatement[56807-56859]"
    }, {
      "left" : "b.useUTF8ForNames(useUTF8Flag || utfFallback);",
      "right" : "b.useUTF8ForNames(useUTF8Flag || utfFallback);",
      "info" : "ExpressionStatement[56855-56901]:ExpressionStatement[56868-56914]"
    }, {
      "left" : "if (usesDataDescriptor)",
      "right" : "if (usesDataDescriptor)",
      "info" : "IfStatement[56910-56984]:IfStatement[56923-56997]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56934-56984]:Block[56947-56997]"
    }, {
      "left" : "b.useDataDescriptor(true);",
      "right" : "b.useDataDescriptor(true);",
      "info" : "ExpressionStatement[56948-56974]:ExpressionStatement[56961-56987]"
    }, {
      "left" : "return b;",
      "right" : "return b;",
      "info" : "ReturnStatement[56993-57002]:ReturnStatement[57006-57015]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[57014-57021]:Modifier[57027-57034]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[57022-57025]:PrimitiveType[57035-57038]"
    }, {
      "left" : "versionNeededToExtract",
      "right" : "versionNeededToExtract",
      "info" : "SimpleName[57026-57048]:SimpleName[57039-57061]"
    }, {
      "left" : "final int zipMethod",
      "right" : "final int zipMethod",
      "info" : "SingleVariableDeclaration[57049-57068]:SingleVariableDeclaration[57062-57081]"
    }, {
      "left" : "final boolean zip64",
      "right" : "final boolean zip64",
      "info" : "SingleVariableDeclaration[57070-57089]:SingleVariableDeclaration[57083-57102]"
    }, {
      "left" : "final boolean usedDataDescriptor",
      "right" : "final boolean usedDataDescriptor",
      "info" : "SingleVariableDeclaration[57091-57123]:SingleVariableDeclaration[57104-57136]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57125-57349]:Block[57138-57362]"
    }, {
      "left" : "if (zip64)",
      "right" : "if (zip64)",
      "info" : "IfStatement[57135-57195]:IfStatement[57148-57208]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57146-57195]:Block[57159-57208]"
    }, {
      "left" : "return ZIP64_MIN_VERSION;",
      "right" : "return ZIP64_MIN_VERSION;",
      "info" : "ReturnStatement[57160-57185]:ReturnStatement[57173-57198]"
    }, {
      "left" : "if (usedDataDescriptor)",
      "right" : "if (usedDataDescriptor)",
      "info" : "IfStatement[57204-57287]:IfStatement[57217-57300]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57228-57287]:Block[57241-57300]"
    }, {
      "left" : "return DATA_DESCRIPTOR_MIN_VERSION;",
      "right" : "return DATA_DESCRIPTOR_MIN_VERSION;",
      "info" : "ReturnStatement[57242-57277]:ReturnStatement[57255-57290]"
    }, {
      "left" : "return versionNeededToExtractMethod(zipMethod);",
      "right" : "return versionNeededToExtractMethod(zipMethod);",
      "info" : "ReturnStatement[57296-57343]:ReturnStatement[57309-57356]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[57481-57488]:Modifier[57521-57528]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[57489-57492]:PrimitiveType[57529-57532]"
    }, {
      "left" : "versionNeededToExtractMethod",
      "right" : "versionNeededToExtractMethod",
      "info" : "SimpleName[57493-57521]:SimpleName[57533-57561]"
    }, {
      "left" : "int zipMethod",
      "right" : "int zipMethod",
      "info" : "SingleVariableDeclaration[57522-57535]:SingleVariableDeclaration[57562-57575]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57537-57622]:Block[57577-57662]"
    }, {
      "left" : "return zipMethod == DEFLATED ? DEFLATE_MIN_VERSION : INITIAL_VERSION;",
      "right" : "return zipMethod == DEFLATED ? DEFLATE_MIN_VERSION : INITIAL_VERSION;",
      "info" : "ReturnStatement[57547-57616]:ReturnStatement[57587-57656]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[58065-58074]:MarkerAnnotation[58105-58114]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[58079-58085]:Modifier[58119-58125]"
    }, {
      "left" : "ArchiveEntry",
      "right" : "ArchiveEntry",
      "info" : "SimpleType[58086-58098]:SimpleType[58126-58138]"
    }, {
      "left" : "createArchiveEntry",
      "right" : "createArchiveEntry",
      "info" : "SimpleName[58099-58117]:SimpleName[58139-58157]"
    }, {
      "left" : "final File inputFile",
      "right" : "final File inputFile",
      "info" : "SingleVariableDeclaration[58118-58138]:SingleVariableDeclaration[58158-58178]"
    }, {
      "left" : "final String entryName",
      "right" : "final String entryName",
      "info" : "SingleVariableDeclaration[58140-58162]:SingleVariableDeclaration[58180-58202]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[58179-58190]:SimpleType[58219-58230]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58191-58361]:Block[58231-58401]"
    }, {
      "left" : "if (finished)",
      "right" : "if (finished)",
      "info" : "IfStatement[58201-58297]:IfStatement[58241-58337]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58215-58297]:Block[58255-58337]"
    }, {
      "left" : "throw new IOException(\"Stream has already been finished\");",
      "right" : "throw new IOException(\"Stream has already been finished\");",
      "info" : "ThrowStatement[58229-58287]:ThrowStatement[58269-58327]"
    }, {
      "left" : "return new ZipArchiveEntry(inputFile, entryName);",
      "right" : "return new ZipArchiveEntry(inputFile, entryName);",
      "info" : "ReturnStatement[58306-58355]:ReturnStatement[58346-58395]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[58523-58530]:Modifier[58563-58570]"
    }, {
      "left" : "Zip64ExtendedInformationExtraField",
      "right" : "Zip64ExtendedInformationExtraField",
      "info" : "SimpleType[58531-58565]:SimpleType[58571-58605]"
    }, {
      "left" : "getZip64Extra",
      "right" : "getZip64Extra",
      "info" : "SimpleName[58574-58587]:SimpleName[58614-58627]"
    }, {
      "left" : "final ZipArchiveEntry ze",
      "right" : "final ZipArchiveEntry ze",
      "info" : "SingleVariableDeclaration[58588-58612]:SingleVariableDeclaration[58628-58652]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58614-59429]:Block[58654-59469]"
    }, {
      "left" : "if (entry != null)",
      "right" : "if (entry != null)",
      "info" : "IfStatement[58624-58706]:IfStatement[58664-58746]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58643-58706]:Block[58683-58746]"
    }, {
      "left" : "entry.causedUseOfZip64 = !hasUsedZip64;",
      "right" : "entry.causedUseOfZip64 = !hasUsedZip64;",
      "info" : "ExpressionStatement[58657-58696]:ExpressionStatement[58697-58736]"
    }, {
      "left" : "hasUsedZip64 = true;",
      "right" : "hasUsedZip64 = true;",
      "info" : "ExpressionStatement[58715-58735]:ExpressionStatement[58755-58775]"
    }, {
      "left" : "Zip64ExtendedInformationExtraField z64 =\n            (Zip64ExtendedInformationExtraField)\n            ze.getExtraField(Zip64ExtendedInformationExtraField\n                             .HEADER_ID);",
      "right" : "Zip64ExtendedInformationExtraField z64 =\n            (Zip64ExtendedInformationExtraField)\n            ze.getExtraField(Zip64ExtendedInformationExtraField\n                             .HEADER_ID);",
      "info" : "VariableDeclarationStatement[58744-58939]:VariableDeclarationStatement[58784-58979]"
    }, {
      "left" : "if (z64 == null)",
      "right" : "if (z64 == null)",
      "info" : "IfStatement[58948-59286]:IfStatement[58988-59326]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58965-59286]:Block[59005-59326]"
    }, {
      "left" : "z64 = new Zip64ExtendedInformationExtraField();",
      "right" : "z64 = new Zip64ExtendedInformationExtraField();",
      "info" : "ExpressionStatement[59229-59276]:ExpressionStatement[59269-59316]"
    }, {
      "left" : "ze.addAsFirstExtraField(z64);",
      "right" : "ze.addAsFirstExtraField(z64);",
      "info" : "ExpressionStatement[59373-59402]:ExpressionStatement[59413-59442]"
    }, {
      "left" : "return z64;",
      "right" : "return z64;",
      "info" : "ReturnStatement[59412-59423]:ReturnStatement[59452-59463]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[59555-59562]:Modifier[59595-59602]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[59563-59570]:PrimitiveType[59603-59610]"
    }, {
      "left" : "hasZip64Extra",
      "right" : "hasZip64Extra",
      "info" : "SimpleName[59571-59584]:SimpleName[59611-59624]"
    }, {
      "left" : "final ZipArchiveEntry ze",
      "right" : "final ZipArchiveEntry ze",
      "info" : "SingleVariableDeclaration[59585-59609]:SingleVariableDeclaration[59625-59649]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[59611-59750]:Block[59651-59790]"
    }, {
      "left" : "return ze.getExtraField(Zip64ExtendedInformationExtraField\n                                .HEADER_ID)\n            != null;",
      "right" : "return ze.getExtraField(Zip64ExtendedInformationExtraField\n                                .HEADER_ID)\n            != null;",
      "info" : "ReturnStatement[59621-59744]:ReturnStatement[59661-59784]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[59971-59978]:Modifier[60011-60018]"
    }, {
      "left" : "Zip64Mode",
      "right" : "Zip64Mode",
      "info" : "SimpleType[59979-59988]:SimpleType[60019-60028]"
    }, {
      "left" : "getEffectiveZip64Mode",
      "right" : "getEffectiveZip64Mode",
      "info" : "SimpleName[59989-60010]:SimpleName[60029-60050]"
    }, {
      "left" : "final ZipArchiveEntry ze",
      "right" : "final ZipArchiveEntry ze",
      "info" : "SingleVariableDeclaration[60011-60035]:SingleVariableDeclaration[60051-60075]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60037-60293]:Block[60077-60333]"
    }, {
      "left" : "if (zip64Mode != Zip64Mode.AsNeeded\n            || channel != null\n            || ze.getMethod() != DEFLATED\n            || ze.getSize() != ArchiveEntry.SIZE_UNKNOWN)",
      "right" : "if (zip64Mode != Zip64Mode.AsNeeded\n            || channel != null\n            || ze.getMethod() != DEFLATED\n            || ze.getSize() != ArchiveEntry.SIZE_UNKNOWN)",
      "info" : "IfStatement[60047-60255]:IfStatement[60087-60295]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60214-60255]:Block[60254-60295]"
    }, {
      "left" : "return zip64Mode;",
      "right" : "return zip64Mode;",
      "info" : "ReturnStatement[60228-60245]:ReturnStatement[60268-60285]"
    }, {
      "left" : "return Zip64Mode.Never;",
      "right" : "return Zip64Mode.Never;",
      "info" : "ReturnStatement[60264-60287]:ReturnStatement[60304-60327]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[60299-60306]:Modifier[60339-60346]"
    }, {
      "left" : "ZipEncoding",
      "right" : "ZipEncoding",
      "info" : "SimpleType[60307-60318]:SimpleType[60347-60358]"
    }, {
      "left" : "getEntryEncoding",
      "right" : "getEntryEncoding",
      "info" : "SimpleName[60319-60335]:SimpleName[60359-60375]"
    }, {
      "left" : "final ZipArchiveEntry ze",
      "right" : "final ZipArchiveEntry ze",
      "info" : "SingleVariableDeclaration[60336-60360]:SingleVariableDeclaration[60376-60400]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60362-60549]:Block[60402-60589]"
    }, {
      "left" : "final boolean encodable = zipEncoding.canEncode(ze.getName());",
      "right" : "final boolean encodable = zipEncoding.canEncode(ze.getName());",
      "info" : "VariableDeclarationStatement[60372-60434]:VariableDeclarationStatement[60412-60474]"
    }, {
      "left" : "return !encodable && fallbackToUTF8\n            ? ZipEncodingHelper.UTF8_ZIP_ENCODING : zipEncoding;",
      "right" : "return !encodable && fallbackToUTF8\n            ? ZipEncodingHelper.UTF8_ZIP_ENCODING : zipEncoding;",
      "info" : "ReturnStatement[60443-60543]:ReturnStatement[60483-60583]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[60555-60562]:Modifier[60595-60602]"
    }, {
      "left" : "ByteBuffer",
      "right" : "ByteBuffer",
      "info" : "SimpleType[60563-60573]:SimpleType[60603-60613]"
    }, {
      "left" : "getName",
      "right" : "getName",
      "info" : "SimpleName[60574-60581]:SimpleName[60614-60621]"
    }, {
      "left" : "final ZipArchiveEntry ze",
      "right" : "final ZipArchiveEntry ze",
      "info" : "SingleVariableDeclaration[60582-60606]:SingleVariableDeclaration[60622-60646]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[60615-60626]:SimpleType[60655-60666]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60627-60692]:Block[60667-60732]"
    }, {
      "left" : "return getEntryEncoding(ze).encode(ze.getName());",
      "right" : "return getEntryEncoding(ze).encode(ze.getName());",
      "info" : "ReturnStatement[60637-60686]:ReturnStatement[60677-60726]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[60980-60984]:PrimitiveType[61020-61024]"
    }, {
      "left" : "destroy",
      "right" : "destroy",
      "info" : "SimpleName[60985-60992]:SimpleName[61025-61032]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[61002-61013]:SimpleType[61042-61053]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61014-61153]:Block[61054-61193]"
    }, {
      "left" : "if (channel != null)",
      "right" : "if (channel != null)",
      "info" : "IfStatement[61024-61085]:IfStatement[61064-61125]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61045-61085]:Block[61085-61125]"
    }, {
      "left" : "channel.close();",
      "right" : "channel.close();",
      "info" : "ExpressionStatement[61059-61075]:ExpressionStatement[61099-61115]"
    }, {
      "left" : "if (out != null)",
      "right" : "if (out != null)",
      "info" : "IfStatement[61094-61147]:IfStatement[61134-61187]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61111-61147]:Block[61151-61187]"
    }, {
      "left" : "out.close();",
      "right" : "out.close();",
      "info" : "ExpressionStatement[61125-61137]:ExpressionStatement[61165-61177]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[61267-61273]:Modifier[61307-61313]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[61274-61280]:Modifier[61314-61320]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[61281-61286]:Modifier[61321-61326]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[61287-61292]:TYPE_DECLARATION_KIND[61327-61332]"
    }, {
      "left" : "UnicodeExtraFieldPolicy",
      "right" : "UnicodeExtraFieldPolicy",
      "info" : "SimpleName[61293-61316]:SimpleName[61333-61356]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[61971-61978]:Modifier[62011-62018]"
    }, {
      "left" : "UnicodeExtraFieldPolicy",
      "right" : "UnicodeExtraFieldPolicy",
      "info" : "SimpleName[61979-62002]:SimpleName[62019-62042]"
    }, {
      "left" : "final String n",
      "right" : "final String n",
      "info" : "SingleVariableDeclaration[62003-62017]:SingleVariableDeclaration[62043-62057]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62019-62052]:Block[62059-62092]"
    }, {
      "left" : "name = n;",
      "right" : "name = n;",
      "info" : "ExpressionStatement[62033-62042]:ExpressionStatement[62073-62082]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[62061-62070]:MarkerAnnotation[62101-62110]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[62079-62085]:Modifier[62119-62125]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[62086-62092]:SimpleType[62126-62132]"
    }, {
      "left" : "toString",
      "right" : "toString",
      "info" : "SimpleName[62093-62101]:SimpleName[62133-62141]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62104-62140]:Block[62144-62180]"
    }, {
      "left" : "return name;",
      "right" : "return name;",
      "info" : "ReturnStatement[62118-62130]:ReturnStatement[62158-62170]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[62262-62269]:Modifier[62302-62309]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[62270-62276]:Modifier[62310-62316]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[62277-62282]:Modifier[62317-62322]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[62283-62288]:TYPE_DECLARATION_KIND[62323-62328]"
    }, {
      "left" : "CurrentEntry",
      "right" : "CurrentEntry",
      "info" : "SimpleName[62289-62301]:SimpleName[62329-62341]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[62312-62319]:Modifier[62352-62359]"
    }, {
      "left" : "CurrentEntry",
      "right" : "CurrentEntry",
      "info" : "SimpleName[62320-62332]:SimpleName[62360-62372]"
    }, {
      "left" : "final ZipArchiveEntry entry",
      "right" : "final ZipArchiveEntry entry",
      "info" : "SingleVariableDeclaration[62333-62360]:SingleVariableDeclaration[62373-62400]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62362-62405]:Block[62402-62445]"
    }, {
      "left" : "this.entry = entry;",
      "right" : "this.entry = entry;",
      "info" : "ExpressionStatement[62376-62395]:ExpressionStatement[62416-62435]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[63468-63475]:Modifier[63508-63515]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[63476-63482]:Modifier[63516-63522]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[63483-63488]:Modifier[63523-63528]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[63489-63494]:TYPE_DECLARATION_KIND[63529-63534]"
    }, {
      "left" : "EntryMetaData",
      "right" : "EntryMetaData",
      "info" : "SimpleName[63495-63508]:SimpleName[63535-63548]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[63604-63611]:Modifier[63644-63651]"
    }, {
      "left" : "EntryMetaData",
      "right" : "EntryMetaData",
      "info" : "SimpleName[63612-63625]:SimpleName[63652-63665]"
    }, {
      "left" : "long offset",
      "right" : "long offset",
      "info" : "SingleVariableDeclaration[63626-63637]:SingleVariableDeclaration[63666-63677]"
    }, {
      "left" : "boolean usesDataDescriptor",
      "right" : "boolean usesDataDescriptor",
      "info" : "SingleVariableDeclaration[63639-63665]:SingleVariableDeclaration[63679-63705]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63667-63770]:Block[63707-63810]"
    }, {
      "left" : "this.offset = offset;",
      "right" : "this.offset = offset;",
      "info" : "ExpressionStatement[63681-63702]:ExpressionStatement[63721-63742]"
    }, {
      "left" : "this.usesDataDescriptor = usesDataDescriptor;",
      "right" : "this.usesDataDescriptor = usesDataDescriptor;",
      "info" : "ExpressionStatement[63715-63760]:ExpressionStatement[63755-63800]"
    } ]
  },
  "interFileMappings" : { }
}