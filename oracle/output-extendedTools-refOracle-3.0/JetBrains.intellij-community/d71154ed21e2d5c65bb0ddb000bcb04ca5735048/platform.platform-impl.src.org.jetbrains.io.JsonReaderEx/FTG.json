{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "JsonReaderEx",
      "right" : "JsonReaderEx",
      "info" : "TypeDeclaration[931-42059]:TypeDeclaration[931-42148]"
    }, {
      "left" : "private static final char[] NON_EXECUTE_PREFIX = \")]}'\\n\".toCharArray();",
      "right" : "private static final char[] NON_EXECUTE_PREFIX = \")]}'\\n\".toCharArray();",
      "info" : "FieldDeclaration[988-1117]:FieldDeclaration[988-1117]"
    }, {
      "left" : "private static final long MIN_INCOMPLETE_INTEGER = Long.MIN_VALUE / 10;",
      "right" : "private static final long MIN_INCOMPLETE_INTEGER = Long.MIN_VALUE / 10;",
      "info" : "FieldDeclaration[1120-1191]:FieldDeclaration[1120-1191]"
    }, {
      "left" : "private static final int PEEKED_NONE = 0;",
      "right" : "private static final int PEEKED_NONE = 0;",
      "info" : "FieldDeclaration[1195-1236]:FieldDeclaration[1195-1236]"
    }, {
      "left" : "private static final int PEEKED_BEGIN_OBJECT = 1;",
      "right" : "private static final int PEEKED_BEGIN_OBJECT = 1;",
      "info" : "FieldDeclaration[1239-1288]:FieldDeclaration[1239-1288]"
    }, {
      "left" : "private static final int PEEKED_END_OBJECT = 2;",
      "right" : "private static final int PEEKED_END_OBJECT = 2;",
      "info" : "FieldDeclaration[1291-1338]:FieldDeclaration[1291-1338]"
    }, {
      "left" : "private static final int PEEKED_BEGIN_ARRAY = 3;",
      "right" : "private static final int PEEKED_BEGIN_ARRAY = 3;",
      "info" : "FieldDeclaration[1341-1389]:FieldDeclaration[1341-1389]"
    }, {
      "left" : "private static final int PEEKED_END_ARRAY = 4;",
      "right" : "private static final int PEEKED_END_ARRAY = 4;",
      "info" : "FieldDeclaration[1392-1438]:FieldDeclaration[1392-1438]"
    }, {
      "left" : "private static final int PEEKED_TRUE = 5;",
      "right" : "private static final int PEEKED_TRUE = 5;",
      "info" : "FieldDeclaration[1441-1482]:FieldDeclaration[1441-1482]"
    }, {
      "left" : "private static final int PEEKED_FALSE = 6;",
      "right" : "private static final int PEEKED_FALSE = 6;",
      "info" : "FieldDeclaration[1485-1527]:FieldDeclaration[1485-1527]"
    }, {
      "left" : "private static final int PEEKED_NULL = 7;",
      "right" : "private static final int PEEKED_NULL = 7;",
      "info" : "FieldDeclaration[1530-1571]:FieldDeclaration[1530-1571]"
    }, {
      "left" : "private static final int PEEKED_SINGLE_QUOTED = 8;",
      "right" : "private static final int PEEKED_SINGLE_QUOTED = 8;",
      "info" : "FieldDeclaration[1574-1624]:FieldDeclaration[1574-1624]"
    }, {
      "left" : "private static final int PEEKED_DOUBLE_QUOTED = 9;",
      "right" : "private static final int PEEKED_DOUBLE_QUOTED = 9;",
      "info" : "FieldDeclaration[1627-1677]:FieldDeclaration[1627-1677]"
    }, {
      "left" : "private static final int PEEKED_UNQUOTED = 10;",
      "right" : "private static final int PEEKED_UNQUOTED = 10;",
      "info" : "FieldDeclaration[1680-1726]:FieldDeclaration[1680-1726]"
    }, {
      "left" : "private static final int PEEKED_BUFFERED = 11;",
      "right" : "private static final int PEEKED_BUFFERED = 11;",
      "info" : "FieldDeclaration[1729-1851]:FieldDeclaration[1729-1851]"
    }, {
      "left" : "private static final int PEEKED_SINGLE_QUOTED_NAME = 12;",
      "right" : "private static final int PEEKED_SINGLE_QUOTED_NAME = 12;",
      "info" : "FieldDeclaration[1854-1910]:FieldDeclaration[1854-1910]"
    }, {
      "left" : "private static final int PEEKED_DOUBLE_QUOTED_NAME = 13;",
      "right" : "private static final int PEEKED_DOUBLE_QUOTED_NAME = 13;",
      "info" : "FieldDeclaration[1913-1969]:FieldDeclaration[1913-1969]"
    }, {
      "left" : "private static final int PEEKED_UNQUOTED_NAME = 14;",
      "right" : "private static final int PEEKED_UNQUOTED_NAME = 14;",
      "info" : "FieldDeclaration[1972-2023]:FieldDeclaration[1972-2023]"
    }, {
      "left" : "private static final int PEEKED_LONG = 15;",
      "right" : "private static final int PEEKED_LONG = 15;",
      "info" : "FieldDeclaration[2026-2143]:FieldDeclaration[2026-2143]"
    }, {
      "left" : "private static final int PEEKED_NUMBER = 16;",
      "right" : "private static final int PEEKED_NUMBER = 16;",
      "info" : "FieldDeclaration[2146-2190]:FieldDeclaration[2146-2190]"
    }, {
      "left" : "private static final int PEEKED_EOF = 17;",
      "right" : "private static final int PEEKED_EOF = 17;",
      "info" : "FieldDeclaration[2193-2234]:FieldDeclaration[2193-2234]"
    }, {
      "left" : "private static final int NUMBER_CHAR_NONE = 0;",
      "right" : "private static final int NUMBER_CHAR_NONE = 0;",
      "info" : "FieldDeclaration[2281-2327]:FieldDeclaration[2281-2327]"
    }, {
      "left" : "private static final int NUMBER_CHAR_SIGN = 1;",
      "right" : "private static final int NUMBER_CHAR_SIGN = 1;",
      "info" : "FieldDeclaration[2330-2376]:FieldDeclaration[2330-2376]"
    }, {
      "left" : "private static final int NUMBER_CHAR_DIGIT = 2;",
      "right" : "private static final int NUMBER_CHAR_DIGIT = 2;",
      "info" : "FieldDeclaration[2379-2426]:FieldDeclaration[2379-2426]"
    }, {
      "left" : "private static final int NUMBER_CHAR_DECIMAL = 3;",
      "right" : "private static final int NUMBER_CHAR_DECIMAL = 3;",
      "info" : "FieldDeclaration[2429-2478]:FieldDeclaration[2429-2478]"
    }, {
      "left" : "private static final int NUMBER_CHAR_FRACTION_DIGIT = 4;",
      "right" : "private static final int NUMBER_CHAR_FRACTION_DIGIT = 4;",
      "info" : "FieldDeclaration[2481-2537]:FieldDeclaration[2481-2537]"
    }, {
      "left" : "private static final int NUMBER_CHAR_EXP_E = 5;",
      "right" : "private static final int NUMBER_CHAR_EXP_E = 5;",
      "info" : "FieldDeclaration[2540-2587]:FieldDeclaration[2540-2587]"
    }, {
      "left" : "private static final int NUMBER_CHAR_EXP_SIGN = 6;",
      "right" : "private static final int NUMBER_CHAR_EXP_SIGN = 6;",
      "info" : "FieldDeclaration[2590-2640]:FieldDeclaration[2590-2640]"
    }, {
      "left" : "private static final int NUMBER_CHAR_EXP_DIGIT = 7;",
      "right" : "private static final int NUMBER_CHAR_EXP_DIGIT = 7;",
      "info" : "FieldDeclaration[2643-2694]:FieldDeclaration[2643-2694]"
    }, {
      "left" : "private final CharSequence in;",
      "right" : "private final CharSequence in;",
      "info" : "FieldDeclaration[2698-2728]:FieldDeclaration[2698-2728]"
    }, {
      "left" : "private boolean lenient = false;",
      "right" : "private boolean lenient = false;",
      "info" : "FieldDeclaration[2732-2812]:FieldDeclaration[2732-2812]"
    }, {
      "left" : "private int position;",
      "right" : "private int position;",
      "info" : "FieldDeclaration[2816-2837]:FieldDeclaration[2816-2837]"
    }, {
      "left" : "private final int limit;",
      "right" : "private final int limit;",
      "info" : "FieldDeclaration[2840-2864]:FieldDeclaration[2840-2864]"
    }, {
      "left" : "private int peeked = PEEKED_NONE;",
      "right" : "private int peeked = PEEKED_NONE;",
      "info" : "FieldDeclaration[2868-2901]:FieldDeclaration[2868-2901]"
    }, {
      "left" : "private long peekedLong;",
      "right" : "private long peekedLong;",
      "info" : "FieldDeclaration[2905-3076]:FieldDeclaration[2905-3076]"
    }, {
      "left" : "private int peekedNumberLength;",
      "right" : "private int peekedNumberLength;",
      "info" : "FieldDeclaration[3080-3234]:FieldDeclaration[3080-3234]"
    }, {
      "left" : "private String peekedString;",
      "right" : "private String peekedString;",
      "info" : "FieldDeclaration[3238-3450]:FieldDeclaration[3238-3450]"
    }, {
      "left" : "private int[] stack;",
      "right" : "private int[] stack;",
      "info" : "FieldDeclaration[3546-3566]:FieldDeclaration[3546-3566]"
    }, {
      "left" : "private int stackSize = 0;",
      "right" : "private int stackSize = 0;",
      "info" : "FieldDeclaration[3569-3595]:FieldDeclaration[3569-3595]"
    }, {
      "left" : "private StringBuilder builder;",
      "right" : "private StringBuilder builder;",
      "info" : "FieldDeclaration[3599-3629]:FieldDeclaration[3599-3629]"
    }, {
      "left" : "public JsonReaderEx(@NotNull CharSequence in)",
      "right" : "public JsonReaderEx(@NotNull CharSequence in)",
      "info" : "MethodDeclaration[3633-3791]:MethodDeclaration[3633-3791]"
    }, {
      "left" : "public JsonReaderEx(@NotNull CharSequence in, int start)",
      "right" : "public JsonReaderEx(@NotNull CharSequence in, int start)",
      "info" : "MethodDeclaration[3795-3943]:MethodDeclaration[3795-3943]"
    }, {
      "left" : "private JsonReaderEx(@NotNull CharSequence in, int start, @NotNull int[] stack)",
      "right" : "private JsonReaderEx(@NotNull CharSequence in, int start, @NotNull int[] stack)",
      "info" : "MethodDeclaration[3947-4121]:MethodDeclaration[3947-4121]"
    }, {
      "left" : "CharSequenceBackedByChars",
      "right" : "CharSequenceBackedByChars",
      "info" : "TypeDeclaration[4215-4764]:TypeDeclaration[4215-4853]"
    }, {
      "left" : "public CharSequenceBackedByChars(@NotNull CharBuffer charBuffer)",
      "right" : "public CharSequenceBackedByChars(@NotNull CharBuffer charBuffer)",
      "info" : "MethodDeclaration[4303-4457]:MethodDeclaration[4303-4457]"
    }, {
      "left" : "public CharSequenceBackedByChars(@NotNull char[] chars, int start, int end)",
      "right" : "public CharSequenceBackedByChars(@NotNull char[] chars, int start, int end)",
      "info" : "MethodDeclaration[4463-4578]:MethodDeclaration[4463-4578]"
    }, {
      "left" : "public CharSequence subSequence(int start, int end)",
      "right" : "public CharSequence subSequence(int start, int end)",
      "info" : "MethodDeclaration[4584-4760]:MethodDeclaration[4673-4849]"
    }, {
      "left" : "JsonScope",
      "right" : "JsonScope",
      "info" : "TypeDeclaration[4768-5921]:TypeDeclaration[4857-6010]"
    }, {
      "left" : "static final int EMPTY_ARRAY = 1;",
      "right" : "static final int EMPTY_ARRAY = 1;",
      "info" : "FieldDeclaration[4811-4956]:FieldDeclaration[4900-5045]"
    }, {
      "left" : "static final int NONEMPTY_ARRAY = 2;",
      "right" : "static final int NONEMPTY_ARRAY = 2;",
      "info" : "FieldDeclaration[4962-5114]:FieldDeclaration[5051-5203]"
    }, {
      "left" : "static final int EMPTY_OBJECT = 3;",
      "right" : "static final int EMPTY_OBJECT = 3;",
      "info" : "FieldDeclaration[5120-5275]:FieldDeclaration[5209-5364]"
    }, {
      "left" : "static final int DANGLING_NAME = 4;",
      "right" : "static final int DANGLING_NAME = 4;",
      "info" : "FieldDeclaration[5281-5426]:FieldDeclaration[5370-5515]"
    }, {
      "left" : "static final int NONEMPTY_OBJECT = 5;",
      "right" : "static final int NONEMPTY_OBJECT = 5;",
      "info" : "FieldDeclaration[5432-5597]:FieldDeclaration[5521-5686]"
    }, {
      "left" : "static final int EMPTY_DOCUMENT = 6;",
      "right" : "static final int EMPTY_DOCUMENT = 6;",
      "info" : "FieldDeclaration[5603-5699]:FieldDeclaration[5692-5788]"
    }, {
      "left" : "static final int NONEMPTY_DOCUMENT = 7;",
      "right" : "static final int NONEMPTY_DOCUMENT = 7;",
      "info" : "FieldDeclaration[5705-5806]:FieldDeclaration[5794-5895]"
    }, {
      "left" : "static final int CLOSED = 8;",
      "right" : "static final int CLOSED = 8;",
      "info" : "FieldDeclaration[5812-5917]:FieldDeclaration[5901-6006]"
    }, {
      "left" : "public JsonReaderEx subReader()",
      "right" : "public JsonReaderEx subReader()",
      "info" : "MethodDeclaration[5925-6670]:MethodDeclaration[6014-6759]"
    }, {
      "left" : "public final void setLenient(boolean lenient)",
      "right" : "public final void setLenient(boolean lenient)",
      "info" : "MethodDeclaration[6674-6753]:MethodDeclaration[6763-6842]"
    }, {
      "left" : "public final JsonReaderEx lenient(boolean lenient)",
      "right" : "public final JsonReaderEx lenient(boolean lenient)",
      "info" : "MethodDeclaration[6757-6858]:MethodDeclaration[6846-6947]"
    }, {
      "left" : "public final boolean isLenient()",
      "right" : "public final boolean isLenient()",
      "info" : "MethodDeclaration[6862-6961]:MethodDeclaration[6951-7050]"
    }, {
      "left" : "public void beginArray()",
      "right" : "public void beginArray()",
      "info" : "MethodDeclaration[6965-7382]:MethodDeclaration[7054-7471]"
    }, {
      "left" : "public void endArray()",
      "right" : "public void endArray()",
      "info" : "MethodDeclaration[7386-7781]:MethodDeclaration[7475-7870]"
    }, {
      "left" : "public JsonReaderEx beginObject()",
      "right" : "public JsonReaderEx beginObject()",
      "info" : "MethodDeclaration[7785-8232]:MethodDeclaration[7874-8321]"
    }, {
      "left" : "public void endObject()",
      "right" : "public void endObject()",
      "info" : "MethodDeclaration[8236-8644]:MethodDeclaration[8325-8733]"
    }, {
      "left" : "public boolean hasNext()",
      "right" : "public boolean hasNext()",
      "info" : "MethodDeclaration[8648-8894]:MethodDeclaration[8737-8983]"
    }, {
      "left" : "public JsonToken peek()",
      "right" : "public JsonToken peek()",
      "info" : "MethodDeclaration[8898-10000]:MethodDeclaration[8987-10089]"
    }, {
      "left" : "private int doPeek()",
      "right" : "private int doPeek()",
      "info" : "MethodDeclaration[10004-14404]:MethodDeclaration[10093-14493]"
    }, {
      "left" : "private int peekKeyword()",
      "right" : "private int peekKeyword()",
      "info" : "MethodDeclaration[14408-15673]:MethodDeclaration[14497-15762]"
    }, {
      "left" : "private int peekNumber()",
      "right" : "private int peekNumber()",
      "info" : "MethodDeclaration[15677-18916]:MethodDeclaration[15766-19005]"
    }, {
      "left" : "private void consumeNonExecutePrefix()",
      "right" : "private void consumeNonExecutePrefix()",
      "info" : "MethodDeclaration[18920-19457]:MethodDeclaration[19009-19546]"
    }, {
      "left" : "private boolean isLiteral(char c)",
      "right" : "private boolean isLiteral(char c)",
      "info" : "MethodDeclaration[19461-19882]:MethodDeclaration[19550-19971]"
    }, {
      "left" : "public String nextName()",
      "right" : "public String nextName()",
      "info" : "MethodDeclaration[19886-20169]:MethodDeclaration[19975-20258]"
    }, {
      "left" : "public String nextNameOrNull()",
      "right" : "public String nextNameOrNull()",
      "info" : "MethodDeclaration[20173-20793]:MethodDeclaration[20262-20882]"
    }, {
      "left" : "public CharSequence nextNameAsCharSequence()",
      "right" : "public CharSequence nextNameAsCharSequence()",
      "info" : "MethodDeclaration[20797-20882]:MethodDeclaration[20886-20971]"
    }, {
      "left" : "MyCharSequence",
      "right" : "MyCharSequence",
      "info" : "TypeDeclaration[20886-22180]:TypeDeclaration[20975-22269]"
    }, {
      "left" : "private final CharSequence in;",
      "right" : "private final CharSequence in;",
      "info" : "FieldDeclaration[20999-21029]:FieldDeclaration[21088-21118]"
    }, {
      "left" : "private final int offset;",
      "right" : "private final int offset;",
      "info" : "FieldDeclaration[21034-21059]:FieldDeclaration[21123-21148]"
    }, {
      "left" : "private final int length;",
      "right" : "private final int length;",
      "info" : "FieldDeclaration[21064-21089]:FieldDeclaration[21153-21178]"
    }, {
      "left" : "public MyCharSequence(CharSequence in, int offset, int length)",
      "right" : "public MyCharSequence(CharSequence in, int offset, int length)",
      "info" : "MethodDeclaration[21095-21241]:MethodDeclaration[21184-21330]"
    }, {
      "left" : "public int length()",
      "right" : "public int length()",
      "info" : "MethodDeclaration[21247-21309]:MethodDeclaration[21336-21398]"
    }, {
      "left" : "public char charAt(int index)",
      "right" : "public char charAt(int index)",
      "info" : "MethodDeclaration[21315-21406]:MethodDeclaration[21404-21495]"
    }, {
      "left" : "public CharSequence subSequence(int start, int end)",
      "right" : "public CharSequence subSequence(int start, int end)",
      "info" : "MethodDeclaration[21412-21657]:MethodDeclaration[21501-21746]"
    }, {
      "left" : "public String toString()",
      "right" : "public String toString()",
      "info" : "MethodDeclaration[21663-21783]:MethodDeclaration[21752-21872]"
    }, {
      "left" : "public boolean equals(Object object)",
      "right" : "public boolean equals(Object object)",
      "info" : "MethodDeclaration[21789-22176]:MethodDeclaration[21878-22265]"
    }, {
      "left" : "public String nextAsString()",
      "right" : "public String nextAsString()",
      "info" : "MethodDeclaration[22184-22279]:MethodDeclaration[22273-22368]"
    }, {
      "left" : "public String nextNullableString()",
      "right" : "public String nextNullableString()",
      "info" : "MethodDeclaration[22283-22446]:MethodDeclaration[22372-22535]"
    }, {
      "left" : "public String nextString()",
      "right" : "public String nextString()",
      "info" : "MethodDeclaration[22450-22512]:MethodDeclaration[22539-22601]"
    }, {
      "left" : "public String nextString(boolean anyPrimitiveAsString)",
      "right" : "public String nextString(boolean anyPrimitiveAsString)",
      "info" : "MethodDeclaration[22516-23946]:MethodDeclaration[22605-24035]"
    }, {
      "left" : "public boolean nextBoolean()",
      "right" : "public boolean nextBoolean()",
      "info" : "MethodDeclaration[23950-24515]:MethodDeclaration[24039-24604]"
    }, {
      "left" : "public void nextNull()",
      "right" : "public void nextNull()",
      "info" : "MethodDeclaration[24519-24979]:MethodDeclaration[24608-25068]"
    }, {
      "left" : "public double nextDouble()",
      "right" : "public double nextDouble()",
      "info" : "MethodDeclaration[24983-26493]:MethodDeclaration[25072-26582]"
    }, {
      "left" : "public long nextLong()",
      "right" : "public long nextLong()",
      "info" : "MethodDeclaration[26497-28348]:MethodDeclaration[26586-28437]"
    }, {
      "left" : "private String nextQuotedValue(char quote)",
      "right" : "private String nextQuotedValue(char quote)",
      "info" : "MethodDeclaration[28352-30032]:MethodDeclaration[28441-30121]"
    }, {
      "left" : "private String nextUnquotedValue()",
      "right" : "private String nextUnquotedValue()",
      "info" : "MethodDeclaration[30036-30730]:MethodDeclaration[30125-30819]"
    }, {
      "left" : "private void skipQuotedValue(char quote)",
      "right" : "private void skipQuotedValue(char quote)",
      "info" : "MethodDeclaration[30734-31435]:MethodDeclaration[30823-31524]"
    }, {
      "left" : "private void skipUnquotedValue()",
      "right" : "private void skipUnquotedValue()",
      "info" : "MethodDeclaration[31439-31967]:MethodDeclaration[31528-32056]"
    }, {
      "left" : "public int nextInt()",
      "right" : "public int nextInt()",
      "info" : "MethodDeclaration[31971-34134]:MethodDeclaration[32060-34223]"
    }, {
      "left" : "public void close()",
      "right" : "public void close()",
      "info" : "MethodDeclaration[34138-34337]:MethodDeclaration[34227-34426]"
    }, {
      "left" : "public void skipValue()",
      "right" : "public void skipValue()",
      "info" : "MethodDeclaration[34341-35504]:MethodDeclaration[34430-35593]"
    }, {
      "left" : "public void skipValues()",
      "right" : "public void skipValues()",
      "info" : "MethodDeclaration[35508-35587]:MethodDeclaration[35597-35676]"
    }, {
      "left" : "private void push(int newTop)",
      "right" : "private void push(int newTop)",
      "info" : "MethodDeclaration[35591-35831]:MethodDeclaration[35680-35920]"
    }, {
      "left" : "private int getLineNumber()",
      "right" : "private int getLineNumber()",
      "info" : "MethodDeclaration[35835-36014]:MethodDeclaration[35924-36103]"
    }, {
      "left" : "private int getColumnNumber()",
      "right" : "private int getColumnNumber()",
      "info" : "MethodDeclaration[36018-36240]:MethodDeclaration[36107-36329]"
    }, {
      "left" : "private int nextNonWhitespace(boolean throwOnEof)",
      "right" : "private int nextNonWhitespace(boolean throwOnEof)",
      "info" : "MethodDeclaration[36244-38924]:MethodDeclaration[36333-39013]"
    }, {
      "left" : "private void checkLenient()",
      "right" : "private void checkLenient()",
      "info" : "MethodDeclaration[38928-39079]:MethodDeclaration[39017-39168]"
    }, {
      "left" : "private void skipToEndOfLine()",
      "right" : "private void skipToEndOfLine()",
      "info" : "MethodDeclaration[39083-39434]:MethodDeclaration[39172-39523]"
    }, {
      "left" : "private boolean skipTo(String toFind)",
      "right" : "private boolean skipTo(String toFind)",
      "info" : "MethodDeclaration[39438-39872]:MethodDeclaration[39527-39961]"
    }, {
      "left" : "public String toString()",
      "right" : "public String toString()",
      "info" : "MethodDeclaration[39876-40022]:MethodDeclaration[39965-40111]"
    }, {
      "left" : "private char readEscapeCharacter()",
      "right" : "private char readEscapeCharacter()",
      "info" : "MethodDeclaration[40026-41759]:MethodDeclaration[40115-41848]"
    }, {
      "left" : "private JsonParseException createParseError(String message)",
      "right" : "private JsonParseException createParseError(String message)",
      "info" : "MethodDeclaration[41763-42057]:MethodDeclaration[41852-42146]"
    } ],
    "mappings" : [
 {
      "left" : "Closeable",
      "right" : "Closeable",
      "info" : "SimpleType[974-983]:SimpleType[974-983]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[3723-3729]:Modifier[3723-3729]"
    }, {
      "left" : "JsonReaderEx",
      "right" : "JsonReaderEx",
      "info" : "SimpleName[3730-3742]:SimpleName[3730-3742]"
    }, {
      "left" : "@NotNull CharSequence in",
      "right" : "@NotNull CharSequence in",
      "info" : "SingleVariableDeclaration[3743-3767]:SingleVariableDeclaration[3743-3767]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3769-3791]:Block[3769-3791]"
    }, {
      "left" : "this(in, 0);",
      "right" : "this(in, 0);",
      "info" : "ConstructorInvocation[3775-3787]:ConstructorInvocation[3775-3787]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[3795-3801]:Modifier[3795-3801]"
    }, {
      "left" : "JsonReaderEx",
      "right" : "JsonReaderEx",
      "info" : "SimpleName[3802-3814]:SimpleName[3802-3814]"
    }, {
      "left" : "@NotNull CharSequence in",
      "right" : "@NotNull CharSequence in",
      "info" : "SingleVariableDeclaration[3815-3839]:SingleVariableDeclaration[3815-3839]"
    }, {
      "left" : "int start",
      "right" : "int start",
      "info" : "SingleVariableDeclaration[3841-3850]:SingleVariableDeclaration[3841-3850]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3852-3943]:Block[3852-3943]"
    }, {
      "left" : "this(in, start, new int[32]);",
      "right" : "this(in, start, new int[32]);",
      "info" : "ConstructorInvocation[3858-3887]:ConstructorInvocation[3858-3887]"
    }, {
      "left" : "stack[stackSize++] = JsonScope.EMPTY_DOCUMENT;",
      "right" : "stack[stackSize++] = JsonScope.EMPTY_DOCUMENT;",
      "info" : "ExpressionStatement[3893-3939]:ExpressionStatement[3893-3939]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[3947-3954]:Modifier[3947-3954]"
    }, {
      "left" : "JsonReaderEx",
      "right" : "JsonReaderEx",
      "info" : "SimpleName[3955-3967]:SimpleName[3955-3967]"
    }, {
      "left" : "@NotNull CharSequence in",
      "right" : "@NotNull CharSequence in",
      "info" : "SingleVariableDeclaration[3968-3992]:SingleVariableDeclaration[3968-3992]"
    }, {
      "left" : "int start",
      "right" : "int start",
      "info" : "SingleVariableDeclaration[3994-4003]:SingleVariableDeclaration[3994-4003]"
    }, {
      "left" : "@NotNull int[] stack",
      "right" : "@NotNull int[] stack",
      "info" : "SingleVariableDeclaration[4005-4025]:SingleVariableDeclaration[4005-4025]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4027-4121]:Block[4027-4121]"
    }, {
      "left" : "this.in = in;",
      "right" : "this.in = in;",
      "info" : "ExpressionStatement[4033-4046]:ExpressionStatement[4033-4046]"
    }, {
      "left" : "position = start;",
      "right" : "position = start;",
      "info" : "ExpressionStatement[4051-4068]:ExpressionStatement[4051-4068]"
    }, {
      "left" : "limit = in.length();",
      "right" : "limit = in.length();",
      "info" : "ExpressionStatement[4073-4093]:ExpressionStatement[4073-4093]"
    }, {
      "left" : "this.stack = stack;",
      "right" : "this.stack = stack;",
      "info" : "ExpressionStatement[4098-4117]:ExpressionStatement[4098-4117]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[4215-4221]:Modifier[4215-4221]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[4222-4228]:Modifier[4222-4228]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[4229-4234]:Modifier[4229-4234]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[4235-4240]:TYPE_DECLARATION_KIND[4235-4240]"
    }, {
      "left" : "CharSequenceBackedByChars",
      "right" : "CharSequenceBackedByChars",
      "info" : "SimpleName[4241-4266]:SimpleName[4241-4266]"
    }, {
      "left" : "CharArrayCharSequence",
      "right" : "CharArrayCharSequence",
      "info" : "SimpleType[4275-4296]:SimpleType[4275-4296]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[4303-4309]:Modifier[4303-4309]"
    }, {
      "left" : "CharSequenceBackedByChars",
      "right" : "CharSequenceBackedByChars",
      "info" : "SimpleName[4310-4335]:SimpleName[4310-4335]"
    }, {
      "left" : "@NotNull CharBuffer charBuffer",
      "right" : "@NotNull CharBuffer charBuffer",
      "info" : "SingleVariableDeclaration[4336-4366]:SingleVariableDeclaration[4336-4366]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4368-4457]:Block[4368-4457]"
    }, {
      "left" : "super(charBuffer.array(), charBuffer.arrayOffset(), charBuffer.position());",
      "right" : "super(charBuffer.array(), charBuffer.arrayOffset(), charBuffer.position());",
      "info" : "SuperConstructorInvocation[4376-4451]:SuperConstructorInvocation[4376-4451]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[4463-4469]:Modifier[4463-4469]"
    }, {
      "left" : "CharSequenceBackedByChars",
      "right" : "CharSequenceBackedByChars",
      "info" : "SimpleName[4470-4495]:SimpleName[4470-4495]"
    }, {
      "left" : "@NotNull char[] chars",
      "right" : "@NotNull char[] chars",
      "info" : "SingleVariableDeclaration[4496-4517]:SingleVariableDeclaration[4496-4517]"
    }, {
      "left" : "int start",
      "right" : "int start",
      "info" : "SingleVariableDeclaration[4519-4528]:SingleVariableDeclaration[4519-4528]"
    }, {
      "left" : "int end",
      "right" : "int end",
      "info" : "SingleVariableDeclaration[4530-4537]:SingleVariableDeclaration[4530-4537]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4539-4578]:Block[4539-4578]"
    }, {
      "left" : "super(chars, start, end);",
      "right" : "super(chars, start, end);",
      "info" : "SuperConstructorInvocation[4547-4572]:SuperConstructorInvocation[4547-4572]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[4584-4593]:MarkerAnnotation[4673-4682]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[4598-4604]:Modifier[4687-4693]"
    }, {
      "left" : "CharSequence",
      "right" : "CharSequence",
      "info" : "SimpleType[4605-4617]:SimpleType[4694-4706]"
    }, {
      "left" : "subSequence",
      "right" : "subSequence",
      "info" : "SimpleName[4618-4629]:SimpleName[4707-4718]"
    }, {
      "left" : "int start",
      "right" : "int start",
      "info" : "SingleVariableDeclaration[4630-4639]:SingleVariableDeclaration[4719-4728]"
    }, {
      "left" : "int end",
      "right" : "int end",
      "info" : "SingleVariableDeclaration[4641-4648]:SingleVariableDeclaration[4730-4737]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4650-4760]:Block[4739-4849]"
    }, {
      "left" : "return start == 0 && end == length() ? this : new String(myChars, myStart + start, end - start);",
      "right" : "return start == 0 && end == length() ? this : new String(myChars, myStart + start, end - start);",
      "info" : "ReturnStatement[4658-4754]:ReturnStatement[4747-4843]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[4768-4775]:Modifier[4857-4864]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[4776-4781]:Modifier[4865-4870]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[4782-4788]:Modifier[4871-4877]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[4789-4794]:TYPE_DECLARATION_KIND[4878-4883]"
    }, {
      "left" : "JsonScope",
      "right" : "JsonScope",
      "info" : "SimpleName[4795-4804]:SimpleName[4884-4893]"
    }, {
      "left" : "@Nullable",
      "right" : "@Nullable",
      "info" : "MarkerAnnotation[5925-5934]:MarkerAnnotation[6014-6023]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[5937-5943]:Modifier[6026-6032]"
    }, {
      "left" : "JsonReaderEx",
      "right" : "JsonReaderEx",
      "info" : "SimpleType[5944-5956]:SimpleType[6033-6045]"
    }, {
      "left" : "subReader",
      "right" : "subReader",
      "info" : "SimpleName[5957-5966]:SimpleName[6046-6055]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5969-6670]:Block[6058-6759]"
    }, {
      "left" : "JsonToken nextToken = peek();",
      "right" : "JsonToken nextToken = peek();",
      "info" : "VariableDeclarationStatement[5975-6004]:VariableDeclarationStatement[6064-6093]"
    }, {
      "left" : "switch (nextToken) {\n      case BEGIN_ARRAY:\n      case BEGIN_OBJECT:\n      case STRING:\n      case NUMBER:\n      case BOOLEAN:\n        break;\n      case NULL:\n        // just return null\n        return null;\n      default:\n        throw createParseError(\"Cannot create sub reader, next token \" + nextToken + \" is not value\");\n    }",
      "right" : "switch (nextToken) {\n      case BEGIN_ARRAY:\n      case BEGIN_OBJECT:\n      case STRING:\n      case NUMBER:\n      case BOOLEAN:\n        break;\n      case NULL:\n        // just return null\n        return null;\n      default:\n        throw createParseError(\"Cannot create sub reader, next token \" + nextToken + \" is not value\");\n    }",
      "info" : "SwitchStatement[6009-6341]:SwitchStatement[6098-6430]"
    }, {
      "left" : "case BEGIN_ARRAY:",
      "right" : "case BEGIN_ARRAY:",
      "info" : "SwitchCase[6036-6053]:SwitchCase[6125-6142]"
    }, {
      "left" : "case BEGIN_OBJECT:",
      "right" : "case BEGIN_OBJECT:",
      "info" : "SwitchCase[6060-6078]:SwitchCase[6149-6167]"
    }, {
      "left" : "case STRING:",
      "right" : "case STRING:",
      "info" : "SwitchCase[6085-6097]:SwitchCase[6174-6186]"
    }, {
      "left" : "case NUMBER:",
      "right" : "case NUMBER:",
      "info" : "SwitchCase[6104-6116]:SwitchCase[6193-6205]"
    }, {
      "left" : "case BOOLEAN:",
      "right" : "case BOOLEAN:",
      "info" : "SwitchCase[6123-6136]:SwitchCase[6212-6225]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[6145-6151]:BreakStatement[6234-6240]"
    }, {
      "left" : "case NULL:",
      "right" : "case NULL:",
      "info" : "SwitchCase[6158-6168]:SwitchCase[6247-6257]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[6205-6217]:ReturnStatement[6294-6306]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[6224-6232]:SwitchCase[6313-6321]"
    }, {
      "left" : "throw createParseError(\"Cannot create sub reader, next token \" + nextToken + \" is not value\");",
      "right" : "throw createParseError(\"Cannot create sub reader, next token \" + nextToken + \" is not value\");",
      "info" : "ThrowStatement[6241-6335]:ThrowStatement[6330-6424]"
    }, {
      "left" : "JsonReaderEx subReader = new JsonReaderEx(in, position, Arrays.copyOf(stack, stack.length));",
      "right" : "JsonReaderEx subReader = new JsonReaderEx(in, position, Arrays.copyOf(stack, stack.length));",
      "info" : "VariableDeclarationStatement[6347-6439]:VariableDeclarationStatement[6436-6528]"
    }, {
      "left" : "subReader.stackSize = stackSize;",
      "right" : "subReader.stackSize = stackSize;",
      "info" : "ExpressionStatement[6444-6476]:ExpressionStatement[6533-6565]"
    }, {
      "left" : "subReader.peeked = peeked;",
      "right" : "subReader.peeked = peeked;",
      "info" : "ExpressionStatement[6481-6507]:ExpressionStatement[6570-6596]"
    }, {
      "left" : "subReader.peekedLong = peekedLong;",
      "right" : "subReader.peekedLong = peekedLong;",
      "info" : "ExpressionStatement[6512-6546]:ExpressionStatement[6601-6635]"
    }, {
      "left" : "subReader.peekedNumberLength = peekedNumberLength;",
      "right" : "subReader.peekedNumberLength = peekedNumberLength;",
      "info" : "ExpressionStatement[6551-6601]:ExpressionStatement[6640-6690]"
    }, {
      "left" : "subReader.peekedString = peekedString;",
      "right" : "subReader.peekedString = peekedString;",
      "info" : "ExpressionStatement[6606-6644]:ExpressionStatement[6695-6733]"
    }, {
      "left" : "return subReader;",
      "right" : "return subReader;",
      "info" : "ReturnStatement[6649-6666]:ReturnStatement[6738-6755]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[6674-6680]:Modifier[6763-6769]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[6681-6686]:Modifier[6770-6775]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[6687-6691]:PrimitiveType[6776-6780]"
    }, {
      "left" : "setLenient",
      "right" : "setLenient",
      "info" : "SimpleName[6692-6702]:SimpleName[6781-6791]"
    }, {
      "left" : "boolean lenient",
      "right" : "boolean lenient",
      "info" : "SingleVariableDeclaration[6703-6718]:SingleVariableDeclaration[6792-6807]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6720-6753]:Block[6809-6842]"
    }, {
      "left" : "this.lenient = lenient;",
      "right" : "this.lenient = lenient;",
      "info" : "ExpressionStatement[6726-6749]:ExpressionStatement[6815-6838]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[6757-6763]:Modifier[6846-6852]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[6764-6769]:Modifier[6853-6858]"
    }, {
      "left" : "JsonReaderEx",
      "right" : "JsonReaderEx",
      "info" : "SimpleType[6770-6782]:SimpleType[6859-6871]"
    }, {
      "left" : "lenient",
      "right" : "lenient",
      "info" : "SimpleName[6783-6790]:SimpleName[6872-6879]"
    }, {
      "left" : "boolean lenient",
      "right" : "boolean lenient",
      "info" : "SingleVariableDeclaration[6791-6806]:SingleVariableDeclaration[6880-6895]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6808-6858]:Block[6897-6947]"
    }, {
      "left" : "this.lenient = lenient;",
      "right" : "this.lenient = lenient;",
      "info" : "ExpressionStatement[6814-6837]:ExpressionStatement[6903-6926]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[6842-6854]:ReturnStatement[6931-6943]"
    }, {
      "left" : "@SuppressWarnings(\"UnusedDeclaration\")",
      "right" : "@SuppressWarnings(\"UnusedDeclaration\")",
      "info" : "SingleMemberAnnotation[6862-6900]:SingleMemberAnnotation[6951-6989]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[6903-6909]:Modifier[6992-6998]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[6910-6915]:Modifier[6999-7004]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[6916-6923]:PrimitiveType[7005-7012]"
    }, {
      "left" : "isLenient",
      "right" : "isLenient",
      "info" : "SimpleName[6924-6933]:SimpleName[7013-7022]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6936-6961]:Block[7025-7050]"
    }, {
      "left" : "return lenient;",
      "right" : "return lenient;",
      "info" : "ReturnStatement[6942-6957]:ReturnStatement[7031-7046]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[7085-7091]:Modifier[7174-7180]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[7092-7096]:PrimitiveType[7181-7185]"
    }, {
      "left" : "beginArray",
      "right" : "beginArray",
      "info" : "SimpleName[7097-7107]:SimpleName[7186-7196]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7110-7382]:Block[7199-7471]"
    }, {
      "left" : "int p = peeked;",
      "right" : "int p = peeked;",
      "info" : "VariableDeclarationStatement[7116-7131]:VariableDeclarationStatement[7205-7220]"
    }, {
      "left" : "if (p == PEEKED_NONE)",
      "right" : "if (p == PEEKED_NONE)",
      "info" : "IfStatement[7136-7185]:IfStatement[7225-7274]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7158-7185]:Block[7247-7274]"
    }, {
      "left" : "p = doPeek();",
      "right" : "p = doPeek();",
      "info" : "ExpressionStatement[7166-7179]:ExpressionStatement[7255-7268]"
    }, {
      "left" : "if (p == PEEKED_BEGIN_ARRAY)",
      "right" : "if (p == PEEKED_BEGIN_ARRAY)",
      "info" : "IfStatement[7190-7378]:IfStatement[7279-7467]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7219-7289]:Block[7308-7378]"
    }, {
      "left" : "push(JsonScope.EMPTY_ARRAY);",
      "right" : "push(JsonScope.EMPTY_ARRAY);",
      "info" : "ExpressionStatement[7227-7255]:ExpressionStatement[7316-7344]"
    }, {
      "left" : "peeked = PEEKED_NONE;",
      "right" : "peeked = PEEKED_NONE;",
      "info" : "ExpressionStatement[7262-7283]:ExpressionStatement[7351-7372]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7299-7378]:Block[7388-7467]"
    }, {
      "left" : "throw createParseError(\"Expected BEGIN_ARRAY but was \" + peek());",
      "right" : "throw createParseError(\"Expected BEGIN_ARRAY but was \" + peek());",
      "info" : "ThrowStatement[7307-7372]:ThrowStatement[7396-7461]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[7506-7512]:Modifier[7595-7601]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[7513-7517]:PrimitiveType[7602-7606]"
    }, {
      "left" : "endArray",
      "right" : "endArray",
      "info" : "SimpleName[7518-7526]:SimpleName[7607-7615]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7529-7781]:Block[7618-7870]"
    }, {
      "left" : "int p = peeked;",
      "right" : "int p = peeked;",
      "info" : "VariableDeclarationStatement[7535-7550]:VariableDeclarationStatement[7624-7639]"
    }, {
      "left" : "if (p == PEEKED_NONE)",
      "right" : "if (p == PEEKED_NONE)",
      "info" : "IfStatement[7555-7604]:IfStatement[7644-7693]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7577-7604]:Block[7666-7693]"
    }, {
      "left" : "p = doPeek();",
      "right" : "p = doPeek();",
      "info" : "ExpressionStatement[7585-7598]:ExpressionStatement[7674-7687]"
    }, {
      "left" : "if (p == PEEKED_END_ARRAY)",
      "right" : "if (p == PEEKED_END_ARRAY)",
      "info" : "IfStatement[7609-7777]:IfStatement[7698-7866]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7636-7690]:Block[7725-7779]"
    }, {
      "left" : "stackSize--;",
      "right" : "stackSize--;",
      "info" : "ExpressionStatement[7644-7656]:ExpressionStatement[7733-7745]"
    }, {
      "left" : "peeked = PEEKED_NONE;",
      "right" : "peeked = PEEKED_NONE;",
      "info" : "ExpressionStatement[7663-7684]:ExpressionStatement[7752-7773]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7700-7777]:Block[7789-7866]"
    }, {
      "left" : "throw createParseError(\"Expected END_ARRAY but was \" + peek());",
      "right" : "throw createParseError(\"Expected END_ARRAY but was \" + peek());",
      "info" : "ThrowStatement[7708-7771]:ThrowStatement[7797-7860]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[7906-7912]:Modifier[7995-8001]"
    }, {
      "left" : "JsonReaderEx",
      "right" : "JsonReaderEx",
      "info" : "SimpleType[7913-7925]:SimpleType[8002-8014]"
    }, {
      "left" : "beginObject",
      "right" : "beginObject",
      "info" : "SimpleName[7926-7937]:SimpleName[8015-8026]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7940-8232]:Block[8029-8321]"
    }, {
      "left" : "int p = peeked;",
      "right" : "int p = peeked;",
      "info" : "VariableDeclarationStatement[7946-7961]:VariableDeclarationStatement[8035-8050]"
    }, {
      "left" : "if (p == PEEKED_NONE)",
      "right" : "if (p == PEEKED_NONE)",
      "info" : "IfStatement[7966-8015]:IfStatement[8055-8104]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7988-8015]:Block[8077-8104]"
    }, {
      "left" : "p = doPeek();",
      "right" : "p = doPeek();",
      "info" : "ExpressionStatement[7996-8009]:ExpressionStatement[8085-8098]"
    }, {
      "left" : "if (p == PEEKED_BEGIN_OBJECT)",
      "right" : "if (p == PEEKED_BEGIN_OBJECT)",
      "info" : "IfStatement[8020-8211]:IfStatement[8109-8300]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8050-8121]:Block[8139-8210]"
    }, {
      "left" : "push(JsonScope.EMPTY_OBJECT);",
      "right" : "push(JsonScope.EMPTY_OBJECT);",
      "info" : "ExpressionStatement[8058-8087]:ExpressionStatement[8147-8176]"
    }, {
      "left" : "peeked = PEEKED_NONE;",
      "right" : "peeked = PEEKED_NONE;",
      "info" : "ExpressionStatement[8094-8115]:ExpressionStatement[8183-8204]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8131-8211]:Block[8220-8300]"
    }, {
      "left" : "throw createParseError(\"Expected BEGIN_OBJECT but was \" + peek());",
      "right" : "throw createParseError(\"Expected BEGIN_OBJECT but was \" + peek());",
      "info" : "ThrowStatement[8139-8205]:ThrowStatement[8228-8294]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[8216-8228]:ReturnStatement[8305-8317]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[8357-8363]:Modifier[8446-8452]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[8364-8368]:PrimitiveType[8453-8457]"
    }, {
      "left" : "endObject",
      "right" : "endObject",
      "info" : "SimpleName[8369-8378]:SimpleName[8458-8467]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8381-8644]:Block[8470-8733]"
    }, {
      "left" : "int p = peeked;",
      "right" : "int p = peeked;",
      "info" : "VariableDeclarationStatement[8387-8402]:VariableDeclarationStatement[8476-8491]"
    }, {
      "left" : "if (p == PEEKED_NONE)",
      "right" : "if (p == PEEKED_NONE)",
      "info" : "IfStatement[8407-8456]:IfStatement[8496-8545]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8429-8456]:Block[8518-8545]"
    }, {
      "left" : "p = doPeek();",
      "right" : "p = doPeek();",
      "info" : "ExpressionStatement[8437-8450]:ExpressionStatement[8526-8539]"
    }, {
      "left" : "if (p == PEEKED_END_OBJECT)",
      "right" : "if (p == PEEKED_END_OBJECT)",
      "info" : "IfStatement[8461-8640]:IfStatement[8550-8729]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8489-8543]:Block[8578-8632]"
    }, {
      "left" : "stackSize--;",
      "right" : "stackSize--;",
      "info" : "ExpressionStatement[8497-8509]:ExpressionStatement[8586-8598]"
    }, {
      "left" : "peeked = PEEKED_NONE;",
      "right" : "peeked = PEEKED_NONE;",
      "info" : "ExpressionStatement[8516-8537]:ExpressionStatement[8605-8626]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8553-8640]:Block[8642-8729]"
    }, {
      "left" : "throw new IllegalStateException(\"Expected END_OBJECT but was \" + peek());",
      "right" : "throw new IllegalStateException(\"Expected END_OBJECT but was \" + peek());",
      "info" : "ThrowStatement[8561-8634]:ThrowStatement[8650-8723]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[8730-8736]:Modifier[8819-8825]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[8737-8744]:PrimitiveType[8826-8833]"
    }, {
      "left" : "hasNext",
      "right" : "hasNext",
      "info" : "SimpleName[8745-8752]:SimpleName[8834-8841]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8755-8894]:Block[8844-8983]"
    }, {
      "left" : "int p = peeked;",
      "right" : "int p = peeked;",
      "info" : "VariableDeclarationStatement[8761-8776]:VariableDeclarationStatement[8850-8865]"
    }, {
      "left" : "if (p == PEEKED_NONE)",
      "right" : "if (p == PEEKED_NONE)",
      "info" : "IfStatement[8781-8830]:IfStatement[8870-8919]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8803-8830]:Block[8892-8919]"
    }, {
      "left" : "p = doPeek();",
      "right" : "p = doPeek();",
      "info" : "ExpressionStatement[8811-8824]:ExpressionStatement[8900-8913]"
    }, {
      "left" : "return p != PEEKED_END_OBJECT && p != PEEKED_END_ARRAY;",
      "right" : "return p != PEEKED_END_OBJECT && p != PEEKED_END_ARRAY;",
      "info" : "ReturnStatement[8835-8890]:ReturnStatement[8924-8979]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[8972-8978]:Modifier[9061-9067]"
    }, {
      "left" : "JsonToken",
      "right" : "JsonToken",
      "info" : "SimpleType[8979-8988]:SimpleType[9068-9077]"
    }, {
      "left" : "peek",
      "right" : "peek",
      "info" : "SimpleName[8989-8993]:SimpleName[9078-9082]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8996-10000]:Block[9085-10089]"
    }, {
      "left" : "int p = peeked;",
      "right" : "int p = peeked;",
      "info" : "VariableDeclarationStatement[9002-9017]:VariableDeclarationStatement[9091-9106]"
    }, {
      "left" : "if (p == PEEKED_NONE)",
      "right" : "if (p == PEEKED_NONE)",
      "info" : "IfStatement[9022-9071]:IfStatement[9111-9160]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9044-9071]:Block[9133-9160]"
    }, {
      "left" : "p = doPeek();",
      "right" : "p = doPeek();",
      "info" : "ExpressionStatement[9052-9065]:ExpressionStatement[9141-9154]"
    }, {
      "left" : "switch (p) {\n      case PEEKED_BEGIN_OBJECT:\n        return JsonToken.BEGIN_OBJECT;\n      case PEEKED_END_OBJECT:\n        return JsonToken.END_OBJECT;\n      case PEEKED_BEGIN_ARRAY:\n        return JsonToken.BEGIN_ARRAY;\n      case PEEKED_END_ARRAY:\n        return JsonToken.END_ARRAY;\n      case PEEKED_SINGLE_QUOTED_NAME:\n      case PEEKED_DOUBLE_QUOTED_NAME:\n      case PEEKED_UNQUOTED_NAME:\n        return JsonToken.NAME;\n      case PEEKED_TRUE:\n      case PEEKED_FALSE:\n        return JsonToken.BOOLEAN;\n      case PEEKED_NULL:\n        return JsonToken.NULL;\n      case PEEKED_SINGLE_QUOTED:\n      case PEEKED_DOUBLE_QUOTED:\n      case PEEKED_UNQUOTED:\n      case PEEKED_BUFFERED:\n        return JsonToken.STRING;\n      case PEEKED_LONG:\n      case PEEKED_NUMBER:\n        return JsonToken.NUMBER;\n      case PEEKED_EOF:\n        return JsonToken.END_DOCUMENT;\n      default:\n        throw new AssertionError();\n    }",
      "right" : "switch (p) {\n      case PEEKED_BEGIN_OBJECT:\n        return JsonToken.BEGIN_OBJECT;\n      case PEEKED_END_OBJECT:\n        return JsonToken.END_OBJECT;\n      case PEEKED_BEGIN_ARRAY:\n        return JsonToken.BEGIN_ARRAY;\n      case PEEKED_END_ARRAY:\n        return JsonToken.END_ARRAY;\n      case PEEKED_SINGLE_QUOTED_NAME:\n      case PEEKED_DOUBLE_QUOTED_NAME:\n      case PEEKED_UNQUOTED_NAME:\n        return JsonToken.NAME;\n      case PEEKED_TRUE:\n      case PEEKED_FALSE:\n        return JsonToken.BOOLEAN;\n      case PEEKED_NULL:\n        return JsonToken.NULL;\n      case PEEKED_SINGLE_QUOTED:\n      case PEEKED_DOUBLE_QUOTED:\n      case PEEKED_UNQUOTED:\n      case PEEKED_BUFFERED:\n        return JsonToken.STRING;\n      case PEEKED_LONG:\n      case PEEKED_NUMBER:\n        return JsonToken.NUMBER;\n      case PEEKED_EOF:\n        return JsonToken.END_DOCUMENT;\n      default:\n        throw new AssertionError();\n    }",
      "info" : "SwitchStatement[9077-9996]:SwitchStatement[9166-10085]"
    }, {
      "left" : "case PEEKED_BEGIN_OBJECT:",
      "right" : "case PEEKED_BEGIN_OBJECT:",
      "info" : "SwitchCase[9096-9121]:SwitchCase[9185-9210]"
    }, {
      "left" : "return JsonToken.BEGIN_OBJECT;",
      "right" : "return JsonToken.BEGIN_OBJECT;",
      "info" : "ReturnStatement[9130-9160]:ReturnStatement[9219-9249]"
    }, {
      "left" : "case PEEKED_END_OBJECT:",
      "right" : "case PEEKED_END_OBJECT:",
      "info" : "SwitchCase[9167-9190]:SwitchCase[9256-9279]"
    }, {
      "left" : "return JsonToken.END_OBJECT;",
      "right" : "return JsonToken.END_OBJECT;",
      "info" : "ReturnStatement[9199-9227]:ReturnStatement[9288-9316]"
    }, {
      "left" : "case PEEKED_BEGIN_ARRAY:",
      "right" : "case PEEKED_BEGIN_ARRAY:",
      "info" : "SwitchCase[9234-9258]:SwitchCase[9323-9347]"
    }, {
      "left" : "return JsonToken.BEGIN_ARRAY;",
      "right" : "return JsonToken.BEGIN_ARRAY;",
      "info" : "ReturnStatement[9267-9296]:ReturnStatement[9356-9385]"
    }, {
      "left" : "case PEEKED_END_ARRAY:",
      "right" : "case PEEKED_END_ARRAY:",
      "info" : "SwitchCase[9303-9325]:SwitchCase[9392-9414]"
    }, {
      "left" : "return JsonToken.END_ARRAY;",
      "right" : "return JsonToken.END_ARRAY;",
      "info" : "ReturnStatement[9334-9361]:ReturnStatement[9423-9450]"
    }, {
      "left" : "case PEEKED_SINGLE_QUOTED_NAME:",
      "right" : "case PEEKED_SINGLE_QUOTED_NAME:",
      "info" : "SwitchCase[9368-9399]:SwitchCase[9457-9488]"
    }, {
      "left" : "case PEEKED_DOUBLE_QUOTED_NAME:",
      "right" : "case PEEKED_DOUBLE_QUOTED_NAME:",
      "info" : "SwitchCase[9406-9437]:SwitchCase[9495-9526]"
    }, {
      "left" : "case PEEKED_UNQUOTED_NAME:",
      "right" : "case PEEKED_UNQUOTED_NAME:",
      "info" : "SwitchCase[9444-9470]:SwitchCase[9533-9559]"
    }, {
      "left" : "return JsonToken.NAME;",
      "right" : "return JsonToken.NAME;",
      "info" : "ReturnStatement[9479-9501]:ReturnStatement[9568-9590]"
    }, {
      "left" : "case PEEKED_TRUE:",
      "right" : "case PEEKED_TRUE:",
      "info" : "SwitchCase[9508-9525]:SwitchCase[9597-9614]"
    }, {
      "left" : "case PEEKED_FALSE:",
      "right" : "case PEEKED_FALSE:",
      "info" : "SwitchCase[9532-9550]:SwitchCase[9621-9639]"
    }, {
      "left" : "return JsonToken.BOOLEAN;",
      "right" : "return JsonToken.BOOLEAN;",
      "info" : "ReturnStatement[9559-9584]:ReturnStatement[9648-9673]"
    }, {
      "left" : "case PEEKED_NULL:",
      "right" : "case PEEKED_NULL:",
      "info" : "SwitchCase[9591-9608]:SwitchCase[9680-9697]"
    }, {
      "left" : "return JsonToken.NULL;",
      "right" : "return JsonToken.NULL;",
      "info" : "ReturnStatement[9617-9639]:ReturnStatement[9706-9728]"
    }, {
      "left" : "case PEEKED_SINGLE_QUOTED:",
      "right" : "case PEEKED_SINGLE_QUOTED:",
      "info" : "SwitchCase[9646-9672]:SwitchCase[9735-9761]"
    }, {
      "left" : "case PEEKED_DOUBLE_QUOTED:",
      "right" : "case PEEKED_DOUBLE_QUOTED:",
      "info" : "SwitchCase[9679-9705]:SwitchCase[9768-9794]"
    }, {
      "left" : "case PEEKED_UNQUOTED:",
      "right" : "case PEEKED_UNQUOTED:",
      "info" : "SwitchCase[9712-9733]:SwitchCase[9801-9822]"
    }, {
      "left" : "case PEEKED_BUFFERED:",
      "right" : "case PEEKED_BUFFERED:",
      "info" : "SwitchCase[9740-9761]:SwitchCase[9829-9850]"
    }, {
      "left" : "return JsonToken.STRING;",
      "right" : "return JsonToken.STRING;",
      "info" : "ReturnStatement[9770-9794]:ReturnStatement[9859-9883]"
    }, {
      "left" : "case PEEKED_LONG:",
      "right" : "case PEEKED_LONG:",
      "info" : "SwitchCase[9801-9818]:SwitchCase[9890-9907]"
    }, {
      "left" : "case PEEKED_NUMBER:",
      "right" : "case PEEKED_NUMBER:",
      "info" : "SwitchCase[9825-9844]:SwitchCase[9914-9933]"
    }, {
      "left" : "return JsonToken.NUMBER;",
      "right" : "return JsonToken.NUMBER;",
      "info" : "ReturnStatement[9853-9877]:ReturnStatement[9942-9966]"
    }, {
      "left" : "case PEEKED_EOF:",
      "right" : "case PEEKED_EOF:",
      "info" : "SwitchCase[9884-9900]:SwitchCase[9973-9989]"
    }, {
      "left" : "return JsonToken.END_DOCUMENT;",
      "right" : "return JsonToken.END_DOCUMENT;",
      "info" : "ReturnStatement[9909-9939]:ReturnStatement[9998-10028]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[9946-9954]:SwitchCase[10035-10043]"
    }, {
      "left" : "throw new AssertionError();",
      "right" : "throw new AssertionError();",
      "info" : "ThrowStatement[9963-9990]:ThrowStatement[10052-10079]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[10004-10011]:Modifier[10093-10100]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[10012-10015]:PrimitiveType[10101-10104]"
    }, {
      "left" : "doPeek",
      "right" : "doPeek",
      "info" : "SimpleName[10016-10022]:SimpleName[10105-10111]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10025-14404]:Block[10114-14493]"
    }, {
      "left" : "int peekStack = stack[stackSize - 1];",
      "right" : "int peekStack = stack[stackSize - 1];",
      "info" : "VariableDeclarationStatement[10031-10068]:VariableDeclarationStatement[10120-10157]"
    }, {
      "left" : "if (peekStack == JsonScope.EMPTY_ARRAY)",
      "right" : "if (peekStack == JsonScope.EMPTY_ARRAY)",
      "info" : "IfStatement[10073-12940]:IfStatement[10162-13029]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10113-10175]:Block[10202-10264]"
    }, {
      "left" : "stack[stackSize - 1] = JsonScope.NONEMPTY_ARRAY;",
      "right" : "stack[stackSize - 1] = JsonScope.NONEMPTY_ARRAY;",
      "info" : "ExpressionStatement[10121-10169]:ExpressionStatement[10210-10258]"
    }, {
      "left" : "if (peekStack == JsonScope.NONEMPTY_ARRAY)",
      "right" : "if (peekStack == JsonScope.NONEMPTY_ARRAY)",
      "info" : "IfStatement[10185-12940]:IfStatement[10274-13029]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10228-10582]:Block[10317-10671]"
    }, {
      "left" : "int c = nextNonWhitespace(true);",
      "right" : "int c = nextNonWhitespace(true);",
      "info" : "VariableDeclarationStatement[10287-10319]:VariableDeclarationStatement[10376-10408]"
    }, {
      "left" : "switch (c) {\n        case ']':\n          return peeked = PEEKED_END_ARRAY;\n        case ';':\n          checkLenient(); // fall-through\n        case ',':\n          break;\n        default:\n          throw createParseError(\"Unterminated array\");\n      }",
      "right" : "switch (c) {\n        case ']':\n          return peeked = PEEKED_END_ARRAY;\n        case ';':\n          checkLenient(); // fall-through\n        case ',':\n          break;\n        default:\n          throw createParseError(\"Unterminated array\");\n      }",
      "info" : "SwitchStatement[10326-10576]:SwitchStatement[10415-10665]"
    }, {
      "left" : "case ']':",
      "right" : "case ']':",
      "info" : "SwitchCase[10347-10356]:SwitchCase[10436-10445]"
    }, {
      "left" : "return peeked = PEEKED_END_ARRAY;",
      "right" : "return peeked = PEEKED_END_ARRAY;",
      "info" : "ReturnStatement[10367-10400]:ReturnStatement[10456-10489]"
    }, {
      "left" : "case ';':",
      "right" : "case ';':",
      "info" : "SwitchCase[10409-10418]:SwitchCase[10498-10507]"
    }, {
      "left" : "checkLenient();",
      "right" : "checkLenient();",
      "info" : "ExpressionStatement[10429-10444]:ExpressionStatement[10518-10533]"
    }, {
      "left" : "case ',':",
      "right" : "case ',':",
      "info" : "SwitchCase[10469-10478]:SwitchCase[10558-10567]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[10489-10495]:BreakStatement[10578-10584]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[10504-10512]:SwitchCase[10593-10601]"
    }, {
      "left" : "throw createParseError(\"Unterminated array\");",
      "right" : "throw createParseError(\"Unterminated array\");",
      "info" : "ThrowStatement[10523-10568]:ThrowStatement[10612-10657]"
    }, {
      "left" : "if (peekStack == JsonScope.EMPTY_OBJECT || peekStack == JsonScope.NONEMPTY_OBJECT)",
      "right" : "if (peekStack == JsonScope.EMPTY_OBJECT || peekStack == JsonScope.NONEMPTY_OBJECT)",
      "info" : "IfStatement[10592-12940]:IfStatement[10681-13029]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10675-11922]:Block[10764-12011]"
    }, {
      "left" : "stack[stackSize - 1] = JsonScope.DANGLING_NAME;",
      "right" : "stack[stackSize - 1] = JsonScope.DANGLING_NAME;",
      "info" : "ExpressionStatement[10683-10730]:ExpressionStatement[10772-10819]"
    }, {
      "left" : "if (peekStack == JsonScope.NONEMPTY_OBJECT)",
      "right" : "if (peekStack == JsonScope.NONEMPTY_OBJECT)",
      "info" : "IfStatement[10788-11161]:IfStatement[10877-11250]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10832-11161]:Block[10921-11250]"
    }, {
      "left" : "int c = nextNonWhitespace(true);",
      "right" : "int c = nextNonWhitespace(true);",
      "info" : "VariableDeclarationStatement[10842-10874]:VariableDeclarationStatement[10931-10963]"
    }, {
      "left" : "switch (c) {\n          case '}':\n            return peeked = PEEKED_END_OBJECT;\n          case ';':\n            checkLenient(); // fall-through\n          case ',':\n            break;\n          default:\n            throw createParseError(\"Unterminated object\");\n        }",
      "right" : "switch (c) {\n          case '}':\n            return peeked = PEEKED_END_OBJECT;\n          case ';':\n            checkLenient(); // fall-through\n          case ',':\n            break;\n          default:\n            throw createParseError(\"Unterminated object\");\n        }",
      "info" : "SwitchStatement[10883-11153]:SwitchStatement[10972-11242]"
    }, {
      "left" : "case '}':",
      "right" : "case '}':",
      "info" : "SwitchCase[10906-10915]:SwitchCase[10995-11004]"
    }, {
      "left" : "return peeked = PEEKED_END_OBJECT;",
      "right" : "return peeked = PEEKED_END_OBJECT;",
      "info" : "ReturnStatement[10928-10962]:ReturnStatement[11017-11051]"
    }, {
      "left" : "case ';':",
      "right" : "case ';':",
      "info" : "SwitchCase[10973-10982]:SwitchCase[11062-11071]"
    }, {
      "left" : "checkLenient();",
      "right" : "checkLenient();",
      "info" : "ExpressionStatement[10995-11010]:ExpressionStatement[11084-11099]"
    }, {
      "left" : "case ',':",
      "right" : "case ',':",
      "info" : "SwitchCase[11037-11046]:SwitchCase[11126-11135]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[11059-11065]:BreakStatement[11148-11154]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[11076-11084]:SwitchCase[11165-11173]"
    }, {
      "left" : "throw createParseError(\"Unterminated object\");",
      "right" : "throw createParseError(\"Unterminated object\");",
      "info" : "ThrowStatement[11097-11143]:ThrowStatement[11186-11232]"
    }, {
      "left" : "int c = nextNonWhitespace(true);",
      "right" : "int c = nextNonWhitespace(true);",
      "info" : "VariableDeclarationStatement[11168-11200]:VariableDeclarationStatement[11257-11289]"
    }, {
      "left" : "switch (c) {\n        case '\"':\n          return peeked = PEEKED_DOUBLE_QUOTED_NAME;\n        case '\\'':\n          checkLenient();\n          return peeked = PEEKED_SINGLE_QUOTED_NAME;\n        case '}':\n          if (peekStack != JsonScope.NONEMPTY_OBJECT) {\n            return peeked = PEEKED_END_OBJECT;\n          }\n          else {\n            throw createParseError(\"Expected name\");\n          }\n        default:\n          checkLenient();\n          position--; // Don't consume the first character in an unquoted string.\n          if (isLiteral((char)c)) {\n            return peeked = PEEKED_UNQUOTED_NAME;\n          }\n          else {\n            throw createParseError(\"Expected name\");\n          }\n      }",
      "right" : "switch (c) {\n        case '\"':\n          return peeked = PEEKED_DOUBLE_QUOTED_NAME;\n        case '\\'':\n          checkLenient();\n          return peeked = PEEKED_SINGLE_QUOTED_NAME;\n        case '}':\n          if (peekStack != JsonScope.NONEMPTY_OBJECT) {\n            return peeked = PEEKED_END_OBJECT;\n          }\n          else {\n            throw createParseError(\"Expected name\");\n          }\n        default:\n          checkLenient();\n          position--; // Don't consume the first character in an unquoted string.\n          if (isLiteral((char)c)) {\n            return peeked = PEEKED_UNQUOTED_NAME;\n          }\n          else {\n            throw createParseError(\"Expected name\");\n          }\n      }",
      "info" : "SwitchStatement[11207-11916]:SwitchStatement[11296-12005]"
    }, {
      "left" : "case '\"':",
      "right" : "case '\"':",
      "info" : "SwitchCase[11228-11237]:SwitchCase[11317-11326]"
    }, {
      "left" : "return peeked = PEEKED_DOUBLE_QUOTED_NAME;",
      "right" : "return peeked = PEEKED_DOUBLE_QUOTED_NAME;",
      "info" : "ReturnStatement[11248-11290]:ReturnStatement[11337-11379]"
    }, {
      "left" : "case '\\'':",
      "right" : "case '\\'':",
      "info" : "SwitchCase[11299-11309]:SwitchCase[11388-11398]"
    }, {
      "left" : "checkLenient();",
      "right" : "checkLenient();",
      "info" : "ExpressionStatement[11320-11335]:ExpressionStatement[11409-11424]"
    }, {
      "left" : "return peeked = PEEKED_SINGLE_QUOTED_NAME;",
      "right" : "return peeked = PEEKED_SINGLE_QUOTED_NAME;",
      "info" : "ReturnStatement[11346-11388]:ReturnStatement[11435-11477]"
    }, {
      "left" : "case '}':",
      "right" : "case '}':",
      "info" : "SwitchCase[11397-11406]:SwitchCase[11486-11495]"
    }, {
      "left" : "if (peekStack != JsonScope.NONEMPTY_OBJECT)",
      "right" : "if (peekStack != JsonScope.NONEMPTY_OBJECT)",
      "info" : "IfStatement[11417-11603]:IfStatement[11506-11692]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11461-11521]:Block[11550-11610]"
    }, {
      "left" : "return peeked = PEEKED_END_OBJECT;",
      "right" : "return peeked = PEEKED_END_OBJECT;",
      "info" : "ReturnStatement[11475-11509]:ReturnStatement[11564-11598]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11537-11603]:Block[11626-11692]"
    }, {
      "left" : "throw createParseError(\"Expected name\");",
      "right" : "throw createParseError(\"Expected name\");",
      "info" : "ThrowStatement[11551-11591]:ThrowStatement[11640-11680]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[11612-11620]:SwitchCase[11701-11709]"
    }, {
      "left" : "checkLenient();",
      "right" : "checkLenient();",
      "info" : "ExpressionStatement[11631-11646]:ExpressionStatement[11720-11735]"
    }, {
      "left" : "position--;",
      "right" : "position--;",
      "info" : "ExpressionStatement[11657-11668]:ExpressionStatement[11746-11757]"
    }, {
      "left" : "if (isLiteral((char)c))",
      "right" : "if (isLiteral((char)c))",
      "info" : "IfStatement[11739-11908]:IfStatement[11828-11997]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11763-11826]:Block[11852-11915]"
    }, {
      "left" : "return peeked = PEEKED_UNQUOTED_NAME;",
      "right" : "return peeked = PEEKED_UNQUOTED_NAME;",
      "info" : "ReturnStatement[11777-11814]:ReturnStatement[11866-11903]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11842-11908]:Block[11931-11997]"
    }, {
      "left" : "throw createParseError(\"Expected name\");",
      "right" : "throw createParseError(\"Expected name\");",
      "info" : "ThrowStatement[11856-11896]:ThrowStatement[11945-11985]"
    }, {
      "left" : "if (peekStack == JsonScope.DANGLING_NAME)",
      "right" : "if (peekStack == JsonScope.DANGLING_NAME)",
      "info" : "IfStatement[11932-12940]:IfStatement[12021-13029]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11974-12410]:Block[12063-12499]"
    }, {
      "left" : "stack[stackSize - 1] = JsonScope.NONEMPTY_OBJECT;",
      "right" : "stack[stackSize - 1] = JsonScope.NONEMPTY_OBJECT;",
      "info" : "ExpressionStatement[11982-12031]:ExpressionStatement[12071-12120]"
    }, {
      "left" : "int c = nextNonWhitespace(true);",
      "right" : "int c = nextNonWhitespace(true);",
      "info" : "VariableDeclarationStatement[12082-12114]:VariableDeclarationStatement[12171-12203]"
    }, {
      "left" : "switch (c) {\n        case ':':\n          break;\n        case '=':\n          checkLenient();\n          if (position < limit && in.charAt(position) == '>') {\n            position++;\n          }\n          break;\n        default:\n          throw createParseError(\"Expected ':'\");\n      }",
      "right" : "switch (c) {\n        case ':':\n          break;\n        case '=':\n          checkLenient();\n          if (position < limit && in.charAt(position) == '>') {\n            position++;\n          }\n          break;\n        default:\n          throw createParseError(\"Expected ':'\");\n      }",
      "info" : "SwitchStatement[12121-12404]:SwitchStatement[12210-12493]"
    }, {
      "left" : "case ':':",
      "right" : "case ':':",
      "info" : "SwitchCase[12142-12151]:SwitchCase[12231-12240]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[12162-12168]:BreakStatement[12251-12257]"
    }, {
      "left" : "case '=':",
      "right" : "case '=':",
      "info" : "SwitchCase[12177-12186]:SwitchCase[12266-12275]"
    }, {
      "left" : "checkLenient();",
      "right" : "checkLenient();",
      "info" : "ExpressionStatement[12197-12212]:ExpressionStatement[12286-12301]"
    }, {
      "left" : "if (position < limit && in.charAt(position) == '>')",
      "right" : "if (position < limit && in.charAt(position) == '>')",
      "info" : "IfStatement[12223-12312]:IfStatement[12312-12401]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12275-12312]:Block[12364-12401]"
    }, {
      "left" : "position++;",
      "right" : "position++;",
      "info" : "ExpressionStatement[12289-12300]:ExpressionStatement[12378-12389]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[12323-12329]:BreakStatement[12412-12418]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[12338-12346]:SwitchCase[12427-12435]"
    }, {
      "left" : "throw createParseError(\"Expected ':'\");",
      "right" : "throw createParseError(\"Expected ':'\");",
      "info" : "ThrowStatement[12357-12396]:ThrowStatement[12446-12485]"
    }, {
      "left" : "if (peekStack == JsonScope.EMPTY_DOCUMENT)",
      "right" : "if (peekStack == JsonScope.EMPTY_DOCUMENT)",
      "info" : "IfStatement[12420-12940]:IfStatement[12509-13029]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12463-12592]:Block[12552-12681]"
    }, {
      "left" : "if (lenient)",
      "right" : "if (lenient)",
      "info" : "IfStatement[12471-12528]:IfStatement[12560-12617]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12484-12528]:Block[12573-12617]"
    }, {
      "left" : "consumeNonExecutePrefix();",
      "right" : "consumeNonExecutePrefix();",
      "info" : "ExpressionStatement[12494-12520]:ExpressionStatement[12583-12609]"
    }, {
      "left" : "stack[stackSize - 1] = JsonScope.NONEMPTY_DOCUMENT;",
      "right" : "stack[stackSize - 1] = JsonScope.NONEMPTY_DOCUMENT;",
      "info" : "ExpressionStatement[12535-12586]:ExpressionStatement[12624-12675]"
    }, {
      "left" : "if (peekStack == JsonScope.NONEMPTY_DOCUMENT)",
      "right" : "if (peekStack == JsonScope.NONEMPTY_DOCUMENT)",
      "info" : "IfStatement[12602-12940]:IfStatement[12691-13029]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12648-12825]:Block[12737-12914]"
    }, {
      "left" : "int c = nextNonWhitespace(false);",
      "right" : "int c = nextNonWhitespace(false);",
      "info" : "VariableDeclarationStatement[12656-12689]:VariableDeclarationStatement[12745-12778]"
    }, {
      "left" : "if (c == -1)",
      "right" : "if (c == -1)",
      "info" : "IfStatement[12696-12819]:IfStatement[12785-12908]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12709-12754]:Block[12798-12843]"
    }, {
      "left" : "return peeked = PEEKED_EOF;",
      "right" : "return peeked = PEEKED_EOF;",
      "info" : "ReturnStatement[12719-12746]:ReturnStatement[12808-12835]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12766-12819]:Block[12855-12908]"
    }, {
      "left" : "checkLenient();",
      "right" : "checkLenient();",
      "info" : "ExpressionStatement[12776-12791]:ExpressionStatement[12865-12880]"
    }, {
      "left" : "position--;",
      "right" : "position--;",
      "info" : "ExpressionStatement[12800-12811]:ExpressionStatement[12889-12900]"
    }, {
      "left" : "if (peekStack == JsonScope.CLOSED)",
      "right" : "if (peekStack == JsonScope.CLOSED)",
      "info" : "IfStatement[12835-12940]:IfStatement[12924-13029]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12870-12940]:Block[12959-13029]"
    }, {
      "left" : "throw new IllegalStateException(\"JsonReader is closed\");",
      "right" : "throw new IllegalStateException(\"JsonReader is closed\");",
      "info" : "ThrowStatement[12878-12934]:ThrowStatement[12967-13023]"
    }, {
      "left" : "int c = nextNonWhitespace(true);",
      "right" : "int c = nextNonWhitespace(true);",
      "info" : "VariableDeclarationStatement[12946-12978]:VariableDeclarationStatement[13035-13067]"
    }, {
      "left" : "switch (c) {\n      case ']':\n        if (peekStack == JsonScope.EMPTY_ARRAY) {\n          return peeked = PEEKED_END_ARRAY;\n        }\n        // fall-through to handle \",]\"\n      case ';':\n      case ',':\n        // In lenient mode, a 0-length literal in an array means 'null'.\n        if (peekStack == JsonScope.EMPTY_ARRAY || peekStack == JsonScope.NONEMPTY_ARRAY) {\n          checkLenient();\n          position--;\n          return peeked = PEEKED_NULL;\n        }\n        else {\n          throw createParseError(\"Unexpected value\");\n        }\n      case '\\'':\n        checkLenient();\n        return peeked = PEEKED_SINGLE_QUOTED;\n      case '\"':\n        if (stackSize == 1) {\n          checkLenient();\n        }\n        return peeked = PEEKED_DOUBLE_QUOTED;\n      case '[':\n        return peeked = PEEKED_BEGIN_ARRAY;\n      case '{':\n        return peeked = PEEKED_BEGIN_OBJECT;\n      default:\n        position--; // Don't consume the first character in a literal value.\n    }",
      "right" : "switch (c) {\n      case ']':\n        if (peekStack == JsonScope.EMPTY_ARRAY) {\n          return peeked = PEEKED_END_ARRAY;\n        }\n        // fall-through to handle \",]\"\n      case ';':\n      case ',':\n        // In lenient mode, a 0-length literal in an array means 'null'.\n        if (peekStack == JsonScope.EMPTY_ARRAY || peekStack == JsonScope.NONEMPTY_ARRAY) {\n          checkLenient();\n          position--;\n          return peeked = PEEKED_NULL;\n        }\n        else {\n          throw createParseError(\"Unexpected value\");\n        }\n      case '\\'':\n        checkLenient();\n        return peeked = PEEKED_SINGLE_QUOTED;\n      case '\"':\n        if (stackSize == 1) {\n          checkLenient();\n        }\n        return peeked = PEEKED_DOUBLE_QUOTED;\n      case '[':\n        return peeked = PEEKED_BEGIN_ARRAY;\n      case '{':\n        return peeked = PEEKED_BEGIN_OBJECT;\n      default:\n        position--; // Don't consume the first character in a literal value.\n    }",
      "info" : "SwitchStatement[12983-13960]:SwitchStatement[13072-14049]"
    }, {
      "left" : "case ']':",
      "right" : "case ']':",
      "info" : "SwitchCase[13002-13011]:SwitchCase[13091-13100]"
    }, {
      "left" : "if (peekStack == JsonScope.EMPTY_ARRAY)",
      "right" : "if (peekStack == JsonScope.EMPTY_ARRAY)",
      "info" : "IfStatement[13020-13115]:IfStatement[13109-13204]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13060-13115]:Block[13149-13204]"
    }, {
      "left" : "return peeked = PEEKED_END_ARRAY;",
      "right" : "return peeked = PEEKED_END_ARRAY;",
      "info" : "ReturnStatement[13072-13105]:ReturnStatement[13161-13194]"
    }, {
      "left" : "case ';':",
      "right" : "case ';':",
      "info" : "SwitchCase[13161-13170]:SwitchCase[13250-13259]"
    }, {
      "left" : "case ',':",
      "right" : "case ',':",
      "info" : "SwitchCase[13177-13186]:SwitchCase[13266-13275]"
    }, {
      "left" : "if (peekStack == JsonScope.EMPTY_ARRAY || peekStack == JsonScope.NONEMPTY_ARRAY)",
      "right" : "if (peekStack == JsonScope.EMPTY_ARRAY || peekStack == JsonScope.NONEMPTY_ARRAY)",
      "info" : "IfStatement[13268-13526]:IfStatement[13357-13615]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13349-13447]:Block[13438-13536]"
    }, {
      "left" : "checkLenient();",
      "right" : "checkLenient();",
      "info" : "ExpressionStatement[13361-13376]:ExpressionStatement[13450-13465]"
    }, {
      "left" : "position--;",
      "right" : "position--;",
      "info" : "ExpressionStatement[13387-13398]:ExpressionStatement[13476-13487]"
    }, {
      "left" : "return peeked = PEEKED_NULL;",
      "right" : "return peeked = PEEKED_NULL;",
      "info" : "ReturnStatement[13409-13437]:ReturnStatement[13498-13526]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13461-13526]:Block[13550-13615]"
    }, {
      "left" : "throw createParseError(\"Unexpected value\");",
      "right" : "throw createParseError(\"Unexpected value\");",
      "info" : "ThrowStatement[13473-13516]:ThrowStatement[13562-13605]"
    }, {
      "left" : "case '\\'':",
      "right" : "case '\\'':",
      "info" : "SwitchCase[13533-13543]:SwitchCase[13622-13632]"
    }, {
      "left" : "checkLenient();",
      "right" : "checkLenient();",
      "info" : "ExpressionStatement[13552-13567]:ExpressionStatement[13641-13656]"
    }, {
      "left" : "return peeked = PEEKED_SINGLE_QUOTED;",
      "right" : "return peeked = PEEKED_SINGLE_QUOTED;",
      "info" : "ReturnStatement[13576-13613]:ReturnStatement[13665-13702]"
    }, {
      "left" : "case '\"':",
      "right" : "case '\"':",
      "info" : "SwitchCase[13620-13629]:SwitchCase[13709-13718]"
    }, {
      "left" : "if (stackSize == 1)",
      "right" : "if (stackSize == 1)",
      "info" : "IfStatement[13638-13695]:IfStatement[13727-13784]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13658-13695]:Block[13747-13784]"
    }, {
      "left" : "checkLenient();",
      "right" : "checkLenient();",
      "info" : "ExpressionStatement[13670-13685]:ExpressionStatement[13759-13774]"
    }, {
      "left" : "return peeked = PEEKED_DOUBLE_QUOTED;",
      "right" : "return peeked = PEEKED_DOUBLE_QUOTED;",
      "info" : "ReturnStatement[13704-13741]:ReturnStatement[13793-13830]"
    }, {
      "left" : "case '[':",
      "right" : "case '[':",
      "info" : "SwitchCase[13748-13757]:SwitchCase[13837-13846]"
    }, {
      "left" : "return peeked = PEEKED_BEGIN_ARRAY;",
      "right" : "return peeked = PEEKED_BEGIN_ARRAY;",
      "info" : "ReturnStatement[13766-13801]:ReturnStatement[13855-13890]"
    }, {
      "left" : "case '{':",
      "right" : "case '{':",
      "info" : "SwitchCase[13808-13817]:SwitchCase[13897-13906]"
    }, {
      "left" : "return peeked = PEEKED_BEGIN_OBJECT;",
      "right" : "return peeked = PEEKED_BEGIN_OBJECT;",
      "info" : "ReturnStatement[13826-13862]:ReturnStatement[13915-13951]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[13869-13877]:SwitchCase[13958-13966]"
    }, {
      "left" : "position--;",
      "right" : "position--;",
      "info" : "ExpressionStatement[13886-13897]:ExpressionStatement[13975-13986]"
    }, {
      "left" : "if (stackSize == 1)",
      "right" : "if (stackSize == 1)",
      "info" : "IfStatement[13966-14063]:IfStatement[14055-14152]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13986-14063]:Block[14075-14152]"
    }, {
      "left" : "checkLenient();",
      "right" : "checkLenient();",
      "info" : "ExpressionStatement[13994-14009]:ExpressionStatement[14083-14098]"
    }, {
      "left" : "int result = peekKeyword();",
      "right" : "int result = peekKeyword();",
      "info" : "VariableDeclarationStatement[14069-14096]:VariableDeclarationStatement[14158-14185]"
    }, {
      "left" : "if (result != PEEKED_NONE)",
      "right" : "if (result != PEEKED_NONE)",
      "info" : "IfStatement[14101-14156]:IfStatement[14190-14245]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14128-14156]:Block[14217-14245]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[14136-14150]:ReturnStatement[14225-14239]"
    }, {
      "left" : "result = peekNumber();",
      "right" : "result = peekNumber();",
      "info" : "ExpressionStatement[14162-14184]:ExpressionStatement[14251-14273]"
    }, {
      "left" : "if (result != PEEKED_NONE)",
      "right" : "if (result != PEEKED_NONE)",
      "info" : "IfStatement[14189-14244]:IfStatement[14278-14333]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14216-14244]:Block[14305-14333]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[14224-14238]:ReturnStatement[14313-14327]"
    }, {
      "left" : "if (!isLiteral(in.charAt(position)))",
      "right" : "if (!isLiteral(in.charAt(position)))",
      "info" : "IfStatement[14250-14342]:IfStatement[14339-14431]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14287-14342]:Block[14376-14431]"
    }, {
      "left" : "throw createParseError(\"Expected value\");",
      "right" : "throw createParseError(\"Expected value\");",
      "info" : "ThrowStatement[14295-14336]:ThrowStatement[14384-14425]"
    }, {
      "left" : "checkLenient();",
      "right" : "checkLenient();",
      "info" : "ExpressionStatement[14348-14363]:ExpressionStatement[14437-14452]"
    }, {
      "left" : "return peeked = PEEKED_UNQUOTED;",
      "right" : "return peeked = PEEKED_UNQUOTED;",
      "info" : "ReturnStatement[14368-14400]:ReturnStatement[14457-14489]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[14408-14415]:Modifier[14497-14504]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[14416-14419]:PrimitiveType[14505-14508]"
    }, {
      "left" : "peekKeyword",
      "right" : "peekKeyword",
      "info" : "SimpleName[14420-14431]:SimpleName[14509-14520]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14434-15673]:Block[14523-15762]"
    }, {
      "left" : "char c = in.charAt(position);",
      "right" : "char c = in.charAt(position);",
      "info" : "VariableDeclarationStatement[14519-14548]:VariableDeclarationStatement[14608-14637]"
    }, {
      "left" : "String keyword;",
      "right" : "String keyword;",
      "info" : "VariableDeclarationStatement[14553-14568]:VariableDeclarationStatement[14642-14657]"
    }, {
      "left" : "String keywordUpper;",
      "right" : "String keywordUpper;",
      "info" : "VariableDeclarationStatement[14573-14593]:VariableDeclarationStatement[14662-14682]"
    }, {
      "left" : "int peeking;",
      "right" : "int peeking;",
      "info" : "VariableDeclarationStatement[14598-14610]:VariableDeclarationStatement[14687-14699]"
    }, {
      "left" : "if (c == 't' || c == 'T')",
      "right" : "if (c == 't' || c == 'T')",
      "info" : "IfStatement[14615-15026]:IfStatement[14704-15115]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14641-14730]:Block[14730-14819]"
    }, {
      "left" : "keyword = \"true\";",
      "right" : "keyword = \"true\";",
      "info" : "ExpressionStatement[14649-14666]:ExpressionStatement[14738-14755]"
    }, {
      "left" : "keywordUpper = \"TRUE\";",
      "right" : "keywordUpper = \"TRUE\";",
      "info" : "ExpressionStatement[14673-14695]:ExpressionStatement[14762-14784]"
    }, {
      "left" : "peeking = PEEKED_TRUE;",
      "right" : "peeking = PEEKED_TRUE;",
      "info" : "ExpressionStatement[14702-14724]:ExpressionStatement[14791-14813]"
    }, {
      "left" : "if (c == 'f' || c == 'F')",
      "right" : "if (c == 'f' || c == 'F')",
      "info" : "IfStatement[14740-15026]:IfStatement[14829-15115]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14766-14858]:Block[14855-14947]"
    }, {
      "left" : "keyword = \"false\";",
      "right" : "keyword = \"false\";",
      "info" : "ExpressionStatement[14774-14792]:ExpressionStatement[14863-14881]"
    }, {
      "left" : "keywordUpper = \"FALSE\";",
      "right" : "keywordUpper = \"FALSE\";",
      "info" : "ExpressionStatement[14799-14822]:ExpressionStatement[14888-14911]"
    }, {
      "left" : "peeking = PEEKED_FALSE;",
      "right" : "peeking = PEEKED_FALSE;",
      "info" : "ExpressionStatement[14829-14852]:ExpressionStatement[14918-14941]"
    }, {
      "left" : "if (c == 'n' || c == 'N')",
      "right" : "if (c == 'n' || c == 'N')",
      "info" : "IfStatement[14868-15026]:IfStatement[14957-15115]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14894-14983]:Block[14983-15072]"
    }, {
      "left" : "keyword = \"null\";",
      "right" : "keyword = \"null\";",
      "info" : "ExpressionStatement[14902-14919]:ExpressionStatement[14991-15008]"
    }, {
      "left" : "keywordUpper = \"NULL\";",
      "right" : "keywordUpper = \"NULL\";",
      "info" : "ExpressionStatement[14926-14948]:ExpressionStatement[15015-15037]"
    }, {
      "left" : "peeking = PEEKED_NULL;",
      "right" : "peeking = PEEKED_NULL;",
      "info" : "ExpressionStatement[14955-14977]:ExpressionStatement[15044-15066]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14993-15026]:Block[15082-15115]"
    }, {
      "left" : "return PEEKED_NONE;",
      "right" : "return PEEKED_NONE;",
      "info" : "ReturnStatement[15001-15020]:ReturnStatement[15090-15109]"
    }, {
      "left" : "int length = keyword.length();",
      "right" : "int length = keyword.length();",
      "info" : "VariableDeclarationStatement[15089-15119]:VariableDeclarationStatement[15178-15208]"
    }, {
      "left" : "for (int i = 1; i < length; i++)",
      "right" : "for (int i = 1; i < length; i++)",
      "info" : "ForStatement[15124-15373]:ForStatement[15213-15462]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15157-15373]:Block[15246-15462]"
    }, {
      "left" : "if (position + i >= limit)",
      "right" : "if (position + i >= limit)",
      "info" : "IfStatement[15165-15229]:IfStatement[15254-15318]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15192-15229]:Block[15281-15318]"
    }, {
      "left" : "return PEEKED_NONE;",
      "right" : "return PEEKED_NONE;",
      "info" : "ReturnStatement[15202-15221]:ReturnStatement[15291-15310]"
    }, {
      "left" : "c = in.charAt(position + i);",
      "right" : "c = in.charAt(position + i);",
      "info" : "ExpressionStatement[15236-15264]:ExpressionStatement[15325-15353]"
    }, {
      "left" : "if (c != keyword.charAt(i) && c != keywordUpper.charAt(i))",
      "right" : "if (c != keyword.charAt(i) && c != keywordUpper.charAt(i))",
      "info" : "IfStatement[15271-15367]:IfStatement[15360-15456]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15330-15367]:Block[15419-15456]"
    }, {
      "left" : "return PEEKED_NONE;",
      "right" : "return PEEKED_NONE;",
      "info" : "ReturnStatement[15340-15359]:ReturnStatement[15429-15448]"
    }, {
      "left" : "if ((position + length < limit) && isLiteral(in.charAt(position + length)))",
      "right" : "if ((position + length < limit) && isLiteral(in.charAt(position + length)))",
      "info" : "IfStatement[15379-15530]:IfStatement[15468-15619]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15455-15530]:Block[15544-15619]"
    }, {
      "left" : "return PEEKED_NONE;",
      "right" : "return PEEKED_NONE;",
      "info" : "ReturnStatement[15463-15482]:ReturnStatement[15552-15571]"
    }, {
      "left" : "position += length;",
      "right" : "position += length;",
      "info" : "ExpressionStatement[15621-15640]:ExpressionStatement[15710-15729]"
    }, {
      "left" : "return peeked = peeking;",
      "right" : "return peeked = peeking;",
      "info" : "ReturnStatement[15645-15669]:ReturnStatement[15734-15758]"
    }, {
      "left" : "@SuppressWarnings(\"ConstantConditions\")",
      "right" : "@SuppressWarnings(\"ConstantConditions\")",
      "info" : "SingleMemberAnnotation[15677-15716]:SingleMemberAnnotation[15766-15805]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[15719-15726]:Modifier[15808-15815]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[15727-15730]:PrimitiveType[15816-15819]"
    }, {
      "left" : "peekNumber",
      "right" : "peekNumber",
      "info" : "SimpleName[15731-15741]:SimpleName[15820-15830]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15744-18916]:Block[15833-19005]"
    }, {
      "left" : "CharSequence in = this.in;",
      "right" : "CharSequence in = this.in;",
      "info" : "VariableDeclarationStatement[15843-15869]:VariableDeclarationStatement[15932-15958]"
    }, {
      "left" : "int p = position;",
      "right" : "int p = position;",
      "info" : "VariableDeclarationStatement[15874-15891]:VariableDeclarationStatement[15963-15980]"
    }, {
      "left" : "int l = limit;",
      "right" : "int l = limit;",
      "info" : "VariableDeclarationStatement[15896-15910]:VariableDeclarationStatement[15985-15999]"
    }, {
      "left" : "long value = 0;",
      "right" : "long value = 0;",
      "info" : "VariableDeclarationStatement[15916-15931]:VariableDeclarationStatement[16005-16020]"
    }, {
      "left" : "boolean negative = false;",
      "right" : "boolean negative = false;",
      "info" : "VariableDeclarationStatement[15991-16016]:VariableDeclarationStatement[16080-16105]"
    }, {
      "left" : "boolean fitsInLong = true;",
      "right" : "boolean fitsInLong = true;",
      "info" : "VariableDeclarationStatement[16021-16047]:VariableDeclarationStatement[16110-16136]"
    }, {
      "left" : "int last = NUMBER_CHAR_NONE;",
      "right" : "int last = NUMBER_CHAR_NONE;",
      "info" : "VariableDeclarationStatement[16052-16080]:VariableDeclarationStatement[16141-16169]"
    }, {
      "left" : "int i = 0;",
      "right" : "int i = 0;",
      "info" : "VariableDeclarationStatement[16086-16096]:VariableDeclarationStatement[16175-16185]"
    }, {
      "left" : "charactersOfNumber:\n    for (; true; i++) {\n      if (p + i == l) {\n        if (i == limit) {\n          // Though this looks like a well-formed number, it's too long to continue reading. Give up\n          // and let the application handle this as an unquoted literal.\n          return PEEKED_NONE;\n        }\n        p = position;\n        l = limit;\n      }\n\n      char c = in.charAt(p + i);\n      switch (c) {\n        case '-':\n          if (last == NUMBER_CHAR_NONE) {\n            negative = true;\n            last = NUMBER_CHAR_SIGN;\n            continue;\n          }\n          else if (last == NUMBER_CHAR_EXP_E) {\n            last = NUMBER_CHAR_EXP_SIGN;\n            continue;\n          }\n          return PEEKED_NONE;\n\n        case '+':\n          if (last == NUMBER_CHAR_EXP_E) {\n            last = NUMBER_CHAR_EXP_SIGN;\n            continue;\n          }\n          return PEEKED_NONE;\n\n        case 'e':\n        case 'E':\n          if (last == NUMBER_CHAR_DIGIT || last == NUMBER_CHAR_FRACTION_DIGIT) {\n            last = NUMBER_CHAR_EXP_E;\n            continue;\n          }\n          return PEEKED_NONE;\n\n        case '.':\n          if (last == NUMBER_CHAR_DIGIT) {\n            last = NUMBER_CHAR_DECIMAL;\n            continue;\n          }\n          return PEEKED_NONE;\n\n        default:\n          if (c < '0' || c > '9') {\n            if (!isLiteral(c)) {\n              break charactersOfNumber;\n            }\n            return PEEKED_NONE;\n          }\n          if (last == NUMBER_CHAR_SIGN || last == NUMBER_CHAR_NONE) {\n            value = -(c - '0');\n            last = NUMBER_CHAR_DIGIT;\n          }\n          else if (last == NUMBER_CHAR_DIGIT) {\n            if (value == 0) {\n              return PEEKED_NONE; // Leading '0' prefix is not allowed (since it could be octal).\n            }\n            long newValue = value * 10 - (c - '0');\n            fitsInLong &= value > MIN_INCOMPLETE_INTEGER\n                          || (value == MIN_INCOMPLETE_INTEGER && newValue < value);\n            value = newValue;\n          }\n          else if (last == NUMBER_CHAR_DECIMAL) {\n            last = NUMBER_CHAR_FRACTION_DIGIT;\n          }\n          else if (last == NUMBER_CHAR_EXP_E || last == NUMBER_CHAR_EXP_SIGN) {\n            last = NUMBER_CHAR_EXP_DIGIT;\n          }\n      }\n    }",
      "right" : "charactersOfNumber:\n    for (; true; i++) {\n      if (p + i == l) {\n        if (i == limit) {\n          // Though this looks like a well-formed number, it's too long to continue reading. Give up\n          // and let the application handle this as an unquoted literal.\n          return PEEKED_NONE;\n        }\n        p = position;\n        l = limit;\n      }\n\n      char c = in.charAt(p + i);\n      switch (c) {\n        case '-':\n          if (last == NUMBER_CHAR_NONE) {\n            negative = true;\n            last = NUMBER_CHAR_SIGN;\n            continue;\n          }\n          else if (last == NUMBER_CHAR_EXP_E) {\n            last = NUMBER_CHAR_EXP_SIGN;\n            continue;\n          }\n          return PEEKED_NONE;\n\n        case '+':\n          if (last == NUMBER_CHAR_EXP_E) {\n            last = NUMBER_CHAR_EXP_SIGN;\n            continue;\n          }\n          return PEEKED_NONE;\n\n        case 'e':\n        case 'E':\n          if (last == NUMBER_CHAR_DIGIT || last == NUMBER_CHAR_FRACTION_DIGIT) {\n            last = NUMBER_CHAR_EXP_E;\n            continue;\n          }\n          return PEEKED_NONE;\n\n        case '.':\n          if (last == NUMBER_CHAR_DIGIT) {\n            last = NUMBER_CHAR_DECIMAL;\n            continue;\n          }\n          return PEEKED_NONE;\n\n        default:\n          if (c < '0' || c > '9') {\n            if (!isLiteral(c)) {\n              break charactersOfNumber;\n            }\n            return PEEKED_NONE;\n          }\n          if (last == NUMBER_CHAR_SIGN || last == NUMBER_CHAR_NONE) {\n            value = -(c - '0');\n            last = NUMBER_CHAR_DIGIT;\n          }\n          else if (last == NUMBER_CHAR_DIGIT) {\n            if (value == 0) {\n              return PEEKED_NONE; // Leading '0' prefix is not allowed (since it could be octal).\n            }\n            long newValue = value * 10 - (c - '0');\n            fitsInLong &= value > MIN_INCOMPLETE_INTEGER\n                          || (value == MIN_INCOMPLETE_INTEGER && newValue < value);\n            value = newValue;\n          }\n          else if (last == NUMBER_CHAR_DECIMAL) {\n            last = NUMBER_CHAR_FRACTION_DIGIT;\n          }\n          else if (last == NUMBER_CHAR_EXP_E || last == NUMBER_CHAR_EXP_SIGN) {\n            last = NUMBER_CHAR_EXP_DIGIT;\n          }\n      }\n    }",
      "info" : "LabeledStatement[16102-18396]:LabeledStatement[16191-18485]"
    }, {
      "left" : "for (; true; i++)",
      "right" : "for (; true; i++)",
      "info" : "ForStatement[16126-18396]:ForStatement[16215-18485]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16144-18396]:Block[16233-18485]"
    }, {
      "left" : "if (p + i == l)",
      "right" : "if (p + i == l)",
      "info" : "IfStatement[16152-16458]:IfStatement[16241-16547]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16168-16458]:Block[16257-16547]"
    }, {
      "left" : "if (i == limit)",
      "right" : "if (i == limit)",
      "info" : "IfStatement[16178-16409]:IfStatement[16267-16498]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16194-16409]:Block[16283-16498]"
    }, {
      "left" : "return PEEKED_NONE;",
      "right" : "return PEEKED_NONE;",
      "info" : "ReturnStatement[16380-16399]:ReturnStatement[16469-16488]"
    }, {
      "left" : "p = position;",
      "right" : "p = position;",
      "info" : "ExpressionStatement[16418-16431]:ExpressionStatement[16507-16520]"
    }, {
      "left" : "l = limit;",
      "right" : "l = limit;",
      "info" : "ExpressionStatement[16440-16450]:ExpressionStatement[16529-16539]"
    }, {
      "left" : "char c = in.charAt(p + i);",
      "right" : "char c = in.charAt(p + i);",
      "info" : "VariableDeclarationStatement[16466-16492]:VariableDeclarationStatement[16555-16581]"
    }, {
      "left" : "switch (c) {\n        case '-':\n          if (last == NUMBER_CHAR_NONE) {\n            negative = true;\n            last = NUMBER_CHAR_SIGN;\n            continue;\n          }\n          else if (last == NUMBER_CHAR_EXP_E) {\n            last = NUMBER_CHAR_EXP_SIGN;\n            continue;\n          }\n          return PEEKED_NONE;\n\n        case '+':\n          if (last == NUMBER_CHAR_EXP_E) {\n            last = NUMBER_CHAR_EXP_SIGN;\n            continue;\n          }\n          return PEEKED_NONE;\n\n        case 'e':\n        case 'E':\n          if (last == NUMBER_CHAR_DIGIT || last == NUMBER_CHAR_FRACTION_DIGIT) {\n            last = NUMBER_CHAR_EXP_E;\n            continue;\n          }\n          return PEEKED_NONE;\n\n        case '.':\n          if (last == NUMBER_CHAR_DIGIT) {\n            last = NUMBER_CHAR_DECIMAL;\n            continue;\n          }\n          return PEEKED_NONE;\n\n        default:\n          if (c < '0' || c > '9') {\n            if (!isLiteral(c)) {\n              break charactersOfNumber;\n            }\n            return PEEKED_NONE;\n          }\n          if (last == NUMBER_CHAR_SIGN || last == NUMBER_CHAR_NONE) {\n            value = -(c - '0');\n            last = NUMBER_CHAR_DIGIT;\n          }\n          else if (last == NUMBER_CHAR_DIGIT) {\n            if (value == 0) {\n              return PEEKED_NONE; // Leading '0' prefix is not allowed (since it could be octal).\n            }\n            long newValue = value * 10 - (c - '0');\n            fitsInLong &= value > MIN_INCOMPLETE_INTEGER\n                          || (value == MIN_INCOMPLETE_INTEGER && newValue < value);\n            value = newValue;\n          }\n          else if (last == NUMBER_CHAR_DECIMAL) {\n            last = NUMBER_CHAR_FRACTION_DIGIT;\n          }\n          else if (last == NUMBER_CHAR_EXP_E || last == NUMBER_CHAR_EXP_SIGN) {\n            last = NUMBER_CHAR_EXP_DIGIT;\n          }\n      }",
      "right" : "switch (c) {\n        case '-':\n          if (last == NUMBER_CHAR_NONE) {\n            negative = true;\n            last = NUMBER_CHAR_SIGN;\n            continue;\n          }\n          else if (last == NUMBER_CHAR_EXP_E) {\n            last = NUMBER_CHAR_EXP_SIGN;\n            continue;\n          }\n          return PEEKED_NONE;\n\n        case '+':\n          if (last == NUMBER_CHAR_EXP_E) {\n            last = NUMBER_CHAR_EXP_SIGN;\n            continue;\n          }\n          return PEEKED_NONE;\n\n        case 'e':\n        case 'E':\n          if (last == NUMBER_CHAR_DIGIT || last == NUMBER_CHAR_FRACTION_DIGIT) {\n            last = NUMBER_CHAR_EXP_E;\n            continue;\n          }\n          return PEEKED_NONE;\n\n        case '.':\n          if (last == NUMBER_CHAR_DIGIT) {\n            last = NUMBER_CHAR_DECIMAL;\n            continue;\n          }\n          return PEEKED_NONE;\n\n        default:\n          if (c < '0' || c > '9') {\n            if (!isLiteral(c)) {\n              break charactersOfNumber;\n            }\n            return PEEKED_NONE;\n          }\n          if (last == NUMBER_CHAR_SIGN || last == NUMBER_CHAR_NONE) {\n            value = -(c - '0');\n            last = NUMBER_CHAR_DIGIT;\n          }\n          else if (last == NUMBER_CHAR_DIGIT) {\n            if (value == 0) {\n              return PEEKED_NONE; // Leading '0' prefix is not allowed (since it could be octal).\n            }\n            long newValue = value * 10 - (c - '0');\n            fitsInLong &= value > MIN_INCOMPLETE_INTEGER\n                          || (value == MIN_INCOMPLETE_INTEGER && newValue < value);\n            value = newValue;\n          }\n          else if (last == NUMBER_CHAR_DECIMAL) {\n            last = NUMBER_CHAR_FRACTION_DIGIT;\n          }\n          else if (last == NUMBER_CHAR_EXP_E || last == NUMBER_CHAR_EXP_SIGN) {\n            last = NUMBER_CHAR_EXP_DIGIT;\n          }\n      }",
      "info" : "SwitchStatement[16499-18390]:SwitchStatement[16588-18479]"
    }, {
      "left" : "case '-':",
      "right" : "case '-':",
      "info" : "SwitchCase[16520-16529]:SwitchCase[16609-16618]"
    }, {
      "left" : "if (last == NUMBER_CHAR_NONE)",
      "right" : "if (last == NUMBER_CHAR_NONE)",
      "info" : "IfStatement[16540-16794]:IfStatement[16629-16883]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16570-16671]:Block[16659-16760]"
    }, {
      "left" : "negative = true;",
      "right" : "negative = true;",
      "info" : "ExpressionStatement[16584-16600]:ExpressionStatement[16673-16689]"
    }, {
      "left" : "last = NUMBER_CHAR_SIGN;",
      "right" : "last = NUMBER_CHAR_SIGN;",
      "info" : "ExpressionStatement[16613-16637]:ExpressionStatement[16702-16726]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[16650-16659]:ContinueStatement[16739-16748]"
    }, {
      "left" : "if (last == NUMBER_CHAR_EXP_E)",
      "right" : "if (last == NUMBER_CHAR_EXP_E)",
      "info" : "IfStatement[16687-16794]:IfStatement[16776-16883]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16718-16794]:Block[16807-16883]"
    }, {
      "left" : "last = NUMBER_CHAR_EXP_SIGN;",
      "right" : "last = NUMBER_CHAR_EXP_SIGN;",
      "info" : "ExpressionStatement[16732-16760]:ExpressionStatement[16821-16849]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[16773-16782]:ContinueStatement[16862-16871]"
    }, {
      "left" : "return PEEKED_NONE;",
      "right" : "return PEEKED_NONE;",
      "info" : "ReturnStatement[16805-16824]:ReturnStatement[16894-16913]"
    }, {
      "left" : "case '+':",
      "right" : "case '+':",
      "info" : "SwitchCase[16834-16843]:SwitchCase[16923-16932]"
    }, {
      "left" : "if (last == NUMBER_CHAR_EXP_E)",
      "right" : "if (last == NUMBER_CHAR_EXP_E)",
      "info" : "IfStatement[16854-16961]:IfStatement[16943-17050]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16885-16961]:Block[16974-17050]"
    }, {
      "left" : "last = NUMBER_CHAR_EXP_SIGN;",
      "right" : "last = NUMBER_CHAR_EXP_SIGN;",
      "info" : "ExpressionStatement[16899-16927]:ExpressionStatement[16988-17016]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[16940-16949]:ContinueStatement[17029-17038]"
    }, {
      "left" : "return PEEKED_NONE;",
      "right" : "return PEEKED_NONE;",
      "info" : "ReturnStatement[16972-16991]:ReturnStatement[17061-17080]"
    }, {
      "left" : "case 'e':",
      "right" : "case 'e':",
      "info" : "SwitchCase[17001-17010]:SwitchCase[17090-17099]"
    }, {
      "left" : "case 'E':",
      "right" : "case 'E':",
      "info" : "SwitchCase[17019-17028]:SwitchCase[17108-17117]"
    }, {
      "left" : "if (last == NUMBER_CHAR_DIGIT || last == NUMBER_CHAR_FRACTION_DIGIT)",
      "right" : "if (last == NUMBER_CHAR_DIGIT || last == NUMBER_CHAR_FRACTION_DIGIT)",
      "info" : "IfStatement[17039-17181]:IfStatement[17128-17270]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17108-17181]:Block[17197-17270]"
    }, {
      "left" : "last = NUMBER_CHAR_EXP_E;",
      "right" : "last = NUMBER_CHAR_EXP_E;",
      "info" : "ExpressionStatement[17122-17147]:ExpressionStatement[17211-17236]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[17160-17169]:ContinueStatement[17249-17258]"
    }, {
      "left" : "return PEEKED_NONE;",
      "right" : "return PEEKED_NONE;",
      "info" : "ReturnStatement[17192-17211]:ReturnStatement[17281-17300]"
    }, {
      "left" : "case '.':",
      "right" : "case '.':",
      "info" : "SwitchCase[17221-17230]:SwitchCase[17310-17319]"
    }, {
      "left" : "if (last == NUMBER_CHAR_DIGIT)",
      "right" : "if (last == NUMBER_CHAR_DIGIT)",
      "info" : "IfStatement[17241-17347]:IfStatement[17330-17436]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17272-17347]:Block[17361-17436]"
    }, {
      "left" : "last = NUMBER_CHAR_DECIMAL;",
      "right" : "last = NUMBER_CHAR_DECIMAL;",
      "info" : "ExpressionStatement[17286-17313]:ExpressionStatement[17375-17402]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[17326-17335]:ContinueStatement[17415-17424]"
    }, {
      "left" : "return PEEKED_NONE;",
      "right" : "return PEEKED_NONE;",
      "info" : "ReturnStatement[17358-17377]:ReturnStatement[17447-17466]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[17387-17395]:SwitchCase[17476-17484]"
    }, {
      "left" : "if (c < '0' || c > '9')",
      "right" : "if (c < '0' || c > '9')",
      "info" : "IfStatement[17406-17562]:IfStatement[17495-17651]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17430-17562]:Block[17519-17651]"
    }, {
      "left" : "if (!isLiteral(c))",
      "right" : "if (!isLiteral(c))",
      "info" : "IfStatement[17444-17518]:IfStatement[17533-17607]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17463-17518]:Block[17552-17607]"
    }, {
      "left" : "break charactersOfNumber;",
      "right" : "break charactersOfNumber;",
      "info" : "BreakStatement[17479-17504]:BreakStatement[17568-17593]"
    }, {
      "left" : "return PEEKED_NONE;",
      "right" : "return PEEKED_NONE;",
      "info" : "ReturnStatement[17531-17550]:ReturnStatement[17620-17639]"
    }, {
      "left" : "if (last == NUMBER_CHAR_SIGN || last == NUMBER_CHAR_NONE)",
      "right" : "if (last == NUMBER_CHAR_SIGN || last == NUMBER_CHAR_NONE)",
      "info" : "IfStatement[17573-18382]:IfStatement[17662-18471]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17631-17714]:Block[17720-17803]"
    }, {
      "left" : "value = -(c - '0');",
      "right" : "value = -(c - '0');",
      "info" : "ExpressionStatement[17645-17664]:ExpressionStatement[17734-17753]"
    }, {
      "left" : "last = NUMBER_CHAR_DIGIT;",
      "right" : "last = NUMBER_CHAR_DIGIT;",
      "info" : "ExpressionStatement[17677-17702]:ExpressionStatement[17766-17791]"
    }, {
      "left" : "if (last == NUMBER_CHAR_DIGIT)",
      "right" : "if (last == NUMBER_CHAR_DIGIT)",
      "info" : "IfStatement[17730-18382]:IfStatement[17819-18471]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17761-18139]:Block[17850-18228]"
    }, {
      "left" : "if (value == 0)",
      "right" : "if (value == 0)",
      "info" : "IfStatement[17775-17904]:IfStatement[17864-17993]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17791-17904]:Block[17880-17993]"
    }, {
      "left" : "return PEEKED_NONE;",
      "right" : "return PEEKED_NONE;",
      "info" : "ReturnStatement[17807-17826]:ReturnStatement[17896-17915]"
    }, {
      "left" : "long newValue = value * 10 - (c - '0');",
      "right" : "long newValue = value * 10 - (c - '0');",
      "info" : "VariableDeclarationStatement[17917-17956]:VariableDeclarationStatement[18006-18045]"
    }, {
      "left" : "fitsInLong &= value > MIN_INCOMPLETE_INTEGER\n                          || (value == MIN_INCOMPLETE_INTEGER && newValue < value);",
      "right" : "fitsInLong &= value > MIN_INCOMPLETE_INTEGER\n                          || (value == MIN_INCOMPLETE_INTEGER && newValue < value);",
      "info" : "ExpressionStatement[17969-18097]:ExpressionStatement[18058-18186]"
    }, {
      "left" : "value = newValue;",
      "right" : "value = newValue;",
      "info" : "ExpressionStatement[18110-18127]:ExpressionStatement[18199-18216]"
    }, {
      "left" : "if (last == NUMBER_CHAR_DECIMAL)",
      "right" : "if (last == NUMBER_CHAR_DECIMAL)",
      "info" : "IfStatement[18155-18382]:IfStatement[18244-18471]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18188-18248]:Block[18277-18337]"
    }, {
      "left" : "last = NUMBER_CHAR_FRACTION_DIGIT;",
      "right" : "last = NUMBER_CHAR_FRACTION_DIGIT;",
      "info" : "ExpressionStatement[18202-18236]:ExpressionStatement[18291-18325]"
    }, {
      "left" : "if (last == NUMBER_CHAR_EXP_E || last == NUMBER_CHAR_EXP_SIGN)",
      "right" : "if (last == NUMBER_CHAR_EXP_E || last == NUMBER_CHAR_EXP_SIGN)",
      "info" : "IfStatement[18264-18382]:IfStatement[18353-18471]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18327-18382]:Block[18416-18471]"
    }, {
      "left" : "last = NUMBER_CHAR_EXP_DIGIT;",
      "right" : "last = NUMBER_CHAR_EXP_DIGIT;",
      "info" : "ExpressionStatement[18341-18370]:ExpressionStatement[18430-18459]"
    }, {
      "left" : "if (last == NUMBER_CHAR_DIGIT && fitsInLong && (value != Long.MIN_VALUE || negative))",
      "right" : "if (last == NUMBER_CHAR_DIGIT && fitsInLong && (value != Long.MIN_VALUE || negative))",
      "info" : "IfStatement[18488-18912]:IfStatement[18577-19001]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18574-18683]:Block[18663-18772]"
    }, {
      "left" : "peekedLong = negative ? value : -value;",
      "right" : "peekedLong = negative ? value : -value;",
      "info" : "ExpressionStatement[18582-18621]:ExpressionStatement[18671-18710]"
    }, {
      "left" : "position += i;",
      "right" : "position += i;",
      "info" : "ExpressionStatement[18628-18642]:ExpressionStatement[18717-18731]"
    }, {
      "left" : "return peeked = PEEKED_LONG;",
      "right" : "return peeked = PEEKED_LONG;",
      "info" : "ReturnStatement[18649-18677]:ReturnStatement[18738-18766]"
    }, {
      "left" : "if (last == NUMBER_CHAR_DIGIT || last == NUMBER_CHAR_FRACTION_DIGIT || last == NUMBER_CHAR_EXP_DIGIT)",
      "right" : "if (last == NUMBER_CHAR_DIGIT || last == NUMBER_CHAR_FRACTION_DIGIT || last == NUMBER_CHAR_EXP_DIGIT)",
      "info" : "IfStatement[18693-18912]:IfStatement[18782-19001]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18795-18869]:Block[18884-18958]"
    }, {
      "left" : "peekedNumberLength = i;",
      "right" : "peekedNumberLength = i;",
      "info" : "ExpressionStatement[18803-18826]:ExpressionStatement[18892-18915]"
    }, {
      "left" : "return peeked = PEEKED_NUMBER;",
      "right" : "return peeked = PEEKED_NUMBER;",
      "info" : "ReturnStatement[18833-18863]:ReturnStatement[18922-18952]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18879-18912]:Block[18968-19001]"
    }, {
      "left" : "return PEEKED_NONE;",
      "right" : "return PEEKED_NONE;",
      "info" : "ReturnStatement[18887-18906]:ReturnStatement[18976-18995]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[18983-18990]:Modifier[19072-19079]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[18991-18995]:PrimitiveType[19080-19084]"
    }, {
      "left" : "consumeNonExecutePrefix",
      "right" : "consumeNonExecutePrefix",
      "info" : "SimpleName[18996-19019]:SimpleName[19085-19108]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19022-19457]:Block[19111-19546]"
    }, {
      "left" : "nextNonWhitespace(true);",
      "right" : "nextNonWhitespace(true);",
      "info" : "ExpressionStatement[19079-19103]:ExpressionStatement[19168-19192]"
    }, {
      "left" : "position--;",
      "right" : "position--;",
      "info" : "ExpressionStatement[19108-19119]:ExpressionStatement[19197-19208]"
    }, {
      "left" : "if (position + NON_EXECUTE_PREFIX.length > limit)",
      "right" : "if (position + NON_EXECUTE_PREFIX.length > limit)",
      "info" : "IfStatement[19125-19196]:IfStatement[19214-19285]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19175-19196]:Block[19264-19285]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[19183-19190]:ReturnStatement[19272-19279]"
    }, {
      "left" : "for (int i = 0; i < NON_EXECUTE_PREFIX.length; i++)",
      "right" : "for (int i = 0; i < NON_EXECUTE_PREFIX.length; i++)",
      "info" : "ForStatement[19202-19372]:ForStatement[19291-19461]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19254-19372]:Block[19343-19461]"
    }, {
      "left" : "if (in.charAt(position + i) != NON_EXECUTE_PREFIX[i])",
      "right" : "if (in.charAt(position + i) != NON_EXECUTE_PREFIX[i])",
      "info" : "IfStatement[19262-19366]:IfStatement[19351-19455]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19316-19366]:Block[19405-19455]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[19326-19333]:ReturnStatement[19415-19422]"
    }, {
      "left" : "position += NON_EXECUTE_PREFIX.length;",
      "right" : "position += NON_EXECUTE_PREFIX.length;",
      "info" : "ExpressionStatement[19415-19453]:ExpressionStatement[19504-19542]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[19461-19468]:Modifier[19550-19557]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[19469-19476]:PrimitiveType[19558-19565]"
    }, {
      "left" : "isLiteral",
      "right" : "isLiteral",
      "info" : "SimpleName[19477-19486]:SimpleName[19566-19575]"
    }, {
      "left" : "char c",
      "right" : "char c",
      "info" : "SingleVariableDeclaration[19487-19493]:SingleVariableDeclaration[19576-19582]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19495-19882]:Block[19584-19971]"
    }, {
      "left" : "switch (c) {\n      case '/':\n      case '\\\\':\n      case ';':\n      case '#':\n      case '=':\n        checkLenient(); // fall-through\n      case '{':\n      case '}':\n      case '[':\n      case ']':\n      case ':':\n      case ',':\n      case ' ':\n      case '\\t':\n      case '\\f':\n      case '\\r':\n      case '\\n':\n        return false;\n      default:\n        return true;\n    }",
      "right" : "switch (c) {\n      case '/':\n      case '\\\\':\n      case ';':\n      case '#':\n      case '=':\n        checkLenient(); // fall-through\n      case '{':\n      case '}':\n      case '[':\n      case ']':\n      case ':':\n      case ',':\n      case ' ':\n      case '\\t':\n      case '\\f':\n      case '\\r':\n      case '\\n':\n        return false;\n      default:\n        return true;\n    }",
      "info" : "SwitchStatement[19501-19878]:SwitchStatement[19590-19967]"
    }, {
      "left" : "case '/':",
      "right" : "case '/':",
      "info" : "SwitchCase[19520-19529]:SwitchCase[19609-19618]"
    }, {
      "left" : "case '\\\\':",
      "right" : "case '\\\\':",
      "info" : "SwitchCase[19536-19546]:SwitchCase[19625-19635]"
    }, {
      "left" : "case ';':",
      "right" : "case ';':",
      "info" : "SwitchCase[19553-19562]:SwitchCase[19642-19651]"
    }, {
      "left" : "case '#':",
      "right" : "case '#':",
      "info" : "SwitchCase[19569-19578]:SwitchCase[19658-19667]"
    }, {
      "left" : "case '=':",
      "right" : "case '=':",
      "info" : "SwitchCase[19585-19594]:SwitchCase[19674-19683]"
    }, {
      "left" : "checkLenient();",
      "right" : "checkLenient();",
      "info" : "ExpressionStatement[19603-19618]:ExpressionStatement[19692-19707]"
    }, {
      "left" : "case '{':",
      "right" : "case '{':",
      "info" : "SwitchCase[19641-19650]:SwitchCase[19730-19739]"
    }, {
      "left" : "case '}':",
      "right" : "case '}':",
      "info" : "SwitchCase[19657-19666]:SwitchCase[19746-19755]"
    }, {
      "left" : "case '[':",
      "right" : "case '[':",
      "info" : "SwitchCase[19673-19682]:SwitchCase[19762-19771]"
    }, {
      "left" : "case ']':",
      "right" : "case ']':",
      "info" : "SwitchCase[19689-19698]:SwitchCase[19778-19787]"
    }, {
      "left" : "case ':':",
      "right" : "case ':':",
      "info" : "SwitchCase[19705-19714]:SwitchCase[19794-19803]"
    }, {
      "left" : "case ',':",
      "right" : "case ',':",
      "info" : "SwitchCase[19721-19730]:SwitchCase[19810-19819]"
    }, {
      "left" : "case ' ':",
      "right" : "case ' ':",
      "info" : "SwitchCase[19737-19746]:SwitchCase[19826-19835]"
    }, {
      "left" : "case '\\t':",
      "right" : "case '\\t':",
      "info" : "SwitchCase[19753-19763]:SwitchCase[19842-19852]"
    }, {
      "left" : "case '\\f':",
      "right" : "case '\\f':",
      "info" : "SwitchCase[19770-19780]:SwitchCase[19859-19869]"
    }, {
      "left" : "case '\\r':",
      "right" : "case '\\r':",
      "info" : "SwitchCase[19787-19797]:SwitchCase[19876-19886]"
    }, {
      "left" : "case '\\n':",
      "right" : "case '\\n':",
      "info" : "SwitchCase[19804-19814]:SwitchCase[19893-19903]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[19823-19836]:ReturnStatement[19912-19925]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[19843-19851]:SwitchCase[19932-19940]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[19860-19872]:ReturnStatement[19949-19961]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[19983-19989]:Modifier[20072-20078]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[19990-19996]:SimpleType[20079-20085]"
    }, {
      "left" : "nextName",
      "right" : "nextName",
      "info" : "SimpleName[19997-20005]:SimpleName[20086-20094]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20008-20169]:Block[20097-20258]"
    }, {
      "left" : "String result = nextNameOrNull();",
      "right" : "String result = nextNameOrNull();",
      "info" : "VariableDeclarationStatement[20014-20047]:VariableDeclarationStatement[20103-20136]"
    }, {
      "left" : "if (result == null)",
      "right" : "if (result == null)",
      "info" : "IfStatement[20052-20146]:IfStatement[20141-20235]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20072-20146]:Block[20161-20235]"
    }, {
      "left" : "throw createParseError(\"Expected a name but was \" + peek());",
      "right" : "throw createParseError(\"Expected a name but was \" + peek());",
      "info" : "ThrowStatement[20080-20140]:ThrowStatement[20169-20229]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[20151-20165]:ReturnStatement[20240-20254]"
    }, {
      "left" : "@Nullable",
      "right" : "@Nullable",
      "info" : "MarkerAnnotation[20173-20182]:MarkerAnnotation[20262-20271]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[20185-20191]:Modifier[20274-20280]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[20192-20198]:SimpleType[20281-20287]"
    }, {
      "left" : "nextNameOrNull",
      "right" : "nextNameOrNull",
      "info" : "SimpleName[20199-20213]:SimpleName[20288-20302]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20216-20793]:Block[20305-20882]"
    }, {
      "left" : "int p = peeked;",
      "right" : "int p = peeked;",
      "info" : "VariableDeclarationStatement[20222-20237]:VariableDeclarationStatement[20311-20326]"
    }, {
      "left" : "if (p == PEEKED_NONE)",
      "right" : "if (p == PEEKED_NONE)",
      "info" : "IfStatement[20242-20291]:IfStatement[20331-20380]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20264-20291]:Block[20353-20380]"
    }, {
      "left" : "p = doPeek();",
      "right" : "p = doPeek();",
      "info" : "ExpressionStatement[20272-20285]:ExpressionStatement[20361-20374]"
    }, {
      "left" : "String result;",
      "right" : "String result;",
      "info" : "VariableDeclarationStatement[20296-20310]:VariableDeclarationStatement[20385-20399]"
    }, {
      "left" : "if (p == PEEKED_UNQUOTED_NAME)",
      "right" : "if (p == PEEKED_UNQUOTED_NAME)",
      "info" : "IfStatement[20315-20744]:IfStatement[20404-20833]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20346-20389]:Block[20435-20478]"
    }, {
      "left" : "result = nextUnquotedValue();",
      "right" : "result = nextUnquotedValue();",
      "info" : "ExpressionStatement[20354-20383]:ExpressionStatement[20443-20472]"
    }, {
      "left" : "if (p == PEEKED_SINGLE_QUOTED_NAME)",
      "right" : "if (p == PEEKED_SINGLE_QUOTED_NAME)",
      "info" : "IfStatement[20399-20744]:IfStatement[20488-20833]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20435-20480]:Block[20524-20569]"
    }, {
      "left" : "result = nextQuotedValue('\\'');",
      "right" : "result = nextQuotedValue('\\'');",
      "info" : "ExpressionStatement[20443-20474]:ExpressionStatement[20532-20563]"
    }, {
      "left" : "if (p == PEEKED_DOUBLE_QUOTED_NAME)",
      "right" : "if (p == PEEKED_DOUBLE_QUOTED_NAME)",
      "info" : "IfStatement[20490-20744]:IfStatement[20579-20833]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20526-20570]:Block[20615-20659]"
    }, {
      "left" : "result = nextQuotedValue('\"');",
      "right" : "result = nextQuotedValue('\"');",
      "info" : "ExpressionStatement[20534-20564]:ExpressionStatement[20623-20653]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20580-20744]:Block[20669-20833]"
    }, {
      "left" : "if (p != PEEKED_END_OBJECT && p != PEEKED_END_ARRAY)",
      "right" : "if (p != PEEKED_END_OBJECT && p != PEEKED_END_ARRAY)",
      "info" : "IfStatement[20588-20719]:IfStatement[20677-20808]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20641-20719]:Block[20730-20808]"
    }, {
      "left" : "throw createParseError(\"Expected a name but was \" + peek());",
      "right" : "throw createParseError(\"Expected a name but was \" + peek());",
      "info" : "ThrowStatement[20651-20711]:ThrowStatement[20740-20800]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[20726-20738]:ReturnStatement[20815-20827]"
    }, {
      "left" : "peeked = PEEKED_NONE;",
      "right" : "peeked = PEEKED_NONE;",
      "info" : "ExpressionStatement[20749-20770]:ExpressionStatement[20838-20859]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[20775-20789]:ReturnStatement[20864-20878]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[20797-20803]:Modifier[20886-20892]"
    }, {
      "left" : "CharSequence",
      "right" : "CharSequence",
      "info" : "SimpleType[20804-20816]:SimpleType[20893-20905]"
    }, {
      "left" : "nextNameAsCharSequence",
      "right" : "nextNameAsCharSequence",
      "info" : "SimpleName[20817-20839]:SimpleName[20906-20928]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20842-20882]:Block[20931-20971]"
    }, {
      "left" : "return nextName();",
      "right" : "return nextName();",
      "info" : "ReturnStatement[20860-20878]:ReturnStatement[20949-20967]"
    }, {
      "left" : "@SuppressWarnings(\"UnusedDeclaration\")",
      "right" : "@SuppressWarnings(\"UnusedDeclaration\")",
      "info" : "SingleMemberAnnotation[20886-20924]:SingleMemberAnnotation[20975-21013]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[20927-20934]:Modifier[21016-21023]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[20935-20941]:Modifier[21024-21030]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[20942-20947]:Modifier[21031-21036]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[20948-20953]:TYPE_DECLARATION_KIND[21037-21042]"
    }, {
      "left" : "MyCharSequence",
      "right" : "MyCharSequence",
      "info" : "SimpleName[20954-20968]:SimpleName[21043-21057]"
    }, {
      "left" : "CharSequence",
      "right" : "CharSequence",
      "info" : "SimpleType[20980-20992]:SimpleType[21069-21081]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[21095-21101]:Modifier[21184-21190]"
    }, {
      "left" : "MyCharSequence",
      "right" : "MyCharSequence",
      "info" : "SimpleName[21102-21116]:SimpleName[21191-21205]"
    }, {
      "left" : "CharSequence in",
      "right" : "CharSequence in",
      "info" : "SingleVariableDeclaration[21117-21132]:SingleVariableDeclaration[21206-21221]"
    }, {
      "left" : "int offset",
      "right" : "int offset",
      "info" : "SingleVariableDeclaration[21134-21144]:SingleVariableDeclaration[21223-21233]"
    }, {
      "left" : "int length",
      "right" : "int length",
      "info" : "SingleVariableDeclaration[21146-21156]:SingleVariableDeclaration[21235-21245]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21158-21241]:Block[21247-21330]"
    }, {
      "left" : "this.in = in;",
      "right" : "this.in = in;",
      "info" : "ExpressionStatement[21166-21179]:ExpressionStatement[21255-21268]"
    }, {
      "left" : "this.offset = offset;",
      "right" : "this.offset = offset;",
      "info" : "ExpressionStatement[21186-21207]:ExpressionStatement[21275-21296]"
    }, {
      "left" : "this.length = length;",
      "right" : "this.length = length;",
      "info" : "ExpressionStatement[21214-21235]:ExpressionStatement[21303-21324]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[21247-21256]:MarkerAnnotation[21336-21345]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[21261-21267]:Modifier[21350-21356]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[21268-21271]:PrimitiveType[21357-21360]"
    }, {
      "left" : "length",
      "right" : "length",
      "info" : "SimpleName[21272-21278]:SimpleName[21361-21367]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21281-21309]:Block[21370-21398]"
    }, {
      "left" : "return length;",
      "right" : "return length;",
      "info" : "ReturnStatement[21289-21303]:ReturnStatement[21378-21392]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[21315-21324]:MarkerAnnotation[21404-21413]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[21329-21335]:Modifier[21418-21424]"
    }, {
      "left" : "char",
      "right" : "char",
      "info" : "PrimitiveType[21336-21340]:PrimitiveType[21425-21429]"
    }, {
      "left" : "charAt",
      "right" : "charAt",
      "info" : "SimpleName[21341-21347]:SimpleName[21430-21436]"
    }, {
      "left" : "int index",
      "right" : "int index",
      "info" : "SingleVariableDeclaration[21348-21357]:SingleVariableDeclaration[21437-21446]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21359-21406]:Block[21448-21495]"
    }, {
      "left" : "return in.charAt(offset + index);",
      "right" : "return in.charAt(offset + index);",
      "info" : "ReturnStatement[21367-21400]:ReturnStatement[21456-21489]"
    }, {
      "left" : "@NotNull",
      "right" : "@NotNull",
      "info" : "MarkerAnnotation[21412-21420]:MarkerAnnotation[21501-21509]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[21425-21434]:MarkerAnnotation[21514-21523]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[21439-21445]:Modifier[21528-21534]"
    }, {
      "left" : "CharSequence",
      "right" : "CharSequence",
      "info" : "SimpleType[21446-21458]:SimpleType[21535-21547]"
    }, {
      "left" : "subSequence",
      "right" : "subSequence",
      "info" : "SimpleName[21459-21470]:SimpleName[21548-21559]"
    }, {
      "left" : "int start",
      "right" : "int start",
      "info" : "SingleVariableDeclaration[21471-21480]:SingleVariableDeclaration[21560-21569]"
    }, {
      "left" : "int end",
      "right" : "int end",
      "info" : "SingleVariableDeclaration[21482-21489]:SingleVariableDeclaration[21571-21578]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21491-21657]:Block[21580-21746]"
    }, {
      "left" : "if ((end - start) > length)",
      "right" : "if ((end - start) > length)",
      "info" : "IfStatement[21499-21592]:IfStatement[21588-21681]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21527-21592]:Block[21616-21681]"
    }, {
      "left" : "throw new StringIndexOutOfBoundsException(end);",
      "right" : "throw new StringIndexOutOfBoundsException(end);",
      "info" : "ThrowStatement[21537-21584]:ThrowStatement[21626-21673]"
    }, {
      "left" : "return in.subSequence(offset + start, offset + end);",
      "right" : "return in.subSequence(offset + start, offset + end);",
      "info" : "ReturnStatement[21599-21651]:ReturnStatement[21688-21740]"
    }, {
      "left" : "@NotNull",
      "right" : "@NotNull",
      "info" : "MarkerAnnotation[21663-21671]:MarkerAnnotation[21752-21760]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[21676-21685]:MarkerAnnotation[21765-21774]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[21690-21696]:Modifier[21779-21785]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[21697-21703]:SimpleType[21786-21792]"
    }, {
      "left" : "toString",
      "right" : "toString",
      "info" : "SimpleName[21704-21712]:SimpleName[21793-21801]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21715-21783]:Block[21804-21872]"
    }, {
      "left" : "return in.subSequence(offset, in.length()).toString();",
      "right" : "return in.subSequence(offset, in.length()).toString();",
      "info" : "ReturnStatement[21723-21777]:ReturnStatement[21812-21866]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[21789-21798]:MarkerAnnotation[21878-21887]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[21803-21809]:Modifier[21892-21898]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[21810-21817]:PrimitiveType[21899-21906]"
    }, {
      "left" : "equals",
      "right" : "equals",
      "info" : "SimpleName[21818-21824]:SimpleName[21907-21913]"
    }, {
      "left" : "Object object",
      "right" : "Object object",
      "info" : "SingleVariableDeclaration[21825-21838]:SingleVariableDeclaration[21914-21927]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21840-22176]:Block[21929-22265]"
    }, {
      "left" : "if (!(object instanceof CharSequence))",
      "right" : "if (!(object instanceof CharSequence))",
      "info" : "IfStatement[21848-21918]:IfStatement[21937-22007]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21887-21918]:Block[21976-22007]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[21897-21910]:ReturnStatement[21986-21999]"
    }, {
      "left" : "CharSequence o = (CharSequence)object;",
      "right" : "CharSequence o = (CharSequence)object;",
      "info" : "VariableDeclarationStatement[21926-21964]:VariableDeclarationStatement[22015-22053]"
    }, {
      "left" : "if (o.length() != length)",
      "right" : "if (o.length() != length)",
      "info" : "IfStatement[21971-22028]:IfStatement[22060-22117]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21997-22028]:Block[22086-22117]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[22007-22020]:ReturnStatement[22096-22109]"
    }, {
      "left" : "for (int i = 0; i < length; i++)",
      "right" : "for (int i = 0; i < length; i++)",
      "info" : "ForStatement[22035-22151]:ForStatement[22124-22240]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22068-22151]:Block[22157-22240]"
    }, {
      "left" : "if (o.charAt(i) != charAt(i))",
      "right" : "if (o.charAt(i) != charAt(i))",
      "info" : "IfStatement[22078-22143]:IfStatement[22167-22232]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22108-22143]:Block[22197-22232]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[22120-22133]:ReturnStatement[22209-22222]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[22158-22170]:ReturnStatement[22247-22259]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[22184-22190]:Modifier[22273-22279]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[22191-22197]:SimpleType[22280-22286]"
    }, {
      "left" : "nextAsString",
      "right" : "nextAsString",
      "info" : "SimpleName[22198-22210]:SimpleName[22287-22299]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22213-22279]:Block[22302-22368]"
    }, {
      "left" : "return peek() == JsonToken.STRING ? nextString() : null;",
      "right" : "return peek() == JsonToken.STRING ? nextString() : null;",
      "info" : "ReturnStatement[22219-22275]:ReturnStatement[22308-22364]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[22283-22289]:Modifier[22372-22378]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[22290-22296]:SimpleType[22379-22385]"
    }, {
      "left" : "nextNullableString",
      "right" : "nextNullableString",
      "info" : "SimpleName[22297-22315]:SimpleName[22386-22404]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22318-22446]:Block[22407-22535]"
    }, {
      "left" : "if (peek() == JsonToken.NULL)",
      "right" : "if (peek() == JsonToken.NULL)",
      "info" : "IfStatement[22324-22442]:IfStatement[22413-22531]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22354-22398]:Block[22443-22487]"
    }, {
      "left" : "nextNull();",
      "right" : "nextNull();",
      "info" : "ExpressionStatement[22362-22373]:ExpressionStatement[22451-22462]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[22380-22392]:ReturnStatement[22469-22481]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22408-22442]:Block[22497-22531]"
    }, {
      "left" : "return nextString();",
      "right" : "return nextString();",
      "info" : "ReturnStatement[22416-22436]:ReturnStatement[22505-22525]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[22450-22456]:Modifier[22539-22545]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[22457-22463]:SimpleType[22546-22552]"
    }, {
      "left" : "nextString",
      "right" : "nextString",
      "info" : "SimpleName[22464-22474]:SimpleName[22553-22563]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22477-22512]:Block[22566-22601]"
    }, {
      "left" : "return nextString(false);",
      "right" : "return nextString(false);",
      "info" : "ReturnStatement[22483-22508]:ReturnStatement[22572-22597]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[22810-22816]:Modifier[22899-22905]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[22817-22823]:SimpleType[22906-22912]"
    }, {
      "left" : "nextString",
      "right" : "nextString",
      "info" : "SimpleName[22824-22834]:SimpleName[22913-22923]"
    }, {
      "left" : "boolean anyPrimitiveAsString",
      "right" : "boolean anyPrimitiveAsString",
      "info" : "SingleVariableDeclaration[22835-22863]:SingleVariableDeclaration[22924-22952]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22865-23946]:Block[22954-24035]"
    }, {
      "left" : "int p = peeked;",
      "right" : "int p = peeked;",
      "info" : "VariableDeclarationStatement[22871-22886]:VariableDeclarationStatement[22960-22975]"
    }, {
      "left" : "if (p == PEEKED_NONE)",
      "right" : "if (p == PEEKED_NONE)",
      "info" : "IfStatement[22891-22940]:IfStatement[22980-23029]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22913-22940]:Block[23002-23029]"
    }, {
      "left" : "p = doPeek();",
      "right" : "p = doPeek();",
      "info" : "ExpressionStatement[22921-22934]:ExpressionStatement[23010-23023]"
    }, {
      "left" : "String result;",
      "right" : "String result;",
      "info" : "VariableDeclarationStatement[22945-22959]:VariableDeclarationStatement[23034-23048]"
    }, {
      "left" : "if (p == PEEKED_UNQUOTED)",
      "right" : "if (p == PEEKED_UNQUOTED)",
      "info" : "IfStatement[22964-23897]:IfStatement[23053-23986]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22990-23033]:Block[23079-23122]"
    }, {
      "left" : "result = nextUnquotedValue();",
      "right" : "result = nextUnquotedValue();",
      "info" : "ExpressionStatement[22998-23027]:ExpressionStatement[23087-23116]"
    }, {
      "left" : "if (p == PEEKED_SINGLE_QUOTED)",
      "right" : "if (p == PEEKED_SINGLE_QUOTED)",
      "info" : "IfStatement[23043-23897]:IfStatement[23132-23986]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23074-23119]:Block[23163-23208]"
    }, {
      "left" : "result = nextQuotedValue('\\'');",
      "right" : "result = nextQuotedValue('\\'');",
      "info" : "ExpressionStatement[23082-23113]:ExpressionStatement[23171-23202]"
    }, {
      "left" : "if (p == PEEKED_DOUBLE_QUOTED)",
      "right" : "if (p == PEEKED_DOUBLE_QUOTED)",
      "info" : "IfStatement[23129-23897]:IfStatement[23218-23986]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23160-23204]:Block[23249-23293]"
    }, {
      "left" : "result = nextQuotedValue('\"');",
      "right" : "result = nextQuotedValue('\"');",
      "info" : "ExpressionStatement[23168-23198]:ExpressionStatement[23257-23287]"
    }, {
      "left" : "if (p == PEEKED_BUFFERED)",
      "right" : "if (p == PEEKED_BUFFERED)",
      "info" : "IfStatement[23214-23897]:IfStatement[23303-23986]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23240-23303]:Block[23329-23392]"
    }, {
      "left" : "result = peekedString;",
      "right" : "result = peekedString;",
      "info" : "ExpressionStatement[23248-23270]:ExpressionStatement[23337-23359]"
    }, {
      "left" : "peekedString = null;",
      "right" : "peekedString = null;",
      "info" : "ExpressionStatement[23277-23297]:ExpressionStatement[23366-23386]"
    }, {
      "left" : "if (p == PEEKED_LONG)",
      "right" : "if (p == PEEKED_LONG)",
      "info" : "IfStatement[23313-23897]:IfStatement[23402-23986]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23335-23384]:Block[23424-23473]"
    }, {
      "left" : "result = Long.toString(peekedLong);",
      "right" : "result = Long.toString(peekedLong);",
      "info" : "ExpressionStatement[23343-23378]:ExpressionStatement[23432-23467]"
    }, {
      "left" : "if (p == PEEKED_NUMBER)",
      "right" : "if (p == PEEKED_NUMBER)",
      "info" : "IfStatement[23394-23897]:IfStatement[23483-23986]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23418-23551]:Block[23507-23640]"
    }, {
      "left" : "int end = position + peekedNumberLength;",
      "right" : "int end = position + peekedNumberLength;",
      "info" : "VariableDeclarationStatement[23426-23466]:VariableDeclarationStatement[23515-23555]"
    }, {
      "left" : "result = in.subSequence(position, end).toString();",
      "right" : "result = in.subSequence(position, end).toString();",
      "info" : "ExpressionStatement[23473-23523]:ExpressionStatement[23562-23612]"
    }, {
      "left" : "position = end;",
      "right" : "position = end;",
      "info" : "ExpressionStatement[23530-23545]:ExpressionStatement[23619-23634]"
    }, {
      "left" : "if (anyPrimitiveAsString && p == PEEKED_TRUE)",
      "right" : "if (anyPrimitiveAsString && p == PEEKED_TRUE)",
      "info" : "IfStatement[23561-23897]:IfStatement[23650-23986]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23607-23637]:Block[23696-23726]"
    }, {
      "left" : "result = \"true\";",
      "right" : "result = \"true\";",
      "info" : "ExpressionStatement[23615-23631]:ExpressionStatement[23704-23720]"
    }, {
      "left" : "if (anyPrimitiveAsString && p == PEEKED_FALSE)",
      "right" : "if (anyPrimitiveAsString && p == PEEKED_FALSE)",
      "info" : "IfStatement[23647-23897]:IfStatement[23736-23986]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23694-23725]:Block[23783-23814]"
    }, {
      "left" : "result = \"false\";",
      "right" : "result = \"false\";",
      "info" : "ExpressionStatement[23702-23719]:ExpressionStatement[23791-23808]"
    }, {
      "left" : "if (anyPrimitiveAsString && p == PEEKED_NULL)",
      "right" : "if (anyPrimitiveAsString && p == PEEKED_NULL)",
      "info" : "IfStatement[23735-23897]:IfStatement[23824-23986]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23781-23811]:Block[23870-23900]"
    }, {
      "left" : "result = \"null\";",
      "right" : "result = \"null\";",
      "info" : "ExpressionStatement[23789-23805]:ExpressionStatement[23878-23894]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23821-23897]:Block[23910-23986]"
    }, {
      "left" : "throw createParseError(\"Expected a string but was \" + peek());",
      "right" : "throw createParseError(\"Expected a string but was \" + peek());",
      "info" : "ThrowStatement[23829-23891]:ThrowStatement[23918-23980]"
    }, {
      "left" : "peeked = PEEKED_NONE;",
      "right" : "peeked = PEEKED_NONE;",
      "info" : "ExpressionStatement[23902-23923]:ExpressionStatement[23991-24012]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[23928-23942]:ReturnStatement[24017-24031]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[24170-24176]:Modifier[24259-24265]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[24177-24184]:PrimitiveType[24266-24273]"
    }, {
      "left" : "nextBoolean",
      "right" : "nextBoolean",
      "info" : "SimpleName[24185-24196]:SimpleName[24274-24285]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24199-24515]:Block[24288-24604]"
    }, {
      "left" : "int p = peeked;",
      "right" : "int p = peeked;",
      "info" : "VariableDeclarationStatement[24205-24220]:VariableDeclarationStatement[24294-24309]"
    }, {
      "left" : "if (p == PEEKED_NONE)",
      "right" : "if (p == PEEKED_NONE)",
      "info" : "IfStatement[24225-24274]:IfStatement[24314-24363]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24247-24274]:Block[24336-24363]"
    }, {
      "left" : "p = doPeek();",
      "right" : "p = doPeek();",
      "info" : "ExpressionStatement[24255-24268]:ExpressionStatement[24344-24357]"
    }, {
      "left" : "if (p == PEEKED_TRUE)",
      "right" : "if (p == PEEKED_TRUE)",
      "info" : "IfStatement[24279-24443]:IfStatement[24368-24532]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24301-24355]:Block[24390-24444]"
    }, {
      "left" : "peeked = PEEKED_NONE;",
      "right" : "peeked = PEEKED_NONE;",
      "info" : "ExpressionStatement[24309-24330]:ExpressionStatement[24398-24419]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[24337-24349]:ReturnStatement[24426-24438]"
    }, {
      "left" : "if (p == PEEKED_FALSE)",
      "right" : "if (p == PEEKED_FALSE)",
      "info" : "IfStatement[24365-24443]:IfStatement[24454-24532]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24388-24443]:Block[24477-24532]"
    }, {
      "left" : "peeked = PEEKED_NONE;",
      "right" : "peeked = PEEKED_NONE;",
      "info" : "ExpressionStatement[24396-24417]:ExpressionStatement[24485-24506]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[24424-24437]:ReturnStatement[24513-24526]"
    }, {
      "left" : "throw createParseError(\"Expected a boolean but was \" + peek());",
      "right" : "throw createParseError(\"Expected a boolean but was \" + peek());",
      "info" : "ThrowStatement[24448-24511]:ThrowStatement[24537-24600]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[24733-24739]:Modifier[24822-24828]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[24740-24744]:PrimitiveType[24829-24833]"
    }, {
      "left" : "nextNull",
      "right" : "nextNull",
      "info" : "SimpleName[24745-24753]:SimpleName[24834-24842]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24756-24979]:Block[24845-25068]"
    }, {
      "left" : "int p = peeked;",
      "right" : "int p = peeked;",
      "info" : "VariableDeclarationStatement[24762-24777]:VariableDeclarationStatement[24851-24866]"
    }, {
      "left" : "if (p == PEEKED_NONE)",
      "right" : "if (p == PEEKED_NONE)",
      "info" : "IfStatement[24782-24831]:IfStatement[24871-24920]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24804-24831]:Block[24893-24920]"
    }, {
      "left" : "p = doPeek();",
      "right" : "p = doPeek();",
      "info" : "ExpressionStatement[24812-24825]:ExpressionStatement[24901-24914]"
    }, {
      "left" : "if (p == PEEKED_NULL)",
      "right" : "if (p == PEEKED_NULL)",
      "info" : "IfStatement[24836-24975]:IfStatement[24925-25064]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24858-24893]:Block[24947-24982]"
    }, {
      "left" : "peeked = PEEKED_NONE;",
      "right" : "peeked = PEEKED_NONE;",
      "info" : "ExpressionStatement[24866-24887]:ExpressionStatement[24955-24976]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24903-24975]:Block[24992-25064]"
    }, {
      "left" : "throw createParseError(\"Expected null but was \" + peek());",
      "right" : "throw createParseError(\"Expected null but was \" + peek());",
      "info" : "ThrowStatement[24911-24969]:ThrowStatement[25000-25058]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[25415-25421]:Modifier[25504-25510]"
    }, {
      "left" : "double",
      "right" : "double",
      "info" : "PrimitiveType[25422-25428]:PrimitiveType[25511-25517]"
    }, {
      "left" : "nextDouble",
      "right" : "nextDouble",
      "info" : "SimpleName[25429-25439]:SimpleName[25518-25528]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25442-26493]:Block[25531-26582]"
    }, {
      "left" : "int p = peeked;",
      "right" : "int p = peeked;",
      "info" : "VariableDeclarationStatement[25448-25463]:VariableDeclarationStatement[25537-25552]"
    }, {
      "left" : "if (p == PEEKED_NONE)",
      "right" : "if (p == PEEKED_NONE)",
      "info" : "IfStatement[25468-25517]:IfStatement[25557-25606]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25490-25517]:Block[25579-25606]"
    }, {
      "left" : "p = doPeek();",
      "right" : "p = doPeek();",
      "info" : "ExpressionStatement[25498-25511]:ExpressionStatement[25587-25600]"
    }, {
      "left" : "if (p == PEEKED_LONG)",
      "right" : "if (p == PEEKED_LONG)",
      "info" : "IfStatement[25523-25613]:IfStatement[25612-25702]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25545-25613]:Block[25634-25702]"
    }, {
      "left" : "peeked = PEEKED_NONE;",
      "right" : "peeked = PEEKED_NONE;",
      "info" : "ExpressionStatement[25553-25574]:ExpressionStatement[25642-25663]"
    }, {
      "left" : "return (double)peekedLong;",
      "right" : "return (double)peekedLong;",
      "info" : "ReturnStatement[25581-25607]:ReturnStatement[25670-25696]"
    }, {
      "left" : "if (p == PEEKED_NUMBER)",
      "right" : "if (p == PEEKED_NUMBER)",
      "info" : "IfStatement[25619-26134]:IfStatement[25708-26223]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25643-25782]:Block[25732-25871]"
    }, {
      "left" : "int end = position + peekedNumberLength;",
      "right" : "int end = position + peekedNumberLength;",
      "info" : "VariableDeclarationStatement[25651-25691]:VariableDeclarationStatement[25740-25780]"
    }, {
      "left" : "peekedString = in.subSequence(position, end).toString();",
      "right" : "peekedString = in.subSequence(position, end).toString();",
      "info" : "ExpressionStatement[25698-25754]:ExpressionStatement[25787-25843]"
    }, {
      "left" : "position = end;",
      "right" : "position = end;",
      "info" : "ExpressionStatement[25761-25776]:ExpressionStatement[25850-25865]"
    }, {
      "left" : "if (p == PEEKED_SINGLE_QUOTED || p == PEEKED_DOUBLE_QUOTED)",
      "right" : "if (p == PEEKED_SINGLE_QUOTED || p == PEEKED_DOUBLE_QUOTED)",
      "info" : "IfStatement[25792-26134]:IfStatement[25881-26223]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25852-25937]:Block[25941-26026]"
    }, {
      "left" : "peekedString = nextQuotedValue(p == PEEKED_SINGLE_QUOTED ? '\\'' : '\"');",
      "right" : "peekedString = nextQuotedValue(p == PEEKED_SINGLE_QUOTED ? '\\'' : '\"');",
      "info" : "ExpressionStatement[25860-25931]:ExpressionStatement[25949-26020]"
    }, {
      "left" : "if (p == PEEKED_UNQUOTED)",
      "right" : "if (p == PEEKED_UNQUOTED)",
      "info" : "IfStatement[25947-26134]:IfStatement[26036-26223]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25973-26022]:Block[26062-26111]"
    }, {
      "left" : "peekedString = nextUnquotedValue();",
      "right" : "peekedString = nextUnquotedValue();",
      "info" : "ExpressionStatement[25981-26016]:ExpressionStatement[26070-26105]"
    }, {
      "left" : "if (p != PEEKED_BUFFERED)",
      "right" : "if (p != PEEKED_BUFFERED)",
      "info" : "IfStatement[26032-26134]:IfStatement[26121-26223]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26058-26134]:Block[26147-26223]"
    }, {
      "left" : "throw createParseError(\"Expected a double but was \" + peek());",
      "right" : "throw createParseError(\"Expected a double but was \" + peek());",
      "info" : "ThrowStatement[26066-26128]:ThrowStatement[26155-26217]"
    }, {
      "left" : "peeked = PEEKED_BUFFERED;",
      "right" : "peeked = PEEKED_BUFFERED;",
      "info" : "ExpressionStatement[26140-26165]:ExpressionStatement[26229-26254]"
    }, {
      "left" : "double result = Double.parseDouble(peekedString);",
      "right" : "double result = Double.parseDouble(peekedString);",
      "info" : "VariableDeclarationStatement[26170-26219]:VariableDeclarationStatement[26259-26308]"
    }, {
      "left" : "if (!lenient && (Double.isNaN(result) || Double.isInfinite(result)))",
      "right" : "if (!lenient && (Double.isNaN(result) || Double.isInfinite(result)))",
      "info" : "IfStatement[26267-26419]:IfStatement[26356-26508]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26336-26419]:Block[26425-26508]"
    }, {
      "left" : "throw createParseError(\"JSON forbids NaN and infinities: \" + result);",
      "right" : "throw createParseError(\"JSON forbids NaN and infinities: \" + result);",
      "info" : "ThrowStatement[26344-26413]:ThrowStatement[26433-26502]"
    }, {
      "left" : "peekedString = null;",
      "right" : "peekedString = null;",
      "info" : "ExpressionStatement[26424-26444]:ExpressionStatement[26513-26533]"
    }, {
      "left" : "peeked = PEEKED_NONE;",
      "right" : "peeked = PEEKED_NONE;",
      "info" : "ExpressionStatement[26449-26470]:ExpressionStatement[26538-26559]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[26475-26489]:ReturnStatement[26564-26578]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[27013-27019]:Modifier[27102-27108]"
    }, {
      "left" : "long",
      "right" : "long",
      "info" : "PrimitiveType[27020-27024]:PrimitiveType[27109-27113]"
    }, {
      "left" : "nextLong",
      "right" : "nextLong",
      "info" : "SimpleName[27025-27033]:SimpleName[27114-27122]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27036-28348]:Block[27125-28437]"
    }, {
      "left" : "int p = peeked;",
      "right" : "int p = peeked;",
      "info" : "VariableDeclarationStatement[27042-27057]:VariableDeclarationStatement[27131-27146]"
    }, {
      "left" : "if (p == PEEKED_NONE)",
      "right" : "if (p == PEEKED_NONE)",
      "info" : "IfStatement[27062-27111]:IfStatement[27151-27200]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27084-27111]:Block[27173-27200]"
    }, {
      "left" : "p = doPeek();",
      "right" : "p = doPeek();",
      "info" : "ExpressionStatement[27092-27105]:ExpressionStatement[27181-27194]"
    }, {
      "left" : "if (p == PEEKED_LONG)",
      "right" : "if (p == PEEKED_LONG)",
      "info" : "IfStatement[27117-27199]:IfStatement[27206-27288]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27139-27199]:Block[27228-27288]"
    }, {
      "left" : "peeked = PEEKED_NONE;",
      "right" : "peeked = PEEKED_NONE;",
      "info" : "ExpressionStatement[27147-27168]:ExpressionStatement[27236-27257]"
    }, {
      "left" : "return peekedLong;",
      "right" : "return peekedLong;",
      "info" : "ReturnStatement[27175-27193]:ReturnStatement[27264-27282]"
    }, {
      "left" : "if (p == PEEKED_NUMBER)",
      "right" : "if (p == PEEKED_NUMBER)",
      "info" : "IfStatement[27205-27835]:IfStatement[27294-27924]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27229-27368]:Block[27318-27457]"
    }, {
      "left" : "int end = position + peekedNumberLength;",
      "right" : "int end = position + peekedNumberLength;",
      "info" : "VariableDeclarationStatement[27237-27277]:VariableDeclarationStatement[27326-27366]"
    }, {
      "left" : "peekedString = in.subSequence(position, end).toString();",
      "right" : "peekedString = in.subSequence(position, end).toString();",
      "info" : "ExpressionStatement[27284-27340]:ExpressionStatement[27373-27429]"
    }, {
      "left" : "position = end;",
      "right" : "position = end;",
      "info" : "ExpressionStatement[27347-27362]:ExpressionStatement[27436-27451]"
    }, {
      "left" : "if (p == PEEKED_SINGLE_QUOTED || p == PEEKED_DOUBLE_QUOTED)",
      "right" : "if (p == PEEKED_SINGLE_QUOTED || p == PEEKED_DOUBLE_QUOTED)",
      "info" : "IfStatement[27378-27835]:IfStatement[27467-27924]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27438-27751]:Block[27527-27840]"
    }, {
      "left" : "peekedString = nextQuotedValue(p == PEEKED_SINGLE_QUOTED ? '\\'' : '\"');",
      "right" : "peekedString = nextQuotedValue(p == PEEKED_SINGLE_QUOTED ? '\\'' : '\"');",
      "info" : "ExpressionStatement[27446-27517]:ExpressionStatement[27535-27606]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[27524-27745]:TryStatement[27613-27834]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27528-27642]:Block[27617-27731]"
    }, {
      "left" : "long result = Long.parseLong(peekedString);",
      "right" : "long result = Long.parseLong(peekedString);",
      "info" : "VariableDeclarationStatement[27538-27581]:VariableDeclarationStatement[27627-27670]"
    }, {
      "left" : "peeked = PEEKED_NONE;",
      "right" : "peeked = PEEKED_NONE;",
      "info" : "ExpressionStatement[27590-27611]:ExpressionStatement[27679-27700]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[27620-27634]:ReturnStatement[27709-27723]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27687-27745]:Block[27776-27834]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27761-27835]:Block[27850-27924]"
    }, {
      "left" : "throw createParseError(\"Expected a long but was \" + peek());",
      "right" : "throw createParseError(\"Expected a long but was \" + peek());",
      "info" : "ThrowStatement[27769-27829]:ThrowStatement[27858-27918]"
    }, {
      "left" : "peeked = PEEKED_BUFFERED;",
      "right" : "peeked = PEEKED_BUFFERED;",
      "info" : "ExpressionStatement[27841-27866]:ExpressionStatement[27930-27955]"
    }, {
      "left" : "double asDouble = Double.parseDouble(peekedString);",
      "right" : "double asDouble = Double.parseDouble(peekedString);",
      "info" : "VariableDeclarationStatement[27871-27922]:VariableDeclarationStatement[27960-28011]"
    }, {
      "left" : "long result = (long)asDouble;",
      "right" : "long result = (long)asDouble;",
      "info" : "VariableDeclarationStatement[27970-27999]:VariableDeclarationStatement[28059-28088]"
    }, {
      "left" : "if (result != asDouble)",
      "right" : "if (result != asDouble)",
      "info" : "IfStatement[28004-28274]:IfStatement[28093-28363]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28028-28274]:Block[28117-28363]"
    }, {
      "left" : "throw new NumberFormatException(\"Expected a long but was \" + peekedString\n                                      + \" at line \" + getLineNumber() + \" column \" + getColumnNumber());",
      "right" : "throw new NumberFormatException(\"Expected a long but was \" + peekedString\n                                      + \" at line \" + getLineNumber() + \" column \" + getColumnNumber());",
      "info" : "ThrowStatement[28090-28268]:ThrowStatement[28179-28357]"
    }, {
      "left" : "peekedString = null;",
      "right" : "peekedString = null;",
      "info" : "ExpressionStatement[28279-28299]:ExpressionStatement[28368-28388]"
    }, {
      "left" : "peeked = PEEKED_NONE;",
      "right" : "peeked = PEEKED_NONE;",
      "info" : "ExpressionStatement[28304-28325]:ExpressionStatement[28393-28414]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[28330-28344]:ReturnStatement[28419-28433]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[28770-28777]:Modifier[28859-28866]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[28778-28784]:SimpleType[28867-28873]"
    }, {
      "left" : "nextQuotedValue",
      "right" : "nextQuotedValue",
      "info" : "SimpleName[28785-28800]:SimpleName[28874-28889]"
    }, {
      "left" : "char quote",
      "right" : "char quote",
      "info" : "SingleVariableDeclaration[28801-28811]:SingleVariableDeclaration[28890-28900]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28813-30032]:Block[28902-30121]"
    }, {
      "left" : "CharSequence in = this.in;",
      "right" : "CharSequence in = this.in;",
      "info" : "VariableDeclarationStatement[28912-28938]:VariableDeclarationStatement[29001-29027]"
    }, {
      "left" : "int p = position;",
      "right" : "int p = position;",
      "info" : "VariableDeclarationStatement[28944-28961]:VariableDeclarationStatement[29033-29050]"
    }, {
      "left" : "int l = limit;",
      "right" : "int l = limit;",
      "info" : "VariableDeclarationStatement[28966-28980]:VariableDeclarationStatement[29055-29069]"
    }, {
      "left" : "int start = p;",
      "right" : "int start = p;",
      "info" : "VariableDeclarationStatement[29057-29071]:VariableDeclarationStatement[29146-29160]"
    }, {
      "left" : "StringBuilder builder = null;",
      "right" : "StringBuilder builder = null;",
      "info" : "VariableDeclarationStatement[29076-29105]:VariableDeclarationStatement[29165-29194]"
    }, {
      "left" : "while (p < l)",
      "right" : "while (p < l)",
      "info" : "WhileStatement[29110-29959]:WhileStatement[29199-30048]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29124-29959]:Block[29213-30048]"
    }, {
      "left" : "char c = in.charAt(p++);",
      "right" : "char c = in.charAt(p++);",
      "info" : "VariableDeclarationStatement[29132-29156]:VariableDeclarationStatement[29221-29245]"
    }, {
      "left" : "if (c == quote)",
      "right" : "if (c == quote)",
      "info" : "IfStatement[29163-29860]:IfStatement[29252-29949]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29179-29396]:Block[29268-29485]"
    }, {
      "left" : "position = p;",
      "right" : "position = p;",
      "info" : "ExpressionStatement[29189-29202]:ExpressionStatement[29278-29291]"
    }, {
      "left" : "if (builder == null)",
      "right" : "if (builder == null)",
      "info" : "IfStatement[29211-29388]:IfStatement[29300-29477]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29232-29301]:Block[29321-29390]"
    }, {
      "left" : "return in.subSequence(start, p - 1).toString();",
      "right" : "return in.subSequence(start, p - 1).toString();",
      "info" : "ReturnStatement[29244-29291]:ReturnStatement[29333-29380]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29315-29388]:Block[29404-29477]"
    }, {
      "left" : "return builder.append(in, start, p - 1).toString();",
      "right" : "return builder.append(in, start, p - 1).toString();",
      "info" : "ReturnStatement[29327-29378]:ReturnStatement[29416-29467]"
    }, {
      "left" : "if (c == '\\\\')",
      "right" : "if (c == '\\\\')",
      "info" : "IfStatement[29408-29860]:IfStatement[29497-29949]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29423-29860]:Block[29512-29949]"
    }, {
      "left" : "position = p;",
      "right" : "position = p;",
      "info" : "ExpressionStatement[29433-29446]:ExpressionStatement[29522-29535]"
    }, {
      "left" : "if (builder == null)",
      "right" : "if (builder == null)",
      "info" : "IfStatement[29455-29703]:IfStatement[29544-29792]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29476-29703]:Block[29565-29792]"
    }, {
      "left" : "if (this.builder == null)",
      "right" : "if (this.builder == null)",
      "info" : "IfStatement[29488-29659]:IfStatement[29577-29748]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29514-29591]:Block[29603-29680]"
    }, {
      "left" : "this.builder = new StringBuilder((p - start) + 16);",
      "right" : "this.builder = new StringBuilder((p - start) + 16);",
      "info" : "ExpressionStatement[29528-29579]:ExpressionStatement[29617-29668]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29607-29659]:Block[29696-29748]"
    }, {
      "left" : "this.builder.setLength(0);",
      "right" : "this.builder.setLength(0);",
      "info" : "ExpressionStatement[29621-29647]:ExpressionStatement[29710-29736]"
    }, {
      "left" : "builder = this.builder;",
      "right" : "builder = this.builder;",
      "info" : "ExpressionStatement[29670-29693]:ExpressionStatement[29759-29782]"
    }, {
      "left" : "builder.append(in, start, p - 1);",
      "right" : "builder.append(in, start, p - 1);",
      "info" : "ExpressionStatement[29712-29745]:ExpressionStatement[29801-29834]"
    }, {
      "left" : "builder.append(readEscapeCharacter());",
      "right" : "builder.append(readEscapeCharacter());",
      "info" : "ExpressionStatement[29754-29792]:ExpressionStatement[29843-29881]"
    }, {
      "left" : "p = position;",
      "right" : "p = position;",
      "info" : "ExpressionStatement[29801-29814]:ExpressionStatement[29890-29903]"
    }, {
      "left" : "l = limit;",
      "right" : "l = limit;",
      "info" : "ExpressionStatement[29823-29833]:ExpressionStatement[29912-29922]"
    }, {
      "left" : "start = p;",
      "right" : "start = p;",
      "info" : "ExpressionStatement[29842-29852]:ExpressionStatement[29931-29941]"
    }, {
      "left" : "position = p;",
      "right" : "position = p;",
      "info" : "ExpressionStatement[29964-29977]:ExpressionStatement[30053-30066]"
    }, {
      "left" : "throw createParseError(\"Unterminated string\");",
      "right" : "throw createParseError(\"Unterminated string\");",
      "info" : "ThrowStatement[29982-30028]:ThrowStatement[30071-30117]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[30092-30099]:Modifier[30181-30188]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[30100-30106]:SimpleType[30189-30195]"
    }, {
      "left" : "nextUnquotedValue",
      "right" : "nextUnquotedValue",
      "info" : "SimpleName[30107-30124]:SimpleName[30196-30213]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30127-30730]:Block[30216-30819]"
    }, {
      "left" : "int i = position;",
      "right" : "int i = position;",
      "info" : "VariableDeclarationStatement[30133-30150]:VariableDeclarationStatement[30222-30239]"
    }, {
      "left" : "findNonLiteralCharacter:\n    for (; i < limit; i++) {\n      switch (in.charAt(i)) {\n        case '/':\n        case '\\\\':\n        case ';':\n        case '#':\n        case '=':\n          checkLenient(); // fall-through\n        case '{':\n        case '}':\n        case '[':\n        case ']':\n        case ':':\n        case ',':\n        case ' ':\n        case '\\t':\n        case '\\f':\n        case '\\r':\n        case '\\n':\n          break findNonLiteralCharacter;\n      }\n    }",
      "right" : "findNonLiteralCharacter:\n    for (; i < limit; i++) {\n      switch (in.charAt(i)) {\n        case '/':\n        case '\\\\':\n        case ';':\n        case '#':\n        case '=':\n          checkLenient(); // fall-through\n        case '{':\n        case '}':\n        case '[':\n        case ']':\n        case ':':\n        case ',':\n        case ' ':\n        case '\\t':\n        case '\\f':\n        case '\\r':\n        case '\\n':\n          break findNonLiteralCharacter;\n      }\n    }",
      "info" : "LabeledStatement[30155-30628]:LabeledStatement[30244-30717]"
    }, {
      "left" : "for (; i < limit; i++)",
      "right" : "for (; i < limit; i++)",
      "info" : "ForStatement[30184-30628]:ForStatement[30273-30717]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30207-30628]:Block[30296-30717]"
    }, {
      "left" : "switch (in.charAt(i)) {\n        case '/':\n        case '\\\\':\n        case ';':\n        case '#':\n        case '=':\n          checkLenient(); // fall-through\n        case '{':\n        case '}':\n        case '[':\n        case ']':\n        case ':':\n        case ',':\n        case ' ':\n        case '\\t':\n        case '\\f':\n        case '\\r':\n        case '\\n':\n          break findNonLiteralCharacter;\n      }",
      "right" : "switch (in.charAt(i)) {\n        case '/':\n        case '\\\\':\n        case ';':\n        case '#':\n        case '=':\n          checkLenient(); // fall-through\n        case '{':\n        case '}':\n        case '[':\n        case ']':\n        case ':':\n        case ',':\n        case ' ':\n        case '\\t':\n        case '\\f':\n        case '\\r':\n        case '\\n':\n          break findNonLiteralCharacter;\n      }",
      "info" : "SwitchStatement[30215-30622]:SwitchStatement[30304-30711]"
    }, {
      "left" : "case '/':",
      "right" : "case '/':",
      "info" : "SwitchCase[30247-30256]:SwitchCase[30336-30345]"
    }, {
      "left" : "case '\\\\':",
      "right" : "case '\\\\':",
      "info" : "SwitchCase[30265-30275]:SwitchCase[30354-30364]"
    }, {
      "left" : "case ';':",
      "right" : "case ';':",
      "info" : "SwitchCase[30284-30293]:SwitchCase[30373-30382]"
    }, {
      "left" : "case '#':",
      "right" : "case '#':",
      "info" : "SwitchCase[30302-30311]:SwitchCase[30391-30400]"
    }, {
      "left" : "case '=':",
      "right" : "case '=':",
      "info" : "SwitchCase[30320-30329]:SwitchCase[30409-30418]"
    }, {
      "left" : "checkLenient();",
      "right" : "checkLenient();",
      "info" : "ExpressionStatement[30340-30355]:ExpressionStatement[30429-30444]"
    }, {
      "left" : "case '{':",
      "right" : "case '{':",
      "info" : "SwitchCase[30380-30389]:SwitchCase[30469-30478]"
    }, {
      "left" : "case '}':",
      "right" : "case '}':",
      "info" : "SwitchCase[30398-30407]:SwitchCase[30487-30496]"
    }, {
      "left" : "case '[':",
      "right" : "case '[':",
      "info" : "SwitchCase[30416-30425]:SwitchCase[30505-30514]"
    }, {
      "left" : "case ']':",
      "right" : "case ']':",
      "info" : "SwitchCase[30434-30443]:SwitchCase[30523-30532]"
    }, {
      "left" : "case ':':",
      "right" : "case ':':",
      "info" : "SwitchCase[30452-30461]:SwitchCase[30541-30550]"
    }, {
      "left" : "case ',':",
      "right" : "case ',':",
      "info" : "SwitchCase[30470-30479]:SwitchCase[30559-30568]"
    }, {
      "left" : "case ' ':",
      "right" : "case ' ':",
      "info" : "SwitchCase[30488-30497]:SwitchCase[30577-30586]"
    }, {
      "left" : "case '\\t':",
      "right" : "case '\\t':",
      "info" : "SwitchCase[30506-30516]:SwitchCase[30595-30605]"
    }, {
      "left" : "case '\\f':",
      "right" : "case '\\f':",
      "info" : "SwitchCase[30525-30535]:SwitchCase[30614-30624]"
    }, {
      "left" : "case '\\r':",
      "right" : "case '\\r':",
      "info" : "SwitchCase[30544-30554]:SwitchCase[30633-30643]"
    }, {
      "left" : "case '\\n':",
      "right" : "case '\\n':",
      "info" : "SwitchCase[30563-30573]:SwitchCase[30652-30662]"
    }, {
      "left" : "break findNonLiteralCharacter;",
      "right" : "break findNonLiteralCharacter;",
      "info" : "BreakStatement[30584-30614]:BreakStatement[30673-30703]"
    }, {
      "left" : "String result = in.subSequence(position, i).toString();",
      "right" : "String result = in.subSequence(position, i).toString();",
      "info" : "VariableDeclarationStatement[30634-30689]:VariableDeclarationStatement[30723-30778]"
    }, {
      "left" : "position = i;",
      "right" : "position = i;",
      "info" : "ExpressionStatement[30694-30707]:ExpressionStatement[30783-30796]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[30712-30726]:ReturnStatement[30801-30815]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[30734-30741]:Modifier[30823-30830]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[30742-30746]:PrimitiveType[30831-30835]"
    }, {
      "left" : "skipQuotedValue",
      "right" : "skipQuotedValue",
      "info" : "SimpleName[30747-30762]:SimpleName[30836-30851]"
    }, {
      "left" : "char quote",
      "right" : "char quote",
      "info" : "SingleVariableDeclaration[30763-30773]:SingleVariableDeclaration[30852-30862]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30775-31435]:Block[30864-31524]"
    }, {
      "left" : "CharSequence in = this.in;",
      "right" : "CharSequence in = this.in;",
      "info" : "VariableDeclarationStatement[30874-30900]:VariableDeclarationStatement[30963-30989]"
    }, {
      "left" : "int p = position;",
      "right" : "int p = position;",
      "info" : "VariableDeclarationStatement[30905-30922]:VariableDeclarationStatement[30994-31011]"
    }, {
      "left" : "int l = limit;",
      "right" : "int l = limit;",
      "info" : "VariableDeclarationStatement[30927-30941]:VariableDeclarationStatement[31016-31030]"
    }, {
      "left" : "while (p < l)",
      "right" : "while (p < l)",
      "info" : "WhileStatement[31018-31362]:WhileStatement[31107-31451]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31032-31362]:Block[31121-31451]"
    }, {
      "left" : "int c = in.charAt(p++);",
      "right" : "int c = in.charAt(p++);",
      "info" : "VariableDeclarationStatement[31040-31063]:VariableDeclarationStatement[31129-31152]"
    }, {
      "left" : "if (c == quote)",
      "right" : "if (c == quote)",
      "info" : "IfStatement[31070-31263]:IfStatement[31159-31352]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31086-31133]:Block[31175-31222]"
    }, {
      "left" : "position = p;",
      "right" : "position = p;",
      "info" : "ExpressionStatement[31096-31109]:ExpressionStatement[31185-31198]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[31118-31125]:ReturnStatement[31207-31214]"
    }, {
      "left" : "if (c == '\\\\')",
      "right" : "if (c == '\\\\')",
      "info" : "IfStatement[31145-31263]:IfStatement[31234-31352]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31160-31263]:Block[31249-31352]"
    }, {
      "left" : "position = p;",
      "right" : "position = p;",
      "info" : "ExpressionStatement[31170-31183]:ExpressionStatement[31259-31272]"
    }, {
      "left" : "readEscapeCharacter();",
      "right" : "readEscapeCharacter();",
      "info" : "ExpressionStatement[31192-31214]:ExpressionStatement[31281-31303]"
    }, {
      "left" : "p = position;",
      "right" : "p = position;",
      "info" : "ExpressionStatement[31223-31236]:ExpressionStatement[31312-31325]"
    }, {
      "left" : "l = limit;",
      "right" : "l = limit;",
      "info" : "ExpressionStatement[31245-31255]:ExpressionStatement[31334-31344]"
    }, {
      "left" : "position = p;",
      "right" : "position = p;",
      "info" : "ExpressionStatement[31367-31380]:ExpressionStatement[31456-31469]"
    }, {
      "left" : "throw createParseError(\"Unterminated string\");",
      "right" : "throw createParseError(\"Unterminated string\");",
      "info" : "ThrowStatement[31385-31431]:ThrowStatement[31474-31520]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[31439-31446]:Modifier[31528-31535]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[31447-31451]:PrimitiveType[31536-31540]"
    }, {
      "left" : "skipUnquotedValue",
      "right" : "skipUnquotedValue",
      "info" : "SimpleName[31452-31469]:SimpleName[31541-31558]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31472-31967]:Block[31561-32056]"
    }, {
      "left" : "int i = position;",
      "right" : "int i = position;",
      "info" : "VariableDeclarationStatement[31478-31495]:VariableDeclarationStatement[31567-31584]"
    }, {
      "left" : "for (; i < limit; i++)",
      "right" : "for (; i < limit; i++)",
      "info" : "ForStatement[31500-31945]:ForStatement[31589-32034]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31523-31945]:Block[31612-32034]"
    }, {
      "left" : "switch (in.charAt(i)) {\n        case '/':\n        case '\\\\':\n        case ';':\n        case '#':\n        case '=':\n          checkLenient(); // fall-through\n        case '{':\n        case '}':\n        case '[':\n        case ']':\n        case ':':\n        case ',':\n        case ' ':\n        case '\\t':\n        case '\\f':\n        case '\\r':\n        case '\\n':\n          position = i;\n          return;\n      }",
      "right" : "switch (in.charAt(i)) {\n        case '/':\n        case '\\\\':\n        case ';':\n        case '#':\n        case '=':\n          checkLenient(); // fall-through\n        case '{':\n        case '}':\n        case '[':\n        case ']':\n        case ':':\n        case ',':\n        case ' ':\n        case '\\t':\n        case '\\f':\n        case '\\r':\n        case '\\n':\n          position = i;\n          return;\n      }",
      "info" : "SwitchStatement[31531-31939]:SwitchStatement[31620-32028]"
    }, {
      "left" : "case '/':",
      "right" : "case '/':",
      "info" : "SwitchCase[31563-31572]:SwitchCase[31652-31661]"
    }, {
      "left" : "case '\\\\':",
      "right" : "case '\\\\':",
      "info" : "SwitchCase[31581-31591]:SwitchCase[31670-31680]"
    }, {
      "left" : "case ';':",
      "right" : "case ';':",
      "info" : "SwitchCase[31600-31609]:SwitchCase[31689-31698]"
    }, {
      "left" : "case '#':",
      "right" : "case '#':",
      "info" : "SwitchCase[31618-31627]:SwitchCase[31707-31716]"
    }, {
      "left" : "case '=':",
      "right" : "case '=':",
      "info" : "SwitchCase[31636-31645]:SwitchCase[31725-31734]"
    }, {
      "left" : "checkLenient();",
      "right" : "checkLenient();",
      "info" : "ExpressionStatement[31656-31671]:ExpressionStatement[31745-31760]"
    }, {
      "left" : "case '{':",
      "right" : "case '{':",
      "info" : "SwitchCase[31696-31705]:SwitchCase[31785-31794]"
    }, {
      "left" : "case '}':",
      "right" : "case '}':",
      "info" : "SwitchCase[31714-31723]:SwitchCase[31803-31812]"
    }, {
      "left" : "case '[':",
      "right" : "case '[':",
      "info" : "SwitchCase[31732-31741]:SwitchCase[31821-31830]"
    }, {
      "left" : "case ']':",
      "right" : "case ']':",
      "info" : "SwitchCase[31750-31759]:SwitchCase[31839-31848]"
    }, {
      "left" : "case ':':",
      "right" : "case ':':",
      "info" : "SwitchCase[31768-31777]:SwitchCase[31857-31866]"
    }, {
      "left" : "case ',':",
      "right" : "case ',':",
      "info" : "SwitchCase[31786-31795]:SwitchCase[31875-31884]"
    }, {
      "left" : "case ' ':",
      "right" : "case ' ':",
      "info" : "SwitchCase[31804-31813]:SwitchCase[31893-31902]"
    }, {
      "left" : "case '\\t':",
      "right" : "case '\\t':",
      "info" : "SwitchCase[31822-31832]:SwitchCase[31911-31921]"
    }, {
      "left" : "case '\\f':",
      "right" : "case '\\f':",
      "info" : "SwitchCase[31841-31851]:SwitchCase[31930-31940]"
    }, {
      "left" : "case '\\r':",
      "right" : "case '\\r':",
      "info" : "SwitchCase[31860-31870]:SwitchCase[31949-31959]"
    }, {
      "left" : "case '\\n':",
      "right" : "case '\\n':",
      "info" : "SwitchCase[31879-31889]:SwitchCase[31968-31978]"
    }, {
      "left" : "position = i;",
      "right" : "position = i;",
      "info" : "ExpressionStatement[31900-31913]:ExpressionStatement[31989-32002]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[31924-31931]:ReturnStatement[32013-32020]"
    }, {
      "left" : "position = i;",
      "right" : "position = i;",
      "info" : "ExpressionStatement[31950-31963]:ExpressionStatement[32039-32052]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[32485-32491]:Modifier[32574-32580]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[32492-32495]:PrimitiveType[32581-32584]"
    }, {
      "left" : "nextInt",
      "right" : "nextInt",
      "info" : "SimpleName[32496-32503]:SimpleName[32585-32592]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32506-34134]:Block[32595-34223]"
    }, {
      "left" : "int p = peeked;",
      "right" : "int p = peeked;",
      "info" : "VariableDeclarationStatement[32512-32527]:VariableDeclarationStatement[32601-32616]"
    }, {
      "left" : "if (p == PEEKED_NONE)",
      "right" : "if (p == PEEKED_NONE)",
      "info" : "IfStatement[32532-32581]:IfStatement[32621-32670]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32554-32581]:Block[32643-32670]"
    }, {
      "left" : "p = doPeek();",
      "right" : "p = doPeek();",
      "info" : "ExpressionStatement[32562-32575]:ExpressionStatement[32651-32664]"
    }, {
      "left" : "int result;",
      "right" : "int result;",
      "info" : "VariableDeclarationStatement[32587-32598]:VariableDeclarationStatement[32676-32687]"
    }, {
      "left" : "if (p == PEEKED_LONG)",
      "right" : "if (p == PEEKED_LONG)",
      "info" : "IfStatement[32603-32995]:IfStatement[32692-33084]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32625-32995]:Block[32714-33084]"
    }, {
      "left" : "result = (int)peekedLong;",
      "right" : "result = (int)peekedLong;",
      "info" : "ExpressionStatement[32633-32658]:ExpressionStatement[32722-32747]"
    }, {
      "left" : "if (peekedLong != result)",
      "right" : "if (peekedLong != result)",
      "info" : "IfStatement[32665-32940]:IfStatement[32754-33029]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32691-32940]:Block[32780-33029]"
    }, {
      "left" : "throw new NumberFormatException(\"Expected an int but was \" + peekedLong\n                                        + \" at line \" + getLineNumber() + \" column \" + getColumnNumber());",
      "right" : "throw new NumberFormatException(\"Expected an int but was \" + peekedLong\n                                        + \" at line \" + getLineNumber() + \" column \" + getColumnNumber());",
      "info" : "ThrowStatement[32754-32932]:ThrowStatement[32843-33021]"
    }, {
      "left" : "peeked = PEEKED_NONE;",
      "right" : "peeked = PEEKED_NONE;",
      "info" : "ExpressionStatement[32947-32968]:ExpressionStatement[33036-33057]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[32975-32989]:ReturnStatement[33064-33078]"
    }, {
      "left" : "if (p == PEEKED_NUMBER)",
      "right" : "if (p == PEEKED_NUMBER)",
      "info" : "IfStatement[33001-33628]:IfStatement[33090-33717]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33025-33164]:Block[33114-33253]"
    }, {
      "left" : "int end = position + peekedNumberLength;",
      "right" : "int end = position + peekedNumberLength;",
      "info" : "VariableDeclarationStatement[33033-33073]:VariableDeclarationStatement[33122-33162]"
    }, {
      "left" : "peekedString = in.subSequence(position, end).toString();",
      "right" : "peekedString = in.subSequence(position, end).toString();",
      "info" : "ExpressionStatement[33080-33136]:ExpressionStatement[33169-33225]"
    }, {
      "left" : "position = end;",
      "right" : "position = end;",
      "info" : "ExpressionStatement[33143-33158]:ExpressionStatement[33232-33247]"
    }, {
      "left" : "if (p == PEEKED_SINGLE_QUOTED || p == PEEKED_DOUBLE_QUOTED)",
      "right" : "if (p == PEEKED_SINGLE_QUOTED || p == PEEKED_DOUBLE_QUOTED)",
      "info" : "IfStatement[33174-33628]:IfStatement[33263-33717]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33234-33544]:Block[33323-33633]"
    }, {
      "left" : "peekedString = nextQuotedValue(p == PEEKED_SINGLE_QUOTED ? '\\'' : '\"');",
      "right" : "peekedString = nextQuotedValue(p == PEEKED_SINGLE_QUOTED ? '\\'' : '\"');",
      "info" : "ExpressionStatement[33242-33313]:ExpressionStatement[33331-33402]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[33320-33538]:TryStatement[33409-33627]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33324-33435]:Block[33413-33524]"
    }, {
      "left" : "result = Integer.parseInt(peekedString);",
      "right" : "result = Integer.parseInt(peekedString);",
      "info" : "ExpressionStatement[33334-33374]:ExpressionStatement[33423-33463]"
    }, {
      "left" : "peeked = PEEKED_NONE;",
      "right" : "peeked = PEEKED_NONE;",
      "info" : "ExpressionStatement[33383-33404]:ExpressionStatement[33472-33493]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[33413-33427]:ReturnStatement[33502-33516]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33480-33538]:Block[33569-33627]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33554-33628]:Block[33643-33717]"
    }, {
      "left" : "throw createParseError(\"Expected an int but was \" + peek());",
      "right" : "throw createParseError(\"Expected an int but was \" + peek());",
      "info" : "ThrowStatement[33562-33622]:ThrowStatement[33651-33711]"
    }, {
      "left" : "peeked = PEEKED_BUFFERED;",
      "right" : "peeked = PEEKED_BUFFERED;",
      "info" : "ExpressionStatement[33634-33659]:ExpressionStatement[33723-33748]"
    }, {
      "left" : "double asDouble = Double.parseDouble(peekedString);",
      "right" : "double asDouble = Double.parseDouble(peekedString);",
      "info" : "VariableDeclarationStatement[33664-33715]:VariableDeclarationStatement[33753-33804]"
    }, {
      "left" : "result = (int)asDouble;",
      "right" : "result = (int)asDouble;",
      "info" : "ExpressionStatement[33763-33786]:ExpressionStatement[33852-33875]"
    }, {
      "left" : "if (result != asDouble)",
      "right" : "if (result != asDouble)",
      "info" : "IfStatement[33791-34060]:IfStatement[33880-34149]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33815-34060]:Block[33904-34149]"
    }, {
      "left" : "throw new NumberFormatException(\"Expected an int but was \" + peekedString\n                                      + \" at line \" + getLineNumber() + \" column \" + getColumnNumber());",
      "right" : "throw new NumberFormatException(\"Expected an int but was \" + peekedString\n                                      + \" at line \" + getLineNumber() + \" column \" + getColumnNumber());",
      "info" : "ThrowStatement[33876-34054]:ThrowStatement[33965-34143]"
    }, {
      "left" : "peekedString = null;",
      "right" : "peekedString = null;",
      "info" : "ExpressionStatement[34065-34085]:ExpressionStatement[34154-34174]"
    }, {
      "left" : "peeked = PEEKED_NONE;",
      "right" : "peeked = PEEKED_NONE;",
      "info" : "ExpressionStatement[34090-34111]:ExpressionStatement[34179-34200]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[34116-34130]:ReturnStatement[34205-34219]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[34222-34231]:MarkerAnnotation[34311-34320]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[34234-34240]:Modifier[34323-34329]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[34241-34245]:PrimitiveType[34330-34334]"
    }, {
      "left" : "close",
      "right" : "close",
      "info" : "SimpleName[34246-34251]:SimpleName[34335-34340]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34254-34337]:Block[34343-34426]"
    }, {
      "left" : "peeked = PEEKED_NONE;",
      "right" : "peeked = PEEKED_NONE;",
      "info" : "ExpressionStatement[34260-34281]:ExpressionStatement[34349-34370]"
    }, {
      "left" : "stack[0] = JsonScope.CLOSED;",
      "right" : "stack[0] = JsonScope.CLOSED;",
      "info" : "ExpressionStatement[34286-34314]:ExpressionStatement[34375-34403]"
    }, {
      "left" : "stackSize = 1;",
      "right" : "stackSize = 1;",
      "info" : "ExpressionStatement[34319-34333]:ExpressionStatement[34408-34422]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[34566-34572]:Modifier[34655-34661]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[34573-34577]:PrimitiveType[34662-34666]"
    }, {
      "left" : "skipValue",
      "right" : "skipValue",
      "info" : "SimpleName[34578-34587]:SimpleName[34667-34676]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34590-35504]:Block[34679-35593]"
    }, {
      "left" : "int count = 0;",
      "right" : "int count = 0;",
      "info" : "VariableDeclarationStatement[34596-34610]:VariableDeclarationStatement[34685-34699]"
    }, {
      "left" : "do{...}",
      "right" : "do{...}",
      "info" : "DoStatement[34615-35500]:DoStatement[34704-35589]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34618-35476]:Block[34707-35565]"
    }, {
      "left" : "int p = peeked;",
      "right" : "int p = peeked;",
      "info" : "VariableDeclarationStatement[34626-34641]:VariableDeclarationStatement[34715-34730]"
    }, {
      "left" : "if (p == PEEKED_NONE)",
      "right" : "if (p == PEEKED_NONE)",
      "info" : "IfStatement[34648-34701]:IfStatement[34737-34790]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34670-34701]:Block[34759-34790]"
    }, {
      "left" : "p = doPeek();",
      "right" : "p = doPeek();",
      "info" : "ExpressionStatement[34680-34693]:ExpressionStatement[34769-34782]"
    }, {
      "left" : "if (p == PEEKED_BEGIN_ARRAY)",
      "right" : "if (p == PEEKED_BEGIN_ARRAY)",
      "info" : "IfStatement[34709-35442]:IfStatement[34798-35531]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34738-34801]:Block[34827-34890]"
    }, {
      "left" : "push(JsonScope.EMPTY_ARRAY);",
      "right" : "push(JsonScope.EMPTY_ARRAY);",
      "info" : "ExpressionStatement[34748-34776]:ExpressionStatement[34837-34865]"
    }, {
      "left" : "count++;",
      "right" : "count++;",
      "info" : "ExpressionStatement[34785-34793]:ExpressionStatement[34874-34882]"
    }, {
      "left" : "if (p == PEEKED_BEGIN_OBJECT)",
      "right" : "if (p == PEEKED_BEGIN_OBJECT)",
      "info" : "IfStatement[34813-35442]:IfStatement[34902-35531]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34843-34907]:Block[34932-34996]"
    }, {
      "left" : "push(JsonScope.EMPTY_OBJECT);",
      "right" : "push(JsonScope.EMPTY_OBJECT);",
      "info" : "ExpressionStatement[34853-34882]:ExpressionStatement[34942-34971]"
    }, {
      "left" : "count++;",
      "right" : "count++;",
      "info" : "ExpressionStatement[34891-34899]:ExpressionStatement[34980-34988]"
    }, {
      "left" : "if (p == PEEKED_END_ARRAY || p == PEEKED_END_OBJECT)",
      "right" : "if (p == PEEKED_END_ARRAY || p == PEEKED_END_OBJECT)",
      "info" : "IfStatement[34919-35442]:IfStatement[35008-35531]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34972-35019]:Block[35061-35108]"
    }, {
      "left" : "stackSize--;",
      "right" : "stackSize--;",
      "info" : "ExpressionStatement[34982-34994]:ExpressionStatement[35071-35083]"
    }, {
      "left" : "count--;",
      "right" : "count--;",
      "info" : "ExpressionStatement[35003-35011]:ExpressionStatement[35092-35100]"
    }, {
      "left" : "if (p == PEEKED_UNQUOTED_NAME || p == PEEKED_UNQUOTED)",
      "right" : "if (p == PEEKED_UNQUOTED_NAME || p == PEEKED_UNQUOTED)",
      "info" : "IfStatement[35031-35442]:IfStatement[35120-35531]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35086-35124]:Block[35175-35213]"
    }, {
      "left" : "skipUnquotedValue();",
      "right" : "skipUnquotedValue();",
      "info" : "ExpressionStatement[35096-35116]:ExpressionStatement[35185-35205]"
    }, {
      "left" : "if (p == PEEKED_SINGLE_QUOTED || p == PEEKED_SINGLE_QUOTED_NAME)",
      "right" : "if (p == PEEKED_SINGLE_QUOTED || p == PEEKED_SINGLE_QUOTED_NAME)",
      "info" : "IfStatement[35136-35442]:IfStatement[35225-35531]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35201-35241]:Block[35290-35330]"
    }, {
      "left" : "skipQuotedValue('\\'');",
      "right" : "skipQuotedValue('\\'');",
      "info" : "ExpressionStatement[35211-35233]:ExpressionStatement[35300-35322]"
    }, {
      "left" : "if (p == PEEKED_DOUBLE_QUOTED || p == PEEKED_DOUBLE_QUOTED_NAME)",
      "right" : "if (p == PEEKED_DOUBLE_QUOTED || p == PEEKED_DOUBLE_QUOTED_NAME)",
      "info" : "IfStatement[35253-35442]:IfStatement[35342-35531]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35318-35357]:Block[35407-35446]"
    }, {
      "left" : "skipQuotedValue('\"');",
      "right" : "skipQuotedValue('\"');",
      "info" : "ExpressionStatement[35328-35349]:ExpressionStatement[35417-35438]"
    }, {
      "left" : "if (p == PEEKED_NUMBER)",
      "right" : "if (p == PEEKED_NUMBER)",
      "info" : "IfStatement[35369-35442]:IfStatement[35458-35531]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35393-35442]:Block[35482-35531]"
    }, {
      "left" : "position += peekedNumberLength;",
      "right" : "position += peekedNumberLength;",
      "info" : "ExpressionStatement[35403-35434]:ExpressionStatement[35492-35523]"
    }, {
      "left" : "peeked = PEEKED_NONE;",
      "right" : "peeked = PEEKED_NONE;",
      "info" : "ExpressionStatement[35449-35470]:ExpressionStatement[35538-35559]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[35508-35514]:Modifier[35597-35603]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[35515-35519]:PrimitiveType[35604-35608]"
    }, {
      "left" : "skipValues",
      "right" : "skipValues",
      "info" : "SimpleName[35520-35530]:SimpleName[35609-35619]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35533-35587]:Block[35622-35676]"
    }, {
      "left" : "while (hasNext())",
      "right" : "while (hasNext())",
      "info" : "WhileStatement[35539-35583]:WhileStatement[35628-35672]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35557-35583]:Block[35646-35672]"
    }, {
      "left" : "skipValue();",
      "right" : "skipValue();",
      "info" : "ExpressionStatement[35565-35577]:ExpressionStatement[35654-35666]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[35591-35598]:Modifier[35680-35687]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[35599-35603]:PrimitiveType[35688-35692]"
    }, {
      "left" : "push",
      "right" : "push",
      "info" : "SimpleName[35604-35608]:SimpleName[35693-35697]"
    }, {
      "left" : "int newTop",
      "right" : "int newTop",
      "info" : "SingleVariableDeclaration[35609-35619]:SingleVariableDeclaration[35698-35708]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35621-35831]:Block[35710-35920]"
    }, {
      "left" : "if (stackSize == stack.length)",
      "right" : "if (stackSize == stack.length)",
      "info" : "IfStatement[35627-35794]:IfStatement[35716-35883]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35658-35794]:Block[35747-35883]"
    }, {
      "left" : "int[] newStack = new int[stackSize * 2];",
      "right" : "int[] newStack = new int[stackSize * 2];",
      "info" : "VariableDeclarationStatement[35666-35706]:VariableDeclarationStatement[35755-35795]"
    }, {
      "left" : "System.arraycopy(stack, 0, newStack, 0, stackSize);",
      "right" : "System.arraycopy(stack, 0, newStack, 0, stackSize);",
      "info" : "ExpressionStatement[35713-35764]:ExpressionStatement[35802-35853]"
    }, {
      "left" : "stack = newStack;",
      "right" : "stack = newStack;",
      "info" : "ExpressionStatement[35771-35788]:ExpressionStatement[35860-35877]"
    }, {
      "left" : "stack[stackSize++] = newTop;",
      "right" : "stack[stackSize++] = newTop;",
      "info" : "ExpressionStatement[35799-35827]:ExpressionStatement[35888-35916]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[35835-35842]:Modifier[35924-35931]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[35843-35846]:PrimitiveType[35932-35935]"
    }, {
      "left" : "getLineNumber",
      "right" : "getLineNumber",
      "info" : "SimpleName[35847-35860]:SimpleName[35936-35949]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35863-36014]:Block[35952-36103]"
    }, {
      "left" : "int result = 1;",
      "right" : "int result = 1;",
      "info" : "VariableDeclarationStatement[35869-35884]:VariableDeclarationStatement[35958-35973]"
    }, {
      "left" : "for (int i = 0; i < position; i++)",
      "right" : "for (int i = 0; i < position; i++)",
      "info" : "ForStatement[35889-35991]:ForStatement[35978-36080]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35924-35991]:Block[36013-36080]"
    }, {
      "left" : "if (in.charAt(i) == '\\n')",
      "right" : "if (in.charAt(i) == '\\n')",
      "info" : "IfStatement[35932-35985]:IfStatement[36021-36074]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35958-35985]:Block[36047-36074]"
    }, {
      "left" : "result++;",
      "right" : "result++;",
      "info" : "ExpressionStatement[35968-35977]:ExpressionStatement[36057-36066]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[35996-36010]:ReturnStatement[36085-36099]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[36018-36025]:Modifier[36107-36114]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[36026-36029]:PrimitiveType[36115-36118]"
    }, {
      "left" : "getColumnNumber",
      "right" : "getColumnNumber",
      "info" : "SimpleName[36030-36045]:SimpleName[36119-36134]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36048-36240]:Block[36137-36329]"
    }, {
      "left" : "int result = 1;",
      "right" : "int result = 1;",
      "info" : "VariableDeclarationStatement[36054-36069]:VariableDeclarationStatement[36143-36158]"
    }, {
      "left" : "for (int i = 0; i < position; i++)",
      "right" : "for (int i = 0; i < position; i++)",
      "info" : "ForStatement[36074-36217]:ForStatement[36163-36306]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36109-36217]:Block[36198-36306]"
    }, {
      "left" : "if (in.charAt(i) == '\\n')",
      "right" : "if (in.charAt(i) == '\\n')",
      "info" : "IfStatement[36117-36211]:IfStatement[36206-36300]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36143-36172]:Block[36232-36261]"
    }, {
      "left" : "result = 1;",
      "right" : "result = 1;",
      "info" : "ExpressionStatement[36153-36164]:ExpressionStatement[36242-36253]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36184-36211]:Block[36273-36300]"
    }, {
      "left" : "result++;",
      "right" : "result++;",
      "info" : "ExpressionStatement[36194-36203]:ExpressionStatement[36283-36292]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[36222-36236]:ReturnStatement[36311-36325]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[36547-36554]:Modifier[36636-36643]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[36555-36558]:PrimitiveType[36644-36647]"
    }, {
      "left" : "nextNonWhitespace",
      "right" : "nextNonWhitespace",
      "info" : "SimpleName[36559-36576]:SimpleName[36648-36665]"
    }, {
      "left" : "boolean throwOnEof",
      "right" : "boolean throwOnEof",
      "info" : "SingleVariableDeclaration[36577-36595]:SingleVariableDeclaration[36666-36684]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36597-38924]:Block[36686-39013]"
    }, {
      "left" : "CharSequence in = this.in;",
      "right" : "CharSequence in = this.in;",
      "info" : "VariableDeclarationStatement[37082-37108]:VariableDeclarationStatement[37171-37197]"
    }, {
      "left" : "int p = position;",
      "right" : "int p = position;",
      "info" : "VariableDeclarationStatement[37113-37130]:VariableDeclarationStatement[37202-37219]"
    }, {
      "left" : "int l = limit;",
      "right" : "int l = limit;",
      "info" : "VariableDeclarationStatement[37135-37149]:VariableDeclarationStatement[37224-37238]"
    }, {
      "left" : "while (true)",
      "right" : "while (true)",
      "info" : "WhileStatement[37154-38812]:WhileStatement[37243-38901]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37167-38812]:Block[37256-38901]"
    }, {
      "left" : "if (p == l)",
      "right" : "if (p == l)",
      "info" : "IfStatement[37175-37233]:IfStatement[37264-37322]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37187-37233]:Block[37276-37322]"
    }, {
      "left" : "position = p;",
      "right" : "position = p;",
      "info" : "ExpressionStatement[37197-37210]:ExpressionStatement[37286-37299]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[37219-37225]:BreakStatement[37308-37314]"
    }, {
      "left" : "int c = in.charAt(p++);",
      "right" : "int c = in.charAt(p++);",
      "info" : "VariableDeclarationStatement[37241-37264]:VariableDeclarationStatement[37330-37353]"
    }, {
      "left" : "if (c == '\\n')",
      "right" : "if (c == '\\n')",
      "info" : "IfStatement[37271-37441]:IfStatement[37360-37530]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37286-37362]:Block[37375-37451]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[37345-37354]:ContinueStatement[37434-37443]"
    }, {
      "left" : "if (c == ' ' || c == '\\r' || c == '\\t')",
      "right" : "if (c == ' ' || c == '\\r' || c == '\\t')",
      "info" : "IfStatement[37374-37441]:IfStatement[37463-37530]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37414-37441]:Block[37503-37530]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[37424-37433]:ContinueStatement[37513-37522]"
    }, {
      "left" : "if (c == '/')",
      "right" : "if (c == '/')",
      "info" : "IfStatement[37449-38806]:IfStatement[37538-38895]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37463-38391]:Block[37552-38480]"
    }, {
      "left" : "position = p;",
      "right" : "position = p;",
      "info" : "ExpressionStatement[37473-37486]:ExpressionStatement[37562-37575]"
    }, {
      "left" : "if (p == l)",
      "right" : "if (p == l)",
      "info" : "IfStatement[37495-37777]:IfStatement[37584-37866]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37507-37777]:Block[37596-37866]"
    }, {
      "left" : "position--;",
      "right" : "position--;",
      "info" : "ExpressionStatement[37519-37530]:ExpressionStatement[37608-37619]"
    }, {
      "left" : "boolean charsLoaded = (position + 3) < limit;",
      "right" : "boolean charsLoaded = (position + 3) < limit;",
      "info" : "VariableDeclarationStatement[37611-37656]:VariableDeclarationStatement[37700-37745]"
    }, {
      "left" : "position++;",
      "right" : "position++;",
      "info" : "ExpressionStatement[37667-37678]:ExpressionStatement[37756-37767]"
    }, {
      "left" : "if (!charsLoaded)",
      "right" : "if (!charsLoaded)",
      "info" : "IfStatement[37714-37767]:IfStatement[37803-37856]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37732-37767]:Block[37821-37856]"
    }, {
      "left" : "return c;",
      "right" : "return c;",
      "info" : "ReturnStatement[37746-37755]:ReturnStatement[37835-37844]"
    }, {
      "left" : "checkLenient();",
      "right" : "checkLenient();",
      "info" : "ExpressionStatement[37787-37802]:ExpressionStatement[37876-37891]"
    }, {
      "left" : "char peek = in.charAt(position);",
      "right" : "char peek = in.charAt(position);",
      "info" : "VariableDeclarationStatement[37811-37843]:VariableDeclarationStatement[37900-37932]"
    }, {
      "left" : "switch (peek) {\n          case '*':\n            // skip a /* c-style comment */\n            position++;\n            if (!skipTo(\"*/\")) {\n              throw createParseError(\"Unterminated comment\");\n            }\n            p = position + 2;\n            l = limit;\n            continue;\n\n          case '/':\n            // skip a // end-of-line comment\n            position++;\n            skipToEndOfLine();\n            p = position;\n            l = limit;\n            continue;\n\n          default:\n            return c;\n        }",
      "right" : "switch (peek) {\n          case '*':\n            // skip a /* c-style comment */\n            position++;\n            if (!skipTo(\"*/\")) {\n              throw createParseError(\"Unterminated comment\");\n            }\n            p = position + 2;\n            l = limit;\n            continue;\n\n          case '/':\n            // skip a // end-of-line comment\n            position++;\n            skipToEndOfLine();\n            p = position;\n            l = limit;\n            continue;\n\n          default:\n            return c;\n        }",
      "info" : "SwitchStatement[37852-38383]:SwitchStatement[37941-38472]"
    }, {
      "left" : "case '*':",
      "right" : "case '*':",
      "info" : "SwitchCase[37878-37887]:SwitchCase[37967-37976]"
    }, {
      "left" : "position++;",
      "right" : "position++;",
      "info" : "ExpressionStatement[37944-37955]:ExpressionStatement[38033-38044]"
    }, {
      "left" : "if (!skipTo(\"*/\"))",
      "right" : "if (!skipTo(\"*/\"))",
      "info" : "IfStatement[37968-38064]:IfStatement[38057-38153]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37987-38064]:Block[38076-38153]"
    }, {
      "left" : "throw createParseError(\"Unterminated comment\");",
      "right" : "throw createParseError(\"Unterminated comment\");",
      "info" : "ThrowStatement[38003-38050]:ThrowStatement[38092-38139]"
    }, {
      "left" : "p = position + 2;",
      "right" : "p = position + 2;",
      "info" : "ExpressionStatement[38077-38094]:ExpressionStatement[38166-38183]"
    }, {
      "left" : "l = limit;",
      "right" : "l = limit;",
      "info" : "ExpressionStatement[38107-38117]:ExpressionStatement[38196-38206]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[38130-38139]:ContinueStatement[38219-38228]"
    }, {
      "left" : "case '/':",
      "right" : "case '/':",
      "info" : "SwitchCase[38151-38160]:SwitchCase[38240-38249]"
    }, {
      "left" : "position++;",
      "right" : "position++;",
      "info" : "ExpressionStatement[38218-38229]:ExpressionStatement[38307-38318]"
    }, {
      "left" : "skipToEndOfLine();",
      "right" : "skipToEndOfLine();",
      "info" : "ExpressionStatement[38242-38260]:ExpressionStatement[38331-38349]"
    }, {
      "left" : "p = position;",
      "right" : "p = position;",
      "info" : "ExpressionStatement[38273-38286]:ExpressionStatement[38362-38375]"
    }, {
      "left" : "l = limit;",
      "right" : "l = limit;",
      "info" : "ExpressionStatement[38299-38309]:ExpressionStatement[38388-38398]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[38322-38331]:ContinueStatement[38411-38420]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[38343-38351]:SwitchCase[38432-38440]"
    }, {
      "left" : "return c;",
      "right" : "return c;",
      "info" : "ReturnStatement[38364-38373]:ReturnStatement[38453-38462]"
    }, {
      "left" : "if (c == '#')",
      "right" : "if (c == '#')",
      "info" : "IfStatement[38403-38806]:IfStatement[38492-38895]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38417-38745]:Block[38506-38834]"
    }, {
      "left" : "position = p;",
      "right" : "position = p;",
      "info" : "ExpressionStatement[38427-38440]:ExpressionStatement[38516-38529]"
    }, {
      "left" : "checkLenient();",
      "right" : "checkLenient();",
      "info" : "ExpressionStatement[38654-38669]:ExpressionStatement[38743-38758]"
    }, {
      "left" : "skipToEndOfLine();",
      "right" : "skipToEndOfLine();",
      "info" : "ExpressionStatement[38678-38696]:ExpressionStatement[38767-38785]"
    }, {
      "left" : "p = position;",
      "right" : "p = position;",
      "info" : "ExpressionStatement[38705-38718]:ExpressionStatement[38794-38807]"
    }, {
      "left" : "l = limit;",
      "right" : "l = limit;",
      "info" : "ExpressionStatement[38727-38737]:ExpressionStatement[38816-38826]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38757-38806]:Block[38846-38895]"
    }, {
      "left" : "position = p;",
      "right" : "position = p;",
      "info" : "ExpressionStatement[38767-38780]:ExpressionStatement[38856-38869]"
    }, {
      "left" : "return c;",
      "right" : "return c;",
      "info" : "ReturnStatement[38789-38798]:ReturnStatement[38878-38887]"
    }, {
      "left" : "if (throwOnEof)",
      "right" : "if (throwOnEof)",
      "info" : "IfStatement[38817-38920]:IfStatement[38906-39009]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38833-38886]:Block[38922-38975]"
    }, {
      "left" : "throw createParseError(\"End of input\");",
      "right" : "throw createParseError(\"End of input\");",
      "info" : "ThrowStatement[38841-38880]:ThrowStatement[38930-38969]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38896-38920]:Block[38985-39009]"
    }, {
      "left" : "return -1;",
      "right" : "return -1;",
      "info" : "ReturnStatement[38904-38914]:ReturnStatement[38993-39003]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[38928-38935]:Modifier[39017-39024]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[38936-38940]:PrimitiveType[39025-39029]"
    }, {
      "left" : "checkLenient",
      "right" : "checkLenient",
      "info" : "SimpleName[38941-38953]:SimpleName[39030-39042]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38956-39079]:Block[39045-39168]"
    }, {
      "left" : "if (!lenient)",
      "right" : "if (!lenient)",
      "info" : "IfStatement[38962-39075]:IfStatement[39051-39164]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38976-39075]:Block[39065-39164]"
    }, {
      "left" : "throw createParseError(\"Use JsonReaderEx.setLenient(true) to accept malformed JSON\");",
      "right" : "throw createParseError(\"Use JsonReaderEx.setLenient(true) to accept malformed JSON\");",
      "info" : "ThrowStatement[38984-39069]:ThrowStatement[39073-39158]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[39264-39271]:Modifier[39353-39360]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[39272-39276]:PrimitiveType[39361-39365]"
    }, {
      "left" : "skipToEndOfLine",
      "right" : "skipToEndOfLine",
      "info" : "SimpleName[39277-39292]:SimpleName[39366-39381]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39295-39434]:Block[39384-39523]"
    }, {
      "left" : "while (position < limit)",
      "right" : "while (position < limit)",
      "info" : "WhileStatement[39301-39430]:WhileStatement[39390-39519]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39326-39430]:Block[39415-39519]"
    }, {
      "left" : "char c = in.charAt(position++);",
      "right" : "char c = in.charAt(position++);",
      "info" : "VariableDeclarationStatement[39334-39365]:VariableDeclarationStatement[39423-39454]"
    }, {
      "left" : "if (c == '\\n' || c == '\\r')",
      "right" : "if (c == '\\n' || c == '\\r')",
      "info" : "IfStatement[39372-39424]:IfStatement[39461-39513]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39400-39424]:Block[39489-39513]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[39410-39416]:BreakStatement[39499-39505]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[39438-39445]:Modifier[39527-39534]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[39446-39453]:PrimitiveType[39535-39542]"
    }, {
      "left" : "skipTo",
      "right" : "skipTo",
      "info" : "SimpleName[39454-39460]:SimpleName[39543-39549]"
    }, {
      "left" : "String toFind",
      "right" : "String toFind",
      "info" : "SingleVariableDeclaration[39461-39474]:SingleVariableDeclaration[39550-39563]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39476-39872]:Block[39565-39961]"
    }, {
      "left" : "outer:\n    for (; position + toFind.length() <= limit; position++) {\n      if (in.charAt(position) == '\\n') {\n        //lineNumber++;\n        //lineStart = pos + 1;\n        continue;\n      }\n      for (int c = 0; c < toFind.length(); c++) {\n        if (in.charAt(position + c) != toFind.charAt(c)) {\n          continue outer;\n        }\n      }\n      return true;\n    }",
      "right" : "outer:\n    for (; position + toFind.length() <= limit; position++) {\n      if (in.charAt(position) == '\\n') {\n        //lineNumber++;\n        //lineStart = pos + 1;\n        continue;\n      }\n      for (int c = 0; c < toFind.length(); c++) {\n        if (in.charAt(position + c) != toFind.charAt(c)) {\n          continue outer;\n        }\n      }\n      return true;\n    }",
      "info" : "LabeledStatement[39482-39850]:LabeledStatement[39571-39939]"
    }, {
      "left" : "for (; position + toFind.length() <= limit; position++)",
      "right" : "for (; position + toFind.length() <= limit; position++)",
      "info" : "ForStatement[39493-39850]:ForStatement[39582-39939]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39549-39850]:Block[39638-39939]"
    }, {
      "left" : "if (in.charAt(position) == '\\n')",
      "right" : "if (in.charAt(position) == '\\n')",
      "info" : "IfStatement[39557-39672]:IfStatement[39646-39761]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39590-39672]:Block[39679-39761]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[39655-39664]:ContinueStatement[39744-39753]"
    }, {
      "left" : "for (int c = 0; c < toFind.length(); c++)",
      "right" : "for (int c = 0; c < toFind.length(); c++)",
      "info" : "ForStatement[39679-39825]:ForStatement[39768-39914]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39721-39825]:Block[39810-39914]"
    }, {
      "left" : "if (in.charAt(position + c) != toFind.charAt(c))",
      "right" : "if (in.charAt(position + c) != toFind.charAt(c))",
      "info" : "IfStatement[39731-39817]:IfStatement[39820-39906]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39780-39817]:Block[39869-39906]"
    }, {
      "left" : "continue outer;",
      "right" : "continue outer;",
      "info" : "ContinueStatement[39792-39807]:ContinueStatement[39881-39896]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[39832-39844]:ReturnStatement[39921-39933]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[39855-39868]:ReturnStatement[39944-39957]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[39876-39885]:MarkerAnnotation[39965-39974]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[39888-39894]:Modifier[39977-39983]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[39895-39901]:SimpleType[39984-39990]"
    }, {
      "left" : "toString",
      "right" : "toString",
      "info" : "SimpleName[39902-39910]:SimpleName[39991-39999]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39913-40022]:Block[40002-40111]"
    }, {
      "left" : "return getClass().getSimpleName() + \" at line \" + getLineNumber() + \" column \" + getColumnNumber();",
      "right" : "return getClass().getSimpleName() + \" at line \" + getLineNumber() + \" column \" + getColumnNumber();",
      "info" : "ReturnStatement[39919-40018]:ReturnStatement[40008-40107]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[40381-40388]:Modifier[40470-40477]"
    }, {
      "left" : "char",
      "right" : "char",
      "info" : "PrimitiveType[40389-40393]:PrimitiveType[40478-40482]"
    }, {
      "left" : "readEscapeCharacter",
      "right" : "readEscapeCharacter",
      "info" : "SimpleName[40394-40413]:SimpleName[40483-40502]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40416-41759]:Block[40505-41848]"
    }, {
      "left" : "if (position == limit)",
      "right" : "if (position == limit)",
      "info" : "IfStatement[40422-40514]:IfStatement[40511-40603]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40445-40514]:Block[40534-40603]"
    }, {
      "left" : "throw createParseError(\"Unterminated escape sequence\");",
      "right" : "throw createParseError(\"Unterminated escape sequence\");",
      "info" : "ThrowStatement[40453-40508]:ThrowStatement[40542-40597]"
    }, {
      "left" : "char escaped = in.charAt(position++);",
      "right" : "char escaped = in.charAt(position++);",
      "info" : "VariableDeclarationStatement[40520-40557]:VariableDeclarationStatement[40609-40646]"
    }, {
      "left" : "switch (escaped) {\n      case 'u':\n        if (position + 4 > limit) {\n          throw createParseError(\"Unterminated escape sequence\");\n        }\n        // Equivalent to Integer.parseInt(stringPool.get(buffer, pos, 4), 16);\n        char result = 0;\n        for (int i = position, end = i + 4; i < end; i++) {\n          char c = in.charAt(i);\n          result <<= 4;\n          if (c >= '0' && c <= '9') {\n            result += (c - '0');\n          }\n          else if (c >= 'a' && c <= 'f') {\n            result += (c - 'a' + 10);\n          }\n          else if (c >= 'A' && c <= 'F') {\n            result += (c - 'A' + 10);\n          }\n          else {\n            throw new NumberFormatException(\"\\\\u\" + in.subSequence(position, position + 4));\n          }\n        }\n        position += 4;\n        return result;\n\n      case 't':\n        return '\\t';\n\n      case 'b':\n        return '\\b';\n\n      case 'n':\n        return '\\n';\n\n      case 'r':\n        return '\\r';\n\n      case 'f':\n        return '\\f';\n\n      case '\\n':\n        //lineNumber++;\n        //lineStart = pos;\n        // fall-through\n\n      case '\\'':\n      case '\"':\n      case '\\\\':\n      default:\n        return escaped;\n    }",
      "right" : "switch (escaped) {\n      case 'u':\n        if (position + 4 > limit) {\n          throw createParseError(\"Unterminated escape sequence\");\n        }\n        // Equivalent to Integer.parseInt(stringPool.get(buffer, pos, 4), 16);\n        char result = 0;\n        for (int i = position, end = i + 4; i < end; i++) {\n          char c = in.charAt(i);\n          result <<= 4;\n          if (c >= '0' && c <= '9') {\n            result += (c - '0');\n          }\n          else if (c >= 'a' && c <= 'f') {\n            result += (c - 'a' + 10);\n          }\n          else if (c >= 'A' && c <= 'F') {\n            result += (c - 'A' + 10);\n          }\n          else {\n            throw new NumberFormatException(\"\\\\u\" + in.subSequence(position, position + 4));\n          }\n        }\n        position += 4;\n        return result;\n\n      case 't':\n        return '\\t';\n\n      case 'b':\n        return '\\b';\n\n      case 'n':\n        return '\\n';\n\n      case 'r':\n        return '\\r';\n\n      case 'f':\n        return '\\f';\n\n      case '\\n':\n        //lineNumber++;\n        //lineStart = pos;\n        // fall-through\n\n      case '\\'':\n      case '\"':\n      case '\\\\':\n      default:\n        return escaped;\n    }",
      "info" : "SwitchStatement[40562-41755]:SwitchStatement[40651-41844]"
    }, {
      "left" : "case 'u':",
      "right" : "case 'u':",
      "info" : "SwitchCase[40587-40596]:SwitchCase[40676-40685]"
    }, {
      "left" : "if (position + 4 > limit)",
      "right" : "if (position + 4 > limit)",
      "info" : "IfStatement[40605-40708]:IfStatement[40694-40797]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40631-40708]:Block[40720-40797]"
    }, {
      "left" : "throw createParseError(\"Unterminated escape sequence\");",
      "right" : "throw createParseError(\"Unterminated escape sequence\");",
      "info" : "ThrowStatement[40643-40698]:ThrowStatement[40732-40787]"
    }, {
      "left" : "char result = 0;",
      "right" : "char result = 0;",
      "info" : "VariableDeclarationStatement[40796-40812]:VariableDeclarationStatement[40885-40901]"
    }, {
      "left" : "for (int i = position, end = i + 4; i < end; i++)",
      "right" : "for (int i = position, end = i + 4; i < end; i++)",
      "info" : "ForStatement[40821-41330]:ForStatement[40910-41419]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40871-41330]:Block[40960-41419]"
    }, {
      "left" : "char c = in.charAt(i);",
      "right" : "char c = in.charAt(i);",
      "info" : "VariableDeclarationStatement[40883-40905]:VariableDeclarationStatement[40972-40994]"
    }, {
      "left" : "result <<= 4;",
      "right" : "result <<= 4;",
      "info" : "ExpressionStatement[40916-40929]:ExpressionStatement[41005-41018]"
    }, {
      "left" : "if (c >= '0' && c <= '9')",
      "right" : "if (c >= '0' && c <= '9')",
      "info" : "IfStatement[40940-41320]:IfStatement[41029-41409]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40966-41012]:Block[41055-41101]"
    }, {
      "left" : "result += (c - '0');",
      "right" : "result += (c - '0');",
      "info" : "ExpressionStatement[40980-41000]:ExpressionStatement[41069-41089]"
    }, {
      "left" : "if (c >= 'a' && c <= 'f')",
      "right" : "if (c >= 'a' && c <= 'f')",
      "info" : "IfStatement[41028-41320]:IfStatement[41117-41409]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41054-41105]:Block[41143-41194]"
    }, {
      "left" : "result += (c - 'a' + 10);",
      "right" : "result += (c - 'a' + 10);",
      "info" : "ExpressionStatement[41068-41093]:ExpressionStatement[41157-41182]"
    }, {
      "left" : "if (c >= 'A' && c <= 'F')",
      "right" : "if (c >= 'A' && c <= 'F')",
      "info" : "IfStatement[41121-41320]:IfStatement[41210-41409]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41147-41198]:Block[41236-41287]"
    }, {
      "left" : "result += (c - 'A' + 10);",
      "right" : "result += (c - 'A' + 10);",
      "info" : "ExpressionStatement[41161-41186]:ExpressionStatement[41250-41275]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41214-41320]:Block[41303-41409]"
    }, {
      "left" : "throw new NumberFormatException(\"\\\\u\" + in.subSequence(position, position + 4));",
      "right" : "throw new NumberFormatException(\"\\\\u\" + in.subSequence(position, position + 4));",
      "info" : "ThrowStatement[41228-41308]:ThrowStatement[41317-41397]"
    }, {
      "left" : "position += 4;",
      "right" : "position += 4;",
      "info" : "ExpressionStatement[41339-41353]:ExpressionStatement[41428-41442]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[41362-41376]:ReturnStatement[41451-41465]"
    }, {
      "left" : "case 't':",
      "right" : "case 't':",
      "info" : "SwitchCase[41384-41393]:SwitchCase[41473-41482]"
    }, {
      "left" : "return '\\t';",
      "right" : "return '\\t';",
      "info" : "ReturnStatement[41402-41414]:ReturnStatement[41491-41503]"
    }, {
      "left" : "case 'b':",
      "right" : "case 'b':",
      "info" : "SwitchCase[41422-41431]:SwitchCase[41511-41520]"
    }, {
      "left" : "return '\\b';",
      "right" : "return '\\b';",
      "info" : "ReturnStatement[41440-41452]:ReturnStatement[41529-41541]"
    }, {
      "left" : "case 'n':",
      "right" : "case 'n':",
      "info" : "SwitchCase[41460-41469]:SwitchCase[41549-41558]"
    }, {
      "left" : "return '\\n';",
      "right" : "return '\\n';",
      "info" : "ReturnStatement[41478-41490]:ReturnStatement[41567-41579]"
    }, {
      "left" : "case 'r':",
      "right" : "case 'r':",
      "info" : "SwitchCase[41498-41507]:SwitchCase[41587-41596]"
    }, {
      "left" : "return '\\r';",
      "right" : "return '\\r';",
      "info" : "ReturnStatement[41516-41528]:ReturnStatement[41605-41617]"
    }, {
      "left" : "case 'f':",
      "right" : "case 'f':",
      "info" : "SwitchCase[41536-41545]:SwitchCase[41625-41634]"
    }, {
      "left" : "return '\\f';",
      "right" : "return '\\f';",
      "info" : "ReturnStatement[41554-41566]:ReturnStatement[41643-41655]"
    }, {
      "left" : "case '\\n':",
      "right" : "case '\\n':",
      "info" : "SwitchCase[41574-41584]:SwitchCase[41663-41673]"
    }, {
      "left" : "case '\\'':",
      "right" : "case '\\'':",
      "info" : "SwitchCase[41667-41677]:SwitchCase[41756-41766]"
    }, {
      "left" : "case '\"':",
      "right" : "case '\"':",
      "info" : "SwitchCase[41684-41693]:SwitchCase[41773-41782]"
    }, {
      "left" : "case '\\\\':",
      "right" : "case '\\\\':",
      "info" : "SwitchCase[41700-41710]:SwitchCase[41789-41799]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[41717-41725]:SwitchCase[41806-41814]"
    }, {
      "left" : "return escaped;",
      "right" : "return escaped;",
      "info" : "ReturnStatement[41734-41749]:ReturnStatement[41823-41838]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[41884-41891]:Modifier[41973-41980]"
    }, {
      "left" : "JsonParseException",
      "right" : "JsonParseException",
      "info" : "SimpleType[41892-41910]:SimpleType[41981-41999]"
    }, {
      "left" : "createParseError",
      "right" : "createParseError",
      "info" : "SimpleName[41911-41927]:SimpleName[42000-42016]"
    }, {
      "left" : "String message",
      "right" : "String message",
      "info" : "SingleVariableDeclaration[41928-41942]:SingleVariableDeclaration[42017-42031]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41944-42057]:Block[42033-42146]"
    }, {
      "left" : "throw new JsonParseException(message + \" at line \" + getLineNumber() + \" column \" + getColumnNumber());",
      "right" : "throw new JsonParseException(message + \" at line \" + getLineNumber() + \" column \" + getColumnNumber());",
      "info" : "ThrowStatement[41950-42053]:ThrowStatement[42039-42142]"
    } ]
  },
  "interFileMappings" : { }
}