{
  "matchedElements" : [ {
    "left" : "class : RepositoryAttachHandler",
    "right" : "class : RepositoryAttachHandler",
    "info" : "TypeDeclaration[3105-18506]:TypeDeclaration[3105-19099]"
  }, {
    "left" : "public chooseLibraryAndDownload(project , initialFilter , parentComponent ) : ",
    "right" : "public chooseLibraryAndDownload(project , initialFilter , parentComponent ) : ",
    "info" : "MethodDeclaration[3181-4339]:MethodDeclaration[3181-4339]"
  }, {
    "left" : "public resolveAndDownload(project , coord , repositories ...) : ",
    "right" : "public resolveAndDownload(project , coord , repositories ...) : ",
    "info" : "MethodDeclaration[4343-5009]:MethodDeclaration[4343-5009]"
  }, {
    "left" : "public process(artifacts ...) : boolean",
    "right" : "public process(artifacts ...) : boolean",
    "info" : "MethodDeclaration[4747-4972]:MethodDeclaration[4747-4972]"
  }, {
    "left" : "public resolveAndDownload(project , coord , attachJavaDoc boolean, attachSources boolean, copyTo , repositories ...) : ",
    "right" : "public resolveAndDownload(project , coord , attachJavaDoc boolean, attachSources boolean, copyTo , repositories ...) : ",
    "info" : "MethodDeclaration[5013-6692]:MethodDeclaration[5013-5904]"
  }, {
    "left" : "public process(artifacts ...) : boolean",
    "right" : "public process(artifacts ...) : boolean",
    "info" : "MethodDeclaration[5936-6655]:MethodDeclaration[6799-7248]"
  }, {
    "left" : "public addRoots(editor ) : void",
    "right" : "public addRoots(editor ) : void",
    "info" : "MethodDeclaration[6332-6465]:MethodDeclaration[5784-5893]"
  }, {
    "left" : "public notifyArtifactsDownloaded(project , artifacts ...) : void",
    "right" : "public notifyArtifactsDownloaded(project , artifacts ...) : void",
    "info" : "MethodDeclaration[6696-7376]:MethodDeclaration[7289-7969]"
  }, {
    "left" : "public createRoots(artifacts , copyTo ) : ",
    "right" : "public createRoots(artifacts , copyTo ) : ",
    "info" : "MethodDeclaration[7380-8984]:MethodDeclaration[7973-9577]"
  }, {
    "left" : "public searchArtifacts(project , coord , resultProcessor ) : void",
    "right" : "public searchArtifacts(project , coord , resultProcessor ) : void",
    "info" : "MethodDeclaration[8988-12090]:MethodDeclaration[9581-12683]"
  }, {
    "left" : "public run(indicator ) : void",
    "right" : "public run(indicator ) : void",
    "info" : "MethodDeclaration[9648-12078]:MethodDeclaration[10241-12671]"
  }, {
    "left" : "public run() : void",
    "right" : "public run() : void",
    "info" : "MethodDeclaration[11738-11857]:MethodDeclaration[12331-12450]"
  }, {
    "left" : "public value(o ) : boolean",
    "right" : "public value(o ) : boolean",
    "info" : "MethodDeclaration[11909-12030]:MethodDeclaration[12502-12623]"
  }, {
    "left" : "public searchRepositories(project , nexusUrls , resultProcessor ) : void",
    "right" : "public searchRepositories(project , nexusUrls , resultProcessor ) : void",
    "info" : "MethodDeclaration[12094-13488]:MethodDeclaration[12687-14081]"
  }, {
    "left" : "public run(indicator ) : void",
    "right" : "public run(indicator ) : void",
    "info" : "MethodDeclaration[12435-13476]:MethodDeclaration[13028-14069]"
  }, {
    "left" : "public run() : void",
    "right" : "public run() : void",
    "info" : "MethodDeclaration[13358-13444]:MethodDeclaration[13951-14037]"
  }, {
    "left" : "private resolveLibrary(project , coord , extraTypes , repositories , resultProcessor ) : void",
    "right" : "private resolveLibrary(project , coord , extraTypes , repositories , resultProcessor ) : void",
    "info" : "MethodDeclaration[13492-14205]:MethodDeclaration[14085-14798]"
  }, {
    "left" : "public run(indicator ) : void",
    "right" : "public run(indicator ) : void",
    "info" : "MethodDeclaration[13990-14149]:MethodDeclaration[14583-14742]"
  }, {
    "left" : "private doResolveInner(project , mavenId , extraTypes , repositories , resultProcessor , indicator ) : void",
    "right" : "private doResolveInner(project , mavenId , extraTypes , repositories , resultProcessor , indicator ) : void",
    "info" : "MethodDeclaration[14209-14757]:MethodDeclaration[14802-15350]"
  }, {
    "left" : "public doResolveInner(project , mavenIds , extraTypes , repositories , resultProcessor , indicator ) : void",
    "right" : "public doResolveInner(project , mavenIds , extraTypes , repositories , resultProcessor , indicator ) : void",
    "info" : "MethodDeclaration[14761-17789]:MethodDeclaration[15354-18382]"
  }, {
    "left" : "public run() : void",
    "right" : "public run() : void",
    "info" : "MethodDeclaration[17623-17729]:MethodDeclaration[18216-18322]"
  }, {
    "left" : "private convertRepositories(infos ...) : ",
    "right" : "private convertRepositories(infos ...) : ",
    "info" : "MethodDeclaration[17793-18216]:MethodDeclaration[18386-18809]"
  }, {
    "left" : "public getMavenId(coord ) : ",
    "right" : "public getMavenId(coord ) : ",
    "info" : "MethodDeclaration[18220-18504]:MethodDeclaration[18813-19097]"
  } ],
  "mappings" : [ {
    "left" : "@Nullable",
    "right" : "@Nullable",
    "info" : "MarkerAnnotation[3181-3190]:MarkerAnnotation[3181-3190]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[3193-3199]:Modifier[3193-3199]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[3200-3206]:Modifier[3200-3206]"
  }, {
    "left" : "NewLibraryConfiguration",
    "right" : "NewLibraryConfiguration",
    "info" : "SimpleType[3207-3230]:SimpleType[3207-3230]"
  }, {
    "left" : "chooseLibraryAndDownload",
    "right" : "chooseLibraryAndDownload",
    "info" : "SimpleName[3231-3255]:SimpleName[3231-3255]"
  }, {
    "left" : "final @NotNull Project project",
    "right" : "final @NotNull Project project",
    "info" : "SingleVariableDeclaration[3256-3286]:SingleVariableDeclaration[3256-3286]"
  }, {
    "left" : "final @Nullable String initialFilter",
    "right" : "final @Nullable String initialFilter",
    "info" : "SingleVariableDeclaration[3353-3389]:SingleVariableDeclaration[3353-3389]"
  }, {
    "left" : "JComponent parentComponent",
    "right" : "JComponent parentComponent",
    "info" : "SingleVariableDeclaration[3456-3482]:SingleVariableDeclaration[3456-3482]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3484-4339]:Block[3484-4339]"
  }, {
    "left" : "RepositoryAttachDialog dialog = new RepositoryAttachDialog(project, initialFilter);",
    "right" : "RepositoryAttachDialog dialog = new RepositoryAttachDialog(project, initialFilter);",
    "info" : "VariableDeclarationStatement[3490-3573]:VariableDeclarationStatement[3490-3573]"
  }, {
    "left" : "dialog.setTitle(\"Download Library From Maven Repository\");",
    "right" : "dialog.setTitle(\"Download Library From Maven Repository\");",
    "info" : "ExpressionStatement[3578-3636]:ExpressionStatement[3578-3636]"
  }, {
    "left" : "dialog.show();",
    "right" : "dialog.show();",
    "info" : "ExpressionStatement[3641-3655]:ExpressionStatement[3641-3655]"
  }, {
    "left" : "if (dialog.getExitCode() != DialogWrapper.OK_EXIT_CODE)",
    "right" : "if (dialog.getExitCode() != DialogWrapper.OK_EXIT_CODE)",
    "info" : "IfStatement[3660-3742]:IfStatement[3660-3742]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3716-3742]:Block[3716-3742]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[3724-3736]:ReturnStatement[3724-3736]"
  }, {
    "left" : "String copyTo = dialog.getDirectoryPath();",
    "right" : "String copyTo = dialog.getDirectoryPath();",
    "info" : "VariableDeclarationStatement[3748-3790]:VariableDeclarationStatement[3748-3790]"
  }, {
    "left" : "String coord = dialog.getCoordinateText();",
    "right" : "String coord = dialog.getCoordinateText();",
    "info" : "VariableDeclarationStatement[3795-3837]:VariableDeclarationStatement[3795-3837]"
  }, {
    "left" : "boolean attachJavaDoc = dialog.getAttachJavaDoc();",
    "right" : "boolean attachJavaDoc = dialog.getAttachJavaDoc();",
    "info" : "VariableDeclarationStatement[3842-3892]:VariableDeclarationStatement[3842-3892]"
  }, {
    "left" : "boolean attachSources = dialog.getAttachSources();",
    "right" : "boolean attachSources = dialog.getAttachSources();",
    "info" : "VariableDeclarationStatement[3897-3947]:VariableDeclarationStatement[3897-3947]"
  }, {
    "left" : "List<MavenRepositoryInfo> repositories = dialog.getRepositories();",
    "right" : "List<MavenRepositoryInfo> repositories = dialog.getRepositories();",
    "info" : "VariableDeclarationStatement[3952-4018]:VariableDeclarationStatement[3952-4018]"
  }, {
    "left" : "NewLibraryConfiguration configuration = resolveAndDownload(project, coord, attachJavaDoc, attachSources, copyTo, repositories);",
    "right" : "NewLibraryConfiguration configuration = resolveAndDownload(project, coord, attachJavaDoc, attachSources, copyTo, repositories);",
    "info" : "VariableDeclarationStatement[4023-4150]:VariableDeclarationStatement[4023-4150]"
  }, {
    "left" : "if (configuration == null)",
    "right" : "if (configuration == null)",
    "info" : "IfStatement[4155-4309]:IfStatement[4155-4309]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4182-4309]:Block[4182-4309]"
  }, {
    "left" : "Messages.showErrorDialog(parentComponent, \"No files were downloaded for \" + coord, CommonBundle.getErrorTitle());",
    "right" : "Messages.showErrorDialog(parentComponent, \"No files were downloaded for \" + coord, CommonBundle.getErrorTitle());",
    "info" : "ExpressionStatement[4190-4303]:ExpressionStatement[4190-4303]"
  }, {
    "left" : "return configuration;",
    "right" : "return configuration;",
    "info" : "ReturnStatement[4314-4335]:ReturnStatement[4314-4335]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[4343-4349]:Modifier[4343-4349]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[4350-4356]:Modifier[4350-4356]"
  }, {
    "left" : "List<MavenArtifact>",
    "right" : "List<MavenArtifact>",
    "info" : "ParameterizedType[4357-4376]:ParameterizedType[4357-4376]"
  }, {
    "left" : "resolveAndDownload",
    "right" : "resolveAndDownload",
    "info" : "SimpleName[4377-4395]:SimpleName[4377-4395]"
  }, {
    "left" : "final Project project",
    "right" : "final Project project",
    "info" : "SingleVariableDeclaration[4396-4417]:SingleVariableDeclaration[4396-4417]"
  }, {
    "left" : "final String coord",
    "right" : "final String coord",
    "info" : "SingleVariableDeclaration[4419-4437]:SingleVariableDeclaration[4419-4437]"
  }, {
    "left" : "List<MavenRepositoryInfo> repositories",
    "right" : "List<MavenRepositoryInfo> repositories",
    "info" : "SingleVariableDeclaration[4439-4477]:SingleVariableDeclaration[4439-4477]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4479-5009]:Block[4479-5009]"
  }, {
    "left" : "final SmartList<MavenExtraArtifactType> extraTypes = new SmartList<MavenExtraArtifactType>();",
    "right" : "final SmartList<MavenExtraArtifactType> extraTypes = new SmartList<MavenExtraArtifactType>();",
    "info" : "VariableDeclarationStatement[4485-4578]:VariableDeclarationStatement[4485-4578]"
  }, {
    "left" : "final Ref<List<MavenArtifact>> result = Ref.create(null);",
    "right" : "final Ref<List<MavenArtifact>> result = Ref.create(null);",
    "info" : "VariableDeclarationStatement[4583-4640]:VariableDeclarationStatement[4583-4640]"
  }, {
    "left" : "resolveLibrary(project, coord, extraTypes, repositories, new Processor<List<MavenArtifact>>() {\n      public boolean process(final List<MavenArtifact> artifacts) {\n        result.set(artifacts);\n\n        if (!artifacts.isEmpty()) {\n          notifyArtifactsDownloaded(project, artifacts);\n        }\n        return true;\n      }\n    });",
    "right" : "resolveLibrary(project, coord, extraTypes, repositories, new Processor<List<MavenArtifact>>() {\n      public boolean process(final List<MavenArtifact> artifacts) {\n        result.set(artifacts);\n\n        if (!artifacts.isEmpty()) {\n          notifyArtifactsDownloaded(project, artifacts);\n        }\n        return true;\n      }\n    });",
    "info" : "ExpressionStatement[4645-4980]:ExpressionStatement[4645-4980]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[4747-4753]:Modifier[4747-4753]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[4754-4761]:PrimitiveType[4754-4761]"
  }, {
    "left" : "process",
    "right" : "process",
    "info" : "SimpleName[4762-4769]:SimpleName[4762-4769]"
  }, {
    "left" : "final List<MavenArtifact> artifacts",
    "right" : "final List<MavenArtifact> artifacts",
    "info" : "SingleVariableDeclaration[4770-4805]:SingleVariableDeclaration[4770-4805]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4807-4972]:Block[4807-4972]"
  }, {
    "left" : "result.set(artifacts);",
    "right" : "result.set(artifacts);",
    "info" : "ExpressionStatement[4817-4839]:ExpressionStatement[4817-4839]"
  }, {
    "left" : "if (!artifacts.isEmpty())",
    "right" : "if (!artifacts.isEmpty())",
    "info" : "IfStatement[4849-4943]:IfStatement[4849-4943]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4875-4943]:Block[4875-4943]"
  }, {
    "left" : "notifyArtifactsDownloaded(project, artifacts);",
    "right" : "notifyArtifactsDownloaded(project, artifacts);",
    "info" : "ExpressionStatement[4887-4933]:ExpressionStatement[4887-4933]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[4952-4964]:ReturnStatement[4952-4964]"
  }, {
    "left" : "return result.get();",
    "right" : "return result.get();",
    "info" : "ReturnStatement[4985-5005]:ReturnStatement[4985-5005]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[5013-5019]:Modifier[5013-5019]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[5020-5026]:Modifier[5020-5026]"
  }, {
    "left" : "NewLibraryConfiguration",
    "right" : "NewLibraryConfiguration",
    "info" : "SimpleType[5027-5050]:SimpleType[5027-5050]"
  }, {
    "left" : "resolveAndDownload",
    "right" : "resolveAndDownload",
    "info" : "SimpleName[5051-5069]:SimpleName[5051-5069]"
  }, {
    "left" : "final Project project",
    "right" : "final Project project",
    "info" : "SingleVariableDeclaration[5070-5091]:SingleVariableDeclaration[5070-5091]"
  }, {
    "left" : "final String coord",
    "right" : "final String coord",
    "info" : "SingleVariableDeclaration[5152-5170]:SingleVariableDeclaration[5152-5170]"
  }, {
    "left" : "boolean attachJavaDoc",
    "right" : "boolean attachJavaDoc",
    "info" : "SingleVariableDeclaration[5231-5252]:SingleVariableDeclaration[5231-5252]"
  }, {
    "left" : "boolean attachSources",
    "right" : "boolean attachSources",
    "info" : "SingleVariableDeclaration[5313-5334]:SingleVariableDeclaration[5313-5334]"
  }, {
    "left" : "@Nullable final String copyTo",
    "right" : "@Nullable final String copyTo",
    "info" : "SingleVariableDeclaration[5395-5424]:SingleVariableDeclaration[5395-5424]"
  }, {
    "left" : "List<MavenRepositoryInfo> repositories",
    "right" : "List<MavenRepositoryInfo> repositories",
    "info" : "SingleVariableDeclaration[5485-5523]:SingleVariableDeclaration[5485-5523]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5525-6692]:Block[5525-5904]"
  }, {
    "left" : "final SmartList<MavenExtraArtifactType> extraTypes = new SmartList<MavenExtraArtifactType>();",
    "right" : "final SmartList<MavenExtraArtifactType> extraTypes = new SmartList<MavenExtraArtifactType>();",
    "info" : "VariableDeclarationStatement[5531-5624]:VariableDeclarationStatement[6402-6495]"
  }, {
    "left" : "if (attachSources)",
    "right" : "if (attachSources)",
    "info" : "IfStatement[5629-5695]:IfStatement[6500-6566]"
  }, {
    "left" : "extraTypes.add(MavenExtraArtifactType.SOURCES);",
    "right" : "extraTypes.add(MavenExtraArtifactType.SOURCES);",
    "info" : "ExpressionStatement[5648-5695]:ExpressionStatement[6519-6566]"
  }, {
    "left" : "if (attachJavaDoc)",
    "right" : "if (attachJavaDoc)",
    "info" : "IfStatement[5700-5763]:IfStatement[6571-6634]"
  }, {
    "left" : "extraTypes.add(MavenExtraArtifactType.DOCS);",
    "right" : "extraTypes.add(MavenExtraArtifactType.DOCS);",
    "info" : "ExpressionStatement[5719-5763]:ExpressionStatement[6590-6634]"
  }, {
    "left" : "final Ref<NewLibraryConfiguration> result = Ref.create(null);",
    "right" : "final Ref<List<OrderRoot>> result = Ref.create(null);",
    "info" : "VariableDeclarationStatement[5768-5829]:VariableDeclarationStatement[6639-6692]"
  }, {
    "left" : "resolveLibrary(project, coord, extraTypes, repositories, new Processor<List<MavenArtifact>>() {\n      public boolean process(final List<MavenArtifact> artifacts) {\n        if (!artifacts.isEmpty()) {\n          AccessToken accessToken = WriteAction.start();\n          try {\n            final List<OrderRoot> roots = createRoots(artifacts, copyTo);\n            result.set(new NewLibraryConfiguration(coord, RepositoryLibraryType.getInstance(), new RepositoryLibraryProperties(coord)) {\n              @Override\n              public void addRoots(@NotNull LibraryEditor editor) {\n                editor.addRoots(roots);\n              }\n            });\n          }\n          finally {\n            accessToken.finish();\n          }\n          notifyArtifactsDownloaded(project, artifacts);\n        }\n        return true;\n      }\n    });",
    "right" : "resolveLibrary(project, coord, extraTypes, repositories, new Processor<List<MavenArtifact>>() {\n      public boolean process(final List<MavenArtifact> artifacts) {\n        if (!artifacts.isEmpty()) {\n          AccessToken accessToken = WriteAction.start();\n          try {\n            final List<OrderRoot> roots = createRoots(artifacts, copyTo);\n            result.set(roots);\n          }\n          finally {\n            accessToken.finish();\n          }\n          notifyArtifactsDownloaded(project, artifacts);\n        }\n        return true;\n      }\n    });",
    "info" : "ExpressionStatement[5834-6663]:ExpressionStatement[6697-7256]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[5936-5942]:Modifier[6799-6805]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[5943-5950]:PrimitiveType[6806-6813]"
  }, {
    "left" : "process",
    "right" : "process",
    "info" : "SimpleName[5951-5958]:SimpleName[6814-6821]"
  }, {
    "left" : "final List<MavenArtifact> artifacts",
    "right" : "final List<MavenArtifact> artifacts",
    "info" : "SingleVariableDeclaration[5959-5994]:SingleVariableDeclaration[6822-6857]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5996-6655]:Block[6859-7248]"
  }, {
    "left" : "if (!artifacts.isEmpty())",
    "right" : "if (!artifacts.isEmpty())",
    "info" : "IfStatement[6006-6626]:IfStatement[6869-7219]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6032-6626]:Block[6895-7219]"
  }, {
    "left" : "AccessToken accessToken = WriteAction.start();",
    "right" : "AccessToken accessToken = WriteAction.start();",
    "info" : "VariableDeclarationStatement[6044-6090]:VariableDeclarationStatement[6907-6953]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[6101-6559]:TryStatement[6964-7152]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6105-6493]:Block[6968-7086]"
  }, {
    "left" : "final List<OrderRoot> roots = createRoots(artifacts, copyTo);",
    "right" : "final List<OrderRoot> roots = createRoots(artifacts, copyTo);",
    "info" : "VariableDeclarationStatement[6119-6180]:VariableDeclarationStatement[6982-7043]"
  }, {
    "left" : "result.set(new NewLibraryConfiguration(coord, RepositoryLibraryType.getInstance(), new RepositoryLibraryProperties(coord)) {\n              @Override\n              public void addRoots(@NotNull LibraryEditor editor) {\n                editor.addRoots(roots);\n              }\n            });",
    "right" : "result.set(roots);",
    "info" : "ExpressionStatement[6193-6481]:ExpressionStatement[7056-7074]"
  }, {
    "left" : "new NewLibraryConfiguration(coord, RepositoryLibraryType.getInstance(), new RepositoryLibraryProperties(coord)) {\n              @Override\n              public void addRoots(@NotNull LibraryEditor editor) {\n                editor.addRoots(roots);\n              }\n            }",
    "right" : "new NewLibraryConfiguration(coord, RepositoryLibraryType.getInstance(), new RepositoryLibraryProperties(coord)) {\n      @Override\n      public void addRoots(@NotNull LibraryEditor editor) {\n        editor.addRoots(roots);\n      }\n    }",
    "info" : "ClassInstanceCreation[6204-6479]:ClassInstanceCreation[5664-5899]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[6332-6341]:MarkerAnnotation[5784-5793]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[6356-6362]:Modifier[5800-5806]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[6363-6367]:PrimitiveType[5807-5811]"
  }, {
    "left" : "addRoots",
    "right" : "addRoots",
    "info" : "SimpleName[6368-6376]:SimpleName[5812-5820]"
  }, {
    "left" : "@NotNull LibraryEditor editor",
    "right" : "@NotNull LibraryEditor editor",
    "info" : "SingleVariableDeclaration[6377-6406]:SingleVariableDeclaration[5821-5850]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6408-6465]:Block[5852-5893]"
  }, {
    "left" : "editor.addRoots(roots);",
    "right" : "editor.addRoots(roots);",
    "info" : "ExpressionStatement[6426-6449]:ExpressionStatement[5862-5885]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6512-6559]:Block[7105-7152]"
  }, {
    "left" : "accessToken.finish();",
    "right" : "accessToken.finish();",
    "info" : "ExpressionStatement[6526-6547]:ExpressionStatement[7119-7140]"
  }, {
    "left" : "notifyArtifactsDownloaded(project, artifacts);",
    "right" : "notifyArtifactsDownloaded(project, artifacts);",
    "info" : "ExpressionStatement[6570-6616]:ExpressionStatement[7163-7209]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[6635-6647]:ReturnStatement[7228-7240]"
  }, {
    "left" : "return result.get();",
    "right" : "return result.get();",
    "info" : "ReturnStatement[6668-6688]:ReturnStatement[7261-7281]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[6696-6702]:Modifier[7289-7295]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[6703-6709]:Modifier[7296-7302]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[6710-6714]:PrimitiveType[7303-7307]"
  }, {
    "left" : "notifyArtifactsDownloaded",
    "right" : "notifyArtifactsDownloaded",
    "info" : "SimpleName[6715-6740]:SimpleName[7308-7333]"
  }, {
    "left" : "Project project",
    "right" : "Project project",
    "info" : "SingleVariableDeclaration[6741-6756]:SingleVariableDeclaration[7334-7349]"
  }, {
    "left" : "List<MavenArtifact> artifacts",
    "right" : "List<MavenArtifact> artifacts",
    "info" : "SingleVariableDeclaration[6758-6787]:SingleVariableDeclaration[7351-7380]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6789-7376]:Block[7382-7969]"
  }, {
    "left" : "final StringBuilder sb = new StringBuilder();",
    "right" : "final StringBuilder sb = new StringBuilder();",
    "info" : "VariableDeclarationStatement[6795-6840]:VariableDeclarationStatement[7388-7433]"
  }, {
    "left" : "final String title = \"The following files were downloaded:\";",
    "right" : "final String title = \"The following files were downloaded:\";",
    "info" : "VariableDeclarationStatement[6845-6905]:VariableDeclarationStatement[7438-7498]"
  }, {
    "left" : "sb.append(\"<ol>\");",
    "right" : "sb.append(\"<ol>\");",
    "info" : "ExpressionStatement[6910-6928]:ExpressionStatement[7503-7521]"
  }, {
    "left" : "for (MavenArtifact each : artifacts)",
    "right" : "for (MavenArtifact each : artifacts)",
    "info" : "EnhancedForStatement[6933-7225]:EnhancedForStatement[7526-7818]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6970-7225]:Block[7563-7818]"
  }, {
    "left" : "sb.append(\"<li>\");",
    "right" : "sb.append(\"<li>\");",
    "info" : "ExpressionStatement[6978-6996]:ExpressionStatement[7571-7589]"
  }, {
    "left" : "sb.append(each.getFile().getName());",
    "right" : "sb.append(each.getFile().getName());",
    "info" : "ExpressionStatement[7003-7039]:ExpressionStatement[7596-7632]"
  }, {
    "left" : "final String scope = each.getScope();",
    "right" : "final String scope = each.getScope();",
    "info" : "VariableDeclarationStatement[7046-7083]:VariableDeclarationStatement[7639-7676]"
  }, {
    "left" : "if (scope != null)",
    "right" : "if (scope != null)",
    "info" : "IfStatement[7090-7193]:IfStatement[7683-7786]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7109-7193]:Block[7702-7786]"
  }, {
    "left" : "sb.append(\" (\");",
    "right" : "sb.append(\" (\");",
    "info" : "ExpressionStatement[7119-7135]:ExpressionStatement[7712-7728]"
  }, {
    "left" : "sb.append(scope);",
    "right" : "sb.append(scope);",
    "info" : "ExpressionStatement[7144-7161]:ExpressionStatement[7737-7754]"
  }, {
    "left" : "sb.append(\")\");",
    "right" : "sb.append(\")\");",
    "info" : "ExpressionStatement[7170-7185]:ExpressionStatement[7763-7778]"
  }, {
    "left" : "sb.append(\"</li>\");",
    "right" : "sb.append(\"</li>\");",
    "info" : "ExpressionStatement[7200-7219]:ExpressionStatement[7793-7812]"
  }, {
    "left" : "sb.append(\"</ol>\");",
    "right" : "sb.append(\"</ol>\");",
    "info" : "ExpressionStatement[7230-7249]:ExpressionStatement[7823-7842]"
  }, {
    "left" : "Notifications.Bus.notify(new Notification(\"Repository\", title, sb.toString(), NotificationType.INFORMATION), project);",
    "right" : "Notifications.Bus.notify(new Notification(\"Repository\", title, sb.toString(), NotificationType.INFORMATION), project);",
    "info" : "ExpressionStatement[7254-7372]:ExpressionStatement[7847-7965]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[7380-7386]:Modifier[7973-7979]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[7387-7393]:Modifier[7980-7986]"
  }, {
    "left" : "List<OrderRoot>",
    "right" : "List<OrderRoot>",
    "info" : "ParameterizedType[7394-7409]:ParameterizedType[7987-8002]"
  }, {
    "left" : "createRoots",
    "right" : "createRoots",
    "info" : "SimpleName[7410-7421]:SimpleName[8003-8014]"
  }, {
    "left" : "@NotNull Collection<MavenArtifact> artifacts",
    "right" : "@NotNull Collection<MavenArtifact> artifacts",
    "info" : "SingleVariableDeclaration[7422-7466]:SingleVariableDeclaration[8015-8059]"
  }, {
    "left" : "@Nullable String copyTo",
    "right" : "@Nullable String copyTo",
    "info" : "SingleVariableDeclaration[7468-7491]:SingleVariableDeclaration[8061-8084]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7493-8984]:Block[8086-9577]"
  }, {
    "left" : "final List<OrderRoot> result = new ArrayList<OrderRoot>();",
    "right" : "final List<OrderRoot> result = new ArrayList<OrderRoot>();",
    "info" : "VariableDeclarationStatement[7499-7557]:VariableDeclarationStatement[8092-8150]"
  }, {
    "left" : "final VirtualFileManager manager = VirtualFileManager.getInstance();",
    "right" : "final VirtualFileManager manager = VirtualFileManager.getInstance();",
    "info" : "VariableDeclarationStatement[7562-7630]:VariableDeclarationStatement[8155-8223]"
  }, {
    "left" : "for (MavenArtifact each : artifacts)",
    "right" : "for (MavenArtifact each : artifacts)",
    "info" : "EnhancedForStatement[7635-8961]:EnhancedForStatement[8228-9554]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7672-8961]:Block[8265-9554]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[7680-8955]:TryStatement[8273-9548]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7684-8809]:Block[8277-9402]"
  }, {
    "left" : "File repoFile = each.getFile();",
    "right" : "File repoFile = each.getFile();",
    "info" : "VariableDeclarationStatement[7694-7725]:VariableDeclarationStatement[8287-8318]"
  }, {
    "left" : "File toFile = repoFile;",
    "right" : "File toFile = repoFile;",
    "info" : "VariableDeclarationStatement[7734-7757]:VariableDeclarationStatement[8327-8350]"
  }, {
    "left" : "if (copyTo != null)",
    "right" : "if (copyTo != null)",
    "info" : "IfStatement[7766-7946]:IfStatement[8359-8539]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7786-7946]:Block[8379-8539]"
  }, {
    "left" : "toFile = new File(copyTo, repoFile.getName());",
    "right" : "toFile = new File(copyTo, repoFile.getName());",
    "info" : "ExpressionStatement[7798-7844]:ExpressionStatement[8391-8437]"
  }, {
    "left" : "if (repoFile.exists())",
    "right" : "if (repoFile.exists())",
    "info" : "IfStatement[7855-7936]:IfStatement[8448-8529]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7878-7936]:Block[8471-8529]"
  }, {
    "left" : "FileUtil.copy(repoFile, toFile);",
    "right" : "FileUtil.copy(repoFile, toFile);",
    "info" : "ExpressionStatement[7892-7924]:ExpressionStatement[8485-8517]"
  }, {
    "left" : "manager.refreshAndFindFileByUrl(VfsUtilCore.pathToUrl(FileUtil.toSystemIndependentName(toFile.getPath())));",
    "right" : "manager.refreshAndFindFileByUrl(VfsUtilCore.pathToUrl(FileUtil.toSystemIndependentName(toFile.getPath())));",
    "info" : "ExpressionStatement[8027-8134]:ExpressionStatement[8620-8727]"
  }, {
    "left" : "final String url = VfsUtil.getUrlForLibraryRoot(toFile);",
    "right" : "final String url = VfsUtil.getUrlForLibraryRoot(toFile);",
    "info" : "VariableDeclarationStatement[8143-8199]:VariableDeclarationStatement[8736-8792]"
  }, {
    "left" : "final VirtualFile file = manager.refreshAndFindFileByUrl(url);",
    "right" : "final VirtualFile file = manager.refreshAndFindFileByUrl(url);",
    "info" : "VariableDeclarationStatement[8208-8270]:VariableDeclarationStatement[8801-8863]"
  }, {
    "left" : "if (file != null)",
    "right" : "if (file != null)",
    "info" : "IfStatement[8279-8801]:IfStatement[8872-9394]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8297-8801]:Block[8890-9394]"
  }, {
    "left" : "OrderRootType rootType;",
    "right" : "OrderRootType rootType;",
    "info" : "VariableDeclarationStatement[8309-8332]:VariableDeclarationStatement[8902-8925]"
  }, {
    "left" : "if (MavenExtraArtifactType.DOCS.getDefaultClassifier().equals(each.getClassifier()))",
    "right" : "if (MavenExtraArtifactType.DOCS.getDefaultClassifier().equals(each.getClassifier()))",
    "info" : "IfStatement[8343-8738]:IfStatement[8936-9331]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8428-8500]:Block[9021-9093]"
  }, {
    "left" : "rootType = JavadocOrderRootType.getInstance();",
    "right" : "rootType = JavadocOrderRootType.getInstance();",
    "info" : "ExpressionStatement[8442-8488]:ExpressionStatement[9035-9081]"
  }, {
    "left" : "if (MavenExtraArtifactType.SOURCES.getDefaultClassifier().equals(each.getClassifier()))",
    "right" : "if (MavenExtraArtifactType.SOURCES.getDefaultClassifier().equals(each.getClassifier()))",
    "info" : "IfStatement[8516-8738]:IfStatement[9109-9331]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8604-8663]:Block[9197-9256]"
  }, {
    "left" : "rootType = OrderRootType.SOURCES;",
    "right" : "rootType = OrderRootType.SOURCES;",
    "info" : "ExpressionStatement[8618-8651]:ExpressionStatement[9211-9244]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8679-8738]:Block[9272-9331]"
  }, {
    "left" : "rootType = OrderRootType.CLASSES;",
    "right" : "rootType = OrderRootType.CLASSES;",
    "info" : "ExpressionStatement[8693-8726]:ExpressionStatement[9286-9319]"
  }, {
    "left" : "result.add(new OrderRoot(file, rootType));",
    "right" : "result.add(new OrderRoot(file, rootType));",
    "info" : "ExpressionStatement[8749-8791]:ExpressionStatement[9342-9384]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8848-8887]:Block[9441-9480]"
  }, {
    "left" : "MavenLog.LOG.warn(e);",
    "right" : "MavenLog.LOG.warn(e);",
    "info" : "ExpressionStatement[8858-8879]:ExpressionStatement[9451-9472]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8916-8955]:Block[9509-9548]"
  }, {
    "left" : "MavenLog.LOG.warn(e);",
    "right" : "MavenLog.LOG.warn(e);",
    "info" : "ExpressionStatement[8926-8947]:ExpressionStatement[9519-9540]"
  }, {
    "left" : "return result;",
    "right" : "return result;",
    "info" : "ReturnStatement[8966-8980]:ReturnStatement[9559-9573]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[8988-8994]:Modifier[9581-9587]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[8995-9001]:Modifier[9588-9594]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[9002-9006]:PrimitiveType[9595-9599]"
  }, {
    "left" : "searchArtifacts",
    "right" : "searchArtifacts",
    "info" : "SimpleName[9007-9022]:SimpleName[9600-9615]"
  }, {
    "left" : "final Project project",
    "right" : "final Project project",
    "info" : "SingleVariableDeclaration[9023-9044]:SingleVariableDeclaration[9616-9637]"
  }, {
    "left" : "String coord",
    "right" : "String coord",
    "info" : "SingleVariableDeclaration[9046-9058]:SingleVariableDeclaration[9639-9651]"
  }, {
    "left" : "final PairProcessor<Collection<Pair<MavenArtifactInfo, MavenRepositoryInfo>>, Boolean> resultProcessor",
    "right" : "final PairProcessor<Collection<Pair<MavenArtifactInfo, MavenRepositoryInfo>>, Boolean> resultProcessor",
    "info" : "SingleVariableDeclaration[9097-9199]:SingleVariableDeclaration[9690-9792]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9201-12090]:Block[9794-12683]"
  }, {
    "left" : "if (coord == null || coord.length() == 0)",
    "right" : "if (coord == null || coord.length() == 0)",
    "info" : "IfStatement[9207-9256]:IfStatement[9800-9849]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[9249-9256]:ReturnStatement[9842-9849]"
  }, {
    "left" : "final MavenArtifactInfo template;",
    "right" : "final MavenArtifactInfo template;",
    "info" : "VariableDeclarationStatement[9261-9294]:VariableDeclarationStatement[9854-9887]"
  }, {
    "left" : "if (coord.indexOf(':') == -1 && Character.isUpperCase(coord.charAt(0)))",
    "right" : "if (coord.indexOf(':') == -1 && Character.isUpperCase(coord.charAt(0)))",
    "info" : "IfStatement[9299-9551]:IfStatement[9892-10144]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9371-9462]:Block[9964-10055]"
  }, {
    "left" : "template = new MavenArtifactInfo(null, null, null, \"jar\", null, coord, null);",
    "right" : "template = new MavenArtifactInfo(null, null, null, \"jar\", null, coord, null);",
    "info" : "ExpressionStatement[9379-9456]:ExpressionStatement[9972-10049]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9472-9551]:Block[10065-10144]"
  }, {
    "left" : "template = new MavenArtifactInfo(getMavenId(coord), \"jar\", null);",
    "right" : "template = new MavenArtifactInfo(getMavenId(coord), \"jar\", null);",
    "info" : "ExpressionStatement[9480-9545]:ExpressionStatement[10073-10138]"
  }, {
    "left" : "ProgressManager.getInstance().run(new Task.Backgroundable(project, \"Maven\", false) {\n\n      public void run(@NotNull ProgressIndicator indicator) {\n        String[] urls = MavenRepositoryServicesManager.getServiceUrls();\n        boolean tooManyResults = false;\n        final AtomicBoolean proceedFlag = new AtomicBoolean(true);\n\n        for (int i = 0, length = urls.length; i < length; i++) {\n          if (!proceedFlag.get()) break;\n          final List<Pair<MavenArtifactInfo, MavenRepositoryInfo>> resultList = new ArrayList<Pair<MavenArtifactInfo, MavenRepositoryInfo>>();\n          try {\n            String serviceUrl = urls[i];\n            final List<MavenArtifactInfo> artifacts;\n            artifacts = MavenRepositoryServicesManager.findArtifacts(template, serviceUrl);\n            if (!artifacts.isEmpty()) {\n              if (!proceedFlag.get()) {\n                break;\n              }\n\n              List<MavenRepositoryInfo> repositories = MavenRepositoryServicesManager.getRepositories(serviceUrl);\n              Map<String, MavenRepositoryInfo> map = new THashMap<String, MavenRepositoryInfo>();\n              for (MavenRepositoryInfo repository : repositories) {\n                map.put(repository.getId(), repository);\n              }\n              for (MavenArtifactInfo artifact : artifacts) {\n                if (artifact == null) {\n                  tooManyResults = true;\n                }\n                else {\n                  MavenRepositoryInfo repository = map.get(artifact.getRepositoryId());\n                  // if the artifact is provided by an unsupported repository just skip it\n                  // because it won't be resolved anyway\n                  if (repository == null) continue;\n                  resultList.add(Pair.create(artifact, repository));\n                }\n              }\n            }\n          }\n          catch (Exception e) {\n            MavenLog.LOG.error(e);\n          }\n          finally {\n            if (!proceedFlag.get()) break;\n            final Boolean aBoolean = i == length - 1 ? tooManyResults : null;\n            ApplicationManager.getApplication().invokeLater(\n              new Runnable() {\n                public void run() {\n                  proceedFlag.set(resultProcessor.process(resultList, aBoolean));\n                }\n              }, new Condition() {\n                @Override\n                public boolean value(Object o) {\n                  return !proceedFlag.get();\n                }\n              });\n          }\n        }\n      }\n    });",
    "right" : "ProgressManager.getInstance().run(new Task.Backgroundable(project, \"Maven\", false) {\n\n      public void run(@NotNull ProgressIndicator indicator) {\n        String[] urls = MavenRepositoryServicesManager.getServiceUrls();\n        boolean tooManyResults = false;\n        final AtomicBoolean proceedFlag = new AtomicBoolean(true);\n\n        for (int i = 0, length = urls.length; i < length; i++) {\n          if (!proceedFlag.get()) break;\n          final List<Pair<MavenArtifactInfo, MavenRepositoryInfo>> resultList = new ArrayList<Pair<MavenArtifactInfo, MavenRepositoryInfo>>();\n          try {\n            String serviceUrl = urls[i];\n            final List<MavenArtifactInfo> artifacts;\n            artifacts = MavenRepositoryServicesManager.findArtifacts(template, serviceUrl);\n            if (!artifacts.isEmpty()) {\n              if (!proceedFlag.get()) {\n                break;\n              }\n\n              List<MavenRepositoryInfo> repositories = MavenRepositoryServicesManager.getRepositories(serviceUrl);\n              Map<String, MavenRepositoryInfo> map = new THashMap<String, MavenRepositoryInfo>();\n              for (MavenRepositoryInfo repository : repositories) {\n                map.put(repository.getId(), repository);\n              }\n              for (MavenArtifactInfo artifact : artifacts) {\n                if (artifact == null) {\n                  tooManyResults = true;\n                }\n                else {\n                  MavenRepositoryInfo repository = map.get(artifact.getRepositoryId());\n                  // if the artifact is provided by an unsupported repository just skip it\n                  // because it won't be resolved anyway\n                  if (repository == null) continue;\n                  resultList.add(Pair.create(artifact, repository));\n                }\n              }\n            }\n          }\n          catch (Exception e) {\n            MavenLog.LOG.error(e);\n          }\n          finally {\n            if (!proceedFlag.get()) break;\n            final Boolean aBoolean = i == length - 1 ? tooManyResults : null;\n            ApplicationManager.getApplication().invokeLater(\n              new Runnable() {\n                public void run() {\n                  proceedFlag.set(resultProcessor.process(resultList, aBoolean));\n                }\n              }, new Condition() {\n                @Override\n                public boolean value(Object o) {\n                  return !proceedFlag.get();\n                }\n              });\n          }\n        }\n      }\n    });",
    "info" : "ExpressionStatement[9556-12086]:ExpressionStatement[10149-12679]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[9648-9654]:Modifier[10241-10247]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[9655-9659]:PrimitiveType[10248-10252]"
  }, {
    "left" : "run",
    "right" : "run",
    "info" : "SimpleName[9660-9663]:SimpleName[10253-10256]"
  }, {
    "left" : "@NotNull ProgressIndicator indicator",
    "right" : "@NotNull ProgressIndicator indicator",
    "info" : "SingleVariableDeclaration[9664-9700]:SingleVariableDeclaration[10257-10293]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9702-12078]:Block[10295-12671]"
  }, {
    "left" : "String[] urls = MavenRepositoryServicesManager.getServiceUrls();",
    "right" : "String[] urls = MavenRepositoryServicesManager.getServiceUrls();",
    "info" : "VariableDeclarationStatement[9712-9776]:VariableDeclarationStatement[10305-10369]"
  }, {
    "left" : "boolean tooManyResults = false;",
    "right" : "boolean tooManyResults = false;",
    "info" : "VariableDeclarationStatement[9785-9816]:VariableDeclarationStatement[10378-10409]"
  }, {
    "left" : "final AtomicBoolean proceedFlag = new AtomicBoolean(true);",
    "right" : "final AtomicBoolean proceedFlag = new AtomicBoolean(true);",
    "info" : "VariableDeclarationStatement[9825-9883]:VariableDeclarationStatement[10418-10476]"
  }, {
    "left" : "for (int i = 0, length = urls.length; i < length; i++)",
    "right" : "for (int i = 0, length = urls.length; i < length; i++)",
    "info" : "ForStatement[9893-12070]:ForStatement[10486-12663]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9948-12070]:Block[10541-12663]"
  }, {
    "left" : "if (!proceedFlag.get())",
    "right" : "if (!proceedFlag.get())",
    "info" : "IfStatement[9960-9990]:IfStatement[10553-10583]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[9984-9990]:BreakStatement[10577-10583]"
  }, {
    "left" : "final List<Pair<MavenArtifactInfo, MavenRepositoryInfo>> resultList = new ArrayList<Pair<MavenArtifactInfo, MavenRepositoryInfo>>();",
    "right" : "final List<Pair<MavenArtifactInfo, MavenRepositoryInfo>> resultList = new ArrayList<Pair<MavenArtifactInfo, MavenRepositoryInfo>>();",
    "info" : "VariableDeclarationStatement[10001-10133]:VariableDeclarationStatement[10594-10726]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[10144-12060]:TryStatement[10737-12653]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10148-11409]:Block[10741-12002]"
  }, {
    "left" : "String serviceUrl = urls[i];",
    "right" : "String serviceUrl = urls[i];",
    "info" : "VariableDeclarationStatement[10162-10190]:VariableDeclarationStatement[10755-10783]"
  }, {
    "left" : "final List<MavenArtifactInfo> artifacts;",
    "right" : "final List<MavenArtifactInfo> artifacts;",
    "info" : "VariableDeclarationStatement[10203-10243]:VariableDeclarationStatement[10796-10836]"
  }, {
    "left" : "artifacts = MavenRepositoryServicesManager.findArtifacts(template, serviceUrl);",
    "right" : "artifacts = MavenRepositoryServicesManager.findArtifacts(template, serviceUrl);",
    "info" : "ExpressionStatement[10256-10335]:ExpressionStatement[10849-10928]"
  }, {
    "left" : "if (!artifacts.isEmpty())",
    "right" : "if (!artifacts.isEmpty())",
    "info" : "IfStatement[10348-11397]:IfStatement[10941-11990]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10374-11397]:Block[10967-11990]"
  }, {
    "left" : "if (!proceedFlag.get())",
    "right" : "if (!proceedFlag.get())",
    "info" : "IfStatement[10390-10454]:IfStatement[10983-11047]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10414-10454]:Block[11007-11047]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[10432-10438]:BreakStatement[11025-11031]"
  }, {
    "left" : "List<MavenRepositoryInfo> repositories = MavenRepositoryServicesManager.getRepositories(serviceUrl);",
    "right" : "List<MavenRepositoryInfo> repositories = MavenRepositoryServicesManager.getRepositories(serviceUrl);",
    "info" : "VariableDeclarationStatement[10470-10570]:VariableDeclarationStatement[11063-11163]"
  }, {
    "left" : "Map<String, MavenRepositoryInfo> map = new THashMap<String, MavenRepositoryInfo>();",
    "right" : "Map<String, MavenRepositoryInfo> map = new THashMap<String, MavenRepositoryInfo>();",
    "info" : "VariableDeclarationStatement[10585-10668]:VariableDeclarationStatement[11178-11261]"
  }, {
    "left" : "for (MavenRepositoryInfo repository : repositories)",
    "right" : "for (MavenRepositoryInfo repository : repositories)",
    "info" : "EnhancedForStatement[10683-10809]:EnhancedForStatement[11276-11402]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10735-10809]:Block[11328-11402]"
  }, {
    "left" : "map.put(repository.getId(), repository);",
    "right" : "map.put(repository.getId(), repository);",
    "info" : "ExpressionStatement[10753-10793]:ExpressionStatement[11346-11386]"
  }, {
    "left" : "for (MavenArtifactInfo artifact : artifacts)",
    "right" : "for (MavenArtifactInfo artifact : artifacts)",
    "info" : "EnhancedForStatement[10824-11383]:EnhancedForStatement[11417-11976]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10869-11383]:Block[11462-11976]"
  }, {
    "left" : "if (artifact == null)",
    "right" : "if (artifact == null)",
    "info" : "IfStatement[10887-11367]:IfStatement[11480-11960]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10909-10969]:Block[11502-11562]"
  }, {
    "left" : "tooManyResults = true;",
    "right" : "tooManyResults = true;",
    "info" : "ExpressionStatement[10929-10951]:ExpressionStatement[11522-11544]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10991-11367]:Block[11584-11960]"
  }, {
    "left" : "MavenRepositoryInfo repository = map.get(artifact.getRepositoryId());",
    "right" : "MavenRepositoryInfo repository = map.get(artifact.getRepositoryId());",
    "info" : "VariableDeclarationStatement[11011-11080]:VariableDeclarationStatement[11604-11673]"
  }, {
    "left" : "if (repository == null)",
    "right" : "if (repository == null)",
    "info" : "IfStatement[11247-11280]:IfStatement[11840-11873]"
  }, {
    "left" : "continue;",
    "right" : "continue;",
    "info" : "ContinueStatement[11271-11280]:ContinueStatement[11864-11873]"
  }, {
    "left" : "resultList.add(Pair.create(artifact, repository));",
    "right" : "resultList.add(Pair.create(artifact, repository));",
    "info" : "ExpressionStatement[11299-11349]:ExpressionStatement[11892-11942]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11440-11488]:Block[12033-12081]"
  }, {
    "left" : "MavenLog.LOG.error(e);",
    "right" : "MavenLog.LOG.error(e);",
    "info" : "ExpressionStatement[11454-11476]:ExpressionStatement[12047-12069]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11507-12060]:Block[12100-12653]"
  }, {
    "left" : "if (!proceedFlag.get())",
    "right" : "if (!proceedFlag.get())",
    "info" : "IfStatement[11521-11551]:IfStatement[12114-12144]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[11545-11551]:BreakStatement[12138-12144]"
  }, {
    "left" : "final Boolean aBoolean = i == length - 1 ? tooManyResults : null;",
    "right" : "final Boolean aBoolean = i == length - 1 ? tooManyResults : null;",
    "info" : "VariableDeclarationStatement[11564-11629]:VariableDeclarationStatement[12157-12222]"
  }, {
    "left" : "ApplicationManager.getApplication().invokeLater(\n              new Runnable() {\n                public void run() {\n                  proceedFlag.set(resultProcessor.process(resultList, aBoolean));\n                }\n              }, new Condition() {\n                @Override\n                public boolean value(Object o) {\n                  return !proceedFlag.get();\n                }\n              });",
    "right" : "ApplicationManager.getApplication().invokeLater(\n              new Runnable() {\n                public void run() {\n                  proceedFlag.set(resultProcessor.process(resultList, aBoolean));\n                }\n              }, new Condition() {\n                @Override\n                public boolean value(Object o) {\n                  return !proceedFlag.get();\n                }\n              });",
    "info" : "ExpressionStatement[11642-12048]:ExpressionStatement[12235-12641]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[11738-11744]:Modifier[12331-12337]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[11745-11749]:PrimitiveType[12338-12342]"
  }, {
    "left" : "run",
    "right" : "run",
    "info" : "SimpleName[11750-11753]:SimpleName[12343-12346]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11756-11857]:Block[12349-12450]"
  }, {
    "left" : "proceedFlag.set(resultProcessor.process(resultList, aBoolean));",
    "right" : "proceedFlag.set(resultProcessor.process(resultList, aBoolean));",
    "info" : "ExpressionStatement[11776-11839]:ExpressionStatement[12369-12432]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[11909-11918]:MarkerAnnotation[12502-12511]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[11935-11941]:Modifier[12528-12534]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[11942-11949]:PrimitiveType[12535-12542]"
  }, {
    "left" : "value",
    "right" : "value",
    "info" : "SimpleName[11950-11955]:SimpleName[12543-12548]"
  }, {
    "left" : "Object o",
    "right" : "Object o",
    "info" : "SingleVariableDeclaration[11956-11964]:SingleVariableDeclaration[12549-12557]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11966-12030]:Block[12559-12623]"
  }, {
    "left" : "return !proceedFlag.get();",
    "right" : "return !proceedFlag.get();",
    "info" : "ReturnStatement[11986-12012]:ReturnStatement[12579-12605]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[12094-12100]:Modifier[12687-12693]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[12101-12107]:Modifier[12694-12700]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[12108-12112]:PrimitiveType[12701-12705]"
  }, {
    "left" : "searchRepositories",
    "right" : "searchRepositories",
    "info" : "SimpleName[12113-12131]:SimpleName[12706-12724]"
  }, {
    "left" : "final Project project",
    "right" : "final Project project",
    "info" : "SingleVariableDeclaration[12132-12153]:SingleVariableDeclaration[12725-12746]"
  }, {
    "left" : "final Collection<String> nexusUrls",
    "right" : "final Collection<String> nexusUrls",
    "info" : "SingleVariableDeclaration[12195-12229]:SingleVariableDeclaration[12788-12822]"
  }, {
    "left" : "final Processor<Collection<MavenRepositoryInfo>> resultProcessor",
    "right" : "final Processor<Collection<MavenRepositoryInfo>> resultProcessor",
    "info" : "SingleVariableDeclaration[12271-12335]:SingleVariableDeclaration[12864-12928]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12337-13488]:Block[12930-14081]"
  }, {
    "left" : "ProgressManager.getInstance().run(new Task.Backgroundable(project, \"Maven\", false) {\n\n      public void run(@NotNull ProgressIndicator indicator) {\n        final Ref<List<MavenRepositoryInfo>> result = Ref.create(Collections.<MavenRepositoryInfo>emptyList());\n        try {\n          final ArrayList<MavenRepositoryInfo> repoList = new ArrayList<MavenRepositoryInfo>();\n          for (String nexusUrl : nexusUrls) {\n            final List<MavenRepositoryInfo> repositories;\n            try {\n              repositories = MavenRepositoryServicesManager.getRepositories(nexusUrl);\n            }\n            catch (Exception ex) {\n              MavenLog.LOG.warn(\"Accessing Service at: \" + nexusUrl, ex);\n              continue;\n            }\n            repoList.addAll(repositories);\n          }\n          result.set(repoList);\n        }\n        catch (Exception e) {\n          MavenLog.LOG.error(e);\n        }\n        finally {\n          ApplicationManager.getApplication().invokeLater(new Runnable() {\n            public void run() {\n              resultProcessor.process(result.get());\n            }\n          });\n        }\n      }\n    });",
    "right" : "ProgressManager.getInstance().run(new Task.Backgroundable(project, \"Maven\", false) {\n\n      public void run(@NotNull ProgressIndicator indicator) {\n        final Ref<List<MavenRepositoryInfo>> result = Ref.create(Collections.<MavenRepositoryInfo>emptyList());\n        try {\n          final ArrayList<MavenRepositoryInfo> repoList = new ArrayList<MavenRepositoryInfo>();\n          for (String nexusUrl : nexusUrls) {\n            final List<MavenRepositoryInfo> repositories;\n            try {\n              repositories = MavenRepositoryServicesManager.getRepositories(nexusUrl);\n            }\n            catch (Exception ex) {\n              MavenLog.LOG.warn(\"Accessing Service at: \" + nexusUrl, ex);\n              continue;\n            }\n            repoList.addAll(repositories);\n          }\n          result.set(repoList);\n        }\n        catch (Exception e) {\n          MavenLog.LOG.error(e);\n        }\n        finally {\n          ApplicationManager.getApplication().invokeLater(new Runnable() {\n            public void run() {\n              resultProcessor.process(result.get());\n            }\n          });\n        }\n      }\n    });",
    "info" : "ExpressionStatement[12343-13484]:ExpressionStatement[12936-14077]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[12435-12441]:Modifier[13028-13034]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[12442-12446]:PrimitiveType[13035-13039]"
  }, {
    "left" : "run",
    "right" : "run",
    "info" : "SimpleName[12447-12450]:SimpleName[13040-13043]"
  }, {
    "left" : "@NotNull ProgressIndicator indicator",
    "right" : "@NotNull ProgressIndicator indicator",
    "info" : "SingleVariableDeclaration[12451-12487]:SingleVariableDeclaration[13044-13080]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12489-13476]:Block[13082-14069]"
  }, {
    "left" : "final Ref<List<MavenRepositoryInfo>> result = Ref.create(Collections.<MavenRepositoryInfo>emptyList());",
    "right" : "final Ref<List<MavenRepositoryInfo>> result = Ref.create(Collections.<MavenRepositoryInfo>emptyList());",
    "info" : "VariableDeclarationStatement[12499-12602]:VariableDeclarationStatement[13092-13195]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[12611-13468]:TryStatement[13204-14061]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12615-13179]:Block[13208-13772]"
  }, {
    "left" : "final ArrayList<MavenRepositoryInfo> repoList = new ArrayList<MavenRepositoryInfo>();",
    "right" : "final ArrayList<MavenRepositoryInfo> repoList = new ArrayList<MavenRepositoryInfo>();",
    "info" : "VariableDeclarationStatement[12627-12712]:VariableDeclarationStatement[13220-13305]"
  }, {
    "left" : "for (String nexusUrl : nexusUrls)",
    "right" : "for (String nexusUrl : nexusUrls)",
    "info" : "EnhancedForStatement[12723-13137]:EnhancedForStatement[13316-13730]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12757-13137]:Block[13350-13730]"
  }, {
    "left" : "final List<MavenRepositoryInfo> repositories;",
    "right" : "final List<MavenRepositoryInfo> repositories;",
    "info" : "VariableDeclarationStatement[12771-12816]:VariableDeclarationStatement[13364-13409]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[12829-13082]:TryStatement[13422-13675]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12833-12935]:Block[13426-13528]"
  }, {
    "left" : "repositories = MavenRepositoryServicesManager.getRepositories(nexusUrl);",
    "right" : "repositories = MavenRepositoryServicesManager.getRepositories(nexusUrl);",
    "info" : "ExpressionStatement[12849-12921]:ExpressionStatement[13442-13514]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12969-13082]:Block[13562-13675]"
  }, {
    "left" : "MavenLog.LOG.warn(\"Accessing Service at: \" + nexusUrl, ex);",
    "right" : "MavenLog.LOG.warn(\"Accessing Service at: \" + nexusUrl, ex);",
    "info" : "ExpressionStatement[12985-13044]:ExpressionStatement[13578-13637]"
  }, {
    "left" : "continue;",
    "right" : "continue;",
    "info" : "ContinueStatement[13059-13068]:ContinueStatement[13652-13661]"
  }, {
    "left" : "repoList.addAll(repositories);",
    "right" : "repoList.addAll(repositories);",
    "info" : "ExpressionStatement[13095-13125]:ExpressionStatement[13688-13718]"
  }, {
    "left" : "result.set(repoList);",
    "right" : "result.set(repoList);",
    "info" : "ExpressionStatement[13148-13169]:ExpressionStatement[13741-13762]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13208-13252]:Block[13801-13845]"
  }, {
    "left" : "MavenLog.LOG.error(e);",
    "right" : "MavenLog.LOG.error(e);",
    "info" : "ExpressionStatement[13220-13242]:ExpressionStatement[13813-13835]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13269-13468]:Block[13862-14061]"
  }, {
    "left" : "ApplicationManager.getApplication().invokeLater(new Runnable() {\n            public void run() {\n              resultProcessor.process(result.get());\n            }\n          });",
    "right" : "ApplicationManager.getApplication().invokeLater(new Runnable() {\n            public void run() {\n              resultProcessor.process(result.get());\n            }\n          });",
    "info" : "ExpressionStatement[13281-13458]:ExpressionStatement[13874-14051]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[13358-13364]:Modifier[13951-13957]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[13365-13369]:PrimitiveType[13958-13962]"
  }, {
    "left" : "run",
    "right" : "run",
    "info" : "SimpleName[13370-13373]:SimpleName[13963-13966]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13376-13444]:Block[13969-14037]"
  }, {
    "left" : "resultProcessor.process(result.get());",
    "right" : "resultProcessor.process(result.get());",
    "info" : "ExpressionStatement[13392-13430]:ExpressionStatement[13985-14023]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[13492-13499]:Modifier[14085-14092]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[13500-13506]:Modifier[14093-14099]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[13507-13511]:PrimitiveType[14100-14104]"
  }, {
    "left" : "resolveLibrary",
    "right" : "resolveLibrary",
    "info" : "SimpleName[13512-13526]:SimpleName[14105-14119]"
  }, {
    "left" : "final Project project",
    "right" : "final Project project",
    "info" : "SingleVariableDeclaration[13527-13548]:SingleVariableDeclaration[14120-14141]"
  }, {
    "left" : "final String coord",
    "right" : "final String coord",
    "info" : "SingleVariableDeclaration[13587-13605]:SingleVariableDeclaration[14180-14198]"
  }, {
    "left" : "final List<MavenExtraArtifactType> extraTypes",
    "right" : "final List<MavenExtraArtifactType> extraTypes",
    "info" : "SingleVariableDeclaration[13644-13689]:SingleVariableDeclaration[14237-14282]"
  }, {
    "left" : "final Collection<MavenRepositoryInfo> repositories",
    "right" : "final Collection<MavenRepositoryInfo> repositories",
    "info" : "SingleVariableDeclaration[13728-13778]:SingleVariableDeclaration[14321-14371]"
  }, {
    "left" : "final Processor<List<MavenArtifact>> resultProcessor",
    "right" : "final Processor<List<MavenArtifact>> resultProcessor",
    "info" : "SingleVariableDeclaration[13817-13869]:SingleVariableDeclaration[14410-14462]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13871-14205]:Block[14464-14798]"
  }, {
    "left" : "final MavenId mavenId = getMavenId(coord);",
    "right" : "final MavenId mavenId = getMavenId(coord);",
    "info" : "VariableDeclarationStatement[13877-13919]:VariableDeclarationStatement[14470-14512]"
  }, {
    "left" : "final Task task = new Task.Modal(project, \"Maven\", false) {\n      public void run(@NotNull ProgressIndicator indicator) {\n        doResolveInner(project, mavenId, extraTypes, repositories, resultProcessor, indicator);\n      }\n    };",
    "right" : "final Task task = new Task.Modal(project, \"Maven\", false) {\n      public void run(@NotNull ProgressIndicator indicator) {\n        doResolveInner(project, mavenId, extraTypes, repositories, resultProcessor, indicator);\n      }\n    };",
    "info" : "VariableDeclarationStatement[13924-14156]:VariableDeclarationStatement[14517-14749]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[13990-13996]:Modifier[14583-14589]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[13997-14001]:PrimitiveType[14590-14594]"
  }, {
    "left" : "run",
    "right" : "run",
    "info" : "SimpleName[14002-14005]:SimpleName[14595-14598]"
  }, {
    "left" : "@NotNull ProgressIndicator indicator",
    "right" : "@NotNull ProgressIndicator indicator",
    "info" : "SingleVariableDeclaration[14006-14042]:SingleVariableDeclaration[14599-14635]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14044-14149]:Block[14637-14742]"
  }, {
    "left" : "doResolveInner(project, mavenId, extraTypes, repositories, resultProcessor, indicator);",
    "right" : "doResolveInner(project, mavenId, extraTypes, repositories, resultProcessor, indicator);",
    "info" : "ExpressionStatement[14054-14141]:ExpressionStatement[14647-14734]"
  }, {
    "left" : "ProgressManager.getInstance().run(task);",
    "right" : "ProgressManager.getInstance().run(task);",
    "info" : "ExpressionStatement[14161-14201]:ExpressionStatement[14754-14794]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[14209-14216]:Modifier[14802-14809]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[14217-14223]:Modifier[14810-14816]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[14224-14228]:PrimitiveType[14817-14821]"
  }, {
    "left" : "doResolveInner",
    "right" : "doResolveInner",
    "info" : "SimpleName[14229-14243]:SimpleName[14822-14836]"
  }, {
    "left" : "Project project",
    "right" : "Project project",
    "info" : "SingleVariableDeclaration[14244-14259]:SingleVariableDeclaration[14837-14852]"
  }, {
    "left" : "MavenId mavenId",
    "right" : "MavenId mavenId",
    "info" : "SingleVariableDeclaration[14298-14313]:SingleVariableDeclaration[14891-14906]"
  }, {
    "left" : "List<MavenExtraArtifactType> extraTypes",
    "right" : "List<MavenExtraArtifactType> extraTypes",
    "info" : "SingleVariableDeclaration[14352-14391]:SingleVariableDeclaration[14945-14984]"
  }, {
    "left" : "Collection<MavenRepositoryInfo> repositories",
    "right" : "Collection<MavenRepositoryInfo> repositories",
    "info" : "SingleVariableDeclaration[14430-14474]:SingleVariableDeclaration[15023-15067]"
  }, {
    "left" : "final Processor<List<MavenArtifact>> resultProcessor",
    "right" : "final Processor<List<MavenArtifact>> resultProcessor",
    "info" : "SingleVariableDeclaration[14513-14565]:SingleVariableDeclaration[15106-15158]"
  }, {
    "left" : "ProgressIndicator indicator",
    "right" : "ProgressIndicator indicator",
    "info" : "SingleVariableDeclaration[14604-14631]:SingleVariableDeclaration[15197-15224]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14633-14757]:Block[15226-15350]"
  }, {
    "left" : "doResolveInner(project, Collections.singletonList(mavenId), extraTypes, repositories, resultProcessor, indicator);",
    "right" : "doResolveInner(project, Collections.singletonList(mavenId), extraTypes, repositories, resultProcessor, indicator);",
    "info" : "ExpressionStatement[14639-14753]:ExpressionStatement[15232-15346]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[14761-14767]:Modifier[15354-15360]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[14768-14774]:Modifier[15361-15367]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[14775-14779]:PrimitiveType[15368-15372]"
  }, {
    "left" : "doResolveInner",
    "right" : "doResolveInner",
    "info" : "SimpleName[14780-14794]:SimpleName[15373-15387]"
  }, {
    "left" : "Project project",
    "right" : "Project project",
    "info" : "SingleVariableDeclaration[14795-14810]:SingleVariableDeclaration[15388-15403]"
  }, {
    "left" : "List<MavenId> mavenIds",
    "right" : "List<MavenId> mavenIds",
    "info" : "SingleVariableDeclaration[14848-14870]:SingleVariableDeclaration[15441-15463]"
  }, {
    "left" : "List<MavenExtraArtifactType> extraTypes",
    "right" : "List<MavenExtraArtifactType> extraTypes",
    "info" : "SingleVariableDeclaration[14908-14947]:SingleVariableDeclaration[15501-15540]"
  }, {
    "left" : "Collection<MavenRepositoryInfo> repositories",
    "right" : "Collection<MavenRepositoryInfo> repositories",
    "info" : "SingleVariableDeclaration[14985-15029]:SingleVariableDeclaration[15578-15622]"
  }, {
    "left" : "final Processor<List<MavenArtifact>> resultProcessor",
    "right" : "final Processor<List<MavenArtifact>> resultProcessor",
    "info" : "SingleVariableDeclaration[15067-15119]:SingleVariableDeclaration[15660-15712]"
  }, {
    "left" : "ProgressIndicator indicator",
    "right" : "ProgressIndicator indicator",
    "info" : "SingleVariableDeclaration[15157-15184]:SingleVariableDeclaration[15750-15777]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15186-17789]:Block[15779-18382]"
  }, {
    "left" : "boolean cancelled = false;",
    "right" : "boolean cancelled = false;",
    "info" : "VariableDeclarationStatement[15192-15218]:VariableDeclarationStatement[15785-15811]"
  }, {
    "left" : "final Collection<MavenArtifact> result = new LinkedHashSet<MavenArtifact>();",
    "right" : "final Collection<MavenArtifact> result = new LinkedHashSet<MavenArtifact>();",
    "info" : "VariableDeclarationStatement[15223-15299]:VariableDeclarationStatement[15816-15892]"
  }, {
    "left" : "MavenEmbeddersManager manager = MavenProjectsManager.getInstance(project).getEmbeddersManager();",
    "right" : "MavenEmbeddersManager manager = MavenProjectsManager.getInstance(project).getEmbeddersManager();",
    "info" : "VariableDeclarationStatement[15304-15400]:VariableDeclarationStatement[15897-15993]"
  }, {
    "left" : "MavenEmbedderWrapper embedder = manager.getEmbedder(MavenEmbeddersManager.FOR_DOWNLOAD);",
    "right" : "MavenEmbedderWrapper embedder = manager.getEmbedder(MavenEmbeddersManager.FOR_DOWNLOAD);",
    "info" : "VariableDeclarationStatement[15405-15493]:VariableDeclarationStatement[15998-16086]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[15498-17785]:TryStatement[16091-18378]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15502-17390]:Block[16095-17983]"
  }, {
    "left" : "final MavenGeneralSettings mavenGeneralSettings = MavenProjectsManager.getInstance(project).getGeneralSettings();",
    "right" : "final MavenGeneralSettings mavenGeneralSettings = MavenProjectsManager.getInstance(project).getGeneralSettings();",
    "info" : "VariableDeclarationStatement[15510-15623]:VariableDeclarationStatement[16103-16216]"
  }, {
    "left" : "embedder.customizeForResolve(\n        new SoutMavenConsole(mavenGeneralSettings.getOutputLevel(), mavenGeneralSettings.isPrintErrorStackTraces()),\n        new MavenProgressIndicator(indicator));",
    "right" : "embedder.customizeForResolve(\n        new SoutMavenConsole(mavenGeneralSettings.getOutputLevel(), mavenGeneralSettings.isPrintErrorStackTraces()),\n        new MavenProgressIndicator(indicator));",
    "info" : "ExpressionStatement[15630-15824]:ExpressionStatement[16223-16417]"
  }, {
    "left" : "List<MavenRemoteRepository> remoteRepositories = convertRepositories(repositories);",
    "right" : "List<MavenRemoteRepository> remoteRepositories = convertRepositories(repositories);",
    "info" : "VariableDeclarationStatement[15831-15914]:VariableDeclarationStatement[16424-16507]"
  }, {
    "left" : "List<MavenArtifactInfo> artifacts = new ArrayList<MavenArtifactInfo>(mavenIds.size());",
    "right" : "List<MavenArtifactInfo> artifacts = new ArrayList<MavenArtifactInfo>(mavenIds.size());",
    "info" : "VariableDeclarationStatement[15921-16007]:VariableDeclarationStatement[16514-16600]"
  }, {
    "left" : "for (MavenId id : mavenIds)",
    "right" : "for (MavenId id : mavenIds)",
    "info" : "EnhancedForStatement[16014-16114]:EnhancedForStatement[16607-16707]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16042-16114]:Block[16635-16707]"
  }, {
    "left" : "artifacts.add(new MavenArtifactInfo(id, \"jar\", null));",
    "right" : "artifacts.add(new MavenArtifactInfo(id, \"jar\", null));",
    "info" : "ExpressionStatement[16052-16106]:ExpressionStatement[16645-16699]"
  }, {
    "left" : "List<MavenArtifact> firstResult = embedder.resolveTransitively(artifacts, remoteRepositories);",
    "right" : "List<MavenArtifact> firstResult = embedder.resolveTransitively(artifacts, remoteRepositories);",
    "info" : "VariableDeclarationStatement[16121-16215]:VariableDeclarationStatement[16714-16808]"
  }, {
    "left" : "for (MavenArtifact artifact : firstResult)",
    "right" : "for (MavenArtifact artifact : firstResult)",
    "info" : "EnhancedForStatement[16222-16429]:EnhancedForStatement[16815-17022]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16265-16429]:Block[16858-17022]"
  }, {
    "left" : "if (!artifact.isResolved() || MavenConstants.SCOPE_TEST.equals(artifact.getScope()))",
    "right" : "if (!artifact.isResolved() || MavenConstants.SCOPE_TEST.equals(artifact.getScope()))",
    "info" : "IfStatement[16275-16391]:IfStatement[16868-16984]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16360-16391]:Block[16953-16984]"
  }, {
    "left" : "continue;",
    "right" : "continue;",
    "info" : "ContinueStatement[16372-16381]:ContinueStatement[16965-16974]"
  }, {
    "left" : "result.add(artifact);",
    "right" : "result.add(artifact);",
    "info" : "ExpressionStatement[16400-16421]:ExpressionStatement[16993-17014]"
  }, {
    "left" : "if (!extraTypes.isEmpty())",
    "right" : "if (!extraTypes.isEmpty())",
    "info" : "IfStatement[16469-17384]:IfStatement[17062-17977]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16496-17384]:Block[17089-17977]"
  }, {
    "left" : "Set<String> allowedClassifiers = new THashSet<String>();",
    "right" : "Set<String> allowedClassifiers = new THashSet<String>();",
    "info" : "VariableDeclarationStatement[16506-16562]:VariableDeclarationStatement[17099-17155]"
  }, {
    "left" : "Collection<MavenArtifactInfo> resolve = new LinkedHashSet<MavenArtifactInfo>();",
    "right" : "Collection<MavenArtifactInfo> resolve = new LinkedHashSet<MavenArtifactInfo>();",
    "info" : "VariableDeclarationStatement[16571-16650]:VariableDeclarationStatement[17164-17243]"
  }, {
    "left" : "for (MavenExtraArtifactType extraType : extraTypes)",
    "right" : "for (MavenExtraArtifactType extraType : extraTypes)",
    "info" : "EnhancedForStatement[16659-17012]:EnhancedForStatement[17252-17605]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16711-17012]:Block[17304-17605]"
  }, {
    "left" : "allowedClassifiers.add(extraType.getDefaultClassifier());",
    "right" : "allowedClassifiers.add(extraType.getDefaultClassifier());",
    "info" : "ExpressionStatement[16723-16780]:ExpressionStatement[17316-17373]"
  }, {
    "left" : "for (MavenId id : mavenIds)",
    "right" : "for (MavenId id : mavenIds)",
    "info" : "EnhancedForStatement[16791-16951]:EnhancedForStatement[17384-17544]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16819-16951]:Block[17412-17544]"
  }, {
    "left" : "resolve.add(new MavenArtifactInfo(id, extraType.getDefaultExtension(), extraType.getDefaultClassifier()));",
    "right" : "resolve.add(new MavenArtifactInfo(id, extraType.getDefaultExtension(), extraType.getDefaultClassifier()));",
    "info" : "ExpressionStatement[16833-16939]:ExpressionStatement[17426-17532]"
  }, {
    "left" : "for (MavenArtifact artifact : embedder.resolveTransitively(new ArrayList<MavenArtifactInfo>(resolve), remoteRepositories))",
    "right" : "for (MavenArtifact artifact : embedder.resolveTransitively(new ArrayList<MavenArtifactInfo>(resolve), remoteRepositories))",
    "info" : "EnhancedForStatement[17021-17376]:EnhancedForStatement[17614-17969]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17144-17376]:Block[17737-17969]"
  }, {
    "left" : "if (!artifact.isResolved() || MavenConstants.SCOPE_TEST.equals(artifact.getScope()) || !allowedClassifiers.contains(artifact.getClassifier()))",
    "right" : "if (!artifact.isResolved() || MavenConstants.SCOPE_TEST.equals(artifact.getScope()) || !allowedClassifiers.contains(artifact.getClassifier()))",
    "info" : "IfStatement[17156-17334]:IfStatement[17749-17927]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17299-17334]:Block[17892-17927]"
  }, {
    "left" : "continue;",
    "right" : "continue;",
    "info" : "ContinueStatement[17313-17322]:ContinueStatement[17906-17915]"
  }, {
    "left" : "result.add(artifact);",
    "right" : "result.add(artifact);",
    "info" : "ExpressionStatement[17345-17366]:ExpressionStatement[17938-17959]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17435-17466]:Block[18028-18059]"
  }, {
    "left" : "cancelled = true;",
    "right" : "cancelled = true;",
    "info" : "ExpressionStatement[17443-17460]:ExpressionStatement[18036-18053]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17479-17785]:Block[18072-18378]"
  }, {
    "left" : "manager.release(embedder);",
    "right" : "manager.release(embedder);",
    "info" : "ExpressionStatement[17487-17513]:ExpressionStatement[18080-18106]"
  }, {
    "left" : "if (!cancelled)",
    "right" : "if (!cancelled)",
    "info" : "IfStatement[17520-17779]:IfStatement[18113-18372]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17536-17779]:Block[18129-18372]"
  }, {
    "left" : "ApplicationManager.getApplication().invokeAndWait(new Runnable() {\n          public void run() {\n            resultProcessor.process(new ArrayList<MavenArtifact>(result));\n          }\n        }, indicator.getModalityState());",
    "right" : "ApplicationManager.getApplication().invokeAndWait(new Runnable() {\n          public void run() {\n            resultProcessor.process(new ArrayList<MavenArtifact>(result));\n          }\n        }, indicator.getModalityState());",
    "info" : "ExpressionStatement[17546-17771]:ExpressionStatement[18139-18364]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[17623-17629]:Modifier[18216-18222]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[17630-17634]:PrimitiveType[18223-18227]"
  }, {
    "left" : "run",
    "right" : "run",
    "info" : "SimpleName[17635-17638]:SimpleName[18228-18231]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17641-17729]:Block[18234-18322]"
  }, {
    "left" : "resultProcessor.process(new ArrayList<MavenArtifact>(result));",
    "right" : "resultProcessor.process(new ArrayList<MavenArtifact>(result));",
    "info" : "ExpressionStatement[17655-17717]:ExpressionStatement[18248-18310]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[17793-17800]:Modifier[18386-18393]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[17801-17807]:Modifier[18394-18400]"
  }, {
    "left" : "List<MavenRemoteRepository>",
    "right" : "List<MavenRemoteRepository>",
    "info" : "ParameterizedType[17808-17835]:ParameterizedType[18401-18428]"
  }, {
    "left" : "convertRepositories",
    "right" : "convertRepositories",
    "info" : "SimpleName[17836-17855]:SimpleName[18429-18448]"
  }, {
    "left" : "Collection<MavenRepositoryInfo> infos",
    "right" : "Collection<MavenRepositoryInfo> infos",
    "info" : "SingleVariableDeclaration[17856-17893]:SingleVariableDeclaration[18449-18486]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17895-18216]:Block[18488-18809]"
  }, {
    "left" : "List<MavenRemoteRepository> result = new ArrayList<MavenRemoteRepository>(infos.size());",
    "right" : "List<MavenRemoteRepository> result = new ArrayList<MavenRemoteRepository>(infos.size());",
    "info" : "VariableDeclarationStatement[17901-17989]:VariableDeclarationStatement[18494-18582]"
  }, {
    "left" : "for (MavenRepositoryInfo each : infos)",
    "right" : "for (MavenRepositoryInfo each : infos)",
    "info" : "EnhancedForStatement[17994-18193]:EnhancedForStatement[18587-18786]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18033-18193]:Block[18626-18786]"
  }, {
    "left" : "if (each.getUrl() != null)",
    "right" : "if (each.getUrl() != null)",
    "info" : "IfStatement[18041-18187]:IfStatement[18634-18780]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18068-18187]:Block[18661-18780]"
  }, {
    "left" : "result.add(new MavenRemoteRepository(each.getId(), each.getName(), each.getUrl(), null, null, null));",
    "right" : "result.add(new MavenRemoteRepository(each.getId(), each.getName(), each.getUrl(), null, null, null));",
    "info" : "ExpressionStatement[18078-18179]:ExpressionStatement[18671-18772]"
  }, {
    "left" : "return result;",
    "right" : "return result;",
    "info" : "ReturnStatement[18198-18212]:ReturnStatement[18791-18805]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[18220-18226]:Modifier[18813-18819]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[18227-18233]:Modifier[18820-18826]"
  }, {
    "left" : "MavenId",
    "right" : "MavenId",
    "info" : "SimpleType[18234-18241]:SimpleType[18827-18834]"
  }, {
    "left" : "getMavenId",
    "right" : "getMavenId",
    "info" : "SimpleName[18242-18252]:SimpleName[18835-18845]"
  }, {
    "left" : "@NotNull String coord",
    "right" : "@NotNull String coord",
    "info" : "SingleVariableDeclaration[18253-18274]:SingleVariableDeclaration[18846-18867]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18276-18504]:Block[18869-19097]"
  }, {
    "left" : "final String[] parts = coord.split(\":\");",
    "right" : "final String[] parts = coord.split(\":\");",
    "info" : "VariableDeclarationStatement[18282-18322]:VariableDeclarationStatement[18875-18915]"
  }, {
    "left" : "return new MavenId(parts.length > 0 ? parts[0] : null,\n                       parts.length > 1 ? parts[1] : null,\n                       parts.length > 2 ? parts[2] : null);",
    "right" : "return new MavenId(parts.length > 0 ? parts[0] : null,\n                       parts.length > 1 ? parts[1] : null,\n                       parts.length > 2 ? parts[2] : null);",
    "info" : "ReturnStatement[18327-18500]:ReturnStatement[18920-19093]"
  } ]
}