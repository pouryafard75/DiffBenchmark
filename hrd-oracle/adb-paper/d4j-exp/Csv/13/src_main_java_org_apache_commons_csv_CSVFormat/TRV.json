{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "enum : Predefined",
      "right" : "enum : Predefined",
      "info" : "EnumDeclaration[4245-5124]:EnumDeclaration[4245-5124]"
    }, {
      "left" : "private final CSVFormat format;",
      "right" : "private final CSVFormat format;",
      "info" : "FieldDeclaration[4809-4840]:FieldDeclaration[4809-4840]"
    }, {
      "left" : "private Predefined(final CSVFormat format)",
      "right" : "private Predefined(final CSVFormat format)",
      "info" : "MethodDeclaration[4850-4938]:MethodDeclaration[4850-4938]"
    }, {
      "left" : "public CSVFormat getFormat()",
      "right" : "public CSVFormat getFormat()",
      "info" : "MethodDeclaration[4956-5118]:MethodDeclaration[4956-5118]"
    }, {
      "left" : "private static final long serialVersionUID = 1L;",
      "right" : "private static final long serialVersionUID = 1L;",
      "info" : "FieldDeclaration[5135-5183]:FieldDeclaration[5135-5183]"
    }, {
      "left" : "private final char delimiter;",
      "right" : "private final char delimiter;",
      "info" : "FieldDeclaration[5189-5218]:FieldDeclaration[5189-5218]"
    }, {
      "left" : "private final Character quoteCharacter;",
      "right" : "private final Character quoteCharacter;",
      "info" : "FieldDeclaration[5223-5262]:FieldDeclaration[5223-5262]"
    }, {
      "left" : "private final QuoteMode quoteMode;",
      "right" : "private final QuoteMode quoteMode;",
      "info" : "FieldDeclaration[5298-5332]:FieldDeclaration[5298-5332]"
    }, {
      "left" : "private final Character commentMarker;",
      "right" : "private final Character commentMarker;",
      "info" : "FieldDeclaration[5337-5375]:FieldDeclaration[5337-5375]"
    }, {
      "left" : "private final Character escapeCharacter;",
      "right" : "private final Character escapeCharacter;",
      "info" : "FieldDeclaration[5414-5454]:FieldDeclaration[5414-5454]"
    }, {
      "left" : "private final boolean ignoreSurroundingSpaces;",
      "right" : "private final boolean ignoreSurroundingSpaces;",
      "info" : "FieldDeclaration[5491-5537]:FieldDeclaration[5491-5537]"
    }, {
      "left" : "private final boolean allowMissingColumnNames;",
      "right" : "private final boolean allowMissingColumnNames;",
      "info" : "FieldDeclaration[5602-5648]:FieldDeclaration[5602-5648]"
    }, {
      "left" : "private final boolean ignoreEmptyLines;",
      "right" : "private final boolean ignoreEmptyLines;",
      "info" : "FieldDeclaration[5653-5692]:FieldDeclaration[5653-5692]"
    }, {
      "left" : "private final String recordSeparator;",
      "right" : "private final String recordSeparator;",
      "info" : "FieldDeclaration[5697-5734]:FieldDeclaration[5697-5734]"
    }, {
      "left" : "private final String nullString;",
      "right" : "private final String nullString;",
      "info" : "FieldDeclaration[5754-5786]:FieldDeclaration[5754-5786]"
    }, {
      "left" : "private final String[] header;",
      "right" : "private final String[] header;",
      "info" : "FieldDeclaration[5832-5862]:FieldDeclaration[5832-5862]"
    }, {
      "left" : "private final String[] headerComments;",
      "right" : "private final String[] headerComments;",
      "info" : "FieldDeclaration[5899-5937]:FieldDeclaration[5899-5937]"
    }, {
      "left" : "private final boolean skipHeaderRecord;",
      "right" : "private final boolean skipHeaderRecord;",
      "info" : "FieldDeclaration[5975-6014]:FieldDeclaration[5975-6014]"
    }, {
      "left" : "private final boolean ignoreHeaderCase;",
      "right" : "private final boolean ignoreHeaderCase;",
      "info" : "FieldDeclaration[6019-6058]:FieldDeclaration[6019-6058]"
    }, {
      "left" : "public static final CSVFormat DEFAULT = new CSVFormat(COMMA, DOUBLE_QUOTE_CHAR, null, null, null, false, true,\n            CRLF, null, null, null, false, false, false);",
      "right" : "public static final CSVFormat DEFAULT = new CSVFormat(COMMA, DOUBLE_QUOTE_CHAR, null, null, null, false, true,\n            CRLF, null, null, null, false, false, false);",
      "info" : "FieldDeclaration[6099-6633]:FieldDeclaration[6099-6633]"
    }, {
      "left" : "public static final CSVFormat RFC4180 = DEFAULT.withIgnoreEmptyLines(false);",
      "right" : "public static final CSVFormat RFC4180 = DEFAULT.withIgnoreEmptyLines(false);",
      "info" : "FieldDeclaration[6639-7095]:FieldDeclaration[6639-7095]"
    }, {
      "left" : "public static final CSVFormat EXCEL = DEFAULT.withIgnoreEmptyLines(false).withAllowMissingColumnNames();",
      "right" : "public static final CSVFormat EXCEL = DEFAULT.withIgnoreEmptyLines(false).withAllowMissingColumnNames();",
      "info" : "FieldDeclaration[7101-8341]:FieldDeclaration[7101-8341]"
    }, {
      "left" : "public static final CSVFormat TDF = DEFAULT.withDelimiter(TAB).withIgnoreSurroundingSpaces();",
      "right" : "public static final CSVFormat TDF = DEFAULT.withDelimiter(TAB).withIgnoreSurroundingSpaces();",
      "info" : "FieldDeclaration[8347-8749]:FieldDeclaration[8347-8749]"
    }, {
      "left" : "private static boolean isLineBreak(final char c)",
      "right" : "private static boolean isLineBreak(final char c)",
      "info" : "MethodDeclaration[9773-10085]:MethodDeclaration[9795-10107]"
    }, {
      "left" : "private static boolean isLineBreak(final Character c)",
      "right" : "private static boolean isLineBreak(final Character c)",
      "info" : "MethodDeclaration[10091-10457]:MethodDeclaration[10113-10479]"
    }, {
      "left" : "public static CSVFormat newFormat(final char delimiter)",
      "right" : "public static CSVFormat newFormat(final char delimiter)",
      "info" : "MethodDeclaration[10463-11261]:MethodDeclaration[10485-11283]"
    }, {
      "left" : "public static CSVFormat valueOf(final String format)",
      "right" : "public static CSVFormat valueOf(final String format)",
      "info" : "MethodDeclaration[11267-11600]:MethodDeclaration[11289-11622]"
    }, {
      "left" : "private CSVFormat(final char delimiter, final Character quoteChar, final QuoteMode quoteMode,\n            final Character commentStart, final Character escape, final boolean ignoreSurroundingSpaces,\n            final boolean ignoreEmptyLines, final String recordSeparator, final String nullString,\n            final Object[] headerComments, final String[] header, final boolean skipHeaderRecord,\n            final boolean allowMissingColumnNames, final boolean ignoreHeaderCase)",
      "right" : "private CSVFormat(final char delimiter, final Character quoteChar, final QuoteMode quoteMode,\n            final Character commentStart, final Character escape, final boolean ignoreSurroundingSpaces,\n            final boolean ignoreEmptyLines, final String recordSeparator, final String nullString,\n            final Object[] headerComments, final String[] header, final boolean skipHeaderRecord,\n            final boolean allowMissingColumnNames, final boolean ignoreHeaderCase)",
      "info" : "MethodDeclaration[11606-14227]:MethodDeclaration[11628-14249]"
    }, {
      "left" : "private String[] toStringArray(final Object[] values)",
      "right" : "private String[] toStringArray(final Object[] values)",
      "info" : "MethodDeclaration[14233-14613]:MethodDeclaration[14255-14635]"
    }, {
      "left" : "public boolean equals(final Object obj)",
      "right" : "public boolean equals(final Object obj)",
      "info" : "MethodDeclaration[14619-16653]:MethodDeclaration[14641-16675]"
    }, {
      "left" : "public String format(final Object... values)",
      "right" : "public String format(final Object... values)",
      "info" : "MethodDeclaration[16659-17205]:MethodDeclaration[16681-17227]"
    }, {
      "left" : "public Character getCommentMarker()",
      "right" : "public Character getCommentMarker()",
      "info" : "MethodDeclaration[17211-17434]:MethodDeclaration[17233-17456]"
    }, {
      "left" : "public char getDelimiter()",
      "right" : "public char getDelimiter()",
      "info" : "MethodDeclaration[17440-17643]:MethodDeclaration[17462-17665]"
    }, {
      "left" : "public Character getEscapeCharacter()",
      "right" : "public Character getEscapeCharacter()",
      "info" : "MethodDeclaration[17649-17843]:MethodDeclaration[17671-17865]"
    }, {
      "left" : "public String[] getHeader()",
      "right" : "public String[] getHeader()",
      "info" : "MethodDeclaration[17849-18118]:MethodDeclaration[17871-18140]"
    }, {
      "left" : "public String[] getHeaderComments()",
      "right" : "public String[] getHeaderComments()",
      "info" : "MethodDeclaration[18124-18389]:MethodDeclaration[18146-18411]"
    }, {
      "left" : "public boolean getAllowMissingColumnNames()",
      "right" : "public boolean getAllowMissingColumnNames()",
      "info" : "MethodDeclaration[18395-18766]:MethodDeclaration[18417-18788]"
    }, {
      "left" : "public boolean getIgnoreEmptyLines()",
      "right" : "public boolean getIgnoreEmptyLines()",
      "info" : "MethodDeclaration[18772-19097]:MethodDeclaration[18794-19119]"
    }, {
      "left" : "public boolean getIgnoreSurroundingSpaces()",
      "right" : "public boolean getIgnoreSurroundingSpaces()",
      "info" : "MethodDeclaration[19103-19416]:MethodDeclaration[19125-19438]"
    }, {
      "left" : "public boolean getIgnoreHeaderCase()",
      "right" : "public boolean getIgnoreHeaderCase()",
      "info" : "MethodDeclaration[19422-19697]:MethodDeclaration[19444-19719]"
    }, {
      "left" : "public String getNullString()",
      "right" : "public String getNullString()",
      "info" : "MethodDeclaration[19703-20251]:MethodDeclaration[19725-20273]"
    }, {
      "left" : "public Character getQuoteCharacter()",
      "right" : "public Character getQuoteCharacter()",
      "info" : "MethodDeclaration[20257-20502]:MethodDeclaration[20279-20524]"
    }, {
      "left" : "public QuoteMode getQuoteMode()",
      "right" : "public QuoteMode getQuoteMode()",
      "info" : "MethodDeclaration[20508-20675]:MethodDeclaration[20530-20697]"
    }, {
      "left" : "public String getRecordSeparator()",
      "right" : "public String getRecordSeparator()",
      "info" : "MethodDeclaration[20681-20877]:MethodDeclaration[20703-20899]"
    }, {
      "left" : "public boolean getSkipHeaderRecord()",
      "right" : "public boolean getSkipHeaderRecord()",
      "info" : "MethodDeclaration[20883-21083]:MethodDeclaration[20905-21105]"
    }, {
      "left" : "public int hashCode()",
      "right" : "public int hashCode()",
      "info" : "MethodDeclaration[21089-22141]:MethodDeclaration[21111-22163]"
    }, {
      "left" : "public boolean isCommentMarkerSet()",
      "right" : "public boolean isCommentMarkerSet()",
      "info" : "MethodDeclaration[22147-22494]:MethodDeclaration[22169-22516]"
    }, {
      "left" : "public boolean isEscapeCharacterSet()",
      "right" : "public boolean isEscapeCharacterSet()",
      "info" : "MethodDeclaration[22500-22712]:MethodDeclaration[22522-22734]"
    }, {
      "left" : "public boolean isNullStringSet()",
      "right" : "public boolean isNullStringSet()",
      "info" : "MethodDeclaration[22718-22925]:MethodDeclaration[22740-22947]"
    }, {
      "left" : "public boolean isQuoteCharacterSet()",
      "right" : "public boolean isQuoteCharacterSet()",
      "info" : "MethodDeclaration[22931-23144]:MethodDeclaration[22953-23166]"
    }, {
      "left" : "public CSVParser parse(final Reader in) throws IOException",
      "right" : "public CSVParser parse(final Reader in) throws IOException",
      "info" : "MethodDeclaration[23150-23599]:MethodDeclaration[23172-23621]"
    }, {
      "left" : "public CSVPrinter print(final Appendable out) throws IOException",
      "right" : "public CSVPrinter print(final Appendable out) throws IOException",
      "info" : "MethodDeclaration[23605-24027]:MethodDeclaration[23627-24049]"
    }, {
      "left" : "public String toString()",
      "right" : "public String toString()",
      "info" : "MethodDeclaration[24033-25626]:MethodDeclaration[24055-25648]"
    }, {
      "left" : "private void validate() throws IllegalArgumentException",
      "right" : "private void validate() throws IllegalArgumentException",
      "info" : "MethodDeclaration[25632-27872]:MethodDeclaration[25654-27894]"
    }, {
      "left" : "public CSVFormat withCommentMarker(final char commentMarker)",
      "right" : "public CSVFormat withCommentMarker(final char commentMarker)",
      "info" : "MethodDeclaration[27878-28509]:MethodDeclaration[27900-28531]"
    }, {
      "left" : "public CSVFormat withCommentMarker(final Character commentMarker)",
      "right" : "public CSVFormat withCommentMarker(final Character commentMarker)",
      "info" : "MethodDeclaration[28515-29562]:MethodDeclaration[28537-29584]"
    }, {
      "left" : "public CSVFormat withDelimiter(final char delimiter)",
      "right" : "public CSVFormat withDelimiter(final char delimiter)",
      "info" : "MethodDeclaration[29568-30414]:MethodDeclaration[29590-30436]"
    }, {
      "left" : "public CSVFormat withEscape(final char escape)",
      "right" : "public CSVFormat withEscape(final char escape)",
      "info" : "MethodDeclaration[30420-30904]:MethodDeclaration[30442-30926]"
    }, {
      "left" : "public CSVFormat withEscape(final Character escape)",
      "right" : "public CSVFormat withEscape(final Character escape)",
      "info" : "MethodDeclaration[30910-31795]:MethodDeclaration[30932-31817]"
    }, {
      "left" : "public CSVFormat withHeader(final String... header)",
      "right" : "public CSVFormat withHeader(final String... header)",
      "info" : "MethodDeclaration[31801-32891]:MethodDeclaration[31823-32913]"
    }, {
      "left" : "public CSVFormat withHeader(final ResultSet resultSet) throws SQLException",
      "right" : "public CSVFormat withHeader(final ResultSet resultSet) throws SQLException",
      "info" : "MethodDeclaration[32897-33912]:MethodDeclaration[32919-33934]"
    }, {
      "left" : "public CSVFormat withHeader(final ResultSetMetaData metaData) throws SQLException",
      "right" : "public CSVFormat withHeader(final ResultSetMetaData metaData) throws SQLException",
      "info" : "MethodDeclaration[33918-35456]:MethodDeclaration[33940-35478]"
    }, {
      "left" : "public CSVFormat withHeaderComments(final Object... headerComments)",
      "right" : "public CSVFormat withHeaderComments(final Object... headerComments)",
      "info" : "MethodDeclaration[35462-36430]:MethodDeclaration[35484-36452]"
    }, {
      "left" : "public CSVFormat withAllowMissingColumnNames()",
      "right" : "public CSVFormat withAllowMissingColumnNames()",
      "info" : "MethodDeclaration[36436-36819]:MethodDeclaration[36458-36841]"
    }, {
      "left" : "public CSVFormat withAllowMissingColumnNames(final boolean allowMissingColumnNames)",
      "right" : "public CSVFormat withAllowMissingColumnNames(final boolean allowMissingColumnNames)",
      "info" : "MethodDeclaration[36825-37641]:MethodDeclaration[36847-37663]"
    }, {
      "left" : "public CSVFormat withIgnoreEmptyLines()",
      "right" : "public CSVFormat withIgnoreEmptyLines()",
      "info" : "MethodDeclaration[37647-38018]:MethodDeclaration[37669-38040]"
    }, {
      "left" : "public CSVFormat withIgnoreEmptyLines(final boolean ignoreEmptyLines)",
      "right" : "public CSVFormat withIgnoreEmptyLines(final boolean ignoreEmptyLines)",
      "info" : "MethodDeclaration[38024-38797]:MethodDeclaration[38046-38819]"
    }, {
      "left" : "public CSVFormat withIgnoreSurroundingSpaces()",
      "right" : "public CSVFormat withIgnoreSurroundingSpaces()",
      "info" : "MethodDeclaration[38803-39163]:MethodDeclaration[38825-39185]"
    }, {
      "left" : "public CSVFormat withIgnoreSurroundingSpaces(final boolean ignoreSurroundingSpaces)",
      "right" : "public CSVFormat withIgnoreSurroundingSpaces(final boolean ignoreSurroundingSpaces)",
      "info" : "MethodDeclaration[39169-39901]:MethodDeclaration[39191-39923]"
    }, {
      "left" : "public CSVFormat withIgnoreHeaderCase()",
      "right" : "public CSVFormat withIgnoreHeaderCase()",
      "info" : "MethodDeclaration[39907-40211]:MethodDeclaration[39929-40233]"
    }, {
      "left" : "public CSVFormat withIgnoreHeaderCase(final boolean ignoreHeaderCase)",
      "right" : "public CSVFormat withIgnoreHeaderCase(final boolean ignoreHeaderCase)",
      "info" : "MethodDeclaration[40217-40934]:MethodDeclaration[40239-40956]"
    }, {
      "left" : "public CSVFormat withNullString(final String nullString)",
      "right" : "public CSVFormat withNullString(final String nullString)",
      "info" : "MethodDeclaration[40940-41930]:MethodDeclaration[40962-41952]"
    }, {
      "left" : "public CSVFormat withQuote(final char quoteChar)",
      "right" : "public CSVFormat withQuote(final char quoteChar)",
      "info" : "MethodDeclaration[41936-42413]:MethodDeclaration[41958-42435]"
    }, {
      "left" : "public CSVFormat withQuote(final Character quoteChar)",
      "right" : "public CSVFormat withQuote(final Character quoteChar)",
      "info" : "MethodDeclaration[42419-43294]:MethodDeclaration[42441-43316]"
    }, {
      "left" : "public CSVFormat withQuoteMode(final QuoteMode quoteModePolicy)",
      "right" : "public CSVFormat withQuoteMode(final QuoteMode quoteModePolicy)",
      "info" : "MethodDeclaration[43300-43943]:MethodDeclaration[43322-43965]"
    }, {
      "left" : "public CSVFormat withRecordSeparator(final char recordSeparator)",
      "right" : "public CSVFormat withRecordSeparator(final char recordSeparator)",
      "info" : "MethodDeclaration[43949-44592]:MethodDeclaration[43971-44614]"
    }, {
      "left" : "public CSVFormat withRecordSeparator(final String recordSeparator)",
      "right" : "public CSVFormat withRecordSeparator(final String recordSeparator)",
      "info" : "MethodDeclaration[44598-45564]:MethodDeclaration[44620-45586]"
    }, {
      "left" : "public CSVFormat withSkipHeaderRecord()",
      "right" : "public CSVFormat withSkipHeaderRecord()",
      "info" : "MethodDeclaration[45570-45946]:MethodDeclaration[45592-45968]"
    }, {
      "left" : "public CSVFormat withSkipHeaderRecord(final boolean skipHeaderRecord)",
      "right" : "public CSVFormat withSkipHeaderRecord(final boolean skipHeaderRecord)",
      "info" : "MethodDeclaration[45952-46620]:MethodDeclaration[45974-46642]"
    } ],
    "mappings" : [
 {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[4850-4857]:Modifier[4850-4857]"
    }, {
      "left" : "Predefined",
      "right" : "Predefined",
      "info" : "SimpleName[4858-4868]:SimpleName[4858-4868]"
    }, {
      "left" : "final CSVFormat format",
      "right" : "final CSVFormat format",
      "info" : "SingleVariableDeclaration[4869-4891]:SingleVariableDeclaration[4869-4891]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4893-4938]:Block[4893-4938]"
    }, {
      "left" : "this.format = format;",
      "right" : "this.format = format;",
      "info" : "ExpressionStatement[4907-4928]:ExpressionStatement[4907-4928]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[5051-5057]:Modifier[5051-5057]"
    }, {
      "left" : "CSVFormat",
      "right" : "CSVFormat",
      "info" : "SimpleType[5058-5067]:SimpleType[5058-5067]"
    }, {
      "left" : "getFormat",
      "right" : "getFormat",
      "info" : "SimpleName[5068-5077]:SimpleName[5068-5077]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5080-5118]:Block[5080-5118]"
    }, {
      "left" : "return format;",
      "right" : "return format;",
      "info" : "ReturnStatement[5094-5108]:ReturnStatement[5094-5108]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[9994-10001]:Modifier[10016-10023]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[10002-10008]:Modifier[10024-10030]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[10009-10016]:PrimitiveType[10031-10038]"
    }, {
      "left" : "isLineBreak",
      "right" : "isLineBreak",
      "info" : "SimpleName[10017-10028]:SimpleName[10039-10050]"
    }, {
      "left" : "final char c",
      "right" : "final char c",
      "info" : "SingleVariableDeclaration[10029-10041]:SingleVariableDeclaration[10051-10063]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10043-10085]:Block[10065-10107]"
    }, {
      "left" : "return c == LF || c == CR;",
      "right" : "return c == LF || c == CR;",
      "info" : "ReturnStatement[10053-10079]:ReturnStatement[10075-10101]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[10340-10347]:Modifier[10362-10369]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[10348-10354]:Modifier[10370-10376]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[10355-10362]:PrimitiveType[10377-10384]"
    }, {
      "left" : "isLineBreak",
      "right" : "isLineBreak",
      "info" : "SimpleName[10363-10374]:SimpleName[10385-10396]"
    }, {
      "left" : "final Character c",
      "right" : "final Character c",
      "info" : "SingleVariableDeclaration[10375-10392]:SingleVariableDeclaration[10397-10414]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10394-10457]:Block[10416-10479]"
    }, {
      "left" : "return c != null && isLineBreak(c.charValue());",
      "right" : "return c != null && isLineBreak(c.charValue());",
      "info" : "ReturnStatement[10404-10451]:ReturnStatement[10426-10473]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[11074-11080]:Modifier[11096-11102]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[11081-11087]:Modifier[11103-11109]"
    }, {
      "left" : "CSVFormat",
      "right" : "CSVFormat",
      "info" : "SimpleType[11088-11097]:SimpleType[11110-11119]"
    }, {
      "left" : "newFormat",
      "right" : "newFormat",
      "info" : "SimpleName[11098-11107]:SimpleName[11120-11129]"
    }, {
      "left" : "final char delimiter",
      "right" : "final char delimiter",
      "info" : "SingleVariableDeclaration[11108-11128]:SingleVariableDeclaration[11130-11150]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11130-11261]:Block[11152-11283]"
    }, {
      "left" : "return new CSVFormat(delimiter, null, null, null, null, false, false, null, null, null, null, false, false, false);",
      "right" : "return new CSVFormat(delimiter, null, null, null, null, false, false, null, null, null, null, false, false, false);",
      "info" : "ReturnStatement[11140-11255]:ReturnStatement[11162-11277]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[11475-11481]:Modifier[11497-11503]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[11482-11488]:Modifier[11504-11510]"
    }, {
      "left" : "CSVFormat",
      "right" : "CSVFormat",
      "info" : "SimpleType[11489-11498]:SimpleType[11511-11520]"
    }, {
      "left" : "valueOf",
      "right" : "valueOf",
      "info" : "SimpleName[11499-11506]:SimpleName[11521-11528]"
    }, {
      "left" : "final String format",
      "right" : "final String format",
      "info" : "SingleVariableDeclaration[11507-11526]:SingleVariableDeclaration[11529-11548]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11528-11600]:Block[11550-11622]"
    }, {
      "left" : "return CSVFormat.Predefined.valueOf(format).getFormat();",
      "right" : "return CSVFormat.Predefined.valueOf(format).getFormat();",
      "info" : "ReturnStatement[11538-11594]:ReturnStatement[11560-11616]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[13039-13046]:Modifier[13061-13068]"
    }, {
      "left" : "CSVFormat",
      "right" : "CSVFormat",
      "info" : "SimpleName[13047-13056]:SimpleName[13069-13078]"
    }, {
      "left" : "final char delimiter",
      "right" : "final char delimiter",
      "info" : "SingleVariableDeclaration[13057-13077]:SingleVariableDeclaration[13079-13099]"
    }, {
      "left" : "final Character quoteChar",
      "right" : "final Character quoteChar",
      "info" : "SingleVariableDeclaration[13079-13104]:SingleVariableDeclaration[13101-13126]"
    }, {
      "left" : "final QuoteMode quoteMode",
      "right" : "final QuoteMode quoteMode",
      "info" : "SingleVariableDeclaration[13106-13131]:SingleVariableDeclaration[13128-13153]"
    }, {
      "left" : "final Character commentStart",
      "right" : "final Character commentStart",
      "info" : "SingleVariableDeclaration[13145-13173]:SingleVariableDeclaration[13167-13195]"
    }, {
      "left" : "final Character escape",
      "right" : "final Character escape",
      "info" : "SingleVariableDeclaration[13175-13197]:SingleVariableDeclaration[13197-13219]"
    }, {
      "left" : "final boolean ignoreSurroundingSpaces",
      "right" : "final boolean ignoreSurroundingSpaces",
      "info" : "SingleVariableDeclaration[13199-13236]:SingleVariableDeclaration[13221-13258]"
    }, {
      "left" : "final boolean ignoreEmptyLines",
      "right" : "final boolean ignoreEmptyLines",
      "info" : "SingleVariableDeclaration[13250-13280]:SingleVariableDeclaration[13272-13302]"
    }, {
      "left" : "final String recordSeparator",
      "right" : "final String recordSeparator",
      "info" : "SingleVariableDeclaration[13282-13310]:SingleVariableDeclaration[13304-13332]"
    }, {
      "left" : "final String nullString",
      "right" : "final String nullString",
      "info" : "SingleVariableDeclaration[13312-13335]:SingleVariableDeclaration[13334-13357]"
    }, {
      "left" : "final Object[] headerComments",
      "right" : "final Object[] headerComments",
      "info" : "SingleVariableDeclaration[13349-13378]:SingleVariableDeclaration[13371-13400]"
    }, {
      "left" : "final String[] header",
      "right" : "final String[] header",
      "info" : "SingleVariableDeclaration[13380-13401]:SingleVariableDeclaration[13402-13423]"
    }, {
      "left" : "final boolean skipHeaderRecord",
      "right" : "final boolean skipHeaderRecord",
      "info" : "SingleVariableDeclaration[13403-13433]:SingleVariableDeclaration[13425-13455]"
    }, {
      "left" : "final boolean allowMissingColumnNames",
      "right" : "final boolean allowMissingColumnNames",
      "info" : "SingleVariableDeclaration[13447-13484]:SingleVariableDeclaration[13469-13506]"
    }, {
      "left" : "final boolean ignoreHeaderCase",
      "right" : "final boolean ignoreHeaderCase",
      "info" : "SingleVariableDeclaration[13486-13516]:SingleVariableDeclaration[13508-13538]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13518-14227]:Block[13540-14249]"
    }, {
      "left" : "this.delimiter = delimiter;",
      "right" : "this.delimiter = delimiter;",
      "info" : "ExpressionStatement[13528-13555]:ExpressionStatement[13550-13577]"
    }, {
      "left" : "this.quoteCharacter = quoteChar;",
      "right" : "this.quoteCharacter = quoteChar;",
      "info" : "ExpressionStatement[13564-13596]:ExpressionStatement[13586-13618]"
    }, {
      "left" : "this.quoteMode = quoteMode;",
      "right" : "this.quoteMode = quoteMode;",
      "info" : "ExpressionStatement[13605-13632]:ExpressionStatement[13627-13654]"
    }, {
      "left" : "this.commentMarker = commentStart;",
      "right" : "this.commentMarker = commentStart;",
      "info" : "ExpressionStatement[13641-13675]:ExpressionStatement[13663-13697]"
    }, {
      "left" : "this.escapeCharacter = escape;",
      "right" : "this.escapeCharacter = escape;",
      "info" : "ExpressionStatement[13684-13714]:ExpressionStatement[13706-13736]"
    }, {
      "left" : "this.ignoreSurroundingSpaces = ignoreSurroundingSpaces;",
      "right" : "this.ignoreSurroundingSpaces = ignoreSurroundingSpaces;",
      "info" : "ExpressionStatement[13723-13778]:ExpressionStatement[13745-13800]"
    }, {
      "left" : "this.allowMissingColumnNames = allowMissingColumnNames;",
      "right" : "this.allowMissingColumnNames = allowMissingColumnNames;",
      "info" : "ExpressionStatement[13787-13842]:ExpressionStatement[13809-13864]"
    }, {
      "left" : "this.ignoreEmptyLines = ignoreEmptyLines;",
      "right" : "this.ignoreEmptyLines = ignoreEmptyLines;",
      "info" : "ExpressionStatement[13851-13892]:ExpressionStatement[13873-13914]"
    }, {
      "left" : "this.recordSeparator = recordSeparator;",
      "right" : "this.recordSeparator = recordSeparator;",
      "info" : "ExpressionStatement[13901-13940]:ExpressionStatement[13923-13962]"
    }, {
      "left" : "this.nullString = nullString;",
      "right" : "this.nullString = nullString;",
      "info" : "ExpressionStatement[13949-13978]:ExpressionStatement[13971-14000]"
    }, {
      "left" : "this.headerComments = toStringArray(headerComments);",
      "right" : "this.headerComments = toStringArray(headerComments);",
      "info" : "ExpressionStatement[13987-14039]:ExpressionStatement[14009-14061]"
    }, {
      "left" : "this.header = header == null ? null : header.clone();",
      "right" : "this.header = header == null ? null : header.clone();",
      "info" : "ExpressionStatement[14048-14101]:ExpressionStatement[14070-14123]"
    }, {
      "left" : "this.skipHeaderRecord = skipHeaderRecord;",
      "right" : "this.skipHeaderRecord = skipHeaderRecord;",
      "info" : "ExpressionStatement[14110-14151]:ExpressionStatement[14132-14173]"
    }, {
      "left" : "this.ignoreHeaderCase = ignoreHeaderCase;",
      "right" : "this.ignoreHeaderCase = ignoreHeaderCase;",
      "info" : "ExpressionStatement[14160-14201]:ExpressionStatement[14182-14223]"
    }, {
      "left" : "validate();",
      "right" : "validate();",
      "info" : "ExpressionStatement[14210-14221]:ExpressionStatement[14232-14243]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[14233-14240]:Modifier[14255-14262]"
    }, {
      "left" : "String[]",
      "right" : "String[]",
      "info" : "ArrayType[14241-14249]:ArrayType[14263-14271]"
    }, {
      "left" : "toStringArray",
      "right" : "toStringArray",
      "info" : "SimpleName[14250-14263]:SimpleName[14272-14285]"
    }, {
      "left" : "final Object[] values",
      "right" : "final Object[] values",
      "info" : "SingleVariableDeclaration[14264-14285]:SingleVariableDeclaration[14286-14307]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14287-14613]:Block[14309-14635]"
    }, {
      "left" : "if (values == null)",
      "right" : "if (values == null)",
      "info" : "IfStatement[14297-14353]:IfStatement[14319-14375]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14317-14353]:Block[14339-14375]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[14331-14343]:ReturnStatement[14353-14365]"
    }, {
      "left" : "final String[] strings = new String[values.length];",
      "right" : "final String[] strings = new String[values.length];",
      "info" : "VariableDeclarationStatement[14362-14413]:VariableDeclarationStatement[14384-14435]"
    }, {
      "left" : "for (int i = 0; i < values.length; i++)",
      "right" : "for (int i = 0; i < values.length; i++)",
      "info" : "ForStatement[14422-14583]:ForStatement[14444-14605]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14462-14583]:Block[14484-14605]"
    }, {
      "left" : "final Object value = values[i];",
      "right" : "final Object value = values[i];",
      "info" : "VariableDeclarationStatement[14476-14507]:VariableDeclarationStatement[14498-14529]"
    }, {
      "left" : "strings[i] = value == null ? null : value.toString();",
      "right" : "strings[i] = value == null ? null : value.toString();",
      "info" : "ExpressionStatement[14520-14573]:ExpressionStatement[14542-14595]"
    }, {
      "left" : "return strings;",
      "right" : "return strings;",
      "info" : "ReturnStatement[14592-14607]:ReturnStatement[14614-14629]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[14619-14628]:MarkerAnnotation[14641-14650]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[14633-14639]:Modifier[14655-14661]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[14640-14647]:PrimitiveType[14662-14669]"
    }, {
      "left" : "equals",
      "right" : "equals",
      "info" : "SimpleName[14648-14654]:SimpleName[14670-14676]"
    }, {
      "left" : "final Object obj",
      "right" : "final Object obj",
      "info" : "SingleVariableDeclaration[14655-14671]:SingleVariableDeclaration[14677-14693]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14673-16653]:Block[14695-16675]"
    }, {
      "left" : "if (this == obj)",
      "right" : "if (this == obj)",
      "info" : "IfStatement[14683-14736]:IfStatement[14705-14758]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14700-14736]:Block[14722-14758]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[14714-14726]:ReturnStatement[14736-14748]"
    }, {
      "left" : "if (obj == null)",
      "right" : "if (obj == null)",
      "info" : "IfStatement[14745-14799]:IfStatement[14767-14821]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14762-14799]:Block[14784-14821]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[14776-14789]:ReturnStatement[14798-14811]"
    }, {
      "left" : "if (getClass() != obj.getClass())",
      "right" : "if (getClass() != obj.getClass())",
      "info" : "IfStatement[14808-14879]:IfStatement[14830-14901]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14842-14879]:Block[14864-14901]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[14856-14869]:ReturnStatement[14878-14891]"
    }, {
      "left" : "final CSVFormat other = (CSVFormat) obj;",
      "right" : "final CSVFormat other = (CSVFormat) obj;",
      "info" : "VariableDeclarationStatement[14889-14929]:VariableDeclarationStatement[14911-14951]"
    }, {
      "left" : "if (delimiter != other.delimiter)",
      "right" : "if (delimiter != other.delimiter)",
      "info" : "IfStatement[14938-15009]:IfStatement[14960-15031]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14972-15009]:Block[14994-15031]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[14986-14999]:ReturnStatement[15008-15021]"
    }, {
      "left" : "if (quoteMode != other.quoteMode)",
      "right" : "if (quoteMode != other.quoteMode)",
      "info" : "IfStatement[15018-15089]:IfStatement[15040-15111]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15052-15089]:Block[15074-15111]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[15066-15079]:ReturnStatement[15088-15101]"
    }, {
      "left" : "if (quoteCharacter == null)",
      "right" : "if (quoteCharacter == null)",
      "info" : "IfStatement[15098-15322]:IfStatement[15120-15344]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15126-15229]:Block[15148-15251]"
    }, {
      "left" : "if (other.quoteCharacter != null)",
      "right" : "if (other.quoteCharacter != null)",
      "info" : "IfStatement[15140-15219]:IfStatement[15162-15241]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15174-15219]:Block[15196-15241]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[15192-15205]:ReturnStatement[15214-15227]"
    }, {
      "left" : "if (!quoteCharacter.equals(other.quoteCharacter))",
      "right" : "if (!quoteCharacter.equals(other.quoteCharacter))",
      "info" : "IfStatement[15235-15322]:IfStatement[15257-15344]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15285-15322]:Block[15307-15344]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[15299-15312]:ReturnStatement[15321-15334]"
    }, {
      "left" : "if (commentMarker == null)",
      "right" : "if (commentMarker == null)",
      "info" : "IfStatement[15331-15551]:IfStatement[15353-15573]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15358-15460]:Block[15380-15482]"
    }, {
      "left" : "if (other.commentMarker != null)",
      "right" : "if (other.commentMarker != null)",
      "info" : "IfStatement[15372-15450]:IfStatement[15394-15472]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15405-15450]:Block[15427-15472]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[15423-15436]:ReturnStatement[15445-15458]"
    }, {
      "left" : "if (!commentMarker.equals(other.commentMarker))",
      "right" : "if (!commentMarker.equals(other.commentMarker))",
      "info" : "IfStatement[15466-15551]:IfStatement[15488-15573]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15514-15551]:Block[15536-15573]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[15528-15541]:ReturnStatement[15550-15563]"
    }, {
      "left" : "if (escapeCharacter == null)",
      "right" : "if (escapeCharacter == null)",
      "info" : "IfStatement[15560-15788]:IfStatement[15582-15810]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15589-15693]:Block[15611-15715]"
    }, {
      "left" : "if (other.escapeCharacter != null)",
      "right" : "if (other.escapeCharacter != null)",
      "info" : "IfStatement[15603-15683]:IfStatement[15625-15705]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15638-15683]:Block[15660-15705]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[15656-15669]:ReturnStatement[15678-15691]"
    }, {
      "left" : "if (!escapeCharacter.equals(other.escapeCharacter))",
      "right" : "if (!escapeCharacter.equals(other.escapeCharacter))",
      "info" : "IfStatement[15699-15788]:IfStatement[15721-15810]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15751-15788]:Block[15773-15810]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[15765-15778]:ReturnStatement[15787-15800]"
    }, {
      "left" : "if (nullString == null)",
      "right" : "if (nullString == null)",
      "info" : "IfStatement[15797-16005]:IfStatement[15819-16027]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15821-15920]:Block[15843-15942]"
    }, {
      "left" : "if (other.nullString != null)",
      "right" : "if (other.nullString != null)",
      "info" : "IfStatement[15835-15910]:IfStatement[15857-15932]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15865-15910]:Block[15887-15932]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[15883-15896]:ReturnStatement[15905-15918]"
    }, {
      "left" : "if (!nullString.equals(other.nullString))",
      "right" : "if (!nullString.equals(other.nullString))",
      "info" : "IfStatement[15926-16005]:IfStatement[15948-16027]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15968-16005]:Block[15990-16027]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[15982-15995]:ReturnStatement[16004-16017]"
    }, {
      "left" : "if (!Arrays.equals(header, other.header))",
      "right" : "if (!Arrays.equals(header, other.header))",
      "info" : "IfStatement[16014-16093]:IfStatement[16036-16115]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16056-16093]:Block[16078-16115]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[16070-16083]:ReturnStatement[16092-16105]"
    }, {
      "left" : "if (ignoreSurroundingSpaces != other.ignoreSurroundingSpaces)",
      "right" : "if (ignoreSurroundingSpaces != other.ignoreSurroundingSpaces)",
      "info" : "IfStatement[16102-16201]:IfStatement[16124-16223]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16164-16201]:Block[16186-16223]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[16178-16191]:ReturnStatement[16200-16213]"
    }, {
      "left" : "if (ignoreEmptyLines != other.ignoreEmptyLines)",
      "right" : "if (ignoreEmptyLines != other.ignoreEmptyLines)",
      "info" : "IfStatement[16210-16295]:IfStatement[16232-16317]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16258-16295]:Block[16280-16317]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[16272-16285]:ReturnStatement[16294-16307]"
    }, {
      "left" : "if (skipHeaderRecord != other.skipHeaderRecord)",
      "right" : "if (skipHeaderRecord != other.skipHeaderRecord)",
      "info" : "IfStatement[16304-16389]:IfStatement[16326-16411]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16352-16389]:Block[16374-16411]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[16366-16379]:ReturnStatement[16388-16401]"
    }, {
      "left" : "if (recordSeparator == null)",
      "right" : "if (recordSeparator == null)",
      "info" : "IfStatement[16398-16626]:IfStatement[16420-16648]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16427-16531]:Block[16449-16553]"
    }, {
      "left" : "if (other.recordSeparator != null)",
      "right" : "if (other.recordSeparator != null)",
      "info" : "IfStatement[16441-16521]:IfStatement[16463-16543]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16476-16521]:Block[16498-16543]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[16494-16507]:ReturnStatement[16516-16529]"
    }, {
      "left" : "if (!recordSeparator.equals(other.recordSeparator))",
      "right" : "if (!recordSeparator.equals(other.recordSeparator))",
      "info" : "IfStatement[16537-16626]:IfStatement[16559-16648]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16589-16626]:Block[16611-16648]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[16603-16616]:ReturnStatement[16625-16638]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[16635-16647]:ReturnStatement[16657-16669]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[16815-16821]:Modifier[16837-16843]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[16822-16828]:SimpleType[16844-16850]"
    }, {
      "left" : "format",
      "right" : "format",
      "info" : "SimpleName[16829-16835]:SimpleName[16851-16857]"
    }, {
      "left" : "final Object... values",
      "right" : "final Object... values",
      "info" : "SingleVariableDeclaration[16836-16858]:SingleVariableDeclaration[16858-16880]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16860-17205]:Block[16882-17227]"
    }, {
      "left" : "final StringWriter out = new StringWriter();",
      "right" : "final StringWriter out = new StringWriter();",
      "info" : "VariableDeclarationStatement[16870-16914]:VariableDeclarationStatement[16892-16936]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[16923-17199]:TryStatement[16945-17221]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16927-17039]:Block[16949-17061]"
    }, {
      "left" : "new CSVPrinter(out, this).printRecord(values);",
      "right" : "new CSVPrinter(out, this).printRecord(values);",
      "info" : "ExpressionStatement[16941-16987]:ExpressionStatement[16963-17009]"
    }, {
      "left" : "return out.toString().trim();",
      "right" : "return out.toString().trim();",
      "info" : "ReturnStatement[17000-17029]:ReturnStatement[17022-17051]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17068-17199]:Block[17090-17221]"
    }, {
      "left" : "throw new IllegalStateException(e);",
      "right" : "throw new IllegalStateException(e);",
      "info" : "ThrowStatement[17154-17189]:ThrowStatement[17176-17211]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[17361-17367]:Modifier[17383-17389]"
    }, {
      "left" : "Character",
      "right" : "Character",
      "info" : "SimpleType[17368-17377]:SimpleType[17390-17399]"
    }, {
      "left" : "getCommentMarker",
      "right" : "getCommentMarker",
      "info" : "SimpleName[17378-17394]:SimpleName[17400-17416]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17397-17434]:Block[17419-17456]"
    }, {
      "left" : "return commentMarker;",
      "right" : "return commentMarker;",
      "info" : "ReturnStatement[17407-17428]:ReturnStatement[17429-17450]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[17583-17589]:Modifier[17605-17611]"
    }, {
      "left" : "char",
      "right" : "char",
      "info" : "PrimitiveType[17590-17594]:PrimitiveType[17612-17616]"
    }, {
      "left" : "getDelimiter",
      "right" : "getDelimiter",
      "info" : "SimpleName[17595-17607]:SimpleName[17617-17629]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17610-17643]:Block[17632-17665]"
    }, {
      "left" : "return delimiter;",
      "right" : "return delimiter;",
      "info" : "ReturnStatement[17620-17637]:ReturnStatement[17642-17659]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[17766-17772]:Modifier[17788-17794]"
    }, {
      "left" : "Character",
      "right" : "Character",
      "info" : "SimpleType[17773-17782]:SimpleType[17795-17804]"
    }, {
      "left" : "getEscapeCharacter",
      "right" : "getEscapeCharacter",
      "info" : "SimpleName[17783-17801]:SimpleName[17805-17823]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17804-17843]:Block[17826-17865]"
    }, {
      "left" : "return escapeCharacter;",
      "right" : "return escapeCharacter;",
      "info" : "ReturnStatement[17814-17837]:ReturnStatement[17836-17859]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[18028-18034]:Modifier[18050-18056]"
    }, {
      "left" : "String[]",
      "right" : "String[]",
      "info" : "ArrayType[18035-18043]:ArrayType[18057-18065]"
    }, {
      "left" : "getHeader",
      "right" : "getHeader",
      "info" : "SimpleName[18044-18053]:SimpleName[18066-18075]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18056-18118]:Block[18078-18140]"
    }, {
      "left" : "return header != null ? header.clone() : null;",
      "right" : "return header != null ? header.clone() : null;",
      "info" : "ReturnStatement[18066-18112]:ReturnStatement[18088-18134]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[18275-18281]:Modifier[18297-18303]"
    }, {
      "left" : "String[]",
      "right" : "String[]",
      "info" : "ArrayType[18282-18290]:ArrayType[18304-18312]"
    }, {
      "left" : "getHeaderComments",
      "right" : "getHeaderComments",
      "info" : "SimpleName[18291-18308]:SimpleName[18313-18330]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18311-18389]:Block[18333-18411]"
    }, {
      "left" : "return headerComments != null ? headerComments.clone() : null;",
      "right" : "return headerComments != null ? headerComments.clone() : null;",
      "info" : "ReturnStatement[18321-18383]:ReturnStatement[18343-18405]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[18675-18681]:Modifier[18697-18703]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[18682-18689]:PrimitiveType[18704-18711]"
    }, {
      "left" : "getAllowMissingColumnNames",
      "right" : "getAllowMissingColumnNames",
      "info" : "SimpleName[18690-18716]:SimpleName[18712-18738]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18719-18766]:Block[18741-18788]"
    }, {
      "left" : "return allowMissingColumnNames;",
      "right" : "return allowMissingColumnNames;",
      "info" : "ReturnStatement[18729-18760]:ReturnStatement[18751-18782]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[19020-19026]:Modifier[19042-19048]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[19027-19034]:PrimitiveType[19049-19056]"
    }, {
      "left" : "getIgnoreEmptyLines",
      "right" : "getIgnoreEmptyLines",
      "info" : "SimpleName[19035-19054]:SimpleName[19057-19076]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19057-19097]:Block[19079-19119]"
    }, {
      "left" : "return ignoreEmptyLines;",
      "right" : "return ignoreEmptyLines;",
      "info" : "ReturnStatement[19067-19091]:ReturnStatement[19089-19113]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[19325-19331]:Modifier[19347-19353]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[19332-19339]:PrimitiveType[19354-19361]"
    }, {
      "left" : "getIgnoreSurroundingSpaces",
      "right" : "getIgnoreSurroundingSpaces",
      "info" : "SimpleName[19340-19366]:SimpleName[19362-19388]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19369-19416]:Block[19391-19438]"
    }, {
      "left" : "return ignoreSurroundingSpaces;",
      "right" : "return ignoreSurroundingSpaces;",
      "info" : "ReturnStatement[19379-19410]:ReturnStatement[19401-19432]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[19620-19626]:Modifier[19642-19648]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[19627-19634]:PrimitiveType[19649-19656]"
    }, {
      "left" : "getIgnoreHeaderCase",
      "right" : "getIgnoreHeaderCase",
      "info" : "SimpleName[19635-19654]:SimpleName[19657-19676]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19657-19697]:Block[19679-19719]"
    }, {
      "left" : "return ignoreHeaderCase;",
      "right" : "return ignoreHeaderCase;",
      "info" : "ReturnStatement[19667-19691]:ReturnStatement[19689-19713]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[20187-20193]:Modifier[20209-20215]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[20194-20200]:SimpleType[20216-20222]"
    }, {
      "left" : "getNullString",
      "right" : "getNullString",
      "info" : "SimpleName[20201-20214]:SimpleName[20223-20236]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20217-20251]:Block[20239-20273]"
    }, {
      "left" : "return nullString;",
      "right" : "return nullString;",
      "info" : "ReturnStatement[20227-20245]:ReturnStatement[20249-20267]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[20427-20433]:Modifier[20449-20455]"
    }, {
      "left" : "Character",
      "right" : "Character",
      "info" : "SimpleType[20434-20443]:SimpleType[20456-20465]"
    }, {
      "left" : "getQuoteCharacter",
      "right" : "getQuoteCharacter",
      "info" : "SimpleName[20444-20461]:SimpleName[20466-20483]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20464-20502]:Block[20486-20524]"
    }, {
      "left" : "return quoteCharacter;",
      "right" : "return quoteCharacter;",
      "info" : "ReturnStatement[20474-20496]:ReturnStatement[20496-20518]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[20610-20616]:Modifier[20632-20638]"
    }, {
      "left" : "QuoteMode",
      "right" : "QuoteMode",
      "info" : "SimpleType[20617-20626]:SimpleType[20639-20648]"
    }, {
      "left" : "getQuoteMode",
      "right" : "getQuoteMode",
      "info" : "SimpleName[20627-20639]:SimpleName[20649-20661]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20642-20675]:Block[20664-20697]"
    }, {
      "left" : "return quoteMode;",
      "right" : "return quoteMode;",
      "info" : "ReturnStatement[20652-20669]:ReturnStatement[20674-20691]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[20803-20809]:Modifier[20825-20831]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[20810-20816]:SimpleType[20832-20838]"
    }, {
      "left" : "getRecordSeparator",
      "right" : "getRecordSeparator",
      "info" : "SimpleName[20817-20835]:SimpleName[20839-20857]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20838-20877]:Block[20860-20899]"
    }, {
      "left" : "return recordSeparator;",
      "right" : "return recordSeparator;",
      "info" : "ReturnStatement[20848-20871]:ReturnStatement[20870-20893]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[21006-21012]:Modifier[21028-21034]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[21013-21020]:PrimitiveType[21035-21042]"
    }, {
      "left" : "getSkipHeaderRecord",
      "right" : "getSkipHeaderRecord",
      "info" : "SimpleName[21021-21040]:SimpleName[21043-21062]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21043-21083]:Block[21065-21105]"
    }, {
      "left" : "return skipHeaderRecord;",
      "right" : "return skipHeaderRecord;",
      "info" : "ReturnStatement[21053-21077]:ReturnStatement[21075-21099]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[21089-21098]:MarkerAnnotation[21111-21120]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[21103-21109]:Modifier[21125-21131]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[21110-21113]:PrimitiveType[21132-21135]"
    }, {
      "left" : "hashCode",
      "right" : "hashCode",
      "info" : "SimpleName[21114-21122]:SimpleName[21136-21144]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21125-22141]:Block[21147-22163]"
    }, {
      "left" : "final int prime = 31;",
      "right" : "final int prime = 31;",
      "info" : "VariableDeclarationStatement[21135-21156]:VariableDeclarationStatement[21157-21178]"
    }, {
      "left" : "int result = 1;",
      "right" : "int result = 1;",
      "info" : "VariableDeclarationStatement[21165-21180]:VariableDeclarationStatement[21187-21202]"
    }, {
      "left" : "result = prime * result + delimiter;",
      "right" : "result = prime * result + delimiter;",
      "info" : "ExpressionStatement[21190-21226]:ExpressionStatement[21212-21248]"
    }, {
      "left" : "result = prime * result + ((quoteMode == null) ? 0 : quoteMode.hashCode());",
      "right" : "result = prime * result + ((quoteMode == null) ? 0 : quoteMode.hashCode());",
      "info" : "ExpressionStatement[21235-21310]:ExpressionStatement[21257-21332]"
    }, {
      "left" : "result = prime * result + ((quoteCharacter == null) ? 0 : quoteCharacter.hashCode());",
      "right" : "result = prime * result + ((quoteCharacter == null) ? 0 : quoteCharacter.hashCode());",
      "info" : "ExpressionStatement[21319-21404]:ExpressionStatement[21341-21426]"
    }, {
      "left" : "result = prime * result + ((commentMarker == null) ? 0 : commentMarker.hashCode());",
      "right" : "result = prime * result + ((commentMarker == null) ? 0 : commentMarker.hashCode());",
      "info" : "ExpressionStatement[21413-21496]:ExpressionStatement[21435-21518]"
    }, {
      "left" : "result = prime * result + ((escapeCharacter == null) ? 0 : escapeCharacter.hashCode());",
      "right" : "result = prime * result + ((escapeCharacter == null) ? 0 : escapeCharacter.hashCode());",
      "info" : "ExpressionStatement[21505-21592]:ExpressionStatement[21527-21614]"
    }, {
      "left" : "result = prime * result + ((nullString == null) ? 0 : nullString.hashCode());",
      "right" : "result = prime * result + ((nullString == null) ? 0 : nullString.hashCode());",
      "info" : "ExpressionStatement[21601-21678]:ExpressionStatement[21623-21700]"
    }, {
      "left" : "result = prime * result + (ignoreSurroundingSpaces ? 1231 : 1237);",
      "right" : "result = prime * result + (ignoreSurroundingSpaces ? 1231 : 1237);",
      "info" : "ExpressionStatement[21687-21753]:ExpressionStatement[21709-21775]"
    }, {
      "left" : "result = prime * result + (ignoreHeaderCase ? 1231 : 1237);",
      "right" : "result = prime * result + (ignoreHeaderCase ? 1231 : 1237);",
      "info" : "ExpressionStatement[21762-21821]:ExpressionStatement[21784-21843]"
    }, {
      "left" : "result = prime * result + (ignoreEmptyLines ? 1231 : 1237);",
      "right" : "result = prime * result + (ignoreEmptyLines ? 1231 : 1237);",
      "info" : "ExpressionStatement[21830-21889]:ExpressionStatement[21852-21911]"
    }, {
      "left" : "result = prime * result + (skipHeaderRecord ? 1231 : 1237);",
      "right" : "result = prime * result + (skipHeaderRecord ? 1231 : 1237);",
      "info" : "ExpressionStatement[21898-21957]:ExpressionStatement[21920-21979]"
    }, {
      "left" : "result = prime * result + ((recordSeparator == null) ? 0 : recordSeparator.hashCode());",
      "right" : "result = prime * result + ((recordSeparator == null) ? 0 : recordSeparator.hashCode());",
      "info" : "ExpressionStatement[21966-22053]:ExpressionStatement[21988-22075]"
    }, {
      "left" : "result = prime * result + Arrays.hashCode(header);",
      "right" : "result = prime * result + Arrays.hashCode(header);",
      "info" : "ExpressionStatement[22062-22112]:ExpressionStatement[22084-22134]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[22121-22135]:ReturnStatement[22143-22157]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[22413-22419]:Modifier[22435-22441]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[22420-22427]:PrimitiveType[22442-22449]"
    }, {
      "left" : "isCommentMarkerSet",
      "right" : "isCommentMarkerSet",
      "info" : "SimpleName[22428-22446]:SimpleName[22450-22468]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22449-22494]:Block[22471-22516]"
    }, {
      "left" : "return commentMarker != null;",
      "right" : "return commentMarker != null;",
      "info" : "ReturnStatement[22459-22488]:ReturnStatement[22481-22510]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[22627-22633]:Modifier[22649-22655]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[22634-22641]:PrimitiveType[22656-22663]"
    }, {
      "left" : "isEscapeCharacterSet",
      "right" : "isEscapeCharacterSet",
      "info" : "SimpleName[22642-22662]:SimpleName[22664-22684]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22665-22712]:Block[22687-22734]"
    }, {
      "left" : "return escapeCharacter != null;",
      "right" : "return escapeCharacter != null;",
      "info" : "ReturnStatement[22675-22706]:ReturnStatement[22697-22728]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[22850-22856]:Modifier[22872-22878]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[22857-22864]:PrimitiveType[22879-22886]"
    }, {
      "left" : "isNullStringSet",
      "right" : "isNullStringSet",
      "info" : "SimpleName[22865-22880]:SimpleName[22887-22902]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22883-22925]:Block[22905-22947]"
    }, {
      "left" : "return nullString != null;",
      "right" : "return nullString != null;",
      "info" : "ReturnStatement[22893-22919]:ReturnStatement[22915-22941]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[23061-23067]:Modifier[23083-23089]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[23068-23075]:PrimitiveType[23090-23097]"
    }, {
      "left" : "isQuoteCharacterSet",
      "right" : "isQuoteCharacterSet",
      "info" : "SimpleName[23076-23095]:SimpleName[23098-23117]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23098-23144]:Block[23120-23166]"
    }, {
      "left" : "return quoteCharacter != null;",
      "right" : "return quoteCharacter != null;",
      "info" : "ReturnStatement[23108-23138]:ReturnStatement[23130-23160]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[23493-23499]:Modifier[23515-23521]"
    }, {
      "left" : "CSVParser",
      "right" : "CSVParser",
      "info" : "SimpleType[23500-23509]:SimpleType[23522-23531]"
    }, {
      "left" : "parse",
      "right" : "parse",
      "info" : "SimpleName[23510-23515]:SimpleName[23532-23537]"
    }, {
      "left" : "final Reader in",
      "right" : "final Reader in",
      "info" : "SingleVariableDeclaration[23516-23531]:SingleVariableDeclaration[23538-23553]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[23540-23551]:SimpleType[23562-23573]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23552-23599]:Block[23574-23621]"
    }, {
      "left" : "return new CSVParser(in, this);",
      "right" : "return new CSVParser(in, this);",
      "info" : "ReturnStatement[23562-23593]:ReturnStatement[23584-23615]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[23913-23919]:Modifier[23935-23941]"
    }, {
      "left" : "CSVPrinter",
      "right" : "CSVPrinter",
      "info" : "SimpleType[23920-23930]:SimpleType[23942-23952]"
    }, {
      "left" : "print",
      "right" : "print",
      "info" : "SimpleName[23931-23936]:SimpleName[23953-23958]"
    }, {
      "left" : "final Appendable out",
      "right" : "final Appendable out",
      "info" : "SingleVariableDeclaration[23937-23957]:SingleVariableDeclaration[23959-23979]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[23966-23977]:SimpleType[23988-23999]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23978-24027]:Block[24000-24049]"
    }, {
      "left" : "return new CSVPrinter(out, this);",
      "right" : "return new CSVPrinter(out, this);",
      "info" : "ReturnStatement[23988-24021]:ReturnStatement[24010-24043]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[24033-24042]:MarkerAnnotation[24055-24064]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[24047-24053]:Modifier[24069-24075]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[24054-24060]:SimpleType[24076-24082]"
    }, {
      "left" : "toString",
      "right" : "toString",
      "info" : "SimpleName[24061-24069]:SimpleName[24083-24091]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24072-25626]:Block[24094-25648]"
    }, {
      "left" : "final StringBuilder sb = new StringBuilder();",
      "right" : "final StringBuilder sb = new StringBuilder();",
      "info" : "VariableDeclarationStatement[24082-24127]:VariableDeclarationStatement[24104-24149]"
    }, {
      "left" : "sb.append(\"Delimiter=<\").append(delimiter).append('>');",
      "right" : "sb.append(\"Delimiter=<\").append(delimiter).append('>');",
      "info" : "ExpressionStatement[24136-24191]:ExpressionStatement[24158-24213]"
    }, {
      "left" : "if (isEscapeCharacterSet())",
      "right" : "if (isEscapeCharacterSet())",
      "info" : "IfStatement[24200-24338]:IfStatement[24222-24360]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24228-24338]:Block[24250-24360]"
    }, {
      "left" : "sb.append(' ');",
      "right" : "sb.append(' ');",
      "info" : "ExpressionStatement[24242-24257]:ExpressionStatement[24264-24279]"
    }, {
      "left" : "sb.append(\"Escape=<\").append(escapeCharacter).append('>');",
      "right" : "sb.append(\"Escape=<\").append(escapeCharacter).append('>');",
      "info" : "ExpressionStatement[24270-24328]:ExpressionStatement[24292-24350]"
    }, {
      "left" : "if (isQuoteCharacterSet())",
      "right" : "if (isQuoteCharacterSet())",
      "info" : "IfStatement[24347-24486]:IfStatement[24369-24508]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24374-24486]:Block[24396-24508]"
    }, {
      "left" : "sb.append(' ');",
      "right" : "sb.append(' ');",
      "info" : "ExpressionStatement[24388-24403]:ExpressionStatement[24410-24425]"
    }, {
      "left" : "sb.append(\"QuoteChar=<\").append(quoteCharacter).append('>');",
      "right" : "sb.append(\"QuoteChar=<\").append(quoteCharacter).append('>');",
      "info" : "ExpressionStatement[24416-24476]:ExpressionStatement[24438-24498]"
    }, {
      "left" : "if (isCommentMarkerSet())",
      "right" : "if (isCommentMarkerSet())",
      "info" : "IfStatement[24495-24635]:IfStatement[24517-24657]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24521-24635]:Block[24543-24657]"
    }, {
      "left" : "sb.append(' ');",
      "right" : "sb.append(' ');",
      "info" : "ExpressionStatement[24535-24550]:ExpressionStatement[24557-24572]"
    }, {
      "left" : "sb.append(\"CommentStart=<\").append(commentMarker).append('>');",
      "right" : "sb.append(\"CommentStart=<\").append(commentMarker).append('>');",
      "info" : "ExpressionStatement[24563-24625]:ExpressionStatement[24585-24647]"
    }, {
      "left" : "if (isNullStringSet())",
      "right" : "if (isNullStringSet())",
      "info" : "IfStatement[24644-24776]:IfStatement[24666-24798]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24667-24776]:Block[24689-24798]"
    }, {
      "left" : "sb.append(' ');",
      "right" : "sb.append(' ');",
      "info" : "ExpressionStatement[24681-24696]:ExpressionStatement[24703-24718]"
    }, {
      "left" : "sb.append(\"NullString=<\").append(nullString).append('>');",
      "right" : "sb.append(\"NullString=<\").append(nullString).append('>');",
      "info" : "ExpressionStatement[24709-24766]:ExpressionStatement[24731-24788]"
    }, {
      "left" : "if (recordSeparator != null)",
      "right" : "if (recordSeparator != null)",
      "info" : "IfStatement[24785-24933]:IfStatement[24807-24955]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24814-24933]:Block[24836-24955]"
    }, {
      "left" : "sb.append(' ');",
      "right" : "sb.append(' ');",
      "info" : "ExpressionStatement[24828-24843]:ExpressionStatement[24850-24865]"
    }, {
      "left" : "sb.append(\"RecordSeparator=<\").append(recordSeparator).append('>');",
      "right" : "sb.append(\"RecordSeparator=<\").append(recordSeparator).append('>');",
      "info" : "ExpressionStatement[24856-24923]:ExpressionStatement[24878-24945]"
    }, {
      "left" : "if (getIgnoreEmptyLines())",
      "right" : "if (getIgnoreEmptyLines())",
      "info" : "IfStatement[24942-25026]:IfStatement[24964-25048]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24969-25026]:Block[24991-25048]"
    }, {
      "left" : "sb.append(\" EmptyLines:ignored\");",
      "right" : "sb.append(\" EmptyLines:ignored\");",
      "info" : "ExpressionStatement[24983-25016]:ExpressionStatement[25005-25038]"
    }, {
      "left" : "if (getIgnoreSurroundingSpaces())",
      "right" : "if (getIgnoreSurroundingSpaces())",
      "info" : "IfStatement[25035-25133]:IfStatement[25057-25155]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25069-25133]:Block[25091-25155]"
    }, {
      "left" : "sb.append(\" SurroundingSpaces:ignored\");",
      "right" : "sb.append(\" SurroundingSpaces:ignored\");",
      "info" : "ExpressionStatement[25083-25123]:ExpressionStatement[25105-25145]"
    }, {
      "left" : "if (getIgnoreHeaderCase())",
      "right" : "if (getIgnoreHeaderCase())",
      "info" : "IfStatement[25142-25232]:IfStatement[25164-25254]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25169-25232]:Block[25191-25254]"
    }, {
      "left" : "sb.append(\" IgnoreHeaderCase:ignored\");",
      "right" : "sb.append(\" IgnoreHeaderCase:ignored\");",
      "info" : "ExpressionStatement[25183-25222]:ExpressionStatement[25205-25244]"
    }, {
      "left" : "sb.append(\" SkipHeaderRecord:\").append(skipHeaderRecord);",
      "right" : "sb.append(\" SkipHeaderRecord:\").append(skipHeaderRecord);",
      "info" : "ExpressionStatement[25241-25298]:ExpressionStatement[25263-25320]"
    }, {
      "left" : "if (headerComments != null)",
      "right" : "if (headerComments != null)",
      "info" : "IfStatement[25307-25456]:IfStatement[25329-25478]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25335-25456]:Block[25357-25478]"
    }, {
      "left" : "sb.append(' ');",
      "right" : "sb.append(' ');",
      "info" : "ExpressionStatement[25349-25364]:ExpressionStatement[25371-25386]"
    }, {
      "left" : "sb.append(\"HeaderComments:\").append(Arrays.toString(headerComments));",
      "right" : "sb.append(\"HeaderComments:\").append(Arrays.toString(headerComments));",
      "info" : "ExpressionStatement[25377-25446]:ExpressionStatement[25399-25468]"
    }, {
      "left" : "if (header != null)",
      "right" : "if (header != null)",
      "info" : "IfStatement[25465-25590]:IfStatement[25487-25612]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25485-25590]:Block[25507-25612]"
    }, {
      "left" : "sb.append(' ');",
      "right" : "sb.append(' ');",
      "info" : "ExpressionStatement[25499-25514]:ExpressionStatement[25521-25536]"
    }, {
      "left" : "sb.append(\"Header:\").append(Arrays.toString(header));",
      "right" : "sb.append(\"Header:\").append(Arrays.toString(header));",
      "info" : "ExpressionStatement[25527-25580]:ExpressionStatement[25549-25602]"
    }, {
      "left" : "return sb.toString();",
      "right" : "return sb.toString();",
      "info" : "ReturnStatement[25599-25620]:ReturnStatement[25621-25642]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[25798-25805]:Modifier[25820-25827]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[25806-25810]:PrimitiveType[25828-25832]"
    }, {
      "left" : "validate",
      "right" : "validate",
      "info" : "SimpleName[25811-25819]:SimpleName[25833-25841]"
    }, {
      "left" : "IllegalArgumentException",
      "right" : "IllegalArgumentException",
      "info" : "SimpleType[25829-25853]:SimpleType[25851-25875]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25854-27872]:Block[25876-27894]"
    }, {
      "left" : "if (isLineBreak(delimiter))",
      "right" : "if (isLineBreak(delimiter))",
      "info" : "IfStatement[25864-25991]:IfStatement[25886-26013]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25892-25991]:Block[25914-26013]"
    }, {
      "left" : "throw new IllegalArgumentException(\"The delimiter cannot be a line break\");",
      "right" : "throw new IllegalArgumentException(\"The delimiter cannot be a line break\");",
      "info" : "ThrowStatement[25906-25981]:ThrowStatement[25928-26003]"
    }, {
      "left" : "if (quoteCharacter != null && delimiter == quoteCharacter.charValue())",
      "right" : "if (quoteCharacter != null && delimiter == quoteCharacter.charValue())",
      "info" : "IfStatement[26009-26250]:IfStatement[26031-26272]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26080-26250]:Block[26102-26272]"
    }, {
      "left" : "throw new IllegalArgumentException(\"The quoteChar character and the delimiter cannot be the same ('\" +\n                    quoteCharacter + \"')\");",
      "right" : "throw new IllegalArgumentException(\"The quoteChar character and the delimiter cannot be the same ('\" +\n                    quoteCharacter + \"')\");",
      "info" : "ThrowStatement[26094-26240]:ThrowStatement[26116-26262]"
    }, {
      "left" : "if (escapeCharacter != null && delimiter == escapeCharacter.charValue())",
      "right" : "if (escapeCharacter != null && delimiter == escapeCharacter.charValue())",
      "info" : "IfStatement[26260-26501]:IfStatement[26282-26523]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26333-26501]:Block[26355-26523]"
    }, {
      "left" : "throw new IllegalArgumentException(\"The escape character and the delimiter cannot be the same ('\" +\n                    escapeCharacter + \"')\");",
      "right" : "throw new IllegalArgumentException(\"The escape character and the delimiter cannot be the same ('\" +\n                    escapeCharacter + \"')\");",
      "info" : "ThrowStatement[26347-26491]:ThrowStatement[26369-26513]"
    }, {
      "left" : "if (commentMarker != null && delimiter == commentMarker.charValue())",
      "right" : "if (commentMarker != null && delimiter == commentMarker.charValue())",
      "info" : "IfStatement[26511-26753]:IfStatement[26533-26775]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26580-26753]:Block[26602-26775]"
    }, {
      "left" : "throw new IllegalArgumentException(\"The comment start character and the delimiter cannot be the same ('\" +\n                    commentMarker + \"')\");",
      "right" : "throw new IllegalArgumentException(\"The comment start character and the delimiter cannot be the same ('\" +\n                    commentMarker + \"')\");",
      "info" : "ThrowStatement[26594-26743]:ThrowStatement[26616-26765]"
    }, {
      "left" : "if (quoteCharacter != null && quoteCharacter.equals(commentMarker))",
      "right" : "if (quoteCharacter != null && quoteCharacter.equals(commentMarker))",
      "info" : "IfStatement[26763-27004]:IfStatement[26785-27026]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26831-27004]:Block[26853-27026]"
    }, {
      "left" : "throw new IllegalArgumentException(\"The comment start character and the quoteChar cannot be the same ('\" +\n                    commentMarker + \"')\");",
      "right" : "throw new IllegalArgumentException(\"The comment start character and the quoteChar cannot be the same ('\" +\n                    commentMarker + \"')\");",
      "info" : "ThrowStatement[26845-26994]:ThrowStatement[26867-27016]"
    }, {
      "left" : "if (escapeCharacter != null && escapeCharacter.equals(commentMarker))",
      "right" : "if (escapeCharacter != null && escapeCharacter.equals(commentMarker))",
      "info" : "IfStatement[27014-27254]:IfStatement[27036-27276]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27084-27254]:Block[27106-27276]"
    }, {
      "left" : "throw new IllegalArgumentException(\"The comment start and the escape character cannot be the same ('\" +\n                    commentMarker + \"')\");",
      "right" : "throw new IllegalArgumentException(\"The comment start and the escape character cannot be the same ('\" +\n                    commentMarker + \"')\");",
      "info" : "ThrowStatement[27098-27244]:ThrowStatement[27120-27266]"
    }, {
      "left" : "if (escapeCharacter == null && quoteMode == QuoteMode.NONE)",
      "right" : "if (escapeCharacter == null && quoteMode == QuoteMode.NONE)",
      "info" : "IfStatement[27264-27436]:IfStatement[27286-27458]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27324-27436]:Block[27346-27458]"
    }, {
      "left" : "throw new IllegalArgumentException(\"No quotes mode set but no escape character is set\");",
      "right" : "throw new IllegalArgumentException(\"No quotes mode set but no escape character is set\");",
      "info" : "ThrowStatement[27338-27426]:ThrowStatement[27360-27448]"
    }, {
      "left" : "if (header != null)",
      "right" : "if (header != null)",
      "info" : "IfStatement[27481-27866]:IfStatement[27503-27888]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27501-27866]:Block[27523-27888]"
    }, {
      "left" : "final Set<String> dupCheck = new HashSet<String>();",
      "right" : "final Set<String> dupCheck = new HashSet<String>();",
      "info" : "VariableDeclarationStatement[27515-27566]:VariableDeclarationStatement[27537-27588]"
    }, {
      "left" : "for (final String hdr : header)",
      "right" : "for (final String hdr : header)",
      "info" : "EnhancedForStatement[27579-27856]:EnhancedForStatement[27601-27878]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27611-27856]:Block[27633-27878]"
    }, {
      "left" : "if (!dupCheck.add(hdr))",
      "right" : "if (!dupCheck.add(hdr))",
      "info" : "IfStatement[27629-27842]:IfStatement[27651-27864]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27653-27842]:Block[27675-27864]"
    }, {
      "left" : "throw new IllegalArgumentException(\"The header contains a duplicate entry: '\" + hdr + \"' in \" +\n                            Arrays.toString(header));",
      "right" : "throw new IllegalArgumentException(\"The header contains a duplicate entry: '\" + hdr + \"' in \" +\n                            Arrays.toString(header));",
      "info" : "ThrowStatement[27675-27824]:ThrowStatement[27697-27846]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[28373-28379]:Modifier[28395-28401]"
    }, {
      "left" : "CSVFormat",
      "right" : "CSVFormat",
      "info" : "SimpleType[28380-28389]:SimpleType[28402-28411]"
    }, {
      "left" : "withCommentMarker",
      "right" : "withCommentMarker",
      "info" : "SimpleName[28390-28407]:SimpleName[28412-28429]"
    }, {
      "left" : "final char commentMarker",
      "right" : "final char commentMarker",
      "info" : "SingleVariableDeclaration[28408-28432]:SingleVariableDeclaration[28430-28454]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28434-28509]:Block[28456-28531]"
    }, {
      "left" : "return withCommentMarker(Character.valueOf(commentMarker));",
      "right" : "return withCommentMarker(Character.valueOf(commentMarker));",
      "info" : "ReturnStatement[28444-28503]:ReturnStatement[28466-28525]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[29039-29045]:Modifier[29061-29067]"
    }, {
      "left" : "CSVFormat",
      "right" : "CSVFormat",
      "info" : "SimpleType[29046-29055]:SimpleType[29068-29077]"
    }, {
      "left" : "withCommentMarker",
      "right" : "withCommentMarker",
      "info" : "SimpleName[29056-29073]:SimpleName[29078-29095]"
    }, {
      "left" : "final Character commentMarker",
      "right" : "final Character commentMarker",
      "info" : "SingleVariableDeclaration[29074-29103]:SingleVariableDeclaration[29096-29125]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29105-29562]:Block[29127-29584]"
    }, {
      "left" : "if (isLineBreak(commentMarker))",
      "right" : "if (isLineBreak(commentMarker))",
      "info" : "IfStatement[29115-29267]:IfStatement[29137-29289]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29147-29267]:Block[29169-29289]"
    }, {
      "left" : "throw new IllegalArgumentException(\"The comment start marker character cannot be a line break\");",
      "right" : "throw new IllegalArgumentException(\"The comment start marker character cannot be a line break\");",
      "info" : "ThrowStatement[29161-29257]:ThrowStatement[29183-29279]"
    }, {
      "left" : "return new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,\n                ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header,\n                skipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase);",
      "right" : "return new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,\n                ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header,\n                skipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase);",
      "info" : "ReturnStatement[29276-29556]:ReturnStatement[29298-29578]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[29929-29935]:Modifier[29951-29957]"
    }, {
      "left" : "CSVFormat",
      "right" : "CSVFormat",
      "info" : "SimpleType[29936-29945]:SimpleType[29958-29967]"
    }, {
      "left" : "withDelimiter",
      "right" : "withDelimiter",
      "info" : "SimpleName[29946-29959]:SimpleName[29968-29981]"
    }, {
      "left" : "final char delimiter",
      "right" : "final char delimiter",
      "info" : "SingleVariableDeclaration[29960-29980]:SingleVariableDeclaration[29982-30002]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29982-30414]:Block[30004-30436]"
    }, {
      "left" : "if (isLineBreak(delimiter))",
      "right" : "if (isLineBreak(delimiter))",
      "info" : "IfStatement[29992-30119]:IfStatement[30014-30141]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30020-30119]:Block[30042-30141]"
    }, {
      "left" : "throw new IllegalArgumentException(\"The delimiter cannot be a line break\");",
      "right" : "throw new IllegalArgumentException(\"The delimiter cannot be a line break\");",
      "info" : "ThrowStatement[30034-30109]:ThrowStatement[30056-30131]"
    }, {
      "left" : "return new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,\n                ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header,\n                skipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase);",
      "right" : "return new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,\n                ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header,\n                skipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase);",
      "info" : "ReturnStatement[30128-30408]:ReturnStatement[30150-30430]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[30796-30802]:Modifier[30818-30824]"
    }, {
      "left" : "CSVFormat",
      "right" : "CSVFormat",
      "info" : "SimpleType[30803-30812]:SimpleType[30825-30834]"
    }, {
      "left" : "withEscape",
      "right" : "withEscape",
      "info" : "SimpleName[30813-30823]:SimpleName[30835-30845]"
    }, {
      "left" : "final char escape",
      "right" : "final char escape",
      "info" : "SingleVariableDeclaration[30824-30841]:SingleVariableDeclaration[30846-30863]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30843-30904]:Block[30865-30926]"
    }, {
      "left" : "return withEscape(Character.valueOf(escape));",
      "right" : "return withEscape(Character.valueOf(escape));",
      "info" : "ReturnStatement[30853-30898]:ReturnStatement[30875-30920]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[31316-31322]:Modifier[31338-31344]"
    }, {
      "left" : "CSVFormat",
      "right" : "CSVFormat",
      "info" : "SimpleType[31323-31332]:SimpleType[31345-31354]"
    }, {
      "left" : "withEscape",
      "right" : "withEscape",
      "info" : "SimpleName[31333-31343]:SimpleName[31355-31365]"
    }, {
      "left" : "final Character escape",
      "right" : "final Character escape",
      "info" : "SingleVariableDeclaration[31344-31366]:SingleVariableDeclaration[31366-31388]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31368-31795]:Block[31390-31817]"
    }, {
      "left" : "if (isLineBreak(escape))",
      "right" : "if (isLineBreak(escape))",
      "info" : "IfStatement[31378-31509]:IfStatement[31400-31531]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31403-31509]:Block[31425-31531]"
    }, {
      "left" : "throw new IllegalArgumentException(\"The escape character cannot be a line break\");",
      "right" : "throw new IllegalArgumentException(\"The escape character cannot be a line break\");",
      "info" : "ThrowStatement[31417-31499]:ThrowStatement[31439-31521]"
    }, {
      "left" : "return new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escape, ignoreSurroundingSpaces,\n                ignoreEmptyLines, recordSeparator, nullString, headerComments, header, skipHeaderRecord,\n                allowMissingColumnNames, ignoreHeaderCase);",
      "right" : "return new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escape, ignoreSurroundingSpaces,\n                ignoreEmptyLines, recordSeparator, nullString, headerComments, header, skipHeaderRecord,\n                allowMissingColumnNames, ignoreHeaderCase);",
      "info" : "ReturnStatement[31518-31789]:ReturnStatement[31540-31811]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[32543-32549]:Modifier[32565-32571]"
    }, {
      "left" : "CSVFormat",
      "right" : "CSVFormat",
      "info" : "SimpleType[32550-32559]:SimpleType[32572-32581]"
    }, {
      "left" : "withHeader",
      "right" : "withHeader",
      "info" : "SimpleName[32560-32570]:SimpleName[32582-32592]"
    }, {
      "left" : "final String... header",
      "right" : "final String... header",
      "info" : "SingleVariableDeclaration[32571-32593]:SingleVariableDeclaration[32593-32615]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32595-32891]:Block[32617-32913]"
    }, {
      "left" : "return new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,\n                ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header,\n                skipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase);",
      "right" : "return new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,\n                ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header,\n                skipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase);",
      "info" : "ReturnStatement[32605-32885]:ReturnStatement[32627-32907]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[33751-33757]:Modifier[33773-33779]"
    }, {
      "left" : "CSVFormat",
      "right" : "CSVFormat",
      "info" : "SimpleType[33758-33767]:SimpleType[33780-33789]"
    }, {
      "left" : "withHeader",
      "right" : "withHeader",
      "info" : "SimpleName[33768-33778]:SimpleName[33790-33800]"
    }, {
      "left" : "final ResultSet resultSet",
      "right" : "final ResultSet resultSet",
      "info" : "SingleVariableDeclaration[33779-33804]:SingleVariableDeclaration[33801-33826]"
    }, {
      "left" : "SQLException",
      "right" : "SQLException",
      "info" : "SimpleType[33813-33825]:SimpleType[33835-33847]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33826-33912]:Block[33848-33934]"
    }, {
      "left" : "return withHeader(resultSet != null ? resultSet.getMetaData() : null);",
      "right" : "return withHeader(resultSet != null ? resultSet.getMetaData() : null);",
      "info" : "ReturnStatement[33836-33906]:ReturnStatement[33858-33928]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[34769-34775]:Modifier[34791-34797]"
    }, {
      "left" : "CSVFormat",
      "right" : "CSVFormat",
      "info" : "SimpleType[34776-34785]:SimpleType[34798-34807]"
    }, {
      "left" : "withHeader",
      "right" : "withHeader",
      "info" : "SimpleName[34786-34796]:SimpleName[34808-34818]"
    }, {
      "left" : "final ResultSetMetaData metaData",
      "right" : "final ResultSetMetaData metaData",
      "info" : "SingleVariableDeclaration[34797-34829]:SingleVariableDeclaration[34819-34851]"
    }, {
      "left" : "SQLException",
      "right" : "SQLException",
      "info" : "SimpleType[34838-34850]:SimpleType[34860-34872]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34851-35456]:Block[34873-35478]"
    }, {
      "left" : "String[] labels = null;",
      "right" : "String[] labels = null;",
      "info" : "VariableDeclarationStatement[34861-34884]:VariableDeclarationStatement[34883-34906]"
    }, {
      "left" : "if (metaData != null)",
      "right" : "if (metaData != null)",
      "info" : "IfStatement[34893-35161]:IfStatement[34915-35183]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34915-35161]:Block[34937-35183]"
    }, {
      "left" : "final int columnCount = metaData.getColumnCount();",
      "right" : "final int columnCount = metaData.getColumnCount();",
      "info" : "VariableDeclarationStatement[34929-34979]:VariableDeclarationStatement[34951-35001]"
    }, {
      "left" : "labels = new String[columnCount];",
      "right" : "labels = new String[columnCount];",
      "info" : "ExpressionStatement[34992-35025]:ExpressionStatement[35014-35047]"
    }, {
      "left" : "for (int i = 0; i < columnCount; i++)",
      "right" : "for (int i = 0; i < columnCount; i++)",
      "info" : "ForStatement[35038-35151]:ForStatement[35060-35173]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35076-35151]:Block[35098-35173]"
    }, {
      "left" : "labels[i] = metaData.getColumnLabel(i + 1);",
      "right" : "labels[i] = metaData.getColumnLabel(i + 1);",
      "info" : "ExpressionStatement[35094-35137]:ExpressionStatement[35116-35159]"
    }, {
      "left" : "return new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,\n                ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, labels,\n                skipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase);",
      "right" : "return new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,\n                ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, labels,\n                skipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase);",
      "info" : "ReturnStatement[35170-35450]:ReturnStatement[35192-35472]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[36066-36072]:Modifier[36088-36094]"
    }, {
      "left" : "CSVFormat",
      "right" : "CSVFormat",
      "info" : "SimpleType[36073-36082]:SimpleType[36095-36104]"
    }, {
      "left" : "withHeaderComments",
      "right" : "withHeaderComments",
      "info" : "SimpleName[36083-36101]:SimpleName[36105-36123]"
    }, {
      "left" : "final Object... headerComments",
      "right" : "final Object... headerComments",
      "info" : "SingleVariableDeclaration[36102-36132]:SingleVariableDeclaration[36124-36154]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36134-36430]:Block[36156-36452]"
    }, {
      "left" : "return new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,\n                ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header,\n                skipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase);",
      "right" : "return new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,\n                ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header,\n                skipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase);",
      "info" : "ReturnStatement[36144-36424]:ReturnStatement[36166-36446]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[36710-36716]:Modifier[36732-36738]"
    }, {
      "left" : "CSVFormat",
      "right" : "CSVFormat",
      "info" : "SimpleType[36717-36726]:SimpleType[36739-36748]"
    }, {
      "left" : "withAllowMissingColumnNames",
      "right" : "withAllowMissingColumnNames",
      "info" : "SimpleName[36727-36754]:SimpleName[36749-36776]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36757-36819]:Block[36779-36841]"
    }, {
      "left" : "return this.withAllowMissingColumnNames(true);",
      "right" : "return this.withAllowMissingColumnNames(true);",
      "info" : "ReturnStatement[36767-36813]:ReturnStatement[36789-36835]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[37261-37267]:Modifier[37283-37289]"
    }, {
      "left" : "CSVFormat",
      "right" : "CSVFormat",
      "info" : "SimpleType[37268-37277]:SimpleType[37290-37299]"
    }, {
      "left" : "withAllowMissingColumnNames",
      "right" : "withAllowMissingColumnNames",
      "info" : "SimpleName[37278-37305]:SimpleName[37300-37327]"
    }, {
      "left" : "final boolean allowMissingColumnNames",
      "right" : "final boolean allowMissingColumnNames",
      "info" : "SingleVariableDeclaration[37306-37343]:SingleVariableDeclaration[37328-37365]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37345-37641]:Block[37367-37663]"
    }, {
      "left" : "return new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,\n                ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header,\n                skipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase);",
      "right" : "return new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,\n                ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header,\n                skipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase);",
      "info" : "ReturnStatement[37355-37635]:ReturnStatement[37377-37657]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[37923-37929]:Modifier[37945-37951]"
    }, {
      "left" : "CSVFormat",
      "right" : "CSVFormat",
      "info" : "SimpleType[37930-37939]:SimpleType[37952-37961]"
    }, {
      "left" : "withIgnoreEmptyLines",
      "right" : "withIgnoreEmptyLines",
      "info" : "SimpleName[37940-37960]:SimpleName[37962-37982]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37963-38018]:Block[37985-38040]"
    }, {
      "left" : "return this.withIgnoreEmptyLines(true);",
      "right" : "return this.withIgnoreEmptyLines(true);",
      "info" : "ReturnStatement[37973-38012]:ReturnStatement[37995-38034]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[38431-38437]:Modifier[38453-38459]"
    }, {
      "left" : "CSVFormat",
      "right" : "CSVFormat",
      "info" : "SimpleType[38438-38447]:SimpleType[38460-38469]"
    }, {
      "left" : "withIgnoreEmptyLines",
      "right" : "withIgnoreEmptyLines",
      "info" : "SimpleName[38448-38468]:SimpleName[38470-38490]"
    }, {
      "left" : "final boolean ignoreEmptyLines",
      "right" : "final boolean ignoreEmptyLines",
      "info" : "SingleVariableDeclaration[38469-38499]:SingleVariableDeclaration[38491-38521]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38501-38797]:Block[38523-38819]"
    }, {
      "left" : "return new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,\n                ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header,\n                skipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase);",
      "right" : "return new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,\n                ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header,\n                skipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase);",
      "info" : "ReturnStatement[38511-38791]:ReturnStatement[38533-38813]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[39054-39060]:Modifier[39076-39082]"
    }, {
      "left" : "CSVFormat",
      "right" : "CSVFormat",
      "info" : "SimpleType[39061-39070]:SimpleType[39083-39092]"
    }, {
      "left" : "withIgnoreSurroundingSpaces",
      "right" : "withIgnoreSurroundingSpaces",
      "info" : "SimpleName[39071-39098]:SimpleName[39093-39120]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39101-39163]:Block[39123-39185]"
    }, {
      "left" : "return this.withIgnoreSurroundingSpaces(true);",
      "right" : "return this.withIgnoreSurroundingSpaces(true);",
      "info" : "ReturnStatement[39111-39157]:ReturnStatement[39133-39179]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[39521-39527]:Modifier[39543-39549]"
    }, {
      "left" : "CSVFormat",
      "right" : "CSVFormat",
      "info" : "SimpleType[39528-39537]:SimpleType[39550-39559]"
    }, {
      "left" : "withIgnoreSurroundingSpaces",
      "right" : "withIgnoreSurroundingSpaces",
      "info" : "SimpleName[39538-39565]:SimpleName[39560-39587]"
    }, {
      "left" : "final boolean ignoreSurroundingSpaces",
      "right" : "final boolean ignoreSurroundingSpaces",
      "info" : "SingleVariableDeclaration[39566-39603]:SingleVariableDeclaration[39588-39625]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39605-39901]:Block[39627-39923]"
    }, {
      "left" : "return new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,\n                ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header,\n                skipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase);",
      "right" : "return new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,\n                ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header,\n                skipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase);",
      "info" : "ReturnStatement[39615-39895]:ReturnStatement[39637-39917]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[40116-40122]:Modifier[40138-40144]"
    }, {
      "left" : "CSVFormat",
      "right" : "CSVFormat",
      "info" : "SimpleType[40123-40132]:SimpleType[40145-40154]"
    }, {
      "left" : "withIgnoreHeaderCase",
      "right" : "withIgnoreHeaderCase",
      "info" : "SimpleName[40133-40153]:SimpleName[40155-40175]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40156-40211]:Block[40178-40233]"
    }, {
      "left" : "return this.withIgnoreHeaderCase(true);",
      "right" : "return this.withIgnoreHeaderCase(true);",
      "info" : "ReturnStatement[40166-40205]:ReturnStatement[40188-40227]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[40568-40574]:Modifier[40590-40596]"
    }, {
      "left" : "CSVFormat",
      "right" : "CSVFormat",
      "info" : "SimpleType[40575-40584]:SimpleType[40597-40606]"
    }, {
      "left" : "withIgnoreHeaderCase",
      "right" : "withIgnoreHeaderCase",
      "info" : "SimpleName[40585-40605]:SimpleName[40607-40627]"
    }, {
      "left" : "final boolean ignoreHeaderCase",
      "right" : "final boolean ignoreHeaderCase",
      "info" : "SingleVariableDeclaration[40606-40636]:SingleVariableDeclaration[40628-40658]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40638-40934]:Block[40660-40956]"
    }, {
      "left" : "return new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,\n                ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header,\n                skipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase);",
      "right" : "return new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,\n                ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header,\n                skipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase);",
      "info" : "ReturnStatement[40648-40928]:ReturnStatement[40670-40950]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[41577-41583]:Modifier[41599-41605]"
    }, {
      "left" : "CSVFormat",
      "right" : "CSVFormat",
      "info" : "SimpleType[41584-41593]:SimpleType[41606-41615]"
    }, {
      "left" : "withNullString",
      "right" : "withNullString",
      "info" : "SimpleName[41594-41608]:SimpleName[41616-41630]"
    }, {
      "left" : "final String nullString",
      "right" : "final String nullString",
      "info" : "SingleVariableDeclaration[41609-41632]:SingleVariableDeclaration[41631-41654]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41634-41930]:Block[41656-41952]"
    }, {
      "left" : "return new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,\n                ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header,\n                skipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase);",
      "right" : "return new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,\n                ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header,\n                skipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase);",
      "info" : "ReturnStatement[41644-41924]:ReturnStatement[41666-41946]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[42301-42307]:Modifier[42323-42329]"
    }, {
      "left" : "CSVFormat",
      "right" : "CSVFormat",
      "info" : "SimpleType[42308-42317]:SimpleType[42330-42339]"
    }, {
      "left" : "withQuote",
      "right" : "withQuote",
      "info" : "SimpleName[42318-42327]:SimpleName[42340-42349]"
    }, {
      "left" : "final char quoteChar",
      "right" : "final char quoteChar",
      "info" : "SingleVariableDeclaration[42328-42348]:SingleVariableDeclaration[42350-42370]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42350-42413]:Block[42372-42435]"
    }, {
      "left" : "return withQuote(Character.valueOf(quoteChar));",
      "right" : "return withQuote(Character.valueOf(quoteChar));",
      "info" : "ReturnStatement[42360-42407]:ReturnStatement[42382-42429]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[42813-42819]:Modifier[42835-42841]"
    }, {
      "left" : "CSVFormat",
      "right" : "CSVFormat",
      "info" : "SimpleType[42820-42829]:SimpleType[42842-42851]"
    }, {
      "left" : "withQuote",
      "right" : "withQuote",
      "info" : "SimpleName[42830-42839]:SimpleName[42852-42861]"
    }, {
      "left" : "final Character quoteChar",
      "right" : "final Character quoteChar",
      "info" : "SingleVariableDeclaration[42840-42865]:SingleVariableDeclaration[42862-42887]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42867-43294]:Block[42889-43316]"
    }, {
      "left" : "if (isLineBreak(quoteChar))",
      "right" : "if (isLineBreak(quoteChar))",
      "info" : "IfStatement[42877-43004]:IfStatement[42899-43026]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42905-43004]:Block[42927-43026]"
    }, {
      "left" : "throw new IllegalArgumentException(\"The quoteChar cannot be a line break\");",
      "right" : "throw new IllegalArgumentException(\"The quoteChar cannot be a line break\");",
      "info" : "ThrowStatement[42919-42994]:ThrowStatement[42941-43016]"
    }, {
      "left" : "return new CSVFormat(delimiter, quoteChar, quoteMode, commentMarker, escapeCharacter, ignoreSurroundingSpaces,\n                ignoreEmptyLines, recordSeparator, nullString, headerComments, header, skipHeaderRecord,\n                allowMissingColumnNames, ignoreHeaderCase);",
      "right" : "return new CSVFormat(delimiter, quoteChar, quoteMode, commentMarker, escapeCharacter, ignoreSurroundingSpaces,\n                ignoreEmptyLines, recordSeparator, nullString, headerComments, header, skipHeaderRecord,\n                allowMissingColumnNames, ignoreHeaderCase);",
      "info" : "ReturnStatement[43013-43288]:ReturnStatement[43035-43310]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[43577-43583]:Modifier[43599-43605]"
    }, {
      "left" : "CSVFormat",
      "right" : "CSVFormat",
      "info" : "SimpleType[43584-43593]:SimpleType[43606-43615]"
    }, {
      "left" : "withQuoteMode",
      "right" : "withQuoteMode",
      "info" : "SimpleName[43594-43607]:SimpleName[43616-43629]"
    }, {
      "left" : "final QuoteMode quoteModePolicy",
      "right" : "final QuoteMode quoteModePolicy",
      "info" : "SingleVariableDeclaration[43608-43639]:SingleVariableDeclaration[43630-43661]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43641-43943]:Block[43663-43965]"
    }, {
      "left" : "return new CSVFormat(delimiter, quoteCharacter, quoteModePolicy, commentMarker, escapeCharacter,\n                ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header,\n                skipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase);",
      "right" : "return new CSVFormat(delimiter, quoteCharacter, quoteModePolicy, commentMarker, escapeCharacter,\n                ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header,\n                skipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase);",
      "info" : "ReturnStatement[43651-43937]:ReturnStatement[43673-43959]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[44451-44457]:Modifier[44473-44479]"
    }, {
      "left" : "CSVFormat",
      "right" : "CSVFormat",
      "info" : "SimpleType[44458-44467]:SimpleType[44480-44489]"
    }, {
      "left" : "withRecordSeparator",
      "right" : "withRecordSeparator",
      "info" : "SimpleName[44468-44487]:SimpleName[44490-44509]"
    }, {
      "left" : "final char recordSeparator",
      "right" : "final char recordSeparator",
      "info" : "SingleVariableDeclaration[44488-44514]:SingleVariableDeclaration[44510-44536]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44516-44592]:Block[44538-44614]"
    }, {
      "left" : "return withRecordSeparator(String.valueOf(recordSeparator));",
      "right" : "return withRecordSeparator(String.valueOf(recordSeparator));",
      "info" : "ReturnStatement[44526-44586]:ReturnStatement[44548-44608]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[45201-45207]:Modifier[45223-45229]"
    }, {
      "left" : "CSVFormat",
      "right" : "CSVFormat",
      "info" : "SimpleType[45208-45217]:SimpleType[45230-45239]"
    }, {
      "left" : "withRecordSeparator",
      "right" : "withRecordSeparator",
      "info" : "SimpleName[45218-45237]:SimpleName[45240-45259]"
    }, {
      "left" : "final String recordSeparator",
      "right" : "final String recordSeparator",
      "info" : "SingleVariableDeclaration[45238-45266]:SingleVariableDeclaration[45260-45288]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45268-45564]:Block[45290-45586]"
    }, {
      "left" : "return new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,\n                ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header,\n                skipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase);",
      "right" : "return new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,\n                ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header,\n                skipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase);",
      "info" : "ReturnStatement[45278-45558]:ReturnStatement[45300-45580]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[45851-45857]:Modifier[45873-45879]"
    }, {
      "left" : "CSVFormat",
      "right" : "CSVFormat",
      "info" : "SimpleType[45858-45867]:SimpleType[45880-45889]"
    }, {
      "left" : "withSkipHeaderRecord",
      "right" : "withSkipHeaderRecord",
      "info" : "SimpleName[45868-45888]:SimpleName[45890-45910]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45891-45946]:Block[45913-45968]"
    }, {
      "left" : "return this.withSkipHeaderRecord(true);",
      "right" : "return this.withSkipHeaderRecord(true);",
      "info" : "ReturnStatement[45901-45940]:ReturnStatement[45923-45962]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[46254-46260]:Modifier[46276-46282]"
    }, {
      "left" : "CSVFormat",
      "right" : "CSVFormat",
      "info" : "SimpleType[46261-46270]:SimpleType[46283-46292]"
    }, {
      "left" : "withSkipHeaderRecord",
      "right" : "withSkipHeaderRecord",
      "info" : "SimpleName[46271-46291]:SimpleName[46293-46313]"
    }, {
      "left" : "final boolean skipHeaderRecord",
      "right" : "final boolean skipHeaderRecord",
      "info" : "SingleVariableDeclaration[46292-46322]:SingleVariableDeclaration[46314-46344]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46324-46620]:Block[46346-46642]"
    }, {
      "left" : "return new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,\n                ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header,\n                skipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase);",
      "right" : "return new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,\n                ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header,\n                skipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase);",
      "info" : "ReturnStatement[46334-46614]:ReturnStatement[46356-46636]"
    } ]
  },
  "interFileMappings" : { }
}