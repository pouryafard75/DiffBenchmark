{
  "matchedElements" : [
 {
    "left" : "class : TypeValidator",
    "right" : "class : TypeValidator",
    "info" : "TypeDeclaration[2117-27920]:TypeDeclaration[2117-29013]"
  }, {
    "left" : "compiler",
    "right" : "compiler",
    "info" : "FieldDeclaration[2526-2566]:FieldDeclaration[2526-2566]"
  }, {
    "left" : "typeRegistry",
    "right" : "typeRegistry",
    "info" : "FieldDeclaration[2569-2611]:FieldDeclaration[2569-2611]"
  }, {
    "left" : "allValueTypes",
    "right" : "allValueTypes",
    "info" : "FieldDeclaration[2614-2649]:FieldDeclaration[2614-2649]"
  }, {
    "left" : "shouldReport",
    "right" : "shouldReport",
    "info" : "FieldDeclaration[2652-2688]:FieldDeclaration[2652-2688]"
  }, {
    "left" : "nullOrUndefined",
    "right" : "nullOrUndefined",
    "info" : "FieldDeclaration[2691-2728]:FieldDeclaration[2691-2728]"
  }, {
    "left" : "mismatches",
    "right" : "mismatches",
    "info" : "FieldDeclaration[2943-3010]:FieldDeclaration[2943-3010]"
  }, {
    "left" : "FOUND_REQUIRED",
    "right" : "FOUND_REQUIRED",
    "info" : "FieldDeclaration[3033-3142]:FieldDeclaration[3033-3142]"
  }, {
    "left" : "INVALID_CAST",
    "right" : "INVALID_CAST",
    "info" : "FieldDeclaration[3146-3349]:FieldDeclaration[3146-3349]"
  }, {
    "left" : "TYPE_MISMATCH_WARNING",
    "right" : "TYPE_MISMATCH_WARNING",
    "info" : "FieldDeclaration[3353-3483]:FieldDeclaration[3353-3483]"
  }, {
    "left" : "MISSING_EXTENDS_TAG_WARNING",
    "right" : "MISSING_EXTENDS_TAG_WARNING",
    "info" : "FieldDeclaration[3487-3658]:FieldDeclaration[3487-3658]"
  }, {
    "left" : "DUP_VAR_DECLARATION",
    "right" : "DUP_VAR_DECLARATION",
    "info" : "FieldDeclaration[3662-3879]:FieldDeclaration[3662-3879]"
  }, {
    "left" : "HIDDEN_PROPERTY_MISMATCH",
    "right" : "HIDDEN_PROPERTY_MISMATCH",
    "info" : "FieldDeclaration[3883-4183]:FieldDeclaration[3883-4183]"
  }, {
    "left" : "INTERFACE_METHOD_NOT_IMPLEMENTED",
    "right" : "INTERFACE_METHOD_NOT_IMPLEMENTED",
    "info" : "FieldDeclaration[4187-4404]:FieldDeclaration[4187-4404]"
  }, {
    "left" : "ALL_DIAGNOSTICS",
    "right" : "ALL_DIAGNOSTICS",
    "info" : "FieldDeclaration[4409-4660]:FieldDeclaration[4732-5025]"
  }, {
    "left" : "package TypeValidator(compiler )",
    "right" : "package TypeValidator(compiler )",
    "info" : "MethodDeclaration[4664-5006]:MethodDeclaration[5029-5371]"
  }, {
    "left" : "package getMismatches() : ",
    "right" : "package getMismatches() : ",
    "info" : "MethodDeclaration[5010-5269]:MethodDeclaration[5375-5634]"
  }, {
    "left" : "package setShouldReport(report boolean) : void",
    "right" : "package setShouldReport(report boolean) : void",
    "info" : "MethodDeclaration[5273-5347]:MethodDeclaration[5638-5712]"
  }, {
    "left" : "package expectObject(t , n , type , msg ) : boolean",
    "right" : "package expectObject(t , n , type , msg ) : boolean",
    "info" : "MethodDeclaration[5590-6054]:MethodDeclaration[5955-6419]"
  }, {
    "left" : "package expectActualObject(t , n , type , msg ) : void",
    "right" : "package expectActualObject(t , n , type , msg ) : void",
    "info" : "MethodDeclaration[6058-6341]:MethodDeclaration[6423-6706]"
  }, {
    "left" : "package expectAnyObject(t , n , type , msg ) : void",
    "right" : "package expectAnyObject(t , n , type , msg ) : void",
    "info" : "MethodDeclaration[6345-6760]:MethodDeclaration[6710-7125]"
  }, {
    "left" : "package expectString(t , n , type , msg ) : void",
    "right" : "package expectString(t , n , type , msg ) : void",
    "info" : "MethodDeclaration[6764-7113]:MethodDeclaration[7129-7478]"
  }, {
    "left" : "package expectNumber(t , n , type , msg ) : void",
    "right" : "package expectNumber(t , n , type , msg ) : void",
    "info" : "MethodDeclaration[7117-7466]:MethodDeclaration[7482-7831]"
  }, {
    "left" : "package expectBitwiseable(t , n , type , msg ) : void",
    "right" : "package expectBitwiseable(t , n , type , msg ) : void",
    "info" : "MethodDeclaration[7470-7882]:MethodDeclaration[7835-8247]"
  }, {
    "left" : "package expectStringOrNumber(t , n , type , msg ) : void",
    "right" : "package expectStringOrNumber(t , n , type , msg ) : void",
    "info" : "MethodDeclaration[7886-8306]:MethodDeclaration[8251-8671]"
  }, {
    "left" : "package expectNotNullOrUndefined(t , n , type , msg , expectedType ) : boolean",
    "right" : "package expectNotNullOrUndefined(t , n , type , msg , expectedType ) : boolean",
    "info" : "MethodDeclaration[8310-9578]:MethodDeclaration[8675-9943]"
  }, {
    "left" : "private containsForwardDeclaredUnresolvedName(type ) : boolean",
    "right" : "private containsForwardDeclaredUnresolvedName(type ) : boolean",
    "info" : "MethodDeclaration[9582-9894]:MethodDeclaration[9947-10259]"
  }, {
    "left" : "package expectSwitchMatchesCase(t , n , switchType , caseType ) : void",
    "right" : "package expectSwitchMatchesCase(t , n , switchType , caseType ) : void",
    "info" : "MethodDeclaration[9898-10630]:MethodDeclaration[10263-10995]"
  }, {
    "left" : "package expectIndexMatch(t , n , objType , indexType ) : void",
    "right" : "package expectIndexMatch(t , n , objType , indexType ) : void",
    "info" : "MethodDeclaration[10634-11784]:MethodDeclaration[10999-12149]"
  }, {
    "left" : "package expectCanAssignToPropertyOf(t , n , rightType , leftType , owner , propName ) : boolean",
    "right" : "package expectCanAssignToPropertyOf(t , n , rightType , leftType , owner , propName ) : boolean",
    "info" : "MethodDeclaration[11788-12987]:MethodDeclaration[12153-13352]"
  }, {
    "left" : "package expectCanAssignTo(t , n , rightType , leftType , msg ) : boolean",
    "right" : "package expectCanAssignTo(t , n , rightType , leftType , msg ) : boolean",
    "info" : "MethodDeclaration[12991-13909]:MethodDeclaration[13356-14274]"
  }, {
    "left" : "private bothIntrinsics(rightType , leftType ) : boolean",
    "right" : "private bothIntrinsics(rightType , leftType ) : boolean",
    "info" : "MethodDeclaration[13913-14113]:MethodDeclaration[14278-14478]"
  }, {
    "left" : "package expectArgumentMatchesParameter(t , n , argType , paramType , callNode , ordinal int) : void",
    "right" : "package expectArgumentMatchesParameter(t , n , argType , paramType , callNode , ordinal int) : void",
    "info" : "MethodDeclaration[14117-14975]:MethodDeclaration[14482-15340]"
  }, {
    "left" : "package expectCanOverride(t , n , overridingType , hiddenType , propertyName , ownerType ) : void",
    "right" : "package expectCanOverride(t , n , overridingType , hiddenType , propertyName , ownerType ) : void",
    "info" : "MethodDeclaration[14979-15945]:MethodDeclaration[15344-16310]"
  }, {
    "left" : "package expectSuperType(t , n , superObject , subObject ) : void",
    "right" : "package expectSuperType(t , n , superObject , subObject ) : void",
    "info" : "MethodDeclaration[15949-17115]:MethodDeclaration[16314-17480]"
  }, {
    "left" : "package expectCanCast(t , n , type , castType ) : void",
    "right" : "package expectCanCast(t , n , type , castType ) : void",
    "info" : "MethodDeclaration[17119-17905]:MethodDeclaration[17484-18270]"
  }, {
    "left" : "package expectUndeclaredVariable(sourceName , n , parent , var , variableName , newType ) : void",
    "right" : "package expectUndeclaredVariable(sourceName , n , parent , var , variableName , newType ) : void",
    "info" : "MethodDeclaration[17909-20576]:MethodDeclaration[18274-20941]"
  }, {
    "left" : "package expectAllInterfaceProperties(t , n , type ) : void",
    "right" : "package expectAllInterfaceProperties(t , n , type ) : void",
    "info" : "MethodDeclaration[20580-21166]:MethodDeclaration[20945-21531]"
  }, {
    "left" : "private expectInterfaceProperty(t , n , instance , implementedInterface , prop ) : void",
    "right" : "private expectInterfaceProperty(t , n , instance , implementedInterface , prop ) : void",
    "info" : "MethodDeclaration[21170-21941]:MethodDeclaration[21535-23034]"
  }, {
    "left" : "private mismatch(t , n , msg , found , required ) : void",
    "right" : "private mismatch(t , n , msg , found , required ) : void",
    "info" : "MethodDeclaration[21945-22162]:MethodDeclaration[23038-23255]"
  }, {
    "left" : "private mismatch(t , n , msg , found , required ) : void",
    "right" : "private mismatch(t , n , msg , found , required ) : void",
    "info" : "MethodDeclaration[22166-22348]:MethodDeclaration[23259-23441]"
  }, {
    "left" : "private mismatch(sourceName , n , msg , found , required ) : void",
    "right" : "private mismatch(sourceName , n , msg , found , required ) : void",
    "info" : "MethodDeclaration[22352-22694]:MethodDeclaration[23445-23787]"
  }, {
    "left" : "private registerMismatch(found , required ) : void",
    "right" : "private registerMismatch(found , required ) : void",
    "info" : "MethodDeclaration[22698-23701]:MethodDeclaration[23791-24794]"
  }, {
    "left" : "private registerIfMismatch(found , required ) : void",
    "right" : "private registerIfMismatch(found , required ) : void",
    "info" : "MethodDeclaration[23705-23905]:MethodDeclaration[24798-24998]"
  }, {
    "left" : "private formatFoundRequired(description , found , required ) : ",
    "right" : "private formatFoundRequired(description , found , required ) : ",
    "info" : "MethodDeclaration[23909-24142]:MethodDeclaration[25002-25235]"
  }, {
    "left" : "package getReadableJSTypeName(n , dereference boolean) : ",
    "right" : "package getReadableJSTypeName(n , dereference boolean) : ",
    "info" : "MethodDeclaration[24146-26148]:MethodDeclaration[25239-27241]"
  }, {
    "left" : "private getJSType(n ) : ",
    "right" : "private getJSType(n ) : ",
    "info" : "MethodDeclaration[26152-26713]:MethodDeclaration[27245-27806]"
  }, {
    "left" : "private getNativeType(typeId ) : ",
    "right" : "private getNativeType(typeId ) : ",
    "info" : "MethodDeclaration[26717-26819]:MethodDeclaration[27810-27912]"
  }, {
    "left" : "class : TypeMismatch",
    "right" : "class : TypeMismatch",
    "info" : "TypeDeclaration[26823-27918]:TypeDeclaration[27916-29011]"
  }, {
    "left" : "typeA",
    "right" : "typeA",
    "info" : "FieldDeclaration[27077-27096]:FieldDeclaration[28170-28189]"
  }, {
    "left" : "typeB",
    "right" : "typeB",
    "info" : "FieldDeclaration[27101-27120]:FieldDeclaration[28194-28213]"
  }, {
    "left" : "package TypeMismatch(a , b )",
    "right" : "package TypeMismatch(a , b )",
    "info" : "MethodDeclaration[27126-27385]:MethodDeclaration[28219-28478]"
  }, {
    "left" : "public equals(object ) : boolean",
    "right" : "public equals(object ) : boolean",
    "info" : "MethodDeclaration[27391-27729]:MethodDeclaration[28484-28822]"
  }, {
    "left" : "public hashCode() : int",
    "right" : "public hashCode() : int",
    "info" : "MethodDeclaration[27735-27819]:MethodDeclaration[28828-28912]"
  }, {
    "left" : "public toString() : ",
    "right" : "public toString() : ",
    "info" : "MethodDeclaration[27825-27914]:MethodDeclaration[28918-29007]"
  } ],
  "mappings" : [
 {
    "left" : "class",
    "right" : "class",
    "info" : "TYPE_DECLARATION_KIND[2501-2506]:TYPE_DECLARATION_KIND[2501-2506]"
  }, {
    "left" : "TypeValidator",
    "right" : "TypeValidator",
    "info" : "SimpleName[4664-4677]:SimpleName[5029-5042]"
  }, {
    "left" : "AbstractCompiler compiler",
    "right" : "AbstractCompiler compiler",
    "info" : "SingleVariableDeclaration[4678-4703]:SingleVariableDeclaration[5043-5068]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4705-5006]:Block[5070-5371]"
  }, {
    "left" : "this.compiler = compiler;",
    "right" : "this.compiler = compiler;",
    "info" : "ExpressionStatement[4711-4736]:ExpressionStatement[5076-5101]"
  }, {
    "left" : "this.typeRegistry = compiler.getTypeRegistry();",
    "right" : "this.typeRegistry = compiler.getTypeRegistry();",
    "info" : "ExpressionStatement[4741-4788]:ExpressionStatement[5106-5153]"
  }, {
    "left" : "this.allValueTypes = typeRegistry.createUnionType(\n        STRING_TYPE, NUMBER_TYPE, BOOLEAN_TYPE, NULL_TYPE, VOID_TYPE);",
    "right" : "this.allValueTypes = typeRegistry.createUnionType(\n        STRING_TYPE, NUMBER_TYPE, BOOLEAN_TYPE, NULL_TYPE, VOID_TYPE);",
    "info" : "ExpressionStatement[4793-4914]:ExpressionStatement[5158-5279]"
  }, {
    "left" : "this.nullOrUndefined = typeRegistry.createUnionType(\n        NULL_TYPE, VOID_TYPE);",
    "right" : "this.nullOrUndefined = typeRegistry.createUnionType(\n        NULL_TYPE, VOID_TYPE);",
    "info" : "ExpressionStatement[4919-5002]:ExpressionStatement[5284-5367]"
  }, {
    "left" : "Iterable<TypeMismatch>",
    "right" : "Iterable<TypeMismatch>",
    "info" : "ParameterizedType[5202-5224]:ParameterizedType[5567-5589]"
  }, {
    "left" : "getMismatches",
    "right" : "getMismatches",
    "info" : "SimpleName[5225-5238]:SimpleName[5590-5603]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5241-5269]:Block[5606-5634]"
  }, {
    "left" : "return mismatches;",
    "right" : "return mismatches;",
    "info" : "ReturnStatement[5247-5265]:ReturnStatement[5612-5630]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[5273-5277]:PrimitiveType[5638-5642]"
  }, {
    "left" : "setShouldReport",
    "right" : "setShouldReport",
    "info" : "SimpleName[5278-5293]:SimpleName[5643-5658]"
  }, {
    "left" : "boolean report",
    "right" : "boolean report",
    "info" : "SingleVariableDeclaration[5294-5308]:SingleVariableDeclaration[5659-5673]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5310-5347]:Block[5675-5712]"
  }, {
    "left" : "this.shouldReport = report;",
    "right" : "this.shouldReport = report;",
    "info" : "ExpressionStatement[5316-5343]:ExpressionStatement[5681-5708]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[5849-5856]:PrimitiveType[6214-6221]"
  }, {
    "left" : "expectObject",
    "right" : "expectObject",
    "info" : "SimpleName[5857-5869]:SimpleName[6222-6234]"
  }, {
    "left" : "NodeTraversal t",
    "right" : "NodeTraversal t",
    "info" : "SingleVariableDeclaration[5870-5885]:SingleVariableDeclaration[6235-6250]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[5887-5893]:SingleVariableDeclaration[6252-6258]"
  }, {
    "left" : "JSType type",
    "right" : "JSType type",
    "info" : "SingleVariableDeclaration[5895-5906]:SingleVariableDeclaration[6260-6271]"
  }, {
    "left" : "String msg",
    "right" : "String msg",
    "info" : "SingleVariableDeclaration[5908-5918]:SingleVariableDeclaration[6273-6283]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5920-6054]:Block[6285-6419]"
  }, {
    "left" : "if (!type.matchesObjectContext())",
    "right" : "if (!type.matchesObjectContext())",
    "info" : "IfStatement[5926-6033]:IfStatement[6291-6398]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5960-6033]:Block[6325-6398]"
  }, {
    "left" : "mismatch(t, n, msg, type, OBJECT_TYPE);",
    "right" : "mismatch(t, n, msg, type, OBJECT_TYPE);",
    "info" : "ExpressionStatement[5968-6007]:ExpressionStatement[6333-6372]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[6014-6027]:ReturnStatement[6379-6392]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[6038-6050]:ReturnStatement[6403-6415]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[6182-6186]:PrimitiveType[6547-6551]"
  }, {
    "left" : "expectActualObject",
    "right" : "expectActualObject",
    "info" : "SimpleName[6187-6205]:SimpleName[6552-6570]"
  }, {
    "left" : "NodeTraversal t",
    "right" : "NodeTraversal t",
    "info" : "SingleVariableDeclaration[6206-6221]:SingleVariableDeclaration[6571-6586]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[6223-6229]:SingleVariableDeclaration[6588-6594]"
  }, {
    "left" : "JSType type",
    "right" : "JSType type",
    "info" : "SingleVariableDeclaration[6231-6242]:SingleVariableDeclaration[6596-6607]"
  }, {
    "left" : "String msg",
    "right" : "String msg",
    "info" : "SingleVariableDeclaration[6244-6254]:SingleVariableDeclaration[6609-6619]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6256-6341]:Block[6621-6706]"
  }, {
    "left" : "if (!type.isObject())",
    "right" : "if (!type.isObject())",
    "info" : "IfStatement[6262-6337]:IfStatement[6627-6702]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6284-6337]:Block[6649-6702]"
  }, {
    "left" : "mismatch(t, n, msg, type, OBJECT_TYPE);",
    "right" : "mismatch(t, n, msg, type, OBJECT_TYPE);",
    "info" : "ExpressionStatement[6292-6331]:ExpressionStatement[6657-6696]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[6507-6511]:PrimitiveType[6872-6876]"
  }, {
    "left" : "expectAnyObject",
    "right" : "expectAnyObject",
    "info" : "SimpleName[6512-6527]:SimpleName[6877-6892]"
  }, {
    "left" : "NodeTraversal t",
    "right" : "NodeTraversal t",
    "info" : "SingleVariableDeclaration[6528-6543]:SingleVariableDeclaration[6893-6908]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[6545-6551]:SingleVariableDeclaration[6910-6916]"
  }, {
    "left" : "JSType type",
    "right" : "JSType type",
    "info" : "SingleVariableDeclaration[6553-6564]:SingleVariableDeclaration[6918-6929]"
  }, {
    "left" : "String msg",
    "right" : "String msg",
    "info" : "SingleVariableDeclaration[6566-6576]:SingleVariableDeclaration[6931-6941]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6578-6760]:Block[6943-7125]"
  }, {
    "left" : "JSType anyObjectType = getNativeType(NO_OBJECT_TYPE);",
    "right" : "JSType anyObjectType = getNativeType(NO_OBJECT_TYPE);",
    "info" : "VariableDeclarationStatement[6584-6637]:VariableDeclarationStatement[6949-7002]"
  }, {
    "left" : "if (!anyObjectType.isSubtype(type) && !type.isEmptyType())",
    "right" : "if (!anyObjectType.isSubtype(type) && !type.isEmptyType())",
    "info" : "IfStatement[6642-6756]:IfStatement[7007-7121]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6701-6756]:Block[7066-7121]"
  }, {
    "left" : "mismatch(t, n, msg, type, anyObjectType);",
    "right" : "mismatch(t, n, msg, type, anyObjectType);",
    "info" : "ExpressionStatement[6709-6750]:ExpressionStatement[7074-7115]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[6948-6952]:PrimitiveType[7313-7317]"
  }, {
    "left" : "expectString",
    "right" : "expectString",
    "info" : "SimpleName[6953-6965]:SimpleName[7318-7330]"
  }, {
    "left" : "NodeTraversal t",
    "right" : "NodeTraversal t",
    "info" : "SingleVariableDeclaration[6966-6981]:SingleVariableDeclaration[7331-7346]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[6983-6989]:SingleVariableDeclaration[7348-7354]"
  }, {
    "left" : "JSType type",
    "right" : "JSType type",
    "info" : "SingleVariableDeclaration[6991-7002]:SingleVariableDeclaration[7356-7367]"
  }, {
    "left" : "String msg",
    "right" : "String msg",
    "info" : "SingleVariableDeclaration[7004-7014]:SingleVariableDeclaration[7369-7379]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7016-7113]:Block[7381-7478]"
  }, {
    "left" : "if (!type.matchesStringContext())",
    "right" : "if (!type.matchesStringContext())",
    "info" : "IfStatement[7022-7109]:IfStatement[7387-7474]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7056-7109]:Block[7421-7474]"
  }, {
    "left" : "mismatch(t, n, msg, type, STRING_TYPE);",
    "right" : "mismatch(t, n, msg, type, STRING_TYPE);",
    "info" : "ExpressionStatement[7064-7103]:ExpressionStatement[7429-7468]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[7301-7305]:PrimitiveType[7666-7670]"
  }, {
    "left" : "expectNumber",
    "right" : "expectNumber",
    "info" : "SimpleName[7306-7318]:SimpleName[7671-7683]"
  }, {
    "left" : "NodeTraversal t",
    "right" : "NodeTraversal t",
    "info" : "SingleVariableDeclaration[7319-7334]:SingleVariableDeclaration[7684-7699]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[7336-7342]:SingleVariableDeclaration[7701-7707]"
  }, {
    "left" : "JSType type",
    "right" : "JSType type",
    "info" : "SingleVariableDeclaration[7344-7355]:SingleVariableDeclaration[7709-7720]"
  }, {
    "left" : "String msg",
    "right" : "String msg",
    "info" : "SingleVariableDeclaration[7357-7367]:SingleVariableDeclaration[7722-7732]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7369-7466]:Block[7734-7831]"
  }, {
    "left" : "if (!type.matchesNumberContext())",
    "right" : "if (!type.matchesNumberContext())",
    "info" : "IfStatement[7375-7462]:IfStatement[7740-7827]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7409-7462]:Block[7774-7827]"
  }, {
    "left" : "mismatch(t, n, msg, type, NUMBER_TYPE);",
    "right" : "mismatch(t, n, msg, type, NUMBER_TYPE);",
    "info" : "ExpressionStatement[7417-7456]:ExpressionStatement[7782-7821]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[7676-7680]:PrimitiveType[8041-8045]"
  }, {
    "left" : "expectBitwiseable",
    "right" : "expectBitwiseable",
    "info" : "SimpleName[7681-7698]:SimpleName[8046-8063]"
  }, {
    "left" : "NodeTraversal t",
    "right" : "NodeTraversal t",
    "info" : "SingleVariableDeclaration[7699-7714]:SingleVariableDeclaration[8064-8079]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[7716-7722]:SingleVariableDeclaration[8081-8087]"
  }, {
    "left" : "JSType type",
    "right" : "JSType type",
    "info" : "SingleVariableDeclaration[7724-7735]:SingleVariableDeclaration[8089-8100]"
  }, {
    "left" : "String msg",
    "right" : "String msg",
    "info" : "SingleVariableDeclaration[7737-7747]:SingleVariableDeclaration[8102-8112]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7749-7882]:Block[8114-8247]"
  }, {
    "left" : "if (!type.matchesNumberContext() && !type.isSubtype(allValueTypes))",
    "right" : "if (!type.matchesNumberContext() && !type.isSubtype(allValueTypes))",
    "info" : "IfStatement[7755-7878]:IfStatement[8120-8243]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7823-7878]:Block[8188-8243]"
  }, {
    "left" : "mismatch(t, n, msg, type, allValueTypes);",
    "right" : "mismatch(t, n, msg, type, allValueTypes);",
    "info" : "ExpressionStatement[7831-7872]:ExpressionStatement[8196-8237]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[8092-8096]:PrimitiveType[8457-8461]"
  }, {
    "left" : "expectStringOrNumber",
    "right" : "expectStringOrNumber",
    "info" : "SimpleName[8097-8117]:SimpleName[8462-8482]"
  }, {
    "left" : "NodeTraversal t",
    "right" : "NodeTraversal t",
    "info" : "SingleVariableDeclaration[8125-8140]:SingleVariableDeclaration[8490-8505]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[8142-8148]:SingleVariableDeclaration[8507-8513]"
  }, {
    "left" : "JSType type",
    "right" : "JSType type",
    "info" : "SingleVariableDeclaration[8150-8161]:SingleVariableDeclaration[8515-8526]"
  }, {
    "left" : "String msg",
    "right" : "String msg",
    "info" : "SingleVariableDeclaration[8163-8173]:SingleVariableDeclaration[8528-8538]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8175-8306]:Block[8540-8671]"
  }, {
    "left" : "if (!type.matchesNumberContext() && !type.matchesStringContext())",
    "right" : "if (!type.matchesNumberContext() && !type.matchesStringContext())",
    "info" : "IfStatement[8181-8302]:IfStatement[8546-8667]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8247-8302]:Block[8612-8667]"
  }, {
    "left" : "mismatch(t, n, msg, type, NUMBER_STRING);",
    "right" : "mismatch(t, n, msg, type, NUMBER_STRING);",
    "info" : "ExpressionStatement[8255-8296]:ExpressionStatement[8620-8661]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[8640-8647]:PrimitiveType[9005-9012]"
  }, {
    "left" : "expectNotNullOrUndefined",
    "right" : "expectNotNullOrUndefined",
    "info" : "SimpleName[8648-8672]:SimpleName[9013-9037]"
  }, {
    "left" : "NodeTraversal t",
    "right" : "NodeTraversal t",
    "info" : "SingleVariableDeclaration[8680-8695]:SingleVariableDeclaration[9045-9060]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[8697-8703]:SingleVariableDeclaration[9062-9068]"
  }, {
    "left" : "JSType type",
    "right" : "JSType type",
    "info" : "SingleVariableDeclaration[8705-8716]:SingleVariableDeclaration[9070-9081]"
  }, {
    "left" : "String msg",
    "right" : "String msg",
    "info" : "SingleVariableDeclaration[8718-8728]:SingleVariableDeclaration[9083-9093]"
  }, {
    "left" : "JSType expectedType",
    "right" : "JSType expectedType",
    "info" : "SingleVariableDeclaration[8730-8749]:SingleVariableDeclaration[9095-9114]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8751-9578]:Block[9116-9943]"
  }, {
    "left" : "if (!type.isNoType() && !type.isUnknownType() &&\n        type.isSubtype(nullOrUndefined) &&\n        !containsForwardDeclaredUnresolvedName(type))",
    "right" : "if (!type.isNoType() && !type.isUnknownType() &&\n        type.isSubtype(nullOrUndefined) &&\n        !containsForwardDeclaredUnresolvedName(type))",
    "info" : "IfStatement[8757-9557]:IfStatement[9122-9922]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8903-9557]:Block[9268-9922]"
  }, {
    "left" : "if (n.getType() == Token.GETPROP &&\n          !t.inGlobalScope() && type.isNullType())",
    "right" : "if (n.getType() == Token.GETPROP &&\n          !t.inGlobalScope() && type.isNullType())",
    "info" : "IfStatement[9366-9483]:IfStatement[9731-9848]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9453-9483]:Block[9818-9848]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[9463-9475]:ReturnStatement[9828-9840]"
  }, {
    "left" : "mismatch(t, n, msg, type, expectedType);",
    "right" : "mismatch(t, n, msg, type, expectedType);",
    "info" : "ExpressionStatement[9491-9531]:ExpressionStatement[9856-9896]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[9538-9551]:ReturnStatement[9903-9916]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[9562-9574]:ReturnStatement[9927-9939]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[9582-9589]:Modifier[9947-9954]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[9590-9597]:PrimitiveType[9955-9962]"
  }, {
    "left" : "containsForwardDeclaredUnresolvedName",
    "right" : "containsForwardDeclaredUnresolvedName",
    "info" : "SimpleName[9598-9635]:SimpleName[9963-10000]"
  }, {
    "left" : "JSType type",
    "right" : "JSType type",
    "info" : "SingleVariableDeclaration[9636-9647]:SingleVariableDeclaration[10001-10012]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9649-9894]:Block[10014-10259]"
  }, {
    "left" : "if (type instanceof UnionType)",
    "right" : "if (type instanceof UnionType)",
    "info" : "IfStatement[9655-9854]:IfStatement[10020-10219]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9686-9854]:Block[10051-10219]"
  }, {
    "left" : "for (JSType alt : ((UnionType) type).getAlternates())",
    "right" : "for (JSType alt : ((UnionType) type).getAlternates())",
    "info" : "EnhancedForStatement[9694-9848]:EnhancedForStatement[10059-10213]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9748-9848]:Block[10113-10213]"
  }, {
    "left" : "if (containsForwardDeclaredUnresolvedName(alt))",
    "right" : "if (containsForwardDeclaredUnresolvedName(alt))",
    "info" : "IfStatement[9758-9840]:IfStatement[10123-10205]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9806-9840]:Block[10171-10205]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[9818-9830]:ReturnStatement[10183-10195]"
  }, {
    "left" : "return type.isNoResolvedType();",
    "right" : "return type.isNoResolvedType();",
    "info" : "ReturnStatement[9859-9890]:ReturnStatement[10224-10255]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[10003-10007]:PrimitiveType[10368-10372]"
  }, {
    "left" : "expectSwitchMatchesCase",
    "right" : "expectSwitchMatchesCase",
    "info" : "SimpleName[10008-10031]:SimpleName[10373-10396]"
  }, {
    "left" : "NodeTraversal t",
    "right" : "NodeTraversal t",
    "info" : "SingleVariableDeclaration[10032-10047]:SingleVariableDeclaration[10397-10412]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[10049-10055]:SingleVariableDeclaration[10414-10420]"
  }, {
    "left" : "JSType switchType",
    "right" : "JSType switchType",
    "info" : "SingleVariableDeclaration[10057-10074]:SingleVariableDeclaration[10422-10439]"
  }, {
    "left" : "JSType caseType",
    "right" : "JSType caseType",
    "info" : "SingleVariableDeclaration[10082-10097]:SingleVariableDeclaration[10447-10462]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10099-10630]:Block[10464-10995]"
  }, {
    "left" : "if (!switchType.canTestForShallowEqualityWith(caseType) &&\n        (caseType.autoboxesTo() == null ||\n            !caseType.autoboxesTo().isSubtype(switchType)))",
    "right" : "if (!switchType.canTestForShallowEqualityWith(caseType) &&\n        (caseType.autoboxesTo() == null ||\n            !caseType.autoboxesTo().isSubtype(switchType)))",
    "info" : "IfStatement[10337-10626]:IfStatement[10702-10991]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10499-10626]:Block[10864-10991]"
  }, {
    "left" : "mismatch(t, n.getFirstChild(),\n          \"case expression doesn't match switch\",\n          caseType, switchType);",
    "right" : "mismatch(t, n.getFirstChild(),\n          \"case expression doesn't match switch\",\n          caseType, switchType);",
    "info" : "ExpressionStatement[10507-10620]:ExpressionStatement[10872-10985]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[11016-11020]:PrimitiveType[11381-11385]"
  }, {
    "left" : "expectIndexMatch",
    "right" : "expectIndexMatch",
    "info" : "SimpleName[11021-11037]:SimpleName[11386-11402]"
  }, {
    "left" : "NodeTraversal t",
    "right" : "NodeTraversal t",
    "info" : "SingleVariableDeclaration[11038-11053]:SingleVariableDeclaration[11403-11418]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[11055-11061]:SingleVariableDeclaration[11420-11426]"
  }, {
    "left" : "JSType objType",
    "right" : "JSType objType",
    "info" : "SingleVariableDeclaration[11063-11077]:SingleVariableDeclaration[11428-11442]"
  }, {
    "left" : "JSType indexType",
    "right" : "JSType indexType",
    "info" : "SingleVariableDeclaration[11085-11101]:SingleVariableDeclaration[11450-11466]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11103-11784]:Block[11468-12149]"
  }, {
    "left" : "if (objType.isUnknownType())",
    "right" : "if (objType.isUnknownType())",
    "info" : "IfStatement[11109-11780]:IfStatement[11474-12145]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11138-11209]:Block[11503-11574]"
  }, {
    "left" : "expectStringOrNumber(t, n, indexType, \"property access\");",
    "right" : "expectStringOrNumber(t, n, indexType, \"property access\");",
    "info" : "ExpressionStatement[11146-11203]:ExpressionStatement[11511-11568]"
  }, {
    "left" : "if (objType.toObjectType() != null &&\n        objType.toObjectType().getIndexType() != null)",
    "right" : "if (objType.toObjectType() != null &&\n        objType.toObjectType().getIndexType() != null)",
    "info" : "IfStatement[11215-11780]:IfStatement[11580-12145]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11308-11431]:Block[11673-11796]"
  }, {
    "left" : "expectCanAssignTo(t, n, indexType, objType.toObjectType().getIndexType(),\n          \"restricted index type\");",
    "right" : "expectCanAssignTo(t, n, indexType, objType.toObjectType().getIndexType(),\n          \"restricted index type\");",
    "info" : "ExpressionStatement[11316-11425]:ExpressionStatement[11681-11790]"
  }, {
    "left" : "if (objType.isArrayType())",
    "right" : "if (objType.isArrayType())",
    "info" : "IfStatement[11437-11780]:IfStatement[11802-12145]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11464-11524]:Block[11829-11889]"
  }, {
    "left" : "expectNumber(t, n, indexType, \"array access\");",
    "right" : "expectNumber(t, n, indexType, \"array access\");",
    "info" : "ExpressionStatement[11472-11518]:ExpressionStatement[11837-11883]"
  }, {
    "left" : "if (objType.matchesObjectContext())",
    "right" : "if (objType.matchesObjectContext())",
    "info" : "IfStatement[11530-11780]:IfStatement[11895-12145]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11566-11629]:Block[11931-11994]"
  }, {
    "left" : "expectString(t, n, indexType, \"property access\");",
    "right" : "expectString(t, n, indexType, \"property access\");",
    "info" : "ExpressionStatement[11574-11623]:ExpressionStatement[11939-11988]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11635-11780]:Block[12000-12145]"
  }, {
    "left" : "mismatch(t, n, \"only arrays or objects can be accessed\",\n          objType, typeRegistry.createUnionType(ARRAY_TYPE, OBJECT_TYPE));",
    "right" : "mismatch(t, n, \"only arrays or objects can be accessed\",\n          objType, typeRegistry.createUnionType(ARRAY_TYPE, OBJECT_TYPE));",
    "info" : "ExpressionStatement[11643-11774]:ExpressionStatement[12008-12139]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[12281-12288]:PrimitiveType[12646-12653]"
  }, {
    "left" : "expectCanAssignToPropertyOf",
    "right" : "expectCanAssignToPropertyOf",
    "info" : "SimpleName[12289-12316]:SimpleName[12654-12681]"
  }, {
    "left" : "NodeTraversal t",
    "right" : "NodeTraversal t",
    "info" : "SingleVariableDeclaration[12317-12332]:SingleVariableDeclaration[12682-12697]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[12334-12340]:SingleVariableDeclaration[12699-12705]"
  }, {
    "left" : "JSType rightType",
    "right" : "JSType rightType",
    "info" : "SingleVariableDeclaration[12342-12358]:SingleVariableDeclaration[12707-12723]"
  }, {
    "left" : "JSType leftType",
    "right" : "JSType leftType",
    "info" : "SingleVariableDeclaration[12366-12381]:SingleVariableDeclaration[12731-12746]"
  }, {
    "left" : "Node owner",
    "right" : "Node owner",
    "info" : "SingleVariableDeclaration[12383-12393]:SingleVariableDeclaration[12748-12758]"
  }, {
    "left" : "String propName",
    "right" : "String propName",
    "info" : "SingleVariableDeclaration[12395-12410]:SingleVariableDeclaration[12760-12775]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12412-12987]:Block[12777-13352]"
  }, {
    "left" : "if (!leftType.isNoType() && !rightType.canAssignTo(leftType))",
    "right" : "if (!leftType.isNoType() && !rightType.canAssignTo(leftType))",
    "info" : "IfStatement[12478-12966]:IfStatement[12843-13331]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12540-12966]:Block[12905-13331]"
  }, {
    "left" : "if (bothIntrinsics(rightType, leftType))",
    "right" : "if (bothIntrinsics(rightType, leftType))",
    "info" : "IfStatement[12548-12940]:IfStatement[12913-13305]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12589-12760]:Block[12954-13125]"
  }, {
    "left" : "registerMismatch(rightType, leftType);",
    "right" : "registerMismatch(rightType, leftType);",
    "info" : "ExpressionStatement[12714-12752]:ExpressionStatement[13079-13117]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12766-12940]:Block[13131-13305]"
  }, {
    "left" : "mismatch(t, n,\n            \"assignment to property \" + propName + \" of \" +\n            getReadableJSTypeName(owner, true),\n            rightType, leftType);",
    "right" : "mismatch(t, n,\n            \"assignment to property \" + propName + \" of \" +\n            getReadableJSTypeName(owner, true),\n            rightType, leftType);",
    "info" : "ExpressionStatement[12776-12932]:ExpressionStatement[13141-13297]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[12947-12960]:ReturnStatement[13312-13325]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[12971-12983]:ReturnStatement[13336-13348]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[13429-13436]:PrimitiveType[13794-13801]"
  }, {
    "left" : "expectCanAssignTo",
    "right" : "expectCanAssignTo",
    "info" : "SimpleName[13437-13454]:SimpleName[13802-13819]"
  }, {
    "left" : "NodeTraversal t",
    "right" : "NodeTraversal t",
    "info" : "SingleVariableDeclaration[13455-13470]:SingleVariableDeclaration[13820-13835]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[13472-13478]:SingleVariableDeclaration[13837-13843]"
  }, {
    "left" : "JSType rightType",
    "right" : "JSType rightType",
    "info" : "SingleVariableDeclaration[13480-13496]:SingleVariableDeclaration[13845-13861]"
  }, {
    "left" : "JSType leftType",
    "right" : "JSType leftType",
    "info" : "SingleVariableDeclaration[13504-13519]:SingleVariableDeclaration[13869-13884]"
  }, {
    "left" : "String msg",
    "right" : "String msg",
    "info" : "SingleVariableDeclaration[13521-13531]:SingleVariableDeclaration[13886-13896]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13533-13909]:Block[13898-14274]"
  }, {
    "left" : "if (!rightType.canAssignTo(leftType))",
    "right" : "if (!rightType.canAssignTo(leftType))",
    "info" : "IfStatement[13539-13888]:IfStatement[13904-14253]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13577-13888]:Block[13942-14253]"
  }, {
    "left" : "if (bothIntrinsics(rightType, leftType))",
    "right" : "if (bothIntrinsics(rightType, leftType))",
    "info" : "IfStatement[13585-13862]:IfStatement[13950-14227]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13626-13797]:Block[13991-14162]"
  }, {
    "left" : "registerMismatch(rightType, leftType);",
    "right" : "registerMismatch(rightType, leftType);",
    "info" : "ExpressionStatement[13751-13789]:ExpressionStatement[14116-14154]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13803-13862]:Block[14168-14227]"
  }, {
    "left" : "mismatch(t, n, msg, rightType, leftType);",
    "right" : "mismatch(t, n, msg, rightType, leftType);",
    "info" : "ExpressionStatement[13813-13854]:ExpressionStatement[14178-14219]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[13869-13882]:ReturnStatement[14234-14247]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[13893-13905]:ReturnStatement[14258-14270]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[13913-13920]:Modifier[14278-14285]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[13921-13928]:PrimitiveType[14286-14293]"
  }, {
    "left" : "bothIntrinsics",
    "right" : "bothIntrinsics",
    "info" : "SimpleName[13929-13943]:SimpleName[14294-14308]"
  }, {
    "left" : "JSType rightType",
    "right" : "JSType rightType",
    "info" : "SingleVariableDeclaration[13944-13960]:SingleVariableDeclaration[14309-14325]"
  }, {
    "left" : "JSType leftType",
    "right" : "JSType leftType",
    "info" : "SingleVariableDeclaration[13962-13977]:SingleVariableDeclaration[14327-14342]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13979-14113]:Block[14344-14478]"
  }, {
    "left" : "return (leftType.isConstructor() || leftType.isEnumType()) &&\n        (rightType.isConstructor() || rightType.isEnumType());",
    "right" : "return (leftType.isConstructor() || leftType.isEnumType()) &&\n        (rightType.isConstructor() || rightType.isEnumType());",
    "info" : "ReturnStatement[13985-14109]:ReturnStatement[14350-14474]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[14556-14560]:PrimitiveType[14921-14925]"
  }, {
    "left" : "expectArgumentMatchesParameter",
    "right" : "expectArgumentMatchesParameter",
    "info" : "SimpleName[14561-14591]:SimpleName[14926-14956]"
  }, {
    "left" : "NodeTraversal t",
    "right" : "NodeTraversal t",
    "info" : "SingleVariableDeclaration[14592-14607]:SingleVariableDeclaration[14957-14972]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[14609-14615]:SingleVariableDeclaration[14974-14980]"
  }, {
    "left" : "JSType argType",
    "right" : "JSType argType",
    "info" : "SingleVariableDeclaration[14617-14631]:SingleVariableDeclaration[14982-14996]"
  }, {
    "left" : "JSType paramType",
    "right" : "JSType paramType",
    "info" : "SingleVariableDeclaration[14639-14655]:SingleVariableDeclaration[15004-15020]"
  }, {
    "left" : "Node callNode",
    "right" : "Node callNode",
    "info" : "SingleVariableDeclaration[14657-14670]:SingleVariableDeclaration[15022-15035]"
  }, {
    "left" : "int ordinal",
    "right" : "int ordinal",
    "info" : "SingleVariableDeclaration[14672-14683]:SingleVariableDeclaration[15037-15048]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14685-14975]:Block[15050-15340]"
  }, {
    "left" : "if (!argType.canAssignTo(paramType))",
    "right" : "if (!argType.canAssignTo(paramType))",
    "info" : "IfStatement[14691-14971]:IfStatement[15056-15336]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14728-14971]:Block[15093-15336]"
  }, {
    "left" : "mismatch(t, n,\n          String.format(\"actual parameter %d of %s does not match \" +\n              \"formal parameter\", ordinal,\n              getReadableJSTypeName(callNode.getFirstChild(), false)),\n          argType, paramType);",
    "right" : "mismatch(t, n,\n          String.format(\"actual parameter %d of %s does not match \" +\n              \"formal parameter\", ordinal,\n              getReadableJSTypeName(callNode.getFirstChild(), false)),\n          argType, paramType);",
    "info" : "ExpressionStatement[14736-14965]:ExpressionStatement[15101-15330]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[15464-15468]:PrimitiveType[15829-15833]"
  }, {
    "left" : "expectCanOverride",
    "right" : "expectCanOverride",
    "info" : "SimpleName[15469-15486]:SimpleName[15834-15851]"
  }, {
    "left" : "NodeTraversal t",
    "right" : "NodeTraversal t",
    "info" : "SingleVariableDeclaration[15487-15502]:SingleVariableDeclaration[15852-15867]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[15504-15510]:SingleVariableDeclaration[15869-15875]"
  }, {
    "left" : "JSType overridingType",
    "right" : "JSType overridingType",
    "info" : "SingleVariableDeclaration[15512-15533]:SingleVariableDeclaration[15877-15898]"
  }, {
    "left" : "JSType hiddenType",
    "right" : "JSType hiddenType",
    "info" : "SingleVariableDeclaration[15541-15558]:SingleVariableDeclaration[15906-15923]"
  }, {
    "left" : "String propertyName",
    "right" : "String propertyName",
    "info" : "SingleVariableDeclaration[15560-15579]:SingleVariableDeclaration[15925-15944]"
  }, {
    "left" : "JSType ownerType",
    "right" : "JSType ownerType",
    "info" : "SingleVariableDeclaration[15581-15597]:SingleVariableDeclaration[15946-15962]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15599-15945]:Block[15964-16310]"
  }, {
    "left" : "if (!overridingType.canAssignTo(hiddenType))",
    "right" : "if (!overridingType.canAssignTo(hiddenType))",
    "info" : "IfStatement[15605-15941]:IfStatement[15970-16306]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15650-15941]:Block[16015-16306]"
  }, {
    "left" : "registerMismatch(overridingType, hiddenType);",
    "right" : "registerMismatch(overridingType, hiddenType);",
    "info" : "ExpressionStatement[15658-15703]:ExpressionStatement[16023-16068]"
  }, {
    "left" : "if (shouldReport)",
    "right" : "if (shouldReport)",
    "info" : "IfStatement[15710-15935]:IfStatement[16075-16300]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15728-15935]:Block[16093-16300]"
  }, {
    "left" : "compiler.report(\n            t.makeError(n, HIDDEN_PROPERTY_MISMATCH,\n                propertyName, ownerType.toString(),\n                hiddenType.toString(), overridingType.toString()));",
    "right" : "compiler.report(\n            t.makeError(n, HIDDEN_PROPERTY_MISMATCH,\n                propertyName, ownerType.toString(),\n                hiddenType.toString(), overridingType.toString()));",
    "info" : "ExpressionStatement[15738-15927]:ExpressionStatement[16103-16292]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[16235-16239]:PrimitiveType[16600-16604]"
  }, {
    "left" : "expectSuperType",
    "right" : "expectSuperType",
    "info" : "SimpleName[16240-16255]:SimpleName[16605-16620]"
  }, {
    "left" : "NodeTraversal t",
    "right" : "NodeTraversal t",
    "info" : "SingleVariableDeclaration[16256-16271]:SingleVariableDeclaration[16621-16636]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[16273-16279]:SingleVariableDeclaration[16638-16644]"
  }, {
    "left" : "ObjectType superObject",
    "right" : "ObjectType superObject",
    "info" : "SingleVariableDeclaration[16281-16303]:SingleVariableDeclaration[16646-16668]"
  }, {
    "left" : "ObjectType subObject",
    "right" : "ObjectType subObject",
    "info" : "SingleVariableDeclaration[16311-16331]:SingleVariableDeclaration[16676-16696]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16333-17115]:Block[16698-17480]"
  }, {
    "left" : "FunctionType subCtor = subObject.getConstructor();",
    "right" : "FunctionType subCtor = subObject.getConstructor();",
    "info" : "VariableDeclarationStatement[16339-16389]:VariableDeclarationStatement[16704-16754]"
  }, {
    "left" : "ObjectType declaredSuper =\n        subObject.getImplicitPrototype().getImplicitPrototype();",
    "right" : "ObjectType declaredSuper =\n        subObject.getImplicitPrototype().getImplicitPrototype();",
    "info" : "VariableDeclarationStatement[16394-16485]:VariableDeclarationStatement[16759-16850]"
  }, {
    "left" : "if (!declaredSuper.equals(superObject))",
    "right" : "if (!declaredSuper.equals(superObject))",
    "info" : "IfStatement[16490-17111]:IfStatement[16855-17476]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16530-17111]:Block[16895-17476]"
  }, {
    "left" : "if (declaredSuper.equals(getNativeType(OBJECT_TYPE)))",
    "right" : "if (declaredSuper.equals(getNativeType(OBJECT_TYPE)))",
    "info" : "IfStatement[16538-16973]:IfStatement[16903-17338]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16592-16820]:Block[16957-17185]"
  }, {
    "left" : "if (shouldReport)",
    "right" : "if (shouldReport)",
    "info" : "IfStatement[16602-16758]:IfStatement[16967-17123]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16620-16758]:Block[16985-17123]"
  }, {
    "left" : "compiler.report(\n              t.makeError(n, MISSING_EXTENDS_TAG_WARNING,\n                  subObject.toString()));",
    "right" : "compiler.report(\n              t.makeError(n, MISSING_EXTENDS_TAG_WARNING,\n                  subObject.toString()));",
    "info" : "ExpressionStatement[16632-16748]:ExpressionStatement[16997-17113]"
  }, {
    "left" : "registerMismatch(superObject, declaredSuper);",
    "right" : "registerMismatch(superObject, declaredSuper);",
    "info" : "ExpressionStatement[16767-16812]:ExpressionStatement[17132-17177]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16826-16973]:Block[17191-17338]"
  }, {
    "left" : "mismatch(t.getSourceName(), n,\n            \"mismatch in declaration of superclass type\",\n            superObject, declaredSuper);",
    "right" : "mismatch(t.getSourceName(), n,\n            \"mismatch in declaration of superclass type\",\n            superObject, declaredSuper);",
    "info" : "ExpressionStatement[16836-16965]:ExpressionStatement[17201-17330]"
  }, {
    "left" : "if (!subCtor.hasCachedValues())",
    "right" : "if (!subCtor.hasCachedValues())",
    "info" : "IfStatement[17014-17105]:IfStatement[17379-17470]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17046-17105]:Block[17411-17470]"
  }, {
    "left" : "subCtor.setPrototypeBasedOn(superObject);",
    "right" : "subCtor.setPrototypeBasedOn(superObject);",
    "info" : "ExpressionStatement[17056-17097]:ExpressionStatement[17421-17462]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[17449-17453]:PrimitiveType[17814-17818]"
  }, {
    "left" : "expectCanCast",
    "right" : "expectCanCast",
    "info" : "SimpleName[17454-17467]:SimpleName[17819-17832]"
  }, {
    "left" : "NodeTraversal t",
    "right" : "NodeTraversal t",
    "info" : "SingleVariableDeclaration[17468-17483]:SingleVariableDeclaration[17833-17848]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[17485-17491]:SingleVariableDeclaration[17850-17856]"
  }, {
    "left" : "JSType type",
    "right" : "JSType type",
    "info" : "SingleVariableDeclaration[17493-17504]:SingleVariableDeclaration[17858-17869]"
  }, {
    "left" : "JSType castType",
    "right" : "JSType castType",
    "info" : "SingleVariableDeclaration[17506-17521]:SingleVariableDeclaration[17871-17886]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17523-17905]:Block[17888-18270]"
  }, {
    "left" : "castType = castType.restrictByNotNullOrUndefined();",
    "right" : "castType = castType.restrictByNotNullOrUndefined();",
    "info" : "ExpressionStatement[17529-17580]:ExpressionStatement[17894-17945]"
  }, {
    "left" : "type = type.restrictByNotNullOrUndefined();",
    "right" : "type = type.restrictByNotNullOrUndefined();",
    "info" : "ExpressionStatement[17585-17628]:ExpressionStatement[17950-17993]"
  }, {
    "left" : "if (!type.canAssignTo(castType) && !castType.canAssignTo(type))",
    "right" : "if (!type.canAssignTo(castType) && !castType.canAssignTo(type))",
    "info" : "IfStatement[17634-17901]:IfStatement[17999-18266]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17698-17901]:Block[18063-18266]"
  }, {
    "left" : "if (shouldReport)",
    "right" : "if (shouldReport)",
    "info" : "IfStatement[17706-17855]:IfStatement[18071-18220]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17724-17855]:Block[18089-18220]"
  }, {
    "left" : "compiler.report(\n            t.makeError(n, INVALID_CAST,\n                castType.toString(), type.toString()));",
    "right" : "compiler.report(\n            t.makeError(n, INVALID_CAST,\n                castType.toString(), type.toString()));",
    "info" : "ExpressionStatement[17734-17847]:ExpressionStatement[18099-18212]"
  }, {
    "left" : "registerMismatch(type, castType);",
    "right" : "registerMismatch(type, castType);",
    "info" : "ExpressionStatement[17862-17895]:ExpressionStatement[18227-18260]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[18376-18380]:PrimitiveType[18741-18745]"
  }, {
    "left" : "expectUndeclaredVariable",
    "right" : "expectUndeclaredVariable",
    "info" : "SimpleName[18381-18405]:SimpleName[18746-18770]"
  }, {
    "left" : "String sourceName",
    "right" : "String sourceName",
    "info" : "SingleVariableDeclaration[18406-18423]:SingleVariableDeclaration[18771-18788]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[18425-18431]:SingleVariableDeclaration[18790-18796]"
  }, {
    "left" : "Node parent",
    "right" : "Node parent",
    "info" : "SingleVariableDeclaration[18433-18444]:SingleVariableDeclaration[18798-18809]"
  }, {
    "left" : "Var var",
    "right" : "Var var",
    "info" : "SingleVariableDeclaration[18446-18453]:SingleVariableDeclaration[18811-18818]"
  }, {
    "left" : "String variableName",
    "right" : "String variableName",
    "info" : "SingleVariableDeclaration[18461-18480]:SingleVariableDeclaration[18826-18845]"
  }, {
    "left" : "JSType newType",
    "right" : "JSType newType",
    "info" : "SingleVariableDeclaration[18482-18496]:SingleVariableDeclaration[18847-18861]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18498-20576]:Block[18863-20941]"
  }, {
    "left" : "boolean allowDupe = false;",
    "right" : "boolean allowDupe = false;",
    "info" : "VariableDeclarationStatement[18504-18530]:VariableDeclarationStatement[18869-18895]"
  }, {
    "left" : "if (n.getType() == Token.GETPROP)",
    "right" : "if (n.getType() == Token.GETPROP)",
    "info" : "IfStatement[18535-18779]:IfStatement[18900-19144]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18569-18779]:Block[18934-19144]"
  }, {
    "left" : "JSDocInfo info = n.getJSDocInfo();",
    "right" : "JSDocInfo info = n.getJSDocInfo();",
    "info" : "VariableDeclarationStatement[18577-18611]:VariableDeclarationStatement[18942-18976]"
  }, {
    "left" : "if (info == null)",
    "right" : "if (info == null)",
    "info" : "IfStatement[18618-18683]:IfStatement[18983-19048]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18636-18683]:Block[19001-19048]"
  }, {
    "left" : "info = parent.getJSDocInfo();",
    "right" : "info = parent.getJSDocInfo();",
    "info" : "ExpressionStatement[18646-18675]:ExpressionStatement[19011-19040]"
  }, {
    "left" : "allowDupe =\n          info != null && info.getSuppressions().contains(\"duplicate\");",
    "right" : "allowDupe =\n          info != null && info.getSuppressions().contains(\"duplicate\");",
    "info" : "ExpressionStatement[18690-18773]:ExpressionStatement[19055-19138]"
  }, {
    "left" : "JSType varType = var.getType();",
    "right" : "JSType varType = var.getType();",
    "info" : "VariableDeclarationStatement[18785-18816]:VariableDeclarationStatement[19150-19181]"
  }, {
    "left" : "if (varType != null &&\n        varType != typeRegistry.getNativeType(UNKNOWN_TYPE) &&\n        newType != null &&\n        newType != typeRegistry.getNativeType(UNKNOWN_TYPE))",
    "right" : "if (varType != null &&\n        varType != typeRegistry.getNativeType(UNKNOWN_TYPE) &&\n        newType != null &&\n        newType != typeRegistry.getNativeType(UNKNOWN_TYPE))",
    "info" : "IfStatement[18994-20572]:IfStatement[19359-20937]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[19168-20572]:Block[19533-20937]"
  }, {
    "left" : "if (var.input == null)",
    "right" : "if (var.input == null)",
    "info" : "IfStatement[19487-20566]:IfStatement[19852-20931]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[19510-19835]:Block[19875-20200]"
  }, {
    "left" : "n.setJSType(varType);",
    "right" : "n.setJSType(varType);",
    "info" : "ExpressionStatement[19520-19541]:ExpressionStatement[19885-19906]"
  }, {
    "left" : "if (parent.getType() == Token.VAR)",
    "right" : "if (parent.getType() == Token.VAR)",
    "info" : "IfStatement[19550-19827]:IfStatement[19915-20192]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[19585-19701]:Block[19950-20066]"
  }, {
    "left" : "if (n.getFirstChild() != null)",
    "right" : "if (n.getFirstChild() != null)",
    "info" : "IfStatement[19597-19691]:IfStatement[19962-20056]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[19628-19691]:Block[19993-20056]"
  }, {
    "left" : "n.getFirstChild().setJSType(varType);",
    "right" : "n.getFirstChild().setJSType(varType);",
    "info" : "ExpressionStatement[19642-19679]:ExpressionStatement[20007-20044]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[19707-19827]:Block[20072-20192]"
  }, {
    "left" : "Preconditions.checkState(parent.getType() == Token.FUNCTION);",
    "right" : "Preconditions.checkState(parent.getType() == Token.FUNCTION);",
    "info" : "ExpressionStatement[19719-19780]:ExpressionStatement[20084-20145]"
  }, {
    "left" : "parent.setJSType(varType);",
    "right" : "parent.setJSType(varType);",
    "info" : "ExpressionStatement[19791-19817]:ExpressionStatement[20156-20182]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[19841-20566]:Block[20206-20931]"
  }, {
    "left" : "if (!(allowDupe ||\n              var.getParentNode().getType() == Token.EXPR_RESULT) ||\n            !newType.equals(varType))",
    "right" : "if (!(allowDupe ||\n              var.getParentNode().getType() == Token.EXPR_RESULT) ||\n            !newType.equals(varType))",
    "info" : "IfStatement[20107-20558]:IfStatement[20472-20923]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[20233-20558]:Block[20598-20923]"
  }, {
    "left" : "if (shouldReport)",
    "right" : "if (shouldReport)",
    "info" : "IfStatement[20245-20548]:IfStatement[20610-20913]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[20263-20548]:Block[20628-20913]"
  }, {
    "left" : "compiler.report(\n                JSError.make(sourceName, n, DUP_VAR_DECLARATION,\n                    variableName, newType.toString(), var.getInputName(),\n                    String.valueOf(var.nameNode.getLineno()),\n                    varType.toString()));",
    "right" : "compiler.report(\n                JSError.make(sourceName, n, DUP_VAR_DECLARATION,\n                    variableName, newType.toString(), var.getInputName(),\n                    String.valueOf(var.nameNode.getLineno()),\n                    varType.toString()));",
    "info" : "ExpressionStatement[20277-20536]:ExpressionStatement[20642-20901]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[20706-20710]:PrimitiveType[21071-21075]"
  }, {
    "left" : "expectAllInterfaceProperties",
    "right" : "expectAllInterfaceProperties",
    "info" : "SimpleName[20711-20739]:SimpleName[21076-21104]"
  }, {
    "left" : "NodeTraversal t",
    "right" : "NodeTraversal t",
    "info" : "SingleVariableDeclaration[20740-20755]:SingleVariableDeclaration[21105-21120]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[20757-20763]:SingleVariableDeclaration[21122-21128]"
  }, {
    "left" : "FunctionType type",
    "right" : "FunctionType type",
    "info" : "SingleVariableDeclaration[20771-20788]:SingleVariableDeclaration[21136-21153]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[20790-21166]:Block[21155-21531]"
  }, {
    "left" : "ObjectType instance = type.getInstanceType();",
    "right" : "ObjectType instance = type.getInstanceType();",
    "info" : "VariableDeclarationStatement[20796-20841]:VariableDeclarationStatement[21161-21206]"
  }, {
    "left" : "for (ObjectType implemented : type.getAllImplementedInterfaces())",
    "right" : "for (ObjectType implemented : type.getAllImplementedInterfaces())",
    "info" : "EnhancedForStatement[20846-21162]:EnhancedForStatement[21211-21527]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[20912-21162]:Block[21277-21527]"
  }, {
    "left" : "if (implemented.getImplicitPrototype() != null)",
    "right" : "if (implemented.getImplicitPrototype() != null)",
    "info" : "IfStatement[20920-21156]:IfStatement[21285-21521]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[20968-21156]:Block[21333-21521]"
  }, {
    "left" : "for (String prop :\n            implemented.getImplicitPrototype().getOwnPropertyNames())",
    "right" : "for (String prop :\n            implemented.getImplicitPrototype().getOwnPropertyNames())",
    "info" : "EnhancedForStatement[20978-21148]:EnhancedForStatement[21343-21513]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[21067-21148]:Block[21432-21513]"
  }, {
    "left" : "expectInterfaceProperty(t, n, instance, implemented, prop);",
    "right" : "expectInterfaceProperty(t, n, instance, implemented, prop);",
    "info" : "ExpressionStatement[21079-21138]:ExpressionStatement[21444-21503]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[21296-21303]:Modifier[21661-21668]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[21304-21308]:PrimitiveType[21669-21673]"
  }, {
    "left" : "expectInterfaceProperty",
    "right" : "expectInterfaceProperty",
    "info" : "SimpleName[21309-21332]:SimpleName[21674-21697]"
  }, {
    "left" : "NodeTraversal t",
    "right" : "NodeTraversal t",
    "info" : "SingleVariableDeclaration[21333-21348]:SingleVariableDeclaration[21698-21713]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[21350-21356]:SingleVariableDeclaration[21715-21721]"
  }, {
    "left" : "ObjectType instance",
    "right" : "ObjectType instance",
    "info" : "SingleVariableDeclaration[21364-21383]:SingleVariableDeclaration[21729-21748]"
  }, {
    "left" : "ObjectType implementedInterface",
    "right" : "ObjectType implementedInterface",
    "info" : "SingleVariableDeclaration[21385-21416]:SingleVariableDeclaration[21750-21781]"
  }, {
    "left" : "String prop",
    "right" : "String prop",
    "info" : "SingleVariableDeclaration[21418-21429]:SingleVariableDeclaration[21783-21794]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[21431-21941]:Block[21796-23034]"
  }, {
    "left" : "if (!instance.hasProperty(prop))",
    "right" : "if (!instance.hasProperty(prop))",
    "info" : "IfStatement[21437-21937]:IfStatement[21802-23030]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[21470-21937]:Block[21835-22254]"
  }, {
    "left" : "String sourceName = (String) n.getProp(Node.SOURCENAME_PROP);",
    "right" : "String sourceName = (String) n.getProp(Node.SOURCENAME_PROP);",
    "info" : "VariableDeclarationStatement[21503-21564]:VariableDeclarationStatement[21868-21929]"
  }, {
    "left" : "sourceName = sourceName == null ? \"\" : sourceName;",
    "right" : "sourceName = sourceName == null ? \"\" : sourceName;",
    "info" : "ExpressionStatement[21571-21621]:ExpressionStatement[21936-21986]"
  }, {
    "left" : "if (shouldReport)",
    "right" : "if (shouldReport)",
    "info" : "IfStatement[21628-21827]:IfStatement[21993-22192]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[21646-21827]:Block[22011-22192]"
  }, {
    "left" : "compiler.report(JSError.make(sourceName, n,\n            INTERFACE_METHOD_NOT_IMPLEMENTED,\n            prop, implementedInterface.toString(), instance.toString()));",
    "right" : "compiler.report(JSError.make(sourceName, n,\n            INTERFACE_METHOD_NOT_IMPLEMENTED,\n            prop, implementedInterface.toString(), instance.toString()));",
    "info" : "ExpressionStatement[21656-21819]:ExpressionStatement[22021-22184]"
  }, {
    "left" : "registerMismatch(instance, implementedInterface);",
    "right" : "registerMismatch(instance, implementedInterface);",
    "info" : "ExpressionStatement[21834-21883]:ExpressionStatement[22199-22248]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[21985-21992]:Modifier[23078-23085]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[21993-21997]:PrimitiveType[23086-23090]"
  }, {
    "left" : "mismatch",
    "right" : "mismatch",
    "info" : "SimpleName[21998-22006]:SimpleName[23091-23099]"
  }, {
    "left" : "NodeTraversal t",
    "right" : "NodeTraversal t",
    "info" : "SingleVariableDeclaration[22007-22022]:SingleVariableDeclaration[23100-23115]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[22024-22030]:SingleVariableDeclaration[23117-23123]"
  }, {
    "left" : "String msg",
    "right" : "String msg",
    "info" : "SingleVariableDeclaration[22056-22066]:SingleVariableDeclaration[23149-23159]"
  }, {
    "left" : "JSType found",
    "right" : "JSType found",
    "info" : "SingleVariableDeclaration[22068-22080]:SingleVariableDeclaration[23161-23173]"
  }, {
    "left" : "JSType required",
    "right" : "JSType required",
    "info" : "SingleVariableDeclaration[22082-22097]:SingleVariableDeclaration[23175-23190]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[22099-22162]:Block[23192-23255]"
  }, {
    "left" : "mismatch(t.getSourceName(), n, msg, found, required);",
    "right" : "mismatch(t.getSourceName(), n, msg, found, required);",
    "info" : "ExpressionStatement[22105-22158]:ExpressionStatement[23198-23251]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[22166-22173]:Modifier[23259-23266]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[22174-22178]:PrimitiveType[23267-23271]"
  }, {
    "left" : "mismatch",
    "right" : "mismatch",
    "info" : "SimpleName[22179-22187]:SimpleName[23272-23280]"
  }, {
    "left" : "NodeTraversal t",
    "right" : "NodeTraversal t",
    "info" : "SingleVariableDeclaration[22188-22203]:SingleVariableDeclaration[23281-23296]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[22205-22211]:SingleVariableDeclaration[23298-23304]"
  }, {
    "left" : "String msg",
    "right" : "String msg",
    "info" : "SingleVariableDeclaration[22237-22247]:SingleVariableDeclaration[23330-23340]"
  }, {
    "left" : "JSType found",
    "right" : "JSType found",
    "info" : "SingleVariableDeclaration[22249-22261]:SingleVariableDeclaration[23342-23354]"
  }, {
    "left" : "JSTypeNative required",
    "right" : "JSTypeNative required",
    "info" : "SingleVariableDeclaration[22263-22284]:SingleVariableDeclaration[23356-23377]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[22286-22348]:Block[23379-23441]"
  }, {
    "left" : "mismatch(t, n, msg, found, getNativeType(required));",
    "right" : "mismatch(t, n, msg, found, getNativeType(required));",
    "info" : "ExpressionStatement[22292-22344]:ExpressionStatement[23385-23437]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[22352-22359]:Modifier[23445-23452]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[22360-22364]:PrimitiveType[23453-23457]"
  }, {
    "left" : "mismatch",
    "right" : "mismatch",
    "info" : "SimpleName[22365-22373]:SimpleName[23458-23466]"
  }, {
    "left" : "String sourceName",
    "right" : "String sourceName",
    "info" : "SingleVariableDeclaration[22374-22391]:SingleVariableDeclaration[23467-23484]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[22393-22399]:SingleVariableDeclaration[23486-23492]"
  }, {
    "left" : "String msg",
    "right" : "String msg",
    "info" : "SingleVariableDeclaration[22425-22435]:SingleVariableDeclaration[23518-23528]"
  }, {
    "left" : "JSType found",
    "right" : "JSType found",
    "info" : "SingleVariableDeclaration[22437-22449]:SingleVariableDeclaration[23530-23542]"
  }, {
    "left" : "JSType required",
    "right" : "JSType required",
    "info" : "SingleVariableDeclaration[22451-22466]:SingleVariableDeclaration[23544-23559]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[22468-22694]:Block[23561-23787]"
  }, {
    "left" : "registerMismatch(found, required);",
    "right" : "registerMismatch(found, required);",
    "info" : "ExpressionStatement[22474-22508]:ExpressionStatement[23567-23601]"
  }, {
    "left" : "if (shouldReport)",
    "right" : "if (shouldReport)",
    "info" : "IfStatement[22513-22690]:IfStatement[23606-23783]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[22531-22690]:Block[23624-23783]"
  }, {
    "left" : "compiler.report(\n          JSError.make(sourceName, n, TYPE_MISMATCH_WARNING,\n                       formatFoundRequired(msg, found, required)));",
    "right" : "compiler.report(\n          JSError.make(sourceName, n, TYPE_MISMATCH_WARNING,\n                       formatFoundRequired(msg, found, required)));",
    "info" : "ExpressionStatement[22539-22684]:ExpressionStatement[23632-23777]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[22698-22705]:Modifier[23791-23798]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[22706-22710]:PrimitiveType[23799-23803]"
  }, {
    "left" : "registerMismatch",
    "right" : "registerMismatch",
    "info" : "SimpleName[22711-22727]:SimpleName[23804-23820]"
  }, {
    "left" : "JSType found",
    "right" : "JSType found",
    "info" : "SingleVariableDeclaration[22728-22740]:SingleVariableDeclaration[23821-23833]"
  }, {
    "left" : "JSType required",
    "right" : "JSType required",
    "info" : "SingleVariableDeclaration[22742-22757]:SingleVariableDeclaration[23835-23850]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[22759-23701]:Block[23852-24794]"
  }, {
    "left" : "found = found.restrictByNotNullOrUndefined();",
    "right" : "found = found.restrictByNotNullOrUndefined();",
    "info" : "ExpressionStatement[22874-22919]:ExpressionStatement[23967-24012]"
  }, {
    "left" : "required = required.restrictByNotNullOrUndefined();",
    "right" : "required = required.restrictByNotNullOrUndefined();",
    "info" : "ExpressionStatement[22924-22975]:ExpressionStatement[24017-24068]"
  }, {
    "left" : "if (found.canAssignTo(required) || required.canAssignTo(found))",
    "right" : "if (found.canAssignTo(required) || required.canAssignTo(found))",
    "info" : "IfStatement[22980-23065]:IfStatement[24073-24158]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[23044-23065]:Block[24137-24158]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[23052-23059]:ReturnStatement[24145-24152]"
  }, {
    "left" : "mismatches.add(new TypeMismatch(found, required));",
    "right" : "mismatches.add(new TypeMismatch(found, required));",
    "info" : "ExpressionStatement[23071-23121]:ExpressionStatement[24164-24214]"
  }, {
    "left" : "if (found instanceof FunctionType &&\n        required instanceof FunctionType)",
    "right" : "if (found instanceof FunctionType &&\n        required instanceof FunctionType)",
    "info" : "IfStatement[23126-23697]:IfStatement[24219-24790]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[23205-23697]:Block[24298-24790]"
  }, {
    "left" : "FunctionType fnTypeA = ((FunctionType) found);",
    "right" : "FunctionType fnTypeA = ((FunctionType) found);",
    "info" : "VariableDeclarationStatement[23213-23259]:VariableDeclarationStatement[24306-24352]"
  }, {
    "left" : "FunctionType fnTypeB = ((FunctionType) required);",
    "right" : "FunctionType fnTypeB = ((FunctionType) required);",
    "info" : "VariableDeclarationStatement[23266-23315]:VariableDeclarationStatement[24359-24408]"
  }, {
    "left" : "Iterator<Node> paramItA = fnTypeA.getParameters().iterator();",
    "right" : "Iterator<Node> paramItA = fnTypeA.getParameters().iterator();",
    "info" : "VariableDeclarationStatement[23322-23383]:VariableDeclarationStatement[24415-24476]"
  }, {
    "left" : "Iterator<Node> paramItB = fnTypeB.getParameters().iterator();",
    "right" : "Iterator<Node> paramItB = fnTypeB.getParameters().iterator();",
    "info" : "VariableDeclarationStatement[23390-23451]:VariableDeclarationStatement[24483-24544]"
  }, {
    "left" : "while (paramItA.hasNext() && paramItB.hasNext())",
    "right" : "while (paramItA.hasNext() && paramItB.hasNext())",
    "info" : "WhileStatement[23458-23614]:WhileStatement[24551-24707]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[23507-23614]:Block[24600-24707]"
  }, {
    "left" : "registerIfMismatch(paramItA.next().getJSType(),\n            paramItB.next().getJSType());",
    "right" : "registerIfMismatch(paramItA.next().getJSType(),\n            paramItB.next().getJSType());",
    "info" : "ExpressionStatement[23517-23606]:ExpressionStatement[24610-24699]"
  }, {
    "left" : "registerIfMismatch(fnTypeA.getReturnType(), fnTypeB.getReturnType());",
    "right" : "registerIfMismatch(fnTypeA.getReturnType(), fnTypeB.getReturnType());",
    "info" : "ExpressionStatement[23622-23691]:ExpressionStatement[24715-24784]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[23705-23712]:Modifier[24798-24805]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[23713-23717]:PrimitiveType[24806-24810]"
  }, {
    "left" : "registerIfMismatch",
    "right" : "registerIfMismatch",
    "info" : "SimpleName[23718-23736]:SimpleName[24811-24829]"
  }, {
    "left" : "JSType found",
    "right" : "JSType found",
    "info" : "SingleVariableDeclaration[23737-23749]:SingleVariableDeclaration[24830-24842]"
  }, {
    "left" : "JSType required",
    "right" : "JSType required",
    "info" : "SingleVariableDeclaration[23751-23766]:SingleVariableDeclaration[24844-24859]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[23768-23905]:Block[24861-24998]"
  }, {
    "left" : "if (found != null && required != null &&\n        !found.canAssignTo(required))",
    "right" : "if (found != null && required != null &&\n        !found.canAssignTo(required))",
    "info" : "IfStatement[23774-23901]:IfStatement[24867-24994]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[23853-23901]:Block[24946-24994]"
  }, {
    "left" : "registerMismatch(found, required);",
    "right" : "registerMismatch(found, required);",
    "info" : "ExpressionStatement[23861-23895]:ExpressionStatement[24954-24988]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[23966-23973]:Modifier[25059-25066]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[23974-23980]:SimpleType[25067-25073]"
  }, {
    "left" : "formatFoundRequired",
    "right" : "formatFoundRequired",
    "info" : "SimpleName[23981-24000]:SimpleName[25074-25093]"
  }, {
    "left" : "String description",
    "right" : "String description",
    "info" : "SingleVariableDeclaration[24001-24019]:SingleVariableDeclaration[25094-25112]"
  }, {
    "left" : "JSType found",
    "right" : "JSType found",
    "info" : "SingleVariableDeclaration[24021-24033]:SingleVariableDeclaration[25114-25126]"
  }, {
    "left" : "JSType required",
    "right" : "JSType required",
    "info" : "SingleVariableDeclaration[24041-24056]:SingleVariableDeclaration[25134-25149]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[24058-24142]:Block[25151-25235]"
  }, {
    "left" : "return MessageFormat.format(FOUND_REQUIRED, description, found, required);",
    "right" : "return MessageFormat.format(FOUND_REQUIRED, description, found, required);",
    "info" : "ReturnStatement[24064-24138]:ReturnStatement[25157-25231]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[24564-24570]:SimpleType[25657-25663]"
  }, {
    "left" : "getReadableJSTypeName",
    "right" : "getReadableJSTypeName",
    "info" : "SimpleName[24571-24592]:SimpleName[25664-25685]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[24593-24599]:SingleVariableDeclaration[25686-25692]"
  }, {
    "left" : "boolean dereference",
    "right" : "boolean dereference",
    "info" : "SingleVariableDeclaration[24601-24620]:SingleVariableDeclaration[25694-25713]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[24622-26148]:Block[25715-27241]"
  }, {
    "left" : "if (n.getType() == Token.GETPROP)",
    "right" : "if (n.getType() == Token.GETPROP)",
    "info" : "IfStatement[24818-25506]:IfStatement[25911-26599]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[24852-25506]:Block[25945-26599]"
  }, {
    "left" : "ObjectType objectType = getJSType(n.getFirstChild()).dereference();",
    "right" : "ObjectType objectType = getJSType(n.getFirstChild()).dereference();",
    "info" : "VariableDeclarationStatement[24860-24927]:VariableDeclarationStatement[25953-26020]"
  }, {
    "left" : "if (objectType != null)",
    "right" : "if (objectType != null)",
    "info" : "IfStatement[24934-25500]:IfStatement[26027-26593]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[24958-25500]:Block[26051-26593]"
  }, {
    "left" : "String propName = n.getLastChild().getString();",
    "right" : "String propName = n.getLastChild().getString();",
    "info" : "VariableDeclarationStatement[24968-25015]:VariableDeclarationStatement[26061-26108]"
  }, {
    "left" : "while (objectType != null && !objectType.hasOwnProperty(propName))",
    "right" : "while (objectType != null && !objectType.hasOwnProperty(propName))",
    "info" : "WhileStatement[25024-25160]:WhileStatement[26117-26253]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[25091-25160]:Block[26184-26253]"
  }, {
    "left" : "objectType = objectType.getImplicitPrototype();",
    "right" : "objectType = objectType.getImplicitPrototype();",
    "info" : "ExpressionStatement[25103-25150]:ExpressionStatement[26196-26243]"
  }, {
    "left" : "if (objectType != null &&\n            (objectType.getConstructor() != null ||\n             objectType.isFunctionPrototypeType()))",
    "right" : "if (objectType != null &&\n            (objectType.getConstructor() != null ||\n             objectType.isFunctionPrototypeType()))",
    "info" : "IfStatement[25294-25492]:IfStatement[26387-26585]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[25424-25492]:Block[26517-26585]"
  }, {
    "left" : "return objectType.toString() + \".\" + propName;",
    "right" : "return objectType.toString() + \".\" + propName;",
    "info" : "ReturnStatement[25436-25482]:ReturnStatement[26529-26575]"
  }, {
    "left" : "JSType type = getJSType(n);",
    "right" : "JSType type = getJSType(n);",
    "info" : "VariableDeclarationStatement[25512-25539]:VariableDeclarationStatement[26605-26632]"
  }, {
    "left" : "if (dereference)",
    "right" : "if (dereference)",
    "info" : "IfStatement[25544-25691]:IfStatement[26637-26784]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[25561-25691]:Block[26654-26784]"
  }, {
    "left" : "ObjectType dereferenced = type.dereference();",
    "right" : "ObjectType dereferenced = type.dereference();",
    "info" : "VariableDeclarationStatement[25569-25614]:VariableDeclarationStatement[26662-26707]"
  }, {
    "left" : "if (dereferenced != null)",
    "right" : "if (dereferenced != null)",
    "info" : "IfStatement[25621-25685]:IfStatement[26714-26778]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[25647-25685]:Block[26740-26778]"
  }, {
    "left" : "type = dereferenced;",
    "right" : "type = dereferenced;",
    "info" : "ExpressionStatement[25657-25677]:ExpressionStatement[26750-26770]"
  }, {
    "left" : "String qualifiedName = n.getQualifiedName();",
    "right" : "String qualifiedName = n.getQualifiedName();",
    "info" : "VariableDeclarationStatement[25697-25741]:VariableDeclarationStatement[26790-26834]"
  }, {
    "left" : "if (type.isFunctionPrototypeType() ||\n        (type.toObjectType() != null &&\n         type.toObjectType().getConstructor() != null))",
    "right" : "if (type.isFunctionPrototypeType() ||\n        (type.toObjectType() != null &&\n         type.toObjectType().getConstructor() != null))",
    "info" : "IfStatement[25746-26144]:IfStatement[26839-27237]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[25880-25917]:Block[26973-27010]"
  }, {
    "left" : "return type.toString();",
    "right" : "return type.toString();",
    "info" : "ReturnStatement[25888-25911]:ReturnStatement[26981-27004]"
  }, {
    "left" : "if (qualifiedName != null)",
    "right" : "if (qualifiedName != null)",
    "info" : "IfStatement[25923-26144]:IfStatement[27016-27237]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[25950-25985]:Block[27043-27078]"
  }, {
    "left" : "return qualifiedName;",
    "right" : "return qualifiedName;",
    "info" : "ReturnStatement[25958-25979]:ReturnStatement[27051-27072]"
  }, {
    "left" : "if (type instanceof FunctionType)",
    "right" : "if (type instanceof FunctionType)",
    "info" : "IfStatement[25991-26144]:IfStatement[27084-27237]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[26025-26101]:Block[27118-27194]"
  }, {
    "left" : "return \"function\";",
    "right" : "return \"function\";",
    "info" : "ReturnStatement[26077-26095]:ReturnStatement[27170-27188]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[26107-26144]:Block[27200-27237]"
  }, {
    "left" : "return type.toString();",
    "right" : "return type.toString();",
    "info" : "ReturnStatement[26115-26138]:ReturnStatement[27208-27231]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[26258-26265]:Modifier[27351-27358]"
  }, {
    "left" : "JSType",
    "right" : "JSType",
    "info" : "SimpleType[26266-26272]:SimpleType[27359-27365]"
  }, {
    "left" : "getJSType",
    "right" : "getJSType",
    "info" : "SimpleName[26273-26282]:SimpleName[27366-27375]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[26283-26289]:SingleVariableDeclaration[27376-27382]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[26291-26713]:Block[27384-27806]"
  }, {
    "left" : "JSType jsType = n.getJSType();",
    "right" : "JSType jsType = n.getJSType();",
    "info" : "VariableDeclarationStatement[26297-26327]:VariableDeclarationStatement[27390-27420]"
  }, {
    "left" : "if (jsType == null)",
    "right" : "if (jsType == null)",
    "info" : "IfStatement[26332-26709]:IfStatement[27425-27802]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[26352-26675]:Block[27445-27768]"
  }, {
    "left" : "return getNativeType(UNKNOWN_TYPE);",
    "right" : "return getNativeType(UNKNOWN_TYPE);",
    "info" : "ReturnStatement[26634-26669]:ReturnStatement[27727-27762]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[26681-26709]:Block[27774-27802]"
  }, {
    "left" : "return jsType;",
    "right" : "return jsType;",
    "info" : "ReturnStatement[26689-26703]:ReturnStatement[27782-27796]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[26717-26724]:Modifier[27810-27817]"
  }, {
    "left" : "JSType",
    "right" : "JSType",
    "info" : "SimpleType[26725-26731]:SimpleType[27818-27824]"
  }, {
    "left" : "getNativeType",
    "right" : "getNativeType",
    "info" : "SimpleName[26732-26745]:SimpleName[27825-27838]"
  }, {
    "left" : "JSTypeNative typeId",
    "right" : "JSTypeNative typeId",
    "info" : "SingleVariableDeclaration[26746-26765]:SingleVariableDeclaration[27839-27858]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[26767-26819]:Block[27860-27912]"
  }, {
    "left" : "return typeRegistry.getNativeType(typeId);",
    "right" : "return typeRegistry.getNativeType(typeId);",
    "info" : "ReturnStatement[26773-26815]:ReturnStatement[27866-27908]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[27045-27051]:Modifier[28138-28144]"
  }, {
    "left" : "class",
    "right" : "class",
    "info" : "TYPE_DECLARATION_KIND[27052-27057]:TYPE_DECLARATION_KIND[28145-28150]"
  }, {
    "left" : "TypeMismatch",
    "right" : "TypeMismatch",
    "info" : "SimpleName[27301-27313]:SimpleName[28394-28406]"
  }, {
    "left" : "JSType a",
    "right" : "JSType a",
    "info" : "SingleVariableDeclaration[27314-27322]:SingleVariableDeclaration[28407-28415]"
  }, {
    "left" : "JSType b",
    "right" : "JSType b",
    "info" : "SingleVariableDeclaration[27324-27332]:SingleVariableDeclaration[28417-28425]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[27334-27385]:Block[28427-28478]"
  }, {
    "left" : "this.typeA = a;",
    "right" : "this.typeA = a;",
    "info" : "ExpressionStatement[27342-27357]:ExpressionStatement[28435-28450]"
  }, {
    "left" : "this.typeB = b;",
    "right" : "this.typeB = b;",
    "info" : "ExpressionStatement[27364-27379]:ExpressionStatement[28457-28472]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[27391-27400]:MarkerAnnotation[28484-28493]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[27401-27407]:Modifier[28494-28500]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[27408-27415]:PrimitiveType[28501-28508]"
  }, {
    "left" : "equals",
    "right" : "equals",
    "info" : "SimpleName[27416-27422]:SimpleName[28509-28515]"
  }, {
    "left" : "Object object",
    "right" : "Object object",
    "info" : "SingleVariableDeclaration[27423-27436]:SingleVariableDeclaration[28516-28529]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[27438-27729]:Block[28531-28822]"
  }, {
    "left" : "if (object instanceof TypeMismatch)",
    "right" : "if (object instanceof TypeMismatch)",
    "info" : "IfStatement[27446-27703]:IfStatement[28539-28796]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[27482-27703]:Block[28575-28796]"
  }, {
    "left" : "TypeMismatch that = (TypeMismatch) object;",
    "right" : "TypeMismatch that = (TypeMismatch) object;",
    "info" : "VariableDeclarationStatement[27492-27534]:VariableDeclarationStatement[28585-28627]"
  }, {
    "left" : "return (that.typeA.equals(this.typeA) && that.typeB.equals(this.typeB))\n            || (that.typeB.equals(this.typeA) && that.typeA.equals(this.typeB));",
    "right" : "return (that.typeA.equals(this.typeA) && that.typeB.equals(this.typeB))\n            || (that.typeB.equals(this.typeA) && that.typeA.equals(this.typeB));",
    "info" : "ReturnStatement[27543-27695]:ReturnStatement[28636-28788]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[27710-27723]:ReturnStatement[28803-28816]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[27735-27744]:MarkerAnnotation[28828-28837]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[27745-27751]:Modifier[28838-28844]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[27752-27755]:PrimitiveType[28845-28848]"
  }, {
    "left" : "hashCode",
    "right" : "hashCode",
    "info" : "SimpleName[27756-27764]:SimpleName[28849-28857]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[27767-27819]:Block[28860-28912]"
  }, {
    "left" : "return Objects.hashCode(typeA, typeB);",
    "right" : "return Objects.hashCode(typeA, typeB);",
    "info" : "ReturnStatement[27775-27813]:ReturnStatement[28868-28906]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[27825-27834]:MarkerAnnotation[28918-28927]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[27835-27841]:Modifier[28928-28934]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[27842-27848]:SimpleType[28935-28941]"
  }, {
    "left" : "toString",
    "right" : "toString",
    "info" : "SimpleName[27849-27857]:SimpleName[28942-28950]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[27860-27914]:Block[28953-29007]"
  }, {
    "left" : "return \"(\" + typeA + \", \" + typeB + \")\";",
    "right" : "return \"(\" + typeA + \", \" + typeB + \")\";",
    "info" : "ReturnStatement[27868-27908]:ReturnStatement[28961-29001]"
  } ]
}