{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "private static final Logger LOG = LoggerFactory.getLogger(AnalystWorker.class);",
      "right" : "private static final Logger LOG = LoggerFactory.getLogger(AnalystWorker.class);",
      "info" : "FieldDeclaration[2269-2348]:FieldDeclaration[2913-2992]"
    }, {
      "left" : "public static final String WORKER_ID_HEADER = \"X-Worker-Id\";",
      "right" : "public static final String WORKER_ID_HEADER = \"X-Worker-Id\";",
      "info" : "FieldDeclaration[2354-2414]:FieldDeclaration[2998-3058]"
    }, {
      "left" : "public static final int POLL_TIMEOUT = 10 * 1000;",
      "right" : "public static final int POLL_TIMEOUT = 10 * 1000;",
      "info" : "FieldDeclaration[2420-2469]:FieldDeclaration[3064-3113]"
    }, {
      "left" : "public final boolean autoShutdown;",
      "right" : "public final boolean autoShutdown;",
      "info" : "FieldDeclaration[2475-2563]:FieldDeclaration[3119-3207]"
    }, {
      "left" : "public static final Random random = new Random();",
      "right" : "public static final Random random = new Random();",
      "info" : "FieldDeclaration[2569-2618]:FieldDeclaration[3213-3262]"
    }, {
      "left" : "private TaskStatisticsStore statsStore;",
      "right" : "private TaskStatisticsStore statsStore;",
      "info" : "FieldDeclaration[2624-2663]:FieldDeclaration[3268-3307]"
    }, {
      "left" : "ObjectMapper objectMapper;",
      "right" : "ObjectMapper objectMapper;",
      "info" : "FieldDeclaration[2669-2695]:FieldDeclaration[3313-3339]"
    }, {
      "left" : "String BROKER_BASE_URL = \"http://localhost:9001\";",
      "right" : "String BROKER_BASE_URL = \"http://localhost:9001\";",
      "info" : "FieldDeclaration[2701-2750]:FieldDeclaration[3345-3394]"
    }, {
      "left" : "static final HttpClient httpClient;",
      "right" : "static final HttpClient httpClient;",
      "info" : "FieldDeclaration[2794-2829]:FieldDeclaration[3400-3435]"
    }, {
      "left" : "private Cache<String, RaptorWorkerData> workerDataCache = CacheBuilder.newBuilder()\n            .maximumSize(200)\n            .build();",
      "right" : "private Cache<String, RaptorWorkerData> workerDataCache = CacheBuilder.newBuilder()\n            .maximumSize(200)\n            .build();",
      "info" : "FieldDeclaration[2835-3009]:FieldDeclaration[3441-3615]"
    }, {
      "left" : "ClusterGraphBuilder clusterGraphBuilder;",
      "right" : "ClusterGraphBuilder clusterGraphBuilder;",
      "info" : "FieldDeclaration[3717-3757]:FieldDeclaration[4168-4208]"
    }, {
      "left" : "PointSetDatastore pointSetDatastore;",
      "right" : "PointSetDatastore pointSetDatastore;",
      "info" : "FieldDeclaration[3859-3895]:FieldDeclaration[4310-4346]"
    }, {
      "left" : "AmazonS3 s3;",
      "right" : "AmazonS3 s3;",
      "info" : "FieldDeclaration[3959-3971]:FieldDeclaration[4410-4422]"
    }, {
      "left" : "String graphId = null;",
      "right" : "String graphId = null;",
      "info" : "FieldDeclaration[3977-3999]:FieldDeclaration[4428-4450]"
    }, {
      "left" : "long startupTime, nextShutdownCheckTime;",
      "right" : "long startupTime, nextShutdownCheckTime;",
      "info" : "FieldDeclaration[4004-4044]:FieldDeclaration[4455-4495]"
    }, {
      "left" : "Region awsRegion = Region.getRegion(Regions.US_EAST_1);",
      "right" : "Region awsRegion = Region.getRegion(Regions.US_EAST_1);",
      "info" : "FieldDeclaration[4116-4171]:FieldDeclaration[4567-4622]"
    }, {
      "left" : "private String instanceType;",
      "right" : "private String instanceType;",
      "info" : "FieldDeclaration[4177-4265]:FieldDeclaration[4628-4716]"
    }, {
      "left" : "boolean isSinglePoint = false;",
      "right" : "boolean isSinglePoint = false;",
      "info" : "FieldDeclaration[4844-4874]:FieldDeclaration[4722-4752]"
    }, {
      "left" : "public AnalystWorker(Properties config)",
      "right" : "public AnalystWorker(Properties config)",
      "info" : "MethodDeclaration[4880-8072]:MethodDeclaration[4758-7950]"
    }, {
      "left" : "public void run()",
      "right" : "public void run()",
      "info" : "MethodDeclaration[8078-9497]:MethodDeclaration[7956-9375]"
    }, {
      "left" : "private void handleOneRequest(AnalystClusterRequest clusterRequest)",
      "right" : "private void handleOneRequest(AnalystClusterRequest clusterRequest)",
      "info" : "MethodDeclaration[9503-16270]:MethodDeclaration[9381-16148]"
    }, {
      "left" : "public List<AnalystClusterRequest> getSomeWork()",
      "right" : "public List<AnalystClusterRequest> getSomeWork()",
      "info" : "MethodDeclaration[16276-17821]:MethodDeclaration[16154-17700]"
    }, {
      "left" : "public void finishPriorityTask(AnalystClusterRequest clusterRequest, Object result)",
      "right" : "public void finishPriorityTask(AnalystClusterRequest clusterRequest, Object result)",
      "info" : "MethodDeclaration[17827-19447]:MethodDeclaration[17706-19326]"
    }, {
      "left" : "public void deleteRequest(AnalystClusterRequest clusterRequest)",
      "right" : "public void deleteRequest(AnalystClusterRequest clusterRequest)",
      "info" : "MethodDeclaration[19453-20484]:MethodDeclaration[19332-20363]"
    }, {
      "left" : "public String getInstanceType ()",
      "right" : "public String getInstanceType ()",
      "info" : "MethodDeclaration[20490-21622]:MethodDeclaration[20369-21501]"
    }, {
      "left" : "public static void main(String[] args)",
      "right" : "public static void main(String[] args)",
      "info" : "MethodDeclaration[21628-22911]:MethodDeclaration[21507-22790]"
    }, {
      "left" : "WorkerIdDefiner",
      "right" : "AnalystWorker",
      "info" : "TypeDeclaration[22917-23381]:TypeDeclaration[2156-22792]"
    } ],
    "mappings" : [
 {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[2215-2221]:Modifier[2167-2173]"
    }, {
      "left" : "AnalystWorker",
      "right" : "AnalystWorker",
      "info" : "SimpleName[2228-2241]:SimpleName[2180-2193]"
    }, {
      "left" : "Runnable",
      "right" : "Runnable",
      "info" : "SimpleType[2253-2261]:SimpleType[2205-2213]"
    }, {
      "left" : "static {\n        PoolingHttpClientConnectionManager mgr = new PoolingHttpClientConnectionManager();\n        mgr.setDefaultMaxPerRoute(20);\n\n        int timeout = 10 * 1000;\n        SocketConfig cfg = SocketConfig.custom()\n                .setSoTimeout(timeout)\n                .build();\n        mgr.setDefaultSocketConfig(cfg);\n\n        httpClient = HttpClients.custom()\n                .setConnectionManager(mgr)\n                .build();\n    }",
      "right" : "static {\n        PoolingHttpClientConnectionManager mgr = new PoolingHttpClientConnectionManager();\n        mgr.setDefaultMaxPerRoute(20);\n\n        int timeout = 10 * 1000;\n        SocketConfig cfg = SocketConfig.custom()\n                .setSoTimeout(timeout)\n                .build();\n        mgr.setDefaultSocketConfig(cfg);\n\n        httpClient = HttpClients.custom()\n                .setConnectionManager(mgr)\n                .build();\n    }",
      "info" : "Initializer[3015-3460]:Initializer[3621-4066]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3022-3460]:Block[3628-4066]"
    }, {
      "left" : "PoolingHttpClientConnectionManager mgr = new PoolingHttpClientConnectionManager();",
      "right" : "PoolingHttpClientConnectionManager mgr = new PoolingHttpClientConnectionManager();",
      "info" : "VariableDeclarationStatement[3032-3114]:VariableDeclarationStatement[3638-3720]"
    }, {
      "left" : "mgr.setDefaultMaxPerRoute(20);",
      "right" : "mgr.setDefaultMaxPerRoute(20);",
      "info" : "ExpressionStatement[3123-3153]:ExpressionStatement[3729-3759]"
    }, {
      "left" : "int timeout = 10 * 1000;",
      "right" : "int timeout = 10 * 1000;",
      "info" : "VariableDeclarationStatement[3163-3187]:VariableDeclarationStatement[3769-3793]"
    }, {
      "left" : "SocketConfig cfg = SocketConfig.custom()\n                .setSoTimeout(timeout)\n                .build();",
      "right" : "SocketConfig cfg = SocketConfig.custom()\n                .setSoTimeout(timeout)\n                .build();",
      "info" : "VariableDeclarationStatement[3196-3301]:VariableDeclarationStatement[3802-3907]"
    }, {
      "left" : "mgr.setDefaultSocketConfig(cfg);",
      "right" : "mgr.setDefaultSocketConfig(cfg);",
      "info" : "ExpressionStatement[3310-3342]:ExpressionStatement[3916-3948]"
    }, {
      "left" : "httpClient = HttpClients.custom()\n                .setConnectionManager(mgr)\n                .build();",
      "right" : "httpClient = HttpClients.custom()\n                .setConnectionManager(mgr)\n                .build();",
      "info" : "ExpressionStatement[3352-3454]:ExpressionStatement[3958-4060]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[3480-3486]:SimpleType[2839-2845]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[4750-4756]:Modifier[2819-2825]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[4757-4763]:Modifier[2826-2832]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[4764-4769]:Modifier[2833-2838]"
    }, {
      "left" : "machineId = UUID.randomUUID().toString().replaceAll(\"-\", \"\")",
      "right" : "machineId = UUID.randomUUID().toString().replaceAll(\"-\", \"\")",
      "info" : "VariableDeclarationFragment[4777-4837]:VariableDeclarationFragment[2846-2906]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[4880-4886]:Modifier[4758-4764]"
    }, {
      "left" : "AnalystWorker",
      "right" : "AnalystWorker",
      "info" : "SimpleName[4887-4900]:SimpleName[4765-4778]"
    }, {
      "left" : "Properties config",
      "right" : "Properties config",
      "info" : "SingleVariableDeclaration[4901-4918]:SingleVariableDeclaration[4779-4796]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4920-8072]:Block[4798-7950]"
    }, {
      "left" : "String statsQueue = config.getProperty(\"statistics-queue\");",
      "right" : "String statsQueue = config.getProperty(\"statistics-queue\");",
      "info" : "VariableDeclarationStatement[5000-5059]:VariableDeclarationStatement[4878-4937]"
    }, {
      "left" : "if (statsQueue != null)",
      "right" : "if (statsQueue != null)",
      "info" : "IfStatement[5068-5261]:IfStatement[4946-5139]"
    }, {
      "left" : "this.statsStore = new SQSTaskStatisticsStore(statsQueue);",
      "right" : "this.statsStore = new SQSTaskStatisticsStore(statsQueue);",
      "info" : "ExpressionStatement[5104-5161]:ExpressionStatement[4982-5039]"
    }, {
      "left" : "this.statsStore = s -> {};",
      "right" : "this.statsStore = s -> {};",
      "info" : "ExpressionStatement[5235-5261]:ExpressionStatement[5113-5139]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5258-5260]:Block[5136-5138]"
    }, {
      "left" : "String addr = config.getProperty(\"broker-address\");",
      "right" : "String addr = config.getProperty(\"broker-address\");",
      "info" : "VariableDeclarationStatement[5271-5322]:VariableDeclarationStatement[5149-5200]"
    }, {
      "left" : "String port = config.getProperty(\"broker-port\");",
      "right" : "String port = config.getProperty(\"broker-port\");",
      "info" : "VariableDeclarationStatement[5331-5379]:VariableDeclarationStatement[5209-5257]"
    }, {
      "left" : "if (addr != null)",
      "right" : "if (addr != null)",
      "info" : "IfStatement[5389-5620]:IfStatement[5267-5498]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5407-5620]:Block[5285-5498]"
    }, {
      "left" : "if (port != null)",
      "right" : "if (port != null)",
      "info" : "IfStatement[5421-5610]:IfStatement[5299-5488]"
    }, {
      "left" : "this.BROKER_BASE_URL = String.format(\"http://%s:%s\", addr, port);",
      "right" : "this.BROKER_BASE_URL = String.format(\"http://%s:%s\", addr, port);",
      "info" : "ExpressionStatement[5455-5520]:ExpressionStatement[5333-5398]"
    }, {
      "left" : "this.BROKER_BASE_URL = String.format(\"http://%s\", addr);",
      "right" : "this.BROKER_BASE_URL = String.format(\"http://%s\", addr);",
      "info" : "ExpressionStatement[5554-5610]:ExpressionStatement[5432-5488]"
    }, {
      "left" : "this.graphId = config.getProperty(\"initial-graph-id\");",
      "right" : "this.graphId = config.getProperty(\"initial-graph-id\");",
      "info" : "ExpressionStatement[5929-5983]:ExpressionStatement[5807-5861]"
    }, {
      "left" : "this.pointSetDatastore = new PointSetDatastore(10, null, false, config.getProperty(\"pointsets-bucket\"));",
      "right" : "this.pointSetDatastore = new PointSetDatastore(10, null, false, config.getProperty(\"pointsets-bucket\"));",
      "info" : "ExpressionStatement[5993-6097]:ExpressionStatement[5871-5975]"
    }, {
      "left" : "this.clusterGraphBuilder = new ClusterGraphBuilder(config.getProperty(\"graphs-bucket\"));",
      "right" : "this.clusterGraphBuilder = new ClusterGraphBuilder(config.getProperty(\"graphs-bucket\"));",
      "info" : "ExpressionStatement[6106-6194]:ExpressionStatement[5984-6072]"
    }, {
      "left" : "Boolean autoShutdown = Boolean.parseBoolean(config.getProperty(\"auto-shutdown\"));",
      "right" : "Boolean autoShutdown = Boolean.parseBoolean(config.getProperty(\"auto-shutdown\"));",
      "info" : "VariableDeclarationStatement[6204-6285]:VariableDeclarationStatement[6082-6163]"
    }, {
      "left" : "this.autoShutdown = autoShutdown == null ? false : autoShutdown;",
      "right" : "this.autoShutdown = autoShutdown == null ? false : autoShutdown;",
      "info" : "ExpressionStatement[6294-6358]:ExpressionStatement[6172-6236]"
    }, {
      "left" : "startupTime = System.currentTimeMillis();",
      "right" : "startupTime = System.currentTimeMillis();",
      "info" : "ExpressionStatement[6470-6511]:ExpressionStatement[6348-6389]"
    }, {
      "left" : "nextShutdownCheckTime = startupTime + 55 * 60 * 1000;",
      "right" : "nextShutdownCheckTime = startupTime + 55 * 60 * 1000;",
      "info" : "ExpressionStatement[6520-6573]:ExpressionStatement[6398-6451]"
    }, {
      "left" : "s3 = new AmazonS3Client();",
      "right" : "s3 = new AmazonS3Client();",
      "info" : "ExpressionStatement[6939-6965]:ExpressionStatement[6817-6843]"
    }, {
      "left" : "s3.setRegion(awsRegion);",
      "right" : "s3.setRegion(awsRegion);",
      "info" : "ExpressionStatement[6974-6998]:ExpressionStatement[6852-6876]"
    }, {
      "left" : "objectMapper = new ObjectMapper();",
      "right" : "objectMapper = new ObjectMapper();",
      "info" : "ExpressionStatement[7060-7094]:ExpressionStatement[6938-6972]"
    }, {
      "left" : "objectMapper.configure(JsonParser.Feature.ALLOW_COMMENTS, true);",
      "right" : "objectMapper.configure(JsonParser.Feature.ALLOW_COMMENTS, true);",
      "info" : "ExpressionStatement[7103-7167]:ExpressionStatement[6981-7045]"
    }, {
      "left" : "objectMapper.configure(JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES, true);",
      "right" : "objectMapper.configure(JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES, true);",
      "info" : "ExpressionStatement[7176-7252]:ExpressionStatement[7054-7130]"
    }, {
      "left" : "objectMapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);",
      "right" : "objectMapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);",
      "info" : "ExpressionStatement[7261-7342]:ExpressionStatement[7139-7220]"
    }, {
      "left" : "objectMapper.registerModule(AgencyAndIdSerializer.makeModule());",
      "right" : "objectMapper.registerModule(AgencyAndIdSerializer.makeModule());",
      "info" : "ExpressionStatement[7511-7575]:ExpressionStatement[7389-7453]"
    }, {
      "left" : "objectMapper.registerModule(QualifiedModeSetSerializer.makeModule());",
      "right" : "objectMapper.registerModule(QualifiedModeSetSerializer.makeModule());",
      "info" : "ExpressionStatement[7641-7710]:ExpressionStatement[7519-7588]"
    }, {
      "left" : "objectMapper.registerModule(JodaLocalDateSerializer.makeModule());",
      "right" : "objectMapper.registerModule(JodaLocalDateSerializer.makeModule());",
      "info" : "ExpressionStatement[7767-7833]:ExpressionStatement[7645-7711]"
    }, {
      "left" : "objectMapper.registerModule(TraverseModeSetSerializer.makeModule());",
      "right" : "objectMapper.registerModule(TraverseModeSetSerializer.makeModule());",
      "info" : "ExpressionStatement[7896-7964]:ExpressionStatement[7774-7842]"
    }, {
      "left" : "objectMapper.registerModule(new GeoJsonModule());",
      "right" : "objectMapper.registerModule(new GeoJsonModule());",
      "info" : "ExpressionStatement[7974-8023]:ExpressionStatement[7852-7901]"
    }, {
      "left" : "instanceType = getInstanceType();",
      "right" : "instanceType = getInstanceType();",
      "info" : "ExpressionStatement[8033-8066]:ExpressionStatement[7911-7944]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[8078-8087]:MarkerAnnotation[7956-7965]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[8092-8098]:Modifier[7970-7976]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[8099-8103]:PrimitiveType[7977-7981]"
    }, {
      "left" : "run",
      "right" : "run",
      "info" : "SimpleName[8104-8107]:SimpleName[7982-7985]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8110-9497]:Block[7988-9375]"
    }, {
      "left" : "boolean idle = false;",
      "right" : "boolean idle = false;",
      "info" : "VariableDeclarationStatement[8210-8231]:VariableDeclarationStatement[8088-8109]"
    }, {
      "left" : "while (true)",
      "right" : "while (true)",
      "info" : "WhileStatement[8240-9491]:WhileStatement[8118-9369]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8253-9491]:Block[8131-9369]"
    }, {
      "left" : "if (System.currentTimeMillis() > nextShutdownCheckTime && autoShutdown)",
      "right" : "if (System.currentTimeMillis() > nextShutdownCheckTime && autoShutdown)",
      "info" : "IfStatement[8331-8884]:IfStatement[8209-8762]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8403-8884]:Block[8281-8762]"
    }, {
      "left" : "if (idle)",
      "right" : "if (idle)",
      "info" : "IfStatement[8421-8813]:IfStatement[8299-8691]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8431-8813]:Block[8309-8691]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[8453-8795]:TryStatement[8331-8673]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8457-8632]:Block[8335-8510]"
    }, {
      "left" : "Process process = new ProcessBuilder(\"sudo\", \"/sbin/shutdown\", \"-h\", \"now\").start();",
      "right" : "Process process = new ProcessBuilder(\"sudo\", \"/sbin/shutdown\", \"-h\", \"now\").start();",
      "info" : "VariableDeclarationStatement[8483-8567]:VariableDeclarationStatement[8361-8445]"
    }, {
      "left" : "process.waitFor();",
      "right" : "process.waitFor();",
      "info" : "ExpressionStatement[8592-8610]:ExpressionStatement[8470-8488]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8654-8723]:Block[8532-8601]"
    }, {
      "left" : "ex.printStackTrace();",
      "right" : "ex.printStackTrace();",
      "info" : "ExpressionStatement[8680-8701]:ExpressionStatement[8558-8579]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8732-8795]:Block[8610-8673]"
    }, {
      "left" : "System.exit(0);",
      "right" : "System.exit(0);",
      "info" : "ExpressionStatement[8758-8773]:ExpressionStatement[8636-8651]"
    }, {
      "left" : "nextShutdownCheckTime += 60 * 60 * 1000;",
      "right" : "nextShutdownCheckTime += 60 * 60 * 1000;",
      "info" : "ExpressionStatement[8830-8870]:ExpressionStatement[8708-8748]"
    }, {
      "left" : "LOG.info(\"Long-polling for work ({} second timeout).\", POLL_TIMEOUT / 1000.0);",
      "right" : "LOG.info(\"Long-polling for work ({} second timeout).\", POLL_TIMEOUT / 1000.0);",
      "info" : "ExpressionStatement[8897-8975]:ExpressionStatement[8775-8853]"
    }, {
      "left" : "List<AnalystClusterRequest> tasks = getSomeWork();",
      "right" : "List<AnalystClusterRequest> tasks = getSomeWork();",
      "info" : "VariableDeclarationStatement[9175-9225]:VariableDeclarationStatement[9053-9103]"
    }, {
      "left" : "if (tasks == null)",
      "right" : "if (tasks == null)",
      "info" : "IfStatement[9238-9387]:IfStatement[9116-9265]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9257-9387]:Block[9135-9265]"
    }, {
      "left" : "LOG.info(\"Didn't get any work. Retrying.\");",
      "right" : "LOG.info(\"Didn't get any work. Retrying.\");",
      "info" : "ExpressionStatement[9275-9318]:ExpressionStatement[9153-9196]"
    }, {
      "left" : "idle = true;",
      "right" : "idle = true;",
      "info" : "ExpressionStatement[9335-9347]:ExpressionStatement[9213-9225]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[9364-9373]:ContinueStatement[9242-9251]"
    }, {
      "left" : "tasks.parallelStream().forEach(this::handleOneRequest);",
      "right" : "tasks.parallelStream().forEach(this::handleOneRequest);",
      "info" : "ExpressionStatement[9400-9455]:ExpressionStatement[9278-9333]"
    }, {
      "left" : "idle = false;",
      "right" : "idle = false;",
      "info" : "ExpressionStatement[9468-9481]:ExpressionStatement[9346-9359]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[9503-9510]:Modifier[9381-9388]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[9511-9515]:PrimitiveType[9389-9393]"
    }, {
      "left" : "handleOneRequest",
      "right" : "handleOneRequest",
      "info" : "SimpleName[9516-9532]:SimpleName[9394-9410]"
    }, {
      "left" : "AnalystClusterRequest clusterRequest",
      "right" : "AnalystClusterRequest clusterRequest",
      "info" : "SingleVariableDeclaration[9533-9569]:SingleVariableDeclaration[9411-9447]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9571-16270]:Block[9449-16148]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[9581-16263]:TryStatement[9459-16141]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9585-16118]:Block[9463-15996]"
    }, {
      "left" : "long startTime = System.currentTimeMillis();",
      "right" : "long startTime = System.currentTimeMillis();",
      "info" : "VariableDeclarationStatement[9599-9643]:VariableDeclarationStatement[9477-9521]"
    }, {
      "left" : "LOG.info(\"Handling message {}\", clusterRequest.toString());",
      "right" : "LOG.info(\"Handling message {}\", clusterRequest.toString());",
      "info" : "ExpressionStatement[9656-9715]:ExpressionStatement[9534-9593]"
    }, {
      "left" : "TaskStatistics ts = new TaskStatistics();",
      "right" : "TaskStatistics ts = new TaskStatistics();",
      "info" : "VariableDeclarationStatement[9729-9770]:VariableDeclarationStatement[9607-9648]"
    }, {
      "left" : "ts.pointsetId = clusterRequest.destinationPointsetId;",
      "right" : "ts.pointsetId = clusterRequest.destinationPointsetId;",
      "info" : "ExpressionStatement[9783-9836]:ExpressionStatement[9661-9714]"
    }, {
      "left" : "ts.graphId = clusterRequest.graphId;",
      "right" : "ts.graphId = clusterRequest.graphId;",
      "info" : "ExpressionStatement[9849-9885]:ExpressionStatement[9727-9763]"
    }, {
      "left" : "ts.awsInstanceType = instanceType;",
      "right" : "ts.awsInstanceType = instanceType;",
      "info" : "ExpressionStatement[9898-9932]:ExpressionStatement[9776-9810]"
    }, {
      "left" : "ts.jobId = clusterRequest.jobId;",
      "right" : "ts.jobId = clusterRequest.jobId;",
      "info" : "ExpressionStatement[9945-9977]:ExpressionStatement[9823-9855]"
    }, {
      "left" : "ts.workerId = machineId;",
      "right" : "ts.workerId = machineId;",
      "info" : "ExpressionStatement[9990-10014]:ExpressionStatement[9868-9892]"
    }, {
      "left" : "ts.single = clusterRequest.outputLocation == null;",
      "right" : "ts.single = clusterRequest.outputLocation == null;",
      "info" : "ExpressionStatement[10027-10077]:ExpressionStatement[9905-9955]"
    }, {
      "left" : "long graphStartTime = System.currentTimeMillis();",
      "right" : "long graphStartTime = System.currentTimeMillis();",
      "info" : "VariableDeclarationStatement[10091-10140]:VariableDeclarationStatement[9969-10018]"
    }, {
      "left" : "Graph graph = clusterGraphBuilder.getGraph(clusterRequest.graphId);",
      "right" : "Graph graph = clusterGraphBuilder.getGraph(clusterRequest.graphId);",
      "info" : "VariableDeclarationStatement[10415-10482]:VariableDeclarationStatement[10293-10360]"
    }, {
      "left" : "graphId = clusterRequest.graphId;",
      "right" : "graphId = clusterRequest.graphId;",
      "info" : "ExpressionStatement[10495-10528]:ExpressionStatement[10373-10406]"
    }, {
      "left" : "ts.graphBuild = (int) (System.currentTimeMillis() - graphStartTime);",
      "right" : "ts.graphBuild = (int) (System.currentTimeMillis() - graphStartTime);",
      "info" : "ExpressionStatement[10613-10681]:ExpressionStatement[10491-10559]"
    }, {
      "left" : "ts.graphTripCount = graph.index.patternForTrip.size();",
      "right" : "ts.graphTripCount = graph.index.patternForTrip.size();",
      "info" : "ExpressionStatement[10695-10749]:ExpressionStatement[10573-10627]"
    }, {
      "left" : "ts.graphStopCount = graph.index.stopForId.size();",
      "right" : "ts.graphStopCount = graph.index.stopForId.size();",
      "info" : "ExpressionStatement[10762-10811]:ExpressionStatement[10640-10689]"
    }, {
      "left" : "ResultEnvelope envelope = new ResultEnvelope();",
      "right" : "ResultEnvelope envelope = new ResultEnvelope();",
      "info" : "VariableDeclarationStatement[10932-10979]:VariableDeclarationStatement[10810-10857]"
    }, {
      "left" : "if (clusterRequest.profileRequest != null)",
      "right" : "if (clusterRequest.profileRequest != null)",
      "info" : "IfStatement[10992-14622]:IfStatement[10870-14500]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11035-14381]:Block[10913-14259]"
    }, {
      "left" : "ts.lon = clusterRequest.profileRequest.fromLon;",
      "right" : "ts.lon = clusterRequest.profileRequest.fromLon;",
      "info" : "ExpressionStatement[11053-11100]:ExpressionStatement[10931-10978]"
    }, {
      "left" : "ts.lat = clusterRequest.profileRequest.fromLat;",
      "right" : "ts.lat = clusterRequest.profileRequest.fromLat;",
      "info" : "ExpressionStatement[11117-11164]:ExpressionStatement[10995-11042]"
    }, {
      "left" : "RepeatedRaptorProfileRouter router;",
      "right" : "RepeatedRaptorProfileRouter router;",
      "info" : "VariableDeclarationStatement[11183-11218]:VariableDeclarationStatement[11061-11096]"
    }, {
      "left" : "boolean isochrone = clusterRequest.destinationPointsetId == null;",
      "right" : "boolean isochrone = clusterRequest.destinationPointsetId == null;",
      "info" : "VariableDeclarationStatement[11236-11301]:VariableDeclarationStatement[11114-11179]"
    }, {
      "left" : "ts.isochrone = isochrone;",
      "right" : "ts.isochrone = isochrone;",
      "info" : "ExpressionStatement[11318-11343]:ExpressionStatement[11196-11221]"
    }, {
      "left" : "if (!isochrone)",
      "right" : "if (!isochrone)",
      "info" : "IfStatement[11360-13047]:IfStatement[11238-12925]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11376-12493]:Block[11254-12371]"
    }, {
      "left" : "PointSet pointSet = pointSetDatastore.get(clusterRequest.destinationPointsetId);",
      "right" : "PointSet pointSet = pointSetDatastore.get(clusterRequest.destinationPointsetId);",
      "info" : "VariableDeclarationStatement[11604-11684]:VariableDeclarationStatement[11482-11562]"
    }, {
      "left" : "SampleSet sampleSet = pointSet.getOrCreateSampleSet(graph);",
      "right" : "SampleSet sampleSet = pointSet.getOrCreateSampleSet(graph);",
      "info" : "VariableDeclarationStatement[11771-11830]:VariableDeclarationStatement[11649-11708]"
    }, {
      "left" : "router =\n                            new RepeatedRaptorProfileRouter(graph, clusterRequest.profileRequest, sampleSet);",
      "right" : "router =\n                            new RepeatedRaptorProfileRouter(graph, clusterRequest.profileRequest, sampleSet);",
      "info" : "ExpressionStatement[11851-11969]:ExpressionStatement[11729-11847]"
    }, {
      "left" : "if (clusterRequest.outputLocation != null)",
      "right" : "if (clusterRequest.outputLocation != null)",
      "info" : "IfStatement[12063-12475]:IfStatement[11941-12353]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12106-12475]:Block[11984-12353]"
    }, {
      "left" : "router.raptorWorkerData = workerDataCache.get(clusterRequest.jobId, () -> {\n                            return RepeatedRaptorProfileRouter\n                                    .getRaptorWorkerData(clusterRequest.profileRequest, graph,\n                                            sampleSet, ts);\n                        });",
      "right" : "router.raptorWorkerData = workerDataCache.get(clusterRequest.jobId, () -> {\n                            return RepeatedRaptorProfileRouter\n                                    .getRaptorWorkerData(clusterRequest.profileRequest, graph,\n                                            sampleSet, ts);\n                        });",
      "info" : "ExpressionStatement[12132-12453]:ExpressionStatement[12010-12331]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12206-12451]:Block[12084-12329]"
    }, {
      "left" : "return RepeatedRaptorProfileRouter\n                                    .getRaptorWorkerData(clusterRequest.profileRequest, graph,\n                                            sampleSet, ts);",
      "right" : "return RepeatedRaptorProfileRouter\n                                    .getRaptorWorkerData(clusterRequest.profileRequest, graph,\n                                            sampleSet, ts);",
      "info" : "ReturnStatement[12236-12425]:ReturnStatement[12114-12303]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12499-13047]:Block[12377-12925]"
    }, {
      "left" : "router = new RepeatedRaptorProfileRouter(graph, clusterRequest.profileRequest);",
      "right" : "router = new RepeatedRaptorProfileRouter(graph, clusterRequest.profileRequest);",
      "info" : "ExpressionStatement[12521-12600]:ExpressionStatement[12399-12478]"
    }, {
      "left" : "if (clusterRequest.outputLocation == null)",
      "right" : "if (clusterRequest.outputLocation == null)",
      "info" : "IfStatement[12622-13029]:IfStatement[12500-12907]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12665-13029]:Block[12543-12907]"
    }, {
      "left" : "router.raptorWorkerData = workerDataCache.get(clusterRequest.jobId, () -> {\n                            return RepeatedRaptorProfileRouter\n                                    .getRaptorWorkerData(clusterRequest.profileRequest, graph, null,\n                                            ts);\n                        });",
      "right" : "router.raptorWorkerData = workerDataCache.get(clusterRequest.jobId, () -> {\n                            return RepeatedRaptorProfileRouter\n                                    .getRaptorWorkerData(clusterRequest.profileRequest, graph, null,\n                                            ts);\n                        });",
      "info" : "ExpressionStatement[12691-13007]:ExpressionStatement[12569-12885]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12765-13005]:Block[12643-12883]"
    }, {
      "left" : "return RepeatedRaptorProfileRouter\n                                    .getRaptorWorkerData(clusterRequest.profileRequest, graph, null,\n                                            ts);",
      "right" : "return RepeatedRaptorProfileRouter\n                                    .getRaptorWorkerData(clusterRequest.profileRequest, graph, null,\n                                            ts);",
      "info" : "ReturnStatement[12795-12979]:ReturnStatement[12673-12857]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[13065-14367]:TryStatement[12943-14245]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13069-14207]:Block[12947-14085]"
    }, {
      "left" : "router.route(ts);",
      "right" : "router.route(ts);",
      "info" : "ExpressionStatement[13091-13108]:ExpressionStatement[12969-12986]"
    }, {
      "left" : "long resultSetStart = System.currentTimeMillis();",
      "right" : "long resultSetStart = System.currentTimeMillis();",
      "info" : "VariableDeclarationStatement[13129-13178]:VariableDeclarationStatement[13007-13056]"
    }, {
      "left" : "if (isochrone)",
      "right" : "if (isochrone)",
      "info" : "IfStatement[13200-13916]:IfStatement[13078-13794]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13215-13511]:Block[13093-13389]"
    }, {
      "left" : "envelope.worstCase = new ResultSet(router.timeSurfaceRangeSet.max);",
      "right" : "envelope.worstCase = new ResultSet(router.timeSurfaceRangeSet.max);",
      "info" : "ExpressionStatement[13241-13308]:ExpressionStatement[13119-13186]"
    }, {
      "left" : "envelope.bestCase = new ResultSet(router.timeSurfaceRangeSet.min);",
      "right" : "envelope.bestCase = new ResultSet(router.timeSurfaceRangeSet.min);",
      "info" : "ExpressionStatement[13333-13399]:ExpressionStatement[13211-13277]"
    }, {
      "left" : "envelope.avgCase = new ResultSet(router.timeSurfaceRangeSet.avg);",
      "right" : "envelope.avgCase = new ResultSet(router.timeSurfaceRangeSet.avg);",
      "info" : "ExpressionStatement[13424-13489]:ExpressionStatement[13302-13367]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13517-13916]:Block[13395-13794]"
    }, {
      "left" : "ResultSet.RangeSet results = router\n                                .makeResults(clusterRequest.includeTimes, !isochrone, isochrone);",
      "right" : "ResultSet.RangeSet results = router\n                                .makeResults(clusterRequest.includeTimes, !isochrone, isochrone);",
      "info" : "VariableDeclarationStatement[13543-13676]:VariableDeclarationStatement[13421-13554]"
    }, {
      "left" : "envelope.bestCase = results.min;",
      "right" : "envelope.bestCase = results.min;",
      "info" : "ExpressionStatement[13748-13780]:ExpressionStatement[13626-13658]"
    }, {
      "left" : "envelope.avgCase = results.avg;",
      "right" : "envelope.avgCase = results.avg;",
      "info" : "ExpressionStatement[13805-13836]:ExpressionStatement[13683-13714]"
    }, {
      "left" : "envelope.worstCase = results.max;",
      "right" : "envelope.worstCase = results.max;",
      "info" : "ExpressionStatement[13861-13894]:ExpressionStatement[13739-13772]"
    }, {
      "left" : "envelope.id = clusterRequest.id;",
      "right" : "envelope.id = clusterRequest.id;",
      "info" : "ExpressionStatement[13937-13969]:ExpressionStatement[13815-13847]"
    }, {
      "left" : "envelope.destinationPointsetId = clusterRequest.destinationPointsetId;",
      "right" : "envelope.destinationPointsetId = clusterRequest.destinationPointsetId;",
      "info" : "ExpressionStatement[13990-14060]:ExpressionStatement[13868-13938]"
    }, {
      "left" : "ts.resultSets = (int) (System.currentTimeMillis() - resultSetStart);",
      "right" : "ts.resultSets = (int) (System.currentTimeMillis() - resultSetStart);",
      "info" : "ExpressionStatement[14082-14150]:ExpressionStatement[13960-14028]"
    }, {
      "left" : "ts.success = true;",
      "right" : "ts.success = true;",
      "info" : "ExpressionStatement[14171-14189]:ExpressionStatement[14049-14067]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14229-14367]:Block[14107-14245]"
    }, {
      "left" : "ts.success = false;",
      "right" : "ts.success = false;",
      "info" : "ExpressionStatement[14330-14349]:ExpressionStatement[14208-14227]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14387-14622]:Block[14265-14500]"
    }, {
      "left" : "RoutingRequest routingRequest = clusterRequest.routingRequest;",
      "right" : "RoutingRequest routingRequest = clusterRequest.routingRequest;",
      "info" : "VariableDeclarationStatement[14494-14556]:VariableDeclarationStatement[14372-14434]"
    }, {
      "left" : "if (clusterRequest.outputLocation != null)",
      "right" : "if (clusterRequest.outputLocation != null)",
      "info" : "IfStatement[14636-16002]:IfStatement[14514-15880]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14679-15802]:Block[14557-15680]"
    }, {
      "left" : "String s3key = String.join(\"/\", clusterRequest.jobId, clusterRequest.id + \".json.gz\");",
      "right" : "String s3key = String.join(\"/\", clusterRequest.jobId, clusterRequest.id + \".json.gz\");",
      "info" : "VariableDeclarationStatement[14893-14979]:VariableDeclarationStatement[14771-14857]"
    }, {
      "left" : "PipedInputStream inPipe = new PipedInputStream();",
      "right" : "PipedInputStream inPipe = new PipedInputStream();",
      "info" : "VariableDeclarationStatement[14996-15045]:VariableDeclarationStatement[14874-14923]"
    }, {
      "left" : "PipedOutputStream outPipe = new PipedOutputStream(inPipe);",
      "right" : "PipedOutputStream outPipe = new PipedOutputStream(inPipe);",
      "info" : "VariableDeclarationStatement[15062-15120]:VariableDeclarationStatement[14940-14998]"
    }, {
      "left" : "new Thread(() -> {\n                    s3.putObject(clusterRequest.outputLocation, s3key, inPipe, null);\n                }).start();",
      "right" : "new Thread(() -> {\n                    s3.putObject(clusterRequest.outputLocation, s3key, inPipe, null);\n                }).start();",
      "info" : "ExpressionStatement[15137-15269]:ExpressionStatement[15015-15147]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15154-15259]:Block[15032-15137]"
    }, {
      "left" : "s3.putObject(clusterRequest.outputLocation, s3key, inPipe, null);",
      "right" : "s3.putObject(clusterRequest.outputLocation, s3key, inPipe, null);",
      "info" : "ExpressionStatement[15176-15241]:ExpressionStatement[15054-15119]"
    }, {
      "left" : "OutputStream gzipOutputStream = new GZIPOutputStream(outPipe);",
      "right" : "OutputStream gzipOutputStream = new GZIPOutputStream(outPipe);",
      "info" : "VariableDeclarationStatement[15286-15348]:VariableDeclarationStatement[15164-15226]"
    }, {
      "left" : "objectMapper.writeValue(gzipOutputStream, envelope);",
      "right" : "objectMapper.writeValue(gzipOutputStream, envelope);",
      "info" : "ExpressionStatement[15532-15584]:ExpressionStatement[15410-15462]"
    }, {
      "left" : "gzipOutputStream.close();",
      "right" : "gzipOutputStream.close();",
      "info" : "ExpressionStatement[15601-15626]:ExpressionStatement[15479-15504]"
    }, {
      "left" : "deleteRequest(clusterRequest);",
      "right" : "deleteRequest(clusterRequest);",
      "info" : "ExpressionStatement[15758-15788]:ExpressionStatement[15636-15666]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15808-16002]:Block[15686-15880]"
    }, {
      "left" : "finishPriorityTask(clusterRequest, envelope);",
      "right" : "finishPriorityTask(clusterRequest, envelope);",
      "info" : "ExpressionStatement[15943-15988]:ExpressionStatement[15821-15866]"
    }, {
      "left" : "ts.total = (int) (System.currentTimeMillis() - startTime);",
      "right" : "ts.total = (int) (System.currentTimeMillis() - startTime);",
      "info" : "ExpressionStatement[16016-16074]:ExpressionStatement[15894-15952]"
    }, {
      "left" : "statsStore.store(ts);",
      "right" : "statsStore.store(ts);",
      "info" : "ExpressionStatement[16087-16108]:ExpressionStatement[15965-15986]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16140-16263]:Block[16018-16141]"
    }, {
      "left" : "LOG.error(\"An error occurred while routing: \" + ex.getMessage());",
      "right" : "LOG.error(\"An error occurred while routing: \" + ex.getMessage());",
      "info" : "ExpressionStatement[16154-16219]:ExpressionStatement[16032-16097]"
    }, {
      "left" : "ex.printStackTrace();",
      "right" : "ex.printStackTrace();",
      "info" : "ExpressionStatement[16232-16253]:ExpressionStatement[16110-16131]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[16276-16282]:Modifier[16154-16160]"
    }, {
      "left" : "List<AnalystClusterRequest>",
      "right" : "List<AnalystClusterRequest>",
      "info" : "ParameterizedType[16283-16310]:ParameterizedType[16161-16188]"
    }, {
      "left" : "getSomeWork",
      "right" : "getSomeWork",
      "info" : "SimpleName[16311-16322]:SimpleName[16189-16200]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16325-17821]:Block[16203-17700]"
    }, {
      "left" : "String url = BROKER_BASE_URL + \"/dequeue/\" + graphId;",
      "right" : "String url = BROKER_BASE_URL + \"/dequeue/\" + graphId;",
      "info" : "VariableDeclarationStatement[16444-16497]:VariableDeclarationStatement[16322-16375]"
    }, {
      "left" : "HttpPost httpPost = new HttpPost(url);",
      "right" : "HttpPost httpPost = new HttpPost(url);",
      "info" : "VariableDeclarationStatement[16506-16544]:VariableDeclarationStatement[16384-16422]"
    }, {
      "left" : "httpPost.setHeader(new BasicHeader(WORKER_ID_HEADER, workerId));",
      "right" : "httpPost.setHeader(new BasicHeader(WORKER_ID_HEADER, machineId));",
      "info" : "ExpressionStatement[16553-16617]:ExpressionStatement[16431-16496]"
    }, {
      "left" : "workerId",
      "right" : "machineId",
      "info" : "SimpleName[16606-16614]:SimpleName[16484-16493]"
    }, {
      "left" : "HttpResponse response = null;",
      "right" : "HttpResponse response = null;",
      "info" : "VariableDeclarationStatement[16626-16655]:VariableDeclarationStatement[16505-16534]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[16664-17793]:TryStatement[16543-17672]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16668-17155]:Block[16547-17034]"
    }, {
      "left" : "response = httpClient.execute(httpPost);",
      "right" : "response = httpClient.execute(httpPost);",
      "info" : "ExpressionStatement[16682-16722]:ExpressionStatement[16561-16601]"
    }, {
      "left" : "HttpEntity entity = response.getEntity();",
      "right" : "HttpEntity entity = response.getEntity();",
      "info" : "VariableDeclarationStatement[16735-16776]:VariableDeclarationStatement[16614-16655]"
    }, {
      "left" : "if (entity == null)",
      "right" : "if (entity == null)",
      "info" : "IfStatement[16789-16853]:IfStatement[16668-16732]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16809-16853]:Block[16688-16732]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[16827-16839]:ReturnStatement[16706-16718]"
    }, {
      "left" : "if (response.getStatusLine().getStatusCode() != 200)",
      "right" : "if (response.getStatusLine().getStatusCode() != 200)",
      "info" : "IfStatement[16866-17015]:IfStatement[16745-16894]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16919-17015]:Block[16798-16894]"
    }, {
      "left" : "EntityUtils.consumeQuietly(entity);",
      "right" : "EntityUtils.consumeQuietly(entity);",
      "info" : "ExpressionStatement[16937-16972]:ExpressionStatement[16816-16851]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[16989-17001]:ReturnStatement[16868-16880]"
    }, {
      "left" : "return objectMapper.readValue(entity.getContent(), new TypeReference<List<AnalystClusterRequest>>() {\n            });",
      "right" : "return objectMapper.readValue(entity.getContent(), new TypeReference<List<AnalystClusterRequest>>() {\n            });",
      "info" : "ReturnStatement[17028-17145]:ReturnStatement[16907-17024]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17190-17292]:Block[17069-17171]"
    }, {
      "left" : "LOG.error(\"JSON processing exception while getting work: {}\", e.getMessage());",
      "right" : "LOG.error(\"JSON processing exception while getting work: {}\", e.getMessage());",
      "info" : "ExpressionStatement[17204-17282]:ExpressionStatement[17083-17161]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17329-17412]:Block[17208-17291]"
    }, {
      "left" : "LOG.error(\"Socket timeout while waiting to receive work.\");",
      "right" : "LOG.error(\"Socket timeout while waiting to receive work.\");",
      "info" : "ExpressionStatement[17343-17402]:ExpressionStatement[17222-17281]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17449-17667]:Block[17328-17546]"
    }, {
      "left" : "LOG.error(\"Broker refused connection. Sleeping before retry.\");",
      "right" : "LOG.error(\"Broker refused connection. Sleeping before retry.\");",
      "info" : "ExpressionStatement[17463-17526]:ExpressionStatement[17342-17405]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[17539-17657]:TryStatement[17418-17536]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17543-17610]:Block[17422-17489]"
    }, {
      "left" : "Thread.currentThread().sleep(5000);",
      "right" : "Thread.currentThread().sleep(5000);",
      "info" : "ExpressionStatement[17561-17596]:ExpressionStatement[17440-17475]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17642-17657]:Block[17521-17536]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17690-17793]:Block[17569-17672]"
    }, {
      "left" : "LOG.error(\"IO exception while getting work.\");",
      "right" : "LOG.error(\"IO exception while getting work.\");",
      "info" : "ExpressionStatement[17704-17750]:ExpressionStatement[17583-17629]"
    }, {
      "left" : "e.printStackTrace();",
      "right" : "e.printStackTrace();",
      "info" : "ExpressionStatement[17763-17783]:ExpressionStatement[17642-17662]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[17802-17814]:ReturnStatement[17681-17693]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[17936-17942]:Modifier[17815-17821]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[17943-17947]:PrimitiveType[17822-17826]"
    }, {
      "left" : "finishPriorityTask",
      "right" : "finishPriorityTask",
      "info" : "SimpleName[17948-17966]:SimpleName[17827-17845]"
    }, {
      "left" : "AnalystClusterRequest clusterRequest",
      "right" : "AnalystClusterRequest clusterRequest",
      "info" : "SingleVariableDeclaration[17967-18003]:SingleVariableDeclaration[17846-17882]"
    }, {
      "left" : "Object result",
      "right" : "Object result",
      "info" : "SingleVariableDeclaration[18005-18018]:SingleVariableDeclaration[17884-17897]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18020-19447]:Block[17899-19326]"
    }, {
      "left" : "String url = BROKER_BASE_URL + String.format(\"/complete/priority/%s\", clusterRequest.taskId);",
      "right" : "String url = BROKER_BASE_URL + String.format(\"/complete/priority/%s\", clusterRequest.taskId);",
      "info" : "VariableDeclarationStatement[18030-18123]:VariableDeclarationStatement[17909-18002]"
    }, {
      "left" : "HttpPost httpPost = new HttpPost(url);",
      "right" : "HttpPost httpPost = new HttpPost(url);",
      "info" : "VariableDeclarationStatement[18132-18170]:VariableDeclarationStatement[18011-18049]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[18179-19441]:TryStatement[18058-19320]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18183-19291]:Block[18062-19170]"
    }, {
      "left" : "byte[] serializedResult = objectMapper.writeValueAsBytes(result);",
      "right" : "byte[] serializedResult = objectMapper.writeValueAsBytes(result);",
      "info" : "VariableDeclarationStatement[18372-18437]:VariableDeclarationStatement[18251-18316]"
    }, {
      "left" : "httpPost.setEntity(new ByteArrayEntity(serializedResult));",
      "right" : "httpPost.setEntity(new ByteArrayEntity(serializedResult));",
      "info" : "ExpressionStatement[18450-18508]:ExpressionStatement[18329-18387]"
    }, {
      "left" : "HttpResponse response = httpClient.execute(httpPost);",
      "right" : "HttpResponse response = httpClient.execute(httpPost);",
      "info" : "VariableDeclarationStatement[18521-18574]:VariableDeclarationStatement[18400-18453]"
    }, {
      "left" : "EntityUtils.consumeQuietly(response.getEntity());",
      "right" : "EntityUtils.consumeQuietly(response.getEntity());",
      "info" : "ExpressionStatement[18703-18752]:ExpressionStatement[18582-18631]"
    }, {
      "left" : "if (response.getStatusLine().getStatusCode() == 200)",
      "right" : "if (response.getStatusLine().getStatusCode() == 200)",
      "info" : "IfStatement[18765-19281]:IfStatement[18644-19160]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18818-18927]:Block[18697-18806]"
    }, {
      "left" : "LOG.info(\"Successfully marked task {} as completed.\", clusterRequest.taskId);",
      "right" : "LOG.info(\"Successfully marked task {} as completed.\", clusterRequest.taskId);",
      "info" : "ExpressionStatement[18836-18913]:ExpressionStatement[18715-18792]"
    }, {
      "left" : "if (response.getStatusLine().getStatusCode() == 404)",
      "right" : "if (response.getStatusLine().getStatusCode() == 404)",
      "info" : "IfStatement[18933-19281]:IfStatement[18812-19160]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18986-19115]:Block[18865-18994]"
    }, {
      "left" : "LOG.info(\"Task {} was not marked as completed because it doesn't exist.\", clusterRequest.taskId);",
      "right" : "LOG.info(\"Task {} was not marked as completed because it doesn't exist.\", clusterRequest.taskId);",
      "info" : "ExpressionStatement[19004-19101]:ExpressionStatement[18883-18980]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19121-19281]:Block[19000-19160]"
    }, {
      "left" : "LOG.info(\"Failed to mark task {} as completed, ({}).\", clusterRequest.taskId,\n                        response.getStatusLine());",
      "right" : "LOG.info(\"Failed to mark task {} as completed, ({}).\", clusterRequest.taskId,\n                        response.getStatusLine());",
      "info" : "ExpressionStatement[19139-19267]:ExpressionStatement[19018-19146]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19312-19441]:Block[19191-19320]"
    }, {
      "left" : "e.printStackTrace();",
      "right" : "e.printStackTrace();",
      "info" : "ExpressionStatement[19326-19346]:ExpressionStatement[19205-19225]"
    }, {
      "left" : "LOG.info(\"Failed to mark task {} as completed.\", clusterRequest.taskId);",
      "right" : "LOG.info(\"Failed to mark task {} as completed.\", clusterRequest.taskId);",
      "info" : "ExpressionStatement[19359-19431]:ExpressionStatement[19238-19310]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[19569-19575]:Modifier[19448-19454]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[19576-19580]:PrimitiveType[19455-19459]"
    }, {
      "left" : "deleteRequest",
      "right" : "deleteRequest",
      "info" : "SimpleName[19581-19594]:SimpleName[19460-19473]"
    }, {
      "left" : "AnalystClusterRequest clusterRequest",
      "right" : "AnalystClusterRequest clusterRequest",
      "info" : "SingleVariableDeclaration[19595-19631]:SingleVariableDeclaration[19474-19510]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19633-20484]:Block[19512-20363]"
    }, {
      "left" : "String url = BROKER_BASE_URL + String.format(\"/tasks/%s\", clusterRequest.taskId);",
      "right" : "String url = BROKER_BASE_URL + String.format(\"/tasks/%s\", clusterRequest.taskId);",
      "info" : "VariableDeclarationStatement[19643-19724]:VariableDeclarationStatement[19522-19603]"
    }, {
      "left" : "HttpDelete httpDelete = new HttpDelete(url);",
      "right" : "HttpDelete httpDelete = new HttpDelete(url);",
      "info" : "VariableDeclarationStatement[19733-19777]:VariableDeclarationStatement[19612-19656]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[19786-20478]:TryStatement[19665-20357]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19790-20340]:Block[19669-20219]"
    }, {
      "left" : "HttpResponse response = httpClient.execute(httpDelete);",
      "right" : "HttpResponse response = httpClient.execute(httpDelete);",
      "info" : "VariableDeclarationStatement[19804-19859]:VariableDeclarationStatement[19683-19738]"
    }, {
      "left" : "EntityUtils.consumeQuietly(response.getEntity());",
      "right" : "EntityUtils.consumeQuietly(response.getEntity());",
      "info" : "ExpressionStatement[19988-20037]:ExpressionStatement[19867-19916]"
    }, {
      "left" : "if (response.getStatusLine().getStatusCode() == 200)",
      "right" : "if (response.getStatusLine().getStatusCode() == 200)",
      "info" : "IfStatement[20050-20330]:IfStatement[19929-20209]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20103-20200]:Block[19982-20079]"
    }, {
      "left" : "LOG.info(\"Successfully deleted task {}.\", clusterRequest.taskId);",
      "right" : "LOG.info(\"Successfully deleted task {}.\", clusterRequest.taskId);",
      "info" : "ExpressionStatement[20121-20186]:ExpressionStatement[20000-20065]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20206-20330]:Block[20085-20209]"
    }, {
      "left" : "LOG.info(\"Failed to delete task {} ({}).\", clusterRequest.taskId, response.getStatusLine());",
      "right" : "LOG.info(\"Failed to delete task {} ({}).\", clusterRequest.taskId, response.getStatusLine());",
      "info" : "ExpressionStatement[20224-20316]:ExpressionStatement[20103-20195]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20361-20478]:Block[20240-20357]"
    }, {
      "left" : "e.printStackTrace();",
      "right" : "e.printStackTrace();",
      "info" : "ExpressionStatement[20375-20395]:ExpressionStatement[20254-20274]"
    }, {
      "left" : "LOG.info(\"Failed to delete task {}\", clusterRequest.taskId);",
      "right" : "LOG.info(\"Failed to delete task {}\", clusterRequest.taskId);",
      "info" : "ExpressionStatement[20408-20468]:ExpressionStatement[20287-20347]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[20541-20547]:Modifier[20420-20426]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[20548-20554]:SimpleType[20427-20433]"
    }, {
      "left" : "getInstanceType",
      "right" : "getInstanceType",
      "info" : "SimpleName[20555-20570]:SimpleName[20434-20449]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20574-21622]:Block[20453-21501]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[20584-21616]:TryStatement[20463-21495]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20588-21461]:Block[20467-21340]"
    }, {
      "left" : "HttpGet get = new HttpGet();",
      "right" : "HttpGet get = new HttpGet();",
      "info" : "VariableDeclarationStatement[20602-20630]:VariableDeclarationStatement[20481-20509]"
    }, {
      "left" : "get.setURI(new URI(\"http://169.254.169.254/latest/meta-data/instance-type\"));",
      "right" : "get.setURI(new URI(\"http://169.254.169.254/latest/meta-data/instance-type\"));",
      "info" : "ExpressionStatement[20887-20964]:ExpressionStatement[20766-20843]"
    }, {
      "left" : "get.setConfig(RequestConfig.custom()\n                    .setConnectTimeout(2000)\n                    .setSocketTimeout(2000)\n                    .build()\n            );",
      "right" : "get.setConfig(RequestConfig.custom()\n                    .setConnectTimeout(2000)\n                    .setSocketTimeout(2000)\n                    .build()\n            );",
      "info" : "ExpressionStatement[20977-21146]:ExpressionStatement[20856-21025]"
    }, {
      "left" : "HttpResponse res = httpClient.execute(get);",
      "right" : "HttpResponse res = httpClient.execute(get);",
      "info" : "VariableDeclarationStatement[21160-21203]:VariableDeclarationStatement[21039-21082]"
    }, {
      "left" : "InputStream is = res.getEntity().getContent();",
      "right" : "InputStream is = res.getEntity().getContent();",
      "info" : "VariableDeclarationStatement[21217-21263]:VariableDeclarationStatement[21096-21142]"
    }, {
      "left" : "BufferedReader reader = new BufferedReader(new InputStreamReader(is));",
      "right" : "BufferedReader reader = new BufferedReader(new InputStreamReader(is));",
      "info" : "VariableDeclarationStatement[21276-21346]:VariableDeclarationStatement[21155-21225]"
    }, {
      "left" : "String type = reader.readLine().trim();",
      "right" : "String type = reader.readLine().trim();",
      "info" : "VariableDeclarationStatement[21359-21398]:VariableDeclarationStatement[21238-21277]"
    }, {
      "left" : "reader.close();",
      "right" : "reader.close();",
      "info" : "ExpressionStatement[21411-21426]:ExpressionStatement[21290-21305]"
    }, {
      "left" : "return type;",
      "right" : "return type;",
      "info" : "ReturnStatement[21439-21451]:ReturnStatement[21318-21330]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21482-21616]:Block[21361-21495]"
    }, {
      "left" : "LOG.info(\"could not retrieve EC2 instance type, you may be running outside of EC2.\");",
      "right" : "LOG.info(\"could not retrieve EC2 instance type, you may be running outside of EC2.\");",
      "info" : "ExpressionStatement[21496-21581]:ExpressionStatement[21375-21460]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[21594-21606]:ReturnStatement[21473-21485]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[22359-22365]:Modifier[22238-22244]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[22366-22372]:Modifier[22245-22251]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[22373-22377]:PrimitiveType[22252-22256]"
    }, {
      "left" : "main",
      "right" : "main",
      "info" : "SimpleName[22378-22382]:SimpleName[22257-22261]"
    }, {
      "left" : "String[] args",
      "right" : "String[] args",
      "info" : "SingleVariableDeclaration[22383-22396]:SingleVariableDeclaration[22262-22275]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22398-22911]:Block[22277-22790]"
    }, {
      "left" : "Properties config = new Properties();",
      "right" : "Properties config = new Properties();",
      "info" : "VariableDeclarationStatement[22408-22445]:VariableDeclarationStatement[22287-22324]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[22455-22863]:TryStatement[22334-22742]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22459-22748]:Block[22338-22627]"
    }, {
      "left" : "File cfg;",
      "right" : "File cfg;",
      "info" : "VariableDeclarationStatement[22473-22482]:VariableDeclarationStatement[22352-22361]"
    }, {
      "left" : "if (args.length > 0)",
      "right" : "if (args.length > 0)",
      "info" : "IfStatement[22495-22620]:IfStatement[22374-22499]"
    }, {
      "left" : "cfg = new File(args[0]);",
      "right" : "cfg = new File(args[0]);",
      "info" : "ExpressionStatement[22532-22556]:ExpressionStatement[22411-22435]"
    }, {
      "left" : "cfg = new File(\"worker.conf\");",
      "right" : "cfg = new File(\"worker.conf\");",
      "info" : "ExpressionStatement[22590-22620]:ExpressionStatement[22469-22499]"
    }, {
      "left" : "InputStream cfgis = new FileInputStream(cfg);",
      "right" : "InputStream cfgis = new FileInputStream(cfg);",
      "info" : "VariableDeclarationStatement[22634-22679]:VariableDeclarationStatement[22513-22558]"
    }, {
      "left" : "config.load(cfgis);",
      "right" : "config.load(cfgis);",
      "info" : "ExpressionStatement[22692-22711]:ExpressionStatement[22571-22590]"
    }, {
      "left" : "cfgis.close();",
      "right" : "cfgis.close();",
      "info" : "ExpressionStatement[22724-22738]:ExpressionStatement[22603-22617]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22769-22863]:Block[22648-22742]"
    }, {
      "left" : "LOG.info(\"Error loading worker configuration\", e);",
      "right" : "LOG.info(\"Error loading worker configuration\", e);",
      "info" : "ExpressionStatement[22783-22833]:ExpressionStatement[22662-22712]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[22846-22853]:ReturnStatement[22725-22732]"
    }, {
      "left" : "new AnalystWorker(config).run();",
      "right" : "new AnalystWorker(config).run();",
      "info" : "ExpressionStatement[22873-22905]:ExpressionStatement[22752-22784]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[23217-23222]:TYPE_DECLARATION_KIND[2174-2179]"
    }, {
      "left" : "PropertyDefinerBase",
      "right" : "String",
      "info" : "SimpleType[23247-23266]:SimpleType[2839-2845]"
    } ]
  },
  "interFileMappings" : { }
}