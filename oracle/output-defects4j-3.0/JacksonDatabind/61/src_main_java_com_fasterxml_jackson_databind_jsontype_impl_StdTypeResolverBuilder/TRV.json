{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "protected JsonTypeInfo.Id _idType;",
      "right" : "protected JsonTypeInfo.Id _idType;",
      "info" : "FieldDeclaration[542-576]:FieldDeclaration[542-576]"
    }, {
      "left" : "protected JsonTypeInfo.As _includeAs;",
      "right" : "protected JsonTypeInfo.As _includeAs;",
      "info" : "FieldDeclaration[582-619]:FieldDeclaration[582-619]"
    }, {
      "left" : "protected String _typeProperty;",
      "right" : "protected String _typeProperty;",
      "info" : "FieldDeclaration[625-656]:FieldDeclaration[625-656]"
    }, {
      "left" : "protected boolean _typeIdVisible = false;",
      "right" : "protected boolean _typeIdVisible = false;",
      "info" : "FieldDeclaration[662-784]:FieldDeclaration[662-784]"
    }, {
      "left" : "protected Class<?> _defaultImpl;",
      "right" : "protected Class<?> _defaultImpl;",
      "info" : "FieldDeclaration[794-933]:FieldDeclaration[794-933]"
    }, {
      "left" : "protected TypeIdResolver _customIdResolver;",
      "right" : "protected TypeIdResolver _customIdResolver;",
      "info" : "FieldDeclaration[963-1006]:FieldDeclaration[963-1006]"
    }, {
      "left" : "public StdTypeResolverBuilder()",
      "right" : "public StdTypeResolverBuilder()",
      "info" : "MethodDeclaration[1213-1248]:MethodDeclaration[1213-1248]"
    }, {
      "left" : "public static StdTypeResolverBuilder noTypeInfoBuilder()",
      "right" : "public static StdTypeResolverBuilder noTypeInfoBuilder()",
      "info" : "MethodDeclaration[1254-1396]:MethodDeclaration[1254-1396]"
    }, {
      "left" : "public StdTypeResolverBuilder init(JsonTypeInfo.Id idType, TypeIdResolver idRes)",
      "right" : "public StdTypeResolverBuilder init(JsonTypeInfo.Id idType, TypeIdResolver idRes)",
      "info" : "MethodDeclaration[1402-1855]:MethodDeclaration[1402-1855]"
    }, {
      "left" : "public StdTypeResolverBuilder inclusion(JsonTypeInfo.As includeAs)",
      "right" : "public StdTypeResolverBuilder inclusion(JsonTypeInfo.As includeAs)",
      "info" : "MethodDeclaration[5727-5988]:MethodDeclaration[5873-6134]"
    }, {
      "left" : "public StdTypeResolverBuilder typeProperty(String typeIdPropName)",
      "right" : "public StdTypeResolverBuilder typeProperty(String typeIdPropName)",
      "info" : "MethodDeclaration[5994-6519]:MethodDeclaration[6140-6665]"
    }, {
      "left" : "public StdTypeResolverBuilder defaultImpl(Class<?> defaultImpl)",
      "right" : "public StdTypeResolverBuilder defaultImpl(Class<?> defaultImpl)",
      "info" : "MethodDeclaration[6525-6667]:MethodDeclaration[6671-6813]"
    }, {
      "left" : "public StdTypeResolverBuilder typeIdVisibility(boolean isVisible)",
      "right" : "public StdTypeResolverBuilder typeIdVisibility(boolean isVisible)",
      "info" : "MethodDeclaration[6673-6817]:MethodDeclaration[6819-6963]"
    }, {
      "left" : "public Class<?> getDefaultImpl()",
      "right" : "public Class<?> getDefaultImpl()",
      "info" : "MethodDeclaration[6988-7055]:MethodDeclaration[7134-7201]"
    }, {
      "left" : "public String getTypeProperty()",
      "right" : "public String getTypeProperty()",
      "info" : "MethodDeclaration[7061-7118]:MethodDeclaration[7207-7264]"
    }, {
      "left" : "public boolean isTypeIdVisible()",
      "right" : "public boolean isTypeIdVisible()",
      "info" : "MethodDeclaration[7123-7182]:MethodDeclaration[7269-7328]"
    }, {
      "left" : "protected TypeIdResolver idResolver(MapperConfig<?> config,\n            JavaType baseType, Collection<NamedType> subtypes, boolean forSer, boolean forDeser)",
      "right" : "protected TypeIdResolver idResolver(MapperConfig<?> config,\n            JavaType baseType, Collection<NamedType> subtypes, boolean forSer, boolean forDeser)",
      "info" : "MethodDeclaration[7364-8524]:MethodDeclaration[7510-8670]"
    } ],
    "mappings" : [
 {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[1213-1219]:Modifier[1213-1219]"
    }, {
      "left" : "StdTypeResolverBuilder",
      "right" : "StdTypeResolverBuilder",
      "info" : "SimpleName[1220-1242]:SimpleName[1220-1242]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1245-1248]:Block[1245-1248]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[1254-1260]:Modifier[1254-1260]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[1261-1267]:Modifier[1261-1267]"
    }, {
      "left" : "StdTypeResolverBuilder",
      "right" : "StdTypeResolverBuilder",
      "info" : "SimpleType[1268-1290]:SimpleType[1268-1290]"
    }, {
      "left" : "noTypeInfoBuilder",
      "right" : "noTypeInfoBuilder",
      "info" : "SimpleName[1291-1308]:SimpleName[1291-1308]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1311-1396]:Block[1311-1396]"
    }, {
      "left" : "return new StdTypeResolverBuilder().init(JsonTypeInfo.Id.NONE, null);",
      "right" : "return new StdTypeResolverBuilder().init(JsonTypeInfo.Id.NONE, null);",
      "info" : "ReturnStatement[1321-1390]:ReturnStatement[1321-1390]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[1402-1411]:MarkerAnnotation[1402-1411]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[1416-1422]:Modifier[1416-1422]"
    }, {
      "left" : "StdTypeResolverBuilder",
      "right" : "StdTypeResolverBuilder",
      "info" : "SimpleType[1423-1445]:SimpleType[1423-1445]"
    }, {
      "left" : "init",
      "right" : "init",
      "info" : "SimpleName[1446-1450]:SimpleName[1446-1450]"
    }, {
      "left" : "JsonTypeInfo.Id idType",
      "right" : "JsonTypeInfo.Id idType",
      "info" : "SingleVariableDeclaration[1451-1473]:SingleVariableDeclaration[1451-1473]"
    }, {
      "left" : "TypeIdResolver idRes",
      "right" : "TypeIdResolver idRes",
      "info" : "SingleVariableDeclaration[1475-1495]:SingleVariableDeclaration[1475-1495]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1501-1855]:Block[1501-1855]"
    }, {
      "left" : "if (idType == null)",
      "right" : "if (idType == null)",
      "info" : "IfStatement[1536-1641]:IfStatement[1536-1641]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1556-1641]:Block[1556-1641]"
    }, {
      "left" : "throw new IllegalArgumentException(\"idType can not be null\");",
      "right" : "throw new IllegalArgumentException(\"idType can not be null\");",
      "info" : "ThrowStatement[1570-1631]:ThrowStatement[1570-1631]"
    }, {
      "left" : "_idType = idType;",
      "right" : "_idType = idType;",
      "info" : "ExpressionStatement[1650-1667]:ExpressionStatement[1650-1667]"
    }, {
      "left" : "_customIdResolver = idRes;",
      "right" : "_customIdResolver = idRes;",
      "info" : "ExpressionStatement[1676-1702]:ExpressionStatement[1676-1702]"
    }, {
      "left" : "_typeProperty = idType.getDefaultPropertyName();",
      "right" : "_typeProperty = idType.getDefaultPropertyName();",
      "info" : "ExpressionStatement[1780-1828]:ExpressionStatement[1780-1828]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[1837-1849]:ReturnStatement[1837-1849]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[5727-5736]:MarkerAnnotation[5873-5882]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[5741-5747]:Modifier[5887-5893]"
    }, {
      "left" : "StdTypeResolverBuilder",
      "right" : "StdTypeResolverBuilder",
      "info" : "SimpleType[5748-5770]:SimpleType[5894-5916]"
    }, {
      "left" : "inclusion",
      "right" : "inclusion",
      "info" : "SimpleName[5771-5780]:SimpleName[5917-5926]"
    }, {
      "left" : "JsonTypeInfo.As includeAs",
      "right" : "JsonTypeInfo.As includeAs",
      "info" : "SingleVariableDeclaration[5781-5806]:SingleVariableDeclaration[5927-5952]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5808-5988]:Block[5954-6134]"
    }, {
      "left" : "if (includeAs == null)",
      "right" : "if (includeAs == null)",
      "info" : "IfStatement[5818-5929]:IfStatement[5964-6075]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5841-5929]:Block[5987-6075]"
    }, {
      "left" : "throw new IllegalArgumentException(\"includeAs can not be null\");",
      "right" : "throw new IllegalArgumentException(\"includeAs can not be null\");",
      "info" : "ThrowStatement[5855-5919]:ThrowStatement[6001-6065]"
    }, {
      "left" : "_includeAs = includeAs;",
      "right" : "_includeAs = includeAs;",
      "info" : "ExpressionStatement[5938-5961]:ExpressionStatement[6084-6107]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[5970-5982]:ReturnStatement[6116-6128]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[6165-6174]:MarkerAnnotation[6311-6320]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[6179-6185]:Modifier[6325-6331]"
    }, {
      "left" : "StdTypeResolverBuilder",
      "right" : "StdTypeResolverBuilder",
      "info" : "SimpleType[6186-6208]:SimpleType[6332-6354]"
    }, {
      "left" : "typeProperty",
      "right" : "typeProperty",
      "info" : "SimpleName[6209-6221]:SimpleName[6355-6367]"
    }, {
      "left" : "String typeIdPropName",
      "right" : "String typeIdPropName",
      "info" : "SingleVariableDeclaration[6222-6243]:SingleVariableDeclaration[6368-6389]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6245-6519]:Block[6391-6665]"
    }, {
      "left" : "if (typeIdPropName == null || typeIdPropName.length() == 0)",
      "right" : "if (typeIdPropName == null || typeIdPropName.length() == 0)",
      "info" : "IfStatement[6318-6452]:IfStatement[6464-6598]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6378-6452]:Block[6524-6598]"
    }, {
      "left" : "typeIdPropName = _idType.getDefaultPropertyName();",
      "right" : "typeIdPropName = _idType.getDefaultPropertyName();",
      "info" : "ExpressionStatement[6392-6442]:ExpressionStatement[6538-6588]"
    }, {
      "left" : "_typeProperty = typeIdPropName;",
      "right" : "_typeProperty = typeIdPropName;",
      "info" : "ExpressionStatement[6461-6492]:ExpressionStatement[6607-6638]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[6501-6513]:ReturnStatement[6647-6659]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[6525-6534]:MarkerAnnotation[6671-6680]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[6539-6545]:Modifier[6685-6691]"
    }, {
      "left" : "StdTypeResolverBuilder",
      "right" : "StdTypeResolverBuilder",
      "info" : "SimpleType[6546-6568]:SimpleType[6692-6714]"
    }, {
      "left" : "defaultImpl",
      "right" : "defaultImpl",
      "info" : "SimpleName[6569-6580]:SimpleName[6715-6726]"
    }, {
      "left" : "Class<?> defaultImpl",
      "right" : "Class<?> defaultImpl",
      "info" : "SingleVariableDeclaration[6581-6601]:SingleVariableDeclaration[6727-6747]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6603-6667]:Block[6749-6813]"
    }, {
      "left" : "_defaultImpl = defaultImpl;",
      "right" : "_defaultImpl = defaultImpl;",
      "info" : "ExpressionStatement[6613-6640]:ExpressionStatement[6759-6786]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[6649-6661]:ReturnStatement[6795-6807]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[6673-6682]:MarkerAnnotation[6819-6828]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[6687-6693]:Modifier[6833-6839]"
    }, {
      "left" : "StdTypeResolverBuilder",
      "right" : "StdTypeResolverBuilder",
      "info" : "SimpleType[6694-6716]:SimpleType[6840-6862]"
    }, {
      "left" : "typeIdVisibility",
      "right" : "typeIdVisibility",
      "info" : "SimpleName[6717-6733]:SimpleName[6863-6879]"
    }, {
      "left" : "boolean isVisible",
      "right" : "boolean isVisible",
      "info" : "SingleVariableDeclaration[6734-6751]:SingleVariableDeclaration[6880-6897]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6753-6817]:Block[6899-6963]"
    }, {
      "left" : "_typeIdVisible = isVisible;",
      "right" : "_typeIdVisible = isVisible;",
      "info" : "ExpressionStatement[6763-6790]:ExpressionStatement[6909-6936]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[6799-6811]:ReturnStatement[6945-6957]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[6988-6997]:MarkerAnnotation[7134-7143]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[6998-7004]:Modifier[7144-7150]"
    }, {
      "left" : "Class<?>",
      "right" : "Class<?>",
      "info" : "ParameterizedType[7005-7013]:ParameterizedType[7151-7159]"
    }, {
      "left" : "getDefaultImpl",
      "right" : "getDefaultImpl",
      "info" : "SimpleName[7014-7028]:SimpleName[7160-7174]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7031-7055]:Block[7177-7201]"
    }, {
      "left" : "return _defaultImpl;",
      "right" : "return _defaultImpl;",
      "info" : "ReturnStatement[7033-7053]:ReturnStatement[7179-7199]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[7061-7067]:Modifier[7207-7213]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[7068-7074]:SimpleType[7214-7220]"
    }, {
      "left" : "getTypeProperty",
      "right" : "getTypeProperty",
      "info" : "SimpleName[7075-7090]:SimpleName[7221-7236]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7093-7118]:Block[7239-7264]"
    }, {
      "left" : "return _typeProperty;",
      "right" : "return _typeProperty;",
      "info" : "ReturnStatement[7095-7116]:ReturnStatement[7241-7262]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[7123-7129]:Modifier[7269-7275]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[7130-7137]:PrimitiveType[7276-7283]"
    }, {
      "left" : "isTypeIdVisible",
      "right" : "isTypeIdVisible",
      "info" : "SimpleName[7138-7153]:SimpleName[7284-7299]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7156-7182]:Block[7302-7328]"
    }, {
      "left" : "return _typeIdVisible;",
      "right" : "return _typeIdVisible;",
      "info" : "ReturnStatement[7158-7180]:ReturnStatement[7304-7326]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[7529-7538]:Modifier[7675-7684]"
    }, {
      "left" : "TypeIdResolver",
      "right" : "TypeIdResolver",
      "info" : "SimpleType[7539-7553]:SimpleType[7685-7699]"
    }, {
      "left" : "idResolver",
      "right" : "idResolver",
      "info" : "SimpleName[7554-7564]:SimpleName[7700-7710]"
    }, {
      "left" : "MapperConfig<?> config",
      "right" : "MapperConfig<?> config",
      "info" : "SingleVariableDeclaration[7565-7587]:SingleVariableDeclaration[7711-7733]"
    }, {
      "left" : "JavaType baseType",
      "right" : "JavaType baseType",
      "info" : "SingleVariableDeclaration[7601-7618]:SingleVariableDeclaration[7747-7764]"
    }, {
      "left" : "Collection<NamedType> subtypes",
      "right" : "Collection<NamedType> subtypes",
      "info" : "SingleVariableDeclaration[7620-7650]:SingleVariableDeclaration[7766-7796]"
    }, {
      "left" : "boolean forSer",
      "right" : "boolean forSer",
      "info" : "SingleVariableDeclaration[7652-7666]:SingleVariableDeclaration[7798-7812]"
    }, {
      "left" : "boolean forDeser",
      "right" : "boolean forDeser",
      "info" : "SingleVariableDeclaration[7668-7684]:SingleVariableDeclaration[7814-7830]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7690-8524]:Block[7836-8670]"
    }, {
      "left" : "if (_customIdResolver != null)",
      "right" : "if (_customIdResolver != null)",
      "info" : "IfStatement[7731-7791]:IfStatement[7877-7937]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7762-7791]:Block[7908-7937]"
    }, {
      "left" : "return _customIdResolver;",
      "right" : "return _customIdResolver;",
      "info" : "ReturnStatement[7764-7789]:ReturnStatement[7910-7935]"
    }, {
      "left" : "if (_idType == null)",
      "right" : "if (_idType == null)",
      "info" : "IfStatement[7800-7895]:IfStatement[7946-8041]"
    }, {
      "left" : "throw new IllegalStateException(\"Can not build, 'init()' not yet called\");",
      "right" : "throw new IllegalStateException(\"Can not build, 'init()' not yet called\");",
      "info" : "ThrowStatement[7821-7895]:ThrowStatement[7967-8041]"
    }, {
      "left" : "switch (_idType) {\n        case CLASS:\n            return new ClassNameIdResolver(baseType, config.getTypeFactory());\n        case MINIMAL_CLASS:\n            return new MinimalClassNameIdResolver(baseType, config.getTypeFactory());\n        case NAME:\n            return TypeNameIdResolver.construct(config, baseType, subtypes, forSer, forDeser);\n        case NONE: // hmmh. should never get this far with 'none'\n            return null;\n        case CUSTOM: // need custom resolver...\n        }",
      "right" : "switch (_idType) {\n        case CLASS:\n            return new ClassNameIdResolver(baseType, config.getTypeFactory());\n        case MINIMAL_CLASS:\n            return new MinimalClassNameIdResolver(baseType, config.getTypeFactory());\n        case NAME:\n            return TypeNameIdResolver.construct(config, baseType, subtypes, forSer, forDeser);\n        case NONE: // hmmh. should never get this far with 'none'\n            return null;\n        case CUSTOM: // need custom resolver...\n        }",
      "info" : "SwitchStatement[7904-8398]:SwitchStatement[8050-8544]"
    }, {
      "left" : "case CLASS:",
      "right" : "case CLASS:",
      "info" : "SwitchCase[7931-7942]:SwitchCase[8077-8088]"
    }, {
      "left" : "return new ClassNameIdResolver(baseType, config.getTypeFactory());",
      "right" : "return new ClassNameIdResolver(baseType, config.getTypeFactory());",
      "info" : "ReturnStatement[7955-8021]:ReturnStatement[8101-8167]"
    }, {
      "left" : "case MINIMAL_CLASS:",
      "right" : "case MINIMAL_CLASS:",
      "info" : "SwitchCase[8030-8049]:SwitchCase[8176-8195]"
    }, {
      "left" : "return new MinimalClassNameIdResolver(baseType, config.getTypeFactory());",
      "right" : "return new MinimalClassNameIdResolver(baseType, config.getTypeFactory());",
      "info" : "ReturnStatement[8062-8135]:ReturnStatement[8208-8281]"
    }, {
      "left" : "case NAME:",
      "right" : "case NAME:",
      "info" : "SwitchCase[8144-8154]:SwitchCase[8290-8300]"
    }, {
      "left" : "return TypeNameIdResolver.construct(config, baseType, subtypes, forSer, forDeser);",
      "right" : "return TypeNameIdResolver.construct(config, baseType, subtypes, forSer, forDeser);",
      "info" : "ReturnStatement[8167-8249]:ReturnStatement[8313-8395]"
    }, {
      "left" : "case NONE:",
      "right" : "case NONE:",
      "info" : "SwitchCase[8258-8268]:SwitchCase[8404-8414]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[8328-8340]:ReturnStatement[8474-8486]"
    }, {
      "left" : "case CUSTOM:",
      "right" : "case CUSTOM:",
      "info" : "SwitchCase[8349-8361]:SwitchCase[8495-8507]"
    }, {
      "left" : "throw new IllegalStateException(\"Do not know how to construct standard type id resolver for idType: \"+_idType);",
      "right" : "throw new IllegalStateException(\"Do not know how to construct standard type id resolver for idType: \"+_idType);",
      "info" : "ThrowStatement[8407-8518]:ThrowStatement[8553-8664]"
    } ]
  },
  "interFileMappings" : { }
}