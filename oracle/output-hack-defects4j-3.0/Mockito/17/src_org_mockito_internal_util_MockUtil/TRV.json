{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "private final CreationValidator creationValidator;",
      "right" : "private final CreationValidator creationValidator;",
      "info" : "FieldDeclaration[768-818]:FieldDeclaration[798-848]"
    }, {
      "left" : "public MockUtil(CreationValidator creationValidator)",
      "right" : "public MockUtil(CreationValidator creationValidator)",
      "info" : "MethodDeclaration[826-940]:MethodDeclaration[856-970]"
    }, {
      "left" : "public MockUtil()",
      "right" : "public MockUtil()",
      "info" : "MethodDeclaration[952-1018]:MethodDeclaration[982-1048]"
    }, {
      "left" : "public <T> void resetMock(T mock)",
      "right" : "public <T> void resetMock(T mock)",
      "info" : "MethodDeclaration[2079-2506]:MethodDeclaration[2326-2753]"
    }, {
      "left" : "public <T> MockHandlerInterface<T> getMockHandler(T mock)",
      "right" : "public <T> MockHandlerInterface<T> getMockHandler(T mock)",
      "info" : "MethodDeclaration[2514-2949]:MethodDeclaration[2761-3196]"
    }, {
      "left" : "private <T> boolean isMockitoMock(T mock)",
      "right" : "private <T> boolean isMockitoMock(T mock)",
      "info" : "MethodDeclaration[2957-3093]:MethodDeclaration[3204-3340]"
    }, {
      "left" : "public boolean isMock(Object mock)",
      "right" : "public boolean isMock(Object mock)",
      "info" : "MethodDeclaration[3101-3197]:MethodDeclaration[3348-3444]"
    }, {
      "left" : "private <T> MethodInterceptorFilter getInterceptor(T mock)",
      "right" : "private <T> MethodInterceptorFilter getInterceptor(T mock)",
      "info" : "MethodDeclaration[3205-3517]:MethodDeclaration[3452-3764]"
    }, {
      "left" : "public MockName getMockName(Object mock)",
      "right" : "public MockName getMockName(Object mock)",
      "info" : "MethodDeclaration[3525-3644]:MethodDeclaration[3772-3891]"
    } ],
    "mappings" : [
 {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[826-832]:Modifier[856-862]"
    }, {
      "left" : "MockUtil",
      "right" : "MockUtil",
      "info" : "SimpleName[833-841]:SimpleName[863-871]"
    }, {
      "left" : "CreationValidator creationValidator",
      "right" : "CreationValidator creationValidator",
      "info" : "SingleVariableDeclaration[842-877]:SingleVariableDeclaration[872-907]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[879-940]:Block[909-970]"
    }, {
      "left" : "this.creationValidator = creationValidator;",
      "right" : "this.creationValidator = creationValidator;",
      "info" : "ExpressionStatement[890-933]:ExpressionStatement[920-963]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[952-958]:Modifier[982-988]"
    }, {
      "left" : "MockUtil",
      "right" : "MockUtil",
      "info" : "SimpleName[959-967]:SimpleName[989-997]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[970-1018]:Block[1000-1048]"
    }, {
      "left" : "this(new CreationValidator());",
      "right" : "this(new CreationValidator());",
      "info" : "ConstructorInvocation[981-1011]:ConstructorInvocation[1011-1041]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[2079-2085]:Modifier[2326-2332]"
    }, {
      "left" : "T",
      "right" : "T",
      "info" : "TypeParameter[2087-2088]:TypeParameter[2334-2335]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[2090-2094]:PrimitiveType[2337-2341]"
    }, {
      "left" : "resetMock",
      "right" : "resetMock",
      "info" : "SimpleName[2095-2104]:SimpleName[2342-2351]"
    }, {
      "left" : "T mock",
      "right" : "T mock",
      "info" : "SingleVariableDeclaration[2105-2111]:SingleVariableDeclaration[2352-2358]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2113-2506]:Block[2360-2753]"
    }, {
      "left" : "MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);",
      "right" : "MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);",
      "info" : "VariableDeclarationStatement[2124-2186]:VariableDeclarationStatement[2371-2433]"
    }, {
      "left" : "MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);",
      "right" : "MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);",
      "info" : "VariableDeclarationStatement[2196-2263]:VariableDeclarationStatement[2443-2510]"
    }, {
      "left" : "MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, \r\n                        (MockSettingsImpl) withSettings().defaultAnswer(RETURNS_DEFAULTS));",
      "right" : "MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, \r\n                        (MockSettingsImpl) withSettings().defaultAnswer(RETURNS_DEFAULTS));",
      "info" : "VariableDeclarationStatement[2273-2446]:VariableDeclarationStatement[2520-2693]"
    }, {
      "left" : "((Factory) mock).setCallback(0, newFilter);",
      "right" : "((Factory) mock).setCallback(0, newFilter);",
      "info" : "ExpressionStatement[2456-2499]:ExpressionStatement[2703-2746]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[2514-2520]:Modifier[2761-2767]"
    }, {
      "left" : "T",
      "right" : "T",
      "info" : "TypeParameter[2522-2523]:TypeParameter[2769-2770]"
    }, {
      "left" : "MockHandlerInterface<T>",
      "right" : "MockHandlerInterface<T>",
      "info" : "ParameterizedType[2525-2548]:ParameterizedType[2772-2795]"
    }, {
      "left" : "getMockHandler",
      "right" : "getMockHandler",
      "info" : "SimpleName[2549-2563]:SimpleName[2796-2810]"
    }, {
      "left" : "T mock",
      "right" : "T mock",
      "info" : "SingleVariableDeclaration[2564-2570]:SingleVariableDeclaration[2811-2817]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2572-2949]:Block[2819-3196]"
    }, {
      "left" : "if (mock == null)",
      "right" : "if (mock == null)",
      "info" : "IfStatement[2583-2698]:IfStatement[2830-2945]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2601-2698]:Block[2848-2945]"
    }, {
      "left" : "throw new NotAMockException(\"Argument should be a mock, but is null!\");",
      "right" : "throw new NotAMockException(\"Argument should be a mock, but is null!\");",
      "info" : "ThrowStatement[2616-2687]:ThrowStatement[2863-2934]"
    }, {
      "left" : "if (isMockitoMock(mock))",
      "right" : "if (isMockitoMock(mock))",
      "info" : "IfStatement[2710-2942]:IfStatement[2957-3189]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2735-2825]:Block[2982-3072]"
    }, {
      "left" : "return (MockHandlerInterface) getInterceptor(mock).getHandler();",
      "right" : "return (MockHandlerInterface) getInterceptor(mock).getHandler();",
      "info" : "ReturnStatement[2750-2814]:ReturnStatement[2997-3061]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2831-2942]:Block[3078-3189]"
    }, {
      "left" : "throw new NotAMockException(\"Argument should be a mock, but is: \" + mock.getClass());",
      "right" : "throw new NotAMockException(\"Argument should be a mock, but is: \" + mock.getClass());",
      "info" : "ThrowStatement[2846-2931]:ThrowStatement[3093-3178]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[2957-2964]:Modifier[3204-3211]"
    }, {
      "left" : "T",
      "right" : "T",
      "info" : "TypeParameter[2966-2967]:TypeParameter[3213-3214]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[2969-2976]:PrimitiveType[3216-3223]"
    }, {
      "left" : "isMockitoMock",
      "right" : "isMockitoMock",
      "info" : "SimpleName[2977-2990]:SimpleName[3224-3237]"
    }, {
      "left" : "T mock",
      "right" : "T mock",
      "info" : "SingleVariableDeclaration[2991-2997]:SingleVariableDeclaration[3238-3244]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2999-3093]:Block[3246-3340]"
    }, {
      "left" : "return Enhancer.isEnhanced(mock.getClass()) && getInterceptor(mock) != null;",
      "right" : "return Enhancer.isEnhanced(mock.getClass()) && getInterceptor(mock) != null;",
      "info" : "ReturnStatement[3010-3086]:ReturnStatement[3257-3333]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[3101-3107]:Modifier[3348-3354]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[3108-3115]:PrimitiveType[3355-3362]"
    }, {
      "left" : "isMock",
      "right" : "isMock",
      "info" : "SimpleName[3116-3122]:SimpleName[3363-3369]"
    }, {
      "left" : "Object mock",
      "right" : "Object mock",
      "info" : "SingleVariableDeclaration[3123-3134]:SingleVariableDeclaration[3370-3381]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3136-3197]:Block[3383-3444]"
    }, {
      "left" : "return mock != null && isMockitoMock(mock);",
      "right" : "return mock != null && isMockitoMock(mock);",
      "info" : "ReturnStatement[3147-3190]:ReturnStatement[3394-3437]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[3205-3212]:Modifier[3452-3459]"
    }, {
      "left" : "T",
      "right" : "T",
      "info" : "TypeParameter[3214-3215]:TypeParameter[3461-3462]"
    }, {
      "left" : "MethodInterceptorFilter",
      "right" : "MethodInterceptorFilter",
      "info" : "SimpleType[3217-3240]:SimpleType[3464-3487]"
    }, {
      "left" : "getInterceptor",
      "right" : "getInterceptor",
      "info" : "SimpleName[3241-3255]:SimpleName[3488-3502]"
    }, {
      "left" : "T mock",
      "right" : "T mock",
      "info" : "SingleVariableDeclaration[3256-3262]:SingleVariableDeclaration[3503-3509]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3264-3517]:Block[3511-3764]"
    }, {
      "left" : "Factory factory = (Factory) mock;",
      "right" : "Factory factory = (Factory) mock;",
      "info" : "VariableDeclarationStatement[3275-3308]:VariableDeclarationStatement[3522-3555]"
    }, {
      "left" : "Callback callback = factory.getCallback(0);",
      "right" : "Callback callback = factory.getCallback(0);",
      "info" : "VariableDeclarationStatement[3318-3361]:VariableDeclarationStatement[3565-3608]"
    }, {
      "left" : "if (callback instanceof MethodInterceptorFilter)",
      "right" : "if (callback instanceof MethodInterceptorFilter)",
      "info" : "IfStatement[3371-3488]:IfStatement[3618-3735]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3420-3488]:Block[3667-3735]"
    }, {
      "left" : "return (MethodInterceptorFilter) callback;",
      "right" : "return (MethodInterceptorFilter) callback;",
      "info" : "ReturnStatement[3435-3477]:ReturnStatement[3682-3724]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[3498-3510]:ReturnStatement[3745-3757]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[3525-3531]:Modifier[3772-3778]"
    }, {
      "left" : "MockName",
      "right" : "MockName",
      "info" : "SimpleType[3532-3540]:SimpleType[3779-3787]"
    }, {
      "left" : "getMockName",
      "right" : "getMockName",
      "info" : "SimpleName[3541-3552]:SimpleName[3788-3799]"
    }, {
      "left" : "Object mock",
      "right" : "Object mock",
      "info" : "SingleVariableDeclaration[3553-3564]:SingleVariableDeclaration[3800-3811]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3566-3644]:Block[3813-3891]"
    }, {
      "left" : "return getMockHandler(mock).getMockSettings().getMockName();",
      "right" : "return getMockHandler(mock).getMockSettings().getMockName();",
      "info" : "ReturnStatement[3577-3637]:ReturnStatement[3824-3884]"
    } ]
  },
  "interFileMappings" : { }
}