{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "SimplexOptimizer",
      "right" : "SimplexOptimizer",
      "info" : "TypeDeclaration[1538-8603]:TypeDeclaration[1538-8632]"
    }, {
      "left" : "private AbstractSimplex simplex;",
      "right" : "private AbstractSimplex simplex;",
      "info" : "FieldDeclaration[4211-4275]:FieldDeclaration[4211-4275]"
    }, {
      "left" : "public SimplexOptimizer(ConvergenceChecker<PointValuePair> checker)",
      "right" : "public SimplexOptimizer(ConvergenceChecker<PointValuePair> checker)",
      "info" : "MethodDeclaration[4281-4439]:MethodDeclaration[4281-4439]"
    }, {
      "left" : "public SimplexOptimizer(double rel, double abs)",
      "right" : "public SimplexOptimizer(double rel, double abs)",
      "info" : "MethodDeclaration[4445-4640]:MethodDeclaration[4445-4640]"
    }, {
      "left" : "public PointValuePair optimize(OptimizationData... optData)",
      "right" : "public PointValuePair optimize(OptimizationData... optData)",
      "info" : "MethodDeclaration[4646-5191]:MethodDeclaration[4646-5191]"
    }, {
      "left" : "protected PointValuePair doOptimize()",
      "right" : "protected PointValuePair doOptimize()",
      "info" : "MethodDeclaration[5197-7093]:MethodDeclaration[5197-7122]"
    }, {
      "left" : "public double value(double[] point)",
      "right" : "public double value(double[] point)",
      "info" : "MethodDeclaration[5514-5626]:MethodDeclaration[5514-5626]"
    }, {
      "left" : "public int compare(final PointValuePair o1,\n                               final PointValuePair o2)",
      "right" : "public int compare(final PointValuePair o1,\n                               final PointValuePair o2)",
      "info" : "MethodDeclaration[5824-6119]:MethodDeclaration[5824-6119]"
    }, {
      "left" : "protected void parseOptimizationData(OptimizationData... optData)",
      "right" : "protected void parseOptimizationData(OptimizationData... optData)",
      "info" : "MethodDeclaration[7099-8000]:MethodDeclaration[7128-8029]"
    }, {
      "left" : "private void checkParameters()",
      "right" : "private void checkParameters()",
      "info" : "MethodDeclaration[8006-8601]:MethodDeclaration[8035-8630]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4408-4439]:Block[4408-4439]"
    }, {
      "left" : "super(checker);",
      "right" : "super(checker);",
      "info" : "SuperConstructorInvocation[4418-4433]:SuperConstructorInvocation[4418-4433]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4585-4640]:Block[4585-4640]"
    }, {
      "left" : "this(new SimpleValueChecker(rel, abs));",
      "right" : "this(new SimpleValueChecker(rel, abs));",
      "info" : "ConstructorInvocation[4595-4634]:ConstructorInvocation[4595-4634]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5090-5191]:Block[5090-5191]"
    }, {
      "left" : "return super.optimize(optData);",
      "right" : "return super.optimize(optData);",
      "info" : "ReturnStatement[5154-5185]:ReturnStatement[5154-5185]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5274-7093]:Block[5274-7122]"
    }, {
      "left" : "checkParameters();",
      "right" : "checkParameters();",
      "info" : "ExpressionStatement[5284-5302]:ExpressionStatement[5284-5302]"
    }, {
      "left" : "final MultivariateFunction evalFunc\n            = new MultivariateFunction() {\n                public double value(double[] point) {\n                    return computeObjectiveValue(point);\n                }\n            };",
      "right" : "final MultivariateFunction evalFunc\n            = new MultivariateFunction() {\n                public double value(double[] point) {\n                    return computeObjectiveValue(point);\n                }\n            };",
      "info" : "VariableDeclarationStatement[5419-5641]:VariableDeclarationStatement[5419-5641]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5550-5626]:Block[5550-5626]"
    }, {
      "left" : "return computeObjectiveValue(point);",
      "right" : "return computeObjectiveValue(point);",
      "info" : "ReturnStatement[5572-5608]:ReturnStatement[5572-5608]"
    }, {
      "left" : "final boolean isMinim = getGoalType() == GoalType.MINIMIZE;",
      "right" : "final boolean isMinim = getGoalType() == GoalType.MINIMIZE;",
      "info" : "VariableDeclarationStatement[5651-5710]:VariableDeclarationStatement[5651-5710]"
    }, {
      "left" : "final Comparator<PointValuePair> comparator\n            = new Comparator<PointValuePair>() {\n            public int compare(final PointValuePair o1,\n                               final PointValuePair o2) {\n                final double v1 = o1.getValue();\n                final double v2 = o2.getValue();\n                return isMinim ? Double.compare(v1, v2) : Double.compare(v2, v1);\n            }\n        };",
      "right" : "final Comparator<PointValuePair> comparator\n            = new Comparator<PointValuePair>() {\n            public int compare(final PointValuePair o1,\n                               final PointValuePair o2) {\n                final double v1 = o1.getValue();\n                final double v2 = o2.getValue();\n                return isMinim ? Double.compare(v1, v2) : Double.compare(v2, v1);\n            }\n        };",
      "info" : "VariableDeclarationStatement[5719-6130]:VariableDeclarationStatement[5719-6130]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5924-6119]:Block[5924-6119]"
    }, {
      "left" : "final double v1 = o1.getValue();",
      "right" : "final double v1 = o1.getValue();",
      "info" : "VariableDeclarationStatement[5942-5974]:VariableDeclarationStatement[5942-5974]"
    }, {
      "left" : "final double v2 = o2.getValue();",
      "right" : "final double v2 = o2.getValue();",
      "info" : "VariableDeclarationStatement[5991-6023]:VariableDeclarationStatement[5991-6023]"
    }, {
      "left" : "return isMinim ? Double.compare(v1, v2) : Double.compare(v2, v1);",
      "right" : "return isMinim ? Double.compare(v1, v2) : Double.compare(v2, v1);",
      "info" : "ReturnStatement[6040-6105]:ReturnStatement[6040-6105]"
    }, {
      "left" : "simplex.build(getStartPoint());",
      "right" : "simplex.build(getStartPoint());",
      "info" : "ExpressionStatement[6170-6201]:ExpressionStatement[6170-6201]"
    }, {
      "left" : "simplex.evaluate(evalFunc, comparator);",
      "right" : "simplex.evaluate(evalFunc, comparator);",
      "info" : "ExpressionStatement[6210-6249]:ExpressionStatement[6210-6249]"
    }, {
      "left" : "PointValuePair[] previous = null;",
      "right" : "PointValuePair[] previous = null;",
      "info" : "VariableDeclarationStatement[6259-6292]:VariableDeclarationStatement[6259-6292]"
    }, {
      "left" : "int iteration = 0;",
      "right" : "int iteration = 0;",
      "info" : "VariableDeclarationStatement[6301-6319]:VariableDeclarationStatement[6301-6319]"
    }, {
      "left" : "final ConvergenceChecker<PointValuePair> checker = getConvergenceChecker();",
      "right" : "final ConvergenceChecker<PointValuePair> checker = getConvergenceChecker();",
      "info" : "VariableDeclarationStatement[6328-6403]:VariableDeclarationStatement[6328-6403]"
    }, {
      "left" : "while (true)",
      "right" : "while (true)",
      "info" : "WhileStatement[6412-7087]:WhileStatement[6412-7116]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6425-7087]:Block[6425-7116]"
    }, {
      "left" : "if (iteration > 0)",
      "right" : "if (getIterations() > 0)",
      "info" : "IfStatement[6439-6924]:IfStatement[6439-6930]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6458-6924]:Block[6464-6930]"
    }, {
      "left" : "boolean converged = true;",
      "right" : "boolean converged = true;",
      "info" : "VariableDeclarationStatement[6476-6501]:VariableDeclarationStatement[6482-6507]"
    }, {
      "left" : "for (int i = 0; i < simplex.getSize(); i++)",
      "right" : "for (int i = 0; i < simplex.getSize(); i++)",
      "info" : "ForStatement[6518-6762]:ForStatement[6524-6768]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6562-6762]:Block[6568-6768]"
    }, {
      "left" : "PointValuePair prev = previous[i];",
      "right" : "PointValuePair prev = previous[i];",
      "info" : "VariableDeclarationStatement[6584-6618]:VariableDeclarationStatement[6590-6624]"
    }, {
      "left" : "converged = converged &&\n                        checker.converged(iteration, prev, simplex.getPoint(i));",
      "right" : "converged = converged &&\n                        checker.converged(iteration, prev, simplex.getPoint(i));",
      "info" : "ExpressionStatement[6639-6744]:ExpressionStatement[6645-6750]"
    }, {
      "left" : "if (converged)",
      "right" : "if (converged)",
      "info" : "IfStatement[6779-6910]:IfStatement[6785-6916]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6794-6910]:Block[6800-6916]"
    }, {
      "left" : "return simplex.getPoint(0);",
      "right" : "return simplex.getPoint(0);",
      "info" : "ReturnStatement[6865-6892]:ReturnStatement[6871-6898]"
    }, {
      "left" : "previous = simplex.getPoints();",
      "right" : "previous = simplex.getPoints();",
      "info" : "ExpressionStatement[6978-7009]:ExpressionStatement[6984-7015]"
    }, {
      "left" : "simplex.iterate(evalFunc, comparator);",
      "right" : "simplex.iterate(evalFunc, comparator);",
      "info" : "ExpressionStatement[7022-7060]:ExpressionStatement[7028-7066]"
    }, {
      "left" : "++iteration;",
      "right" : "incrementIterationCount();",
      "info" : "ExpressionStatement[7065-7077]:ExpressionStatement[7080-7106]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7460-8000]:Block[7489-8029]"
    }, {
      "left" : "super.parseOptimizationData(optData);",
      "right" : "super.parseOptimizationData(optData);",
      "info" : "ExpressionStatement[7524-7561]:ExpressionStatement[7553-7590]"
    }, {
      "left" : "for (OptimizationData data : optData)",
      "right" : "for (OptimizationData data : optData)",
      "info" : "EnhancedForStatement[7692-7994]:EnhancedForStatement[7721-8023]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7730-7994]:Block[7759-8023]"
    }, {
      "left" : "if (data instanceof AbstractSimplex)",
      "right" : "if (data instanceof AbstractSimplex)",
      "info" : "IfStatement[7744-7984]:IfStatement[7773-8013]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7781-7984]:Block[7810-8013]"
    }, {
      "left" : "simplex = (AbstractSimplex) data;",
      "right" : "simplex = (AbstractSimplex) data;",
      "info" : "ExpressionStatement[7799-7832]:ExpressionStatement[7828-7861]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[7964-7970]:BreakStatement[7993-7999]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8332-8601]:Block[8361-8630]"
    }, {
      "left" : "if (simplex == null)",
      "right" : "if (simplex == null)",
      "info" : "IfStatement[8342-8421]:IfStatement[8371-8450]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8363-8421]:Block[8392-8450]"
    }, {
      "left" : "throw new NullArgumentException();",
      "right" : "throw new NullArgumentException();",
      "info" : "ThrowStatement[8377-8411]:ThrowStatement[8406-8440]"
    }, {
      "left" : "if (getLowerBound() != null ||\n            getUpperBound() != null)",
      "right" : "if (getLowerBound() != null ||\n            getUpperBound() != null)",
      "info" : "IfStatement[8430-8595]:IfStatement[8459-8624]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8498-8595]:Block[8527-8624]"
    }, {
      "left" : "throw new MathUnsupportedOperationException(LocalizedFormats.CONSTRAINT);",
      "right" : "throw new MathUnsupportedOperationException(LocalizedFormats.CONSTRAINT);",
      "info" : "ThrowStatement[8512-8585]:ThrowStatement[8541-8614]"
    } ]
  },
  "interFileMappings" : { }
}