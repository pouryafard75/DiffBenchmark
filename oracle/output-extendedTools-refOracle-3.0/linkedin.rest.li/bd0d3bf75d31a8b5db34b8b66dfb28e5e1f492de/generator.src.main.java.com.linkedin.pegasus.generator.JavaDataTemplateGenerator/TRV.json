{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "public static final Map<DataSchema, Class<?>> PredefinedJavaClasses;",
      "right" : "public static final Map<DataSchema, Class<?>> PredefinedJavaClasses;",
      "info" : "FieldDeclaration[3508-3772]:FieldDeclaration[3828-4092]"
    }, {
      "left" : "private static final int MAX_SCHEMA_FIELD_JSON_LENGTH = 32000;",
      "right" : "private static final int MAX_SCHEMA_FIELD_JSON_LENGTH = 32000;",
      "info" : "FieldDeclaration[4452-4514]:FieldDeclaration[4772-4834]"
    }, {
      "left" : "private static final Logger _log = LoggerFactory.getLogger(JavaDataTemplateGenerator.class);",
      "right" : "private static final Logger _log = LoggerFactory.getLogger(JavaDataTemplateGenerator.class);",
      "info" : "FieldDeclaration[4517-4609]:FieldDeclaration[4837-4929]"
    }, {
      "left" : "private static final String DEPRECATED_KEY = \"deprecated\";",
      "right" : "private static final String DEPRECATED_KEY = \"deprecated\";",
      "info" : "FieldDeclaration[4655-4713]:FieldDeclaration[4975-5033]"
    }, {
      "left" : "private static final String DEPRECATED_SYMBOLS_KEY = \"deprecatedSymbols\";",
      "right" : "private static final String DEPRECATED_SYMBOLS_KEY = \"deprecatedSymbols\";",
      "info" : "FieldDeclaration[4716-4789]:FieldDeclaration[5036-5109]"
    }, {
      "left" : "private final Map<ClassTemplateSpec, JDefinedClass> _definedClasses = new HashMap<ClassTemplateSpec, JDefinedClass>();",
      "right" : "private final Map<ClassTemplateSpec, JDefinedClass> _definedClasses = new HashMap<ClassTemplateSpec, JDefinedClass>();",
      "info" : "FieldDeclaration[4793-4911]:FieldDeclaration[5113-5231]"
    }, {
      "left" : "private final Map<JDefinedClass, ClassTemplateSpec> _generatedClasses = new HashMap<JDefinedClass, ClassTemplateSpec>();",
      "right" : "private final Map<JDefinedClass, ClassTemplateSpec> _generatedClasses = new HashMap<JDefinedClass, ClassTemplateSpec>();",
      "info" : "FieldDeclaration[4914-5034]:FieldDeclaration[5234-5354]"
    }, {
      "left" : "private final boolean _recordFieldAccessorWithMode;",
      "right" : "private final boolean _recordFieldAccessorWithMode;",
      "info" : "FieldDeclaration[5038-5089]:FieldDeclaration[5624-5675]"
    }, {
      "left" : "public Map<JDefinedClass, ClassTemplateSpec> getGeneratedClasses()",
      "right" : "public Map<JDefinedClass, ClassTemplateSpec> getGeneratedClasses()",
      "info" : "MethodDeclaration[5690-5794]:MethodDeclaration[7302-7406]"
    }, {
      "left" : "public JClass generate(ClassTemplateSpec classTemplateSpec)",
      "right" : "public JClass generate(ClassTemplateSpec classTemplateSpec)",
      "info" : "MethodDeclaration[5798-6928]:MethodDeclaration[7410-8540]"
    }, {
      "left" : "private static JInvocation dataClassArg(JInvocation inv, JClass dataClass)",
      "right" : "private static JInvocation dataClassArg(JInvocation inv, JClass dataClass)",
      "info" : "MethodDeclaration[6932-7111]:MethodDeclaration[8544-8723]"
    }, {
      "left" : "private static void generateCopierMethods(JDefinedClass templateClass)",
      "right" : "private static void generateCopierMethods(JDefinedClass templateClass)",
      "info" : "MethodDeclaration[7115-7292]:MethodDeclaration[8727-8904]"
    }, {
      "left" : "private static boolean hasNestedFields(DataSchema schema)",
      "right" : "private static boolean hasNestedFields(DataSchema schema)",
      "info" : "MethodDeclaration[7296-7827]:MethodDeclaration[8908-9439]"
    }, {
      "left" : "private static void generateConstructorWithNoArg(JDefinedClass cls, JVar schemaField, JClass newClass)",
      "right" : "private static void generateConstructorWithNoArg(JDefinedClass cls, JVar schemaField, JClass newClass)",
      "info" : "MethodDeclaration[7831-8094]:MethodDeclaration[9443-9706]"
    }, {
      "left" : "private static void generateConstructorWithNoArg(JDefinedClass cls, JClass newClass)",
      "right" : "private static void generateConstructorWithNoArg(JDefinedClass cls, JClass newClass)",
      "info" : "MethodDeclaration[8098-8325]:MethodDeclaration[9710-9937]"
    }, {
      "left" : "private static void generateConstructorWithObjectArg(JDefinedClass cls, JVar schemaField)",
      "right" : "private static void generateConstructorWithObjectArg(JDefinedClass cls, JVar schemaField)",
      "info" : "MethodDeclaration[8329-8627]:MethodDeclaration[9941-10239]"
    }, {
      "left" : "private static void generateConstructorWithArg(JDefinedClass cls, JVar schemaField, JClass paramClass)",
      "right" : "private static void generateConstructorWithArg(JDefinedClass cls, JVar schemaField, JClass paramClass)",
      "info" : "MethodDeclaration[8631-8940]:MethodDeclaration[10243-10552]"
    }, {
      "left" : "private static void generateConstructorWithArg(JDefinedClass cls, JVar schemaField, JClass paramClass, JClass elementClass, JClass dataClass)",
      "right" : "private static void generateConstructorWithArg(JDefinedClass cls, JVar schemaField, JClass paramClass, JClass elementClass, JClass dataClass)",
      "info" : "MethodDeclaration[8944-9384]:MethodDeclaration[10556-10996]"
    }, {
      "left" : "private static DataSchema schemaForArrayItemsOrMapValues(CustomInfoSpec customInfo, DataSchema schema)",
      "right" : "private static DataSchema schemaForArrayItemsOrMapValues(CustomInfoSpec customInfo, DataSchema schema)",
      "info" : "MethodDeclaration[9388-11018]:MethodDeclaration[11000-12630]"
    }, {
      "left" : "private static void overrideCopierMethod(JDefinedClass templateClass, String methodName)",
      "right" : "private static void overrideCopierMethod(JDefinedClass templateClass, String methodName)",
      "info" : "MethodDeclaration[11022-11411]:MethodDeclaration[12634-13023]"
    }, {
      "left" : "private static void setDeprecatedAnnotationAndJavadoc(DataSchema schema, JDefinedClass schemaClass)",
      "right" : "private static void setDeprecatedAnnotationAndJavadoc(DataSchema schema, JDefinedClass schemaClass)",
      "info" : "MethodDeclaration[11415-11631]:MethodDeclaration[13027-13243]"
    }, {
      "left" : "private static void setDeprecatedAnnotationAndJavadoc(JMethod method, RecordDataSchema.Field field)",
      "right" : "private static void setDeprecatedAnnotationAndJavadoc(JMethod method, RecordDataSchema.Field field)",
      "info" : "MethodDeclaration[11635-11840]:MethodDeclaration[13247-13452]"
    }, {
      "left" : "private static void setDeprecatedAnnotationAndJavadoc(EnumDataSchema enumSchema, String symbol, JEnumConstant constant)",
      "right" : "private static void setDeprecatedAnnotationAndJavadoc(EnumDataSchema enumSchema, String symbol, JEnumConstant constant)",
      "info" : "MethodDeclaration[11844-12348]:MethodDeclaration[13456-13960]"
    }, {
      "left" : "private static void setDeprecatedAnnotationAndJavadoc(Object deprecatedProp, JAnnotatable annotatable, JDocCommentable commentable)",
      "right" : "private static void setDeprecatedAnnotationAndJavadoc(Object deprecatedProp, JAnnotatable annotatable, JDocCommentable commentable)",
      "info" : "MethodDeclaration[12352-12955]:MethodDeclaration[13964-14567]"
    }, {
      "left" : "private static int getJModValue(Set<ModifierSpec> modifiers)",
      "right" : "private static int getJModValue(Set<ModifierSpec> modifiers)",
      "info" : "MethodDeclaration[12959-13386]:MethodDeclaration[14571-14998]"
    }, {
      "left" : "private static void addAccessorDoc(JMethod method, RecordDataSchema.Field field, String prefix)",
      "right" : "private static void addAccessorDoc(JMethod method, RecordDataSchema.Field field, String prefix)",
      "info" : "MethodDeclaration[13390-13640]:MethodDeclaration[15002-15252]"
    }, {
      "left" : "private JDefinedClass defineClass(ClassTemplateSpec classTemplateSpec)\n      throws JClassAlreadyExistsException",
      "right" : "private JDefinedClass defineClass(ClassTemplateSpec classTemplateSpec)\n      throws JClassAlreadyExistsException",
      "info" : "MethodDeclaration[13644-15022]:MethodDeclaration[15256-16634]"
    }, {
      "left" : "protected void generateEnum(JDefinedClass enumClass, EnumTemplateSpec enumSpec)",
      "right" : "protected void generateEnum(JDefinedClass enumClass, EnumTemplateSpec enumSpec)",
      "info" : "MethodDeclaration[16417-17357]:MethodDeclaration[18273-19213]"
    }, {
      "left" : "private JClass generatePrimitive(PrimitiveTemplateSpec primitiveSpec)",
      "right" : "private JClass generatePrimitive(PrimitiveTemplateSpec primitiveSpec)",
      "info" : "MethodDeclaration[19313-19973]:MethodDeclaration[21445-22105]"
    }, {
      "left" : "private void generatePathSpecMethodsForRecord(List<RecordTemplateSpec.Field> fieldSpecs, JDefinedClass templateClass)\n      throws JClassAlreadyExistsException",
      "right" : "private void generatePathSpecMethodsForRecord(List<RecordTemplateSpec.Field> fieldSpecs, JDefinedClass templateClass)\n      throws JClassAlreadyExistsException",
      "info" : "MethodDeclaration[21007-22426]:MethodDeclaration[23340-24759]"
    }, {
      "left" : "protected void generateTyperef(JDefinedClass typerefClass, TyperefTemplateSpec typerefSpec)",
      "right" : "protected void generateTyperef(JDefinedClass typerefClass, TyperefTemplateSpec typerefSpec)",
      "info" : "MethodDeclaration[27234-27745]:MethodDeclaration[29621-30132]"
    }, {
      "left" : "private void generateUnionMemberAccessors(JDefinedClass unionClass, DataSchema memberType, JClass memberClass, JClass dataClass, JVar schemaField)",
      "right" : "private void generateUnionMemberAccessors(JDefinedClass unionClass, DataSchema memberType, JClass memberClass, JClass dataClass, JVar schemaField)",
      "info" : "MethodDeclaration[29349-31436]:MethodDeclaration[31925-34012]"
    }, {
      "left" : "private void generatePathSpecMethodsForUnion(UnionTemplateSpec unionSpec, JDefinedClass unionClass)\n      throws JClassAlreadyExistsException",
      "right" : "private void generatePathSpecMethodsForUnion(UnionTemplateSpec unionSpec, JDefinedClass unionClass)\n      throws JClassAlreadyExistsException",
      "info" : "MethodDeclaration[31440-32315]:MethodDeclaration[34016-34891]"
    }, {
      "left" : "private void populateClassContent(ClassTemplateSpec classTemplateSpec, JDefinedClass definedClass)\n      throws JClassAlreadyExistsException",
      "right" : "private void populateClassContent(ClassTemplateSpec classTemplateSpec, JDefinedClass definedClass)\n      throws JClassAlreadyExistsException",
      "info" : "MethodDeclaration[32319-33835]:MethodDeclaration[34895-36411]"
    }, {
      "left" : "private JFieldVar generateSchemaField(JDefinedClass templateClass, DataSchema schema)",
      "right" : "private JFieldVar generateSchemaField(JDefinedClass templateClass, DataSchema schema)",
      "info" : "MethodDeclaration[33839-35119]:MethodDeclaration[36415-37695]"
    }, {
      "left" : "private void generatePathSpecMethodsForCollection(JDefinedClass templateClass, DataSchema schema, JClass childClass, String wildcardMethodName)\n      throws JClassAlreadyExistsException",
      "right" : "private void generatePathSpecMethodsForCollection(JDefinedClass templateClass, DataSchema schema, JClass childClass, String wildcardMethodName)\n      throws JClassAlreadyExistsException",
      "info" : "MethodDeclaration[35123-35800]:MethodDeclaration[37699-38376]"
    }, {
      "left" : "private JDefinedClass generatePathSpecNestedClass(JDefinedClass templateClass)\n      throws JClassAlreadyExistsException",
      "right" : "private JDefinedClass generatePathSpecNestedClass(JDefinedClass templateClass)\n      throws JClassAlreadyExistsException",
      "info" : "MethodDeclaration[35804-36535]:MethodDeclaration[38380-39111]"
    }, {
      "left" : "private void generateCustomClassInitialization(JDefinedClass templateClass, CustomInfoSpec customInfo)",
      "right" : "private void generateCustomClassInitialization(JDefinedClass templateClass, CustomInfoSpec customInfo)",
      "info" : "MethodDeclaration[36539-37562]:MethodDeclaration[39115-40138]"
    }, {
      "left" : "private void generateConstructorWithInitialCapacity(JDefinedClass cls, JClass elementClass)",
      "right" : "private void generateConstructorWithInitialCapacity(JDefinedClass cls, JClass elementClass)",
      "info" : "MethodDeclaration[37566-37915]:MethodDeclaration[40142-40491]"
    }, {
      "left" : "private void generateConstructorWithCollection(JDefinedClass cls, JClass elementClass)",
      "right" : "private void generateConstructorWithCollection(JDefinedClass cls, JClass elementClass)",
      "info" : "MethodDeclaration[37919-38308]:MethodDeclaration[40495-40884]"
    }, {
      "left" : "private void generateConstructorWithInitialCapacityAndLoadFactor(JDefinedClass cls)",
      "right" : "private void generateConstructorWithInitialCapacityAndLoadFactor(JDefinedClass cls)",
      "info" : "MethodDeclaration[38312-38756]:MethodDeclaration[40888-41332]"
    }, {
      "left" : "private void generateConstructorWithMap(JDefinedClass cls, JClass valueClass)",
      "right" : "private void generateConstructorWithMap(JDefinedClass cls, JClass valueClass)",
      "info" : "MethodDeclaration[38760-39151]:MethodDeclaration[41336-41727]"
    }, {
      "left" : "private String _defaultPackage;",
      "right" : "private String _defaultPackage;",
      "info" : "FieldDeclaration[39190-39221]:FieldDeclaration[41766-41797]"
    }, {
      "left" : "private boolean _recordFieldAccessorWithMode;",
      "right" : "private boolean _recordFieldAccessorWithMode;",
      "info" : "FieldDeclaration[39226-39271]:FieldDeclaration[41802-41847]"
    }, {
      "left" : "public void setDefaultPackage(String defaultPackage)",
      "right" : "public void setDefaultPackage(String defaultPackage)",
      "info" : "MethodDeclaration[39383-39487]:MethodDeclaration[42166-42270]"
    }, {
      "left" : "public String getDefaultPackage()",
      "right" : "public String getDefaultPackage()",
      "info" : "MethodDeclaration[39493-39568]:MethodDeclaration[42276-42351]"
    }, {
      "left" : "public void setRecordFieldAccessorWithMode(boolean recordFieldAccessorWithMode)",
      "right" : "public void setRecordFieldAccessorWithMode(boolean recordFieldAccessorWithMode)",
      "info" : "MethodDeclaration[39574-39731]:MethodDeclaration[42357-42514]"
    }, {
      "left" : "public boolean getRecordFieldAccessorWithMode()",
      "right" : "public boolean getRecordFieldAccessorWithMode()",
      "info" : "MethodDeclaration[39737-39839]:MethodDeclaration[42520-42622]"
    } ],
    "mappings" : [
 {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[5690-5696]:Modifier[7302-7308]"
    }, {
      "left" : "Map<JDefinedClass, ClassTemplateSpec>",
      "right" : "Map<JDefinedClass, ClassTemplateSpec>",
      "info" : "ParameterizedType[5697-5734]:ParameterizedType[7309-7346]"
    }, {
      "left" : "getGeneratedClasses",
      "right" : "getGeneratedClasses",
      "info" : "SimpleName[5735-5754]:SimpleName[7347-7366]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5759-5794]:Block[7371-7406]"
    }, {
      "left" : "return _generatedClasses;",
      "right" : "return _generatedClasses;",
      "info" : "ReturnStatement[5765-5790]:ReturnStatement[7377-7402]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[5798-5804]:Modifier[7410-7416]"
    }, {
      "left" : "JClass",
      "right" : "JClass",
      "info" : "SimpleType[5805-5811]:SimpleType[7417-7423]"
    }, {
      "left" : "generate",
      "right" : "generate",
      "info" : "SimpleName[5812-5820]:SimpleName[7424-7432]"
    }, {
      "left" : "ClassTemplateSpec classTemplateSpec",
      "right" : "ClassTemplateSpec classTemplateSpec",
      "info" : "SingleVariableDeclaration[5821-5856]:SingleVariableDeclaration[7433-7468]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5860-6928]:Block[7472-8540]"
    }, {
      "left" : "final JClass result;",
      "right" : "final JClass result;",
      "info" : "VariableDeclarationStatement[5866-5886]:VariableDeclarationStatement[7478-7498]"
    }, {
      "left" : "if (classTemplateSpec == null)",
      "right" : "if (classTemplateSpec == null)",
      "info" : "IfStatement[5892-6904]:IfStatement[7504-8516]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5927-5955]:Block[7539-7567]"
    }, {
      "left" : "result = null;",
      "right" : "result = null;",
      "info" : "ExpressionStatement[5935-5949]:ExpressionStatement[7547-7561]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5969-6904]:Block[7581-8516]"
    }, {
      "left" : "if (classTemplateSpec.getSchema() == null)",
      "right" : "if (classTemplateSpec.getSchema() == null)",
      "info" : "IfStatement[5977-6898]:IfStatement[7589-8510]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6026-6113]:Block[7638-7725]"
    }, {
      "left" : "result = getCodeModel().directClass(classTemplateSpec.getFullName());",
      "right" : "result = getCodeModel().directClass(classTemplateSpec.getFullName());",
      "info" : "ExpressionStatement[6036-6105]:ExpressionStatement[7648-7717]"
    }, {
      "left" : "if (PredefinedJavaClasses.containsKey(classTemplateSpec.getSchema()))",
      "right" : "if (PredefinedJavaClasses.containsKey(classTemplateSpec.getSchema()))",
      "info" : "IfStatement[6125-6898]:IfStatement[7737-8510]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6201-6363]:Block[7813-7975]"
    }, {
      "left" : "final Class<?> nativeJavaClass = PredefinedJavaClasses.get(classTemplateSpec.getSchema());",
      "right" : "final Class<?> nativeJavaClass = PredefinedJavaClasses.get(classTemplateSpec.getSchema());",
      "info" : "VariableDeclarationStatement[6211-6301]:VariableDeclarationStatement[7823-7913]"
    }, {
      "left" : "result = getCodeModel().ref(nativeJavaClass);",
      "right" : "result = getCodeModel().ref(nativeJavaClass);",
      "info" : "ExpressionStatement[6310-6355]:ExpressionStatement[7922-7967]"
    }, {
      "left" : "if (classTemplateSpec.getSchema().isPrimitive())",
      "right" : "if (classTemplateSpec.getSchema().isPrimitive())",
      "info" : "IfStatement[6375-6898]:IfStatement[7987-8510]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6430-6518]:Block[8042-8130]"
    }, {
      "left" : "result = generatePrimitive((PrimitiveTemplateSpec) classTemplateSpec);",
      "right" : "result = generatePrimitive((PrimitiveTemplateSpec) classTemplateSpec);",
      "info" : "ExpressionStatement[6440-6510]:ExpressionStatement[8052-8122]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6536-6898]:Block[8148-8510]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[6546-6890]:TryStatement[8158-8502]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6558-6744]:Block[8170-8356]"
    }, {
      "left" : "final JDefinedClass definedClass = defineClass(classTemplateSpec);",
      "right" : "final JDefinedClass definedClass = defineClass(classTemplateSpec);",
      "info" : "VariableDeclarationStatement[6570-6636]:VariableDeclarationStatement[8182-8248]"
    }, {
      "left" : "populateClassContent(classTemplateSpec, definedClass);",
      "right" : "populateClassContent(classTemplateSpec, definedClass);",
      "info" : "ExpressionStatement[6647-6701]:ExpressionStatement[8259-8313]"
    }, {
      "left" : "result = definedClass;",
      "right" : "result = definedClass;",
      "info" : "ExpressionStatement[6712-6734]:ExpressionStatement[8324-8346]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6800-6890]:Block[8412-8502]"
    }, {
      "left" : "throw new IllegalArgumentException(classTemplateSpec.getFullName());",
      "right" : "throw new IllegalArgumentException(classTemplateSpec.getFullName());",
      "info" : "ThrowStatement[6812-6880]:ThrowStatement[8424-8492]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[6910-6924]:ReturnStatement[8522-8536]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[6932-6939]:Modifier[8544-8551]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[6940-6946]:Modifier[8552-8558]"
    }, {
      "left" : "JInvocation",
      "right" : "JInvocation",
      "info" : "SimpleType[6947-6958]:SimpleType[8559-8570]"
    }, {
      "left" : "dataClassArg",
      "right" : "dataClassArg",
      "info" : "SimpleName[6959-6971]:SimpleName[8571-8583]"
    }, {
      "left" : "JInvocation inv",
      "right" : "JInvocation inv",
      "info" : "SingleVariableDeclaration[6972-6987]:SingleVariableDeclaration[8584-8599]"
    }, {
      "left" : "JClass dataClass",
      "right" : "JClass dataClass",
      "info" : "SingleVariableDeclaration[6989-7005]:SingleVariableDeclaration[8601-8617]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7009-7111]:Block[8621-8723]"
    }, {
      "left" : "if (dataClass != null)",
      "right" : "if (dataClass != null)",
      "info" : "IfStatement[7015-7091]:IfStatement[8627-8703]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7042-7091]:Block[8654-8703]"
    }, {
      "left" : "inv.arg(JExpr.dotclass(dataClass));",
      "right" : "inv.arg(JExpr.dotclass(dataClass));",
      "info" : "ExpressionStatement[7050-7085]:ExpressionStatement[8662-8697]"
    }, {
      "left" : "return inv;",
      "right" : "return inv;",
      "info" : "ReturnStatement[7096-7107]:ReturnStatement[8708-8719]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[7115-7122]:Modifier[8727-8734]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[7123-7129]:Modifier[8735-8741]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[7130-7134]:PrimitiveType[8742-8746]"
    }, {
      "left" : "generateCopierMethods",
      "right" : "generateCopierMethods",
      "info" : "SimpleName[7135-7156]:SimpleName[8747-8768]"
    }, {
      "left" : "JDefinedClass templateClass",
      "right" : "JDefinedClass templateClass",
      "info" : "SingleVariableDeclaration[7157-7184]:SingleVariableDeclaration[8769-8796]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7188-7292]:Block[8800-8904]"
    }, {
      "left" : "overrideCopierMethod(templateClass, \"clone\");",
      "right" : "overrideCopierMethod(templateClass, \"clone\");",
      "info" : "ExpressionStatement[7194-7239]:ExpressionStatement[8806-8851]"
    }, {
      "left" : "overrideCopierMethod(templateClass, \"copy\");",
      "right" : "overrideCopierMethod(templateClass, \"copy\");",
      "info" : "ExpressionStatement[7244-7288]:ExpressionStatement[8856-8900]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[7296-7303]:Modifier[8908-8915]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[7304-7310]:Modifier[8916-8922]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[7311-7318]:PrimitiveType[8923-8930]"
    }, {
      "left" : "hasNestedFields",
      "right" : "hasNestedFields",
      "info" : "SimpleName[7319-7334]:SimpleName[8931-8946]"
    }, {
      "left" : "DataSchema schema",
      "right" : "DataSchema schema",
      "info" : "SingleVariableDeclaration[7335-7352]:SingleVariableDeclaration[8947-8964]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7356-7827]:Block[8968-9439]"
    }, {
      "left" : "while (true)",
      "right" : "while (true)",
      "info" : "WhileStatement[7362-7823]:WhileStatement[8974-9435]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7379-7823]:Block[8991-9435]"
    }, {
      "left" : "switch (schema.getDereferencedType())\n      {\n        case RECORD:\n          return true;\n        case UNION:\n          return true;\n        case ARRAY:\n          schema = ((ArrayDataSchema) schema.getDereferencedDataSchema()).getItems();\n          continue;\n        case MAP:\n          schema = ((MapDataSchema) schema.getDereferencedDataSchema()).getValues();\n          continue;\n        default:\n          return false;\n      }",
      "right" : "switch (schema.getDereferencedType())\n      {\n        case RECORD:\n          return true;\n        case UNION:\n          return true;\n        case ARRAY:\n          schema = ((ArrayDataSchema) schema.getDereferencedDataSchema()).getItems();\n          continue;\n        case MAP:\n          schema = ((MapDataSchema) schema.getDereferencedDataSchema()).getValues();\n          continue;\n        default:\n          return false;\n      }",
      "info" : "SwitchStatement[7387-7817]:SwitchStatement[8999-9429]"
    }, {
      "left" : "case RECORD:",
      "right" : "case RECORD:",
      "info" : "SwitchCase[7441-7453]:SwitchCase[9053-9065]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[7464-7476]:ReturnStatement[9076-9088]"
    }, {
      "left" : "case UNION:",
      "right" : "case UNION:",
      "info" : "SwitchCase[7485-7496]:SwitchCase[9097-9108]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[7507-7519]:ReturnStatement[9119-9131]"
    }, {
      "left" : "case ARRAY:",
      "right" : "case ARRAY:",
      "info" : "SwitchCase[7528-7539]:SwitchCase[9140-9151]"
    }, {
      "left" : "schema = ((ArrayDataSchema) schema.getDereferencedDataSchema()).getItems();",
      "right" : "schema = ((ArrayDataSchema) schema.getDereferencedDataSchema()).getItems();",
      "info" : "ExpressionStatement[7550-7625]:ExpressionStatement[9162-9237]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[7636-7645]:ContinueStatement[9248-9257]"
    }, {
      "left" : "case MAP:",
      "right" : "case MAP:",
      "info" : "SwitchCase[7654-7663]:SwitchCase[9266-9275]"
    }, {
      "left" : "schema = ((MapDataSchema) schema.getDereferencedDataSchema()).getValues();",
      "right" : "schema = ((MapDataSchema) schema.getDereferencedDataSchema()).getValues();",
      "info" : "ExpressionStatement[7674-7748]:ExpressionStatement[9286-9360]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[7759-7768]:ContinueStatement[9371-9380]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[7777-7785]:SwitchCase[9389-9397]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[7796-7809]:ReturnStatement[9408-9421]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[7831-7838]:Modifier[9443-9450]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[7839-7845]:Modifier[9451-9457]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[7846-7850]:PrimitiveType[9458-9462]"
    }, {
      "left" : "generateConstructorWithNoArg",
      "right" : "generateConstructorWithNoArg",
      "info" : "SimpleName[7851-7879]:SimpleName[9463-9491]"
    }, {
      "left" : "JDefinedClass cls",
      "right" : "JDefinedClass cls",
      "info" : "SingleVariableDeclaration[7880-7897]:SingleVariableDeclaration[9492-9509]"
    }, {
      "left" : "JVar schemaField",
      "right" : "JVar schemaField",
      "info" : "SingleVariableDeclaration[7899-7915]:SingleVariableDeclaration[9511-9527]"
    }, {
      "left" : "JClass newClass",
      "right" : "JClass newClass",
      "info" : "SingleVariableDeclaration[7917-7932]:SingleVariableDeclaration[9529-9544]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7936-8094]:Block[9548-9706]"
    }, {
      "left" : "final JMethod noArgConstructor = cls.constructor(JMod.PUBLIC);",
      "right" : "final JMethod noArgConstructor = cls.constructor(JMod.PUBLIC);",
      "info" : "VariableDeclarationStatement[7942-8004]:VariableDeclarationStatement[9554-9616]"
    }, {
      "left" : "noArgConstructor.body().invoke(SUPER).arg(JExpr._new(newClass)).arg(schemaField);",
      "right" : "noArgConstructor.body().invoke(SUPER).arg(JExpr._new(newClass)).arg(schemaField);",
      "info" : "ExpressionStatement[8009-8090]:ExpressionStatement[9621-9702]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[8098-8105]:Modifier[9710-9717]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[8106-8112]:Modifier[9718-9724]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[8113-8117]:PrimitiveType[9725-9729]"
    }, {
      "left" : "generateConstructorWithNoArg",
      "right" : "generateConstructorWithNoArg",
      "info" : "SimpleName[8118-8146]:SimpleName[9730-9758]"
    }, {
      "left" : "JDefinedClass cls",
      "right" : "JDefinedClass cls",
      "info" : "SingleVariableDeclaration[8147-8164]:SingleVariableDeclaration[9759-9776]"
    }, {
      "left" : "JClass newClass",
      "right" : "JClass newClass",
      "info" : "SingleVariableDeclaration[8166-8181]:SingleVariableDeclaration[9778-9793]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8185-8325]:Block[9797-9937]"
    }, {
      "left" : "final JMethod noArgConstructor = cls.constructor(JMod.PUBLIC);",
      "right" : "final JMethod noArgConstructor = cls.constructor(JMod.PUBLIC);",
      "info" : "VariableDeclarationStatement[8191-8253]:VariableDeclarationStatement[9803-9865]"
    }, {
      "left" : "noArgConstructor.body().invoke(THIS).arg(JExpr._new(newClass));",
      "right" : "noArgConstructor.body().invoke(THIS).arg(JExpr._new(newClass));",
      "info" : "ExpressionStatement[8258-8321]:ExpressionStatement[9870-9933]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[8329-8336]:Modifier[9941-9948]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[8337-8343]:Modifier[9949-9955]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[8344-8348]:PrimitiveType[9956-9960]"
    }, {
      "left" : "generateConstructorWithObjectArg",
      "right" : "generateConstructorWithObjectArg",
      "info" : "SimpleName[8349-8381]:SimpleName[9961-9993]"
    }, {
      "left" : "JDefinedClass cls",
      "right" : "JDefinedClass cls",
      "info" : "SingleVariableDeclaration[8382-8399]:SingleVariableDeclaration[9994-10011]"
    }, {
      "left" : "JVar schemaField",
      "right" : "JVar schemaField",
      "info" : "SingleVariableDeclaration[8401-8417]:SingleVariableDeclaration[10013-10029]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8421-8627]:Block[10033-10239]"
    }, {
      "left" : "final JMethod argConstructor = cls.constructor(JMod.PUBLIC);",
      "right" : "final JMethod argConstructor = cls.constructor(JMod.PUBLIC);",
      "info" : "VariableDeclarationStatement[8427-8487]:VariableDeclarationStatement[10039-10099]"
    }, {
      "left" : "final JVar param = argConstructor.param(Object.class, \"data\");",
      "right" : "final JVar param = argConstructor.param(Object.class, \"data\");",
      "info" : "VariableDeclarationStatement[8492-8554]:VariableDeclarationStatement[10104-10166]"
    }, {
      "left" : "argConstructor.body().invoke(SUPER).arg(param).arg(schemaField);",
      "right" : "argConstructor.body().invoke(SUPER).arg(param).arg(schemaField);",
      "info" : "ExpressionStatement[8559-8623]:ExpressionStatement[10171-10235]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[8631-8638]:Modifier[10243-10250]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[8639-8645]:Modifier[10251-10257]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[8646-8650]:PrimitiveType[10258-10262]"
    }, {
      "left" : "generateConstructorWithArg",
      "right" : "generateConstructorWithArg",
      "info" : "SimpleName[8651-8677]:SimpleName[10263-10289]"
    }, {
      "left" : "JDefinedClass cls",
      "right" : "JDefinedClass cls",
      "info" : "SingleVariableDeclaration[8678-8695]:SingleVariableDeclaration[10290-10307]"
    }, {
      "left" : "JVar schemaField",
      "right" : "JVar schemaField",
      "info" : "SingleVariableDeclaration[8697-8713]:SingleVariableDeclaration[10309-10325]"
    }, {
      "left" : "JClass paramClass",
      "right" : "JClass paramClass",
      "info" : "SingleVariableDeclaration[8715-8732]:SingleVariableDeclaration[10327-10344]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8736-8940]:Block[10348-10552]"
    }, {
      "left" : "final JMethod argConstructor = cls.constructor(JMod.PUBLIC);",
      "right" : "final JMethod argConstructor = cls.constructor(JMod.PUBLIC);",
      "info" : "VariableDeclarationStatement[8742-8802]:VariableDeclarationStatement[10354-10414]"
    }, {
      "left" : "final JVar param = argConstructor.param(paramClass, \"data\");",
      "right" : "final JVar param = argConstructor.param(paramClass, \"data\");",
      "info" : "VariableDeclarationStatement[8807-8867]:VariableDeclarationStatement[10419-10479]"
    }, {
      "left" : "argConstructor.body().invoke(SUPER).arg(param).arg(schemaField);",
      "right" : "argConstructor.body().invoke(SUPER).arg(param).arg(schemaField);",
      "info" : "ExpressionStatement[8872-8936]:ExpressionStatement[10484-10548]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[8944-8951]:Modifier[10556-10563]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[8952-8958]:Modifier[10564-10570]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[8959-8963]:PrimitiveType[10571-10575]"
    }, {
      "left" : "generateConstructorWithArg",
      "right" : "generateConstructorWithArg",
      "info" : "SimpleName[8964-8990]:SimpleName[10576-10602]"
    }, {
      "left" : "JDefinedClass cls",
      "right" : "JDefinedClass cls",
      "info" : "SingleVariableDeclaration[8991-9008]:SingleVariableDeclaration[10603-10620]"
    }, {
      "left" : "JVar schemaField",
      "right" : "JVar schemaField",
      "info" : "SingleVariableDeclaration[9010-9026]:SingleVariableDeclaration[10622-10638]"
    }, {
      "left" : "JClass paramClass",
      "right" : "JClass paramClass",
      "info" : "SingleVariableDeclaration[9028-9045]:SingleVariableDeclaration[10640-10657]"
    }, {
      "left" : "JClass elementClass",
      "right" : "JClass elementClass",
      "info" : "SingleVariableDeclaration[9047-9066]:SingleVariableDeclaration[10659-10678]"
    }, {
      "left" : "JClass dataClass",
      "right" : "JClass dataClass",
      "info" : "SingleVariableDeclaration[9068-9084]:SingleVariableDeclaration[10680-10696]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9088-9384]:Block[10700-10996]"
    }, {
      "left" : "final JMethod argConstructor = cls.constructor(JMod.PUBLIC);",
      "right" : "final JMethod argConstructor = cls.constructor(JMod.PUBLIC);",
      "info" : "VariableDeclarationStatement[9094-9154]:VariableDeclarationStatement[10706-10766]"
    }, {
      "left" : "final JVar param = argConstructor.param(paramClass, \"data\");",
      "right" : "final JVar param = argConstructor.param(paramClass, \"data\");",
      "info" : "VariableDeclarationStatement[9159-9219]:VariableDeclarationStatement[10771-10831]"
    }, {
      "left" : "final JInvocation inv = argConstructor.body().invoke(SUPER).arg(param).arg(schemaField).arg(JExpr.dotclass(elementClass));",
      "right" : "final JInvocation inv = argConstructor.body().invoke(SUPER).arg(param).arg(schemaField).arg(JExpr.dotclass(elementClass));",
      "info" : "VariableDeclarationStatement[9224-9346]:VariableDeclarationStatement[10836-10958]"
    }, {
      "left" : "dataClassArg(inv, dataClass);",
      "right" : "dataClassArg(inv, dataClass);",
      "info" : "ExpressionStatement[9351-9380]:ExpressionStatement[10963-10992]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[10809-10816]:Modifier[12421-12428]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[10817-10823]:Modifier[12429-12435]"
    }, {
      "left" : "DataSchema",
      "right" : "DataSchema",
      "info" : "SimpleType[10824-10834]:SimpleType[12436-12446]"
    }, {
      "left" : "schemaForArrayItemsOrMapValues",
      "right" : "schemaForArrayItemsOrMapValues",
      "info" : "SimpleName[10835-10865]:SimpleName[12447-12477]"
    }, {
      "left" : "CustomInfoSpec customInfo",
      "right" : "CustomInfoSpec customInfo",
      "info" : "SingleVariableDeclaration[10866-10891]:SingleVariableDeclaration[12478-12503]"
    }, {
      "left" : "DataSchema schema",
      "right" : "DataSchema schema",
      "info" : "SingleVariableDeclaration[10893-10910]:SingleVariableDeclaration[12505-12522]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10914-11018]:Block[12526-12630]"
    }, {
      "left" : "return customInfo != null ? customInfo.getCustomSchema() : schema.getDereferencedDataSchema();",
      "right" : "return customInfo != null ? customInfo.getCustomSchema() : schema.getDereferencedDataSchema();",
      "info" : "ReturnStatement[10920-11014]:ReturnStatement[12532-12626]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[11022-11029]:Modifier[12634-12641]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[11030-11036]:Modifier[12642-12648]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[11037-11041]:PrimitiveType[12649-12653]"
    }, {
      "left" : "overrideCopierMethod",
      "right" : "overrideCopierMethod",
      "info" : "SimpleName[11042-11062]:SimpleName[12654-12674]"
    }, {
      "left" : "JDefinedClass templateClass",
      "right" : "JDefinedClass templateClass",
      "info" : "SingleVariableDeclaration[11063-11090]:SingleVariableDeclaration[12675-12702]"
    }, {
      "left" : "String methodName",
      "right" : "String methodName",
      "info" : "SingleVariableDeclaration[11092-11109]:SingleVariableDeclaration[12704-12721]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11113-11411]:Block[12725-13023]"
    }, {
      "left" : "final JMethod copierMethod = templateClass.method(JMod.PUBLIC, templateClass, methodName);",
      "right" : "final JMethod copierMethod = templateClass.method(JMod.PUBLIC, templateClass, methodName);",
      "info" : "VariableDeclarationStatement[11119-11209]:VariableDeclarationStatement[12731-12821]"
    }, {
      "left" : "copierMethod.annotate(Override.class);",
      "right" : "copierMethod.annotate(Override.class);",
      "info" : "ExpressionStatement[11214-11252]:ExpressionStatement[12826-12864]"
    }, {
      "left" : "copierMethod._throws(CloneNotSupportedException.class);",
      "right" : "copierMethod._throws(CloneNotSupportedException.class);",
      "info" : "ExpressionStatement[11257-11312]:ExpressionStatement[12869-12924]"
    }, {
      "left" : "copierMethod.body()._return(JExpr.cast(templateClass, JExpr._super().invoke(methodName)));",
      "right" : "copierMethod.body()._return(JExpr.cast(templateClass, JExpr._super().invoke(methodName)));",
      "info" : "ExpressionStatement[11317-11407]:ExpressionStatement[12929-13019]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[11415-11422]:Modifier[13027-13034]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[11423-11429]:Modifier[13035-13041]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[11430-11434]:PrimitiveType[13042-13046]"
    }, {
      "left" : "setDeprecatedAnnotationAndJavadoc",
      "right" : "setDeprecatedAnnotationAndJavadoc",
      "info" : "SimpleName[11435-11468]:SimpleName[13047-13080]"
    }, {
      "left" : "DataSchema schema",
      "right" : "DataSchema schema",
      "info" : "SingleVariableDeclaration[11469-11486]:SingleVariableDeclaration[13081-13098]"
    }, {
      "left" : "JDefinedClass schemaClass",
      "right" : "JDefinedClass schemaClass",
      "info" : "SingleVariableDeclaration[11488-11513]:SingleVariableDeclaration[13100-13125]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11517-11631]:Block[13129-13243]"
    }, {
      "left" : "setDeprecatedAnnotationAndJavadoc(schema.getProperties().get(DEPRECATED_KEY), schemaClass, schemaClass);",
      "right" : "setDeprecatedAnnotationAndJavadoc(schema.getProperties().get(DEPRECATED_KEY), schemaClass, schemaClass);",
      "info" : "ExpressionStatement[11523-11627]:ExpressionStatement[13135-13239]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[11635-11642]:Modifier[13247-13254]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[11643-11649]:Modifier[13255-13261]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[11650-11654]:PrimitiveType[13262-13266]"
    }, {
      "left" : "setDeprecatedAnnotationAndJavadoc",
      "right" : "setDeprecatedAnnotationAndJavadoc",
      "info" : "SimpleName[11655-11688]:SimpleName[13267-13300]"
    }, {
      "left" : "JMethod method",
      "right" : "JMethod method",
      "info" : "SingleVariableDeclaration[11689-11703]:SingleVariableDeclaration[13301-13315]"
    }, {
      "left" : "RecordDataSchema.Field field",
      "right" : "RecordDataSchema.Field field",
      "info" : "SingleVariableDeclaration[11705-11733]:SingleVariableDeclaration[13317-13345]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11737-11840]:Block[13349-13452]"
    }, {
      "left" : "setDeprecatedAnnotationAndJavadoc(field.getProperties().get(DEPRECATED_KEY), method, method);",
      "right" : "setDeprecatedAnnotationAndJavadoc(field.getProperties().get(DEPRECATED_KEY), method, method);",
      "info" : "ExpressionStatement[11743-11836]:ExpressionStatement[13355-13448]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[11844-11851]:Modifier[13456-13463]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[11852-11858]:Modifier[13464-13470]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[11859-11863]:PrimitiveType[13471-13475]"
    }, {
      "left" : "setDeprecatedAnnotationAndJavadoc",
      "right" : "setDeprecatedAnnotationAndJavadoc",
      "info" : "SimpleName[11864-11897]:SimpleName[13476-13509]"
    }, {
      "left" : "EnumDataSchema enumSchema",
      "right" : "EnumDataSchema enumSchema",
      "info" : "SingleVariableDeclaration[11898-11923]:SingleVariableDeclaration[13510-13535]"
    }, {
      "left" : "String symbol",
      "right" : "String symbol",
      "info" : "SingleVariableDeclaration[11925-11938]:SingleVariableDeclaration[13537-13550]"
    }, {
      "left" : "JEnumConstant constant",
      "right" : "JEnumConstant constant",
      "info" : "SingleVariableDeclaration[11940-11962]:SingleVariableDeclaration[13552-13574]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11966-12348]:Block[13578-13960]"
    }, {
      "left" : "final Object deprecatedSymbolsProp = enumSchema.getProperties().get(DEPRECATED_SYMBOLS_KEY);",
      "right" : "final Object deprecatedSymbolsProp = enumSchema.getProperties().get(DEPRECATED_SYMBOLS_KEY);",
      "info" : "VariableDeclarationStatement[11972-12064]:VariableDeclarationStatement[13584-13676]"
    }, {
      "left" : "if (deprecatedSymbolsProp instanceof DataMap)",
      "right" : "if (deprecatedSymbolsProp instanceof DataMap)",
      "info" : "IfStatement[12069-12344]:IfStatement[13681-13956]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12119-12344]:Block[13731-13956]"
    }, {
      "left" : "final DataMap deprecatedSymbols = (DataMap) deprecatedSymbolsProp;",
      "right" : "final DataMap deprecatedSymbols = (DataMap) deprecatedSymbolsProp;",
      "info" : "VariableDeclarationStatement[12127-12193]:VariableDeclarationStatement[13739-13805]"
    }, {
      "left" : "final Object deprecatedProp = deprecatedSymbols.get(symbol);",
      "right" : "final Object deprecatedProp = deprecatedSymbols.get(symbol);",
      "info" : "VariableDeclarationStatement[12201-12261]:VariableDeclarationStatement[13813-13873]"
    }, {
      "left" : "setDeprecatedAnnotationAndJavadoc(deprecatedProp, constant, constant);",
      "right" : "setDeprecatedAnnotationAndJavadoc(deprecatedProp, constant, constant);",
      "info" : "ExpressionStatement[12268-12338]:ExpressionStatement[13880-13950]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[12352-12359]:Modifier[13964-13971]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[12360-12366]:Modifier[13972-13978]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[12367-12371]:PrimitiveType[13979-13983]"
    }, {
      "left" : "setDeprecatedAnnotationAndJavadoc",
      "right" : "setDeprecatedAnnotationAndJavadoc",
      "info" : "SimpleName[12372-12405]:SimpleName[13984-14017]"
    }, {
      "left" : "Object deprecatedProp",
      "right" : "Object deprecatedProp",
      "info" : "SingleVariableDeclaration[12406-12427]:SingleVariableDeclaration[14018-14039]"
    }, {
      "left" : "JAnnotatable annotatable",
      "right" : "JAnnotatable annotatable",
      "info" : "SingleVariableDeclaration[12429-12453]:SingleVariableDeclaration[14041-14065]"
    }, {
      "left" : "JDocCommentable commentable",
      "right" : "JDocCommentable commentable",
      "info" : "SingleVariableDeclaration[12455-12482]:SingleVariableDeclaration[14067-14094]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12486-12955]:Block[14098-14567]"
    }, {
      "left" : "if (Boolean.TRUE.equals(deprecatedProp) && annotatable != null)",
      "right" : "if (Boolean.TRUE.equals(deprecatedProp) && annotatable != null)",
      "info" : "IfStatement[12492-12951]:IfStatement[14104-14563]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12560-12613]:Block[14172-14225]"
    }, {
      "left" : "annotatable.annotate(Deprecated.class);",
      "right" : "annotatable.annotate(Deprecated.class);",
      "info" : "ExpressionStatement[12568-12607]:ExpressionStatement[14180-14219]"
    }, {
      "left" : "if (deprecatedProp instanceof String)",
      "right" : "if (deprecatedProp instanceof String)",
      "info" : "IfStatement[12623-12951]:IfStatement[14235-14563]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12665-12951]:Block[14277-14563]"
    }, {
      "left" : "if (commentable != null)",
      "right" : "if (commentable != null)",
      "info" : "IfStatement[12673-12850]:IfStatement[14285-14462]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12704-12850]:Block[14316-14462]"
    }, {
      "left" : "final String deprecatedReason = (String) deprecatedProp;",
      "right" : "final String deprecatedReason = (String) deprecatedProp;",
      "info" : "VariableDeclarationStatement[12714-12770]:VariableDeclarationStatement[14326-14382]"
    }, {
      "left" : "commentable.javadoc().addDeprecated().append(deprecatedReason);",
      "right" : "commentable.javadoc().addDeprecated().append(deprecatedReason);",
      "info" : "ExpressionStatement[12779-12842]:ExpressionStatement[14391-14454]"
    }, {
      "left" : "if (annotatable != null)",
      "right" : "if (annotatable != null)",
      "info" : "IfStatement[12857-12945]:IfStatement[14469-14557]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12888-12945]:Block[14500-14557]"
    }, {
      "left" : "annotatable.annotate(Deprecated.class);",
      "right" : "annotatable.annotate(Deprecated.class);",
      "info" : "ExpressionStatement[12898-12937]:ExpressionStatement[14510-14549]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[12959-12966]:Modifier[14571-14578]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[12967-12973]:Modifier[14579-14585]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[12974-12977]:PrimitiveType[14586-14589]"
    }, {
      "left" : "getJModValue",
      "right" : "getJModValue",
      "info" : "SimpleName[12978-12990]:SimpleName[14590-14602]"
    }, {
      "left" : "Set<ModifierSpec> modifiers",
      "right" : "Set<ModifierSpec> modifiers",
      "info" : "SingleVariableDeclaration[12991-13018]:SingleVariableDeclaration[14603-14630]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13022-13386]:Block[14634-14998]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[13028-13382]:TryStatement[14640-14994]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13036-13212]:Block[14648-14824]"
    }, {
      "left" : "int value = 0;",
      "right" : "int value = 0;",
      "info" : "VariableDeclarationStatement[13044-13058]:VariableDeclarationStatement[14656-14670]"
    }, {
      "left" : "for (ModifierSpec mod : modifiers)",
      "right" : "for (ModifierSpec mod : modifiers)",
      "info" : "EnhancedForStatement[13065-13186]:EnhancedForStatement[14677-14798]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13106-13186]:Block[14718-14798]"
    }, {
      "left" : "value |= JMod.class.getDeclaredField(mod.name()).getInt(null);",
      "right" : "value |= JMod.class.getDeclaredField(mod.name()).getInt(null);",
      "info" : "ExpressionStatement[13116-13178]:ExpressionStatement[14728-14790]"
    }, {
      "left" : "return value;",
      "right" : "return value;",
      "info" : "ReturnStatement[13193-13206]:ReturnStatement[14805-14818]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13252-13296]:Block[14864-14908]"
    }, {
      "left" : "throw new RuntimeException(e);",
      "right" : "throw new RuntimeException(e);",
      "info" : "ThrowStatement[13260-13290]:ThrowStatement[14872-14902]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13338-13382]:Block[14950-14994]"
    }, {
      "left" : "throw new RuntimeException(e);",
      "right" : "throw new RuntimeException(e);",
      "info" : "ThrowStatement[13346-13376]:ThrowStatement[14958-14988]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[13390-13397]:Modifier[15002-15009]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[13398-13404]:Modifier[15010-15016]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[13405-13409]:PrimitiveType[15017-15021]"
    }, {
      "left" : "addAccessorDoc",
      "right" : "addAccessorDoc",
      "info" : "SimpleName[13410-13424]:SimpleName[15022-15036]"
    }, {
      "left" : "JMethod method",
      "right" : "JMethod method",
      "info" : "SingleVariableDeclaration[13425-13439]:SingleVariableDeclaration[15037-15051]"
    }, {
      "left" : "RecordDataSchema.Field field",
      "right" : "RecordDataSchema.Field field",
      "info" : "SingleVariableDeclaration[13441-13469]:SingleVariableDeclaration[15053-15081]"
    }, {
      "left" : "String prefix",
      "right" : "String prefix",
      "info" : "SingleVariableDeclaration[13471-13484]:SingleVariableDeclaration[15083-15096]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13488-13640]:Block[15100-15252]"
    }, {
      "left" : "method.javadoc().append(prefix + \" for \" + field.getName());",
      "right" : "method.javadoc().append(prefix + \" for \" + field.getName());",
      "info" : "ExpressionStatement[13494-13554]:ExpressionStatement[15106-15166]"
    }, {
      "left" : "method.javadoc().addXdoclet(\"see Fields#\" + escapeReserved(field.getName()));",
      "right" : "method.javadoc().addXdoclet(\"see Fields#\" + escapeReserved(field.getName()));",
      "info" : "ExpressionStatement[13559-13636]:ExpressionStatement[15171-15248]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[13644-13651]:Modifier[15256-15263]"
    }, {
      "left" : "JDefinedClass",
      "right" : "JDefinedClass",
      "info" : "SimpleType[13652-13665]:SimpleType[15264-15277]"
    }, {
      "left" : "defineClass",
      "right" : "defineClass",
      "info" : "SimpleName[13666-13677]:SimpleName[15278-15289]"
    }, {
      "left" : "ClassTemplateSpec classTemplateSpec",
      "right" : "ClassTemplateSpec classTemplateSpec",
      "info" : "SingleVariableDeclaration[13678-13713]:SingleVariableDeclaration[15290-15325]"
    }, {
      "left" : "JClassAlreadyExistsException",
      "right" : "JClassAlreadyExistsException",
      "info" : "SimpleType[13728-13756]:SimpleType[15340-15368]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13759-15022]:Block[15371-16634]"
    }, {
      "left" : "JDefinedClass result = _definedClasses.get(classTemplateSpec);",
      "right" : "JDefinedClass result = _definedClasses.get(classTemplateSpec);",
      "info" : "VariableDeclarationStatement[13765-13827]:VariableDeclarationStatement[15377-15439]"
    }, {
      "left" : "if (result == null)",
      "right" : "if (result == null)",
      "info" : "IfStatement[13832-14998]:IfStatement[15444-16610]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13856-14998]:Block[15468-16610]"
    }, {
      "left" : "final int jmodValue = getJModValue(classTemplateSpec.getModifiers());",
      "right" : "final int jmodValue = getJModValue(classTemplateSpec.getModifiers());",
      "info" : "VariableDeclarationStatement[13864-13933]:VariableDeclarationStatement[15476-15545]"
    }, {
      "left" : "final JClassContainer container;",
      "right" : "final JClassContainer container;",
      "info" : "VariableDeclarationStatement[13940-13972]:VariableDeclarationStatement[15552-15584]"
    }, {
      "left" : "if (classTemplateSpec.getEnclosingClass() == null)",
      "right" : "if (classTemplateSpec.getEnclosingClass() == null)",
      "info" : "IfStatement[13979-14210]:IfStatement[15591-15822]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14036-14111]:Block[15648-15723]"
    }, {
      "left" : "container = getPackage(classTemplateSpec.getNamespace());",
      "right" : "container = getPackage(classTemplateSpec.getNamespace());",
      "info" : "ExpressionStatement[14046-14103]:ExpressionStatement[15658-15715]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14129-14210]:Block[15741-15822]"
    }, {
      "left" : "container = defineClass(classTemplateSpec.getEnclosingClass());",
      "right" : "container = defineClass(classTemplateSpec.getEnclosingClass());",
      "info" : "ExpressionStatement[14139-14202]:ExpressionStatement[15751-15814]"
    }, {
      "left" : "if (classTemplateSpec instanceof ArrayTemplateSpec ||\n          classTemplateSpec instanceof FixedTemplateSpec ||\n          classTemplateSpec instanceof MapTemplateSpec ||\n          classTemplateSpec instanceof RecordTemplateSpec ||\n          classTemplateSpec instanceof TyperefTemplateSpec ||\n          classTemplateSpec instanceof UnionTemplateSpec)",
      "right" : "if (classTemplateSpec instanceof ArrayTemplateSpec ||\n          classTemplateSpec instanceof FixedTemplateSpec ||\n          classTemplateSpec instanceof MapTemplateSpec ||\n          classTemplateSpec instanceof RecordTemplateSpec ||\n          classTemplateSpec instanceof TyperefTemplateSpec ||\n          classTemplateSpec instanceof UnionTemplateSpec)",
      "info" : "IfStatement[14218-14937]:IfStatement[15830-16549]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14577-14682]:Block[16189-16294]"
    }, {
      "left" : "result = container._class(jmodValue, escapeReserved(classTemplateSpec.getClassName()));",
      "right" : "result = container._class(jmodValue, escapeReserved(classTemplateSpec.getClassName()));",
      "info" : "ExpressionStatement[14587-14674]:ExpressionStatement[16199-16286]"
    }, {
      "left" : "if (classTemplateSpec instanceof EnumTemplateSpec)",
      "right" : "if (classTemplateSpec instanceof EnumTemplateSpec)",
      "info" : "IfStatement[14694-14937]:IfStatement[16306-16549]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14751-14872]:Block[16363-16484]"
    }, {
      "left" : "result = container._class(jmodValue, escapeReserved(classTemplateSpec.getClassName()), ClassType.ENUM);",
      "right" : "result = container._class(jmodValue, escapeReserved(classTemplateSpec.getClassName()), ClassType.ENUM);",
      "info" : "ExpressionStatement[14761-14864]:ExpressionStatement[16373-16476]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14890-14937]:Block[16502-16549]"
    }, {
      "left" : "throw new RuntimeException();",
      "right" : "throw new RuntimeException();",
      "info" : "ThrowStatement[14900-14929]:ThrowStatement[16512-16541]"
    }, {
      "left" : "_definedClasses.put(classTemplateSpec, result);",
      "right" : "_definedClasses.put(classTemplateSpec, result);",
      "info" : "ExpressionStatement[14945-14992]:ExpressionStatement[16557-16604]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[15004-15018]:ReturnStatement[16616-16630]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[16417-16426]:Modifier[18273-18282]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[16427-16431]:PrimitiveType[18283-18287]"
    }, {
      "left" : "generateEnum",
      "right" : "generateEnum",
      "info" : "SimpleName[16432-16444]:SimpleName[18288-18300]"
    }, {
      "left" : "JDefinedClass enumClass",
      "right" : "JDefinedClass enumClass",
      "info" : "SingleVariableDeclaration[16445-16468]:SingleVariableDeclaration[18301-18324]"
    }, {
      "left" : "EnumTemplateSpec enumSpec",
      "right" : "EnumTemplateSpec enumSpec",
      "info" : "SingleVariableDeclaration[16470-16495]:SingleVariableDeclaration[18326-18351]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16499-17357]:Block[18355-19213]"
    }, {
      "left" : "enumClass.javadoc().append(enumSpec.getSchema().getDoc());",
      "right" : "enumClass.javadoc().append(enumSpec.getSchema().getDoc());",
      "info" : "ExpressionStatement[16505-16563]:ExpressionStatement[18361-18419]"
    }, {
      "left" : "setDeprecatedAnnotationAndJavadoc(enumSpec.getSchema(), enumClass);",
      "right" : "setDeprecatedAnnotationAndJavadoc(enumSpec.getSchema(), enumClass);",
      "info" : "ExpressionStatement[16569-16636]:ExpressionStatement[18425-18492]"
    }, {
      "left" : "generateSchemaField(enumClass, enumSpec.getSchema());",
      "right" : "generateSchemaField(enumClass, enumSpec.getSchema());",
      "info" : "ExpressionStatement[16642-16695]:ExpressionStatement[18498-18551]"
    }, {
      "left" : "for (String value : enumSpec.getSchema().getSymbols())",
      "right" : "for (String value : enumSpec.getSchema().getSymbols())",
      "info" : "EnhancedForStatement[16701-17294]:EnhancedForStatement[18557-19150]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16760-17294]:Block[18616-19150]"
    }, {
      "left" : "if (isReserved(value))",
      "right" : "if (isReserved(value))",
      "info" : "IfStatement[16768-16935]:IfStatement[18624-18791]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16797-16935]:Block[18653-18791]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Enum contains Java reserved symbol: \" + value + \" schema: \" + enumSpec.getSchema());",
      "right" : "throw new IllegalArgumentException(\"Enum contains Java reserved symbol: \" + value + \" schema: \" + enumSpec.getSchema());",
      "info" : "ThrowStatement[16807-16927]:ThrowStatement[18663-18783]"
    }, {
      "left" : "final JEnumConstant enumConstant = enumClass.enumConstant(value);",
      "right" : "final JEnumConstant enumConstant = enumClass.enumConstant(value);",
      "info" : "VariableDeclarationStatement[16943-17008]:VariableDeclarationStatement[18799-18864]"
    }, {
      "left" : "final String enumConstantDoc = enumSpec.getSchema().getSymbolDocs().get(value);",
      "right" : "final String enumConstantDoc = enumSpec.getSchema().getSymbolDocs().get(value);",
      "info" : "VariableDeclarationStatement[17016-17095]:VariableDeclarationStatement[18872-18951]"
    }, {
      "left" : "if (enumConstantDoc != null)",
      "right" : "if (enumConstantDoc != null)",
      "info" : "IfStatement[17103-17203]:IfStatement[18959-19059]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17138-17203]:Block[18994-19059]"
    }, {
      "left" : "enumConstant.javadoc().append(enumConstantDoc);",
      "right" : "enumConstant.javadoc().append(enumConstantDoc);",
      "info" : "ExpressionStatement[17148-17195]:ExpressionStatement[19004-19051]"
    }, {
      "left" : "setDeprecatedAnnotationAndJavadoc(enumSpec.getSchema(), value, enumConstant);",
      "right" : "setDeprecatedAnnotationAndJavadoc(enumSpec.getSchema(), value, enumConstant);",
      "info" : "ExpressionStatement[17211-17288]:ExpressionStatement[19067-19144]"
    }, {
      "left" : "enumClass.enumConstant(DataTemplateUtil.UNKNOWN_ENUM);",
      "right" : "enumClass.enumConstant(DataTemplateUtil.UNKNOWN_ENUM);",
      "info" : "ExpressionStatement[17299-17353]:ExpressionStatement[19155-19209]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[19313-19320]:Modifier[21445-21452]"
    }, {
      "left" : "JClass",
      "right" : "JClass",
      "info" : "SimpleType[19321-19327]:SimpleType[21453-21459]"
    }, {
      "left" : "generatePrimitive",
      "right" : "generatePrimitive",
      "info" : "SimpleName[19328-19345]:SimpleName[21460-21477]"
    }, {
      "left" : "PrimitiveTemplateSpec primitiveSpec",
      "right" : "PrimitiveTemplateSpec primitiveSpec",
      "info" : "SingleVariableDeclaration[19346-19381]:SingleVariableDeclaration[21478-21513]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19385-19973]:Block[21517-22105]"
    }, {
      "left" : "switch (primitiveSpec.getSchema().getType())\n    {\n      case INT:\n        return getCodeModel().INT.boxify();\n\n      case DOUBLE:\n        return getCodeModel().DOUBLE.boxify();\n\n      case BOOLEAN:\n        return getCodeModel().BOOLEAN.boxify();\n\n      case STRING:\n        return _stringClass;\n\n      case LONG:\n        return getCodeModel().LONG.boxify();\n\n      case FLOAT:\n        return getCodeModel().FLOAT.boxify();\n\n      case BYTES:\n        return _byteStringClass;\n\n      default:\n        throw new RuntimeException(\"Not supported primitive: \" + primitiveSpec);\n    }",
      "right" : "switch (primitiveSpec.getSchema().getType())\n    {\n      case INT:\n        return getCodeModel().INT.boxify();\n\n      case DOUBLE:\n        return getCodeModel().DOUBLE.boxify();\n\n      case BOOLEAN:\n        return getCodeModel().BOOLEAN.boxify();\n\n      case STRING:\n        return _stringClass;\n\n      case LONG:\n        return getCodeModel().LONG.boxify();\n\n      case FLOAT:\n        return getCodeModel().FLOAT.boxify();\n\n      case BYTES:\n        return _byteStringClass;\n\n      default:\n        throw new RuntimeException(\"Not supported primitive: \" + primitiveSpec);\n    }",
      "info" : "SwitchStatement[19391-19969]:SwitchStatement[21523-22101]"
    }, {
      "left" : "case INT:",
      "right" : "case INT:",
      "info" : "SwitchCase[19448-19457]:SwitchCase[21580-21589]"
    }, {
      "left" : "return getCodeModel().INT.boxify();",
      "right" : "return getCodeModel().INT.boxify();",
      "info" : "ReturnStatement[19466-19501]:ReturnStatement[21598-21633]"
    }, {
      "left" : "case DOUBLE:",
      "right" : "case DOUBLE:",
      "info" : "SwitchCase[19509-19521]:SwitchCase[21641-21653]"
    }, {
      "left" : "return getCodeModel().DOUBLE.boxify();",
      "right" : "return getCodeModel().DOUBLE.boxify();",
      "info" : "ReturnStatement[19530-19568]:ReturnStatement[21662-21700]"
    }, {
      "left" : "case BOOLEAN:",
      "right" : "case BOOLEAN:",
      "info" : "SwitchCase[19576-19589]:SwitchCase[21708-21721]"
    }, {
      "left" : "return getCodeModel().BOOLEAN.boxify();",
      "right" : "return getCodeModel().BOOLEAN.boxify();",
      "info" : "ReturnStatement[19598-19637]:ReturnStatement[21730-21769]"
    }, {
      "left" : "case STRING:",
      "right" : "case STRING:",
      "info" : "SwitchCase[19645-19657]:SwitchCase[21777-21789]"
    }, {
      "left" : "return _stringClass;",
      "right" : "return _stringClass;",
      "info" : "ReturnStatement[19666-19686]:ReturnStatement[21798-21818]"
    }, {
      "left" : "case LONG:",
      "right" : "case LONG:",
      "info" : "SwitchCase[19694-19704]:SwitchCase[21826-21836]"
    }, {
      "left" : "return getCodeModel().LONG.boxify();",
      "right" : "return getCodeModel().LONG.boxify();",
      "info" : "ReturnStatement[19713-19749]:ReturnStatement[21845-21881]"
    }, {
      "left" : "case FLOAT:",
      "right" : "case FLOAT:",
      "info" : "SwitchCase[19757-19768]:SwitchCase[21889-21900]"
    }, {
      "left" : "return getCodeModel().FLOAT.boxify();",
      "right" : "return getCodeModel().FLOAT.boxify();",
      "info" : "ReturnStatement[19777-19814]:ReturnStatement[21909-21946]"
    }, {
      "left" : "case BYTES:",
      "right" : "case BYTES:",
      "info" : "SwitchCase[19822-19833]:SwitchCase[21954-21965]"
    }, {
      "left" : "return _byteStringClass;",
      "right" : "return _byteStringClass;",
      "info" : "ReturnStatement[19842-19866]:ReturnStatement[21974-21998]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[19874-19882]:SwitchCase[22006-22014]"
    }, {
      "left" : "throw new RuntimeException(\"Not supported primitive: \" + primitiveSpec);",
      "right" : "throw new RuntimeException(\"Not supported primitive: \" + primitiveSpec);",
      "info" : "ThrowStatement[19891-19963]:ThrowStatement[22023-22095]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[21007-21014]:Modifier[23340-23347]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[21015-21019]:PrimitiveType[23348-23352]"
    }, {
      "left" : "generatePathSpecMethodsForRecord",
      "right" : "generatePathSpecMethodsForRecord",
      "info" : "SimpleName[21020-21052]:SimpleName[23353-23385]"
    }, {
      "left" : "List<RecordTemplateSpec.Field> fieldSpecs",
      "right" : "List<RecordTemplateSpec.Field> fieldSpecs",
      "info" : "SingleVariableDeclaration[21053-21094]:SingleVariableDeclaration[23386-23427]"
    }, {
      "left" : "JDefinedClass templateClass",
      "right" : "JDefinedClass templateClass",
      "info" : "SingleVariableDeclaration[21096-21123]:SingleVariableDeclaration[23429-23456]"
    }, {
      "left" : "JClassAlreadyExistsException",
      "right" : "JClassAlreadyExistsException",
      "info" : "SimpleType[21138-21166]:SimpleType[23471-23499]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21169-22426]:Block[23502-24759]"
    }, {
      "left" : "final JDefinedClass fieldsNestedClass = generatePathSpecNestedClass(templateClass);",
      "right" : "final JDefinedClass fieldsNestedClass = generatePathSpecNestedClass(templateClass);",
      "info" : "VariableDeclarationStatement[21175-21258]:VariableDeclarationStatement[23508-23591]"
    }, {
      "left" : "for (RecordTemplateSpec.Field field : fieldSpecs)",
      "right" : "for (RecordTemplateSpec.Field field : fieldSpecs)",
      "info" : "EnhancedForStatement[21264-22089]:EnhancedForStatement[23597-24422]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21318-22089]:Block[23651-24422]"
    }, {
      "left" : "JClass fieldsRefType = _pathSpecClass;",
      "right" : "JClass fieldsRefType = _pathSpecClass;",
      "info" : "VariableDeclarationStatement[21326-21364]:VariableDeclarationStatement[23659-23697]"
    }, {
      "left" : "if (hasNestedFields(field.getSchemaField().getType()))",
      "right" : "if (hasNestedFields(field.getSchemaField().getType()))",
      "info" : "IfStatement[21371-21579]:IfStatement[23704-23912]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21432-21579]:Block[23765-23912]"
    }, {
      "left" : "final JClass fieldType = generate(field.getType());",
      "right" : "final JClass fieldType = generate(field.getType());",
      "info" : "VariableDeclarationStatement[21442-21493]:VariableDeclarationStatement[23775-23826]"
    }, {
      "left" : "fieldsRefType = getCodeModel().ref(fieldType.fullName() + \".Fields\");",
      "right" : "fieldsRefType = getCodeModel().ref(fieldType.fullName() + \".Fields\");",
      "info" : "ExpressionStatement[21502-21571]:ExpressionStatement[23835-23904]"
    }, {
      "left" : "final JMethod constantField = fieldsNestedClass.method(JMod.PUBLIC, fieldsRefType, escapeReserved(field.getSchemaField().getName()));",
      "right" : "final JMethod constantField = fieldsNestedClass.method(JMod.PUBLIC, fieldsRefType, escapeReserved(field.getSchemaField().getName()));",
      "info" : "VariableDeclarationStatement[21587-21720]:VariableDeclarationStatement[23920-24053]"
    }, {
      "left" : "constantField.body()._return(JExpr._new(fieldsRefType).arg(JExpr.invoke(\"getPathComponents\")).arg(field.getSchemaField().getName()));",
      "right" : "constantField.body()._return(JExpr._new(fieldsRefType).arg(JExpr.invoke(\"getPathComponents\")).arg(field.getSchemaField().getName()));",
      "info" : "ExpressionStatement[21727-21860]:ExpressionStatement[24060-24193]"
    }, {
      "left" : "if (!field.getSchemaField().getDoc().isEmpty())",
      "right" : "if (!field.getSchemaField().getDoc().isEmpty())",
      "info" : "IfStatement[21867-22003]:IfStatement[24200-24336]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21921-22003]:Block[24254-24336]"
    }, {
      "left" : "constantField.javadoc().append(field.getSchemaField().getDoc());",
      "right" : "constantField.javadoc().append(field.getSchemaField().getDoc());",
      "info" : "ExpressionStatement[21931-21995]:ExpressionStatement[24264-24328]"
    }, {
      "left" : "setDeprecatedAnnotationAndJavadoc(constantField, field.getSchemaField());",
      "right" : "setDeprecatedAnnotationAndJavadoc(constantField, field.getSchemaField());",
      "info" : "ExpressionStatement[22010-22083]:ExpressionStatement[24343-24416]"
    }, {
      "left" : "final JVar staticFields = templateClass.field(JMod.PRIVATE | JMod.STATIC | JMod.FINAL, fieldsNestedClass, \"_fields\").init(JExpr._new(fieldsNestedClass));",
      "right" : "final JVar staticFields = templateClass.field(JMod.PRIVATE | JMod.STATIC | JMod.FINAL, fieldsNestedClass, \"_fields\").init(JExpr._new(fieldsNestedClass));",
      "info" : "VariableDeclarationStatement[22095-22248]:VariableDeclarationStatement[24428-24581]"
    }, {
      "left" : "final JMethod staticFieldsAccessor = templateClass.method(JMod.PUBLIC | JMod.STATIC, fieldsNestedClass, \"fields\");",
      "right" : "final JMethod staticFieldsAccessor = templateClass.method(JMod.PUBLIC | JMod.STATIC, fieldsNestedClass, \"fields\");",
      "info" : "VariableDeclarationStatement[22253-22367]:VariableDeclarationStatement[24586-24700]"
    }, {
      "left" : "staticFieldsAccessor.body()._return(staticFields);",
      "right" : "staticFieldsAccessor.body()._return(staticFields);",
      "info" : "ExpressionStatement[22372-22422]:ExpressionStatement[24705-24755]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[27234-27243]:Modifier[29621-29630]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[27244-27248]:PrimitiveType[29631-29635]"
    }, {
      "left" : "generateTyperef",
      "right" : "generateTyperef",
      "info" : "SimpleName[27249-27264]:SimpleName[29636-29651]"
    }, {
      "left" : "JDefinedClass typerefClass",
      "right" : "JDefinedClass typerefClass",
      "info" : "SingleVariableDeclaration[27265-27291]:SingleVariableDeclaration[29652-29678]"
    }, {
      "left" : "TyperefTemplateSpec typerefSpec",
      "right" : "TyperefTemplateSpec typerefSpec",
      "info" : "SingleVariableDeclaration[27293-27324]:SingleVariableDeclaration[29680-29711]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27328-27745]:Block[29715-30132]"
    }, {
      "left" : "typerefClass.javadoc().append(typerefSpec.getSchema().getDoc());",
      "right" : "typerefClass.javadoc().append(typerefSpec.getSchema().getDoc());",
      "info" : "ExpressionStatement[27334-27398]:ExpressionStatement[29721-29785]"
    }, {
      "left" : "setDeprecatedAnnotationAndJavadoc(typerefSpec.getSchema(), typerefClass);",
      "right" : "setDeprecatedAnnotationAndJavadoc(typerefSpec.getSchema(), typerefClass);",
      "info" : "ExpressionStatement[27404-27477]:ExpressionStatement[29791-29864]"
    }, {
      "left" : "typerefClass._extends(TyperefInfo.class);",
      "right" : "typerefClass._extends(TyperefInfo.class);",
      "info" : "ExpressionStatement[27483-27524]:ExpressionStatement[29870-29911]"
    }, {
      "left" : "final JVar schemaField = generateSchemaField(typerefClass, typerefSpec.getSchema());",
      "right" : "final JVar schemaField = generateSchemaField(typerefClass, typerefSpec.getSchema());",
      "info" : "VariableDeclarationStatement[27530-27614]:VariableDeclarationStatement[29917-30001]"
    }, {
      "left" : "final JMethod constructor = typerefClass.constructor(JMod.PUBLIC);",
      "right" : "final JMethod constructor = typerefClass.constructor(JMod.PUBLIC);",
      "info" : "VariableDeclarationStatement[27620-27686]:VariableDeclarationStatement[30007-30073]"
    }, {
      "left" : "constructor.body().invoke(SUPER).arg(schemaField);",
      "right" : "constructor.body().invoke(SUPER).arg(schemaField);",
      "info" : "ExpressionStatement[27691-27741]:ExpressionStatement[30078-30128]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[29349-29356]:Modifier[31925-31932]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[29357-29361]:PrimitiveType[31933-31937]"
    }, {
      "left" : "generateUnionMemberAccessors",
      "right" : "generateUnionMemberAccessors",
      "info" : "SimpleName[29362-29390]:SimpleName[31938-31966]"
    }, {
      "left" : "JDefinedClass unionClass",
      "right" : "JDefinedClass unionClass",
      "info" : "SingleVariableDeclaration[29391-29415]:SingleVariableDeclaration[31967-31991]"
    }, {
      "left" : "DataSchema memberType",
      "right" : "DataSchema memberType",
      "info" : "SingleVariableDeclaration[29417-29438]:SingleVariableDeclaration[31993-32014]"
    }, {
      "left" : "JClass memberClass",
      "right" : "JClass memberClass",
      "info" : "SingleVariableDeclaration[29440-29458]:SingleVariableDeclaration[32016-32034]"
    }, {
      "left" : "JClass dataClass",
      "right" : "JClass dataClass",
      "info" : "SingleVariableDeclaration[29460-29476]:SingleVariableDeclaration[32036-32052]"
    }, {
      "left" : "JVar schemaField",
      "right" : "JVar schemaField",
      "info" : "SingleVariableDeclaration[29478-29494]:SingleVariableDeclaration[32054-32070]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29498-31436]:Block[32074-34012]"
    }, {
      "left" : "final boolean isDirect = CodeUtil.isDirectType(memberType);",
      "right" : "final boolean isDirect = CodeUtil.isDirectType(memberType);",
      "info" : "VariableDeclarationStatement[29504-29563]:VariableDeclarationStatement[32080-32139]"
    }, {
      "left" : "final String wrappedOrDirect = isDirect ? \"Direct\" : \"Wrapped\";",
      "right" : "final String wrappedOrDirect = isDirect ? \"Direct\" : \"Wrapped\";",
      "info" : "VariableDeclarationStatement[29568-29631]:VariableDeclarationStatement[32144-32207]"
    }, {
      "left" : "final String memberKey = memberType.getUnionMemberKey();",
      "right" : "final String memberKey = memberType.getUnionMemberKey();",
      "info" : "VariableDeclarationStatement[29636-29692]:VariableDeclarationStatement[32212-32268]"
    }, {
      "left" : "final String capitalizedName = CodeUtil.getUnionMemberName(memberType);",
      "right" : "final String capitalizedName = CodeUtil.getUnionMemberName(memberType);",
      "info" : "VariableDeclarationStatement[29697-29768]:VariableDeclarationStatement[32273-32344]"
    }, {
      "left" : "final String memberFieldName = \"MEMBER_\" + capitalizedName;",
      "right" : "final String memberFieldName = \"MEMBER_\" + capitalizedName;",
      "info" : "VariableDeclarationStatement[29774-29833]:VariableDeclarationStatement[32350-32409]"
    }, {
      "left" : "final JFieldVar memberField = unionClass.field(JMod.PRIVATE | JMod.STATIC | JMod.FINAL, DataSchema.class, memberFieldName);",
      "right" : "final JFieldVar memberField = unionClass.field(JMod.PRIVATE | JMod.STATIC | JMod.FINAL, DataSchema.class, memberFieldName);",
      "info" : "VariableDeclarationStatement[29838-29961]:VariableDeclarationStatement[32414-32537]"
    }, {
      "left" : "memberField.init(schemaField.invoke(\"getType\").arg(memberKey));",
      "right" : "memberField.init(schemaField.invoke(\"getType\").arg(memberKey));",
      "info" : "ExpressionStatement[29966-30029]:ExpressionStatement[32542-32605]"
    }, {
      "left" : "final String setterName = \"set\" + capitalizedName;",
      "right" : "final String setterName = \"set\" + capitalizedName;",
      "info" : "VariableDeclarationStatement[30034-30084]:VariableDeclarationStatement[32610-32660]"
    }, {
      "left" : "final JMethod createMethod = unionClass.method(JMod.PUBLIC | JMod.STATIC, unionClass, \"create\");",
      "right" : "final JMethod createMethod = unionClass.method(JMod.PUBLIC | JMod.STATIC, unionClass, \"create\");",
      "info" : "VariableDeclarationStatement[30116-30212]:VariableDeclarationStatement[32692-32788]"
    }, {
      "left" : "JVar param = createMethod.param(memberClass, \"value\");",
      "right" : "JVar param = createMethod.param(memberClass, \"value\");",
      "info" : "VariableDeclarationStatement[30217-30271]:VariableDeclarationStatement[32793-32847]"
    }, {
      "left" : "final JVar newUnionVar = createMethod.body().decl(unionClass, \"newUnion\", JExpr._new(unionClass));",
      "right" : "final JVar newUnionVar = createMethod.body().decl(unionClass, \"newUnion\", JExpr._new(unionClass));",
      "info" : "VariableDeclarationStatement[30276-30374]:VariableDeclarationStatement[32852-32950]"
    }, {
      "left" : "createMethod.body().invoke(newUnionVar, setterName).arg(param);",
      "right" : "createMethod.body().invoke(newUnionVar, setterName).arg(param);",
      "info" : "ExpressionStatement[30379-30442]:ExpressionStatement[32955-33018]"
    }, {
      "left" : "createMethod.body()._return(newUnionVar);",
      "right" : "createMethod.body()._return(newUnionVar);",
      "info" : "ExpressionStatement[30447-30488]:ExpressionStatement[33023-33064]"
    }, {
      "left" : "final JMethod is = unionClass.method(JMod.PUBLIC, getCodeModel().BOOLEAN, \"is\" + capitalizedName);",
      "right" : "final JMethod is = unionClass.method(JMod.PUBLIC, getCodeModel().BOOLEAN, \"is\" + capitalizedName);",
      "info" : "VariableDeclarationStatement[30513-30611]:VariableDeclarationStatement[33089-33187]"
    }, {
      "left" : "final JBlock isBody = is.body();",
      "right" : "final JBlock isBody = is.body();",
      "info" : "VariableDeclarationStatement[30616-30648]:VariableDeclarationStatement[33192-33224]"
    }, {
      "left" : "JExpression res = JExpr.invoke(\"memberIs\").arg(memberKey);",
      "right" : "JExpression res = JExpr.invoke(\"memberIs\").arg(memberKey);",
      "info" : "VariableDeclarationStatement[30653-30711]:VariableDeclarationStatement[33229-33287]"
    }, {
      "left" : "isBody._return(res);",
      "right" : "isBody._return(res);",
      "info" : "ExpressionStatement[30716-30736]:ExpressionStatement[33292-33312]"
    }, {
      "left" : "final String getterName = \"get\" + capitalizedName;",
      "right" : "final String getterName = \"get\" + capitalizedName;",
      "info" : "VariableDeclarationStatement[30765-30815]:VariableDeclarationStatement[33341-33391]"
    }, {
      "left" : "final JMethod getter = unionClass.method(JMod.PUBLIC, memberClass, getterName);",
      "right" : "final JMethod getter = unionClass.method(JMod.PUBLIC, memberClass, getterName);",
      "info" : "VariableDeclarationStatement[30820-30899]:VariableDeclarationStatement[33396-33475]"
    }, {
      "left" : "final JBlock getterBody = getter.body();",
      "right" : "final JBlock getterBody = getter.body();",
      "info" : "VariableDeclarationStatement[30904-30944]:VariableDeclarationStatement[33480-33520]"
    }, {
      "left" : "res = JExpr.invoke(\"obtain\" + wrappedOrDirect).arg(memberField).arg(JExpr.dotclass(memberClass)).arg(memberKey);",
      "right" : "res = JExpr.invoke(\"obtain\" + wrappedOrDirect).arg(memberField).arg(JExpr.dotclass(memberClass)).arg(memberKey);",
      "info" : "ExpressionStatement[30949-31061]:ExpressionStatement[33525-33637]"
    }, {
      "left" : "getterBody._return(res);",
      "right" : "getterBody._return(res);",
      "info" : "ExpressionStatement[31066-31090]:ExpressionStatement[33642-33666]"
    }, {
      "left" : "final JMethod setter = unionClass.method(JMod.PUBLIC, Void.TYPE, setterName);",
      "right" : "final JMethod setter = unionClass.method(JMod.PUBLIC, Void.TYPE, setterName);",
      "info" : "VariableDeclarationStatement[31119-31196]:VariableDeclarationStatement[33695-33772]"
    }, {
      "left" : "param = setter.param(memberClass, \"value\");",
      "right" : "param = setter.param(memberClass, \"value\");",
      "info" : "ExpressionStatement[31201-31244]:ExpressionStatement[33777-33820]"
    }, {
      "left" : "final JInvocation inv = setter.body().invoke(\"select\" + wrappedOrDirect).arg(memberField).arg(JExpr.dotclass(memberClass));",
      "right" : "final JInvocation inv = setter.body().invoke(\"select\" + wrappedOrDirect).arg(memberField).arg(JExpr.dotclass(memberClass));",
      "info" : "VariableDeclarationStatement[31249-31372]:VariableDeclarationStatement[33825-33948]"
    }, {
      "left" : "dataClassArg(inv, dataClass).arg(memberKey).arg(param);",
      "right" : "dataClassArg(inv, dataClass).arg(memberKey).arg(param);",
      "info" : "ExpressionStatement[31377-31432]:ExpressionStatement[33953-34008]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[31440-31447]:Modifier[34016-34023]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[31448-31452]:PrimitiveType[34024-34028]"
    }, {
      "left" : "generatePathSpecMethodsForUnion",
      "right" : "generatePathSpecMethodsForUnion",
      "info" : "SimpleName[31453-31484]:SimpleName[34029-34060]"
    }, {
      "left" : "UnionTemplateSpec unionSpec",
      "right" : "UnionTemplateSpec unionSpec",
      "info" : "SingleVariableDeclaration[31485-31512]:SingleVariableDeclaration[34061-34088]"
    }, {
      "left" : "JDefinedClass unionClass",
      "right" : "JDefinedClass unionClass",
      "info" : "SingleVariableDeclaration[31514-31538]:SingleVariableDeclaration[34090-34114]"
    }, {
      "left" : "JClassAlreadyExistsException",
      "right" : "JClassAlreadyExistsException",
      "info" : "SimpleType[31553-31581]:SimpleType[34129-34157]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31584-32315]:Block[34160-34891]"
    }, {
      "left" : "final JDefinedClass fieldsNestedClass = generatePathSpecNestedClass(unionClass);",
      "right" : "final JDefinedClass fieldsNestedClass = generatePathSpecNestedClass(unionClass);",
      "info" : "VariableDeclarationStatement[31590-31670]:VariableDeclarationStatement[34166-34246]"
    }, {
      "left" : "for (UnionTemplateSpec.Member member : unionSpec.getMembers())",
      "right" : "for (UnionTemplateSpec.Member member : unionSpec.getMembers())",
      "info" : "EnhancedForStatement[31676-32311]:EnhancedForStatement[34252-34887]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31743-32311]:Block[34319-34887]"
    }, {
      "left" : "JClass fieldsRefType = _pathSpecClass;",
      "right" : "JClass fieldsRefType = _pathSpecClass;",
      "info" : "VariableDeclarationStatement[31751-31789]:VariableDeclarationStatement[34327-34365]"
    }, {
      "left" : "if (hasNestedFields(member.getSchema()))",
      "right" : "if (hasNestedFields(member.getSchema()))",
      "info" : "IfStatement[31796-32018]:IfStatement[34372-34594]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31843-32018]:Block[34419-34594]"
    }, {
      "left" : "final JClass unionMemberClass = generate(member.getClassTemplateSpec());",
      "right" : "final JClass unionMemberClass = generate(member.getClassTemplateSpec());",
      "info" : "VariableDeclarationStatement[31853-31925]:VariableDeclarationStatement[34429-34501]"
    }, {
      "left" : "fieldsRefType = getCodeModel().ref(unionMemberClass.fullName() + \".Fields\");",
      "right" : "fieldsRefType = getCodeModel().ref(unionMemberClass.fullName() + \".Fields\");",
      "info" : "ExpressionStatement[31934-32010]:ExpressionStatement[34510-34586]"
    }, {
      "left" : "final JMethod accessorMethod = fieldsNestedClass.method(JMod.PUBLIC, fieldsRefType, CodeUtil.getUnionMemberName(member.getSchema()));",
      "right" : "final JMethod accessorMethod = fieldsNestedClass.method(JMod.PUBLIC, fieldsRefType, CodeUtil.getUnionMemberName(member.getSchema()));",
      "info" : "VariableDeclarationStatement[32025-32158]:VariableDeclarationStatement[34601-34734]"
    }, {
      "left" : "accessorMethod.body()._return(JExpr._new(fieldsRefType).arg(JExpr.invoke(\"getPathComponents\")).arg(member.getSchema().getUnionMemberKey()));",
      "right" : "accessorMethod.body()._return(JExpr._new(fieldsRefType).arg(JExpr.invoke(\"getPathComponents\")).arg(member.getSchema().getUnionMemberKey()));",
      "info" : "ExpressionStatement[32165-32305]:ExpressionStatement[34741-34881]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[32319-32326]:Modifier[34895-34902]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[32327-32331]:PrimitiveType[34903-34907]"
    }, {
      "left" : "populateClassContent",
      "right" : "populateClassContent",
      "info" : "SimpleName[32332-32352]:SimpleName[34908-34928]"
    }, {
      "left" : "ClassTemplateSpec classTemplateSpec",
      "right" : "ClassTemplateSpec classTemplateSpec",
      "info" : "SingleVariableDeclaration[32353-32388]:SingleVariableDeclaration[34929-34964]"
    }, {
      "left" : "JDefinedClass definedClass",
      "right" : "JDefinedClass definedClass",
      "info" : "SingleVariableDeclaration[32390-32416]:SingleVariableDeclaration[34966-34992]"
    }, {
      "left" : "JClassAlreadyExistsException",
      "right" : "JClassAlreadyExistsException",
      "info" : "SimpleType[32431-32459]:SimpleType[35007-35035]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32462-33835]:Block[35038-36411]"
    }, {
      "left" : "if (!_generatedClasses.containsKey(definedClass))",
      "right" : "if (!_generatedClasses.containsKey(definedClass))",
      "info" : "IfStatement[32468-33831]:IfStatement[35044-36407]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32522-33831]:Block[35098-36407]"
    }, {
      "left" : "_generatedClasses.put(definedClass, classTemplateSpec);",
      "right" : "_generatedClasses.put(definedClass, classTemplateSpec);",
      "info" : "ExpressionStatement[32530-32585]:ExpressionStatement[35106-35161]"
    }, {
      "left" : "JavaCodeUtil.annotate(definedClass, \"Data Template\", classTemplateSpec.getLocation());",
      "right" : "JavaCodeUtil.annotate(definedClass, \"Data Template\", classTemplateSpec.getLocation());",
      "info" : "ExpressionStatement[32593-32679]:ExpressionStatement[35169-35255]"
    }, {
      "left" : "if (classTemplateSpec instanceof ArrayTemplateSpec)",
      "right" : "if (classTemplateSpec instanceof ArrayTemplateSpec)",
      "info" : "IfStatement[32687-33825]:IfStatement[35263-36401]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32745-32830]:Block[35321-35406]"
    }, {
      "left" : "generateArray(definedClass, (ArrayTemplateSpec) classTemplateSpec);",
      "right" : "generateArray(definedClass, (ArrayTemplateSpec) classTemplateSpec);",
      "info" : "ExpressionStatement[32755-32822]:ExpressionStatement[35331-35398]"
    }, {
      "left" : "if (classTemplateSpec instanceof EnumTemplateSpec)",
      "right" : "if (classTemplateSpec instanceof EnumTemplateSpec)",
      "info" : "IfStatement[32842-33825]:IfStatement[35418-36401]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32899-32982]:Block[35475-35558]"
    }, {
      "left" : "generateEnum(definedClass, (EnumTemplateSpec) classTemplateSpec);",
      "right" : "generateEnum(definedClass, (EnumTemplateSpec) classTemplateSpec);",
      "info" : "ExpressionStatement[32909-32974]:ExpressionStatement[35485-35550]"
    }, {
      "left" : "if (classTemplateSpec instanceof FixedTemplateSpec)",
      "right" : "if (classTemplateSpec instanceof FixedTemplateSpec)",
      "info" : "IfStatement[32994-33825]:IfStatement[35570-36401]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33052-33137]:Block[35628-35713]"
    }, {
      "left" : "generateFixed(definedClass, (FixedTemplateSpec) classTemplateSpec);",
      "right" : "generateFixed(definedClass, (FixedTemplateSpec) classTemplateSpec);",
      "info" : "ExpressionStatement[33062-33129]:ExpressionStatement[35638-35705]"
    }, {
      "left" : "if (classTemplateSpec instanceof MapTemplateSpec)",
      "right" : "if (classTemplateSpec instanceof MapTemplateSpec)",
      "info" : "IfStatement[33149-33825]:IfStatement[35725-36401]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33205-33286]:Block[35781-35862]"
    }, {
      "left" : "generateMap(definedClass, (MapTemplateSpec) classTemplateSpec);",
      "right" : "generateMap(definedClass, (MapTemplateSpec) classTemplateSpec);",
      "info" : "ExpressionStatement[33215-33278]:ExpressionStatement[35791-35854]"
    }, {
      "left" : "if (classTemplateSpec instanceof RecordTemplateSpec)",
      "right" : "if (classTemplateSpec instanceof RecordTemplateSpec)",
      "info" : "IfStatement[33298-33825]:IfStatement[35874-36401]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33357-33444]:Block[35933-36020]"
    }, {
      "left" : "generateRecord(definedClass, (RecordTemplateSpec) classTemplateSpec);",
      "right" : "generateRecord(definedClass, (RecordTemplateSpec) classTemplateSpec);",
      "info" : "ExpressionStatement[33367-33436]:ExpressionStatement[35943-36012]"
    }, {
      "left" : "if (classTemplateSpec instanceof TyperefTemplateSpec)",
      "right" : "if (classTemplateSpec instanceof TyperefTemplateSpec)",
      "info" : "IfStatement[33456-33825]:IfStatement[36032-36401]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33516-33605]:Block[36092-36181]"
    }, {
      "left" : "generateTyperef(definedClass, (TyperefTemplateSpec) classTemplateSpec);",
      "right" : "generateTyperef(definedClass, (TyperefTemplateSpec) classTemplateSpec);",
      "info" : "ExpressionStatement[33526-33597]:ExpressionStatement[36102-36173]"
    }, {
      "left" : "if (classTemplateSpec instanceof UnionTemplateSpec)",
      "right" : "if (classTemplateSpec instanceof UnionTemplateSpec)",
      "info" : "IfStatement[33617-33825]:IfStatement[36193-36401]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33675-33760]:Block[36251-36336]"
    }, {
      "left" : "generateUnion(definedClass, (UnionTemplateSpec) classTemplateSpec);",
      "right" : "generateUnion(definedClass, (UnionTemplateSpec) classTemplateSpec);",
      "info" : "ExpressionStatement[33685-33752]:ExpressionStatement[36261-36328]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33778-33825]:Block[36354-36401]"
    }, {
      "left" : "throw new RuntimeException();",
      "right" : "throw new RuntimeException();",
      "info" : "ThrowStatement[33788-33817]:ThrowStatement[36364-36393]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[33839-33846]:Modifier[36415-36422]"
    }, {
      "left" : "JFieldVar",
      "right" : "JFieldVar",
      "info" : "SimpleType[33847-33856]:SimpleType[36423-36432]"
    }, {
      "left" : "generateSchemaField",
      "right" : "generateSchemaField",
      "info" : "SimpleName[33857-33876]:SimpleName[36433-36452]"
    }, {
      "left" : "JDefinedClass templateClass",
      "right" : "JDefinedClass templateClass",
      "info" : "SingleVariableDeclaration[33877-33904]:SingleVariableDeclaration[36453-36480]"
    }, {
      "left" : "DataSchema schema",
      "right" : "DataSchema schema",
      "info" : "SingleVariableDeclaration[33906-33923]:SingleVariableDeclaration[36482-36499]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33927-35119]:Block[36503-37695]"
    }, {
      "left" : "final JFieldVar schemaField = templateClass.field(JMod.PRIVATE | JMod.STATIC | JMod.FINAL, schema.getClass(), DataTemplateUtil.SCHEMA_FIELD_NAME);",
      "right" : "final JFieldVar schemaField = templateClass.field(JMod.PRIVATE | JMod.STATIC | JMod.FINAL, schema.getClass(), DataTemplateUtil.SCHEMA_FIELD_NAME);",
      "info" : "VariableDeclarationStatement[33933-34079]:VariableDeclarationStatement[36509-36655]"
    }, {
      "left" : "final String schemaJson = SchemaToJsonEncoder.schemaToJson(schema, JsonBuilder.Pretty.COMPACT);",
      "right" : "final String schemaJson = SchemaToJsonEncoder.schemaToJson(schema, JsonBuilder.Pretty.COMPACT);",
      "info" : "VariableDeclarationStatement[34084-34179]:VariableDeclarationStatement[36660-36755]"
    }, {
      "left" : "final JInvocation parseSchemaInvocation;",
      "right" : "final JInvocation parseSchemaInvocation;",
      "info" : "VariableDeclarationStatement[34184-34224]:VariableDeclarationStatement[36760-36800]"
    }, {
      "left" : "if (schemaJson.length() < MAX_SCHEMA_FIELD_JSON_LENGTH)",
      "right" : "if (schemaJson.length() < MAX_SCHEMA_FIELD_JSON_LENGTH)",
      "info" : "IfStatement[34229-34993]:IfStatement[36805-37569]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34289-34394]:Block[36865-36970]"
    }, {
      "left" : "parseSchemaInvocation = _dataTemplateUtilClass.staticInvoke(\"parseSchema\").arg(schemaJson);",
      "right" : "parseSchemaInvocation = _dataTemplateUtilClass.staticInvoke(\"parseSchema\").arg(schemaJson);",
      "info" : "ExpressionStatement[34297-34388]:ExpressionStatement[36873-36964]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34408-34993]:Block[36984-37569]"
    }, {
      "left" : "JInvocation stringBuilderInvocation = JExpr._new(_stringBuilderClass);",
      "right" : "JInvocation stringBuilderInvocation = JExpr._new(_stringBuilderClass);",
      "info" : "VariableDeclarationStatement[34416-34486]:VariableDeclarationStatement[36992-37062]"
    }, {
      "left" : "for (int index = 0; index < schemaJson.length(); index += MAX_SCHEMA_FIELD_JSON_LENGTH)",
      "right" : "for (int index = 0; index < schemaJson.length(); index += MAX_SCHEMA_FIELD_JSON_LENGTH)",
      "info" : "ForStatement[34493-34800]:ForStatement[37069-37376]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34587-34800]:Block[37163-37376]"
    }, {
      "left" : "stringBuilderInvocation = stringBuilderInvocation.\n            invoke(\"append\").\n            arg(schemaJson.substring(index, Math.min(schemaJson.length(), index + MAX_SCHEMA_FIELD_JSON_LENGTH)));",
      "right" : "stringBuilderInvocation = stringBuilderInvocation.\n            invoke(\"append\").\n            arg(schemaJson.substring(index, Math.min(schemaJson.length(), index + MAX_SCHEMA_FIELD_JSON_LENGTH)));",
      "info" : "ExpressionStatement[34597-34792]:ExpressionStatement[37173-37368]"
    }, {
      "left" : "stringBuilderInvocation = stringBuilderInvocation.invoke(\"toString\");",
      "right" : "stringBuilderInvocation = stringBuilderInvocation.invoke(\"toString\");",
      "info" : "ExpressionStatement[34807-34876]:ExpressionStatement[37383-37452]"
    }, {
      "left" : "parseSchemaInvocation = _dataTemplateUtilClass.staticInvoke(\"parseSchema\").arg(stringBuilderInvocation);",
      "right" : "parseSchemaInvocation = _dataTemplateUtilClass.staticInvoke(\"parseSchema\").arg(stringBuilderInvocation);",
      "info" : "ExpressionStatement[34883-34987]:ExpressionStatement[37459-37563]"
    }, {
      "left" : "schemaField.init(JExpr.cast(getCodeModel()._ref(schema.getClass()), parseSchemaInvocation));",
      "right" : "schemaField.init(JExpr.cast(getCodeModel()._ref(schema.getClass()), parseSchemaInvocation));",
      "info" : "ExpressionStatement[34998-35090]:ExpressionStatement[37574-37666]"
    }, {
      "left" : "return schemaField;",
      "right" : "return schemaField;",
      "info" : "ReturnStatement[35096-35115]:ReturnStatement[37672-37691]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[35123-35130]:Modifier[37699-37706]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[35131-35135]:PrimitiveType[37707-37711]"
    }, {
      "left" : "generatePathSpecMethodsForCollection",
      "right" : "generatePathSpecMethodsForCollection",
      "info" : "SimpleName[35136-35172]:SimpleName[37712-37748]"
    }, {
      "left" : "JDefinedClass templateClass",
      "right" : "JDefinedClass templateClass",
      "info" : "SingleVariableDeclaration[35173-35200]:SingleVariableDeclaration[37749-37776]"
    }, {
      "left" : "DataSchema schema",
      "right" : "DataSchema schema",
      "info" : "SingleVariableDeclaration[35202-35219]:SingleVariableDeclaration[37778-37795]"
    }, {
      "left" : "JClass childClass",
      "right" : "JClass childClass",
      "info" : "SingleVariableDeclaration[35221-35238]:SingleVariableDeclaration[37797-37814]"
    }, {
      "left" : "String wildcardMethodName",
      "right" : "String wildcardMethodName",
      "info" : "SingleVariableDeclaration[35240-35265]:SingleVariableDeclaration[37816-37841]"
    }, {
      "left" : "JClassAlreadyExistsException",
      "right" : "JClassAlreadyExistsException",
      "info" : "SimpleType[35280-35308]:SimpleType[37856-37884]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35311-35800]:Block[37887-38376]"
    }, {
      "left" : "if (hasNestedFields(schema))",
      "right" : "if (hasNestedFields(schema))",
      "info" : "IfStatement[35317-35796]:IfStatement[37893-38372]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35350-35796]:Block[37926-38372]"
    }, {
      "left" : "final JDefinedClass fieldsNestedClass = generatePathSpecNestedClass(templateClass);",
      "right" : "final JDefinedClass fieldsNestedClass = generatePathSpecNestedClass(templateClass);",
      "info" : "VariableDeclarationStatement[35358-35441]:VariableDeclarationStatement[37934-38017]"
    }, {
      "left" : "final JClass itemsFieldType = getCodeModel().ref(childClass.fullName() + \".Fields\");",
      "right" : "final JClass itemsFieldType = getCodeModel().ref(childClass.fullName() + \".Fields\");",
      "info" : "VariableDeclarationStatement[35449-35533]:VariableDeclarationStatement[38025-38109]"
    }, {
      "left" : "final JMethod constantField = fieldsNestedClass.method(JMod.PUBLIC, itemsFieldType, wildcardMethodName);",
      "right" : "final JMethod constantField = fieldsNestedClass.method(JMod.PUBLIC, itemsFieldType, wildcardMethodName);",
      "info" : "VariableDeclarationStatement[35541-35645]:VariableDeclarationStatement[38117-38221]"
    }, {
      "left" : "constantField.body()._return(JExpr._new(itemsFieldType).arg(JExpr.invoke(\"getPathComponents\")).arg(_pathSpecClass.staticRef(\"WILDCARD\")));",
      "right" : "constantField.body()._return(JExpr._new(itemsFieldType).arg(JExpr.invoke(\"getPathComponents\")).arg(_pathSpecClass.staticRef(\"WILDCARD\")));",
      "info" : "ExpressionStatement[35652-35790]:ExpressionStatement[38228-38366]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[35804-35811]:Modifier[38380-38387]"
    }, {
      "left" : "JDefinedClass",
      "right" : "JDefinedClass",
      "info" : "SimpleType[35812-35825]:SimpleType[38388-38401]"
    }, {
      "left" : "generatePathSpecNestedClass",
      "right" : "generatePathSpecNestedClass",
      "info" : "SimpleName[35826-35853]:SimpleName[38402-38429]"
    }, {
      "left" : "JDefinedClass templateClass",
      "right" : "JDefinedClass templateClass",
      "info" : "SingleVariableDeclaration[35854-35881]:SingleVariableDeclaration[38430-38457]"
    }, {
      "left" : "JClassAlreadyExistsException",
      "right" : "JClassAlreadyExistsException",
      "info" : "SimpleType[35896-35924]:SimpleType[38472-38500]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35927-36535]:Block[38503-39111]"
    }, {
      "left" : "final JDefinedClass fieldsNestedClass = templateClass._class(JMod.PUBLIC | JMod.STATIC, \"Fields\");",
      "right" : "final JDefinedClass fieldsNestedClass = templateClass._class(JMod.PUBLIC | JMod.STATIC, \"Fields\");",
      "info" : "VariableDeclarationStatement[35933-36031]:VariableDeclarationStatement[38509-38607]"
    }, {
      "left" : "fieldsNestedClass._extends(_pathSpecClass);",
      "right" : "fieldsNestedClass._extends(_pathSpecClass);",
      "info" : "ExpressionStatement[36036-36079]:ExpressionStatement[38612-38655]"
    }, {
      "left" : "final JMethod constructor = fieldsNestedClass.constructor(JMod.PUBLIC);",
      "right" : "final JMethod constructor = fieldsNestedClass.constructor(JMod.PUBLIC);",
      "info" : "VariableDeclarationStatement[36085-36156]:VariableDeclarationStatement[38661-38732]"
    }, {
      "left" : "final JClass listString = getCodeModel().ref(List.class).narrow(String.class);",
      "right" : "final JClass listString = getCodeModel().ref(List.class).narrow(String.class);",
      "info" : "VariableDeclarationStatement[36161-36239]:VariableDeclarationStatement[38737-38815]"
    }, {
      "left" : "final JVar namespace = constructor.param(listString, \"path\");",
      "right" : "final JVar namespace = constructor.param(listString, \"path\");",
      "info" : "VariableDeclarationStatement[36244-36305]:VariableDeclarationStatement[38820-38881]"
    }, {
      "left" : "final JVar name = constructor.param(String.class, \"name\");",
      "right" : "final JVar name = constructor.param(String.class, \"name\");",
      "info" : "VariableDeclarationStatement[36310-36368]:VariableDeclarationStatement[38886-38944]"
    }, {
      "left" : "constructor.body().invoke(SUPER).arg(namespace).arg(name);",
      "right" : "constructor.body().invoke(SUPER).arg(namespace).arg(name);",
      "info" : "ExpressionStatement[36373-36431]:ExpressionStatement[38949-39007]"
    }, {
      "left" : "fieldsNestedClass.constructor(JMod.PUBLIC).body().invoke(SUPER);",
      "right" : "fieldsNestedClass.constructor(JMod.PUBLIC).body().invoke(SUPER);",
      "info" : "ExpressionStatement[36437-36501]:ExpressionStatement[39013-39077]"
    }, {
      "left" : "return fieldsNestedClass;",
      "right" : "return fieldsNestedClass;",
      "info" : "ReturnStatement[36506-36531]:ReturnStatement[39082-39107]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[36698-36705]:Modifier[39274-39281]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[36706-36710]:PrimitiveType[39282-39286]"
    }, {
      "left" : "generateCustomClassInitialization",
      "right" : "generateCustomClassInitialization",
      "info" : "SimpleName[36711-36744]:SimpleName[39287-39320]"
    }, {
      "left" : "JDefinedClass templateClass",
      "right" : "JDefinedClass templateClass",
      "info" : "SingleVariableDeclaration[36745-36772]:SingleVariableDeclaration[39321-39348]"
    }, {
      "left" : "CustomInfoSpec customInfo",
      "right" : "CustomInfoSpec customInfo",
      "info" : "SingleVariableDeclaration[36774-36799]:SingleVariableDeclaration[39350-39375]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36803-37562]:Block[39379-40138]"
    }, {
      "left" : "if (customInfo != null)",
      "right" : "if (customInfo != null)",
      "info" : "IfStatement[36809-37558]:IfStatement[39385-40134]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36837-37558]:Block[39413-40134]"
    }, {
      "left" : "final String customClassFullName = customInfo.getCustomClass().getNamespace() + \".\" + customInfo.getCustomClass().getClassName();",
      "right" : "final String customClassFullName = customInfo.getCustomClass().getNamespace() + \".\" + customInfo.getCustomClass().getClassName();",
      "info" : "VariableDeclarationStatement[36878-37007]:VariableDeclarationStatement[39454-39583]"
    }, {
      "left" : "templateClass.init().add(_customClass.staticInvoke(\"initializeCustomClass\").arg(getCodeModel().ref(customClassFullName).dotclass()));",
      "right" : "templateClass.init().add(_customClass.staticInvoke(\"initializeCustomClass\").arg(getCodeModel().ref(customClassFullName).dotclass()));",
      "info" : "ExpressionStatement[37014-37147]:ExpressionStatement[39590-39723]"
    }, {
      "left" : "if (customInfo.getCoercerClass() != null)",
      "right" : "if (customInfo.getCoercerClass() != null)",
      "info" : "IfStatement[37210-37552]:IfStatement[39786-40128]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37258-37552]:Block[39834-40128]"
    }, {
      "left" : "final String coercerClassFullName = customInfo.getCoercerClass().getNamespace() + \".\" + customInfo.getCoercerClass().getClassName();",
      "right" : "final String coercerClassFullName = customInfo.getCoercerClass().getNamespace() + \".\" + customInfo.getCoercerClass().getClassName();",
      "info" : "VariableDeclarationStatement[37268-37400]:VariableDeclarationStatement[39844-39976]"
    }, {
      "left" : "templateClass.init().add(_customClass.staticInvoke(\"initializeCoercerClass\").arg(getCodeModel().ref(coercerClassFullName).dotclass()));",
      "right" : "templateClass.init().add(_customClass.staticInvoke(\"initializeCoercerClass\").arg(getCodeModel().ref(coercerClassFullName).dotclass()));",
      "info" : "ExpressionStatement[37409-37544]:ExpressionStatement[39985-40120]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[37566-37573]:Modifier[40142-40149]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[37574-37578]:PrimitiveType[40150-40154]"
    }, {
      "left" : "generateConstructorWithInitialCapacity",
      "right" : "generateConstructorWithInitialCapacity",
      "info" : "SimpleName[37579-37617]:SimpleName[40155-40193]"
    }, {
      "left" : "JDefinedClass cls",
      "right" : "JDefinedClass cls",
      "info" : "SingleVariableDeclaration[37618-37635]:SingleVariableDeclaration[40194-40211]"
    }, {
      "left" : "JClass elementClass",
      "right" : "JClass elementClass",
      "info" : "SingleVariableDeclaration[37637-37656]:SingleVariableDeclaration[40213-40232]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37660-37915]:Block[40236-40491]"
    }, {
      "left" : "final JMethod argConstructor = cls.constructor(JMod.PUBLIC);",
      "right" : "final JMethod argConstructor = cls.constructor(JMod.PUBLIC);",
      "info" : "VariableDeclarationStatement[37666-37726]:VariableDeclarationStatement[40242-40302]"
    }, {
      "left" : "final JVar initialCapacity = argConstructor.param(getCodeModel().INT, \"initialCapacity\");",
      "right" : "final JVar initialCapacity = argConstructor.param(getCodeModel().INT, \"initialCapacity\");",
      "info" : "VariableDeclarationStatement[37731-37820]:VariableDeclarationStatement[40307-40396]"
    }, {
      "left" : "argConstructor.body().invoke(THIS).arg(JExpr._new(elementClass).arg(initialCapacity));",
      "right" : "argConstructor.body().invoke(THIS).arg(JExpr._new(elementClass).arg(initialCapacity));",
      "info" : "ExpressionStatement[37825-37911]:ExpressionStatement[40401-40487]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[37919-37926]:Modifier[40495-40502]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[37927-37931]:PrimitiveType[40503-40507]"
    }, {
      "left" : "generateConstructorWithCollection",
      "right" : "generateConstructorWithCollection",
      "info" : "SimpleName[37932-37965]:SimpleName[40508-40541]"
    }, {
      "left" : "JDefinedClass cls",
      "right" : "JDefinedClass cls",
      "info" : "SingleVariableDeclaration[37966-37983]:SingleVariableDeclaration[40542-40559]"
    }, {
      "left" : "JClass elementClass",
      "right" : "JClass elementClass",
      "info" : "SingleVariableDeclaration[37985-38004]:SingleVariableDeclaration[40561-40580]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38008-38308]:Block[40584-40884]"
    }, {
      "left" : "final JMethod argConstructor = cls.constructor(JMod.PUBLIC);",
      "right" : "final JMethod argConstructor = cls.constructor(JMod.PUBLIC);",
      "info" : "VariableDeclarationStatement[38014-38074]:VariableDeclarationStatement[40590-40650]"
    }, {
      "left" : "final JVar c = argConstructor.param(_collectionClass.narrow(elementClass), \"c\");",
      "right" : "final JVar c = argConstructor.param(_collectionClass.narrow(elementClass), \"c\");",
      "info" : "VariableDeclarationStatement[38079-38159]:VariableDeclarationStatement[40655-40735]"
    }, {
      "left" : "argConstructor.body().invoke(THIS).arg(JExpr._new(_dataListClass).arg(c.invoke(\"size\")));",
      "right" : "argConstructor.body().invoke(THIS).arg(JExpr._new(_dataListClass).arg(c.invoke(\"size\")));",
      "info" : "ExpressionStatement[38164-38253]:ExpressionStatement[40740-40829]"
    }, {
      "left" : "argConstructor.body().invoke(\"addAll\").arg(c);",
      "right" : "argConstructor.body().invoke(\"addAll\").arg(c);",
      "info" : "ExpressionStatement[38258-38304]:ExpressionStatement[40834-40880]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[38312-38319]:Modifier[40888-40895]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[38320-38324]:PrimitiveType[40896-40900]"
    }, {
      "left" : "generateConstructorWithInitialCapacityAndLoadFactor",
      "right" : "generateConstructorWithInitialCapacityAndLoadFactor",
      "info" : "SimpleName[38325-38376]:SimpleName[40901-40952]"
    }, {
      "left" : "JDefinedClass cls",
      "right" : "JDefinedClass cls",
      "info" : "SingleVariableDeclaration[38377-38394]:SingleVariableDeclaration[40953-40970]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38398-38756]:Block[40974-41332]"
    }, {
      "left" : "final JMethod argConstructor = cls.constructor(JMod.PUBLIC);",
      "right" : "final JMethod argConstructor = cls.constructor(JMod.PUBLIC);",
      "info" : "VariableDeclarationStatement[38404-38464]:VariableDeclarationStatement[40980-41040]"
    }, {
      "left" : "final JVar initialCapacity = argConstructor.param(getCodeModel().INT, \"initialCapacity\");",
      "right" : "final JVar initialCapacity = argConstructor.param(getCodeModel().INT, \"initialCapacity\");",
      "info" : "VariableDeclarationStatement[38469-38558]:VariableDeclarationStatement[41045-41134]"
    }, {
      "left" : "final JVar loadFactor = argConstructor.param(getCodeModel().FLOAT, \"loadFactor\");",
      "right" : "final JVar loadFactor = argConstructor.param(getCodeModel().FLOAT, \"loadFactor\");",
      "info" : "VariableDeclarationStatement[38563-38644]:VariableDeclarationStatement[41139-41220]"
    }, {
      "left" : "argConstructor.body().invoke(THIS).arg(JExpr._new(_dataMapClass).arg(initialCapacity).arg(loadFactor));",
      "right" : "argConstructor.body().invoke(THIS).arg(JExpr._new(_dataMapClass).arg(initialCapacity).arg(loadFactor));",
      "info" : "ExpressionStatement[38649-38752]:ExpressionStatement[41225-41328]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[38760-38767]:Modifier[41336-41343]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[38768-38772]:PrimitiveType[41344-41348]"
    }, {
      "left" : "generateConstructorWithMap",
      "right" : "generateConstructorWithMap",
      "info" : "SimpleName[38773-38799]:SimpleName[41349-41375]"
    }, {
      "left" : "JDefinedClass cls",
      "right" : "JDefinedClass cls",
      "info" : "SingleVariableDeclaration[38800-38817]:SingleVariableDeclaration[41376-41393]"
    }, {
      "left" : "JClass valueClass",
      "right" : "JClass valueClass",
      "info" : "SingleVariableDeclaration[38819-38836]:SingleVariableDeclaration[41395-41412]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38840-39151]:Block[41416-41727]"
    }, {
      "left" : "final JMethod argConstructor = cls.constructor(JMod.PUBLIC);",
      "right" : "final JMethod argConstructor = cls.constructor(JMod.PUBLIC);",
      "info" : "VariableDeclarationStatement[38846-38906]:VariableDeclarationStatement[41422-41482]"
    }, {
      "left" : "final JVar m = argConstructor.param(_mapClass.narrow(_stringClass, valueClass), \"m\");",
      "right" : "final JVar m = argConstructor.param(_mapClass.narrow(_stringClass, valueClass), \"m\");",
      "info" : "VariableDeclarationStatement[38911-38996]:VariableDeclarationStatement[41487-41572]"
    }, {
      "left" : "argConstructor.body().invoke(THIS).arg(JExpr.invoke(\"newDataMapOfSize\").arg(m.invoke(\"size\")));",
      "right" : "argConstructor.body().invoke(THIS).arg(JExpr.invoke(\"newDataMapOfSize\").arg(m.invoke(\"size\")));",
      "info" : "ExpressionStatement[39001-39096]:ExpressionStatement[41577-41672]"
    }, {
      "left" : "argConstructor.body().invoke(\"putAll\").arg(m);",
      "right" : "argConstructor.body().invoke(\"putAll\").arg(m);",
      "info" : "ExpressionStatement[39101-39147]:ExpressionStatement[41677-41723]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[39383-39389]:Modifier[42166-42172]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[39390-39394]:PrimitiveType[42173-42177]"
    }, {
      "left" : "setDefaultPackage",
      "right" : "setDefaultPackage",
      "info" : "SimpleName[39395-39412]:SimpleName[42178-42195]"
    }, {
      "left" : "String defaultPackage",
      "right" : "String defaultPackage",
      "info" : "SingleVariableDeclaration[39413-39434]:SingleVariableDeclaration[42196-42217]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39440-39487]:Block[42223-42270]"
    }, {
      "left" : "_defaultPackage = defaultPackage;",
      "right" : "_defaultPackage = defaultPackage;",
      "info" : "ExpressionStatement[39448-39481]:ExpressionStatement[42231-42264]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[39493-39499]:Modifier[42276-42282]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[39500-39506]:SimpleType[42283-42289]"
    }, {
      "left" : "getDefaultPackage",
      "right" : "getDefaultPackage",
      "info" : "SimpleName[39507-39524]:SimpleName[42290-42307]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39531-39568]:Block[42314-42351]"
    }, {
      "left" : "return _defaultPackage;",
      "right" : "return _defaultPackage;",
      "info" : "ReturnStatement[39539-39562]:ReturnStatement[42322-42345]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[39574-39580]:Modifier[42357-42363]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[39581-39585]:PrimitiveType[42364-42368]"
    }, {
      "left" : "setRecordFieldAccessorWithMode",
      "right" : "setRecordFieldAccessorWithMode",
      "info" : "SimpleName[39586-39616]:SimpleName[42369-42399]"
    }, {
      "left" : "boolean recordFieldAccessorWithMode",
      "right" : "boolean recordFieldAccessorWithMode",
      "info" : "SingleVariableDeclaration[39617-39652]:SingleVariableDeclaration[42400-42435]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39658-39731]:Block[42441-42514]"
    }, {
      "left" : "_recordFieldAccessorWithMode = recordFieldAccessorWithMode;",
      "right" : "_recordFieldAccessorWithMode = recordFieldAccessorWithMode;",
      "info" : "ExpressionStatement[39666-39725]:ExpressionStatement[42449-42508]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[39737-39743]:Modifier[42520-42526]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[39744-39751]:PrimitiveType[42527-42534]"
    }, {
      "left" : "getRecordFieldAccessorWithMode",
      "right" : "getRecordFieldAccessorWithMode",
      "info" : "SimpleName[39752-39782]:SimpleName[42535-42565]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39789-39839]:Block[42572-42622]"
    }, {
      "left" : "return _recordFieldAccessorWithMode;",
      "right" : "return _recordFieldAccessorWithMode;",
      "info" : "ReturnStatement[39797-39833]:ReturnStatement[42580-42616]"
    } ]
  },
  "interFileMappings" : { }
}