{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "RandomStringUtils",
      "right" : "RandomStringUtils",
      "info" : "TypeDeclaration[866-12422]:TypeDeclaration[866-12671]"
    }, {
      "left" : "private static final Random RANDOM = new Random();",
      "right" : "private static final Random RANDOM = new Random();",
      "info" : "FieldDeclaration[1532-1770]:FieldDeclaration[1532-1770]"
    }, {
      "left" : "public RandomStringUtils()",
      "right" : "public RandomStringUtils()",
      "info" : "MethodDeclaration[1776-2147]:MethodDeclaration[1776-2147]"
    }, {
      "left" : "public static String random(int count)",
      "right" : "public static String random(int count)",
      "info" : "MethodDeclaration[2245-2626]:MethodDeclaration[2245-2626]"
    }, {
      "left" : "public static String randomAscii(int count)",
      "right" : "public static String randomAscii(int count)",
      "info" : "MethodDeclaration[2632-3098]:MethodDeclaration[2632-3098]"
    }, {
      "left" : "public static String randomAlphabetic(int count)",
      "right" : "public static String randomAlphabetic(int count)",
      "info" : "MethodDeclaration[3108-3512]:MethodDeclaration[3108-3512]"
    }, {
      "left" : "public static String randomAlphanumeric(int count)",
      "right" : "public static String randomAlphanumeric(int count)",
      "info" : "MethodDeclaration[3522-3930]:MethodDeclaration[3522-3930]"
    }, {
      "left" : "public static String randomNumeric(int count)",
      "right" : "public static String randomNumeric(int count)",
      "info" : "MethodDeclaration[3940-4338]:MethodDeclaration[3940-4338]"
    }, {
      "left" : "public static String random(int count, boolean letters, boolean numbers)",
      "right" : "public static String random(int count, boolean letters, boolean numbers)",
      "info" : "MethodDeclaration[4344-5013]:MethodDeclaration[4344-5013]"
    }, {
      "left" : "public static String random(int count, int start, int end, boolean letters, boolean numbers)",
      "right" : "public static String random(int count, int start, int end, boolean letters, boolean numbers)",
      "info" : "MethodDeclaration[5023-5856]:MethodDeclaration[5023-5856]"
    }, {
      "left" : "public static String random(int count, int start, int end, boolean letters, boolean numbers, char... chars)",
      "right" : "public static String random(int count, int start, int end, boolean letters, boolean numbers, char... chars)",
      "info" : "MethodDeclaration[5862-7008]:MethodDeclaration[5862-7008]"
    }, {
      "left" : "public static String random(int count, int start, int end, boolean letters, boolean numbers,\n                                char[] chars, Random random)",
      "right" : "public static String random(int count, int start, int end, boolean letters, boolean numbers,\n                                char[] chars, Random random)",
      "info" : "MethodDeclaration[7014-10884]:MethodDeclaration[7014-11133]"
    }, {
      "left" : "public static String random(int count, String chars)",
      "right" : "public static String random(int count, String chars)",
      "info" : "MethodDeclaration[10890-11701]:MethodDeclaration[11139-11950]"
    }, {
      "left" : "public static String random(int count, char... chars)",
      "right" : "public static String random(int count, char... chars)",
      "info" : "MethodDeclaration[11707-12415]:MethodDeclaration[11956-12664]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2125-2147]:Block[2125-2147]"
    }, {
      "left" : "super();",
      "right" : "super();",
      "info" : "SuperConstructorInvocation[2133-2141]:SuperConstructorInvocation[2133-2141]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2575-2626]:Block[2575-2626]"
    }, {
      "left" : "return random(count, false, false);",
      "right" : "return random(count, false, false);",
      "info" : "ReturnStatement[2585-2620]:ReturnStatement[2585-2620]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3038-3098]:Block[3038-3098]"
    }, {
      "left" : "return random(count, 32, 127, false, false);",
      "right" : "return random(count, 32, 127, false, false);",
      "info" : "ReturnStatement[3048-3092]:ReturnStatement[3048-3092]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3462-3512]:Block[3462-3512]"
    }, {
      "left" : "return random(count, true, false);",
      "right" : "return random(count, true, false);",
      "info" : "ReturnStatement[3472-3506]:ReturnStatement[3472-3506]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3881-3930]:Block[3881-3930]"
    }, {
      "left" : "return random(count, true, true);",
      "right" : "return random(count, true, true);",
      "info" : "ReturnStatement[3891-3924]:ReturnStatement[3891-3924]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4288-4338]:Block[4288-4338]"
    }, {
      "left" : "return random(count, false, true);",
      "right" : "return random(count, false, true);",
      "info" : "ReturnStatement[4298-4332]:ReturnStatement[4298-4332]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4952-5013]:Block[4952-5013]"
    }, {
      "left" : "return random(count, 0, 0, letters, numbers);",
      "right" : "return random(count, 0, 0, letters, numbers);",
      "info" : "ReturnStatement[4962-5007]:ReturnStatement[4962-5007]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5775-5856]:Block[5775-5856]"
    }, {
      "left" : "return random(count, start, end, letters, numbers, null, RANDOM);",
      "right" : "return random(count, start, end, letters, numbers, null, RANDOM);",
      "info" : "ReturnStatement[5785-5850]:ReturnStatement[5785-5850]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6926-7008]:Block[6926-7008]"
    }, {
      "left" : "return random(count, start, end, letters, numbers, chars, RANDOM);",
      "right" : "return random(count, start, end, letters, numbers, chars, RANDOM);",
      "info" : "ReturnStatement[6936-7002]:ReturnStatement[6936-7002]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8773-10884]:Block[8773-11133]"
    }, {
      "left" : "if (count == 0)",
      "right" : "if (count == 0)",
      "info" : "IfStatement[8783-8977]:IfStatement[8783-8977]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8799-8833]:Block[8799-8833]"
    }, {
      "left" : "return \"\";",
      "right" : "return \"\";",
      "info" : "ReturnStatement[8813-8823]:ReturnStatement[8813-8823]"
    }, {
      "left" : "if (count < 0)",
      "right" : "if (count < 0)",
      "info" : "IfStatement[8839-8977]:IfStatement[8839-8977]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8854-8977]:Block[8854-8977]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Requested random string length \" + count + \" is less than 0.\");",
      "right" : "throw new IllegalArgumentException(\"Requested random string length \" + count + \" is less than 0.\");",
      "info" : "ThrowStatement[8868-8967]:ThrowStatement[8868-8967]"
    }, {
      "left" : "if (start == 0 && end == 0)",
      "right" : "if (start == 0 && end == 0)",
      "info" : "IfStatement[8987-9242]:IfStatement[9132-9491]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9015-9242]:Block[9160-9491]"
    }, {
      "left" : "if (!letters && !numbers)",
      "right" : "if (!letters && !numbers)",
      "info" : "IfStatement[9033-9232]:IfStatement[9268-9467]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9059-9123]:Block[9250-9481]"
    }, {
      "left" : "end = Integer.MAX_VALUE;",
      "right" : "end = Integer.MAX_VALUE;",
      "info" : "ExpressionStatement[9081-9105]:ExpressionStatement[9316-9340]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9129-9232]:Block[9364-9467]"
    }, {
      "left" : "end = 'z' + 1;",
      "right" : "end = 'z' + 1;",
      "info" : "ExpressionStatement[9151-9165]:ExpressionStatement[9386-9400]"
    }, {
      "left" : "start = ' ';",
      "right" : "start = ' ';",
      "info" : "ExpressionStatement[9186-9198]:ExpressionStatement[9421-9433]"
    }, {
      "left" : "char[] buffer = new char[count];",
      "right" : "char[] buffer = new char[count];",
      "info" : "VariableDeclarationStatement[9252-9284]:VariableDeclarationStatement[9501-9533]"
    }, {
      "left" : "int gap = end - start;",
      "right" : "int gap = end - start;",
      "info" : "VariableDeclarationStatement[9293-9315]:VariableDeclarationStatement[9542-9564]"
    }, {
      "left" : "while (count-- != 0)",
      "right" : "while (count-- != 0)",
      "info" : "WhileStatement[9325-10843]:WhileStatement[9574-11092]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9346-10843]:Block[9595-11092]"
    }, {
      "left" : "char ch;",
      "right" : "char ch;",
      "info" : "VariableDeclarationStatement[9360-9368]:VariableDeclarationStatement[9609-9617]"
    }, {
      "left" : "if (chars == null)",
      "right" : "if (chars == null)",
      "info" : "IfStatement[9381-9552]:IfStatement[9630-9801]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9400-9474]:Block[9649-9723]"
    }, {
      "left" : "ch = (char) (random.nextInt(gap) + start);",
      "right" : "ch = (char) (random.nextInt(gap) + start);",
      "info" : "ExpressionStatement[9418-9460]:ExpressionStatement[9667-9709]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9480-9552]:Block[9729-9801]"
    }, {
      "left" : "ch = chars[random.nextInt(gap) + start];",
      "right" : "ch = chars[random.nextInt(gap) + start];",
      "info" : "ExpressionStatement[9498-9538]:ExpressionStatement[9747-9787]"
    }, {
      "left" : "if (letters && Character.isLetter(ch)\n                    || numbers && Character.isDigit(ch)\n                    || !letters && !numbers)",
      "right" : "if (letters && Character.isLetter(ch)\n                    || numbers && Character.isDigit(ch)\n                    || !letters && !numbers)",
      "info" : "IfStatement[9565-10833]:IfStatement[9814-11082]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9704-10787]:Block[9953-11036]"
    }, {
      "left" : "if(ch >= 56320 && ch <= 57343)",
      "right" : "if(ch >= 56320 && ch <= 57343)",
      "info" : "IfStatement[9722-10773]:IfStatement[9971-11022]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9753-10132]:Block[10002-10381]"
    }, {
      "left" : "if(count == 0)",
      "right" : "if(count == 0)",
      "info" : "IfStatement[9775-10114]:IfStatement[10024-10363]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9790-9846]:Block[10039-10095]"
    }, {
      "left" : "count++;",
      "right" : "count++;",
      "info" : "ExpressionStatement[9816-9824]:ExpressionStatement[10065-10073]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9852-10114]:Block[10101-10363]"
    }, {
      "left" : "buffer[count] = ch;",
      "right" : "buffer[count] = ch;",
      "info" : "ExpressionStatement[9962-9981]:ExpressionStatement[10211-10230]"
    }, {
      "left" : "count--;",
      "right" : "count--;",
      "info" : "ExpressionStatement[10006-10014]:ExpressionStatement[10255-10263]"
    }, {
      "left" : "buffer[count] = (char) (55296 + random.nextInt(128));",
      "right" : "buffer[count] = (char) (55296 + random.nextInt(128));",
      "info" : "ExpressionStatement[10039-10092]:ExpressionStatement[10288-10341]"
    }, {
      "left" : "if(ch >= 55296 && ch <= 56191)",
      "right" : "if(ch >= 55296 && ch <= 56191)",
      "info" : "IfStatement[10138-10773]:IfStatement[10387-11022]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10169-10549]:Block[10418-10798]"
    }, {
      "left" : "if(count == 0)",
      "right" : "if(count == 0)",
      "info" : "IfStatement[10191-10531]:IfStatement[10440-10780]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10206-10262]:Block[10455-10511]"
    }, {
      "left" : "count++;",
      "right" : "count++;",
      "info" : "ExpressionStatement[10232-10240]:ExpressionStatement[10481-10489]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10268-10531]:Block[10517-10780]"
    }, {
      "left" : "buffer[count] = (char) (56320 + random.nextInt(128));",
      "right" : "buffer[count] = (char) (56320 + random.nextInt(128));",
      "info" : "ExpressionStatement[10379-10432]:ExpressionStatement[10628-10681]"
    }, {
      "left" : "count--;",
      "right" : "count--;",
      "info" : "ExpressionStatement[10457-10465]:ExpressionStatement[10706-10714]"
    }, {
      "left" : "buffer[count] = ch;",
      "right" : "buffer[count] = ch;",
      "info" : "ExpressionStatement[10490-10509]:ExpressionStatement[10739-10758]"
    }, {
      "left" : "if(ch >= 56192 && ch <= 56319)",
      "right" : "if(ch >= 56192 && ch <= 56319)",
      "info" : "IfStatement[10555-10773]:IfStatement[10804-11022]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10586-10708]:Block[10835-10957]"
    }, {
      "left" : "count++;",
      "right" : "count++;",
      "info" : "ExpressionStatement[10682-10690]:ExpressionStatement[10931-10939]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10714-10773]:Block[10963-11022]"
    }, {
      "left" : "buffer[count] = ch;",
      "right" : "buffer[count] = ch;",
      "info" : "ExpressionStatement[10736-10755]:ExpressionStatement[10985-11004]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10793-10833]:Block[11042-11082]"
    }, {
      "left" : "count++;",
      "right" : "count++;",
      "info" : "ExpressionStatement[10811-10819]:ExpressionStatement[11060-11068]"
    }, {
      "left" : "return new String(buffer);",
      "right" : "return new String(buffer);",
      "info" : "ReturnStatement[10852-10878]:ReturnStatement[11101-11127]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11536-11701]:Block[11785-11950]"
    }, {
      "left" : "if (chars == null)",
      "right" : "if (chars == null)",
      "info" : "IfStatement[11546-11644]:IfStatement[11795-11893]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11565-11644]:Block[11814-11893]"
    }, {
      "left" : "return random(count, 0, 0, false, false, null, RANDOM);",
      "right" : "return random(count, 0, 0, false, false, null, RANDOM);",
      "info" : "ReturnStatement[11579-11634]:ReturnStatement[11828-11883]"
    }, {
      "left" : "return random(count, chars.toCharArray());",
      "right" : "return random(count, chars.toCharArray());",
      "info" : "ReturnStatement[11653-11695]:ReturnStatement[11902-11944]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12225-12415]:Block[12474-12664]"
    }, {
      "left" : "if (chars == null)",
      "right" : "if (chars == null)",
      "info" : "IfStatement[12235-12333]:IfStatement[12484-12582]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12254-12333]:Block[12503-12582]"
    }, {
      "left" : "return random(count, 0, 0, false, false, null, RANDOM);",
      "right" : "return random(count, 0, 0, false, false, null, RANDOM);",
      "info" : "ReturnStatement[12268-12323]:ReturnStatement[12517-12572]"
    }, {
      "left" : "return random(count, 0, chars.length, false, false, chars, RANDOM);",
      "right" : "return random(count, 0, chars.length, false, false, chars, RANDOM);",
      "info" : "ReturnStatement[12342-12409]:ReturnStatement[12591-12658]"
    } ]
  },
  "interFileMappings" : { }
}