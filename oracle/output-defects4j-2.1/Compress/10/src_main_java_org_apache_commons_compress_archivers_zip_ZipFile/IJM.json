{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "ZipFile",
      "right" : "ZipFile",
      "info" : "TypeDeclaration[1709-35069]:TypeDeclaration[1709-35258]"
    }, {
      "left" : "private static final int HASH_SIZE = 509;",
      "right" : "private static final int HASH_SIZE = 509;",
      "info" : "FieldDeclaration[3053-3094]:FieldDeclaration[3053-3094]"
    }, {
      "left" : "static final int NIBLET_MASK = 0x0f;",
      "right" : "static final int NIBLET_MASK = 0x0f;",
      "info" : "FieldDeclaration[3099-3135]:FieldDeclaration[3099-3135]"
    }, {
      "left" : "static final int BYTE_SHIFT = 8;",
      "right" : "static final int BYTE_SHIFT = 8;",
      "info" : "FieldDeclaration[3140-3172]:FieldDeclaration[3140-3172]"
    }, {
      "left" : "private static final int POS_0 = 0;",
      "right" : "private static final int POS_0 = 0;",
      "info" : "FieldDeclaration[3177-3212]:FieldDeclaration[3177-3212]"
    }, {
      "left" : "private static final int POS_1 = 1;",
      "right" : "private static final int POS_1 = 1;",
      "info" : "FieldDeclaration[3217-3252]:FieldDeclaration[3217-3252]"
    }, {
      "left" : "private static final int POS_2 = 2;",
      "right" : "private static final int POS_2 = 2;",
      "info" : "FieldDeclaration[3257-3292]:FieldDeclaration[3257-3292]"
    }, {
      "left" : "private static final int POS_3 = 3;",
      "right" : "private static final int POS_3 = 3;",
      "info" : "FieldDeclaration[3297-3332]:FieldDeclaration[3297-3332]"
    }, {
      "left" : "private final Map<ZipArchiveEntry, OffsetEntry> entries =\n        new LinkedHashMap<ZipArchiveEntry, OffsetEntry>(HASH_SIZE);",
      "right" : "private final Map<ZipArchiveEntry, OffsetEntry> entries =\n        new LinkedHashMap<ZipArchiveEntry, OffsetEntry>(HASH_SIZE);",
      "info" : "FieldDeclaration[3338-3606]:FieldDeclaration[3338-3606]"
    }, {
      "left" : "private final Map<String, ZipArchiveEntry> nameMap =\n        new HashMap<String, ZipArchiveEntry>(HASH_SIZE);",
      "right" : "private final Map<String, ZipArchiveEntry> nameMap =\n        new HashMap<String, ZipArchiveEntry>(HASH_SIZE);",
      "info" : "FieldDeclaration[3612-3799]:FieldDeclaration[3612-3799]"
    }, {
      "left" : "OffsetEntry",
      "right" : "OffsetEntry",
      "info" : "TypeDeclaration[3805-3929]:TypeDeclaration[3805-3929]"
    }, {
      "left" : "private long headerOffset = -1;",
      "right" : "private long headerOffset = -1;",
      "info" : "FieldDeclaration[3854-3885]:FieldDeclaration[3854-3885]"
    }, {
      "left" : "private long dataOffset = -1;",
      "right" : "private long dataOffset = -1;",
      "info" : "FieldDeclaration[3894-3923]:FieldDeclaration[3894-3923]"
    }, {
      "left" : "private final String encoding;",
      "right" : "private final String encoding;",
      "info" : "FieldDeclaration[3935-4277]:FieldDeclaration[3935-4277]"
    }, {
      "left" : "private final ZipEncoding zipEncoding;",
      "right" : "private final ZipEncoding zipEncoding;",
      "info" : "FieldDeclaration[4283-4404]:FieldDeclaration[4283-4404]"
    }, {
      "left" : "private final String archiveName;",
      "right" : "private final String archiveName;",
      "info" : "FieldDeclaration[4410-4494]:FieldDeclaration[4410-4494]"
    }, {
      "left" : "private final RandomAccessFile archive;",
      "right" : "private final RandomAccessFile archive;",
      "info" : "FieldDeclaration[4500-4586]:FieldDeclaration[4500-4586]"
    }, {
      "left" : "private final boolean useUnicodeExtraFields;",
      "right" : "private final boolean useUnicodeExtraFields;",
      "info" : "FieldDeclaration[4592-4709]:FieldDeclaration[4592-4709]"
    }, {
      "left" : "private boolean closed;",
      "right" : "private boolean closed;",
      "info" : "FieldDeclaration[4715-4789]:FieldDeclaration[4715-4789]"
    }, {
      "left" : "public ZipFile(File f) throws IOException",
      "right" : "public ZipFile(File f) throws IOException",
      "info" : "MethodDeclaration[4795-5087]:MethodDeclaration[4795-5087]"
    }, {
      "left" : "public ZipFile(String name) throws IOException",
      "right" : "public ZipFile(String name) throws IOException",
      "info" : "MethodDeclaration[5093-5399]:MethodDeclaration[5093-5399]"
    }, {
      "left" : "public ZipFile(String name, String encoding) throws IOException",
      "right" : "public ZipFile(String name, String encoding) throws IOException",
      "info" : "MethodDeclaration[5405-5900]:MethodDeclaration[5405-5900]"
    }, {
      "left" : "public ZipFile(File f, String encoding) throws IOException",
      "right" : "public ZipFile(File f, String encoding) throws IOException",
      "info" : "MethodDeclaration[5906-6379]:MethodDeclaration[5906-6379]"
    }, {
      "left" : "public ZipFile(File f, String encoding, boolean useUnicodeExtraFields)\n        throws IOException",
      "right" : "public ZipFile(File f, String encoding, boolean useUnicodeExtraFields)\n        throws IOException",
      "info" : "MethodDeclaration[6385-7776]:MethodDeclaration[6385-7776]"
    }, {
      "left" : "public String getEncoding()",
      "right" : "public String getEncoding()",
      "info" : "MethodDeclaration[7782-8000]:MethodDeclaration[7782-8000]"
    }, {
      "left" : "public void close() throws IOException",
      "right" : "public void close() throws IOException",
      "info" : "MethodDeclaration[8006-8361]:MethodDeclaration[8006-8361]"
    }, {
      "left" : "public static void closeQuietly(ZipFile zipfile)",
      "right" : "public static void closeQuietly(ZipFile zipfile)",
      "info" : "MethodDeclaration[8367-8798]:MethodDeclaration[8367-8798]"
    }, {
      "left" : "public Enumeration<ZipArchiveEntry> getEntries()",
      "right" : "public Enumeration<ZipArchiveEntry> getEntries()",
      "info" : "MethodDeclaration[8804-9156]:MethodDeclaration[8804-9156]"
    }, {
      "left" : "public Enumeration<ZipArchiveEntry> getEntriesInPhysicalOrder()",
      "right" : "public Enumeration<ZipArchiveEntry> getEntriesInPhysicalOrder()",
      "info" : "MethodDeclaration[9162-9741]:MethodDeclaration[9162-9741]"
    }, {
      "left" : "public ZipArchiveEntry getEntry(String name)",
      "right" : "public ZipArchiveEntry getEntry(String name)",
      "info" : "MethodDeclaration[9747-10092]:MethodDeclaration[9747-10092]"
    }, {
      "left" : "public boolean canReadEntryData(ZipArchiveEntry ze)",
      "right" : "public boolean canReadEntryData(ZipArchiveEntry ze)",
      "info" : "MethodDeclaration[10098-10458]:MethodDeclaration[10098-10458]"
    }, {
      "left" : "public InputStream getInputStream(ZipArchiveEntry ze)\n        throws IOException, ZipException",
      "right" : "public InputStream getInputStream(ZipArchiveEntry ze)\n        throws IOException, ZipException",
      "info" : "MethodDeclaration[10464-11907]:MethodDeclaration[10464-11907]"
    }, {
      "left" : "public void close() throws IOException",
      "right" : "public void close() throws IOException",
      "info" : "MethodDeclaration[11543-11714]:MethodDeclaration[11543-11714]"
    }, {
      "left" : "protected void finalize() throws Throwable",
      "right" : "protected void finalize() throws Throwable",
      "info" : "MethodDeclaration[11913-12395]:MethodDeclaration[11913-12395]"
    }, {
      "left" : "private static final int CFH_LEN =\n         SHORT\n         + SHORT\n         + SHORT\n         + SHORT\n         + SHORT\n         + SHORT\n         + WORD\n         + WORD\n         + WORD\n         + SHORT\n         + SHORT\n         + SHORT\n         + SHORT\n         + SHORT\n         + WORD\n         + WORD;",
      "right" : "private static final int CFH_LEN =\n         SHORT\n         + SHORT\n         + SHORT\n         + SHORT\n         + SHORT\n         + SHORT\n         + WORD\n         + WORD\n         + WORD\n         + SHORT\n         + SHORT\n         + SHORT\n         + SHORT\n         + SHORT\n         + WORD\n         + WORD;",
      "info" : "FieldDeclaration[12401-13415]:FieldDeclaration[12401-13415]"
    }, {
      "left" : "private static final long CFH_SIG =\n        ZipLong.getValue(ZipArchiveOutputStream.CFH_SIG);",
      "right" : "private static final long CFH_SIG =\n        ZipLong.getValue(ZipArchiveOutputStream.CFH_SIG);",
      "info" : "FieldDeclaration[13421-13514]:FieldDeclaration[13421-13514]"
    }, {
      "left" : "private Map<ZipArchiveEntry, NameAndComment> populateFromCentralDirectory()\n        throws IOException",
      "right" : "private Map<ZipArchiveEntry, NameAndComment> populateFromCentralDirectory()\n        throws IOException",
      "info" : "MethodDeclaration[13520-14831]:MethodDeclaration[13520-14831]"
    }, {
      "left" : "private void\n        readCentralDirectoryEntry(Map<ZipArchiveEntry, NameAndComment> noUTF8Flag)\n        throws IOException",
      "right" : "private void\n        readCentralDirectoryEntry(Map<ZipArchiveEntry, NameAndComment> noUTF8Flag)\n        throws IOException",
      "info" : "MethodDeclaration[14837-17776]:MethodDeclaration[14837-17776]"
    }, {
      "left" : "private void setSizesAndOffsetFromZip64Extra(ZipArchiveEntry ze,\n                                                 OffsetEntry offset,\n                                                 int diskStart)\n        throws IOException",
      "right" : "private void setSizesAndOffsetFromZip64Extra(ZipArchiveEntry ze,\n                                                 OffsetEntry offset,\n                                                 int diskStart)\n        throws IOException",
      "info" : "MethodDeclaration[17782-19935]:MethodDeclaration[17782-19935]"
    }, {
      "left" : "private static final int MIN_EOCD_SIZE =\n         WORD\n         + SHORT\n        \n         + SHORT\n        \n         + SHORT\n        \n         + SHORT\n         + WORD\n        \n        \n         + WORD\n         + SHORT;",
      "right" : "private static final int MIN_EOCD_SIZE =\n         WORD\n         + SHORT\n        \n         + SHORT\n        \n         + SHORT\n        \n         + SHORT\n         + WORD\n        \n        \n         + WORD\n         + SHORT;",
      "info" : "FieldDeclaration[19941-20808]:FieldDeclaration[19941-20808]"
    }, {
      "left" : "private static final int MAX_EOCD_SIZE = MIN_EOCD_SIZE\n         + ZIP64_MAGIC_SHORT;",
      "right" : "private static final int MAX_EOCD_SIZE = MIN_EOCD_SIZE\n         + ZIP64_MAGIC_SHORT;",
      "info" : "FieldDeclaration[20814-21044]:FieldDeclaration[20814-21044]"
    }, {
      "left" : "private static final int CFD_LOCATOR_OFFSET =\n         WORD\n         + SHORT\n        \n         + SHORT\n        \n         + SHORT\n        \n         + SHORT\n         + WORD;",
      "right" : "private static final int CFD_LOCATOR_OFFSET =\n         WORD\n         + SHORT\n        \n         + SHORT\n        \n         + SHORT\n        \n         + SHORT\n         + WORD;",
      "info" : "FieldDeclaration[21050-21788]:FieldDeclaration[21050-21788]"
    }, {
      "left" : "private static final int ZIP64_EOCDL_LENGTH =\n         WORD\n        \n        \n         + WORD\n        \n         + DWORD\n         + WORD;",
      "right" : "private static final int ZIP64_EOCDL_LENGTH =\n         WORD\n        \n        \n         + WORD\n        \n         + DWORD\n         + WORD;",
      "info" : "FieldDeclaration[21794-22416]:FieldDeclaration[21794-22416]"
    }, {
      "left" : "private static final int ZIP64_EOCDL_LOCATOR_OFFSET =\n         WORD\n        \n        \n         + WORD;",
      "right" : "private static final int ZIP64_EOCDL_LOCATOR_OFFSET =\n         WORD\n        \n        \n         + WORD;",
      "info" : "FieldDeclaration[22422-22950]:FieldDeclaration[22422-22950]"
    }, {
      "left" : "private static final int ZIP64_EOCD_CFD_LOCATOR_OFFSET =\n        \n         WORD\n        \n         + DWORD\n         + SHORT\n         + SHORT\n         + WORD\n        \n         + WORD\n        \n         + DWORD\n        \n         + DWORD\n         + DWORD;",
      "right" : "private static final int ZIP64_EOCD_CFD_LOCATOR_OFFSET =\n        \n         WORD\n        \n         + DWORD\n         + SHORT\n         + SHORT\n         + WORD\n        \n         + WORD\n        \n         + DWORD\n        \n         + DWORD\n         + DWORD;",
      "info" : "FieldDeclaration[22956-23970]:FieldDeclaration[22956-23970]"
    }, {
      "left" : "private void positionAtCentralDirectory()\n        throws IOException",
      "right" : "private void positionAtCentralDirectory()\n        throws IOException",
      "info" : "MethodDeclaration[23976-24760]:MethodDeclaration[23976-24760]"
    }, {
      "left" : "private void positionAtCentralDirectory64()\n        throws IOException",
      "right" : "private void positionAtCentralDirectory64()\n        throws IOException",
      "info" : "MethodDeclaration[24766-26121]:MethodDeclaration[24766-26121]"
    }, {
      "left" : "private void positionAtCentralDirectory32()\n        throws IOException",
      "right" : "private void positionAtCentralDirectory32()\n        throws IOException",
      "info" : "MethodDeclaration[26127-26797]:MethodDeclaration[26127-26797]"
    }, {
      "left" : "private boolean tryToLocateSignature(long minDistanceFromEnd,\n                                         long maxDistanceFromEnd,\n                                         byte[] sig) throws IOException",
      "right" : "private boolean tryToLocateSignature(long minDistanceFromEnd,\n                                         long maxDistanceFromEnd,\n                                         byte[] sig) throws IOException",
      "info" : "MethodDeclaration[26803-28253]:MethodDeclaration[26803-28253]"
    }, {
      "left" : "private void skipBytes(final int count) throws IOException",
      "right" : "private void skipBytes(final int count) throws IOException",
      "info" : "MethodDeclaration[28259-28714]:MethodDeclaration[28259-28714]"
    }, {
      "left" : "private static final long LFH_OFFSET_FOR_FILENAME_LENGTH =\n         WORD\n         + SHORT\n         + SHORT\n         + SHORT\n         + SHORT\n         + SHORT\n         + WORD\n         + WORD\n         + WORD;",
      "right" : "private static final long LFH_OFFSET_FOR_FILENAME_LENGTH =\n         WORD\n         + SHORT\n         + SHORT\n         + SHORT\n         + SHORT\n         + SHORT\n         + WORD\n         + WORD\n         + WORD;",
      "info" : "FieldDeclaration[28720-29374]:FieldDeclaration[28720-29374]"
    }, {
      "left" : "private void resolveLocalFileHeaderData(Map<ZipArchiveEntry, NameAndComment>\n                                            entriesWithoutUTF8Flag)\n        throws IOException",
      "right" : "private void resolveLocalFileHeaderData(Map<ZipArchiveEntry, NameAndComment>\n                                            entriesWithoutUTF8Flag)\n        throws IOException",
      "info" : "MethodDeclaration[29380-31596]:MethodDeclaration[29380-31785]"
    }, {
      "left" : "private boolean startsWithLocalFileHeader() throws IOException",
      "right" : "private boolean startsWithLocalFileHeader() throws IOException",
      "info" : "MethodDeclaration[31602-32085]:MethodDeclaration[31791-32274]"
    }, {
      "left" : "BoundedInputStream",
      "right" : "BoundedInputStream",
      "info" : "TypeDeclaration[32091-33935]:TypeDeclaration[32280-34124]"
    }, {
      "left" : "private long remaining;",
      "right" : "private long remaining;",
      "info" : "FieldDeclaration[32325-32348]:FieldDeclaration[32514-32537]"
    }, {
      "left" : "private long loc;",
      "right" : "private long loc;",
      "info" : "FieldDeclaration[32357-32374]:FieldDeclaration[32546-32563]"
    }, {
      "left" : "private boolean addDummyByte = false;",
      "right" : "private boolean addDummyByte = false;",
      "info" : "FieldDeclaration[32383-32420]:FieldDeclaration[32572-32609]"
    }, {
      "left" : "BoundedInputStream(long start, long remaining)",
      "right" : "BoundedInputStream(long start, long remaining)",
      "info" : "MethodDeclaration[32430-32553]:MethodDeclaration[32619-32742]"
    }, {
      "left" : "public int read() throws IOException",
      "right" : "public int read() throws IOException",
      "info" : "MethodDeclaration[32563-32959]:MethodDeclaration[32752-33148]"
    }, {
      "left" : "public int read(byte[] b, int off, int len) throws IOException",
      "right" : "public int read(byte[] b, int off, int len) throws IOException",
      "info" : "MethodDeclaration[32969-33740]:MethodDeclaration[33158-33929]"
    }, {
      "left" : "void addDummy()",
      "right" : "void addDummy()",
      "info" : "MethodDeclaration[33750-33929]:MethodDeclaration[33939-34118]"
    }, {
      "left" : "NameAndComment",
      "right" : "NameAndComment",
      "info" : "TypeDeclaration[33941-34201]:TypeDeclaration[34130-34390]"
    }, {
      "left" : "private final byte[] name;",
      "right" : "private final byte[] name;",
      "info" : "FieldDeclaration[33993-34019]:FieldDeclaration[34182-34208]"
    }, {
      "left" : "private final byte[] comment;",
      "right" : "private final byte[] comment;",
      "info" : "FieldDeclaration[34028-34057]:FieldDeclaration[34217-34246]"
    }, {
      "left" : "private NameAndComment(byte[] name, byte[] comment)",
      "right" : "private NameAndComment(byte[] name, byte[] comment)",
      "info" : "MethodDeclaration[34066-34195]:MethodDeclaration[34255-34384]"
    }, {
      "left" : "private final Comparator<ZipArchiveEntry> OFFSET_COMPARATOR =\n        new Comparator<ZipArchiveEntry>() {\n        public int compare(ZipArchiveEntry e1, ZipArchiveEntry e2) {\n            if (e1 == e2)\n                return 0;\n\n            OffsetEntry off1 = entries.get(e1);\n            OffsetEntry off2 = entries.get(e2);\n            if (off1 == null) {\n                return 1;\n            }\n            if (off2 == null) {\n                return -1;\n            }\n            long val = (off1.headerOffset - off2.headerOffset);\n            return val == 0 ? 0 : val < 0 ? -1 : +1;\n        }\n    };",
      "right" : "private final Comparator<ZipArchiveEntry> OFFSET_COMPARATOR =\n        new Comparator<ZipArchiveEntry>() {\n        public int compare(ZipArchiveEntry e1, ZipArchiveEntry e2) {\n            if (e1 == e2)\n                return 0;\n\n            OffsetEntry off1 = entries.get(e1);\n            OffsetEntry off2 = entries.get(e2);\n            if (off1 == null) {\n                return 1;\n            }\n            if (off2 == null) {\n                return -1;\n            }\n            long val = (off1.headerOffset - off2.headerOffset);\n            return val == 0 ? 0 : val < 0 ? -1 : +1;\n        }\n    };",
      "info" : "FieldDeclaration[34207-35067]:FieldDeclaration[34396-35256]"
    }, {
      "left" : "public int compare(ZipArchiveEntry e1, ZipArchiveEntry e2)",
      "right" : "public int compare(ZipArchiveEntry e1, ZipArchiveEntry e2)",
      "info" : "MethodDeclaration[34579-35060]:MethodDeclaration[34768-35249]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5039-5087]:Block[5039-5087]"
    }, {
      "left" : "this(f, ZipEncodingHelper.UTF8);",
      "right" : "this(f, ZipEncodingHelper.UTF8);",
      "info" : "ConstructorInvocation[5049-5081]:ConstructorInvocation[5049-5081]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5338-5399]:Block[5338-5399]"
    }, {
      "left" : "this(new File(name), ZipEncodingHelper.UTF8);",
      "right" : "this(new File(name), ZipEncodingHelper.UTF8);",
      "info" : "ConstructorInvocation[5348-5393]:ConstructorInvocation[5348-5393]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5847-5900]:Block[5847-5900]"
    }, {
      "left" : "this(new File(name), encoding, true);",
      "right" : "this(new File(name), encoding, true);",
      "info" : "ConstructorInvocation[5857-5894]:ConstructorInvocation[5857-5894]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6339-6379]:Block[6339-6379]"
    }, {
      "left" : "this(f, encoding, true);",
      "right" : "this(f, encoding, true);",
      "info" : "ConstructorInvocation[6349-6373]:ConstructorInvocation[6349-6373]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6942-7776]:Block[6942-7776]"
    }, {
      "left" : "this.archiveName = f.getAbsolutePath();",
      "right" : "this.archiveName = f.getAbsolutePath();",
      "info" : "ExpressionStatement[6952-6991]:ExpressionStatement[6952-6991]"
    }, {
      "left" : "this.encoding = encoding;",
      "right" : "this.encoding = encoding;",
      "info" : "ExpressionStatement[7000-7025]:ExpressionStatement[7000-7025]"
    }, {
      "left" : "this.zipEncoding = ZipEncodingHelper.getZipEncoding(encoding);",
      "right" : "this.zipEncoding = ZipEncodingHelper.getZipEncoding(encoding);",
      "info" : "ExpressionStatement[7034-7096]:ExpressionStatement[7034-7096]"
    }, {
      "left" : "this.useUnicodeExtraFields = useUnicodeExtraFields;",
      "right" : "this.useUnicodeExtraFields = useUnicodeExtraFields;",
      "info" : "ExpressionStatement[7105-7156]:ExpressionStatement[7105-7156]"
    }, {
      "left" : "archive = new RandomAccessFile(f, \"r\");",
      "right" : "archive = new RandomAccessFile(f, \"r\");",
      "info" : "ExpressionStatement[7165-7204]:ExpressionStatement[7165-7204]"
    }, {
      "left" : "boolean success = false;",
      "right" : "boolean success = false;",
      "info" : "VariableDeclarationStatement[7213-7237]:VariableDeclarationStatement[7213-7237]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[7246-7770]:TryStatement[7246-7770]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7250-7475]:Block[7250-7475]"
    }, {
      "left" : "Map<ZipArchiveEntry, NameAndComment> entriesWithoutUTF8Flag =\n                populateFromCentralDirectory();",
      "right" : "Map<ZipArchiveEntry, NameAndComment> entriesWithoutUTF8Flag =\n                populateFromCentralDirectory();",
      "info" : "VariableDeclarationStatement[7264-7373]:VariableDeclarationStatement[7264-7373]"
    }, {
      "left" : "resolveLocalFileHeaderData(entriesWithoutUTF8Flag);",
      "right" : "resolveLocalFileHeaderData(entriesWithoutUTF8Flag);",
      "info" : "ExpressionStatement[7386-7437]:ExpressionStatement[7386-7437]"
    }, {
      "left" : "success = true;",
      "right" : "success = true;",
      "info" : "ExpressionStatement[7450-7465]:ExpressionStatement[7450-7465]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7484-7770]:Block[7484-7770]"
    }, {
      "left" : "if (!success)",
      "right" : "if (!success)",
      "info" : "IfStatement[7498-7760]:IfStatement[7498-7760]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7512-7760]:Block[7512-7760]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[7530-7746]:TryStatement[7530-7746]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7534-7625]:Block[7534-7625]"
    }, {
      "left" : "closed = true;",
      "right" : "closed = true;",
      "info" : "ExpressionStatement[7556-7570]:ExpressionStatement[7556-7570]"
    }, {
      "left" : "archive.close();",
      "right" : "archive.close();",
      "info" : "ExpressionStatement[7591-7607]:ExpressionStatement[7591-7607]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7649-7746]:Block[7649-7746]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7968-8000]:Block[7968-8000]"
    }, {
      "left" : "return encoding;",
      "right" : "return encoding;",
      "info" : "ReturnStatement[7978-7994]:ReturnStatement[7978-7994]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8155-8361]:Block[8155-8361]"
    }, {
      "left" : "closed = true;",
      "right" : "closed = true;",
      "info" : "ExpressionStatement[8315-8329]:ExpressionStatement[8315-8329]"
    }, {
      "left" : "archive.close();",
      "right" : "archive.close();",
      "info" : "ExpressionStatement[8339-8355]:ExpressionStatement[8339-8355]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8570-8798]:Block[8570-8798]"
    }, {
      "left" : "if (zipfile != null)",
      "right" : "if (zipfile != null)",
      "info" : "IfStatement[8580-8792]:IfStatement[8580-8792]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8601-8792]:Block[8601-8792]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[8615-8782]:TryStatement[8615-8782]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8619-8667]:Block[8619-8667]"
    }, {
      "left" : "zipfile.close();",
      "right" : "zipfile.close();",
      "info" : "ExpressionStatement[8637-8653]:ExpressionStatement[8637-8653]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8690-8782]:Block[8690-8782]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9091-9156]:Block[9091-9156]"
    }, {
      "left" : "return Collections.enumeration(entries.keySet());",
      "right" : "return Collections.enumeration(entries.keySet());",
      "info" : "ReturnStatement[9101-9150]:ReturnStatement[9101-9150]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9514-9741]:Block[9514-9741]"
    }, {
      "left" : "ZipArchiveEntry[] allEntries =\n            entries.keySet().toArray(new ZipArchiveEntry[0]);",
      "right" : "ZipArchiveEntry[] allEntries =\n            entries.keySet().toArray(new ZipArchiveEntry[0]);",
      "info" : "VariableDeclarationStatement[9524-9616]:VariableDeclarationStatement[9524-9616]"
    }, {
      "left" : "Arrays.sort(allEntries, OFFSET_COMPARATOR);",
      "right" : "Arrays.sort(allEntries, OFFSET_COMPARATOR);",
      "info" : "ExpressionStatement[9625-9668]:ExpressionStatement[9625-9668]"
    }, {
      "left" : "return Collections.enumeration(Arrays.asList(allEntries));",
      "right" : "return Collections.enumeration(Arrays.asList(allEntries));",
      "info" : "ReturnStatement[9677-9735]:ReturnStatement[9677-9735]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10051-10092]:Block[10051-10092]"
    }, {
      "left" : "return nameMap.get(name);",
      "right" : "return nameMap.get(name);",
      "info" : "ReturnStatement[10061-10086]:ReturnStatement[10061-10086]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10404-10458]:Block[10404-10458]"
    }, {
      "left" : "return ZipUtil.canHandleEntryData(ze);",
      "right" : "return ZipUtil.canHandleEntryData(ze);",
      "info" : "ReturnStatement[10414-10452]:ReturnStatement[10414-10452]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10907-11907]:Block[10907-11907]"
    }, {
      "left" : "OffsetEntry offsetEntry = entries.get(ze);",
      "right" : "OffsetEntry offsetEntry = entries.get(ze);",
      "info" : "VariableDeclarationStatement[10917-10959]:VariableDeclarationStatement[10917-10959]"
    }, {
      "left" : "if (offsetEntry == null)",
      "right" : "if (offsetEntry == null)",
      "info" : "IfStatement[10968-11029]:IfStatement[10968-11029]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10993-11029]:Block[10993-11029]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[11007-11019]:ReturnStatement[11007-11019]"
    }, {
      "left" : "ZipUtil.checkRequestedFeatures(ze);",
      "right" : "ZipUtil.checkRequestedFeatures(ze);",
      "info" : "ExpressionStatement[11038-11073]:ExpressionStatement[11038-11073]"
    }, {
      "left" : "long start = offsetEntry.dataOffset;",
      "right" : "long start = offsetEntry.dataOffset;",
      "info" : "VariableDeclarationStatement[11082-11118]:VariableDeclarationStatement[11082-11118]"
    }, {
      "left" : "BoundedInputStream bis =\n            new BoundedInputStream(start, ze.getCompressedSize());",
      "right" : "BoundedInputStream bis =\n            new BoundedInputStream(start, ze.getCompressedSize());",
      "info" : "VariableDeclarationStatement[11127-11218]:VariableDeclarationStatement[11127-11218]"
    }, {
      "left" : "switch (ze.getMethod()) {\n            case ZipArchiveEntry.STORED:\n                return bis;\n            case ZipArchiveEntry.DEFLATED:\n                bis.addDummy();\n                final Inflater inflater = new Inflater(true);\n                return new InflaterInputStream(bis, inflater) {\n                    @Override\n                    public void close() throws IOException {\n                        super.close();\n                        inflater.end();\n                    }\n                };\n            default:\n                throw new ZipException(\"Found unsupported compression method \"\n                                       + ze.getMethod());\n        }",
      "right" : "switch (ze.getMethod()) {\n            case ZipArchiveEntry.STORED:\n                return bis;\n            case ZipArchiveEntry.DEFLATED:\n                bis.addDummy();\n                final Inflater inflater = new Inflater(true);\n                return new InflaterInputStream(bis, inflater) {\n                    @Override\n                    public void close() throws IOException {\n                        super.close();\n                        inflater.end();\n                    }\n                };\n            default:\n                throw new ZipException(\"Found unsupported compression method \"\n                                       + ze.getMethod());\n        }",
      "info" : "SwitchStatement[11227-11901]:SwitchStatement[11227-11901]"
    }, {
      "left" : "case ZipArchiveEntry.STORED:",
      "right" : "case ZipArchiveEntry.STORED:",
      "info" : "SwitchCase[11265-11293]:SwitchCase[11265-11293]"
    }, {
      "left" : "return bis;",
      "right" : "return bis;",
      "info" : "ReturnStatement[11310-11321]:ReturnStatement[11310-11321]"
    }, {
      "left" : "case ZipArchiveEntry.DEFLATED:",
      "right" : "case ZipArchiveEntry.DEFLATED:",
      "info" : "SwitchCase[11334-11364]:SwitchCase[11334-11364]"
    }, {
      "left" : "bis.addDummy();",
      "right" : "bis.addDummy();",
      "info" : "ExpressionStatement[11381-11396]:ExpressionStatement[11381-11396]"
    }, {
      "left" : "final Inflater inflater = new Inflater(true);",
      "right" : "final Inflater inflater = new Inflater(true);",
      "info" : "VariableDeclarationStatement[11413-11458]:VariableDeclarationStatement[11413-11458]"
    }, {
      "left" : "return new InflaterInputStream(bis, inflater) {\n                    @Override\n                    public void close() throws IOException {\n                        super.close();\n                        inflater.end();\n                    }\n                };",
      "right" : "return new InflaterInputStream(bis, inflater) {\n                    @Override\n                    public void close() throws IOException {\n                        super.close();\n                        inflater.end();\n                    }\n                };",
      "info" : "ReturnStatement[11475-11733]:ReturnStatement[11475-11733]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11612-11714]:Block[11612-11714]"
    }, {
      "left" : "super.close();",
      "right" : "super.close();",
      "info" : "ExpressionStatement[11638-11652]:ExpressionStatement[11638-11652]"
    }, {
      "left" : "inflater.end();",
      "right" : "inflater.end();",
      "info" : "ExpressionStatement[11677-11692]:ExpressionStatement[11677-11692]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[11746-11754]:SwitchCase[11746-11754]"
    }, {
      "left" : "throw new ZipException(\"Found unsupported compression method \"\n                                       + ze.getMethod());",
      "right" : "throw new ZipException(\"Found unsupported compression method \"\n                                       + ze.getMethod());",
      "info" : "ThrowStatement[11771-11891]:ThrowStatement[11771-11891]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12118-12395]:Block[12118-12395]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[12128-12389]:TryStatement[12128-12389]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12132-12339]:Block[12132-12339]"
    }, {
      "left" : "if (!closed)",
      "right" : "if (!closed)",
      "info" : "IfStatement[12146-12329]:IfStatement[12146-12329]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12159-12329]:Block[12159-12329]"
    }, {
      "left" : "System.err.println(\"Cleaning up unclosed ZipFile for archive \"\n                                   + archiveName);",
      "right" : "System.err.println(\"Cleaning up unclosed ZipFile for archive \"\n                                   + archiveName);",
      "info" : "ExpressionStatement[12177-12290]:ExpressionStatement[12177-12290]"
    }, {
      "left" : "close();",
      "right" : "close();",
      "info" : "ExpressionStatement[12307-12315]:ExpressionStatement[12307-12315]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12348-12389]:Block[12348-12389]"
    }, {
      "left" : "super.finalize();",
      "right" : "super.finalize();",
      "info" : "ExpressionStatement[12362-12379]:ExpressionStatement[12362-12379]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14090-14831]:Block[14090-14831]"
    }, {
      "left" : "HashMap<ZipArchiveEntry, NameAndComment> noUTF8Flag =\n            new HashMap<ZipArchiveEntry, NameAndComment>();",
      "right" : "HashMap<ZipArchiveEntry, NameAndComment> noUTF8Flag =\n            new HashMap<ZipArchiveEntry, NameAndComment>();",
      "info" : "VariableDeclarationStatement[14100-14213]:VariableDeclarationStatement[14100-14213]"
    }, {
      "left" : "positionAtCentralDirectory();",
      "right" : "positionAtCentralDirectory();",
      "info" : "ExpressionStatement[14223-14252]:ExpressionStatement[14223-14252]"
    }, {
      "left" : "byte[] signatureBytes = new byte[WORD];",
      "right" : "byte[] signatureBytes = new byte[WORD];",
      "info" : "VariableDeclarationStatement[14262-14301]:VariableDeclarationStatement[14262-14301]"
    }, {
      "left" : "archive.readFully(signatureBytes);",
      "right" : "archive.readFully(signatureBytes);",
      "info" : "ExpressionStatement[14310-14344]:ExpressionStatement[14310-14344]"
    }, {
      "left" : "long sig = ZipLong.getValue(signatureBytes);",
      "right" : "long sig = ZipLong.getValue(signatureBytes);",
      "info" : "VariableDeclarationStatement[14353-14397]:VariableDeclarationStatement[14353-14397]"
    }, {
      "left" : "if (sig != CFH_SIG && startsWithLocalFileHeader())",
      "right" : "if (sig != CFH_SIG && startsWithLocalFileHeader())",
      "info" : "IfStatement[14407-14604]:IfStatement[14407-14604]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14458-14604]:Block[14458-14604]"
    }, {
      "left" : "throw new IOException(\"central directory is empty, can't expand\"\n                                  + \" corrupt archive.\");",
      "right" : "throw new IOException(\"central directory is empty, can't expand\"\n                                  + \" corrupt archive.\");",
      "info" : "ThrowStatement[14472-14594]:ThrowStatement[14472-14594]"
    }, {
      "left" : "while (sig == CFH_SIG)",
      "right" : "while (sig == CFH_SIG)",
      "info" : "WhileStatement[14614-14798]:WhileStatement[14614-14798]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14637-14798]:Block[14637-14798]"
    }, {
      "left" : "readCentralDirectoryEntry(noUTF8Flag);",
      "right" : "readCentralDirectoryEntry(noUTF8Flag);",
      "info" : "ExpressionStatement[14651-14689]:ExpressionStatement[14651-14689]"
    }, {
      "left" : "archive.readFully(signatureBytes);",
      "right" : "archive.readFully(signatureBytes);",
      "info" : "ExpressionStatement[14702-14736]:ExpressionStatement[14702-14736]"
    }, {
      "left" : "sig = ZipLong.getValue(signatureBytes);",
      "right" : "sig = ZipLong.getValue(signatureBytes);",
      "info" : "ExpressionStatement[14749-14788]:ExpressionStatement[14749-14788]"
    }, {
      "left" : "return noUTF8Flag;",
      "right" : "return noUTF8Flag;",
      "info" : "ReturnStatement[14807-14825]:ReturnStatement[14807-14825]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15345-17776]:Block[15345-17776]"
    }, {
      "left" : "byte[] cfh = new byte[CFH_LEN];",
      "right" : "byte[] cfh = new byte[CFH_LEN];",
      "info" : "VariableDeclarationStatement[15355-15386]:VariableDeclarationStatement[15355-15386]"
    }, {
      "left" : "archive.readFully(cfh);",
      "right" : "archive.readFully(cfh);",
      "info" : "ExpressionStatement[15396-15419]:ExpressionStatement[15396-15419]"
    }, {
      "left" : "int off = 0;",
      "right" : "int off = 0;",
      "info" : "VariableDeclarationStatement[15428-15440]:VariableDeclarationStatement[15428-15440]"
    }, {
      "left" : "ZipArchiveEntry ze = new ZipArchiveEntry();",
      "right" : "ZipArchiveEntry ze = new ZipArchiveEntry();",
      "info" : "VariableDeclarationStatement[15449-15492]:VariableDeclarationStatement[15449-15492]"
    }, {
      "left" : "int versionMadeBy = ZipShort.getValue(cfh, off);",
      "right" : "int versionMadeBy = ZipShort.getValue(cfh, off);",
      "info" : "VariableDeclarationStatement[15502-15550]:VariableDeclarationStatement[15502-15550]"
    }, {
      "left" : "off += SHORT;",
      "right" : "off += SHORT;",
      "info" : "ExpressionStatement[15559-15572]:ExpressionStatement[15559-15572]"
    }, {
      "left" : "ze.setPlatform((versionMadeBy >> BYTE_SHIFT) & NIBLET_MASK);",
      "right" : "ze.setPlatform((versionMadeBy >> BYTE_SHIFT) & NIBLET_MASK);",
      "info" : "ExpressionStatement[15581-15641]:ExpressionStatement[15581-15641]"
    }, {
      "left" : "off += SHORT;",
      "right" : "off += SHORT;",
      "info" : "ExpressionStatement[15651-15664]:ExpressionStatement[15651-15664]"
    }, {
      "left" : "final GeneralPurposeBit gpFlag = GeneralPurposeBit.parse(cfh, off);",
      "right" : "final GeneralPurposeBit gpFlag = GeneralPurposeBit.parse(cfh, off);",
      "info" : "VariableDeclarationStatement[15695-15762]:VariableDeclarationStatement[15695-15762]"
    }, {
      "left" : "final boolean hasUTF8Flag = gpFlag.usesUTF8ForNames();",
      "right" : "final boolean hasUTF8Flag = gpFlag.usesUTF8ForNames();",
      "info" : "VariableDeclarationStatement[15771-15825]:VariableDeclarationStatement[15771-15825]"
    }, {
      "left" : "final ZipEncoding entryEncoding =\n            hasUTF8Flag ? ZipEncodingHelper.UTF8_ZIP_ENCODING : zipEncoding;",
      "right" : "final ZipEncoding entryEncoding =\n            hasUTF8Flag ? ZipEncodingHelper.UTF8_ZIP_ENCODING : zipEncoding;",
      "info" : "VariableDeclarationStatement[15834-15944]:VariableDeclarationStatement[15834-15944]"
    }, {
      "left" : "ze.setGeneralPurposeBit(gpFlag);",
      "right" : "ze.setGeneralPurposeBit(gpFlag);",
      "info" : "ExpressionStatement[15953-15985]:ExpressionStatement[15953-15985]"
    }, {
      "left" : "off += SHORT;",
      "right" : "off += SHORT;",
      "info" : "ExpressionStatement[15995-16008]:ExpressionStatement[15995-16008]"
    }, {
      "left" : "ze.setMethod(ZipShort.getValue(cfh, off));",
      "right" : "ze.setMethod(ZipShort.getValue(cfh, off));",
      "info" : "ExpressionStatement[16018-16060]:ExpressionStatement[16018-16060]"
    }, {
      "left" : "off += SHORT;",
      "right" : "off += SHORT;",
      "info" : "ExpressionStatement[16069-16082]:ExpressionStatement[16069-16082]"
    }, {
      "left" : "long time = ZipUtil.dosToJavaTime(ZipLong.getValue(cfh, off));",
      "right" : "long time = ZipUtil.dosToJavaTime(ZipLong.getValue(cfh, off));",
      "info" : "VariableDeclarationStatement[16092-16154]:VariableDeclarationStatement[16092-16154]"
    }, {
      "left" : "ze.setTime(time);",
      "right" : "ze.setTime(time);",
      "info" : "ExpressionStatement[16163-16180]:ExpressionStatement[16163-16180]"
    }, {
      "left" : "off += WORD;",
      "right" : "off += WORD;",
      "info" : "ExpressionStatement[16189-16201]:ExpressionStatement[16189-16201]"
    }, {
      "left" : "ze.setCrc(ZipLong.getValue(cfh, off));",
      "right" : "ze.setCrc(ZipLong.getValue(cfh, off));",
      "info" : "ExpressionStatement[16211-16249]:ExpressionStatement[16211-16249]"
    }, {
      "left" : "off += WORD;",
      "right" : "off += WORD;",
      "info" : "ExpressionStatement[16258-16270]:ExpressionStatement[16258-16270]"
    }, {
      "left" : "ze.setCompressedSize(ZipLong.getValue(cfh, off));",
      "right" : "ze.setCompressedSize(ZipLong.getValue(cfh, off));",
      "info" : "ExpressionStatement[16280-16329]:ExpressionStatement[16280-16329]"
    }, {
      "left" : "off += WORD;",
      "right" : "off += WORD;",
      "info" : "ExpressionStatement[16338-16350]:ExpressionStatement[16338-16350]"
    }, {
      "left" : "ze.setSize(ZipLong.getValue(cfh, off));",
      "right" : "ze.setSize(ZipLong.getValue(cfh, off));",
      "info" : "ExpressionStatement[16360-16399]:ExpressionStatement[16360-16399]"
    }, {
      "left" : "off += WORD;",
      "right" : "off += WORD;",
      "info" : "ExpressionStatement[16408-16420]:ExpressionStatement[16408-16420]"
    }, {
      "left" : "int fileNameLen = ZipShort.getValue(cfh, off);",
      "right" : "int fileNameLen = ZipShort.getValue(cfh, off);",
      "info" : "VariableDeclarationStatement[16430-16476]:VariableDeclarationStatement[16430-16476]"
    }, {
      "left" : "off += SHORT;",
      "right" : "off += SHORT;",
      "info" : "ExpressionStatement[16485-16498]:ExpressionStatement[16485-16498]"
    }, {
      "left" : "int extraLen = ZipShort.getValue(cfh, off);",
      "right" : "int extraLen = ZipShort.getValue(cfh, off);",
      "info" : "VariableDeclarationStatement[16508-16551]:VariableDeclarationStatement[16508-16551]"
    }, {
      "left" : "off += SHORT;",
      "right" : "off += SHORT;",
      "info" : "ExpressionStatement[16560-16573]:ExpressionStatement[16560-16573]"
    }, {
      "left" : "int commentLen = ZipShort.getValue(cfh, off);",
      "right" : "int commentLen = ZipShort.getValue(cfh, off);",
      "info" : "VariableDeclarationStatement[16583-16628]:VariableDeclarationStatement[16583-16628]"
    }, {
      "left" : "off += SHORT;",
      "right" : "off += SHORT;",
      "info" : "ExpressionStatement[16637-16650]:ExpressionStatement[16637-16650]"
    }, {
      "left" : "int diskStart = ZipShort.getValue(cfh, off);",
      "right" : "int diskStart = ZipShort.getValue(cfh, off);",
      "info" : "VariableDeclarationStatement[16660-16704]:VariableDeclarationStatement[16660-16704]"
    }, {
      "left" : "off += SHORT;",
      "right" : "off += SHORT;",
      "info" : "ExpressionStatement[16713-16726]:ExpressionStatement[16713-16726]"
    }, {
      "left" : "ze.setInternalAttributes(ZipShort.getValue(cfh, off));",
      "right" : "ze.setInternalAttributes(ZipShort.getValue(cfh, off));",
      "info" : "ExpressionStatement[16736-16790]:ExpressionStatement[16736-16790]"
    }, {
      "left" : "off += SHORT;",
      "right" : "off += SHORT;",
      "info" : "ExpressionStatement[16799-16812]:ExpressionStatement[16799-16812]"
    }, {
      "left" : "ze.setExternalAttributes(ZipLong.getValue(cfh, off));",
      "right" : "ze.setExternalAttributes(ZipLong.getValue(cfh, off));",
      "info" : "ExpressionStatement[16822-16875]:ExpressionStatement[16822-16875]"
    }, {
      "left" : "off += WORD;",
      "right" : "off += WORD;",
      "info" : "ExpressionStatement[16884-16896]:ExpressionStatement[16884-16896]"
    }, {
      "left" : "byte[] fileName = new byte[fileNameLen];",
      "right" : "byte[] fileName = new byte[fileNameLen];",
      "info" : "VariableDeclarationStatement[16906-16946]:VariableDeclarationStatement[16906-16946]"
    }, {
      "left" : "archive.readFully(fileName);",
      "right" : "archive.readFully(fileName);",
      "info" : "ExpressionStatement[16955-16983]:ExpressionStatement[16955-16983]"
    }, {
      "left" : "ze.setName(entryEncoding.decode(fileName), fileName);",
      "right" : "ze.setName(entryEncoding.decode(fileName), fileName);",
      "info" : "ExpressionStatement[16992-17045]:ExpressionStatement[16992-17045]"
    }, {
      "left" : "OffsetEntry offset = new OffsetEntry();",
      "right" : "OffsetEntry offset = new OffsetEntry();",
      "info" : "VariableDeclarationStatement[17078-17117]:VariableDeclarationStatement[17078-17117]"
    }, {
      "left" : "offset.headerOffset = ZipLong.getValue(cfh, off);",
      "right" : "offset.headerOffset = ZipLong.getValue(cfh, off);",
      "info" : "ExpressionStatement[17126-17175]:ExpressionStatement[17126-17175]"
    }, {
      "left" : "entries.put(ze, offset);",
      "right" : "entries.put(ze, offset);",
      "info" : "ExpressionStatement[17228-17252]:ExpressionStatement[17228-17252]"
    }, {
      "left" : "nameMap.put(ze.getName(), ze);",
      "right" : "nameMap.put(ze.getName(), ze);",
      "info" : "ExpressionStatement[17262-17292]:ExpressionStatement[17262-17292]"
    }, {
      "left" : "byte[] cdExtraData = new byte[extraLen];",
      "right" : "byte[] cdExtraData = new byte[extraLen];",
      "info" : "VariableDeclarationStatement[17302-17342]:VariableDeclarationStatement[17302-17342]"
    }, {
      "left" : "archive.readFully(cdExtraData);",
      "right" : "archive.readFully(cdExtraData);",
      "info" : "ExpressionStatement[17351-17382]:ExpressionStatement[17351-17382]"
    }, {
      "left" : "ze.setCentralDirectoryExtra(cdExtraData);",
      "right" : "ze.setCentralDirectoryExtra(cdExtraData);",
      "info" : "ExpressionStatement[17391-17432]:ExpressionStatement[17391-17432]"
    }, {
      "left" : "setSizesAndOffsetFromZip64Extra(ze, offset, diskStart);",
      "right" : "setSizesAndOffsetFromZip64Extra(ze, offset, diskStart);",
      "info" : "ExpressionStatement[17442-17497]:ExpressionStatement[17442-17497]"
    }, {
      "left" : "byte[] comment = new byte[commentLen];",
      "right" : "byte[] comment = new byte[commentLen];",
      "info" : "VariableDeclarationStatement[17507-17545]:VariableDeclarationStatement[17507-17545]"
    }, {
      "left" : "archive.readFully(comment);",
      "right" : "archive.readFully(comment);",
      "info" : "ExpressionStatement[17554-17581]:ExpressionStatement[17554-17581]"
    }, {
      "left" : "ze.setComment(entryEncoding.decode(comment));",
      "right" : "ze.setComment(entryEncoding.decode(comment));",
      "info" : "ExpressionStatement[17590-17635]:ExpressionStatement[17590-17635]"
    }, {
      "left" : "if (!hasUTF8Flag && useUnicodeExtraFields)",
      "right" : "if (!hasUTF8Flag && useUnicodeExtraFields)",
      "info" : "IfStatement[17645-17770]:IfStatement[17645-17770]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17688-17770]:Block[17688-17770]"
    }, {
      "left" : "noUTF8Flag.put(ze, new NameAndComment(fileName, comment));",
      "right" : "noUTF8Flag.put(ze, new NameAndComment(fileName, comment));",
      "info" : "ExpressionStatement[17702-17760]:ExpressionStatement[17702-17760]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18545-19935]:Block[18545-19935]"
    }, {
      "left" : "Zip64ExtendedInformationExtraField z64 =\n            (Zip64ExtendedInformationExtraField)\n            ze.getExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);",
      "right" : "Zip64ExtendedInformationExtraField z64 =\n            (Zip64ExtendedInformationExtraField)\n            ze.getExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);",
      "info" : "VariableDeclarationStatement[18555-18720]:VariableDeclarationStatement[18555-18720]"
    }, {
      "left" : "if (z64 != null)",
      "right" : "if (z64 != null)",
      "info" : "IfStatement[18729-19929]:IfStatement[18729-19929]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18746-19929]:Block[18746-19929]"
    }, {
      "left" : "boolean hasUncompressedSize = ze.getSize() == ZIP64_MAGIC;",
      "right" : "boolean hasUncompressedSize = ze.getSize() == ZIP64_MAGIC;",
      "info" : "VariableDeclarationStatement[18760-18818]:VariableDeclarationStatement[18760-18818]"
    }, {
      "left" : "boolean hasCompressedSize = ze.getCompressedSize() == ZIP64_MAGIC;",
      "right" : "boolean hasCompressedSize = ze.getCompressedSize() == ZIP64_MAGIC;",
      "info" : "VariableDeclarationStatement[18831-18897]:VariableDeclarationStatement[18831-18897]"
    }, {
      "left" : "boolean hasRelativeHeaderOffset =\n                offset.headerOffset == ZIP64_MAGIC;",
      "right" : "boolean hasRelativeHeaderOffset =\n                offset.headerOffset == ZIP64_MAGIC;",
      "info" : "VariableDeclarationStatement[18910-18995]:VariableDeclarationStatement[18910-18995]"
    }, {
      "left" : "z64.reparseCentralDirectoryData(hasUncompressedSize,\n                                            hasCompressedSize,\n                                            hasRelativeHeaderOffset,\n                                            diskStart == ZIP64_MAGIC_SHORT);",
      "right" : "z64.reparseCentralDirectoryData(hasUncompressedSize,\n                                            hasCompressedSize,\n                                            hasRelativeHeaderOffset,\n                                            diskStart == ZIP64_MAGIC_SHORT);",
      "info" : "ExpressionStatement[19008-19269]:ExpressionStatement[19008-19269]"
    }, {
      "left" : "if (hasUncompressedSize)",
      "right" : "if (hasUncompressedSize)",
      "info" : "IfStatement[19283-19493]:IfStatement[19283-19493]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19308-19381]:Block[19308-19381]"
    }, {
      "left" : "ze.setSize(z64.getSize().getLongValue());",
      "right" : "ze.setSize(z64.getSize().getLongValue());",
      "info" : "ExpressionStatement[19326-19367]:ExpressionStatement[19326-19367]"
    }, {
      "left" : "if (hasCompressedSize)",
      "right" : "if (hasCompressedSize)",
      "info" : "IfStatement[19387-19493]:IfStatement[19387-19493]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19410-19493]:Block[19410-19493]"
    }, {
      "left" : "z64.setSize(new ZipEightByteInteger(ze.getSize()));",
      "right" : "z64.setSize(new ZipEightByteInteger(ze.getSize()));",
      "info" : "ExpressionStatement[19428-19479]:ExpressionStatement[19428-19479]"
    }, {
      "left" : "if (hasCompressedSize)",
      "right" : "if (hasCompressedSize)",
      "info" : "IfStatement[19507-19757]:IfStatement[19507-19757]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19530-19623]:Block[19530-19623]"
    }, {
      "left" : "ze.setCompressedSize(z64.getCompressedSize().getLongValue());",
      "right" : "ze.setCompressedSize(z64.getCompressedSize().getLongValue());",
      "info" : "ExpressionStatement[19548-19609]:ExpressionStatement[19548-19609]"
    }, {
      "left" : "if (hasUncompressedSize)",
      "right" : "if (hasUncompressedSize)",
      "info" : "IfStatement[19629-19757]:IfStatement[19629-19757]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19654-19757]:Block[19654-19757]"
    }, {
      "left" : "z64.setCompressedSize(new ZipEightByteInteger(ze.getCompressedSize()));",
      "right" : "z64.setCompressedSize(new ZipEightByteInteger(ze.getCompressedSize()));",
      "info" : "ExpressionStatement[19672-19743]:ExpressionStatement[19672-19743]"
    }, {
      "left" : "if (hasRelativeHeaderOffset)",
      "right" : "if (hasRelativeHeaderOffset)",
      "info" : "IfStatement[19771-19919]:IfStatement[19771-19919]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19800-19919]:Block[19800-19919]"
    }, {
      "left" : "offset.headerOffset =\n                    z64.getRelativeHeaderOffset().getLongValue();",
      "right" : "offset.headerOffset =\n                    z64.getRelativeHeaderOffset().getLongValue();",
      "info" : "ExpressionStatement[19818-19905]:ExpressionStatement[19818-19905]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24284-24760]:Block[24284-24760]"
    }, {
      "left" : "boolean found = tryToLocateSignature(MIN_EOCD_SIZE + ZIP64_EOCDL_LENGTH,\n                                             MAX_EOCD_SIZE + ZIP64_EOCDL_LENGTH,\n                                             ZipArchiveOutputStream\n                                             .ZIP64_EOCD_LOC_SIG);",
      "right" : "boolean found = tryToLocateSignature(MIN_EOCD_SIZE + ZIP64_EOCDL_LENGTH,\n                                             MAX_EOCD_SIZE + ZIP64_EOCDL_LENGTH,\n                                             ZipArchiveOutputStream\n                                             .ZIP64_EOCD_LOC_SIG);",
      "info" : "VariableDeclarationStatement[24294-24582]:VariableDeclarationStatement[24294-24582]"
    }, {
      "left" : "if (!found)",
      "right" : "if (!found)",
      "info" : "IfStatement[24591-24754]:IfStatement[24591-24754]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24603-24693]:Block[24603-24693]"
    }, {
      "left" : "positionAtCentralDirectory32();",
      "right" : "positionAtCentralDirectory32();",
      "info" : "ExpressionStatement[24652-24683]:ExpressionStatement[24652-24683]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24699-24754]:Block[24699-24754]"
    }, {
      "left" : "positionAtCentralDirectory64();",
      "right" : "positionAtCentralDirectory64();",
      "info" : "ExpressionStatement[24713-24744]:ExpressionStatement[24713-24744]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25110-26121]:Block[25110-26121]"
    }, {
      "left" : "skipBytes(ZIP64_EOCDL_LOCATOR_OFFSET);",
      "right" : "skipBytes(ZIP64_EOCDL_LOCATOR_OFFSET);",
      "info" : "ExpressionStatement[25120-25158]:ExpressionStatement[25120-25158]"
    }, {
      "left" : "byte[] zip64EocdOffset = new byte[DWORD];",
      "right" : "byte[] zip64EocdOffset = new byte[DWORD];",
      "info" : "VariableDeclarationStatement[25167-25208]:VariableDeclarationStatement[25167-25208]"
    }, {
      "left" : "archive.readFully(zip64EocdOffset);",
      "right" : "archive.readFully(zip64EocdOffset);",
      "info" : "ExpressionStatement[25217-25252]:ExpressionStatement[25217-25252]"
    }, {
      "left" : "archive.seek(ZipEightByteInteger.getLongValue(zip64EocdOffset));",
      "right" : "archive.seek(ZipEightByteInteger.getLongValue(zip64EocdOffset));",
      "info" : "ExpressionStatement[25261-25325]:ExpressionStatement[25261-25325]"
    }, {
      "left" : "byte[] sig = new byte[WORD];",
      "right" : "byte[] sig = new byte[WORD];",
      "info" : "VariableDeclarationStatement[25334-25362]:VariableDeclarationStatement[25334-25362]"
    }, {
      "left" : "archive.readFully(sig);",
      "right" : "archive.readFully(sig);",
      "info" : "ExpressionStatement[25371-25394]:ExpressionStatement[25371-25394]"
    }, {
      "left" : "if (sig[POS_0] != ZipArchiveOutputStream.ZIP64_EOCD_SIG[POS_0]\n            || sig[POS_1] != ZipArchiveOutputStream.ZIP64_EOCD_SIG[POS_1]\n            || sig[POS_2] != ZipArchiveOutputStream.ZIP64_EOCD_SIG[POS_2]\n            || sig[POS_3] != ZipArchiveOutputStream.ZIP64_EOCD_SIG[POS_3])",
      "right" : "if (sig[POS_0] != ZipArchiveOutputStream.ZIP64_EOCD_SIG[POS_0]\n            || sig[POS_1] != ZipArchiveOutputStream.ZIP64_EOCD_SIG[POS_1]\n            || sig[POS_2] != ZipArchiveOutputStream.ZIP64_EOCD_SIG[POS_2]\n            || sig[POS_3] != ZipArchiveOutputStream.ZIP64_EOCD_SIG[POS_3])",
      "info" : "IfStatement[25403-25853]:IfStatement[25403-25853]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25702-25853]:Block[25702-25853]"
    }, {
      "left" : "throw new ZipException(\"archive's ZIP64 end of central \"\n                                   + \"directory locator is corrupt.\");",
      "right" : "throw new ZipException(\"archive's ZIP64 end of central \"\n                                   + \"directory locator is corrupt.\");",
      "info" : "ThrowStatement[25716-25843]:ThrowStatement[25716-25843]"
    }, {
      "left" : "skipBytes(ZIP64_EOCD_CFD_LOCATOR_OFFSET\n                  - WORD /* signature has already been read */);",
      "right" : "skipBytes(ZIP64_EOCD_CFD_LOCATOR_OFFSET\n                  - WORD /* signature has already been read */);",
      "info" : "ExpressionStatement[25862-25966]:ExpressionStatement[25862-25966]"
    }, {
      "left" : "byte[] cfdOffset = new byte[DWORD];",
      "right" : "byte[] cfdOffset = new byte[DWORD];",
      "info" : "VariableDeclarationStatement[25975-26010]:VariableDeclarationStatement[25975-26010]"
    }, {
      "left" : "archive.readFully(cfdOffset);",
      "right" : "archive.readFully(cfdOffset);",
      "info" : "ExpressionStatement[26019-26048]:ExpressionStatement[26019-26048]"
    }, {
      "left" : "archive.seek(ZipEightByteInteger.getLongValue(cfdOffset));",
      "right" : "archive.seek(ZipEightByteInteger.getLongValue(cfdOffset));",
      "info" : "ExpressionStatement[26057-26115]:ExpressionStatement[26057-26115]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26365-26797]:Block[26365-26797]"
    }, {
      "left" : "boolean found = tryToLocateSignature(MIN_EOCD_SIZE, MAX_EOCD_SIZE,\n                                             ZipArchiveOutputStream.EOCD_SIG);",
      "right" : "boolean found = tryToLocateSignature(MIN_EOCD_SIZE, MAX_EOCD_SIZE,\n                                             ZipArchiveOutputStream.EOCD_SIG);",
      "info" : "VariableDeclarationStatement[26375-26520]:VariableDeclarationStatement[26375-26520]"
    }, {
      "left" : "if (!found)",
      "right" : "if (!found)",
      "info" : "IfStatement[26529-26620]:IfStatement[26529-26620]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26541-26620]:Block[26541-26620]"
    }, {
      "left" : "throw new ZipException(\"archive is not a ZIP archive\");",
      "right" : "throw new ZipException(\"archive is not a ZIP archive\");",
      "info" : "ThrowStatement[26555-26610]:ThrowStatement[26555-26610]"
    }, {
      "left" : "skipBytes(CFD_LOCATOR_OFFSET);",
      "right" : "skipBytes(CFD_LOCATOR_OFFSET);",
      "info" : "ExpressionStatement[26629-26659]:ExpressionStatement[26629-26659]"
    }, {
      "left" : "byte[] cfdOffset = new byte[WORD];",
      "right" : "byte[] cfdOffset = new byte[WORD];",
      "info" : "VariableDeclarationStatement[26668-26702]:VariableDeclarationStatement[26668-26702]"
    }, {
      "left" : "archive.readFully(cfdOffset);",
      "right" : "archive.readFully(cfdOffset);",
      "info" : "ExpressionStatement[26711-26740]:ExpressionStatement[26711-26740]"
    }, {
      "left" : "archive.seek(ZipLong.getValue(cfdOffset));",
      "right" : "archive.seek(ZipLong.getValue(cfdOffset));",
      "info" : "ExpressionStatement[26749-26791]:ExpressionStatement[26749-26791]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27204-28253]:Block[27204-28253]"
    }, {
      "left" : "boolean found = false;",
      "right" : "boolean found = false;",
      "info" : "VariableDeclarationStatement[27214-27236]:VariableDeclarationStatement[27214-27236]"
    }, {
      "left" : "long off = archive.length() - minDistanceFromEnd;",
      "right" : "long off = archive.length() - minDistanceFromEnd;",
      "info" : "VariableDeclarationStatement[27245-27294]:VariableDeclarationStatement[27245-27294]"
    }, {
      "left" : "final long stopSearching =\n            Math.max(0L, archive.length() - maxDistanceFromEnd);",
      "right" : "final long stopSearching =\n            Math.max(0L, archive.length() - maxDistanceFromEnd);",
      "info" : "VariableDeclarationStatement[27303-27394]:VariableDeclarationStatement[27303-27394]"
    }, {
      "left" : "if (off >= 0)",
      "right" : "if (off >= 0)",
      "info" : "IfStatement[27403-28163]:IfStatement[27403-28163]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27417-28163]:Block[27417-28163]"
    }, {
      "left" : "for (; off >= stopSearching; off--)",
      "right" : "for (; off >= stopSearching; off--)",
      "info" : "ForStatement[27431-28153]:ForStatement[27431-28153]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27467-28153]:Block[27467-28153]"
    }, {
      "left" : "archive.seek(off);",
      "right" : "archive.seek(off);",
      "info" : "ExpressionStatement[27485-27503]:ExpressionStatement[27485-27503]"
    }, {
      "left" : "int curr = archive.read();",
      "right" : "int curr = archive.read();",
      "info" : "VariableDeclarationStatement[27520-27546]:VariableDeclarationStatement[27520-27546]"
    }, {
      "left" : "if (curr == -1)",
      "right" : "if (curr == -1)",
      "info" : "IfStatement[27563-27625]:IfStatement[27563-27625]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27579-27625]:Block[27579-27625]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[27601-27607]:BreakStatement[27601-27607]"
    }, {
      "left" : "if (curr == sig[POS_0])",
      "right" : "if (curr == sig[POS_0])",
      "info" : "IfStatement[27642-28139]:IfStatement[27642-28139]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27666-28139]:Block[27666-28139]"
    }, {
      "left" : "curr = archive.read();",
      "right" : "curr = archive.read();",
      "info" : "ExpressionStatement[27688-27710]:ExpressionStatement[27688-27710]"
    }, {
      "left" : "if (curr == sig[POS_1])",
      "right" : "if (curr == sig[POS_1])",
      "info" : "IfStatement[27731-28121]:IfStatement[27731-28121]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27755-28121]:Block[27755-28121]"
    }, {
      "left" : "curr = archive.read();",
      "right" : "curr = archive.read();",
      "info" : "ExpressionStatement[27781-27803]:ExpressionStatement[27781-27803]"
    }, {
      "left" : "if (curr == sig[POS_2])",
      "right" : "if (curr == sig[POS_2])",
      "info" : "IfStatement[27828-28099]:IfStatement[27828-28099]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27852-28099]:Block[27852-28099]"
    }, {
      "left" : "curr = archive.read();",
      "right" : "curr = archive.read();",
      "info" : "ExpressionStatement[27882-27904]:ExpressionStatement[27882-27904]"
    }, {
      "left" : "if (curr == sig[POS_3])",
      "right" : "if (curr == sig[POS_3])",
      "info" : "IfStatement[27933-28073]:IfStatement[27933-28073]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27957-28073]:Block[27957-28073]"
    }, {
      "left" : "found = true;",
      "right" : "found = true;",
      "info" : "ExpressionStatement[27991-28004]:ExpressionStatement[27991-28004]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[28037-28043]:BreakStatement[28037-28043]"
    }, {
      "left" : "if (found)",
      "right" : "if (found)",
      "info" : "IfStatement[28172-28225]:IfStatement[28172-28225]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28183-28225]:Block[28183-28225]"
    }, {
      "left" : "archive.seek(off);",
      "right" : "archive.seek(off);",
      "info" : "ExpressionStatement[28197-28215]:ExpressionStatement[28197-28215]"
    }, {
      "left" : "return found;",
      "right" : "return found;",
      "info" : "ReturnStatement[28234-28247]:ReturnStatement[28234-28247]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28427-28714]:Block[28427-28714]"
    }, {
      "left" : "int totalSkipped = 0;",
      "right" : "int totalSkipped = 0;",
      "info" : "VariableDeclarationStatement[28437-28458]:VariableDeclarationStatement[28437-28458]"
    }, {
      "left" : "while (totalSkipped < count)",
      "right" : "while (totalSkipped < count)",
      "info" : "WhileStatement[28467-28708]:WhileStatement[28467-28708]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28496-28708]:Block[28496-28708]"
    }, {
      "left" : "int skippedNow = archive.skipBytes(count - totalSkipped);",
      "right" : "int skippedNow = archive.skipBytes(count - totalSkipped);",
      "info" : "VariableDeclarationStatement[28510-28567]:VariableDeclarationStatement[28510-28567]"
    }, {
      "left" : "if (skippedNow <= 0)",
      "right" : "if (skippedNow <= 0)",
      "info" : "IfStatement[28580-28658]:IfStatement[28580-28658]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28601-28658]:Block[28601-28658]"
    }, {
      "left" : "throw new EOFException();",
      "right" : "throw new EOFException();",
      "info" : "ThrowStatement[28619-28644]:ThrowStatement[28619-28644]"
    }, {
      "left" : "totalSkipped += skippedNow;",
      "right" : "totalSkipped += skippedNow;",
      "info" : "ExpressionStatement[28671-28698]:ExpressionStatement[28671-28698]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29765-31596]:Block[29765-31785]"
    }, {
      "left" : "for (ZipArchiveEntry ze : entries.keySet())",
      "right" : "for (ZipArchiveEntry ze : origMap.keySet())",
      "info" : "EnhancedForStatement[29980-31590]:EnhancedForStatement[30127-31779]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30024-31590]:Block[30171-31779]"
    }, {
      "left" : "OffsetEntry offsetEntry = entries.get(ze);",
      "right" : "OffsetEntry offsetEntry = origMap.get(ze);",
      "info" : "VariableDeclarationStatement[30038-30080]:VariableDeclarationStatement[30185-30227]"
    }, {
      "left" : "long offset = offsetEntry.headerOffset;",
      "right" : "long offset = offsetEntry.headerOffset;",
      "info" : "VariableDeclarationStatement[30093-30132]:VariableDeclarationStatement[30240-30279]"
    }, {
      "left" : "archive.seek(offset + LFH_OFFSET_FOR_FILENAME_LENGTH);",
      "right" : "archive.seek(offset + LFH_OFFSET_FOR_FILENAME_LENGTH);",
      "info" : "ExpressionStatement[30145-30199]:ExpressionStatement[30292-30346]"
    }, {
      "left" : "byte[] b = new byte[SHORT];",
      "right" : "byte[] b = new byte[SHORT];",
      "info" : "VariableDeclarationStatement[30212-30239]:VariableDeclarationStatement[30359-30386]"
    }, {
      "left" : "archive.readFully(b);",
      "right" : "archive.readFully(b);",
      "info" : "ExpressionStatement[30252-30273]:ExpressionStatement[30399-30420]"
    }, {
      "left" : "int fileNameLen = ZipShort.getValue(b);",
      "right" : "int fileNameLen = ZipShort.getValue(b);",
      "info" : "VariableDeclarationStatement[30286-30325]:VariableDeclarationStatement[30433-30472]"
    }, {
      "left" : "archive.readFully(b);",
      "right" : "archive.readFully(b);",
      "info" : "ExpressionStatement[30338-30359]:ExpressionStatement[30485-30506]"
    }, {
      "left" : "int extraFieldLen = ZipShort.getValue(b);",
      "right" : "int extraFieldLen = ZipShort.getValue(b);",
      "info" : "VariableDeclarationStatement[30372-30413]:VariableDeclarationStatement[30519-30560]"
    }, {
      "left" : "int lenToSkip = fileNameLen;",
      "right" : "int lenToSkip = fileNameLen;",
      "info" : "VariableDeclarationStatement[30426-30454]:VariableDeclarationStatement[30573-30601]"
    }, {
      "left" : "while (lenToSkip > 0)",
      "right" : "while (lenToSkip > 0)",
      "info" : "WhileStatement[30467-30805]:WhileStatement[30614-30952]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30489-30805]:Block[30636-30952]"
    }, {
      "left" : "int skipped = archive.skipBytes(lenToSkip);",
      "right" : "int skipped = archive.skipBytes(lenToSkip);",
      "info" : "VariableDeclarationStatement[30507-30550]:VariableDeclarationStatement[30654-30697]"
    }, {
      "left" : "if (skipped <= 0)",
      "right" : "if (skipped <= 0)",
      "info" : "IfStatement[30567-30753]:IfStatement[30714-30900]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30585-30753]:Block[30732-30900]"
    }, {
      "left" : "throw new RuntimeException(\"failed to skip file name in\"\n                                               + \" local file header\");",
      "right" : "throw new RuntimeException(\"failed to skip file name in\"\n                                               + \" local file header\");",
      "info" : "ThrowStatement[30607-30735]:ThrowStatement[30754-30882]"
    }, {
      "left" : "lenToSkip -= skipped;",
      "right" : "lenToSkip -= skipped;",
      "info" : "ExpressionStatement[30770-30791]:ExpressionStatement[30917-30938]"
    }, {
      "left" : "byte[] localExtraData = new byte[extraFieldLen];",
      "right" : "byte[] localExtraData = new byte[extraFieldLen];",
      "info" : "VariableDeclarationStatement[30818-30866]:VariableDeclarationStatement[30965-31013]"
    }, {
      "left" : "archive.readFully(localExtraData);",
      "right" : "archive.readFully(localExtraData);",
      "info" : "ExpressionStatement[30879-30913]:ExpressionStatement[31026-31060]"
    }, {
      "left" : "ze.setExtra(localExtraData);",
      "right" : "ze.setExtra(localExtraData);",
      "info" : "ExpressionStatement[30926-30954]:ExpressionStatement[31073-31101]"
    }, {
      "left" : "offsetEntry.dataOffset = offset + LFH_OFFSET_FOR_FILENAME_LENGTH\n                + SHORT + SHORT + fileNameLen + extraFieldLen;",
      "right" : "offsetEntry.dataOffset = offset + LFH_OFFSET_FOR_FILENAME_LENGTH\n                + SHORT + SHORT + fileNameLen + extraFieldLen;",
      "info" : "ExpressionStatement[30967-31094]:ExpressionStatement[31114-31241]"
    }, {
      "left" : "if (entriesWithoutUTF8Flag.containsKey(ze))",
      "right" : "if (entriesWithoutUTF8Flag.containsKey(ze))",
      "info" : "IfStatement[31108-31580]:IfStatement[31255-31727]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31152-31580]:Block[31299-31727]"
    }, {
      "left" : "String orig = ze.getName();",
      "right" : "String orig = ze.getName();",
      "info" : "VariableDeclarationStatement[31170-31197]:VariableDeclarationStatement[31317-31344]"
    }, {
      "left" : "NameAndComment nc = entriesWithoutUTF8Flag.get(ze);",
      "right" : "NameAndComment nc = entriesWithoutUTF8Flag.get(ze);",
      "info" : "VariableDeclarationStatement[31214-31265]:VariableDeclarationStatement[31361-31412]"
    }, {
      "left" : "ZipUtil.setNameAndCommentFromExtraFields(ze, nc.name,\n                                                         nc.comment);",
      "right" : "ZipUtil.setNameAndCommentFromExtraFields(ze, nc.name,\n                                                         nc.comment);",
      "info" : "ExpressionStatement[31282-31405]:ExpressionStatement[31429-31552]"
    }, {
      "left" : "if (!orig.equals(ze.getName()))",
      "right" : "if (!orig.equals(ze.getName()))",
      "info" : "IfStatement[31422-31566]:IfStatement[31569-31713]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31454-31566]:Block[31601-31713]"
    }, {
      "left" : "nameMap.remove(orig);",
      "right" : "nameMap.remove(orig);",
      "info" : "ExpressionStatement[31476-31497]:ExpressionStatement[31623-31644]"
    }, {
      "left" : "nameMap.put(ze.getName(), ze);",
      "right" : "nameMap.put(ze.getName(), ze);",
      "info" : "ExpressionStatement[31518-31548]:ExpressionStatement[31665-31695]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31785-32085]:Block[31974-32274]"
    }, {
      "left" : "archive.seek(0);",
      "right" : "archive.seek(0);",
      "info" : "ExpressionStatement[31795-31811]:ExpressionStatement[31984-32000]"
    }, {
      "left" : "final byte[] start = new byte[WORD];",
      "right" : "final byte[] start = new byte[WORD];",
      "info" : "VariableDeclarationStatement[31820-31856]:VariableDeclarationStatement[32009-32045]"
    }, {
      "left" : "archive.readFully(start);",
      "right" : "archive.readFully(start);",
      "info" : "ExpressionStatement[31865-31890]:ExpressionStatement[32054-32079]"
    }, {
      "left" : "for (int i = 0; i < start.length; i++)",
      "right" : "for (int i = 0; i < start.length; i++)",
      "info" : "ForStatement[31899-32058]:ForStatement[32088-32247]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31938-32058]:Block[32127-32247]"
    }, {
      "left" : "if (start[i] != ZipArchiveOutputStream.LFH_SIG[i])",
      "right" : "if (start[i] != ZipArchiveOutputStream.LFH_SIG[i])",
      "info" : "IfStatement[31952-32048]:IfStatement[32141-32237]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32003-32048]:Block[32192-32237]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[32021-32034]:ReturnStatement[32210-32223]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[32067-32079]:ReturnStatement[32256-32268]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32477-32553]:Block[32666-32742]"
    }, {
      "left" : "this.remaining = remaining;",
      "right" : "this.remaining = remaining;",
      "info" : "ExpressionStatement[32491-32518]:ExpressionStatement[32680-32707]"
    }, {
      "left" : "loc = start;",
      "right" : "loc = start;",
      "info" : "ExpressionStatement[32531-32543]:ExpressionStatement[32720-32732]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32618-32959]:Block[32807-33148]"
    }, {
      "left" : "if (remaining-- <= 0)",
      "right" : "if (remaining-- <= 0)",
      "info" : "IfStatement[32632-32822]:IfStatement[32821-33011]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32654-32822]:Block[32843-33011]"
    }, {
      "left" : "if (addDummyByte)",
      "right" : "if (addDummyByte)",
      "info" : "IfStatement[32672-32781]:IfStatement[32861-32970]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32690-32781]:Block[32879-32970]"
    }, {
      "left" : "addDummyByte = false;",
      "right" : "addDummyByte = false;",
      "info" : "ExpressionStatement[32712-32733]:ExpressionStatement[32901-32922]"
    }, {
      "left" : "return 0;",
      "right" : "return 0;",
      "info" : "ReturnStatement[32754-32763]:ReturnStatement[32943-32952]"
    }, {
      "left" : "return -1;",
      "right" : "return -1;",
      "info" : "ReturnStatement[32798-32808]:ReturnStatement[32987-32997]"
    }, {
      "left" : "synchronized (archive) {\n                archive.seek(loc++);\n                return archive.read();\n            }",
      "right" : "synchronized (archive) {\n                archive.seek(loc++);\n                return archive.read();\n            }",
      "info" : "SynchronizedStatement[32835-32949]:SynchronizedStatement[33024-33138]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32858-32949]:Block[33047-33138]"
    }, {
      "left" : "archive.seek(loc++);",
      "right" : "archive.seek(loc++);",
      "info" : "ExpressionStatement[32876-32896]:ExpressionStatement[33065-33085]"
    }, {
      "left" : "return archive.read();",
      "right" : "return archive.read();",
      "info" : "ReturnStatement[32913-32935]:ReturnStatement[33102-33124]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33050-33740]:Block[33239-33929]"
    }, {
      "left" : "if (remaining <= 0)",
      "right" : "if (remaining <= 0)",
      "info" : "IfStatement[33064-33284]:IfStatement[33253-33473]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33084-33284]:Block[33273-33473]"
    }, {
      "left" : "if (addDummyByte)",
      "right" : "if (addDummyByte)",
      "info" : "IfStatement[33102-33243]:IfStatement[33291-33432]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33120-33243]:Block[33309-33432]"
    }, {
      "left" : "addDummyByte = false;",
      "right" : "addDummyByte = false;",
      "info" : "ExpressionStatement[33142-33163]:ExpressionStatement[33331-33352]"
    }, {
      "left" : "b[off] = 0;",
      "right" : "b[off] = 0;",
      "info" : "ExpressionStatement[33184-33195]:ExpressionStatement[33373-33384]"
    }, {
      "left" : "return 1;",
      "right" : "return 1;",
      "info" : "ReturnStatement[33216-33225]:ReturnStatement[33405-33414]"
    }, {
      "left" : "return -1;",
      "right" : "return -1;",
      "info" : "ReturnStatement[33260-33270]:ReturnStatement[33449-33459]"
    }, {
      "left" : "if (len <= 0)",
      "right" : "if (len <= 0)",
      "info" : "IfStatement[33298-33353]:IfStatement[33487-33542]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33312-33353]:Block[33501-33542]"
    }, {
      "left" : "return 0;",
      "right" : "return 0;",
      "info" : "ReturnStatement[33330-33339]:ReturnStatement[33519-33528]"
    }, {
      "left" : "if (len > remaining)",
      "right" : "if (len > remaining)",
      "info" : "IfStatement[33367-33442]:IfStatement[33556-33631]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33388-33442]:Block[33577-33631]"
    }, {
      "left" : "len = (int) remaining;",
      "right" : "len = (int) remaining;",
      "info" : "ExpressionStatement[33406-33428]:ExpressionStatement[33595-33617]"
    }, {
      "left" : "int ret = -1;",
      "right" : "int ret = -1;",
      "info" : "VariableDeclarationStatement[33455-33468]:VariableDeclarationStatement[33644-33657]"
    }, {
      "left" : "synchronized (archive) {\n                archive.seek(loc);\n                ret = archive.read(b, off, len);\n            }",
      "right" : "synchronized (archive) {\n                archive.seek(loc);\n                ret = archive.read(b, off, len);\n            }",
      "info" : "SynchronizedStatement[33481-33603]:SynchronizedStatement[33670-33792]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33504-33603]:Block[33693-33792]"
    }, {
      "left" : "archive.seek(loc);",
      "right" : "archive.seek(loc);",
      "info" : "ExpressionStatement[33522-33540]:ExpressionStatement[33711-33729]"
    }, {
      "left" : "ret = archive.read(b, off, len);",
      "right" : "ret = archive.read(b, off, len);",
      "info" : "ExpressionStatement[33557-33589]:ExpressionStatement[33746-33778]"
    }, {
      "left" : "if (ret > 0)",
      "right" : "if (ret > 0)",
      "info" : "IfStatement[33616-33706]:IfStatement[33805-33895]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33629-33706]:Block[33818-33895]"
    }, {
      "left" : "loc += ret;",
      "right" : "loc += ret;",
      "info" : "ExpressionStatement[33647-33658]:ExpressionStatement[33836-33847]"
    }, {
      "left" : "remaining -= ret;",
      "right" : "remaining -= ret;",
      "info" : "ExpressionStatement[33675-33692]:ExpressionStatement[33864-33881]"
    }, {
      "left" : "return ret;",
      "right" : "return ret;",
      "info" : "ReturnStatement[33719-33730]:ReturnStatement[33908-33919]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33885-33929]:Block[34074-34118]"
    }, {
      "left" : "addDummyByte = true;",
      "right" : "addDummyByte = true;",
      "info" : "ExpressionStatement[33899-33919]:ExpressionStatement[34088-34108]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34118-34195]:Block[34307-34384]"
    }, {
      "left" : "this.name = name;",
      "right" : "this.name = name;",
      "info" : "ExpressionStatement[34132-34149]:ExpressionStatement[34321-34338]"
    }, {
      "left" : "this.comment = comment;",
      "right" : "this.comment = comment;",
      "info" : "ExpressionStatement[34162-34185]:ExpressionStatement[34351-34374]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34638-35060]:Block[34827-35249]"
    }, {
      "left" : "if (e1 == e2)",
      "right" : "if (e1 == e2)",
      "info" : "IfStatement[34652-34691]:IfStatement[34841-34880]"
    }, {
      "left" : "return 0;",
      "right" : "return 0;",
      "info" : "ReturnStatement[34682-34691]:ReturnStatement[34871-34880]"
    }, {
      "left" : "OffsetEntry off1 = entries.get(e1);",
      "right" : "OffsetEntry off1 = entries.get(e1);",
      "info" : "VariableDeclarationStatement[34705-34740]:VariableDeclarationStatement[34894-34929]"
    }, {
      "left" : "OffsetEntry off2 = entries.get(e2);",
      "right" : "OffsetEntry off2 = entries.get(e2);",
      "info" : "VariableDeclarationStatement[34753-34788]:VariableDeclarationStatement[34942-34977]"
    }, {
      "left" : "if (off1 == null)",
      "right" : "if (off1 == null)",
      "info" : "IfStatement[34801-34860]:IfStatement[34990-35049]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34819-34860]:Block[35008-35049]"
    }, {
      "left" : "return 1;",
      "right" : "return 1;",
      "info" : "ReturnStatement[34837-34846]:ReturnStatement[35026-35035]"
    }, {
      "left" : "if (off2 == null)",
      "right" : "if (off2 == null)",
      "info" : "IfStatement[34873-34933]:IfStatement[35062-35122]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34891-34933]:Block[35080-35122]"
    }, {
      "left" : "return -1;",
      "right" : "return -1;",
      "info" : "ReturnStatement[34909-34919]:ReturnStatement[35098-35108]"
    }, {
      "left" : "long val = (off1.headerOffset - off2.headerOffset);",
      "right" : "long val = (off1.headerOffset - off2.headerOffset);",
      "info" : "VariableDeclarationStatement[34946-34997]:VariableDeclarationStatement[35135-35186]"
    }, {
      "left" : "return val == 0 ? 0 : val < 0 ? -1 : +1;",
      "right" : "return val == 0 ? 0 : val < 0 ? -1 : +1;",
      "info" : "ReturnStatement[35010-35050]:ReturnStatement[35199-35239]"
    } ]
  },
  "interFileMappings" : { }
}