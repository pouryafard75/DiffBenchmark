{
  "matchedElements" : [
 {
    "left" : "",
    "right" : "",
    "info" : "TypeDeclaration[2286-5703]:TypeDeclaration[2285-5702]"
  }, {
    "left" : "private final ProtocolToModelAdapter adapter;",
    "right" : "private final ProtocolToModelAdapter adapter;",
    "info" : "FieldDeclaration[2377-2422]:FieldDeclaration[2376-2421]"
  }, {
    "left" : "public TestExecutionConsumerConnection(ConnectionVersion4 delegate, ModelMapping modelMapping, ProtocolToModelAdapter adapter) {\n        super(delegate, modelMapping, adapter);\n        this.adapter = adapter;\n    }",
    "right" : "public TestExecutionConsumerConnection(ConnectionVersion4 delegate, ModelMapping modelMapping, ProtocolToModelAdapter adapter) {\n        super(delegate, modelMapping, adapter);\n        this.adapter = adapter;\n    }",
    "info" : "MethodDeclaration[2428-2642]:MethodDeclaration[2427-2641]"
  }, {
    "left" : "public testExecutionRequest TestExecutionRequest, operationParameters ConsumerOperationParameters) : Void",
    "right" : "public testExecutionRequest TestExecutionRequest, operationParameters ConsumerOperationParameters) : Void",
    "info" : "MethodDeclaration[2648-3308]:MethodDeclaration[2647-3307]"
  }, {
    "left" : "InternalTestExecutionRequest toInternalTestExecutionRequest(TestExecutionRequest testExecutionRequest) {\n        final Collection<TestOperationDescriptor> testOperationDescriptors = testExecutionRequest.getTestOperationDescriptors();\n        final Collection<JvmTestOperationDescriptor> jvmTestOperationDescriptors = toJvmTestOperatorDescriptor(testOperationDescriptors);\n        final List<InternalJvmTestExecutionDescriptor> internalJvmTestDescriptors = Lists.newArrayList();\n        for (final JvmTestOperationDescriptor descriptor : jvmTestOperationDescriptors) {\n            internalJvmTestDescriptors.add(new DefaultInternalJvmTestExecutionDescriptor(descriptor.getClassName(), descriptor.getMethodName(), findTaskPath(descriptor)));\n        }\n        InternalTestExecutionRequest internalTestExecutionRequest = new DefaultInternalTestExecutionRequest(internalJvmTestDescriptors);\n        return internalTestExecutionRequest;\n    }",
    "right" : "InternalTestExecutionRequest toInternalTestExecutionRequest(TestExecutionRequest testExecutionRequest) {\n        final Collection<TestOperationDescriptor> testOperationDescriptors = testExecutionRequest.getTestOperationDescriptors();\n        final Collection<JvmTestOperationDescriptor> jvmTestOperationDescriptors = toJvmTestOperatorDescriptor(testOperationDescriptors);\n        final List<InternalJvmTestExecutionDescriptor> internalJvmTestDescriptors = Lists.newArrayList();\n        for (final JvmTestOperationDescriptor descriptor : jvmTestOperationDescriptors) {\n            internalJvmTestDescriptors.add(new DefaultInternalJvmTestExecutionDescriptor(descriptor.getClassName(), descriptor.getMethodName(), findTaskPath(descriptor)));\n        }\n        InternalTestExecutionRequest internalTestExecutionRequest = new DefaultInternalTestExecutionRequest(internalJvmTestDescriptors);\n        return internalTestExecutionRequest;\n    }",
    "info" : "MethodDeclaration[3314-4251]:MethodDeclaration[3313-4250]"
  }, {
    "left" : "private Collection<JvmTestOperationDescriptor> toJvmTestOperatorDescriptor(Collection<TestOperationDescriptor> testOperationDescriptors) {\n        assertOnlyJvmTestOperatorDescriptors(testOperationDescriptors);\n\n        return Collections2.transform(testOperationDescriptors, new Function<TestOperationDescriptor, JvmTestOperationDescriptor>() {\n            @Override\n            public JvmTestOperationDescriptor apply(TestOperationDescriptor input) {\n                return (JvmTestOperationDescriptor) input;\n            }\n        });\n    }",
    "right" : "private Collection<JvmTestOperationDescriptor> toJvmTestOperatorDescriptor(Collection<TestOperationDescriptor> testOperationDescriptors) {\n        assertOnlyJvmTestOperatorDescriptors(testOperationDescriptors);\n\n        return Collections2.transform(testOperationDescriptors, new Function<TestOperationDescriptor, JvmTestOperationDescriptor>() {\n            @Override\n            public JvmTestOperationDescriptor apply(TestOperationDescriptor input) {\n                return (JvmTestOperationDescriptor) input;\n            }\n        });\n    }",
    "info" : "MethodDeclaration[4257-4800]:MethodDeclaration[4256-4799]"
  }, {
    "left" : "public input TestOperationDescriptor) : JvmTestOperationDescriptor",
    "right" : "public input TestOperationDescriptor) : JvmTestOperationDescriptor",
    "info" : "MethodDeclaration[4615-4782]:MethodDeclaration[4614-4781]"
  }, {
    "left" : "private testOperationDescriptors Collection<TestOperationDescriptor>) : void",
    "right" : "private testOperationDescriptors Collection<TestOperationDescriptor>) : void",
    "info" : "MethodDeclaration[4806-5268]:MethodDeclaration[4805-5267]"
  }, {
    "left" : "private String findTaskPath(JvmTestOperationDescriptor descriptor) {\n        OperationDescriptor parent = descriptor.getParent();\n        while (parent != null && parent.getParent() != null) {\n            parent = parent.getParent();\n        }\n        if (parent instanceof TaskOperationDescriptor) {\n            return ((TaskOperationDescriptor) parent).getTaskPath();\n        } else {\n            return null;\n        }\n    }",
    "right" : "private String findTaskPath(JvmTestOperationDescriptor descriptor) {\n        OperationDescriptor parent = descriptor.getParent();\n        while (parent != null && parent.getParent() != null) {\n            parent = parent.getParent();\n        }\n        if (parent instanceof TaskOperationDescriptor) {\n            return ((TaskOperationDescriptor) parent).getTaskPath();\n        } else {\n            return null;\n        }\n    }",
    "info" : "MethodDeclaration[5274-5701]:MethodDeclaration[5273-5700]"
  } ],
  "mappings" : [
 {
    "left" : "package org.gradle.tooling.internal.consumer.connection;",
    "right" : "package org.gradle.tooling.internal.consumer.connection;",
    "info" : "PackageDeclaration[617-673]:PackageDeclaration[617-673]"
  }, {
    "left" : "import com.google.common.base.Function;",
    "right" : "import com.google.common.base.Function;",
    "info" : "ImportDeclaration[675-714]:ImportDeclaration[675-714]"
  }, {
    "left" : "import com.google.common.collect.Collections2;",
    "right" : "import com.google.common.collect.Collections2;",
    "info" : "ImportDeclaration[715-761]:ImportDeclaration[715-761]"
  }, {
    "left" : "import com.google.common.collect.Lists;",
    "right" : "import com.google.common.collect.Lists;",
    "info" : "ImportDeclaration[762-801]:ImportDeclaration[762-801]"
  }, {
    "left" : "import org.gradle.api.Action;",
    "right" : "import org.gradle.api.Action;",
    "info" : "ImportDeclaration[802-831]:ImportDeclaration[802-831]"
  }, {
    "left" : "import org.gradle.tooling.tests.TestExecutionException;",
    "right" : "import org.gradle.tooling.test.TestExecutionException;",
    "info" : "ImportDeclaration[832-887]:ImportDeclaration[832-886]"
  }, {
    "left" : "import org.gradle.tooling.events.OperationDescriptor;",
    "right" : "import org.gradle.tooling.events.OperationDescriptor;",
    "info" : "ImportDeclaration[888-941]:ImportDeclaration[887-940]"
  }, {
    "left" : "import org.gradle.tooling.events.task.TaskOperationDescriptor;",
    "right" : "import org.gradle.tooling.events.task.TaskOperationDescriptor;",
    "info" : "ImportDeclaration[942-1004]:ImportDeclaration[941-1003]"
  }, {
    "left" : "import org.gradle.tooling.events.test.JvmTestOperationDescriptor;",
    "right" : "import org.gradle.tooling.events.test.JvmTestOperationDescriptor;",
    "info" : "ImportDeclaration[1005-1070]:ImportDeclaration[1004-1069]"
  }, {
    "left" : "import org.gradle.tooling.events.test.TestOperationDescriptor;",
    "right" : "import org.gradle.tooling.events.test.TestOperationDescriptor;",
    "info" : "ImportDeclaration[1071-1133]:ImportDeclaration[1070-1132]"
  }, {
    "left" : "import org.gradle.tooling.internal.adapter.ProtocolToModelAdapter;",
    "right" : "import org.gradle.tooling.internal.adapter.ProtocolToModelAdapter;",
    "info" : "ImportDeclaration[1134-1200]:ImportDeclaration[1133-1199]"
  }, {
    "left" : "import org.gradle.tooling.internal.adapter.SourceObjectMapping;",
    "right" : "import org.gradle.tooling.internal.adapter.SourceObjectMapping;",
    "info" : "ImportDeclaration[1201-1264]:ImportDeclaration[1200-1263]"
  }, {
    "left" : "import org.gradle.tooling.internal.consumer.DefaultInternalJvmTestExecutionDescriptor;",
    "right" : "import org.gradle.tooling.internal.consumer.DefaultInternalJvmTestExecutionDescriptor;",
    "info" : "ImportDeclaration[1265-1351]:ImportDeclaration[1264-1350]"
  }, {
    "left" : "import org.gradle.tooling.internal.consumer.DefaultInternalTestExecutionRequest;",
    "right" : "import org.gradle.tooling.internal.consumer.DefaultInternalTestExecutionRequest;",
    "info" : "ImportDeclaration[1352-1432]:ImportDeclaration[1351-1431]"
  }, {
    "left" : "import org.gradle.tooling.internal.consumer.converters.TaskPropertyHandlerFactory;",
    "right" : "import org.gradle.tooling.internal.consumer.converters.TaskPropertyHandlerFactory;",
    "info" : "ImportDeclaration[1433-1515]:ImportDeclaration[1432-1514]"
  }, {
    "left" : "import org.gradle.tooling.internal.consumer.parameters.BuildCancellationTokenAdapter;",
    "right" : "import org.gradle.tooling.internal.consumer.parameters.BuildCancellationTokenAdapter;",
    "info" : "ImportDeclaration[1516-1601]:ImportDeclaration[1515-1600]"
  }, {
    "left" : "import org.gradle.tooling.internal.consumer.parameters.ConsumerOperationParameters;",
    "right" : "import org.gradle.tooling.internal.consumer.parameters.ConsumerOperationParameters;",
    "info" : "ImportDeclaration[1602-1685]:ImportDeclaration[1601-1684]"
  }, {
    "left" : "import org.gradle.tooling.internal.consumer.versioning.ModelMapping;",
    "right" : "import org.gradle.tooling.internal.consumer.versioning.ModelMapping;",
    "info" : "ImportDeclaration[1686-1754]:ImportDeclaration[1685-1753]"
  }, {
    "left" : "import org.gradle.tooling.internal.protocol.BuildResult;",
    "right" : "import org.gradle.tooling.internal.protocol.BuildResult;",
    "info" : "ImportDeclaration[1755-1811]:ImportDeclaration[1754-1810]"
  }, {
    "left" : "import org.gradle.tooling.internal.protocol.ConnectionVersion4;",
    "right" : "import org.gradle.tooling.internal.protocol.ConnectionVersion4;",
    "info" : "ImportDeclaration[1812-1875]:ImportDeclaration[1811-1874]"
  }, {
    "left" : "import org.gradle.tooling.internal.protocol.test.InternalJvmTestExecutionDescriptor;",
    "right" : "import org.gradle.tooling.internal.protocol.test.InternalJvmTestExecutionDescriptor;",
    "info" : "ImportDeclaration[1876-1960]:ImportDeclaration[1875-1959]"
  }, {
    "left" : "import org.gradle.tooling.internal.protocol.test.InternalTestExecutionConnection;",
    "right" : "import org.gradle.tooling.internal.protocol.test.InternalTestExecutionConnection;",
    "info" : "ImportDeclaration[1961-2042]:ImportDeclaration[1960-2041]"
  }, {
    "left" : "import org.gradle.tooling.internal.protocol.test.InternalTestExecutionRequest;",
    "right" : "import org.gradle.tooling.internal.protocol.test.InternalTestExecutionRequest;",
    "info" : "ImportDeclaration[2043-2121]:ImportDeclaration[2042-2120]"
  }, {
    "left" : "import org.gradle.tooling.internal.provider.TestExecutionRequest;",
    "right" : "import org.gradle.tooling.internal.provider.TestExecutionRequest;",
    "info" : "ImportDeclaration[2122-2187]:ImportDeclaration[2121-2186]"
  }, {
    "left" : "import java.util.Collection;",
    "right" : "import java.util.Collection;",
    "info" : "ImportDeclaration[2189-2217]:ImportDeclaration[2188-2216]"
  }, {
    "left" : "import java.util.List;",
    "right" : "import java.util.List;",
    "info" : "ImportDeclaration[2218-2240]:ImportDeclaration[2217-2239]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[2286-2292]:Modifier[2285-2291]"
  }, {
    "left" : "ShutdownAwareConsumerConnection",
    "right" : "ShutdownAwareConsumerConnection",
    "info" : "SimpleType[2339-2370]:SimpleType[2338-2369]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[2428-2434]:Modifier[2427-2433]"
  }, {
    "left" : "ConnectionVersion4 delegate",
    "right" : "ConnectionVersion4 delegate",
    "info" : "SingleVariableDeclaration[2467-2494]:SingleVariableDeclaration[2466-2493]"
  }, {
    "left" : "ModelMapping modelMapping",
    "right" : "ModelMapping modelMapping",
    "info" : "SingleVariableDeclaration[2496-2521]:SingleVariableDeclaration[2495-2520]"
  }, {
    "left" : "ProtocolToModelAdapter adapter",
    "right" : "ProtocolToModelAdapter adapter",
    "info" : "SingleVariableDeclaration[2523-2553]:SingleVariableDeclaration[2522-2552]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[2555-2642]:Block[2554-2641]"
  }, {
    "left" : "super(delegate, modelMapping, adapter);",
    "right" : "super(delegate, modelMapping, adapter);",
    "info" : "SuperConstructorInvocation[2565-2604]:SuperConstructorInvocation[2564-2603]"
  }, {
    "left" : "this.adapter = adapter;",
    "right" : "this.adapter = adapter;",
    "info" : "ExpressionStatement[2613-2636]:ExpressionStatement[2612-2635]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[2648-2654]:Modifier[2647-2653]"
  }, {
    "left" : "Void",
    "right" : "Void",
    "info" : "SimpleType[2655-2659]:SimpleType[2654-2658]"
  }, {
    "left" : "final TestExecutionRequest testExecutionRequest",
    "right" : "final TestExecutionRequest testExecutionRequest",
    "info" : "SingleVariableDeclaration[2669-2716]:SingleVariableDeclaration[2668-2715]"
  }, {
    "left" : "ConsumerOperationParameters operationParameters",
    "right" : "ConsumerOperationParameters operationParameters",
    "info" : "SingleVariableDeclaration[2718-2765]:SingleVariableDeclaration[2717-2764]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[2767-3308]:Block[2766-3307]"
  }, {
    "left" : "final BuildCancellationTokenAdapter cancellationTokenAdapter = new BuildCancellationTokenAdapter(operationParameters.getCancellationToken());",
    "right" : "final BuildCancellationTokenAdapter cancellationTokenAdapter = new BuildCancellationTokenAdapter(operationParameters.getCancellationToken());",
    "info" : "VariableDeclarationStatement[2777-2918]:VariableDeclarationStatement[2776-2917]"
  }, {
    "left" : "final BuildResult<Object> result = ((InternalTestExecutionConnection) getDelegate()).runTests(toInternalTestExecutionRequest(testExecutionRequest), cancellationTokenAdapter, operationParameters);",
    "right" : "final BuildResult<Object> result = ((InternalTestExecutionConnection) getDelegate()).runTests(toInternalTestExecutionRequest(testExecutionRequest), cancellationTokenAdapter, operationParameters);",
    "info" : "VariableDeclarationStatement[2927-3122]:VariableDeclarationStatement[2926-3121]"
  }, {
    "left" : "Action<SourceObjectMapping> mapper = new TaskPropertyHandlerFactory().forVersion(getVersionDetails());",
    "right" : "Action<SourceObjectMapping> mapper = new TaskPropertyHandlerFactory().forVersion(getVersionDetails());",
    "info" : "VariableDeclarationStatement[3131-3233]:VariableDeclarationStatement[3130-3232]"
  }, {
    "left" : "return adapter.adapt(Void.class, result.getModel(), mapper);",
    "right" : "return adapter.adapt(Void.class, result.getModel(), mapper);",
    "info" : "ReturnStatement[3242-3302]:ReturnStatement[3241-3301]"
  }, {
    "left" : "InternalTestExecutionRequest",
    "right" : "InternalTestExecutionRequest",
    "info" : "SimpleType[3314-3342]:SimpleType[3313-3341]"
  }, {
    "left" : "TestExecutionRequest testExecutionRequest",
    "right" : "TestExecutionRequest testExecutionRequest",
    "info" : "SingleVariableDeclaration[3374-3415]:SingleVariableDeclaration[3373-3414]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3417-4251]:Block[3416-4250]"
  }, {
    "left" : "final Collection<TestOperationDescriptor> testOperationDescriptors = testExecutionRequest.getTestOperationDescriptors();",
    "right" : "final Collection<TestOperationDescriptor> testOperationDescriptors = testExecutionRequest.getTestOperationDescriptors();",
    "info" : "VariableDeclarationStatement[3427-3547]:VariableDeclarationStatement[3426-3546]"
  }, {
    "left" : "final Collection<JvmTestOperationDescriptor> jvmTestOperationDescriptors = toJvmTestOperatorDescriptor(testOperationDescriptors);",
    "right" : "final Collection<JvmTestOperationDescriptor> jvmTestOperationDescriptors = toJvmTestOperatorDescriptor(testOperationDescriptors);",
    "info" : "VariableDeclarationStatement[3556-3685]:VariableDeclarationStatement[3555-3684]"
  }, {
    "left" : "final List<InternalJvmTestExecutionDescriptor> internalJvmTestDescriptors = Lists.newArrayList();",
    "right" : "final List<InternalJvmTestExecutionDescriptor> internalJvmTestDescriptors = Lists.newArrayList();",
    "info" : "VariableDeclarationStatement[3694-3791]:VariableDeclarationStatement[3693-3790]"
  }, {
    "left" : "for (final JvmTestOperationDescriptor descriptor : jvmTestOperationDescriptors)",
    "right" : "for (final JvmTestOperationDescriptor descriptor : jvmTestOperationDescriptors)",
    "info" : "EnhancedForStatement[3800-4063]:EnhancedForStatement[3799-4062]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3880-4063]:Block[3879-4062]"
  }, {
    "left" : "internalJvmTestDescriptors.add(new DefaultInternalJvmTestExecutionDescriptor(descriptor.getClassName(), descriptor.getMethodName(), findTaskPath(descriptor)));",
    "right" : "internalJvmTestDescriptors.add(new DefaultInternalJvmTestExecutionDescriptor(descriptor.getClassName(), descriptor.getMethodName(), findTaskPath(descriptor)));",
    "info" : "ExpressionStatement[3894-4053]:ExpressionStatement[3893-4052]"
  }, {
    "left" : "InternalTestExecutionRequest internalTestExecutionRequest = new DefaultInternalTestExecutionRequest(internalJvmTestDescriptors);",
    "right" : "InternalTestExecutionRequest internalTestExecutionRequest = new DefaultInternalTestExecutionRequest(internalJvmTestDescriptors);",
    "info" : "VariableDeclarationStatement[4072-4200]:VariableDeclarationStatement[4071-4199]"
  }, {
    "left" : "return internalTestExecutionRequest;",
    "right" : "return internalTestExecutionRequest;",
    "info" : "ReturnStatement[4209-4245]:ReturnStatement[4208-4244]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[4257-4264]:Modifier[4256-4263]"
  }, {
    "left" : "Collection<JvmTestOperationDescriptor>",
    "right" : "Collection<JvmTestOperationDescriptor>",
    "info" : "ParameterizedType[4265-4303]:ParameterizedType[4264-4302]"
  }, {
    "left" : "Collection<TestOperationDescriptor> testOperationDescriptors",
    "right" : "Collection<TestOperationDescriptor> testOperationDescriptors",
    "info" : "SingleVariableDeclaration[4332-4392]:SingleVariableDeclaration[4331-4391]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4394-4800]:Block[4393-4799]"
  }, {
    "left" : "assertOnlyJvmTestOperatorDescriptors(testOperationDescriptors);",
    "right" : "assertOnlyJvmTestOperatorDescriptors(testOperationDescriptors);",
    "info" : "ExpressionStatement[4404-4467]:ExpressionStatement[4403-4466]"
  }, {
    "left" : "return Collections2.transform(testOperationDescriptors, new Function<TestOperationDescriptor, JvmTestOperationDescriptor>() {\n            @Override\n            public JvmTestOperationDescriptor apply(TestOperationDescriptor input) {\n                return (JvmTestOperationDescriptor) input;\n            }\n        });",
    "right" : "return Collections2.transform(testOperationDescriptors, new Function<TestOperationDescriptor, JvmTestOperationDescriptor>() {\n            @Override\n            public JvmTestOperationDescriptor apply(TestOperationDescriptor input) {\n                return (JvmTestOperationDescriptor) input;\n            }\n        });",
    "info" : "ReturnStatement[4477-4794]:ReturnStatement[4476-4793]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[4615-4624]:MarkerAnnotation[4614-4623]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[4637-4643]:Modifier[4636-4642]"
  }, {
    "left" : "JvmTestOperationDescriptor",
    "right" : "JvmTestOperationDescriptor",
    "info" : "SimpleType[4644-4670]:SimpleType[4643-4669]"
  }, {
    "left" : "TestOperationDescriptor input",
    "right" : "TestOperationDescriptor input",
    "info" : "SingleVariableDeclaration[4677-4706]:SingleVariableDeclaration[4676-4705]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4708-4782]:Block[4707-4781]"
  }, {
    "left" : "return (JvmTestOperationDescriptor) input;",
    "right" : "return (JvmTestOperationDescriptor) input;",
    "info" : "ReturnStatement[4726-4768]:ReturnStatement[4725-4767]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[4806-4813]:Modifier[4805-4812]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[4814-4818]:PrimitiveType[4813-4817]"
  }, {
    "left" : "Collection<TestOperationDescriptor> testOperationDescriptors",
    "right" : "Collection<TestOperationDescriptor> testOperationDescriptors",
    "info" : "SingleVariableDeclaration[4856-4916]:SingleVariableDeclaration[4855-4915]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4918-5268]:Block[4917-5267]"
  }, {
    "left" : "for (TestOperationDescriptor testOperationDescriptor : testOperationDescriptors)",
    "right" : "for (TestOperationDescriptor testOperationDescriptor : testOperationDescriptors)",
    "info" : "EnhancedForStatement[4928-5262]:EnhancedForStatement[4927-5261]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5009-5262]:Block[5008-5261]"
  }, {
    "left" : "if (!(testOperationDescriptor instanceof JvmTestOperationDescriptor))",
    "right" : "if (!(testOperationDescriptor instanceof JvmTestOperationDescriptor))",
    "info" : "IfStatement[5023-5252]:IfStatement[5022-5251]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5093-5252]:Block[5092-5251]"
  }, {
    "left" : "throw new TestExecutionException(\"Invalid TestOperationDescriptor implementation. Only JvmTestOperationDescriptor supported.\");",
    "right" : "throw new TestExecutionException(\"Invalid TestOperationDescriptor implementation. Only JvmTestOperationDescriptor supported.\");",
    "info" : "ThrowStatement[5111-5238]:ThrowStatement[5110-5237]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[5274-5281]:Modifier[5273-5280]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[5282-5288]:SimpleType[5281-5287]"
  }, {
    "left" : "JvmTestOperationDescriptor descriptor",
    "right" : "JvmTestOperationDescriptor descriptor",
    "info" : "SingleVariableDeclaration[5302-5339]:SingleVariableDeclaration[5301-5338]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5341-5701]:Block[5340-5700]"
  }, {
    "left" : "OperationDescriptor parent = descriptor.getParent();",
    "right" : "OperationDescriptor parent = descriptor.getParent();",
    "info" : "VariableDeclarationStatement[5351-5403]:VariableDeclarationStatement[5350-5402]"
  }, {
    "left" : "while (parent != null && parent.getParent() != null)",
    "right" : "while (parent != null && parent.getParent() != null)",
    "info" : "WhileStatement[5412-5517]:WhileStatement[5411-5516]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5465-5517]:Block[5464-5516]"
  }, {
    "left" : "parent = parent.getParent();",
    "right" : "parent = parent.getParent();",
    "info" : "ExpressionStatement[5479-5507]:ExpressionStatement[5478-5506]"
  }, {
    "left" : "if (parent instanceof TaskOperationDescriptor)",
    "right" : "if (parent instanceof TaskOperationDescriptor)",
    "info" : "IfStatement[5526-5695]:IfStatement[5525-5694]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5573-5653]:Block[5572-5652]"
  }, {
    "left" : "return ((TaskOperationDescriptor) parent).getTaskPath();",
    "right" : "return ((TaskOperationDescriptor) parent).getTaskPath();",
    "info" : "ReturnStatement[5587-5643]:ReturnStatement[5586-5642]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5659-5695]:Block[5658-5694]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[5673-5685]:ReturnStatement[5672-5684]"
  } ]
}