{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "public void listIsStrictlyOrdered()",
      "right" : "public void listIsStrictlyOrdered()",
      "info" : "MethodDeclaration[1051-1279]:MethodDeclaration[1051-1279]"
    }, {
      "left" : "public void isStrictlyOrderedFailure()",
      "right" : "public void isStrictlyOrderedFailure()",
      "info" : "MethodDeclaration[1283-1604]:MethodDeclaration[1283-1604]"
    }, {
      "left" : "public void isStrictlyOrderedWithNonComparableElementsFailure()",
      "right" : "public void isStrictlyOrderedWithNonComparableElementsFailure()",
      "info" : "MethodDeclaration[1608-1850]:MethodDeclaration[1608-1850]"
    }, {
      "left" : "public void listIsStrictlyOrderedWithComparator()",
      "right" : "public void listIsStrictlyOrderedWithComparator()",
      "info" : "MethodDeclaration[2675-3068]:MethodDeclaration[2603-2996]"
    }, {
      "left" : "public void listIsStrictlyOrderedWithComparatorFailure()",
      "right" : "public void listIsStrictlyOrderedWithComparatorFailure()",
      "info" : "MethodDeclaration[3072-3438]:MethodDeclaration[3000-3366]"
    }, {
      "left" : "private static final Comparator<String> COMPARE_AS_DECIMAL =\n      new Comparator<String>() {\n        @Override\n        public int compare(String a, String b) {\n          return Integer.valueOf(a).compareTo(Integer.valueOf(b));\n        }\n      };",
      "right" : "private static final Comparator<String> COMPARE_AS_DECIMAL =\n      new Comparator<String>() {\n        @Override\n        public int compare(String a, String b) {\n          return Integer.valueOf(a).compareTo(Integer.valueOf(b));\n        }\n      };",
      "info" : "FieldDeclaration[4158-4404]:FieldDeclaration[4032-4278]"
    }, {
      "left" : "public int compare(String a, String b)",
      "right" : "public int compare(String a, String b)",
      "info" : "MethodDeclaration[4260-4395]:MethodDeclaration[4134-4269]"
    }, {
      "left" : "Foo",
      "right" : "Foo",
      "info" : "TypeDeclaration[4408-4513]:TypeDeclaration[4282-4387]"
    }, {
      "left" : "private final int x;",
      "right" : "private final int x;",
      "info" : "FieldDeclaration[4439-4459]:FieldDeclaration[4313-4333]"
    }, {
      "left" : "private Foo(int x)",
      "right" : "private Foo(int x)",
      "info" : "MethodDeclaration[4465-4509]:MethodDeclaration[4339-4383]"
    }, {
      "left" : "Bar",
      "right" : "Bar",
      "info" : "TypeDeclaration[4517-4606]:TypeDeclaration[4391-4480]"
    }, {
      "left" : "private Bar(int x)",
      "right" : "private Bar(int x)",
      "info" : "MethodDeclaration[4560-4602]:MethodDeclaration[4434-4476]"
    }, {
      "left" : "private static final Comparator<Foo> FOO_COMPARATOR =\n      new Comparator<Foo>() {\n        @Override\n        public int compare(Foo a, Foo b) {\n          return Integer.compare(a.x, b.x);\n        }\n      };",
      "right" : "private static final Comparator<Foo> FOO_COMPARATOR =\n      new Comparator<Foo>() {\n        @Override\n        public int compare(Foo a, Foo b) {\n          return Integer.compare(a.x, b.x);\n        }\n      };",
      "info" : "FieldDeclaration[4610-4817]:FieldDeclaration[4484-4691]"
    }, {
      "left" : "public int compare(Foo a, Foo b)",
      "right" : "public int compare(Foo a, Foo b)",
      "info" : "MethodDeclaration[4702-4808]:MethodDeclaration[4576-4682]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1095-1279]:Block[1095-1279]"
    }, {
      "left" : "assertThat(Arrays.<Integer>asList()).isStrictlyOrdered();",
      "right" : "assertThat(Arrays.<Integer>asList()).isStrictlyOrdered();",
      "info" : "ExpressionStatement[1101-1158]:ExpressionStatement[1101-1158]"
    }, {
      "left" : "assertThat(Arrays.asList(1)).isStrictlyOrdered();",
      "right" : "assertThat(Arrays.asList(1)).isStrictlyOrdered();",
      "info" : "ExpressionStatement[1163-1212]:ExpressionStatement[1163-1212]"
    }, {
      "left" : "assertThat(Arrays.asList(1, 2, 3, 4)).isStrictlyOrdered();",
      "right" : "assertThat(Arrays.asList(1, 2, 3, 4)).isStrictlyOrdered();",
      "info" : "ExpressionStatement[1217-1275]:ExpressionStatement[1217-1275]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1330-1604]:Block[1330-1604]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[1336-1600]:TryStatement[1336-1600]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1340-1447]:Block[1340-1447]"
    }, {
      "left" : "assertThat(Arrays.asList(1, 2, 2, 4)).isStrictlyOrdered();",
      "right" : "assertThat(Arrays.asList(1, 2, 2, 4)).isStrictlyOrdered();",
      "info" : "ExpressionStatement[1348-1406]:ExpressionStatement[1348-1406]"
    }, {
      "left" : "fail(\"Should have thrown.\");",
      "right" : "fail(\"Should have thrown.\");",
      "info" : "ExpressionStatement[1413-1441]:ExpressionStatement[1413-1441]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1473-1600]:Block[1473-1600]"
    }, {
      "left" : "assertThat(e.getMessage()).contains(\"is strictly ordered\");",
      "right" : "assertThat(e.getMessage()).contains(\"is strictly ordered\");",
      "info" : "ExpressionStatement[1481-1540]:ExpressionStatement[1481-1540]"
    }, {
      "left" : "assertThat(e.getMessage()).contains(\"<2> <2>\");",
      "right" : "assertThat(e.getMessage()).contains(\"<2> <2>\");",
      "info" : "ExpressionStatement[1547-1594]:ExpressionStatement[1547-1594]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1680-1850]:Block[1680-1850]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[1686-1846]:TryStatement[1686-1846]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1690-1809]:Block[1690-1809]"
    }, {
      "left" : "assertThat(Arrays.<Object>asList(1, \"2\", 3, \"4\")).isStrictlyOrdered();",
      "right" : "assertThat(Arrays.<Object>asList(1, \"2\", 3, \"4\")).isStrictlyOrdered();",
      "info" : "ExpressionStatement[1698-1768]:ExpressionStatement[1698-1768]"
    }, {
      "left" : "fail(\"Should have thrown.\");",
      "right" : "fail(\"Should have thrown.\");",
      "info" : "ExpressionStatement[1775-1803]:ExpressionStatement[1775-1803]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1839-1846]:Block[1839-1846]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2733-3068]:Block[2661-2996]"
    }, {
      "left" : "assertThat(Arrays.<String>asList()).isStrictlyOrdered(COMPARE_AS_DECIMAL);",
      "right" : "assertThat(Arrays.<String>asList()).isStrictlyOrdered(COMPARE_AS_DECIMAL);",
      "info" : "ExpressionStatement[2739-2813]:ExpressionStatement[2667-2741]"
    }, {
      "left" : "assertThat(Arrays.asList(\"1\")).isStrictlyOrdered(COMPARE_AS_DECIMAL);",
      "right" : "assertThat(Arrays.asList(\"1\")).isStrictlyOrdered(COMPARE_AS_DECIMAL);",
      "info" : "ExpressionStatement[2818-2887]:ExpressionStatement[2746-2815]"
    }, {
      "left" : "assertThat(Arrays.asList(\"1\", \"2\", \"10\", \"20\")).isStrictlyOrdered(COMPARE_AS_DECIMAL);",
      "right" : "assertThat(Arrays.asList(\"1\", \"2\", \"10\", \"20\")).isStrictlyOrdered(COMPARE_AS_DECIMAL);",
      "info" : "ExpressionStatement[2978-3064]:ExpressionStatement[2906-2992]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3137-3438]:Block[3065-3366]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[3143-3434]:TryStatement[3071-3362]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3147-3281]:Block[3075-3209]"
    }, {
      "left" : "assertThat(Arrays.asList(\"1\", \"2\", \"2\", \"10\")).isStrictlyOrdered(COMPARE_AS_DECIMAL);",
      "right" : "assertThat(Arrays.asList(\"1\", \"2\", \"2\", \"10\")).isStrictlyOrdered(COMPARE_AS_DECIMAL);",
      "info" : "ExpressionStatement[3155-3240]:ExpressionStatement[3083-3168]"
    }, {
      "left" : "fail(\"Should have thrown.\");",
      "right" : "fail(\"Should have thrown.\");",
      "info" : "ExpressionStatement[3247-3275]:ExpressionStatement[3175-3203]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3307-3434]:Block[3235-3362]"
    }, {
      "left" : "assertThat(e.getMessage()).contains(\"is strictly ordered\");",
      "right" : "assertThat(e.getMessage()).contains(\"is strictly ordered\");",
      "info" : "ExpressionStatement[3315-3374]:ExpressionStatement[3243-3302]"
    }, {
      "left" : "assertThat(e.getMessage()).contains(\"<2> <2>\");",
      "right" : "assertThat(e.getMessage()).contains(\"<2> <2>\");",
      "info" : "ExpressionStatement[3381-3428]:ExpressionStatement[3309-3356]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4317-4395]:Block[4191-4269]"
    }, {
      "left" : "return Integer.valueOf(a).compareTo(Integer.valueOf(b));",
      "right" : "return Integer.valueOf(a).compareTo(Integer.valueOf(b));",
      "info" : "ReturnStatement[4329-4385]:ReturnStatement[4203-4259]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4484-4509]:Block[4358-4383]"
    }, {
      "left" : "this.x = x;",
      "right" : "this.x = x;",
      "info" : "ExpressionStatement[4492-4503]:ExpressionStatement[4366-4377]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4579-4602]:Block[4453-4476]"
    }, {
      "left" : "super(x);",
      "right" : "super(x);",
      "info" : "SuperConstructorInvocation[4587-4596]:SuperConstructorInvocation[4461-4470]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4753-4808]:Block[4627-4682]"
    }, {
      "left" : "return Integer.compare(a.x, b.x);",
      "right" : "return Integer.compare(a.x, b.x);",
      "info" : "ReturnStatement[4765-4798]:ReturnStatement[4639-4672]"
    } ]
  },
  "interFileMappings" : { }
}