{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "Tokeniser",
      "right" : "Tokeniser",
      "info" : "TypeDeclaration[147-8307]:TypeDeclaration[147-8562]"
    }, {
      "left" : "static final char replacementChar = '\\uFFFD';",
      "right" : "static final char replacementChar = '\\uFFFD';",
      "info" : "FieldDeclaration[218-263]:FieldDeclaration[218-263]"
    }, {
      "left" : "private CharacterReader reader;",
      "right" : "private CharacterReader reader;",
      "info" : "FieldDeclaration[296-327]:FieldDeclaration[296-327]"
    }, {
      "left" : "private ParseErrorList errors;",
      "right" : "private ParseErrorList errors;",
      "info" : "FieldDeclaration[346-376]:FieldDeclaration[346-376]"
    }, {
      "left" : "private TokeniserState state = TokeniserState.Data;",
      "right" : "private TokeniserState state = TokeniserState.Data;",
      "info" : "FieldDeclaration[415-466]:FieldDeclaration[415-466]"
    }, {
      "left" : "private Token emitPending;",
      "right" : "private Token emitPending;",
      "info" : "FieldDeclaration[501-527]:FieldDeclaration[501-527]"
    }, {
      "left" : "private boolean isEmitPending = false;",
      "right" : "private boolean isEmitPending = false;",
      "info" : "FieldDeclaration[579-617]:FieldDeclaration[579-617]"
    }, {
      "left" : "private StringBuilder charBuffer = new StringBuilder();",
      "right" : "private StringBuilder charBuffer = new StringBuilder();",
      "info" : "FieldDeclaration[622-677]:FieldDeclaration[622-677]"
    }, {
      "left" : "StringBuilder dataBuffer;",
      "right" : "StringBuilder dataBuffer;",
      "info" : "FieldDeclaration[727-752]:FieldDeclaration[727-752]"
    }, {
      "left" : "Token.Tag tagPending;",
      "right" : "Token.Tag tagPending;",
      "info" : "FieldDeclaration[796-817]:FieldDeclaration[796-817]"
    }, {
      "left" : "Token.Doctype doctypePending;",
      "right" : "Token.Doctype doctypePending;",
      "info" : "FieldDeclaration[848-877]:FieldDeclaration[848-877]"
    }, {
      "left" : "Token.Comment commentPending;",
      "right" : "Token.Comment commentPending;",
      "info" : "FieldDeclaration[905-934]:FieldDeclaration[905-934]"
    }, {
      "left" : "private Token.StartTag lastStartTag;",
      "right" : "private Token.StartTag lastStartTag;",
      "info" : "FieldDeclaration[962-998]:FieldDeclaration[962-998]"
    }, {
      "left" : "private boolean selfClosingFlagAcknowledged = true;",
      "right" : "private boolean selfClosingFlagAcknowledged = true;",
      "info" : "FieldDeclaration[1062-1113]:FieldDeclaration[1062-1113]"
    }, {
      "left" : "Tokeniser(CharacterReader reader, ParseErrorList errors)",
      "right" : "Tokeniser(CharacterReader reader, ParseErrorList errors)",
      "info" : "MethodDeclaration[1119-1243]:MethodDeclaration[1119-1243]"
    }, {
      "left" : "Token read()",
      "right" : "Token read()",
      "info" : "MethodDeclaration[1249-1903]:MethodDeclaration[1249-1903]"
    }, {
      "left" : "void emit(Token token)",
      "right" : "void emit(Token token)",
      "info" : "MethodDeclaration[1909-2558]:MethodDeclaration[1909-2558]"
    }, {
      "left" : "void emit(String str)",
      "right" : "void emit(String str)",
      "info" : "MethodDeclaration[2564-2797]:MethodDeclaration[2564-2797]"
    }, {
      "left" : "void emit(char c)",
      "right" : "void emit(char c)",
      "info" : "MethodDeclaration[2803-2858]:MethodDeclaration[2803-2858]"
    }, {
      "left" : "TokeniserState getState()",
      "right" : "TokeniserState getState()",
      "info" : "MethodDeclaration[2864-2919]:MethodDeclaration[2864-2919]"
    }, {
      "left" : "void transition(TokeniserState state)",
      "right" : "void transition(TokeniserState state)",
      "info" : "MethodDeclaration[2925-2998]:MethodDeclaration[2925-2998]"
    }, {
      "left" : "void advanceTransition(TokeniserState state)",
      "right" : "void advanceTransition(TokeniserState state)",
      "info" : "MethodDeclaration[3004-3110]:MethodDeclaration[3004-3110]"
    }, {
      "left" : "void acknowledgeSelfClosingFlag()",
      "right" : "void acknowledgeSelfClosingFlag()",
      "info" : "MethodDeclaration[3116-3201]:MethodDeclaration[3116-3201]"
    }, {
      "left" : "Character consumeCharacterReference(Character additionalAllowedCharacter, boolean inAttribute)",
      "right" : "Character consumeCharacterReference(Character additionalAllowedCharacter, boolean inAttribute)",
      "info" : "MethodDeclaration[3207-6249]:MethodDeclaration[3207-5967]"
    }, {
      "left" : "Token.Tag createTagPending(boolean start)",
      "right" : "Token.Tag createTagPending(boolean start)",
      "info" : "MethodDeclaration[6255-6403]:MethodDeclaration[5973-6121]"
    }, {
      "left" : "void emitTagPending()",
      "right" : "void emitTagPending()",
      "info" : "MethodDeclaration[6409-6498]:MethodDeclaration[6127-6216]"
    }, {
      "left" : "void createCommentPending()",
      "right" : "void createCommentPending()",
      "info" : "MethodDeclaration[6504-6585]:MethodDeclaration[6222-6303]"
    }, {
      "left" : "void emitCommentPending()",
      "right" : "void emitCommentPending()",
      "info" : "MethodDeclaration[6591-6654]:MethodDeclaration[6309-6372]"
    }, {
      "left" : "void createDoctypePending()",
      "right" : "void createDoctypePending()",
      "info" : "MethodDeclaration[6660-6741]:MethodDeclaration[6378-6459]"
    }, {
      "left" : "void emitDoctypePending()",
      "right" : "void emitDoctypePending()",
      "info" : "MethodDeclaration[6747-6810]:MethodDeclaration[6465-6528]"
    }, {
      "left" : "void createTempBuffer()",
      "right" : "void createTempBuffer()",
      "info" : "MethodDeclaration[6816-6889]:MethodDeclaration[6534-6607]"
    }, {
      "left" : "boolean isAppropriateEndTagToken()",
      "right" : "boolean isAppropriateEndTagToken()",
      "info" : "MethodDeclaration[6895-7061]:MethodDeclaration[6613-6779]"
    }, {
      "left" : "String appropriateEndTagName()",
      "right" : "String appropriateEndTagName()",
      "info" : "MethodDeclaration[7067-7142]:MethodDeclaration[6785-6860]"
    }, {
      "left" : "void error(TokeniserState state)",
      "right" : "void error(TokeniserState state)",
      "info" : "MethodDeclaration[7148-7350]:MethodDeclaration[6866-7068]"
    }, {
      "left" : "void eofError(TokeniserState state)",
      "right" : "void eofError(TokeniserState state)",
      "info" : "MethodDeclaration[7356-7556]:MethodDeclaration[7074-7274]"
    }, {
      "left" : "private void characterReferenceError(String message)",
      "right" : "private void characterReferenceError(String message)",
      "info" : "MethodDeclaration[7562-7754]:MethodDeclaration[7280-7472]"
    }, {
      "left" : "private void error(String errorMsg)",
      "right" : "private void error(String errorMsg)",
      "info" : "MethodDeclaration[7760-7901]:MethodDeclaration[7478-7619]"
    }, {
      "left" : "boolean currentNodeInHtmlNS()",
      "right" : "boolean currentNodeInHtmlNS()",
      "info" : "MethodDeclaration[7907-8142]:MethodDeclaration[7625-7860]"
    } ],
    "mappings" : [
 {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[196-201]:TYPE_DECLARATION_KIND[196-201]"
    }, {
      "left" : "Tokeniser",
      "right" : "Tokeniser",
      "info" : "SimpleName[202-211]:SimpleName[202-211]"
    }, {
      "left" : "Tokeniser",
      "right" : "Tokeniser",
      "info" : "SimpleName[1119-1128]:SimpleName[1119-1128]"
    }, {
      "left" : "CharacterReader reader",
      "right" : "CharacterReader reader",
      "info" : "SingleVariableDeclaration[1129-1151]:SingleVariableDeclaration[1129-1151]"
    }, {
      "left" : "ParseErrorList errors",
      "right" : "ParseErrorList errors",
      "info" : "SingleVariableDeclaration[1153-1174]:SingleVariableDeclaration[1153-1174]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1176-1243]:Block[1176-1243]"
    }, {
      "left" : "this.reader = reader;",
      "right" : "this.reader = reader;",
      "info" : "ExpressionStatement[1186-1207]:ExpressionStatement[1186-1207]"
    }, {
      "left" : "this.errors = errors;",
      "right" : "this.errors = errors;",
      "info" : "ExpressionStatement[1216-1237]:ExpressionStatement[1216-1237]"
    }, {
      "left" : "Token",
      "right" : "Token",
      "info" : "SimpleType[1249-1254]:SimpleType[1249-1254]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[1255-1259]:SimpleName[1255-1259]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1262-1903]:Block[1262-1903]"
    }, {
      "left" : "if (!selfClosingFlagAcknowledged)",
      "right" : "if (!selfClosingFlagAcknowledged)",
      "info" : "IfStatement[1272-1422]:IfStatement[1272-1422]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1306-1422]:Block[1306-1422]"
    }, {
      "left" : "error(\"Self closing flag not acknowledged\");",
      "right" : "error(\"Self closing flag not acknowledged\");",
      "info" : "ExpressionStatement[1320-1364]:ExpressionStatement[1320-1364]"
    }, {
      "left" : "selfClosingFlagAcknowledged = true;",
      "right" : "selfClosingFlagAcknowledged = true;",
      "info" : "ExpressionStatement[1377-1412]:ExpressionStatement[1377-1412]"
    }, {
      "left" : "while (!isEmitPending)\n            state.read(this, reader);",
      "right" : "while (!isEmitPending)\n            state.read(this, reader);",
      "info" : "WhileStatement[1432-1492]:WhileStatement[1432-1492]"
    }, {
      "left" : "state.read(this, reader);",
      "right" : "state.read(this, reader);",
      "info" : "ExpressionStatement[1467-1492]:ExpressionStatement[1467-1492]"
    }, {
      "left" : "if (charBuffer.length() > 0)",
      "right" : "if (charBuffer.length() > 0)",
      "info" : "IfStatement[1625-1897]:IfStatement[1625-1897]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1654-1813]:Block[1654-1813]"
    }, {
      "left" : "String str = charBuffer.toString();",
      "right" : "String str = charBuffer.toString();",
      "info" : "VariableDeclarationStatement[1668-1703]:VariableDeclarationStatement[1668-1703]"
    }, {
      "left" : "charBuffer.delete(0, charBuffer.length());",
      "right" : "charBuffer.delete(0, charBuffer.length());",
      "info" : "ExpressionStatement[1716-1758]:ExpressionStatement[1716-1758]"
    }, {
      "left" : "return new Token.Character(str);",
      "right" : "return new Token.Character(str);",
      "info" : "ReturnStatement[1771-1803]:ReturnStatement[1771-1803]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1819-1897]:Block[1819-1897]"
    }, {
      "left" : "isEmitPending = false;",
      "right" : "isEmitPending = false;",
      "info" : "ExpressionStatement[1833-1855]:ExpressionStatement[1833-1855]"
    }, {
      "left" : "return emitPending;",
      "right" : "return emitPending;",
      "info" : "ReturnStatement[1868-1887]:ReturnStatement[1868-1887]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[1909-1913]:PrimitiveType[1909-1913]"
    }, {
      "left" : "emit",
      "right" : "emit",
      "info" : "SimpleName[1914-1918]:SimpleName[1914-1918]"
    }, {
      "left" : "Token token",
      "right" : "Token token",
      "info" : "SingleVariableDeclaration[1919-1930]:SingleVariableDeclaration[1919-1930]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1932-2558]:Block[1932-2558]"
    }, {
      "left" : "Validate.isFalse(isEmitPending, \"There is an unread token pending!\");",
      "right" : "Validate.isFalse(isEmitPending, \"There is an unread token pending!\");",
      "info" : "ExpressionStatement[1942-2011]:ExpressionStatement[1942-2011]"
    }, {
      "left" : "emitPending = token;",
      "right" : "emitPending = token;",
      "info" : "ExpressionStatement[2021-2041]:ExpressionStatement[2021-2041]"
    }, {
      "left" : "isEmitPending = true;",
      "right" : "isEmitPending = true;",
      "info" : "ExpressionStatement[2050-2071]:ExpressionStatement[2050-2071]"
    }, {
      "left" : "if (token.type == Token.TokenType.StartTag)",
      "right" : "if (token.type == Token.TokenType.StartTag)",
      "info" : "IfStatement[2081-2552]:IfStatement[2081-2552]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2125-2326]:Block[2125-2326]"
    }, {
      "left" : "Token.StartTag startTag = (Token.StartTag) token;",
      "right" : "Token.StartTag startTag = (Token.StartTag) token;",
      "info" : "VariableDeclarationStatement[2139-2188]:VariableDeclarationStatement[2139-2188]"
    }, {
      "left" : "lastStartTag = startTag;",
      "right" : "lastStartTag = startTag;",
      "info" : "ExpressionStatement[2201-2225]:ExpressionStatement[2201-2225]"
    }, {
      "left" : "if (startTag.selfClosing)",
      "right" : "if (startTag.selfClosing)",
      "info" : "IfStatement[2238-2316]:IfStatement[2238-2316]"
    }, {
      "left" : "selfClosingFlagAcknowledged = false;",
      "right" : "selfClosingFlagAcknowledged = false;",
      "info" : "ExpressionStatement[2280-2316]:ExpressionStatement[2280-2316]"
    }, {
      "left" : "if (token.type == Token.TokenType.EndTag)",
      "right" : "if (token.type == Token.TokenType.EndTag)",
      "info" : "IfStatement[2332-2552]:IfStatement[2332-2552]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2374-2552]:Block[2374-2552]"
    }, {
      "left" : "Token.EndTag endTag = (Token.EndTag) token;",
      "right" : "Token.EndTag endTag = (Token.EndTag) token;",
      "info" : "VariableDeclarationStatement[2388-2431]:VariableDeclarationStatement[2388-2431]"
    }, {
      "left" : "if (endTag.attributes != null)",
      "right" : "if (endTag.attributes != null)",
      "info" : "IfStatement[2444-2542]:IfStatement[2444-2542]"
    }, {
      "left" : "error(\"Attributes incorrectly present on end tag\");",
      "right" : "error(\"Attributes incorrectly present on end tag\");",
      "info" : "ExpressionStatement[2491-2542]:ExpressionStatement[2491-2542]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[2564-2568]:PrimitiveType[2564-2568]"
    }, {
      "left" : "emit",
      "right" : "emit",
      "info" : "SimpleName[2569-2573]:SimpleName[2569-2573]"
    }, {
      "left" : "String str",
      "right" : "String str",
      "info" : "SingleVariableDeclaration[2574-2584]:SingleVariableDeclaration[2574-2584]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2586-2797]:Block[2586-2797]"
    }, {
      "left" : "charBuffer.append(str);",
      "right" : "charBuffer.append(str);",
      "info" : "ExpressionStatement[2768-2791]:ExpressionStatement[2768-2791]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[2803-2807]:PrimitiveType[2803-2807]"
    }, {
      "left" : "emit",
      "right" : "emit",
      "info" : "SimpleName[2808-2812]:SimpleName[2808-2812]"
    }, {
      "left" : "char c",
      "right" : "char c",
      "info" : "SingleVariableDeclaration[2813-2819]:SingleVariableDeclaration[2813-2819]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2821-2858]:Block[2821-2858]"
    }, {
      "left" : "charBuffer.append(c);",
      "right" : "charBuffer.append(c);",
      "info" : "ExpressionStatement[2831-2852]:ExpressionStatement[2831-2852]"
    }, {
      "left" : "TokeniserState",
      "right" : "TokeniserState",
      "info" : "SimpleType[2864-2878]:SimpleType[2864-2878]"
    }, {
      "left" : "getState",
      "right" : "getState",
      "info" : "SimpleName[2879-2887]:SimpleName[2879-2887]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2890-2919]:Block[2890-2919]"
    }, {
      "left" : "return state;",
      "right" : "return state;",
      "info" : "ReturnStatement[2900-2913]:ReturnStatement[2900-2913]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[2925-2929]:PrimitiveType[2925-2929]"
    }, {
      "left" : "transition",
      "right" : "transition",
      "info" : "SimpleName[2930-2940]:SimpleName[2930-2940]"
    }, {
      "left" : "TokeniserState state",
      "right" : "TokeniserState state",
      "info" : "SingleVariableDeclaration[2941-2961]:SingleVariableDeclaration[2941-2961]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2963-2998]:Block[2963-2998]"
    }, {
      "left" : "this.state = state;",
      "right" : "this.state = state;",
      "info" : "ExpressionStatement[2973-2992]:ExpressionStatement[2973-2992]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[3004-3008]:PrimitiveType[3004-3008]"
    }, {
      "left" : "advanceTransition",
      "right" : "advanceTransition",
      "info" : "SimpleName[3009-3026]:SimpleName[3009-3026]"
    }, {
      "left" : "TokeniserState state",
      "right" : "TokeniserState state",
      "info" : "SingleVariableDeclaration[3027-3047]:SingleVariableDeclaration[3027-3047]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3049-3110]:Block[3049-3110]"
    }, {
      "left" : "reader.advance();",
      "right" : "reader.advance();",
      "info" : "ExpressionStatement[3059-3076]:ExpressionStatement[3059-3076]"
    }, {
      "left" : "this.state = state;",
      "right" : "this.state = state;",
      "info" : "ExpressionStatement[3085-3104]:ExpressionStatement[3085-3104]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[3116-3120]:PrimitiveType[3116-3120]"
    }, {
      "left" : "acknowledgeSelfClosingFlag",
      "right" : "acknowledgeSelfClosingFlag",
      "info" : "SimpleName[3121-3147]:SimpleName[3121-3147]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3150-3201]:Block[3150-3201]"
    }, {
      "left" : "selfClosingFlagAcknowledged = true;",
      "right" : "selfClosingFlagAcknowledged = true;",
      "info" : "ExpressionStatement[3160-3195]:ExpressionStatement[3160-3195]"
    }, {
      "left" : "Character",
      "right" : "Character",
      "info" : "SimpleType[3207-3216]:SimpleType[3207-3216]"
    }, {
      "left" : "consumeCharacterReference",
      "right" : "consumeCharacterReference",
      "info" : "SimpleName[3217-3242]:SimpleName[3217-3242]"
    }, {
      "left" : "Character additionalAllowedCharacter",
      "right" : "Character additionalAllowedCharacter",
      "info" : "SingleVariableDeclaration[3243-3279]:SingleVariableDeclaration[3243-3279]"
    }, {
      "left" : "boolean inAttribute",
      "right" : "boolean inAttribute",
      "info" : "SingleVariableDeclaration[3281-3300]:SingleVariableDeclaration[3281-3300]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3302-6249]:Block[3302-5967]"
    }, {
      "left" : "if (reader.isEmpty())",
      "right" : "if (reader.isEmpty())",
      "info" : "IfStatement[3312-3358]:IfStatement[3312-3358]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[3346-3358]:ReturnStatement[3346-3358]"
    }, {
      "left" : "if (additionalAllowedCharacter != null && additionalAllowedCharacter == reader.current())",
      "right" : "if (additionalAllowedCharacter != null && additionalAllowedCharacter == reader.current())",
      "info" : "IfStatement[3367-3481]:IfStatement[3367-3481]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[3469-3481]:ReturnStatement[3469-3481]"
    }, {
      "left" : "if (reader.matchesAny('\\t', '\\n', '\\r', '\\f', ' ', '<', '&'))",
      "right" : "if (reader.matchesAny('\\t', '\\n', '\\r', '\\f', ' ', '<', '&'))",
      "info" : "IfStatement[3490-3576]:IfStatement[3490-3576]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[3564-3576]:ReturnStatement[3564-3576]"
    }, {
      "left" : "reader.mark();",
      "right" : "reader.mark();",
      "info" : "ExpressionStatement[3586-3600]:ExpressionStatement[3586-3600]"
    }, {
      "left" : "if (reader.matchConsume(\"#\"))",
      "right" : "if (reader.matchConsume(\"#\"))",
      "info" : "IfStatement[3609-6243]:IfStatement[3609-5961]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3639-4831]:Block[3639-4831]"
    }, {
      "left" : "boolean isHexMode = reader.matchConsumeIgnoreCase(\"X\");",
      "right" : "boolean isHexMode = reader.matchConsumeIgnoreCase(\"X\");",
      "info" : "VariableDeclarationStatement[3665-3720]:VariableDeclarationStatement[3665-3720]"
    }, {
      "left" : "String numRef = isHexMode ? reader.consumeHexSequence() : reader.consumeDigitSequence();",
      "right" : "String numRef = isHexMode ? reader.consumeHexSequence() : reader.consumeDigitSequence();",
      "info" : "VariableDeclarationStatement[3733-3821]:VariableDeclarationStatement[3733-3821]"
    }, {
      "left" : "if (numRef.length() == 0)",
      "right" : "if (numRef.length() == 0)",
      "info" : "IfStatement[3834-4047]:IfStatement[3834-4047]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3860-4047]:Block[3860-4047]"
    }, {
      "left" : "characterReferenceError(\"numeric reference with no numerals\");",
      "right" : "characterReferenceError(\"numeric reference with no numerals\");",
      "info" : "ExpressionStatement[3903-3965]:ExpressionStatement[3903-3965]"
    }, {
      "left" : "reader.rewindToMark();",
      "right" : "reader.rewindToMark();",
      "info" : "ExpressionStatement[3982-4004]:ExpressionStatement[3982-4004]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[4021-4033]:ReturnStatement[4021-4033]"
    }, {
      "left" : "if (!reader.matchConsume(\";\"))",
      "right" : "if (!reader.matchConsume(\";\"))",
      "info" : "IfStatement[4060-4152]:IfStatement[4060-4152]"
    }, {
      "left" : "characterReferenceError(\"missing semicolon\");",
      "right" : "characterReferenceError(\"missing semicolon\");",
      "info" : "ExpressionStatement[4107-4152]:ExpressionStatement[4107-4152]"
    }, {
      "left" : "int charval = -1;",
      "right" : "int charval = -1;",
      "info" : "VariableDeclarationStatement[4181-4198]:VariableDeclarationStatement[4181-4198]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[4211-4383]:TryStatement[4211-4383]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4215-4335]:Block[4215-4335]"
    }, {
      "left" : "int base = isHexMode ? 16 : 10;",
      "right" : "int base = isHexMode ? 16 : 10;",
      "info" : "VariableDeclarationStatement[4233-4264]:VariableDeclarationStatement[4233-4264]"
    }, {
      "left" : "charval = Integer.valueOf(numRef, base);",
      "right" : "charval = Integer.valueOf(numRef, base);",
      "info" : "ExpressionStatement[4281-4321]:ExpressionStatement[4281-4321]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4368-4383]:Block[4368-4383]"
    }, {
      "left" : "if (charval == -1 || (charval >= 0xD800 && charval <= 0xDFFF) || charval > 0x10FFFF)",
      "right" : "if (charval == -1 || (charval >= 0xD800 && charval <= 0xDFFF) || charval > 0x10FFFF)",
      "info" : "IfStatement[4404-4821]:IfStatement[4404-4821]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4489-4621]:Block[4489-4621]"
    }, {
      "left" : "characterReferenceError(\"character outside of valid range\");",
      "right" : "characterReferenceError(\"character outside of valid range\");",
      "info" : "ExpressionStatement[4507-4567]:ExpressionStatement[4507-4567]"
    }, {
      "left" : "return replacementChar;",
      "right" : "return replacementChar;",
      "info" : "ReturnStatement[4584-4607]:ReturnStatement[4584-4607]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4627-4821]:Block[4627-4821]"
    }, {
      "left" : "return (char) charval;",
      "right" : "return (char) charval;",
      "info" : "ReturnStatement[4785-4807]:ReturnStatement[4785-4807]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4837-6243]:Block[4837-5961]"
    }, {
      "left" : "String nameRef = reader.consumeLetterThenDigitSequence();",
      "right" : "String nameRef = reader.consumeLetterThenDigitSequence();",
      "info" : "VariableDeclarationStatement[4940-4997]:VariableDeclarationStatement[4940-4997]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[5010-5016]:SimpleType[8028-8034]"
    }, {
      "left" : "boolean looksLegit = reader.matches(';');",
      "right" : "boolean looksLegit = reader.matches(';');",
      "info" : "VariableDeclarationStatement[5064-5105]:VariableDeclarationStatement[5010-5051]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[5209-5216]:PrimitiveType[5155-5162]"
    }, {
      "left" : "found",
      "right" : "found",
      "info" : "SimpleName[5217-5222]:SimpleName[5163-5168]"
    }, {
      "left" : "nameRef",
      "right" : "Entities",
      "info" : "SimpleName[5251-5258]:SimpleName[5172-5180]"
    }, {
      "left" : "nameRef.length()",
      "right" : "Entities.isBaseNamedEntity(nameRef)",
      "info" : "MethodInvocation[5251-5267]:MethodInvocation[5172-5207]"
    }, {
      "left" : "length",
      "right" : "isBaseNamedEntity",
      "info" : "SimpleName[5259-5265]:SimpleName[5181-5198]"
    }, {
      "left" : ">",
      "right" : "||",
      "info" : "INFIX_EXPRESSION_OPERATOR[5268-5269]:INFIX_EXPRESSION_OPERATOR[5208-5210]"
    }, {
      "left" : "Entities.isNamedEntity(nameRef)",
      "right" : "Entities.isNamedEntity(nameRef)",
      "info" : "MethodInvocation[5305-5336]:MethodInvocation[5212-5243]"
    }, {
      "left" : "-",
      "right" : "&&",
      "info" : "INFIX_EXPRESSION_OPERATOR[5462-5463]:INFIX_EXPRESSION_OPERATOR[5244-5246]"
    }, {
      "left" : "reader.unconsume();",
      "right" : "reader.consume();",
      "info" : "ExpressionStatement[5487-5506]:ExpressionStatement[8270-8287]"
    }, {
      "left" : "unconsume",
      "right" : "consume",
      "info" : "SimpleName[5494-5503]:SimpleName[8277-8284]"
    }, {
      "left" : "if (!found)",
      "right" : "if (!found)",
      "info" : "IfStatement[5552-5809]:IfStatement[5274-5527]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5564-5809]:Block[5286-5527]"
    }, {
      "left" : "reader.rewindToMark();",
      "right" : "reader.rewindToMark();",
      "info" : "ExpressionStatement[5582-5604]:ExpressionStatement[5304-5326]"
    }, {
      "left" : "if (looksLegit)",
      "right" : "if (looksLegit)",
      "info" : "IfStatement[5621-5766]:IfStatement[5343-5484]"
    }, {
      "left" : "characterReferenceError(String.format(\"invalid named referenece '%s'\", origNameRef));",
      "right" : "characterReferenceError(String.format(\"invalid named referenece '%s'\", nameRef));",
      "info" : "ExpressionStatement[5681-5766]:ExpressionStatement[5403-5484]"
    }, {
      "left" : "origNameRef",
      "right" : "nameRef",
      "info" : "SimpleName[5752-5763]:SimpleName[5474-5481]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[5783-5795]:ReturnStatement[5501-5513]"
    }, {
      "left" : "if (inAttribute && (reader.matchesLetter() || reader.matchesDigit() || reader.matchesAny('=', '-', '_')))",
      "right" : "if (inAttribute && (reader.matchesLetter() || reader.matchesDigit() || reader.matchesAny('=', '-', '_')))",
      "info" : "IfStatement[5822-6055]:IfStatement[5540-5773]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5928-6055]:Block[5646-5773]"
    }, {
      "left" : "reader.rewindToMark();",
      "right" : "reader.rewindToMark();",
      "info" : "ExpressionStatement[5990-6012]:ExpressionStatement[5708-5730]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[6029-6041]:ReturnStatement[5747-5759]"
    }, {
      "left" : "if (!reader.matchConsume(\";\"))",
      "right" : "if (!reader.matchConsume(\";\"))",
      "info" : "IfStatement[6068-6160]:IfStatement[5786-5878]"
    }, {
      "left" : "characterReferenceError(\"missing semicolon\");",
      "right" : "characterReferenceError(\"missing semicolon\");",
      "info" : "ExpressionStatement[6115-6160]:ExpressionStatement[5833-5878]"
    }, {
      "left" : "return Entities.getCharacterByName(nameRef);",
      "right" : "return Entities.getCharacterByName(nameRef);",
      "info" : "ReturnStatement[6189-6233]:ReturnStatement[5907-5951]"
    }, {
      "left" : "Token.Tag",
      "right" : "Token.Tag",
      "info" : "SimpleType[6255-6264]:SimpleType[5973-5982]"
    }, {
      "left" : "createTagPending",
      "right" : "createTagPending",
      "info" : "SimpleName[6265-6281]:SimpleName[5983-5999]"
    }, {
      "left" : "boolean start",
      "right" : "boolean start",
      "info" : "SingleVariableDeclaration[6282-6295]:SingleVariableDeclaration[6000-6013]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6297-6403]:Block[6015-6121]"
    }, {
      "left" : "tagPending = start ? new Token.StartTag() : new Token.EndTag();",
      "right" : "tagPending = start ? new Token.StartTag() : new Token.EndTag();",
      "info" : "ExpressionStatement[6307-6370]:ExpressionStatement[6025-6088]"
    }, {
      "left" : "return tagPending;",
      "right" : "return tagPending;",
      "info" : "ReturnStatement[6379-6397]:ReturnStatement[6097-6115]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[6409-6413]:PrimitiveType[6127-6131]"
    }, {
      "left" : "emitTagPending",
      "right" : "emitTagPending",
      "info" : "SimpleName[6414-6428]:SimpleName[6132-6146]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6431-6498]:Block[6149-6216]"
    }, {
      "left" : "tagPending.finaliseTag();",
      "right" : "tagPending.finaliseTag();",
      "info" : "ExpressionStatement[6441-6466]:ExpressionStatement[6159-6184]"
    }, {
      "left" : "emit(tagPending);",
      "right" : "emit(tagPending);",
      "info" : "ExpressionStatement[6475-6492]:ExpressionStatement[6193-6210]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[6504-6508]:PrimitiveType[6222-6226]"
    }, {
      "left" : "createCommentPending",
      "right" : "createCommentPending",
      "info" : "SimpleName[6509-6529]:SimpleName[6227-6247]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6532-6585]:Block[6250-6303]"
    }, {
      "left" : "commentPending = new Token.Comment();",
      "right" : "commentPending = new Token.Comment();",
      "info" : "ExpressionStatement[6542-6579]:ExpressionStatement[6260-6297]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[6591-6595]:PrimitiveType[6309-6313]"
    }, {
      "left" : "emitCommentPending",
      "right" : "emitCommentPending",
      "info" : "SimpleName[6596-6614]:SimpleName[6314-6332]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6617-6654]:Block[6335-6372]"
    }, {
      "left" : "emit(commentPending);",
      "right" : "emit(commentPending);",
      "info" : "ExpressionStatement[6627-6648]:ExpressionStatement[6345-6366]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[6660-6664]:PrimitiveType[6378-6382]"
    }, {
      "left" : "createDoctypePending",
      "right" : "createDoctypePending",
      "info" : "SimpleName[6665-6685]:SimpleName[6383-6403]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6688-6741]:Block[6406-6459]"
    }, {
      "left" : "doctypePending = new Token.Doctype();",
      "right" : "doctypePending = new Token.Doctype();",
      "info" : "ExpressionStatement[6698-6735]:ExpressionStatement[6416-6453]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[6747-6751]:PrimitiveType[6465-6469]"
    }, {
      "left" : "emitDoctypePending",
      "right" : "emitDoctypePending",
      "info" : "SimpleName[6752-6770]:SimpleName[6470-6488]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6773-6810]:Block[6491-6528]"
    }, {
      "left" : "emit(doctypePending);",
      "right" : "emit(doctypePending);",
      "info" : "ExpressionStatement[6783-6804]:ExpressionStatement[6501-6522]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[6816-6820]:PrimitiveType[6534-6538]"
    }, {
      "left" : "createTempBuffer",
      "right" : "createTempBuffer",
      "info" : "SimpleName[6821-6837]:SimpleName[6539-6555]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6840-6889]:Block[6558-6607]"
    }, {
      "left" : "dataBuffer = new StringBuilder();",
      "right" : "dataBuffer = new StringBuilder();",
      "info" : "ExpressionStatement[6850-6883]:ExpressionStatement[6568-6601]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[6895-6902]:PrimitiveType[6613-6620]"
    }, {
      "left" : "isAppropriateEndTagToken",
      "right" : "isAppropriateEndTagToken",
      "info" : "SimpleName[6903-6927]:SimpleName[6621-6645]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6930-7061]:Block[6648-6779]"
    }, {
      "left" : "if (lastStartTag == null)",
      "right" : "if (lastStartTag == null)",
      "info" : "IfStatement[6940-6991]:IfStatement[6658-6709]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[6978-6991]:ReturnStatement[6696-6709]"
    }, {
      "left" : "return tagPending.tagName.equals(lastStartTag.tagName);",
      "right" : "return tagPending.tagName.equals(lastStartTag.tagName);",
      "info" : "ReturnStatement[7000-7055]:ReturnStatement[6718-6773]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[7067-7073]:SimpleType[6785-6791]"
    }, {
      "left" : "appropriateEndTagName",
      "right" : "appropriateEndTagName",
      "info" : "SimpleName[7074-7095]:SimpleName[6792-6813]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7098-7142]:Block[6816-6860]"
    }, {
      "left" : "return lastStartTag.tagName;",
      "right" : "return lastStartTag.tagName;",
      "info" : "ReturnStatement[7108-7136]:ReturnStatement[6826-6854]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[7148-7152]:PrimitiveType[6866-6870]"
    }, {
      "left" : "error",
      "right" : "error",
      "info" : "SimpleName[7153-7158]:SimpleName[6871-6876]"
    }, {
      "left" : "TokeniserState state",
      "right" : "TokeniserState state",
      "info" : "SingleVariableDeclaration[7159-7179]:SingleVariableDeclaration[6877-6897]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7181-7350]:Block[6899-7068]"
    }, {
      "left" : "if (errors.canAddError())",
      "right" : "if (errors.canAddError())",
      "info" : "IfStatement[7191-7344]:IfStatement[6909-7062]"
    }, {
      "left" : "errors.add(new ParseError(reader.pos(), \"Unexpected character '%s' in input state [%s]\", reader.current(), state));",
      "right" : "errors.add(new ParseError(reader.pos(), \"Unexpected character '%s' in input state [%s]\", reader.current(), state));",
      "info" : "ExpressionStatement[7229-7344]:ExpressionStatement[6947-7062]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[7356-7360]:PrimitiveType[7074-7078]"
    }, {
      "left" : "eofError",
      "right" : "eofError",
      "info" : "SimpleName[7361-7369]:SimpleName[7079-7087]"
    }, {
      "left" : "TokeniserState state",
      "right" : "TokeniserState state",
      "info" : "SingleVariableDeclaration[7370-7390]:SingleVariableDeclaration[7088-7108]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7392-7556]:Block[7110-7274]"
    }, {
      "left" : "if (errors.canAddError())",
      "right" : "if (errors.canAddError())",
      "info" : "IfStatement[7402-7550]:IfStatement[7120-7268]"
    }, {
      "left" : "errors.add(new ParseError(reader.pos(), \"Unexpectedly reached end of file (EOF) in input state [%s]\", state));",
      "right" : "errors.add(new ParseError(reader.pos(), \"Unexpectedly reached end of file (EOF) in input state [%s]\", state));",
      "info" : "ExpressionStatement[7440-7550]:ExpressionStatement[7158-7268]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[7562-7569]:Modifier[7280-7287]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[7570-7574]:PrimitiveType[7288-7292]"
    }, {
      "left" : "characterReferenceError",
      "right" : "characterReferenceError",
      "info" : "SimpleName[7575-7598]:SimpleName[7293-7316]"
    }, {
      "left" : "String message",
      "right" : "String message",
      "info" : "SingleVariableDeclaration[7599-7613]:SingleVariableDeclaration[7317-7331]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7615-7754]:Block[7333-7472]"
    }, {
      "left" : "if (errors.canAddError())",
      "right" : "if (errors.canAddError())",
      "info" : "IfStatement[7625-7748]:IfStatement[7343-7466]"
    }, {
      "left" : "errors.add(new ParseError(reader.pos(), \"Invalid character reference: %s\", message));",
      "right" : "errors.add(new ParseError(reader.pos(), \"Invalid character reference: %s\", message));",
      "info" : "ExpressionStatement[7663-7748]:ExpressionStatement[7381-7466]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[7760-7767]:Modifier[7478-7485]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[7768-7772]:PrimitiveType[7486-7490]"
    }, {
      "left" : "error",
      "right" : "error",
      "info" : "SimpleName[7773-7778]:SimpleName[7491-7496]"
    }, {
      "left" : "String errorMsg",
      "right" : "String errorMsg",
      "info" : "SingleVariableDeclaration[7779-7794]:SingleVariableDeclaration[7497-7512]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7796-7901]:Block[7514-7619]"
    }, {
      "left" : "if (errors.canAddError())",
      "right" : "if (errors.canAddError())",
      "info" : "IfStatement[7806-7895]:IfStatement[7524-7613]"
    }, {
      "left" : "errors.add(new ParseError(reader.pos(), errorMsg));",
      "right" : "errors.add(new ParseError(reader.pos(), errorMsg));",
      "info" : "ExpressionStatement[7844-7895]:ExpressionStatement[7562-7613]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[7907-7914]:PrimitiveType[7625-7632]"
    }, {
      "left" : "currentNodeInHtmlNS",
      "right" : "currentNodeInHtmlNS",
      "info" : "SimpleName[7915-7934]:SimpleName[7633-7652]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7937-8142]:Block[7655-7860]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[7995-8007]:ReturnStatement[7713-7725]"
    } ]
  },
  "interFileMappings" : { }
}