{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "private AbstractCompiler compiler;",
      "right" : "private AbstractCompiler compiler;",
      "info" : "FieldDeclaration[1285-1319]:FieldDeclaration[1285-1319]"
    }, {
      "left" : "private Supplier<String> safeNameIdSupplier;",
      "right" : "private Supplier<String> safeNameIdSupplier;",
      "info" : "FieldDeclaration[1322-1366]:FieldDeclaration[1322-1366]"
    }, {
      "left" : "FunctionToBlockMutator(\n      AbstractCompiler compiler, Supplier<String> safeNameIdSupplier)",
      "right" : "FunctionToBlockMutator(\n      AbstractCompiler compiler, Supplier<String> safeNameIdSupplier)",
      "info" : "MethodDeclaration[1371-1550]:MethodDeclaration[1371-1550]"
    }, {
      "left" : "Node mutate(String fnName, Node fnNode, Node callNode,\n      String resultName, boolean needsDefaultResult, boolean isCallInLoop)",
      "right" : "Node mutate(String fnName, Node fnNode, Node callNode,\n      String resultName, boolean needsDefaultResult, boolean isCallInLoop)",
      "info" : "MethodDeclaration[1554-3930]:MethodDeclaration[1554-3930]"
    }, {
      "left" : "private void fixUnitializedVarDeclarations(Node n)",
      "right" : "private void fixUnitializedVarDeclarations(Node n)",
      "info" : "MethodDeclaration[3935-4696]:MethodDeclaration[3935-4696]"
    }, {
      "left" : "LabelNameSupplier",
      "right" : "LabelNameSupplier",
      "info" : "TypeDeclaration[5292-5600]:TypeDeclaration[5397-5705]"
    }, {
      "left" : "final Supplier<String> idSupplier;",
      "right" : "final Supplier<String> idSupplier;",
      "info" : "FieldDeclaration[5357-5391]:FieldDeclaration[5462-5496]"
    }, {
      "left" : "LabelNameSupplier(Supplier<String> idSupplier)",
      "right" : "LabelNameSupplier(Supplier<String> idSupplier)",
      "info" : "MethodDeclaration[5397-5487]:MethodDeclaration[5502-5592]"
    }, {
      "left" : "public String get()",
      "right" : "public String get()",
      "info" : "MethodDeclaration[5493-5596]:MethodDeclaration[5598-5701]"
    }, {
      "left" : "private String getLabelNameForFunction(String fnName",
      "right" : "private String getLabelNameForFunction(String fnName",
      "info" : "MethodDeclaration[5604-5860]:MethodDeclaration[5709-5965]"
    }, {
      "left" : "private Node aliasAndInlineArguments(\n      Node fnTemplateRoot, LinkedHashMap<String, Node> argMap,\n      Set<String> namesToAlias)",
      "right" : "private Node aliasAndInlineArguments(\n      Node fnTemplateRoot, LinkedHashMap<String, Node> argMap,\n      Set<String> namesToAlias)",
      "info" : "MethodDeclaration[5864-8002]:MethodDeclaration[5969-8107]"
    }, {
      "left" : "private static Node replaceReturns(\n      Node block, String resultName, String labelName,\n      boolean resultMustBeSet)",
      "right" : "private static Node replaceReturns(\n      Node block, String resultName, String labelName,\n      boolean resultMustBeSet)",
      "info" : "MethodDeclaration[8006-10100]:MethodDeclaration[8111-10205]"
    }, {
      "left" : "private static void addDummyAssignment(Node node, String resultName)",
      "right" : "private static void addDummyAssignment(Node node, String resultName)",
      "info" : "MethodDeclaration[10327-10807]:MethodDeclaration[10432-10912]"
    }, {
      "left" : "private static void convertLastReturnToStatement(\n      Node block, String resultName)",
      "right" : "private static void convertLastReturnToStatement(\n      Node block, String resultName)",
      "info" : "MethodDeclaration[10811-11491]:MethodDeclaration[10916-11596]"
    }, {
      "left" : "private static Node createAssignStatementNode(String name, Node expression)",
      "right" : "private static Node createAssignStatementNode(String name, Node expression)",
      "info" : "MethodDeclaration[11495-11934]:MethodDeclaration[11600-12039]"
    }, {
      "left" : "private static Node getReplacementReturnStatement(\n      Node node, String resultName)",
      "right" : "private static Node getReplacementReturnStatement(\n      Node node, String resultName)",
      "info" : "MethodDeclaration[11938-13035]:MethodDeclaration[12043-13140]"
    }, {
      "left" : "private static boolean hasReturnAtExit(Node block)",
      "right" : "private static boolean hasReturnAtExit(Node block)",
      "info" : "MethodDeclaration[13039-13362]:MethodDeclaration[13144-13467]"
    }, {
      "left" : "private static Node replaceReturnWithBreak(Node current, Node parent,\n      String resultName, String labelName)",
      "right" : "private static Node replaceReturnWithBreak(Node current, Node parent,\n      String resultName, String labelName)",
      "info" : "MethodDeclaration[13366-14835]:MethodDeclaration[13471-14940]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1465-1550]:Block[1465-1550]"
    }, {
      "left" : "this.compiler = compiler;",
      "right" : "this.compiler = compiler;",
      "info" : "ExpressionStatement[1471-1496]:ExpressionStatement[1471-1496]"
    }, {
      "left" : "this.safeNameIdSupplier = safeNameIdSupplier;",
      "right" : "this.safeNameIdSupplier = safeNameIdSupplier;",
      "info" : "ExpressionStatement[1501-1546]:ExpressionStatement[1501-1546]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2253-3930]:Block[2253-3930]"
    }, {
      "left" : "Node newFnNode = fnNode.cloneTree();",
      "right" : "Node newFnNode = fnNode.cloneTree();",
      "info" : "VariableDeclarationStatement[2259-2295]:VariableDeclarationStatement[2259-2295]"
    }, {
      "left" : "makeLocalNamesUnique(newFnNode, isCallInLoop);",
      "right" : "makeLocalNamesUnique(newFnNode, isCallInLoop);",
      "info" : "ExpressionStatement[2483-2529]:ExpressionStatement[2483-2529]"
    }, {
      "left" : "Set<String> namesToAlias =\n        FunctionArgumentInjector.findModifiedParameters(newFnNode);",
      "right" : "Set<String> namesToAlias =\n        FunctionArgumentInjector.findModifiedParameters(newFnNode);",
      "info" : "VariableDeclarationStatement[2628-2722]:VariableDeclarationStatement[2628-2722]"
    }, {
      "left" : "LinkedHashMap<String, Node> args =\n        FunctionArgumentInjector.getFunctionCallParameterMap(\n            newFnNode, callNode, this.safeNameIdSupplier);",
      "right" : "LinkedHashMap<String, Node> args =\n        FunctionArgumentInjector.getFunctionCallParameterMap(\n            newFnNode, callNode, this.safeNameIdSupplier);",
      "info" : "VariableDeclarationStatement[2727-2882]:VariableDeclarationStatement[2727-2882]"
    }, {
      "left" : "boolean hasArgs = !args.isEmpty();",
      "right" : "boolean hasArgs = !args.isEmpty();",
      "info" : "VariableDeclarationStatement[2887-2921]:VariableDeclarationStatement[2887-2921]"
    }, {
      "left" : "if (hasArgs)",
      "right" : "if (hasArgs)",
      "info" : "IfStatement[2926-3082]:IfStatement[2926-3082]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2939-3082]:Block[2939-3082]"
    }, {
      "left" : "FunctionArgumentInjector.maybeAddTempsForCallArguments(\n          newFnNode, args, namesToAlias, compiler.getCodingConvention());",
      "right" : "FunctionArgumentInjector.maybeAddTempsForCallArguments(\n          newFnNode, args, namesToAlias, compiler.getCodingConvention());",
      "info" : "ExpressionStatement[2947-3076]:ExpressionStatement[2947-3076]"
    }, {
      "left" : "Node newBlock = NodeUtil.getFunctionBody(newFnNode);",
      "right" : "Node newBlock = NodeUtil.getFunctionBody(newFnNode);",
      "info" : "VariableDeclarationStatement[3088-3140]:VariableDeclarationStatement[3088-3140]"
    }, {
      "left" : "newBlock.detachFromParent();",
      "right" : "newBlock.detachFromParent();",
      "info" : "ExpressionStatement[3183-3211]:ExpressionStatement[3183-3211]"
    }, {
      "left" : "if (hasArgs)",
      "right" : "if (hasArgs)",
      "info" : "IfStatement[3217-3386]:IfStatement[3217-3386]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3230-3386]:Block[3230-3386]"
    }, {
      "left" : "Node inlineResult = aliasAndInlineArguments(newBlock,\n          args, namesToAlias);",
      "right" : "Node inlineResult = aliasAndInlineArguments(newBlock,\n          args, namesToAlias);",
      "info" : "VariableDeclarationStatement[3238-3322]:VariableDeclarationStatement[3238-3322]"
    }, {
      "left" : "Preconditions.checkState(newBlock == inlineResult);",
      "right" : "Preconditions.checkState(newBlock == inlineResult);",
      "info" : "ExpressionStatement[3329-3380]:ExpressionStatement[3329-3380]"
    }, {
      "left" : "if (isCallInLoop)",
      "right" : "if (isCallInLoop)",
      "info" : "IfStatement[3608-3680]:IfStatement[3608-3680]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3626-3680]:Block[3626-3680]"
    }, {
      "left" : "fixUnitializedVarDeclarations(newBlock);",
      "right" : "fixUnitializedVarDeclarations(newBlock);",
      "info" : "ExpressionStatement[3634-3674]:ExpressionStatement[3634-3674]"
    }, {
      "left" : "String labelName = getLabelNameForFunction(fnName);",
      "right" : "String labelName = getLabelNameForFunction(fnName);",
      "info" : "VariableDeclarationStatement[3686-3737]:VariableDeclarationStatement[3686-3737]"
    }, {
      "left" : "Node injectableBlock = replaceReturns(\n        newBlock, resultName, labelName, needsDefaultResult);",
      "right" : "Node injectableBlock = replaceReturns(\n        newBlock, resultName, labelName, needsDefaultResult);",
      "info" : "VariableDeclarationStatement[3742-3842]:VariableDeclarationStatement[3742-3842]"
    }, {
      "left" : "Preconditions.checkState(injectableBlock != null);",
      "right" : "Preconditions.checkState(injectableBlock != null);",
      "info" : "ExpressionStatement[3847-3897]:ExpressionStatement[3847-3897]"
    }, {
      "left" : "return injectableBlock;",
      "right" : "return injectableBlock;",
      "info" : "ReturnStatement[3903-3926]:ReturnStatement[3903-3926]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4094-4696]:Block[4094-4696]"
    }, {
      "left" : "if (NodeUtil.isLoopStructure(n))",
      "right" : "if (NodeUtil.isLoopStructure(n))",
      "info" : "IfStatement[4243-4297]:IfStatement[4243-4297]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4276-4297]:Block[4276-4297]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[4284-4291]:ReturnStatement[4284-4291]"
    }, {
      "left" : "if (NodeUtil.isVar(n))",
      "right" : "if (NodeUtil.isVar(n))",
      "info" : "IfStatement[4323-4578]:IfStatement[4323-4578]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4346-4578]:Block[4346-4578]"
    }, {
      "left" : "Node name = n.getFirstChild();",
      "right" : "Node name = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[4354-4384]:VariableDeclarationStatement[4354-4384]"
    }, {
      "left" : "if (!name.hasChildren())",
      "right" : "if (!name.hasChildren())",
      "info" : "IfStatement[4422-4558]:IfStatement[4422-4558]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4447-4558]:Block[4447-4558]"
    }, {
      "left" : "Node srcLocation = name;",
      "right" : "Node srcLocation = name;",
      "info" : "VariableDeclarationStatement[4457-4481]:VariableDeclarationStatement[4457-4481]"
    }, {
      "left" : "name.addChildToBack(NodeUtil.newUndefinedNode(srcLocation));",
      "right" : "name.addChildToBack(NodeUtil.newUndefinedNode(srcLocation));",
      "info" : "ExpressionStatement[4490-4550]:ExpressionStatement[4490-4550]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[4565-4572]:ReturnStatement[4565-4572]"
    }, {
      "left" : "for (Node c = n.getFirstChild(); c != null; c = c.getNext())",
      "right" : "for (Node c = n.getFirstChild(); c != null; c = c.getNext())",
      "info" : "ForStatement[4584-4692]:ForStatement[4584-4692]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4645-4692]:Block[4645-4692]"
    }, {
      "left" : "fixUnitializedVarDeclarations(c);",
      "right" : "fixUnitializedVarDeclarations(c);",
      "info" : "ExpressionStatement[4653-4686]:ExpressionStatement[4653-4686]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5444-5487]:Block[5549-5592]"
    }, {
      "left" : "this.idSupplier = idSupplier;",
      "right" : "this.idSupplier = idSupplier;",
      "info" : "ExpressionStatement[5452-5481]:ExpressionStatement[5557-5586]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5527-5596]:Block[5632-5701]"
    }, {
      "left" : "return \"JSCompiler_inline_label_\" + idSupplier.get();",
      "right" : "return \"JSCompiler_inline_label_\" + idSupplier.get();",
      "info" : "ReturnStatement[5537-5590]:ReturnStatement[5642-5695]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5702-5860]:Block[5807-5965]"
    }, {
      "left" : "String name = (fnName == null || fnName.isEmpty()) ? \"anon\" : fnName;",
      "right" : "String name = (fnName == null || fnName.isEmpty()) ? \"anon\" : fnName;",
      "info" : "VariableDeclarationStatement[5708-5777]:VariableDeclarationStatement[5813-5882]"
    }, {
      "left" : "return \"JSCompiler_inline_label_\" + name + \"_\" + safeNameIdSupplier.get();",
      "right" : "return \"JSCompiler_inline_label_\" + name + \"_\" + safeNameIdSupplier.get();",
      "info" : "ReturnStatement[5782-5856]:ReturnStatement[5887-5961]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6364-8002]:Block[6469-8107]"
    }, {
      "left" : "if (namesToAlias == null || namesToAlias.isEmpty())",
      "right" : "if (namesToAlias == null || namesToAlias.isEmpty())",
      "info" : "IfStatement[6371-7998]:IfStatement[6476-8103]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6423-6677]:Block[6528-6782]"
    }, {
      "left" : "Node result = FunctionArgumentInjector.inject(\n          fnTemplateRoot, null, argMap);",
      "right" : "Node result = FunctionArgumentInjector.inject(\n          fnTemplateRoot, null, argMap);",
      "info" : "VariableDeclarationStatement[6505-6592]:VariableDeclarationStatement[6610-6697]"
    }, {
      "left" : "Preconditions.checkState(result == fnTemplateRoot);",
      "right" : "Preconditions.checkState(result == fnTemplateRoot);",
      "info" : "ExpressionStatement[6599-6650]:ExpressionStatement[6704-6755]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[6657-6671]:ReturnStatement[6762-6776]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6683-7998]:Block[6788-8103]"
    }, {
      "left" : "Map<String, Node> newArgMap = Maps.newHashMap(argMap);",
      "right" : "Map<String, Node> newArgMap = Maps.newHashMap(argMap);",
      "info" : "VariableDeclarationStatement[6855-6909]:VariableDeclarationStatement[6960-7014]"
    }, {
      "left" : "List<Node> newVars = Lists.newLinkedList();",
      "right" : "List<Node> newVars = Lists.newLinkedList();",
      "info" : "VariableDeclarationStatement[6993-7036]:VariableDeclarationStatement[7098-7141]"
    }, {
      "left" : "for (Entry<String, Node> entry : argMap.entrySet())",
      "right" : "for (Entry<String, Node> entry : argMap.entrySet())",
      "info" : "EnhancedForStatement[7153-7604]:EnhancedForStatement[7258-7709]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7205-7604]:Block[7310-7709]"
    }, {
      "left" : "String name = entry.getKey();",
      "right" : "String name = entry.getKey();",
      "info" : "VariableDeclarationStatement[7215-7244]:VariableDeclarationStatement[7320-7349]"
    }, {
      "left" : "if (namesToAlias.contains(name))",
      "right" : "if (namesToAlias.contains(name))",
      "info" : "IfStatement[7253-7596]:IfStatement[7358-7701]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7286-7596]:Block[7391-7701]"
    }, {
      "left" : "Node newValue = entry.getValue().cloneTree();",
      "right" : "Node newValue = entry.getValue().cloneTree();",
      "info" : "VariableDeclarationStatement[7298-7343]:VariableDeclarationStatement[7403-7448]"
    }, {
      "left" : "Node newNode = NodeUtil.newVarNode(name, newValue)\n              .copyInformationFromForTree(newValue);",
      "right" : "Node newNode = NodeUtil.newVarNode(name, newValue)\n              .copyInformationFromForTree(newValue);",
      "info" : "VariableDeclarationStatement[7354-7457]:VariableDeclarationStatement[7459-7562]"
    }, {
      "left" : "newVars.add(0, newNode);",
      "right" : "newVars.add(0, newNode);",
      "info" : "ExpressionStatement[7468-7492]:ExpressionStatement[7573-7597]"
    }, {
      "left" : "newArgMap.remove(name);",
      "right" : "newArgMap.remove(name);",
      "info" : "ExpressionStatement[7563-7586]:ExpressionStatement[7668-7691]"
    }, {
      "left" : "Node result = FunctionArgumentInjector.inject(\n          fnTemplateRoot, null, newArgMap);",
      "right" : "Node result = FunctionArgumentInjector.inject(\n          fnTemplateRoot, null, newArgMap);",
      "info" : "VariableDeclarationStatement[7643-7733]:VariableDeclarationStatement[7748-7838]"
    }, {
      "left" : "Preconditions.checkState(result == fnTemplateRoot);",
      "right" : "Preconditions.checkState(result == fnTemplateRoot);",
      "info" : "ExpressionStatement[7740-7791]:ExpressionStatement[7845-7896]"
    }, {
      "left" : "for (Node n : newVars)",
      "right" : "for (Node n : newVars)",
      "info" : "EnhancedForStatement[7895-7970]:EnhancedForStatement[8000-8075]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7918-7970]:Block[8023-8075]"
    }, {
      "left" : "fnTemplateRoot.addChildToFront(n);",
      "right" : "fnTemplateRoot.addChildToFront(n);",
      "info" : "ExpressionStatement[7928-7962]:ExpressionStatement[8033-8067]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[7978-7992]:ReturnStatement[8083-8097]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8644-10100]:Block[8749-10205]"
    }, {
      "left" : "Preconditions.checkNotNull(block);",
      "right" : "Preconditions.checkNotNull(block);",
      "info" : "ExpressionStatement[8650-8684]:ExpressionStatement[8755-8789]"
    }, {
      "left" : "Preconditions.checkNotNull(labelName);",
      "right" : "Preconditions.checkNotNull(labelName);",
      "info" : "ExpressionStatement[8689-8727]:ExpressionStatement[8794-8832]"
    }, {
      "left" : "Node root = block;",
      "right" : "Node root = block;",
      "info" : "VariableDeclarationStatement[8733-8751]:VariableDeclarationStatement[8838-8856]"
    }, {
      "left" : "boolean hasReturnAtExit = false;",
      "right" : "boolean hasReturnAtExit = false;",
      "info" : "VariableDeclarationStatement[8757-8789]:VariableDeclarationStatement[8862-8894]"
    }, {
      "left" : "int returnCount = NodeUtil.getNodeTypeReferenceCount(\n        block, Token.RETURN, new NodeUtil.MatchShallowStatement());",
      "right" : "int returnCount = NodeUtil.getNodeTypeReferenceCount(\n        block, Token.RETURN, new NodeUtil.MatchShallowStatement());",
      "info" : "VariableDeclarationStatement[8794-8915]:VariableDeclarationStatement[8899-9020]"
    }, {
      "left" : "if (returnCount > 0)",
      "right" : "if (returnCount > 0)",
      "info" : "IfStatement[8920-9839]:IfStatement[9025-9944]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8941-9839]:Block[9046-9944]"
    }, {
      "left" : "hasReturnAtExit = hasReturnAtExit(block);",
      "right" : "hasReturnAtExit = hasReturnAtExit(block);",
      "info" : "ExpressionStatement[8949-8990]:ExpressionStatement[9054-9095]"
    }, {
      "left" : "if (hasReturnAtExit)",
      "right" : "if (hasReturnAtExit)",
      "info" : "IfStatement[9096-9206]:IfStatement[9201-9311]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9117-9206]:Block[9222-9311]"
    }, {
      "left" : "convertLastReturnToStatement(block, resultName);",
      "right" : "convertLastReturnToStatement(block, resultName);",
      "info" : "ExpressionStatement[9127-9175]:ExpressionStatement[9232-9280]"
    }, {
      "left" : "returnCount--;",
      "right" : "returnCount--;",
      "info" : "ExpressionStatement[9184-9198]:ExpressionStatement[9289-9303]"
    }, {
      "left" : "if (returnCount > 0)",
      "right" : "if (returnCount > 0)",
      "info" : "IfStatement[9214-9833]:IfStatement[9319-9938]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9235-9833]:Block[9340-9938]"
    }, {
      "left" : "replaceReturnWithBreak(block, null, resultName, labelName);",
      "right" : "replaceReturnWithBreak(block, null, resultName, labelName);",
      "info" : "ExpressionStatement[9314-9373]:ExpressionStatement[9419-9478]"
    }, {
      "left" : "Node label = new Node(Token.LABEL).copyInformationFrom(block);",
      "right" : "Node label = new Node(Token.LABEL).copyInformationFrom(block);",
      "info" : "VariableDeclarationStatement[9404-9466]:VariableDeclarationStatement[9509-9571]"
    }, {
      "left" : "Node name = Node.newString(Token.LABEL_NAME, labelName)\n            .copyInformationFrom(block);",
      "right" : "Node name = Node.newString(Token.LABEL_NAME, labelName)\n            .copyInformationFrom(block);",
      "info" : "VariableDeclarationStatement[9475-9571]:VariableDeclarationStatement[9580-9676]"
    }, {
      "left" : "label.addChildToFront(name);",
      "right" : "label.addChildToFront(name);",
      "info" : "ExpressionStatement[9580-9608]:ExpressionStatement[9685-9713]"
    }, {
      "left" : "label.addChildToBack(block);",
      "right" : "label.addChildToBack(block);",
      "info" : "ExpressionStatement[9617-9645]:ExpressionStatement[9722-9750]"
    }, {
      "left" : "Node newRoot = new Node(Token.BLOCK).copyInformationFrom(block);",
      "right" : "Node newRoot = new Node(Token.BLOCK).copyInformationFrom(block);",
      "info" : "VariableDeclarationStatement[9655-9719]:VariableDeclarationStatement[9760-9824]"
    }, {
      "left" : "newRoot.addChildrenToBack(label);",
      "right" : "newRoot.addChildrenToBack(label);",
      "info" : "ExpressionStatement[9728-9761]:ExpressionStatement[9833-9866]"
    }, {
      "left" : "root = newRoot;",
      "right" : "root = newRoot;",
      "info" : "ExpressionStatement[9810-9825]:ExpressionStatement[9915-9930]"
    }, {
      "left" : "if (resultMustBeSet && !hasReturnAtExit && resultName != null)",
      "right" : "if (resultMustBeSet && !hasReturnAtExit && resultName != null)",
      "info" : "IfStatement[9963-10078]:IfStatement[10068-10183]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10026-10078]:Block[10131-10183]"
    }, {
      "left" : "addDummyAssignment(block, resultName);",
      "right" : "addDummyAssignment(block, resultName);",
      "info" : "ExpressionStatement[10034-10072]:ExpressionStatement[10139-10177]"
    }, {
      "left" : "return root;",
      "right" : "return root;",
      "info" : "ReturnStatement[10084-10096]:ReturnStatement[10189-10201]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10443-10807]:Block[10548-10912]"
    }, {
      "left" : "Preconditions.checkArgument(node.getType() == Token.BLOCK);",
      "right" : "Preconditions.checkArgument(node.getType() == Token.BLOCK);",
      "info" : "ExpressionStatement[10449-10508]:ExpressionStatement[10554-10613]"
    }, {
      "left" : "Node srcLocation = node;",
      "right" : "Node srcLocation = node;",
      "info" : "VariableDeclarationStatement[10562-10586]:VariableDeclarationStatement[10667-10691]"
    }, {
      "left" : "Node retVal = NodeUtil.newUndefinedNode(srcLocation);",
      "right" : "Node retVal = NodeUtil.newUndefinedNode(srcLocation);",
      "info" : "VariableDeclarationStatement[10591-10644]:VariableDeclarationStatement[10696-10749]"
    }, {
      "left" : "Node resultNode = createAssignStatementNode(resultName, retVal);",
      "right" : "Node resultNode = createAssignStatementNode(resultName, retVal);",
      "info" : "VariableDeclarationStatement[10649-10713]:VariableDeclarationStatement[10754-10818]"
    }, {
      "left" : "resultNode.copyInformationFromForTree(node);",
      "right" : "resultNode.copyInformationFromForTree(node);",
      "info" : "ExpressionStatement[10718-10762]:ExpressionStatement[10823-10867]"
    }, {
      "left" : "node.addChildrenToBack(resultNode);",
      "right" : "node.addChildrenToBack(resultNode);",
      "info" : "ExpressionStatement[10768-10803]:ExpressionStatement[10873-10908]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11142-11491]:Block[11247-11596]"
    }, {
      "left" : "Node ret = block.getLastChild();",
      "right" : "Node ret = block.getLastChild();",
      "info" : "VariableDeclarationStatement[11148-11180]:VariableDeclarationStatement[11253-11285]"
    }, {
      "left" : "Preconditions.checkArgument(ret.getType() == Token.RETURN);",
      "right" : "Preconditions.checkArgument(ret.getType() == Token.RETURN);",
      "info" : "ExpressionStatement[11185-11244]:ExpressionStatement[11290-11349]"
    }, {
      "left" : "Node resultNode = getReplacementReturnStatement(ret, resultName);",
      "right" : "Node resultNode = getReplacementReturnStatement(ret, resultName);",
      "info" : "VariableDeclarationStatement[11249-11314]:VariableDeclarationStatement[11354-11419]"
    }, {
      "left" : "if (resultNode == null)",
      "right" : "if (resultNode == null)",
      "info" : "IfStatement[11320-11487]:IfStatement[11425-11592]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11344-11381]:Block[11449-11486]"
    }, {
      "left" : "block.removeChild(ret);",
      "right" : "block.removeChild(ret);",
      "info" : "ExpressionStatement[11352-11375]:ExpressionStatement[11457-11480]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11387-11487]:Block[11492-11592]"
    }, {
      "left" : "resultNode.copyInformationFromForTree(ret);",
      "right" : "resultNode.copyInformationFromForTree(ret);",
      "info" : "ExpressionStatement[11395-11438]:ExpressionStatement[11500-11543]"
    }, {
      "left" : "block.replaceChild(ret, resultNode);",
      "right" : "block.replaceChild(ret, resultNode);",
      "info" : "ExpressionStatement[11445-11481]:ExpressionStatement[11550-11586]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11681-11934]:Block[11786-12039]"
    }, {
      "left" : "Node nameNode = Node.newString(Token.NAME, name);",
      "right" : "Node nameNode = Node.newString(Token.NAME, name);",
      "info" : "VariableDeclarationStatement[11780-11829]:VariableDeclarationStatement[11885-11934]"
    }, {
      "left" : "Node assign = new Node(Token.ASSIGN, nameNode, expression);",
      "right" : "Node assign = new Node(Token.ASSIGN, nameNode, expression);",
      "info" : "VariableDeclarationStatement[11834-11893]:VariableDeclarationStatement[11939-11998]"
    }, {
      "left" : "return NodeUtil.newExpr(assign);",
      "right" : "return NodeUtil.newExpr(assign);",
      "info" : "ReturnStatement[11898-11930]:ReturnStatement[12003-12035]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12338-13035]:Block[12443-13140]"
    }, {
      "left" : "Node resultNode = null;",
      "right" : "Node resultNode = null;",
      "info" : "VariableDeclarationStatement[12344-12367]:VariableDeclarationStatement[12449-12472]"
    }, {
      "left" : "Node retVal = null;",
      "right" : "Node retVal = null;",
      "info" : "VariableDeclarationStatement[12373-12392]:VariableDeclarationStatement[12478-12497]"
    }, {
      "left" : "if (node.hasChildren())",
      "right" : "if (node.hasChildren())",
      "info" : "IfStatement[12397-12563]:IfStatement[12502-12668]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12421-12563]:Block[12526-12668]"
    }, {
      "left" : "retVal = node.getFirstChild().cloneTree();",
      "right" : "retVal = node.getFirstChild().cloneTree();",
      "info" : "ExpressionStatement[12515-12557]:ExpressionStatement[12620-12662]"
    }, {
      "left" : "if (resultName == null)",
      "right" : "if (resultName == null)",
      "info" : "IfStatement[12569-13007]:IfStatement[12674-13112]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12593-12698]:Block[12698-12803]"
    }, {
      "left" : "if (retVal != null)",
      "right" : "if (retVal != null)",
      "info" : "IfStatement[12601-12692]:IfStatement[12706-12797]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12621-12692]:Block[12726-12797]"
    }, {
      "left" : "resultNode = NodeUtil.newExpr(retVal);",
      "right" : "resultNode = NodeUtil.newExpr(retVal);",
      "info" : "ExpressionStatement[12631-12669]:ExpressionStatement[12736-12774]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12704-13007]:Block[12809-13112]"
    }, {
      "left" : "if (retVal == null)",
      "right" : "if (retVal == null)",
      "info" : "IfStatement[12712-12883]:IfStatement[12817-12988]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12732-12883]:Block[12837-12988]"
    }, {
      "left" : "Node srcLocation = node;",
      "right" : "Node srcLocation = node;",
      "info" : "VariableDeclarationStatement[12794-12818]:VariableDeclarationStatement[12899-12923]"
    }, {
      "left" : "retVal = NodeUtil.newUndefinedNode(srcLocation);",
      "right" : "retVal = NodeUtil.newUndefinedNode(srcLocation);",
      "info" : "ExpressionStatement[12827-12875]:ExpressionStatement[12932-12980]"
    }, {
      "left" : "resultNode = createAssignStatementNode(resultName, retVal);",
      "right" : "resultNode = createAssignStatementNode(resultName, retVal);",
      "info" : "ExpressionStatement[12942-13001]:ExpressionStatement[13047-13106]"
    }, {
      "left" : "return resultNode;",
      "right" : "return resultNode;",
      "info" : "ReturnStatement[13013-13031]:ReturnStatement[13118-13136]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13169-13362]:Block[13274-13467]"
    }, {
      "left" : "return (block.getLastChild().getType() == Token.RETURN);",
      "right" : "return (block.getLastChild().getType() == Token.RETURN);",
      "info" : "ReturnStatement[13302-13358]:ReturnStatement[13407-13463]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13714-14835]:Block[13819-14940]"
    }, {
      "left" : "if (current.getType() == Token.FUNCTION\n        || current.getType() == Token.EXPR_RESULT)",
      "right" : "if (current.getType() == Token.FUNCTION\n        || current.getType() == Token.EXPR_RESULT)",
      "info" : "IfStatement[13721-13945]:IfStatement[13826-14050]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13812-13945]:Block[13917-14050]"
    }, {
      "left" : "return current;",
      "right" : "return current;",
      "info" : "ReturnStatement[13924-13939]:ReturnStatement[14029-14044]"
    }, {
      "left" : "if (current.getType() == Token.RETURN)",
      "right" : "if (current.getType() == Token.RETURN)",
      "info" : "IfStatement[13951-14810]:IfStatement[14056-14915]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13990-14613]:Block[14095-14718]"
    }, {
      "left" : "Preconditions.checkState(NodeUtil.isStatementBlock(parent));",
      "right" : "Preconditions.checkState(NodeUtil.isStatementBlock(parent));",
      "info" : "ExpressionStatement[13998-14058]:ExpressionStatement[14103-14163]"
    }, {
      "left" : "Node resultNode = getReplacementReturnStatement(current, resultName);",
      "right" : "Node resultNode = getReplacementReturnStatement(current, resultName);",
      "info" : "VariableDeclarationStatement[14066-14135]:VariableDeclarationStatement[14171-14240]"
    }, {
      "left" : "Node name = Node.newString(Token.LABEL_NAME, labelName);",
      "right" : "Node name = Node.newString(Token.LABEL_NAME, labelName);",
      "info" : "VariableDeclarationStatement[14142-14198]:VariableDeclarationStatement[14247-14303]"
    }, {
      "left" : "Node breakNode = new Node(Token.BREAK, name);",
      "right" : "Node breakNode = new Node(Token.BREAK, name);",
      "info" : "VariableDeclarationStatement[14205-14250]:VariableDeclarationStatement[14310-14355]"
    }, {
      "left" : "breakNode.copyInformationFromForTree(current);",
      "right" : "breakNode.copyInformationFromForTree(current);",
      "info" : "ExpressionStatement[14337-14383]:ExpressionStatement[14442-14488]"
    }, {
      "left" : "parent.replaceChild(current, breakNode);",
      "right" : "parent.replaceChild(current, breakNode);",
      "info" : "ExpressionStatement[14390-14430]:ExpressionStatement[14495-14535]"
    }, {
      "left" : "if (resultNode != null)",
      "right" : "if (resultNode != null)",
      "info" : "IfStatement[14437-14580]:IfStatement[14542-14685]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14461-14580]:Block[14566-14685]"
    }, {
      "left" : "resultNode.copyInformationFromForTree(current);",
      "right" : "resultNode.copyInformationFromForTree(current);",
      "info" : "ExpressionStatement[14471-14518]:ExpressionStatement[14576-14623]"
    }, {
      "left" : "parent.addChildBefore(resultNode, breakNode);",
      "right" : "parent.addChildBefore(resultNode, breakNode);",
      "info" : "ExpressionStatement[14527-14572]:ExpressionStatement[14632-14677]"
    }, {
      "left" : "current = breakNode;",
      "right" : "current = breakNode;",
      "info" : "ExpressionStatement[14587-14607]:ExpressionStatement[14692-14712]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14619-14810]:Block[14724-14915]"
    }, {
      "left" : "for (Node c = current.getFirstChild(); c != null; c = c.getNext())",
      "right" : "for (Node c = current.getFirstChild(); c != null; c = c.getNext())",
      "info" : "ForStatement[14627-14804]:ForStatement[14732-14909]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14694-14804]:Block[14799-14909]"
    }, {
      "left" : "c = replaceReturnWithBreak(c, current, resultName, labelName);",
      "right" : "c = replaceReturnWithBreak(c, current, resultName, labelName);",
      "info" : "ExpressionStatement[14734-14796]:ExpressionStatement[14839-14901]"
    }, {
      "left" : "return current;",
      "right" : "return current;",
      "info" : "ReturnStatement[14816-14831]:ReturnStatement[14921-14936]"
    } ]
  },
  "interFileMappings" : { }
}