{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "Parser",
      "right" : "Parser",
      "info" : "TypeDeclaration[1002-13234]:TypeDeclaration[1002-13290]"
    }, {
      "left" : "protected CommandLine cmd;",
      "right" : "protected CommandLine cmd;",
      "info" : "FieldDeclaration[1227-1285]:FieldDeclaration[1227-1285]"
    }, {
      "left" : "private Options options;",
      "right" : "private Options options;",
      "info" : "FieldDeclaration[1291-1342]:FieldDeclaration[1291-1342]"
    }, {
      "left" : "private List requiredOptions;",
      "right" : "private List requiredOptions;",
      "info" : "FieldDeclaration[1348-1421]:FieldDeclaration[1348-1421]"
    }, {
      "left" : "protected void setOptions(final Options options)",
      "right" : "protected void setOptions(final Options options)",
      "info" : "MethodDeclaration[1427-1576]:MethodDeclaration[1427-1576]"
    }, {
      "left" : "protected Options getOptions()",
      "right" : "protected Options getOptions()",
      "info" : "MethodDeclaration[1582-1644]:MethodDeclaration[1582-1644]"
    }, {
      "left" : "protected List getRequiredOptions()",
      "right" : "protected List getRequiredOptions()",
      "info" : "MethodDeclaration[1650-1725]:MethodDeclaration[1650-1725]"
    }, {
      "left" : "protected abstract String[] flatten(Options opts, String[] arguments, \n                                        boolean stopAtNonOption);",
      "right" : "protected abstract String[] flatten(Options opts, String[] arguments, \n                                        boolean stopAtNonOption);",
      "info" : "MethodDeclaration[1732-2332]:MethodDeclaration[1732-2332]"
    }, {
      "left" : "public CommandLine parse(Options options, String[] arguments)\n                      throws ParseException",
      "right" : "public CommandLine parse(Options options, String[] arguments)\n                      throws ParseException",
      "info" : "MethodDeclaration[2338-2864]:MethodDeclaration[2338-2864]"
    }, {
      "left" : "public CommandLine parse(Options options, String[] arguments, \n                             Properties properties)\n        throws ParseException",
      "right" : "public CommandLine parse(Options options, String[] arguments, \n                             Properties properties)\n        throws ParseException",
      "info" : "MethodDeclaration[2870-3531]:MethodDeclaration[2870-3531]"
    }, {
      "left" : "public CommandLine parse(Options options, String[] arguments, \n                             boolean stopAtNonOption)\n        throws ParseException",
      "right" : "public CommandLine parse(Options options, String[] arguments, \n                             boolean stopAtNonOption)\n        throws ParseException",
      "info" : "MethodDeclaration[3537-4313]:MethodDeclaration[3537-4313]"
    }, {
      "left" : "public CommandLine parse(Options options, String[] arguments, \n                             Properties properties, boolean stopAtNonOption)\n        throws ParseException",
      "right" : "public CommandLine parse(Options options, String[] arguments, \n                             Properties properties, boolean stopAtNonOption)\n        throws ParseException",
      "info" : "MethodDeclaration[4319-7502]:MethodDeclaration[4319-7502]"
    }, {
      "left" : "protected void processProperties(Properties properties)",
      "right" : "protected void processProperties(Properties properties)",
      "info" : "MethodDeclaration[7508-9193]:MethodDeclaration[7508-9193]"
    }, {
      "left" : "protected void checkRequiredOptions()\n        throws MissingOptionException",
      "right" : "protected void checkRequiredOptions()\n        throws MissingOptionException",
      "info" : "MethodDeclaration[9199-10116]:MethodDeclaration[9199-10172]"
    }, {
      "left" : "public void processArgs(Option opt, ListIterator iter)\n        throws ParseException",
      "right" : "public void processArgs(Option opt, ListIterator iter)\n        throws ParseException",
      "info" : "MethodDeclaration[10122-11486]:MethodDeclaration[10178-11542]"
    }, {
      "left" : "protected void processOption(String arg, ListIterator iter)\n        throws ParseException",
      "right" : "protected void processOption(String arg, ListIterator iter)\n        throws ParseException",
      "info" : "MethodDeclaration[11492-13232]:MethodDeclaration[11548-13288]"
    } ],
    "mappings" : [
 {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[1162-1168]:Modifier[1162-1168]"
    }, {
      "left" : "abstract",
      "right" : "abstract",
      "info" : "Modifier[1169-1177]:Modifier[1169-1177]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[1178-1183]:TYPE_DECLARATION_KIND[1178-1183]"
    }, {
      "left" : "Parser",
      "right" : "Parser",
      "info" : "SimpleName[1184-1190]:SimpleName[1184-1190]"
    }, {
      "left" : "CommandLineParser",
      "right" : "CommandLineParser",
      "info" : "SimpleType[1202-1219]:SimpleType[1202-1219]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[1427-1436]:Modifier[1427-1436]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[1437-1441]:PrimitiveType[1437-1441]"
    }, {
      "left" : "setOptions",
      "right" : "setOptions",
      "info" : "SimpleName[1442-1452]:SimpleName[1442-1452]"
    }, {
      "left" : "final Options options",
      "right" : "final Options options",
      "info" : "SingleVariableDeclaration[1453-1474]:SingleVariableDeclaration[1453-1474]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1476-1576]:Block[1476-1576]"
    }, {
      "left" : "this.options = options;",
      "right" : "this.options = options;",
      "info" : "ExpressionStatement[1486-1509]:ExpressionStatement[1486-1509]"
    }, {
      "left" : "this.requiredOptions = options.getRequiredOptions();",
      "right" : "this.requiredOptions = options.getRequiredOptions();",
      "info" : "ExpressionStatement[1518-1570]:ExpressionStatement[1518-1570]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[1582-1591]:Modifier[1582-1591]"
    }, {
      "left" : "Options",
      "right" : "Options",
      "info" : "SimpleType[1592-1599]:SimpleType[1592-1599]"
    }, {
      "left" : "getOptions",
      "right" : "getOptions",
      "info" : "SimpleName[1600-1610]:SimpleName[1600-1610]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1613-1644]:Block[1613-1644]"
    }, {
      "left" : "return options;",
      "right" : "return options;",
      "info" : "ReturnStatement[1623-1638]:ReturnStatement[1623-1638]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[1650-1659]:Modifier[1650-1659]"
    }, {
      "left" : "List",
      "right" : "List",
      "info" : "SimpleType[1660-1664]:SimpleType[1660-1664]"
    }, {
      "left" : "getRequiredOptions",
      "right" : "getRequiredOptions",
      "info" : "SimpleName[1665-1683]:SimpleName[1665-1683]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1686-1725]:Block[1686-1725]"
    }, {
      "left" : "return requiredOptions;",
      "right" : "return requiredOptions;",
      "info" : "ReturnStatement[1696-1719]:ReturnStatement[1696-1719]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[2196-2205]:Modifier[2196-2205]"
    }, {
      "left" : "abstract",
      "right" : "abstract",
      "info" : "Modifier[2206-2214]:Modifier[2206-2214]"
    }, {
      "left" : "String[]",
      "right" : "String[]",
      "info" : "ArrayType[2215-2223]:ArrayType[2215-2223]"
    }, {
      "left" : "flatten",
      "right" : "flatten",
      "info" : "SimpleName[2224-2231]:SimpleName[2224-2231]"
    }, {
      "left" : "Options opts",
      "right" : "Options opts",
      "info" : "SingleVariableDeclaration[2232-2244]:SingleVariableDeclaration[2232-2244]"
    }, {
      "left" : "String[] arguments",
      "right" : "String[] arguments",
      "info" : "SingleVariableDeclaration[2246-2264]:SingleVariableDeclaration[2246-2264]"
    }, {
      "left" : "boolean stopAtNonOption",
      "right" : "boolean stopAtNonOption",
      "info" : "SingleVariableDeclaration[2307-2330]:SingleVariableDeclaration[2307-2330]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[2692-2698]:Modifier[2692-2698]"
    }, {
      "left" : "CommandLine",
      "right" : "CommandLine",
      "info" : "SimpleType[2699-2710]:SimpleType[2699-2710]"
    }, {
      "left" : "parse",
      "right" : "parse",
      "info" : "SimpleName[2711-2716]:SimpleName[2711-2716]"
    }, {
      "left" : "Options options",
      "right" : "Options options",
      "info" : "SingleVariableDeclaration[2717-2732]:SingleVariableDeclaration[2717-2732]"
    }, {
      "left" : "String[] arguments",
      "right" : "String[] arguments",
      "info" : "SingleVariableDeclaration[2734-2752]:SingleVariableDeclaration[2734-2752]"
    }, {
      "left" : "ParseException",
      "right" : "ParseException",
      "info" : "SimpleType[2783-2797]:SimpleType[2783-2797]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2802-2864]:Block[2802-2864]"
    }, {
      "left" : "return parse(options, arguments, null, false);",
      "right" : "return parse(options, arguments, null, false);",
      "info" : "ReturnStatement[2812-2858]:ReturnStatement[2812-2858]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[3314-3320]:Modifier[3314-3320]"
    }, {
      "left" : "CommandLine",
      "right" : "CommandLine",
      "info" : "SimpleType[3321-3332]:SimpleType[3321-3332]"
    }, {
      "left" : "parse",
      "right" : "parse",
      "info" : "SimpleName[3333-3338]:SimpleName[3333-3338]"
    }, {
      "left" : "Options options",
      "right" : "Options options",
      "info" : "SingleVariableDeclaration[3339-3354]:SingleVariableDeclaration[3339-3354]"
    }, {
      "left" : "String[] arguments",
      "right" : "String[] arguments",
      "info" : "SingleVariableDeclaration[3356-3374]:SingleVariableDeclaration[3356-3374]"
    }, {
      "left" : "Properties properties",
      "right" : "Properties properties",
      "info" : "SingleVariableDeclaration[3406-3427]:SingleVariableDeclaration[3406-3427]"
    }, {
      "left" : "ParseException",
      "right" : "ParseException",
      "info" : "SimpleType[3444-3458]:SimpleType[3444-3458]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3463-3531]:Block[3463-3531]"
    }, {
      "left" : "return parse(options, arguments, properties, false);",
      "right" : "return parse(options, arguments, properties, false);",
      "info" : "ReturnStatement[3473-3525]:ReturnStatement[3473-3525]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[4090-4096]:Modifier[4090-4096]"
    }, {
      "left" : "CommandLine",
      "right" : "CommandLine",
      "info" : "SimpleType[4097-4108]:SimpleType[4097-4108]"
    }, {
      "left" : "parse",
      "right" : "parse",
      "info" : "SimpleName[4109-4114]:SimpleName[4109-4114]"
    }, {
      "left" : "Options options",
      "right" : "Options options",
      "info" : "SingleVariableDeclaration[4115-4130]:SingleVariableDeclaration[4115-4130]"
    }, {
      "left" : "String[] arguments",
      "right" : "String[] arguments",
      "info" : "SingleVariableDeclaration[4132-4150]:SingleVariableDeclaration[4132-4150]"
    }, {
      "left" : "boolean stopAtNonOption",
      "right" : "boolean stopAtNonOption",
      "info" : "SingleVariableDeclaration[4182-4205]:SingleVariableDeclaration[4182-4205]"
    }, {
      "left" : "ParseException",
      "right" : "ParseException",
      "info" : "SimpleType[4222-4236]:SimpleType[4222-4236]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4241-4313]:Block[4241-4313]"
    }, {
      "left" : "return parse(options, arguments, null, stopAtNonOption);",
      "right" : "return parse(options, arguments, null, stopAtNonOption);",
      "info" : "ReturnStatement[4251-4307]:ReturnStatement[4251-4307]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[4876-4882]:Modifier[4876-4882]"
    }, {
      "left" : "CommandLine",
      "right" : "CommandLine",
      "info" : "SimpleType[4883-4894]:SimpleType[4883-4894]"
    }, {
      "left" : "parse",
      "right" : "parse",
      "info" : "SimpleName[4895-4900]:SimpleName[4895-4900]"
    }, {
      "left" : "Options options",
      "right" : "Options options",
      "info" : "SingleVariableDeclaration[4901-4916]:SingleVariableDeclaration[4901-4916]"
    }, {
      "left" : "String[] arguments",
      "right" : "String[] arguments",
      "info" : "SingleVariableDeclaration[4918-4936]:SingleVariableDeclaration[4918-4936]"
    }, {
      "left" : "Properties properties",
      "right" : "Properties properties",
      "info" : "SingleVariableDeclaration[4968-4989]:SingleVariableDeclaration[4968-4989]"
    }, {
      "left" : "boolean stopAtNonOption",
      "right" : "boolean stopAtNonOption",
      "info" : "SingleVariableDeclaration[4991-5014]:SingleVariableDeclaration[4991-5014]"
    }, {
      "left" : "ParseException",
      "right" : "ParseException",
      "info" : "SimpleType[5031-5045]:SimpleType[5031-5045]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5050-7502]:Block[5050-7502]"
    }, {
      "left" : "for (Iterator it = options.helpOptions().iterator(); it.hasNext())",
      "right" : "for (Iterator it = options.helpOptions().iterator(); it.hasNext())",
      "info" : "ForStatement[5140-5295]:ForStatement[5140-5295]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5208-5295]:Block[5208-5295]"
    }, {
      "left" : "Option opt = (Option) it.next();",
      "right" : "Option opt = (Option) it.next();",
      "info" : "VariableDeclarationStatement[5222-5254]:VariableDeclarationStatement[5222-5254]"
    }, {
      "left" : "opt.clearValues();",
      "right" : "opt.clearValues();",
      "info" : "ExpressionStatement[5267-5285]:ExpressionStatement[5267-5285]"
    }, {
      "left" : "setOptions(options);",
      "right" : "setOptions(options);",
      "info" : "ExpressionStatement[5335-5355]:ExpressionStatement[5335-5355]"
    }, {
      "left" : "cmd = new CommandLine();",
      "right" : "cmd = new CommandLine();",
      "info" : "ExpressionStatement[5365-5389]:ExpressionStatement[5365-5389]"
    }, {
      "left" : "boolean eatTheRest = false;",
      "right" : "boolean eatTheRest = false;",
      "info" : "VariableDeclarationStatement[5399-5426]:VariableDeclarationStatement[5399-5426]"
    }, {
      "left" : "if (arguments == null)",
      "right" : "if (arguments == null)",
      "info" : "IfStatement[5436-5517]:IfStatement[5436-5517]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5467-5517]:Block[5467-5517]"
    }, {
      "left" : "arguments = new String[0];",
      "right" : "arguments = new String[0];",
      "info" : "ExpressionStatement[5481-5507]:ExpressionStatement[5481-5507]"
    }, {
      "left" : "List tokenList = Arrays.asList(flatten(getOptions(), \n                                               arguments, \n                                               stopAtNonOption));",
      "right" : "List tokenList = Arrays.asList(flatten(getOptions(), \n                                               arguments, \n                                               stopAtNonOption));",
      "info" : "VariableDeclarationStatement[5527-5705]:VariableDeclarationStatement[5527-5705]"
    }, {
      "left" : "ListIterator iterator = tokenList.listIterator();",
      "right" : "ListIterator iterator = tokenList.listIterator();",
      "info" : "VariableDeclarationStatement[5715-5764]:VariableDeclarationStatement[5715-5764]"
    }, {
      "left" : "while (iterator.hasNext())",
      "right" : "while (iterator.hasNext())",
      "info" : "WhileStatement[5814-7403]:WhileStatement[5814-7403]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5849-7403]:Block[5849-7403]"
    }, {
      "left" : "String t = (String) iterator.next();",
      "right" : "String t = (String) iterator.next();",
      "info" : "VariableDeclarationStatement[5863-5899]:VariableDeclarationStatement[5863-5899]"
    }, {
      "left" : "if (\"--\".equals(t))",
      "right" : "if (\"--\".equals(t))",
      "info" : "IfStatement[5957-6969]:IfStatement[5957-6969]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5989-6039]:Block[5989-6039]"
    }, {
      "left" : "eatTheRest = true;",
      "right" : "eatTheRest = true;",
      "info" : "ExpressionStatement[6007-6025]:ExpressionStatement[6007-6025]"
    }, {
      "left" : "if (\"-\".equals(t))",
      "right" : "if (\"-\".equals(t))",
      "info" : "IfStatement[6100-6969]:IfStatement[6100-6969]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6131-6350]:Block[6131-6350]"
    }, {
      "left" : "if (stopAtNonOption)",
      "right" : "if (stopAtNonOption)",
      "info" : "IfStatement[6149-6336]:IfStatement[6149-6336]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6186-6244]:Block[6186-6244]"
    }, {
      "left" : "eatTheRest = true;",
      "right" : "eatTheRest = true;",
      "info" : "ExpressionStatement[6208-6226]:ExpressionStatement[6208-6226]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6282-6336]:Block[6282-6336]"
    }, {
      "left" : "cmd.addArg(t);",
      "right" : "cmd.addArg(t);",
      "info" : "ExpressionStatement[6304-6318]:ExpressionStatement[6304-6318]"
    }, {
      "left" : "if (t.startsWith(\"-\"))",
      "right" : "if (t.startsWith(\"-\"))",
      "info" : "IfStatement[6407-6969]:IfStatement[6407-6969]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6442-6739]:Block[6442-6739]"
    }, {
      "left" : "if (stopAtNonOption && !getOptions().hasOption(t))",
      "right" : "if (stopAtNonOption && !getOptions().hasOption(t))",
      "info" : "IfStatement[6460-6725]:IfStatement[6460-6725]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6527-6620]:Block[6527-6620]"
    }, {
      "left" : "eatTheRest = true;",
      "right" : "eatTheRest = true;",
      "info" : "ExpressionStatement[6549-6567]:ExpressionStatement[6549-6567]"
    }, {
      "left" : "cmd.addArg(t);",
      "right" : "cmd.addArg(t);",
      "info" : "ExpressionStatement[6588-6602]:ExpressionStatement[6588-6602]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6658-6725]:Block[6658-6725]"
    }, {
      "left" : "processOption(t, iterator);",
      "right" : "processOption(t, iterator);",
      "info" : "ExpressionStatement[6680-6707]:ExpressionStatement[6680-6707]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6810-6969]:Block[6810-6969]"
    }, {
      "left" : "cmd.addArg(t);",
      "right" : "cmd.addArg(t);",
      "info" : "ExpressionStatement[6828-6842]:ExpressionStatement[6828-6842]"
    }, {
      "left" : "if (stopAtNonOption)",
      "right" : "if (stopAtNonOption)",
      "info" : "IfStatement[6860-6955]:IfStatement[6860-6955]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6897-6955]:Block[6897-6955]"
    }, {
      "left" : "eatTheRest = true;",
      "right" : "eatTheRest = true;",
      "info" : "ExpressionStatement[6919-6937]:ExpressionStatement[6919-6937]"
    }, {
      "left" : "if (eatTheRest)",
      "right" : "if (eatTheRest)",
      "info" : "IfStatement[7023-7393]:IfStatement[7023-7393]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7051-7393]:Block[7051-7393]"
    }, {
      "left" : "while (iterator.hasNext())",
      "right" : "while (iterator.hasNext())",
      "info" : "WhileStatement[7069-7379]:WhileStatement[7069-7379]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7112-7379]:Block[7112-7379]"
    }, {
      "left" : "String str = (String) iterator.next();",
      "right" : "String str = (String) iterator.next();",
      "info" : "VariableDeclarationStatement[7134-7172]:VariableDeclarationStatement[7134-7172]"
    }, {
      "left" : "if (!\"--\".equals(str))",
      "right" : "if (!\"--\".equals(str))",
      "info" : "IfStatement[7254-7361]:IfStatement[7254-7361]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7297-7361]:Block[7297-7361]"
    }, {
      "left" : "cmd.addArg(str);",
      "right" : "cmd.addArg(str);",
      "info" : "ExpressionStatement[7323-7339]:ExpressionStatement[7323-7339]"
    }, {
      "left" : "processProperties(properties);",
      "right" : "processProperties(properties);",
      "info" : "ExpressionStatement[7413-7443]:ExpressionStatement[7413-7443]"
    }, {
      "left" : "checkRequiredOptions();",
      "right" : "checkRequiredOptions();",
      "info" : "ExpressionStatement[7452-7475]:ExpressionStatement[7452-7475]"
    }, {
      "left" : "return cmd;",
      "right" : "return cmd;",
      "info" : "ReturnStatement[7485-7496]:ReturnStatement[7485-7496]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[7688-7697]:Modifier[7688-7697]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[7698-7702]:PrimitiveType[7698-7702]"
    }, {
      "left" : "processProperties",
      "right" : "processProperties",
      "info" : "SimpleName[7703-7720]:SimpleName[7703-7720]"
    }, {
      "left" : "Properties properties",
      "right" : "Properties properties",
      "info" : "SingleVariableDeclaration[7721-7742]:SingleVariableDeclaration[7721-7742]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7748-9193]:Block[7748-9193]"
    }, {
      "left" : "if (properties == null)",
      "right" : "if (properties == null)",
      "info" : "IfStatement[7758-7821]:IfStatement[7758-7821]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7790-7821]:Block[7790-7821]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[7804-7811]:ReturnStatement[7804-7811]"
    }, {
      "left" : "for (Enumeration e = properties.propertyNames(); e.hasMoreElements())",
      "right" : "for (Enumeration e = properties.propertyNames(); e.hasMoreElements())",
      "info" : "ForStatement[7831-9187]:ForStatement[7831-9187]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7910-9187]:Block[7910-9187]"
    }, {
      "left" : "String option = e.nextElement().toString();",
      "right" : "String option = e.nextElement().toString();",
      "info" : "VariableDeclarationStatement[7924-7967]:VariableDeclarationStatement[7924-7967]"
    }, {
      "left" : "if (!cmd.hasOption(option))",
      "right" : "if (!cmd.hasOption(option))",
      "info" : "IfStatement[7981-9177]:IfStatement[7981-9177]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8021-9177]:Block[8021-9177]"
    }, {
      "left" : "Option opt = getOptions().getOption(option);",
      "right" : "Option opt = getOptions().getOption(option);",
      "info" : "VariableDeclarationStatement[8039-8083]:VariableDeclarationStatement[8039-8083]"
    }, {
      "left" : "String value = properties.getProperty(option);",
      "right" : "String value = properties.getProperty(option);",
      "info" : "VariableDeclarationStatement[8163-8209]:VariableDeclarationStatement[8163-8209]"
    }, {
      "left" : "if (opt.hasArg())",
      "right" : "if (opt.hasArg())",
      "info" : "IfStatement[8227-9126]:IfStatement[8227-9126]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8261-8758]:Block[8261-8758]"
    }, {
      "left" : "if ((opt.getValues() == null)\n                        || (opt.getValues().length == 0))",
      "right" : "if ((opt.getValues() == null)\n                        || (opt.getValues().length == 0))",
      "info" : "IfStatement[8283-8740]:IfStatement[8283-8740]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8391-8740]:Block[8391-8740]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[8417-8718]:TryStatement[8417-8718]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8445-8534]:Block[8445-8534]"
    }, {
      "left" : "opt.addValueForProcessing(value);",
      "right" : "opt.addValueForProcessing(value);",
      "info" : "ExpressionStatement[8475-8508]:ExpressionStatement[8475-8508]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8612-8718]:Block[8612-8718]"
    }, {
      "left" : "if (!(\"yes\".equalsIgnoreCase(value) \n                           || \"true\".equalsIgnoreCase(value)\n                           || \"1\".equalsIgnoreCase(value)))",
      "right" : "if (!(\"yes\".equalsIgnoreCase(value) \n                           || \"true\".equalsIgnoreCase(value)\n                           || \"1\".equalsIgnoreCase(value)))",
      "info" : "IfStatement[8780-9126]:IfStatement[8780-9126]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8954-9126]:Block[8954-9126]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[9102-9108]:BreakStatement[9102-9108]"
    }, {
      "left" : "cmd.addOption(opt);",
      "right" : "cmd.addOption(opt);",
      "info" : "ExpressionStatement[9144-9163]:ExpressionStatement[9144-9163]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[9423-9432]:Modifier[9423-9432]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[9433-9437]:PrimitiveType[9433-9437]"
    }, {
      "left" : "checkRequiredOptions",
      "right" : "checkRequiredOptions",
      "info" : "SimpleName[9438-9458]:SimpleName[9438-9458]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9503-10116]:Block[9503-10172]"
    }, {
      "left" : "if (getRequiredOptions().size() > 0)",
      "right" : "if (getRequiredOptions().size() > 0)",
      "info" : "IfStatement[9595-10110]:IfStatement[9595-10166]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9640-10110]:Block[9640-10166]"
    }, {
      "left" : "Iterator iter = getRequiredOptions().iterator();",
      "right" : "Iterator iter = getRequiredOptions().iterator();",
      "info" : "VariableDeclarationStatement[9654-9702]:VariableDeclarationStatement[9654-9702]"
    }, {
      "left" : "StringBuffer buff = new StringBuffer(\"Missing required option\");",
      "right" : "StringBuffer buff = new StringBuffer(\"Missing required option\");",
      "info" : "VariableDeclarationStatement[9715-9779]:VariableDeclarationStatement[9715-9779]"
    }, {
      "left" : "buff.append(getRequiredOptions().size() == 1 ? \"\" : \"s\");",
      "right" : "buff.append(getRequiredOptions().size() == 1 ? \"\" : \"s\");",
      "info" : "ExpressionStatement[9792-9849]:ExpressionStatement[9792-9849]"
    }, {
      "left" : "buff.append(\": \");",
      "right" : "buff.append(\": \");",
      "info" : "ExpressionStatement[9862-9880]:ExpressionStatement[9862-9880]"
    }, {
      "left" : "while (iter.hasNext())",
      "right" : "while (iter.hasNext())",
      "info" : "WhileStatement[9944-10036]:WhileStatement[9944-10071]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9979-10036]:Block[9979-10071]"
    }, {
      "left" : "buff.append(iter.next());",
      "right" : "buff.append(iter.next());",
      "info" : "ExpressionStatement[9997-10022]:ExpressionStatement[9997-10022]"
    }, {
      "left" : "throw new MissingOptionException(buff.toString());",
      "right" : "throw new MissingOptionException(buff.substring(0, buff.length() - 2));",
      "info" : "ThrowStatement[10050-10100]:ThrowStatement[10085-10156]"
    }, {
      "left" : "toString",
      "right" : "substring",
      "info" : "SimpleName[10088-10096]:SimpleName[10123-10132]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[10538-10544]:Modifier[10594-10600]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[10545-10549]:PrimitiveType[10601-10605]"
    }, {
      "left" : "processArgs",
      "right" : "processArgs",
      "info" : "SimpleName[10550-10561]:SimpleName[10606-10617]"
    }, {
      "left" : "Option opt",
      "right" : "Option opt",
      "info" : "SingleVariableDeclaration[10562-10572]:SingleVariableDeclaration[10618-10628]"
    }, {
      "left" : "ListIterator iter",
      "right" : "ListIterator iter",
      "info" : "SingleVariableDeclaration[10574-10591]:SingleVariableDeclaration[10630-10647]"
    }, {
      "left" : "ParseException",
      "right" : "ParseException",
      "info" : "SimpleType[10608-10622]:SimpleType[10664-10678]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10627-11486]:Block[10683-11542]"
    }, {
      "left" : "while (iter.hasNext())",
      "right" : "while (iter.hasNext())",
      "info" : "WhileStatement[10678-11253]:WhileStatement[10734-11309]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10709-11253]:Block[10765-11309]"
    }, {
      "left" : "String str = (String) iter.next();",
      "right" : "String str = (String) iter.next();",
      "info" : "VariableDeclarationStatement[10723-10757]:VariableDeclarationStatement[10779-10813]"
    }, {
      "left" : "if (getOptions().hasOption(str) && str.startsWith(\"-\"))",
      "right" : "if (getOptions().hasOption(str) && str.startsWith(\"-\"))",
      "info" : "IfStatement[10819-10958]:IfStatement[10875-11014]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10887-10958]:Block[10943-11014]"
    }, {
      "left" : "iter.previous();",
      "right" : "iter.previous();",
      "info" : "ExpressionStatement[10905-10921]:ExpressionStatement[10961-10977]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[10938-10944]:BreakStatement[10994-11000]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[11001-11243]:TryStatement[11057-11299]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11017-11118]:Block[11073-11174]"
    }, {
      "left" : "opt.addValueForProcessing( Util.stripLeadingAndTrailingQuotes(str) );",
      "right" : "opt.addValueForProcessing( Util.stripLeadingAndTrailingQuotes(str) );",
      "info" : "ExpressionStatement[11035-11104]:ExpressionStatement[11091-11160]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11172-11243]:Block[11228-11299]"
    }, {
      "left" : "iter.previous();",
      "right" : "iter.previous();",
      "info" : "ExpressionStatement[11190-11206]:ExpressionStatement[11246-11262]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[11223-11229]:BreakStatement[11279-11285]"
    }, {
      "left" : "if ((opt.getValues() == null) && !opt.hasOptionalArg())",
      "right" : "if ((opt.getValues() == null) && !opt.hasOptionalArg())",
      "info" : "IfStatement[11263-11480]:IfStatement[11319-11536]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11327-11480]:Block[11383-11536]"
    }, {
      "left" : "throw new MissingArgumentException(\"Missing argument for option:\"\n                                               + opt.getKey());",
      "right" : "throw new MissingArgumentException(\"Missing argument for option:\"\n                                               + opt.getKey());",
      "info" : "ThrowStatement[11341-11470]:ThrowStatement[11397-11526]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[11895-11904]:Modifier[11951-11960]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[11905-11909]:PrimitiveType[11961-11965]"
    }, {
      "left" : "processOption",
      "right" : "processOption",
      "info" : "SimpleName[11910-11923]:SimpleName[11966-11979]"
    }, {
      "left" : "String arg",
      "right" : "String arg",
      "info" : "SingleVariableDeclaration[11924-11934]:SingleVariableDeclaration[11980-11990]"
    }, {
      "left" : "ListIterator iter",
      "right" : "ListIterator iter",
      "info" : "SingleVariableDeclaration[11936-11953]:SingleVariableDeclaration[11992-12009]"
    }, {
      "left" : "ParseException",
      "right" : "ParseException",
      "info" : "SimpleType[11970-11984]:SimpleType[12026-12040]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11989-13232]:Block[12045-13288]"
    }, {
      "left" : "boolean hasOption = getOptions().hasOption(arg);",
      "right" : "boolean hasOption = getOptions().hasOption(arg);",
      "info" : "VariableDeclarationStatement[11999-12047]:VariableDeclarationStatement[12055-12103]"
    }, {
      "left" : "if (!hasOption)",
      "right" : "if (!hasOption)",
      "info" : "IfStatement[12127-12295]:IfStatement[12183-12351]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12151-12295]:Block[12207-12351]"
    }, {
      "left" : "throw new UnrecognizedOptionException(\"Unrecognized option: \" \n                                                  + arg);",
      "right" : "throw new UnrecognizedOptionException(\"Unrecognized option: \" \n                                                  + arg);",
      "info" : "ThrowStatement[12165-12285]:ThrowStatement[12221-12341]"
    }, {
      "left" : "final Option opt = getOptions().getOption(arg);",
      "right" : "final Option opt = getOptions().getOption(arg);",
      "info" : "VariableDeclarationStatement[12358-12405]:VariableDeclarationStatement[12414-12461]"
    }, {
      "left" : "if (opt.isRequired())",
      "right" : "if (opt.isRequired())",
      "info" : "IfStatement[12520-12616]:IfStatement[12576-12672]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12550-12616]:Block[12606-12672]"
    }, {
      "left" : "getRequiredOptions().remove(opt.getKey());",
      "right" : "getRequiredOptions().remove(opt.getKey());",
      "info" : "ExpressionStatement[12564-12606]:ExpressionStatement[12620-12662]"
    }, {
      "left" : "if (getOptions().getOptionGroup(opt) != null)",
      "right" : "if (getOptions().getOptionGroup(opt) != null)",
      "info" : "IfStatement[12733-13018]:IfStatement[12789-13074]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12787-13018]:Block[12843-13074]"
    }, {
      "left" : "OptionGroup group = getOptions().getOptionGroup(opt);",
      "right" : "OptionGroup group = getOptions().getOptionGroup(opt);",
      "info" : "VariableDeclarationStatement[12801-12854]:VariableDeclarationStatement[12857-12910]"
    }, {
      "left" : "if (group.isRequired())",
      "right" : "if (group.isRequired())",
      "info" : "IfStatement[12868-12971]:IfStatement[12924-13027]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12904-12971]:Block[12960-13027]"
    }, {
      "left" : "getRequiredOptions().remove(group);",
      "right" : "getRequiredOptions().remove(group);",
      "info" : "ExpressionStatement[12922-12957]:ExpressionStatement[12978-13013]"
    }, {
      "left" : "group.setSelected(opt);",
      "right" : "group.setSelected(opt);",
      "info" : "ExpressionStatement[12985-13008]:ExpressionStatement[13041-13064]"
    }, {
      "left" : "if (opt.hasArg())",
      "right" : "if (opt.hasArg())",
      "info" : "IfStatement[13077-13150]:IfStatement[13133-13206]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13103-13150]:Block[13159-13206]"
    }, {
      "left" : "processArgs(opt, iter);",
      "right" : "processArgs(opt, iter);",
      "info" : "ExpressionStatement[13117-13140]:ExpressionStatement[13173-13196]"
    }, {
      "left" : "cmd.addOption(opt);",
      "right" : "cmd.addOption(opt);",
      "info" : "ExpressionStatement[13207-13226]:ExpressionStatement[13263-13282]"
    } ]
  },
  "interFileMappings" : { }
}