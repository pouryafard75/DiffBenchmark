{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "CompressorStreamFactory",
      "right" : "CompressorStreamFactory",
      "info" : "TypeDeclaration[2254-14533]:TypeDeclaration[2254-14692]"
    }, {
      "left" : "public static final String BZIP2 = \"bzip2\";",
      "right" : "public static final String BZIP2 = \"bzip2\";",
      "info" : "FieldDeclaration[3345-3505]:FieldDeclaration[3345-3505]"
    }, {
      "left" : "public static final String GZIP = \"gz\";",
      "right" : "public static final String GZIP = \"gz\";",
      "info" : "FieldDeclaration[3511-3713]:FieldDeclaration[3511-3713]"
    }, {
      "left" : "public static final String PACK200 = \"pack200\";",
      "right" : "public static final String PACK200 = \"pack200\";",
      "info" : "FieldDeclaration[3718-3884]:FieldDeclaration[3718-3884]"
    }, {
      "left" : "public static final String XZ = \"xz\";",
      "right" : "public static final String XZ = \"xz\";",
      "info" : "FieldDeclaration[3890-4038]:FieldDeclaration[3890-4038]"
    }, {
      "left" : "public static final String LZMA = \"lzma\";",
      "right" : "public static final String LZMA = \"lzma\";",
      "info" : "FieldDeclaration[4044-4245]:FieldDeclaration[4044-4245]"
    }, {
      "left" : "public static final String SNAPPY_FRAMED = \"snappy-framed\";",
      "right" : "public static final String SNAPPY_FRAMED = \"snappy-framed\";",
      "info" : "FieldDeclaration[4251-4481]:FieldDeclaration[4251-4481]"
    }, {
      "left" : "public static final String SNAPPY_RAW = \"snappy-raw\";",
      "right" : "public static final String SNAPPY_RAW = \"snappy-raw\";",
      "info" : "FieldDeclaration[4487-4708]:FieldDeclaration[4487-4708]"
    }, {
      "left" : "public static final String Z = \"z\";",
      "right" : "public static final String Z = \"z\";",
      "info" : "FieldDeclaration[4714-4918]:FieldDeclaration[4714-4918]"
    }, {
      "left" : "public static final String DEFLATE = \"deflate\";",
      "right" : "public static final String DEFLATE = \"deflate\";",
      "info" : "FieldDeclaration[4924-5084]:FieldDeclaration[4924-5084]"
    }, {
      "left" : "private final Boolean decompressUntilEOF;",
      "right" : "private final Boolean decompressUntilEOF;",
      "info" : "FieldDeclaration[5090-5327]:FieldDeclaration[5090-5327]"
    }, {
      "left" : "private volatile boolean decompressConcatenated = false;",
      "right" : "private volatile boolean decompressConcatenated = false;",
      "info" : "FieldDeclaration[5527-5780]:FieldDeclaration[5527-5780]"
    }, {
      "left" : "public CompressorStreamFactory()",
      "right" : "public CompressorStreamFactory()",
      "info" : "MethodDeclaration[5786-5964]:MethodDeclaration[5786-5964]"
    }, {
      "left" : "public CompressorStreamFactory(boolean decompressUntilEOF)",
      "right" : "public CompressorStreamFactory(boolean decompressUntilEOF)",
      "info" : "MethodDeclaration[5970-6771]:MethodDeclaration[5970-6771]"
    }, {
      "left" : "public void setDecompressConcatenated(boolean decompressConcatenated)",
      "right" : "public void setDecompressConcatenated(boolean decompressConcatenated)",
      "info" : "MethodDeclaration[6777-7910]:MethodDeclaration[6777-7910]"
    }, {
      "left" : "public CompressorInputStream createCompressorInputStream(final InputStream in)\n            throws CompressorException",
      "right" : "public CompressorInputStream createCompressorInputStream(final InputStream in)\n            throws CompressorException",
      "info" : "MethodDeclaration[7916-10426]:MethodDeclaration[7916-10585]"
    }, {
      "left" : "public CompressorInputStream createCompressorInputStream(final String name,\n            final InputStream in) throws CompressorException",
      "right" : "public CompressorInputStream createCompressorInputStream(final String name,\n            final InputStream in) throws CompressorException",
      "info" : "MethodDeclaration[10432-12730]:MethodDeclaration[10591-12889]"
    }, {
      "left" : "public CompressorOutputStream createCompressorOutputStream(\n            final String name, final OutputStream out)\n            throws CompressorException",
      "right" : "public CompressorOutputStream createCompressorOutputStream(\n            final String name, final OutputStream out)\n            throws CompressorException",
      "info" : "MethodDeclaration[12736-14421]:MethodDeclaration[12895-14580]"
    }, {
      "left" : "boolean getDecompressConcatenated()",
      "right" : "boolean getDecompressConcatenated()",
      "info" : "MethodDeclaration[14449-14531]:MethodDeclaration[14608-14690]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5915-5964]:Block[5915-5964]"
    }, {
      "left" : "this.decompressUntilEOF = null;",
      "right" : "this.decompressUntilEOF = null;",
      "info" : "ExpressionStatement[5925-5956]:ExpressionStatement[5925-5956]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6544-6771]:Block[6544-6771]"
    }, {
      "left" : "this.decompressUntilEOF = Boolean.valueOf(decompressUntilEOF);",
      "right" : "this.decompressUntilEOF = Boolean.valueOf(decompressUntilEOF);",
      "info" : "ExpressionStatement[6554-6616]:ExpressionStatement[6554-6616]"
    }, {
      "left" : "this.decompressConcatenated = decompressUntilEOF;",
      "right" : "this.decompressConcatenated = decompressUntilEOF;",
      "info" : "ExpressionStatement[6716-6765]:ExpressionStatement[6716-6765]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7681-7910]:Block[7681-7910]"
    }, {
      "left" : "if (this.decompressUntilEOF != null)",
      "right" : "if (this.decompressUntilEOF != null)",
      "info" : "IfStatement[7691-7842]:IfStatement[7691-7842]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7728-7842]:Block[7728-7842]"
    }, {
      "left" : "throw new IllegalStateException(\"Cannot override the setting defined by the constructor\");",
      "right" : "throw new IllegalStateException(\"Cannot override the setting defined by the constructor\");",
      "info" : "ThrowStatement[7742-7832]:ThrowStatement[7742-7832]"
    }, {
      "left" : "this.decompressConcatenated = decompressConcatenated;",
      "right" : "this.decompressConcatenated = decompressConcatenated;",
      "info" : "ExpressionStatement[7851-7904]:ExpressionStatement[7851-7904]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8524-10426]:Block[8524-10585]"
    }, {
      "left" : "if (in == null)",
      "right" : "if (in == null)",
      "info" : "IfStatement[8534-8637]:IfStatement[8534-8637]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8550-8637]:Block[8550-8637]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Stream must not be null.\");",
      "right" : "throw new IllegalArgumentException(\"Stream must not be null.\");",
      "info" : "ThrowStatement[8564-8627]:ThrowStatement[8564-8627]"
    }, {
      "left" : "if (!in.markSupported())",
      "right" : "if (!in.markSupported())",
      "info" : "IfStatement[8647-8757]:IfStatement[8647-8757]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8672-8757]:Block[8672-8757]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Mark is not supported.\");",
      "right" : "throw new IllegalArgumentException(\"Mark is not supported.\");",
      "info" : "ThrowStatement[8686-8747]:ThrowStatement[8686-8747]"
    }, {
      "left" : "final byte[] signature = new byte[12];",
      "right" : "final byte[] signature = new byte[12];",
      "info" : "VariableDeclarationStatement[8767-8805]:VariableDeclarationStatement[8767-8805]"
    }, {
      "left" : "in.mark(signature.length);",
      "right" : "in.mark(signature.length);",
      "info" : "ExpressionStatement[8814-8840]:ExpressionStatement[8814-8840]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[8849-10331]:TryStatement[8849-10490]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8853-10202]:Block[8853-10361]"
    }, {
      "left" : "int signatureLength = IOUtils.readFully(in, signature);",
      "right" : "int signatureLength = IOUtils.readFully(in, signature);",
      "info" : "VariableDeclarationStatement[8867-8922]:VariableDeclarationStatement[8867-8922]"
    }, {
      "left" : "in.reset();",
      "right" : "in.reset();",
      "info" : "ExpressionStatement[8935-8946]:ExpressionStatement[8935-8946]"
    }, {
      "left" : "if (BZip2CompressorInputStream.matches(signature, signatureLength))",
      "right" : "if (BZip2CompressorInputStream.matches(signature, signatureLength))",
      "info" : "IfStatement[8960-9126]:IfStatement[8960-9126]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9028-9126]:Block[9028-9126]"
    }, {
      "left" : "return new BZip2CompressorInputStream(in, decompressConcatenated);",
      "right" : "return new BZip2CompressorInputStream(in, decompressConcatenated);",
      "info" : "ReturnStatement[9046-9112]:ReturnStatement[9046-9112]"
    }, {
      "left" : "if (GzipCompressorInputStream.matches(signature, signatureLength))",
      "right" : "if (GzipCompressorInputStream.matches(signature, signatureLength))",
      "info" : "IfStatement[9140-9304]:IfStatement[9140-9304]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9207-9304]:Block[9207-9304]"
    }, {
      "left" : "return new GzipCompressorInputStream(in, decompressConcatenated);",
      "right" : "return new GzipCompressorInputStream(in, decompressConcatenated);",
      "info" : "ReturnStatement[9225-9290]:ReturnStatement[9225-9290]"
    }, {
      "left" : "if (Pack200CompressorInputStream.matches(signature, signatureLength))",
      "right" : "if (Pack200CompressorInputStream.matches(signature, signatureLength))",
      "info" : "IfStatement[9318-9464]:IfStatement[9318-9464]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9388-9464]:Block[9388-9464]"
    }, {
      "left" : "return new Pack200CompressorInputStream(in);",
      "right" : "return new Pack200CompressorInputStream(in);",
      "info" : "ReturnStatement[9406-9450]:ReturnStatement[9406-9450]"
    }, {
      "left" : "if (FramedSnappyCompressorInputStream.matches(signature, signatureLength))",
      "right" : "if (FramedSnappyCompressorInputStream.matches(signature, signatureLength))",
      "info" : "IfStatement[9478-9634]:IfStatement[9478-9634]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9553-9634]:Block[9553-9634]"
    }, {
      "left" : "return new FramedSnappyCompressorInputStream(in);",
      "right" : "return new FramedSnappyCompressorInputStream(in);",
      "info" : "ReturnStatement[9571-9620]:ReturnStatement[9571-9620]"
    }, {
      "left" : "if (ZCompressorInputStream.matches(signature, signatureLength))",
      "right" : "if (ZCompressorInputStream.matches(signature, signatureLength))",
      "info" : "IfStatement[9648-9782]:IfStatement[9648-9782]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9712-9782]:Block[9712-9782]"
    }, {
      "left" : "return new ZCompressorInputStream(in);",
      "right" : "return new ZCompressorInputStream(in);",
      "info" : "ReturnStatement[9730-9768]:ReturnStatement[9730-9768]"
    }, {
      "left" : "if (XZUtils.matches(signature, signatureLength) &&\n                XZUtils.isXZCompressionAvailable())",
      "right" : "if (XZUtils.matches(signature, signatureLength) &&\n                XZUtils.isXZCompressionAvailable())",
      "info" : "IfStatement[9797-9995]:IfStatement[9956-10154]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9900-9995]:Block[10059-10154]"
    }, {
      "left" : "return new XZCompressorInputStream(in, decompressConcatenated);",
      "right" : "return new XZCompressorInputStream(in, decompressConcatenated);",
      "info" : "ReturnStatement[9918-9981]:ReturnStatement[10077-10140]"
    }, {
      "left" : "if (LZMAUtils.matches(signature, signatureLength) &&\n                LZMAUtils.isLZMACompressionAvailable())",
      "right" : "if (LZMAUtils.matches(signature, signatureLength) &&\n                LZMAUtils.isLZMACompressionAvailable())",
      "info" : "IfStatement[10009-10191]:IfStatement[10168-10350]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10118-10191]:Block[10277-10350]"
    }, {
      "left" : "return new LZMACompressorInputStream(in);",
      "right" : "return new LZMACompressorInputStream(in);",
      "info" : "ReturnStatement[10136-10177]:ReturnStatement[10295-10336]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10225-10331]:Block[10384-10490]"
    }, {
      "left" : "throw new CompressorException(\"Failed to detect Compressor from InputStream.\", e);",
      "right" : "throw new CompressorException(\"Failed to detect Compressor from InputStream.\", e);",
      "info" : "ThrowStatement[10239-10321]:ThrowStatement[10398-10480]"
    }, {
      "left" : "throw new CompressorException(\"No Compressor found for the stream signature.\");",
      "right" : "throw new CompressorException(\"No Compressor found for the stream signature.\");",
      "info" : "ThrowStatement[10341-10420]:ThrowStatement[10500-10579]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11125-12730]:Block[11284-12889]"
    }, {
      "left" : "if (name == null || in == null)",
      "right" : "if (name == null || in == null)",
      "info" : "IfStatement[11135-11295]:IfStatement[11294-11454]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11167-11295]:Block[11326-11454]"
    }, {
      "left" : "throw new IllegalArgumentException(\n                    \"Compressor name and stream must not be null.\");",
      "right" : "throw new IllegalArgumentException(\n                    \"Compressor name and stream must not be null.\");",
      "info" : "ThrowStatement[11181-11285]:ThrowStatement[11340-11444]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[11305-12646]:TryStatement[11464-12805]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11309-12502]:Block[11468-12661]"
    }, {
      "left" : "if (GZIP.equalsIgnoreCase(name))",
      "right" : "if (GZIP.equalsIgnoreCase(name))",
      "info" : "IfStatement[11324-11454]:IfStatement[11483-11613]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11357-11454]:Block[11516-11613]"
    }, {
      "left" : "return new GzipCompressorInputStream(in, decompressConcatenated);",
      "right" : "return new GzipCompressorInputStream(in, decompressConcatenated);",
      "info" : "ReturnStatement[11375-11440]:ReturnStatement[11534-11599]"
    }, {
      "left" : "if (BZIP2.equalsIgnoreCase(name))",
      "right" : "if (BZIP2.equalsIgnoreCase(name))",
      "info" : "IfStatement[11468-11600]:IfStatement[11627-11759]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11502-11600]:Block[11661-11759]"
    }, {
      "left" : "return new BZip2CompressorInputStream(in, decompressConcatenated);",
      "right" : "return new BZip2CompressorInputStream(in, decompressConcatenated);",
      "info" : "ReturnStatement[11520-11586]:ReturnStatement[11679-11745]"
    }, {
      "left" : "if (XZ.equalsIgnoreCase(name))",
      "right" : "if (XZ.equalsIgnoreCase(name))",
      "info" : "IfStatement[11614-11740]:IfStatement[11773-11899]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11645-11740]:Block[11804-11899]"
    }, {
      "left" : "return new XZCompressorInputStream(in, decompressConcatenated);",
      "right" : "return new XZCompressorInputStream(in, decompressConcatenated);",
      "info" : "ReturnStatement[11663-11726]:ReturnStatement[11822-11885]"
    }, {
      "left" : "if (LZMA.equalsIgnoreCase(name))",
      "right" : "if (LZMA.equalsIgnoreCase(name))",
      "info" : "IfStatement[11754-11860]:IfStatement[11913-12019]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11787-11860]:Block[11946-12019]"
    }, {
      "left" : "return new LZMACompressorInputStream(in);",
      "right" : "return new LZMACompressorInputStream(in);",
      "info" : "ReturnStatement[11805-11846]:ReturnStatement[11964-12005]"
    }, {
      "left" : "if (PACK200.equalsIgnoreCase(name))",
      "right" : "if (PACK200.equalsIgnoreCase(name))",
      "info" : "IfStatement[11874-11986]:IfStatement[12033-12145]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11910-11986]:Block[12069-12145]"
    }, {
      "left" : "return new Pack200CompressorInputStream(in);",
      "right" : "return new Pack200CompressorInputStream(in);",
      "info" : "ReturnStatement[11928-11972]:ReturnStatement[12087-12131]"
    }, {
      "left" : "if (SNAPPY_RAW.equalsIgnoreCase(name))",
      "right" : "if (SNAPPY_RAW.equalsIgnoreCase(name))",
      "info" : "IfStatement[12000-12114]:IfStatement[12159-12273]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12039-12114]:Block[12198-12273]"
    }, {
      "left" : "return new SnappyCompressorInputStream(in);",
      "right" : "return new SnappyCompressorInputStream(in);",
      "info" : "ReturnStatement[12057-12100]:ReturnStatement[12216-12259]"
    }, {
      "left" : "if (SNAPPY_FRAMED.equalsIgnoreCase(name))",
      "right" : "if (SNAPPY_FRAMED.equalsIgnoreCase(name))",
      "info" : "IfStatement[12128-12251]:IfStatement[12287-12410]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12170-12251]:Block[12329-12410]"
    }, {
      "left" : "return new FramedSnappyCompressorInputStream(in);",
      "right" : "return new FramedSnappyCompressorInputStream(in);",
      "info" : "ReturnStatement[12188-12237]:ReturnStatement[12347-12396]"
    }, {
      "left" : "if (Z.equalsIgnoreCase(name))",
      "right" : "if (Z.equalsIgnoreCase(name))",
      "info" : "IfStatement[12265-12365]:IfStatement[12424-12524]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12295-12365]:Block[12454-12524]"
    }, {
      "left" : "return new ZCompressorInputStream(in);",
      "right" : "return new ZCompressorInputStream(in);",
      "info" : "ReturnStatement[12313-12351]:ReturnStatement[12472-12510]"
    }, {
      "left" : "if (DEFLATE.equalsIgnoreCase(name))",
      "right" : "if (DEFLATE.equalsIgnoreCase(name))",
      "info" : "IfStatement[12379-12491]:IfStatement[12538-12650]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12415-12491]:Block[12574-12650]"
    }, {
      "left" : "return new DeflateCompressorInputStream(in);",
      "right" : "return new DeflateCompressorInputStream(in);",
      "info" : "ReturnStatement[12433-12477]:ReturnStatement[12592-12636]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12525-12646]:Block[12684-12805]"
    }, {
      "left" : "throw new CompressorException(\n                    \"Could not create CompressorInputStream.\", e);",
      "right" : "throw new CompressorException(\n                    \"Could not create CompressorInputStream.\", e);",
      "info" : "ThrowStatement[12539-12636]:ThrowStatement[12698-12795]"
    }, {
      "left" : "throw new CompressorException(\"Compressor: \" + name + \" not found.\");",
      "right" : "throw new CompressorException(\"Compressor: \" + name + \" not found.\");",
      "info" : "ThrowStatement[12655-12724]:ThrowStatement[12814-12883]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13376-14421]:Block[13535-14580]"
    }, {
      "left" : "if (name == null || out == null)",
      "right" : "if (name == null || out == null)",
      "info" : "IfStatement[13386-13547]:IfStatement[13545-13706]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13419-13547]:Block[13578-13706]"
    }, {
      "left" : "throw new IllegalArgumentException(\n                    \"Compressor name and stream must not be null.\");",
      "right" : "throw new IllegalArgumentException(\n                    \"Compressor name and stream must not be null.\");",
      "info" : "ThrowStatement[13433-13537]:ThrowStatement[13592-13696]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[13557-14337]:TryStatement[13716-14496]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13561-14193]:Block[13720-14352]"
    }, {
      "left" : "if (GZIP.equalsIgnoreCase(name))",
      "right" : "if (GZIP.equalsIgnoreCase(name))",
      "info" : "IfStatement[13576-13684]:IfStatement[13735-13843]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13609-13684]:Block[13768-13843]"
    }, {
      "left" : "return new GzipCompressorOutputStream(out);",
      "right" : "return new GzipCompressorOutputStream(out);",
      "info" : "ReturnStatement[13627-13670]:ReturnStatement[13786-13829]"
    }, {
      "left" : "if (BZIP2.equalsIgnoreCase(name))",
      "right" : "if (BZIP2.equalsIgnoreCase(name))",
      "info" : "IfStatement[13698-13808]:IfStatement[13857-13967]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13732-13808]:Block[13891-13967]"
    }, {
      "left" : "return new BZip2CompressorOutputStream(out);",
      "right" : "return new BZip2CompressorOutputStream(out);",
      "info" : "ReturnStatement[13750-13794]:ReturnStatement[13909-13953]"
    }, {
      "left" : "if (XZ.equalsIgnoreCase(name))",
      "right" : "if (XZ.equalsIgnoreCase(name))",
      "info" : "IfStatement[13822-13926]:IfStatement[13981-14085]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13853-13926]:Block[14012-14085]"
    }, {
      "left" : "return new XZCompressorOutputStream(out);",
      "right" : "return new XZCompressorOutputStream(out);",
      "info" : "ReturnStatement[13871-13912]:ReturnStatement[14030-14071]"
    }, {
      "left" : "if (PACK200.equalsIgnoreCase(name))",
      "right" : "if (PACK200.equalsIgnoreCase(name))",
      "info" : "IfStatement[13940-14054]:IfStatement[14099-14213]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13976-14054]:Block[14135-14213]"
    }, {
      "left" : "return new Pack200CompressorOutputStream(out);",
      "right" : "return new Pack200CompressorOutputStream(out);",
      "info" : "ReturnStatement[13994-14040]:ReturnStatement[14153-14199]"
    }, {
      "left" : "if (DEFLATE.equalsIgnoreCase(name))",
      "right" : "if (DEFLATE.equalsIgnoreCase(name))",
      "info" : "IfStatement[14068-14182]:IfStatement[14227-14341]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14104-14182]:Block[14263-14341]"
    }, {
      "left" : "return new DeflateCompressorOutputStream(out);",
      "right" : "return new DeflateCompressorOutputStream(out);",
      "info" : "ReturnStatement[14122-14168]:ReturnStatement[14281-14327]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14216-14337]:Block[14375-14496]"
    }, {
      "left" : "throw new CompressorException(\n                    \"Could not create CompressorOutputStream\", e);",
      "right" : "throw new CompressorException(\n                    \"Could not create CompressorOutputStream\", e);",
      "info" : "ThrowStatement[14230-14327]:ThrowStatement[14389-14486]"
    }, {
      "left" : "throw new CompressorException(\"Compressor: \" + name + \" not found.\");",
      "right" : "throw new CompressorException(\"Compressor: \" + name + \" not found.\");",
      "info" : "ThrowStatement[14346-14415]:ThrowStatement[14505-14574]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14485-14531]:Block[14644-14690]"
    }, {
      "left" : "return decompressConcatenated;",
      "right" : "return decompressConcatenated;",
      "info" : "ReturnStatement[14495-14525]:ReturnStatement[14654-14684]"
    } ]
  },
  "interFileMappings" : { }
}