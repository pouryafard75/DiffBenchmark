{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "static final String DELEGATE_PROXY_SUFFIX =\n      ObjectType.createDelegateSuffix(\"Proxy\");",
      "right" : "static final String DELEGATE_PROXY_SUFFIX =\n      ObjectType.createDelegateSuffix(\"Proxy\");",
      "info" : "FieldDeclaration[5375-5549]:FieldDeclaration[5375-5549]"
    }, {
      "left" : "static final DiagnosticType MALFORMED_TYPEDEF =\n      DiagnosticType.warning(\n          \"JSC_MALFORMED_TYPEDEF\",\n          \"Typedef for {0} does not have any type information\");",
      "right" : "static final DiagnosticType MALFORMED_TYPEDEF =\n      DiagnosticType.warning(\n          \"JSC_MALFORMED_TYPEDEF\",\n          \"Typedef for {0} does not have any type information\");",
      "info" : "FieldDeclaration[5553-5730]:FieldDeclaration[5553-5730]"
    }, {
      "left" : "static final DiagnosticType ENUM_INITIALIZER =\n      DiagnosticType.warning(\n          \"JSC_ENUM_INITIALIZER_NOT_ENUM\",\n          \"enum initializer must be an object literal or an enum\");",
      "right" : "static final DiagnosticType ENUM_INITIALIZER =\n      DiagnosticType.warning(\n          \"JSC_ENUM_INITIALIZER_NOT_ENUM\",\n          \"enum initializer must be an object literal or an enum\");",
      "info" : "FieldDeclaration[5734-5921]:FieldDeclaration[5734-5921]"
    }, {
      "left" : "static final DiagnosticType CTOR_INITIALIZER =\n      DiagnosticType.warning(\n          \"JSC_CTOR_INITIALIZER_NOT_CTOR\",\n          \"Constructor {0} must be initialized at declaration\");",
      "right" : "static final DiagnosticType CTOR_INITIALIZER =\n      DiagnosticType.warning(\n          \"JSC_CTOR_INITIALIZER_NOT_CTOR\",\n          \"Constructor {0} must be initialized at declaration\");",
      "info" : "FieldDeclaration[5925-6109]:FieldDeclaration[5925-6109]"
    }, {
      "left" : "static final DiagnosticType IFACE_INITIALIZER =\n      DiagnosticType.warning(\n          \"JSC_IFACE_INITIALIZER_NOT_IFACE\",\n          \"Interface {0} must be initialized at declaration\");",
      "right" : "static final DiagnosticType IFACE_INITIALIZER =\n      DiagnosticType.warning(\n          \"JSC_IFACE_INITIALIZER_NOT_IFACE\",\n          \"Interface {0} must be initialized at declaration\");",
      "info" : "FieldDeclaration[6113-6298]:FieldDeclaration[6113-6298]"
    }, {
      "left" : "static final DiagnosticType CONSTRUCTOR_EXPECTED =\n      DiagnosticType.warning(\n          \"JSC_REFLECT_CONSTRUCTOR_EXPECTED\",\n          \"Constructor expected as first argument\");",
      "right" : "static final DiagnosticType CONSTRUCTOR_EXPECTED =\n      DiagnosticType.warning(\n          \"JSC_REFLECT_CONSTRUCTOR_EXPECTED\",\n          \"Constructor expected as first argument\");",
      "info" : "FieldDeclaration[6302-6481]:FieldDeclaration[6302-6481]"
    }, {
      "left" : "static final DiagnosticType UNKNOWN_LENDS =\n      DiagnosticType.warning(\n          \"JSC_UNKNOWN_LENDS\",\n          \"Variable {0} not declared before @lends annotation.\");",
      "right" : "static final DiagnosticType UNKNOWN_LENDS =\n      DiagnosticType.warning(\n          \"JSC_UNKNOWN_LENDS\",\n          \"Variable {0} not declared before @lends annotation.\");",
      "info" : "FieldDeclaration[6485-6655]:FieldDeclaration[6485-6655]"
    }, {
      "left" : "static final DiagnosticType LENDS_ON_NON_OBJECT =\n      DiagnosticType.warning(\n          \"JSC_LENDS_ON_NON_OBJECT\",\n          \"May only lend properties to object types. {0} has type {1}.\");",
      "right" : "static final DiagnosticType LENDS_ON_NON_OBJECT =\n      DiagnosticType.warning(\n          \"JSC_LENDS_ON_NON_OBJECT\",\n          \"May only lend properties to object types. {0} has type {1}.\");",
      "info" : "FieldDeclaration[6659-6849]:FieldDeclaration[6659-6849]"
    }, {
      "left" : "private final AbstractCompiler compiler;",
      "right" : "private final AbstractCompiler compiler;",
      "info" : "FieldDeclaration[6853-6893]:FieldDeclaration[6853-6893]"
    }, {
      "left" : "private final ErrorReporter typeParsingErrorReporter;",
      "right" : "private final ErrorReporter typeParsingErrorReporter;",
      "info" : "FieldDeclaration[6896-6949]:FieldDeclaration[6896-6949]"
    }, {
      "left" : "private final TypeValidator validator;",
      "right" : "private final TypeValidator validator;",
      "info" : "FieldDeclaration[6952-6990]:FieldDeclaration[6952-6990]"
    }, {
      "left" : "private final CodingConvention codingConvention;",
      "right" : "private final CodingConvention codingConvention;",
      "info" : "FieldDeclaration[6993-7041]:FieldDeclaration[6993-7041]"
    }, {
      "left" : "private final JSTypeRegistry typeRegistry;",
      "right" : "private final JSTypeRegistry typeRegistry;",
      "info" : "FieldDeclaration[7044-7086]:FieldDeclaration[7044-7086]"
    }, {
      "left" : "private final List<ObjectType> delegateProxyPrototypes = Lists.newArrayList();",
      "right" : "private final List<ObjectType> delegateProxyPrototypes = Lists.newArrayList();",
      "info" : "FieldDeclaration[7089-7167]:FieldDeclaration[7089-7167]"
    }, {
      "left" : "private final Map<String, String> delegateCallingConventions =\n      Maps.newHashMap();",
      "right" : "private final Map<String, String> delegateCallingConventions =\n      Maps.newHashMap();",
      "info" : "FieldDeclaration[7170-7257]:FieldDeclaration[7170-7257]"
    }, {
      "left" : "private final Map<Node, AstFunctionContents> functionAnalysisResults =\n      Maps.newHashMap();",
      "right" : "private final Map<Node, AstFunctionContents> functionAnalysisResults =\n      Maps.newHashMap();",
      "info" : "FieldDeclaration[7310-7405]:FieldDeclaration[7310-7405]"
    }, {
      "left" : "private final ObjectType unknownType;",
      "right" : "private final ObjectType unknownType;",
      "info" : "FieldDeclaration[7430-7467]:FieldDeclaration[7430-7467]"
    }, {
      "left" : "DeferredSetType",
      "right" : "DeferredSetType",
      "info" : "TypeDeclaration[7471-8144]:TypeDeclaration[7471-8144]"
    }, {
      "left" : "final Node node;",
      "right" : "final Node node;",
      "info" : "FieldDeclaration[7650-7666]:FieldDeclaration[7650-7666]"
    }, {
      "left" : "final JSType type;",
      "right" : "final JSType type;",
      "info" : "FieldDeclaration[7671-7689]:FieldDeclaration[7671-7689]"
    }, {
      "left" : "DeferredSetType(Node node, JSType type)",
      "right" : "DeferredSetType(Node node, JSType type)",
      "info" : "MethodDeclaration[7695-8032]:MethodDeclaration[7695-8032]"
    }, {
      "left" : "void resolve(Scope scope)",
      "right" : "void resolve(Scope scope)",
      "info" : "MethodDeclaration[8038-8140]:MethodDeclaration[8038-8140]"
    }, {
      "left" : "TypedScopeCreator(AbstractCompiler compiler)",
      "right" : "TypedScopeCreator(AbstractCompiler compiler)",
      "info" : "MethodDeclaration[8148-8250]:MethodDeclaration[8148-8250]"
    }, {
      "left" : "TypedScopeCreator(AbstractCompiler compiler,\n      CodingConvention codingConvention)",
      "right" : "TypedScopeCreator(AbstractCompiler compiler,\n      CodingConvention codingConvention)",
      "info" : "MethodDeclaration[8254-8663]:MethodDeclaration[8254-8663]"
    }, {
      "left" : "public Scope createScope(Node root, Scope parent)",
      "right" : "public Scope createScope(Node root, Scope parent)",
      "info" : "MethodDeclaration[8667-11114]:MethodDeclaration[8667-11114]"
    }, {
      "left" : "void patchGlobalScope(Scope globalScope, Node scriptRoot)",
      "right" : "void patchGlobalScope(Scope globalScope, Node scriptRoot)",
      "info" : "MethodDeclaration[11118-13086]:MethodDeclaration[11118-13086]"
    }, {
      "left" : "Scope createInitialScope(Node root)",
      "right" : "Scope createInitialScope(Node root)",
      "info" : "MethodDeclaration[13090-14603]:MethodDeclaration[13090-14603]"
    }, {
      "left" : "private void declareNativeFunctionType(Scope scope, JSTypeNative tId)",
      "right" : "private void declareNativeFunctionType(Scope scope, JSTypeNative tId)",
      "info" : "MethodDeclaration[14607-14911]:MethodDeclaration[14607-14911]"
    }, {
      "left" : "private void declareNativeValueType(Scope scope, String name,\n      JSTypeNative tId)",
      "right" : "private void declareNativeValueType(Scope scope, String name,\n      JSTypeNative tId)",
      "info" : "MethodDeclaration[14915-15075]:MethodDeclaration[14915-15075]"
    }, {
      "left" : "private static void declareNativeType(Scope scope, String name, JSType t)",
      "right" : "private static void declareNativeType(Scope scope, String name, JSType t)",
      "info" : "MethodDeclaration[15079-15205]:MethodDeclaration[15079-15205]"
    }, {
      "left" : "DiscoverEnumsAndTypedefs",
      "right" : "DiscoverEnumsAndTypedefs",
      "info" : "TypeDeclaration[15209-16598]:TypeDeclaration[15209-16598]"
    }, {
      "left" : "private final JSTypeRegistry registry;",
      "right" : "private final JSTypeRegistry registry;",
      "info" : "FieldDeclaration[15308-15346]:FieldDeclaration[15308-15346]"
    }, {
      "left" : "DiscoverEnumsAndTypedefs(JSTypeRegistry registry)",
      "right" : "DiscoverEnumsAndTypedefs(JSTypeRegistry registry)",
      "info" : "MethodDeclaration[15352-15441]:MethodDeclaration[15352-15441]"
    }, {
      "left" : "public void visit(NodeTraversal t, Node node, Node parent)",
      "right" : "public void visit(NodeTraversal t, Node node, Node parent)",
      "info" : "MethodDeclaration[15447-16172]:MethodDeclaration[15447-16172]"
    }, {
      "left" : "private void identifyNameNode(\n        Node nameNode, JSDocInfo info)",
      "right" : "private void identifyNameNode(\n        Node nameNode, JSDocInfo info)",
      "info" : "MethodDeclaration[16178-16594]:MethodDeclaration[16178-16594]"
    }, {
      "left" : "private JSType getNativeType(JSTypeNative nativeType)",
      "right" : "private JSType getNativeType(JSTypeNative nativeType)",
      "info" : "MethodDeclaration[16602-16712]:MethodDeclaration[16602-16712]"
    }, {
      "left" : "final Scope scope;",
      "right" : "final Scope scope;",
      "info" : "FieldDeclaration[16827-16899]:FieldDeclaration[16827-16899]"
    }, {
      "left" : "private final List<DeferredSetType> deferredSetTypes =\n        Lists.newArrayList();",
      "right" : "private final List<DeferredSetType> deferredSetTypes =\n        Lists.newArrayList();",
      "info" : "FieldDeclaration[16905-16989]:FieldDeclaration[16905-16989]"
    }, {
      "left" : "private final List<Node> nonExternFunctions = Lists.newArrayList();",
      "right" : "private final List<Node> nonExternFunctions = Lists.newArrayList();",
      "info" : "FieldDeclaration[16995-17149]:FieldDeclaration[16995-17149]"
    }, {
      "left" : "private List<Node> lentObjectLiterals = null;",
      "right" : "private List<Node> lentObjectLiterals = null;",
      "info" : "FieldDeclaration[17155-17611]:FieldDeclaration[17155-17611]"
    }, {
      "left" : "private final List<StubDeclaration> stubDeclarations =\n        Lists.newArrayList();",
      "right" : "private final List<StubDeclaration> stubDeclarations =\n        Lists.newArrayList();",
      "info" : "FieldDeclaration[17617-17871]:FieldDeclaration[17617-17871]"
    }, {
      "left" : "private String sourceName = null;",
      "right" : "private String sourceName = null;",
      "info" : "FieldDeclaration[17877-17972]:FieldDeclaration[17877-17972]"
    }, {
      "left" : "private InputId inputId;",
      "right" : "private InputId inputId;",
      "info" : "FieldDeclaration[17978-18058]:FieldDeclaration[17978-18058]"
    }, {
      "left" : "private AbstractScopeBuilder(Scope scope)",
      "right" : "private AbstractScopeBuilder(Scope scope)",
      "info" : "MethodDeclaration[18064-18139]:MethodDeclaration[18064-18139]"
    }, {
      "left" : "void setDeferredType(Node node, JSType type)",
      "right" : "void setDeferredType(Node node, JSType type)",
      "info" : "MethodDeclaration[18145-18258]:MethodDeclaration[18145-18258]"
    }, {
      "left" : "public void resolveTypes()",
      "right" : "public void resolveTypes()",
      "info" : "MethodDeclaration[18264-18785]:MethodDeclaration[18264-18785]"
    }, {
      "left" : "public final boolean shouldTraverse(NodeTraversal t, Node n, Node parent)",
      "right" : "public final boolean shouldTraverse(NodeTraversal t, Node n, Node parent)",
      "info" : "MethodDeclaration[18791-19823]:MethodDeclaration[18791-19823]"
    }, {
      "left" : "public void visit(NodeTraversal t, Node n, Node parent)",
      "right" : "public void visit(NodeTraversal t, Node n, Node parent)",
      "info" : "MethodDeclaration[19829-21559]:MethodDeclaration[19829-21559]"
    }, {
      "left" : "private void attachLiteralTypes(Node n)",
      "right" : "private void attachLiteralTypes(Node n)",
      "info" : "MethodDeclaration[21565-22753]:MethodDeclaration[21565-22753]"
    }, {
      "left" : "private void defineObjectLiteral(Node objectLit)",
      "right" : "private void defineObjectLiteral(Node objectLit)",
      "info" : "MethodDeclaration[22759-24398]:MethodDeclaration[22759-24398]"
    }, {
      "left" : "void processObjectLitProperties(\n        Node objLit, ObjectType objLitType,\n        boolean declareOnOwner)",
      "right" : "void processObjectLitProperties(\n        Node objLit, ObjectType objLitType,\n        boolean declareOnOwner)",
      "info" : "MethodDeclaration[24404-26077]:MethodDeclaration[24404-26077]"
    }, {
      "left" : "private JSType getDeclaredTypeInAnnotation(Node node, JSDocInfo info)",
      "right" : "private JSType getDeclaredTypeInAnnotation(Node node, JSDocInfo info)",
      "info" : "MethodDeclaration[26083-27671]:MethodDeclaration[26083-27671]"
    }, {
      "left" : "void assertDefinitionNode(Node n, int type)",
      "right" : "void assertDefinitionNode(Node n, int type)",
      "info" : "MethodDeclaration[27677-27977]:MethodDeclaration[27677-27977]"
    }, {
      "left" : "void defineCatch(Node n)",
      "right" : "void defineCatch(Node n)",
      "info" : "MethodDeclaration[27983-28268]:MethodDeclaration[27983-28268]"
    }, {
      "left" : "void defineVar(Node n)",
      "right" : "void defineVar(Node n)",
      "info" : "MethodDeclaration[28274-28859]:MethodDeclaration[28274-28859]"
    }, {
      "left" : "void defineFunctionLiteral(Node n)",
      "right" : "void defineFunctionLiteral(Node n)",
      "info" : "MethodDeclaration[28865-29753]:MethodDeclaration[28865-29753]"
    }, {
      "left" : "private void defineName(Node name, Node var, JSDocInfo info)",
      "right" : "private void defineName(Node name, Node var, JSDocInfo info)",
      "info" : "MethodDeclaration[29759-30467]:MethodDeclaration[29759-30467]"
    }, {
      "left" : "private boolean shouldUseFunctionLiteralType(\n        FunctionType type, JSDocInfo info, Node lValue)",
      "right" : "private boolean shouldUseFunctionLiteralType(\n        FunctionType type, JSDocInfo info, Node lValue)",
      "info" : "MethodDeclaration[30473-31127]:MethodDeclaration[30473-31127]"
    }, {
      "left" : "private FunctionType createFunctionTypeFromNodes(\n        @Nullable Node rValue,\n        @Nullable String name,\n        @Nullable JSDocInfo info,\n        @Nullable Node lvalueNode)",
      "right" : "private FunctionType createFunctionTypeFromNodes(\n        @Nullable Node rValue,\n        @Nullable String name,\n        @Nullable JSDocInfo info,\n        @Nullable Node lvalueNode)",
      "info" : "MethodDeclaration[31133-36717]:MethodDeclaration[31133-36717]"
    }, {
      "left" : "private ObjectType getPrototypeOwnerType(ObjectType ownerType)",
      "right" : "private ObjectType getPrototypeOwnerType(ObjectType ownerType)",
      "info" : "MethodDeclaration[36723-36935]:MethodDeclaration[36723-36935]"
    }, {
      "left" : "private FunctionType findOverriddenFunction(\n        ObjectType ownerType, String propName, TemplateTypeMap typeMap)",
      "right" : "private FunctionType findOverriddenFunction(\n        ObjectType ownerType, String propName, TemplateTypeMap typeMap)",
      "info" : "MethodDeclaration[36941-38103]:MethodDeclaration[36941-38103]"
    }, {
      "left" : "private EnumType createEnumTypeFromNodes(Node rValue, String name,\n        JSDocInfo info, Node lValueNode)",
      "right" : "private EnumType createEnumTypeFromNodes(Node rValue, String name,\n        JSDocInfo info, Node lValueNode)",
      "info" : "MethodDeclaration[38109-40429]:MethodDeclaration[38109-40429]"
    }, {
      "left" : "private void defineSlot(Node name, Node parent, JSType type)",
      "right" : "private void defineSlot(Node name, Node parent, JSType type)",
      "info" : "MethodDeclaration[40435-40959]:MethodDeclaration[40435-40959]"
    }, {
      "left" : "void defineSlot(Node n, Node parent, JSType type, boolean inferred)",
      "right" : "void defineSlot(Node n, Node parent, JSType type, boolean inferred)",
      "info" : "MethodDeclaration[40965-42143]:MethodDeclaration[40965-42143]"
    }, {
      "left" : "void defineSlot(Node n, Node parent, String variableName,\n        JSType type, boolean inferred)",
      "right" : "void defineSlot(Node n, Node parent, String variableName,\n        JSType type, boolean inferred)",
      "info" : "MethodDeclaration[42150-46422]:MethodDeclaration[42150-46422]"
    }, {
      "left" : "private void finishConstructorDefinition(\n        Node n, String variableName, FunctionType fnType,\n        Scope scopeToDeclareIn, CompilerInput input, Var newVar)",
      "right" : "private void finishConstructorDefinition(\n        Node n, String variableName, FunctionType fnType,\n        Scope scopeToDeclareIn, CompilerInput input, Var newVar)",
      "info" : "MethodDeclaration[46428-48362]:MethodDeclaration[46428-48362]"
    }, {
      "left" : "private boolean isQnameRootedInGlobalScope(Node n)",
      "right" : "private boolean isQnameRootedInGlobalScope(Node n)",
      "info" : "MethodDeclaration[48368-48608]:MethodDeclaration[48368-48608]"
    }, {
      "left" : "private Scope getQnameRootScope(Node n)",
      "right" : "private Scope getQnameRootScope(Node n)",
      "info" : "MethodDeclaration[48614-48961]:MethodDeclaration[48614-48961]"
    }, {
      "left" : "private JSType getDeclaredType(JSDocInfo info, Node lValue,\n        @Nullable Node rValue)",
      "right" : "private JSType getDeclaredType(JSDocInfo info, Node lValue,\n        @Nullable Node rValue)",
      "info" : "MethodDeclaration[48967-51652]:MethodDeclaration[48967-51652]"
    }, {
      "left" : "private FunctionType getFunctionType(@Nullable Var v)",
      "right" : "private FunctionType getFunctionType(@Nullable Var v)",
      "info" : "MethodDeclaration[51658-51869]:MethodDeclaration[51658-51869]"
    }, {
      "left" : "private void checkForCallingConventionDefiningCalls(\n        Node n, Map<String, String> delegateCallingConventions)",
      "right" : "private void checkForCallingConventionDefiningCalls(\n        Node n, Map<String, String> delegateCallingConventions)",
      "info" : "MethodDeclaration[51875-52190]:MethodDeclaration[51875-52190]"
    }, {
      "left" : "private void checkForClassDefiningCalls(NodeTraversal t, Node n)",
      "right" : "private void checkForClassDefiningCalls(NodeTraversal t, Node n)",
      "info" : "MethodDeclaration[52196-55402]:MethodDeclaration[52196-55402]"
    }, {
      "left" : "private void applyDelegateRelationship(\n        DelegateRelationship delegateRelationship)",
      "right" : "private void applyDelegateRelationship(\n        DelegateRelationship delegateRelationship)",
      "info" : "MethodDeclaration[55408-57325]:MethodDeclaration[55408-57325]"
    }, {
      "left" : "void maybeDeclareQualifiedName(NodeTraversal t, JSDocInfo info,\n        Node n, Node parent, Node rhsValue)",
      "right" : "void maybeDeclareQualifiedName(NodeTraversal t, JSDocInfo info,\n        Node n, Node parent, Node rhsValue)",
      "info" : "MethodDeclaration[57331-62405]:MethodDeclaration[57331-62405]"
    }, {
      "left" : "private boolean isConstantSymbol(JSDocInfo info, Node node)",
      "right" : "private boolean isConstantSymbol(JSDocInfo info, Node node)",
      "info" : "MethodDeclaration[65139-65667]:MethodDeclaration[65442-65970]"
    }, {
      "left" : "private ObjectType getObjectSlot(String slotName)",
      "right" : "private ObjectType getObjectSlot(String slotName)",
      "info" : "MethodDeclaration[65673-66221]:MethodDeclaration[65976-66524]"
    }, {
      "left" : "void resolveStubDeclarations()",
      "right" : "void resolveStubDeclarations()",
      "info" : "MethodDeclaration[66227-67459]:MethodDeclaration[66530-67762]"
    }, {
      "left" : "CollectProperties",
      "right" : "CollectProperties",
      "info" : "TypeDeclaration[67465-69750]:TypeDeclaration[67768-70053]"
    }, {
      "left" : "private final JSType thisType;",
      "right" : "private final JSType thisType;",
      "info" : "FieldDeclaration[67686-67716]:FieldDeclaration[67989-68019]"
    }, {
      "left" : "CollectProperties(JSType thisType)",
      "right" : "CollectProperties(JSType thisType)",
      "info" : "MethodDeclaration[67724-67802]:MethodDeclaration[68027-68105]"
    }, {
      "left" : "public void visit(NodeTraversal t, Node n, Node parent)",
      "right" : "public void visit(NodeTraversal t, Node n, Node parent)",
      "info" : "MethodDeclaration[67810-68287]:MethodDeclaration[68113-68590]"
    }, {
      "left" : "private void maybeCollectMember(Node member,\n          Node nodeWithJsDocInfo, @Nullable Node value)",
      "right" : "private void maybeCollectMember(Node member,\n          Node nodeWithJsDocInfo, @Nullable Node value)",
      "info" : "MethodDeclaration[68295-69744]:MethodDeclaration[68598-70047]"
    }, {
      "left" : "StubDeclaration",
      "right" : "StubDeclaration",
      "info" : "TypeDeclaration[69783-70172]:TypeDeclaration[70086-70475]"
    }, {
      "left" : "private final Node node;",
      "right" : "private final Node node;",
      "info" : "FieldDeclaration[69898-69922]:FieldDeclaration[70201-70225]"
    }, {
      "left" : "private final boolean isExtern;",
      "right" : "private final boolean isExtern;",
      "info" : "FieldDeclaration[69927-69958]:FieldDeclaration[70230-70261]"
    }, {
      "left" : "private final String ownerName;",
      "right" : "private final String ownerName;",
      "info" : "FieldDeclaration[69963-69994]:FieldDeclaration[70266-70297]"
    }, {
      "left" : "private StubDeclaration(Node node, boolean isExtern, String ownerName)",
      "right" : "private StubDeclaration(Node node, boolean isExtern, String ownerName)",
      "info" : "MethodDeclaration[70000-70168]:MethodDeclaration[70303-70471]"
    }, {
      "left" : "GlobalScopeBuilder",
      "right" : "GlobalScopeBuilder",
      "info" : "TypeDeclaration[70176-72372]:TypeDeclaration[70479-72675]"
    }, {
      "left" : "private GlobalScopeBuilder(Scope scope)",
      "right" : "private GlobalScopeBuilder(Scope scope)",
      "info" : "MethodDeclaration[70362-70429]:MethodDeclaration[70665-70732]"
    }, {
      "left" : "public void visit(NodeTraversal t, Node n, Node parent)",
      "right" : "public void visit(NodeTraversal t, Node n, Node parent)",
      "info" : "MethodDeclaration[70435-71009]:MethodDeclaration[70738-71312]"
    }, {
      "left" : "void maybeDeclareQualifiedName(\n        NodeTraversal t, JSDocInfo info,\n        Node n, Node parent, Node rhsValue)",
      "right" : "void maybeDeclareQualifiedName(\n        NodeTraversal t, JSDocInfo info,\n        Node n, Node parent, Node rhsValue)",
      "info" : "MethodDeclaration[71015-71257]:MethodDeclaration[71318-71560]"
    }, {
      "left" : "private void checkForTypedef(\n        NodeTraversal t, Node candidate, JSDocInfo info)",
      "right" : "private void checkForTypedef(\n        NodeTraversal t, Node candidate, JSDocInfo info)",
      "info" : "MethodDeclaration[71263-72368]:MethodDeclaration[71566-72671]"
    }, {
      "left" : "LocalScopeBuilder",
      "right" : "LocalScopeBuilder",
      "info" : "TypeDeclaration[72402-76756]:TypeDeclaration[72705-77059]"
    }, {
      "left" : "private LocalScopeBuilder(Scope scope)",
      "right" : "private LocalScopeBuilder(Scope scope)",
      "info" : "MethodDeclaration[72577-72710]:MethodDeclaration[72880-73013]"
    }, {
      "left" : "void build()",
      "right" : "void build()",
      "info" : "MethodDeclaration[72716-73521]:MethodDeclaration[73019-73824]"
    }, {
      "left" : "public void visit(NodeTraversal t, Node n, Node parent)",
      "right" : "public void visit(NodeTraversal t, Node n, Node parent)",
      "info" : "MethodDeclaration[73527-74078]:MethodDeclaration[73830-74381]"
    }, {
      "left" : "private void handleFunctionInputs(Node fnNode)",
      "right" : "private void handleFunctionInputs(Node fnNode)",
      "info" : "MethodDeclaration[74084-74949]:MethodDeclaration[74387-75252]"
    }, {
      "left" : "private void declareArguments(Node functionNode)",
      "right" : "private void declareArguments(Node functionNode)",
      "info" : "MethodDeclaration[74955-76728]:MethodDeclaration[75258-77031]"
    }, {
      "left" : "FirstOrderFunctionAnalyzer",
      "right" : "FirstOrderFunctionAnalyzer",
      "info" : "TypeDeclaration[76785-79722]:TypeDeclaration[77088-80025]"
    }, {
      "left" : "private final AbstractCompiler compiler;",
      "right" : "private final AbstractCompiler compiler;",
      "info" : "FieldDeclaration[77053-77093]:FieldDeclaration[77356-77396]"
    }, {
      "left" : "private final Map<Node, AstFunctionContents> data;",
      "right" : "private final Map<Node, AstFunctionContents> data;",
      "info" : "FieldDeclaration[77098-77148]:FieldDeclaration[77401-77451]"
    }, {
      "left" : "FirstOrderFunctionAnalyzer(\n        AbstractCompiler compiler, Map<Node, AstFunctionContents> outParam)",
      "right" : "FirstOrderFunctionAnalyzer(\n        AbstractCompiler compiler, Map<Node, AstFunctionContents> outParam)",
      "info" : "MethodDeclaration[77154-77325]:MethodDeclaration[77457-77628]"
    }, {
      "left" : "public void process(Node externs, Node root)",
      "right" : "public void process(Node externs, Node root)",
      "info" : "MethodDeclaration[77331-77598]:MethodDeclaration[77634-77901]"
    }, {
      "left" : "public void enterScope(NodeTraversal t)",
      "right" : "public void enterScope(NodeTraversal t)",
      "info" : "MethodDeclaration[77604-77785]:MethodDeclaration[77907-78088]"
    }, {
      "left" : "public void visit(NodeTraversal t, Node n, Node parent)",
      "right" : "public void visit(NodeTraversal t, Node n, Node parent)",
      "info" : "MethodDeclaration[77791-79718]:MethodDeclaration[78094-80021]"
    }, {
      "left" : "private AstFunctionContents getFunctionAnalysisResults(@Nullable Node n)",
      "right" : "private AstFunctionContents getFunctionAnalysisResults(@Nullable Node n)",
      "info" : "MethodDeclaration[79726-80013]:MethodDeclaration[80029-80316]"
    } ],
    "mappings" : [
 {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[7614-7621]:Modifier[7614-7621]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[7622-7627]:TYPE_DECLARATION_KIND[7622-7627]"
    }, {
      "left" : "DeferredSetType",
      "right" : "DeferredSetType",
      "info" : "SimpleName[7628-7643]:SimpleName[7628-7643]"
    }, {
      "left" : "DeferredSetType",
      "right" : "DeferredSetType",
      "info" : "SimpleName[7695-7710]:SimpleName[7695-7710]"
    }, {
      "left" : "Node node",
      "right" : "Node node",
      "info" : "SingleVariableDeclaration[7711-7720]:SingleVariableDeclaration[7711-7720]"
    }, {
      "left" : "JSType type",
      "right" : "JSType type",
      "info" : "SingleVariableDeclaration[7722-7733]:SingleVariableDeclaration[7722-7733]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7735-8032]:Block[7735-8032]"
    }, {
      "left" : "Preconditions.checkNotNull(node);",
      "right" : "Preconditions.checkNotNull(node);",
      "info" : "ExpressionStatement[7743-7776]:ExpressionStatement[7743-7776]"
    }, {
      "left" : "Preconditions.checkNotNull(type);",
      "right" : "Preconditions.checkNotNull(type);",
      "info" : "ExpressionStatement[7783-7816]:ExpressionStatement[7783-7816]"
    }, {
      "left" : "this.node = node;",
      "right" : "this.node = node;",
      "info" : "ExpressionStatement[7823-7840]:ExpressionStatement[7823-7840]"
    }, {
      "left" : "this.type = type;",
      "right" : "this.type = type;",
      "info" : "ExpressionStatement[7847-7864]:ExpressionStatement[7847-7864]"
    }, {
      "left" : "node.setJSType(type);",
      "right" : "node.setJSType(type);",
      "info" : "ExpressionStatement[8005-8026]:ExpressionStatement[8005-8026]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[8038-8042]:PrimitiveType[8038-8042]"
    }, {
      "left" : "resolve",
      "right" : "resolve",
      "info" : "SimpleName[8043-8050]:SimpleName[8043-8050]"
    }, {
      "left" : "Scope scope",
      "right" : "Scope scope",
      "info" : "SingleVariableDeclaration[8051-8062]:SingleVariableDeclaration[8051-8062]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8064-8140]:Block[8064-8140]"
    }, {
      "left" : "node.setJSType(type.resolve(typeParsingErrorReporter, scope));",
      "right" : "node.setJSType(type.resolve(typeParsingErrorReporter, scope));",
      "info" : "ExpressionStatement[8072-8134]:ExpressionStatement[8072-8134]"
    }, {
      "left" : "TypedScopeCreator",
      "right" : "TypedScopeCreator",
      "info" : "SimpleName[8148-8165]:SimpleName[8148-8165]"
    }, {
      "left" : "AbstractCompiler compiler",
      "right" : "AbstractCompiler compiler",
      "info" : "SingleVariableDeclaration[8166-8191]:SingleVariableDeclaration[8166-8191]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8193-8250]:Block[8193-8250]"
    }, {
      "left" : "this(compiler, compiler.getCodingConvention());",
      "right" : "this(compiler, compiler.getCodingConvention());",
      "info" : "ConstructorInvocation[8199-8246]:ConstructorInvocation[8199-8246]"
    }, {
      "left" : "TypedScopeCreator",
      "right" : "TypedScopeCreator",
      "info" : "SimpleName[8254-8271]:SimpleName[8254-8271]"
    }, {
      "left" : "AbstractCompiler compiler",
      "right" : "AbstractCompiler compiler",
      "info" : "SingleVariableDeclaration[8272-8297]:SingleVariableDeclaration[8272-8297]"
    }, {
      "left" : "CodingConvention codingConvention",
      "right" : "CodingConvention codingConvention",
      "info" : "SingleVariableDeclaration[8305-8338]:SingleVariableDeclaration[8305-8338]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8340-8663]:Block[8340-8663]"
    }, {
      "left" : "this.compiler = compiler;",
      "right" : "this.compiler = compiler;",
      "info" : "ExpressionStatement[8346-8371]:ExpressionStatement[8346-8371]"
    }, {
      "left" : "this.validator = compiler.getTypeValidator();",
      "right" : "this.validator = compiler.getTypeValidator();",
      "info" : "ExpressionStatement[8376-8421]:ExpressionStatement[8376-8421]"
    }, {
      "left" : "this.codingConvention = codingConvention;",
      "right" : "this.codingConvention = codingConvention;",
      "info" : "ExpressionStatement[8426-8467]:ExpressionStatement[8426-8467]"
    }, {
      "left" : "this.typeRegistry = compiler.getTypeRegistry();",
      "right" : "this.typeRegistry = compiler.getTypeRegistry();",
      "info" : "ExpressionStatement[8472-8519]:ExpressionStatement[8472-8519]"
    }, {
      "left" : "this.typeParsingErrorReporter = typeRegistry.getErrorReporter();",
      "right" : "this.typeParsingErrorReporter = typeRegistry.getErrorReporter();",
      "info" : "ExpressionStatement[8524-8588]:ExpressionStatement[8524-8588]"
    }, {
      "left" : "this.unknownType = typeRegistry.getNativeObjectType(UNKNOWN_TYPE);",
      "right" : "this.unknownType = typeRegistry.getNativeObjectType(UNKNOWN_TYPE);",
      "info" : "ExpressionStatement[8593-8659]:ExpressionStatement[8593-8659]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[8804-8813]:MarkerAnnotation[8804-8813]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[8816-8822]:Modifier[8816-8822]"
    }, {
      "left" : "Scope",
      "right" : "Scope",
      "info" : "SimpleType[8823-8828]:SimpleType[8823-8828]"
    }, {
      "left" : "createScope",
      "right" : "createScope",
      "info" : "SimpleName[8829-8840]:SimpleName[8829-8840]"
    }, {
      "left" : "Node root",
      "right" : "Node root",
      "info" : "SingleVariableDeclaration[8841-8850]:SingleVariableDeclaration[8841-8850]"
    }, {
      "left" : "Scope parent",
      "right" : "Scope parent",
      "info" : "SingleVariableDeclaration[8852-8864]:SingleVariableDeclaration[8852-8864]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8866-11114]:Block[8866-11114]"
    }, {
      "left" : "Scope newScope = null;",
      "right" : "Scope newScope = null;",
      "info" : "VariableDeclarationStatement[9061-9083]:VariableDeclarationStatement[9061-9083]"
    }, {
      "left" : "AbstractScopeBuilder scopeBuilder = null;",
      "right" : "AbstractScopeBuilder scopeBuilder = null;",
      "info" : "VariableDeclarationStatement[9088-9129]:VariableDeclarationStatement[9088-9129]"
    }, {
      "left" : "if (parent == null)",
      "right" : "if (parent == null)",
      "info" : "IfStatement[9134-10169]:IfStatement[9134-10169]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9154-9964]:Block[9154-9964]"
    }, {
      "left" : "JSType globalThis =\n          typeRegistry.getNativeObjectType(JSTypeNative.GLOBAL_THIS);",
      "right" : "JSType globalThis =\n          typeRegistry.getNativeObjectType(JSTypeNative.GLOBAL_THIS);",
      "info" : "VariableDeclarationStatement[9162-9251]:VariableDeclarationStatement[9162-9251]"
    }, {
      "left" : "root.setJSType(globalThis);",
      "right" : "root.setJSType(globalThis);",
      "info" : "ExpressionStatement[9359-9386]:ExpressionStatement[9359-9386]"
    }, {
      "left" : "root.getFirstChild().setJSType(globalThis);",
      "right" : "root.getFirstChild().setJSType(globalThis);",
      "info" : "ExpressionStatement[9393-9436]:ExpressionStatement[9393-9436]"
    }, {
      "left" : "root.getLastChild().setJSType(globalThis);",
      "right" : "root.getLastChild().setJSType(globalThis);",
      "info" : "ExpressionStatement[9443-9485]:ExpressionStatement[9443-9485]"
    }, {
      "left" : "(new FirstOrderFunctionAnalyzer(compiler, functionAnalysisResults))\n          .process(root.getFirstChild(), root.getLastChild());",
      "right" : "(new FirstOrderFunctionAnalyzer(compiler, functionAnalysisResults))\n          .process(root.getFirstChild(), root.getLastChild());",
      "info" : "ExpressionStatement[9551-9681]:ExpressionStatement[9551-9681]"
    }, {
      "left" : "newScope = createInitialScope(root);",
      "right" : "newScope = createInitialScope(root);",
      "info" : "ExpressionStatement[9740-9776]:ExpressionStatement[9740-9776]"
    }, {
      "left" : "GlobalScopeBuilder globalScopeBuilder = new GlobalScopeBuilder(newScope);",
      "right" : "GlobalScopeBuilder globalScopeBuilder = new GlobalScopeBuilder(newScope);",
      "info" : "VariableDeclarationStatement[9784-9857]:VariableDeclarationStatement[9784-9857]"
    }, {
      "left" : "scopeBuilder = globalScopeBuilder;",
      "right" : "scopeBuilder = globalScopeBuilder;",
      "info" : "ExpressionStatement[9864-9898]:ExpressionStatement[9864-9898]"
    }, {
      "left" : "NodeTraversal.traverse(compiler, root, scopeBuilder);",
      "right" : "NodeTraversal.traverse(compiler, root, scopeBuilder);",
      "info" : "ExpressionStatement[9905-9958]:ExpressionStatement[9905-9958]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9970-10169]:Block[9970-10169]"
    }, {
      "left" : "newScope = new Scope(parent, root);",
      "right" : "newScope = new Scope(parent, root);",
      "info" : "ExpressionStatement[9978-10013]:ExpressionStatement[9978-10013]"
    }, {
      "left" : "LocalScopeBuilder localScopeBuilder = new LocalScopeBuilder(newScope);",
      "right" : "LocalScopeBuilder localScopeBuilder = new LocalScopeBuilder(newScope);",
      "info" : "VariableDeclarationStatement[10020-10090]:VariableDeclarationStatement[10020-10090]"
    }, {
      "left" : "scopeBuilder = localScopeBuilder;",
      "right" : "scopeBuilder = localScopeBuilder;",
      "info" : "ExpressionStatement[10097-10130]:ExpressionStatement[10097-10130]"
    }, {
      "left" : "localScopeBuilder.build();",
      "right" : "localScopeBuilder.build();",
      "info" : "ExpressionStatement[10137-10163]:ExpressionStatement[10137-10163]"
    }, {
      "left" : "scopeBuilder.resolveStubDeclarations();",
      "right" : "scopeBuilder.resolveStubDeclarations();",
      "info" : "ExpressionStatement[10175-10214]:ExpressionStatement[10175-10214]"
    }, {
      "left" : "for (Node functionNode : scopeBuilder.nonExternFunctions)",
      "right" : "for (Node functionNode : scopeBuilder.nonExternFunctions)",
      "info" : "EnhancedForStatement[10382-10850]:EnhancedForStatement[10382-10850]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10440-10850]:Block[10440-10850]"
    }, {
      "left" : "JSType type = functionNode.getJSType();",
      "right" : "JSType type = functionNode.getJSType();",
      "info" : "VariableDeclarationStatement[10448-10487]:VariableDeclarationStatement[10448-10487]"
    }, {
      "left" : "if (type != null && type.isFunctionType())",
      "right" : "if (type != null && type.isFunctionType())",
      "info" : "IfStatement[10494-10844]:IfStatement[10494-10844]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10537-10844]:Block[10537-10844]"
    }, {
      "left" : "FunctionType fnType = type.toMaybeFunctionType();",
      "right" : "FunctionType fnType = type.toMaybeFunctionType();",
      "info" : "VariableDeclarationStatement[10547-10596]:VariableDeclarationStatement[10547-10596]"
    }, {
      "left" : "JSType fnThisType = fnType.getTypeOfThis();",
      "right" : "JSType fnThisType = fnType.getTypeOfThis();",
      "info" : "VariableDeclarationStatement[10605-10648]:VariableDeclarationStatement[10605-10648]"
    }, {
      "left" : "if (!fnThisType.isUnknownType())",
      "right" : "if (!fnThisType.isUnknownType())",
      "info" : "IfStatement[10657-10836]:IfStatement[10657-10836]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10690-10836]:Block[10690-10836]"
    }, {
      "left" : "NodeTraversal.traverse(compiler, functionNode.getLastChild(),\n              scopeBuilder.new CollectProperties(fnThisType));",
      "right" : "NodeTraversal.traverse(compiler, functionNode.getLastChild(),\n              scopeBuilder.new CollectProperties(fnThisType));",
      "info" : "ExpressionStatement[10702-10826]:ExpressionStatement[10702-10826]"
    }, {
      "left" : "if (parent == null)",
      "right" : "if (parent == null)",
      "info" : "IfStatement[10856-11044]:IfStatement[10856-11044]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10876-11044]:Block[10876-11044]"
    }, {
      "left" : "codingConvention.defineDelegateProxyPrototypeProperties(\n          typeRegistry, newScope, delegateProxyPrototypes,\n          delegateCallingConventions);",
      "right" : "codingConvention.defineDelegateProxyPrototypeProperties(\n          typeRegistry, newScope, delegateProxyPrototypes,\n          delegateCallingConventions);",
      "info" : "ExpressionStatement[10884-11038]:ExpressionStatement[10884-11038]"
    }, {
      "left" : "newScope.setTypeResolver(scopeBuilder);",
      "right" : "newScope.setTypeResolver(scopeBuilder);",
      "info" : "ExpressionStatement[11050-11089]:ExpressionStatement[11050-11089]"
    }, {
      "left" : "return newScope;",
      "right" : "return newScope;",
      "info" : "ReturnStatement[11094-11110]:ReturnStatement[11094-11110]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[11403-11407]:PrimitiveType[11403-11407]"
    }, {
      "left" : "patchGlobalScope",
      "right" : "patchGlobalScope",
      "info" : "SimpleName[11408-11424]:SimpleName[11408-11424]"
    }, {
      "left" : "Scope globalScope",
      "right" : "Scope globalScope",
      "info" : "SingleVariableDeclaration[11425-11442]:SingleVariableDeclaration[11425-11442]"
    }, {
      "left" : "Node scriptRoot",
      "right" : "Node scriptRoot",
      "info" : "SingleVariableDeclaration[11444-11459]:SingleVariableDeclaration[11444-11459]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11461-13086]:Block[11461-13086]"
    }, {
      "left" : "Preconditions.checkState(scriptRoot.isScript());",
      "right" : "Preconditions.checkState(scriptRoot.isScript());",
      "info" : "ExpressionStatement[11616-11664]:ExpressionStatement[11616-11664]"
    }, {
      "left" : "Preconditions.checkNotNull(globalScope);",
      "right" : "Preconditions.checkNotNull(globalScope);",
      "info" : "ExpressionStatement[11669-11709]:ExpressionStatement[11669-11709]"
    }, {
      "left" : "Preconditions.checkState(globalScope.isGlobal());",
      "right" : "Preconditions.checkState(globalScope.isGlobal());",
      "info" : "ExpressionStatement[11714-11763]:ExpressionStatement[11714-11763]"
    }, {
      "left" : "String scriptName = NodeUtil.getSourceName(scriptRoot);",
      "right" : "String scriptName = NodeUtil.getSourceName(scriptRoot);",
      "info" : "VariableDeclarationStatement[11769-11824]:VariableDeclarationStatement[11769-11824]"
    }, {
      "left" : "Preconditions.checkNotNull(scriptName);",
      "right" : "Preconditions.checkNotNull(scriptName);",
      "info" : "ExpressionStatement[11829-11868]:ExpressionStatement[11829-11868]"
    }, {
      "left" : "for (Node node : ImmutableList.copyOf(functionAnalysisResults.keySet()))",
      "right" : "for (Node node : ImmutableList.copyOf(functionAnalysisResults.keySet()))",
      "info" : "EnhancedForStatement[11873-12068]:EnhancedForStatement[11873-12068]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11946-12068]:Block[11946-12068]"
    }, {
      "left" : "if (scriptName.equals(NodeUtil.getSourceName(node)))",
      "right" : "if (scriptName.equals(NodeUtil.getSourceName(node)))",
      "info" : "IfStatement[11954-12062]:IfStatement[11954-12062]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12007-12062]:Block[12007-12062]"
    }, {
      "left" : "functionAnalysisResults.remove(node);",
      "right" : "functionAnalysisResults.remove(node);",
      "info" : "ExpressionStatement[12017-12054]:ExpressionStatement[12017-12054]"
    }, {
      "left" : "(new FirstOrderFunctionAnalyzer(\n        compiler, functionAnalysisResults)).process(null, scriptRoot);",
      "right" : "(new FirstOrderFunctionAnalyzer(\n        compiler, functionAnalysisResults)).process(null, scriptRoot);",
      "info" : "ExpressionStatement[12074-12177]:ExpressionStatement[12074-12177]"
    }, {
      "left" : "Iterator<Var> varIter = globalScope.getVars();",
      "right" : "Iterator<Var> varIter = globalScope.getVars();",
      "info" : "VariableDeclarationStatement[12480-12526]:VariableDeclarationStatement[12480-12526]"
    }, {
      "left" : "List<Var> varsToRemove = Lists.newArrayList();",
      "right" : "List<Var> varsToRemove = Lists.newArrayList();",
      "info" : "VariableDeclarationStatement[12531-12577]:VariableDeclarationStatement[12531-12577]"
    }, {
      "left" : "while (varIter.hasNext())",
      "right" : "while (varIter.hasNext())",
      "info" : "WhileStatement[12582-12746]:WhileStatement[12582-12746]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12608-12746]:Block[12608-12746]"
    }, {
      "left" : "Var oldVar = varIter.next();",
      "right" : "Var oldVar = varIter.next();",
      "info" : "VariableDeclarationStatement[12616-12644]:VariableDeclarationStatement[12616-12644]"
    }, {
      "left" : "if (scriptName.equals(oldVar.getInputName()))",
      "right" : "if (scriptName.equals(oldVar.getInputName()))",
      "info" : "IfStatement[12651-12740]:IfStatement[12651-12740]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12697-12740]:Block[12697-12740]"
    }, {
      "left" : "varsToRemove.add(oldVar);",
      "right" : "varsToRemove.add(oldVar);",
      "info" : "ExpressionStatement[12707-12732]:ExpressionStatement[12707-12732]"
    }, {
      "left" : "for (Var var : varsToRemove)",
      "right" : "for (Var var : varsToRemove)",
      "info" : "EnhancedForStatement[12751-12901]:EnhancedForStatement[12751-12901]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12780-12901]:Block[12780-12901]"
    }, {
      "left" : "globalScope.undeclare(var);",
      "right" : "globalScope.undeclare(var);",
      "info" : "ExpressionStatement[12788-12815]:ExpressionStatement[12788-12815]"
    }, {
      "left" : "globalScope.getTypeOfThis().toObjectType().removeProperty(var.getName());",
      "right" : "globalScope.getTypeOfThis().toObjectType().removeProperty(var.getName());",
      "info" : "ExpressionStatement[12822-12895]:ExpressionStatement[12822-12895]"
    }, {
      "left" : "GlobalScopeBuilder scopeBuilder = new GlobalScopeBuilder(globalScope);",
      "right" : "GlobalScopeBuilder scopeBuilder = new GlobalScopeBuilder(globalScope);",
      "info" : "VariableDeclarationStatement[12948-13018]:VariableDeclarationStatement[12948-13018]"
    }, {
      "left" : "NodeTraversal.traverse(compiler, scriptRoot, scopeBuilder);",
      "right" : "NodeTraversal.traverse(compiler, scriptRoot, scopeBuilder);",
      "info" : "ExpressionStatement[13023-13082]:ExpressionStatement[13023-13082]"
    }, {
      "left" : "@VisibleForTesting",
      "right" : "@VisibleForTesting",
      "info" : "MarkerAnnotation[13218-13236]:MarkerAnnotation[13218-13236]"
    }, {
      "left" : "Scope",
      "right" : "Scope",
      "info" : "SimpleType[13239-13244]:SimpleType[13239-13244]"
    }, {
      "left" : "createInitialScope",
      "right" : "createInitialScope",
      "info" : "SimpleName[13245-13263]:SimpleName[13245-13263]"
    }, {
      "left" : "Node root",
      "right" : "Node root",
      "info" : "SingleVariableDeclaration[13264-13273]:SingleVariableDeclaration[13264-13273]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13275-14603]:Block[13275-14603]"
    }, {
      "left" : "NodeTraversal.traverse(\n        compiler, root, new DiscoverEnumsAndTypedefs(typeRegistry));",
      "right" : "NodeTraversal.traverse(\n        compiler, root, new DiscoverEnumsAndTypedefs(typeRegistry));",
      "info" : "ExpressionStatement[13282-13374]:ExpressionStatement[13282-13374]"
    }, {
      "left" : "Scope s = Scope.createGlobalScope(root);",
      "right" : "Scope s = Scope.createGlobalScope(root);",
      "info" : "VariableDeclarationStatement[13380-13420]:VariableDeclarationStatement[13380-13420]"
    }, {
      "left" : "declareNativeFunctionType(s, ARRAY_FUNCTION_TYPE);",
      "right" : "declareNativeFunctionType(s, ARRAY_FUNCTION_TYPE);",
      "info" : "ExpressionStatement[13425-13475]:ExpressionStatement[13425-13475]"
    }, {
      "left" : "declareNativeFunctionType(s, BOOLEAN_OBJECT_FUNCTION_TYPE);",
      "right" : "declareNativeFunctionType(s, BOOLEAN_OBJECT_FUNCTION_TYPE);",
      "info" : "ExpressionStatement[13480-13539]:ExpressionStatement[13480-13539]"
    }, {
      "left" : "declareNativeFunctionType(s, DATE_FUNCTION_TYPE);",
      "right" : "declareNativeFunctionType(s, DATE_FUNCTION_TYPE);",
      "info" : "ExpressionStatement[13544-13593]:ExpressionStatement[13544-13593]"
    }, {
      "left" : "declareNativeFunctionType(s, ERROR_FUNCTION_TYPE);",
      "right" : "declareNativeFunctionType(s, ERROR_FUNCTION_TYPE);",
      "info" : "ExpressionStatement[13598-13648]:ExpressionStatement[13598-13648]"
    }, {
      "left" : "declareNativeFunctionType(s, EVAL_ERROR_FUNCTION_TYPE);",
      "right" : "declareNativeFunctionType(s, EVAL_ERROR_FUNCTION_TYPE);",
      "info" : "ExpressionStatement[13653-13708]:ExpressionStatement[13653-13708]"
    }, {
      "left" : "declareNativeFunctionType(s, FUNCTION_FUNCTION_TYPE);",
      "right" : "declareNativeFunctionType(s, FUNCTION_FUNCTION_TYPE);",
      "info" : "ExpressionStatement[13713-13766]:ExpressionStatement[13713-13766]"
    }, {
      "left" : "declareNativeFunctionType(s, NUMBER_OBJECT_FUNCTION_TYPE);",
      "right" : "declareNativeFunctionType(s, NUMBER_OBJECT_FUNCTION_TYPE);",
      "info" : "ExpressionStatement[13771-13829]:ExpressionStatement[13771-13829]"
    }, {
      "left" : "declareNativeFunctionType(s, OBJECT_FUNCTION_TYPE);",
      "right" : "declareNativeFunctionType(s, OBJECT_FUNCTION_TYPE);",
      "info" : "ExpressionStatement[13834-13885]:ExpressionStatement[13834-13885]"
    }, {
      "left" : "declareNativeFunctionType(s, RANGE_ERROR_FUNCTION_TYPE);",
      "right" : "declareNativeFunctionType(s, RANGE_ERROR_FUNCTION_TYPE);",
      "info" : "ExpressionStatement[13890-13946]:ExpressionStatement[13890-13946]"
    }, {
      "left" : "declareNativeFunctionType(s, REFERENCE_ERROR_FUNCTION_TYPE);",
      "right" : "declareNativeFunctionType(s, REFERENCE_ERROR_FUNCTION_TYPE);",
      "info" : "ExpressionStatement[13951-14011]:ExpressionStatement[13951-14011]"
    }, {
      "left" : "declareNativeFunctionType(s, REGEXP_FUNCTION_TYPE);",
      "right" : "declareNativeFunctionType(s, REGEXP_FUNCTION_TYPE);",
      "info" : "ExpressionStatement[14016-14067]:ExpressionStatement[14016-14067]"
    }, {
      "left" : "declareNativeFunctionType(s, STRING_OBJECT_FUNCTION_TYPE);",
      "right" : "declareNativeFunctionType(s, STRING_OBJECT_FUNCTION_TYPE);",
      "info" : "ExpressionStatement[14072-14130]:ExpressionStatement[14072-14130]"
    }, {
      "left" : "declareNativeFunctionType(s, SYNTAX_ERROR_FUNCTION_TYPE);",
      "right" : "declareNativeFunctionType(s, SYNTAX_ERROR_FUNCTION_TYPE);",
      "info" : "ExpressionStatement[14135-14192]:ExpressionStatement[14135-14192]"
    }, {
      "left" : "declareNativeFunctionType(s, TYPE_ERROR_FUNCTION_TYPE);",
      "right" : "declareNativeFunctionType(s, TYPE_ERROR_FUNCTION_TYPE);",
      "info" : "ExpressionStatement[14197-14252]:ExpressionStatement[14197-14252]"
    }, {
      "left" : "declareNativeFunctionType(s, URI_ERROR_FUNCTION_TYPE);",
      "right" : "declareNativeFunctionType(s, URI_ERROR_FUNCTION_TYPE);",
      "info" : "ExpressionStatement[14257-14311]:ExpressionStatement[14257-14311]"
    }, {
      "left" : "declareNativeValueType(s, \"undefined\", VOID_TYPE);",
      "right" : "declareNativeValueType(s, \"undefined\", VOID_TYPE);",
      "info" : "ExpressionStatement[14316-14366]:ExpressionStatement[14316-14366]"
    }, {
      "left" : "declareNativeValueType(s, \"ActiveXObject\", FUNCTION_INSTANCE_TYPE);",
      "right" : "declareNativeValueType(s, \"ActiveXObject\", FUNCTION_INSTANCE_TYPE);",
      "info" : "ExpressionStatement[14517-14584]:ExpressionStatement[14517-14584]"
    }, {
      "left" : "return s;",
      "right" : "return s;",
      "info" : "ReturnStatement[14590-14599]:ReturnStatement[14590-14599]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[14607-14614]:Modifier[14607-14614]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[14615-14619]:PrimitiveType[14615-14619]"
    }, {
      "left" : "declareNativeFunctionType",
      "right" : "declareNativeFunctionType",
      "info" : "SimpleName[14620-14645]:SimpleName[14620-14645]"
    }, {
      "left" : "Scope scope",
      "right" : "Scope scope",
      "info" : "SingleVariableDeclaration[14646-14657]:SingleVariableDeclaration[14646-14657]"
    }, {
      "left" : "JSTypeNative tId",
      "right" : "JSTypeNative tId",
      "info" : "SingleVariableDeclaration[14659-14675]:SingleVariableDeclaration[14659-14675]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14677-14911]:Block[14677-14911]"
    }, {
      "left" : "FunctionType t = typeRegistry.getNativeFunctionType(tId);",
      "right" : "FunctionType t = typeRegistry.getNativeFunctionType(tId);",
      "info" : "VariableDeclarationStatement[14683-14740]:VariableDeclarationStatement[14683-14740]"
    }, {
      "left" : "declareNativeType(scope, t.getInstanceType().getReferenceName(), t);",
      "right" : "declareNativeType(scope, t.getInstanceType().getReferenceName(), t);",
      "info" : "ExpressionStatement[14745-14813]:ExpressionStatement[14745-14813]"
    }, {
      "left" : "declareNativeType(\n        scope, t.getPrototype().getReferenceName(), t.getPrototype());",
      "right" : "declareNativeType(\n        scope, t.getPrototype().getReferenceName(), t.getPrototype());",
      "info" : "ExpressionStatement[14818-14907]:ExpressionStatement[14818-14907]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[14915-14922]:Modifier[14915-14922]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[14923-14927]:PrimitiveType[14923-14927]"
    }, {
      "left" : "declareNativeValueType",
      "right" : "declareNativeValueType",
      "info" : "SimpleName[14928-14950]:SimpleName[14928-14950]"
    }, {
      "left" : "Scope scope",
      "right" : "Scope scope",
      "info" : "SingleVariableDeclaration[14951-14962]:SingleVariableDeclaration[14951-14962]"
    }, {
      "left" : "String name",
      "right" : "String name",
      "info" : "SingleVariableDeclaration[14964-14975]:SingleVariableDeclaration[14964-14975]"
    }, {
      "left" : "JSTypeNative tId",
      "right" : "JSTypeNative tId",
      "info" : "SingleVariableDeclaration[14983-14999]:SingleVariableDeclaration[14983-14999]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15001-15075]:Block[15001-15075]"
    }, {
      "left" : "declareNativeType(scope, name, typeRegistry.getNativeType(tId));",
      "right" : "declareNativeType(scope, name, typeRegistry.getNativeType(tId));",
      "info" : "ExpressionStatement[15007-15071]:ExpressionStatement[15007-15071]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[15079-15086]:Modifier[15079-15086]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[15087-15093]:Modifier[15087-15093]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[15094-15098]:PrimitiveType[15094-15098]"
    }, {
      "left" : "declareNativeType",
      "right" : "declareNativeType",
      "info" : "SimpleName[15099-15116]:SimpleName[15099-15116]"
    }, {
      "left" : "Scope scope",
      "right" : "Scope scope",
      "info" : "SingleVariableDeclaration[15117-15128]:SingleVariableDeclaration[15117-15128]"
    }, {
      "left" : "String name",
      "right" : "String name",
      "info" : "SingleVariableDeclaration[15130-15141]:SingleVariableDeclaration[15130-15141]"
    }, {
      "left" : "JSType t",
      "right" : "JSType t",
      "info" : "SingleVariableDeclaration[15143-15151]:SingleVariableDeclaration[15143-15151]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15153-15205]:Block[15153-15205]"
    }, {
      "left" : "scope.declare(name, null, t, null, false);",
      "right" : "scope.declare(name, null, t, null, false);",
      "info" : "ExpressionStatement[15159-15201]:ExpressionStatement[15159-15201]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[15209-15216]:Modifier[15209-15216]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[15217-15223]:Modifier[15217-15223]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[15224-15229]:TYPE_DECLARATION_KIND[15224-15229]"
    }, {
      "left" : "DiscoverEnumsAndTypedefs",
      "right" : "DiscoverEnumsAndTypedefs",
      "info" : "SimpleName[15230-15254]:SimpleName[15230-15254]"
    }, {
      "left" : "AbstractShallowStatementCallback",
      "right" : "AbstractShallowStatementCallback",
      "info" : "SimpleType[15269-15301]:SimpleType[15269-15301]"
    }, {
      "left" : "DiscoverEnumsAndTypedefs",
      "right" : "DiscoverEnumsAndTypedefs",
      "info" : "SimpleName[15352-15376]:SimpleName[15352-15376]"
    }, {
      "left" : "JSTypeRegistry registry",
      "right" : "JSTypeRegistry registry",
      "info" : "SingleVariableDeclaration[15377-15400]:SingleVariableDeclaration[15377-15400]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15402-15441]:Block[15402-15441]"
    }, {
      "left" : "this.registry = registry;",
      "right" : "this.registry = registry;",
      "info" : "ExpressionStatement[15410-15435]:ExpressionStatement[15410-15435]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[15447-15456]:MarkerAnnotation[15447-15456]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[15461-15467]:Modifier[15461-15467]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[15468-15472]:PrimitiveType[15468-15472]"
    }, {
      "left" : "visit",
      "right" : "visit",
      "info" : "SimpleName[15473-15478]:SimpleName[15473-15478]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[15479-15494]:SingleVariableDeclaration[15479-15494]"
    }, {
      "left" : "Node node",
      "right" : "Node node",
      "info" : "SingleVariableDeclaration[15496-15505]:SingleVariableDeclaration[15496-15505]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[15507-15518]:SingleVariableDeclaration[15507-15518]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15520-16172]:Block[15520-16172]"
    }, {
      "left" : "switch (node.getType()) {\n        case Token.VAR:\n          for (Node child = node.getFirstChild();\n               child != null; child = child.getNext()) {\n            identifyNameNode(\n                child, NodeUtil.getBestJSDocInfo(child));\n          }\n          break;\n        case Token.EXPR_RESULT:\n          Node firstChild = node.getFirstChild();\n          if (firstChild.isAssign()) {\n            identifyNameNode(\n                firstChild.getFirstChild(), firstChild.getJSDocInfo());\n          } else {\n            identifyNameNode(\n                firstChild, firstChild.getJSDocInfo());\n          }\n          break;\n      }",
      "right" : "switch (node.getType()) {\n        case Token.VAR:\n          for (Node child = node.getFirstChild();\n               child != null; child = child.getNext()) {\n            identifyNameNode(\n                child, NodeUtil.getBestJSDocInfo(child));\n          }\n          break;\n        case Token.EXPR_RESULT:\n          Node firstChild = node.getFirstChild();\n          if (firstChild.isAssign()) {\n            identifyNameNode(\n                firstChild.getFirstChild(), firstChild.getJSDocInfo());\n          } else {\n            identifyNameNode(\n                firstChild, firstChild.getJSDocInfo());\n          }\n          break;\n      }",
      "info" : "SwitchStatement[15528-16166]:SwitchStatement[15528-16166]"
    }, {
      "left" : "case Token.VAR:",
      "right" : "case Token.VAR:",
      "info" : "SwitchCase[15562-15577]:SwitchCase[15562-15577]"
    }, {
      "left" : "for (Node child = node.getFirstChild();\n               child != null; child = child.getNext())",
      "right" : "for (Node child = node.getFirstChild();\n               child != null; child = child.getNext())",
      "info" : "ForStatement[15588-15784]:ForStatement[15588-15784]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15683-15784]:Block[15683-15784]"
    }, {
      "left" : "identifyNameNode(\n                child, NodeUtil.getBestJSDocInfo(child));",
      "right" : "identifyNameNode(\n                child, NodeUtil.getBestJSDocInfo(child));",
      "info" : "ExpressionStatement[15697-15772]:ExpressionStatement[15697-15772]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[15795-15801]:BreakStatement[15795-15801]"
    }, {
      "left" : "case Token.EXPR_RESULT:",
      "right" : "case Token.EXPR_RESULT:",
      "info" : "SwitchCase[15810-15833]:SwitchCase[15810-15833]"
    }, {
      "left" : "Node firstChild = node.getFirstChild();",
      "right" : "Node firstChild = node.getFirstChild();",
      "info" : "VariableDeclarationStatement[15844-15883]:VariableDeclarationStatement[15844-15883]"
    }, {
      "left" : "if (firstChild.isAssign())",
      "right" : "if (firstChild.isAssign())",
      "info" : "IfStatement[15894-16141]:IfStatement[15894-16141]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15921-16036]:Block[15921-16036]"
    }, {
      "left" : "identifyNameNode(\n                firstChild.getFirstChild(), firstChild.getJSDocInfo());",
      "right" : "identifyNameNode(\n                firstChild.getFirstChild(), firstChild.getJSDocInfo());",
      "info" : "ExpressionStatement[15935-16024]:ExpressionStatement[15935-16024]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16042-16141]:Block[16042-16141]"
    }, {
      "left" : "identifyNameNode(\n                firstChild, firstChild.getJSDocInfo());",
      "right" : "identifyNameNode(\n                firstChild, firstChild.getJSDocInfo());",
      "info" : "ExpressionStatement[16056-16129]:ExpressionStatement[16056-16129]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[16152-16158]:BreakStatement[16152-16158]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[16178-16185]:Modifier[16178-16185]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[16186-16190]:PrimitiveType[16186-16190]"
    }, {
      "left" : "identifyNameNode",
      "right" : "identifyNameNode",
      "info" : "SimpleName[16191-16207]:SimpleName[16191-16207]"
    }, {
      "left" : "Node nameNode",
      "right" : "Node nameNode",
      "info" : "SingleVariableDeclaration[16217-16230]:SingleVariableDeclaration[16217-16230]"
    }, {
      "left" : "JSDocInfo info",
      "right" : "JSDocInfo info",
      "info" : "SingleVariableDeclaration[16232-16246]:SingleVariableDeclaration[16232-16246]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16248-16594]:Block[16248-16594]"
    }, {
      "left" : "if (nameNode.isQualifiedName())",
      "right" : "if (nameNode.isQualifiedName())",
      "info" : "IfStatement[16256-16588]:IfStatement[16256-16588]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16288-16588]:Block[16288-16588]"
    }, {
      "left" : "if (info != null)",
      "right" : "if (info != null)",
      "info" : "IfStatement[16298-16580]:IfStatement[16298-16580]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16316-16580]:Block[16316-16580]"
    }, {
      "left" : "if (info.hasEnumParameterType())",
      "right" : "if (info.hasEnumParameterType())",
      "info" : "IfStatement[16328-16570]:IfStatement[16328-16570]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16361-16449]:Block[16361-16449]"
    }, {
      "left" : "registry.identifyNonNullableName(nameNode.getQualifiedName());",
      "right" : "registry.identifyNonNullableName(nameNode.getQualifiedName());",
      "info" : "ExpressionStatement[16375-16437]:ExpressionStatement[16375-16437]"
    }, {
      "left" : "if (info.hasTypedefType())",
      "right" : "if (info.hasTypedefType())",
      "info" : "IfStatement[16455-16570]:IfStatement[16455-16570]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16482-16570]:Block[16482-16570]"
    }, {
      "left" : "registry.identifyNonNullableName(nameNode.getQualifiedName());",
      "right" : "registry.identifyNonNullableName(nameNode.getQualifiedName());",
      "info" : "ExpressionStatement[16496-16558]:ExpressionStatement[16496-16558]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[16602-16609]:Modifier[16602-16609]"
    }, {
      "left" : "JSType",
      "right" : "JSType",
      "info" : "SimpleType[16610-16616]:SimpleType[16610-16616]"
    }, {
      "left" : "getNativeType",
      "right" : "getNativeType",
      "info" : "SimpleName[16617-16630]:SimpleName[16617-16630]"
    }, {
      "left" : "JSTypeNative nativeType",
      "right" : "JSTypeNative nativeType",
      "info" : "SingleVariableDeclaration[16631-16654]:SingleVariableDeclaration[16631-16654]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16656-16712]:Block[16656-16712]"
    }, {
      "left" : "return typeRegistry.getNativeType(nativeType);",
      "right" : "return typeRegistry.getNativeType(nativeType);",
      "info" : "ReturnStatement[16662-16708]:ReturnStatement[16662-16708]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[18064-18071]:Modifier[18064-18071]"
    }, {
      "left" : "AbstractScopeBuilder",
      "right" : "AbstractScopeBuilder",
      "info" : "SimpleName[18072-18092]:SimpleName[18072-18092]"
    }, {
      "left" : "Scope scope",
      "right" : "Scope scope",
      "info" : "SingleVariableDeclaration[18093-18104]:SingleVariableDeclaration[18093-18104]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18106-18139]:Block[18106-18139]"
    }, {
      "left" : "this.scope = scope;",
      "right" : "this.scope = scope;",
      "info" : "ExpressionStatement[18114-18133]:ExpressionStatement[18114-18133]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[18145-18149]:PrimitiveType[18145-18149]"
    }, {
      "left" : "setDeferredType",
      "right" : "setDeferredType",
      "info" : "SimpleName[18150-18165]:SimpleName[18150-18165]"
    }, {
      "left" : "Node node",
      "right" : "Node node",
      "info" : "SingleVariableDeclaration[18166-18175]:SingleVariableDeclaration[18166-18175]"
    }, {
      "left" : "JSType type",
      "right" : "JSType type",
      "info" : "SingleVariableDeclaration[18177-18188]:SingleVariableDeclaration[18177-18188]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18190-18258]:Block[18190-18258]"
    }, {
      "left" : "deferredSetTypes.add(new DeferredSetType(node, type));",
      "right" : "deferredSetTypes.add(new DeferredSetType(node, type));",
      "info" : "ExpressionStatement[18198-18252]:ExpressionStatement[18198-18252]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[18264-18273]:MarkerAnnotation[18264-18273]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[18278-18284]:Modifier[18278-18284]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[18285-18289]:PrimitiveType[18285-18289]"
    }, {
      "left" : "resolveTypes",
      "right" : "resolveTypes",
      "info" : "SimpleName[18290-18302]:SimpleName[18290-18302]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18305-18785]:Block[18305-18785]"
    }, {
      "left" : "for (DeferredSetType deferred : deferredSetTypes)",
      "right" : "for (DeferredSetType deferred : deferredSetTypes)",
      "info" : "EnhancedForStatement[18362-18454]:EnhancedForStatement[18362-18454]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18412-18454]:Block[18412-18454]"
    }, {
      "left" : "deferred.resolve(scope);",
      "right" : "deferred.resolve(scope);",
      "info" : "ExpressionStatement[18422-18446]:ExpressionStatement[18422-18446]"
    }, {
      "left" : "Iterator<Var> vars = scope.getVars();",
      "right" : "Iterator<Var> vars = scope.getVars();",
      "info" : "VariableDeclarationStatement[18517-18554]:VariableDeclarationStatement[18517-18554]"
    }, {
      "left" : "while (vars.hasNext())",
      "right" : "while (vars.hasNext())",
      "info" : "WhileStatement[18561-18652]:WhileStatement[18561-18652]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18584-18652]:Block[18584-18652]"
    }, {
      "left" : "vars.next().resolveType(typeParsingErrorReporter);",
      "right" : "vars.next().resolveType(typeParsingErrorReporter);",
      "info" : "ExpressionStatement[18594-18644]:ExpressionStatement[18594-18644]"
    }, {
      "left" : "typeRegistry.resolveTypesInScope(scope);",
      "right" : "typeRegistry.resolveTypesInScope(scope);",
      "info" : "ExpressionStatement[18739-18779]:ExpressionStatement[18739-18779]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[18791-18800]:MarkerAnnotation[18791-18800]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[18805-18811]:Modifier[18805-18811]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[18812-18817]:Modifier[18812-18817]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[18818-18825]:PrimitiveType[18818-18825]"
    }, {
      "left" : "shouldTraverse",
      "right" : "shouldTraverse",
      "info" : "SimpleName[18826-18840]:SimpleName[18826-18840]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[18841-18856]:SingleVariableDeclaration[18841-18856]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[18858-18864]:SingleVariableDeclaration[18858-18864]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[18866-18877]:SingleVariableDeclaration[18866-18877]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18879-19823]:Block[18879-19823]"
    }, {
      "left" : "inputId = t.getInputId();",
      "right" : "inputId = t.getInputId();",
      "info" : "ExpressionStatement[18887-18912]:ExpressionStatement[18887-18912]"
    }, {
      "left" : "if (n.isFunction() ||\n          n.isScript())",
      "right" : "if (n.isFunction() ||\n          n.isScript())",
      "info" : "IfStatement[18919-19067]:IfStatement[18919-19067]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18965-19067]:Block[18965-19067]"
    }, {
      "left" : "Preconditions.checkNotNull(inputId);",
      "right" : "Preconditions.checkNotNull(inputId);",
      "info" : "ExpressionStatement[18975-19011]:ExpressionStatement[18975-19011]"
    }, {
      "left" : "sourceName = NodeUtil.getSourceName(n);",
      "right" : "sourceName = NodeUtil.getSourceName(n);",
      "info" : "ExpressionStatement[19020-19059]:ExpressionStatement[19020-19059]"
    }, {
      "left" : "boolean descend = parent == null || !parent.isFunction() ||\n          n == parent.getFirstChild() || parent == scope.getRootNode();",
      "right" : "boolean descend = parent == null || !parent.isFunction() ||\n          n == parent.getFirstChild() || parent == scope.getRootNode();",
      "info" : "VariableDeclarationStatement[19199-19330]:VariableDeclarationStatement[19199-19330]"
    }, {
      "left" : "if (descend)",
      "right" : "if (descend)",
      "info" : "IfStatement[19338-19794]:IfStatement[19338-19794]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19351-19794]:Block[19351-19794]"
    }, {
      "left" : "if (NodeUtil.isStatementParent(n))",
      "right" : "if (NodeUtil.isStatementParent(n))",
      "info" : "IfStatement[19487-19786]:IfStatement[19487-19786]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19522-19786]:Block[19522-19786]"
    }, {
      "left" : "for (Node child = n.getFirstChild();\n               child != null;\n               child = child.getNext())",
      "right" : "for (Node child = n.getFirstChild();\n               child != null;\n               child = child.getNext())",
      "info" : "ForStatement[19534-19776]:ForStatement[19534-19776]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19641-19776]:Block[19641-19776]"
    }, {
      "left" : "if (NodeUtil.isHoistedFunctionDeclaration(child))",
      "right" : "if (NodeUtil.isHoistedFunctionDeclaration(child))",
      "info" : "IfStatement[19655-19764]:IfStatement[19655-19764]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19705-19764]:Block[19705-19764]"
    }, {
      "left" : "defineFunctionLiteral(child);",
      "right" : "defineFunctionLiteral(child);",
      "info" : "ExpressionStatement[19721-19750]:ExpressionStatement[19721-19750]"
    }, {
      "left" : "return descend;",
      "right" : "return descend;",
      "info" : "ReturnStatement[19802-19817]:ReturnStatement[19802-19817]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[19829-19838]:MarkerAnnotation[19829-19838]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[19843-19849]:Modifier[19843-19849]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[19850-19854]:PrimitiveType[19850-19854]"
    }, {
      "left" : "visit",
      "right" : "visit",
      "info" : "SimpleName[19855-19860]:SimpleName[19855-19860]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[19861-19876]:SingleVariableDeclaration[19861-19876]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[19878-19884]:SingleVariableDeclaration[19878-19884]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[19886-19897]:SingleVariableDeclaration[19886-19897]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19899-21559]:Block[19899-21559]"
    }, {
      "left" : "inputId = t.getInputId();",
      "right" : "inputId = t.getInputId();",
      "info" : "ExpressionStatement[19907-19932]:ExpressionStatement[19907-19932]"
    }, {
      "left" : "attachLiteralTypes(n);",
      "right" : "attachLiteralTypes(n);",
      "info" : "ExpressionStatement[19939-19961]:ExpressionStatement[19939-19961]"
    }, {
      "left" : "switch (n.getType()) {\n        case Token.CALL:\n          checkForClassDefiningCalls(t, n);\n          checkForCallingConventionDefiningCalls(n, delegateCallingConventions);\n          break;\n\n        case Token.FUNCTION:\n          if (t.getInput() == null || !t.getInput().isExtern()) {\n            nonExternFunctions.add(n);\n          }\n\n          // Hoisted functions are handled during pre-traversal.\n          if (!NodeUtil.isHoistedFunctionDeclaration(n)) {\n            defineFunctionLiteral(n);\n          }\n          break;\n\n        case Token.ASSIGN:\n          // Handle initialization of properties.\n          Node firstChild = n.getFirstChild();\n          if (firstChild.isGetProp() &&\n              firstChild.isQualifiedName()) {\n            maybeDeclareQualifiedName(t, n.getJSDocInfo(),\n                firstChild, n, firstChild.getNext());\n          }\n          break;\n\n        case Token.CATCH:\n          defineCatch(n);\n          break;\n\n        case Token.VAR:\n          defineVar(n);\n          break;\n\n        case Token.GETPROP:\n          // Handle stubbed properties.\n          if (parent.isExprResult() &&\n              n.isQualifiedName()) {\n            maybeDeclareQualifiedName(t, n.getJSDocInfo(), n, parent, null);\n          }\n          break;\n      }",
      "right" : "switch (n.getType()) {\n        case Token.CALL:\n          checkForClassDefiningCalls(t, n);\n          checkForCallingConventionDefiningCalls(n, delegateCallingConventions);\n          break;\n\n        case Token.FUNCTION:\n          if (t.getInput() == null || !t.getInput().isExtern()) {\n            nonExternFunctions.add(n);\n          }\n\n          // Hoisted functions are handled during pre-traversal.\n          if (!NodeUtil.isHoistedFunctionDeclaration(n)) {\n            defineFunctionLiteral(n);\n          }\n          break;\n\n        case Token.ASSIGN:\n          // Handle initialization of properties.\n          Node firstChild = n.getFirstChild();\n          if (firstChild.isGetProp() &&\n              firstChild.isQualifiedName()) {\n            maybeDeclareQualifiedName(t, n.getJSDocInfo(),\n                firstChild, n, firstChild.getNext());\n          }\n          break;\n\n        case Token.CATCH:\n          defineCatch(n);\n          break;\n\n        case Token.VAR:\n          defineVar(n);\n          break;\n\n        case Token.GETPROP:\n          // Handle stubbed properties.\n          if (parent.isExprResult() &&\n              n.isQualifiedName()) {\n            maybeDeclareQualifiedName(t, n.getJSDocInfo(), n, parent, null);\n          }\n          break;\n      }",
      "info" : "SwitchStatement[19969-21245]:SwitchStatement[19969-21245]"
    }, {
      "left" : "case Token.CALL:",
      "right" : "case Token.CALL:",
      "info" : "SwitchCase[20000-20016]:SwitchCase[20000-20016]"
    }, {
      "left" : "checkForClassDefiningCalls(t, n);",
      "right" : "checkForClassDefiningCalls(t, n);",
      "info" : "ExpressionStatement[20027-20060]:ExpressionStatement[20027-20060]"
    }, {
      "left" : "checkForCallingConventionDefiningCalls(n, delegateCallingConventions);",
      "right" : "checkForCallingConventionDefiningCalls(n, delegateCallingConventions);",
      "info" : "ExpressionStatement[20071-20141]:ExpressionStatement[20071-20141]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[20152-20158]:BreakStatement[20152-20158]"
    }, {
      "left" : "case Token.FUNCTION:",
      "right" : "case Token.FUNCTION:",
      "info" : "SwitchCase[20168-20188]:SwitchCase[20168-20188]"
    }, {
      "left" : "if (t.getInput() == null || !t.getInput().isExtern())",
      "right" : "if (t.getInput() == null || !t.getInput().isExtern())",
      "info" : "IfStatement[20199-20305]:IfStatement[20199-20305]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20253-20305]:Block[20253-20305]"
    }, {
      "left" : "nonExternFunctions.add(n);",
      "right" : "nonExternFunctions.add(n);",
      "info" : "ExpressionStatement[20267-20293]:ExpressionStatement[20267-20293]"
    }, {
      "left" : "if (!NodeUtil.isHoistedFunctionDeclaration(n))",
      "right" : "if (!NodeUtil.isHoistedFunctionDeclaration(n))",
      "info" : "IfStatement[20382-20480]:IfStatement[20382-20480]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20429-20480]:Block[20429-20480]"
    }, {
      "left" : "defineFunctionLiteral(n);",
      "right" : "defineFunctionLiteral(n);",
      "info" : "ExpressionStatement[20443-20468]:ExpressionStatement[20443-20468]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[20491-20497]:BreakStatement[20491-20497]"
    }, {
      "left" : "case Token.ASSIGN:",
      "right" : "case Token.ASSIGN:",
      "info" : "SwitchCase[20507-20525]:SwitchCase[20507-20525]"
    }, {
      "left" : "Node firstChild = n.getFirstChild();",
      "right" : "Node firstChild = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[20586-20622]:VariableDeclarationStatement[20586-20622]"
    }, {
      "left" : "if (firstChild.isGetProp() &&\n              firstChild.isQualifiedName())",
      "right" : "if (firstChild.isGetProp() &&\n              firstChild.isQualifiedName())",
      "info" : "IfStatement[20633-20833]:IfStatement[20633-20833]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20707-20833]:Block[20707-20833]"
    }, {
      "left" : "maybeDeclareQualifiedName(t, n.getJSDocInfo(),\n                firstChild, n, firstChild.getNext());",
      "right" : "maybeDeclareQualifiedName(t, n.getJSDocInfo(),\n                firstChild, n, firstChild.getNext());",
      "info" : "ExpressionStatement[20721-20821]:ExpressionStatement[20721-20821]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[20844-20850]:BreakStatement[20844-20850]"
    }, {
      "left" : "case Token.CATCH:",
      "right" : "case Token.CATCH:",
      "info" : "SwitchCase[20860-20877]:SwitchCase[20860-20877]"
    }, {
      "left" : "defineCatch(n);",
      "right" : "defineCatch(n);",
      "info" : "ExpressionStatement[20888-20903]:ExpressionStatement[20888-20903]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[20914-20920]:BreakStatement[20914-20920]"
    }, {
      "left" : "case Token.VAR:",
      "right" : "case Token.VAR:",
      "info" : "SwitchCase[20930-20945]:SwitchCase[20930-20945]"
    }, {
      "left" : "defineVar(n);",
      "right" : "defineVar(n);",
      "info" : "ExpressionStatement[20956-20969]:ExpressionStatement[20956-20969]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[20980-20986]:BreakStatement[20980-20986]"
    }, {
      "left" : "case Token.GETPROP:",
      "right" : "case Token.GETPROP:",
      "info" : "SwitchCase[20996-21015]:SwitchCase[20996-21015]"
    }, {
      "left" : "if (parent.isExprResult() &&\n              n.isQualifiedName())",
      "right" : "if (parent.isExprResult() &&\n              n.isQualifiedName())",
      "info" : "IfStatement[21066-21220]:IfStatement[21066-21220]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21130-21220]:Block[21130-21220]"
    }, {
      "left" : "maybeDeclareQualifiedName(t, n.getJSDocInfo(), n, parent, null);",
      "right" : "maybeDeclareQualifiedName(t, n.getJSDocInfo(), n, parent, null);",
      "info" : "ExpressionStatement[21144-21208]:ExpressionStatement[21144-21208]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[21231-21237]:BreakStatement[21231-21237]"
    }, {
      "left" : "if (n.getParent() != null && NodeUtil.isStatement(n) &&\n          lentObjectLiterals != null)",
      "right" : "if (n.getParent() != null && NodeUtil.isStatement(n) &&\n          lentObjectLiterals != null)",
      "info" : "IfStatement[21316-21553]:IfStatement[21316-21553]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21410-21553]:Block[21410-21553]"
    }, {
      "left" : "for (Node objLit : lentObjectLiterals)",
      "right" : "for (Node objLit : lentObjectLiterals)",
      "info" : "EnhancedForStatement[21420-21509]:EnhancedForStatement[21420-21509]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21459-21509]:Block[21459-21509]"
    }, {
      "left" : "defineObjectLiteral(objLit);",
      "right" : "defineObjectLiteral(objLit);",
      "info" : "ExpressionStatement[21471-21499]:ExpressionStatement[21471-21499]"
    }, {
      "left" : "lentObjectLiterals.clear();",
      "right" : "lentObjectLiterals.clear();",
      "info" : "ExpressionStatement[21518-21545]:ExpressionStatement[21518-21545]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[21565-21572]:Modifier[21565-21572]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[21573-21577]:PrimitiveType[21573-21577]"
    }, {
      "left" : "attachLiteralTypes",
      "right" : "attachLiteralTypes",
      "info" : "SimpleName[21578-21596]:SimpleName[21578-21596]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[21597-21603]:SingleVariableDeclaration[21597-21603]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21605-22753]:Block[21605-22753]"
    }, {
      "left" : "switch (n.getType()) {\n        case Token.NULL:\n          n.setJSType(getNativeType(NULL_TYPE));\n          break;\n\n        case Token.VOID:\n          n.setJSType(getNativeType(VOID_TYPE));\n          break;\n\n        case Token.STRING:\n          n.setJSType(getNativeType(STRING_TYPE));\n          break;\n\n        case Token.NUMBER:\n          n.setJSType(getNativeType(NUMBER_TYPE));\n          break;\n\n        case Token.TRUE:\n        case Token.FALSE:\n          n.setJSType(getNativeType(BOOLEAN_TYPE));\n          break;\n\n        case Token.REGEXP:\n          n.setJSType(getNativeType(REGEXP_TYPE));\n          break;\n\n        case Token.OBJECTLIT:\n          JSDocInfo info = n.getJSDocInfo();\n          if (info != null &&\n              info.getLendsName() != null) {\n            if (lentObjectLiterals == null) {\n              lentObjectLiterals = Lists.newArrayList();\n            }\n            lentObjectLiterals.add(n);\n          } else {\n            defineObjectLiteral(n);\n          }\n          break;\n\n          // NOTE(nicksantos): If we ever support Array tuples,\n          // we will need to put ARRAYLIT here as well.\n      }",
      "right" : "switch (n.getType()) {\n        case Token.NULL:\n          n.setJSType(getNativeType(NULL_TYPE));\n          break;\n\n        case Token.VOID:\n          n.setJSType(getNativeType(VOID_TYPE));\n          break;\n\n        case Token.STRING:\n          n.setJSType(getNativeType(STRING_TYPE));\n          break;\n\n        case Token.NUMBER:\n          n.setJSType(getNativeType(NUMBER_TYPE));\n          break;\n\n        case Token.TRUE:\n        case Token.FALSE:\n          n.setJSType(getNativeType(BOOLEAN_TYPE));\n          break;\n\n        case Token.REGEXP:\n          n.setJSType(getNativeType(REGEXP_TYPE));\n          break;\n\n        case Token.OBJECTLIT:\n          JSDocInfo info = n.getJSDocInfo();\n          if (info != null &&\n              info.getLendsName() != null) {\n            if (lentObjectLiterals == null) {\n              lentObjectLiterals = Lists.newArrayList();\n            }\n            lentObjectLiterals.add(n);\n          } else {\n            defineObjectLiteral(n);\n          }\n          break;\n\n          // NOTE(nicksantos): If we ever support Array tuples,\n          // we will need to put ARRAYLIT here as well.\n      }",
      "info" : "SwitchStatement[21613-22747]:SwitchStatement[21613-22747]"
    }, {
      "left" : "case Token.NULL:",
      "right" : "case Token.NULL:",
      "info" : "SwitchCase[21644-21660]:SwitchCase[21644-21660]"
    }, {
      "left" : "n.setJSType(getNativeType(NULL_TYPE));",
      "right" : "n.setJSType(getNativeType(NULL_TYPE));",
      "info" : "ExpressionStatement[21671-21709]:ExpressionStatement[21671-21709]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[21720-21726]:BreakStatement[21720-21726]"
    }, {
      "left" : "case Token.VOID:",
      "right" : "case Token.VOID:",
      "info" : "SwitchCase[21736-21752]:SwitchCase[21736-21752]"
    }, {
      "left" : "n.setJSType(getNativeType(VOID_TYPE));",
      "right" : "n.setJSType(getNativeType(VOID_TYPE));",
      "info" : "ExpressionStatement[21763-21801]:ExpressionStatement[21763-21801]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[21812-21818]:BreakStatement[21812-21818]"
    }, {
      "left" : "case Token.STRING:",
      "right" : "case Token.STRING:",
      "info" : "SwitchCase[21828-21846]:SwitchCase[21828-21846]"
    }, {
      "left" : "n.setJSType(getNativeType(STRING_TYPE));",
      "right" : "n.setJSType(getNativeType(STRING_TYPE));",
      "info" : "ExpressionStatement[21857-21897]:ExpressionStatement[21857-21897]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[21908-21914]:BreakStatement[21908-21914]"
    }, {
      "left" : "case Token.NUMBER:",
      "right" : "case Token.NUMBER:",
      "info" : "SwitchCase[21924-21942]:SwitchCase[21924-21942]"
    }, {
      "left" : "n.setJSType(getNativeType(NUMBER_TYPE));",
      "right" : "n.setJSType(getNativeType(NUMBER_TYPE));",
      "info" : "ExpressionStatement[21953-21993]:ExpressionStatement[21953-21993]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[22004-22010]:BreakStatement[22004-22010]"
    }, {
      "left" : "case Token.TRUE:",
      "right" : "case Token.TRUE:",
      "info" : "SwitchCase[22020-22036]:SwitchCase[22020-22036]"
    }, {
      "left" : "case Token.FALSE:",
      "right" : "case Token.FALSE:",
      "info" : "SwitchCase[22045-22062]:SwitchCase[22045-22062]"
    }, {
      "left" : "n.setJSType(getNativeType(BOOLEAN_TYPE));",
      "right" : "n.setJSType(getNativeType(BOOLEAN_TYPE));",
      "info" : "ExpressionStatement[22073-22114]:ExpressionStatement[22073-22114]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[22125-22131]:BreakStatement[22125-22131]"
    }, {
      "left" : "case Token.REGEXP:",
      "right" : "case Token.REGEXP:",
      "info" : "SwitchCase[22141-22159]:SwitchCase[22141-22159]"
    }, {
      "left" : "n.setJSType(getNativeType(REGEXP_TYPE));",
      "right" : "n.setJSType(getNativeType(REGEXP_TYPE));",
      "info" : "ExpressionStatement[22170-22210]:ExpressionStatement[22170-22210]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[22221-22227]:BreakStatement[22221-22227]"
    }, {
      "left" : "case Token.OBJECTLIT:",
      "right" : "case Token.OBJECTLIT:",
      "info" : "SwitchCase[22237-22258]:SwitchCase[22237-22258]"
    }, {
      "left" : "JSDocInfo info = n.getJSDocInfo();",
      "right" : "JSDocInfo info = n.getJSDocInfo();",
      "info" : "VariableDeclarationStatement[22269-22303]:VariableDeclarationStatement[22269-22303]"
    }, {
      "left" : "if (info != null &&\n              info.getLendsName() != null)",
      "right" : "if (info != null &&\n              info.getLendsName() != null)",
      "info" : "IfStatement[22314-22601]:IfStatement[22314-22601]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22377-22546]:Block[22377-22546]"
    }, {
      "left" : "if (lentObjectLiterals == null)",
      "right" : "if (lentObjectLiterals == null)",
      "info" : "IfStatement[22391-22495]:IfStatement[22391-22495]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22423-22495]:Block[22423-22495]"
    }, {
      "left" : "lentObjectLiterals = Lists.newArrayList();",
      "right" : "lentObjectLiterals = Lists.newArrayList();",
      "info" : "ExpressionStatement[22439-22481]:ExpressionStatement[22439-22481]"
    }, {
      "left" : "lentObjectLiterals.add(n);",
      "right" : "lentObjectLiterals.add(n);",
      "info" : "ExpressionStatement[22508-22534]:ExpressionStatement[22508-22534]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22552-22601]:Block[22552-22601]"
    }, {
      "left" : "defineObjectLiteral(n);",
      "right" : "defineObjectLiteral(n);",
      "info" : "ExpressionStatement[22566-22589]:ExpressionStatement[22566-22589]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[22612-22618]:BreakStatement[22612-22618]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[22759-22766]:Modifier[22759-22766]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[22767-22771]:PrimitiveType[22767-22771]"
    }, {
      "left" : "defineObjectLiteral",
      "right" : "defineObjectLiteral",
      "info" : "SimpleName[22772-22791]:SimpleName[22772-22791]"
    }, {
      "left" : "Node objectLit",
      "right" : "Node objectLit",
      "info" : "SingleVariableDeclaration[22792-22806]:SingleVariableDeclaration[22792-22806]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22808-24398]:Block[22808-24398]"
    }, {
      "left" : "JSType type = null;",
      "right" : "JSType type = null;",
      "info" : "VariableDeclarationStatement[22855-22874]:VariableDeclarationStatement[22855-22874]"
    }, {
      "left" : "JSDocInfo info = objectLit.getJSDocInfo();",
      "right" : "JSDocInfo info = objectLit.getJSDocInfo();",
      "info" : "VariableDeclarationStatement[22881-22923]:VariableDeclarationStatement[22881-22923]"
    }, {
      "left" : "if (info != null && info.getLendsName() != null)",
      "right" : "if (info != null && info.getLendsName() != null)",
      "info" : "IfStatement[22930-23680]:IfStatement[22930-23680]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22979-23680]:Block[22979-23680]"
    }, {
      "left" : "String lendsName = info.getLendsName();",
      "right" : "String lendsName = info.getLendsName();",
      "info" : "VariableDeclarationStatement[22989-23028]:VariableDeclarationStatement[22989-23028]"
    }, {
      "left" : "Var lendsVar = scope.getVar(lendsName);",
      "right" : "Var lendsVar = scope.getVar(lendsName);",
      "info" : "VariableDeclarationStatement[23037-23076]:VariableDeclarationStatement[23037-23076]"
    }, {
      "left" : "if (lendsVar == null)",
      "right" : "if (lendsVar == null)",
      "info" : "IfStatement[23085-23672]:IfStatement[23085-23672]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23107-23223]:Block[23107-23223]"
    }, {
      "left" : "compiler.report(\n              JSError.make(sourceName, objectLit, UNKNOWN_LENDS, lendsName));",
      "right" : "compiler.report(\n              JSError.make(sourceName, objectLit, UNKNOWN_LENDS, lendsName));",
      "info" : "ExpressionStatement[23119-23213]:ExpressionStatement[23119-23213]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23229-23672]:Block[23229-23672]"
    }, {
      "left" : "type = lendsVar.getType();",
      "right" : "type = lendsVar.getType();",
      "info" : "ExpressionStatement[23241-23267]:ExpressionStatement[23241-23267]"
    }, {
      "left" : "if (type == null)",
      "right" : "if (type == null)",
      "info" : "IfStatement[23278-23341]:IfStatement[23278-23341]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23296-23341]:Block[23296-23341]"
    }, {
      "left" : "type = unknownType;",
      "right" : "type = unknownType;",
      "info" : "ExpressionStatement[23310-23329]:ExpressionStatement[23310-23329]"
    }, {
      "left" : "if (!type.isSubtype(typeRegistry.getNativeType(OBJECT_TYPE)))",
      "right" : "if (!type.isSubtype(typeRegistry.getNativeType(OBJECT_TYPE)))",
      "info" : "IfStatement[23352-23662]:IfStatement[23352-23662]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23414-23604]:Block[23414-23604]"
    }, {
      "left" : "compiler.report(\n                JSError.make(sourceName, objectLit, LENDS_ON_NON_OBJECT,\n                    lendsName, type.toString()));",
      "right" : "compiler.report(\n                JSError.make(sourceName, objectLit, LENDS_ON_NON_OBJECT,\n                    lendsName, type.toString()));",
      "info" : "ExpressionStatement[23428-23567]:ExpressionStatement[23428-23567]"
    }, {
      "left" : "type = null;",
      "right" : "type = null;",
      "info" : "ExpressionStatement[23580-23592]:ExpressionStatement[23580-23592]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23610-23662]:Block[23610-23662]"
    }, {
      "left" : "objectLit.setJSType(type);",
      "right" : "objectLit.setJSType(type);",
      "info" : "ExpressionStatement[23624-23650]:ExpressionStatement[23624-23650]"
    }, {
      "left" : "info = NodeUtil.getBestJSDocInfo(objectLit);",
      "right" : "info = NodeUtil.getBestJSDocInfo(objectLit);",
      "info" : "ExpressionStatement[23688-23732]:ExpressionStatement[23688-23732]"
    }, {
      "left" : "Node lValue = NodeUtil.getBestLValue(objectLit);",
      "right" : "Node lValue = NodeUtil.getBestLValue(objectLit);",
      "info" : "VariableDeclarationStatement[23739-23787]:VariableDeclarationStatement[23739-23787]"
    }, {
      "left" : "String lValueName = NodeUtil.getBestLValueName(lValue);",
      "right" : "String lValueName = NodeUtil.getBestLValueName(lValue);",
      "info" : "VariableDeclarationStatement[23794-23849]:VariableDeclarationStatement[23794-23849]"
    }, {
      "left" : "boolean createdEnumType = false;",
      "right" : "boolean createdEnumType = false;",
      "info" : "VariableDeclarationStatement[23856-23888]:VariableDeclarationStatement[23856-23888]"
    }, {
      "left" : "if (info != null && info.hasEnumParameterType())",
      "right" : "if (info != null && info.hasEnumParameterType())",
      "info" : "IfStatement[23895-24062]:IfStatement[23895-24062]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23944-24062]:Block[23944-24062]"
    }, {
      "left" : "type = createEnumTypeFromNodes(objectLit, lValueName, info, lValue);",
      "right" : "type = createEnumTypeFromNodes(objectLit, lValueName, info, lValue);",
      "info" : "ExpressionStatement[23954-24022]:ExpressionStatement[23954-24022]"
    }, {
      "left" : "createdEnumType = true;",
      "right" : "createdEnumType = true;",
      "info" : "ExpressionStatement[24031-24054]:ExpressionStatement[24031-24054]"
    }, {
      "left" : "if (type == null)",
      "right" : "if (type == null)",
      "info" : "IfStatement[24070-24158]:IfStatement[24070-24158]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24088-24158]:Block[24088-24158]"
    }, {
      "left" : "type = typeRegistry.createAnonymousObjectType(info);",
      "right" : "type = typeRegistry.createAnonymousObjectType(info);",
      "info" : "ExpressionStatement[24098-24150]:ExpressionStatement[24098-24150]"
    }, {
      "left" : "setDeferredType(objectLit, type);",
      "right" : "setDeferredType(objectLit, type);",
      "info" : "ExpressionStatement[24166-24199]:ExpressionStatement[24166-24199]"
    }, {
      "left" : "processObjectLitProperties(\n          objectLit, ObjectType.cast(objectLit.getJSType()), !createdEnumType);",
      "right" : "processObjectLitProperties(\n          objectLit, ObjectType.cast(objectLit.getJSType()), !createdEnumType);",
      "info" : "ExpressionStatement[24285-24392]:ExpressionStatement[24285-24392]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[24790-24794]:PrimitiveType[24790-24794]"
    }, {
      "left" : "processObjectLitProperties",
      "right" : "processObjectLitProperties",
      "info" : "SimpleName[24795-24821]:SimpleName[24795-24821]"
    }, {
      "left" : "Node objLit",
      "right" : "Node objLit",
      "info" : "SingleVariableDeclaration[24831-24842]:SingleVariableDeclaration[24831-24842]"
    }, {
      "left" : "ObjectType objLitType",
      "right" : "ObjectType objLitType",
      "info" : "SingleVariableDeclaration[24844-24865]:SingleVariableDeclaration[24844-24865]"
    }, {
      "left" : "boolean declareOnOwner",
      "right" : "boolean declareOnOwner",
      "info" : "SingleVariableDeclaration[24875-24897]:SingleVariableDeclaration[24875-24897]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24899-26077]:Block[24899-26077]"
    }, {
      "left" : "for (Node keyNode = objLit.getFirstChild(); keyNode != null;\n           keyNode = keyNode.getNext())",
      "right" : "for (Node keyNode = objLit.getFirstChild(); keyNode != null;\n           keyNode = keyNode.getNext())",
      "info" : "ForStatement[24907-26071]:ForStatement[24907-26071]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25008-26071]:Block[25008-26071]"
    }, {
      "left" : "Node value = keyNode.getFirstChild();",
      "right" : "Node value = keyNode.getFirstChild();",
      "info" : "VariableDeclarationStatement[25018-25055]:VariableDeclarationStatement[25018-25055]"
    }, {
      "left" : "String memberName = NodeUtil.getObjectLitKeyName(keyNode);",
      "right" : "String memberName = NodeUtil.getObjectLitKeyName(keyNode);",
      "info" : "VariableDeclarationStatement[25064-25122]:VariableDeclarationStatement[25064-25122]"
    }, {
      "left" : "JSDocInfo info = keyNode.getJSDocInfo();",
      "right" : "JSDocInfo info = keyNode.getJSDocInfo();",
      "info" : "VariableDeclarationStatement[25131-25171]:VariableDeclarationStatement[25131-25171]"
    }, {
      "left" : "JSType valueType = getDeclaredType(info, keyNode, value);",
      "right" : "JSType valueType = getDeclaredType(info, keyNode, value);",
      "info" : "VariableDeclarationStatement[25180-25237]:VariableDeclarationStatement[25180-25237]"
    }, {
      "left" : "JSType keyType =  objLitType.isEnumType() ?\n            objLitType.toMaybeEnumType().getElementsType() :\n            NodeUtil.getObjectLitKeyTypeFromValueType(keyNode, valueType);",
      "right" : "JSType keyType =  objLitType.isEnumType() ?\n            objLitType.toMaybeEnumType().getElementsType() :\n            NodeUtil.getObjectLitKeyTypeFromValueType(keyNode, valueType);",
      "info" : "VariableDeclarationStatement[25246-25425]:VariableDeclarationStatement[25246-25425]"
    }, {
      "left" : "String qualifiedName = NodeUtil.getBestLValueName(keyNode);",
      "right" : "String qualifiedName = NodeUtil.getBestLValueName(keyNode);",
      "info" : "VariableDeclarationStatement[25540-25599]:VariableDeclarationStatement[25540-25599]"
    }, {
      "left" : "if (qualifiedName != null)",
      "right" : "if (qualifiedName != null)",
      "info" : "IfStatement[25608-25848]:IfStatement[25608-25848]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25635-25765]:Block[25635-25765]"
    }, {
      "left" : "boolean inferred = keyType == null;",
      "right" : "boolean inferred = keyType == null;",
      "info" : "VariableDeclarationStatement[25647-25682]:VariableDeclarationStatement[25647-25682]"
    }, {
      "left" : "defineSlot(keyNode, objLit, qualifiedName, keyType, inferred);",
      "right" : "defineSlot(keyNode, objLit, qualifiedName, keyType, inferred);",
      "info" : "ExpressionStatement[25693-25755]:ExpressionStatement[25693-25755]"
    }, {
      "left" : "if (keyType != null)",
      "right" : "if (keyType != null)",
      "info" : "IfStatement[25771-25848]:IfStatement[25771-25848]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25792-25848]:Block[25792-25848]"
    }, {
      "left" : "setDeferredType(keyNode, keyType);",
      "right" : "setDeferredType(keyNode, keyType);",
      "info" : "ExpressionStatement[25804-25838]:ExpressionStatement[25804-25838]"
    }, {
      "left" : "if (keyType != null && objLitType != null && declareOnOwner)",
      "right" : "if (keyType != null && objLitType != null && declareOnOwner)",
      "info" : "IfStatement[25858-26063]:IfStatement[25858-26063]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25919-26063]:Block[25919-26063]"
    }, {
      "left" : "objLitType.defineDeclaredProperty(memberName, keyType, keyNode);",
      "right" : "objLitType.defineDeclaredProperty(memberName, keyType, keyNode);",
      "info" : "ExpressionStatement[25989-26053]:ExpressionStatement[25989-26053]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[26313-26320]:Modifier[26313-26320]"
    }, {
      "left" : "JSType",
      "right" : "JSType",
      "info" : "SimpleType[26321-26327]:SimpleType[26321-26327]"
    }, {
      "left" : "getDeclaredTypeInAnnotation",
      "right" : "getDeclaredTypeInAnnotation",
      "info" : "SimpleName[26328-26355]:SimpleName[26328-26355]"
    }, {
      "left" : "Node node",
      "right" : "Node node",
      "info" : "SingleVariableDeclaration[26356-26365]:SingleVariableDeclaration[26356-26365]"
    }, {
      "left" : "JSDocInfo info",
      "right" : "JSDocInfo info",
      "info" : "SingleVariableDeclaration[26367-26381]:SingleVariableDeclaration[26367-26381]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26383-27671]:Block[26383-27671]"
    }, {
      "left" : "JSType jsType = null;",
      "right" : "JSType jsType = null;",
      "info" : "VariableDeclarationStatement[26391-26412]:VariableDeclarationStatement[26391-26412]"
    }, {
      "left" : "if (info != null)",
      "right" : "if (info != null)",
      "info" : "IfStatement[26419-27644]:IfStatement[26419-27644]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26437-27644]:Block[26437-27644]"
    }, {
      "left" : "if (info.hasType())",
      "right" : "if (info.hasType())",
      "info" : "IfStatement[26447-27636]:IfStatement[26447-27636]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26467-27422]:Block[26467-27422]"
    }, {
      "left" : "ImmutableList<TemplateType> ownerTypeKeys = ImmutableList.of();",
      "right" : "ImmutableList<TemplateType> ownerTypeKeys = ImmutableList.of();",
      "info" : "VariableDeclarationStatement[26480-26543]:VariableDeclarationStatement[26480-26543]"
    }, {
      "left" : "Node ownerNode = NodeUtil.getBestLValueOwner(node);",
      "right" : "Node ownerNode = NodeUtil.getBestLValueOwner(node);",
      "info" : "VariableDeclarationStatement[26554-26605]:VariableDeclarationStatement[26554-26605]"
    }, {
      "left" : "String ownerName = NodeUtil.getBestLValueName(ownerNode);",
      "right" : "String ownerName = NodeUtil.getBestLValueName(ownerNode);",
      "info" : "VariableDeclarationStatement[26616-26673]:VariableDeclarationStatement[26616-26673]"
    }, {
      "left" : "ObjectType ownerType = null;",
      "right" : "ObjectType ownerType = null;",
      "info" : "VariableDeclarationStatement[26684-26712]:VariableDeclarationStatement[26684-26712]"
    }, {
      "left" : "if (ownerName != null)",
      "right" : "if (ownerName != null)",
      "info" : "IfStatement[26723-27123]:IfStatement[26723-27123]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26746-27123]:Block[26746-27123]"
    }, {
      "left" : "Var ownerVar = scope.getVar(ownerName);",
      "right" : "Var ownerVar = scope.getVar(ownerName);",
      "info" : "VariableDeclarationStatement[26760-26799]:VariableDeclarationStatement[26760-26799]"
    }, {
      "left" : "if (ownerVar != null)",
      "right" : "if (ownerVar != null)",
      "info" : "IfStatement[26812-27111]:IfStatement[26812-27111]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26834-27111]:Block[26834-27111]"
    }, {
      "left" : "ownerType = getPrototypeOwnerType(\n                  ObjectType.cast(ownerVar.getType()));",
      "right" : "ownerType = getPrototypeOwnerType(\n                  ObjectType.cast(ownerVar.getType()));",
      "info" : "ExpressionStatement[26850-26940]:ExpressionStatement[26850-26940]"
    }, {
      "left" : "if (ownerType != null)",
      "right" : "if (ownerType != null)",
      "info" : "IfStatement[26955-27097]:IfStatement[26955-27097]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26978-27097]:Block[26978-27097]"
    }, {
      "left" : "ownerTypeKeys =\n                    ownerType.getTemplateTypeMap().getTemplateKeys();",
      "right" : "ownerTypeKeys =\n                    ownerType.getTemplateTypeMap().getTemplateKeys();",
      "info" : "ExpressionStatement[26996-27081]:ExpressionStatement[26996-27081]"
    }, {
      "left" : "if (!ownerTypeKeys.isEmpty())",
      "right" : "if (!ownerTypeKeys.isEmpty())",
      "info" : "IfStatement[27135-27240]:IfStatement[27135-27240]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27165-27240]:Block[27165-27240]"
    }, {
      "left" : "typeRegistry.setTemplateTypeNames(ownerTypeKeys);",
      "right" : "typeRegistry.setTemplateTypeNames(ownerTypeKeys);",
      "info" : "ExpressionStatement[27179-27228]:ExpressionStatement[27179-27228]"
    }, {
      "left" : "jsType = info.getType().evaluate(scope, typeRegistry);",
      "right" : "jsType = info.getType().evaluate(scope, typeRegistry);",
      "info" : "ExpressionStatement[27252-27306]:ExpressionStatement[27252-27306]"
    }, {
      "left" : "if (!ownerTypeKeys.isEmpty())",
      "right" : "if (!ownerTypeKeys.isEmpty())",
      "info" : "IfStatement[27318-27412]:IfStatement[27318-27412]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27348-27412]:Block[27348-27412]"
    }, {
      "left" : "typeRegistry.clearTemplateTypeNames();",
      "right" : "typeRegistry.clearTemplateTypeNames();",
      "info" : "ExpressionStatement[27362-27400]:ExpressionStatement[27362-27400]"
    }, {
      "left" : "if (FunctionTypeBuilder.isFunctionTypeDeclaration(info))",
      "right" : "if (FunctionTypeBuilder.isFunctionTypeDeclaration(info))",
      "info" : "IfStatement[27428-27636]:IfStatement[27428-27636]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27485-27636]:Block[27485-27636]"
    }, {
      "left" : "String fnName = node.getQualifiedName();",
      "right" : "String fnName = node.getQualifiedName();",
      "info" : "VariableDeclarationStatement[27497-27537]:VariableDeclarationStatement[27497-27537]"
    }, {
      "left" : "jsType = createFunctionTypeFromNodes(\n              null, fnName, info, node);",
      "right" : "jsType = createFunctionTypeFromNodes(\n              null, fnName, info, node);",
      "info" : "ExpressionStatement[27548-27626]:ExpressionStatement[27548-27626]"
    }, {
      "left" : "return jsType;",
      "right" : "return jsType;",
      "info" : "ReturnStatement[27651-27665]:ReturnStatement[27651-27665]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[27821-27825]:PrimitiveType[27821-27825]"
    }, {
      "left" : "assertDefinitionNode",
      "right" : "assertDefinitionNode",
      "info" : "SimpleName[27826-27846]:SimpleName[27826-27846]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[27847-27853]:SingleVariableDeclaration[27847-27853]"
    }, {
      "left" : "int type",
      "right" : "int type",
      "info" : "SingleVariableDeclaration[27855-27863]:SingleVariableDeclaration[27855-27863]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27865-27977]:Block[27865-27977]"
    }, {
      "left" : "Preconditions.checkState(sourceName != null);",
      "right" : "Preconditions.checkState(sourceName != null);",
      "info" : "ExpressionStatement[27873-27918]:ExpressionStatement[27873-27918]"
    }, {
      "left" : "Preconditions.checkState(n.getType() == type);",
      "right" : "Preconditions.checkState(n.getType() == type);",
      "info" : "ExpressionStatement[27925-27971]:ExpressionStatement[27925-27971]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[28033-28037]:PrimitiveType[28033-28037]"
    }, {
      "left" : "defineCatch",
      "right" : "defineCatch",
      "info" : "SimpleName[28038-28049]:SimpleName[28038-28049]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[28050-28056]:SingleVariableDeclaration[28050-28056]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28058-28268]:Block[28058-28268]"
    }, {
      "left" : "assertDefinitionNode(n, Token.CATCH);",
      "right" : "assertDefinitionNode(n, Token.CATCH);",
      "info" : "ExpressionStatement[28066-28103]:ExpressionStatement[28066-28103]"
    }, {
      "left" : "Node catchName = n.getFirstChild();",
      "right" : "Node catchName = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[28110-28145]:VariableDeclarationStatement[28110-28145]"
    }, {
      "left" : "defineSlot(catchName, n,\n          getDeclaredType(\n              catchName.getJSDocInfo(), catchName, null));",
      "right" : "defineSlot(catchName, n,\n          getDeclaredType(\n              catchName.getJSDocInfo(), catchName, null));",
      "info" : "ExpressionStatement[28152-28262]:ExpressionStatement[28152-28262]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[28327-28331]:PrimitiveType[28327-28331]"
    }, {
      "left" : "defineVar",
      "right" : "defineVar",
      "info" : "SimpleName[28332-28341]:SimpleName[28332-28341]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[28342-28348]:SingleVariableDeclaration[28342-28348]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28350-28859]:Block[28350-28859]"
    }, {
      "left" : "assertDefinitionNode(n, Token.VAR);",
      "right" : "assertDefinitionNode(n, Token.VAR);",
      "info" : "ExpressionStatement[28358-28393]:ExpressionStatement[28358-28393]"
    }, {
      "left" : "JSDocInfo info = n.getJSDocInfo();",
      "right" : "JSDocInfo info = n.getJSDocInfo();",
      "info" : "VariableDeclarationStatement[28400-28434]:VariableDeclarationStatement[28400-28434]"
    }, {
      "left" : "if (n.hasMoreThanOneChild())",
      "right" : "if (n.hasMoreThanOneChild())",
      "info" : "IfStatement[28441-28853]:IfStatement[28441-28853]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28470-28725]:Block[28470-28725]"
    }, {
      "left" : "if (info != null)",
      "right" : "if (info != null)",
      "info" : "IfStatement[28480-28614]:IfStatement[28480-28614]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28498-28614]:Block[28498-28614]"
    }, {
      "left" : "compiler.report(JSError.make(sourceName, n, MULTIPLE_VAR_DEF));",
      "right" : "compiler.report(JSError.make(sourceName, n, MULTIPLE_VAR_DEF));",
      "info" : "ExpressionStatement[28541-28604]:ExpressionStatement[28541-28604]"
    }, {
      "left" : "for (Node name : n.children())",
      "right" : "for (Node name : n.children())",
      "info" : "EnhancedForStatement[28623-28717]:EnhancedForStatement[28623-28717]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28654-28717]:Block[28654-28717]"
    }, {
      "left" : "defineName(name, n, name.getJSDocInfo());",
      "right" : "defineName(name, n, name.getJSDocInfo());",
      "info" : "ExpressionStatement[28666-28707]:ExpressionStatement[28666-28707]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28731-28853]:Block[28731-28853]"
    }, {
      "left" : "Node name = n.getFirstChild();",
      "right" : "Node name = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[28741-28771]:VariableDeclarationStatement[28741-28771]"
    }, {
      "left" : "defineName(name, n, (info != null) ? info : name.getJSDocInfo());",
      "right" : "defineName(name, n, (info != null) ? info : name.getJSDocInfo());",
      "info" : "ExpressionStatement[28780-28845]:ExpressionStatement[28780-28845]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[28916-28920]:PrimitiveType[28916-28920]"
    }, {
      "left" : "defineFunctionLiteral",
      "right" : "defineFunctionLiteral",
      "info" : "SimpleName[28921-28942]:SimpleName[28921-28942]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[28943-28949]:SingleVariableDeclaration[28943-28949]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28951-29753]:Block[28951-29753]"
    }, {
      "left" : "assertDefinitionNode(n, Token.FUNCTION);",
      "right" : "assertDefinitionNode(n, Token.FUNCTION);",
      "info" : "ExpressionStatement[28959-28999]:ExpressionStatement[28959-28999]"
    }, {
      "left" : "Node lValue = NodeUtil.getBestLValue(n);",
      "right" : "Node lValue = NodeUtil.getBestLValue(n);",
      "info" : "VariableDeclarationStatement[29114-29154]:VariableDeclarationStatement[29114-29154]"
    }, {
      "left" : "JSDocInfo info = NodeUtil.getBestJSDocInfo(n);",
      "right" : "JSDocInfo info = NodeUtil.getBestJSDocInfo(n);",
      "info" : "VariableDeclarationStatement[29161-29207]:VariableDeclarationStatement[29161-29207]"
    }, {
      "left" : "String functionName = NodeUtil.getBestLValueName(lValue);",
      "right" : "String functionName = NodeUtil.getBestLValueName(lValue);",
      "info" : "VariableDeclarationStatement[29214-29271]:VariableDeclarationStatement[29214-29271]"
    }, {
      "left" : "FunctionType functionType =\n          createFunctionTypeFromNodes(n, functionName, info, lValue);",
      "right" : "FunctionType functionType =\n          createFunctionTypeFromNodes(n, functionName, info, lValue);",
      "info" : "VariableDeclarationStatement[29278-29375]:VariableDeclarationStatement[29278-29375]"
    }, {
      "left" : "setDeferredType(n, functionType);",
      "right" : "setDeferredType(n, functionType);",
      "info" : "ExpressionStatement[29441-29474]:ExpressionStatement[29441-29474]"
    }, {
      "left" : "if (NodeUtil.isFunctionDeclaration(n))",
      "right" : "if (NodeUtil.isFunctionDeclaration(n))",
      "info" : "IfStatement[29643-29747]:IfStatement[29643-29747]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29682-29747]:Block[29682-29747]"
    }, {
      "left" : "defineSlot(n.getFirstChild(), n, functionType);",
      "right" : "defineSlot(n.getFirstChild(), n, functionType);",
      "info" : "ExpressionStatement[29692-29739]:ExpressionStatement[29692-29739]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[30100-30107]:Modifier[30100-30107]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[30108-30112]:PrimitiveType[30108-30112]"
    }, {
      "left" : "defineName",
      "right" : "defineName",
      "info" : "SimpleName[30113-30123]:SimpleName[30113-30123]"
    }, {
      "left" : "Node name",
      "right" : "Node name",
      "info" : "SingleVariableDeclaration[30124-30133]:SingleVariableDeclaration[30124-30133]"
    }, {
      "left" : "Node var",
      "right" : "Node var",
      "info" : "SingleVariableDeclaration[30135-30143]:SingleVariableDeclaration[30135-30143]"
    }, {
      "left" : "JSDocInfo info",
      "right" : "JSDocInfo info",
      "info" : "SingleVariableDeclaration[30145-30159]:SingleVariableDeclaration[30145-30159]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30161-30467]:Block[30161-30467]"
    }, {
      "left" : "Node value = name.getFirstChild();",
      "right" : "Node value = name.getFirstChild();",
      "info" : "VariableDeclarationStatement[30169-30203]:VariableDeclarationStatement[30169-30203]"
    }, {
      "left" : "JSType type = getDeclaredType(info, name, value);",
      "right" : "JSType type = getDeclaredType(info, name, value);",
      "info" : "VariableDeclarationStatement[30236-30285]:VariableDeclarationStatement[30236-30285]"
    }, {
      "left" : "if (type == null)",
      "right" : "if (type == null)",
      "info" : "IfStatement[30292-30426]:IfStatement[30292-30426]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30310-30426]:Block[30310-30426]"
    }, {
      "left" : "type = name.isFromExterns() ? unknownType : null;",
      "right" : "type = name.isFromExterns() ? unknownType : null;",
      "info" : "ExpressionStatement[30369-30418]:ExpressionStatement[30369-30418]"
    }, {
      "left" : "defineSlot(name, var, type);",
      "right" : "defineSlot(name, var, type);",
      "info" : "ExpressionStatement[30433-30461]:ExpressionStatement[30433-30461]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[30797-30804]:Modifier[30797-30804]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[30805-30812]:PrimitiveType[30805-30812]"
    }, {
      "left" : "shouldUseFunctionLiteralType",
      "right" : "shouldUseFunctionLiteralType",
      "info" : "SimpleName[30813-30841]:SimpleName[30813-30841]"
    }, {
      "left" : "FunctionType type",
      "right" : "FunctionType type",
      "info" : "SingleVariableDeclaration[30851-30868]:SingleVariableDeclaration[30851-30868]"
    }, {
      "left" : "JSDocInfo info",
      "right" : "JSDocInfo info",
      "info" : "SingleVariableDeclaration[30870-30884]:SingleVariableDeclaration[30870-30884]"
    }, {
      "left" : "Node lValue",
      "right" : "Node lValue",
      "info" : "SingleVariableDeclaration[30886-30897]:SingleVariableDeclaration[30886-30897]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30899-31127]:Block[30899-31127]"
    }, {
      "left" : "if (info != null)",
      "right" : "if (info != null)",
      "info" : "IfStatement[30907-30955]:IfStatement[30907-30955]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30925-30955]:Block[30925-30955]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[30935-30947]:ReturnStatement[30935-30947]"
    }, {
      "left" : "if (lValue != null &&\n          NodeUtil.isObjectLitKey(lValue))",
      "right" : "if (lValue != null &&\n          NodeUtil.isObjectLitKey(lValue))",
      "info" : "IfStatement[30962-31058]:IfStatement[30962-31058]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31027-31058]:Block[31027-31058]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[31037-31050]:ReturnStatement[31037-31050]"
    }, {
      "left" : "return scope.isGlobal() || !type.isReturnTypeInferred();",
      "right" : "return scope.isGlobal() || !type.isReturnTypeInferred();",
      "info" : "ReturnStatement[31065-31121]:ReturnStatement[31065-31121]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[32154-32161]:Modifier[32154-32161]"
    }, {
      "left" : "FunctionType",
      "right" : "FunctionType",
      "info" : "SimpleType[32162-32174]:SimpleType[32162-32174]"
    }, {
      "left" : "createFunctionTypeFromNodes",
      "right" : "createFunctionTypeFromNodes",
      "info" : "SimpleName[32175-32202]:SimpleName[32175-32202]"
    }, {
      "left" : "@Nullable Node rValue",
      "right" : "@Nullable Node rValue",
      "info" : "SingleVariableDeclaration[32212-32233]:SingleVariableDeclaration[32212-32233]"
    }, {
      "left" : "@Nullable String name",
      "right" : "@Nullable String name",
      "info" : "SingleVariableDeclaration[32243-32264]:SingleVariableDeclaration[32243-32264]"
    }, {
      "left" : "@Nullable JSDocInfo info",
      "right" : "@Nullable JSDocInfo info",
      "info" : "SingleVariableDeclaration[32274-32298]:SingleVariableDeclaration[32274-32298]"
    }, {
      "left" : "@Nullable Node lvalueNode",
      "right" : "@Nullable Node lvalueNode",
      "info" : "SingleVariableDeclaration[32308-32333]:SingleVariableDeclaration[32308-32333]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32335-36717]:Block[32335-36717]"
    }, {
      "left" : "FunctionType functionType = null;",
      "right" : "FunctionType functionType = null;",
      "info" : "VariableDeclarationStatement[32344-32377]:VariableDeclarationStatement[32344-32377]"
    }, {
      "left" : "if (rValue != null && rValue.isQualifiedName() && scope.isGlobal())",
      "right" : "if (rValue != null && rValue.isQualifiedName() && scope.isGlobal())",
      "info" : "IfStatement[32459-33102]:IfStatement[32459-33102]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32527-33102]:Block[32527-33102]"
    }, {
      "left" : "Var var = scope.getVar(rValue.getQualifiedName());",
      "right" : "Var var = scope.getVar(rValue.getQualifiedName());",
      "info" : "VariableDeclarationStatement[32537-32587]:VariableDeclarationStatement[32537-32587]"
    }, {
      "left" : "if (var != null && var.getType() != null &&\n            var.getType().isFunctionType())",
      "right" : "if (var != null && var.getType() != null &&\n            var.getType().isFunctionType())",
      "info" : "IfStatement[32596-33094]:IfStatement[32596-33094]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32684-33094]:Block[32684-33094]"
    }, {
      "left" : "FunctionType aliasedType  = var.getType().toMaybeFunctionType();",
      "right" : "FunctionType aliasedType  = var.getType().toMaybeFunctionType();",
      "info" : "VariableDeclarationStatement[32696-32760]:VariableDeclarationStatement[32696-32760]"
    }, {
      "left" : "if ((aliasedType.isConstructor() || aliasedType.isInterface()) &&\n              !aliasedType.isNativeObjectType())",
      "right" : "if ((aliasedType.isConstructor() || aliasedType.isInterface()) &&\n              !aliasedType.isNativeObjectType())",
      "info" : "IfStatement[32771-33084]:IfStatement[32771-33084]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32886-33084]:Block[32886-33084]"
    }, {
      "left" : "functionType = aliasedType;",
      "right" : "functionType = aliasedType;",
      "info" : "ExpressionStatement[32900-32927]:ExpressionStatement[32900-32927]"
    }, {
      "left" : "if (name != null && scope.isGlobal())",
      "right" : "if (name != null && scope.isGlobal())",
      "info" : "IfStatement[32941-33072]:IfStatement[32941-33072]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32979-33072]:Block[32979-33072]"
    }, {
      "left" : "typeRegistry.declareType(name, functionType.getInstanceType());",
      "right" : "typeRegistry.declareType(name, functionType.getInstanceType());",
      "info" : "ExpressionStatement[32995-33058]:ExpressionStatement[32995-33058]"
    }, {
      "left" : "if (functionType == null)",
      "right" : "if (functionType == null)",
      "info" : "IfStatement[33110-36665]:IfStatement[33110-36665]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33136-36665]:Block[33136-36665]"
    }, {
      "left" : "Node errorRoot = rValue == null ? lvalueNode : rValue;",
      "right" : "Node errorRoot = rValue == null ? lvalueNode : rValue;",
      "info" : "VariableDeclarationStatement[33146-33200]:VariableDeclarationStatement[33146-33200]"
    }, {
      "left" : "boolean isFnLiteral =\n            rValue != null && rValue.isFunction();",
      "right" : "boolean isFnLiteral =\n            rValue != null && rValue.isFunction();",
      "info" : "VariableDeclarationStatement[33209-33281]:VariableDeclarationStatement[33209-33281]"
    }, {
      "left" : "Node fnRoot = isFnLiteral ? rValue : null;",
      "right" : "Node fnRoot = isFnLiteral ? rValue : null;",
      "info" : "VariableDeclarationStatement[33290-33332]:VariableDeclarationStatement[33290-33332]"
    }, {
      "left" : "Node parametersNode = isFnLiteral ?\n            rValue.getFirstChild().getNext() : null;",
      "right" : "Node parametersNode = isFnLiteral ?\n            rValue.getFirstChild().getNext() : null;",
      "info" : "VariableDeclarationStatement[33341-33429]:VariableDeclarationStatement[33341-33429]"
    }, {
      "left" : "if (info != null && info.hasType())",
      "right" : "if (info != null && info.hasType())",
      "info" : "IfStatement[33439-33836]:IfStatement[33439-33836]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33475-33836]:Block[33475-33836]"
    }, {
      "left" : "JSType type = info.getType().evaluate(scope, typeRegistry);",
      "right" : "JSType type = info.getType().evaluate(scope, typeRegistry);",
      "info" : "VariableDeclarationStatement[33487-33546]:VariableDeclarationStatement[33487-33546]"
    }, {
      "left" : "type = type.restrictByNotNullOrUndefined();",
      "right" : "type = type.restrictByNotNullOrUndefined();",
      "info" : "ExpressionStatement[33632-33675]:ExpressionStatement[33632-33675]"
    }, {
      "left" : "if (type.isFunctionType())",
      "right" : "if (type.isFunctionType())",
      "info" : "IfStatement[33686-33826]:IfStatement[33686-33826]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33713-33826]:Block[33713-33826]"
    }, {
      "left" : "functionType = type.toMaybeFunctionType();",
      "right" : "functionType = type.toMaybeFunctionType();",
      "info" : "ExpressionStatement[33727-33769]:ExpressionStatement[33727-33769]"
    }, {
      "left" : "functionType.setJSDocInfo(info);",
      "right" : "functionType.setJSDocInfo(info);",
      "info" : "ExpressionStatement[33782-33814]:ExpressionStatement[33782-33814]"
    }, {
      "left" : "if (functionType == null)",
      "right" : "if (functionType == null)",
      "info" : "IfStatement[33846-36657]:IfStatement[33846-36657]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33872-36657]:Block[33872-36657]"
    }, {
      "left" : "Node ownerNode = NodeUtil.getBestLValueOwner(lvalueNode);",
      "right" : "Node ownerNode = NodeUtil.getBestLValueOwner(lvalueNode);",
      "info" : "VariableDeclarationStatement[33939-33996]:VariableDeclarationStatement[33939-33996]"
    }, {
      "left" : "String ownerName = NodeUtil.getBestLValueName(ownerNode);",
      "right" : "String ownerName = NodeUtil.getBestLValueName(ownerNode);",
      "info" : "VariableDeclarationStatement[34007-34064]:VariableDeclarationStatement[34007-34064]"
    }, {
      "left" : "Var ownerVar = null;",
      "right" : "Var ownerVar = null;",
      "info" : "VariableDeclarationStatement[34075-34095]:VariableDeclarationStatement[34075-34095]"
    }, {
      "left" : "String propName = null;",
      "right" : "String propName = null;",
      "info" : "VariableDeclarationStatement[34106-34129]:VariableDeclarationStatement[34106-34129]"
    }, {
      "left" : "ObjectType ownerType = null;",
      "right" : "ObjectType ownerType = null;",
      "info" : "VariableDeclarationStatement[34140-34168]:VariableDeclarationStatement[34140-34168]"
    }, {
      "left" : "if (ownerName != null)",
      "right" : "if (ownerName != null)",
      "info" : "IfStatement[34179-34487]:IfStatement[34179-34487]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34202-34487]:Block[34202-34487]"
    }, {
      "left" : "ownerVar = scope.getVar(ownerName);",
      "right" : "ownerVar = scope.getVar(ownerName);",
      "info" : "ExpressionStatement[34216-34251]:ExpressionStatement[34216-34251]"
    }, {
      "left" : "if (ownerVar != null)",
      "right" : "if (ownerVar != null)",
      "info" : "IfStatement[34264-34364]:IfStatement[34264-34364]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34286-34364]:Block[34286-34364]"
    }, {
      "left" : "ownerType = ObjectType.cast(ownerVar.getType());",
      "right" : "ownerType = ObjectType.cast(ownerVar.getType());",
      "info" : "ExpressionStatement[34302-34350]:ExpressionStatement[34302-34350]"
    }, {
      "left" : "if (name != null)",
      "right" : "if (name != null)",
      "info" : "IfStatement[34377-34475]:IfStatement[34377-34475]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34395-34475]:Block[34395-34475]"
    }, {
      "left" : "propName = name.substring(ownerName.length() + 1);",
      "right" : "propName = name.substring(ownerName.length() + 1);",
      "info" : "ExpressionStatement[34411-34461]:ExpressionStatement[34411-34461]"
    }, {
      "left" : "ObjectType prototypeOwner = getPrototypeOwnerType(ownerType);",
      "right" : "ObjectType prototypeOwner = getPrototypeOwnerType(ownerType);",
      "info" : "VariableDeclarationStatement[34499-34560]:VariableDeclarationStatement[34499-34560]"
    }, {
      "left" : "TemplateTypeMap prototypeOwnerTypeMap = null;",
      "right" : "TemplateTypeMap prototypeOwnerTypeMap = null;",
      "info" : "VariableDeclarationStatement[34571-34616]:VariableDeclarationStatement[34571-34616]"
    }, {
      "left" : "if (prototypeOwner != null &&\n              prototypeOwner.getTypeOfThis() != null)",
      "right" : "if (prototypeOwner != null &&\n              prototypeOwner.getTypeOfThis() != null)",
      "info" : "IfStatement[34627-34833]:IfStatement[34627-34833]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34711-34833]:Block[34711-34833]"
    }, {
      "left" : "prototypeOwnerTypeMap =\n                  prototypeOwner.getTypeOfThis().getTemplateTypeMap();",
      "right" : "prototypeOwnerTypeMap =\n                  prototypeOwner.getTypeOfThis().getTemplateTypeMap();",
      "info" : "ExpressionStatement[34727-34821]:ExpressionStatement[34727-34821]"
    }, {
      "left" : "FunctionType overriddenType = null;",
      "right" : "FunctionType overriddenType = null;",
      "info" : "VariableDeclarationStatement[34845-34880]:VariableDeclarationStatement[34845-34880]"
    }, {
      "left" : "if (ownerType != null && propName != null)",
      "right" : "if (ownerType != null && propName != null)",
      "info" : "IfStatement[34891-35061]:IfStatement[34891-35061]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34934-35061]:Block[34934-35061]"
    }, {
      "left" : "overriddenType = findOverriddenFunction(\n                ownerType, propName, prototypeOwnerTypeMap);",
      "right" : "overriddenType = findOverriddenFunction(\n                ownerType, propName, prototypeOwnerTypeMap);",
      "info" : "ExpressionStatement[34948-35049]:ExpressionStatement[34948-35049]"
    }, {
      "left" : "FunctionTypeBuilder builder =\n              new FunctionTypeBuilder(name, compiler, errorRoot, sourceName,\n                  scope)\n              .setContents(getFunctionAnalysisResults(fnRoot))\n              .inferFromOverriddenFunction(overriddenType, parametersNode)\n              .inferTemplateTypeName(info, prototypeOwner)\n              .inferReturnType(info)\n              .inferInheritance(info);",
      "right" : "FunctionTypeBuilder builder =\n              new FunctionTypeBuilder(name, compiler, errorRoot, sourceName,\n                  scope)\n              .setContents(getFunctionAnalysisResults(fnRoot))\n              .inferFromOverriddenFunction(overriddenType, parametersNode)\n              .inferTemplateTypeName(info, prototypeOwner)\n              .inferReturnType(info)\n              .inferInheritance(info);",
      "info" : "VariableDeclarationStatement[35073-35477]:VariableDeclarationStatement[35073-35477]"
    }, {
      "left" : "boolean searchedForThisType = false;",
      "right" : "boolean searchedForThisType = false;",
      "info" : "VariableDeclarationStatement[35526-35562]:VariableDeclarationStatement[35526-35562]"
    }, {
      "left" : "if (ownerType != null && ownerType.isFunctionPrototypeType() &&\n              ownerType.getOwnerFunction().hasInstanceType())",
      "right" : "if (ownerType != null && ownerType.isFunctionPrototypeType() &&\n              ownerType.getOwnerFunction().hasInstanceType())",
      "info" : "IfStatement[35573-36429]:IfStatement[35573-36429]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35699-35858]:Block[35699-35858]"
    }, {
      "left" : "builder.inferThisType(\n                info, ownerType.getOwnerFunction().getInstanceType());",
      "right" : "builder.inferThisType(\n                info, ownerType.getOwnerFunction().getInstanceType());",
      "info" : "ExpressionStatement[35713-35806]:ExpressionStatement[35713-35806]"
    }, {
      "left" : "searchedForThisType = true;",
      "right" : "searchedForThisType = true;",
      "info" : "ExpressionStatement[35819-35846]:ExpressionStatement[35819-35846]"
    }, {
      "left" : "if (ownerNode != null && ownerNode.isThis())",
      "right" : "if (ownerNode != null && ownerNode.isThis())",
      "info" : "IfStatement[35864-36429]:IfStatement[35864-36429]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35909-36429]:Block[35909-36429]"
    }, {
      "left" : "JSType injectedThisType = ownerNode.getJSType();",
      "right" : "JSType injectedThisType = ownerNode.getJSType();",
      "info" : "VariableDeclarationStatement[36170-36218]:VariableDeclarationStatement[36170-36218]"
    }, {
      "left" : "builder.inferThisType(\n                info,\n                injectedThisType == null ?\n                scope.getTypeOfThis() : injectedThisType);",
      "right" : "builder.inferThisType(\n                info,\n                injectedThisType == null ?\n                scope.getTypeOfThis() : injectedThisType);",
      "info" : "ExpressionStatement[36231-36377]:ExpressionStatement[36231-36377]"
    }, {
      "left" : "searchedForThisType = true;",
      "right" : "searchedForThisType = true;",
      "info" : "ExpressionStatement[36390-36417]:ExpressionStatement[36390-36417]"
    }, {
      "left" : "if (!searchedForThisType)",
      "right" : "if (!searchedForThisType)",
      "info" : "IfStatement[36441-36521]:IfStatement[36441-36521]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36467-36521]:Block[36467-36521]"
    }, {
      "left" : "builder.inferThisType(info);",
      "right" : "builder.inferThisType(info);",
      "info" : "ExpressionStatement[36481-36509]:ExpressionStatement[36481-36509]"
    }, {
      "left" : "functionType = builder\n              .inferParameterTypes(parametersNode, info)\n              .buildAndRegister();",
      "right" : "functionType = builder\n              .inferParameterTypes(parametersNode, info)\n              .buildAndRegister();",
      "info" : "ExpressionStatement[36533-36647]:ExpressionStatement[36533-36647]"
    }, {
      "left" : "return functionType;",
      "right" : "return functionType;",
      "info" : "ReturnStatement[36691-36711]:ReturnStatement[36691-36711]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[36723-36730]:Modifier[36723-36730]"
    }, {
      "left" : "ObjectType",
      "right" : "ObjectType",
      "info" : "SimpleType[36731-36741]:SimpleType[36731-36741]"
    }, {
      "left" : "getPrototypeOwnerType",
      "right" : "getPrototypeOwnerType",
      "info" : "SimpleName[36742-36763]:SimpleName[36742-36763]"
    }, {
      "left" : "ObjectType ownerType",
      "right" : "ObjectType ownerType",
      "info" : "SingleVariableDeclaration[36764-36784]:SingleVariableDeclaration[36764-36784]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36786-36935]:Block[36786-36935]"
    }, {
      "left" : "if (ownerType != null && ownerType.isFunctionPrototypeType())",
      "right" : "if (ownerType != null && ownerType.isFunctionPrototypeType())",
      "info" : "IfStatement[36794-36910]:IfStatement[36794-36910]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36856-36910]:Block[36856-36910]"
    }, {
      "left" : "return ownerType.getOwnerFunction();",
      "right" : "return ownerType.getOwnerFunction();",
      "info" : "ReturnStatement[36866-36902]:ReturnStatement[36866-36902]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[36917-36929]:ReturnStatement[36917-36929]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[37028-37035]:Modifier[37028-37035]"
    }, {
      "left" : "FunctionType",
      "right" : "FunctionType",
      "info" : "SimpleType[37036-37048]:SimpleType[37036-37048]"
    }, {
      "left" : "findOverriddenFunction",
      "right" : "findOverriddenFunction",
      "info" : "SimpleName[37049-37071]:SimpleName[37049-37071]"
    }, {
      "left" : "ObjectType ownerType",
      "right" : "ObjectType ownerType",
      "info" : "SingleVariableDeclaration[37081-37101]:SingleVariableDeclaration[37081-37101]"
    }, {
      "left" : "String propName",
      "right" : "String propName",
      "info" : "SingleVariableDeclaration[37103-37118]:SingleVariableDeclaration[37103-37118]"
    }, {
      "left" : "TemplateTypeMap typeMap",
      "right" : "TemplateTypeMap typeMap",
      "info" : "SingleVariableDeclaration[37120-37143]:SingleVariableDeclaration[37120-37143]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37145-38103]:Block[37145-38103]"
    }, {
      "left" : "FunctionType result = null;",
      "right" : "FunctionType result = null;",
      "info" : "VariableDeclarationStatement[37153-37180]:VariableDeclarationStatement[37153-37180]"
    }, {
      "left" : "JSType propType = ownerType.getPropertyType(propName);",
      "right" : "JSType propType = ownerType.getPropertyType(propName);",
      "info" : "VariableDeclarationStatement[37274-37328]:VariableDeclarationStatement[37274-37328]"
    }, {
      "left" : "if (propType != null && propType.isFunctionType())",
      "right" : "if (propType != null && propType.isFunctionType())",
      "info" : "IfStatement[37335-37866]:IfStatement[37335-37866]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37386-37445]:Block[37386-37445]"
    }, {
      "left" : "result =  propType.toMaybeFunctionType();",
      "right" : "result =  propType.toMaybeFunctionType();",
      "info" : "ExpressionStatement[37396-37437]:ExpressionStatement[37396-37437]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37451-37866]:Block[37451-37866]"
    }, {
      "left" : "for (ObjectType iface :\n                 ownerType.getCtorImplementedInterfaces())",
      "right" : "for (ObjectType iface :\n                 ownerType.getCtorImplementedInterfaces())",
      "info" : "EnhancedForStatement[37563-37858]:EnhancedForStatement[37563-37858]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37646-37858]:Block[37646-37858]"
    }, {
      "left" : "propType = iface.getPropertyType(propName);",
      "right" : "propType = iface.getPropertyType(propName);",
      "info" : "ExpressionStatement[37658-37701]:ExpressionStatement[37658-37701]"
    }, {
      "left" : "if (propType != null && propType.isFunctionType())",
      "right" : "if (propType != null && propType.isFunctionType())",
      "info" : "IfStatement[37712-37848]:IfStatement[37712-37848]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37763-37848]:Block[37763-37848]"
    }, {
      "left" : "result = propType.toMaybeFunctionType();",
      "right" : "result = propType.toMaybeFunctionType();",
      "info" : "ExpressionStatement[37777-37817]:ExpressionStatement[37777-37817]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[37830-37836]:BreakStatement[37830-37836]"
    }, {
      "left" : "if (result != null && typeMap != null && !typeMap.isEmpty())",
      "right" : "if (result != null && typeMap != null && !typeMap.isEmpty())",
      "info" : "IfStatement[37874-38075]:IfStatement[37874-38075]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37935-38075]:Block[37935-38075]"
    }, {
      "left" : "result = result.visit(\n            new TemplateTypeMapReplacer(typeRegistry, typeMap))\n            .toMaybeFunctionType();",
      "right" : "result = result.visit(\n            new TemplateTypeMapReplacer(typeRegistry, typeMap))\n            .toMaybeFunctionType();",
      "info" : "ExpressionStatement[37945-38067]:ExpressionStatement[37945-38067]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[38083-38097]:ReturnStatement[38083-38097]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[38793-38800]:Modifier[38793-38800]"
    }, {
      "left" : "EnumType",
      "right" : "EnumType",
      "info" : "SimpleType[38801-38809]:SimpleType[38801-38809]"
    }, {
      "left" : "createEnumTypeFromNodes",
      "right" : "createEnumTypeFromNodes",
      "info" : "SimpleName[38810-38833]:SimpleName[38810-38833]"
    }, {
      "left" : "Node rValue",
      "right" : "Node rValue",
      "info" : "SingleVariableDeclaration[38834-38845]:SingleVariableDeclaration[38834-38845]"
    }, {
      "left" : "String name",
      "right" : "String name",
      "info" : "SingleVariableDeclaration[38847-38858]:SingleVariableDeclaration[38847-38858]"
    }, {
      "left" : "JSDocInfo info",
      "right" : "JSDocInfo info",
      "info" : "SingleVariableDeclaration[38868-38882]:SingleVariableDeclaration[38868-38882]"
    }, {
      "left" : "Node lValueNode",
      "right" : "Node lValueNode",
      "info" : "SingleVariableDeclaration[38884-38899]:SingleVariableDeclaration[38884-38899]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38901-40429]:Block[38901-40429]"
    }, {
      "left" : "Preconditions.checkNotNull(info);",
      "right" : "Preconditions.checkNotNull(info);",
      "info" : "ExpressionStatement[38909-38942]:ExpressionStatement[38909-38942]"
    }, {
      "left" : "Preconditions.checkState(info.hasEnumParameterType());",
      "right" : "Preconditions.checkState(info.hasEnumParameterType());",
      "info" : "ExpressionStatement[38949-39003]:ExpressionStatement[38949-39003]"
    }, {
      "left" : "EnumType enumType = null;",
      "right" : "EnumType enumType = null;",
      "info" : "VariableDeclarationStatement[39011-39036]:VariableDeclarationStatement[39011-39036]"
    }, {
      "left" : "if (rValue != null && rValue.isQualifiedName())",
      "right" : "if (rValue != null && rValue.isQualifiedName())",
      "info" : "IfStatement[39043-39315]:IfStatement[39043-39315]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39091-39315]:Block[39091-39315]"
    }, {
      "left" : "Var var = scope.getVar(rValue.getQualifiedName());",
      "right" : "Var var = scope.getVar(rValue.getQualifiedName());",
      "info" : "VariableDeclarationStatement[39136-39186]:VariableDeclarationStatement[39136-39186]"
    }, {
      "left" : "if (var != null && var.getType() instanceof EnumType)",
      "right" : "if (var != null && var.getType() instanceof EnumType)",
      "info" : "IfStatement[39195-39307]:IfStatement[39195-39307]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39249-39307]:Block[39249-39307]"
    }, {
      "left" : "enumType = (EnumType) var.getType();",
      "right" : "enumType = (EnumType) var.getType();",
      "info" : "ExpressionStatement[39261-39297]:ExpressionStatement[39261-39297]"
    }, {
      "left" : "if (enumType == null)",
      "right" : "if (enumType == null)",
      "info" : "IfStatement[39323-40276]:IfStatement[39323-40276]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39345-40276]:Block[39345-40276]"
    }, {
      "left" : "JSType elementsType =\n            info.getEnumParameterType().evaluate(scope, typeRegistry);",
      "right" : "JSType elementsType =\n            info.getEnumParameterType().evaluate(scope, typeRegistry);",
      "info" : "VariableDeclarationStatement[39355-39447]:VariableDeclarationStatement[39355-39447]"
    }, {
      "left" : "enumType = typeRegistry.createEnumType(name, rValue, elementsType);",
      "right" : "enumType = typeRegistry.createEnumType(name, rValue, elementsType);",
      "info" : "ExpressionStatement[39456-39523]:ExpressionStatement[39456-39523]"
    }, {
      "left" : "if (rValue != null && rValue.isObjectLit())",
      "right" : "if (rValue != null && rValue.isObjectLit())",
      "info" : "IfStatement[39533-40268]:IfStatement[39533-40268]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39577-40268]:Block[39577-40268]"
    }, {
      "left" : "Node key = rValue.getFirstChild();",
      "right" : "Node key = rValue.getFirstChild();",
      "info" : "VariableDeclarationStatement[39624-39658]:VariableDeclarationStatement[39624-39658]"
    }, {
      "left" : "while (key != null)",
      "right" : "while (key != null)",
      "info" : "WhileStatement[39669-40258]:WhileStatement[39669-40258]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39689-40258]:Block[39689-40258]"
    }, {
      "left" : "String keyName = NodeUtil.getStringValue(key);",
      "right" : "String keyName = NodeUtil.getStringValue(key);",
      "info" : "VariableDeclarationStatement[39703-39749]:VariableDeclarationStatement[39703-39749]"
    }, {
      "left" : "if (keyName == null)",
      "right" : "if (keyName == null)",
      "info" : "IfStatement[39762-40213]:IfStatement[39762-40213]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39783-39963]:Block[39783-39963]"
    }, {
      "left" : "compiler.report(\n                  JSError.make(sourceName, key, ENUM_NOT_CONSTANT, keyName));",
      "right" : "compiler.report(\n                  JSError.make(sourceName, key, ENUM_NOT_CONSTANT, keyName));",
      "info" : "ExpressionStatement[39855-39949]:ExpressionStatement[39855-39949]"
    }, {
      "left" : "if (!codingConvention.isValidEnumKey(keyName))",
      "right" : "if (!codingConvention.isValidEnumKey(keyName))",
      "info" : "IfStatement[39969-40213]:IfStatement[39969-40213]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40016-40140]:Block[40016-40140]"
    }, {
      "left" : "compiler.report(\n                  JSError.make(sourceName, key, ENUM_NOT_CONSTANT, keyName));",
      "right" : "compiler.report(\n                  JSError.make(sourceName, key, ENUM_NOT_CONSTANT, keyName));",
      "info" : "ExpressionStatement[40032-40126]:ExpressionStatement[40032-40126]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40146-40213]:Block[40146-40213]"
    }, {
      "left" : "enumType.defineElement(keyName, key);",
      "right" : "enumType.defineElement(keyName, key);",
      "info" : "ExpressionStatement[40162-40199]:ExpressionStatement[40162-40199]"
    }, {
      "left" : "key = key.getNext();",
      "right" : "key = key.getNext();",
      "info" : "ExpressionStatement[40226-40246]:ExpressionStatement[40226-40246]"
    }, {
      "left" : "if (name != null && scope.isGlobal())",
      "right" : "if (name != null && scope.isGlobal())",
      "info" : "IfStatement[40284-40399]:IfStatement[40284-40399]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40322-40399]:Block[40322-40399]"
    }, {
      "left" : "typeRegistry.declareType(name, enumType.getElementsType());",
      "right" : "typeRegistry.declareType(name, enumType.getElementsType());",
      "info" : "ExpressionStatement[40332-40391]:ExpressionStatement[40332-40391]"
    }, {
      "left" : "return enumType;",
      "right" : "return enumType;",
      "info" : "ReturnStatement[40407-40423]:ReturnStatement[40407-40423]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[40839-40846]:Modifier[40839-40846]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[40847-40851]:PrimitiveType[40847-40851]"
    }, {
      "left" : "defineSlot",
      "right" : "defineSlot",
      "info" : "SimpleName[40852-40862]:SimpleName[40852-40862]"
    }, {
      "left" : "Node name",
      "right" : "Node name",
      "info" : "SingleVariableDeclaration[40863-40872]:SingleVariableDeclaration[40863-40872]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[40874-40885]:SingleVariableDeclaration[40874-40885]"
    }, {
      "left" : "JSType type",
      "right" : "JSType type",
      "info" : "SingleVariableDeclaration[40887-40898]:SingleVariableDeclaration[40887-40898]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40900-40959]:Block[40900-40959]"
    }, {
      "left" : "defineSlot(name, parent, type, type == null);",
      "right" : "defineSlot(name, parent, type, type == null);",
      "info" : "ExpressionStatement[40908-40953]:ExpressionStatement[40908-40953]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[41448-41452]:PrimitiveType[41448-41452]"
    }, {
      "left" : "defineSlot",
      "right" : "defineSlot",
      "info" : "SimpleName[41453-41463]:SimpleName[41453-41463]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[41464-41470]:SingleVariableDeclaration[41464-41470]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[41472-41483]:SingleVariableDeclaration[41472-41483]"
    }, {
      "left" : "JSType type",
      "right" : "JSType type",
      "info" : "SingleVariableDeclaration[41485-41496]:SingleVariableDeclaration[41485-41496]"
    }, {
      "left" : "boolean inferred",
      "right" : "boolean inferred",
      "info" : "SingleVariableDeclaration[41498-41514]:SingleVariableDeclaration[41498-41514]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41516-42143]:Block[41516-42143]"
    }, {
      "left" : "Preconditions.checkArgument(inferred || type != null);",
      "right" : "Preconditions.checkArgument(inferred || type != null);",
      "info" : "ExpressionStatement[41524-41578]:ExpressionStatement[41524-41578]"
    }, {
      "left" : "if (n.isName())",
      "right" : "if (n.isName())",
      "info" : "IfStatement[41723-42070]:IfStatement[41723-42070]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41739-41917]:Block[41739-41917]"
    }, {
      "left" : "Preconditions.checkArgument(\n            parent.isFunction() ||\n            parent.isVar() ||\n            parent.isParamList() ||\n            parent.isCatch());",
      "right" : "Preconditions.checkArgument(\n            parent.isFunction() ||\n            parent.isVar() ||\n            parent.isParamList() ||\n            parent.isCatch());",
      "info" : "ExpressionStatement[41749-41909]:ExpressionStatement[41749-41909]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41923-42070]:Block[41923-42070]"
    }, {
      "left" : "Preconditions.checkArgument(\n            n.isGetProp() &&\n            (parent.isAssign() ||\n             parent.isExprResult()));",
      "right" : "Preconditions.checkArgument(\n            n.isGetProp() &&\n            (parent.isAssign() ||\n             parent.isExprResult()));",
      "info" : "ExpressionStatement[41933-42062]:ExpressionStatement[41933-42062]"
    }, {
      "left" : "defineSlot(n, parent, n.getQualifiedName(), type, inferred);",
      "right" : "defineSlot(n, parent, n.getQualifiedName(), type, inferred);",
      "info" : "ExpressionStatement[42077-42137]:ExpressionStatement[42077-42137]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[42579-42583]:PrimitiveType[42579-42583]"
    }, {
      "left" : "defineSlot",
      "right" : "defineSlot",
      "info" : "SimpleName[42584-42594]:SimpleName[42584-42594]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[42595-42601]:SingleVariableDeclaration[42595-42601]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[42603-42614]:SingleVariableDeclaration[42603-42614]"
    }, {
      "left" : "String variableName",
      "right" : "String variableName",
      "info" : "SingleVariableDeclaration[42616-42635]:SingleVariableDeclaration[42616-42635]"
    }, {
      "left" : "JSType type",
      "right" : "JSType type",
      "info" : "SingleVariableDeclaration[42645-42656]:SingleVariableDeclaration[42645-42656]"
    }, {
      "left" : "boolean inferred",
      "right" : "boolean inferred",
      "info" : "SingleVariableDeclaration[42658-42674]:SingleVariableDeclaration[42658-42674]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42676-46422]:Block[42676-46422]"
    }, {
      "left" : "Preconditions.checkArgument(!variableName.isEmpty());",
      "right" : "Preconditions.checkArgument(!variableName.isEmpty());",
      "info" : "ExpressionStatement[42684-42737]:ExpressionStatement[42684-42737]"
    }, {
      "left" : "boolean isGlobalVar = n.isName() && scope.isGlobal();",
      "right" : "boolean isGlobalVar = n.isName() && scope.isGlobal();",
      "info" : "VariableDeclarationStatement[42745-42798]:VariableDeclarationStatement[42745-42798]"
    }, {
      "left" : "boolean shouldDeclareOnGlobalThis =\n          isGlobalVar &&\n          (parent.isVar() ||\n           parent.isFunction());",
      "right" : "boolean shouldDeclareOnGlobalThis =\n          isGlobalVar &&\n          (parent.isVar() ||\n           parent.isFunction());",
      "info" : "VariableDeclarationStatement[42805-42927]:VariableDeclarationStatement[42805-42927]"
    }, {
      "left" : "Scope scopeToDeclareIn = scope;",
      "right" : "Scope scopeToDeclareIn = scope;",
      "info" : "VariableDeclarationStatement[43135-43166]:VariableDeclarationStatement[43135-43166]"
    }, {
      "left" : "if (n.isGetProp() && !scope.isGlobal() &&\n          isQnameRootedInGlobalScope(n))",
      "right" : "if (n.isGetProp() && !scope.isGlobal() &&\n          isQnameRootedInGlobalScope(n))",
      "info" : "IfStatement[43173-43554]:IfStatement[43173-43554]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43256-43554]:Block[43256-43554]"
    }, {
      "left" : "Scope globalScope = scope.getGlobalScope();",
      "right" : "Scope globalScope = scope.getGlobalScope();",
      "info" : "VariableDeclarationStatement[43266-43309]:VariableDeclarationStatement[43266-43309]"
    }, {
      "left" : "if (!globalScope.isDeclared(variableName, false))",
      "right" : "if (!globalScope.isDeclared(variableName, false))",
      "info" : "IfStatement[43432-43546]:IfStatement[43432-43546]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43482-43546]:Block[43482-43546]"
    }, {
      "left" : "scopeToDeclareIn = scope.getGlobalScope();",
      "right" : "scopeToDeclareIn = scope.getGlobalScope();",
      "info" : "ExpressionStatement[43494-43536]:ExpressionStatement[43494-43536]"
    }, {
      "left" : "Var newVar = null;",
      "right" : "Var newVar = null;",
      "info" : "VariableDeclarationStatement[43679-43697]:VariableDeclarationStatement[43679-43697]"
    }, {
      "left" : "CompilerInput input = compiler.getInput(inputId);",
      "right" : "CompilerInput input = compiler.getInput(inputId);",
      "info" : "VariableDeclarationStatement[43741-43790]:VariableDeclarationStatement[43741-43790]"
    }, {
      "left" : "if (scopeToDeclareIn.isDeclared(variableName, false))",
      "right" : "if (scopeToDeclareIn.isDeclared(variableName, false))",
      "info" : "IfStatement[43797-44603]:IfStatement[43797-44603]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43851-44044]:Block[43851-44044]"
    }, {
      "left" : "Var oldVar = scopeToDeclareIn.getVar(variableName);",
      "right" : "Var oldVar = scopeToDeclareIn.getVar(variableName);",
      "info" : "VariableDeclarationStatement[43861-43912]:VariableDeclarationStatement[43861-43912]"
    }, {
      "left" : "newVar = validator.expectUndeclaredVariable(\n            sourceName, input, n, parent, oldVar, variableName, type);",
      "right" : "newVar = validator.expectUndeclaredVariable(\n            sourceName, input, n, parent, oldVar, variableName, type);",
      "info" : "ExpressionStatement[43921-44036]:ExpressionStatement[43921-44036]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44050-44603]:Block[44050-44603]"
    }, {
      "left" : "if (type != null)",
      "right" : "if (type != null)",
      "info" : "IfStatement[44060-44125]:IfStatement[44060-44125]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44078-44125]:Block[44078-44125]"
    }, {
      "left" : "setDeferredType(n, type);",
      "right" : "setDeferredType(n, type);",
      "info" : "ExpressionStatement[44090-44115]:ExpressionStatement[44090-44115]"
    }, {
      "left" : "newVar =\n          scopeToDeclareIn.declare(variableName, n, type, input, inferred);",
      "right" : "newVar =\n          scopeToDeclareIn.declare(variableName, n, type, input, inferred);",
      "info" : "ExpressionStatement[44135-44219]:ExpressionStatement[44135-44219]"
    }, {
      "left" : "if (type instanceof EnumType)",
      "right" : "if (type instanceof EnumType)",
      "info" : "IfStatement[44229-44595]:IfStatement[44229-44595]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44259-44595]:Block[44259-44595]"
    }, {
      "left" : "Node initialValue = newVar.getInitialValue();",
      "right" : "Node initialValue = newVar.getInitialValue();",
      "info" : "VariableDeclarationStatement[44271-44316]:VariableDeclarationStatement[44271-44316]"
    }, {
      "left" : "boolean isValidValue = initialValue != null &&\n              (initialValue.isObjectLit() ||\n               initialValue.isQualifiedName());",
      "right" : "boolean isValidValue = initialValue != null &&\n              (initialValue.isObjectLit() ||\n               initialValue.isQualifiedName());",
      "info" : "VariableDeclarationStatement[44327-44466]:VariableDeclarationStatement[44327-44466]"
    }, {
      "left" : "if (!isValidValue)",
      "right" : "if (!isValidValue)",
      "info" : "IfStatement[44477-44585]:IfStatement[44477-44585]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44496-44585]:Block[44496-44585]"
    }, {
      "left" : "compiler.report(JSError.make(sourceName, n, ENUM_INITIALIZER));",
      "right" : "compiler.report(JSError.make(sourceName, n, ENUM_INITIALIZER));",
      "info" : "ExpressionStatement[44510-44573]:ExpressionStatement[44510-44573]"
    }, {
      "left" : "FunctionType fnType = JSType.toMaybeFunctionType(type);",
      "right" : "FunctionType fnType = JSType.toMaybeFunctionType(type);",
      "info" : "VariableDeclarationStatement[44688-44743]:VariableDeclarationStatement[44688-44743]"
    }, {
      "left" : "if (fnType != null &&\n          // We don't want to look at empty function types.\n          !type.isEmptyType())",
      "right" : "if (fnType != null &&\n          // We don't want to look at empty function types.\n          !type.isEmptyType())",
      "info" : "IfStatement[44750-45479]:IfStatement[44750-45479]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44863-45479]:Block[44863-45479]"
    }, {
      "left" : "if ((fnType.isConstructor() || fnType.isInterface()) &&\n            variableName.equals(fnType.getReferenceName()))",
      "right" : "if ((fnType.isConstructor() || fnType.isInterface()) &&\n            variableName.equals(fnType.getReferenceName()))",
      "info" : "IfStatement[45209-45471]:IfStatement[45209-45471]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45325-45471]:Block[45325-45471]"
    }, {
      "left" : "finishConstructorDefinition(n, variableName, fnType, scopeToDeclareIn,\n                                      input, newVar);",
      "right" : "finishConstructorDefinition(n, variableName, fnType, scopeToDeclareIn,\n                                      input, newVar);",
      "info" : "ExpressionStatement[45337-45461]:ExpressionStatement[45337-45461]"
    }, {
      "left" : "if (shouldDeclareOnGlobalThis)",
      "right" : "if (shouldDeclareOnGlobalThis)",
      "info" : "IfStatement[45487-45914]:IfStatement[45487-45914]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45518-45914]:Block[45518-45914]"
    }, {
      "left" : "ObjectType globalThis =\n            typeRegistry.getNativeObjectType(GLOBAL_THIS);",
      "right" : "ObjectType globalThis =\n            typeRegistry.getNativeObjectType(GLOBAL_THIS);",
      "info" : "VariableDeclarationStatement[45528-45610]:VariableDeclarationStatement[45528-45610]"
    }, {
      "left" : "if (inferred)",
      "right" : "if (inferred)",
      "info" : "IfStatement[45619-45906]:IfStatement[45619-45906]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45633-45821]:Block[45633-45821]"
    }, {
      "left" : "globalThis.defineInferredProperty(variableName,\n              type == null ?\n              getNativeType(JSTypeNative.NO_TYPE) :\n              type,\n              n);",
      "right" : "globalThis.defineInferredProperty(variableName,\n              type == null ?\n              getNativeType(JSTypeNative.NO_TYPE) :\n              type,\n              n);",
      "info" : "ExpressionStatement[45645-45811]:ExpressionStatement[45645-45811]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45827-45906]:Block[45827-45906]"
    }, {
      "left" : "globalThis.defineDeclaredProperty(variableName, type, n);",
      "right" : "globalThis.defineDeclaredProperty(variableName, type, n);",
      "info" : "ExpressionStatement[45839-45896]:ExpressionStatement[45839-45896]"
    }, {
      "left" : "if (isGlobalVar && \"Window\".equals(variableName)\n          && type != null\n          && type.isFunctionType()\n          && type.isConstructor())",
      "right" : "if (isGlobalVar && \"Window\".equals(variableName)\n          && type != null\n          && type.isFunctionType()\n          && type.isConstructor())",
      "info" : "IfStatement[45922-46416]:IfStatement[45922-46416]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46067-46416]:Block[46067-46416]"
    }, {
      "left" : "FunctionType globalThisCtor =\n            typeRegistry.getNativeObjectType(GLOBAL_THIS).getConstructor();",
      "right" : "FunctionType globalThisCtor =\n            typeRegistry.getNativeObjectType(GLOBAL_THIS).getConstructor();",
      "info" : "VariableDeclarationStatement[46077-46182]:VariableDeclarationStatement[46077-46182]"
    }, {
      "left" : "globalThisCtor.getInstanceType().clearCachedValues();",
      "right" : "globalThisCtor.getInstanceType().clearCachedValues();",
      "info" : "ExpressionStatement[46191-46244]:ExpressionStatement[46191-46244]"
    }, {
      "left" : "globalThisCtor.getPrototype().clearCachedValues();",
      "right" : "globalThisCtor.getPrototype().clearCachedValues();",
      "info" : "ExpressionStatement[46253-46303]:ExpressionStatement[46253-46303]"
    }, {
      "left" : "globalThisCtor\n            .setPrototypeBasedOn((type.toMaybeFunctionType()).getInstanceType());",
      "right" : "globalThisCtor\n            .setPrototypeBasedOn((type.toMaybeFunctionType()).getInstanceType());",
      "info" : "ExpressionStatement[46312-46408]:ExpressionStatement[46312-46408]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[46428-46435]:Modifier[46428-46435]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[46436-46440]:PrimitiveType[46436-46440]"
    }, {
      "left" : "finishConstructorDefinition",
      "right" : "finishConstructorDefinition",
      "info" : "SimpleName[46441-46468]:SimpleName[46441-46468]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[46478-46484]:SingleVariableDeclaration[46478-46484]"
    }, {
      "left" : "String variableName",
      "right" : "String variableName",
      "info" : "SingleVariableDeclaration[46486-46505]:SingleVariableDeclaration[46486-46505]"
    }, {
      "left" : "FunctionType fnType",
      "right" : "FunctionType fnType",
      "info" : "SingleVariableDeclaration[46507-46526]:SingleVariableDeclaration[46507-46526]"
    }, {
      "left" : "Scope scopeToDeclareIn",
      "right" : "Scope scopeToDeclareIn",
      "info" : "SingleVariableDeclaration[46536-46558]:SingleVariableDeclaration[46536-46558]"
    }, {
      "left" : "CompilerInput input",
      "right" : "CompilerInput input",
      "info" : "SingleVariableDeclaration[46560-46579]:SingleVariableDeclaration[46560-46579]"
    }, {
      "left" : "Var newVar",
      "right" : "Var newVar",
      "info" : "SingleVariableDeclaration[46581-46591]:SingleVariableDeclaration[46581-46591]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46593-48362]:Block[46593-48362]"
    }, {
      "left" : "FunctionType superClassCtor = fnType.getSuperClassConstructor();",
      "right" : "FunctionType superClassCtor = fnType.getSuperClassConstructor();",
      "info" : "VariableDeclarationStatement[46652-46716]:VariableDeclarationStatement[46652-46716]"
    }, {
      "left" : "Property prototypeSlot = fnType.getSlot(\"prototype\");",
      "right" : "Property prototypeSlot = fnType.getSlot(\"prototype\");",
      "info" : "VariableDeclarationStatement[46723-46776]:VariableDeclarationStatement[46723-46776]"
    }, {
      "left" : "prototypeSlot.setNode(n);",
      "right" : "prototypeSlot.setNode(n);",
      "info" : "ExpressionStatement[47201-47226]:ExpressionStatement[47201-47226]"
    }, {
      "left" : "String prototypeName = variableName + \".prototype\";",
      "right" : "String prototypeName = variableName + \".prototype\";",
      "info" : "VariableDeclarationStatement[47234-47285]:VariableDeclarationStatement[47234-47285]"
    }, {
      "left" : "Var prototypeVar = scopeToDeclareIn.getVar(prototypeName);",
      "right" : "Var prototypeVar = scopeToDeclareIn.getVar(prototypeName);",
      "info" : "VariableDeclarationStatement[47501-47559]:VariableDeclarationStatement[47501-47559]"
    }, {
      "left" : "if (prototypeVar != null && prototypeVar.scope == scopeToDeclareIn)",
      "right" : "if (prototypeVar != null && prototypeVar.scope == scopeToDeclareIn)",
      "info" : "IfStatement[47566-47693]:IfStatement[47566-47693]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47634-47693]:Block[47634-47693]"
    }, {
      "left" : "scopeToDeclareIn.undeclare(prototypeVar);",
      "right" : "scopeToDeclareIn.undeclare(prototypeVar);",
      "info" : "ExpressionStatement[47644-47685]:ExpressionStatement[47644-47685]"
    }, {
      "left" : "scopeToDeclareIn.declare(prototypeName,\n          n, prototypeSlot.getType(), input,\n          /* declared iff there's an explicit supertype */\n          superClassCtor == null ||\n          superClassCtor.getInstanceType().isEquivalentTo(\n              getNativeType(OBJECT_TYPE)));",
      "right" : "scopeToDeclareIn.declare(prototypeName,\n          n, prototypeSlot.getType(), input,\n          /* declared iff there's an explicit supertype */\n          superClassCtor == null ||\n          superClassCtor.getInstanceType().isEquivalentTo(\n              getNativeType(OBJECT_TYPE)));",
      "info" : "ExpressionStatement[47701-47983]:ExpressionStatement[47701-47983]"
    }, {
      "left" : "if (newVar.getInitialValue() == null &&\n          !n.isFromExterns())",
      "right" : "if (newVar.getInitialValue() == null &&\n          !n.isFromExterns())",
      "info" : "IfStatement[48085-48356]:IfStatement[48085-48356]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48155-48356]:Block[48155-48356]"
    }, {
      "left" : "compiler.report(\n            JSError.make(sourceName, n,\n                fnType.isConstructor() ?\n                CTOR_INITIALIZER : IFACE_INITIALIZER,\n                variableName));",
      "right" : "compiler.report(\n            JSError.make(sourceName, n,\n                fnType.isConstructor() ?\n                CTOR_INITIALIZER : IFACE_INITIALIZER,\n                variableName));",
      "info" : "ExpressionStatement[48165-48348]:ExpressionStatement[48165-48348]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[48460-48467]:Modifier[48460-48467]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[48468-48475]:PrimitiveType[48468-48475]"
    }, {
      "left" : "isQnameRootedInGlobalScope",
      "right" : "isQnameRootedInGlobalScope",
      "info" : "SimpleName[48476-48502]:SimpleName[48476-48502]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[48503-48509]:SingleVariableDeclaration[48503-48509]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48511-48608]:Block[48511-48608]"
    }, {
      "left" : "Scope scope = getQnameRootScope(n);",
      "right" : "Scope scope = getQnameRootScope(n);",
      "info" : "VariableDeclarationStatement[48519-48554]:VariableDeclarationStatement[48519-48554]"
    }, {
      "left" : "return scope != null && scope.isGlobal();",
      "right" : "return scope != null && scope.isGlobal();",
      "info" : "ReturnStatement[48561-48602]:ReturnStatement[48561-48602]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[48686-48693]:Modifier[48686-48693]"
    }, {
      "left" : "Scope",
      "right" : "Scope",
      "info" : "SimpleType[48694-48699]:SimpleType[48694-48699]"
    }, {
      "left" : "getQnameRootScope",
      "right" : "getQnameRootScope",
      "info" : "SimpleName[48700-48717]:SimpleName[48700-48717]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[48718-48724]:SingleVariableDeclaration[48718-48724]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48726-48961]:Block[48726-48961]"
    }, {
      "left" : "Node root = NodeUtil.getRootOfQualifiedName(n);",
      "right" : "Node root = NodeUtil.getRootOfQualifiedName(n);",
      "info" : "VariableDeclarationStatement[48734-48781]:VariableDeclarationStatement[48734-48781]"
    }, {
      "left" : "if (root.isName())",
      "right" : "if (root.isName())",
      "info" : "IfStatement[48788-48936]:IfStatement[48788-48936]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48807-48936]:Block[48807-48936]"
    }, {
      "left" : "Var var = scope.getVar(root.getString());",
      "right" : "Var var = scope.getVar(root.getString());",
      "info" : "VariableDeclarationStatement[48817-48858]:VariableDeclarationStatement[48817-48858]"
    }, {
      "left" : "if (var != null)",
      "right" : "if (var != null)",
      "info" : "IfStatement[48867-48928]:IfStatement[48867-48928]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48884-48928]:Block[48884-48928]"
    }, {
      "left" : "return var.getScope();",
      "right" : "return var.getScope();",
      "info" : "ReturnStatement[48896-48918]:ReturnStatement[48896-48918]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[48943-48955]:ReturnStatement[48943-48955]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[49309-49316]:Modifier[49309-49316]"
    }, {
      "left" : "JSType",
      "right" : "JSType",
      "info" : "SimpleType[49317-49323]:SimpleType[49317-49323]"
    }, {
      "left" : "getDeclaredType",
      "right" : "getDeclaredType",
      "info" : "SimpleName[49324-49339]:SimpleName[49324-49339]"
    }, {
      "left" : "JSDocInfo info",
      "right" : "JSDocInfo info",
      "info" : "SingleVariableDeclaration[49340-49354]:SingleVariableDeclaration[49340-49354]"
    }, {
      "left" : "Node lValue",
      "right" : "Node lValue",
      "info" : "SingleVariableDeclaration[49356-49367]:SingleVariableDeclaration[49356-49367]"
    }, {
      "left" : "@Nullable Node rValue",
      "right" : "@Nullable Node rValue",
      "info" : "SingleVariableDeclaration[49377-49398]:SingleVariableDeclaration[49377-49398]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49400-51652]:Block[49400-51652]"
    }, {
      "left" : "if (info != null && info.hasType())",
      "right" : "if (info != null && info.hasType())",
      "info" : "IfStatement[49408-50220]:IfStatement[49408-50220]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49444-49511]:Block[49444-49511]"
    }, {
      "left" : "return getDeclaredTypeInAnnotation(lValue, info);",
      "right" : "return getDeclaredTypeInAnnotation(lValue, info);",
      "info" : "ReturnStatement[49454-49503]:ReturnStatement[49454-49503]"
    }, {
      "left" : "if (rValue != null && rValue.isFunction() &&\n          shouldUseFunctionLiteralType(\n              JSType.toMaybeFunctionType(rValue.getJSType()), info, lValue))",
      "right" : "if (rValue != null && rValue.isFunction() &&\n          shouldUseFunctionLiteralType(\n              JSType.toMaybeFunctionType(rValue.getJSType()), info, lValue))",
      "info" : "IfStatement[49517-50220]:IfStatement[49517-50220]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49679-49723]:Block[49679-49723]"
    }, {
      "left" : "return rValue.getJSType();",
      "right" : "return rValue.getJSType();",
      "info" : "ReturnStatement[49689-49715]:ReturnStatement[49689-49715]"
    }, {
      "left" : "if (info != null)",
      "right" : "if (info != null)",
      "info" : "IfStatement[49729-50220]:IfStatement[49729-50220]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49747-50220]:Block[49747-50220]"
    }, {
      "left" : "if (info.hasEnumParameterType())",
      "right" : "if (info.hasEnumParameterType())",
      "info" : "IfStatement[49757-50212]:IfStatement[49757-50212]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49790-50037]:Block[49790-50037]"
    }, {
      "left" : "if (rValue != null && rValue.isObjectLit())",
      "right" : "if (rValue != null && rValue.isObjectLit())",
      "info" : "IfStatement[49802-50027]:IfStatement[49802-50027]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49846-49898]:Block[49846-49898]"
    }, {
      "left" : "return rValue.getJSType();",
      "right" : "return rValue.getJSType();",
      "info" : "ReturnStatement[49860-49886]:ReturnStatement[49860-49886]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49904-50027]:Block[49904-50027]"
    }, {
      "left" : "return createEnumTypeFromNodes(\n                rValue, lValue.getQualifiedName(), info, lValue);",
      "right" : "return createEnumTypeFromNodes(\n                rValue, lValue.getQualifiedName(), info, lValue);",
      "info" : "ReturnStatement[49918-50015]:ReturnStatement[49918-50015]"
    }, {
      "left" : "if (info.isConstructor() || info.isInterface())",
      "right" : "if (info.isConstructor() || info.isInterface())",
      "info" : "IfStatement[50043-50212]:IfStatement[50043-50212]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50091-50212]:Block[50091-50212]"
    }, {
      "left" : "return createFunctionTypeFromNodes(\n              rValue, lValue.getQualifiedName(), info, lValue);",
      "right" : "return createFunctionTypeFromNodes(\n              rValue, lValue.getQualifiedName(), info, lValue);",
      "info" : "ReturnStatement[50103-50202]:ReturnStatement[50103-50202]"
    }, {
      "left" : "if (isConstantSymbol(info, lValue))",
      "right" : "if (isConstantSymbol(info, lValue))",
      "info" : "IfStatement[50292-51589]:IfStatement[50292-51589]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50328-51589]:Block[50328-51589]"
    }, {
      "left" : "if (rValue != null)",
      "right" : "if (rValue != null)",
      "info" : "IfStatement[50338-51581]:IfStatement[50338-51581]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50358-51581]:Block[50358-51581]"
    }, {
      "left" : "JSDocInfo rValueInfo = rValue.getJSDocInfo();",
      "right" : "JSDocInfo rValueInfo = rValue.getJSDocInfo();",
      "info" : "VariableDeclarationStatement[50370-50415]:VariableDeclarationStatement[50370-50415]"
    }, {
      "left" : "if (rValueInfo != null && rValueInfo.hasType())",
      "right" : "if (rValueInfo != null && rValueInfo.hasType())",
      "info" : "IfStatement[50426-51571]:IfStatement[50426-51571]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50474-50634]:Block[50474-50634]"
    }, {
      "left" : "return rValueInfo.getType().evaluate(scope, typeRegistry);",
      "right" : "return rValueInfo.getType().evaluate(scope, typeRegistry);",
      "info" : "ReturnStatement[50564-50622]:ReturnStatement[50564-50622]"
    }, {
      "left" : "if (rValue.getJSType() != null\n              && !rValue.getJSType().isUnknownType())",
      "right" : "if (rValue.getJSType() != null\n              && !rValue.getJSType().isUnknownType())",
      "info" : "IfStatement[50640-51571]:IfStatement[50640-51571]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50725-50897]:Block[50725-50897]"
    }, {
      "left" : "return rValue.getJSType();",
      "right" : "return rValue.getJSType();",
      "info" : "ReturnStatement[50859-50885]:ReturnStatement[50859-50885]"
    }, {
      "left" : "if (rValue.isOr())",
      "right" : "if (rValue.isOr())",
      "info" : "IfStatement[50903-51571]:IfStatement[50903-51571]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50922-51571]:Block[50922-51571]"
    }, {
      "left" : "Node firstClause = rValue.getFirstChild();",
      "right" : "Node firstClause = rValue.getFirstChild();",
      "info" : "VariableDeclarationStatement[51114-51156]:VariableDeclarationStatement[51114-51156]"
    }, {
      "left" : "Node secondClause = firstClause.getNext();",
      "right" : "Node secondClause = firstClause.getNext();",
      "info" : "VariableDeclarationStatement[51169-51211]:VariableDeclarationStatement[51169-51211]"
    }, {
      "left" : "boolean namesMatch = firstClause.isName()\n                && lValue.isName()\n                && firstClause.getString().equals(lValue.getString());",
      "right" : "boolean namesMatch = firstClause.isName()\n                && lValue.isName()\n                && firstClause.getString().equals(lValue.getString());",
      "info" : "VariableDeclarationStatement[51224-51371]:VariableDeclarationStatement[51224-51371]"
    }, {
      "left" : "if (namesMatch && secondClause.getJSType() != null\n                && !secondClause.getJSType().isUnknownType())",
      "right" : "if (namesMatch && secondClause.getJSType() != null\n                && !secondClause.getJSType().isUnknownType())",
      "info" : "IfStatement[51384-51559]:IfStatement[51384-51559]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51497-51559]:Block[51497-51559]"
    }, {
      "left" : "return secondClause.getJSType();",
      "right" : "return secondClause.getJSType();",
      "info" : "ReturnStatement[51513-51545]:ReturnStatement[51513-51545]"
    }, {
      "left" : "return getDeclaredTypeInAnnotation(lValue, info);",
      "right" : "return getDeclaredTypeInAnnotation(lValue, info);",
      "info" : "ReturnStatement[51597-51646]:ReturnStatement[51597-51646]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[51658-51665]:Modifier[51658-51665]"
    }, {
      "left" : "FunctionType",
      "right" : "FunctionType",
      "info" : "SimpleType[51666-51678]:SimpleType[51666-51678]"
    }, {
      "left" : "getFunctionType",
      "right" : "getFunctionType",
      "info" : "SimpleName[51679-51694]:SimpleName[51679-51694]"
    }, {
      "left" : "@Nullable Var v",
      "right" : "@Nullable Var v",
      "info" : "SingleVariableDeclaration[51695-51710]:SingleVariableDeclaration[51695-51710]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51712-51869]:Block[51712-51869]"
    }, {
      "left" : "JSType t = v == null ? null : v.getType();",
      "right" : "JSType t = v == null ? null : v.getType();",
      "info" : "VariableDeclarationStatement[51720-51762]:VariableDeclarationStatement[51720-51762]"
    }, {
      "left" : "ObjectType o = t == null ? null : t.dereference();",
      "right" : "ObjectType o = t == null ? null : t.dereference();",
      "info" : "VariableDeclarationStatement[51769-51819]:VariableDeclarationStatement[51769-51819]"
    }, {
      "left" : "return JSType.toMaybeFunctionType(o);",
      "right" : "return JSType.toMaybeFunctionType(o);",
      "info" : "ReturnStatement[51826-51863]:ReturnStatement[51826-51863]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[51962-51969]:Modifier[51962-51969]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[51970-51974]:PrimitiveType[51970-51974]"
    }, {
      "left" : "checkForCallingConventionDefiningCalls",
      "right" : "checkForCallingConventionDefiningCalls",
      "info" : "SimpleName[51975-52013]:SimpleName[51975-52013]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[52023-52029]:SingleVariableDeclaration[52023-52029]"
    }, {
      "left" : "Map<String, String> delegateCallingConventions",
      "right" : "Map<String, String> delegateCallingConventions",
      "info" : "SingleVariableDeclaration[52031-52077]:SingleVariableDeclaration[52031-52077]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52079-52190]:Block[52079-52190]"
    }, {
      "left" : "codingConvention.checkForCallingConventionDefiningCalls(n,\n          delegateCallingConventions);",
      "right" : "codingConvention.checkForCallingConventionDefiningCalls(n,\n          delegateCallingConventions);",
      "info" : "ExpressionStatement[52087-52184]:ExpressionStatement[52087-52184]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[52393-52400]:Modifier[52393-52400]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[52401-52405]:PrimitiveType[52401-52405]"
    }, {
      "left" : "checkForClassDefiningCalls",
      "right" : "checkForClassDefiningCalls",
      "info" : "SimpleName[52406-52432]:SimpleName[52406-52432]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[52433-52448]:SingleVariableDeclaration[52433-52448]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[52450-52456]:SingleVariableDeclaration[52450-52456]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52458-55402]:Block[52458-55402]"
    }, {
      "left" : "SubclassRelationship relationship =\n          codingConvention.getClassesDefinedByCall(n);",
      "right" : "SubclassRelationship relationship =\n          codingConvention.getClassesDefinedByCall(n);",
      "info" : "VariableDeclarationStatement[52466-52556]:VariableDeclarationStatement[52466-52556]"
    }, {
      "left" : "if (relationship != null)",
      "right" : "if (relationship != null)",
      "info" : "IfStatement[52563-53732]:IfStatement[52563-53732]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52589-53732]:Block[52589-53732]"
    }, {
      "left" : "FunctionType superCtor = getFunctionType(\n            scope.getVar(relationship.superclassName));",
      "right" : "FunctionType superCtor = getFunctionType(\n            scope.getVar(relationship.superclassName));",
      "info" : "VariableDeclarationStatement[52599-52696]:VariableDeclarationStatement[52599-52696]"
    }, {
      "left" : "FunctionType subCtor = getFunctionType(\n            scope.getVar(relationship.subclassName));",
      "right" : "FunctionType subCtor = getFunctionType(\n            scope.getVar(relationship.subclassName));",
      "info" : "VariableDeclarationStatement[52705-52798]:VariableDeclarationStatement[52705-52798]"
    }, {
      "left" : "if (superCtor != null && superCtor.isConstructor() &&\n            subCtor != null && subCtor.isConstructor())",
      "right" : "if (superCtor != null && superCtor.isConstructor() &&\n            subCtor != null && subCtor.isConstructor())",
      "info" : "IfStatement[52807-53724]:IfStatement[52807-53724]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52917-53724]:Block[52917-53724]"
    }, {
      "left" : "ObjectType superClass = superCtor.getInstanceType();",
      "right" : "ObjectType superClass = superCtor.getInstanceType();",
      "info" : "VariableDeclarationStatement[52929-52981]:VariableDeclarationStatement[52929-52981]"
    }, {
      "left" : "ObjectType subClass = subCtor.getInstanceType();",
      "right" : "ObjectType subClass = subCtor.getInstanceType();",
      "info" : "VariableDeclarationStatement[52992-53040]:VariableDeclarationStatement[52992-53040]"
    }, {
      "left" : "superCtor = superClass.getConstructor();",
      "right" : "superCtor = superClass.getConstructor();",
      "info" : "ExpressionStatement[53238-53278]:ExpressionStatement[53238-53278]"
    }, {
      "left" : "subCtor = subClass.getConstructor();",
      "right" : "subCtor = subClass.getConstructor();",
      "info" : "ExpressionStatement[53289-53325]:ExpressionStatement[53289-53325]"
    }, {
      "left" : "if (relationship.type == SubclassType.INHERITS &&\n              !superClass.isEmptyType() && !subClass.isEmptyType())",
      "right" : "if (relationship.type == SubclassType.INHERITS &&\n              !superClass.isEmptyType() && !subClass.isEmptyType())",
      "info" : "IfStatement[53337-53535]:IfStatement[53337-53535]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53455-53535]:Block[53455-53535]"
    }, {
      "left" : "validator.expectSuperType(t, n, superClass, subClass);",
      "right" : "validator.expectSuperType(t, n, superClass, subClass);",
      "info" : "ExpressionStatement[53469-53523]:ExpressionStatement[53469-53523]"
    }, {
      "left" : "if (superCtor != null && subCtor != null)",
      "right" : "if (superCtor != null && subCtor != null)",
      "info" : "IfStatement[53547-53714]:IfStatement[53547-53714]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53589-53714]:Block[53589-53714]"
    }, {
      "left" : "codingConvention.applySubclassRelationship(\n                superCtor, subCtor, relationship.type);",
      "right" : "codingConvention.applySubclassRelationship(\n                superCtor, subCtor, relationship.type);",
      "info" : "ExpressionStatement[53603-53702]:ExpressionStatement[53603-53702]"
    }, {
      "left" : "String singletonGetterClassName =\n          codingConvention.getSingletonGetterClassName(n);",
      "right" : "String singletonGetterClassName =\n          codingConvention.getSingletonGetterClassName(n);",
      "info" : "VariableDeclarationStatement[53740-53832]:VariableDeclarationStatement[53740-53832]"
    }, {
      "left" : "if (singletonGetterClassName != null)",
      "right" : "if (singletonGetterClassName != null)",
      "info" : "IfStatement[53839-54362]:IfStatement[53839-54362]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53877-54362]:Block[53877-54362]"
    }, {
      "left" : "ObjectType objectType = ObjectType.cast(\n            typeRegistry.getType(singletonGetterClassName));",
      "right" : "ObjectType objectType = ObjectType.cast(\n            typeRegistry.getType(singletonGetterClassName));",
      "info" : "VariableDeclarationStatement[53887-53988]:VariableDeclarationStatement[53887-53988]"
    }, {
      "left" : "if (objectType != null)",
      "right" : "if (objectType != null)",
      "info" : "IfStatement[53997-54354]:IfStatement[53997-54354]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54021-54354]:Block[54021-54354]"
    }, {
      "left" : "FunctionType functionType = objectType.getConstructor();",
      "right" : "FunctionType functionType = objectType.getConstructor();",
      "info" : "VariableDeclarationStatement[54033-54089]:VariableDeclarationStatement[54033-54089]"
    }, {
      "left" : "if (functionType != null)",
      "right" : "if (functionType != null)",
      "info" : "IfStatement[54101-54344]:IfStatement[54101-54344]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54127-54344]:Block[54127-54344]"
    }, {
      "left" : "FunctionType getterType =\n                typeRegistry.createFunctionType(objectType);",
      "right" : "FunctionType getterType =\n                typeRegistry.createFunctionType(objectType);",
      "info" : "VariableDeclarationStatement[54141-54227]:VariableDeclarationStatement[54141-54227]"
    }, {
      "left" : "codingConvention.applySingletonGetter(functionType, getterType,\n                objectType);",
      "right" : "codingConvention.applySingletonGetter(functionType, getterType,\n                objectType);",
      "info" : "ExpressionStatement[54240-54332]:ExpressionStatement[54240-54332]"
    }, {
      "left" : "DelegateRelationship delegateRelationship =\n          codingConvention.getDelegateRelationship(n);",
      "right" : "DelegateRelationship delegateRelationship =\n          codingConvention.getDelegateRelationship(n);",
      "info" : "VariableDeclarationStatement[54370-54468]:VariableDeclarationStatement[54370-54468]"
    }, {
      "left" : "if (delegateRelationship != null)",
      "right" : "if (delegateRelationship != null)",
      "info" : "IfStatement[54475-54575]:IfStatement[54475-54575]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54509-54575]:Block[54509-54575]"
    }, {
      "left" : "applyDelegateRelationship(delegateRelationship);",
      "right" : "applyDelegateRelationship(delegateRelationship);",
      "info" : "ExpressionStatement[54519-54567]:ExpressionStatement[54519-54567]"
    }, {
      "left" : "ObjectLiteralCast objectLiteralCast =\n          codingConvention.getObjectLiteralCast(n);",
      "right" : "ObjectLiteralCast objectLiteralCast =\n          codingConvention.getObjectLiteralCast(n);",
      "info" : "VariableDeclarationStatement[54583-54672]:VariableDeclarationStatement[54583-54672]"
    }, {
      "left" : "if (objectLiteralCast != null)",
      "right" : "if (objectLiteralCast != null)",
      "info" : "IfStatement[54679-55396]:IfStatement[54679-55396]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54710-55396]:Block[54710-55396]"
    }, {
      "left" : "if (objectLiteralCast.diagnosticType == null)",
      "right" : "if (objectLiteralCast.diagnosticType == null)",
      "info" : "IfStatement[54720-55388]:IfStatement[54720-55388]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54766-55256]:Block[54766-55256]"
    }, {
      "left" : "ObjectType type = ObjectType.cast(\n              typeRegistry.getType(objectLiteralCast.typeName));",
      "right" : "ObjectType type = ObjectType.cast(\n              typeRegistry.getType(objectLiteralCast.typeName));",
      "info" : "VariableDeclarationStatement[54778-54877]:VariableDeclarationStatement[54778-54877]"
    }, {
      "left" : "if (type != null && type.getConstructor() != null)",
      "right" : "if (type != null && type.getConstructor() != null)",
      "info" : "IfStatement[54888-55246]:IfStatement[54888-55246]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54939-55120]:Block[54939-55120]"
    }, {
      "left" : "setDeferredType(objectLiteralCast.objectNode, type);",
      "right" : "setDeferredType(objectLiteralCast.objectNode, type);",
      "info" : "ExpressionStatement[54953-55005]:ExpressionStatement[54953-55005]"
    }, {
      "left" : "objectLiteralCast.objectNode.putBooleanProp(\n                Node.REFLECTED_OBJECT, true);",
      "right" : "objectLiteralCast.objectNode.putBooleanProp(\n                Node.REFLECTED_OBJECT, true);",
      "info" : "ExpressionStatement[55018-55108]:ExpressionStatement[55018-55108]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55126-55246]:Block[55126-55246]"
    }, {
      "left" : "compiler.report(JSError.make(t.getSourceName(), n,\n                    CONSTRUCTOR_EXPECTED));",
      "right" : "compiler.report(JSError.make(t.getSourceName(), n,\n                    CONSTRUCTOR_EXPECTED));",
      "info" : "ExpressionStatement[55140-55234]:ExpressionStatement[55140-55234]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55262-55388]:Block[55262-55388]"
    }, {
      "left" : "compiler.report(JSError.make(t.getSourceName(), n,\n                  objectLiteralCast.diagnosticType));",
      "right" : "compiler.report(JSError.make(t.getSourceName(), n,\n                  objectLiteralCast.diagnosticType));",
      "info" : "ExpressionStatement[55274-55378]:ExpressionStatement[55274-55378]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[55486-55493]:Modifier[55486-55493]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[55494-55498]:PrimitiveType[55494-55498]"
    }, {
      "left" : "applyDelegateRelationship",
      "right" : "applyDelegateRelationship",
      "info" : "SimpleName[55499-55524]:SimpleName[55499-55524]"
    }, {
      "left" : "DelegateRelationship delegateRelationship",
      "right" : "DelegateRelationship delegateRelationship",
      "info" : "SingleVariableDeclaration[55534-55575]:SingleVariableDeclaration[55534-55575]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55577-57325]:Block[55577-57325]"
    }, {
      "left" : "ObjectType delegatorObject = ObjectType.cast(\n          typeRegistry.getType(delegateRelationship.delegator));",
      "right" : "ObjectType delegatorObject = ObjectType.cast(\n          typeRegistry.getType(delegateRelationship.delegator));",
      "info" : "VariableDeclarationStatement[55585-55695]:VariableDeclarationStatement[55585-55695]"
    }, {
      "left" : "ObjectType delegateBaseObject = ObjectType.cast(\n          typeRegistry.getType(delegateRelationship.delegateBase));",
      "right" : "ObjectType delegateBaseObject = ObjectType.cast(\n          typeRegistry.getType(delegateRelationship.delegateBase));",
      "info" : "VariableDeclarationStatement[55702-55818]:VariableDeclarationStatement[55702-55818]"
    }, {
      "left" : "ObjectType delegateSuperObject = ObjectType.cast(\n          typeRegistry.getType(codingConvention.getDelegateSuperclassName()));",
      "right" : "ObjectType delegateSuperObject = ObjectType.cast(\n          typeRegistry.getType(codingConvention.getDelegateSuperclassName()));",
      "info" : "VariableDeclarationStatement[55825-55953]:VariableDeclarationStatement[55825-55953]"
    }, {
      "left" : "if (delegatorObject != null &&\n          delegateBaseObject != null &&\n          delegateSuperObject != null)",
      "right" : "if (delegatorObject != null &&\n          delegateBaseObject != null &&\n          delegateSuperObject != null)",
      "info" : "IfStatement[55960-57319]:IfStatement[55960-57319]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56070-57319]:Block[56070-57319]"
    }, {
      "left" : "FunctionType delegatorCtor = delegatorObject.getConstructor();",
      "right" : "FunctionType delegatorCtor = delegatorObject.getConstructor();",
      "info" : "VariableDeclarationStatement[56080-56142]:VariableDeclarationStatement[56080-56142]"
    }, {
      "left" : "FunctionType delegateBaseCtor = delegateBaseObject.getConstructor();",
      "right" : "FunctionType delegateBaseCtor = delegateBaseObject.getConstructor();",
      "info" : "VariableDeclarationStatement[56151-56219]:VariableDeclarationStatement[56151-56219]"
    }, {
      "left" : "FunctionType delegateSuperCtor = delegateSuperObject.getConstructor();",
      "right" : "FunctionType delegateSuperCtor = delegateSuperObject.getConstructor();",
      "info" : "VariableDeclarationStatement[56228-56298]:VariableDeclarationStatement[56228-56298]"
    }, {
      "left" : "if (delegatorCtor != null && delegateBaseCtor != null &&\n            delegateSuperCtor != null)",
      "right" : "if (delegatorCtor != null && delegateBaseCtor != null &&\n            delegateSuperCtor != null)",
      "info" : "IfStatement[56308-57311]:IfStatement[56308-57311]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56404-57311]:Block[56404-57311]"
    }, {
      "left" : "FunctionParamBuilder functionParamBuilder =\n              new FunctionParamBuilder(typeRegistry);",
      "right" : "FunctionParamBuilder functionParamBuilder =\n              new FunctionParamBuilder(typeRegistry);",
      "info" : "VariableDeclarationStatement[56416-56513]:VariableDeclarationStatement[56416-56513]"
    }, {
      "left" : "functionParamBuilder.addRequiredParams(\n              getNativeType(U2U_CONSTRUCTOR_TYPE));",
      "right" : "functionParamBuilder.addRequiredParams(\n              getNativeType(U2U_CONSTRUCTOR_TYPE));",
      "info" : "ExpressionStatement[56524-56615]:ExpressionStatement[56524-56615]"
    }, {
      "left" : "FunctionType findDelegate = typeRegistry.createFunctionType(\n              typeRegistry.createDefaultObjectUnion(delegateBaseObject),\n              functionParamBuilder.build());",
      "right" : "FunctionType findDelegate = typeRegistry.createFunctionType(\n              typeRegistry.createDefaultObjectUnion(delegateBaseObject),\n              functionParamBuilder.build());",
      "info" : "VariableDeclarationStatement[56626-56804]:VariableDeclarationStatement[56626-56804]"
    }, {
      "left" : "FunctionType delegateProxy = typeRegistry.createConstructorType(\n              delegateBaseObject.getReferenceName() + DELEGATE_PROXY_SUFFIX,\n              null, null, null, null);",
      "right" : "FunctionType delegateProxy = typeRegistry.createConstructorType(\n              delegateBaseObject.getReferenceName() + DELEGATE_PROXY_SUFFIX,\n              null, null, null, null);",
      "info" : "VariableDeclarationStatement[56816-56996]:VariableDeclarationStatement[56816-56996]"
    }, {
      "left" : "delegateProxy.setPrototypeBasedOn(delegateBaseObject);",
      "right" : "delegateProxy.setPrototypeBasedOn(delegateBaseObject);",
      "info" : "ExpressionStatement[57007-57061]:ExpressionStatement[57007-57061]"
    }, {
      "left" : "codingConvention.applyDelegateRelationship(\n              delegateSuperObject, delegateBaseObject, delegatorObject,\n              delegateProxy, findDelegate);",
      "right" : "codingConvention.applyDelegateRelationship(\n              delegateSuperObject, delegateBaseObject, delegatorObject,\n              delegateProxy, findDelegate);",
      "info" : "ExpressionStatement[57073-57232]:ExpressionStatement[57073-57232]"
    }, {
      "left" : "delegateProxyPrototypes.add(delegateProxy.getPrototype());",
      "right" : "delegateProxyPrototypes.add(delegateProxy.getPrototype());",
      "info" : "ExpressionStatement[57243-57301]:ExpressionStatement[57243-57301]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[57754-57758]:PrimitiveType[57754-57758]"
    }, {
      "left" : "maybeDeclareQualifiedName",
      "right" : "maybeDeclareQualifiedName",
      "info" : "SimpleName[57759-57784]:SimpleName[57759-57784]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[57785-57800]:SingleVariableDeclaration[57785-57800]"
    }, {
      "left" : "JSDocInfo info",
      "right" : "JSDocInfo info",
      "info" : "SingleVariableDeclaration[57802-57816]:SingleVariableDeclaration[57802-57816]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[57826-57832]:SingleVariableDeclaration[57826-57832]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[57834-57845]:SingleVariableDeclaration[57834-57845]"
    }, {
      "left" : "Node rhsValue",
      "right" : "Node rhsValue",
      "info" : "SingleVariableDeclaration[57847-57860]:SingleVariableDeclaration[57847-57860]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57862-62405]:Block[57862-62405]"
    }, {
      "left" : "Node ownerNode = n.getFirstChild();",
      "right" : "Node ownerNode = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[57870-57905]:VariableDeclarationStatement[57870-57905]"
    }, {
      "left" : "String ownerName = ownerNode.getQualifiedName();",
      "right" : "String ownerName = ownerNode.getQualifiedName();",
      "info" : "VariableDeclarationStatement[57912-57960]:VariableDeclarationStatement[57912-57960]"
    }, {
      "left" : "String qName = n.getQualifiedName();",
      "right" : "String qName = n.getQualifiedName();",
      "info" : "VariableDeclarationStatement[57967-58003]:VariableDeclarationStatement[57967-58003]"
    }, {
      "left" : "String propName = n.getLastChild().getString();",
      "right" : "String propName = n.getLastChild().getString();",
      "info" : "VariableDeclarationStatement[58010-58057]:VariableDeclarationStatement[58010-58057]"
    }, {
      "left" : "Preconditions.checkArgument(qName != null && ownerName != null);",
      "right" : "Preconditions.checkArgument(qName != null && ownerName != null);",
      "info" : "ExpressionStatement[58064-58128]:ExpressionStatement[58064-58128]"
    }, {
      "left" : "JSType valueType = getDeclaredType(info, n, rhsValue);",
      "right" : "JSType valueType = getDeclaredType(info, n, rhsValue);",
      "info" : "VariableDeclarationStatement[58785-58839]:VariableDeclarationStatement[58785-58839]"
    }, {
      "left" : "if (valueType == null && rhsValue != null)",
      "right" : "if (valueType == null && rhsValue != null)",
      "info" : "IfStatement[58846-58975]:IfStatement[58846-58975]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58889-58975]:Block[58889-58975]"
    }, {
      "left" : "valueType = rhsValue.getJSType();",
      "right" : "valueType = rhsValue.getJSType();",
      "info" : "ExpressionStatement[58934-58967]:ExpressionStatement[58934-58967]"
    }, {
      "left" : "if (\"prototype\".equals(propName))",
      "right" : "if (\"prototype\".equals(propName))",
      "info" : "IfStatement[59218-60428]:IfStatement[59218-60428]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[59252-60428]:Block[59252-60428]"
    }, {
      "left" : "Var qVar = scope.getVar(qName);",
      "right" : "Var qVar = scope.getVar(qName);",
      "info" : "VariableDeclarationStatement[59262-59293]:VariableDeclarationStatement[59262-59293]"
    }, {
      "left" : "if (qVar != null)",
      "right" : "if (qVar != null)",
      "info" : "IfStatement[59302-60420]:IfStatement[59302-60420]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[59320-60420]:Block[59320-60420]"
    }, {
      "left" : "ObjectType qVarType = ObjectType.cast(qVar.getType());",
      "right" : "ObjectType qVarType = ObjectType.cast(qVar.getType());",
      "info" : "VariableDeclarationStatement[59649-59703]:VariableDeclarationStatement[59649-59703]"
    }, {
      "left" : "if (qVarType != null &&\n              rhsValue != null &&\n              rhsValue.isObjectLit())",
      "right" : "if (qVarType != null &&\n              rhsValue != null &&\n              rhsValue.isObjectLit())",
      "info" : "IfStatement[59714-60366]:IfStatement[59714-60366]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[59810-59944]:Block[59810-59944]"
    }, {
      "left" : "typeRegistry.resetImplicitPrototype(\n                rhsValue.getJSType(), qVarType.getImplicitPrototype());",
      "right" : "typeRegistry.resetImplicitPrototype(\n                rhsValue.getJSType(), qVarType.getImplicitPrototype());",
      "info" : "ExpressionStatement[59824-59932]:ExpressionStatement[59824-59932]"
    }, {
      "left" : "if (!qVar.isTypeInferred())",
      "right" : "if (!qVar.isTypeInferred())",
      "info" : "IfStatement[59950-60366]:IfStatement[59950-60366]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[59978-60366]:Block[59978-60366]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[60347-60354]:ReturnStatement[60347-60354]"
    }, {
      "left" : "qVar.getScope().undeclare(qVar);",
      "right" : "qVar.getScope().undeclare(qVar);",
      "info" : "ExpressionStatement[60378-60410]:ExpressionStatement[60378-60410]"
    }, {
      "left" : "if (valueType == null)",
      "right" : "if (valueType == null)",
      "info" : "IfStatement[60436-60691]:IfStatement[60436-60691]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60459-60691]:Block[60459-60691]"
    }, {
      "left" : "if (parent.isExprResult())",
      "right" : "if (parent.isExprResult())",
      "info" : "IfStatement[60469-60666]:IfStatement[60469-60666]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60496-60666]:Block[60496-60666]"
    }, {
      "left" : "stubDeclarations.add(new StubDeclaration(\n              n,\n              t.getInput() != null && t.getInput().isExtern(),\n              ownerName));",
      "right" : "stubDeclarations.add(new StubDeclaration(\n              n,\n              t.getInput() != null && t.getInput().isExtern(),\n              ownerName));",
      "info" : "ExpressionStatement[60508-60656]:ExpressionStatement[60508-60656]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[60676-60683]:ReturnStatement[60676-60683]"
    }, {
      "left" : "boolean inferred = isQualifiedNameInferred(\n          qName, n, info, rhsValue, valueType);",
      "right" : "boolean inferred = isQualifiedNameInferred(\n          qName, n, info, rhsValue, valueType);",
      "info" : "VariableDeclarationStatement[60699-60790]:VariableDeclarationStatement[60699-60790]"
    }, {
      "left" : "if (!inferred)",
      "right" : "if (!inferred)",
      "info" : "IfStatement[60797-62399]:IfStatement[60797-62399]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60812-61668]:Block[60812-61668]"
    }, {
      "left" : "ObjectType ownerType = getObjectSlot(ownerName);",
      "right" : "ObjectType ownerType = getObjectSlot(ownerName);",
      "info" : "VariableDeclarationStatement[60822-60870]:VariableDeclarationStatement[60822-60870]"
    }, {
      "left" : "if (ownerType != null)",
      "right" : "if (ownerType != null)",
      "info" : "IfStatement[60879-61475]:IfStatement[60879-61475]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60902-61475]:Block[60902-61475]"
    }, {
      "left" : "boolean isExtern = t.getInput() != null && t.getInput().isExtern();",
      "right" : "boolean isExtern = t.getInput() != null && t.getInput().isExtern();",
      "info" : "VariableDeclarationStatement[61015-61082]:VariableDeclarationStatement[61015-61082]"
    }, {
      "left" : "if ((!ownerType.hasOwnProperty(propName) ||\n               ownerType.isPropertyTypeInferred(propName)) &&\n              ((isExtern && !ownerType.isNativeObjectType()) ||\n               !ownerType.isInstanceType()))",
      "right" : "if ((!ownerType.hasOwnProperty(propName) ||\n               ownerType.isPropertyTypeInferred(propName)) &&\n              ((isExtern && !ownerType.isNativeObjectType()) ||\n               !ownerType.isInstanceType()))",
      "info" : "IfStatement[61093-61465]:IfStatement[61093-61465]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61308-61465]:Block[61308-61465]"
    }, {
      "left" : "ownerType.defineDeclaredProperty(propName, valueType, n);",
      "right" : "ownerType.defineDeclaredProperty(propName, valueType, n);",
      "info" : "ExpressionStatement[61396-61453]:ExpressionStatement[61396-61453]"
    }, {
      "left" : "defineSlot(n, parent, valueType, inferred);",
      "right" : "defineSlot(n, parent, valueType, inferred);",
      "info" : "ExpressionStatement[61617-61660]:ExpressionStatement[61617-61660]"
    }, {
      "left" : "if (rhsValue != null && rhsValue.isTrue())",
      "right" : "if (rhsValue != null && rhsValue.isTrue())",
      "info" : "IfStatement[61674-62399]:IfStatement[61674-62399]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61717-62399]:Block[61717-62399]"
    }, {
      "left" : "ObjectType ownerType = getObjectSlot(ownerName);",
      "right" : "ObjectType ownerType = getObjectSlot(ownerName);",
      "info" : "VariableDeclarationStatement[61793-61841]:VariableDeclarationStatement[61793-61841]"
    }, {
      "left" : "FunctionType ownerFnType = JSType.toMaybeFunctionType(ownerType);",
      "right" : "FunctionType ownerFnType = JSType.toMaybeFunctionType(ownerType);",
      "info" : "VariableDeclarationStatement[61850-61915]:VariableDeclarationStatement[61850-61915]"
    }, {
      "left" : "if (ownerFnType != null)",
      "right" : "if (ownerFnType != null)",
      "info" : "IfStatement[61924-62391]:IfStatement[61924-62391]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61949-62391]:Block[61949-62391]"
    }, {
      "left" : "JSType ownerTypeOfThis = ownerFnType.getTypeOfThis();",
      "right" : "JSType ownerTypeOfThis = ownerFnType.getTypeOfThis();",
      "info" : "VariableDeclarationStatement[61961-62014]:VariableDeclarationStatement[61961-62014]"
    }, {
      "left" : "String delegateName = codingConvention.getDelegateSuperclassName();",
      "right" : "String delegateName = codingConvention.getDelegateSuperclassName();",
      "info" : "VariableDeclarationStatement[62025-62092]:VariableDeclarationStatement[62025-62092]"
    }, {
      "left" : "JSType delegateType = delegateName == null ?\n              null : typeRegistry.getType(delegateName);",
      "right" : "JSType delegateType = delegateName == null ?\n              null : typeRegistry.getType(delegateName);",
      "info" : "VariableDeclarationStatement[62103-62204]:VariableDeclarationStatement[62103-62204]"
    }, {
      "left" : "if (delegateType != null &&\n              ownerTypeOfThis.isSubtype(delegateType))",
      "right" : "if (delegateType != null &&\n              ownerTypeOfThis.isSubtype(delegateType))",
      "info" : "IfStatement[62215-62381]:IfStatement[62215-62381]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62298-62381]:Block[62298-62381]"
    }, {
      "left" : "defineSlot(n, parent, getNativeType(BOOLEAN_TYPE), true);",
      "right" : "defineSlot(n, parent, getNativeType(BOOLEAN_TYPE), true);",
      "info" : "ExpressionStatement[62312-62369]:ExpressionStatement[62312-62369]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[65139-65146]:Modifier[65442-65449]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[65147-65154]:PrimitiveType[65450-65457]"
    }, {
      "left" : "isConstantSymbol",
      "right" : "isConstantSymbol",
      "info" : "SimpleName[65155-65171]:SimpleName[65458-65474]"
    }, {
      "left" : "JSDocInfo info",
      "right" : "JSDocInfo info",
      "info" : "SingleVariableDeclaration[65172-65186]:SingleVariableDeclaration[65475-65489]"
    }, {
      "left" : "Node node",
      "right" : "Node node",
      "info" : "SingleVariableDeclaration[65188-65197]:SingleVariableDeclaration[65491-65500]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65199-65667]:Block[65502-65970]"
    }, {
      "left" : "if (info != null && info.isConstant())",
      "right" : "if (info != null && info.isConstant())",
      "info" : "IfStatement[65207-65276]:IfStatement[65510-65579]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65246-65276]:Block[65549-65579]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[65256-65268]:ReturnStatement[65559-65571]"
    }, {
      "left" : "switch (node.getType()) {\n        case Token.NAME:\n          return NodeUtil.isConstantByConvention(\n              compiler.getCodingConvention(), node, node.getParent());\n        case Token.GETPROP:\n          return node.isQualifiedName() && NodeUtil.isConstantByConvention(\n              compiler.getCodingConvention(), node.getLastChild(), node);\n      }",
      "right" : "switch (node.getType()) {\n        case Token.NAME:\n          return NodeUtil.isConstantByConvention(\n              compiler.getCodingConvention(), node, node.getParent());\n        case Token.GETPROP:\n          return node.isQualifiedName() && NodeUtil.isConstantByConvention(\n              compiler.getCodingConvention(), node.getLastChild(), node);\n      }",
      "info" : "SwitchStatement[65284-65641]:SwitchStatement[65587-65944]"
    }, {
      "left" : "case Token.NAME:",
      "right" : "case Token.NAME:",
      "info" : "SwitchCase[65318-65334]:SwitchCase[65621-65637]"
    }, {
      "left" : "return NodeUtil.isConstantByConvention(\n              compiler.getCodingConvention(), node, node.getParent());",
      "right" : "return NodeUtil.isConstantByConvention(\n              compiler.getCodingConvention(), node, node.getParent());",
      "info" : "ReturnStatement[65345-65455]:ReturnStatement[65648-65758]"
    }, {
      "left" : "case Token.GETPROP:",
      "right" : "case Token.GETPROP:",
      "info" : "SwitchCase[65464-65483]:SwitchCase[65767-65786]"
    }, {
      "left" : "return node.isQualifiedName() && NodeUtil.isConstantByConvention(\n              compiler.getCodingConvention(), node.getLastChild(), node);",
      "right" : "return node.isQualifiedName() && NodeUtil.isConstantByConvention(\n              compiler.getCodingConvention(), node.getLastChild(), node);",
      "info" : "ReturnStatement[65494-65633]:ReturnStatement[65797-65936]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[65648-65661]:ReturnStatement[65951-65964]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[65893-65900]:Modifier[66196-66203]"
    }, {
      "left" : "ObjectType",
      "right" : "ObjectType",
      "info" : "SimpleType[65901-65911]:SimpleType[66204-66214]"
    }, {
      "left" : "getObjectSlot",
      "right" : "getObjectSlot",
      "info" : "SimpleName[65912-65925]:SimpleName[66215-66228]"
    }, {
      "left" : "String slotName",
      "right" : "String slotName",
      "info" : "SingleVariableDeclaration[65926-65941]:SingleVariableDeclaration[66229-66244]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65943-66221]:Block[66246-66524]"
    }, {
      "left" : "Var ownerVar = scope.getVar(slotName);",
      "right" : "Var ownerVar = scope.getVar(slotName);",
      "info" : "VariableDeclarationStatement[65951-65989]:VariableDeclarationStatement[66254-66292]"
    }, {
      "left" : "if (ownerVar != null)",
      "right" : "if (ownerVar != null)",
      "info" : "IfStatement[65996-66196]:IfStatement[66299-66499]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66018-66196]:Block[66321-66499]"
    }, {
      "left" : "JSType ownerVarType = ownerVar.getType();",
      "right" : "JSType ownerVarType = ownerVar.getType();",
      "info" : "VariableDeclarationStatement[66028-66069]:VariableDeclarationStatement[66331-66372]"
    }, {
      "left" : "return ObjectType.cast(ownerVarType == null ?\n            null : ownerVarType.restrictByNotNullOrUndefined());",
      "right" : "return ObjectType.cast(ownerVarType == null ?\n            null : ownerVarType.restrictByNotNullOrUndefined());",
      "info" : "ReturnStatement[66078-66188]:ReturnStatement[66381-66491]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[66203-66215]:ReturnStatement[66506-66518]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[66358-66362]:PrimitiveType[66661-66665]"
    }, {
      "left" : "resolveStubDeclarations",
      "right" : "resolveStubDeclarations",
      "info" : "SimpleName[66363-66386]:SimpleName[66666-66689]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66389-67459]:Block[66692-67762]"
    }, {
      "left" : "for (StubDeclaration stub : stubDeclarations)",
      "right" : "for (StubDeclaration stub : stubDeclarations)",
      "info" : "EnhancedForStatement[66397-67453]:EnhancedForStatement[66700-67756]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66443-67453]:Block[66746-67756]"
    }, {
      "left" : "Node n = stub.node;",
      "right" : "Node n = stub.node;",
      "info" : "VariableDeclarationStatement[66453-66472]:VariableDeclarationStatement[66756-66775]"
    }, {
      "left" : "Node parent = n.getParent();",
      "right" : "Node parent = n.getParent();",
      "info" : "VariableDeclarationStatement[66481-66509]:VariableDeclarationStatement[66784-66812]"
    }, {
      "left" : "String qName = n.getQualifiedName();",
      "right" : "String qName = n.getQualifiedName();",
      "info" : "VariableDeclarationStatement[66518-66554]:VariableDeclarationStatement[66821-66857]"
    }, {
      "left" : "String propName = n.getLastChild().getString();",
      "right" : "String propName = n.getLastChild().getString();",
      "info" : "VariableDeclarationStatement[66563-66610]:VariableDeclarationStatement[66866-66913]"
    }, {
      "left" : "String ownerName = stub.ownerName;",
      "right" : "String ownerName = stub.ownerName;",
      "info" : "VariableDeclarationStatement[66619-66653]:VariableDeclarationStatement[66922-66956]"
    }, {
      "left" : "boolean isExtern = stub.isExtern;",
      "right" : "boolean isExtern = stub.isExtern;",
      "info" : "VariableDeclarationStatement[66662-66695]:VariableDeclarationStatement[66965-66998]"
    }, {
      "left" : "if (scope.isDeclared(qName, false))",
      "right" : "if (scope.isDeclared(qName, false))",
      "info" : "IfStatement[66705-66772]:IfStatement[67008-67075]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66741-66772]:Block[67044-67075]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[66753-66762]:ContinueStatement[67056-67065]"
    }, {
      "left" : "ObjectType ownerType = getObjectSlot(ownerName);",
      "right" : "ObjectType ownerType = getObjectSlot(ownerName);",
      "info" : "VariableDeclarationStatement[66889-66937]:VariableDeclarationStatement[67192-67240]"
    }, {
      "left" : "defineSlot(n, parent, unknownType, true);",
      "right" : "defineSlot(n, parent, unknownType, true);",
      "info" : "ExpressionStatement[66946-66987]:ExpressionStatement[67249-67290]"
    }, {
      "left" : "if (ownerType != null &&\n            (isExtern || ownerType.isFunctionPrototypeType()))",
      "right" : "if (ownerType != null &&\n            (isExtern || ownerType.isFunctionPrototypeType()))",
      "info" : "IfStatement[66997-67445]:IfStatement[67300-67748]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67085-67311]:Block[67388-67614]"
    }, {
      "left" : "ownerType.defineInferredProperty(\n              propName, unknownType, n);",
      "right" : "ownerType.defineInferredProperty(\n              propName, unknownType, n);",
      "info" : "ExpressionStatement[67227-67301]:ExpressionStatement[67530-67604]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67317-67445]:Block[67620-67748]"
    }, {
      "left" : "typeRegistry.registerPropertyOnType(\n              propName, ownerType == null ? unknownType : ownerType);",
      "right" : "typeRegistry.registerPropertyOnType(\n              propName, ownerType == null ? unknownType : ownerType);",
      "info" : "ExpressionStatement[67329-67435]:ExpressionStatement[67632-67738]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[67591-67598]:Modifier[67894-67901]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[67599-67604]:Modifier[67902-67907]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[67605-67610]:TYPE_DECLARATION_KIND[67908-67913]"
    }, {
      "left" : "CollectProperties",
      "right" : "CollectProperties",
      "info" : "SimpleName[67611-67628]:SimpleName[67914-67931]"
    }, {
      "left" : "AbstractShallowStatementCallback",
      "right" : "AbstractShallowStatementCallback",
      "info" : "SimpleType[67645-67677]:SimpleType[67948-67980]"
    }, {
      "left" : "CollectProperties",
      "right" : "CollectProperties",
      "info" : "SimpleName[67724-67741]:SimpleName[68027-68044]"
    }, {
      "left" : "JSType thisType",
      "right" : "JSType thisType",
      "info" : "SingleVariableDeclaration[67742-67757]:SingleVariableDeclaration[68045-68060]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67759-67802]:Block[68062-68105]"
    }, {
      "left" : "this.thisType = thisType;",
      "right" : "this.thisType = thisType;",
      "info" : "ExpressionStatement[67769-67794]:ExpressionStatement[68072-68097]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[67810-67819]:MarkerAnnotation[68113-68122]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[67826-67832]:Modifier[68129-68135]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[67833-67837]:PrimitiveType[68136-68140]"
    }, {
      "left" : "visit",
      "right" : "visit",
      "info" : "SimpleName[67838-67843]:SimpleName[68141-68146]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[67844-67859]:SingleVariableDeclaration[68147-68162]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[67861-67867]:SingleVariableDeclaration[68164-68170]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[67869-67880]:SingleVariableDeclaration[68172-68183]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67882-68287]:Block[68185-68590]"
    }, {
      "left" : "if (n.isExprResult())",
      "right" : "if (n.isExprResult())",
      "info" : "IfStatement[67892-68279]:IfStatement[68195-68582]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67914-68279]:Block[68217-68582]"
    }, {
      "left" : "Node child = n.getFirstChild();",
      "right" : "Node child = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[67926-67957]:VariableDeclarationStatement[68229-68260]"
    }, {
      "left" : "switch (child.getType()) {\n            case Token.ASSIGN:\n              maybeCollectMember(child.getFirstChild(), child,\n                  child.getLastChild());\n              break;\n            case Token.GETPROP:\n              maybeCollectMember(child, child, null);\n              break;\n          }",
      "right" : "switch (child.getType()) {\n            case Token.ASSIGN:\n              maybeCollectMember(child.getFirstChild(), child,\n                  child.getLastChild());\n              break;\n            case Token.GETPROP:\n              maybeCollectMember(child, child, null);\n              break;\n          }",
      "info" : "SwitchStatement[67968-68269]:SwitchStatement[68271-68572]"
    }, {
      "left" : "case Token.ASSIGN:",
      "right" : "case Token.ASSIGN:",
      "info" : "SwitchCase[68007-68025]:SwitchCase[68310-68328]"
    }, {
      "left" : "maybeCollectMember(child.getFirstChild(), child,\n                  child.getLastChild());",
      "right" : "maybeCollectMember(child.getFirstChild(), child,\n                  child.getLastChild());",
      "info" : "ExpressionStatement[68040-68129]:ExpressionStatement[68343-68432]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[68144-68150]:BreakStatement[68447-68453]"
    }, {
      "left" : "case Token.GETPROP:",
      "right" : "case Token.GETPROP:",
      "info" : "SwitchCase[68163-68182]:SwitchCase[68466-68485]"
    }, {
      "left" : "maybeCollectMember(child, child, null);",
      "right" : "maybeCollectMember(child, child, null);",
      "info" : "ExpressionStatement[68197-68236]:ExpressionStatement[68500-68539]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[68251-68257]:BreakStatement[68554-68560]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[68295-68302]:Modifier[68598-68605]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[68303-68307]:PrimitiveType[68606-68610]"
    }, {
      "left" : "maybeCollectMember",
      "right" : "maybeCollectMember",
      "info" : "SimpleName[68308-68326]:SimpleName[68611-68629]"
    }, {
      "left" : "Node member",
      "right" : "Node member",
      "info" : "SingleVariableDeclaration[68327-68338]:SingleVariableDeclaration[68630-68641]"
    }, {
      "left" : "Node nodeWithJsDocInfo",
      "right" : "Node nodeWithJsDocInfo",
      "info" : "SingleVariableDeclaration[68350-68372]:SingleVariableDeclaration[68653-68675]"
    }, {
      "left" : "@Nullable Node value",
      "right" : "@Nullable Node value",
      "info" : "SingleVariableDeclaration[68374-68394]:SingleVariableDeclaration[68677-68697]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[68396-69744]:Block[68699-70047]"
    }, {
      "left" : "JSDocInfo info = nodeWithJsDocInfo.getJSDocInfo();",
      "right" : "JSDocInfo info = nodeWithJsDocInfo.getJSDocInfo();",
      "info" : "VariableDeclarationStatement[68406-68456]:VariableDeclarationStatement[68709-68759]"
    }, {
      "left" : "if (info == null ||\n            !member.isGetProp() ||\n            !member.getFirstChild().isThis())",
      "right" : "if (info == null ||\n            !member.isGetProp() ||\n            !member.getFirstChild().isThis())",
      "info" : "IfStatement[68652-68782]:IfStatement[68955-69085]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[68753-68782]:Block[69056-69085]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[68765-68772]:ReturnStatement[69068-69075]"
    }, {
      "left" : "member.getFirstChild().setJSType(thisType);",
      "right" : "member.getFirstChild().setJSType(thisType);",
      "info" : "ExpressionStatement[68792-68835]:ExpressionStatement[69095-69138]"
    }, {
      "left" : "JSType thisObjectType = thisType.toObjectType();",
      "right" : "JSType thisObjectType = thisType.toObjectType();",
      "info" : "VariableDeclarationStatement[68998-69046]:VariableDeclarationStatement[69301-69349]"
    }, {
      "left" : "if (thisObjectType != null)",
      "right" : "if (thisObjectType != null)",
      "info" : "IfStatement[69055-69259]:IfStatement[69358-69562]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[69083-69259]:Block[69386-69562]"
    }, {
      "left" : "ImmutableList<TemplateType> keys =\n              thisObjectType.getTemplateTypeMap().getTemplateKeys();",
      "right" : "ImmutableList<TemplateType> keys =\n              thisObjectType.getTemplateTypeMap().getTemplateKeys();",
      "info" : "VariableDeclarationStatement[69095-69198]:VariableDeclarationStatement[69398-69501]"
    }, {
      "left" : "typeRegistry.setTemplateTypeNames(keys);",
      "right" : "typeRegistry.setTemplateTypeNames(keys);",
      "info" : "ExpressionStatement[69209-69249]:ExpressionStatement[69512-69552]"
    }, {
      "left" : "JSType jsType = getDeclaredType(info, member, value);",
      "right" : "JSType jsType = getDeclaredType(info, member, value);",
      "info" : "VariableDeclarationStatement[69269-69322]:VariableDeclarationStatement[69572-69625]"
    }, {
      "left" : "if (thisObjectType != null)",
      "right" : "if (thisObjectType != null)",
      "info" : "IfStatement[69332-69420]:IfStatement[69635-69723]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[69360-69420]:Block[69663-69723]"
    }, {
      "left" : "typeRegistry.clearTemplateTypeNames();",
      "right" : "typeRegistry.clearTemplateTypeNames();",
      "info" : "ExpressionStatement[69372-69410]:ExpressionStatement[69675-69713]"
    }, {
      "left" : "Node name = member.getLastChild();",
      "right" : "Node name = member.getLastChild();",
      "info" : "VariableDeclarationStatement[69430-69464]:VariableDeclarationStatement[69733-69767]"
    }, {
      "left" : "if (jsType != null &&\n            (name.isName() || name.isString()) &&\n            thisType.toObjectType() != null)",
      "right" : "if (jsType != null &&\n            (name.isName() || name.isString()) &&\n            thisType.toObjectType() != null)",
      "info" : "IfStatement[69473-69736]:IfStatement[69776-70039]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[69590-69736]:Block[69893-70039]"
    }, {
      "left" : "thisType.toObjectType().defineDeclaredProperty(\n              name.getString(),\n              jsType,\n              member);",
      "right" : "thisType.toObjectType().defineDeclaredProperty(\n              name.getString(),\n              jsType,\n              member);",
      "info" : "ExpressionStatement[69602-69726]:ExpressionStatement[69905-70029]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[69849-69856]:Modifier[70152-70159]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[69857-69863]:Modifier[70160-70166]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[69864-69869]:Modifier[70167-70172]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[69870-69875]:TYPE_DECLARATION_KIND[70173-70178]"
    }, {
      "left" : "StubDeclaration",
      "right" : "StubDeclaration",
      "info" : "SimpleName[69876-69891]:SimpleName[70179-70194]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[70000-70007]:Modifier[70303-70310]"
    }, {
      "left" : "StubDeclaration",
      "right" : "StubDeclaration",
      "info" : "SimpleName[70008-70023]:SimpleName[70311-70326]"
    }, {
      "left" : "Node node",
      "right" : "Node node",
      "info" : "SingleVariableDeclaration[70024-70033]:SingleVariableDeclaration[70327-70336]"
    }, {
      "left" : "boolean isExtern",
      "right" : "boolean isExtern",
      "info" : "SingleVariableDeclaration[70035-70051]:SingleVariableDeclaration[70338-70354]"
    }, {
      "left" : "String ownerName",
      "right" : "String ownerName",
      "info" : "SingleVariableDeclaration[70053-70069]:SingleVariableDeclaration[70356-70372]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[70071-70168]:Block[70374-70471]"
    }, {
      "left" : "this.node = node;",
      "right" : "this.node = node;",
      "info" : "ExpressionStatement[70079-70096]:ExpressionStatement[70382-70399]"
    }, {
      "left" : "this.isExtern = isExtern;",
      "right" : "this.isExtern = isExtern;",
      "info" : "ExpressionStatement[70103-70128]:ExpressionStatement[70406-70431]"
    }, {
      "left" : "this.ownerName = ownerName;",
      "right" : "this.ownerName = ownerName;",
      "info" : "ExpressionStatement[70135-70162]:ExpressionStatement[70438-70465]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[70287-70294]:Modifier[70590-70597]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[70295-70300]:Modifier[70598-70603]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[70301-70306]:TYPE_DECLARATION_KIND[70604-70609]"
    }, {
      "left" : "GlobalScopeBuilder",
      "right" : "GlobalScopeBuilder",
      "info" : "SimpleName[70307-70325]:SimpleName[70610-70628]"
    }, {
      "left" : "AbstractScopeBuilder",
      "right" : "AbstractScopeBuilder",
      "info" : "SimpleType[70334-70354]:SimpleType[70637-70657]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[70362-70369]:Modifier[70665-70672]"
    }, {
      "left" : "GlobalScopeBuilder",
      "right" : "GlobalScopeBuilder",
      "info" : "SimpleName[70370-70388]:SimpleName[70673-70691]"
    }, {
      "left" : "Scope scope",
      "right" : "Scope scope",
      "info" : "SingleVariableDeclaration[70389-70400]:SingleVariableDeclaration[70692-70703]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[70402-70429]:Block[70705-70732]"
    }, {
      "left" : "super(scope);",
      "right" : "super(scope);",
      "info" : "SuperConstructorInvocation[70410-70423]:SuperConstructorInvocation[70713-70726]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[70679-70688]:MarkerAnnotation[70982-70991]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[70689-70695]:Modifier[70992-70998]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[70696-70700]:PrimitiveType[70999-71003]"
    }, {
      "left" : "visit",
      "right" : "visit",
      "info" : "SimpleName[70701-70706]:SimpleName[71004-71009]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[70707-70722]:SingleVariableDeclaration[71010-71025]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[70724-70730]:SingleVariableDeclaration[71027-71033]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[70732-70743]:SingleVariableDeclaration[71035-71046]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[70745-71009]:Block[71048-71312]"
    }, {
      "left" : "super.visit(t, n, parent);",
      "right" : "super.visit(t, n, parent);",
      "info" : "ExpressionStatement[70753-70779]:ExpressionStatement[71056-71082]"
    }, {
      "left" : "switch (n.getType()) {\n\n        case Token.VAR:\n          // Handle typedefs.\n          if (n.hasOneChild()) {\n            checkForTypedef(t, n.getFirstChild(), n.getJSDocInfo());\n          }\n          break;\n      }",
      "right" : "switch (n.getType()) {\n\n        case Token.VAR:\n          // Handle typedefs.\n          if (n.hasOneChild()) {\n            checkForTypedef(t, n.getFirstChild(), n.getJSDocInfo());\n          }\n          break;\n      }",
      "info" : "SwitchStatement[70787-71003]:SwitchStatement[71090-71306]"
    }, {
      "left" : "case Token.VAR:",
      "right" : "case Token.VAR:",
      "info" : "SwitchCase[70819-70834]:SwitchCase[71122-71137]"
    }, {
      "left" : "if (n.hasOneChild())",
      "right" : "if (n.hasOneChild())",
      "info" : "IfStatement[70875-70978]:IfStatement[71178-71281]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[70896-70978]:Block[71199-71281]"
    }, {
      "left" : "checkForTypedef(t, n.getFirstChild(), n.getJSDocInfo());",
      "right" : "checkForTypedef(t, n.getFirstChild(), n.getJSDocInfo());",
      "info" : "ExpressionStatement[70910-70966]:ExpressionStatement[71213-71269]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[70989-70995]:BreakStatement[71292-71298]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[71015-71024]:MarkerAnnotation[71318-71327]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[71029-71033]:PrimitiveType[71332-71336]"
    }, {
      "left" : "maybeDeclareQualifiedName",
      "right" : "maybeDeclareQualifiedName",
      "info" : "SimpleName[71034-71059]:SimpleName[71337-71362]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[71069-71084]:SingleVariableDeclaration[71372-71387]"
    }, {
      "left" : "JSDocInfo info",
      "right" : "JSDocInfo info",
      "info" : "SingleVariableDeclaration[71086-71100]:SingleVariableDeclaration[71389-71403]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[71110-71116]:SingleVariableDeclaration[71413-71419]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[71118-71129]:SingleVariableDeclaration[71421-71432]"
    }, {
      "left" : "Node rhsValue",
      "right" : "Node rhsValue",
      "info" : "SingleVariableDeclaration[71131-71144]:SingleVariableDeclaration[71434-71447]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[71146-71257]:Block[71449-71560]"
    }, {
      "left" : "checkForTypedef(t, n, info);",
      "right" : "checkForTypedef(t, n, info);",
      "info" : "ExpressionStatement[71154-71182]:ExpressionStatement[71457-71485]"
    }, {
      "left" : "super.maybeDeclareQualifiedName(t, info, n, parent, rhsValue);",
      "right" : "super.maybeDeclareQualifiedName(t, info, n, parent, rhsValue);",
      "info" : "ExpressionStatement[71189-71251]:ExpressionStatement[71492-71554]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[71424-71431]:Modifier[71727-71734]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[71432-71436]:PrimitiveType[71735-71739]"
    }, {
      "left" : "checkForTypedef",
      "right" : "checkForTypedef",
      "info" : "SimpleName[71437-71452]:SimpleName[71740-71755]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[71462-71477]:SingleVariableDeclaration[71765-71780]"
    }, {
      "left" : "Node candidate",
      "right" : "Node candidate",
      "info" : "SingleVariableDeclaration[71479-71493]:SingleVariableDeclaration[71782-71796]"
    }, {
      "left" : "JSDocInfo info",
      "right" : "JSDocInfo info",
      "info" : "SingleVariableDeclaration[71495-71509]:SingleVariableDeclaration[71798-71812]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[71511-72368]:Block[71814-72671]"
    }, {
      "left" : "if (info == null || !info.hasTypedefType())",
      "right" : "if (info == null || !info.hasTypedefType())",
      "info" : "IfStatement[71519-71588]:IfStatement[71822-71891]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[71563-71588]:Block[71866-71891]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[71573-71580]:ReturnStatement[71876-71883]"
    }, {
      "left" : "String typedef = candidate.getQualifiedName();",
      "right" : "String typedef = candidate.getQualifiedName();",
      "info" : "VariableDeclarationStatement[71596-71642]:VariableDeclarationStatement[71899-71945]"
    }, {
      "left" : "if (typedef == null)",
      "right" : "if (typedef == null)",
      "info" : "IfStatement[71649-71695]:IfStatement[71952-71998]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[71670-71695]:Block[71973-71998]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[71680-71687]:ReturnStatement[71983-71990]"
    }, {
      "left" : "typeRegistry.declareType(typedef, unknownType);",
      "right" : "typeRegistry.declareType(typedef, unknownType);",
      "info" : "ExpressionStatement[71870-71917]:ExpressionStatement[72173-72220]"
    }, {
      "left" : "JSType realType = info.getTypedefType().evaluate(scope, typeRegistry);",
      "right" : "JSType realType = info.getTypedefType().evaluate(scope, typeRegistry);",
      "info" : "VariableDeclarationStatement[71925-71995]:VariableDeclarationStatement[72228-72298]"
    }, {
      "left" : "if (realType == null)",
      "right" : "if (realType == null)",
      "info" : "IfStatement[72002-72160]:IfStatement[72305-72463]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[72024-72160]:Block[72327-72463]"
    }, {
      "left" : "compiler.report(\n            JSError.make(\n                t.getSourceName(), candidate, MALFORMED_TYPEDEF, typedef));",
      "right" : "compiler.report(\n            JSError.make(\n                t.getSourceName(), candidate, MALFORMED_TYPEDEF, typedef));",
      "info" : "ExpressionStatement[72034-72152]:ExpressionStatement[72337-72455]"
    }, {
      "left" : "typeRegistry.overwriteDeclaredType(typedef, realType);",
      "right" : "typeRegistry.overwriteDeclaredType(typedef, realType);",
      "info" : "ExpressionStatement[72168-72222]:ExpressionStatement[72471-72525]"
    }, {
      "left" : "if (candidate.isGetProp())",
      "right" : "if (candidate.isGetProp())",
      "info" : "IfStatement[72229-72362]:IfStatement[72532-72665]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[72256-72362]:Block[72559-72665]"
    }, {
      "left" : "defineSlot(candidate, candidate.getParent(),\n            getNativeType(NO_TYPE), false);",
      "right" : "defineSlot(candidate, candidate.getParent(),\n            getNativeType(NO_TYPE), false);",
      "info" : "ExpressionStatement[72266-72354]:ExpressionStatement[72569-72657]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[72504-72511]:Modifier[72807-72814]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[72512-72517]:Modifier[72815-72820]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[72518-72523]:TYPE_DECLARATION_KIND[72821-72826]"
    }, {
      "left" : "LocalScopeBuilder",
      "right" : "LocalScopeBuilder",
      "info" : "SimpleName[72524-72541]:SimpleName[72827-72844]"
    }, {
      "left" : "AbstractScopeBuilder",
      "right" : "AbstractScopeBuilder",
      "info" : "SimpleType[72550-72570]:SimpleType[72853-72873]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[72644-72651]:Modifier[72947-72954]"
    }, {
      "left" : "LocalScopeBuilder",
      "right" : "LocalScopeBuilder",
      "info" : "SimpleName[72652-72669]:SimpleName[72955-72972]"
    }, {
      "left" : "Scope scope",
      "right" : "Scope scope",
      "info" : "SingleVariableDeclaration[72670-72681]:SingleVariableDeclaration[72973-72984]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[72683-72710]:Block[72986-73013]"
    }, {
      "left" : "super(scope);",
      "right" : "super(scope);",
      "info" : "SuperConstructorInvocation[72691-72704]:SuperConstructorInvocation[72994-73007]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[72777-72781]:PrimitiveType[73080-73084]"
    }, {
      "left" : "build",
      "right" : "build",
      "info" : "SimpleName[72782-72787]:SimpleName[73085-73090]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[72790-73521]:Block[73093-73824]"
    }, {
      "left" : "NodeTraversal.traverse(compiler, scope.getRootNode(), this);",
      "right" : "NodeTraversal.traverse(compiler, scope.getRootNode(), this);",
      "info" : "ExpressionStatement[72798-72858]:ExpressionStatement[73101-73161]"
    }, {
      "left" : "AstFunctionContents contents =\n          getFunctionAnalysisResults(scope.getRootNode());",
      "right" : "AstFunctionContents contents =\n          getFunctionAnalysisResults(scope.getRootNode());",
      "info" : "VariableDeclarationStatement[72866-72955]:VariableDeclarationStatement[73169-73258]"
    }, {
      "left" : "if (contents != null)",
      "right" : "if (contents != null)",
      "info" : "IfStatement[72962-73515]:IfStatement[73265-73818]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[72984-73515]:Block[73287-73818]"
    }, {
      "left" : "for (String varName : contents.getEscapedVarNames())",
      "right" : "for (String varName : contents.getEscapedVarNames())",
      "info" : "EnhancedForStatement[72994-73185]:EnhancedForStatement[73297-73488]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[73047-73185]:Block[73350-73488]"
    }, {
      "left" : "Var v = scope.getVar(varName);",
      "right" : "Var v = scope.getVar(varName);",
      "info" : "VariableDeclarationStatement[73059-73089]:VariableDeclarationStatement[73362-73392]"
    }, {
      "left" : "Preconditions.checkState(v.getScope() == scope);",
      "right" : "Preconditions.checkState(v.getScope() == scope);",
      "info" : "ExpressionStatement[73100-73148]:ExpressionStatement[73403-73451]"
    }, {
      "left" : "v.markEscaped();",
      "right" : "v.markEscaped();",
      "info" : "ExpressionStatement[73159-73175]:ExpressionStatement[73462-73478]"
    }, {
      "left" : "for (Multiset.Entry<String> entry :\n                 contents.getAssignedNameCounts().entrySet())",
      "right" : "for (Multiset.Entry<String> entry :\n                 contents.getAssignedNameCounts().entrySet())",
      "info" : "EnhancedForStatement[73195-73507]:EnhancedForStatement[73498-73810]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[73293-73507]:Block[73596-73810]"
    }, {
      "left" : "Var v = scope.getVar(entry.getElement());",
      "right" : "Var v = scope.getVar(entry.getElement());",
      "info" : "VariableDeclarationStatement[73305-73346]:VariableDeclarationStatement[73608-73649]"
    }, {
      "left" : "Preconditions.checkState(v.getScope() == scope);",
      "right" : "Preconditions.checkState(v.getScope() == scope);",
      "info" : "ExpressionStatement[73357-73405]:ExpressionStatement[73660-73708]"
    }, {
      "left" : "if (entry.getCount() == 1)",
      "right" : "if (entry.getCount() == 1)",
      "info" : "IfStatement[73416-73497]:IfStatement[73719-73800]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[73443-73497]:Block[73746-73800]"
    }, {
      "left" : "v.markAssignedExactlyOnce();",
      "right" : "v.markAssignedExactlyOnce();",
      "info" : "ExpressionStatement[73457-73485]:ExpressionStatement[73760-73788]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[73785-73794]:MarkerAnnotation[74088-74097]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[73795-73801]:Modifier[74098-74104]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[73802-73806]:PrimitiveType[74105-74109]"
    }, {
      "left" : "visit",
      "right" : "visit",
      "info" : "SimpleName[73807-73812]:SimpleName[74110-74115]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[73813-73828]:SingleVariableDeclaration[74116-74131]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[73830-73836]:SingleVariableDeclaration[74133-74139]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[73838-73849]:SingleVariableDeclaration[74141-74152]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[73851-74078]:Block[74154-74381]"
    }, {
      "left" : "if (n == scope.getRootNode())",
      "right" : "if (n == scope.getRootNode())",
      "info" : "IfStatement[73859-73914]:IfStatement[74162-74217]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[73889-73914]:Block[74192-74217]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[73899-73906]:ReturnStatement[74202-74209]"
    }, {
      "left" : "if (n.isParamList() && parent == scope.getRootNode())",
      "right" : "if (n.isParamList() && parent == scope.getRootNode())",
      "info" : "IfStatement[73921-74038]:IfStatement[74224-74341]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[73975-74038]:Block[74278-74341]"
    }, {
      "left" : "handleFunctionInputs(parent);",
      "right" : "handleFunctionInputs(parent);",
      "info" : "ExpressionStatement[73985-74014]:ExpressionStatement[74288-74317]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[74023-74030]:ReturnStatement[74326-74333]"
    }, {
      "left" : "super.visit(t, n, parent);",
      "right" : "super.visit(t, n, parent);",
      "info" : "ExpressionStatement[74046-74072]:ExpressionStatement[74349-74375]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[74146-74153]:Modifier[74449-74456]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[74154-74158]:PrimitiveType[74457-74461]"
    }, {
      "left" : "handleFunctionInputs",
      "right" : "handleFunctionInputs",
      "info" : "SimpleName[74159-74179]:SimpleName[74462-74482]"
    }, {
      "left" : "Node fnNode",
      "right" : "Node fnNode",
      "info" : "SingleVariableDeclaration[74180-74191]:SingleVariableDeclaration[74483-74494]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[74193-74949]:Block[74496-75252]"
    }, {
      "left" : "Node fnNameNode = fnNode.getFirstChild();",
      "right" : "Node fnNameNode = fnNode.getFirstChild();",
      "info" : "VariableDeclarationStatement[74237-74278]:VariableDeclarationStatement[74540-74581]"
    }, {
      "left" : "String fnName = fnNameNode.getString();",
      "right" : "String fnName = fnNameNode.getString();",
      "info" : "VariableDeclarationStatement[74285-74324]:VariableDeclarationStatement[74588-74627]"
    }, {
      "left" : "if (!fnName.isEmpty())",
      "right" : "if (!fnName.isEmpty())",
      "info" : "IfStatement[74331-74910]:IfStatement[74634-75213]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[74354-74910]:Block[74657-75213]"
    }, {
      "left" : "Scope.Var fnVar = scope.getVar(fnName);",
      "right" : "Scope.Var fnVar = scope.getVar(fnName);",
      "info" : "VariableDeclarationStatement[74364-74403]:VariableDeclarationStatement[74667-74706]"
    }, {
      "left" : "if (fnVar == null ||\n            // Make sure we're not touching a native function. Native\n            // functions aren't bleeding, but may not have a declaration\n            // node.\n            (fnVar.getNameNode() != null &&\n                // Make sure that the function is actually bleeding by checking\n                // if has already been declared.\n                fnVar.getInitialValue() != fnNode))",
      "right" : "if (fnVar == null ||\n            // Make sure we're not touching a native function. Native\n            // functions aren't bleeding, but may not have a declaration\n            // node.\n            (fnVar.getNameNode() != null &&\n                // Make sure that the function is actually bleeding by checking\n                // if has already been declared.\n                fnVar.getInitialValue() != fnNode))",
      "info" : "IfStatement[74412-74902]:IfStatement[74715-75205]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[74822-74902]:Block[75125-75205]"
    }, {
      "left" : "defineSlot(fnNameNode, fnNode, fnNode.getJSType(), false);",
      "right" : "defineSlot(fnNameNode, fnNode, fnNode.getJSType(), false);",
      "info" : "ExpressionStatement[74834-74892]:ExpressionStatement[75137-75195]"
    }, {
      "left" : "declareArguments(fnNode);",
      "right" : "declareArguments(fnNode);",
      "info" : "ExpressionStatement[74918-74943]:ExpressionStatement[75221-75246]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[75018-75025]:Modifier[75321-75328]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[75026-75030]:PrimitiveType[75329-75333]"
    }, {
      "left" : "declareArguments",
      "right" : "declareArguments",
      "info" : "SimpleName[75031-75047]:SimpleName[75334-75350]"
    }, {
      "left" : "Node functionNode",
      "right" : "Node functionNode",
      "info" : "SingleVariableDeclaration[75048-75065]:SingleVariableDeclaration[75351-75368]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[75067-76728]:Block[75370-77031]"
    }, {
      "left" : "Node astParameters = functionNode.getFirstChild().getNext();",
      "right" : "Node astParameters = functionNode.getFirstChild().getNext();",
      "info" : "VariableDeclarationStatement[75075-75135]:VariableDeclarationStatement[75378-75438]"
    }, {
      "left" : "Node iifeArgumentNode = null;",
      "right" : "Node iifeArgumentNode = null;",
      "info" : "VariableDeclarationStatement[75142-75171]:VariableDeclarationStatement[75445-75474]"
    }, {
      "left" : "if (NodeUtil.isCallOrNewTarget(functionNode))",
      "right" : "if (NodeUtil.isCallOrNewTarget(functionNode))",
      "info" : "IfStatement[75179-75285]:IfStatement[75482-75588]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[75225-75285]:Block[75528-75588]"
    }, {
      "left" : "iifeArgumentNode = functionNode.getNext();",
      "right" : "iifeArgumentNode = functionNode.getNext();",
      "info" : "ExpressionStatement[75235-75277]:ExpressionStatement[75538-75580]"
    }, {
      "left" : "FunctionType functionType =\n          JSType.toMaybeFunctionType(functionNode.getJSType());",
      "right" : "FunctionType functionType =\n          JSType.toMaybeFunctionType(functionNode.getJSType());",
      "info" : "VariableDeclarationStatement[75293-75384]:VariableDeclarationStatement[75596-75687]"
    }, {
      "left" : "if (functionType != null)",
      "right" : "if (functionType != null)",
      "info" : "IfStatement[75391-76722]:IfStatement[75694-77025]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[75417-76722]:Block[75720-77025]"
    }, {
      "left" : "Node jsDocParameters = functionType.getParametersNode();",
      "right" : "Node jsDocParameters = functionType.getParametersNode();",
      "info" : "VariableDeclarationStatement[75427-75483]:VariableDeclarationStatement[75730-75786]"
    }, {
      "left" : "if (jsDocParameters != null)",
      "right" : "if (jsDocParameters != null)",
      "info" : "IfStatement[75492-76714]:IfStatement[75795-77017]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[75521-76714]:Block[75824-77017]"
    }, {
      "left" : "Node jsDocParameter = jsDocParameters.getFirstChild();",
      "right" : "Node jsDocParameter = jsDocParameters.getFirstChild();",
      "info" : "VariableDeclarationStatement[75533-75587]:VariableDeclarationStatement[75836-75890]"
    }, {
      "left" : "for (Node astParameter : astParameters.children())",
      "right" : "for (Node astParameter : astParameters.children())",
      "info" : "EnhancedForStatement[75598-76704]:EnhancedForStatement[75901-77007]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[75649-76704]:Block[75952-77007]"
    }, {
      "left" : "JSType paramType = jsDocParameter == null ?\n                unknownType : jsDocParameter.getJSType();",
      "right" : "JSType paramType = jsDocParameter == null ?\n                unknownType : jsDocParameter.getJSType();",
      "info" : "VariableDeclarationStatement[75663-75764]:VariableDeclarationStatement[75966-76067]"
    }, {
      "left" : "boolean inferred = paramType == null || paramType == unknownType;",
      "right" : "boolean inferred = paramType == null || paramType == unknownType;",
      "info" : "VariableDeclarationStatement[75777-75842]:VariableDeclarationStatement[76080-76145]"
    }, {
      "left" : "if (iifeArgumentNode != null && inferred)",
      "right" : "if (iifeArgumentNode != null && inferred)",
      "info" : "IfStatement[75856-76294]:IfStatement[76159-76597]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[75898-76294]:Block[76201-76597]"
    }, {
      "left" : "String argumentName = iifeArgumentNode.getQualifiedName();",
      "right" : "String argumentName = iifeArgumentNode.getQualifiedName();",
      "info" : "VariableDeclarationStatement[75914-75972]:VariableDeclarationStatement[76217-76275]"
    }, {
      "left" : "Var argumentVar =\n                  argumentName == null || scope.getParent() == null\n                  ? null : scope.getParent().getVar(argumentName);",
      "right" : "Var argumentVar =\n                  argumentName == null || scope.getParent() == null\n                  ? null : scope.getParent().getVar(argumentName);",
      "info" : "VariableDeclarationStatement[75987-76139]:VariableDeclarationStatement[76290-76442]"
    }, {
      "left" : "if (argumentVar != null && !argumentVar.isTypeInferred())",
      "right" : "if (argumentVar != null && !argumentVar.isTypeInferred())",
      "info" : "IfStatement[76154-76280]:IfStatement[76457-76583]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[76212-76280]:Block[76515-76583]"
    }, {
      "left" : "paramType = argumentVar.getType();",
      "right" : "paramType = argumentVar.getType();",
      "info" : "ExpressionStatement[76230-76264]:ExpressionStatement[76533-76567]"
    }, {
      "left" : "if (paramType == null)",
      "right" : "if (paramType == null)",
      "info" : "IfStatement[76308-76385]:IfStatement[76611-76688]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[76331-76385]:Block[76634-76688]"
    }, {
      "left" : "paramType = unknownType;",
      "right" : "paramType = unknownType;",
      "info" : "ExpressionStatement[76347-76371]:ExpressionStatement[76650-76674]"
    }, {
      "left" : "defineSlot(astParameter, functionNode, paramType, inferred);",
      "right" : "defineSlot(astParameter, functionNode, paramType, inferred);",
      "info" : "ExpressionStatement[76399-76459]:ExpressionStatement[76702-76762]"
    }, {
      "left" : "if (jsDocParameter != null)",
      "right" : "if (jsDocParameter != null)",
      "info" : "IfStatement[76473-76573]:IfStatement[76776-76876]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[76501-76573]:Block[76804-76876]"
    }, {
      "left" : "jsDocParameter = jsDocParameter.getNext();",
      "right" : "jsDocParameter = jsDocParameter.getNext();",
      "info" : "ExpressionStatement[76517-76559]:ExpressionStatement[76820-76862]"
    }, {
      "left" : "if (iifeArgumentNode != null)",
      "right" : "if (iifeArgumentNode != null)",
      "info" : "IfStatement[76586-76692]:IfStatement[76889-76995]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[76616-76692]:Block[76919-76995]"
    }, {
      "left" : "iifeArgumentNode = iifeArgumentNode.getNext();",
      "right" : "iifeArgumentNode = iifeArgumentNode.getNext();",
      "info" : "ExpressionStatement[76632-76678]:ExpressionStatement[76935-76981]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[76938-76945]:Modifier[77241-77248]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[76946-76952]:Modifier[77249-77255]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[76953-76958]:TYPE_DECLARATION_KIND[77256-77261]"
    }, {
      "left" : "FirstOrderFunctionAnalyzer",
      "right" : "FirstOrderFunctionAnalyzer",
      "info" : "SimpleName[76959-76985]:SimpleName[77262-77288]"
    }, {
      "left" : "AbstractScopedCallback",
      "right" : "AbstractScopedCallback",
      "info" : "SimpleType[77000-77022]:SimpleType[77303-77325]"
    }, {
      "left" : "CompilerPass",
      "right" : "CompilerPass",
      "info" : "SimpleType[77034-77046]:SimpleType[77337-77349]"
    }, {
      "left" : "FirstOrderFunctionAnalyzer",
      "right" : "FirstOrderFunctionAnalyzer",
      "info" : "SimpleName[77154-77180]:SimpleName[77457-77483]"
    }, {
      "left" : "AbstractCompiler compiler",
      "right" : "AbstractCompiler compiler",
      "info" : "SingleVariableDeclaration[77190-77215]:SingleVariableDeclaration[77493-77518]"
    }, {
      "left" : "Map<Node, AstFunctionContents> outParam",
      "right" : "Map<Node, AstFunctionContents> outParam",
      "info" : "SingleVariableDeclaration[77217-77256]:SingleVariableDeclaration[77520-77559]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[77258-77325]:Block[77561-77628]"
    }, {
      "left" : "this.compiler = compiler;",
      "right" : "this.compiler = compiler;",
      "info" : "ExpressionStatement[77266-77291]:ExpressionStatement[77569-77594]"
    }, {
      "left" : "this.data = outParam;",
      "right" : "this.data = outParam;",
      "info" : "ExpressionStatement[77298-77319]:ExpressionStatement[77601-77622]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[77331-77340]:MarkerAnnotation[77634-77643]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[77341-77347]:Modifier[77644-77650]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[77348-77352]:PrimitiveType[77651-77655]"
    }, {
      "left" : "process",
      "right" : "process",
      "info" : "SimpleName[77353-77360]:SimpleName[77656-77663]"
    }, {
      "left" : "Node externs",
      "right" : "Node externs",
      "info" : "SingleVariableDeclaration[77361-77373]:SingleVariableDeclaration[77664-77676]"
    }, {
      "left" : "Node root",
      "right" : "Node root",
      "info" : "SingleVariableDeclaration[77375-77384]:SingleVariableDeclaration[77678-77687]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[77386-77598]:Block[77689-77901]"
    }, {
      "left" : "if (externs == null)",
      "right" : "if (externs == null)",
      "info" : "IfStatement[77394-77592]:IfStatement[77697-77895]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[77415-77478]:Block[77718-77781]"
    }, {
      "left" : "NodeTraversal.traverse(compiler, root, this);",
      "right" : "NodeTraversal.traverse(compiler, root, this);",
      "info" : "ExpressionStatement[77425-77470]:ExpressionStatement[77728-77773]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[77484-77592]:Block[77787-77895]"
    }, {
      "left" : "NodeTraversal.traverseRoots(\n            compiler, ImmutableList.of(externs, root), this);",
      "right" : "NodeTraversal.traverseRoots(\n            compiler, ImmutableList.of(externs, root), this);",
      "info" : "ExpressionStatement[77494-77584]:ExpressionStatement[77797-77887]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[77604-77613]:MarkerAnnotation[77907-77916]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[77614-77620]:Modifier[77917-77923]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[77621-77625]:PrimitiveType[77924-77928]"
    }, {
      "left" : "enterScope",
      "right" : "enterScope",
      "info" : "SimpleName[77626-77636]:SimpleName[77929-77939]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[77637-77652]:SingleVariableDeclaration[77940-77955]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[77654-77785]:Block[77957-78088]"
    }, {
      "left" : "if (!t.inGlobalScope())",
      "right" : "if (!t.inGlobalScope())",
      "info" : "IfStatement[77662-77779]:IfStatement[77965-78082]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[77686-77779]:Block[77989-78082]"
    }, {
      "left" : "Node n = t.getScopeRoot();",
      "right" : "Node n = t.getScopeRoot();",
      "info" : "VariableDeclarationStatement[77696-77722]:VariableDeclarationStatement[77999-78025]"
    }, {
      "left" : "data.put(n, new AstFunctionContents(n));",
      "right" : "data.put(n, new AstFunctionContents(n));",
      "info" : "ExpressionStatement[77731-77771]:ExpressionStatement[78034-78074]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[77791-77800]:MarkerAnnotation[78094-78103]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[77801-77807]:Modifier[78104-78110]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[77808-77812]:PrimitiveType[78111-78115]"
    }, {
      "left" : "visit",
      "right" : "visit",
      "info" : "SimpleName[77813-77818]:SimpleName[78116-78121]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[77819-77834]:SingleVariableDeclaration[78122-78137]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[77836-77842]:SingleVariableDeclaration[78139-78145]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[77844-77855]:SingleVariableDeclaration[78147-78158]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[77857-79718]:Block[78160-80021]"
    }, {
      "left" : "if (t.inGlobalScope())",
      "right" : "if (t.inGlobalScope())",
      "info" : "IfStatement[77865-77913]:IfStatement[78168-78216]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[77888-77913]:Block[78191-78216]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[77898-77905]:ReturnStatement[78201-78208]"
    }, {
      "left" : "if (n.isReturn() && n.getFirstChild() != null)",
      "right" : "if (n.isReturn() && n.getFirstChild() != null)",
      "info" : "IfStatement[77921-78036]:IfStatement[78224-78339]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[77968-78036]:Block[78271-78339]"
    }, {
      "left" : "data.get(t.getScopeRoot()).recordNonEmptyReturn();",
      "right" : "data.get(t.getScopeRoot()).recordNonEmptyReturn();",
      "info" : "ExpressionStatement[77978-78028]:ExpressionStatement[78281-78331]"
    }, {
      "left" : "if (t.getScopeDepth() <= 1)",
      "right" : "if (t.getScopeDepth() <= 1)",
      "info" : "IfStatement[78044-78488]:IfStatement[78347-78791]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[78072-78488]:Block[78375-78791]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[78473-78480]:ReturnStatement[78776-78783]"
    }, {
      "left" : "if (n.isName() && NodeUtil.isLValue(n) &&\n          // Be careful of bleeding functions, which create variables\n          // in the inner scope, not the scope where the name appears.\n          !NodeUtil.isBleedingFunctionName(n))",
      "right" : "if (n.isName() && NodeUtil.isLValue(n) &&\n          // Be careful of bleeding functions, which create variables\n          // in the inner scope, not the scope where the name appears.\n          !NodeUtil.isBleedingFunctionName(n))",
      "info" : "IfStatement[78496-79712]:IfStatement[78799-80015]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[78726-79200]:Block[79029-79503]"
    }, {
      "left" : "String name = n.getString();",
      "right" : "String name = n.getString();",
      "info" : "VariableDeclarationStatement[78736-78764]:VariableDeclarationStatement[79039-79067]"
    }, {
      "left" : "Scope scope = t.getScope();",
      "right" : "Scope scope = t.getScope();",
      "info" : "VariableDeclarationStatement[78773-78800]:VariableDeclarationStatement[79076-79103]"
    }, {
      "left" : "Var var = scope.getVar(name);",
      "right" : "Var var = scope.getVar(name);",
      "info" : "VariableDeclarationStatement[78809-78838]:VariableDeclarationStatement[79112-79141]"
    }, {
      "left" : "if (var != null)",
      "right" : "if (var != null)",
      "info" : "IfStatement[78847-79192]:IfStatement[79150-79495]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[78864-79192]:Block[79167-79495]"
    }, {
      "left" : "Scope ownerScope = var.getScope();",
      "right" : "Scope ownerScope = var.getScope();",
      "info" : "VariableDeclarationStatement[78876-78910]:VariableDeclarationStatement[79179-79213]"
    }, {
      "left" : "if (ownerScope.isLocal())",
      "right" : "if (ownerScope.isLocal())",
      "info" : "IfStatement[78921-79033]:IfStatement[79224-79336]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[78947-79033]:Block[79250-79336]"
    }, {
      "left" : "data.get(ownerScope.getRootNode()).recordAssignedName(name);",
      "right" : "data.get(ownerScope.getRootNode()).recordAssignedName(name);",
      "info" : "ExpressionStatement[78961-79021]:ExpressionStatement[79264-79324]"
    }, {
      "left" : "if (scope != ownerScope && ownerScope.isLocal())",
      "right" : "if (scope != ownerScope && ownerScope.isLocal())",
      "info" : "IfStatement[79045-79182]:IfStatement[79348-79485]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[79094-79182]:Block[79397-79485]"
    }, {
      "left" : "data.get(ownerScope.getRootNode()).recordEscapedVarName(name);",
      "right" : "data.get(ownerScope.getRootNode()).recordEscapedVarName(name);",
      "info" : "ExpressionStatement[79108-79170]:ExpressionStatement[79411-79473]"
    }, {
      "left" : "if (n.isGetProp() && n.isUnscopedQualifiedName() &&\n          NodeUtil.isLValue(n))",
      "right" : "if (n.isGetProp() && n.isUnscopedQualifiedName() &&\n          NodeUtil.isLValue(n))",
      "info" : "IfStatement[79206-79712]:IfStatement[79509-80015]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[79290-79712]:Block[79593-80015]"
    }, {
      "left" : "String name = NodeUtil.getRootOfQualifiedName(n).getString();",
      "right" : "String name = NodeUtil.getRootOfQualifiedName(n).getString();",
      "info" : "VariableDeclarationStatement[79300-79361]:VariableDeclarationStatement[79603-79664]"
    }, {
      "left" : "Scope scope = t.getScope();",
      "right" : "Scope scope = t.getScope();",
      "info" : "VariableDeclarationStatement[79370-79397]:VariableDeclarationStatement[79673-79700]"
    }, {
      "left" : "Var var = scope.getVar(name);",
      "right" : "Var var = scope.getVar(name);",
      "info" : "VariableDeclarationStatement[79406-79435]:VariableDeclarationStatement[79709-79738]"
    }, {
      "left" : "if (var != null)",
      "right" : "if (var != null)",
      "info" : "IfStatement[79444-79704]:IfStatement[79747-80007]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[79461-79704]:Block[79764-80007]"
    }, {
      "left" : "Scope ownerScope = var.getScope();",
      "right" : "Scope ownerScope = var.getScope();",
      "info" : "VariableDeclarationStatement[79473-79507]:VariableDeclarationStatement[79776-79810]"
    }, {
      "left" : "if (scope != ownerScope && ownerScope.isLocal())",
      "right" : "if (scope != ownerScope && ownerScope.isLocal())",
      "info" : "IfStatement[79518-79694]:IfStatement[79821-79997]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[79567-79694]:Block[79870-79997]"
    }, {
      "left" : "data.get(ownerScope.getRootNode())\n                .recordEscapedQualifiedName(n.getQualifiedName());",
      "right" : "data.get(ownerScope.getRootNode())\n                .recordEscapedQualifiedName(n.getQualifiedName());",
      "info" : "ExpressionStatement[79581-79682]:ExpressionStatement[79884-79985]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[79726-79733]:Modifier[80029-80036]"
    }, {
      "left" : "AstFunctionContents",
      "right" : "AstFunctionContents",
      "info" : "SimpleType[79734-79753]:SimpleType[80037-80056]"
    }, {
      "left" : "getFunctionAnalysisResults",
      "right" : "getFunctionAnalysisResults",
      "info" : "SimpleName[79754-79780]:SimpleName[80057-80083]"
    }, {
      "left" : "@Nullable Node n",
      "right" : "@Nullable Node n",
      "info" : "SingleVariableDeclaration[79781-79797]:SingleVariableDeclaration[80084-80100]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[79799-80013]:Block[80102-80316]"
    }, {
      "left" : "if (n == null)",
      "right" : "if (n == null)",
      "info" : "IfStatement[79805-79846]:IfStatement[80108-80149]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[79820-79846]:Block[80123-80149]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[79828-79840]:ReturnStatement[80131-80143]"
    }, {
      "left" : "return functionAnalysisResults.get(n);",
      "right" : "return functionAnalysisResults.get(n);",
      "info" : "ReturnStatement[79971-80009]:ReturnStatement[80274-80312]"
    } ]
  },
  "interFileMappings" : { }
}