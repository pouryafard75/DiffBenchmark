{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "private static final long serialVersionUID = 1L;",
      "right" : "private static final long serialVersionUID = 1L;",
      "info" : "FieldDeclaration[1202-1250]:FieldDeclaration[1202-1250]"
    }, {
      "left" : "public final static int TYPE_BOOLEAN = 1;",
      "right" : "public final static int TYPE_BOOLEAN = 1;",
      "info" : "FieldDeclaration[1256-1297]:FieldDeclaration[1256-1297]"
    }, {
      "left" : "public final static int TYPE_BYTE = 2;",
      "right" : "public final static int TYPE_BYTE = 2;",
      "info" : "FieldDeclaration[1302-1340]:FieldDeclaration[1302-1340]"
    }, {
      "left" : "public final static int TYPE_SHORT = 3;",
      "right" : "public final static int TYPE_SHORT = 3;",
      "info" : "FieldDeclaration[1345-1384]:FieldDeclaration[1345-1384]"
    }, {
      "left" : "public final static int TYPE_CHAR = 4;",
      "right" : "public final static int TYPE_CHAR = 4;",
      "info" : "FieldDeclaration[1389-1427]:FieldDeclaration[1389-1427]"
    }, {
      "left" : "public final static int TYPE_INT = 5;",
      "right" : "public final static int TYPE_INT = 5;",
      "info" : "FieldDeclaration[1432-1469]:FieldDeclaration[1432-1469]"
    }, {
      "left" : "public final static int TYPE_LONG = 6;",
      "right" : "public final static int TYPE_LONG = 6;",
      "info" : "FieldDeclaration[1474-1512]:FieldDeclaration[1474-1512]"
    }, {
      "left" : "public final static int TYPE_FLOAT = 7;",
      "right" : "public final static int TYPE_FLOAT = 7;",
      "info" : "FieldDeclaration[1517-1556]:FieldDeclaration[1517-1556]"
    }, {
      "left" : "public final static int TYPE_DOUBLE = 8;",
      "right" : "public final static int TYPE_DOUBLE = 8;",
      "info" : "FieldDeclaration[1561-1601]:FieldDeclaration[1561-1601]"
    }, {
      "left" : "public final static int TYPE_LOCALE = 9;",
      "right" : "public final static int TYPE_LOCALE = 9;",
      "info" : "FieldDeclaration[1606-1646]:FieldDeclaration[1606-1646]"
    }, {
      "left" : "public final static int TYPE_DATE = 10;",
      "right" : "public final static int TYPE_DATE = 10;",
      "info" : "FieldDeclaration[1651-1690]:FieldDeclaration[1651-1690]"
    }, {
      "left" : "public final static int TYPE_CALENDAR = 11;",
      "right" : "public final static int TYPE_CALENDAR = 11;",
      "info" : "FieldDeclaration[1695-1738]:FieldDeclaration[1695-1738]"
    }, {
      "left" : "public final static int TYPE_UUID = 12;",
      "right" : "public final static int TYPE_UUID = 12;",
      "info" : "FieldDeclaration[1743-1782]:FieldDeclaration[1743-1782]"
    }, {
      "left" : "public final static int TYPE_URI = 13;",
      "right" : "public final static int TYPE_URI = 13;",
      "info" : "FieldDeclaration[1787-1825]:FieldDeclaration[1787-1825]"
    }, {
      "left" : "public final static int TYPE_URL = 14;",
      "right" : "public final static int TYPE_URL = 14;",
      "info" : "FieldDeclaration[1830-1868]:FieldDeclaration[1830-1868]"
    }, {
      "left" : "public final static int TYPE_CLASS = 15;",
      "right" : "public final static int TYPE_CLASS = 15;",
      "info" : "FieldDeclaration[1873-1913]:FieldDeclaration[1873-1913]"
    }, {
      "left" : "public final static int TYPE_CURRENCY = 16;",
      "right" : "public final static int TYPE_CURRENCY = 16;",
      "info" : "FieldDeclaration[1918-1961]:FieldDeclaration[1918-1961]"
    }, {
      "left" : "public final static int TYPE_BYTE_ARRAY = 17;",
      "right" : "public final static int TYPE_BYTE_ARRAY = 17;",
      "info" : "FieldDeclaration[1966-2011]:FieldDeclaration[1966-2011]"
    }, {
      "left" : "final protected int _kind;",
      "right" : "final protected int _kind;",
      "info" : "FieldDeclaration[2030-2056]:FieldDeclaration[2030-2056]"
    }, {
      "left" : "final protected Class<?> _keyClass;",
      "right" : "final protected Class<?> _keyClass;",
      "info" : "FieldDeclaration[2061-2096]:FieldDeclaration[2061-2096]"
    }, {
      "left" : "protected final FromStringDeserializer<?> _deser;",
      "right" : "protected final FromStringDeserializer<?> _deser;",
      "info" : "FieldDeclaration[2102-2236]:FieldDeclaration[2102-2236]"
    }, {
      "left" : "protected StdKeyDeserializer(int kind, Class<?> cls)",
      "right" : "protected StdKeyDeserializer(int kind, Class<?> cls)",
      "info" : "MethodDeclaration[2246-2337]:MethodDeclaration[2246-2337]"
    }, {
      "left" : "protected StdKeyDeserializer(int kind, Class<?> cls, FromStringDeserializer<?> deser)",
      "right" : "protected StdKeyDeserializer(int kind, Class<?> cls, FromStringDeserializer<?> deser)",
      "info" : "MethodDeclaration[2343-2507]:MethodDeclaration[2343-2507]"
    }, {
      "left" : "public static StdKeyDeserializer forType(Class<?> raw)",
      "right" : "public static StdKeyDeserializer forType(Class<?> raw)",
      "info" : "MethodDeclaration[2513-4409]:MethodDeclaration[2513-4409]"
    }, {
      "left" : "public Class<?> getKeyClass()",
      "right" : "public Class<?> getKeyClass()",
      "info" : "MethodDeclaration[5240-5291]:MethodDeclaration[5255-5306]"
    }, {
      "left" : "protected Object _parse(String key, DeserializationContext ctxt) throws Exception",
      "right" : "protected Object _parse(String key, DeserializationContext ctxt) throws Exception",
      "info" : "MethodDeclaration[5297-8864]:MethodDeclaration[5312-8879]"
    }, {
      "left" : "protected int _parseInt(String key) throws IllegalArgumentException",
      "right" : "protected int _parseInt(String key) throws IllegalArgumentException",
      "info" : "MethodDeclaration[9052-9165]:MethodDeclaration[9067-9180]"
    }, {
      "left" : "protected long _parseLong(String key) throws IllegalArgumentException",
      "right" : "protected long _parseLong(String key) throws IllegalArgumentException",
      "info" : "MethodDeclaration[9171-9284]:MethodDeclaration[9186-9299]"
    }, {
      "left" : "protected double _parseDouble(String key) throws IllegalArgumentException",
      "right" : "protected double _parseDouble(String key) throws IllegalArgumentException",
      "info" : "MethodDeclaration[9290-9416]:MethodDeclaration[9305-9431]"
    }, {
      "left" : "StringKD",
      "right" : "StringKD",
      "info" : "TypeDeclaration[9855-10725]:TypeDeclaration[9885-10755]"
    }, {
      "left" : "private static final long serialVersionUID = 1L;",
      "right" : "private static final long serialVersionUID = 1L;",
      "info" : "FieldDeclaration[9944-9992]:FieldDeclaration[9974-10022]"
    }, {
      "left" : "private final static StringKD sString = new StringKD(String.class);",
      "right" : "private final static StringKD sString = new StringKD(String.class);",
      "info" : "FieldDeclaration[10001-10068]:FieldDeclaration[10031-10098]"
    }, {
      "left" : "private final static StringKD sObject = new StringKD(Object.class);",
      "right" : "private final static StringKD sObject = new StringKD(Object.class);",
      "info" : "FieldDeclaration[10077-10144]:FieldDeclaration[10107-10174]"
    }, {
      "left" : "private StringKD(Class<?> nominalType)",
      "right" : "private StringKD(Class<?> nominalType)",
      "info" : "MethodDeclaration[10162-10228]:MethodDeclaration[10192-10258]"
    }, {
      "left" : "public static StringKD forType(Class<?> nominalType)",
      "right" : "public static StringKD forType(Class<?> nominalType)",
      "info" : "MethodDeclaration[10238-10542]:MethodDeclaration[10268-10572]"
    }, {
      "left" : "public Object deserializeKey(String key, DeserializationContext ctxt) throws IOException, JsonProcessingException",
      "right" : "public Object deserializeKey(String key, DeserializationContext ctxt) throws IOException, JsonProcessingException",
      "info" : "MethodDeclaration[10552-10719]:MethodDeclaration[10582-10749]"
    }, {
      "left" : "DelegatingKD",
      "right" : "DelegatingKD",
      "info" : "TypeDeclaration[10926-12618]:TypeDeclaration[10956-12648]"
    }, {
      "left" : "private static final long serialVersionUID = 1L;",
      "right" : "private static final long serialVersionUID = 1L;",
      "info" : "FieldDeclaration[11254-11302]:FieldDeclaration[11284-11332]"
    }, {
      "left" : "final protected Class<?> _keyClass;",
      "right" : "final protected Class<?> _keyClass;",
      "info" : "FieldDeclaration[11312-11347]:FieldDeclaration[11342-11377]"
    }, {
      "left" : "protected final JsonDeserializer<?> _delegate;",
      "right" : "protected final JsonDeserializer<?> _delegate;",
      "info" : "FieldDeclaration[11357-11403]:FieldDeclaration[11387-11433]"
    }, {
      "left" : "protected DelegatingKD(Class<?> cls, JsonDeserializer<?> deser)",
      "right" : "protected DelegatingKD(Class<?> cls, JsonDeserializer<?> deser)",
      "info" : "MethodDeclaration[11421-11556]:MethodDeclaration[11451-11586]"
    }, {
      "left" : "public final Object deserializeKey(String key, DeserializationContext ctxt)\n            throws IOException",
      "right" : "public final Object deserializeKey(String key, DeserializationContext ctxt)\n            throws IOException",
      "info" : "MethodDeclaration[11566-12551]:MethodDeclaration[11596-12581]"
    }, {
      "left" : "public Class<?> getKeyClass()",
      "right" : "public Class<?> getKeyClass()",
      "info" : "MethodDeclaration[12561-12612]:MethodDeclaration[12591-12642]"
    }, {
      "left" : "EnumKD",
      "right" : "EnumKD",
      "info" : "TypeDeclaration[12629-15043]:TypeDeclaration[12659-15073]"
    }, {
      "left" : "private static final long serialVersionUID = 1L;",
      "right" : "private static final long serialVersionUID = 1L;",
      "info" : "FieldDeclaration[12716-12764]:FieldDeclaration[12746-12794]"
    }, {
      "left" : "protected final EnumResolver _byNameResolver;",
      "right" : "protected final EnumResolver _byNameResolver;",
      "info" : "FieldDeclaration[12774-12819]:FieldDeclaration[12804-12849]"
    }, {
      "left" : "protected final AnnotatedMethod _factory;",
      "right" : "protected final AnnotatedMethod _factory;",
      "info" : "FieldDeclaration[12829-12870]:FieldDeclaration[12859-12900]"
    }, {
      "left" : "protected EnumResolver _byToStringResolver;",
      "right" : "protected EnumResolver _byToStringResolver;",
      "info" : "FieldDeclaration[12880-13099]:FieldDeclaration[12910-13129]"
    }, {
      "left" : "protected final Enum<?> _enumDefaultValue;",
      "right" : "protected final Enum<?> _enumDefaultValue;",
      "info" : "FieldDeclaration[13109-13151]:FieldDeclaration[13139-13181]"
    }, {
      "left" : "protected EnumKD(EnumResolver er, AnnotatedMethod factory)",
      "right" : "protected EnumKD(EnumResolver er, AnnotatedMethod factory)",
      "info" : "MethodDeclaration[13169-13401]:MethodDeclaration[13199-13431]"
    }, {
      "left" : "public Object _parse(String key, DeserializationContext ctxt) throws IOException",
      "right" : "public Object _parse(String key, DeserializationContext ctxt) throws IOException",
      "info" : "MethodDeclaration[13411-14597]:MethodDeclaration[13441-14627]"
    }, {
      "left" : "private EnumResolver _getToStringResolver(DeserializationContext ctxt)",
      "right" : "private EnumResolver _getToStringResolver(DeserializationContext ctxt)",
      "info" : "MethodDeclaration[14607-15037]:MethodDeclaration[14637-15067]"
    }, {
      "left" : "StringCtorKeyDeserializer",
      "right" : "StringCtorKeyDeserializer",
      "info" : "TypeDeclaration[15053-15682]:TypeDeclaration[15083-15712]"
    }, {
      "left" : "private static final long serialVersionUID = 1L;",
      "right" : "private static final long serialVersionUID = 1L;",
      "info" : "FieldDeclaration[15262-15310]:FieldDeclaration[15292-15340]"
    }, {
      "left" : "protected final Constructor<?> _ctor;",
      "right" : "protected final Constructor<?> _ctor;",
      "info" : "FieldDeclaration[15320-15357]:FieldDeclaration[15350-15387]"
    }, {
      "left" : "public StringCtorKeyDeserializer(Constructor<?> ctor)",
      "right" : "public StringCtorKeyDeserializer(Constructor<?> ctor)",
      "info" : "MethodDeclaration[15367-15507]:MethodDeclaration[15397-15537]"
    }, {
      "left" : "public Object _parse(String key, DeserializationContext ctxt) throws Exception",
      "right" : "public Object _parse(String key, DeserializationContext ctxt) throws Exception",
      "info" : "MethodDeclaration[15517-15676]:MethodDeclaration[15547-15706]"
    }, {
      "left" : "StringFactoryKeyDeserializer",
      "right" : "StringFactoryKeyDeserializer",
      "info" : "TypeDeclaration[15688-16319]:TypeDeclaration[15718-16349]"
    }, {
      "left" : "private static final long serialVersionUID = 1L;",
      "right" : "private static final long serialVersionUID = 1L;",
      "info" : "FieldDeclaration[15900-15948]:FieldDeclaration[15930-15978]"
    }, {
      "left" : "final Method _factoryMethod;",
      "right" : "final Method _factoryMethod;",
      "info" : "FieldDeclaration[15958-15986]:FieldDeclaration[15988-16016]"
    }, {
      "left" : "public StringFactoryKeyDeserializer(Method fm)",
      "right" : "public StringFactoryKeyDeserializer(Method fm)",
      "info" : "MethodDeclaration[15996-16134]:MethodDeclaration[16026-16164]"
    }, {
      "left" : "public Object _parse(String key, DeserializationContext ctxt) throws Exception",
      "right" : "public Object _parse(String key, DeserializationContext ctxt) throws Exception",
      "info" : "MethodDeclaration[16144-16313]:MethodDeclaration[16174-16343]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2299-2337]:Block[2299-2337]"
    }, {
      "left" : "this(kind, cls, null);",
      "right" : "this(kind, cls, null);",
      "info" : "ConstructorInvocation[2309-2331]:ConstructorInvocation[2309-2331]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2429-2507]:Block[2429-2507]"
    }, {
      "left" : "_kind = kind;",
      "right" : "_kind = kind;",
      "info" : "ExpressionStatement[2439-2452]:ExpressionStatement[2439-2452]"
    }, {
      "left" : "_keyClass = cls;",
      "right" : "_keyClass = cls;",
      "info" : "ExpressionStatement[2461-2477]:ExpressionStatement[2461-2477]"
    }, {
      "left" : "_deser = deser;",
      "right" : "_deser = deser;",
      "info" : "ExpressionStatement[2486-2501]:ExpressionStatement[2486-2501]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2572-4409]:Block[2572-4409]"
    }, {
      "left" : "int kind;",
      "right" : "int kind;",
      "info" : "VariableDeclarationStatement[2582-2591]:VariableDeclarationStatement[2582-2591]"
    }, {
      "left" : "if (raw == String.class || raw == Object.class || raw == CharSequence.class)",
      "right" : "if (raw == String.class || raw == Object.class || raw == CharSequence.class)",
      "info" : "IfStatement[2632-4353]:IfStatement[2632-4353]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2709-2762]:Block[2709-2762]"
    }, {
      "left" : "return StringKD.forType(raw);",
      "right" : "return StringKD.forType(raw);",
      "info" : "ReturnStatement[2723-2752]:ReturnStatement[2723-2752]"
    }, {
      "left" : "if (raw == UUID.class)",
      "right" : "if (raw == UUID.class)",
      "info" : "IfStatement[2768-4353]:IfStatement[2768-4353]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2791-2832]:Block[2791-2832]"
    }, {
      "left" : "kind = TYPE_UUID;",
      "right" : "kind = TYPE_UUID;",
      "info" : "ExpressionStatement[2805-2822]:ExpressionStatement[2805-2822]"
    }, {
      "left" : "if (raw == Integer.class)",
      "right" : "if (raw == Integer.class)",
      "info" : "IfStatement[2838-4353]:IfStatement[2838-4353]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2864-2904]:Block[2864-2904]"
    }, {
      "left" : "kind = TYPE_INT;",
      "right" : "kind = TYPE_INT;",
      "info" : "ExpressionStatement[2878-2894]:ExpressionStatement[2878-2894]"
    }, {
      "left" : "if (raw == Long.class)",
      "right" : "if (raw == Long.class)",
      "info" : "IfStatement[2910-4353]:IfStatement[2910-4353]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2933-2974]:Block[2933-2974]"
    }, {
      "left" : "kind = TYPE_LONG;",
      "right" : "kind = TYPE_LONG;",
      "info" : "ExpressionStatement[2947-2964]:ExpressionStatement[2947-2964]"
    }, {
      "left" : "if (raw == Date.class)",
      "right" : "if (raw == Date.class)",
      "info" : "IfStatement[2980-4353]:IfStatement[2980-4353]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3003-3044]:Block[3003-3044]"
    }, {
      "left" : "kind = TYPE_DATE;",
      "right" : "kind = TYPE_DATE;",
      "info" : "ExpressionStatement[3017-3034]:ExpressionStatement[3017-3034]"
    }, {
      "left" : "if (raw == Calendar.class)",
      "right" : "if (raw == Calendar.class)",
      "info" : "IfStatement[3050-4353]:IfStatement[3050-4353]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3077-3158]:Block[3077-3158]"
    }, {
      "left" : "kind = TYPE_CALENDAR;",
      "right" : "kind = TYPE_CALENDAR;",
      "info" : "ExpressionStatement[3091-3112]:ExpressionStatement[3091-3112]"
    }, {
      "left" : "if (raw == Boolean.class)",
      "right" : "if (raw == Boolean.class)",
      "info" : "IfStatement[3164-4353]:IfStatement[3164-4353]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3190-3234]:Block[3190-3234]"
    }, {
      "left" : "kind = TYPE_BOOLEAN;",
      "right" : "kind = TYPE_BOOLEAN;",
      "info" : "ExpressionStatement[3204-3224]:ExpressionStatement[3204-3224]"
    }, {
      "left" : "if (raw == Byte.class)",
      "right" : "if (raw == Byte.class)",
      "info" : "IfStatement[3240-4353]:IfStatement[3240-4353]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3263-3304]:Block[3263-3304]"
    }, {
      "left" : "kind = TYPE_BYTE;",
      "right" : "kind = TYPE_BYTE;",
      "info" : "ExpressionStatement[3277-3294]:ExpressionStatement[3277-3294]"
    }, {
      "left" : "if (raw == Character.class)",
      "right" : "if (raw == Character.class)",
      "info" : "IfStatement[3310-4353]:IfStatement[3310-4353]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3338-3379]:Block[3338-3379]"
    }, {
      "left" : "kind = TYPE_CHAR;",
      "right" : "kind = TYPE_CHAR;",
      "info" : "ExpressionStatement[3352-3369]:ExpressionStatement[3352-3369]"
    }, {
      "left" : "if (raw == Short.class)",
      "right" : "if (raw == Short.class)",
      "info" : "IfStatement[3385-4353]:IfStatement[3385-4353]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3409-3451]:Block[3409-3451]"
    }, {
      "left" : "kind = TYPE_SHORT;",
      "right" : "kind = TYPE_SHORT;",
      "info" : "ExpressionStatement[3423-3441]:ExpressionStatement[3423-3441]"
    }, {
      "left" : "if (raw == Float.class)",
      "right" : "if (raw == Float.class)",
      "info" : "IfStatement[3457-4353]:IfStatement[3457-4353]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3481-3523]:Block[3481-3523]"
    }, {
      "left" : "kind = TYPE_FLOAT;",
      "right" : "kind = TYPE_FLOAT;",
      "info" : "ExpressionStatement[3495-3513]:ExpressionStatement[3495-3513]"
    }, {
      "left" : "if (raw == Double.class)",
      "right" : "if (raw == Double.class)",
      "info" : "IfStatement[3529-4353]:IfStatement[3529-4353]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3554-3597]:Block[3554-3597]"
    }, {
      "left" : "kind = TYPE_DOUBLE;",
      "right" : "kind = TYPE_DOUBLE;",
      "info" : "ExpressionStatement[3568-3587]:ExpressionStatement[3568-3587]"
    }, {
      "left" : "if (raw == URI.class)",
      "right" : "if (raw == URI.class)",
      "info" : "IfStatement[3603-4353]:IfStatement[3603-4353]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3625-3665]:Block[3625-3665]"
    }, {
      "left" : "kind = TYPE_URI;",
      "right" : "kind = TYPE_URI;",
      "info" : "ExpressionStatement[3639-3655]:ExpressionStatement[3639-3655]"
    }, {
      "left" : "if (raw == URL.class)",
      "right" : "if (raw == URL.class)",
      "info" : "IfStatement[3671-4353]:IfStatement[3671-4353]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3693-3733]:Block[3693-3733]"
    }, {
      "left" : "kind = TYPE_URL;",
      "right" : "kind = TYPE_URL;",
      "info" : "ExpressionStatement[3707-3723]:ExpressionStatement[3707-3723]"
    }, {
      "left" : "if (raw == Class.class)",
      "right" : "if (raw == Class.class)",
      "info" : "IfStatement[3739-4353]:IfStatement[3739-4353]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3763-3805]:Block[3763-3805]"
    }, {
      "left" : "kind = TYPE_CLASS;",
      "right" : "kind = TYPE_CLASS;",
      "info" : "ExpressionStatement[3777-3795]:ExpressionStatement[3777-3795]"
    }, {
      "left" : "if (raw == Locale.class)",
      "right" : "if (raw == Locale.class)",
      "info" : "IfStatement[3811-4353]:IfStatement[3811-4353]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3836-4016]:Block[3836-4016]"
    }, {
      "left" : "FromStringDeserializer<?> deser = FromStringDeserializer.findDeserializer(Locale.class);",
      "right" : "FromStringDeserializer<?> deser = FromStringDeserializer.findDeserializer(Locale.class);",
      "info" : "VariableDeclarationStatement[3850-3938]:VariableDeclarationStatement[3850-3938]"
    }, {
      "left" : "return new StdKeyDeserializer(TYPE_LOCALE, raw, deser);",
      "right" : "return new StdKeyDeserializer(TYPE_LOCALE, raw, deser);",
      "info" : "ReturnStatement[3951-4006]:ReturnStatement[3951-4006]"
    }, {
      "left" : "if (raw == Currency.class)",
      "right" : "if (raw == Currency.class)",
      "info" : "IfStatement[4022-4353]:IfStatement[4022-4353]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4049-4233]:Block[4049-4233]"
    }, {
      "left" : "FromStringDeserializer<?> deser = FromStringDeserializer.findDeserializer(Currency.class);",
      "right" : "FromStringDeserializer<?> deser = FromStringDeserializer.findDeserializer(Currency.class);",
      "info" : "VariableDeclarationStatement[4063-4153]:VariableDeclarationStatement[4063-4153]"
    }, {
      "left" : "return new StdKeyDeserializer(TYPE_CURRENCY, raw, deser);",
      "right" : "return new StdKeyDeserializer(TYPE_CURRENCY, raw, deser);",
      "info" : "ReturnStatement[4166-4223]:ReturnStatement[4166-4223]"
    }, {
      "left" : "if (raw == byte[].class)",
      "right" : "if (raw == byte[].class)",
      "info" : "IfStatement[4239-4353]:IfStatement[4239-4353]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4264-4311]:Block[4264-4311]"
    }, {
      "left" : "kind = TYPE_BYTE_ARRAY;",
      "right" : "kind = TYPE_BYTE_ARRAY;",
      "info" : "ExpressionStatement[4278-4301]:ExpressionStatement[4278-4301]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4317-4353]:Block[4317-4353]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[4331-4343]:ReturnStatement[4331-4343]"
    }, {
      "left" : "return new StdKeyDeserializer(kind, raw);",
      "right" : "return new StdKeyDeserializer(kind, raw);",
      "info" : "ReturnStatement[4362-4403]:ReturnStatement[4362-4403]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5270-5291]:Block[5285-5306]"
    }, {
      "left" : "return _keyClass;",
      "right" : "return _keyClass;",
      "info" : "ReturnStatement[5272-5289]:ReturnStatement[5287-5304]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5383-8864]:Block[5398-8879]"
    }, {
      "left" : "switch (_kind) {\n        case TYPE_BOOLEAN:\n            if (\"true\".equals(key)) {\n                return Boolean.TRUE;\n            }\n            if (\"false\".equals(key)) {\n                return Boolean.FALSE;\n            }\n            return ctxt.handleWeirdKey(_keyClass, key, \"value not 'true' or 'false'\");\n        case TYPE_BYTE:\n            {\n                int value = _parseInt(key);\n                // allow range up to 255, inclusive (to support \"unsigned\" byte)\n                if (value < Byte.MIN_VALUE || value > 255) {\n                    return ctxt.handleWeirdKey(_keyClass, key, \"overflow, value cannot be represented as 8-bit value\");\n                }\n                return Byte.valueOf((byte) value);\n            }\n        case TYPE_SHORT:\n            {\n                int value = _parseInt(key);\n                if (value < Short.MIN_VALUE || value > Short.MAX_VALUE) {\n                    return ctxt.handleWeirdKey(_keyClass, key, \"overflow, value cannot be represented as 16-bit value\");\n                    // fall-through and truncate if need be\n                }\n                return Short.valueOf((short) value);\n            }\n        case TYPE_CHAR:\n            if (key.length() == 1) {\n                return Character.valueOf(key.charAt(0));\n            }\n            return ctxt.handleWeirdKey(_keyClass, key, \"can only convert 1-character Strings\");\n        case TYPE_INT:\n            return _parseInt(key);\n\n        case TYPE_LONG:\n            return _parseLong(key);\n\n        case TYPE_FLOAT:\n            // Bounds/range checks would be tricky here, so let's not bother even trying...\n            return Float.valueOf((float) _parseDouble(key));\n        case TYPE_DOUBLE:\n            return _parseDouble(key);\n        case TYPE_LOCALE:\n            try {\n                return _deser._deserialize(key, ctxt);\n            } catch (IllegalArgumentException e) {\n                return _weirdKey(ctxt, key, e);\n            }\n        case TYPE_CURRENCY:\n            try {\n                return _deser._deserialize(key, ctxt);\n            } catch (IllegalArgumentException e) {\n                return _weirdKey(ctxt, key, e);\n            }\n        case TYPE_DATE:\n            return ctxt.parseDate(key);\n        case TYPE_CALENDAR:\n            return ctxt.constructCalendar(ctxt.parseDate(key));\n        case TYPE_UUID:\n            try {\n                return UUID.fromString(key);\n            } catch (Exception e) {\n                return _weirdKey(ctxt, key, e);\n            }\n        case TYPE_URI:\n            try {\n                return URI.create(key);\n            } catch (Exception e) {\n                return _weirdKey(ctxt, key, e);\n            }\n        case TYPE_URL:\n            try {\n                return new URL(key);\n            } catch (MalformedURLException e) {\n                return _weirdKey(ctxt, key, e);\n            }\n        case TYPE_CLASS:\n            try {\n                return ctxt.findClass(key);\n            } catch (Exception e) {\n                return ctxt.handleWeirdKey(_keyClass, key, \"unable to parse key as Class\");\n            }\n        case TYPE_BYTE_ARRAY:\n            try {\n                return ctxt.getConfig().getBase64Variant().decode(key);\n            } catch (IllegalArgumentException e) {\n                return _weirdKey(ctxt, key, e);\n            }\n        default:\n            throw new IllegalStateException(\"Internal error: unknown key type \"+_keyClass);\n        }",
      "right" : "switch (_kind) {\n        case TYPE_BOOLEAN:\n            if (\"true\".equals(key)) {\n                return Boolean.TRUE;\n            }\n            if (\"false\".equals(key)) {\n                return Boolean.FALSE;\n            }\n            return ctxt.handleWeirdKey(_keyClass, key, \"value not 'true' or 'false'\");\n        case TYPE_BYTE:\n            {\n                int value = _parseInt(key);\n                // allow range up to 255, inclusive (to support \"unsigned\" byte)\n                if (value < Byte.MIN_VALUE || value > 255) {\n                    return ctxt.handleWeirdKey(_keyClass, key, \"overflow, value cannot be represented as 8-bit value\");\n                }\n                return Byte.valueOf((byte) value);\n            }\n        case TYPE_SHORT:\n            {\n                int value = _parseInt(key);\n                if (value < Short.MIN_VALUE || value > Short.MAX_VALUE) {\n                    return ctxt.handleWeirdKey(_keyClass, key, \"overflow, value cannot be represented as 16-bit value\");\n                    // fall-through and truncate if need be\n                }\n                return Short.valueOf((short) value);\n            }\n        case TYPE_CHAR:\n            if (key.length() == 1) {\n                return Character.valueOf(key.charAt(0));\n            }\n            return ctxt.handleWeirdKey(_keyClass, key, \"can only convert 1-character Strings\");\n        case TYPE_INT:\n            return _parseInt(key);\n\n        case TYPE_LONG:\n            return _parseLong(key);\n\n        case TYPE_FLOAT:\n            // Bounds/range checks would be tricky here, so let's not bother even trying...\n            return Float.valueOf((float) _parseDouble(key));\n        case TYPE_DOUBLE:\n            return _parseDouble(key);\n        case TYPE_LOCALE:\n            try {\n                return _deser._deserialize(key, ctxt);\n            } catch (IllegalArgumentException e) {\n                return _weirdKey(ctxt, key, e);\n            }\n        case TYPE_CURRENCY:\n            try {\n                return _deser._deserialize(key, ctxt);\n            } catch (IllegalArgumentException e) {\n                return _weirdKey(ctxt, key, e);\n            }\n        case TYPE_DATE:\n            return ctxt.parseDate(key);\n        case TYPE_CALENDAR:\n            return ctxt.constructCalendar(ctxt.parseDate(key));\n        case TYPE_UUID:\n            try {\n                return UUID.fromString(key);\n            } catch (Exception e) {\n                return _weirdKey(ctxt, key, e);\n            }\n        case TYPE_URI:\n            try {\n                return URI.create(key);\n            } catch (Exception e) {\n                return _weirdKey(ctxt, key, e);\n            }\n        case TYPE_URL:\n            try {\n                return new URL(key);\n            } catch (MalformedURLException e) {\n                return _weirdKey(ctxt, key, e);\n            }\n        case TYPE_CLASS:\n            try {\n                return ctxt.findClass(key);\n            } catch (Exception e) {\n                return ctxt.handleWeirdKey(_keyClass, key, \"unable to parse key as Class\");\n            }\n        case TYPE_BYTE_ARRAY:\n            try {\n                return ctxt.getConfig().getBase64Variant().decode(key);\n            } catch (IllegalArgumentException e) {\n                return _weirdKey(ctxt, key, e);\n            }\n        default:\n            throw new IllegalStateException(\"Internal error: unknown key type \"+_keyClass);\n        }",
      "info" : "SwitchStatement[5393-8858]:SwitchStatement[5408-8873]"
    }, {
      "left" : "case TYPE_BOOLEAN:",
      "right" : "case TYPE_BOOLEAN:",
      "info" : "SwitchCase[5418-5436]:SwitchCase[5433-5451]"
    }, {
      "left" : "if (\"true\".equals(key))",
      "right" : "if (\"true\".equals(key))",
      "info" : "IfStatement[5449-5525]:IfStatement[5464-5540]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5473-5525]:Block[5488-5540]"
    }, {
      "left" : "return Boolean.TRUE;",
      "right" : "return Boolean.TRUE;",
      "info" : "ReturnStatement[5491-5511]:ReturnStatement[5506-5526]"
    }, {
      "left" : "if (\"false\".equals(key))",
      "right" : "if (\"false\".equals(key))",
      "info" : "IfStatement[5538-5616]:IfStatement[5553-5631]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5563-5616]:Block[5578-5631]"
    }, {
      "left" : "return Boolean.FALSE;",
      "right" : "return Boolean.FALSE;",
      "info" : "ReturnStatement[5581-5602]:ReturnStatement[5596-5617]"
    }, {
      "left" : "return ctxt.handleWeirdKey(_keyClass, key, \"value not 'true' or 'false'\");",
      "right" : "return ctxt.handleWeirdKey(_keyClass, key, \"value not 'true' or 'false'\");",
      "info" : "ReturnStatement[5629-5703]:ReturnStatement[5644-5718]"
    }, {
      "left" : "case TYPE_BYTE:",
      "right" : "case TYPE_BYTE:",
      "info" : "SwitchCase[5712-5727]:SwitchCase[5727-5742]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5740-6130]:Block[5755-6145]"
    }, {
      "left" : "int value = _parseInt(key);",
      "right" : "int value = _parseInt(key);",
      "info" : "VariableDeclarationStatement[5758-5785]:VariableDeclarationStatement[5773-5800]"
    }, {
      "left" : "if (value < Byte.MIN_VALUE || value > 255)",
      "right" : "if (value < Byte.MIN_VALUE || value > 255)",
      "info" : "IfStatement[5883-6065]:IfStatement[5898-6080]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5926-6065]:Block[5941-6080]"
    }, {
      "left" : "return ctxt.handleWeirdKey(_keyClass, key, \"overflow, value cannot be represented as 8-bit value\");",
      "right" : "return ctxt.handleWeirdKey(_keyClass, key, \"overflow, value cannot be represented as 8-bit value\");",
      "info" : "ReturnStatement[5948-6047]:ReturnStatement[5963-6062]"
    }, {
      "left" : "return Byte.valueOf((byte) value);",
      "right" : "return Byte.valueOf((byte) value);",
      "info" : "ReturnStatement[6082-6116]:ReturnStatement[6097-6131]"
    }, {
      "left" : "case TYPE_SHORT:",
      "right" : "case TYPE_SHORT:",
      "info" : "SwitchCase[6139-6155]:SwitchCase[6154-6170]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6168-6553]:Block[6183-6568]"
    }, {
      "left" : "int value = _parseInt(key);",
      "right" : "int value = _parseInt(key);",
      "info" : "VariableDeclarationStatement[6186-6213]:VariableDeclarationStatement[6201-6228]"
    }, {
      "left" : "if (value < Short.MIN_VALUE || value > Short.MAX_VALUE)",
      "right" : "if (value < Short.MIN_VALUE || value > Short.MAX_VALUE)",
      "info" : "IfStatement[6230-6486]:IfStatement[6245-6501]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6286-6486]:Block[6301-6501]"
    }, {
      "left" : "return ctxt.handleWeirdKey(_keyClass, key, \"overflow, value cannot be represented as 16-bit value\");",
      "right" : "return ctxt.handleWeirdKey(_keyClass, key, \"overflow, value cannot be represented as 16-bit value\");",
      "info" : "ReturnStatement[6308-6408]:ReturnStatement[6323-6423]"
    }, {
      "left" : "return Short.valueOf((short) value);",
      "right" : "return Short.valueOf((short) value);",
      "info" : "ReturnStatement[6503-6539]:ReturnStatement[6518-6554]"
    }, {
      "left" : "case TYPE_CHAR:",
      "right" : "case TYPE_CHAR:",
      "info" : "SwitchCase[6562-6577]:SwitchCase[6577-6592]"
    }, {
      "left" : "if (key.length() == 1)",
      "right" : "if (key.length() == 1)",
      "info" : "IfStatement[6590-6685]:IfStatement[6605-6700]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6613-6685]:Block[6628-6700]"
    }, {
      "left" : "return Character.valueOf(key.charAt(0));",
      "right" : "return Character.valueOf(key.charAt(0));",
      "info" : "ReturnStatement[6631-6671]:ReturnStatement[6646-6686]"
    }, {
      "left" : "return ctxt.handleWeirdKey(_keyClass, key, \"can only convert 1-character Strings\");",
      "right" : "return ctxt.handleWeirdKey(_keyClass, key, \"can only convert 1-character Strings\");",
      "info" : "ReturnStatement[6698-6781]:ReturnStatement[6713-6796]"
    }, {
      "left" : "case TYPE_INT:",
      "right" : "case TYPE_INT:",
      "info" : "SwitchCase[6790-6804]:SwitchCase[6805-6819]"
    }, {
      "left" : "return _parseInt(key);",
      "right" : "return _parseInt(key);",
      "info" : "ReturnStatement[6817-6839]:ReturnStatement[6832-6854]"
    }, {
      "left" : "case TYPE_LONG:",
      "right" : "case TYPE_LONG:",
      "info" : "SwitchCase[6849-6864]:SwitchCase[6864-6879]"
    }, {
      "left" : "return _parseLong(key);",
      "right" : "return _parseLong(key);",
      "info" : "ReturnStatement[6877-6900]:ReturnStatement[6892-6915]"
    }, {
      "left" : "case TYPE_FLOAT:",
      "right" : "case TYPE_FLOAT:",
      "info" : "SwitchCase[6910-6926]:SwitchCase[6925-6941]"
    }, {
      "left" : "return Float.valueOf((float) _parseDouble(key));",
      "right" : "return Float.valueOf((float) _parseDouble(key));",
      "info" : "ReturnStatement[7031-7079]:ReturnStatement[7046-7094]"
    }, {
      "left" : "case TYPE_DOUBLE:",
      "right" : "case TYPE_DOUBLE:",
      "info" : "SwitchCase[7088-7105]:SwitchCase[7103-7120]"
    }, {
      "left" : "return _parseDouble(key);",
      "right" : "return _parseDouble(key);",
      "info" : "ReturnStatement[7118-7143]:ReturnStatement[7133-7158]"
    }, {
      "left" : "case TYPE_LOCALE:",
      "right" : "case TYPE_LOCALE:",
      "info" : "SwitchCase[7152-7169]:SwitchCase[7167-7184]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[7182-7355]:TryStatement[7197-7370]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7186-7256]:Block[7201-7271]"
    }, {
      "left" : "return _deser._deserialize(key, ctxt);",
      "right" : "return _deser._deserialize(key, ctxt);",
      "info" : "ReturnStatement[7204-7242]:ReturnStatement[7219-7257]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7292-7355]:Block[7307-7370]"
    }, {
      "left" : "return _weirdKey(ctxt, key, e);",
      "right" : "return _weirdKey(ctxt, key, e);",
      "info" : "ReturnStatement[7310-7341]:ReturnStatement[7325-7356]"
    }, {
      "left" : "case TYPE_CURRENCY:",
      "right" : "case TYPE_CURRENCY:",
      "info" : "SwitchCase[7364-7383]:SwitchCase[7379-7398]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[7396-7569]:TryStatement[7411-7584]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7400-7470]:Block[7415-7485]"
    }, {
      "left" : "return _deser._deserialize(key, ctxt);",
      "right" : "return _deser._deserialize(key, ctxt);",
      "info" : "ReturnStatement[7418-7456]:ReturnStatement[7433-7471]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7506-7569]:Block[7521-7584]"
    }, {
      "left" : "return _weirdKey(ctxt, key, e);",
      "right" : "return _weirdKey(ctxt, key, e);",
      "info" : "ReturnStatement[7524-7555]:ReturnStatement[7539-7570]"
    }, {
      "left" : "case TYPE_DATE:",
      "right" : "case TYPE_DATE:",
      "info" : "SwitchCase[7578-7593]:SwitchCase[7593-7608]"
    }, {
      "left" : "return ctxt.parseDate(key);",
      "right" : "return ctxt.parseDate(key);",
      "info" : "ReturnStatement[7606-7633]:ReturnStatement[7621-7648]"
    }, {
      "left" : "case TYPE_CALENDAR:",
      "right" : "case TYPE_CALENDAR:",
      "info" : "SwitchCase[7642-7661]:SwitchCase[7657-7676]"
    }, {
      "left" : "return ctxt.constructCalendar(ctxt.parseDate(key));",
      "right" : "return ctxt.constructCalendar(ctxt.parseDate(key));",
      "info" : "ReturnStatement[7674-7725]:ReturnStatement[7689-7740]"
    }, {
      "left" : "case TYPE_UUID:",
      "right" : "case TYPE_UUID:",
      "info" : "SwitchCase[7734-7749]:SwitchCase[7749-7764]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[7762-7910]:TryStatement[7777-7925]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7766-7826]:Block[7781-7841]"
    }, {
      "left" : "return UUID.fromString(key);",
      "right" : "return UUID.fromString(key);",
      "info" : "ReturnStatement[7784-7812]:ReturnStatement[7799-7827]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7847-7910]:Block[7862-7925]"
    }, {
      "left" : "return _weirdKey(ctxt, key, e);",
      "right" : "return _weirdKey(ctxt, key, e);",
      "info" : "ReturnStatement[7865-7896]:ReturnStatement[7880-7911]"
    }, {
      "left" : "case TYPE_URI:",
      "right" : "case TYPE_URI:",
      "info" : "SwitchCase[7919-7933]:SwitchCase[7934-7948]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[7946-8089]:TryStatement[7961-8104]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7950-8005]:Block[7965-8020]"
    }, {
      "left" : "return URI.create(key);",
      "right" : "return URI.create(key);",
      "info" : "ReturnStatement[7968-7991]:ReturnStatement[7983-8006]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8026-8089]:Block[8041-8104]"
    }, {
      "left" : "return _weirdKey(ctxt, key, e);",
      "right" : "return _weirdKey(ctxt, key, e);",
      "info" : "ReturnStatement[8044-8075]:ReturnStatement[8059-8090]"
    }, {
      "left" : "case TYPE_URL:",
      "right" : "case TYPE_URL:",
      "info" : "SwitchCase[8098-8112]:SwitchCase[8113-8127]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[8125-8277]:TryStatement[8140-8292]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8129-8181]:Block[8144-8196]"
    }, {
      "left" : "return new URL(key);",
      "right" : "return new URL(key);",
      "info" : "ReturnStatement[8147-8167]:ReturnStatement[8162-8182]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8214-8277]:Block[8229-8292]"
    }, {
      "left" : "return _weirdKey(ctxt, key, e);",
      "right" : "return _weirdKey(ctxt, key, e);",
      "info" : "ReturnStatement[8232-8263]:ReturnStatement[8247-8278]"
    }, {
      "left" : "case TYPE_CLASS:",
      "right" : "case TYPE_CLASS:",
      "info" : "SwitchCase[8286-8302]:SwitchCase[8301-8317]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[8315-8506]:TryStatement[8330-8521]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8319-8378]:Block[8334-8393]"
    }, {
      "left" : "return ctxt.findClass(key);",
      "right" : "return ctxt.findClass(key);",
      "info" : "ReturnStatement[8337-8364]:ReturnStatement[8352-8379]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8399-8506]:Block[8414-8521]"
    }, {
      "left" : "return ctxt.handleWeirdKey(_keyClass, key, \"unable to parse key as Class\");",
      "right" : "return ctxt.handleWeirdKey(_keyClass, key, \"unable to parse key as Class\");",
      "info" : "ReturnStatement[8417-8492]:ReturnStatement[8432-8507]"
    }, {
      "left" : "case TYPE_BYTE_ARRAY:",
      "right" : "case TYPE_BYTE_ARRAY:",
      "info" : "SwitchCase[8515-8536]:SwitchCase[8530-8551]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[8549-8739]:TryStatement[8564-8754]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8553-8640]:Block[8568-8655]"
    }, {
      "left" : "return ctxt.getConfig().getBase64Variant().decode(key);",
      "right" : "return ctxt.getConfig().getBase64Variant().decode(key);",
      "info" : "ReturnStatement[8571-8626]:ReturnStatement[8586-8641]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8676-8739]:Block[8691-8754]"
    }, {
      "left" : "return _weirdKey(ctxt, key, e);",
      "right" : "return _weirdKey(ctxt, key, e);",
      "info" : "ReturnStatement[8694-8725]:ReturnStatement[8709-8740]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[8748-8756]:SwitchCase[8763-8771]"
    }, {
      "left" : "throw new IllegalStateException(\"Internal error: unknown key type \"+_keyClass);",
      "right" : "throw new IllegalStateException(\"Internal error: unknown key type \"+_keyClass);",
      "info" : "ThrowStatement[8769-8848]:ThrowStatement[8784-8863]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9120-9165]:Block[9135-9180]"
    }, {
      "left" : "return Integer.parseInt(key);",
      "right" : "return Integer.parseInt(key);",
      "info" : "ReturnStatement[9130-9159]:ReturnStatement[9145-9174]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9241-9284]:Block[9256-9299]"
    }, {
      "left" : "return Long.parseLong(key);",
      "right" : "return Long.parseLong(key);",
      "info" : "ReturnStatement[9251-9278]:ReturnStatement[9266-9293]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9364-9416]:Block[9379-9431]"
    }, {
      "left" : "return NumberInput.parseDouble(key);",
      "right" : "return NumberInput.parseDouble(key);",
      "info" : "ReturnStatement[9374-9410]:ReturnStatement[9389-9425]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10201-10228]:Block[10231-10258]"
    }, {
      "left" : "super(-1, nominalType);",
      "right" : "super(-1, nominalType);",
      "info" : "SuperConstructorInvocation[10203-10226]:SuperConstructorInvocation[10233-10256]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10299-10542]:Block[10329-10572]"
    }, {
      "left" : "if (nominalType == String.class)",
      "right" : "if (nominalType == String.class)",
      "info" : "IfStatement[10313-10393]:IfStatement[10343-10423]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10346-10393]:Block[10376-10423]"
    }, {
      "left" : "return sString;",
      "right" : "return sString;",
      "info" : "ReturnStatement[10364-10379]:ReturnStatement[10394-10409]"
    }, {
      "left" : "if (nominalType == Object.class)",
      "right" : "if (nominalType == Object.class)",
      "info" : "IfStatement[10406-10486]:IfStatement[10436-10516]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10439-10486]:Block[10469-10516]"
    }, {
      "left" : "return sObject;",
      "right" : "return sObject;",
      "info" : "ReturnStatement[10457-10472]:ReturnStatement[10487-10502]"
    }, {
      "left" : "return new StringKD(nominalType);",
      "right" : "return new StringKD(nominalType);",
      "info" : "ReturnStatement[10499-10532]:ReturnStatement[10529-10562]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10684-10719]:Block[10714-10749]"
    }, {
      "left" : "return key;",
      "right" : "return key;",
      "info" : "ReturnStatement[10698-10709]:ReturnStatement[10728-10739]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11485-11556]:Block[11515-11586]"
    }, {
      "left" : "_keyClass = cls;",
      "right" : "_keyClass = cls;",
      "info" : "ExpressionStatement[11499-11515]:ExpressionStatement[11529-11545]"
    }, {
      "left" : "_delegate = deser;",
      "right" : "_delegate = deser;",
      "info" : "ExpressionStatement[11528-11546]:ExpressionStatement[11558-11576]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11737-12551]:Block[11767-12581]"
    }, {
      "left" : "if (key == null)",
      "right" : "if (key == null)",
      "info" : "IfStatement[11751-11840]:IfStatement[11781-11870]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11768-11840]:Block[11798-11870]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[11814-11826]:ReturnStatement[11844-11856]"
    }, {
      "left" : "TokenBuffer tb = new TokenBuffer(ctxt.getParser(), ctxt);",
      "right" : "TokenBuffer tb = new TokenBuffer(ctxt.getParser(), ctxt);",
      "info" : "VariableDeclarationStatement[11853-11910]:VariableDeclarationStatement[11883-11940]"
    }, {
      "left" : "tb.writeString(key);",
      "right" : "tb.writeString(key);",
      "info" : "ExpressionStatement[11923-11943]:ExpressionStatement[11953-11973]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[11956-12541]:TryStatement[11986-12571]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11960-12393]:Block[11990-12423]"
    }, {
      "left" : "JsonParser p = tb.asParser();",
      "right" : "JsonParser p = tb.asParser();",
      "info" : "VariableDeclarationStatement[12074-12103]:VariableDeclarationStatement[12104-12133]"
    }, {
      "left" : "p.nextToken();",
      "right" : "p.nextToken();",
      "info" : "ExpressionStatement[12120-12134]:ExpressionStatement[12150-12164]"
    }, {
      "left" : "Object result = _delegate.deserialize(p, ctxt);",
      "right" : "Object result = _delegate.deserialize(p, ctxt);",
      "info" : "VariableDeclarationStatement[12151-12198]:VariableDeclarationStatement[12181-12228]"
    }, {
      "left" : "if (result != null)",
      "right" : "if (result != null)",
      "info" : "IfStatement[12215-12289]:IfStatement[12245-12319]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12235-12289]:Block[12265-12319]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[12257-12271]:ReturnStatement[12287-12301]"
    }, {
      "left" : "return ctxt.handleWeirdKey(_keyClass, key, \"not a valid representation\");",
      "right" : "return ctxt.handleWeirdKey(_keyClass, key, \"not a valid representation\");",
      "info" : "ReturnStatement[12306-12379]:ReturnStatement[12336-12409]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12415-12541]:Block[12445-12571]"
    }, {
      "left" : "return ctxt.handleWeirdKey(_keyClass, key, \"not a valid representation: %s\", re.getMessage());",
      "right" : "return ctxt.handleWeirdKey(_keyClass, key, \"not a valid representation: %s\", re.getMessage());",
      "info" : "ReturnStatement[12433-12527]:ReturnStatement[12463-12557]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12591-12612]:Block[12621-12642]"
    }, {
      "left" : "return _keyClass;",
      "right" : "return _keyClass;",
      "info" : "ReturnStatement[12593-12610]:ReturnStatement[12623-12640]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13228-13401]:Block[13258-13431]"
    }, {
      "left" : "super(-1, er.getEnumClass());",
      "right" : "super(-1, er.getEnumClass());",
      "info" : "SuperConstructorInvocation[13242-13271]:SuperConstructorInvocation[13272-13301]"
    }, {
      "left" : "_byNameResolver = er;",
      "right" : "_byNameResolver = er;",
      "info" : "ExpressionStatement[13284-13305]:ExpressionStatement[13314-13335]"
    }, {
      "left" : "_factory = factory;",
      "right" : "_factory = factory;",
      "info" : "ExpressionStatement[13318-13337]:ExpressionStatement[13348-13367]"
    }, {
      "left" : "_enumDefaultValue = er.getDefaultValue();",
      "right" : "_enumDefaultValue = er.getDefaultValue();",
      "info" : "ExpressionStatement[13350-13391]:ExpressionStatement[13380-13421]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13518-14597]:Block[13548-14627]"
    }, {
      "left" : "if (_factory != null)",
      "right" : "if (_factory != null)",
      "info" : "IfStatement[13532-13751]:IfStatement[13562-13781]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13554-13751]:Block[13584-13781]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[13572-13737]:TryStatement[13602-13767]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13576-13643]:Block[13606-13673]"
    }, {
      "left" : "return _factory.call1(key);",
      "right" : "return _factory.call1(key);",
      "info" : "ReturnStatement[13598-13625]:ReturnStatement[13628-13655]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13664-13737]:Block[13694-13767]"
    }, {
      "left" : "ClassUtil.unwrapAndThrowAsIAE(e);",
      "right" : "ClassUtil.unwrapAndThrowAsIAE(e);",
      "info" : "ExpressionStatement[13686-13719]:ExpressionStatement[13716-13749]"
    }, {
      "left" : "EnumResolver res = ctxt.isEnabled(DeserializationFeature.READ_ENUMS_USING_TO_STRING)\n                    ? _getToStringResolver(ctxt) : _byNameResolver;",
      "right" : "EnumResolver res = ctxt.isEnabled(DeserializationFeature.READ_ENUMS_USING_TO_STRING)\n                    ? _getToStringResolver(ctxt) : _byNameResolver;",
      "info" : "VariableDeclarationStatement[13764-13916]:VariableDeclarationStatement[13794-13946]"
    }, {
      "left" : "Enum<?> e = res.findEnum(key);",
      "right" : "Enum<?> e = res.findEnum(key);",
      "info" : "VariableDeclarationStatement[13929-13959]:VariableDeclarationStatement[13959-13989]"
    }, {
      "left" : "if (e == null)",
      "right" : "if (e == null)",
      "info" : "IfStatement[13972-14565]:IfStatement[14002-14595]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13987-14565]:Block[14017-14595]"
    }, {
      "left" : "if ((_enumDefaultValue != null)\n                        && ctxt.isEnabled(DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_USING_DEFAULT_VALUE))",
      "right" : "if ((_enumDefaultValue != null)\n                        && ctxt.isEnabled(DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_USING_DEFAULT_VALUE))",
      "info" : "IfStatement[14005-14469]:IfStatement[14035-14499]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14149-14211]:Block[14179-14241]"
    }, {
      "left" : "e = _enumDefaultValue;",
      "right" : "e = _enumDefaultValue;",
      "info" : "ExpressionStatement[14171-14193]:ExpressionStatement[14201-14223]"
    }, {
      "left" : "if (!ctxt.isEnabled(DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL))",
      "right" : "if (!ctxt.isEnabled(DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL))",
      "info" : "IfStatement[14217-14469]:IfStatement[14247-14499]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14295-14469]:Block[14325-14499]"
    }, {
      "left" : "return ctxt.handleWeirdKey(_keyClass, key, \"not one of values excepted for Enum class: %s\",\n                        res.getEnumIds());",
      "right" : "return ctxt.handleWeirdKey(_keyClass, key, \"not one of values excepted for Enum class: %s\",\n                        res.getEnumIds());",
      "info" : "ReturnStatement[14317-14451]:ReturnStatement[14347-14481]"
    }, {
      "left" : "return e;",
      "right" : "return e;",
      "info" : "ReturnStatement[14578-14587]:ReturnStatement[14608-14617]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14686-15037]:Block[14716-15067]"
    }, {
      "left" : "EnumResolver res = _byToStringResolver;",
      "right" : "EnumResolver res = _byToStringResolver;",
      "info" : "VariableDeclarationStatement[14700-14739]:VariableDeclarationStatement[14730-14769]"
    }, {
      "left" : "if (res == null)",
      "right" : "if (res == null)",
      "info" : "IfStatement[14752-15003]:IfStatement[14782-15033]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14769-15003]:Block[14799-15033]"
    }, {
      "left" : "synchronized (this) {\n                    res = EnumResolver.constructUnsafeUsingToString(_byNameResolver.getEnumClass(),\n                            ctxt.getAnnotationIntrospector());\n                }",
      "right" : "synchronized (this) {\n                    res = EnumResolver.constructUnsafeUsingToString(_byNameResolver.getEnumClass(),\n                            ctxt.getAnnotationIntrospector());\n                }",
      "info" : "SynchronizedStatement[14787-14989]:SynchronizedStatement[14817-15019]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14807-14989]:Block[14837-15019]"
    }, {
      "left" : "res = EnumResolver.constructUnsafeUsingToString(_byNameResolver.getEnumClass(),\n                            ctxt.getAnnotationIntrospector());",
      "right" : "res = EnumResolver.constructUnsafeUsingToString(_byNameResolver.getEnumClass(),\n                            ctxt.getAnnotationIntrospector());",
      "info" : "ExpressionStatement[14829-14971]:ExpressionStatement[14859-15001]"
    }, {
      "left" : "return res;",
      "right" : "return res;",
      "info" : "ReturnStatement[15016-15027]:ReturnStatement[15046-15057]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15421-15507]:Block[15451-15537]"
    }, {
      "left" : "super(-1, ctor.getDeclaringClass());",
      "right" : "super(-1, ctor.getDeclaringClass());",
      "info" : "SuperConstructorInvocation[15435-15471]:SuperConstructorInvocation[15465-15501]"
    }, {
      "left" : "_ctor = ctor;",
      "right" : "_ctor = ctor;",
      "info" : "ExpressionStatement[15484-15497]:ExpressionStatement[15514-15527]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15622-15676]:Block[15652-15706]"
    }, {
      "left" : "return _ctor.newInstance(key);",
      "right" : "return _ctor.newInstance(key);",
      "info" : "ReturnStatement[15636-15666]:ReturnStatement[15666-15696]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16043-16134]:Block[16073-16164]"
    }, {
      "left" : "super(-1, fm.getDeclaringClass());",
      "right" : "super(-1, fm.getDeclaringClass());",
      "info" : "SuperConstructorInvocation[16057-16091]:SuperConstructorInvocation[16087-16121]"
    }, {
      "left" : "_factoryMethod = fm;",
      "right" : "_factoryMethod = fm;",
      "info" : "ExpressionStatement[16104-16124]:ExpressionStatement[16134-16154]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16249-16313]:Block[16279-16343]"
    }, {
      "left" : "return _factoryMethod.invoke(null, key);",
      "right" : "return _factoryMethod.invoke(null, key);",
      "info" : "ReturnStatement[16263-16303]:ReturnStatement[16293-16333]"
    } ]
  },
  "interFileMappings" : { }
}