{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "CollapseProperties",
      "right" : "CollapseProperties",
      "info" : "TypeDeclaration[1535-31079]:TypeDeclaration[1535-31218]"
    }, {
      "left" : "static final DiagnosticType UNSAFE_NAMESPACE_WARNING =\n      DiagnosticType.warning(\n          \"JSC_UNSAFE_NAMESPACE\",\n          \"incomplete alias created for namespace {0}\");",
      "right" : "static final DiagnosticType UNSAFE_NAMESPACE_WARNING =\n      DiagnosticType.warning(\n          \"JSC_UNSAFE_NAMESPACE\",\n          \"incomplete alias created for namespace {0}\");",
      "info" : "FieldDeclaration[3099-3274]:FieldDeclaration[3099-3274]"
    }, {
      "left" : "static final DiagnosticType NAMESPACE_REDEFINED_WARNING =\n      DiagnosticType.warning(\n          \"JSC_NAMESPACE_REDEFINED\",\n          \"namespace {0} should not be redefined\");",
      "right" : "static final DiagnosticType NAMESPACE_REDEFINED_WARNING =\n      DiagnosticType.warning(\n          \"JSC_NAMESPACE_REDEFINED\",\n          \"namespace {0} should not be redefined\");",
      "info" : "FieldDeclaration[3278-3454]:FieldDeclaration[3278-3454]"
    }, {
      "left" : "static final DiagnosticType UNSAFE_THIS = DiagnosticType.warning(\n      \"JSC_UNSAFE_THIS\",\n      \"dangerous use of 'this' in static method {0}\");",
      "right" : "static final DiagnosticType UNSAFE_THIS = DiagnosticType.warning(\n      \"JSC_UNSAFE_THIS\",\n      \"dangerous use of 'this' in static method {0}\");",
      "info" : "FieldDeclaration[3458-3603]:FieldDeclaration[3458-3603]"
    }, {
      "left" : "private AbstractCompiler compiler;",
      "right" : "private AbstractCompiler compiler;",
      "info" : "FieldDeclaration[3607-3641]:FieldDeclaration[3607-3641]"
    }, {
      "left" : "private List<Name> globalNames;",
      "right" : "private List<Name> globalNames;",
      "info" : "FieldDeclaration[3645-3707]:FieldDeclaration[3645-3707]"
    }, {
      "left" : "private Map<String, Name> nameMap;",
      "right" : "private Map<String, Name> nameMap;",
      "info" : "FieldDeclaration[3711-3818]:FieldDeclaration[3711-3818]"
    }, {
      "left" : "private final boolean collapsePropertiesOnExternTypes;",
      "right" : "private final boolean collapsePropertiesOnExternTypes;",
      "info" : "FieldDeclaration[3822-3876]:FieldDeclaration[3822-3876]"
    }, {
      "left" : "private final boolean inlineAliases;",
      "right" : "private final boolean inlineAliases;",
      "info" : "FieldDeclaration[3879-3915]:FieldDeclaration[3879-3915]"
    }, {
      "left" : "CollapseProperties(AbstractCompiler compiler,\n      boolean collapsePropertiesOnExternTypes, boolean inlineAliases)",
      "right" : "CollapseProperties(AbstractCompiler compiler,\n      boolean collapsePropertiesOnExternTypes, boolean inlineAliases)",
      "info" : "MethodDeclaration[3919-4535]:MethodDeclaration[3919-4535]"
    }, {
      "left" : "public void process(Node externs, Node root)",
      "right" : "public void process(Node externs, Node root)",
      "info" : "MethodDeclaration[4539-5407]:MethodDeclaration[4539-5407]"
    }, {
      "left" : "private void inlineAliases(GlobalNamespace namespace)",
      "right" : "private void inlineAliases(GlobalNamespace namespace)",
      "info" : "MethodDeclaration[5411-7354]:MethodDeclaration[5411-7354]"
    }, {
      "left" : "private boolean inlineAliasIfPossible(Ref alias, GlobalNamespace namespace)",
      "right" : "private boolean inlineAliasIfPossible(Ref alias, GlobalNamespace namespace)",
      "info" : "MethodDeclaration[7358-9365]:MethodDeclaration[7358-9365]"
    }, {
      "left" : "private void checkNamespaces()",
      "right" : "private void checkNamespaces()",
      "info" : "MethodDeclaration[9369-10197]:MethodDeclaration[9369-10197]"
    }, {
      "left" : "private void warnAboutNamespaceAliasing(Name nameObj, Ref ref)",
      "right" : "private void warnAboutNamespaceAliasing(Name nameObj, Ref ref)",
      "info" : "MethodDeclaration[10201-10585]:MethodDeclaration[10201-10585]"
    }, {
      "left" : "private void warnAboutNamespaceRedefinition(Name nameObj, Ref ref)",
      "right" : "private void warnAboutNamespaceRedefinition(Name nameObj, Ref ref)",
      "info" : "MethodDeclaration[10589-10985]:MethodDeclaration[10589-10985]"
    }, {
      "left" : "private void flattenReferencesToCollapsibleDescendantNames(\n      Name n, String alias)",
      "right" : "private void flattenReferencesToCollapsibleDescendantNames(\n      Name n, String alias)",
      "info" : "MethodDeclaration[10989-11612]:MethodDeclaration[10989-11612]"
    }, {
      "left" : "private void flattenReferencesTo(Name n, String alias)",
      "right" : "private void flattenReferencesTo(Name n, String alias)",
      "info" : "MethodDeclaration[11616-12961]:MethodDeclaration[11616-12961]"
    }, {
      "left" : "private void flattenPrefixes(String alias, Name n, int depth)",
      "right" : "private void flattenPrefixes(String alias, Name n, int depth)",
      "info" : "MethodDeclaration[12965-14196]:MethodDeclaration[12965-14196]"
    }, {
      "left" : "private void flattenNameRefAtDepth(String alias, Node n, int depth,\n      String originalName)",
      "right" : "private void flattenNameRefAtDepth(String alias, Node n, int depth,\n      String originalName)",
      "info" : "MethodDeclaration[14200-15345]:MethodDeclaration[14200-15345]"
    }, {
      "left" : "private void flattenNameRef(String alias, Node n, Node parent,\n      String originalName)",
      "right" : "private void flattenNameRef(String alias, Node n, Node parent,\n      String originalName)",
      "info" : "MethodDeclaration[15349-16112]:MethodDeclaration[15349-16112]"
    }, {
      "left" : "private void collapseDeclarationOfNameAndDescendants(Name n, String alias)",
      "right" : "private void collapseDeclarationOfNameAndDescendants(Name n, String alias)",
      "info" : "MethodDeclaration[16116-17357]:MethodDeclaration[16116-17357]"
    }, {
      "left" : "private void updateSimpleDeclaration(String alias, Name refName, Ref ref)",
      "right" : "private void updateSimpleDeclaration(String alias, Name refName, Ref ref)",
      "info" : "MethodDeclaration[17361-19813]:MethodDeclaration[17361-19952]"
    }, {
      "left" : "private void updateObjLitOrFunctionDeclaration(Name n, String alias)",
      "right" : "private void updateObjLitOrFunctionDeclaration(Name n, String alias)",
      "info" : "MethodDeclaration[19817-20780]:MethodDeclaration[19956-20919]"
    }, {
      "left" : "private void updateObjLitOrFunctionDeclarationAtAssignNode(\n      Name n, String alias)",
      "right" : "private void updateObjLitOrFunctionDeclarationAtAssignNode(\n      Name n, String alias)",
      "info" : "MethodDeclaration[20784-22855]:MethodDeclaration[20923-22994]"
    }, {
      "left" : "private void checkForHosedThisReferences(Node function, JSDocInfo docInfo,\n      final Name name)",
      "right" : "private void checkForHosedThisReferences(Node function, JSDocInfo docInfo,\n      final Name name)",
      "info" : "MethodDeclaration[22859-23779]:MethodDeclaration[22998-23918]"
    }, {
      "left" : "public void visit(NodeTraversal t, Node n, Node parent)",
      "right" : "public void visit(NodeTraversal t, Node n, Node parent)",
      "info" : "MethodDeclaration[23467-23755]:MethodDeclaration[23606-23894]"
    }, {
      "left" : "private void updateObjLitOrFunctionDeclarationAtVarNode(Name n)",
      "right" : "private void updateObjLitOrFunctionDeclarationAtVarNode(Name n)",
      "info" : "MethodDeclaration[23783-24997]:MethodDeclaration[23922-25136]"
    }, {
      "left" : "private void updateFunctionDeclarationAtFunctionNode(Name n)",
      "right" : "private void updateFunctionDeclarationAtFunctionNode(Name n)",
      "info" : "MethodDeclaration[25001-25500]:MethodDeclaration[25140-25639]"
    }, {
      "left" : "private int declareVarsForObjLitValues(\n      Name objlitName, String alias, Node objlit, Node varNode,\n      Node nameToAddAfter, Node varParent)",
      "right" : "private int declareVarsForObjLitValues(\n      Name objlitName, String alias, Node objlit, Node varNode,\n      Node nameToAddAfter, Node varParent)",
      "info" : "MethodDeclaration[25504-29047]:MethodDeclaration[25643-29186]"
    }, {
      "left" : "private int addStubsForUndeclaredProperties(\n      Name n, String alias, Node parent, Node addAfter)",
      "right" : "private int addStubsForUndeclaredProperties(\n      Name n, String alias, Node parent, Node addAfter)",
      "info" : "MethodDeclaration[29051-30714]:MethodDeclaration[29190-30853]"
    }, {
      "left" : "private static String appendPropForAlias(String root, String prop)",
      "right" : "private static String appendPropForAlias(String root, String prop)",
      "info" : "MethodDeclaration[30718-31077]:MethodDeclaration[30857-31216]"
    } ],
    "mappings" : [
 {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[3031-3036]:TYPE_DECLARATION_KIND[3031-3036]"
    }, {
      "left" : "CollapseProperties",
      "right" : "CollapseProperties",
      "info" : "SimpleName[3037-3055]:SimpleName[3037-3055]"
    }, {
      "left" : "CompilerPass",
      "right" : "CompilerPass",
      "info" : "SimpleType[3067-3079]:SimpleType[3067-3079]"
    }, {
      "left" : "CollapseProperties",
      "right" : "CollapseProperties",
      "info" : "SimpleName[4268-4286]:SimpleName[4268-4286]"
    }, {
      "left" : "AbstractCompiler compiler",
      "right" : "AbstractCompiler compiler",
      "info" : "SingleVariableDeclaration[4287-4312]:SingleVariableDeclaration[4287-4312]"
    }, {
      "left" : "boolean collapsePropertiesOnExternTypes",
      "right" : "boolean collapsePropertiesOnExternTypes",
      "info" : "SingleVariableDeclaration[4320-4359]:SingleVariableDeclaration[4320-4359]"
    }, {
      "left" : "boolean inlineAliases",
      "right" : "boolean inlineAliases",
      "info" : "SingleVariableDeclaration[4361-4382]:SingleVariableDeclaration[4361-4382]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4384-4535]:Block[4384-4535]"
    }, {
      "left" : "this.compiler = compiler;",
      "right" : "this.compiler = compiler;",
      "info" : "ExpressionStatement[4390-4415]:ExpressionStatement[4390-4415]"
    }, {
      "left" : "this.collapsePropertiesOnExternTypes = collapsePropertiesOnExternTypes;",
      "right" : "this.collapsePropertiesOnExternTypes = collapsePropertiesOnExternTypes;",
      "info" : "ExpressionStatement[4420-4491]:ExpressionStatement[4420-4491]"
    }, {
      "left" : "this.inlineAliases = inlineAliases;",
      "right" : "this.inlineAliases = inlineAliases;",
      "info" : "ExpressionStatement[4496-4531]:ExpressionStatement[4496-4531]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[4539-4548]:MarkerAnnotation[4539-4548]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[4551-4557]:Modifier[4551-4557]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[4558-4562]:PrimitiveType[4558-4562]"
    }, {
      "left" : "process",
      "right" : "process",
      "info" : "SimpleName[4563-4570]:SimpleName[4563-4570]"
    }, {
      "left" : "Node externs",
      "right" : "Node externs",
      "info" : "SingleVariableDeclaration[4571-4583]:SingleVariableDeclaration[4571-4583]"
    }, {
      "left" : "Node root",
      "right" : "Node root",
      "info" : "SingleVariableDeclaration[4585-4594]:SingleVariableDeclaration[4585-4594]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4596-5407]:Block[4596-5407]"
    }, {
      "left" : "GlobalNamespace namespace;",
      "right" : "GlobalNamespace namespace;",
      "info" : "VariableDeclarationStatement[4602-4628]:VariableDeclarationStatement[4602-4628]"
    }, {
      "left" : "if (collapsePropertiesOnExternTypes)",
      "right" : "if (collapsePropertiesOnExternTypes)",
      "info" : "IfStatement[4633-4809]:IfStatement[4633-4809]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4670-4741]:Block[4670-4741]"
    }, {
      "left" : "namespace = new GlobalNamespace(compiler, externs, root);",
      "right" : "namespace = new GlobalNamespace(compiler, externs, root);",
      "info" : "ExpressionStatement[4678-4735]:ExpressionStatement[4678-4735]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4747-4809]:Block[4747-4809]"
    }, {
      "left" : "namespace = new GlobalNamespace(compiler, root);",
      "right" : "namespace = new GlobalNamespace(compiler, root);",
      "info" : "ExpressionStatement[4755-4803]:ExpressionStatement[4755-4803]"
    }, {
      "left" : "if (inlineAliases)",
      "right" : "if (inlineAliases)",
      "info" : "IfStatement[4815-4873]:IfStatement[4815-4873]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4834-4873]:Block[4834-4873]"
    }, {
      "left" : "inlineAliases(namespace);",
      "right" : "inlineAliases(namespace);",
      "info" : "ExpressionStatement[4842-4867]:ExpressionStatement[4842-4867]"
    }, {
      "left" : "nameMap = namespace.getNameIndex();",
      "right" : "nameMap = namespace.getNameIndex();",
      "info" : "ExpressionStatement[4878-4913]:ExpressionStatement[4878-4913]"
    }, {
      "left" : "globalNames = namespace.getNameForest();",
      "right" : "globalNames = namespace.getNameForest();",
      "info" : "ExpressionStatement[4918-4958]:ExpressionStatement[4918-4958]"
    }, {
      "left" : "checkNamespaces();",
      "right" : "checkNamespaces();",
      "info" : "ExpressionStatement[4963-4981]:ExpressionStatement[4963-4981]"
    }, {
      "left" : "for (Name n : globalNames)",
      "right" : "for (Name n : globalNames)",
      "info" : "EnhancedForStatement[4987-5085]:EnhancedForStatement[4987-5085]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5014-5085]:Block[5014-5085]"
    }, {
      "left" : "flattenReferencesToCollapsibleDescendantNames(n, n.name);",
      "right" : "flattenReferencesToCollapsibleDescendantNames(n, n.name);",
      "info" : "ExpressionStatement[5022-5079]:ExpressionStatement[5022-5079]"
    }, {
      "left" : "for (Name n : globalNames)",
      "right" : "for (Name n : globalNames)",
      "info" : "EnhancedForStatement[5311-5403]:EnhancedForStatement[5311-5403]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5338-5403]:Block[5338-5403]"
    }, {
      "left" : "collapseDeclarationOfNameAndDescendants(n, n.name);",
      "right" : "collapseDeclarationOfNameAndDescendants(n, n.name);",
      "info" : "ExpressionStatement[5346-5397]:ExpressionStatement[5346-5397]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[6106-6113]:Modifier[6106-6113]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[6114-6118]:PrimitiveType[6114-6118]"
    }, {
      "left" : "inlineAliases",
      "right" : "inlineAliases",
      "info" : "SimpleName[6119-6132]:SimpleName[6119-6132]"
    }, {
      "left" : "GlobalNamespace namespace",
      "right" : "GlobalNamespace namespace",
      "info" : "SingleVariableDeclaration[6133-6158]:SingleVariableDeclaration[6133-6158]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6160-7354]:Block[6160-7354]"
    }, {
      "left" : "Deque<Name> workList = new ArrayDeque<Name>(namespace.getNameForest());",
      "right" : "Deque<Name> workList = new ArrayDeque<Name>(namespace.getNameForest());",
      "info" : "VariableDeclarationStatement[6234-6305]:VariableDeclarationStatement[6234-6305]"
    }, {
      "left" : "while (!workList.isEmpty())",
      "right" : "while (!workList.isEmpty())",
      "info" : "WhileStatement[6310-7350]:WhileStatement[6310-7350]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6338-7350]:Block[6338-7350]"
    }, {
      "left" : "Name name = workList.pop();",
      "right" : "Name name = workList.pop();",
      "info" : "VariableDeclarationStatement[6346-6373]:VariableDeclarationStatement[6346-6373]"
    }, {
      "left" : "if (name.globalSets == 1 && name.localSets == 0 &&\n          name.aliasingGets > 0)",
      "right" : "if (name.globalSets == 1 && name.localSets == 0 &&\n          name.aliasingGets > 0)",
      "info" : "IfStatement[6381-6936]:IfStatement[6381-6936]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6465-6936]:Block[6465-6936]"
    }, {
      "left" : "List<Ref> refs = Lists.newArrayList(name.refs);",
      "right" : "List<Ref> refs = Lists.newArrayList(name.refs);",
      "info" : "VariableDeclarationStatement[6585-6632]:VariableDeclarationStatement[6585-6632]"
    }, {
      "left" : "for (Ref ref : refs)",
      "right" : "for (Ref ref : refs)",
      "info" : "EnhancedForStatement[6641-6928]:EnhancedForStatement[6641-6928]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6662-6928]:Block[6662-6928]"
    }, {
      "left" : "if (ref.type == Type.ALIASING_GET && ref.scope.isLocal())",
      "right" : "if (ref.type == Type.ALIASING_GET && ref.scope.isLocal())",
      "info" : "IfStatement[6674-6918]:IfStatement[6674-6918]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6732-6918]:Block[6732-6918]"
    }, {
      "left" : "if (inlineAliasIfPossible(ref, namespace))",
      "right" : "if (inlineAliasIfPossible(ref, namespace))",
      "info" : "IfStatement[6813-6906]:IfStatement[6813-6906]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6856-6906]:Block[6856-6906]"
    }, {
      "left" : "name.removeRef(ref);",
      "right" : "name.removeRef(ref);",
      "info" : "ExpressionStatement[6872-6892]:ExpressionStatement[6872-6892]"
    }, {
      "left" : "if ((name.type == Name.Type.OBJECTLIT ||\n           name.type == Name.Type.FUNCTION) &&\n          name.aliasingGets == 0 && name.props != null)",
      "right" : "if ((name.type == Name.Type.OBJECTLIT ||\n           name.type == Name.Type.FUNCTION) &&\n          name.aliasingGets == 0 && name.props != null)",
      "info" : "IfStatement[7043-7344]:IfStatement[7043-7344]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7187-7344]:Block[7187-7344]"
    }, {
      "left" : "workList.addAll(name.props);",
      "right" : "workList.addAll(name.props);",
      "info" : "ExpressionStatement[7308-7336]:ExpressionStatement[7308-7336]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[7358-7365]:Modifier[7358-7365]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[7366-7373]:PrimitiveType[7366-7373]"
    }, {
      "left" : "inlineAliasIfPossible",
      "right" : "inlineAliasIfPossible",
      "info" : "SimpleName[7374-7395]:SimpleName[7374-7395]"
    }, {
      "left" : "Ref alias",
      "right" : "Ref alias",
      "info" : "SingleVariableDeclaration[7396-7405]:SingleVariableDeclaration[7396-7405]"
    }, {
      "left" : "GlobalNamespace namespace",
      "right" : "GlobalNamespace namespace",
      "info" : "SingleVariableDeclaration[7407-7432]:SingleVariableDeclaration[7407-7432]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7434-9365]:Block[7434-9365]"
    }, {
      "left" : "Node aliasParent = alias.node.getParent();",
      "right" : "Node aliasParent = alias.node.getParent();",
      "info" : "VariableDeclarationStatement[7670-7712]:VariableDeclarationStatement[7670-7712]"
    }, {
      "left" : "if (aliasParent.getType() == Token.NAME)",
      "right" : "if (aliasParent.getType() == Token.NAME)",
      "info" : "IfStatement[7717-9342]:IfStatement[7717-9342]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7758-9342]:Block[7758-9342]"
    }, {
      "left" : "Scope scope = alias.scope;",
      "right" : "Scope scope = alias.scope;",
      "info" : "VariableDeclarationStatement[7844-7870]:VariableDeclarationStatement[7844-7870]"
    }, {
      "left" : "Var aliasVar = scope.getVar(aliasParent.getString());",
      "right" : "Var aliasVar = scope.getVar(aliasParent.getString());",
      "info" : "VariableDeclarationStatement[7877-7930]:VariableDeclarationStatement[7877-7930]"
    }, {
      "left" : "ReferenceCollectingCallback collector =\n          new ReferenceCollectingCallback(compiler,\n              ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR,\n              Predicates.<Var>equalTo(aliasVar));",
      "right" : "ReferenceCollectingCallback collector =\n          new ReferenceCollectingCallback(compiler,\n              ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR,\n              Predicates.<Var>equalTo(aliasVar));",
      "info" : "VariableDeclarationStatement[7937-8141]:VariableDeclarationStatement[7937-8141]"
    }, {
      "left" : "(new NodeTraversal(compiler, collector)).traverseAtScope(scope);",
      "right" : "(new NodeTraversal(compiler, collector)).traverseAtScope(scope);",
      "info" : "ExpressionStatement[8148-8212]:ExpressionStatement[8148-8212]"
    }, {
      "left" : "ReferenceCollection aliasRefs =\n          collector.getReferenceCollection(aliasVar);",
      "right" : "ReferenceCollection aliasRefs =\n          collector.getReferenceCollection(aliasVar);",
      "info" : "VariableDeclarationStatement[8220-8305]:VariableDeclarationStatement[8220-8305]"
    }, {
      "left" : "if (aliasRefs.isWellDefined()\n          && aliasRefs.firstReferenceIsAssigningDeclaration()\n          && aliasRefs.isAssignedOnceInLifetime())",
      "right" : "if (aliasRefs.isWellDefined()\n          && aliasRefs.firstReferenceIsAssigningDeclaration()\n          && aliasRefs.isAssignedOnceInLifetime())",
      "info" : "IfStatement[8312-9336]:IfStatement[8312-9336]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8455-9336]:Block[8455-9336]"
    }, {
      "left" : "int size = aliasRefs.references.size();",
      "right" : "int size = aliasRefs.references.size();",
      "info" : "VariableDeclarationStatement[8526-8565]:VariableDeclarationStatement[8526-8565]"
    }, {
      "left" : "Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1);",
      "right" : "Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1);",
      "info" : "VariableDeclarationStatement[8574-8637]:VariableDeclarationStatement[8574-8637]"
    }, {
      "left" : "for (int i = 1; i < size; i++)",
      "right" : "for (int i = 1; i < size; i++)",
      "info" : "ForStatement[8646-8951]:ForStatement[8646-8951]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8677-8951]:Block[8677-8951]"
    }, {
      "left" : "ReferenceCollectingCallback.Reference aliasRef =\n              aliasRefs.references.get(i);",
      "right" : "ReferenceCollectingCallback.Reference aliasRef =\n              aliasRefs.references.get(i);",
      "info" : "VariableDeclarationStatement[8689-8780]:VariableDeclarationStatement[8689-8780]"
    }, {
      "left" : "Node newNode = alias.node.cloneTree();",
      "right" : "Node newNode = alias.node.cloneTree();",
      "info" : "VariableDeclarationStatement[8792-8830]:VariableDeclarationStatement[8792-8830]"
    }, {
      "left" : "aliasRef.getParent().replaceChild(aliasRef.getNameNode(), newNode);",
      "right" : "aliasRef.getParent().replaceChild(aliasRef.getNameNode(), newNode);",
      "info" : "ExpressionStatement[8841-8908]:ExpressionStatement[8841-8908]"
    }, {
      "left" : "newNodes.add(newNode);",
      "right" : "newNodes.add(newNode);",
      "info" : "ExpressionStatement[8919-8941]:ExpressionStatement[8919-8941]"
    }, {
      "left" : "aliasParent.replaceChild(alias.node, new Node(Token.NULL));",
      "right" : "aliasParent.replaceChild(alias.node, new Node(Token.NULL));",
      "info" : "ExpressionStatement[9009-9068]:ExpressionStatement[9009-9068]"
    }, {
      "left" : "compiler.reportCodeChange();",
      "right" : "compiler.reportCodeChange();",
      "info" : "ExpressionStatement[9077-9105]:ExpressionStatement[9077-9105]"
    }, {
      "left" : "namespace.scanNewNodes(alias.scope, newNodes);",
      "right" : "namespace.scanNewNodes(alias.scope, newNodes);",
      "info" : "ExpressionStatement[9261-9307]:ExpressionStatement[9261-9307]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[9316-9328]:ReturnStatement[9316-9328]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[9348-9361]:ReturnStatement[9348-9361]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[9511-9518]:Modifier[9511-9518]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[9519-9523]:PrimitiveType[9519-9523]"
    }, {
      "left" : "checkNamespaces",
      "right" : "checkNamespaces",
      "info" : "SimpleName[9524-9539]:SimpleName[9524-9539]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9542-10197]:Block[9542-10197]"
    }, {
      "left" : "for (Name name : nameMap.values())",
      "right" : "for (Name name : nameMap.values())",
      "info" : "EnhancedForStatement[9548-10193]:EnhancedForStatement[9548-10193]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9583-10193]:Block[9583-10193]"
    }, {
      "left" : "if (name.isNamespace() && name.refs != null &&\n          (name.aliasingGets > 0 || name.localSets + name.globalSets > 1))",
      "right" : "if (name.isNamespace() && name.refs != null &&\n          (name.aliasingGets > 0 || name.localSets + name.globalSets > 1))",
      "info" : "IfStatement[9591-10187]:IfStatement[9591-10187]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9713-10187]:Block[9713-10187]"
    }, {
      "left" : "boolean initialized = name.declaration != null;",
      "right" : "boolean initialized = name.declaration != null;",
      "info" : "VariableDeclarationStatement[9723-9770]:VariableDeclarationStatement[9723-9770]"
    }, {
      "left" : "for (Ref ref : name.refs)",
      "right" : "for (Ref ref : name.refs)",
      "info" : "EnhancedForStatement[9779-10179]:EnhancedForStatement[9779-10179]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9805-10179]:Block[9805-10179]"
    }, {
      "left" : "if (ref.type == Ref.Type.SET_FROM_GLOBAL ||\n              ref.type == Ref.Type.SET_FROM_LOCAL)",
      "right" : "if (ref.type == Ref.Type.SET_FROM_GLOBAL ||\n              ref.type == Ref.Type.SET_FROM_LOCAL)",
      "info" : "IfStatement[9817-10169]:IfStatement[9817-10169]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9912-10060]:Block[9912-10060]"
    }, {
      "left" : "if (initialized)",
      "right" : "if (initialized)",
      "info" : "IfStatement[9926-10015]:IfStatement[9926-10015]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9943-10015]:Block[9943-10015]"
    }, {
      "left" : "warnAboutNamespaceRedefinition(name, ref);",
      "right" : "warnAboutNamespaceRedefinition(name, ref);",
      "info" : "ExpressionStatement[9959-10001]:ExpressionStatement[9959-10001]"
    }, {
      "left" : "initialized = true;",
      "right" : "initialized = true;",
      "info" : "ExpressionStatement[10029-10048]:ExpressionStatement[10029-10048]"
    }, {
      "left" : "if (ref.type == Ref.Type.ALIASING_GET)",
      "right" : "if (ref.type == Ref.Type.ALIASING_GET)",
      "info" : "IfStatement[10066-10169]:IfStatement[10066-10169]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10105-10169]:Block[10105-10169]"
    }, {
      "left" : "warnAboutNamespaceAliasing(name, ref);",
      "right" : "warnAboutNamespaceAliasing(name, ref);",
      "info" : "ExpressionStatement[10119-10157]:ExpressionStatement[10119-10157]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[10380-10387]:Modifier[10380-10387]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[10388-10392]:PrimitiveType[10388-10392]"
    }, {
      "left" : "warnAboutNamespaceAliasing",
      "right" : "warnAboutNamespaceAliasing",
      "info" : "SimpleName[10393-10419]:SimpleName[10393-10419]"
    }, {
      "left" : "Name nameObj",
      "right" : "Name nameObj",
      "info" : "SingleVariableDeclaration[10420-10432]:SingleVariableDeclaration[10420-10432]"
    }, {
      "left" : "Ref ref",
      "right" : "Ref ref",
      "info" : "SingleVariableDeclaration[10434-10441]:SingleVariableDeclaration[10434-10441]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10443-10585]:Block[10443-10585]"
    }, {
      "left" : "compiler.report(\n        JSError.make(ref.sourceName, ref.node,\n                     UNSAFE_NAMESPACE_WARNING, nameObj.fullName()));",
      "right" : "compiler.report(\n        JSError.make(ref.sourceName, ref.node,\n                     UNSAFE_NAMESPACE_WARNING, nameObj.fullName()));",
      "info" : "ExpressionStatement[10449-10581]:ExpressionStatement[10449-10581]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[10773-10780]:Modifier[10773-10780]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[10781-10785]:PrimitiveType[10781-10785]"
    }, {
      "left" : "warnAboutNamespaceRedefinition",
      "right" : "warnAboutNamespaceRedefinition",
      "info" : "SimpleName[10786-10816]:SimpleName[10786-10816]"
    }, {
      "left" : "Name nameObj",
      "right" : "Name nameObj",
      "info" : "SingleVariableDeclaration[10817-10829]:SingleVariableDeclaration[10817-10829]"
    }, {
      "left" : "Ref ref",
      "right" : "Ref ref",
      "info" : "SingleVariableDeclaration[10831-10838]:SingleVariableDeclaration[10831-10838]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10840-10985]:Block[10840-10985]"
    }, {
      "left" : "compiler.report(\n        JSError.make(ref.sourceName, ref.node,\n                     NAMESPACE_REDEFINED_WARNING, nameObj.fullName()));",
      "right" : "compiler.report(\n        JSError.make(ref.sourceName, ref.node,\n                     NAMESPACE_REDEFINED_WARNING, nameObj.fullName()));",
      "info" : "ExpressionStatement[10846-10981]:ExpressionStatement[10846-10981]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[11241-11248]:Modifier[11241-11248]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[11249-11253]:PrimitiveType[11249-11253]"
    }, {
      "left" : "flattenReferencesToCollapsibleDescendantNames",
      "right" : "flattenReferencesToCollapsibleDescendantNames",
      "info" : "SimpleName[11254-11299]:SimpleName[11254-11299]"
    }, {
      "left" : "Name n",
      "right" : "Name n",
      "info" : "SingleVariableDeclaration[11307-11313]:SingleVariableDeclaration[11307-11313]"
    }, {
      "left" : "String alias",
      "right" : "String alias",
      "info" : "SingleVariableDeclaration[11315-11327]:SingleVariableDeclaration[11315-11327]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11329-11612]:Block[11329-11612]"
    }, {
      "left" : "if (n.props == null)",
      "right" : "if (n.props == null)",
      "info" : "IfStatement[11335-11363]:IfStatement[11335-11363]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[11356-11363]:ReturnStatement[11356-11363]"
    }, {
      "left" : "for (Name p : n.props)",
      "right" : "for (Name p : n.props)",
      "info" : "EnhancedForStatement[11369-11608]:EnhancedForStatement[11369-11608]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11392-11608]:Block[11392-11608]"
    }, {
      "left" : "String propAlias = appendPropForAlias(alias, p.name);",
      "right" : "String propAlias = appendPropForAlias(alias, p.name);",
      "info" : "VariableDeclarationStatement[11400-11453]:VariableDeclarationStatement[11400-11453]"
    }, {
      "left" : "if (p.canCollapse())",
      "right" : "if (p.canCollapse())",
      "info" : "IfStatement[11461-11534]:IfStatement[11461-11534]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11482-11534]:Block[11482-11534]"
    }, {
      "left" : "flattenReferencesTo(p, propAlias);",
      "right" : "flattenReferencesTo(p, propAlias);",
      "info" : "ExpressionStatement[11492-11526]:ExpressionStatement[11492-11526]"
    }, {
      "left" : "flattenReferencesToCollapsibleDescendantNames(p, propAlias);",
      "right" : "flattenReferencesToCollapsibleDescendantNames(p, propAlias);",
      "info" : "ExpressionStatement[11542-11602]:ExpressionStatement[11542-11602]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[11867-11874]:Modifier[11867-11874]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[11875-11879]:PrimitiveType[11875-11879]"
    }, {
      "left" : "flattenReferencesTo",
      "right" : "flattenReferencesTo",
      "info" : "SimpleName[11880-11899]:SimpleName[11880-11899]"
    }, {
      "left" : "Name n",
      "right" : "Name n",
      "info" : "SingleVariableDeclaration[11900-11906]:SingleVariableDeclaration[11900-11906]"
    }, {
      "left" : "String alias",
      "right" : "String alias",
      "info" : "SingleVariableDeclaration[11908-11920]:SingleVariableDeclaration[11908-11920]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11922-12961]:Block[11922-12961]"
    }, {
      "left" : "if (n.refs != null)",
      "right" : "if (n.refs != null)",
      "info" : "IfStatement[11928-12619]:IfStatement[11928-12619]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11948-12619]:Block[11948-12619]"
    }, {
      "left" : "String originalName = n.fullName();",
      "right" : "String originalName = n.fullName();",
      "info" : "VariableDeclarationStatement[11956-11991]:VariableDeclarationStatement[11956-11991]"
    }, {
      "left" : "for (Ref r : n.refs)",
      "right" : "for (Ref r : n.refs)",
      "info" : "EnhancedForStatement[11998-12613]:EnhancedForStatement[11998-12613]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12019-12613]:Block[12019-12613]"
    }, {
      "left" : "Node rParent = r.node.getParent();",
      "right" : "Node rParent = r.node.getParent();",
      "info" : "VariableDeclarationStatement[12029-12063]:VariableDeclarationStatement[12029-12063]"
    }, {
      "left" : "if (!NodeUtil.isObjectLitKey(r.node, rParent) &&\n            (r.getTwin() == null || r.isSet()))",
      "right" : "if (!NodeUtil.isObjectLitKey(r.node, rParent) &&\n            (r.getTwin() == null || r.isSet()))",
      "info" : "IfStatement[12433-12605]:IfStatement[12433-12605]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12530-12605]:Block[12530-12605]"
    }, {
      "left" : "flattenNameRef(alias, r.node, rParent, originalName);",
      "right" : "flattenNameRef(alias, r.node, rParent, originalName);",
      "info" : "ExpressionStatement[12542-12595]:ExpressionStatement[12542-12595]"
    }, {
      "left" : "if (n.props != null)",
      "right" : "if (n.props != null)",
      "info" : "IfStatement[12852-12957]:IfStatement[12852-12957]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12873-12957]:Block[12873-12957]"
    }, {
      "left" : "for (Name p : n.props)",
      "right" : "for (Name p : n.props)",
      "info" : "EnhancedForStatement[12881-12951]:EnhancedForStatement[12881-12951]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12904-12951]:Block[12904-12951]"
    }, {
      "left" : "flattenPrefixes(alias, p, 1);",
      "right" : "flattenPrefixes(alias, p, 1);",
      "info" : "ExpressionStatement[12914-12943]:ExpressionStatement[12914-12943]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[13302-13309]:Modifier[13302-13309]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[13310-13314]:PrimitiveType[13310-13314]"
    }, {
      "left" : "flattenPrefixes",
      "right" : "flattenPrefixes",
      "info" : "SimpleName[13315-13330]:SimpleName[13315-13330]"
    }, {
      "left" : "String alias",
      "right" : "String alias",
      "info" : "SingleVariableDeclaration[13331-13343]:SingleVariableDeclaration[13331-13343]"
    }, {
      "left" : "Name n",
      "right" : "Name n",
      "info" : "SingleVariableDeclaration[13345-13351]:SingleVariableDeclaration[13345-13351]"
    }, {
      "left" : "int depth",
      "right" : "int depth",
      "info" : "SingleVariableDeclaration[13353-13362]:SingleVariableDeclaration[13353-13362]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13364-14196]:Block[13364-14196]"
    }, {
      "left" : "String originalName = n.fullName();",
      "right" : "String originalName = n.fullName();",
      "info" : "VariableDeclarationStatement[13513-13548]:VariableDeclarationStatement[13513-13548]"
    }, {
      "left" : "if (n.declaration != null && n.declaration.node != null &&\n        n.declaration.node.getType() == Token.GETPROP)",
      "right" : "if (n.declaration != null && n.declaration.node != null &&\n        n.declaration.node.getType() == Token.GETPROP)",
      "info" : "IfStatement[13553-13751]:IfStatement[13553-13751]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13667-13751]:Block[13667-13751]"
    }, {
      "left" : "flattenNameRefAtDepth(alias, n.declaration.node, depth, originalName);",
      "right" : "flattenNameRefAtDepth(alias, n.declaration.node, depth, originalName);",
      "info" : "ExpressionStatement[13675-13745]:ExpressionStatement[13675-13745]"
    }, {
      "left" : "if (n.refs != null)",
      "right" : "if (n.refs != null)",
      "info" : "IfStatement[13757-14073]:IfStatement[13757-14073]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13777-14073]:Block[13777-14073]"
    }, {
      "left" : "for (Ref r : n.refs)",
      "right" : "for (Ref r : n.refs)",
      "info" : "EnhancedForStatement[13785-14067]:EnhancedForStatement[13785-14067]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13806-14067]:Block[13806-14067]"
    }, {
      "left" : "if (r.getTwin() == null || r.isSet())",
      "right" : "if (r.getTwin() == null || r.isSet())",
      "info" : "IfStatement[13941-14059]:IfStatement[13941-14059]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13979-14059]:Block[13979-14059]"
    }, {
      "left" : "flattenNameRefAtDepth(alias, r.node, depth, originalName);",
      "right" : "flattenNameRefAtDepth(alias, r.node, depth, originalName);",
      "info" : "ExpressionStatement[13991-14049]:ExpressionStatement[13991-14049]"
    }, {
      "left" : "if (n.props != null)",
      "right" : "if (n.props != null)",
      "info" : "IfStatement[14079-14192]:IfStatement[14079-14192]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14100-14192]:Block[14100-14192]"
    }, {
      "left" : "for (Name p : n.props)",
      "right" : "for (Name p : n.props)",
      "info" : "EnhancedForStatement[14108-14186]:EnhancedForStatement[14108-14186]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14131-14186]:Block[14131-14186]"
    }, {
      "left" : "flattenPrefixes(alias, p, depth + 1);",
      "right" : "flattenPrefixes(alias, p, depth + 1);",
      "info" : "ExpressionStatement[14141-14178]:ExpressionStatement[14141-14178]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[14577-14584]:Modifier[14577-14584]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[14585-14589]:PrimitiveType[14585-14589]"
    }, {
      "left" : "flattenNameRefAtDepth",
      "right" : "flattenNameRefAtDepth",
      "info" : "SimpleName[14590-14611]:SimpleName[14590-14611]"
    }, {
      "left" : "String alias",
      "right" : "String alias",
      "info" : "SingleVariableDeclaration[14612-14624]:SingleVariableDeclaration[14612-14624]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[14626-14632]:SingleVariableDeclaration[14626-14632]"
    }, {
      "left" : "int depth",
      "right" : "int depth",
      "info" : "SingleVariableDeclaration[14634-14643]:SingleVariableDeclaration[14634-14643]"
    }, {
      "left" : "String originalName",
      "right" : "String originalName",
      "info" : "SingleVariableDeclaration[14651-14670]:SingleVariableDeclaration[14651-14670]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14672-15345]:Block[14672-15345]"
    }, {
      "left" : "int nType = n.getType();",
      "right" : "int nType = n.getType();",
      "info" : "VariableDeclarationStatement[14899-14923]:VariableDeclarationStatement[14899-14923]"
    }, {
      "left" : "boolean isQName = nType == Token.NAME || nType == Token.GETPROP;",
      "right" : "boolean isQName = nType == Token.NAME || nType == Token.GETPROP;",
      "info" : "VariableDeclarationStatement[14928-14992]:VariableDeclarationStatement[14928-14992]"
    }, {
      "left" : "boolean isObjKey = nType == Token.STRING || nType == Token.NUMBER;",
      "right" : "boolean isObjKey = nType == Token.STRING || nType == Token.NUMBER;",
      "info" : "VariableDeclarationStatement[14997-15063]:VariableDeclarationStatement[14997-15063]"
    }, {
      "left" : "Preconditions.checkState(isObjKey || isQName);",
      "right" : "Preconditions.checkState(isObjKey || isQName);",
      "info" : "ExpressionStatement[15068-15114]:ExpressionStatement[15068-15114]"
    }, {
      "left" : "if (isQName)",
      "right" : "if (isQName)",
      "info" : "IfStatement[15119-15341]:IfStatement[15119-15341]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15132-15341]:Block[15132-15341]"
    }, {
      "left" : "for (int i = 1; i < depth && n.hasChildren(); i++)",
      "right" : "for (int i = 1; i < depth && n.hasChildren(); i++)",
      "info" : "ForStatement[15140-15231]:ForStatement[15140-15231]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15191-15231]:Block[15191-15231]"
    }, {
      "left" : "n = n.getFirstChild();",
      "right" : "n = n.getFirstChild();",
      "info" : "ExpressionStatement[15201-15223]:ExpressionStatement[15201-15223]"
    }, {
      "left" : "if (n.hasChildren())",
      "right" : "if (n.hasChildren())",
      "info" : "IfStatement[15238-15335]:IfStatement[15238-15335]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15259-15335]:Block[15259-15335]"
    }, {
      "left" : "flattenNameRef(alias, n.getFirstChild(), n, originalName);",
      "right" : "flattenNameRef(alias, n.getFirstChild(), n, originalName);",
      "info" : "ExpressionStatement[15269-15327]:ExpressionStatement[15269-15327]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[15649-15656]:Modifier[15649-15656]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[15657-15661]:PrimitiveType[15657-15661]"
    }, {
      "left" : "flattenNameRef",
      "right" : "flattenNameRef",
      "info" : "SimpleName[15662-15676]:SimpleName[15662-15676]"
    }, {
      "left" : "String alias",
      "right" : "String alias",
      "info" : "SingleVariableDeclaration[15677-15689]:SingleVariableDeclaration[15677-15689]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[15691-15697]:SingleVariableDeclaration[15691-15697]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[15699-15710]:SingleVariableDeclaration[15699-15710]"
    }, {
      "left" : "String originalName",
      "right" : "String originalName",
      "info" : "SingleVariableDeclaration[15718-15737]:SingleVariableDeclaration[15718-15737]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15739-16112]:Block[15739-16112]"
    }, {
      "left" : "Node ref = NodeUtil.newName(\n        compiler.getCodingConvention(), alias, n, originalName);",
      "right" : "Node ref = NodeUtil.newName(\n        compiler.getCodingConvention(), alias, n, originalName);",
      "info" : "VariableDeclarationStatement[15892-15985]:VariableDeclarationStatement[15892-15985]"
    }, {
      "left" : "NodeUtil.copyNameAnnotations(n.getLastChild(), ref);",
      "right" : "NodeUtil.copyNameAnnotations(n.getLastChild(), ref);",
      "info" : "ExpressionStatement[15990-16042]:ExpressionStatement[15990-16042]"
    }, {
      "left" : "parent.replaceChild(n, ref);",
      "right" : "parent.replaceChild(n, ref);",
      "info" : "ExpressionStatement[16047-16075]:ExpressionStatement[16047-16075]"
    }, {
      "left" : "compiler.reportCodeChange();",
      "right" : "compiler.reportCodeChange();",
      "info" : "ExpressionStatement[16080-16108]:ExpressionStatement[16080-16108]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[16406-16413]:Modifier[16406-16413]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[16414-16418]:PrimitiveType[16414-16418]"
    }, {
      "left" : "collapseDeclarationOfNameAndDescendants",
      "right" : "collapseDeclarationOfNameAndDescendants",
      "info" : "SimpleName[16419-16458]:SimpleName[16419-16458]"
    }, {
      "left" : "Name n",
      "right" : "Name n",
      "info" : "SingleVariableDeclaration[16459-16465]:SingleVariableDeclaration[16459-16465]"
    }, {
      "left" : "String alias",
      "right" : "String alias",
      "info" : "SingleVariableDeclaration[16467-16479]:SingleVariableDeclaration[16467-16479]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16481-17357]:Block[16481-17357]"
    }, {
      "left" : "boolean canCollapseChildNames = n.canCollapseUnannotatedChildNames();",
      "right" : "boolean canCollapseChildNames = n.canCollapseUnannotatedChildNames();",
      "info" : "VariableDeclarationStatement[16487-16556]:VariableDeclarationStatement[16487-16556]"
    }, {
      "left" : "if (n.canCollapse() && canCollapseChildNames)",
      "right" : "if (n.canCollapse() && canCollapseChildNames)",
      "info" : "IfStatement[16637-16741]:IfStatement[16637-16741]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16683-16741]:Block[16683-16741]"
    }, {
      "left" : "updateObjLitOrFunctionDeclaration(n, alias);",
      "right" : "updateObjLitOrFunctionDeclaration(n, alias);",
      "info" : "ExpressionStatement[16691-16735]:ExpressionStatement[16691-16735]"
    }, {
      "left" : "if (n.props != null)",
      "right" : "if (n.props != null)",
      "info" : "IfStatement[16747-17353]:IfStatement[16747-17353]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16768-17353]:Block[16768-17353]"
    }, {
      "left" : "for (Name p : n.props)",
      "right" : "for (Name p : n.props)",
      "info" : "EnhancedForStatement[16776-17347]:EnhancedForStatement[16776-17347]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16799-17347]:Block[16799-17347]"
    }, {
      "left" : "collapseDeclarationOfNameAndDescendants(\n            p, appendPropForAlias(alias, p.name));",
      "right" : "collapseDeclarationOfNameAndDescendants(\n            p, appendPropForAlias(alias, p.name));",
      "info" : "ExpressionStatement[16888-16979]:ExpressionStatement[16888-16979]"
    }, {
      "left" : "if (!p.inExterns && canCollapseChildNames && p.declaration != null &&\n            p.declaration.node != null &&\n            p.declaration.node.getParent() != null &&\n            p.declaration.node.getParent().getType() == Token.ASSIGN)",
      "right" : "if (!p.inExterns && canCollapseChildNames && p.declaration != null &&\n            p.declaration.node != null &&\n            p.declaration.node.getParent() != null &&\n            p.declaration.node.getParent().getType() == Token.ASSIGN)",
      "info" : "IfStatement[16989-17339]:IfStatement[16989-17339]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17225-17339]:Block[17225-17339]"
    }, {
      "left" : "updateSimpleDeclaration(\n              appendPropForAlias(alias, p.name), p, p.declaration);",
      "right" : "updateSimpleDeclaration(\n              appendPropForAlias(alias, p.name), p, p.declaration);",
      "info" : "ExpressionStatement[17237-17329]:ExpressionStatement[17237-17329]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[17876-17883]:Modifier[17876-17883]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[17884-17888]:PrimitiveType[17884-17888]"
    }, {
      "left" : "updateSimpleDeclaration",
      "right" : "updateSimpleDeclaration",
      "info" : "SimpleName[17889-17912]:SimpleName[17889-17912]"
    }, {
      "left" : "String alias",
      "right" : "String alias",
      "info" : "SingleVariableDeclaration[17913-17925]:SingleVariableDeclaration[17913-17925]"
    }, {
      "left" : "Name refName",
      "right" : "Name refName",
      "info" : "SingleVariableDeclaration[17927-17939]:SingleVariableDeclaration[17927-17939]"
    }, {
      "left" : "Ref ref",
      "right" : "Ref ref",
      "info" : "SingleVariableDeclaration[17941-17948]:SingleVariableDeclaration[17941-17948]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17950-19813]:Block[17950-19952]"
    }, {
      "left" : "Node rvalue = ref.node.getNext();",
      "right" : "Node rvalue = ref.node.getNext();",
      "info" : "VariableDeclarationStatement[17956-17989]:VariableDeclarationStatement[17956-17989]"
    }, {
      "left" : "Node parent = ref.node.getParent();",
      "right" : "Node parent = ref.node.getParent();",
      "info" : "VariableDeclarationStatement[17994-18029]:VariableDeclarationStatement[17994-18029]"
    }, {
      "left" : "Node gramps = parent.getParent();",
      "right" : "Node gramps = parent.getParent();",
      "info" : "VariableDeclarationStatement[18034-18067]:VariableDeclarationStatement[18034-18067]"
    }, {
      "left" : "Node greatGramps = gramps.getParent();",
      "right" : "Node greatGramps = gramps.getParent();",
      "info" : "VariableDeclarationStatement[18072-18110]:VariableDeclarationStatement[18072-18110]"
    }, {
      "left" : "Node greatGreatGramps = greatGramps.getParent();",
      "right" : "Node greatGreatGramps = greatGramps.getParent();",
      "info" : "VariableDeclarationStatement[18115-18163]:VariableDeclarationStatement[18115-18163]"
    }, {
      "left" : "Node nameNode = NodeUtil.newName(\n        compiler.getCodingConvention(), alias, gramps.getFirstChild(),\n        refName.fullName());",
      "right" : "Node nameNode = NodeUtil.newName(\n        compiler.getCodingConvention(), alias, gramps.getFirstChild(),\n        refName.fullName());",
      "info" : "VariableDeclarationStatement[18204-18337]:VariableDeclarationStatement[18343-18476]"
    }, {
      "left" : "NodeUtil.copyNameAnnotations(ref.node.getLastChild(), nameNode);",
      "right" : "NodeUtil.copyNameAnnotations(ref.node.getLastChild(), nameNode);",
      "info" : "ExpressionStatement[18342-18406]:ExpressionStatement[18481-18545]"
    }, {
      "left" : "if (gramps.getType() == Token.EXPR_RESULT)",
      "right" : "if (gramps.getType() == Token.EXPR_RESULT)",
      "info" : "IfStatement[18412-19775]:IfStatement[18551-19914]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18455-18984]:Block[18594-19123]"
    }, {
      "left" : "parent.removeChild(rvalue);",
      "right" : "parent.removeChild(rvalue);",
      "info" : "ExpressionStatement[18809-18836]:ExpressionStatement[18948-18975]"
    }, {
      "left" : "nameNode.addChildToFront(rvalue);",
      "right" : "nameNode.addChildToFront(rvalue);",
      "info" : "ExpressionStatement[18843-18876]:ExpressionStatement[18982-19015]"
    }, {
      "left" : "Node varNode = new Node(Token.VAR, nameNode);",
      "right" : "Node varNode = new Node(Token.VAR, nameNode);",
      "info" : "VariableDeclarationStatement[18884-18929]:VariableDeclarationStatement[19023-19068]"
    }, {
      "left" : "greatGramps.replaceChild(gramps, varNode);",
      "right" : "greatGramps.replaceChild(gramps, varNode);",
      "info" : "ExpressionStatement[18936-18978]:ExpressionStatement[19075-19117]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18990-19775]:Block[19129-19914]"
    }, {
      "left" : "Preconditions.checkNotNull(ref.getTwin());",
      "right" : "Preconditions.checkNotNull(ref.getTwin());",
      "info" : "ExpressionStatement[19042-19084]:ExpressionStatement[19181-19223]"
    }, {
      "left" : "Node current = gramps;",
      "right" : "Node current = gramps;",
      "info" : "VariableDeclarationStatement[19201-19223]:VariableDeclarationStatement[19340-19362]"
    }, {
      "left" : "Node currentParent = gramps.getParent();",
      "right" : "Node currentParent = gramps.getParent();",
      "info" : "VariableDeclarationStatement[19230-19270]:VariableDeclarationStatement[19369-19409]"
    }, {
      "left" : "for (; currentParent.getType() != Token.SCRIPT &&\n             currentParent.getType() != Token.BLOCK;\n           current = currentParent,\n           currentParent = currentParent.getParent())",
      "right" : "for (; currentParent.getType() != Token.SCRIPT &&\n             currentParent.getType() != Token.BLOCK;\n           current = currentParent,\n           currentParent = currentParent.getParent())",
      "info" : "ForStatement[19277-19472]:ForStatement[19416-19611]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19470-19472]:Block[19609-19611]"
    }, {
      "left" : "Node stubVar = new Node(Token.VAR, nameNode.cloneTree())\n          .copyInformationFrom(nameNode);",
      "right" : "Node stubVar = new Node(Token.VAR, nameNode.cloneTree())\n          .copyInformationFrom(nameNode);",
      "info" : "VariableDeclarationStatement[19569-19667]:VariableDeclarationStatement[19708-19806]"
    }, {
      "left" : "currentParent.addChildBefore(stubVar, current);",
      "right" : "currentParent.addChildBefore(stubVar, current);",
      "info" : "ExpressionStatement[19674-19721]:ExpressionStatement[19813-19860]"
    }, {
      "left" : "parent.replaceChild(ref.node, nameNode);",
      "right" : "parent.replaceChild(ref.node, nameNode);",
      "info" : "ExpressionStatement[19729-19769]:ExpressionStatement[19868-19908]"
    }, {
      "left" : "compiler.reportCodeChange();",
      "right" : "compiler.reportCodeChange();",
      "info" : "ExpressionStatement[19781-19809]:ExpressionStatement[19920-19948]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[20353-20360]:Modifier[20492-20499]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[20361-20365]:PrimitiveType[20500-20504]"
    }, {
      "left" : "updateObjLitOrFunctionDeclaration",
      "right" : "updateObjLitOrFunctionDeclaration",
      "info" : "SimpleName[20366-20399]:SimpleName[20505-20538]"
    }, {
      "left" : "Name n",
      "right" : "Name n",
      "info" : "SingleVariableDeclaration[20400-20406]:SingleVariableDeclaration[20539-20545]"
    }, {
      "left" : "String alias",
      "right" : "String alias",
      "info" : "SingleVariableDeclaration[20408-20420]:SingleVariableDeclaration[20547-20559]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20422-20780]:Block[20561-20919]"
    }, {
      "left" : "switch (n.declaration.node.getParent().getType()) {\n      case Token.ASSIGN:\n        updateObjLitOrFunctionDeclarationAtAssignNode(n, alias);\n        break;\n      case Token.VAR:\n        updateObjLitOrFunctionDeclarationAtVarNode(n);\n        break;\n      case Token.FUNCTION:\n        updateFunctionDeclarationAtFunctionNode(n);\n        break;\n    }",
      "right" : "switch (n.declaration.node.getParent().getType()) {\n      case Token.ASSIGN:\n        updateObjLitOrFunctionDeclarationAtAssignNode(n, alias);\n        break;\n      case Token.VAR:\n        updateObjLitOrFunctionDeclarationAtVarNode(n);\n        break;\n      case Token.FUNCTION:\n        updateFunctionDeclarationAtFunctionNode(n);\n        break;\n    }",
      "info" : "SwitchStatement[20428-20776]:SwitchStatement[20567-20915]"
    }, {
      "left" : "case Token.ASSIGN:",
      "right" : "case Token.ASSIGN:",
      "info" : "SwitchCase[20486-20504]:SwitchCase[20625-20643]"
    }, {
      "left" : "updateObjLitOrFunctionDeclarationAtAssignNode(n, alias);",
      "right" : "updateObjLitOrFunctionDeclarationAtAssignNode(n, alias);",
      "info" : "ExpressionStatement[20513-20569]:ExpressionStatement[20652-20708]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[20578-20584]:BreakStatement[20717-20723]"
    }, {
      "left" : "case Token.VAR:",
      "right" : "case Token.VAR:",
      "info" : "SwitchCase[20591-20606]:SwitchCase[20730-20745]"
    }, {
      "left" : "updateObjLitOrFunctionDeclarationAtVarNode(n);",
      "right" : "updateObjLitOrFunctionDeclarationAtVarNode(n);",
      "info" : "ExpressionStatement[20615-20661]:ExpressionStatement[20754-20800]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[20670-20676]:BreakStatement[20809-20815]"
    }, {
      "left" : "case Token.FUNCTION:",
      "right" : "case Token.FUNCTION:",
      "info" : "SwitchCase[20683-20703]:SwitchCase[20822-20842]"
    }, {
      "left" : "updateFunctionDeclarationAtFunctionNode(n);",
      "right" : "updateFunctionDeclarationAtFunctionNode(n);",
      "info" : "ExpressionStatement[20712-20755]:ExpressionStatement[20851-20894]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[20764-20770]:BreakStatement[20903-20909]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[21121-21128]:Modifier[21260-21267]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[21129-21133]:PrimitiveType[21268-21272]"
    }, {
      "left" : "updateObjLitOrFunctionDeclarationAtAssignNode",
      "right" : "updateObjLitOrFunctionDeclarationAtAssignNode",
      "info" : "SimpleName[21134-21179]:SimpleName[21273-21318]"
    }, {
      "left" : "Name n",
      "right" : "Name n",
      "info" : "SingleVariableDeclaration[21187-21193]:SingleVariableDeclaration[21326-21332]"
    }, {
      "left" : "String alias",
      "right" : "String alias",
      "info" : "SingleVariableDeclaration[21195-21207]:SingleVariableDeclaration[21334-21346]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21209-22855]:Block[21348-22994]"
    }, {
      "left" : "Ref ref = n.declaration;",
      "right" : "Ref ref = n.declaration;",
      "info" : "VariableDeclarationStatement[21418-21442]:VariableDeclarationStatement[21557-21581]"
    }, {
      "left" : "Node rvalue = ref.node.getNext();",
      "right" : "Node rvalue = ref.node.getNext();",
      "info" : "VariableDeclarationStatement[21447-21480]:VariableDeclarationStatement[21586-21619]"
    }, {
      "left" : "Node varNode = new Node(Token.VAR);",
      "right" : "Node varNode = new Node(Token.VAR);",
      "info" : "VariableDeclarationStatement[21485-21520]:VariableDeclarationStatement[21624-21659]"
    }, {
      "left" : "Node varParent = ref.node.getAncestor(3);",
      "right" : "Node varParent = ref.node.getAncestor(3);",
      "info" : "VariableDeclarationStatement[21525-21566]:VariableDeclarationStatement[21664-21705]"
    }, {
      "left" : "Node gramps = ref.node.getAncestor(2);",
      "right" : "Node gramps = ref.node.getAncestor(2);",
      "info" : "VariableDeclarationStatement[21571-21609]:VariableDeclarationStatement[21710-21748]"
    }, {
      "left" : "boolean isObjLit = rvalue.getType() == Token.OBJECTLIT;",
      "right" : "boolean isObjLit = rvalue.getType() == Token.OBJECTLIT;",
      "info" : "VariableDeclarationStatement[21614-21669]:VariableDeclarationStatement[21753-21808]"
    }, {
      "left" : "if (isObjLit && n.canEliminate())",
      "right" : "if (isObjLit && n.canEliminate())",
      "info" : "IfStatement[21675-22515]:IfStatement[21814-22654]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21709-21837]:Block[21848-21976]"
    }, {
      "left" : "varParent.replaceChild(gramps, varNode);",
      "right" : "varParent.replaceChild(gramps, varNode);",
      "info" : "ExpressionStatement[21767-21807]:ExpressionStatement[21906-21946]"
    }, {
      "left" : "ref.node = null;",
      "right" : "ref.node = null;",
      "info" : "ExpressionStatement[21814-21830]:ExpressionStatement[21953-21969]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21843-22515]:Block[21982-22654]"
    }, {
      "left" : "if (rvalue.getType() == Token.FUNCTION)",
      "right" : "if (rvalue.getType() == Token.FUNCTION)",
      "info" : "IfStatement[21851-21959]:IfStatement[21990-22098]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21891-21959]:Block[22030-22098]"
    }, {
      "left" : "checkForHosedThisReferences(rvalue, n.docInfo, n);",
      "right" : "checkForHosedThisReferences(rvalue, n.docInfo, n);",
      "info" : "ExpressionStatement[21901-21951]:ExpressionStatement[22040-22090]"
    }, {
      "left" : "ref.node.getParent().removeChild(rvalue);",
      "right" : "ref.node.getParent().removeChild(rvalue);",
      "info" : "ExpressionStatement[21967-22008]:ExpressionStatement[22106-22147]"
    }, {
      "left" : "Node nameNode = NodeUtil.newName(\n          compiler.getCodingConvention(),\n          alias, ref.node.getAncestor(2), n.fullName());",
      "right" : "Node nameNode = NodeUtil.newName(\n          compiler.getCodingConvention(),\n          alias, ref.node.getAncestor(2), n.fullName());",
      "info" : "VariableDeclarationStatement[22016-22148]:VariableDeclarationStatement[22155-22287]"
    }, {
      "left" : "if (ref.node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))",
      "right" : "if (ref.node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME))",
      "info" : "IfStatement[22156-22294]:IfStatement[22295-22433]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22223-22294]:Block[22362-22433]"
    }, {
      "left" : "nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);",
      "right" : "nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);",
      "info" : "ExpressionStatement[22233-22286]:ExpressionStatement[22372-22425]"
    }, {
      "left" : "varNode.addChildToBack(nameNode);",
      "right" : "varNode.addChildToBack(nameNode);",
      "info" : "ExpressionStatement[22302-22335]:ExpressionStatement[22441-22474]"
    }, {
      "left" : "nameNode.addChildToFront(rvalue);",
      "right" : "nameNode.addChildToFront(rvalue);",
      "info" : "ExpressionStatement[22342-22375]:ExpressionStatement[22481-22514]"
    }, {
      "left" : "varParent.replaceChild(gramps, varNode);",
      "right" : "varParent.replaceChild(gramps, varNode);",
      "info" : "ExpressionStatement[22382-22422]:ExpressionStatement[22521-22561]"
    }, {
      "left" : "ref.node = nameNode;",
      "right" : "ref.node = nameNode;",
      "info" : "ExpressionStatement[22489-22509]:ExpressionStatement[22628-22648]"
    }, {
      "left" : "if (isObjLit)",
      "right" : "if (isObjLit)",
      "info" : "IfStatement[22521-22670]:IfStatement[22660-22809]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22535-22670]:Block[22674-22809]"
    }, {
      "left" : "declareVarsForObjLitValues(\n          n, alias, rvalue,\n          varNode, varParent.getChildBefore(varNode), varParent);",
      "right" : "declareVarsForObjLitValues(\n          n, alias, rvalue,\n          varNode, varParent.getChildBefore(varNode), varParent);",
      "info" : "ExpressionStatement[22543-22664]:ExpressionStatement[22682-22803]"
    }, {
      "left" : "addStubsForUndeclaredProperties(n, alias, varParent, varNode);",
      "right" : "addStubsForUndeclaredProperties(n, alias, varParent, varNode);",
      "info" : "ExpressionStatement[22676-22738]:ExpressionStatement[22815-22877]"
    }, {
      "left" : "if (!varNode.hasChildren())",
      "right" : "if (!varNode.hasChildren())",
      "info" : "IfStatement[22744-22817]:IfStatement[22883-22956]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22772-22817]:Block[22911-22956]"
    }, {
      "left" : "varParent.removeChild(varNode);",
      "right" : "varParent.removeChild(varNode);",
      "info" : "ExpressionStatement[22780-22811]:ExpressionStatement[22919-22950]"
    }, {
      "left" : "compiler.reportCodeChange();",
      "right" : "compiler.reportCodeChange();",
      "info" : "ExpressionStatement[22823-22851]:ExpressionStatement[22962-22990]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[23007-23014]:Modifier[23146-23153]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[23015-23019]:PrimitiveType[23154-23158]"
    }, {
      "left" : "checkForHosedThisReferences",
      "right" : "checkForHosedThisReferences",
      "info" : "SimpleName[23020-23047]:SimpleName[23159-23186]"
    }, {
      "left" : "Node function",
      "right" : "Node function",
      "info" : "SingleVariableDeclaration[23048-23061]:SingleVariableDeclaration[23187-23200]"
    }, {
      "left" : "JSDocInfo docInfo",
      "right" : "JSDocInfo docInfo",
      "info" : "SingleVariableDeclaration[23063-23080]:SingleVariableDeclaration[23202-23219]"
    }, {
      "left" : "final Name name",
      "right" : "final Name name",
      "info" : "SingleVariableDeclaration[23088-23103]:SingleVariableDeclaration[23227-23242]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23105-23779]:Block[23244-23918]"
    }, {
      "left" : "if (docInfo == null ||\n        (!docInfo.isConstructor() && !docInfo.hasThisType()))",
      "right" : "if (docInfo == null ||\n        (!docInfo.isConstructor() && !docInfo.hasThisType()))",
      "info" : "IfStatement[23248-23775]:IfStatement[23387-23914]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23333-23775]:Block[23472-23914]"
    }, {
      "left" : "NodeTraversal.traverse(compiler, function.getLastChild(),\n          new NodeTraversal.AbstractShallowCallback() {\n            public void visit(NodeTraversal t, Node n, Node parent) {\n              if (n.getType() == Token.THIS) {\n                compiler.report(\n                    JSError.make(name.declaration.sourceName, n,\n                        UNSAFE_THIS, name.fullName()));\n              }\n            }\n          });",
      "right" : "NodeTraversal.traverse(compiler, function.getLastChild(),\n          new NodeTraversal.AbstractShallowCallback() {\n            public void visit(NodeTraversal t, Node n, Node parent) {\n              if (n.getType() == Token.THIS) {\n                compiler.report(\n                    JSError.make(name.declaration.sourceName, n,\n                        UNSAFE_THIS, name.fullName()));\n              }\n            }\n          });",
      "info" : "ExpressionStatement[23341-23769]:ExpressionStatement[23480-23908]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[23467-23473]:Modifier[23606-23612]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[23474-23478]:PrimitiveType[23613-23617]"
    }, {
      "left" : "visit",
      "right" : "visit",
      "info" : "SimpleName[23479-23484]:SimpleName[23618-23623]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[23485-23500]:SingleVariableDeclaration[23624-23639]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[23502-23508]:SingleVariableDeclaration[23641-23647]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[23510-23521]:SingleVariableDeclaration[23649-23660]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23523-23755]:Block[23662-23894]"
    }, {
      "left" : "if (n.getType() == Token.THIS)",
      "right" : "if (n.getType() == Token.THIS)",
      "info" : "IfStatement[23539-23741]:IfStatement[23678-23880]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23570-23741]:Block[23709-23880]"
    }, {
      "left" : "compiler.report(\n                    JSError.make(name.declaration.sourceName, n,\n                        UNSAFE_THIS, name.fullName()));",
      "right" : "compiler.report(\n                    JSError.make(name.declaration.sourceName, n,\n                        UNSAFE_THIS, name.fullName()));",
      "info" : "ExpressionStatement[23588-23725]:ExpressionStatement[23727-23864]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[24036-24043]:Modifier[24175-24182]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[24044-24048]:PrimitiveType[24183-24187]"
    }, {
      "left" : "updateObjLitOrFunctionDeclarationAtVarNode",
      "right" : "updateObjLitOrFunctionDeclarationAtVarNode",
      "info" : "SimpleName[24049-24091]:SimpleName[24188-24230]"
    }, {
      "left" : "Name n",
      "right" : "Name n",
      "info" : "SingleVariableDeclaration[24092-24098]:SingleVariableDeclaration[24231-24237]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24100-24997]:Block[24239-25136]"
    }, {
      "left" : "Ref ref = n.declaration;",
      "right" : "Ref ref = n.declaration;",
      "info" : "VariableDeclarationStatement[24106-24130]:VariableDeclarationStatement[24245-24269]"
    }, {
      "left" : "String name = ref.node.getString();",
      "right" : "String name = ref.node.getString();",
      "info" : "VariableDeclarationStatement[24135-24170]:VariableDeclarationStatement[24274-24309]"
    }, {
      "left" : "Node rvalue = ref.node.getFirstChild();",
      "right" : "Node rvalue = ref.node.getFirstChild();",
      "info" : "VariableDeclarationStatement[24175-24214]:VariableDeclarationStatement[24314-24353]"
    }, {
      "left" : "Node varNode = ref.node.getParent();",
      "right" : "Node varNode = ref.node.getParent();",
      "info" : "VariableDeclarationStatement[24219-24255]:VariableDeclarationStatement[24358-24394]"
    }, {
      "left" : "Node gramps = varNode.getParent();",
      "right" : "Node gramps = varNode.getParent();",
      "info" : "VariableDeclarationStatement[24260-24294]:VariableDeclarationStatement[24399-24433]"
    }, {
      "left" : "boolean isObjLit = rvalue.getType() == Token.OBJECTLIT;",
      "right" : "boolean isObjLit = rvalue.getType() == Token.OBJECTLIT;",
      "info" : "VariableDeclarationStatement[24300-24355]:VariableDeclarationStatement[24439-24494]"
    }, {
      "left" : "int numChanges = 0;",
      "right" : "int numChanges = 0;",
      "info" : "VariableDeclarationStatement[24360-24379]:VariableDeclarationStatement[24499-24518]"
    }, {
      "left" : "if (isObjLit)",
      "right" : "if (isObjLit)",
      "info" : "IfStatement[24385-24541]:IfStatement[24524-24680]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24399-24541]:Block[24538-24680]"
    }, {
      "left" : "numChanges += declareVarsForObjLitValues(\n          n, name, rvalue, varNode, gramps.getChildBefore(varNode),\n          gramps);",
      "right" : "numChanges += declareVarsForObjLitValues(\n          n, name, rvalue, varNode, gramps.getChildBefore(varNode),\n          gramps);",
      "info" : "ExpressionStatement[24407-24535]:ExpressionStatement[24546-24674]"
    }, {
      "left" : "numChanges += addStubsForUndeclaredProperties(n, name, gramps, varNode);",
      "right" : "numChanges += addStubsForUndeclaredProperties(n, name, gramps, varNode);",
      "info" : "ExpressionStatement[24547-24619]:ExpressionStatement[24686-24758]"
    }, {
      "left" : "if (isObjLit && n.canEliminate())",
      "right" : "if (isObjLit && n.canEliminate())",
      "info" : "IfStatement[24625-24925]:IfStatement[24764-25064]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24659-24925]:Block[24798-25064]"
    }, {
      "left" : "varNode.removeChild(ref.node);",
      "right" : "varNode.removeChild(ref.node);",
      "info" : "ExpressionStatement[24667-24697]:ExpressionStatement[24806-24836]"
    }, {
      "left" : "if (!varNode.hasChildren())",
      "right" : "if (!varNode.hasChildren())",
      "info" : "IfStatement[24704-24778]:IfStatement[24843-24917]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24732-24778]:Block[24871-24917]"
    }, {
      "left" : "gramps.removeChild(varNode);",
      "right" : "gramps.removeChild(varNode);",
      "info" : "ExpressionStatement[24742-24770]:ExpressionStatement[24881-24909]"
    }, {
      "left" : "numChanges++;",
      "right" : "numChanges++;",
      "info" : "ExpressionStatement[24785-24798]:ExpressionStatement[24924-24937]"
    }, {
      "left" : "ref.node = null;",
      "right" : "ref.node = null;",
      "info" : "ExpressionStatement[24903-24919]:ExpressionStatement[25042-25058]"
    }, {
      "left" : "if (numChanges > 0)",
      "right" : "if (numChanges > 0)",
      "info" : "IfStatement[24931-24993]:IfStatement[25070-25132]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24951-24993]:Block[25090-25132]"
    }, {
      "left" : "compiler.reportCodeChange();",
      "right" : "compiler.reportCodeChange();",
      "info" : "ExpressionStatement[24959-24987]:ExpressionStatement[25098-25126]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[25259-25266]:Modifier[25398-25405]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[25267-25271]:PrimitiveType[25406-25410]"
    }, {
      "left" : "updateFunctionDeclarationAtFunctionNode",
      "right" : "updateFunctionDeclarationAtFunctionNode",
      "info" : "SimpleName[25272-25311]:SimpleName[25411-25450]"
    }, {
      "left" : "Name n",
      "right" : "Name n",
      "info" : "SingleVariableDeclaration[25312-25318]:SingleVariableDeclaration[25451-25457]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25320-25500]:Block[25459-25639]"
    }, {
      "left" : "Ref ref = n.declaration;",
      "right" : "Ref ref = n.declaration;",
      "info" : "VariableDeclarationStatement[25326-25350]:VariableDeclarationStatement[25465-25489]"
    }, {
      "left" : "String fnName = ref.node.getString();",
      "right" : "String fnName = ref.node.getString();",
      "info" : "VariableDeclarationStatement[25355-25392]:VariableDeclarationStatement[25494-25531]"
    }, {
      "left" : "addStubsForUndeclaredProperties(\n        n, fnName, ref.node.getAncestor(2), ref.node.getParent());",
      "right" : "addStubsForUndeclaredProperties(\n        n, fnName, ref.node.getAncestor(2), ref.node.getParent());",
      "info" : "ExpressionStatement[25397-25496]:ExpressionStatement[25536-25635]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[26094-26101]:Modifier[26233-26240]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[26102-26105]:PrimitiveType[26241-26244]"
    }, {
      "left" : "declareVarsForObjLitValues",
      "right" : "declareVarsForObjLitValues",
      "info" : "SimpleName[26106-26132]:SimpleName[26245-26271]"
    }, {
      "left" : "Name objlitName",
      "right" : "Name objlitName",
      "info" : "SingleVariableDeclaration[26140-26155]:SingleVariableDeclaration[26279-26294]"
    }, {
      "left" : "String alias",
      "right" : "String alias",
      "info" : "SingleVariableDeclaration[26157-26169]:SingleVariableDeclaration[26296-26308]"
    }, {
      "left" : "Node objlit",
      "right" : "Node objlit",
      "info" : "SingleVariableDeclaration[26171-26182]:SingleVariableDeclaration[26310-26321]"
    }, {
      "left" : "Node varNode",
      "right" : "Node varNode",
      "info" : "SingleVariableDeclaration[26184-26196]:SingleVariableDeclaration[26323-26335]"
    }, {
      "left" : "Node nameToAddAfter",
      "right" : "Node nameToAddAfter",
      "info" : "SingleVariableDeclaration[26204-26223]:SingleVariableDeclaration[26343-26362]"
    }, {
      "left" : "Node varParent",
      "right" : "Node varParent",
      "info" : "SingleVariableDeclaration[26225-26239]:SingleVariableDeclaration[26364-26378]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26241-29047]:Block[26380-29186]"
    }, {
      "left" : "int numVars = 0;",
      "right" : "int numVars = 0;",
      "info" : "VariableDeclarationStatement[26247-26263]:VariableDeclarationStatement[26386-26402]"
    }, {
      "left" : "int arbitraryNameCounter = 0;",
      "right" : "int arbitraryNameCounter = 0;",
      "info" : "VariableDeclarationStatement[26268-26297]:VariableDeclarationStatement[26407-26436]"
    }, {
      "left" : "boolean discardKeys = !objlitName.shouldKeepKeys();",
      "right" : "boolean discardKeys = !objlitName.shouldKeepKeys();",
      "info" : "VariableDeclarationStatement[26302-26353]:VariableDeclarationStatement[26441-26492]"
    }, {
      "left" : "for (Node key = objlit.getFirstChild(), nextKey; key != null;\n         key = nextKey)",
      "right" : "for (Node key = objlit.getFirstChild(), nextKey; key != null;\n         key = nextKey)",
      "info" : "ForStatement[26359-29023]:ForStatement[26498-29162]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26445-29023]:Block[26584-29162]"
    }, {
      "left" : "Node value = key.getFirstChild();",
      "right" : "Node value = key.getFirstChild();",
      "info" : "VariableDeclarationStatement[26453-26486]:VariableDeclarationStatement[26592-26625]"
    }, {
      "left" : "nextKey = key.getNext();",
      "right" : "nextKey = key.getNext();",
      "info" : "ExpressionStatement[26493-26517]:ExpressionStatement[26632-26656]"
    }, {
      "left" : "boolean isJsIdentifier = key.getType() != Token.NUMBER &&\n                               TokenStream.isJSIdentifier(key.getString());",
      "right" : "boolean isJsIdentifier = key.getType() != Token.NUMBER &&\n                               TokenStream.isJSIdentifier(key.getString());",
      "info" : "VariableDeclarationStatement[26893-27026]:VariableDeclarationStatement[27032-27165]"
    }, {
      "left" : "String propName = isJsIdentifier ?\n          key.getString() : String.valueOf(++arbitraryNameCounter);",
      "right" : "String propName = isJsIdentifier ?\n          key.getString() : String.valueOf(++arbitraryNameCounter);",
      "info" : "VariableDeclarationStatement[27033-27135]:VariableDeclarationStatement[27172-27274]"
    }, {
      "left" : "String propAlias = appendPropForAlias(alias, propName);",
      "right" : "String propAlias = appendPropForAlias(alias, propName);",
      "info" : "VariableDeclarationStatement[27142-27197]:VariableDeclarationStatement[27281-27336]"
    }, {
      "left" : "String qName = objlitName.fullName() + '.' + propName;",
      "right" : "String qName = objlitName.fullName() + '.' + propName;",
      "info" : "VariableDeclarationStatement[27204-27258]:VariableDeclarationStatement[27343-27397]"
    }, {
      "left" : "Node refNode = null;",
      "right" : "Node refNode = null;",
      "info" : "VariableDeclarationStatement[27266-27286]:VariableDeclarationStatement[27405-27425]"
    }, {
      "left" : "if (discardKeys)",
      "right" : "if (discardKeys)",
      "info" : "IfStatement[27293-27680]:IfStatement[27432-27819]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27310-27386]:Block[27449-27525]"
    }, {
      "left" : "objlit.removeChild(key);",
      "right" : "objlit.removeChild(key);",
      "info" : "ExpressionStatement[27320-27344]:ExpressionStatement[27459-27483]"
    }, {
      "left" : "value.detachFromParent();",
      "right" : "value.detachFromParent();",
      "info" : "ExpressionStatement[27353-27378]:ExpressionStatement[27492-27517]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27392-27680]:Block[27531-27819]"
    }, {
      "left" : "refNode = Node.newString(Token.NAME, propAlias);",
      "right" : "refNode = Node.newString(Token.NAME, propAlias);",
      "info" : "ExpressionStatement[27451-27499]:ExpressionStatement[27590-27638]"
    }, {
      "left" : "if (key.getBooleanProp(Node.IS_CONSTANT_NAME))",
      "right" : "if (key.getBooleanProp(Node.IS_CONSTANT_NAME))",
      "info" : "IfStatement[27508-27629]:IfStatement[27647-27768]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27555-27629]:Block[27694-27768]"
    }, {
      "left" : "refNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);",
      "right" : "refNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);",
      "info" : "ExpressionStatement[27567-27619]:ExpressionStatement[27706-27758]"
    }, {
      "left" : "key.replaceChild(value, refNode);",
      "right" : "key.replaceChild(value, refNode);",
      "info" : "ExpressionStatement[27639-27672]:ExpressionStatement[27778-27811]"
    }, {
      "left" : "Node nameNode = Node.newString(Token.NAME, propAlias);",
      "right" : "Node nameNode = Node.newString(Token.NAME, propAlias);",
      "info" : "VariableDeclarationStatement[27763-27817]:VariableDeclarationStatement[27902-27956]"
    }, {
      "left" : "nameNode.addChildToFront(value);",
      "right" : "nameNode.addChildToFront(value);",
      "info" : "ExpressionStatement[27824-27856]:ExpressionStatement[27963-27995]"
    }, {
      "left" : "if (key.getBooleanProp(Node.IS_CONSTANT_NAME))",
      "right" : "if (key.getBooleanProp(Node.IS_CONSTANT_NAME))",
      "info" : "IfStatement[27863-27981]:IfStatement[28002-28120]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27910-27981]:Block[28049-28120]"
    }, {
      "left" : "nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);",
      "right" : "nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);",
      "info" : "ExpressionStatement[27920-27973]:ExpressionStatement[28059-28112]"
    }, {
      "left" : "Node newVar = new Node(Token.VAR, nameNode)\n          .copyInformationFromForTree(key);",
      "right" : "Node newVar = new Node(Token.VAR, nameNode)\n          .copyInformationFromForTree(key);",
      "info" : "VariableDeclarationStatement[27988-28075]:VariableDeclarationStatement[28127-28214]"
    }, {
      "left" : "if (nameToAddAfter != null)",
      "right" : "if (nameToAddAfter != null)",
      "info" : "IfStatement[28082-28242]:IfStatement[28221-28381]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28110-28176]:Block[28249-28315]"
    }, {
      "left" : "varParent.addChildAfter(newVar, nameToAddAfter);",
      "right" : "varParent.addChildAfter(newVar, nameToAddAfter);",
      "info" : "ExpressionStatement[28120-28168]:ExpressionStatement[28259-28307]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28182-28242]:Block[28321-28381]"
    }, {
      "left" : "varParent.addChildBefore(newVar, varNode);",
      "right" : "varParent.addChildBefore(newVar, varNode);",
      "info" : "ExpressionStatement[28192-28234]:ExpressionStatement[28331-28373]"
    }, {
      "left" : "compiler.reportCodeChange();",
      "right" : "compiler.reportCodeChange();",
      "info" : "ExpressionStatement[28249-28277]:ExpressionStatement[28388-28416]"
    }, {
      "left" : "nameToAddAfter = newVar;",
      "right" : "nameToAddAfter = newVar;",
      "info" : "ExpressionStatement[28284-28308]:ExpressionStatement[28423-28447]"
    }, {
      "left" : "if (isJsIdentifier)",
      "right" : "if (isJsIdentifier)",
      "info" : "IfStatement[28316-28999]:IfStatement[28455-29138]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28336-28999]:Block[28475-29138]"
    }, {
      "left" : "Name p = nameMap.get(qName);",
      "right" : "Name p = nameMap.get(qName);",
      "info" : "VariableDeclarationStatement[28538-28566]:VariableDeclarationStatement[28677-28705]"
    }, {
      "left" : "if (p != null)",
      "right" : "if (p != null)",
      "info" : "IfStatement[28575-28991]:IfStatement[28714-29130]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28590-28991]:Block[28729-29130]"
    }, {
      "left" : "if (!discardKeys)",
      "right" : "if (!discardKeys)",
      "info" : "IfStatement[28602-28802]:IfStatement[28741-28941]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28620-28802]:Block[28759-28941]"
    }, {
      "left" : "Ref newAlias =\n                p.declaration.cloneAndReclassify(Ref.Type.ALIASING_GET);",
      "right" : "Ref newAlias =\n                p.declaration.cloneAndReclassify(Ref.Type.ALIASING_GET);",
      "info" : "VariableDeclarationStatement[28634-28721]:VariableDeclarationStatement[28773-28860]"
    }, {
      "left" : "newAlias.node = refNode;",
      "right" : "newAlias.node = refNode;",
      "info" : "ExpressionStatement[28734-28758]:ExpressionStatement[28873-28897]"
    }, {
      "left" : "p.addRef(newAlias);",
      "right" : "p.addRef(newAlias);",
      "info" : "ExpressionStatement[28771-28790]:ExpressionStatement[28910-28929]"
    }, {
      "left" : "p.declaration.node = nameNode;",
      "right" : "p.declaration.node = nameNode;",
      "info" : "ExpressionStatement[28814-28844]:ExpressionStatement[28953-28983]"
    }, {
      "left" : "if (value.getType() == Token.FUNCTION)",
      "right" : "if (value.getType() == Token.FUNCTION)",
      "info" : "IfStatement[28856-28981]:IfStatement[28995-29120]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28895-28981]:Block[29034-29120]"
    }, {
      "left" : "checkForHosedThisReferences(value, value.getJSDocInfo(), p);",
      "right" : "checkForHosedThisReferences(value, value.getJSDocInfo(), p);",
      "info" : "ExpressionStatement[28909-28969]:ExpressionStatement[29048-29108]"
    }, {
      "left" : "numVars++;",
      "right" : "numVars++;",
      "info" : "ExpressionStatement[29007-29017]:ExpressionStatement[29146-29156]"
    }, {
      "left" : "return numVars;",
      "right" : "return numVars;",
      "info" : "ReturnStatement[29028-29043]:ReturnStatement[29167-29182]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[29625-29632]:Modifier[29764-29771]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[29633-29636]:PrimitiveType[29772-29775]"
    }, {
      "left" : "addStubsForUndeclaredProperties",
      "right" : "addStubsForUndeclaredProperties",
      "info" : "SimpleName[29637-29668]:SimpleName[29776-29807]"
    }, {
      "left" : "Name n",
      "right" : "Name n",
      "info" : "SingleVariableDeclaration[29676-29682]:SingleVariableDeclaration[29815-29821]"
    }, {
      "left" : "String alias",
      "right" : "String alias",
      "info" : "SingleVariableDeclaration[29684-29696]:SingleVariableDeclaration[29823-29835]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[29698-29709]:SingleVariableDeclaration[29837-29848]"
    }, {
      "left" : "Node addAfter",
      "right" : "Node addAfter",
      "info" : "SingleVariableDeclaration[29711-29724]:SingleVariableDeclaration[29850-29863]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29726-30714]:Block[29865-30853]"
    }, {
      "left" : "Preconditions.checkArgument(NodeUtil.isStatementBlock(parent));",
      "right" : "Preconditions.checkArgument(NodeUtil.isStatementBlock(parent));",
      "info" : "ExpressionStatement[29732-29795]:ExpressionStatement[29871-29934]"
    }, {
      "left" : "Preconditions.checkNotNull(addAfter);",
      "right" : "Preconditions.checkNotNull(addAfter);",
      "info" : "ExpressionStatement[29800-29837]:ExpressionStatement[29939-29976]"
    }, {
      "left" : "int numStubs = 0;",
      "right" : "int numStubs = 0;",
      "info" : "VariableDeclarationStatement[29842-29859]:VariableDeclarationStatement[29981-29998]"
    }, {
      "left" : "if (n.props != null)",
      "right" : "if (n.props != null)",
      "info" : "IfStatement[29864-30689]:IfStatement[30003-30828]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29885-30689]:Block[30024-30828]"
    }, {
      "left" : "for (Name p : n.props)",
      "right" : "for (Name p : n.props)",
      "info" : "EnhancedForStatement[29893-30683]:EnhancedForStatement[30032-30822]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29916-30683]:Block[30055-30822]"
    }, {
      "left" : "if (p.needsToBeStubbed())",
      "right" : "if (p.needsToBeStubbed())",
      "info" : "IfStatement[29926-30675]:IfStatement[30065-30814]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29952-30675]:Block[30091-30814]"
    }, {
      "left" : "String propAlias = appendPropForAlias(alias, p.name);",
      "right" : "String propAlias = appendPropForAlias(alias, p.name);",
      "info" : "VariableDeclarationStatement[29964-30017]:VariableDeclarationStatement[30103-30156]"
    }, {
      "left" : "Node nameNode = Node.newString(Token.NAME, propAlias);",
      "right" : "Node nameNode = Node.newString(Token.NAME, propAlias);",
      "info" : "VariableDeclarationStatement[30028-30082]:VariableDeclarationStatement[30167-30221]"
    }, {
      "left" : "Node newVar = new Node(Token.VAR, nameNode)\n              .copyInformationFromForTree(addAfter);",
      "right" : "Node newVar = new Node(Token.VAR, nameNode)\n              .copyInformationFromForTree(addAfter);",
      "info" : "VariableDeclarationStatement[30093-30189]:VariableDeclarationStatement[30232-30328]"
    }, {
      "left" : "parent.addChildAfter(newVar, addAfter);",
      "right" : "parent.addChildAfter(newVar, addAfter);",
      "info" : "ExpressionStatement[30200-30239]:ExpressionStatement[30339-30378]"
    }, {
      "left" : "addAfter = newVar;",
      "right" : "addAfter = newVar;",
      "info" : "ExpressionStatement[30250-30268]:ExpressionStatement[30389-30407]"
    }, {
      "left" : "numStubs++;",
      "right" : "numStubs++;",
      "info" : "ExpressionStatement[30279-30290]:ExpressionStatement[30418-30429]"
    }, {
      "left" : "compiler.reportCodeChange();",
      "right" : "compiler.reportCodeChange();",
      "info" : "ExpressionStatement[30301-30329]:ExpressionStatement[30440-30468]"
    }, {
      "left" : "if (p.refs.get(0).node.getLastChild().getBooleanProp(\n                Node.IS_CONSTANT_NAME))",
      "right" : "if (p.refs.get(0).node.getLastChild().getBooleanProp(\n                Node.IS_CONSTANT_NAME))",
      "info" : "IfStatement[30492-30665]:IfStatement[30631-30804]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30586-30665]:Block[30725-30804]"
    }, {
      "left" : "nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);",
      "right" : "nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);",
      "info" : "ExpressionStatement[30600-30653]:ExpressionStatement[30739-30792]"
    }, {
      "left" : "return numStubs;",
      "right" : "return numStubs;",
      "info" : "ReturnStatement[30694-30710]:ReturnStatement[30833-30849]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[30718-30725]:Modifier[30857-30864]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[30726-30732]:Modifier[30865-30871]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[30733-30739]:SimpleType[30872-30878]"
    }, {
      "left" : "appendPropForAlias",
      "right" : "appendPropForAlias",
      "info" : "SimpleName[30740-30758]:SimpleName[30879-30897]"
    }, {
      "left" : "String root",
      "right" : "String root",
      "info" : "SingleVariableDeclaration[30759-30770]:SingleVariableDeclaration[30898-30909]"
    }, {
      "left" : "String prop",
      "right" : "String prop",
      "info" : "SingleVariableDeclaration[30772-30783]:SingleVariableDeclaration[30911-30922]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30785-31077]:Block[30924-31216]"
    }, {
      "left" : "if (prop.indexOf('$') != -1)",
      "right" : "if (prop.indexOf('$') != -1)",
      "info" : "IfStatement[30791-31043]:IfStatement[30930-31182]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30820-31043]:Block[30959-31182]"
    }, {
      "left" : "prop = prop.replaceAll(\"\\\\$\", \"\\\\$0\");",
      "right" : "prop = prop.replaceAll(\"\\\\$\", \"\\\\$0\");",
      "info" : "ExpressionStatement[30999-31037]:ExpressionStatement[31138-31176]"
    }, {
      "left" : "return root + '$' + prop;",
      "right" : "return root + '$' + prop;",
      "info" : "ReturnStatement[31048-31073]:ReturnStatement[31187-31212]"
    } ]
  },
  "interFileMappings" : { }
}