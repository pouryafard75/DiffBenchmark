{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "public static final Fraction TWO = new Fraction(2, 1);",
      "right" : "public static final Fraction TWO = new Fraction(2, 1);",
      "info" : "FieldDeclaration[1148-1246]:FieldDeclaration[1148-1246]"
    }, {
      "left" : "public static final Fraction ONE = new Fraction(1, 1);",
      "right" : "public static final Fraction ONE = new Fraction(1, 1);",
      "info" : "FieldDeclaration[1252-1350]:FieldDeclaration[1252-1350]"
    }, {
      "left" : "public static final Fraction ZERO = new Fraction(0, 1);",
      "right" : "public static final Fraction ZERO = new Fraction(0, 1);",
      "info" : "FieldDeclaration[1356-1455]:FieldDeclaration[1356-1455]"
    }, {
      "left" : "public static final Fraction MINUS_ONE = new Fraction(-1, 1);",
      "right" : "public static final Fraction MINUS_ONE = new Fraction(-1, 1);",
      "info" : "FieldDeclaration[1461-1567]:FieldDeclaration[1461-1567]"
    }, {
      "left" : "private static final long serialVersionUID = 3071409609509774764L;",
      "right" : "private static final long serialVersionUID = 3071409609509774764L;",
      "info" : "FieldDeclaration[1573-1682]:FieldDeclaration[1573-1682]"
    }, {
      "left" : "private final int denominator;",
      "right" : "private final int denominator;",
      "info" : "FieldDeclaration[1688-1746]:FieldDeclaration[1688-1746]"
    }, {
      "left" : "private final int numerator;",
      "right" : "private final int numerator;",
      "info" : "FieldDeclaration[1756-1810]:FieldDeclaration[1756-1810]"
    }, {
      "left" : "public Fraction(double value) throws FractionConversionException",
      "right" : "public Fraction(double value) throws FractionConversionException",
      "info" : "MethodDeclaration[1816-2154]:MethodDeclaration[1816-2154]"
    }, {
      "left" : "public Fraction(double value, double epsilon, int maxIterations)\n        throws FractionConversionException",
      "right" : "public Fraction(double value, double epsilon, int maxIterations)\n        throws FractionConversionException",
      "info" : "MethodDeclaration[2160-3020]:MethodDeclaration[2160-3020]"
    }, {
      "left" : "public Fraction(double value, int maxDenominator)\n        throws FractionConversionException",
      "right" : "public Fraction(double value, int maxDenominator)\n        throws FractionConversionException",
      "info" : "MethodDeclaration[3026-3705]:MethodDeclaration[3026-3705]"
    }, {
      "left" : "private Fraction(double value, double epsilon, int maxDenominator, int maxIterations)\n        throws FractionConversionException",
      "right" : "private Fraction(double value, double epsilon, int maxDenominator, int maxIterations)\n        throws FractionConversionException",
      "info" : "MethodDeclaration[3711-6990]:MethodDeclaration[3711-6990]"
    }, {
      "left" : "public Fraction(int num, int den)",
      "right" : "public Fraction(int num, int den)",
      "info" : "MethodDeclaration[7000-8283]:MethodDeclaration[7000-8283]"
    }, {
      "left" : "public Fraction abs()",
      "right" : "public Fraction abs()",
      "info" : "MethodDeclaration[8293-8584]:MethodDeclaration[8293-8584]"
    }, {
      "left" : "public double doubleValue()",
      "right" : "public double doubleValue()",
      "info" : "MethodDeclaration[9038-9318]:MethodDeclaration[9079-9359]"
    }, {
      "left" : "public boolean equals(Object other)",
      "right" : "public boolean equals(Object other)",
      "info" : "MethodDeclaration[9328-10479]:MethodDeclaration[9369-10520]"
    }, {
      "left" : "public float floatValue()",
      "right" : "public float floatValue()",
      "info" : "MethodDeclaration[10489-10746]:MethodDeclaration[10530-10787]"
    }, {
      "left" : "public int getDenominator()",
      "right" : "public int getDenominator()",
      "info" : "MethodDeclaration[10756-10898]:MethodDeclaration[10797-10939]"
    }, {
      "left" : "public int getNumerator()",
      "right" : "public int getNumerator()",
      "info" : "MethodDeclaration[10908-11042]:MethodDeclaration[10949-11083]"
    }, {
      "left" : "public int hashCode()",
      "right" : "public int hashCode()",
      "info" : "MethodDeclaration[11052-11254]:MethodDeclaration[11093-11295]"
    }, {
      "left" : "public int intValue()",
      "right" : "public int intValue()",
      "info" : "MethodDeclaration[11264-11494]:MethodDeclaration[11305-11535]"
    }, {
      "left" : "public long longValue()",
      "right" : "public long longValue()",
      "info" : "MethodDeclaration[11504-11737]:MethodDeclaration[11545-11778]"
    }, {
      "left" : "public Fraction negate()",
      "right" : "public Fraction negate()",
      "info" : "MethodDeclaration[11747-12204]:MethodDeclaration[11788-12245]"
    }, {
      "left" : "public Fraction reciprocal()",
      "right" : "public Fraction reciprocal()",
      "info" : "MethodDeclaration[12210-12413]:MethodDeclaration[12251-12454]"
    }, {
      "left" : "public Fraction add(Fraction fraction)",
      "right" : "public Fraction add(Fraction fraction)",
      "info" : "MethodDeclaration[12423-13030]:MethodDeclaration[12464-13071]"
    }, {
      "left" : "public Fraction subtract(Fraction fraction)",
      "right" : "public Fraction subtract(Fraction fraction)",
      "info" : "MethodDeclaration[13036-13656]:MethodDeclaration[13077-13697]"
    }, {
      "left" : "private Fraction addSub(Fraction fraction, boolean isAdd)",
      "right" : "private Fraction addSub(Fraction fraction, boolean isAdd)",
      "info" : "MethodDeclaration[13662-16383]:MethodDeclaration[13703-16424]"
    }, {
      "left" : "public Fraction multiply(Fraction fraction)",
      "right" : "public Fraction multiply(Fraction fraction)",
      "info" : "MethodDeclaration[16389-17557]:MethodDeclaration[16430-17598]"
    }, {
      "left" : "public Fraction divide(Fraction fraction)",
      "right" : "public Fraction divide(Fraction fraction)",
      "info" : "MethodDeclaration[17563-18547]:MethodDeclaration[17604-18588]"
    }, {
      "left" : "public static Fraction getReducedFraction(int numerator, int denominator)",
      "right" : "public static Fraction getReducedFraction(int numerator, int denominator)",
      "info" : "MethodDeclaration[18557-20251]:MethodDeclaration[18598-20292]"
    } ],
    "mappings" : [
 {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[2048-2054]:Modifier[2048-2054]"
    }, {
      "left" : "Fraction",
      "right" : "Fraction",
      "info" : "SimpleName[2055-2063]:SimpleName[2055-2063]"
    }, {
      "left" : "double value",
      "right" : "double value",
      "info" : "SingleVariableDeclaration[2064-2076]:SingleVariableDeclaration[2064-2076]"
    }, {
      "left" : "FractionConversionException",
      "right" : "FractionConversionException",
      "info" : "SimpleType[2085-2112]:SimpleType[2085-2112]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2113-2154]:Block[2113-2154]"
    }, {
      "left" : "this(value, 1.0e-5, 100);",
      "right" : "this(value, 1.0e-5, 100);",
      "info" : "ConstructorInvocation[2123-2148]:ConstructorInvocation[2123-2148]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[2837-2843]:Modifier[2837-2843]"
    }, {
      "left" : "Fraction",
      "right" : "Fraction",
      "info" : "SimpleName[2844-2852]:SimpleName[2844-2852]"
    }, {
      "left" : "double value",
      "right" : "double value",
      "info" : "SingleVariableDeclaration[2853-2865]:SingleVariableDeclaration[2853-2865]"
    }, {
      "left" : "double epsilon",
      "right" : "double epsilon",
      "info" : "SingleVariableDeclaration[2867-2881]:SingleVariableDeclaration[2867-2881]"
    }, {
      "left" : "int maxIterations",
      "right" : "int maxIterations",
      "info" : "SingleVariableDeclaration[2883-2900]:SingleVariableDeclaration[2883-2900]"
    }, {
      "left" : "FractionConversionException",
      "right" : "FractionConversionException",
      "info" : "SimpleType[2917-2944]:SimpleType[2917-2944]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2949-3020]:Block[2949-3020]"
    }, {
      "left" : "this(value, epsilon, Integer.MAX_VALUE, maxIterations);",
      "right" : "this(value, epsilon, Integer.MAX_VALUE, maxIterations);",
      "info" : "ConstructorInvocation[2959-3014]:ConstructorInvocation[2959-3014]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[3557-3563]:Modifier[3557-3563]"
    }, {
      "left" : "Fraction",
      "right" : "Fraction",
      "info" : "SimpleName[3564-3572]:SimpleName[3564-3572]"
    }, {
      "left" : "double value",
      "right" : "double value",
      "info" : "SingleVariableDeclaration[3573-3585]:SingleVariableDeclaration[3573-3585]"
    }, {
      "left" : "int maxDenominator",
      "right" : "int maxDenominator",
      "info" : "SingleVariableDeclaration[3587-3605]:SingleVariableDeclaration[3587-3605]"
    }, {
      "left" : "FractionConversionException",
      "right" : "FractionConversionException",
      "info" : "SimpleType[3622-3649]:SimpleType[3622-3649]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3654-3705]:Block[3654-3705]"
    }, {
      "left" : "this(value, 0, maxDenominator, 100);",
      "right" : "this(value, 0, maxDenominator, 100);",
      "info" : "ConstructorInvocation[3663-3699]:ConstructorInvocation[3663-3699]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[5131-5138]:Modifier[5131-5138]"
    }, {
      "left" : "Fraction",
      "right" : "Fraction",
      "info" : "SimpleName[5139-5147]:SimpleName[5139-5147]"
    }, {
      "left" : "double value",
      "right" : "double value",
      "info" : "SingleVariableDeclaration[5148-5160]:SingleVariableDeclaration[5148-5160]"
    }, {
      "left" : "double epsilon",
      "right" : "double epsilon",
      "info" : "SingleVariableDeclaration[5162-5176]:SingleVariableDeclaration[5162-5176]"
    }, {
      "left" : "int maxDenominator",
      "right" : "int maxDenominator",
      "info" : "SingleVariableDeclaration[5178-5196]:SingleVariableDeclaration[5178-5196]"
    }, {
      "left" : "int maxIterations",
      "right" : "int maxIterations",
      "info" : "SingleVariableDeclaration[5198-5215]:SingleVariableDeclaration[5198-5215]"
    }, {
      "left" : "FractionConversionException",
      "right" : "FractionConversionException",
      "info" : "SimpleType[5232-5259]:SimpleType[5232-5259]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5264-6990]:Block[5264-6990]"
    }, {
      "left" : "long overflow = Integer.MAX_VALUE;",
      "right" : "long overflow = Integer.MAX_VALUE;",
      "info" : "VariableDeclarationStatement[5274-5308]:VariableDeclarationStatement[5274-5308]"
    }, {
      "left" : "double r0 = value;",
      "right" : "double r0 = value;",
      "info" : "VariableDeclarationStatement[5317-5335]:VariableDeclarationStatement[5317-5335]"
    }, {
      "left" : "long a0 = (long)Math.floor(r0);",
      "right" : "long a0 = (long)Math.floor(r0);",
      "info" : "VariableDeclarationStatement[5344-5375]:VariableDeclarationStatement[5344-5375]"
    }, {
      "left" : "if (a0 > overflow)",
      "right" : "if (a0 > overflow)",
      "info" : "IfStatement[5384-5480]:IfStatement[5384-5480]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5403-5480]:Block[5403-5480]"
    }, {
      "left" : "throw new FractionConversionException(value, a0, 1l);",
      "right" : "throw new FractionConversionException(value, a0, 1l);",
      "info" : "ThrowStatement[5417-5470]:ThrowStatement[5417-5470]"
    }, {
      "left" : "if (Math.abs(a0 - value) < epsilon)",
      "right" : "if (Math.abs(a0 - value) < epsilon)",
      "info" : "IfStatement[5585-5725]:IfStatement[5585-5725]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5621-5725]:Block[5621-5725]"
    }, {
      "left" : "this.numerator = (int) a0;",
      "right" : "this.numerator = (int) a0;",
      "info" : "ExpressionStatement[5635-5661]:ExpressionStatement[5635-5661]"
    }, {
      "left" : "this.denominator = 1;",
      "right" : "this.denominator = 1;",
      "info" : "ExpressionStatement[5674-5695]:ExpressionStatement[5674-5695]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[5708-5715]:ReturnStatement[5708-5715]"
    }, {
      "left" : "long p0 = 1;",
      "right" : "long p0 = 1;",
      "info" : "VariableDeclarationStatement[5735-5747]:VariableDeclarationStatement[5735-5747]"
    }, {
      "left" : "long q0 = 0;",
      "right" : "long q0 = 0;",
      "info" : "VariableDeclarationStatement[5756-5768]:VariableDeclarationStatement[5756-5768]"
    }, {
      "left" : "long p1 = a0;",
      "right" : "long p1 = a0;",
      "info" : "VariableDeclarationStatement[5777-5790]:VariableDeclarationStatement[5777-5790]"
    }, {
      "left" : "long q1 = 1;",
      "right" : "long q1 = 1;",
      "info" : "VariableDeclarationStatement[5799-5811]:VariableDeclarationStatement[5799-5811]"
    }, {
      "left" : "long p2 = 0;",
      "right" : "long p2 = 0;",
      "info" : "VariableDeclarationStatement[5821-5833]:VariableDeclarationStatement[5821-5833]"
    }, {
      "left" : "long q2 = 1;",
      "right" : "long q2 = 1;",
      "info" : "VariableDeclarationStatement[5842-5854]:VariableDeclarationStatement[5842-5854]"
    }, {
      "left" : "int n = 0;",
      "right" : "int n = 0;",
      "info" : "VariableDeclarationStatement[5864-5874]:VariableDeclarationStatement[5864-5874]"
    }, {
      "left" : "boolean stop = false;",
      "right" : "boolean stop = false;",
      "info" : "VariableDeclarationStatement[5883-5904]:VariableDeclarationStatement[5883-5904]"
    }, {
      "left" : "do{...}",
      "right" : "do{...}",
      "info" : "DoStatement[5913-6634]:DoStatement[5913-6634]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5916-6619]:Block[5916-6619]"
    }, {
      "left" : "++n;",
      "right" : "++n;",
      "info" : "ExpressionStatement[5930-5934]:ExpressionStatement[5930-5934]"
    }, {
      "left" : "double r1 = 1.0 / (r0 - a0);",
      "right" : "double r1 = 1.0 / (r0 - a0);",
      "info" : "VariableDeclarationStatement[5947-5975]:VariableDeclarationStatement[5947-5975]"
    }, {
      "left" : "long a1 = (long)Math.floor(r1);",
      "right" : "long a1 = (long)Math.floor(r1);",
      "info" : "VariableDeclarationStatement[5988-6019]:VariableDeclarationStatement[5988-6019]"
    }, {
      "left" : "p2 = (a1 * p1) + p0;",
      "right" : "p2 = (a1 * p1) + p0;",
      "info" : "ExpressionStatement[6032-6052]:ExpressionStatement[6032-6052]"
    }, {
      "left" : "q2 = (a1 * q1) + q0;",
      "right" : "q2 = (a1 * q1) + q0;",
      "info" : "ExpressionStatement[6065-6085]:ExpressionStatement[6065-6085]"
    }, {
      "left" : "if ((p2 > overflow) || (q2 > overflow))",
      "right" : "if ((p2 > overflow) || (q2 > overflow))",
      "info" : "IfStatement[6098-6223]:IfStatement[6098-6223]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6138-6223]:Block[6138-6223]"
    }, {
      "left" : "throw new FractionConversionException(value, p2, q2);",
      "right" : "throw new FractionConversionException(value, p2, q2);",
      "info" : "ThrowStatement[6156-6209]:ThrowStatement[6156-6209]"
    }, {
      "left" : "double convergent = (double)p2 / (double)q2;",
      "right" : "double convergent = (double)p2 / (double)q2;",
      "info" : "VariableDeclarationStatement[6249-6293]:VariableDeclarationStatement[6249-6293]"
    }, {
      "left" : "if (n < maxIterations && Math.abs(convergent - value) > epsilon && q2 < maxDenominator)",
      "right" : "if (n < maxIterations && Math.abs(convergent - value) > epsilon && q2 < maxDenominator)",
      "info" : "IfStatement[6306-6609]:IfStatement[6306-6609]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6394-6559]:Block[6394-6559]"
    }, {
      "left" : "p0 = p1;",
      "right" : "p0 = p1;",
      "info" : "ExpressionStatement[6412-6420]:ExpressionStatement[6412-6420]"
    }, {
      "left" : "p1 = p2;",
      "right" : "p1 = p2;",
      "info" : "ExpressionStatement[6437-6445]:ExpressionStatement[6437-6445]"
    }, {
      "left" : "q0 = q1;",
      "right" : "q0 = q1;",
      "info" : "ExpressionStatement[6462-6470]:ExpressionStatement[6462-6470]"
    }, {
      "left" : "q1 = q2;",
      "right" : "q1 = q2;",
      "info" : "ExpressionStatement[6487-6495]:ExpressionStatement[6487-6495]"
    }, {
      "left" : "a0 = a1;",
      "right" : "a0 = a1;",
      "info" : "ExpressionStatement[6512-6520]:ExpressionStatement[6512-6520]"
    }, {
      "left" : "r0 = r1;",
      "right" : "r0 = r1;",
      "info" : "ExpressionStatement[6537-6545]:ExpressionStatement[6537-6545]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6565-6609]:Block[6565-6609]"
    }, {
      "left" : "stop = true;",
      "right" : "stop = true;",
      "info" : "ExpressionStatement[6583-6595]:ExpressionStatement[6583-6595]"
    }, {
      "left" : "if (n >= maxIterations)",
      "right" : "if (n >= maxIterations)",
      "info" : "IfStatement[6644-6752]:IfStatement[6644-6752]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6668-6752]:Block[6668-6752]"
    }, {
      "left" : "throw new FractionConversionException(value, maxIterations);",
      "right" : "throw new FractionConversionException(value, maxIterations);",
      "info" : "ThrowStatement[6682-6742]:ThrowStatement[6682-6742]"
    }, {
      "left" : "if (q2 < maxDenominator)",
      "right" : "if (q2 < maxDenominator)",
      "info" : "IfStatement[6770-6983]:IfStatement[6770-6983]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6795-6886]:Block[6795-6886]"
    }, {
      "left" : "this.numerator = (int) p2;",
      "right" : "this.numerator = (int) p2;",
      "info" : "ExpressionStatement[6809-6835]:ExpressionStatement[6809-6835]"
    }, {
      "left" : "this.denominator = (int) q2;",
      "right" : "this.denominator = (int) q2;",
      "info" : "ExpressionStatement[6848-6876]:ExpressionStatement[6848-6876]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6892-6983]:Block[6892-6983]"
    }, {
      "left" : "this.numerator = (int) p1;",
      "right" : "this.numerator = (int) p1;",
      "info" : "ExpressionStatement[6906-6932]:ExpressionStatement[6906-6932]"
    }, {
      "left" : "this.denominator = (int) q1;",
      "right" : "this.denominator = (int) q1;",
      "info" : "ExpressionStatement[6945-6973]:ExpressionStatement[6945-6973]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[7270-7276]:Modifier[7270-7276]"
    }, {
      "left" : "Fraction",
      "right" : "Fraction",
      "info" : "SimpleName[7277-7285]:SimpleName[7277-7285]"
    }, {
      "left" : "int num",
      "right" : "int num",
      "info" : "SingleVariableDeclaration[7286-7293]:SingleVariableDeclaration[7286-7293]"
    }, {
      "left" : "int den",
      "right" : "int den",
      "info" : "SingleVariableDeclaration[7295-7302]:SingleVariableDeclaration[7295-7302]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7304-8283]:Block[7304-8283]"
    }, {
      "left" : "super();",
      "right" : "super();",
      "info" : "SuperConstructorInvocation[7314-7322]:SuperConstructorInvocation[7314-7322]"
    }, {
      "left" : "if (den == 0)",
      "right" : "if (den == 0)",
      "info" : "IfStatement[7331-7537]:IfStatement[7331-7537]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7345-7537]:Block[7345-7537]"
    }, {
      "left" : "throw MathRuntimeException.createArithmeticException(\"zero denominator in fraction {0}/{1}\",\n                                                                 num, den);",
      "right" : "throw MathRuntimeException.createArithmeticException(\"zero denominator in fraction {0}/{1}\",\n                                                                 num, den);",
      "info" : "ThrowStatement[7359-7527]:ThrowStatement[7359-7527]"
    }, {
      "left" : "if (den < 0)",
      "right" : "if (den < 0)",
      "info" : "IfStatement[7546-7900]:IfStatement[7546-7900]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7559-7900]:Block[7559-7900]"
    }, {
      "left" : "if (num == Integer.MIN_VALUE || den == Integer.MIN_VALUE)",
      "right" : "if (num == Integer.MIN_VALUE || den == Integer.MIN_VALUE)",
      "info" : "IfStatement[7573-7842]:IfStatement[7573-7842]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7631-7842]:Block[7631-7842]"
    }, {
      "left" : "throw MathRuntimeException.createArithmeticException(\"overflow in fraction {0}/{1}, cannot negate\",\n                                                                     num, den);",
      "right" : "throw MathRuntimeException.createArithmeticException(\"overflow in fraction {0}/{1}, cannot negate\",\n                                                                     num, den);",
      "info" : "ThrowStatement[7649-7828]:ThrowStatement[7649-7828]"
    }, {
      "left" : "num = -num;",
      "right" : "num = -num;",
      "info" : "ExpressionStatement[7855-7866]:ExpressionStatement[7855-7866]"
    }, {
      "left" : "den = -den;",
      "right" : "den = -den;",
      "info" : "ExpressionStatement[7879-7890]:ExpressionStatement[7879-7890]"
    }, {
      "left" : "int d = MathUtils.gcd(num, den);",
      "right" : "int d = MathUtils.gcd(num, den);",
      "info" : "VariableDeclarationStatement[7985-8017]:VariableDeclarationStatement[7985-8017]"
    }, {
      "left" : "if (d > 1)",
      "right" : "if (d > 1)",
      "info" : "IfStatement[8026-8092]:IfStatement[8026-8092]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8037-8092]:Block[8037-8092]"
    }, {
      "left" : "num /= d;",
      "right" : "num /= d;",
      "info" : "ExpressionStatement[8051-8060]:ExpressionStatement[8051-8060]"
    }, {
      "left" : "den /= d;",
      "right" : "den /= d;",
      "info" : "ExpressionStatement[8073-8082]:ExpressionStatement[8073-8082]"
    }, {
      "left" : "if (den < 0)",
      "right" : "if (den < 0)",
      "info" : "IfStatement[8145-8215]:IfStatement[8145-8215]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8158-8215]:Block[8158-8215]"
    }, {
      "left" : "num *= -1;",
      "right" : "num *= -1;",
      "info" : "ExpressionStatement[8172-8182]:ExpressionStatement[8172-8182]"
    }, {
      "left" : "den *= -1;",
      "right" : "den *= -1;",
      "info" : "ExpressionStatement[8195-8205]:ExpressionStatement[8195-8205]"
    }, {
      "left" : "this.numerator = num;",
      "right" : "this.numerator = num;",
      "info" : "ExpressionStatement[8224-8245]:ExpressionStatement[8224-8245]"
    }, {
      "left" : "this.denominator = den;",
      "right" : "this.denominator = den;",
      "info" : "ExpressionStatement[8254-8277]:ExpressionStatement[8254-8277]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[8396-8402]:Modifier[8396-8402]"
    }, {
      "left" : "Fraction",
      "right" : "Fraction",
      "info" : "SimpleType[8403-8411]:SimpleType[8403-8411]"
    }, {
      "left" : "abs",
      "right" : "abs",
      "info" : "SimpleName[8412-8415]:SimpleName[8412-8415]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8418-8584]:Block[8418-8584]"
    }, {
      "left" : "Fraction ret;",
      "right" : "Fraction ret;",
      "info" : "VariableDeclarationStatement[8428-8441]:VariableDeclarationStatement[8428-8441]"
    }, {
      "left" : "if (numerator >= 0)",
      "right" : "if (numerator >= 0)",
      "info" : "IfStatement[8450-8550]:IfStatement[8450-8550]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8470-8505]:Block[8470-8505]"
    }, {
      "left" : "ret = this;",
      "right" : "ret = this;",
      "info" : "ExpressionStatement[8484-8495]:ExpressionStatement[8484-8495]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8511-8550]:Block[8511-8550]"
    }, {
      "left" : "ret = negate();",
      "right" : "ret = negate();",
      "info" : "ExpressionStatement[8525-8540]:ExpressionStatement[8525-8540]"
    }, {
      "left" : "return ret;",
      "right" : "return ret;",
      "info" : "ReturnStatement[8559-8570]:ReturnStatement[8559-8570]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[9227-9233]:Modifier[9268-9274]"
    }, {
      "left" : "double",
      "right" : "double",
      "info" : "PrimitiveType[9234-9240]:PrimitiveType[9275-9281]"
    }, {
      "left" : "doubleValue",
      "right" : "doubleValue",
      "info" : "SimpleName[9241-9252]:SimpleName[9282-9293]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9255-9318]:Block[9296-9359]"
    }, {
      "left" : "return (double)numerator / (double)denominator;",
      "right" : "return (double)numerator / (double)denominator;",
      "info" : "ReturnStatement[9265-9312]:ReturnStatement[9306-9353]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[9787-9793]:Modifier[9828-9834]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[9794-9801]:PrimitiveType[9835-9842]"
    }, {
      "left" : "equals",
      "right" : "equals",
      "info" : "SimpleName[9802-9808]:SimpleName[9843-9849]"
    }, {
      "left" : "Object other",
      "right" : "Object other",
      "info" : "SingleVariableDeclaration[9809-9821]:SingleVariableDeclaration[9850-9862]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9823-10479]:Block[9864-10520]"
    }, {
      "left" : "boolean ret;",
      "right" : "boolean ret;",
      "info" : "VariableDeclarationStatement[9833-9845]:VariableDeclarationStatement[9874-9886]"
    }, {
      "left" : "if (this == other)",
      "right" : "if (this == other)",
      "info" : "IfStatement[9863-10444]:IfStatement[9904-10485]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9882-9918]:Block[9923-9959]"
    }, {
      "left" : "ret = true;",
      "right" : "ret = true;",
      "info" : "ExpressionStatement[9897-9908]:ExpressionStatement[9938-9949]"
    }, {
      "left" : "if (other == null)",
      "right" : "if (other == null)",
      "info" : "IfStatement[9924-10444]:IfStatement[9965-10485]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9943-9979]:Block[9984-10020]"
    }, {
      "left" : "ret = false;",
      "right" : "ret = false;",
      "info" : "ExpressionStatement[9957-9969]:ExpressionStatement[9998-10010]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9985-10444]:Block[10026-10485]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[9999-10434]:TryStatement[10040-10475]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10003-10323]:Block[10044-10364]"
    }, {
      "left" : "Fraction rhs = (Fraction)other;",
      "right" : "Fraction rhs = (Fraction)other;",
      "info" : "VariableDeclarationStatement[10170-10201]:VariableDeclarationStatement[10211-10242]"
    }, {
      "left" : "ret = (numerator == rhs.numerator) &&\n                    (denominator == rhs.denominator);",
      "right" : "ret = (numerator == rhs.numerator) &&\n                    (denominator == rhs.denominator);",
      "info" : "ExpressionStatement[10218-10309]:ExpressionStatement[10259-10350]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10354-10434]:Block[10395-10475]"
    }, {
      "left" : "ret = false;",
      "right" : "ret = false;",
      "info" : "ExpressionStatement[10408-10420]:ExpressionStatement[10449-10461]"
    }, {
      "left" : "return ret;",
      "right" : "return ret;",
      "info" : "ReturnStatement[10462-10473]:ReturnStatement[10503-10514]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[10676-10682]:Modifier[10717-10723]"
    }, {
      "left" : "float",
      "right" : "float",
      "info" : "PrimitiveType[10683-10688]:PrimitiveType[10724-10729]"
    }, {
      "left" : "floatValue",
      "right" : "floatValue",
      "info" : "SimpleName[10689-10699]:SimpleName[10730-10740]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10702-10746]:Block[10743-10787]"
    }, {
      "left" : "return (float)doubleValue();",
      "right" : "return (float)doubleValue();",
      "info" : "ReturnStatement[10712-10740]:ReturnStatement[10753-10781]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[10835-10841]:Modifier[10876-10882]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[10842-10845]:PrimitiveType[10883-10886]"
    }, {
      "left" : "getDenominator",
      "right" : "getDenominator",
      "info" : "SimpleName[10846-10860]:SimpleName[10887-10901]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10863-10898]:Block[10904-10939]"
    }, {
      "left" : "return denominator;",
      "right" : "return denominator;",
      "info" : "ReturnStatement[10873-10892]:ReturnStatement[10914-10933]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[10983-10989]:Modifier[11024-11030]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[10990-10993]:PrimitiveType[11031-11034]"
    }, {
      "left" : "getNumerator",
      "right" : "getNumerator",
      "info" : "SimpleName[10994-11006]:SimpleName[11035-11047]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11009-11042]:Block[11050-11083]"
    }, {
      "left" : "return numerator;",
      "right" : "return numerator;",
      "info" : "ReturnStatement[11019-11036]:ReturnStatement[11060-11077]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[11158-11164]:Modifier[11199-11205]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[11165-11168]:PrimitiveType[11206-11209]"
    }, {
      "left" : "hashCode",
      "right" : "hashCode",
      "info" : "SimpleName[11169-11177]:SimpleName[11210-11218]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11180-11254]:Block[11221-11295]"
    }, {
      "left" : "return 37 * (37 * 17 + getNumerator()) + getDenominator();",
      "right" : "return 37 * (37 * 17 + getNumerator()) + getDenominator();",
      "info" : "ReturnStatement[11190-11248]:ReturnStatement[11231-11289]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[11430-11436]:Modifier[11471-11477]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[11437-11440]:PrimitiveType[11478-11481]"
    }, {
      "left" : "intValue",
      "right" : "intValue",
      "info" : "SimpleName[11441-11449]:SimpleName[11482-11490]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11452-11494]:Block[11493-11535]"
    }, {
      "left" : "return (int)doubleValue();",
      "right" : "return (int)doubleValue();",
      "info" : "ReturnStatement[11462-11488]:ReturnStatement[11503-11529]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[11670-11676]:Modifier[11711-11717]"
    }, {
      "left" : "long",
      "right" : "long",
      "info" : "PrimitiveType[11677-11681]:PrimitiveType[11718-11722]"
    }, {
      "left" : "longValue",
      "right" : "longValue",
      "info" : "SimpleName[11682-11691]:SimpleName[11723-11732]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11694-11737]:Block[11735-11778]"
    }, {
      "left" : "return (long)doubleValue();",
      "right" : "return (long)doubleValue();",
      "info" : "ReturnStatement[11704-11731]:ReturnStatement[11745-11772]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[11862-11868]:Modifier[11903-11909]"
    }, {
      "left" : "Fraction",
      "right" : "Fraction",
      "info" : "SimpleType[11869-11877]:SimpleType[11910-11918]"
    }, {
      "left" : "negate",
      "right" : "negate",
      "info" : "SimpleName[11878-11884]:SimpleName[11919-11925]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11887-12204]:Block[11928-12245]"
    }, {
      "left" : "if (numerator==Integer.MIN_VALUE)",
      "right" : "if (numerator==Integer.MIN_VALUE)",
      "info" : "IfStatement[11897-12144]:IfStatement[11938-12185]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11931-12144]:Block[11972-12185]"
    }, {
      "left" : "throw MathRuntimeException.createArithmeticException(\"overflow in fraction {0}/{1}, cannot negate\",\n                                                                 numerator, denominator);",
      "right" : "throw MathRuntimeException.createArithmeticException(\"overflow in fraction {0}/{1}, cannot negate\",\n                                                                 numerator, denominator);",
      "info" : "ThrowStatement[11945-12134]:ThrowStatement[11986-12175]"
    }, {
      "left" : "return new Fraction(-numerator, denominator);",
      "right" : "return new Fraction(-numerator, denominator);",
      "info" : "ReturnStatement[12153-12198]:ReturnStatement[12194-12239]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[12324-12330]:Modifier[12365-12371]"
    }, {
      "left" : "Fraction",
      "right" : "Fraction",
      "info" : "SimpleType[12331-12339]:SimpleType[12372-12380]"
    }, {
      "left" : "reciprocal",
      "right" : "reciprocal",
      "info" : "SimpleName[12340-12350]:SimpleName[12381-12391]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12353-12413]:Block[12394-12454]"
    }, {
      "left" : "return new Fraction(denominator, numerator);",
      "right" : "return new Fraction(denominator, numerator);",
      "info" : "ReturnStatement[12363-12407]:ReturnStatement[12404-12448]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[12935-12941]:Modifier[12976-12982]"
    }, {
      "left" : "Fraction",
      "right" : "Fraction",
      "info" : "SimpleType[12942-12950]:SimpleType[12983-12991]"
    }, {
      "left" : "add",
      "right" : "add",
      "info" : "SimpleName[12951-12954]:SimpleName[12992-12995]"
    }, {
      "left" : "Fraction fraction",
      "right" : "Fraction fraction",
      "info" : "SingleVariableDeclaration[12955-12972]:SingleVariableDeclaration[12996-13013]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12974-13030]:Block[13015-13071]"
    }, {
      "left" : "return addSub(fraction, true /* add */);",
      "right" : "return addSub(fraction, true /* add */);",
      "info" : "ReturnStatement[12984-13024]:ReturnStatement[13025-13065]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[13550-13556]:Modifier[13591-13597]"
    }, {
      "left" : "Fraction",
      "right" : "Fraction",
      "info" : "SimpleType[13557-13565]:SimpleType[13598-13606]"
    }, {
      "left" : "subtract",
      "right" : "subtract",
      "info" : "SimpleName[13566-13574]:SimpleName[13607-13615]"
    }, {
      "left" : "Fraction fraction",
      "right" : "Fraction fraction",
      "info" : "SingleVariableDeclaration[13575-13592]:SingleVariableDeclaration[13616-13633]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13594-13656]:Block[13635-13697]"
    }, {
      "left" : "return addSub(fraction, false /* subtract */);",
      "right" : "return addSub(fraction, false /* subtract */);",
      "info" : "ReturnStatement[13604-13650]:ReturnStatement[13645-13691]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[14176-14183]:Modifier[14217-14224]"
    }, {
      "left" : "Fraction",
      "right" : "Fraction",
      "info" : "SimpleType[14184-14192]:SimpleType[14225-14233]"
    }, {
      "left" : "addSub",
      "right" : "addSub",
      "info" : "SimpleName[14193-14199]:SimpleName[14234-14240]"
    }, {
      "left" : "Fraction fraction",
      "right" : "Fraction fraction",
      "info" : "SingleVariableDeclaration[14200-14217]:SingleVariableDeclaration[14241-14258]"
    }, {
      "left" : "boolean isAdd",
      "right" : "boolean isAdd",
      "info" : "SingleVariableDeclaration[14219-14232]:SingleVariableDeclaration[14260-14273]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14234-16383]:Block[14275-16424]"
    }, {
      "left" : "if (fraction == null)",
      "right" : "if (fraction == null)",
      "info" : "IfStatement[14244-14358]:IfStatement[14285-14399]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14266-14358]:Block[14307-14399]"
    }, {
      "left" : "throw new IllegalArgumentException(\"The fraction must not be null\");",
      "right" : "throw new IllegalArgumentException(\"The fraction must not be null\");",
      "info" : "ThrowStatement[14280-14348]:ThrowStatement[14321-14389]"
    }, {
      "left" : "if (numerator == 0)",
      "right" : "if (numerator == 0)",
      "info" : "IfStatement[14409-14497]:IfStatement[14450-14538]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14429-14497]:Block[14470-14538]"
    }, {
      "left" : "return isAdd ? fraction : fraction.negate();",
      "right" : "return isAdd ? fraction : fraction.negate();",
      "info" : "ReturnStatement[14443-14487]:ReturnStatement[14484-14528]"
    }, {
      "left" : "if (fraction.numerator == 0)",
      "right" : "if (fraction.numerator == 0)",
      "info" : "IfStatement[14506-14571]:IfStatement[14547-14612]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14535-14571]:Block[14576-14612]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[14549-14561]:ReturnStatement[14590-14602]"
    }, {
      "left" : "int d1 = MathUtils.gcd(denominator, fraction.denominator);",
      "right" : "int d1 = MathUtils.gcd(denominator, fraction.denominator);",
      "info" : "VariableDeclarationStatement[14685-14743]:VariableDeclarationStatement[14726-14784]"
    }, {
      "left" : "if (d1==1)",
      "right" : "if (d1==1)",
      "info" : "IfStatement[14752-15198]:IfStatement[14793-15239]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14763-15198]:Block[14804-15239]"
    }, {
      "left" : "int uvp = MathUtils.mulAndCheck(numerator, fraction.denominator);",
      "right" : "int uvp = MathUtils.mulAndCheck(numerator, fraction.denominator);",
      "info" : "VariableDeclarationStatement[14827-14892]:VariableDeclarationStatement[14868-14933]"
    }, {
      "left" : "int upv = MathUtils.mulAndCheck(fraction.numerator, denominator);",
      "right" : "int upv = MathUtils.mulAndCheck(fraction.numerator, denominator);",
      "info" : "VariableDeclarationStatement[14905-14970]:VariableDeclarationStatement[14946-15011]"
    }, {
      "left" : "return new Fraction\n                (isAdd ? MathUtils.addAndCheck(uvp, upv) : \n                 MathUtils.subAndCheck(uvp, upv),\n                 MathUtils.mulAndCheck(denominator, fraction.denominator));",
      "right" : "return new Fraction\n                (isAdd ? MathUtils.addAndCheck(uvp, upv) : \n                 MathUtils.subAndCheck(uvp, upv),\n                 MathUtils.mulAndCheck(denominator, fraction.denominator));",
      "info" : "ReturnStatement[14983-15188]:ReturnStatement[15024-15229]"
    }, {
      "left" : "BigInteger uvp = BigInteger.valueOf(numerator)\n        .multiply(BigInteger.valueOf(fraction.denominator/d1));",
      "right" : "BigInteger uvp = BigInteger.valueOf(numerator)\n        .multiply(BigInteger.valueOf(fraction.denominator/d1));",
      "info" : "VariableDeclarationStatement[15376-15486]:VariableDeclarationStatement[15417-15527]"
    }, {
      "left" : "BigInteger upv = BigInteger.valueOf(fraction.numerator)\n        .multiply(BigInteger.valueOf(denominator/d1));",
      "right" : "BigInteger upv = BigInteger.valueOf(fraction.numerator)\n        .multiply(BigInteger.valueOf(denominator/d1));",
      "info" : "VariableDeclarationStatement[15495-15605]:VariableDeclarationStatement[15536-15646]"
    }, {
      "left" : "BigInteger t = isAdd ? uvp.add(upv) : uvp.subtract(upv);",
      "right" : "BigInteger t = isAdd ? uvp.add(upv) : uvp.subtract(upv);",
      "info" : "VariableDeclarationStatement[15614-15670]:VariableDeclarationStatement[15655-15711]"
    }, {
      "left" : "int tmodd1 = t.mod(BigInteger.valueOf(d1)).intValue();",
      "right" : "int tmodd1 = t.mod(BigInteger.valueOf(d1)).intValue();",
      "info" : "VariableDeclarationStatement[15780-15834]:VariableDeclarationStatement[15821-15875]"
    }, {
      "left" : "int d2 = (tmodd1==0)?d1:MathUtils.gcd(tmodd1, d1);",
      "right" : "int d2 = (tmodd1==0)?d1:MathUtils.gcd(tmodd1, d1);",
      "info" : "VariableDeclarationStatement[15843-15893]:VariableDeclarationStatement[15884-15934]"
    }, {
      "left" : "BigInteger w = t.divide(BigInteger.valueOf(d2));",
      "right" : "BigInteger w = t.divide(BigInteger.valueOf(d2));",
      "info" : "VariableDeclarationStatement[15948-15996]:VariableDeclarationStatement[15989-16037]"
    }, {
      "left" : "if (w.bitLength() > 31)",
      "right" : "if (w.bitLength() > 31)",
      "info" : "IfStatement[16005-16227]:IfStatement[16046-16268]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16029-16227]:Block[16070-16268]"
    }, {
      "left" : "throw MathRuntimeException.createArithmeticException(\"overflow, numerator too large after multiply: {0}\",\n                                                                 w);",
      "right" : "throw MathRuntimeException.createArithmeticException(\"overflow, numerator too large after multiply: {0}\",\n                                                                 w);",
      "info" : "ThrowStatement[16043-16217]:ThrowStatement[16084-16258]"
    }, {
      "left" : "return new Fraction (w.intValue(), \n                MathUtils.mulAndCheck(denominator/d1, \n                        fraction.denominator/d2));",
      "right" : "return new Fraction (w.intValue(), \n                MathUtils.mulAndCheck(denominator/d1, \n                        fraction.denominator/d2));",
      "info" : "ReturnStatement[16236-16377]:ReturnStatement[16277-16418]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[16880-16886]:Modifier[16921-16927]"
    }, {
      "left" : "Fraction",
      "right" : "Fraction",
      "info" : "SimpleType[16887-16895]:SimpleType[16928-16936]"
    }, {
      "left" : "multiply",
      "right" : "multiply",
      "info" : "SimpleName[16896-16904]:SimpleName[16937-16945]"
    }, {
      "left" : "Fraction fraction",
      "right" : "Fraction fraction",
      "info" : "SingleVariableDeclaration[16905-16922]:SingleVariableDeclaration[16946-16963]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16924-17557]:Block[16965-17598]"
    }, {
      "left" : "if (fraction == null)",
      "right" : "if (fraction == null)",
      "info" : "IfStatement[16934-17048]:IfStatement[16975-17089]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16956-17048]:Block[16997-17089]"
    }, {
      "left" : "throw new IllegalArgumentException(\"The fraction must not be null\");",
      "right" : "throw new IllegalArgumentException(\"The fraction must not be null\");",
      "info" : "ThrowStatement[16970-17038]:ThrowStatement[17011-17079]"
    }, {
      "left" : "if (numerator == 0 || fraction.numerator == 0)",
      "right" : "if (numerator == 0 || fraction.numerator == 0)",
      "info" : "IfStatement[17057-17140]:IfStatement[17098-17181]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17104-17140]:Block[17145-17181]"
    }, {
      "left" : "return ZERO;",
      "right" : "return ZERO;",
      "info" : "ReturnStatement[17118-17130]:ReturnStatement[17159-17171]"
    }, {
      "left" : "int d1 = MathUtils.gcd(numerator, fraction.denominator);",
      "right" : "int d1 = MathUtils.gcd(numerator, fraction.denominator);",
      "info" : "VariableDeclarationStatement[17246-17302]:VariableDeclarationStatement[17287-17343]"
    }, {
      "left" : "int d2 = MathUtils.gcd(fraction.numerator, denominator);",
      "right" : "int d2 = MathUtils.gcd(fraction.numerator, denominator);",
      "info" : "VariableDeclarationStatement[17311-17367]:VariableDeclarationStatement[17352-17408]"
    }, {
      "left" : "return getReducedFraction\n        (MathUtils.mulAndCheck(numerator/d1, fraction.numerator/d2),\n                MathUtils.mulAndCheck(denominator/d2, fraction.denominator/d1));",
      "right" : "return getReducedFraction\n        (MathUtils.mulAndCheck(numerator/d1, fraction.numerator/d2),\n                MathUtils.mulAndCheck(denominator/d2, fraction.denominator/d1));",
      "info" : "ReturnStatement[17376-17551]:ReturnStatement[17417-17592]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[18074-18080]:Modifier[18115-18121]"
    }, {
      "left" : "Fraction",
      "right" : "Fraction",
      "info" : "SimpleType[18081-18089]:SimpleType[18122-18130]"
    }, {
      "left" : "divide",
      "right" : "divide",
      "info" : "SimpleName[18090-18096]:SimpleName[18131-18137]"
    }, {
      "left" : "Fraction fraction",
      "right" : "Fraction fraction",
      "info" : "SingleVariableDeclaration[18097-18114]:SingleVariableDeclaration[18138-18155]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18116-18547]:Block[18157-18588]"
    }, {
      "left" : "if (fraction == null)",
      "right" : "if (fraction == null)",
      "info" : "IfStatement[18126-18240]:IfStatement[18167-18281]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18148-18240]:Block[18189-18281]"
    }, {
      "left" : "throw new IllegalArgumentException(\"The fraction must not be null\");",
      "right" : "throw new IllegalArgumentException(\"The fraction must not be null\");",
      "info" : "ThrowStatement[18162-18230]:ThrowStatement[18203-18271]"
    }, {
      "left" : "if (fraction.numerator == 0)",
      "right" : "if (fraction.numerator == 0)",
      "info" : "IfStatement[18249-18493]:IfStatement[18290-18534]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18278-18493]:Block[18319-18534]"
    }, {
      "left" : "throw MathRuntimeException.createArithmeticException(\n                    \"the fraction to divide by must not be zero: {0}/{1}\",\n                    fraction.numerator, fraction.denominator);",
      "right" : "throw MathRuntimeException.createArithmeticException(\n                    \"the fraction to divide by must not be zero: {0}/{1}\",\n                    fraction.numerator, fraction.denominator);",
      "info" : "ThrowStatement[18292-18483]:ThrowStatement[18333-18524]"
    }, {
      "left" : "return multiply(fraction.reciprocal());",
      "right" : "return multiply(fraction.reciprocal());",
      "info" : "ReturnStatement[18502-18541]:ReturnStatement[18543-18582]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[19081-19087]:Modifier[19122-19128]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[19088-19094]:Modifier[19129-19135]"
    }, {
      "left" : "Fraction",
      "right" : "Fraction",
      "info" : "SimpleType[19095-19103]:SimpleType[19136-19144]"
    }, {
      "left" : "getReducedFraction",
      "right" : "getReducedFraction",
      "info" : "SimpleName[19104-19122]:SimpleName[19145-19163]"
    }, {
      "left" : "int numerator",
      "right" : "int numerator",
      "info" : "SingleVariableDeclaration[19123-19136]:SingleVariableDeclaration[19164-19177]"
    }, {
      "left" : "int denominator",
      "right" : "int denominator",
      "info" : "SingleVariableDeclaration[19138-19153]:SingleVariableDeclaration[19179-19194]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19155-20251]:Block[19196-20292]"
    }, {
      "left" : "if (denominator == 0)",
      "right" : "if (denominator == 0)",
      "info" : "IfStatement[19165-19369]:IfStatement[19206-19410]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19187-19369]:Block[19228-19410]"
    }, {
      "left" : "throw MathRuntimeException.createArithmeticException(\n                    \"zero denominator in fraction {0}/{1}\",\n                    numerator, denominator);",
      "right" : "throw MathRuntimeException.createArithmeticException(\n                    \"zero denominator in fraction {0}/{1}\",\n                    numerator, denominator);",
      "info" : "ThrowStatement[19201-19359]:ThrowStatement[19242-19400]"
    }, {
      "left" : "if (numerator==0)",
      "right" : "if (numerator==0)",
      "info" : "IfStatement[19378-19451]:IfStatement[19419-19492]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19396-19451]:Block[19437-19492]"
    }, {
      "left" : "return ZERO;",
      "right" : "return ZERO;",
      "info" : "ReturnStatement[19410-19422]:ReturnStatement[19451-19463]"
    }, {
      "left" : "if (denominator==Integer.MIN_VALUE && (numerator&1)==0)",
      "right" : "if (denominator==Integer.MIN_VALUE && (numerator&1)==0)",
      "info" : "IfStatement[19519-19628]:IfStatement[19560-19669]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19575-19628]:Block[19616-19669]"
    }, {
      "left" : "numerator/=2;",
      "right" : "numerator/=2;",
      "info" : "ExpressionStatement[19589-19602]:ExpressionStatement[19630-19643]"
    }, {
      "left" : "denominator/=2;",
      "right" : "denominator/=2;",
      "info" : "ExpressionStatement[19603-19618]:ExpressionStatement[19644-19659]"
    }, {
      "left" : "if (denominator < 0)",
      "right" : "if (denominator < 0)",
      "info" : "IfStatement[19637-20051]:IfStatement[19678-20092]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19658-20051]:Block[19699-20092]"
    }, {
      "left" : "if (numerator==Integer.MIN_VALUE ||\n                    denominator==Integer.MIN_VALUE)",
      "right" : "if (numerator==Integer.MIN_VALUE ||\n                    denominator==Integer.MIN_VALUE)",
      "info" : "IfStatement[19672-19965]:IfStatement[19713-20006]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19760-19965]:Block[19801-20006]"
    }, {
      "left" : "throw MathRuntimeException.createArithmeticException(\n                        \"overflow in fraction {0}/{1}, cannot negate\",\n                        numerator, denominator);",
      "right" : "throw MathRuntimeException.createArithmeticException(\n                        \"overflow in fraction {0}/{1}, cannot negate\",\n                        numerator, denominator);",
      "info" : "ThrowStatement[19778-19951]:ThrowStatement[19819-19992]"
    }, {
      "left" : "numerator = -numerator;",
      "right" : "numerator = -numerator;",
      "info" : "ExpressionStatement[19978-20001]:ExpressionStatement[20019-20042]"
    }, {
      "left" : "denominator = -denominator;",
      "right" : "denominator = -denominator;",
      "info" : "ExpressionStatement[20014-20041]:ExpressionStatement[20055-20082]"
    }, {
      "left" : "int gcd = MathUtils.gcd(numerator, denominator);",
      "right" : "int gcd = MathUtils.gcd(numerator, denominator);",
      "info" : "VariableDeclarationStatement[20090-20138]:VariableDeclarationStatement[20131-20179]"
    }, {
      "left" : "numerator /= gcd;",
      "right" : "numerator /= gcd;",
      "info" : "ExpressionStatement[20147-20164]:ExpressionStatement[20188-20205]"
    }, {
      "left" : "denominator /= gcd;",
      "right" : "denominator /= gcd;",
      "info" : "ExpressionStatement[20173-20192]:ExpressionStatement[20214-20233]"
    }, {
      "left" : "return new Fraction(numerator, denominator);",
      "right" : "return new Fraction(numerator, denominator);",
      "info" : "ReturnStatement[20201-20245]:ReturnStatement[20242-20286]"
    } ]
  },
  "interFileMappings" : { }
}