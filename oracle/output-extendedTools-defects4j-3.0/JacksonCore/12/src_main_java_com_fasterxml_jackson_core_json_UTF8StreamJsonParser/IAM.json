{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "UTF8StreamJsonParser",
      "right" : "UTF8StreamJsonParser",
      "info" : "TypeDeclaration[432-126472]:TypeDeclaration[432-126461]"
    }, {
      "left" : "final static byte BYTE_LF = (byte) '\\n';",
      "right" : "final static byte BYTE_LF = (byte) '\\n';",
      "info" : "FieldDeclaration[679-719]:FieldDeclaration[679-719]"
    }, {
      "left" : "private final static int[] _icUTF8 = CharTypes.getInputCodeUtf8();",
      "right" : "private final static int[] _icUTF8 = CharTypes.getInputCodeUtf8();",
      "info" : "FieldDeclaration[790-856]:FieldDeclaration[790-856]"
    }, {
      "left" : "protected final static int[] _icLatin1 = CharTypes.getInputCodeLatin1();",
      "right" : "protected final static int[] _icLatin1 = CharTypes.getInputCodeLatin1();",
      "info" : "FieldDeclaration[1000-1072]:FieldDeclaration[1000-1072]"
    }, {
      "left" : "protected ObjectCodec _objectCodec;",
      "right" : "protected ObjectCodec _objectCodec;",
      "info" : "FieldDeclaration[1243-1453]:FieldDeclaration[1243-1453]"
    }, {
      "left" : "final protected ByteQuadsCanonicalizer _symbols;",
      "right" : "final protected ByteQuadsCanonicalizer _symbols;",
      "info" : "FieldDeclaration[1459-1588]:FieldDeclaration[1459-1588]"
    }, {
      "left" : "protected int[] _quadBuffer = new int[16];",
      "right" : "protected int[] _quadBuffer = new int[16];",
      "info" : "FieldDeclaration[1759-1864]:FieldDeclaration[1759-1864]"
    }, {
      "left" : "protected boolean _tokenIncomplete = false;",
      "right" : "protected boolean _tokenIncomplete = false;",
      "info" : "FieldDeclaration[1870-2106]:FieldDeclaration[1870-2106]"
    }, {
      "left" : "private int _quad1;",
      "right" : "private int _quad1;",
      "info" : "FieldDeclaration[2112-2205]:FieldDeclaration[2112-2205]"
    }, {
      "left" : "protected long _nameInputTotal;",
      "right" : "protected long _nameInputTotal;",
      "info" : "FieldDeclaration[2211-2276]:FieldDeclaration[2211-2276]"
    }, {
      "left" : "protected int _nameInputRow;",
      "right" : "protected int _nameInputRow;",
      "info" : "FieldDeclaration[2283-2345]:FieldDeclaration[2283-2345]"
    }, {
      "left" : "protected int _nameInputCol;",
      "right" : "protected int _nameInputCol;",
      "info" : "FieldDeclaration[2351-2413]:FieldDeclaration[2351-2413]"
    }, {
      "left" : "protected InputStream _inputStream;",
      "right" : "protected InputStream _inputStream;",
      "info" : "FieldDeclaration[2624-2659]:FieldDeclaration[2624-2659]"
    }, {
      "left" : "protected byte[] _inputBuffer;",
      "right" : "protected byte[] _inputBuffer;",
      "info" : "FieldDeclaration[2835-3057]:FieldDeclaration[2835-3057]"
    }, {
      "left" : "protected boolean _bufferRecyclable;",
      "right" : "protected boolean _bufferRecyclable;",
      "info" : "FieldDeclaration[3063-3349]:FieldDeclaration[3063-3349]"
    }, {
      "left" : "public UTF8StreamJsonParser(IOContext ctxt, int features, InputStream in,\n            ObjectCodec codec, ByteQuadsCanonicalizer sym,\n            byte[] inputBuffer, int start, int end,\n            boolean bufferRecyclable)",
      "right" : "public UTF8StreamJsonParser(IOContext ctxt, int features, InputStream in,\n            ObjectCodec codec, ByteQuadsCanonicalizer sym,\n            byte[] inputBuffer, int start, int end,\n            boolean bufferRecyclable)",
      "info" : "MethodDeclaration[3521-4145]:MethodDeclaration[3521-4145]"
    }, {
      "left" : "public ObjectCodec getCodec()",
      "right" : "public ObjectCodec getCodec()",
      "info" : "MethodDeclaration[4151-4231]:MethodDeclaration[4151-4231]"
    }, {
      "left" : "public void setCodec(ObjectCodec c)",
      "right" : "public void setCodec(ObjectCodec c)",
      "info" : "MethodDeclaration[4237-4320]:MethodDeclaration[4237-4320]"
    }, {
      "left" : "public int releaseBuffered(OutputStream out) throws IOException",
      "right" : "public int releaseBuffered(OutputStream out) throws IOException",
      "info" : "MethodDeclaration[4506-4840]:MethodDeclaration[4506-4840]"
    }, {
      "left" : "public Object getInputSource()",
      "right" : "public Object getInputSource()",
      "info" : "MethodDeclaration[4846-4927]:MethodDeclaration[4846-4927]"
    }, {
      "left" : "protected final boolean loadMore() throws IOException",
      "right" : "protected final boolean loadMore() throws IOException",
      "info" : "MethodDeclaration[5117-6015]:MethodDeclaration[5117-6015]"
    }, {
      "left" : "protected final boolean _loadToHaveAtLeast(int minAvailable) throws IOException",
      "right" : "protected final boolean _loadToHaveAtLeast(int minAvailable) throws IOException",
      "info" : "MethodDeclaration[6021-7435]:MethodDeclaration[6021-7435]"
    }, {
      "left" : "protected void _closeInput() throws IOException",
      "right" : "protected void _closeInput() throws IOException",
      "info" : "MethodDeclaration[7445-7942]:MethodDeclaration[7445-7942]"
    }, {
      "left" : "protected void _releaseBuffers() throws IOException",
      "right" : "protected void _releaseBuffers() throws IOException",
      "info" : "MethodDeclaration[7948-8863]:MethodDeclaration[7948-8863]"
    }, {
      "left" : "public String getText() throws IOException",
      "right" : "public String getText() throws IOException",
      "info" : "MethodDeclaration[9044-9438]:MethodDeclaration[9044-9438]"
    }, {
      "left" : "public String getValueAsString() throws IOException",
      "right" : "public String getValueAsString() throws IOException",
      "info" : "MethodDeclaration[9534-10041]:MethodDeclaration[9534-10041]"
    }, {
      "left" : "public String getValueAsString(String defValue) throws IOException",
      "right" : "public String getValueAsString(String defValue) throws IOException",
      "info" : "MethodDeclaration[10069-10595]:MethodDeclaration[10069-10595]"
    }, {
      "left" : "public int getValueAsInt() throws IOException",
      "right" : "public int getValueAsInt() throws IOException",
      "info" : "MethodDeclaration[10618-11223]:MethodDeclaration[10618-11223]"
    }, {
      "left" : "public int getValueAsInt(int defValue) throws IOException",
      "right" : "public int getValueAsInt(int defValue) throws IOException",
      "info" : "MethodDeclaration[11246-11870]:MethodDeclaration[11246-11870]"
    }, {
      "left" : "protected final String _getText2(JsonToken t)",
      "right" : "protected final String _getText2(JsonToken t)",
      "info" : "MethodDeclaration[11880-12323]:MethodDeclaration[11880-12323]"
    }, {
      "left" : "public char[] getTextCharacters() throws IOException",
      "right" : "public char[] getTextCharacters() throws IOException",
      "info" : "MethodDeclaration[12329-13656]:MethodDeclaration[12329-13656]"
    }, {
      "left" : "public int getTextLength() throws IOException",
      "right" : "public int getTextLength() throws IOException",
      "info" : "MethodDeclaration[13662-14436]:MethodDeclaration[13662-14436]"
    }, {
      "left" : "public int getTextOffset() throws IOException",
      "right" : "public int getTextOffset() throws IOException",
      "info" : "MethodDeclaration[14442-15127]:MethodDeclaration[14442-15127]"
    }, {
      "left" : "public byte[] getBinaryValue(Base64Variant b64variant) throws IOException",
      "right" : "public byte[] getBinaryValue(Base64Variant b64variant) throws IOException",
      "info" : "MethodDeclaration[15137-16469]:MethodDeclaration[15137-16469]"
    }, {
      "left" : "public int readBinaryValue(Base64Variant b64variant, OutputStream out) throws IOException",
      "right" : "public int readBinaryValue(Base64Variant b64variant, OutputStream out) throws IOException",
      "info" : "MethodDeclaration[16475-17109]:MethodDeclaration[16475-17109]"
    }, {
      "left" : "protected int _readBinary(Base64Variant b64variant, OutputStream out,\n                              byte[] buffer) throws IOException",
      "right" : "protected int _readBinary(Base64Variant b64variant, OutputStream out,\n                              byte[] buffer) throws IOException",
      "info" : "MethodDeclaration[17115-22327]:MethodDeclaration[17115-22327]"
    }, {
      "left" : "public JsonToken nextToken() throws IOException",
      "right" : "public JsonToken nextToken() throws IOException",
      "info" : "MethodDeclaration[22513-26507]:MethodDeclaration[22513-26507]"
    }, {
      "left" : "private final JsonToken _nextTokenNotInObject(int i) throws IOException",
      "right" : "private final JsonToken _nextTokenNotInObject(int i) throws IOException",
      "info" : "MethodDeclaration[26513-28038]:MethodDeclaration[26513-28038]"
    }, {
      "left" : "private final JsonToken _nextAfterName()",
      "right" : "private final JsonToken _nextAfterName()",
      "info" : "MethodDeclaration[28048-28716]:MethodDeclaration[28048-28716]"
    }, {
      "left" : "public boolean nextFieldName(SerializableString str) throws IOException",
      "right" : "public boolean nextFieldName(SerializableString str) throws IOException",
      "info" : "MethodDeclaration[28927-31996]:MethodDeclaration[28927-31996]"
    }, {
      "left" : "public String nextFieldName() throws IOException",
      "right" : "public String nextFieldName() throws IOException",
      "info" : "MethodDeclaration[32002-34945]:MethodDeclaration[32002-34945]"
    }, {
      "left" : "private final int _skipColonFast(int ptr) throws IOException",
      "right" : "private final int _skipColonFast(int ptr) throws IOException",
      "info" : "MethodDeclaration[35026-36660]:MethodDeclaration[35026-36660]"
    }, {
      "left" : "private final void _isNextTokenNameYes(int i) throws IOException",
      "right" : "private final void _isNextTokenNameYes(int i) throws IOException",
      "info" : "MethodDeclaration[36670-37885]:MethodDeclaration[36670-37885]"
    }, {
      "left" : "private final boolean _isNextTokenNameMaybe(int i, SerializableString str) throws IOException",
      "right" : "private final boolean _isNextTokenNameMaybe(int i, SerializableString str) throws IOException",
      "info" : "MethodDeclaration[37891-39481]:MethodDeclaration[37891-39481]"
    }, {
      "left" : "public String nextTextValue() throws IOException",
      "right" : "public String nextTextValue() throws IOException",
      "info" : "MethodDeclaration[39487-40621]:MethodDeclaration[39487-40621]"
    }, {
      "left" : "public int nextIntValue(int defaultValue) throws IOException",
      "right" : "public int nextIntValue(int defaultValue) throws IOException",
      "info" : "MethodDeclaration[40627-41627]:MethodDeclaration[40627-41627]"
    }, {
      "left" : "public long nextLongValue(long defaultValue) throws IOException",
      "right" : "public long nextLongValue(long defaultValue) throws IOException",
      "info" : "MethodDeclaration[41633-42638]:MethodDeclaration[41633-42638]"
    }, {
      "left" : "public Boolean nextBooleanValue() throws IOException",
      "right" : "public Boolean nextBooleanValue() throws IOException",
      "info" : "MethodDeclaration[42644-43807]:MethodDeclaration[42644-43807]"
    }, {
      "left" : "protected JsonToken _parsePosNumber(int c) throws IOException",
      "right" : "protected JsonToken _parsePosNumber(int c) throws IOException",
      "info" : "MethodDeclaration[43997-46358]:MethodDeclaration[43997-46358]"
    }, {
      "left" : "protected JsonToken _parseNegNumber() throws IOException",
      "right" : "protected JsonToken _parseNegNumber() throws IOException",
      "info" : "MethodDeclaration[46368-48389]:MethodDeclaration[46368-48389]"
    }, {
      "left" : "private final JsonToken _parseNumber2(char[] outBuf, int outPtr, boolean negative,\n            int intPartLength) throws IOException",
      "right" : "private final JsonToken _parseNumber2(char[] outBuf, int outPtr, boolean negative,\n            int intPartLength) throws IOException",
      "info" : "MethodDeclaration[48395-49860]:MethodDeclaration[48395-49860]"
    }, {
      "left" : "private final int _verifyNoLeadingZeroes() throws IOException",
      "right" : "private final int _verifyNoLeadingZeroes() throws IOException",
      "info" : "MethodDeclaration[49870-51256]:MethodDeclaration[49870-51256]"
    }, {
      "left" : "private final JsonToken _parseFloat(char[] outBuf, int outPtr, int c,\n            boolean negative, int integerPartLength) throws IOException",
      "right" : "private final JsonToken _parseFloat(char[] outBuf, int outPtr, int c,\n            boolean negative, int integerPartLength) throws IOException",
      "info" : "MethodDeclaration[51266-54615]:MethodDeclaration[51266-54615]"
    }, {
      "left" : "private final void _verifyRootSpace(int ch) throws IOException",
      "right" : "private final void _verifyRootSpace(int ch) throws IOException",
      "info" : "MethodDeclaration[54621-55382]:MethodDeclaration[54621-55382]"
    }, {
      "left" : "protected final String _parseName(int i) throws IOException",
      "right" : "protected final String _parseName(int i) throws IOException",
      "info" : "MethodDeclaration[55579-57941]:MethodDeclaration[55579-57941]"
    }, {
      "left" : "protected final String parseMediumName(int q2) throws IOException",
      "right" : "protected final String parseMediumName(int q2) throws IOException",
      "info" : "MethodDeclaration[57947-59233]:MethodDeclaration[57947-59233]"
    }, {
      "left" : "protected final String parseMediumName2(int q3, final int q2) throws IOException",
      "right" : "protected final String parseMediumName2(int q3, final int q2) throws IOException",
      "info" : "MethodDeclaration[59239-60579]:MethodDeclaration[59239-60579]"
    }, {
      "left" : "protected final String parseLongName(int q, final int q2, int q3) throws IOException",
      "right" : "protected final String parseLongName(int q, final int q2, int q3) throws IOException",
      "info" : "MethodDeclaration[60589-62712]:MethodDeclaration[60589-62712]"
    }, {
      "left" : "protected String slowParseName() throws IOException",
      "right" : "protected String slowParseName() throws IOException",
      "info" : "MethodDeclaration[62718-63344]:MethodDeclaration[62718-63344]"
    }, {
      "left" : "private final String parseName(int q1, int ch, int lastQuadBytes) throws IOException",
      "right" : "private final String parseName(int q1, int ch, int lastQuadBytes) throws IOException",
      "info" : "MethodDeclaration[63350-63514]:MethodDeclaration[63350-63514]"
    }, {
      "left" : "private final String parseName(int q1, int q2, int ch, int lastQuadBytes) throws IOException",
      "right" : "private final String parseName(int q1, int q2, int ch, int lastQuadBytes) throws IOException",
      "info" : "MethodDeclaration[63520-63721]:MethodDeclaration[63520-63721]"
    }, {
      "left" : "private final String parseName(int q1, int q2, int q3, int ch, int lastQuadBytes) throws IOException",
      "right" : "private final String parseName(int q1, int q2, int q3, int ch, int lastQuadBytes) throws IOException",
      "info" : "MethodDeclaration[63727-63965]:MethodDeclaration[63727-63965]"
    }, {
      "left" : "protected final String parseEscapedName(int[] quads, int qlen, int currQuad, int ch,\n            int currQuadBytes) throws IOException",
      "right" : "protected final String parseEscapedName(int[] quads, int qlen, int currQuad, int ch,\n            int currQuadBytes) throws IOException",
      "info" : "MethodDeclaration[63975-68223]:MethodDeclaration[63975-68223]"
    }, {
      "left" : "protected String _handleOddName(int ch) throws IOException",
      "right" : "protected String _handleOddName(int ch) throws IOException",
      "info" : "MethodDeclaration[68229-71017]:MethodDeclaration[68229-71017]"
    }, {
      "left" : "protected String _parseAposName() throws IOException",
      "right" : "protected String _parseAposName() throws IOException",
      "info" : "MethodDeclaration[71257-75356]:MethodDeclaration[71257-75356]"
    }, {
      "left" : "private final String findName(int q1, int lastQuadBytes) throws JsonParseException",
      "right" : "private final String findName(int q1, int lastQuadBytes) throws JsonParseException",
      "info" : "MethodDeclaration[75554-76011]:MethodDeclaration[75554-76011]"
    }, {
      "left" : "private final String findName(int q1, int q2, int lastQuadBytes) throws JsonParseException",
      "right" : "private final String findName(int q1, int q2, int lastQuadBytes) throws JsonParseException",
      "info" : "MethodDeclaration[76017-76515]:MethodDeclaration[76017-76515]"
    }, {
      "left" : "private final String findName(int q1, int q2, int q3, int lastQuadBytes) throws JsonParseException",
      "right" : "private final String findName(int q1, int q2, int q3, int lastQuadBytes) throws JsonParseException",
      "info" : "MethodDeclaration[76521-76957]:MethodDeclaration[76521-76957]"
    }, {
      "left" : "private final String findName(int[] quads, int qlen, int lastQuad, int lastQuadBytes) throws JsonParseException",
      "right" : "private final String findName(int[] quads, int qlen, int lastQuad, int lastQuadBytes) throws JsonParseException",
      "info" : "MethodDeclaration[76967-77427]:MethodDeclaration[76967-77427]"
    }, {
      "left" : "private final String addName(int[] quads, int qlen, int lastQuadBytes) throws JsonParseException",
      "right" : "private final String addName(int[] quads, int qlen, int lastQuadBytes) throws JsonParseException",
      "info" : "MethodDeclaration[77433-82110]:MethodDeclaration[77433-82110]"
    }, {
      "left" : "protected void _finishString() throws IOException",
      "right" : "protected void _finishString() throws IOException",
      "info" : "MethodDeclaration[82306-83327]:MethodDeclaration[82306-83327]"
    }, {
      "left" : "protected String _finishAndReturnString() throws IOException",
      "right" : "protected String _finishAndReturnString() throws IOException",
      "info" : "MethodDeclaration[83333-84414]:MethodDeclaration[83333-84414]"
    }, {
      "left" : "private final void _finishString2(char[] outBuf, int outPtr)\n        throws IOException",
      "right" : "private final void _finishString2(char[] outBuf, int outPtr)\n        throws IOException",
      "info" : "MethodDeclaration[84424-87339]:MethodDeclaration[84424-87339]"
    }, {
      "left" : "protected void _skipString() throws IOException",
      "right" : "protected void _skipString() throws IOException",
      "info" : "MethodDeclaration[87345-89316]:MethodDeclaration[87345-89316]"
    }, {
      "left" : "protected JsonToken _handleUnexpectedValue(int c)\n        throws IOException",
      "right" : "protected JsonToken _handleUnexpectedValue(int c)\n        throws IOException",
      "info" : "MethodDeclaration[89322-91368]:MethodDeclaration[89322-91368]"
    }, {
      "left" : "protected JsonToken _handleApos()\n        throws IOException",
      "right" : "protected JsonToken _handleApos()\n        throws IOException",
      "info" : "MethodDeclaration[91374-94475]:MethodDeclaration[91374-94475]"
    }, {
      "left" : "protected JsonToken _handleInvalidNumberStart(int ch, boolean neg)\n        throws IOException",
      "right" : "protected JsonToken _handleInvalidNumberStart(int ch, boolean neg)\n        throws IOException",
      "info" : "MethodDeclaration[94485-95667]:MethodDeclaration[94485-95667]"
    }, {
      "left" : "protected final void _matchToken(String matchStr, int i) throws IOException",
      "right" : "protected final void _matchToken(String matchStr, int i) throws IOException",
      "info" : "MethodDeclaration[95673-96313]:MethodDeclaration[95673-96313]"
    }, {
      "left" : "private final void _matchToken2(String matchStr, int i) throws IOException",
      "right" : "private final void _matchToken2(String matchStr, int i) throws IOException",
      "info" : "MethodDeclaration[96319-97066]:MethodDeclaration[96319-97066]"
    }, {
      "left" : "private final void _checkMatchEnd(String matchStr, int i, int ch) throws IOException",
      "right" : "private final void _checkMatchEnd(String matchStr, int i, int ch) throws IOException",
      "info" : "MethodDeclaration[97072-97386]:MethodDeclaration[97072-97386]"
    }, {
      "left" : "private final int _skipWS() throws IOException",
      "right" : "private final int _skipWS() throws IOException",
      "info" : "MethodDeclaration[97594-98350]:MethodDeclaration[97594-98350]"
    }, {
      "left" : "private final int _skipWS2() throws IOException",
      "right" : "private final int _skipWS2() throws IOException",
      "info" : "MethodDeclaration[98356-99357]:MethodDeclaration[98356-99357]"
    }, {
      "left" : "private final int _skipWSOrEnd() throws IOException",
      "right" : "private final int _skipWSOrEnd() throws IOException",
      "info" : "MethodDeclaration[99367-100983]:MethodDeclaration[99367-100983]"
    }, {
      "left" : "private final int _skipWSOrEnd2() throws IOException",
      "right" : "private final int _skipWSOrEnd2() throws IOException",
      "info" : "MethodDeclaration[100989-101934]:MethodDeclaration[100989-101934]"
    }, {
      "left" : "private final int _skipColon() throws IOException",
      "right" : "private final int _skipColon() throws IOException",
      "info" : "MethodDeclaration[101940-103859]:MethodDeclaration[101940-103859]"
    }, {
      "left" : "private final int _skipColon2(boolean gotColon) throws IOException",
      "right" : "private final int _skipColon2(boolean gotColon) throws IOException",
      "info" : "MethodDeclaration[103865-105228]:MethodDeclaration[103865-105228]"
    }, {
      "left" : "private final void _skipComment() throws IOException",
      "right" : "private final void _skipComment() throws IOException",
      "info" : "MethodDeclaration[105234-105952]:MethodDeclaration[105234-105952]"
    }, {
      "left" : "private final void _skipCComment() throws IOException",
      "right" : "private final void _skipCComment() throws IOException",
      "info" : "MethodDeclaration[105958-107518]:MethodDeclaration[105958-107518]"
    }, {
      "left" : "private final boolean _skipYAMLComment() throws IOException",
      "right" : "private final boolean _skipYAMLComment() throws IOException",
      "info" : "MethodDeclaration[107524-107728]:MethodDeclaration[107524-107728]"
    }, {
      "left" : "private final void _skipLine() throws IOException",
      "right" : "private final void _skipLine() throws IOException",
      "info" : "MethodDeclaration[107734-109089]:MethodDeclaration[107734-109089]"
    }, {
      "left" : "protected char _decodeEscaped() throws IOException",
      "right" : "protected char _decodeEscaped() throws IOException",
      "info" : "MethodDeclaration[109099-110599]:MethodDeclaration[109099-110599]"
    }, {
      "left" : "protected int _decodeCharForError(int firstByte) throws IOException",
      "right" : "protected int _decodeCharForError(int firstByte) throws IOException",
      "info" : "MethodDeclaration[110605-112209]:MethodDeclaration[110605-112209]"
    }, {
      "left" : "private final int _decodeUtf8_2(int c) throws IOException",
      "right" : "private final int _decodeUtf8_2(int c) throws IOException",
      "info" : "MethodDeclaration[112397-112743]:MethodDeclaration[112397-112743]"
    }, {
      "left" : "private final int _decodeUtf8_3(int c1) throws IOException",
      "right" : "private final int _decodeUtf8_3(int c1) throws IOException",
      "info" : "MethodDeclaration[112749-113388]:MethodDeclaration[112749-113388]"
    }, {
      "left" : "private final int _decodeUtf8_3fast(int c1) throws IOException",
      "right" : "private final int _decodeUtf8_3fast(int c1) throws IOException",
      "info" : "MethodDeclaration[113394-113873]:MethodDeclaration[113394-113873]"
    }, {
      "left" : "private final int _decodeUtf8_4(int c) throws IOException",
      "right" : "private final int _decodeUtf8_4(int c) throws IOException",
      "info" : "MethodDeclaration[113879-115027]:MethodDeclaration[113879-115027]"
    }, {
      "left" : "private final void _skipUtf8_2(int c) throws IOException",
      "right" : "private final void _skipUtf8_2(int c) throws IOException",
      "info" : "MethodDeclaration[115033-115327]:MethodDeclaration[115033-115327]"
    }, {
      "left" : "private final void _skipUtf8_3(int c) throws IOException",
      "right" : "private final void _skipUtf8_3(int c) throws IOException",
      "info" : "MethodDeclaration[115439-115980]:MethodDeclaration[115439-115980]"
    }, {
      "left" : "private final void _skipUtf8_4(int c) throws IOException",
      "right" : "private final void _skipUtf8_4(int c) throws IOException",
      "info" : "MethodDeclaration[115986-116736]:MethodDeclaration[115986-116736]"
    }, {
      "left" : "protected final void _skipCR() throws IOException",
      "right" : "protected final void _skipCR() throws IOException",
      "info" : "MethodDeclaration[116925-117327]:MethodDeclaration[116925-117327]"
    }, {
      "left" : "private int nextByte() throws IOException",
      "right" : "private int nextByte() throws IOException",
      "info" : "MethodDeclaration[117337-117521]:MethodDeclaration[117337-117521]"
    }, {
      "left" : "protected void _reportInvalidToken(String matchedPart) throws IOException",
      "right" : "protected void _reportInvalidToken(String matchedPart) throws IOException",
      "info" : "MethodDeclaration[117712-117876]:MethodDeclaration[117712-117876]"
    }, {
      "left" : "protected void _reportInvalidToken(String matchedPart, String msg) throws IOException",
      "right" : "protected void _reportInvalidToken(String matchedPart, String msg) throws IOException",
      "info" : "MethodDeclaration[117882-118690]:MethodDeclaration[117882-118690]"
    }, {
      "left" : "protected void _reportInvalidChar(int c)\n        throws JsonParseException",
      "right" : "protected void _reportInvalidChar(int c)\n        throws JsonParseException",
      "info" : "MethodDeclaration[118704-118955]:MethodDeclaration[118704-118955]"
    }, {
      "left" : "protected void _reportInvalidInitial(int mask)\n        throws JsonParseException",
      "right" : "protected void _reportInvalidInitial(int mask)\n        throws JsonParseException",
      "info" : "MethodDeclaration[118961-119132]:MethodDeclaration[118961-119132]"
    }, {
      "left" : "protected void _reportInvalidOther(int mask)\n        throws JsonParseException",
      "right" : "protected void _reportInvalidOther(int mask)\n        throws JsonParseException",
      "info" : "MethodDeclaration[119138-119308]:MethodDeclaration[119138-119308]"
    }, {
      "left" : "protected void _reportInvalidOther(int mask, int ptr)\n        throws JsonParseException",
      "right" : "protected void _reportInvalidOther(int mask, int ptr)\n        throws JsonParseException",
      "info" : "MethodDeclaration[119314-119473]:MethodDeclaration[119314-119473]"
    }, {
      "left" : "public static int[] growArrayBy(int[] arr, int more)",
      "right" : "public static int[] growArrayBy(int[] arr, int more)",
      "info" : "MethodDeclaration[119479-119668]:MethodDeclaration[119479-119668]"
    }, {
      "left" : "protected final byte[] _decodeBase64(Base64Variant b64variant) throws IOException",
      "right" : "protected final byte[] _decodeBase64(Base64Variant b64variant) throws IOException",
      "info" : "MethodDeclaration[119857-124530]:MethodDeclaration[119857-124530]"
    }, {
      "left" : "public JsonLocation getTokenLocation()",
      "right" : "public JsonLocation getTokenLocation()",
      "info" : "MethodDeclaration[124797-125236]:MethodDeclaration[124797-125225]"
    }, {
      "left" : "public JsonLocation getCurrentLocation()",
      "right" : "public JsonLocation getCurrentLocation()",
      "info" : "MethodDeclaration[125305-125608]:MethodDeclaration[125294-125597]"
    }, {
      "left" : "private final void _updateLocation()",
      "right" : "private final void _updateLocation()",
      "info" : "MethodDeclaration[125632-125845]:MethodDeclaration[125621-125834]"
    }, {
      "left" : "private final void _updateNameLocation()",
      "right" : "private final void _updateNameLocation()",
      "info" : "MethodDeclaration[125869-126083]:MethodDeclaration[125858-126072]"
    }, {
      "left" : "private final static int pad(int q, int bytes)",
      "right" : "private final static int pad(int q, int bytes)",
      "info" : "MethodDeclaration[126264-126470]:MethodDeclaration[126253-126459]"
    } ],
    "mappings" : [
 {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[616-622]:Modifier[616-622]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[623-628]:TYPE_DECLARATION_KIND[623-628]"
    }, {
      "left" : "UTF8StreamJsonParser",
      "right" : "UTF8StreamJsonParser",
      "info" : "SimpleName[629-649]:SimpleName[629-649]"
    }, {
      "left" : "ParserBase",
      "right" : "ParserBase",
      "info" : "SimpleType[662-672]:SimpleType[662-672]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[3521-3527]:Modifier[3521-3527]"
    }, {
      "left" : "UTF8StreamJsonParser",
      "right" : "UTF8StreamJsonParser",
      "info" : "SimpleName[3528-3548]:SimpleName[3528-3548]"
    }, {
      "left" : "IOContext ctxt",
      "right" : "IOContext ctxt",
      "info" : "SingleVariableDeclaration[3549-3563]:SingleVariableDeclaration[3549-3563]"
    }, {
      "left" : "int features",
      "right" : "int features",
      "info" : "SingleVariableDeclaration[3565-3577]:SingleVariableDeclaration[3565-3577]"
    }, {
      "left" : "InputStream in",
      "right" : "InputStream in",
      "info" : "SingleVariableDeclaration[3579-3593]:SingleVariableDeclaration[3579-3593]"
    }, {
      "left" : "ObjectCodec codec",
      "right" : "ObjectCodec codec",
      "info" : "SingleVariableDeclaration[3607-3624]:SingleVariableDeclaration[3607-3624]"
    }, {
      "left" : "ByteQuadsCanonicalizer sym",
      "right" : "ByteQuadsCanonicalizer sym",
      "info" : "SingleVariableDeclaration[3626-3652]:SingleVariableDeclaration[3626-3652]"
    }, {
      "left" : "byte[] inputBuffer",
      "right" : "byte[] inputBuffer",
      "info" : "SingleVariableDeclaration[3666-3684]:SingleVariableDeclaration[3666-3684]"
    }, {
      "left" : "int start",
      "right" : "int start",
      "info" : "SingleVariableDeclaration[3686-3695]:SingleVariableDeclaration[3686-3695]"
    }, {
      "left" : "int end",
      "right" : "int end",
      "info" : "SingleVariableDeclaration[3697-3704]:SingleVariableDeclaration[3697-3704]"
    }, {
      "left" : "boolean bufferRecyclable",
      "right" : "boolean bufferRecyclable",
      "info" : "SingleVariableDeclaration[3718-3742]:SingleVariableDeclaration[3718-3742]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3748-4145]:Block[3748-4145]"
    }, {
      "left" : "super(ctxt, features);",
      "right" : "super(ctxt, features);",
      "info" : "SuperConstructorInvocation[3758-3780]:SuperConstructorInvocation[3758-3780]"
    }, {
      "left" : "_inputStream = in;",
      "right" : "_inputStream = in;",
      "info" : "ExpressionStatement[3789-3807]:ExpressionStatement[3789-3807]"
    }, {
      "left" : "_objectCodec = codec;",
      "right" : "_objectCodec = codec;",
      "info" : "ExpressionStatement[3816-3837]:ExpressionStatement[3816-3837]"
    }, {
      "left" : "_symbols = sym;",
      "right" : "_symbols = sym;",
      "info" : "ExpressionStatement[3846-3861]:ExpressionStatement[3846-3861]"
    }, {
      "left" : "_inputBuffer = inputBuffer;",
      "right" : "_inputBuffer = inputBuffer;",
      "info" : "ExpressionStatement[3870-3897]:ExpressionStatement[3870-3897]"
    }, {
      "left" : "_inputPtr = start;",
      "right" : "_inputPtr = start;",
      "info" : "ExpressionStatement[3906-3924]:ExpressionStatement[3906-3924]"
    }, {
      "left" : "_inputEnd = end;",
      "right" : "_inputEnd = end;",
      "info" : "ExpressionStatement[3933-3949]:ExpressionStatement[3933-3949]"
    }, {
      "left" : "_currInputRowStart = start;",
      "right" : "_currInputRowStart = start;",
      "info" : "ExpressionStatement[3958-3985]:ExpressionStatement[3958-3985]"
    }, {
      "left" : "_currInputProcessed = -start;",
      "right" : "_currInputProcessed = -start;",
      "info" : "ExpressionStatement[4064-4093]:ExpressionStatement[4064-4093]"
    }, {
      "left" : "_bufferRecyclable = bufferRecyclable;",
      "right" : "_bufferRecyclable = bufferRecyclable;",
      "info" : "ExpressionStatement[4102-4139]:ExpressionStatement[4102-4139]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[4151-4160]:MarkerAnnotation[4151-4160]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[4165-4171]:Modifier[4165-4171]"
    }, {
      "left" : "ObjectCodec",
      "right" : "ObjectCodec",
      "info" : "SimpleType[4172-4183]:SimpleType[4172-4183]"
    }, {
      "left" : "getCodec",
      "right" : "getCodec",
      "info" : "SimpleName[4184-4192]:SimpleName[4184-4192]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4195-4231]:Block[4195-4231]"
    }, {
      "left" : "return _objectCodec;",
      "right" : "return _objectCodec;",
      "info" : "ReturnStatement[4205-4225]:ReturnStatement[4205-4225]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[4237-4246]:MarkerAnnotation[4237-4246]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[4251-4257]:Modifier[4251-4257]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[4258-4262]:PrimitiveType[4258-4262]"
    }, {
      "left" : "setCodec",
      "right" : "setCodec",
      "info" : "SimpleName[4263-4271]:SimpleName[4263-4271]"
    }, {
      "left" : "ObjectCodec c",
      "right" : "ObjectCodec c",
      "info" : "SingleVariableDeclaration[4272-4285]:SingleVariableDeclaration[4272-4285]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4287-4320]:Block[4287-4320]"
    }, {
      "left" : "_objectCodec = c;",
      "right" : "_objectCodec = c;",
      "info" : "ExpressionStatement[4297-4314]:ExpressionStatement[4297-4314]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[4506-4515]:MarkerAnnotation[4506-4515]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[4520-4526]:Modifier[4520-4526]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[4527-4530]:PrimitiveType[4527-4530]"
    }, {
      "left" : "releaseBuffered",
      "right" : "releaseBuffered",
      "info" : "SimpleName[4531-4546]:SimpleName[4531-4546]"
    }, {
      "left" : "OutputStream out",
      "right" : "OutputStream out",
      "info" : "SingleVariableDeclaration[4547-4563]:SingleVariableDeclaration[4547-4563]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[4572-4583]:SimpleType[4572-4583]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4588-4840]:Block[4588-4840]"
    }, {
      "left" : "int count = _inputEnd - _inputPtr;",
      "right" : "int count = _inputEnd - _inputPtr;",
      "info" : "VariableDeclarationStatement[4598-4632]:VariableDeclarationStatement[4598-4632]"
    }, {
      "left" : "if (count < 1)",
      "right" : "if (count < 1)",
      "info" : "IfStatement[4641-4689]:IfStatement[4641-4689]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4656-4689]:Block[4656-4689]"
    }, {
      "left" : "return 0;",
      "right" : "return 0;",
      "info" : "ReturnStatement[4670-4679]:ReturnStatement[4670-4679]"
    }, {
      "left" : "int origPtr = _inputPtr;",
      "right" : "int origPtr = _inputPtr;",
      "info" : "VariableDeclarationStatement[4739-4763]:VariableDeclarationStatement[4739-4763]"
    }, {
      "left" : "out.write(_inputBuffer, origPtr, count);",
      "right" : "out.write(_inputBuffer, origPtr, count);",
      "info" : "ExpressionStatement[4772-4812]:ExpressionStatement[4772-4812]"
    }, {
      "left" : "return count;",
      "right" : "return count;",
      "info" : "ReturnStatement[4821-4834]:ReturnStatement[4821-4834]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[4846-4855]:MarkerAnnotation[4846-4855]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[4860-4866]:Modifier[4860-4866]"
    }, {
      "left" : "Object",
      "right" : "Object",
      "info" : "SimpleType[4867-4873]:SimpleType[4867-4873]"
    }, {
      "left" : "getInputSource",
      "right" : "getInputSource",
      "info" : "SimpleName[4874-4888]:SimpleName[4874-4888]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4891-4927]:Block[4891-4927]"
    }, {
      "left" : "return _inputStream;",
      "right" : "return _inputStream;",
      "info" : "ReturnStatement[4901-4921]:ReturnStatement[4901-4921]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[5117-5126]:MarkerAnnotation[5117-5126]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[5131-5140]:Modifier[5131-5140]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[5141-5146]:Modifier[5141-5146]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[5147-5154]:PrimitiveType[5147-5154]"
    }, {
      "left" : "loadMore",
      "right" : "loadMore",
      "info" : "SimpleName[5155-5163]:SimpleName[5155-5163]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[5173-5184]:SimpleType[5173-5184]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5189-6015]:Block[5189-6015]"
    }, {
      "left" : "_currInputProcessed += _inputEnd;",
      "right" : "_currInputProcessed += _inputEnd;",
      "info" : "ExpressionStatement[5199-5232]:ExpressionStatement[5199-5232]"
    }, {
      "left" : "_currInputRowStart -= _inputEnd;",
      "right" : "_currInputRowStart -= _inputEnd;",
      "info" : "ExpressionStatement[5241-5273]:ExpressionStatement[5241-5273]"
    }, {
      "left" : "if (_inputStream != null)",
      "right" : "if (_inputStream != null)",
      "info" : "IfStatement[5291-5987]:IfStatement[5291-5987]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5317-5987]:Block[5317-5987]"
    }, {
      "left" : "int space = _inputBuffer.length;",
      "right" : "int space = _inputBuffer.length;",
      "info" : "VariableDeclarationStatement[5331-5363]:VariableDeclarationStatement[5331-5363]"
    }, {
      "left" : "if (space == 0)",
      "right" : "if (space == 0)",
      "info" : "IfStatement[5376-5475]:IfStatement[5376-5475]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5392-5475]:Block[5392-5475]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[5448-5461]:ReturnStatement[5448-5461]"
    }, {
      "left" : "int count = _inputStream.read(_inputBuffer, 0, space);",
      "right" : "int count = _inputStream.read(_inputBuffer, 0, space);",
      "info" : "VariableDeclarationStatement[5501-5555]:VariableDeclarationStatement[5501-5555]"
    }, {
      "left" : "if (count > 0)",
      "right" : "if (count > 0)",
      "info" : "IfStatement[5568-5693]:IfStatement[5568-5693]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5583-5693]:Block[5583-5693]"
    }, {
      "left" : "_inputPtr = 0;",
      "right" : "_inputPtr = 0;",
      "info" : "ExpressionStatement[5601-5615]:ExpressionStatement[5601-5615]"
    }, {
      "left" : "_inputEnd = count;",
      "right" : "_inputEnd = count;",
      "info" : "ExpressionStatement[5632-5650]:ExpressionStatement[5632-5650]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[5667-5679]:ReturnStatement[5667-5679]"
    }, {
      "left" : "_closeInput();",
      "right" : "_closeInput();",
      "info" : "ExpressionStatement[5734-5748]:ExpressionStatement[5734-5748]"
    }, {
      "left" : "if (count == 0)",
      "right" : "if (count == 0)",
      "info" : "IfStatement[5813-5977]:IfStatement[5813-5977]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5829-5977]:Block[5829-5977]"
    }, {
      "left" : "throw new IOException(\"InputStream.read() returned 0 characters when trying to read \"+_inputBuffer.length+\" bytes\");",
      "right" : "throw new IOException(\"InputStream.read() returned 0 characters when trying to read \"+_inputBuffer.length+\" bytes\");",
      "info" : "ThrowStatement[5847-5963]:ThrowStatement[5847-5963]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[5996-6009]:ReturnStatement[5996-6009]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[6186-6195]:Modifier[6186-6195]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[6196-6201]:Modifier[6196-6201]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[6202-6209]:PrimitiveType[6202-6209]"
    }, {
      "left" : "_loadToHaveAtLeast",
      "right" : "_loadToHaveAtLeast",
      "info" : "SimpleName[6210-6228]:SimpleName[6210-6228]"
    }, {
      "left" : "int minAvailable",
      "right" : "int minAvailable",
      "info" : "SingleVariableDeclaration[6229-6245]:SingleVariableDeclaration[6229-6245]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[6254-6265]:SimpleType[6254-6265]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6270-7435]:Block[6270-7435]"
    }, {
      "left" : "if (_inputStream == null)",
      "right" : "if (_inputStream == null)",
      "info" : "IfStatement[6375-6438]:IfStatement[6375-6438]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6401-6438]:Block[6401-6438]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[6415-6428]:ReturnStatement[6415-6428]"
    }, {
      "left" : "int amount = _inputEnd - _inputPtr;",
      "right" : "int amount = _inputEnd - _inputPtr;",
      "info" : "VariableDeclarationStatement[6496-6531]:VariableDeclarationStatement[6496-6531]"
    }, {
      "left" : "if (amount > 0 && _inputPtr > 0)",
      "right" : "if (amount > 0 && _inputPtr > 0)",
      "info" : "IfStatement[6540-6831]:IfStatement[6540-6831]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6573-6787]:Block[6573-6787]"
    }, {
      "left" : "_currInputProcessed += _inputPtr;",
      "right" : "_currInputProcessed += _inputPtr;",
      "info" : "ExpressionStatement[6587-6620]:ExpressionStatement[6587-6620]"
    }, {
      "left" : "_currInputRowStart -= _inputPtr;",
      "right" : "_currInputRowStart -= _inputPtr;",
      "info" : "ExpressionStatement[6633-6665]:ExpressionStatement[6633-6665]"
    }, {
      "left" : "System.arraycopy(_inputBuffer, _inputPtr, _inputBuffer, 0, amount);",
      "right" : "System.arraycopy(_inputBuffer, _inputPtr, _inputBuffer, 0, amount);",
      "info" : "ExpressionStatement[6678-6745]:ExpressionStatement[6678-6745]"
    }, {
      "left" : "_inputEnd = amount;",
      "right" : "_inputEnd = amount;",
      "info" : "ExpressionStatement[6758-6777]:ExpressionStatement[6758-6777]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6793-6831]:Block[6793-6831]"
    }, {
      "left" : "_inputEnd = 0;",
      "right" : "_inputEnd = 0;",
      "info" : "ExpressionStatement[6807-6821]:ExpressionStatement[6807-6821]"
    }, {
      "left" : "_inputPtr = 0;",
      "right" : "_inputPtr = 0;",
      "info" : "ExpressionStatement[6840-6854]:ExpressionStatement[6840-6854]"
    }, {
      "left" : "while (_inputEnd < minAvailable)",
      "right" : "while (_inputEnd < minAvailable)",
      "info" : "WhileStatement[6863-7408]:WhileStatement[6863-7408]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6896-7408]:Block[6896-7408]"
    }, {
      "left" : "int count = _inputStream.read(_inputBuffer, _inputEnd, _inputBuffer.length - _inputEnd);",
      "right" : "int count = _inputStream.read(_inputBuffer, _inputEnd, _inputBuffer.length - _inputEnd);",
      "info" : "VariableDeclarationStatement[6910-6998]:VariableDeclarationStatement[6910-6998]"
    }, {
      "left" : "if (count < 1)",
      "right" : "if (count < 1)",
      "info" : "IfStatement[7011-7366]:IfStatement[7011-7366]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7026-7366]:Block[7026-7366]"
    }, {
      "left" : "_closeInput();",
      "right" : "_closeInput();",
      "info" : "ExpressionStatement[7076-7090]:ExpressionStatement[7076-7090]"
    }, {
      "left" : "if (count == 0)",
      "right" : "if (count == 0)",
      "info" : "IfStatement[7163-7322]:IfStatement[7163-7322]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7179-7322]:Block[7179-7322]"
    }, {
      "left" : "throw new IOException(\"InputStream.read() returned 0 characters when trying to read \"+amount+\" bytes\");",
      "right" : "throw new IOException(\"InputStream.read() returned 0 characters when trying to read \"+amount+\" bytes\");",
      "info" : "ThrowStatement[7201-7304]:ThrowStatement[7201-7304]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[7339-7352]:ReturnStatement[7339-7352]"
    }, {
      "left" : "_inputEnd += count;",
      "right" : "_inputEnd += count;",
      "info" : "ExpressionStatement[7379-7398]:ExpressionStatement[7379-7398]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[7417-7429]:ReturnStatement[7417-7429]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[7445-7454]:MarkerAnnotation[7445-7454]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[7459-7468]:Modifier[7459-7468]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[7469-7473]:PrimitiveType[7469-7473]"
    }, {
      "left" : "_closeInput",
      "right" : "_closeInput",
      "info" : "SimpleName[7474-7485]:SimpleName[7474-7485]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[7495-7506]:SimpleType[7495-7506]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7511-7942]:Block[7511-7942]"
    }, {
      "left" : "if (_inputStream != null)",
      "right" : "if (_inputStream != null)",
      "info" : "IfStatement[7724-7936]:IfStatement[7724-7936]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7750-7936]:Block[7750-7936]"
    }, {
      "left" : "if (_ioContext.isResourceManaged() || isEnabled(Feature.AUTO_CLOSE_SOURCE))",
      "right" : "if (_ioContext.isResourceManaged() || isEnabled(Feature.AUTO_CLOSE_SOURCE))",
      "info" : "IfStatement[7764-7893]:IfStatement[7764-7893]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7840-7893]:Block[7840-7893]"
    }, {
      "left" : "_inputStream.close();",
      "right" : "_inputStream.close();",
      "info" : "ExpressionStatement[7858-7879]:ExpressionStatement[7858-7879]"
    }, {
      "left" : "_inputStream = null;",
      "right" : "_inputStream = null;",
      "info" : "ExpressionStatement[7906-7926]:ExpressionStatement[7906-7926]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[8200-8209]:MarkerAnnotation[8200-8209]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[8214-8223]:Modifier[8214-8223]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[8224-8228]:PrimitiveType[8224-8228]"
    }, {
      "left" : "_releaseBuffers",
      "right" : "_releaseBuffers",
      "info" : "SimpleName[8229-8244]:SimpleName[8229-8244]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[8254-8265]:SimpleType[8254-8265]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8270-8863]:Block[8270-8863]"
    }, {
      "left" : "super._releaseBuffers();",
      "right" : "super._releaseBuffers();",
      "info" : "ExpressionStatement[8280-8304]:ExpressionStatement[8280-8304]"
    }, {
      "left" : "_symbols.release();",
      "right" : "_symbols.release();",
      "info" : "ExpressionStatement[8353-8372]:ExpressionStatement[8353-8372]"
    }, {
      "left" : "if (_bufferRecyclable)",
      "right" : "if (_bufferRecyclable)",
      "info" : "IfStatement[8381-8857]:IfStatement[8381-8857]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8404-8857]:Block[8404-8857]"
    }, {
      "left" : "byte[] buf = _inputBuffer;",
      "right" : "byte[] buf = _inputBuffer;",
      "info" : "VariableDeclarationStatement[8418-8444]:VariableDeclarationStatement[8418-8444]"
    }, {
      "left" : "if (buf != null)",
      "right" : "if (buf != null)",
      "info" : "IfStatement[8457-8847]:IfStatement[8457-8847]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8474-8847]:Block[8474-8847]"
    }, {
      "left" : "_inputBuffer = ByteArrayBuilder.NO_BYTES;",
      "right" : "_inputBuffer = ByteArrayBuilder.NO_BYTES;",
      "info" : "ExpressionStatement[8739-8780]:ExpressionStatement[8739-8780]"
    }, {
      "left" : "_ioContext.releaseReadIOBuffer(buf);",
      "right" : "_ioContext.releaseReadIOBuffer(buf);",
      "info" : "ExpressionStatement[8797-8833]:ExpressionStatement[8797-8833]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[9044-9053]:MarkerAnnotation[9044-9053]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[9058-9064]:Modifier[9058-9064]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[9065-9071]:SimpleType[9065-9071]"
    }, {
      "left" : "getText",
      "right" : "getText",
      "info" : "SimpleName[9072-9079]:SimpleName[9072-9079]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[9089-9100]:SimpleType[9089-9100]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9105-9438]:Block[9105-9438]"
    }, {
      "left" : "if (_currToken == JsonToken.VALUE_STRING)",
      "right" : "if (_currToken == JsonToken.VALUE_STRING)",
      "info" : "IfStatement[9115-9394]:IfStatement[9115-9394]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9157-9394]:Block[9157-9394]"
    }, {
      "left" : "if (_tokenIncomplete)",
      "right" : "if (_tokenIncomplete)",
      "info" : "IfStatement[9171-9333]:IfStatement[9171-9333]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9193-9333]:Block[9193-9333]"
    }, {
      "left" : "_tokenIncomplete = false;",
      "right" : "_tokenIncomplete = false;",
      "info" : "ExpressionStatement[9211-9236]:ExpressionStatement[9211-9236]"
    }, {
      "left" : "return _finishAndReturnString();",
      "right" : "return _finishAndReturnString();",
      "info" : "ReturnStatement[9253-9285]:ReturnStatement[9253-9285]"
    }, {
      "left" : "return _textBuffer.contentsAsString();",
      "right" : "return _textBuffer.contentsAsString();",
      "info" : "ReturnStatement[9346-9384]:ReturnStatement[9346-9384]"
    }, {
      "left" : "return _getText2(_currToken);",
      "right" : "return _getText2(_currToken);",
      "info" : "ReturnStatement[9403-9432]:ReturnStatement[9403-9432]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[9534-9543]:MarkerAnnotation[9534-9543]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[9548-9554]:Modifier[9548-9554]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[9555-9561]:SimpleType[9555-9561]"
    }, {
      "left" : "getValueAsString",
      "right" : "getValueAsString",
      "info" : "SimpleName[9562-9578]:SimpleName[9562-9578]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[9588-9599]:SimpleType[9588-9599]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9604-10041]:Block[9604-10041]"
    }, {
      "left" : "if (_currToken == JsonToken.VALUE_STRING)",
      "right" : "if (_currToken == JsonToken.VALUE_STRING)",
      "info" : "IfStatement[9614-9893]:IfStatement[9614-9893]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9656-9893]:Block[9656-9893]"
    }, {
      "left" : "if (_tokenIncomplete)",
      "right" : "if (_tokenIncomplete)",
      "info" : "IfStatement[9670-9832]:IfStatement[9670-9832]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9692-9832]:Block[9692-9832]"
    }, {
      "left" : "_tokenIncomplete = false;",
      "right" : "_tokenIncomplete = false;",
      "info" : "ExpressionStatement[9710-9735]:ExpressionStatement[9710-9735]"
    }, {
      "left" : "return _finishAndReturnString();",
      "right" : "return _finishAndReturnString();",
      "info" : "ReturnStatement[9752-9784]:ReturnStatement[9752-9784]"
    }, {
      "left" : "return _textBuffer.contentsAsString();",
      "right" : "return _textBuffer.contentsAsString();",
      "info" : "ReturnStatement[9845-9883]:ReturnStatement[9845-9883]"
    }, {
      "left" : "if (_currToken == JsonToken.FIELD_NAME)",
      "right" : "if (_currToken == JsonToken.FIELD_NAME)",
      "info" : "IfStatement[9902-9990]:IfStatement[9902-9990]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9942-9990]:Block[9942-9990]"
    }, {
      "left" : "return getCurrentName();",
      "right" : "return getCurrentName();",
      "info" : "ReturnStatement[9956-9980]:ReturnStatement[9956-9980]"
    }, {
      "left" : "return super.getValueAsString(null);",
      "right" : "return super.getValueAsString(null);",
      "info" : "ReturnStatement[9999-10035]:ReturnStatement[9999-10035]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[10069-10078]:MarkerAnnotation[10069-10078]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[10083-10089]:Modifier[10083-10089]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[10090-10096]:SimpleType[10090-10096]"
    }, {
      "left" : "getValueAsString",
      "right" : "getValueAsString",
      "info" : "SimpleName[10097-10113]:SimpleName[10097-10113]"
    }, {
      "left" : "String defValue",
      "right" : "String defValue",
      "info" : "SingleVariableDeclaration[10114-10129]:SingleVariableDeclaration[10114-10129]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[10138-10149]:SimpleType[10138-10149]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10154-10595]:Block[10154-10595]"
    }, {
      "left" : "if (_currToken == JsonToken.VALUE_STRING)",
      "right" : "if (_currToken == JsonToken.VALUE_STRING)",
      "info" : "IfStatement[10164-10443]:IfStatement[10164-10443]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10206-10443]:Block[10206-10443]"
    }, {
      "left" : "if (_tokenIncomplete)",
      "right" : "if (_tokenIncomplete)",
      "info" : "IfStatement[10220-10382]:IfStatement[10220-10382]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10242-10382]:Block[10242-10382]"
    }, {
      "left" : "_tokenIncomplete = false;",
      "right" : "_tokenIncomplete = false;",
      "info" : "ExpressionStatement[10260-10285]:ExpressionStatement[10260-10285]"
    }, {
      "left" : "return _finishAndReturnString();",
      "right" : "return _finishAndReturnString();",
      "info" : "ReturnStatement[10302-10334]:ReturnStatement[10302-10334]"
    }, {
      "left" : "return _textBuffer.contentsAsString();",
      "right" : "return _textBuffer.contentsAsString();",
      "info" : "ReturnStatement[10395-10433]:ReturnStatement[10395-10433]"
    }, {
      "left" : "if (_currToken == JsonToken.FIELD_NAME)",
      "right" : "if (_currToken == JsonToken.FIELD_NAME)",
      "info" : "IfStatement[10452-10540]:IfStatement[10452-10540]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10492-10540]:Block[10492-10540]"
    }, {
      "left" : "return getCurrentName();",
      "right" : "return getCurrentName();",
      "info" : "ReturnStatement[10506-10530]:ReturnStatement[10506-10530]"
    }, {
      "left" : "return super.getValueAsString(defValue);",
      "right" : "return super.getValueAsString(defValue);",
      "info" : "ReturnStatement[10549-10589]:ReturnStatement[10549-10589]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[10618-10627]:MarkerAnnotation[10618-10627]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[10632-10638]:Modifier[10632-10638]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[10639-10642]:PrimitiveType[10639-10642]"
    }, {
      "left" : "getValueAsInt",
      "right" : "getValueAsInt",
      "info" : "SimpleName[10643-10656]:SimpleName[10643-10656]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[10666-10677]:SimpleType[10666-10677]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10682-11223]:Block[10682-11223]"
    }, {
      "left" : "JsonToken t = _currToken;",
      "right" : "JsonToken t = _currToken;",
      "info" : "VariableDeclarationStatement[10692-10717]:VariableDeclarationStatement[10692-10717]"
    }, {
      "left" : "if ((t == JsonToken.VALUE_NUMBER_INT) || (t == JsonToken.VALUE_NUMBER_FLOAT))",
      "right" : "if ((t == JsonToken.VALUE_NUMBER_INT) || (t == JsonToken.VALUE_NUMBER_FLOAT))",
      "info" : "IfStatement[10726-11178]:IfStatement[10726-11178]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10804-11178]:Block[10804-11178]"
    }, {
      "left" : "if ((_numTypesValid & NR_INT) == 0)",
      "right" : "if ((_numTypesValid & NR_INT) == 0)",
      "info" : "IfStatement[10857-11137]:IfStatement[10857-11137]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10893-11137]:Block[10893-11137]"
    }, {
      "left" : "if (_numTypesValid == NR_UNKNOWN)",
      "right" : "if (_numTypesValid == NR_UNKNOWN)",
      "info" : "IfStatement[10911-11009]:IfStatement[10911-11009]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10945-11009]:Block[10945-11009]"
    }, {
      "left" : "return _parseIntValue();",
      "right" : "return _parseIntValue();",
      "info" : "ReturnStatement[10967-10991]:ReturnStatement[10967-10991]"
    }, {
      "left" : "if ((_numTypesValid & NR_INT) == 0)",
      "right" : "if ((_numTypesValid & NR_INT) == 0)",
      "info" : "IfStatement[11026-11123]:IfStatement[11026-11123]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11062-11123]:Block[11062-11123]"
    }, {
      "left" : "convertNumberToInt();",
      "right" : "convertNumberToInt();",
      "info" : "ExpressionStatement[11084-11105]:ExpressionStatement[11084-11105]"
    }, {
      "left" : "return _numberInt;",
      "right" : "return _numberInt;",
      "info" : "ReturnStatement[11150-11168]:ReturnStatement[11150-11168]"
    }, {
      "left" : "return super.getValueAsInt(0);",
      "right" : "return super.getValueAsInt(0);",
      "info" : "ReturnStatement[11187-11217]:ReturnStatement[11187-11217]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[11246-11255]:MarkerAnnotation[11246-11255]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[11260-11266]:Modifier[11260-11266]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[11267-11270]:PrimitiveType[11267-11270]"
    }, {
      "left" : "getValueAsInt",
      "right" : "getValueAsInt",
      "info" : "SimpleName[11271-11284]:SimpleName[11271-11284]"
    }, {
      "left" : "int defValue",
      "right" : "int defValue",
      "info" : "SingleVariableDeclaration[11285-11297]:SingleVariableDeclaration[11285-11297]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[11306-11317]:SimpleType[11306-11317]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11322-11870]:Block[11322-11870]"
    }, {
      "left" : "JsonToken t = _currToken;",
      "right" : "JsonToken t = _currToken;",
      "info" : "VariableDeclarationStatement[11332-11357]:VariableDeclarationStatement[11332-11357]"
    }, {
      "left" : "if ((t == JsonToken.VALUE_NUMBER_INT) || (t == JsonToken.VALUE_NUMBER_FLOAT))",
      "right" : "if ((t == JsonToken.VALUE_NUMBER_INT) || (t == JsonToken.VALUE_NUMBER_FLOAT))",
      "info" : "IfStatement[11366-11818]:IfStatement[11366-11818]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11444-11818]:Block[11444-11818]"
    }, {
      "left" : "if ((_numTypesValid & NR_INT) == 0)",
      "right" : "if ((_numTypesValid & NR_INT) == 0)",
      "info" : "IfStatement[11497-11777]:IfStatement[11497-11777]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11533-11777]:Block[11533-11777]"
    }, {
      "left" : "if (_numTypesValid == NR_UNKNOWN)",
      "right" : "if (_numTypesValid == NR_UNKNOWN)",
      "info" : "IfStatement[11551-11649]:IfStatement[11551-11649]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11585-11649]:Block[11585-11649]"
    }, {
      "left" : "return _parseIntValue();",
      "right" : "return _parseIntValue();",
      "info" : "ReturnStatement[11607-11631]:ReturnStatement[11607-11631]"
    }, {
      "left" : "if ((_numTypesValid & NR_INT) == 0)",
      "right" : "if ((_numTypesValid & NR_INT) == 0)",
      "info" : "IfStatement[11666-11763]:IfStatement[11666-11763]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11702-11763]:Block[11702-11763]"
    }, {
      "left" : "convertNumberToInt();",
      "right" : "convertNumberToInt();",
      "info" : "ExpressionStatement[11724-11745]:ExpressionStatement[11724-11745]"
    }, {
      "left" : "return _numberInt;",
      "right" : "return _numberInt;",
      "info" : "ReturnStatement[11790-11808]:ReturnStatement[11790-11808]"
    }, {
      "left" : "return super.getValueAsInt(defValue);",
      "right" : "return super.getValueAsInt(defValue);",
      "info" : "ReturnStatement[11827-11864]:ReturnStatement[11827-11864]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[11880-11889]:Modifier[11880-11889]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[11890-11895]:Modifier[11890-11895]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[11896-11902]:SimpleType[11896-11902]"
    }, {
      "left" : "_getText2",
      "right" : "_getText2",
      "info" : "SimpleName[11903-11912]:SimpleName[11903-11912]"
    }, {
      "left" : "JsonToken t",
      "right" : "JsonToken t",
      "info" : "SingleVariableDeclaration[11913-11924]:SingleVariableDeclaration[11913-11924]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11930-12323]:Block[11930-12323]"
    }, {
      "left" : "if (t == null)",
      "right" : "if (t == null)",
      "info" : "IfStatement[11940-11991]:IfStatement[11940-11991]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11955-11991]:Block[11955-11991]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[11969-11981]:ReturnStatement[11969-11981]"
    }, {
      "left" : "switch (t.id()) {\n        case ID_FIELD_NAME:\n            return _parsingContext.getCurrentName();\n\n        case ID_STRING:\n            // fall through\n        case ID_NUMBER_INT:\n        case ID_NUMBER_FLOAT:\n            return _textBuffer.contentsAsString();\n        default:\n        \treturn t.asString();\n        }",
      "right" : "switch (t.id()) {\n        case ID_FIELD_NAME:\n            return _parsingContext.getCurrentName();\n\n        case ID_STRING:\n            // fall through\n        case ID_NUMBER_INT:\n        case ID_NUMBER_FLOAT:\n            return _textBuffer.contentsAsString();\n        default:\n        \treturn t.asString();\n        }",
      "info" : "SwitchStatement[12000-12317]:SwitchStatement[12000-12317]"
    }, {
      "left" : "case ID_FIELD_NAME:",
      "right" : "case ID_FIELD_NAME:",
      "info" : "SwitchCase[12026-12045]:SwitchCase[12026-12045]"
    }, {
      "left" : "return _parsingContext.getCurrentName();",
      "right" : "return _parsingContext.getCurrentName();",
      "info" : "ReturnStatement[12058-12098]:ReturnStatement[12058-12098]"
    }, {
      "left" : "case ID_STRING:",
      "right" : "case ID_STRING:",
      "info" : "SwitchCase[12108-12123]:SwitchCase[12108-12123]"
    }, {
      "left" : "case ID_NUMBER_INT:",
      "right" : "case ID_NUMBER_INT:",
      "info" : "SwitchCase[12160-12179]:SwitchCase[12160-12179]"
    }, {
      "left" : "case ID_NUMBER_FLOAT:",
      "right" : "case ID_NUMBER_FLOAT:",
      "info" : "SwitchCase[12188-12209]:SwitchCase[12188-12209]"
    }, {
      "left" : "return _textBuffer.contentsAsString();",
      "right" : "return _textBuffer.contentsAsString();",
      "info" : "ReturnStatement[12222-12260]:ReturnStatement[12222-12260]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[12269-12277]:SwitchCase[12269-12277]"
    }, {
      "left" : "return t.asString();",
      "right" : "return t.asString();",
      "info" : "ReturnStatement[12287-12307]:ReturnStatement[12287-12307]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[12329-12338]:MarkerAnnotation[12329-12338]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[12343-12349]:Modifier[12343-12349]"
    }, {
      "left" : "char[]",
      "right" : "char[]",
      "info" : "ArrayType[12350-12356]:ArrayType[12350-12356]"
    }, {
      "left" : "getTextCharacters",
      "right" : "getTextCharacters",
      "info" : "SimpleName[12357-12374]:SimpleName[12357-12374]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[12384-12395]:SimpleType[12384-12395]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12400-13656]:Block[12400-13656]"
    }, {
      "left" : "if (_currToken != null)",
      "right" : "if (_currToken != null)",
      "info" : "IfStatement[12410-13629]:IfStatement[12410-13629]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12434-13629]:Block[12434-13629]"
    }, {
      "left" : "switch (_currToken.id()) {\n                \n            case ID_FIELD_NAME:\n                if (!_nameCopied) {\n                    String name = _parsingContext.getCurrentName();\n                    int nameLen = name.length();\n                    if (_nameCopyBuffer == null) {\n                        _nameCopyBuffer = _ioContext.allocNameCopyBuffer(nameLen);\n                    } else if (_nameCopyBuffer.length < nameLen) {\n                        _nameCopyBuffer = new char[nameLen];\n                    }\n                    name.getChars(0, nameLen, _nameCopyBuffer, 0);\n                    _nameCopied = true;\n                }\n                return _nameCopyBuffer;\n    \n            case ID_STRING:\n                if (_tokenIncomplete) {\n                    _tokenIncomplete = false;\n                    _finishString(); // only strings can be incomplete\n                }\n                // fall through\n            case ID_NUMBER_INT:\n            case ID_NUMBER_FLOAT:\n                return _textBuffer.getTextBuffer();\n                \n            default:\n                return _currToken.asCharArray();\n            }",
      "right" : "switch (_currToken.id()) {\n                \n            case ID_FIELD_NAME:\n                if (!_nameCopied) {\n                    String name = _parsingContext.getCurrentName();\n                    int nameLen = name.length();\n                    if (_nameCopyBuffer == null) {\n                        _nameCopyBuffer = _ioContext.allocNameCopyBuffer(nameLen);\n                    } else if (_nameCopyBuffer.length < nameLen) {\n                        _nameCopyBuffer = new char[nameLen];\n                    }\n                    name.getChars(0, nameLen, _nameCopyBuffer, 0);\n                    _nameCopied = true;\n                }\n                return _nameCopyBuffer;\n    \n            case ID_STRING:\n                if (_tokenIncomplete) {\n                    _tokenIncomplete = false;\n                    _finishString(); // only strings can be incomplete\n                }\n                // fall through\n            case ID_NUMBER_INT:\n            case ID_NUMBER_FLOAT:\n                return _textBuffer.getTextBuffer();\n                \n            default:\n                return _currToken.asCharArray();\n            }",
      "info" : "SwitchStatement[12483-13619]:SwitchStatement[12483-13619]"
    }, {
      "left" : "case ID_FIELD_NAME:",
      "right" : "case ID_FIELD_NAME:",
      "info" : "SwitchCase[12539-12558]:SwitchCase[12539-12558]"
    }, {
      "left" : "if (!_nameCopied)",
      "right" : "if (!_nameCopied)",
      "info" : "IfStatement[12575-13120]:IfStatement[12575-13120]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12593-13120]:Block[12593-13120]"
    }, {
      "left" : "String name = _parsingContext.getCurrentName();",
      "right" : "String name = _parsingContext.getCurrentName();",
      "info" : "VariableDeclarationStatement[12615-12662]:VariableDeclarationStatement[12615-12662]"
    }, {
      "left" : "int nameLen = name.length();",
      "right" : "int nameLen = name.length();",
      "info" : "VariableDeclarationStatement[12683-12711]:VariableDeclarationStatement[12683-12711]"
    }, {
      "left" : "if (_nameCopyBuffer == null)",
      "right" : "if (_nameCopyBuffer == null)",
      "info" : "IfStatement[12732-12995]:IfStatement[12732-12995]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12761-12867]:Block[12761-12867]"
    }, {
      "left" : "_nameCopyBuffer = _ioContext.allocNameCopyBuffer(nameLen);",
      "right" : "_nameCopyBuffer = _ioContext.allocNameCopyBuffer(nameLen);",
      "info" : "ExpressionStatement[12787-12845]:ExpressionStatement[12787-12845]"
    }, {
      "left" : "if (_nameCopyBuffer.length < nameLen)",
      "right" : "if (_nameCopyBuffer.length < nameLen)",
      "info" : "IfStatement[12873-12995]:IfStatement[12873-12995]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12911-12995]:Block[12911-12995]"
    }, {
      "left" : "_nameCopyBuffer = new char[nameLen];",
      "right" : "_nameCopyBuffer = new char[nameLen];",
      "info" : "ExpressionStatement[12937-12973]:ExpressionStatement[12937-12973]"
    }, {
      "left" : "name.getChars(0, nameLen, _nameCopyBuffer, 0);",
      "right" : "name.getChars(0, nameLen, _nameCopyBuffer, 0);",
      "info" : "ExpressionStatement[13016-13062]:ExpressionStatement[13016-13062]"
    }, {
      "left" : "_nameCopied = true;",
      "right" : "_nameCopied = true;",
      "info" : "ExpressionStatement[13083-13102]:ExpressionStatement[13083-13102]"
    }, {
      "left" : "return _nameCopyBuffer;",
      "right" : "return _nameCopyBuffer;",
      "info" : "ReturnStatement[13137-13160]:ReturnStatement[13137-13160]"
    }, {
      "left" : "case ID_STRING:",
      "right" : "case ID_STRING:",
      "info" : "SwitchCase[13178-13193]:SwitchCase[13178-13193]"
    }, {
      "left" : "if (_tokenIncomplete)",
      "right" : "if (_tokenIncomplete)",
      "info" : "IfStatement[13210-13368]:IfStatement[13210-13368]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13232-13368]:Block[13232-13368]"
    }, {
      "left" : "_tokenIncomplete = false;",
      "right" : "_tokenIncomplete = false;",
      "info" : "ExpressionStatement[13254-13279]:ExpressionStatement[13254-13279]"
    }, {
      "left" : "_finishString();",
      "right" : "_finishString();",
      "info" : "ExpressionStatement[13300-13316]:ExpressionStatement[13300-13316]"
    }, {
      "left" : "case ID_NUMBER_INT:",
      "right" : "case ID_NUMBER_INT:",
      "info" : "SwitchCase[13413-13432]:SwitchCase[13413-13432]"
    }, {
      "left" : "case ID_NUMBER_FLOAT:",
      "right" : "case ID_NUMBER_FLOAT:",
      "info" : "SwitchCase[13445-13466]:SwitchCase[13445-13466]"
    }, {
      "left" : "return _textBuffer.getTextBuffer();",
      "right" : "return _textBuffer.getTextBuffer();",
      "info" : "ReturnStatement[13483-13518]:ReturnStatement[13483-13518]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[13548-13556]:SwitchCase[13548-13556]"
    }, {
      "left" : "return _currToken.asCharArray();",
      "right" : "return _currToken.asCharArray();",
      "info" : "ReturnStatement[13573-13605]:ReturnStatement[13573-13605]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[13638-13650]:ReturnStatement[13638-13650]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[13662-13671]:MarkerAnnotation[13662-13671]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[13676-13682]:Modifier[13676-13682]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[13683-13686]:PrimitiveType[13683-13686]"
    }, {
      "left" : "getTextLength",
      "right" : "getTextLength",
      "info" : "SimpleName[13687-13700]:SimpleName[13687-13700]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[13710-13721]:SimpleType[13710-13721]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13726-14436]:Block[13726-14436]"
    }, {
      "left" : "if (_currToken != null)",
      "right" : "if (_currToken != null)",
      "info" : "IfStatement[13736-14412]:IfStatement[13736-14412]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13760-14412]:Block[13760-14412]"
    }, {
      "left" : "switch (_currToken.id()) {\n                \n            case ID_FIELD_NAME:\n                return _parsingContext.getCurrentName().length();\n            case ID_STRING:\n                if (_tokenIncomplete) {\n                    _tokenIncomplete = false;\n                    _finishString(); // only strings can be incomplete\n                }\n                // fall through\n            case ID_NUMBER_INT:\n            case ID_NUMBER_FLOAT:\n                return _textBuffer.size();\n                \n            default:\n                return _currToken.asCharArray().length;\n            }",
      "right" : "switch (_currToken.id()) {\n                \n            case ID_FIELD_NAME:\n                return _parsingContext.getCurrentName().length();\n            case ID_STRING:\n                if (_tokenIncomplete) {\n                    _tokenIncomplete = false;\n                    _finishString(); // only strings can be incomplete\n                }\n                // fall through\n            case ID_NUMBER_INT:\n            case ID_NUMBER_FLOAT:\n                return _textBuffer.size();\n                \n            default:\n                return _currToken.asCharArray().length;\n            }",
      "info" : "SwitchStatement[13809-14402]:SwitchStatement[13809-14402]"
    }, {
      "left" : "case ID_FIELD_NAME:",
      "right" : "case ID_FIELD_NAME:",
      "info" : "SwitchCase[13865-13884]:SwitchCase[13865-13884]"
    }, {
      "left" : "return _parsingContext.getCurrentName().length();",
      "right" : "return _parsingContext.getCurrentName().length();",
      "info" : "ReturnStatement[13901-13950]:ReturnStatement[13901-13950]"
    }, {
      "left" : "case ID_STRING:",
      "right" : "case ID_STRING:",
      "info" : "SwitchCase[13963-13978]:SwitchCase[13963-13978]"
    }, {
      "left" : "if (_tokenIncomplete)",
      "right" : "if (_tokenIncomplete)",
      "info" : "IfStatement[13995-14153]:IfStatement[13995-14153]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14017-14153]:Block[14017-14153]"
    }, {
      "left" : "_tokenIncomplete = false;",
      "right" : "_tokenIncomplete = false;",
      "info" : "ExpressionStatement[14039-14064]:ExpressionStatement[14039-14064]"
    }, {
      "left" : "_finishString();",
      "right" : "_finishString();",
      "info" : "ExpressionStatement[14085-14101]:ExpressionStatement[14085-14101]"
    }, {
      "left" : "case ID_NUMBER_INT:",
      "right" : "case ID_NUMBER_INT:",
      "info" : "SwitchCase[14198-14217]:SwitchCase[14198-14217]"
    }, {
      "left" : "case ID_NUMBER_FLOAT:",
      "right" : "case ID_NUMBER_FLOAT:",
      "info" : "SwitchCase[14230-14251]:SwitchCase[14230-14251]"
    }, {
      "left" : "return _textBuffer.size();",
      "right" : "return _textBuffer.size();",
      "info" : "ReturnStatement[14268-14294]:ReturnStatement[14268-14294]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[14324-14332]:SwitchCase[14324-14332]"
    }, {
      "left" : "return _currToken.asCharArray().length;",
      "right" : "return _currToken.asCharArray().length;",
      "info" : "ReturnStatement[14349-14388]:ReturnStatement[14349-14388]"
    }, {
      "left" : "return 0;",
      "right" : "return 0;",
      "info" : "ReturnStatement[14421-14430]:ReturnStatement[14421-14430]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[14442-14451]:MarkerAnnotation[14442-14451]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[14456-14462]:Modifier[14456-14462]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[14463-14466]:PrimitiveType[14463-14466]"
    }, {
      "left" : "getTextOffset",
      "right" : "getTextOffset",
      "info" : "SimpleName[14467-14480]:SimpleName[14467-14480]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[14490-14501]:SimpleType[14490-14501]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14506-15127]:Block[14506-15127]"
    }, {
      "left" : "if (_currToken != null)",
      "right" : "if (_currToken != null)",
      "info" : "IfStatement[14583-15103]:IfStatement[14583-15103]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14607-15103]:Block[14607-15103]"
    }, {
      "left" : "switch (_currToken.id()) {\n            case ID_FIELD_NAME:\n                return 0;\n            case ID_STRING:\n                if (_tokenIncomplete) {\n                    _tokenIncomplete = false;\n                    _finishString(); // only strings can be incomplete\n                }\n                // fall through\n            case ID_NUMBER_INT:\n            case ID_NUMBER_FLOAT:\n                return _textBuffer.getTextOffset();\n            default:\n            }",
      "right" : "switch (_currToken.id()) {\n            case ID_FIELD_NAME:\n                return 0;\n            case ID_STRING:\n                if (_tokenIncomplete) {\n                    _tokenIncomplete = false;\n                    _finishString(); // only strings can be incomplete\n                }\n                // fall through\n            case ID_NUMBER_INT:\n            case ID_NUMBER_FLOAT:\n                return _textBuffer.getTextOffset();\n            default:\n            }",
      "info" : "SwitchStatement[14621-15093]:SwitchStatement[14621-15093]"
    }, {
      "left" : "case ID_FIELD_NAME:",
      "right" : "case ID_FIELD_NAME:",
      "info" : "SwitchCase[14660-14679]:SwitchCase[14660-14679]"
    }, {
      "left" : "return 0;",
      "right" : "return 0;",
      "info" : "ReturnStatement[14696-14705]:ReturnStatement[14696-14705]"
    }, {
      "left" : "case ID_STRING:",
      "right" : "case ID_STRING:",
      "info" : "SwitchCase[14718-14733]:SwitchCase[14718-14733]"
    }, {
      "left" : "if (_tokenIncomplete)",
      "right" : "if (_tokenIncomplete)",
      "info" : "IfStatement[14750-14908]:IfStatement[14750-14908]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14772-14908]:Block[14772-14908]"
    }, {
      "left" : "_tokenIncomplete = false;",
      "right" : "_tokenIncomplete = false;",
      "info" : "ExpressionStatement[14794-14819]:ExpressionStatement[14794-14819]"
    }, {
      "left" : "_finishString();",
      "right" : "_finishString();",
      "info" : "ExpressionStatement[14840-14856]:ExpressionStatement[14840-14856]"
    }, {
      "left" : "case ID_NUMBER_INT:",
      "right" : "case ID_NUMBER_INT:",
      "info" : "SwitchCase[14953-14972]:SwitchCase[14953-14972]"
    }, {
      "left" : "case ID_NUMBER_FLOAT:",
      "right" : "case ID_NUMBER_FLOAT:",
      "info" : "SwitchCase[14985-15006]:SwitchCase[14985-15006]"
    }, {
      "left" : "return _textBuffer.getTextOffset();",
      "right" : "return _textBuffer.getTextOffset();",
      "info" : "ReturnStatement[15023-15058]:ReturnStatement[15023-15058]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[15071-15079]:SwitchCase[15071-15079]"
    }, {
      "left" : "return 0;",
      "right" : "return 0;",
      "info" : "ReturnStatement[15112-15121]:ReturnStatement[15112-15121]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[15137-15146]:MarkerAnnotation[15137-15146]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[15151-15157]:Modifier[15151-15157]"
    }, {
      "left" : "byte[]",
      "right" : "byte[]",
      "info" : "ArrayType[15158-15164]:ArrayType[15158-15164]"
    }, {
      "left" : "getBinaryValue",
      "right" : "getBinaryValue",
      "info" : "SimpleName[15165-15179]:SimpleName[15165-15179]"
    }, {
      "left" : "Base64Variant b64variant",
      "right" : "Base64Variant b64variant",
      "info" : "SingleVariableDeclaration[15180-15204]:SingleVariableDeclaration[15180-15204]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[15213-15224]:SimpleType[15213-15224]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15229-16469]:Block[15229-16469]"
    }, {
      "left" : "if (_currToken != JsonToken.VALUE_STRING &&\n                (_currToken != JsonToken.VALUE_EMBEDDED_OBJECT || _binaryValue == null))",
      "right" : "if (_currToken != JsonToken.VALUE_STRING &&\n                (_currToken != JsonToken.VALUE_EMBEDDED_OBJECT || _binaryValue == null))",
      "info" : "IfStatement[15239-15511]:IfStatement[15239-15511]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15372-15511]:Block[15372-15511]"
    }, {
      "left" : "_reportError(\"Current token (\"+_currToken+\") not VALUE_STRING or VALUE_EMBEDDED_OBJECT, can not access as binary\");",
      "right" : "_reportError(\"Current token (\"+_currToken+\") not VALUE_STRING or VALUE_EMBEDDED_OBJECT, can not access as binary\");",
      "info" : "ExpressionStatement[15386-15501]:ExpressionStatement[15386-15501]"
    }, {
      "left" : "if (_tokenIncomplete)",
      "right" : "if (_tokenIncomplete)",
      "info" : "IfStatement[15626-16434]:IfStatement[15626-16434]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15648-16095]:Block[15648-16095]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[15662-15910]:TryStatement[15662-15910]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15666-15739]:Block[15666-15739]"
    }, {
      "left" : "_binaryValue = _decodeBase64(b64variant);",
      "right" : "_binaryValue = _decodeBase64(b64variant);",
      "info" : "ExpressionStatement[15684-15725]:ExpressionStatement[15684-15725]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15777-15910]:Block[15777-15910]"
    }, {
      "left" : "throw _constructError(\"Failed to decode VALUE_STRING as base64 (\"+b64variant+\"): \"+iae.getMessage());",
      "right" : "throw _constructError(\"Failed to decode VALUE_STRING as base64 (\"+b64variant+\"): \"+iae.getMessage());",
      "info" : "ThrowStatement[15795-15896]:ThrowStatement[15795-15896]"
    }, {
      "left" : "_tokenIncomplete = false;",
      "right" : "_tokenIncomplete = false;",
      "info" : "ExpressionStatement[16060-16085]:ExpressionStatement[16060-16085]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16101-16434]:Block[16101-16434]"
    }, {
      "left" : "if (_binaryValue == null)",
      "right" : "if (_binaryValue == null)",
      "info" : "IfStatement[16153-16424]:IfStatement[16153-16424]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16179-16424]:Block[16179-16424]"
    }, {
      "left" : "@SuppressWarnings(\"resource\")\n                ByteArrayBuilder builder = _getByteArrayBuilder();",
      "right" : "@SuppressWarnings(\"resource\")\n                ByteArrayBuilder builder = _getByteArrayBuilder();",
      "info" : "VariableDeclarationStatement[16197-16293]:VariableDeclarationStatement[16197-16293]"
    }, {
      "left" : "_decodeBase64(getText(), builder, b64variant);",
      "right" : "_decodeBase64(getText(), builder, b64variant);",
      "info" : "ExpressionStatement[16310-16356]:ExpressionStatement[16310-16356]"
    }, {
      "left" : "_binaryValue = builder.toByteArray();",
      "right" : "_binaryValue = builder.toByteArray();",
      "info" : "ExpressionStatement[16373-16410]:ExpressionStatement[16373-16410]"
    }, {
      "left" : "return _binaryValue;",
      "right" : "return _binaryValue;",
      "info" : "ReturnStatement[16443-16463]:ReturnStatement[16443-16463]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[16475-16484]:MarkerAnnotation[16475-16484]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[16489-16495]:Modifier[16489-16495]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[16496-16499]:PrimitiveType[16496-16499]"
    }, {
      "left" : "readBinaryValue",
      "right" : "readBinaryValue",
      "info" : "SimpleName[16500-16515]:SimpleName[16500-16515]"
    }, {
      "left" : "Base64Variant b64variant",
      "right" : "Base64Variant b64variant",
      "info" : "SingleVariableDeclaration[16516-16540]:SingleVariableDeclaration[16516-16540]"
    }, {
      "left" : "OutputStream out",
      "right" : "OutputStream out",
      "info" : "SingleVariableDeclaration[16542-16558]:SingleVariableDeclaration[16542-16558]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[16567-16578]:SimpleType[16567-16578]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16583-17109]:Block[16583-17109]"
    }, {
      "left" : "if (!_tokenIncomplete || _currToken != JsonToken.VALUE_STRING)",
      "right" : "if (!_tokenIncomplete || _currToken != JsonToken.VALUE_STRING)",
      "info" : "IfStatement[16669-16849]:IfStatement[16669-16849]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16732-16849]:Block[16732-16849]"
    }, {
      "left" : "byte[] b = getBinaryValue(b64variant);",
      "right" : "byte[] b = getBinaryValue(b64variant);",
      "info" : "VariableDeclarationStatement[16746-16784]:VariableDeclarationStatement[16746-16784]"
    }, {
      "left" : "out.write(b);",
      "right" : "out.write(b);",
      "info" : "ExpressionStatement[16797-16810]:ExpressionStatement[16797-16810]"
    }, {
      "left" : "return b.length;",
      "right" : "return b.length;",
      "info" : "ReturnStatement[16823-16839]:ReturnStatement[16823-16839]"
    }, {
      "left" : "byte[] buf = _ioContext.allocBase64Buffer();",
      "right" : "byte[] buf = _ioContext.allocBase64Buffer();",
      "info" : "VariableDeclarationStatement[16912-16956]:VariableDeclarationStatement[16912-16956]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[16965-17103]:TryStatement[16965-17103]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16969-17034]:Block[16969-17034]"
    }, {
      "left" : "return _readBinary(b64variant, out, buf);",
      "right" : "return _readBinary(b64variant, out, buf);",
      "info" : "ReturnStatement[16983-17024]:ReturnStatement[16983-17024]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17043-17103]:Block[17043-17103]"
    }, {
      "left" : "_ioContext.releaseBase64Buffer(buf);",
      "right" : "_ioContext.releaseBase64Buffer(buf);",
      "info" : "ExpressionStatement[17057-17093]:ExpressionStatement[17057-17093]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[17115-17124]:Modifier[17115-17124]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[17125-17128]:PrimitiveType[17125-17128]"
    }, {
      "left" : "_readBinary",
      "right" : "_readBinary",
      "info" : "SimpleName[17129-17140]:SimpleName[17129-17140]"
    }, {
      "left" : "Base64Variant b64variant",
      "right" : "Base64Variant b64variant",
      "info" : "SingleVariableDeclaration[17141-17165]:SingleVariableDeclaration[17141-17165]"
    }, {
      "left" : "OutputStream out",
      "right" : "OutputStream out",
      "info" : "SingleVariableDeclaration[17167-17183]:SingleVariableDeclaration[17167-17183]"
    }, {
      "left" : "byte[] buffer",
      "right" : "byte[] buffer",
      "info" : "SingleVariableDeclaration[17215-17228]:SingleVariableDeclaration[17215-17228]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[17237-17248]:SimpleType[17237-17248]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17253-22327]:Block[17253-22327]"
    }, {
      "left" : "int outputPtr = 0;",
      "right" : "int outputPtr = 0;",
      "info" : "VariableDeclarationStatement[17263-17281]:VariableDeclarationStatement[17263-17281]"
    }, {
      "left" : "final int outputEnd = buffer.length - 3;",
      "right" : "final int outputEnd = buffer.length - 3;",
      "info" : "VariableDeclarationStatement[17290-17330]:VariableDeclarationStatement[17290-17330]"
    }, {
      "left" : "int outputCount = 0;",
      "right" : "int outputCount = 0;",
      "info" : "VariableDeclarationStatement[17339-17359]:VariableDeclarationStatement[17339-17359]"
    }, {
      "left" : "while (true)",
      "right" : "while (true)",
      "info" : "WhileStatement[17369-22137]:WhileStatement[17369-22137]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17382-22137]:Block[17382-22137]"
    }, {
      "left" : "int ch;",
      "right" : "int ch;",
      "info" : "VariableDeclarationStatement[17459-17466]:VariableDeclarationStatement[17459-17466]"
    }, {
      "left" : "do{...}",
      "right" : "do{...}",
      "info" : "DoStatement[17479-17689]:DoStatement[17479-17689]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17482-17664]:Block[17482-17664]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[17500-17589]:IfStatement[17500-17589]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17528-17589]:Block[17528-17589]"
    }, {
      "left" : "loadMoreGuaranteed();",
      "right" : "loadMoreGuaranteed();",
      "info" : "ExpressionStatement[17550-17571]:ExpressionStatement[17550-17571]"
    }, {
      "left" : "ch = (int) _inputBuffer[_inputPtr++] & 0xFF;",
      "right" : "ch = (int) _inputBuffer[_inputPtr++] & 0xFF;",
      "info" : "ExpressionStatement[17606-17650]:ExpressionStatement[17606-17650]"
    }, {
      "left" : "int bits = b64variant.decodeBase64Char(ch);",
      "right" : "int bits = b64variant.decodeBase64Char(ch);",
      "info" : "VariableDeclarationStatement[17702-17745]:VariableDeclarationStatement[17702-17745]"
    }, {
      "left" : "if (bits < 0)",
      "right" : "if (bits < 0)",
      "info" : "IfStatement[17758-18074]:IfStatement[17758-18074]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17772-18074]:Block[17772-18074]"
    }, {
      "left" : "if (ch == INT_QUOTE)",
      "right" : "if (ch == INT_QUOTE)",
      "info" : "IfStatement[17827-17894]:IfStatement[17827-17894]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17848-17894]:Block[17848-17894]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[17870-17876]:BreakStatement[17870-17876]"
    }, {
      "left" : "bits = _decodeBase64Escape(b64variant, ch, 0);",
      "right" : "bits = _decodeBase64Escape(b64variant, ch, 0);",
      "info" : "ExpressionStatement[17911-17957]:ExpressionStatement[17911-17957]"
    }, {
      "left" : "if (bits < 0)",
      "right" : "if (bits < 0)",
      "info" : "IfStatement[17974-18060]:IfStatement[17974-18060]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17988-18060]:Block[17988-18060]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[18033-18042]:ContinueStatement[18033-18042]"
    }, {
      "left" : "if (outputPtr > outputEnd)",
      "right" : "if (outputPtr > outputEnd)",
      "info" : "IfStatement[18130-18294]:IfStatement[18130-18294]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18157-18294]:Block[18157-18294]"
    }, {
      "left" : "outputCount += outputPtr;",
      "right" : "outputCount += outputPtr;",
      "info" : "ExpressionStatement[18175-18200]:ExpressionStatement[18175-18200]"
    }, {
      "left" : "out.write(buffer, 0, outputPtr);",
      "right" : "out.write(buffer, 0, outputPtr);",
      "info" : "ExpressionStatement[18217-18249]:ExpressionStatement[18217-18249]"
    }, {
      "left" : "outputPtr = 0;",
      "right" : "outputPtr = 0;",
      "info" : "ExpressionStatement[18266-18280]:ExpressionStatement[18266-18280]"
    }, {
      "left" : "int decodedData = bits;",
      "right" : "int decodedData = bits;",
      "info" : "VariableDeclarationStatement[18308-18331]:VariableDeclarationStatement[18308-18331]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[18416-18497]:IfStatement[18416-18497]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18444-18497]:Block[18444-18497]"
    }, {
      "left" : "loadMoreGuaranteed();",
      "right" : "loadMoreGuaranteed();",
      "info" : "ExpressionStatement[18462-18483]:ExpressionStatement[18462-18483]"
    }, {
      "left" : "ch = _inputBuffer[_inputPtr++] & 0xFF;",
      "right" : "ch = _inputBuffer[_inputPtr++] & 0xFF;",
      "info" : "ExpressionStatement[18510-18548]:ExpressionStatement[18510-18548]"
    }, {
      "left" : "bits = b64variant.decodeBase64Char(ch);",
      "right" : "bits = b64variant.decodeBase64Char(ch);",
      "info" : "ExpressionStatement[18561-18600]:ExpressionStatement[18561-18600]"
    }, {
      "left" : "if (bits < 0)",
      "right" : "if (bits < 0)",
      "info" : "IfStatement[18613-18705]:IfStatement[18613-18705]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18627-18705]:Block[18627-18705]"
    }, {
      "left" : "bits = _decodeBase64Escape(b64variant, ch, 1);",
      "right" : "bits = _decodeBase64Escape(b64variant, ch, 1);",
      "info" : "ExpressionStatement[18645-18691]:ExpressionStatement[18645-18691]"
    }, {
      "left" : "decodedData = (decodedData << 6) | bits;",
      "right" : "decodedData = (decodedData << 6) | bits;",
      "info" : "ExpressionStatement[18718-18758]:ExpressionStatement[18718-18758]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[18833-18914]:IfStatement[18833-18914]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18861-18914]:Block[18861-18914]"
    }, {
      "left" : "loadMoreGuaranteed();",
      "right" : "loadMoreGuaranteed();",
      "info" : "ExpressionStatement[18879-18900]:ExpressionStatement[18879-18900]"
    }, {
      "left" : "ch = _inputBuffer[_inputPtr++] & 0xFF;",
      "right" : "ch = _inputBuffer[_inputPtr++] & 0xFF;",
      "info" : "ExpressionStatement[18927-18965]:ExpressionStatement[18927-18965]"
    }, {
      "left" : "bits = b64variant.decodeBase64Char(ch);",
      "right" : "bits = b64variant.decodeBase64Char(ch);",
      "info" : "ExpressionStatement[18978-19017]:ExpressionStatement[18978-19017]"
    }, {
      "left" : "if (bits < 0)",
      "right" : "if (bits < 0)",
      "info" : "IfStatement[19088-20297]:IfStatement[19088-20297]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19102-20297]:Block[19102-20297]"
    }, {
      "left" : "if (bits != Base64Variant.BASE64_VALUE_PADDING)",
      "right" : "if (bits != Base64Variant.BASE64_VALUE_PADDING)",
      "info" : "IfStatement[19120-19565]:IfStatement[19120-19565]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19168-19565]:Block[19168-19565]"
    }, {
      "left" : "if (ch == '\"' && !b64variant.usesPadding())",
      "right" : "if (ch == '\"' && !b64variant.usesPadding())",
      "info" : "IfStatement[19273-19480]:IfStatement[19273-19480]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19317-19480]:Block[19317-19480]"
    }, {
      "left" : "decodedData >>= 4;",
      "right" : "decodedData >>= 4;",
      "info" : "ExpressionStatement[19343-19361]:ExpressionStatement[19343-19361]"
    }, {
      "left" : "buffer[outputPtr++] = (byte) decodedData;",
      "right" : "buffer[outputPtr++] = (byte) decodedData;",
      "info" : "ExpressionStatement[19386-19427]:ExpressionStatement[19386-19427]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[19452-19458]:BreakStatement[19452-19458]"
    }, {
      "left" : "bits = _decodeBase64Escape(b64variant, ch, 2);",
      "right" : "bits = _decodeBase64Escape(b64variant, ch, 2);",
      "info" : "ExpressionStatement[19501-19547]:ExpressionStatement[19501-19547]"
    }, {
      "left" : "if (bits == Base64Variant.BASE64_VALUE_PADDING)",
      "right" : "if (bits == Base64Variant.BASE64_VALUE_PADDING)",
      "info" : "IfStatement[19582-20283]:IfStatement[19582-20283]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19630-20283]:Block[19630-20283]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[19696-19793]:IfStatement[19696-19793]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19724-19793]:Block[19724-19793]"
    }, {
      "left" : "loadMoreGuaranteed();",
      "right" : "loadMoreGuaranteed();",
      "info" : "ExpressionStatement[19750-19771]:ExpressionStatement[19750-19771]"
    }, {
      "left" : "ch = _inputBuffer[_inputPtr++] & 0xFF;",
      "right" : "ch = _inputBuffer[_inputPtr++] & 0xFF;",
      "info" : "ExpressionStatement[19814-19852]:ExpressionStatement[19814-19852]"
    }, {
      "left" : "if (!b64variant.usesPaddingChar(ch))",
      "right" : "if (!b64variant.usesPaddingChar(ch))",
      "info" : "IfStatement[19873-20071]:IfStatement[19873-20071]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19910-20071]:Block[19910-20071]"
    }, {
      "left" : "throw reportInvalidBase64Char(b64variant, ch, 3, \"expected padding character '\"+b64variant.getPaddingChar()+\"'\");",
      "right" : "throw reportInvalidBase64Char(b64variant, ch, 3, \"expected padding character '\"+b64variant.getPaddingChar()+\"'\");",
      "info" : "ThrowStatement[19936-20049]:ThrowStatement[19936-20049]"
    }, {
      "left" : "decodedData >>= 4;",
      "right" : "decodedData >>= 4;",
      "info" : "ExpressionStatement[20155-20173]:ExpressionStatement[20155-20173]"
    }, {
      "left" : "buffer[outputPtr++] = (byte) decodedData;",
      "right" : "buffer[outputPtr++] = (byte) decodedData;",
      "info" : "ExpressionStatement[20194-20235]:ExpressionStatement[20194-20235]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[20256-20265]:ContinueStatement[20256-20265]"
    }, {
      "left" : "decodedData = (decodedData << 6) | bits;",
      "right" : "decodedData = (decodedData << 6) | bits;",
      "info" : "ExpressionStatement[20344-20384]:ExpressionStatement[20344-20384]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[20468-20549]:IfStatement[20468-20549]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20496-20549]:Block[20496-20549]"
    }, {
      "left" : "loadMoreGuaranteed();",
      "right" : "loadMoreGuaranteed();",
      "info" : "ExpressionStatement[20514-20535]:ExpressionStatement[20514-20535]"
    }, {
      "left" : "ch = _inputBuffer[_inputPtr++] & 0xFF;",
      "right" : "ch = _inputBuffer[_inputPtr++] & 0xFF;",
      "info" : "ExpressionStatement[20562-20600]:ExpressionStatement[20562-20600]"
    }, {
      "left" : "bits = b64variant.decodeBase64Char(ch);",
      "right" : "bits = b64variant.decodeBase64Char(ch);",
      "info" : "ExpressionStatement[20613-20652]:ExpressionStatement[20613-20652]"
    }, {
      "left" : "if (bits < 0)",
      "right" : "if (bits < 0)",
      "info" : "IfStatement[20665-21843]:IfStatement[20665-21843]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20679-21843]:Block[20679-21843]"
    }, {
      "left" : "if (bits != Base64Variant.BASE64_VALUE_PADDING)",
      "right" : "if (bits != Base64Variant.BASE64_VALUE_PADDING)",
      "info" : "IfStatement[20697-21215]:IfStatement[20697-21215]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20745-21215]:Block[20745-21215]"
    }, {
      "left" : "if (ch == '\"' && !b64variant.usesPadding())",
      "right" : "if (ch == '\"' && !b64variant.usesPadding())",
      "info" : "IfStatement[20850-21130]:IfStatement[20850-21130]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20894-21130]:Block[20894-21130]"
    }, {
      "left" : "decodedData >>= 2;",
      "right" : "decodedData >>= 2;",
      "info" : "ExpressionStatement[20920-20938]:ExpressionStatement[20920-20938]"
    }, {
      "left" : "buffer[outputPtr++] = (byte) (decodedData >> 8);",
      "right" : "buffer[outputPtr++] = (byte) (decodedData >> 8);",
      "info" : "ExpressionStatement[20963-21011]:ExpressionStatement[20963-21011]"
    }, {
      "left" : "buffer[outputPtr++] = (byte) decodedData;",
      "right" : "buffer[outputPtr++] = (byte) decodedData;",
      "info" : "ExpressionStatement[21036-21077]:ExpressionStatement[21036-21077]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[21102-21108]:BreakStatement[21102-21108]"
    }, {
      "left" : "bits = _decodeBase64Escape(b64variant, ch, 3);",
      "right" : "bits = _decodeBase64Escape(b64variant, ch, 3);",
      "info" : "ExpressionStatement[21151-21197]:ExpressionStatement[21151-21197]"
    }, {
      "left" : "if (bits == Base64Variant.BASE64_VALUE_PADDING)",
      "right" : "if (bits == Base64Variant.BASE64_VALUE_PADDING)",
      "info" : "IfStatement[21232-21829]:IfStatement[21232-21829]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21280-21829]:Block[21280-21829]"
    }, {
      "left" : "decodedData >>= 2;",
      "right" : "decodedData >>= 2;",
      "info" : "ExpressionStatement[21632-21650]:ExpressionStatement[21632-21650]"
    }, {
      "left" : "buffer[outputPtr++] = (byte) (decodedData >> 8);",
      "right" : "buffer[outputPtr++] = (byte) (decodedData >> 8);",
      "info" : "ExpressionStatement[21671-21719]:ExpressionStatement[21671-21719]"
    }, {
      "left" : "buffer[outputPtr++] = (byte) decodedData;",
      "right" : "buffer[outputPtr++] = (byte) decodedData;",
      "info" : "ExpressionStatement[21740-21781]:ExpressionStatement[21740-21781]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[21802-21811]:ContinueStatement[21802-21811]"
    }, {
      "left" : "decodedData = (decodedData << 6) | bits;",
      "right" : "decodedData = (decodedData << 6) | bits;",
      "info" : "ExpressionStatement[21910-21950]:ExpressionStatement[21910-21950]"
    }, {
      "left" : "buffer[outputPtr++] = (byte) (decodedData >> 16);",
      "right" : "buffer[outputPtr++] = (byte) (decodedData >> 16);",
      "info" : "ExpressionStatement[21963-22012]:ExpressionStatement[21963-22012]"
    }, {
      "left" : "buffer[outputPtr++] = (byte) (decodedData >> 8);",
      "right" : "buffer[outputPtr++] = (byte) (decodedData >> 8);",
      "info" : "ExpressionStatement[22025-22073]:ExpressionStatement[22025-22073]"
    }, {
      "left" : "buffer[outputPtr++] = (byte) decodedData;",
      "right" : "buffer[outputPtr++] = (byte) decodedData;",
      "info" : "ExpressionStatement[22086-22127]:ExpressionStatement[22086-22127]"
    }, {
      "left" : "_tokenIncomplete = false;",
      "right" : "_tokenIncomplete = false;",
      "info" : "ExpressionStatement[22146-22171]:ExpressionStatement[22146-22171]"
    }, {
      "left" : "if (outputPtr > 0)",
      "right" : "if (outputPtr > 0)",
      "info" : "IfStatement[22180-22293]:IfStatement[22180-22293]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22199-22293]:Block[22199-22293]"
    }, {
      "left" : "outputCount += outputPtr;",
      "right" : "outputCount += outputPtr;",
      "info" : "ExpressionStatement[22213-22238]:ExpressionStatement[22213-22238]"
    }, {
      "left" : "out.write(buffer, 0, outputPtr);",
      "right" : "out.write(buffer, 0, outputPtr);",
      "info" : "ExpressionStatement[22251-22283]:ExpressionStatement[22251-22283]"
    }, {
      "left" : "return outputCount;",
      "right" : "return outputCount;",
      "info" : "ReturnStatement[22302-22321]:ReturnStatement[22302-22321]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[22628-22637]:MarkerAnnotation[22628-22637]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[22642-22648]:Modifier[22642-22648]"
    }, {
      "left" : "JsonToken",
      "right" : "JsonToken",
      "info" : "SimpleType[22649-22658]:SimpleType[22649-22658]"
    }, {
      "left" : "nextToken",
      "right" : "nextToken",
      "info" : "SimpleName[22659-22668]:SimpleName[22659-22668]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[22678-22689]:SimpleType[22678-22689]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22694-26507]:Block[22694-26507]"
    }, {
      "left" : "if (_currToken == JsonToken.FIELD_NAME)",
      "right" : "if (_currToken == JsonToken.FIELD_NAME)",
      "info" : "IfStatement[22917-23005]:IfStatement[22917-23005]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22957-23005]:Block[22957-23005]"
    }, {
      "left" : "return _nextAfterName();",
      "right" : "return _nextAfterName();",
      "info" : "ReturnStatement[22971-22995]:ReturnStatement[22971-22995]"
    }, {
      "left" : "_numTypesValid = NR_UNKNOWN;",
      "right" : "_numTypesValid = NR_UNKNOWN;",
      "info" : "ExpressionStatement[23154-23182]:ExpressionStatement[23154-23182]"
    }, {
      "left" : "if (_tokenIncomplete)",
      "right" : "if (_tokenIncomplete)",
      "info" : "IfStatement[23191-23282]:IfStatement[23191-23282]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23213-23282]:Block[23213-23282]"
    }, {
      "left" : "_skipString();",
      "right" : "_skipString();",
      "info" : "ExpressionStatement[23227-23241]:ExpressionStatement[23227-23241]"
    }, {
      "left" : "int i = _skipWSOrEnd();",
      "right" : "int i = _skipWSOrEnd();",
      "info" : "VariableDeclarationStatement[23291-23314]:VariableDeclarationStatement[23291-23314]"
    }, {
      "left" : "if (i < 0)",
      "right" : "if (i < 0)",
      "info" : "IfStatement[23323-23513]:IfStatement[23323-23513]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23334-23513]:Block[23334-23513]"
    }, {
      "left" : "close();",
      "right" : "close();",
      "info" : "ExpressionStatement[23455-23463]:ExpressionStatement[23455-23463]"
    }, {
      "left" : "return (_currToken = null);",
      "right" : "return (_currToken = null);",
      "info" : "ReturnStatement[23476-23503]:ReturnStatement[23476-23503]"
    }, {
      "left" : "_binaryValue = null;",
      "right" : "_binaryValue = null;",
      "info" : "ExpressionStatement[23564-23584]:ExpressionStatement[23564-23584]"
    }, {
      "left" : "if (i == INT_RBRACKET)",
      "right" : "if (i == INT_RBRACKET)",
      "info" : "IfStatement[23620-23911]:IfStatement[23620-23911]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23643-23911]:Block[23643-23911]"
    }, {
      "left" : "_updateLocation();",
      "right" : "_updateLocation();",
      "info" : "ExpressionStatement[23657-23675]:ExpressionStatement[23657-23675]"
    }, {
      "left" : "if (!_parsingContext.inArray())",
      "right" : "if (!_parsingContext.inArray())",
      "info" : "IfStatement[23688-23787]:IfStatement[23688-23787]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23720-23787]:Block[23720-23787]"
    }, {
      "left" : "_reportMismatchedEndMarker(i, '}');",
      "right" : "_reportMismatchedEndMarker(i, '}');",
      "info" : "ExpressionStatement[23738-23773]:ExpressionStatement[23738-23773]"
    }, {
      "left" : "_parsingContext = _parsingContext.getParent();",
      "right" : "_parsingContext = _parsingContext.getParent();",
      "info" : "ExpressionStatement[23800-23846]:ExpressionStatement[23800-23846]"
    }, {
      "left" : "return (_currToken = JsonToken.END_ARRAY);",
      "right" : "return (_currToken = JsonToken.END_ARRAY);",
      "info" : "ReturnStatement[23859-23901]:ReturnStatement[23859-23901]"
    }, {
      "left" : "if (i == INT_RCURLY)",
      "right" : "if (i == INT_RCURLY)",
      "info" : "IfStatement[23920-24211]:IfStatement[23920-24211]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23941-24211]:Block[23941-24211]"
    }, {
      "left" : "_updateLocation();",
      "right" : "_updateLocation();",
      "info" : "ExpressionStatement[23955-23973]:ExpressionStatement[23955-23973]"
    }, {
      "left" : "if (!_parsingContext.inObject())",
      "right" : "if (!_parsingContext.inObject())",
      "info" : "IfStatement[23986-24086]:IfStatement[23986-24086]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24019-24086]:Block[24019-24086]"
    }, {
      "left" : "_reportMismatchedEndMarker(i, ']');",
      "right" : "_reportMismatchedEndMarker(i, ']');",
      "info" : "ExpressionStatement[24037-24072]:ExpressionStatement[24037-24072]"
    }, {
      "left" : "_parsingContext = _parsingContext.getParent();",
      "right" : "_parsingContext = _parsingContext.getParent();",
      "info" : "ExpressionStatement[24099-24145]:ExpressionStatement[24099-24145]"
    }, {
      "left" : "return (_currToken = JsonToken.END_OBJECT);",
      "right" : "return (_currToken = JsonToken.END_OBJECT);",
      "info" : "ReturnStatement[24158-24201]:ReturnStatement[24158-24201]"
    }, {
      "left" : "if (_parsingContext.expectComma())",
      "right" : "if (_parsingContext.expectComma())",
      "info" : "IfStatement[24265-24505]:IfStatement[24265-24505]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24300-24505]:Block[24300-24505]"
    }, {
      "left" : "if (i != INT_COMMA)",
      "right" : "if (i != INT_COMMA)",
      "info" : "IfStatement[24314-24468]:IfStatement[24314-24468]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24334-24468]:Block[24334-24468]"
    }, {
      "left" : "_reportUnexpectedChar(i, \"was expecting comma to separate \"+_parsingContext.getTypeDesc()+\" entries\");",
      "right" : "_reportUnexpectedChar(i, \"was expecting comma to separate \"+_parsingContext.getTypeDesc()+\" entries\");",
      "info" : "ExpressionStatement[24352-24454]:ExpressionStatement[24352-24454]"
    }, {
      "left" : "i = _skipWS();",
      "right" : "i = _skipWS();",
      "info" : "ExpressionStatement[24481-24495]:ExpressionStatement[24481-24495]"
    }, {
      "left" : "if (!_parsingContext.inObject())",
      "right" : "if (!_parsingContext.inObject())",
      "info" : "IfStatement[24687-24807]:IfStatement[24687-24807]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24720-24807]:Block[24720-24807]"
    }, {
      "left" : "_updateLocation();",
      "right" : "_updateLocation();",
      "info" : "ExpressionStatement[24734-24752]:ExpressionStatement[24734-24752]"
    }, {
      "left" : "return _nextTokenNotInObject(i);",
      "right" : "return _nextTokenNotInObject(i);",
      "info" : "ReturnStatement[24765-24797]:ReturnStatement[24765-24797]"
    }, {
      "left" : "_updateNameLocation();",
      "right" : "_updateNameLocation();",
      "info" : "ExpressionStatement[24865-24887]:ExpressionStatement[24865-24887]"
    }, {
      "left" : "String n = _parseName(i);",
      "right" : "String n = _parseName(i);",
      "info" : "VariableDeclarationStatement[24896-24921]:VariableDeclarationStatement[24896-24921]"
    }, {
      "left" : "_parsingContext.setCurrentName(n);",
      "right" : "_parsingContext.setCurrentName(n);",
      "info" : "ExpressionStatement[24930-24964]:ExpressionStatement[24930-24964]"
    }, {
      "left" : "_currToken = JsonToken.FIELD_NAME;",
      "right" : "_currToken = JsonToken.FIELD_NAME;",
      "info" : "ExpressionStatement[24973-25007]:ExpressionStatement[24973-25007]"
    }, {
      "left" : "i = _skipColon();",
      "right" : "i = _skipColon();",
      "info" : "ExpressionStatement[25017-25034]:ExpressionStatement[25017-25034]"
    }, {
      "left" : "_updateLocation();",
      "right" : "_updateLocation();",
      "info" : "ExpressionStatement[25043-25061]:ExpressionStatement[25043-25061]"
    }, {
      "left" : "if (i == INT_QUOTE)",
      "right" : "if (i == INT_QUOTE)",
      "info" : "IfStatement[25160-25308]:IfStatement[25160-25308]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25180-25308]:Block[25180-25308]"
    }, {
      "left" : "_tokenIncomplete = true;",
      "right" : "_tokenIncomplete = true;",
      "info" : "ExpressionStatement[25194-25218]:ExpressionStatement[25194-25218]"
    }, {
      "left" : "_nextToken = JsonToken.VALUE_STRING;",
      "right" : "_nextToken = JsonToken.VALUE_STRING;",
      "info" : "ExpressionStatement[25231-25267]:ExpressionStatement[25231-25267]"
    }, {
      "left" : "return _currToken;",
      "right" : "return _currToken;",
      "info" : "ReturnStatement[25280-25298]:ReturnStatement[25280-25298]"
    }, {
      "left" : "JsonToken t;",
      "right" : "JsonToken t;",
      "info" : "VariableDeclarationStatement[25325-25337]:VariableDeclarationStatement[25325-25337]"
    }, {
      "left" : "switch (i) {\n        case '-':\n            t = _parseNegNumber();\n            break;\n\n            /* Should we have separate handling for plus? Although\n             * it is not allowed per se, it may be erroneously used,\n             * and could be indicate by a more specific error message.\n             */\n        case '0':\n        case '1':\n        case '2':\n        case '3':\n        case '4':\n        case '5':\n        case '6':\n        case '7':\n        case '8':\n        case '9':\n            t = _parsePosNumber(i);\n            break;\n        case 'f':\n            _matchToken(\"false\", 1);\n             t = JsonToken.VALUE_FALSE;\n            break;\n        case 'n':\n            _matchToken(\"null\", 1);\n            t = JsonToken.VALUE_NULL;\n            break;\n        case 't':\n            _matchToken(\"true\", 1);\n            t = JsonToken.VALUE_TRUE;\n            break;\n        case '[':\n            t = JsonToken.START_ARRAY;\n            break;\n        case '{':\n            t = JsonToken.START_OBJECT;\n            break;\n\n        default:\n            t = _handleUnexpectedValue(i);\n        }",
      "right" : "switch (i) {\n        case '-':\n            t = _parseNegNumber();\n            break;\n\n            /* Should we have separate handling for plus? Although\n             * it is not allowed per se, it may be erroneously used,\n             * and could be indicate by a more specific error message.\n             */\n        case '0':\n        case '1':\n        case '2':\n        case '3':\n        case '4':\n        case '5':\n        case '6':\n        case '7':\n        case '8':\n        case '9':\n            t = _parsePosNumber(i);\n            break;\n        case 'f':\n            _matchToken(\"false\", 1);\n             t = JsonToken.VALUE_FALSE;\n            break;\n        case 'n':\n            _matchToken(\"null\", 1);\n            t = JsonToken.VALUE_NULL;\n            break;\n        case 't':\n            _matchToken(\"true\", 1);\n            t = JsonToken.VALUE_TRUE;\n            break;\n        case '[':\n            t = JsonToken.START_ARRAY;\n            break;\n        case '{':\n            t = JsonToken.START_OBJECT;\n            break;\n\n        default:\n            t = _handleUnexpectedValue(i);\n        }",
      "info" : "SwitchStatement[25347-26450]:SwitchStatement[25347-26450]"
    }, {
      "left" : "case '-':",
      "right" : "case '-':",
      "info" : "SwitchCase[25368-25377]:SwitchCase[25368-25377]"
    }, {
      "left" : "t = _parseNegNumber();",
      "right" : "t = _parseNegNumber();",
      "info" : "ExpressionStatement[25390-25412]:ExpressionStatement[25390-25412]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[25425-25431]:BreakStatement[25425-25431]"
    }, {
      "left" : "case '0':",
      "right" : "case '0':",
      "info" : "SwitchCase[25664-25673]:SwitchCase[25664-25673]"
    }, {
      "left" : "case '1':",
      "right" : "case '1':",
      "info" : "SwitchCase[25682-25691]:SwitchCase[25682-25691]"
    }, {
      "left" : "case '2':",
      "right" : "case '2':",
      "info" : "SwitchCase[25700-25709]:SwitchCase[25700-25709]"
    }, {
      "left" : "case '3':",
      "right" : "case '3':",
      "info" : "SwitchCase[25718-25727]:SwitchCase[25718-25727]"
    }, {
      "left" : "case '4':",
      "right" : "case '4':",
      "info" : "SwitchCase[25736-25745]:SwitchCase[25736-25745]"
    }, {
      "left" : "case '5':",
      "right" : "case '5':",
      "info" : "SwitchCase[25754-25763]:SwitchCase[25754-25763]"
    }, {
      "left" : "case '6':",
      "right" : "case '6':",
      "info" : "SwitchCase[25772-25781]:SwitchCase[25772-25781]"
    }, {
      "left" : "case '7':",
      "right" : "case '7':",
      "info" : "SwitchCase[25790-25799]:SwitchCase[25790-25799]"
    }, {
      "left" : "case '8':",
      "right" : "case '8':",
      "info" : "SwitchCase[25808-25817]:SwitchCase[25808-25817]"
    }, {
      "left" : "case '9':",
      "right" : "case '9':",
      "info" : "SwitchCase[25826-25835]:SwitchCase[25826-25835]"
    }, {
      "left" : "t = _parsePosNumber(i);",
      "right" : "t = _parsePosNumber(i);",
      "info" : "ExpressionStatement[25848-25871]:ExpressionStatement[25848-25871]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[25884-25890]:BreakStatement[25884-25890]"
    }, {
      "left" : "case 'f':",
      "right" : "case 'f':",
      "info" : "SwitchCase[25899-25908]:SwitchCase[25899-25908]"
    }, {
      "left" : "_matchToken(\"false\", 1);",
      "right" : "_matchToken(\"false\", 1);",
      "info" : "ExpressionStatement[25921-25945]:ExpressionStatement[25921-25945]"
    }, {
      "left" : "t = JsonToken.VALUE_FALSE;",
      "right" : "t = JsonToken.VALUE_FALSE;",
      "info" : "ExpressionStatement[25959-25985]:ExpressionStatement[25959-25985]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[25998-26004]:BreakStatement[25998-26004]"
    }, {
      "left" : "case 'n':",
      "right" : "case 'n':",
      "info" : "SwitchCase[26013-26022]:SwitchCase[26013-26022]"
    }, {
      "left" : "_matchToken(\"null\", 1);",
      "right" : "_matchToken(\"null\", 1);",
      "info" : "ExpressionStatement[26035-26058]:ExpressionStatement[26035-26058]"
    }, {
      "left" : "t = JsonToken.VALUE_NULL;",
      "right" : "t = JsonToken.VALUE_NULL;",
      "info" : "ExpressionStatement[26071-26096]:ExpressionStatement[26071-26096]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[26109-26115]:BreakStatement[26109-26115]"
    }, {
      "left" : "case 't':",
      "right" : "case 't':",
      "info" : "SwitchCase[26124-26133]:SwitchCase[26124-26133]"
    }, {
      "left" : "_matchToken(\"true\", 1);",
      "right" : "_matchToken(\"true\", 1);",
      "info" : "ExpressionStatement[26146-26169]:ExpressionStatement[26146-26169]"
    }, {
      "left" : "t = JsonToken.VALUE_TRUE;",
      "right" : "t = JsonToken.VALUE_TRUE;",
      "info" : "ExpressionStatement[26182-26207]:ExpressionStatement[26182-26207]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[26220-26226]:BreakStatement[26220-26226]"
    }, {
      "left" : "case '[':",
      "right" : "case '[':",
      "info" : "SwitchCase[26235-26244]:SwitchCase[26235-26244]"
    }, {
      "left" : "t = JsonToken.START_ARRAY;",
      "right" : "t = JsonToken.START_ARRAY;",
      "info" : "ExpressionStatement[26257-26283]:ExpressionStatement[26257-26283]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[26296-26302]:BreakStatement[26296-26302]"
    }, {
      "left" : "case '{':",
      "right" : "case '{':",
      "info" : "SwitchCase[26311-26320]:SwitchCase[26311-26320]"
    }, {
      "left" : "t = JsonToken.START_OBJECT;",
      "right" : "t = JsonToken.START_OBJECT;",
      "info" : "ExpressionStatement[26333-26360]:ExpressionStatement[26333-26360]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[26373-26379]:BreakStatement[26373-26379]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[26389-26397]:SwitchCase[26389-26397]"
    }, {
      "left" : "t = _handleUnexpectedValue(i);",
      "right" : "t = _handleUnexpectedValue(i);",
      "info" : "ExpressionStatement[26410-26440]:ExpressionStatement[26410-26440]"
    }, {
      "left" : "_nextToken = t;",
      "right" : "_nextToken = t;",
      "info" : "ExpressionStatement[26459-26474]:ExpressionStatement[26459-26474]"
    }, {
      "left" : "return _currToken;",
      "right" : "return _currToken;",
      "info" : "ReturnStatement[26483-26501]:ReturnStatement[26483-26501]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[26513-26520]:Modifier[26513-26520]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[26521-26526]:Modifier[26521-26526]"
    }, {
      "left" : "JsonToken",
      "right" : "JsonToken",
      "info" : "SimpleType[26527-26536]:SimpleType[26527-26536]"
    }, {
      "left" : "_nextTokenNotInObject",
      "right" : "_nextTokenNotInObject",
      "info" : "SimpleName[26537-26558]:SimpleName[26537-26558]"
    }, {
      "left" : "int i",
      "right" : "int i",
      "info" : "SingleVariableDeclaration[26559-26564]:SingleVariableDeclaration[26559-26564]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[26573-26584]:SimpleType[26573-26584]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26589-28038]:Block[26589-28038]"
    }, {
      "left" : "if (i == INT_QUOTE)",
      "right" : "if (i == INT_QUOTE)",
      "info" : "IfStatement[26599-26725]:IfStatement[26599-26725]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26619-26725]:Block[26619-26725]"
    }, {
      "left" : "_tokenIncomplete = true;",
      "right" : "_tokenIncomplete = true;",
      "info" : "ExpressionStatement[26633-26657]:ExpressionStatement[26633-26657]"
    }, {
      "left" : "return (_currToken = JsonToken.VALUE_STRING);",
      "right" : "return (_currToken = JsonToken.VALUE_STRING);",
      "info" : "ReturnStatement[26670-26715]:ReturnStatement[26670-26715]"
    }, {
      "left" : "switch (i) {\n        case '[':\n            _parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);\n            return (_currToken = JsonToken.START_ARRAY);\n        case '{':\n            _parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);\n            return (_currToken = JsonToken.START_OBJECT);\n        case 't':\n            _matchToken(\"true\", 1);\n            return (_currToken = JsonToken.VALUE_TRUE);\n        case 'f':\n            _matchToken(\"false\", 1);\n            return (_currToken = JsonToken.VALUE_FALSE);\n        case 'n':\n            _matchToken(\"null\", 1);\n            return (_currToken = JsonToken.VALUE_NULL);\n        case '-':\n            return (_currToken = _parseNegNumber());\n            /* Should we have separate handling for plus? Although\n             * it is not allowed per se, it may be erroneously used,\n             * and could be indicated by a more specific error message.\n             */\n        case '0':\n        case '1':\n        case '2':\n        case '3':\n        case '4':\n        case '5':\n        case '6':\n        case '7':\n        case '8':\n        case '9':\n            return (_currToken = _parsePosNumber(i));\n        }",
      "right" : "switch (i) {\n        case '[':\n            _parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);\n            return (_currToken = JsonToken.START_ARRAY);\n        case '{':\n            _parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);\n            return (_currToken = JsonToken.START_OBJECT);\n        case 't':\n            _matchToken(\"true\", 1);\n            return (_currToken = JsonToken.VALUE_TRUE);\n        case 'f':\n            _matchToken(\"false\", 1);\n            return (_currToken = JsonToken.VALUE_FALSE);\n        case 'n':\n            _matchToken(\"null\", 1);\n            return (_currToken = JsonToken.VALUE_NULL);\n        case '-':\n            return (_currToken = _parseNegNumber());\n            /* Should we have separate handling for plus? Although\n             * it is not allowed per se, it may be erroneously used,\n             * and could be indicated by a more specific error message.\n             */\n        case '0':\n        case '1':\n        case '2':\n        case '3':\n        case '4':\n        case '5':\n        case '6':\n        case '7':\n        case '8':\n        case '9':\n            return (_currToken = _parsePosNumber(i));\n        }",
      "info" : "SwitchStatement[26734-27975]:SwitchStatement[26734-27975]"
    }, {
      "left" : "case '[':",
      "right" : "case '[':",
      "info" : "SwitchCase[26755-26764]:SwitchCase[26755-26764]"
    }, {
      "left" : "_parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);",
      "right" : "_parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);",
      "info" : "ExpressionStatement[26777-26867]:ExpressionStatement[26777-26867]"
    }, {
      "left" : "return (_currToken = JsonToken.START_ARRAY);",
      "right" : "return (_currToken = JsonToken.START_ARRAY);",
      "info" : "ReturnStatement[26880-26924]:ReturnStatement[26880-26924]"
    }, {
      "left" : "case '{':",
      "right" : "case '{':",
      "info" : "SwitchCase[26933-26942]:SwitchCase[26933-26942]"
    }, {
      "left" : "_parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);",
      "right" : "_parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);",
      "info" : "ExpressionStatement[26955-27046]:ExpressionStatement[26955-27046]"
    }, {
      "left" : "return (_currToken = JsonToken.START_OBJECT);",
      "right" : "return (_currToken = JsonToken.START_OBJECT);",
      "info" : "ReturnStatement[27059-27104]:ReturnStatement[27059-27104]"
    }, {
      "left" : "case 't':",
      "right" : "case 't':",
      "info" : "SwitchCase[27113-27122]:SwitchCase[27113-27122]"
    }, {
      "left" : "_matchToken(\"true\", 1);",
      "right" : "_matchToken(\"true\", 1);",
      "info" : "ExpressionStatement[27135-27158]:ExpressionStatement[27135-27158]"
    }, {
      "left" : "return (_currToken = JsonToken.VALUE_TRUE);",
      "right" : "return (_currToken = JsonToken.VALUE_TRUE);",
      "info" : "ReturnStatement[27171-27214]:ReturnStatement[27171-27214]"
    }, {
      "left" : "case 'f':",
      "right" : "case 'f':",
      "info" : "SwitchCase[27223-27232]:SwitchCase[27223-27232]"
    }, {
      "left" : "_matchToken(\"false\", 1);",
      "right" : "_matchToken(\"false\", 1);",
      "info" : "ExpressionStatement[27245-27269]:ExpressionStatement[27245-27269]"
    }, {
      "left" : "return (_currToken = JsonToken.VALUE_FALSE);",
      "right" : "return (_currToken = JsonToken.VALUE_FALSE);",
      "info" : "ReturnStatement[27282-27326]:ReturnStatement[27282-27326]"
    }, {
      "left" : "case 'n':",
      "right" : "case 'n':",
      "info" : "SwitchCase[27335-27344]:SwitchCase[27335-27344]"
    }, {
      "left" : "_matchToken(\"null\", 1);",
      "right" : "_matchToken(\"null\", 1);",
      "info" : "ExpressionStatement[27357-27380]:ExpressionStatement[27357-27380]"
    }, {
      "left" : "return (_currToken = JsonToken.VALUE_NULL);",
      "right" : "return (_currToken = JsonToken.VALUE_NULL);",
      "info" : "ReturnStatement[27393-27436]:ReturnStatement[27393-27436]"
    }, {
      "left" : "case '-':",
      "right" : "case '-':",
      "info" : "SwitchCase[27445-27454]:SwitchCase[27445-27454]"
    }, {
      "left" : "return (_currToken = _parseNegNumber());",
      "right" : "return (_currToken = _parseNegNumber());",
      "info" : "ReturnStatement[27467-27507]:ReturnStatement[27467-27507]"
    }, {
      "left" : "case '0':",
      "right" : "case '0':",
      "info" : "SwitchCase[27740-27749]:SwitchCase[27740-27749]"
    }, {
      "left" : "case '1':",
      "right" : "case '1':",
      "info" : "SwitchCase[27758-27767]:SwitchCase[27758-27767]"
    }, {
      "left" : "case '2':",
      "right" : "case '2':",
      "info" : "SwitchCase[27776-27785]:SwitchCase[27776-27785]"
    }, {
      "left" : "case '3':",
      "right" : "case '3':",
      "info" : "SwitchCase[27794-27803]:SwitchCase[27794-27803]"
    }, {
      "left" : "case '4':",
      "right" : "case '4':",
      "info" : "SwitchCase[27812-27821]:SwitchCase[27812-27821]"
    }, {
      "left" : "case '5':",
      "right" : "case '5':",
      "info" : "SwitchCase[27830-27839]:SwitchCase[27830-27839]"
    }, {
      "left" : "case '6':",
      "right" : "case '6':",
      "info" : "SwitchCase[27848-27857]:SwitchCase[27848-27857]"
    }, {
      "left" : "case '7':",
      "right" : "case '7':",
      "info" : "SwitchCase[27866-27875]:SwitchCase[27866-27875]"
    }, {
      "left" : "case '8':",
      "right" : "case '8':",
      "info" : "SwitchCase[27884-27893]:SwitchCase[27884-27893]"
    }, {
      "left" : "case '9':",
      "right" : "case '9':",
      "info" : "SwitchCase[27902-27911]:SwitchCase[27902-27911]"
    }, {
      "left" : "return (_currToken = _parsePosNumber(i));",
      "right" : "return (_currToken = _parsePosNumber(i));",
      "info" : "ReturnStatement[27924-27965]:ReturnStatement[27924-27965]"
    }, {
      "left" : "return (_currToken = _handleUnexpectedValue(i));",
      "right" : "return (_currToken = _handleUnexpectedValue(i));",
      "info" : "ReturnStatement[27984-28032]:ReturnStatement[27984-28032]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[28048-28055]:Modifier[28048-28055]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[28056-28061]:Modifier[28056-28061]"
    }, {
      "left" : "JsonToken",
      "right" : "JsonToken",
      "info" : "SimpleType[28062-28071]:SimpleType[28062-28071]"
    }, {
      "left" : "_nextAfterName",
      "right" : "_nextAfterName",
      "info" : "SimpleName[28072-28086]:SimpleName[28072-28086]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28093-28716]:Block[28093-28716]"
    }, {
      "left" : "_nameCopied = false;",
      "right" : "_nameCopied = false;",
      "info" : "ExpressionStatement[28103-28123]:ExpressionStatement[28103-28123]"
    }, {
      "left" : "JsonToken t = _nextToken;",
      "right" : "JsonToken t = _nextToken;",
      "info" : "VariableDeclarationStatement[28171-28196]:VariableDeclarationStatement[28171-28196]"
    }, {
      "left" : "_nextToken = null;",
      "right" : "_nextToken = null;",
      "info" : "ExpressionStatement[28205-28223]:ExpressionStatement[28205-28223]"
    }, {
      "left" : "if (t == JsonToken.START_ARRAY)",
      "right" : "if (t == JsonToken.START_ARRAY)",
      "info" : "IfStatement[28377-28677]:IfStatement[28377-28677]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28409-28523]:Block[28409-28523]"
    }, {
      "left" : "_parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);",
      "right" : "_parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);",
      "info" : "ExpressionStatement[28423-28513]:ExpressionStatement[28423-28513]"
    }, {
      "left" : "if (t == JsonToken.START_OBJECT)",
      "right" : "if (t == JsonToken.START_OBJECT)",
      "info" : "IfStatement[28529-28677]:IfStatement[28529-28677]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28562-28677]:Block[28562-28677]"
    }, {
      "left" : "_parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);",
      "right" : "_parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);",
      "info" : "ExpressionStatement[28576-28667]:ExpressionStatement[28576-28667]"
    }, {
      "left" : "return (_currToken = t);",
      "right" : "return (_currToken = t);",
      "info" : "ReturnStatement[28686-28710]:ReturnStatement[28686-28710]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[28927-28936]:MarkerAnnotation[28927-28936]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[28941-28947]:Modifier[28941-28947]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[28948-28955]:PrimitiveType[28948-28955]"
    }, {
      "left" : "nextFieldName",
      "right" : "nextFieldName",
      "info" : "SimpleName[28956-28969]:SimpleName[28956-28969]"
    }, {
      "left" : "SerializableString str",
      "right" : "SerializableString str",
      "info" : "SingleVariableDeclaration[28970-28992]:SingleVariableDeclaration[28970-28992]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[29001-29012]:SimpleType[29001-29012]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29017-31996]:Block[29017-31996]"
    }, {
      "left" : "_numTypesValid = NR_UNKNOWN;",
      "right" : "_numTypesValid = NR_UNKNOWN;",
      "info" : "ExpressionStatement[29096-29124]:ExpressionStatement[29096-29124]"
    }, {
      "left" : "if (_currToken == JsonToken.FIELD_NAME)",
      "right" : "if (_currToken == JsonToken.FIELD_NAME)",
      "info" : "IfStatement[29133-29276]:IfStatement[29133-29276]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29173-29276]:Block[29173-29276]"
    }, {
      "left" : "_nextAfterName();",
      "right" : "_nextAfterName();",
      "info" : "ExpressionStatement[29223-29240]:ExpressionStatement[29223-29240]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[29253-29266]:ReturnStatement[29253-29266]"
    }, {
      "left" : "if (_tokenIncomplete)",
      "right" : "if (_tokenIncomplete)",
      "info" : "IfStatement[29285-29345]:IfStatement[29285-29345]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29307-29345]:Block[29307-29345]"
    }, {
      "left" : "_skipString();",
      "right" : "_skipString();",
      "info" : "ExpressionStatement[29321-29335]:ExpressionStatement[29321-29335]"
    }, {
      "left" : "int i = _skipWSOrEnd();",
      "right" : "int i = _skipWSOrEnd();",
      "info" : "VariableDeclarationStatement[29354-29377]:VariableDeclarationStatement[29354-29377]"
    }, {
      "left" : "if (i < 0)",
      "right" : "if (i < 0)",
      "info" : "IfStatement[29386-29502]:IfStatement[29386-29502]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29397-29502]:Block[29397-29502]"
    }, {
      "left" : "close();",
      "right" : "close();",
      "info" : "ExpressionStatement[29427-29435]:ExpressionStatement[29427-29435]"
    }, {
      "left" : "_currToken = null;",
      "right" : "_currToken = null;",
      "info" : "ExpressionStatement[29448-29466]:ExpressionStatement[29448-29466]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[29479-29492]:ReturnStatement[29479-29492]"
    }, {
      "left" : "_binaryValue = null;",
      "right" : "_binaryValue = null;",
      "info" : "ExpressionStatement[29511-29531]:ExpressionStatement[29511-29531]"
    }, {
      "left" : "if (i == INT_RBRACKET)",
      "right" : "if (i == INT_RBRACKET)",
      "info" : "IfStatement[29567-29875]:IfStatement[29567-29875]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29590-29875]:Block[29590-29875]"
    }, {
      "left" : "_updateLocation();",
      "right" : "_updateLocation();",
      "info" : "ExpressionStatement[29604-29622]:ExpressionStatement[29604-29622]"
    }, {
      "left" : "if (!_parsingContext.inArray())",
      "right" : "if (!_parsingContext.inArray())",
      "info" : "IfStatement[29635-29734]:IfStatement[29635-29734]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29667-29734]:Block[29667-29734]"
    }, {
      "left" : "_reportMismatchedEndMarker(i, '}');",
      "right" : "_reportMismatchedEndMarker(i, '}');",
      "info" : "ExpressionStatement[29685-29720]:ExpressionStatement[29685-29720]"
    }, {
      "left" : "_parsingContext = _parsingContext.getParent();",
      "right" : "_parsingContext = _parsingContext.getParent();",
      "info" : "ExpressionStatement[29747-29793]:ExpressionStatement[29747-29793]"
    }, {
      "left" : "_currToken = JsonToken.END_ARRAY;",
      "right" : "_currToken = JsonToken.END_ARRAY;",
      "info" : "ExpressionStatement[29806-29839]:ExpressionStatement[29806-29839]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[29852-29865]:ReturnStatement[29852-29865]"
    }, {
      "left" : "if (i == INT_RCURLY)",
      "right" : "if (i == INT_RCURLY)",
      "info" : "IfStatement[29884-30192]:IfStatement[29884-30192]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29905-30192]:Block[29905-30192]"
    }, {
      "left" : "_updateLocation();",
      "right" : "_updateLocation();",
      "info" : "ExpressionStatement[29919-29937]:ExpressionStatement[29919-29937]"
    }, {
      "left" : "if (!_parsingContext.inObject())",
      "right" : "if (!_parsingContext.inObject())",
      "info" : "IfStatement[29950-30050]:IfStatement[29950-30050]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29983-30050]:Block[29983-30050]"
    }, {
      "left" : "_reportMismatchedEndMarker(i, ']');",
      "right" : "_reportMismatchedEndMarker(i, ']');",
      "info" : "ExpressionStatement[30001-30036]:ExpressionStatement[30001-30036]"
    }, {
      "left" : "_parsingContext = _parsingContext.getParent();",
      "right" : "_parsingContext = _parsingContext.getParent();",
      "info" : "ExpressionStatement[30063-30109]:ExpressionStatement[30063-30109]"
    }, {
      "left" : "_currToken = JsonToken.END_OBJECT;",
      "right" : "_currToken = JsonToken.END_OBJECT;",
      "info" : "ExpressionStatement[30122-30156]:ExpressionStatement[30122-30156]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[30169-30182]:ReturnStatement[30169-30182]"
    }, {
      "left" : "if (_parsingContext.expectComma())",
      "right" : "if (_parsingContext.expectComma())",
      "info" : "IfStatement[30246-30486]:IfStatement[30246-30486]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30281-30486]:Block[30281-30486]"
    }, {
      "left" : "if (i != INT_COMMA)",
      "right" : "if (i != INT_COMMA)",
      "info" : "IfStatement[30295-30449]:IfStatement[30295-30449]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30315-30449]:Block[30315-30449]"
    }, {
      "left" : "_reportUnexpectedChar(i, \"was expecting comma to separate \"+_parsingContext.getTypeDesc()+\" entries\");",
      "right" : "_reportUnexpectedChar(i, \"was expecting comma to separate \"+_parsingContext.getTypeDesc()+\" entries\");",
      "info" : "ExpressionStatement[30333-30435]:ExpressionStatement[30333-30435]"
    }, {
      "left" : "i = _skipWS();",
      "right" : "i = _skipWS();",
      "info" : "ExpressionStatement[30462-30476]:ExpressionStatement[30462-30476]"
    }, {
      "left" : "if (!_parsingContext.inObject())",
      "right" : "if (!_parsingContext.inObject())",
      "info" : "IfStatement[30496-30635]:IfStatement[30496-30635]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30529-30635]:Block[30529-30635]"
    }, {
      "left" : "_updateLocation();",
      "right" : "_updateLocation();",
      "info" : "ExpressionStatement[30543-30561]:ExpressionStatement[30543-30561]"
    }, {
      "left" : "_nextTokenNotInObject(i);",
      "right" : "_nextTokenNotInObject(i);",
      "info" : "ExpressionStatement[30574-30599]:ExpressionStatement[30574-30599]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[30612-30625]:ReturnStatement[30612-30625]"
    }, {
      "left" : "_updateNameLocation();",
      "right" : "_updateNameLocation();",
      "info" : "ExpressionStatement[30702-30724]:ExpressionStatement[30702-30724]"
    }, {
      "left" : "if (i == INT_QUOTE)",
      "right" : "if (i == INT_QUOTE)",
      "info" : "IfStatement[30733-31944]:IfStatement[30733-31944]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30753-31944]:Block[30753-31944]"
    }, {
      "left" : "byte[] nameBytes = str.asQuotedUTF8();",
      "right" : "byte[] nameBytes = str.asQuotedUTF8();",
      "info" : "VariableDeclarationStatement[30832-30870]:VariableDeclarationStatement[30832-30870]"
    }, {
      "left" : "final int len = nameBytes.length;",
      "right" : "final int len = nameBytes.length;",
      "info" : "VariableDeclarationStatement[30883-30916]:VariableDeclarationStatement[30883-30916]"
    }, {
      "left" : "if ((_inputPtr + len + 4) < _inputEnd)",
      "right" : "if ((_inputPtr + len + 4) < _inputEnd)",
      "info" : "IfStatement[31065-31934]:IfStatement[31065-31934]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31104-31934]:Block[31104-31934]"
    }, {
      "left" : "final int end = _inputPtr+len;",
      "right" : "final int end = _inputPtr+len;",
      "info" : "VariableDeclarationStatement[31181-31211]:VariableDeclarationStatement[31181-31211]"
    }, {
      "left" : "if (_inputBuffer[end] == INT_QUOTE)",
      "right" : "if (_inputBuffer[end] == INT_QUOTE)",
      "info" : "IfStatement[31228-31920]:IfStatement[31228-31920]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31264-31920]:Block[31264-31920]"
    }, {
      "left" : "int offset = 0;",
      "right" : "int offset = 0;",
      "info" : "VariableDeclarationStatement[31286-31301]:VariableDeclarationStatement[31286-31301]"
    }, {
      "left" : "int ptr = _inputPtr;",
      "right" : "int ptr = _inputPtr;",
      "info" : "VariableDeclarationStatement[31322-31342]:VariableDeclarationStatement[31322-31342]"
    }, {
      "left" : "while (true)",
      "right" : "while (true)",
      "info" : "WhileStatement[31363-31902]:WhileStatement[31363-31902]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31376-31902]:Block[31376-31902]"
    }, {
      "left" : "if (ptr == end)",
      "right" : "if (ptr == end)",
      "info" : "IfStatement[31402-31684]:IfStatement[31402-31684]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31418-31684]:Block[31418-31684]"
    }, {
      "left" : "_parsingContext.setCurrentName(str.getValue());",
      "right" : "_parsingContext.setCurrentName(str.getValue());",
      "info" : "ExpressionStatement[31463-31510]:ExpressionStatement[31463-31510]"
    }, {
      "left" : "i = _skipColonFast(ptr+1);",
      "right" : "i = _skipColonFast(ptr+1);",
      "info" : "ExpressionStatement[31539-31565]:ExpressionStatement[31539-31565]"
    }, {
      "left" : "_isNextTokenNameYes(i);",
      "right" : "_isNextTokenNameYes(i);",
      "info" : "ExpressionStatement[31594-31617]:ExpressionStatement[31594-31617]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[31646-31658]:ReturnStatement[31646-31658]"
    }, {
      "left" : "if (nameBytes[offset] != _inputBuffer[ptr])",
      "right" : "if (nameBytes[offset] != _inputBuffer[ptr])",
      "info" : "IfStatement[31709-31815]:IfStatement[31709-31815]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31753-31815]:Block[31753-31815]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[31783-31789]:BreakStatement[31783-31789]"
    }, {
      "left" : "++offset;",
      "right" : "++offset;",
      "info" : "ExpressionStatement[31840-31849]:ExpressionStatement[31840-31849]"
    }, {
      "left" : "++ptr;",
      "right" : "++ptr;",
      "info" : "ExpressionStatement[31874-31880]:ExpressionStatement[31874-31880]"
    }, {
      "left" : "return _isNextTokenNameMaybe(i, str);",
      "right" : "return _isNextTokenNameMaybe(i, str);",
      "info" : "ReturnStatement[31953-31990]:ReturnStatement[31953-31990]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[32002-32011]:MarkerAnnotation[32002-32011]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[32016-32022]:Modifier[32016-32022]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[32023-32029]:SimpleType[32023-32029]"
    }, {
      "left" : "nextFieldName",
      "right" : "nextFieldName",
      "info" : "SimpleName[32030-32043]:SimpleName[32030-32043]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[32053-32064]:SimpleType[32053-32064]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32069-34945]:Block[32069-34945]"
    }, {
      "left" : "_numTypesValid = NR_UNKNOWN;",
      "right" : "_numTypesValid = NR_UNKNOWN;",
      "info" : "ExpressionStatement[32149-32177]:ExpressionStatement[32149-32177]"
    }, {
      "left" : "if (_currToken == JsonToken.FIELD_NAME)",
      "right" : "if (_currToken == JsonToken.FIELD_NAME)",
      "info" : "IfStatement[32186-32292]:IfStatement[32186-32292]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32226-32292]:Block[32226-32292]"
    }, {
      "left" : "_nextAfterName();",
      "right" : "_nextAfterName();",
      "info" : "ExpressionStatement[32240-32257]:ExpressionStatement[32240-32257]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[32270-32282]:ReturnStatement[32270-32282]"
    }, {
      "left" : "if (_tokenIncomplete)",
      "right" : "if (_tokenIncomplete)",
      "info" : "IfStatement[32301-32361]:IfStatement[32301-32361]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32323-32361]:Block[32323-32361]"
    }, {
      "left" : "_skipString();",
      "right" : "_skipString();",
      "info" : "ExpressionStatement[32337-32351]:ExpressionStatement[32337-32351]"
    }, {
      "left" : "int i = _skipWSOrEnd();",
      "right" : "int i = _skipWSOrEnd();",
      "info" : "VariableDeclarationStatement[32370-32393]:VariableDeclarationStatement[32370-32393]"
    }, {
      "left" : "if (i < 0)",
      "right" : "if (i < 0)",
      "info" : "IfStatement[32402-32501]:IfStatement[32402-32501]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32413-32501]:Block[32413-32501]"
    }, {
      "left" : "close();",
      "right" : "close();",
      "info" : "ExpressionStatement[32427-32435]:ExpressionStatement[32427-32435]"
    }, {
      "left" : "_currToken = null;",
      "right" : "_currToken = null;",
      "info" : "ExpressionStatement[32448-32466]:ExpressionStatement[32448-32466]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[32479-32491]:ReturnStatement[32479-32491]"
    }, {
      "left" : "_binaryValue = null;",
      "right" : "_binaryValue = null;",
      "info" : "ExpressionStatement[32510-32530]:ExpressionStatement[32510-32530]"
    }, {
      "left" : "if (i == INT_RBRACKET)",
      "right" : "if (i == INT_RBRACKET)",
      "info" : "IfStatement[32540-32847]:IfStatement[32540-32847]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32563-32847]:Block[32563-32847]"
    }, {
      "left" : "_updateLocation();",
      "right" : "_updateLocation();",
      "info" : "ExpressionStatement[32577-32595]:ExpressionStatement[32577-32595]"
    }, {
      "left" : "if (!_parsingContext.inArray())",
      "right" : "if (!_parsingContext.inArray())",
      "info" : "IfStatement[32608-32707]:IfStatement[32608-32707]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32640-32707]:Block[32640-32707]"
    }, {
      "left" : "_reportMismatchedEndMarker(i, '}');",
      "right" : "_reportMismatchedEndMarker(i, '}');",
      "info" : "ExpressionStatement[32658-32693]:ExpressionStatement[32658-32693]"
    }, {
      "left" : "_parsingContext = _parsingContext.getParent();",
      "right" : "_parsingContext = _parsingContext.getParent();",
      "info" : "ExpressionStatement[32720-32766]:ExpressionStatement[32720-32766]"
    }, {
      "left" : "_currToken = JsonToken.END_ARRAY;",
      "right" : "_currToken = JsonToken.END_ARRAY;",
      "info" : "ExpressionStatement[32779-32812]:ExpressionStatement[32779-32812]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[32825-32837]:ReturnStatement[32825-32837]"
    }, {
      "left" : "if (i == INT_RCURLY)",
      "right" : "if (i == INT_RCURLY)",
      "info" : "IfStatement[32856-33163]:IfStatement[32856-33163]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32877-33163]:Block[32877-33163]"
    }, {
      "left" : "_updateLocation();",
      "right" : "_updateLocation();",
      "info" : "ExpressionStatement[32891-32909]:ExpressionStatement[32891-32909]"
    }, {
      "left" : "if (!_parsingContext.inObject())",
      "right" : "if (!_parsingContext.inObject())",
      "info" : "IfStatement[32922-33022]:IfStatement[32922-33022]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32955-33022]:Block[32955-33022]"
    }, {
      "left" : "_reportMismatchedEndMarker(i, ']');",
      "right" : "_reportMismatchedEndMarker(i, ']');",
      "info" : "ExpressionStatement[32973-33008]:ExpressionStatement[32973-33008]"
    }, {
      "left" : "_parsingContext = _parsingContext.getParent();",
      "right" : "_parsingContext = _parsingContext.getParent();",
      "info" : "ExpressionStatement[33035-33081]:ExpressionStatement[33035-33081]"
    }, {
      "left" : "_currToken = JsonToken.END_OBJECT;",
      "right" : "_currToken = JsonToken.END_OBJECT;",
      "info" : "ExpressionStatement[33094-33128]:ExpressionStatement[33094-33128]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[33141-33153]:ReturnStatement[33141-33153]"
    }, {
      "left" : "if (_parsingContext.expectComma())",
      "right" : "if (_parsingContext.expectComma())",
      "info" : "IfStatement[33217-33457]:IfStatement[33217-33457]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33252-33457]:Block[33252-33457]"
    }, {
      "left" : "if (i != INT_COMMA)",
      "right" : "if (i != INT_COMMA)",
      "info" : "IfStatement[33266-33420]:IfStatement[33266-33420]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33286-33420]:Block[33286-33420]"
    }, {
      "left" : "_reportUnexpectedChar(i, \"was expecting comma to separate \"+_parsingContext.getTypeDesc()+\" entries\");",
      "right" : "_reportUnexpectedChar(i, \"was expecting comma to separate \"+_parsingContext.getTypeDesc()+\" entries\");",
      "info" : "ExpressionStatement[33304-33406]:ExpressionStatement[33304-33406]"
    }, {
      "left" : "i = _skipWS();",
      "right" : "i = _skipWS();",
      "info" : "ExpressionStatement[33433-33447]:ExpressionStatement[33433-33447]"
    }, {
      "left" : "if (!_parsingContext.inObject())",
      "right" : "if (!_parsingContext.inObject())",
      "info" : "IfStatement[33466-33604]:IfStatement[33466-33604]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33499-33604]:Block[33499-33604]"
    }, {
      "left" : "_updateLocation();",
      "right" : "_updateLocation();",
      "info" : "ExpressionStatement[33513-33531]:ExpressionStatement[33513-33531]"
    }, {
      "left" : "_nextTokenNotInObject(i);",
      "right" : "_nextTokenNotInObject(i);",
      "info" : "ExpressionStatement[33544-33569]:ExpressionStatement[33544-33569]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[33582-33594]:ReturnStatement[33582-33594]"
    }, {
      "left" : "_updateNameLocation();",
      "right" : "_updateNameLocation();",
      "info" : "ExpressionStatement[33614-33636]:ExpressionStatement[33614-33636]"
    }, {
      "left" : "final String nameStr = _parseName(i);",
      "right" : "final String nameStr = _parseName(i);",
      "info" : "VariableDeclarationStatement[33645-33682]:VariableDeclarationStatement[33645-33682]"
    }, {
      "left" : "_parsingContext.setCurrentName(nameStr);",
      "right" : "_parsingContext.setCurrentName(nameStr);",
      "info" : "ExpressionStatement[33691-33731]:ExpressionStatement[33691-33731]"
    }, {
      "left" : "_currToken = JsonToken.FIELD_NAME;",
      "right" : "_currToken = JsonToken.FIELD_NAME;",
      "info" : "ExpressionStatement[33740-33774]:ExpressionStatement[33740-33774]"
    }, {
      "left" : "i = _skipColon();",
      "right" : "i = _skipColon();",
      "info" : "ExpressionStatement[33784-33801]:ExpressionStatement[33784-33801]"
    }, {
      "left" : "_updateLocation();",
      "right" : "_updateLocation();",
      "info" : "ExpressionStatement[33810-33828]:ExpressionStatement[33810-33828]"
    }, {
      "left" : "if (i == INT_QUOTE)",
      "right" : "if (i == INT_QUOTE)",
      "info" : "IfStatement[33837-33982]:IfStatement[33837-33982]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33857-33982]:Block[33857-33982]"
    }, {
      "left" : "_tokenIncomplete = true;",
      "right" : "_tokenIncomplete = true;",
      "info" : "ExpressionStatement[33871-33895]:ExpressionStatement[33871-33895]"
    }, {
      "left" : "_nextToken = JsonToken.VALUE_STRING;",
      "right" : "_nextToken = JsonToken.VALUE_STRING;",
      "info" : "ExpressionStatement[33908-33944]:ExpressionStatement[33908-33944]"
    }, {
      "left" : "return nameStr;",
      "right" : "return nameStr;",
      "info" : "ReturnStatement[33957-33972]:ReturnStatement[33957-33972]"
    }, {
      "left" : "JsonToken t;",
      "right" : "JsonToken t;",
      "info" : "VariableDeclarationStatement[33991-34003]:VariableDeclarationStatement[33991-34003]"
    }, {
      "left" : "switch (i) {\n        case '-':\n            t = _parseNegNumber();\n            break;\n        case '0':\n        case '1':\n        case '2':\n        case '3':\n        case '4':\n        case '5':\n        case '6':\n        case '7':\n        case '8':\n        case '9':\n            t = _parsePosNumber(i);\n            break;\n        case 'f':\n            _matchToken(\"false\", 1);\n             t = JsonToken.VALUE_FALSE;\n            break;\n        case 'n':\n            _matchToken(\"null\", 1);\n            t = JsonToken.VALUE_NULL;\n            break;\n        case 't':\n            _matchToken(\"true\", 1);\n            t = JsonToken.VALUE_TRUE;\n            break;\n        case '[':\n            t = JsonToken.START_ARRAY;\n            break;\n        case '{':\n            t = JsonToken.START_OBJECT;\n            break;\n\n        default:\n            t = _handleUnexpectedValue(i);\n        }",
      "right" : "switch (i) {\n        case '-':\n            t = _parseNegNumber();\n            break;\n        case '0':\n        case '1':\n        case '2':\n        case '3':\n        case '4':\n        case '5':\n        case '6':\n        case '7':\n        case '8':\n        case '9':\n            t = _parsePosNumber(i);\n            break;\n        case 'f':\n            _matchToken(\"false\", 1);\n             t = JsonToken.VALUE_FALSE;\n            break;\n        case 'n':\n            _matchToken(\"null\", 1);\n            t = JsonToken.VALUE_NULL;\n            break;\n        case 't':\n            _matchToken(\"true\", 1);\n            t = JsonToken.VALUE_TRUE;\n            break;\n        case '[':\n            t = JsonToken.START_ARRAY;\n            break;\n        case '{':\n            t = JsonToken.START_OBJECT;\n            break;\n\n        default:\n            t = _handleUnexpectedValue(i);\n        }",
      "info" : "SwitchStatement[34012-34891]:SwitchStatement[34012-34891]"
    }, {
      "left" : "case '-':",
      "right" : "case '-':",
      "info" : "SwitchCase[34033-34042]:SwitchCase[34033-34042]"
    }, {
      "left" : "t = _parseNegNumber();",
      "right" : "t = _parseNegNumber();",
      "info" : "ExpressionStatement[34055-34077]:ExpressionStatement[34055-34077]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[34090-34096]:BreakStatement[34090-34096]"
    }, {
      "left" : "case '0':",
      "right" : "case '0':",
      "info" : "SwitchCase[34105-34114]:SwitchCase[34105-34114]"
    }, {
      "left" : "case '1':",
      "right" : "case '1':",
      "info" : "SwitchCase[34123-34132]:SwitchCase[34123-34132]"
    }, {
      "left" : "case '2':",
      "right" : "case '2':",
      "info" : "SwitchCase[34141-34150]:SwitchCase[34141-34150]"
    }, {
      "left" : "case '3':",
      "right" : "case '3':",
      "info" : "SwitchCase[34159-34168]:SwitchCase[34159-34168]"
    }, {
      "left" : "case '4':",
      "right" : "case '4':",
      "info" : "SwitchCase[34177-34186]:SwitchCase[34177-34186]"
    }, {
      "left" : "case '5':",
      "right" : "case '5':",
      "info" : "SwitchCase[34195-34204]:SwitchCase[34195-34204]"
    }, {
      "left" : "case '6':",
      "right" : "case '6':",
      "info" : "SwitchCase[34213-34222]:SwitchCase[34213-34222]"
    }, {
      "left" : "case '7':",
      "right" : "case '7':",
      "info" : "SwitchCase[34231-34240]:SwitchCase[34231-34240]"
    }, {
      "left" : "case '8':",
      "right" : "case '8':",
      "info" : "SwitchCase[34249-34258]:SwitchCase[34249-34258]"
    }, {
      "left" : "case '9':",
      "right" : "case '9':",
      "info" : "SwitchCase[34267-34276]:SwitchCase[34267-34276]"
    }, {
      "left" : "t = _parsePosNumber(i);",
      "right" : "t = _parsePosNumber(i);",
      "info" : "ExpressionStatement[34289-34312]:ExpressionStatement[34289-34312]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[34325-34331]:BreakStatement[34325-34331]"
    }, {
      "left" : "case 'f':",
      "right" : "case 'f':",
      "info" : "SwitchCase[34340-34349]:SwitchCase[34340-34349]"
    }, {
      "left" : "_matchToken(\"false\", 1);",
      "right" : "_matchToken(\"false\", 1);",
      "info" : "ExpressionStatement[34362-34386]:ExpressionStatement[34362-34386]"
    }, {
      "left" : "t = JsonToken.VALUE_FALSE;",
      "right" : "t = JsonToken.VALUE_FALSE;",
      "info" : "ExpressionStatement[34400-34426]:ExpressionStatement[34400-34426]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[34439-34445]:BreakStatement[34439-34445]"
    }, {
      "left" : "case 'n':",
      "right" : "case 'n':",
      "info" : "SwitchCase[34454-34463]:SwitchCase[34454-34463]"
    }, {
      "left" : "_matchToken(\"null\", 1);",
      "right" : "_matchToken(\"null\", 1);",
      "info" : "ExpressionStatement[34476-34499]:ExpressionStatement[34476-34499]"
    }, {
      "left" : "t = JsonToken.VALUE_NULL;",
      "right" : "t = JsonToken.VALUE_NULL;",
      "info" : "ExpressionStatement[34512-34537]:ExpressionStatement[34512-34537]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[34550-34556]:BreakStatement[34550-34556]"
    }, {
      "left" : "case 't':",
      "right" : "case 't':",
      "info" : "SwitchCase[34565-34574]:SwitchCase[34565-34574]"
    }, {
      "left" : "_matchToken(\"true\", 1);",
      "right" : "_matchToken(\"true\", 1);",
      "info" : "ExpressionStatement[34587-34610]:ExpressionStatement[34587-34610]"
    }, {
      "left" : "t = JsonToken.VALUE_TRUE;",
      "right" : "t = JsonToken.VALUE_TRUE;",
      "info" : "ExpressionStatement[34623-34648]:ExpressionStatement[34623-34648]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[34661-34667]:BreakStatement[34661-34667]"
    }, {
      "left" : "case '[':",
      "right" : "case '[':",
      "info" : "SwitchCase[34676-34685]:SwitchCase[34676-34685]"
    }, {
      "left" : "t = JsonToken.START_ARRAY;",
      "right" : "t = JsonToken.START_ARRAY;",
      "info" : "ExpressionStatement[34698-34724]:ExpressionStatement[34698-34724]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[34737-34743]:BreakStatement[34737-34743]"
    }, {
      "left" : "case '{':",
      "right" : "case '{':",
      "info" : "SwitchCase[34752-34761]:SwitchCase[34752-34761]"
    }, {
      "left" : "t = JsonToken.START_OBJECT;",
      "right" : "t = JsonToken.START_OBJECT;",
      "info" : "ExpressionStatement[34774-34801]:ExpressionStatement[34774-34801]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[34814-34820]:BreakStatement[34814-34820]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[34830-34838]:SwitchCase[34830-34838]"
    }, {
      "left" : "t = _handleUnexpectedValue(i);",
      "right" : "t = _handleUnexpectedValue(i);",
      "info" : "ExpressionStatement[34851-34881]:ExpressionStatement[34851-34881]"
    }, {
      "left" : "_nextToken = t;",
      "right" : "_nextToken = t;",
      "info" : "ExpressionStatement[34900-34915]:ExpressionStatement[34900-34915]"
    }, {
      "left" : "return nameStr;",
      "right" : "return nameStr;",
      "info" : "ReturnStatement[34924-34939]:ReturnStatement[34924-34939]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[35026-35033]:Modifier[35026-35033]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[35034-35039]:Modifier[35034-35039]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[35040-35043]:PrimitiveType[35040-35043]"
    }, {
      "left" : "_skipColonFast",
      "right" : "_skipColonFast",
      "info" : "SimpleName[35044-35058]:SimpleName[35044-35058]"
    }, {
      "left" : "int ptr",
      "right" : "int ptr",
      "info" : "SingleVariableDeclaration[35059-35066]:SingleVariableDeclaration[35059-35066]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[35075-35086]:SimpleType[35075-35086]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35091-36660]:Block[35091-36660]"
    }, {
      "left" : "int i = _inputBuffer[ptr++];",
      "right" : "int i = _inputBuffer[ptr++];",
      "info" : "VariableDeclarationStatement[35101-35129]:VariableDeclarationStatement[35101-35129]"
    }, {
      "left" : "if (i == INT_COLON)",
      "right" : "if (i == INT_COLON)",
      "info" : "IfStatement[35138-35851]:IfStatement[35138-35851]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35158-35851]:Block[35158-35851]"
    }, {
      "left" : "i = _inputBuffer[ptr++];",
      "right" : "i = _inputBuffer[ptr++];",
      "info" : "ExpressionStatement[35205-35229]:ExpressionStatement[35205-35229]"
    }, {
      "left" : "if (i > INT_SPACE)",
      "right" : "if (i > INT_SPACE)",
      "info" : "IfStatement[35242-35747]:IfStatement[35242-35747]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35261-35432]:Block[35261-35432]"
    }, {
      "left" : "if (i != INT_SLASH && i != INT_HASH)",
      "right" : "if (i != INT_SLASH && i != INT_HASH)",
      "info" : "IfStatement[35295-35418]:IfStatement[35295-35418]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35332-35418]:Block[35332-35418]"
    }, {
      "left" : "_inputPtr = ptr;",
      "right" : "_inputPtr = ptr;",
      "info" : "ExpressionStatement[35354-35370]:ExpressionStatement[35354-35370]"
    }, {
      "left" : "return i;",
      "right" : "return i;",
      "info" : "ReturnStatement[35391-35400]:ReturnStatement[35391-35400]"
    }, {
      "left" : "if (i == INT_SPACE || i == INT_TAB)",
      "right" : "if (i == INT_SPACE || i == INT_TAB)",
      "info" : "IfStatement[35438-35747]:IfStatement[35438-35747]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35474-35747]:Block[35474-35747]"
    }, {
      "left" : "i = (int) _inputBuffer[ptr++];",
      "right" : "i = (int) _inputBuffer[ptr++];",
      "info" : "ExpressionStatement[35492-35522]:ExpressionStatement[35492-35522]"
    }, {
      "left" : "if (i > INT_SPACE)",
      "right" : "if (i > INT_SPACE)",
      "info" : "IfStatement[35539-35733]:IfStatement[35539-35733]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35558-35733]:Block[35558-35733]"
    }, {
      "left" : "if (i != INT_SLASH && i != INT_HASH)",
      "right" : "if (i != INT_SLASH && i != INT_HASH)",
      "info" : "IfStatement[35580-35715]:IfStatement[35580-35715]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35617-35715]:Block[35617-35715]"
    }, {
      "left" : "_inputPtr = ptr;",
      "right" : "_inputPtr = ptr;",
      "info" : "ExpressionStatement[35643-35659]:ExpressionStatement[35643-35659]"
    }, {
      "left" : "return i;",
      "right" : "return i;",
      "info" : "ReturnStatement[35684-35693]:ReturnStatement[35684-35693]"
    }, {
      "left" : "_inputPtr = ptr-1;",
      "right" : "_inputPtr = ptr-1;",
      "info" : "ExpressionStatement[35760-35778]:ExpressionStatement[35760-35778]"
    }, {
      "left" : "return _skipColon2(true);",
      "right" : "return _skipColon2(true);",
      "info" : "ReturnStatement[35791-35816]:ReturnStatement[35791-35816]"
    }, {
      "left" : "if (i == INT_SPACE || i == INT_TAB)",
      "right" : "if (i == INT_SPACE || i == INT_TAB)",
      "info" : "IfStatement[35860-35944]:IfStatement[35860-35944]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35896-35944]:Block[35896-35944]"
    }, {
      "left" : "i = _inputBuffer[ptr++];",
      "right" : "i = _inputBuffer[ptr++];",
      "info" : "ExpressionStatement[35910-35934]:ExpressionStatement[35910-35934]"
    }, {
      "left" : "if (i == INT_COLON)",
      "right" : "if (i == INT_COLON)",
      "info" : "IfStatement[35953-36592]:IfStatement[35953-36592]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35973-36592]:Block[35973-36592]"
    }, {
      "left" : "i = _inputBuffer[ptr++];",
      "right" : "i = _inputBuffer[ptr++];",
      "info" : "ExpressionStatement[35987-36011]:ExpressionStatement[35987-36011]"
    }, {
      "left" : "if (i > INT_SPACE)",
      "right" : "if (i > INT_SPACE)",
      "info" : "IfStatement[36024-36513]:IfStatement[36024-36513]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36043-36198]:Block[36043-36198]"
    }, {
      "left" : "if (i != INT_SLASH && i != INT_HASH)",
      "right" : "if (i != INT_SLASH && i != INT_HASH)",
      "info" : "IfStatement[36061-36184]:IfStatement[36061-36184]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36098-36184]:Block[36098-36184]"
    }, {
      "left" : "_inputPtr = ptr;",
      "right" : "_inputPtr = ptr;",
      "info" : "ExpressionStatement[36120-36136]:ExpressionStatement[36120-36136]"
    }, {
      "left" : "return i;",
      "right" : "return i;",
      "info" : "ReturnStatement[36157-36166]:ReturnStatement[36157-36166]"
    }, {
      "left" : "if (i == INT_SPACE || i == INT_TAB)",
      "right" : "if (i == INT_SPACE || i == INT_TAB)",
      "info" : "IfStatement[36204-36513]:IfStatement[36204-36513]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36240-36513]:Block[36240-36513]"
    }, {
      "left" : "i = (int) _inputBuffer[ptr++];",
      "right" : "i = (int) _inputBuffer[ptr++];",
      "info" : "ExpressionStatement[36258-36288]:ExpressionStatement[36258-36288]"
    }, {
      "left" : "if (i > INT_SPACE)",
      "right" : "if (i > INT_SPACE)",
      "info" : "IfStatement[36305-36499]:IfStatement[36305-36499]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36324-36499]:Block[36324-36499]"
    }, {
      "left" : "if (i != INT_SLASH && i != INT_HASH)",
      "right" : "if (i != INT_SLASH && i != INT_HASH)",
      "info" : "IfStatement[36346-36481]:IfStatement[36346-36481]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36383-36481]:Block[36383-36481]"
    }, {
      "left" : "_inputPtr = ptr;",
      "right" : "_inputPtr = ptr;",
      "info" : "ExpressionStatement[36409-36425]:ExpressionStatement[36409-36425]"
    }, {
      "left" : "return i;",
      "right" : "return i;",
      "info" : "ReturnStatement[36450-36459]:ReturnStatement[36450-36459]"
    }, {
      "left" : "_inputPtr = ptr-1;",
      "right" : "_inputPtr = ptr-1;",
      "info" : "ExpressionStatement[36526-36544]:ExpressionStatement[36526-36544]"
    }, {
      "left" : "return _skipColon2(true);",
      "right" : "return _skipColon2(true);",
      "info" : "ReturnStatement[36557-36582]:ReturnStatement[36557-36582]"
    }, {
      "left" : "_inputPtr = ptr-1;",
      "right" : "_inputPtr = ptr-1;",
      "info" : "ExpressionStatement[36601-36619]:ExpressionStatement[36601-36619]"
    }, {
      "left" : "return _skipColon2(false);",
      "right" : "return _skipColon2(false);",
      "info" : "ReturnStatement[36628-36654]:ReturnStatement[36628-36654]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[36670-36677]:Modifier[36670-36677]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[36678-36683]:Modifier[36678-36683]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[36684-36688]:PrimitiveType[36684-36688]"
    }, {
      "left" : "_isNextTokenNameYes",
      "right" : "_isNextTokenNameYes",
      "info" : "SimpleName[36689-36708]:SimpleName[36689-36708]"
    }, {
      "left" : "int i",
      "right" : "int i",
      "info" : "SingleVariableDeclaration[36709-36714]:SingleVariableDeclaration[36709-36714]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[36723-36734]:SimpleType[36723-36734]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36739-37885]:Block[36739-37885]"
    }, {
      "left" : "_currToken = JsonToken.FIELD_NAME;",
      "right" : "_currToken = JsonToken.FIELD_NAME;",
      "info" : "ExpressionStatement[36749-36783]:ExpressionStatement[36749-36783]"
    }, {
      "left" : "_updateLocation();",
      "right" : "_updateLocation();",
      "info" : "ExpressionStatement[36792-36810]:ExpressionStatement[36792-36810]"
    }, {
      "left" : "switch (i) {\n        case '\"':\n            _tokenIncomplete = true;\n            _nextToken = JsonToken.VALUE_STRING;\n            return;\n        case '[':\n            _nextToken = JsonToken.START_ARRAY;\n            return;\n        case '{':\n            _nextToken = JsonToken.START_OBJECT;\n            return;\n        case 't':\n            _matchToken(\"true\", 1);\n            _nextToken = JsonToken.VALUE_TRUE;\n            return;\n        case 'f':\n            _matchToken(\"false\", 1);\n            _nextToken = JsonToken.VALUE_FALSE;\n            return;\n        case 'n':\n            _matchToken(\"null\", 1);\n            _nextToken = JsonToken.VALUE_NULL;\n            return;\n        case '-':\n            _nextToken = _parseNegNumber();\n            return;\n        case '0':\n        case '1':\n        case '2':\n        case '3':\n        case '4':\n        case '5':\n        case '6':\n        case '7':\n        case '8':\n        case '9':\n            _nextToken = _parsePosNumber(i);\n            return;\n        }",
      "right" : "switch (i) {\n        case '\"':\n            _tokenIncomplete = true;\n            _nextToken = JsonToken.VALUE_STRING;\n            return;\n        case '[':\n            _nextToken = JsonToken.START_ARRAY;\n            return;\n        case '{':\n            _nextToken = JsonToken.START_OBJECT;\n            return;\n        case 't':\n            _matchToken(\"true\", 1);\n            _nextToken = JsonToken.VALUE_TRUE;\n            return;\n        case 'f':\n            _matchToken(\"false\", 1);\n            _nextToken = JsonToken.VALUE_FALSE;\n            return;\n        case 'n':\n            _matchToken(\"null\", 1);\n            _nextToken = JsonToken.VALUE_NULL;\n            return;\n        case '-':\n            _nextToken = _parseNegNumber();\n            return;\n        case '0':\n        case '1':\n        case '2':\n        case '3':\n        case '4':\n        case '5':\n        case '6':\n        case '7':\n        case '8':\n        case '9':\n            _nextToken = _parsePosNumber(i);\n            return;\n        }",
      "info" : "SwitchStatement[36820-37831]:SwitchStatement[36820-37831]"
    }, {
      "left" : "case '\"':",
      "right" : "case '\"':",
      "info" : "SwitchCase[36841-36850]:SwitchCase[36841-36850]"
    }, {
      "left" : "_tokenIncomplete = true;",
      "right" : "_tokenIncomplete = true;",
      "info" : "ExpressionStatement[36863-36887]:ExpressionStatement[36863-36887]"
    }, {
      "left" : "_nextToken = JsonToken.VALUE_STRING;",
      "right" : "_nextToken = JsonToken.VALUE_STRING;",
      "info" : "ExpressionStatement[36900-36936]:ExpressionStatement[36900-36936]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[36949-36956]:ReturnStatement[36949-36956]"
    }, {
      "left" : "case '[':",
      "right" : "case '[':",
      "info" : "SwitchCase[36965-36974]:SwitchCase[36965-36974]"
    }, {
      "left" : "_nextToken = JsonToken.START_ARRAY;",
      "right" : "_nextToken = JsonToken.START_ARRAY;",
      "info" : "ExpressionStatement[36987-37022]:ExpressionStatement[36987-37022]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[37035-37042]:ReturnStatement[37035-37042]"
    }, {
      "left" : "case '{':",
      "right" : "case '{':",
      "info" : "SwitchCase[37051-37060]:SwitchCase[37051-37060]"
    }, {
      "left" : "_nextToken = JsonToken.START_OBJECT;",
      "right" : "_nextToken = JsonToken.START_OBJECT;",
      "info" : "ExpressionStatement[37073-37109]:ExpressionStatement[37073-37109]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[37122-37129]:ReturnStatement[37122-37129]"
    }, {
      "left" : "case 't':",
      "right" : "case 't':",
      "info" : "SwitchCase[37138-37147]:SwitchCase[37138-37147]"
    }, {
      "left" : "_matchToken(\"true\", 1);",
      "right" : "_matchToken(\"true\", 1);",
      "info" : "ExpressionStatement[37160-37183]:ExpressionStatement[37160-37183]"
    }, {
      "left" : "_nextToken = JsonToken.VALUE_TRUE;",
      "right" : "_nextToken = JsonToken.VALUE_TRUE;",
      "info" : "ExpressionStatement[37196-37230]:ExpressionStatement[37196-37230]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[37243-37250]:ReturnStatement[37243-37250]"
    }, {
      "left" : "case 'f':",
      "right" : "case 'f':",
      "info" : "SwitchCase[37259-37268]:SwitchCase[37259-37268]"
    }, {
      "left" : "_matchToken(\"false\", 1);",
      "right" : "_matchToken(\"false\", 1);",
      "info" : "ExpressionStatement[37281-37305]:ExpressionStatement[37281-37305]"
    }, {
      "left" : "_nextToken = JsonToken.VALUE_FALSE;",
      "right" : "_nextToken = JsonToken.VALUE_FALSE;",
      "info" : "ExpressionStatement[37318-37353]:ExpressionStatement[37318-37353]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[37366-37373]:ReturnStatement[37366-37373]"
    }, {
      "left" : "case 'n':",
      "right" : "case 'n':",
      "info" : "SwitchCase[37382-37391]:SwitchCase[37382-37391]"
    }, {
      "left" : "_matchToken(\"null\", 1);",
      "right" : "_matchToken(\"null\", 1);",
      "info" : "ExpressionStatement[37404-37427]:ExpressionStatement[37404-37427]"
    }, {
      "left" : "_nextToken = JsonToken.VALUE_NULL;",
      "right" : "_nextToken = JsonToken.VALUE_NULL;",
      "info" : "ExpressionStatement[37440-37474]:ExpressionStatement[37440-37474]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[37487-37494]:ReturnStatement[37487-37494]"
    }, {
      "left" : "case '-':",
      "right" : "case '-':",
      "info" : "SwitchCase[37503-37512]:SwitchCase[37503-37512]"
    }, {
      "left" : "_nextToken = _parseNegNumber();",
      "right" : "_nextToken = _parseNegNumber();",
      "info" : "ExpressionStatement[37525-37556]:ExpressionStatement[37525-37556]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[37569-37576]:ReturnStatement[37569-37576]"
    }, {
      "left" : "case '0':",
      "right" : "case '0':",
      "info" : "SwitchCase[37585-37594]:SwitchCase[37585-37594]"
    }, {
      "left" : "case '1':",
      "right" : "case '1':",
      "info" : "SwitchCase[37603-37612]:SwitchCase[37603-37612]"
    }, {
      "left" : "case '2':",
      "right" : "case '2':",
      "info" : "SwitchCase[37621-37630]:SwitchCase[37621-37630]"
    }, {
      "left" : "case '3':",
      "right" : "case '3':",
      "info" : "SwitchCase[37639-37648]:SwitchCase[37639-37648]"
    }, {
      "left" : "case '4':",
      "right" : "case '4':",
      "info" : "SwitchCase[37657-37666]:SwitchCase[37657-37666]"
    }, {
      "left" : "case '5':",
      "right" : "case '5':",
      "info" : "SwitchCase[37675-37684]:SwitchCase[37675-37684]"
    }, {
      "left" : "case '6':",
      "right" : "case '6':",
      "info" : "SwitchCase[37693-37702]:SwitchCase[37693-37702]"
    }, {
      "left" : "case '7':",
      "right" : "case '7':",
      "info" : "SwitchCase[37711-37720]:SwitchCase[37711-37720]"
    }, {
      "left" : "case '8':",
      "right" : "case '8':",
      "info" : "SwitchCase[37729-37738]:SwitchCase[37729-37738]"
    }, {
      "left" : "case '9':",
      "right" : "case '9':",
      "info" : "SwitchCase[37747-37756]:SwitchCase[37747-37756]"
    }, {
      "left" : "_nextToken = _parsePosNumber(i);",
      "right" : "_nextToken = _parsePosNumber(i);",
      "info" : "ExpressionStatement[37769-37801]:ExpressionStatement[37769-37801]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[37814-37821]:ReturnStatement[37814-37821]"
    }, {
      "left" : "_nextToken = _handleUnexpectedValue(i);",
      "right" : "_nextToken = _handleUnexpectedValue(i);",
      "info" : "ExpressionStatement[37840-37879]:ExpressionStatement[37840-37879]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[37891-37898]:Modifier[37891-37898]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[37899-37904]:Modifier[37899-37904]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[37905-37912]:PrimitiveType[37905-37912]"
    }, {
      "left" : "_isNextTokenNameMaybe",
      "right" : "_isNextTokenNameMaybe",
      "info" : "SimpleName[37913-37934]:SimpleName[37913-37934]"
    }, {
      "left" : "int i",
      "right" : "int i",
      "info" : "SingleVariableDeclaration[37935-37940]:SingleVariableDeclaration[37935-37940]"
    }, {
      "left" : "SerializableString str",
      "right" : "SerializableString str",
      "info" : "SingleVariableDeclaration[37942-37964]:SingleVariableDeclaration[37942-37964]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[37973-37984]:SimpleType[37973-37984]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37989-39481]:Block[37989-39481]"
    }, {
      "left" : "String n = _parseName(i);",
      "right" : "String n = _parseName(i);",
      "info" : "VariableDeclarationStatement[38058-38083]:VariableDeclarationStatement[38058-38083]"
    }, {
      "left" : "_parsingContext.setCurrentName(n);",
      "right" : "_parsingContext.setCurrentName(n);",
      "info" : "ExpressionStatement[38092-38126]:ExpressionStatement[38092-38126]"
    }, {
      "left" : "final boolean match = n.equals(str.getValue());",
      "right" : "final boolean match = n.equals(str.getValue());",
      "info" : "VariableDeclarationStatement[38135-38182]:VariableDeclarationStatement[38135-38182]"
    }, {
      "left" : "_currToken = JsonToken.FIELD_NAME;",
      "right" : "_currToken = JsonToken.FIELD_NAME;",
      "info" : "ExpressionStatement[38191-38225]:ExpressionStatement[38191-38225]"
    }, {
      "left" : "i = _skipColon();",
      "right" : "i = _skipColon();",
      "info" : "ExpressionStatement[38234-38251]:ExpressionStatement[38234-38251]"
    }, {
      "left" : "_updateLocation();",
      "right" : "_updateLocation();",
      "info" : "ExpressionStatement[38260-38278]:ExpressionStatement[38260-38278]"
    }, {
      "left" : "if (i == INT_QUOTE)",
      "right" : "if (i == INT_QUOTE)",
      "info" : "IfStatement[38377-38520]:IfStatement[38377-38520]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38397-38520]:Block[38397-38520]"
    }, {
      "left" : "_tokenIncomplete = true;",
      "right" : "_tokenIncomplete = true;",
      "info" : "ExpressionStatement[38411-38435]:ExpressionStatement[38411-38435]"
    }, {
      "left" : "_nextToken = JsonToken.VALUE_STRING;",
      "right" : "_nextToken = JsonToken.VALUE_STRING;",
      "info" : "ExpressionStatement[38448-38484]:ExpressionStatement[38448-38484]"
    }, {
      "left" : "return match;",
      "right" : "return match;",
      "info" : "ReturnStatement[38497-38510]:ReturnStatement[38497-38510]"
    }, {
      "left" : "JsonToken t;",
      "right" : "JsonToken t;",
      "info" : "VariableDeclarationStatement[38529-38541]:VariableDeclarationStatement[38529-38541]"
    }, {
      "left" : "switch (i) {\n        case '[':\n            t = JsonToken.START_ARRAY;\n            break;\n        case '{':\n            t = JsonToken.START_OBJECT;\n            break;\n        case 't':\n            _matchToken(\"true\", 1);\n            t = JsonToken.VALUE_TRUE;\n            break;\n        case 'f':\n            _matchToken(\"false\", 1);\n             t = JsonToken.VALUE_FALSE;\n            break;\n        case 'n':\n            _matchToken(\"null\", 1);\n            t = JsonToken.VALUE_NULL;\n            break;\n        case '-':\n            t = _parseNegNumber();\n            break;\n        case '0':\n        case '1':\n        case '2':\n        case '3':\n        case '4':\n        case '5':\n        case '6':\n        case '7':\n        case '8':\n        case '9':\n            t = _parsePosNumber(i);\n            break;\n        default:\n            t = _handleUnexpectedValue(i);\n        }",
      "right" : "switch (i) {\n        case '[':\n            t = JsonToken.START_ARRAY;\n            break;\n        case '{':\n            t = JsonToken.START_OBJECT;\n            break;\n        case 't':\n            _matchToken(\"true\", 1);\n            t = JsonToken.VALUE_TRUE;\n            break;\n        case 'f':\n            _matchToken(\"false\", 1);\n             t = JsonToken.VALUE_FALSE;\n            break;\n        case 'n':\n            _matchToken(\"null\", 1);\n            t = JsonToken.VALUE_NULL;\n            break;\n        case '-':\n            t = _parseNegNumber();\n            break;\n        case '0':\n        case '1':\n        case '2':\n        case '3':\n        case '4':\n        case '5':\n        case '6':\n        case '7':\n        case '8':\n        case '9':\n            t = _parsePosNumber(i);\n            break;\n        default:\n            t = _handleUnexpectedValue(i);\n        }",
      "info" : "SwitchStatement[38551-39429]:SwitchStatement[38551-39429]"
    }, {
      "left" : "case '[':",
      "right" : "case '[':",
      "info" : "SwitchCase[38572-38581]:SwitchCase[38572-38581]"
    }, {
      "left" : "t = JsonToken.START_ARRAY;",
      "right" : "t = JsonToken.START_ARRAY;",
      "info" : "ExpressionStatement[38594-38620]:ExpressionStatement[38594-38620]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[38633-38639]:BreakStatement[38633-38639]"
    }, {
      "left" : "case '{':",
      "right" : "case '{':",
      "info" : "SwitchCase[38648-38657]:SwitchCase[38648-38657]"
    }, {
      "left" : "t = JsonToken.START_OBJECT;",
      "right" : "t = JsonToken.START_OBJECT;",
      "info" : "ExpressionStatement[38670-38697]:ExpressionStatement[38670-38697]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[38710-38716]:BreakStatement[38710-38716]"
    }, {
      "left" : "case 't':",
      "right" : "case 't':",
      "info" : "SwitchCase[38725-38734]:SwitchCase[38725-38734]"
    }, {
      "left" : "_matchToken(\"true\", 1);",
      "right" : "_matchToken(\"true\", 1);",
      "info" : "ExpressionStatement[38747-38770]:ExpressionStatement[38747-38770]"
    }, {
      "left" : "t = JsonToken.VALUE_TRUE;",
      "right" : "t = JsonToken.VALUE_TRUE;",
      "info" : "ExpressionStatement[38783-38808]:ExpressionStatement[38783-38808]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[38821-38827]:BreakStatement[38821-38827]"
    }, {
      "left" : "case 'f':",
      "right" : "case 'f':",
      "info" : "SwitchCase[38836-38845]:SwitchCase[38836-38845]"
    }, {
      "left" : "_matchToken(\"false\", 1);",
      "right" : "_matchToken(\"false\", 1);",
      "info" : "ExpressionStatement[38858-38882]:ExpressionStatement[38858-38882]"
    }, {
      "left" : "t = JsonToken.VALUE_FALSE;",
      "right" : "t = JsonToken.VALUE_FALSE;",
      "info" : "ExpressionStatement[38896-38922]:ExpressionStatement[38896-38922]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[38935-38941]:BreakStatement[38935-38941]"
    }, {
      "left" : "case 'n':",
      "right" : "case 'n':",
      "info" : "SwitchCase[38950-38959]:SwitchCase[38950-38959]"
    }, {
      "left" : "_matchToken(\"null\", 1);",
      "right" : "_matchToken(\"null\", 1);",
      "info" : "ExpressionStatement[38972-38995]:ExpressionStatement[38972-38995]"
    }, {
      "left" : "t = JsonToken.VALUE_NULL;",
      "right" : "t = JsonToken.VALUE_NULL;",
      "info" : "ExpressionStatement[39008-39033]:ExpressionStatement[39008-39033]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[39046-39052]:BreakStatement[39046-39052]"
    }, {
      "left" : "case '-':",
      "right" : "case '-':",
      "info" : "SwitchCase[39061-39070]:SwitchCase[39061-39070]"
    }, {
      "left" : "t = _parseNegNumber();",
      "right" : "t = _parseNegNumber();",
      "info" : "ExpressionStatement[39083-39105]:ExpressionStatement[39083-39105]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[39118-39124]:BreakStatement[39118-39124]"
    }, {
      "left" : "case '0':",
      "right" : "case '0':",
      "info" : "SwitchCase[39133-39142]:SwitchCase[39133-39142]"
    }, {
      "left" : "case '1':",
      "right" : "case '1':",
      "info" : "SwitchCase[39151-39160]:SwitchCase[39151-39160]"
    }, {
      "left" : "case '2':",
      "right" : "case '2':",
      "info" : "SwitchCase[39169-39178]:SwitchCase[39169-39178]"
    }, {
      "left" : "case '3':",
      "right" : "case '3':",
      "info" : "SwitchCase[39187-39196]:SwitchCase[39187-39196]"
    }, {
      "left" : "case '4':",
      "right" : "case '4':",
      "info" : "SwitchCase[39205-39214]:SwitchCase[39205-39214]"
    }, {
      "left" : "case '5':",
      "right" : "case '5':",
      "info" : "SwitchCase[39223-39232]:SwitchCase[39223-39232]"
    }, {
      "left" : "case '6':",
      "right" : "case '6':",
      "info" : "SwitchCase[39241-39250]:SwitchCase[39241-39250]"
    }, {
      "left" : "case '7':",
      "right" : "case '7':",
      "info" : "SwitchCase[39259-39268]:SwitchCase[39259-39268]"
    }, {
      "left" : "case '8':",
      "right" : "case '8':",
      "info" : "SwitchCase[39277-39286]:SwitchCase[39277-39286]"
    }, {
      "left" : "case '9':",
      "right" : "case '9':",
      "info" : "SwitchCase[39295-39304]:SwitchCase[39295-39304]"
    }, {
      "left" : "t = _parsePosNumber(i);",
      "right" : "t = _parsePosNumber(i);",
      "info" : "ExpressionStatement[39317-39340]:ExpressionStatement[39317-39340]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[39353-39359]:BreakStatement[39353-39359]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[39368-39376]:SwitchCase[39368-39376]"
    }, {
      "left" : "t = _handleUnexpectedValue(i);",
      "right" : "t = _handleUnexpectedValue(i);",
      "info" : "ExpressionStatement[39389-39419]:ExpressionStatement[39389-39419]"
    }, {
      "left" : "_nextToken = t;",
      "right" : "_nextToken = t;",
      "info" : "ExpressionStatement[39438-39453]:ExpressionStatement[39438-39453]"
    }, {
      "left" : "return match;",
      "right" : "return match;",
      "info" : "ReturnStatement[39462-39475]:ReturnStatement[39462-39475]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[39487-39496]:MarkerAnnotation[39487-39496]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[39501-39507]:Modifier[39501-39507]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[39508-39514]:SimpleType[39508-39514]"
    }, {
      "left" : "nextTextValue",
      "right" : "nextTextValue",
      "info" : "SimpleName[39515-39528]:SimpleName[39515-39528]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[39538-39549]:SimpleType[39538-39549]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39554-40621]:Block[39554-40621]"
    }, {
      "left" : "if (_currToken == JsonToken.FIELD_NAME)",
      "right" : "if (_currToken == JsonToken.FIELD_NAME)",
      "info" : "IfStatement[39645-40492]:IfStatement[39645-40492]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39685-40492]:Block[39685-40492]"
    }, {
      "left" : "_nameCopied = false;",
      "right" : "_nameCopied = false;",
      "info" : "ExpressionStatement[39738-39758]:ExpressionStatement[39738-39758]"
    }, {
      "left" : "JsonToken t = _nextToken;",
      "right" : "JsonToken t = _nextToken;",
      "info" : "VariableDeclarationStatement[39771-39796]:VariableDeclarationStatement[39771-39796]"
    }, {
      "left" : "_nextToken = null;",
      "right" : "_nextToken = null;",
      "info" : "ExpressionStatement[39809-39827]:ExpressionStatement[39809-39827]"
    }, {
      "left" : "_currToken = t;",
      "right" : "_currToken = t;",
      "info" : "ExpressionStatement[39840-39855]:ExpressionStatement[39840-39855]"
    }, {
      "left" : "if (t == JsonToken.VALUE_STRING)",
      "right" : "if (t == JsonToken.VALUE_STRING)",
      "info" : "IfStatement[39868-40128]:IfStatement[39868-40128]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39901-40128]:Block[39901-40128]"
    }, {
      "left" : "if (_tokenIncomplete)",
      "right" : "if (_tokenIncomplete)",
      "info" : "IfStatement[39919-40059]:IfStatement[39919-40059]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39941-40059]:Block[39941-40059]"
    }, {
      "left" : "_tokenIncomplete = false;",
      "right" : "_tokenIncomplete = false;",
      "info" : "ExpressionStatement[39963-39988]:ExpressionStatement[39963-39988]"
    }, {
      "left" : "return _finishAndReturnString();",
      "right" : "return _finishAndReturnString();",
      "info" : "ReturnStatement[40009-40041]:ReturnStatement[40009-40041]"
    }, {
      "left" : "return _textBuffer.contentsAsString();",
      "right" : "return _textBuffer.contentsAsString();",
      "info" : "ReturnStatement[40076-40114]:ReturnStatement[40076-40114]"
    }, {
      "left" : "if (t == JsonToken.START_ARRAY)",
      "right" : "if (t == JsonToken.START_ARRAY)",
      "info" : "IfStatement[40141-40457]:IfStatement[40141-40457]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40173-40295]:Block[40173-40295]"
    }, {
      "left" : "_parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);",
      "right" : "_parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);",
      "info" : "ExpressionStatement[40191-40281]:ExpressionStatement[40191-40281]"
    }, {
      "left" : "if (t == JsonToken.START_OBJECT)",
      "right" : "if (t == JsonToken.START_OBJECT)",
      "info" : "IfStatement[40301-40457]:IfStatement[40301-40457]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40334-40457]:Block[40334-40457]"
    }, {
      "left" : "_parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);",
      "right" : "_parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);",
      "info" : "ExpressionStatement[40352-40443]:ExpressionStatement[40352-40443]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[40470-40482]:ReturnStatement[40470-40482]"
    }, {
      "left" : "return (nextToken() == JsonToken.VALUE_STRING) ? getText() : null;",
      "right" : "return (nextToken() == JsonToken.VALUE_STRING) ? getText() : null;",
      "info" : "ReturnStatement[40549-40615]:ReturnStatement[40549-40615]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[40627-40636]:MarkerAnnotation[40627-40636]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[40641-40647]:Modifier[40641-40647]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[40648-40651]:PrimitiveType[40648-40651]"
    }, {
      "left" : "nextIntValue",
      "right" : "nextIntValue",
      "info" : "SimpleName[40652-40664]:SimpleName[40652-40664]"
    }, {
      "left" : "int defaultValue",
      "right" : "int defaultValue",
      "info" : "SingleVariableDeclaration[40665-40681]:SingleVariableDeclaration[40665-40681]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[40690-40701]:SimpleType[40690-40701]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40706-41627]:Block[40706-41627]"
    }, {
      "left" : "if (_currToken == JsonToken.FIELD_NAME)",
      "right" : "if (_currToken == JsonToken.FIELD_NAME)",
      "info" : "IfStatement[40797-41482]:IfStatement[40797-41482]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40837-41482]:Block[40837-41482]"
    }, {
      "left" : "_nameCopied = false;",
      "right" : "_nameCopied = false;",
      "info" : "ExpressionStatement[40890-40910]:ExpressionStatement[40890-40910]"
    }, {
      "left" : "JsonToken t = _nextToken;",
      "right" : "JsonToken t = _nextToken;",
      "info" : "VariableDeclarationStatement[40923-40948]:VariableDeclarationStatement[40923-40948]"
    }, {
      "left" : "_nextToken = null;",
      "right" : "_nextToken = null;",
      "info" : "ExpressionStatement[40961-40979]:ExpressionStatement[40961-40979]"
    }, {
      "left" : "_currToken = t;",
      "right" : "_currToken = t;",
      "info" : "ExpressionStatement[40992-41007]:ExpressionStatement[40992-41007]"
    }, {
      "left" : "if (t == JsonToken.VALUE_NUMBER_INT)",
      "right" : "if (t == JsonToken.VALUE_NUMBER_INT)",
      "info" : "IfStatement[41020-41110]:IfStatement[41020-41110]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41057-41110]:Block[41057-41110]"
    }, {
      "left" : "return getIntValue();",
      "right" : "return getIntValue();",
      "info" : "ReturnStatement[41075-41096]:ReturnStatement[41075-41096]"
    }, {
      "left" : "if (t == JsonToken.START_ARRAY)",
      "right" : "if (t == JsonToken.START_ARRAY)",
      "info" : "IfStatement[41123-41439]:IfStatement[41123-41439]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41155-41277]:Block[41155-41277]"
    }, {
      "left" : "_parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);",
      "right" : "_parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);",
      "info" : "ExpressionStatement[41173-41263]:ExpressionStatement[41173-41263]"
    }, {
      "left" : "if (t == JsonToken.START_OBJECT)",
      "right" : "if (t == JsonToken.START_OBJECT)",
      "info" : "IfStatement[41283-41439]:IfStatement[41283-41439]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41316-41439]:Block[41316-41439]"
    }, {
      "left" : "_parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);",
      "right" : "_parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);",
      "info" : "ExpressionStatement[41334-41425]:ExpressionStatement[41334-41425]"
    }, {
      "left" : "return defaultValue;",
      "right" : "return defaultValue;",
      "info" : "ReturnStatement[41452-41472]:ReturnStatement[41452-41472]"
    }, {
      "left" : "return (nextToken() == JsonToken.VALUE_NUMBER_INT) ? getIntValue() : defaultValue;",
      "right" : "return (nextToken() == JsonToken.VALUE_NUMBER_INT) ? getIntValue() : defaultValue;",
      "info" : "ReturnStatement[41539-41621]:ReturnStatement[41539-41621]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[41633-41642]:MarkerAnnotation[41633-41642]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[41647-41653]:Modifier[41647-41653]"
    }, {
      "left" : "long",
      "right" : "long",
      "info" : "PrimitiveType[41654-41658]:PrimitiveType[41654-41658]"
    }, {
      "left" : "nextLongValue",
      "right" : "nextLongValue",
      "info" : "SimpleName[41659-41672]:SimpleName[41659-41672]"
    }, {
      "left" : "long defaultValue",
      "right" : "long defaultValue",
      "info" : "SingleVariableDeclaration[41673-41690]:SingleVariableDeclaration[41673-41690]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[41699-41710]:SimpleType[41699-41710]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41715-42638]:Block[41715-42638]"
    }, {
      "left" : "if (_currToken == JsonToken.FIELD_NAME)",
      "right" : "if (_currToken == JsonToken.FIELD_NAME)",
      "info" : "IfStatement[41806-42492]:IfStatement[41806-42492]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41846-42492]:Block[41846-42492]"
    }, {
      "left" : "_nameCopied = false;",
      "right" : "_nameCopied = false;",
      "info" : "ExpressionStatement[41899-41919]:ExpressionStatement[41899-41919]"
    }, {
      "left" : "JsonToken t = _nextToken;",
      "right" : "JsonToken t = _nextToken;",
      "info" : "VariableDeclarationStatement[41932-41957]:VariableDeclarationStatement[41932-41957]"
    }, {
      "left" : "_nextToken = null;",
      "right" : "_nextToken = null;",
      "info" : "ExpressionStatement[41970-41988]:ExpressionStatement[41970-41988]"
    }, {
      "left" : "_currToken = t;",
      "right" : "_currToken = t;",
      "info" : "ExpressionStatement[42001-42016]:ExpressionStatement[42001-42016]"
    }, {
      "left" : "if (t == JsonToken.VALUE_NUMBER_INT)",
      "right" : "if (t == JsonToken.VALUE_NUMBER_INT)",
      "info" : "IfStatement[42029-42120]:IfStatement[42029-42120]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42066-42120]:Block[42066-42120]"
    }, {
      "left" : "return getLongValue();",
      "right" : "return getLongValue();",
      "info" : "ReturnStatement[42084-42106]:ReturnStatement[42084-42106]"
    }, {
      "left" : "if (t == JsonToken.START_ARRAY)",
      "right" : "if (t == JsonToken.START_ARRAY)",
      "info" : "IfStatement[42133-42449]:IfStatement[42133-42449]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42165-42287]:Block[42165-42287]"
    }, {
      "left" : "_parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);",
      "right" : "_parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);",
      "info" : "ExpressionStatement[42183-42273]:ExpressionStatement[42183-42273]"
    }, {
      "left" : "if (t == JsonToken.START_OBJECT)",
      "right" : "if (t == JsonToken.START_OBJECT)",
      "info" : "IfStatement[42293-42449]:IfStatement[42293-42449]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42326-42449]:Block[42326-42449]"
    }, {
      "left" : "_parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);",
      "right" : "_parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);",
      "info" : "ExpressionStatement[42344-42435]:ExpressionStatement[42344-42435]"
    }, {
      "left" : "return defaultValue;",
      "right" : "return defaultValue;",
      "info" : "ReturnStatement[42462-42482]:ReturnStatement[42462-42482]"
    }, {
      "left" : "return (nextToken() == JsonToken.VALUE_NUMBER_INT) ? getLongValue() : defaultValue;",
      "right" : "return (nextToken() == JsonToken.VALUE_NUMBER_INT) ? getLongValue() : defaultValue;",
      "info" : "ReturnStatement[42549-42632]:ReturnStatement[42549-42632]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[42644-42653]:MarkerAnnotation[42644-42653]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[42658-42664]:Modifier[42658-42664]"
    }, {
      "left" : "Boolean",
      "right" : "Boolean",
      "info" : "SimpleType[42665-42672]:SimpleType[42665-42672]"
    }, {
      "left" : "nextBooleanValue",
      "right" : "nextBooleanValue",
      "info" : "SimpleName[42673-42689]:SimpleName[42673-42689]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[42699-42710]:SimpleType[42699-42710]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42715-43807]:Block[42715-43807]"
    }, {
      "left" : "if (_currToken == JsonToken.FIELD_NAME)",
      "right" : "if (_currToken == JsonToken.FIELD_NAME)",
      "info" : "IfStatement[42806-43574]:IfStatement[42806-43574]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42846-43574]:Block[42846-43574]"
    }, {
      "left" : "_nameCopied = false;",
      "right" : "_nameCopied = false;",
      "info" : "ExpressionStatement[42899-42919]:ExpressionStatement[42899-42919]"
    }, {
      "left" : "JsonToken t = _nextToken;",
      "right" : "JsonToken t = _nextToken;",
      "info" : "VariableDeclarationStatement[42932-42957]:VariableDeclarationStatement[42932-42957]"
    }, {
      "left" : "_nextToken = null;",
      "right" : "_nextToken = null;",
      "info" : "ExpressionStatement[42970-42988]:ExpressionStatement[42970-42988]"
    }, {
      "left" : "_currToken = t;",
      "right" : "_currToken = t;",
      "info" : "ExpressionStatement[43001-43016]:ExpressionStatement[43001-43016]"
    }, {
      "left" : "if (t == JsonToken.VALUE_TRUE)",
      "right" : "if (t == JsonToken.VALUE_TRUE)",
      "info" : "IfStatement[43029-43112]:IfStatement[43029-43112]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43060-43112]:Block[43060-43112]"
    }, {
      "left" : "return Boolean.TRUE;",
      "right" : "return Boolean.TRUE;",
      "info" : "ReturnStatement[43078-43098]:ReturnStatement[43078-43098]"
    }, {
      "left" : "if (t == JsonToken.VALUE_FALSE)",
      "right" : "if (t == JsonToken.VALUE_FALSE)",
      "info" : "IfStatement[43125-43210]:IfStatement[43125-43210]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43157-43210]:Block[43157-43210]"
    }, {
      "left" : "return Boolean.FALSE;",
      "right" : "return Boolean.FALSE;",
      "info" : "ReturnStatement[43175-43196]:ReturnStatement[43175-43196]"
    }, {
      "left" : "if (t == JsonToken.START_ARRAY)",
      "right" : "if (t == JsonToken.START_ARRAY)",
      "info" : "IfStatement[43223-43539]:IfStatement[43223-43539]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43255-43377]:Block[43255-43377]"
    }, {
      "left" : "_parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);",
      "right" : "_parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);",
      "info" : "ExpressionStatement[43273-43363]:ExpressionStatement[43273-43363]"
    }, {
      "left" : "if (t == JsonToken.START_OBJECT)",
      "right" : "if (t == JsonToken.START_OBJECT)",
      "info" : "IfStatement[43383-43539]:IfStatement[43383-43539]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43416-43539]:Block[43416-43539]"
    }, {
      "left" : "_parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);",
      "right" : "_parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);",
      "info" : "ExpressionStatement[43434-43525]:ExpressionStatement[43434-43525]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[43552-43564]:ReturnStatement[43552-43564]"
    }, {
      "left" : "JsonToken t = nextToken();",
      "right" : "JsonToken t = nextToken();",
      "info" : "VariableDeclarationStatement[43584-43610]:VariableDeclarationStatement[43584-43610]"
    }, {
      "left" : "if (t == JsonToken.VALUE_TRUE)",
      "right" : "if (t == JsonToken.VALUE_TRUE)",
      "info" : "IfStatement[43619-43694]:IfStatement[43619-43694]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43650-43694]:Block[43650-43694]"
    }, {
      "left" : "return Boolean.TRUE;",
      "right" : "return Boolean.TRUE;",
      "info" : "ReturnStatement[43664-43684]:ReturnStatement[43664-43684]"
    }, {
      "left" : "if (t == JsonToken.VALUE_FALSE)",
      "right" : "if (t == JsonToken.VALUE_FALSE)",
      "info" : "IfStatement[43703-43780]:IfStatement[43703-43780]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43735-43780]:Block[43735-43780]"
    }, {
      "left" : "return Boolean.FALSE;",
      "right" : "return Boolean.FALSE;",
      "info" : "ReturnStatement[43749-43770]:ReturnStatement[43749-43770]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[43789-43801]:ReturnStatement[43789-43801]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[44776-44785]:Modifier[44776-44785]"
    }, {
      "left" : "JsonToken",
      "right" : "JsonToken",
      "info" : "SimpleType[44786-44795]:SimpleType[44786-44795]"
    }, {
      "left" : "_parsePosNumber",
      "right" : "_parsePosNumber",
      "info" : "SimpleName[44796-44811]:SimpleName[44796-44811]"
    }, {
      "left" : "int c",
      "right" : "int c",
      "info" : "SingleVariableDeclaration[44812-44817]:SingleVariableDeclaration[44812-44817]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[44826-44837]:SimpleType[44826-44837]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44842-46358]:Block[44842-46358]"
    }, {
      "left" : "char[] outBuf = _textBuffer.emptyAndGetCurrentSegment();",
      "right" : "char[] outBuf = _textBuffer.emptyAndGetCurrentSegment();",
      "info" : "VariableDeclarationStatement[44852-44908]:VariableDeclarationStatement[44852-44908]"
    }, {
      "left" : "if (c == INT_0)",
      "right" : "if (c == INT_0)",
      "info" : "IfStatement[44998-45067]:IfStatement[44998-45067]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45014-45067]:Block[45014-45067]"
    }, {
      "left" : "c = _verifyNoLeadingZeroes();",
      "right" : "c = _verifyNoLeadingZeroes();",
      "info" : "ExpressionStatement[45028-45057]:ExpressionStatement[45028-45057]"
    }, {
      "left" : "outBuf[0] = (char) c;",
      "right" : "outBuf[0] = (char) c;",
      "info" : "ExpressionStatement[45133-45154]:ExpressionStatement[45133-45154]"
    }, {
      "left" : "int intLen = 1;",
      "right" : "int intLen = 1;",
      "info" : "VariableDeclarationStatement[45163-45178]:VariableDeclarationStatement[45163-45178]"
    }, {
      "left" : "int outPtr = 1;",
      "right" : "int outPtr = 1;",
      "info" : "VariableDeclarationStatement[45187-45202]:VariableDeclarationStatement[45187-45202]"
    }, {
      "left" : "int end = _inputPtr + outBuf.length - 1;",
      "right" : "int end = _inputPtr + outBuf.length - 1;",
      "info" : "VariableDeclarationStatement[45323-45363]:VariableDeclarationStatement[45323-45363]"
    }, {
      "left" : "if (end > _inputEnd)",
      "right" : "if (end > _inputEnd)",
      "info" : "IfStatement[45387-45448]:IfStatement[45387-45448]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45408-45448]:Block[45408-45448]"
    }, {
      "left" : "end = _inputEnd;",
      "right" : "end = _inputEnd;",
      "info" : "ExpressionStatement[45422-45438]:ExpressionStatement[45422-45438]"
    }, {
      "left" : "while (true)",
      "right" : "while (true)",
      "info" : "WhileStatement[45510-45885]:WhileStatement[45510-45885]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45523-45885]:Block[45523-45885]"
    }, {
      "left" : "if (_inputPtr >= end)",
      "right" : "if (_inputPtr >= end)",
      "info" : "IfStatement[45537-45677]:IfStatement[45537-45677]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45559-45677]:Block[45559-45677]"
    }, {
      "left" : "return _parseNumber2(outBuf, outPtr, false, intLen);",
      "right" : "return _parseNumber2(outBuf, outPtr, false, intLen);",
      "info" : "ReturnStatement[45611-45663]:ReturnStatement[45611-45663]"
    }, {
      "left" : "c = (int) _inputBuffer[_inputPtr++] & 0xFF;",
      "right" : "c = (int) _inputBuffer[_inputPtr++] & 0xFF;",
      "info" : "ExpressionStatement[45690-45733]:ExpressionStatement[45690-45733]"
    }, {
      "left" : "if (c < INT_0 || c > INT_9)",
      "right" : "if (c < INT_0 || c > INT_9)",
      "info" : "IfStatement[45746-45812]:IfStatement[45746-45812]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45774-45812]:Block[45774-45812]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[45792-45798]:BreakStatement[45792-45798]"
    }, {
      "left" : "++intLen;",
      "right" : "++intLen;",
      "info" : "ExpressionStatement[45825-45834]:ExpressionStatement[45825-45834]"
    }, {
      "left" : "outBuf[outPtr++] = (char) c;",
      "right" : "outBuf[outPtr++] = (char) c;",
      "info" : "ExpressionStatement[45847-45875]:ExpressionStatement[45847-45875]"
    }, {
      "left" : "if (c == '.' || c == 'e' || c == 'E')",
      "right" : "if (c == '.' || c == 'e' || c == 'E')",
      "info" : "IfStatement[45894-46009]:IfStatement[45894-46009]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45932-46009]:Block[45932-46009]"
    }, {
      "left" : "return _parseFloat(outBuf, outPtr, c, false, intLen);",
      "right" : "return _parseFloat(outBuf, outPtr, c, false, intLen);",
      "info" : "ReturnStatement[45946-45999]:ReturnStatement[45946-45999]"
    }, {
      "left" : "--_inputPtr;",
      "right" : "--_inputPtr;",
      "info" : "ExpressionStatement[46018-46030]:ExpressionStatement[46018-46030]"
    }, {
      "left" : "_textBuffer.setCurrentLength(outPtr);",
      "right" : "_textBuffer.setCurrentLength(outPtr);",
      "info" : "ExpressionStatement[46081-46118]:ExpressionStatement[46081-46118]"
    }, {
      "left" : "if (_parsingContext.inRoot())",
      "right" : "if (_parsingContext.inRoot())",
      "info" : "IfStatement[46205-46279]:IfStatement[46205-46279]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46235-46279]:Block[46235-46279]"
    }, {
      "left" : "_verifyRootSpace(c);",
      "right" : "_verifyRootSpace(c);",
      "info" : "ExpressionStatement[46249-46269]:ExpressionStatement[46249-46269]"
    }, {
      "left" : "return resetInt(false, intLen);",
      "right" : "return resetInt(false, intLen);",
      "info" : "ReturnStatement[46321-46352]:ReturnStatement[46321-46352]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[46368-46377]:Modifier[46368-46377]"
    }, {
      "left" : "JsonToken",
      "right" : "JsonToken",
      "info" : "SimpleType[46378-46387]:SimpleType[46378-46387]"
    }, {
      "left" : "_parseNegNumber",
      "right" : "_parseNegNumber",
      "info" : "SimpleName[46388-46403]:SimpleName[46388-46403]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[46413-46424]:SimpleType[46413-46424]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46429-48389]:Block[46429-48389]"
    }, {
      "left" : "char[] outBuf = _textBuffer.emptyAndGetCurrentSegment();",
      "right" : "char[] outBuf = _textBuffer.emptyAndGetCurrentSegment();",
      "info" : "VariableDeclarationStatement[46439-46495]:VariableDeclarationStatement[46439-46495]"
    }, {
      "left" : "int outPtr = 0;",
      "right" : "int outPtr = 0;",
      "info" : "VariableDeclarationStatement[46504-46519]:VariableDeclarationStatement[46504-46519]"
    }, {
      "left" : "outBuf[outPtr++] = '-';",
      "right" : "outBuf[outPtr++] = '-';",
      "info" : "ExpressionStatement[46562-46585]:ExpressionStatement[46562-46585]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[46640-46713]:IfStatement[46640-46713]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46668-46713]:Block[46668-46713]"
    }, {
      "left" : "loadMoreGuaranteed();",
      "right" : "loadMoreGuaranteed();",
      "info" : "ExpressionStatement[46682-46703]:ExpressionStatement[46682-46703]"
    }, {
      "left" : "int c = (int) _inputBuffer[_inputPtr++] & 0xFF;",
      "right" : "int c = (int) _inputBuffer[_inputPtr++] & 0xFF;",
      "info" : "VariableDeclarationStatement[46722-46769]:VariableDeclarationStatement[46722-46769]"
    }, {
      "left" : "if (c < INT_0 || c > INT_9)",
      "right" : "if (c < INT_0 || c > INT_9)",
      "info" : "IfStatement[46823-46917]:IfStatement[46823-46917]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46851-46917]:Block[46851-46917]"
    }, {
      "left" : "return _handleInvalidNumberStart(c, true);",
      "right" : "return _handleInvalidNumberStart(c, true);",
      "info" : "ReturnStatement[46865-46907]:ReturnStatement[46865-46907]"
    }, {
      "left" : "if (c == INT_0)",
      "right" : "if (c == INT_0)",
      "info" : "IfStatement[47008-47077]:IfStatement[47008-47077]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47024-47077]:Block[47024-47077]"
    }, {
      "left" : "c = _verifyNoLeadingZeroes();",
      "right" : "c = _verifyNoLeadingZeroes();",
      "info" : "ExpressionStatement[47038-47067]:ExpressionStatement[47038-47067]"
    }, {
      "left" : "outBuf[outPtr++] = (char) c;",
      "right" : "outBuf[outPtr++] = (char) c;",
      "info" : "ExpressionStatement[47152-47180]:ExpressionStatement[47152-47180]"
    }, {
      "left" : "int intLen = 1;",
      "right" : "int intLen = 1;",
      "info" : "VariableDeclarationStatement[47189-47204]:VariableDeclarationStatement[47189-47204]"
    }, {
      "left" : "int end = _inputPtr + outBuf.length - outPtr;",
      "right" : "int end = _inputPtr + outBuf.length - outPtr;",
      "info" : "VariableDeclarationStatement[47326-47371]:VariableDeclarationStatement[47326-47371]"
    }, {
      "left" : "if (end > _inputEnd)",
      "right" : "if (end > _inputEnd)",
      "info" : "IfStatement[47380-47441]:IfStatement[47380-47441]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47401-47441]:Block[47401-47441]"
    }, {
      "left" : "end = _inputEnd;",
      "right" : "end = _inputEnd;",
      "info" : "ExpressionStatement[47415-47431]:ExpressionStatement[47415-47431]"
    }, {
      "left" : "while (true)",
      "right" : "while (true)",
      "info" : "WhileStatement[47504-47908]:WhileStatement[47504-47908]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47517-47908]:Block[47517-47908]"
    }, {
      "left" : "if (_inputPtr >= end)",
      "right" : "if (_inputPtr >= end)",
      "info" : "IfStatement[47531-47700]:IfStatement[47531-47700]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47553-47700]:Block[47553-47700]"
    }, {
      "left" : "return _parseNumber2(outBuf, outPtr, true, intLen);",
      "right" : "return _parseNumber2(outBuf, outPtr, true, intLen);",
      "info" : "ReturnStatement[47635-47686]:ReturnStatement[47635-47686]"
    }, {
      "left" : "c = (int) _inputBuffer[_inputPtr++] & 0xFF;",
      "right" : "c = (int) _inputBuffer[_inputPtr++] & 0xFF;",
      "info" : "ExpressionStatement[47713-47756]:ExpressionStatement[47713-47756]"
    }, {
      "left" : "if (c < INT_0 || c > INT_9)",
      "right" : "if (c < INT_0 || c > INT_9)",
      "info" : "IfStatement[47769-47835]:IfStatement[47769-47835]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47797-47835]:Block[47797-47835]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[47815-47821]:BreakStatement[47815-47821]"
    }, {
      "left" : "++intLen;",
      "right" : "++intLen;",
      "info" : "ExpressionStatement[47848-47857]:ExpressionStatement[47848-47857]"
    }, {
      "left" : "outBuf[outPtr++] = (char) c;",
      "right" : "outBuf[outPtr++] = (char) c;",
      "info" : "ExpressionStatement[47870-47898]:ExpressionStatement[47870-47898]"
    }, {
      "left" : "if (c == '.' || c == 'e' || c == 'E')",
      "right" : "if (c == '.' || c == 'e' || c == 'E')",
      "info" : "IfStatement[47917-48031]:IfStatement[47917-48031]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47955-48031]:Block[47955-48031]"
    }, {
      "left" : "return _parseFloat(outBuf, outPtr, c, true, intLen);",
      "right" : "return _parseFloat(outBuf, outPtr, c, true, intLen);",
      "info" : "ReturnStatement[47969-48021]:ReturnStatement[47969-48021]"
    }, {
      "left" : "--_inputPtr;",
      "right" : "--_inputPtr;",
      "info" : "ExpressionStatement[48049-48061]:ExpressionStatement[48049-48061]"
    }, {
      "left" : "_textBuffer.setCurrentLength(outPtr);",
      "right" : "_textBuffer.setCurrentLength(outPtr);",
      "info" : "ExpressionStatement[48112-48149]:ExpressionStatement[48112-48149]"
    }, {
      "left" : "if (_parsingContext.inRoot())",
      "right" : "if (_parsingContext.inRoot())",
      "info" : "IfStatement[48236-48310]:IfStatement[48236-48310]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48266-48310]:Block[48266-48310]"
    }, {
      "left" : "_verifyRootSpace(c);",
      "right" : "_verifyRootSpace(c);",
      "info" : "ExpressionStatement[48280-48300]:ExpressionStatement[48280-48300]"
    }, {
      "left" : "return resetInt(true, intLen);",
      "right" : "return resetInt(true, intLen);",
      "info" : "ReturnStatement[48353-48383]:ReturnStatement[48353-48383]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[48552-48559]:Modifier[48552-48559]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[48560-48565]:Modifier[48560-48565]"
    }, {
      "left" : "JsonToken",
      "right" : "JsonToken",
      "info" : "SimpleType[48566-48575]:SimpleType[48566-48575]"
    }, {
      "left" : "_parseNumber2",
      "right" : "_parseNumber2",
      "info" : "SimpleName[48576-48589]:SimpleName[48576-48589]"
    }, {
      "left" : "char[] outBuf",
      "right" : "char[] outBuf",
      "info" : "SingleVariableDeclaration[48590-48603]:SingleVariableDeclaration[48590-48603]"
    }, {
      "left" : "int outPtr",
      "right" : "int outPtr",
      "info" : "SingleVariableDeclaration[48605-48615]:SingleVariableDeclaration[48605-48615]"
    }, {
      "left" : "boolean negative",
      "right" : "boolean negative",
      "info" : "SingleVariableDeclaration[48617-48633]:SingleVariableDeclaration[48617-48633]"
    }, {
      "left" : "int intPartLength",
      "right" : "int intPartLength",
      "info" : "SingleVariableDeclaration[48647-48664]:SingleVariableDeclaration[48647-48664]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[48673-48684]:SimpleType[48673-48684]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48689-49860]:Block[48689-49860]"
    }, {
      "left" : "while (true)",
      "right" : "while (true)",
      "info" : "WhileStatement[48729-49460]:WhileStatement[48729-49460]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48742-49460]:Block[48742-49460]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd && !loadMore())",
      "right" : "if (_inputPtr >= _inputEnd && !loadMore())",
      "info" : "IfStatement[48756-48926]:IfStatement[48756-48926]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48799-48926]:Block[48799-48926]"
    }, {
      "left" : "_textBuffer.setCurrentLength(outPtr);",
      "right" : "_textBuffer.setCurrentLength(outPtr);",
      "info" : "ExpressionStatement[48817-48854]:ExpressionStatement[48817-48854]"
    }, {
      "left" : "return resetInt(negative, intPartLength);",
      "right" : "return resetInt(negative, intPartLength);",
      "info" : "ReturnStatement[48871-48912]:ReturnStatement[48871-48912]"
    }, {
      "left" : "int c = (int) _inputBuffer[_inputPtr++] & 0xFF;",
      "right" : "int c = (int) _inputBuffer[_inputPtr++] & 0xFF;",
      "info" : "VariableDeclarationStatement[48939-48986]:VariableDeclarationStatement[48939-48986]"
    }, {
      "left" : "if (c > INT_9 || c < INT_0)",
      "right" : "if (c > INT_9 || c < INT_0)",
      "info" : "IfStatement[48999-49234]:IfStatement[48999-49234]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49027-49234]:Block[49027-49234]"
    }, {
      "left" : "if (c == INT_PERIOD || c == INT_e || c == INT_E)",
      "right" : "if (c == INT_PERIOD || c == INT_e || c == INT_E)",
      "info" : "IfStatement[49045-49197]:IfStatement[49045-49197]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49094-49197]:Block[49094-49197]"
    }, {
      "left" : "return _parseFloat(outBuf, outPtr, c, negative, intPartLength);",
      "right" : "return _parseFloat(outBuf, outPtr, c, negative, intPartLength);",
      "info" : "ReturnStatement[49116-49179]:ReturnStatement[49116-49179]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[49214-49220]:BreakStatement[49214-49220]"
    }, {
      "left" : "if (outPtr >= outBuf.length)",
      "right" : "if (outPtr >= outBuf.length)",
      "info" : "IfStatement[49247-49380]:IfStatement[49247-49380]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49276-49380]:Block[49276-49380]"
    }, {
      "left" : "outBuf = _textBuffer.finishCurrentSegment();",
      "right" : "outBuf = _textBuffer.finishCurrentSegment();",
      "info" : "ExpressionStatement[49294-49338]:ExpressionStatement[49294-49338]"
    }, {
      "left" : "outPtr = 0;",
      "right" : "outPtr = 0;",
      "info" : "ExpressionStatement[49355-49366]:ExpressionStatement[49355-49366]"
    }, {
      "left" : "outBuf[outPtr++] = (char) c;",
      "right" : "outBuf[outPtr++] = (char) c;",
      "info" : "ExpressionStatement[49393-49421]:ExpressionStatement[49393-49421]"
    }, {
      "left" : "++intPartLength;",
      "right" : "++intPartLength;",
      "info" : "ExpressionStatement[49434-49450]:ExpressionStatement[49434-49450]"
    }, {
      "left" : "--_inputPtr;",
      "right" : "--_inputPtr;",
      "info" : "ExpressionStatement[49469-49481]:ExpressionStatement[49469-49481]"
    }, {
      "left" : "_textBuffer.setCurrentLength(outPtr);",
      "right" : "_textBuffer.setCurrentLength(outPtr);",
      "info" : "ExpressionStatement[49532-49569]:ExpressionStatement[49532-49569]"
    }, {
      "left" : "if (_parsingContext.inRoot())",
      "right" : "if (_parsingContext.inRoot())",
      "info" : "IfStatement[49656-49761]:IfStatement[49656-49761]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49686-49761]:Block[49686-49761]"
    }, {
      "left" : "_verifyRootSpace(_inputBuffer[_inputPtr++] & 0xFF);",
      "right" : "_verifyRootSpace(_inputBuffer[_inputPtr++] & 0xFF);",
      "info" : "ExpressionStatement[49700-49751]:ExpressionStatement[49700-49751]"
    }, {
      "left" : "return resetInt(negative, intPartLength);",
      "right" : "return resetInt(negative, intPartLength);",
      "info" : "ReturnStatement[49804-49845]:ReturnStatement[49804-49845]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[49991-49998]:Modifier[49991-49998]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[49999-50004]:Modifier[49999-50004]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[50005-50008]:PrimitiveType[50005-50008]"
    }, {
      "left" : "_verifyNoLeadingZeroes",
      "right" : "_verifyNoLeadingZeroes",
      "info" : "SimpleName[50009-50031]:SimpleName[50009-50031]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[50041-50052]:SimpleType[50041-50052]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50057-51256]:Block[50057-51256]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd && !loadMore())",
      "right" : "if (_inputPtr >= _inputEnd && !loadMore())",
      "info" : "IfStatement[50099-50179]:IfStatement[50099-50179]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50142-50179]:Block[50142-50179]"
    }, {
      "left" : "return INT_0;",
      "right" : "return INT_0;",
      "info" : "ReturnStatement[50156-50169]:ReturnStatement[50156-50169]"
    }, {
      "left" : "int ch = _inputBuffer[_inputPtr] & 0xFF;",
      "right" : "int ch = _inputBuffer[_inputPtr] & 0xFF;",
      "info" : "VariableDeclarationStatement[50188-50228]:VariableDeclarationStatement[50188-50228]"
    }, {
      "left" : "if (ch < INT_0 || ch > INT_9)",
      "right" : "if (ch < INT_0 || ch > INT_9)",
      "info" : "IfStatement[50326-50393]:IfStatement[50326-50393]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50356-50393]:Block[50356-50393]"
    }, {
      "left" : "return INT_0;",
      "right" : "return INT_0;",
      "info" : "ReturnStatement[50370-50383]:ReturnStatement[50370-50383]"
    }, {
      "left" : "if (!isEnabled(Feature.ALLOW_NUMERIC_LEADING_ZEROS))",
      "right" : "if (!isEnabled(Feature.ALLOW_NUMERIC_LEADING_ZEROS))",
      "info" : "IfStatement[50468-50595]:IfStatement[50468-50595]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50521-50595]:Block[50521-50595]"
    }, {
      "left" : "reportInvalidNumber(\"Leading zeroes not allowed\");",
      "right" : "reportInvalidNumber(\"Leading zeroes not allowed\");",
      "info" : "ExpressionStatement[50535-50585]:ExpressionStatement[50535-50585]"
    }, {
      "left" : "++_inputPtr;",
      "right" : "++_inputPtr;",
      "info" : "ExpressionStatement[50714-50726]:ExpressionStatement[50714-50726]"
    }, {
      "left" : "if (ch == INT_0)",
      "right" : "if (ch == INT_0)",
      "info" : "IfStatement[50765-51231]:IfStatement[50765-51231]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50782-51231]:Block[50782-51231]"
    }, {
      "left" : "while (_inputPtr < _inputEnd || loadMore())",
      "right" : "while (_inputPtr < _inputEnd || loadMore())",
      "info" : "WhileStatement[50796-51221]:WhileStatement[50796-51221]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50840-51221]:Block[50840-51221]"
    }, {
      "left" : "ch = _inputBuffer[_inputPtr] & 0xFF;",
      "right" : "ch = _inputBuffer[_inputPtr] & 0xFF;",
      "info" : "ExpressionStatement[50858-50894]:ExpressionStatement[50858-50894]"
    }, {
      "left" : "if (ch < INT_0 || ch > INT_9)",
      "right" : "if (ch < INT_0 || ch > INT_9)",
      "info" : "IfStatement[50911-51037]:IfStatement[50911-51037]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50941-51037]:Block[50941-51037]"
    }, {
      "left" : "return INT_0;",
      "right" : "return INT_0;",
      "info" : "ReturnStatement[51006-51019]:ReturnStatement[51006-51019]"
    }, {
      "left" : "++_inputPtr;",
      "right" : "++_inputPtr;",
      "info" : "ExpressionStatement[51054-51066]:ExpressionStatement[51054-51066]"
    }, {
      "left" : "if (ch != INT_0)",
      "right" : "if (ch != INT_0)",
      "info" : "IfStatement[51107-51207]:IfStatement[51107-51207]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51124-51207]:Block[51124-51207]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[51183-51189]:BreakStatement[51183-51189]"
    }, {
      "left" : "return ch;",
      "right" : "return ch;",
      "info" : "ReturnStatement[51240-51250]:ReturnStatement[51240-51250]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[51266-51273]:Modifier[51266-51273]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[51274-51279]:Modifier[51274-51279]"
    }, {
      "left" : "JsonToken",
      "right" : "JsonToken",
      "info" : "SimpleType[51280-51289]:SimpleType[51280-51289]"
    }, {
      "left" : "_parseFloat",
      "right" : "_parseFloat",
      "info" : "SimpleName[51290-51301]:SimpleName[51290-51301]"
    }, {
      "left" : "char[] outBuf",
      "right" : "char[] outBuf",
      "info" : "SingleVariableDeclaration[51302-51315]:SingleVariableDeclaration[51302-51315]"
    }, {
      "left" : "int outPtr",
      "right" : "int outPtr",
      "info" : "SingleVariableDeclaration[51317-51327]:SingleVariableDeclaration[51317-51327]"
    }, {
      "left" : "int c",
      "right" : "int c",
      "info" : "SingleVariableDeclaration[51329-51334]:SingleVariableDeclaration[51329-51334]"
    }, {
      "left" : "boolean negative",
      "right" : "boolean negative",
      "info" : "SingleVariableDeclaration[51348-51364]:SingleVariableDeclaration[51348-51364]"
    }, {
      "left" : "int integerPartLength",
      "right" : "int integerPartLength",
      "info" : "SingleVariableDeclaration[51366-51387]:SingleVariableDeclaration[51366-51387]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[51396-51407]:SimpleType[51396-51407]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51412-54615]:Block[51412-54615]"
    }, {
      "left" : "int fractLen = 0;",
      "right" : "int fractLen = 0;",
      "info" : "VariableDeclarationStatement[51422-51439]:VariableDeclarationStatement[51422-51439]"
    }, {
      "left" : "boolean eof = false;",
      "right" : "boolean eof = false;",
      "info" : "VariableDeclarationStatement[51448-51468]:VariableDeclarationStatement[51448-51468]"
    }, {
      "left" : "if (c == INT_PERIOD)",
      "right" : "if (c == INT_PERIOD)",
      "info" : "IfStatement[51524-52426]:IfStatement[51524-52426]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51545-52426]:Block[51545-52426]"
    }, {
      "left" : "outBuf[outPtr++] = (char) c;",
      "right" : "outBuf[outPtr++] = (char) c;",
      "info" : "ExpressionStatement[51576-51604]:ExpressionStatement[51576-51604]"
    }, {
      "left" : "fract_loop:\n            while (true) {\n                if (_inputPtr >= _inputEnd && !loadMore()) {\n                    eof = true;\n                    break fract_loop;\n                }\n                c = (int) _inputBuffer[_inputPtr++] & 0xFF;\n                if (c < INT_0 || c > INT_9) {\n                    break fract_loop;\n                }\n                ++fractLen;\n                if (outPtr >= outBuf.length) {\n                    outBuf = _textBuffer.finishCurrentSegment();\n                    outPtr = 0;\n                }\n                outBuf[outPtr++] = (char) c;\n            }",
      "right" : "fract_loop:\n            while (true) {\n                if (_inputPtr >= _inputEnd && !loadMore()) {\n                    eof = true;\n                    break fract_loop;\n                }\n                c = (int) _inputBuffer[_inputPtr++] & 0xFF;\n                if (c < INT_0 || c > INT_9) {\n                    break fract_loop;\n                }\n                ++fractLen;\n                if (outPtr >= outBuf.length) {\n                    outBuf = _textBuffer.finishCurrentSegment();\n                    outPtr = 0;\n                }\n                outBuf[outPtr++] = (char) c;\n            }",
      "info" : "LabeledStatement[51618-52216]:LabeledStatement[51618-52216]"
    }, {
      "left" : "while (true)",
      "right" : "while (true)",
      "info" : "WhileStatement[51642-52216]:WhileStatement[51642-52216]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51655-52216]:Block[51655-52216]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd && !loadMore())",
      "right" : "if (_inputPtr >= _inputEnd && !loadMore())",
      "info" : "IfStatement[51673-51805]:IfStatement[51673-51805]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51716-51805]:Block[51716-51805]"
    }, {
      "left" : "eof = true;",
      "right" : "eof = true;",
      "info" : "ExpressionStatement[51738-51749]:ExpressionStatement[51738-51749]"
    }, {
      "left" : "break fract_loop;",
      "right" : "break fract_loop;",
      "info" : "BreakStatement[51770-51787]:BreakStatement[51770-51787]"
    }, {
      "left" : "c = (int) _inputBuffer[_inputPtr++] & 0xFF;",
      "right" : "c = (int) _inputBuffer[_inputPtr++] & 0xFF;",
      "info" : "ExpressionStatement[51822-51865]:ExpressionStatement[51822-51865]"
    }, {
      "left" : "if (c < INT_0 || c > INT_9)",
      "right" : "if (c < INT_0 || c > INT_9)",
      "info" : "IfStatement[51882-51967]:IfStatement[51882-51967]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51910-51967]:Block[51910-51967]"
    }, {
      "left" : "break fract_loop;",
      "right" : "break fract_loop;",
      "info" : "BreakStatement[51932-51949]:BreakStatement[51932-51949]"
    }, {
      "left" : "++fractLen;",
      "right" : "++fractLen;",
      "info" : "ExpressionStatement[51984-51995]:ExpressionStatement[51984-51995]"
    }, {
      "left" : "if (outPtr >= outBuf.length)",
      "right" : "if (outPtr >= outBuf.length)",
      "info" : "IfStatement[52012-52157]:IfStatement[52012-52157]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52041-52157]:Block[52041-52157]"
    }, {
      "left" : "outBuf = _textBuffer.finishCurrentSegment();",
      "right" : "outBuf = _textBuffer.finishCurrentSegment();",
      "info" : "ExpressionStatement[52063-52107]:ExpressionStatement[52063-52107]"
    }, {
      "left" : "outPtr = 0;",
      "right" : "outPtr = 0;",
      "info" : "ExpressionStatement[52128-52139]:ExpressionStatement[52128-52139]"
    }, {
      "left" : "outBuf[outPtr++] = (char) c;",
      "right" : "outBuf[outPtr++] = (char) c;",
      "info" : "ExpressionStatement[52174-52202]:ExpressionStatement[52174-52202]"
    }, {
      "left" : "if (fractLen == 0)",
      "right" : "if (fractLen == 0)",
      "info" : "IfStatement[52294-52416]:IfStatement[52294-52416]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52313-52416]:Block[52313-52416]"
    }, {
      "left" : "reportUnexpectedNumberChar(c, \"Decimal point not followed by a digit\");",
      "right" : "reportUnexpectedNumberChar(c, \"Decimal point not followed by a digit\");",
      "info" : "ExpressionStatement[52331-52402]:ExpressionStatement[52331-52402]"
    }, {
      "left" : "int expLen = 0;",
      "right" : "int expLen = 0;",
      "info" : "VariableDeclarationStatement[52436-52451]:VariableDeclarationStatement[52436-52451]"
    }, {
      "left" : "if (c == INT_e || c == INT_E)",
      "right" : "if (c == INT_e || c == INT_E)",
      "info" : "IfStatement[52460-54146]:IfStatement[52460-54146]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52490-54146]:Block[52490-54146]"
    }, {
      "left" : "if (outPtr >= outBuf.length)",
      "right" : "if (outPtr >= outBuf.length)",
      "info" : "IfStatement[52517-52650]:IfStatement[52517-52650]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52546-52650]:Block[52546-52650]"
    }, {
      "left" : "outBuf = _textBuffer.finishCurrentSegment();",
      "right" : "outBuf = _textBuffer.finishCurrentSegment();",
      "info" : "ExpressionStatement[52564-52608]:ExpressionStatement[52564-52608]"
    }, {
      "left" : "outPtr = 0;",
      "right" : "outPtr = 0;",
      "info" : "ExpressionStatement[52625-52636]:ExpressionStatement[52625-52636]"
    }, {
      "left" : "outBuf[outPtr++] = (char) c;",
      "right" : "outBuf[outPtr++] = (char) c;",
      "info" : "ExpressionStatement[52663-52691]:ExpressionStatement[52663-52691]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[52771-52852]:IfStatement[52771-52852]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52799-52852]:Block[52799-52852]"
    }, {
      "left" : "loadMoreGuaranteed();",
      "right" : "loadMoreGuaranteed();",
      "info" : "ExpressionStatement[52817-52838]:ExpressionStatement[52817-52838]"
    }, {
      "left" : "c = (int) _inputBuffer[_inputPtr++] & 0xFF;",
      "right" : "c = (int) _inputBuffer[_inputPtr++] & 0xFF;",
      "info" : "ExpressionStatement[52865-52908]:ExpressionStatement[52865-52908]"
    }, {
      "left" : "if (c == '-' || c == '+')",
      "right" : "if (c == '-' || c == '+')",
      "info" : "IfStatement[52952-53409]:IfStatement[52952-53409]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52978-53409]:Block[52978-53409]"
    }, {
      "left" : "if (outPtr >= outBuf.length)",
      "right" : "if (outPtr >= outBuf.length)",
      "info" : "IfStatement[52996-53141]:IfStatement[52996-53141]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53025-53141]:Block[53025-53141]"
    }, {
      "left" : "outBuf = _textBuffer.finishCurrentSegment();",
      "right" : "outBuf = _textBuffer.finishCurrentSegment();",
      "info" : "ExpressionStatement[53047-53091]:ExpressionStatement[53047-53091]"
    }, {
      "left" : "outPtr = 0;",
      "right" : "outPtr = 0;",
      "info" : "ExpressionStatement[53112-53123]:ExpressionStatement[53112-53123]"
    }, {
      "left" : "outBuf[outPtr++] = (char) c;",
      "right" : "outBuf[outPtr++] = (char) c;",
      "info" : "ExpressionStatement[53158-53186]:ExpressionStatement[53158-53186]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[53246-53335]:IfStatement[53246-53335]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53274-53335]:Block[53274-53335]"
    }, {
      "left" : "loadMoreGuaranteed();",
      "right" : "loadMoreGuaranteed();",
      "info" : "ExpressionStatement[53296-53317]:ExpressionStatement[53296-53317]"
    }, {
      "left" : "c = (int) _inputBuffer[_inputPtr++] & 0xFF;",
      "right" : "c = (int) _inputBuffer[_inputPtr++] & 0xFF;",
      "info" : "ExpressionStatement[53352-53395]:ExpressionStatement[53352-53395]"
    }, {
      "left" : "exp_loop:\n            while (c <= INT_9 && c >= INT_0) {\n                ++expLen;\n                if (outPtr >= outBuf.length) {\n                    outBuf = _textBuffer.finishCurrentSegment();\n                    outPtr = 0;\n                }\n                outBuf[outPtr++] = (char) c;\n                if (_inputPtr >= _inputEnd && !loadMore()) {\n                    eof = true;\n                    break exp_loop;\n                }\n                c = (int) _inputBuffer[_inputPtr++] & 0xFF;\n            }",
      "right" : "exp_loop:\n            while (c <= INT_9 && c >= INT_0) {\n                ++expLen;\n                if (outPtr >= outBuf.length) {\n                    outBuf = _textBuffer.finishCurrentSegment();\n                    outPtr = 0;\n                }\n                outBuf[outPtr++] = (char) c;\n                if (_inputPtr >= _inputEnd && !loadMore()) {\n                    eof = true;\n                    break exp_loop;\n                }\n                c = (int) _inputBuffer[_inputPtr++] & 0xFF;\n            }",
      "info" : "LabeledStatement[53423-53933]:LabeledStatement[53423-53933]"
    }, {
      "left" : "while (c <= INT_9 && c >= INT_0)",
      "right" : "while (c <= INT_9 && c >= INT_0)",
      "info" : "WhileStatement[53445-53933]:WhileStatement[53445-53933]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53478-53933]:Block[53478-53933]"
    }, {
      "left" : "++expLen;",
      "right" : "++expLen;",
      "info" : "ExpressionStatement[53496-53505]:ExpressionStatement[53496-53505]"
    }, {
      "left" : "if (outPtr >= outBuf.length)",
      "right" : "if (outPtr >= outBuf.length)",
      "info" : "IfStatement[53522-53667]:IfStatement[53522-53667]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53551-53667]:Block[53551-53667]"
    }, {
      "left" : "outBuf = _textBuffer.finishCurrentSegment();",
      "right" : "outBuf = _textBuffer.finishCurrentSegment();",
      "info" : "ExpressionStatement[53573-53617]:ExpressionStatement[53573-53617]"
    }, {
      "left" : "outPtr = 0;",
      "right" : "outPtr = 0;",
      "info" : "ExpressionStatement[53638-53649]:ExpressionStatement[53638-53649]"
    }, {
      "left" : "outBuf[outPtr++] = (char) c;",
      "right" : "outBuf[outPtr++] = (char) c;",
      "info" : "ExpressionStatement[53684-53712]:ExpressionStatement[53684-53712]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd && !loadMore())",
      "right" : "if (_inputPtr >= _inputEnd && !loadMore())",
      "info" : "IfStatement[53729-53859]:IfStatement[53729-53859]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53772-53859]:Block[53772-53859]"
    }, {
      "left" : "eof = true;",
      "right" : "eof = true;",
      "info" : "ExpressionStatement[53794-53805]:ExpressionStatement[53794-53805]"
    }, {
      "left" : "break exp_loop;",
      "right" : "break exp_loop;",
      "info" : "BreakStatement[53826-53841]:BreakStatement[53826-53841]"
    }, {
      "left" : "c = (int) _inputBuffer[_inputPtr++] & 0xFF;",
      "right" : "c = (int) _inputBuffer[_inputPtr++] & 0xFF;",
      "info" : "ExpressionStatement[53876-53919]:ExpressionStatement[53876-53919]"
    }, {
      "left" : "if (expLen == 0)",
      "right" : "if (expLen == 0)",
      "info" : "IfStatement[54011-54136]:IfStatement[54011-54136]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54028-54136]:Block[54028-54136]"
    }, {
      "left" : "reportUnexpectedNumberChar(c, \"Exponent indicator not followed by a digit\");",
      "right" : "reportUnexpectedNumberChar(c, \"Exponent indicator not followed by a digit\");",
      "info" : "ExpressionStatement[54046-54122]:ExpressionStatement[54046-54122]"
    }, {
      "left" : "if (!eof)",
      "right" : "if (!eof)",
      "info" : "IfStatement[54232-54455]:IfStatement[54232-54455]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54242-54455]:Block[54242-54455]"
    }, {
      "left" : "--_inputPtr;",
      "right" : "--_inputPtr;",
      "info" : "ExpressionStatement[54256-54268]:ExpressionStatement[54256-54268]"
    }, {
      "left" : "if (_parsingContext.inRoot())",
      "right" : "if (_parsingContext.inRoot())",
      "info" : "IfStatement[54363-54445]:IfStatement[54363-54445]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54393-54445]:Block[54393-54445]"
    }, {
      "left" : "_verifyRootSpace(c);",
      "right" : "_verifyRootSpace(c);",
      "info" : "ExpressionStatement[54411-54431]:ExpressionStatement[54411-54431]"
    }, {
      "left" : "_textBuffer.setCurrentLength(outPtr);",
      "right" : "_textBuffer.setCurrentLength(outPtr);",
      "info" : "ExpressionStatement[54464-54501]:ExpressionStatement[54464-54501]"
    }, {
      "left" : "return resetFloat(negative, integerPartLength, fractLen, expLen);",
      "right" : "return resetFloat(negative, integerPartLength, fractLen, expLen);",
      "info" : "ReturnStatement[54544-54609]:ReturnStatement[54544-54609]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[54866-54873]:Modifier[54866-54873]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[54874-54879]:Modifier[54874-54879]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[54880-54884]:PrimitiveType[54880-54884]"
    }, {
      "left" : "_verifyRootSpace",
      "right" : "_verifyRootSpace",
      "info" : "SimpleName[54885-54901]:SimpleName[54885-54901]"
    }, {
      "left" : "int ch",
      "right" : "int ch",
      "info" : "SingleVariableDeclaration[54902-54908]:SingleVariableDeclaration[54902-54908]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[54917-54928]:SimpleType[54917-54928]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54933-55382]:Block[54933-55382]"
    }, {
      "left" : "++_inputPtr;",
      "right" : "++_inputPtr;",
      "info" : "ExpressionStatement[55003-55015]:ExpressionStatement[55003-55015]"
    }, {
      "left" : "switch (ch) {\n        case ' ':\n        case '\\t':\n            return;\n        case '\\r':\n            _skipCR();\n            return;\n        case '\\n':\n            ++_currInputRow;\n            _currInputRowStart = _inputPtr;\n            return;\n        }",
      "right" : "switch (ch) {\n        case ' ':\n        case '\\t':\n            return;\n        case '\\r':\n            _skipCR();\n            return;\n        case '\\n':\n            ++_currInputRow;\n            _currInputRowStart = _inputPtr;\n            return;\n        }",
      "info" : "SwitchStatement[55088-55342]:SwitchStatement[55088-55342]"
    }, {
      "left" : "case ' ':",
      "right" : "case ' ':",
      "info" : "SwitchCase[55110-55119]:SwitchCase[55110-55119]"
    }, {
      "left" : "case '\\t':",
      "right" : "case '\\t':",
      "info" : "SwitchCase[55128-55138]:SwitchCase[55128-55138]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[55151-55158]:ReturnStatement[55151-55158]"
    }, {
      "left" : "case '\\r':",
      "right" : "case '\\r':",
      "info" : "SwitchCase[55167-55177]:SwitchCase[55167-55177]"
    }, {
      "left" : "_skipCR();",
      "right" : "_skipCR();",
      "info" : "ExpressionStatement[55190-55200]:ExpressionStatement[55190-55200]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[55213-55220]:ReturnStatement[55213-55220]"
    }, {
      "left" : "case '\\n':",
      "right" : "case '\\n':",
      "info" : "SwitchCase[55229-55239]:SwitchCase[55229-55239]"
    }, {
      "left" : "++_currInputRow;",
      "right" : "++_currInputRow;",
      "info" : "ExpressionStatement[55252-55268]:ExpressionStatement[55252-55268]"
    }, {
      "left" : "_currInputRowStart = _inputPtr;",
      "right" : "_currInputRowStart = _inputPtr;",
      "info" : "ExpressionStatement[55281-55312]:ExpressionStatement[55281-55312]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[55325-55332]:ReturnStatement[55325-55332]"
    }, {
      "left" : "_reportMissingRootWS(ch);",
      "right" : "_reportMissingRootWS(ch);",
      "info" : "ExpressionStatement[55351-55376]:ExpressionStatement[55351-55376]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[55579-55588]:Modifier[55579-55588]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[55589-55594]:Modifier[55589-55594]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[55595-55601]:SimpleType[55595-55601]"
    }, {
      "left" : "_parseName",
      "right" : "_parseName",
      "info" : "SimpleName[55602-55612]:SimpleName[55602-55612]"
    }, {
      "left" : "int i",
      "right" : "int i",
      "info" : "SingleVariableDeclaration[55613-55618]:SingleVariableDeclaration[55613-55618]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[55627-55638]:SimpleType[55627-55638]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55643-57941]:Block[55643-57941]"
    }, {
      "left" : "if (i != INT_QUOTE)",
      "right" : "if (i != INT_QUOTE)",
      "info" : "IfStatement[55653-55722]:IfStatement[55653-55722]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55673-55722]:Block[55673-55722]"
    }, {
      "left" : "return _handleOddName(i);",
      "right" : "return _handleOddName(i);",
      "info" : "ReturnStatement[55687-55712]:ReturnStatement[55687-55712]"
    }, {
      "left" : "if ((_inputPtr + 13) > _inputEnd)",
      "right" : "if ((_inputPtr + 13) > _inputEnd)",
      "info" : "IfStatement[55784-55915]:IfStatement[55784-55915]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55818-55915]:Block[55818-55915]"
    }, {
      "left" : "return slowParseName();",
      "right" : "return slowParseName();",
      "info" : "ReturnStatement[55882-55905]:ReturnStatement[55882-55905]"
    }, {
      "left" : "final byte[] input = _inputBuffer;",
      "right" : "final byte[] input = _inputBuffer;",
      "info" : "VariableDeclarationStatement[56249-56283]:VariableDeclarationStatement[56249-56283]"
    }, {
      "left" : "final int[] codes = _icLatin1;",
      "right" : "final int[] codes = _icLatin1;",
      "info" : "VariableDeclarationStatement[56292-56322]:VariableDeclarationStatement[56292-56322]"
    }, {
      "left" : "int q = input[_inputPtr++] & 0xFF;",
      "right" : "int q = input[_inputPtr++] & 0xFF;",
      "info" : "VariableDeclarationStatement[56332-56366]:VariableDeclarationStatement[56332-56366]"
    }, {
      "left" : "if (codes[q] == 0)",
      "right" : "if (codes[q] == 0)",
      "info" : "IfStatement[56376-57785]:IfStatement[56376-57785]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56395-57785]:Block[56395-57785]"
    }, {
      "left" : "i = input[_inputPtr++] & 0xFF;",
      "right" : "i = input[_inputPtr++] & 0xFF;",
      "info" : "ExpressionStatement[56409-56439]:ExpressionStatement[56409-56439]"
    }, {
      "left" : "if (codes[i] == 0)",
      "right" : "if (codes[i] == 0)",
      "info" : "IfStatement[56452-57617]:IfStatement[56452-57617]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56471-57617]:Block[56471-57617]"
    }, {
      "left" : "q = (q << 8) | i;",
      "right" : "q = (q << 8) | i;",
      "info" : "ExpressionStatement[56489-56506]:ExpressionStatement[56489-56506]"
    }, {
      "left" : "i = input[_inputPtr++] & 0xFF;",
      "right" : "i = input[_inputPtr++] & 0xFF;",
      "info" : "ExpressionStatement[56523-56553]:ExpressionStatement[56523-56553]"
    }, {
      "left" : "if (codes[i] == 0)",
      "right" : "if (codes[i] == 0)",
      "info" : "IfStatement[56570-57415]:IfStatement[56570-57415]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56589-57415]:Block[56589-57415]"
    }, {
      "left" : "q = (q << 8) | i;",
      "right" : "q = (q << 8) | i;",
      "info" : "ExpressionStatement[56611-56628]:ExpressionStatement[56611-56628]"
    }, {
      "left" : "i = input[_inputPtr++] & 0xFF;",
      "right" : "i = input[_inputPtr++] & 0xFF;",
      "info" : "ExpressionStatement[56649-56679]:ExpressionStatement[56649-56679]"
    }, {
      "left" : "if (codes[i] == 0)",
      "right" : "if (codes[i] == 0)",
      "info" : "IfStatement[56700-57209]:IfStatement[56700-57209]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56719-57209]:Block[56719-57209]"
    }, {
      "left" : "q = (q << 8) | i;",
      "right" : "q = (q << 8) | i;",
      "info" : "ExpressionStatement[56745-56762]:ExpressionStatement[56745-56762]"
    }, {
      "left" : "i = input[_inputPtr++] & 0xFF;",
      "right" : "i = input[_inputPtr++] & 0xFF;",
      "info" : "ExpressionStatement[56787-56817]:ExpressionStatement[56787-56817]"
    }, {
      "left" : "if (codes[i] == 0)",
      "right" : "if (codes[i] == 0)",
      "info" : "IfStatement[56842-56983]:IfStatement[56842-56983]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56861-56983]:Block[56861-56983]"
    }, {
      "left" : "_quad1 = q;",
      "right" : "_quad1 = q;",
      "info" : "ExpressionStatement[56891-56902]:ExpressionStatement[56891-56902]"
    }, {
      "left" : "return parseMediumName(i);",
      "right" : "return parseMediumName(i);",
      "info" : "ReturnStatement[56931-56957]:ReturnStatement[56931-56957]"
    }, {
      "left" : "if (i == INT_QUOTE)",
      "right" : "if (i == INT_QUOTE)",
      "info" : "IfStatement[57008-57136]:IfStatement[57008-57136]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57028-57136]:Block[57028-57136]"
    }, {
      "left" : "return findName(q, 4);",
      "right" : "return findName(q, 4);",
      "info" : "ReturnStatement[57088-57110]:ReturnStatement[57088-57110]"
    }, {
      "left" : "return parseName(q, i, 4);",
      "right" : "return parseName(q, i, 4);",
      "info" : "ReturnStatement[57161-57187]:ReturnStatement[57161-57187]"
    }, {
      "left" : "if (i == INT_QUOTE)",
      "right" : "if (i == INT_QUOTE)",
      "info" : "IfStatement[57230-57350]:IfStatement[57230-57350]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57250-57350]:Block[57250-57350]"
    }, {
      "left" : "return findName(q, 3);",
      "right" : "return findName(q, 3);",
      "info" : "ReturnStatement[57306-57328]:ReturnStatement[57306-57328]"
    }, {
      "left" : "return parseName(q, i, 3);",
      "right" : "return parseName(q, i, 3);",
      "info" : "ReturnStatement[57371-57397]:ReturnStatement[57371-57397]"
    }, {
      "left" : "if (i == INT_QUOTE)",
      "right" : "if (i == INT_QUOTE)",
      "info" : "IfStatement[57448-57560]:IfStatement[57448-57560]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57468-57560]:Block[57468-57560]"
    }, {
      "left" : "return findName(q, 2);",
      "right" : "return findName(q, 2);",
      "info" : "ReturnStatement[57520-57542]:ReturnStatement[57520-57542]"
    }, {
      "left" : "return parseName(q, i, 2);",
      "right" : "return parseName(q, i, 2);",
      "info" : "ReturnStatement[57577-57603]:ReturnStatement[57577-57603]"
    }, {
      "left" : "if (i == INT_QUOTE)",
      "right" : "if (i == INT_QUOTE)",
      "info" : "IfStatement[57630-57736]:IfStatement[57630-57736]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57650-57736]:Block[57650-57736]"
    }, {
      "left" : "return findName(q, 1);",
      "right" : "return findName(q, 1);",
      "info" : "ReturnStatement[57700-57722]:ReturnStatement[57700-57722]"
    }, {
      "left" : "return parseName(q, i, 1);",
      "right" : "return parseName(q, i, 1);",
      "info" : "ReturnStatement[57749-57775]:ReturnStatement[57749-57775]"
    }, {
      "left" : "if (q == INT_QUOTE)",
      "right" : "if (q == INT_QUOTE)",
      "info" : "IfStatement[57799-57873]:IfStatement[57799-57873]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57819-57873]:Block[57819-57873]"
    }, {
      "left" : "return \"\";",
      "right" : "return \"\";",
      "info" : "ReturnStatement[57853-57863]:ReturnStatement[57853-57863]"
    }, {
      "left" : "return parseName(0, q, 0);",
      "right" : "return parseName(0, q, 0);",
      "info" : "ReturnStatement[57882-57908]:ReturnStatement[57882-57908]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[57947-57956]:Modifier[57947-57956]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[57957-57962]:Modifier[57957-57962]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[57963-57969]:SimpleType[57963-57969]"
    }, {
      "left" : "parseMediumName",
      "right" : "parseMediumName",
      "info" : "SimpleName[57970-57985]:SimpleName[57970-57985]"
    }, {
      "left" : "int q2",
      "right" : "int q2",
      "info" : "SingleVariableDeclaration[57986-57992]:SingleVariableDeclaration[57986-57992]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[58001-58012]:SimpleType[58001-58012]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58017-59233]:Block[58017-59233]"
    }, {
      "left" : "final byte[] input = _inputBuffer;",
      "right" : "final byte[] input = _inputBuffer;",
      "info" : "VariableDeclarationStatement[58027-58061]:VariableDeclarationStatement[58027-58061]"
    }, {
      "left" : "final int[] codes = _icLatin1;",
      "right" : "final int[] codes = _icLatin1;",
      "info" : "VariableDeclarationStatement[58070-58100]:VariableDeclarationStatement[58070-58100]"
    }, {
      "left" : "int i = input[_inputPtr++] & 0xFF;",
      "right" : "int i = input[_inputPtr++] & 0xFF;",
      "info" : "VariableDeclarationStatement[58149-58183]:VariableDeclarationStatement[58149-58183]"
    }, {
      "left" : "if (codes[i] != 0)",
      "right" : "if (codes[i] != 0)",
      "info" : "IfStatement[58192-58404]:IfStatement[58192-58404]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58211-58404]:Block[58211-58404]"
    }, {
      "left" : "if (i == INT_QUOTE)",
      "right" : "if (i == INT_QUOTE)",
      "info" : "IfStatement[58225-58319]:IfStatement[58225-58319]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58245-58319]:Block[58245-58319]"
    }, {
      "left" : "return findName(_quad1, q2, 1);",
      "right" : "return findName(_quad1, q2, 1);",
      "info" : "ReturnStatement[58274-58305]:ReturnStatement[58274-58305]"
    }, {
      "left" : "return parseName(_quad1, q2, i, 1);",
      "right" : "return parseName(_quad1, q2, i, 1);",
      "info" : "ReturnStatement[58332-58367]:ReturnStatement[58332-58367]"
    }, {
      "left" : "q2 = (q2 << 8) | i;",
      "right" : "q2 = (q2 << 8) | i;",
      "info" : "ExpressionStatement[58413-58432]:ExpressionStatement[58413-58432]"
    }, {
      "left" : "i = input[_inputPtr++] & 0xFF;",
      "right" : "i = input[_inputPtr++] & 0xFF;",
      "info" : "ExpressionStatement[58441-58471]:ExpressionStatement[58441-58471]"
    }, {
      "left" : "if (codes[i] != 0)",
      "right" : "if (codes[i] != 0)",
      "info" : "IfStatement[58480-58665]:IfStatement[58480-58665]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58499-58665]:Block[58499-58665]"
    }, {
      "left" : "if (i == INT_QUOTE)",
      "right" : "if (i == INT_QUOTE)",
      "info" : "IfStatement[58513-58607]:IfStatement[58513-58607]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58533-58607]:Block[58533-58607]"
    }, {
      "left" : "return findName(_quad1, q2, 2);",
      "right" : "return findName(_quad1, q2, 2);",
      "info" : "ReturnStatement[58562-58593]:ReturnStatement[58562-58593]"
    }, {
      "left" : "return parseName(_quad1, q2, i, 2);",
      "right" : "return parseName(_quad1, q2, i, 2);",
      "info" : "ReturnStatement[58620-58655]:ReturnStatement[58620-58655]"
    }, {
      "left" : "q2 = (q2 << 8) | i;",
      "right" : "q2 = (q2 << 8) | i;",
      "info" : "ExpressionStatement[58674-58693]:ExpressionStatement[58674-58693]"
    }, {
      "left" : "i = input[_inputPtr++] & 0xFF;",
      "right" : "i = input[_inputPtr++] & 0xFF;",
      "info" : "ExpressionStatement[58702-58732]:ExpressionStatement[58702-58732]"
    }, {
      "left" : "if (codes[i] != 0)",
      "right" : "if (codes[i] != 0)",
      "info" : "IfStatement[58741-58926]:IfStatement[58741-58926]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58760-58926]:Block[58760-58926]"
    }, {
      "left" : "if (i == INT_QUOTE)",
      "right" : "if (i == INT_QUOTE)",
      "info" : "IfStatement[58774-58868]:IfStatement[58774-58868]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58794-58868]:Block[58794-58868]"
    }, {
      "left" : "return findName(_quad1, q2, 3);",
      "right" : "return findName(_quad1, q2, 3);",
      "info" : "ReturnStatement[58823-58854]:ReturnStatement[58823-58854]"
    }, {
      "left" : "return parseName(_quad1, q2, i, 3);",
      "right" : "return parseName(_quad1, q2, i, 3);",
      "info" : "ReturnStatement[58881-58916]:ReturnStatement[58881-58916]"
    }, {
      "left" : "q2 = (q2 << 8) | i;",
      "right" : "q2 = (q2 << 8) | i;",
      "info" : "ExpressionStatement[58935-58954]:ExpressionStatement[58935-58954]"
    }, {
      "left" : "i = input[_inputPtr++] & 0xFF;",
      "right" : "i = input[_inputPtr++] & 0xFF;",
      "info" : "ExpressionStatement[58963-58993]:ExpressionStatement[58963-58993]"
    }, {
      "left" : "if (codes[i] != 0)",
      "right" : "if (codes[i] != 0)",
      "info" : "IfStatement[59002-59187]:IfStatement[59002-59187]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[59021-59187]:Block[59021-59187]"
    }, {
      "left" : "if (i == INT_QUOTE)",
      "right" : "if (i == INT_QUOTE)",
      "info" : "IfStatement[59035-59129]:IfStatement[59035-59129]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[59055-59129]:Block[59055-59129]"
    }, {
      "left" : "return findName(_quad1, q2, 4);",
      "right" : "return findName(_quad1, q2, 4);",
      "info" : "ReturnStatement[59084-59115]:ReturnStatement[59084-59115]"
    }, {
      "left" : "return parseName(_quad1, q2, i, 4);",
      "right" : "return parseName(_quad1, q2, i, 4);",
      "info" : "ReturnStatement[59142-59177]:ReturnStatement[59142-59177]"
    }, {
      "left" : "return parseMediumName2(i, q2);",
      "right" : "return parseMediumName2(i, q2);",
      "info" : "ReturnStatement[59196-59227]:ReturnStatement[59196-59227]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[59273-59282]:Modifier[59273-59282]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[59283-59288]:Modifier[59283-59288]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[59289-59295]:SimpleType[59289-59295]"
    }, {
      "left" : "parseMediumName2",
      "right" : "parseMediumName2",
      "info" : "SimpleName[59296-59312]:SimpleName[59296-59312]"
    }, {
      "left" : "int q3",
      "right" : "int q3",
      "info" : "SingleVariableDeclaration[59313-59319]:SingleVariableDeclaration[59313-59319]"
    }, {
      "left" : "final int q2",
      "right" : "final int q2",
      "info" : "SingleVariableDeclaration[59321-59333]:SingleVariableDeclaration[59321-59333]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[59342-59353]:SimpleType[59342-59353]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[59358-60579]:Block[59358-60579]"
    }, {
      "left" : "final byte[] input = _inputBuffer;",
      "right" : "final byte[] input = _inputBuffer;",
      "info" : "VariableDeclarationStatement[59368-59402]:VariableDeclarationStatement[59368-59402]"
    }, {
      "left" : "final int[] codes = _icLatin1;",
      "right" : "final int[] codes = _icLatin1;",
      "info" : "VariableDeclarationStatement[59411-59441]:VariableDeclarationStatement[59411-59441]"
    }, {
      "left" : "int i = input[_inputPtr++] & 0xFF;",
      "right" : "int i = input[_inputPtr++] & 0xFF;",
      "info" : "VariableDeclarationStatement[59486-59520]:VariableDeclarationStatement[59486-59520]"
    }, {
      "left" : "if (codes[i] != 0)",
      "right" : "if (codes[i] != 0)",
      "info" : "IfStatement[59529-59722]:IfStatement[59529-59722]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[59548-59722]:Block[59548-59722]"
    }, {
      "left" : "if (i == INT_QUOTE)",
      "right" : "if (i == INT_QUOTE)",
      "info" : "IfStatement[59562-59660]:IfStatement[59562-59660]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[59582-59660]:Block[59582-59660]"
    }, {
      "left" : "return findName(_quad1, q2, q3, 1);",
      "right" : "return findName(_quad1, q2, q3, 1);",
      "info" : "ReturnStatement[59611-59646]:ReturnStatement[59611-59646]"
    }, {
      "left" : "return parseName(_quad1, q2, q3, i, 1);",
      "right" : "return parseName(_quad1, q2, q3, i, 1);",
      "info" : "ReturnStatement[59673-59712]:ReturnStatement[59673-59712]"
    }, {
      "left" : "q3 = (q3 << 8) | i;",
      "right" : "q3 = (q3 << 8) | i;",
      "info" : "ExpressionStatement[59731-59750]:ExpressionStatement[59731-59750]"
    }, {
      "left" : "i = input[_inputPtr++] & 0xFF;",
      "right" : "i = input[_inputPtr++] & 0xFF;",
      "info" : "ExpressionStatement[59759-59789]:ExpressionStatement[59759-59789]"
    }, {
      "left" : "if (codes[i] != 0)",
      "right" : "if (codes[i] != 0)",
      "info" : "IfStatement[59798-59992]:IfStatement[59798-59992]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[59817-59992]:Block[59817-59992]"
    }, {
      "left" : "if (i == INT_QUOTE)",
      "right" : "if (i == INT_QUOTE)",
      "info" : "IfStatement[59831-59930]:IfStatement[59831-59930]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[59851-59930]:Block[59851-59930]"
    }, {
      "left" : "return findName(_quad1, q2, q3, 2);",
      "right" : "return findName(_quad1, q2, q3, 2);",
      "info" : "ReturnStatement[59881-59916]:ReturnStatement[59881-59916]"
    }, {
      "left" : "return parseName(_quad1, q2, q3, i, 2);",
      "right" : "return parseName(_quad1, q2, q3, i, 2);",
      "info" : "ReturnStatement[59943-59982]:ReturnStatement[59943-59982]"
    }, {
      "left" : "q3 = (q3 << 8) | i;",
      "right" : "q3 = (q3 << 8) | i;",
      "info" : "ExpressionStatement[60001-60020]:ExpressionStatement[60001-60020]"
    }, {
      "left" : "i = input[_inputPtr++] & 0xFF;",
      "right" : "i = input[_inputPtr++] & 0xFF;",
      "info" : "ExpressionStatement[60029-60059]:ExpressionStatement[60029-60059]"
    }, {
      "left" : "if (codes[i] != 0)",
      "right" : "if (codes[i] != 0)",
      "info" : "IfStatement[60068-60262]:IfStatement[60068-60262]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60087-60262]:Block[60087-60262]"
    }, {
      "left" : "if (i == INT_QUOTE)",
      "right" : "if (i == INT_QUOTE)",
      "info" : "IfStatement[60101-60200]:IfStatement[60101-60200]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60121-60200]:Block[60121-60200]"
    }, {
      "left" : "return findName(_quad1, q2, q3, 3);",
      "right" : "return findName(_quad1, q2, q3, 3);",
      "info" : "ReturnStatement[60151-60186]:ReturnStatement[60151-60186]"
    }, {
      "left" : "return parseName(_quad1, q2, q3, i, 3);",
      "right" : "return parseName(_quad1, q2, q3, i, 3);",
      "info" : "ReturnStatement[60213-60252]:ReturnStatement[60213-60252]"
    }, {
      "left" : "q3 = (q3 << 8) | i;",
      "right" : "q3 = (q3 << 8) | i;",
      "info" : "ExpressionStatement[60271-60290]:ExpressionStatement[60271-60290]"
    }, {
      "left" : "i = input[_inputPtr++] & 0xFF;",
      "right" : "i = input[_inputPtr++] & 0xFF;",
      "info" : "ExpressionStatement[60299-60329]:ExpressionStatement[60299-60329]"
    }, {
      "left" : "if (codes[i] != 0)",
      "right" : "if (codes[i] != 0)",
      "info" : "IfStatement[60338-60532]:IfStatement[60338-60532]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60357-60532]:Block[60357-60532]"
    }, {
      "left" : "if (i == INT_QUOTE)",
      "right" : "if (i == INT_QUOTE)",
      "info" : "IfStatement[60371-60470]:IfStatement[60371-60470]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60391-60470]:Block[60391-60470]"
    }, {
      "left" : "return findName(_quad1, q2, q3, 4);",
      "right" : "return findName(_quad1, q2, q3, 4);",
      "info" : "ReturnStatement[60421-60456]:ReturnStatement[60421-60456]"
    }, {
      "left" : "return parseName(_quad1, q2, q3, i, 4);",
      "right" : "return parseName(_quad1, q2, q3, i, 4);",
      "info" : "ReturnStatement[60483-60522]:ReturnStatement[60483-60522]"
    }, {
      "left" : "return parseLongName(i, q2, q3);",
      "right" : "return parseLongName(i, q2, q3);",
      "info" : "ReturnStatement[60541-60573]:ReturnStatement[60541-60573]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[60589-60598]:Modifier[60589-60598]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[60599-60604]:Modifier[60599-60604]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[60605-60611]:SimpleType[60605-60611]"
    }, {
      "left" : "parseLongName",
      "right" : "parseLongName",
      "info" : "SimpleName[60612-60625]:SimpleName[60612-60625]"
    }, {
      "left" : "int q",
      "right" : "int q",
      "info" : "SingleVariableDeclaration[60626-60631]:SingleVariableDeclaration[60626-60631]"
    }, {
      "left" : "final int q2",
      "right" : "final int q2",
      "info" : "SingleVariableDeclaration[60633-60645]:SingleVariableDeclaration[60633-60645]"
    }, {
      "left" : "int q3",
      "right" : "int q3",
      "info" : "SingleVariableDeclaration[60647-60653]:SingleVariableDeclaration[60647-60653]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[60662-60673]:SimpleType[60662-60673]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60678-62712]:Block[60678-62712]"
    }, {
      "left" : "_quadBuffer[0] = _quad1;",
      "right" : "_quadBuffer[0] = _quad1;",
      "info" : "ExpressionStatement[60688-60712]:ExpressionStatement[60688-60712]"
    }, {
      "left" : "_quadBuffer[1] = q2;",
      "right" : "_quadBuffer[1] = q2;",
      "info" : "ExpressionStatement[60721-60741]:ExpressionStatement[60721-60741]"
    }, {
      "left" : "_quadBuffer[2] = q3;",
      "right" : "_quadBuffer[2] = q3;",
      "info" : "ExpressionStatement[60750-60770]:ExpressionStatement[60750-60770]"
    }, {
      "left" : "final byte[] input = _inputBuffer;",
      "right" : "final byte[] input = _inputBuffer;",
      "info" : "VariableDeclarationStatement[60852-60886]:VariableDeclarationStatement[60852-60886]"
    }, {
      "left" : "final int[] codes = _icLatin1;",
      "right" : "final int[] codes = _icLatin1;",
      "info" : "VariableDeclarationStatement[60895-60925]:VariableDeclarationStatement[60895-60925]"
    }, {
      "left" : "int qlen = 3;",
      "right" : "int qlen = 3;",
      "info" : "VariableDeclarationStatement[60934-60947]:VariableDeclarationStatement[60934-60947]"
    }, {
      "left" : "while ((_inputPtr + 4) <= _inputEnd)",
      "right" : "while ((_inputPtr + 4) <= _inputEnd)",
      "info" : "WhileStatement[60957-62455]:WhileStatement[60957-62455]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60994-62455]:Block[60994-62455]"
    }, {
      "left" : "int i = input[_inputPtr++] & 0xFF;",
      "right" : "int i = input[_inputPtr++] & 0xFF;",
      "info" : "VariableDeclarationStatement[61008-61042]:VariableDeclarationStatement[61008-61042]"
    }, {
      "left" : "if (codes[i] != 0)",
      "right" : "if (codes[i] != 0)",
      "info" : "IfStatement[61055-61276]:IfStatement[61055-61276]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61074-61276]:Block[61074-61276]"
    }, {
      "left" : "if (i == INT_QUOTE)",
      "right" : "if (i == INT_QUOTE)",
      "info" : "IfStatement[61092-61193]:IfStatement[61092-61193]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61112-61193]:Block[61112-61193]"
    }, {
      "left" : "return findName(_quadBuffer, qlen, q, 1);",
      "right" : "return findName(_quadBuffer, qlen, q, 1);",
      "info" : "ReturnStatement[61134-61175]:ReturnStatement[61134-61175]"
    }, {
      "left" : "return parseEscapedName(_quadBuffer, qlen, q, i, 1);",
      "right" : "return parseEscapedName(_quadBuffer, qlen, q, i, 1);",
      "info" : "ReturnStatement[61210-61262]:ReturnStatement[61210-61262]"
    }, {
      "left" : "q = (q << 8) | i;",
      "right" : "q = (q << 8) | i;",
      "info" : "ExpressionStatement[61290-61307]:ExpressionStatement[61290-61307]"
    }, {
      "left" : "i = input[_inputPtr++] & 0xFF;",
      "right" : "i = input[_inputPtr++] & 0xFF;",
      "info" : "ExpressionStatement[61320-61350]:ExpressionStatement[61320-61350]"
    }, {
      "left" : "if (codes[i] != 0)",
      "right" : "if (codes[i] != 0)",
      "info" : "IfStatement[61363-61584]:IfStatement[61363-61584]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61382-61584]:Block[61382-61584]"
    }, {
      "left" : "if (i == INT_QUOTE)",
      "right" : "if (i == INT_QUOTE)",
      "info" : "IfStatement[61400-61501]:IfStatement[61400-61501]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61420-61501]:Block[61420-61501]"
    }, {
      "left" : "return findName(_quadBuffer, qlen, q, 2);",
      "right" : "return findName(_quadBuffer, qlen, q, 2);",
      "info" : "ReturnStatement[61442-61483]:ReturnStatement[61442-61483]"
    }, {
      "left" : "return parseEscapedName(_quadBuffer, qlen, q, i, 2);",
      "right" : "return parseEscapedName(_quadBuffer, qlen, q, i, 2);",
      "info" : "ReturnStatement[61518-61570]:ReturnStatement[61518-61570]"
    }, {
      "left" : "q = (q << 8) | i;",
      "right" : "q = (q << 8) | i;",
      "info" : "ExpressionStatement[61598-61615]:ExpressionStatement[61598-61615]"
    }, {
      "left" : "i = input[_inputPtr++] & 0xFF;",
      "right" : "i = input[_inputPtr++] & 0xFF;",
      "info" : "ExpressionStatement[61628-61658]:ExpressionStatement[61628-61658]"
    }, {
      "left" : "if (codes[i] != 0)",
      "right" : "if (codes[i] != 0)",
      "info" : "IfStatement[61671-61892]:IfStatement[61671-61892]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61690-61892]:Block[61690-61892]"
    }, {
      "left" : "if (i == INT_QUOTE)",
      "right" : "if (i == INT_QUOTE)",
      "info" : "IfStatement[61708-61809]:IfStatement[61708-61809]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61728-61809]:Block[61728-61809]"
    }, {
      "left" : "return findName(_quadBuffer, qlen, q, 3);",
      "right" : "return findName(_quadBuffer, qlen, q, 3);",
      "info" : "ReturnStatement[61750-61791]:ReturnStatement[61750-61791]"
    }, {
      "left" : "return parseEscapedName(_quadBuffer, qlen, q, i, 3);",
      "right" : "return parseEscapedName(_quadBuffer, qlen, q, i, 3);",
      "info" : "ReturnStatement[61826-61878]:ReturnStatement[61826-61878]"
    }, {
      "left" : "q = (q << 8) | i;",
      "right" : "q = (q << 8) | i;",
      "info" : "ExpressionStatement[61906-61923]:ExpressionStatement[61906-61923]"
    }, {
      "left" : "i = input[_inputPtr++] & 0xFF;",
      "right" : "i = input[_inputPtr++] & 0xFF;",
      "info" : "ExpressionStatement[61936-61966]:ExpressionStatement[61936-61966]"
    }, {
      "left" : "if (codes[i] != 0)",
      "right" : "if (codes[i] != 0)",
      "info" : "IfStatement[61979-62200]:IfStatement[61979-62200]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61998-62200]:Block[61998-62200]"
    }, {
      "left" : "if (i == INT_QUOTE)",
      "right" : "if (i == INT_QUOTE)",
      "info" : "IfStatement[62016-62117]:IfStatement[62016-62117]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62036-62117]:Block[62036-62117]"
    }, {
      "left" : "return findName(_quadBuffer, qlen, q, 4);",
      "right" : "return findName(_quadBuffer, qlen, q, 4);",
      "info" : "ReturnStatement[62058-62099]:ReturnStatement[62058-62099]"
    }, {
      "left" : "return parseEscapedName(_quadBuffer, qlen, q, i, 4);",
      "right" : "return parseEscapedName(_quadBuffer, qlen, q, i, 4);",
      "info" : "ReturnStatement[62134-62186]:ReturnStatement[62134-62186]"
    }, {
      "left" : "if (qlen >= _quadBuffer.length)",
      "right" : "if (qlen >= _quadBuffer.length)",
      "info" : "IfStatement[62280-62389]:IfStatement[62280-62389]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62312-62389]:Block[62312-62389]"
    }, {
      "left" : "_quadBuffer = growArrayBy(_quadBuffer, qlen);",
      "right" : "_quadBuffer = growArrayBy(_quadBuffer, qlen);",
      "info" : "ExpressionStatement[62330-62375]:ExpressionStatement[62330-62375]"
    }, {
      "left" : "_quadBuffer[qlen++] = q;",
      "right" : "_quadBuffer[qlen++] = q;",
      "info" : "ExpressionStatement[62402-62426]:ExpressionStatement[62402-62426]"
    }, {
      "left" : "q = i;",
      "right" : "q = i;",
      "info" : "ExpressionStatement[62439-62445]:ExpressionStatement[62439-62445]"
    }, {
      "left" : "return parseEscapedName(_quadBuffer, qlen, 0, q, 0);",
      "right" : "return parseEscapedName(_quadBuffer, qlen, 0, q, 0);",
      "info" : "ReturnStatement[62654-62706]:ReturnStatement[62654-62706]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[62921-62930]:Modifier[62921-62930]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[62931-62937]:SimpleType[62931-62937]"
    }, {
      "left" : "slowParseName",
      "right" : "slowParseName",
      "info" : "SimpleName[62938-62951]:SimpleName[62938-62951]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[62961-62972]:SimpleType[62961-62972]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62977-63344]:Block[62977-63344]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[62987-63147]:IfStatement[62987-63147]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63015-63147]:Block[63015-63147]"
    }, {
      "left" : "if (!loadMore())",
      "right" : "if (!loadMore())",
      "info" : "IfStatement[63029-63137]:IfStatement[63029-63137]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63046-63137]:Block[63046-63137]"
    }, {
      "left" : "_reportInvalidEOF(\": was expecting closing '\\\"' for name\");",
      "right" : "_reportInvalidEOF(\": was expecting closing '\\\"' for name\");",
      "info" : "ExpressionStatement[63064-63123]:ExpressionStatement[63064-63123]"
    }, {
      "left" : "int i = _inputBuffer[_inputPtr++] & 0xFF;",
      "right" : "int i = _inputBuffer[_inputPtr++] & 0xFF;",
      "info" : "VariableDeclarationStatement[63156-63197]:VariableDeclarationStatement[63156-63197]"
    }, {
      "left" : "if (i == INT_QUOTE)",
      "right" : "if (i == INT_QUOTE)",
      "info" : "IfStatement[63206-63280]:IfStatement[63206-63280]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63226-63280]:Block[63226-63280]"
    }, {
      "left" : "return \"\";",
      "right" : "return \"\";",
      "info" : "ReturnStatement[63260-63270]:ReturnStatement[63260-63270]"
    }, {
      "left" : "return parseEscapedName(_quadBuffer, 0, 0, i, 0);",
      "right" : "return parseEscapedName(_quadBuffer, 0, 0, i, 0);",
      "info" : "ReturnStatement[63289-63338]:ReturnStatement[63289-63338]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[63350-63357]:Modifier[63350-63357]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[63358-63363]:Modifier[63358-63363]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[63364-63370]:SimpleType[63364-63370]"
    }, {
      "left" : "parseName",
      "right" : "parseName",
      "info" : "SimpleName[63371-63380]:SimpleName[63371-63380]"
    }, {
      "left" : "int q1",
      "right" : "int q1",
      "info" : "SingleVariableDeclaration[63381-63387]:SingleVariableDeclaration[63381-63387]"
    }, {
      "left" : "int ch",
      "right" : "int ch",
      "info" : "SingleVariableDeclaration[63389-63395]:SingleVariableDeclaration[63389-63395]"
    }, {
      "left" : "int lastQuadBytes",
      "right" : "int lastQuadBytes",
      "info" : "SingleVariableDeclaration[63397-63414]:SingleVariableDeclaration[63397-63414]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[63423-63434]:SimpleType[63423-63434]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63435-63514]:Block[63435-63514]"
    }, {
      "left" : "return parseEscapedName(_quadBuffer, 0, q1, ch, lastQuadBytes);",
      "right" : "return parseEscapedName(_quadBuffer, 0, q1, ch, lastQuadBytes);",
      "info" : "ReturnStatement[63445-63508]:ReturnStatement[63445-63508]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[63520-63527]:Modifier[63520-63527]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[63528-63533]:Modifier[63528-63533]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[63534-63540]:SimpleType[63534-63540]"
    }, {
      "left" : "parseName",
      "right" : "parseName",
      "info" : "SimpleName[63541-63550]:SimpleName[63541-63550]"
    }, {
      "left" : "int q1",
      "right" : "int q1",
      "info" : "SingleVariableDeclaration[63551-63557]:SingleVariableDeclaration[63551-63557]"
    }, {
      "left" : "int q2",
      "right" : "int q2",
      "info" : "SingleVariableDeclaration[63559-63565]:SingleVariableDeclaration[63559-63565]"
    }, {
      "left" : "int ch",
      "right" : "int ch",
      "info" : "SingleVariableDeclaration[63567-63573]:SingleVariableDeclaration[63567-63573]"
    }, {
      "left" : "int lastQuadBytes",
      "right" : "int lastQuadBytes",
      "info" : "SingleVariableDeclaration[63575-63592]:SingleVariableDeclaration[63575-63592]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[63601-63612]:SimpleType[63601-63612]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63613-63721]:Block[63613-63721]"
    }, {
      "left" : "_quadBuffer[0] = q1;",
      "right" : "_quadBuffer[0] = q1;",
      "info" : "ExpressionStatement[63623-63643]:ExpressionStatement[63623-63643]"
    }, {
      "left" : "return parseEscapedName(_quadBuffer, 1, q2, ch, lastQuadBytes);",
      "right" : "return parseEscapedName(_quadBuffer, 1, q2, ch, lastQuadBytes);",
      "info" : "ReturnStatement[63652-63715]:ReturnStatement[63652-63715]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[63727-63734]:Modifier[63727-63734]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[63735-63740]:Modifier[63735-63740]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[63741-63747]:SimpleType[63741-63747]"
    }, {
      "left" : "parseName",
      "right" : "parseName",
      "info" : "SimpleName[63748-63757]:SimpleName[63748-63757]"
    }, {
      "left" : "int q1",
      "right" : "int q1",
      "info" : "SingleVariableDeclaration[63758-63764]:SingleVariableDeclaration[63758-63764]"
    }, {
      "left" : "int q2",
      "right" : "int q2",
      "info" : "SingleVariableDeclaration[63766-63772]:SingleVariableDeclaration[63766-63772]"
    }, {
      "left" : "int q3",
      "right" : "int q3",
      "info" : "SingleVariableDeclaration[63774-63780]:SingleVariableDeclaration[63774-63780]"
    }, {
      "left" : "int ch",
      "right" : "int ch",
      "info" : "SingleVariableDeclaration[63782-63788]:SingleVariableDeclaration[63782-63788]"
    }, {
      "left" : "int lastQuadBytes",
      "right" : "int lastQuadBytes",
      "info" : "SingleVariableDeclaration[63790-63807]:SingleVariableDeclaration[63790-63807]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[63816-63827]:SimpleType[63816-63827]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63828-63965]:Block[63828-63965]"
    }, {
      "left" : "_quadBuffer[0] = q1;",
      "right" : "_quadBuffer[0] = q1;",
      "info" : "ExpressionStatement[63838-63858]:ExpressionStatement[63838-63858]"
    }, {
      "left" : "_quadBuffer[1] = q2;",
      "right" : "_quadBuffer[1] = q2;",
      "info" : "ExpressionStatement[63867-63887]:ExpressionStatement[63867-63887]"
    }, {
      "left" : "return parseEscapedName(_quadBuffer, 2, q3, ch, lastQuadBytes);",
      "right" : "return parseEscapedName(_quadBuffer, 2, q3, ch, lastQuadBytes);",
      "info" : "ReturnStatement[63896-63959]:ReturnStatement[63896-63959]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[64294-64303]:Modifier[64294-64303]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[64304-64309]:Modifier[64304-64309]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[64310-64316]:SimpleType[64310-64316]"
    }, {
      "left" : "parseEscapedName",
      "right" : "parseEscapedName",
      "info" : "SimpleName[64317-64333]:SimpleName[64317-64333]"
    }, {
      "left" : "int[] quads",
      "right" : "int[] quads",
      "info" : "SingleVariableDeclaration[64334-64345]:SingleVariableDeclaration[64334-64345]"
    }, {
      "left" : "int qlen",
      "right" : "int qlen",
      "info" : "SingleVariableDeclaration[64347-64355]:SingleVariableDeclaration[64347-64355]"
    }, {
      "left" : "int currQuad",
      "right" : "int currQuad",
      "info" : "SingleVariableDeclaration[64357-64369]:SingleVariableDeclaration[64357-64369]"
    }, {
      "left" : "int ch",
      "right" : "int ch",
      "info" : "SingleVariableDeclaration[64371-64377]:SingleVariableDeclaration[64371-64377]"
    }, {
      "left" : "int currQuadBytes",
      "right" : "int currQuadBytes",
      "info" : "SingleVariableDeclaration[64391-64408]:SingleVariableDeclaration[64391-64408]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[64417-64428]:SimpleType[64417-64428]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64433-68223]:Block[64433-68223]"
    }, {
      "left" : "final int[] codes = _icLatin1;",
      "right" : "final int[] codes = _icLatin1;",
      "info" : "VariableDeclarationStatement[64711-64741]:VariableDeclarationStatement[64711-64741]"
    }, {
      "left" : "while (true)",
      "right" : "while (true)",
      "info" : "WhileStatement[64751-67820]:WhileStatement[64751-67820]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64764-67820]:Block[64764-67820]"
    }, {
      "left" : "if (codes[ch] != 0)",
      "right" : "if (codes[ch] != 0)",
      "info" : "IfStatement[64778-67132]:IfStatement[64778-67132]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64798-67132]:Block[64798-67132]"
    }, {
      "left" : "if (ch == INT_QUOTE)",
      "right" : "if (ch == INT_QUOTE)",
      "info" : "IfStatement[64816-64898]:IfStatement[64816-64898]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64837-64898]:Block[64837-64898]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[64874-64880]:BreakStatement[64874-64880]"
    }, {
      "left" : "if (ch != INT_BACKSLASH)",
      "right" : "if (ch != INT_BACKSLASH)",
      "info" : "IfStatement[64956-65232]:IfStatement[64956-65232]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64981-65119]:Block[64981-65119]"
    }, {
      "left" : "_throwUnquotedSpace(ch, \"name\");",
      "right" : "_throwUnquotedSpace(ch, \"name\");",
      "info" : "ExpressionStatement[65069-65101]:ExpressionStatement[65069-65101]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65125-65232]:Block[65125-65232]"
    }, {
      "left" : "ch = _decodeEscaped();",
      "right" : "ch = _decodeEscaped();",
      "info" : "ExpressionStatement[65192-65214]:ExpressionStatement[65192-65214]"
    }, {
      "left" : "if (ch > 127)",
      "right" : "if (ch > 127)",
      "info" : "IfStatement[65527-67118]:IfStatement[65527-67118]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65541-67118]:Block[65541-67118]"
    }, {
      "left" : "if (currQuadBytes >= 4)",
      "right" : "if (currQuadBytes >= 4)",
      "info" : "IfStatement[65632-65972]:IfStatement[65632-65972]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65656-65972]:Block[65656-65972]"
    }, {
      "left" : "if (qlen >= quads.length)",
      "right" : "if (qlen >= quads.length)",
      "info" : "IfStatement[65682-65819]:IfStatement[65682-65819]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65708-65819]:Block[65708-65819]"
    }, {
      "left" : "_quadBuffer = quads = growArrayBy(quads, quads.length);",
      "right" : "_quadBuffer = quads = growArrayBy(quads, quads.length);",
      "info" : "ExpressionStatement[65738-65793]:ExpressionStatement[65738-65793]"
    }, {
      "left" : "quads[qlen++] = currQuad;",
      "right" : "quads[qlen++] = currQuad;",
      "info" : "ExpressionStatement[65844-65869]:ExpressionStatement[65844-65869]"
    }, {
      "left" : "currQuad = 0;",
      "right" : "currQuad = 0;",
      "info" : "ExpressionStatement[65894-65907]:ExpressionStatement[65894-65907]"
    }, {
      "left" : "currQuadBytes = 0;",
      "right" : "currQuadBytes = 0;",
      "info" : "ExpressionStatement[65932-65950]:ExpressionStatement[65932-65950]"
    }, {
      "left" : "if (ch < 0x800)",
      "right" : "if (ch < 0x800)",
      "info" : "IfStatement[65993-66979]:IfStatement[65993-66979]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66009-66214]:Block[66009-66214]"
    }, {
      "left" : "currQuad = (currQuad << 8) | (0xc0 | (ch >> 6));",
      "right" : "currQuad = (currQuad << 8) | (0xc0 | (ch >> 6));",
      "info" : "ExpressionStatement[66045-66093]:ExpressionStatement[66045-66093]"
    }, {
      "left" : "++currQuadBytes;",
      "right" : "++currQuadBytes;",
      "info" : "ExpressionStatement[66118-66134]:ExpressionStatement[66118-66134]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66220-66979]:Block[66220-66979]"
    }, {
      "left" : "currQuad = (currQuad << 8) | (0xe0 | (ch >> 12));",
      "right" : "currQuad = (currQuad << 8) | (0xe0 | (ch >> 12));",
      "info" : "ExpressionStatement[66297-66346]:ExpressionStatement[66297-66346]"
    }, {
      "left" : "++currQuadBytes;",
      "right" : "++currQuadBytes;",
      "info" : "ExpressionStatement[66371-66387]:ExpressionStatement[66371-66387]"
    }, {
      "left" : "if (currQuadBytes >= 4)",
      "right" : "if (currQuadBytes >= 4)",
      "info" : "IfStatement[66466-66834]:IfStatement[66466-66834]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66490-66834]:Block[66490-66834]"
    }, {
      "left" : "if (qlen >= quads.length)",
      "right" : "if (qlen >= quads.length)",
      "info" : "IfStatement[66520-66665]:IfStatement[66520-66665]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66546-66665]:Block[66546-66665]"
    }, {
      "left" : "_quadBuffer = quads = growArrayBy(quads, quads.length);",
      "right" : "_quadBuffer = quads = growArrayBy(quads, quads.length);",
      "info" : "ExpressionStatement[66580-66635]:ExpressionStatement[66580-66635]"
    }, {
      "left" : "quads[qlen++] = currQuad;",
      "right" : "quads[qlen++] = currQuad;",
      "info" : "ExpressionStatement[66694-66719]:ExpressionStatement[66694-66719]"
    }, {
      "left" : "currQuad = 0;",
      "right" : "currQuad = 0;",
      "info" : "ExpressionStatement[66748-66761]:ExpressionStatement[66748-66761]"
    }, {
      "left" : "currQuadBytes = 0;",
      "right" : "currQuadBytes = 0;",
      "info" : "ExpressionStatement[66790-66808]:ExpressionStatement[66790-66808]"
    }, {
      "left" : "currQuad = (currQuad << 8) | (0x80 | ((ch >> 6) & 0x3f));",
      "right" : "currQuad = (currQuad << 8) | (0x80 | ((ch >> 6) & 0x3f));",
      "info" : "ExpressionStatement[66859-66916]:ExpressionStatement[66859-66916]"
    }, {
      "left" : "++currQuadBytes;",
      "right" : "++currQuadBytes;",
      "info" : "ExpressionStatement[66941-66957]:ExpressionStatement[66941-66957]"
    }, {
      "left" : "ch = 0x80 | (ch & 0x3f);",
      "right" : "ch = 0x80 | (ch & 0x3f);",
      "info" : "ExpressionStatement[67076-67100]:ExpressionStatement[67076-67100]"
    }, {
      "left" : "if (currQuadBytes < 4)",
      "right" : "if (currQuadBytes < 4)",
      "info" : "IfStatement[67206-67593]:IfStatement[67206-67593]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67229-67326]:Block[67229-67326]"
    }, {
      "left" : "++currQuadBytes;",
      "right" : "++currQuadBytes;",
      "info" : "ExpressionStatement[67247-67263]:ExpressionStatement[67247-67263]"
    }, {
      "left" : "currQuad = (currQuad << 8) | ch;",
      "right" : "currQuad = (currQuad << 8) | ch;",
      "info" : "ExpressionStatement[67280-67312]:ExpressionStatement[67280-67312]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67332-67593]:Block[67332-67593]"
    }, {
      "left" : "if (qlen >= quads.length)",
      "right" : "if (qlen >= quads.length)",
      "info" : "IfStatement[67350-67471]:IfStatement[67350-67471]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67376-67471]:Block[67376-67471]"
    }, {
      "left" : "_quadBuffer = quads = growArrayBy(quads, quads.length);",
      "right" : "_quadBuffer = quads = growArrayBy(quads, quads.length);",
      "info" : "ExpressionStatement[67398-67453]:ExpressionStatement[67398-67453]"
    }, {
      "left" : "quads[qlen++] = currQuad;",
      "right" : "quads[qlen++] = currQuad;",
      "info" : "ExpressionStatement[67488-67513]:ExpressionStatement[67488-67513]"
    }, {
      "left" : "currQuad = ch;",
      "right" : "currQuad = ch;",
      "info" : "ExpressionStatement[67530-67544]:ExpressionStatement[67530-67544]"
    }, {
      "left" : "currQuadBytes = 1;",
      "right" : "currQuadBytes = 1;",
      "info" : "ExpressionStatement[67561-67579]:ExpressionStatement[67561-67579]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[67606-67759]:IfStatement[67606-67759]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67634-67759]:Block[67634-67759]"
    }, {
      "left" : "if (!loadMore())",
      "right" : "if (!loadMore())",
      "info" : "IfStatement[67652-67745]:IfStatement[67652-67745]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67669-67745]:Block[67669-67745]"
    }, {
      "left" : "_reportInvalidEOF(\" in field name\");",
      "right" : "_reportInvalidEOF(\" in field name\");",
      "info" : "ExpressionStatement[67691-67727]:ExpressionStatement[67691-67727]"
    }, {
      "left" : "ch = _inputBuffer[_inputPtr++] & 0xFF;",
      "right" : "ch = _inputBuffer[_inputPtr++] & 0xFF;",
      "info" : "ExpressionStatement[67772-67810]:ExpressionStatement[67772-67810]"
    }, {
      "left" : "if (currQuadBytes > 0)",
      "right" : "if (currQuadBytes > 0)",
      "info" : "IfStatement[67830-68048]:IfStatement[67830-68048]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67853-68048]:Block[67853-68048]"
    }, {
      "left" : "if (qlen >= quads.length)",
      "right" : "if (qlen >= quads.length)",
      "info" : "IfStatement[67867-67980]:IfStatement[67867-67980]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67893-67980]:Block[67893-67980]"
    }, {
      "left" : "_quadBuffer = quads = growArrayBy(quads, quads.length);",
      "right" : "_quadBuffer = quads = growArrayBy(quads, quads.length);",
      "info" : "ExpressionStatement[67911-67966]:ExpressionStatement[67911-67966]"
    }, {
      "left" : "quads[qlen++] = pad(currQuad, currQuadBytes);",
      "right" : "quads[qlen++] = pad(currQuad, currQuadBytes);",
      "info" : "ExpressionStatement[67993-68038]:ExpressionStatement[67993-68038]"
    }, {
      "left" : "String name = _symbols.findName(quads, qlen);",
      "right" : "String name = _symbols.findName(quads, qlen);",
      "info" : "VariableDeclarationStatement[68057-68102]:VariableDeclarationStatement[68057-68102]"
    }, {
      "left" : "if (name == null)",
      "right" : "if (name == null)",
      "info" : "IfStatement[68111-68196]:IfStatement[68111-68196]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[68129-68196]:Block[68129-68196]"
    }, {
      "left" : "name = addName(quads, qlen, currQuadBytes);",
      "right" : "name = addName(quads, qlen, currQuadBytes);",
      "info" : "ExpressionStatement[68143-68186]:ExpressionStatement[68143-68186]"
    }, {
      "left" : "return name;",
      "right" : "return name;",
      "info" : "ReturnStatement[68205-68217]:ReturnStatement[68205-68217]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[68479-68488]:Modifier[68479-68488]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[68489-68495]:SimpleType[68489-68495]"
    }, {
      "left" : "_handleOddName",
      "right" : "_handleOddName",
      "info" : "SimpleName[68496-68510]:SimpleName[68496-68510]"
    }, {
      "left" : "int ch",
      "right" : "int ch",
      "info" : "SingleVariableDeclaration[68511-68517]:SingleVariableDeclaration[68511-68517]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[68526-68537]:SimpleType[68526-68537]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[68542-71017]:Block[68542-71017]"
    }, {
      "left" : "if (ch == '\\'' && isEnabled(Feature.ALLOW_SINGLE_QUOTES))",
      "right" : "if (ch == '\\'' && isEnabled(Feature.ALLOW_SINGLE_QUOTES))",
      "info" : "IfStatement[68598-68704]:IfStatement[68598-68704]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[68656-68704]:Block[68656-68704]"
    }, {
      "left" : "return _parseAposName();",
      "right" : "return _parseAposName();",
      "info" : "ReturnStatement[68670-68694]:ReturnStatement[68670-68694]"
    }, {
      "left" : "if (!isEnabled(Feature.ALLOW_UNQUOTED_FIELD_NAMES))",
      "right" : "if (!isEnabled(Feature.ALLOW_UNQUOTED_FIELD_NAMES))",
      "info" : "IfStatement[68779-68983]:IfStatement[68779-68983]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[68831-68983]:Block[68831-68983]"
    }, {
      "left" : "char c = (char) _decodeCharForError(ch);",
      "right" : "char c = (char) _decodeCharForError(ch);",
      "info" : "VariableDeclarationStatement[68845-68885]:VariableDeclarationStatement[68845-68885]"
    }, {
      "left" : "_reportUnexpectedChar(c, \"was expecting double-quote to start field name\");",
      "right" : "_reportUnexpectedChar(c, \"was expecting double-quote to start field name\");",
      "info" : "ExpressionStatement[68898-68973]:ExpressionStatement[68898-68973]"
    }, {
      "left" : "final int[] codes = CharTypes.getInputCodeUtf8JsNames();",
      "right" : "final int[] codes = CharTypes.getInputCodeUtf8JsNames();",
      "info" : "VariableDeclarationStatement[69199-69255]:VariableDeclarationStatement[69199-69255]"
    }, {
      "left" : "if (codes[ch] != 0)",
      "right" : "if (codes[ch] != 0)",
      "info" : "IfStatement[69318-69502]:IfStatement[69318-69502]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[69338-69502]:Block[69338-69502]"
    }, {
      "left" : "_reportUnexpectedChar(ch, \"was expecting either valid name character (for unquoted name) or double-quote (for quoted) to start field name\");",
      "right" : "_reportUnexpectedChar(ch, \"was expecting either valid name character (for unquoted name) or double-quote (for quoted) to start field name\");",
      "info" : "ExpressionStatement[69352-69492]:ExpressionStatement[69352-69492]"
    }, {
      "left" : "int[] quads = _quadBuffer;",
      "right" : "int[] quads = _quadBuffer;",
      "info" : "VariableDeclarationStatement[69723-69749]:VariableDeclarationStatement[69723-69749]"
    }, {
      "left" : "int qlen = 0;",
      "right" : "int qlen = 0;",
      "info" : "VariableDeclarationStatement[69758-69771]:VariableDeclarationStatement[69758-69771]"
    }, {
      "left" : "int currQuad = 0;",
      "right" : "int currQuad = 0;",
      "info" : "VariableDeclarationStatement[69780-69797]:VariableDeclarationStatement[69780-69797]"
    }, {
      "left" : "int currQuadBytes = 0;",
      "right" : "int currQuadBytes = 0;",
      "info" : "VariableDeclarationStatement[69806-69828]:VariableDeclarationStatement[69806-69828]"
    }, {
      "left" : "while (true)",
      "right" : "while (true)",
      "info" : "WhileStatement[69838-70634]:WhileStatement[69838-70634]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[69851-70634]:Block[69851-70634]"
    }, {
      "left" : "if (currQuadBytes < 4)",
      "right" : "if (currQuadBytes < 4)",
      "info" : "IfStatement[69926-70313]:IfStatement[69926-70313]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[69949-70046]:Block[69949-70046]"
    }, {
      "left" : "++currQuadBytes;",
      "right" : "++currQuadBytes;",
      "info" : "ExpressionStatement[69967-69983]:ExpressionStatement[69967-69983]"
    }, {
      "left" : "currQuad = (currQuad << 8) | ch;",
      "right" : "currQuad = (currQuad << 8) | ch;",
      "info" : "ExpressionStatement[70000-70032]:ExpressionStatement[70000-70032]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[70052-70313]:Block[70052-70313]"
    }, {
      "left" : "if (qlen >= quads.length)",
      "right" : "if (qlen >= quads.length)",
      "info" : "IfStatement[70070-70191]:IfStatement[70070-70191]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[70096-70191]:Block[70096-70191]"
    }, {
      "left" : "_quadBuffer = quads = growArrayBy(quads, quads.length);",
      "right" : "_quadBuffer = quads = growArrayBy(quads, quads.length);",
      "info" : "ExpressionStatement[70118-70173]:ExpressionStatement[70118-70173]"
    }, {
      "left" : "quads[qlen++] = currQuad;",
      "right" : "quads[qlen++] = currQuad;",
      "info" : "ExpressionStatement[70208-70233]:ExpressionStatement[70208-70233]"
    }, {
      "left" : "currQuad = ch;",
      "right" : "currQuad = ch;",
      "info" : "ExpressionStatement[70250-70264]:ExpressionStatement[70250-70264]"
    }, {
      "left" : "currQuadBytes = 1;",
      "right" : "currQuadBytes = 1;",
      "info" : "ExpressionStatement[70281-70299]:ExpressionStatement[70281-70299]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[70326-70479]:IfStatement[70326-70479]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[70354-70479]:Block[70354-70479]"
    }, {
      "left" : "if (!loadMore())",
      "right" : "if (!loadMore())",
      "info" : "IfStatement[70372-70465]:IfStatement[70372-70465]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[70389-70465]:Block[70389-70465]"
    }, {
      "left" : "_reportInvalidEOF(\" in field name\");",
      "right" : "_reportInvalidEOF(\" in field name\");",
      "info" : "ExpressionStatement[70411-70447]:ExpressionStatement[70411-70447]"
    }, {
      "left" : "ch = _inputBuffer[_inputPtr] & 0xFF;",
      "right" : "ch = _inputBuffer[_inputPtr] & 0xFF;",
      "info" : "ExpressionStatement[70492-70528]:ExpressionStatement[70492-70528]"
    }, {
      "left" : "if (codes[ch] != 0)",
      "right" : "if (codes[ch] != 0)",
      "info" : "IfStatement[70541-70599]:IfStatement[70541-70599]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[70561-70599]:Block[70561-70599]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[70579-70585]:BreakStatement[70579-70585]"
    }, {
      "left" : "++_inputPtr;",
      "right" : "++_inputPtr;",
      "info" : "ExpressionStatement[70612-70624]:ExpressionStatement[70612-70624]"
    }, {
      "left" : "if (currQuadBytes > 0)",
      "right" : "if (currQuadBytes > 0)",
      "info" : "IfStatement[70644-70842]:IfStatement[70644-70842]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[70667-70842]:Block[70667-70842]"
    }, {
      "left" : "if (qlen >= quads.length)",
      "right" : "if (qlen >= quads.length)",
      "info" : "IfStatement[70681-70794]:IfStatement[70681-70794]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[70707-70794]:Block[70707-70794]"
    }, {
      "left" : "_quadBuffer = quads = growArrayBy(quads, quads.length);",
      "right" : "_quadBuffer = quads = growArrayBy(quads, quads.length);",
      "info" : "ExpressionStatement[70725-70780]:ExpressionStatement[70725-70780]"
    }, {
      "left" : "quads[qlen++] = currQuad;",
      "right" : "quads[qlen++] = currQuad;",
      "info" : "ExpressionStatement[70807-70832]:ExpressionStatement[70807-70832]"
    }, {
      "left" : "String name = _symbols.findName(quads, qlen);",
      "right" : "String name = _symbols.findName(quads, qlen);",
      "info" : "VariableDeclarationStatement[70851-70896]:VariableDeclarationStatement[70851-70896]"
    }, {
      "left" : "if (name == null)",
      "right" : "if (name == null)",
      "info" : "IfStatement[70905-70990]:IfStatement[70905-70990]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[70923-70990]:Block[70923-70990]"
    }, {
      "left" : "name = addName(quads, qlen, currQuadBytes);",
      "right" : "name = addName(quads, qlen, currQuadBytes);",
      "info" : "ExpressionStatement[70937-70980]:ExpressionStatement[70937-70980]"
    }, {
      "left" : "return name;",
      "right" : "return name;",
      "info" : "ReturnStatement[70999-71011]:ReturnStatement[70999-71011]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[71257-71266]:Modifier[71257-71266]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[71267-71273]:SimpleType[71267-71273]"
    }, {
      "left" : "_parseAposName",
      "right" : "_parseAposName",
      "info" : "SimpleName[71274-71288]:SimpleName[71274-71288]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[71298-71309]:SimpleType[71298-71309]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[71314-75356]:Block[71314-75356]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[71324-71484]:IfStatement[71324-71484]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[71352-71484]:Block[71352-71484]"
    }, {
      "left" : "if (!loadMore())",
      "right" : "if (!loadMore())",
      "info" : "IfStatement[71366-71474]:IfStatement[71366-71474]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[71383-71474]:Block[71383-71474]"
    }, {
      "left" : "_reportInvalidEOF(\": was expecting closing '\\'' for name\");",
      "right" : "_reportInvalidEOF(\": was expecting closing '\\'' for name\");",
      "info" : "ExpressionStatement[71401-71460]:ExpressionStatement[71401-71460]"
    }, {
      "left" : "int ch = _inputBuffer[_inputPtr++] & 0xFF;",
      "right" : "int ch = _inputBuffer[_inputPtr++] & 0xFF;",
      "info" : "VariableDeclarationStatement[71493-71535]:VariableDeclarationStatement[71493-71535]"
    }, {
      "left" : "if (ch == '\\'')",
      "right" : "if (ch == '\\'')",
      "info" : "IfStatement[71544-71614]:IfStatement[71544-71614]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[71560-71614]:Block[71560-71614]"
    }, {
      "left" : "return \"\";",
      "right" : "return \"\";",
      "info" : "ReturnStatement[71594-71604]:ReturnStatement[71594-71604]"
    }, {
      "left" : "int[] quads = _quadBuffer;",
      "right" : "int[] quads = _quadBuffer;",
      "info" : "VariableDeclarationStatement[71623-71649]:VariableDeclarationStatement[71623-71649]"
    }, {
      "left" : "int qlen = 0;",
      "right" : "int qlen = 0;",
      "info" : "VariableDeclarationStatement[71658-71671]:VariableDeclarationStatement[71658-71671]"
    }, {
      "left" : "int currQuad = 0;",
      "right" : "int currQuad = 0;",
      "info" : "VariableDeclarationStatement[71680-71697]:VariableDeclarationStatement[71680-71697]"
    }, {
      "left" : "int currQuadBytes = 0;",
      "right" : "int currQuadBytes = 0;",
      "info" : "VariableDeclarationStatement[71706-71728]:VariableDeclarationStatement[71706-71728]"
    }, {
      "left" : "final int[] codes = _icLatin1;",
      "right" : "final int[] codes = _icLatin1;",
      "info" : "VariableDeclarationStatement[71802-71832]:VariableDeclarationStatement[71802-71832]"
    }, {
      "left" : "while (true)",
      "right" : "while (true)",
      "info" : "WhileStatement[71842-74953]:WhileStatement[71842-74953]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[71855-74953]:Block[71855-74953]"
    }, {
      "left" : "if (ch == '\\'')",
      "right" : "if (ch == '\\'')",
      "info" : "IfStatement[71869-71923]:IfStatement[71869-71923]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[71885-71923]:Block[71885-71923]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[71903-71909]:BreakStatement[71903-71909]"
    }, {
      "left" : "if (ch != '\"' && codes[ch] != 0)",
      "right" : "if (ch != '\"' && codes[ch] != 0)",
      "info" : "IfStatement[72002-74265]:IfStatement[72002-74265]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[72035-74265]:Block[72035-74265]"
    }, {
      "left" : "if (ch != '\\\\')",
      "right" : "if (ch != '\\\\')",
      "info" : "IfStatement[72053-72365]:IfStatement[72053-72365]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[72069-72252]:Block[72069-72252]"
    }, {
      "left" : "_throwUnquotedSpace(ch, \"name\");",
      "right" : "_throwUnquotedSpace(ch, \"name\");",
      "info" : "ExpressionStatement[72202-72234]:ExpressionStatement[72202-72234]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[72258-72365]:Block[72258-72365]"
    }, {
      "left" : "ch = _decodeEscaped();",
      "right" : "ch = _decodeEscaped();",
      "info" : "ExpressionStatement[72325-72347]:ExpressionStatement[72325-72347]"
    }, {
      "left" : "if (ch > 127)",
      "right" : "if (ch > 127)",
      "info" : "IfStatement[72660-74251]:IfStatement[72660-74251]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[72674-74251]:Block[72674-74251]"
    }, {
      "left" : "if (currQuadBytes >= 4)",
      "right" : "if (currQuadBytes >= 4)",
      "info" : "IfStatement[72765-73105]:IfStatement[72765-73105]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[72789-73105]:Block[72789-73105]"
    }, {
      "left" : "if (qlen >= quads.length)",
      "right" : "if (qlen >= quads.length)",
      "info" : "IfStatement[72815-72952]:IfStatement[72815-72952]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[72841-72952]:Block[72841-72952]"
    }, {
      "left" : "_quadBuffer = quads = growArrayBy(quads, quads.length);",
      "right" : "_quadBuffer = quads = growArrayBy(quads, quads.length);",
      "info" : "ExpressionStatement[72871-72926]:ExpressionStatement[72871-72926]"
    }, {
      "left" : "quads[qlen++] = currQuad;",
      "right" : "quads[qlen++] = currQuad;",
      "info" : "ExpressionStatement[72977-73002]:ExpressionStatement[72977-73002]"
    }, {
      "left" : "currQuad = 0;",
      "right" : "currQuad = 0;",
      "info" : "ExpressionStatement[73027-73040]:ExpressionStatement[73027-73040]"
    }, {
      "left" : "currQuadBytes = 0;",
      "right" : "currQuadBytes = 0;",
      "info" : "ExpressionStatement[73065-73083]:ExpressionStatement[73065-73083]"
    }, {
      "left" : "if (ch < 0x800)",
      "right" : "if (ch < 0x800)",
      "info" : "IfStatement[73126-74112]:IfStatement[73126-74112]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[73142-73347]:Block[73142-73347]"
    }, {
      "left" : "currQuad = (currQuad << 8) | (0xc0 | (ch >> 6));",
      "right" : "currQuad = (currQuad << 8) | (0xc0 | (ch >> 6));",
      "info" : "ExpressionStatement[73178-73226]:ExpressionStatement[73178-73226]"
    }, {
      "left" : "++currQuadBytes;",
      "right" : "++currQuadBytes;",
      "info" : "ExpressionStatement[73251-73267]:ExpressionStatement[73251-73267]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[73353-74112]:Block[73353-74112]"
    }, {
      "left" : "currQuad = (currQuad << 8) | (0xe0 | (ch >> 12));",
      "right" : "currQuad = (currQuad << 8) | (0xe0 | (ch >> 12));",
      "info" : "ExpressionStatement[73430-73479]:ExpressionStatement[73430-73479]"
    }, {
      "left" : "++currQuadBytes;",
      "right" : "++currQuadBytes;",
      "info" : "ExpressionStatement[73504-73520]:ExpressionStatement[73504-73520]"
    }, {
      "left" : "if (currQuadBytes >= 4)",
      "right" : "if (currQuadBytes >= 4)",
      "info" : "IfStatement[73599-73967]:IfStatement[73599-73967]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[73623-73967]:Block[73623-73967]"
    }, {
      "left" : "if (qlen >= quads.length)",
      "right" : "if (qlen >= quads.length)",
      "info" : "IfStatement[73653-73798]:IfStatement[73653-73798]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[73679-73798]:Block[73679-73798]"
    }, {
      "left" : "_quadBuffer = quads = growArrayBy(quads, quads.length);",
      "right" : "_quadBuffer = quads = growArrayBy(quads, quads.length);",
      "info" : "ExpressionStatement[73713-73768]:ExpressionStatement[73713-73768]"
    }, {
      "left" : "quads[qlen++] = currQuad;",
      "right" : "quads[qlen++] = currQuad;",
      "info" : "ExpressionStatement[73827-73852]:ExpressionStatement[73827-73852]"
    }, {
      "left" : "currQuad = 0;",
      "right" : "currQuad = 0;",
      "info" : "ExpressionStatement[73881-73894]:ExpressionStatement[73881-73894]"
    }, {
      "left" : "currQuadBytes = 0;",
      "right" : "currQuadBytes = 0;",
      "info" : "ExpressionStatement[73923-73941]:ExpressionStatement[73923-73941]"
    }, {
      "left" : "currQuad = (currQuad << 8) | (0x80 | ((ch >> 6) & 0x3f));",
      "right" : "currQuad = (currQuad << 8) | (0x80 | ((ch >> 6) & 0x3f));",
      "info" : "ExpressionStatement[73992-74049]:ExpressionStatement[73992-74049]"
    }, {
      "left" : "++currQuadBytes;",
      "right" : "++currQuadBytes;",
      "info" : "ExpressionStatement[74074-74090]:ExpressionStatement[74074-74090]"
    }, {
      "left" : "ch = 0x80 | (ch & 0x3f);",
      "right" : "ch = 0x80 | (ch & 0x3f);",
      "info" : "ExpressionStatement[74209-74233]:ExpressionStatement[74209-74233]"
    }, {
      "left" : "if (currQuadBytes < 4)",
      "right" : "if (currQuadBytes < 4)",
      "info" : "IfStatement[74339-74726]:IfStatement[74339-74726]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[74362-74459]:Block[74362-74459]"
    }, {
      "left" : "++currQuadBytes;",
      "right" : "++currQuadBytes;",
      "info" : "ExpressionStatement[74380-74396]:ExpressionStatement[74380-74396]"
    }, {
      "left" : "currQuad = (currQuad << 8) | ch;",
      "right" : "currQuad = (currQuad << 8) | ch;",
      "info" : "ExpressionStatement[74413-74445]:ExpressionStatement[74413-74445]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[74465-74726]:Block[74465-74726]"
    }, {
      "left" : "if (qlen >= quads.length)",
      "right" : "if (qlen >= quads.length)",
      "info" : "IfStatement[74483-74604]:IfStatement[74483-74604]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[74509-74604]:Block[74509-74604]"
    }, {
      "left" : "_quadBuffer = quads = growArrayBy(quads, quads.length);",
      "right" : "_quadBuffer = quads = growArrayBy(quads, quads.length);",
      "info" : "ExpressionStatement[74531-74586]:ExpressionStatement[74531-74586]"
    }, {
      "left" : "quads[qlen++] = currQuad;",
      "right" : "quads[qlen++] = currQuad;",
      "info" : "ExpressionStatement[74621-74646]:ExpressionStatement[74621-74646]"
    }, {
      "left" : "currQuad = ch;",
      "right" : "currQuad = ch;",
      "info" : "ExpressionStatement[74663-74677]:ExpressionStatement[74663-74677]"
    }, {
      "left" : "currQuadBytes = 1;",
      "right" : "currQuadBytes = 1;",
      "info" : "ExpressionStatement[74694-74712]:ExpressionStatement[74694-74712]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[74739-74892]:IfStatement[74739-74892]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[74767-74892]:Block[74767-74892]"
    }, {
      "left" : "if (!loadMore())",
      "right" : "if (!loadMore())",
      "info" : "IfStatement[74785-74878]:IfStatement[74785-74878]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[74802-74878]:Block[74802-74878]"
    }, {
      "left" : "_reportInvalidEOF(\" in field name\");",
      "right" : "_reportInvalidEOF(\" in field name\");",
      "info" : "ExpressionStatement[74824-74860]:ExpressionStatement[74824-74860]"
    }, {
      "left" : "ch = _inputBuffer[_inputPtr++] & 0xFF;",
      "right" : "ch = _inputBuffer[_inputPtr++] & 0xFF;",
      "info" : "ExpressionStatement[74905-74943]:ExpressionStatement[74905-74943]"
    }, {
      "left" : "if (currQuadBytes > 0)",
      "right" : "if (currQuadBytes > 0)",
      "info" : "IfStatement[74963-75181]:IfStatement[74963-75181]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[74986-75181]:Block[74986-75181]"
    }, {
      "left" : "if (qlen >= quads.length)",
      "right" : "if (qlen >= quads.length)",
      "info" : "IfStatement[75000-75113]:IfStatement[75000-75113]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[75026-75113]:Block[75026-75113]"
    }, {
      "left" : "_quadBuffer = quads = growArrayBy(quads, quads.length);",
      "right" : "_quadBuffer = quads = growArrayBy(quads, quads.length);",
      "info" : "ExpressionStatement[75044-75099]:ExpressionStatement[75044-75099]"
    }, {
      "left" : "quads[qlen++] = pad(currQuad, currQuadBytes);",
      "right" : "quads[qlen++] = pad(currQuad, currQuadBytes);",
      "info" : "ExpressionStatement[75126-75171]:ExpressionStatement[75126-75171]"
    }, {
      "left" : "String name = _symbols.findName(quads, qlen);",
      "right" : "String name = _symbols.findName(quads, qlen);",
      "info" : "VariableDeclarationStatement[75190-75235]:VariableDeclarationStatement[75190-75235]"
    }, {
      "left" : "if (name == null)",
      "right" : "if (name == null)",
      "info" : "IfStatement[75244-75329]:IfStatement[75244-75329]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[75262-75329]:Block[75262-75329]"
    }, {
      "left" : "name = addName(quads, qlen, currQuadBytes);",
      "right" : "name = addName(quads, qlen, currQuadBytes);",
      "info" : "ExpressionStatement[75276-75319]:ExpressionStatement[75276-75319]"
    }, {
      "left" : "return name;",
      "right" : "return name;",
      "info" : "ReturnStatement[75338-75350]:ReturnStatement[75338-75350]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[75554-75561]:Modifier[75554-75561]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[75562-75567]:Modifier[75562-75567]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[75568-75574]:SimpleType[75568-75574]"
    }, {
      "left" : "findName",
      "right" : "findName",
      "info" : "SimpleName[75575-75583]:SimpleName[75575-75583]"
    }, {
      "left" : "int q1",
      "right" : "int q1",
      "info" : "SingleVariableDeclaration[75584-75590]:SingleVariableDeclaration[75584-75590]"
    }, {
      "left" : "int lastQuadBytes",
      "right" : "int lastQuadBytes",
      "info" : "SingleVariableDeclaration[75592-75609]:SingleVariableDeclaration[75592-75609]"
    }, {
      "left" : "JsonParseException",
      "right" : "JsonParseException",
      "info" : "SimpleType[75618-75636]:SimpleType[75618-75636]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[75641-76011]:Block[75641-76011]"
    }, {
      "left" : "q1 = pad(q1, lastQuadBytes);",
      "right" : "q1 = pad(q1, lastQuadBytes);",
      "info" : "ExpressionStatement[75651-75679]:ExpressionStatement[75651-75679]"
    }, {
      "left" : "String name = _symbols.findName(q1);",
      "right" : "String name = _symbols.findName(q1);",
      "info" : "VariableDeclarationStatement[75761-75797]:VariableDeclarationStatement[75761-75797]"
    }, {
      "left" : "if (name != null)",
      "right" : "if (name != null)",
      "info" : "IfStatement[75806-75860]:IfStatement[75806-75860]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[75824-75860]:Block[75824-75860]"
    }, {
      "left" : "return name;",
      "right" : "return name;",
      "info" : "ReturnStatement[75838-75850]:ReturnStatement[75838-75850]"
    }, {
      "left" : "_quadBuffer[0] = q1;",
      "right" : "_quadBuffer[0] = q1;",
      "info" : "ExpressionStatement[75930-75950]:ExpressionStatement[75930-75950]"
    }, {
      "left" : "return addName(_quadBuffer, 1, lastQuadBytes);",
      "right" : "return addName(_quadBuffer, 1, lastQuadBytes);",
      "info" : "ReturnStatement[75959-76005]:ReturnStatement[75959-76005]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[76017-76024]:Modifier[76017-76024]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[76025-76030]:Modifier[76025-76030]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[76031-76037]:SimpleType[76031-76037]"
    }, {
      "left" : "findName",
      "right" : "findName",
      "info" : "SimpleName[76038-76046]:SimpleName[76038-76046]"
    }, {
      "left" : "int q1",
      "right" : "int q1",
      "info" : "SingleVariableDeclaration[76047-76053]:SingleVariableDeclaration[76047-76053]"
    }, {
      "left" : "int q2",
      "right" : "int q2",
      "info" : "SingleVariableDeclaration[76055-76061]:SingleVariableDeclaration[76055-76061]"
    }, {
      "left" : "int lastQuadBytes",
      "right" : "int lastQuadBytes",
      "info" : "SingleVariableDeclaration[76063-76080]:SingleVariableDeclaration[76063-76080]"
    }, {
      "left" : "JsonParseException",
      "right" : "JsonParseException",
      "info" : "SimpleType[76089-76107]:SimpleType[76089-76107]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[76112-76515]:Block[76112-76515]"
    }, {
      "left" : "q2 = pad(q2, lastQuadBytes);",
      "right" : "q2 = pad(q2, lastQuadBytes);",
      "info" : "ExpressionStatement[76122-76150]:ExpressionStatement[76122-76150]"
    }, {
      "left" : "String name = _symbols.findName(q1, q2);",
      "right" : "String name = _symbols.findName(q1, q2);",
      "info" : "VariableDeclarationStatement[76232-76272]:VariableDeclarationStatement[76232-76272]"
    }, {
      "left" : "if (name != null)",
      "right" : "if (name != null)",
      "info" : "IfStatement[76281-76335]:IfStatement[76281-76335]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[76299-76335]:Block[76299-76335]"
    }, {
      "left" : "return name;",
      "right" : "return name;",
      "info" : "ReturnStatement[76313-76325]:ReturnStatement[76313-76325]"
    }, {
      "left" : "_quadBuffer[0] = q1;",
      "right" : "_quadBuffer[0] = q1;",
      "info" : "ExpressionStatement[76405-76425]:ExpressionStatement[76405-76425]"
    }, {
      "left" : "_quadBuffer[1] = q2;",
      "right" : "_quadBuffer[1] = q2;",
      "info" : "ExpressionStatement[76434-76454]:ExpressionStatement[76434-76454]"
    }, {
      "left" : "return addName(_quadBuffer, 2, lastQuadBytes);",
      "right" : "return addName(_quadBuffer, 2, lastQuadBytes);",
      "info" : "ReturnStatement[76463-76509]:ReturnStatement[76463-76509]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[76521-76528]:Modifier[76521-76528]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[76529-76534]:Modifier[76529-76534]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[76535-76541]:SimpleType[76535-76541]"
    }, {
      "left" : "findName",
      "right" : "findName",
      "info" : "SimpleName[76542-76550]:SimpleName[76542-76550]"
    }, {
      "left" : "int q1",
      "right" : "int q1",
      "info" : "SingleVariableDeclaration[76551-76557]:SingleVariableDeclaration[76551-76557]"
    }, {
      "left" : "int q2",
      "right" : "int q2",
      "info" : "SingleVariableDeclaration[76559-76565]:SingleVariableDeclaration[76559-76565]"
    }, {
      "left" : "int q3",
      "right" : "int q3",
      "info" : "SingleVariableDeclaration[76567-76573]:SingleVariableDeclaration[76567-76573]"
    }, {
      "left" : "int lastQuadBytes",
      "right" : "int lastQuadBytes",
      "info" : "SingleVariableDeclaration[76575-76592]:SingleVariableDeclaration[76575-76592]"
    }, {
      "left" : "JsonParseException",
      "right" : "JsonParseException",
      "info" : "SimpleType[76601-76619]:SimpleType[76601-76619]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[76624-76957]:Block[76624-76957]"
    }, {
      "left" : "q3 = pad(q3, lastQuadBytes);",
      "right" : "q3 = pad(q3, lastQuadBytes);",
      "info" : "ExpressionStatement[76634-76662]:ExpressionStatement[76634-76662]"
    }, {
      "left" : "String name = _symbols.findName(q1, q2, q3);",
      "right" : "String name = _symbols.findName(q1, q2, q3);",
      "info" : "VariableDeclarationStatement[76671-76715]:VariableDeclarationStatement[76671-76715]"
    }, {
      "left" : "if (name != null)",
      "right" : "if (name != null)",
      "info" : "IfStatement[76724-76778]:IfStatement[76724-76778]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[76742-76778]:Block[76742-76778]"
    }, {
      "left" : "return name;",
      "right" : "return name;",
      "info" : "ReturnStatement[76756-76768]:ReturnStatement[76756-76768]"
    }, {
      "left" : "int[] quads = _quadBuffer;",
      "right" : "int[] quads = _quadBuffer;",
      "info" : "VariableDeclarationStatement[76787-76813]:VariableDeclarationStatement[76787-76813]"
    }, {
      "left" : "quads[0] = q1;",
      "right" : "quads[0] = q1;",
      "info" : "ExpressionStatement[76822-76836]:ExpressionStatement[76822-76836]"
    }, {
      "left" : "quads[1] = q2;",
      "right" : "quads[1] = q2;",
      "info" : "ExpressionStatement[76845-76859]:ExpressionStatement[76845-76859]"
    }, {
      "left" : "quads[2] = pad(q3, lastQuadBytes);",
      "right" : "quads[2] = pad(q3, lastQuadBytes);",
      "info" : "ExpressionStatement[76868-76902]:ExpressionStatement[76868-76902]"
    }, {
      "left" : "return addName(quads, 3, lastQuadBytes);",
      "right" : "return addName(quads, 3, lastQuadBytes);",
      "info" : "ReturnStatement[76911-76951]:ReturnStatement[76911-76951]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[76967-76974]:Modifier[76967-76974]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[76975-76980]:Modifier[76975-76980]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[76981-76987]:SimpleType[76981-76987]"
    }, {
      "left" : "findName",
      "right" : "findName",
      "info" : "SimpleName[76988-76996]:SimpleName[76988-76996]"
    }, {
      "left" : "int[] quads",
      "right" : "int[] quads",
      "info" : "SingleVariableDeclaration[76997-77008]:SingleVariableDeclaration[76997-77008]"
    }, {
      "left" : "int qlen",
      "right" : "int qlen",
      "info" : "SingleVariableDeclaration[77010-77018]:SingleVariableDeclaration[77010-77018]"
    }, {
      "left" : "int lastQuad",
      "right" : "int lastQuad",
      "info" : "SingleVariableDeclaration[77020-77032]:SingleVariableDeclaration[77020-77032]"
    }, {
      "left" : "int lastQuadBytes",
      "right" : "int lastQuadBytes",
      "info" : "SingleVariableDeclaration[77034-77051]:SingleVariableDeclaration[77034-77051]"
    }, {
      "left" : "JsonParseException",
      "right" : "JsonParseException",
      "info" : "SimpleType[77060-77078]:SimpleType[77060-77078]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[77083-77427]:Block[77083-77427]"
    }, {
      "left" : "if (qlen >= quads.length)",
      "right" : "if (qlen >= quads.length)",
      "info" : "IfStatement[77093-77198]:IfStatement[77093-77198]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[77119-77198]:Block[77119-77198]"
    }, {
      "left" : "_quadBuffer = quads = growArrayBy(quads, quads.length);",
      "right" : "_quadBuffer = quads = growArrayBy(quads, quads.length);",
      "info" : "ExpressionStatement[77133-77188]:ExpressionStatement[77133-77188]"
    }, {
      "left" : "quads[qlen++] = pad(lastQuad, lastQuadBytes);",
      "right" : "quads[qlen++] = pad(lastQuad, lastQuadBytes);",
      "info" : "ExpressionStatement[77207-77252]:ExpressionStatement[77207-77252]"
    }, {
      "left" : "String name = _symbols.findName(quads, qlen);",
      "right" : "String name = _symbols.findName(quads, qlen);",
      "info" : "VariableDeclarationStatement[77261-77306]:VariableDeclarationStatement[77261-77306]"
    }, {
      "left" : "if (name == null)",
      "right" : "if (name == null)",
      "info" : "IfStatement[77315-77400]:IfStatement[77315-77400]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[77333-77400]:Block[77333-77400]"
    }, {
      "left" : "return addName(quads, qlen, lastQuadBytes);",
      "right" : "return addName(quads, qlen, lastQuadBytes);",
      "info" : "ReturnStatement[77347-77390]:ReturnStatement[77347-77390]"
    }, {
      "left" : "return name;",
      "right" : "return name;",
      "info" : "ReturnStatement[77409-77421]:ReturnStatement[77409-77421]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[77691-77698]:Modifier[77691-77698]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[77699-77704]:Modifier[77699-77704]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[77705-77711]:SimpleType[77705-77711]"
    }, {
      "left" : "addName",
      "right" : "addName",
      "info" : "SimpleName[77712-77719]:SimpleName[77712-77719]"
    }, {
      "left" : "int[] quads",
      "right" : "int[] quads",
      "info" : "SingleVariableDeclaration[77720-77731]:SingleVariableDeclaration[77720-77731]"
    }, {
      "left" : "int qlen",
      "right" : "int qlen",
      "info" : "SingleVariableDeclaration[77733-77741]:SingleVariableDeclaration[77733-77741]"
    }, {
      "left" : "int lastQuadBytes",
      "right" : "int lastQuadBytes",
      "info" : "SingleVariableDeclaration[77743-77760]:SingleVariableDeclaration[77743-77760]"
    }, {
      "left" : "JsonParseException",
      "right" : "JsonParseException",
      "info" : "SimpleType[77769-77787]:SimpleType[77769-77787]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[77792-82110]:Block[77792-82110]"
    }, {
      "left" : "int byteLen = (qlen << 2) - 4 + lastQuadBytes;",
      "right" : "int byteLen = (qlen << 2) - 4 + lastQuadBytes;",
      "info" : "VariableDeclarationStatement[78072-78118]:VariableDeclarationStatement[78072-78118]"
    }, {
      "left" : "int lastQuad;",
      "right" : "int lastQuad;",
      "info" : "VariableDeclarationStatement[78417-78430]:VariableDeclarationStatement[78417-78430]"
    }, {
      "left" : "if (lastQuadBytes < 4)",
      "right" : "if (lastQuadBytes < 4)",
      "info" : "IfStatement[78440-78663]:IfStatement[78440-78663]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[78463-78620]:Block[78463-78620]"
    }, {
      "left" : "lastQuad = quads[qlen-1];",
      "right" : "lastQuad = quads[qlen-1];",
      "info" : "ExpressionStatement[78477-78502]:ExpressionStatement[78477-78502]"
    }, {
      "left" : "quads[qlen-1] = (lastQuad << ((4 - lastQuadBytes) << 3));",
      "right" : "quads[qlen-1] = (lastQuad << ((4 - lastQuadBytes) << 3));",
      "info" : "ExpressionStatement[78553-78610]:ExpressionStatement[78553-78610]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[78626-78663]:Block[78626-78663]"
    }, {
      "left" : "lastQuad = 0;",
      "right" : "lastQuad = 0;",
      "info" : "ExpressionStatement[78640-78653]:ExpressionStatement[78640-78653]"
    }, {
      "left" : "char[] cbuf = _textBuffer.emptyAndGetCurrentSegment();",
      "right" : "char[] cbuf = _textBuffer.emptyAndGetCurrentSegment();",
      "info" : "VariableDeclarationStatement[78732-78786]:VariableDeclarationStatement[78732-78786]"
    }, {
      "left" : "int cix = 0;",
      "right" : "int cix = 0;",
      "info" : "VariableDeclarationStatement[78795-78807]:VariableDeclarationStatement[78795-78807]"
    }, {
      "left" : "for (int ix = 0; ix < byteLen)",
      "right" : "for (int ix = 0; ix < byteLen)",
      "info" : "ForStatement[78817-81791]:ForStatement[78817-81791]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[78850-81791]:Block[78850-81791]"
    }, {
      "left" : "int ch = quads[ix >> 2];",
      "right" : "int ch = quads[ix >> 2];",
      "info" : "VariableDeclarationStatement[78864-78888]:VariableDeclarationStatement[78864-78888]"
    }, {
      "left" : "int byteIx = (ix & 3);",
      "right" : "int byteIx = (ix & 3);",
      "info" : "VariableDeclarationStatement[78937-78959]:VariableDeclarationStatement[78937-78959]"
    }, {
      "left" : "ch = (ch >> ((3 - byteIx) << 3)) & 0xFF;",
      "right" : "ch = (ch >> ((3 - byteIx) << 3)) & 0xFF;",
      "info" : "ExpressionStatement[78972-79012]:ExpressionStatement[78972-79012]"
    }, {
      "left" : "++ix;",
      "right" : "++ix;",
      "info" : "ExpressionStatement[79025-79030]:ExpressionStatement[79025-79030]"
    }, {
      "left" : "if (ch > 127)",
      "right" : "if (ch > 127)",
      "info" : "IfStatement[79044-81633]:IfStatement[79044-81633]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[79058-81633]:Block[79058-81633]"
    }, {
      "left" : "int needed;",
      "right" : "int needed;",
      "info" : "VariableDeclarationStatement[79090-79101]:VariableDeclarationStatement[79090-79101]"
    }, {
      "left" : "if ((ch & 0xE0) == 0xC0)",
      "right" : "if ((ch & 0xE0) == 0xC0)",
      "info" : "IfStatement[79118-79745]:IfStatement[79118-79745]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[79143-79255]:Block[79143-79255]"
    }, {
      "left" : "ch &= 0x1F;",
      "right" : "ch &= 0x1F;",
      "info" : "ExpressionStatement[79194-79205]:ExpressionStatement[79194-79205]"
    }, {
      "left" : "needed = 1;",
      "right" : "needed = 1;",
      "info" : "ExpressionStatement[79226-79237]:ExpressionStatement[79226-79237]"
    }, {
      "left" : "if ((ch & 0xF0) == 0xE0)",
      "right" : "if ((ch & 0xF0) == 0xE0)",
      "info" : "IfStatement[79261-79745]:IfStatement[79261-79745]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[79286-79398]:Block[79286-79398]"
    }, {
      "left" : "ch &= 0x0F;",
      "right" : "ch &= 0x0F;",
      "info" : "ExpressionStatement[79337-79348]:ExpressionStatement[79337-79348]"
    }, {
      "left" : "needed = 2;",
      "right" : "needed = 2;",
      "info" : "ExpressionStatement[79369-79380]:ExpressionStatement[79369-79380]"
    }, {
      "left" : "if ((ch & 0xF8) == 0xF0)",
      "right" : "if ((ch & 0xF8) == 0xF0)",
      "info" : "IfStatement[79404-79745]:IfStatement[79404-79745]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[79429-79563]:Block[79429-79563]"
    }, {
      "left" : "ch &= 0x07;",
      "right" : "ch &= 0x07;",
      "info" : "ExpressionStatement[79502-79513]:ExpressionStatement[79502-79513]"
    }, {
      "left" : "needed = 3;",
      "right" : "needed = 3;",
      "info" : "ExpressionStatement[79534-79545]:ExpressionStatement[79534-79545]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[79569-79745]:Block[79569-79745]"
    }, {
      "left" : "_reportInvalidInitial(ch);",
      "right" : "_reportInvalidInitial(ch);",
      "info" : "ExpressionStatement[79634-79660]:ExpressionStatement[79634-79660]"
    }, {
      "left" : "needed = ch = 1;",
      "right" : "needed = ch = 1;",
      "info" : "ExpressionStatement[79681-79697]:ExpressionStatement[79681-79697]"
    }, {
      "left" : "if ((ix + needed) > byteLen)",
      "right" : "if ((ix + needed) > byteLen)",
      "info" : "IfStatement[79762-79867]:IfStatement[79762-79867]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[79791-79867]:Block[79791-79867]"
    }, {
      "left" : "_reportInvalidEOF(\" in field name\");",
      "right" : "_reportInvalidEOF(\" in field name\");",
      "info" : "ExpressionStatement[79813-79849]:ExpressionStatement[79813-79849]"
    }, {
      "left" : "int ch2 = quads[ix >> 2];",
      "right" : "int ch2 = quads[ix >> 2];",
      "info" : "VariableDeclarationStatement[79955-79980]:VariableDeclarationStatement[79955-79980]"
    }, {
      "left" : "byteIx = (ix & 3);",
      "right" : "byteIx = (ix & 3);",
      "info" : "ExpressionStatement[80033-80051]:ExpressionStatement[80033-80051]"
    }, {
      "left" : "ch2 = (ch2 >> ((3 - byteIx) << 3));",
      "right" : "ch2 = (ch2 >> ((3 - byteIx) << 3));",
      "info" : "ExpressionStatement[80068-80103]:ExpressionStatement[80068-80103]"
    }, {
      "left" : "++ix;",
      "right" : "++ix;",
      "info" : "ExpressionStatement[80120-80125]:ExpressionStatement[80120-80125]"
    }, {
      "left" : "if ((ch2 & 0xC0) != 0x080)",
      "right" : "if ((ch2 & 0xC0) != 0x080)",
      "info" : "IfStatement[80159-80251]:IfStatement[80159-80251]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[80186-80251]:Block[80186-80251]"
    }, {
      "left" : "_reportInvalidOther(ch2);",
      "right" : "_reportInvalidOther(ch2);",
      "info" : "ExpressionStatement[80208-80233]:ExpressionStatement[80208-80233]"
    }, {
      "left" : "ch = (ch << 6) | (ch2 & 0x3F);",
      "right" : "ch = (ch << 6) | (ch2 & 0x3F);",
      "info" : "ExpressionStatement[80268-80298]:ExpressionStatement[80268-80298]"
    }, {
      "left" : "if (needed > 1)",
      "right" : "if (needed > 1)",
      "info" : "IfStatement[80315-81180]:IfStatement[80315-81180]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[80331-81180]:Block[80331-81180]"
    }, {
      "left" : "ch2 = quads[ix >> 2];",
      "right" : "ch2 = quads[ix >> 2];",
      "info" : "ExpressionStatement[80353-80374]:ExpressionStatement[80353-80374]"
    }, {
      "left" : "byteIx = (ix & 3);",
      "right" : "byteIx = (ix & 3);",
      "info" : "ExpressionStatement[80395-80413]:ExpressionStatement[80395-80413]"
    }, {
      "left" : "ch2 = (ch2 >> ((3 - byteIx) << 3));",
      "right" : "ch2 = (ch2 >> ((3 - byteIx) << 3));",
      "info" : "ExpressionStatement[80434-80469]:ExpressionStatement[80434-80469]"
    }, {
      "left" : "++ix;",
      "right" : "++ix;",
      "info" : "ExpressionStatement[80490-80495]:ExpressionStatement[80490-80495]"
    }, {
      "left" : "if ((ch2 & 0xC0) != 0x080)",
      "right" : "if ((ch2 & 0xC0) != 0x080)",
      "info" : "IfStatement[80537-80637]:IfStatement[80537-80637]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[80564-80637]:Block[80564-80637]"
    }, {
      "left" : "_reportInvalidOther(ch2);",
      "right" : "_reportInvalidOther(ch2);",
      "info" : "ExpressionStatement[80590-80615]:ExpressionStatement[80590-80615]"
    }, {
      "left" : "ch = (ch << 6) | (ch2 & 0x3F);",
      "right" : "ch = (ch << 6) | (ch2 & 0x3F);",
      "info" : "ExpressionStatement[80658-80688]:ExpressionStatement[80658-80688]"
    }, {
      "left" : "if (needed > 2)",
      "right" : "if (needed > 2)",
      "info" : "IfStatement[80709-81162]:IfStatement[80709-81162]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[80725-81162]:Block[80725-81162]"
    }, {
      "left" : "ch2 = quads[ix >> 2];",
      "right" : "ch2 = quads[ix >> 2];",
      "info" : "ExpressionStatement[80791-80812]:ExpressionStatement[80791-80812]"
    }, {
      "left" : "byteIx = (ix & 3);",
      "right" : "byteIx = (ix & 3);",
      "info" : "ExpressionStatement[80837-80855]:ExpressionStatement[80837-80855]"
    }, {
      "left" : "ch2 = (ch2 >> ((3 - byteIx) << 3));",
      "right" : "ch2 = (ch2 >> ((3 - byteIx) << 3));",
      "info" : "ExpressionStatement[80880-80915]:ExpressionStatement[80880-80915]"
    }, {
      "left" : "++ix;",
      "right" : "++ix;",
      "info" : "ExpressionStatement[80940-80945]:ExpressionStatement[80940-80945]"
    }, {
      "left" : "if ((ch2 & 0xC0) != 0x080)",
      "right" : "if ((ch2 & 0xC0) != 0x080)",
      "info" : "IfStatement[80970-81085]:IfStatement[80970-81085]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[80997-81085]:Block[80997-81085]"
    }, {
      "left" : "_reportInvalidOther(ch2 & 0xFF);",
      "right" : "_reportInvalidOther(ch2 & 0xFF);",
      "info" : "ExpressionStatement[81027-81059]:ExpressionStatement[81027-81059]"
    }, {
      "left" : "ch = (ch << 6) | (ch2 & 0x3F);",
      "right" : "ch = (ch << 6) | (ch2 & 0x3F);",
      "info" : "ExpressionStatement[81110-81140]:ExpressionStatement[81110-81140]"
    }, {
      "left" : "if (needed > 2)",
      "right" : "if (needed > 2)",
      "info" : "IfStatement[81197-81619]:IfStatement[81197-81619]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[81213-81619]:Block[81213-81619]"
    }, {
      "left" : "ch -= 0x10000;",
      "right" : "ch -= 0x10000;",
      "info" : "ExpressionStatement[81302-81316]:ExpressionStatement[81302-81316]"
    }, {
      "left" : "if (cix >= cbuf.length)",
      "right" : "if (cix >= cbuf.length)",
      "info" : "IfStatement[81374-81488]:IfStatement[81374-81488]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[81398-81488]:Block[81398-81488]"
    }, {
      "left" : "cbuf = _textBuffer.expandCurrentSegment();",
      "right" : "cbuf = _textBuffer.expandCurrentSegment();",
      "info" : "ExpressionStatement[81424-81466]:ExpressionStatement[81424-81466]"
    }, {
      "left" : "cbuf[cix++] = (char) (0xD800 + (ch >> 10));",
      "right" : "cbuf[cix++] = (char) (0xD800 + (ch >> 10));",
      "info" : "ExpressionStatement[81509-81552]:ExpressionStatement[81509-81552]"
    }, {
      "left" : "ch = 0xDC00 | (ch & 0x03FF);",
      "right" : "ch = 0xDC00 | (ch & 0x03FF);",
      "info" : "ExpressionStatement[81573-81601]:ExpressionStatement[81573-81601]"
    }, {
      "left" : "if (cix >= cbuf.length)",
      "right" : "if (cix >= cbuf.length)",
      "info" : "IfStatement[81646-81744]:IfStatement[81646-81744]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[81670-81744]:Block[81670-81744]"
    }, {
      "left" : "cbuf = _textBuffer.expandCurrentSegment();",
      "right" : "cbuf = _textBuffer.expandCurrentSegment();",
      "info" : "ExpressionStatement[81688-81730]:ExpressionStatement[81688-81730]"
    }, {
      "left" : "cbuf[cix++] = (char) ch;",
      "right" : "cbuf[cix++] = (char) ch;",
      "info" : "ExpressionStatement[81757-81781]:ExpressionStatement[81757-81781]"
    }, {
      "left" : "String baseName = new String(cbuf, 0, cix);",
      "right" : "String baseName = new String(cbuf, 0, cix);",
      "info" : "VariableDeclarationStatement[81878-81921]:VariableDeclarationStatement[81878-81921]"
    }, {
      "left" : "if (lastQuadBytes < 4)",
      "right" : "if (lastQuadBytes < 4)",
      "info" : "IfStatement[81976-82048]:IfStatement[81976-82048]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[81999-82048]:Block[81999-82048]"
    }, {
      "left" : "quads[qlen-1] = lastQuad;",
      "right" : "quads[qlen-1] = lastQuad;",
      "info" : "ExpressionStatement[82013-82038]:ExpressionStatement[82013-82038]"
    }, {
      "left" : "return _symbols.addName(baseName, quads, qlen);",
      "right" : "return _symbols.addName(baseName, quads, qlen);",
      "info" : "ReturnStatement[82057-82104]:ReturnStatement[82057-82104]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[82306-82315]:MarkerAnnotation[82306-82315]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[82320-82329]:Modifier[82320-82329]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[82330-82334]:PrimitiveType[82330-82334]"
    }, {
      "left" : "_finishString",
      "right" : "_finishString",
      "info" : "SimpleName[82335-82348]:SimpleName[82335-82348]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[82358-82369]:SimpleType[82358-82369]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[82374-83327]:Block[82374-83327]"
    }, {
      "left" : "int ptr = _inputPtr;",
      "right" : "int ptr = _inputPtr;",
      "info" : "VariableDeclarationStatement[82487-82507]:VariableDeclarationStatement[82487-82507]"
    }, {
      "left" : "if (ptr >= _inputEnd)",
      "right" : "if (ptr >= _inputEnd)",
      "info" : "IfStatement[82516-82612]:IfStatement[82516-82612]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[82538-82612]:Block[82538-82612]"
    }, {
      "left" : "loadMoreGuaranteed();",
      "right" : "loadMoreGuaranteed();",
      "info" : "ExpressionStatement[82552-82573]:ExpressionStatement[82552-82573]"
    }, {
      "left" : "ptr = _inputPtr;",
      "right" : "ptr = _inputPtr;",
      "info" : "ExpressionStatement[82586-82602]:ExpressionStatement[82586-82602]"
    }, {
      "left" : "int outPtr = 0;",
      "right" : "int outPtr = 0;",
      "info" : "VariableDeclarationStatement[82621-82636]:VariableDeclarationStatement[82621-82636]"
    }, {
      "left" : "char[] outBuf = _textBuffer.emptyAndGetCurrentSegment();",
      "right" : "char[] outBuf = _textBuffer.emptyAndGetCurrentSegment();",
      "info" : "VariableDeclarationStatement[82645-82701]:VariableDeclarationStatement[82645-82701]"
    }, {
      "left" : "final int[] codes = _icUTF8;",
      "right" : "final int[] codes = _icUTF8;",
      "info" : "VariableDeclarationStatement[82710-82738]:VariableDeclarationStatement[82710-82738]"
    }, {
      "left" : "final int max = Math.min(_inputEnd, (ptr + outBuf.length));",
      "right" : "final int max = Math.min(_inputEnd, (ptr + outBuf.length));",
      "info" : "VariableDeclarationStatement[82748-82807]:VariableDeclarationStatement[82748-82807]"
    }, {
      "left" : "final byte[] inputBuffer = _inputBuffer;",
      "right" : "final byte[] inputBuffer = _inputBuffer;",
      "info" : "VariableDeclarationStatement[82816-82856]:VariableDeclarationStatement[82816-82856]"
    }, {
      "left" : "while (ptr < max)",
      "right" : "while (ptr < max)",
      "info" : "WhileStatement[82865-83256]:WhileStatement[82865-83256]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[82883-83256]:Block[82883-83256]"
    }, {
      "left" : "int c = (int) inputBuffer[ptr] & 0xFF;",
      "right" : "int c = (int) inputBuffer[ptr] & 0xFF;",
      "info" : "VariableDeclarationStatement[82897-82935]:VariableDeclarationStatement[82897-82935]"
    }, {
      "left" : "if (codes[c] != 0)",
      "right" : "if (codes[c] != 0)",
      "info" : "IfStatement[82948-83186]:IfStatement[82948-83186]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[82967-83186]:Block[82967-83186]"
    }, {
      "left" : "if (c == INT_QUOTE)",
      "right" : "if (c == INT_QUOTE)",
      "info" : "IfStatement[82985-83149]:IfStatement[82985-83149]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[83005-83149]:Block[83005-83149]"
    }, {
      "left" : "_inputPtr = ptr+1;",
      "right" : "_inputPtr = ptr+1;",
      "info" : "ExpressionStatement[83027-83045]:ExpressionStatement[83027-83045]"
    }, {
      "left" : "_textBuffer.setCurrentLength(outPtr);",
      "right" : "_textBuffer.setCurrentLength(outPtr);",
      "info" : "ExpressionStatement[83066-83103]:ExpressionStatement[83066-83103]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[83124-83131]:ReturnStatement[83124-83131]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[83166-83172]:BreakStatement[83166-83172]"
    }, {
      "left" : "++ptr;",
      "right" : "++ptr;",
      "info" : "ExpressionStatement[83199-83205]:ExpressionStatement[83199-83205]"
    }, {
      "left" : "outBuf[outPtr++] = (char) c;",
      "right" : "outBuf[outPtr++] = (char) c;",
      "info" : "ExpressionStatement[83218-83246]:ExpressionStatement[83218-83246]"
    }, {
      "left" : "_inputPtr = ptr;",
      "right" : "_inputPtr = ptr;",
      "info" : "ExpressionStatement[83265-83281]:ExpressionStatement[83265-83281]"
    }, {
      "left" : "_finishString2(outBuf, outPtr);",
      "right" : "_finishString2(outBuf, outPtr);",
      "info" : "ExpressionStatement[83290-83321]:ExpressionStatement[83290-83321]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[83367-83376]:Modifier[83367-83376]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[83377-83383]:SimpleType[83377-83383]"
    }, {
      "left" : "_finishAndReturnString",
      "right" : "_finishAndReturnString",
      "info" : "SimpleName[83384-83406]:SimpleName[83384-83406]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[83416-83427]:SimpleType[83416-83427]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[83432-84414]:Block[83432-84414]"
    }, {
      "left" : "int ptr = _inputPtr;",
      "right" : "int ptr = _inputPtr;",
      "info" : "VariableDeclarationStatement[83545-83565]:VariableDeclarationStatement[83545-83565]"
    }, {
      "left" : "if (ptr >= _inputEnd)",
      "right" : "if (ptr >= _inputEnd)",
      "info" : "IfStatement[83574-83670]:IfStatement[83574-83670]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[83596-83670]:Block[83596-83670]"
    }, {
      "left" : "loadMoreGuaranteed();",
      "right" : "loadMoreGuaranteed();",
      "info" : "ExpressionStatement[83610-83631]:ExpressionStatement[83610-83631]"
    }, {
      "left" : "ptr = _inputPtr;",
      "right" : "ptr = _inputPtr;",
      "info" : "ExpressionStatement[83644-83660]:ExpressionStatement[83644-83660]"
    }, {
      "left" : "int outPtr = 0;",
      "right" : "int outPtr = 0;",
      "info" : "VariableDeclarationStatement[83679-83694]:VariableDeclarationStatement[83679-83694]"
    }, {
      "left" : "char[] outBuf = _textBuffer.emptyAndGetCurrentSegment();",
      "right" : "char[] outBuf = _textBuffer.emptyAndGetCurrentSegment();",
      "info" : "VariableDeclarationStatement[83703-83759]:VariableDeclarationStatement[83703-83759]"
    }, {
      "left" : "final int[] codes = _icUTF8;",
      "right" : "final int[] codes = _icUTF8;",
      "info" : "VariableDeclarationStatement[83768-83796]:VariableDeclarationStatement[83768-83796]"
    }, {
      "left" : "final int max = Math.min(_inputEnd, (ptr + outBuf.length));",
      "right" : "final int max = Math.min(_inputEnd, (ptr + outBuf.length));",
      "info" : "VariableDeclarationStatement[83806-83865]:VariableDeclarationStatement[83806-83865]"
    }, {
      "left" : "final byte[] inputBuffer = _inputBuffer;",
      "right" : "final byte[] inputBuffer = _inputBuffer;",
      "info" : "VariableDeclarationStatement[83874-83914]:VariableDeclarationStatement[83874-83914]"
    }, {
      "left" : "while (ptr < max)",
      "right" : "while (ptr < max)",
      "info" : "WhileStatement[83923-84296]:WhileStatement[83923-84296]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[83941-84296]:Block[83941-84296]"
    }, {
      "left" : "int c = (int) inputBuffer[ptr] & 0xFF;",
      "right" : "int c = (int) inputBuffer[ptr] & 0xFF;",
      "info" : "VariableDeclarationStatement[83955-83993]:VariableDeclarationStatement[83955-83993]"
    }, {
      "left" : "if (codes[c] != 0)",
      "right" : "if (codes[c] != 0)",
      "info" : "IfStatement[84006-84226]:IfStatement[84006-84226]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[84025-84226]:Block[84025-84226]"
    }, {
      "left" : "if (c == INT_QUOTE)",
      "right" : "if (c == INT_QUOTE)",
      "info" : "IfStatement[84043-84189]:IfStatement[84043-84189]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[84063-84189]:Block[84063-84189]"
    }, {
      "left" : "_inputPtr = ptr+1;",
      "right" : "_inputPtr = ptr+1;",
      "info" : "ExpressionStatement[84085-84103]:ExpressionStatement[84085-84103]"
    }, {
      "left" : "return _textBuffer.setCurrentAndReturn(outPtr);",
      "right" : "return _textBuffer.setCurrentAndReturn(outPtr);",
      "info" : "ReturnStatement[84124-84171]:ReturnStatement[84124-84171]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[84206-84212]:BreakStatement[84206-84212]"
    }, {
      "left" : "++ptr;",
      "right" : "++ptr;",
      "info" : "ExpressionStatement[84239-84245]:ExpressionStatement[84239-84245]"
    }, {
      "left" : "outBuf[outPtr++] = (char) c;",
      "right" : "outBuf[outPtr++] = (char) c;",
      "info" : "ExpressionStatement[84258-84286]:ExpressionStatement[84258-84286]"
    }, {
      "left" : "_inputPtr = ptr;",
      "right" : "_inputPtr = ptr;",
      "info" : "ExpressionStatement[84305-84321]:ExpressionStatement[84305-84321]"
    }, {
      "left" : "_finishString2(outBuf, outPtr);",
      "right" : "_finishString2(outBuf, outPtr);",
      "info" : "ExpressionStatement[84330-84361]:ExpressionStatement[84330-84361]"
    }, {
      "left" : "return _textBuffer.contentsAsString();",
      "right" : "return _textBuffer.contentsAsString();",
      "info" : "ReturnStatement[84370-84408]:ReturnStatement[84370-84408]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[84424-84431]:Modifier[84424-84431]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[84432-84437]:Modifier[84432-84437]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[84438-84442]:PrimitiveType[84438-84442]"
    }, {
      "left" : "_finishString2",
      "right" : "_finishString2",
      "info" : "SimpleName[84443-84457]:SimpleName[84443-84457]"
    }, {
      "left" : "char[] outBuf",
      "right" : "char[] outBuf",
      "info" : "SingleVariableDeclaration[84458-84471]:SingleVariableDeclaration[84458-84471]"
    }, {
      "left" : "int outPtr",
      "right" : "int outPtr",
      "info" : "SingleVariableDeclaration[84473-84483]:SingleVariableDeclaration[84473-84483]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[84500-84511]:SimpleType[84500-84511]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[84516-87339]:Block[84516-87339]"
    }, {
      "left" : "int c;",
      "right" : "int c;",
      "info" : "VariableDeclarationStatement[84526-84532]:VariableDeclarationStatement[84526-84532]"
    }, {
      "left" : "final int[] codes = _icUTF8;",
      "right" : "final int[] codes = _icUTF8;",
      "info" : "VariableDeclarationStatement[84597-84625]:VariableDeclarationStatement[84597-84625]"
    }, {
      "left" : "final byte[] inputBuffer = _inputBuffer;",
      "right" : "final byte[] inputBuffer = _inputBuffer;",
      "info" : "VariableDeclarationStatement[84634-84674]:VariableDeclarationStatement[84634-84674]"
    }, {
      "left" : "main_loop:\n        while (true) {\n            // Then the tight ASCII non-funny-char loop:\n            ascii_loop:\n            while (true) {\n                int ptr = _inputPtr;\n                if (ptr >= _inputEnd) {\n                    loadMoreGuaranteed();\n                    ptr = _inputPtr;\n                }\n                if (outPtr >= outBuf.length) {\n                    outBuf = _textBuffer.finishCurrentSegment();\n                    outPtr = 0;\n                }\n                final int max = Math.min(_inputEnd, (ptr + (outBuf.length - outPtr)));\n                while (ptr < max) {\n                    c = (int) inputBuffer[ptr++] & 0xFF;\n                    if (codes[c] != 0) {\n                        _inputPtr = ptr;\n                        break ascii_loop;\n                    }\n                    outBuf[outPtr++] = (char) c;\n                }\n                _inputPtr = ptr;\n            }\n            // Ok: end marker, escape or multi-byte?\n            if (c == INT_QUOTE) {\n                break main_loop;\n            }\n\n            switch (codes[c]) {\n            case 1: // backslash\n                c = _decodeEscaped();\n                break;\n            case 2: // 2-byte UTF\n                c = _decodeUtf8_2(c);\n                break;\n            case 3: // 3-byte UTF\n                if ((_inputEnd - _inputPtr) >= 2) {\n                    c = _decodeUtf8_3fast(c);\n                } else {\n                    c = _decodeUtf8_3(c);\n                }\n                break;\n            case 4: // 4-byte UTF\n                c = _decodeUtf8_4(c);\n                // Let's add first part right away:\n                outBuf[outPtr++] = (char) (0xD800 | (c >> 10));\n                if (outPtr >= outBuf.length) {\n                    outBuf = _textBuffer.finishCurrentSegment();\n                    outPtr = 0;\n                }\n                c = 0xDC00 | (c & 0x3FF);\n                // And let the other char output down below\n                break;\n            default:\n                if (c < INT_SPACE) {\n                    // As per [JACKSON-208], call can now return:\n                    _throwUnquotedSpace(c, \"string value\");\n                } else {\n                    // Is this good enough error message?\n                    _reportInvalidChar(c);\n                }\n            }\n            // Need more room?\n            if (outPtr >= outBuf.length) {\n                outBuf = _textBuffer.finishCurrentSegment();\n                outPtr = 0;\n            }\n            // Ok, let's add char to output:\n            outBuf[outPtr++] = (char) c;\n        }",
      "right" : "main_loop:\n        while (true) {\n            // Then the tight ASCII non-funny-char loop:\n            ascii_loop:\n            while (true) {\n                int ptr = _inputPtr;\n                if (ptr >= _inputEnd) {\n                    loadMoreGuaranteed();\n                    ptr = _inputPtr;\n                }\n                if (outPtr >= outBuf.length) {\n                    outBuf = _textBuffer.finishCurrentSegment();\n                    outPtr = 0;\n                }\n                final int max = Math.min(_inputEnd, (ptr + (outBuf.length - outPtr)));\n                while (ptr < max) {\n                    c = (int) inputBuffer[ptr++] & 0xFF;\n                    if (codes[c] != 0) {\n                        _inputPtr = ptr;\n                        break ascii_loop;\n                    }\n                    outBuf[outPtr++] = (char) c;\n                }\n                _inputPtr = ptr;\n            }\n            // Ok: end marker, escape or multi-byte?\n            if (c == INT_QUOTE) {\n                break main_loop;\n            }\n\n            switch (codes[c]) {\n            case 1: // backslash\n                c = _decodeEscaped();\n                break;\n            case 2: // 2-byte UTF\n                c = _decodeUtf8_2(c);\n                break;\n            case 3: // 3-byte UTF\n                if ((_inputEnd - _inputPtr) >= 2) {\n                    c = _decodeUtf8_3fast(c);\n                } else {\n                    c = _decodeUtf8_3(c);\n                }\n                break;\n            case 4: // 4-byte UTF\n                c = _decodeUtf8_4(c);\n                // Let's add first part right away:\n                outBuf[outPtr++] = (char) (0xD800 | (c >> 10));\n                if (outPtr >= outBuf.length) {\n                    outBuf = _textBuffer.finishCurrentSegment();\n                    outPtr = 0;\n                }\n                c = 0xDC00 | (c & 0x3FF);\n                // And let the other char output down below\n                break;\n            default:\n                if (c < INT_SPACE) {\n                    // As per [JACKSON-208], call can now return:\n                    _throwUnquotedSpace(c, \"string value\");\n                } else {\n                    // Is this good enough error message?\n                    _reportInvalidChar(c);\n                }\n            }\n            // Need more room?\n            if (outPtr >= outBuf.length) {\n                outBuf = _textBuffer.finishCurrentSegment();\n                outPtr = 0;\n            }\n            // Ok, let's add char to output:\n            outBuf[outPtr++] = (char) c;\n        }",
      "info" : "LabeledStatement[84684-87287]:LabeledStatement[84684-87287]"
    }, {
      "left" : "while (true)",
      "right" : "while (true)",
      "info" : "WhileStatement[84703-87287]:WhileStatement[84703-87287]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[84716-87287]:Block[84716-87287]"
    }, {
      "left" : "ascii_loop:\n            while (true) {\n                int ptr = _inputPtr;\n                if (ptr >= _inputEnd) {\n                    loadMoreGuaranteed();\n                    ptr = _inputPtr;\n                }\n                if (outPtr >= outBuf.length) {\n                    outBuf = _textBuffer.finishCurrentSegment();\n                    outPtr = 0;\n                }\n                final int max = Math.min(_inputEnd, (ptr + (outBuf.length - outPtr)));\n                while (ptr < max) {\n                    c = (int) inputBuffer[ptr++] & 0xFF;\n                    if (codes[c] != 0) {\n                        _inputPtr = ptr;\n                        break ascii_loop;\n                    }\n                    outBuf[outPtr++] = (char) c;\n                }\n                _inputPtr = ptr;\n            }",
      "right" : "ascii_loop:\n            while (true) {\n                int ptr = _inputPtr;\n                if (ptr >= _inputEnd) {\n                    loadMoreGuaranteed();\n                    ptr = _inputPtr;\n                }\n                if (outPtr >= outBuf.length) {\n                    outBuf = _textBuffer.finishCurrentSegment();\n                    outPtr = 0;\n                }\n                final int max = Math.min(_inputEnd, (ptr + (outBuf.length - outPtr)));\n                while (ptr < max) {\n                    c = (int) inputBuffer[ptr++] & 0xFF;\n                    if (codes[c] != 0) {\n                        _inputPtr = ptr;\n                        break ascii_loop;\n                    }\n                    outBuf[outPtr++] = (char) c;\n                }\n                _inputPtr = ptr;\n            }",
      "info" : "LabeledStatement[84787-85601]:LabeledStatement[84787-85601]"
    }, {
      "left" : "while (true)",
      "right" : "while (true)",
      "info" : "WhileStatement[84811-85601]:WhileStatement[84811-85601]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[84824-85601]:Block[84824-85601]"
    }, {
      "left" : "int ptr = _inputPtr;",
      "right" : "int ptr = _inputPtr;",
      "info" : "VariableDeclarationStatement[84842-84862]:VariableDeclarationStatement[84842-84862]"
    }, {
      "left" : "if (ptr >= _inputEnd)",
      "right" : "if (ptr >= _inputEnd)",
      "info" : "IfStatement[84879-84999]:IfStatement[84879-84999]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[84901-84999]:Block[84901-84999]"
    }, {
      "left" : "loadMoreGuaranteed();",
      "right" : "loadMoreGuaranteed();",
      "info" : "ExpressionStatement[84923-84944]:ExpressionStatement[84923-84944]"
    }, {
      "left" : "ptr = _inputPtr;",
      "right" : "ptr = _inputPtr;",
      "info" : "ExpressionStatement[84965-84981]:ExpressionStatement[84965-84981]"
    }, {
      "left" : "if (outPtr >= outBuf.length)",
      "right" : "if (outPtr >= outBuf.length)",
      "info" : "IfStatement[85016-85161]:IfStatement[85016-85161]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[85045-85161]:Block[85045-85161]"
    }, {
      "left" : "outBuf = _textBuffer.finishCurrentSegment();",
      "right" : "outBuf = _textBuffer.finishCurrentSegment();",
      "info" : "ExpressionStatement[85067-85111]:ExpressionStatement[85067-85111]"
    }, {
      "left" : "outPtr = 0;",
      "right" : "outPtr = 0;",
      "info" : "ExpressionStatement[85132-85143]:ExpressionStatement[85132-85143]"
    }, {
      "left" : "final int max = Math.min(_inputEnd, (ptr + (outBuf.length - outPtr)));",
      "right" : "final int max = Math.min(_inputEnd, (ptr + (outBuf.length - outPtr)));",
      "info" : "VariableDeclarationStatement[85178-85248]:VariableDeclarationStatement[85178-85248]"
    }, {
      "left" : "while (ptr < max)",
      "right" : "while (ptr < max)",
      "info" : "WhileStatement[85265-85554]:WhileStatement[85265-85554]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[85283-85554]:Block[85283-85554]"
    }, {
      "left" : "c = (int) inputBuffer[ptr++] & 0xFF;",
      "right" : "c = (int) inputBuffer[ptr++] & 0xFF;",
      "info" : "ExpressionStatement[85305-85341]:ExpressionStatement[85305-85341]"
    }, {
      "left" : "if (codes[c] != 0)",
      "right" : "if (codes[c] != 0)",
      "info" : "IfStatement[85362-85487]:IfStatement[85362-85487]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[85381-85487]:Block[85381-85487]"
    }, {
      "left" : "_inputPtr = ptr;",
      "right" : "_inputPtr = ptr;",
      "info" : "ExpressionStatement[85407-85423]:ExpressionStatement[85407-85423]"
    }, {
      "left" : "break ascii_loop;",
      "right" : "break ascii_loop;",
      "info" : "BreakStatement[85448-85465]:BreakStatement[85448-85465]"
    }, {
      "left" : "outBuf[outPtr++] = (char) c;",
      "right" : "outBuf[outPtr++] = (char) c;",
      "info" : "ExpressionStatement[85508-85536]:ExpressionStatement[85508-85536]"
    }, {
      "left" : "_inputPtr = ptr;",
      "right" : "_inputPtr = ptr;",
      "info" : "ExpressionStatement[85571-85587]:ExpressionStatement[85571-85587]"
    }, {
      "left" : "if (c == INT_QUOTE)",
      "right" : "if (c == INT_QUOTE)",
      "info" : "IfStatement[85667-85735]:IfStatement[85667-85735]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[85687-85735]:Block[85687-85735]"
    }, {
      "left" : "break main_loop;",
      "right" : "break main_loop;",
      "info" : "BreakStatement[85705-85721]:BreakStatement[85705-85721]"
    }, {
      "left" : "switch (codes[c]) {\n            case 1: // backslash\n                c = _decodeEscaped();\n                break;\n            case 2: // 2-byte UTF\n                c = _decodeUtf8_2(c);\n                break;\n            case 3: // 3-byte UTF\n                if ((_inputEnd - _inputPtr) >= 2) {\n                    c = _decodeUtf8_3fast(c);\n                } else {\n                    c = _decodeUtf8_3(c);\n                }\n                break;\n            case 4: // 4-byte UTF\n                c = _decodeUtf8_4(c);\n                // Let's add first part right away:\n                outBuf[outPtr++] = (char) (0xD800 | (c >> 10));\n                if (outPtr >= outBuf.length) {\n                    outBuf = _textBuffer.finishCurrentSegment();\n                    outPtr = 0;\n                }\n                c = 0xDC00 | (c & 0x3FF);\n                // And let the other char output down below\n                break;\n            default:\n                if (c < INT_SPACE) {\n                    // As per [JACKSON-208], call can now return:\n                    _throwUnquotedSpace(c, \"string value\");\n                } else {\n                    // Is this good enough error message?\n                    _reportInvalidChar(c);\n                }\n            }",
      "right" : "switch (codes[c]) {\n            case 1: // backslash\n                c = _decodeEscaped();\n                break;\n            case 2: // 2-byte UTF\n                c = _decodeUtf8_2(c);\n                break;\n            case 3: // 3-byte UTF\n                if ((_inputEnd - _inputPtr) >= 2) {\n                    c = _decodeUtf8_3fast(c);\n                } else {\n                    c = _decodeUtf8_3(c);\n                }\n                break;\n            case 4: // 4-byte UTF\n                c = _decodeUtf8_4(c);\n                // Let's add first part right away:\n                outBuf[outPtr++] = (char) (0xD800 | (c >> 10));\n                if (outPtr >= outBuf.length) {\n                    outBuf = _textBuffer.finishCurrentSegment();\n                    outPtr = 0;\n                }\n                c = 0xDC00 | (c & 0x3FF);\n                // And let the other char output down below\n                break;\n            default:\n                if (c < INT_SPACE) {\n                    // As per [JACKSON-208], call can now return:\n                    _throwUnquotedSpace(c, \"string value\");\n                } else {\n                    // Is this good enough error message?\n                    _reportInvalidChar(c);\n                }\n            }",
      "info" : "SwitchStatement[85749-87014]:SwitchStatement[85749-87014]"
    }, {
      "left" : "case 1:",
      "right" : "case 1:",
      "info" : "SwitchCase[85781-85788]:SwitchCase[85781-85788]"
    }, {
      "left" : "c = _decodeEscaped();",
      "right" : "c = _decodeEscaped();",
      "info" : "ExpressionStatement[85818-85839]:ExpressionStatement[85818-85839]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[85856-85862]:BreakStatement[85856-85862]"
    }, {
      "left" : "case 2:",
      "right" : "case 2:",
      "info" : "SwitchCase[85875-85882]:SwitchCase[85875-85882]"
    }, {
      "left" : "c = _decodeUtf8_2(c);",
      "right" : "c = _decodeUtf8_2(c);",
      "info" : "ExpressionStatement[85913-85934]:ExpressionStatement[85913-85934]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[85951-85957]:BreakStatement[85951-85957]"
    }, {
      "left" : "case 3:",
      "right" : "case 3:",
      "info" : "SwitchCase[85970-85977]:SwitchCase[85970-85977]"
    }, {
      "left" : "if ((_inputEnd - _inputPtr) >= 2)",
      "right" : "if ((_inputEnd - _inputPtr) >= 2)",
      "info" : "IfStatement[86008-86174]:IfStatement[86008-86174]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[86042-86107]:Block[86042-86107]"
    }, {
      "left" : "c = _decodeUtf8_3fast(c);",
      "right" : "c = _decodeUtf8_3fast(c);",
      "info" : "ExpressionStatement[86064-86089]:ExpressionStatement[86064-86089]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[86113-86174]:Block[86113-86174]"
    }, {
      "left" : "c = _decodeUtf8_3(c);",
      "right" : "c = _decodeUtf8_3(c);",
      "info" : "ExpressionStatement[86135-86156]:ExpressionStatement[86135-86156]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[86191-86197]:BreakStatement[86191-86197]"
    }, {
      "left" : "case 4:",
      "right" : "case 4:",
      "info" : "SwitchCase[86210-86217]:SwitchCase[86210-86217]"
    }, {
      "left" : "c = _decodeUtf8_4(c);",
      "right" : "c = _decodeUtf8_4(c);",
      "info" : "ExpressionStatement[86248-86269]:ExpressionStatement[86248-86269]"
    }, {
      "left" : "outBuf[outPtr++] = (char) (0xD800 | (c >> 10));",
      "right" : "outBuf[outPtr++] = (char) (0xD800 | (c >> 10));",
      "info" : "ExpressionStatement[86338-86385]:ExpressionStatement[86338-86385]"
    }, {
      "left" : "if (outPtr >= outBuf.length)",
      "right" : "if (outPtr >= outBuf.length)",
      "info" : "IfStatement[86402-86547]:IfStatement[86402-86547]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[86431-86547]:Block[86431-86547]"
    }, {
      "left" : "outBuf = _textBuffer.finishCurrentSegment();",
      "right" : "outBuf = _textBuffer.finishCurrentSegment();",
      "info" : "ExpressionStatement[86453-86497]:ExpressionStatement[86453-86497]"
    }, {
      "left" : "outPtr = 0;",
      "right" : "outPtr = 0;",
      "info" : "ExpressionStatement[86518-86529]:ExpressionStatement[86518-86529]"
    }, {
      "left" : "c = 0xDC00 | (c & 0x3FF);",
      "right" : "c = 0xDC00 | (c & 0x3FF);",
      "info" : "ExpressionStatement[86564-86589]:ExpressionStatement[86564-86589]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[86666-86672]:BreakStatement[86666-86672]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[86685-86693]:SwitchCase[86685-86693]"
    }, {
      "left" : "if (c < INT_SPACE)",
      "right" : "if (c < INT_SPACE)",
      "info" : "IfStatement[86710-87000]:IfStatement[86710-87000]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[86729-86874]:Block[86729-86874]"
    }, {
      "left" : "_throwUnquotedSpace(c, \"string value\");",
      "right" : "_throwUnquotedSpace(c, \"string value\");",
      "info" : "ExpressionStatement[86817-86856]:ExpressionStatement[86817-86856]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[86880-87000]:Block[86880-87000]"
    }, {
      "left" : "_reportInvalidChar(c);",
      "right" : "_reportInvalidChar(c);",
      "info" : "ExpressionStatement[86960-86982]:ExpressionStatement[86960-86982]"
    }, {
      "left" : "if (outPtr >= outBuf.length)",
      "right" : "if (outPtr >= outBuf.length)",
      "info" : "IfStatement[87058-87191]:IfStatement[87058-87191]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[87087-87191]:Block[87087-87191]"
    }, {
      "left" : "outBuf = _textBuffer.finishCurrentSegment();",
      "right" : "outBuf = _textBuffer.finishCurrentSegment();",
      "info" : "ExpressionStatement[87105-87149]:ExpressionStatement[87105-87149]"
    }, {
      "left" : "outPtr = 0;",
      "right" : "outPtr = 0;",
      "info" : "ExpressionStatement[87166-87177]:ExpressionStatement[87166-87177]"
    }, {
      "left" : "outBuf[outPtr++] = (char) c;",
      "right" : "outBuf[outPtr++] = (char) c;",
      "info" : "ExpressionStatement[87249-87277]:ExpressionStatement[87249-87277]"
    }, {
      "left" : "_textBuffer.setCurrentLength(outPtr);",
      "right" : "_textBuffer.setCurrentLength(outPtr);",
      "info" : "ExpressionStatement[87296-87333]:ExpressionStatement[87296-87333]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[87542-87551]:Modifier[87542-87551]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[87552-87556]:PrimitiveType[87552-87556]"
    }, {
      "left" : "_skipString",
      "right" : "_skipString",
      "info" : "SimpleName[87557-87568]:SimpleName[87557-87568]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[87578-87589]:SimpleType[87578-87589]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[87594-89316]:Block[87594-89316]"
    }, {
      "left" : "_tokenIncomplete = false;",
      "right" : "_tokenIncomplete = false;",
      "info" : "ExpressionStatement[87604-87629]:ExpressionStatement[87604-87629]"
    }, {
      "left" : "final int[] codes = _icUTF8;",
      "right" : "final int[] codes = _icUTF8;",
      "info" : "VariableDeclarationStatement[87685-87713]:VariableDeclarationStatement[87685-87713]"
    }, {
      "left" : "final byte[] inputBuffer = _inputBuffer;",
      "right" : "final byte[] inputBuffer = _inputBuffer;",
      "info" : "VariableDeclarationStatement[87722-87762]:VariableDeclarationStatement[87722-87762]"
    }, {
      "left" : "main_loop:\n        while (true) {\n            int c;\n\n            ascii_loop:\n            while (true) {\n                int ptr = _inputPtr;\n                int max = _inputEnd;\n                if (ptr >= max) {\n                    loadMoreGuaranteed();\n                    ptr = _inputPtr;\n                    max = _inputEnd;\n                }\n                while (ptr < max) {\n                    c = (int) inputBuffer[ptr++] & 0xFF;\n                    if (codes[c] != 0) {\n                        _inputPtr = ptr;\n                        break ascii_loop;\n                    }\n                }\n                _inputPtr = ptr;\n            }\n            // Ok: end marker, escape or multi-byte?\n            if (c == INT_QUOTE) {\n                break main_loop;\n            }\n            \n            switch (codes[c]) {\n            case 1: // backslash\n                _decodeEscaped();\n                break;\n            case 2: // 2-byte UTF\n                _skipUtf8_2(c);\n                break;\n            case 3: // 3-byte UTF\n                _skipUtf8_3(c);\n                break;\n            case 4: // 4-byte UTF\n                _skipUtf8_4(c);\n                break;\n            default:\n                if (c < INT_SPACE) {\n                    // As per [JACKSON-208], call can now return:\n                    _throwUnquotedSpace(c, \"string value\");\n                } else {\n                    // Is this good enough error message?\n                    _reportInvalidChar(c);\n                }\n            }\n        }",
      "right" : "main_loop:\n        while (true) {\n            int c;\n\n            ascii_loop:\n            while (true) {\n                int ptr = _inputPtr;\n                int max = _inputEnd;\n                if (ptr >= max) {\n                    loadMoreGuaranteed();\n                    ptr = _inputPtr;\n                    max = _inputEnd;\n                }\n                while (ptr < max) {\n                    c = (int) inputBuffer[ptr++] & 0xFF;\n                    if (codes[c] != 0) {\n                        _inputPtr = ptr;\n                        break ascii_loop;\n                    }\n                }\n                _inputPtr = ptr;\n            }\n            // Ok: end marker, escape or multi-byte?\n            if (c == INT_QUOTE) {\n                break main_loop;\n            }\n            \n            switch (codes[c]) {\n            case 1: // backslash\n                _decodeEscaped();\n                break;\n            case 2: // 2-byte UTF\n                _skipUtf8_2(c);\n                break;\n            case 3: // 3-byte UTF\n                _skipUtf8_3(c);\n                break;\n            case 4: // 4-byte UTF\n                _skipUtf8_4(c);\n                break;\n            default:\n                if (c < INT_SPACE) {\n                    // As per [JACKSON-208], call can now return:\n                    _throwUnquotedSpace(c, \"string value\");\n                } else {\n                    // Is this good enough error message?\n                    _reportInvalidChar(c);\n                }\n            }\n        }",
      "info" : "LabeledStatement[87772-89310]:LabeledStatement[87772-89310]"
    }, {
      "left" : "while (true)",
      "right" : "while (true)",
      "info" : "WhileStatement[87791-89310]:WhileStatement[87791-89310]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[87804-89310]:Block[87804-89310]"
    }, {
      "left" : "int c;",
      "right" : "int c;",
      "info" : "VariableDeclarationStatement[87818-87824]:VariableDeclarationStatement[87818-87824]"
    }, {
      "left" : "ascii_loop:\n            while (true) {\n                int ptr = _inputPtr;\n                int max = _inputEnd;\n                if (ptr >= max) {\n                    loadMoreGuaranteed();\n                    ptr = _inputPtr;\n                    max = _inputEnd;\n                }\n                while (ptr < max) {\n                    c = (int) inputBuffer[ptr++] & 0xFF;\n                    if (codes[c] != 0) {\n                        _inputPtr = ptr;\n                        break ascii_loop;\n                    }\n                }\n                _inputPtr = ptr;\n            }",
      "right" : "ascii_loop:\n            while (true) {\n                int ptr = _inputPtr;\n                int max = _inputEnd;\n                if (ptr >= max) {\n                    loadMoreGuaranteed();\n                    ptr = _inputPtr;\n                    max = _inputEnd;\n                }\n                while (ptr < max) {\n                    c = (int) inputBuffer[ptr++] & 0xFF;\n                    if (codes[c] != 0) {\n                        _inputPtr = ptr;\n                        break ascii_loop;\n                    }\n                }\n                _inputPtr = ptr;\n            }",
      "info" : "LabeledStatement[87838-88422]:LabeledStatement[87838-88422]"
    }, {
      "left" : "while (true)",
      "right" : "while (true)",
      "info" : "WhileStatement[87862-88422]:WhileStatement[87862-88422]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[87875-88422]:Block[87875-88422]"
    }, {
      "left" : "int ptr = _inputPtr;",
      "right" : "int ptr = _inputPtr;",
      "info" : "VariableDeclarationStatement[87893-87913]:VariableDeclarationStatement[87893-87913]"
    }, {
      "left" : "int max = _inputEnd;",
      "right" : "int max = _inputEnd;",
      "info" : "VariableDeclarationStatement[87930-87950]:VariableDeclarationStatement[87930-87950]"
    }, {
      "left" : "if (ptr >= max)",
      "right" : "if (ptr >= max)",
      "info" : "IfStatement[87967-88118]:IfStatement[87967-88118]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[87983-88118]:Block[87983-88118]"
    }, {
      "left" : "loadMoreGuaranteed();",
      "right" : "loadMoreGuaranteed();",
      "info" : "ExpressionStatement[88005-88026]:ExpressionStatement[88005-88026]"
    }, {
      "left" : "ptr = _inputPtr;",
      "right" : "ptr = _inputPtr;",
      "info" : "ExpressionStatement[88047-88063]:ExpressionStatement[88047-88063]"
    }, {
      "left" : "max = _inputEnd;",
      "right" : "max = _inputEnd;",
      "info" : "ExpressionStatement[88084-88100]:ExpressionStatement[88084-88100]"
    }, {
      "left" : "while (ptr < max)",
      "right" : "while (ptr < max)",
      "info" : "WhileStatement[88135-88375]:WhileStatement[88135-88375]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[88153-88375]:Block[88153-88375]"
    }, {
      "left" : "c = (int) inputBuffer[ptr++] & 0xFF;",
      "right" : "c = (int) inputBuffer[ptr++] & 0xFF;",
      "info" : "ExpressionStatement[88175-88211]:ExpressionStatement[88175-88211]"
    }, {
      "left" : "if (codes[c] != 0)",
      "right" : "if (codes[c] != 0)",
      "info" : "IfStatement[88232-88357]:IfStatement[88232-88357]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[88251-88357]:Block[88251-88357]"
    }, {
      "left" : "_inputPtr = ptr;",
      "right" : "_inputPtr = ptr;",
      "info" : "ExpressionStatement[88277-88293]:ExpressionStatement[88277-88293]"
    }, {
      "left" : "break ascii_loop;",
      "right" : "break ascii_loop;",
      "info" : "BreakStatement[88318-88335]:BreakStatement[88318-88335]"
    }, {
      "left" : "_inputPtr = ptr;",
      "right" : "_inputPtr = ptr;",
      "info" : "ExpressionStatement[88392-88408]:ExpressionStatement[88392-88408]"
    }, {
      "left" : "if (c == INT_QUOTE)",
      "right" : "if (c == INT_QUOTE)",
      "info" : "IfStatement[88488-88556]:IfStatement[88488-88556]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[88508-88556]:Block[88508-88556]"
    }, {
      "left" : "break main_loop;",
      "right" : "break main_loop;",
      "info" : "BreakStatement[88526-88542]:BreakStatement[88526-88542]"
    }, {
      "left" : "switch (codes[c]) {\n            case 1: // backslash\n                _decodeEscaped();\n                break;\n            case 2: // 2-byte UTF\n                _skipUtf8_2(c);\n                break;\n            case 3: // 3-byte UTF\n                _skipUtf8_3(c);\n                break;\n            case 4: // 4-byte UTF\n                _skipUtf8_4(c);\n                break;\n            default:\n                if (c < INT_SPACE) {\n                    // As per [JACKSON-208], call can now return:\n                    _throwUnquotedSpace(c, \"string value\");\n                } else {\n                    // Is this good enough error message?\n                    _reportInvalidChar(c);\n                }\n            }",
      "right" : "switch (codes[c]) {\n            case 1: // backslash\n                _decodeEscaped();\n                break;\n            case 2: // 2-byte UTF\n                _skipUtf8_2(c);\n                break;\n            case 3: // 3-byte UTF\n                _skipUtf8_3(c);\n                break;\n            case 4: // 4-byte UTF\n                _skipUtf8_4(c);\n                break;\n            default:\n                if (c < INT_SPACE) {\n                    // As per [JACKSON-208], call can now return:\n                    _throwUnquotedSpace(c, \"string value\");\n                } else {\n                    // Is this good enough error message?\n                    _reportInvalidChar(c);\n                }\n            }",
      "info" : "SwitchStatement[88582-89300]:SwitchStatement[88582-89300]"
    }, {
      "left" : "case 1:",
      "right" : "case 1:",
      "info" : "SwitchCase[88614-88621]:SwitchCase[88614-88621]"
    }, {
      "left" : "_decodeEscaped();",
      "right" : "_decodeEscaped();",
      "info" : "ExpressionStatement[88651-88668]:ExpressionStatement[88651-88668]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[88685-88691]:BreakStatement[88685-88691]"
    }, {
      "left" : "case 2:",
      "right" : "case 2:",
      "info" : "SwitchCase[88704-88711]:SwitchCase[88704-88711]"
    }, {
      "left" : "_skipUtf8_2(c);",
      "right" : "_skipUtf8_2(c);",
      "info" : "ExpressionStatement[88742-88757]:ExpressionStatement[88742-88757]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[88774-88780]:BreakStatement[88774-88780]"
    }, {
      "left" : "case 3:",
      "right" : "case 3:",
      "info" : "SwitchCase[88793-88800]:SwitchCase[88793-88800]"
    }, {
      "left" : "_skipUtf8_3(c);",
      "right" : "_skipUtf8_3(c);",
      "info" : "ExpressionStatement[88831-88846]:ExpressionStatement[88831-88846]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[88863-88869]:BreakStatement[88863-88869]"
    }, {
      "left" : "case 4:",
      "right" : "case 4:",
      "info" : "SwitchCase[88882-88889]:SwitchCase[88882-88889]"
    }, {
      "left" : "_skipUtf8_4(c);",
      "right" : "_skipUtf8_4(c);",
      "info" : "ExpressionStatement[88920-88935]:ExpressionStatement[88920-88935]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[88952-88958]:BreakStatement[88952-88958]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[88971-88979]:SwitchCase[88971-88979]"
    }, {
      "left" : "if (c < INT_SPACE)",
      "right" : "if (c < INT_SPACE)",
      "info" : "IfStatement[88996-89286]:IfStatement[88996-89286]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[89015-89160]:Block[89015-89160]"
    }, {
      "left" : "_throwUnquotedSpace(c, \"string value\");",
      "right" : "_throwUnquotedSpace(c, \"string value\");",
      "info" : "ExpressionStatement[89103-89142]:ExpressionStatement[89103-89142]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[89166-89286]:Block[89166-89286]"
    }, {
      "left" : "_reportInvalidChar(c);",
      "right" : "_reportInvalidChar(c);",
      "info" : "ExpressionStatement[89246-89268]:ExpressionStatement[89246-89268]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[89477-89486]:Modifier[89477-89486]"
    }, {
      "left" : "JsonToken",
      "right" : "JsonToken",
      "info" : "SimpleType[89487-89496]:SimpleType[89487-89496]"
    }, {
      "left" : "_handleUnexpectedValue",
      "right" : "_handleUnexpectedValue",
      "info" : "SimpleName[89497-89519]:SimpleName[89497-89519]"
    }, {
      "left" : "int c",
      "right" : "int c",
      "info" : "SingleVariableDeclaration[89520-89525]:SingleVariableDeclaration[89520-89525]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[89542-89553]:SimpleType[89542-89553]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[89558-91368]:Block[89558-91368]"
    }, {
      "left" : "switch (c) {\n        case ']':\n        case '}':\n            // Error: neither is valid at this point; valid closers have\n            // been handled earlier\n            _reportUnexpectedChar(c, \"expected a value\");\n        case '\\'':\n            if (isEnabled(Feature.ALLOW_SINGLE_QUOTES)) {\n                return _handleApos();\n            }\n            break;\n        case 'N':\n            _matchToken(\"NaN\", 1);\n            if (isEnabled(Feature.ALLOW_NON_NUMERIC_NUMBERS)) {\n                return resetAsNaN(\"NaN\", Double.NaN);\n            }\n            _reportError(\"Non-standard token 'NaN': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow\");\n            break;\n        case 'I':\n            _matchToken(\"Infinity\", 1);\n            if (isEnabled(Feature.ALLOW_NON_NUMERIC_NUMBERS)) {\n                return resetAsNaN(\"Infinity\", Double.POSITIVE_INFINITY);\n            }\n            _reportError(\"Non-standard token 'Infinity': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow\");\n            break;\n        case '+': // note: '-' is taken as number\n            if (_inputPtr >= _inputEnd) {\n                if (!loadMore()) {\n                    _reportInvalidEOFInValue();\n                }\n            }\n            return _handleInvalidNumberStart(_inputBuffer[_inputPtr++] & 0xFF, false);\n        }",
      "right" : "switch (c) {\n        case ']':\n        case '}':\n            // Error: neither is valid at this point; valid closers have\n            // been handled earlier\n            _reportUnexpectedChar(c, \"expected a value\");\n        case '\\'':\n            if (isEnabled(Feature.ALLOW_SINGLE_QUOTES)) {\n                return _handleApos();\n            }\n            break;\n        case 'N':\n            _matchToken(\"NaN\", 1);\n            if (isEnabled(Feature.ALLOW_NON_NUMERIC_NUMBERS)) {\n                return resetAsNaN(\"NaN\", Double.NaN);\n            }\n            _reportError(\"Non-standard token 'NaN': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow\");\n            break;\n        case 'I':\n            _matchToken(\"Infinity\", 1);\n            if (isEnabled(Feature.ALLOW_NON_NUMERIC_NUMBERS)) {\n                return resetAsNaN(\"Infinity\", Double.POSITIVE_INFINITY);\n            }\n            _reportError(\"Non-standard token 'Infinity': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow\");\n            break;\n        case '+': // note: '-' is taken as number\n            if (_inputPtr >= _inputEnd) {\n                if (!loadMore()) {\n                    _reportInvalidEOFInValue();\n                }\n            }\n            return _handleInvalidNumberStart(_inputBuffer[_inputPtr++] & 0xFF, false);\n        }",
      "info" : "SwitchStatement[89645-90981]:SwitchStatement[89645-90981]"
    }, {
      "left" : "case ']':",
      "right" : "case ']':",
      "info" : "SwitchCase[89666-89675]:SwitchCase[89666-89675]"
    }, {
      "left" : "case '}':",
      "right" : "case '}':",
      "info" : "SwitchCase[89684-89693]:SwitchCase[89684-89693]"
    }, {
      "left" : "_reportUnexpectedChar(c, \"expected a value\");",
      "right" : "_reportUnexpectedChar(c, \"expected a value\");",
      "info" : "ExpressionStatement[89815-89860]:ExpressionStatement[89815-89860]"
    }, {
      "left" : "case '\\'':",
      "right" : "case '\\'':",
      "info" : "SwitchCase[89869-89879]:SwitchCase[89869-89879]"
    }, {
      "left" : "if (isEnabled(Feature.ALLOW_SINGLE_QUOTES))",
      "right" : "if (isEnabled(Feature.ALLOW_SINGLE_QUOTES))",
      "info" : "IfStatement[89892-89989]:IfStatement[89892-89989]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[89936-89989]:Block[89936-89989]"
    }, {
      "left" : "return _handleApos();",
      "right" : "return _handleApos();",
      "info" : "ReturnStatement[89954-89975]:ReturnStatement[89954-89975]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[90002-90008]:BreakStatement[90002-90008]"
    }, {
      "left" : "case 'N':",
      "right" : "case 'N':",
      "info" : "SwitchCase[90017-90026]:SwitchCase[90017-90026]"
    }, {
      "left" : "_matchToken(\"NaN\", 1);",
      "right" : "_matchToken(\"NaN\", 1);",
      "info" : "ExpressionStatement[90039-90061]:ExpressionStatement[90039-90061]"
    }, {
      "left" : "if (isEnabled(Feature.ALLOW_NON_NUMERIC_NUMBERS))",
      "right" : "if (isEnabled(Feature.ALLOW_NON_NUMERIC_NUMBERS))",
      "info" : "IfStatement[90074-90193]:IfStatement[90074-90193]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[90124-90193]:Block[90124-90193]"
    }, {
      "left" : "return resetAsNaN(\"NaN\", Double.NaN);",
      "right" : "return resetAsNaN(\"NaN\", Double.NaN);",
      "info" : "ReturnStatement[90142-90179]:ReturnStatement[90142-90179]"
    }, {
      "left" : "_reportError(\"Non-standard token 'NaN': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow\");",
      "right" : "_reportError(\"Non-standard token 'NaN': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow\");",
      "info" : "ExpressionStatement[90206-90309]:ExpressionStatement[90206-90309]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[90322-90328]:BreakStatement[90322-90328]"
    }, {
      "left" : "case 'I':",
      "right" : "case 'I':",
      "info" : "SwitchCase[90337-90346]:SwitchCase[90337-90346]"
    }, {
      "left" : "_matchToken(\"Infinity\", 1);",
      "right" : "_matchToken(\"Infinity\", 1);",
      "info" : "ExpressionStatement[90359-90386]:ExpressionStatement[90359-90386]"
    }, {
      "left" : "if (isEnabled(Feature.ALLOW_NON_NUMERIC_NUMBERS))",
      "right" : "if (isEnabled(Feature.ALLOW_NON_NUMERIC_NUMBERS))",
      "info" : "IfStatement[90399-90537]:IfStatement[90399-90537]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[90449-90537]:Block[90449-90537]"
    }, {
      "left" : "return resetAsNaN(\"Infinity\", Double.POSITIVE_INFINITY);",
      "right" : "return resetAsNaN(\"Infinity\", Double.POSITIVE_INFINITY);",
      "info" : "ReturnStatement[90467-90523]:ReturnStatement[90467-90523]"
    }, {
      "left" : "_reportError(\"Non-standard token 'Infinity': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow\");",
      "right" : "_reportError(\"Non-standard token 'Infinity': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow\");",
      "info" : "ExpressionStatement[90550-90658]:ExpressionStatement[90550-90658]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[90671-90677]:BreakStatement[90671-90677]"
    }, {
      "left" : "case '+':",
      "right" : "case '+':",
      "info" : "SwitchCase[90686-90695]:SwitchCase[90686-90695]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[90740-90884]:IfStatement[90740-90884]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[90768-90884]:Block[90768-90884]"
    }, {
      "left" : "if (!loadMore())",
      "right" : "if (!loadMore())",
      "info" : "IfStatement[90786-90870]:IfStatement[90786-90870]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[90803-90870]:Block[90803-90870]"
    }, {
      "left" : "_reportInvalidEOFInValue();",
      "right" : "_reportInvalidEOFInValue();",
      "info" : "ExpressionStatement[90825-90852]:ExpressionStatement[90825-90852]"
    }, {
      "left" : "return _handleInvalidNumberStart(_inputBuffer[_inputPtr++] & 0xFF, false);",
      "right" : "return _handleInvalidNumberStart(_inputBuffer[_inputPtr++] & 0xFF, false);",
      "info" : "ReturnStatement[90897-90971]:ReturnStatement[90897-90971]"
    }, {
      "left" : "if (Character.isJavaIdentifierStart(c))",
      "right" : "if (Character.isJavaIdentifierStart(c))",
      "info" : "IfStatement[91044-91174]:IfStatement[91044-91174]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[91084-91174]:Block[91084-91174]"
    }, {
      "left" : "_reportInvalidToken(\"\"+((char) c), \"('true', 'false' or 'null')\");",
      "right" : "_reportInvalidToken(\"\"+((char) c), \"('true', 'false' or 'null')\");",
      "info" : "ExpressionStatement[91098-91164]:ExpressionStatement[91098-91164]"
    }, {
      "left" : "_reportUnexpectedChar(c, \"expected a valid value (number, String, array, object, 'true', 'false' or 'null')\");",
      "right" : "_reportUnexpectedChar(c, \"expected a valid value (number, String, array, object, 'true', 'false' or 'null')\");",
      "info" : "ExpressionStatement[91231-91341]:ExpressionStatement[91231-91341]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[91350-91362]:ReturnStatement[91350-91362]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[91374-91383]:Modifier[91374-91383]"
    }, {
      "left" : "JsonToken",
      "right" : "JsonToken",
      "info" : "SimpleType[91384-91393]:SimpleType[91384-91393]"
    }, {
      "left" : "_handleApos",
      "right" : "_handleApos",
      "info" : "SimpleName[91394-91405]:SimpleName[91394-91405]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[91423-91434]:SimpleType[91423-91434]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[91439-94475]:Block[91439-94475]"
    }, {
      "left" : "int c = 0;",
      "right" : "int c = 0;",
      "info" : "VariableDeclarationStatement[91449-91459]:VariableDeclarationStatement[91449-91459]"
    }, {
      "left" : "int outPtr = 0;",
      "right" : "int outPtr = 0;",
      "info" : "VariableDeclarationStatement[91529-91544]:VariableDeclarationStatement[91529-91544]"
    }, {
      "left" : "char[] outBuf = _textBuffer.emptyAndGetCurrentSegment();",
      "right" : "char[] outBuf = _textBuffer.emptyAndGetCurrentSegment();",
      "info" : "VariableDeclarationStatement[91553-91609]:VariableDeclarationStatement[91553-91609]"
    }, {
      "left" : "final int[] codes = _icUTF8;",
      "right" : "final int[] codes = _icUTF8;",
      "info" : "VariableDeclarationStatement[91674-91702]:VariableDeclarationStatement[91674-91702]"
    }, {
      "left" : "final byte[] inputBuffer = _inputBuffer;",
      "right" : "final byte[] inputBuffer = _inputBuffer;",
      "info" : "VariableDeclarationStatement[91711-91751]:VariableDeclarationStatement[91711-91751]"
    }, {
      "left" : "main_loop:\n        while (true) {\n            // Then the tight ascii non-funny-char loop:\n            ascii_loop:\n            while (true) {\n                if (_inputPtr >= _inputEnd) {\n                    loadMoreGuaranteed();\n                }\n                if (outPtr >= outBuf.length) {\n                    outBuf = _textBuffer.finishCurrentSegment();\n                    outPtr = 0;\n                }\n                int max = _inputEnd;\n                {\n                    int max2 = _inputPtr + (outBuf.length - outPtr);\n                    if (max2 < max) {\n                        max = max2;\n                    }\n                }\n                while (_inputPtr < max) {\n                    c = (int) inputBuffer[_inputPtr++] & 0xFF;\n                    if (c == '\\'' || codes[c] != 0) {\n                        break ascii_loop;\n                    }\n                    outBuf[outPtr++] = (char) c;\n                }\n            }\n\n            // Ok: end marker, escape or multi-byte?\n            if (c == '\\'') {\n                break main_loop;\n            }\n\n            switch (codes[c]) {\n            case 1: // backslash\n                if (c != '\\'') { // marked as special, isn't here\n                    c = _decodeEscaped();\n                }\n                break;\n            case 2: // 2-byte UTF\n                c = _decodeUtf8_2(c);\n                break;\n            case 3: // 3-byte UTF\n                if ((_inputEnd - _inputPtr) >= 2) {\n                    c = _decodeUtf8_3fast(c);\n                } else {\n                    c = _decodeUtf8_3(c);\n                }\n                break;\n            case 4: // 4-byte UTF\n                c = _decodeUtf8_4(c);\n                // Let's add first part right away:\n                outBuf[outPtr++] = (char) (0xD800 | (c >> 10));\n                if (outPtr >= outBuf.length) {\n                    outBuf = _textBuffer.finishCurrentSegment();\n                    outPtr = 0;\n                }\n                c = 0xDC00 | (c & 0x3FF);\n                // And let the other char output down below\n                break;\n            default:\n                if (c < INT_SPACE) {\n                    _throwUnquotedSpace(c, \"string value\");\n                }\n                // Is this good enough error message?\n                _reportInvalidChar(c);\n            }\n            // Need more room?\n            if (outPtr >= outBuf.length) {\n                outBuf = _textBuffer.finishCurrentSegment();\n                outPtr = 0;\n            }\n            // Ok, let's add char to output:\n            outBuf[outPtr++] = (char) c;\n        }",
      "right" : "main_loop:\n        while (true) {\n            // Then the tight ascii non-funny-char loop:\n            ascii_loop:\n            while (true) {\n                if (_inputPtr >= _inputEnd) {\n                    loadMoreGuaranteed();\n                }\n                if (outPtr >= outBuf.length) {\n                    outBuf = _textBuffer.finishCurrentSegment();\n                    outPtr = 0;\n                }\n                int max = _inputEnd;\n                {\n                    int max2 = _inputPtr + (outBuf.length - outPtr);\n                    if (max2 < max) {\n                        max = max2;\n                    }\n                }\n                while (_inputPtr < max) {\n                    c = (int) inputBuffer[_inputPtr++] & 0xFF;\n                    if (c == '\\'' || codes[c] != 0) {\n                        break ascii_loop;\n                    }\n                    outBuf[outPtr++] = (char) c;\n                }\n            }\n\n            // Ok: end marker, escape or multi-byte?\n            if (c == '\\'') {\n                break main_loop;\n            }\n\n            switch (codes[c]) {\n            case 1: // backslash\n                if (c != '\\'') { // marked as special, isn't here\n                    c = _decodeEscaped();\n                }\n                break;\n            case 2: // 2-byte UTF\n                c = _decodeUtf8_2(c);\n                break;\n            case 3: // 3-byte UTF\n                if ((_inputEnd - _inputPtr) >= 2) {\n                    c = _decodeUtf8_3fast(c);\n                } else {\n                    c = _decodeUtf8_3(c);\n                }\n                break;\n            case 4: // 4-byte UTF\n                c = _decodeUtf8_4(c);\n                // Let's add first part right away:\n                outBuf[outPtr++] = (char) (0xD800 | (c >> 10));\n                if (outPtr >= outBuf.length) {\n                    outBuf = _textBuffer.finishCurrentSegment();\n                    outPtr = 0;\n                }\n                c = 0xDC00 | (c & 0x3FF);\n                // And let the other char output down below\n                break;\n            default:\n                if (c < INT_SPACE) {\n                    _throwUnquotedSpace(c, \"string value\");\n                }\n                // Is this good enough error message?\n                _reportInvalidChar(c);\n            }\n            // Need more room?\n            if (outPtr >= outBuf.length) {\n                outBuf = _textBuffer.finishCurrentSegment();\n                outPtr = 0;\n            }\n            // Ok, let's add char to output:\n            outBuf[outPtr++] = (char) c;\n        }",
      "info" : "LabeledStatement[91761-94383]:LabeledStatement[91761-94383]"
    }, {
      "left" : "while (true)",
      "right" : "while (true)",
      "info" : "WhileStatement[91780-94383]:WhileStatement[91780-94383]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[91793-94383]:Block[91793-94383]"
    }, {
      "left" : "ascii_loop:\n            while (true) {\n                if (_inputPtr >= _inputEnd) {\n                    loadMoreGuaranteed();\n                }\n                if (outPtr >= outBuf.length) {\n                    outBuf = _textBuffer.finishCurrentSegment();\n                    outPtr = 0;\n                }\n                int max = _inputEnd;\n                {\n                    int max2 = _inputPtr + (outBuf.length - outPtr);\n                    if (max2 < max) {\n                        max = max2;\n                    }\n                }\n                while (_inputPtr < max) {\n                    c = (int) inputBuffer[_inputPtr++] & 0xFF;\n                    if (c == '\\'' || codes[c] != 0) {\n                        break ascii_loop;\n                    }\n                    outBuf[outPtr++] = (char) c;\n                }\n            }",
      "right" : "ascii_loop:\n            while (true) {\n                if (_inputPtr >= _inputEnd) {\n                    loadMoreGuaranteed();\n                }\n                if (outPtr >= outBuf.length) {\n                    outBuf = _textBuffer.finishCurrentSegment();\n                    outPtr = 0;\n                }\n                int max = _inputEnd;\n                {\n                    int max2 = _inputPtr + (outBuf.length - outPtr);\n                    if (max2 < max) {\n                        max = max2;\n                    }\n                }\n                while (_inputPtr < max) {\n                    c = (int) inputBuffer[_inputPtr++] & 0xFF;\n                    if (c == '\\'' || codes[c] != 0) {\n                        break ascii_loop;\n                    }\n                    outBuf[outPtr++] = (char) c;\n                }\n            }",
      "info" : "LabeledStatement[91864-92712]:LabeledStatement[91864-92712]"
    }, {
      "left" : "while (true)",
      "right" : "while (true)",
      "info" : "WhileStatement[91888-92712]:WhileStatement[91888-92712]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[91901-92712]:Block[91901-92712]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[91919-92008]:IfStatement[91919-92008]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[91947-92008]:Block[91947-92008]"
    }, {
      "left" : "loadMoreGuaranteed();",
      "right" : "loadMoreGuaranteed();",
      "info" : "ExpressionStatement[91969-91990]:ExpressionStatement[91969-91990]"
    }, {
      "left" : "if (outPtr >= outBuf.length)",
      "right" : "if (outPtr >= outBuf.length)",
      "info" : "IfStatement[92025-92170]:IfStatement[92025-92170]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[92054-92170]:Block[92054-92170]"
    }, {
      "left" : "outBuf = _textBuffer.finishCurrentSegment();",
      "right" : "outBuf = _textBuffer.finishCurrentSegment();",
      "info" : "ExpressionStatement[92076-92120]:ExpressionStatement[92076-92120]"
    }, {
      "left" : "outPtr = 0;",
      "right" : "outPtr = 0;",
      "info" : "ExpressionStatement[92141-92152]:ExpressionStatement[92141-92152]"
    }, {
      "left" : "int max = _inputEnd;",
      "right" : "int max = _inputEnd;",
      "info" : "VariableDeclarationStatement[92187-92207]:VariableDeclarationStatement[92187-92207]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[92224-92408]:Block[92224-92408]"
    }, {
      "left" : "int max2 = _inputPtr + (outBuf.length - outPtr);",
      "right" : "int max2 = _inputPtr + (outBuf.length - outPtr);",
      "info" : "VariableDeclarationStatement[92246-92294]:VariableDeclarationStatement[92246-92294]"
    }, {
      "left" : "if (max2 < max)",
      "right" : "if (max2 < max)",
      "info" : "IfStatement[92315-92390]:IfStatement[92315-92390]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[92331-92390]:Block[92331-92390]"
    }, {
      "left" : "max = max2;",
      "right" : "max = max2;",
      "info" : "ExpressionStatement[92357-92368]:ExpressionStatement[92357-92368]"
    }, {
      "left" : "while (_inputPtr < max)",
      "right" : "while (_inputPtr < max)",
      "info" : "WhileStatement[92425-92698]:WhileStatement[92425-92698]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[92449-92698]:Block[92449-92698]"
    }, {
      "left" : "c = (int) inputBuffer[_inputPtr++] & 0xFF;",
      "right" : "c = (int) inputBuffer[_inputPtr++] & 0xFF;",
      "info" : "ExpressionStatement[92471-92513]:ExpressionStatement[92471-92513]"
    }, {
      "left" : "if (c == '\\'' || codes[c] != 0)",
      "right" : "if (c == '\\'' || codes[c] != 0)",
      "info" : "IfStatement[92534-92631]:IfStatement[92534-92631]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[92566-92631]:Block[92566-92631]"
    }, {
      "left" : "break ascii_loop;",
      "right" : "break ascii_loop;",
      "info" : "BreakStatement[92592-92609]:BreakStatement[92592-92609]"
    }, {
      "left" : "outBuf[outPtr++] = (char) c;",
      "right" : "outBuf[outPtr++] = (char) c;",
      "info" : "ExpressionStatement[92652-92680]:ExpressionStatement[92652-92680]"
    }, {
      "left" : "if (c == '\\'')",
      "right" : "if (c == '\\'')",
      "info" : "IfStatement[92779-92842]:IfStatement[92779-92842]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[92794-92842]:Block[92794-92842]"
    }, {
      "left" : "break main_loop;",
      "right" : "break main_loop;",
      "info" : "BreakStatement[92812-92828]:BreakStatement[92812-92828]"
    }, {
      "left" : "switch (codes[c]) {\n            case 1: // backslash\n                if (c != '\\'') { // marked as special, isn't here\n                    c = _decodeEscaped();\n                }\n                break;\n            case 2: // 2-byte UTF\n                c = _decodeUtf8_2(c);\n                break;\n            case 3: // 3-byte UTF\n                if ((_inputEnd - _inputPtr) >= 2) {\n                    c = _decodeUtf8_3fast(c);\n                } else {\n                    c = _decodeUtf8_3(c);\n                }\n                break;\n            case 4: // 4-byte UTF\n                c = _decodeUtf8_4(c);\n                // Let's add first part right away:\n                outBuf[outPtr++] = (char) (0xD800 | (c >> 10));\n                if (outPtr >= outBuf.length) {\n                    outBuf = _textBuffer.finishCurrentSegment();\n                    outPtr = 0;\n                }\n                c = 0xDC00 | (c & 0x3FF);\n                // And let the other char output down below\n                break;\n            default:\n                if (c < INT_SPACE) {\n                    _throwUnquotedSpace(c, \"string value\");\n                }\n                // Is this good enough error message?\n                _reportInvalidChar(c);\n            }",
      "right" : "switch (codes[c]) {\n            case 1: // backslash\n                if (c != '\\'') { // marked as special, isn't here\n                    c = _decodeEscaped();\n                }\n                break;\n            case 2: // 2-byte UTF\n                c = _decodeUtf8_2(c);\n                break;\n            case 3: // 3-byte UTF\n                if ((_inputEnd - _inputPtr) >= 2) {\n                    c = _decodeUtf8_3fast(c);\n                } else {\n                    c = _decodeUtf8_3(c);\n                }\n                break;\n            case 4: // 4-byte UTF\n                c = _decodeUtf8_4(c);\n                // Let's add first part right away:\n                outBuf[outPtr++] = (char) (0xD800 | (c >> 10));\n                if (outPtr >= outBuf.length) {\n                    outBuf = _textBuffer.finishCurrentSegment();\n                    outPtr = 0;\n                }\n                c = 0xDC00 | (c & 0x3FF);\n                // And let the other char output down below\n                break;\n            default:\n                if (c < INT_SPACE) {\n                    _throwUnquotedSpace(c, \"string value\");\n                }\n                // Is this good enough error message?\n                _reportInvalidChar(c);\n            }",
      "info" : "SwitchStatement[92856-94110]:SwitchStatement[92856-94110]"
    }, {
      "left" : "case 1:",
      "right" : "case 1:",
      "info" : "SwitchCase[92888-92895]:SwitchCase[92888-92895]"
    }, {
      "left" : "if (c != '\\'')",
      "right" : "if (c != '\\'')",
      "info" : "IfStatement[92925-93034]:IfStatement[92925-93034]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[92940-93034]:Block[92940-93034]"
    }, {
      "left" : "c = _decodeEscaped();",
      "right" : "c = _decodeEscaped();",
      "info" : "ExpressionStatement[92995-93016]:ExpressionStatement[92995-93016]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[93051-93057]:BreakStatement[93051-93057]"
    }, {
      "left" : "case 2:",
      "right" : "case 2:",
      "info" : "SwitchCase[93070-93077]:SwitchCase[93070-93077]"
    }, {
      "left" : "c = _decodeUtf8_2(c);",
      "right" : "c = _decodeUtf8_2(c);",
      "info" : "ExpressionStatement[93108-93129]:ExpressionStatement[93108-93129]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[93146-93152]:BreakStatement[93146-93152]"
    }, {
      "left" : "case 3:",
      "right" : "case 3:",
      "info" : "SwitchCase[93165-93172]:SwitchCase[93165-93172]"
    }, {
      "left" : "if ((_inputEnd - _inputPtr) >= 2)",
      "right" : "if ((_inputEnd - _inputPtr) >= 2)",
      "info" : "IfStatement[93203-93369]:IfStatement[93203-93369]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[93237-93302]:Block[93237-93302]"
    }, {
      "left" : "c = _decodeUtf8_3fast(c);",
      "right" : "c = _decodeUtf8_3fast(c);",
      "info" : "ExpressionStatement[93259-93284]:ExpressionStatement[93259-93284]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[93308-93369]:Block[93308-93369]"
    }, {
      "left" : "c = _decodeUtf8_3(c);",
      "right" : "c = _decodeUtf8_3(c);",
      "info" : "ExpressionStatement[93330-93351]:ExpressionStatement[93330-93351]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[93386-93392]:BreakStatement[93386-93392]"
    }, {
      "left" : "case 4:",
      "right" : "case 4:",
      "info" : "SwitchCase[93405-93412]:SwitchCase[93405-93412]"
    }, {
      "left" : "c = _decodeUtf8_4(c);",
      "right" : "c = _decodeUtf8_4(c);",
      "info" : "ExpressionStatement[93443-93464]:ExpressionStatement[93443-93464]"
    }, {
      "left" : "outBuf[outPtr++] = (char) (0xD800 | (c >> 10));",
      "right" : "outBuf[outPtr++] = (char) (0xD800 | (c >> 10));",
      "info" : "ExpressionStatement[93533-93580]:ExpressionStatement[93533-93580]"
    }, {
      "left" : "if (outPtr >= outBuf.length)",
      "right" : "if (outPtr >= outBuf.length)",
      "info" : "IfStatement[93597-93742]:IfStatement[93597-93742]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[93626-93742]:Block[93626-93742]"
    }, {
      "left" : "outBuf = _textBuffer.finishCurrentSegment();",
      "right" : "outBuf = _textBuffer.finishCurrentSegment();",
      "info" : "ExpressionStatement[93648-93692]:ExpressionStatement[93648-93692]"
    }, {
      "left" : "outPtr = 0;",
      "right" : "outPtr = 0;",
      "info" : "ExpressionStatement[93713-93724]:ExpressionStatement[93713-93724]"
    }, {
      "left" : "c = 0xDC00 | (c & 0x3FF);",
      "right" : "c = 0xDC00 | (c & 0x3FF);",
      "info" : "ExpressionStatement[93759-93784]:ExpressionStatement[93759-93784]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[93861-93867]:BreakStatement[93861-93867]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[93880-93888]:SwitchCase[93880-93888]"
    }, {
      "left" : "if (c < INT_SPACE)",
      "right" : "if (c < INT_SPACE)",
      "info" : "IfStatement[93905-94003]:IfStatement[93905-94003]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[93924-94003]:Block[93924-94003]"
    }, {
      "left" : "_throwUnquotedSpace(c, \"string value\");",
      "right" : "_throwUnquotedSpace(c, \"string value\");",
      "info" : "ExpressionStatement[93946-93985]:ExpressionStatement[93946-93985]"
    }, {
      "left" : "_reportInvalidChar(c);",
      "right" : "_reportInvalidChar(c);",
      "info" : "ExpressionStatement[94074-94096]:ExpressionStatement[94074-94096]"
    }, {
      "left" : "if (outPtr >= outBuf.length)",
      "right" : "if (outPtr >= outBuf.length)",
      "info" : "IfStatement[94154-94287]:IfStatement[94154-94287]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[94183-94287]:Block[94183-94287]"
    }, {
      "left" : "outBuf = _textBuffer.finishCurrentSegment();",
      "right" : "outBuf = _textBuffer.finishCurrentSegment();",
      "info" : "ExpressionStatement[94201-94245]:ExpressionStatement[94201-94245]"
    }, {
      "left" : "outPtr = 0;",
      "right" : "outPtr = 0;",
      "info" : "ExpressionStatement[94262-94273]:ExpressionStatement[94262-94273]"
    }, {
      "left" : "outBuf[outPtr++] = (char) c;",
      "right" : "outBuf[outPtr++] = (char) c;",
      "info" : "ExpressionStatement[94345-94373]:ExpressionStatement[94345-94373]"
    }, {
      "left" : "_textBuffer.setCurrentLength(outPtr);",
      "right" : "_textBuffer.setCurrentLength(outPtr);",
      "info" : "ExpressionStatement[94392-94429]:ExpressionStatement[94392-94429]"
    }, {
      "left" : "return JsonToken.VALUE_STRING;",
      "right" : "return JsonToken.VALUE_STRING;",
      "info" : "ReturnStatement[94439-94469]:ReturnStatement[94439-94469]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[94605-94614]:Modifier[94605-94614]"
    }, {
      "left" : "JsonToken",
      "right" : "JsonToken",
      "info" : "SimpleType[94615-94624]:SimpleType[94615-94624]"
    }, {
      "left" : "_handleInvalidNumberStart",
      "right" : "_handleInvalidNumberStart",
      "info" : "SimpleName[94625-94650]:SimpleName[94625-94650]"
    }, {
      "left" : "int ch",
      "right" : "int ch",
      "info" : "SingleVariableDeclaration[94651-94657]:SingleVariableDeclaration[94651-94657]"
    }, {
      "left" : "boolean neg",
      "right" : "boolean neg",
      "info" : "SingleVariableDeclaration[94659-94670]:SingleVariableDeclaration[94659-94670]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[94687-94698]:SimpleType[94687-94698]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[94703-95667]:Block[94703-95667]"
    }, {
      "left" : "while (ch == 'I')",
      "right" : "while (ch == 'I')",
      "info" : "WhileStatement[94713-95530]:WhileStatement[94713-95530]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[94731-95530]:Block[94731-95530]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[94745-94889]:IfStatement[94745-94889]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[94773-94889]:Block[94773-94889]"
    }, {
      "left" : "if (!loadMore())",
      "right" : "if (!loadMore())",
      "info" : "IfStatement[94791-94875]:IfStatement[94791-94875]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[94808-94875]:Block[94808-94875]"
    }, {
      "left" : "_reportInvalidEOFInValue();",
      "right" : "_reportInvalidEOFInValue();",
      "info" : "ExpressionStatement[94830-94857]:ExpressionStatement[94830-94857]"
    }, {
      "left" : "ch = _inputBuffer[_inputPtr++];",
      "right" : "ch = _inputBuffer[_inputPtr++];",
      "info" : "ExpressionStatement[94902-94933]:ExpressionStatement[94902-94933]"
    }, {
      "left" : "String match;",
      "right" : "String match;",
      "info" : "VariableDeclarationStatement[94946-94959]:VariableDeclarationStatement[94946-94959]"
    }, {
      "left" : "if (ch == 'N')",
      "right" : "if (ch == 'N')",
      "info" : "IfStatement[94972-95184]:IfStatement[94972-95184]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[94987-95048]:Block[94987-95048]"
    }, {
      "left" : "match = neg ? \"-INF\" :\"+INF\";",
      "right" : "match = neg ? \"-INF\" :\"+INF\";",
      "info" : "ExpressionStatement[95005-95034]:ExpressionStatement[95005-95034]"
    }, {
      "left" : "if (ch == 'n')",
      "right" : "if (ch == 'n')",
      "info" : "IfStatement[95054-95184]:IfStatement[95054-95184]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[95069-95140]:Block[95069-95140]"
    }, {
      "left" : "match = neg ? \"-Infinity\" :\"+Infinity\";",
      "right" : "match = neg ? \"-Infinity\" :\"+Infinity\";",
      "info" : "ExpressionStatement[95087-95126]:ExpressionStatement[95087-95126]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[95146-95184]:Block[95146-95184]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[95164-95170]:BreakStatement[95164-95170]"
    }, {
      "left" : "_matchToken(match, 3);",
      "right" : "_matchToken(match, 3);",
      "info" : "ExpressionStatement[95197-95219]:ExpressionStatement[95197-95219]"
    }, {
      "left" : "if (isEnabled(Feature.ALLOW_NON_NUMERIC_NUMBERS))",
      "right" : "if (isEnabled(Feature.ALLOW_NON_NUMERIC_NUMBERS))",
      "info" : "IfStatement[95232-95398]:IfStatement[95232-95398]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[95282-95398]:Block[95282-95398]"
    }, {
      "left" : "return resetAsNaN(match, neg ? Double.NEGATIVE_INFINITY : Double.POSITIVE_INFINITY);",
      "right" : "return resetAsNaN(match, neg ? Double.NEGATIVE_INFINITY : Double.POSITIVE_INFINITY);",
      "info" : "ReturnStatement[95300-95384]:ReturnStatement[95300-95384]"
    }, {
      "left" : "_reportError(\"Non-standard token '\"+match+\"': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow\");",
      "right" : "_reportError(\"Non-standard token '\"+match+\"': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow\");",
      "info" : "ExpressionStatement[95411-95520]:ExpressionStatement[95411-95520]"
    }, {
      "left" : "reportUnexpectedNumberChar(ch, \"expected digit (0-9) to follow minus sign, for valid numeric value\");",
      "right" : "reportUnexpectedNumberChar(ch, \"expected digit (0-9) to follow minus sign, for valid numeric value\");",
      "info" : "ExpressionStatement[95539-95640]:ExpressionStatement[95539-95640]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[95649-95661]:ReturnStatement[95649-95661]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[95673-95682]:Modifier[95673-95682]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[95683-95688]:Modifier[95683-95688]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[95689-95693]:PrimitiveType[95689-95693]"
    }, {
      "left" : "_matchToken",
      "right" : "_matchToken",
      "info" : "SimpleName[95694-95705]:SimpleName[95694-95705]"
    }, {
      "left" : "String matchStr",
      "right" : "String matchStr",
      "info" : "SingleVariableDeclaration[95706-95721]:SingleVariableDeclaration[95706-95721]"
    }, {
      "left" : "int i",
      "right" : "int i",
      "info" : "SingleVariableDeclaration[95723-95728]:SingleVariableDeclaration[95723-95728]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[95737-95748]:SimpleType[95737-95748]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[95753-96313]:Block[95753-96313]"
    }, {
      "left" : "final int len = matchStr.length();",
      "right" : "final int len = matchStr.length();",
      "info" : "VariableDeclarationStatement[95763-95797]:VariableDeclarationStatement[95763-95797]"
    }, {
      "left" : "if ((_inputPtr + len) >= _inputEnd)",
      "right" : "if ((_inputPtr + len) >= _inputEnd)",
      "info" : "IfStatement[95806-95912]:IfStatement[95806-95912]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[95842-95912]:Block[95842-95912]"
    }, {
      "left" : "_matchToken2(matchStr, i);",
      "right" : "_matchToken2(matchStr, i);",
      "info" : "ExpressionStatement[95856-95882]:ExpressionStatement[95856-95882]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[95895-95902]:ReturnStatement[95895-95902]"
    }, {
      "left" : "do{...}",
      "right" : "do{...}",
      "info" : "DoStatement[95921-96121]:DoStatement[95921-96121]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[95924-96102]:Block[95924-96102]"
    }, {
      "left" : "if (_inputBuffer[_inputPtr] != matchStr.charAt(i))",
      "right" : "if (_inputBuffer[_inputPtr] != matchStr.charAt(i))",
      "info" : "IfStatement[95938-96067]:IfStatement[95938-96067]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[95989-96067]:Block[95989-96067]"
    }, {
      "left" : "_reportInvalidToken(matchStr.substring(0, i));",
      "right" : "_reportInvalidToken(matchStr.substring(0, i));",
      "info" : "ExpressionStatement[96007-96053]:ExpressionStatement[96007-96053]"
    }, {
      "left" : "++_inputPtr;",
      "right" : "++_inputPtr;",
      "info" : "ExpressionStatement[96080-96092]:ExpressionStatement[96080-96092]"
    }, {
      "left" : "int ch = _inputBuffer[_inputPtr] & 0xFF;",
      "right" : "int ch = _inputBuffer[_inputPtr] & 0xFF;",
      "info" : "VariableDeclarationStatement[96135-96175]:VariableDeclarationStatement[96135-96175]"
    }, {
      "left" : "if (ch >= '0' && ch != ']' && ch != '}')",
      "right" : "if (ch >= '0' && ch != ']' && ch != '}')",
      "info" : "IfStatement[96184-96307]:IfStatement[96184-96307]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[96225-96307]:Block[96225-96307]"
    }, {
      "left" : "_checkMatchEnd(matchStr, i, ch);",
      "right" : "_checkMatchEnd(matchStr, i, ch);",
      "info" : "ExpressionStatement[96265-96297]:ExpressionStatement[96265-96297]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[96319-96326]:Modifier[96319-96326]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[96327-96332]:Modifier[96327-96332]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[96333-96337]:PrimitiveType[96333-96337]"
    }, {
      "left" : "_matchToken2",
      "right" : "_matchToken2",
      "info" : "SimpleName[96338-96350]:SimpleName[96338-96350]"
    }, {
      "left" : "String matchStr",
      "right" : "String matchStr",
      "info" : "SingleVariableDeclaration[96351-96366]:SingleVariableDeclaration[96351-96366]"
    }, {
      "left" : "int i",
      "right" : "int i",
      "info" : "SingleVariableDeclaration[96368-96373]:SingleVariableDeclaration[96368-96373]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[96382-96393]:SimpleType[96382-96393]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[96398-97066]:Block[96398-97066]"
    }, {
      "left" : "final int len = matchStr.length();",
      "right" : "final int len = matchStr.length();",
      "info" : "VariableDeclarationStatement[96408-96442]:VariableDeclarationStatement[96408-96442]"
    }, {
      "left" : "do{...}",
      "right" : "do{...}",
      "info" : "DoStatement[96451-96715]:DoStatement[96451-96715]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[96454-96696]:Block[96454-96696]"
    }, {
      "left" : "if (((_inputPtr >= _inputEnd) && !loadMore())\n                ||  (_inputBuffer[_inputPtr] != matchStr.charAt(i)))",
      "right" : "if (((_inputPtr >= _inputEnd) && !loadMore())\n                ||  (_inputBuffer[_inputPtr] != matchStr.charAt(i)))",
      "info" : "IfStatement[96468-96661]:IfStatement[96468-96661]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[96583-96661]:Block[96583-96661]"
    }, {
      "left" : "_reportInvalidToken(matchStr.substring(0, i));",
      "right" : "_reportInvalidToken(matchStr.substring(0, i));",
      "info" : "ExpressionStatement[96601-96647]:ExpressionStatement[96601-96647]"
    }, {
      "left" : "++_inputPtr;",
      "right" : "++_inputPtr;",
      "info" : "ExpressionStatement[96674-96686]:ExpressionStatement[96674-96686]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd && !loadMore())",
      "right" : "if (_inputPtr >= _inputEnd && !loadMore())",
      "info" : "IfStatement[96805-96879]:IfStatement[96805-96879]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[96848-96879]:Block[96848-96879]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[96862-96869]:ReturnStatement[96862-96869]"
    }, {
      "left" : "int ch = _inputBuffer[_inputPtr] & 0xFF;",
      "right" : "int ch = _inputBuffer[_inputPtr] & 0xFF;",
      "info" : "VariableDeclarationStatement[96888-96928]:VariableDeclarationStatement[96888-96928]"
    }, {
      "left" : "if (ch >= '0' && ch != ']' && ch != '}')",
      "right" : "if (ch >= '0' && ch != ']' && ch != '}')",
      "info" : "IfStatement[96937-97060]:IfStatement[96937-97060]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[96978-97060]:Block[96978-97060]"
    }, {
      "left" : "_checkMatchEnd(matchStr, i, ch);",
      "right" : "_checkMatchEnd(matchStr, i, ch);",
      "info" : "ExpressionStatement[97018-97050]:ExpressionStatement[97018-97050]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[97072-97079]:Modifier[97072-97079]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[97080-97085]:Modifier[97080-97085]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[97086-97090]:PrimitiveType[97086-97090]"
    }, {
      "left" : "_checkMatchEnd",
      "right" : "_checkMatchEnd",
      "info" : "SimpleName[97091-97105]:SimpleName[97091-97105]"
    }, {
      "left" : "String matchStr",
      "right" : "String matchStr",
      "info" : "SingleVariableDeclaration[97106-97121]:SingleVariableDeclaration[97106-97121]"
    }, {
      "left" : "int i",
      "right" : "int i",
      "info" : "SingleVariableDeclaration[97123-97128]:SingleVariableDeclaration[97123-97128]"
    }, {
      "left" : "int ch",
      "right" : "int ch",
      "info" : "SingleVariableDeclaration[97130-97136]:SingleVariableDeclaration[97130-97136]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[97145-97156]:SimpleType[97145-97156]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[97157-97386]:Block[97157-97386]"
    }, {
      "left" : "char c = (char) _decodeCharForError(ch);",
      "right" : "char c = (char) _decodeCharForError(ch);",
      "info" : "VariableDeclarationStatement[97222-97262]:VariableDeclarationStatement[97222-97262]"
    }, {
      "left" : "if (Character.isJavaIdentifierPart(c))",
      "right" : "if (Character.isJavaIdentifierPart(c))",
      "info" : "IfStatement[97271-97380]:IfStatement[97271-97380]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[97310-97380]:Block[97310-97380]"
    }, {
      "left" : "_reportInvalidToken(matchStr.substring(0, i));",
      "right" : "_reportInvalidToken(matchStr.substring(0, i));",
      "info" : "ExpressionStatement[97324-97370]:ExpressionStatement[97324-97370]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[97594-97601]:Modifier[97594-97601]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[97602-97607]:Modifier[97602-97607]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[97608-97611]:PrimitiveType[97608-97611]"
    }, {
      "left" : "_skipWS",
      "right" : "_skipWS",
      "info" : "SimpleName[97612-97619]:SimpleName[97612-97619]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[97629-97640]:SimpleType[97629-97640]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[97645-98350]:Block[97645-98350]"
    }, {
      "left" : "while (_inputPtr < _inputEnd)",
      "right" : "while (_inputPtr < _inputEnd)",
      "info" : "WhileStatement[97655-98317]:WhileStatement[97655-98317]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[97685-98317]:Block[97685-98317]"
    }, {
      "left" : "int i = _inputBuffer[_inputPtr++] & 0xFF;",
      "right" : "int i = _inputBuffer[_inputPtr++] & 0xFF;",
      "info" : "VariableDeclarationStatement[97699-97740]:VariableDeclarationStatement[97699-97740]"
    }, {
      "left" : "if (i > INT_SPACE)",
      "right" : "if (i > INT_SPACE)",
      "info" : "IfStatement[97753-97958]:IfStatement[97753-97958]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[97772-97958]:Block[97772-97958]"
    }, {
      "left" : "if (i == INT_SLASH || i == INT_HASH)",
      "right" : "if (i == INT_SLASH || i == INT_HASH)",
      "info" : "IfStatement[97790-97918]:IfStatement[97790-97918]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[97827-97918]:Block[97827-97918]"
    }, {
      "left" : "--_inputPtr;",
      "right" : "--_inputPtr;",
      "info" : "ExpressionStatement[97849-97861]:ExpressionStatement[97849-97861]"
    }, {
      "left" : "return _skipWS2();",
      "right" : "return _skipWS2();",
      "info" : "ReturnStatement[97882-97900]:ReturnStatement[97882-97900]"
    }, {
      "left" : "return i;",
      "right" : "return i;",
      "info" : "ReturnStatement[97935-97944]:ReturnStatement[97935-97944]"
    }, {
      "left" : "if (i != INT_SPACE)",
      "right" : "if (i != INT_SPACE)",
      "info" : "IfStatement[97971-98307]:IfStatement[97971-98307]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[97991-98307]:Block[97991-98307]"
    }, {
      "left" : "if (i == INT_LF)",
      "right" : "if (i == INT_LF)",
      "info" : "IfStatement[98009-98293]:IfStatement[98009-98293]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[98026-98134]:Block[98026-98134]"
    }, {
      "left" : "++_currInputRow;",
      "right" : "++_currInputRow;",
      "info" : "ExpressionStatement[98048-98064]:ExpressionStatement[98048-98064]"
    }, {
      "left" : "_currInputRowStart = _inputPtr;",
      "right" : "_currInputRowStart = _inputPtr;",
      "info" : "ExpressionStatement[98085-98116]:ExpressionStatement[98085-98116]"
    }, {
      "left" : "if (i == INT_CR)",
      "right" : "if (i == INT_CR)",
      "info" : "IfStatement[98140-98293]:IfStatement[98140-98293]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[98157-98207]:Block[98157-98207]"
    }, {
      "left" : "_skipCR();",
      "right" : "_skipCR();",
      "info" : "ExpressionStatement[98179-98189]:ExpressionStatement[98179-98189]"
    }, {
      "left" : "if (i != INT_TAB)",
      "right" : "if (i != INT_TAB)",
      "info" : "IfStatement[98213-98293]:IfStatement[98213-98293]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[98231-98293]:Block[98231-98293]"
    }, {
      "left" : "_throwInvalidSpace(i);",
      "right" : "_throwInvalidSpace(i);",
      "info" : "ExpressionStatement[98253-98275]:ExpressionStatement[98253-98275]"
    }, {
      "left" : "return _skipWS2();",
      "right" : "return _skipWS2();",
      "info" : "ReturnStatement[98326-98344]:ReturnStatement[98326-98344]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[98356-98363]:Modifier[98356-98363]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[98364-98369]:Modifier[98364-98369]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[98370-98373]:PrimitiveType[98370-98373]"
    }, {
      "left" : "_skipWS2",
      "right" : "_skipWS2",
      "info" : "SimpleName[98374-98382]:SimpleName[98374-98382]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[98392-98403]:SimpleType[98392-98403]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[98408-99357]:Block[98408-99357]"
    }, {
      "left" : "while (_inputPtr < _inputEnd || loadMore())",
      "right" : "while (_inputPtr < _inputEnd || loadMore())",
      "info" : "WhileStatement[98418-99228]:WhileStatement[98418-99228]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[98462-99228]:Block[98462-99228]"
    }, {
      "left" : "int i = _inputBuffer[_inputPtr++] & 0xFF;",
      "right" : "int i = _inputBuffer[_inputPtr++] & 0xFF;",
      "info" : "VariableDeclarationStatement[98476-98517]:VariableDeclarationStatement[98476-98517]"
    }, {
      "left" : "if (i > INT_SPACE)",
      "right" : "if (i > INT_SPACE)",
      "info" : "IfStatement[98530-98869]:IfStatement[98530-98869]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[98549-98869]:Block[98549-98869]"
    }, {
      "left" : "if (i == INT_SLASH)",
      "right" : "if (i == INT_SLASH)",
      "info" : "IfStatement[98567-98672]:IfStatement[98567-98672]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[98587-98672]:Block[98587-98672]"
    }, {
      "left" : "_skipComment();",
      "right" : "_skipComment();",
      "info" : "ExpressionStatement[98609-98624]:ExpressionStatement[98609-98624]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[98645-98654]:ContinueStatement[98645-98654]"
    }, {
      "left" : "if (i == INT_HASH)",
      "right" : "if (i == INT_HASH)",
      "info" : "IfStatement[98689-98829]:IfStatement[98689-98829]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[98708-98829]:Block[98708-98829]"
    }, {
      "left" : "if (_skipYAMLComment())",
      "right" : "if (_skipYAMLComment())",
      "info" : "IfStatement[98730-98811]:IfStatement[98730-98811]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[98754-98811]:Block[98754-98811]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[98780-98789]:ContinueStatement[98780-98789]"
    }, {
      "left" : "return i;",
      "right" : "return i;",
      "info" : "ReturnStatement[98846-98855]:ReturnStatement[98846-98855]"
    }, {
      "left" : "if (i != INT_SPACE)",
      "right" : "if (i != INT_SPACE)",
      "info" : "IfStatement[98882-99218]:IfStatement[98882-99218]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[98902-99218]:Block[98902-99218]"
    }, {
      "left" : "if (i == INT_LF)",
      "right" : "if (i == INT_LF)",
      "info" : "IfStatement[98920-99204]:IfStatement[98920-99204]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[98937-99045]:Block[98937-99045]"
    }, {
      "left" : "++_currInputRow;",
      "right" : "++_currInputRow;",
      "info" : "ExpressionStatement[98959-98975]:ExpressionStatement[98959-98975]"
    }, {
      "left" : "_currInputRowStart = _inputPtr;",
      "right" : "_currInputRowStart = _inputPtr;",
      "info" : "ExpressionStatement[98996-99027]:ExpressionStatement[98996-99027]"
    }, {
      "left" : "if (i == INT_CR)",
      "right" : "if (i == INT_CR)",
      "info" : "IfStatement[99051-99204]:IfStatement[99051-99204]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[99068-99118]:Block[99068-99118]"
    }, {
      "left" : "_skipCR();",
      "right" : "_skipCR();",
      "info" : "ExpressionStatement[99090-99100]:ExpressionStatement[99090-99100]"
    }, {
      "left" : "if (i != INT_TAB)",
      "right" : "if (i != INT_TAB)",
      "info" : "IfStatement[99124-99204]:IfStatement[99124-99204]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[99142-99204]:Block[99142-99204]"
    }, {
      "left" : "_throwInvalidSpace(i);",
      "right" : "_throwInvalidSpace(i);",
      "info" : "ExpressionStatement[99164-99186]:ExpressionStatement[99164-99186]"
    }, {
      "left" : "throw _constructError(\"Unexpected end-of-input within/between \"+_parsingContext.getTypeDesc()+\" entries\");",
      "right" : "throw _constructError(\"Unexpected end-of-input within/between \"+_parsingContext.getTypeDesc()+\" entries\");",
      "info" : "ThrowStatement[99245-99351]:ThrowStatement[99245-99351]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[99367-99374]:Modifier[99367-99374]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[99375-99380]:Modifier[99375-99380]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[99381-99384]:PrimitiveType[99381-99384]"
    }, {
      "left" : "_skipWSOrEnd",
      "right" : "_skipWSOrEnd",
      "info" : "SimpleName[99385-99397]:SimpleName[99385-99397]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[99407-99418]:SimpleType[99407-99418]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[99423-100983]:Block[99423-100983]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[99585-99710]:IfStatement[99585-99710]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[99613-99710]:Block[99613-99710]"
    }, {
      "left" : "if (!loadMore())",
      "right" : "if (!loadMore())",
      "info" : "IfStatement[99627-99700]:IfStatement[99627-99700]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[99644-99700]:Block[99644-99700]"
    }, {
      "left" : "return _eofAsNextChar();",
      "right" : "return _eofAsNextChar();",
      "info" : "ReturnStatement[99662-99686]:ReturnStatement[99662-99686]"
    }, {
      "left" : "int i = _inputBuffer[_inputPtr++] & 0xFF;",
      "right" : "int i = _inputBuffer[_inputPtr++] & 0xFF;",
      "info" : "VariableDeclarationStatement[99719-99760]:VariableDeclarationStatement[99719-99760]"
    }, {
      "left" : "if (i > INT_SPACE)",
      "right" : "if (i > INT_SPACE)",
      "info" : "IfStatement[99769-99955]:IfStatement[99769-99955]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[99788-99955]:Block[99788-99955]"
    }, {
      "left" : "if (i == INT_SLASH || i == INT_HASH)",
      "right" : "if (i == INT_SLASH || i == INT_HASH)",
      "info" : "IfStatement[99802-99923]:IfStatement[99802-99923]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[99839-99923]:Block[99839-99923]"
    }, {
      "left" : "--_inputPtr;",
      "right" : "--_inputPtr;",
      "info" : "ExpressionStatement[99857-99869]:ExpressionStatement[99857-99869]"
    }, {
      "left" : "return _skipWSOrEnd2();",
      "right" : "return _skipWSOrEnd2();",
      "info" : "ReturnStatement[99886-99909]:ReturnStatement[99886-99909]"
    }, {
      "left" : "return i;",
      "right" : "return i;",
      "info" : "ReturnStatement[99936-99945]:ReturnStatement[99936-99945]"
    }, {
      "left" : "if (i != INT_SPACE)",
      "right" : "if (i != INT_SPACE)",
      "info" : "IfStatement[99964-100264]:IfStatement[99964-100264]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[99984-100264]:Block[99984-100264]"
    }, {
      "left" : "if (i == INT_LF)",
      "right" : "if (i == INT_LF)",
      "info" : "IfStatement[99998-100254]:IfStatement[99998-100254]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[100015-100111]:Block[100015-100111]"
    }, {
      "left" : "++_currInputRow;",
      "right" : "++_currInputRow;",
      "info" : "ExpressionStatement[100033-100049]:ExpressionStatement[100033-100049]"
    }, {
      "left" : "_currInputRowStart = _inputPtr;",
      "right" : "_currInputRowStart = _inputPtr;",
      "info" : "ExpressionStatement[100066-100097]:ExpressionStatement[100066-100097]"
    }, {
      "left" : "if (i == INT_CR)",
      "right" : "if (i == INT_CR)",
      "info" : "IfStatement[100117-100254]:IfStatement[100117-100254]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[100134-100176]:Block[100134-100176]"
    }, {
      "left" : "_skipCR();",
      "right" : "_skipCR();",
      "info" : "ExpressionStatement[100152-100162]:ExpressionStatement[100152-100162]"
    }, {
      "left" : "if (i != INT_TAB)",
      "right" : "if (i != INT_TAB)",
      "info" : "IfStatement[100182-100254]:IfStatement[100182-100254]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[100200-100254]:Block[100200-100254]"
    }, {
      "left" : "_throwInvalidSpace(i);",
      "right" : "_throwInvalidSpace(i);",
      "info" : "ExpressionStatement[100218-100240]:ExpressionStatement[100218-100240]"
    }, {
      "left" : "while (_inputPtr < _inputEnd)",
      "right" : "while (_inputPtr < _inputEnd)",
      "info" : "WhileStatement[100282-100945]:WhileStatement[100282-100945]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[100312-100945]:Block[100312-100945]"
    }, {
      "left" : "i = _inputBuffer[_inputPtr++] & 0xFF;",
      "right" : "i = _inputBuffer[_inputPtr++] & 0xFF;",
      "info" : "ExpressionStatement[100326-100363]:ExpressionStatement[100326-100363]"
    }, {
      "left" : "if (i > INT_SPACE)",
      "right" : "if (i > INT_SPACE)",
      "info" : "IfStatement[100376-100586]:IfStatement[100376-100586]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[100395-100586]:Block[100395-100586]"
    }, {
      "left" : "if (i == INT_SLASH || i == INT_HASH)",
      "right" : "if (i == INT_SLASH || i == INT_HASH)",
      "info" : "IfStatement[100413-100546]:IfStatement[100413-100546]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[100450-100546]:Block[100450-100546]"
    }, {
      "left" : "--_inputPtr;",
      "right" : "--_inputPtr;",
      "info" : "ExpressionStatement[100472-100484]:ExpressionStatement[100472-100484]"
    }, {
      "left" : "return _skipWSOrEnd2();",
      "right" : "return _skipWSOrEnd2();",
      "info" : "ReturnStatement[100505-100528]:ReturnStatement[100505-100528]"
    }, {
      "left" : "return i;",
      "right" : "return i;",
      "info" : "ReturnStatement[100563-100572]:ReturnStatement[100563-100572]"
    }, {
      "left" : "if (i != INT_SPACE)",
      "right" : "if (i != INT_SPACE)",
      "info" : "IfStatement[100599-100935]:IfStatement[100599-100935]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[100619-100935]:Block[100619-100935]"
    }, {
      "left" : "if (i == INT_LF)",
      "right" : "if (i == INT_LF)",
      "info" : "IfStatement[100637-100921]:IfStatement[100637-100921]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[100654-100762]:Block[100654-100762]"
    }, {
      "left" : "++_currInputRow;",
      "right" : "++_currInputRow;",
      "info" : "ExpressionStatement[100676-100692]:ExpressionStatement[100676-100692]"
    }, {
      "left" : "_currInputRowStart = _inputPtr;",
      "right" : "_currInputRowStart = _inputPtr;",
      "info" : "ExpressionStatement[100713-100744]:ExpressionStatement[100713-100744]"
    }, {
      "left" : "if (i == INT_CR)",
      "right" : "if (i == INT_CR)",
      "info" : "IfStatement[100768-100921]:IfStatement[100768-100921]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[100785-100835]:Block[100785-100835]"
    }, {
      "left" : "_skipCR();",
      "right" : "_skipCR();",
      "info" : "ExpressionStatement[100807-100817]:ExpressionStatement[100807-100817]"
    }, {
      "left" : "if (i != INT_TAB)",
      "right" : "if (i != INT_TAB)",
      "info" : "IfStatement[100841-100921]:IfStatement[100841-100921]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[100859-100921]:Block[100859-100921]"
    }, {
      "left" : "_throwInvalidSpace(i);",
      "right" : "_throwInvalidSpace(i);",
      "info" : "ExpressionStatement[100881-100903]:ExpressionStatement[100881-100903]"
    }, {
      "left" : "return _skipWSOrEnd2();",
      "right" : "return _skipWSOrEnd2();",
      "info" : "ReturnStatement[100954-100977]:ReturnStatement[100954-100977]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[100989-100996]:Modifier[100989-100996]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[100997-101002]:Modifier[100997-101002]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[101003-101006]:PrimitiveType[101003-101006]"
    }, {
      "left" : "_skipWSOrEnd2",
      "right" : "_skipWSOrEnd2",
      "info" : "SimpleName[101007-101020]:SimpleName[101007-101020]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[101030-101041]:SimpleType[101030-101041]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[101046-101934]:Block[101046-101934]"
    }, {
      "left" : "while ((_inputPtr < _inputEnd) || loadMore())",
      "right" : "while ((_inputPtr < _inputEnd) || loadMore())",
      "info" : "WhileStatement[101056-101861]:WhileStatement[101056-101861]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[101102-101861]:Block[101102-101861]"
    }, {
      "left" : "int i = _inputBuffer[_inputPtr++] & 0xFF;",
      "right" : "int i = _inputBuffer[_inputPtr++] & 0xFF;",
      "info" : "VariableDeclarationStatement[101116-101157]:VariableDeclarationStatement[101116-101157]"
    }, {
      "left" : "if (i > INT_SPACE)",
      "right" : "if (i > INT_SPACE)",
      "info" : "IfStatement[101170-101851]:IfStatement[101170-101851]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[101189-101509]:Block[101189-101509]"
    }, {
      "left" : "if (i == INT_SLASH)",
      "right" : "if (i == INT_SLASH)",
      "info" : "IfStatement[101207-101312]:IfStatement[101207-101312]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[101227-101312]:Block[101227-101312]"
    }, {
      "left" : "_skipComment();",
      "right" : "_skipComment();",
      "info" : "ExpressionStatement[101249-101264]:ExpressionStatement[101249-101264]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[101285-101294]:ContinueStatement[101285-101294]"
    }, {
      "left" : "if (i == INT_HASH)",
      "right" : "if (i == INT_HASH)",
      "info" : "IfStatement[101329-101469]:IfStatement[101329-101469]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[101348-101469]:Block[101348-101469]"
    }, {
      "left" : "if (_skipYAMLComment())",
      "right" : "if (_skipYAMLComment())",
      "info" : "IfStatement[101370-101451]:IfStatement[101370-101451]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[101394-101451]:Block[101394-101451]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[101420-101429]:ContinueStatement[101420-101429]"
    }, {
      "left" : "return i;",
      "right" : "return i;",
      "info" : "ReturnStatement[101486-101495]:ReturnStatement[101486-101495]"
    }, {
      "left" : "if (i != INT_SPACE)",
      "right" : "if (i != INT_SPACE)",
      "info" : "IfStatement[101515-101851]:IfStatement[101515-101851]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[101535-101851]:Block[101535-101851]"
    }, {
      "left" : "if (i == INT_LF)",
      "right" : "if (i == INT_LF)",
      "info" : "IfStatement[101553-101837]:IfStatement[101553-101837]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[101570-101678]:Block[101570-101678]"
    }, {
      "left" : "++_currInputRow;",
      "right" : "++_currInputRow;",
      "info" : "ExpressionStatement[101592-101608]:ExpressionStatement[101592-101608]"
    }, {
      "left" : "_currInputRowStart = _inputPtr;",
      "right" : "_currInputRowStart = _inputPtr;",
      "info" : "ExpressionStatement[101629-101660]:ExpressionStatement[101629-101660]"
    }, {
      "left" : "if (i == INT_CR)",
      "right" : "if (i == INT_CR)",
      "info" : "IfStatement[101684-101837]:IfStatement[101684-101837]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[101701-101751]:Block[101701-101751]"
    }, {
      "left" : "_skipCR();",
      "right" : "_skipCR();",
      "info" : "ExpressionStatement[101723-101733]:ExpressionStatement[101723-101733]"
    }, {
      "left" : "if (i != INT_TAB)",
      "right" : "if (i != INT_TAB)",
      "info" : "IfStatement[101757-101837]:IfStatement[101757-101837]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[101775-101837]:Block[101775-101837]"
    }, {
      "left" : "_throwInvalidSpace(i);",
      "right" : "_throwInvalidSpace(i);",
      "info" : "ExpressionStatement[101797-101819]:ExpressionStatement[101797-101819]"
    }, {
      "left" : "return _eofAsNextChar();",
      "right" : "return _eofAsNextChar();",
      "info" : "ReturnStatement[101904-101928]:ReturnStatement[101904-101928]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[101940-101947]:Modifier[101940-101947]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[101948-101953]:Modifier[101948-101953]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[101954-101957]:PrimitiveType[101954-101957]"
    }, {
      "left" : "_skipColon",
      "right" : "_skipColon",
      "info" : "SimpleName[101958-101968]:SimpleName[101958-101968]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[101978-101989]:SimpleType[101978-101989]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[101994-103859]:Block[101994-103859]"
    }, {
      "left" : "if ((_inputPtr + 4) >= _inputEnd)",
      "right" : "if ((_inputPtr + 4) >= _inputEnd)",
      "info" : "IfStatement[102004-102088]:IfStatement[102004-102088]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[102038-102088]:Block[102038-102088]"
    }, {
      "left" : "return _skipColon2(false);",
      "right" : "return _skipColon2(false);",
      "info" : "ReturnStatement[102052-102078]:ReturnStatement[102052-102078]"
    }, {
      "left" : "int i = _inputBuffer[_inputPtr];",
      "right" : "int i = _inputBuffer[_inputPtr];",
      "info" : "VariableDeclarationStatement[102177-102209]:VariableDeclarationStatement[102177-102209]"
    }, {
      "left" : "if (i == INT_COLON)",
      "right" : "if (i == INT_COLON)",
      "info" : "IfStatement[102218-103011]:IfStatement[102218-103011]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[102238-103011]:Block[102238-103011]"
    }, {
      "left" : "i = _inputBuffer[++_inputPtr];",
      "right" : "i = _inputBuffer[++_inputPtr];",
      "info" : "ExpressionStatement[102285-102315]:ExpressionStatement[102285-102315]"
    }, {
      "left" : "if (i > INT_SPACE)",
      "right" : "if (i > INT_SPACE)",
      "info" : "IfStatement[102328-102552]:IfStatement[102328-102552]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[102347-102552]:Block[102347-102552]"
    }, {
      "left" : "if (i == INT_SLASH || i == INT_HASH)",
      "right" : "if (i == INT_SLASH || i == INT_HASH)",
      "info" : "IfStatement[102381-102483]:IfStatement[102381-102483]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[102418-102483]:Block[102418-102483]"
    }, {
      "left" : "return _skipColon2(true);",
      "right" : "return _skipColon2(true);",
      "info" : "ReturnStatement[102440-102465]:ReturnStatement[102440-102465]"
    }, {
      "left" : "++_inputPtr;",
      "right" : "++_inputPtr;",
      "info" : "ExpressionStatement[102500-102512]:ExpressionStatement[102500-102512]"
    }, {
      "left" : "return i;",
      "right" : "return i;",
      "info" : "ReturnStatement[102529-102538]:ReturnStatement[102529-102538]"
    }, {
      "left" : "if (i == INT_SPACE || i == INT_TAB)",
      "right" : "if (i == INT_SPACE || i == INT_TAB)",
      "info" : "IfStatement[102565-102938]:IfStatement[102565-102938]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[102601-102938]:Block[102601-102938]"
    }, {
      "left" : "i = (int) _inputBuffer[++_inputPtr];",
      "right" : "i = (int) _inputBuffer[++_inputPtr];",
      "info" : "ExpressionStatement[102619-102655]:ExpressionStatement[102619-102655]"
    }, {
      "left" : "if (i > INT_SPACE)",
      "right" : "if (i > INT_SPACE)",
      "info" : "IfStatement[102672-102924]:IfStatement[102672-102924]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[102691-102924]:Block[102691-102924]"
    }, {
      "left" : "if (i == INT_SLASH || i == INT_HASH)",
      "right" : "if (i == INT_SLASH || i == INT_HASH)",
      "info" : "IfStatement[102713-102823]:IfStatement[102713-102823]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[102750-102823]:Block[102750-102823]"
    }, {
      "left" : "return _skipColon2(true);",
      "right" : "return _skipColon2(true);",
      "info" : "ReturnStatement[102776-102801]:ReturnStatement[102776-102801]"
    }, {
      "left" : "++_inputPtr;",
      "right" : "++_inputPtr;",
      "info" : "ExpressionStatement[102844-102856]:ExpressionStatement[102844-102856]"
    }, {
      "left" : "return i;",
      "right" : "return i;",
      "info" : "ReturnStatement[102897-102906]:ReturnStatement[102897-102906]"
    }, {
      "left" : "return _skipColon2(true);",
      "right" : "return _skipColon2(true);",
      "info" : "ReturnStatement[102951-102976]:ReturnStatement[102951-102976]"
    }, {
      "left" : "if (i == INT_SPACE || i == INT_TAB)",
      "right" : "if (i == INT_SPACE || i == INT_TAB)",
      "info" : "IfStatement[103020-103110]:IfStatement[103020-103110]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[103056-103110]:Block[103056-103110]"
    }, {
      "left" : "i = _inputBuffer[++_inputPtr];",
      "right" : "i = _inputBuffer[++_inputPtr];",
      "info" : "ExpressionStatement[103070-103100]:ExpressionStatement[103070-103100]"
    }, {
      "left" : "if (i == INT_COLON)",
      "right" : "if (i == INT_COLON)",
      "info" : "IfStatement[103119-103818]:IfStatement[103119-103818]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[103139-103818]:Block[103139-103818]"
    }, {
      "left" : "i = _inputBuffer[++_inputPtr];",
      "right" : "i = _inputBuffer[++_inputPtr];",
      "info" : "ExpressionStatement[103153-103183]:ExpressionStatement[103153-103183]"
    }, {
      "left" : "if (i > INT_SPACE)",
      "right" : "if (i > INT_SPACE)",
      "info" : "IfStatement[103196-103404]:IfStatement[103196-103404]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[103215-103404]:Block[103215-103404]"
    }, {
      "left" : "if (i == INT_SLASH || i == INT_HASH)",
      "right" : "if (i == INT_SLASH || i == INT_HASH)",
      "info" : "IfStatement[103233-103335]:IfStatement[103233-103335]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[103270-103335]:Block[103270-103335]"
    }, {
      "left" : "return _skipColon2(true);",
      "right" : "return _skipColon2(true);",
      "info" : "ReturnStatement[103292-103317]:ReturnStatement[103292-103317]"
    }, {
      "left" : "++_inputPtr;",
      "right" : "++_inputPtr;",
      "info" : "ExpressionStatement[103352-103364]:ExpressionStatement[103352-103364]"
    }, {
      "left" : "return i;",
      "right" : "return i;",
      "info" : "ReturnStatement[103381-103390]:ReturnStatement[103381-103390]"
    }, {
      "left" : "if (i == INT_SPACE || i == INT_TAB)",
      "right" : "if (i == INT_SPACE || i == INT_TAB)",
      "info" : "IfStatement[103417-103770]:IfStatement[103417-103770]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[103453-103770]:Block[103453-103770]"
    }, {
      "left" : "i = (int) _inputBuffer[++_inputPtr];",
      "right" : "i = (int) _inputBuffer[++_inputPtr];",
      "info" : "ExpressionStatement[103471-103507]:ExpressionStatement[103471-103507]"
    }, {
      "left" : "if (i > INT_SPACE)",
      "right" : "if (i > INT_SPACE)",
      "info" : "IfStatement[103524-103756]:IfStatement[103524-103756]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[103543-103756]:Block[103543-103756]"
    }, {
      "left" : "if (i == INT_SLASH || i == INT_HASH)",
      "right" : "if (i == INT_SLASH || i == INT_HASH)",
      "info" : "IfStatement[103565-103675]:IfStatement[103565-103675]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[103602-103675]:Block[103602-103675]"
    }, {
      "left" : "return _skipColon2(true);",
      "right" : "return _skipColon2(true);",
      "info" : "ReturnStatement[103628-103653]:ReturnStatement[103628-103653]"
    }, {
      "left" : "++_inputPtr;",
      "right" : "++_inputPtr;",
      "info" : "ExpressionStatement[103696-103708]:ExpressionStatement[103696-103708]"
    }, {
      "left" : "return i;",
      "right" : "return i;",
      "info" : "ReturnStatement[103729-103738]:ReturnStatement[103729-103738]"
    }, {
      "left" : "return _skipColon2(true);",
      "right" : "return _skipColon2(true);",
      "info" : "ReturnStatement[103783-103808]:ReturnStatement[103783-103808]"
    }, {
      "left" : "return _skipColon2(false);",
      "right" : "return _skipColon2(false);",
      "info" : "ReturnStatement[103827-103853]:ReturnStatement[103827-103853]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[103865-103872]:Modifier[103865-103872]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[103873-103878]:Modifier[103873-103878]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[103879-103882]:PrimitiveType[103879-103882]"
    }, {
      "left" : "_skipColon2",
      "right" : "_skipColon2",
      "info" : "SimpleName[103883-103894]:SimpleName[103883-103894]"
    }, {
      "left" : "boolean gotColon",
      "right" : "boolean gotColon",
      "info" : "SingleVariableDeclaration[103895-103911]:SingleVariableDeclaration[103895-103911]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[103920-103931]:SimpleType[103920-103931]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[103936-105228]:Block[103936-105228]"
    }, {
      "left" : "while (_inputPtr < _inputEnd || loadMore())",
      "right" : "while (_inputPtr < _inputEnd || loadMore())",
      "info" : "WhileStatement[103946-105107]:WhileStatement[103946-105107]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[103990-105107]:Block[103990-105107]"
    }, {
      "left" : "int i = _inputBuffer[_inputPtr++] & 0xFF;",
      "right" : "int i = _inputBuffer[_inputPtr++] & 0xFF;",
      "info" : "VariableDeclarationStatement[104004-104045]:VariableDeclarationStatement[104004-104045]"
    }, {
      "left" : "if (i > INT_SPACE)",
      "right" : "if (i > INT_SPACE)",
      "info" : "IfStatement[104059-105097]:IfStatement[104059-105097]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[104078-104755]:Block[104078-104755]"
    }, {
      "left" : "if (i == INT_SLASH)",
      "right" : "if (i == INT_SLASH)",
      "info" : "IfStatement[104096-104201]:IfStatement[104096-104201]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[104116-104201]:Block[104116-104201]"
    }, {
      "left" : "_skipComment();",
      "right" : "_skipComment();",
      "info" : "ExpressionStatement[104138-104153]:ExpressionStatement[104138-104153]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[104174-104183]:ContinueStatement[104174-104183]"
    }, {
      "left" : "if (i == INT_HASH)",
      "right" : "if (i == INT_HASH)",
      "info" : "IfStatement[104218-104358]:IfStatement[104218-104358]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[104237-104358]:Block[104237-104358]"
    }, {
      "left" : "if (_skipYAMLComment())",
      "right" : "if (_skipYAMLComment())",
      "info" : "IfStatement[104259-104340]:IfStatement[104259-104340]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[104283-104340]:Block[104283-104340]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[104309-104318]:ContinueStatement[104309-104318]"
    }, {
      "left" : "if (gotColon)",
      "right" : "if (gotColon)",
      "info" : "IfStatement[104375-104438]:IfStatement[104375-104438]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[104389-104438]:Block[104389-104438]"
    }, {
      "left" : "return i;",
      "right" : "return i;",
      "info" : "ReturnStatement[104411-104420]:ReturnStatement[104411-104420]"
    }, {
      "left" : "if (i != INT_COLON)",
      "right" : "if (i != INT_COLON)",
      "info" : "IfStatement[104455-104708]:IfStatement[104455-104708]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[104475-104708]:Block[104475-104708]"
    }, {
      "left" : "if (i < INT_SPACE)",
      "right" : "if (i < INT_SPACE)",
      "info" : "IfStatement[104497-104586]:IfStatement[104497-104586]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[104516-104586]:Block[104516-104586]"
    }, {
      "left" : "_throwInvalidSpace(i);",
      "right" : "_throwInvalidSpace(i);",
      "info" : "ExpressionStatement[104542-104564]:ExpressionStatement[104542-104564]"
    }, {
      "left" : "_reportUnexpectedChar(i, \"was expecting a colon to separate field name and value\");",
      "right" : "_reportUnexpectedChar(i, \"was expecting a colon to separate field name and value\");",
      "info" : "ExpressionStatement[104607-104690]:ExpressionStatement[104607-104690]"
    }, {
      "left" : "gotColon = true;",
      "right" : "gotColon = true;",
      "info" : "ExpressionStatement[104725-104741]:ExpressionStatement[104725-104741]"
    }, {
      "left" : "if (i != INT_SPACE)",
      "right" : "if (i != INT_SPACE)",
      "info" : "IfStatement[104761-105097]:IfStatement[104761-105097]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[104781-105097]:Block[104781-105097]"
    }, {
      "left" : "if (i == INT_LF)",
      "right" : "if (i == INT_LF)",
      "info" : "IfStatement[104799-105083]:IfStatement[104799-105083]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[104816-104924]:Block[104816-104924]"
    }, {
      "left" : "++_currInputRow;",
      "right" : "++_currInputRow;",
      "info" : "ExpressionStatement[104838-104854]:ExpressionStatement[104838-104854]"
    }, {
      "left" : "_currInputRowStart = _inputPtr;",
      "right" : "_currInputRowStart = _inputPtr;",
      "info" : "ExpressionStatement[104875-104906]:ExpressionStatement[104875-104906]"
    }, {
      "left" : "if (i == INT_CR)",
      "right" : "if (i == INT_CR)",
      "info" : "IfStatement[104930-105083]:IfStatement[104930-105083]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[104947-104997]:Block[104947-104997]"
    }, {
      "left" : "_skipCR();",
      "right" : "_skipCR();",
      "info" : "ExpressionStatement[104969-104979]:ExpressionStatement[104969-104979]"
    }, {
      "left" : "if (i != INT_TAB)",
      "right" : "if (i != INT_TAB)",
      "info" : "IfStatement[105003-105083]:IfStatement[105003-105083]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[105021-105083]:Block[105021-105083]"
    }, {
      "left" : "_throwInvalidSpace(i);",
      "right" : "_throwInvalidSpace(i);",
      "info" : "ExpressionStatement[105043-105065]:ExpressionStatement[105043-105065]"
    }, {
      "left" : "throw _constructError(\"Unexpected end-of-input within/between \"+_parsingContext.getTypeDesc()+\" entries\");",
      "right" : "throw _constructError(\"Unexpected end-of-input within/between \"+_parsingContext.getTypeDesc()+\" entries\");",
      "info" : "ThrowStatement[105116-105222]:ThrowStatement[105116-105222]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[105234-105241]:Modifier[105234-105241]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[105242-105247]:Modifier[105242-105247]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[105248-105252]:PrimitiveType[105248-105252]"
    }, {
      "left" : "_skipComment",
      "right" : "_skipComment",
      "info" : "SimpleName[105253-105265]:SimpleName[105253-105265]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[105275-105286]:SimpleType[105275-105286]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[105291-105952]:Block[105291-105952]"
    }, {
      "left" : "if (!isEnabled(Feature.ALLOW_COMMENTS))",
      "right" : "if (!isEnabled(Feature.ALLOW_COMMENTS))",
      "info" : "IfStatement[105301-105505]:IfStatement[105301-105505]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[105341-105505]:Block[105341-105505]"
    }, {
      "left" : "_reportUnexpectedChar('/', \"maybe a (non-standard) comment? (not recognized as one since Feature 'ALLOW_COMMENTS' not enabled for parser)\");",
      "right" : "_reportUnexpectedChar('/', \"maybe a (non-standard) comment? (not recognized as one since Feature 'ALLOW_COMMENTS' not enabled for parser)\");",
      "info" : "ExpressionStatement[105355-105495]:ExpressionStatement[105355-105495]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd && !loadMore())",
      "right" : "if (_inputPtr >= _inputEnd && !loadMore())",
      "info" : "IfStatement[105571-105673]:IfStatement[105571-105673]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[105614-105673]:Block[105614-105673]"
    }, {
      "left" : "_reportInvalidEOF(\" in a comment\");",
      "right" : "_reportInvalidEOF(\" in a comment\");",
      "info" : "ExpressionStatement[105628-105663]:ExpressionStatement[105628-105663]"
    }, {
      "left" : "int c = _inputBuffer[_inputPtr++] & 0xFF;",
      "right" : "int c = _inputBuffer[_inputPtr++] & 0xFF;",
      "info" : "VariableDeclarationStatement[105682-105723]:VariableDeclarationStatement[105682-105723]"
    }, {
      "left" : "if (c == '/')",
      "right" : "if (c == '/')",
      "info" : "IfStatement[105732-105946]:IfStatement[105732-105946]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[105746-105782]:Block[105746-105782]"
    }, {
      "left" : "_skipLine();",
      "right" : "_skipLine();",
      "info" : "ExpressionStatement[105760-105772]:ExpressionStatement[105760-105772]"
    }, {
      "left" : "if (c == '*')",
      "right" : "if (c == '*')",
      "info" : "IfStatement[105788-105946]:IfStatement[105788-105946]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[105802-105842]:Block[105802-105842]"
    }, {
      "left" : "_skipCComment();",
      "right" : "_skipCComment();",
      "info" : "ExpressionStatement[105816-105832]:ExpressionStatement[105816-105832]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[105848-105946]:Block[105848-105946]"
    }, {
      "left" : "_reportUnexpectedChar(c, \"was expecting either '*' or '/' for a comment\");",
      "right" : "_reportUnexpectedChar(c, \"was expecting either '*' or '/' for a comment\");",
      "info" : "ExpressionStatement[105862-105936]:ExpressionStatement[105862-105936]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[105958-105965]:Modifier[105958-105965]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[105966-105971]:Modifier[105966-105971]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[105972-105976]:PrimitiveType[105972-105976]"
    }, {
      "left" : "_skipCComment",
      "right" : "_skipCComment",
      "info" : "SimpleName[105977-105990]:SimpleName[105977-105990]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[106000-106011]:SimpleType[106000-106011]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[106016-107518]:Block[106016-107518]"
    }, {
      "left" : "final int[] codes = CharTypes.getInputCodeComment();",
      "right" : "final int[] codes = CharTypes.getInputCodeComment();",
      "info" : "VariableDeclarationStatement[106098-106150]:VariableDeclarationStatement[106098-106150]"
    }, {
      "left" : "main_loop:\n        while ((_inputPtr < _inputEnd) || loadMore()) {\n            int i = (int) _inputBuffer[_inputPtr++] & 0xFF;\n            int code = codes[i];\n            if (code != 0) {\n                switch (code) {\n                case '*':\n                    if (_inputPtr >= _inputEnd && !loadMore()) {\n                        break main_loop;\n                    }\n                    if (_inputBuffer[_inputPtr] == INT_SLASH) {\n                        ++_inputPtr;\n                        return;\n                    }\n                    break;\n                case INT_LF:\n                    ++_currInputRow;\n                    _currInputRowStart = _inputPtr;\n                    break;\n                case INT_CR:\n                    _skipCR();\n                    break;\n                case 2: // 2-byte UTF\n                    _skipUtf8_2(i);\n                    break;\n                case 3: // 3-byte UTF\n                    _skipUtf8_3(i);\n                    break;\n                case 4: // 4-byte UTF\n                    _skipUtf8_4(i);\n                    break;\n                default: // e.g. -1\n                    // Is this good enough error message?\n                    _reportInvalidChar(i);\n                }\n            }\n        }",
      "right" : "main_loop:\n        while ((_inputPtr < _inputEnd) || loadMore()) {\n            int i = (int) _inputBuffer[_inputPtr++] & 0xFF;\n            int code = codes[i];\n            if (code != 0) {\n                switch (code) {\n                case '*':\n                    if (_inputPtr >= _inputEnd && !loadMore()) {\n                        break main_loop;\n                    }\n                    if (_inputBuffer[_inputPtr] == INT_SLASH) {\n                        ++_inputPtr;\n                        return;\n                    }\n                    break;\n                case INT_LF:\n                    ++_currInputRow;\n                    _currInputRowStart = _inputPtr;\n                    break;\n                case INT_CR:\n                    _skipCR();\n                    break;\n                case 2: // 2-byte UTF\n                    _skipUtf8_2(i);\n                    break;\n                case 3: // 3-byte UTF\n                    _skipUtf8_3(i);\n                    break;\n                case 4: // 4-byte UTF\n                    _skipUtf8_4(i);\n                    break;\n                default: // e.g. -1\n                    // Is this good enough error message?\n                    _reportInvalidChar(i);\n                }\n            }\n        }",
      "info" : "LabeledStatement[106198-107468]:LabeledStatement[106198-107468]"
    }, {
      "left" : "while ((_inputPtr < _inputEnd) || loadMore())",
      "right" : "while ((_inputPtr < _inputEnd) || loadMore())",
      "info" : "WhileStatement[106217-107468]:WhileStatement[106217-107468]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[106263-107468]:Block[106263-107468]"
    }, {
      "left" : "int i = (int) _inputBuffer[_inputPtr++] & 0xFF;",
      "right" : "int i = (int) _inputBuffer[_inputPtr++] & 0xFF;",
      "info" : "VariableDeclarationStatement[106277-106324]:VariableDeclarationStatement[106277-106324]"
    }, {
      "left" : "int code = codes[i];",
      "right" : "int code = codes[i];",
      "info" : "VariableDeclarationStatement[106337-106357]:VariableDeclarationStatement[106337-106357]"
    }, {
      "left" : "if (code != 0)",
      "right" : "if (code != 0)",
      "info" : "IfStatement[106370-107458]:IfStatement[106370-107458]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[106385-107458]:Block[106385-107458]"
    }, {
      "left" : "switch (code) {\n                case '*':\n                    if (_inputPtr >= _inputEnd && !loadMore()) {\n                        break main_loop;\n                    }\n                    if (_inputBuffer[_inputPtr] == INT_SLASH) {\n                        ++_inputPtr;\n                        return;\n                    }\n                    break;\n                case INT_LF:\n                    ++_currInputRow;\n                    _currInputRowStart = _inputPtr;\n                    break;\n                case INT_CR:\n                    _skipCR();\n                    break;\n                case 2: // 2-byte UTF\n                    _skipUtf8_2(i);\n                    break;\n                case 3: // 3-byte UTF\n                    _skipUtf8_3(i);\n                    break;\n                case 4: // 4-byte UTF\n                    _skipUtf8_4(i);\n                    break;\n                default: // e.g. -1\n                    // Is this good enough error message?\n                    _reportInvalidChar(i);\n                }",
      "right" : "switch (code) {\n                case '*':\n                    if (_inputPtr >= _inputEnd && !loadMore()) {\n                        break main_loop;\n                    }\n                    if (_inputBuffer[_inputPtr] == INT_SLASH) {\n                        ++_inputPtr;\n                        return;\n                    }\n                    break;\n                case INT_LF:\n                    ++_currInputRow;\n                    _currInputRowStart = _inputPtr;\n                    break;\n                case INT_CR:\n                    _skipCR();\n                    break;\n                case 2: // 2-byte UTF\n                    _skipUtf8_2(i);\n                    break;\n                case 3: // 3-byte UTF\n                    _skipUtf8_3(i);\n                    break;\n                case 4: // 4-byte UTF\n                    _skipUtf8_4(i);\n                    break;\n                default: // e.g. -1\n                    // Is this good enough error message?\n                    _reportInvalidChar(i);\n                }",
      "info" : "SwitchStatement[106403-107444]:SwitchStatement[106403-107444]"
    }, {
      "left" : "case '*':",
      "right" : "case '*':",
      "info" : "SwitchCase[106435-106444]:SwitchCase[106435-106444]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd && !loadMore())",
      "right" : "if (_inputPtr >= _inputEnd && !loadMore())",
      "info" : "IfStatement[106465-106572]:IfStatement[106465-106572]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[106508-106572]:Block[106508-106572]"
    }, {
      "left" : "break main_loop;",
      "right" : "break main_loop;",
      "info" : "BreakStatement[106534-106550]:BreakStatement[106534-106550]"
    }, {
      "left" : "if (_inputBuffer[_inputPtr] == INT_SLASH)",
      "right" : "if (_inputBuffer[_inputPtr] == INT_SLASH)",
      "info" : "IfStatement[106593-106727]:IfStatement[106593-106727]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[106635-106727]:Block[106635-106727]"
    }, {
      "left" : "++_inputPtr;",
      "right" : "++_inputPtr;",
      "info" : "ExpressionStatement[106661-106673]:ExpressionStatement[106661-106673]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[106698-106705]:ReturnStatement[106698-106705]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[106748-106754]:BreakStatement[106748-106754]"
    }, {
      "left" : "case INT_LF:",
      "right" : "case INT_LF:",
      "info" : "SwitchCase[106771-106783]:SwitchCase[106771-106783]"
    }, {
      "left" : "++_currInputRow;",
      "right" : "++_currInputRow;",
      "info" : "ExpressionStatement[106804-106820]:ExpressionStatement[106804-106820]"
    }, {
      "left" : "_currInputRowStart = _inputPtr;",
      "right" : "_currInputRowStart = _inputPtr;",
      "info" : "ExpressionStatement[106841-106872]:ExpressionStatement[106841-106872]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[106893-106899]:BreakStatement[106893-106899]"
    }, {
      "left" : "case INT_CR:",
      "right" : "case INT_CR:",
      "info" : "SwitchCase[106916-106928]:SwitchCase[106916-106928]"
    }, {
      "left" : "_skipCR();",
      "right" : "_skipCR();",
      "info" : "ExpressionStatement[106949-106959]:ExpressionStatement[106949-106959]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[106980-106986]:BreakStatement[106980-106986]"
    }, {
      "left" : "case 2:",
      "right" : "case 2:",
      "info" : "SwitchCase[107003-107010]:SwitchCase[107003-107010]"
    }, {
      "left" : "_skipUtf8_2(i);",
      "right" : "_skipUtf8_2(i);",
      "info" : "ExpressionStatement[107045-107060]:ExpressionStatement[107045-107060]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[107081-107087]:BreakStatement[107081-107087]"
    }, {
      "left" : "case 3:",
      "right" : "case 3:",
      "info" : "SwitchCase[107104-107111]:SwitchCase[107104-107111]"
    }, {
      "left" : "_skipUtf8_3(i);",
      "right" : "_skipUtf8_3(i);",
      "info" : "ExpressionStatement[107146-107161]:ExpressionStatement[107146-107161]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[107182-107188]:BreakStatement[107182-107188]"
    }, {
      "left" : "case 4:",
      "right" : "case 4:",
      "info" : "SwitchCase[107205-107212]:SwitchCase[107205-107212]"
    }, {
      "left" : "_skipUtf8_4(i);",
      "right" : "_skipUtf8_4(i);",
      "info" : "ExpressionStatement[107247-107262]:ExpressionStatement[107247-107262]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[107283-107289]:BreakStatement[107283-107289]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[107306-107314]:SwitchCase[107306-107314]"
    }, {
      "left" : "_reportInvalidChar(i);",
      "right" : "_reportInvalidChar(i);",
      "info" : "ExpressionStatement[107404-107426]:ExpressionStatement[107404-107426]"
    }, {
      "left" : "_reportInvalidEOF(\" in a comment\");",
      "right" : "_reportInvalidEOF(\" in a comment\");",
      "info" : "ExpressionStatement[107477-107512]:ExpressionStatement[107477-107512]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[107524-107531]:Modifier[107524-107531]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[107532-107537]:Modifier[107532-107537]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[107538-107545]:PrimitiveType[107538-107545]"
    }, {
      "left" : "_skipYAMLComment",
      "right" : "_skipYAMLComment",
      "info" : "SimpleName[107546-107562]:SimpleName[107546-107562]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[107572-107583]:SimpleType[107572-107583]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[107588-107728]:Block[107588-107728]"
    }, {
      "left" : "if (!isEnabled(Feature.ALLOW_YAML_COMMENTS))",
      "right" : "if (!isEnabled(Feature.ALLOW_YAML_COMMENTS))",
      "info" : "IfStatement[107598-107680]:IfStatement[107598-107680]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[107643-107680]:Block[107643-107680]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[107657-107670]:ReturnStatement[107657-107670]"
    }, {
      "left" : "_skipLine();",
      "right" : "_skipLine();",
      "info" : "ExpressionStatement[107689-107701]:ExpressionStatement[107689-107701]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[107710-107722]:ReturnStatement[107710-107722]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[107852-107859]:Modifier[107852-107859]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[107860-107865]:Modifier[107860-107865]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[107866-107870]:PrimitiveType[107866-107870]"
    }, {
      "left" : "_skipLine",
      "right" : "_skipLine",
      "info" : "SimpleName[107871-107880]:SimpleName[107871-107880]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[107890-107901]:SimpleType[107890-107901]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[107906-109089]:Block[107906-109089]"
    }, {
      "left" : "final int[] codes = CharTypes.getInputCodeComment();",
      "right" : "final int[] codes = CharTypes.getInputCodeComment();",
      "info" : "VariableDeclarationStatement[107960-108012]:VariableDeclarationStatement[107960-108012]"
    }, {
      "left" : "while ((_inputPtr < _inputEnd) || loadMore())",
      "right" : "while ((_inputPtr < _inputEnd) || loadMore())",
      "info" : "WhileStatement[108021-109083]:WhileStatement[108021-109083]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[108067-109083]:Block[108067-109083]"
    }, {
      "left" : "int i = (int) _inputBuffer[_inputPtr++] & 0xFF;",
      "right" : "int i = (int) _inputBuffer[_inputPtr++] & 0xFF;",
      "info" : "VariableDeclarationStatement[108081-108128]:VariableDeclarationStatement[108081-108128]"
    }, {
      "left" : "int code = codes[i];",
      "right" : "int code = codes[i];",
      "info" : "VariableDeclarationStatement[108141-108161]:VariableDeclarationStatement[108141-108161]"
    }, {
      "left" : "if (code != 0)",
      "right" : "if (code != 0)",
      "info" : "IfStatement[108174-109073]:IfStatement[108174-109073]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[108189-109073]:Block[108189-109073]"
    }, {
      "left" : "switch (code) {\n                case INT_LF:\n                    ++_currInputRow;\n                    _currInputRowStart = _inputPtr;\n                    return;\n                case INT_CR:\n                    _skipCR();\n                    return;\n                case '*': // nop for these comments\n                    break;\n                case 2: // 2-byte UTF\n                    _skipUtf8_2(i);\n                    break;\n                case 3: // 3-byte UTF\n                    _skipUtf8_3(i);\n                    break;\n                case 4: // 4-byte UTF\n                    _skipUtf8_4(i);\n                    break;\n                default: // e.g. -1\n                    if (code < 0) {\n                        // Is this good enough error message?\n                        _reportInvalidChar(i);\n                    }\n                }",
      "right" : "switch (code) {\n                case INT_LF:\n                    ++_currInputRow;\n                    _currInputRowStart = _inputPtr;\n                    return;\n                case INT_CR:\n                    _skipCR();\n                    return;\n                case '*': // nop for these comments\n                    break;\n                case 2: // 2-byte UTF\n                    _skipUtf8_2(i);\n                    break;\n                case 3: // 3-byte UTF\n                    _skipUtf8_3(i);\n                    break;\n                case 4: // 4-byte UTF\n                    _skipUtf8_4(i);\n                    break;\n                default: // e.g. -1\n                    if (code < 0) {\n                        // Is this good enough error message?\n                        _reportInvalidChar(i);\n                    }\n                }",
      "info" : "SwitchStatement[108207-109059]:SwitchStatement[108207-109059]"
    }, {
      "left" : "case INT_LF:",
      "right" : "case INT_LF:",
      "info" : "SwitchCase[108239-108251]:SwitchCase[108239-108251]"
    }, {
      "left" : "++_currInputRow;",
      "right" : "++_currInputRow;",
      "info" : "ExpressionStatement[108272-108288]:ExpressionStatement[108272-108288]"
    }, {
      "left" : "_currInputRowStart = _inputPtr;",
      "right" : "_currInputRowStart = _inputPtr;",
      "info" : "ExpressionStatement[108309-108340]:ExpressionStatement[108309-108340]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[108361-108368]:ReturnStatement[108361-108368]"
    }, {
      "left" : "case INT_CR:",
      "right" : "case INT_CR:",
      "info" : "SwitchCase[108385-108397]:SwitchCase[108385-108397]"
    }, {
      "left" : "_skipCR();",
      "right" : "_skipCR();",
      "info" : "ExpressionStatement[108418-108428]:ExpressionStatement[108418-108428]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[108449-108456]:ReturnStatement[108449-108456]"
    }, {
      "left" : "case '*':",
      "right" : "case '*':",
      "info" : "SwitchCase[108473-108482]:SwitchCase[108473-108482]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[108529-108535]:BreakStatement[108529-108535]"
    }, {
      "left" : "case 2:",
      "right" : "case 2:",
      "info" : "SwitchCase[108552-108559]:SwitchCase[108552-108559]"
    }, {
      "left" : "_skipUtf8_2(i);",
      "right" : "_skipUtf8_2(i);",
      "info" : "ExpressionStatement[108594-108609]:ExpressionStatement[108594-108609]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[108630-108636]:BreakStatement[108630-108636]"
    }, {
      "left" : "case 3:",
      "right" : "case 3:",
      "info" : "SwitchCase[108653-108660]:SwitchCase[108653-108660]"
    }, {
      "left" : "_skipUtf8_3(i);",
      "right" : "_skipUtf8_3(i);",
      "info" : "ExpressionStatement[108695-108710]:ExpressionStatement[108695-108710]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[108731-108737]:BreakStatement[108731-108737]"
    }, {
      "left" : "case 4:",
      "right" : "case 4:",
      "info" : "SwitchCase[108754-108761]:SwitchCase[108754-108761]"
    }, {
      "left" : "_skipUtf8_4(i);",
      "right" : "_skipUtf8_4(i);",
      "info" : "ExpressionStatement[108796-108811]:ExpressionStatement[108796-108811]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[108832-108838]:BreakStatement[108832-108838]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[108855-108863]:SwitchCase[108855-108863]"
    }, {
      "left" : "if (code < 0)",
      "right" : "if (code < 0)",
      "info" : "IfStatement[108895-109041]:IfStatement[108895-109041]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[108909-109041]:Block[108909-109041]"
    }, {
      "left" : "_reportInvalidChar(i);",
      "right" : "_reportInvalidChar(i);",
      "info" : "ExpressionStatement[108997-109019]:ExpressionStatement[108997-109019]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[109099-109108]:MarkerAnnotation[109099-109108]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[109113-109122]:Modifier[109113-109122]"
    }, {
      "left" : "char",
      "right" : "char",
      "info" : "PrimitiveType[109123-109127]:PrimitiveType[109123-109127]"
    }, {
      "left" : "_decodeEscaped",
      "right" : "_decodeEscaped",
      "info" : "SimpleName[109128-109142]:SimpleName[109128-109142]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[109152-109163]:SimpleType[109152-109163]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[109168-110599]:Block[109168-110599]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[109178-109330]:IfStatement[109178-109330]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[109206-109330]:Block[109206-109330]"
    }, {
      "left" : "if (!loadMore())",
      "right" : "if (!loadMore())",
      "info" : "IfStatement[109220-109320]:IfStatement[109220-109320]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[109237-109320]:Block[109237-109320]"
    }, {
      "left" : "_reportInvalidEOF(\" in character escape sequence\");",
      "right" : "_reportInvalidEOF(\" in character escape sequence\");",
      "info" : "ExpressionStatement[109255-109306]:ExpressionStatement[109255-109306]"
    }, {
      "left" : "int c = (int) _inputBuffer[_inputPtr++];",
      "right" : "int c = (int) _inputBuffer[_inputPtr++];",
      "info" : "VariableDeclarationStatement[109339-109379]:VariableDeclarationStatement[109339-109379]"
    }, {
      "left" : "switch (c) {\n            // First, ones that are mapped\n        case 'b':\n            return '\\b';\n        case 't':\n            return '\\t';\n        case 'n':\n            return '\\n';\n        case 'f':\n            return '\\f';\n        case 'r':\n            return '\\r';\n\n            // And these are to be returned as they are\n        case '\"':\n        case '/':\n        case '\\\\':\n            return (char) c;\n\n        case 'u': // and finally hex-escaped\n            break;\n\n        default:\n            return _handleUnrecognizedCharacterEscape((char) _decodeCharForError(c));\n        }",
      "right" : "switch (c) {\n            // First, ones that are mapped\n        case 'b':\n            return '\\b';\n        case 't':\n            return '\\t';\n        case 'n':\n            return '\\n';\n        case 'f':\n            return '\\f';\n        case 'r':\n            return '\\r';\n\n            // And these are to be returned as they are\n        case '\"':\n        case '/':\n        case '\\\\':\n            return (char) c;\n\n        case 'u': // and finally hex-escaped\n            break;\n\n        default:\n            return _handleUnrecognizedCharacterEscape((char) _decodeCharForError(c));\n        }",
      "info" : "SwitchStatement[109389-109979]:SwitchStatement[109389-109979]"
    }, {
      "left" : "case 'b':",
      "right" : "case 'b':",
      "info" : "SwitchCase[109453-109462]:SwitchCase[109453-109462]"
    }, {
      "left" : "return '\\b';",
      "right" : "return '\\b';",
      "info" : "ReturnStatement[109475-109487]:ReturnStatement[109475-109487]"
    }, {
      "left" : "case 't':",
      "right" : "case 't':",
      "info" : "SwitchCase[109496-109505]:SwitchCase[109496-109505]"
    }, {
      "left" : "return '\\t';",
      "right" : "return '\\t';",
      "info" : "ReturnStatement[109518-109530]:ReturnStatement[109518-109530]"
    }, {
      "left" : "case 'n':",
      "right" : "case 'n':",
      "info" : "SwitchCase[109539-109548]:SwitchCase[109539-109548]"
    }, {
      "left" : "return '\\n';",
      "right" : "return '\\n';",
      "info" : "ReturnStatement[109561-109573]:ReturnStatement[109561-109573]"
    }, {
      "left" : "case 'f':",
      "right" : "case 'f':",
      "info" : "SwitchCase[109582-109591]:SwitchCase[109582-109591]"
    }, {
      "left" : "return '\\f';",
      "right" : "return '\\f';",
      "info" : "ReturnStatement[109604-109616]:ReturnStatement[109604-109616]"
    }, {
      "left" : "case 'r':",
      "right" : "case 'r':",
      "info" : "SwitchCase[109625-109634]:SwitchCase[109625-109634]"
    }, {
      "left" : "return '\\r';",
      "right" : "return '\\r';",
      "info" : "ReturnStatement[109647-109659]:ReturnStatement[109647-109659]"
    }, {
      "left" : "case '\"':",
      "right" : "case '\"':",
      "info" : "SwitchCase[109725-109734]:SwitchCase[109725-109734]"
    }, {
      "left" : "case '/':",
      "right" : "case '/':",
      "info" : "SwitchCase[109743-109752]:SwitchCase[109743-109752]"
    }, {
      "left" : "case '\\\\':",
      "right" : "case '\\\\':",
      "info" : "SwitchCase[109761-109771]:SwitchCase[109761-109771]"
    }, {
      "left" : "return (char) c;",
      "right" : "return (char) c;",
      "info" : "ReturnStatement[109784-109800]:ReturnStatement[109784-109800]"
    }, {
      "left" : "case 'u':",
      "right" : "case 'u':",
      "info" : "SwitchCase[109810-109819]:SwitchCase[109810-109819]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[109859-109865]:BreakStatement[109859-109865]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[109875-109883]:SwitchCase[109875-109883]"
    }, {
      "left" : "return _handleUnrecognizedCharacterEscape((char) _decodeCharForError(c));",
      "right" : "return _handleUnrecognizedCharacterEscape((char) _decodeCharForError(c));",
      "info" : "ReturnStatement[109896-109969]:ReturnStatement[109896-109969]"
    }, {
      "left" : "int value = 0;",
      "right" : "int value = 0;",
      "info" : "VariableDeclarationStatement[110036-110050]:VariableDeclarationStatement[110036-110050]"
    }, {
      "left" : "for (int i = 0; i < 4; ++i)",
      "right" : "for (int i = 0; i < 4; ++i)",
      "info" : "ForStatement[110059-110564]:ForStatement[110059-110564]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[110087-110564]:Block[110087-110564]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[110101-110269]:IfStatement[110101-110269]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[110129-110269]:Block[110129-110269]"
    }, {
      "left" : "if (!loadMore())",
      "right" : "if (!loadMore())",
      "info" : "IfStatement[110147-110255]:IfStatement[110147-110255]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[110164-110255]:Block[110164-110255]"
    }, {
      "left" : "_reportInvalidEOF(\" in character escape sequence\");",
      "right" : "_reportInvalidEOF(\" in character escape sequence\");",
      "info" : "ExpressionStatement[110186-110237]:ExpressionStatement[110186-110237]"
    }, {
      "left" : "int ch = (int) _inputBuffer[_inputPtr++];",
      "right" : "int ch = (int) _inputBuffer[_inputPtr++];",
      "info" : "VariableDeclarationStatement[110282-110323]:VariableDeclarationStatement[110282-110323]"
    }, {
      "left" : "int digit = CharTypes.charToHex(ch);",
      "right" : "int digit = CharTypes.charToHex(ch);",
      "info" : "VariableDeclarationStatement[110336-110372]:VariableDeclarationStatement[110336-110372]"
    }, {
      "left" : "if (digit < 0)",
      "right" : "if (digit < 0)",
      "info" : "IfStatement[110385-110512]:IfStatement[110385-110512]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[110400-110512]:Block[110400-110512]"
    }, {
      "left" : "_reportUnexpectedChar(ch, \"expected a hex-digit for character escape sequence\");",
      "right" : "_reportUnexpectedChar(ch, \"expected a hex-digit for character escape sequence\");",
      "info" : "ExpressionStatement[110418-110498]:ExpressionStatement[110418-110498]"
    }, {
      "left" : "value = (value << 4) | digit;",
      "right" : "value = (value << 4) | digit;",
      "info" : "ExpressionStatement[110525-110554]:ExpressionStatement[110525-110554]"
    }, {
      "left" : "return (char) value;",
      "right" : "return (char) value;",
      "info" : "ReturnStatement[110573-110593]:ReturnStatement[110573-110593]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[110605-110614]:Modifier[110605-110614]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[110615-110618]:PrimitiveType[110615-110618]"
    }, {
      "left" : "_decodeCharForError",
      "right" : "_decodeCharForError",
      "info" : "SimpleName[110619-110638]:SimpleName[110619-110638]"
    }, {
      "left" : "int firstByte",
      "right" : "int firstByte",
      "info" : "SingleVariableDeclaration[110639-110652]:SingleVariableDeclaration[110639-110652]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[110661-110672]:SimpleType[110661-110672]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[110677-112209]:Block[110677-112209]"
    }, {
      "left" : "int c = firstByte & 0xFF;",
      "right" : "int c = firstByte & 0xFF;",
      "info" : "VariableDeclarationStatement[110687-110712]:VariableDeclarationStatement[110687-110712]"
    }, {
      "left" : "if (c > 0x7F)",
      "right" : "if (c > 0x7F)",
      "info" : "IfStatement[110721-112185]:IfStatement[110721-112185]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[110735-112185]:Block[110735-112185]"
    }, {
      "left" : "int needed;",
      "right" : "int needed;",
      "info" : "VariableDeclarationStatement[110785-110796]:VariableDeclarationStatement[110785-110796]"
    }, {
      "left" : "if ((c & 0xE0) == 0xC0)",
      "right" : "if ((c & 0xE0) == 0xC0)",
      "info" : "IfStatement[110887-111423]:IfStatement[110887-111423]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[110911-111010]:Block[110911-111010]"
    }, {
      "left" : "c &= 0x1F;",
      "right" : "c &= 0x1F;",
      "info" : "ExpressionStatement[110958-110968]:ExpressionStatement[110958-110968]"
    }, {
      "left" : "needed = 1;",
      "right" : "needed = 1;",
      "info" : "ExpressionStatement[110985-110996]:ExpressionStatement[110985-110996]"
    }, {
      "left" : "if ((c & 0xF0) == 0xE0)",
      "right" : "if ((c & 0xF0) == 0xE0)",
      "info" : "IfStatement[111016-111423]:IfStatement[111016-111423]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[111040-111139]:Block[111040-111139]"
    }, {
      "left" : "c &= 0x0F;",
      "right" : "c &= 0x0F;",
      "info" : "ExpressionStatement[111087-111097]:ExpressionStatement[111087-111097]"
    }, {
      "left" : "needed = 2;",
      "right" : "needed = 2;",
      "info" : "ExpressionStatement[111114-111125]:ExpressionStatement[111114-111125]"
    }, {
      "left" : "if ((c & 0xF8) == 0xF0)",
      "right" : "if ((c & 0xF8) == 0xF0)",
      "info" : "IfStatement[111145-111423]:IfStatement[111145-111423]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[111169-111306]:Block[111169-111306]"
    }, {
      "left" : "c &= 0x07;",
      "right" : "c &= 0x07;",
      "info" : "ExpressionStatement[111254-111264]:ExpressionStatement[111254-111264]"
    }, {
      "left" : "needed = 3;",
      "right" : "needed = 3;",
      "info" : "ExpressionStatement[111281-111292]:ExpressionStatement[111281-111292]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[111312-111423]:Block[111312-111423]"
    }, {
      "left" : "_reportInvalidInitial(c & 0xFF);",
      "right" : "_reportInvalidInitial(c & 0xFF);",
      "info" : "ExpressionStatement[111330-111362]:ExpressionStatement[111330-111362]"
    }, {
      "left" : "needed = 1;",
      "right" : "needed = 1;",
      "info" : "ExpressionStatement[111379-111390]:ExpressionStatement[111379-111390]"
    }, {
      "left" : "int d = nextByte();",
      "right" : "int d = nextByte();",
      "info" : "VariableDeclarationStatement[111437-111456]:VariableDeclarationStatement[111437-111456]"
    }, {
      "left" : "if ((d & 0xC0) != 0x080)",
      "right" : "if ((d & 0xC0) != 0x080)",
      "info" : "IfStatement[111469-111556]:IfStatement[111469-111556]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[111494-111556]:Block[111494-111556]"
    }, {
      "left" : "_reportInvalidOther(d & 0xFF);",
      "right" : "_reportInvalidOther(d & 0xFF);",
      "info" : "ExpressionStatement[111512-111542]:ExpressionStatement[111512-111542]"
    }, {
      "left" : "c = (c << 6) | (d & 0x3F);",
      "right" : "c = (c << 6) | (d & 0x3F);",
      "info" : "ExpressionStatement[111569-111595]:ExpressionStatement[111569-111595]"
    }, {
      "left" : "if (needed > 1)",
      "right" : "if (needed > 1)",
      "info" : "IfStatement[111621-112175]:IfStatement[111621-112175]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[111637-112175]:Block[111637-112175]"
    }, {
      "left" : "d = nextByte();",
      "right" : "d = nextByte();",
      "info" : "ExpressionStatement[111690-111705]:ExpressionStatement[111690-111705]"
    }, {
      "left" : "if ((d & 0xC0) != 0x080)",
      "right" : "if ((d & 0xC0) != 0x080)",
      "info" : "IfStatement[111734-111829]:IfStatement[111734-111829]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[111759-111829]:Block[111759-111829]"
    }, {
      "left" : "_reportInvalidOther(d & 0xFF);",
      "right" : "_reportInvalidOther(d & 0xFF);",
      "info" : "ExpressionStatement[111781-111811]:ExpressionStatement[111781-111811]"
    }, {
      "left" : "c = (c << 6) | (d & 0x3F);",
      "right" : "c = (c << 6) | (d & 0x3F);",
      "info" : "ExpressionStatement[111846-111872]:ExpressionStatement[111846-111872]"
    }, {
      "left" : "if (needed > 2)",
      "right" : "if (needed > 2)",
      "info" : "IfStatement[111889-112161]:IfStatement[111889-112161]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[111905-112161]:Block[111905-112161]"
    }, {
      "left" : "d = nextByte();",
      "right" : "d = nextByte();",
      "info" : "ExpressionStatement[111957-111972]:ExpressionStatement[111957-111972]"
    }, {
      "left" : "if ((d & 0xC0) != 0x080)",
      "right" : "if ((d & 0xC0) != 0x080)",
      "info" : "IfStatement[111993-112096]:IfStatement[111993-112096]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[112018-112096]:Block[112018-112096]"
    }, {
      "left" : "_reportInvalidOther(d & 0xFF);",
      "right" : "_reportInvalidOther(d & 0xFF);",
      "info" : "ExpressionStatement[112044-112074]:ExpressionStatement[112044-112074]"
    }, {
      "left" : "c = (c << 6) | (d & 0x3F);",
      "right" : "c = (c << 6) | (d & 0x3F);",
      "info" : "ExpressionStatement[112117-112143]:ExpressionStatement[112117-112143]"
    }, {
      "left" : "return c;",
      "right" : "return c;",
      "info" : "ReturnStatement[112194-112203]:ReturnStatement[112194-112203]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[112397-112404]:Modifier[112397-112404]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[112405-112410]:Modifier[112405-112410]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[112411-112414]:PrimitiveType[112411-112414]"
    }, {
      "left" : "_decodeUtf8_2",
      "right" : "_decodeUtf8_2",
      "info" : "SimpleName[112415-112428]:SimpleName[112415-112428]"
    }, {
      "left" : "int c",
      "right" : "int c",
      "info" : "SingleVariableDeclaration[112429-112434]:SingleVariableDeclaration[112429-112434]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[112443-112454]:SimpleType[112443-112454]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[112459-112743]:Block[112459-112743]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[112469-112542]:IfStatement[112469-112542]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[112497-112542]:Block[112497-112542]"
    }, {
      "left" : "loadMoreGuaranteed();",
      "right" : "loadMoreGuaranteed();",
      "info" : "ExpressionStatement[112511-112532]:ExpressionStatement[112511-112532]"
    }, {
      "left" : "int d = (int) _inputBuffer[_inputPtr++];",
      "right" : "int d = (int) _inputBuffer[_inputPtr++];",
      "info" : "VariableDeclarationStatement[112551-112591]:VariableDeclarationStatement[112551-112591]"
    }, {
      "left" : "if ((d & 0xC0) != 0x080)",
      "right" : "if ((d & 0xC0) != 0x080)",
      "info" : "IfStatement[112600-112690]:IfStatement[112600-112690]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[112625-112690]:Block[112625-112690]"
    }, {
      "left" : "_reportInvalidOther(d & 0xFF, _inputPtr);",
      "right" : "_reportInvalidOther(d & 0xFF, _inputPtr);",
      "info" : "ExpressionStatement[112639-112680]:ExpressionStatement[112639-112680]"
    }, {
      "left" : "return ((c & 0x1F) << 6) | (d & 0x3F);",
      "right" : "return ((c & 0x1F) << 6) | (d & 0x3F);",
      "info" : "ReturnStatement[112699-112737]:ReturnStatement[112699-112737]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[112749-112756]:Modifier[112749-112756]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[112757-112762]:Modifier[112757-112762]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[112763-112766]:PrimitiveType[112763-112766]"
    }, {
      "left" : "_decodeUtf8_3",
      "right" : "_decodeUtf8_3",
      "info" : "SimpleName[112767-112780]:SimpleName[112767-112780]"
    }, {
      "left" : "int c1",
      "right" : "int c1",
      "info" : "SingleVariableDeclaration[112781-112787]:SingleVariableDeclaration[112781-112787]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[112796-112807]:SimpleType[112796-112807]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[112812-113388]:Block[112812-113388]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[112822-112895]:IfStatement[112822-112895]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[112850-112895]:Block[112850-112895]"
    }, {
      "left" : "loadMoreGuaranteed();",
      "right" : "loadMoreGuaranteed();",
      "info" : "ExpressionStatement[112864-112885]:ExpressionStatement[112864-112885]"
    }, {
      "left" : "c1 &= 0x0F;",
      "right" : "c1 &= 0x0F;",
      "info" : "ExpressionStatement[112904-112915]:ExpressionStatement[112904-112915]"
    }, {
      "left" : "int d = (int) _inputBuffer[_inputPtr++];",
      "right" : "int d = (int) _inputBuffer[_inputPtr++];",
      "info" : "VariableDeclarationStatement[112924-112964]:VariableDeclarationStatement[112924-112964]"
    }, {
      "left" : "if ((d & 0xC0) != 0x080)",
      "right" : "if ((d & 0xC0) != 0x080)",
      "info" : "IfStatement[112973-113063]:IfStatement[112973-113063]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[112998-113063]:Block[112998-113063]"
    }, {
      "left" : "_reportInvalidOther(d & 0xFF, _inputPtr);",
      "right" : "_reportInvalidOther(d & 0xFF, _inputPtr);",
      "info" : "ExpressionStatement[113012-113053]:ExpressionStatement[113012-113053]"
    }, {
      "left" : "int c = (c1 << 6) | (d & 0x3F);",
      "right" : "int c = (c1 << 6) | (d & 0x3F);",
      "info" : "VariableDeclarationStatement[113072-113103]:VariableDeclarationStatement[113072-113103]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[113112-113185]:IfStatement[113112-113185]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[113140-113185]:Block[113140-113185]"
    }, {
      "left" : "loadMoreGuaranteed();",
      "right" : "loadMoreGuaranteed();",
      "info" : "ExpressionStatement[113154-113175]:ExpressionStatement[113154-113175]"
    }, {
      "left" : "d = (int) _inputBuffer[_inputPtr++];",
      "right" : "d = (int) _inputBuffer[_inputPtr++];",
      "info" : "ExpressionStatement[113194-113230]:ExpressionStatement[113194-113230]"
    }, {
      "left" : "if ((d & 0xC0) != 0x080)",
      "right" : "if ((d & 0xC0) != 0x080)",
      "info" : "IfStatement[113239-113329]:IfStatement[113239-113329]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[113264-113329]:Block[113264-113329]"
    }, {
      "left" : "_reportInvalidOther(d & 0xFF, _inputPtr);",
      "right" : "_reportInvalidOther(d & 0xFF, _inputPtr);",
      "info" : "ExpressionStatement[113278-113319]:ExpressionStatement[113278-113319]"
    }, {
      "left" : "c = (c << 6) | (d & 0x3F);",
      "right" : "c = (c << 6) | (d & 0x3F);",
      "info" : "ExpressionStatement[113338-113364]:ExpressionStatement[113338-113364]"
    }, {
      "left" : "return c;",
      "right" : "return c;",
      "info" : "ReturnStatement[113373-113382]:ReturnStatement[113373-113382]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[113394-113401]:Modifier[113394-113401]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[113402-113407]:Modifier[113402-113407]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[113408-113411]:PrimitiveType[113408-113411]"
    }, {
      "left" : "_decodeUtf8_3fast",
      "right" : "_decodeUtf8_3fast",
      "info" : "SimpleName[113412-113429]:SimpleName[113412-113429]"
    }, {
      "left" : "int c1",
      "right" : "int c1",
      "info" : "SingleVariableDeclaration[113430-113436]:SingleVariableDeclaration[113430-113436]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[113445-113456]:SimpleType[113445-113456]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[113461-113873]:Block[113461-113873]"
    }, {
      "left" : "c1 &= 0x0F;",
      "right" : "c1 &= 0x0F;",
      "info" : "ExpressionStatement[113471-113482]:ExpressionStatement[113471-113482]"
    }, {
      "left" : "int d = (int) _inputBuffer[_inputPtr++];",
      "right" : "int d = (int) _inputBuffer[_inputPtr++];",
      "info" : "VariableDeclarationStatement[113491-113531]:VariableDeclarationStatement[113491-113531]"
    }, {
      "left" : "if ((d & 0xC0) != 0x080)",
      "right" : "if ((d & 0xC0) != 0x080)",
      "info" : "IfStatement[113540-113630]:IfStatement[113540-113630]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[113565-113630]:Block[113565-113630]"
    }, {
      "left" : "_reportInvalidOther(d & 0xFF, _inputPtr);",
      "right" : "_reportInvalidOther(d & 0xFF, _inputPtr);",
      "info" : "ExpressionStatement[113579-113620]:ExpressionStatement[113579-113620]"
    }, {
      "left" : "int c = (c1 << 6) | (d & 0x3F);",
      "right" : "int c = (c1 << 6) | (d & 0x3F);",
      "info" : "VariableDeclarationStatement[113639-113670]:VariableDeclarationStatement[113639-113670]"
    }, {
      "left" : "d = (int) _inputBuffer[_inputPtr++];",
      "right" : "d = (int) _inputBuffer[_inputPtr++];",
      "info" : "ExpressionStatement[113679-113715]:ExpressionStatement[113679-113715]"
    }, {
      "left" : "if ((d & 0xC0) != 0x080)",
      "right" : "if ((d & 0xC0) != 0x080)",
      "info" : "IfStatement[113724-113814]:IfStatement[113724-113814]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[113749-113814]:Block[113749-113814]"
    }, {
      "left" : "_reportInvalidOther(d & 0xFF, _inputPtr);",
      "right" : "_reportInvalidOther(d & 0xFF, _inputPtr);",
      "info" : "ExpressionStatement[113763-113804]:ExpressionStatement[113763-113804]"
    }, {
      "left" : "c = (c << 6) | (d & 0x3F);",
      "right" : "c = (c << 6) | (d & 0x3F);",
      "info" : "ExpressionStatement[113823-113849]:ExpressionStatement[113823-113849]"
    }, {
      "left" : "return c;",
      "right" : "return c;",
      "info" : "ReturnStatement[113858-113867]:ReturnStatement[113858-113867]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[114021-114028]:Modifier[114021-114028]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[114029-114034]:Modifier[114029-114034]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[114035-114038]:PrimitiveType[114035-114038]"
    }, {
      "left" : "_decodeUtf8_4",
      "right" : "_decodeUtf8_4",
      "info" : "SimpleName[114039-114052]:SimpleName[114039-114052]"
    }, {
      "left" : "int c",
      "right" : "int c",
      "info" : "SingleVariableDeclaration[114053-114058]:SingleVariableDeclaration[114053-114058]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[114067-114078]:SimpleType[114067-114078]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[114083-115027]:Block[114083-115027]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[114093-114166]:IfStatement[114093-114166]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[114121-114166]:Block[114121-114166]"
    }, {
      "left" : "loadMoreGuaranteed();",
      "right" : "loadMoreGuaranteed();",
      "info" : "ExpressionStatement[114135-114156]:ExpressionStatement[114135-114156]"
    }, {
      "left" : "int d = (int) _inputBuffer[_inputPtr++];",
      "right" : "int d = (int) _inputBuffer[_inputPtr++];",
      "info" : "VariableDeclarationStatement[114175-114215]:VariableDeclarationStatement[114175-114215]"
    }, {
      "left" : "if ((d & 0xC0) != 0x080)",
      "right" : "if ((d & 0xC0) != 0x080)",
      "info" : "IfStatement[114224-114314]:IfStatement[114224-114314]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[114249-114314]:Block[114249-114314]"
    }, {
      "left" : "_reportInvalidOther(d & 0xFF, _inputPtr);",
      "right" : "_reportInvalidOther(d & 0xFF, _inputPtr);",
      "info" : "ExpressionStatement[114263-114304]:ExpressionStatement[114263-114304]"
    }, {
      "left" : "c = ((c & 0x07) << 6) | (d & 0x3F);",
      "right" : "c = ((c & 0x07) << 6) | (d & 0x3F);",
      "info" : "ExpressionStatement[114323-114358]:ExpressionStatement[114323-114358]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[114368-114441]:IfStatement[114368-114441]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[114396-114441]:Block[114396-114441]"
    }, {
      "left" : "loadMoreGuaranteed();",
      "right" : "loadMoreGuaranteed();",
      "info" : "ExpressionStatement[114410-114431]:ExpressionStatement[114410-114431]"
    }, {
      "left" : "d = (int) _inputBuffer[_inputPtr++];",
      "right" : "d = (int) _inputBuffer[_inputPtr++];",
      "info" : "ExpressionStatement[114450-114486]:ExpressionStatement[114450-114486]"
    }, {
      "left" : "if ((d & 0xC0) != 0x080)",
      "right" : "if ((d & 0xC0) != 0x080)",
      "info" : "IfStatement[114495-114585]:IfStatement[114495-114585]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[114520-114585]:Block[114520-114585]"
    }, {
      "left" : "_reportInvalidOther(d & 0xFF, _inputPtr);",
      "right" : "_reportInvalidOther(d & 0xFF, _inputPtr);",
      "info" : "ExpressionStatement[114534-114575]:ExpressionStatement[114534-114575]"
    }, {
      "left" : "c = (c << 6) | (d & 0x3F);",
      "right" : "c = (c << 6) | (d & 0x3F);",
      "info" : "ExpressionStatement[114594-114620]:ExpressionStatement[114594-114620]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[114629-114702]:IfStatement[114629-114702]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[114657-114702]:Block[114657-114702]"
    }, {
      "left" : "loadMoreGuaranteed();",
      "right" : "loadMoreGuaranteed();",
      "info" : "ExpressionStatement[114671-114692]:ExpressionStatement[114671-114692]"
    }, {
      "left" : "d = (int) _inputBuffer[_inputPtr++];",
      "right" : "d = (int) _inputBuffer[_inputPtr++];",
      "info" : "ExpressionStatement[114711-114747]:ExpressionStatement[114711-114747]"
    }, {
      "left" : "if ((d & 0xC0) != 0x080)",
      "right" : "if ((d & 0xC0) != 0x080)",
      "info" : "IfStatement[114756-114846]:IfStatement[114756-114846]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[114781-114846]:Block[114781-114846]"
    }, {
      "left" : "_reportInvalidOther(d & 0xFF, _inputPtr);",
      "right" : "_reportInvalidOther(d & 0xFF, _inputPtr);",
      "info" : "ExpressionStatement[114795-114836]:ExpressionStatement[114795-114836]"
    }, {
      "left" : "return ((c << 6) | (d & 0x3F)) - 0x10000;",
      "right" : "return ((c << 6) | (d & 0x3F)) - 0x10000;",
      "info" : "ReturnStatement[114980-115021]:ReturnStatement[114980-115021]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[115033-115040]:Modifier[115033-115040]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[115041-115046]:Modifier[115041-115046]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[115047-115051]:PrimitiveType[115047-115051]"
    }, {
      "left" : "_skipUtf8_2",
      "right" : "_skipUtf8_2",
      "info" : "SimpleName[115052-115063]:SimpleName[115052-115063]"
    }, {
      "left" : "int c",
      "right" : "int c",
      "info" : "SingleVariableDeclaration[115064-115069]:SingleVariableDeclaration[115064-115069]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[115078-115089]:SimpleType[115078-115089]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[115094-115327]:Block[115094-115327]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[115104-115177]:IfStatement[115104-115177]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[115132-115177]:Block[115132-115177]"
    }, {
      "left" : "loadMoreGuaranteed();",
      "right" : "loadMoreGuaranteed();",
      "info" : "ExpressionStatement[115146-115167]:ExpressionStatement[115146-115167]"
    }, {
      "left" : "c = (int) _inputBuffer[_inputPtr++];",
      "right" : "c = (int) _inputBuffer[_inputPtr++];",
      "info" : "ExpressionStatement[115186-115222]:ExpressionStatement[115186-115222]"
    }, {
      "left" : "if ((c & 0xC0) != 0x080)",
      "right" : "if ((c & 0xC0) != 0x080)",
      "info" : "IfStatement[115231-115321]:IfStatement[115231-115321]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[115256-115321]:Block[115256-115321]"
    }, {
      "left" : "_reportInvalidOther(c & 0xFF, _inputPtr);",
      "right" : "_reportInvalidOther(c & 0xFF, _inputPtr);",
      "info" : "ExpressionStatement[115270-115311]:ExpressionStatement[115270-115311]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[115439-115446]:Modifier[115439-115446]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[115447-115452]:Modifier[115447-115452]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[115453-115457]:PrimitiveType[115453-115457]"
    }, {
      "left" : "_skipUtf8_3",
      "right" : "_skipUtf8_3",
      "info" : "SimpleName[115458-115469]:SimpleName[115458-115469]"
    }, {
      "left" : "int c",
      "right" : "int c",
      "info" : "SingleVariableDeclaration[115470-115475]:SingleVariableDeclaration[115470-115475]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[115484-115495]:SimpleType[115484-115495]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[115500-115980]:Block[115500-115980]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[115510-115583]:IfStatement[115510-115583]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[115538-115583]:Block[115538-115583]"
    }, {
      "left" : "loadMoreGuaranteed();",
      "right" : "loadMoreGuaranteed();",
      "info" : "ExpressionStatement[115552-115573]:ExpressionStatement[115552-115573]"
    }, {
      "left" : "c = (int) _inputBuffer[_inputPtr++];",
      "right" : "c = (int) _inputBuffer[_inputPtr++];",
      "info" : "ExpressionStatement[115613-115649]:ExpressionStatement[115613-115649]"
    }, {
      "left" : "if ((c & 0xC0) != 0x080)",
      "right" : "if ((c & 0xC0) != 0x080)",
      "info" : "IfStatement[115658-115748]:IfStatement[115658-115748]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[115683-115748]:Block[115683-115748]"
    }, {
      "left" : "_reportInvalidOther(c & 0xFF, _inputPtr);",
      "right" : "_reportInvalidOther(c & 0xFF, _inputPtr);",
      "info" : "ExpressionStatement[115697-115738]:ExpressionStatement[115697-115738]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[115757-115830]:IfStatement[115757-115830]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[115785-115830]:Block[115785-115830]"
    }, {
      "left" : "loadMoreGuaranteed();",
      "right" : "loadMoreGuaranteed();",
      "info" : "ExpressionStatement[115799-115820]:ExpressionStatement[115799-115820]"
    }, {
      "left" : "c = (int) _inputBuffer[_inputPtr++];",
      "right" : "c = (int) _inputBuffer[_inputPtr++];",
      "info" : "ExpressionStatement[115839-115875]:ExpressionStatement[115839-115875]"
    }, {
      "left" : "if ((c & 0xC0) != 0x080)",
      "right" : "if ((c & 0xC0) != 0x080)",
      "info" : "IfStatement[115884-115974]:IfStatement[115884-115974]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[115909-115974]:Block[115909-115974]"
    }, {
      "left" : "_reportInvalidOther(c & 0xFF, _inputPtr);",
      "right" : "_reportInvalidOther(c & 0xFF, _inputPtr);",
      "info" : "ExpressionStatement[115923-115964]:ExpressionStatement[115923-115964]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[115986-115993]:Modifier[115986-115993]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[115994-115999]:Modifier[115994-115999]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[116000-116004]:PrimitiveType[116000-116004]"
    }, {
      "left" : "_skipUtf8_4",
      "right" : "_skipUtf8_4",
      "info" : "SimpleName[116005-116016]:SimpleName[116005-116016]"
    }, {
      "left" : "int c",
      "right" : "int c",
      "info" : "SingleVariableDeclaration[116017-116022]:SingleVariableDeclaration[116017-116022]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[116031-116042]:SimpleType[116031-116042]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[116047-116736]:Block[116047-116736]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[116057-116130]:IfStatement[116057-116130]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[116085-116130]:Block[116085-116130]"
    }, {
      "left" : "loadMoreGuaranteed();",
      "right" : "loadMoreGuaranteed();",
      "info" : "ExpressionStatement[116099-116120]:ExpressionStatement[116099-116120]"
    }, {
      "left" : "int d = (int) _inputBuffer[_inputPtr++];",
      "right" : "int d = (int) _inputBuffer[_inputPtr++];",
      "info" : "VariableDeclarationStatement[116139-116179]:VariableDeclarationStatement[116139-116179]"
    }, {
      "left" : "if ((d & 0xC0) != 0x080)",
      "right" : "if ((d & 0xC0) != 0x080)",
      "info" : "IfStatement[116188-116278]:IfStatement[116188-116278]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[116213-116278]:Block[116213-116278]"
    }, {
      "left" : "_reportInvalidOther(d & 0xFF, _inputPtr);",
      "right" : "_reportInvalidOther(d & 0xFF, _inputPtr);",
      "info" : "ExpressionStatement[116227-116268]:ExpressionStatement[116227-116268]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[116287-116360]:IfStatement[116287-116360]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[116315-116360]:Block[116315-116360]"
    }, {
      "left" : "loadMoreGuaranteed();",
      "right" : "loadMoreGuaranteed();",
      "info" : "ExpressionStatement[116329-116350]:ExpressionStatement[116329-116350]"
    }, {
      "left" : "d = (int) _inputBuffer[_inputPtr++];",
      "right" : "d = (int) _inputBuffer[_inputPtr++];",
      "info" : "ExpressionStatement[116369-116405]:ExpressionStatement[116369-116405]"
    }, {
      "left" : "if ((d & 0xC0) != 0x080)",
      "right" : "if ((d & 0xC0) != 0x080)",
      "info" : "IfStatement[116414-116504]:IfStatement[116414-116504]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[116439-116504]:Block[116439-116504]"
    }, {
      "left" : "_reportInvalidOther(d & 0xFF, _inputPtr);",
      "right" : "_reportInvalidOther(d & 0xFF, _inputPtr);",
      "info" : "ExpressionStatement[116453-116494]:ExpressionStatement[116453-116494]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[116513-116586]:IfStatement[116513-116586]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[116541-116586]:Block[116541-116586]"
    }, {
      "left" : "loadMoreGuaranteed();",
      "right" : "loadMoreGuaranteed();",
      "info" : "ExpressionStatement[116555-116576]:ExpressionStatement[116555-116576]"
    }, {
      "left" : "d = (int) _inputBuffer[_inputPtr++];",
      "right" : "d = (int) _inputBuffer[_inputPtr++];",
      "info" : "ExpressionStatement[116595-116631]:ExpressionStatement[116595-116631]"
    }, {
      "left" : "if ((d & 0xC0) != 0x080)",
      "right" : "if ((d & 0xC0) != 0x080)",
      "info" : "IfStatement[116640-116730]:IfStatement[116640-116730]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[116665-116730]:Block[116665-116730]"
    }, {
      "left" : "_reportInvalidOther(d & 0xFF, _inputPtr);",
      "right" : "_reportInvalidOther(d & 0xFF, _inputPtr);",
      "info" : "ExpressionStatement[116679-116720]:ExpressionStatement[116679-116720]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[117043-117052]:Modifier[117043-117052]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[117053-117058]:Modifier[117053-117058]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[117059-117063]:PrimitiveType[117059-117063]"
    }, {
      "left" : "_skipCR",
      "right" : "_skipCR",
      "info" : "SimpleName[117064-117071]:SimpleName[117064-117071]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[117081-117092]:SimpleType[117081-117092]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[117097-117327]:Block[117097-117327]"
    }, {
      "left" : "if (_inputPtr < _inputEnd || loadMore())",
      "right" : "if (_inputPtr < _inputEnd || loadMore())",
      "info" : "IfStatement[117107-117256]:IfStatement[117107-117256]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[117148-117256]:Block[117148-117256]"
    }, {
      "left" : "if (_inputBuffer[_inputPtr] == BYTE_LF)",
      "right" : "if (_inputBuffer[_inputPtr] == BYTE_LF)",
      "info" : "IfStatement[117162-117246]:IfStatement[117162-117246]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[117202-117246]:Block[117202-117246]"
    }, {
      "left" : "++_inputPtr;",
      "right" : "++_inputPtr;",
      "info" : "ExpressionStatement[117220-117232]:ExpressionStatement[117220-117232]"
    }, {
      "left" : "++_currInputRow;",
      "right" : "++_currInputRow;",
      "info" : "ExpressionStatement[117265-117281]:ExpressionStatement[117265-117281]"
    }, {
      "left" : "_currInputRowStart = _inputPtr;",
      "right" : "_currInputRowStart = _inputPtr;",
      "info" : "ExpressionStatement[117290-117321]:ExpressionStatement[117290-117321]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[117337-117344]:Modifier[117337-117344]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[117345-117348]:PrimitiveType[117345-117348]"
    }, {
      "left" : "nextByte",
      "right" : "nextByte",
      "info" : "SimpleName[117349-117357]:SimpleName[117349-117357]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[117367-117378]:SimpleType[117367-117378]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[117383-117521]:Block[117383-117521]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[117393-117466]:IfStatement[117393-117466]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[117421-117466]:Block[117421-117466]"
    }, {
      "left" : "loadMoreGuaranteed();",
      "right" : "loadMoreGuaranteed();",
      "info" : "ExpressionStatement[117435-117456]:ExpressionStatement[117435-117456]"
    }, {
      "left" : "return _inputBuffer[_inputPtr++] & 0xFF;",
      "right" : "return _inputBuffer[_inputPtr++] & 0xFF;",
      "info" : "ReturnStatement[117475-117515]:ReturnStatement[117475-117515]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[117712-117721]:Modifier[117712-117721]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[117722-117726]:PrimitiveType[117722-117726]"
    }, {
      "left" : "_reportInvalidToken",
      "right" : "_reportInvalidToken",
      "info" : "SimpleName[117727-117746]:SimpleName[117727-117746]"
    }, {
      "left" : "String matchedPart",
      "right" : "String matchedPart",
      "info" : "SingleVariableDeclaration[117747-117765]:SingleVariableDeclaration[117747-117765]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[117774-117785]:SimpleType[117774-117785]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[117791-117876]:Block[117791-117876]"
    }, {
      "left" : "_reportInvalidToken(matchedPart, \"'null', 'true', 'false' or NaN\");",
      "right" : "_reportInvalidToken(matchedPart, \"'null', 'true', 'false' or NaN\");",
      "info" : "ExpressionStatement[117802-117869]:ExpressionStatement[117802-117869]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[117882-117891]:Modifier[117882-117891]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[117892-117896]:PrimitiveType[117892-117896]"
    }, {
      "left" : "_reportInvalidToken",
      "right" : "_reportInvalidToken",
      "info" : "SimpleName[117897-117916]:SimpleName[117897-117916]"
    }, {
      "left" : "String matchedPart",
      "right" : "String matchedPart",
      "info" : "SingleVariableDeclaration[117917-117935]:SingleVariableDeclaration[117917-117935]"
    }, {
      "left" : "String msg",
      "right" : "String msg",
      "info" : "SingleVariableDeclaration[117937-117947]:SingleVariableDeclaration[117937-117947]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[117956-117967]:SimpleType[117956-117967]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[117973-118690]:Block[117973-118690]"
    }, {
      "left" : "StringBuilder sb = new StringBuilder(matchedPart);",
      "right" : "StringBuilder sb = new StringBuilder(matchedPart);",
      "info" : "VariableDeclarationStatement[117984-118034]:VariableDeclarationStatement[117984-118034]"
    }, {
      "left" : "while (true)",
      "right" : "while (true)",
      "info" : "WhileStatement[118248-118598]:WhileStatement[118248-118598]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[118261-118598]:Block[118261-118598]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd && !loadMore())",
      "right" : "if (_inputPtr >= _inputEnd && !loadMore())",
      "info" : "IfStatement[118276-118359]:IfStatement[118276-118359]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[118319-118359]:Block[118319-118359]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[118338-118344]:BreakStatement[118338-118344]"
    }, {
      "left" : "int i = (int) _inputBuffer[_inputPtr++];",
      "right" : "int i = (int) _inputBuffer[_inputPtr++];",
      "info" : "VariableDeclarationStatement[118373-118413]:VariableDeclarationStatement[118373-118413]"
    }, {
      "left" : "char c = (char) _decodeCharForError(i);",
      "right" : "char c = (char) _decodeCharForError(i);",
      "info" : "VariableDeclarationStatement[118427-118466]:VariableDeclarationStatement[118427-118466]"
    }, {
      "left" : "if (!Character.isJavaIdentifierPart(c))",
      "right" : "if (!Character.isJavaIdentifierPart(c))",
      "info" : "IfStatement[118480-118560]:IfStatement[118480-118560]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[118520-118560]:Block[118520-118560]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[118539-118545]:BreakStatement[118539-118545]"
    }, {
      "left" : "sb.append(c);",
      "right" : "sb.append(c);",
      "info" : "ExpressionStatement[118574-118587]:ExpressionStatement[118574-118587]"
    }, {
      "left" : "_reportError(\"Unrecognized token '\"+sb.toString()+\"': was expecting \"+msg);",
      "right" : "_reportError(\"Unrecognized token '\"+sb.toString()+\"': was expecting \"+msg);",
      "info" : "ExpressionStatement[118608-118683]:ExpressionStatement[118608-118683]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[118704-118713]:Modifier[118704-118713]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[118714-118718]:PrimitiveType[118714-118718]"
    }, {
      "left" : "_reportInvalidChar",
      "right" : "_reportInvalidChar",
      "info" : "SimpleName[118719-118737]:SimpleName[118719-118737]"
    }, {
      "left" : "int c",
      "right" : "int c",
      "info" : "SingleVariableDeclaration[118738-118743]:SingleVariableDeclaration[118738-118743]"
    }, {
      "left" : "JsonParseException",
      "right" : "JsonParseException",
      "info" : "SimpleType[118760-118778]:SimpleType[118760-118778]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[118783-118955]:Block[118783-118955]"
    }, {
      "left" : "if (c < INT_SPACE)",
      "right" : "if (c < INT_SPACE)",
      "info" : "IfStatement[118850-118915]:IfStatement[118850-118915]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[118869-118915]:Block[118869-118915]"
    }, {
      "left" : "_throwInvalidSpace(c);",
      "right" : "_throwInvalidSpace(c);",
      "info" : "ExpressionStatement[118883-118905]:ExpressionStatement[118883-118905]"
    }, {
      "left" : "_reportInvalidInitial(c);",
      "right" : "_reportInvalidInitial(c);",
      "info" : "ExpressionStatement[118924-118949]:ExpressionStatement[118924-118949]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[118961-118970]:Modifier[118961-118970]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[118971-118975]:PrimitiveType[118971-118975]"
    }, {
      "left" : "_reportInvalidInitial",
      "right" : "_reportInvalidInitial",
      "info" : "SimpleName[118976-118997]:SimpleName[118976-118997]"
    }, {
      "left" : "int mask",
      "right" : "int mask",
      "info" : "SingleVariableDeclaration[118998-119006]:SingleVariableDeclaration[118998-119006]"
    }, {
      "left" : "JsonParseException",
      "right" : "JsonParseException",
      "info" : "SimpleType[119023-119041]:SimpleType[119023-119041]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[119046-119132]:Block[119046-119132]"
    }, {
      "left" : "_reportError(\"Invalid UTF-8 start byte 0x\"+Integer.toHexString(mask));",
      "right" : "_reportError(\"Invalid UTF-8 start byte 0x\"+Integer.toHexString(mask));",
      "info" : "ExpressionStatement[119056-119126]:ExpressionStatement[119056-119126]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[119138-119147]:Modifier[119138-119147]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[119148-119152]:PrimitiveType[119148-119152]"
    }, {
      "left" : "_reportInvalidOther",
      "right" : "_reportInvalidOther",
      "info" : "SimpleName[119153-119172]:SimpleName[119153-119172]"
    }, {
      "left" : "int mask",
      "right" : "int mask",
      "info" : "SingleVariableDeclaration[119173-119181]:SingleVariableDeclaration[119173-119181]"
    }, {
      "left" : "JsonParseException",
      "right" : "JsonParseException",
      "info" : "SimpleType[119198-119216]:SimpleType[119198-119216]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[119221-119308]:Block[119221-119308]"
    }, {
      "left" : "_reportError(\"Invalid UTF-8 middle byte 0x\"+Integer.toHexString(mask));",
      "right" : "_reportError(\"Invalid UTF-8 middle byte 0x\"+Integer.toHexString(mask));",
      "info" : "ExpressionStatement[119231-119302]:ExpressionStatement[119231-119302]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[119314-119323]:Modifier[119314-119323]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[119324-119328]:PrimitiveType[119324-119328]"
    }, {
      "left" : "_reportInvalidOther",
      "right" : "_reportInvalidOther",
      "info" : "SimpleName[119329-119348]:SimpleName[119329-119348]"
    }, {
      "left" : "int mask",
      "right" : "int mask",
      "info" : "SingleVariableDeclaration[119349-119357]:SingleVariableDeclaration[119349-119357]"
    }, {
      "left" : "int ptr",
      "right" : "int ptr",
      "info" : "SingleVariableDeclaration[119359-119366]:SingleVariableDeclaration[119359-119366]"
    }, {
      "left" : "JsonParseException",
      "right" : "JsonParseException",
      "info" : "SimpleType[119383-119401]:SimpleType[119383-119401]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[119406-119473]:Block[119406-119473]"
    }, {
      "left" : "_inputPtr = ptr;",
      "right" : "_inputPtr = ptr;",
      "info" : "ExpressionStatement[119416-119432]:ExpressionStatement[119416-119432]"
    }, {
      "left" : "_reportInvalidOther(mask);",
      "right" : "_reportInvalidOther(mask);",
      "info" : "ExpressionStatement[119441-119467]:ExpressionStatement[119441-119467]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[119479-119485]:Modifier[119479-119485]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[119486-119492]:Modifier[119486-119492]"
    }, {
      "left" : "int[]",
      "right" : "int[]",
      "info" : "ArrayType[119493-119498]:ArrayType[119493-119498]"
    }, {
      "left" : "growArrayBy",
      "right" : "growArrayBy",
      "info" : "SimpleName[119499-119510]:SimpleName[119499-119510]"
    }, {
      "left" : "int[] arr",
      "right" : "int[] arr",
      "info" : "SingleVariableDeclaration[119511-119520]:SingleVariableDeclaration[119511-119520]"
    }, {
      "left" : "int more",
      "right" : "int more",
      "info" : "SingleVariableDeclaration[119522-119530]:SingleVariableDeclaration[119522-119530]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[119536-119668]:Block[119536-119668]"
    }, {
      "left" : "if (arr == null)",
      "right" : "if (arr == null)",
      "info" : "IfStatement[119546-119608]:IfStatement[119546-119608]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[119563-119608]:Block[119563-119608]"
    }, {
      "left" : "return new int[more];",
      "right" : "return new int[more];",
      "info" : "ReturnStatement[119577-119598]:ReturnStatement[119577-119598]"
    }, {
      "left" : "return Arrays.copyOf(arr, arr.length + more);",
      "right" : "return Arrays.copyOf(arr, arr.length + more);",
      "info" : "ReturnStatement[119617-119662]:ReturnStatement[119617-119662]"
    }, {
      "left" : "@SuppressWarnings(\"resource\")",
      "right" : "@SuppressWarnings(\"resource\")",
      "info" : "SingleMemberAnnotation[119965-119994]:SingleMemberAnnotation[119965-119994]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[119999-120008]:Modifier[119999-120008]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[120009-120014]:Modifier[120009-120014]"
    }, {
      "left" : "byte[]",
      "right" : "byte[]",
      "info" : "ArrayType[120015-120021]:ArrayType[120015-120021]"
    }, {
      "left" : "_decodeBase64",
      "right" : "_decodeBase64",
      "info" : "SimpleName[120022-120035]:SimpleName[120022-120035]"
    }, {
      "left" : "Base64Variant b64variant",
      "right" : "Base64Variant b64variant",
      "info" : "SingleVariableDeclaration[120036-120060]:SingleVariableDeclaration[120036-120060]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[120069-120080]:SimpleType[120069-120080]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[120085-124530]:Block[120085-124530]"
    }, {
      "left" : "ByteArrayBuilder builder = _getByteArrayBuilder();",
      "right" : "ByteArrayBuilder builder = _getByteArrayBuilder();",
      "info" : "VariableDeclarationStatement[120095-120145]:VariableDeclarationStatement[120095-120145]"
    }, {
      "left" : "while (true)",
      "right" : "while (true)",
      "info" : "WhileStatement[120176-124524]:WhileStatement[120176-124524]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[120189-124524]:Block[120189-124524]"
    }, {
      "left" : "int ch;",
      "right" : "int ch;",
      "info" : "VariableDeclarationStatement[120266-120273]:VariableDeclarationStatement[120266-120273]"
    }, {
      "left" : "do{...}",
      "right" : "do{...}",
      "info" : "DoStatement[120286-120496]:DoStatement[120286-120496]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[120289-120471]:Block[120289-120471]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[120307-120396]:IfStatement[120307-120396]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[120335-120396]:Block[120335-120396]"
    }, {
      "left" : "loadMoreGuaranteed();",
      "right" : "loadMoreGuaranteed();",
      "info" : "ExpressionStatement[120357-120378]:ExpressionStatement[120357-120378]"
    }, {
      "left" : "ch = (int) _inputBuffer[_inputPtr++] & 0xFF;",
      "right" : "ch = (int) _inputBuffer[_inputPtr++] & 0xFF;",
      "info" : "ExpressionStatement[120413-120457]:ExpressionStatement[120413-120457]"
    }, {
      "left" : "int bits = b64variant.decodeBase64Char(ch);",
      "right" : "int bits = b64variant.decodeBase64Char(ch);",
      "info" : "VariableDeclarationStatement[120509-120552]:VariableDeclarationStatement[120509-120552]"
    }, {
      "left" : "if (bits < 0)",
      "right" : "if (bits < 0)",
      "info" : "IfStatement[120565-120904]:IfStatement[120565-120904]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[120579-120904]:Block[120579-120904]"
    }, {
      "left" : "if (ch == INT_QUOTE)",
      "right" : "if (ch == INT_QUOTE)",
      "info" : "IfStatement[120634-120724]:IfStatement[120634-120724]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[120655-120724]:Block[120655-120724]"
    }, {
      "left" : "return builder.toByteArray();",
      "right" : "return builder.toByteArray();",
      "info" : "ReturnStatement[120677-120706]:ReturnStatement[120677-120706]"
    }, {
      "left" : "bits = _decodeBase64Escape(b64variant, ch, 0);",
      "right" : "bits = _decodeBase64Escape(b64variant, ch, 0);",
      "info" : "ExpressionStatement[120741-120787]:ExpressionStatement[120741-120787]"
    }, {
      "left" : "if (bits < 0)",
      "right" : "if (bits < 0)",
      "info" : "IfStatement[120804-120890]:IfStatement[120804-120890]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[120818-120890]:Block[120818-120890]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[120863-120872]:ContinueStatement[120863-120872]"
    }, {
      "left" : "int decodedData = bits;",
      "right" : "int decodedData = bits;",
      "info" : "VariableDeclarationStatement[120917-120940]:VariableDeclarationStatement[120917-120940]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[121049-121130]:IfStatement[121049-121130]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[121077-121130]:Block[121077-121130]"
    }, {
      "left" : "loadMoreGuaranteed();",
      "right" : "loadMoreGuaranteed();",
      "info" : "ExpressionStatement[121095-121116]:ExpressionStatement[121095-121116]"
    }, {
      "left" : "ch = _inputBuffer[_inputPtr++] & 0xFF;",
      "right" : "ch = _inputBuffer[_inputPtr++] & 0xFF;",
      "info" : "ExpressionStatement[121143-121181]:ExpressionStatement[121143-121181]"
    }, {
      "left" : "bits = b64variant.decodeBase64Char(ch);",
      "right" : "bits = b64variant.decodeBase64Char(ch);",
      "info" : "ExpressionStatement[121194-121233]:ExpressionStatement[121194-121233]"
    }, {
      "left" : "if (bits < 0)",
      "right" : "if (bits < 0)",
      "info" : "IfStatement[121246-121338]:IfStatement[121246-121338]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[121260-121338]:Block[121260-121338]"
    }, {
      "left" : "bits = _decodeBase64Escape(b64variant, ch, 1);",
      "right" : "bits = _decodeBase64Escape(b64variant, ch, 1);",
      "info" : "ExpressionStatement[121278-121324]:ExpressionStatement[121278-121324]"
    }, {
      "left" : "decodedData = (decodedData << 6) | bits;",
      "right" : "decodedData = (decodedData << 6) | bits;",
      "info" : "ExpressionStatement[121351-121391]:ExpressionStatement[121351-121391]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[121478-121559]:IfStatement[121478-121559]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[121506-121559]:Block[121506-121559]"
    }, {
      "left" : "loadMoreGuaranteed();",
      "right" : "loadMoreGuaranteed();",
      "info" : "ExpressionStatement[121524-121545]:ExpressionStatement[121524-121545]"
    }, {
      "left" : "ch = _inputBuffer[_inputPtr++] & 0xFF;",
      "right" : "ch = _inputBuffer[_inputPtr++] & 0xFF;",
      "info" : "ExpressionStatement[121572-121610]:ExpressionStatement[121572-121610]"
    }, {
      "left" : "bits = b64variant.decodeBase64Char(ch);",
      "right" : "bits = b64variant.decodeBase64Char(ch);",
      "info" : "ExpressionStatement[121623-121662]:ExpressionStatement[121623-121662]"
    }, {
      "left" : "if (bits < 0)",
      "right" : "if (bits < 0)",
      "info" : "IfStatement[121733-122939]:IfStatement[121733-122939]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[121747-122939]:Block[121747-122939]"
    }, {
      "left" : "if (bits != Base64Variant.BASE64_VALUE_PADDING)",
      "right" : "if (bits != Base64Variant.BASE64_VALUE_PADDING)",
      "info" : "IfStatement[121765-122220]:IfStatement[121765-122220]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[121813-122220]:Block[121813-122220]"
    }, {
      "left" : "if (ch == '\"' && !b64variant.usesPadding())",
      "right" : "if (ch == '\"' && !b64variant.usesPadding())",
      "info" : "IfStatement[121918-122135]:IfStatement[121918-122135]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[121962-122135]:Block[121962-122135]"
    }, {
      "left" : "decodedData >>= 4;",
      "right" : "decodedData >>= 4;",
      "info" : "ExpressionStatement[121988-122006]:ExpressionStatement[121988-122006]"
    }, {
      "left" : "builder.append(decodedData);",
      "right" : "builder.append(decodedData);",
      "info" : "ExpressionStatement[122031-122059]:ExpressionStatement[122031-122059]"
    }, {
      "left" : "return builder.toByteArray();",
      "right" : "return builder.toByteArray();",
      "info" : "ReturnStatement[122084-122113]:ReturnStatement[122084-122113]"
    }, {
      "left" : "bits = _decodeBase64Escape(b64variant, ch, 2);",
      "right" : "bits = _decodeBase64Escape(b64variant, ch, 2);",
      "info" : "ExpressionStatement[122156-122202]:ExpressionStatement[122156-122202]"
    }, {
      "left" : "if (bits == Base64Variant.BASE64_VALUE_PADDING)",
      "right" : "if (bits == Base64Variant.BASE64_VALUE_PADDING)",
      "info" : "IfStatement[122237-122925]:IfStatement[122237-122925]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[122285-122925]:Block[122285-122925]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[122351-122448]:IfStatement[122351-122448]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[122379-122448]:Block[122379-122448]"
    }, {
      "left" : "loadMoreGuaranteed();",
      "right" : "loadMoreGuaranteed();",
      "info" : "ExpressionStatement[122405-122426]:ExpressionStatement[122405-122426]"
    }, {
      "left" : "ch = _inputBuffer[_inputPtr++] & 0xFF;",
      "right" : "ch = _inputBuffer[_inputPtr++] & 0xFF;",
      "info" : "ExpressionStatement[122469-122507]:ExpressionStatement[122469-122507]"
    }, {
      "left" : "if (!b64variant.usesPaddingChar(ch))",
      "right" : "if (!b64variant.usesPaddingChar(ch))",
      "info" : "IfStatement[122528-122726]:IfStatement[122528-122726]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[122565-122726]:Block[122565-122726]"
    }, {
      "left" : "throw reportInvalidBase64Char(b64variant, ch, 3, \"expected padding character '\"+b64variant.getPaddingChar()+\"'\");",
      "right" : "throw reportInvalidBase64Char(b64variant, ch, 3, \"expected padding character '\"+b64variant.getPaddingChar()+\"'\");",
      "info" : "ThrowStatement[122591-122704]:ThrowStatement[122591-122704]"
    }, {
      "left" : "decodedData >>= 4;",
      "right" : "decodedData >>= 4;",
      "info" : "ExpressionStatement[122810-122828]:ExpressionStatement[122810-122828]"
    }, {
      "left" : "builder.append(decodedData);",
      "right" : "builder.append(decodedData);",
      "info" : "ExpressionStatement[122849-122877]:ExpressionStatement[122849-122877]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[122898-122907]:ContinueStatement[122898-122907]"
    }, {
      "left" : "decodedData = (decodedData << 6) | bits;",
      "right" : "decodedData = (decodedData << 6) | bits;",
      "info" : "ExpressionStatement[122986-123026]:ExpressionStatement[122986-123026]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[123110-123191]:IfStatement[123110-123191]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[123138-123191]:Block[123138-123191]"
    }, {
      "left" : "loadMoreGuaranteed();",
      "right" : "loadMoreGuaranteed();",
      "info" : "ExpressionStatement[123156-123177]:ExpressionStatement[123156-123177]"
    }, {
      "left" : "ch = _inputBuffer[_inputPtr++] & 0xFF;",
      "right" : "ch = _inputBuffer[_inputPtr++] & 0xFF;",
      "info" : "ExpressionStatement[123204-123242]:ExpressionStatement[123204-123242]"
    }, {
      "left" : "bits = b64variant.decodeBase64Char(ch);",
      "right" : "bits = b64variant.decodeBase64Char(ch);",
      "info" : "ExpressionStatement[123255-123294]:ExpressionStatement[123255-123294]"
    }, {
      "left" : "if (bits < 0)",
      "right" : "if (bits < 0)",
      "info" : "IfStatement[123307-124356]:IfStatement[123307-124356]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[123321-124356]:Block[123321-124356]"
    }, {
      "left" : "if (bits != Base64Variant.BASE64_VALUE_PADDING)",
      "right" : "if (bits != Base64Variant.BASE64_VALUE_PADDING)",
      "info" : "IfStatement[123339-123802]:IfStatement[123339-123802]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[123387-123802]:Block[123387-123802]"
    }, {
      "left" : "if (ch == '\"' && !b64variant.usesPadding())",
      "right" : "if (ch == '\"' && !b64variant.usesPadding())",
      "info" : "IfStatement[123492-123717]:IfStatement[123492-123717]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[123536-123717]:Block[123536-123717]"
    }, {
      "left" : "decodedData >>= 2;",
      "right" : "decodedData >>= 2;",
      "info" : "ExpressionStatement[123562-123580]:ExpressionStatement[123562-123580]"
    }, {
      "left" : "builder.appendTwoBytes(decodedData);",
      "right" : "builder.appendTwoBytes(decodedData);",
      "info" : "ExpressionStatement[123605-123641]:ExpressionStatement[123605-123641]"
    }, {
      "left" : "return builder.toByteArray();",
      "right" : "return builder.toByteArray();",
      "info" : "ReturnStatement[123666-123695]:ReturnStatement[123666-123695]"
    }, {
      "left" : "bits = _decodeBase64Escape(b64variant, ch, 3);",
      "right" : "bits = _decodeBase64Escape(b64variant, ch, 3);",
      "info" : "ExpressionStatement[123738-123784]:ExpressionStatement[123738-123784]"
    }, {
      "left" : "if (bits == Base64Variant.BASE64_VALUE_PADDING)",
      "right" : "if (bits == Base64Variant.BASE64_VALUE_PADDING)",
      "info" : "IfStatement[123819-124342]:IfStatement[123819-124342]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[123867-124342]:Block[123867-124342]"
    }, {
      "left" : "decodedData >>= 2;",
      "right" : "decodedData >>= 2;",
      "info" : "ExpressionStatement[124219-124237]:ExpressionStatement[124219-124237]"
    }, {
      "left" : "builder.appendTwoBytes(decodedData);",
      "right" : "builder.appendTwoBytes(decodedData);",
      "info" : "ExpressionStatement[124258-124294]:ExpressionStatement[124258-124294]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[124315-124324]:ContinueStatement[124315-124324]"
    }, {
      "left" : "decodedData = (decodedData << 6) | bits;",
      "right" : "decodedData = (decodedData << 6) | bits;",
      "info" : "ExpressionStatement[124423-124463]:ExpressionStatement[124423-124463]"
    }, {
      "left" : "builder.appendThreeBytes(decodedData);",
      "right" : "builder.appendThreeBytes(decodedData);",
      "info" : "ExpressionStatement[124476-124514]:ExpressionStatement[124476-124514]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[124797-124806]:MarkerAnnotation[124797-124806]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[124811-124817]:Modifier[124811-124817]"
    }, {
      "left" : "JsonLocation",
      "right" : "JsonLocation",
      "info" : "SimpleType[124818-124830]:SimpleType[124818-124830]"
    }, {
      "left" : "getTokenLocation",
      "right" : "getTokenLocation",
      "info" : "SimpleName[124831-124847]:SimpleName[124831-124847]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[124854-125236]:Block[124854-125225]"
    }, {
      "left" : "final Object src = _ioContext.getSourceReference();",
      "right" : "final Object src = _ioContext.getSourceReference();",
      "info" : "VariableDeclarationStatement[124864-124915]:VariableDeclarationStatement[124864-124915]"
    }, {
      "left" : "if (_currToken == JsonToken.FIELD_NAME)",
      "right" : "if (_currToken == JsonToken.FIELD_NAME)",
      "info" : "IfStatement[124924-125090]:IfStatement[124924-125090]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[124964-125090]:Block[124964-125090]"
    }, {
      "left" : "return new JsonLocation(src,\n                    _nameInputTotal, -1L, _nameInputRow, _tokenInputCol);",
      "right" : "return new JsonLocation(src,\n                    _nameInputTotal, -1L, _nameInputRow, _tokenInputCol);",
      "info" : "ReturnStatement[124978-125080]:ReturnStatement[124978-125080]"
    }, {
      "left" : "return new JsonLocation(src,\n                getTokenCharacterOffset(), -1L, getTokenLineNr(),\n                getTokenColumnNr());",
      "right" : "return new JsonLocation(src,\n                _tokenInputTotal, -1L, _tokenInputRow,\n                getTokenColumnNr());",
      "info" : "ReturnStatement[125099-125230]:ReturnStatement[125099-125219]"
    }, {
      "left" : "getTokenCharacterOffset()",
      "right" : "_tokenInputTotal",
      "info" : "MethodInvocation[125144-125169]:SimpleName[125144-125160]"
    }, {
      "left" : "getTokenLineNr()",
      "right" : "_tokenInputRow",
      "info" : "MethodInvocation[125176-125192]:SimpleName[125167-125181]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[125305-125314]:MarkerAnnotation[125294-125303]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[125319-125325]:Modifier[125308-125314]"
    }, {
      "left" : "JsonLocation",
      "right" : "JsonLocation",
      "info" : "SimpleType[125326-125338]:SimpleType[125315-125327]"
    }, {
      "left" : "getCurrentLocation",
      "right" : "getCurrentLocation",
      "info" : "SimpleName[125339-125357]:SimpleName[125328-125346]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[125364-125608]:Block[125353-125597]"
    }, {
      "left" : "int col = _inputPtr - _currInputRowStart + 1;",
      "right" : "int col = _inputPtr - _currInputRowStart + 1;",
      "info" : "VariableDeclarationStatement[125374-125419]:VariableDeclarationStatement[125363-125408]"
    }, {
      "left" : "return new JsonLocation(_ioContext.getSourceReference(),\n                _currInputProcessed + _inputPtr, -1L, // bytes, chars\n                _currInputRow, col);",
      "right" : "return new JsonLocation(_ioContext.getSourceReference(),\n                _currInputProcessed + _inputPtr, -1L, // bytes, chars\n                _currInputRow, col);",
      "info" : "ReturnStatement[125439-125602]:ReturnStatement[125428-125591]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[125632-125639]:Modifier[125621-125628]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[125640-125645]:Modifier[125629-125634]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[125646-125650]:PrimitiveType[125635-125639]"
    }, {
      "left" : "_updateLocation",
      "right" : "_updateLocation",
      "info" : "SimpleName[125651-125666]:SimpleName[125640-125655]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[125673-125845]:Block[125662-125834]"
    }, {
      "left" : "_tokenInputTotal = _currInputProcessed + _inputPtr - 1;",
      "right" : "_tokenInputTotal = _currInputProcessed + _inputPtr - 1;",
      "info" : "ExpressionStatement[125683-125738]:ExpressionStatement[125672-125727]"
    }, {
      "left" : "_tokenInputRow = _currInputRow;",
      "right" : "_tokenInputRow = _currInputRow;",
      "info" : "ExpressionStatement[125747-125778]:ExpressionStatement[125736-125767]"
    }, {
      "left" : "_tokenInputCol = _inputPtr - _currInputRowStart - 1;",
      "right" : "_tokenInputCol = _inputPtr - _currInputRowStart - 1;",
      "info" : "ExpressionStatement[125787-125839]:ExpressionStatement[125776-125828]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[125869-125876]:Modifier[125858-125865]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[125877-125882]:Modifier[125866-125871]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[125883-125887]:PrimitiveType[125872-125876]"
    }, {
      "left" : "_updateNameLocation",
      "right" : "_updateNameLocation",
      "info" : "SimpleName[125888-125907]:SimpleName[125877-125896]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[125914-126083]:Block[125903-126072]"
    }, {
      "left" : "_nameInputTotal = _currInputProcessed + _inputPtr - 1;",
      "right" : "_nameInputTotal = _currInputProcessed + _inputPtr - 1;",
      "info" : "ExpressionStatement[125924-125978]:ExpressionStatement[125913-125967]"
    }, {
      "left" : "_nameInputRow = _currInputRow;",
      "right" : "_nameInputRow = _currInputRow;",
      "info" : "ExpressionStatement[125987-126017]:ExpressionStatement[125976-126006]"
    }, {
      "left" : "_nameInputCol = _inputPtr - _currInputRowStart - 1;",
      "right" : "_nameInputCol = _inputPtr - _currInputRowStart - 1;",
      "info" : "ExpressionStatement[126026-126077]:ExpressionStatement[126015-126066]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[126354-126361]:Modifier[126343-126350]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[126362-126367]:Modifier[126351-126356]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[126368-126374]:Modifier[126357-126363]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[126375-126378]:PrimitiveType[126364-126367]"
    }, {
      "left" : "pad",
      "right" : "pad",
      "info" : "SimpleName[126379-126382]:SimpleName[126368-126371]"
    }, {
      "left" : "int q",
      "right" : "int q",
      "info" : "SingleVariableDeclaration[126383-126388]:SingleVariableDeclaration[126372-126377]"
    }, {
      "left" : "int bytes",
      "right" : "int bytes",
      "info" : "SingleVariableDeclaration[126390-126399]:SingleVariableDeclaration[126379-126388]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[126401-126470]:Block[126390-126459]"
    }, {
      "left" : "return (bytes == 4) ? q : (q | (-1 << (bytes << 3)));",
      "right" : "return (bytes == 4) ? q : (q | (-1 << (bytes << 3)));",
      "info" : "ReturnStatement[126411-126464]:ReturnStatement[126400-126453]"
    } ]
  },
  "interFileMappings" : { }
}