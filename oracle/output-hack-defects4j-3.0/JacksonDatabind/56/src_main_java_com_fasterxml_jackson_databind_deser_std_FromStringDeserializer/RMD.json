{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "FromStringDeserializer",
      "right" : "FromStringDeserializer",
      "info" : "TypeDeclaration[710-10955]:TypeDeclaration[710-11293]"
    }, {
      "left" : "public static Class<?>[] types()",
      "right" : "public static Class<?>[] types()",
      "info" : "MethodDeclaration[926-1336]:MethodDeclaration[926-1336]"
    }, {
      "left" : "protected FromStringDeserializer(Class<?> vc)",
      "right" : "protected FromStringDeserializer(Class<?> vc)",
      "info" : "MethodDeclaration[1530-1602]:MethodDeclaration[1530-1602]"
    }, {
      "left" : "public static Std findDeserializer(Class<?> rawType)",
      "right" : "public static Std findDeserializer(Class<?> rawType)",
      "info" : "MethodDeclaration[1608-2935]:MethodDeclaration[1608-2935]"
    }, {
      "left" : "public T deserialize(JsonParser p, DeserializationContext ctxt) throws IOException",
      "right" : "public T deserialize(JsonParser p, DeserializationContext ctxt) throws IOException",
      "info" : "MethodDeclaration[3129-5565]:MethodDeclaration[3129-5565]"
    }, {
      "left" : "protected abstract T _deserialize(String value, DeserializationContext ctxt) throws IOException;",
      "right" : "protected abstract T _deserialize(String value, DeserializationContext ctxt) throws IOException;",
      "info" : "MethodDeclaration[5579-5675]:MethodDeclaration[5579-5675]"
    }, {
      "left" : "protected T _deserializeEmbedded(Object ob, DeserializationContext ctxt) throws IOException",
      "right" : "protected T _deserializeEmbedded(Object ob, DeserializationContext ctxt) throws IOException",
      "info" : "MethodDeclaration[5681-5980]:MethodDeclaration[5681-5980]"
    }, {
      "left" : "protected T _deserializeFromEmptyString() throws IOException",
      "right" : "protected T _deserializeFromEmptyString() throws IOException",
      "info" : "MethodDeclaration[5986-6075]:MethodDeclaration[5986-6075]"
    }, {
      "left" : "Std",
      "right" : "Std",
      "info" : "TypeDeclaration[6265-10953]:TypeDeclaration[6265-11291]"
    }, {
      "left" : "private static final long serialVersionUID = 1;",
      "right" : "private static final long serialVersionUID = 1;",
      "info" : "FieldDeclaration[6494-6541]:FieldDeclaration[6494-6541]"
    }, {
      "left" : "public final static int STD_FILE = 1;",
      "right" : "public final static int STD_FILE = 1;",
      "info" : "FieldDeclaration[6551-6588]:FieldDeclaration[6551-6588]"
    }, {
      "left" : "public final static int STD_URL = 2;",
      "right" : "public final static int STD_URL = 2;",
      "info" : "FieldDeclaration[6597-6633]:FieldDeclaration[6597-6633]"
    }, {
      "left" : "public final static int STD_URI = 3;",
      "right" : "public final static int STD_URI = 3;",
      "info" : "FieldDeclaration[6642-6678]:FieldDeclaration[6642-6678]"
    }, {
      "left" : "public final static int STD_CLASS = 4;",
      "right" : "public final static int STD_CLASS = 4;",
      "info" : "FieldDeclaration[6687-6725]:FieldDeclaration[6687-6725]"
    }, {
      "left" : "public final static int STD_JAVA_TYPE = 5;",
      "right" : "public final static int STD_JAVA_TYPE = 5;",
      "info" : "FieldDeclaration[6734-6776]:FieldDeclaration[6734-6776]"
    }, {
      "left" : "public final static int STD_CURRENCY = 6;",
      "right" : "public final static int STD_CURRENCY = 6;",
      "info" : "FieldDeclaration[6785-6826]:FieldDeclaration[6785-6826]"
    }, {
      "left" : "public final static int STD_PATTERN = 7;",
      "right" : "public final static int STD_PATTERN = 7;",
      "info" : "FieldDeclaration[6835-6875]:FieldDeclaration[6835-6875]"
    }, {
      "left" : "public final static int STD_LOCALE = 8;",
      "right" : "public final static int STD_LOCALE = 8;",
      "info" : "FieldDeclaration[6884-6923]:FieldDeclaration[6884-6923]"
    }, {
      "left" : "public final static int STD_CHARSET = 9;",
      "right" : "public final static int STD_CHARSET = 9;",
      "info" : "FieldDeclaration[6932-6972]:FieldDeclaration[6932-6972]"
    }, {
      "left" : "public final static int STD_TIME_ZONE = 10;",
      "right" : "public final static int STD_TIME_ZONE = 10;",
      "info" : "FieldDeclaration[6981-7024]:FieldDeclaration[6981-7024]"
    }, {
      "left" : "public final static int STD_INET_ADDRESS = 11;",
      "right" : "public final static int STD_INET_ADDRESS = 11;",
      "info" : "FieldDeclaration[7033-7079]:FieldDeclaration[7033-7079]"
    }, {
      "left" : "public final static int STD_INET_SOCKET_ADDRESS = 12;",
      "right" : "public final static int STD_INET_SOCKET_ADDRESS = 12;",
      "info" : "FieldDeclaration[7088-7141]:FieldDeclaration[7088-7141]"
    }, {
      "left" : "protected final int _kind;",
      "right" : "protected final int _kind;",
      "info" : "FieldDeclaration[7151-7177]:FieldDeclaration[7151-7177]"
    }, {
      "left" : "protected Std(Class<?> valueType, int kind)",
      "right" : "protected Std(Class<?> valueType, int kind)",
      "info" : "MethodDeclaration[7195-7306]:MethodDeclaration[7195-7306]"
    }, {
      "left" : "protected Object _deserialize(String value, DeserializationContext ctxt) throws IOException",
      "right" : "protected Object _deserialize(String value, DeserializationContext ctxt) throws IOException",
      "info" : "MethodDeclaration[7316-10488]:MethodDeclaration[7316-10514]"
    }, {
      "left" : "protected Object _deserializeFromEmptyString() throws IOException",
      "right" : "protected Object _deserializeFromEmptyString() throws IOException",
      "info" : "MethodDeclaration[10498-10945]:MethodDeclaration[10524-10971]"
    } ],
    "mappings" : [
 {
      "left" : "@SuppressWarnings(\"serial\")",
      "right" : "@SuppressWarnings(\"serial\")",
      "info" : "SingleMemberAnnotation[811-838]:SingleMemberAnnotation[811-838]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[839-845]:Modifier[839-845]"
    }, {
      "left" : "abstract",
      "right" : "abstract",
      "info" : "Modifier[846-854]:Modifier[846-854]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[855-860]:TYPE_DECLARATION_KIND[855-860]"
    }, {
      "left" : "FromStringDeserializer",
      "right" : "FromStringDeserializer",
      "info" : "SimpleName[861-883]:SimpleName[861-883]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[926-932]:Modifier[926-932]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[933-939]:Modifier[933-939]"
    }, {
      "left" : "Class<?>[]",
      "right" : "Class<?>[]",
      "info" : "ArrayType[940-950]:ArrayType[940-950]"
    }, {
      "left" : "types",
      "right" : "types",
      "info" : "SimpleName[951-956]:SimpleName[951-956]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[959-1336]:Block[959-1336]"
    }, {
      "left" : "return new Class<?>[] {\n            File.class,\n            URL.class,\n            URI.class,\n            Class.class,\n            JavaType.class,\n            Currency.class,\n            Pattern.class,\n            Locale.class,\n            Charset.class,\n            TimeZone.class,\n            InetAddress.class,\n            InetSocketAddress.class,\n        };",
      "right" : "return new Class<?>[] {\n            File.class,\n            URL.class,\n            URI.class,\n            Class.class,\n            JavaType.class,\n            Currency.class,\n            Pattern.class,\n            Locale.class,\n            Charset.class,\n            TimeZone.class,\n            InetAddress.class,\n            InetSocketAddress.class,\n        };",
      "info" : "ReturnStatement[969-1330]:ReturnStatement[969-1330]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[1530-1539]:Modifier[1530-1539]"
    }, {
      "left" : "FromStringDeserializer",
      "right" : "FromStringDeserializer",
      "info" : "SimpleName[1540-1562]:SimpleName[1540-1562]"
    }, {
      "left" : "Class<?> vc",
      "right" : "Class<?> vc",
      "info" : "SingleVariableDeclaration[1563-1574]:SingleVariableDeclaration[1563-1574]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1576-1602]:Block[1576-1602]"
    }, {
      "left" : "super(vc);",
      "right" : "super(vc);",
      "info" : "SuperConstructorInvocation[1586-1596]:SuperConstructorInvocation[1586-1596]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[1758-1764]:Modifier[1758-1764]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[1765-1771]:Modifier[1765-1771]"
    }, {
      "left" : "Std",
      "right" : "Std",
      "info" : "SimpleType[1772-1775]:SimpleType[1772-1775]"
    }, {
      "left" : "findDeserializer",
      "right" : "findDeserializer",
      "info" : "SimpleName[1776-1792]:SimpleName[1776-1792]"
    }, {
      "left" : "Class<?> rawType",
      "right" : "Class<?> rawType",
      "info" : "SingleVariableDeclaration[1793-1809]:SingleVariableDeclaration[1793-1809]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1815-2935]:Block[1815-2935]"
    }, {
      "left" : "int kind = 0;",
      "right" : "int kind = 0;",
      "info" : "VariableDeclarationStatement[1825-1838]:VariableDeclarationStatement[1825-1838]"
    }, {
      "left" : "if (rawType == File.class)",
      "right" : "if (rawType == File.class)",
      "info" : "IfStatement[1847-2890]:IfStatement[1847-2890]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1874-1918]:Block[1874-1918]"
    }, {
      "left" : "kind = Std.STD_FILE;",
      "right" : "kind = Std.STD_FILE;",
      "info" : "ExpressionStatement[1888-1908]:ExpressionStatement[1888-1908]"
    }, {
      "left" : "if (rawType == URL.class)",
      "right" : "if (rawType == URL.class)",
      "info" : "IfStatement[1924-2890]:IfStatement[1924-2890]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1950-1993]:Block[1950-1993]"
    }, {
      "left" : "kind = Std.STD_URL;",
      "right" : "kind = Std.STD_URL;",
      "info" : "ExpressionStatement[1964-1983]:ExpressionStatement[1964-1983]"
    }, {
      "left" : "if (rawType == URI.class)",
      "right" : "if (rawType == URI.class)",
      "info" : "IfStatement[1999-2890]:IfStatement[1999-2890]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2025-2068]:Block[2025-2068]"
    }, {
      "left" : "kind = Std.STD_URI;",
      "right" : "kind = Std.STD_URI;",
      "info" : "ExpressionStatement[2039-2058]:ExpressionStatement[2039-2058]"
    }, {
      "left" : "if (rawType == Class.class)",
      "right" : "if (rawType == Class.class)",
      "info" : "IfStatement[2074-2890]:IfStatement[2074-2890]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2102-2147]:Block[2102-2147]"
    }, {
      "left" : "kind = Std.STD_CLASS;",
      "right" : "kind = Std.STD_CLASS;",
      "info" : "ExpressionStatement[2116-2137]:ExpressionStatement[2116-2137]"
    }, {
      "left" : "if (rawType == JavaType.class)",
      "right" : "if (rawType == JavaType.class)",
      "info" : "IfStatement[2153-2890]:IfStatement[2153-2890]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2184-2233]:Block[2184-2233]"
    }, {
      "left" : "kind = Std.STD_JAVA_TYPE;",
      "right" : "kind = Std.STD_JAVA_TYPE;",
      "info" : "ExpressionStatement[2198-2223]:ExpressionStatement[2198-2223]"
    }, {
      "left" : "if (rawType == Currency.class)",
      "right" : "if (rawType == Currency.class)",
      "info" : "IfStatement[2239-2890]:IfStatement[2239-2890]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2270-2318]:Block[2270-2318]"
    }, {
      "left" : "kind = Std.STD_CURRENCY;",
      "right" : "kind = Std.STD_CURRENCY;",
      "info" : "ExpressionStatement[2284-2308]:ExpressionStatement[2284-2308]"
    }, {
      "left" : "if (rawType == Pattern.class)",
      "right" : "if (rawType == Pattern.class)",
      "info" : "IfStatement[2324-2890]:IfStatement[2324-2890]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2354-2401]:Block[2354-2401]"
    }, {
      "left" : "kind = Std.STD_PATTERN;",
      "right" : "kind = Std.STD_PATTERN;",
      "info" : "ExpressionStatement[2368-2391]:ExpressionStatement[2368-2391]"
    }, {
      "left" : "if (rawType == Locale.class)",
      "right" : "if (rawType == Locale.class)",
      "info" : "IfStatement[2407-2890]:IfStatement[2407-2890]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2436-2482]:Block[2436-2482]"
    }, {
      "left" : "kind = Std.STD_LOCALE;",
      "right" : "kind = Std.STD_LOCALE;",
      "info" : "ExpressionStatement[2450-2472]:ExpressionStatement[2450-2472]"
    }, {
      "left" : "if (rawType == Charset.class)",
      "right" : "if (rawType == Charset.class)",
      "info" : "IfStatement[2488-2890]:IfStatement[2488-2890]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2518-2565]:Block[2518-2565]"
    }, {
      "left" : "kind = Std.STD_CHARSET;",
      "right" : "kind = Std.STD_CHARSET;",
      "info" : "ExpressionStatement[2532-2555]:ExpressionStatement[2532-2555]"
    }, {
      "left" : "if (rawType == TimeZone.class)",
      "right" : "if (rawType == TimeZone.class)",
      "info" : "IfStatement[2571-2890]:IfStatement[2571-2890]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2602-2651]:Block[2602-2651]"
    }, {
      "left" : "kind = Std.STD_TIME_ZONE;",
      "right" : "kind = Std.STD_TIME_ZONE;",
      "info" : "ExpressionStatement[2616-2641]:ExpressionStatement[2616-2641]"
    }, {
      "left" : "if (rawType == InetAddress.class)",
      "right" : "if (rawType == InetAddress.class)",
      "info" : "IfStatement[2657-2890]:IfStatement[2657-2890]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2691-2743]:Block[2691-2743]"
    }, {
      "left" : "kind = Std.STD_INET_ADDRESS;",
      "right" : "kind = Std.STD_INET_ADDRESS;",
      "info" : "ExpressionStatement[2705-2733]:ExpressionStatement[2705-2733]"
    }, {
      "left" : "if (rawType == InetSocketAddress.class)",
      "right" : "if (rawType == InetSocketAddress.class)",
      "info" : "IfStatement[2749-2890]:IfStatement[2749-2890]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2789-2848]:Block[2789-2848]"
    }, {
      "left" : "kind = Std.STD_INET_SOCKET_ADDRESS;",
      "right" : "kind = Std.STD_INET_SOCKET_ADDRESS;",
      "info" : "ExpressionStatement[2803-2838]:ExpressionStatement[2803-2838]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2854-2890]:Block[2854-2890]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[2868-2880]:ReturnStatement[2868-2880]"
    }, {
      "left" : "return new Std(rawType, kind);",
      "right" : "return new Std(rawType, kind);",
      "info" : "ReturnStatement[2899-2929]:ReturnStatement[2899-2929]"
    }, {
      "left" : "@SuppressWarnings(\"unchecked\")",
      "right" : "@SuppressWarnings(\"unchecked\")",
      "info" : "SingleMemberAnnotation[3129-3159]:SingleMemberAnnotation[3129-3159]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[3164-3173]:MarkerAnnotation[3164-3173]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[3178-3184]:Modifier[3178-3184]"
    }, {
      "left" : "T",
      "right" : "T",
      "info" : "SimpleType[3185-3186]:SimpleType[3185-3186]"
    }, {
      "left" : "deserialize",
      "right" : "deserialize",
      "info" : "SimpleName[3187-3198]:SimpleName[3187-3198]"
    }, {
      "left" : "JsonParser p",
      "right" : "JsonParser p",
      "info" : "SingleVariableDeclaration[3199-3211]:SingleVariableDeclaration[3199-3211]"
    }, {
      "left" : "DeserializationContext ctxt",
      "right" : "DeserializationContext ctxt",
      "info" : "SingleVariableDeclaration[3213-3240]:SingleVariableDeclaration[3213-3240]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[3249-3260]:SimpleType[3249-3260]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3265-5565]:Block[3265-5565]"
    }, {
      "left" : "if (p.getCurrentToken() == JsonToken.START_ARRAY && ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS))",
      "right" : "if (p.getCurrentToken() == JsonToken.START_ARRAY && ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS))",
      "info" : "IfStatement[3296-3847]:IfStatement[3296-3847]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3415-3847]:Block[3415-3847]"
    }, {
      "left" : "p.nextToken();",
      "right" : "p.nextToken();",
      "info" : "ExpressionStatement[3429-3443]:ExpressionStatement[3429-3443]"
    }, {
      "left" : "final T value = deserialize(p, ctxt);",
      "right" : "final T value = deserialize(p, ctxt);",
      "info" : "VariableDeclarationStatement[3456-3493]:VariableDeclarationStatement[3456-3493]"
    }, {
      "left" : "if (p.nextToken() != JsonToken.END_ARRAY)",
      "right" : "if (p.nextToken() != JsonToken.END_ARRAY)",
      "info" : "IfStatement[3506-3811]:IfStatement[3506-3811]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3548-3811]:Block[3548-3811]"
    }, {
      "left" : "throw ctxt.wrongTokenException(p, JsonToken.END_ARRAY, \n                                \"Attempted to unwrap single value array for single '\" + _valueClass.getName() + \"' value but there was more than a single value in the array\");",
      "right" : "throw ctxt.wrongTokenException(p, JsonToken.END_ARRAY, \n                                \"Attempted to unwrap single value array for single '\" + _valueClass.getName() + \"' value but there was more than a single value in the array\");",
      "info" : "ThrowStatement[3566-3797]:ThrowStatement[3566-3797]"
    }, {
      "left" : "return value;",
      "right" : "return value;",
      "info" : "ReturnStatement[3824-3837]:ReturnStatement[3824-3837]"
    }, {
      "left" : "String text = p.getValueAsString();",
      "right" : "String text = p.getValueAsString();",
      "info" : "VariableDeclarationStatement[3936-3971]:VariableDeclarationStatement[3936-3971]"
    }, {
      "left" : "if (text != null)",
      "right" : "if (text != null)",
      "info" : "IfStatement[3980-5067]:IfStatement[3980-5067]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3998-5067]:Block[3998-5067]"
    }, {
      "left" : "if (text.length() == 0 || (text = text.trim()).length() == 0)",
      "right" : "if (text.length() == 0 || (text = text.trim()).length() == 0)",
      "info" : "IfStatement[4041-4253]:IfStatement[4041-4253]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4103-4253]:Block[4103-4253]"
    }, {
      "left" : "return _deserializeFromEmptyString();",
      "right" : "return _deserializeFromEmptyString();",
      "info" : "ReturnStatement[4202-4239]:ReturnStatement[4202-4239]"
    }, {
      "left" : "Exception cause = null;",
      "right" : "Exception cause = null;",
      "info" : "VariableDeclarationStatement[4266-4289]:VariableDeclarationStatement[4266-4289]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[4302-4547]:TryStatement[4302-4547]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4306-4465]:Block[4306-4465]"
    }, {
      "left" : "T result = _deserialize(text, ctxt);",
      "right" : "T result = _deserialize(text, ctxt);",
      "info" : "VariableDeclarationStatement[4324-4360]:VariableDeclarationStatement[4324-4360]"
    }, {
      "left" : "if (result != null)",
      "right" : "if (result != null)",
      "info" : "IfStatement[4377-4451]:IfStatement[4377-4451]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4397-4451]:Block[4397-4451]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[4419-4433]:ReturnStatement[4419-4433]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4503-4547]:Block[4503-4547]"
    }, {
      "left" : "cause = iae;",
      "right" : "cause = iae;",
      "info" : "ExpressionStatement[4521-4533]:ExpressionStatement[4521-4533]"
    }, {
      "left" : "String msg = \"not a valid textual representation\";",
      "right" : "String msg = \"not a valid textual representation\";",
      "info" : "VariableDeclarationStatement[4560-4610]:VariableDeclarationStatement[4560-4610]"
    }, {
      "left" : "if (cause != null)",
      "right" : "if (cause != null)",
      "info" : "IfStatement[4623-4807]:IfStatement[4623-4807]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4642-4807]:Block[4642-4807]"
    }, {
      "left" : "String m2 = cause.getMessage();",
      "right" : "String m2 = cause.getMessage();",
      "info" : "VariableDeclarationStatement[4660-4691]:VariableDeclarationStatement[4660-4691]"
    }, {
      "left" : "if (m2 != null)",
      "right" : "if (m2 != null)",
      "info" : "IfStatement[4708-4793]:IfStatement[4708-4793]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4724-4793]:Block[4724-4793]"
    }, {
      "left" : "msg = msg + \", problem: \"+m2;",
      "right" : "msg = msg + \", problem: \"+m2;",
      "info" : "ExpressionStatement[4746-4775]:ExpressionStatement[4746-4775]"
    }, {
      "left" : "JsonMappingException e = ctxt.weirdStringException(text, _valueClass, msg);",
      "right" : "JsonMappingException e = ctxt.weirdStringException(text, _valueClass, msg);",
      "info" : "VariableDeclarationStatement[4820-4895]:VariableDeclarationStatement[4820-4895]"
    }, {
      "left" : "if (cause != null)",
      "right" : "if (cause != null)",
      "info" : "IfStatement[4908-4978]:IfStatement[4908-4978]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4927-4978]:Block[4927-4978]"
    }, {
      "left" : "e.initCause(cause);",
      "right" : "e.initCause(cause);",
      "info" : "ExpressionStatement[4945-4964]:ExpressionStatement[4945-4964]"
    }, {
      "left" : "throw e;",
      "right" : "throw e;",
      "info" : "ThrowStatement[4991-4999]:ThrowStatement[4991-4999]"
    }, {
      "left" : "if (p.getCurrentToken() == JsonToken.VALUE_EMBEDDED_OBJECT)",
      "right" : "if (p.getCurrentToken() == JsonToken.VALUE_EMBEDDED_OBJECT)",
      "info" : "IfStatement[5076-5509]:IfStatement[5076-5509]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5136-5509]:Block[5136-5509]"
    }, {
      "left" : "Object ob = p.getEmbeddedObject();",
      "right" : "Object ob = p.getEmbeddedObject();",
      "info" : "VariableDeclarationStatement[5233-5267]:VariableDeclarationStatement[5233-5267]"
    }, {
      "left" : "if (ob == null)",
      "right" : "if (ob == null)",
      "info" : "IfStatement[5280-5340]:IfStatement[5280-5340]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5296-5340]:Block[5296-5340]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[5314-5326]:ReturnStatement[5314-5326]"
    }, {
      "left" : "if (_valueClass.isAssignableFrom(ob.getClass()))",
      "right" : "if (_valueClass.isAssignableFrom(ob.getClass()))",
      "info" : "IfStatement[5353-5448]:IfStatement[5353-5448]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5402-5448]:Block[5402-5448]"
    }, {
      "left" : "return (T) ob;",
      "right" : "return (T) ob;",
      "info" : "ReturnStatement[5420-5434]:ReturnStatement[5420-5434]"
    }, {
      "left" : "return _deserializeEmbedded(ob, ctxt);",
      "right" : "return _deserializeEmbedded(ob, ctxt);",
      "info" : "ReturnStatement[5461-5499]:ReturnStatement[5461-5499]"
    }, {
      "left" : "throw ctxt.mappingException(_valueClass);",
      "right" : "throw ctxt.mappingException(_valueClass);",
      "info" : "ThrowStatement[5518-5559]:ThrowStatement[5518-5559]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[5579-5588]:Modifier[5579-5588]"
    }, {
      "left" : "abstract",
      "right" : "abstract",
      "info" : "Modifier[5589-5597]:Modifier[5589-5597]"
    }, {
      "left" : "T",
      "right" : "T",
      "info" : "SimpleType[5598-5599]:SimpleType[5598-5599]"
    }, {
      "left" : "_deserialize",
      "right" : "_deserialize",
      "info" : "SimpleName[5600-5612]:SimpleName[5600-5612]"
    }, {
      "left" : "String value",
      "right" : "String value",
      "info" : "SingleVariableDeclaration[5613-5625]:SingleVariableDeclaration[5613-5625]"
    }, {
      "left" : "DeserializationContext ctxt",
      "right" : "DeserializationContext ctxt",
      "info" : "SingleVariableDeclaration[5627-5654]:SingleVariableDeclaration[5627-5654]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[5663-5674]:SimpleType[5663-5674]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[5681-5690]:Modifier[5681-5690]"
    }, {
      "left" : "T",
      "right" : "T",
      "info" : "SimpleType[5691-5692]:SimpleType[5691-5692]"
    }, {
      "left" : "_deserializeEmbedded",
      "right" : "_deserializeEmbedded",
      "info" : "SimpleName[5693-5713]:SimpleName[5693-5713]"
    }, {
      "left" : "Object ob",
      "right" : "Object ob",
      "info" : "SingleVariableDeclaration[5714-5723]:SingleVariableDeclaration[5714-5723]"
    }, {
      "left" : "DeserializationContext ctxt",
      "right" : "DeserializationContext ctxt",
      "info" : "SingleVariableDeclaration[5725-5752]:SingleVariableDeclaration[5725-5752]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[5761-5772]:SimpleType[5761-5772]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5773-5980]:Block[5773-5980]"
    }, {
      "left" : "throw ctxt.mappingException(\"Don't know how to convert embedded Object of type %s into %s\",\n                ob.getClass().getName(), _valueClass.getName());",
      "right" : "throw ctxt.mappingException(\"Don't know how to convert embedded Object of type %s into %s\",\n                ob.getClass().getName(), _valueClass.getName());",
      "info" : "ThrowStatement[5818-5974]:ThrowStatement[5818-5974]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[5986-5995]:Modifier[5986-5995]"
    }, {
      "left" : "T",
      "right" : "T",
      "info" : "SimpleType[5996-5997]:SimpleType[5996-5997]"
    }, {
      "left" : "_deserializeFromEmptyString",
      "right" : "_deserializeFromEmptyString",
      "info" : "SimpleName[5998-6025]:SimpleName[5998-6025]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[6035-6046]:SimpleType[6035-6046]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6047-6075]:Block[6047-6075]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[6057-6069]:ReturnStatement[6057-6069]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[6417-6423]:Modifier[6417-6423]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[6424-6430]:Modifier[6424-6430]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[6431-6436]:TYPE_DECLARATION_KIND[6431-6436]"
    }, {
      "left" : "Std",
      "right" : "Std",
      "info" : "SimpleName[6437-6440]:SimpleName[6437-6440]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[7195-7204]:Modifier[7195-7204]"
    }, {
      "left" : "Std",
      "right" : "Std",
      "info" : "SimpleName[7205-7208]:SimpleName[7205-7208]"
    }, {
      "left" : "Class<?> valueType",
      "right" : "Class<?> valueType",
      "info" : "SingleVariableDeclaration[7209-7227]:SingleVariableDeclaration[7209-7227]"
    }, {
      "left" : "int kind",
      "right" : "int kind",
      "info" : "SingleVariableDeclaration[7229-7237]:SingleVariableDeclaration[7229-7237]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7239-7306]:Block[7239-7306]"
    }, {
      "left" : "super(valueType);",
      "right" : "super(valueType);",
      "info" : "SuperConstructorInvocation[7253-7270]:SuperConstructorInvocation[7253-7270]"
    }, {
      "left" : "_kind = kind;",
      "right" : "_kind = kind;",
      "info" : "ExpressionStatement[7283-7296]:ExpressionStatement[7283-7296]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[7316-7325]:MarkerAnnotation[7316-7325]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[7334-7343]:Modifier[7334-7343]"
    }, {
      "left" : "Object",
      "right" : "Object",
      "info" : "SimpleType[7344-7350]:SimpleType[7344-7350]"
    }, {
      "left" : "_deserialize",
      "right" : "_deserialize",
      "info" : "SimpleName[7351-7363]:SimpleName[7351-7363]"
    }, {
      "left" : "String value",
      "right" : "String value",
      "info" : "SingleVariableDeclaration[7364-7376]:SingleVariableDeclaration[7364-7376]"
    }, {
      "left" : "DeserializationContext ctxt",
      "right" : "DeserializationContext ctxt",
      "info" : "SingleVariableDeclaration[7378-7405]:SingleVariableDeclaration[7378-7405]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[7414-7425]:SimpleType[7414-7425]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7434-10488]:Block[7434-10514]"
    }, {
      "left" : "switch (_kind) {\n            case STD_FILE:\n                return new File(value);\n            case STD_URL:\n                return new URL(value);\n            case STD_URI:\n                return URI.create(value);\n            case STD_CLASS:\n                try {\n                    return ctxt.findClass(value);\n                } catch (Exception e) {\n                    throw ctxt.instantiationException(_valueClass, ClassUtil.getRootCause(e));\n                }\n            case STD_JAVA_TYPE:\n                return ctxt.getTypeFactory().constructFromCanonical(value);\n            case STD_CURRENCY:\n                // will throw IAE if unknown:\n                return Currency.getInstance(value);\n            case STD_PATTERN:\n                // will throw IAE (or its subclass) if malformed\n                return Pattern.compile(value);\n            case STD_LOCALE:\n                {\n                    int ix = value.indexOf('_');\n                    if (ix < 0) { // single argument\n                        return new Locale(value);\n                    }\n                    String first = value.substring(0, ix);\n                    value = value.substring(ix+1);\n                    ix = value.indexOf('_');\n                    if (ix < 0) { // two pieces\n                        return new Locale(first, value);\n                    }\n                    String second = value.substring(0, ix);\n                    return new Locale(first, second, value.substring(ix+1));\n                }\n            case STD_CHARSET:\n                return Charset.forName(value);\n            case STD_TIME_ZONE:\n                return TimeZone.getTimeZone(value);\n            case STD_INET_ADDRESS:\n                return InetAddress.getByName(value);\n            case STD_INET_SOCKET_ADDRESS:\n                if (value.startsWith(\"[\")) {\n                    // bracketed IPv6 (with port number)\n\n                    int i = value.lastIndexOf(']');\n                    if (i == -1) {\n                        throw new InvalidFormatException(ctxt.getParser(),\n                                \"Bracketed IPv6 address must contain closing bracket\",\n                                value, InetSocketAddress.class);\n                    }\n\n                    int j = value.indexOf(':', i);\n                    int port = j > -1 ? Integer.parseInt(value.substring(j + 1)) : 0;\n                    return new InetSocketAddress(value.substring(0, i + 1), port);\n                } else {\n                    int ix = value.indexOf(':');\n                    if (ix >= 0 && value.indexOf(':', ix + 1) < 0) {\n                        // host:port\n                        int port = Integer.parseInt(value.substring(ix+1));\n                        return new InetSocketAddress(value.substring(0, ix), port);\n                    }\n                    // host or unbracketed IPv6, without port number\n                    return new InetSocketAddress(value, 0);\n                }\n            }",
      "right" : "switch (_kind) {\n            case STD_FILE:\n                return new File(value);\n            case STD_URL:\n                return new URL(value);\n            case STD_URI:\n                return URI.create(value);\n            case STD_CLASS:\n                try {\n                    return ctxt.findClass(value);\n                } catch (Exception e) {\n                    throw ctxt.instantiationException(_valueClass, ClassUtil.getRootCause(e));\n                }\n            case STD_JAVA_TYPE:\n                return ctxt.getTypeFactory().constructFromCanonical(value);\n            case STD_CURRENCY:\n                // will throw IAE if unknown:\n                return Currency.getInstance(value);\n            case STD_PATTERN:\n                // will throw IAE (or its subclass) if malformed\n                return Pattern.compile(value);\n            case STD_LOCALE:\n                {\n                    int ix = _firstHyphenOrUnderscore(value);\n                    if (ix < 0) { // single argument\n                        return new Locale(value);\n                    }\n                    String first = value.substring(0, ix);\n                    value = value.substring(ix+1);\n                    ix = _firstHyphenOrUnderscore(value);\n                    if (ix < 0) { // two pieces\n                        return new Locale(first, value);\n                    }\n                    String second = value.substring(0, ix);\n                    return new Locale(first, second, value.substring(ix+1));\n                }\n            case STD_CHARSET:\n                return Charset.forName(value);\n            case STD_TIME_ZONE:\n                return TimeZone.getTimeZone(value);\n            case STD_INET_ADDRESS:\n                return InetAddress.getByName(value);\n            case STD_INET_SOCKET_ADDRESS:\n                if (value.startsWith(\"[\")) {\n                    // bracketed IPv6 (with port number)\n\n                    int i = value.lastIndexOf(']');\n                    if (i == -1) {\n                        throw new InvalidFormatException(ctxt.getParser(),\n                                \"Bracketed IPv6 address must contain closing bracket\",\n                                value, InetSocketAddress.class);\n                    }\n\n                    int j = value.indexOf(':', i);\n                    int port = j > -1 ? Integer.parseInt(value.substring(j + 1)) : 0;\n                    return new InetSocketAddress(value.substring(0, i + 1), port);\n                } else {\n                    int ix = value.indexOf(':');\n                    if (ix >= 0 && value.indexOf(':', ix + 1) < 0) {\n                        // host:port\n                        int port = Integer.parseInt(value.substring(ix+1));\n                        return new InetSocketAddress(value.substring(0, ix), port);\n                    }\n                    // host or unbracketed IPv6, without port number\n                    return new InetSocketAddress(value, 0);\n                }\n            }",
      "info" : "SwitchStatement[7448-10428]:SwitchStatement[7448-10454]"
    }, {
      "left" : "case STD_FILE:",
      "right" : "case STD_FILE:",
      "info" : "SwitchCase[7477-7491]:SwitchCase[7477-7491]"
    }, {
      "left" : "return new File(value);",
      "right" : "return new File(value);",
      "info" : "ReturnStatement[7508-7531]:ReturnStatement[7508-7531]"
    }, {
      "left" : "case STD_URL:",
      "right" : "case STD_URL:",
      "info" : "SwitchCase[7544-7557]:SwitchCase[7544-7557]"
    }, {
      "left" : "return new URL(value);",
      "right" : "return new URL(value);",
      "info" : "ReturnStatement[7574-7596]:ReturnStatement[7574-7596]"
    }, {
      "left" : "case STD_URI:",
      "right" : "case STD_URI:",
      "info" : "SwitchCase[7609-7622]:SwitchCase[7609-7622]"
    }, {
      "left" : "return URI.create(value);",
      "right" : "return URI.create(value);",
      "info" : "ReturnStatement[7639-7664]:ReturnStatement[7639-7664]"
    }, {
      "left" : "case STD_CLASS:",
      "right" : "case STD_CLASS:",
      "info" : "SwitchCase[7677-7692]:SwitchCase[7677-7692]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[7709-7917]:TryStatement[7709-7917]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7713-7782]:Block[7713-7782]"
    }, {
      "left" : "return ctxt.findClass(value);",
      "right" : "return ctxt.findClass(value);",
      "info" : "ReturnStatement[7735-7764]:ReturnStatement[7735-7764]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7803-7917]:Block[7803-7917]"
    }, {
      "left" : "throw ctxt.instantiationException(_valueClass, ClassUtil.getRootCause(e));",
      "right" : "throw ctxt.instantiationException(_valueClass, ClassUtil.getRootCause(e));",
      "info" : "ThrowStatement[7825-7899]:ThrowStatement[7825-7899]"
    }, {
      "left" : "case STD_JAVA_TYPE:",
      "right" : "case STD_JAVA_TYPE:",
      "info" : "SwitchCase[7930-7949]:SwitchCase[7930-7949]"
    }, {
      "left" : "return ctxt.getTypeFactory().constructFromCanonical(value);",
      "right" : "return ctxt.getTypeFactory().constructFromCanonical(value);",
      "info" : "ReturnStatement[7966-8025]:ReturnStatement[7966-8025]"
    }, {
      "left" : "case STD_CURRENCY:",
      "right" : "case STD_CURRENCY:",
      "info" : "SwitchCase[8038-8056]:SwitchCase[8038-8056]"
    }, {
      "left" : "return Currency.getInstance(value);",
      "right" : "return Currency.getInstance(value);",
      "info" : "ReturnStatement[8119-8154]:ReturnStatement[8119-8154]"
    }, {
      "left" : "case STD_PATTERN:",
      "right" : "case STD_PATTERN:",
      "info" : "SwitchCase[8167-8184]:SwitchCase[8167-8184]"
    }, {
      "left" : "return Pattern.compile(value);",
      "right" : "return Pattern.compile(value);",
      "info" : "ReturnStatement[8266-8296]:ReturnStatement[8266-8296]"
    }, {
      "left" : "case STD_LOCALE:",
      "right" : "case STD_LOCALE:",
      "info" : "SwitchCase[8309-8325]:SwitchCase[8309-8325]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8342-8954]:Block[8342-8980]"
    }, {
      "left" : "int ix = value.indexOf('_');",
      "right" : "int ix = _firstHyphenOrUnderscore(value);",
      "info" : "VariableDeclarationStatement[8364-8392]:VariableDeclarationStatement[8364-8405]"
    }, {
      "left" : "value",
      "right" : "value",
      "info" : "SimpleName[8373-8378]:SimpleName[8398-8403]"
    }, {
      "left" : "if (ix < 0)",
      "right" : "if (ix < 0)",
      "info" : "IfStatement[8413-8517]:IfStatement[8426-8530]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8425-8517]:Block[8438-8530]"
    }, {
      "left" : "return new Locale(value);",
      "right" : "return new Locale(value);",
      "info" : "ReturnStatement[8470-8495]:ReturnStatement[8483-8508]"
    }, {
      "left" : "String first = value.substring(0, ix);",
      "right" : "String first = value.substring(0, ix);",
      "info" : "VariableDeclarationStatement[8538-8576]:VariableDeclarationStatement[8551-8589]"
    }, {
      "left" : "value = value.substring(ix+1);",
      "right" : "value = value.substring(ix+1);",
      "info" : "ExpressionStatement[8597-8627]:ExpressionStatement[8610-8640]"
    }, {
      "left" : "ix = value.indexOf('_');",
      "right" : "ix = _firstHyphenOrUnderscore(value);",
      "info" : "ExpressionStatement[8648-8672]:ExpressionStatement[8661-8698]"
    }, {
      "left" : "value",
      "right" : "value",
      "info" : "SimpleName[8653-8658]:SimpleName[8691-8696]"
    }, {
      "left" : "if (ix < 0)",
      "right" : "if (ix < 0)",
      "info" : "IfStatement[8693-8799]:IfStatement[8719-8825]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8705-8799]:Block[8731-8825]"
    }, {
      "left" : "return new Locale(first, value);",
      "right" : "return new Locale(first, value);",
      "info" : "ReturnStatement[8745-8777]:ReturnStatement[8771-8803]"
    }, {
      "left" : "String second = value.substring(0, ix);",
      "right" : "String second = value.substring(0, ix);",
      "info" : "VariableDeclarationStatement[8820-8859]:VariableDeclarationStatement[8846-8885]"
    }, {
      "left" : "return new Locale(first, second, value.substring(ix+1));",
      "right" : "return new Locale(first, second, value.substring(ix+1));",
      "info" : "ReturnStatement[8880-8936]:ReturnStatement[8906-8962]"
    }, {
      "left" : "case STD_CHARSET:",
      "right" : "case STD_CHARSET:",
      "info" : "SwitchCase[8967-8984]:SwitchCase[8993-9010]"
    }, {
      "left" : "return Charset.forName(value);",
      "right" : "return Charset.forName(value);",
      "info" : "ReturnStatement[9001-9031]:ReturnStatement[9027-9057]"
    }, {
      "left" : "case STD_TIME_ZONE:",
      "right" : "case STD_TIME_ZONE:",
      "info" : "SwitchCase[9044-9063]:SwitchCase[9070-9089]"
    }, {
      "left" : "return TimeZone.getTimeZone(value);",
      "right" : "return TimeZone.getTimeZone(value);",
      "info" : "ReturnStatement[9080-9115]:ReturnStatement[9106-9141]"
    }, {
      "left" : "case STD_INET_ADDRESS:",
      "right" : "case STD_INET_ADDRESS:",
      "info" : "SwitchCase[9128-9150]:SwitchCase[9154-9176]"
    }, {
      "left" : "return InetAddress.getByName(value);",
      "right" : "return InetAddress.getByName(value);",
      "info" : "ReturnStatement[9167-9203]:ReturnStatement[9193-9229]"
    }, {
      "left" : "case STD_INET_SOCKET_ADDRESS:",
      "right" : "case STD_INET_SOCKET_ADDRESS:",
      "info" : "SwitchCase[9216-9245]:SwitchCase[9242-9271]"
    }, {
      "left" : "if (value.startsWith(\"[\"))",
      "right" : "if (value.startsWith(\"[\"))",
      "info" : "IfStatement[9262-10414]:IfStatement[9288-10440]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9289-9923]:Block[9315-9949]"
    }, {
      "left" : "int i = value.lastIndexOf(']');",
      "right" : "int i = value.lastIndexOf(']');",
      "info" : "VariableDeclarationStatement[9369-9400]:VariableDeclarationStatement[9395-9426]"
    }, {
      "left" : "if (i == -1)",
      "right" : "if (i == -1)",
      "info" : "IfStatement[9421-9684]:IfStatement[9447-9710]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9434-9684]:Block[9460-9710]"
    }, {
      "left" : "throw new InvalidFormatException(ctxt.getParser(),\n                                \"Bracketed IPv6 address must contain closing bracket\",\n                                value, InetSocketAddress.class);",
      "right" : "throw new InvalidFormatException(ctxt.getParser(),\n                                \"Bracketed IPv6 address must contain closing bracket\",\n                                value, InetSocketAddress.class);",
      "info" : "ThrowStatement[9460-9662]:ThrowStatement[9486-9688]"
    }, {
      "left" : "int j = value.indexOf(':', i);",
      "right" : "int j = value.indexOf(':', i);",
      "info" : "VariableDeclarationStatement[9706-9736]:VariableDeclarationStatement[9732-9762]"
    }, {
      "left" : "int port = j > -1 ? Integer.parseInt(value.substring(j + 1)) : 0;",
      "right" : "int port = j > -1 ? Integer.parseInt(value.substring(j + 1)) : 0;",
      "info" : "VariableDeclarationStatement[9757-9822]:VariableDeclarationStatement[9783-9848]"
    }, {
      "left" : "return new InetSocketAddress(value.substring(0, i + 1), port);",
      "right" : "return new InetSocketAddress(value.substring(0, i + 1), port);",
      "info" : "ReturnStatement[9843-9905]:ReturnStatement[9869-9931]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9929-10414]:Block[9955-10440]"
    }, {
      "left" : "int ix = value.indexOf(':');",
      "right" : "int ix = value.indexOf(':');",
      "info" : "VariableDeclarationStatement[9951-9979]:VariableDeclarationStatement[9977-10005]"
    }, {
      "left" : "if (ix >= 0 && value.indexOf(':', ix + 1) < 0)",
      "right" : "if (ix >= 0 && value.indexOf(':', ix + 1) < 0)",
      "info" : "IfStatement[10000-10267]:IfStatement[10026-10293]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10047-10267]:Block[10073-10293]"
    }, {
      "left" : "int port = Integer.parseInt(value.substring(ix+1));",
      "right" : "int port = Integer.parseInt(value.substring(ix+1));",
      "info" : "VariableDeclarationStatement[10110-10161]:VariableDeclarationStatement[10136-10187]"
    }, {
      "left" : "return new InetSocketAddress(value.substring(0, ix), port);",
      "right" : "return new InetSocketAddress(value.substring(0, ix), port);",
      "info" : "ReturnStatement[10186-10245]:ReturnStatement[10212-10271]"
    }, {
      "left" : "return new InetSocketAddress(value, 0);",
      "right" : "return new InetSocketAddress(value, 0);",
      "info" : "ReturnStatement[10357-10396]:ReturnStatement[10383-10422]"
    }, {
      "left" : "throw new IllegalArgumentException();",
      "right" : "throw new IllegalArgumentException();",
      "info" : "ThrowStatement[10441-10478]:ThrowStatement[10467-10504]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[10498-10507]:MarkerAnnotation[10524-10533]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[10516-10525]:Modifier[10542-10551]"
    }, {
      "left" : "Object",
      "right" : "Object",
      "info" : "SimpleType[10526-10532]:SimpleType[10552-10558]"
    }, {
      "left" : "_deserializeFromEmptyString",
      "right" : "_deserializeFromEmptyString",
      "info" : "SimpleName[10533-10560]:SimpleName[10559-10586]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[10570-10581]:SimpleType[10596-10607]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10582-10945]:Block[10608-10971]"
    }, {
      "left" : "if (_kind == STD_URI)",
      "right" : "if (_kind == STD_URI)",
      "info" : "IfStatement[10664-10740]:IfStatement[10690-10766]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10686-10740]:Block[10712-10766]"
    }, {
      "left" : "return URI.create(\"\");",
      "right" : "return URI.create(\"\");",
      "info" : "ReturnStatement[10704-10726]:ReturnStatement[10730-10752]"
    }, {
      "left" : "if (_kind == STD_LOCALE)",
      "right" : "if (_kind == STD_LOCALE)",
      "info" : "IfStatement[10803-10879]:IfStatement[10829-10905]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10828-10879]:Block[10854-10905]"
    }, {
      "left" : "return Locale.ROOT;",
      "right" : "return Locale.ROOT;",
      "info" : "ReturnStatement[10846-10865]:ReturnStatement[10872-10891]"
    }, {
      "left" : "return super._deserializeFromEmptyString();",
      "right" : "return super._deserializeFromEmptyString();",
      "info" : "ReturnStatement[10892-10935]:ReturnStatement[10918-10961]"
    } ]
  },
  "interFileMappings" : { }
}