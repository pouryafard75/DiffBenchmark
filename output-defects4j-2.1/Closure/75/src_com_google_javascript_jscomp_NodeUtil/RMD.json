{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "NodeUtil",
      "right" : "NodeUtil",
      "info" : "TypeDeclaration[1420-88288]:TypeDeclaration[1420-88398]"
    }, {
      "left" : "final static String JSC_PROPERTY_NAME_FN = \"JSCompiler_renameProperty\";",
      "right" : "final static String JSC_PROPERTY_NAME_FN = \"JSCompiler_renameProperty\";",
      "info" : "FieldDeclaration[1537-1608]:FieldDeclaration[1537-1608]"
    }, {
      "left" : "private static final Set<String> CONSTRUCTORS_WITHOUT_SIDE_EFFECTS =\n      new HashSet<String>(Arrays.asList(\n        \"Array\",\n        \"Date\",\n        \"Error\",\n        \"Object\",\n        \"RegExp\",\n        \"XMLHttpRequest\"));",
      "right" : "private static final Set<String> CONSTRUCTORS_WITHOUT_SIDE_EFFECTS =\n      new HashSet<String>(Arrays.asList(\n        \"Array\",\n        \"Date\",\n        \"Error\",\n        \"Object\",\n        \"RegExp\",\n        \"XMLHttpRequest\"));",
      "info" : "FieldDeclaration[1745-2039]:FieldDeclaration[1745-2039]"
    }, {
      "left" : "private NodeUtil()",
      "right" : "private NodeUtil()",
      "info" : "MethodDeclaration[2083-2104]:MethodDeclaration[2083-2104]"
    }, {
      "left" : "static TernaryValue getImpureBooleanValue(Node n)",
      "right" : "static TernaryValue getImpureBooleanValue(Node n)",
      "info" : "MethodDeclaration[2108-3688]:MethodDeclaration[2108-3688]"
    }, {
      "left" : "static TernaryValue getPureBooleanValue(Node n)",
      "right" : "static TernaryValue getPureBooleanValue(Node n)",
      "info" : "MethodDeclaration[3692-5136]:MethodDeclaration[3692-5136]"
    }, {
      "left" : "static String getStringValue(Node n)",
      "right" : "static String getStringValue(Node n)",
      "info" : "MethodDeclaration[5141-6596]:MethodDeclaration[5141-6596]"
    }, {
      "left" : "static String getArrayElementStringValue(Node n)",
      "right" : "static String getArrayElementStringValue(Node n)",
      "info" : "MethodDeclaration[6600-7137]:MethodDeclaration[6600-7137]"
    }, {
      "left" : "static String arrayToString(Node literal)",
      "right" : "static String arrayToString(Node literal)",
      "info" : "MethodDeclaration[7141-7647]:MethodDeclaration[7141-7647]"
    }, {
      "left" : "static Double getNumberValue(Node n)",
      "right" : "static Double getNumberValue(Node n)",
      "info" : "MethodDeclaration[7651-9364]:MethodDeclaration[7651-9364]"
    }, {
      "left" : "static Double getStringNumberValue(String rawJsString)",
      "right" : "static Double getStringNumberValue(String rawJsString)",
      "info" : "MethodDeclaration[9368-10571]:MethodDeclaration[9368-10638]"
    }, {
      "left" : "static String trimJsWhiteSpace(String s)",
      "right" : "static String trimJsWhiteSpace(String s)",
      "info" : "MethodDeclaration[10575-10930]:MethodDeclaration[10642-10997]"
    }, {
      "left" : "static TernaryValue isStrWhiteSpaceChar(int c)",
      "right" : "static TernaryValue isStrWhiteSpaceChar(int c)",
      "info" : "MethodDeclaration[10934-11541]:MethodDeclaration[11001-11651]"
    }, {
      "left" : "static String getFunctionName(Node n)",
      "right" : "static String getFunctionName(Node n)",
      "info" : "MethodDeclaration[11545-12749]:MethodDeclaration[11655-12859]"
    }, {
      "left" : "static String getNearestFunctionName(Node n)",
      "right" : "static String getNearestFunctionName(Node n)",
      "info" : "MethodDeclaration[12753-13849]:MethodDeclaration[12863-13959]"
    }, {
      "left" : "static boolean isImmutableValue(Node n)",
      "right" : "static boolean isImmutableValue(Node n)",
      "info" : "MethodDeclaration[13854-14642]:MethodDeclaration[13964-14752]"
    }, {
      "left" : "static boolean isLiteralValue(Node n, boolean includeFunctions)",
      "right" : "static boolean isLiteralValue(Node n, boolean includeFunctions)",
      "info" : "MethodDeclaration[14646-16736]:MethodDeclaration[14756-16846]"
    }, {
      "left" : "static boolean isValidDefineValue(Node val, Set<String> defines)",
      "right" : "static boolean isValidDefineValue(Node val, Set<String> defines)",
      "info" : "MethodDeclaration[16740-18230]:MethodDeclaration[16850-18340]"
    }, {
      "left" : "static boolean isEmptyBlock(Node block)",
      "right" : "static boolean isEmptyBlock(Node block)",
      "info" : "MethodDeclaration[18234-18614]:MethodDeclaration[18344-18724]"
    }, {
      "left" : "static boolean isSimpleOperator(Node n)",
      "right" : "static boolean isSimpleOperator(Node n)",
      "info" : "MethodDeclaration[18618-18709]:MethodDeclaration[18728-18819]"
    }, {
      "left" : "static boolean isSimpleOperatorType(int type)",
      "right" : "static boolean isSimpleOperatorType(int type)",
      "info" : "MethodDeclaration[18713-19690]:MethodDeclaration[18823-19800]"
    }, {
      "left" : "public static Node newExpr(Node child)",
      "right" : "public static Node newExpr(Node child)",
      "info" : "MethodDeclaration[19694-20000]:MethodDeclaration[19804-20110]"
    }, {
      "left" : "static boolean mayEffectMutableState(Node n)",
      "right" : "static boolean mayEffectMutableState(Node n)",
      "info" : "MethodDeclaration[20004-20267]:MethodDeclaration[20114-20377]"
    }, {
      "left" : "static boolean mayEffectMutableState(Node n, AbstractCompiler compiler)",
      "right" : "static boolean mayEffectMutableState(Node n, AbstractCompiler compiler)",
      "info" : "MethodDeclaration[20271-20405]:MethodDeclaration[20381-20515]"
    }, {
      "left" : "static boolean mayHaveSideEffects(Node n)",
      "right" : "static boolean mayHaveSideEffects(Node n)",
      "info" : "MethodDeclaration[20409-20581]:MethodDeclaration[20519-20691]"
    }, {
      "left" : "static boolean mayHaveSideEffects(Node n, AbstractCompiler compiler)",
      "right" : "static boolean mayHaveSideEffects(Node n, AbstractCompiler compiler)",
      "info" : "MethodDeclaration[20585-20717]:MethodDeclaration[20695-20827]"
    }, {
      "left" : "private static boolean checkForStateChangeHelper(\n      Node n, boolean checkForNewObjects, AbstractCompiler compiler)",
      "right" : "private static boolean checkForStateChangeHelper(\n      Node n, boolean checkForNewObjects, AbstractCompiler compiler)",
      "info" : "MethodDeclaration[20721-25562]:MethodDeclaration[20831-25672]"
    }, {
      "left" : "static boolean constructorCallHasSideEffects(Node callNode)",
      "right" : "static boolean constructorCallHasSideEffects(Node callNode)",
      "info" : "MethodDeclaration[25566-25803]:MethodDeclaration[25676-25913]"
    }, {
      "left" : "static boolean constructorCallHasSideEffects(\n      Node callNode, AbstractCompiler compiler)",
      "right" : "static boolean constructorCallHasSideEffects(\n      Node callNode, AbstractCompiler compiler)",
      "info" : "MethodDeclaration[25807-26345]:MethodDeclaration[25917-26455]"
    }, {
      "left" : "private static final Set<String> BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS =\n      ImmutableSet.of(\n          \"Object\", \"Array\", \"String\", \"Number\", \"Boolean\", \"RegExp\", \"Error\");",
      "right" : "private static final Set<String> BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS =\n      ImmutableSet.of(\n          \"Object\", \"Array\", \"String\", \"Number\", \"Boolean\", \"RegExp\", \"Error\");",
      "info" : "FieldDeclaration[26558-26733]:FieldDeclaration[26668-26843]"
    }, {
      "left" : "private static final Set<String> OBJECT_METHODS_WITHOUT_SIDEEFFECTS =\n      ImmutableSet.of(\"toString\", \"valueOf\");",
      "right" : "private static final Set<String> OBJECT_METHODS_WITHOUT_SIDEEFFECTS =\n      ImmutableSet.of(\"toString\", \"valueOf\");",
      "info" : "FieldDeclaration[26736-26851]:FieldDeclaration[26846-26961]"
    }, {
      "left" : "private static final Set<String> REGEXP_METHODS =\n      ImmutableSet.of(\"test\", \"exec\");",
      "right" : "private static final Set<String> REGEXP_METHODS =\n      ImmutableSet.of(\"test\", \"exec\");",
      "info" : "FieldDeclaration[26854-26942]:FieldDeclaration[26964-27052]"
    }, {
      "left" : "private static final Set<String> STRING_REGEXP_METHODS =\n      ImmutableSet.of(\"match\", \"replace\", \"search\", \"split\");",
      "right" : "private static final Set<String> STRING_REGEXP_METHODS =\n      ImmutableSet.of(\"match\", \"replace\", \"search\", \"split\");",
      "info" : "FieldDeclaration[26945-27063]:FieldDeclaration[27055-27173]"
    }, {
      "left" : "static boolean functionCallHasSideEffects(Node callNode)",
      "right" : "static boolean functionCallHasSideEffects(Node callNode)",
      "info" : "MethodDeclaration[27067-27306]:MethodDeclaration[27177-27416]"
    }, {
      "left" : "static boolean functionCallHasSideEffects(\n      Node callNode, @Nullable AbstractCompiler compiler)",
      "right" : "static boolean functionCallHasSideEffects(\n      Node callNode, @Nullable AbstractCompiler compiler)",
      "info" : "MethodDeclaration[27310-29475]:MethodDeclaration[27420-29585]"
    }, {
      "left" : "static boolean callHasLocalResult(Node n)",
      "right" : "static boolean callHasLocalResult(Node n)",
      "info" : "MethodDeclaration[29479-29712]:MethodDeclaration[29589-29822]"
    }, {
      "left" : "static boolean newHasLocalResult(Node n)",
      "right" : "static boolean newHasLocalResult(Node n)",
      "info" : "MethodDeclaration[29716-29918]:MethodDeclaration[29826-30028]"
    }, {
      "left" : "static boolean nodeTypeMayHaveSideEffects(Node n)",
      "right" : "static boolean nodeTypeMayHaveSideEffects(Node n)",
      "info" : "MethodDeclaration[29922-30294]:MethodDeclaration[30032-30404]"
    }, {
      "left" : "static boolean nodeTypeMayHaveSideEffects(Node n, AbstractCompiler compiler)",
      "right" : "static boolean nodeTypeMayHaveSideEffects(Node n, AbstractCompiler compiler)",
      "info" : "MethodDeclaration[30298-30886]:MethodDeclaration[30408-30996]"
    }, {
      "left" : "static boolean canBeSideEffected(Node n)",
      "right" : "static boolean canBeSideEffected(Node n)",
      "info" : "MethodDeclaration[30890-31130]:MethodDeclaration[31000-31240]"
    }, {
      "left" : "static boolean canBeSideEffected(Node n, Set<String> knownConstants)",
      "right" : "static boolean canBeSideEffected(Node n, Set<String> knownConstants)",
      "info" : "MethodDeclaration[31134-32469]:MethodDeclaration[31244-32579]"
    }, {
      "left" : "static int precedence(int type)",
      "right" : "static int precedence(int type)",
      "info" : "MethodDeclaration[32906-34936]:MethodDeclaration[33016-35046]"
    }, {
      "left" : "static boolean valueCheck(Node n, Predicate<Node> p)",
      "right" : "static boolean valueCheck(Node n, Predicate<Node> p)",
      "info" : "MethodDeclaration[34940-35550]:MethodDeclaration[35050-35660]"
    }, {
      "left" : "NumbericResultPredicate",
      "right" : "NumbericResultPredicate",
      "info" : "TypeDeclaration[35554-35703]:TypeDeclaration[35664-35813]"
    }, {
      "left" : "public boolean apply(Node n)",
      "right" : "public boolean apply(Node n)",
      "info" : "MethodDeclaration[35624-35699]:MethodDeclaration[35734-35809]"
    }, {
      "left" : "static final NumbericResultPredicate NUMBERIC_RESULT_PREDICATE =\n      new NumbericResultPredicate();",
      "right" : "static final NumbericResultPredicate NUMBERIC_RESULT_PREDICATE =\n      new NumbericResultPredicate();",
      "info" : "FieldDeclaration[35707-35808]:FieldDeclaration[35817-35918]"
    }, {
      "left" : "static boolean isNumericResult(Node n)",
      "right" : "static boolean isNumericResult(Node n)",
      "info" : "MethodDeclaration[35812-35991]:MethodDeclaration[35922-36101]"
    }, {
      "left" : "static boolean isNumericResultHelper(Node n)",
      "right" : "static boolean isNumericResultHelper(Node n)",
      "info" : "MethodDeclaration[35995-36840]:MethodDeclaration[36105-36950]"
    }, {
      "left" : "BooleanResultPredicate",
      "right" : "BooleanResultPredicate",
      "info" : "TypeDeclaration[36844-36992]:TypeDeclaration[36954-37102]"
    }, {
      "left" : "public boolean apply(Node n)",
      "right" : "public boolean apply(Node n)",
      "info" : "MethodDeclaration[36913-36988]:MethodDeclaration[37023-37098]"
    }, {
      "left" : "static final BooleanResultPredicate BOOLEAN_RESULT_PREDICATE =\n      new BooleanResultPredicate();",
      "right" : "static final BooleanResultPredicate BOOLEAN_RESULT_PREDICATE =\n      new BooleanResultPredicate();",
      "info" : "FieldDeclaration[36996-37094]:FieldDeclaration[37106-37204]"
    }, {
      "left" : "static boolean isBooleanResult(Node n)",
      "right" : "static boolean isBooleanResult(Node n)",
      "info" : "MethodDeclaration[37098-37277]:MethodDeclaration[37208-37387]"
    }, {
      "left" : "static boolean isBooleanResultHelper(Node n)",
      "right" : "static boolean isBooleanResultHelper(Node n)",
      "info" : "MethodDeclaration[37281-37861]:MethodDeclaration[37391-37971]"
    }, {
      "left" : "static boolean isUndefined(Node n)",
      "right" : "static boolean isUndefined(Node n)",
      "info" : "MethodDeclaration[37865-38073]:MethodDeclaration[37975-38183]"
    }, {
      "left" : "static boolean isNull(Node n)",
      "right" : "static boolean isNull(Node n)",
      "info" : "MethodDeclaration[38077-38150]:MethodDeclaration[38187-38260]"
    }, {
      "left" : "static boolean isNullOrUndefined(Node n)",
      "right" : "static boolean isNullOrUndefined(Node n)",
      "info" : "MethodDeclaration[38154-38240]:MethodDeclaration[38264-38350]"
    }, {
      "left" : "MayBeStringResultPredicate",
      "right" : "MayBeStringResultPredicate",
      "info" : "TypeDeclaration[38244-38392]:TypeDeclaration[38354-38502]"
    }, {
      "left" : "public boolean apply(Node n)",
      "right" : "public boolean apply(Node n)",
      "info" : "MethodDeclaration[38317-38388]:MethodDeclaration[38427-38498]"
    }, {
      "left" : "static final MayBeStringResultPredicate MAY_BE_STRING_PREDICATE =\n      new MayBeStringResultPredicate();",
      "right" : "static final MayBeStringResultPredicate MAY_BE_STRING_PREDICATE =\n      new MayBeStringResultPredicate();",
      "info" : "FieldDeclaration[38396-38501]:FieldDeclaration[38506-38611]"
    }, {
      "left" : "static boolean mayBeString(Node n)",
      "right" : "static boolean mayBeString(Node n)",
      "info" : "MethodDeclaration[38505-38646]:MethodDeclaration[38615-38756]"
    }, {
      "left" : "static boolean mayBeString(Node n, boolean recurse)",
      "right" : "static boolean mayBeString(Node n, boolean recurse)",
      "info" : "MethodDeclaration[38650-38833]:MethodDeclaration[38760-38943]"
    }, {
      "left" : "static boolean mayBeStringHelper(Node n)",
      "right" : "static boolean mayBeStringHelper(Node n)",
      "info" : "MethodDeclaration[38837-38979]:MethodDeclaration[38947-39089]"
    }, {
      "left" : "static boolean isAssociative(int type)",
      "right" : "static boolean isAssociative(int type)",
      "info" : "MethodDeclaration[38983-39475]:MethodDeclaration[39093-39585]"
    }, {
      "left" : "static boolean isCommutative(int type)",
      "right" : "static boolean isCommutative(int type)",
      "info" : "MethodDeclaration[39479-40007]:MethodDeclaration[39589-40117]"
    }, {
      "left" : "static boolean isAssignmentOp(Node n)",
      "right" : "static boolean isAssignmentOp(Node n)",
      "info" : "MethodDeclaration[40011-40478]:MethodDeclaration[40121-40588]"
    }, {
      "left" : "static int getOpFromAssignmentOp(Node n)",
      "right" : "static int getOpFromAssignmentOp(Node n)",
      "info" : "MethodDeclaration[40482-41245]:MethodDeclaration[40592-41355]"
    }, {
      "left" : "static boolean isExpressionNode(Node n)",
      "right" : "static boolean isExpressionNode(Node n)",
      "info" : "MethodDeclaration[41249-41339]:MethodDeclaration[41359-41449]"
    }, {
      "left" : "static boolean containsFunction(Node n)",
      "right" : "static boolean containsFunction(Node n)",
      "info" : "MethodDeclaration[41343-41537]:MethodDeclaration[41453-41647]"
    }, {
      "left" : "static boolean referencesThis(Node n)",
      "right" : "static boolean referencesThis(Node n)",
      "info" : "MethodDeclaration[41541-41737]:MethodDeclaration[41651-41847]"
    }, {
      "left" : "static boolean isGet(Node n)",
      "right" : "static boolean isGet(Node n)",
      "info" : "MethodDeclaration[41741-41908]:MethodDeclaration[41851-42018]"
    }, {
      "left" : "static boolean isGetProp(Node n)",
      "right" : "static boolean isGetProp(Node n)",
      "info" : "MethodDeclaration[41912-42032]:MethodDeclaration[42022-42142]"
    }, {
      "left" : "static boolean isName(Node n)",
      "right" : "static boolean isName(Node n)",
      "info" : "MethodDeclaration[42036-42147]:MethodDeclaration[42146-42257]"
    }, {
      "left" : "static boolean isNew(Node n)",
      "right" : "static boolean isNew(Node n)",
      "info" : "MethodDeclaration[42151-42259]:MethodDeclaration[42261-42369]"
    }, {
      "left" : "static boolean isVar(Node n)",
      "right" : "static boolean isVar(Node n)",
      "info" : "MethodDeclaration[42263-42371]:MethodDeclaration[42373-42481]"
    }, {
      "left" : "static boolean isVarDeclaration(Node n)",
      "right" : "static boolean isVarDeclaration(Node n)",
      "info" : "MethodDeclaration[42375-42784]:MethodDeclaration[42485-42894]"
    }, {
      "left" : "static Node getAssignedValue(Node n)",
      "right" : "static Node getAssignedValue(Node n)",
      "info" : "MethodDeclaration[42788-43230]:MethodDeclaration[42898-43340]"
    }, {
      "left" : "static boolean isString(Node n)",
      "right" : "static boolean isString(Node n)",
      "info" : "MethodDeclaration[43234-43351]:MethodDeclaration[43344-43461]"
    }, {
      "left" : "static boolean isExprAssign(Node n)",
      "right" : "static boolean isExprAssign(Node n)",
      "info" : "MethodDeclaration[43355-43683]:MethodDeclaration[43465-43793]"
    }, {
      "left" : "static boolean isAssign(Node n)",
      "right" : "static boolean isAssign(Node n)",
      "info" : "MethodDeclaration[43687-43805]:MethodDeclaration[43797-43915]"
    }, {
      "left" : "static boolean isExprCall(Node n)",
      "right" : "static boolean isExprCall(Node n)",
      "info" : "MethodDeclaration[43809-44124]:MethodDeclaration[43919-44234]"
    }, {
      "left" : "static boolean isForIn(Node n)",
      "right" : "static boolean isForIn(Node n)",
      "info" : "MethodDeclaration[44128-44303]:MethodDeclaration[44238-44413]"
    }, {
      "left" : "static boolean isLoopStructure(Node n)",
      "right" : "static boolean isLoopStructure(Node n)",
      "info" : "MethodDeclaration[44307-44589]:MethodDeclaration[44417-44699]"
    }, {
      "left" : "static Node getLoopCodeBlock(Node n)",
      "right" : "static Node getLoopCodeBlock(Node n)",
      "info" : "MethodDeclaration[44593-44996]:MethodDeclaration[44703-45106]"
    }, {
      "left" : "static boolean isWithinLoop(Node n)",
      "right" : "static boolean isWithinLoop(Node n)",
      "info" : "MethodDeclaration[45000-45357]:MethodDeclaration[45110-45467]"
    }, {
      "left" : "static boolean isControlStructure(Node n)",
      "right" : "static boolean isControlStructure(Node n)",
      "info" : "MethodDeclaration[45361-45844]:MethodDeclaration[45471-45954]"
    }, {
      "left" : "static boolean isControlStructureCodeBlock(Node parent, Node n)",
      "right" : "static boolean isControlStructureCodeBlock(Node parent, Node n)",
      "info" : "MethodDeclaration[45848-46729]:MethodDeclaration[45958-46839]"
    }, {
      "left" : "static Node getConditionExpression(Node n)",
      "right" : "static Node getConditionExpression(Node n)",
      "info" : "MethodDeclaration[46733-47533]:MethodDeclaration[46843-47643]"
    }, {
      "left" : "static boolean isStatementBlock(Node n)",
      "right" : "static boolean isStatementBlock(Node n)",
      "info" : "MethodDeclaration[47537-47738]:MethodDeclaration[47647-47848]"
    }, {
      "left" : "static boolean isStatement(Node n)",
      "right" : "static boolean isStatement(Node n)",
      "info" : "MethodDeclaration[47742-47893]:MethodDeclaration[47852-48003]"
    }, {
      "left" : "static boolean isStatementParent(Node parent)",
      "right" : "static boolean isStatementParent(Node parent)",
      "info" : "MethodDeclaration[47897-48358]:MethodDeclaration[48007-48468]"
    }, {
      "left" : "static boolean isSwitchCase(Node n)",
      "right" : "static boolean isSwitchCase(Node n)",
      "info" : "MethodDeclaration[48362-48530]:MethodDeclaration[48472-48640]"
    }, {
      "left" : "static boolean isReferenceName(Node n)",
      "right" : "static boolean isReferenceName(Node n)",
      "info" : "MethodDeclaration[48534-48793]:MethodDeclaration[48644-48903]"
    }, {
      "left" : "static boolean isLabelName(Node n)",
      "right" : "static boolean isLabelName(Node n)",
      "info" : "MethodDeclaration[48797-48947]:MethodDeclaration[48907-49057]"
    }, {
      "left" : "static boolean isTryFinallyNode(Node parent, Node child)",
      "right" : "static boolean isTryFinallyNode(Node parent, Node child)",
      "info" : "MethodDeclaration[48951-49191]:MethodDeclaration[49061-49301]"
    }, {
      "left" : "static boolean isTryCatchNodeContainer(Node n)",
      "right" : "static boolean isTryCatchNodeContainer(Node n)",
      "info" : "MethodDeclaration[49195-49425]:MethodDeclaration[49305-49535]"
    }, {
      "left" : "static void removeChild(Node parent, Node node)",
      "right" : "static void removeChild(Node parent, Node node)",
      "info" : "MethodDeclaration[49429-51893]:MethodDeclaration[49539-52003]"
    }, {
      "left" : "static void maybeAddFinally(Node tryNode)",
      "right" : "static void maybeAddFinally(Node tryNode)",
      "info" : "MethodDeclaration[51897-52209]:MethodDeclaration[52007-52319]"
    }, {
      "left" : "static boolean tryMergeBlock(Node block)",
      "right" : "static boolean tryMergeBlock(Node block)",
      "info" : "MethodDeclaration[52213-52902]:MethodDeclaration[52323-53012]"
    }, {
      "left" : "static boolean isCall(Node n)",
      "right" : "static boolean isCall(Node n)",
      "info" : "MethodDeclaration[52906-53017]:MethodDeclaration[53016-53127]"
    }, {
      "left" : "static boolean isCallOrNew(Node node)",
      "right" : "static boolean isCallOrNew(Node node)",
      "info" : "MethodDeclaration[53021-53211]:MethodDeclaration[53131-53321]"
    }, {
      "left" : "static boolean isFunction(Node n)",
      "right" : "static boolean isFunction(Node n)",
      "info" : "MethodDeclaration[53215-53338]:MethodDeclaration[53325-53448]"
    }, {
      "left" : "static Node getFunctionBody(Node fn)",
      "right" : "static Node getFunctionBody(Node fn)",
      "info" : "MethodDeclaration[53342-53529]:MethodDeclaration[53452-53639]"
    }, {
      "left" : "static boolean isThis(Node node)",
      "right" : "static boolean isThis(Node node)",
      "info" : "MethodDeclaration[53533-53650]:MethodDeclaration[53643-53760]"
    }, {
      "left" : "static boolean isArrayLiteral(Node node)",
      "right" : "static boolean isArrayLiteral(Node node)",
      "info" : "MethodDeclaration[53655-53788]:MethodDeclaration[53765-53898]"
    }, {
      "left" : "static boolean containsCall(Node n)",
      "right" : "static boolean containsCall(Node n)",
      "info" : "MethodDeclaration[53792-53934]:MethodDeclaration[53902-54044]"
    }, {
      "left" : "static boolean isFunctionDeclaration(Node n)",
      "right" : "static boolean isFunctionDeclaration(Node n)",
      "info" : "MethodDeclaration[53938-54287]:MethodDeclaration[54048-54397]"
    }, {
      "left" : "static boolean isHoistedFunctionDeclaration(Node n)",
      "right" : "static boolean isHoistedFunctionDeclaration(Node n)",
      "info" : "MethodDeclaration[54291-54693]:MethodDeclaration[54401-54803]"
    }, {
      "left" : "static boolean isFunctionExpression(Node n)",
      "right" : "static boolean isFunctionExpression(Node n)",
      "info" : "MethodDeclaration[54697-55463]:MethodDeclaration[54807-55573]"
    }, {
      "left" : "static boolean isEmptyFunctionExpression(Node node)",
      "right" : "static boolean isEmptyFunctionExpression(Node node)",
      "info" : "MethodDeclaration[55467-55791]:MethodDeclaration[55577-55901]"
    }, {
      "left" : "static boolean isVarArgsFunction(Node function)",
      "right" : "static boolean isVarArgsFunction(Node function)",
      "info" : "MethodDeclaration[55795-56165]:MethodDeclaration[55905-56275]"
    }, {
      "left" : "static boolean isObjectCallMethod(Node callNode, String methodName)",
      "right" : "static boolean isObjectCallMethod(Node callNode, String methodName)",
      "info" : "MethodDeclaration[56169-56772]:MethodDeclaration[56279-56882]"
    }, {
      "left" : "static boolean isFunctionObjectCall(Node callNode)",
      "right" : "static boolean isFunctionObjectCall(Node callNode)",
      "info" : "MethodDeclaration[56777-57012]:MethodDeclaration[56887-57122]"
    }, {
      "left" : "static boolean isFunctionObjectApply(Node callNode)",
      "right" : "static boolean isFunctionObjectApply(Node callNode)",
      "info" : "MethodDeclaration[57016-57255]:MethodDeclaration[57126-57365]"
    }, {
      "left" : "static boolean isFunctionObjectCallOrApply(Node callNode)",
      "right" : "static boolean isFunctionObjectCallOrApply(Node callNode)",
      "info" : "MethodDeclaration[57259-57584]:MethodDeclaration[57369-57694]"
    }, {
      "left" : "static boolean isSimpleFunctionObjectCall(Node callNode)",
      "right" : "static boolean isSimpleFunctionObjectCall(Node callNode)",
      "info" : "MethodDeclaration[57588-57983]:MethodDeclaration[57698-58093]"
    }, {
      "left" : "static boolean isLhs(Node n, Node parent)",
      "right" : "static boolean isLhs(Node n, Node parent)",
      "info" : "MethodDeclaration[57987-58505]:MethodDeclaration[58097-58615]"
    }, {
      "left" : "static boolean isObjectLitKey(Node node, Node parent)",
      "right" : "static boolean isObjectLitKey(Node node, Node parent)",
      "info" : "MethodDeclaration[58509-58981]:MethodDeclaration[58619-59091]"
    }, {
      "left" : "static String getObjectLitKeyName(Node key)",
      "right" : "static String getObjectLitKeyName(Node key)",
      "info" : "MethodDeclaration[58985-59393]:MethodDeclaration[59095-59503]"
    }, {
      "left" : "static JSType getObjectLitKeyTypeFromValueType(Node key, JSType valueType)",
      "right" : "static JSType getObjectLitKeyTypeFromValueType(Node key, JSType valueType)",
      "info" : "MethodDeclaration[59397-60408]:MethodDeclaration[59507-60518]"
    }, {
      "left" : "static boolean isGetOrSetKey(Node node)",
      "right" : "static boolean isGetOrSetKey(Node node)",
      "info" : "MethodDeclaration[60412-60743]:MethodDeclaration[60522-60853]"
    }, {
      "left" : "static String opToStr(int operator)",
      "right" : "static String opToStr(int operator)",
      "info" : "MethodDeclaration[60747-62660]:MethodDeclaration[60857-62770]"
    }, {
      "left" : "static String opToStrNoFail(int operator)",
      "right" : "static String opToStrNoFail(int operator)",
      "info" : "MethodDeclaration[62664-63167]:MethodDeclaration[62774-63277]"
    }, {
      "left" : "static boolean containsType(Node node,\n                              int type,\n                              Predicate<Node> traverseChildrenPred)",
      "right" : "static boolean containsType(Node node,\n                              int type,\n                              Predicate<Node> traverseChildrenPred)",
      "info" : "MethodDeclaration[63171-63476]:MethodDeclaration[63281-63586]"
    }, {
      "left" : "static boolean containsType(Node node, int type)",
      "right" : "static boolean containsType(Node node, int type)",
      "info" : "MethodDeclaration[63480-63686]:MethodDeclaration[63590-63796]"
    }, {
      "left" : "static void redeclareVarsInsideBranch(Node branch)",
      "right" : "static void redeclareVarsInsideBranch(Node branch)",
      "info" : "MethodDeclaration[63691-64438]:MethodDeclaration[63801-64548]"
    }, {
      "left" : "static void copyNameAnnotations(Node source, Node destination)",
      "right" : "static void copyNameAnnotations(Node source, Node destination)",
      "info" : "MethodDeclaration[64442-64743]:MethodDeclaration[64552-64853]"
    }, {
      "left" : "private static Node getAddingRoot(Node n)",
      "right" : "private static Node getAddingRoot(Node n)",
      "info" : "MethodDeclaration[64747-65569]:MethodDeclaration[64857-65679]"
    }, {
      "left" : "public static Node newFunctionNode(String name, List<Node> params,\n      Node body, int lineno, int charno)",
      "right" : "public static Node newFunctionNode(String name, List<Node> params,\n      Node body, int lineno, int charno)",
      "info" : "MethodDeclaration[65573-66150]:MethodDeclaration[65683-66260]"
    }, {
      "left" : "public static Node newQualifiedNameNode(\n      CodingConvention convention, String name, int lineno, int charno)",
      "right" : "public static Node newQualifiedNameNode(\n      CodingConvention convention, String name, int lineno, int charno)",
      "info" : "MethodDeclaration[66154-67309]:MethodDeclaration[66264-67419]"
    }, {
      "left" : "static Node newQualifiedNameNode(\n      CodingConvention convention, String name, Node basisNode,\n      String originalName)",
      "right" : "static Node newQualifiedNameNode(\n      CodingConvention convention, String name, Node basisNode,\n      String originalName)",
      "info" : "MethodDeclaration[67313-68107]:MethodDeclaration[67423-68217]"
    }, {
      "left" : "static Node getRootOfQualifiedName(Node qName)",
      "right" : "static Node getRootOfQualifiedName(Node qName)",
      "info" : "MethodDeclaration[68111-68515]:MethodDeclaration[68221-68625]"
    }, {
      "left" : "static void setDebugInformation(Node node, Node basisNode,\n                                  String originalName)",
      "right" : "static void setDebugInformation(Node node, Node basisNode,\n                                  String originalName)",
      "info" : "MethodDeclaration[68519-69050]:MethodDeclaration[68629-69160]"
    }, {
      "left" : "private static Node newName(\n      CodingConvention convention, String name, int lineno, int charno)",
      "right" : "private static Node newName(\n      CodingConvention convention, String name, int lineno, int charno)",
      "info" : "MethodDeclaration[69054-69356]:MethodDeclaration[69164-69466]"
    }, {
      "left" : "static Node newName(\n      CodingConvention convention, String name, Node basisNode)",
      "right" : "static Node newName(\n      CodingConvention convention, String name, Node basisNode)",
      "info" : "MethodDeclaration[69360-70004]:MethodDeclaration[69470-70114]"
    }, {
      "left" : "static Node newName(\n      CodingConvention convention, String name,\n      Node basisNode, String originalName)",
      "right" : "static Node newName(\n      CodingConvention convention, String name,\n      Node basisNode, String originalName)",
      "info" : "MethodDeclaration[70008-70777]:MethodDeclaration[70118-70887]"
    }, {
      "left" : "static boolean isLatin(String s)",
      "right" : "static boolean isLatin(String s)",
      "info" : "MethodDeclaration[70781-71648]:MethodDeclaration[70891-71758]"
    }, {
      "left" : "static boolean isValidPropertyName(String name)",
      "right" : "static boolean isValidPropertyName(String name)",
      "info" : "MethodDeclaration[71652-72313]:MethodDeclaration[71762-72423]"
    }, {
      "left" : "VarCollector",
      "right" : "VarCollector",
      "info" : "TypeDeclaration[72317-72754]:TypeDeclaration[72427-72864]"
    }, {
      "left" : "final Map<String, Node> vars = Maps.newLinkedHashMap();",
      "right" : "final Map<String, Node> vars = Maps.newLinkedHashMap();",
      "info" : "FieldDeclaration[72376-72431]:FieldDeclaration[72486-72541]"
    }, {
      "left" : "public void visit(Node n)",
      "right" : "public void visit(Node n)",
      "info" : "MethodDeclaration[72437-72750]:MethodDeclaration[72547-72860]"
    }, {
      "left" : "public static Collection<Node> getVarsDeclaredInBranch(Node root)",
      "right" : "public static Collection<Node> getVarsDeclaredInBranch(Node root)",
      "info" : "MethodDeclaration[72758-73092]:MethodDeclaration[72868-73202]"
    }, {
      "left" : "static boolean isPrototypePropertyDeclaration(Node n)",
      "right" : "static boolean isPrototypePropertyDeclaration(Node n)",
      "info" : "MethodDeclaration[73096-73394]:MethodDeclaration[73206-73504]"
    }, {
      "left" : "static boolean isPrototypeProperty(Node n)",
      "right" : "static boolean isPrototypeProperty(Node n)",
      "info" : "MethodDeclaration[73398-73634]:MethodDeclaration[73508-73744]"
    }, {
      "left" : "static Node getPrototypeClassName(Node qName)",
      "right" : "static Node getPrototypeClassName(Node qName)",
      "info" : "MethodDeclaration[73638-73997]:MethodDeclaration[73748-74107]"
    }, {
      "left" : "static String getPrototypePropertyName(Node qName)",
      "right" : "static String getPrototypePropertyName(Node qName)",
      "info" : "MethodDeclaration[74001-74359]:MethodDeclaration[74111-74469]"
    }, {
      "left" : "static Node newUndefinedNode(Node srcReferenceNode)",
      "right" : "static Node newUndefinedNode(Node srcReferenceNode)",
      "info" : "MethodDeclaration[74363-74674]:MethodDeclaration[74473-74784]"
    }, {
      "left" : "static Node newVarNode(String name, Node value)",
      "right" : "static Node newVarNode(String name, Node value)",
      "info" : "MethodDeclaration[74678-75147]:MethodDeclaration[74788-75257]"
    }, {
      "left" : "MatchNameNode",
      "right" : "MatchNameNode",
      "info" : "TypeDeclaration[75151-75503]:TypeDeclaration[75261-75613]"
    }, {
      "left" : "final String name;",
      "right" : "final String name;",
      "info" : "FieldDeclaration[75296-75314]:FieldDeclaration[75406-75424]"
    }, {
      "left" : "MatchNameNode(String name",
      "right" : "MatchNameNode(String name",
      "info" : "MethodDeclaration[75320-75377]:MethodDeclaration[75430-75487]"
    }, {
      "left" : "public boolean apply(Node n)",
      "right" : "public boolean apply(Node n)",
      "info" : "MethodDeclaration[75383-75499]:MethodDeclaration[75493-75609]"
    }, {
      "left" : "MatchNodeType",
      "right" : "MatchNodeType",
      "info" : "TypeDeclaration[75507-75794]:TypeDeclaration[75617-75904]"
    }, {
      "left" : "final int type;",
      "right" : "final int type;",
      "info" : "FieldDeclaration[75639-75654]:FieldDeclaration[75749-75764]"
    }, {
      "left" : "MatchNodeType(int type",
      "right" : "MatchNodeType(int type",
      "info" : "MethodDeclaration[75660-75714]:MethodDeclaration[75770-75824]"
    }, {
      "left" : "public boolean apply(Node n)",
      "right" : "public boolean apply(Node n)",
      "info" : "MethodDeclaration[75720-75790]:MethodDeclaration[75830-75900]"
    }, {
      "left" : "MatchDeclaration",
      "right" : "MatchDeclaration",
      "info" : "TypeDeclaration[75799-76041]:TypeDeclaration[75909-76151]"
    }, {
      "left" : "public boolean apply(Node n)",
      "right" : "public boolean apply(Node n)",
      "info" : "MethodDeclaration[75934-76037]:MethodDeclaration[76044-76147]"
    }, {
      "left" : "MatchNotFunction",
      "right" : "MatchNotFunction",
      "info" : "TypeDeclaration[76045-76250]:TypeDeclaration[76155-76360]"
    }, {
      "left" : "public boolean apply(Node n)",
      "right" : "public boolean apply(Node n)",
      "info" : "MethodDeclaration[76181-76246]:MethodDeclaration[76291-76356]"
    }, {
      "left" : "MatchShallowStatement",
      "right" : "MatchShallowStatement",
      "info" : "TypeDeclaration[76254-76661]:TypeDeclaration[76364-76771]"
    }, {
      "left" : "public boolean apply(Node n)",
      "right" : "public boolean apply(Node n)",
      "info" : "MethodDeclaration[76409-76657]:MethodDeclaration[76519-76767]"
    }, {
      "left" : "static int getNodeTypeReferenceCount(\n      Node node, int type, Predicate<Node> traverseChildrenPred)",
      "right" : "static int getNodeTypeReferenceCount(\n      Node node, int type, Predicate<Node> traverseChildrenPred)",
      "info" : "MethodDeclaration[76665-76933]:MethodDeclaration[76775-77043]"
    }, {
      "left" : "static boolean isNameReferenced(Node node,\n                                  String name,\n                                  Predicate<Node> traverseChildrenPred)",
      "right" : "static boolean isNameReferenced(Node node,\n                                  String name,\n                                  Predicate<Node> traverseChildrenPred)",
      "info" : "MethodDeclaration[76937-77248]:MethodDeclaration[77047-77358]"
    }, {
      "left" : "static boolean isNameReferenced(Node node, String name)",
      "right" : "static boolean isNameReferenced(Node node, String name)",
      "info" : "MethodDeclaration[77252-77460]:MethodDeclaration[77362-77570]"
    }, {
      "left" : "static int getNameReferenceCount(Node node, String name)",
      "right" : "static int getNameReferenceCount(Node node, String name)",
      "info" : "MethodDeclaration[77464-77711]:MethodDeclaration[77574-77821]"
    }, {
      "left" : "static boolean has(Node node,\n                     Predicate<Node> pred,\n                     Predicate<Node> traverseChildrenPred)",
      "right" : "static boolean has(Node node,\n                     Predicate<Node> pred,\n                     Predicate<Node> traverseChildrenPred)",
      "info" : "MethodDeclaration[77715-78242]:MethodDeclaration[77825-78352]"
    }, {
      "left" : "static int getCount(\n      Node n, Predicate<Node> pred, Predicate<Node> traverseChildrenPred)",
      "right" : "static int getCount(\n      Node n, Predicate<Node> pred, Predicate<Node> traverseChildrenPred)",
      "info" : "MethodDeclaration[78246-78727]:MethodDeclaration[78356-78837]"
    }, {
      "left" : "Visitor",
      "right" : "Visitor",
      "info" : "TypeDeclaration[78731-78863]:TypeDeclaration[78841-78973]"
    }, {
      "left" : "void visit(Node node);",
      "right" : "void visit(Node node);",
      "info" : "MethodDeclaration[78837-78859]:MethodDeclaration[78947-78969]"
    }, {
      "left" : "static void visitPreOrder(Node node,\n                     Visitor vistor,\n                     Predicate<Node> traverseChildrenPred)",
      "right" : "static void visitPreOrder(Node node,\n                     Visitor vistor,\n                     Predicate<Node> traverseChildrenPred)",
      "info" : "MethodDeclaration[78867-79321]:MethodDeclaration[78977-79431]"
    }, {
      "left" : "static void visitPostOrder(Node node,\n                     Visitor vistor,\n                     Predicate<Node> traverseChildrenPred)",
      "right" : "static void visitPostOrder(Node node,\n                     Visitor vistor,\n                     Predicate<Node> traverseChildrenPred)",
      "info" : "MethodDeclaration[79325-79782]:MethodDeclaration[79435-79892]"
    }, {
      "left" : "static boolean hasFinally(Node n)",
      "right" : "static boolean hasFinally(Node n)",
      "info" : "MethodDeclaration[79786-79984]:MethodDeclaration[79896-80094]"
    }, {
      "left" : "static Node getCatchBlock(Node n)",
      "right" : "static Node getCatchBlock(Node n)",
      "info" : "MethodDeclaration[79988-80216]:MethodDeclaration[80098-80326]"
    }, {
      "left" : "static boolean hasCatchHandler(Node n)",
      "right" : "static boolean hasCatchHandler(Node n)",
      "info" : "MethodDeclaration[80220-80507]:MethodDeclaration[80330-80617]"
    }, {
      "left" : "static Node getFnParameters(Node fnNode)",
      "right" : "static Node getFnParameters(Node fnNode)",
      "info" : "MethodDeclaration[80511-80843]:MethodDeclaration[80621-80953]"
    }, {
      "left" : "static boolean isConstantName(Node node)",
      "right" : "static boolean isConstantName(Node node)",
      "info" : "MethodDeclaration[80847-81650]:MethodDeclaration[80957-81760]"
    }, {
      "left" : "static boolean isConstantByConvention(\n      CodingConvention convention, Node node, Node parent)",
      "right" : "static boolean isConstantByConvention(\n      CodingConvention convention, Node node, Node parent)",
      "info" : "MethodDeclaration[81654-82143]:MethodDeclaration[81764-82253]"
    }, {
      "left" : "static JSDocInfo getInfoForNameNode(Node nameNode)",
      "right" : "static JSDocInfo getInfoForNameNode(Node nameNode)",
      "info" : "MethodDeclaration[82147-82672]:MethodDeclaration[82257-82782]"
    }, {
      "left" : "static JSDocInfo getFunctionInfo(Node n)",
      "right" : "static JSDocInfo getFunctionInfo(Node n)",
      "info" : "MethodDeclaration[82676-83304]:MethodDeclaration[82786-83414]"
    }, {
      "left" : "static String getSourceName(Node n)",
      "right" : "static String getSourceName(Node n)",
      "info" : "MethodDeclaration[83308-83644]:MethodDeclaration[83418-83754]"
    }, {
      "left" : "static Node newCallNode(Node callTarget, Node... parameters)",
      "right" : "static Node newCallNode(Node callTarget, Node... parameters)",
      "info" : "MethodDeclaration[83648-84043]:MethodDeclaration[83758-84153]"
    }, {
      "left" : "static boolean evaluatesToLocalValue(Node value)",
      "right" : "static boolean evaluatesToLocalValue(Node value)",
      "info" : "MethodDeclaration[84047-84278]:MethodDeclaration[84157-84388]"
    }, {
      "left" : "static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals)",
      "right" : "static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals)",
      "info" : "MethodDeclaration[84282-86971]:MethodDeclaration[84392-87081]"
    }, {
      "left" : "private static Node getNthSibling(Node first, int index)",
      "right" : "private static Node getNthSibling(Node first, int index)",
      "info" : "MethodDeclaration[86975-87373]:MethodDeclaration[87085-87483]"
    }, {
      "left" : "static Node getArgumentForFunction(Node function, int index)",
      "right" : "static Node getArgumentForFunction(Node function, int index)",
      "info" : "MethodDeclaration[87377-87698]:MethodDeclaration[87487-87808]"
    }, {
      "left" : "static Node getArgumentForCallOrNew(Node call, int index)",
      "right" : "static Node getArgumentForCallOrNew(Node call, int index)",
      "info" : "MethodDeclaration[87702-88009]:MethodDeclaration[87812-88119]"
    }, {
      "left" : "private static boolean isToStringMethodCall(Node call)",
      "right" : "private static boolean isToStringMethodCall(Node call)",
      "info" : "MethodDeclaration[88013-88286]:MethodDeclaration[88123-88396]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2102-2104]:Block[2102-2104]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2441-3688]:Block[2441-3688]"
    }, {
      "left" : "switch (n.getType()) {\n      case Token.ASSIGN:\n      case Token.COMMA:\n        // For ASSIGN and COMMA the value is the value of the RHS.\n        return getImpureBooleanValue(n.getLastChild());\n      case Token.NOT:\n        TernaryValue value = getImpureBooleanValue(n.getLastChild());\n        return value.not();\n      case Token.AND: {\n        TernaryValue lhs = getImpureBooleanValue(n.getFirstChild());\n        TernaryValue rhs = getImpureBooleanValue(n.getLastChild());\n        return lhs.and(rhs);\n      }\n      case Token.OR:  {\n        TernaryValue lhs = getImpureBooleanValue(n.getFirstChild());\n        TernaryValue rhs = getImpureBooleanValue(n.getLastChild());\n        return lhs.or(rhs);\n      }\n      case Token.HOOK:  {\n        TernaryValue trueValue = getImpureBooleanValue(\n            n.getFirstChild().getNext());\n        TernaryValue falseValue = getImpureBooleanValue(n.getLastChild());\n        if (trueValue.equals(falseValue)) {\n          return trueValue;\n        } else {\n          return TernaryValue.UNKNOWN;\n        }\n      }\n      case Token.ARRAYLIT:\n      case Token.OBJECTLIT:\n        // ignoring side-effects\n        return TernaryValue.TRUE;\n\n      default:\n        return getPureBooleanValue(n);\n    }",
      "right" : "switch (n.getType()) {\n      case Token.ASSIGN:\n      case Token.COMMA:\n        // For ASSIGN and COMMA the value is the value of the RHS.\n        return getImpureBooleanValue(n.getLastChild());\n      case Token.NOT:\n        TernaryValue value = getImpureBooleanValue(n.getLastChild());\n        return value.not();\n      case Token.AND: {\n        TernaryValue lhs = getImpureBooleanValue(n.getFirstChild());\n        TernaryValue rhs = getImpureBooleanValue(n.getLastChild());\n        return lhs.and(rhs);\n      }\n      case Token.OR:  {\n        TernaryValue lhs = getImpureBooleanValue(n.getFirstChild());\n        TernaryValue rhs = getImpureBooleanValue(n.getLastChild());\n        return lhs.or(rhs);\n      }\n      case Token.HOOK:  {\n        TernaryValue trueValue = getImpureBooleanValue(\n            n.getFirstChild().getNext());\n        TernaryValue falseValue = getImpureBooleanValue(n.getLastChild());\n        if (trueValue.equals(falseValue)) {\n          return trueValue;\n        } else {\n          return TernaryValue.UNKNOWN;\n        }\n      }\n      case Token.ARRAYLIT:\n      case Token.OBJECTLIT:\n        // ignoring side-effects\n        return TernaryValue.TRUE;\n\n      default:\n        return getPureBooleanValue(n);\n    }",
      "info" : "SwitchStatement[2447-3684]:SwitchStatement[2447-3684]"
    }, {
      "left" : "case Token.ASSIGN:",
      "right" : "case Token.ASSIGN:",
      "info" : "SwitchCase[2476-2494]:SwitchCase[2476-2494]"
    }, {
      "left" : "case Token.COMMA:",
      "right" : "case Token.COMMA:",
      "info" : "SwitchCase[2501-2518]:SwitchCase[2501-2518]"
    }, {
      "left" : "return getImpureBooleanValue(n.getLastChild());",
      "right" : "return getImpureBooleanValue(n.getLastChild());",
      "info" : "ReturnStatement[2594-2641]:ReturnStatement[2594-2641]"
    }, {
      "left" : "case Token.NOT:",
      "right" : "case Token.NOT:",
      "info" : "SwitchCase[2648-2663]:SwitchCase[2648-2663]"
    }, {
      "left" : "TernaryValue value = getImpureBooleanValue(n.getLastChild());",
      "right" : "TernaryValue value = getImpureBooleanValue(n.getLastChild());",
      "info" : "VariableDeclarationStatement[2672-2733]:VariableDeclarationStatement[2672-2733]"
    }, {
      "left" : "return value.not();",
      "right" : "return value.not();",
      "info" : "ReturnStatement[2742-2761]:ReturnStatement[2742-2761]"
    }, {
      "left" : "case Token.AND:",
      "right" : "case Token.AND:",
      "info" : "SwitchCase[2768-2783]:SwitchCase[2768-2783]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2784-2959]:Block[2784-2959]"
    }, {
      "left" : "TernaryValue lhs = getImpureBooleanValue(n.getFirstChild());",
      "right" : "TernaryValue lhs = getImpureBooleanValue(n.getFirstChild());",
      "info" : "VariableDeclarationStatement[2794-2854]:VariableDeclarationStatement[2794-2854]"
    }, {
      "left" : "TernaryValue rhs = getImpureBooleanValue(n.getLastChild());",
      "right" : "TernaryValue rhs = getImpureBooleanValue(n.getLastChild());",
      "info" : "VariableDeclarationStatement[2863-2922]:VariableDeclarationStatement[2863-2922]"
    }, {
      "left" : "return lhs.and(rhs);",
      "right" : "return lhs.and(rhs);",
      "info" : "ReturnStatement[2931-2951]:ReturnStatement[2931-2951]"
    }, {
      "left" : "case Token.OR:",
      "right" : "case Token.OR:",
      "info" : "SwitchCase[2966-2980]:SwitchCase[2966-2980]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2982-3156]:Block[2982-3156]"
    }, {
      "left" : "TernaryValue lhs = getImpureBooleanValue(n.getFirstChild());",
      "right" : "TernaryValue lhs = getImpureBooleanValue(n.getFirstChild());",
      "info" : "VariableDeclarationStatement[2992-3052]:VariableDeclarationStatement[2992-3052]"
    }, {
      "left" : "TernaryValue rhs = getImpureBooleanValue(n.getLastChild());",
      "right" : "TernaryValue rhs = getImpureBooleanValue(n.getLastChild());",
      "info" : "VariableDeclarationStatement[3061-3120]:VariableDeclarationStatement[3061-3120]"
    }, {
      "left" : "return lhs.or(rhs);",
      "right" : "return lhs.or(rhs);",
      "info" : "ReturnStatement[3129-3148]:ReturnStatement[3129-3148]"
    }, {
      "left" : "case Token.HOOK:",
      "right" : "case Token.HOOK:",
      "info" : "SwitchCase[3163-3179]:SwitchCase[3163-3179]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3181-3501]:Block[3181-3501]"
    }, {
      "left" : "TernaryValue trueValue = getImpureBooleanValue(\n            n.getFirstChild().getNext());",
      "right" : "TernaryValue trueValue = getImpureBooleanValue(\n            n.getFirstChild().getNext());",
      "info" : "VariableDeclarationStatement[3191-3280]:VariableDeclarationStatement[3191-3280]"
    }, {
      "left" : "TernaryValue falseValue = getImpureBooleanValue(n.getLastChild());",
      "right" : "TernaryValue falseValue = getImpureBooleanValue(n.getLastChild());",
      "info" : "VariableDeclarationStatement[3289-3355]:VariableDeclarationStatement[3289-3355]"
    }, {
      "left" : "if (trueValue.equals(falseValue))",
      "right" : "if (trueValue.equals(falseValue))",
      "info" : "IfStatement[3364-3493]:IfStatement[3364-3493]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3398-3437]:Block[3398-3437]"
    }, {
      "left" : "return trueValue;",
      "right" : "return trueValue;",
      "info" : "ReturnStatement[3410-3427]:ReturnStatement[3410-3427]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3443-3493]:Block[3443-3493]"
    }, {
      "left" : "return TernaryValue.UNKNOWN;",
      "right" : "return TernaryValue.UNKNOWN;",
      "info" : "ReturnStatement[3455-3483]:ReturnStatement[3455-3483]"
    }, {
      "left" : "case Token.ARRAYLIT:",
      "right" : "case Token.ARRAYLIT:",
      "info" : "SwitchCase[3508-3528]:SwitchCase[3508-3528]"
    }, {
      "left" : "case Token.OBJECTLIT:",
      "right" : "case Token.OBJECTLIT:",
      "info" : "SwitchCase[3535-3556]:SwitchCase[3535-3556]"
    }, {
      "left" : "return TernaryValue.TRUE;",
      "right" : "return TernaryValue.TRUE;",
      "info" : "ReturnStatement[3598-3623]:ReturnStatement[3598-3623]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[3631-3639]:SwitchCase[3631-3639]"
    }, {
      "left" : "return getPureBooleanValue(n);",
      "right" : "return getPureBooleanValue(n);",
      "info" : "ReturnStatement[3648-3678]:ReturnStatement[3648-3678]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4046-5136]:Block[4046-5136]"
    }, {
      "left" : "switch (n.getType()) {\n      case Token.STRING:\n        return TernaryValue.forBoolean(n.getString().length() > 0);\n\n      case Token.NUMBER:\n        return TernaryValue.forBoolean(n.getDouble() != 0);\n\n      case Token.NOT:\n        return getPureBooleanValue(n.getLastChild()).not();\n\n      case Token.NULL:\n      case Token.FALSE:\n      case Token.VOID:\n        return TernaryValue.FALSE;\n\n      case Token.NAME:\n        String name = n.getString();\n        if (\"undefined\".equals(name)\n            || \"NaN\".equals(name)) {\n          // We assume here that programs don't change the value of the keyword\n          // undefined to something other than the value undefined.\n          return TernaryValue.FALSE;\n        } else if (\"Infinity\".equals(name)) {\n          return TernaryValue.TRUE;\n        }\n        break;\n\n      case Token.TRUE:\n      case Token.REGEXP:\n        return TernaryValue.TRUE;\n\n      case Token.ARRAYLIT:\n      case Token.OBJECTLIT:\n        if (!mayHaveSideEffects(n)) {\n          return TernaryValue.TRUE;\n        }\n    }",
      "right" : "switch (n.getType()) {\n      case Token.STRING:\n        return TernaryValue.forBoolean(n.getString().length() > 0);\n\n      case Token.NUMBER:\n        return TernaryValue.forBoolean(n.getDouble() != 0);\n\n      case Token.NOT:\n        return getPureBooleanValue(n.getLastChild()).not();\n\n      case Token.NULL:\n      case Token.FALSE:\n      case Token.VOID:\n        return TernaryValue.FALSE;\n\n      case Token.NAME:\n        String name = n.getString();\n        if (\"undefined\".equals(name)\n            || \"NaN\".equals(name)) {\n          // We assume here that programs don't change the value of the keyword\n          // undefined to something other than the value undefined.\n          return TernaryValue.FALSE;\n        } else if (\"Infinity\".equals(name)) {\n          return TernaryValue.TRUE;\n        }\n        break;\n\n      case Token.TRUE:\n      case Token.REGEXP:\n        return TernaryValue.TRUE;\n\n      case Token.ARRAYLIT:\n      case Token.OBJECTLIT:\n        if (!mayHaveSideEffects(n)) {\n          return TernaryValue.TRUE;\n        }\n    }",
      "info" : "SwitchStatement[4052-5098]:SwitchStatement[4052-5098]"
    }, {
      "left" : "case Token.STRING:",
      "right" : "case Token.STRING:",
      "info" : "SwitchCase[4081-4099]:SwitchCase[4081-4099]"
    }, {
      "left" : "return TernaryValue.forBoolean(n.getString().length() > 0);",
      "right" : "return TernaryValue.forBoolean(n.getString().length() > 0);",
      "info" : "ReturnStatement[4108-4167]:ReturnStatement[4108-4167]"
    }, {
      "left" : "case Token.NUMBER:",
      "right" : "case Token.NUMBER:",
      "info" : "SwitchCase[4175-4193]:SwitchCase[4175-4193]"
    }, {
      "left" : "return TernaryValue.forBoolean(n.getDouble() != 0);",
      "right" : "return TernaryValue.forBoolean(n.getDouble() != 0);",
      "info" : "ReturnStatement[4202-4253]:ReturnStatement[4202-4253]"
    }, {
      "left" : "case Token.NOT:",
      "right" : "case Token.NOT:",
      "info" : "SwitchCase[4261-4276]:SwitchCase[4261-4276]"
    }, {
      "left" : "return getPureBooleanValue(n.getLastChild()).not();",
      "right" : "return getPureBooleanValue(n.getLastChild()).not();",
      "info" : "ReturnStatement[4285-4336]:ReturnStatement[4285-4336]"
    }, {
      "left" : "case Token.NULL:",
      "right" : "case Token.NULL:",
      "info" : "SwitchCase[4344-4360]:SwitchCase[4344-4360]"
    }, {
      "left" : "case Token.FALSE:",
      "right" : "case Token.FALSE:",
      "info" : "SwitchCase[4367-4384]:SwitchCase[4367-4384]"
    }, {
      "left" : "case Token.VOID:",
      "right" : "case Token.VOID:",
      "info" : "SwitchCase[4391-4407]:SwitchCase[4391-4407]"
    }, {
      "left" : "return TernaryValue.FALSE;",
      "right" : "return TernaryValue.FALSE;",
      "info" : "ReturnStatement[4416-4442]:ReturnStatement[4416-4442]"
    }, {
      "left" : "case Token.NAME:",
      "right" : "case Token.NAME:",
      "info" : "SwitchCase[4450-4466]:SwitchCase[4450-4466]"
    }, {
      "left" : "String name = n.getString();",
      "right" : "String name = n.getString();",
      "info" : "VariableDeclarationStatement[4475-4503]:VariableDeclarationStatement[4475-4503]"
    }, {
      "left" : "if (\"undefined\".equals(name)\n            || \"NaN\".equals(name))",
      "right" : "if (\"undefined\".equals(name)\n            || \"NaN\".equals(name))",
      "info" : "IfStatement[4512-4854]:IfStatement[4512-4854]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4576-4772]:Block[4576-4772]"
    }, {
      "left" : "return TernaryValue.FALSE;",
      "right" : "return TernaryValue.FALSE;",
      "info" : "ReturnStatement[4736-4762]:ReturnStatement[4736-4762]"
    }, {
      "left" : "if (\"Infinity\".equals(name))",
      "right" : "if (\"Infinity\".equals(name))",
      "info" : "IfStatement[4778-4854]:IfStatement[4778-4854]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4807-4854]:Block[4807-4854]"
    }, {
      "left" : "return TernaryValue.TRUE;",
      "right" : "return TernaryValue.TRUE;",
      "info" : "ReturnStatement[4819-4844]:ReturnStatement[4819-4844]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[4863-4869]:BreakStatement[4863-4869]"
    }, {
      "left" : "case Token.TRUE:",
      "right" : "case Token.TRUE:",
      "info" : "SwitchCase[4877-4893]:SwitchCase[4877-4893]"
    }, {
      "left" : "case Token.REGEXP:",
      "right" : "case Token.REGEXP:",
      "info" : "SwitchCase[4900-4918]:SwitchCase[4900-4918]"
    }, {
      "left" : "return TernaryValue.TRUE;",
      "right" : "return TernaryValue.TRUE;",
      "info" : "ReturnStatement[4927-4952]:ReturnStatement[4927-4952]"
    }, {
      "left" : "case Token.ARRAYLIT:",
      "right" : "case Token.ARRAYLIT:",
      "info" : "SwitchCase[4960-4980]:SwitchCase[4960-4980]"
    }, {
      "left" : "case Token.OBJECTLIT:",
      "right" : "case Token.OBJECTLIT:",
      "info" : "SwitchCase[4987-5008]:SwitchCase[4987-5008]"
    }, {
      "left" : "if (!mayHaveSideEffects(n))",
      "right" : "if (!mayHaveSideEffects(n))",
      "info" : "IfStatement[5017-5092]:IfStatement[5017-5092]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5045-5092]:Block[5045-5092]"
    }, {
      "left" : "return TernaryValue.TRUE;",
      "right" : "return TernaryValue.TRUE;",
      "info" : "ReturnStatement[5057-5082]:ReturnStatement[5057-5082]"
    }, {
      "left" : "return TernaryValue.UNKNOWN;",
      "right" : "return TernaryValue.UNKNOWN;",
      "info" : "ReturnStatement[5104-5132]:ReturnStatement[5104-5132]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5398-6596]:Block[5398-6596]"
    }, {
      "left" : "switch (n.getType()) {\n      case Token.STRING:\n        return n.getString();\n\n      case Token.NAME:\n        String name = n.getString();\n        if (\"undefined\".equals(name)\n            || \"Infinity\".equals(name)\n            || \"NaN\".equals(name)) {\n          return name;\n        }\n        break;\n\n      case Token.NUMBER:\n        double value = n.getDouble();\n        long longValue = (long) value;\n\n        // Return \"1\" instead of \"1.0\"\n        if (longValue == value) {\n          return Long.toString(longValue);\n        } else {\n          return Double.toString(n.getDouble());\n        }\n\n      case Token.FALSE:\n      case Token.TRUE:\n      case Token.NULL:\n        return Node.tokenToName(n.getType());\n\n      case Token.VOID:\n        return \"undefined\";\n\n      case Token.NOT:\n        TernaryValue child = getPureBooleanValue(n.getFirstChild());\n        if (child != TernaryValue.UNKNOWN) {\n          return child.toBoolean(true) ? \"false\" : \"true\"; // reversed.\n        }\n        break;\n\n      case Token.ARRAYLIT:\n        return arrayToString(n);\n\n      case Token.OBJECTLIT:\n        return \"[object Object]\";\n    }",
      "right" : "switch (n.getType()) {\n      case Token.STRING:\n        return n.getString();\n\n      case Token.NAME:\n        String name = n.getString();\n        if (\"undefined\".equals(name)\n            || \"Infinity\".equals(name)\n            || \"NaN\".equals(name)) {\n          return name;\n        }\n        break;\n\n      case Token.NUMBER:\n        double value = n.getDouble();\n        long longValue = (long) value;\n\n        // Return \"1\" instead of \"1.0\"\n        if (longValue == value) {\n          return Long.toString(longValue);\n        } else {\n          return Double.toString(n.getDouble());\n        }\n\n      case Token.FALSE:\n      case Token.TRUE:\n      case Token.NULL:\n        return Node.tokenToName(n.getType());\n\n      case Token.VOID:\n        return \"undefined\";\n\n      case Token.NOT:\n        TernaryValue child = getPureBooleanValue(n.getFirstChild());\n        if (child != TernaryValue.UNKNOWN) {\n          return child.toBoolean(true) ? \"false\" : \"true\"; // reversed.\n        }\n        break;\n\n      case Token.ARRAYLIT:\n        return arrayToString(n);\n\n      case Token.OBJECTLIT:\n        return \"[object Object]\";\n    }",
      "info" : "SwitchStatement[5447-6575]:SwitchStatement[5447-6575]"
    }, {
      "left" : "case Token.STRING:",
      "right" : "case Token.STRING:",
      "info" : "SwitchCase[5476-5494]:SwitchCase[5476-5494]"
    }, {
      "left" : "return n.getString();",
      "right" : "return n.getString();",
      "info" : "ReturnStatement[5503-5524]:ReturnStatement[5503-5524]"
    }, {
      "left" : "case Token.NAME:",
      "right" : "case Token.NAME:",
      "info" : "SwitchCase[5532-5548]:SwitchCase[5532-5548]"
    }, {
      "left" : "String name = n.getString();",
      "right" : "String name = n.getString();",
      "info" : "VariableDeclarationStatement[5557-5585]:VariableDeclarationStatement[5557-5585]"
    }, {
      "left" : "if (\"undefined\".equals(name)\n            || \"Infinity\".equals(name)\n            || \"NaN\".equals(name))",
      "right" : "if (\"undefined\".equals(name)\n            || \"Infinity\".equals(name)\n            || \"NaN\".equals(name))",
      "info" : "IfStatement[5594-5731]:IfStatement[5594-5731]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5697-5731]:Block[5697-5731]"
    }, {
      "left" : "return name;",
      "right" : "return name;",
      "info" : "ReturnStatement[5709-5721]:ReturnStatement[5709-5721]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[5740-5746]:BreakStatement[5740-5746]"
    }, {
      "left" : "case Token.NUMBER:",
      "right" : "case Token.NUMBER:",
      "info" : "SwitchCase[5754-5772]:SwitchCase[5754-5772]"
    }, {
      "left" : "double value = n.getDouble();",
      "right" : "double value = n.getDouble();",
      "info" : "VariableDeclarationStatement[5781-5810]:VariableDeclarationStatement[5781-5810]"
    }, {
      "left" : "long longValue = (long) value;",
      "right" : "long longValue = (long) value;",
      "info" : "VariableDeclarationStatement[5819-5849]:VariableDeclarationStatement[5819-5849]"
    }, {
      "left" : "if (longValue == value)",
      "right" : "if (longValue == value)",
      "info" : "IfStatement[5898-6042]:IfStatement[5898-6042]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5922-5976]:Block[5922-5976]"
    }, {
      "left" : "return Long.toString(longValue);",
      "right" : "return Long.toString(longValue);",
      "info" : "ReturnStatement[5934-5966]:ReturnStatement[5934-5966]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5982-6042]:Block[5982-6042]"
    }, {
      "left" : "return Double.toString(n.getDouble());",
      "right" : "return Double.toString(n.getDouble());",
      "info" : "ReturnStatement[5994-6032]:ReturnStatement[5994-6032]"
    }, {
      "left" : "case Token.FALSE:",
      "right" : "case Token.FALSE:",
      "info" : "SwitchCase[6050-6067]:SwitchCase[6050-6067]"
    }, {
      "left" : "case Token.TRUE:",
      "right" : "case Token.TRUE:",
      "info" : "SwitchCase[6074-6090]:SwitchCase[6074-6090]"
    }, {
      "left" : "case Token.NULL:",
      "right" : "case Token.NULL:",
      "info" : "SwitchCase[6097-6113]:SwitchCase[6097-6113]"
    }, {
      "left" : "return Node.tokenToName(n.getType());",
      "right" : "return Node.tokenToName(n.getType());",
      "info" : "ReturnStatement[6122-6159]:ReturnStatement[6122-6159]"
    }, {
      "left" : "case Token.VOID:",
      "right" : "case Token.VOID:",
      "info" : "SwitchCase[6167-6183]:SwitchCase[6167-6183]"
    }, {
      "left" : "return \"undefined\";",
      "right" : "return \"undefined\";",
      "info" : "ReturnStatement[6192-6211]:ReturnStatement[6192-6211]"
    }, {
      "left" : "case Token.NOT:",
      "right" : "case Token.NOT:",
      "info" : "SwitchCase[6219-6234]:SwitchCase[6219-6234]"
    }, {
      "left" : "TernaryValue child = getPureBooleanValue(n.getFirstChild());",
      "right" : "TernaryValue child = getPureBooleanValue(n.getFirstChild());",
      "info" : "VariableDeclarationStatement[6243-6303]:VariableDeclarationStatement[6243-6303]"
    }, {
      "left" : "if (child != TernaryValue.UNKNOWN)",
      "right" : "if (child != TernaryValue.UNKNOWN)",
      "info" : "IfStatement[6312-6430]:IfStatement[6312-6430]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6347-6430]:Block[6347-6430]"
    }, {
      "left" : "return child.toBoolean(true) ? \"false\" : \"true\";",
      "right" : "return child.toBoolean(true) ? \"false\" : \"true\";",
      "info" : "ReturnStatement[6359-6407]:ReturnStatement[6359-6407]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[6439-6445]:BreakStatement[6439-6445]"
    }, {
      "left" : "case Token.ARRAYLIT:",
      "right" : "case Token.ARRAYLIT:",
      "info" : "SwitchCase[6453-6473]:SwitchCase[6453-6473]"
    }, {
      "left" : "return arrayToString(n);",
      "right" : "return arrayToString(n);",
      "info" : "ReturnStatement[6482-6506]:ReturnStatement[6482-6506]"
    }, {
      "left" : "case Token.OBJECTLIT:",
      "right" : "case Token.OBJECTLIT:",
      "info" : "SwitchCase[6514-6535]:SwitchCase[6514-6535]"
    }, {
      "left" : "return \"[object Object]\";",
      "right" : "return \"[object Object]\";",
      "info" : "ReturnStatement[6544-6569]:ReturnStatement[6544-6569]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[6580-6592]:ReturnStatement[6580-6592]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7025-7137]:Block[7025-7137]"
    }, {
      "left" : "return (NodeUtil.isNullOrUndefined(n) || n.getType() == Token.EMPTY)\n        ? \"\" : getStringValue(n);",
      "right" : "return (NodeUtil.isNullOrUndefined(n) || n.getType() == Token.EMPTY)\n        ? \"\" : getStringValue(n);",
      "info" : "ReturnStatement[7031-7133]:ReturnStatement[7031-7133]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7183-7647]:Block[7183-7647]"
    }, {
      "left" : "Node first = literal.getFirstChild();",
      "right" : "Node first = literal.getFirstChild();",
      "info" : "VariableDeclarationStatement[7189-7226]:VariableDeclarationStatement[7189-7226]"
    }, {
      "left" : "StringBuilder result = new StringBuilder();",
      "right" : "StringBuilder result = new StringBuilder();",
      "info" : "VariableDeclarationStatement[7231-7274]:VariableDeclarationStatement[7231-7274]"
    }, {
      "left" : "int nextSlot = 0;",
      "right" : "int nextSlot = 0;",
      "info" : "VariableDeclarationStatement[7279-7296]:VariableDeclarationStatement[7279-7296]"
    }, {
      "left" : "int nextSkipSlot = 0;",
      "right" : "int nextSkipSlot = 0;",
      "info" : "VariableDeclarationStatement[7301-7322]:VariableDeclarationStatement[7301-7322]"
    }, {
      "left" : "for (Node n = first; n != null; n = n.getNext())",
      "right" : "for (Node n = first; n != null; n = n.getNext())",
      "info" : "ForStatement[7327-7613]:ForStatement[7327-7613]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7376-7613]:Block[7376-7613]"
    }, {
      "left" : "String childValue = getArrayElementStringValue(n);",
      "right" : "String childValue = getArrayElementStringValue(n);",
      "info" : "VariableDeclarationStatement[7384-7434]:VariableDeclarationStatement[7384-7434]"
    }, {
      "left" : "if (childValue == null)",
      "right" : "if (childValue == null)",
      "info" : "IfStatement[7441-7495]:IfStatement[7441-7495]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7465-7495]:Block[7465-7495]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[7475-7487]:ReturnStatement[7475-7487]"
    }, {
      "left" : "if (n != first)",
      "right" : "if (n != first)",
      "info" : "IfStatement[7502-7555]:IfStatement[7502-7555]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7518-7555]:Block[7518-7555]"
    }, {
      "left" : "result.append(',');",
      "right" : "result.append(',');",
      "info" : "ExpressionStatement[7528-7547]:ExpressionStatement[7528-7547]"
    }, {
      "left" : "result.append(childValue);",
      "right" : "result.append(childValue);",
      "info" : "ExpressionStatement[7562-7588]:ExpressionStatement[7562-7588]"
    }, {
      "left" : "nextSlot++;",
      "right" : "nextSlot++;",
      "info" : "ExpressionStatement[7596-7607]:ExpressionStatement[7596-7607]"
    }, {
      "left" : "return result.toString();",
      "right" : "return result.toString();",
      "info" : "ReturnStatement[7618-7643]:ReturnStatement[7618-7643]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7908-9364]:Block[7908-9364]"
    }, {
      "left" : "switch (n.getType()) {\n      case Token.TRUE:\n        return 1.0;\n\n      case Token.FALSE:\n      case Token.NULL:\n        return 0.0;\n\n      case Token.NUMBER:\n        return n.getDouble();\n\n      case Token.VOID:\n        if (mayHaveSideEffects(n.getFirstChild())) {\n          return null;\n        } else {\n          return Double.NaN;\n        }\n\n      case Token.NAME:\n        // Check for known constants\n        String name = n.getString();\n        if (name.equals(\"undefined\")) {\n          return Double.NaN;\n        }\n        if (name.equals(\"NaN\")) {\n          return Double.NaN;\n        }\n        if (name.equals(\"Infinity\")) {\n          return Double.POSITIVE_INFINITY;\n        }\n        return null;\n\n      case Token.NEG:\n        if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME\n            && n.getFirstChild().getString().equals(\"Infinity\")) {\n          return Double.NEGATIVE_INFINITY;\n        }\n        return null;\n\n      case Token.NOT:\n        TernaryValue child = getPureBooleanValue(n.getFirstChild());\n        if (child != TernaryValue.UNKNOWN) {\n          return child.toBoolean(true) ? 0.0 : 1.0; // reversed.\n        }\n        break;\n\n      case Token.STRING:\n        return getStringNumberValue(n.getString());\n\n      case Token.ARRAYLIT:\n      case Token.OBJECTLIT:\n        String value = getStringValue(n);\n        return value != null ? getStringNumberValue(value) : null;\n    }",
      "right" : "switch (n.getType()) {\n      case Token.TRUE:\n        return 1.0;\n\n      case Token.FALSE:\n      case Token.NULL:\n        return 0.0;\n\n      case Token.NUMBER:\n        return n.getDouble();\n\n      case Token.VOID:\n        if (mayHaveSideEffects(n.getFirstChild())) {\n          return null;\n        } else {\n          return Double.NaN;\n        }\n\n      case Token.NAME:\n        // Check for known constants\n        String name = n.getString();\n        if (name.equals(\"undefined\")) {\n          return Double.NaN;\n        }\n        if (name.equals(\"NaN\")) {\n          return Double.NaN;\n        }\n        if (name.equals(\"Infinity\")) {\n          return Double.POSITIVE_INFINITY;\n        }\n        return null;\n\n      case Token.NEG:\n        if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME\n            && n.getFirstChild().getString().equals(\"Infinity\")) {\n          return Double.NEGATIVE_INFINITY;\n        }\n        return null;\n\n      case Token.NOT:\n        TernaryValue child = getPureBooleanValue(n.getFirstChild());\n        if (child != TernaryValue.UNKNOWN) {\n          return child.toBoolean(true) ? 0.0 : 1.0; // reversed.\n        }\n        break;\n\n      case Token.STRING:\n        return getStringNumberValue(n.getString());\n\n      case Token.ARRAYLIT:\n      case Token.OBJECTLIT:\n        String value = getStringValue(n);\n        return value != null ? getStringNumberValue(value) : null;\n    }",
      "info" : "SwitchStatement[7914-9342]:SwitchStatement[7914-9342]"
    }, {
      "left" : "case Token.TRUE:",
      "right" : "case Token.TRUE:",
      "info" : "SwitchCase[7943-7959]:SwitchCase[7943-7959]"
    }, {
      "left" : "return 1.0;",
      "right" : "return 1.0;",
      "info" : "ReturnStatement[7968-7979]:ReturnStatement[7968-7979]"
    }, {
      "left" : "case Token.FALSE:",
      "right" : "case Token.FALSE:",
      "info" : "SwitchCase[7987-8004]:SwitchCase[7987-8004]"
    }, {
      "left" : "case Token.NULL:",
      "right" : "case Token.NULL:",
      "info" : "SwitchCase[8011-8027]:SwitchCase[8011-8027]"
    }, {
      "left" : "return 0.0;",
      "right" : "return 0.0;",
      "info" : "ReturnStatement[8036-8047]:ReturnStatement[8036-8047]"
    }, {
      "left" : "case Token.NUMBER:",
      "right" : "case Token.NUMBER:",
      "info" : "SwitchCase[8055-8073]:SwitchCase[8055-8073]"
    }, {
      "left" : "return n.getDouble();",
      "right" : "return n.getDouble();",
      "info" : "ReturnStatement[8082-8103]:ReturnStatement[8082-8103]"
    }, {
      "left" : "case Token.VOID:",
      "right" : "case Token.VOID:",
      "info" : "SwitchCase[8111-8127]:SwitchCase[8111-8127]"
    }, {
      "left" : "if (mayHaveSideEffects(n.getFirstChild()))",
      "right" : "if (mayHaveSideEffects(n.getFirstChild()))",
      "info" : "IfStatement[8136-8259]:IfStatement[8136-8259]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8179-8213]:Block[8179-8213]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[8191-8203]:ReturnStatement[8191-8203]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8219-8259]:Block[8219-8259]"
    }, {
      "left" : "return Double.NaN;",
      "right" : "return Double.NaN;",
      "info" : "ReturnStatement[8231-8249]:ReturnStatement[8231-8249]"
    }, {
      "left" : "case Token.NAME:",
      "right" : "case Token.NAME:",
      "info" : "SwitchCase[8267-8283]:SwitchCase[8267-8283]"
    }, {
      "left" : "String name = n.getString();",
      "right" : "String name = n.getString();",
      "info" : "VariableDeclarationStatement[8329-8357]:VariableDeclarationStatement[8329-8357]"
    }, {
      "left" : "if (name.equals(\"undefined\"))",
      "right" : "if (name.equals(\"undefined\"))",
      "info" : "IfStatement[8366-8436]:IfStatement[8366-8436]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8396-8436]:Block[8396-8436]"
    }, {
      "left" : "return Double.NaN;",
      "right" : "return Double.NaN;",
      "info" : "ReturnStatement[8408-8426]:ReturnStatement[8408-8426]"
    }, {
      "left" : "if (name.equals(\"NaN\"))",
      "right" : "if (name.equals(\"NaN\"))",
      "info" : "IfStatement[8445-8509]:IfStatement[8445-8509]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8469-8509]:Block[8469-8509]"
    }, {
      "left" : "return Double.NaN;",
      "right" : "return Double.NaN;",
      "info" : "ReturnStatement[8481-8499]:ReturnStatement[8481-8499]"
    }, {
      "left" : "if (name.equals(\"Infinity\"))",
      "right" : "if (name.equals(\"Infinity\"))",
      "info" : "IfStatement[8518-8601]:IfStatement[8518-8601]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8547-8601]:Block[8547-8601]"
    }, {
      "left" : "return Double.POSITIVE_INFINITY;",
      "right" : "return Double.POSITIVE_INFINITY;",
      "info" : "ReturnStatement[8559-8591]:ReturnStatement[8559-8591]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[8610-8622]:ReturnStatement[8610-8622]"
    }, {
      "left" : "case Token.NEG:",
      "right" : "case Token.NEG:",
      "info" : "SwitchCase[8630-8645]:SwitchCase[8630-8645]"
    }, {
      "left" : "if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME\n            && n.getFirstChild().getString().equals(\"Infinity\"))",
      "right" : "if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME\n            && n.getFirstChild().getString().equals(\"Infinity\"))",
      "info" : "IfStatement[8654-8845]:IfStatement[8654-8845]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8791-8845]:Block[8791-8845]"
    }, {
      "left" : "return Double.NEGATIVE_INFINITY;",
      "right" : "return Double.NEGATIVE_INFINITY;",
      "info" : "ReturnStatement[8803-8835]:ReturnStatement[8803-8835]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[8854-8866]:ReturnStatement[8854-8866]"
    }, {
      "left" : "case Token.NOT:",
      "right" : "case Token.NOT:",
      "info" : "SwitchCase[8874-8889]:SwitchCase[8874-8889]"
    }, {
      "left" : "TernaryValue child = getPureBooleanValue(n.getFirstChild());",
      "right" : "TernaryValue child = getPureBooleanValue(n.getFirstChild());",
      "info" : "VariableDeclarationStatement[8898-8958]:VariableDeclarationStatement[8898-8958]"
    }, {
      "left" : "if (child != TernaryValue.UNKNOWN)",
      "right" : "if (child != TernaryValue.UNKNOWN)",
      "info" : "IfStatement[8967-9078]:IfStatement[8967-9078]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9002-9078]:Block[9002-9078]"
    }, {
      "left" : "return child.toBoolean(true) ? 0.0 : 1.0;",
      "right" : "return child.toBoolean(true) ? 0.0 : 1.0;",
      "info" : "ReturnStatement[9014-9055]:ReturnStatement[9014-9055]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[9087-9093]:BreakStatement[9087-9093]"
    }, {
      "left" : "case Token.STRING:",
      "right" : "case Token.STRING:",
      "info" : "SwitchCase[9101-9119]:SwitchCase[9101-9119]"
    }, {
      "left" : "return getStringNumberValue(n.getString());",
      "right" : "return getStringNumberValue(n.getString());",
      "info" : "ReturnStatement[9128-9171]:ReturnStatement[9128-9171]"
    }, {
      "left" : "case Token.ARRAYLIT:",
      "right" : "case Token.ARRAYLIT:",
      "info" : "SwitchCase[9179-9199]:SwitchCase[9179-9199]"
    }, {
      "left" : "case Token.OBJECTLIT:",
      "right" : "case Token.OBJECTLIT:",
      "info" : "SwitchCase[9206-9227]:SwitchCase[9206-9227]"
    }, {
      "left" : "String value = getStringValue(n);",
      "right" : "String value = getStringValue(n);",
      "info" : "VariableDeclarationStatement[9236-9269]:VariableDeclarationStatement[9236-9269]"
    }, {
      "left" : "return value != null ? getStringNumberValue(value) : null;",
      "right" : "return value != null ? getStringNumberValue(value) : null;",
      "info" : "ReturnStatement[9278-9336]:ReturnStatement[9278-9336]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[9348-9360]:ReturnStatement[9348-9360]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9423-10571]:Block[9423-10638]"
    }, {
      "left" : "String s = trimJsWhiteSpace(rawJsString);",
      "right" : "String s = trimJsWhiteSpace(rawJsString);",
      "info" : "VariableDeclarationStatement[9477-9518]:VariableDeclarationStatement[9544-9585]"
    }, {
      "left" : "if (s.length() == 0)",
      "right" : "if (s.length() == 0)",
      "info" : "IfStatement[9564-9610]:IfStatement[9631-9677]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9585-9610]:Block[9652-9677]"
    }, {
      "left" : "return 0.0;",
      "right" : "return 0.0;",
      "info" : "ReturnStatement[9593-9604]:ReturnStatement[9660-9671]"
    }, {
      "left" : "if (s.length() > 2\n        && s.charAt(0) == '0'\n        && (s.charAt(1) == 'x' || s.charAt(1) == 'X'))",
      "right" : "if (s.length() > 2\n        && s.charAt(0) == '0'\n        && (s.charAt(1) == 'x' || s.charAt(1) == 'X'))",
      "info" : "IfStatement[9616-9926]:IfStatement[9683-9993]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9720-9926]:Block[9787-9993]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[9769-9920]:TryStatement[9836-9987]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9773-9851]:Block[9840-9918]"
    }, {
      "left" : "return Double.valueOf(Integer.parseInt(s.substring(2), 16));",
      "right" : "return Double.valueOf(Integer.parseInt(s.substring(2), 16));",
      "info" : "ReturnStatement[9783-9843]:ReturnStatement[9850-9910]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9884-9920]:Block[9951-9987]"
    }, {
      "left" : "return Double.NaN;",
      "right" : "return Double.NaN;",
      "info" : "ReturnStatement[9894-9912]:ReturnStatement[9961-9979]"
    }, {
      "left" : "if (s.length() > 3\n        && (s.charAt(0) == '-' || s.charAt(0) == '+')\n        && s.charAt(1) == '0'\n        && (s.charAt(2) == 'x' || s.charAt(2) == 'X'))",
      "right" : "if (s.length() > 3\n        && (s.charAt(0) == '-' || s.charAt(0) == '+')\n        && s.charAt(1) == '0'\n        && (s.charAt(2) == 'x' || s.charAt(2) == 'X'))",
      "info" : "IfStatement[9932-10180]:IfStatement[9999-10247]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10090-10180]:Block[10157-10247]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[10162-10174]:ReturnStatement[10229-10241]"
    }, {
      "left" : "if (s.equals(\"infinity\")\n        || s.equals(\"-infinity\")\n        || s.equals(\"+infinity\"))",
      "right" : "if (s.equals(\"infinity\")\n        || s.equals(\"-infinity\")\n        || s.equals(\"+infinity\"))",
      "info" : "IfStatement[10331-10449]:IfStatement[10398-10516]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10423-10449]:Block[10490-10516]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[10431-10443]:ReturnStatement[10498-10510]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[10455-10567]:TryStatement[10522-10634]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10459-10502]:Block[10526-10569]"
    }, {
      "left" : "return Double.parseDouble(s);",
      "right" : "return Double.parseDouble(s);",
      "info" : "ReturnStatement[10467-10496]:ReturnStatement[10534-10563]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10535-10567]:Block[10602-10634]"
    }, {
      "left" : "return Double.NaN;",
      "right" : "return Double.NaN;",
      "info" : "ReturnStatement[10543-10561]:ReturnStatement[10610-10628]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10616-10930]:Block[10683-10997]"
    }, {
      "left" : "int start = 0;",
      "right" : "int start = 0;",
      "info" : "VariableDeclarationStatement[10622-10636]:VariableDeclarationStatement[10689-10703]"
    }, {
      "left" : "int end = s.length();",
      "right" : "int end = s.length();",
      "info" : "VariableDeclarationStatement[10641-10662]:VariableDeclarationStatement[10708-10729]"
    }, {
      "left" : "while (end > 0\n        && isStrWhiteSpaceChar(s.charAt(end - 1)) == TernaryValue.TRUE)",
      "right" : "while (end > 0\n        && isStrWhiteSpaceChar(s.charAt(end - 1)) == TernaryValue.TRUE)",
      "info" : "WhileStatement[10667-10774]:WhileStatement[10734-10841]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10754-10774]:Block[10821-10841]"
    }, {
      "left" : "end--;",
      "right" : "end--;",
      "info" : "ExpressionStatement[10762-10768]:ExpressionStatement[10829-10835]"
    }, {
      "left" : "while (start < end\n        && isStrWhiteSpaceChar(s.charAt(start)) == TernaryValue.TRUE)",
      "right" : "while (start < end\n        && isStrWhiteSpaceChar(s.charAt(start)) == TernaryValue.TRUE)",
      "info" : "WhileStatement[10779-10890]:WhileStatement[10846-10957]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10868-10890]:Block[10935-10957]"
    }, {
      "left" : "start++;",
      "right" : "start++;",
      "info" : "ExpressionStatement[10876-10884]:ExpressionStatement[10943-10951]"
    }, {
      "left" : "return s.substring(start, end);",
      "right" : "return s.substring(start, end);",
      "info" : "ReturnStatement[10895-10926]:ReturnStatement[10962-10993]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11032-11541]:Block[11099-11651]"
    }, {
      "left" : "switch (c) {\n      case '\\u000B': // <VT>\n        return TernaryValue.TRUE;\n      case ' ': // <SP>\n      case '\\n': // <LF>\n      case '\\r': // <CR>\n      case '\\t': // <TAB>\n      case '\\u00A0': // <NBSP>\n      case '\\u000C': // <FF>\n      case '\\u2028': // <LS>\n      case '\\u2029': // <PS>\n      case '\\uFEFF': // <BOM>\n        return TernaryValue.TRUE;\n      default:\n        return (Character.getType(c) == Character.SPACE_SEPARATOR)\n            ? TernaryValue.TRUE : TernaryValue.FALSE;\n    }",
      "right" : "switch (c) {\n      case '\\u000B': // <VT>\n        return TernaryValue.UNKNOWN;  // IE says \"no\", EcmaScript says \"yes\"\n      case ' ': // <SP>\n      case '\\n': // <LF>\n      case '\\r': // <CR>\n      case '\\t': // <TAB>\n      case '\\u00A0': // <NBSP>\n      case '\\u000C': // <FF>\n      case '\\u2028': // <LS>\n      case '\\u2029': // <PS>\n      case '\\uFEFF': // <BOM>\n        return TernaryValue.TRUE;\n      default:\n        return (Character.getType(c) == Character.SPACE_SEPARATOR)\n            ? TernaryValue.TRUE : TernaryValue.FALSE;\n    }",
      "info" : "SwitchStatement[11038-11537]:SwitchStatement[11105-11647]"
    }, {
      "left" : "case '\\u000B':",
      "right" : "case '\\u000B':",
      "info" : "SwitchCase[11057-11071]:SwitchCase[11124-11138]"
    }, {
      "left" : "return TernaryValue.TRUE;",
      "right" : "return TernaryValue.TRUE;",
      "info" : "ReturnStatement[11088-11113]:ReturnStatement[11480-11505]"
    }, {
      "left" : "case ' ':",
      "right" : "case ' ':",
      "info" : "SwitchCase[11120-11129]:SwitchCase[11230-11239]"
    }, {
      "left" : "case '\\n':",
      "right" : "case '\\n':",
      "info" : "SwitchCase[11144-11154]:SwitchCase[11254-11264]"
    }, {
      "left" : "case '\\r':",
      "right" : "case '\\r':",
      "info" : "SwitchCase[11169-11179]:SwitchCase[11279-11289]"
    }, {
      "left" : "case '\\t':",
      "right" : "case '\\t':",
      "info" : "SwitchCase[11194-11204]:SwitchCase[11304-11314]"
    }, {
      "left" : "case '\\u00A0':",
      "right" : "case '\\u00A0':",
      "info" : "SwitchCase[11220-11234]:SwitchCase[11330-11344]"
    }, {
      "left" : "case '\\u000C':",
      "right" : "case '\\u000C':",
      "info" : "SwitchCase[11251-11265]:SwitchCase[11361-11375]"
    }, {
      "left" : "case '\\u2028':",
      "right" : "case '\\u2028':",
      "info" : "SwitchCase[11280-11294]:SwitchCase[11390-11404]"
    }, {
      "left" : "case '\\u2029':",
      "right" : "case '\\u2029':",
      "info" : "SwitchCase[11309-11323]:SwitchCase[11419-11433]"
    }, {
      "left" : "case '\\uFEFF':",
      "right" : "case '\\uFEFF':",
      "info" : "SwitchCase[11338-11352]:SwitchCase[11448-11462]"
    }, {
      "left" : "return TernaryValue.TRUE;",
      "right" : "return TernaryValue.UNKNOWN;",
      "info" : "ReturnStatement[11370-11395]:ReturnStatement[11155-11183]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[11402-11410]:SwitchCase[11512-11520]"
    }, {
      "left" : "return (Character.getType(c) == Character.SPACE_SEPARATOR)\n            ? TernaryValue.TRUE : TernaryValue.FALSE;",
      "right" : "return (Character.getType(c) == Character.SPACE_SEPARATOR)\n            ? TernaryValue.TRUE : TernaryValue.FALSE;",
      "info" : "ReturnStatement[11419-11531]:ReturnStatement[11529-11641]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12196-12749]:Block[12306-12859]"
    }, {
      "left" : "Node parent = n.getParent();",
      "right" : "Node parent = n.getParent();",
      "info" : "VariableDeclarationStatement[12202-12230]:VariableDeclarationStatement[12312-12340]"
    }, {
      "left" : "String name = n.getFirstChild().getString();",
      "right" : "String name = n.getFirstChild().getString();",
      "info" : "VariableDeclarationStatement[12235-12279]:VariableDeclarationStatement[12345-12389]"
    }, {
      "left" : "switch (parent.getType()) {\n      case Token.NAME:\n        // var name = function() ...\n        // var name2 = function name1() ...\n        return parent.getString();\n\n      case Token.ASSIGN:\n        // qualified.name = function() ...\n        // qualified.name2 = function name1() ...\n        return parent.getFirstChild().getQualifiedName();\n\n      default:\n        // function name() ...\n        return name != null && name.length() != 0 ? name : null;\n    }",
      "right" : "switch (parent.getType()) {\n      case Token.NAME:\n        // var name = function() ...\n        // var name2 = function name1() ...\n        return parent.getString();\n\n      case Token.ASSIGN:\n        // qualified.name = function() ...\n        // qualified.name2 = function name1() ...\n        return parent.getFirstChild().getQualifiedName();\n\n      default:\n        // function name() ...\n        return name != null && name.length() != 0 ? name : null;\n    }",
      "info" : "SwitchStatement[12284-12745]:SwitchStatement[12394-12855]"
    }, {
      "left" : "case Token.NAME:",
      "right" : "case Token.NAME:",
      "info" : "SwitchCase[12318-12334]:SwitchCase[12428-12444]"
    }, {
      "left" : "return parent.getString();",
      "right" : "return parent.getString();",
      "info" : "ReturnStatement[12424-12450]:ReturnStatement[12534-12560]"
    }, {
      "left" : "case Token.ASSIGN:",
      "right" : "case Token.ASSIGN:",
      "info" : "SwitchCase[12458-12476]:SwitchCase[12568-12586]"
    }, {
      "left" : "return parent.getFirstChild().getQualifiedName();",
      "right" : "return parent.getFirstChild().getQualifiedName();",
      "info" : "ReturnStatement[12578-12627]:ReturnStatement[12688-12737]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[12635-12643]:SwitchCase[12745-12753]"
    }, {
      "left" : "return name != null && name.length() != 0 ? name : null;",
      "right" : "return name != null && name.length() != 0 ? name : null;",
      "info" : "ReturnStatement[12683-12739]:ReturnStatement[12793-12849]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13399-13849]:Block[13509-13959]"
    }, {
      "left" : "String name = getFunctionName(n);",
      "right" : "String name = getFunctionName(n);",
      "info" : "VariableDeclarationStatement[13405-13438]:VariableDeclarationStatement[13515-13548]"
    }, {
      "left" : "if (name != null)",
      "right" : "if (name != null)",
      "info" : "IfStatement[13443-13487]:IfStatement[13553-13597]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13461-13487]:Block[13571-13597]"
    }, {
      "left" : "return name;",
      "right" : "return name;",
      "info" : "ReturnStatement[13469-13481]:ReturnStatement[13579-13591]"
    }, {
      "left" : "Node parent = n.getParent();",
      "right" : "Node parent = n.getParent();",
      "info" : "VariableDeclarationStatement[13544-13572]:VariableDeclarationStatement[13654-13682]"
    }, {
      "left" : "switch (parent.getType()) {\n      case Token.SET:\n      case Token.GET:\n      case Token.STRING:\n        // Return the name of the literal's key.\n        return parent.getString();\n      case Token.NUMBER:\n        return getStringValue(parent);\n    }",
      "right" : "switch (parent.getType()) {\n      case Token.SET:\n      case Token.GET:\n      case Token.STRING:\n        // Return the name of the literal's key.\n        return parent.getString();\n      case Token.NUMBER:\n        return getStringValue(parent);\n    }",
      "info" : "SwitchStatement[13577-13827]:SwitchStatement[13687-13937]"
    }, {
      "left" : "case Token.SET:",
      "right" : "case Token.SET:",
      "info" : "SwitchCase[13611-13626]:SwitchCase[13721-13736]"
    }, {
      "left" : "case Token.GET:",
      "right" : "case Token.GET:",
      "info" : "SwitchCase[13633-13648]:SwitchCase[13743-13758]"
    }, {
      "left" : "case Token.STRING:",
      "right" : "case Token.STRING:",
      "info" : "SwitchCase[13655-13673]:SwitchCase[13765-13783]"
    }, {
      "left" : "return parent.getString();",
      "right" : "return parent.getString();",
      "info" : "ReturnStatement[13731-13757]:ReturnStatement[13841-13867]"
    }, {
      "left" : "case Token.NUMBER:",
      "right" : "case Token.NUMBER:",
      "info" : "SwitchCase[13764-13782]:SwitchCase[13874-13892]"
    }, {
      "left" : "return getStringValue(parent);",
      "right" : "return getStringValue(parent);",
      "info" : "ReturnStatement[13791-13821]:ReturnStatement[13901-13931]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[13833-13845]:ReturnStatement[13943-13955]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13955-14642]:Block[14065-14752]"
    }, {
      "left" : "switch (n.getType()) {\n      case Token.STRING:\n      case Token.NUMBER:\n      case Token.NULL:\n      case Token.TRUE:\n      case Token.FALSE:\n        return true;\n      case Token.NOT:\n        return isImmutableValue(n.getFirstChild());\n      case Token.VOID:\n      case Token.NEG:\n        return isImmutableValue(n.getFirstChild());\n      case Token.NAME:\n        String name = n.getString();\n        // We assume here that programs don't change the value of the keyword\n        // undefined to something other than the value undefined.\n        return \"undefined\".equals(name)\n            || \"Infinity\".equals(name)\n            || \"NaN\".equals(name);\n    }",
      "right" : "switch (n.getType()) {\n      case Token.STRING:\n      case Token.NUMBER:\n      case Token.NULL:\n      case Token.TRUE:\n      case Token.FALSE:\n        return true;\n      case Token.NOT:\n        return isImmutableValue(n.getFirstChild());\n      case Token.VOID:\n      case Token.NEG:\n        return isImmutableValue(n.getFirstChild());\n      case Token.NAME:\n        String name = n.getString();\n        // We assume here that programs don't change the value of the keyword\n        // undefined to something other than the value undefined.\n        return \"undefined\".equals(name)\n            || \"Infinity\".equals(name)\n            || \"NaN\".equals(name);\n    }",
      "info" : "SwitchStatement[13961-14619]:SwitchStatement[14071-14729]"
    }, {
      "left" : "case Token.STRING:",
      "right" : "case Token.STRING:",
      "info" : "SwitchCase[13990-14008]:SwitchCase[14100-14118]"
    }, {
      "left" : "case Token.NUMBER:",
      "right" : "case Token.NUMBER:",
      "info" : "SwitchCase[14015-14033]:SwitchCase[14125-14143]"
    }, {
      "left" : "case Token.NULL:",
      "right" : "case Token.NULL:",
      "info" : "SwitchCase[14040-14056]:SwitchCase[14150-14166]"
    }, {
      "left" : "case Token.TRUE:",
      "right" : "case Token.TRUE:",
      "info" : "SwitchCase[14063-14079]:SwitchCase[14173-14189]"
    }, {
      "left" : "case Token.FALSE:",
      "right" : "case Token.FALSE:",
      "info" : "SwitchCase[14086-14103]:SwitchCase[14196-14213]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[14112-14124]:ReturnStatement[14222-14234]"
    }, {
      "left" : "case Token.NOT:",
      "right" : "case Token.NOT:",
      "info" : "SwitchCase[14131-14146]:SwitchCase[14241-14256]"
    }, {
      "left" : "return isImmutableValue(n.getFirstChild());",
      "right" : "return isImmutableValue(n.getFirstChild());",
      "info" : "ReturnStatement[14155-14198]:ReturnStatement[14265-14308]"
    }, {
      "left" : "case Token.VOID:",
      "right" : "case Token.VOID:",
      "info" : "SwitchCase[14205-14221]:SwitchCase[14315-14331]"
    }, {
      "left" : "case Token.NEG:",
      "right" : "case Token.NEG:",
      "info" : "SwitchCase[14228-14243]:SwitchCase[14338-14353]"
    }, {
      "left" : "return isImmutableValue(n.getFirstChild());",
      "right" : "return isImmutableValue(n.getFirstChild());",
      "info" : "ReturnStatement[14252-14295]:ReturnStatement[14362-14405]"
    }, {
      "left" : "case Token.NAME:",
      "right" : "case Token.NAME:",
      "info" : "SwitchCase[14302-14318]:SwitchCase[14412-14428]"
    }, {
      "left" : "String name = n.getString();",
      "right" : "String name = n.getString();",
      "info" : "VariableDeclarationStatement[14327-14355]:VariableDeclarationStatement[14437-14465]"
    }, {
      "left" : "return \"undefined\".equals(name)\n            || \"Infinity\".equals(name)\n            || \"NaN\".equals(name);",
      "right" : "return \"undefined\".equals(name)\n            || \"Infinity\".equals(name)\n            || \"NaN\".equals(name);",
      "info" : "ReturnStatement[14508-14613]:ReturnStatement[14618-14723]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[14625-14638]:ReturnStatement[14735-14748]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15612-16736]:Block[15722-16846]"
    }, {
      "left" : "switch (n.getType()) {\n      case Token.ARRAYLIT:\n        for (Node child = n.getFirstChild(); child != null;\n             child = child.getNext()) {\n          if (child.getType() != Token.EMPTY\n              && !isLiteralValue(child, includeFunctions)) {\n            return false;\n          }\n        }\n        return true;\n\n      case Token.REGEXP:\n        // Return true only if all children are const.\n        for (Node child = n.getFirstChild(); child != null;\n             child = child.getNext()) {\n          if (!isLiteralValue(child, includeFunctions)) {\n            return false;\n          }\n        }\n        return true;\n\n      case Token.OBJECTLIT:\n        // Return true only if all values are const.\n        for (Node child = n.getFirstChild(); child != null;\n             child = child.getNext()) {\n          if (!isLiteralValue(child.getFirstChild(), includeFunctions)) {\n            return false;\n          }\n        }\n        return true;\n\n      case Token.FUNCTION:\n        return includeFunctions && !NodeUtil.isFunctionDeclaration(n);\n\n      default:\n        return isImmutableValue(n);\n    }",
      "right" : "switch (n.getType()) {\n      case Token.ARRAYLIT:\n        for (Node child = n.getFirstChild(); child != null;\n             child = child.getNext()) {\n          if (child.getType() != Token.EMPTY\n              && !isLiteralValue(child, includeFunctions)) {\n            return false;\n          }\n        }\n        return true;\n\n      case Token.REGEXP:\n        // Return true only if all children are const.\n        for (Node child = n.getFirstChild(); child != null;\n             child = child.getNext()) {\n          if (!isLiteralValue(child, includeFunctions)) {\n            return false;\n          }\n        }\n        return true;\n\n      case Token.OBJECTLIT:\n        // Return true only if all values are const.\n        for (Node child = n.getFirstChild(); child != null;\n             child = child.getNext()) {\n          if (!isLiteralValue(child.getFirstChild(), includeFunctions)) {\n            return false;\n          }\n        }\n        return true;\n\n      case Token.FUNCTION:\n        return includeFunctions && !NodeUtil.isFunctionDeclaration(n);\n\n      default:\n        return isImmutableValue(n);\n    }",
      "info" : "SwitchStatement[15618-16732]:SwitchStatement[15728-16842]"
    }, {
      "left" : "case Token.ARRAYLIT:",
      "right" : "case Token.ARRAYLIT:",
      "info" : "SwitchCase[15647-15667]:SwitchCase[15757-15777]"
    }, {
      "left" : "for (Node child = n.getFirstChild(); child != null;\n             child = child.getNext())",
      "right" : "for (Node child = n.getFirstChild(); child != null;\n             child = child.getNext())",
      "info" : "ForStatement[15676-15921]:ForStatement[15786-16031]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15766-15921]:Block[15876-16031]"
    }, {
      "left" : "if (child.getType() != Token.EMPTY\n              && !isLiteralValue(child, includeFunctions))",
      "right" : "if (child.getType() != Token.EMPTY\n              && !isLiteralValue(child, includeFunctions))",
      "info" : "IfStatement[15778-15911]:IfStatement[15888-16021]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15872-15911]:Block[15982-16021]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[15886-15899]:ReturnStatement[15996-16009]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[15930-15942]:ReturnStatement[16040-16052]"
    }, {
      "left" : "case Token.REGEXP:",
      "right" : "case Token.REGEXP:",
      "info" : "SwitchCase[15950-15968]:SwitchCase[16060-16078]"
    }, {
      "left" : "for (Node child = n.getFirstChild(); child != null;\n             child = child.getNext())",
      "right" : "for (Node child = n.getFirstChild(); child != null;\n             child = child.getNext())",
      "info" : "ForStatement[16032-16229]:ForStatement[16142-16339]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16122-16229]:Block[16232-16339]"
    }, {
      "left" : "if (!isLiteralValue(child, includeFunctions))",
      "right" : "if (!isLiteralValue(child, includeFunctions))",
      "info" : "IfStatement[16134-16219]:IfStatement[16244-16329]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16180-16219]:Block[16290-16329]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[16194-16207]:ReturnStatement[16304-16317]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[16238-16250]:ReturnStatement[16348-16360]"
    }, {
      "left" : "case Token.OBJECTLIT:",
      "right" : "case Token.OBJECTLIT:",
      "info" : "SwitchCase[16258-16279]:SwitchCase[16368-16389]"
    }, {
      "left" : "for (Node child = n.getFirstChild(); child != null;\n             child = child.getNext())",
      "right" : "for (Node child = n.getFirstChild(); child != null;\n             child = child.getNext())",
      "info" : "ForStatement[16341-16554]:ForStatement[16451-16664]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16431-16554]:Block[16541-16664]"
    }, {
      "left" : "if (!isLiteralValue(child.getFirstChild(), includeFunctions))",
      "right" : "if (!isLiteralValue(child.getFirstChild(), includeFunctions))",
      "info" : "IfStatement[16443-16544]:IfStatement[16553-16654]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16505-16544]:Block[16615-16654]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[16519-16532]:ReturnStatement[16629-16642]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[16563-16575]:ReturnStatement[16673-16685]"
    }, {
      "left" : "case Token.FUNCTION:",
      "right" : "case Token.FUNCTION:",
      "info" : "SwitchCase[16583-16603]:SwitchCase[16693-16713]"
    }, {
      "left" : "return includeFunctions && !NodeUtil.isFunctionDeclaration(n);",
      "right" : "return includeFunctions && !NodeUtil.isFunctionDeclaration(n);",
      "info" : "ReturnStatement[16612-16674]:ReturnStatement[16722-16784]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[16682-16690]:SwitchCase[16792-16800]"
    }, {
      "left" : "return isImmutableValue(n);",
      "right" : "return isImmutableValue(n);",
      "info" : "ReturnStatement[16699-16726]:ReturnStatement[16809-16836]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16992-18230]:Block[17102-18340]"
    }, {
      "left" : "switch (val.getType()) {\n      case Token.STRING:\n      case Token.NUMBER:\n      case Token.TRUE:\n      case Token.FALSE:\n        return true;\n\n      // Binary operators are only valid if both children are valid.\n      case Token.ADD:\n      case Token.BITAND:\n      case Token.BITNOT:\n      case Token.BITOR:\n      case Token.BITXOR:\n      case Token.DIV:\n      case Token.EQ:\n      case Token.GE:\n      case Token.GT:\n      case Token.LE:\n      case Token.LSH:\n      case Token.LT:\n      case Token.MOD:\n      case Token.MUL:\n      case Token.NE:\n      case Token.RSH:\n      case Token.SHEQ:\n      case Token.SHNE:\n      case Token.SUB:\n      case Token.URSH:\n        return isValidDefineValue(val.getFirstChild(), defines)\n            && isValidDefineValue(val.getLastChild(), defines);\n\n      // Uniary operators are valid if the child is valid.\n      case Token.NOT:\n      case Token.NEG:\n      case Token.POS:\n        return isValidDefineValue(val.getFirstChild(), defines);\n\n      // Names are valid if and only if they are defines themselves.\n      case Token.NAME:\n      case Token.GETPROP:\n        if (val.isQualifiedName()) {\n          return defines.contains(val.getQualifiedName());\n        }\n    }",
      "right" : "switch (val.getType()) {\n      case Token.STRING:\n      case Token.NUMBER:\n      case Token.TRUE:\n      case Token.FALSE:\n        return true;\n\n      // Binary operators are only valid if both children are valid.\n      case Token.ADD:\n      case Token.BITAND:\n      case Token.BITNOT:\n      case Token.BITOR:\n      case Token.BITXOR:\n      case Token.DIV:\n      case Token.EQ:\n      case Token.GE:\n      case Token.GT:\n      case Token.LE:\n      case Token.LSH:\n      case Token.LT:\n      case Token.MOD:\n      case Token.MUL:\n      case Token.NE:\n      case Token.RSH:\n      case Token.SHEQ:\n      case Token.SHNE:\n      case Token.SUB:\n      case Token.URSH:\n        return isValidDefineValue(val.getFirstChild(), defines)\n            && isValidDefineValue(val.getLastChild(), defines);\n\n      // Uniary operators are valid if the child is valid.\n      case Token.NOT:\n      case Token.NEG:\n      case Token.POS:\n        return isValidDefineValue(val.getFirstChild(), defines);\n\n      // Names are valid if and only if they are defines themselves.\n      case Token.NAME:\n      case Token.GETPROP:\n        if (val.isQualifiedName()) {\n          return defines.contains(val.getQualifiedName());\n        }\n    }",
      "info" : "SwitchStatement[16998-18208]:SwitchStatement[17108-18318]"
    }, {
      "left" : "case Token.STRING:",
      "right" : "case Token.STRING:",
      "info" : "SwitchCase[17029-17047]:SwitchCase[17139-17157]"
    }, {
      "left" : "case Token.NUMBER:",
      "right" : "case Token.NUMBER:",
      "info" : "SwitchCase[17054-17072]:SwitchCase[17164-17182]"
    }, {
      "left" : "case Token.TRUE:",
      "right" : "case Token.TRUE:",
      "info" : "SwitchCase[17079-17095]:SwitchCase[17189-17205]"
    }, {
      "left" : "case Token.FALSE:",
      "right" : "case Token.FALSE:",
      "info" : "SwitchCase[17102-17119]:SwitchCase[17212-17229]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[17128-17140]:ReturnStatement[17238-17250]"
    }, {
      "left" : "case Token.ADD:",
      "right" : "case Token.ADD:",
      "info" : "SwitchCase[17217-17232]:SwitchCase[17327-17342]"
    }, {
      "left" : "case Token.BITAND:",
      "right" : "case Token.BITAND:",
      "info" : "SwitchCase[17239-17257]:SwitchCase[17349-17367]"
    }, {
      "left" : "case Token.BITNOT:",
      "right" : "case Token.BITNOT:",
      "info" : "SwitchCase[17264-17282]:SwitchCase[17374-17392]"
    }, {
      "left" : "case Token.BITOR:",
      "right" : "case Token.BITOR:",
      "info" : "SwitchCase[17289-17306]:SwitchCase[17399-17416]"
    }, {
      "left" : "case Token.BITXOR:",
      "right" : "case Token.BITXOR:",
      "info" : "SwitchCase[17313-17331]:SwitchCase[17423-17441]"
    }, {
      "left" : "case Token.DIV:",
      "right" : "case Token.DIV:",
      "info" : "SwitchCase[17338-17353]:SwitchCase[17448-17463]"
    }, {
      "left" : "case Token.EQ:",
      "right" : "case Token.EQ:",
      "info" : "SwitchCase[17360-17374]:SwitchCase[17470-17484]"
    }, {
      "left" : "case Token.GE:",
      "right" : "case Token.GE:",
      "info" : "SwitchCase[17381-17395]:SwitchCase[17491-17505]"
    }, {
      "left" : "case Token.GT:",
      "right" : "case Token.GT:",
      "info" : "SwitchCase[17402-17416]:SwitchCase[17512-17526]"
    }, {
      "left" : "case Token.LE:",
      "right" : "case Token.LE:",
      "info" : "SwitchCase[17423-17437]:SwitchCase[17533-17547]"
    }, {
      "left" : "case Token.LSH:",
      "right" : "case Token.LSH:",
      "info" : "SwitchCase[17444-17459]:SwitchCase[17554-17569]"
    }, {
      "left" : "case Token.LT:",
      "right" : "case Token.LT:",
      "info" : "SwitchCase[17466-17480]:SwitchCase[17576-17590]"
    }, {
      "left" : "case Token.MOD:",
      "right" : "case Token.MOD:",
      "info" : "SwitchCase[17487-17502]:SwitchCase[17597-17612]"
    }, {
      "left" : "case Token.MUL:",
      "right" : "case Token.MUL:",
      "info" : "SwitchCase[17509-17524]:SwitchCase[17619-17634]"
    }, {
      "left" : "case Token.NE:",
      "right" : "case Token.NE:",
      "info" : "SwitchCase[17531-17545]:SwitchCase[17641-17655]"
    }, {
      "left" : "case Token.RSH:",
      "right" : "case Token.RSH:",
      "info" : "SwitchCase[17552-17567]:SwitchCase[17662-17677]"
    }, {
      "left" : "case Token.SHEQ:",
      "right" : "case Token.SHEQ:",
      "info" : "SwitchCase[17574-17590]:SwitchCase[17684-17700]"
    }, {
      "left" : "case Token.SHNE:",
      "right" : "case Token.SHNE:",
      "info" : "SwitchCase[17597-17613]:SwitchCase[17707-17723]"
    }, {
      "left" : "case Token.SUB:",
      "right" : "case Token.SUB:",
      "info" : "SwitchCase[17620-17635]:SwitchCase[17730-17745]"
    }, {
      "left" : "case Token.URSH:",
      "right" : "case Token.URSH:",
      "info" : "SwitchCase[17642-17658]:SwitchCase[17752-17768]"
    }, {
      "left" : "return isValidDefineValue(val.getFirstChild(), defines)\n            && isValidDefineValue(val.getLastChild(), defines);",
      "right" : "return isValidDefineValue(val.getFirstChild(), defines)\n            && isValidDefineValue(val.getLastChild(), defines);",
      "info" : "ReturnStatement[17667-17786]:ReturnStatement[17777-17896]"
    }, {
      "left" : "case Token.NOT:",
      "right" : "case Token.NOT:",
      "info" : "SwitchCase[17853-17868]:SwitchCase[17963-17978]"
    }, {
      "left" : "case Token.NEG:",
      "right" : "case Token.NEG:",
      "info" : "SwitchCase[17875-17890]:SwitchCase[17985-18000]"
    }, {
      "left" : "case Token.POS:",
      "right" : "case Token.POS:",
      "info" : "SwitchCase[17897-17912]:SwitchCase[18007-18022]"
    }, {
      "left" : "return isValidDefineValue(val.getFirstChild(), defines);",
      "right" : "return isValidDefineValue(val.getFirstChild(), defines);",
      "info" : "ReturnStatement[17921-17977]:ReturnStatement[18031-18087]"
    }, {
      "left" : "case Token.NAME:",
      "right" : "case Token.NAME:",
      "info" : "SwitchCase[18054-18070]:SwitchCase[18164-18180]"
    }, {
      "left" : "case Token.GETPROP:",
      "right" : "case Token.GETPROP:",
      "info" : "SwitchCase[18077-18096]:SwitchCase[18187-18206]"
    }, {
      "left" : "if (val.isQualifiedName())",
      "right" : "if (val.isQualifiedName())",
      "info" : "IfStatement[18105-18202]:IfStatement[18215-18312]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18132-18202]:Block[18242-18312]"
    }, {
      "left" : "return defines.contains(val.getQualifiedName());",
      "right" : "return defines.contains(val.getQualifiedName());",
      "info" : "ReturnStatement[18144-18192]:ReturnStatement[18254-18302]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[18213-18226]:ReturnStatement[18323-18336]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18376-18614]:Block[18486-18724]"
    }, {
      "left" : "if (block.getType() != Token.BLOCK)",
      "right" : "if (block.getType() != Token.BLOCK)",
      "info" : "IfStatement[18382-18445]:IfStatement[18492-18555]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18418-18445]:Block[18528-18555]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[18426-18439]:ReturnStatement[18536-18549]"
    }, {
      "left" : "for (Node n = block.getFirstChild(); n != null; n = n.getNext())",
      "right" : "for (Node n = block.getFirstChild(); n != null; n = n.getNext())",
      "info" : "ForStatement[18451-18593]:ForStatement[18561-18703]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18516-18593]:Block[18626-18703]"
    }, {
      "left" : "if (n.getType() != Token.EMPTY)",
      "right" : "if (n.getType() != Token.EMPTY)",
      "info" : "IfStatement[18524-18587]:IfStatement[18634-18697]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18556-18587]:Block[18666-18697]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[18566-18579]:ReturnStatement[18676-18689]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[18598-18610]:ReturnStatement[18708-18720]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18658-18709]:Block[18768-18819]"
    }, {
      "left" : "return isSimpleOperatorType(n.getType());",
      "right" : "return isSimpleOperatorType(n.getType());",
      "info" : "ReturnStatement[18664-18705]:ReturnStatement[18774-18815]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18933-19690]:Block[19043-19800]"
    }, {
      "left" : "switch (type) {\n      case Token.ADD:\n      case Token.BITAND:\n      case Token.BITNOT:\n      case Token.BITOR:\n      case Token.BITXOR:\n      case Token.COMMA:\n      case Token.DIV:\n      case Token.EQ:\n      case Token.GE:\n      case Token.GETELEM:\n      case Token.GETPROP:\n      case Token.GT:\n      case Token.INSTANCEOF:\n      case Token.LE:\n      case Token.LSH:\n      case Token.LT:\n      case Token.MOD:\n      case Token.MUL:\n      case Token.NE:\n      case Token.NOT:\n      case Token.RSH:\n      case Token.SHEQ:\n      case Token.SHNE:\n      case Token.SUB:\n      case Token.TYPEOF:\n      case Token.VOID:\n      case Token.POS:\n      case Token.NEG:\n      case Token.URSH:\n        return true;\n\n      default:\n        return false;\n    }",
      "right" : "switch (type) {\n      case Token.ADD:\n      case Token.BITAND:\n      case Token.BITNOT:\n      case Token.BITOR:\n      case Token.BITXOR:\n      case Token.COMMA:\n      case Token.DIV:\n      case Token.EQ:\n      case Token.GE:\n      case Token.GETELEM:\n      case Token.GETPROP:\n      case Token.GT:\n      case Token.INSTANCEOF:\n      case Token.LE:\n      case Token.LSH:\n      case Token.LT:\n      case Token.MOD:\n      case Token.MUL:\n      case Token.NE:\n      case Token.NOT:\n      case Token.RSH:\n      case Token.SHEQ:\n      case Token.SHNE:\n      case Token.SUB:\n      case Token.TYPEOF:\n      case Token.VOID:\n      case Token.POS:\n      case Token.NEG:\n      case Token.URSH:\n        return true;\n\n      default:\n        return false;\n    }",
      "info" : "SwitchStatement[18939-19686]:SwitchStatement[19049-19796]"
    }, {
      "left" : "case Token.ADD:",
      "right" : "case Token.ADD:",
      "info" : "SwitchCase[18961-18976]:SwitchCase[19071-19086]"
    }, {
      "left" : "case Token.BITAND:",
      "right" : "case Token.BITAND:",
      "info" : "SwitchCase[18983-19001]:SwitchCase[19093-19111]"
    }, {
      "left" : "case Token.BITNOT:",
      "right" : "case Token.BITNOT:",
      "info" : "SwitchCase[19008-19026]:SwitchCase[19118-19136]"
    }, {
      "left" : "case Token.BITOR:",
      "right" : "case Token.BITOR:",
      "info" : "SwitchCase[19033-19050]:SwitchCase[19143-19160]"
    }, {
      "left" : "case Token.BITXOR:",
      "right" : "case Token.BITXOR:",
      "info" : "SwitchCase[19057-19075]:SwitchCase[19167-19185]"
    }, {
      "left" : "case Token.COMMA:",
      "right" : "case Token.COMMA:",
      "info" : "SwitchCase[19082-19099]:SwitchCase[19192-19209]"
    }, {
      "left" : "case Token.DIV:",
      "right" : "case Token.DIV:",
      "info" : "SwitchCase[19106-19121]:SwitchCase[19216-19231]"
    }, {
      "left" : "case Token.EQ:",
      "right" : "case Token.EQ:",
      "info" : "SwitchCase[19128-19142]:SwitchCase[19238-19252]"
    }, {
      "left" : "case Token.GE:",
      "right" : "case Token.GE:",
      "info" : "SwitchCase[19149-19163]:SwitchCase[19259-19273]"
    }, {
      "left" : "case Token.GETELEM:",
      "right" : "case Token.GETELEM:",
      "info" : "SwitchCase[19170-19189]:SwitchCase[19280-19299]"
    }, {
      "left" : "case Token.GETPROP:",
      "right" : "case Token.GETPROP:",
      "info" : "SwitchCase[19196-19215]:SwitchCase[19306-19325]"
    }, {
      "left" : "case Token.GT:",
      "right" : "case Token.GT:",
      "info" : "SwitchCase[19222-19236]:SwitchCase[19332-19346]"
    }, {
      "left" : "case Token.INSTANCEOF:",
      "right" : "case Token.INSTANCEOF:",
      "info" : "SwitchCase[19243-19265]:SwitchCase[19353-19375]"
    }, {
      "left" : "case Token.LE:",
      "right" : "case Token.LE:",
      "info" : "SwitchCase[19272-19286]:SwitchCase[19382-19396]"
    }, {
      "left" : "case Token.LSH:",
      "right" : "case Token.LSH:",
      "info" : "SwitchCase[19293-19308]:SwitchCase[19403-19418]"
    }, {
      "left" : "case Token.LT:",
      "right" : "case Token.LT:",
      "info" : "SwitchCase[19315-19329]:SwitchCase[19425-19439]"
    }, {
      "left" : "case Token.MOD:",
      "right" : "case Token.MOD:",
      "info" : "SwitchCase[19336-19351]:SwitchCase[19446-19461]"
    }, {
      "left" : "case Token.MUL:",
      "right" : "case Token.MUL:",
      "info" : "SwitchCase[19358-19373]:SwitchCase[19468-19483]"
    }, {
      "left" : "case Token.NE:",
      "right" : "case Token.NE:",
      "info" : "SwitchCase[19380-19394]:SwitchCase[19490-19504]"
    }, {
      "left" : "case Token.NOT:",
      "right" : "case Token.NOT:",
      "info" : "SwitchCase[19401-19416]:SwitchCase[19511-19526]"
    }, {
      "left" : "case Token.RSH:",
      "right" : "case Token.RSH:",
      "info" : "SwitchCase[19423-19438]:SwitchCase[19533-19548]"
    }, {
      "left" : "case Token.SHEQ:",
      "right" : "case Token.SHEQ:",
      "info" : "SwitchCase[19445-19461]:SwitchCase[19555-19571]"
    }, {
      "left" : "case Token.SHNE:",
      "right" : "case Token.SHNE:",
      "info" : "SwitchCase[19468-19484]:SwitchCase[19578-19594]"
    }, {
      "left" : "case Token.SUB:",
      "right" : "case Token.SUB:",
      "info" : "SwitchCase[19491-19506]:SwitchCase[19601-19616]"
    }, {
      "left" : "case Token.TYPEOF:",
      "right" : "case Token.TYPEOF:",
      "info" : "SwitchCase[19513-19531]:SwitchCase[19623-19641]"
    }, {
      "left" : "case Token.VOID:",
      "right" : "case Token.VOID:",
      "info" : "SwitchCase[19538-19554]:SwitchCase[19648-19664]"
    }, {
      "left" : "case Token.POS:",
      "right" : "case Token.POS:",
      "info" : "SwitchCase[19561-19576]:SwitchCase[19671-19686]"
    }, {
      "left" : "case Token.NEG:",
      "right" : "case Token.NEG:",
      "info" : "SwitchCase[19583-19598]:SwitchCase[19693-19708]"
    }, {
      "left" : "case Token.URSH:",
      "right" : "case Token.URSH:",
      "info" : "SwitchCase[19605-19621]:SwitchCase[19715-19731]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[19630-19642]:ReturnStatement[19740-19752]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[19650-19658]:SwitchCase[19760-19768]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[19667-19680]:ReturnStatement[19777-19790]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19890-20000]:Block[20000-20110]"
    }, {
      "left" : "Node expr = new Node(Token.EXPR_RESULT, child)\n        .copyInformationFrom(child);",
      "right" : "Node expr = new Node(Token.EXPR_RESULT, child)\n        .copyInformationFrom(child);",
      "info" : "VariableDeclarationStatement[19896-19979]:VariableDeclarationStatement[20006-20089]"
    }, {
      "left" : "return expr;",
      "right" : "return expr;",
      "info" : "ReturnStatement[19984-19996]:ReturnStatement[20094-20106]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20219-20267]:Block[20329-20377]"
    }, {
      "left" : "return mayEffectMutableState(n, null);",
      "right" : "return mayEffectMutableState(n, null);",
      "info" : "ReturnStatement[20225-20263]:ReturnStatement[20335-20373]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20343-20405]:Block[20453-20515]"
    }, {
      "left" : "return checkForStateChangeHelper(n, true, compiler);",
      "right" : "return checkForStateChangeHelper(n, true, compiler);",
      "info" : "ReturnStatement[20349-20401]:ReturnStatement[20459-20511]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20536-20581]:Block[20646-20691]"
    }, {
      "left" : "return mayHaveSideEffects(n, null);",
      "right" : "return mayHaveSideEffects(n, null);",
      "info" : "ReturnStatement[20542-20577]:ReturnStatement[20652-20687]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20654-20717]:Block[20764-20827]"
    }, {
      "left" : "return checkForStateChangeHelper(n, false, compiler);",
      "right" : "return checkForStateChangeHelper(n, false, compiler);",
      "info" : "ReturnStatement[20660-20713]:ReturnStatement[20770-20823]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21114-25562]:Block[21224-25672]"
    }, {
      "left" : "switch (n.getType()) {\n      // other side-effect free statements and expressions\n      case Token.AND:\n      case Token.BLOCK:\n      case Token.EXPR_RESULT:\n      case Token.HOOK:\n      case Token.IF:\n      case Token.IN:\n      case Token.LP:\n      case Token.NUMBER:\n      case Token.OR:\n      case Token.THIS:\n      case Token.TRUE:\n      case Token.FALSE:\n      case Token.NULL:\n      case Token.STRING:\n      case Token.SWITCH:\n      case Token.TRY:\n      case Token.EMPTY:\n        break;\n\n      // Throws are by definition side effects\n      case Token.THROW:\n        return true;\n\n      case Token.OBJECTLIT:\n        if (checkForNewObjects) {\n          return true;\n        }\n        for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n          if (checkForStateChangeHelper(\n                  c.getFirstChild(), checkForNewObjects, compiler)) {\n            return true;\n          }\n        }\n        return false;\n\n      case Token.ARRAYLIT:\n      case Token.REGEXP:\n        if (checkForNewObjects) {\n          return true;\n        }\n        break;\n\n      case Token.VAR:    // empty var statement (no declaration)\n      case Token.NAME:   // variable by itself\n        if (n.getFirstChild() != null) {\n          return true;\n        }\n        break;\n\n      case Token.FUNCTION:\n        // Function expressions don't have side-effects, but function\n        // declarations change the namespace. Either way, we don't need to\n        // check the children, since they aren't executed at declaration time.\n        return checkForNewObjects || !isFunctionExpression(n);\n\n      case Token.NEW:\n        if (checkForNewObjects) {\n          return true;\n        }\n\n        if (!constructorCallHasSideEffects(n)) {\n          // loop below will see if the constructor parameters have\n          // side-effects\n          break;\n        }\n        return true;\n\n      case Token.CALL:\n        // calls to functions that have no side effects have the no\n        // side effect property set.\n        if (!functionCallHasSideEffects(n, compiler)) {\n          // loop below will see if the function parameters have\n          // side-effects\n          break;\n        }\n        return true;\n\n      default:\n        if (isSimpleOperatorType(n.getType())) {\n          break;\n        }\n\n        if (isAssignmentOp(n)) {\n          Node assignTarget = n.getFirstChild();\n          if (isName(assignTarget)) {\n            return true;\n          }\n\n          // Assignments will have side effects if\n          // a) The RHS has side effects, or\n          // b) The LHS has side effects, or\n          // c) A name on the LHS will exist beyond the life of this statement.\n          if (checkForStateChangeHelper(\n                  n.getFirstChild(), checkForNewObjects, compiler) ||\n              checkForStateChangeHelper(\n                  n.getLastChild(), checkForNewObjects, compiler)) {\n            return true;\n          }\n\n          if (isGet(assignTarget)) {\n            // If the object being assigned to is a local object, don't\n            // consider this a side-effect as it can't be referenced\n            // elsewhere.  Don't do this recursively as the property might\n            // be an alias of another object, unlike a literal below.\n            Node current = assignTarget.getFirstChild();\n            if (evaluatesToLocalValue(current)) {\n              return false;\n            }\n\n            // A literal value as defined by \"isLiteralValue\" is guaranteed\n            // not to be an alias, or any components which are aliases of\n            // other objects.\n            // If the root object is a literal don't consider this a\n            // side-effect.\n            while (isGet(current)) {\n              current = current.getFirstChild();\n            }\n\n            return !isLiteralValue(current, true);\n          } else {\n            // TODO(johnlenz): remove this code and make this an exception. This\n            // is here only for legacy reasons, the AST is not valid but\n            // preserve existing behavior.\n            return !isLiteralValue(assignTarget, true);\n          }\n        }\n\n        return true;\n    }",
      "right" : "switch (n.getType()) {\n      // other side-effect free statements and expressions\n      case Token.AND:\n      case Token.BLOCK:\n      case Token.EXPR_RESULT:\n      case Token.HOOK:\n      case Token.IF:\n      case Token.IN:\n      case Token.LP:\n      case Token.NUMBER:\n      case Token.OR:\n      case Token.THIS:\n      case Token.TRUE:\n      case Token.FALSE:\n      case Token.NULL:\n      case Token.STRING:\n      case Token.SWITCH:\n      case Token.TRY:\n      case Token.EMPTY:\n        break;\n\n      // Throws are by definition side effects\n      case Token.THROW:\n        return true;\n\n      case Token.OBJECTLIT:\n        if (checkForNewObjects) {\n          return true;\n        }\n        for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n          if (checkForStateChangeHelper(\n                  c.getFirstChild(), checkForNewObjects, compiler)) {\n            return true;\n          }\n        }\n        return false;\n\n      case Token.ARRAYLIT:\n      case Token.REGEXP:\n        if (checkForNewObjects) {\n          return true;\n        }\n        break;\n\n      case Token.VAR:    // empty var statement (no declaration)\n      case Token.NAME:   // variable by itself\n        if (n.getFirstChild() != null) {\n          return true;\n        }\n        break;\n\n      case Token.FUNCTION:\n        // Function expressions don't have side-effects, but function\n        // declarations change the namespace. Either way, we don't need to\n        // check the children, since they aren't executed at declaration time.\n        return checkForNewObjects || !isFunctionExpression(n);\n\n      case Token.NEW:\n        if (checkForNewObjects) {\n          return true;\n        }\n\n        if (!constructorCallHasSideEffects(n)) {\n          // loop below will see if the constructor parameters have\n          // side-effects\n          break;\n        }\n        return true;\n\n      case Token.CALL:\n        // calls to functions that have no side effects have the no\n        // side effect property set.\n        if (!functionCallHasSideEffects(n, compiler)) {\n          // loop below will see if the function parameters have\n          // side-effects\n          break;\n        }\n        return true;\n\n      default:\n        if (isSimpleOperatorType(n.getType())) {\n          break;\n        }\n\n        if (isAssignmentOp(n)) {\n          Node assignTarget = n.getFirstChild();\n          if (isName(assignTarget)) {\n            return true;\n          }\n\n          // Assignments will have side effects if\n          // a) The RHS has side effects, or\n          // b) The LHS has side effects, or\n          // c) A name on the LHS will exist beyond the life of this statement.\n          if (checkForStateChangeHelper(\n                  n.getFirstChild(), checkForNewObjects, compiler) ||\n              checkForStateChangeHelper(\n                  n.getLastChild(), checkForNewObjects, compiler)) {\n            return true;\n          }\n\n          if (isGet(assignTarget)) {\n            // If the object being assigned to is a local object, don't\n            // consider this a side-effect as it can't be referenced\n            // elsewhere.  Don't do this recursively as the property might\n            // be an alias of another object, unlike a literal below.\n            Node current = assignTarget.getFirstChild();\n            if (evaluatesToLocalValue(current)) {\n              return false;\n            }\n\n            // A literal value as defined by \"isLiteralValue\" is guaranteed\n            // not to be an alias, or any components which are aliases of\n            // other objects.\n            // If the root object is a literal don't consider this a\n            // side-effect.\n            while (isGet(current)) {\n              current = current.getFirstChild();\n            }\n\n            return !isLiteralValue(current, true);\n          } else {\n            // TODO(johnlenz): remove this code and make this an exception. This\n            // is here only for legacy reasons, the AST is not valid but\n            // preserve existing behavior.\n            return !isLiteralValue(assignTarget, true);\n          }\n        }\n\n        return true;\n    }",
      "info" : "SwitchStatement[21218-25364]:SwitchStatement[21328-25474]"
    }, {
      "left" : "case Token.AND:",
      "right" : "case Token.AND:",
      "info" : "SwitchCase[21306-21321]:SwitchCase[21416-21431]"
    }, {
      "left" : "case Token.BLOCK:",
      "right" : "case Token.BLOCK:",
      "info" : "SwitchCase[21328-21345]:SwitchCase[21438-21455]"
    }, {
      "left" : "case Token.EXPR_RESULT:",
      "right" : "case Token.EXPR_RESULT:",
      "info" : "SwitchCase[21352-21375]:SwitchCase[21462-21485]"
    }, {
      "left" : "case Token.HOOK:",
      "right" : "case Token.HOOK:",
      "info" : "SwitchCase[21382-21398]:SwitchCase[21492-21508]"
    }, {
      "left" : "case Token.IF:",
      "right" : "case Token.IF:",
      "info" : "SwitchCase[21405-21419]:SwitchCase[21515-21529]"
    }, {
      "left" : "case Token.IN:",
      "right" : "case Token.IN:",
      "info" : "SwitchCase[21426-21440]:SwitchCase[21536-21550]"
    }, {
      "left" : "case Token.LP:",
      "right" : "case Token.LP:",
      "info" : "SwitchCase[21447-21461]:SwitchCase[21557-21571]"
    }, {
      "left" : "case Token.NUMBER:",
      "right" : "case Token.NUMBER:",
      "info" : "SwitchCase[21468-21486]:SwitchCase[21578-21596]"
    }, {
      "left" : "case Token.OR:",
      "right" : "case Token.OR:",
      "info" : "SwitchCase[21493-21507]:SwitchCase[21603-21617]"
    }, {
      "left" : "case Token.THIS:",
      "right" : "case Token.THIS:",
      "info" : "SwitchCase[21514-21530]:SwitchCase[21624-21640]"
    }, {
      "left" : "case Token.TRUE:",
      "right" : "case Token.TRUE:",
      "info" : "SwitchCase[21537-21553]:SwitchCase[21647-21663]"
    }, {
      "left" : "case Token.FALSE:",
      "right" : "case Token.FALSE:",
      "info" : "SwitchCase[21560-21577]:SwitchCase[21670-21687]"
    }, {
      "left" : "case Token.NULL:",
      "right" : "case Token.NULL:",
      "info" : "SwitchCase[21584-21600]:SwitchCase[21694-21710]"
    }, {
      "left" : "case Token.STRING:",
      "right" : "case Token.STRING:",
      "info" : "SwitchCase[21607-21625]:SwitchCase[21717-21735]"
    }, {
      "left" : "case Token.SWITCH:",
      "right" : "case Token.SWITCH:",
      "info" : "SwitchCase[21632-21650]:SwitchCase[21742-21760]"
    }, {
      "left" : "case Token.TRY:",
      "right" : "case Token.TRY:",
      "info" : "SwitchCase[21657-21672]:SwitchCase[21767-21782]"
    }, {
      "left" : "case Token.EMPTY:",
      "right" : "case Token.EMPTY:",
      "info" : "SwitchCase[21679-21696]:SwitchCase[21789-21806]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[21705-21711]:BreakStatement[21815-21821]"
    }, {
      "left" : "case Token.THROW:",
      "right" : "case Token.THROW:",
      "info" : "SwitchCase[21766-21783]:SwitchCase[21876-21893]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[21792-21804]:ReturnStatement[21902-21914]"
    }, {
      "left" : "case Token.OBJECTLIT:",
      "right" : "case Token.OBJECTLIT:",
      "info" : "SwitchCase[21812-21833]:SwitchCase[21922-21943]"
    }, {
      "left" : "if (checkForNewObjects)",
      "right" : "if (checkForNewObjects)",
      "info" : "IfStatement[21842-21900]:IfStatement[21952-22010]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21866-21900]:Block[21976-22010]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[21878-21890]:ReturnStatement[21988-22000]"
    }, {
      "left" : "for (Node c = n.getFirstChild(); c != null; c = c.getNext())",
      "right" : "for (Node c = n.getFirstChild(); c != null; c = c.getNext())",
      "info" : "ForStatement[21909-22129]:ForStatement[22019-22239]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21970-22129]:Block[22080-22239]"
    }, {
      "left" : "if (checkForStateChangeHelper(\n                  c.getFirstChild(), checkForNewObjects, compiler))",
      "right" : "if (checkForStateChangeHelper(\n                  c.getFirstChild(), checkForNewObjects, compiler))",
      "info" : "IfStatement[21982-22119]:IfStatement[22092-22229]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22081-22119]:Block[22191-22229]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[22095-22107]:ReturnStatement[22205-22217]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[22138-22151]:ReturnStatement[22248-22261]"
    }, {
      "left" : "case Token.ARRAYLIT:",
      "right" : "case Token.ARRAYLIT:",
      "info" : "SwitchCase[22159-22179]:SwitchCase[22269-22289]"
    }, {
      "left" : "case Token.REGEXP:",
      "right" : "case Token.REGEXP:",
      "info" : "SwitchCase[22186-22204]:SwitchCase[22296-22314]"
    }, {
      "left" : "if (checkForNewObjects)",
      "right" : "if (checkForNewObjects)",
      "info" : "IfStatement[22213-22271]:IfStatement[22323-22381]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22237-22271]:Block[22347-22381]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[22249-22261]:ReturnStatement[22359-22371]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[22280-22286]:BreakStatement[22390-22396]"
    }, {
      "left" : "case Token.VAR:",
      "right" : "case Token.VAR:",
      "info" : "SwitchCase[22294-22309]:SwitchCase[22404-22419]"
    }, {
      "left" : "case Token.NAME:",
      "right" : "case Token.NAME:",
      "info" : "SwitchCase[22359-22375]:SwitchCase[22469-22485]"
    }, {
      "left" : "if (n.getFirstChild() != null)",
      "right" : "if (n.getFirstChild() != null)",
      "info" : "IfStatement[22408-22473]:IfStatement[22518-22583]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22439-22473]:Block[22549-22583]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[22451-22463]:ReturnStatement[22561-22573]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[22482-22488]:BreakStatement[22592-22598]"
    }, {
      "left" : "case Token.FUNCTION:",
      "right" : "case Token.FUNCTION:",
      "info" : "SwitchCase[22496-22516]:SwitchCase[22606-22626]"
    }, {
      "left" : "return checkForNewObjects || !isFunctionExpression(n);",
      "right" : "return checkForNewObjects || !isFunctionExpression(n);",
      "info" : "ReturnStatement[22749-22803]:ReturnStatement[22859-22913]"
    }, {
      "left" : "case Token.NEW:",
      "right" : "case Token.NEW:",
      "info" : "SwitchCase[22811-22826]:SwitchCase[22921-22936]"
    }, {
      "left" : "if (checkForNewObjects)",
      "right" : "if (checkForNewObjects)",
      "info" : "IfStatement[22835-22893]:IfStatement[22945-23003]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22859-22893]:Block[22969-23003]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[22871-22883]:ReturnStatement[22981-22993]"
    }, {
      "left" : "if (!constructorCallHasSideEffects(n))",
      "right" : "if (!constructorCallHasSideEffects(n))",
      "info" : "IfStatement[22903-23064]:IfStatement[23013-23174]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22942-23064]:Block[23052-23174]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[23048-23054]:BreakStatement[23158-23164]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[23073-23085]:ReturnStatement[23183-23195]"
    }, {
      "left" : "case Token.CALL:",
      "right" : "case Token.CALL:",
      "info" : "SwitchCase[23093-23109]:SwitchCase[23203-23219]"
    }, {
      "left" : "if (!functionCallHasSideEffects(n, compiler))",
      "right" : "if (!functionCallHasSideEffects(n, compiler))",
      "info" : "IfStatement[23223-23388]:IfStatement[23333-23498]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23269-23388]:Block[23379-23498]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[23372-23378]:BreakStatement[23482-23488]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[23397-23409]:ReturnStatement[23507-23519]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[23417-23425]:SwitchCase[23527-23535]"
    }, {
      "left" : "if (isSimpleOperatorType(n.getType()))",
      "right" : "if (isSimpleOperatorType(n.getType()))",
      "info" : "IfStatement[23434-23501]:IfStatement[23544-23611]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23473-23501]:Block[23583-23611]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[23485-23491]:BreakStatement[23595-23601]"
    }, {
      "left" : "if (isAssignmentOp(n))",
      "right" : "if (isAssignmentOp(n))",
      "info" : "IfStatement[23511-25336]:IfStatement[23621-25446]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23534-25336]:Block[23644-25446]"
    }, {
      "left" : "Node assignTarget = n.getFirstChild();",
      "right" : "Node assignTarget = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[23546-23584]:VariableDeclarationStatement[23656-23694]"
    }, {
      "left" : "if (isName(assignTarget))",
      "right" : "if (isName(assignTarget))",
      "info" : "IfStatement[23595-23659]:IfStatement[23705-23769]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23621-23659]:Block[23731-23769]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[23635-23647]:ReturnStatement[23745-23757]"
    }, {
      "left" : "if (checkForStateChangeHelper(\n                  n.getFirstChild(), checkForNewObjects, compiler) ||\n              checkForStateChangeHelper(\n                  n.getLastChild(), checkForNewObjects, compiler))",
      "right" : "if (checkForStateChangeHelper(\n                  n.getFirstChild(), checkForNewObjects, compiler) ||\n              checkForStateChangeHelper(\n                  n.getLastChild(), checkForNewObjects, compiler))",
      "info" : "IfStatement[23892-24139]:IfStatement[24002-24249]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24101-24139]:Block[24211-24249]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[24115-24127]:ReturnStatement[24225-24237]"
    }, {
      "left" : "if (isGet(assignTarget))",
      "right" : "if (isGet(assignTarget))",
      "info" : "IfStatement[24151-25326]:IfStatement[24261-25436]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24176-25054]:Block[24286-25164]"
    }, {
      "left" : "Node current = assignTarget.getFirstChild();",
      "right" : "Node current = assignTarget.getFirstChild();",
      "info" : "VariableDeclarationStatement[24476-24520]:VariableDeclarationStatement[24586-24630]"
    }, {
      "left" : "if (evaluatesToLocalValue(current))",
      "right" : "if (evaluatesToLocalValue(current))",
      "info" : "IfStatement[24533-24612]:IfStatement[24643-24722]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24569-24612]:Block[24679-24722]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[24585-24598]:ReturnStatement[24695-24708]"
    }, {
      "left" : "while (isGet(current))",
      "right" : "while (isGet(current))",
      "info" : "WhileStatement[24903-24990]:WhileStatement[25013-25100]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24926-24990]:Block[25036-25100]"
    }, {
      "left" : "current = current.getFirstChild();",
      "right" : "current = current.getFirstChild();",
      "info" : "ExpressionStatement[24942-24976]:ExpressionStatement[25052-25086]"
    }, {
      "left" : "return !isLiteralValue(current, true);",
      "right" : "return !isLiteralValue(current, true);",
      "info" : "ReturnStatement[25004-25042]:ReturnStatement[25114-25152]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25060-25326]:Block[25170-25436]"
    }, {
      "left" : "return !isLiteralValue(assignTarget, true);",
      "right" : "return !isLiteralValue(assignTarget, true);",
      "info" : "ReturnStatement[25271-25314]:ReturnStatement[25381-25424]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[25346-25358]:ReturnStatement[25456-25468]"
    }, {
      "left" : "for (Node c = n.getFirstChild(); c != null; c = c.getNext())",
      "right" : "for (Node c = n.getFirstChild(); c != null; c = c.getNext())",
      "info" : "ForStatement[25370-25539]:ForStatement[25480-25649]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25431-25539]:Block[25541-25649]"
    }, {
      "left" : "if (checkForStateChangeHelper(c, checkForNewObjects, compiler))",
      "right" : "if (checkForStateChangeHelper(c, checkForNewObjects, compiler))",
      "info" : "IfStatement[25439-25533]:IfStatement[25549-25643]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25503-25533]:Block[25613-25643]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[25513-25525]:ReturnStatement[25623-25635]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[25545-25558]:ReturnStatement[25655-25668]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25740-25803]:Block[25850-25913]"
    }, {
      "left" : "return constructorCallHasSideEffects(callNode, null);",
      "right" : "return constructorCallHasSideEffects(callNode, null);",
      "info" : "ReturnStatement[25746-25799]:ReturnStatement[25856-25909]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25901-26345]:Block[26011-26455]"
    }, {
      "left" : "if (callNode.getType() != Token.NEW)",
      "right" : "if (callNode.getType() != Token.NEW)",
      "info" : "IfStatement[25907-26061]:IfStatement[26017-26171]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25944-26061]:Block[26054-26171]"
    }, {
      "left" : "throw new IllegalStateException(\n          \"Expected NEW node, got \" + Token.name(callNode.getType()));",
      "right" : "throw new IllegalStateException(\n          \"Expected NEW node, got \" + Token.name(callNode.getType()));",
      "info" : "ThrowStatement[25952-26055]:ThrowStatement[26062-26165]"
    }, {
      "left" : "if (callNode.isNoSideEffectsCall())",
      "right" : "if (callNode.isNoSideEffectsCall())",
      "info" : "IfStatement[26067-26130]:IfStatement[26177-26240]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26103-26130]:Block[26213-26240]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[26111-26124]:ReturnStatement[26221-26234]"
    }, {
      "left" : "Node nameNode = callNode.getFirstChild();",
      "right" : "Node nameNode = callNode.getFirstChild();",
      "info" : "VariableDeclarationStatement[26136-26177]:VariableDeclarationStatement[26246-26287]"
    }, {
      "left" : "if (nameNode.getType() == Token.NAME &&\n        CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))",
      "right" : "if (nameNode.getType() == Token.NAME &&\n        CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))",
      "info" : "IfStatement[26182-26323]:IfStatement[26292-26433]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26296-26323]:Block[26406-26433]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[26304-26317]:ReturnStatement[26414-26427]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[26329-26341]:ReturnStatement[26439-26451]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27246-27306]:Block[27356-27416]"
    }, {
      "left" : "return functionCallHasSideEffects(callNode, null);",
      "right" : "return functionCallHasSideEffects(callNode, null);",
      "info" : "ReturnStatement[27252-27302]:ReturnStatement[27362-27412]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27656-29475]:Block[27766-29585]"
    }, {
      "left" : "if (callNode.getType() != Token.CALL)",
      "right" : "if (callNode.getType() != Token.CALL)",
      "info" : "IfStatement[27662-27818]:IfStatement[27772-27928]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27700-27818]:Block[27810-27928]"
    }, {
      "left" : "throw new IllegalStateException(\n          \"Expected CALL node, got \" + Token.name(callNode.getType()));",
      "right" : "throw new IllegalStateException(\n          \"Expected CALL node, got \" + Token.name(callNode.getType()));",
      "info" : "ThrowStatement[27708-27812]:ThrowStatement[27818-27922]"
    }, {
      "left" : "if (callNode.isNoSideEffectsCall())",
      "right" : "if (callNode.isNoSideEffectsCall())",
      "info" : "IfStatement[27824-27887]:IfStatement[27934-27997]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27860-27887]:Block[27970-27997]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[27868-27881]:ReturnStatement[27978-27991]"
    }, {
      "left" : "Node nameNode = callNode.getFirstChild();",
      "right" : "Node nameNode = callNode.getFirstChild();",
      "info" : "VariableDeclarationStatement[27893-27934]:VariableDeclarationStatement[28003-28044]"
    }, {
      "left" : "if (nameNode.getType() == Token.NAME)",
      "right" : "if (nameNode.getType() == Token.NAME)",
      "info" : "IfStatement[27988-29453]:IfStatement[28098-29563]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28026-28171]:Block[28136-28281]"
    }, {
      "left" : "String name = nameNode.getString();",
      "right" : "String name = nameNode.getString();",
      "info" : "VariableDeclarationStatement[28034-28069]:VariableDeclarationStatement[28144-28179]"
    }, {
      "left" : "if (BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(name))",
      "right" : "if (BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(name))",
      "info" : "IfStatement[28076-28165]:IfStatement[28186-28275]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28134-28165]:Block[28244-28275]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[28144-28157]:ReturnStatement[28254-28267]"
    }, {
      "left" : "if (nameNode.getType() == Token.GETPROP)",
      "right" : "if (nameNode.getType() == Token.GETPROP)",
      "info" : "IfStatement[28177-29453]:IfStatement[28287-29563]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28218-29453]:Block[28328-29563]"
    }, {
      "left" : "if (callNode.hasOneChild()\n          && OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(\n                nameNode.getLastChild().getString()))",
      "right" : "if (callNode.hasOneChild()\n          && OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(\n                nameNode.getLastChild().getString()))",
      "info" : "IfStatement[28226-28396]:IfStatement[28336-28506]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28365-28396]:Block[28475-28506]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[28375-28388]:ReturnStatement[28485-28498]"
    }, {
      "left" : "if (callNode.isOnlyModifiesThisCall()\n          && evaluatesToLocalValue(nameNode.getFirstChild()))",
      "right" : "if (callNode.isOnlyModifiesThisCall()\n          && evaluatesToLocalValue(nameNode.getFirstChild()))",
      "info" : "IfStatement[28404-28535]:IfStatement[28514-28645]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28504-28535]:Block[28614-28645]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[28514-28527]:ReturnStatement[28624-28637]"
    }, {
      "left" : "if (nameNode.getFirstChild().getType() == Token.NAME)",
      "right" : "if (nameNode.getFirstChild().getType() == Token.NAME)",
      "info" : "IfStatement[28608-28818]:IfStatement[28718-28928]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28662-28818]:Block[28772-28928]"
    }, {
      "left" : "String namespaceName = nameNode.getFirstChild().getString();",
      "right" : "String namespaceName = nameNode.getFirstChild().getString();",
      "info" : "VariableDeclarationStatement[28672-28732]:VariableDeclarationStatement[28782-28842]"
    }, {
      "left" : "if (namespaceName.equals(\"Math\"))",
      "right" : "if (namespaceName.equals(\"Math\"))",
      "info" : "IfStatement[28741-28810]:IfStatement[28851-28920]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28775-28810]:Block[28885-28920]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[28787-28800]:ReturnStatement[28897-28910]"
    }, {
      "left" : "if (compiler != null && !compiler.hasRegExpGlobalReferences())",
      "right" : "if (compiler != null && !compiler.hasRegExpGlobalReferences())",
      "info" : "IfStatement[28826-29447]:IfStatement[28936-29557]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28889-29447]:Block[28999-29557]"
    }, {
      "left" : "if (nameNode.getFirstChild().getType() == Token.REGEXP\n            && REGEXP_METHODS.contains(nameNode.getLastChild().getString()))",
      "right" : "if (nameNode.getFirstChild().getType() == Token.REGEXP\n            && REGEXP_METHODS.contains(nameNode.getLastChild().getString()))",
      "info" : "IfStatement[28899-29439]:IfStatement[29009-29549]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29031-29066]:Block[29141-29176]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[29043-29056]:ReturnStatement[29153-29166]"
    }, {
      "left" : "if (nameNode.getFirstChild().getType() == Token.STRING\n            && STRING_REGEXP_METHODS.contains(\n                nameNode.getLastChild().getString()))",
      "right" : "if (nameNode.getFirstChild().getType() == Token.STRING\n            && STRING_REGEXP_METHODS.contains(\n                nameNode.getLastChild().getString()))",
      "info" : "IfStatement[29072-29439]:IfStatement[29182-29549]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29228-29439]:Block[29338-29549]"
    }, {
      "left" : "Node param = nameNode.getNext();",
      "right" : "Node param = nameNode.getNext();",
      "info" : "VariableDeclarationStatement[29240-29272]:VariableDeclarationStatement[29350-29382]"
    }, {
      "left" : "if (param != null &&\n              (param.getType() == Token.STRING\n                  || param.getType() == Token.REGEXP))",
      "right" : "if (param != null &&\n              (param.getType() == Token.STRING\n                  || param.getType() == Token.REGEXP))",
      "info" : "IfStatement[29283-29429]:IfStatement[29393-29539]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[29416-29429]:ReturnStatement[29526-29539]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[29459-29471]:ReturnStatement[29569-29581]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29583-29712]:Block[29693-29822]"
    }, {
      "left" : "Preconditions.checkState(n.getType() == Token.CALL);",
      "right" : "Preconditions.checkState(n.getType() == Token.CALL);",
      "info" : "ExpressionStatement[29589-29641]:ExpressionStatement[29699-29751]"
    }, {
      "left" : "return (n.getSideEffectFlags() & Node.FLAG_LOCAL_RESULTS) > 0;",
      "right" : "return (n.getSideEffectFlags() & Node.FLAG_LOCAL_RESULTS) > 0;",
      "info" : "ReturnStatement[29646-29708]:ReturnStatement[29756-29818]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29818-29918]:Block[29928-30028]"
    }, {
      "left" : "Preconditions.checkState(n.getType() == Token.NEW);",
      "right" : "Preconditions.checkState(n.getType() == Token.NEW);",
      "info" : "ExpressionStatement[29824-29875]:ExpressionStatement[29934-29985]"
    }, {
      "left" : "return n.isOnlyModifiesThisCall();",
      "right" : "return n.isOnlyModifiesThisCall();",
      "info" : "ReturnStatement[29880-29914]:ReturnStatement[29990-30024]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30241-30294]:Block[30351-30404]"
    }, {
      "left" : "return nodeTypeMayHaveSideEffects(n, null);",
      "right" : "return nodeTypeMayHaveSideEffects(n, null);",
      "info" : "ReturnStatement[30247-30290]:ReturnStatement[30357-30400]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30375-30886]:Block[30485-30996]"
    }, {
      "left" : "if (isAssignmentOp(n))",
      "right" : "if (isAssignmentOp(n))",
      "info" : "IfStatement[30381-30430]:IfStatement[30491-30540]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30404-30430]:Block[30514-30540]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[30412-30424]:ReturnStatement[30522-30534]"
    }, {
      "left" : "switch(n.getType()) {\n      case Token.DELPROP:\n      case Token.DEC:\n      case Token.INC:\n      case Token.THROW:\n        return true;\n      case Token.CALL:\n        return NodeUtil.functionCallHasSideEffects(n, compiler);\n      case Token.NEW:\n        return NodeUtil.constructorCallHasSideEffects(n, compiler);\n      case Token.NAME:\n        // A variable definition.\n        return n.hasChildren();\n      default:\n        return false;\n    }",
      "right" : "switch(n.getType()) {\n      case Token.DELPROP:\n      case Token.DEC:\n      case Token.INC:\n      case Token.THROW:\n        return true;\n      case Token.CALL:\n        return NodeUtil.functionCallHasSideEffects(n, compiler);\n      case Token.NEW:\n        return NodeUtil.constructorCallHasSideEffects(n, compiler);\n      case Token.NAME:\n        // A variable definition.\n        return n.hasChildren();\n      default:\n        return false;\n    }",
      "info" : "SwitchStatement[30436-30882]:SwitchStatement[30546-30992]"
    }, {
      "left" : "case Token.DELPROP:",
      "right" : "case Token.DELPROP:",
      "info" : "SwitchCase[30464-30483]:SwitchCase[30574-30593]"
    }, {
      "left" : "case Token.DEC:",
      "right" : "case Token.DEC:",
      "info" : "SwitchCase[30490-30505]:SwitchCase[30600-30615]"
    }, {
      "left" : "case Token.INC:",
      "right" : "case Token.INC:",
      "info" : "SwitchCase[30512-30527]:SwitchCase[30622-30637]"
    }, {
      "left" : "case Token.THROW:",
      "right" : "case Token.THROW:",
      "info" : "SwitchCase[30534-30551]:SwitchCase[30644-30661]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[30560-30572]:ReturnStatement[30670-30682]"
    }, {
      "left" : "case Token.CALL:",
      "right" : "case Token.CALL:",
      "info" : "SwitchCase[30579-30595]:SwitchCase[30689-30705]"
    }, {
      "left" : "return NodeUtil.functionCallHasSideEffects(n, compiler);",
      "right" : "return NodeUtil.functionCallHasSideEffects(n, compiler);",
      "info" : "ReturnStatement[30604-30660]:ReturnStatement[30714-30770]"
    }, {
      "left" : "case Token.NEW:",
      "right" : "case Token.NEW:",
      "info" : "SwitchCase[30667-30682]:SwitchCase[30777-30792]"
    }, {
      "left" : "return NodeUtil.constructorCallHasSideEffects(n, compiler);",
      "right" : "return NodeUtil.constructorCallHasSideEffects(n, compiler);",
      "info" : "ReturnStatement[30691-30750]:ReturnStatement[30801-30860]"
    }, {
      "left" : "case Token.NAME:",
      "right" : "case Token.NAME:",
      "info" : "SwitchCase[30757-30773]:SwitchCase[30867-30883]"
    }, {
      "left" : "return n.hasChildren();",
      "right" : "return n.hasChildren();",
      "info" : "ReturnStatement[30816-30839]:ReturnStatement[30926-30949]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[30846-30854]:SwitchCase[30956-30964]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[30863-30876]:ReturnStatement[30973-30986]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31031-31130]:Block[31141-31240]"
    }, {
      "left" : "Set<String> emptySet = Collections.emptySet();",
      "right" : "Set<String> emptySet = Collections.emptySet();",
      "info" : "VariableDeclarationStatement[31037-31083]:VariableDeclarationStatement[31147-31193]"
    }, {
      "left" : "return canBeSideEffected(n, emptySet);",
      "right" : "return canBeSideEffected(n, emptySet);",
      "info" : "ReturnStatement[31088-31126]:ReturnStatement[31198-31236]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31450-32469]:Block[31560-32579]"
    }, {
      "left" : "switch (n.getType()) {\n      case Token.CALL:\n      case Token.NEW:\n        // Function calls or constructor can reference changed values.\n        // TODO(johnlenz): Add some mechanism for determining that functions\n        // are unaffected by side effects.\n        return true;\n      case Token.NAME:\n        // Non-constant names values may have been changed.\n        return !isConstantName(n)\n            && !knownConstants.contains(n.getString());\n\n      // Properties on constant NAMEs can still be side-effected.\n      case Token.GETPROP:\n      case Token.GETELEM:\n        return true;\n\n      case Token.FUNCTION:\n        // Function expression are not changed by side-effects,\n        // and function declarations are not part of expressions.\n        Preconditions.checkState(isFunctionExpression(n));\n        return false;\n    }",
      "right" : "switch (n.getType()) {\n      case Token.CALL:\n      case Token.NEW:\n        // Function calls or constructor can reference changed values.\n        // TODO(johnlenz): Add some mechanism for determining that functions\n        // are unaffected by side effects.\n        return true;\n      case Token.NAME:\n        // Non-constant names values may have been changed.\n        return !isConstantName(n)\n            && !knownConstants.contains(n.getString());\n\n      // Properties on constant NAMEs can still be side-effected.\n      case Token.GETPROP:\n      case Token.GETELEM:\n        return true;\n\n      case Token.FUNCTION:\n        // Function expression are not changed by side-effects,\n        // and function declarations are not part of expressions.\n        Preconditions.checkState(isFunctionExpression(n));\n        return false;\n    }",
      "info" : "SwitchStatement[31456-32293]:SwitchStatement[31566-32403]"
    }, {
      "left" : "case Token.CALL:",
      "right" : "case Token.CALL:",
      "info" : "SwitchCase[31485-31501]:SwitchCase[31595-31611]"
    }, {
      "left" : "case Token.NEW:",
      "right" : "case Token.NEW:",
      "info" : "SwitchCase[31508-31523]:SwitchCase[31618-31633]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[31723-31735]:ReturnStatement[31833-31845]"
    }, {
      "left" : "case Token.NAME:",
      "right" : "case Token.NAME:",
      "info" : "SwitchCase[31742-31758]:SwitchCase[31852-31868]"
    }, {
      "left" : "return !isConstantName(n)\n            && !knownConstants.contains(n.getString());",
      "right" : "return !isConstantName(n)\n            && !knownConstants.contains(n.getString());",
      "info" : "ReturnStatement[31827-31908]:ReturnStatement[31937-32018]"
    }, {
      "left" : "case Token.GETPROP:",
      "right" : "case Token.GETPROP:",
      "info" : "SwitchCase[31982-32001]:SwitchCase[32092-32111]"
    }, {
      "left" : "case Token.GETELEM:",
      "right" : "case Token.GETELEM:",
      "info" : "SwitchCase[32008-32027]:SwitchCase[32118-32137]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[32036-32048]:ReturnStatement[32146-32158]"
    }, {
      "left" : "case Token.FUNCTION:",
      "right" : "case Token.FUNCTION:",
      "info" : "SwitchCase[32056-32076]:SwitchCase[32166-32186]"
    }, {
      "left" : "Preconditions.checkState(isFunctionExpression(n));",
      "right" : "Preconditions.checkState(isFunctionExpression(n));",
      "info" : "ExpressionStatement[32215-32265]:ExpressionStatement[32325-32375]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[32274-32287]:ReturnStatement[32384-32397]"
    }, {
      "left" : "for (Node c = n.getFirstChild(); c != null; c = c.getNext())",
      "right" : "for (Node c = n.getFirstChild(); c != null; c = c.getNext())",
      "info" : "ForStatement[32299-32446]:ForStatement[32409-32556]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32360-32446]:Block[32470-32556]"
    }, {
      "left" : "if (canBeSideEffected(c, knownConstants))",
      "right" : "if (canBeSideEffected(c, knownConstants))",
      "info" : "IfStatement[32368-32440]:IfStatement[32478-32550]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32410-32440]:Block[32520-32550]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[32420-32432]:ReturnStatement[32530-32542]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[32452-32465]:ReturnStatement[32562-32575]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32938-34936]:Block[33048-35046]"
    }, {
      "left" : "switch (type) {\n      case Token.COMMA:  return 0;\n      case Token.ASSIGN_BITOR:\n      case Token.ASSIGN_BITXOR:\n      case Token.ASSIGN_BITAND:\n      case Token.ASSIGN_LSH:\n      case Token.ASSIGN_RSH:\n      case Token.ASSIGN_URSH:\n      case Token.ASSIGN_ADD:\n      case Token.ASSIGN_SUB:\n      case Token.ASSIGN_MUL:\n      case Token.ASSIGN_DIV:\n      case Token.ASSIGN_MOD:\n      case Token.ASSIGN: return 1;\n      case Token.HOOK:   return 2;  // ?: operator\n      case Token.OR:     return 3;\n      case Token.AND:    return 4;\n      case Token.BITOR:  return 5;\n      case Token.BITXOR: return 6;\n      case Token.BITAND: return 7;\n      case Token.EQ:\n      case Token.NE:\n      case Token.SHEQ:\n      case Token.SHNE:   return 8;\n      case Token.LT:\n      case Token.GT:\n      case Token.LE:\n      case Token.GE:\n      case Token.INSTANCEOF:\n      case Token.IN:     return 9;\n      case Token.LSH:\n      case Token.RSH:\n      case Token.URSH:   return 10;\n      case Token.SUB:\n      case Token.ADD:    return 11;\n      case Token.MUL:\n      case Token.MOD:\n      case Token.DIV:    return 12;\n      case Token.INC:\n      case Token.DEC:\n      case Token.NEW:\n      case Token.DELPROP:\n      case Token.TYPEOF:\n      case Token.VOID:\n      case Token.NOT:\n      case Token.BITNOT:\n      case Token.POS:\n      case Token.NEG:    return 13;\n\n      case Token.ARRAYLIT:\n      case Token.CALL:\n      case Token.EMPTY:\n      case Token.FALSE:\n      case Token.FUNCTION:\n      case Token.GETELEM:\n      case Token.GETPROP:\n      case Token.GET_REF:\n      case Token.IF:\n      case Token.LP:\n      case Token.NAME:\n      case Token.NULL:\n      case Token.NUMBER:\n      case Token.OBJECTLIT:\n      case Token.REGEXP:\n      case Token.STRING:\n      case Token.THIS:\n      case Token.TRUE:\n        return 15;\n\n      default: throw new Error(\"Unknown precedence for \" +\n                               Node.tokenToName(type) +\n                               \" (type \" + type + \")\");\n    }",
      "right" : "switch (type) {\n      case Token.COMMA:  return 0;\n      case Token.ASSIGN_BITOR:\n      case Token.ASSIGN_BITXOR:\n      case Token.ASSIGN_BITAND:\n      case Token.ASSIGN_LSH:\n      case Token.ASSIGN_RSH:\n      case Token.ASSIGN_URSH:\n      case Token.ASSIGN_ADD:\n      case Token.ASSIGN_SUB:\n      case Token.ASSIGN_MUL:\n      case Token.ASSIGN_DIV:\n      case Token.ASSIGN_MOD:\n      case Token.ASSIGN: return 1;\n      case Token.HOOK:   return 2;  // ?: operator\n      case Token.OR:     return 3;\n      case Token.AND:    return 4;\n      case Token.BITOR:  return 5;\n      case Token.BITXOR: return 6;\n      case Token.BITAND: return 7;\n      case Token.EQ:\n      case Token.NE:\n      case Token.SHEQ:\n      case Token.SHNE:   return 8;\n      case Token.LT:\n      case Token.GT:\n      case Token.LE:\n      case Token.GE:\n      case Token.INSTANCEOF:\n      case Token.IN:     return 9;\n      case Token.LSH:\n      case Token.RSH:\n      case Token.URSH:   return 10;\n      case Token.SUB:\n      case Token.ADD:    return 11;\n      case Token.MUL:\n      case Token.MOD:\n      case Token.DIV:    return 12;\n      case Token.INC:\n      case Token.DEC:\n      case Token.NEW:\n      case Token.DELPROP:\n      case Token.TYPEOF:\n      case Token.VOID:\n      case Token.NOT:\n      case Token.BITNOT:\n      case Token.POS:\n      case Token.NEG:    return 13;\n\n      case Token.ARRAYLIT:\n      case Token.CALL:\n      case Token.EMPTY:\n      case Token.FALSE:\n      case Token.FUNCTION:\n      case Token.GETELEM:\n      case Token.GETPROP:\n      case Token.GET_REF:\n      case Token.IF:\n      case Token.LP:\n      case Token.NAME:\n      case Token.NULL:\n      case Token.NUMBER:\n      case Token.OBJECTLIT:\n      case Token.REGEXP:\n      case Token.STRING:\n      case Token.THIS:\n      case Token.TRUE:\n        return 15;\n\n      default: throw new Error(\"Unknown precedence for \" +\n                               Node.tokenToName(type) +\n                               \" (type \" + type + \")\");\n    }",
      "info" : "SwitchStatement[32944-34932]:SwitchStatement[33054-35042]"
    }, {
      "left" : "case Token.COMMA:",
      "right" : "case Token.COMMA:",
      "info" : "SwitchCase[32966-32983]:SwitchCase[33076-33093]"
    }, {
      "left" : "return 0;",
      "right" : "return 0;",
      "info" : "ReturnStatement[32985-32994]:ReturnStatement[33095-33104]"
    }, {
      "left" : "case Token.ASSIGN_BITOR:",
      "right" : "case Token.ASSIGN_BITOR:",
      "info" : "SwitchCase[33001-33025]:SwitchCase[33111-33135]"
    }, {
      "left" : "case Token.ASSIGN_BITXOR:",
      "right" : "case Token.ASSIGN_BITXOR:",
      "info" : "SwitchCase[33032-33057]:SwitchCase[33142-33167]"
    }, {
      "left" : "case Token.ASSIGN_BITAND:",
      "right" : "case Token.ASSIGN_BITAND:",
      "info" : "SwitchCase[33064-33089]:SwitchCase[33174-33199]"
    }, {
      "left" : "case Token.ASSIGN_LSH:",
      "right" : "case Token.ASSIGN_LSH:",
      "info" : "SwitchCase[33096-33118]:SwitchCase[33206-33228]"
    }, {
      "left" : "case Token.ASSIGN_RSH:",
      "right" : "case Token.ASSIGN_RSH:",
      "info" : "SwitchCase[33125-33147]:SwitchCase[33235-33257]"
    }, {
      "left" : "case Token.ASSIGN_URSH:",
      "right" : "case Token.ASSIGN_URSH:",
      "info" : "SwitchCase[33154-33177]:SwitchCase[33264-33287]"
    }, {
      "left" : "case Token.ASSIGN_ADD:",
      "right" : "case Token.ASSIGN_ADD:",
      "info" : "SwitchCase[33184-33206]:SwitchCase[33294-33316]"
    }, {
      "left" : "case Token.ASSIGN_SUB:",
      "right" : "case Token.ASSIGN_SUB:",
      "info" : "SwitchCase[33213-33235]:SwitchCase[33323-33345]"
    }, {
      "left" : "case Token.ASSIGN_MUL:",
      "right" : "case Token.ASSIGN_MUL:",
      "info" : "SwitchCase[33242-33264]:SwitchCase[33352-33374]"
    }, {
      "left" : "case Token.ASSIGN_DIV:",
      "right" : "case Token.ASSIGN_DIV:",
      "info" : "SwitchCase[33271-33293]:SwitchCase[33381-33403]"
    }, {
      "left" : "case Token.ASSIGN_MOD:",
      "right" : "case Token.ASSIGN_MOD:",
      "info" : "SwitchCase[33300-33322]:SwitchCase[33410-33432]"
    }, {
      "left" : "case Token.ASSIGN:",
      "right" : "case Token.ASSIGN:",
      "info" : "SwitchCase[33329-33347]:SwitchCase[33439-33457]"
    }, {
      "left" : "return 1;",
      "right" : "return 1;",
      "info" : "ReturnStatement[33348-33357]:ReturnStatement[33458-33467]"
    }, {
      "left" : "case Token.HOOK:",
      "right" : "case Token.HOOK:",
      "info" : "SwitchCase[33364-33380]:SwitchCase[33474-33490]"
    }, {
      "left" : "return 2;",
      "right" : "return 2;",
      "info" : "ReturnStatement[33383-33392]:ReturnStatement[33493-33502]"
    }, {
      "left" : "case Token.OR:",
      "right" : "case Token.OR:",
      "info" : "SwitchCase[33415-33429]:SwitchCase[33525-33539]"
    }, {
      "left" : "return 3;",
      "right" : "return 3;",
      "info" : "ReturnStatement[33434-33443]:ReturnStatement[33544-33553]"
    }, {
      "left" : "case Token.AND:",
      "right" : "case Token.AND:",
      "info" : "SwitchCase[33450-33465]:SwitchCase[33560-33575]"
    }, {
      "left" : "return 4;",
      "right" : "return 4;",
      "info" : "ReturnStatement[33469-33478]:ReturnStatement[33579-33588]"
    }, {
      "left" : "case Token.BITOR:",
      "right" : "case Token.BITOR:",
      "info" : "SwitchCase[33485-33502]:SwitchCase[33595-33612]"
    }, {
      "left" : "return 5;",
      "right" : "return 5;",
      "info" : "ReturnStatement[33504-33513]:ReturnStatement[33614-33623]"
    }, {
      "left" : "case Token.BITXOR:",
      "right" : "case Token.BITXOR:",
      "info" : "SwitchCase[33520-33538]:SwitchCase[33630-33648]"
    }, {
      "left" : "return 6;",
      "right" : "return 6;",
      "info" : "ReturnStatement[33539-33548]:ReturnStatement[33649-33658]"
    }, {
      "left" : "case Token.BITAND:",
      "right" : "case Token.BITAND:",
      "info" : "SwitchCase[33555-33573]:SwitchCase[33665-33683]"
    }, {
      "left" : "return 7;",
      "right" : "return 7;",
      "info" : "ReturnStatement[33574-33583]:ReturnStatement[33684-33693]"
    }, {
      "left" : "case Token.EQ:",
      "right" : "case Token.EQ:",
      "info" : "SwitchCase[33590-33604]:SwitchCase[33700-33714]"
    }, {
      "left" : "case Token.NE:",
      "right" : "case Token.NE:",
      "info" : "SwitchCase[33611-33625]:SwitchCase[33721-33735]"
    }, {
      "left" : "case Token.SHEQ:",
      "right" : "case Token.SHEQ:",
      "info" : "SwitchCase[33632-33648]:SwitchCase[33742-33758]"
    }, {
      "left" : "case Token.SHNE:",
      "right" : "case Token.SHNE:",
      "info" : "SwitchCase[33655-33671]:SwitchCase[33765-33781]"
    }, {
      "left" : "return 8;",
      "right" : "return 8;",
      "info" : "ReturnStatement[33674-33683]:ReturnStatement[33784-33793]"
    }, {
      "left" : "case Token.LT:",
      "right" : "case Token.LT:",
      "info" : "SwitchCase[33690-33704]:SwitchCase[33800-33814]"
    }, {
      "left" : "case Token.GT:",
      "right" : "case Token.GT:",
      "info" : "SwitchCase[33711-33725]:SwitchCase[33821-33835]"
    }, {
      "left" : "case Token.LE:",
      "right" : "case Token.LE:",
      "info" : "SwitchCase[33732-33746]:SwitchCase[33842-33856]"
    }, {
      "left" : "case Token.GE:",
      "right" : "case Token.GE:",
      "info" : "SwitchCase[33753-33767]:SwitchCase[33863-33877]"
    }, {
      "left" : "case Token.INSTANCEOF:",
      "right" : "case Token.INSTANCEOF:",
      "info" : "SwitchCase[33774-33796]:SwitchCase[33884-33906]"
    }, {
      "left" : "case Token.IN:",
      "right" : "case Token.IN:",
      "info" : "SwitchCase[33803-33817]:SwitchCase[33913-33927]"
    }, {
      "left" : "return 9;",
      "right" : "return 9;",
      "info" : "ReturnStatement[33822-33831]:ReturnStatement[33932-33941]"
    }, {
      "left" : "case Token.LSH:",
      "right" : "case Token.LSH:",
      "info" : "SwitchCase[33838-33853]:SwitchCase[33948-33963]"
    }, {
      "left" : "case Token.RSH:",
      "right" : "case Token.RSH:",
      "info" : "SwitchCase[33860-33875]:SwitchCase[33970-33985]"
    }, {
      "left" : "case Token.URSH:",
      "right" : "case Token.URSH:",
      "info" : "SwitchCase[33882-33898]:SwitchCase[33992-34008]"
    }, {
      "left" : "return 10;",
      "right" : "return 10;",
      "info" : "ReturnStatement[33901-33911]:ReturnStatement[34011-34021]"
    }, {
      "left" : "case Token.SUB:",
      "right" : "case Token.SUB:",
      "info" : "SwitchCase[33918-33933]:SwitchCase[34028-34043]"
    }, {
      "left" : "case Token.ADD:",
      "right" : "case Token.ADD:",
      "info" : "SwitchCase[33940-33955]:SwitchCase[34050-34065]"
    }, {
      "left" : "return 11;",
      "right" : "return 11;",
      "info" : "ReturnStatement[33959-33969]:ReturnStatement[34069-34079]"
    }, {
      "left" : "case Token.MUL:",
      "right" : "case Token.MUL:",
      "info" : "SwitchCase[33976-33991]:SwitchCase[34086-34101]"
    }, {
      "left" : "case Token.MOD:",
      "right" : "case Token.MOD:",
      "info" : "SwitchCase[33998-34013]:SwitchCase[34108-34123]"
    }, {
      "left" : "case Token.DIV:",
      "right" : "case Token.DIV:",
      "info" : "SwitchCase[34020-34035]:SwitchCase[34130-34145]"
    }, {
      "left" : "return 12;",
      "right" : "return 12;",
      "info" : "ReturnStatement[34039-34049]:ReturnStatement[34149-34159]"
    }, {
      "left" : "case Token.INC:",
      "right" : "case Token.INC:",
      "info" : "SwitchCase[34056-34071]:SwitchCase[34166-34181]"
    }, {
      "left" : "case Token.DEC:",
      "right" : "case Token.DEC:",
      "info" : "SwitchCase[34078-34093]:SwitchCase[34188-34203]"
    }, {
      "left" : "case Token.NEW:",
      "right" : "case Token.NEW:",
      "info" : "SwitchCase[34100-34115]:SwitchCase[34210-34225]"
    }, {
      "left" : "case Token.DELPROP:",
      "right" : "case Token.DELPROP:",
      "info" : "SwitchCase[34122-34141]:SwitchCase[34232-34251]"
    }, {
      "left" : "case Token.TYPEOF:",
      "right" : "case Token.TYPEOF:",
      "info" : "SwitchCase[34148-34166]:SwitchCase[34258-34276]"
    }, {
      "left" : "case Token.VOID:",
      "right" : "case Token.VOID:",
      "info" : "SwitchCase[34173-34189]:SwitchCase[34283-34299]"
    }, {
      "left" : "case Token.NOT:",
      "right" : "case Token.NOT:",
      "info" : "SwitchCase[34196-34211]:SwitchCase[34306-34321]"
    }, {
      "left" : "case Token.BITNOT:",
      "right" : "case Token.BITNOT:",
      "info" : "SwitchCase[34218-34236]:SwitchCase[34328-34346]"
    }, {
      "left" : "case Token.POS:",
      "right" : "case Token.POS:",
      "info" : "SwitchCase[34243-34258]:SwitchCase[34353-34368]"
    }, {
      "left" : "case Token.NEG:",
      "right" : "case Token.NEG:",
      "info" : "SwitchCase[34265-34280]:SwitchCase[34375-34390]"
    }, {
      "left" : "return 13;",
      "right" : "return 13;",
      "info" : "ReturnStatement[34284-34294]:ReturnStatement[34394-34404]"
    }, {
      "left" : "case Token.ARRAYLIT:",
      "right" : "case Token.ARRAYLIT:",
      "info" : "SwitchCase[34302-34322]:SwitchCase[34412-34432]"
    }, {
      "left" : "case Token.CALL:",
      "right" : "case Token.CALL:",
      "info" : "SwitchCase[34329-34345]:SwitchCase[34439-34455]"
    }, {
      "left" : "case Token.EMPTY:",
      "right" : "case Token.EMPTY:",
      "info" : "SwitchCase[34352-34369]:SwitchCase[34462-34479]"
    }, {
      "left" : "case Token.FALSE:",
      "right" : "case Token.FALSE:",
      "info" : "SwitchCase[34376-34393]:SwitchCase[34486-34503]"
    }, {
      "left" : "case Token.FUNCTION:",
      "right" : "case Token.FUNCTION:",
      "info" : "SwitchCase[34400-34420]:SwitchCase[34510-34530]"
    }, {
      "left" : "case Token.GETELEM:",
      "right" : "case Token.GETELEM:",
      "info" : "SwitchCase[34427-34446]:SwitchCase[34537-34556]"
    }, {
      "left" : "case Token.GETPROP:",
      "right" : "case Token.GETPROP:",
      "info" : "SwitchCase[34453-34472]:SwitchCase[34563-34582]"
    }, {
      "left" : "case Token.GET_REF:",
      "right" : "case Token.GET_REF:",
      "info" : "SwitchCase[34479-34498]:SwitchCase[34589-34608]"
    }, {
      "left" : "case Token.IF:",
      "right" : "case Token.IF:",
      "info" : "SwitchCase[34505-34519]:SwitchCase[34615-34629]"
    }, {
      "left" : "case Token.LP:",
      "right" : "case Token.LP:",
      "info" : "SwitchCase[34526-34540]:SwitchCase[34636-34650]"
    }, {
      "left" : "case Token.NAME:",
      "right" : "case Token.NAME:",
      "info" : "SwitchCase[34547-34563]:SwitchCase[34657-34673]"
    }, {
      "left" : "case Token.NULL:",
      "right" : "case Token.NULL:",
      "info" : "SwitchCase[34570-34586]:SwitchCase[34680-34696]"
    }, {
      "left" : "case Token.NUMBER:",
      "right" : "case Token.NUMBER:",
      "info" : "SwitchCase[34593-34611]:SwitchCase[34703-34721]"
    }, {
      "left" : "case Token.OBJECTLIT:",
      "right" : "case Token.OBJECTLIT:",
      "info" : "SwitchCase[34618-34639]:SwitchCase[34728-34749]"
    }, {
      "left" : "case Token.REGEXP:",
      "right" : "case Token.REGEXP:",
      "info" : "SwitchCase[34646-34664]:SwitchCase[34756-34774]"
    }, {
      "left" : "case Token.STRING:",
      "right" : "case Token.STRING:",
      "info" : "SwitchCase[34671-34689]:SwitchCase[34781-34799]"
    }, {
      "left" : "case Token.THIS:",
      "right" : "case Token.THIS:",
      "info" : "SwitchCase[34696-34712]:SwitchCase[34806-34822]"
    }, {
      "left" : "case Token.TRUE:",
      "right" : "case Token.TRUE:",
      "info" : "SwitchCase[34719-34735]:SwitchCase[34829-34845]"
    }, {
      "left" : "return 15;",
      "right" : "return 15;",
      "info" : "ReturnStatement[34744-34754]:ReturnStatement[34854-34864]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[34762-34770]:SwitchCase[34872-34880]"
    }, {
      "left" : "throw new Error(\"Unknown precedence for \" +\n                               Node.tokenToName(type) +\n                               \" (type \" + type + \")\");",
      "right" : "throw new Error(\"Unknown precedence for \" +\n                               Node.tokenToName(type) +\n                               \" (type \" + type + \")\");",
      "info" : "ThrowStatement[34771-34926]:ThrowStatement[34881-35036]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35105-35550]:Block[35215-35660]"
    }, {
      "left" : "switch (n.getType()) {\n      case Token.ASSIGN:\n      case Token.COMMA:\n        return valueCheck(n.getLastChild(), p);\n      case Token.AND:\n      case Token.OR:\n        return valueCheck(n.getFirstChild(), p)\n            && valueCheck(n.getLastChild(), p);\n      case Token.HOOK:\n        return valueCheck(n.getFirstChild().getNext(), p)\n            && valueCheck(n.getLastChild(), p);\n      default:\n        return p.apply(n);\n    }",
      "right" : "switch (n.getType()) {\n      case Token.ASSIGN:\n      case Token.COMMA:\n        return valueCheck(n.getLastChild(), p);\n      case Token.AND:\n      case Token.OR:\n        return valueCheck(n.getFirstChild(), p)\n            && valueCheck(n.getLastChild(), p);\n      case Token.HOOK:\n        return valueCheck(n.getFirstChild().getNext(), p)\n            && valueCheck(n.getLastChild(), p);\n      default:\n        return p.apply(n);\n    }",
      "info" : "SwitchStatement[35111-35546]:SwitchStatement[35221-35656]"
    }, {
      "left" : "case Token.ASSIGN:",
      "right" : "case Token.ASSIGN:",
      "info" : "SwitchCase[35140-35158]:SwitchCase[35250-35268]"
    }, {
      "left" : "case Token.COMMA:",
      "right" : "case Token.COMMA:",
      "info" : "SwitchCase[35165-35182]:SwitchCase[35275-35292]"
    }, {
      "left" : "return valueCheck(n.getLastChild(), p);",
      "right" : "return valueCheck(n.getLastChild(), p);",
      "info" : "ReturnStatement[35191-35230]:ReturnStatement[35301-35340]"
    }, {
      "left" : "case Token.AND:",
      "right" : "case Token.AND:",
      "info" : "SwitchCase[35237-35252]:SwitchCase[35347-35362]"
    }, {
      "left" : "case Token.OR:",
      "right" : "case Token.OR:",
      "info" : "SwitchCase[35259-35273]:SwitchCase[35369-35383]"
    }, {
      "left" : "return valueCheck(n.getFirstChild(), p)\n            && valueCheck(n.getLastChild(), p);",
      "right" : "return valueCheck(n.getFirstChild(), p)\n            && valueCheck(n.getLastChild(), p);",
      "info" : "ReturnStatement[35282-35369]:ReturnStatement[35392-35479]"
    }, {
      "left" : "case Token.HOOK:",
      "right" : "case Token.HOOK:",
      "info" : "SwitchCase[35376-35392]:SwitchCase[35486-35502]"
    }, {
      "left" : "return valueCheck(n.getFirstChild().getNext(), p)\n            && valueCheck(n.getLastChild(), p);",
      "right" : "return valueCheck(n.getFirstChild().getNext(), p)\n            && valueCheck(n.getLastChild(), p);",
      "info" : "ReturnStatement[35401-35498]:ReturnStatement[35511-35608]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[35505-35513]:SwitchCase[35615-35623]"
    }, {
      "left" : "return p.apply(n);",
      "right" : "return p.apply(n);",
      "info" : "ReturnStatement[35522-35540]:ReturnStatement[35632-35650]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35653-35699]:Block[35763-35809]"
    }, {
      "left" : "return isNumericResultHelper(n);",
      "right" : "return isNumericResultHelper(n);",
      "info" : "ReturnStatement[35661-35693]:ReturnStatement[35771-35803]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35933-35991]:Block[36043-36101]"
    }, {
      "left" : "return valueCheck(n, NUMBERIC_RESULT_PREDICATE);",
      "right" : "return valueCheck(n, NUMBERIC_RESULT_PREDICATE);",
      "info" : "ReturnStatement[35939-35987]:ReturnStatement[36049-36097]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36040-36840]:Block[36150-36950]"
    }, {
      "left" : "switch (n.getType()) {\n      case Token.ADD:\n        return !mayBeString(n.getFirstChild())\n            && !mayBeString(n.getLastChild());\n      case Token.BITNOT:\n      case Token.BITOR:\n      case Token.BITXOR:\n      case Token.BITAND:\n      case Token.LSH:\n      case Token.RSH:\n      case Token.URSH:\n      case Token.SUB:\n      case Token.MUL:\n      case Token.MOD:\n      case Token.DIV:\n      case Token.INC:\n      case Token.DEC:\n      case Token.POS:\n      case Token.NEG:\n      case Token.NUMBER:\n        return true;\n      case Token.NAME:\n        String name = n.getString();\n        if (name.equals(\"NaN\")) {\n          return true;\n        }\n        if (name.equals(\"Infinity\")) {\n          return true;\n        }\n        return false;\n      default:\n        return false;\n    }",
      "right" : "switch (n.getType()) {\n      case Token.ADD:\n        return !mayBeString(n.getFirstChild())\n            && !mayBeString(n.getLastChild());\n      case Token.BITNOT:\n      case Token.BITOR:\n      case Token.BITXOR:\n      case Token.BITAND:\n      case Token.LSH:\n      case Token.RSH:\n      case Token.URSH:\n      case Token.SUB:\n      case Token.MUL:\n      case Token.MOD:\n      case Token.DIV:\n      case Token.INC:\n      case Token.DEC:\n      case Token.POS:\n      case Token.NEG:\n      case Token.NUMBER:\n        return true;\n      case Token.NAME:\n        String name = n.getString();\n        if (name.equals(\"NaN\")) {\n          return true;\n        }\n        if (name.equals(\"Infinity\")) {\n          return true;\n        }\n        return false;\n      default:\n        return false;\n    }",
      "info" : "SwitchStatement[36046-36836]:SwitchStatement[36156-36946]"
    }, {
      "left" : "case Token.ADD:",
      "right" : "case Token.ADD:",
      "info" : "SwitchCase[36075-36090]:SwitchCase[36185-36200]"
    }, {
      "left" : "return !mayBeString(n.getFirstChild())\n            && !mayBeString(n.getLastChild());",
      "right" : "return !mayBeString(n.getFirstChild())\n            && !mayBeString(n.getLastChild());",
      "info" : "ReturnStatement[36099-36184]:ReturnStatement[36209-36294]"
    }, {
      "left" : "case Token.BITNOT:",
      "right" : "case Token.BITNOT:",
      "info" : "SwitchCase[36191-36209]:SwitchCase[36301-36319]"
    }, {
      "left" : "case Token.BITOR:",
      "right" : "case Token.BITOR:",
      "info" : "SwitchCase[36216-36233]:SwitchCase[36326-36343]"
    }, {
      "left" : "case Token.BITXOR:",
      "right" : "case Token.BITXOR:",
      "info" : "SwitchCase[36240-36258]:SwitchCase[36350-36368]"
    }, {
      "left" : "case Token.BITAND:",
      "right" : "case Token.BITAND:",
      "info" : "SwitchCase[36265-36283]:SwitchCase[36375-36393]"
    }, {
      "left" : "case Token.LSH:",
      "right" : "case Token.LSH:",
      "info" : "SwitchCase[36290-36305]:SwitchCase[36400-36415]"
    }, {
      "left" : "case Token.RSH:",
      "right" : "case Token.RSH:",
      "info" : "SwitchCase[36312-36327]:SwitchCase[36422-36437]"
    }, {
      "left" : "case Token.URSH:",
      "right" : "case Token.URSH:",
      "info" : "SwitchCase[36334-36350]:SwitchCase[36444-36460]"
    }, {
      "left" : "case Token.SUB:",
      "right" : "case Token.SUB:",
      "info" : "SwitchCase[36357-36372]:SwitchCase[36467-36482]"
    }, {
      "left" : "case Token.MUL:",
      "right" : "case Token.MUL:",
      "info" : "SwitchCase[36379-36394]:SwitchCase[36489-36504]"
    }, {
      "left" : "case Token.MOD:",
      "right" : "case Token.MOD:",
      "info" : "SwitchCase[36401-36416]:SwitchCase[36511-36526]"
    }, {
      "left" : "case Token.DIV:",
      "right" : "case Token.DIV:",
      "info" : "SwitchCase[36423-36438]:SwitchCase[36533-36548]"
    }, {
      "left" : "case Token.INC:",
      "right" : "case Token.INC:",
      "info" : "SwitchCase[36445-36460]:SwitchCase[36555-36570]"
    }, {
      "left" : "case Token.DEC:",
      "right" : "case Token.DEC:",
      "info" : "SwitchCase[36467-36482]:SwitchCase[36577-36592]"
    }, {
      "left" : "case Token.POS:",
      "right" : "case Token.POS:",
      "info" : "SwitchCase[36489-36504]:SwitchCase[36599-36614]"
    }, {
      "left" : "case Token.NEG:",
      "right" : "case Token.NEG:",
      "info" : "SwitchCase[36511-36526]:SwitchCase[36621-36636]"
    }, {
      "left" : "case Token.NUMBER:",
      "right" : "case Token.NUMBER:",
      "info" : "SwitchCase[36533-36551]:SwitchCase[36643-36661]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[36560-36572]:ReturnStatement[36670-36682]"
    }, {
      "left" : "case Token.NAME:",
      "right" : "case Token.NAME:",
      "info" : "SwitchCase[36579-36595]:SwitchCase[36689-36705]"
    }, {
      "left" : "String name = n.getString();",
      "right" : "String name = n.getString();",
      "info" : "VariableDeclarationStatement[36604-36632]:VariableDeclarationStatement[36714-36742]"
    }, {
      "left" : "if (name.equals(\"NaN\"))",
      "right" : "if (name.equals(\"NaN\"))",
      "info" : "IfStatement[36641-36699]:IfStatement[36751-36809]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36665-36699]:Block[36775-36809]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[36677-36689]:ReturnStatement[36787-36799]"
    }, {
      "left" : "if (name.equals(\"Infinity\"))",
      "right" : "if (name.equals(\"Infinity\"))",
      "info" : "IfStatement[36708-36771]:IfStatement[36818-36881]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36737-36771]:Block[36847-36881]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[36749-36761]:ReturnStatement[36859-36871]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[36780-36793]:ReturnStatement[36890-36903]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[36800-36808]:SwitchCase[36910-36918]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[36817-36830]:ReturnStatement[36927-36940]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36942-36988]:Block[37052-37098]"
    }, {
      "left" : "return isBooleanResultHelper(n);",
      "right" : "return isBooleanResultHelper(n);",
      "info" : "ReturnStatement[36950-36982]:ReturnStatement[37060-37092]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37220-37277]:Block[37330-37387]"
    }, {
      "left" : "return valueCheck(n, BOOLEAN_RESULT_PREDICATE);",
      "right" : "return valueCheck(n, BOOLEAN_RESULT_PREDICATE);",
      "info" : "ReturnStatement[37226-37273]:ReturnStatement[37336-37383]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37326-37861]:Block[37436-37971]"
    }, {
      "left" : "switch (n.getType()) {\n      // Primitives\n      case Token.TRUE:\n      case Token.FALSE:\n      // Comparisons\n      case Token.EQ:\n      case Token.NE:\n      case Token.SHEQ:\n      case Token.SHNE:\n      case Token.LT:\n      case Token.GT:\n      case Token.LE:\n      case Token.GE:\n      // Queryies\n      case Token.IN:\n      case Token.INSTANCEOF:\n      // Inversion\n      case Token.NOT:\n      // delete operator returns a boolean.\n      case Token.DELPROP:\n        return true;\n      default:\n        return false;\n    }",
      "right" : "switch (n.getType()) {\n      // Primitives\n      case Token.TRUE:\n      case Token.FALSE:\n      // Comparisons\n      case Token.EQ:\n      case Token.NE:\n      case Token.SHEQ:\n      case Token.SHNE:\n      case Token.LT:\n      case Token.GT:\n      case Token.LE:\n      case Token.GE:\n      // Queryies\n      case Token.IN:\n      case Token.INSTANCEOF:\n      // Inversion\n      case Token.NOT:\n      // delete operator returns a boolean.\n      case Token.DELPROP:\n        return true;\n      default:\n        return false;\n    }",
      "info" : "SwitchStatement[37332-37857]:SwitchStatement[37442-37967]"
    }, {
      "left" : "case Token.TRUE:",
      "right" : "case Token.TRUE:",
      "info" : "SwitchCase[37381-37397]:SwitchCase[37491-37507]"
    }, {
      "left" : "case Token.FALSE:",
      "right" : "case Token.FALSE:",
      "info" : "SwitchCase[37404-37421]:SwitchCase[37514-37531]"
    }, {
      "left" : "case Token.EQ:",
      "right" : "case Token.EQ:",
      "info" : "SwitchCase[37449-37463]:SwitchCase[37559-37573]"
    }, {
      "left" : "case Token.NE:",
      "right" : "case Token.NE:",
      "info" : "SwitchCase[37470-37484]:SwitchCase[37580-37594]"
    }, {
      "left" : "case Token.SHEQ:",
      "right" : "case Token.SHEQ:",
      "info" : "SwitchCase[37491-37507]:SwitchCase[37601-37617]"
    }, {
      "left" : "case Token.SHNE:",
      "right" : "case Token.SHNE:",
      "info" : "SwitchCase[37514-37530]:SwitchCase[37624-37640]"
    }, {
      "left" : "case Token.LT:",
      "right" : "case Token.LT:",
      "info" : "SwitchCase[37537-37551]:SwitchCase[37647-37661]"
    }, {
      "left" : "case Token.GT:",
      "right" : "case Token.GT:",
      "info" : "SwitchCase[37558-37572]:SwitchCase[37668-37682]"
    }, {
      "left" : "case Token.LE:",
      "right" : "case Token.LE:",
      "info" : "SwitchCase[37579-37593]:SwitchCase[37689-37703]"
    }, {
      "left" : "case Token.GE:",
      "right" : "case Token.GE:",
      "info" : "SwitchCase[37600-37614]:SwitchCase[37710-37724]"
    }, {
      "left" : "case Token.IN:",
      "right" : "case Token.IN:",
      "info" : "SwitchCase[37639-37653]:SwitchCase[37749-37763]"
    }, {
      "left" : "case Token.INSTANCEOF:",
      "right" : "case Token.INSTANCEOF:",
      "info" : "SwitchCase[37660-37682]:SwitchCase[37770-37792]"
    }, {
      "left" : "case Token.NOT:",
      "right" : "case Token.NOT:",
      "info" : "SwitchCase[37708-37723]:SwitchCase[37818-37833]"
    }, {
      "left" : "case Token.DELPROP:",
      "right" : "case Token.DELPROP:",
      "info" : "SwitchCase[37774-37793]:SwitchCase[37884-37903]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[37802-37814]:ReturnStatement[37912-37924]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[37821-37829]:SwitchCase[37931-37939]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[37838-37851]:ReturnStatement[37948-37961]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37900-38073]:Block[38010-38183]"
    }, {
      "left" : "switch (n.getType()) {\n      case Token.VOID:\n        return true;\n      case Token.NAME:\n        return n.getString().equals(\"undefined\");\n    }",
      "right" : "switch (n.getType()) {\n      case Token.VOID:\n        return true;\n      case Token.NAME:\n        return n.getString().equals(\"undefined\");\n    }",
      "info" : "SwitchStatement[37906-38051]:SwitchStatement[38016-38161]"
    }, {
      "left" : "case Token.VOID:",
      "right" : "case Token.VOID:",
      "info" : "SwitchCase[37935-37951]:SwitchCase[38045-38061]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[37960-37972]:ReturnStatement[38070-38082]"
    }, {
      "left" : "case Token.NAME:",
      "right" : "case Token.NAME:",
      "info" : "SwitchCase[37979-37995]:SwitchCase[38089-38105]"
    }, {
      "left" : "return n.getString().equals(\"undefined\");",
      "right" : "return n.getString().equals(\"undefined\");",
      "info" : "ReturnStatement[38004-38045]:ReturnStatement[38114-38155]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[38056-38069]:ReturnStatement[38166-38179]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38107-38150]:Block[38217-38260]"
    }, {
      "left" : "return n.getType() == Token.NULL;",
      "right" : "return n.getType() == Token.NULL;",
      "info" : "ReturnStatement[38113-38146]:ReturnStatement[38223-38256]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38195-38240]:Block[38305-38350]"
    }, {
      "left" : "return isNull(n) || isUndefined(n);",
      "right" : "return isNull(n) || isUndefined(n);",
      "info" : "ReturnStatement[38201-38236]:ReturnStatement[38311-38346]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38346-38388]:Block[38456-38498]"
    }, {
      "left" : "return mayBeStringHelper(n);",
      "right" : "return mayBeStringHelper(n);",
      "info" : "ReturnStatement[38354-38382]:ReturnStatement[38464-38492]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38608-38646]:Block[38718-38756]"
    }, {
      "left" : "return mayBeString(n, true);",
      "right" : "return mayBeString(n, true);",
      "info" : "ReturnStatement[38614-38642]:ReturnStatement[38724-38752]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38702-38833]:Block[38812-38943]"
    }, {
      "left" : "if (recurse)",
      "right" : "if (recurse)",
      "info" : "IfStatement[38708-38829]:IfStatement[38818-38939]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38721-38781]:Block[38831-38891]"
    }, {
      "left" : "return valueCheck(n, MAY_BE_STRING_PREDICATE);",
      "right" : "return valueCheck(n, MAY_BE_STRING_PREDICATE);",
      "info" : "ReturnStatement[38729-38775]:ReturnStatement[38839-38885]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38787-38829]:Block[38897-38939]"
    }, {
      "left" : "return mayBeStringHelper(n);",
      "right" : "return mayBeStringHelper(n);",
      "info" : "ReturnStatement[38795-38823]:ReturnStatement[38905-38933]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38878-38979]:Block[38988-39089]"
    }, {
      "left" : "return !isNumericResult(n) && !isBooleanResult(n)\n        && !isUndefined(n) && !isNull(n);",
      "right" : "return !isNumericResult(n) && !isBooleanResult(n)\n        && !isUndefined(n) && !isNull(n);",
      "info" : "ReturnStatement[38884-38975]:ReturnStatement[38994-39085]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39247-39475]:Block[39357-39585]"
    }, {
      "left" : "switch (type) {\n      case Token.MUL:\n      case Token.AND:\n      case Token.OR:\n      case Token.BITOR:\n      case Token.BITXOR:\n      case Token.BITAND:\n        return true;\n      default:\n        return false;\n    }",
      "right" : "switch (type) {\n      case Token.MUL:\n      case Token.AND:\n      case Token.OR:\n      case Token.BITOR:\n      case Token.BITXOR:\n      case Token.BITAND:\n        return true;\n      default:\n        return false;\n    }",
      "info" : "SwitchStatement[39253-39471]:SwitchStatement[39363-39581]"
    }, {
      "left" : "case Token.MUL:",
      "right" : "case Token.MUL:",
      "info" : "SwitchCase[39275-39290]:SwitchCase[39385-39400]"
    }, {
      "left" : "case Token.AND:",
      "right" : "case Token.AND:",
      "info" : "SwitchCase[39297-39312]:SwitchCase[39407-39422]"
    }, {
      "left" : "case Token.OR:",
      "right" : "case Token.OR:",
      "info" : "SwitchCase[39319-39333]:SwitchCase[39429-39443]"
    }, {
      "left" : "case Token.BITOR:",
      "right" : "case Token.BITOR:",
      "info" : "SwitchCase[39340-39357]:SwitchCase[39450-39467]"
    }, {
      "left" : "case Token.BITXOR:",
      "right" : "case Token.BITXOR:",
      "info" : "SwitchCase[39364-39382]:SwitchCase[39474-39492]"
    }, {
      "left" : "case Token.BITAND:",
      "right" : "case Token.BITAND:",
      "info" : "SwitchCase[39389-39407]:SwitchCase[39499-39517]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[39416-39428]:ReturnStatement[39526-39538]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[39435-39443]:SwitchCase[39545-39553]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[39452-39465]:ReturnStatement[39562-39575]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39822-40007]:Block[39932-40117]"
    }, {
      "left" : "switch (type) {\n      case Token.MUL:\n      case Token.BITOR:\n      case Token.BITXOR:\n      case Token.BITAND:\n        return true;\n      default:\n        return false;\n    }",
      "right" : "switch (type) {\n      case Token.MUL:\n      case Token.BITOR:\n      case Token.BITXOR:\n      case Token.BITAND:\n        return true;\n      default:\n        return false;\n    }",
      "info" : "SwitchStatement[39828-40003]:SwitchStatement[39938-40113]"
    }, {
      "left" : "case Token.MUL:",
      "right" : "case Token.MUL:",
      "info" : "SwitchCase[39850-39865]:SwitchCase[39960-39975]"
    }, {
      "left" : "case Token.BITOR:",
      "right" : "case Token.BITOR:",
      "info" : "SwitchCase[39872-39889]:SwitchCase[39982-39999]"
    }, {
      "left" : "case Token.BITXOR:",
      "right" : "case Token.BITXOR:",
      "info" : "SwitchCase[39896-39914]:SwitchCase[40006-40024]"
    }, {
      "left" : "case Token.BITAND:",
      "right" : "case Token.BITAND:",
      "info" : "SwitchCase[39921-39939]:SwitchCase[40031-40049]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[39948-39960]:ReturnStatement[40058-40070]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[39967-39975]:SwitchCase[40077-40085]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[39984-39997]:ReturnStatement[40094-40107]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40049-40478]:Block[40159-40588]"
    }, {
      "left" : "switch (n.getType()){\n      case Token.ASSIGN:\n      case Token.ASSIGN_BITOR:\n      case Token.ASSIGN_BITXOR:\n      case Token.ASSIGN_BITAND:\n      case Token.ASSIGN_LSH:\n      case Token.ASSIGN_RSH:\n      case Token.ASSIGN_URSH:\n      case Token.ASSIGN_ADD:\n      case Token.ASSIGN_SUB:\n      case Token.ASSIGN_MUL:\n      case Token.ASSIGN_DIV:\n      case Token.ASSIGN_MOD:\n        return true;\n    }",
      "right" : "switch (n.getType()){\n      case Token.ASSIGN:\n      case Token.ASSIGN_BITOR:\n      case Token.ASSIGN_BITXOR:\n      case Token.ASSIGN_BITAND:\n      case Token.ASSIGN_LSH:\n      case Token.ASSIGN_RSH:\n      case Token.ASSIGN_URSH:\n      case Token.ASSIGN_ADD:\n      case Token.ASSIGN_SUB:\n      case Token.ASSIGN_MUL:\n      case Token.ASSIGN_DIV:\n      case Token.ASSIGN_MOD:\n        return true;\n    }",
      "info" : "SwitchStatement[40055-40456]:SwitchStatement[40165-40566]"
    }, {
      "left" : "case Token.ASSIGN:",
      "right" : "case Token.ASSIGN:",
      "info" : "SwitchCase[40083-40101]:SwitchCase[40193-40211]"
    }, {
      "left" : "case Token.ASSIGN_BITOR:",
      "right" : "case Token.ASSIGN_BITOR:",
      "info" : "SwitchCase[40108-40132]:SwitchCase[40218-40242]"
    }, {
      "left" : "case Token.ASSIGN_BITXOR:",
      "right" : "case Token.ASSIGN_BITXOR:",
      "info" : "SwitchCase[40139-40164]:SwitchCase[40249-40274]"
    }, {
      "left" : "case Token.ASSIGN_BITAND:",
      "right" : "case Token.ASSIGN_BITAND:",
      "info" : "SwitchCase[40171-40196]:SwitchCase[40281-40306]"
    }, {
      "left" : "case Token.ASSIGN_LSH:",
      "right" : "case Token.ASSIGN_LSH:",
      "info" : "SwitchCase[40203-40225]:SwitchCase[40313-40335]"
    }, {
      "left" : "case Token.ASSIGN_RSH:",
      "right" : "case Token.ASSIGN_RSH:",
      "info" : "SwitchCase[40232-40254]:SwitchCase[40342-40364]"
    }, {
      "left" : "case Token.ASSIGN_URSH:",
      "right" : "case Token.ASSIGN_URSH:",
      "info" : "SwitchCase[40261-40284]:SwitchCase[40371-40394]"
    }, {
      "left" : "case Token.ASSIGN_ADD:",
      "right" : "case Token.ASSIGN_ADD:",
      "info" : "SwitchCase[40291-40313]:SwitchCase[40401-40423]"
    }, {
      "left" : "case Token.ASSIGN_SUB:",
      "right" : "case Token.ASSIGN_SUB:",
      "info" : "SwitchCase[40320-40342]:SwitchCase[40430-40452]"
    }, {
      "left" : "case Token.ASSIGN_MUL:",
      "right" : "case Token.ASSIGN_MUL:",
      "info" : "SwitchCase[40349-40371]:SwitchCase[40459-40481]"
    }, {
      "left" : "case Token.ASSIGN_DIV:",
      "right" : "case Token.ASSIGN_DIV:",
      "info" : "SwitchCase[40378-40400]:SwitchCase[40488-40510]"
    }, {
      "left" : "case Token.ASSIGN_MOD:",
      "right" : "case Token.ASSIGN_MOD:",
      "info" : "SwitchCase[40407-40429]:SwitchCase[40517-40539]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[40438-40450]:ReturnStatement[40548-40560]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[40461-40474]:ReturnStatement[40571-40584]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40523-41245]:Block[40633-41355]"
    }, {
      "left" : "switch (n.getType()){\n      case Token.ASSIGN_BITOR:\n        return Token.BITOR;\n      case Token.ASSIGN_BITXOR:\n        return Token.BITXOR;\n      case Token.ASSIGN_BITAND:\n        return Token.BITAND;\n      case Token.ASSIGN_LSH:\n        return Token.LSH;\n      case Token.ASSIGN_RSH:\n        return Token.RSH;\n      case Token.ASSIGN_URSH:\n        return Token.URSH;\n      case Token.ASSIGN_ADD:\n        return Token.ADD;\n      case Token.ASSIGN_SUB:\n        return Token.SUB;\n      case Token.ASSIGN_MUL:\n        return Token.MUL;\n      case Token.ASSIGN_DIV:\n        return Token.DIV;\n      case Token.ASSIGN_MOD:\n        return Token.MOD;\n    }",
      "right" : "switch (n.getType()){\n      case Token.ASSIGN_BITOR:\n        return Token.BITOR;\n      case Token.ASSIGN_BITXOR:\n        return Token.BITXOR;\n      case Token.ASSIGN_BITAND:\n        return Token.BITAND;\n      case Token.ASSIGN_LSH:\n        return Token.LSH;\n      case Token.ASSIGN_RSH:\n        return Token.RSH;\n      case Token.ASSIGN_URSH:\n        return Token.URSH;\n      case Token.ASSIGN_ADD:\n        return Token.ADD;\n      case Token.ASSIGN_SUB:\n        return Token.SUB;\n      case Token.ASSIGN_MUL:\n        return Token.MUL;\n      case Token.ASSIGN_DIV:\n        return Token.DIV;\n      case Token.ASSIGN_MOD:\n        return Token.MOD;\n    }",
      "info" : "SwitchStatement[40529-41179]:SwitchStatement[40639-41289]"
    }, {
      "left" : "case Token.ASSIGN_BITOR:",
      "right" : "case Token.ASSIGN_BITOR:",
      "info" : "SwitchCase[40557-40581]:SwitchCase[40667-40691]"
    }, {
      "left" : "return Token.BITOR;",
      "right" : "return Token.BITOR;",
      "info" : "ReturnStatement[40590-40609]:ReturnStatement[40700-40719]"
    }, {
      "left" : "case Token.ASSIGN_BITXOR:",
      "right" : "case Token.ASSIGN_BITXOR:",
      "info" : "SwitchCase[40616-40641]:SwitchCase[40726-40751]"
    }, {
      "left" : "return Token.BITXOR;",
      "right" : "return Token.BITXOR;",
      "info" : "ReturnStatement[40650-40670]:ReturnStatement[40760-40780]"
    }, {
      "left" : "case Token.ASSIGN_BITAND:",
      "right" : "case Token.ASSIGN_BITAND:",
      "info" : "SwitchCase[40677-40702]:SwitchCase[40787-40812]"
    }, {
      "left" : "return Token.BITAND;",
      "right" : "return Token.BITAND;",
      "info" : "ReturnStatement[40711-40731]:ReturnStatement[40821-40841]"
    }, {
      "left" : "case Token.ASSIGN_LSH:",
      "right" : "case Token.ASSIGN_LSH:",
      "info" : "SwitchCase[40738-40760]:SwitchCase[40848-40870]"
    }, {
      "left" : "return Token.LSH;",
      "right" : "return Token.LSH;",
      "info" : "ReturnStatement[40769-40786]:ReturnStatement[40879-40896]"
    }, {
      "left" : "case Token.ASSIGN_RSH:",
      "right" : "case Token.ASSIGN_RSH:",
      "info" : "SwitchCase[40793-40815]:SwitchCase[40903-40925]"
    }, {
      "left" : "return Token.RSH;",
      "right" : "return Token.RSH;",
      "info" : "ReturnStatement[40824-40841]:ReturnStatement[40934-40951]"
    }, {
      "left" : "case Token.ASSIGN_URSH:",
      "right" : "case Token.ASSIGN_URSH:",
      "info" : "SwitchCase[40848-40871]:SwitchCase[40958-40981]"
    }, {
      "left" : "return Token.URSH;",
      "right" : "return Token.URSH;",
      "info" : "ReturnStatement[40880-40898]:ReturnStatement[40990-41008]"
    }, {
      "left" : "case Token.ASSIGN_ADD:",
      "right" : "case Token.ASSIGN_ADD:",
      "info" : "SwitchCase[40905-40927]:SwitchCase[41015-41037]"
    }, {
      "left" : "return Token.ADD;",
      "right" : "return Token.ADD;",
      "info" : "ReturnStatement[40936-40953]:ReturnStatement[41046-41063]"
    }, {
      "left" : "case Token.ASSIGN_SUB:",
      "right" : "case Token.ASSIGN_SUB:",
      "info" : "SwitchCase[40960-40982]:SwitchCase[41070-41092]"
    }, {
      "left" : "return Token.SUB;",
      "right" : "return Token.SUB;",
      "info" : "ReturnStatement[40991-41008]:ReturnStatement[41101-41118]"
    }, {
      "left" : "case Token.ASSIGN_MUL:",
      "right" : "case Token.ASSIGN_MUL:",
      "info" : "SwitchCase[41015-41037]:SwitchCase[41125-41147]"
    }, {
      "left" : "return Token.MUL;",
      "right" : "return Token.MUL;",
      "info" : "ReturnStatement[41046-41063]:ReturnStatement[41156-41173]"
    }, {
      "left" : "case Token.ASSIGN_DIV:",
      "right" : "case Token.ASSIGN_DIV:",
      "info" : "SwitchCase[41070-41092]:SwitchCase[41180-41202]"
    }, {
      "left" : "return Token.DIV;",
      "right" : "return Token.DIV;",
      "info" : "ReturnStatement[41101-41118]:ReturnStatement[41211-41228]"
    }, {
      "left" : "case Token.ASSIGN_MOD:",
      "right" : "case Token.ASSIGN_MOD:",
      "info" : "SwitchCase[41125-41147]:SwitchCase[41235-41257]"
    }, {
      "left" : "return Token.MOD;",
      "right" : "return Token.MOD;",
      "info" : "ReturnStatement[41156-41173]:ReturnStatement[41266-41283]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Not an assiment op\");",
      "right" : "throw new IllegalArgumentException(\"Not an assiment op\");",
      "info" : "ThrowStatement[41184-41241]:ThrowStatement[41294-41351]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41289-41339]:Block[41399-41449]"
    }, {
      "left" : "return n.getType() == Token.EXPR_RESULT;",
      "right" : "return n.getType() == Token.EXPR_RESULT;",
      "info" : "ReturnStatement[41295-41335]:ReturnStatement[41405-41445]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41488-41537]:Block[41598-41647]"
    }, {
      "left" : "return containsType(n, Token.FUNCTION);",
      "right" : "return containsType(n, Token.FUNCTION);",
      "info" : "ReturnStatement[41494-41533]:ReturnStatement[41604-41643]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41668-41737]:Block[41778-41847]"
    }, {
      "left" : "return containsType(n, Token.THIS, new MatchNotFunction());",
      "right" : "return containsType(n, Token.THIS, new MatchNotFunction());",
      "info" : "ReturnStatement[41674-41733]:ReturnStatement[41784-41843]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41822-41908]:Block[41932-42018]"
    }, {
      "left" : "return n.getType() == Token.GETPROP\n        || n.getType() == Token.GETELEM;",
      "right" : "return n.getType() == Token.GETPROP\n        || n.getType() == Token.GETELEM;",
      "info" : "ReturnStatement[41828-41904]:ReturnStatement[41938-42014]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41986-42032]:Block[42096-42142]"
    }, {
      "left" : "return n.getType() == Token.GETPROP;",
      "right" : "return n.getType() == Token.GETPROP;",
      "info" : "ReturnStatement[41992-42028]:ReturnStatement[42102-42138]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42104-42147]:Block[42214-42257]"
    }, {
      "left" : "return n.getType() == Token.NAME;",
      "right" : "return n.getType() == Token.NAME;",
      "info" : "ReturnStatement[42110-42143]:ReturnStatement[42220-42253]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42217-42259]:Block[42327-42369]"
    }, {
      "left" : "return n.getType() == Token.NEW;",
      "right" : "return n.getType() == Token.NEW;",
      "info" : "ReturnStatement[42223-42255]:ReturnStatement[42333-42365]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42329-42371]:Block[42439-42481]"
    }, {
      "left" : "return n.getType() == Token.VAR;",
      "right" : "return n.getType() == Token.VAR;",
      "info" : "ReturnStatement[42335-42367]:ReturnStatement[42445-42477]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42577-42784]:Block[42687-42894]"
    }, {
      "left" : "return n.getType() == Token.NAME && n.getParent().getType() == Token.VAR;",
      "right" : "return n.getType() == Token.NAME && n.getParent().getType() == Token.VAR;",
      "info" : "ReturnStatement[42707-42780]:ReturnStatement[42817-42890]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42964-43230]:Block[43074-43340]"
    }, {
      "left" : "Preconditions.checkState(isName(n));",
      "right" : "Preconditions.checkState(isName(n));",
      "info" : "ExpressionStatement[42970-43006]:ExpressionStatement[43080-43116]"
    }, {
      "left" : "Node parent = n.getParent();",
      "right" : "Node parent = n.getParent();",
      "info" : "VariableDeclarationStatement[43011-43039]:VariableDeclarationStatement[43121-43149]"
    }, {
      "left" : "if (isVar(parent))",
      "right" : "if (isVar(parent))",
      "info" : "IfStatement[43044-43226]:IfStatement[43154-43336]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43063-43102]:Block[43173-43212]"
    }, {
      "left" : "return n.getFirstChild();",
      "right" : "return n.getFirstChild();",
      "info" : "ReturnStatement[43071-43096]:ReturnStatement[43181-43206]"
    }, {
      "left" : "if (isAssign(parent) && parent.getFirstChild() == n)",
      "right" : "if (isAssign(parent) && parent.getFirstChild() == n)",
      "info" : "IfStatement[43108-43226]:IfStatement[43218-43336]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43161-43194]:Block[43271-43304]"
    }, {
      "left" : "return n.getNext();",
      "right" : "return n.getNext();",
      "info" : "ReturnStatement[43169-43188]:ReturnStatement[43279-43298]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43200-43226]:Block[43310-43336]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[43208-43220]:ReturnStatement[43318-43330]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43306-43351]:Block[43416-43461]"
    }, {
      "left" : "return n.getType() == Token.STRING;",
      "right" : "return n.getType() == Token.STRING;",
      "info" : "ReturnStatement[43312-43347]:ReturnStatement[43422-43457]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43578-43683]:Block[43688-43793]"
    }, {
      "left" : "return n.getType() == Token.EXPR_RESULT\n        && n.getFirstChild().getType() == Token.ASSIGN;",
      "right" : "return n.getType() == Token.EXPR_RESULT\n        && n.getFirstChild().getType() == Token.ASSIGN;",
      "info" : "ReturnStatement[43584-43679]:ReturnStatement[43694-43789]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43760-43805]:Block[43870-43915]"
    }, {
      "left" : "return n.getType() == Token.ASSIGN;",
      "right" : "return n.getType() == Token.ASSIGN;",
      "info" : "ReturnStatement[43766-43801]:ReturnStatement[43876-43911]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44021-44124]:Block[44131-44234]"
    }, {
      "left" : "return n.getType() == Token.EXPR_RESULT\n        && n.getFirstChild().getType() == Token.CALL;",
      "right" : "return n.getType() == Token.EXPR_RESULT\n        && n.getFirstChild().getType() == Token.CALL;",
      "info" : "ReturnStatement[44027-44120]:ReturnStatement[44137-44230]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44227-44303]:Block[44337-44413]"
    }, {
      "left" : "return n.getType() == Token.FOR\n        && n.getChildCount() == 3;",
      "right" : "return n.getType() == Token.FOR\n        && n.getChildCount() == 3;",
      "info" : "ReturnStatement[44233-44299]:ReturnStatement[44343-44409]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44426-44589]:Block[44536-44699]"
    }, {
      "left" : "switch (n.getType()) {\n      case Token.FOR:\n      case Token.DO:\n      case Token.WHILE:\n        return true;\n      default:\n        return false;\n    }",
      "right" : "switch (n.getType()) {\n      case Token.FOR:\n      case Token.DO:\n      case Token.WHILE:\n        return true;\n      default:\n        return false;\n    }",
      "info" : "SwitchStatement[44432-44585]:SwitchStatement[44542-44695]"
    }, {
      "left" : "case Token.FOR:",
      "right" : "case Token.FOR:",
      "info" : "SwitchCase[44461-44476]:SwitchCase[44571-44586]"
    }, {
      "left" : "case Token.DO:",
      "right" : "case Token.DO:",
      "info" : "SwitchCase[44483-44497]:SwitchCase[44593-44607]"
    }, {
      "left" : "case Token.WHILE:",
      "right" : "case Token.WHILE:",
      "info" : "SwitchCase[44504-44521]:SwitchCase[44614-44631]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[44530-44542]:ReturnStatement[44640-44652]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[44549-44557]:SwitchCase[44659-44667]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[44566-44579]:ReturnStatement[44676-44689]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44788-44996]:Block[44898-45106]"
    }, {
      "left" : "switch (n.getType()) {\n      case Token.FOR:\n      case Token.WHILE:\n        return n.getLastChild();\n      case Token.DO:\n        return n.getFirstChild();\n      default:\n        return null;\n    }",
      "right" : "switch (n.getType()) {\n      case Token.FOR:\n      case Token.WHILE:\n        return n.getLastChild();\n      case Token.DO:\n        return n.getFirstChild();\n      default:\n        return null;\n    }",
      "info" : "SwitchStatement[44794-44992]:SwitchStatement[44904-45102]"
    }, {
      "left" : "case Token.FOR:",
      "right" : "case Token.FOR:",
      "info" : "SwitchCase[44823-44838]:SwitchCase[44933-44948]"
    }, {
      "left" : "case Token.WHILE:",
      "right" : "case Token.WHILE:",
      "info" : "SwitchCase[44845-44862]:SwitchCase[44955-44972]"
    }, {
      "left" : "return n.getLastChild();",
      "right" : "return n.getLastChild();",
      "info" : "ReturnStatement[44871-44895]:ReturnStatement[44981-45005]"
    }, {
      "left" : "case Token.DO:",
      "right" : "case Token.DO:",
      "info" : "SwitchCase[44902-44916]:SwitchCase[45012-45026]"
    }, {
      "left" : "return n.getFirstChild();",
      "right" : "return n.getFirstChild();",
      "info" : "ReturnStatement[44925-44950]:ReturnStatement[45035-45060]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[44957-44965]:SwitchCase[45067-45075]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[44974-44986]:ReturnStatement[45084-45096]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45145-45357]:Block[45255-45467]"
    }, {
      "left" : "for (Node parent : n.getAncestors())",
      "right" : "for (Node parent : n.getAncestors())",
      "info" : "EnhancedForStatement[45151-45335]:EnhancedForStatement[45261-45445]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45188-45335]:Block[45298-45445]"
    }, {
      "left" : "if (NodeUtil.isLoopStructure(parent))",
      "right" : "if (NodeUtil.isLoopStructure(parent))",
      "info" : "IfStatement[45196-45264]:IfStatement[45306-45374]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45234-45264]:Block[45344-45374]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[45244-45256]:ReturnStatement[45354-45366]"
    }, {
      "left" : "if (NodeUtil.isFunction(parent))",
      "right" : "if (NodeUtil.isFunction(parent))",
      "info" : "IfStatement[45272-45329]:IfStatement[45382-45439]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45305-45329]:Block[45415-45439]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[45315-45321]:BreakStatement[45425-45431]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[45340-45353]:ReturnStatement[45450-45463]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45493-45844]:Block[45603-45954]"
    }, {
      "left" : "switch (n.getType()) {\n      case Token.FOR:\n      case Token.DO:\n      case Token.WHILE:\n      case Token.WITH:\n      case Token.IF:\n      case Token.LABEL:\n      case Token.TRY:\n      case Token.CATCH:\n      case Token.SWITCH:\n      case Token.CASE:\n      case Token.DEFAULT:\n        return true;\n      default:\n        return false;\n    }",
      "right" : "switch (n.getType()) {\n      case Token.FOR:\n      case Token.DO:\n      case Token.WHILE:\n      case Token.WITH:\n      case Token.IF:\n      case Token.LABEL:\n      case Token.TRY:\n      case Token.CATCH:\n      case Token.SWITCH:\n      case Token.CASE:\n      case Token.DEFAULT:\n        return true;\n      default:\n        return false;\n    }",
      "info" : "SwitchStatement[45499-45840]:SwitchStatement[45609-45950]"
    }, {
      "left" : "case Token.FOR:",
      "right" : "case Token.FOR:",
      "info" : "SwitchCase[45528-45543]:SwitchCase[45638-45653]"
    }, {
      "left" : "case Token.DO:",
      "right" : "case Token.DO:",
      "info" : "SwitchCase[45550-45564]:SwitchCase[45660-45674]"
    }, {
      "left" : "case Token.WHILE:",
      "right" : "case Token.WHILE:",
      "info" : "SwitchCase[45571-45588]:SwitchCase[45681-45698]"
    }, {
      "left" : "case Token.WITH:",
      "right" : "case Token.WITH:",
      "info" : "SwitchCase[45595-45611]:SwitchCase[45705-45721]"
    }, {
      "left" : "case Token.IF:",
      "right" : "case Token.IF:",
      "info" : "SwitchCase[45618-45632]:SwitchCase[45728-45742]"
    }, {
      "left" : "case Token.LABEL:",
      "right" : "case Token.LABEL:",
      "info" : "SwitchCase[45639-45656]:SwitchCase[45749-45766]"
    }, {
      "left" : "case Token.TRY:",
      "right" : "case Token.TRY:",
      "info" : "SwitchCase[45663-45678]:SwitchCase[45773-45788]"
    }, {
      "left" : "case Token.CATCH:",
      "right" : "case Token.CATCH:",
      "info" : "SwitchCase[45685-45702]:SwitchCase[45795-45812]"
    }, {
      "left" : "case Token.SWITCH:",
      "right" : "case Token.SWITCH:",
      "info" : "SwitchCase[45709-45727]:SwitchCase[45819-45837]"
    }, {
      "left" : "case Token.CASE:",
      "right" : "case Token.CASE:",
      "info" : "SwitchCase[45734-45750]:SwitchCase[45844-45860]"
    }, {
      "left" : "case Token.DEFAULT:",
      "right" : "case Token.DEFAULT:",
      "info" : "SwitchCase[45757-45776]:SwitchCase[45867-45886]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[45785-45797]:ReturnStatement[45895-45907]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[45804-45812]:SwitchCase[45914-45922]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[45821-45834]:ReturnStatement[45931-45944]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46019-46729]:Block[46129-46839]"
    }, {
      "left" : "switch (parent.getType()) {\n      case Token.FOR:\n      case Token.WHILE:\n      case Token.LABEL:\n      case Token.WITH:\n        return parent.getLastChild() == n;\n      case Token.DO:\n        return parent.getFirstChild() == n;\n      case Token.IF:\n        return parent.getFirstChild() != n;\n      case Token.TRY:\n        return parent.getFirstChild() == n || parent.getLastChild() == n;\n      case Token.CATCH:\n        return parent.getLastChild() == n;\n      case Token.SWITCH:\n      case Token.CASE:\n        return parent.getFirstChild() != n;\n      case Token.DEFAULT:\n        return true;\n      default:\n        Preconditions.checkState(isControlStructure(parent));\n        return false;\n    }",
      "right" : "switch (parent.getType()) {\n      case Token.FOR:\n      case Token.WHILE:\n      case Token.LABEL:\n      case Token.WITH:\n        return parent.getLastChild() == n;\n      case Token.DO:\n        return parent.getFirstChild() == n;\n      case Token.IF:\n        return parent.getFirstChild() != n;\n      case Token.TRY:\n        return parent.getFirstChild() == n || parent.getLastChild() == n;\n      case Token.CATCH:\n        return parent.getLastChild() == n;\n      case Token.SWITCH:\n      case Token.CASE:\n        return parent.getFirstChild() != n;\n      case Token.DEFAULT:\n        return true;\n      default:\n        Preconditions.checkState(isControlStructure(parent));\n        return false;\n    }",
      "info" : "SwitchStatement[46025-46725]:SwitchStatement[46135-46835]"
    }, {
      "left" : "case Token.FOR:",
      "right" : "case Token.FOR:",
      "info" : "SwitchCase[46059-46074]:SwitchCase[46169-46184]"
    }, {
      "left" : "case Token.WHILE:",
      "right" : "case Token.WHILE:",
      "info" : "SwitchCase[46081-46098]:SwitchCase[46191-46208]"
    }, {
      "left" : "case Token.LABEL:",
      "right" : "case Token.LABEL:",
      "info" : "SwitchCase[46105-46122]:SwitchCase[46215-46232]"
    }, {
      "left" : "case Token.WITH:",
      "right" : "case Token.WITH:",
      "info" : "SwitchCase[46129-46145]:SwitchCase[46239-46255]"
    }, {
      "left" : "return parent.getLastChild() == n;",
      "right" : "return parent.getLastChild() == n;",
      "info" : "ReturnStatement[46154-46188]:ReturnStatement[46264-46298]"
    }, {
      "left" : "case Token.DO:",
      "right" : "case Token.DO:",
      "info" : "SwitchCase[46195-46209]:SwitchCase[46305-46319]"
    }, {
      "left" : "return parent.getFirstChild() == n;",
      "right" : "return parent.getFirstChild() == n;",
      "info" : "ReturnStatement[46218-46253]:ReturnStatement[46328-46363]"
    }, {
      "left" : "case Token.IF:",
      "right" : "case Token.IF:",
      "info" : "SwitchCase[46260-46274]:SwitchCase[46370-46384]"
    }, {
      "left" : "return parent.getFirstChild() != n;",
      "right" : "return parent.getFirstChild() != n;",
      "info" : "ReturnStatement[46283-46318]:ReturnStatement[46393-46428]"
    }, {
      "left" : "case Token.TRY:",
      "right" : "case Token.TRY:",
      "info" : "SwitchCase[46325-46340]:SwitchCase[46435-46450]"
    }, {
      "left" : "return parent.getFirstChild() == n || parent.getLastChild() == n;",
      "right" : "return parent.getFirstChild() == n || parent.getLastChild() == n;",
      "info" : "ReturnStatement[46349-46414]:ReturnStatement[46459-46524]"
    }, {
      "left" : "case Token.CATCH:",
      "right" : "case Token.CATCH:",
      "info" : "SwitchCase[46421-46438]:SwitchCase[46531-46548]"
    }, {
      "left" : "return parent.getLastChild() == n;",
      "right" : "return parent.getLastChild() == n;",
      "info" : "ReturnStatement[46447-46481]:ReturnStatement[46557-46591]"
    }, {
      "left" : "case Token.SWITCH:",
      "right" : "case Token.SWITCH:",
      "info" : "SwitchCase[46488-46506]:SwitchCase[46598-46616]"
    }, {
      "left" : "case Token.CASE:",
      "right" : "case Token.CASE:",
      "info" : "SwitchCase[46513-46529]:SwitchCase[46623-46639]"
    }, {
      "left" : "return parent.getFirstChild() != n;",
      "right" : "return parent.getFirstChild() != n;",
      "info" : "ReturnStatement[46538-46573]:ReturnStatement[46648-46683]"
    }, {
      "left" : "case Token.DEFAULT:",
      "right" : "case Token.DEFAULT:",
      "info" : "SwitchCase[46580-46599]:SwitchCase[46690-46709]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[46608-46620]:ReturnStatement[46718-46730]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[46627-46635]:SwitchCase[46737-46745]"
    }, {
      "left" : "Preconditions.checkState(isControlStructure(parent));",
      "right" : "Preconditions.checkState(isControlStructure(parent));",
      "info" : "ExpressionStatement[46644-46697]:ExpressionStatement[46754-46807]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[46706-46719]:ReturnStatement[46816-46829]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46987-47533]:Block[47097-47643]"
    }, {
      "left" : "switch (n.getType()) {\n      case Token.IF:\n      case Token.WHILE:\n        return n.getFirstChild();\n      case Token.DO:\n        return n.getLastChild();\n      case Token.FOR:\n        switch (n.getChildCount()) {\n          case 3:\n            return null;\n          case 4:\n            return n.getFirstChild().getNext();\n        }\n        throw new IllegalArgumentException(\"malformed 'for' statement \" + n);\n      case Token.CASE:\n        return null;\n    }",
      "right" : "switch (n.getType()) {\n      case Token.IF:\n      case Token.WHILE:\n        return n.getFirstChild();\n      case Token.DO:\n        return n.getLastChild();\n      case Token.FOR:\n        switch (n.getChildCount()) {\n          case 3:\n            return null;\n          case 4:\n            return n.getFirstChild().getNext();\n        }\n        throw new IllegalArgumentException(\"malformed 'for' statement \" + n);\n      case Token.CASE:\n        return null;\n    }",
      "info" : "SwitchStatement[46993-47454]:SwitchStatement[47103-47564]"
    }, {
      "left" : "case Token.IF:",
      "right" : "case Token.IF:",
      "info" : "SwitchCase[47022-47036]:SwitchCase[47132-47146]"
    }, {
      "left" : "case Token.WHILE:",
      "right" : "case Token.WHILE:",
      "info" : "SwitchCase[47043-47060]:SwitchCase[47153-47170]"
    }, {
      "left" : "return n.getFirstChild();",
      "right" : "return n.getFirstChild();",
      "info" : "ReturnStatement[47069-47094]:ReturnStatement[47179-47204]"
    }, {
      "left" : "case Token.DO:",
      "right" : "case Token.DO:",
      "info" : "SwitchCase[47101-47115]:SwitchCase[47211-47225]"
    }, {
      "left" : "return n.getLastChild();",
      "right" : "return n.getLastChild();",
      "info" : "ReturnStatement[47124-47148]:ReturnStatement[47234-47258]"
    }, {
      "left" : "case Token.FOR:",
      "right" : "case Token.FOR:",
      "info" : "SwitchCase[47155-47170]:SwitchCase[47265-47280]"
    }, {
      "left" : "switch (n.getChildCount()) {\n          case 3:\n            return null;\n          case 4:\n            return n.getFirstChild().getNext();\n        }",
      "right" : "switch (n.getChildCount()) {\n          case 3:\n            return null;\n          case 4:\n            return n.getFirstChild().getNext();\n        }",
      "info" : "SwitchStatement[47179-47326]:SwitchStatement[47289-47436]"
    }, {
      "left" : "case 3:",
      "right" : "case 3:",
      "info" : "SwitchCase[47218-47225]:SwitchCase[47328-47335]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[47238-47250]:ReturnStatement[47348-47360]"
    }, {
      "left" : "case 4:",
      "right" : "case 4:",
      "info" : "SwitchCase[47261-47268]:SwitchCase[47371-47378]"
    }, {
      "left" : "return n.getFirstChild().getNext();",
      "right" : "return n.getFirstChild().getNext();",
      "info" : "ReturnStatement[47281-47316]:ReturnStatement[47391-47426]"
    }, {
      "left" : "throw new IllegalArgumentException(\"malformed 'for' statement \" + n);",
      "right" : "throw new IllegalArgumentException(\"malformed 'for' statement \" + n);",
      "info" : "ThrowStatement[47335-47404]:ThrowStatement[47445-47514]"
    }, {
      "left" : "case Token.CASE:",
      "right" : "case Token.CASE:",
      "info" : "SwitchCase[47411-47427]:SwitchCase[47521-47537]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[47436-47448]:ReturnStatement[47546-47558]"
    }, {
      "left" : "throw new IllegalArgumentException(n + \" does not have a condition.\");",
      "right" : "throw new IllegalArgumentException(n + \" does not have a condition.\");",
      "info" : "ThrowStatement[47459-47529]:ThrowStatement[47569-47639]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47663-47738]:Block[47773-47848]"
    }, {
      "left" : "return n.getType() == Token.SCRIPT || n.getType() == Token.BLOCK;",
      "right" : "return n.getType() == Token.SCRIPT || n.getType() == Token.BLOCK;",
      "info" : "ReturnStatement[47669-47734]:ReturnStatement[47779-47844]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47843-47893]:Block[47953-48003]"
    }, {
      "left" : "return isStatementParent(n.getParent());",
      "right" : "return isStatementParent(n.getParent());",
      "info" : "ReturnStatement[47849-47889]:ReturnStatement[47959-47999]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47943-48358]:Block[48053-48468]"
    }, {
      "left" : "Preconditions.checkState(parent != null);",
      "right" : "Preconditions.checkState(parent != null);",
      "info" : "ExpressionStatement[48144-48185]:ExpressionStatement[48254-48295]"
    }, {
      "left" : "switch (parent.getType()) {\n      case Token.SCRIPT:\n      case Token.BLOCK:\n      case Token.LABEL:\n        return true;\n      default:\n        return false;\n    }",
      "right" : "switch (parent.getType()) {\n      case Token.SCRIPT:\n      case Token.BLOCK:\n      case Token.LABEL:\n        return true;\n      default:\n        return false;\n    }",
      "info" : "SwitchStatement[48190-48354]:SwitchStatement[48300-48464]"
    }, {
      "left" : "case Token.SCRIPT:",
      "right" : "case Token.SCRIPT:",
      "info" : "SwitchCase[48224-48242]:SwitchCase[48334-48352]"
    }, {
      "left" : "case Token.BLOCK:",
      "right" : "case Token.BLOCK:",
      "info" : "SwitchCase[48249-48266]:SwitchCase[48359-48376]"
    }, {
      "left" : "case Token.LABEL:",
      "right" : "case Token.LABEL:",
      "info" : "SwitchCase[48273-48290]:SwitchCase[48383-48400]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[48299-48311]:ReturnStatement[48409-48421]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[48318-48326]:SwitchCase[48428-48436]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[48335-48348]:ReturnStatement[48445-48458]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48455-48530]:Block[48565-48640]"
    }, {
      "left" : "return n.getType() == Token.CASE || n.getType() == Token.DEFAULT;",
      "right" : "return n.getType() == Token.CASE || n.getType() == Token.DEFAULT;",
      "info" : "ReturnStatement[48461-48526]:ReturnStatement[48571-48636]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48738-48793]:Block[48848-48903]"
    }, {
      "left" : "return isName(n) && !n.getString().isEmpty();",
      "right" : "return isName(n) && !n.getString().isEmpty();",
      "info" : "ReturnStatement[48744-48789]:ReturnStatement[48854-48899]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48883-48947]:Block[48993-49057]"
    }, {
      "left" : "return (n != null && n.getType() == Token.LABEL_NAME);",
      "right" : "return (n != null && n.getType() == Token.LABEL_NAME);",
      "info" : "ReturnStatement[48889-48943]:ReturnStatement[48999-49053]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49071-49191]:Block[49181-49301]"
    }, {
      "left" : "return parent.getType() == Token.TRY && parent.getChildCount() == 3\n        && child == parent.getLastChild();",
      "right" : "return parent.getType() == Token.TRY && parent.getChildCount() == 3\n        && child == parent.getLastChild();",
      "info" : "ReturnStatement[49077-49187]:ReturnStatement[49187-49297]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49296-49425]:Block[49406-49535]"
    }, {
      "left" : "Node parent = n.getParent();",
      "right" : "Node parent = n.getParent();",
      "info" : "VariableDeclarationStatement[49302-49330]:VariableDeclarationStatement[49412-49440]"
    }, {
      "left" : "return parent.getType() == Token.TRY\n        && parent.getFirstChild().getNext() == n;",
      "right" : "return parent.getType() == Token.TRY\n        && parent.getFirstChild().getNext() == n;",
      "info" : "ReturnStatement[49335-49421]:ReturnStatement[49445-49531]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49551-51893]:Block[49661-52003]"
    }, {
      "left" : "if (isTryFinallyNode(parent, node))",
      "right" : "if (isTryFinallyNode(parent, node))",
      "info" : "IfStatement[49557-51889]:IfStatement[49667-51999]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49593-49866]:Block[49703-49976]"
    }, {
      "left" : "if (NodeUtil.hasCatchHandler(getCatchBlock(parent)))",
      "right" : "if (NodeUtil.hasCatchHandler(getCatchBlock(parent)))",
      "info" : "IfStatement[49601-49860]:IfStatement[49711-49970]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49654-49759]:Block[49764-49869]"
    }, {
      "left" : "parent.removeChild(node);",
      "right" : "parent.removeChild(node);",
      "info" : "ExpressionStatement[49726-49751]:ExpressionStatement[49836-49861]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49765-49860]:Block[49875-49970]"
    }, {
      "left" : "node.detachChildren();",
      "right" : "node.detachChildren();",
      "info" : "ExpressionStatement[49830-49852]:ExpressionStatement[49940-49962]"
    }, {
      "left" : "if (node.getType() == Token.CATCH)",
      "right" : "if (node.getType() == Token.CATCH)",
      "info" : "IfStatement[49872-51889]:IfStatement[49982-51999]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49907-50131]:Block[50017-50241]"
    }, {
      "left" : "Node tryNode = node.getParent().getParent();",
      "right" : "Node tryNode = node.getParent().getParent();",
      "info" : "VariableDeclarationStatement[49988-50032]:VariableDeclarationStatement[50098-50142]"
    }, {
      "left" : "Preconditions.checkState(NodeUtil.hasFinally(tryNode));",
      "right" : "Preconditions.checkState(NodeUtil.hasFinally(tryNode));",
      "info" : "ExpressionStatement[50039-50094]:ExpressionStatement[50149-50204]"
    }, {
      "left" : "node.detachFromParent();",
      "right" : "node.detachFromParent();",
      "info" : "ExpressionStatement[50101-50125]:ExpressionStatement[50211-50235]"
    }, {
      "left" : "if (isTryCatchNodeContainer(node))",
      "right" : "if (isTryCatchNodeContainer(node))",
      "info" : "IfStatement[50137-51889]:IfStatement[50247-51999]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50172-50430]:Block[50282-50540]"
    }, {
      "left" : "Node tryNode = node.getParent();",
      "right" : "Node tryNode = node.getParent();",
      "info" : "VariableDeclarationStatement[50301-50333]:VariableDeclarationStatement[50411-50443]"
    }, {
      "left" : "Preconditions.checkState(NodeUtil.hasFinally(tryNode));",
      "right" : "Preconditions.checkState(NodeUtil.hasFinally(tryNode));",
      "info" : "ExpressionStatement[50340-50395]:ExpressionStatement[50450-50505]"
    }, {
      "left" : "node.detachChildren();",
      "right" : "node.detachChildren();",
      "info" : "ExpressionStatement[50402-50424]:ExpressionStatement[50512-50534]"
    }, {
      "left" : "if (node.getType() == Token.BLOCK)",
      "right" : "if (node.getType() == Token.BLOCK)",
      "info" : "IfStatement[50436-51889]:IfStatement[50546-51999]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50471-50603]:Block[50581-50713]"
    }, {
      "left" : "node.detachChildren();",
      "right" : "node.detachChildren();",
      "info" : "ExpressionStatement[50575-50597]:ExpressionStatement[50685-50707]"
    }, {
      "left" : "if (isStatementBlock(parent)\n        || isSwitchCase(node))",
      "right" : "if (isStatementBlock(parent)\n        || isSwitchCase(node))",
      "info" : "IfStatement[50609-51889]:IfStatement[50719-51999]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50669-50763]:Block[50779-50873]"
    }, {
      "left" : "parent.removeChild(node);",
      "right" : "parent.removeChild(node);",
      "info" : "ExpressionStatement[50732-50757]:ExpressionStatement[50842-50867]"
    }, {
      "left" : "if (parent.getType() == Token.VAR)",
      "right" : "if (parent.getType() == Token.VAR)",
      "info" : "IfStatement[50769-51889]:IfStatement[50879-51999]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50804-51123]:Block[50914-51233]"
    }, {
      "left" : "if (parent.hasMoreThanOneChild())",
      "right" : "if (parent.hasMoreThanOneChild())",
      "info" : "IfStatement[50812-51117]:IfStatement[50922-51227]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50846-50889]:Block[50956-50999]"
    }, {
      "left" : "parent.removeChild(node);",
      "right" : "parent.removeChild(node);",
      "info" : "ExpressionStatement[50856-50881]:ExpressionStatement[50966-50991]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50895-51117]:Block[51005-51227]"
    }, {
      "left" : "parent.removeChild(node);",
      "right" : "parent.removeChild(node);",
      "info" : "ExpressionStatement[50970-50995]:ExpressionStatement[51080-51105]"
    }, {
      "left" : "removeChild(parent.getParent(), parent);",
      "right" : "removeChild(parent.getParent(), parent);",
      "info" : "ExpressionStatement[51069-51109]:ExpressionStatement[51179-51219]"
    }, {
      "left" : "if (parent.getType() == Token.LABEL\n        && node == parent.getLastChild())",
      "right" : "if (parent.getType() == Token.LABEL\n        && node == parent.getLastChild())",
      "info" : "IfStatement[51129-51889]:IfStatement[51239-51999]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51207-51425]:Block[51317-51535]"
    }, {
      "left" : "parent.removeChild(node);",
      "right" : "parent.removeChild(node);",
      "info" : "ExpressionStatement[51278-51303]:ExpressionStatement[51388-51413]"
    }, {
      "left" : "removeChild(parent.getParent(), parent);",
      "right" : "removeChild(parent.getParent(), parent);",
      "info" : "ExpressionStatement[51379-51419]:ExpressionStatement[51489-51529]"
    }, {
      "left" : "if (parent.getType() == Token.FOR\n        && parent.getChildCount() == 4)",
      "right" : "if (parent.getType() == Token.FOR\n        && parent.getChildCount() == 4)",
      "info" : "IfStatement[51431-51889]:IfStatement[51541-51999]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51505-51745]:Block[51615-51855]"
    }, {
      "left" : "parent.replaceChild(node, new Node(Token.EMPTY));",
      "right" : "parent.replaceChild(node, new Node(Token.EMPTY));",
      "info" : "ExpressionStatement[51690-51739]:ExpressionStatement[51800-51849]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51751-51889]:Block[51861-51999]"
    }, {
      "left" : "throw new IllegalStateException(\"Invalid attempt to remove node: \" +\n          node.toString() + \" of \"+ parent.toString());",
      "right" : "throw new IllegalStateException(\"Invalid attempt to remove node: \" +\n          node.toString() + \" of \"+ parent.toString());",
      "info" : "ThrowStatement[51759-51883]:ThrowStatement[51869-51993]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51999-52209]:Block[52109-52319]"
    }, {
      "left" : "Preconditions.checkState(tryNode.getType() == Token.TRY);",
      "right" : "Preconditions.checkState(tryNode.getType() == Token.TRY);",
      "info" : "ExpressionStatement[52005-52062]:ExpressionStatement[52115-52172]"
    }, {
      "left" : "if (!NodeUtil.hasFinally(tryNode))",
      "right" : "if (!NodeUtil.hasFinally(tryNode))",
      "info" : "IfStatement[52067-52205]:IfStatement[52177-52315]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52102-52205]:Block[52212-52315]"
    }, {
      "left" : "tryNode.addChildrenToBack(new Node(Token.BLOCK)\n          .copyInformationFrom(tryNode));",
      "right" : "tryNode.addChildrenToBack(new Node(Token.BLOCK)\n          .copyInformationFrom(tryNode));",
      "info" : "ExpressionStatement[52110-52199]:ExpressionStatement[52220-52309]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52352-52902]:Block[52462-53012]"
    }, {
      "left" : "Preconditions.checkState(block.getType() == Token.BLOCK);",
      "right" : "Preconditions.checkState(block.getType() == Token.BLOCK);",
      "info" : "ExpressionStatement[52358-52415]:ExpressionStatement[52468-52525]"
    }, {
      "left" : "Node parent = block.getParent();",
      "right" : "Node parent = block.getParent();",
      "info" : "VariableDeclarationStatement[52420-52452]:VariableDeclarationStatement[52530-52562]"
    }, {
      "left" : "if (isStatementBlock(parent))",
      "right" : "if (isStatementBlock(parent))",
      "info" : "IfStatement[52583-52898]:IfStatement[52693-53008]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52613-52865]:Block[52723-52975]"
    }, {
      "left" : "Node previous = block;",
      "right" : "Node previous = block;",
      "info" : "VariableDeclarationStatement[52621-52643]:VariableDeclarationStatement[52731-52753]"
    }, {
      "left" : "while (block.hasChildren())",
      "right" : "while (block.hasChildren())",
      "info" : "WhileStatement[52650-52807]:WhileStatement[52760-52917]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52678-52807]:Block[52788-52917]"
    }, {
      "left" : "Node child = block.removeFirstChild();",
      "right" : "Node child = block.removeFirstChild();",
      "info" : "VariableDeclarationStatement[52688-52726]:VariableDeclarationStatement[52798-52836]"
    }, {
      "left" : "parent.addChildAfter(child, previous);",
      "right" : "parent.addChildAfter(child, previous);",
      "info" : "ExpressionStatement[52735-52773]:ExpressionStatement[52845-52883]"
    }, {
      "left" : "previous = child;",
      "right" : "previous = child;",
      "info" : "ExpressionStatement[52782-52799]:ExpressionStatement[52892-52909]"
    }, {
      "left" : "parent.removeChild(block);",
      "right" : "parent.removeChild(block);",
      "info" : "ExpressionStatement[52814-52840]:ExpressionStatement[52924-52950]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[52847-52859]:ReturnStatement[52957-52969]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52871-52898]:Block[52981-53008]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[52879-52892]:ReturnStatement[52989-53002]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52974-53017]:Block[53084-53127]"
    }, {
      "left" : "return n.getType() == Token.CALL;",
      "right" : "return n.getType() == Token.CALL;",
      "info" : "ReturnStatement[52980-53013]:ReturnStatement[53090-53123]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53148-53211]:Block[53258-53321]"
    }, {
      "left" : "return NodeUtil.isCall(node) || NodeUtil.isNew(node);",
      "right" : "return NodeUtil.isCall(node) || NodeUtil.isNew(node);",
      "info" : "ReturnStatement[53154-53207]:ReturnStatement[53264-53317]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53291-53338]:Block[53401-53448]"
    }, {
      "left" : "return n.getType() == Token.FUNCTION;",
      "right" : "return n.getType() == Token.FUNCTION;",
      "info" : "ReturnStatement[53297-53334]:ReturnStatement[53407-53444]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53445-53529]:Block[53555-53639]"
    }, {
      "left" : "Preconditions.checkArgument(isFunction(fn));",
      "right" : "Preconditions.checkArgument(isFunction(fn));",
      "info" : "ExpressionStatement[53451-53495]:ExpressionStatement[53561-53605]"
    }, {
      "left" : "return fn.getLastChild();",
      "right" : "return fn.getLastChild();",
      "info" : "ReturnStatement[53500-53525]:ReturnStatement[53610-53635]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53604-53650]:Block[53714-53760]"
    }, {
      "left" : "return node.getType() == Token.THIS;",
      "right" : "return node.getType() == Token.THIS;",
      "info" : "ReturnStatement[53610-53646]:ReturnStatement[53720-53756]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53738-53788]:Block[53848-53898]"
    }, {
      "left" : "return node.getType() == Token.ARRAYLIT;",
      "right" : "return node.getType() == Token.ARRAYLIT;",
      "info" : "ReturnStatement[53744-53784]:ReturnStatement[53854-53894]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53889-53934]:Block[53999-54044]"
    }, {
      "left" : "return containsType(n, Token.CALL);",
      "right" : "return containsType(n, Token.CALL);",
      "info" : "ReturnStatement[53895-53930]:ReturnStatement[54005-54040]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54222-54287]:Block[54332-54397]"
    }, {
      "left" : "return n.getType() == Token.FUNCTION && isStatement(n);",
      "right" : "return n.getType() == Token.FUNCTION && isStatement(n);",
      "info" : "ReturnStatement[54228-54283]:ReturnStatement[54338-54393]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54529-54693]:Block[54639-54803]"
    }, {
      "left" : "return isFunctionDeclaration(n)\n        && (n.getParent().getType() == Token.SCRIPT\n            || n.getParent().getParent().getType() == Token.FUNCTION);",
      "right" : "return isFunctionDeclaration(n)\n        && (n.getParent().getType() == Token.SCRIPT\n            || n.getParent().getParent().getType() == Token.FUNCTION);",
      "info" : "ReturnStatement[54535-54689]:ReturnStatement[54645-54799]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55397-55463]:Block[55507-55573]"
    }, {
      "left" : "return n.getType() == Token.FUNCTION && !isStatement(n);",
      "right" : "return n.getType() == Token.FUNCTION && !isStatement(n);",
      "info" : "ReturnStatement[55403-55459]:ReturnStatement[55513-55569]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55710-55791]:Block[55820-55901]"
    }, {
      "left" : "return isFunctionExpression(node) && isEmptyBlock(node.getLastChild());",
      "right" : "return isFunctionExpression(node) && isEmptyBlock(node.getLastChild());",
      "info" : "ReturnStatement[55716-55787]:ReturnStatement[55826-55897]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55989-56165]:Block[56099-56275]"
    }, {
      "left" : "Preconditions.checkArgument(isFunction(function));",
      "right" : "Preconditions.checkArgument(isFunction(function));",
      "info" : "ExpressionStatement[55995-56045]:ExpressionStatement[56105-56155]"
    }, {
      "left" : "return isNameReferenced(\n        function.getLastChild(),\n        \"arguments\",\n        new MatchNotFunction());",
      "right" : "return isNameReferenced(\n        function.getLastChild(),\n        \"arguments\",\n        new MatchNotFunction());",
      "info" : "ReturnStatement[56050-56161]:ReturnStatement[56160-56271]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56337-56772]:Block[56447-56882]"
    }, {
      "left" : "if (callNode.getType() == Token.CALL)",
      "right" : "if (callNode.getType() == Token.CALL)",
      "info" : "IfStatement[56343-56750]:IfStatement[56453-56860]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56381-56750]:Block[56491-56860]"
    }, {
      "left" : "Node functionIndentifyingExpression = callNode.getFirstChild();",
      "right" : "Node functionIndentifyingExpression = callNode.getFirstChild();",
      "info" : "VariableDeclarationStatement[56389-56452]:VariableDeclarationStatement[56499-56562]"
    }, {
      "left" : "if (isGet(functionIndentifyingExpression))",
      "right" : "if (isGet(functionIndentifyingExpression))",
      "info" : "IfStatement[56459-56744]:IfStatement[56569-56854]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56502-56744]:Block[56612-56854]"
    }, {
      "left" : "Node last = functionIndentifyingExpression.getLastChild();",
      "right" : "Node last = functionIndentifyingExpression.getLastChild();",
      "info" : "VariableDeclarationStatement[56512-56570]:VariableDeclarationStatement[56622-56680]"
    }, {
      "left" : "if (last != null && last.getType() == Token.STRING)",
      "right" : "if (last != null && last.getType() == Token.STRING)",
      "info" : "IfStatement[56579-56736]:IfStatement[56689-56846]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56631-56736]:Block[56741-56846]"
    }, {
      "left" : "String propName = last.getString();",
      "right" : "String propName = last.getString();",
      "info" : "VariableDeclarationStatement[56643-56678]:VariableDeclarationStatement[56753-56788]"
    }, {
      "left" : "return (propName.equals(methodName));",
      "right" : "return (propName.equals(methodName));",
      "info" : "ReturnStatement[56689-56726]:ReturnStatement[56799-56836]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[56755-56768]:ReturnStatement[56865-56878]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56958-57012]:Block[57068-57122]"
    }, {
      "left" : "return isObjectCallMethod(callNode, \"call\");",
      "right" : "return isObjectCallMethod(callNode, \"call\");",
      "info" : "ReturnStatement[56964-57008]:ReturnStatement[57074-57118]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57200-57255]:Block[57310-57365]"
    }, {
      "left" : "return isObjectCallMethod(callNode, \"apply\");",
      "right" : "return isObjectCallMethod(callNode, \"apply\");",
      "info" : "ReturnStatement[57206-57251]:ReturnStatement[57316-57361]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57501-57584]:Block[57611-57694]"
    }, {
      "left" : "return isFunctionObjectCall(callNode) || isFunctionObjectApply(callNode);",
      "right" : "return isFunctionObjectCall(callNode) || isFunctionObjectApply(callNode);",
      "info" : "ReturnStatement[57507-57580]:ReturnStatement[57617-57690]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57804-57983]:Block[57914-58093]"
    }, {
      "left" : "if (isFunctionObjectCall(callNode))",
      "right" : "if (isFunctionObjectCall(callNode))",
      "info" : "IfStatement[57810-57960]:IfStatement[57920-58070]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57846-57960]:Block[57956-58070]"
    }, {
      "left" : "if (callNode.getFirstChild().getFirstChild().getType() == Token.NAME)",
      "right" : "if (callNode.getFirstChild().getFirstChild().getType() == Token.NAME)",
      "info" : "IfStatement[57854-57954]:IfStatement[57964-58064]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57924-57954]:Block[58034-58064]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[57934-57946]:ReturnStatement[58044-58056]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[57966-57979]:ReturnStatement[58076-58089]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58378-58505]:Block[58488-58615]"
    }, {
      "left" : "return (parent.getType() == Token.ASSIGN && parent.getFirstChild() == n) ||\n           parent.getType() == Token.VAR;",
      "right" : "return (parent.getType() == Token.ASSIGN && parent.getFirstChild() == n) ||\n           parent.getType() == Token.VAR;",
      "info" : "ReturnStatement[58384-58501]:ReturnStatement[58494-58611]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58755-58981]:Block[58865-59091]"
    }, {
      "left" : "switch (node.getType()) {\n      case Token.NUMBER:\n      case Token.STRING:\n        return parent.getType() == Token.OBJECTLIT;\n      case Token.GET:\n      case Token.SET:\n        return true;\n    }",
      "right" : "switch (node.getType()) {\n      case Token.NUMBER:\n      case Token.STRING:\n        return parent.getType() == Token.OBJECTLIT;\n      case Token.GET:\n      case Token.SET:\n        return true;\n    }",
      "info" : "SwitchStatement[58761-58959]:SwitchStatement[58871-59069]"
    }, {
      "left" : "case Token.NUMBER:",
      "right" : "case Token.NUMBER:",
      "info" : "SwitchCase[58793-58811]:SwitchCase[58903-58921]"
    }, {
      "left" : "case Token.STRING:",
      "right" : "case Token.STRING:",
      "info" : "SwitchCase[58818-58836]:SwitchCase[58928-58946]"
    }, {
      "left" : "return parent.getType() == Token.OBJECTLIT;",
      "right" : "return parent.getType() == Token.OBJECTLIT;",
      "info" : "ReturnStatement[58845-58888]:ReturnStatement[58955-58998]"
    }, {
      "left" : "case Token.GET:",
      "right" : "case Token.GET:",
      "info" : "SwitchCase[58895-58910]:SwitchCase[59005-59020]"
    }, {
      "left" : "case Token.SET:",
      "right" : "case Token.SET:",
      "info" : "SwitchCase[58917-58932]:SwitchCase[59027-59042]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[58941-58953]:ReturnStatement[59051-59063]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[58964-58977]:ReturnStatement[59074-59087]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[59113-59393]:Block[59223-59503]"
    }, {
      "left" : "switch (key.getType()) {\n      case Token.NUMBER:\n        return NodeUtil.getStringValue(key);\n      case Token.STRING:\n      case Token.GET:\n      case Token.SET:\n        return key.getString();\n    }",
      "right" : "switch (key.getType()) {\n      case Token.NUMBER:\n        return NodeUtil.getStringValue(key);\n      case Token.STRING:\n      case Token.GET:\n      case Token.SET:\n        return key.getString();\n    }",
      "info" : "SwitchStatement[59119-59320]:SwitchStatement[59229-59430]"
    }, {
      "left" : "case Token.NUMBER:",
      "right" : "case Token.NUMBER:",
      "info" : "SwitchCase[59150-59168]:SwitchCase[59260-59278]"
    }, {
      "left" : "return NodeUtil.getStringValue(key);",
      "right" : "return NodeUtil.getStringValue(key);",
      "info" : "ReturnStatement[59177-59213]:ReturnStatement[59287-59323]"
    }, {
      "left" : "case Token.STRING:",
      "right" : "case Token.STRING:",
      "info" : "SwitchCase[59220-59238]:SwitchCase[59330-59348]"
    }, {
      "left" : "case Token.GET:",
      "right" : "case Token.GET:",
      "info" : "SwitchCase[59245-59260]:SwitchCase[59355-59370]"
    }, {
      "left" : "case Token.SET:",
      "right" : "case Token.SET:",
      "info" : "SwitchCase[59267-59282]:SwitchCase[59377-59392]"
    }, {
      "left" : "return key.getString();",
      "right" : "return key.getString();",
      "info" : "ReturnStatement[59291-59314]:ReturnStatement[59401-59424]"
    }, {
      "left" : "throw new IllegalStateException(\"Unexpected node type: \" + key);",
      "right" : "throw new IllegalStateException(\"Unexpected node type: \" + key);",
      "info" : "ThrowStatement[59325-59389]:ThrowStatement[59435-59499]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[59573-60408]:Block[59683-60518]"
    }, {
      "left" : "if (valueType != null)",
      "right" : "if (valueType != null)",
      "info" : "IfStatement[59579-60382]:IfStatement[59689-60492]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[59602-60382]:Block[59712-60492]"
    }, {
      "left" : "switch (key.getType()) {\n        case Token.GET:\n          // GET must always return a function type.\n          if (valueType.isFunctionType()) {\n            FunctionType fntype = ((FunctionType) valueType);\n            valueType = fntype.getReturnType();\n          } else {\n            return null;\n          }\n          break;\n        case Token.SET:\n          if (valueType.isFunctionType()) {\n            // SET must always return a function type.\n            FunctionType fntype = ((FunctionType) valueType);\n            Node param = fntype.getParametersNode().getFirstChild();\n            // SET function must always have one parameter.\n            valueType = param.getJSType();\n          } else {\n            return null;\n          }\n          break;\n      }",
      "right" : "switch (key.getType()) {\n        case Token.GET:\n          // GET must always return a function type.\n          if (valueType.isFunctionType()) {\n            FunctionType fntype = ((FunctionType) valueType);\n            valueType = fntype.getReturnType();\n          } else {\n            return null;\n          }\n          break;\n        case Token.SET:\n          if (valueType.isFunctionType()) {\n            // SET must always return a function type.\n            FunctionType fntype = ((FunctionType) valueType);\n            Node param = fntype.getParametersNode().getFirstChild();\n            // SET function must always have one parameter.\n            valueType = param.getJSType();\n          } else {\n            return null;\n          }\n          break;\n      }",
      "info" : "SwitchStatement[59610-60376]:SwitchStatement[59720-60486]"
    }, {
      "left" : "case Token.GET:",
      "right" : "case Token.GET:",
      "info" : "SwitchCase[59643-59658]:SwitchCase[59753-59768]"
    }, {
      "left" : "if (valueType.isFunctionType())",
      "right" : "if (valueType.isFunctionType())",
      "info" : "IfStatement[59722-59921]:IfStatement[59832-60031]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[59754-59877]:Block[59864-59987]"
    }, {
      "left" : "FunctionType fntype = ((FunctionType) valueType);",
      "right" : "FunctionType fntype = ((FunctionType) valueType);",
      "info" : "VariableDeclarationStatement[59768-59817]:VariableDeclarationStatement[59878-59927]"
    }, {
      "left" : "valueType = fntype.getReturnType();",
      "right" : "valueType = fntype.getReturnType();",
      "info" : "ExpressionStatement[59830-59865]:ExpressionStatement[59940-59975]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[59883-59921]:Block[59993-60031]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[59897-59909]:ReturnStatement[60007-60019]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[59932-59938]:BreakStatement[60042-60048]"
    }, {
      "left" : "case Token.SET:",
      "right" : "case Token.SET:",
      "info" : "SwitchCase[59947-59962]:SwitchCase[60057-60072]"
    }, {
      "left" : "if (valueType.isFunctionType())",
      "right" : "if (valueType.isFunctionType())",
      "info" : "IfStatement[59973-60351]:IfStatement[60083-60461]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60005-60307]:Block[60115-60417]"
    }, {
      "left" : "FunctionType fntype = ((FunctionType) valueType);",
      "right" : "FunctionType fntype = ((FunctionType) valueType);",
      "info" : "VariableDeclarationStatement[60074-60123]:VariableDeclarationStatement[60184-60233]"
    }, {
      "left" : "Node param = fntype.getParametersNode().getFirstChild();",
      "right" : "Node param = fntype.getParametersNode().getFirstChild();",
      "info" : "VariableDeclarationStatement[60136-60192]:VariableDeclarationStatement[60246-60302]"
    }, {
      "left" : "valueType = param.getJSType();",
      "right" : "valueType = param.getJSType();",
      "info" : "ExpressionStatement[60265-60295]:ExpressionStatement[60375-60405]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60313-60351]:Block[60423-60461]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[60327-60339]:ReturnStatement[60437-60449]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[60362-60368]:BreakStatement[60472-60478]"
    }, {
      "left" : "return valueType;",
      "right" : "return valueType;",
      "info" : "ReturnStatement[60387-60404]:ReturnStatement[60497-60514]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60619-60743]:Block[60729-60853]"
    }, {
      "left" : "switch (node.getType()) {\n      case Token.GET:\n      case Token.SET:\n        return true;\n    }",
      "right" : "switch (node.getType()) {\n      case Token.GET:\n      case Token.SET:\n        return true;\n    }",
      "info" : "SwitchStatement[60625-60721]:SwitchStatement[60735-60831]"
    }, {
      "left" : "case Token.GET:",
      "right" : "case Token.GET:",
      "info" : "SwitchCase[60657-60672]:SwitchCase[60767-60782]"
    }, {
      "left" : "case Token.SET:",
      "right" : "case Token.SET:",
      "info" : "SwitchCase[60679-60694]:SwitchCase[60789-60804]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[60703-60715]:ReturnStatement[60813-60825]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[60726-60739]:ReturnStatement[60836-60849]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61050-62660]:Block[61160-62770]"
    }, {
      "left" : "switch (operator) {\n      case Token.BITOR: return \"|\";\n      case Token.OR: return \"||\";\n      case Token.BITXOR: return \"^\";\n      case Token.AND: return \"&&\";\n      case Token.BITAND: return \"&\";\n      case Token.SHEQ: return \"===\";\n      case Token.EQ: return \"==\";\n      case Token.NOT: return \"!\";\n      case Token.NE: return \"!=\";\n      case Token.SHNE: return \"!==\";\n      case Token.LSH: return \"<<\";\n      case Token.IN: return \"in\";\n      case Token.LE: return \"<=\";\n      case Token.LT: return \"<\";\n      case Token.URSH: return \">>>\";\n      case Token.RSH: return \">>\";\n      case Token.GE: return \">=\";\n      case Token.GT: return \">\";\n      case Token.MUL: return \"*\";\n      case Token.DIV: return \"/\";\n      case Token.MOD: return \"%\";\n      case Token.BITNOT: return \"~\";\n      case Token.ADD: return \"+\";\n      case Token.SUB: return \"-\";\n      case Token.POS: return \"+\";\n      case Token.NEG: return \"-\";\n      case Token.ASSIGN: return \"=\";\n      case Token.ASSIGN_BITOR: return \"|=\";\n      case Token.ASSIGN_BITXOR: return \"^=\";\n      case Token.ASSIGN_BITAND: return \"&=\";\n      case Token.ASSIGN_LSH: return \"<<=\";\n      case Token.ASSIGN_RSH: return \">>=\";\n      case Token.ASSIGN_URSH: return \">>>=\";\n      case Token.ASSIGN_ADD: return \"+=\";\n      case Token.ASSIGN_SUB: return \"-=\";\n      case Token.ASSIGN_MUL: return \"*=\";\n      case Token.ASSIGN_DIV: return \"/=\";\n      case Token.ASSIGN_MOD: return \"%=\";\n      case Token.VOID: return \"void\";\n      case Token.TYPEOF: return \"typeof\";\n      case Token.INSTANCEOF: return \"instanceof\";\n      default: return null;\n    }",
      "right" : "switch (operator) {\n      case Token.BITOR: return \"|\";\n      case Token.OR: return \"||\";\n      case Token.BITXOR: return \"^\";\n      case Token.AND: return \"&&\";\n      case Token.BITAND: return \"&\";\n      case Token.SHEQ: return \"===\";\n      case Token.EQ: return \"==\";\n      case Token.NOT: return \"!\";\n      case Token.NE: return \"!=\";\n      case Token.SHNE: return \"!==\";\n      case Token.LSH: return \"<<\";\n      case Token.IN: return \"in\";\n      case Token.LE: return \"<=\";\n      case Token.LT: return \"<\";\n      case Token.URSH: return \">>>\";\n      case Token.RSH: return \">>\";\n      case Token.GE: return \">=\";\n      case Token.GT: return \">\";\n      case Token.MUL: return \"*\";\n      case Token.DIV: return \"/\";\n      case Token.MOD: return \"%\";\n      case Token.BITNOT: return \"~\";\n      case Token.ADD: return \"+\";\n      case Token.SUB: return \"-\";\n      case Token.POS: return \"+\";\n      case Token.NEG: return \"-\";\n      case Token.ASSIGN: return \"=\";\n      case Token.ASSIGN_BITOR: return \"|=\";\n      case Token.ASSIGN_BITXOR: return \"^=\";\n      case Token.ASSIGN_BITAND: return \"&=\";\n      case Token.ASSIGN_LSH: return \"<<=\";\n      case Token.ASSIGN_RSH: return \">>=\";\n      case Token.ASSIGN_URSH: return \">>>=\";\n      case Token.ASSIGN_ADD: return \"+=\";\n      case Token.ASSIGN_SUB: return \"-=\";\n      case Token.ASSIGN_MUL: return \"*=\";\n      case Token.ASSIGN_DIV: return \"/=\";\n      case Token.ASSIGN_MOD: return \"%=\";\n      case Token.VOID: return \"void\";\n      case Token.TYPEOF: return \"typeof\";\n      case Token.INSTANCEOF: return \"instanceof\";\n      default: return null;\n    }",
      "info" : "SwitchStatement[61056-62656]:SwitchStatement[61166-62766]"
    }, {
      "left" : "case Token.BITOR:",
      "right" : "case Token.BITOR:",
      "info" : "SwitchCase[61082-61099]:SwitchCase[61192-61209]"
    }, {
      "left" : "return \"|\";",
      "right" : "return \"|\";",
      "info" : "ReturnStatement[61100-61111]:ReturnStatement[61210-61221]"
    }, {
      "left" : "case Token.OR:",
      "right" : "case Token.OR:",
      "info" : "SwitchCase[61118-61132]:SwitchCase[61228-61242]"
    }, {
      "left" : "return \"||\";",
      "right" : "return \"||\";",
      "info" : "ReturnStatement[61133-61145]:ReturnStatement[61243-61255]"
    }, {
      "left" : "case Token.BITXOR:",
      "right" : "case Token.BITXOR:",
      "info" : "SwitchCase[61152-61170]:SwitchCase[61262-61280]"
    }, {
      "left" : "return \"^\";",
      "right" : "return \"^\";",
      "info" : "ReturnStatement[61171-61182]:ReturnStatement[61281-61292]"
    }, {
      "left" : "case Token.AND:",
      "right" : "case Token.AND:",
      "info" : "SwitchCase[61189-61204]:SwitchCase[61299-61314]"
    }, {
      "left" : "return \"&&\";",
      "right" : "return \"&&\";",
      "info" : "ReturnStatement[61205-61217]:ReturnStatement[61315-61327]"
    }, {
      "left" : "case Token.BITAND:",
      "right" : "case Token.BITAND:",
      "info" : "SwitchCase[61224-61242]:SwitchCase[61334-61352]"
    }, {
      "left" : "return \"&\";",
      "right" : "return \"&\";",
      "info" : "ReturnStatement[61243-61254]:ReturnStatement[61353-61364]"
    }, {
      "left" : "case Token.SHEQ:",
      "right" : "case Token.SHEQ:",
      "info" : "SwitchCase[61261-61277]:SwitchCase[61371-61387]"
    }, {
      "left" : "return \"===\";",
      "right" : "return \"===\";",
      "info" : "ReturnStatement[61278-61291]:ReturnStatement[61388-61401]"
    }, {
      "left" : "case Token.EQ:",
      "right" : "case Token.EQ:",
      "info" : "SwitchCase[61298-61312]:SwitchCase[61408-61422]"
    }, {
      "left" : "return \"==\";",
      "right" : "return \"==\";",
      "info" : "ReturnStatement[61313-61325]:ReturnStatement[61423-61435]"
    }, {
      "left" : "case Token.NOT:",
      "right" : "case Token.NOT:",
      "info" : "SwitchCase[61332-61347]:SwitchCase[61442-61457]"
    }, {
      "left" : "return \"!\";",
      "right" : "return \"!\";",
      "info" : "ReturnStatement[61348-61359]:ReturnStatement[61458-61469]"
    }, {
      "left" : "case Token.NE:",
      "right" : "case Token.NE:",
      "info" : "SwitchCase[61366-61380]:SwitchCase[61476-61490]"
    }, {
      "left" : "return \"!=\";",
      "right" : "return \"!=\";",
      "info" : "ReturnStatement[61381-61393]:ReturnStatement[61491-61503]"
    }, {
      "left" : "case Token.SHNE:",
      "right" : "case Token.SHNE:",
      "info" : "SwitchCase[61400-61416]:SwitchCase[61510-61526]"
    }, {
      "left" : "return \"!==\";",
      "right" : "return \"!==\";",
      "info" : "ReturnStatement[61417-61430]:ReturnStatement[61527-61540]"
    }, {
      "left" : "case Token.LSH:",
      "right" : "case Token.LSH:",
      "info" : "SwitchCase[61437-61452]:SwitchCase[61547-61562]"
    }, {
      "left" : "return \"<<\";",
      "right" : "return \"<<\";",
      "info" : "ReturnStatement[61453-61465]:ReturnStatement[61563-61575]"
    }, {
      "left" : "case Token.IN:",
      "right" : "case Token.IN:",
      "info" : "SwitchCase[61472-61486]:SwitchCase[61582-61596]"
    }, {
      "left" : "return \"in\";",
      "right" : "return \"in\";",
      "info" : "ReturnStatement[61487-61499]:ReturnStatement[61597-61609]"
    }, {
      "left" : "case Token.LE:",
      "right" : "case Token.LE:",
      "info" : "SwitchCase[61506-61520]:SwitchCase[61616-61630]"
    }, {
      "left" : "return \"<=\";",
      "right" : "return \"<=\";",
      "info" : "ReturnStatement[61521-61533]:ReturnStatement[61631-61643]"
    }, {
      "left" : "case Token.LT:",
      "right" : "case Token.LT:",
      "info" : "SwitchCase[61540-61554]:SwitchCase[61650-61664]"
    }, {
      "left" : "return \"<\";",
      "right" : "return \"<\";",
      "info" : "ReturnStatement[61555-61566]:ReturnStatement[61665-61676]"
    }, {
      "left" : "case Token.URSH:",
      "right" : "case Token.URSH:",
      "info" : "SwitchCase[61573-61589]:SwitchCase[61683-61699]"
    }, {
      "left" : "return \">>>\";",
      "right" : "return \">>>\";",
      "info" : "ReturnStatement[61590-61603]:ReturnStatement[61700-61713]"
    }, {
      "left" : "case Token.RSH:",
      "right" : "case Token.RSH:",
      "info" : "SwitchCase[61610-61625]:SwitchCase[61720-61735]"
    }, {
      "left" : "return \">>\";",
      "right" : "return \">>\";",
      "info" : "ReturnStatement[61626-61638]:ReturnStatement[61736-61748]"
    }, {
      "left" : "case Token.GE:",
      "right" : "case Token.GE:",
      "info" : "SwitchCase[61645-61659]:SwitchCase[61755-61769]"
    }, {
      "left" : "return \">=\";",
      "right" : "return \">=\";",
      "info" : "ReturnStatement[61660-61672]:ReturnStatement[61770-61782]"
    }, {
      "left" : "case Token.GT:",
      "right" : "case Token.GT:",
      "info" : "SwitchCase[61679-61693]:SwitchCase[61789-61803]"
    }, {
      "left" : "return \">\";",
      "right" : "return \">\";",
      "info" : "ReturnStatement[61694-61705]:ReturnStatement[61804-61815]"
    }, {
      "left" : "case Token.MUL:",
      "right" : "case Token.MUL:",
      "info" : "SwitchCase[61712-61727]:SwitchCase[61822-61837]"
    }, {
      "left" : "return \"*\";",
      "right" : "return \"*\";",
      "info" : "ReturnStatement[61728-61739]:ReturnStatement[61838-61849]"
    }, {
      "left" : "case Token.DIV:",
      "right" : "case Token.DIV:",
      "info" : "SwitchCase[61746-61761]:SwitchCase[61856-61871]"
    }, {
      "left" : "return \"/\";",
      "right" : "return \"/\";",
      "info" : "ReturnStatement[61762-61773]:ReturnStatement[61872-61883]"
    }, {
      "left" : "case Token.MOD:",
      "right" : "case Token.MOD:",
      "info" : "SwitchCase[61780-61795]:SwitchCase[61890-61905]"
    }, {
      "left" : "return \"%\";",
      "right" : "return \"%\";",
      "info" : "ReturnStatement[61796-61807]:ReturnStatement[61906-61917]"
    }, {
      "left" : "case Token.BITNOT:",
      "right" : "case Token.BITNOT:",
      "info" : "SwitchCase[61814-61832]:SwitchCase[61924-61942]"
    }, {
      "left" : "return \"~\";",
      "right" : "return \"~\";",
      "info" : "ReturnStatement[61833-61844]:ReturnStatement[61943-61954]"
    }, {
      "left" : "case Token.ADD:",
      "right" : "case Token.ADD:",
      "info" : "SwitchCase[61851-61866]:SwitchCase[61961-61976]"
    }, {
      "left" : "return \"+\";",
      "right" : "return \"+\";",
      "info" : "ReturnStatement[61867-61878]:ReturnStatement[61977-61988]"
    }, {
      "left" : "case Token.SUB:",
      "right" : "case Token.SUB:",
      "info" : "SwitchCase[61885-61900]:SwitchCase[61995-62010]"
    }, {
      "left" : "return \"-\";",
      "right" : "return \"-\";",
      "info" : "ReturnStatement[61901-61912]:ReturnStatement[62011-62022]"
    }, {
      "left" : "case Token.POS:",
      "right" : "case Token.POS:",
      "info" : "SwitchCase[61919-61934]:SwitchCase[62029-62044]"
    }, {
      "left" : "return \"+\";",
      "right" : "return \"+\";",
      "info" : "ReturnStatement[61935-61946]:ReturnStatement[62045-62056]"
    }, {
      "left" : "case Token.NEG:",
      "right" : "case Token.NEG:",
      "info" : "SwitchCase[61953-61968]:SwitchCase[62063-62078]"
    }, {
      "left" : "return \"-\";",
      "right" : "return \"-\";",
      "info" : "ReturnStatement[61969-61980]:ReturnStatement[62079-62090]"
    }, {
      "left" : "case Token.ASSIGN:",
      "right" : "case Token.ASSIGN:",
      "info" : "SwitchCase[61987-62005]:SwitchCase[62097-62115]"
    }, {
      "left" : "return \"=\";",
      "right" : "return \"=\";",
      "info" : "ReturnStatement[62006-62017]:ReturnStatement[62116-62127]"
    }, {
      "left" : "case Token.ASSIGN_BITOR:",
      "right" : "case Token.ASSIGN_BITOR:",
      "info" : "SwitchCase[62024-62048]:SwitchCase[62134-62158]"
    }, {
      "left" : "return \"|=\";",
      "right" : "return \"|=\";",
      "info" : "ReturnStatement[62049-62061]:ReturnStatement[62159-62171]"
    }, {
      "left" : "case Token.ASSIGN_BITXOR:",
      "right" : "case Token.ASSIGN_BITXOR:",
      "info" : "SwitchCase[62068-62093]:SwitchCase[62178-62203]"
    }, {
      "left" : "return \"^=\";",
      "right" : "return \"^=\";",
      "info" : "ReturnStatement[62094-62106]:ReturnStatement[62204-62216]"
    }, {
      "left" : "case Token.ASSIGN_BITAND:",
      "right" : "case Token.ASSIGN_BITAND:",
      "info" : "SwitchCase[62113-62138]:SwitchCase[62223-62248]"
    }, {
      "left" : "return \"&=\";",
      "right" : "return \"&=\";",
      "info" : "ReturnStatement[62139-62151]:ReturnStatement[62249-62261]"
    }, {
      "left" : "case Token.ASSIGN_LSH:",
      "right" : "case Token.ASSIGN_LSH:",
      "info" : "SwitchCase[62158-62180]:SwitchCase[62268-62290]"
    }, {
      "left" : "return \"<<=\";",
      "right" : "return \"<<=\";",
      "info" : "ReturnStatement[62181-62194]:ReturnStatement[62291-62304]"
    }, {
      "left" : "case Token.ASSIGN_RSH:",
      "right" : "case Token.ASSIGN_RSH:",
      "info" : "SwitchCase[62201-62223]:SwitchCase[62311-62333]"
    }, {
      "left" : "return \">>=\";",
      "right" : "return \">>=\";",
      "info" : "ReturnStatement[62224-62237]:ReturnStatement[62334-62347]"
    }, {
      "left" : "case Token.ASSIGN_URSH:",
      "right" : "case Token.ASSIGN_URSH:",
      "info" : "SwitchCase[62244-62267]:SwitchCase[62354-62377]"
    }, {
      "left" : "return \">>>=\";",
      "right" : "return \">>>=\";",
      "info" : "ReturnStatement[62268-62282]:ReturnStatement[62378-62392]"
    }, {
      "left" : "case Token.ASSIGN_ADD:",
      "right" : "case Token.ASSIGN_ADD:",
      "info" : "SwitchCase[62289-62311]:SwitchCase[62399-62421]"
    }, {
      "left" : "return \"+=\";",
      "right" : "return \"+=\";",
      "info" : "ReturnStatement[62312-62324]:ReturnStatement[62422-62434]"
    }, {
      "left" : "case Token.ASSIGN_SUB:",
      "right" : "case Token.ASSIGN_SUB:",
      "info" : "SwitchCase[62331-62353]:SwitchCase[62441-62463]"
    }, {
      "left" : "return \"-=\";",
      "right" : "return \"-=\";",
      "info" : "ReturnStatement[62354-62366]:ReturnStatement[62464-62476]"
    }, {
      "left" : "case Token.ASSIGN_MUL:",
      "right" : "case Token.ASSIGN_MUL:",
      "info" : "SwitchCase[62373-62395]:SwitchCase[62483-62505]"
    }, {
      "left" : "return \"*=\";",
      "right" : "return \"*=\";",
      "info" : "ReturnStatement[62396-62408]:ReturnStatement[62506-62518]"
    }, {
      "left" : "case Token.ASSIGN_DIV:",
      "right" : "case Token.ASSIGN_DIV:",
      "info" : "SwitchCase[62415-62437]:SwitchCase[62525-62547]"
    }, {
      "left" : "return \"/=\";",
      "right" : "return \"/=\";",
      "info" : "ReturnStatement[62438-62450]:ReturnStatement[62548-62560]"
    }, {
      "left" : "case Token.ASSIGN_MOD:",
      "right" : "case Token.ASSIGN_MOD:",
      "info" : "SwitchCase[62457-62479]:SwitchCase[62567-62589]"
    }, {
      "left" : "return \"%=\";",
      "right" : "return \"%=\";",
      "info" : "ReturnStatement[62480-62492]:ReturnStatement[62590-62602]"
    }, {
      "left" : "case Token.VOID:",
      "right" : "case Token.VOID:",
      "info" : "SwitchCase[62499-62515]:SwitchCase[62609-62625]"
    }, {
      "left" : "return \"void\";",
      "right" : "return \"void\";",
      "info" : "ReturnStatement[62516-62530]:ReturnStatement[62626-62640]"
    }, {
      "left" : "case Token.TYPEOF:",
      "right" : "case Token.TYPEOF:",
      "info" : "SwitchCase[62537-62555]:SwitchCase[62647-62665]"
    }, {
      "left" : "return \"typeof\";",
      "right" : "return \"typeof\";",
      "info" : "ReturnStatement[62556-62572]:ReturnStatement[62666-62682]"
    }, {
      "left" : "case Token.INSTANCEOF:",
      "right" : "case Token.INSTANCEOF:",
      "info" : "SwitchCase[62579-62601]:SwitchCase[62689-62711]"
    }, {
      "left" : "return \"instanceof\";",
      "right" : "return \"instanceof\";",
      "info" : "ReturnStatement[62602-62622]:ReturnStatement[62712-62732]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[62629-62637]:SwitchCase[62739-62747]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[62638-62650]:ReturnStatement[62748-62760]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62980-63167]:Block[63090-63277]"
    }, {
      "left" : "String res = opToStr(operator);",
      "right" : "String res = opToStr(operator);",
      "info" : "VariableDeclarationStatement[62986-63017]:VariableDeclarationStatement[63096-63127]"
    }, {
      "left" : "if (res == null)",
      "right" : "if (res == null)",
      "info" : "IfStatement[63022-63147]:IfStatement[63132-63257]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63039-63147]:Block[63149-63257]"
    }, {
      "left" : "throw new Error(\"Unknown op \" + operator + \": \" +\n                      Token.name(operator));",
      "right" : "throw new Error(\"Unknown op \" + operator + \": \" +\n                      Token.name(operator));",
      "info" : "ThrowStatement[63047-63141]:ThrowStatement[63157-63251]"
    }, {
      "left" : "return res;",
      "right" : "return res;",
      "info" : "ReturnStatement[63152-63163]:ReturnStatement[63262-63273]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63402-63476]:Block[63512-63586]"
    }, {
      "left" : "return has(node, new MatchNodeType(type), traverseChildrenPred);",
      "right" : "return has(node, new MatchNodeType(type), traverseChildrenPred);",
      "info" : "ReturnStatement[63408-63472]:ReturnStatement[63518-63582]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63613-63686]:Block[63723-63796]"
    }, {
      "left" : "return containsType(node, type, Predicates.<Node>alwaysTrue());",
      "right" : "return containsType(node, type, Predicates.<Node>alwaysTrue());",
      "info" : "ReturnStatement[63619-63682]:ReturnStatement[63729-63792]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63957-64438]:Block[64067-64548]"
    }, {
      "left" : "Collection<Node> vars = getVarsDeclaredInBranch(branch);",
      "right" : "Collection<Node> vars = getVarsDeclaredInBranch(branch);",
      "info" : "VariableDeclarationStatement[63963-64019]:VariableDeclarationStatement[64073-64129]"
    }, {
      "left" : "if (vars.isEmpty())",
      "right" : "if (vars.isEmpty())",
      "info" : "IfStatement[64024-64065]:IfStatement[64134-64175]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64044-64065]:Block[64154-64175]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[64052-64059]:ReturnStatement[64162-64169]"
    }, {
      "left" : "Node parent = getAddingRoot(branch);",
      "right" : "Node parent = getAddingRoot(branch);",
      "info" : "VariableDeclarationStatement[64071-64107]:VariableDeclarationStatement[64181-64217]"
    }, {
      "left" : "for (Node nameNode : vars)",
      "right" : "for (Node nameNode : vars)",
      "info" : "EnhancedForStatement[64112-64434]:EnhancedForStatement[64222-64544]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64139-64434]:Block[64249-64544]"
    }, {
      "left" : "Node var = new Node(\n          Token.VAR,\n          Node.newString(Token.NAME, nameNode.getString())\n              .copyInformationFrom(nameNode))\n          .copyInformationFrom(nameNode);",
      "right" : "Node var = new Node(\n          Token.VAR,\n          Node.newString(Token.NAME, nameNode.getString())\n              .copyInformationFrom(nameNode))\n          .copyInformationFrom(nameNode);",
      "info" : "VariableDeclarationStatement[64147-64335]:VariableDeclarationStatement[64257-64445]"
    }, {
      "left" : "copyNameAnnotations(nameNode, var.getFirstChild());",
      "right" : "copyNameAnnotations(nameNode, var.getFirstChild());",
      "info" : "ExpressionStatement[64342-64393]:ExpressionStatement[64452-64503]"
    }, {
      "left" : "parent.addChildToFront(var);",
      "right" : "parent.addChildToFront(var);",
      "info" : "ExpressionStatement[64400-64428]:ExpressionStatement[64510-64538]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64613-64743]:Block[64723-64853]"
    }, {
      "left" : "if (source.getBooleanProp(Node.IS_CONSTANT_NAME))",
      "right" : "if (source.getBooleanProp(Node.IS_CONSTANT_NAME))",
      "info" : "IfStatement[64619-64739]:IfStatement[64729-64849]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64669-64739]:Block[64779-64849]"
    }, {
      "left" : "destination.putBooleanProp(Node.IS_CONSTANT_NAME, true);",
      "right" : "destination.putBooleanProp(Node.IS_CONSTANT_NAME, true);",
      "info" : "ExpressionStatement[64677-64733]:ExpressionStatement[64787-64843]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64906-65569]:Block[65016-65679]"
    }, {
      "left" : "Node addingRoot = null;",
      "right" : "Node addingRoot = null;",
      "info" : "VariableDeclarationStatement[64912-64935]:VariableDeclarationStatement[65022-65045]"
    }, {
      "left" : "Node ancestor = n;",
      "right" : "Node ancestor = n;",
      "info" : "VariableDeclarationStatement[64940-64958]:VariableDeclarationStatement[65050-65068]"
    }, {
      "left" : "while (null != (ancestor = ancestor.getParent()))",
      "right" : "while (null != (ancestor = ancestor.getParent()))",
      "info" : "WhileStatement[64963-65249]:WhileStatement[65073-65359]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65013-65249]:Block[65123-65359]"
    }, {
      "left" : "int type = ancestor.getType();",
      "right" : "int type = ancestor.getType();",
      "info" : "VariableDeclarationStatement[65021-65051]:VariableDeclarationStatement[65131-65161]"
    }, {
      "left" : "if (type == Token.SCRIPT)",
      "right" : "if (type == Token.SCRIPT)",
      "info" : "IfStatement[65058-65243]:IfStatement[65168-65353]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65084-65139]:Block[65194-65249]"
    }, {
      "left" : "addingRoot = ancestor;",
      "right" : "addingRoot = ancestor;",
      "info" : "ExpressionStatement[65094-65116]:ExpressionStatement[65204-65226]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[65125-65131]:BreakStatement[65235-65241]"
    }, {
      "left" : "if (type == Token.FUNCTION)",
      "right" : "if (type == Token.FUNCTION)",
      "info" : "IfStatement[65145-65243]:IfStatement[65255-65353]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65173-65243]:Block[65283-65353]"
    }, {
      "left" : "addingRoot = ancestor.getLastChild();",
      "right" : "addingRoot = ancestor.getLastChild();",
      "info" : "ExpressionStatement[65183-65220]:ExpressionStatement[65293-65330]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[65229-65235]:BreakStatement[65339-65345]"
    }, {
      "left" : "Preconditions.checkState(addingRoot.getType() == Token.BLOCK ||\n        addingRoot.getType() == Token.SCRIPT);",
      "right" : "Preconditions.checkState(addingRoot.getType() == Token.BLOCK ||\n        addingRoot.getType() == Token.SCRIPT);",
      "info" : "ExpressionStatement[65302-65412]:ExpressionStatement[65412-65522]"
    }, {
      "left" : "Preconditions.checkState(addingRoot.getFirstChild() == null ||\n        addingRoot.getFirstChild().getType() != Token.SCRIPT);",
      "right" : "Preconditions.checkState(addingRoot.getFirstChild() == null ||\n        addingRoot.getFirstChild().getType() != Token.SCRIPT);",
      "info" : "ExpressionStatement[65417-65542]:ExpressionStatement[65527-65652]"
    }, {
      "left" : "return addingRoot;",
      "right" : "return addingRoot;",
      "info" : "ReturnStatement[65547-65565]:ReturnStatement[65657-65675]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65747-66150]:Block[65857-66260]"
    }, {
      "left" : "Node parameterParen = new Node(Token.LP, lineno, charno);",
      "right" : "Node parameterParen = new Node(Token.LP, lineno, charno);",
      "info" : "VariableDeclarationStatement[65753-65810]:VariableDeclarationStatement[65863-65920]"
    }, {
      "left" : "for (Node param : params)",
      "right" : "for (Node param : params)",
      "info" : "EnhancedForStatement[65815-65892]:EnhancedForStatement[65925-66002]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65841-65892]:Block[65951-66002]"
    }, {
      "left" : "parameterParen.addChildToBack(param);",
      "right" : "parameterParen.addChildToBack(param);",
      "info" : "ExpressionStatement[65849-65886]:ExpressionStatement[65959-65996]"
    }, {
      "left" : "Node function = new Node(Token.FUNCTION, lineno, charno);",
      "right" : "Node function = new Node(Token.FUNCTION, lineno, charno);",
      "info" : "VariableDeclarationStatement[65897-65954]:VariableDeclarationStatement[66007-66064]"
    }, {
      "left" : "function.addChildrenToBack(\n        Node.newString(Token.NAME, name, lineno, charno));",
      "right" : "function.addChildrenToBack(\n        Node.newString(Token.NAME, name, lineno, charno));",
      "info" : "ExpressionStatement[65959-66045]:ExpressionStatement[66069-66155]"
    }, {
      "left" : "function.addChildToBack(parameterParen);",
      "right" : "function.addChildToBack(parameterParen);",
      "info" : "ExpressionStatement[66050-66090]:ExpressionStatement[66160-66200]"
    }, {
      "left" : "function.addChildToBack(body);",
      "right" : "function.addChildToBack(body);",
      "info" : "ExpressionStatement[66095-66125]:ExpressionStatement[66205-66235]"
    }, {
      "left" : "return function;",
      "right" : "return function;",
      "info" : "ReturnStatement[66130-66146]:ReturnStatement[66240-66256]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66549-67309]:Block[66659-67419]"
    }, {
      "left" : "int endPos = name.indexOf('.');",
      "right" : "int endPos = name.indexOf('.');",
      "info" : "VariableDeclarationStatement[66555-66586]:VariableDeclarationStatement[66665-66696]"
    }, {
      "left" : "if (endPos == -1)",
      "right" : "if (endPos == -1)",
      "info" : "IfStatement[66591-66672]:IfStatement[66701-66782]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66609-66672]:Block[66719-66782]"
    }, {
      "left" : "return newName(convention, name, lineno, charno);",
      "right" : "return newName(convention, name, lineno, charno);",
      "info" : "ReturnStatement[66617-66666]:ReturnStatement[66727-66776]"
    }, {
      "left" : "Node node = newName(\n        convention, name.substring(0, endPos), lineno, charno);",
      "right" : "Node node = newName(\n        convention, name.substring(0, endPos), lineno, charno);",
      "info" : "VariableDeclarationStatement[66677-66761]:VariableDeclarationStatement[66787-66871]"
    }, {
      "left" : "int startPos;",
      "right" : "int startPos;",
      "info" : "VariableDeclarationStatement[66766-66779]:VariableDeclarationStatement[66876-66889]"
    }, {
      "left" : "do{...}",
      "right" : "do{...}",
      "info" : "DoStatement[66784-67287]:DoStatement[66894-67397]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66787-67265]:Block[66897-67375]"
    }, {
      "left" : "startPos = endPos + 1;",
      "right" : "startPos = endPos + 1;",
      "info" : "ExpressionStatement[66795-66817]:ExpressionStatement[66905-66927]"
    }, {
      "left" : "endPos = name.indexOf('.', startPos);",
      "right" : "endPos = name.indexOf('.', startPos);",
      "info" : "ExpressionStatement[66824-66861]:ExpressionStatement[66934-66971]"
    }, {
      "left" : "String part = (endPos == -1\n                     ? name.substring(startPos)\n                     : name.substring(startPos, endPos));",
      "right" : "String part = (endPos == -1\n                     ? name.substring(startPos)\n                     : name.substring(startPos, endPos));",
      "info" : "VariableDeclarationStatement[66868-67001]:VariableDeclarationStatement[66978-67111]"
    }, {
      "left" : "Node propNode = Node.newString(Token.STRING, part, lineno, charno);",
      "right" : "Node propNode = Node.newString(Token.STRING, part, lineno, charno);",
      "info" : "VariableDeclarationStatement[67008-67075]:VariableDeclarationStatement[67118-67185]"
    }, {
      "left" : "if (convention.isConstantKey(part))",
      "right" : "if (convention.isConstantKey(part))",
      "info" : "IfStatement[67082-67189]:IfStatement[67192-67299]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67118-67189]:Block[67228-67299]"
    }, {
      "left" : "propNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);",
      "right" : "propNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);",
      "info" : "ExpressionStatement[67128-67181]:ExpressionStatement[67238-67291]"
    }, {
      "left" : "node = new Node(Token.GETPROP, node, propNode, lineno, charno);",
      "right" : "node = new Node(Token.GETPROP, node, propNode, lineno, charno);",
      "info" : "ExpressionStatement[67196-67259]:ExpressionStatement[67306-67369]"
    }, {
      "left" : "return node;",
      "right" : "return node;",
      "info" : "ReturnStatement[67293-67305]:ReturnStatement[67403-67415]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67965-68107]:Block[68075-68217]"
    }, {
      "left" : "Node node = newQualifiedNameNode(convention, name, -1, -1);",
      "right" : "Node node = newQualifiedNameNode(convention, name, -1, -1);",
      "info" : "VariableDeclarationStatement[67971-68030]:VariableDeclarationStatement[68081-68140]"
    }, {
      "left" : "setDebugInformation(node, basisNode, originalName);",
      "right" : "setDebugInformation(node, basisNode, originalName);",
      "info" : "ExpressionStatement[68035-68086]:ExpressionStatement[68145-68196]"
    }, {
      "left" : "return node;",
      "right" : "return node;",
      "info" : "ReturnStatement[68091-68103]:ReturnStatement[68201-68213]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[68244-68515]:Block[68354-68625]"
    }, {
      "left" : "for (Node current = qName; true;\n         current = current.getFirstChild())",
      "right" : "for (Node current = qName; true;\n         current = current.getFirstChild())",
      "info" : "ForStatement[68250-68511]:ForStatement[68360-68621]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[68327-68511]:Block[68437-68621]"
    }, {
      "left" : "int type = current.getType();",
      "right" : "int type = current.getType();",
      "info" : "VariableDeclarationStatement[68335-68364]:VariableDeclarationStatement[68445-68474]"
    }, {
      "left" : "if (type == Token.NAME || type == Token.THIS)",
      "right" : "if (type == Token.NAME || type == Token.THIS)",
      "info" : "IfStatement[68371-68450]:IfStatement[68481-68560]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[68417-68450]:Block[68527-68560]"
    }, {
      "left" : "return current;",
      "right" : "return current;",
      "info" : "ReturnStatement[68427-68442]:ReturnStatement[68537-68552]"
    }, {
      "left" : "Preconditions.checkState(type == Token.GETPROP);",
      "right" : "Preconditions.checkState(type == Token.GETPROP);",
      "info" : "ExpressionStatement[68457-68505]:ExpressionStatement[68567-68615]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[68941-69050]:Block[69051-69160]"
    }, {
      "left" : "node.copyInformationFromForTree(basisNode);",
      "right" : "node.copyInformationFromForTree(basisNode);",
      "info" : "ExpressionStatement[68947-68990]:ExpressionStatement[69057-69100]"
    }, {
      "left" : "node.putProp(Node.ORIGINALNAME_PROP, originalName);",
      "right" : "node.putProp(Node.ORIGINALNAME_PROP, originalName);",
      "info" : "ExpressionStatement[68995-69046]:ExpressionStatement[69105-69156]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[69155-69356]:Block[69265-69466]"
    }, {
      "left" : "Node nameNode = Node.newString(Token.NAME, name, lineno, charno);",
      "right" : "Node nameNode = Node.newString(Token.NAME, name, lineno, charno);",
      "info" : "VariableDeclarationStatement[69161-69226]:VariableDeclarationStatement[69271-69336]"
    }, {
      "left" : "if (convention.isConstant(name))",
      "right" : "if (convention.isConstant(name))",
      "info" : "IfStatement[69231-69331]:IfStatement[69341-69441]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[69264-69331]:Block[69374-69441]"
    }, {
      "left" : "nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);",
      "right" : "nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);",
      "info" : "ExpressionStatement[69272-69325]:ExpressionStatement[69382-69435]"
    }, {
      "left" : "return nameNode;",
      "right" : "return nameNode;",
      "info" : "ReturnStatement[69336-69352]:ReturnStatement[69446-69462]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[69771-70004]:Block[69881-70114]"
    }, {
      "left" : "Node nameNode = Node.newString(Token.NAME, name);",
      "right" : "Node nameNode = Node.newString(Token.NAME, name);",
      "info" : "VariableDeclarationStatement[69777-69826]:VariableDeclarationStatement[69887-69936]"
    }, {
      "left" : "if (convention.isConstantKey(name))",
      "right" : "if (convention.isConstantKey(name))",
      "info" : "IfStatement[69831-69934]:IfStatement[69941-70044]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[69867-69934]:Block[69977-70044]"
    }, {
      "left" : "nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);",
      "right" : "nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);",
      "info" : "ExpressionStatement[69875-69928]:ExpressionStatement[69985-70038]"
    }, {
      "left" : "nameNode.copyInformationFrom(basisNode);",
      "right" : "nameNode.copyInformationFrom(basisNode);",
      "info" : "ExpressionStatement[69939-69979]:ExpressionStatement[70049-70089]"
    }, {
      "left" : "return nameNode;",
      "right" : "return nameNode;",
      "info" : "ReturnStatement[69984-70000]:ReturnStatement[70094-70110]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[70633-70777]:Block[70743-70887]"
    }, {
      "left" : "Node nameNode = newName(convention, name, basisNode);",
      "right" : "Node nameNode = newName(convention, name, basisNode);",
      "info" : "VariableDeclarationStatement[70639-70692]:VariableDeclarationStatement[70749-70802]"
    }, {
      "left" : "nameNode.putProp(Node.ORIGINALNAME_PROP, originalName);",
      "right" : "nameNode.putProp(Node.ORIGINALNAME_PROP, originalName);",
      "info" : "ExpressionStatement[70697-70752]:ExpressionStatement[70807-70862]"
    }, {
      "left" : "return nameNode;",
      "right" : "return nameNode;",
      "info" : "ReturnStatement[70757-70773]:ReturnStatement[70867-70883]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[71410-71648]:Block[71520-71758]"
    }, {
      "left" : "char LARGEST_BASIC_LATIN = 0x7f;",
      "right" : "char LARGEST_BASIC_LATIN = 0x7f;",
      "info" : "VariableDeclarationStatement[71416-71448]:VariableDeclarationStatement[71526-71558]"
    }, {
      "left" : "int len = s.length();",
      "right" : "int len = s.length();",
      "info" : "VariableDeclarationStatement[71453-71474]:VariableDeclarationStatement[71563-71584]"
    }, {
      "left" : "for (int index = 0; index < len; index++)",
      "right" : "for (int index = 0; index < len; index++)",
      "info" : "ForStatement[71479-71627]:ForStatement[71589-71737]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[71521-71627]:Block[71631-71737]"
    }, {
      "left" : "char c = s.charAt(index);",
      "right" : "char c = s.charAt(index);",
      "info" : "VariableDeclarationStatement[71529-71554]:VariableDeclarationStatement[71639-71664]"
    }, {
      "left" : "if (c > LARGEST_BASIC_LATIN)",
      "right" : "if (c > LARGEST_BASIC_LATIN)",
      "info" : "IfStatement[71561-71621]:IfStatement[71671-71731]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[71590-71621]:Block[71700-71731]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[71600-71613]:ReturnStatement[71710-71723]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[71632-71644]:ReturnStatement[71742-71754]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[71852-72313]:Block[71962-72423]"
    }, {
      "left" : "return TokenStream.isJSIdentifier(name) &&\n        !TokenStream.isKeyword(name) &&\n        // no Unicode escaped characters - some browsers are less tolerant\n        // of Unicode characters that might be valid according to the\n        // language spec.\n        // Note that by this point, unicode escapes have been converted\n        // to UTF-16 characters, so we're only searching for character\n        // values, not escapes.\n        isLatin(name);",
      "right" : "return TokenStream.isJSIdentifier(name) &&\n        !TokenStream.isKeyword(name) &&\n        // no Unicode escaped characters - some browsers are less tolerant\n        // of Unicode characters that might be valid according to the\n        // language spec.\n        // Note that by this point, unicode escapes have been converted\n        // to UTF-16 characters, so we're only searching for character\n        // values, not escapes.\n        isLatin(name);",
      "info" : "ReturnStatement[71858-72309]:ReturnStatement[71968-72419]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[72463-72750]:Block[72573-72860]"
    }, {
      "left" : "if (n.getType() == Token.NAME)",
      "right" : "if (n.getType() == Token.NAME)",
      "info" : "IfStatement[72471-72744]:IfStatement[72581-72854]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[72502-72744]:Block[72612-72854]"
    }, {
      "left" : "Node parent = n.getParent();",
      "right" : "Node parent = n.getParent();",
      "info" : "VariableDeclarationStatement[72512-72540]:VariableDeclarationStatement[72622-72650]"
    }, {
      "left" : "if (parent != null && parent.getType() == Token.VAR)",
      "right" : "if (parent != null && parent.getType() == Token.VAR)",
      "info" : "IfStatement[72549-72736]:IfStatement[72659-72846]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[72602-72736]:Block[72712-72846]"
    }, {
      "left" : "String name = n.getString();",
      "right" : "String name = n.getString();",
      "info" : "VariableDeclarationStatement[72614-72642]:VariableDeclarationStatement[72724-72752]"
    }, {
      "left" : "if (!vars.containsKey(name))",
      "right" : "if (!vars.containsKey(name))",
      "info" : "IfStatement[72653-72726]:IfStatement[72763-72836]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[72682-72726]:Block[72792-72836]"
    }, {
      "left" : "vars.put(name, n);",
      "right" : "vars.put(name, n);",
      "info" : "ExpressionStatement[72696-72714]:ExpressionStatement[72806-72824]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[72917-73092]:Block[73027-73202]"
    }, {
      "left" : "VarCollector collector = new VarCollector();",
      "right" : "VarCollector collector = new VarCollector();",
      "info" : "VariableDeclarationStatement[72923-72967]:VariableDeclarationStatement[73033-73077]"
    }, {
      "left" : "visitPreOrder(\n        root,\n        collector,\n        new MatchNotFunction());",
      "right" : "visitPreOrder(\n        root,\n        collector,\n        new MatchNotFunction());",
      "info" : "ExpressionStatement[72972-73052]:ExpressionStatement[73082-73162]"
    }, {
      "left" : "return collector.vars.values();",
      "right" : "return collector.vars.values();",
      "info" : "ReturnStatement[73057-73088]:ReturnStatement[73167-73198]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[73268-73394]:Block[73378-73504]"
    }, {
      "left" : "if (!isExprAssign(n))",
      "right" : "if (!isExprAssign(n))",
      "info" : "IfStatement[73274-73323]:IfStatement[73384-73433]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[73296-73323]:Block[73406-73433]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[73304-73317]:ReturnStatement[73414-73427]"
    }, {
      "left" : "return isPrototypeProperty(n.getFirstChild().getFirstChild());",
      "right" : "return isPrototypeProperty(n.getFirstChild().getFirstChild());",
      "info" : "ReturnStatement[73328-73390]:ReturnStatement[73438-73500]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[73441-73634]:Block[73551-73744]"
    }, {
      "left" : "String lhsString = n.getQualifiedName();",
      "right" : "String lhsString = n.getQualifiedName();",
      "info" : "VariableDeclarationStatement[73447-73487]:VariableDeclarationStatement[73557-73597]"
    }, {
      "left" : "if (lhsString == null)",
      "right" : "if (lhsString == null)",
      "info" : "IfStatement[73492-73542]:IfStatement[73602-73652]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[73515-73542]:Block[73625-73652]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[73523-73536]:ReturnStatement[73633-73646]"
    }, {
      "left" : "int prototypeIdx = lhsString.indexOf(\".prototype.\");",
      "right" : "int prototypeIdx = lhsString.indexOf(\".prototype.\");",
      "info" : "VariableDeclarationStatement[73547-73599]:VariableDeclarationStatement[73657-73709]"
    }, {
      "left" : "return prototypeIdx != -1;",
      "right" : "return prototypeIdx != -1;",
      "info" : "ReturnStatement[73604-73630]:ReturnStatement[73714-73740]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[73760-73997]:Block[73870-74107]"
    }, {
      "left" : "Node cur = qName;",
      "right" : "Node cur = qName;",
      "info" : "VariableDeclarationStatement[73766-73783]:VariableDeclarationStatement[73876-73893]"
    }, {
      "left" : "while (isGetProp(cur))",
      "right" : "while (isGetProp(cur))",
      "info" : "WhileStatement[73788-73976]:WhileStatement[73898-74086]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[73811-73976]:Block[73921-74086]"
    }, {
      "left" : "if (cur.getLastChild().getString().equals(\"prototype\"))",
      "right" : "if (cur.getLastChild().getString().equals(\"prototype\"))",
      "info" : "IfStatement[73819-73970]:IfStatement[73929-74080]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[73875-73920]:Block[73985-74030]"
    }, {
      "left" : "return cur.getFirstChild();",
      "right" : "return cur.getFirstChild();",
      "info" : "ReturnStatement[73885-73912]:ReturnStatement[73995-74022]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[73926-73970]:Block[74036-74080]"
    }, {
      "left" : "cur = cur.getFirstChild();",
      "right" : "cur = cur.getFirstChild();",
      "info" : "ExpressionStatement[73936-73962]:ExpressionStatement[74046-74072]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[73981-73993]:ReturnStatement[74091-74103]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[74138-74359]:Block[74248-74469]"
    }, {
      "left" : "String qNameStr = qName.getQualifiedName();",
      "right" : "String qNameStr = qName.getQualifiedName();",
      "info" : "VariableDeclarationStatement[74144-74187]:VariableDeclarationStatement[74254-74297]"
    }, {
      "left" : "int prototypeIdx = qNameStr.lastIndexOf(\".prototype.\");",
      "right" : "int prototypeIdx = qNameStr.lastIndexOf(\".prototype.\");",
      "info" : "VariableDeclarationStatement[74192-74247]:VariableDeclarationStatement[74302-74357]"
    }, {
      "left" : "int memberIndex = prototypeIdx + \".prototype\".length() + 1;",
      "right" : "int memberIndex = prototypeIdx + \".prototype\".length() + 1;",
      "info" : "VariableDeclarationStatement[74252-74311]:VariableDeclarationStatement[74362-74421]"
    }, {
      "left" : "return qNameStr.substring(memberIndex);",
      "right" : "return qNameStr.substring(memberIndex);",
      "info" : "ReturnStatement[74316-74355]:ReturnStatement[74426-74465]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[74494-74674]:Block[74604-74784]"
    }, {
      "left" : "Node node = new Node(Token.VOID, Node.newNumber(0));",
      "right" : "Node node = new Node(Token.VOID, Node.newNumber(0));",
      "info" : "VariableDeclarationStatement[74500-74552]:VariableDeclarationStatement[74610-74662]"
    }, {
      "left" : "if (srcReferenceNode != null)",
      "right" : "if (srcReferenceNode != null)",
      "info" : "IfStatement[74557-74653]:IfStatement[74667-74763]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[74587-74653]:Block[74697-74763]"
    }, {
      "left" : "node.copyInformationFromForTree(srcReferenceNode);",
      "right" : "node.copyInformationFromForTree(srcReferenceNode);",
      "info" : "ExpressionStatement[74597-74647]:ExpressionStatement[74707-74757]"
    }, {
      "left" : "return node;",
      "right" : "return node;",
      "info" : "ReturnStatement[74658-74670]:ReturnStatement[74768-74780]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[74817-75147]:Block[74927-75257]"
    }, {
      "left" : "Node nodeName = Node.newString(Token.NAME, name);",
      "right" : "Node nodeName = Node.newString(Token.NAME, name);",
      "info" : "VariableDeclarationStatement[74823-74872]:VariableDeclarationStatement[74933-74982]"
    }, {
      "left" : "if (value != null)",
      "right" : "if (value != null)",
      "info" : "IfStatement[74877-75041]:IfStatement[74987-75151]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[74896-75041]:Block[75006-75151]"
    }, {
      "left" : "Preconditions.checkState(value.getNext() == null);",
      "right" : "Preconditions.checkState(value.getNext() == null);",
      "info" : "ExpressionStatement[74904-74954]:ExpressionStatement[75014-75064]"
    }, {
      "left" : "nodeName.addChildToBack(value);",
      "right" : "nodeName.addChildToBack(value);",
      "info" : "ExpressionStatement[74961-74992]:ExpressionStatement[75071-75102]"
    }, {
      "left" : "nodeName.copyInformationFrom(value);",
      "right" : "nodeName.copyInformationFrom(value);",
      "info" : "ExpressionStatement[74999-75035]:ExpressionStatement[75109-75145]"
    }, {
      "left" : "Node var = new Node(Token.VAR, nodeName)\n        .copyInformationFrom(nodeName);",
      "right" : "Node var = new Node(Token.VAR, nodeName)\n        .copyInformationFrom(nodeName);",
      "info" : "VariableDeclarationStatement[75046-75126]:VariableDeclarationStatement[75156-75236]"
    }, {
      "left" : "return var;",
      "right" : "return var;",
      "info" : "ReturnStatement[75132-75143]:ReturnStatement[75242-75253]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[75346-75377]:Block[75456-75487]"
    }, {
      "left" : "this.name = name;",
      "right" : "this.name = name;",
      "info" : "ExpressionStatement[75354-75371]:ExpressionStatement[75464-75481]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[75412-75499]:Block[75522-75609]"
    }, {
      "left" : "return n.getType() == Token.NAME\n          && n.getString().equals(name);",
      "right" : "return n.getType() == Token.NAME\n          && n.getString().equals(name);",
      "info" : "ReturnStatement[75420-75493]:ReturnStatement[75530-75603]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[75683-75714]:Block[75793-75824]"
    }, {
      "left" : "this.type = type;",
      "right" : "this.type = type;",
      "info" : "ExpressionStatement[75691-75708]:ExpressionStatement[75801-75818]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[75749-75790]:Block[75859-75900]"
    }, {
      "left" : "return n.getType() == type;",
      "right" : "return n.getType() == type;",
      "info" : "ReturnStatement[75757-75784]:ReturnStatement[75867-75894]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[75963-76037]:Block[76073-76147]"
    }, {
      "left" : "return isFunctionDeclaration(n) || n.getType() == Token.VAR;",
      "right" : "return isFunctionDeclaration(n) || n.getType() == Token.VAR;",
      "info" : "ReturnStatement[75971-76031]:ReturnStatement[76081-76141]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[76210-76246]:Block[76320-76356]"
    }, {
      "left" : "return !isFunction(n);",
      "right" : "return !isFunction(n);",
      "info" : "ReturnStatement[76218-76240]:ReturnStatement[76328-76350]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[76438-76657]:Block[76548-76767]"
    }, {
      "left" : "Node parent = n.getParent();",
      "right" : "Node parent = n.getParent();",
      "info" : "VariableDeclarationStatement[76446-76474]:VariableDeclarationStatement[76556-76584]"
    }, {
      "left" : "return n.getType() == Token.BLOCK\n          || (!isFunction(n) && (parent == null\n              || isControlStructure(parent)\n              || isStatementBlock(parent)));",
      "right" : "return n.getType() == Token.BLOCK\n          || (!isFunction(n) && (parent == null\n              || isControlStructure(parent)\n              || isStatementBlock(parent)));",
      "info" : "ReturnStatement[76481-76651]:ReturnStatement[76591-76761]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[76854-76933]:Block[76964-77043]"
    }, {
      "left" : "return getCount(node, new MatchNodeType(type), traverseChildrenPred);",
      "right" : "return getCount(node, new MatchNodeType(type), traverseChildrenPred);",
      "info" : "ReturnStatement[76860-76929]:ReturnStatement[76970-77039]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[77174-77248]:Block[77284-77358]"
    }, {
      "left" : "return has(node, new MatchNameNode(name), traverseChildrenPred);",
      "right" : "return has(node, new MatchNameNode(name), traverseChildrenPred);",
      "info" : "ReturnStatement[77180-77244]:ReturnStatement[77290-77354]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[77383-77460]:Block[77493-77570]"
    }, {
      "left" : "return isNameReferenced(node, name, Predicates.<Node>alwaysTrue());",
      "right" : "return isNameReferenced(node, name, Predicates.<Node>alwaysTrue());",
      "info" : "ReturnStatement[77389-77456]:ReturnStatement[77499-77566]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[77614-77711]:Block[77724-77821]"
    }, {
      "left" : "return getCount(\n        node, new MatchNameNode(name), Predicates.<Node>alwaysTrue());",
      "right" : "return getCount(\n        node, new MatchNameNode(name), Predicates.<Node>alwaysTrue());",
      "info" : "ReturnStatement[77620-77707]:ReturnStatement[77730-77817]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[77939-78242]:Block[78049-78352]"
    }, {
      "left" : "if (pred.apply(node))",
      "right" : "if (pred.apply(node))",
      "info" : "IfStatement[77945-77993]:IfStatement[78055-78103]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[77967-77993]:Block[78077-78103]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[77975-77987]:ReturnStatement[78085-78097]"
    }, {
      "left" : "if (!traverseChildrenPred.apply(node))",
      "right" : "if (!traverseChildrenPred.apply(node))",
      "info" : "IfStatement[77999-78065]:IfStatement[78109-78175]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[78038-78065]:Block[78148-78175]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[78046-78059]:ReturnStatement[78156-78169]"
    }, {
      "left" : "for (Node c = node.getFirstChild(); c != null; c = c.getNext())",
      "right" : "for (Node c = node.getFirstChild(); c != null; c = c.getNext())",
      "info" : "ForStatement[78071-78219]:ForStatement[78181-78329]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[78135-78219]:Block[78245-78329]"
    }, {
      "left" : "if (has(c, pred, traverseChildrenPred))",
      "right" : "if (has(c, pred, traverseChildrenPred))",
      "info" : "IfStatement[78143-78213]:IfStatement[78253-78323]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[78183-78213]:Block[78293-78323]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[78193-78205]:ReturnStatement[78303-78315]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[78225-78238]:ReturnStatement[78335-78348]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[78454-78727]:Block[78564-78837]"
    }, {
      "left" : "int total = 0;",
      "right" : "int total = 0;",
      "info" : "VariableDeclarationStatement[78460-78474]:VariableDeclarationStatement[78570-78584]"
    }, {
      "left" : "if (pred.apply(n))",
      "right" : "if (pred.apply(n))",
      "info" : "IfStatement[78480-78521]:IfStatement[78590-78631]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[78499-78521]:Block[78609-78631]"
    }, {
      "left" : "total++;",
      "right" : "total++;",
      "info" : "ExpressionStatement[78507-78515]:ExpressionStatement[78617-78625]"
    }, {
      "left" : "if (traverseChildrenPred.apply(n))",
      "right" : "if (traverseChildrenPred.apply(n))",
      "info" : "IfStatement[78527-78704]:IfStatement[78637-78814]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[78562-78704]:Block[78672-78814]"
    }, {
      "left" : "for (Node c = n.getFirstChild(); c != null; c = c.getNext())",
      "right" : "for (Node c = n.getFirstChild(); c != null; c = c.getNext())",
      "info" : "ForStatement[78570-78698]:ForStatement[78680-78808]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[78631-78698]:Block[78741-78808]"
    }, {
      "left" : "total += getCount(c, pred, traverseChildrenPred);",
      "right" : "total += getCount(c, pred, traverseChildrenPred);",
      "info" : "ExpressionStatement[78641-78690]:ExpressionStatement[78751-78800]"
    }, {
      "left" : "return total;",
      "right" : "return total;",
      "info" : "ReturnStatement[78710-78723]:ReturnStatement[78820-78833]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[79105-79321]:Block[79215-79431]"
    }, {
      "left" : "vistor.visit(node);",
      "right" : "vistor.visit(node);",
      "info" : "ExpressionStatement[79111-79130]:ExpressionStatement[79221-79240]"
    }, {
      "left" : "if (traverseChildrenPred.apply(node))",
      "right" : "if (traverseChildrenPred.apply(node))",
      "info" : "IfStatement[79136-79317]:IfStatement[79246-79427]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[79174-79317]:Block[79284-79427]"
    }, {
      "left" : "for (Node c = node.getFirstChild(); c != null; c = c.getNext())",
      "right" : "for (Node c = node.getFirstChild(); c != null; c = c.getNext())",
      "info" : "ForStatement[79182-79311]:ForStatement[79292-79421]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[79246-79311]:Block[79356-79421]"
    }, {
      "left" : "visitPreOrder(c, vistor, traverseChildrenPred);",
      "right" : "visitPreOrder(c, vistor, traverseChildrenPred);",
      "info" : "ExpressionStatement[79256-79303]:ExpressionStatement[79366-79413]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[79565-79782]:Block[79675-79892]"
    }, {
      "left" : "if (traverseChildrenPred.apply(node))",
      "right" : "if (traverseChildrenPred.apply(node))",
      "info" : "IfStatement[79571-79753]:IfStatement[79681-79863]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[79609-79753]:Block[79719-79863]"
    }, {
      "left" : "for (Node c = node.getFirstChild(); c != null; c = c.getNext())",
      "right" : "for (Node c = node.getFirstChild(); c != null; c = c.getNext())",
      "info" : "ForStatement[79617-79747]:ForStatement[79727-79857]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[79681-79747]:Block[79791-79857]"
    }, {
      "left" : "visitPostOrder(c, vistor, traverseChildrenPred);",
      "right" : "visitPostOrder(c, vistor, traverseChildrenPred);",
      "info" : "ExpressionStatement[79691-79739]:ExpressionStatement[79801-79849]"
    }, {
      "left" : "vistor.visit(node);",
      "right" : "vistor.visit(node);",
      "info" : "ExpressionStatement[79759-79778]:ExpressionStatement[79869-79888]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[79885-79984]:Block[79995-80094]"
    }, {
      "left" : "Preconditions.checkArgument(n.getType() == Token.TRY);",
      "right" : "Preconditions.checkArgument(n.getType() == Token.TRY);",
      "info" : "ExpressionStatement[79891-79945]:ExpressionStatement[80001-80055]"
    }, {
      "left" : "return n.getChildCount() == 3;",
      "right" : "return n.getChildCount() == 3;",
      "info" : "ReturnStatement[79950-79980]:ReturnStatement[80060-80090]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[80112-80216]:Block[80222-80326]"
    }, {
      "left" : "Preconditions.checkArgument(n.getType() == Token.TRY);",
      "right" : "Preconditions.checkArgument(n.getType() == Token.TRY);",
      "info" : "ExpressionStatement[80118-80172]:ExpressionStatement[80228-80282]"
    }, {
      "left" : "return n.getFirstChild().getNext();",
      "right" : "return n.getFirstChild().getNext();",
      "info" : "ReturnStatement[80177-80212]:ReturnStatement[80287-80322]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[80367-80507]:Block[80477-80617]"
    }, {
      "left" : "Preconditions.checkArgument(n.getType() == Token.BLOCK);",
      "right" : "Preconditions.checkArgument(n.getType() == Token.BLOCK);",
      "info" : "ExpressionStatement[80373-80429]:ExpressionStatement[80483-80539]"
    }, {
      "left" : "return n.hasChildren() && n.getFirstChild().getType() == Token.CATCH;",
      "right" : "return n.hasChildren() && n.getFirstChild().getType() == Token.CATCH;",
      "info" : "ReturnStatement[80434-80503]:ReturnStatement[80544-80613]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[80658-80843]:Block[80768-80953]"
    }, {
      "left" : "Preconditions.checkArgument(fnNode.getType() == Token.FUNCTION);",
      "right" : "Preconditions.checkArgument(fnNode.getType() == Token.FUNCTION);",
      "info" : "ExpressionStatement[80730-80794]:ExpressionStatement[80840-80904]"
    }, {
      "left" : "return fnNode.getFirstChild().getNext();",
      "right" : "return fnNode.getFirstChild().getNext();",
      "info" : "ReturnStatement[80799-80839]:ReturnStatement[80909-80949]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[81590-81650]:Block[81700-81760]"
    }, {
      "left" : "return node.getBooleanProp(Node.IS_CONSTANT_NAME);",
      "right" : "return node.getBooleanProp(Node.IS_CONSTANT_NAME);",
      "info" : "ReturnStatement[81596-81646]:ReturnStatement[81706-81756]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[81818-82143]:Block[81928-82253]"
    }, {
      "left" : "String name = node.getString();",
      "right" : "String name = node.getString();",
      "info" : "VariableDeclarationStatement[81824-81855]:VariableDeclarationStatement[81934-81965]"
    }, {
      "left" : "if (parent.getType() == Token.GETPROP &&\n        node == parent.getLastChild())",
      "right" : "if (parent.getType() == Token.GETPROP &&\n        node == parent.getLastChild())",
      "info" : "IfStatement[81860-82139]:IfStatement[81970-82249]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[81940-81992]:Block[82050-82102]"
    }, {
      "left" : "return convention.isConstantKey(name);",
      "right" : "return convention.isConstantKey(name);",
      "info" : "ReturnStatement[81948-81986]:ReturnStatement[82058-82096]"
    }, {
      "left" : "if (isObjectLitKey(node, parent))",
      "right" : "if (isObjectLitKey(node, parent))",
      "info" : "IfStatement[81998-82139]:IfStatement[82108-82249]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[82032-82084]:Block[82142-82194]"
    }, {
      "left" : "return convention.isConstantKey(name);",
      "right" : "return convention.isConstantKey(name);",
      "info" : "ReturnStatement[82040-82078]:ReturnStatement[82150-82188]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[82090-82139]:Block[82200-82249]"
    }, {
      "left" : "return convention.isConstant(name);",
      "right" : "return convention.isConstant(name);",
      "info" : "ReturnStatement[82098-82133]:ReturnStatement[82208-82243]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[82288-82672]:Block[82398-82782]"
    }, {
      "left" : "JSDocInfo info = null;",
      "right" : "JSDocInfo info = null;",
      "info" : "VariableDeclarationStatement[82294-82316]:VariableDeclarationStatement[82404-82426]"
    }, {
      "left" : "Node parent = null;",
      "right" : "Node parent = null;",
      "info" : "VariableDeclarationStatement[82321-82340]:VariableDeclarationStatement[82431-82450]"
    }, {
      "left" : "if (nameNode != null)",
      "right" : "if (nameNode != null)",
      "info" : "IfStatement[82345-82449]:IfStatement[82455-82559]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[82367-82449]:Block[82477-82559]"
    }, {
      "left" : "info = nameNode.getJSDocInfo();",
      "right" : "info = nameNode.getJSDocInfo();",
      "info" : "ExpressionStatement[82375-82406]:ExpressionStatement[82485-82516]"
    }, {
      "left" : "parent = nameNode.getParent();",
      "right" : "parent = nameNode.getParent();",
      "info" : "ExpressionStatement[82413-82443]:ExpressionStatement[82523-82553]"
    }, {
      "left" : "if (info == null && parent != null &&\n        ((parent.getType() == Token.VAR && parent.hasOneChild()) ||\n          parent.getType() == Token.FUNCTION))",
      "right" : "if (info == null && parent != null &&\n        ((parent.getType() == Token.VAR && parent.hasOneChild()) ||\n          parent.getType() == Token.FUNCTION))",
      "info" : "IfStatement[82455-82651]:IfStatement[82565-82761]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[82608-82651]:Block[82718-82761]"
    }, {
      "left" : "info = parent.getJSDocInfo();",
      "right" : "info = parent.getJSDocInfo();",
      "info" : "ExpressionStatement[82616-82645]:ExpressionStatement[82726-82755]"
    }, {
      "left" : "return info;",
      "right" : "return info;",
      "info" : "ReturnStatement[82656-82668]:ReturnStatement[82766-82778]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[82768-83304]:Block[82878-83414]"
    }, {
      "left" : "Preconditions.checkState(n.getType() == Token.FUNCTION);",
      "right" : "Preconditions.checkState(n.getType() == Token.FUNCTION);",
      "info" : "ExpressionStatement[82774-82830]:ExpressionStatement[82884-82940]"
    }, {
      "left" : "JSDocInfo fnInfo = n.getJSDocInfo();",
      "right" : "JSDocInfo fnInfo = n.getJSDocInfo();",
      "info" : "VariableDeclarationStatement[82835-82871]:VariableDeclarationStatement[82945-82981]"
    }, {
      "left" : "if (fnInfo == null && NodeUtil.isFunctionExpression(n))",
      "right" : "if (fnInfo == null && NodeUtil.isFunctionExpression(n))",
      "info" : "IfStatement[82876-83281]:IfStatement[82986-83391]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[82932-83281]:Block[83042-83391]"
    }, {
      "left" : "Node parent = n.getParent();",
      "right" : "Node parent = n.getParent();",
      "info" : "VariableDeclarationStatement[82983-83011]:VariableDeclarationStatement[83093-83121]"
    }, {
      "left" : "if (parent.getType() == Token.ASSIGN)",
      "right" : "if (parent.getType() == Token.ASSIGN)",
      "info" : "IfStatement[83018-83275]:IfStatement[83128-83385]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[83056-83127]:Block[83166-83237]"
    }, {
      "left" : "fnInfo = parent.getJSDocInfo();",
      "right" : "fnInfo = parent.getJSDocInfo();",
      "info" : "ExpressionStatement[83088-83119]:ExpressionStatement[83198-83229]"
    }, {
      "left" : "if (parent.getType() == Token.NAME)",
      "right" : "if (parent.getType() == Token.NAME)",
      "info" : "IfStatement[83133-83275]:IfStatement[83243-83385]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[83169-83275]:Block[83279-83385]"
    }, {
      "left" : "fnInfo = parent.getParent().getJSDocInfo();",
      "right" : "fnInfo = parent.getParent().getJSDocInfo();",
      "info" : "ExpressionStatement[83224-83267]:ExpressionStatement[83334-83377]"
    }, {
      "left" : "return fnInfo;",
      "right" : "return fnInfo;",
      "info" : "ReturnStatement[83286-83300]:ReturnStatement[83396-83410]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[83448-83644]:Block[83558-83754]"
    }, {
      "left" : "String sourceName = null;",
      "right" : "String sourceName = null;",
      "info" : "VariableDeclarationStatement[83454-83479]:VariableDeclarationStatement[83564-83589]"
    }, {
      "left" : "while (sourceName == null && n != null)",
      "right" : "while (sourceName == null && n != null)",
      "info" : "WhileStatement[83484-83617]:WhileStatement[83594-83727]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[83524-83617]:Block[83634-83727]"
    }, {
      "left" : "sourceName = (String) n.getProp(Node.SOURCENAME_PROP);",
      "right" : "sourceName = (String) n.getProp(Node.SOURCENAME_PROP);",
      "info" : "ExpressionStatement[83532-83586]:ExpressionStatement[83642-83696]"
    }, {
      "left" : "n = n.getParent();",
      "right" : "n = n.getParent();",
      "info" : "ExpressionStatement[83593-83611]:ExpressionStatement[83703-83721]"
    }, {
      "left" : "return sourceName;",
      "right" : "return sourceName;",
      "info" : "ReturnStatement[83622-83640]:ReturnStatement[83732-83750]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[83789-84043]:Block[83899-84153]"
    }, {
      "left" : "boolean isFreeCall = isName(callTarget);",
      "right" : "boolean isFreeCall = isName(callTarget);",
      "info" : "VariableDeclarationStatement[83795-83835]:VariableDeclarationStatement[83905-83945]"
    }, {
      "left" : "Node call = new Node(Token.CALL, callTarget);",
      "right" : "Node call = new Node(Token.CALL, callTarget);",
      "info" : "VariableDeclarationStatement[83840-83885]:VariableDeclarationStatement[83950-83995]"
    }, {
      "left" : "call.putBooleanProp(Node.FREE_CALL, isFreeCall);",
      "right" : "call.putBooleanProp(Node.FREE_CALL, isFreeCall);",
      "info" : "ExpressionStatement[83890-83938]:ExpressionStatement[84000-84048]"
    }, {
      "left" : "for (Node parameter : parameters)",
      "right" : "for (Node parameter : parameters)",
      "info" : "EnhancedForStatement[83943-84022]:EnhancedForStatement[84053-84132]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[83977-84022]:Block[84087-84132]"
    }, {
      "left" : "call.addChildToBack(parameter);",
      "right" : "call.addChildToBack(parameter);",
      "info" : "ExpressionStatement[83985-84016]:ExpressionStatement[84095-84126]"
    }, {
      "left" : "return call;",
      "right" : "return call;",
      "info" : "ReturnStatement[84027-84039]:ReturnStatement[84137-84149]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[84200-84278]:Block[84310-84388]"
    }, {
      "left" : "return evaluatesToLocalValue(value, Predicates.<Node>alwaysFalse());",
      "right" : "return evaluatesToLocalValue(value, Predicates.<Node>alwaysFalse());",
      "info" : "ReturnStatement[84206-84274]:ReturnStatement[84316-84384]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[84548-86971]:Block[84658-87081]"
    }, {
      "left" : "switch (value.getType()) {\n      case Token.ASSIGN:\n        // A result that is aliased by a non-local name, is the effectively the\n        // same as returning a non-local name, but this doesn't matter if the\n        // value is immutable.\n        return NodeUtil.isImmutableValue(value.getLastChild())\n            || (locals.apply(value)\n                && evaluatesToLocalValue(value.getLastChild(), locals));\n      case Token.COMMA:\n        return evaluatesToLocalValue(value.getLastChild(), locals);\n      case Token.AND:\n      case Token.OR:\n        return evaluatesToLocalValue(value.getFirstChild(), locals)\n           && evaluatesToLocalValue(value.getLastChild(), locals);\n      case Token.HOOK:\n        return evaluatesToLocalValue(value.getFirstChild().getNext(), locals)\n           && evaluatesToLocalValue(value.getLastChild(), locals);\n      case Token.INC:\n      case Token.DEC:\n        if (value.getBooleanProp(Node.INCRDECR_PROP)) {\n          return evaluatesToLocalValue(value.getFirstChild(), locals);\n        } else {\n          return true;\n        }\n      case Token.THIS:\n        return locals.apply(value);\n      case Token.NAME:\n        return isImmutableValue(value) || locals.apply(value);\n      case Token.GETELEM:\n      case Token.GETPROP:\n        // There is no information about the locality of object properties.\n        return locals.apply(value);\n      case Token.CALL:\n        return callHasLocalResult(value)\n            || isToStringMethodCall(value)\n            || locals.apply(value);\n      case Token.NEW:\n        return newHasLocalResult(value)\n               || locals.apply(value);\n      case Token.FUNCTION:\n      case Token.REGEXP:\n      case Token.ARRAYLIT:\n      case Token.OBJECTLIT:\n        // Literals objects with non-literal children are allowed.\n        return true;\n      case Token.DELPROP:\n      case Token.IN:\n        // TODO(johnlenz): should IN operator be included in #isSimpleOperator?\n        return true;\n      default:\n        // Other op force a local value:\n        //  x = '' + g (x is now an local string)\n        //  x -= g (x is now an local number)\n        if (isAssignmentOp(value)\n            || isSimpleOperator(value)\n            || isImmutableValue(value)) {\n          return true;\n        }\n\n        throw new IllegalStateException(\n            \"Unexpected expression node\" + value +\n            \"\\n parent:\" + value.getParent());\n    }",
      "right" : "switch (value.getType()) {\n      case Token.ASSIGN:\n        // A result that is aliased by a non-local name, is the effectively the\n        // same as returning a non-local name, but this doesn't matter if the\n        // value is immutable.\n        return NodeUtil.isImmutableValue(value.getLastChild())\n            || (locals.apply(value)\n                && evaluatesToLocalValue(value.getLastChild(), locals));\n      case Token.COMMA:\n        return evaluatesToLocalValue(value.getLastChild(), locals);\n      case Token.AND:\n      case Token.OR:\n        return evaluatesToLocalValue(value.getFirstChild(), locals)\n           && evaluatesToLocalValue(value.getLastChild(), locals);\n      case Token.HOOK:\n        return evaluatesToLocalValue(value.getFirstChild().getNext(), locals)\n           && evaluatesToLocalValue(value.getLastChild(), locals);\n      case Token.INC:\n      case Token.DEC:\n        if (value.getBooleanProp(Node.INCRDECR_PROP)) {\n          return evaluatesToLocalValue(value.getFirstChild(), locals);\n        } else {\n          return true;\n        }\n      case Token.THIS:\n        return locals.apply(value);\n      case Token.NAME:\n        return isImmutableValue(value) || locals.apply(value);\n      case Token.GETELEM:\n      case Token.GETPROP:\n        // There is no information about the locality of object properties.\n        return locals.apply(value);\n      case Token.CALL:\n        return callHasLocalResult(value)\n            || isToStringMethodCall(value)\n            || locals.apply(value);\n      case Token.NEW:\n        return newHasLocalResult(value)\n               || locals.apply(value);\n      case Token.FUNCTION:\n      case Token.REGEXP:\n      case Token.ARRAYLIT:\n      case Token.OBJECTLIT:\n        // Literals objects with non-literal children are allowed.\n        return true;\n      case Token.DELPROP:\n      case Token.IN:\n        // TODO(johnlenz): should IN operator be included in #isSimpleOperator?\n        return true;\n      default:\n        // Other op force a local value:\n        //  x = '' + g (x is now an local string)\n        //  x -= g (x is now an local number)\n        if (isAssignmentOp(value)\n            || isSimpleOperator(value)\n            || isImmutableValue(value)) {\n          return true;\n        }\n\n        throw new IllegalStateException(\n            \"Unexpected expression node\" + value +\n            \"\\n parent:\" + value.getParent());\n    }",
      "info" : "SwitchStatement[84554-86967]:SwitchStatement[84664-87077]"
    }, {
      "left" : "case Token.ASSIGN:",
      "right" : "case Token.ASSIGN:",
      "info" : "SwitchCase[84587-84605]:SwitchCase[84697-84715]"
    }, {
      "left" : "return NodeUtil.isImmutableValue(value.getLastChild())\n            || (locals.apply(value)\n                && evaluatesToLocalValue(value.getLastChild(), locals));",
      "right" : "return NodeUtil.isImmutableValue(value.getLastChild())\n            || (locals.apply(value)\n                && evaluatesToLocalValue(value.getLastChild(), locals));",
      "info" : "ReturnStatement[84803-84966]:ReturnStatement[84913-85076]"
    }, {
      "left" : "case Token.COMMA:",
      "right" : "case Token.COMMA:",
      "info" : "SwitchCase[84973-84990]:SwitchCase[85083-85100]"
    }, {
      "left" : "return evaluatesToLocalValue(value.getLastChild(), locals);",
      "right" : "return evaluatesToLocalValue(value.getLastChild(), locals);",
      "info" : "ReturnStatement[84999-85058]:ReturnStatement[85109-85168]"
    }, {
      "left" : "case Token.AND:",
      "right" : "case Token.AND:",
      "info" : "SwitchCase[85065-85080]:SwitchCase[85175-85190]"
    }, {
      "left" : "case Token.OR:",
      "right" : "case Token.OR:",
      "info" : "SwitchCase[85087-85101]:SwitchCase[85197-85211]"
    }, {
      "left" : "return evaluatesToLocalValue(value.getFirstChild(), locals)\n           && evaluatesToLocalValue(value.getLastChild(), locals);",
      "right" : "return evaluatesToLocalValue(value.getFirstChild(), locals)\n           && evaluatesToLocalValue(value.getLastChild(), locals);",
      "info" : "ReturnStatement[85110-85236]:ReturnStatement[85220-85346]"
    }, {
      "left" : "case Token.HOOK:",
      "right" : "case Token.HOOK:",
      "info" : "SwitchCase[85243-85259]:SwitchCase[85353-85369]"
    }, {
      "left" : "return evaluatesToLocalValue(value.getFirstChild().getNext(), locals)\n           && evaluatesToLocalValue(value.getLastChild(), locals);",
      "right" : "return evaluatesToLocalValue(value.getFirstChild().getNext(), locals)\n           && evaluatesToLocalValue(value.getLastChild(), locals);",
      "info" : "ReturnStatement[85268-85404]:ReturnStatement[85378-85514]"
    }, {
      "left" : "case Token.INC:",
      "right" : "case Token.INC:",
      "info" : "SwitchCase[85411-85426]:SwitchCase[85521-85536]"
    }, {
      "left" : "case Token.DEC:",
      "right" : "case Token.DEC:",
      "info" : "SwitchCase[85433-85448]:SwitchCase[85543-85558]"
    }, {
      "left" : "if (value.getBooleanProp(Node.INCRDECR_PROP))",
      "right" : "if (value.getBooleanProp(Node.INCRDECR_PROP))",
      "info" : "IfStatement[85457-85625]:IfStatement[85567-85735]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[85503-85585]:Block[85613-85695]"
    }, {
      "left" : "return evaluatesToLocalValue(value.getFirstChild(), locals);",
      "right" : "return evaluatesToLocalValue(value.getFirstChild(), locals);",
      "info" : "ReturnStatement[85515-85575]:ReturnStatement[85625-85685]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[85591-85625]:Block[85701-85735]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[85603-85615]:ReturnStatement[85713-85725]"
    }, {
      "left" : "case Token.THIS:",
      "right" : "case Token.THIS:",
      "info" : "SwitchCase[85632-85648]:SwitchCase[85742-85758]"
    }, {
      "left" : "return locals.apply(value);",
      "right" : "return locals.apply(value);",
      "info" : "ReturnStatement[85657-85684]:ReturnStatement[85767-85794]"
    }, {
      "left" : "case Token.NAME:",
      "right" : "case Token.NAME:",
      "info" : "SwitchCase[85691-85707]:SwitchCase[85801-85817]"
    }, {
      "left" : "return isImmutableValue(value) || locals.apply(value);",
      "right" : "return isImmutableValue(value) || locals.apply(value);",
      "info" : "ReturnStatement[85716-85770]:ReturnStatement[85826-85880]"
    }, {
      "left" : "case Token.GETELEM:",
      "right" : "case Token.GETELEM:",
      "info" : "SwitchCase[85777-85796]:SwitchCase[85887-85906]"
    }, {
      "left" : "case Token.GETPROP:",
      "right" : "case Token.GETPROP:",
      "info" : "SwitchCase[85803-85822]:SwitchCase[85913-85932]"
    }, {
      "left" : "return locals.apply(value);",
      "right" : "return locals.apply(value);",
      "info" : "ReturnStatement[85907-85934]:ReturnStatement[86017-86044]"
    }, {
      "left" : "case Token.CALL:",
      "right" : "case Token.CALL:",
      "info" : "SwitchCase[85941-85957]:SwitchCase[86051-86067]"
    }, {
      "left" : "return callHasLocalResult(value)\n            || isToStringMethodCall(value)\n            || locals.apply(value);",
      "right" : "return callHasLocalResult(value)\n            || isToStringMethodCall(value)\n            || locals.apply(value);",
      "info" : "ReturnStatement[85966-86077]:ReturnStatement[86076-86187]"
    }, {
      "left" : "case Token.NEW:",
      "right" : "case Token.NEW:",
      "info" : "SwitchCase[86084-86099]:SwitchCase[86194-86209]"
    }, {
      "left" : "return newHasLocalResult(value)\n               || locals.apply(value);",
      "right" : "return newHasLocalResult(value)\n               || locals.apply(value);",
      "info" : "ReturnStatement[86108-86178]:ReturnStatement[86218-86288]"
    }, {
      "left" : "case Token.FUNCTION:",
      "right" : "case Token.FUNCTION:",
      "info" : "SwitchCase[86185-86205]:SwitchCase[86295-86315]"
    }, {
      "left" : "case Token.REGEXP:",
      "right" : "case Token.REGEXP:",
      "info" : "SwitchCase[86212-86230]:SwitchCase[86322-86340]"
    }, {
      "left" : "case Token.ARRAYLIT:",
      "right" : "case Token.ARRAYLIT:",
      "info" : "SwitchCase[86237-86257]:SwitchCase[86347-86367]"
    }, {
      "left" : "case Token.OBJECTLIT:",
      "right" : "case Token.OBJECTLIT:",
      "info" : "SwitchCase[86264-86285]:SwitchCase[86374-86395]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[86361-86373]:ReturnStatement[86471-86483]"
    }, {
      "left" : "case Token.DELPROP:",
      "right" : "case Token.DELPROP:",
      "info" : "SwitchCase[86380-86399]:SwitchCase[86490-86509]"
    }, {
      "left" : "case Token.IN:",
      "right" : "case Token.IN:",
      "info" : "SwitchCase[86406-86420]:SwitchCase[86516-86530]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[86509-86521]:ReturnStatement[86619-86631]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[86528-86536]:SwitchCase[86638-86646]"
    }, {
      "left" : "if (isAssignmentOp(value)\n            || isSimpleOperator(value)\n            || isImmutableValue(value))",
      "right" : "if (isAssignmentOp(value)\n            || isSimpleOperator(value)\n            || isImmutableValue(value))",
      "info" : "IfStatement[86682-86821]:IfStatement[86792-86931]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[86787-86821]:Block[86897-86931]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[86799-86811]:ReturnStatement[86909-86921]"
    }, {
      "left" : "throw new IllegalStateException(\n            \"Unexpected expression node\" + value +\n            \"\\n parent:\" + value.getParent());",
      "right" : "throw new IllegalStateException(\n            \"Unexpected expression node\" + value +\n            \"\\n parent:\" + value.getParent());",
      "info" : "ThrowStatement[86831-86961]:ThrowStatement[86941-87071]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[87222-87373]:Block[87332-87483]"
    }, {
      "left" : "Node sibling = first;",
      "right" : "Node sibling = first;",
      "info" : "VariableDeclarationStatement[87228-87249]:VariableDeclarationStatement[87338-87359]"
    }, {
      "left" : "while (index != 0 && sibling != null)",
      "right" : "while (index != 0 && sibling != null)",
      "info" : "WhileStatement[87254-87349]:WhileStatement[87364-87459]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[87292-87349]:Block[87402-87459]"
    }, {
      "left" : "sibling = sibling.getNext();",
      "right" : "sibling = sibling.getNext();",
      "info" : "ExpressionStatement[87300-87328]:ExpressionStatement[87410-87438]"
    }, {
      "left" : "index--;",
      "right" : "index--;",
      "info" : "ExpressionStatement[87335-87343]:ExpressionStatement[87445-87453]"
    }, {
      "left" : "return sibling;",
      "right" : "return sibling;",
      "info" : "ReturnStatement[87354-87369]:ReturnStatement[87464-87479]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[87547-87698]:Block[87657-87808]"
    }, {
      "left" : "Preconditions.checkState(isFunction(function));",
      "right" : "Preconditions.checkState(isFunction(function));",
      "info" : "ExpressionStatement[87553-87600]:ExpressionStatement[87663-87710]"
    }, {
      "left" : "return getNthSibling(\n        function.getFirstChild().getNext().getFirstChild(), index);",
      "right" : "return getNthSibling(\n        function.getFirstChild().getNext().getFirstChild(), index);",
      "info" : "ReturnStatement[87605-87694]:ReturnStatement[87715-87804]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[87883-88009]:Block[87993-88119]"
    }, {
      "left" : "Preconditions.checkState(isCallOrNew(call));",
      "right" : "Preconditions.checkState(isCallOrNew(call));",
      "info" : "ExpressionStatement[87889-87933]:ExpressionStatement[87999-88043]"
    }, {
      "left" : "return getNthSibling(\n      call.getFirstChild().getNext(), index);",
      "right" : "return getNthSibling(\n      call.getFirstChild().getNext(), index);",
      "info" : "ReturnStatement[87938-88005]:ReturnStatement[88048-88115]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[88068-88286]:Block[88178-88396]"
    }, {
      "left" : "Node getNode = call.getFirstChild();",
      "right" : "Node getNode = call.getFirstChild();",
      "info" : "VariableDeclarationStatement[88074-88110]:VariableDeclarationStatement[88184-88220]"
    }, {
      "left" : "if (isGet(getNode))",
      "right" : "if (isGet(getNode))",
      "info" : "IfStatement[88115-88264]:IfStatement[88225-88374]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[88135-88264]:Block[88245-88374]"
    }, {
      "left" : "Node propNode = getNode.getLastChild();",
      "right" : "Node propNode = getNode.getLastChild();",
      "info" : "VariableDeclarationStatement[88143-88182]:VariableDeclarationStatement[88253-88292]"
    }, {
      "left" : "return isString(propNode) && \"toString\".equals(propNode.getString());",
      "right" : "return isString(propNode) && \"toString\".equals(propNode.getString());",
      "info" : "ReturnStatement[88189-88258]:ReturnStatement[88299-88368]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[88269-88282]:ReturnStatement[88379-88392]"
    } ]
  },
  "interFileMappings" : { }
}