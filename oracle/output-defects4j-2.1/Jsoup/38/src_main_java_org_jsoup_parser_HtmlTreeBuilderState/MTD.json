{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "enum : HtmlTreeBuilderState",
      "right" : "enum : HtmlTreeBuilderState",
      "info" : "EnumDeclaration[194-70231]:EnumDeclaration[194-70369]"
    }, {
      "left" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "right" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "info" : "MethodDeclaration[372-1367]:MethodDeclaration[372-1367]"
    }, {
      "left" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "right" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "info" : "MethodDeclaration[1400-2250]:MethodDeclaration[1400-2250]"
    }, {
      "left" : "private boolean anythingElse(Token t, HtmlTreeBuilder tb)",
      "right" : "private boolean anythingElse(Token t, HtmlTreeBuilder tb)",
      "info" : "MethodDeclaration[2260-2433]:MethodDeclaration[2260-2433]"
    }, {
      "left" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "right" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "info" : "MethodDeclaration[2466-3597]:MethodDeclaration[2466-3597]"
    }, {
      "left" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "right" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "info" : "MethodDeclaration[3626-6572]:MethodDeclaration[3626-6572]"
    }, {
      "left" : "private boolean anythingElse(Token t, TreeBuilder tb)",
      "right" : "private boolean anythingElse(Token t, TreeBuilder tb)",
      "info" : "MethodDeclaration[6582-6731]:MethodDeclaration[6582-6731]"
    }, {
      "left" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "right" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "info" : "MethodDeclaration[6768-7811]:MethodDeclaration[6768-7811]"
    }, {
      "left" : "private boolean anythingElse(Token t, HtmlTreeBuilder tb)",
      "right" : "private boolean anythingElse(Token t, HtmlTreeBuilder tb)",
      "info" : "MethodDeclaration[7821-8006]:MethodDeclaration[7821-8006]"
    }, {
      "left" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "right" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "info" : "MethodDeclaration[8038-9805]:MethodDeclaration[8038-9805]"
    }, {
      "left" : "private boolean anythingElse(Token t, HtmlTreeBuilder tb)",
      "right" : "private boolean anythingElse(Token t, HtmlTreeBuilder tb)",
      "info" : "MethodDeclaration[9815-10003]:MethodDeclaration[9815-10003]"
    }, {
      "left" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "right" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "info" : "MethodDeclaration[10032-37881]:MethodDeclaration[10032-38019]"
    }, {
      "left" : "boolean anyOtherEndTag(Token t, HtmlTreeBuilder tb)",
      "right" : "boolean anyOtherEndTag(Token t, HtmlTreeBuilder tb)",
      "info" : "MethodDeclaration[37891-38723]:MethodDeclaration[38029-38861]"
    }, {
      "left" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "right" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "info" : "MethodDeclaration[38813-39459]:MethodDeclaration[38951-39597]"
    }, {
      "left" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "right" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "info" : "MethodDeclaration[39489-43402]:MethodDeclaration[39627-43540]"
    }, {
      "left" : "boolean anythingElse(Token t, HtmlTreeBuilder tb)",
      "right" : "boolean anythingElse(Token t, HtmlTreeBuilder tb)",
      "info" : "MethodDeclaration[43412-43900]:MethodDeclaration[43550-44038]"
    }, {
      "left" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "right" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "info" : "MethodDeclaration[43934-45537]:MethodDeclaration[44072-45675]"
    }, {
      "left" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "right" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "info" : "MethodDeclaration[45569-47113]:MethodDeclaration[45707-47251]"
    }, {
      "left" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "right" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "info" : "MethodDeclaration[47149-48958]:MethodDeclaration[47287-49096]"
    }, {
      "left" : "private boolean anythingElse(Token t, TreeBuilder tb)",
      "right" : "private boolean anythingElse(Token t, TreeBuilder tb)",
      "info" : "MethodDeclaration[48968-49226]:MethodDeclaration[49106-49364]"
    }, {
      "left" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "right" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "info" : "MethodDeclaration[49260-51251]:MethodDeclaration[49398-51389]"
    }, {
      "left" : "private boolean exitTableBody(Token t, HtmlTreeBuilder tb)",
      "right" : "private boolean exitTableBody(Token t, HtmlTreeBuilder tb)",
      "info" : "MethodDeclaration[51261-51712]:MethodDeclaration[51399-51850]"
    }, {
      "left" : "private boolean anythingElse(Token t, HtmlTreeBuilder tb)",
      "right" : "private boolean anythingElse(Token t, HtmlTreeBuilder tb)",
      "info" : "MethodDeclaration[51722-51834]:MethodDeclaration[51860-51972]"
    }, {
      "left" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "right" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "info" : "MethodDeclaration[51862-53839]:MethodDeclaration[52000-53977]"
    }, {
      "left" : "private boolean anythingElse(Token t, HtmlTreeBuilder tb)",
      "right" : "private boolean anythingElse(Token t, HtmlTreeBuilder tb)",
      "info" : "MethodDeclaration[53849-53961]:MethodDeclaration[53987-54099]"
    }, {
      "left" : "private boolean handleMissingTr(Token t, TreeBuilder tb)",
      "right" : "private boolean handleMissingTr(Token t, TreeBuilder tb)",
      "info" : "MethodDeclaration[53971-54219]:MethodDeclaration[54109-54357]"
    }, {
      "left" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "right" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "info" : "MethodDeclaration[54248-56178]:MethodDeclaration[54386-56316]"
    }, {
      "left" : "private boolean anythingElse(Token t, HtmlTreeBuilder tb)",
      "right" : "private boolean anythingElse(Token t, HtmlTreeBuilder tb)",
      "info" : "MethodDeclaration[56188-56299]:MethodDeclaration[56326-56437]"
    }, {
      "left" : "private void closeCell(HtmlTreeBuilder tb)",
      "right" : "private void closeCell(HtmlTreeBuilder tb)",
      "info" : "MethodDeclaration[56309-56557]:MethodDeclaration[56447-56695]"
    }, {
      "left" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "right" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "info" : "MethodDeclaration[56588-60386]:MethodDeclaration[56726-60524]"
    }, {
      "left" : "private boolean anythingElse(Token t, HtmlTreeBuilder tb)",
      "right" : "private boolean anythingElse(Token t, HtmlTreeBuilder tb)",
      "info" : "MethodDeclaration[60396-60519]:MethodDeclaration[60534-60657]"
    }, {
      "left" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "right" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "info" : "MethodDeclaration[60557-61356]:MethodDeclaration[60695-61494]"
    }, {
      "left" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "right" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "info" : "MethodDeclaration[61388-62385]:MethodDeclaration[61526-62523]"
    }, {
      "left" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "right" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "info" : "MethodDeclaration[62418-64178]:MethodDeclaration[62556-64316]"
    }, {
      "left" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "right" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "info" : "MethodDeclaration[64214-65128]:MethodDeclaration[64352-65266]"
    }, {
      "left" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "right" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "info" : "MethodDeclaration[65165-65701]:MethodDeclaration[65303-65839]"
    }, {
      "left" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "right" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "info" : "MethodDeclaration[65742-66362]:MethodDeclaration[65880-66500]"
    }, {
      "left" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "right" : "boolean process(Token t, HtmlTreeBuilder tb)",
      "info" : "MethodDeclaration[66399-66538]:MethodDeclaration[66537-66676]"
    }, {
      "left" : "private static String nullString = String.valueOf('\\u0000');",
      "right" : "private static String nullString = String.valueOf('\\u0000');",
      "info" : "FieldDeclaration[66551-66611]:FieldDeclaration[66689-66749]"
    }, {
      "left" : "abstract boolean process(Token t, HtmlTreeBuilder tb);",
      "right" : "abstract boolean process(Token t, HtmlTreeBuilder tb);",
      "info" : "MethodDeclaration[66617-66671]:MethodDeclaration[66755-66809]"
    }, {
      "left" : "private static boolean isWhitespace(Token t)",
      "right" : "private static boolean isWhitespace(Token t)",
      "info" : "MethodDeclaration[66677-67140]:MethodDeclaration[66815-67278]"
    }, {
      "left" : "private static void handleRcData(Token.StartTag startTag, HtmlTreeBuilder tb)",
      "right" : "private static void handleRcData(Token.StartTag startTag, HtmlTreeBuilder tb)",
      "info" : "MethodDeclaration[67146-67377]:MethodDeclaration[67284-67515]"
    }, {
      "left" : "private static void handleRawtext(Token.StartTag startTag, HtmlTreeBuilder tb)",
      "right" : "private static void handleRawtext(Token.StartTag startTag, HtmlTreeBuilder tb)",
      "info" : "MethodDeclaration[67383-67616]:MethodDeclaration[67521-67754]"
    }, {
      "left" : "Constants",
      "right" : "Constants",
      "info" : "TypeDeclaration[67786-70229]:TypeDeclaration[67924-70367]"
    }, {
      "left" : "private static final String[] InBodyStartToHead = new String[]{\"base\", \"basefont\", \"bgsound\", \"command\", \"link\", \"meta\", \"noframes\", \"script\", \"style\", \"title\"};",
      "right" : "private static final String[] InBodyStartToHead = new String[]{\"base\", \"basefont\", \"bgsound\", \"command\", \"link\", \"meta\", \"noframes\", \"script\", \"style\", \"title\"};",
      "info" : "FieldDeclaration[67833-67994]:FieldDeclaration[67971-68132]"
    }, {
      "left" : "private static final String[] InBodyStartPClosers = new String[]{\"address\", \"article\", \"aside\", \"blockquote\", \"center\", \"details\", \"dir\", \"div\", \"dl\",\n                \"fieldset\", \"figcaption\", \"figure\", \"footer\", \"header\", \"hgroup\", \"menu\", \"nav\", \"ol\",\n                \"p\", \"section\", \"summary\", \"ul\"};",
      "right" : "private static final String[] InBodyStartPClosers = new String[]{\"address\", \"article\", \"aside\", \"blockquote\", \"center\", \"details\", \"dir\", \"div\", \"dl\",\n                \"fieldset\", \"figcaption\", \"figure\", \"footer\", \"header\", \"hgroup\", \"menu\", \"nav\", \"ol\",\n                \"p\", \"section\", \"summary\", \"ul\"};",
      "info" : "FieldDeclaration[68003-68306]:FieldDeclaration[68141-68444]"
    }, {
      "left" : "private static final String[] Headings = new String[]{\"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\"};",
      "right" : "private static final String[] Headings = new String[]{\"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\"};",
      "info" : "FieldDeclaration[68315-68405]:FieldDeclaration[68453-68543]"
    }, {
      "left" : "private static final String[] InBodyStartPreListing = new String[]{\"pre\", \"listing\"};",
      "right" : "private static final String[] InBodyStartPreListing = new String[]{\"pre\", \"listing\"};",
      "info" : "FieldDeclaration[68414-68499]:FieldDeclaration[68552-68637]"
    }, {
      "left" : "private static final String[] InBodyStartLiBreakers = new String[]{\"address\", \"div\", \"p\"};",
      "right" : "private static final String[] InBodyStartLiBreakers = new String[]{\"address\", \"div\", \"p\"};",
      "info" : "FieldDeclaration[68508-68598]:FieldDeclaration[68646-68736]"
    }, {
      "left" : "private static final String[] DdDt = new String[]{\"dd\", \"dt\"};",
      "right" : "private static final String[] DdDt = new String[]{\"dd\", \"dt\"};",
      "info" : "FieldDeclaration[68607-68669]:FieldDeclaration[68745-68807]"
    }, {
      "left" : "private static final String[] Formatters = new String[]{\"b\", \"big\", \"code\", \"em\", \"font\", \"i\", \"s\", \"small\", \"strike\", \"strong\", \"tt\", \"u\"};",
      "right" : "private static final String[] Formatters = new String[]{\"b\", \"big\", \"code\", \"em\", \"font\", \"i\", \"s\", \"small\", \"strike\", \"strong\", \"tt\", \"u\"};",
      "info" : "FieldDeclaration[68678-68818]:FieldDeclaration[68816-68956]"
    }, {
      "left" : "private static final String[] InBodyStartApplets = new String[]{\"applet\", \"marquee\", \"object\"};",
      "right" : "private static final String[] InBodyStartApplets = new String[]{\"applet\", \"marquee\", \"object\"};",
      "info" : "FieldDeclaration[68827-68922]:FieldDeclaration[68965-69060]"
    }, {
      "left" : "private static final String[] InBodyStartEmptyFormatters = new String[]{\"area\", \"br\", \"embed\", \"img\", \"keygen\", \"wbr\"};",
      "right" : "private static final String[] InBodyStartEmptyFormatters = new String[]{\"area\", \"br\", \"embed\", \"img\", \"keygen\", \"wbr\"};",
      "info" : "FieldDeclaration[68931-69050]:FieldDeclaration[69069-69188]"
    }, {
      "left" : "private static final String[] InBodyStartMedia = new String[]{\"param\", \"source\", \"track\"};",
      "right" : "private static final String[] InBodyStartMedia = new String[]{\"param\", \"source\", \"track\"};",
      "info" : "FieldDeclaration[69059-69149]:FieldDeclaration[69197-69287]"
    }, {
      "left" : "private static final String[] InBodyStartInputAttribs = new String[]{\"name\", \"action\", \"prompt\"};",
      "right" : "private static final String[] InBodyStartInputAttribs = new String[]{\"name\", \"action\", \"prompt\"};",
      "info" : "FieldDeclaration[69158-69255]:FieldDeclaration[69296-69393]"
    }, {
      "left" : "private static final String[] InBodyStartOptions = new String[]{\"optgroup\", \"option\"};",
      "right" : "private static final String[] InBodyStartOptions = new String[]{\"optgroup\", \"option\"};",
      "info" : "FieldDeclaration[69264-69350]:FieldDeclaration[69402-69488]"
    }, {
      "left" : "private static final String[] InBodyStartRuby = new String[]{\"rp\", \"rt\"};",
      "right" : "private static final String[] InBodyStartRuby = new String[]{\"rp\", \"rt\"};",
      "info" : "FieldDeclaration[69359-69432]:FieldDeclaration[69497-69570]"
    }, {
      "left" : "private static final String[] InBodyStartDrop = new String[]{\"caption\", \"col\", \"colgroup\", \"frame\", \"head\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\"};",
      "right" : "private static final String[] InBodyStartDrop = new String[]{\"caption\", \"col\", \"colgroup\", \"frame\", \"head\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\"};",
      "info" : "FieldDeclaration[69441-69594]:FieldDeclaration[69579-69732]"
    }, {
      "left" : "private static final String[] InBodyEndClosers = new String[]{\"address\", \"article\", \"aside\", \"blockquote\", \"button\", \"center\", \"details\", \"dir\", \"div\",\n                \"dl\", \"fieldset\", \"figcaption\", \"figure\", \"footer\", \"header\", \"hgroup\", \"listing\", \"menu\",\n                \"nav\", \"ol\", \"pre\", \"section\", \"summary\", \"ul\"};",
      "right" : "private static final String[] InBodyEndClosers = new String[]{\"address\", \"article\", \"aside\", \"blockquote\", \"button\", \"center\", \"details\", \"dir\", \"div\",\n                \"dl\", \"fieldset\", \"figcaption\", \"figure\", \"footer\", \"header\", \"hgroup\", \"listing\", \"menu\",\n                \"nav\", \"ol\", \"pre\", \"section\", \"summary\", \"ul\"};",
      "info" : "FieldDeclaration[69603-69926]:FieldDeclaration[69741-70064]"
    }, {
      "left" : "private static final String[] InBodyEndAdoptionFormatters = new String[]{\"a\", \"b\", \"big\", \"code\", \"em\", \"font\", \"i\", \"nobr\", \"s\", \"small\", \"strike\", \"strong\", \"tt\", \"u\"};",
      "right" : "private static final String[] InBodyEndAdoptionFormatters = new String[]{\"a\", \"b\", \"big\", \"code\", \"em\", \"font\", \"i\", \"nobr\", \"s\", \"small\", \"strike\", \"strong\", \"tt\", \"u\"};",
      "info" : "FieldDeclaration[69935-70105]:FieldDeclaration[70073-70243]"
    }, {
      "left" : "private static final String[] InBodyEndTableFosters = new String[]{\"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\"};",
      "right" : "private static final String[] InBodyEndTableFosters = new String[]{\"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\"};",
      "info" : "FieldDeclaration[70114-70223]:FieldDeclaration[70252-70361]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[417-1367]:Block[417-1367]"
    }, {
      "left" : "if (isWhitespace(t))",
      "right" : "if (isWhitespace(t))",
      "info" : "IfStatement[431-1332]:IfStatement[431-1332]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[452-517]:Block[452-517]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[470-482]:ReturnStatement[470-482]"
    }, {
      "left" : "if (t.isComment())",
      "right" : "if (t.isComment())",
      "info" : "IfStatement[523-1332]:IfStatement[523-1332]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[542-599]:Block[542-599]"
    }, {
      "left" : "tb.insert(t.asComment());",
      "right" : "tb.insert(t.asComment());",
      "info" : "ExpressionStatement[560-585]:ExpressionStatement[560-585]"
    }, {
      "left" : "if (t.isDoctype())",
      "right" : "if (t.isDoctype())",
      "info" : "IfStatement[605-1332]:IfStatement[605-1332]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[624-1161]:Block[624-1161]"
    }, {
      "left" : "Token.Doctype d = t.asDoctype();",
      "right" : "Token.Doctype d = t.asDoctype();",
      "info" : "VariableDeclarationStatement[764-796]:VariableDeclarationStatement[764-796]"
    }, {
      "left" : "DocumentType doctype = new DocumentType(d.getName(), d.getPublicIdentifier(), d.getSystemIdentifier(), tb.getBaseUri());",
      "right" : "DocumentType doctype = new DocumentType(d.getName(), d.getPublicIdentifier(), d.getSystemIdentifier(), tb.getBaseUri());",
      "info" : "VariableDeclarationStatement[813-933]:VariableDeclarationStatement[813-933]"
    }, {
      "left" : "tb.getDocument().appendChild(doctype);",
      "right" : "tb.getDocument().appendChild(doctype);",
      "info" : "ExpressionStatement[950-988]:ExpressionStatement[950-988]"
    }, {
      "left" : "if (d.isForceQuirks())",
      "right" : "if (d.isForceQuirks())",
      "info" : "IfStatement[1005-1104]:IfStatement[1005-1104]"
    }, {
      "left" : "tb.getDocument().quirksMode(Document.QuirksMode.quirks);",
      "right" : "tb.getDocument().quirksMode(Document.QuirksMode.quirks);",
      "info" : "ExpressionStatement[1048-1104]:ExpressionStatement[1048-1104]"
    }, {
      "left" : "tb.transition(BeforeHtml);",
      "right" : "tb.transition(BeforeHtml);",
      "info" : "ExpressionStatement[1121-1147]:ExpressionStatement[1121-1147]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1167-1332]:Block[1167-1332]"
    }, {
      "left" : "tb.transition(BeforeHtml);",
      "right" : "tb.transition(BeforeHtml);",
      "info" : "ExpressionStatement[1234-1260]:ExpressionStatement[1234-1260]"
    }, {
      "left" : "return tb.process(t);",
      "right" : "return tb.process(t);",
      "info" : "ReturnStatement[1277-1298]:ReturnStatement[1277-1298]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[1345-1357]:ReturnStatement[1345-1357]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1445-2250]:Block[1445-2250]"
    }, {
      "left" : "if (t.isDoctype())",
      "right" : "if (t.isDoctype())",
      "info" : "IfStatement[1459-2215]:IfStatement[1459-2215]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1478-1555]:Block[1478-1555]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[1496-1511]:ExpressionStatement[1496-1511]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[1528-1541]:ReturnStatement[1528-1541]"
    }, {
      "left" : "if (t.isComment())",
      "right" : "if (t.isComment())",
      "info" : "IfStatement[1561-2215]:IfStatement[1561-2215]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1580-1637]:Block[1580-1637]"
    }, {
      "left" : "tb.insert(t.asComment());",
      "right" : "tb.insert(t.asComment());",
      "info" : "ExpressionStatement[1598-1623]:ExpressionStatement[1598-1623]"
    }, {
      "left" : "if (isWhitespace(t))",
      "right" : "if (isWhitespace(t))",
      "info" : "IfStatement[1643-2215]:IfStatement[1643-2215]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1664-1729]:Block[1664-1729]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[1682-1694]:ReturnStatement[1682-1694]"
    }, {
      "left" : "if (t.isStartTag() && t.asStartTag().name().equals(\"html\"))",
      "right" : "if (t.isStartTag() && t.asStartTag().name().equals(\"html\"))",
      "info" : "IfStatement[1735-2215]:IfStatement[1735-2215]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1795-1896]:Block[1795-1896]"
    }, {
      "left" : "tb.insert(t.asStartTag());",
      "right" : "tb.insert(t.asStartTag());",
      "info" : "ExpressionStatement[1813-1839]:ExpressionStatement[1813-1839]"
    }, {
      "left" : "tb.transition(BeforeHead);",
      "right" : "tb.transition(BeforeHead);",
      "info" : "ExpressionStatement[1856-1882]:ExpressionStatement[1856-1882]"
    }, {
      "left" : "if (t.isEndTag() && (StringUtil.in(t.asEndTag().name(), \"head\", \"body\", \"html\", \"br\")))",
      "right" : "if (t.isEndTag() && (StringUtil.in(t.asEndTag().name(), \"head\", \"body\", \"html\", \"br\")))",
      "info" : "IfStatement[1902-2215]:IfStatement[1902-2215]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1990-2049]:Block[1990-2049]"
    }, {
      "left" : "return anythingElse(t, tb);",
      "right" : "return anythingElse(t, tb);",
      "info" : "ReturnStatement[2008-2035]:ReturnStatement[2008-2035]"
    }, {
      "left" : "if (t.isEndTag())",
      "right" : "if (t.isEndTag())",
      "info" : "IfStatement[2055-2215]:IfStatement[2055-2215]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2073-2150]:Block[2073-2150]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[2091-2106]:ExpressionStatement[2091-2106]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[2123-2136]:ReturnStatement[2123-2136]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2156-2215]:Block[2156-2215]"
    }, {
      "left" : "return anythingElse(t, tb);",
      "right" : "return anythingElse(t, tb);",
      "info" : "ReturnStatement[2174-2201]:ReturnStatement[2174-2201]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[2228-2240]:ReturnStatement[2228-2240]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2318-2433]:Block[2318-2433]"
    }, {
      "left" : "tb.insert(\"html\");",
      "right" : "tb.insert(\"html\");",
      "info" : "ExpressionStatement[2332-2350]:ExpressionStatement[2332-2350]"
    }, {
      "left" : "tb.transition(BeforeHead);",
      "right" : "tb.transition(BeforeHead);",
      "info" : "ExpressionStatement[2363-2389]:ExpressionStatement[2363-2389]"
    }, {
      "left" : "return tb.process(t);",
      "right" : "return tb.process(t);",
      "info" : "ReturnStatement[2402-2423]:ReturnStatement[2402-2423]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2511-3597]:Block[2511-3597]"
    }, {
      "left" : "if (isWhitespace(t))",
      "right" : "if (isWhitespace(t))",
      "info" : "IfStatement[2525-3562]:IfStatement[2525-3562]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2546-2590]:Block[2546-2590]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[2564-2576]:ReturnStatement[2564-2576]"
    }, {
      "left" : "if (t.isComment())",
      "right" : "if (t.isComment())",
      "info" : "IfStatement[2596-3562]:IfStatement[2596-3562]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2615-2672]:Block[2615-2672]"
    }, {
      "left" : "tb.insert(t.asComment());",
      "right" : "tb.insert(t.asComment());",
      "info" : "ExpressionStatement[2633-2658]:ExpressionStatement[2633-2658]"
    }, {
      "left" : "if (t.isDoctype())",
      "right" : "if (t.isDoctype())",
      "info" : "IfStatement[2678-3562]:IfStatement[2678-3562]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2697-2774]:Block[2697-2774]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[2715-2730]:ExpressionStatement[2715-2730]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[2747-2760]:ReturnStatement[2747-2760]"
    }, {
      "left" : "if (t.isStartTag() && t.asStartTag().name().equals(\"html\"))",
      "right" : "if (t.isStartTag() && t.asStartTag().name().equals(\"html\"))",
      "info" : "IfStatement[2780-3562]:IfStatement[2780-3562]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2840-2924]:Block[2840-2924]"
    }, {
      "left" : "return InBody.process(t, tb);",
      "right" : "return InBody.process(t, tb);",
      "info" : "ReturnStatement[2858-2887]:ReturnStatement[2858-2887]"
    }, {
      "left" : "if (t.isStartTag() && t.asStartTag().name().equals(\"head\"))",
      "right" : "if (t.isStartTag() && t.asStartTag().name().equals(\"head\"))",
      "info" : "IfStatement[2930-3562]:IfStatement[2930-3562]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2990-3143]:Block[2990-3143]"
    }, {
      "left" : "Element head = tb.insert(t.asStartTag());",
      "right" : "Element head = tb.insert(t.asStartTag());",
      "info" : "VariableDeclarationStatement[3008-3049]:VariableDeclarationStatement[3008-3049]"
    }, {
      "left" : "tb.setHeadElement(head);",
      "right" : "tb.setHeadElement(head);",
      "info" : "ExpressionStatement[3066-3090]:ExpressionStatement[3066-3090]"
    }, {
      "left" : "tb.transition(InHead);",
      "right" : "tb.transition(InHead);",
      "info" : "ExpressionStatement[3107-3129]:ExpressionStatement[3107-3129]"
    }, {
      "left" : "if (t.isEndTag() && (StringUtil.in(t.asEndTag().name(), \"head\", \"body\", \"html\", \"br\")))",
      "right" : "if (t.isEndTag() && (StringUtil.in(t.asEndTag().name(), \"head\", \"body\", \"html\", \"br\")))",
      "info" : "IfStatement[3149-3562]:IfStatement[3149-3562]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3237-3346]:Block[3237-3346]"
    }, {
      "left" : "tb.process(new Token.StartTag(\"head\"));",
      "right" : "tb.process(new Token.StartTag(\"head\"));",
      "info" : "ExpressionStatement[3255-3294]:ExpressionStatement[3255-3294]"
    }, {
      "left" : "return tb.process(t);",
      "right" : "return tb.process(t);",
      "info" : "ReturnStatement[3311-3332]:ReturnStatement[3311-3332]"
    }, {
      "left" : "if (t.isEndTag())",
      "right" : "if (t.isEndTag())",
      "info" : "IfStatement[3352-3562]:IfStatement[3352-3562]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3370-3447]:Block[3370-3447]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[3388-3403]:ExpressionStatement[3388-3403]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[3420-3433]:ReturnStatement[3420-3433]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3453-3562]:Block[3453-3562]"
    }, {
      "left" : "tb.process(new Token.StartTag(\"head\"));",
      "right" : "tb.process(new Token.StartTag(\"head\"));",
      "info" : "ExpressionStatement[3471-3510]:ExpressionStatement[3471-3510]"
    }, {
      "left" : "return tb.process(t);",
      "right" : "return tb.process(t);",
      "info" : "ReturnStatement[3527-3548]:ReturnStatement[3527-3548]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[3575-3587]:ReturnStatement[3575-3587]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3671-6572]:Block[3671-6572]"
    }, {
      "left" : "if (isWhitespace(t))",
      "right" : "if (isWhitespace(t))",
      "info" : "IfStatement[3685-3794]:IfStatement[3685-3794]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3706-3794]:Block[3706-3794]"
    }, {
      "left" : "tb.insert(t.asCharacter());",
      "right" : "tb.insert(t.asCharacter());",
      "info" : "ExpressionStatement[3724-3751]:ExpressionStatement[3724-3751]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[3768-3780]:ReturnStatement[3768-3780]"
    }, {
      "left" : "switch (t.type) {\n                case Comment:\n                    tb.insert(t.asComment());\n                    break;\n                case Doctype:\n                    tb.error(this);\n                    return false;\n                case StartTag:\n                    Token.StartTag start = t.asStartTag();\n                    String name = start.name();\n                    if (name.equals(\"html\")) {\n                        return InBody.process(t, tb);\n                    } else if (StringUtil.in(name, \"base\", \"basefont\", \"bgsound\", \"command\", \"link\")) {\n                        Element el = tb.insertEmpty(start);\n                        // jsoup special: update base the frist time it is seen\n                        if (name.equals(\"base\") && el.hasAttr(\"href\"))\n                            tb.maybeSetBaseUri(el);\n                    } else if (name.equals(\"meta\")) {\n                        Element meta = tb.insertEmpty(start);\n                        // todo: charset switches\n                    } else if (name.equals(\"title\")) {\n                        handleRcData(start, tb);\n                    } else if (StringUtil.in(name, \"noframes\", \"style\")) {\n                        handleRawtext(start, tb);\n                    } else if (name.equals(\"noscript\")) {\n                        // else if noscript && scripting flag = true: rawtext (jsoup doesn't run script, to handle as noscript)\n                        tb.insert(start);\n                        tb.transition(InHeadNoscript);\n                    } else if (name.equals(\"script\")) {\n                        // skips some script rules as won't execute them\n\n                        tb.tokeniser.transition(TokeniserState.ScriptData);\n                        tb.markInsertionMode();\n                        tb.transition(Text);\n                        tb.insert(start);\n                    } else if (name.equals(\"head\")) {\n                        tb.error(this);\n                        return false;\n                    } else {\n                        return anythingElse(t, tb);\n                    }\n                    break;\n                case EndTag:\n                    Token.EndTag end = t.asEndTag();\n                    name = end.name();\n                    if (name.equals(\"head\")) {\n                        tb.pop();\n                        tb.transition(AfterHead);\n                    } else if (StringUtil.in(name, \"body\", \"html\", \"br\")) {\n                        return anythingElse(t, tb);\n                    } else {\n                        tb.error(this);\n                        return false;\n                    }\n                    break;\n                default:\n                    return anythingElse(t, tb);\n            }",
      "right" : "switch (t.type) {\n                case Comment:\n                    tb.insert(t.asComment());\n                    break;\n                case Doctype:\n                    tb.error(this);\n                    return false;\n                case StartTag:\n                    Token.StartTag start = t.asStartTag();\n                    String name = start.name();\n                    if (name.equals(\"html\")) {\n                        return InBody.process(t, tb);\n                    } else if (StringUtil.in(name, \"base\", \"basefont\", \"bgsound\", \"command\", \"link\")) {\n                        Element el = tb.insertEmpty(start);\n                        // jsoup special: update base the frist time it is seen\n                        if (name.equals(\"base\") && el.hasAttr(\"href\"))\n                            tb.maybeSetBaseUri(el);\n                    } else if (name.equals(\"meta\")) {\n                        Element meta = tb.insertEmpty(start);\n                        // todo: charset switches\n                    } else if (name.equals(\"title\")) {\n                        handleRcData(start, tb);\n                    } else if (StringUtil.in(name, \"noframes\", \"style\")) {\n                        handleRawtext(start, tb);\n                    } else if (name.equals(\"noscript\")) {\n                        // else if noscript && scripting flag = true: rawtext (jsoup doesn't run script, to handle as noscript)\n                        tb.insert(start);\n                        tb.transition(InHeadNoscript);\n                    } else if (name.equals(\"script\")) {\n                        // skips some script rules as won't execute them\n\n                        tb.tokeniser.transition(TokeniserState.ScriptData);\n                        tb.markInsertionMode();\n                        tb.transition(Text);\n                        tb.insert(start);\n                    } else if (name.equals(\"head\")) {\n                        tb.error(this);\n                        return false;\n                    } else {\n                        return anythingElse(t, tb);\n                    }\n                    break;\n                case EndTag:\n                    Token.EndTag end = t.asEndTag();\n                    name = end.name();\n                    if (name.equals(\"head\")) {\n                        tb.pop();\n                        tb.transition(AfterHead);\n                    } else if (StringUtil.in(name, \"body\", \"html\", \"br\")) {\n                        return anythingElse(t, tb);\n                    } else {\n                        tb.error(this);\n                        return false;\n                    }\n                    break;\n                default:\n                    return anythingElse(t, tb);\n            }",
      "info" : "SwitchStatement[3807-6537]:SwitchStatement[3807-6537]"
    }, {
      "left" : "case Comment:",
      "right" : "case Comment:",
      "info" : "SwitchCase[3841-3854]:SwitchCase[3841-3854]"
    }, {
      "left" : "tb.insert(t.asComment());",
      "right" : "tb.insert(t.asComment());",
      "info" : "ExpressionStatement[3875-3900]:ExpressionStatement[3875-3900]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[3921-3927]:BreakStatement[3921-3927]"
    }, {
      "left" : "case Doctype:",
      "right" : "case Doctype:",
      "info" : "SwitchCase[3944-3957]:SwitchCase[3944-3957]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[3978-3993]:ExpressionStatement[3978-3993]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[4014-4027]:ReturnStatement[4014-4027]"
    }, {
      "left" : "case StartTag:",
      "right" : "case StartTag:",
      "info" : "SwitchCase[4044-4058]:SwitchCase[4044-4058]"
    }, {
      "left" : "Token.StartTag start = t.asStartTag();",
      "right" : "Token.StartTag start = t.asStartTag();",
      "info" : "VariableDeclarationStatement[4079-4117]:VariableDeclarationStatement[4079-4117]"
    }, {
      "left" : "String name = start.name();",
      "right" : "String name = start.name();",
      "info" : "VariableDeclarationStatement[4138-4165]:VariableDeclarationStatement[4138-4165]"
    }, {
      "left" : "if (name.equals(\"html\"))",
      "right" : "if (name.equals(\"html\"))",
      "info" : "IfStatement[4186-5887]:IfStatement[4186-5887]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4211-4288]:Block[4211-4288]"
    }, {
      "left" : "return InBody.process(t, tb);",
      "right" : "return InBody.process(t, tb);",
      "info" : "ReturnStatement[4237-4266]:ReturnStatement[4237-4266]"
    }, {
      "left" : "if (StringUtil.in(name, \"base\", \"basefont\", \"bgsound\", \"command\", \"link\"))",
      "right" : "if (StringUtil.in(name, \"base\", \"basefont\", \"bgsound\", \"command\", \"link\"))",
      "info" : "IfStatement[4294-5887]:IfStatement[4294-5887]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4369-4655]:Block[4369-4655]"
    }, {
      "left" : "Element el = tb.insertEmpty(start);",
      "right" : "Element el = tb.insertEmpty(start);",
      "info" : "VariableDeclarationStatement[4395-4430]:VariableDeclarationStatement[4395-4430]"
    }, {
      "left" : "if (name.equals(\"base\") && el.hasAttr(\"href\"))",
      "right" : "if (name.equals(\"base\") && el.hasAttr(\"href\"))",
      "info" : "IfStatement[4535-4633]:IfStatement[4535-4633]"
    }, {
      "left" : "tb.maybeSetBaseUri(el);",
      "right" : "tb.maybeSetBaseUri(el);",
      "info" : "ExpressionStatement[4610-4633]:ExpressionStatement[4610-4633]"
    }, {
      "left" : "if (name.equals(\"meta\"))",
      "right" : "if (name.equals(\"meta\"))",
      "info" : "IfStatement[4661-5887]:IfStatement[4661-5887]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4686-4821]:Block[4686-4821]"
    }, {
      "left" : "Element meta = tb.insertEmpty(start);",
      "right" : "Element meta = tb.insertEmpty(start);",
      "info" : "VariableDeclarationStatement[4712-4749]:VariableDeclarationStatement[4712-4749]"
    }, {
      "left" : "if (name.equals(\"title\"))",
      "right" : "if (name.equals(\"title\"))",
      "info" : "IfStatement[4827-5887]:IfStatement[4827-5887]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4853-4925]:Block[4853-4925]"
    }, {
      "left" : "handleRcData(start, tb);",
      "right" : "handleRcData(start, tb);",
      "info" : "ExpressionStatement[4879-4903]:ExpressionStatement[4879-4903]"
    }, {
      "left" : "if (StringUtil.in(name, \"noframes\", \"style\"))",
      "right" : "if (StringUtil.in(name, \"noframes\", \"style\"))",
      "info" : "IfStatement[4931-5887]:IfStatement[4931-5887]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4977-5050]:Block[4977-5050]"
    }, {
      "left" : "handleRawtext(start, tb);",
      "right" : "handleRawtext(start, tb);",
      "info" : "ExpressionStatement[5003-5028]:ExpressionStatement[5003-5028]"
    }, {
      "left" : "if (name.equals(\"noscript\"))",
      "right" : "if (name.equals(\"noscript\"))",
      "info" : "IfStatement[5056-5887]:IfStatement[5056-5887]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5085-5333]:Block[5085-5333]"
    }, {
      "left" : "tb.insert(start);",
      "right" : "tb.insert(start);",
      "info" : "ExpressionStatement[5239-5256]:ExpressionStatement[5239-5256]"
    }, {
      "left" : "tb.transition(InHeadNoscript);",
      "right" : "tb.transition(InHeadNoscript);",
      "info" : "ExpressionStatement[5281-5311]:ExpressionStatement[5281-5311]"
    }, {
      "left" : "if (name.equals(\"script\"))",
      "right" : "if (name.equals(\"script\"))",
      "info" : "IfStatement[5339-5887]:IfStatement[5339-5887]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5366-5674]:Block[5366-5674]"
    }, {
      "left" : "tb.tokeniser.transition(TokeniserState.ScriptData);",
      "right" : "tb.tokeniser.transition(TokeniserState.ScriptData);",
      "info" : "ExpressionStatement[5466-5517]:ExpressionStatement[5466-5517]"
    }, {
      "left" : "tb.markInsertionMode();",
      "right" : "tb.markInsertionMode();",
      "info" : "ExpressionStatement[5542-5565]:ExpressionStatement[5542-5565]"
    }, {
      "left" : "tb.transition(Text);",
      "right" : "tb.transition(Text);",
      "info" : "ExpressionStatement[5590-5610]:ExpressionStatement[5590-5610]"
    }, {
      "left" : "tb.insert(start);",
      "right" : "tb.insert(start);",
      "info" : "ExpressionStatement[5635-5652]:ExpressionStatement[5635-5652]"
    }, {
      "left" : "if (name.equals(\"head\"))",
      "right" : "if (name.equals(\"head\"))",
      "info" : "IfStatement[5680-5887]:IfStatement[5680-5887]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5705-5806]:Block[5705-5806]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[5731-5746]:ExpressionStatement[5731-5746]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[5771-5784]:ReturnStatement[5771-5784]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5812-5887]:Block[5812-5887]"
    }, {
      "left" : "return anythingElse(t, tb);",
      "right" : "return anythingElse(t, tb);",
      "info" : "ReturnStatement[5838-5865]:ReturnStatement[5838-5865]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[5908-5914]:BreakStatement[5908-5914]"
    }, {
      "left" : "case EndTag:",
      "right" : "case EndTag:",
      "info" : "SwitchCase[5931-5943]:SwitchCase[5931-5943]"
    }, {
      "left" : "Token.EndTag end = t.asEndTag();",
      "right" : "Token.EndTag end = t.asEndTag();",
      "info" : "VariableDeclarationStatement[5964-5996]:VariableDeclarationStatement[5964-5996]"
    }, {
      "left" : "name = end.name();",
      "right" : "name = end.name();",
      "info" : "ExpressionStatement[6017-6035]:ExpressionStatement[6017-6035]"
    }, {
      "left" : "if (name.equals(\"head\"))",
      "right" : "if (name.equals(\"head\"))",
      "info" : "IfStatement[6056-6423]:IfStatement[6056-6423]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6081-6188]:Block[6081-6188]"
    }, {
      "left" : "tb.pop();",
      "right" : "tb.pop();",
      "info" : "ExpressionStatement[6107-6116]:ExpressionStatement[6107-6116]"
    }, {
      "left" : "tb.transition(AfterHead);",
      "right" : "tb.transition(AfterHead);",
      "info" : "ExpressionStatement[6141-6166]:ExpressionStatement[6141-6166]"
    }, {
      "left" : "if (StringUtil.in(name, \"body\", \"html\", \"br\"))",
      "right" : "if (StringUtil.in(name, \"body\", \"html\", \"br\"))",
      "info" : "IfStatement[6194-6423]:IfStatement[6194-6423]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6241-6316]:Block[6241-6316]"
    }, {
      "left" : "return anythingElse(t, tb);",
      "right" : "return anythingElse(t, tb);",
      "info" : "ReturnStatement[6267-6294]:ReturnStatement[6267-6294]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6322-6423]:Block[6322-6423]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[6348-6363]:ExpressionStatement[6348-6363]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[6388-6401]:ReturnStatement[6388-6401]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[6444-6450]:BreakStatement[6444-6450]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[6467-6475]:SwitchCase[6467-6475]"
    }, {
      "left" : "return anythingElse(t, tb);",
      "right" : "return anythingElse(t, tb);",
      "info" : "ReturnStatement[6496-6523]:ReturnStatement[6496-6523]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[6550-6562]:ReturnStatement[6550-6562]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6636-6731]:Block[6636-6731]"
    }, {
      "left" : "tb.process(new Token.EndTag(\"head\"));",
      "right" : "tb.process(new Token.EndTag(\"head\"));",
      "info" : "ExpressionStatement[6650-6687]:ExpressionStatement[6650-6687]"
    }, {
      "left" : "return tb.process(t);",
      "right" : "return tb.process(t);",
      "info" : "ReturnStatement[6700-6721]:ReturnStatement[6700-6721]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6813-7811]:Block[6813-7811]"
    }, {
      "left" : "if (t.isDoctype())",
      "right" : "if (t.isDoctype())",
      "info" : "IfStatement[6827-7776]:IfStatement[6827-7776]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6846-6893]:Block[6846-6893]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[6864-6879]:ExpressionStatement[6864-6879]"
    }, {
      "left" : "if (t.isStartTag() && t.asStartTag().name().equals(\"html\"))",
      "right" : "if (t.isStartTag() && t.asStartTag().name().equals(\"html\"))",
      "info" : "IfStatement[6899-7776]:IfStatement[6899-7776]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6959-7020]:Block[6959-7020]"
    }, {
      "left" : "return tb.process(t, InBody);",
      "right" : "return tb.process(t, InBody);",
      "info" : "ReturnStatement[6977-7006]:ReturnStatement[6977-7006]"
    }, {
      "left" : "if (t.isEndTag() && t.asEndTag().name().equals(\"noscript\"))",
      "right" : "if (t.isEndTag() && t.asEndTag().name().equals(\"noscript\"))",
      "info" : "IfStatement[7026-7776]:IfStatement[7026-7776]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7086-7166]:Block[7086-7166]"
    }, {
      "left" : "tb.pop();",
      "right" : "tb.pop();",
      "info" : "ExpressionStatement[7104-7113]:ExpressionStatement[7104-7113]"
    }, {
      "left" : "tb.transition(InHead);",
      "right" : "tb.transition(InHead);",
      "info" : "ExpressionStatement[7130-7152]:ExpressionStatement[7130-7152]"
    }, {
      "left" : "if (isWhitespace(t) || t.isComment() || (t.isStartTag() && StringUtil.in(t.asStartTag().name(),\n                    \"basefont\", \"bgsound\", \"link\", \"meta\", \"noframes\", \"style\")))",
      "right" : "if (isWhitespace(t) || t.isComment() || (t.isStartTag() && StringUtil.in(t.asStartTag().name(),\n                    \"basefont\", \"bgsound\", \"link\", \"meta\", \"noframes\", \"style\")))",
      "info" : "IfStatement[7172-7776]:IfStatement[7172-7776]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7350-7411]:Block[7350-7411]"
    }, {
      "left" : "return tb.process(t, InHead);",
      "right" : "return tb.process(t, InHead);",
      "info" : "ReturnStatement[7368-7397]:ReturnStatement[7368-7397]"
    }, {
      "left" : "if (t.isEndTag() && t.asEndTag().name().equals(\"br\"))",
      "right" : "if (t.isEndTag() && t.asEndTag().name().equals(\"br\"))",
      "info" : "IfStatement[7417-7776]:IfStatement[7417-7776]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7471-7530]:Block[7471-7530]"
    }, {
      "left" : "return anythingElse(t, tb);",
      "right" : "return anythingElse(t, tb);",
      "info" : "ReturnStatement[7489-7516]:ReturnStatement[7489-7516]"
    }, {
      "left" : "if ((t.isStartTag() && StringUtil.in(t.asStartTag().name(), \"head\", \"noscript\")) || t.isEndTag())",
      "right" : "if ((t.isStartTag() && StringUtil.in(t.asStartTag().name(), \"head\", \"noscript\")) || t.isEndTag())",
      "info" : "IfStatement[7536-7776]:IfStatement[7536-7776]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7634-7711]:Block[7634-7711]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[7652-7667]:ExpressionStatement[7652-7667]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[7684-7697]:ReturnStatement[7684-7697]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7717-7776]:Block[7717-7776]"
    }, {
      "left" : "return anythingElse(t, tb);",
      "right" : "return anythingElse(t, tb);",
      "info" : "ReturnStatement[7735-7762]:ReturnStatement[7735-7762]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[7789-7801]:ReturnStatement[7789-7801]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7879-8006]:Block[7879-8006]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[7893-7908]:ExpressionStatement[7893-7908]"
    }, {
      "left" : "tb.process(new Token.EndTag(\"noscript\"));",
      "right" : "tb.process(new Token.EndTag(\"noscript\"));",
      "info" : "ExpressionStatement[7921-7962]:ExpressionStatement[7921-7962]"
    }, {
      "left" : "return tb.process(t);",
      "right" : "return tb.process(t);",
      "info" : "ReturnStatement[7975-7996]:ReturnStatement[7975-7996]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8083-9805]:Block[8083-9805]"
    }, {
      "left" : "if (isWhitespace(t))",
      "right" : "if (isWhitespace(t))",
      "info" : "IfStatement[8097-9770]:IfStatement[8097-9770]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8118-8177]:Block[8118-8177]"
    }, {
      "left" : "tb.insert(t.asCharacter());",
      "right" : "tb.insert(t.asCharacter());",
      "info" : "ExpressionStatement[8136-8163]:ExpressionStatement[8136-8163]"
    }, {
      "left" : "if (t.isComment())",
      "right" : "if (t.isComment())",
      "info" : "IfStatement[8183-9770]:IfStatement[8183-9770]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8202-8259]:Block[8202-8259]"
    }, {
      "left" : "tb.insert(t.asComment());",
      "right" : "tb.insert(t.asComment());",
      "info" : "ExpressionStatement[8220-8245]:ExpressionStatement[8220-8245]"
    }, {
      "left" : "if (t.isDoctype())",
      "right" : "if (t.isDoctype())",
      "info" : "IfStatement[8265-9770]:IfStatement[8265-9770]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8284-8331]:Block[8284-8331]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[8302-8317]:ExpressionStatement[8302-8317]"
    }, {
      "left" : "if (t.isStartTag())",
      "right" : "if (t.isStartTag())",
      "info" : "IfStatement[8337-9770]:IfStatement[8337-9770]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8357-9445]:Block[8357-9445]"
    }, {
      "left" : "Token.StartTag startTag = t.asStartTag();",
      "right" : "Token.StartTag startTag = t.asStartTag();",
      "info" : "VariableDeclarationStatement[8375-8416]:VariableDeclarationStatement[8375-8416]"
    }, {
      "left" : "String name = startTag.name();",
      "right" : "String name = startTag.name();",
      "info" : "VariableDeclarationStatement[8433-8463]:VariableDeclarationStatement[8433-8463]"
    }, {
      "left" : "if (name.equals(\"html\"))",
      "right" : "if (name.equals(\"html\"))",
      "info" : "IfStatement[8480-9431]:IfStatement[8480-9431]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8505-8574]:Block[8505-8574]"
    }, {
      "left" : "return tb.process(t, InBody);",
      "right" : "return tb.process(t, InBody);",
      "info" : "ReturnStatement[8527-8556]:ReturnStatement[8527-8556]"
    }, {
      "left" : "if (name.equals(\"body\"))",
      "right" : "if (name.equals(\"body\"))",
      "info" : "IfStatement[8580-9431]:IfStatement[8580-9431]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8605-8750]:Block[8605-8750]"
    }, {
      "left" : "tb.insert(startTag);",
      "right" : "tb.insert(startTag);",
      "info" : "ExpressionStatement[8627-8647]:ExpressionStatement[8627-8647]"
    }, {
      "left" : "tb.framesetOk(false);",
      "right" : "tb.framesetOk(false);",
      "info" : "ExpressionStatement[8668-8689]:ExpressionStatement[8668-8689]"
    }, {
      "left" : "tb.transition(InBody);",
      "right" : "tb.transition(InBody);",
      "info" : "ExpressionStatement[8710-8732]:ExpressionStatement[8710-8732]"
    }, {
      "left" : "if (name.equals(\"frameset\"))",
      "right" : "if (name.equals(\"frameset\"))",
      "info" : "IfStatement[8756-9431]:IfStatement[8756-9431]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8785-8892]:Block[8785-8892]"
    }, {
      "left" : "tb.insert(startTag);",
      "right" : "tb.insert(startTag);",
      "info" : "ExpressionStatement[8807-8827]:ExpressionStatement[8807-8827]"
    }, {
      "left" : "tb.transition(InFrameset);",
      "right" : "tb.transition(InFrameset);",
      "info" : "ExpressionStatement[8848-8874]:ExpressionStatement[8848-8874]"
    }, {
      "left" : "if (StringUtil.in(name, \"base\", \"basefont\", \"bgsound\", \"link\", \"meta\", \"noframes\", \"script\", \"style\", \"title\"))",
      "right" : "if (StringUtil.in(name, \"base\", \"basefont\", \"bgsound\", \"link\", \"meta\", \"noframes\", \"script\", \"style\", \"title\"))",
      "info" : "IfStatement[8898-9431]:IfStatement[8898-9431]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9010-9245]:Block[9010-9245]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[9032-9047]:ExpressionStatement[9032-9047]"
    }, {
      "left" : "Element head = tb.getHeadElement();",
      "right" : "Element head = tb.getHeadElement();",
      "info" : "VariableDeclarationStatement[9068-9103]:VariableDeclarationStatement[9068-9103]"
    }, {
      "left" : "tb.push(head);",
      "right" : "tb.push(head);",
      "info" : "ExpressionStatement[9124-9138]:ExpressionStatement[9124-9138]"
    }, {
      "left" : "tb.process(t, InHead);",
      "right" : "tb.process(t, InHead);",
      "info" : "ExpressionStatement[9159-9181]:ExpressionStatement[9159-9181]"
    }, {
      "left" : "tb.removeFromStack(head);",
      "right" : "tb.removeFromStack(head);",
      "info" : "ExpressionStatement[9202-9227]:ExpressionStatement[9202-9227]"
    }, {
      "left" : "if (name.equals(\"head\"))",
      "right" : "if (name.equals(\"head\"))",
      "info" : "IfStatement[9251-9431]:IfStatement[9251-9431]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9276-9365]:Block[9276-9365]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[9298-9313]:ExpressionStatement[9298-9313]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[9334-9347]:ReturnStatement[9334-9347]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9371-9431]:Block[9371-9431]"
    }, {
      "left" : "anythingElse(t, tb);",
      "right" : "anythingElse(t, tb);",
      "info" : "ExpressionStatement[9393-9413]:ExpressionStatement[9393-9413]"
    }, {
      "left" : "if (t.isEndTag())",
      "right" : "if (t.isEndTag())",
      "info" : "IfStatement[9451-9770]:IfStatement[9451-9770]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9469-9712]:Block[9469-9712]"
    }, {
      "left" : "if (StringUtil.in(t.asEndTag().name(), \"body\", \"html\"))",
      "right" : "if (StringUtil.in(t.asEndTag().name(), \"body\", \"html\"))",
      "info" : "IfStatement[9487-9698]:IfStatement[9487-9698]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9543-9603]:Block[9543-9603]"
    }, {
      "left" : "anythingElse(t, tb);",
      "right" : "anythingElse(t, tb);",
      "info" : "ExpressionStatement[9565-9585]:ExpressionStatement[9565-9585]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9609-9698]:Block[9609-9698]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[9631-9646]:ExpressionStatement[9631-9646]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[9667-9680]:ReturnStatement[9667-9680]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9718-9770]:Block[9718-9770]"
    }, {
      "left" : "anythingElse(t, tb);",
      "right" : "anythingElse(t, tb);",
      "info" : "ExpressionStatement[9736-9756]:ExpressionStatement[9736-9756]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[9783-9795]:ReturnStatement[9783-9795]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9873-10003]:Block[9873-10003]"
    }, {
      "left" : "tb.process(new Token.StartTag(\"body\"));",
      "right" : "tb.process(new Token.StartTag(\"body\"));",
      "info" : "ExpressionStatement[9887-9926]:ExpressionStatement[9887-9926]"
    }, {
      "left" : "tb.framesetOk(true);",
      "right" : "tb.framesetOk(true);",
      "info" : "ExpressionStatement[9939-9959]:ExpressionStatement[9939-9959]"
    }, {
      "left" : "return tb.process(t);",
      "right" : "return tb.process(t);",
      "info" : "ReturnStatement[9972-9993]:ReturnStatement[9972-9993]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10077-37881]:Block[10077-38019]"
    }, {
      "left" : "switch (t.type) {\n                case Character: {\n                    Token.Character c = t.asCharacter();\n                    if (c.getData().equals(nullString)) {\n                        // todo confirm that check\n                        tb.error(this);\n                        return false;\n                    } else if (isWhitespace(c)) {\n                        tb.reconstructFormattingElements();\n                        tb.insert(c);\n                    } else {\n                        tb.reconstructFormattingElements();\n                        tb.insert(c);\n                        tb.framesetOk(false);\n                    }\n                    break;\n                }\n                case Comment: {\n                    tb.insert(t.asComment());\n                    break;\n                }\n                case Doctype: {\n                    tb.error(this);\n                    return false;\n                }\n                case StartTag:\n                    Token.StartTag startTag = t.asStartTag();\n                    String name = startTag.name();\n                    if (name.equals(\"html\")) {\n                        tb.error(this);\n                        // merge attributes onto real html\n                        Element html = tb.getStack().getFirst();\n                        for (Attribute attribute : startTag.getAttributes()) {\n                            if (!html.hasAttr(attribute.getKey()))\n                                html.attributes().put(attribute);\n                        }\n                    } else if (StringUtil.in(name, Constants.InBodyStartToHead)) {\n                        return tb.process(t, InHead);\n                    } else if (name.equals(\"body\")) {\n                        tb.error(this);\n                        LinkedList<Element> stack = tb.getStack();\n                        if (stack.size() == 1 || (stack.size() > 2 && !stack.get(1).nodeName().equals(\"body\"))) {\n                            // only in fragment case\n                            return false; // ignore\n                        } else {\n                            tb.framesetOk(false);\n                            Element body = stack.get(1);\n                            for (Attribute attribute : startTag.getAttributes()) {\n                                if (!body.hasAttr(attribute.getKey()))\n                                    body.attributes().put(attribute);\n                            }\n                        }\n                    } else if (name.equals(\"frameset\")) {\n                        tb.error(this);\n                        LinkedList<Element> stack = tb.getStack();\n                        if (stack.size() == 1 || (stack.size() > 2 && !stack.get(1).nodeName().equals(\"body\"))) {\n                            // only in fragment case\n                            return false; // ignore\n                        } else if (!tb.framesetOk()) {\n                            return false; // ignore frameset\n                        } else {\n                            Element second = stack.get(1);\n                            if (second.parent() != null)\n                                second.remove();\n                            // pop up to html element\n                            while (stack.size() > 1)\n                                stack.removeLast();\n                            tb.insert(startTag);\n                            tb.transition(InFrameset);\n                        }\n                    } else if (StringUtil.in(name, Constants.InBodyStartPClosers)) {\n                        if (tb.inButtonScope(\"p\")) {\n                            tb.process(new Token.EndTag(\"p\"));\n                        }\n                        tb.insert(startTag);\n                    } else if (StringUtil.in(name, Constants.Headings)) {\n                        if (tb.inButtonScope(\"p\")) {\n                            tb.process(new Token.EndTag(\"p\"));\n                        }\n                        if (StringUtil.in(tb.currentElement().nodeName(), Constants.Headings)) {\n                            tb.error(this);\n                            tb.pop();\n                        }\n                        tb.insert(startTag);\n                    } else if (StringUtil.in(name, Constants.InBodyStartPreListing)) {\n                        if (tb.inButtonScope(\"p\")) {\n                            tb.process(new Token.EndTag(\"p\"));\n                        }\n                        tb.insert(startTag);\n                        // todo: ignore LF if next token\n                        tb.framesetOk(false);\n                    } else if (name.equals(\"form\")) {\n                        if (tb.getFormElement() != null) {\n                            tb.error(this);\n                            return false;\n                        }\n                        if (tb.inButtonScope(\"p\")) {\n                            tb.process(new Token.EndTag(\"p\"));\n                        }\n                        tb.insertForm(startTag, true);\n                    } else if (name.equals(\"li\")) {\n                        tb.framesetOk(false);\n                        LinkedList<Element> stack = tb.getStack();\n                        for (int i = stack.size() - 1; i > 0; i--) {\n                            Element el = stack.get(i);\n                            if (el.nodeName().equals(\"li\")) {\n                                tb.process(new Token.EndTag(\"li\"));\n                                break;\n                            }\n                            if (tb.isSpecial(el) && !StringUtil.in(el.nodeName(), Constants.InBodyStartLiBreakers))\n                                break;\n                        }\n                        if (tb.inButtonScope(\"p\")) {\n                            tb.process(new Token.EndTag(\"p\"));\n                        }\n                        tb.insert(startTag);\n                    } else if (StringUtil.in(name, Constants.DdDt)) {\n                        tb.framesetOk(false);\n                        LinkedList<Element> stack = tb.getStack();\n                        for (int i = stack.size() - 1; i > 0; i--) {\n                            Element el = stack.get(i);\n                            if (StringUtil.in(el.nodeName(), Constants.DdDt)) {\n                                tb.process(new Token.EndTag(el.nodeName()));\n                                break;\n                            }\n                            if (tb.isSpecial(el) && !StringUtil.in(el.nodeName(), Constants.InBodyStartLiBreakers))\n                                break;\n                        }\n                        if (tb.inButtonScope(\"p\")) {\n                            tb.process(new Token.EndTag(\"p\"));\n                        }\n                        tb.insert(startTag);\n                    } else if (name.equals(\"plaintext\")) {\n                        if (tb.inButtonScope(\"p\")) {\n                            tb.process(new Token.EndTag(\"p\"));\n                        }\n                        tb.insert(startTag);\n                        tb.tokeniser.transition(TokeniserState.PLAINTEXT); // once in, never gets out\n                    } else if (name.equals(\"button\")) {\n                        if (tb.inButtonScope(\"button\")) {\n                            // close and reprocess\n                            tb.error(this);\n                            tb.process(new Token.EndTag(\"button\"));\n                            tb.process(startTag);\n                        } else {\n                            tb.reconstructFormattingElements();\n                            tb.insert(startTag);\n                            tb.framesetOk(false);\n                        }\n                    } else if (name.equals(\"a\")) {\n                        if (tb.getActiveFormattingElement(\"a\") != null) {\n                            tb.error(this);\n                            tb.process(new Token.EndTag(\"a\"));\n\n                            // still on stack?\n                            Element remainingA = tb.getFromStack(\"a\");\n                            if (remainingA != null) {\n                                tb.removeFromActiveFormattingElements(remainingA);\n                                tb.removeFromStack(remainingA);\n                            }\n                        }\n                        tb.reconstructFormattingElements();\n                        Element a = tb.insert(startTag);\n                        tb.pushActiveFormattingElements(a);\n                    } else if (StringUtil.in(name, Constants.Formatters)) {\n                        tb.reconstructFormattingElements();\n                        Element el = tb.insert(startTag);\n                        tb.pushActiveFormattingElements(el);\n                    } else if (name.equals(\"nobr\")) {\n                        tb.reconstructFormattingElements();\n                        if (tb.inScope(\"nobr\")) {\n                            tb.error(this);\n                            tb.process(new Token.EndTag(\"nobr\"));\n                            tb.reconstructFormattingElements();\n                        }\n                        Element el = tb.insert(startTag);\n                        tb.pushActiveFormattingElements(el);\n                    } else if (StringUtil.in(name, Constants.InBodyStartApplets)) {\n                        tb.reconstructFormattingElements();\n                        tb.insert(startTag);\n                        tb.insertMarkerToFormattingElements();\n                        tb.framesetOk(false);\n                    } else if (name.equals(\"table\")) {\n                        if (tb.getDocument().quirksMode() != Document.QuirksMode.quirks && tb.inButtonScope(\"p\")) {\n                            tb.process(new Token.EndTag(\"p\"));\n                        }\n                        tb.insert(startTag);\n                        tb.framesetOk(false);\n                        tb.transition(InTable);\n                    } else if (StringUtil.in(name, Constants.InBodyStartEmptyFormatters)) {\n                        tb.reconstructFormattingElements();\n                        tb.insertEmpty(startTag);\n                        tb.framesetOk(false);\n                    } else if (name.equals(\"input\")) {\n                        tb.reconstructFormattingElements();\n                        Element el = tb.insertEmpty(startTag);\n                        if (!el.attr(\"type\").equalsIgnoreCase(\"hidden\"))\n                            tb.framesetOk(false);\n                    } else if (StringUtil.in(name, Constants.InBodyStartMedia)) {\n                        tb.insertEmpty(startTag);\n                    } else if (name.equals(\"hr\")) {\n                        if (tb.inButtonScope(\"p\")) {\n                            tb.process(new Token.EndTag(\"p\"));\n                        }\n                        tb.insertEmpty(startTag);\n                        tb.framesetOk(false);\n                    } else if (name.equals(\"image\")) {\n                            return tb.process(startTag.name(\"img\")); // change <image> to <img>, unless in svg\n                    } else if (name.equals(\"isindex\")) {\n                        // how much do we care about the early 90s?\n                        tb.error(this);\n                        if (tb.getFormElement() != null)\n                            return false;\n\n                        tb.tokeniser.acknowledgeSelfClosingFlag();\n                        tb.process(new Token.StartTag(\"form\"));\n                        if (startTag.attributes.hasKey(\"action\")) {\n                            Element form = tb.getFormElement();\n                            form.attr(\"action\", startTag.attributes.get(\"action\"));\n                        }\n                        tb.process(new Token.StartTag(\"hr\"));\n                        tb.process(new Token.StartTag(\"label\"));\n                        // hope you like english.\n                        String prompt = startTag.attributes.hasKey(\"prompt\") ?\n                                startTag.attributes.get(\"prompt\") :\n                                \"This is a searchable index. Enter search keywords: \";\n\n                        tb.process(new Token.Character(prompt));\n\n                        // input\n                        Attributes inputAttribs = new Attributes();\n                        for (Attribute attr : startTag.attributes) {\n                            if (!StringUtil.in(attr.getKey(), Constants.InBodyStartInputAttribs))\n                                inputAttribs.put(attr);\n                        }\n                        inputAttribs.put(\"name\", \"isindex\");\n                        tb.process(new Token.StartTag(\"input\", inputAttribs));\n                        tb.process(new Token.EndTag(\"label\"));\n                        tb.process(new Token.StartTag(\"hr\"));\n                        tb.process(new Token.EndTag(\"form\"));\n                    } else if (name.equals(\"textarea\")) {\n                        tb.insert(startTag);\n                        // todo: If the next token is a U+000A LINE FEED (LF) character token, then ignore that token and move on to the next one. (Newlines at the start of textarea elements are ignored as an authoring convenience.)\n                        tb.tokeniser.transition(TokeniserState.Rcdata);\n                        tb.markInsertionMode();\n                        tb.framesetOk(false);\n                        tb.transition(Text);\n                    } else if (name.equals(\"xmp\")) {\n                        if (tb.inButtonScope(\"p\")) {\n                            tb.process(new Token.EndTag(\"p\"));\n                        }\n                        tb.reconstructFormattingElements();\n                        tb.framesetOk(false);\n                        handleRawtext(startTag, tb);\n                    } else if (name.equals(\"iframe\")) {\n                        tb.framesetOk(false);\n                        handleRawtext(startTag, tb);\n                    } else if (name.equals(\"noembed\")) {\n                        // also handle noscript if script enabled\n                        handleRawtext(startTag, tb);\n                    } else if (name.equals(\"select\")) {\n                        tb.reconstructFormattingElements();\n                        tb.insert(startTag);\n                        tb.framesetOk(false);\n\n                        HtmlTreeBuilderState state = tb.state();\n                        if (state.equals(InTable) || state.equals(InCaption) || state.equals(InTableBody) || state.equals(InRow) || state.equals(InCell))\n                            tb.transition(InSelectInTable);\n                        else\n                            tb.transition(InSelect);\n                    } else if (StringUtil.in(name, Constants.InBodyStartOptions)) {\n                        if (tb.currentElement().nodeName().equals(\"option\"))\n                            tb.process(new Token.EndTag(\"option\"));\n                        tb.reconstructFormattingElements();\n                        tb.insert(startTag);\n                    } else if (StringUtil.in(name, Constants.InBodyStartRuby)) {\n                        if (tb.inScope(\"ruby\")) {\n                            tb.generateImpliedEndTags();\n                            if (!tb.currentElement().nodeName().equals(\"ruby\")) {\n                                tb.error(this);\n                                tb.popStackToBefore(\"ruby\"); // i.e. close up to but not include name\n                            }\n                            tb.insert(startTag);\n                        }\n                    } else if (name.equals(\"math\")) {\n                        tb.reconstructFormattingElements();\n                        // todo: handle A start tag whose tag name is \"math\" (i.e. foreign, mathml)\n                        tb.insert(startTag);\n                        tb.tokeniser.acknowledgeSelfClosingFlag();\n                    } else if (name.equals(\"svg\")) {\n                        tb.reconstructFormattingElements();\n                        // todo: handle A start tag whose tag name is \"svg\" (xlink, svg)\n                        tb.insert(startTag);\n                        tb.tokeniser.acknowledgeSelfClosingFlag();\n                    } else if (StringUtil.in(name, Constants.InBodyStartDrop)) {\n                        tb.error(this);\n                        return false;\n                    } else {\n                        tb.reconstructFormattingElements();\n                        tb.insert(startTag);\n                    }\n                    break;\n\n                case EndTag:\n                    Token.EndTag endTag = t.asEndTag();\n                    name = endTag.name();\n                    if (name.equals(\"body\")) {\n                        if (!tb.inScope(\"body\")) {\n                            tb.error(this);\n                            return false;\n                        } else {\n                            // todo: error if stack contains something not dd, dt, li, optgroup, option, p, rp, rt, tbody, td, tfoot, th, thead, tr, body, html\n                            tb.transition(AfterBody);\n                        }\n                    } else if (name.equals(\"html\")) {\n                        boolean notIgnored = tb.process(new Token.EndTag(\"body\"));\n                        if (notIgnored)\n                            return tb.process(endTag);\n                    } else if (StringUtil.in(name, Constants.InBodyEndClosers)) {\n                        if (!tb.inScope(name)) {\n                            // nothing to close\n                            tb.error(this);\n                            return false;\n                        } else {\n                            tb.generateImpliedEndTags();\n                            if (!tb.currentElement().nodeName().equals(name))\n                                tb.error(this);\n                            tb.popStackToClose(name);\n                        }\n                    } else if (name.equals(\"form\")) {\n                        Element currentForm = tb.getFormElement();\n                        tb.setFormElement(null);\n                        if (currentForm == null || !tb.inScope(name)) {\n                            tb.error(this);\n                            return false;\n                        } else {\n                            tb.generateImpliedEndTags();\n                            if (!tb.currentElement().nodeName().equals(name))\n                                tb.error(this);\n                            // remove currentForm from stack. will shift anything under up.\n                            tb.removeFromStack(currentForm);\n                        }\n                    } else if (name.equals(\"p\")) {\n                        if (!tb.inButtonScope(name)) {\n                            tb.error(this);\n                            tb.process(new Token.StartTag(name)); // if no p to close, creates an empty <p></p>\n                            return tb.process(endTag);\n                        } else {\n                            tb.generateImpliedEndTags(name);\n                            if (!tb.currentElement().nodeName().equals(name))\n                                tb.error(this);\n                            tb.popStackToClose(name);\n                        }\n                    } else if (name.equals(\"li\")) {\n                        if (!tb.inListItemScope(name)) {\n                            tb.error(this);\n                            return false;\n                        } else {\n                            tb.generateImpliedEndTags(name);\n                            if (!tb.currentElement().nodeName().equals(name))\n                                tb.error(this);\n                            tb.popStackToClose(name);\n                        }\n                    } else if (StringUtil.in(name, Constants.DdDt)) {\n                        if (!tb.inScope(name)) {\n                            tb.error(this);\n                            return false;\n                        } else {\n                            tb.generateImpliedEndTags(name);\n                            if (!tb.currentElement().nodeName().equals(name))\n                                tb.error(this);\n                            tb.popStackToClose(name);\n                        }\n                    } else if (StringUtil.in(name, Constants.Headings)) {\n                        if (!tb.inScope(Constants.Headings)) {\n                            tb.error(this);\n                            return false;\n                        } else {\n                            tb.generateImpliedEndTags(name);\n                            if (!tb.currentElement().nodeName().equals(name))\n                                tb.error(this);\n                            tb.popStackToClose(Constants.Headings);\n                        }\n                    } else if (name.equals(\"sarcasm\")) {\n                        // *sigh*\n                        return anyOtherEndTag(t, tb);\n                    } else if (StringUtil.in(name, Constants.InBodyEndAdoptionFormatters)) {\n                        // Adoption Agency Algorithm.\n                        OUTER:\n                        for (int i = 0; i < 8; i++) {\n                            Element formatEl = tb.getActiveFormattingElement(name);\n                            if (formatEl == null)\n                                return anyOtherEndTag(t, tb);\n                            else if (!tb.onStack(formatEl)) {\n                                tb.error(this);\n                                tb.removeFromActiveFormattingElements(formatEl);\n                                return true;\n                            } else if (!tb.inScope(formatEl.nodeName())) {\n                                tb.error(this);\n                                return false;\n                            } else if (tb.currentElement() != formatEl)\n                                tb.error(this);\n\n                            Element furthestBlock = null;\n                            Element commonAncestor = null;\n                            boolean seenFormattingElement = false;\n                            LinkedList<Element> stack = tb.getStack();\n                            // the spec doesn't limit to < 64, but in degenerate cases (9000+ stack depth) this prevents\n                            // run-aways\n                            final int stackSize = stack.size();\n                            for (int si = 0; si < stackSize && si < 64; si++) {\n                                Element el = stack.get(si);\n                                if (el == formatEl) {\n                                    commonAncestor = stack.get(si - 1);\n                                    seenFormattingElement = true;\n                                } else if (seenFormattingElement && tb.isSpecial(el)) {\n                                    furthestBlock = el;\n                                    break;\n                                }\n                            }\n                            if (furthestBlock == null) {\n                                tb.popStackToClose(formatEl.nodeName());\n                                tb.removeFromActiveFormattingElements(formatEl);\n                                return true;\n                            }\n\n                            // todo: Let a bookmark note the position of the formatting element in the list of active formatting elements relative to the elements on either side of it in the list.\n                            // does that mean: int pos of format el in list?\n                            Element node = furthestBlock;\n                            Element lastNode = furthestBlock;\n                            INNER:\n                            for (int j = 0; j < 3; j++) {\n                                if (tb.onStack(node))\n                                    node = tb.aboveOnStack(node);\n                                if (!tb.isInActiveFormattingElements(node)) { // note no bookmark check\n                                    tb.removeFromStack(node);\n                                    continue INNER;\n                                } else if (node == formatEl)\n                                    break INNER;\n\n                                Element replacement = new Element(Tag.valueOf(node.nodeName()), tb.getBaseUri());\n                                tb.replaceActiveFormattingElement(node, replacement);\n                                tb.replaceOnStack(node, replacement);\n                                node = replacement;\n\n                                if (lastNode == furthestBlock) {\n                                    // todo: move the aforementioned bookmark to be immediately after the new node in the list of active formatting elements.\n                                    // not getting how this bookmark both straddles the element above, but is inbetween here...\n                                }\n                                if (lastNode.parent() != null)\n                                    lastNode.remove();\n                                node.appendChild(lastNode);\n\n                                lastNode = node;\n                            }\n\n                            if (StringUtil.in(commonAncestor.nodeName(), Constants.InBodyEndTableFosters)) {\n                                if (lastNode.parent() != null)\n                                    lastNode.remove();\n                                tb.insertInFosterParent(lastNode);\n                            } else {\n                                if (lastNode.parent() != null)\n                                    lastNode.remove();\n                                commonAncestor.appendChild(lastNode);\n                            }\n\n                            Element adopter = new Element(formatEl.tag(), tb.getBaseUri());\n                            adopter.attributes().addAll(formatEl.attributes());\n                            Node[] childNodes = furthestBlock.childNodes().toArray(new Node[furthestBlock.childNodeSize()]);\n                            for (Node childNode : childNodes) {\n                                adopter.appendChild(childNode); // append will reparent. thus the clone to avoid concurrent mod.\n                            }\n                            furthestBlock.appendChild(adopter);\n                            tb.removeFromActiveFormattingElements(formatEl);\n                            // todo: insert the new element into the list of active formatting elements at the position of the aforementioned bookmark.\n                            tb.removeFromStack(formatEl);\n                            tb.insertOnStackAfter(furthestBlock, adopter);\n                        }\n                    } else if (StringUtil.in(name, Constants.InBodyStartApplets)) {\n                        if (!tb.inScope(\"name\")) {\n                            if (!tb.inScope(name)) {\n                                tb.error(this);\n                                return false;\n                            }\n                            tb.generateImpliedEndTags();\n                            if (!tb.currentElement().nodeName().equals(name))\n                                tb.error(this);\n                            tb.popStackToClose(name);\n                            tb.clearFormattingElementsToLastMarker();\n                        }\n                    } else if (name.equals(\"br\")) {\n                        tb.error(this);\n                        tb.process(new Token.StartTag(\"br\"));\n                        return false;\n                    } else {\n                        return anyOtherEndTag(t, tb);\n                    }\n\n                    break;\n                case EOF:\n                    // todo: error if stack contains something not dd, dt, li, p, tbody, td, tfoot, th, thead, tr, body, html\n                    // stop parsing\n                    break;\n            }",
      "right" : "switch (t.type) {\n                case Character: {\n                    Token.Character c = t.asCharacter();\n                    if (c.getData().equals(nullString)) {\n                        // todo confirm that check\n                        tb.error(this);\n                        return false;\n                    } else if (isWhitespace(c)) {\n                        tb.reconstructFormattingElements();\n                        tb.insert(c);\n                    } else {\n                        tb.reconstructFormattingElements();\n                        tb.insert(c);\n                        tb.framesetOk(false);\n                    }\n                    break;\n                }\n                case Comment: {\n                    tb.insert(t.asComment());\n                    break;\n                }\n                case Doctype: {\n                    tb.error(this);\n                    return false;\n                }\n                case StartTag:\n                    Token.StartTag startTag = t.asStartTag();\n                    String name = startTag.name();\n                    if (name.equals(\"html\")) {\n                        tb.error(this);\n                        // merge attributes onto real html\n                        Element html = tb.getStack().getFirst();\n                        for (Attribute attribute : startTag.getAttributes()) {\n                            if (!html.hasAttr(attribute.getKey()))\n                                html.attributes().put(attribute);\n                        }\n                    } else if (StringUtil.in(name, Constants.InBodyStartToHead)) {\n                        return tb.process(t, InHead);\n                    } else if (name.equals(\"body\")) {\n                        tb.error(this);\n                        LinkedList<Element> stack = tb.getStack();\n                        if (stack.size() == 1 || (stack.size() > 2 && !stack.get(1).nodeName().equals(\"body\"))) {\n                            // only in fragment case\n                            return false; // ignore\n                        } else {\n                            tb.framesetOk(false);\n                            Element body = stack.get(1);\n                            for (Attribute attribute : startTag.getAttributes()) {\n                                if (!body.hasAttr(attribute.getKey()))\n                                    body.attributes().put(attribute);\n                            }\n                        }\n                    } else if (name.equals(\"frameset\")) {\n                        tb.error(this);\n                        LinkedList<Element> stack = tb.getStack();\n                        if (stack.size() == 1 || (stack.size() > 2 && !stack.get(1).nodeName().equals(\"body\"))) {\n                            // only in fragment case\n                            return false; // ignore\n                        } else if (!tb.framesetOk()) {\n                            return false; // ignore frameset\n                        } else {\n                            Element second = stack.get(1);\n                            if (second.parent() != null)\n                                second.remove();\n                            // pop up to html element\n                            while (stack.size() > 1)\n                                stack.removeLast();\n                            tb.insert(startTag);\n                            tb.transition(InFrameset);\n                        }\n                    } else if (StringUtil.in(name, Constants.InBodyStartPClosers)) {\n                        if (tb.inButtonScope(\"p\")) {\n                            tb.process(new Token.EndTag(\"p\"));\n                        }\n                        tb.insert(startTag);\n                    } else if (StringUtil.in(name, Constants.Headings)) {\n                        if (tb.inButtonScope(\"p\")) {\n                            tb.process(new Token.EndTag(\"p\"));\n                        }\n                        if (StringUtil.in(tb.currentElement().nodeName(), Constants.Headings)) {\n                            tb.error(this);\n                            tb.pop();\n                        }\n                        tb.insert(startTag);\n                    } else if (StringUtil.in(name, Constants.InBodyStartPreListing)) {\n                        if (tb.inButtonScope(\"p\")) {\n                            tb.process(new Token.EndTag(\"p\"));\n                        }\n                        tb.insert(startTag);\n                        // todo: ignore LF if next token\n                        tb.framesetOk(false);\n                    } else if (name.equals(\"form\")) {\n                        if (tb.getFormElement() != null) {\n                            tb.error(this);\n                            return false;\n                        }\n                        if (tb.inButtonScope(\"p\")) {\n                            tb.process(new Token.EndTag(\"p\"));\n                        }\n                        tb.insertForm(startTag, true);\n                    } else if (name.equals(\"li\")) {\n                        tb.framesetOk(false);\n                        LinkedList<Element> stack = tb.getStack();\n                        for (int i = stack.size() - 1; i > 0; i--) {\n                            Element el = stack.get(i);\n                            if (el.nodeName().equals(\"li\")) {\n                                tb.process(new Token.EndTag(\"li\"));\n                                break;\n                            }\n                            if (tb.isSpecial(el) && !StringUtil.in(el.nodeName(), Constants.InBodyStartLiBreakers))\n                                break;\n                        }\n                        if (tb.inButtonScope(\"p\")) {\n                            tb.process(new Token.EndTag(\"p\"));\n                        }\n                        tb.insert(startTag);\n                    } else if (StringUtil.in(name, Constants.DdDt)) {\n                        tb.framesetOk(false);\n                        LinkedList<Element> stack = tb.getStack();\n                        for (int i = stack.size() - 1; i > 0; i--) {\n                            Element el = stack.get(i);\n                            if (StringUtil.in(el.nodeName(), Constants.DdDt)) {\n                                tb.process(new Token.EndTag(el.nodeName()));\n                                break;\n                            }\n                            if (tb.isSpecial(el) && !StringUtil.in(el.nodeName(), Constants.InBodyStartLiBreakers))\n                                break;\n                        }\n                        if (tb.inButtonScope(\"p\")) {\n                            tb.process(new Token.EndTag(\"p\"));\n                        }\n                        tb.insert(startTag);\n                    } else if (name.equals(\"plaintext\")) {\n                        if (tb.inButtonScope(\"p\")) {\n                            tb.process(new Token.EndTag(\"p\"));\n                        }\n                        tb.insert(startTag);\n                        tb.tokeniser.transition(TokeniserState.PLAINTEXT); // once in, never gets out\n                    } else if (name.equals(\"button\")) {\n                        if (tb.inButtonScope(\"button\")) {\n                            // close and reprocess\n                            tb.error(this);\n                            tb.process(new Token.EndTag(\"button\"));\n                            tb.process(startTag);\n                        } else {\n                            tb.reconstructFormattingElements();\n                            tb.insert(startTag);\n                            tb.framesetOk(false);\n                        }\n                    } else if (name.equals(\"a\")) {\n                        if (tb.getActiveFormattingElement(\"a\") != null) {\n                            tb.error(this);\n                            tb.process(new Token.EndTag(\"a\"));\n\n                            // still on stack?\n                            Element remainingA = tb.getFromStack(\"a\");\n                            if (remainingA != null) {\n                                tb.removeFromActiveFormattingElements(remainingA);\n                                tb.removeFromStack(remainingA);\n                            }\n                        }\n                        tb.reconstructFormattingElements();\n                        Element a = tb.insert(startTag);\n                        tb.pushActiveFormattingElements(a);\n                    } else if (StringUtil.in(name, Constants.Formatters)) {\n                        tb.reconstructFormattingElements();\n                        Element el = tb.insert(startTag);\n                        tb.pushActiveFormattingElements(el);\n                    } else if (name.equals(\"nobr\")) {\n                        tb.reconstructFormattingElements();\n                        if (tb.inScope(\"nobr\")) {\n                            tb.error(this);\n                            tb.process(new Token.EndTag(\"nobr\"));\n                            tb.reconstructFormattingElements();\n                        }\n                        Element el = tb.insert(startTag);\n                        tb.pushActiveFormattingElements(el);\n                    } else if (StringUtil.in(name, Constants.InBodyStartApplets)) {\n                        tb.reconstructFormattingElements();\n                        tb.insert(startTag);\n                        tb.insertMarkerToFormattingElements();\n                        tb.framesetOk(false);\n                    } else if (name.equals(\"table\")) {\n                        if (tb.getDocument().quirksMode() != Document.QuirksMode.quirks && tb.inButtonScope(\"p\")) {\n                            tb.process(new Token.EndTag(\"p\"));\n                        }\n                        tb.insert(startTag);\n                        tb.framesetOk(false);\n                        tb.transition(InTable);\n                    } else if (StringUtil.in(name, Constants.InBodyStartEmptyFormatters)) {\n                        tb.reconstructFormattingElements();\n                        tb.insertEmpty(startTag);\n                        tb.framesetOk(false);\n                    } else if (name.equals(\"input\")) {\n                        tb.reconstructFormattingElements();\n                        Element el = tb.insertEmpty(startTag);\n                        if (!el.attr(\"type\").equalsIgnoreCase(\"hidden\"))\n                            tb.framesetOk(false);\n                    } else if (StringUtil.in(name, Constants.InBodyStartMedia)) {\n                        tb.insertEmpty(startTag);\n                    } else if (name.equals(\"hr\")) {\n                        if (tb.inButtonScope(\"p\")) {\n                            tb.process(new Token.EndTag(\"p\"));\n                        }\n                        tb.insertEmpty(startTag);\n                        tb.framesetOk(false);\n                    } else if (name.equals(\"image\")) {\n                        if (tb.getFromStack(\"svg\") == null)\n                            return tb.process(startTag.name(\"img\")); // change <image> to <img>, unless in svg\n                        else\n                            tb.insert(startTag);\n                    } else if (name.equals(\"isindex\")) {\n                        // how much do we care about the early 90s?\n                        tb.error(this);\n                        if (tb.getFormElement() != null)\n                            return false;\n\n                        tb.tokeniser.acknowledgeSelfClosingFlag();\n                        tb.process(new Token.StartTag(\"form\"));\n                        if (startTag.attributes.hasKey(\"action\")) {\n                            Element form = tb.getFormElement();\n                            form.attr(\"action\", startTag.attributes.get(\"action\"));\n                        }\n                        tb.process(new Token.StartTag(\"hr\"));\n                        tb.process(new Token.StartTag(\"label\"));\n                        // hope you like english.\n                        String prompt = startTag.attributes.hasKey(\"prompt\") ?\n                                startTag.attributes.get(\"prompt\") :\n                                \"This is a searchable index. Enter search keywords: \";\n\n                        tb.process(new Token.Character(prompt));\n\n                        // input\n                        Attributes inputAttribs = new Attributes();\n                        for (Attribute attr : startTag.attributes) {\n                            if (!StringUtil.in(attr.getKey(), Constants.InBodyStartInputAttribs))\n                                inputAttribs.put(attr);\n                        }\n                        inputAttribs.put(\"name\", \"isindex\");\n                        tb.process(new Token.StartTag(\"input\", inputAttribs));\n                        tb.process(new Token.EndTag(\"label\"));\n                        tb.process(new Token.StartTag(\"hr\"));\n                        tb.process(new Token.EndTag(\"form\"));\n                    } else if (name.equals(\"textarea\")) {\n                        tb.insert(startTag);\n                        // todo: If the next token is a U+000A LINE FEED (LF) character token, then ignore that token and move on to the next one. (Newlines at the start of textarea elements are ignored as an authoring convenience.)\n                        tb.tokeniser.transition(TokeniserState.Rcdata);\n                        tb.markInsertionMode();\n                        tb.framesetOk(false);\n                        tb.transition(Text);\n                    } else if (name.equals(\"xmp\")) {\n                        if (tb.inButtonScope(\"p\")) {\n                            tb.process(new Token.EndTag(\"p\"));\n                        }\n                        tb.reconstructFormattingElements();\n                        tb.framesetOk(false);\n                        handleRawtext(startTag, tb);\n                    } else if (name.equals(\"iframe\")) {\n                        tb.framesetOk(false);\n                        handleRawtext(startTag, tb);\n                    } else if (name.equals(\"noembed\")) {\n                        // also handle noscript if script enabled\n                        handleRawtext(startTag, tb);\n                    } else if (name.equals(\"select\")) {\n                        tb.reconstructFormattingElements();\n                        tb.insert(startTag);\n                        tb.framesetOk(false);\n\n                        HtmlTreeBuilderState state = tb.state();\n                        if (state.equals(InTable) || state.equals(InCaption) || state.equals(InTableBody) || state.equals(InRow) || state.equals(InCell))\n                            tb.transition(InSelectInTable);\n                        else\n                            tb.transition(InSelect);\n                    } else if (StringUtil.in(name, Constants.InBodyStartOptions)) {\n                        if (tb.currentElement().nodeName().equals(\"option\"))\n                            tb.process(new Token.EndTag(\"option\"));\n                        tb.reconstructFormattingElements();\n                        tb.insert(startTag);\n                    } else if (StringUtil.in(name, Constants.InBodyStartRuby)) {\n                        if (tb.inScope(\"ruby\")) {\n                            tb.generateImpliedEndTags();\n                            if (!tb.currentElement().nodeName().equals(\"ruby\")) {\n                                tb.error(this);\n                                tb.popStackToBefore(\"ruby\"); // i.e. close up to but not include name\n                            }\n                            tb.insert(startTag);\n                        }\n                    } else if (name.equals(\"math\")) {\n                        tb.reconstructFormattingElements();\n                        // todo: handle A start tag whose tag name is \"math\" (i.e. foreign, mathml)\n                        tb.insert(startTag);\n                        tb.tokeniser.acknowledgeSelfClosingFlag();\n                    } else if (name.equals(\"svg\")) {\n                        tb.reconstructFormattingElements();\n                        // todo: handle A start tag whose tag name is \"svg\" (xlink, svg)\n                        tb.insert(startTag);\n                        tb.tokeniser.acknowledgeSelfClosingFlag();\n                    } else if (StringUtil.in(name, Constants.InBodyStartDrop)) {\n                        tb.error(this);\n                        return false;\n                    } else {\n                        tb.reconstructFormattingElements();\n                        tb.insert(startTag);\n                    }\n                    break;\n\n                case EndTag:\n                    Token.EndTag endTag = t.asEndTag();\n                    name = endTag.name();\n                    if (name.equals(\"body\")) {\n                        if (!tb.inScope(\"body\")) {\n                            tb.error(this);\n                            return false;\n                        } else {\n                            // todo: error if stack contains something not dd, dt, li, optgroup, option, p, rp, rt, tbody, td, tfoot, th, thead, tr, body, html\n                            tb.transition(AfterBody);\n                        }\n                    } else if (name.equals(\"html\")) {\n                        boolean notIgnored = tb.process(new Token.EndTag(\"body\"));\n                        if (notIgnored)\n                            return tb.process(endTag);\n                    } else if (StringUtil.in(name, Constants.InBodyEndClosers)) {\n                        if (!tb.inScope(name)) {\n                            // nothing to close\n                            tb.error(this);\n                            return false;\n                        } else {\n                            tb.generateImpliedEndTags();\n                            if (!tb.currentElement().nodeName().equals(name))\n                                tb.error(this);\n                            tb.popStackToClose(name);\n                        }\n                    } else if (name.equals(\"form\")) {\n                        Element currentForm = tb.getFormElement();\n                        tb.setFormElement(null);\n                        if (currentForm == null || !tb.inScope(name)) {\n                            tb.error(this);\n                            return false;\n                        } else {\n                            tb.generateImpliedEndTags();\n                            if (!tb.currentElement().nodeName().equals(name))\n                                tb.error(this);\n                            // remove currentForm from stack. will shift anything under up.\n                            tb.removeFromStack(currentForm);\n                        }\n                    } else if (name.equals(\"p\")) {\n                        if (!tb.inButtonScope(name)) {\n                            tb.error(this);\n                            tb.process(new Token.StartTag(name)); // if no p to close, creates an empty <p></p>\n                            return tb.process(endTag);\n                        } else {\n                            tb.generateImpliedEndTags(name);\n                            if (!tb.currentElement().nodeName().equals(name))\n                                tb.error(this);\n                            tb.popStackToClose(name);\n                        }\n                    } else if (name.equals(\"li\")) {\n                        if (!tb.inListItemScope(name)) {\n                            tb.error(this);\n                            return false;\n                        } else {\n                            tb.generateImpliedEndTags(name);\n                            if (!tb.currentElement().nodeName().equals(name))\n                                tb.error(this);\n                            tb.popStackToClose(name);\n                        }\n                    } else if (StringUtil.in(name, Constants.DdDt)) {\n                        if (!tb.inScope(name)) {\n                            tb.error(this);\n                            return false;\n                        } else {\n                            tb.generateImpliedEndTags(name);\n                            if (!tb.currentElement().nodeName().equals(name))\n                                tb.error(this);\n                            tb.popStackToClose(name);\n                        }\n                    } else if (StringUtil.in(name, Constants.Headings)) {\n                        if (!tb.inScope(Constants.Headings)) {\n                            tb.error(this);\n                            return false;\n                        } else {\n                            tb.generateImpliedEndTags(name);\n                            if (!tb.currentElement().nodeName().equals(name))\n                                tb.error(this);\n                            tb.popStackToClose(Constants.Headings);\n                        }\n                    } else if (name.equals(\"sarcasm\")) {\n                        // *sigh*\n                        return anyOtherEndTag(t, tb);\n                    } else if (StringUtil.in(name, Constants.InBodyEndAdoptionFormatters)) {\n                        // Adoption Agency Algorithm.\n                        OUTER:\n                        for (int i = 0; i < 8; i++) {\n                            Element formatEl = tb.getActiveFormattingElement(name);\n                            if (formatEl == null)\n                                return anyOtherEndTag(t, tb);\n                            else if (!tb.onStack(formatEl)) {\n                                tb.error(this);\n                                tb.removeFromActiveFormattingElements(formatEl);\n                                return true;\n                            } else if (!tb.inScope(formatEl.nodeName())) {\n                                tb.error(this);\n                                return false;\n                            } else if (tb.currentElement() != formatEl)\n                                tb.error(this);\n\n                            Element furthestBlock = null;\n                            Element commonAncestor = null;\n                            boolean seenFormattingElement = false;\n                            LinkedList<Element> stack = tb.getStack();\n                            // the spec doesn't limit to < 64, but in degenerate cases (9000+ stack depth) this prevents\n                            // run-aways\n                            final int stackSize = stack.size();\n                            for (int si = 0; si < stackSize && si < 64; si++) {\n                                Element el = stack.get(si);\n                                if (el == formatEl) {\n                                    commonAncestor = stack.get(si - 1);\n                                    seenFormattingElement = true;\n                                } else if (seenFormattingElement && tb.isSpecial(el)) {\n                                    furthestBlock = el;\n                                    break;\n                                }\n                            }\n                            if (furthestBlock == null) {\n                                tb.popStackToClose(formatEl.nodeName());\n                                tb.removeFromActiveFormattingElements(formatEl);\n                                return true;\n                            }\n\n                            // todo: Let a bookmark note the position of the formatting element in the list of active formatting elements relative to the elements on either side of it in the list.\n                            // does that mean: int pos of format el in list?\n                            Element node = furthestBlock;\n                            Element lastNode = furthestBlock;\n                            INNER:\n                            for (int j = 0; j < 3; j++) {\n                                if (tb.onStack(node))\n                                    node = tb.aboveOnStack(node);\n                                if (!tb.isInActiveFormattingElements(node)) { // note no bookmark check\n                                    tb.removeFromStack(node);\n                                    continue INNER;\n                                } else if (node == formatEl)\n                                    break INNER;\n\n                                Element replacement = new Element(Tag.valueOf(node.nodeName()), tb.getBaseUri());\n                                tb.replaceActiveFormattingElement(node, replacement);\n                                tb.replaceOnStack(node, replacement);\n                                node = replacement;\n\n                                if (lastNode == furthestBlock) {\n                                    // todo: move the aforementioned bookmark to be immediately after the new node in the list of active formatting elements.\n                                    // not getting how this bookmark both straddles the element above, but is inbetween here...\n                                }\n                                if (lastNode.parent() != null)\n                                    lastNode.remove();\n                                node.appendChild(lastNode);\n\n                                lastNode = node;\n                            }\n\n                            if (StringUtil.in(commonAncestor.nodeName(), Constants.InBodyEndTableFosters)) {\n                                if (lastNode.parent() != null)\n                                    lastNode.remove();\n                                tb.insertInFosterParent(lastNode);\n                            } else {\n                                if (lastNode.parent() != null)\n                                    lastNode.remove();\n                                commonAncestor.appendChild(lastNode);\n                            }\n\n                            Element adopter = new Element(formatEl.tag(), tb.getBaseUri());\n                            adopter.attributes().addAll(formatEl.attributes());\n                            Node[] childNodes = furthestBlock.childNodes().toArray(new Node[furthestBlock.childNodeSize()]);\n                            for (Node childNode : childNodes) {\n                                adopter.appendChild(childNode); // append will reparent. thus the clone to avoid concurrent mod.\n                            }\n                            furthestBlock.appendChild(adopter);\n                            tb.removeFromActiveFormattingElements(formatEl);\n                            // todo: insert the new element into the list of active formatting elements at the position of the aforementioned bookmark.\n                            tb.removeFromStack(formatEl);\n                            tb.insertOnStackAfter(furthestBlock, adopter);\n                        }\n                    } else if (StringUtil.in(name, Constants.InBodyStartApplets)) {\n                        if (!tb.inScope(\"name\")) {\n                            if (!tb.inScope(name)) {\n                                tb.error(this);\n                                return false;\n                            }\n                            tb.generateImpliedEndTags();\n                            if (!tb.currentElement().nodeName().equals(name))\n                                tb.error(this);\n                            tb.popStackToClose(name);\n                            tb.clearFormattingElementsToLastMarker();\n                        }\n                    } else if (name.equals(\"br\")) {\n                        tb.error(this);\n                        tb.process(new Token.StartTag(\"br\"));\n                        return false;\n                    } else {\n                        return anyOtherEndTag(t, tb);\n                    }\n\n                    break;\n                case EOF:\n                    // todo: error if stack contains something not dd, dt, li, p, tbody, td, tfoot, th, thead, tr, body, html\n                    // stop parsing\n                    break;\n            }",
      "info" : "SwitchStatement[10091-37846]:SwitchStatement[10091-37984]"
    }, {
      "left" : "case Character:",
      "right" : "case Character:",
      "info" : "SwitchCase[10125-10140]:SwitchCase[10125-10140]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10141-10774]:Block[10141-10774]"
    }, {
      "left" : "Token.Character c = t.asCharacter();",
      "right" : "Token.Character c = t.asCharacter();",
      "info" : "VariableDeclarationStatement[10163-10199]:VariableDeclarationStatement[10163-10199]"
    }, {
      "left" : "if (c.getData().equals(nullString))",
      "right" : "if (c.getData().equals(nullString))",
      "info" : "IfStatement[10220-10729]:IfStatement[10220-10729]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10256-10408]:Block[10256-10408]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[10333-10348]:ExpressionStatement[10333-10348]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[10373-10386]:ReturnStatement[10373-10386]"
    }, {
      "left" : "if (isWhitespace(c))",
      "right" : "if (isWhitespace(c))",
      "info" : "IfStatement[10414-10729]:IfStatement[10414-10729]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10435-10556]:Block[10435-10556]"
    }, {
      "left" : "tb.reconstructFormattingElements();",
      "right" : "tb.reconstructFormattingElements();",
      "info" : "ExpressionStatement[10461-10496]:ExpressionStatement[10461-10496]"
    }, {
      "left" : "tb.insert(c);",
      "right" : "tb.insert(c);",
      "info" : "ExpressionStatement[10521-10534]:ExpressionStatement[10521-10534]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10562-10729]:Block[10562-10729]"
    }, {
      "left" : "tb.reconstructFormattingElements();",
      "right" : "tb.reconstructFormattingElements();",
      "info" : "ExpressionStatement[10588-10623]:ExpressionStatement[10588-10623]"
    }, {
      "left" : "tb.insert(c);",
      "right" : "tb.insert(c);",
      "info" : "ExpressionStatement[10648-10661]:ExpressionStatement[10648-10661]"
    }, {
      "left" : "tb.framesetOk(false);",
      "right" : "tb.framesetOk(false);",
      "info" : "ExpressionStatement[10686-10707]:ExpressionStatement[10686-10707]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[10750-10756]:BreakStatement[10750-10756]"
    }, {
      "left" : "case Comment:",
      "right" : "case Comment:",
      "info" : "SwitchCase[10791-10804]:SwitchCase[10791-10804]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10805-10897]:Block[10805-10897]"
    }, {
      "left" : "tb.insert(t.asComment());",
      "right" : "tb.insert(t.asComment());",
      "info" : "ExpressionStatement[10827-10852]:ExpressionStatement[10827-10852]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[10873-10879]:BreakStatement[10873-10879]"
    }, {
      "left" : "case Doctype:",
      "right" : "case Doctype:",
      "info" : "SwitchCase[10914-10927]:SwitchCase[10914-10927]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10928-11017]:Block[10928-11017]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[10950-10965]:ExpressionStatement[10950-10965]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[10986-10999]:ReturnStatement[10986-10999]"
    }, {
      "left" : "case StartTag:",
      "right" : "case StartTag:",
      "info" : "SwitchCase[11034-11048]:SwitchCase[11034-11048]"
    }, {
      "left" : "Token.StartTag startTag = t.asStartTag();",
      "right" : "Token.StartTag startTag = t.asStartTag();",
      "info" : "VariableDeclarationStatement[11069-11110]:VariableDeclarationStatement[11069-11110]"
    }, {
      "left" : "String name = startTag.name();",
      "right" : "String name = startTag.name();",
      "info" : "VariableDeclarationStatement[11131-11161]:VariableDeclarationStatement[11131-11161]"
    }, {
      "left" : "if (name.equals(\"html\"))",
      "right" : "if (name.equals(\"html\"))",
      "info" : "IfStatement[11182-26490]:IfStatement[11182-26628]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11207-11632]:Block[11207-11632]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[11233-11248]:ExpressionStatement[11233-11248]"
    }, {
      "left" : "Element html = tb.getStack().getFirst();",
      "right" : "Element html = tb.getStack().getFirst();",
      "info" : "VariableDeclarationStatement[11332-11372]:VariableDeclarationStatement[11332-11372]"
    }, {
      "left" : "for (Attribute attribute : startTag.getAttributes())",
      "right" : "for (Attribute attribute : startTag.getAttributes())",
      "info" : "EnhancedForStatement[11397-11610]:EnhancedForStatement[11397-11610]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11450-11610]:Block[11450-11610]"
    }, {
      "left" : "if (!html.hasAttr(attribute.getKey()))",
      "right" : "if (!html.hasAttr(attribute.getKey()))",
      "info" : "IfStatement[11480-11584]:IfStatement[11480-11584]"
    }, {
      "left" : "html.attributes().put(attribute);",
      "right" : "html.attributes().put(attribute);",
      "info" : "ExpressionStatement[11551-11584]:ExpressionStatement[11551-11584]"
    }, {
      "left" : "if (StringUtil.in(name, Constants.InBodyStartToHead))",
      "right" : "if (StringUtil.in(name, Constants.InBodyStartToHead))",
      "info" : "IfStatement[11638-26490]:IfStatement[11638-26628]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11692-11769]:Block[11692-11769]"
    }, {
      "left" : "return tb.process(t, InHead);",
      "right" : "return tb.process(t, InHead);",
      "info" : "ReturnStatement[11718-11747]:ReturnStatement[11718-11747]"
    }, {
      "left" : "if (name.equals(\"body\"))",
      "right" : "if (name.equals(\"body\"))",
      "info" : "IfStatement[11775-26490]:IfStatement[11775-26628]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11800-12569]:Block[11800-12569]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[11826-11841]:ExpressionStatement[11826-11841]"
    }, {
      "left" : "LinkedList<Element> stack = tb.getStack();",
      "right" : "LinkedList<Element> stack = tb.getStack();",
      "info" : "VariableDeclarationStatement[11866-11908]:VariableDeclarationStatement[11866-11908]"
    }, {
      "left" : "if (stack.size() == 1 || (stack.size() > 2 && !stack.get(1).nodeName().equals(\"body\")))",
      "right" : "if (stack.size() == 1 || (stack.size() > 2 && !stack.get(1).nodeName().equals(\"body\")))",
      "info" : "IfStatement[11933-12547]:IfStatement[11933-12547]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12021-12153]:Block[12021-12153]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[12104-12117]:ReturnStatement[12104-12117]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12159-12547]:Block[12159-12547]"
    }, {
      "left" : "tb.framesetOk(false);",
      "right" : "tb.framesetOk(false);",
      "info" : "ExpressionStatement[12189-12210]:ExpressionStatement[12189-12210]"
    }, {
      "left" : "Element body = stack.get(1);",
      "right" : "Element body = stack.get(1);",
      "info" : "VariableDeclarationStatement[12239-12267]:VariableDeclarationStatement[12239-12267]"
    }, {
      "left" : "for (Attribute attribute : startTag.getAttributes())",
      "right" : "for (Attribute attribute : startTag.getAttributes())",
      "info" : "EnhancedForStatement[12296-12521]:EnhancedForStatement[12296-12521]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12349-12521]:Block[12349-12521]"
    }, {
      "left" : "if (!body.hasAttr(attribute.getKey()))",
      "right" : "if (!body.hasAttr(attribute.getKey()))",
      "info" : "IfStatement[12383-12491]:IfStatement[12383-12491]"
    }, {
      "left" : "body.attributes().put(attribute);",
      "right" : "body.attributes().put(attribute);",
      "info" : "ExpressionStatement[12458-12491]:ExpressionStatement[12458-12491]"
    }, {
      "left" : "if (name.equals(\"frameset\"))",
      "right" : "if (name.equals(\"frameset\"))",
      "info" : "IfStatement[12575-26490]:IfStatement[12575-26628]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12604-13556]:Block[12604-13556]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[12630-12645]:ExpressionStatement[12630-12645]"
    }, {
      "left" : "LinkedList<Element> stack = tb.getStack();",
      "right" : "LinkedList<Element> stack = tb.getStack();",
      "info" : "VariableDeclarationStatement[12670-12712]:VariableDeclarationStatement[12670-12712]"
    }, {
      "left" : "if (stack.size() == 1 || (stack.size() > 2 && !stack.get(1).nodeName().equals(\"body\")))",
      "right" : "if (stack.size() == 1 || (stack.size() > 2 && !stack.get(1).nodeName().equals(\"body\")))",
      "info" : "IfStatement[12737-13534]:IfStatement[12737-13534]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12825-12957]:Block[12825-12957]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[12908-12921]:ReturnStatement[12908-12921]"
    }, {
      "left" : "if (!tb.framesetOk())",
      "right" : "if (!tb.framesetOk())",
      "info" : "IfStatement[12963-13534]:IfStatement[12963-13534]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12985-13073]:Block[12985-13073]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[13015-13028]:ReturnStatement[13015-13028]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13079-13534]:Block[13079-13534]"
    }, {
      "left" : "Element second = stack.get(1);",
      "right" : "Element second = stack.get(1);",
      "info" : "VariableDeclarationStatement[13109-13139]:VariableDeclarationStatement[13109-13139]"
    }, {
      "left" : "if (second.parent() != null)",
      "right" : "if (second.parent() != null)",
      "info" : "IfStatement[13168-13245]:IfStatement[13168-13245]"
    }, {
      "left" : "second.remove();",
      "right" : "second.remove();",
      "info" : "ExpressionStatement[13229-13245]:ExpressionStatement[13229-13245]"
    }, {
      "left" : "while (stack.size() > 1)\n                                stack.removeLast();",
      "right" : "while (stack.size() > 1)\n                                stack.removeLast();",
      "info" : "WhileStatement[13328-13404]:WhileStatement[13328-13404]"
    }, {
      "left" : "stack.removeLast();",
      "right" : "stack.removeLast();",
      "info" : "ExpressionStatement[13385-13404]:ExpressionStatement[13385-13404]"
    }, {
      "left" : "tb.insert(startTag);",
      "right" : "tb.insert(startTag);",
      "info" : "ExpressionStatement[13433-13453]:ExpressionStatement[13433-13453]"
    }, {
      "left" : "tb.transition(InFrameset);",
      "right" : "tb.transition(InFrameset);",
      "info" : "ExpressionStatement[13482-13508]:ExpressionStatement[13482-13508]"
    }, {
      "left" : "if (StringUtil.in(name, Constants.InBodyStartPClosers))",
      "right" : "if (StringUtil.in(name, Constants.InBodyStartPClosers))",
      "info" : "IfStatement[13562-26490]:IfStatement[13562-26628]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13618-13828]:Block[13618-13828]"
    }, {
      "left" : "if (tb.inButtonScope(\"p\"))",
      "right" : "if (tb.inButtonScope(\"p\"))",
      "info" : "IfStatement[13644-13761]:IfStatement[13644-13761]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13671-13761]:Block[13671-13761]"
    }, {
      "left" : "tb.process(new Token.EndTag(\"p\"));",
      "right" : "tb.process(new Token.EndTag(\"p\"));",
      "info" : "ExpressionStatement[13701-13735]:ExpressionStatement[13701-13735]"
    }, {
      "left" : "tb.insert(startTag);",
      "right" : "tb.insert(startTag);",
      "info" : "ExpressionStatement[13786-13806]:ExpressionStatement[13786-13806]"
    }, {
      "left" : "if (StringUtil.in(name, Constants.Headings))",
      "right" : "if (StringUtil.in(name, Constants.Headings))",
      "info" : "IfStatement[13834-26490]:IfStatement[13834-26628]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13879-14294]:Block[13879-14294]"
    }, {
      "left" : "if (tb.inButtonScope(\"p\"))",
      "right" : "if (tb.inButtonScope(\"p\"))",
      "info" : "IfStatement[13905-14022]:IfStatement[13905-14022]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13932-14022]:Block[13932-14022]"
    }, {
      "left" : "tb.process(new Token.EndTag(\"p\"));",
      "right" : "tb.process(new Token.EndTag(\"p\"));",
      "info" : "ExpressionStatement[13962-13996]:ExpressionStatement[13962-13996]"
    }, {
      "left" : "if (StringUtil.in(tb.currentElement().nodeName(), Constants.Headings))",
      "right" : "if (StringUtil.in(tb.currentElement().nodeName(), Constants.Headings))",
      "info" : "IfStatement[14047-14227]:IfStatement[14047-14227]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14118-14227]:Block[14118-14227]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[14148-14163]:ExpressionStatement[14148-14163]"
    }, {
      "left" : "tb.pop();",
      "right" : "tb.pop();",
      "info" : "ExpressionStatement[14192-14201]:ExpressionStatement[14192-14201]"
    }, {
      "left" : "tb.insert(startTag);",
      "right" : "tb.insert(startTag);",
      "info" : "ExpressionStatement[14252-14272]:ExpressionStatement[14252-14272]"
    }, {
      "left" : "if (StringUtil.in(name, Constants.InBodyStartPreListing))",
      "right" : "if (StringUtil.in(name, Constants.InBodyStartPreListing))",
      "info" : "IfStatement[14300-26490]:IfStatement[14300-26628]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14358-14671]:Block[14358-14671]"
    }, {
      "left" : "if (tb.inButtonScope(\"p\"))",
      "right" : "if (tb.inButtonScope(\"p\"))",
      "info" : "IfStatement[14384-14501]:IfStatement[14384-14501]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14411-14501]:Block[14411-14501]"
    }, {
      "left" : "tb.process(new Token.EndTag(\"p\"));",
      "right" : "tb.process(new Token.EndTag(\"p\"));",
      "info" : "ExpressionStatement[14441-14475]:ExpressionStatement[14441-14475]"
    }, {
      "left" : "tb.insert(startTag);",
      "right" : "tb.insert(startTag);",
      "info" : "ExpressionStatement[14526-14546]:ExpressionStatement[14526-14546]"
    }, {
      "left" : "tb.framesetOk(false);",
      "right" : "tb.framesetOk(false);",
      "info" : "ExpressionStatement[14628-14649]:ExpressionStatement[14628-14649]"
    }, {
      "left" : "if (name.equals(\"form\"))",
      "right" : "if (name.equals(\"form\"))",
      "info" : "IfStatement[14677-26490]:IfStatement[14677-26628]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14702-15093]:Block[14702-15093]"
    }, {
      "left" : "if (tb.getFormElement() != null)",
      "right" : "if (tb.getFormElement() != null)",
      "info" : "IfStatement[14728-14874]:IfStatement[14728-14874]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14761-14874]:Block[14761-14874]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[14791-14806]:ExpressionStatement[14791-14806]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[14835-14848]:ReturnStatement[14835-14848]"
    }, {
      "left" : "if (tb.inButtonScope(\"p\"))",
      "right" : "if (tb.inButtonScope(\"p\"))",
      "info" : "IfStatement[14899-15016]:IfStatement[14899-15016]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14926-15016]:Block[14926-15016]"
    }, {
      "left" : "tb.process(new Token.EndTag(\"p\"));",
      "right" : "tb.process(new Token.EndTag(\"p\"));",
      "info" : "ExpressionStatement[14956-14990]:ExpressionStatement[14956-14990]"
    }, {
      "left" : "tb.insertForm(startTag, true);",
      "right" : "tb.insertForm(startTag, true);",
      "info" : "ExpressionStatement[15041-15071]:ExpressionStatement[15041-15071]"
    }, {
      "left" : "if (name.equals(\"li\"))",
      "right" : "if (name.equals(\"li\"))",
      "info" : "IfStatement[15099-26490]:IfStatement[15099-26628]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15122-15949]:Block[15122-15949]"
    }, {
      "left" : "tb.framesetOk(false);",
      "right" : "tb.framesetOk(false);",
      "info" : "ExpressionStatement[15148-15169]:ExpressionStatement[15148-15169]"
    }, {
      "left" : "LinkedList<Element> stack = tb.getStack();",
      "right" : "LinkedList<Element> stack = tb.getStack();",
      "info" : "VariableDeclarationStatement[15194-15236]:VariableDeclarationStatement[15194-15236]"
    }, {
      "left" : "for (int i = stack.size() - 1; i > 0; i--)",
      "right" : "for (int i = stack.size() - 1; i > 0; i--)",
      "info" : "ForStatement[15261-15740]:ForStatement[15261-15740]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15304-15740]:Block[15304-15740]"
    }, {
      "left" : "Element el = stack.get(i);",
      "right" : "Element el = stack.get(i);",
      "info" : "VariableDeclarationStatement[15334-15360]:VariableDeclarationStatement[15334-15360]"
    }, {
      "left" : "if (el.nodeName().equals(\"li\"))",
      "right" : "if (el.nodeName().equals(\"li\"))",
      "info" : "IfStatement[15389-15559]:IfStatement[15389-15559]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15421-15559]:Block[15421-15559]"
    }, {
      "left" : "tb.process(new Token.EndTag(\"li\"));",
      "right" : "tb.process(new Token.EndTag(\"li\"));",
      "info" : "ExpressionStatement[15455-15490]:ExpressionStatement[15455-15490]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[15523-15529]:BreakStatement[15523-15529]"
    }, {
      "left" : "if (tb.isSpecial(el) && !StringUtil.in(el.nodeName(), Constants.InBodyStartLiBreakers))",
      "right" : "if (tb.isSpecial(el) && !StringUtil.in(el.nodeName(), Constants.InBodyStartLiBreakers))",
      "info" : "IfStatement[15588-15714]:IfStatement[15588-15714]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[15708-15714]:BreakStatement[15708-15714]"
    }, {
      "left" : "if (tb.inButtonScope(\"p\"))",
      "right" : "if (tb.inButtonScope(\"p\"))",
      "info" : "IfStatement[15765-15882]:IfStatement[15765-15882]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15792-15882]:Block[15792-15882]"
    }, {
      "left" : "tb.process(new Token.EndTag(\"p\"));",
      "right" : "tb.process(new Token.EndTag(\"p\"));",
      "info" : "ExpressionStatement[15822-15856]:ExpressionStatement[15822-15856]"
    }, {
      "left" : "tb.insert(startTag);",
      "right" : "tb.insert(startTag);",
      "info" : "ExpressionStatement[15907-15927]:ExpressionStatement[15907-15927]"
    }, {
      "left" : "if (StringUtil.in(name, Constants.DdDt))",
      "right" : "if (StringUtil.in(name, Constants.DdDt))",
      "info" : "IfStatement[15955-26490]:IfStatement[15955-26628]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15996-16850]:Block[15996-16850]"
    }, {
      "left" : "tb.framesetOk(false);",
      "right" : "tb.framesetOk(false);",
      "info" : "ExpressionStatement[16022-16043]:ExpressionStatement[16022-16043]"
    }, {
      "left" : "LinkedList<Element> stack = tb.getStack();",
      "right" : "LinkedList<Element> stack = tb.getStack();",
      "info" : "VariableDeclarationStatement[16068-16110]:VariableDeclarationStatement[16068-16110]"
    }, {
      "left" : "for (int i = stack.size() - 1; i > 0; i--)",
      "right" : "for (int i = stack.size() - 1; i > 0; i--)",
      "info" : "ForStatement[16135-16641]:ForStatement[16135-16641]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16178-16641]:Block[16178-16641]"
    }, {
      "left" : "Element el = stack.get(i);",
      "right" : "Element el = stack.get(i);",
      "info" : "VariableDeclarationStatement[16208-16234]:VariableDeclarationStatement[16208-16234]"
    }, {
      "left" : "if (StringUtil.in(el.nodeName(), Constants.DdDt))",
      "right" : "if (StringUtil.in(el.nodeName(), Constants.DdDt))",
      "info" : "IfStatement[16263-16460]:IfStatement[16263-16460]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16313-16460]:Block[16313-16460]"
    }, {
      "left" : "tb.process(new Token.EndTag(el.nodeName()));",
      "right" : "tb.process(new Token.EndTag(el.nodeName()));",
      "info" : "ExpressionStatement[16347-16391]:ExpressionStatement[16347-16391]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[16424-16430]:BreakStatement[16424-16430]"
    }, {
      "left" : "if (tb.isSpecial(el) && !StringUtil.in(el.nodeName(), Constants.InBodyStartLiBreakers))",
      "right" : "if (tb.isSpecial(el) && !StringUtil.in(el.nodeName(), Constants.InBodyStartLiBreakers))",
      "info" : "IfStatement[16489-16615]:IfStatement[16489-16615]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[16609-16615]:BreakStatement[16609-16615]"
    }, {
      "left" : "if (tb.inButtonScope(\"p\"))",
      "right" : "if (tb.inButtonScope(\"p\"))",
      "info" : "IfStatement[16666-16783]:IfStatement[16666-16783]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16693-16783]:Block[16693-16783]"
    }, {
      "left" : "tb.process(new Token.EndTag(\"p\"));",
      "right" : "tb.process(new Token.EndTag(\"p\"));",
      "info" : "ExpressionStatement[16723-16757]:ExpressionStatement[16723-16757]"
    }, {
      "left" : "tb.insert(startTag);",
      "right" : "tb.insert(startTag);",
      "info" : "ExpressionStatement[16808-16828]:ExpressionStatement[16808-16828]"
    }, {
      "left" : "if (name.equals(\"plaintext\"))",
      "right" : "if (name.equals(\"plaintext\"))",
      "info" : "IfStatement[16856-26490]:IfStatement[16856-26628]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16886-17198]:Block[16886-17198]"
    }, {
      "left" : "if (tb.inButtonScope(\"p\"))",
      "right" : "if (tb.inButtonScope(\"p\"))",
      "info" : "IfStatement[16912-17029]:IfStatement[16912-17029]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16939-17029]:Block[16939-17029]"
    }, {
      "left" : "tb.process(new Token.EndTag(\"p\"));",
      "right" : "tb.process(new Token.EndTag(\"p\"));",
      "info" : "ExpressionStatement[16969-17003]:ExpressionStatement[16969-17003]"
    }, {
      "left" : "tb.insert(startTag);",
      "right" : "tb.insert(startTag);",
      "info" : "ExpressionStatement[17054-17074]:ExpressionStatement[17054-17074]"
    }, {
      "left" : "tb.tokeniser.transition(TokeniserState.PLAINTEXT);",
      "right" : "tb.tokeniser.transition(TokeniserState.PLAINTEXT);",
      "info" : "ExpressionStatement[17099-17149]:ExpressionStatement[17099-17149]"
    }, {
      "left" : "if (name.equals(\"button\"))",
      "right" : "if (name.equals(\"button\"))",
      "info" : "IfStatement[17204-26490]:IfStatement[17204-26628]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17231-17747]:Block[17231-17747]"
    }, {
      "left" : "if (tb.inButtonScope(\"button\"))",
      "right" : "if (tb.inButtonScope(\"button\"))",
      "info" : "IfStatement[17257-17725]:IfStatement[17257-17725]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17289-17529]:Block[17289-17529]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[17370-17385]:ExpressionStatement[17370-17385]"
    }, {
      "left" : "tb.process(new Token.EndTag(\"button\"));",
      "right" : "tb.process(new Token.EndTag(\"button\"));",
      "info" : "ExpressionStatement[17414-17453]:ExpressionStatement[17414-17453]"
    }, {
      "left" : "tb.process(startTag);",
      "right" : "tb.process(startTag);",
      "info" : "ExpressionStatement[17482-17503]:ExpressionStatement[17482-17503]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17535-17725]:Block[17535-17725]"
    }, {
      "left" : "tb.reconstructFormattingElements();",
      "right" : "tb.reconstructFormattingElements();",
      "info" : "ExpressionStatement[17565-17600]:ExpressionStatement[17565-17600]"
    }, {
      "left" : "tb.insert(startTag);",
      "right" : "tb.insert(startTag);",
      "info" : "ExpressionStatement[17629-17649]:ExpressionStatement[17629-17649]"
    }, {
      "left" : "tb.framesetOk(false);",
      "right" : "tb.framesetOk(false);",
      "info" : "ExpressionStatement[17678-17699]:ExpressionStatement[17678-17699]"
    }, {
      "left" : "if (name.equals(\"a\"))",
      "right" : "if (name.equals(\"a\"))",
      "info" : "IfStatement[17753-26490]:IfStatement[17753-26628]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17775-18532]:Block[17775-18532]"
    }, {
      "left" : "if (tb.getActiveFormattingElement(\"a\") != null)",
      "right" : "if (tb.getActiveFormattingElement(\"a\") != null)",
      "info" : "IfStatement[17801-18333]:IfStatement[17801-18333]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17849-18333]:Block[17849-18333]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[17879-17894]:ExpressionStatement[17879-17894]"
    }, {
      "left" : "tb.process(new Token.EndTag(\"a\"));",
      "right" : "tb.process(new Token.EndTag(\"a\"));",
      "info" : "ExpressionStatement[17923-17957]:ExpressionStatement[17923-17957]"
    }, {
      "left" : "Element remainingA = tb.getFromStack(\"a\");",
      "right" : "Element remainingA = tb.getFromStack(\"a\");",
      "info" : "VariableDeclarationStatement[18034-18076]:VariableDeclarationStatement[18034-18076]"
    }, {
      "left" : "if (remainingA != null)",
      "right" : "if (remainingA != null)",
      "info" : "IfStatement[18105-18307]:IfStatement[18105-18307]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18129-18307]:Block[18129-18307]"
    }, {
      "left" : "tb.removeFromActiveFormattingElements(remainingA);",
      "right" : "tb.removeFromActiveFormattingElements(remainingA);",
      "info" : "ExpressionStatement[18163-18213]:ExpressionStatement[18163-18213]"
    }, {
      "left" : "tb.removeFromStack(remainingA);",
      "right" : "tb.removeFromStack(remainingA);",
      "info" : "ExpressionStatement[18246-18277]:ExpressionStatement[18246-18277]"
    }, {
      "left" : "tb.reconstructFormattingElements();",
      "right" : "tb.reconstructFormattingElements();",
      "info" : "ExpressionStatement[18358-18393]:ExpressionStatement[18358-18393]"
    }, {
      "left" : "Element a = tb.insert(startTag);",
      "right" : "Element a = tb.insert(startTag);",
      "info" : "VariableDeclarationStatement[18418-18450]:VariableDeclarationStatement[18418-18450]"
    }, {
      "left" : "tb.pushActiveFormattingElements(a);",
      "right" : "tb.pushActiveFormattingElements(a);",
      "info" : "ExpressionStatement[18475-18510]:ExpressionStatement[18475-18510]"
    }, {
      "left" : "if (StringUtil.in(name, Constants.Formatters))",
      "right" : "if (StringUtil.in(name, Constants.Formatters))",
      "info" : "IfStatement[18538-26490]:IfStatement[18538-26628]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18585-18787]:Block[18585-18787]"
    }, {
      "left" : "tb.reconstructFormattingElements();",
      "right" : "tb.reconstructFormattingElements();",
      "info" : "ExpressionStatement[18611-18646]:ExpressionStatement[18611-18646]"
    }, {
      "left" : "Element el = tb.insert(startTag);",
      "right" : "Element el = tb.insert(startTag);",
      "info" : "VariableDeclarationStatement[18671-18704]:VariableDeclarationStatement[18671-18704]"
    }, {
      "left" : "tb.pushActiveFormattingElements(el);",
      "right" : "tb.pushActiveFormattingElements(el);",
      "info" : "ExpressionStatement[18729-18765]:ExpressionStatement[18729-18765]"
    }, {
      "left" : "if (name.equals(\"nobr\"))",
      "right" : "if (name.equals(\"nobr\"))",
      "info" : "IfStatement[18793-26490]:IfStatement[18793-26628]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18818-19270]:Block[18818-19270]"
    }, {
      "left" : "tb.reconstructFormattingElements();",
      "right" : "tb.reconstructFormattingElements();",
      "info" : "ExpressionStatement[18844-18879]:ExpressionStatement[18844-18879]"
    }, {
      "left" : "if (tb.inScope(\"nobr\"))",
      "right" : "if (tb.inScope(\"nobr\"))",
      "info" : "IfStatement[18904-19129]:IfStatement[18904-19129]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18928-19129]:Block[18928-19129]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[18958-18973]:ExpressionStatement[18958-18973]"
    }, {
      "left" : "tb.process(new Token.EndTag(\"nobr\"));",
      "right" : "tb.process(new Token.EndTag(\"nobr\"));",
      "info" : "ExpressionStatement[19002-19039]:ExpressionStatement[19002-19039]"
    }, {
      "left" : "tb.reconstructFormattingElements();",
      "right" : "tb.reconstructFormattingElements();",
      "info" : "ExpressionStatement[19068-19103]:ExpressionStatement[19068-19103]"
    }, {
      "left" : "Element el = tb.insert(startTag);",
      "right" : "Element el = tb.insert(startTag);",
      "info" : "VariableDeclarationStatement[19154-19187]:VariableDeclarationStatement[19154-19187]"
    }, {
      "left" : "tb.pushActiveFormattingElements(el);",
      "right" : "tb.pushActiveFormattingElements(el);",
      "info" : "ExpressionStatement[19212-19248]:ExpressionStatement[19212-19248]"
    }, {
      "left" : "if (StringUtil.in(name, Constants.InBodyStartApplets))",
      "right" : "if (StringUtil.in(name, Constants.InBodyStartApplets))",
      "info" : "IfStatement[19276-26490]:IfStatement[19276-26628]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19331-19568]:Block[19331-19568]"
    }, {
      "left" : "tb.reconstructFormattingElements();",
      "right" : "tb.reconstructFormattingElements();",
      "info" : "ExpressionStatement[19357-19392]:ExpressionStatement[19357-19392]"
    }, {
      "left" : "tb.insert(startTag);",
      "right" : "tb.insert(startTag);",
      "info" : "ExpressionStatement[19417-19437]:ExpressionStatement[19417-19437]"
    }, {
      "left" : "tb.insertMarkerToFormattingElements();",
      "right" : "tb.insertMarkerToFormattingElements();",
      "info" : "ExpressionStatement[19462-19500]:ExpressionStatement[19462-19500]"
    }, {
      "left" : "tb.framesetOk(false);",
      "right" : "tb.framesetOk(false);",
      "info" : "ExpressionStatement[19525-19546]:ExpressionStatement[19525-19546]"
    }, {
      "left" : "if (name.equals(\"table\"))",
      "right" : "if (name.equals(\"table\"))",
      "info" : "IfStatement[19574-26490]:IfStatement[19574-26628]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19600-19967]:Block[19600-19967]"
    }, {
      "left" : "if (tb.getDocument().quirksMode() != Document.QuirksMode.quirks && tb.inButtonScope(\"p\"))",
      "right" : "if (tb.getDocument().quirksMode() != Document.QuirksMode.quirks && tb.inButtonScope(\"p\"))",
      "info" : "IfStatement[19626-19806]:IfStatement[19626-19806]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19716-19806]:Block[19716-19806]"
    }, {
      "left" : "tb.process(new Token.EndTag(\"p\"));",
      "right" : "tb.process(new Token.EndTag(\"p\"));",
      "info" : "ExpressionStatement[19746-19780]:ExpressionStatement[19746-19780]"
    }, {
      "left" : "tb.insert(startTag);",
      "right" : "tb.insert(startTag);",
      "info" : "ExpressionStatement[19831-19851]:ExpressionStatement[19831-19851]"
    }, {
      "left" : "tb.framesetOk(false);",
      "right" : "tb.framesetOk(false);",
      "info" : "ExpressionStatement[19876-19897]:ExpressionStatement[19876-19897]"
    }, {
      "left" : "tb.transition(InTable);",
      "right" : "tb.transition(InTable);",
      "info" : "ExpressionStatement[19922-19945]:ExpressionStatement[19922-19945]"
    }, {
      "left" : "if (StringUtil.in(name, Constants.InBodyStartEmptyFormatters))",
      "right" : "if (StringUtil.in(name, Constants.InBodyStartEmptyFormatters))",
      "info" : "IfStatement[19973-26490]:IfStatement[19973-26628]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20036-20215]:Block[20036-20215]"
    }, {
      "left" : "tb.reconstructFormattingElements();",
      "right" : "tb.reconstructFormattingElements();",
      "info" : "ExpressionStatement[20062-20097]:ExpressionStatement[20062-20097]"
    }, {
      "left" : "tb.insertEmpty(startTag);",
      "right" : "tb.insertEmpty(startTag);",
      "info" : "ExpressionStatement[20122-20147]:ExpressionStatement[20122-20147]"
    }, {
      "left" : "tb.framesetOk(false);",
      "right" : "tb.framesetOk(false);",
      "info" : "ExpressionStatement[20172-20193]:ExpressionStatement[20172-20193]"
    }, {
      "left" : "if (name.equals(\"input\"))",
      "right" : "if (name.equals(\"input\"))",
      "info" : "IfStatement[20221-26490]:IfStatement[20221-26628]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20247-20516]:Block[20247-20516]"
    }, {
      "left" : "tb.reconstructFormattingElements();",
      "right" : "tb.reconstructFormattingElements();",
      "info" : "ExpressionStatement[20273-20308]:ExpressionStatement[20273-20308]"
    }, {
      "left" : "Element el = tb.insertEmpty(startTag);",
      "right" : "Element el = tb.insertEmpty(startTag);",
      "info" : "VariableDeclarationStatement[20333-20371]:VariableDeclarationStatement[20333-20371]"
    }, {
      "left" : "if (!el.attr(\"type\").equalsIgnoreCase(\"hidden\"))",
      "right" : "if (!el.attr(\"type\").equalsIgnoreCase(\"hidden\"))",
      "info" : "IfStatement[20396-20494]:IfStatement[20396-20494]"
    }, {
      "left" : "tb.framesetOk(false);",
      "right" : "tb.framesetOk(false);",
      "info" : "ExpressionStatement[20473-20494]:ExpressionStatement[20473-20494]"
    }, {
      "left" : "if (StringUtil.in(name, Constants.InBodyStartMedia))",
      "right" : "if (StringUtil.in(name, Constants.InBodyStartMedia))",
      "info" : "IfStatement[20522-26490]:IfStatement[20522-26628]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20575-20648]:Block[20575-20648]"
    }, {
      "left" : "tb.insertEmpty(startTag);",
      "right" : "tb.insertEmpty(startTag);",
      "info" : "ExpressionStatement[20601-20626]:ExpressionStatement[20601-20626]"
    }, {
      "left" : "if (name.equals(\"hr\"))",
      "right" : "if (name.equals(\"hr\"))",
      "info" : "IfStatement[20654-26490]:IfStatement[20654-26628]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20677-20938]:Block[20677-20938]"
    }, {
      "left" : "if (tb.inButtonScope(\"p\"))",
      "right" : "if (tb.inButtonScope(\"p\"))",
      "info" : "IfStatement[20703-20820]:IfStatement[20703-20820]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20730-20820]:Block[20730-20820]"
    }, {
      "left" : "tb.process(new Token.EndTag(\"p\"));",
      "right" : "tb.process(new Token.EndTag(\"p\"));",
      "info" : "ExpressionStatement[20760-20794]:ExpressionStatement[20760-20794]"
    }, {
      "left" : "tb.insertEmpty(startTag);",
      "right" : "tb.insertEmpty(startTag);",
      "info" : "ExpressionStatement[20845-20870]:ExpressionStatement[20845-20870]"
    }, {
      "left" : "tb.framesetOk(false);",
      "right" : "tb.framesetOk(false);",
      "info" : "ExpressionStatement[20895-20916]:ExpressionStatement[20895-20916]"
    }, {
      "left" : "if (name.equals(\"image\"))",
      "right" : "if (name.equals(\"image\"))",
      "info" : "IfStatement[20944-26490]:IfStatement[20944-26628]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20970-21104]:Block[20970-21242]"
    }, {
      "left" : "return tb.process(startTag.name(\"img\"));",
      "right" : "return tb.process(startTag.name(\"img\"));",
      "info" : "ReturnStatement[21000-21040]:ReturnStatement[21060-21100]"
    }, {
      "left" : "if (name.equals(\"isindex\"))",
      "right" : "if (name.equals(\"isindex\"))",
      "info" : "IfStatement[21110-26490]:IfStatement[21248-26628]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21138-22897]:Block[21276-23035]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[21232-21247]:ExpressionStatement[21370-21385]"
    }, {
      "left" : "if (tb.getFormElement() != null)",
      "right" : "if (tb.getFormElement() != null)",
      "info" : "IfStatement[21272-21346]:IfStatement[21410-21484]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[21333-21346]:ReturnStatement[21471-21484]"
    }, {
      "left" : "tb.tokeniser.acknowledgeSelfClosingFlag();",
      "right" : "tb.tokeniser.acknowledgeSelfClosingFlag();",
      "info" : "ExpressionStatement[21372-21414]:ExpressionStatement[21510-21552]"
    }, {
      "left" : "tb.process(new Token.StartTag(\"form\"));",
      "right" : "tb.process(new Token.StartTag(\"form\"));",
      "info" : "ExpressionStatement[21439-21478]:ExpressionStatement[21577-21616]"
    }, {
      "left" : "if (startTag.attributes.hasKey(\"action\"))",
      "right" : "if (startTag.attributes.hasKey(\"action\"))",
      "info" : "IfStatement[21503-21720]:IfStatement[21641-21858]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21545-21720]:Block[21683-21858]"
    }, {
      "left" : "Element form = tb.getFormElement();",
      "right" : "Element form = tb.getFormElement();",
      "info" : "VariableDeclarationStatement[21575-21610]:VariableDeclarationStatement[21713-21748]"
    }, {
      "left" : "form.attr(\"action\", startTag.attributes.get(\"action\"));",
      "right" : "form.attr(\"action\", startTag.attributes.get(\"action\"));",
      "info" : "ExpressionStatement[21639-21694]:ExpressionStatement[21777-21832]"
    }, {
      "left" : "tb.process(new Token.StartTag(\"hr\"));",
      "right" : "tb.process(new Token.StartTag(\"hr\"));",
      "info" : "ExpressionStatement[21745-21782]:ExpressionStatement[21883-21920]"
    }, {
      "left" : "tb.process(new Token.StartTag(\"label\"));",
      "right" : "tb.process(new Token.StartTag(\"label\"));",
      "info" : "ExpressionStatement[21807-21847]:ExpressionStatement[21945-21985]"
    }, {
      "left" : "String prompt = startTag.attributes.hasKey(\"prompt\") ?\n                                startTag.attributes.get(\"prompt\") :\n                                \"This is a searchable index. Enter search keywords: \";",
      "right" : "String prompt = startTag.attributes.hasKey(\"prompt\") ?\n                                startTag.attributes.get(\"prompt\") :\n                                \"This is a searchable index. Enter search keywords: \";",
      "info" : "VariableDeclarationStatement[21922-22131]:VariableDeclarationStatement[22060-22269]"
    }, {
      "left" : "tb.process(new Token.Character(prompt));",
      "right" : "tb.process(new Token.Character(prompt));",
      "info" : "ExpressionStatement[22157-22197]:ExpressionStatement[22295-22335]"
    }, {
      "left" : "Attributes inputAttribs = new Attributes();",
      "right" : "Attributes inputAttribs = new Attributes();",
      "info" : "VariableDeclarationStatement[22256-22299]:VariableDeclarationStatement[22394-22437]"
    }, {
      "left" : "for (Attribute attr : startTag.attributes)",
      "right" : "for (Attribute attr : startTag.attributes)",
      "info" : "EnhancedForStatement[22324-22548]:EnhancedForStatement[22462-22686]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22367-22548]:Block[22505-22686]"
    }, {
      "left" : "if (!StringUtil.in(attr.getKey(), Constants.InBodyStartInputAttribs))",
      "right" : "if (!StringUtil.in(attr.getKey(), Constants.InBodyStartInputAttribs))",
      "info" : "IfStatement[22397-22522]:IfStatement[22535-22660]"
    }, {
      "left" : "inputAttribs.put(attr);",
      "right" : "inputAttribs.put(attr);",
      "info" : "ExpressionStatement[22499-22522]:ExpressionStatement[22637-22660]"
    }, {
      "left" : "inputAttribs.put(\"name\", \"isindex\");",
      "right" : "inputAttribs.put(\"name\", \"isindex\");",
      "info" : "ExpressionStatement[22573-22609]:ExpressionStatement[22711-22747]"
    }, {
      "left" : "tb.process(new Token.StartTag(\"input\", inputAttribs));",
      "right" : "tb.process(new Token.StartTag(\"input\", inputAttribs));",
      "info" : "ExpressionStatement[22634-22688]:ExpressionStatement[22772-22826]"
    }, {
      "left" : "tb.process(new Token.EndTag(\"label\"));",
      "right" : "tb.process(new Token.EndTag(\"label\"));",
      "info" : "ExpressionStatement[22713-22751]:ExpressionStatement[22851-22889]"
    }, {
      "left" : "tb.process(new Token.StartTag(\"hr\"));",
      "right" : "tb.process(new Token.StartTag(\"hr\"));",
      "info" : "ExpressionStatement[22776-22813]:ExpressionStatement[22914-22951]"
    }, {
      "left" : "tb.process(new Token.EndTag(\"form\"));",
      "right" : "tb.process(new Token.EndTag(\"form\"));",
      "info" : "ExpressionStatement[22838-22875]:ExpressionStatement[22976-23013]"
    }, {
      "left" : "if (name.equals(\"textarea\"))",
      "right" : "if (name.equals(\"textarea\"))",
      "info" : "IfStatement[22903-26490]:IfStatement[23041-26628]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22932-23444]:Block[23070-23582]"
    }, {
      "left" : "tb.insert(startTag);",
      "right" : "tb.insert(startTag);",
      "info" : "ExpressionStatement[22958-22978]:ExpressionStatement[23096-23116]"
    }, {
      "left" : "tb.tokeniser.transition(TokeniserState.Rcdata);",
      "right" : "tb.tokeniser.transition(TokeniserState.Rcdata);",
      "info" : "ExpressionStatement[23236-23283]:ExpressionStatement[23374-23421]"
    }, {
      "left" : "tb.markInsertionMode();",
      "right" : "tb.markInsertionMode();",
      "info" : "ExpressionStatement[23308-23331]:ExpressionStatement[23446-23469]"
    }, {
      "left" : "tb.framesetOk(false);",
      "right" : "tb.framesetOk(false);",
      "info" : "ExpressionStatement[23356-23377]:ExpressionStatement[23494-23515]"
    }, {
      "left" : "tb.transition(Text);",
      "right" : "tb.transition(Text);",
      "info" : "ExpressionStatement[23402-23422]:ExpressionStatement[23540-23560]"
    }, {
      "left" : "if (name.equals(\"xmp\"))",
      "right" : "if (name.equals(\"xmp\"))",
      "info" : "IfStatement[23450-26490]:IfStatement[23588-26628]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23474-23798]:Block[23612-23936]"
    }, {
      "left" : "if (tb.inButtonScope(\"p\"))",
      "right" : "if (tb.inButtonScope(\"p\"))",
      "info" : "IfStatement[23500-23617]:IfStatement[23638-23755]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23527-23617]:Block[23665-23755]"
    }, {
      "left" : "tb.process(new Token.EndTag(\"p\"));",
      "right" : "tb.process(new Token.EndTag(\"p\"));",
      "info" : "ExpressionStatement[23557-23591]:ExpressionStatement[23695-23729]"
    }, {
      "left" : "tb.reconstructFormattingElements();",
      "right" : "tb.reconstructFormattingElements();",
      "info" : "ExpressionStatement[23642-23677]:ExpressionStatement[23780-23815]"
    }, {
      "left" : "tb.framesetOk(false);",
      "right" : "tb.framesetOk(false);",
      "info" : "ExpressionStatement[23702-23723]:ExpressionStatement[23840-23861]"
    }, {
      "left" : "handleRawtext(startTag, tb);",
      "right" : "handleRawtext(startTag, tb);",
      "info" : "ExpressionStatement[23748-23776]:ExpressionStatement[23886-23914]"
    }, {
      "left" : "if (name.equals(\"iframe\"))",
      "right" : "if (name.equals(\"iframe\"))",
      "info" : "IfStatement[23804-26490]:IfStatement[23942-26628]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23831-23953]:Block[23969-24091]"
    }, {
      "left" : "tb.framesetOk(false);",
      "right" : "tb.framesetOk(false);",
      "info" : "ExpressionStatement[23857-23878]:ExpressionStatement[23995-24016]"
    }, {
      "left" : "handleRawtext(startTag, tb);",
      "right" : "handleRawtext(startTag, tb);",
      "info" : "ExpressionStatement[23903-23931]:ExpressionStatement[24041-24069]"
    }, {
      "left" : "if (name.equals(\"noembed\"))",
      "right" : "if (name.equals(\"noembed\"))",
      "info" : "IfStatement[23959-26490]:IfStatement[24097-26628]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23987-24129]:Block[24125-24267]"
    }, {
      "left" : "handleRawtext(startTag, tb);",
      "right" : "handleRawtext(startTag, tb);",
      "info" : "ExpressionStatement[24079-24107]:ExpressionStatement[24217-24245]"
    }, {
      "left" : "if (name.equals(\"select\"))",
      "right" : "if (name.equals(\"select\"))",
      "info" : "IfStatement[24135-26490]:IfStatement[24273-26628]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24162-24698]:Block[24300-24836]"
    }, {
      "left" : "tb.reconstructFormattingElements();",
      "right" : "tb.reconstructFormattingElements();",
      "info" : "ExpressionStatement[24188-24223]:ExpressionStatement[24326-24361]"
    }, {
      "left" : "tb.insert(startTag);",
      "right" : "tb.insert(startTag);",
      "info" : "ExpressionStatement[24248-24268]:ExpressionStatement[24386-24406]"
    }, {
      "left" : "tb.framesetOk(false);",
      "right" : "tb.framesetOk(false);",
      "info" : "ExpressionStatement[24293-24314]:ExpressionStatement[24431-24452]"
    }, {
      "left" : "HtmlTreeBuilderState state = tb.state();",
      "right" : "HtmlTreeBuilderState state = tb.state();",
      "info" : "VariableDeclarationStatement[24340-24380]:VariableDeclarationStatement[24478-24518]"
    }, {
      "left" : "if (state.equals(InTable) || state.equals(InCaption) || state.equals(InTableBody) || state.equals(InRow) || state.equals(InCell))",
      "right" : "if (state.equals(InTable) || state.equals(InCaption) || state.equals(InTableBody) || state.equals(InRow) || state.equals(InCell))",
      "info" : "IfStatement[24405-24676]:IfStatement[24543-24814]"
    }, {
      "left" : "tb.transition(InSelectInTable);",
      "right" : "tb.transition(InSelectInTable);",
      "info" : "ExpressionStatement[24563-24594]:ExpressionStatement[24701-24732]"
    }, {
      "left" : "tb.transition(InSelect);",
      "right" : "tb.transition(InSelect);",
      "info" : "ExpressionStatement[24652-24676]:ExpressionStatement[24790-24814]"
    }, {
      "left" : "if (StringUtil.in(name, Constants.InBodyStartOptions))",
      "right" : "if (StringUtil.in(name, Constants.InBodyStartOptions))",
      "info" : "IfStatement[24704-26490]:IfStatement[24842-26628]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24759-25032]:Block[24897-25170]"
    }, {
      "left" : "if (tb.currentElement().nodeName().equals(\"option\"))",
      "right" : "if (tb.currentElement().nodeName().equals(\"option\"))",
      "info" : "IfStatement[24785-24905]:IfStatement[24923-25043]"
    }, {
      "left" : "tb.process(new Token.EndTag(\"option\"));",
      "right" : "tb.process(new Token.EndTag(\"option\"));",
      "info" : "ExpressionStatement[24866-24905]:ExpressionStatement[25004-25043]"
    }, {
      "left" : "tb.reconstructFormattingElements();",
      "right" : "tb.reconstructFormattingElements();",
      "info" : "ExpressionStatement[24930-24965]:ExpressionStatement[25068-25103]"
    }, {
      "left" : "tb.insert(startTag);",
      "right" : "tb.insert(startTag);",
      "info" : "ExpressionStatement[24990-25010]:ExpressionStatement[25128-25148]"
    }, {
      "left" : "if (StringUtil.in(name, Constants.InBodyStartRuby))",
      "right" : "if (StringUtil.in(name, Constants.InBodyStartRuby))",
      "info" : "IfStatement[25038-26490]:IfStatement[25176-26628]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25090-25557]:Block[25228-25695]"
    }, {
      "left" : "if (tb.inScope(\"ruby\"))",
      "right" : "if (tb.inScope(\"ruby\"))",
      "info" : "IfStatement[25116-25535]:IfStatement[25254-25673]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25140-25535]:Block[25278-25673]"
    }, {
      "left" : "tb.generateImpliedEndTags();",
      "right" : "tb.generateImpliedEndTags();",
      "info" : "ExpressionStatement[25170-25198]:ExpressionStatement[25308-25336]"
    }, {
      "left" : "if (!tb.currentElement().nodeName().equals(\"ruby\"))",
      "right" : "if (!tb.currentElement().nodeName().equals(\"ruby\"))",
      "info" : "IfStatement[25227-25460]:IfStatement[25365-25598]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25279-25460]:Block[25417-25598]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[25313-25328]:ExpressionStatement[25451-25466]"
    }, {
      "left" : "tb.popStackToBefore(\"ruby\");",
      "right" : "tb.popStackToBefore(\"ruby\");",
      "info" : "ExpressionStatement[25361-25389]:ExpressionStatement[25499-25527]"
    }, {
      "left" : "tb.insert(startTag);",
      "right" : "tb.insert(startTag);",
      "info" : "ExpressionStatement[25489-25509]:ExpressionStatement[25627-25647]"
    }, {
      "left" : "if (name.equals(\"math\"))",
      "right" : "if (name.equals(\"math\"))",
      "info" : "IfStatement[25563-26490]:IfStatement[25701-26628]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25588-25883]:Block[25726-26021]"
    }, {
      "left" : "tb.reconstructFormattingElements();",
      "right" : "tb.reconstructFormattingElements();",
      "info" : "ExpressionStatement[25614-25649]:ExpressionStatement[25752-25787]"
    }, {
      "left" : "tb.insert(startTag);",
      "right" : "tb.insert(startTag);",
      "info" : "ExpressionStatement[25774-25794]:ExpressionStatement[25912-25932]"
    }, {
      "left" : "tb.tokeniser.acknowledgeSelfClosingFlag();",
      "right" : "tb.tokeniser.acknowledgeSelfClosingFlag();",
      "info" : "ExpressionStatement[25819-25861]:ExpressionStatement[25957-25999]"
    }, {
      "left" : "if (name.equals(\"svg\"))",
      "right" : "if (name.equals(\"svg\"))",
      "info" : "IfStatement[25889-26490]:IfStatement[26027-26628]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25913-26197]:Block[26051-26335]"
    }, {
      "left" : "tb.reconstructFormattingElements();",
      "right" : "tb.reconstructFormattingElements();",
      "info" : "ExpressionStatement[25939-25974]:ExpressionStatement[26077-26112]"
    }, {
      "left" : "tb.insert(startTag);",
      "right" : "tb.insert(startTag);",
      "info" : "ExpressionStatement[26088-26108]:ExpressionStatement[26226-26246]"
    }, {
      "left" : "tb.tokeniser.acknowledgeSelfClosingFlag();",
      "right" : "tb.tokeniser.acknowledgeSelfClosingFlag();",
      "info" : "ExpressionStatement[26133-26175]:ExpressionStatement[26271-26313]"
    }, {
      "left" : "if (StringUtil.in(name, Constants.InBodyStartDrop))",
      "right" : "if (StringUtil.in(name, Constants.InBodyStartDrop))",
      "info" : "IfStatement[26203-26490]:IfStatement[26341-26628]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26255-26356]:Block[26393-26494]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[26281-26296]:ExpressionStatement[26419-26434]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[26321-26334]:ReturnStatement[26459-26472]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26362-26490]:Block[26500-26628]"
    }, {
      "left" : "tb.reconstructFormattingElements();",
      "right" : "tb.reconstructFormattingElements();",
      "info" : "ExpressionStatement[26388-26423]:ExpressionStatement[26526-26561]"
    }, {
      "left" : "tb.insert(startTag);",
      "right" : "tb.insert(startTag);",
      "info" : "ExpressionStatement[26448-26468]:ExpressionStatement[26586-26606]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[26511-26517]:BreakStatement[26649-26655]"
    }, {
      "left" : "case EndTag:",
      "right" : "case EndTag:",
      "info" : "SwitchCase[26535-26547]:SwitchCase[26673-26685]"
    }, {
      "left" : "Token.EndTag endTag = t.asEndTag();",
      "right" : "Token.EndTag endTag = t.asEndTag();",
      "info" : "VariableDeclarationStatement[26568-26603]:VariableDeclarationStatement[26706-26741]"
    }, {
      "left" : "name = endTag.name();",
      "right" : "name = endTag.name();",
      "info" : "ExpressionStatement[26624-26645]:ExpressionStatement[26762-26783]"
    }, {
      "left" : "if (name.equals(\"body\"))",
      "right" : "if (name.equals(\"body\"))",
      "info" : "IfStatement[26666-37589]:IfStatement[26804-37727]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26691-27124]:Block[26829-27262]"
    }, {
      "left" : "if (!tb.inScope(\"body\"))",
      "right" : "if (!tb.inScope(\"body\"))",
      "info" : "IfStatement[26717-27102]:IfStatement[26855-27240]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26742-26855]:Block[26880-26993]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[26772-26787]:ExpressionStatement[26910-26925]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[26816-26829]:ReturnStatement[26954-26967]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26861-27102]:Block[26999-27240]"
    }, {
      "left" : "tb.transition(AfterBody);",
      "right" : "tb.transition(AfterBody);",
      "info" : "ExpressionStatement[27051-27076]:ExpressionStatement[27189-27214]"
    }, {
      "left" : "if (name.equals(\"html\"))",
      "right" : "if (name.equals(\"html\"))",
      "info" : "IfStatement[27130-37589]:IfStatement[27268-37727]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27155-27356]:Block[27293-27494]"
    }, {
      "left" : "boolean notIgnored = tb.process(new Token.EndTag(\"body\"));",
      "right" : "boolean notIgnored = tb.process(new Token.EndTag(\"body\"));",
      "info" : "VariableDeclarationStatement[27181-27239]:VariableDeclarationStatement[27319-27377]"
    }, {
      "left" : "if (notIgnored)",
      "right" : "if (notIgnored)",
      "info" : "IfStatement[27264-27334]:IfStatement[27402-27472]"
    }, {
      "left" : "return tb.process(endTag);",
      "right" : "return tb.process(endTag);",
      "info" : "ReturnStatement[27308-27334]:ReturnStatement[27446-27472]"
    }, {
      "left" : "if (StringUtil.in(name, Constants.InBodyEndClosers))",
      "right" : "if (StringUtil.in(name, Constants.InBodyEndClosers))",
      "info" : "IfStatement[27362-37589]:IfStatement[27500-37727]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27415-27917]:Block[27553-28055]"
    }, {
      "left" : "if (!tb.inScope(name))",
      "right" : "if (!tb.inScope(name))",
      "info" : "IfStatement[27441-27895]:IfStatement[27579-28033]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27464-27625]:Block[27602-27763]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[27542-27557]:ExpressionStatement[27680-27695]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[27586-27599]:ReturnStatement[27724-27737]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27631-27895]:Block[27769-28033]"
    }, {
      "left" : "tb.generateImpliedEndTags();",
      "right" : "tb.generateImpliedEndTags();",
      "info" : "ExpressionStatement[27661-27689]:ExpressionStatement[27799-27827]"
    }, {
      "left" : "if (!tb.currentElement().nodeName().equals(name))",
      "right" : "if (!tb.currentElement().nodeName().equals(name))",
      "info" : "IfStatement[27718-27815]:IfStatement[27856-27953]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[27800-27815]:ExpressionStatement[27938-27953]"
    }, {
      "left" : "tb.popStackToClose(name);",
      "right" : "tb.popStackToClose(name);",
      "info" : "ExpressionStatement[27844-27869]:ExpressionStatement[27982-28007]"
    }, {
      "left" : "if (name.equals(\"form\"))",
      "right" : "if (name.equals(\"form\"))",
      "info" : "IfStatement[27923-37589]:IfStatement[28061-37727]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27948-28640]:Block[28086-28778]"
    }, {
      "left" : "Element currentForm = tb.getFormElement();",
      "right" : "Element currentForm = tb.getFormElement();",
      "info" : "VariableDeclarationStatement[27974-28016]:VariableDeclarationStatement[28112-28154]"
    }, {
      "left" : "tb.setFormElement(null);",
      "right" : "tb.setFormElement(null);",
      "info" : "ExpressionStatement[28041-28065]:ExpressionStatement[28179-28203]"
    }, {
      "left" : "if (currentForm == null || !tb.inScope(name))",
      "right" : "if (currentForm == null || !tb.inScope(name))",
      "info" : "IfStatement[28090-28618]:IfStatement[28228-28756]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28136-28249]:Block[28274-28387]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[28166-28181]:ExpressionStatement[28304-28319]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[28210-28223]:ReturnStatement[28348-28361]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28255-28618]:Block[28393-28756]"
    }, {
      "left" : "tb.generateImpliedEndTags();",
      "right" : "tb.generateImpliedEndTags();",
      "info" : "ExpressionStatement[28285-28313]:ExpressionStatement[28423-28451]"
    }, {
      "left" : "if (!tb.currentElement().nodeName().equals(name))",
      "right" : "if (!tb.currentElement().nodeName().equals(name))",
      "info" : "IfStatement[28342-28439]:IfStatement[28480-28577]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[28424-28439]:ExpressionStatement[28562-28577]"
    }, {
      "left" : "tb.removeFromStack(currentForm);",
      "right" : "tb.removeFromStack(currentForm);",
      "info" : "ExpressionStatement[28560-28592]:ExpressionStatement[28698-28730]"
    }, {
      "left" : "if (name.equals(\"p\"))",
      "right" : "if (name.equals(\"p\"))",
      "info" : "IfStatement[28646-37589]:IfStatement[28784-37727]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28668-29257]:Block[28806-29395]"
    }, {
      "left" : "if (!tb.inButtonScope(name))",
      "right" : "if (!tb.inButtonScope(name))",
      "info" : "IfStatement[28694-29235]:IfStatement[28832-29373]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28723-28961]:Block[28861-29099]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[28753-28768]:ExpressionStatement[28891-28906]"
    }, {
      "left" : "tb.process(new Token.StartTag(name));",
      "right" : "tb.process(new Token.StartTag(name));",
      "info" : "ExpressionStatement[28797-28834]:ExpressionStatement[28935-28972]"
    }, {
      "left" : "return tb.process(endTag);",
      "right" : "return tb.process(endTag);",
      "info" : "ReturnStatement[28909-28935]:ReturnStatement[29047-29073]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28967-29235]:Block[29105-29373]"
    }, {
      "left" : "tb.generateImpliedEndTags(name);",
      "right" : "tb.generateImpliedEndTags(name);",
      "info" : "ExpressionStatement[28997-29029]:ExpressionStatement[29135-29167]"
    }, {
      "left" : "if (!tb.currentElement().nodeName().equals(name))",
      "right" : "if (!tb.currentElement().nodeName().equals(name))",
      "info" : "IfStatement[29058-29155]:IfStatement[29196-29293]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[29140-29155]:ExpressionStatement[29278-29293]"
    }, {
      "left" : "tb.popStackToClose(name);",
      "right" : "tb.popStackToClose(name);",
      "info" : "ExpressionStatement[29184-29209]:ExpressionStatement[29322-29347]"
    }, {
      "left" : "if (name.equals(\"li\"))",
      "right" : "if (name.equals(\"li\"))",
      "info" : "IfStatement[29263-37589]:IfStatement[29401-37727]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29286-29752]:Block[29424-29890]"
    }, {
      "left" : "if (!tb.inListItemScope(name))",
      "right" : "if (!tb.inListItemScope(name))",
      "info" : "IfStatement[29312-29730]:IfStatement[29450-29868]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29343-29456]:Block[29481-29594]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[29373-29388]:ExpressionStatement[29511-29526]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[29417-29430]:ReturnStatement[29555-29568]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29462-29730]:Block[29600-29868]"
    }, {
      "left" : "tb.generateImpliedEndTags(name);",
      "right" : "tb.generateImpliedEndTags(name);",
      "info" : "ExpressionStatement[29492-29524]:ExpressionStatement[29630-29662]"
    }, {
      "left" : "if (!tb.currentElement().nodeName().equals(name))",
      "right" : "if (!tb.currentElement().nodeName().equals(name))",
      "info" : "IfStatement[29553-29650]:IfStatement[29691-29788]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[29635-29650]:ExpressionStatement[29773-29788]"
    }, {
      "left" : "tb.popStackToClose(name);",
      "right" : "tb.popStackToClose(name);",
      "info" : "ExpressionStatement[29679-29704]:ExpressionStatement[29817-29842]"
    }, {
      "left" : "if (StringUtil.in(name, Constants.DdDt))",
      "right" : "if (StringUtil.in(name, Constants.DdDt))",
      "info" : "IfStatement[29758-37589]:IfStatement[29896-37727]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29799-30257]:Block[29937-30395]"
    }, {
      "left" : "if (!tb.inScope(name))",
      "right" : "if (!tb.inScope(name))",
      "info" : "IfStatement[29825-30235]:IfStatement[29963-30373]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29848-29961]:Block[29986-30099]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[29878-29893]:ExpressionStatement[30016-30031]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[29922-29935]:ReturnStatement[30060-30073]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29967-30235]:Block[30105-30373]"
    }, {
      "left" : "tb.generateImpliedEndTags(name);",
      "right" : "tb.generateImpliedEndTags(name);",
      "info" : "ExpressionStatement[29997-30029]:ExpressionStatement[30135-30167]"
    }, {
      "left" : "if (!tb.currentElement().nodeName().equals(name))",
      "right" : "if (!tb.currentElement().nodeName().equals(name))",
      "info" : "IfStatement[30058-30155]:IfStatement[30196-30293]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[30140-30155]:ExpressionStatement[30278-30293]"
    }, {
      "left" : "tb.popStackToClose(name);",
      "right" : "tb.popStackToClose(name);",
      "info" : "ExpressionStatement[30184-30209]:ExpressionStatement[30322-30347]"
    }, {
      "left" : "if (StringUtil.in(name, Constants.Headings))",
      "right" : "if (StringUtil.in(name, Constants.Headings))",
      "info" : "IfStatement[30263-37589]:IfStatement[30401-37727]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30308-30794]:Block[30446-30932]"
    }, {
      "left" : "if (!tb.inScope(Constants.Headings))",
      "right" : "if (!tb.inScope(Constants.Headings))",
      "info" : "IfStatement[30334-30772]:IfStatement[30472-30910]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30371-30484]:Block[30509-30622]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[30401-30416]:ExpressionStatement[30539-30554]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[30445-30458]:ReturnStatement[30583-30596]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30490-30772]:Block[30628-30910]"
    }, {
      "left" : "tb.generateImpliedEndTags(name);",
      "right" : "tb.generateImpliedEndTags(name);",
      "info" : "ExpressionStatement[30520-30552]:ExpressionStatement[30658-30690]"
    }, {
      "left" : "if (!tb.currentElement().nodeName().equals(name))",
      "right" : "if (!tb.currentElement().nodeName().equals(name))",
      "info" : "IfStatement[30581-30678]:IfStatement[30719-30816]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[30663-30678]:ExpressionStatement[30801-30816]"
    }, {
      "left" : "tb.popStackToClose(Constants.Headings);",
      "right" : "tb.popStackToClose(Constants.Headings);",
      "info" : "ExpressionStatement[30707-30746]:ExpressionStatement[30845-30884]"
    }, {
      "left" : "if (name.equals(\"sarcasm\"))",
      "right" : "if (name.equals(\"sarcasm\"))",
      "info" : "IfStatement[30800-37589]:IfStatement[30938-37727]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30828-30939]:Block[30966-31077]"
    }, {
      "left" : "return anyOtherEndTag(t, tb);",
      "right" : "return anyOtherEndTag(t, tb);",
      "info" : "ReturnStatement[30888-30917]:ReturnStatement[31026-31055]"
    }, {
      "left" : "if (StringUtil.in(name, Constants.InBodyEndAdoptionFormatters))",
      "right" : "if (StringUtil.in(name, Constants.InBodyEndAdoptionFormatters))",
      "info" : "IfStatement[30945-37589]:IfStatement[31083-37727]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31009-36669]:Block[31147-36807]"
    }, {
      "left" : "OUTER:\n                        for (int i = 0; i < 8; i++) {\n                            Element formatEl = tb.getActiveFormattingElement(name);\n                            if (formatEl == null)\n                                return anyOtherEndTag(t, tb);\n                            else if (!tb.onStack(formatEl)) {\n                                tb.error(this);\n                                tb.removeFromActiveFormattingElements(formatEl);\n                                return true;\n                            } else if (!tb.inScope(formatEl.nodeName())) {\n                                tb.error(this);\n                                return false;\n                            } else if (tb.currentElement() != formatEl)\n                                tb.error(this);\n\n                            Element furthestBlock = null;\n                            Element commonAncestor = null;\n                            boolean seenFormattingElement = false;\n                            LinkedList<Element> stack = tb.getStack();\n                            // the spec doesn't limit to < 64, but in degenerate cases (9000+ stack depth) this prevents\n                            // run-aways\n                            final int stackSize = stack.size();\n                            for (int si = 0; si < stackSize && si < 64; si++) {\n                                Element el = stack.get(si);\n                                if (el == formatEl) {\n                                    commonAncestor = stack.get(si - 1);\n                                    seenFormattingElement = true;\n                                } else if (seenFormattingElement && tb.isSpecial(el)) {\n                                    furthestBlock = el;\n                                    break;\n                                }\n                            }\n                            if (furthestBlock == null) {\n                                tb.popStackToClose(formatEl.nodeName());\n                                tb.removeFromActiveFormattingElements(formatEl);\n                                return true;\n                            }\n\n                            // todo: Let a bookmark note the position of the formatting element in the list of active formatting elements relative to the elements on either side of it in the list.\n                            // does that mean: int pos of format el in list?\n                            Element node = furthestBlock;\n                            Element lastNode = furthestBlock;\n                            INNER:\n                            for (int j = 0; j < 3; j++) {\n                                if (tb.onStack(node))\n                                    node = tb.aboveOnStack(node);\n                                if (!tb.isInActiveFormattingElements(node)) { // note no bookmark check\n                                    tb.removeFromStack(node);\n                                    continue INNER;\n                                } else if (node == formatEl)\n                                    break INNER;\n\n                                Element replacement = new Element(Tag.valueOf(node.nodeName()), tb.getBaseUri());\n                                tb.replaceActiveFormattingElement(node, replacement);\n                                tb.replaceOnStack(node, replacement);\n                                node = replacement;\n\n                                if (lastNode == furthestBlock) {\n                                    // todo: move the aforementioned bookmark to be immediately after the new node in the list of active formatting elements.\n                                    // not getting how this bookmark both straddles the element above, but is inbetween here...\n                                }\n                                if (lastNode.parent() != null)\n                                    lastNode.remove();\n                                node.appendChild(lastNode);\n\n                                lastNode = node;\n                            }\n\n                            if (StringUtil.in(commonAncestor.nodeName(), Constants.InBodyEndTableFosters)) {\n                                if (lastNode.parent() != null)\n                                    lastNode.remove();\n                                tb.insertInFosterParent(lastNode);\n                            } else {\n                                if (lastNode.parent() != null)\n                                    lastNode.remove();\n                                commonAncestor.appendChild(lastNode);\n                            }\n\n                            Element adopter = new Element(formatEl.tag(), tb.getBaseUri());\n                            adopter.attributes().addAll(formatEl.attributes());\n                            Node[] childNodes = furthestBlock.childNodes().toArray(new Node[furthestBlock.childNodeSize()]);\n                            for (Node childNode : childNodes) {\n                                adopter.appendChild(childNode); // append will reparent. thus the clone to avoid concurrent mod.\n                            }\n                            furthestBlock.appendChild(adopter);\n                            tb.removeFromActiveFormattingElements(formatEl);\n                            // todo: insert the new element into the list of active formatting elements at the position of the aforementioned bookmark.\n                            tb.removeFromStack(formatEl);\n                            tb.insertOnStackAfter(furthestBlock, adopter);\n                        }",
      "right" : "OUTER:\n                        for (int i = 0; i < 8; i++) {\n                            Element formatEl = tb.getActiveFormattingElement(name);\n                            if (formatEl == null)\n                                return anyOtherEndTag(t, tb);\n                            else if (!tb.onStack(formatEl)) {\n                                tb.error(this);\n                                tb.removeFromActiveFormattingElements(formatEl);\n                                return true;\n                            } else if (!tb.inScope(formatEl.nodeName())) {\n                                tb.error(this);\n                                return false;\n                            } else if (tb.currentElement() != formatEl)\n                                tb.error(this);\n\n                            Element furthestBlock = null;\n                            Element commonAncestor = null;\n                            boolean seenFormattingElement = false;\n                            LinkedList<Element> stack = tb.getStack();\n                            // the spec doesn't limit to < 64, but in degenerate cases (9000+ stack depth) this prevents\n                            // run-aways\n                            final int stackSize = stack.size();\n                            for (int si = 0; si < stackSize && si < 64; si++) {\n                                Element el = stack.get(si);\n                                if (el == formatEl) {\n                                    commonAncestor = stack.get(si - 1);\n                                    seenFormattingElement = true;\n                                } else if (seenFormattingElement && tb.isSpecial(el)) {\n                                    furthestBlock = el;\n                                    break;\n                                }\n                            }\n                            if (furthestBlock == null) {\n                                tb.popStackToClose(formatEl.nodeName());\n                                tb.removeFromActiveFormattingElements(formatEl);\n                                return true;\n                            }\n\n                            // todo: Let a bookmark note the position of the formatting element in the list of active formatting elements relative to the elements on either side of it in the list.\n                            // does that mean: int pos of format el in list?\n                            Element node = furthestBlock;\n                            Element lastNode = furthestBlock;\n                            INNER:\n                            for (int j = 0; j < 3; j++) {\n                                if (tb.onStack(node))\n                                    node = tb.aboveOnStack(node);\n                                if (!tb.isInActiveFormattingElements(node)) { // note no bookmark check\n                                    tb.removeFromStack(node);\n                                    continue INNER;\n                                } else if (node == formatEl)\n                                    break INNER;\n\n                                Element replacement = new Element(Tag.valueOf(node.nodeName()), tb.getBaseUri());\n                                tb.replaceActiveFormattingElement(node, replacement);\n                                tb.replaceOnStack(node, replacement);\n                                node = replacement;\n\n                                if (lastNode == furthestBlock) {\n                                    // todo: move the aforementioned bookmark to be immediately after the new node in the list of active formatting elements.\n                                    // not getting how this bookmark both straddles the element above, but is inbetween here...\n                                }\n                                if (lastNode.parent() != null)\n                                    lastNode.remove();\n                                node.appendChild(lastNode);\n\n                                lastNode = node;\n                            }\n\n                            if (StringUtil.in(commonAncestor.nodeName(), Constants.InBodyEndTableFosters)) {\n                                if (lastNode.parent() != null)\n                                    lastNode.remove();\n                                tb.insertInFosterParent(lastNode);\n                            } else {\n                                if (lastNode.parent() != null)\n                                    lastNode.remove();\n                                commonAncestor.appendChild(lastNode);\n                            }\n\n                            Element adopter = new Element(formatEl.tag(), tb.getBaseUri());\n                            adopter.attributes().addAll(formatEl.attributes());\n                            Node[] childNodes = furthestBlock.childNodes().toArray(new Node[furthestBlock.childNodeSize()]);\n                            for (Node childNode : childNodes) {\n                                adopter.appendChild(childNode); // append will reparent. thus the clone to avoid concurrent mod.\n                            }\n                            furthestBlock.appendChild(adopter);\n                            tb.removeFromActiveFormattingElements(formatEl);\n                            // todo: insert the new element into the list of active formatting elements at the position of the aforementioned bookmark.\n                            tb.removeFromStack(formatEl);\n                            tb.insertOnStackAfter(furthestBlock, adopter);\n                        }",
      "info" : "LabeledStatement[31089-36647]:LabeledStatement[31227-36785]"
    }, {
      "left" : "for (int i = 0; i < 8; i++)",
      "right" : "for (int i = 0; i < 8; i++)",
      "info" : "ForStatement[31120-36647]:ForStatement[31258-36785]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31148-36647]:Block[31286-36785]"
    }, {
      "left" : "Element formatEl = tb.getActiveFormattingElement(name);",
      "right" : "Element formatEl = tb.getActiveFormattingElement(name);",
      "info" : "VariableDeclarationStatement[31178-31233]:VariableDeclarationStatement[31316-31371]"
    }, {
      "left" : "if (formatEl == null)",
      "right" : "if (formatEl == null)",
      "info" : "IfStatement[31262-31870]:IfStatement[31400-32008]"
    }, {
      "left" : "return anyOtherEndTag(t, tb);",
      "right" : "return anyOtherEndTag(t, tb);",
      "info" : "ReturnStatement[31316-31345]:ReturnStatement[31454-31483]"
    }, {
      "left" : "if (!tb.onStack(formatEl))",
      "right" : "if (!tb.onStack(formatEl))",
      "info" : "IfStatement[31379-31870]:IfStatement[31517-32008]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31406-31611]:Block[31544-31749]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[31440-31455]:ExpressionStatement[31578-31593]"
    }, {
      "left" : "tb.removeFromActiveFormattingElements(formatEl);",
      "right" : "tb.removeFromActiveFormattingElements(formatEl);",
      "info" : "ExpressionStatement[31488-31536]:ExpressionStatement[31626-31674]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[31569-31581]:ReturnStatement[31707-31719]"
    }, {
      "left" : "if (!tb.inScope(formatEl.nodeName()))",
      "right" : "if (!tb.inScope(formatEl.nodeName()))",
      "info" : "IfStatement[31617-31870]:IfStatement[31755-32008]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31655-31780]:Block[31793-31918]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[31689-31704]:ExpressionStatement[31827-31842]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[31737-31750]:ReturnStatement[31875-31888]"
    }, {
      "left" : "if (tb.currentElement() != formatEl)",
      "right" : "if (tb.currentElement() != formatEl)",
      "info" : "IfStatement[31786-31870]:IfStatement[31924-32008]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[31855-31870]:ExpressionStatement[31993-32008]"
    }, {
      "left" : "Element furthestBlock = null;",
      "right" : "Element furthestBlock = null;",
      "info" : "VariableDeclarationStatement[31900-31929]:VariableDeclarationStatement[32038-32067]"
    }, {
      "left" : "Element commonAncestor = null;",
      "right" : "Element commonAncestor = null;",
      "info" : "VariableDeclarationStatement[31958-31988]:VariableDeclarationStatement[32096-32126]"
    }, {
      "left" : "boolean seenFormattingElement = false;",
      "right" : "boolean seenFormattingElement = false;",
      "info" : "VariableDeclarationStatement[32017-32055]:VariableDeclarationStatement[32155-32193]"
    }, {
      "left" : "LinkedList<Element> stack = tb.getStack();",
      "right" : "LinkedList<Element> stack = tb.getStack();",
      "info" : "VariableDeclarationStatement[32084-32126]:VariableDeclarationStatement[32222-32264]"
    }, {
      "left" : "final int stackSize = stack.size();",
      "right" : "final int stackSize = stack.size();",
      "info" : "VariableDeclarationStatement[32317-32352]:VariableDeclarationStatement[32455-32490]"
    }, {
      "left" : "for (int si = 0; si < stackSize && si < 64; si++)",
      "right" : "for (int si = 0; si < stackSize && si < 64; si++)",
      "info" : "ForStatement[32381-32935]:ForStatement[32519-33073]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32431-32935]:Block[32569-33073]"
    }, {
      "left" : "Element el = stack.get(si);",
      "right" : "Element el = stack.get(si);",
      "info" : "VariableDeclarationStatement[32465-32492]:VariableDeclarationStatement[32603-32630]"
    }, {
      "left" : "if (el == formatEl)",
      "right" : "if (el == formatEl)",
      "info" : "IfStatement[32525-32905]:IfStatement[32663-33043]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32545-32718]:Block[32683-32856]"
    }, {
      "left" : "commonAncestor = stack.get(si - 1);",
      "right" : "commonAncestor = stack.get(si - 1);",
      "info" : "ExpressionStatement[32583-32618]:ExpressionStatement[32721-32756]"
    }, {
      "left" : "seenFormattingElement = true;",
      "right" : "seenFormattingElement = true;",
      "info" : "ExpressionStatement[32655-32684]:ExpressionStatement[32793-32822]"
    }, {
      "left" : "if (seenFormattingElement && tb.isSpecial(el))",
      "right" : "if (seenFormattingElement && tb.isSpecial(el))",
      "info" : "IfStatement[32724-32905]:IfStatement[32862-33043]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32771-32905]:Block[32909-33043]"
    }, {
      "left" : "furthestBlock = el;",
      "right" : "furthestBlock = el;",
      "info" : "ExpressionStatement[32809-32828]:ExpressionStatement[32947-32966]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[32865-32871]:BreakStatement[33003-33009]"
    }, {
      "left" : "if (furthestBlock == null)",
      "right" : "if (furthestBlock == null)",
      "info" : "IfStatement[32964-33221]:IfStatement[33102-33359]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32991-33221]:Block[33129-33359]"
    }, {
      "left" : "tb.popStackToClose(formatEl.nodeName());",
      "right" : "tb.popStackToClose(formatEl.nodeName());",
      "info" : "ExpressionStatement[33025-33065]:ExpressionStatement[33163-33203]"
    }, {
      "left" : "tb.removeFromActiveFormattingElements(formatEl);",
      "right" : "tb.removeFromActiveFormattingElements(formatEl);",
      "info" : "ExpressionStatement[33098-33146]:ExpressionStatement[33236-33284]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[33179-33191]:ReturnStatement[33317-33329]"
    }, {
      "left" : "Element node = furthestBlock;",
      "right" : "Element node = furthestBlock;",
      "info" : "VariableDeclarationStatement[33525-33554]:VariableDeclarationStatement[33663-33692]"
    }, {
      "left" : "Element lastNode = furthestBlock;",
      "right" : "Element lastNode = furthestBlock;",
      "info" : "VariableDeclarationStatement[33583-33616]:VariableDeclarationStatement[33721-33754]"
    }, {
      "left" : "INNER:\n                            for (int j = 0; j < 3; j++) {\n                                if (tb.onStack(node))\n                                    node = tb.aboveOnStack(node);\n                                if (!tb.isInActiveFormattingElements(node)) { // note no bookmark check\n                                    tb.removeFromStack(node);\n                                    continue INNER;\n                                } else if (node == formatEl)\n                                    break INNER;\n\n                                Element replacement = new Element(Tag.valueOf(node.nodeName()), tb.getBaseUri());\n                                tb.replaceActiveFormattingElement(node, replacement);\n                                tb.replaceOnStack(node, replacement);\n                                node = replacement;\n\n                                if (lastNode == furthestBlock) {\n                                    // todo: move the aforementioned bookmark to be immediately after the new node in the list of active formatting elements.\n                                    // not getting how this bookmark both straddles the element above, but is inbetween here...\n                                }\n                                if (lastNode.parent() != null)\n                                    lastNode.remove();\n                                node.appendChild(lastNode);\n\n                                lastNode = node;\n                            }",
      "right" : "INNER:\n                            for (int j = 0; j < 3; j++) {\n                                if (tb.onStack(node))\n                                    node = tb.aboveOnStack(node);\n                                if (!tb.isInActiveFormattingElements(node)) { // note no bookmark check\n                                    tb.removeFromStack(node);\n                                    continue INNER;\n                                } else if (node == formatEl)\n                                    break INNER;\n\n                                Element replacement = new Element(Tag.valueOf(node.nodeName()), tb.getBaseUri());\n                                tb.replaceActiveFormattingElement(node, replacement);\n                                tb.replaceOnStack(node, replacement);\n                                node = replacement;\n\n                                if (lastNode == furthestBlock) {\n                                    // todo: move the aforementioned bookmark to be immediately after the new node in the list of active formatting elements.\n                                    // not getting how this bookmark both straddles the element above, but is inbetween here...\n                                }\n                                if (lastNode.parent() != null)\n                                    lastNode.remove();\n                                node.appendChild(lastNode);\n\n                                lastNode = node;\n                            }",
      "info" : "LabeledStatement[33645-35124]:LabeledStatement[33783-35262]"
    }, {
      "left" : "for (int j = 0; j < 3; j++)",
      "right" : "for (int j = 0; j < 3; j++)",
      "info" : "ForStatement[33680-35124]:ForStatement[33818-35262]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33708-35124]:Block[33846-35262]"
    }, {
      "left" : "if (tb.onStack(node))",
      "right" : "if (tb.onStack(node))",
      "info" : "IfStatement[33742-33829]:IfStatement[33880-33967]"
    }, {
      "left" : "node = tb.aboveOnStack(node);",
      "right" : "node = tb.aboveOnStack(node);",
      "info" : "ExpressionStatement[33800-33829]:ExpressionStatement[33938-33967]"
    }, {
      "left" : "if (!tb.isInActiveFormattingElements(node))",
      "right" : "if (!tb.isInActiveFormattingElements(node))",
      "info" : "IfStatement[33862-34157]:IfStatement[34000-34295]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33906-34081]:Block[34044-34219]"
    }, {
      "left" : "tb.removeFromStack(node);",
      "right" : "tb.removeFromStack(node);",
      "info" : "ExpressionStatement[33970-33995]:ExpressionStatement[34108-34133]"
    }, {
      "left" : "continue INNER;",
      "right" : "continue INNER;",
      "info" : "ContinueStatement[34032-34047]:ContinueStatement[34170-34185]"
    }, {
      "left" : "if (node == formatEl)",
      "right" : "if (node == formatEl)",
      "info" : "IfStatement[34087-34157]:IfStatement[34225-34295]"
    }, {
      "left" : "break INNER;",
      "right" : "break INNER;",
      "info" : "BreakStatement[34145-34157]:BreakStatement[34283-34295]"
    }, {
      "left" : "Element replacement = new Element(Tag.valueOf(node.nodeName()), tb.getBaseUri());",
      "right" : "Element replacement = new Element(Tag.valueOf(node.nodeName()), tb.getBaseUri());",
      "info" : "VariableDeclarationStatement[34191-34272]:VariableDeclarationStatement[34329-34410]"
    }, {
      "left" : "tb.replaceActiveFormattingElement(node, replacement);",
      "right" : "tb.replaceActiveFormattingElement(node, replacement);",
      "info" : "ExpressionStatement[34305-34358]:ExpressionStatement[34443-34496]"
    }, {
      "left" : "tb.replaceOnStack(node, replacement);",
      "right" : "tb.replaceOnStack(node, replacement);",
      "info" : "ExpressionStatement[34391-34428]:ExpressionStatement[34529-34566]"
    }, {
      "left" : "node = replacement;",
      "right" : "node = replacement;",
      "info" : "ExpressionStatement[34461-34480]:ExpressionStatement[34599-34618]"
    }, {
      "left" : "if (lastNode == furthestBlock)",
      "right" : "if (lastNode == furthestBlock)",
      "info" : "IfStatement[34514-34866]:IfStatement[34652-35004]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34545-34866]:Block[34683-35004]"
    }, {
      "left" : "if (lastNode.parent() != null)",
      "right" : "if (lastNode.parent() != null)",
      "info" : "IfStatement[34899-34984]:IfStatement[35037-35122]"
    }, {
      "left" : "lastNode.remove();",
      "right" : "lastNode.remove();",
      "info" : "ExpressionStatement[34966-34984]:ExpressionStatement[35104-35122]"
    }, {
      "left" : "node.appendChild(lastNode);",
      "right" : "node.appendChild(lastNode);",
      "info" : "ExpressionStatement[35017-35044]:ExpressionStatement[35155-35182]"
    }, {
      "left" : "lastNode = node;",
      "right" : "lastNode = node;",
      "info" : "ExpressionStatement[35078-35094]:ExpressionStatement[35216-35232]"
    }, {
      "left" : "if (StringUtil.in(commonAncestor.nodeName(), Constants.InBodyEndTableFosters))",
      "right" : "if (StringUtil.in(commonAncestor.nodeName(), Constants.InBodyEndTableFosters))",
      "info" : "IfStatement[35154-35674]:IfStatement[35292-35812]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35233-35449]:Block[35371-35587]"
    }, {
      "left" : "if (lastNode.parent() != null)",
      "right" : "if (lastNode.parent() != null)",
      "info" : "IfStatement[35267-35352]:IfStatement[35405-35490]"
    }, {
      "left" : "lastNode.remove();",
      "right" : "lastNode.remove();",
      "info" : "ExpressionStatement[35334-35352]:ExpressionStatement[35472-35490]"
    }, {
      "left" : "tb.insertInFosterParent(lastNode);",
      "right" : "tb.insertInFosterParent(lastNode);",
      "info" : "ExpressionStatement[35385-35419]:ExpressionStatement[35523-35557]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35455-35674]:Block[35593-35812]"
    }, {
      "left" : "if (lastNode.parent() != null)",
      "right" : "if (lastNode.parent() != null)",
      "info" : "IfStatement[35489-35574]:IfStatement[35627-35712]"
    }, {
      "left" : "lastNode.remove();",
      "right" : "lastNode.remove();",
      "info" : "ExpressionStatement[35556-35574]:ExpressionStatement[35694-35712]"
    }, {
      "left" : "commonAncestor.appendChild(lastNode);",
      "right" : "commonAncestor.appendChild(lastNode);",
      "info" : "ExpressionStatement[35607-35644]:ExpressionStatement[35745-35782]"
    }, {
      "left" : "Element adopter = new Element(formatEl.tag(), tb.getBaseUri());",
      "right" : "Element adopter = new Element(formatEl.tag(), tb.getBaseUri());",
      "info" : "VariableDeclarationStatement[35704-35767]:VariableDeclarationStatement[35842-35905]"
    }, {
      "left" : "adopter.attributes().addAll(formatEl.attributes());",
      "right" : "adopter.attributes().addAll(formatEl.attributes());",
      "info" : "ExpressionStatement[35796-35847]:ExpressionStatement[35934-35985]"
    }, {
      "left" : "Node[] childNodes = furthestBlock.childNodes().toArray(new Node[furthestBlock.childNodeSize()]);",
      "right" : "Node[] childNodes = furthestBlock.childNodes().toArray(new Node[furthestBlock.childNodeSize()]);",
      "info" : "VariableDeclarationStatement[35876-35972]:VariableDeclarationStatement[36014-36110]"
    }, {
      "left" : "for (Node childNode : childNodes)",
      "right" : "for (Node childNode : childNodes)",
      "info" : "EnhancedForStatement[36001-36195]:EnhancedForStatement[36139-36333]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36035-36195]:Block[36173-36333]"
    }, {
      "left" : "adopter.appendChild(childNode);",
      "right" : "adopter.appendChild(childNode);",
      "info" : "ExpressionStatement[36069-36100]:ExpressionStatement[36207-36238]"
    }, {
      "left" : "furthestBlock.appendChild(adopter);",
      "right" : "furthestBlock.appendChild(adopter);",
      "info" : "ExpressionStatement[36224-36259]:ExpressionStatement[36362-36397]"
    }, {
      "left" : "tb.removeFromActiveFormattingElements(formatEl);",
      "right" : "tb.removeFromActiveFormattingElements(formatEl);",
      "info" : "ExpressionStatement[36288-36336]:ExpressionStatement[36426-36474]"
    }, {
      "left" : "tb.removeFromStack(formatEl);",
      "right" : "tb.removeFromStack(formatEl);",
      "info" : "ExpressionStatement[36517-36546]:ExpressionStatement[36655-36684]"
    }, {
      "left" : "tb.insertOnStackAfter(furthestBlock, adopter);",
      "right" : "tb.insertOnStackAfter(furthestBlock, adopter);",
      "info" : "ExpressionStatement[36575-36621]:ExpressionStatement[36713-36759]"
    }, {
      "left" : "if (StringUtil.in(name, Constants.InBodyStartApplets))",
      "right" : "if (StringUtil.in(name, Constants.InBodyStartApplets))",
      "info" : "IfStatement[36675-37589]:IfStatement[36813-37727]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36730-37314]:Block[36868-37452]"
    }, {
      "left" : "if (!tb.inScope(\"name\"))",
      "right" : "if (!tb.inScope(\"name\"))",
      "info" : "IfStatement[36756-37292]:IfStatement[36894-37430]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36781-37292]:Block[36919-37430]"
    }, {
      "left" : "if (!tb.inScope(name))",
      "right" : "if (!tb.inScope(name))",
      "info" : "IfStatement[36811-36959]:IfStatement[36949-37097]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36834-36959]:Block[36972-37097]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[36868-36883]:ExpressionStatement[37006-37021]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[36916-36929]:ReturnStatement[37054-37067]"
    }, {
      "left" : "tb.generateImpliedEndTags();",
      "right" : "tb.generateImpliedEndTags();",
      "info" : "ExpressionStatement[36988-37016]:ExpressionStatement[37126-37154]"
    }, {
      "left" : "if (!tb.currentElement().nodeName().equals(name))",
      "right" : "if (!tb.currentElement().nodeName().equals(name))",
      "info" : "IfStatement[37045-37142]:IfStatement[37183-37280]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[37127-37142]:ExpressionStatement[37265-37280]"
    }, {
      "left" : "tb.popStackToClose(name);",
      "right" : "tb.popStackToClose(name);",
      "info" : "ExpressionStatement[37171-37196]:ExpressionStatement[37309-37334]"
    }, {
      "left" : "tb.clearFormattingElementsToLastMarker();",
      "right" : "tb.clearFormattingElementsToLastMarker();",
      "info" : "ExpressionStatement[37225-37266]:ExpressionStatement[37363-37404]"
    }, {
      "left" : "if (name.equals(\"br\"))",
      "right" : "if (name.equals(\"br\"))",
      "info" : "IfStatement[37320-37589]:IfStatement[37458-37727]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37343-37506]:Block[37481-37644]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[37369-37384]:ExpressionStatement[37507-37522]"
    }, {
      "left" : "tb.process(new Token.StartTag(\"br\"));",
      "right" : "tb.process(new Token.StartTag(\"br\"));",
      "info" : "ExpressionStatement[37409-37446]:ExpressionStatement[37547-37584]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[37471-37484]:ReturnStatement[37609-37622]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37512-37589]:Block[37650-37727]"
    }, {
      "left" : "return anyOtherEndTag(t, tb);",
      "right" : "return anyOtherEndTag(t, tb);",
      "info" : "ReturnStatement[37538-37567]:ReturnStatement[37676-37705]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[37611-37617]:BreakStatement[37749-37755]"
    }, {
      "left" : "case EOF:",
      "right" : "case EOF:",
      "info" : "SwitchCase[37634-37643]:SwitchCase[37772-37781]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[37826-37832]:BreakStatement[37964-37970]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[37859-37871]:ReturnStatement[37997-38009]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37943-38723]:Block[38081-38861]"
    }, {
      "left" : "String name = t.asEndTag().name();",
      "right" : "String name = t.asEndTag().name();",
      "info" : "VariableDeclarationStatement[37957-37991]:VariableDeclarationStatement[38095-38129]"
    }, {
      "left" : "DescendableLinkedList<Element> stack = tb.getStack();",
      "right" : "DescendableLinkedList<Element> stack = tb.getStack();",
      "info" : "VariableDeclarationStatement[38004-38057]:VariableDeclarationStatement[38142-38195]"
    }, {
      "left" : "Iterator<Element> it = stack.descendingIterator();",
      "right" : "Iterator<Element> it = stack.descendingIterator();",
      "info" : "VariableDeclarationStatement[38070-38120]:VariableDeclarationStatement[38208-38258]"
    }, {
      "left" : "while (it.hasNext())",
      "right" : "while (it.hasNext())",
      "info" : "WhileStatement[38133-38688]:WhileStatement[38271-38826]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38154-38688]:Block[38292-38826]"
    }, {
      "left" : "Element node = it.next();",
      "right" : "Element node = it.next();",
      "info" : "VariableDeclarationStatement[38172-38197]:VariableDeclarationStatement[38310-38335]"
    }, {
      "left" : "if (node.nodeName().equals(name))",
      "right" : "if (node.nodeName().equals(name))",
      "info" : "IfStatement[38214-38674]:IfStatement[38352-38812]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38248-38503]:Block[38386-38641]"
    }, {
      "left" : "tb.generateImpliedEndTags(name);",
      "right" : "tb.generateImpliedEndTags(name);",
      "info" : "ExpressionStatement[38270-38302]:ExpressionStatement[38408-38440]"
    }, {
      "left" : "if (!name.equals(tb.currentElement().nodeName()))",
      "right" : "if (!name.equals(tb.currentElement().nodeName()))",
      "info" : "IfStatement[38323-38412]:IfStatement[38461-38550]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[38397-38412]:ExpressionStatement[38535-38550]"
    }, {
      "left" : "tb.popStackToClose(name);",
      "right" : "tb.popStackToClose(name);",
      "info" : "ExpressionStatement[38433-38458]:ExpressionStatement[38571-38596]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[38479-38485]:BreakStatement[38617-38623]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38509-38674]:Block[38647-38812]"
    }, {
      "left" : "if (tb.isSpecial(node))",
      "right" : "if (tb.isSpecial(node))",
      "info" : "IfStatement[38531-38656]:IfStatement[38669-38794]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38555-38656]:Block[38693-38794]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[38581-38596]:ExpressionStatement[38719-38734]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[38621-38634]:ReturnStatement[38759-38772]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[38701-38713]:ReturnStatement[38839-38851]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38858-39459]:Block[38996-39597]"
    }, {
      "left" : "if (t.isCharacter())",
      "right" : "if (t.isCharacter())",
      "info" : "IfStatement[38872-39424]:IfStatement[39010-39562]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38893-38952]:Block[39031-39090]"
    }, {
      "left" : "tb.insert(t.asCharacter());",
      "right" : "tb.insert(t.asCharacter());",
      "info" : "ExpressionStatement[38911-38938]:ExpressionStatement[39049-39076]"
    }, {
      "left" : "if (t.isEOF())",
      "right" : "if (t.isEOF())",
      "info" : "IfStatement[38958-39424]:IfStatement[39096-39562]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38973-39197]:Block[39111-39335]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[38991-39006]:ExpressionStatement[39129-39144]"
    }, {
      "left" : "tb.pop();",
      "right" : "tb.pop();",
      "info" : "ExpressionStatement[39085-39094]:ExpressionStatement[39223-39232]"
    }, {
      "left" : "tb.transition(tb.originalState());",
      "right" : "tb.transition(tb.originalState());",
      "info" : "ExpressionStatement[39111-39145]:ExpressionStatement[39249-39283]"
    }, {
      "left" : "return tb.process(t);",
      "right" : "return tb.process(t);",
      "info" : "ReturnStatement[39162-39183]:ReturnStatement[39300-39321]"
    }, {
      "left" : "if (t.isEndTag())",
      "right" : "if (t.isEndTag())",
      "info" : "IfStatement[39203-39424]:IfStatement[39341-39562]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39221-39424]:Block[39359-39562]"
    }, {
      "left" : "tb.pop();",
      "right" : "tb.pop();",
      "info" : "ExpressionStatement[39350-39359]:ExpressionStatement[39488-39497]"
    }, {
      "left" : "tb.transition(tb.originalState());",
      "right" : "tb.transition(tb.originalState());",
      "info" : "ExpressionStatement[39376-39410]:ExpressionStatement[39514-39548]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[39437-39449]:ReturnStatement[39575-39587]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39534-43402]:Block[39672-43540]"
    }, {
      "left" : "if (t.isCharacter())",
      "right" : "if (t.isCharacter())",
      "info" : "IfStatement[39548-43352]:IfStatement[39686-43490]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39569-39754]:Block[39707-39892]"
    }, {
      "left" : "tb.newPendingTableCharacters();",
      "right" : "tb.newPendingTableCharacters();",
      "info" : "ExpressionStatement[39587-39618]:ExpressionStatement[39725-39756]"
    }, {
      "left" : "tb.markInsertionMode();",
      "right" : "tb.markInsertionMode();",
      "info" : "ExpressionStatement[39635-39658]:ExpressionStatement[39773-39796]"
    }, {
      "left" : "tb.transition(InTableText);",
      "right" : "tb.transition(InTableText);",
      "info" : "ExpressionStatement[39675-39702]:ExpressionStatement[39813-39840]"
    }, {
      "left" : "return tb.process(t);",
      "right" : "return tb.process(t);",
      "info" : "ReturnStatement[39719-39740]:ReturnStatement[39857-39878]"
    }, {
      "left" : "if (t.isComment())",
      "right" : "if (t.isComment())",
      "info" : "IfStatement[39760-43352]:IfStatement[39898-43490]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39779-39865]:Block[39917-40003]"
    }, {
      "left" : "tb.insert(t.asComment());",
      "right" : "tb.insert(t.asComment());",
      "info" : "ExpressionStatement[39797-39822]:ExpressionStatement[39935-39960]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[39839-39851]:ReturnStatement[39977-39989]"
    }, {
      "left" : "if (t.isDoctype())",
      "right" : "if (t.isDoctype())",
      "info" : "IfStatement[39871-43352]:IfStatement[40009-43490]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39890-39967]:Block[40028-40105]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[39908-39923]:ExpressionStatement[40046-40061]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[39940-39953]:ReturnStatement[40078-40091]"
    }, {
      "left" : "if (t.isStartTag())",
      "right" : "if (t.isStartTag())",
      "info" : "IfStatement[39973-43352]:IfStatement[40111-43490]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39993-42331]:Block[40131-42469]"
    }, {
      "left" : "Token.StartTag startTag = t.asStartTag();",
      "right" : "Token.StartTag startTag = t.asStartTag();",
      "info" : "VariableDeclarationStatement[40011-40052]:VariableDeclarationStatement[40149-40190]"
    }, {
      "left" : "String name = startTag.name();",
      "right" : "String name = startTag.name();",
      "info" : "VariableDeclarationStatement[40069-40099]:VariableDeclarationStatement[40207-40237]"
    }, {
      "left" : "if (name.equals(\"caption\"))",
      "right" : "if (name.equals(\"caption\"))",
      "info" : "IfStatement[40116-42142]:IfStatement[40254-42280]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40144-40360]:Block[40282-40498]"
    }, {
      "left" : "tb.clearStackToTableContext();",
      "right" : "tb.clearStackToTableContext();",
      "info" : "ExpressionStatement[40166-40196]:ExpressionStatement[40304-40334]"
    }, {
      "left" : "tb.insertMarkerToFormattingElements();",
      "right" : "tb.insertMarkerToFormattingElements();",
      "info" : "ExpressionStatement[40217-40255]:ExpressionStatement[40355-40393]"
    }, {
      "left" : "tb.insert(startTag);",
      "right" : "tb.insert(startTag);",
      "info" : "ExpressionStatement[40276-40296]:ExpressionStatement[40414-40434]"
    }, {
      "left" : "tb.transition(InCaption);",
      "right" : "tb.transition(InCaption);",
      "info" : "ExpressionStatement[40317-40342]:ExpressionStatement[40455-40480]"
    }, {
      "left" : "if (name.equals(\"colgroup\"))",
      "right" : "if (name.equals(\"colgroup\"))",
      "info" : "IfStatement[40366-42142]:IfStatement[40504-42280]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40395-40556]:Block[40533-40694]"
    }, {
      "left" : "tb.clearStackToTableContext();",
      "right" : "tb.clearStackToTableContext();",
      "info" : "ExpressionStatement[40417-40447]:ExpressionStatement[40555-40585]"
    }, {
      "left" : "tb.insert(startTag);",
      "right" : "tb.insert(startTag);",
      "info" : "ExpressionStatement[40468-40488]:ExpressionStatement[40606-40626]"
    }, {
      "left" : "tb.transition(InColumnGroup);",
      "right" : "tb.transition(InColumnGroup);",
      "info" : "ExpressionStatement[40509-40538]:ExpressionStatement[40647-40676]"
    }, {
      "left" : "if (name.equals(\"col\"))",
      "right" : "if (name.equals(\"col\"))",
      "info" : "IfStatement[40562-42142]:IfStatement[40700-42280]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40586-40711]:Block[40724-40849]"
    }, {
      "left" : "tb.process(new Token.StartTag(\"colgroup\"));",
      "right" : "tb.process(new Token.StartTag(\"colgroup\"));",
      "info" : "ExpressionStatement[40608-40651]:ExpressionStatement[40746-40789]"
    }, {
      "left" : "return tb.process(t);",
      "right" : "return tb.process(t);",
      "info" : "ReturnStatement[40672-40693]:ReturnStatement[40810-40831]"
    }, {
      "left" : "if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\"))",
      "right" : "if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\"))",
      "info" : "IfStatement[40717-42142]:IfStatement[40855-42280]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40769-40928]:Block[40907-41066]"
    }, {
      "left" : "tb.clearStackToTableContext();",
      "right" : "tb.clearStackToTableContext();",
      "info" : "ExpressionStatement[40791-40821]:ExpressionStatement[40929-40959]"
    }, {
      "left" : "tb.insert(startTag);",
      "right" : "tb.insert(startTag);",
      "info" : "ExpressionStatement[40842-40862]:ExpressionStatement[40980-41000]"
    }, {
      "left" : "tb.transition(InTableBody);",
      "right" : "tb.transition(InTableBody);",
      "info" : "ExpressionStatement[40883-40910]:ExpressionStatement[41021-41048]"
    }, {
      "left" : "if (StringUtil.in(name, \"td\", \"th\", \"tr\"))",
      "right" : "if (StringUtil.in(name, \"td\", \"th\", \"tr\"))",
      "info" : "IfStatement[40934-42142]:IfStatement[41072-42280]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40977-41099]:Block[41115-41237]"
    }, {
      "left" : "tb.process(new Token.StartTag(\"tbody\"));",
      "right" : "tb.process(new Token.StartTag(\"tbody\"));",
      "info" : "ExpressionStatement[40999-41039]:ExpressionStatement[41137-41177]"
    }, {
      "left" : "return tb.process(t);",
      "right" : "return tb.process(t);",
      "info" : "ReturnStatement[41060-41081]:ReturnStatement[41198-41219]"
    }, {
      "left" : "if (name.equals(\"table\"))",
      "right" : "if (name.equals(\"table\"))",
      "info" : "IfStatement[41105-42142]:IfStatement[41243-42280]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41131-41377]:Block[41269-41515]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[41153-41168]:ExpressionStatement[41291-41306]"
    }, {
      "left" : "boolean processed = tb.process(new Token.EndTag(\"table\"));",
      "right" : "boolean processed = tb.process(new Token.EndTag(\"table\"));",
      "info" : "VariableDeclarationStatement[41189-41247]:VariableDeclarationStatement[41327-41385]"
    }, {
      "left" : "if (processed)",
      "right" : "if (processed)",
      "info" : "IfStatement[41268-41359]:IfStatement[41406-41497]"
    }, {
      "left" : "return tb.process(t);",
      "right" : "return tb.process(t);",
      "info" : "ReturnStatement[41338-41359]:ReturnStatement[41476-41497]"
    }, {
      "left" : "if (StringUtil.in(name, \"style\", \"script\"))",
      "right" : "if (StringUtil.in(name, \"style\", \"script\"))",
      "info" : "IfStatement[41383-42142]:IfStatement[41521-42280]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41427-41496]:Block[41565-41634]"
    }, {
      "left" : "return tb.process(t, InHead);",
      "right" : "return tb.process(t, InHead);",
      "info" : "ReturnStatement[41449-41478]:ReturnStatement[41587-41616]"
    }, {
      "left" : "if (name.equals(\"input\"))",
      "right" : "if (name.equals(\"input\"))",
      "info" : "IfStatement[41502-42142]:IfStatement[41640-42280]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41528-41787]:Block[41666-41925]"
    }, {
      "left" : "if (!startTag.attributes.get(\"type\").equalsIgnoreCase(\"hidden\"))",
      "right" : "if (!startTag.attributes.get(\"type\").equalsIgnoreCase(\"hidden\"))",
      "info" : "IfStatement[41550-41769]:IfStatement[41688-41907]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41615-41690]:Block[41753-41828]"
    }, {
      "left" : "return anythingElse(t, tb);",
      "right" : "return anythingElse(t, tb);",
      "info" : "ReturnStatement[41641-41668]:ReturnStatement[41779-41806]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41696-41769]:Block[41834-41907]"
    }, {
      "left" : "tb.insertEmpty(startTag);",
      "right" : "tb.insertEmpty(startTag);",
      "info" : "ExpressionStatement[41722-41747]:ExpressionStatement[41860-41885]"
    }, {
      "left" : "if (name.equals(\"form\"))",
      "right" : "if (name.equals(\"form\"))",
      "info" : "IfStatement[41793-42142]:IfStatement[41931-42280]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41818-42069]:Block[41956-42207]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[41840-41855]:ExpressionStatement[41978-41993]"
    }, {
      "left" : "if (tb.getFormElement() != null)",
      "right" : "if (tb.getFormElement() != null)",
      "info" : "IfStatement[41876-42051]:IfStatement[42014-42189]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[41933-41946]:ReturnStatement[42071-42084]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41972-42051]:Block[42110-42189]"
    }, {
      "left" : "tb.insertForm(startTag, false);",
      "right" : "tb.insertForm(startTag, false);",
      "info" : "ExpressionStatement[41998-42029]:ExpressionStatement[42136-42167]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42075-42142]:Block[42213-42280]"
    }, {
      "left" : "return anythingElse(t, tb);",
      "right" : "return anythingElse(t, tb);",
      "info" : "ReturnStatement[42097-42124]:ReturnStatement[42235-42262]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[42159-42171]:ReturnStatement[42297-42309]"
    }, {
      "left" : "if (t.isEndTag())",
      "right" : "if (t.isEndTag())",
      "info" : "IfStatement[42337-43352]:IfStatement[42475-43490]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42355-43167]:Block[42493-43305]"
    }, {
      "left" : "Token.EndTag endTag = t.asEndTag();",
      "right" : "Token.EndTag endTag = t.asEndTag();",
      "info" : "VariableDeclarationStatement[42373-42408]:VariableDeclarationStatement[42511-42546]"
    }, {
      "left" : "String name = endTag.name();",
      "right" : "String name = endTag.name();",
      "info" : "VariableDeclarationStatement[42425-42453]:VariableDeclarationStatement[42563-42591]"
    }, {
      "left" : "if (name.equals(\"table\"))",
      "right" : "if (name.equals(\"table\"))",
      "info" : "IfStatement[42471-43101]:IfStatement[42609-43239]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42497-42793]:Block[42635-42931]"
    }, {
      "left" : "if (!tb.inTableScope(name))",
      "right" : "if (!tb.inTableScope(name))",
      "info" : "IfStatement[42519-42730]:IfStatement[42657-42868]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42547-42648]:Block[42685-42786]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[42573-42588]:ExpressionStatement[42711-42726]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[42613-42626]:ReturnStatement[42751-42764]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42654-42730]:Block[42792-42868]"
    }, {
      "left" : "tb.popStackToClose(\"table\");",
      "right" : "tb.popStackToClose(\"table\");",
      "info" : "ExpressionStatement[42680-42708]:ExpressionStatement[42818-42846]"
    }, {
      "left" : "tb.resetInsertionMode();",
      "right" : "tb.resetInsertionMode();",
      "info" : "ExpressionStatement[42751-42775]:ExpressionStatement[42889-42913]"
    }, {
      "left" : "if (StringUtil.in(name,\n                        \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\"))",
      "right" : "if (StringUtil.in(name,\n                        \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\"))",
      "info" : "IfStatement[42799-43101]:IfStatement[42937-43239]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42939-43028]:Block[43077-43166]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[42961-42976]:ExpressionStatement[43099-43114]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[42997-43010]:ReturnStatement[43135-43148]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43034-43101]:Block[43172-43239]"
    }, {
      "left" : "return anythingElse(t, tb);",
      "right" : "return anythingElse(t, tb);",
      "info" : "ReturnStatement[43056-43083]:ReturnStatement[43194-43221]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[43118-43130]:ReturnStatement[43256-43268]"
    }, {
      "left" : "if (t.isEOF())",
      "right" : "if (t.isEOF())",
      "info" : "IfStatement[43173-43352]:IfStatement[43311-43490]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43188-43352]:Block[43326-43490]"
    }, {
      "left" : "if (tb.currentElement().nodeName().equals(\"html\"))",
      "right" : "if (tb.currentElement().nodeName().equals(\"html\"))",
      "info" : "IfStatement[43206-43292]:IfStatement[43344-43430]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[43277-43292]:ExpressionStatement[43415-43430]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[43309-43321]:ReturnStatement[43447-43459]"
    }, {
      "left" : "return anythingElse(t, tb);",
      "right" : "return anythingElse(t, tb);",
      "info" : "ReturnStatement[43365-43392]:ReturnStatement[43503-43530]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43462-43900]:Block[43600-44038]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[43476-43491]:ExpressionStatement[43614-43629]"
    }, {
      "left" : "boolean processed = true;",
      "right" : "boolean processed = true;",
      "info" : "VariableDeclarationStatement[43504-43529]:VariableDeclarationStatement[43642-43667]"
    }, {
      "left" : "if (StringUtil.in(tb.currentElement().nodeName(), \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\"))",
      "right" : "if (StringUtil.in(tb.currentElement().nodeName(), \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\"))",
      "info" : "IfStatement[43542-43860]:IfStatement[43680-43998]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43635-43788]:Block[43773-43926]"
    }, {
      "left" : "tb.setFosterInserts(true);",
      "right" : "tb.setFosterInserts(true);",
      "info" : "ExpressionStatement[43653-43679]:ExpressionStatement[43791-43817]"
    }, {
      "left" : "processed = tb.process(t, InBody);",
      "right" : "processed = tb.process(t, InBody);",
      "info" : "ExpressionStatement[43696-43730]:ExpressionStatement[43834-43868]"
    }, {
      "left" : "tb.setFosterInserts(false);",
      "right" : "tb.setFosterInserts(false);",
      "info" : "ExpressionStatement[43747-43774]:ExpressionStatement[43885-43912]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43794-43860]:Block[43932-43998]"
    }, {
      "left" : "processed = tb.process(t, InBody);",
      "right" : "processed = tb.process(t, InBody);",
      "info" : "ExpressionStatement[43812-43846]:ExpressionStatement[43950-43984]"
    }, {
      "left" : "return processed;",
      "right" : "return processed;",
      "info" : "ReturnStatement[43873-43890]:ReturnStatement[44011-44028]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43979-45537]:Block[44117-45675]"
    }, {
      "left" : "switch (t.type) {\n                case Character:\n                    Token.Character c = t.asCharacter();\n                    if (c.getData().equals(nullString)) {\n                        tb.error(this);\n                        return false;\n                    } else {\n                        tb.getPendingTableCharacters().add(c);\n                    }\n                    break;\n                default:\n                    if (tb.getPendingTableCharacters().size() > 0) {\n                        for (Token.Character character : tb.getPendingTableCharacters()) {\n                            if (!isWhitespace(character)) {\n                                // InTable anything else section:\n                                tb.error(this);\n                                if (StringUtil.in(tb.currentElement().nodeName(), \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) {\n                                    tb.setFosterInserts(true);\n                                    tb.process(character, InBody);\n                                    tb.setFosterInserts(false);\n                                } else {\n                                    tb.process(character, InBody);\n                                }\n                            } else\n                                tb.insert(character);\n                        }\n                        tb.newPendingTableCharacters();\n                    }\n                    tb.transition(tb.originalState());\n                    return tb.process(t);\n            }",
      "right" : "switch (t.type) {\n                case Character:\n                    Token.Character c = t.asCharacter();\n                    if (c.getData().equals(nullString)) {\n                        tb.error(this);\n                        return false;\n                    } else {\n                        tb.getPendingTableCharacters().add(c);\n                    }\n                    break;\n                default:\n                    if (tb.getPendingTableCharacters().size() > 0) {\n                        for (Token.Character character : tb.getPendingTableCharacters()) {\n                            if (!isWhitespace(character)) {\n                                // InTable anything else section:\n                                tb.error(this);\n                                if (StringUtil.in(tb.currentElement().nodeName(), \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) {\n                                    tb.setFosterInserts(true);\n                                    tb.process(character, InBody);\n                                    tb.setFosterInserts(false);\n                                } else {\n                                    tb.process(character, InBody);\n                                }\n                            } else\n                                tb.insert(character);\n                        }\n                        tb.newPendingTableCharacters();\n                    }\n                    tb.transition(tb.originalState());\n                    return tb.process(t);\n            }",
      "info" : "SwitchStatement[43993-45502]:SwitchStatement[44131-45640]"
    }, {
      "left" : "case Character:",
      "right" : "case Character:",
      "info" : "SwitchCase[44027-44042]:SwitchCase[44165-44180]"
    }, {
      "left" : "Token.Character c = t.asCharacter();",
      "right" : "Token.Character c = t.asCharacter();",
      "info" : "VariableDeclarationStatement[44063-44099]:VariableDeclarationStatement[44201-44237]"
    }, {
      "left" : "if (c.getData().equals(nullString))",
      "right" : "if (c.getData().equals(nullString))",
      "info" : "IfStatement[44120-44349]:IfStatement[44258-44487]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44156-44257]:Block[44294-44395]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[44182-44197]:ExpressionStatement[44320-44335]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[44222-44235]:ReturnStatement[44360-44373]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44263-44349]:Block[44401-44487]"
    }, {
      "left" : "tb.getPendingTableCharacters().add(c);",
      "right" : "tb.getPendingTableCharacters().add(c);",
      "info" : "ExpressionStatement[44289-44327]:ExpressionStatement[44427-44465]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[44370-44376]:BreakStatement[44508-44514]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[44393-44401]:SwitchCase[44531-44539]"
    }, {
      "left" : "if (tb.getPendingTableCharacters().size() > 0)",
      "right" : "if (tb.getPendingTableCharacters().size() > 0)",
      "info" : "IfStatement[44422-45391]:IfStatement[44560-45529]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44469-45391]:Block[44607-45529]"
    }, {
      "left" : "for (Token.Character character : tb.getPendingTableCharacters())",
      "right" : "for (Token.Character character : tb.getPendingTableCharacters())",
      "info" : "EnhancedForStatement[44495-45313]:EnhancedForStatement[44633-45451]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44560-45313]:Block[44698-45451]"
    }, {
      "left" : "if (!isWhitespace(character))",
      "right" : "if (!isWhitespace(character))",
      "info" : "IfStatement[44590-45287]:IfStatement[44728-45425]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44620-45228]:Block[44758-45366]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[44720-44735]:ExpressionStatement[44858-44873]"
    }, {
      "left" : "if (StringUtil.in(tb.currentElement().nodeName(), \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\"))",
      "right" : "if (StringUtil.in(tb.currentElement().nodeName(), \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\"))",
      "info" : "IfStatement[44768-45198]:IfStatement[44906-45336]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44861-45090]:Block[44999-45228]"
    }, {
      "left" : "tb.setFosterInserts(true);",
      "right" : "tb.setFosterInserts(true);",
      "info" : "ExpressionStatement[44899-44925]:ExpressionStatement[45037-45063]"
    }, {
      "left" : "tb.process(character, InBody);",
      "right" : "tb.process(character, InBody);",
      "info" : "ExpressionStatement[44962-44992]:ExpressionStatement[45100-45130]"
    }, {
      "left" : "tb.setFosterInserts(false);",
      "right" : "tb.setFosterInserts(false);",
      "info" : "ExpressionStatement[45029-45056]:ExpressionStatement[45167-45194]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45096-45198]:Block[45234-45336]"
    }, {
      "left" : "tb.process(character, InBody);",
      "right" : "tb.process(character, InBody);",
      "info" : "ExpressionStatement[45134-45164]:ExpressionStatement[45272-45302]"
    }, {
      "left" : "tb.insert(character);",
      "right" : "tb.insert(character);",
      "info" : "ExpressionStatement[45266-45287]:ExpressionStatement[45404-45425]"
    }, {
      "left" : "tb.newPendingTableCharacters();",
      "right" : "tb.newPendingTableCharacters();",
      "info" : "ExpressionStatement[45338-45369]:ExpressionStatement[45476-45507]"
    }, {
      "left" : "tb.transition(tb.originalState());",
      "right" : "tb.transition(tb.originalState());",
      "info" : "ExpressionStatement[45412-45446]:ExpressionStatement[45550-45584]"
    }, {
      "left" : "return tb.process(t);",
      "right" : "return tb.process(t);",
      "info" : "ReturnStatement[45467-45488]:ReturnStatement[45605-45626]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[45515-45527]:ReturnStatement[45653-45665]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45614-47113]:Block[45752-47251]"
    }, {
      "left" : "if (t.isEndTag() && t.asEndTag().name().equals(\"caption\"))",
      "right" : "if (t.isEndTag() && t.asEndTag().name().equals(\"caption\"))",
      "info" : "IfStatement[45628-47078]:IfStatement[45766-47216]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45687-46279]:Block[45825-46417]"
    }, {
      "left" : "Token.EndTag endTag = t.asEndTag();",
      "right" : "Token.EndTag endTag = t.asEndTag();",
      "info" : "VariableDeclarationStatement[45705-45740]:VariableDeclarationStatement[45843-45878]"
    }, {
      "left" : "String name = endTag.name();",
      "right" : "String name = endTag.name();",
      "info" : "VariableDeclarationStatement[45757-45785]:VariableDeclarationStatement[45895-45923]"
    }, {
      "left" : "if (!tb.inTableScope(name))",
      "right" : "if (!tb.inTableScope(name))",
      "info" : "IfStatement[45802-46265]:IfStatement[45940-46403]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45830-45919]:Block[45968-46057]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[45852-45867]:ExpressionStatement[45990-46005]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[45888-45901]:ReturnStatement[46026-46039]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45925-46265]:Block[46063-46403]"
    }, {
      "left" : "tb.generateImpliedEndTags();",
      "right" : "tb.generateImpliedEndTags();",
      "info" : "ExpressionStatement[45947-45975]:ExpressionStatement[46085-46113]"
    }, {
      "left" : "if (!tb.currentElement().nodeName().equals(\"caption\"))",
      "right" : "if (!tb.currentElement().nodeName().equals(\"caption\"))",
      "info" : "IfStatement[45996-46090]:IfStatement[46134-46228]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[46075-46090]:ExpressionStatement[46213-46228]"
    }, {
      "left" : "tb.popStackToClose(\"caption\");",
      "right" : "tb.popStackToClose(\"caption\");",
      "info" : "ExpressionStatement[46111-46141]:ExpressionStatement[46249-46279]"
    }, {
      "left" : "tb.clearFormattingElementsToLastMarker();",
      "right" : "tb.clearFormattingElementsToLastMarker();",
      "info" : "ExpressionStatement[46162-46203]:ExpressionStatement[46300-46341]"
    }, {
      "left" : "tb.transition(InTable);",
      "right" : "tb.transition(InTable);",
      "info" : "ExpressionStatement[46224-46247]:ExpressionStatement[46362-46385]"
    }, {
      "left" : "if ((\n                    t.isStartTag() && StringUtil.in(t.asStartTag().name(),\n                            \"caption\", \"col\", \"colgroup\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\") ||\n                            t.isEndTag() && t.asEndTag().name().equals(\"table\")))",
      "right" : "if ((\n                    t.isStartTag() && StringUtil.in(t.asStartTag().name(),\n                            \"caption\", \"col\", \"colgroup\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\") ||\n                            t.isEndTag() && t.asEndTag().name().equals(\"table\")))",
      "info" : "IfStatement[46285-47078]:IfStatement[46423-47216]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46575-46772]:Block[46713-46910]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[46593-46608]:ExpressionStatement[46731-46746]"
    }, {
      "left" : "boolean processed = tb.process(new Token.EndTag(\"caption\"));",
      "right" : "boolean processed = tb.process(new Token.EndTag(\"caption\"));",
      "info" : "VariableDeclarationStatement[46625-46685]:VariableDeclarationStatement[46763-46823]"
    }, {
      "left" : "if (processed)",
      "right" : "if (processed)",
      "info" : "IfStatement[46702-46758]:IfStatement[46840-46896]"
    }, {
      "left" : "return tb.process(t);",
      "right" : "return tb.process(t);",
      "info" : "ReturnStatement[46737-46758]:ReturnStatement[46875-46896]"
    }, {
      "left" : "if (t.isEndTag() && StringUtil.in(t.asEndTag().name(),\n                    \"body\", \"col\", \"colgroup\", \"html\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\"))",
      "right" : "if (t.isEndTag() && StringUtil.in(t.asEndTag().name(),\n                    \"body\", \"col\", \"colgroup\", \"html\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\"))",
      "info" : "IfStatement[46778-47078]:IfStatement[46916-47216]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46934-47011]:Block[47072-47149]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[46952-46967]:ExpressionStatement[47090-47105]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[46984-46997]:ReturnStatement[47122-47135]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47017-47078]:Block[47155-47216]"
    }, {
      "left" : "return tb.process(t, InBody);",
      "right" : "return tb.process(t, InBody);",
      "info" : "ReturnStatement[47035-47064]:ReturnStatement[47173-47202]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[47091-47103]:ReturnStatement[47229-47241]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47194-48958]:Block[47332-49096]"
    }, {
      "left" : "if (isWhitespace(t))",
      "right" : "if (isWhitespace(t))",
      "info" : "IfStatement[47208-47317]:IfStatement[47346-47455]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47229-47317]:Block[47367-47455]"
    }, {
      "left" : "tb.insert(t.asCharacter());",
      "right" : "tb.insert(t.asCharacter());",
      "info" : "ExpressionStatement[47247-47274]:ExpressionStatement[47385-47412]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[47291-47303]:ReturnStatement[47429-47441]"
    }, {
      "left" : "switch (t.type) {\n                case Comment:\n                    tb.insert(t.asComment());\n                    break;\n                case Doctype:\n                    tb.error(this);\n                    break;\n                case StartTag:\n                    Token.StartTag startTag = t.asStartTag();\n                    String name = startTag.name();\n                    if (name.equals(\"html\"))\n                        return tb.process(t, InBody);\n                    else if (name.equals(\"col\"))\n                        tb.insertEmpty(startTag);\n                    else\n                        return anythingElse(t, tb);\n                    break;\n                case EndTag:\n                    Token.EndTag endTag = t.asEndTag();\n                    name = endTag.name();\n                    if (name.equals(\"colgroup\")) {\n                        if (tb.currentElement().nodeName().equals(\"html\")) { // frag case\n                            tb.error(this);\n                            return false;\n                        } else {\n                            tb.pop();\n                            tb.transition(InTable);\n                        }\n                    } else\n                        return anythingElse(t, tb);\n                    break;\n                case EOF:\n                    if (tb.currentElement().nodeName().equals(\"html\"))\n                        return true; // stop parsing; frag case\n                    else\n                        return anythingElse(t, tb);\n                default:\n                    return anythingElse(t, tb);\n            }",
      "right" : "switch (t.type) {\n                case Comment:\n                    tb.insert(t.asComment());\n                    break;\n                case Doctype:\n                    tb.error(this);\n                    break;\n                case StartTag:\n                    Token.StartTag startTag = t.asStartTag();\n                    String name = startTag.name();\n                    if (name.equals(\"html\"))\n                        return tb.process(t, InBody);\n                    else if (name.equals(\"col\"))\n                        tb.insertEmpty(startTag);\n                    else\n                        return anythingElse(t, tb);\n                    break;\n                case EndTag:\n                    Token.EndTag endTag = t.asEndTag();\n                    name = endTag.name();\n                    if (name.equals(\"colgroup\")) {\n                        if (tb.currentElement().nodeName().equals(\"html\")) { // frag case\n                            tb.error(this);\n                            return false;\n                        } else {\n                            tb.pop();\n                            tb.transition(InTable);\n                        }\n                    } else\n                        return anythingElse(t, tb);\n                    break;\n                case EOF:\n                    if (tb.currentElement().nodeName().equals(\"html\"))\n                        return true; // stop parsing; frag case\n                    else\n                        return anythingElse(t, tb);\n                default:\n                    return anythingElse(t, tb);\n            }",
      "info" : "SwitchStatement[47330-48923]:SwitchStatement[47468-49061]"
    }, {
      "left" : "case Comment:",
      "right" : "case Comment:",
      "info" : "SwitchCase[47364-47377]:SwitchCase[47502-47515]"
    }, {
      "left" : "tb.insert(t.asComment());",
      "right" : "tb.insert(t.asComment());",
      "info" : "ExpressionStatement[47398-47423]:ExpressionStatement[47536-47561]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[47444-47450]:BreakStatement[47582-47588]"
    }, {
      "left" : "case Doctype:",
      "right" : "case Doctype:",
      "info" : "SwitchCase[47467-47480]:SwitchCase[47605-47618]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[47501-47516]:ExpressionStatement[47639-47654]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[47537-47543]:BreakStatement[47675-47681]"
    }, {
      "left" : "case StartTag:",
      "right" : "case StartTag:",
      "info" : "SwitchCase[47560-47574]:SwitchCase[47698-47712]"
    }, {
      "left" : "Token.StartTag startTag = t.asStartTag();",
      "right" : "Token.StartTag startTag = t.asStartTag();",
      "info" : "VariableDeclarationStatement[47595-47636]:VariableDeclarationStatement[47733-47774]"
    }, {
      "left" : "String name = startTag.name();",
      "right" : "String name = startTag.name();",
      "info" : "VariableDeclarationStatement[47657-47687]:VariableDeclarationStatement[47795-47825]"
    }, {
      "left" : "if (name.equals(\"html\"))",
      "right" : "if (name.equals(\"html\"))",
      "info" : "IfStatement[47708-47962]:IfStatement[47846-48100]"
    }, {
      "left" : "return tb.process(t, InBody);",
      "right" : "return tb.process(t, InBody);",
      "info" : "ReturnStatement[47757-47786]:ReturnStatement[47895-47924]"
    }, {
      "left" : "if (name.equals(\"col\"))",
      "right" : "if (name.equals(\"col\"))",
      "info" : "IfStatement[47812-47962]:IfStatement[47950-48100]"
    }, {
      "left" : "tb.insertEmpty(startTag);",
      "right" : "tb.insertEmpty(startTag);",
      "info" : "ExpressionStatement[47860-47885]:ExpressionStatement[47998-48023]"
    }, {
      "left" : "return anythingElse(t, tb);",
      "right" : "return anythingElse(t, tb);",
      "info" : "ReturnStatement[47935-47962]:ReturnStatement[48073-48100]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[47983-47989]:BreakStatement[48121-48127]"
    }, {
      "left" : "case EndTag:",
      "right" : "case EndTag:",
      "info" : "SwitchCase[48006-48018]:SwitchCase[48144-48156]"
    }, {
      "left" : "Token.EndTag endTag = t.asEndTag();",
      "right" : "Token.EndTag endTag = t.asEndTag();",
      "info" : "VariableDeclarationStatement[48039-48074]:VariableDeclarationStatement[48177-48212]"
    }, {
      "left" : "name = endTag.name();",
      "right" : "name = endTag.name();",
      "info" : "ExpressionStatement[48095-48116]:ExpressionStatement[48233-48254]"
    }, {
      "left" : "if (name.equals(\"colgroup\"))",
      "right" : "if (name.equals(\"colgroup\"))",
      "info" : "IfStatement[48137-48571]:IfStatement[48275-48709]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48166-48514]:Block[48304-48652]"
    }, {
      "left" : "if (tb.currentElement().nodeName().equals(\"html\"))",
      "right" : "if (tb.currentElement().nodeName().equals(\"html\"))",
      "info" : "IfStatement[48192-48492]:IfStatement[48330-48630]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48243-48369]:Block[48381-48507]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[48286-48301]:ExpressionStatement[48424-48439]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[48330-48343]:ReturnStatement[48468-48481]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48375-48492]:Block[48513-48630]"
    }, {
      "left" : "tb.pop();",
      "right" : "tb.pop();",
      "info" : "ExpressionStatement[48405-48414]:ExpressionStatement[48543-48552]"
    }, {
      "left" : "tb.transition(InTable);",
      "right" : "tb.transition(InTable);",
      "info" : "ExpressionStatement[48443-48466]:ExpressionStatement[48581-48604]"
    }, {
      "left" : "return anythingElse(t, tb);",
      "right" : "return anythingElse(t, tb);",
      "info" : "ReturnStatement[48544-48571]:ReturnStatement[48682-48709]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[48592-48598]:BreakStatement[48730-48736]"
    }, {
      "left" : "case EOF:",
      "right" : "case EOF:",
      "info" : "SwitchCase[48615-48624]:SwitchCase[48753-48762]"
    }, {
      "left" : "if (tb.currentElement().nodeName().equals(\"html\"))",
      "right" : "if (tb.currentElement().nodeName().equals(\"html\"))",
      "info" : "IfStatement[48645-48836]:IfStatement[48783-48974]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[48720-48732]:ReturnStatement[48858-48870]"
    }, {
      "left" : "return anythingElse(t, tb);",
      "right" : "return anythingElse(t, tb);",
      "info" : "ReturnStatement[48809-48836]:ReturnStatement[48947-48974]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[48853-48861]:SwitchCase[48991-48999]"
    }, {
      "left" : "return anythingElse(t, tb);",
      "right" : "return anythingElse(t, tb);",
      "info" : "ReturnStatement[48882-48909]:ReturnStatement[49020-49047]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[48936-48948]:ReturnStatement[49074-49086]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49022-49226]:Block[49160-49364]"
    }, {
      "left" : "boolean processed = tb.process(new Token.EndTag(\"colgroup\"));",
      "right" : "boolean processed = tb.process(new Token.EndTag(\"colgroup\"));",
      "info" : "VariableDeclarationStatement[49036-49097]:VariableDeclarationStatement[49174-49235]"
    }, {
      "left" : "if (processed)",
      "right" : "if (processed)",
      "info" : "IfStatement[49110-49191]:IfStatement[49248-49329]"
    }, {
      "left" : "return tb.process(t);",
      "right" : "return tb.process(t);",
      "info" : "ReturnStatement[49170-49191]:ReturnStatement[49308-49329]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[49204-49216]:ReturnStatement[49342-49354]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49305-51251]:Block[49443-51389]"
    }, {
      "left" : "switch (t.type) {\n                case StartTag:\n                    Token.StartTag startTag = t.asStartTag();\n                    String name = startTag.name();\n                    if (name.equals(\"tr\")) {\n                        tb.clearStackToTableBodyContext();\n                        tb.insert(startTag);\n                        tb.transition(InRow);\n                    } else if (StringUtil.in(name, \"th\", \"td\")) {\n                        tb.error(this);\n                        tb.process(new Token.StartTag(\"tr\"));\n                        return tb.process(startTag);\n                    } else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\")) {\n                        return exitTableBody(t, tb);\n                    } else\n                        return anythingElse(t, tb);\n                    break;\n                case EndTag:\n                    Token.EndTag endTag = t.asEndTag();\n                    name = endTag.name();\n                    if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) {\n                        if (!tb.inTableScope(name)) {\n                            tb.error(this);\n                            return false;\n                        } else {\n                            tb.clearStackToTableBodyContext();\n                            tb.pop();\n                            tb.transition(InTable);\n                        }\n                    } else if (name.equals(\"table\")) {\n                        return exitTableBody(t, tb);\n                    } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\", \"tr\")) {\n                        tb.error(this);\n                        return false;\n                    } else\n                        return anythingElse(t, tb);\n                    break;\n                default:\n                    return anythingElse(t, tb);\n            }",
      "right" : "switch (t.type) {\n                case StartTag:\n                    Token.StartTag startTag = t.asStartTag();\n                    String name = startTag.name();\n                    if (name.equals(\"tr\")) {\n                        tb.clearStackToTableBodyContext();\n                        tb.insert(startTag);\n                        tb.transition(InRow);\n                    } else if (StringUtil.in(name, \"th\", \"td\")) {\n                        tb.error(this);\n                        tb.process(new Token.StartTag(\"tr\"));\n                        return tb.process(startTag);\n                    } else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\")) {\n                        return exitTableBody(t, tb);\n                    } else\n                        return anythingElse(t, tb);\n                    break;\n                case EndTag:\n                    Token.EndTag endTag = t.asEndTag();\n                    name = endTag.name();\n                    if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) {\n                        if (!tb.inTableScope(name)) {\n                            tb.error(this);\n                            return false;\n                        } else {\n                            tb.clearStackToTableBodyContext();\n                            tb.pop();\n                            tb.transition(InTable);\n                        }\n                    } else if (name.equals(\"table\")) {\n                        return exitTableBody(t, tb);\n                    } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\", \"tr\")) {\n                        tb.error(this);\n                        return false;\n                    } else\n                        return anythingElse(t, tb);\n                    break;\n                default:\n                    return anythingElse(t, tb);\n            }",
      "info" : "SwitchStatement[49319-51216]:SwitchStatement[49457-51354]"
    }, {
      "left" : "case StartTag:",
      "right" : "case StartTag:",
      "info" : "SwitchCase[49353-49367]:SwitchCase[49491-49505]"
    }, {
      "left" : "Token.StartTag startTag = t.asStartTag();",
      "right" : "Token.StartTag startTag = t.asStartTag();",
      "info" : "VariableDeclarationStatement[49388-49429]:VariableDeclarationStatement[49526-49567]"
    }, {
      "left" : "String name = startTag.name();",
      "right" : "String name = startTag.name();",
      "info" : "VariableDeclarationStatement[49450-49480]:VariableDeclarationStatement[49588-49618]"
    }, {
      "left" : "if (name.equals(\"tr\"))",
      "right" : "if (name.equals(\"tr\"))",
      "info" : "IfStatement[49501-50139]:IfStatement[49639-50277]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49524-49697]:Block[49662-49835]"
    }, {
      "left" : "tb.clearStackToTableBodyContext();",
      "right" : "tb.clearStackToTableBodyContext();",
      "info" : "ExpressionStatement[49550-49584]:ExpressionStatement[49688-49722]"
    }, {
      "left" : "tb.insert(startTag);",
      "right" : "tb.insert(startTag);",
      "info" : "ExpressionStatement[49609-49629]:ExpressionStatement[49747-49767]"
    }, {
      "left" : "tb.transition(InRow);",
      "right" : "tb.transition(InRow);",
      "info" : "ExpressionStatement[49654-49675]:ExpressionStatement[49792-49813]"
    }, {
      "left" : "if (StringUtil.in(name, \"th\", \"td\"))",
      "right" : "if (StringUtil.in(name, \"th\", \"td\"))",
      "info" : "IfStatement[49703-50139]:IfStatement[49841-50277]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49740-49918]:Block[49878-50056]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[49766-49781]:ExpressionStatement[49904-49919]"
    }, {
      "left" : "tb.process(new Token.StartTag(\"tr\"));",
      "right" : "tb.process(new Token.StartTag(\"tr\"));",
      "info" : "ExpressionStatement[49806-49843]:ExpressionStatement[49944-49981]"
    }, {
      "left" : "return tb.process(startTag);",
      "right" : "return tb.process(startTag);",
      "info" : "ReturnStatement[49868-49896]:ReturnStatement[50006-50034]"
    }, {
      "left" : "if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\"))",
      "right" : "if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\"))",
      "info" : "IfStatement[49924-50139]:IfStatement[50062-50277]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50006-50082]:Block[50144-50220]"
    }, {
      "left" : "return exitTableBody(t, tb);",
      "right" : "return exitTableBody(t, tb);",
      "info" : "ReturnStatement[50032-50060]:ReturnStatement[50170-50198]"
    }, {
      "left" : "return anythingElse(t, tb);",
      "right" : "return anythingElse(t, tb);",
      "info" : "ReturnStatement[50112-50139]:ReturnStatement[50250-50277]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[50160-50166]:BreakStatement[50298-50304]"
    }, {
      "left" : "case EndTag:",
      "right" : "case EndTag:",
      "info" : "SwitchCase[50183-50195]:SwitchCase[50321-50333]"
    }, {
      "left" : "Token.EndTag endTag = t.asEndTag();",
      "right" : "Token.EndTag endTag = t.asEndTag();",
      "info" : "VariableDeclarationStatement[50216-50251]:VariableDeclarationStatement[50354-50389]"
    }, {
      "left" : "name = endTag.name();",
      "right" : "name = endTag.name();",
      "info" : "ExpressionStatement[50272-50293]:ExpressionStatement[50410-50431]"
    }, {
      "left" : "if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\"))",
      "right" : "if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\"))",
      "info" : "IfStatement[50314-51102]:IfStatement[50452-51240]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50366-50741]:Block[50504-50879]"
    }, {
      "left" : "if (!tb.inTableScope(name))",
      "right" : "if (!tb.inTableScope(name))",
      "info" : "IfStatement[50392-50719]:IfStatement[50530-50857]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50420-50533]:Block[50558-50671]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[50450-50465]:ExpressionStatement[50588-50603]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[50494-50507]:ReturnStatement[50632-50645]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50539-50719]:Block[50677-50857]"
    }, {
      "left" : "tb.clearStackToTableBodyContext();",
      "right" : "tb.clearStackToTableBodyContext();",
      "info" : "ExpressionStatement[50569-50603]:ExpressionStatement[50707-50741]"
    }, {
      "left" : "tb.pop();",
      "right" : "tb.pop();",
      "info" : "ExpressionStatement[50632-50641]:ExpressionStatement[50770-50779]"
    }, {
      "left" : "tb.transition(InTable);",
      "right" : "tb.transition(InTable);",
      "info" : "ExpressionStatement[50670-50693]:ExpressionStatement[50808-50831]"
    }, {
      "left" : "if (name.equals(\"table\"))",
      "right" : "if (name.equals(\"table\"))",
      "info" : "IfStatement[50747-51102]:IfStatement[50885-51240]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50773-50849]:Block[50911-50987]"
    }, {
      "left" : "return exitTableBody(t, tb);",
      "right" : "return exitTableBody(t, tb);",
      "info" : "ReturnStatement[50799-50827]:ReturnStatement[50937-50965]"
    }, {
      "left" : "if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\", \"tr\"))",
      "right" : "if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\", \"tr\"))",
      "info" : "IfStatement[50855-51102]:IfStatement[50993-51240]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50944-51045]:Block[51082-51183]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[50970-50985]:ExpressionStatement[51108-51123]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[51010-51023]:ReturnStatement[51148-51161]"
    }, {
      "left" : "return anythingElse(t, tb);",
      "right" : "return anythingElse(t, tb);",
      "info" : "ReturnStatement[51075-51102]:ReturnStatement[51213-51240]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[51123-51129]:BreakStatement[51261-51267]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[51146-51154]:SwitchCase[51284-51292]"
    }, {
      "left" : "return anythingElse(t, tb);",
      "right" : "return anythingElse(t, tb);",
      "info" : "ReturnStatement[51175-51202]:ReturnStatement[51313-51340]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[51229-51241]:ReturnStatement[51367-51379]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51320-51712]:Block[51458-51850]"
    }, {
      "left" : "if (!(tb.inTableScope(\"tbody\") || tb.inTableScope(\"thead\") || tb.inScope(\"tfoot\")))",
      "right" : "if (!(tb.inTableScope(\"tbody\") || tb.inTableScope(\"thead\") || tb.inScope(\"tfoot\")))",
      "info" : "IfStatement[51334-51524]:IfStatement[51472-51662]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51418-51524]:Block[51556-51662]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[51465-51480]:ExpressionStatement[51603-51618]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[51497-51510]:ReturnStatement[51635-51648]"
    }, {
      "left" : "tb.clearStackToTableBodyContext();",
      "right" : "tb.clearStackToTableBodyContext();",
      "info" : "ExpressionStatement[51537-51571]:ExpressionStatement[51675-51709]"
    }, {
      "left" : "tb.process(new Token.EndTag(tb.currentElement().nodeName()));",
      "right" : "tb.process(new Token.EndTag(tb.currentElement().nodeName()));",
      "info" : "ExpressionStatement[51584-51645]:ExpressionStatement[51722-51783]"
    }, {
      "left" : "return tb.process(t);",
      "right" : "return tb.process(t);",
      "info" : "ReturnStatement[51681-51702]:ReturnStatement[51819-51840]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51780-51834]:Block[51918-51972]"
    }, {
      "left" : "return tb.process(t, InTable);",
      "right" : "return tb.process(t, InTable);",
      "info" : "ReturnStatement[51794-51824]:ReturnStatement[51932-51962]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51907-53839]:Block[52045-53977]"
    }, {
      "left" : "if (t.isStartTag())",
      "right" : "if (t.isStartTag())",
      "info" : "IfStatement[51921-53804]:IfStatement[52059-53942]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51941-52569]:Block[52079-52707]"
    }, {
      "left" : "Token.StartTag startTag = t.asStartTag();",
      "right" : "Token.StartTag startTag = t.asStartTag();",
      "info" : "VariableDeclarationStatement[51959-52000]:VariableDeclarationStatement[52097-52138]"
    }, {
      "left" : "String name = startTag.name();",
      "right" : "String name = startTag.name();",
      "info" : "VariableDeclarationStatement[52017-52047]:VariableDeclarationStatement[52155-52185]"
    }, {
      "left" : "if (StringUtil.in(name, \"th\", \"td\"))",
      "right" : "if (StringUtil.in(name, \"th\", \"td\"))",
      "info" : "IfStatement[52065-52555]:IfStatement[52203-52693]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52102-52318]:Block[52240-52456]"
    }, {
      "left" : "tb.clearStackToTableRowContext();",
      "right" : "tb.clearStackToTableRowContext();",
      "info" : "ExpressionStatement[52124-52157]:ExpressionStatement[52262-52295]"
    }, {
      "left" : "tb.insert(startTag);",
      "right" : "tb.insert(startTag);",
      "info" : "ExpressionStatement[52178-52198]:ExpressionStatement[52316-52336]"
    }, {
      "left" : "tb.transition(InCell);",
      "right" : "tb.transition(InCell);",
      "info" : "ExpressionStatement[52219-52241]:ExpressionStatement[52357-52379]"
    }, {
      "left" : "tb.insertMarkerToFormattingElements();",
      "right" : "tb.insertMarkerToFormattingElements();",
      "info" : "ExpressionStatement[52262-52300]:ExpressionStatement[52400-52438]"
    }, {
      "left" : "if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\", \"tr\"))",
      "right" : "if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\", \"tr\"))",
      "info" : "IfStatement[52324-52555]:IfStatement[52462-52693]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52412-52482]:Block[52550-52620]"
    }, {
      "left" : "return handleMissingTr(t, tb);",
      "right" : "return handleMissingTr(t, tb);",
      "info" : "ReturnStatement[52434-52464]:ReturnStatement[52572-52602]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52488-52555]:Block[52626-52693]"
    }, {
      "left" : "return anythingElse(t, tb);",
      "right" : "return anythingElse(t, tb);",
      "info" : "ReturnStatement[52510-52537]:ReturnStatement[52648-52675]"
    }, {
      "left" : "if (t.isEndTag())",
      "right" : "if (t.isEndTag())",
      "info" : "IfStatement[52575-53804]:IfStatement[52713-53942]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52593-53739]:Block[52731-53877]"
    }, {
      "left" : "Token.EndTag endTag = t.asEndTag();",
      "right" : "Token.EndTag endTag = t.asEndTag();",
      "info" : "VariableDeclarationStatement[52611-52646]:VariableDeclarationStatement[52749-52784]"
    }, {
      "left" : "String name = endTag.name();",
      "right" : "String name = endTag.name();",
      "info" : "VariableDeclarationStatement[52663-52691]:VariableDeclarationStatement[52801-52829]"
    }, {
      "left" : "if (name.equals(\"tr\"))",
      "right" : "if (name.equals(\"tr\"))",
      "info" : "IfStatement[52709-53725]:IfStatement[52847-53863]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52732-53047]:Block[52870-53185]"
    }, {
      "left" : "if (!tb.inTableScope(name))",
      "right" : "if (!tb.inTableScope(name))",
      "info" : "IfStatement[52754-52891]:IfStatement[52892-53029]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52782-52891]:Block[52920-53029]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[52808-52823]:ExpressionStatement[52946-52961]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[52856-52869]:ReturnStatement[52994-53007]"
    }, {
      "left" : "tb.clearStackToTableRowContext();",
      "right" : "tb.clearStackToTableRowContext();",
      "info" : "ExpressionStatement[52912-52945]:ExpressionStatement[53050-53083]"
    }, {
      "left" : "tb.pop();",
      "right" : "tb.pop();",
      "info" : "ExpressionStatement[52966-52975]:ExpressionStatement[53104-53113]"
    }, {
      "left" : "tb.transition(InTableBody);",
      "right" : "tb.transition(InTableBody);",
      "info" : "ExpressionStatement[53002-53029]:ExpressionStatement[53140-53167]"
    }, {
      "left" : "if (name.equals(\"table\"))",
      "right" : "if (name.equals(\"table\"))",
      "info" : "IfStatement[53053-53725]:IfStatement[53191-53863]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53079-53149]:Block[53217-53287]"
    }, {
      "left" : "return handleMissingTr(t, tb);",
      "right" : "return handleMissingTr(t, tb);",
      "info" : "ReturnStatement[53101-53131]:ReturnStatement[53239-53269]"
    }, {
      "left" : "if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\"))",
      "right" : "if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\"))",
      "info" : "IfStatement[53155-53725]:IfStatement[53293-53863]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53207-53474]:Block[53345-53612]"
    }, {
      "left" : "if (!tb.inTableScope(name))",
      "right" : "if (!tb.inTableScope(name))",
      "info" : "IfStatement[53229-53358]:IfStatement[53367-53496]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53257-53358]:Block[53395-53496]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[53283-53298]:ExpressionStatement[53421-53436]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[53323-53336]:ReturnStatement[53461-53474]"
    }, {
      "left" : "tb.process(new Token.EndTag(\"tr\"));",
      "right" : "tb.process(new Token.EndTag(\"tr\"));",
      "info" : "ExpressionStatement[53379-53414]:ExpressionStatement[53517-53552]"
    }, {
      "left" : "return tb.process(t);",
      "right" : "return tb.process(t);",
      "info" : "ReturnStatement[53435-53456]:ReturnStatement[53573-53594]"
    }, {
      "left" : "if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\"))",
      "right" : "if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\"))",
      "info" : "IfStatement[53480-53725]:IfStatement[53618-53863]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53563-53652]:Block[53701-53790]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[53585-53600]:ExpressionStatement[53723-53738]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[53621-53634]:ReturnStatement[53759-53772]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53658-53725]:Block[53796-53863]"
    }, {
      "left" : "return anythingElse(t, tb);",
      "right" : "return anythingElse(t, tb);",
      "info" : "ReturnStatement[53680-53707]:ReturnStatement[53818-53845]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53745-53804]:Block[53883-53942]"
    }, {
      "left" : "return anythingElse(t, tb);",
      "right" : "return anythingElse(t, tb);",
      "info" : "ReturnStatement[53763-53790]:ReturnStatement[53901-53928]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[53817-53829]:ReturnStatement[53955-53967]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53907-53961]:Block[54045-54099]"
    }, {
      "left" : "return tb.process(t, InTable);",
      "right" : "return tb.process(t, InTable);",
      "info" : "ReturnStatement[53921-53951]:ReturnStatement[54059-54089]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54028-54219]:Block[54166-54357]"
    }, {
      "left" : "boolean processed = tb.process(new Token.EndTag(\"tr\"));",
      "right" : "boolean processed = tb.process(new Token.EndTag(\"tr\"));",
      "info" : "VariableDeclarationStatement[54042-54097]:VariableDeclarationStatement[54180-54235]"
    }, {
      "left" : "if (processed)",
      "right" : "if (processed)",
      "info" : "IfStatement[54110-54209]:IfStatement[54248-54347]"
    }, {
      "left" : "return tb.process(t);",
      "right" : "return tb.process(t);",
      "info" : "ReturnStatement[54141-54162]:ReturnStatement[54279-54300]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[54196-54209]:ReturnStatement[54334-54347]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54293-56178]:Block[54431-56316]"
    }, {
      "left" : "if (t.isEndTag())",
      "right" : "if (t.isEndTag())",
      "info" : "IfStatement[54307-56143]:IfStatement[54445-56281]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54325-55644]:Block[54463-55782]"
    }, {
      "left" : "Token.EndTag endTag = t.asEndTag();",
      "right" : "Token.EndTag endTag = t.asEndTag();",
      "info" : "VariableDeclarationStatement[54343-54378]:VariableDeclarationStatement[54481-54516]"
    }, {
      "left" : "String name = endTag.name();",
      "right" : "String name = endTag.name();",
      "info" : "VariableDeclarationStatement[54395-54423]:VariableDeclarationStatement[54533-54561]"
    }, {
      "left" : "if (StringUtil.in(name, \"td\", \"th\"))",
      "right" : "if (StringUtil.in(name, \"td\", \"th\"))",
      "info" : "IfStatement[54441-55630]:IfStatement[54579-55768]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54478-55072]:Block[54616-55210]"
    }, {
      "left" : "if (!tb.inTableScope(name))",
      "right" : "if (!tb.inTableScope(name))",
      "info" : "IfStatement[54500-54745]:IfStatement[54638-54883]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54528-54745]:Block[54666-54883]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[54554-54569]:ExpressionStatement[54692-54707]"
    }, {
      "left" : "tb.transition(InRow);",
      "right" : "tb.transition(InRow);",
      "info" : "ExpressionStatement[54594-54615]:ExpressionStatement[54732-54753]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[54710-54723]:ReturnStatement[54848-54861]"
    }, {
      "left" : "tb.generateImpliedEndTags();",
      "right" : "tb.generateImpliedEndTags();",
      "info" : "ExpressionStatement[54766-54794]:ExpressionStatement[54904-54932]"
    }, {
      "left" : "if (!tb.currentElement().nodeName().equals(name))",
      "right" : "if (!tb.currentElement().nodeName().equals(name))",
      "info" : "IfStatement[54815-54904]:IfStatement[54953-55042]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[54889-54904]:ExpressionStatement[55027-55042]"
    }, {
      "left" : "tb.popStackToClose(name);",
      "right" : "tb.popStackToClose(name);",
      "info" : "ExpressionStatement[54925-54950]:ExpressionStatement[55063-55088]"
    }, {
      "left" : "tb.clearFormattingElementsToLastMarker();",
      "right" : "tb.clearFormattingElementsToLastMarker();",
      "info" : "ExpressionStatement[54971-55012]:ExpressionStatement[55109-55150]"
    }, {
      "left" : "tb.transition(InRow);",
      "right" : "tb.transition(InRow);",
      "info" : "ExpressionStatement[55033-55054]:ExpressionStatement[55171-55192]"
    }, {
      "left" : "if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\"))",
      "right" : "if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\"))",
      "info" : "IfStatement[55078-55630]:IfStatement[55216-55768]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55149-55238]:Block[55287-55376]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[55171-55186]:ExpressionStatement[55309-55324]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[55207-55220]:ReturnStatement[55345-55358]"
    }, {
      "left" : "if (StringUtil.in(name, \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\"))",
      "right" : "if (StringUtil.in(name, \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\"))",
      "info" : "IfStatement[55244-55630]:IfStatement[55382-55768]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55311-55557]:Block[55449-55695]"
    }, {
      "left" : "if (!tb.inTableScope(name))",
      "right" : "if (!tb.inTableScope(name))",
      "info" : "IfStatement[55333-55462]:IfStatement[55471-55600]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55361-55462]:Block[55499-55600]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[55387-55402]:ExpressionStatement[55525-55540]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[55427-55440]:ReturnStatement[55565-55578]"
    }, {
      "left" : "closeCell(tb);",
      "right" : "closeCell(tb);",
      "info" : "ExpressionStatement[55483-55497]:ExpressionStatement[55621-55635]"
    }, {
      "left" : "return tb.process(t);",
      "right" : "return tb.process(t);",
      "info" : "ReturnStatement[55518-55539]:ReturnStatement[55656-55677]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55563-55630]:Block[55701-55768]"
    }, {
      "left" : "return anythingElse(t, tb);",
      "right" : "return anythingElse(t, tb);",
      "info" : "ReturnStatement[55585-55612]:ReturnStatement[55723-55750]"
    }, {
      "left" : "if (t.isStartTag() &&\n                    StringUtil.in(t.asStartTag().name(),\n                            \"caption\", \"col\", \"colgroup\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\"))",
      "right" : "if (t.isStartTag() &&\n                    StringUtil.in(t.asStartTag().name(),\n                            \"caption\", \"col\", \"colgroup\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\"))",
      "info" : "IfStatement[55650-56143]:IfStatement[55788-56281]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55833-56078]:Block[55971-56216]"
    }, {
      "left" : "if (!(tb.inTableScope(\"td\") || tb.inTableScope(\"th\")))",
      "right" : "if (!(tb.inTableScope(\"td\") || tb.inTableScope(\"th\")))",
      "info" : "IfStatement[55851-55995]:IfStatement[55989-56133]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55906-55995]:Block[56044-56133]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[55928-55943]:ExpressionStatement[56066-56081]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[55964-55977]:ReturnStatement[56102-56115]"
    }, {
      "left" : "closeCell(tb);",
      "right" : "closeCell(tb);",
      "info" : "ExpressionStatement[56012-56026]:ExpressionStatement[56150-56164]"
    }, {
      "left" : "return tb.process(t);",
      "right" : "return tb.process(t);",
      "info" : "ReturnStatement[56043-56064]:ReturnStatement[56181-56202]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56084-56143]:Block[56222-56281]"
    }, {
      "left" : "return anythingElse(t, tb);",
      "right" : "return anythingElse(t, tb);",
      "info" : "ReturnStatement[56102-56129]:ReturnStatement[56240-56267]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[56156-56168]:ReturnStatement[56294-56306]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56246-56299]:Block[56384-56437]"
    }, {
      "left" : "return tb.process(t, InBody);",
      "right" : "return tb.process(t, InBody);",
      "info" : "ReturnStatement[56260-56289]:ReturnStatement[56398-56427]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56352-56557]:Block[56490-56695]"
    }, {
      "left" : "if (tb.inTableScope(\"td\"))",
      "right" : "if (tb.inTableScope(\"td\"))",
      "info" : "IfStatement[56366-56513]:IfStatement[56504-56651]"
    }, {
      "left" : "tb.process(new Token.EndTag(\"td\"));",
      "right" : "tb.process(new Token.EndTag(\"td\"));",
      "info" : "ExpressionStatement[56409-56444]:ExpressionStatement[56547-56582]"
    }, {
      "left" : "tb.process(new Token.EndTag(\"th\"));",
      "right" : "tb.process(new Token.EndTag(\"th\"));",
      "info" : "ExpressionStatement[56478-56513]:ExpressionStatement[56616-56651]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56633-60386]:Block[56771-60524]"
    }, {
      "left" : "switch (t.type) {\n                case Character:\n                    Token.Character c = t.asCharacter();\n                    if (c.getData().equals(nullString)) {\n                        tb.error(this);\n                        return false;\n                    } else {\n                        tb.insert(c);\n                    }\n                    break;\n                case Comment:\n                    tb.insert(t.asComment());\n                    break;\n                case Doctype:\n                    tb.error(this);\n                    return false;\n                case StartTag:\n                    Token.StartTag start = t.asStartTag();\n                    String name = start.name();\n                    if (name.equals(\"html\"))\n                        return tb.process(start, InBody);\n                    else if (name.equals(\"option\")) {\n                        tb.process(new Token.EndTag(\"option\"));\n                        tb.insert(start);\n                    } else if (name.equals(\"optgroup\")) {\n                        if (tb.currentElement().nodeName().equals(\"option\"))\n                            tb.process(new Token.EndTag(\"option\"));\n                        else if (tb.currentElement().nodeName().equals(\"optgroup\"))\n                            tb.process(new Token.EndTag(\"optgroup\"));\n                        tb.insert(start);\n                    } else if (name.equals(\"select\")) {\n                        tb.error(this);\n                        return tb.process(new Token.EndTag(\"select\"));\n                    } else if (StringUtil.in(name, \"input\", \"keygen\", \"textarea\")) {\n                        tb.error(this);\n                        if (!tb.inSelectScope(\"select\"))\n                            return false; // frag\n                        tb.process(new Token.EndTag(\"select\"));\n                        return tb.process(start);\n                    } else if (name.equals(\"script\")) {\n                        return tb.process(t, InHead);\n                    } else {\n                        return anythingElse(t, tb);\n                    }\n                    break;\n                case EndTag:\n                    Token.EndTag end = t.asEndTag();\n                    name = end.name();\n                    if (name.equals(\"optgroup\")) {\n                        if (tb.currentElement().nodeName().equals(\"option\") && tb.aboveOnStack(tb.currentElement()) != null && tb.aboveOnStack(tb.currentElement()).nodeName().equals(\"optgroup\"))\n                            tb.process(new Token.EndTag(\"option\"));\n                        if (tb.currentElement().nodeName().equals(\"optgroup\"))\n                            tb.pop();\n                        else\n                            tb.error(this);\n                    } else if (name.equals(\"option\")) {\n                        if (tb.currentElement().nodeName().equals(\"option\"))\n                            tb.pop();\n                        else\n                            tb.error(this);\n                    } else if (name.equals(\"select\")) {\n                        if (!tb.inSelectScope(name)) {\n                            tb.error(this);\n                            return false;\n                        } else {\n                            tb.popStackToClose(name);\n                            tb.resetInsertionMode();\n                        }\n                    } else\n                        return anythingElse(t, tb);\n                    break;\n                case EOF:\n                    if (!tb.currentElement().nodeName().equals(\"html\"))\n                        tb.error(this);\n                    break;\n                default:\n                    return anythingElse(t, tb);\n            }",
      "right" : "switch (t.type) {\n                case Character:\n                    Token.Character c = t.asCharacter();\n                    if (c.getData().equals(nullString)) {\n                        tb.error(this);\n                        return false;\n                    } else {\n                        tb.insert(c);\n                    }\n                    break;\n                case Comment:\n                    tb.insert(t.asComment());\n                    break;\n                case Doctype:\n                    tb.error(this);\n                    return false;\n                case StartTag:\n                    Token.StartTag start = t.asStartTag();\n                    String name = start.name();\n                    if (name.equals(\"html\"))\n                        return tb.process(start, InBody);\n                    else if (name.equals(\"option\")) {\n                        tb.process(new Token.EndTag(\"option\"));\n                        tb.insert(start);\n                    } else if (name.equals(\"optgroup\")) {\n                        if (tb.currentElement().nodeName().equals(\"option\"))\n                            tb.process(new Token.EndTag(\"option\"));\n                        else if (tb.currentElement().nodeName().equals(\"optgroup\"))\n                            tb.process(new Token.EndTag(\"optgroup\"));\n                        tb.insert(start);\n                    } else if (name.equals(\"select\")) {\n                        tb.error(this);\n                        return tb.process(new Token.EndTag(\"select\"));\n                    } else if (StringUtil.in(name, \"input\", \"keygen\", \"textarea\")) {\n                        tb.error(this);\n                        if (!tb.inSelectScope(\"select\"))\n                            return false; // frag\n                        tb.process(new Token.EndTag(\"select\"));\n                        return tb.process(start);\n                    } else if (name.equals(\"script\")) {\n                        return tb.process(t, InHead);\n                    } else {\n                        return anythingElse(t, tb);\n                    }\n                    break;\n                case EndTag:\n                    Token.EndTag end = t.asEndTag();\n                    name = end.name();\n                    if (name.equals(\"optgroup\")) {\n                        if (tb.currentElement().nodeName().equals(\"option\") && tb.aboveOnStack(tb.currentElement()) != null && tb.aboveOnStack(tb.currentElement()).nodeName().equals(\"optgroup\"))\n                            tb.process(new Token.EndTag(\"option\"));\n                        if (tb.currentElement().nodeName().equals(\"optgroup\"))\n                            tb.pop();\n                        else\n                            tb.error(this);\n                    } else if (name.equals(\"option\")) {\n                        if (tb.currentElement().nodeName().equals(\"option\"))\n                            tb.pop();\n                        else\n                            tb.error(this);\n                    } else if (name.equals(\"select\")) {\n                        if (!tb.inSelectScope(name)) {\n                            tb.error(this);\n                            return false;\n                        } else {\n                            tb.popStackToClose(name);\n                            tb.resetInsertionMode();\n                        }\n                    } else\n                        return anythingElse(t, tb);\n                    break;\n                case EOF:\n                    if (!tb.currentElement().nodeName().equals(\"html\"))\n                        tb.error(this);\n                    break;\n                default:\n                    return anythingElse(t, tb);\n            }",
      "info" : "SwitchStatement[56647-60351]:SwitchStatement[56785-60489]"
    }, {
      "left" : "case Character:",
      "right" : "case Character:",
      "info" : "SwitchCase[56681-56696]:SwitchCase[56819-56834]"
    }, {
      "left" : "Token.Character c = t.asCharacter();",
      "right" : "Token.Character c = t.asCharacter();",
      "info" : "VariableDeclarationStatement[56717-56753]:VariableDeclarationStatement[56855-56891]"
    }, {
      "left" : "if (c.getData().equals(nullString))",
      "right" : "if (c.getData().equals(nullString))",
      "info" : "IfStatement[56774-56978]:IfStatement[56912-57116]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56810-56911]:Block[56948-57049]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[56836-56851]:ExpressionStatement[56974-56989]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[56876-56889]:ReturnStatement[57014-57027]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56917-56978]:Block[57055-57116]"
    }, {
      "left" : "tb.insert(c);",
      "right" : "tb.insert(c);",
      "info" : "ExpressionStatement[56943-56956]:ExpressionStatement[57081-57094]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[56999-57005]:BreakStatement[57137-57143]"
    }, {
      "left" : "case Comment:",
      "right" : "case Comment:",
      "info" : "SwitchCase[57022-57035]:SwitchCase[57160-57173]"
    }, {
      "left" : "tb.insert(t.asComment());",
      "right" : "tb.insert(t.asComment());",
      "info" : "ExpressionStatement[57056-57081]:ExpressionStatement[57194-57219]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[57102-57108]:BreakStatement[57240-57246]"
    }, {
      "left" : "case Doctype:",
      "right" : "case Doctype:",
      "info" : "SwitchCase[57125-57138]:SwitchCase[57263-57276]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[57159-57174]:ExpressionStatement[57297-57312]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[57195-57208]:ReturnStatement[57333-57346]"
    }, {
      "left" : "case StartTag:",
      "right" : "case StartTag:",
      "info" : "SwitchCase[57225-57239]:SwitchCase[57363-57377]"
    }, {
      "left" : "Token.StartTag start = t.asStartTag();",
      "right" : "Token.StartTag start = t.asStartTag();",
      "info" : "VariableDeclarationStatement[57260-57298]:VariableDeclarationStatement[57398-57436]"
    }, {
      "left" : "String name = start.name();",
      "right" : "String name = start.name();",
      "info" : "VariableDeclarationStatement[57319-57346]:VariableDeclarationStatement[57457-57484]"
    }, {
      "left" : "if (name.equals(\"html\"))",
      "right" : "if (name.equals(\"html\"))",
      "info" : "IfStatement[57367-58734]:IfStatement[57505-58872]"
    }, {
      "left" : "return tb.process(start, InBody);",
      "right" : "return tb.process(start, InBody);",
      "info" : "ReturnStatement[57416-57449]:ReturnStatement[57554-57587]"
    }, {
      "left" : "if (name.equals(\"option\"))",
      "right" : "if (name.equals(\"option\"))",
      "info" : "IfStatement[57475-58734]:IfStatement[57613-58872]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57502-57631]:Block[57640-57769]"
    }, {
      "left" : "tb.process(new Token.EndTag(\"option\"));",
      "right" : "tb.process(new Token.EndTag(\"option\"));",
      "info" : "ExpressionStatement[57528-57567]:ExpressionStatement[57666-57705]"
    }, {
      "left" : "tb.insert(start);",
      "right" : "tb.insert(start);",
      "info" : "ExpressionStatement[57592-57609]:ExpressionStatement[57730-57747]"
    }, {
      "left" : "if (name.equals(\"optgroup\"))",
      "right" : "if (name.equals(\"optgroup\"))",
      "info" : "IfStatement[57637-58734]:IfStatement[57775-58872]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57666-58030]:Block[57804-58168]"
    }, {
      "left" : "if (tb.currentElement().nodeName().equals(\"option\"))",
      "right" : "if (tb.currentElement().nodeName().equals(\"option\"))",
      "info" : "IfStatement[57692-57966]:IfStatement[57830-58104]"
    }, {
      "left" : "tb.process(new Token.EndTag(\"option\"));",
      "right" : "tb.process(new Token.EndTag(\"option\"));",
      "info" : "ExpressionStatement[57773-57812]:ExpressionStatement[57911-57950]"
    }, {
      "left" : "if (tb.currentElement().nodeName().equals(\"optgroup\"))",
      "right" : "if (tb.currentElement().nodeName().equals(\"optgroup\"))",
      "info" : "IfStatement[57842-57966]:IfStatement[57980-58104]"
    }, {
      "left" : "tb.process(new Token.EndTag(\"optgroup\"));",
      "right" : "tb.process(new Token.EndTag(\"optgroup\"));",
      "info" : "ExpressionStatement[57925-57966]:ExpressionStatement[58063-58104]"
    }, {
      "left" : "tb.insert(start);",
      "right" : "tb.insert(start);",
      "info" : "ExpressionStatement[57991-58008]:ExpressionStatement[58129-58146]"
    }, {
      "left" : "if (name.equals(\"select\"))",
      "right" : "if (name.equals(\"select\"))",
      "info" : "IfStatement[58036-58734]:IfStatement[58174-58872]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58063-58197]:Block[58201-58335]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[58089-58104]:ExpressionStatement[58227-58242]"
    }, {
      "left" : "return tb.process(new Token.EndTag(\"select\"));",
      "right" : "return tb.process(new Token.EndTag(\"select\"));",
      "info" : "ReturnStatement[58129-58175]:ReturnStatement[58267-58313]"
    }, {
      "left" : "if (StringUtil.in(name, \"input\", \"keygen\", \"textarea\"))",
      "right" : "if (StringUtil.in(name, \"input\", \"keygen\", \"textarea\"))",
      "info" : "IfStatement[58203-58734]:IfStatement[58341-58872]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58259-58543]:Block[58397-58681]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[58285-58300]:ExpressionStatement[58423-58438]"
    }, {
      "left" : "if (!tb.inSelectScope(\"select\"))",
      "right" : "if (!tb.inSelectScope(\"select\"))",
      "info" : "IfStatement[58325-58399]:IfStatement[58463-58537]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[58386-58399]:ReturnStatement[58524-58537]"
    }, {
      "left" : "tb.process(new Token.EndTag(\"select\"));",
      "right" : "tb.process(new Token.EndTag(\"select\"));",
      "info" : "ExpressionStatement[58432-58471]:ExpressionStatement[58570-58609]"
    }, {
      "left" : "return tb.process(start);",
      "right" : "return tb.process(start);",
      "info" : "ReturnStatement[58496-58521]:ReturnStatement[58634-58659]"
    }, {
      "left" : "if (name.equals(\"script\"))",
      "right" : "if (name.equals(\"script\"))",
      "info" : "IfStatement[58549-58734]:IfStatement[58687-58872]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58576-58653]:Block[58714-58791]"
    }, {
      "left" : "return tb.process(t, InHead);",
      "right" : "return tb.process(t, InHead);",
      "info" : "ReturnStatement[58602-58631]:ReturnStatement[58740-58769]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58659-58734]:Block[58797-58872]"
    }, {
      "left" : "return anythingElse(t, tb);",
      "right" : "return anythingElse(t, tb);",
      "info" : "ReturnStatement[58685-58712]:ReturnStatement[58823-58850]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[58755-58761]:BreakStatement[58893-58899]"
    }, {
      "left" : "case EndTag:",
      "right" : "case EndTag:",
      "info" : "SwitchCase[58778-58790]:SwitchCase[58916-58928]"
    }, {
      "left" : "Token.EndTag end = t.asEndTag();",
      "right" : "Token.EndTag end = t.asEndTag();",
      "info" : "VariableDeclarationStatement[58811-58843]:VariableDeclarationStatement[58949-58981]"
    }, {
      "left" : "name = end.name();",
      "right" : "name = end.name();",
      "info" : "ExpressionStatement[58864-58882]:ExpressionStatement[59002-59020]"
    }, {
      "left" : "if (name.equals(\"optgroup\"))",
      "right" : "if (name.equals(\"optgroup\"))",
      "info" : "IfStatement[58903-60072]:IfStatement[59041-60210]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58932-59408]:Block[59070-59546]"
    }, {
      "left" : "if (tb.currentElement().nodeName().equals(\"option\") && tb.aboveOnStack(tb.currentElement()) != null && tb.aboveOnStack(tb.currentElement()).nodeName().equals(\"optgroup\"))",
      "right" : "if (tb.currentElement().nodeName().equals(\"option\") && tb.aboveOnStack(tb.currentElement()) != null && tb.aboveOnStack(tb.currentElement()).nodeName().equals(\"optgroup\"))",
      "info" : "IfStatement[58958-59196]:IfStatement[59096-59334]"
    }, {
      "left" : "tb.process(new Token.EndTag(\"option\"));",
      "right" : "tb.process(new Token.EndTag(\"option\"));",
      "info" : "ExpressionStatement[59157-59196]:ExpressionStatement[59295-59334]"
    }, {
      "left" : "if (tb.currentElement().nodeName().equals(\"optgroup\"))",
      "right" : "if (tb.currentElement().nodeName().equals(\"optgroup\"))",
      "info" : "IfStatement[59221-59386]:IfStatement[59359-59524]"
    }, {
      "left" : "tb.pop();",
      "right" : "tb.pop();",
      "info" : "ExpressionStatement[59304-59313]:ExpressionStatement[59442-59451]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[59371-59386]:ExpressionStatement[59509-59524]"
    }, {
      "left" : "if (name.equals(\"option\"))",
      "right" : "if (name.equals(\"option\"))",
      "info" : "IfStatement[59414-60072]:IfStatement[59552-60210]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[59441-59652]:Block[59579-59790]"
    }, {
      "left" : "if (tb.currentElement().nodeName().equals(\"option\"))",
      "right" : "if (tb.currentElement().nodeName().equals(\"option\"))",
      "info" : "IfStatement[59467-59630]:IfStatement[59605-59768]"
    }, {
      "left" : "tb.pop();",
      "right" : "tb.pop();",
      "info" : "ExpressionStatement[59548-59557]:ExpressionStatement[59686-59695]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[59615-59630]:ExpressionStatement[59753-59768]"
    }, {
      "left" : "if (name.equals(\"select\"))",
      "right" : "if (name.equals(\"select\"))",
      "info" : "IfStatement[59658-60072]:IfStatement[59796-60210]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[59685-60015]:Block[59823-60153]"
    }, {
      "left" : "if (!tb.inSelectScope(name))",
      "right" : "if (!tb.inSelectScope(name))",
      "info" : "IfStatement[59711-59993]:IfStatement[59849-60131]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[59740-59853]:Block[59878-59991]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[59770-59785]:ExpressionStatement[59908-59923]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[59814-59827]:ReturnStatement[59952-59965]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[59859-59993]:Block[59997-60131]"
    }, {
      "left" : "tb.popStackToClose(name);",
      "right" : "tb.popStackToClose(name);",
      "info" : "ExpressionStatement[59889-59914]:ExpressionStatement[60027-60052]"
    }, {
      "left" : "tb.resetInsertionMode();",
      "right" : "tb.resetInsertionMode();",
      "info" : "ExpressionStatement[59943-59967]:ExpressionStatement[60081-60105]"
    }, {
      "left" : "return anythingElse(t, tb);",
      "right" : "return anythingElse(t, tb);",
      "info" : "ReturnStatement[60045-60072]:ReturnStatement[60183-60210]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[60093-60099]:BreakStatement[60231-60237]"
    }, {
      "left" : "case EOF:",
      "right" : "case EOF:",
      "info" : "SwitchCase[60116-60125]:SwitchCase[60254-60263]"
    }, {
      "left" : "if (!tb.currentElement().nodeName().equals(\"html\"))",
      "right" : "if (!tb.currentElement().nodeName().equals(\"html\"))",
      "info" : "IfStatement[60146-60237]:IfStatement[60284-60375]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[60222-60237]:ExpressionStatement[60360-60375]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[60258-60264]:BreakStatement[60396-60402]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[60281-60289]:SwitchCase[60419-60427]"
    }, {
      "left" : "return anythingElse(t, tb);",
      "right" : "return anythingElse(t, tb);",
      "info" : "ReturnStatement[60310-60337]:ReturnStatement[60448-60475]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[60364-60376]:ReturnStatement[60502-60514]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60454-60519]:Block[60592-60657]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[60468-60483]:ExpressionStatement[60606-60621]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[60496-60509]:ReturnStatement[60634-60647]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60602-61356]:Block[60740-61494]"
    }, {
      "left" : "if (t.isStartTag() && StringUtil.in(t.asStartTag().name(), \"caption\", \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\", \"td\", \"th\"))",
      "right" : "if (t.isStartTag() && StringUtil.in(t.asStartTag().name(), \"caption\", \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\", \"td\", \"th\"))",
      "info" : "IfStatement[60616-61346]:IfStatement[60754-61484]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60741-60882]:Block[60879-61020]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[60759-60774]:ExpressionStatement[60897-60912]"
    }, {
      "left" : "tb.process(new Token.EndTag(\"select\"));",
      "right" : "tb.process(new Token.EndTag(\"select\"));",
      "info" : "ExpressionStatement[60791-60830]:ExpressionStatement[60929-60968]"
    }, {
      "left" : "return tb.process(t);",
      "right" : "return tb.process(t);",
      "info" : "ReturnStatement[60847-60868]:ReturnStatement[60985-61006]"
    }, {
      "left" : "if (t.isEndTag() && StringUtil.in(t.asEndTag().name(), \"caption\", \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\", \"td\", \"th\"))",
      "right" : "if (t.isEndTag() && StringUtil.in(t.asEndTag().name(), \"caption\", \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\", \"td\", \"th\"))",
      "info" : "IfStatement[60888-61346]:IfStatement[61026-61484]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61009-61277]:Block[61147-61415]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[61027-61042]:ExpressionStatement[61165-61180]"
    }, {
      "left" : "if (tb.inTableScope(t.asEndTag().name()))",
      "right" : "if (tb.inTableScope(t.asEndTag().name()))",
      "info" : "IfStatement[61059-61263]:IfStatement[61197-61401]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61101-61224]:Block[61239-61362]"
    }, {
      "left" : "tb.process(new Token.EndTag(\"select\"));",
      "right" : "tb.process(new Token.EndTag(\"select\"));",
      "info" : "ExpressionStatement[61123-61162]:ExpressionStatement[61261-61300]"
    }, {
      "left" : "return (tb.process(t));",
      "right" : "return (tb.process(t));",
      "info" : "ReturnStatement[61183-61206]:ReturnStatement[61321-61344]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[61250-61263]:ReturnStatement[61388-61401]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61283-61346]:Block[61421-61484]"
    }, {
      "left" : "return tb.process(t, InSelect);",
      "right" : "return tb.process(t, InSelect);",
      "info" : "ReturnStatement[61301-61332]:ReturnStatement[61439-61470]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61433-62385]:Block[61571-62523]"
    }, {
      "left" : "if (isWhitespace(t))",
      "right" : "if (isWhitespace(t))",
      "info" : "IfStatement[61447-62350]:IfStatement[61585-62488]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61468-61529]:Block[61606-61667]"
    }, {
      "left" : "return tb.process(t, InBody);",
      "right" : "return tb.process(t, InBody);",
      "info" : "ReturnStatement[61486-61515]:ReturnStatement[61624-61653]"
    }, {
      "left" : "if (t.isComment())",
      "right" : "if (t.isComment())",
      "info" : "IfStatement[61535-62350]:IfStatement[61673-62488]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61554-61629]:Block[61692-61767]"
    }, {
      "left" : "tb.insert(t.asComment());",
      "right" : "tb.insert(t.asComment());",
      "info" : "ExpressionStatement[61572-61597]:ExpressionStatement[61710-61735]"
    }, {
      "left" : "if (t.isDoctype())",
      "right" : "if (t.isDoctype())",
      "info" : "IfStatement[61635-62350]:IfStatement[61773-62488]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61654-61731]:Block[61792-61869]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[61672-61687]:ExpressionStatement[61810-61825]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[61704-61717]:ReturnStatement[61842-61855]"
    }, {
      "left" : "if (t.isStartTag() && t.asStartTag().name().equals(\"html\"))",
      "right" : "if (t.isStartTag() && t.asStartTag().name().equals(\"html\"))",
      "info" : "IfStatement[61737-62350]:IfStatement[61875-62488]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61797-61858]:Block[61935-61996]"
    }, {
      "left" : "return tb.process(t, InBody);",
      "right" : "return tb.process(t, InBody);",
      "info" : "ReturnStatement[61815-61844]:ReturnStatement[61953-61982]"
    }, {
      "left" : "if (t.isEndTag() && t.asEndTag().name().equals(\"html\"))",
      "right" : "if (t.isEndTag() && t.asEndTag().name().equals(\"html\"))",
      "info" : "IfStatement[61864-62350]:IfStatement[62002-62488]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61920-62145]:Block[62058-62283]"
    }, {
      "left" : "if (tb.isFragmentParsing())",
      "right" : "if (tb.isFragmentParsing())",
      "info" : "IfStatement[61938-62131]:IfStatement[62076-62269]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61966-62055]:Block[62104-62193]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[61988-62003]:ExpressionStatement[62126-62141]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[62024-62037]:ReturnStatement[62162-62175]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62061-62131]:Block[62199-62269]"
    }, {
      "left" : "tb.transition(AfterAfterBody);",
      "right" : "tb.transition(AfterAfterBody);",
      "info" : "ExpressionStatement[62083-62113]:ExpressionStatement[62221-62251]"
    }, {
      "left" : "if (t.isEOF())",
      "right" : "if (t.isEOF())",
      "info" : "IfStatement[62151-62350]:IfStatement[62289-62488]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62166-62220]:Block[62304-62358]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62226-62350]:Block[62364-62488]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[62244-62259]:ExpressionStatement[62382-62397]"
    }, {
      "left" : "tb.transition(InBody);",
      "right" : "tb.transition(InBody);",
      "info" : "ExpressionStatement[62276-62298]:ExpressionStatement[62414-62436]"
    }, {
      "left" : "return tb.process(t);",
      "right" : "return tb.process(t);",
      "info" : "ReturnStatement[62315-62336]:ReturnStatement[62453-62474]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[62363-62375]:ReturnStatement[62501-62513]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62463-64178]:Block[62601-64316]"
    }, {
      "left" : "if (isWhitespace(t))",
      "right" : "if (isWhitespace(t))",
      "info" : "IfStatement[62477-64143]:IfStatement[62615-64281]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62498-62557]:Block[62636-62695]"
    }, {
      "left" : "tb.insert(t.asCharacter());",
      "right" : "tb.insert(t.asCharacter());",
      "info" : "ExpressionStatement[62516-62543]:ExpressionStatement[62654-62681]"
    }, {
      "left" : "if (t.isComment())",
      "right" : "if (t.isComment())",
      "info" : "IfStatement[62563-64143]:IfStatement[62701-64281]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62582-62639]:Block[62720-62777]"
    }, {
      "left" : "tb.insert(t.asComment());",
      "right" : "tb.insert(t.asComment());",
      "info" : "ExpressionStatement[62600-62625]:ExpressionStatement[62738-62763]"
    }, {
      "left" : "if (t.isDoctype())",
      "right" : "if (t.isDoctype())",
      "info" : "IfStatement[62645-64143]:IfStatement[62783-64281]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62664-62741]:Block[62802-62879]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[62682-62697]:ExpressionStatement[62820-62835]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[62714-62727]:ReturnStatement[62852-62865]"
    }, {
      "left" : "if (t.isStartTag())",
      "right" : "if (t.isStartTag())",
      "info" : "IfStatement[62747-64143]:IfStatement[62885-64281]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62767-63385]:Block[62905-63523]"
    }, {
      "left" : "Token.StartTag start = t.asStartTag();",
      "right" : "Token.StartTag start = t.asStartTag();",
      "info" : "VariableDeclarationStatement[62785-62823]:VariableDeclarationStatement[62923-62961]"
    }, {
      "left" : "String name = start.name();",
      "right" : "String name = start.name();",
      "info" : "VariableDeclarationStatement[62840-62867]:VariableDeclarationStatement[62978-63005]"
    }, {
      "left" : "if (name.equals(\"html\"))",
      "right" : "if (name.equals(\"html\"))",
      "info" : "IfStatement[62884-63371]:IfStatement[63022-63509]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62909-62982]:Block[63047-63120]"
    }, {
      "left" : "return tb.process(start, InBody);",
      "right" : "return tb.process(start, InBody);",
      "info" : "ReturnStatement[62931-62964]:ReturnStatement[63069-63102]"
    }, {
      "left" : "if (name.equals(\"frameset\"))",
      "right" : "if (name.equals(\"frameset\"))",
      "info" : "IfStatement[62988-63371]:IfStatement[63126-63509]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63017-63074]:Block[63155-63212]"
    }, {
      "left" : "tb.insert(start);",
      "right" : "tb.insert(start);",
      "info" : "ExpressionStatement[63039-63056]:ExpressionStatement[63177-63194]"
    }, {
      "left" : "if (name.equals(\"frame\"))",
      "right" : "if (name.equals(\"frame\"))",
      "info" : "IfStatement[63080-63371]:IfStatement[63218-63509]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63106-63168]:Block[63244-63306]"
    }, {
      "left" : "tb.insertEmpty(start);",
      "right" : "tb.insertEmpty(start);",
      "info" : "ExpressionStatement[63128-63150]:ExpressionStatement[63266-63288]"
    }, {
      "left" : "if (name.equals(\"noframes\"))",
      "right" : "if (name.equals(\"noframes\"))",
      "info" : "IfStatement[63174-63371]:IfStatement[63312-63509]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63203-63276]:Block[63341-63414]"
    }, {
      "left" : "return tb.process(start, InHead);",
      "right" : "return tb.process(start, InHead);",
      "info" : "ReturnStatement[63225-63258]:ReturnStatement[63363-63396]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63282-63371]:Block[63420-63509]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[63304-63319]:ExpressionStatement[63442-63457]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[63340-63353]:ReturnStatement[63478-63491]"
    }, {
      "left" : "if (t.isEndTag() && t.asEndTag().name().equals(\"frameset\"))",
      "right" : "if (t.isEndTag() && t.asEndTag().name().equals(\"frameset\"))",
      "info" : "IfStatement[63391-64143]:IfStatement[63529-64281]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63451-63867]:Block[63589-64005]"
    }, {
      "left" : "if (tb.currentElement().nodeName().equals(\"html\"))",
      "right" : "if (tb.currentElement().nodeName().equals(\"html\"))",
      "info" : "IfStatement[63469-63853]:IfStatement[63607-63991]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63520-63617]:Block[63658-63755]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[63550-63565]:ExpressionStatement[63688-63703]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[63586-63599]:ReturnStatement[63724-63737]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63623-63853]:Block[63761-63991]"
    }, {
      "left" : "tb.pop();",
      "right" : "tb.pop();",
      "info" : "ExpressionStatement[63645-63654]:ExpressionStatement[63783-63792]"
    }, {
      "left" : "if (!tb.isFragmentParsing() && !tb.currentElement().nodeName().equals(\"frameset\"))",
      "right" : "if (!tb.isFragmentParsing() && !tb.currentElement().nodeName().equals(\"frameset\"))",
      "info" : "IfStatement[63675-63835]:IfStatement[63813-63973]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63758-63835]:Block[63896-63973]"
    }, {
      "left" : "tb.transition(AfterFrameset);",
      "right" : "tb.transition(AfterFrameset);",
      "info" : "ExpressionStatement[63784-63813]:ExpressionStatement[63922-63951]"
    }, {
      "left" : "if (t.isEOF())",
      "right" : "if (t.isEOF())",
      "info" : "IfStatement[63873-64143]:IfStatement[64011-64281]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63888-64060]:Block[64026-64198]"
    }, {
      "left" : "if (!tb.currentElement().nodeName().equals(\"html\"))",
      "right" : "if (!tb.currentElement().nodeName().equals(\"html\"))",
      "info" : "IfStatement[63906-64046]:IfStatement[64044-64184]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63958-64046]:Block[64096-64184]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[63980-63995]:ExpressionStatement[64118-64133]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[64016-64028]:ReturnStatement[64154-64166]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64066-64143]:Block[64204-64281]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[64084-64099]:ExpressionStatement[64222-64237]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[64116-64129]:ReturnStatement[64254-64267]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[64156-64168]:ReturnStatement[64294-64306]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64259-65128]:Block[64397-65266]"
    }, {
      "left" : "if (isWhitespace(t))",
      "right" : "if (isWhitespace(t))",
      "info" : "IfStatement[64273-65093]:IfStatement[64411-65231]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64294-64353]:Block[64432-64491]"
    }, {
      "left" : "tb.insert(t.asCharacter());",
      "right" : "tb.insert(t.asCharacter());",
      "info" : "ExpressionStatement[64312-64339]:ExpressionStatement[64450-64477]"
    }, {
      "left" : "if (t.isComment())",
      "right" : "if (t.isComment())",
      "info" : "IfStatement[64359-65093]:IfStatement[64497-65231]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64378-64435]:Block[64516-64573]"
    }, {
      "left" : "tb.insert(t.asComment());",
      "right" : "tb.insert(t.asComment());",
      "info" : "ExpressionStatement[64396-64421]:ExpressionStatement[64534-64559]"
    }, {
      "left" : "if (t.isDoctype())",
      "right" : "if (t.isDoctype())",
      "info" : "IfStatement[64441-65093]:IfStatement[64579-65231]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64460-64537]:Block[64598-64675]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[64478-64493]:ExpressionStatement[64616-64631]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[64510-64523]:ReturnStatement[64648-64661]"
    }, {
      "left" : "if (t.isStartTag() && t.asStartTag().name().equals(\"html\"))",
      "right" : "if (t.isStartTag() && t.asStartTag().name().equals(\"html\"))",
      "info" : "IfStatement[64543-65093]:IfStatement[64681-65231]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64603-64664]:Block[64741-64802]"
    }, {
      "left" : "return tb.process(t, InBody);",
      "right" : "return tb.process(t, InBody);",
      "info" : "ReturnStatement[64621-64650]:ReturnStatement[64759-64788]"
    }, {
      "left" : "if (t.isEndTag() && t.asEndTag().name().equals(\"html\"))",
      "right" : "if (t.isEndTag() && t.asEndTag().name().equals(\"html\"))",
      "info" : "IfStatement[64670-65093]:IfStatement[64808-65231]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64726-64792]:Block[64864-64930]"
    }, {
      "left" : "tb.transition(AfterAfterFrameset);",
      "right" : "tb.transition(AfterAfterFrameset);",
      "info" : "ExpressionStatement[64744-64778]:ExpressionStatement[64882-64916]"
    }, {
      "left" : "if (t.isStartTag() && t.asStartTag().name().equals(\"noframes\"))",
      "right" : "if (t.isStartTag() && t.asStartTag().name().equals(\"noframes\"))",
      "info" : "IfStatement[64798-65093]:IfStatement[64936-65231]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64862-64923]:Block[65000-65061]"
    }, {
      "left" : "return tb.process(t, InHead);",
      "right" : "return tb.process(t, InHead);",
      "info" : "ReturnStatement[64880-64909]:ReturnStatement[65018-65047]"
    }, {
      "left" : "if (t.isEOF())",
      "right" : "if (t.isEOF())",
      "info" : "IfStatement[64929-65093]:IfStatement[65067-65231]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64944-65010]:Block[65082-65148]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65016-65093]:Block[65154-65231]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[65034-65049]:ExpressionStatement[65172-65187]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[65066-65079]:ReturnStatement[65204-65217]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[65106-65118]:ReturnStatement[65244-65256]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65210-65701]:Block[65348-65839]"
    }, {
      "left" : "if (t.isComment())",
      "right" : "if (t.isComment())",
      "info" : "IfStatement[65224-65666]:IfStatement[65362-65804]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65243-65300]:Block[65381-65438]"
    }, {
      "left" : "tb.insert(t.asComment());",
      "right" : "tb.insert(t.asComment());",
      "info" : "ExpressionStatement[65261-65286]:ExpressionStatement[65399-65424]"
    }, {
      "left" : "if (t.isDoctype() || isWhitespace(t) || (t.isStartTag() && t.asStartTag().name().equals(\"html\")))",
      "right" : "if (t.isDoctype() || isWhitespace(t) || (t.isStartTag() && t.asStartTag().name().equals(\"html\")))",
      "info" : "IfStatement[65306-65666]:IfStatement[65444-65804]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65404-65465]:Block[65542-65603]"
    }, {
      "left" : "return tb.process(t, InBody);",
      "right" : "return tb.process(t, InBody);",
      "info" : "ReturnStatement[65422-65451]:ReturnStatement[65560-65589]"
    }, {
      "left" : "if (t.isEOF())",
      "right" : "if (t.isEOF())",
      "info" : "IfStatement[65471-65666]:IfStatement[65609-65804]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65486-65536]:Block[65624-65674]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65542-65666]:Block[65680-65804]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[65560-65575]:ExpressionStatement[65698-65713]"
    }, {
      "left" : "tb.transition(InBody);",
      "right" : "tb.transition(InBody);",
      "info" : "ExpressionStatement[65592-65614]:ExpressionStatement[65730-65752]"
    }, {
      "left" : "return tb.process(t);",
      "right" : "return tb.process(t);",
      "info" : "ReturnStatement[65631-65652]:ReturnStatement[65769-65790]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[65679-65691]:ReturnStatement[65817-65829]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65787-66362]:Block[65925-66500]"
    }, {
      "left" : "if (t.isComment())",
      "right" : "if (t.isComment())",
      "info" : "IfStatement[65801-66327]:IfStatement[65939-66465]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65820-65877]:Block[65958-66015]"
    }, {
      "left" : "tb.insert(t.asComment());",
      "right" : "tb.insert(t.asComment());",
      "info" : "ExpressionStatement[65838-65863]:ExpressionStatement[65976-66001]"
    }, {
      "left" : "if (t.isDoctype() || isWhitespace(t) || (t.isStartTag() && t.asStartTag().name().equals(\"html\")))",
      "right" : "if (t.isDoctype() || isWhitespace(t) || (t.isStartTag() && t.asStartTag().name().equals(\"html\")))",
      "info" : "IfStatement[65883-66327]:IfStatement[66021-66465]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65981-66042]:Block[66119-66180]"
    }, {
      "left" : "return tb.process(t, InBody);",
      "right" : "return tb.process(t, InBody);",
      "info" : "ReturnStatement[65999-66028]:ReturnStatement[66137-66166]"
    }, {
      "left" : "if (t.isEOF())",
      "right" : "if (t.isEOF())",
      "info" : "IfStatement[66048-66327]:IfStatement[66186-66465]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66063-66113]:Block[66201-66251]"
    }, {
      "left" : "if (t.isStartTag() && t.asStartTag().name().equals(\"noframes\"))",
      "right" : "if (t.isStartTag() && t.asStartTag().name().equals(\"noframes\"))",
      "info" : "IfStatement[66119-66327]:IfStatement[66257-66465]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66183-66244]:Block[66321-66382]"
    }, {
      "left" : "return tb.process(t, InHead);",
      "right" : "return tb.process(t, InHead);",
      "info" : "ReturnStatement[66201-66230]:ReturnStatement[66339-66368]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66250-66327]:Block[66388-66465]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[66268-66283]:ExpressionStatement[66406-66421]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[66300-66313]:ReturnStatement[66438-66451]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[66340-66352]:ReturnStatement[66478-66490]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66444-66538]:Block[66582-66676]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[66458-66470]:ReturnStatement[66596-66608]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66722-67140]:Block[66860-67278]"
    }, {
      "left" : "if (t.isCharacter())",
      "right" : "if (t.isCharacter())",
      "info" : "IfStatement[66732-67112]:IfStatement[66870-67250]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66753-67112]:Block[66891-67250]"
    }, {
      "left" : "String data = t.asCharacter().getData();",
      "right" : "String data = t.asCharacter().getData();",
      "info" : "VariableDeclarationStatement[66767-66807]:VariableDeclarationStatement[66905-66945]"
    }, {
      "left" : "for (int i = 0; i < data.length(); i++)",
      "right" : "for (int i = 0; i < data.length(); i++)",
      "info" : "ForStatement[66898-67077]:ForStatement[67036-67215]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66938-67077]:Block[67076-67215]"
    }, {
      "left" : "char c = data.charAt(i);",
      "right" : "char c = data.charAt(i);",
      "info" : "VariableDeclarationStatement[66956-66980]:VariableDeclarationStatement[67094-67118]"
    }, {
      "left" : "if (!StringUtil.isWhitespace(c))",
      "right" : "if (!StringUtil.isWhitespace(c))",
      "info" : "IfStatement[66997-67063]:IfStatement[67135-67201]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[67050-67063]:ReturnStatement[67188-67201]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[67090-67102]:ReturnStatement[67228-67240]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[67121-67134]:ReturnStatement[67259-67272]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67224-67377]:Block[67362-67515]"
    }, {
      "left" : "tb.insert(startTag);",
      "right" : "tb.insert(startTag);",
      "info" : "ExpressionStatement[67234-67254]:ExpressionStatement[67372-67392]"
    }, {
      "left" : "tb.tokeniser.transition(TokeniserState.Rcdata);",
      "right" : "tb.tokeniser.transition(TokeniserState.Rcdata);",
      "info" : "ExpressionStatement[67263-67310]:ExpressionStatement[67401-67448]"
    }, {
      "left" : "tb.markInsertionMode();",
      "right" : "tb.markInsertionMode();",
      "info" : "ExpressionStatement[67319-67342]:ExpressionStatement[67457-67480]"
    }, {
      "left" : "tb.transition(Text);",
      "right" : "tb.transition(Text);",
      "info" : "ExpressionStatement[67351-67371]:ExpressionStatement[67489-67509]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67462-67616]:Block[67600-67754]"
    }, {
      "left" : "tb.insert(startTag);",
      "right" : "tb.insert(startTag);",
      "info" : "ExpressionStatement[67472-67492]:ExpressionStatement[67610-67630]"
    }, {
      "left" : "tb.tokeniser.transition(TokeniserState.Rawtext);",
      "right" : "tb.tokeniser.transition(TokeniserState.Rawtext);",
      "info" : "ExpressionStatement[67501-67549]:ExpressionStatement[67639-67687]"
    }, {
      "left" : "tb.markInsertionMode();",
      "right" : "tb.markInsertionMode();",
      "info" : "ExpressionStatement[67558-67581]:ExpressionStatement[67696-67719]"
    }, {
      "left" : "tb.transition(Text);",
      "right" : "tb.transition(Text);",
      "info" : "ExpressionStatement[67590-67610]:ExpressionStatement[67728-67748]"
    } ]
  },
  "interFileMappings" : { }
}