{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "DataUtil",
      "right" : "DataUtil",
      "info" : "TypeDeclaration[347-8125]:TypeDeclaration[347-8149]"
    }, {
      "left" : "private static final Pattern charsetPattern = Pattern.compile(\"(?i)\\\\bcharset=\\\\s*(?:\\\"|')?([^\\\\s,;\\\"']*)\");",
      "right" : "private static final Pattern charsetPattern = Pattern.compile(\"(?i)\\\\bcharset=\\\\s*(?:\\\"|')?([^\\\\s,;\\\"']*)\");",
      "info" : "FieldDeclaration[434-542]:FieldDeclaration[434-542]"
    }, {
      "left" : "static final String defaultCharset = \"UTF-8\";",
      "right" : "static final String defaultCharset = \"UTF-8\";",
      "info" : "FieldDeclaration[547-592]:FieldDeclaration[547-592]"
    }, {
      "left" : "private static final int bufferSize = 0x20000;",
      "right" : "private static final int bufferSize = 0x20000;",
      "info" : "FieldDeclaration[644-690]:FieldDeclaration[644-690]"
    }, {
      "left" : "private DataUtil()",
      "right" : "private DataUtil()",
      "info" : "MethodDeclaration[706-727]:MethodDeclaration[706-727]"
    }, {
      "left" : "public static Document load(File in, String charsetName, String baseUri) throws IOException",
      "right" : "public static Document load(File in, String charsetName, String baseUri) throws IOException",
      "info" : "MethodDeclaration[733-1453]:MethodDeclaration[733-1453]"
    }, {
      "left" : "public static Document load(InputStream in, String charsetName, String baseUri) throws IOException",
      "right" : "public static Document load(InputStream in, String charsetName, String baseUri) throws IOException",
      "info" : "MethodDeclaration[1459-2019]:MethodDeclaration[1459-2019]"
    }, {
      "left" : "public static Document load(InputStream in, String charsetName, String baseUri, Parser parser) throws IOException",
      "right" : "public static Document load(InputStream in, String charsetName, String baseUri, Parser parser) throws IOException",
      "info" : "MethodDeclaration[2025-2687]:MethodDeclaration[2025-2687]"
    }, {
      "left" : "static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser)",
      "right" : "static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser)",
      "info" : "MethodDeclaration[2944-5681]:MethodDeclaration[2944-5705]"
    }, {
      "left" : "static ByteBuffer readToByteBuffer(InputStream inStream, int maxSize) throws IOException",
      "right" : "static ByteBuffer readToByteBuffer(InputStream inStream, int maxSize) throws IOException",
      "info" : "MethodDeclaration[5687-6903]:MethodDeclaration[5711-6927]"
    }, {
      "left" : "static ByteBuffer readToByteBuffer(InputStream inStream) throws IOException",
      "right" : "static ByteBuffer readToByteBuffer(InputStream inStream) throws IOException",
      "info" : "MethodDeclaration[6909-7038]:MethodDeclaration[6933-7062]"
    }, {
      "left" : "static String getCharsetFromContentType(String contentType)",
      "right" : "static String getCharsetFromContentType(String contentType)",
      "info" : "MethodDeclaration[7044-8113]:MethodDeclaration[7068-8137]"
    } ],
    "mappings" : [
 {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[406-412]:Modifier[406-412]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[413-418]:TYPE_DECLARATION_KIND[413-418]"
    }, {
      "left" : "DataUtil",
      "right" : "DataUtil",
      "info" : "SimpleName[419-427]:SimpleName[419-427]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[706-713]:Modifier[706-713]"
    }, {
      "left" : "DataUtil",
      "right" : "DataUtil",
      "info" : "SimpleName[714-722]:SimpleName[714-722]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[725-727]:Block[725-727]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[1004-1010]:Modifier[1004-1010]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[1011-1017]:Modifier[1011-1017]"
    }, {
      "left" : "Document",
      "right" : "Document",
      "info" : "SimpleType[1018-1026]:SimpleType[1018-1026]"
    }, {
      "left" : "load",
      "right" : "load",
      "info" : "SimpleName[1027-1031]:SimpleName[1027-1031]"
    }, {
      "left" : "File in",
      "right" : "File in",
      "info" : "SingleVariableDeclaration[1032-1039]:SingleVariableDeclaration[1032-1039]"
    }, {
      "left" : "String charsetName",
      "right" : "String charsetName",
      "info" : "SingleVariableDeclaration[1041-1059]:SingleVariableDeclaration[1041-1059]"
    }, {
      "left" : "String baseUri",
      "right" : "String baseUri",
      "info" : "SingleVariableDeclaration[1061-1075]:SingleVariableDeclaration[1061-1075]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[1084-1095]:SimpleType[1084-1095]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1096-1453]:Block[1096-1453]"
    }, {
      "left" : "FileInputStream inStream = null;",
      "right" : "FileInputStream inStream = null;",
      "info" : "VariableDeclarationStatement[1106-1138]:VariableDeclarationStatement[1106-1138]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[1147-1447]:TryStatement[1147-1447]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1151-1359]:Block[1151-1359]"
    }, {
      "left" : "inStream = new FileInputStream(in);",
      "right" : "inStream = new FileInputStream(in);",
      "info" : "ExpressionStatement[1165-1200]:ExpressionStatement[1165-1200]"
    }, {
      "left" : "ByteBuffer byteData = readToByteBuffer(inStream);",
      "right" : "ByteBuffer byteData = readToByteBuffer(inStream);",
      "info" : "VariableDeclarationStatement[1213-1262]:VariableDeclarationStatement[1213-1262]"
    }, {
      "left" : "return parseByteData(byteData, charsetName, baseUri, Parser.htmlParser());",
      "right" : "return parseByteData(byteData, charsetName, baseUri, Parser.htmlParser());",
      "info" : "ReturnStatement[1275-1349]:ReturnStatement[1275-1349]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1368-1447]:Block[1368-1447]"
    }, {
      "left" : "if (inStream != null)",
      "right" : "if (inStream != null)",
      "info" : "IfStatement[1382-1437]:IfStatement[1382-1437]"
    }, {
      "left" : "inStream.close();",
      "right" : "inStream.close();",
      "info" : "ExpressionStatement[1420-1437]:ExpressionStatement[1420-1437]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[1778-1784]:Modifier[1778-1784]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[1785-1791]:Modifier[1785-1791]"
    }, {
      "left" : "Document",
      "right" : "Document",
      "info" : "SimpleType[1792-1800]:SimpleType[1792-1800]"
    }, {
      "left" : "load",
      "right" : "load",
      "info" : "SimpleName[1801-1805]:SimpleName[1801-1805]"
    }, {
      "left" : "InputStream in",
      "right" : "InputStream in",
      "info" : "SingleVariableDeclaration[1806-1820]:SingleVariableDeclaration[1806-1820]"
    }, {
      "left" : "String charsetName",
      "right" : "String charsetName",
      "info" : "SingleVariableDeclaration[1822-1840]:SingleVariableDeclaration[1822-1840]"
    }, {
      "left" : "String baseUri",
      "right" : "String baseUri",
      "info" : "SingleVariableDeclaration[1842-1856]:SingleVariableDeclaration[1842-1856]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[1865-1876]:SimpleType[1865-1876]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1877-2019]:Block[1877-2019]"
    }, {
      "left" : "ByteBuffer byteData = readToByteBuffer(in);",
      "right" : "ByteBuffer byteData = readToByteBuffer(in);",
      "info" : "VariableDeclarationStatement[1887-1930]:VariableDeclarationStatement[1887-1930]"
    }, {
      "left" : "return parseByteData(byteData, charsetName, baseUri, Parser.htmlParser());",
      "right" : "return parseByteData(byteData, charsetName, baseUri, Parser.htmlParser());",
      "info" : "ReturnStatement[1939-2013]:ReturnStatement[1939-2013]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[2444-2450]:Modifier[2444-2450]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[2451-2457]:Modifier[2451-2457]"
    }, {
      "left" : "Document",
      "right" : "Document",
      "info" : "SimpleType[2458-2466]:SimpleType[2458-2466]"
    }, {
      "left" : "load",
      "right" : "load",
      "info" : "SimpleName[2467-2471]:SimpleName[2467-2471]"
    }, {
      "left" : "InputStream in",
      "right" : "InputStream in",
      "info" : "SingleVariableDeclaration[2472-2486]:SingleVariableDeclaration[2472-2486]"
    }, {
      "left" : "String charsetName",
      "right" : "String charsetName",
      "info" : "SingleVariableDeclaration[2488-2506]:SingleVariableDeclaration[2488-2506]"
    }, {
      "left" : "String baseUri",
      "right" : "String baseUri",
      "info" : "SingleVariableDeclaration[2508-2522]:SingleVariableDeclaration[2508-2522]"
    }, {
      "left" : "Parser parser",
      "right" : "Parser parser",
      "info" : "SingleVariableDeclaration[2524-2537]:SingleVariableDeclaration[2524-2537]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[2546-2557]:SimpleType[2546-2557]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2558-2687]:Block[2558-2687]"
    }, {
      "left" : "ByteBuffer byteData = readToByteBuffer(in);",
      "right" : "ByteBuffer byteData = readToByteBuffer(in);",
      "info" : "VariableDeclarationStatement[2568-2611]:VariableDeclarationStatement[2568-2611]"
    }, {
      "left" : "return parseByteData(byteData, charsetName, baseUri, parser);",
      "right" : "return parseByteData(byteData, charsetName, baseUri, parser);",
      "info" : "ReturnStatement[2620-2681]:ReturnStatement[2620-2681]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[2944-2950]:Modifier[2944-2950]"
    }, {
      "left" : "Document",
      "right" : "Document",
      "info" : "SimpleType[2951-2959]:SimpleType[2951-2959]"
    }, {
      "left" : "parseByteData",
      "right" : "parseByteData",
      "info" : "SimpleName[2960-2973]:SimpleName[2960-2973]"
    }, {
      "left" : "ByteBuffer byteData",
      "right" : "ByteBuffer byteData",
      "info" : "SingleVariableDeclaration[2974-2993]:SingleVariableDeclaration[2974-2993]"
    }, {
      "left" : "String charsetName",
      "right" : "String charsetName",
      "info" : "SingleVariableDeclaration[2995-3013]:SingleVariableDeclaration[2995-3013]"
    }, {
      "left" : "String baseUri",
      "right" : "String baseUri",
      "info" : "SingleVariableDeclaration[3015-3029]:SingleVariableDeclaration[3015-3029]"
    }, {
      "left" : "Parser parser",
      "right" : "Parser parser",
      "info" : "SingleVariableDeclaration[3031-3044]:SingleVariableDeclaration[3031-3044]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3046-5681]:Block[3046-5705]"
    }, {
      "left" : "String docData;",
      "right" : "String docData;",
      "info" : "VariableDeclarationStatement[3056-3071]:VariableDeclarationStatement[3056-3071]"
    }, {
      "left" : "Document doc = null;",
      "right" : "Document doc = null;",
      "info" : "VariableDeclarationStatement[3080-3100]:VariableDeclarationStatement[3080-3100]"
    }, {
      "left" : "if (charsetName == null)",
      "right" : "if (charsetName == null)",
      "info" : "IfStatement[3109-5104]:IfStatement[3109-5104]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3134-4799]:Block[3134-4799]"
    }, {
      "left" : "docData = Charset.forName(defaultCharset).decode(byteData).toString();",
      "right" : "docData = Charset.forName(defaultCharset).decode(byteData).toString();",
      "info" : "ExpressionStatement[3317-3387]:ExpressionStatement[3317-3387]"
    }, {
      "left" : "doc = parser.parseInput(docData, baseUri);",
      "right" : "doc = parser.parseInput(docData, baseUri);",
      "info" : "ExpressionStatement[3400-3442]:ExpressionStatement[3400-3442]"
    }, {
      "left" : "Element meta = doc.select(\"meta[http-equiv=content-type], meta[charset]\").first();",
      "right" : "Element meta = doc.select(\"meta[http-equiv=content-type], meta[charset]\").first();",
      "info" : "VariableDeclarationStatement[3455-3537]:VariableDeclarationStatement[3455-3537]"
    }, {
      "left" : "if (meta != null)",
      "right" : "if (meta != null)",
      "info" : "IfStatement[3550-4789]:IfStatement[3550-4789]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3568-4789]:Block[3568-4789]"
    }, {
      "left" : "String foundCharset;",
      "right" : "String foundCharset;",
      "info" : "VariableDeclarationStatement[3635-3655]:VariableDeclarationStatement[3635-3655]"
    }, {
      "left" : "if (meta.hasAttr(\"http-equiv\"))",
      "right" : "if (meta.hasAttr(\"http-equiv\"))",
      "info" : "IfStatement[3672-4333]:IfStatement[3672-4333]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3704-4251]:Block[3704-4251]"
    }, {
      "left" : "foundCharset = getCharsetFromContentType(meta.attr(\"content\"));",
      "right" : "foundCharset = getCharsetFromContentType(meta.attr(\"content\"));",
      "info" : "ExpressionStatement[3726-3789]:ExpressionStatement[3726-3789]"
    }, {
      "left" : "if (foundCharset == null && meta.hasAttr(\"charset\"))",
      "right" : "if (foundCharset == null && meta.hasAttr(\"charset\"))",
      "info" : "IfStatement[3810-4233]:IfStatement[3810-4233]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3863-4233]:Block[3863-4233]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[3889-4211]:TryStatement[3889-4211]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3893-4096]:Block[3893-4096]"
    }, {
      "left" : "if (Charset.isSupported(meta.attr(\"charset\")))",
      "right" : "if (Charset.isSupported(meta.attr(\"charset\")))",
      "info" : "IfStatement[3923-4070]:IfStatement[3923-4070]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3970-4070]:Block[3970-4070]"
    }, {
      "left" : "foundCharset = meta.attr(\"charset\");",
      "right" : "foundCharset = meta.attr(\"charset\");",
      "info" : "ExpressionStatement[4004-4040]:ExpressionStatement[4004-4040]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4135-4211]:Block[4135-4211]"
    }, {
      "left" : "foundCharset = null;",
      "right" : "foundCharset = null;",
      "info" : "ExpressionStatement[4165-4185]:ExpressionStatement[4165-4185]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4257-4333]:Block[4257-4333]"
    }, {
      "left" : "foundCharset = meta.attr(\"charset\");",
      "right" : "foundCharset = meta.attr(\"charset\");",
      "info" : "ExpressionStatement[4279-4315]:ExpressionStatement[4279-4315]"
    }, {
      "left" : "if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset))",
      "right" : "if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset))",
      "info" : "IfStatement[4351-4775]:IfStatement[4351-4775]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4447-4775]:Block[4447-4775]"
    }, {
      "left" : "foundCharset = foundCharset.trim().replaceAll(\"[\\\"']\", \"\");",
      "right" : "foundCharset = foundCharset.trim().replaceAll(\"[\\\"']\", \"\");",
      "info" : "ExpressionStatement[4490-4549]:ExpressionStatement[4490-4549]"
    }, {
      "left" : "charsetName = foundCharset;",
      "right" : "charsetName = foundCharset;",
      "info" : "ExpressionStatement[4570-4597]:ExpressionStatement[4570-4597]"
    }, {
      "left" : "byteData.rewind();",
      "right" : "byteData.rewind();",
      "info" : "ExpressionStatement[4618-4636]:ExpressionStatement[4618-4636]"
    }, {
      "left" : "docData = Charset.forName(foundCharset).decode(byteData).toString();",
      "right" : "docData = Charset.forName(foundCharset).decode(byteData).toString();",
      "info" : "ExpressionStatement[4657-4725]:ExpressionStatement[4657-4725]"
    }, {
      "left" : "doc = null;",
      "right" : "doc = null;",
      "info" : "ExpressionStatement[4746-4757]:ExpressionStatement[4746-4757]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4805-5104]:Block[4805-5104]"
    }, {
      "left" : "Validate.notEmpty(charsetName, \"Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML\");",
      "right" : "Validate.notEmpty(charsetName, \"Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML\");",
      "info" : "ExpressionStatement[4881-5014]:ExpressionStatement[4881-5014]"
    }, {
      "left" : "docData = Charset.forName(charsetName).decode(byteData).toString();",
      "right" : "docData = Charset.forName(charsetName).decode(byteData).toString();",
      "info" : "ExpressionStatement[5027-5094]:ExpressionStatement[5027-5094]"
    }, {
      "left" : "if (docData.length() > 0 && docData.charAt(0) == 65279)",
      "right" : "if (docData.length() > 0 && docData.charAt(0) == 65279)",
      "info" : "IfStatement[5241-5508]:IfStatement[5241-5532]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5297-5508]:Block[5297-5532]"
    }, {
      "left" : "byteData.rewind();",
      "right" : "byteData.rewind();",
      "info" : "ExpressionStatement[5311-5329]:ExpressionStatement[5311-5329]"
    }, {
      "left" : "docData = Charset.forName(defaultCharset).decode(byteData).toString();",
      "right" : "docData = Charset.forName(defaultCharset).decode(byteData).toString();",
      "info" : "ExpressionStatement[5342-5412]:ExpressionStatement[5342-5412]"
    }, {
      "left" : "docData = docData.substring(1);",
      "right" : "docData = docData.substring(1);",
      "info" : "ExpressionStatement[5425-5456]:ExpressionStatement[5425-5456]"
    }, {
      "left" : "charsetName = defaultCharset;",
      "right" : "charsetName = defaultCharset;",
      "info" : "ExpressionStatement[5469-5498]:ExpressionStatement[5469-5498]"
    }, {
      "left" : "if (doc == null)",
      "right" : "if (doc == null)",
      "info" : "IfStatement[5517-5655]:IfStatement[5541-5679]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5534-5655]:Block[5558-5679]"
    }, {
      "left" : "doc = parser.parseInput(docData, baseUri);",
      "right" : "doc = parser.parseInput(docData, baseUri);",
      "info" : "ExpressionStatement[5548-5590]:ExpressionStatement[5572-5614]"
    }, {
      "left" : "doc.outputSettings().charset(charsetName);",
      "right" : "doc.outputSettings().charset(charsetName);",
      "info" : "ExpressionStatement[5603-5645]:ExpressionStatement[5627-5669]"
    }, {
      "left" : "return doc;",
      "right" : "return doc;",
      "info" : "ReturnStatement[5664-5675]:ReturnStatement[5688-5699]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[6030-6036]:Modifier[6054-6060]"
    }, {
      "left" : "ByteBuffer",
      "right" : "ByteBuffer",
      "info" : "SimpleType[6037-6047]:SimpleType[6061-6071]"
    }, {
      "left" : "readToByteBuffer",
      "right" : "readToByteBuffer",
      "info" : "SimpleName[6048-6064]:SimpleName[6072-6088]"
    }, {
      "left" : "InputStream inStream",
      "right" : "InputStream inStream",
      "info" : "SingleVariableDeclaration[6065-6085]:SingleVariableDeclaration[6089-6109]"
    }, {
      "left" : "int maxSize",
      "right" : "int maxSize",
      "info" : "SingleVariableDeclaration[6087-6098]:SingleVariableDeclaration[6111-6122]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[6107-6118]:SimpleType[6131-6142]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6119-6903]:Block[6143-6927]"
    }, {
      "left" : "Validate.isTrue(maxSize >= 0, \"maxSize must be 0 (unlimited) or larger\");",
      "right" : "Validate.isTrue(maxSize >= 0, \"maxSize must be 0 (unlimited) or larger\");",
      "info" : "ExpressionStatement[6129-6202]:ExpressionStatement[6153-6226]"
    }, {
      "left" : "final boolean capped = maxSize > 0;",
      "right" : "final boolean capped = maxSize > 0;",
      "info" : "VariableDeclarationStatement[6211-6246]:VariableDeclarationStatement[6235-6270]"
    }, {
      "left" : "byte[] buffer = new byte[bufferSize];",
      "right" : "byte[] buffer = new byte[bufferSize];",
      "info" : "VariableDeclarationStatement[6255-6292]:VariableDeclarationStatement[6279-6316]"
    }, {
      "left" : "ByteArrayOutputStream outStream = new ByteArrayOutputStream(bufferSize);",
      "right" : "ByteArrayOutputStream outStream = new ByteArrayOutputStream(bufferSize);",
      "info" : "VariableDeclarationStatement[6301-6373]:VariableDeclarationStatement[6325-6397]"
    }, {
      "left" : "int read;",
      "right" : "int read;",
      "info" : "VariableDeclarationStatement[6382-6391]:VariableDeclarationStatement[6406-6415]"
    }, {
      "left" : "int remaining = maxSize;",
      "right" : "int remaining = maxSize;",
      "info" : "VariableDeclarationStatement[6400-6424]:VariableDeclarationStatement[6424-6448]"
    }, {
      "left" : "while (true)",
      "right" : "while (true)",
      "info" : "WhileStatement[6434-6800]:WhileStatement[6458-6824]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6447-6800]:Block[6471-6824]"
    }, {
      "left" : "read = inStream.read(buffer);",
      "right" : "read = inStream.read(buffer);",
      "info" : "ExpressionStatement[6461-6490]:ExpressionStatement[6485-6514]"
    }, {
      "left" : "if (read == -1)",
      "right" : "if (read == -1)",
      "info" : "IfStatement[6503-6525]:IfStatement[6527-6549]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[6519-6525]:BreakStatement[6543-6549]"
    }, {
      "left" : "if (capped)",
      "right" : "if (capped)",
      "info" : "IfStatement[6538-6744]:IfStatement[6562-6768]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6550-6744]:Block[6574-6768]"
    }, {
      "left" : "if (read > remaining)",
      "right" : "if (read > remaining)",
      "info" : "IfStatement[6568-6695]:IfStatement[6592-6719]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6590-6695]:Block[6614-6719]"
    }, {
      "left" : "outStream.write(buffer, 0, remaining);",
      "right" : "outStream.write(buffer, 0, remaining);",
      "info" : "ExpressionStatement[6612-6650]:ExpressionStatement[6636-6674]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[6671-6677]:BreakStatement[6695-6701]"
    }, {
      "left" : "remaining -= read;",
      "right" : "remaining -= read;",
      "info" : "ExpressionStatement[6712-6730]:ExpressionStatement[6736-6754]"
    }, {
      "left" : "outStream.write(buffer, 0, read);",
      "right" : "outStream.write(buffer, 0, read);",
      "info" : "ExpressionStatement[6757-6790]:ExpressionStatement[6781-6814]"
    }, {
      "left" : "ByteBuffer byteData = ByteBuffer.wrap(outStream.toByteArray());",
      "right" : "ByteBuffer byteData = ByteBuffer.wrap(outStream.toByteArray());",
      "info" : "VariableDeclarationStatement[6809-6872]:VariableDeclarationStatement[6833-6896]"
    }, {
      "left" : "return byteData;",
      "right" : "return byteData;",
      "info" : "ReturnStatement[6881-6897]:ReturnStatement[6905-6921]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[6909-6915]:Modifier[6933-6939]"
    }, {
      "left" : "ByteBuffer",
      "right" : "ByteBuffer",
      "info" : "SimpleType[6916-6926]:SimpleType[6940-6950]"
    }, {
      "left" : "readToByteBuffer",
      "right" : "readToByteBuffer",
      "info" : "SimpleName[6927-6943]:SimpleName[6951-6967]"
    }, {
      "left" : "InputStream inStream",
      "right" : "InputStream inStream",
      "info" : "SingleVariableDeclaration[6944-6964]:SingleVariableDeclaration[6968-6988]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[6973-6984]:SimpleType[6997-7008]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6985-7038]:Block[7009-7062]"
    }, {
      "left" : "return readToByteBuffer(inStream, 0);",
      "right" : "return readToByteBuffer(inStream, 0);",
      "info" : "ReturnStatement[6995-7032]:ReturnStatement[7019-7056]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[7340-7346]:Modifier[7364-7370]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[7347-7353]:SimpleType[7371-7377]"
    }, {
      "left" : "getCharsetFromContentType",
      "right" : "getCharsetFromContentType",
      "info" : "SimpleName[7354-7379]:SimpleName[7378-7403]"
    }, {
      "left" : "String contentType",
      "right" : "String contentType",
      "info" : "SingleVariableDeclaration[7380-7398]:SingleVariableDeclaration[7404-7422]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7400-8113]:Block[7424-8137]"
    }, {
      "left" : "if (contentType == null)",
      "right" : "if (contentType == null)",
      "info" : "IfStatement[7410-7447]:IfStatement[7434-7471]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[7435-7447]:ReturnStatement[7459-7471]"
    }, {
      "left" : "Matcher m = charsetPattern.matcher(contentType);",
      "right" : "Matcher m = charsetPattern.matcher(contentType);",
      "info" : "VariableDeclarationStatement[7456-7504]:VariableDeclarationStatement[7480-7528]"
    }, {
      "left" : "if (m.find())",
      "right" : "if (m.find())",
      "info" : "IfStatement[7513-8086]:IfStatement[7537-8110]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7527-8086]:Block[7551-8110]"
    }, {
      "left" : "String charset = m.group(1).trim();",
      "right" : "String charset = m.group(1).trim();",
      "info" : "VariableDeclarationStatement[7541-7576]:VariableDeclarationStatement[7565-7600]"
    }, {
      "left" : "charset = charset.replace(\"charset=\", \"\");",
      "right" : "charset = charset.replace(\"charset=\", \"\");",
      "info" : "ExpressionStatement[7589-7631]:ExpressionStatement[7613-7655]"
    }, {
      "left" : "if (charset.isEmpty())",
      "right" : "if (charset.isEmpty())",
      "info" : "IfStatement[7644-7679]:IfStatement[7668-7703]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[7667-7679]:ReturnStatement[7691-7703]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[7692-8076]:TryStatement[7716-8100]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7696-7906]:Block[7720-7930]"
    }, {
      "left" : "if (Charset.isSupported(charset))",
      "right" : "if (Charset.isSupported(charset))",
      "info" : "IfStatement[7714-7763]:IfStatement[7738-7787]"
    }, {
      "left" : "return charset;",
      "right" : "return charset;",
      "info" : "ReturnStatement[7748-7763]:ReturnStatement[7772-7787]"
    }, {
      "left" : "charset = charset.toUpperCase(Locale.ENGLISH);",
      "right" : "charset = charset.toUpperCase(Locale.ENGLISH);",
      "info" : "ExpressionStatement[7780-7826]:ExpressionStatement[7804-7850]"
    }, {
      "left" : "if (Charset.isSupported(charset))",
      "right" : "if (Charset.isSupported(charset))",
      "info" : "IfStatement[7843-7892]:IfStatement[7867-7916]"
    }, {
      "left" : "return charset;",
      "right" : "return charset;",
      "info" : "ReturnStatement[7877-7892]:ReturnStatement[7901-7916]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7945-8076]:Block[7969-8100]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[8050-8062]:ReturnStatement[8074-8086]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[8095-8107]:ReturnStatement[8119-8131]"
    } ]
  },
  "interFileMappings" : { }
}