{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "XmlTreeBuilder",
      "right" : "XmlTreeBuilder",
      "info" : "TypeDeclaration[188-5253]:TypeDeclaration[188-5259]"
    }, {
      "left" : "ParseSettings defaultSettings()",
      "right" : "ParseSettings defaultSettings()",
      "info" : "MethodDeclaration[508-590]:MethodDeclaration[508-590]"
    }, {
      "left" : "Document parse(Reader input, String baseUri)",
      "right" : "Document parse(Reader input, String baseUri)",
      "info" : "MethodDeclaration[596-743]:MethodDeclaration[596-743]"
    }, {
      "left" : "Document parse(String input, String baseUri)",
      "right" : "Document parse(String input, String baseUri)",
      "info" : "MethodDeclaration[749-914]:MethodDeclaration[749-914]"
    }, {
      "left" : "protected void initialiseParse(Reader input, String baseUri, ParseErrorList errors, ParseSettings settings)",
      "right" : "protected void initialiseParse(Reader input, String baseUri, ParseErrorList errors, ParseSettings settings)",
      "info" : "MethodDeclaration[920-1293]:MethodDeclaration[920-1293]"
    }, {
      "left" : "protected boolean process(Token token)",
      "right" : "protected boolean process(Token token)",
      "info" : "MethodDeclaration[1299-2142]:MethodDeclaration[1299-2142]"
    }, {
      "left" : "private void insertNode(Node node)",
      "right" : "private void insertNode(Node node)",
      "info" : "MethodDeclaration[2148-2234]:MethodDeclaration[2148-2234]"
    }, {
      "left" : "Element insert(Token.StartTag startTag)",
      "right" : "Element insert(Token.StartTag startTag)",
      "info" : "MethodDeclaration[2240-2824]:MethodDeclaration[2240-2824]"
    }, {
      "left" : "void insert(Token.Comment commentToken)",
      "right" : "void insert(Token.Comment commentToken)",
      "info" : "MethodDeclaration[2830-3708]:MethodDeclaration[2830-3708]"
    }, {
      "left" : "void insert(Token.Character token)",
      "right" : "void insert(Token.Character token)",
      "info" : "MethodDeclaration[3714-3881]:MethodDeclaration[3714-3881]"
    }, {
      "left" : "void insert(Token.Doctype d)",
      "right" : "void insert(Token.Doctype d)",
      "info" : "MethodDeclaration[3887-4147]:MethodDeclaration[3887-4147]"
    }, {
      "left" : "private void popStackToClose(Token.EndTag endTag)",
      "right" : "private void popStackToClose(Token.EndTag endTag)",
      "info" : "MethodDeclaration[4153-4989]:MethodDeclaration[4153-4995]"
    }, {
      "left" : "List<Node> parseFragment(String inputFragment, String baseUri, ParseErrorList errors, ParseSettings settings)",
      "right" : "List<Node> parseFragment(String inputFragment, String baseUri, ParseErrorList errors, ParseSettings settings)",
      "info" : "MethodDeclaration[4995-5251]:MethodDeclaration[5001-5257]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[540-590]:Block[540-590]"
    }, {
      "left" : "return ParseSettings.preserveCase;",
      "right" : "return ParseSettings.preserveCase;",
      "info" : "ReturnStatement[550-584]:ReturnStatement[550-584]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[641-743]:Block[641-743]"
    }, {
      "left" : "return parse(input, baseUri, ParseErrorList.noTracking(), ParseSettings.preserveCase);",
      "right" : "return parse(input, baseUri, ParseErrorList.noTracking(), ParseSettings.preserveCase);",
      "info" : "ReturnStatement[651-737]:ReturnStatement[651-737]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[794-914]:Block[794-914]"
    }, {
      "left" : "return parse(new StringReader(input), baseUri, ParseErrorList.noTracking(), ParseSettings.preserveCase);",
      "right" : "return parse(new StringReader(input), baseUri, ParseErrorList.noTracking(), ParseSettings.preserveCase);",
      "info" : "ReturnStatement[804-908]:ReturnStatement[804-908]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1042-1293]:Block[1042-1293]"
    }, {
      "left" : "super.initialiseParse(input, baseUri, errors, settings);",
      "right" : "super.initialiseParse(input, baseUri, errors, settings);",
      "info" : "ExpressionStatement[1052-1108]:ExpressionStatement[1052-1108]"
    }, {
      "left" : "stack.add(doc);",
      "right" : "stack.add(doc);",
      "info" : "ExpressionStatement[1117-1132]:ExpressionStatement[1117-1132]"
    }, {
      "left" : "doc.outputSettings().syntax(Document.OutputSettings.Syntax.xml);",
      "right" : "doc.outputSettings().syntax(Document.OutputSettings.Syntax.xml);",
      "info" : "ExpressionStatement[1223-1287]:ExpressionStatement[1223-1287]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1352-2142]:Block[1352-2142]"
    }, {
      "left" : "switch (token.type) {\n            case StartTag:\n                insert(token.asStartTag());\n                break;\n            case EndTag:\n                popStackToClose(token.asEndTag());\n                break;\n            case Comment:\n                insert(token.asComment());\n                break;\n            case Character:\n                insert(token.asCharacter());\n                break;\n            case Doctype:\n                insert(token.asDoctype());\n                break;\n            case EOF: // could put some normalisation here if desired\n                break;\n            default:\n                Validate.fail(\"Unexpected token type: \" + token.type);\n        }",
      "right" : "switch (token.type) {\n            case StartTag:\n                insert(token.asStartTag());\n                break;\n            case EndTag:\n                popStackToClose(token.asEndTag());\n                break;\n            case Comment:\n                insert(token.asComment());\n                break;\n            case Character:\n                insert(token.asCharacter());\n                break;\n            case Doctype:\n                insert(token.asDoctype());\n                break;\n            case EOF: // could put some normalisation here if desired\n                break;\n            default:\n                Validate.fail(\"Unexpected token type: \" + token.type);\n        }",
      "info" : "SwitchStatement[1426-2115]:SwitchStatement[1426-2115]"
    }, {
      "left" : "case StartTag:",
      "right" : "case StartTag:",
      "info" : "SwitchCase[1460-1474]:SwitchCase[1460-1474]"
    }, {
      "left" : "insert(token.asStartTag());",
      "right" : "insert(token.asStartTag());",
      "info" : "ExpressionStatement[1491-1518]:ExpressionStatement[1491-1518]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[1535-1541]:BreakStatement[1535-1541]"
    }, {
      "left" : "case EndTag:",
      "right" : "case EndTag:",
      "info" : "SwitchCase[1554-1566]:SwitchCase[1554-1566]"
    }, {
      "left" : "popStackToClose(token.asEndTag());",
      "right" : "popStackToClose(token.asEndTag());",
      "info" : "ExpressionStatement[1583-1617]:ExpressionStatement[1583-1617]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[1634-1640]:BreakStatement[1634-1640]"
    }, {
      "left" : "case Comment:",
      "right" : "case Comment:",
      "info" : "SwitchCase[1653-1666]:SwitchCase[1653-1666]"
    }, {
      "left" : "insert(token.asComment());",
      "right" : "insert(token.asComment());",
      "info" : "ExpressionStatement[1683-1709]:ExpressionStatement[1683-1709]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[1726-1732]:BreakStatement[1726-1732]"
    }, {
      "left" : "case Character:",
      "right" : "case Character:",
      "info" : "SwitchCase[1745-1760]:SwitchCase[1745-1760]"
    }, {
      "left" : "insert(token.asCharacter());",
      "right" : "insert(token.asCharacter());",
      "info" : "ExpressionStatement[1777-1805]:ExpressionStatement[1777-1805]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[1822-1828]:BreakStatement[1822-1828]"
    }, {
      "left" : "case Doctype:",
      "right" : "case Doctype:",
      "info" : "SwitchCase[1841-1854]:SwitchCase[1841-1854]"
    }, {
      "left" : "insert(token.asDoctype());",
      "right" : "insert(token.asDoctype());",
      "info" : "ExpressionStatement[1871-1897]:ExpressionStatement[1871-1897]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[1914-1920]:BreakStatement[1914-1920]"
    }, {
      "left" : "case EOF:",
      "right" : "case EOF:",
      "info" : "SwitchCase[1933-1942]:SwitchCase[1933-1942]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[2007-2013]:BreakStatement[2007-2013]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[2026-2034]:SwitchCase[2026-2034]"
    }, {
      "left" : "Validate.fail(\"Unexpected token type: \" + token.type);",
      "right" : "Validate.fail(\"Unexpected token type: \" + token.type);",
      "info" : "ExpressionStatement[2051-2105]:ExpressionStatement[2051-2105]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[2124-2136]:ReturnStatement[2124-2136]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2183-2234]:Block[2183-2234]"
    }, {
      "left" : "currentElement().appendChild(node);",
      "right" : "currentElement().appendChild(node);",
      "info" : "ExpressionStatement[2193-2228]:ExpressionStatement[2193-2228]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2280-2824]:Block[2280-2824]"
    }, {
      "left" : "Tag tag = Tag.valueOf(startTag.name(), settings);",
      "right" : "Tag tag = Tag.valueOf(startTag.name(), settings);",
      "info" : "VariableDeclarationStatement[2290-2339]:VariableDeclarationStatement[2290-2339]"
    }, {
      "left" : "Element el = new Element(tag, baseUri, settings.normalizeAttributes(startTag.attributes));",
      "right" : "Element el = new Element(tag, baseUri, settings.normalizeAttributes(startTag.attributes));",
      "info" : "VariableDeclarationStatement[2449-2539]:VariableDeclarationStatement[2449-2539]"
    }, {
      "left" : "insertNode(el);",
      "right" : "insertNode(el);",
      "info" : "ExpressionStatement[2548-2563]:ExpressionStatement[2548-2563]"
    }, {
      "left" : "if (startTag.isSelfClosing())",
      "right" : "if (startTag.isSelfClosing())",
      "info" : "IfStatement[2572-2799]:IfStatement[2572-2799]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2602-2755]:Block[2602-2755]"
    }, {
      "left" : "if (!tag.isKnownTag())",
      "right" : "if (!tag.isKnownTag())",
      "info" : "IfStatement[2616-2745]:IfStatement[2616-2745]"
    }, {
      "left" : "tag.setSelfClosing();",
      "right" : "tag.setSelfClosing();",
      "info" : "ExpressionStatement[2724-2745]:ExpressionStatement[2724-2745]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2761-2799]:Block[2761-2799]"
    }, {
      "left" : "stack.add(el);",
      "right" : "stack.add(el);",
      "info" : "ExpressionStatement[2775-2789]:ExpressionStatement[2775-2789]"
    }, {
      "left" : "return el;",
      "right" : "return el;",
      "info" : "ReturnStatement[2808-2818]:ReturnStatement[2808-2818]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2870-3708]:Block[2870-3708]"
    }, {
      "left" : "Comment comment = new Comment(commentToken.getData());",
      "right" : "Comment comment = new Comment(commentToken.getData());",
      "info" : "VariableDeclarationStatement[2880-2934]:VariableDeclarationStatement[2880-2934]"
    }, {
      "left" : "Node insert = comment;",
      "right" : "Node insert = comment;",
      "info" : "VariableDeclarationStatement[2943-2965]:VariableDeclarationStatement[2943-2965]"
    }, {
      "left" : "if (commentToken.bogus)",
      "right" : "if (commentToken.bogus)",
      "info" : "IfStatement[2974-3674]:IfStatement[2974-3674]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2998-3674]:Block[2998-3674]"
    }, {
      "left" : "String data = comment.getData();",
      "right" : "String data = comment.getData();",
      "info" : "VariableDeclarationStatement[3201-3233]:VariableDeclarationStatement[3201-3233]"
    }, {
      "left" : "if (data.length() > 1 && (data.startsWith(\"!\") || data.startsWith(\"?\")))",
      "right" : "if (data.length() > 1 && (data.startsWith(\"!\") || data.startsWith(\"?\")))",
      "info" : "IfStatement[3246-3664]:IfStatement[3246-3664]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3319-3664]:Block[3319-3664]"
    }, {
      "left" : "Document doc = Jsoup.parse(\"<\" + data.substring(1, data.length() -1) + \">\", baseUri, Parser.xmlParser());",
      "right" : "Document doc = Jsoup.parse(\"<\" + data.substring(1, data.length() -1) + \">\", baseUri, Parser.xmlParser());",
      "info" : "VariableDeclarationStatement[3337-3442]:VariableDeclarationStatement[3337-3442]"
    }, {
      "left" : "Element el = doc.child(0);",
      "right" : "Element el = doc.child(0);",
      "info" : "VariableDeclarationStatement[3459-3485]:VariableDeclarationStatement[3459-3485]"
    }, {
      "left" : "insert = new XmlDeclaration(settings.normalizeTag(el.tagName()), data.startsWith(\"!\"));",
      "right" : "insert = new XmlDeclaration(settings.normalizeTag(el.tagName()), data.startsWith(\"!\"));",
      "info" : "ExpressionStatement[3502-3589]:ExpressionStatement[3502-3589]"
    }, {
      "left" : "insert.attributes().addAll(el.attributes());",
      "right" : "insert.attributes().addAll(el.attributes());",
      "info" : "ExpressionStatement[3606-3650]:ExpressionStatement[3606-3650]"
    }, {
      "left" : "insertNode(insert);",
      "right" : "insertNode(insert);",
      "info" : "ExpressionStatement[3683-3702]:ExpressionStatement[3683-3702]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3749-3881]:Block[3749-3881]"
    }, {
      "left" : "final String data = token.getData();",
      "right" : "final String data = token.getData();",
      "info" : "VariableDeclarationStatement[3759-3795]:VariableDeclarationStatement[3759-3795]"
    }, {
      "left" : "insertNode(token.isCData() ? new CDataNode(data) : new TextNode(data));",
      "right" : "insertNode(token.isCData() ? new CDataNode(data) : new TextNode(data));",
      "info" : "ExpressionStatement[3804-3875]:ExpressionStatement[3804-3875]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3916-4147]:Block[3916-4147]"
    }, {
      "left" : "DocumentType doctypeNode = new DocumentType(settings.normalizeTag(d.getName()), d.getPublicIdentifier(), d.getSystemIdentifier());",
      "right" : "DocumentType doctypeNode = new DocumentType(settings.normalizeTag(d.getName()), d.getPublicIdentifier(), d.getSystemIdentifier());",
      "info" : "VariableDeclarationStatement[3926-4056]:VariableDeclarationStatement[3926-4056]"
    }, {
      "left" : "doctypeNode.setPubSysKey(d.getPubSysKey());",
      "right" : "doctypeNode.setPubSysKey(d.getPubSysKey());",
      "info" : "ExpressionStatement[4065-4108]:ExpressionStatement[4065-4108]"
    }, {
      "left" : "insertNode(doctypeNode);",
      "right" : "insertNode(doctypeNode);",
      "info" : "ExpressionStatement[4117-4141]:ExpressionStatement[4117-4141]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4399-4989]:Block[4399-4995]"
    }, {
      "left" : "String elName = endTag.name();",
      "right" : "String elName = endTag.normalName();",
      "info" : "VariableDeclarationStatement[4409-4439]:VariableDeclarationStatement[4409-4445]"
    }, {
      "left" : "Element firstFound = null;",
      "right" : "Element firstFound = null;",
      "info" : "VariableDeclarationStatement[4448-4474]:VariableDeclarationStatement[4454-4480]"
    }, {
      "left" : "for (int pos = stack.size() -1; pos >= 0; pos--)",
      "right" : "for (int pos = stack.size() -1; pos >= 0; pos--)",
      "info" : "ForStatement[4484-4709]:ForStatement[4490-4715]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4533-4709]:Block[4539-4715]"
    }, {
      "left" : "Element next = stack.get(pos);",
      "right" : "Element next = stack.get(pos);",
      "info" : "VariableDeclarationStatement[4547-4577]:VariableDeclarationStatement[4553-4583]"
    }, {
      "left" : "if (next.nodeName().equals(elName))",
      "right" : "if (next.nodeName().equals(elName))",
      "info" : "IfStatement[4590-4699]:IfStatement[4596-4705]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4626-4699]:Block[4632-4705]"
    }, {
      "left" : "firstFound = next;",
      "right" : "firstFound = next;",
      "info" : "ExpressionStatement[4644-4662]:ExpressionStatement[4650-4668]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[4679-4685]:BreakStatement[4685-4691]"
    }, {
      "left" : "if (firstFound == null)",
      "right" : "if (firstFound == null)",
      "info" : "IfStatement[4718-4761]:IfStatement[4724-4767]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[4754-4761]:ReturnStatement[4760-4767]"
    }, {
      "left" : "for (int pos = stack.size() -1; pos >= 0; pos--)",
      "right" : "for (int pos = stack.size() -1; pos >= 0; pos--)",
      "info" : "ForStatement[4790-4983]:ForStatement[4796-4989]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4839-4983]:Block[4845-4989]"
    }, {
      "left" : "Element next = stack.get(pos);",
      "right" : "Element next = stack.get(pos);",
      "info" : "VariableDeclarationStatement[4853-4883]:VariableDeclarationStatement[4859-4889]"
    }, {
      "left" : "stack.remove(pos);",
      "right" : "stack.remove(pos);",
      "info" : "ExpressionStatement[4896-4914]:ExpressionStatement[4902-4920]"
    }, {
      "left" : "if (next == firstFound)",
      "right" : "if (next == firstFound)",
      "info" : "IfStatement[4927-4973]:IfStatement[4933-4979]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[4967-4973]:BreakStatement[4973-4979]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5105-5251]:Block[5111-5257]"
    }, {
      "left" : "initialiseParse(new StringReader(inputFragment), baseUri, errors, settings);",
      "right" : "initialiseParse(new StringReader(inputFragment), baseUri, errors, settings);",
      "info" : "ExpressionStatement[5115-5191]:ExpressionStatement[5121-5197]"
    }, {
      "left" : "runParser();",
      "right" : "runParser();",
      "info" : "ExpressionStatement[5200-5212]:ExpressionStatement[5206-5218]"
    }, {
      "left" : "return doc.childNodes();",
      "right" : "return doc.childNodes();",
      "info" : "ReturnStatement[5221-5245]:ReturnStatement[5227-5251]"
    } ]
  },
  "interFileMappings" : { }
}