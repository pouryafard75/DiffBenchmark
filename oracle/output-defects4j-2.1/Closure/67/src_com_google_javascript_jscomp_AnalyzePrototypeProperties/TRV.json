{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "private final SymbolType PROPERTY = SymbolType.PROPERTY;",
      "right" : "private final SymbolType PROPERTY = SymbolType.PROPERTY;",
      "info" : "FieldDeclaration[1990-2046]:FieldDeclaration[1990-2046]"
    }, {
      "left" : "private final SymbolType VAR = SymbolType.VAR;",
      "right" : "private final SymbolType VAR = SymbolType.VAR;",
      "info" : "FieldDeclaration[2049-2095]:FieldDeclaration[2049-2095]"
    }, {
      "left" : "private final AbstractCompiler compiler;",
      "right" : "private final AbstractCompiler compiler;",
      "info" : "FieldDeclaration[2099-2139]:FieldDeclaration[2099-2139]"
    }, {
      "left" : "private final boolean canModifyExterns;",
      "right" : "private final boolean canModifyExterns;",
      "info" : "FieldDeclaration[2142-2181]:FieldDeclaration[2142-2181]"
    }, {
      "left" : "private final boolean anchorUnusedVars;",
      "right" : "private final boolean anchorUnusedVars;",
      "info" : "FieldDeclaration[2184-2223]:FieldDeclaration[2184-2223]"
    }, {
      "left" : "private final JSModuleGraph moduleGraph;",
      "right" : "private final JSModuleGraph moduleGraph;",
      "info" : "FieldDeclaration[2226-2266]:FieldDeclaration[2226-2266]"
    }, {
      "left" : "private final JSModule firstModule;",
      "right" : "private final JSModule firstModule;",
      "info" : "FieldDeclaration[2269-2304]:FieldDeclaration[2269-2304]"
    }, {
      "left" : "private static final Set<String> IMPLICITLY_USED_PROPERTIES =\n      ImmutableSet.of(\"length\", \"toString\", \"valueOf\");",
      "right" : "private static final Set<String> IMPLICITLY_USED_PROPERTIES =\n      ImmutableSet.of(\"length\", \"toString\", \"valueOf\");",
      "info" : "FieldDeclaration[2377-2494]:FieldDeclaration[2377-2494]"
    }, {
      "left" : "private final LinkedDirectedGraph<NameInfo, JSModule> symbolGraph =\n      LinkedDirectedGraph.createWithoutAnnotations();",
      "right" : "private final LinkedDirectedGraph<NameInfo, JSModule> symbolGraph =\n      LinkedDirectedGraph.createWithoutAnnotations();",
      "info" : "FieldDeclaration[3113-3234]:FieldDeclaration[3113-3234]"
    }, {
      "left" : "private final NameInfo globalNode = new NameInfo(\"[global]\");",
      "right" : "private final NameInfo globalNode = new NameInfo(\"[global]\");",
      "info" : "FieldDeclaration[3292-3353]:FieldDeclaration[3292-3353]"
    }, {
      "left" : "private final NameInfo externNode = new NameInfo(\"[extern]\");",
      "right" : "private final NameInfo externNode = new NameInfo(\"[extern]\");",
      "info" : "FieldDeclaration[3411-3472]:FieldDeclaration[3411-3472]"
    }, {
      "left" : "private final NameInfo anonymousNode = new NameInfo(\"[anonymous]\");",
      "right" : "private final NameInfo anonymousNode = new NameInfo(\"[anonymous]\");",
      "info" : "FieldDeclaration[3550-3617]:FieldDeclaration[3550-3617]"
    }, {
      "left" : "private final Map<String, NameInfo> propertyNameInfo = Maps.newHashMap();",
      "right" : "private final Map<String, NameInfo> propertyNameInfo = Maps.newHashMap();",
      "info" : "FieldDeclaration[3735-3808]:FieldDeclaration[3735-3808]"
    }, {
      "left" : "private final Map<String, NameInfo> varNameInfo = Maps.newHashMap();",
      "right" : "private final Map<String, NameInfo> varNameInfo = Maps.newHashMap();",
      "info" : "FieldDeclaration[3926-3994]:FieldDeclaration[3926-3994]"
    }, {
      "left" : "AnalyzePrototypeProperties(AbstractCompiler compiler,\n      JSModuleGraph moduleGraph, boolean canModifyExterns,\n      boolean anchorUnusedVars)",
      "right" : "AnalyzePrototypeProperties(AbstractCompiler compiler,\n      JSModuleGraph moduleGraph, boolean canModifyExterns,\n      boolean anchorUnusedVars)",
      "info" : "MethodDeclaration[3998-5444]:MethodDeclaration[3998-5444]"
    }, {
      "left" : "public void process(Node externRoot, Node root)",
      "right" : "public void process(Node externRoot, Node root)",
      "info" : "MethodDeclaration[5448-5914]:MethodDeclaration[5448-5914]"
    }, {
      "left" : "public Collection<NameInfo> getAllNameInfo()",
      "right" : "public Collection<NameInfo> getAllNameInfo()",
      "info" : "MethodDeclaration[5918-6169]:MethodDeclaration[5918-6169]"
    }, {
      "left" : "private NameInfo getNameInfoForName(String name, SymbolType type)",
      "right" : "private NameInfo getNameInfoForName(String name, SymbolType type)",
      "info" : "MethodDeclaration[6173-6761]:MethodDeclaration[6173-6761]"
    }, {
      "left" : "private Stack<NameContext> symbolStack = new Stack<NameContext>();",
      "right" : "private Stack<NameContext> symbolStack = new Stack<NameContext>();",
      "info" : "FieldDeclaration[6843-6909]:FieldDeclaration[6843-6909]"
    }, {
      "left" : "private ProcessProperties()",
      "right" : "private ProcessProperties()",
      "info" : "MethodDeclaration[6915-7003]:MethodDeclaration[6915-7003]"
    }, {
      "left" : "public void enterScope(NodeTraversal t)",
      "right" : "public void enterScope(NodeTraversal t)",
      "info" : "MethodDeclaration[7009-7117]:MethodDeclaration[7009-7117]"
    }, {
      "left" : "public void exitScope(NodeTraversal t)",
      "right" : "public void exitScope(NodeTraversal t)",
      "info" : "MethodDeclaration[7123-7184]:MethodDeclaration[7123-7184]"
    }, {
      "left" : "public boolean shouldTraverse(NodeTraversal t, Node n, Node parent)",
      "right" : "public boolean shouldTraverse(NodeTraversal t, Node n, Node parent)",
      "info" : "MethodDeclaration[7190-7861]:MethodDeclaration[7190-7861]"
    }, {
      "left" : "public void visit(NodeTraversal t, Node n, Node parent)",
      "right" : "public void visit(NodeTraversal t, Node n, Node parent)",
      "info" : "MethodDeclaration[7867-10674]:MethodDeclaration[7867-10674]"
    }, {
      "left" : "private void addSymbolUse(String name, JSModule module, SymbolType type)",
      "right" : "private void addSymbolUse(String name, JSModule module, SymbolType type)",
      "info" : "MethodDeclaration[10680-11170]:MethodDeclaration[10680-11170]"
    }, {
      "left" : "private boolean isGlobalFunctionDeclaration(NodeTraversal t, Node n)",
      "right" : "private boolean isGlobalFunctionDeclaration(NodeTraversal t, Node n)",
      "info" : "MethodDeclaration[11176-11543]:MethodDeclaration[11176-11543]"
    }, {
      "left" : "private boolean processGlobalFunctionDeclaration(NodeTraversal t,\n        Node nameNode, Node parent, Node gramps)",
      "right" : "private boolean processGlobalFunctionDeclaration(NodeTraversal t,\n        Node nameNode, Node parent, Node gramps)",
      "info" : "MethodDeclaration[12227-13290]:MethodDeclaration[12279-13342]"
    }, {
      "left" : "private void processPrototypeParent(NodeTraversal t, Node n)",
      "right" : "private void processPrototypeParent(NodeTraversal t, Node n)",
      "info" : "MethodDeclaration[13296-14848]:MethodDeclaration[13348-14900]"
    }, {
      "left" : "private void addGlobalUseOfSymbol(String name, JSModule module,\n        SymbolType type)",
      "right" : "private void addGlobalUseOfSymbol(String name, JSModule module,\n        SymbolType type)",
      "info" : "MethodDeclaration[14854-15029]:MethodDeclaration[14906-15081]"
    }, {
      "left" : "ProcessExternProperties",
      "right" : "ProcessExternProperties",
      "info" : "TypeDeclaration[15037-15358]:TypeDeclaration[15089-15410]"
    }, {
      "left" : "public void visit(NodeTraversal t, Node n, Node parent)",
      "right" : "public void visit(NodeTraversal t, Node n, Node parent)",
      "info" : "MethodDeclaration[15115-15354]:MethodDeclaration[15167-15406]"
    }, {
      "left" : "PropagateReferences",
      "right" : "PropagateReferences",
      "info" : "TypeDeclaration[15362-15876]:TypeDeclaration[15414-15928]"
    }, {
      "left" : "public boolean traverseEdge(NameInfo start, JSModule edge, NameInfo dest)",
      "right" : "public boolean traverseEdge(NameInfo start, JSModule edge, NameInfo dest)",
      "info" : "MethodDeclaration[15452-15872]:MethodDeclaration[15504-15924]"
    }, {
      "left" : "Symbol",
      "right" : "Symbol",
      "info" : "TypeDeclaration[16061-16307]:TypeDeclaration[16113-16359]"
    }, {
      "left" : "void remove();",
      "right" : "void remove();",
      "info" : "MethodDeclaration[16140-16214]:MethodDeclaration[16192-16266]"
    }, {
      "left" : "JSModule getModule();",
      "right" : "JSModule getModule();",
      "info" : "MethodDeclaration[16220-16303]:MethodDeclaration[16272-16355]"
    }, {
      "left" : "enum : SymbolType",
      "right" : "enum : SymbolType",
      "info" : "EnumDeclaration[16311-16363]:EnumDeclaration[16363-16415]"
    }, {
      "left" : "GlobalFunction",
      "right" : "GlobalFunction",
      "info" : "TypeDeclaration[16367-17558]:TypeDeclaration[16419-17610]"
    }, {
      "left" : "private final Node nameNode;",
      "right" : "private final Node nameNode;",
      "info" : "FieldDeclaration[16499-16527]:FieldDeclaration[16551-16579]"
    }, {
      "left" : "private final JSModule module;",
      "right" : "private final JSModule module;",
      "info" : "FieldDeclaration[16532-16562]:FieldDeclaration[16584-16614]"
    }, {
      "left" : "GlobalFunction(Node nameNode, Node parent, Node gramps, JSModule module)",
      "right" : "GlobalFunction(Node nameNode, Node parent, Node gramps, JSModule module)",
      "info" : "MethodDeclaration[16568-16834]:MethodDeclaration[16620-16886]"
    }, {
      "left" : "public void remove()",
      "right" : "public void remove()",
      "info" : "MethodDeclaration[16840-17180]:MethodDeclaration[16892-17232]"
    }, {
      "left" : "public JSModule getModule()",
      "right" : "public JSModule getModule()",
      "info" : "MethodDeclaration[17186-17256]:MethodDeclaration[17238-17308]"
    }, {
      "left" : "public Node getFunctionNode()",
      "right" : "public Node getFunctionNode()",
      "info" : "MethodDeclaration[17262-17554]:MethodDeclaration[17314-17606]"
    }, {
      "left" : "Property",
      "right" : "Property",
      "info" : "TypeDeclaration[17562-17931]:TypeDeclaration[17614-17983]"
    }, {
      "left" : "Node getPrototype();",
      "right" : "Node getPrototype();",
      "info" : "MethodDeclaration[17772-17858]:MethodDeclaration[17824-17910]"
    }, {
      "left" : "Node getValue();",
      "right" : "Node getValue();",
      "info" : "MethodDeclaration[17864-17927]:MethodDeclaration[17916-17979]"
    }, {
      "left" : "AssignmentProperty",
      "right" : "AssignmentProperty",
      "info" : "TypeDeclaration[17935-18848]:TypeDeclaration[17987-18900]"
    }, {
      "left" : "private final Node exprNode;",
      "right" : "private final Node exprNode;",
      "info" : "FieldDeclaration[18140-18168]:FieldDeclaration[18192-18220]"
    }, {
      "left" : "private final JSModule module;",
      "right" : "private final JSModule module;",
      "info" : "FieldDeclaration[18173-18203]:FieldDeclaration[18225-18255]"
    }, {
      "left" : "AssignmentProperty(Node node, JSModule module)",
      "right" : "AssignmentProperty(Node node, JSModule module)",
      "info" : "MethodDeclaration[18209-18368]:MethodDeclaration[18261-18420]"
    }, {
      "left" : "public void remove()",
      "right" : "public void remove()",
      "info" : "MethodDeclaration[18374-18476]:MethodDeclaration[18426-18528]"
    }, {
      "left" : "public Node getPrototype()",
      "right" : "public Node getPrototype()",
      "info" : "MethodDeclaration[18482-18592]:MethodDeclaration[18534-18644]"
    }, {
      "left" : "public Node getValue()",
      "right" : "public Node getValue()",
      "info" : "MethodDeclaration[18598-18687]:MethodDeclaration[18650-18739]"
    }, {
      "left" : "private Node getAssignNode()",
      "right" : "private Node getAssignNode()",
      "info" : "MethodDeclaration[18693-18768]:MethodDeclaration[18745-18820]"
    }, {
      "left" : "public JSModule getModule()",
      "right" : "public JSModule getModule()",
      "info" : "MethodDeclaration[18774-18844]:MethodDeclaration[18826-18896]"
    }, {
      "left" : "LiteralProperty",
      "right" : "LiteralProperty",
      "info" : "TypeDeclaration[18852-19745]:TypeDeclaration[18904-19797]"
    }, {
      "left" : "private final Node key;",
      "right" : "private final Node key;",
      "info" : "FieldDeclaration[19056-19079]:FieldDeclaration[19108-19131]"
    }, {
      "left" : "private final Node value;",
      "right" : "private final Node value;",
      "info" : "FieldDeclaration[19084-19109]:FieldDeclaration[19136-19161]"
    }, {
      "left" : "private final Node map;",
      "right" : "private final Node map;",
      "info" : "FieldDeclaration[19114-19137]:FieldDeclaration[19166-19189]"
    }, {
      "left" : "private final Node assign;",
      "right" : "private final Node assign;",
      "info" : "FieldDeclaration[19142-19168]:FieldDeclaration[19194-19220]"
    }, {
      "left" : "private final JSModule module;",
      "right" : "private final JSModule module;",
      "info" : "FieldDeclaration[19173-19203]:FieldDeclaration[19225-19255]"
    }, {
      "left" : "LiteralProperty(Node key, Node value, Node map, Node assign,\n        JSModule module)",
      "right" : "LiteralProperty(Node key, Node value, Node map, Node assign,\n        JSModule module)",
      "info" : "MethodDeclaration[19209-19428]:MethodDeclaration[19261-19480]"
    }, {
      "left" : "public void remove()",
      "right" : "public void remove()",
      "info" : "MethodDeclaration[19434-19504]:MethodDeclaration[19486-19556]"
    }, {
      "left" : "public Node getPrototype()",
      "right" : "public Node getPrototype()",
      "info" : "MethodDeclaration[19510-19595]:MethodDeclaration[19562-19647]"
    }, {
      "left" : "public Node getValue()",
      "right" : "public Node getValue()",
      "info" : "MethodDeclaration[19601-19665]:MethodDeclaration[19653-19717]"
    }, {
      "left" : "public JSModule getModule()",
      "right" : "public JSModule getModule()",
      "info" : "MethodDeclaration[19671-19741]:MethodDeclaration[19723-19793]"
    }, {
      "left" : "NameContext",
      "right" : "NameContext",
      "info" : "TypeDeclaration[19749-20024]:TypeDeclaration[19801-20076]"
    }, {
      "left" : "final NameInfo name;",
      "right" : "final NameInfo name;",
      "info" : "FieldDeclaration[19920-19940]:FieldDeclaration[19972-19992]"
    }, {
      "left" : "Scope scope;",
      "right" : "Scope scope;",
      "info" : "FieldDeclaration[19945-19957]:FieldDeclaration[19997-20009]"
    }, {
      "left" : "NameContext(NameInfo name)",
      "right" : "NameContext(NameInfo name)",
      "info" : "MethodDeclaration[19962-20020]:MethodDeclaration[20014-20072]"
    }, {
      "left" : "NameInfo",
      "right" : "NameInfo",
      "info" : "TypeDeclaration[20028-22380]:TypeDeclaration[20080-22432]"
    }, {
      "left" : "final String name;",
      "right" : "final String name;",
      "info" : "FieldDeclaration[20134-20152]:FieldDeclaration[20186-20204]"
    }, {
      "left" : "private boolean referenced = false;",
      "right" : "private boolean referenced = false;",
      "info" : "FieldDeclaration[20158-20193]:FieldDeclaration[20210-20245]"
    }, {
      "left" : "private final Deque<Symbol> declarations = new ArrayDeque<Symbol>();",
      "right" : "private final Deque<Symbol> declarations = new ArrayDeque<Symbol>();",
      "info" : "FieldDeclaration[20198-20266]:FieldDeclaration[20250-20318]"
    }, {
      "left" : "private JSModule deepestCommonModuleRef = null;",
      "right" : "private JSModule deepestCommonModuleRef = null;",
      "info" : "FieldDeclaration[20271-20318]:FieldDeclaration[20323-20370]"
    }, {
      "left" : "private boolean readClosureVariables = false;",
      "right" : "private boolean readClosureVariables = false;",
      "info" : "FieldDeclaration[20446-20491]:FieldDeclaration[20498-20543]"
    }, {
      "left" : "NameInfo(String name)",
      "right" : "NameInfo(String name)",
      "info" : "MethodDeclaration[20497-20735]:MethodDeclaration[20549-20787]"
    }, {
      "left" : "public String toString()",
      "right" : "public String toString()",
      "info" : "MethodDeclaration[20741-20792]:MethodDeclaration[20793-20844]"
    }, {
      "left" : "boolean isReferenced()",
      "right" : "boolean isReferenced()",
      "info" : "MethodDeclaration[20798-20931]:MethodDeclaration[20850-20983]"
    }, {
      "left" : "boolean readsClosureVariables()",
      "right" : "boolean readsClosureVariables()",
      "info" : "MethodDeclaration[20937-21070]:MethodDeclaration[20989-21122]"
    }, {
      "left" : "boolean markReference(JSModule module)",
      "right" : "boolean markReference(JSModule module)",
      "info" : "MethodDeclaration[21076-21988]:MethodDeclaration[21128-22040]"
    }, {
      "left" : "JSModule getDeepestCommonModuleRef()",
      "right" : "JSModule getDeepestCommonModuleRef()",
      "info" : "MethodDeclaration[21994-22179]:MethodDeclaration[22046-22231]"
    }, {
      "left" : "Deque<Symbol> getDeclarations()",
      "right" : "Deque<Symbol> getDeclarations()",
      "info" : "MethodDeclaration[22185-22376]:MethodDeclaration[22237-22428]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4626-5444]:Block[4626-5444]"
    }, {
      "left" : "this.compiler = compiler;",
      "right" : "this.compiler = compiler;",
      "info" : "ExpressionStatement[4632-4657]:ExpressionStatement[4632-4657]"
    }, {
      "left" : "this.moduleGraph = moduleGraph;",
      "right" : "this.moduleGraph = moduleGraph;",
      "info" : "ExpressionStatement[4662-4693]:ExpressionStatement[4662-4693]"
    }, {
      "left" : "this.canModifyExterns = canModifyExterns;",
      "right" : "this.canModifyExterns = canModifyExterns;",
      "info" : "ExpressionStatement[4698-4739]:ExpressionStatement[4698-4739]"
    }, {
      "left" : "this.anchorUnusedVars = anchorUnusedVars;",
      "right" : "this.anchorUnusedVars = anchorUnusedVars;",
      "info" : "ExpressionStatement[4744-4785]:ExpressionStatement[4744-4785]"
    }, {
      "left" : "if (moduleGraph != null)",
      "right" : "if (moduleGraph != null)",
      "info" : "IfStatement[4791-4911]:IfStatement[4791-4911]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4816-4872]:Block[4816-4872]"
    }, {
      "left" : "firstModule = moduleGraph.getRootModule();",
      "right" : "firstModule = moduleGraph.getRootModule();",
      "info" : "ExpressionStatement[4824-4866]:ExpressionStatement[4824-4866]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4878-4911]:Block[4878-4911]"
    }, {
      "left" : "firstModule = null;",
      "right" : "firstModule = null;",
      "info" : "ExpressionStatement[4886-4905]:ExpressionStatement[4886-4905]"
    }, {
      "left" : "globalNode.markReference(null);",
      "right" : "globalNode.markReference(null);",
      "info" : "ExpressionStatement[4917-4948]:ExpressionStatement[4917-4948]"
    }, {
      "left" : "externNode.markReference(null);",
      "right" : "externNode.markReference(null);",
      "info" : "ExpressionStatement[4953-4984]:ExpressionStatement[4953-4984]"
    }, {
      "left" : "symbolGraph.createNode(globalNode);",
      "right" : "symbolGraph.createNode(globalNode);",
      "info" : "ExpressionStatement[4989-5024]:ExpressionStatement[4989-5024]"
    }, {
      "left" : "symbolGraph.createNode(externNode);",
      "right" : "symbolGraph.createNode(externNode);",
      "info" : "ExpressionStatement[5029-5064]:ExpressionStatement[5029-5064]"
    }, {
      "left" : "for (String property : IMPLICITLY_USED_PROPERTIES)",
      "right" : "for (String property : IMPLICITLY_USED_PROPERTIES)",
      "info" : "EnhancedForStatement[5070-5440]:EnhancedForStatement[5070-5440]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5121-5440]:Block[5121-5440]"
    }, {
      "left" : "NameInfo nameInfo = getNameInfoForName(property, PROPERTY);",
      "right" : "NameInfo nameInfo = getNameInfoForName(property, PROPERTY);",
      "info" : "VariableDeclarationStatement[5129-5188]:VariableDeclarationStatement[5129-5188]"
    }, {
      "left" : "if (moduleGraph == null)",
      "right" : "if (moduleGraph == null)",
      "info" : "IfStatement[5195-5434]:IfStatement[5195-5434]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5220-5286]:Block[5220-5286]"
    }, {
      "left" : "symbolGraph.connect(externNode, null, nameInfo);",
      "right" : "symbolGraph.connect(externNode, null, nameInfo);",
      "info" : "ExpressionStatement[5230-5278]:ExpressionStatement[5230-5278]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5292-5434]:Block[5292-5434]"
    }, {
      "left" : "for (JSModule module : moduleGraph.getAllModules())",
      "right" : "for (JSModule module : moduleGraph.getAllModules())",
      "info" : "EnhancedForStatement[5302-5426]:EnhancedForStatement[5302-5426]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5354-5426]:Block[5354-5426]"
    }, {
      "left" : "symbolGraph.connect(externNode, module, nameInfo);",
      "right" : "symbolGraph.connect(externNode, module, nameInfo);",
      "info" : "ExpressionStatement[5366-5416]:ExpressionStatement[5366-5416]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5496-5914]:Block[5496-5914]"
    }, {
      "left" : "if (!canModifyExterns)",
      "right" : "if (!canModifyExterns)",
      "info" : "IfStatement[5502-5625]:IfStatement[5502-5625]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5525-5625]:Block[5525-5625]"
    }, {
      "left" : "NodeTraversal.traverse(compiler, externRoot,\n          new ProcessExternProperties());",
      "right" : "NodeTraversal.traverse(compiler, externRoot,\n          new ProcessExternProperties());",
      "info" : "ExpressionStatement[5533-5619]:ExpressionStatement[5533-5619]"
    }, {
      "left" : "NodeTraversal.traverse(compiler, root, new ProcessProperties());",
      "right" : "NodeTraversal.traverse(compiler, root, new ProcessProperties());",
      "info" : "ExpressionStatement[5631-5695]:ExpressionStatement[5631-5695]"
    }, {
      "left" : "FixedPointGraphTraversal<NameInfo, JSModule> t =\n        FixedPointGraphTraversal.newTraversal(new PropagateReferences());",
      "right" : "FixedPointGraphTraversal<NameInfo, JSModule> t =\n        FixedPointGraphTraversal.newTraversal(new PropagateReferences());",
      "info" : "VariableDeclarationStatement[5701-5823]:VariableDeclarationStatement[5701-5823]"
    }, {
      "left" : "t.computeFixedPoint(symbolGraph,\n        Sets.newHashSet(externNode, globalNode));",
      "right" : "t.computeFixedPoint(symbolGraph,\n        Sets.newHashSet(externNode, globalNode));",
      "info" : "ExpressionStatement[5828-5910]:ExpressionStatement[5828-5910]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6029-6169]:Block[6029-6169]"
    }, {
      "left" : "List<NameInfo> result = Lists.newArrayList(propertyNameInfo.values());",
      "right" : "List<NameInfo> result = Lists.newArrayList(propertyNameInfo.values());",
      "info" : "VariableDeclarationStatement[6035-6105]:VariableDeclarationStatement[6035-6105]"
    }, {
      "left" : "result.addAll(varNameInfo.values());",
      "right" : "result.addAll(varNameInfo.values());",
      "info" : "ExpressionStatement[6110-6146]:ExpressionStatement[6110-6146]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[6151-6165]:ReturnStatement[6151-6165]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6445-6761]:Block[6445-6761]"
    }, {
      "left" : "Map<String, NameInfo> map = type == PROPERTY ?\n        propertyNameInfo : varNameInfo;",
      "right" : "Map<String, NameInfo> map = type == PROPERTY ?\n        propertyNameInfo : varNameInfo;",
      "info" : "VariableDeclarationStatement[6451-6537]:VariableDeclarationStatement[6451-6537]"
    }, {
      "left" : "if (map.containsKey(name))",
      "right" : "if (map.containsKey(name))",
      "info" : "IfStatement[6542-6757]:IfStatement[6542-6757]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6569-6604]:Block[6569-6604]"
    }, {
      "left" : "return map.get(name);",
      "right" : "return map.get(name);",
      "info" : "ReturnStatement[6577-6598]:ReturnStatement[6577-6598]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6610-6757]:Block[6610-6757]"
    }, {
      "left" : "NameInfo nameInfo = new NameInfo(name);",
      "right" : "NameInfo nameInfo = new NameInfo(name);",
      "info" : "VariableDeclarationStatement[6618-6657]:VariableDeclarationStatement[6618-6657]"
    }, {
      "left" : "map.put(name, nameInfo);",
      "right" : "map.put(name, nameInfo);",
      "info" : "ExpressionStatement[6664-6688]:ExpressionStatement[6664-6688]"
    }, {
      "left" : "symbolGraph.createNode(nameInfo);",
      "right" : "symbolGraph.createNode(nameInfo);",
      "info" : "ExpressionStatement[6695-6728]:ExpressionStatement[6695-6728]"
    }, {
      "left" : "return nameInfo;",
      "right" : "return nameInfo;",
      "info" : "ReturnStatement[6735-6751]:ReturnStatement[6735-6751]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6943-7003]:Block[6943-7003]"
    }, {
      "left" : "symbolStack.push(new NameContext(globalNode));",
      "right" : "symbolStack.push(new NameContext(globalNode));",
      "info" : "ExpressionStatement[6951-6997]:ExpressionStatement[6951-6997]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7063-7117]:Block[7063-7117]"
    }, {
      "left" : "symbolStack.peek().scope = t.getScope();",
      "right" : "symbolStack.peek().scope = t.getScope();",
      "info" : "ExpressionStatement[7071-7111]:ExpressionStatement[7071-7111]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7176-7184]:Block[7176-7184]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7258-7861]:Block[7258-7861]"
    }, {
      "left" : "if (isPrototypePropertyAssign(n))",
      "right" : "if (isPrototypePropertyAssign(n))",
      "info" : "IfStatement[7266-7836]:IfStatement[7266-7836]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7300-7445]:Block[7300-7445]"
    }, {
      "left" : "symbolStack.push(new NameContext(getNameInfoForName(\n                n.getFirstChild().getLastChild().getString(), PROPERTY)));",
      "right" : "symbolStack.push(new NameContext(getNameInfoForName(\n                n.getFirstChild().getLastChild().getString(), PROPERTY)));",
      "info" : "ExpressionStatement[7310-7437]:ExpressionStatement[7310-7437]"
    }, {
      "left" : "if (isGlobalFunctionDeclaration(t, n))",
      "right" : "if (isGlobalFunctionDeclaration(t, n))",
      "info" : "IfStatement[7451-7836]:IfStatement[7451-7836]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7490-7735]:Block[7490-7735]"
    }, {
      "left" : "String name = parent.getType() == Token.NAME ?\n            parent.getString() /* VAR */ :\n            n.getFirstChild().getString() /* named function */;",
      "right" : "String name = parent.getType() == Token.NAME ?\n            parent.getString() /* VAR */ :\n            n.getFirstChild().getString() /* named function */;",
      "info" : "VariableDeclarationStatement[7500-7653]:VariableDeclarationStatement[7500-7653]"
    }, {
      "left" : "symbolStack.push(new NameContext(getNameInfoForName(name, VAR)));",
      "right" : "symbolStack.push(new NameContext(getNameInfoForName(name, VAR)));",
      "info" : "ExpressionStatement[7662-7727]:ExpressionStatement[7662-7727]"
    }, {
      "left" : "if (NodeUtil.isFunction(n))",
      "right" : "if (NodeUtil.isFunction(n))",
      "info" : "IfStatement[7741-7836]:IfStatement[7741-7836]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7769-7836]:Block[7769-7836]"
    }, {
      "left" : "symbolStack.push(new NameContext(anonymousNode));",
      "right" : "symbolStack.push(new NameContext(anonymousNode));",
      "info" : "ExpressionStatement[7779-7828]:ExpressionStatement[7779-7828]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[7843-7855]:ReturnStatement[7843-7855]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7923-10674]:Block[7923-10674]"
    }, {
      "left" : "if (n.getType() == Token.GETPROP)",
      "right" : "if (n.getType() == Token.GETPROP)",
      "info" : "IfStatement[7931-10507]:IfStatement[7931-10507]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7965-8357]:Block[7965-8357]"
    }, {
      "left" : "String propName = n.getFirstChild().getNext().getString();",
      "right" : "String propName = n.getFirstChild().getNext().getString();",
      "info" : "VariableDeclarationStatement[7975-8033]:VariableDeclarationStatement[7975-8033]"
    }, {
      "left" : "if (propName.equals(\"prototype\"))",
      "right" : "if (propName.equals(\"prototype\"))",
      "info" : "IfStatement[8042-8349]:IfStatement[8042-8349]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8076-8132]:Block[8076-8132]"
    }, {
      "left" : "processPrototypeParent(t, parent);",
      "right" : "processPrototypeParent(t, parent);",
      "info" : "ExpressionStatement[8088-8122]:ExpressionStatement[8088-8122]"
    }, {
      "left" : "if (compiler.getCodingConvention().isExported(propName))",
      "right" : "if (compiler.getCodingConvention().isExported(propName))",
      "info" : "IfStatement[8138-8349]:IfStatement[8138-8349]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8195-8273]:Block[8195-8273]"
    }, {
      "left" : "addGlobalUseOfSymbol(propName, t.getModule(), PROPERTY);",
      "right" : "addGlobalUseOfSymbol(propName, t.getModule(), PROPERTY);",
      "info" : "ExpressionStatement[8207-8263]:ExpressionStatement[8207-8263]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8279-8349]:Block[8279-8349]"
    }, {
      "left" : "addSymbolUse(propName, t.getModule(), PROPERTY);",
      "right" : "addSymbolUse(propName, t.getModule(), PROPERTY);",
      "info" : "ExpressionStatement[8291-8339]:ExpressionStatement[8291-8339]"
    }, {
      "left" : "if (n.getType() == Token.OBJECTLIT &&\n          // Make sure that we're not handling object literals being\n          // assigned to a prototype, as in:\n          // Foo.prototype = {bar: 3, baz: 5};\n          !(parent.getType() == Token.ASSIGN &&\n            parent.getFirstChild().getType() == Token.GETPROP &&\n            parent.getFirstChild().getLastChild().getString().equals(\n                \"prototype\")))",
      "right" : "if (n.getType() == Token.OBJECTLIT &&\n          // Make sure that we're not handling object literals being\n          // assigned to a prototype, as in:\n          // Foo.prototype = {bar: 3, baz: 5};\n          !(parent.getType() == Token.ASSIGN &&\n            parent.getFirstChild().getType() == Token.GETPROP &&\n            parent.getFirstChild().getLastChild().getString().equals(\n                \"prototype\")))",
      "info" : "IfStatement[8363-10507]:IfStatement[8363-10507]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8776-9217]:Block[8776-9217]"
    }, {
      "left" : "for (Node propNameNode = n.getFirstChild(); propNameNode != null;\n             propNameNode = propNameNode.getNext())",
      "right" : "for (Node propNameNode = n.getFirstChild(); propNameNode != null;\n             propNameNode = propNameNode.getNext())",
      "info" : "ForStatement[8872-9209]:ForStatement[8872-9209]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8990-9209]:Block[8990-9209]"
    }, {
      "left" : "if (!propNameNode.isQuotedString())",
      "right" : "if (!propNameNode.isQuotedString())",
      "info" : "IfStatement[9073-9199]:IfStatement[9073-9199]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9109-9199]:Block[9109-9199]"
    }, {
      "left" : "addSymbolUse(propNameNode.getString(), t.getModule(), PROPERTY);",
      "right" : "addSymbolUse(propNameNode.getString(), t.getModule(), PROPERTY);",
      "info" : "ExpressionStatement[9123-9187]:ExpressionStatement[9123-9187]"
    }, {
      "left" : "if (n.getType() == Token.NAME)",
      "right" : "if (n.getType() == Token.NAME)",
      "info" : "IfStatement[9223-10507]:IfStatement[9223-10507]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9254-10507]:Block[9254-10507]"
    }, {
      "left" : "String name = n.getString();",
      "right" : "String name = n.getString();",
      "info" : "VariableDeclarationStatement[9264-9292]:VariableDeclarationStatement[9264-9292]"
    }, {
      "left" : "Var var = t.getScope().getVar(name);",
      "right" : "Var var = t.getScope().getVar(name);",
      "info" : "VariableDeclarationStatement[9302-9338]:VariableDeclarationStatement[9302-9338]"
    }, {
      "left" : "if (var != null)",
      "right" : "if (var != null)",
      "info" : "IfStatement[9347-10499]:IfStatement[9347-10499]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9364-10499]:Block[9364-10499]"
    }, {
      "left" : "if (var.isGlobal())",
      "right" : "if (var.isGlobal())",
      "info" : "IfStatement[9420-10489]:IfStatement[9420-10489]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9440-10153]:Block[9440-10153]"
    }, {
      "left" : "if (var.getInitialValue() != null &&\n                var.getInitialValue().getType() == Token.FUNCTION)",
      "right" : "if (var.getInitialValue() != null &&\n                var.getInitialValue().getType() == Token.FUNCTION)",
      "info" : "IfStatement[9454-9906]:IfStatement[9454-9906]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9558-9906]:Block[9558-9906]"
    }, {
      "left" : "if (t.inGlobalScope())",
      "right" : "if (t.inGlobalScope())",
      "info" : "IfStatement[9574-9892]:IfStatement[9574-9892]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9597-9813]:Block[9597-9813]"
    }, {
      "left" : "if (!processGlobalFunctionDeclaration(t, n, parent,\n                        parent.getParent()))",
      "right" : "if (!processGlobalFunctionDeclaration(t, n, parent,\n                        parent.getParent()))",
      "info" : "IfStatement[9615-9797]:IfStatement[9615-9797]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9712-9797]:Block[9712-9797]"
    }, {
      "left" : "addGlobalUseOfSymbol(name, t.getModule(), VAR);",
      "right" : "addGlobalUseOfSymbol(name, t.getModule(), VAR);",
      "info" : "ExpressionStatement[9732-9779]:ExpressionStatement[9732-9779]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9819-9892]:Block[9819-9892]"
    }, {
      "left" : "addSymbolUse(name, t.getModule(), VAR);",
      "right" : "addSymbolUse(name, t.getModule(), VAR);",
      "info" : "ExpressionStatement[9837-9876]:ExpressionStatement[9837-9876]"
    }, {
      "left" : "if (var.getScope() != t.getScope())",
      "right" : "if (var.getScope() != t.getScope())",
      "info" : "IfStatement[10159-10489]:IfStatement[10159-10489]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10194-10489]:Block[10194-10489]"
    }, {
      "left" : "for (int i = symbolStack.size() - 1; i >= 0; i--)",
      "right" : "for (int i = symbolStack.size() - 1; i >= 0; i--)",
      "info" : "ForStatement[10208-10477]:ForStatement[10208-10477]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10258-10477]:Block[10258-10477]"
    }, {
      "left" : "NameContext context = symbolStack.get(i);",
      "right" : "NameContext context = symbolStack.get(i);",
      "info" : "VariableDeclarationStatement[10274-10315]:VariableDeclarationStatement[10274-10315]"
    }, {
      "left" : "context.name.readClosureVariables = true;",
      "right" : "context.name.readClosureVariables = true;",
      "info" : "ExpressionStatement[10330-10371]:ExpressionStatement[10330-10371]"
    }, {
      "left" : "if (context.scope == var.getScope())",
      "right" : "if (context.scope == var.getScope())",
      "info" : "IfStatement[10386-10463]:IfStatement[10386-10463]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10423-10463]:Block[10423-10463]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[10441-10447]:BreakStatement[10441-10447]"
    }, {
      "left" : "if (isPrototypePropertyAssign(n) ||\n          isGlobalFunctionDeclaration(t, n) ||\n          NodeUtil.isFunction(n))",
      "right" : "if (isPrototypePropertyAssign(n) ||\n          isGlobalFunctionDeclaration(t, n) ||\n          NodeUtil.isFunction(n))",
      "info" : "IfStatement[10515-10668]:IfStatement[10515-10668]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10632-10668]:Block[10632-10668]"
    }, {
      "left" : "symbolStack.pop();",
      "right" : "symbolStack.pop();",
      "info" : "ExpressionStatement[10642-10660]:ExpressionStatement[10642-10660]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10753-11170]:Block[10753-11170]"
    }, {
      "left" : "NameInfo info = getNameInfoForName(name, type);",
      "right" : "NameInfo info = getNameInfoForName(name, type);",
      "info" : "VariableDeclarationStatement[10761-10808]:VariableDeclarationStatement[10761-10808]"
    }, {
      "left" : "NameInfo def = null;",
      "right" : "NameInfo def = null;",
      "info" : "VariableDeclarationStatement[10815-10835]:VariableDeclarationStatement[10815-10835]"
    }, {
      "left" : "for (int i = symbolStack.size() - 1; i >= 0; i--)",
      "right" : "for (int i = symbolStack.size() - 1; i >= 0; i--)",
      "info" : "ForStatement[10916-11077]:ForStatement[10916-11077]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10966-11077]:Block[10966-11077]"
    }, {
      "left" : "def = symbolStack.get(i).name;",
      "right" : "def = symbolStack.get(i).name;",
      "info" : "ExpressionStatement[10976-11006]:ExpressionStatement[10976-11006]"
    }, {
      "left" : "if (def != anonymousNode)",
      "right" : "if (def != anonymousNode)",
      "info" : "IfStatement[11015-11069]:IfStatement[11015-11069]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11041-11069]:Block[11041-11069]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[11053-11059]:BreakStatement[11053-11059]"
    }, {
      "left" : "if (!def.equals(info))",
      "right" : "if (!def.equals(info))",
      "info" : "IfStatement[11084-11164]:IfStatement[11084-11164]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11107-11164]:Block[11107-11164]"
    }, {
      "left" : "symbolGraph.connect(def, module, info);",
      "right" : "symbolGraph.connect(def, module, info);",
      "info" : "ExpressionStatement[11117-11156]:ExpressionStatement[11117-11156]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11359-11543]:Block[11359-11543]"
    }, {
      "left" : "return t.inGlobalScope() &&\n          (NodeUtil.isFunctionDeclaration(n) ||\n           n.getType() == Token.FUNCTION &&\n           n.getParent().getType() == Token.NAME);",
      "right" : "return t.inGlobalScope() &&\n          (NodeUtil.isFunctionDeclaration(n) ||\n           n.getType() == Token.FUNCTION &&\n           n.getParent().getType() == Token.NAME);",
      "info" : "ReturnStatement[11367-11537]:ReturnStatement[11367-11537]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12502-13290]:Block[12554-13342]"
    }, {
      "left" : "Node firstChild = nameNode.getFirstChild();",
      "right" : "Node firstChild = nameNode.getFirstChild();",
      "info" : "VariableDeclarationStatement[12510-12553]:VariableDeclarationStatement[12562-12605]"
    }, {
      "left" : "if (// Check for a named FUNCTION.\n          isGlobalFunctionDeclaration(t, parent) ||\n          // Check for a VAR declaration.\n          firstChild != null &&\n          isGlobalFunctionDeclaration(t, firstChild))",
      "right" : "if (// Check for a named FUNCTION.\n          isGlobalFunctionDeclaration(t, parent) ||\n          // Check for a VAR declaration.\n          firstChild != null &&\n          isGlobalFunctionDeclaration(t, firstChild))",
      "info" : "IfStatement[12561-13264]:IfStatement[12613-13316]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12776-13264]:Block[12828-13316]"
    }, {
      "left" : "String name = nameNode.getString();",
      "right" : "String name = nameNode.getString();",
      "info" : "VariableDeclarationStatement[12786-12821]:VariableDeclarationStatement[12838-12873]"
    }, {
      "left" : "getNameInfoForName(name, VAR).getDeclarations().add(\n            new GlobalFunction(nameNode, parent, gramps, t.getModule()));",
      "right" : "getNameInfoForName(name, VAR).getDeclarations().add(\n            new GlobalFunction(nameNode, parent, gramps, t.getModule()));",
      "info" : "ExpressionStatement[12830-12956]:ExpressionStatement[12882-13008]"
    }, {
      "left" : "if (compiler.getCodingConvention().isExported(name) ||\n            anchorUnusedVars)",
      "right" : "if (compiler.getCodingConvention().isExported(name) ||\n            anchorUnusedVars)",
      "info" : "IfStatement[13080-13234]:IfStatement[13132-13286]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13165-13234]:Block[13217-13286]"
    }, {
      "left" : "addGlobalUseOfSymbol(name, t.getModule(), VAR);",
      "right" : "addGlobalUseOfSymbol(name, t.getModule(), VAR);",
      "info" : "ExpressionStatement[13177-13224]:ExpressionStatement[13229-13276]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[13244-13256]:ReturnStatement[13296-13308]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[13271-13284]:ReturnStatement[13323-13336]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13573-14848]:Block[13625-14900]"
    }, {
      "left" : "switch (n.getType()) {\n        // Foo.prototype.getBar = function() { ... }\n        case Token.GETPROP:\n          Node dest = n.getFirstChild().getNext();\n          Node parent = n.getParent();\n          Node grandParent = parent.getParent();\n\n          if (dest.getType() == Token.STRING &&\n              NodeUtil.isExprAssign(grandParent) &&\n              NodeUtil.isVarOrSimpleAssignLhs(n, parent)) {\n            String name = dest.getString();\n            Property prop = new AssignmentProperty(grandParent, t.getModule());\n            getNameInfoForName(name, PROPERTY).getDeclarations().add(prop);\n          }\n          break;\n\n        // Foo.prototype = { \"getBar\" : function() { ... } }\n        case Token.ASSIGN:\n          Node map = n.getFirstChild().getNext();\n          if (map.getType() == Token.OBJECTLIT) {\n            for (Node key = map.getFirstChild();\n                 key != null; key = key.getNext()) {\n              // May be STRING, GET, or SET,\n              String name = key.getString();\n              Property prop = new LiteralProperty(\n                  key, key.getFirstChild(), map, n, t.getModule());\n              getNameInfoForName(name, PROPERTY).getDeclarations().add(prop);\n            }\n          }\n          break;\n      }",
      "right" : "switch (n.getType()) {\n        // Foo.prototype.getBar = function() { ... }\n        case Token.GETPROP:\n          Node dest = n.getFirstChild().getNext();\n          Node parent = n.getParent();\n          Node grandParent = parent.getParent();\n\n          if (dest.getType() == Token.STRING &&\n              NodeUtil.isExprAssign(grandParent) &&\n              NodeUtil.isVarOrSimpleAssignLhs(n, parent)) {\n            String name = dest.getString();\n            Property prop = new AssignmentProperty(grandParent, t.getModule());\n            getNameInfoForName(name, PROPERTY).getDeclarations().add(prop);\n          }\n          break;\n\n        // Foo.prototype = { \"getBar\" : function() { ... } }\n        case Token.ASSIGN:\n          Node map = n.getFirstChild().getNext();\n          if (map.getType() == Token.OBJECTLIT) {\n            for (Node key = map.getFirstChild();\n                 key != null; key = key.getNext()) {\n              // May be STRING, GET, or SET,\n              String name = key.getString();\n              Property prop = new LiteralProperty(\n                  key, key.getFirstChild(), map, n, t.getModule());\n              getNameInfoForName(name, PROPERTY).getDeclarations().add(prop);\n            }\n          }\n          break;\n      }",
      "info" : "SwitchStatement[13581-14842]:SwitchStatement[13633-14894]"
    }, {
      "left" : "case Token.GETPROP:",
      "right" : "case Token.GETPROP:",
      "info" : "SwitchCase[13665-13684]:SwitchCase[13717-13736]"
    }, {
      "left" : "Node dest = n.getFirstChild().getNext();",
      "right" : "Node dest = n.getFirstChild().getNext();",
      "info" : "VariableDeclarationStatement[13695-13735]:VariableDeclarationStatement[13747-13787]"
    }, {
      "left" : "Node parent = n.getParent();",
      "right" : "Node parent = n.getParent();",
      "info" : "VariableDeclarationStatement[13746-13774]:VariableDeclarationStatement[13798-13826]"
    }, {
      "left" : "Node grandParent = parent.getParent();",
      "right" : "Node grandParent = parent.getParent();",
      "info" : "VariableDeclarationStatement[13785-13823]:VariableDeclarationStatement[13837-13875]"
    }, {
      "left" : "if (dest.getType() == Token.STRING &&\n              NodeUtil.isExprAssign(grandParent) &&\n              NodeUtil.isVarOrSimpleAssignLhs(n, parent))",
      "right" : "if (dest.getType() == Token.STRING &&\n              NodeUtil.isExprAssign(grandParent) &&\n              NodeUtil.isVarOrSimpleAssignLhs(n, parent))",
      "info" : "IfStatement[13835-14196]:IfStatement[13887-14248]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13983-14196]:Block[14035-14248]"
    }, {
      "left" : "String name = dest.getString();",
      "right" : "String name = dest.getString();",
      "info" : "VariableDeclarationStatement[13997-14028]:VariableDeclarationStatement[14049-14080]"
    }, {
      "left" : "Property prop = new AssignmentProperty(grandParent, t.getModule());",
      "right" : "Property prop = new AssignmentProperty(grandParent, t.getModule());",
      "info" : "VariableDeclarationStatement[14041-14108]:VariableDeclarationStatement[14093-14160]"
    }, {
      "left" : "getNameInfoForName(name, PROPERTY).getDeclarations().add(prop);",
      "right" : "getNameInfoForName(name, PROPERTY).getDeclarations().add(prop);",
      "info" : "ExpressionStatement[14121-14184]:ExpressionStatement[14173-14236]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[14207-14213]:BreakStatement[14259-14265]"
    }, {
      "left" : "case Token.ASSIGN:",
      "right" : "case Token.ASSIGN:",
      "info" : "SwitchCase[14284-14302]:SwitchCase[14336-14354]"
    }, {
      "left" : "Node map = n.getFirstChild().getNext();",
      "right" : "Node map = n.getFirstChild().getNext();",
      "info" : "VariableDeclarationStatement[14313-14352]:VariableDeclarationStatement[14365-14404]"
    }, {
      "left" : "if (map.getType() == Token.OBJECTLIT)",
      "right" : "if (map.getType() == Token.OBJECTLIT)",
      "info" : "IfStatement[14363-14817]:IfStatement[14415-14869]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14401-14817]:Block[14453-14869]"
    }, {
      "left" : "for (Node key = map.getFirstChild();\n                 key != null; key = key.getNext())",
      "right" : "for (Node key = map.getFirstChild();\n                 key != null; key = key.getNext())",
      "info" : "ForStatement[14415-14805]:ForStatement[14467-14857]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14503-14805]:Block[14555-14857]"
    }, {
      "left" : "String name = key.getString();",
      "right" : "String name = key.getString();",
      "info" : "VariableDeclarationStatement[14564-14594]:VariableDeclarationStatement[14616-14646]"
    }, {
      "left" : "Property prop = new LiteralProperty(\n                  key, key.getFirstChild(), map, n, t.getModule());",
      "right" : "Property prop = new LiteralProperty(\n                  key, key.getFirstChild(), map, n, t.getModule());",
      "info" : "VariableDeclarationStatement[14609-14713]:VariableDeclarationStatement[14661-14765]"
    }, {
      "left" : "getNameInfoForName(name, PROPERTY).getDeclarations().add(prop);",
      "right" : "getNameInfoForName(name, PROPERTY).getDeclarations().add(prop);",
      "info" : "ExpressionStatement[14728-14791]:ExpressionStatement[14780-14843]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[14828-14834]:BreakStatement[14880-14886]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14943-15029]:Block[14995-15081]"
    }, {
      "left" : "symbolGraph.connect(globalNode, module, getNameInfoForName(name, type));",
      "right" : "symbolGraph.connect(globalNode, module, getNameInfoForName(name, type));",
      "info" : "ExpressionStatement[14951-15023]:ExpressionStatement[15003-15075]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15171-15354]:Block[15223-15406]"
    }, {
      "left" : "if (n.getType() == Token.GETPROP)",
      "right" : "if (n.getType() == Token.GETPROP)",
      "info" : "IfStatement[15179-15348]:IfStatement[15231-15400]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15213-15348]:Block[15265-15400]"
    }, {
      "left" : "symbolGraph.connect(externNode, firstModule,\n            getNameInfoForName(n.getLastChild().getString(), PROPERTY));",
      "right" : "symbolGraph.connect(externNode, firstModule,\n            getNameInfoForName(n.getLastChild().getString(), PROPERTY));",
      "info" : "ExpressionStatement[15223-15340]:ExpressionStatement[15275-15392]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15526-15872]:Block[15578-15924]"
    }, {
      "left" : "if (start.isReferenced())",
      "right" : "if (start.isReferenced())",
      "info" : "IfStatement[15534-15846]:IfStatement[15586-15898]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15560-15846]:Block[15612-15898]"
    }, {
      "left" : "JSModule startModule = start.getDeepestCommonModuleRef();",
      "right" : "JSModule startModule = start.getDeepestCommonModuleRef();",
      "info" : "VariableDeclarationStatement[15570-15627]:VariableDeclarationStatement[15622-15679]"
    }, {
      "left" : "if (startModule != null &&\n            moduleGraph.dependsOn(startModule, edge))",
      "right" : "if (startModule != null &&\n            moduleGraph.dependsOn(startModule, edge))",
      "info" : "IfStatement[15636-15838]:IfStatement[15688-15890]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15717-15778]:Block[15769-15830]"
    }, {
      "left" : "return dest.markReference(startModule);",
      "right" : "return dest.markReference(startModule);",
      "info" : "ReturnStatement[15729-15768]:ReturnStatement[15781-15820]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15784-15838]:Block[15836-15890]"
    }, {
      "left" : "return dest.markReference(edge);",
      "right" : "return dest.markReference(edge);",
      "info" : "ReturnStatement[15796-15828]:ReturnStatement[15848-15880]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[15853-15866]:ReturnStatement[15905-15918]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16641-16834]:Block[16693-16886]"
    }, {
      "left" : "Preconditions.checkState(\n          parent.getType() == Token.VAR ||\n          NodeUtil.isFunctionDeclaration(parent));",
      "right" : "Preconditions.checkState(\n          parent.getType() == Token.VAR ||\n          NodeUtil.isFunctionDeclaration(parent));",
      "info" : "ExpressionStatement[16649-16768]:ExpressionStatement[16701-16820]"
    }, {
      "left" : "this.nameNode = nameNode;",
      "right" : "this.nameNode = nameNode;",
      "info" : "ExpressionStatement[16775-16800]:ExpressionStatement[16827-16852]"
    }, {
      "left" : "this.module = module;",
      "right" : "this.module = module;",
      "info" : "ExpressionStatement[16807-16828]:ExpressionStatement[16859-16880]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16875-17180]:Block[16927-17232]"
    }, {
      "left" : "Node parent = nameNode.getParent();",
      "right" : "Node parent = nameNode.getParent();",
      "info" : "VariableDeclarationStatement[16883-16918]:VariableDeclarationStatement[16935-16970]"
    }, {
      "left" : "if (parent.getType() == Token.FUNCTION || parent.hasOneChild())",
      "right" : "if (parent.getType() == Token.FUNCTION || parent.hasOneChild())",
      "info" : "IfStatement[16925-17174]:IfStatement[16977-17226]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16989-17056]:Block[17041-17108]"
    }, {
      "left" : "NodeUtil.removeChild(parent.getParent(), parent);",
      "right" : "NodeUtil.removeChild(parent.getParent(), parent);",
      "info" : "ExpressionStatement[16999-17048]:ExpressionStatement[17051-17100]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17062-17174]:Block[17114-17226]"
    }, {
      "left" : "Preconditions.checkState(parent.getType() == Token.VAR);",
      "right" : "Preconditions.checkState(parent.getType() == Token.VAR);",
      "info" : "ExpressionStatement[17072-17128]:ExpressionStatement[17124-17180]"
    }, {
      "left" : "parent.removeChild(nameNode);",
      "right" : "parent.removeChild(nameNode);",
      "info" : "ExpressionStatement[17137-17166]:ExpressionStatement[17189-17218]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17228-17256]:Block[17280-17308]"
    }, {
      "left" : "return module;",
      "right" : "return module;",
      "info" : "ReturnStatement[17236-17250]:ReturnStatement[17288-17302]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17292-17554]:Block[17344-17606]"
    }, {
      "left" : "Node parent = nameNode.getParent();",
      "right" : "Node parent = nameNode.getParent();",
      "info" : "VariableDeclarationStatement[17300-17335]:VariableDeclarationStatement[17352-17387]"
    }, {
      "left" : "if (NodeUtil.isFunction(parent))",
      "right" : "if (NodeUtil.isFunction(parent))",
      "info" : "IfStatement[17343-17548]:IfStatement[17395-17600]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17376-17408]:Block[17428-17460]"
    }, {
      "left" : "return parent;",
      "right" : "return parent;",
      "info" : "ReturnStatement[17386-17400]:ReturnStatement[17438-17452]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17414-17548]:Block[17466-17600]"
    }, {
      "left" : "return nameNode.getChildAtIndex(1);",
      "right" : "return nameNode.getChildAtIndex(1);",
      "info" : "ReturnStatement[17505-17540]:ReturnStatement[17557-17592]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18305-18368]:Block[18357-18420]"
    }, {
      "left" : "this.exprNode = node;",
      "right" : "this.exprNode = node;",
      "info" : "ExpressionStatement[18313-18334]:ExpressionStatement[18365-18386]"
    }, {
      "left" : "this.module = module;",
      "right" : "this.module = module;",
      "info" : "ExpressionStatement[18341-18362]:ExpressionStatement[18393-18414]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18409-18476]:Block[18461-18528]"
    }, {
      "left" : "NodeUtil.removeChild(exprNode.getParent(), exprNode);",
      "right" : "NodeUtil.removeChild(exprNode.getParent(), exprNode);",
      "info" : "ExpressionStatement[18417-18470]:ExpressionStatement[18469-18522]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18523-18592]:Block[18575-18644]"
    }, {
      "left" : "return getAssignNode().getFirstChild().getFirstChild();",
      "right" : "return getAssignNode().getFirstChild().getFirstChild();",
      "info" : "ReturnStatement[18531-18586]:ReturnStatement[18583-18638]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18635-18687]:Block[18687-18739]"
    }, {
      "left" : "return getAssignNode().getLastChild();",
      "right" : "return getAssignNode().getLastChild();",
      "info" : "ReturnStatement[18643-18681]:ReturnStatement[18695-18733]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18722-18768]:Block[18774-18820]"
    }, {
      "left" : "return exprNode.getFirstChild();",
      "right" : "return exprNode.getFirstChild();",
      "info" : "ReturnStatement[18730-18762]:ReturnStatement[18782-18814]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18816-18844]:Block[18868-18896]"
    }, {
      "left" : "return module;",
      "right" : "return module;",
      "info" : "ReturnStatement[18824-18838]:ReturnStatement[18876-18890]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19295-19428]:Block[19347-19480]"
    }, {
      "left" : "this.key = key;",
      "right" : "this.key = key;",
      "info" : "ExpressionStatement[19303-19318]:ExpressionStatement[19355-19370]"
    }, {
      "left" : "this.value = value;",
      "right" : "this.value = value;",
      "info" : "ExpressionStatement[19325-19344]:ExpressionStatement[19377-19396]"
    }, {
      "left" : "this.map = map;",
      "right" : "this.map = map;",
      "info" : "ExpressionStatement[19351-19366]:ExpressionStatement[19403-19418]"
    }, {
      "left" : "this.assign = assign;",
      "right" : "this.assign = assign;",
      "info" : "ExpressionStatement[19373-19394]:ExpressionStatement[19425-19446]"
    }, {
      "left" : "this.module = module;",
      "right" : "this.module = module;",
      "info" : "ExpressionStatement[19401-19422]:ExpressionStatement[19453-19474]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19469-19504]:Block[19521-19556]"
    }, {
      "left" : "map.removeChild(key);",
      "right" : "map.removeChild(key);",
      "info" : "ExpressionStatement[19477-19498]:ExpressionStatement[19529-19550]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19551-19595]:Block[19603-19647]"
    }, {
      "left" : "return assign.getFirstChild();",
      "right" : "return assign.getFirstChild();",
      "info" : "ReturnStatement[19559-19589]:ReturnStatement[19611-19641]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19638-19665]:Block[19690-19717]"
    }, {
      "left" : "return value;",
      "right" : "return value;",
      "info" : "ReturnStatement[19646-19659]:ReturnStatement[19698-19711]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19713-19741]:Block[19765-19793]"
    }, {
      "left" : "return module;",
      "right" : "return module;",
      "info" : "ReturnStatement[19721-19735]:ReturnStatement[19773-19787]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19989-20020]:Block[20041-20072]"
    }, {
      "left" : "this.name = name;",
      "right" : "this.name = name;",
      "info" : "ExpressionStatement[19997-20014]:ExpressionStatement[20049-20066]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20704-20735]:Block[20756-20787]"
    }, {
      "left" : "this.name = name;",
      "right" : "this.name = name;",
      "info" : "ExpressionStatement[20712-20729]:ExpressionStatement[20764-20781]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20776-20792]:Block[20828-20844]"
    }, {
      "left" : "return name;",
      "right" : "return name;",
      "info" : "ReturnStatement[20778-20790]:ReturnStatement[20830-20842]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20899-20931]:Block[20951-20983]"
    }, {
      "left" : "return referenced;",
      "right" : "return referenced;",
      "info" : "ReturnStatement[20907-20925]:ReturnStatement[20959-20977]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21028-21070]:Block[21080-21122]"
    }, {
      "left" : "return readClosureVariables;",
      "right" : "return readClosureVariables;",
      "info" : "ReturnStatement[21036-21064]:ReturnStatement[21088-21116]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21358-21988]:Block[21410-22040]"
    }, {
      "left" : "boolean hasChanged = false;",
      "right" : "boolean hasChanged = false;",
      "info" : "VariableDeclarationStatement[21366-21393]:VariableDeclarationStatement[21418-21445]"
    }, {
      "left" : "if (!referenced)",
      "right" : "if (!referenced)",
      "info" : "IfStatement[21400-21480]:IfStatement[21452-21532]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21417-21480]:Block[21469-21532]"
    }, {
      "left" : "referenced = true;",
      "right" : "referenced = true;",
      "info" : "ExpressionStatement[21427-21445]:ExpressionStatement[21479-21497]"
    }, {
      "left" : "hasChanged = true;",
      "right" : "hasChanged = true;",
      "info" : "ExpressionStatement[21454-21472]:ExpressionStatement[21506-21524]"
    }, {
      "left" : "if (moduleGraph != null)",
      "right" : "if (moduleGraph != null)",
      "info" : "IfStatement[21488-21956]:IfStatement[21540-22008]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21513-21956]:Block[21565-22008]"
    }, {
      "left" : "JSModule originalDeepestCommon = deepestCommonModuleRef;",
      "right" : "JSModule originalDeepestCommon = deepestCommonModuleRef;",
      "info" : "VariableDeclarationStatement[21523-21579]:VariableDeclarationStatement[21575-21631]"
    }, {
      "left" : "if (deepestCommonModuleRef == null)",
      "right" : "if (deepestCommonModuleRef == null)",
      "info" : "IfStatement[21589-21845]:IfStatement[21641-21897]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21625-21679]:Block[21677-21731]"
    }, {
      "left" : "deepestCommonModuleRef = module;",
      "right" : "deepestCommonModuleRef = module;",
      "info" : "ExpressionStatement[21637-21669]:ExpressionStatement[21689-21721]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21685-21845]:Block[21737-21897]"
    }, {
      "left" : "deepestCommonModuleRef =\n              moduleGraph.getDeepestCommonDependencyInclusive(\n                  deepestCommonModuleRef, module);",
      "right" : "deepestCommonModuleRef =\n              moduleGraph.getDeepestCommonDependencyInclusive(\n                  deepestCommonModuleRef, module);",
      "info" : "ExpressionStatement[21697-21835]:ExpressionStatement[21749-21887]"
    }, {
      "left" : "if (originalDeepestCommon != deepestCommonModuleRef)",
      "right" : "if (originalDeepestCommon != deepestCommonModuleRef)",
      "info" : "IfStatement[21855-21948]:IfStatement[21907-22000]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21908-21948]:Block[21960-22000]"
    }, {
      "left" : "hasChanged = true;",
      "right" : "hasChanged = true;",
      "info" : "ExpressionStatement[21920-21938]:ExpressionStatement[21972-21990]"
    }, {
      "left" : "return hasChanged;",
      "right" : "return hasChanged;",
      "info" : "ReturnStatement[21964-21982]:ReturnStatement[22016-22034]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22135-22179]:Block[22187-22231]"
    }, {
      "left" : "return deepestCommonModuleRef;",
      "right" : "return deepestCommonModuleRef;",
      "info" : "ReturnStatement[22143-22173]:ReturnStatement[22195-22225]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22342-22376]:Block[22394-22428]"
    }, {
      "left" : "return declarations;",
      "right" : "return declarations;",
      "info" : "ReturnStatement[22350-22370]:ReturnStatement[22402-22422]"
    } ]
  },
  "interFileMappings" : { }
}