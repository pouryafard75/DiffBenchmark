{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "CreateTestAction",
      "right" : "CreateTestAction",
      "info" : "TypeDeclaration[1616-6309]:TypeDeclaration[1616-6145]"
    }, {
      "left" : "private static final String CREATE_TEST_IN_THE_SAME_ROOT = \"create.test.in.the.same.root\";",
      "right" : "private static final String CREATE_TEST_IN_THE_SAME_ROOT = \"create.test.in.the.same.root\";",
      "info" : "FieldDeclaration[1689-1779]:FieldDeclaration[1689-1779]"
    }, {
      "left" : "public String getText()",
      "right" : "public String getText()",
      "info" : "MethodDeclaration[1783-1886]:MethodDeclaration[1783-1886]"
    }, {
      "left" : "public String getFamilyName()",
      "right" : "public String getFamilyName()",
      "info" : "MethodDeclaration[1890-1958]:MethodDeclaration[1890-1958]"
    }, {
      "left" : "public boolean isAvailable(@NotNull Project project, Editor editor, @NotNull PsiElement element)",
      "right" : "public boolean isAvailable(@NotNull Project project, Editor editor, @NotNull PsiElement element)",
      "info" : "MethodDeclaration[1962-2558]:MethodDeclaration[1962-2558]"
    }, {
      "left" : "public static boolean isAvailableForElement(PsiElement element)",
      "right" : "public static boolean isAvailableForElement(PsiElement element)",
      "info" : "MethodDeclaration[2562-3103]:MethodDeclaration[2562-3103]"
    }, {
      "left" : "public void invoke(final @NotNull Project project, Editor editor, @NotNull PsiElement element) throws IncorrectOperationException",
      "right" : "public void invoke(final @NotNull Project project, Editor editor, @NotNull PsiElement element) throws IncorrectOperationException",
      "info" : "MethodDeclaration[3107-4734]:MethodDeclaration[3107-4734]"
    }, {
      "left" : "public void run()",
      "right" : "public void run()",
      "info" : "MethodDeclaration[4407-4664]:MethodDeclaration[4407-4664]"
    }, {
      "left" : "protected CreateTestDialog createTestDialog(Project project, Module srcModule, PsiClass srcClass, PsiPackage srcPackage)",
      "right" : "protected CreateTestDialog createTestDialog(Project project, Module srcModule, PsiClass srcClass, PsiPackage srcPackage)",
      "info" : "MethodDeclaration[4738-4950]:MethodDeclaration[4738-4950]"
    }, {
      "left" : "private static void checkForTestRoots(final Module srcModule, final Set<VirtualFile> testFolders, final Set<Module> processed)",
      "right" : "protected static void checkForTestRoots(Module srcModule, Set<VirtualFile> testFolders)",
      "info" : "MethodDeclaration[5121-5733]:MethodDeclaration[4954-5569]"
    }, {
      "left" : "private static PsiClass getContainingClass(PsiElement element)",
      "right" : "private static PsiClass getContainingClass(PsiElement element)",
      "info" : "MethodDeclaration[5737-6244]:MethodDeclaration[5573-6080]"
    }, {
      "left" : "public boolean startInWriteAction()",
      "right" : "public boolean startInWriteAction()",
      "info" : "MethodDeclaration[6248-6307]:MethodDeclaration[6084-6143]"
    } ],
    "mappings" : [
 {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[1616-1622]:Modifier[1616-1622]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[1623-1628]:TYPE_DECLARATION_KIND[1623-1628]"
    }, {
      "left" : "CreateTestAction",
      "right" : "CreateTestAction",
      "info" : "SimpleName[1629-1645]:SimpleName[1629-1645]"
    }, {
      "left" : "PsiElementBaseIntentionAction",
      "right" : "PsiElementBaseIntentionAction",
      "info" : "SimpleType[1654-1683]:SimpleType[1654-1683]"
    }, {
      "left" : "@NotNull",
      "right" : "@NotNull",
      "info" : "MarkerAnnotation[1783-1791]:MarkerAnnotation[1783-1791]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[1794-1800]:Modifier[1794-1800]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[1801-1807]:SimpleType[1801-1807]"
    }, {
      "left" : "getText",
      "right" : "getText",
      "info" : "SimpleName[1808-1815]:SimpleName[1808-1815]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1818-1886]:Block[1818-1886]"
    }, {
      "left" : "return CodeInsightBundle.message(\"intention.create.test\");",
      "right" : "return CodeInsightBundle.message(\"intention.create.test\");",
      "info" : "ReturnStatement[1824-1882]:ReturnStatement[1824-1882]"
    }, {
      "left" : "@NotNull",
      "right" : "@NotNull",
      "info" : "MarkerAnnotation[1890-1898]:MarkerAnnotation[1890-1898]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[1901-1907]:Modifier[1901-1907]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[1908-1914]:SimpleType[1908-1914]"
    }, {
      "left" : "getFamilyName",
      "right" : "getFamilyName",
      "info" : "SimpleName[1915-1928]:SimpleName[1915-1928]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1931-1958]:Block[1931-1958]"
    }, {
      "left" : "return getText();",
      "right" : "return getText();",
      "info" : "ReturnStatement[1937-1954]:ReturnStatement[1937-1954]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[1962-1968]:Modifier[1962-1968]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[1969-1976]:PrimitiveType[1969-1976]"
    }, {
      "left" : "isAvailable",
      "right" : "isAvailable",
      "info" : "SimpleName[1977-1988]:SimpleName[1977-1988]"
    }, {
      "left" : "@NotNull Project project",
      "right" : "@NotNull Project project",
      "info" : "SingleVariableDeclaration[1989-2013]:SingleVariableDeclaration[1989-2013]"
    }, {
      "left" : "Editor editor",
      "right" : "Editor editor",
      "info" : "SingleVariableDeclaration[2015-2028]:SingleVariableDeclaration[2015-2028]"
    }, {
      "left" : "@NotNull PsiElement element",
      "right" : "@NotNull PsiElement element",
      "info" : "SingleVariableDeclaration[2030-2057]:SingleVariableDeclaration[2030-2057]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2059-2558]:Block[2059-2558]"
    }, {
      "left" : "if (!isAvailableForElement(element))",
      "right" : "if (!isAvailableForElement(element))",
      "info" : "IfStatement[2065-2115]:IfStatement[2065-2115]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[2102-2115]:ReturnStatement[2102-2115]"
    }, {
      "left" : "PsiClass psiClass = getContainingClass(element);",
      "right" : "PsiClass psiClass = getContainingClass(element);",
      "info" : "VariableDeclarationStatement[2121-2169]:VariableDeclarationStatement[2121-2169]"
    }, {
      "left" : "assert psiClass != null;",
      "right" : "assert psiClass != null;",
      "info" : "AssertStatement[2175-2199]:AssertStatement[2175-2199]"
    }, {
      "left" : "PsiElement leftBrace = psiClass.getLBrace();",
      "right" : "PsiElement leftBrace = psiClass.getLBrace();",
      "info" : "VariableDeclarationStatement[2204-2248]:VariableDeclarationStatement[2204-2248]"
    }, {
      "left" : "if (leftBrace == null)",
      "right" : "if (leftBrace == null)",
      "info" : "IfStatement[2253-2289]:IfStatement[2253-2289]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[2276-2289]:ReturnStatement[2276-2289]"
    }, {
      "left" : "if (element.getTextOffset() >= leftBrace.getTextOffset())",
      "right" : "if (element.getTextOffset() >= leftBrace.getTextOffset())",
      "info" : "IfStatement[2294-2365]:IfStatement[2294-2365]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[2352-2365]:ReturnStatement[2352-2365]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[2542-2554]:ReturnStatement[2542-2554]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[2562-2568]:Modifier[2562-2568]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[2569-2575]:Modifier[2569-2575]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[2576-2583]:PrimitiveType[2576-2583]"
    }, {
      "left" : "isAvailableForElement",
      "right" : "isAvailableForElement",
      "info" : "SimpleName[2584-2605]:SimpleName[2584-2605]"
    }, {
      "left" : "PsiElement element",
      "right" : "PsiElement element",
      "info" : "SingleVariableDeclaration[2606-2624]:SingleVariableDeclaration[2606-2624]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2626-3103]:Block[2626-3103]"
    }, {
      "left" : "if (Extensions.getExtensions(TestFramework.EXTENSION_NAME).length == 0)",
      "right" : "if (Extensions.getExtensions(TestFramework.EXTENSION_NAME).length == 0)",
      "info" : "IfStatement[2632-2717]:IfStatement[2632-2717]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[2704-2717]:ReturnStatement[2704-2717]"
    }, {
      "left" : "if (element == null)",
      "right" : "if (element == null)",
      "info" : "IfStatement[2723-2757]:IfStatement[2723-2757]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[2744-2757]:ReturnStatement[2744-2757]"
    }, {
      "left" : "PsiClass psiClass = getContainingClass(element);",
      "right" : "PsiClass psiClass = getContainingClass(element);",
      "info" : "VariableDeclarationStatement[2763-2811]:VariableDeclarationStatement[2763-2811]"
    }, {
      "left" : "if (psiClass == null)",
      "right" : "if (psiClass == null)",
      "info" : "IfStatement[2817-2852]:IfStatement[2817-2852]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[2839-2852]:ReturnStatement[2839-2852]"
    }, {
      "left" : "Module srcModule = ModuleUtilCore.findModuleForPsiElement(psiClass);",
      "right" : "Module srcModule = ModuleUtilCore.findModuleForPsiElement(psiClass);",
      "info" : "VariableDeclarationStatement[2858-2926]:VariableDeclarationStatement[2858-2926]"
    }, {
      "left" : "if (srcModule == null)",
      "right" : "if (srcModule == null)",
      "info" : "IfStatement[2931-2967]:IfStatement[2931-2967]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[2954-2967]:ReturnStatement[2954-2967]"
    }, {
      "left" : "if (psiClass.isAnnotationType() ||\n        psiClass instanceof PsiAnonymousClass)",
      "right" : "if (psiClass.isAnnotationType() ||\n        psiClass instanceof PsiAnonymousClass)",
      "info" : "IfStatement[2973-3082]:IfStatement[2973-3082]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3055-3082]:Block[3055-3082]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[3063-3076]:ReturnStatement[3063-3076]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[3087-3099]:ReturnStatement[3087-3099]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[3107-3116]:MarkerAnnotation[3107-3116]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[3119-3125]:Modifier[3119-3125]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[3126-3130]:PrimitiveType[3126-3130]"
    }, {
      "left" : "invoke",
      "right" : "invoke",
      "info" : "SimpleName[3131-3137]:SimpleName[3131-3137]"
    }, {
      "left" : "final @NotNull Project project",
      "right" : "final @NotNull Project project",
      "info" : "SingleVariableDeclaration[3138-3168]:SingleVariableDeclaration[3138-3168]"
    }, {
      "left" : "Editor editor",
      "right" : "Editor editor",
      "info" : "SingleVariableDeclaration[3170-3183]:SingleVariableDeclaration[3170-3183]"
    }, {
      "left" : "@NotNull PsiElement element",
      "right" : "@NotNull PsiElement element",
      "info" : "SingleVariableDeclaration[3185-3212]:SingleVariableDeclaration[3185-3212]"
    }, {
      "left" : "IncorrectOperationException",
      "right" : "IncorrectOperationException",
      "info" : "SimpleType[3221-3248]:SimpleType[3221-3248]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3249-4734]:Block[3249-4734]"
    }, {
      "left" : "final Module srcModule = ModuleUtilCore.findModuleForPsiElement(element);",
      "right" : "final Module srcModule = ModuleUtilCore.findModuleForPsiElement(element);",
      "info" : "VariableDeclarationStatement[3255-3328]:VariableDeclarationStatement[3255-3328]"
    }, {
      "left" : "final PsiClass srcClass = getContainingClass(element);",
      "right" : "final PsiClass srcClass = getContainingClass(element);",
      "info" : "VariableDeclarationStatement[3333-3387]:VariableDeclarationStatement[3333-3387]"
    }, {
      "left" : "if (srcClass == null)",
      "right" : "if (srcClass == null)",
      "info" : "IfStatement[3393-3422]:IfStatement[3393-3422]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[3415-3422]:ReturnStatement[3415-3422]"
    }, {
      "left" : "PsiDirectory srcDir = element.getContainingFile().getContainingDirectory();",
      "right" : "PsiDirectory srcDir = element.getContainingFile().getContainingDirectory();",
      "info" : "VariableDeclarationStatement[3428-3503]:VariableDeclarationStatement[3428-3503]"
    }, {
      "left" : "PsiPackage srcPackage = JavaDirectoryService.getInstance().getPackage(srcDir);",
      "right" : "PsiPackage srcPackage = JavaDirectoryService.getInstance().getPackage(srcDir);",
      "info" : "VariableDeclarationStatement[3508-3586]:VariableDeclarationStatement[3508-3586]"
    }, {
      "left" : "final PropertiesComponent propertiesComponent = PropertiesComponent.getInstance();",
      "right" : "final PropertiesComponent propertiesComponent = PropertiesComponent.getInstance();",
      "info" : "VariableDeclarationStatement[3592-3674]:VariableDeclarationStatement[3592-3674]"
    }, {
      "left" : "final HashSet<VirtualFile> testFolders = new HashSet<VirtualFile>();",
      "right" : "final HashSet<VirtualFile> testFolders = new HashSet<VirtualFile>();",
      "info" : "VariableDeclarationStatement[3679-3747]:VariableDeclarationStatement[3679-3747]"
    }, {
      "left" : "checkForTestRoots(srcModule, testFolders);",
      "right" : "checkForTestRoots(srcModule, testFolders);",
      "info" : "ExpressionStatement[3752-3794]:ExpressionStatement[3752-3794]"
    }, {
      "left" : "if (testFolders.isEmpty() && !propertiesComponent.getBoolean(CREATE_TEST_IN_THE_SAME_ROOT, false))",
      "right" : "if (testFolders.isEmpty() && !propertiesComponent.getBoolean(CREATE_TEST_IN_THE_SAME_ROOT, false))",
      "info" : "IfStatement[3799-4184]:IfStatement[3799-4184]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3898-4184]:Block[3898-4184]"
    }, {
      "left" : "if (Messages.showOkCancelDialog(project, \"Create test in the same source root?\", \"No Test Roots Found\", Messages.getQuestionIcon()) !=\n          Messages.OK)",
      "right" : "if (Messages.showOkCancelDialog(project, \"Create test in the same source root?\", \"No Test Roots Found\", Messages.getQuestionIcon()) !=\n          Messages.OK)",
      "info" : "IfStatement[3906-4089]:IfStatement[3906-4089]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4064-4089]:Block[4064-4089]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[4074-4081]:ReturnStatement[4074-4081]"
    }, {
      "left" : "propertiesComponent.setValue(CREATE_TEST_IN_THE_SAME_ROOT, String.valueOf(true));",
      "right" : "propertiesComponent.setValue(CREATE_TEST_IN_THE_SAME_ROOT, String.valueOf(true));",
      "info" : "ExpressionStatement[4097-4178]:ExpressionStatement[4097-4178]"
    }, {
      "left" : "final CreateTestDialog d = createTestDialog(project, srcModule, srcClass, srcPackage);",
      "right" : "final CreateTestDialog d = createTestDialog(project, srcModule, srcClass, srcPackage);",
      "info" : "VariableDeclarationStatement[4190-4276]:VariableDeclarationStatement[4190-4276]"
    }, {
      "left" : "if (!d.showAndGet())",
      "right" : "if (!d.showAndGet())",
      "info" : "IfStatement[4281-4323]:IfStatement[4281-4323]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4302-4323]:Block[4302-4323]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[4310-4317]:ReturnStatement[4310-4317]"
    }, {
      "left" : "CommandProcessor.getInstance().executeCommand(project, new Runnable() {\n      @Override\n      public void run() {\n        TestFramework framework = d.getSelectedTestFrameworkDescriptor();\n        TestGenerator generator = TestGenerators.INSTANCE.forLanguage(framework.getLanguage());\n        generator.generateTest(project, d);\n      }\n    }, CodeInsightBundle.message(\"intention.create.test\"), this);",
      "right" : "CommandProcessor.getInstance().executeCommand(project, new Runnable() {\n      @Override\n      public void run() {\n        TestFramework framework = d.getSelectedTestFrameworkDescriptor();\n        TestGenerator generator = TestGenerators.INSTANCE.forLanguage(framework.getLanguage());\n        generator.generateTest(project, d);\n      }\n    }, CodeInsightBundle.message(\"intention.create.test\"), this);",
      "info" : "ExpressionStatement[4329-4730]:ExpressionStatement[4329-4730]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[4407-4416]:MarkerAnnotation[4407-4416]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[4423-4429]:Modifier[4423-4429]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[4430-4434]:PrimitiveType[4430-4434]"
    }, {
      "left" : "run",
      "right" : "run",
      "info" : "SimpleName[4435-4438]:SimpleName[4435-4438]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4441-4664]:Block[4441-4664]"
    }, {
      "left" : "TestFramework framework = d.getSelectedTestFrameworkDescriptor();",
      "right" : "TestFramework framework = d.getSelectedTestFrameworkDescriptor();",
      "info" : "VariableDeclarationStatement[4451-4516]:VariableDeclarationStatement[4451-4516]"
    }, {
      "left" : "TestGenerator generator = TestGenerators.INSTANCE.forLanguage(framework.getLanguage());",
      "right" : "TestGenerator generator = TestGenerators.INSTANCE.forLanguage(framework.getLanguage());",
      "info" : "VariableDeclarationStatement[4525-4612]:VariableDeclarationStatement[4525-4612]"
    }, {
      "left" : "generator.generateTest(project, d);",
      "right" : "generator.generateTest(project, d);",
      "info" : "ExpressionStatement[4621-4656]:ExpressionStatement[4621-4656]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[4738-4747]:Modifier[4738-4747]"
    }, {
      "left" : "CreateTestDialog",
      "right" : "CreateTestDialog",
      "info" : "SimpleType[4748-4764]:SimpleType[4748-4764]"
    }, {
      "left" : "createTestDialog",
      "right" : "createTestDialog",
      "info" : "SimpleName[4765-4781]:SimpleName[4765-4781]"
    }, {
      "left" : "Project project",
      "right" : "Project project",
      "info" : "SingleVariableDeclaration[4782-4797]:SingleVariableDeclaration[4782-4797]"
    }, {
      "left" : "Module srcModule",
      "right" : "Module srcModule",
      "info" : "SingleVariableDeclaration[4799-4815]:SingleVariableDeclaration[4799-4815]"
    }, {
      "left" : "PsiClass srcClass",
      "right" : "PsiClass srcClass",
      "info" : "SingleVariableDeclaration[4817-4834]:SingleVariableDeclaration[4817-4834]"
    }, {
      "left" : "PsiPackage srcPackage",
      "right" : "PsiPackage srcPackage",
      "info" : "SingleVariableDeclaration[4836-4857]:SingleVariableDeclaration[4836-4857]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4859-4950]:Block[4859-4950]"
    }, {
      "left" : "return new CreateTestDialog(project, getText(), srcClass, srcPackage, srcModule);",
      "right" : "return new CreateTestDialog(project, getText(), srcClass, srcPackage, srcModule);",
      "info" : "ReturnStatement[4865-4946]:ReturnStatement[4865-4946]"
    }, {
      "left" : "Module srcModule",
      "right" : "Module srcModule",
      "info" : "SingleVariableDeclaration[4994-5010]:SingleVariableDeclaration[4994-5010]"
    }, {
      "left" : "Set<VirtualFile> testFolders",
      "right" : "Set<VirtualFile> testFolders",
      "info" : "SingleVariableDeclaration[5012-5040]:SingleVariableDeclaration[5012-5040]"
    }, {
      "left" : "private",
      "right" : "protected",
      "info" : "Modifier[5121-5128]:Modifier[4954-4963]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[5129-5135]:Modifier[4964-4970]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[5136-5140]:PrimitiveType[4971-4975]"
    }, {
      "left" : "checkForTestRoots",
      "right" : "checkForTestRoots",
      "info" : "SimpleName[5141-5158]:SimpleName[4976-4993]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5248-5733]:Block[5042-5569]"
    }, {
      "left" : "testFolders.addAll(ModuleRootManager.getInstance(srcModule).getSourceRoots(JavaSourceRootType.TEST_SOURCE));",
      "right" : "testFolders.addAll(ModuleRootManager.getInstance(srcModule).getSourceRoots(JavaSourceRootType.TEST_SOURCE));",
      "info" : "ExpressionStatement[5347-5455]:ExpressionStatement[5048-5156]"
    }, {
      "left" : "if (isFirst && !testFolders.isEmpty())",
      "right" : "if (!testFolders.isEmpty())",
      "info" : "IfStatement[5460-5506]:IfStatement[5198-5233]"
    }, {
      "left" : "!testFolders.isEmpty()",
      "right" : "!testFolders.isEmpty()",
      "info" : "PrefixExpression[5475-5497]:PrefixExpression[5202-5224]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[5499-5506]:ReturnStatement[5226-5233]"
    }, {
      "left" : "final HashSet<Module> modules = new HashSet<Module>();",
      "right" : "final HashSet<Module> modules = new HashSet<Module>();",
      "info" : "VariableDeclarationStatement[5512-5566]:VariableDeclarationStatement[5293-5347]"
    }, {
      "left" : "ModuleUtilCore.collectModulesDependsOn(srcModule, modules);",
      "right" : "ModuleUtilCore.collectModulesDependsOn(srcModule, modules);",
      "info" : "ExpressionStatement[5571-5630]:ExpressionStatement[5352-5411]"
    }, {
      "left" : "for (Module module : modules)",
      "right" : "for (Module module : modules)",
      "info" : "EnhancedForStatement[5635-5729]:EnhancedForStatement[5416-5565]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5665-5729]:Block[5446-5565]"
    }, {
      "left" : "checkForTestRoots(module, testFolders, processed);",
      "right" : "testFolders.addAll(ModuleRootManager.getInstance(module).getSourceRoots(JavaSourceRootType.TEST_SOURCE));",
      "info" : "ExpressionStatement[5673-5723]:ExpressionStatement[5454-5559]"
    }, {
      "left" : "checkForTestRoots",
      "right" : "addAll",
      "info" : "SimpleName[5673-5690]:SimpleName[5466-5472]"
    }, {
      "left" : "@Nullable",
      "right" : "@Nullable",
      "info" : "MarkerAnnotation[5737-5746]:MarkerAnnotation[5573-5582]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[5749-5756]:Modifier[5585-5592]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[5757-5763]:Modifier[5593-5599]"
    }, {
      "left" : "PsiClass",
      "right" : "PsiClass",
      "info" : "SimpleType[5764-5772]:SimpleType[5600-5608]"
    }, {
      "left" : "getContainingClass",
      "right" : "getContainingClass",
      "info" : "SimpleName[5773-5791]:SimpleName[5609-5627]"
    }, {
      "left" : "PsiElement element",
      "right" : "PsiElement element",
      "info" : "SingleVariableDeclaration[5792-5810]:SingleVariableDeclaration[5628-5646]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5812-6244]:Block[5648-6080]"
    }, {
      "left" : "final PsiClass psiClass = PsiTreeUtil.getParentOfType(element, PsiClass.class, false);",
      "right" : "final PsiClass psiClass = PsiTreeUtil.getParentOfType(element, PsiClass.class, false);",
      "info" : "VariableDeclarationStatement[5818-5904]:VariableDeclarationStatement[5654-5740]"
    }, {
      "left" : "if (psiClass == null)",
      "right" : "if (psiClass == null)",
      "info" : "IfStatement[5909-6219]:IfStatement[5745-6055]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5931-6219]:Block[5767-6055]"
    }, {
      "left" : "final PsiFile containingFile = element.getContainingFile();",
      "right" : "final PsiFile containingFile = element.getContainingFile();",
      "info" : "VariableDeclarationStatement[5939-5998]:VariableDeclarationStatement[5775-5834]"
    }, {
      "left" : "if (containingFile instanceof PsiClassOwner)",
      "right" : "if (containingFile instanceof PsiClassOwner)",
      "info" : "IfStatement[6005-6213]:IfStatement[5841-6049]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6049-6213]:Block[5885-6049]"
    }, {
      "left" : "final PsiClass[] classes = ((PsiClassOwner)containingFile).getClasses();",
      "right" : "final PsiClass[] classes = ((PsiClassOwner)containingFile).getClasses();",
      "info" : "VariableDeclarationStatement[6059-6131]:VariableDeclarationStatement[5895-5967]"
    }, {
      "left" : "if (classes.length == 1)",
      "right" : "if (classes.length == 1)",
      "info" : "IfStatement[6140-6205]:IfStatement[5976-6041]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6165-6205]:Block[6001-6041]"
    }, {
      "left" : "return classes[0];",
      "right" : "return classes[0];",
      "info" : "ReturnStatement[6177-6195]:ReturnStatement[6013-6031]"
    }, {
      "left" : "return psiClass;",
      "right" : "return psiClass;",
      "info" : "ReturnStatement[6224-6240]:ReturnStatement[6060-6076]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[6248-6254]:Modifier[6084-6090]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[6255-6262]:PrimitiveType[6091-6098]"
    }, {
      "left" : "startInWriteAction",
      "right" : "startInWriteAction",
      "info" : "SimpleName[6263-6281]:SimpleName[6099-6117]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6284-6307]:Block[6120-6143]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[6290-6303]:ReturnStatement[6126-6139]"
    } ]
  },
  "interFileMappings" : { }
}