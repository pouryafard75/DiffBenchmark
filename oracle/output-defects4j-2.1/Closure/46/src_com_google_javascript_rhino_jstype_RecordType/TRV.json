{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "private static final long serialVersionUID = 1L;",
      "right" : "private static final long serialVersionUID = 1L;",
      "info" : "FieldDeclaration[2552-2600]:FieldDeclaration[2552-2600]"
    }, {
      "left" : "private final SortedMap<String, JSType> properties = Maps.newTreeMap();",
      "right" : "private final SortedMap<String, JSType> properties = Maps.newTreeMap();",
      "info" : "FieldDeclaration[2604-2675]:FieldDeclaration[2604-2675]"
    }, {
      "left" : "private boolean isFrozen = false;",
      "right" : "private boolean isFrozen = false;",
      "info" : "FieldDeclaration[2678-2711]:FieldDeclaration[2678-2711]"
    }, {
      "left" : "RecordType(JSTypeRegistry registry, Map<String, RecordProperty> properties)",
      "right" : "RecordType(JSTypeRegistry registry, Map<String, RecordProperty> properties)",
      "info" : "MethodDeclaration[2715-3551]:MethodDeclaration[2715-3551]"
    }, {
      "left" : "public boolean isEquivalentTo(JSType other)",
      "right" : "public boolean isEquivalentTo(JSType other)",
      "info" : "MethodDeclaration[3555-4151]:MethodDeclaration[3555-4151]"
    }, {
      "left" : "public ObjectType getImplicitPrototype()",
      "right" : "public ObjectType getImplicitPrototype()",
      "info" : "MethodDeclaration[4155-4280]:MethodDeclaration[4155-4280]"
    }, {
      "left" : "boolean defineProperty(String propertyName, JSType type,\n      boolean inferred, Node propertyNode)",
      "right" : "boolean defineProperty(String propertyName, JSType type,\n      boolean inferred, Node propertyNode)",
      "info" : "MethodDeclaration[4284-4603]:MethodDeclaration[4284-4603]"
    }, {
      "left" : "JSType getGreatestSubtypeHelper(JSType that)",
      "right" : "JSType getGreatestSubtypeHelper(JSType that)",
      "info" : "MethodDeclaration[5197-7722]:MethodDeclaration[4607-7132]"
    }, {
      "left" : "RecordType toMaybeRecordType()",
      "right" : "RecordType toMaybeRecordType()",
      "info" : "MethodDeclaration[7726-7791]:MethodDeclaration[7136-7201]"
    }, {
      "left" : "public boolean isSubtype(JSType that)",
      "right" : "public boolean isSubtype(JSType that)",
      "info" : "MethodDeclaration[7795-8407]:MethodDeclaration[7205-7817]"
    }, {
      "left" : "static boolean isSubtype(ObjectType typeA, RecordType typeB)",
      "right" : "static boolean isSubtype(ObjectType typeA, RecordType typeB)",
      "info" : "MethodDeclaration[8411-9964]:MethodDeclaration[7821-9374]"
    }, {
      "left" : "JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope)",
      "right" : "JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope)",
      "info" : "MethodDeclaration[9968-10356]:MethodDeclaration[9378-9766]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3090-3551]:Block[3090-3551]"
    }, {
      "left" : "super(registry, null, null);",
      "right" : "super(registry, null, null);",
      "info" : "SuperConstructorInvocation[3096-3124]:SuperConstructorInvocation[3096-3124]"
    }, {
      "left" : "setPrettyPrint(true);",
      "right" : "setPrettyPrint(true);",
      "info" : "ExpressionStatement[3129-3150]:ExpressionStatement[3129-3150]"
    }, {
      "left" : "for (String property : properties.keySet())",
      "right" : "for (String property : properties.keySet())",
      "info" : "EnhancedForStatement[3156-3494]:EnhancedForStatement[3156-3494]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3200-3494]:Block[3200-3494]"
    }, {
      "left" : "RecordProperty prop = properties.get(property);",
      "right" : "RecordProperty prop = properties.get(property);",
      "info" : "VariableDeclarationStatement[3208-3255]:VariableDeclarationStatement[3208-3255]"
    }, {
      "left" : "if (prop == null)",
      "right" : "if (prop == null)",
      "info" : "IfStatement[3262-3408]:IfStatement[3262-3408]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3280-3408]:Block[3280-3408]"
    }, {
      "left" : "throw new IllegalStateException(\n            \"RecordProperty associated with a property should not be null!\");",
      "right" : "throw new IllegalStateException(\n            \"RecordProperty associated with a property should not be null!\");",
      "info" : "ThrowStatement[3290-3400]:ThrowStatement[3290-3400]"
    }, {
      "left" : "defineDeclaredProperty(property, prop.getType(), prop.getPropertyNode());",
      "right" : "defineDeclaredProperty(property, prop.getType(), prop.getPropertyNode());",
      "info" : "ExpressionStatement[3415-3488]:ExpressionStatement[3415-3488]"
    }, {
      "left" : "isFrozen = true;",
      "right" : "isFrozen = true;",
      "info" : "ExpressionStatement[3531-3547]:ExpressionStatement[3531-3547]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3611-4151]:Block[3611-4151]"
    }, {
      "left" : "if (!other.isRecordType())",
      "right" : "if (!other.isRecordType())",
      "info" : "IfStatement[3617-3671]:IfStatement[3617-3671]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3644-3671]:Block[3644-3671]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[3652-3665]:ReturnStatement[3652-3665]"
    }, {
      "left" : "RecordType otherRecord = other.toMaybeRecordType();",
      "right" : "RecordType otherRecord = other.toMaybeRecordType();",
      "info" : "VariableDeclarationStatement[3704-3755]:VariableDeclarationStatement[3704-3755]"
    }, {
      "left" : "if (otherRecord == this)",
      "right" : "if (otherRecord == this)",
      "info" : "IfStatement[3760-3811]:IfStatement[3760-3811]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3785-3811]:Block[3785-3811]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[3793-3805]:ReturnStatement[3793-3805]"
    }, {
      "left" : "Set<String> keySet = properties.keySet();",
      "right" : "Set<String> keySet = properties.keySet();",
      "info" : "VariableDeclarationStatement[3817-3858]:VariableDeclarationStatement[3817-3858]"
    }, {
      "left" : "Map<String, JSType> otherProps = otherRecord.properties;",
      "right" : "Map<String, JSType> otherProps = otherRecord.properties;",
      "info" : "VariableDeclarationStatement[3863-3919]:VariableDeclarationStatement[3863-3919]"
    }, {
      "left" : "if (!otherProps.keySet().equals(keySet))",
      "right" : "if (!otherProps.keySet().equals(keySet))",
      "info" : "IfStatement[3924-3992]:IfStatement[3924-3992]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3965-3992]:Block[3965-3992]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[3973-3986]:ReturnStatement[3973-3986]"
    }, {
      "left" : "for (String key : keySet)",
      "right" : "for (String key : keySet)",
      "info" : "EnhancedForStatement[3997-4130]:EnhancedForStatement[3997-4130]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4023-4130]:Block[4023-4130]"
    }, {
      "left" : "if (!otherProps.get(key).isEquivalentTo(properties.get(key)))",
      "right" : "if (!otherProps.get(key).isEquivalentTo(properties.get(key)))",
      "info" : "IfStatement[4031-4124]:IfStatement[4031-4124]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4093-4124]:Block[4093-4124]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[4103-4116]:ReturnStatement[4103-4116]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[4135-4147]:ReturnStatement[4135-4147]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4208-4280]:Block[4208-4280]"
    }, {
      "left" : "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);",
      "right" : "return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);",
      "info" : "ReturnStatement[4214-4276]:ReturnStatement[4214-4276]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4396-4603]:Block[4396-4603]"
    }, {
      "left" : "if (isFrozen)",
      "right" : "if (isFrozen)",
      "info" : "IfStatement[4402-4443]:IfStatement[4402-4443]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4416-4443]:Block[4416-4443]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[4424-4437]:ReturnStatement[4424-4437]"
    }, {
      "left" : "if (!inferred)",
      "right" : "if (!inferred)",
      "info" : "IfStatement[4449-4513]:IfStatement[4449-4513]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4464-4513]:Block[4464-4513]"
    }, {
      "left" : "properties.put(propertyName, type);",
      "right" : "properties.put(propertyName, type);",
      "info" : "ExpressionStatement[4472-4507]:ExpressionStatement[4472-4507]"
    }, {
      "left" : "return super.defineProperty(propertyName, type, inferred,\n        propertyNode);",
      "right" : "return super.defineProperty(propertyName, type, inferred,\n        propertyNode);",
      "info" : "ReturnStatement[4519-4599]:ReturnStatement[4519-4599]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5242-7722]:Block[4652-7132]"
    }, {
      "left" : "if (that.isRecordType())",
      "right" : "if (that.isRecordType())",
      "info" : "IfStatement[5248-6261]:IfStatement[4658-5671]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5273-6261]:Block[4683-5671]"
    }, {
      "left" : "RecordType thatRecord = that.toMaybeRecordType();",
      "right" : "RecordType thatRecord = that.toMaybeRecordType();",
      "info" : "VariableDeclarationStatement[5281-5330]:VariableDeclarationStatement[4691-4740]"
    }, {
      "left" : "RecordTypeBuilder builder = new RecordTypeBuilder(registry);",
      "right" : "RecordTypeBuilder builder = new RecordTypeBuilder(registry);",
      "info" : "VariableDeclarationStatement[5337-5397]:VariableDeclarationStatement[4747-4807]"
    }, {
      "left" : "for (String property : properties.keySet())",
      "right" : "for (String property : properties.keySet())",
      "info" : "EnhancedForStatement[5575-5973]:EnhancedForStatement[4985-5383]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5619-5973]:Block[5029-5383]"
    }, {
      "left" : "if (thatRecord.hasProperty(property) &&\n            !thatRecord.getPropertyType(property).isEquivalentTo(\n                getPropertyType(property)))",
      "right" : "if (thatRecord.hasProperty(property) &&\n            !thatRecord.getPropertyType(property).isEquivalentTo(\n                getPropertyType(property)))",
      "info" : "IfStatement[5629-5859]:IfStatement[5039-5269]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5779-5859]:Block[5189-5269]"
    }, {
      "left" : "return registry.getNativeObjectType(JSTypeNative.NO_TYPE);",
      "right" : "return registry.getNativeObjectType(JSTypeNative.NO_TYPE);",
      "info" : "ReturnStatement[5791-5849]:ReturnStatement[5201-5259]"
    }, {
      "left" : "builder.addProperty(property, getPropertyType(property),\n            getPropertyNode(property));",
      "right" : "builder.addProperty(property, getPropertyType(property),\n            getPropertyNode(property));",
      "info" : "ExpressionStatement[5869-5965]:ExpressionStatement[5279-5375]"
    }, {
      "left" : "for (String property : thatRecord.properties.keySet())",
      "right" : "for (String property : thatRecord.properties.keySet())",
      "info" : "EnhancedForStatement[5981-6224]:EnhancedForStatement[5391-5634]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6036-6224]:Block[5446-5634]"
    }, {
      "left" : "if (!hasProperty(property))",
      "right" : "if (!hasProperty(property))",
      "info" : "IfStatement[6046-6216]:IfStatement[5456-5626]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6074-6216]:Block[5484-5626]"
    }, {
      "left" : "builder.addProperty(property, thatRecord.getPropertyType(property),\n              thatRecord.getPropertyNode(property));",
      "right" : "builder.addProperty(property, thatRecord.getPropertyType(property),\n              thatRecord.getPropertyNode(property));",
      "info" : "ExpressionStatement[6086-6206]:ExpressionStatement[5496-5616]"
    }, {
      "left" : "return builder.build();",
      "right" : "return builder.build();",
      "info" : "ReturnStatement[6232-6255]:ReturnStatement[5642-5665]"
    }, {
      "left" : "JSType greatestSubtype = registry.getNativeType(\n        JSTypeNative.NO_OBJECT_TYPE);",
      "right" : "JSType greatestSubtype = registry.getNativeType(\n        JSTypeNative.NO_OBJECT_TYPE);",
      "info" : "VariableDeclarationStatement[6267-6353]:VariableDeclarationStatement[5677-5763]"
    }, {
      "left" : "JSType thatRestrictedToObj =\n        registry.getNativeType(JSTypeNative.OBJECT_TYPE)\n        .getGreatestSubtype(that);",
      "right" : "JSType thatRestrictedToObj =\n        registry.getNativeType(JSTypeNative.OBJECT_TYPE)\n        .getGreatestSubtype(that);",
      "info" : "VariableDeclarationStatement[6358-6478]:VariableDeclarationStatement[5768-5888]"
    }, {
      "left" : "if (!thatRestrictedToObj.isEmptyType())",
      "right" : "if (!thatRestrictedToObj.isEmptyType())",
      "info" : "IfStatement[6483-7690]:IfStatement[5893-7100]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6523-7690]:Block[5933-7100]"
    }, {
      "left" : "for (Map.Entry<String, JSType> entry : properties.entrySet())",
      "right" : "for (Map.Entry<String, JSType> entry : properties.entrySet())",
      "info" : "EnhancedForStatement[6921-7684]:EnhancedForStatement[6331-7094]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6983-7684]:Block[6393-7094]"
    }, {
      "left" : "String propName = entry.getKey();",
      "right" : "String propName = entry.getKey();",
      "info" : "VariableDeclarationStatement[6993-7026]:VariableDeclarationStatement[6403-6436]"
    }, {
      "left" : "JSType propType = entry.getValue();",
      "right" : "JSType propType = entry.getValue();",
      "info" : "VariableDeclarationStatement[7035-7070]:VariableDeclarationStatement[6445-6480]"
    }, {
      "left" : "UnionTypeBuilder builder = new UnionTypeBuilder(registry);",
      "right" : "UnionTypeBuilder builder = new UnionTypeBuilder(registry);",
      "info" : "VariableDeclarationStatement[7079-7137]:VariableDeclarationStatement[6489-6547]"
    }, {
      "left" : "for (ObjectType alt :\n                 registry.getEachReferenceTypeWithProperty(propName))",
      "right" : "for (ObjectType alt :\n                 registry.getEachReferenceTypeWithProperty(propName))",
      "info" : "EnhancedForStatement[7146-7598]:EnhancedForStatement[6556-7008]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7238-7598]:Block[6648-7008]"
    }, {
      "left" : "JSType altPropType = alt.getPropertyType(propName);",
      "right" : "JSType altPropType = alt.getPropertyType(propName);",
      "info" : "VariableDeclarationStatement[7250-7301]:VariableDeclarationStatement[6660-6711]"
    }, {
      "left" : "if (altPropType != null && !alt.isEquivalentTo(this) &&\n              alt.isSubtype(that) &&\n              (propType.isUnknownType() || altPropType.isUnknownType() ||\n                  altPropType.isEquivalentTo(propType)))",
      "right" : "if (altPropType != null && !alt.isEquivalentTo(this) &&\n              alt.isSubtype(that) &&\n              (propType.isUnknownType() || altPropType.isUnknownType() ||\n                  altPropType.isEquivalentTo(propType)))",
      "info" : "IfStatement[7312-7588]:IfStatement[6722-6998]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7536-7588]:Block[6946-6998]"
    }, {
      "left" : "builder.addAlternate(alt);",
      "right" : "builder.addAlternate(alt);",
      "info" : "ExpressionStatement[7550-7576]:ExpressionStatement[6960-6986]"
    }, {
      "left" : "greatestSubtype = greatestSubtype.getLeastSupertype(builder.build());",
      "right" : "greatestSubtype = greatestSubtype.getLeastSupertype(builder.build());",
      "info" : "ExpressionStatement[7607-7676]:ExpressionStatement[7017-7086]"
    }, {
      "left" : "return greatestSubtype;",
      "right" : "return greatestSubtype;",
      "info" : "ReturnStatement[7695-7718]:ReturnStatement[7105-7128]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7769-7791]:Block[7179-7201]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[7775-7787]:ReturnStatement[7185-7197]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7845-8407]:Block[7255-7817]"
    }, {
      "left" : "if (JSType.isSubtypeHelper(this, that))",
      "right" : "if (JSType.isSubtypeHelper(this, that))",
      "info" : "IfStatement[7851-7917]:IfStatement[7261-7327]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7891-7917]:Block[7301-7327]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[7899-7911]:ReturnStatement[7309-7321]"
    }, {
      "left" : "if (registry.getNativeObjectType(\n            JSTypeNative.OBJECT_TYPE).isSubtype(that))",
      "right" : "if (registry.getNativeObjectType(\n            JSTypeNative.OBJECT_TYPE).isSubtype(that))",
      "info" : "IfStatement[7991-8106]:IfStatement[7401-7516]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8080-8106]:Block[7490-7516]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[8088-8100]:ReturnStatement[7498-7510]"
    }, {
      "left" : "if (!that.isRecordType())",
      "right" : "if (!that.isRecordType())",
      "info" : "IfStatement[8284-8337]:IfStatement[7694-7747]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8310-8337]:Block[7720-7747]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[8318-8331]:ReturnStatement[7728-7741]"
    }, {
      "left" : "return RecordType.isSubtype(this, that.toMaybeRecordType());",
      "right" : "return RecordType.isSubtype(this, that.toMaybeRecordType());",
      "info" : "ReturnStatement[8343-8403]:ReturnStatement[7753-7813]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8523-9964]:Block[7933-9374]"
    }, {
      "left" : "for (String property : typeB.properties.keySet())",
      "right" : "for (String property : typeB.properties.keySet())",
      "info" : "EnhancedForStatement[9390-9942]:EnhancedForStatement[8800-9352]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9440-9942]:Block[8850-9352]"
    }, {
      "left" : "if (!typeA.hasProperty(property))",
      "right" : "if (!typeA.hasProperty(property))",
      "info" : "IfStatement[9448-9513]:IfStatement[8858-8923]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9482-9513]:Block[8892-8923]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[9492-9505]:ReturnStatement[8902-8915]"
    }, {
      "left" : "JSType propA = typeA.getPropertyType(property);",
      "right" : "JSType propA = typeA.getPropertyType(property);",
      "info" : "VariableDeclarationStatement[9521-9568]:VariableDeclarationStatement[8931-8978]"
    }, {
      "left" : "JSType propB = typeB.getPropertyType(property);",
      "right" : "JSType propB = typeB.getPropertyType(property);",
      "info" : "VariableDeclarationStatement[9575-9622]:VariableDeclarationStatement[8985-9032]"
    }, {
      "left" : "if (!propA.isUnknownType() && !propB.isUnknownType())",
      "right" : "if (!propA.isUnknownType() && !propB.isUnknownType())",
      "info" : "IfStatement[9629-9936]:IfStatement[9039-9346]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9683-9936]:Block[9093-9346]"
    }, {
      "left" : "if (typeA.isPropertyTypeDeclared(property))",
      "right" : "if (typeA.isPropertyTypeDeclared(property))",
      "info" : "IfStatement[9693-9928]:IfStatement[9103-9338]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9737-9832]:Block[9147-9242]"
    }, {
      "left" : "if (!propA.isEquivalentTo(propB))",
      "right" : "if (!propA.isEquivalentTo(propB))",
      "info" : "IfStatement[9749-9822]:IfStatement[9159-9232]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9783-9822]:Block[9193-9232]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[9797-9810]:ReturnStatement[9207-9220]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9838-9928]:Block[9248-9338]"
    }, {
      "left" : "if (!propA.isSubtype(propB))",
      "right" : "if (!propA.isSubtype(propB))",
      "info" : "IfStatement[9850-9918]:IfStatement[9260-9328]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9879-9918]:Block[9289-9328]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[9893-9906]:ReturnStatement[9303-9316]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[9948-9960]:ReturnStatement[9358-9370]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10047-10356]:Block[9457-9766]"
    }, {
      "left" : "for (Map.Entry<String, JSType> entry : properties.entrySet())",
      "right" : "for (Map.Entry<String, JSType> entry : properties.entrySet())",
      "info" : "EnhancedForStatement[10053-10308]:EnhancedForStatement[9463-9718]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10115-10308]:Block[9525-9718]"
    }, {
      "left" : "JSType type = entry.getValue();",
      "right" : "JSType type = entry.getValue();",
      "info" : "VariableDeclarationStatement[10123-10154]:VariableDeclarationStatement[9533-9564]"
    }, {
      "left" : "JSType resolvedType = type.resolve(t, scope);",
      "right" : "JSType resolvedType = type.resolve(t, scope);",
      "info" : "VariableDeclarationStatement[10161-10206]:VariableDeclarationStatement[9571-9616]"
    }, {
      "left" : "if (type != resolvedType)",
      "right" : "if (type != resolvedType)",
      "info" : "IfStatement[10213-10302]:IfStatement[9623-9712]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10239-10302]:Block[9649-9712]"
    }, {
      "left" : "properties.put(entry.getKey(), resolvedType);",
      "right" : "properties.put(entry.getKey(), resolvedType);",
      "info" : "ExpressionStatement[10249-10294]:ExpressionStatement[9659-9704]"
    }, {
      "left" : "return super.resolveInternal(t, scope);",
      "right" : "return super.resolveInternal(t, scope);",
      "info" : "ReturnStatement[10313-10352]:ReturnStatement[9723-9762]"
    } ]
  },
  "interFileMappings" : { }
}