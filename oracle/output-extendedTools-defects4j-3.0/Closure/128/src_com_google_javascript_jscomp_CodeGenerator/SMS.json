{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "CodeGenerator",
      "right" : "CodeGenerator",
      "info" : "TypeDeclaration[1033-39310]:TypeDeclaration[1033-39357]"
    }, {
      "left" : "private static final String LT_ESCAPED = \"\\\\x3c\";",
      "right" : "private static final String LT_ESCAPED = \"\\\\x3c\";",
      "info" : "FieldDeclaration[1165-1214]:FieldDeclaration[1165-1214]"
    }, {
      "left" : "private static final String GT_ESCAPED = \"\\\\x3e\";",
      "right" : "private static final String GT_ESCAPED = \"\\\\x3e\";",
      "info" : "FieldDeclaration[1217-1266]:FieldDeclaration[1217-1266]"
    }, {
      "left" : "private final Map<String, String> ESCAPED_JS_STRINGS = Maps.newHashMap();",
      "right" : "private final Map<String, String> ESCAPED_JS_STRINGS = Maps.newHashMap();",
      "info" : "FieldDeclaration[1324-1397]:FieldDeclaration[1324-1397]"
    }, {
      "left" : "private static final char[] HEX_CHARS\n      = { '0', '1', '2', '3', '4', '5', '6', '7',\n          '8', '9', 'a', 'b', 'c', 'd', 'e', 'f' };",
      "right" : "private static final char[] HEX_CHARS\n      = { '0', '1', '2', '3', '4', '5', '6', '7',\n          '8', '9', 'a', 'b', 'c', 'd', 'e', 'f' };",
      "info" : "FieldDeclaration[1401-1540]:FieldDeclaration[1401-1540]"
    }, {
      "left" : "private final CodeConsumer cc;",
      "right" : "private final CodeConsumer cc;",
      "info" : "FieldDeclaration[1544-1574]:FieldDeclaration[1544-1574]"
    }, {
      "left" : "private final CharsetEncoder outputCharsetEncoder;",
      "right" : "private final CharsetEncoder outputCharsetEncoder;",
      "info" : "FieldDeclaration[1578-1628]:FieldDeclaration[1578-1628]"
    }, {
      "left" : "private final boolean preferSingleQuotes;",
      "right" : "private final boolean preferSingleQuotes;",
      "info" : "FieldDeclaration[1632-1673]:FieldDeclaration[1632-1673]"
    }, {
      "left" : "private final boolean trustedStrings;",
      "right" : "private final boolean trustedStrings;",
      "info" : "FieldDeclaration[1676-1713]:FieldDeclaration[1676-1713]"
    }, {
      "left" : "private CodeGenerator(CodeConsumer consumer)",
      "right" : "private CodeGenerator(CodeConsumer consumer)",
      "info" : "MethodDeclaration[1717-1878]:MethodDeclaration[1717-1878]"
    }, {
      "left" : "static CodeGenerator forCostEstimation(CodeConsumer consumer)",
      "right" : "static CodeGenerator forCostEstimation(CodeConsumer consumer)",
      "info" : "MethodDeclaration[1882-1989]:MethodDeclaration[1882-1989]"
    }, {
      "left" : "CodeGenerator(\n      CodeConsumer consumer,\n      CompilerOptions options)",
      "right" : "CodeGenerator(\n      CodeConsumer consumer,\n      CompilerOptions options)",
      "info" : "MethodDeclaration[1993-2726]:MethodDeclaration[1993-2726]"
    }, {
      "left" : "public void tagAsStrict()",
      "right" : "public void tagAsStrict()",
      "info" : "MethodDeclaration[2730-2845]:MethodDeclaration[2730-2845]"
    }, {
      "left" : "void add(String str)",
      "right" : "void add(String str)",
      "info" : "MethodDeclaration[2849-2892]:MethodDeclaration[2849-2892]"
    }, {
      "left" : "private void addIdentifier(String identifier)",
      "right" : "private void addIdentifier(String identifier)",
      "info" : "MethodDeclaration[2896-2999]:MethodDeclaration[2896-2999]"
    }, {
      "left" : "void add(Node n)",
      "right" : "void add(Node n)",
      "info" : "MethodDeclaration[3003-3052]:MethodDeclaration[3003-3052]"
    }, {
      "left" : "void add(Node n, Context context)",
      "right" : "void add(Node n, Context context)",
      "info" : "MethodDeclaration[3056-22407]:MethodDeclaration[3056-22407]"
    }, {
      "left" : "private void unrollBinaryOperator(\n      Node n, int op, String opStr, Context context,\n      Context rhsContext, int leftPrecedence, int rightPrecedence)",
      "right" : "private void unrollBinaryOperator(\n      Node n, int op, String opStr, Context context,\n      Context rhsContext, int leftPrecedence, int rightPrecedence)",
      "info" : "MethodDeclaration[22411-23248]:MethodDeclaration[22411-23248]"
    }, {
      "left" : "static boolean isSimpleNumber(String s)",
      "right" : "static boolean isSimpleNumber(String s)",
      "info" : "MethodDeclaration[23252-23513]:MethodDeclaration[23252-23560]"
    }, {
      "left" : "static double getSimpleNumber(String s)",
      "right" : "static double getSimpleNumber(String s)",
      "info" : "MethodDeclaration[23517-23870]:MethodDeclaration[23564-23917]"
    }, {
      "left" : "private boolean isIndirectEval(Node n)",
      "right" : "private boolean isIndirectEval(Node n)",
      "info" : "MethodDeclaration[23874-24083]:MethodDeclaration[23921-24130]"
    }, {
      "left" : "private void addNonEmptyStatement(\n      Node n, Context context, boolean allowNonBlockChild)",
      "right" : "private void addNonEmptyStatement(\n      Node n, Context context, boolean allowNonBlockChild)",
      "info" : "MethodDeclaration[24087-26184]:MethodDeclaration[24134-26231]"
    }, {
      "left" : "private boolean isOneExactlyFunctionOrDo(Node n)",
      "right" : "private boolean isOneExactlyFunctionOrDo(Node n)",
      "info" : "MethodDeclaration[26188-27044]:MethodDeclaration[26235-27091]"
    }, {
      "left" : "private void addExpr(Node n, int minPrecedence, Context context)",
      "right" : "private void addExpr(Node n, int minPrecedence, Context context)",
      "info" : "MethodDeclaration[27048-27347]:MethodDeclaration[27095-27394]"
    }, {
      "left" : "void addList(Node firstInList)",
      "right" : "void addList(Node firstInList)",
      "info" : "MethodDeclaration[27351-27434]:MethodDeclaration[27398-27481]"
    }, {
      "left" : "void addList(Node firstInList, boolean isArrayOrFunctionArgument)",
      "right" : "void addList(Node firstInList, boolean isArrayOrFunctionArgument)",
      "info" : "MethodDeclaration[27438-27577]:MethodDeclaration[27485-27624]"
    }, {
      "left" : "void addList(Node firstInList, boolean isArrayOrFunctionArgument,\n               Context lhsContext)",
      "right" : "void addList(Node firstInList, boolean isArrayOrFunctionArgument,\n               Context lhsContext)",
      "info" : "MethodDeclaration[27581-28005]:MethodDeclaration[27628-28052]"
    }, {
      "left" : "void addArrayList(Node firstInList)",
      "right" : "void addArrayList(Node firstInList)",
      "info" : "MethodDeclaration[28009-28695]:MethodDeclaration[28056-28742]"
    }, {
      "left" : "void addCaseBody(Node caseBody)",
      "right" : "void addCaseBody(Node caseBody)",
      "info" : "MethodDeclaration[28699-28801]:MethodDeclaration[28746-28848]"
    }, {
      "left" : "void addAllSiblings(Node n)",
      "right" : "void addAllSiblings(Node n)",
      "info" : "MethodDeclaration[28805-28909]:MethodDeclaration[28852-28956]"
    }, {
      "left" : "private void addJsString(Node n)",
      "right" : "private void addJsString(Node n)",
      "info" : "MethodDeclaration[28913-29404]:MethodDeclaration[28960-29451]"
    }, {
      "left" : "private String jsString(String s, boolean useSlashV)",
      "right" : "private String jsString(String s, boolean useSlashV)",
      "info" : "MethodDeclaration[29408-30253]:MethodDeclaration[29455-30300]"
    }, {
      "left" : "String regexpEscape(String s, CharsetEncoder outputCharsetEncoder)",
      "right" : "String regexpEscape(String s, CharsetEncoder outputCharsetEncoder)",
      "info" : "MethodDeclaration[30257-30447]:MethodDeclaration[30304-30494]"
    }, {
      "left" : "String escapeToDoubleQuotedJsString(String s)",
      "right" : "String escapeToDoubleQuotedJsString(String s)",
      "info" : "MethodDeclaration[30451-30663]:MethodDeclaration[30498-30710]"
    }, {
      "left" : "String regexpEscape(String s)",
      "right" : "String regexpEscape(String s)",
      "info" : "MethodDeclaration[30792-30861]:MethodDeclaration[30839-30908]"
    }, {
      "left" : "private String strEscape(\n      String s,\n      char quote,\n      String doublequoteEscape,\n      String singlequoteEscape,\n      String backslashEscape,\n      CharsetEncoder outputCharsetEncoder,\n      boolean useSlashV,\n      boolean isRegexp)",
      "right" : "private String strEscape(\n      String s,\n      char quote,\n      String doublequoteEscape,\n      String singlequoteEscape,\n      String backslashEscape,\n      CharsetEncoder outputCharsetEncoder,\n      boolean useSlashV,\n      boolean isRegexp)",
      "info" : "MethodDeclaration[30865-35132]:MethodDeclaration[30912-35179]"
    }, {
      "left" : "static String identifierEscape(String s)",
      "right" : "static String identifierEscape(String s)",
      "info" : "MethodDeclaration[35136-35826]:MethodDeclaration[35183-35873]"
    }, {
      "left" : "private static int getNonEmptyChildCount(Node n, int maxCount)",
      "right" : "private static int getNonEmptyChildCount(Node n, int maxCount)",
      "info" : "MethodDeclaration[35829-36317]:MethodDeclaration[35876-36364]"
    }, {
      "left" : "private static Node getFirstNonEmptyChild(Node n)",
      "right" : "private static Node getFirstNonEmptyChild(Node n)",
      "info" : "MethodDeclaration[36321-36722]:MethodDeclaration[36368-36769]"
    }, {
      "left" : "enum : Context",
      "right" : "enum : Context",
      "info" : "EnumDeclaration[36927-37329]:EnumDeclaration[36974-37376]"
    }, {
      "left" : "private Context getContextForNonEmptyExpression(Context currentContext)",
      "right" : "private Context getContextForNonEmptyExpression(Context currentContext)",
      "info" : "MethodDeclaration[37333-37524]:MethodDeclaration[37380-37571]"
    }, {
      "left" : "private  Context getContextForNoInOperator(Context context)",
      "right" : "private  Context getContextForNoInOperator(Context context)",
      "info" : "MethodDeclaration[37528-37863]:MethodDeclaration[37575-37910]"
    }, {
      "left" : "private static void appendHexJavaScriptRepresentation(\n      StringBuilder sb, char c)",
      "right" : "private static void appendHexJavaScriptRepresentation(\n      StringBuilder sb, char c)",
      "info" : "MethodDeclaration[37867-38217]:MethodDeclaration[37914-38264]"
    }, {
      "left" : "private static void appendHexJavaScriptRepresentation(\n      int codePoint, Appendable out)\n      throws IOException",
      "right" : "private static void appendHexJavaScriptRepresentation(\n      int codePoint, Appendable out)\n      throws IOException",
      "info" : "MethodDeclaration[38221-39308]:MethodDeclaration[38268-39355]"
    } ],
    "mappings" : [
 {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[1141-1146]:TYPE_DECLARATION_KIND[1141-1146]"
    }, {
      "left" : "CodeGenerator",
      "right" : "CodeGenerator",
      "info" : "SimpleName[1147-1160]:SimpleName[1147-1160]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[1717-1724]:Modifier[1717-1724]"
    }, {
      "left" : "CodeGenerator",
      "right" : "CodeGenerator",
      "info" : "SimpleName[1725-1738]:SimpleName[1725-1738]"
    }, {
      "left" : "CodeConsumer consumer",
      "right" : "CodeConsumer consumer",
      "info" : "SingleVariableDeclaration[1739-1760]:SingleVariableDeclaration[1739-1760]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1762-1878]:Block[1762-1878]"
    }, {
      "left" : "cc = consumer;",
      "right" : "cc = consumer;",
      "info" : "ExpressionStatement[1768-1782]:ExpressionStatement[1768-1782]"
    }, {
      "left" : "outputCharsetEncoder = null;",
      "right" : "outputCharsetEncoder = null;",
      "info" : "ExpressionStatement[1787-1815]:ExpressionStatement[1787-1815]"
    }, {
      "left" : "preferSingleQuotes = false;",
      "right" : "preferSingleQuotes = false;",
      "info" : "ExpressionStatement[1820-1847]:ExpressionStatement[1820-1847]"
    }, {
      "left" : "trustedStrings = true;",
      "right" : "trustedStrings = true;",
      "info" : "ExpressionStatement[1852-1874]:ExpressionStatement[1852-1874]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[1882-1888]:Modifier[1882-1888]"
    }, {
      "left" : "CodeGenerator",
      "right" : "CodeGenerator",
      "info" : "SimpleType[1889-1902]:SimpleType[1889-1902]"
    }, {
      "left" : "forCostEstimation",
      "right" : "forCostEstimation",
      "info" : "SimpleName[1903-1920]:SimpleName[1903-1920]"
    }, {
      "left" : "CodeConsumer consumer",
      "right" : "CodeConsumer consumer",
      "info" : "SingleVariableDeclaration[1921-1942]:SingleVariableDeclaration[1921-1942]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1944-1989]:Block[1944-1989]"
    }, {
      "left" : "return new CodeGenerator(consumer);",
      "right" : "return new CodeGenerator(consumer);",
      "info" : "ReturnStatement[1950-1985]:ReturnStatement[1950-1985]"
    }, {
      "left" : "CodeGenerator",
      "right" : "CodeGenerator",
      "info" : "SimpleName[1993-2006]:SimpleName[1993-2006]"
    }, {
      "left" : "CodeConsumer consumer",
      "right" : "CodeConsumer consumer",
      "info" : "SingleVariableDeclaration[2014-2035]:SingleVariableDeclaration[2014-2035]"
    }, {
      "left" : "CompilerOptions options",
      "right" : "CompilerOptions options",
      "info" : "SingleVariableDeclaration[2043-2066]:SingleVariableDeclaration[2043-2066]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2068-2726]:Block[2068-2726]"
    }, {
      "left" : "cc = consumer;",
      "right" : "cc = consumer;",
      "info" : "ExpressionStatement[2074-2088]:ExpressionStatement[2074-2088]"
    }, {
      "left" : "Charset outputCharset = options.getOutputCharset();",
      "right" : "Charset outputCharset = options.getOutputCharset();",
      "info" : "VariableDeclarationStatement[2094-2145]:VariableDeclarationStatement[2094-2145]"
    }, {
      "left" : "if (outputCharset == null || outputCharset == Charsets.US_ASCII)",
      "right" : "if (outputCharset == null || outputCharset == Charsets.US_ASCII)",
      "info" : "IfStatement[2150-2614]:IfStatement[2150-2614]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2215-2539]:Block[2215-2539]"
    }, {
      "left" : "this.outputCharsetEncoder = null;",
      "right" : "this.outputCharsetEncoder = null;",
      "info" : "ExpressionStatement[2500-2533]:ExpressionStatement[2500-2533]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2545-2614]:Block[2545-2614]"
    }, {
      "left" : "this.outputCharsetEncoder = outputCharset.newEncoder();",
      "right" : "this.outputCharsetEncoder = outputCharset.newEncoder();",
      "info" : "ExpressionStatement[2553-2608]:ExpressionStatement[2553-2608]"
    }, {
      "left" : "this.preferSingleQuotes = options.preferSingleQuotes;",
      "right" : "this.preferSingleQuotes = options.preferSingleQuotes;",
      "info" : "ExpressionStatement[2619-2672]:ExpressionStatement[2619-2672]"
    }, {
      "left" : "this.trustedStrings = options.trustedStrings;",
      "right" : "this.trustedStrings = options.trustedStrings;",
      "info" : "ExpressionStatement[2677-2722]:ExpressionStatement[2677-2722]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[2788-2794]:Modifier[2788-2794]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[2795-2799]:PrimitiveType[2795-2799]"
    }, {
      "left" : "tagAsStrict",
      "right" : "tagAsStrict",
      "info" : "SimpleName[2800-2811]:SimpleName[2800-2811]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2814-2845]:Block[2814-2845]"
    }, {
      "left" : "add(\"'use strict';\");",
      "right" : "add(\"'use strict';\");",
      "info" : "ExpressionStatement[2820-2841]:ExpressionStatement[2820-2841]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[2849-2853]:PrimitiveType[2849-2853]"
    }, {
      "left" : "add",
      "right" : "add",
      "info" : "SimpleName[2854-2857]:SimpleName[2854-2857]"
    }, {
      "left" : "String str",
      "right" : "String str",
      "info" : "SingleVariableDeclaration[2858-2868]:SingleVariableDeclaration[2858-2868]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2870-2892]:Block[2870-2892]"
    }, {
      "left" : "cc.add(str);",
      "right" : "cc.add(str);",
      "info" : "ExpressionStatement[2876-2888]:ExpressionStatement[2876-2888]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[2896-2903]:Modifier[2896-2903]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[2904-2908]:PrimitiveType[2904-2908]"
    }, {
      "left" : "addIdentifier",
      "right" : "addIdentifier",
      "info" : "SimpleName[2909-2922]:SimpleName[2909-2922]"
    }, {
      "left" : "String identifier",
      "right" : "String identifier",
      "info" : "SingleVariableDeclaration[2923-2940]:SingleVariableDeclaration[2923-2940]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2942-2999]:Block[2942-2999]"
    }, {
      "left" : "cc.addIdentifier(identifierEscape(identifier));",
      "right" : "cc.addIdentifier(identifierEscape(identifier));",
      "info" : "ExpressionStatement[2948-2995]:ExpressionStatement[2948-2995]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[3003-3007]:PrimitiveType[3003-3007]"
    }, {
      "left" : "add",
      "right" : "add",
      "info" : "SimpleName[3008-3011]:SimpleName[3008-3011]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[3012-3018]:SingleVariableDeclaration[3012-3018]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3020-3052]:Block[3020-3052]"
    }, {
      "left" : "add(n, Context.OTHER);",
      "right" : "add(n, Context.OTHER);",
      "info" : "ExpressionStatement[3026-3048]:ExpressionStatement[3026-3048]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[3056-3060]:PrimitiveType[3056-3060]"
    }, {
      "left" : "add",
      "right" : "add",
      "info" : "SimpleName[3061-3064]:SimpleName[3061-3064]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[3065-3071]:SingleVariableDeclaration[3065-3071]"
    }, {
      "left" : "Context context",
      "right" : "Context context",
      "info" : "SingleVariableDeclaration[3073-3088]:SingleVariableDeclaration[3073-3088]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3090-22407]:Block[3090-22407]"
    }, {
      "left" : "if (!cc.continueProcessing())",
      "right" : "if (!cc.continueProcessing())",
      "info" : "IfStatement[3096-3147]:IfStatement[3096-3147]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3126-3147]:Block[3126-3147]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[3134-3141]:ReturnStatement[3134-3141]"
    }, {
      "left" : "int type = n.getType();",
      "right" : "int type = n.getType();",
      "info" : "VariableDeclarationStatement[3153-3176]:VariableDeclarationStatement[3153-3176]"
    }, {
      "left" : "String opstr = NodeUtil.opToStr(type);",
      "right" : "String opstr = NodeUtil.opToStr(type);",
      "info" : "VariableDeclarationStatement[3181-3219]:VariableDeclarationStatement[3181-3219]"
    }, {
      "left" : "int childCount = n.getChildCount();",
      "right" : "int childCount = n.getChildCount();",
      "info" : "VariableDeclarationStatement[3224-3259]:VariableDeclarationStatement[3224-3259]"
    }, {
      "left" : "Node first = n.getFirstChild();",
      "right" : "Node first = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[3264-3295]:VariableDeclarationStatement[3264-3295]"
    }, {
      "left" : "Node last = n.getLastChild();",
      "right" : "Node last = n.getLastChild();",
      "info" : "VariableDeclarationStatement[3300-3329]:VariableDeclarationStatement[3300-3329]"
    }, {
      "left" : "if (opstr != null && first != last)",
      "right" : "if (opstr != null && first != last)",
      "info" : "IfStatement[3370-4463]:IfStatement[3370-4463]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3406-4463]:Block[3406-4463]"
    }, {
      "left" : "Preconditions.checkState(\n          childCount == 2,\n          \"Bad binary operator \\\"%s\\\": expected 2 arguments but got %s\",\n          opstr, childCount);",
      "right" : "Preconditions.checkState(\n          childCount == 2,\n          \"Bad binary operator \\\"%s\\\": expected 2 arguments but got %s\",\n          opstr, childCount);",
      "info" : "ExpressionStatement[3414-3569]:ExpressionStatement[3414-3569]"
    }, {
      "left" : "int p = NodeUtil.precedence(type);",
      "right" : "int p = NodeUtil.precedence(type);",
      "info" : "VariableDeclarationStatement[3576-3610]:VariableDeclarationStatement[3576-3610]"
    }, {
      "left" : "Context rhsContext = getContextForNoInOperator(context);",
      "right" : "Context rhsContext = getContextForNoInOperator(context);",
      "info" : "VariableDeclarationStatement[3725-3781]:VariableDeclarationStatement[3725-3781]"
    }, {
      "left" : "if (last.getType() == type &&\n          NodeUtil.isAssociative(type))",
      "right" : "if (last.getType() == type &&\n          NodeUtil.isAssociative(type))",
      "info" : "IfStatement[3911-4443]:IfStatement[3911-4443]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3981-4095]:Block[3981-4095]"
    }, {
      "left" : "addExpr(first, p, context);",
      "right" : "addExpr(first, p, context);",
      "info" : "ExpressionStatement[3991-4018]:ExpressionStatement[3991-4018]"
    }, {
      "left" : "cc.addOp(opstr, true);",
      "right" : "cc.addOp(opstr, true);",
      "info" : "ExpressionStatement[4027-4049]:ExpressionStatement[4027-4049]"
    }, {
      "left" : "addExpr(last, p, rhsContext);",
      "right" : "addExpr(last, p, rhsContext);",
      "info" : "ExpressionStatement[4058-4087]:ExpressionStatement[4058-4087]"
    }, {
      "left" : "if (NodeUtil.isAssignmentOp(n) && NodeUtil.isAssignmentOp(last))",
      "right" : "if (NodeUtil.isAssignmentOp(n) && NodeUtil.isAssignmentOp(last))",
      "info" : "IfStatement[4101-4443]:IfStatement[4101-4443]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4166-4351]:Block[4166-4351]"
    }, {
      "left" : "addExpr(first, p, context);",
      "right" : "addExpr(first, p, context);",
      "info" : "ExpressionStatement[4247-4274]:ExpressionStatement[4247-4274]"
    }, {
      "left" : "cc.addOp(opstr, true);",
      "right" : "cc.addOp(opstr, true);",
      "info" : "ExpressionStatement[4283-4305]:ExpressionStatement[4283-4305]"
    }, {
      "left" : "addExpr(last, p, rhsContext);",
      "right" : "addExpr(last, p, rhsContext);",
      "info" : "ExpressionStatement[4314-4343]:ExpressionStatement[4314-4343]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4357-4443]:Block[4357-4443]"
    }, {
      "left" : "unrollBinaryOperator(n, type, opstr, context, rhsContext, p, p + 1);",
      "right" : "unrollBinaryOperator(n, type, opstr, context, rhsContext, p, p + 1);",
      "info" : "ExpressionStatement[4367-4435]:ExpressionStatement[4367-4435]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[4450-4457]:ReturnStatement[4450-4457]"
    }, {
      "left" : "cc.startSourceMapping(n);",
      "right" : "cc.startSourceMapping(n);",
      "info" : "ExpressionStatement[4469-4494]:ExpressionStatement[4469-4494]"
    }, {
      "left" : "switch (type) {\n      case Token.TRY: {\n        Preconditions.checkState(first.getNext().isBlock() &&\n                !first.getNext().hasMoreThanOneChild());\n        Preconditions.checkState(childCount >= 2 && childCount <= 3);\n\n        add(\"try\");\n        add(first, Context.PRESERVE_BLOCK);\n\n        // second child contains the catch block, or nothing if there\n        // isn't a catch block\n        Node catchblock = first.getNext().getFirstChild();\n        if (catchblock != null) {\n          add(catchblock);\n        }\n\n        if (childCount == 3) {\n          add(\"finally\");\n          add(last, Context.PRESERVE_BLOCK);\n        }\n        break;\n      }\n\n      case Token.CATCH:\n        Preconditions.checkState(childCount == 2);\n        add(\"catch(\");\n        add(first);\n        add(\")\");\n        add(last, Context.PRESERVE_BLOCK);\n        break;\n\n      case Token.THROW:\n        Preconditions.checkState(childCount == 1);\n        add(\"throw\");\n        add(first);\n\n        // Must have a ';' after a throw statement, otherwise safari can't\n        // parse this.\n        cc.endStatement(true);\n        break;\n\n      case Token.RETURN:\n        add(\"return\");\n        if (childCount == 1) {\n          add(first);\n        } else {\n          Preconditions.checkState(childCount == 0);\n        }\n        cc.endStatement();\n        break;\n\n      case Token.VAR:\n        if (first != null) {\n          add(\"var \");\n          addList(first, false, getContextForNoInOperator(context));\n        }\n        break;\n\n      case Token.LABEL_NAME:\n        Preconditions.checkState(!n.getString().isEmpty());\n        addIdentifier(n.getString());\n        break;\n\n      case Token.NAME:\n        if (first == null || first.isEmpty()) {\n          addIdentifier(n.getString());\n        } else {\n          Preconditions.checkState(childCount == 1);\n          addIdentifier(n.getString());\n          cc.addOp(\"=\", true);\n          if (first.isComma()) {\n            addExpr(first, NodeUtil.precedence(Token.ASSIGN), Context.OTHER);\n          } else {\n            // Add expression, consider nearby code at lowest level of\n            // precedence.\n            addExpr(first, 0, getContextForNoInOperator(context));\n          }\n        }\n        break;\n\n      case Token.ARRAYLIT:\n        add(\"[\");\n        addArrayList(first);\n        add(\"]\");\n        break;\n\n      case Token.PARAM_LIST:\n        add(\"(\");\n        addList(first);\n        add(\")\");\n        break;\n\n      case Token.COMMA:\n        Preconditions.checkState(childCount == 2);\n        unrollBinaryOperator(n, Token.COMMA, \",\", context, Context.OTHER, 0, 0);\n        break;\n\n      case Token.NUMBER:\n        Preconditions.checkState(childCount == 0);\n        cc.addNumber(n.getDouble());\n        break;\n\n      case Token.TYPEOF:\n      case Token.VOID:\n      case Token.NOT:\n      case Token.BITNOT:\n      case Token.POS: {\n        // All of these unary operators are right-associative\n        Preconditions.checkState(childCount == 1);\n        cc.addOp(NodeUtil.opToStrNoFail(type), false);\n        addExpr(first, NodeUtil.precedence(type), Context.OTHER);\n        break;\n      }\n\n      case Token.NEG: {\n        Preconditions.checkState(childCount == 1);\n\n        // It's important to our sanity checker that the code\n        // we print produces the same AST as the code we parse back.\n        // NEG is a weird case because Rhino parses \"- -2\" as \"2\".\n        if (n.getFirstChild().isNumber()) {\n          cc.addNumber(-n.getFirstChild().getDouble());\n        } else {\n          cc.addOp(NodeUtil.opToStrNoFail(type), false);\n          addExpr(first, NodeUtil.precedence(type), Context.OTHER);\n        }\n\n        break;\n      }\n\n      case Token.HOOK: {\n        Preconditions.checkState(childCount == 3);\n        int p = NodeUtil.precedence(type);\n        addExpr(first, p + 1, context);\n        cc.addOp(\"?\", true);\n        addExpr(first.getNext(), 1, Context.OTHER);\n        cc.addOp(\":\", true);\n        addExpr(last, 1, Context.OTHER);\n        break;\n      }\n\n      case Token.REGEXP:\n        if (!first.isString() ||\n            !last.isString()) {\n          throw new Error(\"Expected children to be strings\");\n        }\n\n        String regexp = regexpEscape(first.getString(), outputCharsetEncoder);\n\n        // I only use one .add because whitespace matters\n        if (childCount == 2) {\n          add(regexp + last.getString());\n        } else {\n          Preconditions.checkState(childCount == 1);\n          add(regexp);\n        }\n        break;\n\n      case Token.FUNCTION:\n        if (n.getClass() != Node.class) {\n          throw new Error(\"Unexpected Node subclass.\");\n        }\n        Preconditions.checkState(childCount == 3);\n        boolean funcNeedsParens = (context == Context.START_OF_EXPR);\n        if (funcNeedsParens) {\n          add(\"(\");\n        }\n\n        add(\"function\");\n        add(first);\n\n        add(first.getNext());\n        add(last, Context.PRESERVE_BLOCK);\n        cc.endFunction(context == Context.STATEMENT);\n\n        if (funcNeedsParens) {\n          add(\")\");\n        }\n        break;\n\n      case Token.GETTER_DEF:\n      case Token.SETTER_DEF:\n        Preconditions.checkState(n.getParent().isObjectLit());\n        Preconditions.checkState(childCount == 1);\n        Preconditions.checkState(first.isFunction());\n\n        // Get methods are unnamed\n        Preconditions.checkState(first.getFirstChild().getString().isEmpty());\n        if (type == Token.GETTER_DEF) {\n          // Get methods have no parameters.\n          Preconditions.checkState(!first.getChildAtIndex(1).hasChildren());\n          add(\"get \");\n        } else {\n          // Set methods have one parameter.\n          Preconditions.checkState(first.getChildAtIndex(1).hasOneChild());\n          add(\"set \");\n        }\n\n        // The name is on the GET or SET node.\n        String name = n.getString();\n        Node fn = first;\n        Node parameters = fn.getChildAtIndex(1);\n        Node body = fn.getLastChild();\n\n        // Add the property name.\n        if (!n.isQuotedString() &&\n            TokenStream.isJSIdentifier(name) &&\n            // do not encode literally any non-literal characters that were\n            // Unicode escaped.\n            NodeUtil.isLatin(name)) {\n          add(name);\n        } else {\n          // Determine if the string is a simple number.\n          double d = getSimpleNumber(name);\n          if (!Double.isNaN(d)) {\n            cc.addNumber(d);\n          } else {\n            addJsString(n);\n          }\n        }\n\n        add(parameters);\n        add(body, Context.PRESERVE_BLOCK);\n        break;\n\n      case Token.SCRIPT:\n      case Token.BLOCK: {\n        if (n.getClass() != Node.class) {\n          throw new Error(\"Unexpected Node subclass.\");\n        }\n        boolean preserveBlock = context == Context.PRESERVE_BLOCK;\n        if (preserveBlock) {\n          cc.beginBlock();\n        }\n\n        boolean preferLineBreaks =\n            type == Token.SCRIPT ||\n            (type == Token.BLOCK &&\n                !preserveBlock &&\n                n.getParent() != null &&\n                n.getParent().isScript());\n        for (Node c = first; c != null; c = c.getNext()) {\n          add(c, Context.STATEMENT);\n\n          // VAR doesn't include ';' since it gets used in expressions\n          if (c.isVar()) {\n            cc.endStatement();\n          }\n\n          if (c.isFunction()) {\n            cc.maybeLineBreak();\n          }\n\n          // Prefer to break lines in between top-level statements\n          // because top-level statements are more homogeneous.\n          if (preferLineBreaks) {\n            cc.notePreferredLineBreak();\n          }\n        }\n        if (preserveBlock) {\n          cc.endBlock(cc.breakAfterBlockFor(n, context == Context.STATEMENT));\n        }\n        break;\n      }\n\n      case Token.FOR:\n        if (childCount == 4) {\n          add(\"for(\");\n          if (first.isVar()) {\n            add(first, Context.IN_FOR_INIT_CLAUSE);\n          } else {\n            addExpr(first, 0, Context.IN_FOR_INIT_CLAUSE);\n          }\n          add(\";\");\n          add(first.getNext());\n          add(\";\");\n          add(first.getNext().getNext());\n          add(\")\");\n          addNonEmptyStatement(\n              last, getContextForNonEmptyExpression(context), false);\n        } else {\n          Preconditions.checkState(childCount == 3);\n          add(\"for(\");\n          add(first);\n          add(\"in\");\n          add(first.getNext());\n          add(\")\");\n          addNonEmptyStatement(\n              last, getContextForNonEmptyExpression(context), false);\n        }\n        break;\n\n      case Token.DO:\n        Preconditions.checkState(childCount == 2);\n        add(\"do\");\n        addNonEmptyStatement(first, Context.OTHER, false);\n        add(\"while(\");\n        add(last);\n        add(\")\");\n        cc.endStatement();\n        break;\n\n      case Token.WHILE:\n        Preconditions.checkState(childCount == 2);\n        add(\"while(\");\n        add(first);\n        add(\")\");\n        addNonEmptyStatement(\n            last, getContextForNonEmptyExpression(context), false);\n        break;\n\n      case Token.EMPTY:\n        Preconditions.checkState(childCount == 0);\n        break;\n\n      case Token.GETPROP: {\n        Preconditions.checkState(\n            childCount == 2,\n            \"Bad GETPROP: expected 2 children, but got %s\", childCount);\n        Preconditions.checkState(\n            last.isString(),\n            \"Bad GETPROP: RHS should be STRING\");\n        boolean needsParens = (first.isNumber());\n        if (needsParens) {\n          add(\"(\");\n        }\n        addExpr(first, NodeUtil.precedence(type), context);\n        if (needsParens) {\n          add(\")\");\n        }\n        add(\".\");\n        addIdentifier(last.getString());\n        break;\n      }\n\n      case Token.GETELEM:\n        Preconditions.checkState(\n            childCount == 2,\n            \"Bad GETELEM: expected 2 children but got %s\", childCount);\n        addExpr(first, NodeUtil.precedence(type), context);\n        add(\"[\");\n        add(first.getNext());\n        add(\"]\");\n        break;\n\n      case Token.WITH:\n        Preconditions.checkState(childCount == 2);\n        add(\"with(\");\n        add(first);\n        add(\")\");\n        addNonEmptyStatement(\n            last, getContextForNonEmptyExpression(context), false);\n        break;\n\n      case Token.INC:\n      case Token.DEC: {\n        Preconditions.checkState(childCount == 1);\n        String o = type == Token.INC ? \"++\" : \"--\";\n        int postProp = n.getIntProp(Node.INCRDECR_PROP);\n        // A non-zero post-prop value indicates a post inc/dec, default of zero\n        // is a pre-inc/dec.\n        if (postProp != 0) {\n          addExpr(first, NodeUtil.precedence(type), context);\n          cc.addOp(o, false);\n        } else {\n          cc.addOp(o, false);\n          add(first);\n        }\n        break;\n      }\n\n      case Token.CALL:\n        // We have two special cases here:\n        // 1) If the left hand side of the call is a direct reference to eval,\n        // then it must have a DIRECT_EVAL annotation. If it does not, then\n        // that means it was originally an indirect call to eval, and that\n        // indirectness must be preserved.\n        // 2) If the left hand side of the call is a property reference,\n        // then the call must not a FREE_CALL annotation. If it does, then\n        // that means it was originally an call without an explicit this and\n        // that must be preserved.\n        if (isIndirectEval(first)\n            || n.getBooleanProp(Node.FREE_CALL) && NodeUtil.isGet(first)) {\n          add(\"(0,\");\n          addExpr(first, NodeUtil.precedence(Token.COMMA), Context.OTHER);\n          add(\")\");\n        } else {\n          addExpr(first, NodeUtil.precedence(type), context);\n        }\n        add(\"(\");\n        addList(first.getNext());\n        add(\")\");\n        break;\n\n      case Token.IF:\n        boolean hasElse = childCount == 3;\n        boolean ambiguousElseClause =\n            context == Context.BEFORE_DANGLING_ELSE && !hasElse;\n        if (ambiguousElseClause) {\n          cc.beginBlock();\n        }\n\n        add(\"if(\");\n        add(first);\n        add(\")\");\n\n        if (hasElse) {\n          addNonEmptyStatement(\n              first.getNext(), Context.BEFORE_DANGLING_ELSE, false);\n          add(\"else\");\n          addNonEmptyStatement(\n              last, getContextForNonEmptyExpression(context), false);\n        } else {\n          addNonEmptyStatement(first.getNext(), Context.OTHER, false);\n          Preconditions.checkState(childCount == 2);\n        }\n\n        if (ambiguousElseClause) {\n          cc.endBlock();\n        }\n        break;\n\n      case Token.NULL:\n        Preconditions.checkState(childCount == 0);\n        cc.addConstant(\"null\");\n        break;\n\n      case Token.THIS:\n        Preconditions.checkState(childCount == 0);\n        add(\"this\");\n        break;\n\n      case Token.FALSE:\n        Preconditions.checkState(childCount == 0);\n        cc.addConstant(\"false\");\n        break;\n\n      case Token.TRUE:\n        Preconditions.checkState(childCount == 0);\n        cc.addConstant(\"true\");\n        break;\n\n      case Token.CONTINUE:\n        Preconditions.checkState(childCount <= 1);\n        add(\"continue\");\n        if (childCount == 1) {\n          if (!first.isLabelName()) {\n            throw new Error(\"Unexpected token type. Should be LABEL_NAME.\");\n          }\n          add(\" \");\n          add(first);\n        }\n        cc.endStatement();\n        break;\n\n      case Token.DEBUGGER:\n        Preconditions.checkState(childCount == 0);\n        add(\"debugger\");\n        cc.endStatement();\n        break;\n\n      case Token.BREAK:\n        Preconditions.checkState(childCount <= 1);\n        add(\"break\");\n        if (childCount == 1) {\n          if (!first.isLabelName()) {\n            throw new Error(\"Unexpected token type. Should be LABEL_NAME.\");\n          }\n          add(\" \");\n          add(first);\n        }\n        cc.endStatement();\n        break;\n\n      case Token.EXPR_RESULT:\n        Preconditions.checkState(childCount == 1);\n        add(first, Context.START_OF_EXPR);\n        cc.endStatement();\n        break;\n\n      case Token.NEW:\n        add(\"new \");\n        int precedence = NodeUtil.precedence(type);\n\n        // If the first child contains a CALL, then claim higher precedence\n        // to force parentheses. Otherwise, when parsed, NEW will bind to the\n        // first viable parentheses (don't traverse into functions).\n        if (NodeUtil.containsType(\n            first, Token.CALL, NodeUtil.MATCH_NOT_FUNCTION)) {\n          precedence = NodeUtil.precedence(first.getType()) + 1;\n        }\n        addExpr(first, precedence, Context.OTHER);\n\n        // '()' is optional when no arguments are present\n        Node next = first.getNext();\n        if (next != null) {\n          add(\"(\");\n          addList(next);\n          add(\")\");\n        }\n        break;\n\n      case Token.STRING_KEY:\n        Preconditions.checkState(\n            childCount == 1, \"Object lit key must have 1 child\");\n        addJsString(n);\n        break;\n\n      case Token.STRING:\n        Preconditions.checkState(\n            childCount == 0, \"A string may not have children\");\n        addJsString(n);\n        break;\n\n      case Token.DELPROP:\n        Preconditions.checkState(childCount == 1);\n        add(\"delete \");\n        add(first);\n        break;\n\n      case Token.OBJECTLIT: {\n        boolean needsParens = (context == Context.START_OF_EXPR);\n        if (needsParens) {\n          add(\"(\");\n        }\n        add(\"{\");\n        for (Node c = first; c != null; c = c.getNext()) {\n          if (c != first) {\n            cc.listSeparator();\n          }\n\n          if (c.isGetterDef() || c.isSetterDef()) {\n            add(c);\n          } else {\n            Preconditions.checkState(c.isStringKey());\n            String key = c.getString();\n            // Object literal property names don't have to be quoted if they\n            // are not JavaScript keywords\n            if (!c.isQuotedString() &&\n                !TokenStream.isKeyword(key) &&\n                TokenStream.isJSIdentifier(key) &&\n                // do not encode literally any non-literal characters that\n                // were Unicode escaped.\n                NodeUtil.isLatin(key)) {\n              add(key);\n            } else {\n              // Determine if the string is a simple number.\n              double d = getSimpleNumber(key);\n              if (!Double.isNaN(d)) {\n                cc.addNumber(d);\n              } else {\n                addExpr(c, 1, Context.OTHER);\n              }\n            }\n            add(\":\");\n            addExpr(c.getFirstChild(), 1, Context.OTHER);\n          }\n        }\n        add(\"}\");\n        if (needsParens) {\n          add(\")\");\n        }\n        break;\n      }\n\n      case Token.SWITCH:\n        add(\"switch(\");\n        add(first);\n        add(\")\");\n        cc.beginBlock();\n        addAllSiblings(first.getNext());\n        cc.endBlock(context == Context.STATEMENT);\n        break;\n\n      case Token.CASE:\n        Preconditions.checkState(childCount == 2);\n        add(\"case \");\n        add(first);\n        addCaseBody(last);\n        break;\n\n      case Token.DEFAULT_CASE:\n        Preconditions.checkState(childCount == 1);\n        add(\"default\");\n        addCaseBody(first);\n        break;\n\n      case Token.LABEL:\n        Preconditions.checkState(childCount == 2);\n        if (!first.isLabelName()) {\n          throw new Error(\"Unexpected token type. Should be LABEL_NAME.\");\n        }\n        add(first);\n        add(\":\");\n        addNonEmptyStatement(\n            last, getContextForNonEmptyExpression(context), true);\n        break;\n\n      case Token.CAST:\n        add(\"(\");\n        add(first);\n        add(\")\");\n        break;\n\n      default:\n        throw new Error(\"Unknown type \" + type + \"\\n\" + n.toStringTree());\n    }",
      "right" : "switch (type) {\n      case Token.TRY: {\n        Preconditions.checkState(first.getNext().isBlock() &&\n                !first.getNext().hasMoreThanOneChild());\n        Preconditions.checkState(childCount >= 2 && childCount <= 3);\n\n        add(\"try\");\n        add(first, Context.PRESERVE_BLOCK);\n\n        // second child contains the catch block, or nothing if there\n        // isn't a catch block\n        Node catchblock = first.getNext().getFirstChild();\n        if (catchblock != null) {\n          add(catchblock);\n        }\n\n        if (childCount == 3) {\n          add(\"finally\");\n          add(last, Context.PRESERVE_BLOCK);\n        }\n        break;\n      }\n\n      case Token.CATCH:\n        Preconditions.checkState(childCount == 2);\n        add(\"catch(\");\n        add(first);\n        add(\")\");\n        add(last, Context.PRESERVE_BLOCK);\n        break;\n\n      case Token.THROW:\n        Preconditions.checkState(childCount == 1);\n        add(\"throw\");\n        add(first);\n\n        // Must have a ';' after a throw statement, otherwise safari can't\n        // parse this.\n        cc.endStatement(true);\n        break;\n\n      case Token.RETURN:\n        add(\"return\");\n        if (childCount == 1) {\n          add(first);\n        } else {\n          Preconditions.checkState(childCount == 0);\n        }\n        cc.endStatement();\n        break;\n\n      case Token.VAR:\n        if (first != null) {\n          add(\"var \");\n          addList(first, false, getContextForNoInOperator(context));\n        }\n        break;\n\n      case Token.LABEL_NAME:\n        Preconditions.checkState(!n.getString().isEmpty());\n        addIdentifier(n.getString());\n        break;\n\n      case Token.NAME:\n        if (first == null || first.isEmpty()) {\n          addIdentifier(n.getString());\n        } else {\n          Preconditions.checkState(childCount == 1);\n          addIdentifier(n.getString());\n          cc.addOp(\"=\", true);\n          if (first.isComma()) {\n            addExpr(first, NodeUtil.precedence(Token.ASSIGN), Context.OTHER);\n          } else {\n            // Add expression, consider nearby code at lowest level of\n            // precedence.\n            addExpr(first, 0, getContextForNoInOperator(context));\n          }\n        }\n        break;\n\n      case Token.ARRAYLIT:\n        add(\"[\");\n        addArrayList(first);\n        add(\"]\");\n        break;\n\n      case Token.PARAM_LIST:\n        add(\"(\");\n        addList(first);\n        add(\")\");\n        break;\n\n      case Token.COMMA:\n        Preconditions.checkState(childCount == 2);\n        unrollBinaryOperator(n, Token.COMMA, \",\", context, Context.OTHER, 0, 0);\n        break;\n\n      case Token.NUMBER:\n        Preconditions.checkState(childCount == 0);\n        cc.addNumber(n.getDouble());\n        break;\n\n      case Token.TYPEOF:\n      case Token.VOID:\n      case Token.NOT:\n      case Token.BITNOT:\n      case Token.POS: {\n        // All of these unary operators are right-associative\n        Preconditions.checkState(childCount == 1);\n        cc.addOp(NodeUtil.opToStrNoFail(type), false);\n        addExpr(first, NodeUtil.precedence(type), Context.OTHER);\n        break;\n      }\n\n      case Token.NEG: {\n        Preconditions.checkState(childCount == 1);\n\n        // It's important to our sanity checker that the code\n        // we print produces the same AST as the code we parse back.\n        // NEG is a weird case because Rhino parses \"- -2\" as \"2\".\n        if (n.getFirstChild().isNumber()) {\n          cc.addNumber(-n.getFirstChild().getDouble());\n        } else {\n          cc.addOp(NodeUtil.opToStrNoFail(type), false);\n          addExpr(first, NodeUtil.precedence(type), Context.OTHER);\n        }\n\n        break;\n      }\n\n      case Token.HOOK: {\n        Preconditions.checkState(childCount == 3);\n        int p = NodeUtil.precedence(type);\n        addExpr(first, p + 1, context);\n        cc.addOp(\"?\", true);\n        addExpr(first.getNext(), 1, Context.OTHER);\n        cc.addOp(\":\", true);\n        addExpr(last, 1, Context.OTHER);\n        break;\n      }\n\n      case Token.REGEXP:\n        if (!first.isString() ||\n            !last.isString()) {\n          throw new Error(\"Expected children to be strings\");\n        }\n\n        String regexp = regexpEscape(first.getString(), outputCharsetEncoder);\n\n        // I only use one .add because whitespace matters\n        if (childCount == 2) {\n          add(regexp + last.getString());\n        } else {\n          Preconditions.checkState(childCount == 1);\n          add(regexp);\n        }\n        break;\n\n      case Token.FUNCTION:\n        if (n.getClass() != Node.class) {\n          throw new Error(\"Unexpected Node subclass.\");\n        }\n        Preconditions.checkState(childCount == 3);\n        boolean funcNeedsParens = (context == Context.START_OF_EXPR);\n        if (funcNeedsParens) {\n          add(\"(\");\n        }\n\n        add(\"function\");\n        add(first);\n\n        add(first.getNext());\n        add(last, Context.PRESERVE_BLOCK);\n        cc.endFunction(context == Context.STATEMENT);\n\n        if (funcNeedsParens) {\n          add(\")\");\n        }\n        break;\n\n      case Token.GETTER_DEF:\n      case Token.SETTER_DEF:\n        Preconditions.checkState(n.getParent().isObjectLit());\n        Preconditions.checkState(childCount == 1);\n        Preconditions.checkState(first.isFunction());\n\n        // Get methods are unnamed\n        Preconditions.checkState(first.getFirstChild().getString().isEmpty());\n        if (type == Token.GETTER_DEF) {\n          // Get methods have no parameters.\n          Preconditions.checkState(!first.getChildAtIndex(1).hasChildren());\n          add(\"get \");\n        } else {\n          // Set methods have one parameter.\n          Preconditions.checkState(first.getChildAtIndex(1).hasOneChild());\n          add(\"set \");\n        }\n\n        // The name is on the GET or SET node.\n        String name = n.getString();\n        Node fn = first;\n        Node parameters = fn.getChildAtIndex(1);\n        Node body = fn.getLastChild();\n\n        // Add the property name.\n        if (!n.isQuotedString() &&\n            TokenStream.isJSIdentifier(name) &&\n            // do not encode literally any non-literal characters that were\n            // Unicode escaped.\n            NodeUtil.isLatin(name)) {\n          add(name);\n        } else {\n          // Determine if the string is a simple number.\n          double d = getSimpleNumber(name);\n          if (!Double.isNaN(d)) {\n            cc.addNumber(d);\n          } else {\n            addJsString(n);\n          }\n        }\n\n        add(parameters);\n        add(body, Context.PRESERVE_BLOCK);\n        break;\n\n      case Token.SCRIPT:\n      case Token.BLOCK: {\n        if (n.getClass() != Node.class) {\n          throw new Error(\"Unexpected Node subclass.\");\n        }\n        boolean preserveBlock = context == Context.PRESERVE_BLOCK;\n        if (preserveBlock) {\n          cc.beginBlock();\n        }\n\n        boolean preferLineBreaks =\n            type == Token.SCRIPT ||\n            (type == Token.BLOCK &&\n                !preserveBlock &&\n                n.getParent() != null &&\n                n.getParent().isScript());\n        for (Node c = first; c != null; c = c.getNext()) {\n          add(c, Context.STATEMENT);\n\n          // VAR doesn't include ';' since it gets used in expressions\n          if (c.isVar()) {\n            cc.endStatement();\n          }\n\n          if (c.isFunction()) {\n            cc.maybeLineBreak();\n          }\n\n          // Prefer to break lines in between top-level statements\n          // because top-level statements are more homogeneous.\n          if (preferLineBreaks) {\n            cc.notePreferredLineBreak();\n          }\n        }\n        if (preserveBlock) {\n          cc.endBlock(cc.breakAfterBlockFor(n, context == Context.STATEMENT));\n        }\n        break;\n      }\n\n      case Token.FOR:\n        if (childCount == 4) {\n          add(\"for(\");\n          if (first.isVar()) {\n            add(first, Context.IN_FOR_INIT_CLAUSE);\n          } else {\n            addExpr(first, 0, Context.IN_FOR_INIT_CLAUSE);\n          }\n          add(\";\");\n          add(first.getNext());\n          add(\";\");\n          add(first.getNext().getNext());\n          add(\")\");\n          addNonEmptyStatement(\n              last, getContextForNonEmptyExpression(context), false);\n        } else {\n          Preconditions.checkState(childCount == 3);\n          add(\"for(\");\n          add(first);\n          add(\"in\");\n          add(first.getNext());\n          add(\")\");\n          addNonEmptyStatement(\n              last, getContextForNonEmptyExpression(context), false);\n        }\n        break;\n\n      case Token.DO:\n        Preconditions.checkState(childCount == 2);\n        add(\"do\");\n        addNonEmptyStatement(first, Context.OTHER, false);\n        add(\"while(\");\n        add(last);\n        add(\")\");\n        cc.endStatement();\n        break;\n\n      case Token.WHILE:\n        Preconditions.checkState(childCount == 2);\n        add(\"while(\");\n        add(first);\n        add(\")\");\n        addNonEmptyStatement(\n            last, getContextForNonEmptyExpression(context), false);\n        break;\n\n      case Token.EMPTY:\n        Preconditions.checkState(childCount == 0);\n        break;\n\n      case Token.GETPROP: {\n        Preconditions.checkState(\n            childCount == 2,\n            \"Bad GETPROP: expected 2 children, but got %s\", childCount);\n        Preconditions.checkState(\n            last.isString(),\n            \"Bad GETPROP: RHS should be STRING\");\n        boolean needsParens = (first.isNumber());\n        if (needsParens) {\n          add(\"(\");\n        }\n        addExpr(first, NodeUtil.precedence(type), context);\n        if (needsParens) {\n          add(\")\");\n        }\n        add(\".\");\n        addIdentifier(last.getString());\n        break;\n      }\n\n      case Token.GETELEM:\n        Preconditions.checkState(\n            childCount == 2,\n            \"Bad GETELEM: expected 2 children but got %s\", childCount);\n        addExpr(first, NodeUtil.precedence(type), context);\n        add(\"[\");\n        add(first.getNext());\n        add(\"]\");\n        break;\n\n      case Token.WITH:\n        Preconditions.checkState(childCount == 2);\n        add(\"with(\");\n        add(first);\n        add(\")\");\n        addNonEmptyStatement(\n            last, getContextForNonEmptyExpression(context), false);\n        break;\n\n      case Token.INC:\n      case Token.DEC: {\n        Preconditions.checkState(childCount == 1);\n        String o = type == Token.INC ? \"++\" : \"--\";\n        int postProp = n.getIntProp(Node.INCRDECR_PROP);\n        // A non-zero post-prop value indicates a post inc/dec, default of zero\n        // is a pre-inc/dec.\n        if (postProp != 0) {\n          addExpr(first, NodeUtil.precedence(type), context);\n          cc.addOp(o, false);\n        } else {\n          cc.addOp(o, false);\n          add(first);\n        }\n        break;\n      }\n\n      case Token.CALL:\n        // We have two special cases here:\n        // 1) If the left hand side of the call is a direct reference to eval,\n        // then it must have a DIRECT_EVAL annotation. If it does not, then\n        // that means it was originally an indirect call to eval, and that\n        // indirectness must be preserved.\n        // 2) If the left hand side of the call is a property reference,\n        // then the call must not a FREE_CALL annotation. If it does, then\n        // that means it was originally an call without an explicit this and\n        // that must be preserved.\n        if (isIndirectEval(first)\n            || n.getBooleanProp(Node.FREE_CALL) && NodeUtil.isGet(first)) {\n          add(\"(0,\");\n          addExpr(first, NodeUtil.precedence(Token.COMMA), Context.OTHER);\n          add(\")\");\n        } else {\n          addExpr(first, NodeUtil.precedence(type), context);\n        }\n        add(\"(\");\n        addList(first.getNext());\n        add(\")\");\n        break;\n\n      case Token.IF:\n        boolean hasElse = childCount == 3;\n        boolean ambiguousElseClause =\n            context == Context.BEFORE_DANGLING_ELSE && !hasElse;\n        if (ambiguousElseClause) {\n          cc.beginBlock();\n        }\n\n        add(\"if(\");\n        add(first);\n        add(\")\");\n\n        if (hasElse) {\n          addNonEmptyStatement(\n              first.getNext(), Context.BEFORE_DANGLING_ELSE, false);\n          add(\"else\");\n          addNonEmptyStatement(\n              last, getContextForNonEmptyExpression(context), false);\n        } else {\n          addNonEmptyStatement(first.getNext(), Context.OTHER, false);\n          Preconditions.checkState(childCount == 2);\n        }\n\n        if (ambiguousElseClause) {\n          cc.endBlock();\n        }\n        break;\n\n      case Token.NULL:\n        Preconditions.checkState(childCount == 0);\n        cc.addConstant(\"null\");\n        break;\n\n      case Token.THIS:\n        Preconditions.checkState(childCount == 0);\n        add(\"this\");\n        break;\n\n      case Token.FALSE:\n        Preconditions.checkState(childCount == 0);\n        cc.addConstant(\"false\");\n        break;\n\n      case Token.TRUE:\n        Preconditions.checkState(childCount == 0);\n        cc.addConstant(\"true\");\n        break;\n\n      case Token.CONTINUE:\n        Preconditions.checkState(childCount <= 1);\n        add(\"continue\");\n        if (childCount == 1) {\n          if (!first.isLabelName()) {\n            throw new Error(\"Unexpected token type. Should be LABEL_NAME.\");\n          }\n          add(\" \");\n          add(first);\n        }\n        cc.endStatement();\n        break;\n\n      case Token.DEBUGGER:\n        Preconditions.checkState(childCount == 0);\n        add(\"debugger\");\n        cc.endStatement();\n        break;\n\n      case Token.BREAK:\n        Preconditions.checkState(childCount <= 1);\n        add(\"break\");\n        if (childCount == 1) {\n          if (!first.isLabelName()) {\n            throw new Error(\"Unexpected token type. Should be LABEL_NAME.\");\n          }\n          add(\" \");\n          add(first);\n        }\n        cc.endStatement();\n        break;\n\n      case Token.EXPR_RESULT:\n        Preconditions.checkState(childCount == 1);\n        add(first, Context.START_OF_EXPR);\n        cc.endStatement();\n        break;\n\n      case Token.NEW:\n        add(\"new \");\n        int precedence = NodeUtil.precedence(type);\n\n        // If the first child contains a CALL, then claim higher precedence\n        // to force parentheses. Otherwise, when parsed, NEW will bind to the\n        // first viable parentheses (don't traverse into functions).\n        if (NodeUtil.containsType(\n            first, Token.CALL, NodeUtil.MATCH_NOT_FUNCTION)) {\n          precedence = NodeUtil.precedence(first.getType()) + 1;\n        }\n        addExpr(first, precedence, Context.OTHER);\n\n        // '()' is optional when no arguments are present\n        Node next = first.getNext();\n        if (next != null) {\n          add(\"(\");\n          addList(next);\n          add(\")\");\n        }\n        break;\n\n      case Token.STRING_KEY:\n        Preconditions.checkState(\n            childCount == 1, \"Object lit key must have 1 child\");\n        addJsString(n);\n        break;\n\n      case Token.STRING:\n        Preconditions.checkState(\n            childCount == 0, \"A string may not have children\");\n        addJsString(n);\n        break;\n\n      case Token.DELPROP:\n        Preconditions.checkState(childCount == 1);\n        add(\"delete \");\n        add(first);\n        break;\n\n      case Token.OBJECTLIT: {\n        boolean needsParens = (context == Context.START_OF_EXPR);\n        if (needsParens) {\n          add(\"(\");\n        }\n        add(\"{\");\n        for (Node c = first; c != null; c = c.getNext()) {\n          if (c != first) {\n            cc.listSeparator();\n          }\n\n          if (c.isGetterDef() || c.isSetterDef()) {\n            add(c);\n          } else {\n            Preconditions.checkState(c.isStringKey());\n            String key = c.getString();\n            // Object literal property names don't have to be quoted if they\n            // are not JavaScript keywords\n            if (!c.isQuotedString() &&\n                !TokenStream.isKeyword(key) &&\n                TokenStream.isJSIdentifier(key) &&\n                // do not encode literally any non-literal characters that\n                // were Unicode escaped.\n                NodeUtil.isLatin(key)) {\n              add(key);\n            } else {\n              // Determine if the string is a simple number.\n              double d = getSimpleNumber(key);\n              if (!Double.isNaN(d)) {\n                cc.addNumber(d);\n              } else {\n                addExpr(c, 1, Context.OTHER);\n              }\n            }\n            add(\":\");\n            addExpr(c.getFirstChild(), 1, Context.OTHER);\n          }\n        }\n        add(\"}\");\n        if (needsParens) {\n          add(\")\");\n        }\n        break;\n      }\n\n      case Token.SWITCH:\n        add(\"switch(\");\n        add(first);\n        add(\")\");\n        cc.beginBlock();\n        addAllSiblings(first.getNext());\n        cc.endBlock(context == Context.STATEMENT);\n        break;\n\n      case Token.CASE:\n        Preconditions.checkState(childCount == 2);\n        add(\"case \");\n        add(first);\n        addCaseBody(last);\n        break;\n\n      case Token.DEFAULT_CASE:\n        Preconditions.checkState(childCount == 1);\n        add(\"default\");\n        addCaseBody(first);\n        break;\n\n      case Token.LABEL:\n        Preconditions.checkState(childCount == 2);\n        if (!first.isLabelName()) {\n          throw new Error(\"Unexpected token type. Should be LABEL_NAME.\");\n        }\n        add(first);\n        add(\":\");\n        addNonEmptyStatement(\n            last, getContextForNonEmptyExpression(context), true);\n        break;\n\n      case Token.CAST:\n        add(\"(\");\n        add(first);\n        add(\")\");\n        break;\n\n      default:\n        throw new Error(\"Unknown type \" + type + \"\\n\" + n.toStringTree());\n    }",
      "info" : "SwitchStatement[4500-22374]:SwitchStatement[4500-22374]"
    }, {
      "left" : "case Token.TRY:",
      "right" : "case Token.TRY:",
      "info" : "SwitchCase[4522-4537]:SwitchCase[4522-4537]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4538-5161]:Block[4538-5161]"
    }, {
      "left" : "Preconditions.checkState(first.getNext().isBlock() &&\n                !first.getNext().hasMoreThanOneChild());",
      "right" : "Preconditions.checkState(first.getNext().isBlock() &&\n                !first.getNext().hasMoreThanOneChild());",
      "info" : "ExpressionStatement[4548-4658]:ExpressionStatement[4548-4658]"
    }, {
      "left" : "Preconditions.checkState(childCount >= 2 && childCount <= 3);",
      "right" : "Preconditions.checkState(childCount >= 2 && childCount <= 3);",
      "info" : "ExpressionStatement[4667-4728]:ExpressionStatement[4667-4728]"
    }, {
      "left" : "add(\"try\");",
      "right" : "add(\"try\");",
      "info" : "ExpressionStatement[4738-4749]:ExpressionStatement[4738-4749]"
    }, {
      "left" : "add(first, Context.PRESERVE_BLOCK);",
      "right" : "add(first, Context.PRESERVE_BLOCK);",
      "info" : "ExpressionStatement[4758-4793]:ExpressionStatement[4758-4793]"
    }, {
      "left" : "Node catchblock = first.getNext().getFirstChild();",
      "right" : "Node catchblock = first.getNext().getFirstChild();",
      "info" : "VariableDeclarationStatement[4904-4954]:VariableDeclarationStatement[4904-4954]"
    }, {
      "left" : "if (catchblock != null)",
      "right" : "if (catchblock != null)",
      "info" : "IfStatement[4963-5025]:IfStatement[4963-5025]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4987-5025]:Block[4987-5025]"
    }, {
      "left" : "add(catchblock);",
      "right" : "add(catchblock);",
      "info" : "ExpressionStatement[4999-5015]:ExpressionStatement[4999-5015]"
    }, {
      "left" : "if (childCount == 3)",
      "right" : "if (childCount == 3)",
      "info" : "IfStatement[5035-5138]:IfStatement[5035-5138]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5056-5138]:Block[5056-5138]"
    }, {
      "left" : "add(\"finally\");",
      "right" : "add(\"finally\");",
      "info" : "ExpressionStatement[5068-5083]:ExpressionStatement[5068-5083]"
    }, {
      "left" : "add(last, Context.PRESERVE_BLOCK);",
      "right" : "add(last, Context.PRESERVE_BLOCK);",
      "info" : "ExpressionStatement[5094-5128]:ExpressionStatement[5094-5128]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[5147-5153]:BreakStatement[5147-5153]"
    }, {
      "left" : "case Token.CATCH:",
      "right" : "case Token.CATCH:",
      "info" : "SwitchCase[5169-5186]:SwitchCase[5169-5186]"
    }, {
      "left" : "Preconditions.checkState(childCount == 2);",
      "right" : "Preconditions.checkState(childCount == 2);",
      "info" : "ExpressionStatement[5195-5237]:ExpressionStatement[5195-5237]"
    }, {
      "left" : "add(\"catch(\");",
      "right" : "add(\"catch(\");",
      "info" : "ExpressionStatement[5246-5260]:ExpressionStatement[5246-5260]"
    }, {
      "left" : "add(first);",
      "right" : "add(first);",
      "info" : "ExpressionStatement[5269-5280]:ExpressionStatement[5269-5280]"
    }, {
      "left" : "add(\")\");",
      "right" : "add(\")\");",
      "info" : "ExpressionStatement[5289-5298]:ExpressionStatement[5289-5298]"
    }, {
      "left" : "add(last, Context.PRESERVE_BLOCK);",
      "right" : "add(last, Context.PRESERVE_BLOCK);",
      "info" : "ExpressionStatement[5307-5341]:ExpressionStatement[5307-5341]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[5350-5356]:BreakStatement[5350-5356]"
    }, {
      "left" : "case Token.THROW:",
      "right" : "case Token.THROW:",
      "info" : "SwitchCase[5364-5381]:SwitchCase[5364-5381]"
    }, {
      "left" : "Preconditions.checkState(childCount == 1);",
      "right" : "Preconditions.checkState(childCount == 1);",
      "info" : "ExpressionStatement[5390-5432]:ExpressionStatement[5390-5432]"
    }, {
      "left" : "add(\"throw\");",
      "right" : "add(\"throw\");",
      "info" : "ExpressionStatement[5441-5454]:ExpressionStatement[5441-5454]"
    }, {
      "left" : "add(first);",
      "right" : "add(first);",
      "info" : "ExpressionStatement[5463-5474]:ExpressionStatement[5463-5474]"
    }, {
      "left" : "cc.endStatement(true);",
      "right" : "cc.endStatement(true);",
      "info" : "ExpressionStatement[5582-5604]:ExpressionStatement[5582-5604]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[5613-5619]:BreakStatement[5613-5619]"
    }, {
      "left" : "case Token.RETURN:",
      "right" : "case Token.RETURN:",
      "info" : "SwitchCase[5627-5645]:SwitchCase[5627-5645]"
    }, {
      "left" : "add(\"return\");",
      "right" : "add(\"return\");",
      "info" : "ExpressionStatement[5654-5668]:ExpressionStatement[5654-5668]"
    }, {
      "left" : "if (childCount == 1)",
      "right" : "if (childCount == 1)",
      "info" : "IfStatement[5677-5801]:IfStatement[5677-5801]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5698-5731]:Block[5698-5731]"
    }, {
      "left" : "add(first);",
      "right" : "add(first);",
      "info" : "ExpressionStatement[5710-5721]:ExpressionStatement[5710-5721]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5737-5801]:Block[5737-5801]"
    }, {
      "left" : "Preconditions.checkState(childCount == 0);",
      "right" : "Preconditions.checkState(childCount == 0);",
      "info" : "ExpressionStatement[5749-5791]:ExpressionStatement[5749-5791]"
    }, {
      "left" : "cc.endStatement();",
      "right" : "cc.endStatement();",
      "info" : "ExpressionStatement[5810-5828]:ExpressionStatement[5810-5828]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[5837-5843]:BreakStatement[5837-5843]"
    }, {
      "left" : "case Token.VAR:",
      "right" : "case Token.VAR:",
      "info" : "SwitchCase[5851-5866]:SwitchCase[5851-5866]"
    }, {
      "left" : "if (first != null)",
      "right" : "if (first != null)",
      "info" : "IfStatement[5875-5997]:IfStatement[5875-5997]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5894-5997]:Block[5894-5997]"
    }, {
      "left" : "add(\"var \");",
      "right" : "add(\"var \");",
      "info" : "ExpressionStatement[5906-5918]:ExpressionStatement[5906-5918]"
    }, {
      "left" : "addList(first, false, getContextForNoInOperator(context));",
      "right" : "addList(first, false, getContextForNoInOperator(context));",
      "info" : "ExpressionStatement[5929-5987]:ExpressionStatement[5929-5987]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[6006-6012]:BreakStatement[6006-6012]"
    }, {
      "left" : "case Token.LABEL_NAME:",
      "right" : "case Token.LABEL_NAME:",
      "info" : "SwitchCase[6020-6042]:SwitchCase[6020-6042]"
    }, {
      "left" : "Preconditions.checkState(!n.getString().isEmpty());",
      "right" : "Preconditions.checkState(!n.getString().isEmpty());",
      "info" : "ExpressionStatement[6051-6102]:ExpressionStatement[6051-6102]"
    }, {
      "left" : "addIdentifier(n.getString());",
      "right" : "addIdentifier(n.getString());",
      "info" : "ExpressionStatement[6111-6140]:ExpressionStatement[6111-6140]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[6149-6155]:BreakStatement[6149-6155]"
    }, {
      "left" : "case Token.NAME:",
      "right" : "case Token.NAME:",
      "info" : "SwitchCase[6163-6179]:SwitchCase[6163-6179]"
    }, {
      "left" : "if (first == null || first.isEmpty())",
      "right" : "if (first == null || first.isEmpty())",
      "info" : "IfStatement[6188-6725]:IfStatement[6188-6725]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6226-6277]:Block[6226-6277]"
    }, {
      "left" : "addIdentifier(n.getString());",
      "right" : "addIdentifier(n.getString());",
      "info" : "ExpressionStatement[6238-6267]:ExpressionStatement[6238-6267]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6283-6725]:Block[6283-6725]"
    }, {
      "left" : "Preconditions.checkState(childCount == 1);",
      "right" : "Preconditions.checkState(childCount == 1);",
      "info" : "ExpressionStatement[6295-6337]:ExpressionStatement[6295-6337]"
    }, {
      "left" : "addIdentifier(n.getString());",
      "right" : "addIdentifier(n.getString());",
      "info" : "ExpressionStatement[6348-6377]:ExpressionStatement[6348-6377]"
    }, {
      "left" : "cc.addOp(\"=\", true);",
      "right" : "cc.addOp(\"=\", true);",
      "info" : "ExpressionStatement[6388-6408]:ExpressionStatement[6388-6408]"
    }, {
      "left" : "if (first.isComma())",
      "right" : "if (first.isComma())",
      "info" : "IfStatement[6419-6715]:IfStatement[6419-6715]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6440-6531]:Block[6440-6531]"
    }, {
      "left" : "addExpr(first, NodeUtil.precedence(Token.ASSIGN), Context.OTHER);",
      "right" : "addExpr(first, NodeUtil.precedence(Token.ASSIGN), Context.OTHER);",
      "info" : "ExpressionStatement[6454-6519]:ExpressionStatement[6454-6519]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6537-6715]:Block[6537-6715]"
    }, {
      "left" : "addExpr(first, 0, getContextForNoInOperator(context));",
      "right" : "addExpr(first, 0, getContextForNoInOperator(context));",
      "info" : "ExpressionStatement[6649-6703]:ExpressionStatement[6649-6703]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[6734-6740]:BreakStatement[6734-6740]"
    }, {
      "left" : "case Token.ARRAYLIT:",
      "right" : "case Token.ARRAYLIT:",
      "info" : "SwitchCase[6748-6768]:SwitchCase[6748-6768]"
    }, {
      "left" : "add(\"[\");",
      "right" : "add(\"[\");",
      "info" : "ExpressionStatement[6777-6786]:ExpressionStatement[6777-6786]"
    }, {
      "left" : "addArrayList(first);",
      "right" : "addArrayList(first);",
      "info" : "ExpressionStatement[6795-6815]:ExpressionStatement[6795-6815]"
    }, {
      "left" : "add(\"]\");",
      "right" : "add(\"]\");",
      "info" : "ExpressionStatement[6824-6833]:ExpressionStatement[6824-6833]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[6842-6848]:BreakStatement[6842-6848]"
    }, {
      "left" : "case Token.PARAM_LIST:",
      "right" : "case Token.PARAM_LIST:",
      "info" : "SwitchCase[6856-6878]:SwitchCase[6856-6878]"
    }, {
      "left" : "add(\"(\");",
      "right" : "add(\"(\");",
      "info" : "ExpressionStatement[6887-6896]:ExpressionStatement[6887-6896]"
    }, {
      "left" : "addList(first);",
      "right" : "addList(first);",
      "info" : "ExpressionStatement[6905-6920]:ExpressionStatement[6905-6920]"
    }, {
      "left" : "add(\")\");",
      "right" : "add(\")\");",
      "info" : "ExpressionStatement[6929-6938]:ExpressionStatement[6929-6938]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[6947-6953]:BreakStatement[6947-6953]"
    }, {
      "left" : "case Token.COMMA:",
      "right" : "case Token.COMMA:",
      "info" : "SwitchCase[6961-6978]:SwitchCase[6961-6978]"
    }, {
      "left" : "Preconditions.checkState(childCount == 2);",
      "right" : "Preconditions.checkState(childCount == 2);",
      "info" : "ExpressionStatement[6987-7029]:ExpressionStatement[6987-7029]"
    }, {
      "left" : "unrollBinaryOperator(n, Token.COMMA, \",\", context, Context.OTHER, 0, 0);",
      "right" : "unrollBinaryOperator(n, Token.COMMA, \",\", context, Context.OTHER, 0, 0);",
      "info" : "ExpressionStatement[7038-7110]:ExpressionStatement[7038-7110]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[7119-7125]:BreakStatement[7119-7125]"
    }, {
      "left" : "case Token.NUMBER:",
      "right" : "case Token.NUMBER:",
      "info" : "SwitchCase[7133-7151]:SwitchCase[7133-7151]"
    }, {
      "left" : "Preconditions.checkState(childCount == 0);",
      "right" : "Preconditions.checkState(childCount == 0);",
      "info" : "ExpressionStatement[7160-7202]:ExpressionStatement[7160-7202]"
    }, {
      "left" : "cc.addNumber(n.getDouble());",
      "right" : "cc.addNumber(n.getDouble());",
      "info" : "ExpressionStatement[7211-7239]:ExpressionStatement[7211-7239]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[7248-7254]:BreakStatement[7248-7254]"
    }, {
      "left" : "case Token.TYPEOF:",
      "right" : "case Token.TYPEOF:",
      "info" : "SwitchCase[7262-7280]:SwitchCase[7262-7280]"
    }, {
      "left" : "case Token.VOID:",
      "right" : "case Token.VOID:",
      "info" : "SwitchCase[7287-7303]:SwitchCase[7287-7303]"
    }, {
      "left" : "case Token.NOT:",
      "right" : "case Token.NOT:",
      "info" : "SwitchCase[7310-7325]:SwitchCase[7310-7325]"
    }, {
      "left" : "case Token.BITNOT:",
      "right" : "case Token.BITNOT:",
      "info" : "SwitchCase[7332-7350]:SwitchCase[7332-7350]"
    }, {
      "left" : "case Token.POS:",
      "right" : "case Token.POS:",
      "info" : "SwitchCase[7357-7372]:SwitchCase[7357-7372]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7373-7631]:Block[7373-7631]"
    }, {
      "left" : "Preconditions.checkState(childCount == 1);",
      "right" : "Preconditions.checkState(childCount == 1);",
      "info" : "ExpressionStatement[7445-7487]:ExpressionStatement[7445-7487]"
    }, {
      "left" : "cc.addOp(NodeUtil.opToStrNoFail(type), false);",
      "right" : "cc.addOp(NodeUtil.opToStrNoFail(type), false);",
      "info" : "ExpressionStatement[7496-7542]:ExpressionStatement[7496-7542]"
    }, {
      "left" : "addExpr(first, NodeUtil.precedence(type), Context.OTHER);",
      "right" : "addExpr(first, NodeUtil.precedence(type), Context.OTHER);",
      "info" : "ExpressionStatement[7551-7608]:ExpressionStatement[7551-7608]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[7617-7623]:BreakStatement[7617-7623]"
    }, {
      "left" : "case Token.NEG:",
      "right" : "case Token.NEG:",
      "info" : "SwitchCase[7639-7654]:SwitchCase[7639-7654]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7655-8182]:Block[7655-8182]"
    }, {
      "left" : "Preconditions.checkState(childCount == 1);",
      "right" : "Preconditions.checkState(childCount == 1);",
      "info" : "ExpressionStatement[7665-7707]:ExpressionStatement[7665-7707]"
    }, {
      "left" : "if (n.getFirstChild().isNumber())",
      "right" : "if (n.getFirstChild().isNumber())",
      "info" : "IfStatement[7915-8158]:IfStatement[7915-8158]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7949-8016]:Block[7949-8016]"
    }, {
      "left" : "cc.addNumber(-n.getFirstChild().getDouble());",
      "right" : "cc.addNumber(-n.getFirstChild().getDouble());",
      "info" : "ExpressionStatement[7961-8006]:ExpressionStatement[7961-8006]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8022-8158]:Block[8022-8158]"
    }, {
      "left" : "cc.addOp(NodeUtil.opToStrNoFail(type), false);",
      "right" : "cc.addOp(NodeUtil.opToStrNoFail(type), false);",
      "info" : "ExpressionStatement[8034-8080]:ExpressionStatement[8034-8080]"
    }, {
      "left" : "addExpr(first, NodeUtil.precedence(type), Context.OTHER);",
      "right" : "addExpr(first, NodeUtil.precedence(type), Context.OTHER);",
      "info" : "ExpressionStatement[8091-8148]:ExpressionStatement[8091-8148]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[8168-8174]:BreakStatement[8168-8174]"
    }, {
      "left" : "case Token.HOOK:",
      "right" : "case Token.HOOK:",
      "info" : "SwitchCase[8190-8206]:SwitchCase[8190-8206]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8207-8516]:Block[8207-8516]"
    }, {
      "left" : "Preconditions.checkState(childCount == 3);",
      "right" : "Preconditions.checkState(childCount == 3);",
      "info" : "ExpressionStatement[8217-8259]:ExpressionStatement[8217-8259]"
    }, {
      "left" : "int p = NodeUtil.precedence(type);",
      "right" : "int p = NodeUtil.precedence(type);",
      "info" : "VariableDeclarationStatement[8268-8302]:VariableDeclarationStatement[8268-8302]"
    }, {
      "left" : "addExpr(first, p + 1, context);",
      "right" : "addExpr(first, p + 1, context);",
      "info" : "ExpressionStatement[8311-8342]:ExpressionStatement[8311-8342]"
    }, {
      "left" : "cc.addOp(\"?\", true);",
      "right" : "cc.addOp(\"?\", true);",
      "info" : "ExpressionStatement[8351-8371]:ExpressionStatement[8351-8371]"
    }, {
      "left" : "addExpr(first.getNext(), 1, Context.OTHER);",
      "right" : "addExpr(first.getNext(), 1, Context.OTHER);",
      "info" : "ExpressionStatement[8380-8423]:ExpressionStatement[8380-8423]"
    }, {
      "left" : "cc.addOp(\":\", true);",
      "right" : "cc.addOp(\":\", true);",
      "info" : "ExpressionStatement[8432-8452]:ExpressionStatement[8432-8452]"
    }, {
      "left" : "addExpr(last, 1, Context.OTHER);",
      "right" : "addExpr(last, 1, Context.OTHER);",
      "info" : "ExpressionStatement[8461-8493]:ExpressionStatement[8461-8493]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[8502-8508]:BreakStatement[8502-8508]"
    }, {
      "left" : "case Token.REGEXP:",
      "right" : "case Token.REGEXP:",
      "info" : "SwitchCase[8524-8542]:SwitchCase[8524-8542]"
    }, {
      "left" : "if (!first.isString() ||\n            !last.isString())",
      "right" : "if (!first.isString() ||\n            !last.isString())",
      "info" : "IfStatement[8551-8679]:IfStatement[8551-8679]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8606-8679]:Block[8606-8679]"
    }, {
      "left" : "throw new Error(\"Expected children to be strings\");",
      "right" : "throw new Error(\"Expected children to be strings\");",
      "info" : "ThrowStatement[8618-8669]:ThrowStatement[8618-8669]"
    }, {
      "left" : "String regexp = regexpEscape(first.getString(), outputCharsetEncoder);",
      "right" : "String regexp = regexpEscape(first.getString(), outputCharsetEncoder);",
      "info" : "VariableDeclarationStatement[8689-8759]:VariableDeclarationStatement[8689-8759]"
    }, {
      "left" : "if (childCount == 2)",
      "right" : "if (childCount == 2)",
      "info" : "IfStatement[8827-8994]:IfStatement[8827-8994]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8848-8901]:Block[8848-8901]"
    }, {
      "left" : "add(regexp + last.getString());",
      "right" : "add(regexp + last.getString());",
      "info" : "ExpressionStatement[8860-8891]:ExpressionStatement[8860-8891]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8907-8994]:Block[8907-8994]"
    }, {
      "left" : "Preconditions.checkState(childCount == 1);",
      "right" : "Preconditions.checkState(childCount == 1);",
      "info" : "ExpressionStatement[8919-8961]:ExpressionStatement[8919-8961]"
    }, {
      "left" : "add(regexp);",
      "right" : "add(regexp);",
      "info" : "ExpressionStatement[8972-8984]:ExpressionStatement[8972-8984]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[9003-9009]:BreakStatement[9003-9009]"
    }, {
      "left" : "case Token.FUNCTION:",
      "right" : "case Token.FUNCTION:",
      "info" : "SwitchCase[9017-9037]:SwitchCase[9017-9037]"
    }, {
      "left" : "if (n.getClass() != Node.class)",
      "right" : "if (n.getClass() != Node.class)",
      "info" : "IfStatement[9046-9145]:IfStatement[9046-9145]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9078-9145]:Block[9078-9145]"
    }, {
      "left" : "throw new Error(\"Unexpected Node subclass.\");",
      "right" : "throw new Error(\"Unexpected Node subclass.\");",
      "info" : "ThrowStatement[9090-9135]:ThrowStatement[9090-9135]"
    }, {
      "left" : "Preconditions.checkState(childCount == 3);",
      "right" : "Preconditions.checkState(childCount == 3);",
      "info" : "ExpressionStatement[9154-9196]:ExpressionStatement[9154-9196]"
    }, {
      "left" : "boolean funcNeedsParens = (context == Context.START_OF_EXPR);",
      "right" : "boolean funcNeedsParens = (context == Context.START_OF_EXPR);",
      "info" : "VariableDeclarationStatement[9205-9266]:VariableDeclarationStatement[9205-9266]"
    }, {
      "left" : "if (funcNeedsParens)",
      "right" : "if (funcNeedsParens)",
      "info" : "IfStatement[9275-9327]:IfStatement[9275-9327]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9296-9327]:Block[9296-9327]"
    }, {
      "left" : "add(\"(\");",
      "right" : "add(\"(\");",
      "info" : "ExpressionStatement[9308-9317]:ExpressionStatement[9308-9317]"
    }, {
      "left" : "add(\"function\");",
      "right" : "add(\"function\");",
      "info" : "ExpressionStatement[9337-9353]:ExpressionStatement[9337-9353]"
    }, {
      "left" : "add(first);",
      "right" : "add(first);",
      "info" : "ExpressionStatement[9362-9373]:ExpressionStatement[9362-9373]"
    }, {
      "left" : "add(first.getNext());",
      "right" : "add(first.getNext());",
      "info" : "ExpressionStatement[9383-9404]:ExpressionStatement[9383-9404]"
    }, {
      "left" : "add(last, Context.PRESERVE_BLOCK);",
      "right" : "add(last, Context.PRESERVE_BLOCK);",
      "info" : "ExpressionStatement[9413-9447]:ExpressionStatement[9413-9447]"
    }, {
      "left" : "cc.endFunction(context == Context.STATEMENT);",
      "right" : "cc.endFunction(context == Context.STATEMENT);",
      "info" : "ExpressionStatement[9456-9501]:ExpressionStatement[9456-9501]"
    }, {
      "left" : "if (funcNeedsParens)",
      "right" : "if (funcNeedsParens)",
      "info" : "IfStatement[9511-9563]:IfStatement[9511-9563]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9532-9563]:Block[9532-9563]"
    }, {
      "left" : "add(\")\");",
      "right" : "add(\")\");",
      "info" : "ExpressionStatement[9544-9553]:ExpressionStatement[9544-9553]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[9572-9578]:BreakStatement[9572-9578]"
    }, {
      "left" : "case Token.GETTER_DEF:",
      "right" : "case Token.GETTER_DEF:",
      "info" : "SwitchCase[9586-9608]:SwitchCase[9586-9608]"
    }, {
      "left" : "case Token.SETTER_DEF:",
      "right" : "case Token.SETTER_DEF:",
      "info" : "SwitchCase[9615-9637]:SwitchCase[9615-9637]"
    }, {
      "left" : "Preconditions.checkState(n.getParent().isObjectLit());",
      "right" : "Preconditions.checkState(n.getParent().isObjectLit());",
      "info" : "ExpressionStatement[9646-9700]:ExpressionStatement[9646-9700]"
    }, {
      "left" : "Preconditions.checkState(childCount == 1);",
      "right" : "Preconditions.checkState(childCount == 1);",
      "info" : "ExpressionStatement[9709-9751]:ExpressionStatement[9709-9751]"
    }, {
      "left" : "Preconditions.checkState(first.isFunction());",
      "right" : "Preconditions.checkState(first.isFunction());",
      "info" : "ExpressionStatement[9760-9805]:ExpressionStatement[9760-9805]"
    }, {
      "left" : "Preconditions.checkState(first.getFirstChild().getString().isEmpty());",
      "right" : "Preconditions.checkState(first.getFirstChild().getString().isEmpty());",
      "info" : "ExpressionStatement[9850-9920]:ExpressionStatement[9850-9920]"
    }, {
      "left" : "if (type == Token.GETTER_DEF)",
      "right" : "if (type == Token.GETTER_DEF)",
      "info" : "IfStatement[9929-10276]:IfStatement[9929-10276]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9959-10115]:Block[9959-10115]"
    }, {
      "left" : "Preconditions.checkState(!first.getChildAtIndex(1).hasChildren());",
      "right" : "Preconditions.checkState(!first.getChildAtIndex(1).hasChildren());",
      "info" : "ExpressionStatement[10016-10082]:ExpressionStatement[10016-10082]"
    }, {
      "left" : "add(\"get \");",
      "right" : "add(\"get \");",
      "info" : "ExpressionStatement[10093-10105]:ExpressionStatement[10093-10105]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10121-10276]:Block[10121-10276]"
    }, {
      "left" : "Preconditions.checkState(first.getChildAtIndex(1).hasOneChild());",
      "right" : "Preconditions.checkState(first.getChildAtIndex(1).hasOneChild());",
      "info" : "ExpressionStatement[10178-10243]:ExpressionStatement[10178-10243]"
    }, {
      "left" : "add(\"set \");",
      "right" : "add(\"set \");",
      "info" : "ExpressionStatement[10254-10266]:ExpressionStatement[10254-10266]"
    }, {
      "left" : "String name = n.getString();",
      "right" : "String name = n.getString();",
      "info" : "VariableDeclarationStatement[10333-10361]:VariableDeclarationStatement[10333-10361]"
    }, {
      "left" : "Node fn = first;",
      "right" : "Node fn = first;",
      "info" : "VariableDeclarationStatement[10370-10386]:VariableDeclarationStatement[10370-10386]"
    }, {
      "left" : "Node parameters = fn.getChildAtIndex(1);",
      "right" : "Node parameters = fn.getChildAtIndex(1);",
      "info" : "VariableDeclarationStatement[10395-10435]:VariableDeclarationStatement[10395-10435]"
    }, {
      "left" : "Node body = fn.getLastChild();",
      "right" : "Node body = fn.getLastChild();",
      "info" : "VariableDeclarationStatement[10444-10474]:VariableDeclarationStatement[10444-10474]"
    }, {
      "left" : "if (!n.isQuotedString() &&\n            TokenStream.isJSIdentifier(name) &&\n            // do not encode literally any non-literal characters that were\n            // Unicode escaped.\n            NodeUtil.isLatin(name))",
      "right" : "if (!n.isQuotedString() &&\n            TokenStream.isJSIdentifier(name) &&\n            // do not encode literally any non-literal characters that were\n            // Unicode escaped.\n            NodeUtil.isLatin(name))",
      "info" : "IfStatement[10518-11009]:IfStatement[10518-11009]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10737-10769]:Block[10737-10769]"
    }, {
      "left" : "add(name);",
      "right" : "add(name);",
      "info" : "ExpressionStatement[10749-10759]:ExpressionStatement[10749-10759]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10775-11009]:Block[10775-11009]"
    }, {
      "left" : "double d = getSimpleNumber(name);",
      "right" : "double d = getSimpleNumber(name);",
      "info" : "VariableDeclarationStatement[10844-10877]:VariableDeclarationStatement[10844-10877]"
    }, {
      "left" : "if (!Double.isNaN(d))",
      "right" : "if (!Double.isNaN(d))",
      "info" : "IfStatement[10888-10999]:IfStatement[10888-10999]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10910-10952]:Block[10910-10952]"
    }, {
      "left" : "cc.addNumber(d);",
      "right" : "cc.addNumber(d);",
      "info" : "ExpressionStatement[10924-10940]:ExpressionStatement[10924-10940]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10958-10999]:Block[10958-10999]"
    }, {
      "left" : "addJsString(n);",
      "right" : "addJsString(n);",
      "info" : "ExpressionStatement[10972-10987]:ExpressionStatement[10972-10987]"
    }, {
      "left" : "add(parameters);",
      "right" : "add(parameters);",
      "info" : "ExpressionStatement[11019-11035]:ExpressionStatement[11019-11035]"
    }, {
      "left" : "add(body, Context.PRESERVE_BLOCK);",
      "right" : "add(body, Context.PRESERVE_BLOCK);",
      "info" : "ExpressionStatement[11044-11078]:ExpressionStatement[11044-11078]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[11087-11093]:BreakStatement[11087-11093]"
    }, {
      "left" : "case Token.SCRIPT:",
      "right" : "case Token.SCRIPT:",
      "info" : "SwitchCase[11101-11119]:SwitchCase[11101-11119]"
    }, {
      "left" : "case Token.BLOCK:",
      "right" : "case Token.BLOCK:",
      "info" : "SwitchCase[11126-11143]:SwitchCase[11126-11143]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11144-12298]:Block[11144-12298]"
    }, {
      "left" : "if (n.getClass() != Node.class)",
      "right" : "if (n.getClass() != Node.class)",
      "info" : "IfStatement[11154-11253]:IfStatement[11154-11253]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11186-11253]:Block[11186-11253]"
    }, {
      "left" : "throw new Error(\"Unexpected Node subclass.\");",
      "right" : "throw new Error(\"Unexpected Node subclass.\");",
      "info" : "ThrowStatement[11198-11243]:ThrowStatement[11198-11243]"
    }, {
      "left" : "boolean preserveBlock = context == Context.PRESERVE_BLOCK;",
      "right" : "boolean preserveBlock = context == Context.PRESERVE_BLOCK;",
      "info" : "VariableDeclarationStatement[11262-11320]:VariableDeclarationStatement[11262-11320]"
    }, {
      "left" : "if (preserveBlock)",
      "right" : "if (preserveBlock)",
      "info" : "IfStatement[11329-11386]:IfStatement[11329-11386]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11348-11386]:Block[11348-11386]"
    }, {
      "left" : "cc.beginBlock();",
      "right" : "cc.beginBlock();",
      "info" : "ExpressionStatement[11360-11376]:ExpressionStatement[11360-11376]"
    }, {
      "left" : "boolean preferLineBreaks =\n            type == Token.SCRIPT ||\n            (type == Token.BLOCK &&\n                !preserveBlock &&\n                n.getParent() != null &&\n                n.getParent().isScript());",
      "right" : "boolean preferLineBreaks =\n            type == Token.SCRIPT ||\n            (type == Token.BLOCK &&\n                !preserveBlock &&\n                n.getParent() != null &&\n                n.getParent().isScript());",
      "info" : "VariableDeclarationStatement[11396-11612]:VariableDeclarationStatement[11396-11612]"
    }, {
      "left" : "for (Node c = first; c != null; c = c.getNext())",
      "right" : "for (Node c = first; c != null; c = c.getNext())",
      "info" : "ForStatement[11621-12157]:ForStatement[11621-12157]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11670-12157]:Block[11670-12157]"
    }, {
      "left" : "add(c, Context.STATEMENT);",
      "right" : "add(c, Context.STATEMENT);",
      "info" : "ExpressionStatement[11682-11708]:ExpressionStatement[11682-11708]"
    }, {
      "left" : "if (c.isVar())",
      "right" : "if (c.isVar())",
      "info" : "IfStatement[11791-11850]:IfStatement[11791-11850]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11806-11850]:Block[11806-11850]"
    }, {
      "left" : "cc.endStatement();",
      "right" : "cc.endStatement();",
      "info" : "ExpressionStatement[11820-11838]:ExpressionStatement[11820-11838]"
    }, {
      "left" : "if (c.isFunction())",
      "right" : "if (c.isFunction())",
      "info" : "IfStatement[11862-11928]:IfStatement[11862-11928]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11882-11928]:Block[11882-11928]"
    }, {
      "left" : "cc.maybeLineBreak();",
      "right" : "cc.maybeLineBreak();",
      "info" : "ExpressionStatement[11896-11916]:ExpressionStatement[11896-11916]"
    }, {
      "left" : "if (preferLineBreaks)",
      "right" : "if (preferLineBreaks)",
      "info" : "IfStatement[12071-12147]:IfStatement[12071-12147]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12093-12147]:Block[12093-12147]"
    }, {
      "left" : "cc.notePreferredLineBreak();",
      "right" : "cc.notePreferredLineBreak();",
      "info" : "ExpressionStatement[12107-12135]:ExpressionStatement[12107-12135]"
    }, {
      "left" : "if (preserveBlock)",
      "right" : "if (preserveBlock)",
      "info" : "IfStatement[12166-12275]:IfStatement[12166-12275]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12185-12275]:Block[12185-12275]"
    }, {
      "left" : "cc.endBlock(cc.breakAfterBlockFor(n, context == Context.STATEMENT));",
      "right" : "cc.endBlock(cc.breakAfterBlockFor(n, context == Context.STATEMENT));",
      "info" : "ExpressionStatement[12197-12265]:ExpressionStatement[12197-12265]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[12284-12290]:BreakStatement[12284-12290]"
    }, {
      "left" : "case Token.FOR:",
      "right" : "case Token.FOR:",
      "info" : "SwitchCase[12306-12321]:SwitchCase[12306-12321]"
    }, {
      "left" : "if (childCount == 4)",
      "right" : "if (childCount == 4)",
      "info" : "IfStatement[12330-13084]:IfStatement[12330-13084]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12351-12794]:Block[12351-12794]"
    }, {
      "left" : "add(\"for(\");",
      "right" : "add(\"for(\");",
      "info" : "ExpressionStatement[12363-12375]:ExpressionStatement[12363-12375]"
    }, {
      "left" : "if (first.isVar())",
      "right" : "if (first.isVar())",
      "info" : "IfStatement[12386-12548]:IfStatement[12386-12548]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12405-12470]:Block[12405-12470]"
    }, {
      "left" : "add(first, Context.IN_FOR_INIT_CLAUSE);",
      "right" : "add(first, Context.IN_FOR_INIT_CLAUSE);",
      "info" : "ExpressionStatement[12419-12458]:ExpressionStatement[12419-12458]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12476-12548]:Block[12476-12548]"
    }, {
      "left" : "addExpr(first, 0, Context.IN_FOR_INIT_CLAUSE);",
      "right" : "addExpr(first, 0, Context.IN_FOR_INIT_CLAUSE);",
      "info" : "ExpressionStatement[12490-12536]:ExpressionStatement[12490-12536]"
    }, {
      "left" : "add(\";\");",
      "right" : "add(\";\");",
      "info" : "ExpressionStatement[12559-12568]:ExpressionStatement[12559-12568]"
    }, {
      "left" : "add(first.getNext());",
      "right" : "add(first.getNext());",
      "info" : "ExpressionStatement[12579-12600]:ExpressionStatement[12579-12600]"
    }, {
      "left" : "add(\";\");",
      "right" : "add(\";\");",
      "info" : "ExpressionStatement[12611-12620]:ExpressionStatement[12611-12620]"
    }, {
      "left" : "add(first.getNext().getNext());",
      "right" : "add(first.getNext().getNext());",
      "info" : "ExpressionStatement[12631-12662]:ExpressionStatement[12631-12662]"
    }, {
      "left" : "add(\")\");",
      "right" : "add(\")\");",
      "info" : "ExpressionStatement[12673-12682]:ExpressionStatement[12673-12682]"
    }, {
      "left" : "addNonEmptyStatement(\n              last, getContextForNonEmptyExpression(context), false);",
      "right" : "addNonEmptyStatement(\n              last, getContextForNonEmptyExpression(context), false);",
      "info" : "ExpressionStatement[12693-12784]:ExpressionStatement[12693-12784]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12800-13084]:Block[12800-13084]"
    }, {
      "left" : "Preconditions.checkState(childCount == 3);",
      "right" : "Preconditions.checkState(childCount == 3);",
      "info" : "ExpressionStatement[12812-12854]:ExpressionStatement[12812-12854]"
    }, {
      "left" : "add(\"for(\");",
      "right" : "add(\"for(\");",
      "info" : "ExpressionStatement[12865-12877]:ExpressionStatement[12865-12877]"
    }, {
      "left" : "add(first);",
      "right" : "add(first);",
      "info" : "ExpressionStatement[12888-12899]:ExpressionStatement[12888-12899]"
    }, {
      "left" : "add(\"in\");",
      "right" : "add(\"in\");",
      "info" : "ExpressionStatement[12910-12920]:ExpressionStatement[12910-12920]"
    }, {
      "left" : "add(first.getNext());",
      "right" : "add(first.getNext());",
      "info" : "ExpressionStatement[12931-12952]:ExpressionStatement[12931-12952]"
    }, {
      "left" : "add(\")\");",
      "right" : "add(\")\");",
      "info" : "ExpressionStatement[12963-12972]:ExpressionStatement[12963-12972]"
    }, {
      "left" : "addNonEmptyStatement(\n              last, getContextForNonEmptyExpression(context), false);",
      "right" : "addNonEmptyStatement(\n              last, getContextForNonEmptyExpression(context), false);",
      "info" : "ExpressionStatement[12983-13074]:ExpressionStatement[12983-13074]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[13093-13099]:BreakStatement[13093-13099]"
    }, {
      "left" : "case Token.DO:",
      "right" : "case Token.DO:",
      "info" : "SwitchCase[13107-13121]:SwitchCase[13107-13121]"
    }, {
      "left" : "Preconditions.checkState(childCount == 2);",
      "right" : "Preconditions.checkState(childCount == 2);",
      "info" : "ExpressionStatement[13130-13172]:ExpressionStatement[13130-13172]"
    }, {
      "left" : "add(\"do\");",
      "right" : "add(\"do\");",
      "info" : "ExpressionStatement[13181-13191]:ExpressionStatement[13181-13191]"
    }, {
      "left" : "addNonEmptyStatement(first, Context.OTHER, false);",
      "right" : "addNonEmptyStatement(first, Context.OTHER, false);",
      "info" : "ExpressionStatement[13200-13250]:ExpressionStatement[13200-13250]"
    }, {
      "left" : "add(\"while(\");",
      "right" : "add(\"while(\");",
      "info" : "ExpressionStatement[13259-13273]:ExpressionStatement[13259-13273]"
    }, {
      "left" : "add(last);",
      "right" : "add(last);",
      "info" : "ExpressionStatement[13282-13292]:ExpressionStatement[13282-13292]"
    }, {
      "left" : "add(\")\");",
      "right" : "add(\")\");",
      "info" : "ExpressionStatement[13301-13310]:ExpressionStatement[13301-13310]"
    }, {
      "left" : "cc.endStatement();",
      "right" : "cc.endStatement();",
      "info" : "ExpressionStatement[13319-13337]:ExpressionStatement[13319-13337]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[13346-13352]:BreakStatement[13346-13352]"
    }, {
      "left" : "case Token.WHILE:",
      "right" : "case Token.WHILE:",
      "info" : "SwitchCase[13360-13377]:SwitchCase[13360-13377]"
    }, {
      "left" : "Preconditions.checkState(childCount == 2);",
      "right" : "Preconditions.checkState(childCount == 2);",
      "info" : "ExpressionStatement[13386-13428]:ExpressionStatement[13386-13428]"
    }, {
      "left" : "add(\"while(\");",
      "right" : "add(\"while(\");",
      "info" : "ExpressionStatement[13437-13451]:ExpressionStatement[13437-13451]"
    }, {
      "left" : "add(first);",
      "right" : "add(first);",
      "info" : "ExpressionStatement[13460-13471]:ExpressionStatement[13460-13471]"
    }, {
      "left" : "add(\")\");",
      "right" : "add(\")\");",
      "info" : "ExpressionStatement[13480-13489]:ExpressionStatement[13480-13489]"
    }, {
      "left" : "addNonEmptyStatement(\n            last, getContextForNonEmptyExpression(context), false);",
      "right" : "addNonEmptyStatement(\n            last, getContextForNonEmptyExpression(context), false);",
      "info" : "ExpressionStatement[13498-13587]:ExpressionStatement[13498-13587]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[13596-13602]:BreakStatement[13596-13602]"
    }, {
      "left" : "case Token.EMPTY:",
      "right" : "case Token.EMPTY:",
      "info" : "SwitchCase[13610-13627]:SwitchCase[13610-13627]"
    }, {
      "left" : "Preconditions.checkState(childCount == 0);",
      "right" : "Preconditions.checkState(childCount == 0);",
      "info" : "ExpressionStatement[13636-13678]:ExpressionStatement[13636-13678]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[13687-13693]:BreakStatement[13687-13693]"
    }, {
      "left" : "case Token.GETPROP:",
      "right" : "case Token.GETPROP:",
      "info" : "SwitchCase[13701-13720]:SwitchCase[13701-13720]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13721-14277]:Block[13721-14277]"
    }, {
      "left" : "Preconditions.checkState(\n            childCount == 2,\n            \"Bad GETPROP: expected 2 children, but got %s\", childCount);",
      "right" : "Preconditions.checkState(\n            childCount == 2,\n            \"Bad GETPROP: expected 2 children, but got %s\", childCount);",
      "info" : "ExpressionStatement[13731-13858]:ExpressionStatement[13731-13858]"
    }, {
      "left" : "Preconditions.checkState(\n            last.isString(),\n            \"Bad GETPROP: RHS should be STRING\");",
      "right" : "Preconditions.checkState(\n            last.isString(),\n            \"Bad GETPROP: RHS should be STRING\");",
      "info" : "ExpressionStatement[13867-13971]:ExpressionStatement[13867-13971]"
    }, {
      "left" : "boolean needsParens = (first.isNumber());",
      "right" : "boolean needsParens = (first.isNumber());",
      "info" : "VariableDeclarationStatement[13980-14021]:VariableDeclarationStatement[13980-14021]"
    }, {
      "left" : "if (needsParens)",
      "right" : "if (needsParens)",
      "info" : "IfStatement[14030-14078]:IfStatement[14030-14078]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14047-14078]:Block[14047-14078]"
    }, {
      "left" : "add(\"(\");",
      "right" : "add(\"(\");",
      "info" : "ExpressionStatement[14059-14068]:ExpressionStatement[14059-14068]"
    }, {
      "left" : "addExpr(first, NodeUtil.precedence(type), context);",
      "right" : "addExpr(first, NodeUtil.precedence(type), context);",
      "info" : "ExpressionStatement[14087-14138]:ExpressionStatement[14087-14138]"
    }, {
      "left" : "if (needsParens)",
      "right" : "if (needsParens)",
      "info" : "IfStatement[14147-14195]:IfStatement[14147-14195]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14164-14195]:Block[14164-14195]"
    }, {
      "left" : "add(\")\");",
      "right" : "add(\")\");",
      "info" : "ExpressionStatement[14176-14185]:ExpressionStatement[14176-14185]"
    }, {
      "left" : "add(\".\");",
      "right" : "add(\".\");",
      "info" : "ExpressionStatement[14204-14213]:ExpressionStatement[14204-14213]"
    }, {
      "left" : "addIdentifier(last.getString());",
      "right" : "addIdentifier(last.getString());",
      "info" : "ExpressionStatement[14222-14254]:ExpressionStatement[14222-14254]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[14263-14269]:BreakStatement[14263-14269]"
    }, {
      "left" : "case Token.GETELEM:",
      "right" : "case Token.GETELEM:",
      "info" : "SwitchCase[14285-14304]:SwitchCase[14285-14304]"
    }, {
      "left" : "Preconditions.checkState(\n            childCount == 2,\n            \"Bad GETELEM: expected 2 children but got %s\", childCount);",
      "right" : "Preconditions.checkState(\n            childCount == 2,\n            \"Bad GETELEM: expected 2 children but got %s\", childCount);",
      "info" : "ExpressionStatement[14313-14439]:ExpressionStatement[14313-14439]"
    }, {
      "left" : "addExpr(first, NodeUtil.precedence(type), context);",
      "right" : "addExpr(first, NodeUtil.precedence(type), context);",
      "info" : "ExpressionStatement[14448-14499]:ExpressionStatement[14448-14499]"
    }, {
      "left" : "add(\"[\");",
      "right" : "add(\"[\");",
      "info" : "ExpressionStatement[14508-14517]:ExpressionStatement[14508-14517]"
    }, {
      "left" : "add(first.getNext());",
      "right" : "add(first.getNext());",
      "info" : "ExpressionStatement[14526-14547]:ExpressionStatement[14526-14547]"
    }, {
      "left" : "add(\"]\");",
      "right" : "add(\"]\");",
      "info" : "ExpressionStatement[14556-14565]:ExpressionStatement[14556-14565]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[14574-14580]:BreakStatement[14574-14580]"
    }, {
      "left" : "case Token.WITH:",
      "right" : "case Token.WITH:",
      "info" : "SwitchCase[14588-14604]:SwitchCase[14588-14604]"
    }, {
      "left" : "Preconditions.checkState(childCount == 2);",
      "right" : "Preconditions.checkState(childCount == 2);",
      "info" : "ExpressionStatement[14613-14655]:ExpressionStatement[14613-14655]"
    }, {
      "left" : "add(\"with(\");",
      "right" : "add(\"with(\");",
      "info" : "ExpressionStatement[14664-14677]:ExpressionStatement[14664-14677]"
    }, {
      "left" : "add(first);",
      "right" : "add(first);",
      "info" : "ExpressionStatement[14686-14697]:ExpressionStatement[14686-14697]"
    }, {
      "left" : "add(\")\");",
      "right" : "add(\")\");",
      "info" : "ExpressionStatement[14706-14715]:ExpressionStatement[14706-14715]"
    }, {
      "left" : "addNonEmptyStatement(\n            last, getContextForNonEmptyExpression(context), false);",
      "right" : "addNonEmptyStatement(\n            last, getContextForNonEmptyExpression(context), false);",
      "info" : "ExpressionStatement[14724-14813]:ExpressionStatement[14724-14813]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[14822-14828]:BreakStatement[14822-14828]"
    }, {
      "left" : "case Token.INC:",
      "right" : "case Token.INC:",
      "info" : "SwitchCase[14836-14851]:SwitchCase[14836-14851]"
    }, {
      "left" : "case Token.DEC:",
      "right" : "case Token.DEC:",
      "info" : "SwitchCase[14858-14873]:SwitchCase[14858-14873]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14874-15367]:Block[14874-15367]"
    }, {
      "left" : "Preconditions.checkState(childCount == 1);",
      "right" : "Preconditions.checkState(childCount == 1);",
      "info" : "ExpressionStatement[14884-14926]:ExpressionStatement[14884-14926]"
    }, {
      "left" : "String o = type == Token.INC ? \"++\" : \"--\";",
      "right" : "String o = type == Token.INC ? \"++\" : \"--\";",
      "info" : "VariableDeclarationStatement[14935-14978]:VariableDeclarationStatement[14935-14978]"
    }, {
      "left" : "int postProp = n.getIntProp(Node.INCRDECR_PROP);",
      "right" : "int postProp = n.getIntProp(Node.INCRDECR_PROP);",
      "info" : "VariableDeclarationStatement[14987-15035]:VariableDeclarationStatement[14987-15035]"
    }, {
      "left" : "if (postProp != 0)",
      "right" : "if (postProp != 0)",
      "info" : "IfStatement[15153-15344]:IfStatement[15153-15344]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15172-15275]:Block[15172-15275]"
    }, {
      "left" : "addExpr(first, NodeUtil.precedence(type), context);",
      "right" : "addExpr(first, NodeUtil.precedence(type), context);",
      "info" : "ExpressionStatement[15184-15235]:ExpressionStatement[15184-15235]"
    }, {
      "left" : "cc.addOp(o, false);",
      "right" : "cc.addOp(o, false);",
      "info" : "ExpressionStatement[15246-15265]:ExpressionStatement[15246-15265]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15281-15344]:Block[15281-15344]"
    }, {
      "left" : "cc.addOp(o, false);",
      "right" : "cc.addOp(o, false);",
      "info" : "ExpressionStatement[15293-15312]:ExpressionStatement[15293-15312]"
    }, {
      "left" : "add(first);",
      "right" : "add(first);",
      "info" : "ExpressionStatement[15323-15334]:ExpressionStatement[15323-15334]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[15353-15359]:BreakStatement[15353-15359]"
    }, {
      "left" : "case Token.CALL:",
      "right" : "case Token.CALL:",
      "info" : "SwitchCase[15375-15391]:SwitchCase[15375-15391]"
    }, {
      "left" : "if (isIndirectEval(first)\n            || n.getBooleanProp(Node.FREE_CALL) && NodeUtil.isGet(first))",
      "right" : "if (isIndirectEval(first)\n            || n.getBooleanProp(Node.FREE_CALL) && NodeUtil.isGet(first))",
      "info" : "IfStatement[15976-16283]:IfStatement[15976-16283]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16076-16204]:Block[16076-16204]"
    }, {
      "left" : "add(\"(0,\");",
      "right" : "add(\"(0,\");",
      "info" : "ExpressionStatement[16088-16099]:ExpressionStatement[16088-16099]"
    }, {
      "left" : "addExpr(first, NodeUtil.precedence(Token.COMMA), Context.OTHER);",
      "right" : "addExpr(first, NodeUtil.precedence(Token.COMMA), Context.OTHER);",
      "info" : "ExpressionStatement[16110-16174]:ExpressionStatement[16110-16174]"
    }, {
      "left" : "add(\")\");",
      "right" : "add(\")\");",
      "info" : "ExpressionStatement[16185-16194]:ExpressionStatement[16185-16194]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16210-16283]:Block[16210-16283]"
    }, {
      "left" : "addExpr(first, NodeUtil.precedence(type), context);",
      "right" : "addExpr(first, NodeUtil.precedence(type), context);",
      "info" : "ExpressionStatement[16222-16273]:ExpressionStatement[16222-16273]"
    }, {
      "left" : "add(\"(\");",
      "right" : "add(\"(\");",
      "info" : "ExpressionStatement[16292-16301]:ExpressionStatement[16292-16301]"
    }, {
      "left" : "addList(first.getNext());",
      "right" : "addList(first.getNext());",
      "info" : "ExpressionStatement[16310-16335]:ExpressionStatement[16310-16335]"
    }, {
      "left" : "add(\")\");",
      "right" : "add(\")\");",
      "info" : "ExpressionStatement[16344-16353]:ExpressionStatement[16344-16353]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[16362-16368]:BreakStatement[16362-16368]"
    }, {
      "left" : "case Token.IF:",
      "right" : "case Token.IF:",
      "info" : "SwitchCase[16376-16390]:SwitchCase[16376-16390]"
    }, {
      "left" : "boolean hasElse = childCount == 3;",
      "right" : "boolean hasElse = childCount == 3;",
      "info" : "VariableDeclarationStatement[16399-16433]:VariableDeclarationStatement[16399-16433]"
    }, {
      "left" : "boolean ambiguousElseClause =\n            context == Context.BEFORE_DANGLING_ELSE && !hasElse;",
      "right" : "boolean ambiguousElseClause =\n            context == Context.BEFORE_DANGLING_ELSE && !hasElse;",
      "info" : "VariableDeclarationStatement[16442-16536]:VariableDeclarationStatement[16442-16536]"
    }, {
      "left" : "if (ambiguousElseClause)",
      "right" : "if (ambiguousElseClause)",
      "info" : "IfStatement[16545-16608]:IfStatement[16545-16608]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16570-16608]:Block[16570-16608]"
    }, {
      "left" : "cc.beginBlock();",
      "right" : "cc.beginBlock();",
      "info" : "ExpressionStatement[16582-16598]:ExpressionStatement[16582-16598]"
    }, {
      "left" : "add(\"if(\");",
      "right" : "add(\"if(\");",
      "info" : "ExpressionStatement[16618-16629]:ExpressionStatement[16618-16629]"
    }, {
      "left" : "add(first);",
      "right" : "add(first);",
      "info" : "ExpressionStatement[16638-16649]:ExpressionStatement[16638-16649]"
    }, {
      "left" : "add(\")\");",
      "right" : "add(\")\");",
      "info" : "ExpressionStatement[16658-16667]:ExpressionStatement[16658-16667]"
    }, {
      "left" : "if (hasElse)",
      "right" : "if (hasElse)",
      "info" : "IfStatement[16677-17068]:IfStatement[16677-17068]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16690-16927]:Block[16690-16927]"
    }, {
      "left" : "addNonEmptyStatement(\n              first.getNext(), Context.BEFORE_DANGLING_ELSE, false);",
      "right" : "addNonEmptyStatement(\n              first.getNext(), Context.BEFORE_DANGLING_ELSE, false);",
      "info" : "ExpressionStatement[16702-16792]:ExpressionStatement[16702-16792]"
    }, {
      "left" : "add(\"else\");",
      "right" : "add(\"else\");",
      "info" : "ExpressionStatement[16803-16815]:ExpressionStatement[16803-16815]"
    }, {
      "left" : "addNonEmptyStatement(\n              last, getContextForNonEmptyExpression(context), false);",
      "right" : "addNonEmptyStatement(\n              last, getContextForNonEmptyExpression(context), false);",
      "info" : "ExpressionStatement[16826-16917]:ExpressionStatement[16826-16917]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16933-17068]:Block[16933-17068]"
    }, {
      "left" : "addNonEmptyStatement(first.getNext(), Context.OTHER, false);",
      "right" : "addNonEmptyStatement(first.getNext(), Context.OTHER, false);",
      "info" : "ExpressionStatement[16945-17005]:ExpressionStatement[16945-17005]"
    }, {
      "left" : "Preconditions.checkState(childCount == 2);",
      "right" : "Preconditions.checkState(childCount == 2);",
      "info" : "ExpressionStatement[17016-17058]:ExpressionStatement[17016-17058]"
    }, {
      "left" : "if (ambiguousElseClause)",
      "right" : "if (ambiguousElseClause)",
      "info" : "IfStatement[17078-17139]:IfStatement[17078-17139]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17103-17139]:Block[17103-17139]"
    }, {
      "left" : "cc.endBlock();",
      "right" : "cc.endBlock();",
      "info" : "ExpressionStatement[17115-17129]:ExpressionStatement[17115-17129]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[17148-17154]:BreakStatement[17148-17154]"
    }, {
      "left" : "case Token.NULL:",
      "right" : "case Token.NULL:",
      "info" : "SwitchCase[17162-17178]:SwitchCase[17162-17178]"
    }, {
      "left" : "Preconditions.checkState(childCount == 0);",
      "right" : "Preconditions.checkState(childCount == 0);",
      "info" : "ExpressionStatement[17187-17229]:ExpressionStatement[17187-17229]"
    }, {
      "left" : "cc.addConstant(\"null\");",
      "right" : "cc.addConstant(\"null\");",
      "info" : "ExpressionStatement[17238-17261]:ExpressionStatement[17238-17261]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[17270-17276]:BreakStatement[17270-17276]"
    }, {
      "left" : "case Token.THIS:",
      "right" : "case Token.THIS:",
      "info" : "SwitchCase[17284-17300]:SwitchCase[17284-17300]"
    }, {
      "left" : "Preconditions.checkState(childCount == 0);",
      "right" : "Preconditions.checkState(childCount == 0);",
      "info" : "ExpressionStatement[17309-17351]:ExpressionStatement[17309-17351]"
    }, {
      "left" : "add(\"this\");",
      "right" : "add(\"this\");",
      "info" : "ExpressionStatement[17360-17372]:ExpressionStatement[17360-17372]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[17381-17387]:BreakStatement[17381-17387]"
    }, {
      "left" : "case Token.FALSE:",
      "right" : "case Token.FALSE:",
      "info" : "SwitchCase[17395-17412]:SwitchCase[17395-17412]"
    }, {
      "left" : "Preconditions.checkState(childCount == 0);",
      "right" : "Preconditions.checkState(childCount == 0);",
      "info" : "ExpressionStatement[17421-17463]:ExpressionStatement[17421-17463]"
    }, {
      "left" : "cc.addConstant(\"false\");",
      "right" : "cc.addConstant(\"false\");",
      "info" : "ExpressionStatement[17472-17496]:ExpressionStatement[17472-17496]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[17505-17511]:BreakStatement[17505-17511]"
    }, {
      "left" : "case Token.TRUE:",
      "right" : "case Token.TRUE:",
      "info" : "SwitchCase[17519-17535]:SwitchCase[17519-17535]"
    }, {
      "left" : "Preconditions.checkState(childCount == 0);",
      "right" : "Preconditions.checkState(childCount == 0);",
      "info" : "ExpressionStatement[17544-17586]:ExpressionStatement[17544-17586]"
    }, {
      "left" : "cc.addConstant(\"true\");",
      "right" : "cc.addConstant(\"true\");",
      "info" : "ExpressionStatement[17595-17618]:ExpressionStatement[17595-17618]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[17627-17633]:BreakStatement[17627-17633]"
    }, {
      "left" : "case Token.CONTINUE:",
      "right" : "case Token.CONTINUE:",
      "info" : "SwitchCase[17641-17661]:SwitchCase[17641-17661]"
    }, {
      "left" : "Preconditions.checkState(childCount <= 1);",
      "right" : "Preconditions.checkState(childCount <= 1);",
      "info" : "ExpressionStatement[17670-17712]:ExpressionStatement[17670-17712]"
    }, {
      "left" : "add(\"continue\");",
      "right" : "add(\"continue\");",
      "info" : "ExpressionStatement[17721-17737]:ExpressionStatement[17721-17737]"
    }, {
      "left" : "if (childCount == 1)",
      "right" : "if (childCount == 1)",
      "info" : "IfStatement[17746-17947]:IfStatement[17746-17947]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17767-17947]:Block[17767-17947]"
    }, {
      "left" : "if (!first.isLabelName())",
      "right" : "if (!first.isLabelName())",
      "info" : "IfStatement[17779-17895]:IfStatement[17779-17895]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17805-17895]:Block[17805-17895]"
    }, {
      "left" : "throw new Error(\"Unexpected token type. Should be LABEL_NAME.\");",
      "right" : "throw new Error(\"Unexpected token type. Should be LABEL_NAME.\");",
      "info" : "ThrowStatement[17819-17883]:ThrowStatement[17819-17883]"
    }, {
      "left" : "add(\" \");",
      "right" : "add(\" \");",
      "info" : "ExpressionStatement[17906-17915]:ExpressionStatement[17906-17915]"
    }, {
      "left" : "add(first);",
      "right" : "add(first);",
      "info" : "ExpressionStatement[17926-17937]:ExpressionStatement[17926-17937]"
    }, {
      "left" : "cc.endStatement();",
      "right" : "cc.endStatement();",
      "info" : "ExpressionStatement[17956-17974]:ExpressionStatement[17956-17974]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[17983-17989]:BreakStatement[17983-17989]"
    }, {
      "left" : "case Token.DEBUGGER:",
      "right" : "case Token.DEBUGGER:",
      "info" : "SwitchCase[17997-18017]:SwitchCase[17997-18017]"
    }, {
      "left" : "Preconditions.checkState(childCount == 0);",
      "right" : "Preconditions.checkState(childCount == 0);",
      "info" : "ExpressionStatement[18026-18068]:ExpressionStatement[18026-18068]"
    }, {
      "left" : "add(\"debugger\");",
      "right" : "add(\"debugger\");",
      "info" : "ExpressionStatement[18077-18093]:ExpressionStatement[18077-18093]"
    }, {
      "left" : "cc.endStatement();",
      "right" : "cc.endStatement();",
      "info" : "ExpressionStatement[18102-18120]:ExpressionStatement[18102-18120]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[18129-18135]:BreakStatement[18129-18135]"
    }, {
      "left" : "case Token.BREAK:",
      "right" : "case Token.BREAK:",
      "info" : "SwitchCase[18143-18160]:SwitchCase[18143-18160]"
    }, {
      "left" : "Preconditions.checkState(childCount <= 1);",
      "right" : "Preconditions.checkState(childCount <= 1);",
      "info" : "ExpressionStatement[18169-18211]:ExpressionStatement[18169-18211]"
    }, {
      "left" : "add(\"break\");",
      "right" : "add(\"break\");",
      "info" : "ExpressionStatement[18220-18233]:ExpressionStatement[18220-18233]"
    }, {
      "left" : "if (childCount == 1)",
      "right" : "if (childCount == 1)",
      "info" : "IfStatement[18242-18443]:IfStatement[18242-18443]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18263-18443]:Block[18263-18443]"
    }, {
      "left" : "if (!first.isLabelName())",
      "right" : "if (!first.isLabelName())",
      "info" : "IfStatement[18275-18391]:IfStatement[18275-18391]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18301-18391]:Block[18301-18391]"
    }, {
      "left" : "throw new Error(\"Unexpected token type. Should be LABEL_NAME.\");",
      "right" : "throw new Error(\"Unexpected token type. Should be LABEL_NAME.\");",
      "info" : "ThrowStatement[18315-18379]:ThrowStatement[18315-18379]"
    }, {
      "left" : "add(\" \");",
      "right" : "add(\" \");",
      "info" : "ExpressionStatement[18402-18411]:ExpressionStatement[18402-18411]"
    }, {
      "left" : "add(first);",
      "right" : "add(first);",
      "info" : "ExpressionStatement[18422-18433]:ExpressionStatement[18422-18433]"
    }, {
      "left" : "cc.endStatement();",
      "right" : "cc.endStatement();",
      "info" : "ExpressionStatement[18452-18470]:ExpressionStatement[18452-18470]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[18479-18485]:BreakStatement[18479-18485]"
    }, {
      "left" : "case Token.EXPR_RESULT:",
      "right" : "case Token.EXPR_RESULT:",
      "info" : "SwitchCase[18493-18516]:SwitchCase[18493-18516]"
    }, {
      "left" : "Preconditions.checkState(childCount == 1);",
      "right" : "Preconditions.checkState(childCount == 1);",
      "info" : "ExpressionStatement[18525-18567]:ExpressionStatement[18525-18567]"
    }, {
      "left" : "add(first, Context.START_OF_EXPR);",
      "right" : "add(first, Context.START_OF_EXPR);",
      "info" : "ExpressionStatement[18576-18610]:ExpressionStatement[18576-18610]"
    }, {
      "left" : "cc.endStatement();",
      "right" : "cc.endStatement();",
      "info" : "ExpressionStatement[18619-18637]:ExpressionStatement[18619-18637]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[18646-18652]:BreakStatement[18646-18652]"
    }, {
      "left" : "case Token.NEW:",
      "right" : "case Token.NEW:",
      "info" : "SwitchCase[18660-18675]:SwitchCase[18660-18675]"
    }, {
      "left" : "add(\"new \");",
      "right" : "add(\"new \");",
      "info" : "ExpressionStatement[18684-18696]:ExpressionStatement[18684-18696]"
    }, {
      "left" : "int precedence = NodeUtil.precedence(type);",
      "right" : "int precedence = NodeUtil.precedence(type);",
      "info" : "VariableDeclarationStatement[18705-18748]:VariableDeclarationStatement[18705-18748]"
    }, {
      "left" : "if (NodeUtil.containsType(\n            first, Token.CALL, NodeUtil.MATCH_NOT_FUNCTION))",
      "right" : "if (NodeUtil.containsType(\n            first, Token.CALL, NodeUtil.MATCH_NOT_FUNCTION))",
      "info" : "IfStatement[18981-19145]:IfStatement[18981-19145]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19069-19145]:Block[19069-19145]"
    }, {
      "left" : "precedence = NodeUtil.precedence(first.getType()) + 1;",
      "right" : "precedence = NodeUtil.precedence(first.getType()) + 1;",
      "info" : "ExpressionStatement[19081-19135]:ExpressionStatement[19081-19135]"
    }, {
      "left" : "addExpr(first, precedence, Context.OTHER);",
      "right" : "addExpr(first, precedence, Context.OTHER);",
      "info" : "ExpressionStatement[19154-19196]:ExpressionStatement[19154-19196]"
    }, {
      "left" : "Node next = first.getNext();",
      "right" : "Node next = first.getNext();",
      "info" : "VariableDeclarationStatement[19264-19292]:VariableDeclarationStatement[19264-19292]"
    }, {
      "left" : "if (next != null)",
      "right" : "if (next != null)",
      "info" : "IfStatement[19301-19395]:IfStatement[19301-19395]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19319-19395]:Block[19319-19395]"
    }, {
      "left" : "add(\"(\");",
      "right" : "add(\"(\");",
      "info" : "ExpressionStatement[19331-19340]:ExpressionStatement[19331-19340]"
    }, {
      "left" : "addList(next);",
      "right" : "addList(next);",
      "info" : "ExpressionStatement[19351-19365]:ExpressionStatement[19351-19365]"
    }, {
      "left" : "add(\")\");",
      "right" : "add(\")\");",
      "info" : "ExpressionStatement[19376-19385]:ExpressionStatement[19376-19385]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[19404-19410]:BreakStatement[19404-19410]"
    }, {
      "left" : "case Token.STRING_KEY:",
      "right" : "case Token.STRING_KEY:",
      "info" : "SwitchCase[19418-19440]:SwitchCase[19418-19440]"
    }, {
      "left" : "Preconditions.checkState(\n            childCount == 1, \"Object lit key must have 1 child\");",
      "right" : "Preconditions.checkState(\n            childCount == 1, \"Object lit key must have 1 child\");",
      "info" : "ExpressionStatement[19449-19540]:ExpressionStatement[19449-19540]"
    }, {
      "left" : "addJsString(n);",
      "right" : "addJsString(n);",
      "info" : "ExpressionStatement[19549-19564]:ExpressionStatement[19549-19564]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[19573-19579]:BreakStatement[19573-19579]"
    }, {
      "left" : "case Token.STRING:",
      "right" : "case Token.STRING:",
      "info" : "SwitchCase[19587-19605]:SwitchCase[19587-19605]"
    }, {
      "left" : "Preconditions.checkState(\n            childCount == 0, \"A string may not have children\");",
      "right" : "Preconditions.checkState(\n            childCount == 0, \"A string may not have children\");",
      "info" : "ExpressionStatement[19614-19703]:ExpressionStatement[19614-19703]"
    }, {
      "left" : "addJsString(n);",
      "right" : "addJsString(n);",
      "info" : "ExpressionStatement[19712-19727]:ExpressionStatement[19712-19727]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[19736-19742]:BreakStatement[19736-19742]"
    }, {
      "left" : "case Token.DELPROP:",
      "right" : "case Token.DELPROP:",
      "info" : "SwitchCase[19750-19769]:SwitchCase[19750-19769]"
    }, {
      "left" : "Preconditions.checkState(childCount == 1);",
      "right" : "Preconditions.checkState(childCount == 1);",
      "info" : "ExpressionStatement[19778-19820]:ExpressionStatement[19778-19820]"
    }, {
      "left" : "add(\"delete \");",
      "right" : "add(\"delete \");",
      "info" : "ExpressionStatement[19829-19844]:ExpressionStatement[19829-19844]"
    }, {
      "left" : "add(first);",
      "right" : "add(first);",
      "info" : "ExpressionStatement[19853-19864]:ExpressionStatement[19853-19864]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[19873-19879]:BreakStatement[19873-19879]"
    }, {
      "left" : "case Token.OBJECTLIT:",
      "right" : "case Token.OBJECTLIT:",
      "info" : "SwitchCase[19887-19908]:SwitchCase[19887-19908]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19909-21306]:Block[19909-21306]"
    }, {
      "left" : "boolean needsParens = (context == Context.START_OF_EXPR);",
      "right" : "boolean needsParens = (context == Context.START_OF_EXPR);",
      "info" : "VariableDeclarationStatement[19919-19976]:VariableDeclarationStatement[19919-19976]"
    }, {
      "left" : "if (needsParens)",
      "right" : "if (needsParens)",
      "info" : "IfStatement[19985-20033]:IfStatement[19985-20033]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20002-20033]:Block[20002-20033]"
    }, {
      "left" : "add(\"(\");",
      "right" : "add(\"(\");",
      "info" : "ExpressionStatement[20014-20023]:ExpressionStatement[20014-20023]"
    }, {
      "left" : "add(\"{\");",
      "right" : "add(\"{\");",
      "info" : "ExpressionStatement[20042-20051]:ExpressionStatement[20042-20051]"
    }, {
      "left" : "for (Node c = first; c != null; c = c.getNext())",
      "right" : "for (Node c = first; c != null; c = c.getNext())",
      "info" : "ForStatement[20060-21208]:ForStatement[20060-21208]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20109-21208]:Block[20109-21208]"
    }, {
      "left" : "if (c != first)",
      "right" : "if (c != first)",
      "info" : "IfStatement[20121-20182]:IfStatement[20121-20182]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20137-20182]:Block[20137-20182]"
    }, {
      "left" : "cc.listSeparator();",
      "right" : "cc.listSeparator();",
      "info" : "ExpressionStatement[20151-20170]:ExpressionStatement[20151-20170]"
    }, {
      "left" : "if (c.isGetterDef() || c.isSetterDef())",
      "right" : "if (c.isGetterDef() || c.isSetterDef())",
      "info" : "IfStatement[20194-21198]:IfStatement[20194-21198]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20234-20267]:Block[20234-20267]"
    }, {
      "left" : "add(c);",
      "right" : "add(c);",
      "info" : "ExpressionStatement[20248-20255]:ExpressionStatement[20248-20255]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20273-21198]:Block[20273-21198]"
    }, {
      "left" : "Preconditions.checkState(c.isStringKey());",
      "right" : "Preconditions.checkState(c.isStringKey());",
      "info" : "ExpressionStatement[20287-20329]:ExpressionStatement[20287-20329]"
    }, {
      "left" : "String key = c.getString();",
      "right" : "String key = c.getString();",
      "info" : "VariableDeclarationStatement[20342-20369]:VariableDeclarationStatement[20342-20369]"
    }, {
      "left" : "if (!c.isQuotedString() &&\n                !TokenStream.isKeyword(key) &&\n                TokenStream.isJSIdentifier(key) &&\n                // do not encode literally any non-literal characters that\n                // were Unicode escaped.\n                NodeUtil.isLatin(key))",
      "right" : "if (!c.isQuotedString() &&\n                !TokenStream.isKeyword(key) &&\n                TokenStream.isJSIdentifier(key) &&\n                // do not encode literally any non-literal characters that\n                // were Unicode escaped.\n                NodeUtil.isLatin(key))",
      "info" : "IfStatement[20502-21106]:IfStatement[20502-21106]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20782-20821]:Block[20782-20821]"
    }, {
      "left" : "add(key);",
      "right" : "add(key);",
      "info" : "ExpressionStatement[20798-20807]:ExpressionStatement[20798-20807]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20827-21106]:Block[20827-21106]"
    }, {
      "left" : "double d = getSimpleNumber(key);",
      "right" : "double d = getSimpleNumber(key);",
      "info" : "VariableDeclarationStatement[20904-20936]:VariableDeclarationStatement[20904-20936]"
    }, {
      "left" : "if (!Double.isNaN(d))",
      "right" : "if (!Double.isNaN(d))",
      "info" : "IfStatement[20951-21092]:IfStatement[20951-21092]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20973-21023]:Block[20973-21023]"
    }, {
      "left" : "cc.addNumber(d);",
      "right" : "cc.addNumber(d);",
      "info" : "ExpressionStatement[20991-21007]:ExpressionStatement[20991-21007]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21029-21092]:Block[21029-21092]"
    }, {
      "left" : "addExpr(c, 1, Context.OTHER);",
      "right" : "addExpr(c, 1, Context.OTHER);",
      "info" : "ExpressionStatement[21047-21076]:ExpressionStatement[21047-21076]"
    }, {
      "left" : "add(\":\");",
      "right" : "add(\":\");",
      "info" : "ExpressionStatement[21119-21128]:ExpressionStatement[21119-21128]"
    }, {
      "left" : "addExpr(c.getFirstChild(), 1, Context.OTHER);",
      "right" : "addExpr(c.getFirstChild(), 1, Context.OTHER);",
      "info" : "ExpressionStatement[21141-21186]:ExpressionStatement[21141-21186]"
    }, {
      "left" : "add(\"}\");",
      "right" : "add(\"}\");",
      "info" : "ExpressionStatement[21217-21226]:ExpressionStatement[21217-21226]"
    }, {
      "left" : "if (needsParens)",
      "right" : "if (needsParens)",
      "info" : "IfStatement[21235-21283]:IfStatement[21235-21283]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21252-21283]:Block[21252-21283]"
    }, {
      "left" : "add(\")\");",
      "right" : "add(\")\");",
      "info" : "ExpressionStatement[21264-21273]:ExpressionStatement[21264-21273]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[21292-21298]:BreakStatement[21292-21298]"
    }, {
      "left" : "case Token.SWITCH:",
      "right" : "case Token.SWITCH:",
      "info" : "SwitchCase[21314-21332]:SwitchCase[21314-21332]"
    }, {
      "left" : "add(\"switch(\");",
      "right" : "add(\"switch(\");",
      "info" : "ExpressionStatement[21341-21356]:ExpressionStatement[21341-21356]"
    }, {
      "left" : "add(first);",
      "right" : "add(first);",
      "info" : "ExpressionStatement[21365-21376]:ExpressionStatement[21365-21376]"
    }, {
      "left" : "add(\")\");",
      "right" : "add(\")\");",
      "info" : "ExpressionStatement[21385-21394]:ExpressionStatement[21385-21394]"
    }, {
      "left" : "cc.beginBlock();",
      "right" : "cc.beginBlock();",
      "info" : "ExpressionStatement[21403-21419]:ExpressionStatement[21403-21419]"
    }, {
      "left" : "addAllSiblings(first.getNext());",
      "right" : "addAllSiblings(first.getNext());",
      "info" : "ExpressionStatement[21428-21460]:ExpressionStatement[21428-21460]"
    }, {
      "left" : "cc.endBlock(context == Context.STATEMENT);",
      "right" : "cc.endBlock(context == Context.STATEMENT);",
      "info" : "ExpressionStatement[21469-21511]:ExpressionStatement[21469-21511]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[21520-21526]:BreakStatement[21520-21526]"
    }, {
      "left" : "case Token.CASE:",
      "right" : "case Token.CASE:",
      "info" : "SwitchCase[21534-21550]:SwitchCase[21534-21550]"
    }, {
      "left" : "Preconditions.checkState(childCount == 2);",
      "right" : "Preconditions.checkState(childCount == 2);",
      "info" : "ExpressionStatement[21559-21601]:ExpressionStatement[21559-21601]"
    }, {
      "left" : "add(\"case \");",
      "right" : "add(\"case \");",
      "info" : "ExpressionStatement[21610-21623]:ExpressionStatement[21610-21623]"
    }, {
      "left" : "add(first);",
      "right" : "add(first);",
      "info" : "ExpressionStatement[21632-21643]:ExpressionStatement[21632-21643]"
    }, {
      "left" : "addCaseBody(last);",
      "right" : "addCaseBody(last);",
      "info" : "ExpressionStatement[21652-21670]:ExpressionStatement[21652-21670]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[21679-21685]:BreakStatement[21679-21685]"
    }, {
      "left" : "case Token.DEFAULT_CASE:",
      "right" : "case Token.DEFAULT_CASE:",
      "info" : "SwitchCase[21693-21717]:SwitchCase[21693-21717]"
    }, {
      "left" : "Preconditions.checkState(childCount == 1);",
      "right" : "Preconditions.checkState(childCount == 1);",
      "info" : "ExpressionStatement[21726-21768]:ExpressionStatement[21726-21768]"
    }, {
      "left" : "add(\"default\");",
      "right" : "add(\"default\");",
      "info" : "ExpressionStatement[21777-21792]:ExpressionStatement[21777-21792]"
    }, {
      "left" : "addCaseBody(first);",
      "right" : "addCaseBody(first);",
      "info" : "ExpressionStatement[21801-21820]:ExpressionStatement[21801-21820]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[21829-21835]:BreakStatement[21829-21835]"
    }, {
      "left" : "case Token.LABEL:",
      "right" : "case Token.LABEL:",
      "info" : "SwitchCase[21843-21860]:SwitchCase[21843-21860]"
    }, {
      "left" : "Preconditions.checkState(childCount == 2);",
      "right" : "Preconditions.checkState(childCount == 2);",
      "info" : "ExpressionStatement[21869-21911]:ExpressionStatement[21869-21911]"
    }, {
      "left" : "if (!first.isLabelName())",
      "right" : "if (!first.isLabelName())",
      "info" : "IfStatement[21920-22032]:IfStatement[21920-22032]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21946-22032]:Block[21946-22032]"
    }, {
      "left" : "throw new Error(\"Unexpected token type. Should be LABEL_NAME.\");",
      "right" : "throw new Error(\"Unexpected token type. Should be LABEL_NAME.\");",
      "info" : "ThrowStatement[21958-22022]:ThrowStatement[21958-22022]"
    }, {
      "left" : "add(first);",
      "right" : "add(first);",
      "info" : "ExpressionStatement[22041-22052]:ExpressionStatement[22041-22052]"
    }, {
      "left" : "add(\":\");",
      "right" : "add(\":\");",
      "info" : "ExpressionStatement[22061-22070]:ExpressionStatement[22061-22070]"
    }, {
      "left" : "addNonEmptyStatement(\n            last, getContextForNonEmptyExpression(context), true);",
      "right" : "addNonEmptyStatement(\n            last, getContextForNonEmptyExpression(context), true);",
      "info" : "ExpressionStatement[22079-22167]:ExpressionStatement[22079-22167]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[22176-22182]:BreakStatement[22176-22182]"
    }, {
      "left" : "case Token.CAST:",
      "right" : "case Token.CAST:",
      "info" : "SwitchCase[22190-22206]:SwitchCase[22190-22206]"
    }, {
      "left" : "add(\"(\");",
      "right" : "add(\"(\");",
      "info" : "ExpressionStatement[22215-22224]:ExpressionStatement[22215-22224]"
    }, {
      "left" : "add(first);",
      "right" : "add(first);",
      "info" : "ExpressionStatement[22233-22244]:ExpressionStatement[22233-22244]"
    }, {
      "left" : "add(\")\");",
      "right" : "add(\")\");",
      "info" : "ExpressionStatement[22253-22262]:ExpressionStatement[22253-22262]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[22271-22277]:BreakStatement[22271-22277]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[22285-22293]:SwitchCase[22285-22293]"
    }, {
      "left" : "throw new Error(\"Unknown type \" + type + \"\\n\" + n.toStringTree());",
      "right" : "throw new Error(\"Unknown type \" + type + \"\\n\" + n.toStringTree());",
      "info" : "ThrowStatement[22302-22368]:ThrowStatement[22302-22368]"
    }, {
      "left" : "cc.endSourceMapping(n);",
      "right" : "cc.endSourceMapping(n);",
      "info" : "ExpressionStatement[22380-22403]:ExpressionStatement[22380-22403]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[22652-22659]:Modifier[22652-22659]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[22660-22664]:PrimitiveType[22660-22664]"
    }, {
      "left" : "unrollBinaryOperator",
      "right" : "unrollBinaryOperator",
      "info" : "SimpleName[22665-22685]:SimpleName[22665-22685]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[22693-22699]:SingleVariableDeclaration[22693-22699]"
    }, {
      "left" : "int op",
      "right" : "int op",
      "info" : "SingleVariableDeclaration[22701-22707]:SingleVariableDeclaration[22701-22707]"
    }, {
      "left" : "String opStr",
      "right" : "String opStr",
      "info" : "SingleVariableDeclaration[22709-22721]:SingleVariableDeclaration[22709-22721]"
    }, {
      "left" : "Context context",
      "right" : "Context context",
      "info" : "SingleVariableDeclaration[22723-22738]:SingleVariableDeclaration[22723-22738]"
    }, {
      "left" : "Context rhsContext",
      "right" : "Context rhsContext",
      "info" : "SingleVariableDeclaration[22746-22764]:SingleVariableDeclaration[22746-22764]"
    }, {
      "left" : "int leftPrecedence",
      "right" : "int leftPrecedence",
      "info" : "SingleVariableDeclaration[22766-22784]:SingleVariableDeclaration[22766-22784]"
    }, {
      "left" : "int rightPrecedence",
      "right" : "int rightPrecedence",
      "info" : "SingleVariableDeclaration[22786-22805]:SingleVariableDeclaration[22786-22805]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22807-23248]:Block[22807-23248]"
    }, {
      "left" : "Node firstNonOperator = n.getFirstChild();",
      "right" : "Node firstNonOperator = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[22813-22855]:VariableDeclarationStatement[22813-22855]"
    }, {
      "left" : "while (firstNonOperator.getType() == op)",
      "right" : "while (firstNonOperator.getType() == op)",
      "info" : "WhileStatement[22860-22967]:WhileStatement[22860-22967]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22901-22967]:Block[22901-22967]"
    }, {
      "left" : "firstNonOperator = firstNonOperator.getFirstChild();",
      "right" : "firstNonOperator = firstNonOperator.getFirstChild();",
      "info" : "ExpressionStatement[22909-22961]:ExpressionStatement[22909-22961]"
    }, {
      "left" : "addExpr(firstNonOperator, leftPrecedence, context);",
      "right" : "addExpr(firstNonOperator, leftPrecedence, context);",
      "info" : "ExpressionStatement[22973-23024]:ExpressionStatement[22973-23024]"
    }, {
      "left" : "Node current = firstNonOperator;",
      "right" : "Node current = firstNonOperator;",
      "info" : "VariableDeclarationStatement[23030-23062]:VariableDeclarationStatement[23030-23062]"
    }, {
      "left" : "do{...}",
      "right" : "do{...}",
      "info" : "DoStatement[23067-23244]:DoStatement[23067-23244]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23070-23222]:Block[23070-23222]"
    }, {
      "left" : "current = current.getParent();",
      "right" : "current = current.getParent();",
      "info" : "ExpressionStatement[23078-23108]:ExpressionStatement[23078-23108]"
    }, {
      "left" : "cc.addOp(opStr, true);",
      "right" : "cc.addOp(opStr, true);",
      "info" : "ExpressionStatement[23115-23137]:ExpressionStatement[23115-23137]"
    }, {
      "left" : "addExpr(current.getFirstChild().getNext(), rightPrecedence, rhsContext);",
      "right" : "addExpr(current.getFirstChild().getNext(), rightPrecedence, rhsContext);",
      "info" : "ExpressionStatement[23144-23216]:ExpressionStatement[23144-23216]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[23252-23258]:Modifier[23252-23258]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[23259-23266]:PrimitiveType[23259-23266]"
    }, {
      "left" : "isSimpleNumber",
      "right" : "isSimpleNumber",
      "info" : "SimpleName[23267-23281]:SimpleName[23267-23281]"
    }, {
      "left" : "String s",
      "right" : "String s",
      "info" : "SingleVariableDeclaration[23282-23290]:SingleVariableDeclaration[23282-23290]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23292-23513]:Block[23292-23560]"
    }, {
      "left" : "int len = s.length();",
      "right" : "int len = s.length();",
      "info" : "VariableDeclarationStatement[23298-23319]:VariableDeclarationStatement[23298-23319]"
    }, {
      "left" : "for (int index = 0; index < len; index++)",
      "right" : "for (int index = 0; index < len; index++)",
      "info" : "ForStatement[23324-23467]:ForStatement[23370-23513]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23366-23467]:Block[23412-23513]"
    }, {
      "left" : "char c = s.charAt(index);",
      "right" : "char c = s.charAt(index);",
      "info" : "VariableDeclarationStatement[23374-23399]:VariableDeclarationStatement[23420-23445]"
    }, {
      "left" : "if (c < '0' || c > '9')",
      "right" : "if (c < '0' || c > '9')",
      "info" : "IfStatement[23406-23461]:IfStatement[23452-23507]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23430-23461]:Block[23476-23507]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[23440-23453]:ReturnStatement[23486-23499]"
    }, {
      "left" : "return len > 0 && s.charAt(0) != '0';",
      "right" : "return len == 1 || s.charAt(0) != '0';",
      "info" : "ReturnStatement[23472-23509]:ReturnStatement[23518-23556]"
    }, {
      "left" : ">",
      "right" : "==",
      "info" : "INFIX_EXPRESSION_OPERATOR[23483-23484]:INFIX_EXPRESSION_OPERATOR[23529-23531]"
    }, {
      "left" : "0",
      "right" : "1",
      "info" : "NumberLiteral[23485-23486]:NumberLiteral[23532-23533]"
    }, {
      "left" : "&&",
      "right" : "||",
      "info" : "INFIX_EXPRESSION_OPERATOR[23487-23489]:INFIX_EXPRESSION_OPERATOR[23534-23536]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[23517-23523]:Modifier[23564-23570]"
    }, {
      "left" : "double",
      "right" : "double",
      "info" : "PrimitiveType[23524-23530]:PrimitiveType[23571-23577]"
    }, {
      "left" : "getSimpleNumber",
      "right" : "getSimpleNumber",
      "info" : "SimpleName[23531-23546]:SimpleName[23578-23593]"
    }, {
      "left" : "String s",
      "right" : "String s",
      "info" : "SingleVariableDeclaration[23547-23555]:SingleVariableDeclaration[23594-23602]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23557-23870]:Block[23604-23917]"
    }, {
      "left" : "if (isSimpleNumber(s))",
      "right" : "if (isSimpleNumber(s))",
      "info" : "IfStatement[23563-23843]:IfStatement[23610-23890]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23586-23843]:Block[23633-23890]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[23594-23837]:TryStatement[23641-23884]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23598-23729]:Block[23645-23776]"
    }, {
      "left" : "long l = Long.parseLong(s);",
      "right" : "long l = Long.parseLong(s);",
      "info" : "VariableDeclarationStatement[23608-23635]:VariableDeclarationStatement[23655-23682]"
    }, {
      "left" : "if (l < NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)",
      "right" : "if (l < NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)",
      "info" : "IfStatement[23644-23721]:IfStatement[23691-23768]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23690-23721]:Block[23737-23768]"
    }, {
      "left" : "return l;",
      "right" : "return l;",
      "info" : "ReturnStatement[23702-23711]:ReturnStatement[23749-23758]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23762-23837]:Block[23809-23884]"
    }, {
      "left" : "return Double.NaN;",
      "right" : "return Double.NaN;",
      "info" : "ReturnStatement[23848-23866]:ReturnStatement[23895-23913]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[23937-23944]:Modifier[23984-23991]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[23945-23952]:PrimitiveType[23992-23999]"
    }, {
      "left" : "isIndirectEval",
      "right" : "isIndirectEval",
      "info" : "SimpleName[23953-23967]:SimpleName[24000-24014]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[23968-23974]:SingleVariableDeclaration[24015-24021]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23976-24083]:Block[24023-24130]"
    }, {
      "left" : "return n.isName() && \"eval\".equals(n.getString()) &&\n        !n.getBooleanProp(Node.DIRECT_EVAL);",
      "right" : "return n.isName() && \"eval\".equals(n.getString()) &&\n        !n.getBooleanProp(Node.DIRECT_EVAL);",
      "info" : "ReturnStatement[23982-24079]:ReturnStatement[24029-24126]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[24360-24367]:Modifier[24407-24414]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[24368-24372]:PrimitiveType[24415-24419]"
    }, {
      "left" : "addNonEmptyStatement",
      "right" : "addNonEmptyStatement",
      "info" : "SimpleName[24373-24393]:SimpleName[24420-24440]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[24401-24407]:SingleVariableDeclaration[24448-24454]"
    }, {
      "left" : "Context context",
      "right" : "Context context",
      "info" : "SingleVariableDeclaration[24409-24424]:SingleVariableDeclaration[24456-24471]"
    }, {
      "left" : "boolean allowNonBlockChild",
      "right" : "boolean allowNonBlockChild",
      "info" : "SingleVariableDeclaration[24426-24452]:SingleVariableDeclaration[24473-24499]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24454-26184]:Block[24501-26231]"
    }, {
      "left" : "Node nodeToProcess = n;",
      "right" : "Node nodeToProcess = n;",
      "info" : "VariableDeclarationStatement[24460-24483]:VariableDeclarationStatement[24507-24530]"
    }, {
      "left" : "if (!allowNonBlockChild && !n.isBlock())",
      "right" : "if (!allowNonBlockChild && !n.isBlock())",
      "info" : "IfStatement[24489-24584]:IfStatement[24536-24631]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24530-24584]:Block[24577-24631]"
    }, {
      "left" : "throw new Error(\"Missing BLOCK child.\");",
      "right" : "throw new Error(\"Missing BLOCK child.\");",
      "info" : "ThrowStatement[24538-24578]:ThrowStatement[24585-24625]"
    }, {
      "left" : "if (n.isBlock())",
      "right" : "if (n.isBlock())",
      "info" : "IfStatement[24715-25841]:IfStatement[24762-25888]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24732-25841]:Block[24779-25888]"
    }, {
      "left" : "int count = getNonEmptyChildCount(n, 2);",
      "right" : "int count = getNonEmptyChildCount(n, 2);",
      "info" : "VariableDeclarationStatement[24740-24780]:VariableDeclarationStatement[24787-24827]"
    }, {
      "left" : "if (count == 0)",
      "right" : "if (count == 0)",
      "info" : "IfStatement[24787-25040]:IfStatement[24834-25087]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24803-25040]:Block[24850-25087]"
    }, {
      "left" : "if (cc.shouldPreserveExtraBlocks())",
      "right" : "if (cc.shouldPreserveExtraBlocks())",
      "info" : "IfStatement[24813-25016]:IfStatement[24860-25063]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24849-24966]:Block[24896-25013]"
    }, {
      "left" : "cc.beginBlock();",
      "right" : "cc.beginBlock();",
      "info" : "ExpressionStatement[24861-24877]:ExpressionStatement[24908-24924]"
    }, {
      "left" : "cc.endBlock(cc.breakAfterBlockFor(n, context == Context.STATEMENT));",
      "right" : "cc.endBlock(cc.breakAfterBlockFor(n, context == Context.STATEMENT));",
      "info" : "ExpressionStatement[24888-24956]:ExpressionStatement[24935-25003]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24972-25016]:Block[25019-25063]"
    }, {
      "left" : "cc.endStatement(true);",
      "right" : "cc.endStatement(true);",
      "info" : "ExpressionStatement[24984-25006]:ExpressionStatement[25031-25053]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[25025-25032]:ReturnStatement[25072-25079]"
    }, {
      "left" : "if (count == 1)",
      "right" : "if (count == 1)",
      "info" : "IfStatement[25048-25761]:IfStatement[25095-25808]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25064-25761]:Block[25111-25808]"
    }, {
      "left" : "Node firstAndOnlyChild = getFirstNonEmptyChild(n);",
      "right" : "Node firstAndOnlyChild = getFirstNonEmptyChild(n);",
      "info" : "VariableDeclarationStatement[25232-25282]:VariableDeclarationStatement[25279-25329]"
    }, {
      "left" : "boolean alwaysWrapInBlock = cc.shouldPreserveExtraBlocks();",
      "right" : "boolean alwaysWrapInBlock = cc.shouldPreserveExtraBlocks();",
      "info" : "VariableDeclarationStatement[25291-25350]:VariableDeclarationStatement[25338-25397]"
    }, {
      "left" : "if (alwaysWrapInBlock || isOneExactlyFunctionOrDo(firstAndOnlyChild))",
      "right" : "if (alwaysWrapInBlock || isOneExactlyFunctionOrDo(firstAndOnlyChild))",
      "info" : "IfStatement[25359-25753]:IfStatement[25406-25800]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25429-25648]:Block[25476-25695]"
    }, {
      "left" : "cc.beginBlock();",
      "right" : "cc.beginBlock();",
      "info" : "ExpressionStatement[25441-25457]:ExpressionStatement[25488-25504]"
    }, {
      "left" : "add(firstAndOnlyChild, Context.STATEMENT);",
      "right" : "add(firstAndOnlyChild, Context.STATEMENT);",
      "info" : "ExpressionStatement[25468-25510]:ExpressionStatement[25515-25557]"
    }, {
      "left" : "cc.maybeLineBreak();",
      "right" : "cc.maybeLineBreak();",
      "info" : "ExpressionStatement[25521-25541]:ExpressionStatement[25568-25588]"
    }, {
      "left" : "cc.endBlock(cc.breakAfterBlockFor(n, context == Context.STATEMENT));",
      "right" : "cc.endBlock(cc.breakAfterBlockFor(n, context == Context.STATEMENT));",
      "info" : "ExpressionStatement[25552-25620]:ExpressionStatement[25599-25667]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[25631-25638]:ReturnStatement[25678-25685]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25654-25753]:Block[25701-25800]"
    }, {
      "left" : "nodeToProcess = firstAndOnlyChild;",
      "right" : "nodeToProcess = firstAndOnlyChild;",
      "info" : "ExpressionStatement[25709-25743]:ExpressionStatement[25756-25790]"
    }, {
      "left" : "if (count > 1)",
      "right" : "if (count > 1)",
      "info" : "IfStatement[25769-25835]:IfStatement[25816-25882]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25784-25835]:Block[25831-25882]"
    }, {
      "left" : "context = Context.PRESERVE_BLOCK;",
      "right" : "context = Context.PRESERVE_BLOCK;",
      "info" : "ExpressionStatement[25794-25827]:ExpressionStatement[25841-25874]"
    }, {
      "left" : "if (nodeToProcess.isEmpty())",
      "right" : "if (nodeToProcess.isEmpty())",
      "info" : "IfStatement[25847-26180]:IfStatement[25894-26227]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25876-25912]:Block[25923-25959]"
    }, {
      "left" : "cc.endStatement(true);",
      "right" : "cc.endStatement(true);",
      "info" : "ExpressionStatement[25884-25906]:ExpressionStatement[25931-25953]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25918-26180]:Block[25965-26227]"
    }, {
      "left" : "add(nodeToProcess, context);",
      "right" : "add(nodeToProcess, context);",
      "info" : "ExpressionStatement[25926-25954]:ExpressionStatement[25973-26001]"
    }, {
      "left" : "if (nodeToProcess.isVar())",
      "right" : "if (nodeToProcess.isVar())",
      "info" : "IfStatement[26111-26174]:IfStatement[26158-26221]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26138-26174]:Block[26185-26221]"
    }, {
      "left" : "cc.endStatement();",
      "right" : "cc.endStatement();",
      "info" : "ExpressionStatement[26148-26166]:ExpressionStatement[26195-26213]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[26281-26288]:Modifier[26328-26335]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[26289-26296]:PrimitiveType[26336-26343]"
    }, {
      "left" : "isOneExactlyFunctionOrDo",
      "right" : "isOneExactlyFunctionOrDo",
      "info" : "SimpleName[26297-26321]:SimpleName[26344-26368]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[26322-26328]:SingleVariableDeclaration[26369-26375]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26330-27044]:Block[26377-27091]"
    }, {
      "left" : "if (n.isLabel())",
      "right" : "if (n.isLabel())",
      "info" : "IfStatement[26336-27040]:IfStatement[26383-27087]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26353-26984]:Block[26400-27031]"
    }, {
      "left" : "Node labeledStatement = n.getLastChild();",
      "right" : "Node labeledStatement = n.getLastChild();",
      "info" : "VariableDeclarationStatement[26361-26402]:VariableDeclarationStatement[26408-26449]"
    }, {
      "left" : "if (!labeledStatement.isBlock())",
      "right" : "if (!labeledStatement.isBlock())",
      "info" : "IfStatement[26409-26978]:IfStatement[26456-27025]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26442-26510]:Block[26489-26557]"
    }, {
      "left" : "return isOneExactlyFunctionOrDo(labeledStatement);",
      "right" : "return isOneExactlyFunctionOrDo(labeledStatement);",
      "info" : "ReturnStatement[26452-26502]:ReturnStatement[26499-26549]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26516-26978]:Block[26563-27025]"
    }, {
      "left" : "if (getNonEmptyChildCount(n, 2) == 1)",
      "right" : "if (getNonEmptyChildCount(n, 2) == 1)",
      "info" : "IfStatement[26691-26970]:IfStatement[26738-27017]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26729-26809]:Block[26776-26856]"
    }, {
      "left" : "return isOneExactlyFunctionOrDo(getFirstNonEmptyChild(n));",
      "right" : "return isOneExactlyFunctionOrDo(getFirstNonEmptyChild(n));",
      "info" : "ReturnStatement[26741-26799]:ReturnStatement[26788-26846]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26815-26970]:Block[26862-27017]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[26947-26960]:ReturnStatement[26994-27007]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26990-27040]:Block[27037-27087]"
    }, {
      "left" : "return (n.isFunction() || n.isDo());",
      "right" : "return (n.isFunction() || n.isDo());",
      "info" : "ReturnStatement[26998-27034]:ReturnStatement[27045-27081]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[27048-27055]:Modifier[27095-27102]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[27056-27060]:PrimitiveType[27103-27107]"
    }, {
      "left" : "addExpr",
      "right" : "addExpr",
      "info" : "SimpleName[27061-27068]:SimpleName[27108-27115]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[27069-27075]:SingleVariableDeclaration[27116-27122]"
    }, {
      "left" : "int minPrecedence",
      "right" : "int minPrecedence",
      "info" : "SingleVariableDeclaration[27077-27094]:SingleVariableDeclaration[27124-27141]"
    }, {
      "left" : "Context context",
      "right" : "Context context",
      "info" : "SingleVariableDeclaration[27096-27111]:SingleVariableDeclaration[27143-27158]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27113-27347]:Block[27160-27394]"
    }, {
      "left" : "if ((NodeUtil.precedence(n.getType()) < minPrecedence) ||\n        ((context == Context.IN_FOR_INIT_CLAUSE) && n.isIn()))",
      "right" : "if ((NodeUtil.precedence(n.getType()) < minPrecedence) ||\n        ((context == Context.IN_FOR_INIT_CLAUSE) && n.isIn()))",
      "info" : "IfStatement[27119-27343]:IfStatement[27166-27390]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27239-27307]:Block[27286-27354]"
    }, {
      "left" : "add(\"(\");",
      "right" : "add(\"(\");",
      "info" : "ExpressionStatement[27247-27256]:ExpressionStatement[27294-27303]"
    }, {
      "left" : "add(n, Context.OTHER);",
      "right" : "add(n, Context.OTHER);",
      "info" : "ExpressionStatement[27263-27285]:ExpressionStatement[27310-27332]"
    }, {
      "left" : "add(\")\");",
      "right" : "add(\")\");",
      "info" : "ExpressionStatement[27292-27301]:ExpressionStatement[27339-27348]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27313-27343]:Block[27360-27390]"
    }, {
      "left" : "add(n, context);",
      "right" : "add(n, context);",
      "info" : "ExpressionStatement[27321-27337]:ExpressionStatement[27368-27384]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[27351-27355]:PrimitiveType[27398-27402]"
    }, {
      "left" : "addList",
      "right" : "addList",
      "info" : "SimpleName[27356-27363]:SimpleName[27403-27410]"
    }, {
      "left" : "Node firstInList",
      "right" : "Node firstInList",
      "info" : "SingleVariableDeclaration[27364-27380]:SingleVariableDeclaration[27411-27427]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27382-27434]:Block[27429-27481]"
    }, {
      "left" : "addList(firstInList, true, Context.OTHER);",
      "right" : "addList(firstInList, true, Context.OTHER);",
      "info" : "ExpressionStatement[27388-27430]:ExpressionStatement[27435-27477]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[27438-27442]:PrimitiveType[27485-27489]"
    }, {
      "left" : "addList",
      "right" : "addList",
      "info" : "SimpleName[27443-27450]:SimpleName[27490-27497]"
    }, {
      "left" : "Node firstInList",
      "right" : "Node firstInList",
      "info" : "SingleVariableDeclaration[27451-27467]:SingleVariableDeclaration[27498-27514]"
    }, {
      "left" : "boolean isArrayOrFunctionArgument",
      "right" : "boolean isArrayOrFunctionArgument",
      "info" : "SingleVariableDeclaration[27469-27502]:SingleVariableDeclaration[27516-27549]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27504-27577]:Block[27551-27624]"
    }, {
      "left" : "addList(firstInList, isArrayOrFunctionArgument, Context.OTHER);",
      "right" : "addList(firstInList, isArrayOrFunctionArgument, Context.OTHER);",
      "info" : "ExpressionStatement[27510-27573]:ExpressionStatement[27557-27620]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[27581-27585]:PrimitiveType[27628-27632]"
    }, {
      "left" : "addList",
      "right" : "addList",
      "info" : "SimpleName[27586-27593]:SimpleName[27633-27640]"
    }, {
      "left" : "Node firstInList",
      "right" : "Node firstInList",
      "info" : "SingleVariableDeclaration[27594-27610]:SingleVariableDeclaration[27641-27657]"
    }, {
      "left" : "boolean isArrayOrFunctionArgument",
      "right" : "boolean isArrayOrFunctionArgument",
      "info" : "SingleVariableDeclaration[27612-27645]:SingleVariableDeclaration[27659-27692]"
    }, {
      "left" : "Context lhsContext",
      "right" : "Context lhsContext",
      "info" : "SingleVariableDeclaration[27662-27680]:SingleVariableDeclaration[27709-27727]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27682-28005]:Block[27729-28052]"
    }, {
      "left" : "for (Node n = firstInList; n != null; n = n.getNext())",
      "right" : "for (Node n = firstInList; n != null; n = n.getNext())",
      "info" : "ForStatement[27688-28001]:ForStatement[27735-28048]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27743-28001]:Block[27790-28048]"
    }, {
      "left" : "boolean isFirst = n == firstInList;",
      "right" : "boolean isFirst = n == firstInList;",
      "info" : "VariableDeclarationStatement[27751-27786]:VariableDeclarationStatement[27798-27833]"
    }, {
      "left" : "if (isFirst)",
      "right" : "if (isFirst)",
      "info" : "IfStatement[27793-27995]:IfStatement[27840-28042]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27806-27882]:Block[27853-27929]"
    }, {
      "left" : "addExpr(n, isArrayOrFunctionArgument ? 1 : 0, lhsContext);",
      "right" : "addExpr(n, isArrayOrFunctionArgument ? 1 : 0, lhsContext);",
      "info" : "ExpressionStatement[27816-27874]:ExpressionStatement[27863-27921]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27888-27995]:Block[27935-28042]"
    }, {
      "left" : "cc.listSeparator();",
      "right" : "cc.listSeparator();",
      "info" : "ExpressionStatement[27898-27917]:ExpressionStatement[27945-27964]"
    }, {
      "left" : "addExpr(n, isArrayOrFunctionArgument ? 1 : 0, Context.OTHER);",
      "right" : "addExpr(n, isArrayOrFunctionArgument ? 1 : 0, Context.OTHER);",
      "info" : "ExpressionStatement[27926-27987]:ExpressionStatement[27973-28034]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[28360-28364]:PrimitiveType[28407-28411]"
    }, {
      "left" : "addArrayList",
      "right" : "addArrayList",
      "info" : "SimpleName[28365-28377]:SimpleName[28412-28424]"
    }, {
      "left" : "Node firstInList",
      "right" : "Node firstInList",
      "info" : "SingleVariableDeclaration[28378-28394]:SingleVariableDeclaration[28425-28441]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28396-28695]:Block[28443-28742]"
    }, {
      "left" : "boolean lastWasEmpty = false;",
      "right" : "boolean lastWasEmpty = false;",
      "info" : "VariableDeclarationStatement[28402-28431]:VariableDeclarationStatement[28449-28478]"
    }, {
      "left" : "for (Node n = firstInList; n != null; n = n.getNext())",
      "right" : "for (Node n = firstInList; n != null; n = n.getNext())",
      "info" : "ForStatement[28436-28634]:ForStatement[28483-28681]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28491-28634]:Block[28538-28681]"
    }, {
      "left" : "if (n != firstInList)",
      "right" : "if (n != firstInList)",
      "info" : "IfStatement[28499-28558]:IfStatement[28546-28605]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28521-28558]:Block[28568-28605]"
    }, {
      "left" : "cc.listSeparator();",
      "right" : "cc.listSeparator();",
      "info" : "ExpressionStatement[28531-28550]:ExpressionStatement[28578-28597]"
    }, {
      "left" : "addExpr(n, 1, Context.OTHER);",
      "right" : "addExpr(n, 1, Context.OTHER);",
      "info" : "ExpressionStatement[28565-28594]:ExpressionStatement[28612-28641]"
    }, {
      "left" : "lastWasEmpty = n.isEmpty();",
      "right" : "lastWasEmpty = n.isEmpty();",
      "info" : "ExpressionStatement[28601-28628]:ExpressionStatement[28648-28675]"
    }, {
      "left" : "if (lastWasEmpty)",
      "right" : "if (lastWasEmpty)",
      "info" : "IfStatement[28640-28691]:IfStatement[28687-28738]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28658-28691]:Block[28705-28738]"
    }, {
      "left" : "cc.listSeparator();",
      "right" : "cc.listSeparator();",
      "info" : "ExpressionStatement[28666-28685]:ExpressionStatement[28713-28732]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[28699-28703]:PrimitiveType[28746-28750]"
    }, {
      "left" : "addCaseBody",
      "right" : "addCaseBody",
      "info" : "SimpleName[28704-28715]:SimpleName[28751-28762]"
    }, {
      "left" : "Node caseBody",
      "right" : "Node caseBody",
      "info" : "SingleVariableDeclaration[28716-28729]:SingleVariableDeclaration[28763-28776]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28731-28801]:Block[28778-28848]"
    }, {
      "left" : "cc.beginCaseBody();",
      "right" : "cc.beginCaseBody();",
      "info" : "ExpressionStatement[28737-28756]:ExpressionStatement[28784-28803]"
    }, {
      "left" : "add(caseBody);",
      "right" : "add(caseBody);",
      "info" : "ExpressionStatement[28761-28775]:ExpressionStatement[28808-28822]"
    }, {
      "left" : "cc.endCaseBody();",
      "right" : "cc.endCaseBody();",
      "info" : "ExpressionStatement[28780-28797]:ExpressionStatement[28827-28844]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[28805-28809]:PrimitiveType[28852-28856]"
    }, {
      "left" : "addAllSiblings",
      "right" : "addAllSiblings",
      "info" : "SimpleName[28810-28824]:SimpleName[28857-28871]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[28825-28831]:SingleVariableDeclaration[28872-28878]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28833-28909]:Block[28880-28956]"
    }, {
      "left" : "for (Node c = n; c != null; c = c.getNext())",
      "right" : "for (Node c = n; c != null; c = c.getNext())",
      "info" : "ForStatement[28839-28905]:ForStatement[28886-28952]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28884-28905]:Block[28931-28952]"
    }, {
      "left" : "add(c);",
      "right" : "add(c);",
      "info" : "ExpressionStatement[28892-28899]:ExpressionStatement[28939-28946]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[28993-29000]:Modifier[29040-29047]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[29001-29005]:PrimitiveType[29048-29052]"
    }, {
      "left" : "addJsString",
      "right" : "addJsString",
      "info" : "SimpleName[29006-29017]:SimpleName[29053-29064]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[29018-29024]:SingleVariableDeclaration[29065-29071]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29026-29404]:Block[29073-29451]"
    }, {
      "left" : "String s = n.getString();",
      "right" : "String s = n.getString();",
      "info" : "VariableDeclarationStatement[29032-29057]:VariableDeclarationStatement[29079-29104]"
    }, {
      "left" : "boolean useSlashV = n.getBooleanProp(Node.SLASH_V);",
      "right" : "boolean useSlashV = n.getBooleanProp(Node.SLASH_V);",
      "info" : "VariableDeclarationStatement[29062-29113]:VariableDeclarationStatement[29109-29160]"
    }, {
      "left" : "if (useSlashV)",
      "right" : "if (useSlashV)",
      "info" : "IfStatement[29118-29400]:IfStatement[29165-29447]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29133-29187]:Block[29180-29234]"
    }, {
      "left" : "add(jsString(n.getString(), useSlashV));",
      "right" : "add(jsString(n.getString(), useSlashV));",
      "info" : "ExpressionStatement[29141-29181]:ExpressionStatement[29188-29228]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29193-29400]:Block[29240-29447]"
    }, {
      "left" : "String cached = ESCAPED_JS_STRINGS.get(s);",
      "right" : "String cached = ESCAPED_JS_STRINGS.get(s);",
      "info" : "VariableDeclarationStatement[29201-29243]:VariableDeclarationStatement[29248-29290]"
    }, {
      "left" : "if (cached == null)",
      "right" : "if (cached == null)",
      "info" : "IfStatement[29250-29375]:IfStatement[29297-29422]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29270-29375]:Block[29317-29422]"
    }, {
      "left" : "cached = jsString(n.getString(), useSlashV);",
      "right" : "cached = jsString(n.getString(), useSlashV);",
      "info" : "ExpressionStatement[29280-29324]:ExpressionStatement[29327-29371]"
    }, {
      "left" : "ESCAPED_JS_STRINGS.put(s, cached);",
      "right" : "ESCAPED_JS_STRINGS.put(s, cached);",
      "info" : "ExpressionStatement[29333-29367]:ExpressionStatement[29380-29414]"
    }, {
      "left" : "add(cached);",
      "right" : "add(cached);",
      "info" : "ExpressionStatement[29382-29394]:ExpressionStatement[29429-29441]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[29408-29415]:Modifier[29455-29462]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[29416-29422]:SimpleType[29463-29469]"
    }, {
      "left" : "jsString",
      "right" : "jsString",
      "info" : "SimpleName[29423-29431]:SimpleName[29470-29478]"
    }, {
      "left" : "String s",
      "right" : "String s",
      "info" : "SingleVariableDeclaration[29432-29440]:SingleVariableDeclaration[29479-29487]"
    }, {
      "left" : "boolean useSlashV",
      "right" : "boolean useSlashV",
      "info" : "SingleVariableDeclaration[29442-29459]:SingleVariableDeclaration[29489-29506]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29461-30253]:Block[29508-30300]"
    }, {
      "left" : "int singleq = 0, doubleq = 0;",
      "right" : "int singleq = 0, doubleq = 0;",
      "info" : "VariableDeclarationStatement[29467-29496]:VariableDeclarationStatement[29514-29543]"
    }, {
      "left" : "for (int i = 0; i < s.length(); i++)",
      "right" : "for (int i = 0; i < s.length(); i++)",
      "info" : "ForStatement[29569-29723]:ForStatement[29616-29770]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29606-29723]:Block[29653-29770]"
    }, {
      "left" : "switch (s.charAt(i)) {\n        case '\"': doubleq++; break;\n        case '\\'': singleq++; break;\n      }",
      "right" : "switch (s.charAt(i)) {\n        case '\"': doubleq++; break;\n        case '\\'': singleq++; break;\n      }",
      "info" : "SwitchStatement[29614-29717]:SwitchStatement[29661-29764]"
    }, {
      "left" : "case '\"':",
      "right" : "case '\"':",
      "info" : "SwitchCase[29645-29654]:SwitchCase[29692-29701]"
    }, {
      "left" : "doubleq++;",
      "right" : "doubleq++;",
      "info" : "ExpressionStatement[29655-29665]:ExpressionStatement[29702-29712]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[29666-29672]:BreakStatement[29713-29719]"
    }, {
      "left" : "case '\\'':",
      "right" : "case '\\'':",
      "info" : "SwitchCase[29681-29691]:SwitchCase[29728-29738]"
    }, {
      "left" : "singleq++;",
      "right" : "singleq++;",
      "info" : "ExpressionStatement[29692-29702]:ExpressionStatement[29739-29749]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[29703-29709]:BreakStatement[29750-29756]"
    }, {
      "left" : "String doublequote, singlequote;",
      "right" : "String doublequote, singlequote;",
      "info" : "VariableDeclarationStatement[29729-29761]:VariableDeclarationStatement[29776-29808]"
    }, {
      "left" : "char quote;",
      "right" : "char quote;",
      "info" : "VariableDeclarationStatement[29766-29777]:VariableDeclarationStatement[29813-29824]"
    }, {
      "left" : "if (preferSingleQuotes ?\n        (singleq <= doubleq) : (singleq < doubleq))",
      "right" : "if (preferSingleQuotes ?\n        (singleq <= doubleq) : (singleq < doubleq))",
      "info" : "IfStatement[29782-30134]:IfStatement[29829-30181]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29859-29997]:Block[29906-30044]"
    }, {
      "left" : "quote = '\\'';",
      "right" : "quote = '\\'';",
      "info" : "ExpressionStatement[29924-29937]:ExpressionStatement[29971-29984]"
    }, {
      "left" : "doublequote = \"\\\"\";",
      "right" : "doublequote = \"\\\"\";",
      "info" : "ExpressionStatement[29944-29963]:ExpressionStatement[29991-30010]"
    }, {
      "left" : "singlequote = \"\\\\\\'\";",
      "right" : "singlequote = \"\\\\\\'\";",
      "info" : "ExpressionStatement[29970-29991]:ExpressionStatement[30017-30038]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30003-30134]:Block[30050-30181]"
    }, {
      "left" : "quote = '\\\"';",
      "right" : "quote = '\\\"';",
      "info" : "ExpressionStatement[30061-30074]:ExpressionStatement[30108-30121]"
    }, {
      "left" : "doublequote = \"\\\\\\\"\";",
      "right" : "doublequote = \"\\\\\\\"\";",
      "info" : "ExpressionStatement[30081-30102]:ExpressionStatement[30128-30149]"
    }, {
      "left" : "singlequote = \"\\'\";",
      "right" : "singlequote = \"\\'\";",
      "info" : "ExpressionStatement[30109-30128]:ExpressionStatement[30156-30175]"
    }, {
      "left" : "return strEscape(s, quote, doublequote, singlequote, \"\\\\\\\\\",\n        outputCharsetEncoder, useSlashV, false);",
      "right" : "return strEscape(s, quote, doublequote, singlequote, \"\\\\\\\\\",\n        outputCharsetEncoder, useSlashV, false);",
      "info" : "ReturnStatement[30140-30249]:ReturnStatement[30187-30296]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[30293-30299]:SimpleType[30340-30346]"
    }, {
      "left" : "regexpEscape",
      "right" : "regexpEscape",
      "info" : "SimpleName[30300-30312]:SimpleName[30347-30359]"
    }, {
      "left" : "String s",
      "right" : "String s",
      "info" : "SingleVariableDeclaration[30313-30321]:SingleVariableDeclaration[30360-30368]"
    }, {
      "left" : "CharsetEncoder outputCharsetEncoder",
      "right" : "CharsetEncoder outputCharsetEncoder",
      "info" : "SingleVariableDeclaration[30323-30358]:SingleVariableDeclaration[30370-30405]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30360-30447]:Block[30407-30494]"
    }, {
      "left" : "return strEscape(s, '/', \"\\\"\", \"'\", \"\\\\\", outputCharsetEncoder, false, true);",
      "right" : "return strEscape(s, '/', \"\\\"\", \"'\", \"\\\\\", outputCharsetEncoder, false, true);",
      "info" : "ReturnStatement[30366-30443]:ReturnStatement[30413-30490]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[30539-30545]:SimpleType[30586-30592]"
    }, {
      "left" : "escapeToDoubleQuotedJsString",
      "right" : "escapeToDoubleQuotedJsString",
      "info" : "SimpleName[30546-30574]:SimpleName[30593-30621]"
    }, {
      "left" : "String s",
      "right" : "String s",
      "info" : "SingleVariableDeclaration[30575-30583]:SingleVariableDeclaration[30622-30630]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30585-30663]:Block[30632-30710]"
    }, {
      "left" : "return strEscape(s, '\"',  \"\\\\\\\"\", \"\\'\", \"\\\\\\\\\", null, false, false);",
      "right" : "return strEscape(s, '\"',  \"\\\\\\\"\", \"\\'\", \"\\\\\\\\\", null, false, false);",
      "info" : "ReturnStatement[30591-30659]:ReturnStatement[30638-30706]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[30792-30798]:SimpleType[30839-30845]"
    }, {
      "left" : "regexpEscape",
      "right" : "regexpEscape",
      "info" : "SimpleName[30799-30811]:SimpleName[30846-30858]"
    }, {
      "left" : "String s",
      "right" : "String s",
      "info" : "SingleVariableDeclaration[30812-30820]:SingleVariableDeclaration[30859-30867]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30822-30861]:Block[30869-30908]"
    }, {
      "left" : "return regexpEscape(s, null);",
      "right" : "return regexpEscape(s, null);",
      "info" : "ReturnStatement[30828-30857]:ReturnStatement[30875-30904]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[30939-30946]:Modifier[30986-30993]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[30947-30953]:SimpleType[30994-31000]"
    }, {
      "left" : "strEscape",
      "right" : "strEscape",
      "info" : "SimpleName[30954-30963]:SimpleName[31001-31010]"
    }, {
      "left" : "String s",
      "right" : "String s",
      "info" : "SingleVariableDeclaration[30971-30979]:SingleVariableDeclaration[31018-31026]"
    }, {
      "left" : "char quote",
      "right" : "char quote",
      "info" : "SingleVariableDeclaration[30987-30997]:SingleVariableDeclaration[31034-31044]"
    }, {
      "left" : "String doublequoteEscape",
      "right" : "String doublequoteEscape",
      "info" : "SingleVariableDeclaration[31005-31029]:SingleVariableDeclaration[31052-31076]"
    }, {
      "left" : "String singlequoteEscape",
      "right" : "String singlequoteEscape",
      "info" : "SingleVariableDeclaration[31037-31061]:SingleVariableDeclaration[31084-31108]"
    }, {
      "left" : "String backslashEscape",
      "right" : "String backslashEscape",
      "info" : "SingleVariableDeclaration[31069-31091]:SingleVariableDeclaration[31116-31138]"
    }, {
      "left" : "CharsetEncoder outputCharsetEncoder",
      "right" : "CharsetEncoder outputCharsetEncoder",
      "info" : "SingleVariableDeclaration[31099-31134]:SingleVariableDeclaration[31146-31181]"
    }, {
      "left" : "boolean useSlashV",
      "right" : "boolean useSlashV",
      "info" : "SingleVariableDeclaration[31142-31159]:SingleVariableDeclaration[31189-31206]"
    }, {
      "left" : "boolean isRegexp",
      "right" : "boolean isRegexp",
      "info" : "SingleVariableDeclaration[31167-31183]:SingleVariableDeclaration[31214-31230]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31185-35132]:Block[31232-35179]"
    }, {
      "left" : "StringBuilder sb = new StringBuilder(s.length() + 2);",
      "right" : "StringBuilder sb = new StringBuilder(s.length() + 2);",
      "info" : "VariableDeclarationStatement[31191-31244]:VariableDeclarationStatement[31238-31291]"
    }, {
      "left" : "sb.append(quote);",
      "right" : "sb.append(quote);",
      "info" : "ExpressionStatement[31249-31266]:ExpressionStatement[31296-31313]"
    }, {
      "left" : "for (int i = 0; i < s.length(); i++)",
      "right" : "for (int i = 0; i < s.length(); i++)",
      "info" : "ForStatement[31271-35080]:ForStatement[31318-35127]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31308-35080]:Block[31355-35127]"
    }, {
      "left" : "char c = s.charAt(i);",
      "right" : "char c = s.charAt(i);",
      "info" : "VariableDeclarationStatement[31316-31337]:VariableDeclarationStatement[31363-31384]"
    }, {
      "left" : "switch (c) {\n        case '\\0': sb.append(\"\\\\x00\"); break;\n        case '\\u000B':\n          if (useSlashV) {\n            sb.append(\"\\\\v\");\n          } else {\n            sb.append(\"\\\\x0B\");\n          }\n          break;\n        // From the SingleEscapeCharacter grammar production.\n        case '\\b': sb.append(\"\\\\b\"); break;\n        case '\\f': sb.append(\"\\\\f\"); break;\n        case '\\n': sb.append(\"\\\\n\"); break;\n        case '\\r': sb.append(\"\\\\r\"); break;\n        case '\\t': sb.append(\"\\\\t\"); break;\n        case '\\\\': sb.append(backslashEscape); break;\n        case '\\\"': sb.append(doublequoteEscape); break;\n        case '\\'': sb.append(singlequoteEscape); break;\n\n        // From LineTerminators (ES5 Section 7.3, Table 3)\n        case '\\u2028': sb.append(\"\\\\u2028\"); break;\n        case '\\u2029': sb.append(\"\\\\u2029\"); break;\n\n        case '=':\n          // '=' is a syntactically signficant regexp character.\n          if (trustedStrings || isRegexp) {\n            sb.append(c);\n          } else {\n            sb.append(\"\\\\x3d\");\n          }\n          break;\n\n        case '&':\n          if (trustedStrings || isRegexp) {\n            sb.append(c);\n          } else {\n            sb.append(\"\\\\x26\");\n          }\n          break;\n\n        case '>':\n          if (!trustedStrings && !isRegexp) {\n            sb.append(GT_ESCAPED);\n            break;\n          }\n\n          // Break --> into --\\> or ]]> into ]]\\>\n          //\n          // This is just to prevent developers from shooting themselves in the\n          // foot, and does not provide the level of security that you get\n          // with trustedString == false.\n          if (i >= 2 &&\n              ((s.charAt(i - 1) == '-' && s.charAt(i - 2) == '-') ||\n               (s.charAt(i - 1) == ']' && s.charAt(i - 2) == ']'))) {\n            sb.append(GT_ESCAPED);\n          } else {\n            sb.append(c);\n          }\n          break;\n        case '<':\n          if (!trustedStrings && !isRegexp) {\n            sb.append(LT_ESCAPED);\n            break;\n          }\n\n          // Break </script into <\\/script\n          // As above, this is just to prevent developers from doing this\n          // accidentally.\n          final String END_SCRIPT = \"/script\";\n\n          // Break <!-- into <\\!--\n          final String START_COMMENT = \"!--\";\n\n          if (s.regionMatches(true, i + 1, END_SCRIPT, 0,\n                              END_SCRIPT.length())) {\n            sb.append(LT_ESCAPED);\n          } else if (s.regionMatches(false, i + 1, START_COMMENT, 0,\n                                     START_COMMENT.length())) {\n            sb.append(LT_ESCAPED);\n          } else {\n            sb.append(c);\n          }\n          break;\n        default:\n          // If we're given an outputCharsetEncoder, then check if the\n          //  character can be represented in this character set.\n          if (outputCharsetEncoder != null) {\n            if (outputCharsetEncoder.canEncode(c)) {\n              sb.append(c);\n            } else {\n              // Unicode-escape the character.\n              appendHexJavaScriptRepresentation(sb, c);\n            }\n          } else {\n            // No charsetEncoder provided - pass straight Latin characters\n            // through, and escape the rest.  Doing the explicit character\n            // check is measurably faster than using the CharsetEncoder.\n            if (c > 0x1f && c < 0x7f) {\n              sb.append(c);\n            } else {\n              // Other characters can be misinterpreted by some JS parsers,\n              // or perhaps mangled by proxies along the way,\n              // so we play it safe and Unicode escape them.\n              appendHexJavaScriptRepresentation(sb, c);\n            }\n          }\n      }",
      "right" : "switch (c) {\n        case '\\0': sb.append(\"\\\\x00\"); break;\n        case '\\u000B':\n          if (useSlashV) {\n            sb.append(\"\\\\v\");\n          } else {\n            sb.append(\"\\\\x0B\");\n          }\n          break;\n        // From the SingleEscapeCharacter grammar production.\n        case '\\b': sb.append(\"\\\\b\"); break;\n        case '\\f': sb.append(\"\\\\f\"); break;\n        case '\\n': sb.append(\"\\\\n\"); break;\n        case '\\r': sb.append(\"\\\\r\"); break;\n        case '\\t': sb.append(\"\\\\t\"); break;\n        case '\\\\': sb.append(backslashEscape); break;\n        case '\\\"': sb.append(doublequoteEscape); break;\n        case '\\'': sb.append(singlequoteEscape); break;\n\n        // From LineTerminators (ES5 Section 7.3, Table 3)\n        case '\\u2028': sb.append(\"\\\\u2028\"); break;\n        case '\\u2029': sb.append(\"\\\\u2029\"); break;\n\n        case '=':\n          // '=' is a syntactically signficant regexp character.\n          if (trustedStrings || isRegexp) {\n            sb.append(c);\n          } else {\n            sb.append(\"\\\\x3d\");\n          }\n          break;\n\n        case '&':\n          if (trustedStrings || isRegexp) {\n            sb.append(c);\n          } else {\n            sb.append(\"\\\\x26\");\n          }\n          break;\n\n        case '>':\n          if (!trustedStrings && !isRegexp) {\n            sb.append(GT_ESCAPED);\n            break;\n          }\n\n          // Break --> into --\\> or ]]> into ]]\\>\n          //\n          // This is just to prevent developers from shooting themselves in the\n          // foot, and does not provide the level of security that you get\n          // with trustedString == false.\n          if (i >= 2 &&\n              ((s.charAt(i - 1) == '-' && s.charAt(i - 2) == '-') ||\n               (s.charAt(i - 1) == ']' && s.charAt(i - 2) == ']'))) {\n            sb.append(GT_ESCAPED);\n          } else {\n            sb.append(c);\n          }\n          break;\n        case '<':\n          if (!trustedStrings && !isRegexp) {\n            sb.append(LT_ESCAPED);\n            break;\n          }\n\n          // Break </script into <\\/script\n          // As above, this is just to prevent developers from doing this\n          // accidentally.\n          final String END_SCRIPT = \"/script\";\n\n          // Break <!-- into <\\!--\n          final String START_COMMENT = \"!--\";\n\n          if (s.regionMatches(true, i + 1, END_SCRIPT, 0,\n                              END_SCRIPT.length())) {\n            sb.append(LT_ESCAPED);\n          } else if (s.regionMatches(false, i + 1, START_COMMENT, 0,\n                                     START_COMMENT.length())) {\n            sb.append(LT_ESCAPED);\n          } else {\n            sb.append(c);\n          }\n          break;\n        default:\n          // If we're given an outputCharsetEncoder, then check if the\n          //  character can be represented in this character set.\n          if (outputCharsetEncoder != null) {\n            if (outputCharsetEncoder.canEncode(c)) {\n              sb.append(c);\n            } else {\n              // Unicode-escape the character.\n              appendHexJavaScriptRepresentation(sb, c);\n            }\n          } else {\n            // No charsetEncoder provided - pass straight Latin characters\n            // through, and escape the rest.  Doing the explicit character\n            // check is measurably faster than using the CharsetEncoder.\n            if (c > 0x1f && c < 0x7f) {\n              sb.append(c);\n            } else {\n              // Other characters can be misinterpreted by some JS parsers,\n              // or perhaps mangled by proxies along the way,\n              // so we play it safe and Unicode escape them.\n              appendHexJavaScriptRepresentation(sb, c);\n            }\n          }\n      }",
      "info" : "SwitchStatement[31344-35074]:SwitchStatement[31391-35121]"
    }, {
      "left" : "case '\\0':",
      "right" : "case '\\0':",
      "info" : "SwitchCase[31365-31375]:SwitchCase[31412-31422]"
    }, {
      "left" : "sb.append(\"\\\\x00\");",
      "right" : "sb.append(\"\\\\x00\");",
      "info" : "ExpressionStatement[31376-31395]:ExpressionStatement[31423-31442]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[31396-31402]:BreakStatement[31443-31449]"
    }, {
      "left" : "case '\\u000B':",
      "right" : "case '\\u000B':",
      "info" : "SwitchCase[31411-31425]:SwitchCase[31458-31472]"
    }, {
      "left" : "if (useSlashV)",
      "right" : "if (useSlashV)",
      "info" : "IfStatement[31436-31545]:IfStatement[31483-31592]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31451-31494]:Block[31498-31541]"
    }, {
      "left" : "sb.append(\"\\\\v\");",
      "right" : "sb.append(\"\\\\v\");",
      "info" : "ExpressionStatement[31465-31482]:ExpressionStatement[31512-31529]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31500-31545]:Block[31547-31592]"
    }, {
      "left" : "sb.append(\"\\\\x0B\");",
      "right" : "sb.append(\"\\\\x0B\");",
      "info" : "ExpressionStatement[31514-31533]:ExpressionStatement[31561-31580]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[31556-31562]:BreakStatement[31603-31609]"
    }, {
      "left" : "case '\\b':",
      "right" : "case '\\b':",
      "info" : "SwitchCase[31633-31643]:SwitchCase[31680-31690]"
    }, {
      "left" : "sb.append(\"\\\\b\");",
      "right" : "sb.append(\"\\\\b\");",
      "info" : "ExpressionStatement[31644-31661]:ExpressionStatement[31691-31708]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[31662-31668]:BreakStatement[31709-31715]"
    }, {
      "left" : "case '\\f':",
      "right" : "case '\\f':",
      "info" : "SwitchCase[31677-31687]:SwitchCase[31724-31734]"
    }, {
      "left" : "sb.append(\"\\\\f\");",
      "right" : "sb.append(\"\\\\f\");",
      "info" : "ExpressionStatement[31688-31705]:ExpressionStatement[31735-31752]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[31706-31712]:BreakStatement[31753-31759]"
    }, {
      "left" : "case '\\n':",
      "right" : "case '\\n':",
      "info" : "SwitchCase[31721-31731]:SwitchCase[31768-31778]"
    }, {
      "left" : "sb.append(\"\\\\n\");",
      "right" : "sb.append(\"\\\\n\");",
      "info" : "ExpressionStatement[31732-31749]:ExpressionStatement[31779-31796]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[31750-31756]:BreakStatement[31797-31803]"
    }, {
      "left" : "case '\\r':",
      "right" : "case '\\r':",
      "info" : "SwitchCase[31765-31775]:SwitchCase[31812-31822]"
    }, {
      "left" : "sb.append(\"\\\\r\");",
      "right" : "sb.append(\"\\\\r\");",
      "info" : "ExpressionStatement[31776-31793]:ExpressionStatement[31823-31840]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[31794-31800]:BreakStatement[31841-31847]"
    }, {
      "left" : "case '\\t':",
      "right" : "case '\\t':",
      "info" : "SwitchCase[31809-31819]:SwitchCase[31856-31866]"
    }, {
      "left" : "sb.append(\"\\\\t\");",
      "right" : "sb.append(\"\\\\t\");",
      "info" : "ExpressionStatement[31820-31837]:ExpressionStatement[31867-31884]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[31838-31844]:BreakStatement[31885-31891]"
    }, {
      "left" : "case '\\\\':",
      "right" : "case '\\\\':",
      "info" : "SwitchCase[31853-31863]:SwitchCase[31900-31910]"
    }, {
      "left" : "sb.append(backslashEscape);",
      "right" : "sb.append(backslashEscape);",
      "info" : "ExpressionStatement[31864-31891]:ExpressionStatement[31911-31938]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[31892-31898]:BreakStatement[31939-31945]"
    }, {
      "left" : "case '\\\"':",
      "right" : "case '\\\"':",
      "info" : "SwitchCase[31907-31917]:SwitchCase[31954-31964]"
    }, {
      "left" : "sb.append(doublequoteEscape);",
      "right" : "sb.append(doublequoteEscape);",
      "info" : "ExpressionStatement[31918-31947]:ExpressionStatement[31965-31994]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[31948-31954]:BreakStatement[31995-32001]"
    }, {
      "left" : "case '\\'':",
      "right" : "case '\\'':",
      "info" : "SwitchCase[31963-31973]:SwitchCase[32010-32020]"
    }, {
      "left" : "sb.append(singlequoteEscape);",
      "right" : "sb.append(singlequoteEscape);",
      "info" : "ExpressionStatement[31974-32003]:ExpressionStatement[32021-32050]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[32004-32010]:BreakStatement[32051-32057]"
    }, {
      "left" : "case '\\u2028':",
      "right" : "case '\\u2028':",
      "info" : "SwitchCase[32079-32093]:SwitchCase[32126-32140]"
    }, {
      "left" : "sb.append(\"\\\\u2028\");",
      "right" : "sb.append(\"\\\\u2028\");",
      "info" : "ExpressionStatement[32094-32115]:ExpressionStatement[32141-32162]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[32116-32122]:BreakStatement[32163-32169]"
    }, {
      "left" : "case '\\u2029':",
      "right" : "case '\\u2029':",
      "info" : "SwitchCase[32131-32145]:SwitchCase[32178-32192]"
    }, {
      "left" : "sb.append(\"\\\\u2029\");",
      "right" : "sb.append(\"\\\\u2029\");",
      "info" : "ExpressionStatement[32146-32167]:ExpressionStatement[32193-32214]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[32168-32174]:BreakStatement[32215-32221]"
    }, {
      "left" : "case '=':",
      "right" : "case '=':",
      "info" : "SwitchCase[32184-32193]:SwitchCase[32231-32240]"
    }, {
      "left" : "if (trustedStrings || isRegexp)",
      "right" : "if (trustedStrings || isRegexp)",
      "info" : "IfStatement[32269-32391]:IfStatement[32316-32438]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32301-32340]:Block[32348-32387]"
    }, {
      "left" : "sb.append(c);",
      "right" : "sb.append(c);",
      "info" : "ExpressionStatement[32315-32328]:ExpressionStatement[32362-32375]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32346-32391]:Block[32393-32438]"
    }, {
      "left" : "sb.append(\"\\\\x3d\");",
      "right" : "sb.append(\"\\\\x3d\");",
      "info" : "ExpressionStatement[32360-32379]:ExpressionStatement[32407-32426]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[32402-32408]:BreakStatement[32449-32455]"
    }, {
      "left" : "case '&':",
      "right" : "case '&':",
      "info" : "SwitchCase[32418-32427]:SwitchCase[32465-32474]"
    }, {
      "left" : "if (trustedStrings || isRegexp)",
      "right" : "if (trustedStrings || isRegexp)",
      "info" : "IfStatement[32438-32560]:IfStatement[32485-32607]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32470-32509]:Block[32517-32556]"
    }, {
      "left" : "sb.append(c);",
      "right" : "sb.append(c);",
      "info" : "ExpressionStatement[32484-32497]:ExpressionStatement[32531-32544]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32515-32560]:Block[32562-32607]"
    }, {
      "left" : "sb.append(\"\\\\x26\");",
      "right" : "sb.append(\"\\\\x26\");",
      "info" : "ExpressionStatement[32529-32548]:ExpressionStatement[32576-32595]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[32571-32577]:BreakStatement[32618-32624]"
    }, {
      "left" : "case '>':",
      "right" : "case '>':",
      "info" : "SwitchCase[32587-32596]:SwitchCase[32634-32643]"
    }, {
      "left" : "if (!trustedStrings && !isRegexp)",
      "right" : "if (!trustedStrings && !isRegexp)",
      "info" : "IfStatement[32607-32708]:IfStatement[32654-32755]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32641-32708]:Block[32688-32755]"
    }, {
      "left" : "sb.append(GT_ESCAPED);",
      "right" : "sb.append(GT_ESCAPED);",
      "info" : "ExpressionStatement[32655-32677]:ExpressionStatement[32702-32724]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[32690-32696]:BreakStatement[32737-32743]"
    }, {
      "left" : "if (i >= 2 &&\n              ((s.charAt(i - 1) == '-' && s.charAt(i - 2) == '-') ||\n               (s.charAt(i - 1) == ']' && s.charAt(i - 2) == ']')))",
      "right" : "if (i >= 2 &&\n              ((s.charAt(i - 1) == '-' && s.charAt(i - 2) == '-') ||\n               (s.charAt(i - 1) == ']' && s.charAt(i - 2) == ']')))",
      "info" : "IfStatement[32980-33224]:IfStatement[33027-33271]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33131-33179]:Block[33178-33226]"
    }, {
      "left" : "sb.append(GT_ESCAPED);",
      "right" : "sb.append(GT_ESCAPED);",
      "info" : "ExpressionStatement[33145-33167]:ExpressionStatement[33192-33214]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33185-33224]:Block[33232-33271]"
    }, {
      "left" : "sb.append(c);",
      "right" : "sb.append(c);",
      "info" : "ExpressionStatement[33199-33212]:ExpressionStatement[33246-33259]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[33235-33241]:BreakStatement[33282-33288]"
    }, {
      "left" : "case '<':",
      "right" : "case '<':",
      "info" : "SwitchCase[33250-33259]:SwitchCase[33297-33306]"
    }, {
      "left" : "if (!trustedStrings && !isRegexp)",
      "right" : "if (!trustedStrings && !isRegexp)",
      "info" : "IfStatement[33270-33371]:IfStatement[33317-33418]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33304-33371]:Block[33351-33418]"
    }, {
      "left" : "sb.append(LT_ESCAPED);",
      "right" : "sb.append(LT_ESCAPED);",
      "info" : "ExpressionStatement[33318-33340]:ExpressionStatement[33365-33387]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[33353-33359]:BreakStatement[33400-33406]"
    }, {
      "left" : "final String END_SCRIPT = \"/script\";",
      "right" : "final String END_SCRIPT = \"/script\";",
      "info" : "VariableDeclarationStatement[33527-33563]:VariableDeclarationStatement[33574-33610]"
    }, {
      "left" : "final String START_COMMENT = \"!--\";",
      "right" : "final String START_COMMENT = \"!--\";",
      "info" : "VariableDeclarationStatement[33610-33645]:VariableDeclarationStatement[33657-33692]"
    }, {
      "left" : "if (s.regionMatches(true, i + 1, END_SCRIPT, 0,\n                              END_SCRIPT.length()))",
      "right" : "if (s.regionMatches(true, i + 1, END_SCRIPT, 0,\n                              END_SCRIPT.length()))",
      "info" : "IfStatement[33657-34018]:IfStatement[33704-34065]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33757-33805]:Block[33804-33852]"
    }, {
      "left" : "sb.append(LT_ESCAPED);",
      "right" : "sb.append(LT_ESCAPED);",
      "info" : "ExpressionStatement[33771-33793]:ExpressionStatement[33818-33840]"
    }, {
      "left" : "if (s.regionMatches(false, i + 1, START_COMMENT, 0,\n                                     START_COMMENT.length()))",
      "right" : "if (s.regionMatches(false, i + 1, START_COMMENT, 0,\n                                     START_COMMENT.length()))",
      "info" : "IfStatement[33811-34018]:IfStatement[33858-34065]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33925-33973]:Block[33972-34020]"
    }, {
      "left" : "sb.append(LT_ESCAPED);",
      "right" : "sb.append(LT_ESCAPED);",
      "info" : "ExpressionStatement[33939-33961]:ExpressionStatement[33986-34008]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33979-34018]:Block[34026-34065]"
    }, {
      "left" : "sb.append(c);",
      "right" : "sb.append(c);",
      "info" : "ExpressionStatement[33993-34006]:ExpressionStatement[34040-34053]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[34029-34035]:BreakStatement[34076-34082]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[34044-34052]:SwitchCase[34091-34099]"
    }, {
      "left" : "if (outputCharsetEncoder != null)",
      "right" : "if (outputCharsetEncoder != null)",
      "info" : "IfStatement[34200-35066]:IfStatement[34247-35113]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34234-34466]:Block[34281-34513]"
    }, {
      "left" : "if (outputCharsetEncoder.canEncode(c))",
      "right" : "if (outputCharsetEncoder.canEncode(c))",
      "info" : "IfStatement[34248-34454]:IfStatement[34295-34501]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34287-34330]:Block[34334-34377]"
    }, {
      "left" : "sb.append(c);",
      "right" : "sb.append(c);",
      "info" : "ExpressionStatement[34303-34316]:ExpressionStatement[34350-34363]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34336-34454]:Block[34383-34501]"
    }, {
      "left" : "appendHexJavaScriptRepresentation(sb, c);",
      "right" : "appendHexJavaScriptRepresentation(sb, c);",
      "info" : "ExpressionStatement[34399-34440]:ExpressionStatement[34446-34487]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34472-35066]:Block[34519-35113]"
    }, {
      "left" : "if (c > 0x1f && c < 0x7f)",
      "right" : "if (c > 0x1f && c < 0x7f)",
      "info" : "IfStatement[34709-35054]:IfStatement[34756-35101]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34735-34778]:Block[34782-34825]"
    }, {
      "left" : "sb.append(c);",
      "right" : "sb.append(c);",
      "info" : "ExpressionStatement[34751-34764]:ExpressionStatement[34798-34811]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34784-35054]:Block[34831-35101]"
    }, {
      "left" : "appendHexJavaScriptRepresentation(sb, c);",
      "right" : "appendHexJavaScriptRepresentation(sb, c);",
      "info" : "ExpressionStatement[34999-35040]:ExpressionStatement[35046-35087]"
    }, {
      "left" : "sb.append(quote);",
      "right" : "sb.append(quote);",
      "info" : "ExpressionStatement[35085-35102]:ExpressionStatement[35132-35149]"
    }, {
      "left" : "return sb.toString();",
      "right" : "return sb.toString();",
      "info" : "ReturnStatement[35107-35128]:ReturnStatement[35154-35175]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[35136-35142]:Modifier[35183-35189]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[35143-35149]:SimpleType[35190-35196]"
    }, {
      "left" : "identifierEscape",
      "right" : "identifierEscape",
      "info" : "SimpleName[35150-35166]:SimpleName[35197-35213]"
    }, {
      "left" : "String s",
      "right" : "String s",
      "info" : "SingleVariableDeclaration[35167-35175]:SingleVariableDeclaration[35214-35222]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35177-35826]:Block[35224-35873]"
    }, {
      "left" : "if (NodeUtil.isLatin(s))",
      "right" : "if (NodeUtil.isLatin(s))",
      "info" : "IfStatement[35258-35306]:IfStatement[35305-35353]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35283-35306]:Block[35330-35353]"
    }, {
      "left" : "return s;",
      "right" : "return s;",
      "info" : "ReturnStatement[35291-35300]:ReturnStatement[35338-35347]"
    }, {
      "left" : "StringBuilder sb = new StringBuilder();",
      "right" : "StringBuilder sb = new StringBuilder();",
      "info" : "VariableDeclarationStatement[35390-35429]:VariableDeclarationStatement[35437-35476]"
    }, {
      "left" : "for (int i = 0; i < s.length(); i++)",
      "right" : "for (int i = 0; i < s.length(); i++)",
      "info" : "ForStatement[35434-35796]:ForStatement[35481-35843]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35471-35796]:Block[35518-35843]"
    }, {
      "left" : "char c = s.charAt(i);",
      "right" : "char c = s.charAt(i);",
      "info" : "VariableDeclarationStatement[35479-35500]:VariableDeclarationStatement[35526-35547]"
    }, {
      "left" : "if (c > 0x1F && c < 0x7F)",
      "right" : "if (c > 0x1F && c < 0x7F)",
      "info" : "IfStatement[35668-35790]:IfStatement[35715-35837]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35694-35725]:Block[35741-35772]"
    }, {
      "left" : "sb.append(c);",
      "right" : "sb.append(c);",
      "info" : "ExpressionStatement[35704-35717]:ExpressionStatement[35751-35764]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35731-35790]:Block[35778-35837]"
    }, {
      "left" : "appendHexJavaScriptRepresentation(sb, c);",
      "right" : "appendHexJavaScriptRepresentation(sb, c);",
      "info" : "ExpressionStatement[35741-35782]:ExpressionStatement[35788-35829]"
    }, {
      "left" : "return sb.toString();",
      "right" : "return sb.toString();",
      "info" : "ReturnStatement[35801-35822]:ReturnStatement[35848-35869]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[35995-36002]:Modifier[36042-36049]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[36003-36009]:Modifier[36050-36056]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[36010-36013]:PrimitiveType[36057-36060]"
    }, {
      "left" : "getNonEmptyChildCount",
      "right" : "getNonEmptyChildCount",
      "info" : "SimpleName[36014-36035]:SimpleName[36061-36082]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[36036-36042]:SingleVariableDeclaration[36083-36089]"
    }, {
      "left" : "int maxCount",
      "right" : "int maxCount",
      "info" : "SingleVariableDeclaration[36044-36056]:SingleVariableDeclaration[36091-36103]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36058-36317]:Block[36105-36364]"
    }, {
      "left" : "int i = 0;",
      "right" : "int i = 0;",
      "info" : "VariableDeclarationStatement[36064-36074]:VariableDeclarationStatement[36111-36121]"
    }, {
      "left" : "Node c = n.getFirstChild();",
      "right" : "Node c = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[36079-36106]:VariableDeclarationStatement[36126-36153]"
    }, {
      "left" : "for (; c != null && i < maxCount; c = c.getNext())",
      "right" : "for (; c != null && i < maxCount; c = c.getNext())",
      "info" : "ForStatement[36111-36299]:ForStatement[36158-36346]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36162-36299]:Block[36209-36346]"
    }, {
      "left" : "if (c.isBlock())",
      "right" : "if (c.isBlock())",
      "info" : "IfStatement[36170-36293]:IfStatement[36217-36340]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36187-36247]:Block[36234-36294]"
    }, {
      "left" : "i += getNonEmptyChildCount(c, maxCount-i);",
      "right" : "i += getNonEmptyChildCount(c, maxCount-i);",
      "info" : "ExpressionStatement[36197-36239]:ExpressionStatement[36244-36286]"
    }, {
      "left" : "if (!c.isEmpty())",
      "right" : "if (!c.isEmpty())",
      "info" : "IfStatement[36253-36293]:IfStatement[36300-36340]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36271-36293]:Block[36318-36340]"
    }, {
      "left" : "i++;",
      "right" : "i++;",
      "info" : "ExpressionStatement[36281-36285]:ExpressionStatement[36328-36332]"
    }, {
      "left" : "return i;",
      "right" : "return i;",
      "info" : "ReturnStatement[36304-36313]:ReturnStatement[36351-36360]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[36380-36387]:Modifier[36427-36434]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[36388-36394]:Modifier[36435-36441]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[36395-36399]:SimpleType[36442-36446]"
    }, {
      "left" : "getFirstNonEmptyChild",
      "right" : "getFirstNonEmptyChild",
      "info" : "SimpleName[36400-36421]:SimpleName[36447-36468]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[36422-36428]:SingleVariableDeclaration[36469-36475]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36430-36722]:Block[36477-36769]"
    }, {
      "left" : "for (Node c = n.getFirstChild(); c != null; c = c.getNext())",
      "right" : "for (Node c = n.getFirstChild(); c != null; c = c.getNext())",
      "info" : "ForStatement[36436-36701]:ForStatement[36483-36748]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36497-36701]:Block[36544-36748]"
    }, {
      "left" : "if (c.isBlock())",
      "right" : "if (c.isBlock())",
      "info" : "IfStatement[36505-36695]:IfStatement[36552-36742]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36522-36644]:Block[36569-36691]"
    }, {
      "left" : "Node result = getFirstNonEmptyChild(c);",
      "right" : "Node result = getFirstNonEmptyChild(c);",
      "info" : "VariableDeclarationStatement[36532-36571]:VariableDeclarationStatement[36579-36618]"
    }, {
      "left" : "if (result != null)",
      "right" : "if (result != null)",
      "info" : "IfStatement[36580-36636]:IfStatement[36627-36683]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36600-36636]:Block[36647-36683]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[36612-36626]:ReturnStatement[36659-36673]"
    }, {
      "left" : "if (!c.isEmpty())",
      "right" : "if (!c.isEmpty())",
      "info" : "IfStatement[36650-36695]:IfStatement[36697-36742]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36668-36695]:Block[36715-36742]"
    }, {
      "left" : "return c;",
      "right" : "return c;",
      "info" : "ReturnStatement[36678-36687]:ReturnStatement[36725-36734]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[36706-36718]:ReturnStatement[36753-36765]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[37333-37340]:Modifier[37380-37387]"
    }, {
      "left" : "Context",
      "right" : "Context",
      "info" : "SimpleType[37341-37348]:SimpleType[37388-37395]"
    }, {
      "left" : "getContextForNonEmptyExpression",
      "right" : "getContextForNonEmptyExpression",
      "info" : "SimpleName[37349-37380]:SimpleName[37396-37427]"
    }, {
      "left" : "Context currentContext",
      "right" : "Context currentContext",
      "info" : "SingleVariableDeclaration[37381-37403]:SingleVariableDeclaration[37428-37450]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37405-37524]:Block[37452-37571]"
    }, {
      "left" : "return currentContext == Context.BEFORE_DANGLING_ELSE ?\n        Context.BEFORE_DANGLING_ELSE : Context.OTHER;",
      "right" : "return currentContext == Context.BEFORE_DANGLING_ELSE ?\n        Context.BEFORE_DANGLING_ELSE : Context.OTHER;",
      "info" : "ReturnStatement[37411-37520]:ReturnStatement[37458-37567]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[37693-37700]:Modifier[37740-37747]"
    }, {
      "left" : "Context",
      "right" : "Context",
      "info" : "SimpleType[37702-37709]:SimpleType[37749-37756]"
    }, {
      "left" : "getContextForNoInOperator",
      "right" : "getContextForNoInOperator",
      "info" : "SimpleName[37710-37735]:SimpleName[37757-37782]"
    }, {
      "left" : "Context context",
      "right" : "Context context",
      "info" : "SingleVariableDeclaration[37736-37751]:SingleVariableDeclaration[37783-37798]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37753-37863]:Block[37800-37910]"
    }, {
      "left" : "return (context == Context.IN_FOR_INIT_CLAUSE\n        ? Context.IN_FOR_INIT_CLAUSE : Context.OTHER);",
      "right" : "return (context == Context.IN_FOR_INIT_CLAUSE\n        ? Context.IN_FOR_INIT_CLAUSE : Context.OTHER);",
      "info" : "ReturnStatement[37759-37859]:ReturnStatement[37806-37906]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[37941-37948]:Modifier[37988-37995]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[37949-37955]:Modifier[37996-38002]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[37956-37960]:PrimitiveType[38003-38007]"
    }, {
      "left" : "appendHexJavaScriptRepresentation",
      "right" : "appendHexJavaScriptRepresentation",
      "info" : "SimpleName[37961-37994]:SimpleName[38008-38041]"
    }, {
      "left" : "StringBuilder sb",
      "right" : "StringBuilder sb",
      "info" : "SingleVariableDeclaration[38002-38018]:SingleVariableDeclaration[38049-38065]"
    }, {
      "left" : "char c",
      "right" : "char c",
      "info" : "SingleVariableDeclaration[38020-38026]:SingleVariableDeclaration[38067-38073]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38028-38217]:Block[38075-38264]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[38034-38213]:TryStatement[38081-38260]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38038-38093]:Block[38085-38140]"
    }, {
      "left" : "appendHexJavaScriptRepresentation(c, sb);",
      "right" : "appendHexJavaScriptRepresentation(c, sb);",
      "info" : "ExpressionStatement[38046-38087]:ExpressionStatement[38093-38134]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38117-38213]:Block[38164-38260]"
    }, {
      "left" : "throw new RuntimeException(ex);",
      "right" : "throw new RuntimeException(ex);",
      "info" : "ThrowStatement[38176-38207]:ThrowStatement[38223-38254]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[38453-38460]:Modifier[38500-38507]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[38461-38467]:Modifier[38508-38514]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[38468-38472]:PrimitiveType[38515-38519]"
    }, {
      "left" : "appendHexJavaScriptRepresentation",
      "right" : "appendHexJavaScriptRepresentation",
      "info" : "SimpleName[38473-38506]:SimpleName[38520-38553]"
    }, {
      "left" : "int codePoint",
      "right" : "int codePoint",
      "info" : "SingleVariableDeclaration[38514-38527]:SingleVariableDeclaration[38561-38574]"
    }, {
      "left" : "Appendable out",
      "right" : "Appendable out",
      "info" : "SingleVariableDeclaration[38529-38543]:SingleVariableDeclaration[38576-38590]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[38558-38569]:SimpleType[38605-38616]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38570-39308]:Block[38617-39355]"
    }, {
      "left" : "if (Character.isSupplementaryCodePoint(codePoint))",
      "right" : "if (Character.isSupplementaryCodePoint(codePoint))",
      "info" : "IfStatement[38576-39080]:IfStatement[38623-39127]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38627-39080]:Block[38674-39127]"
    }, {
      "left" : "char[] surrogates = Character.toChars(codePoint);",
      "right" : "char[] surrogates = Character.toChars(codePoint);",
      "info" : "VariableDeclarationStatement[38889-38938]:VariableDeclarationStatement[38936-38985]"
    }, {
      "left" : "appendHexJavaScriptRepresentation(surrogates[0], out);",
      "right" : "appendHexJavaScriptRepresentation(surrogates[0], out);",
      "info" : "ExpressionStatement[38945-38999]:ExpressionStatement[38992-39046]"
    }, {
      "left" : "appendHexJavaScriptRepresentation(surrogates[1], out);",
      "right" : "appendHexJavaScriptRepresentation(surrogates[1], out);",
      "info" : "ExpressionStatement[39006-39060]:ExpressionStatement[39053-39107]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[39067-39074]:ReturnStatement[39114-39121]"
    }, {
      "left" : "out.append(\"\\\\u\")\n        .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n        .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n        .append(HEX_CHARS[(codePoint >>> 4) & 0xf])\n        .append(HEX_CHARS[codePoint & 0xf]);",
      "right" : "out.append(\"\\\\u\")\n        .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n        .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n        .append(HEX_CHARS[(codePoint >>> 4) & 0xf])\n        .append(HEX_CHARS[codePoint & 0xf]);",
      "info" : "ExpressionStatement[39085-39304]:ExpressionStatement[39132-39351]"
    } ]
  },
  "interFileMappings" : { }
}