{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "NumberUtils",
      "right" : "NumberUtils",
      "info" : "TypeDeclaration[950-48325]:TypeDeclaration[950-48385]"
    }, {
      "left" : "public static final Long LONG_ZERO = Long.valueOf(0L);",
      "right" : "public static final Long LONG_ZERO = Long.valueOf(0L);",
      "info" : "FieldDeclaration[1092-1190]:FieldDeclaration[1092-1190]"
    }, {
      "left" : "public static final Long LONG_ONE = Long.valueOf(1L);",
      "right" : "public static final Long LONG_ONE = Long.valueOf(1L);",
      "info" : "FieldDeclaration[1195-1291]:FieldDeclaration[1195-1291]"
    }, {
      "left" : "public static final Long LONG_MINUS_ONE = Long.valueOf(-1L);",
      "right" : "public static final Long LONG_MINUS_ONE = Long.valueOf(-1L);",
      "info" : "FieldDeclaration[1296-1405]:FieldDeclaration[1296-1405]"
    }, {
      "left" : "public static final Integer INTEGER_ZERO = Integer.valueOf(0);",
      "right" : "public static final Integer INTEGER_ZERO = Integer.valueOf(0);",
      "info" : "FieldDeclaration[1410-1519]:FieldDeclaration[1410-1519]"
    }, {
      "left" : "public static final Integer INTEGER_ONE = Integer.valueOf(1);",
      "right" : "public static final Integer INTEGER_ONE = Integer.valueOf(1);",
      "info" : "FieldDeclaration[1524-1631]:FieldDeclaration[1524-1631]"
    }, {
      "left" : "public static final Integer INTEGER_MINUS_ONE = Integer.valueOf(-1);",
      "right" : "public static final Integer INTEGER_MINUS_ONE = Integer.valueOf(-1);",
      "info" : "FieldDeclaration[1636-1756]:FieldDeclaration[1636-1756]"
    }, {
      "left" : "public static final Short SHORT_ZERO = Short.valueOf((short) 0);",
      "right" : "public static final Short SHORT_ZERO = Short.valueOf((short) 0);",
      "info" : "FieldDeclaration[1761-1870]:FieldDeclaration[1761-1870]"
    }, {
      "left" : "public static final Short SHORT_ONE = Short.valueOf((short) 1);",
      "right" : "public static final Short SHORT_ONE = Short.valueOf((short) 1);",
      "info" : "FieldDeclaration[1875-1982]:FieldDeclaration[1875-1982]"
    }, {
      "left" : "public static final Short SHORT_MINUS_ONE = Short.valueOf((short) -1);",
      "right" : "public static final Short SHORT_MINUS_ONE = Short.valueOf((short) -1);",
      "info" : "FieldDeclaration[1987-2107]:FieldDeclaration[1987-2107]"
    }, {
      "left" : "public static final Byte BYTE_ZERO = Byte.valueOf((byte) 0);",
      "right" : "public static final Byte BYTE_ZERO = Byte.valueOf((byte) 0);",
      "info" : "FieldDeclaration[2112-2216]:FieldDeclaration[2112-2216]"
    }, {
      "left" : "public static final Byte BYTE_ONE = Byte.valueOf((byte) 1);",
      "right" : "public static final Byte BYTE_ONE = Byte.valueOf((byte) 1);",
      "info" : "FieldDeclaration[2221-2323]:FieldDeclaration[2221-2323]"
    }, {
      "left" : "public static final Byte BYTE_MINUS_ONE = Byte.valueOf((byte) -1);",
      "right" : "public static final Byte BYTE_MINUS_ONE = Byte.valueOf((byte) -1);",
      "info" : "FieldDeclaration[2328-2443]:FieldDeclaration[2328-2443]"
    }, {
      "left" : "public static final Double DOUBLE_ZERO = Double.valueOf(0.0d);",
      "right" : "public static final Double DOUBLE_ZERO = Double.valueOf(0.0d);",
      "info" : "FieldDeclaration[2448-2556]:FieldDeclaration[2448-2556]"
    }, {
      "left" : "public static final Double DOUBLE_ONE = Double.valueOf(1.0d);",
      "right" : "public static final Double DOUBLE_ONE = Double.valueOf(1.0d);",
      "info" : "FieldDeclaration[2561-2667]:FieldDeclaration[2561-2667]"
    }, {
      "left" : "public static final Double DOUBLE_MINUS_ONE = Double.valueOf(-1.0d);",
      "right" : "public static final Double DOUBLE_MINUS_ONE = Double.valueOf(-1.0d);",
      "info" : "FieldDeclaration[2672-2791]:FieldDeclaration[2672-2791]"
    }, {
      "left" : "public static final Float FLOAT_ZERO = Float.valueOf(0.0f);",
      "right" : "public static final Float FLOAT_ZERO = Float.valueOf(0.0f);",
      "info" : "FieldDeclaration[2796-2900]:FieldDeclaration[2796-2900]"
    }, {
      "left" : "public static final Float FLOAT_ONE = Float.valueOf(1.0f);",
      "right" : "public static final Float FLOAT_ONE = Float.valueOf(1.0f);",
      "info" : "FieldDeclaration[2905-3007]:FieldDeclaration[2905-3007]"
    }, {
      "left" : "public static final Float FLOAT_MINUS_ONE = Float.valueOf(-1.0f);",
      "right" : "public static final Float FLOAT_MINUS_ONE = Float.valueOf(-1.0f);",
      "info" : "FieldDeclaration[3012-3127]:FieldDeclaration[3012-3127]"
    }, {
      "left" : "public NumberUtils()",
      "right" : "public NumberUtils()",
      "info" : "MethodDeclaration[3133-3492]:MethodDeclaration[3133-3492]"
    }, {
      "left" : "public static int toInt(String str)",
      "right" : "public static int toInt(String str)",
      "info" : "MethodDeclaration[3576-4204]:MethodDeclaration[3576-4204]"
    }, {
      "left" : "public static int toInt(String str, int defaultValue)",
      "right" : "public static int toInt(String str, int defaultValue)",
      "info" : "MethodDeclaration[4210-5079]:MethodDeclaration[4210-5079]"
    }, {
      "left" : "public static long toLong(String str)",
      "right" : "public static long toLong(String str)",
      "info" : "MethodDeclaration[5085-5721]:MethodDeclaration[5085-5721]"
    }, {
      "left" : "public static long toLong(String str, long defaultValue)",
      "right" : "public static long toLong(String str, long defaultValue)",
      "info" : "MethodDeclaration[5727-6608]:MethodDeclaration[5727-6608]"
    }, {
      "left" : "public static float toFloat(String str)",
      "right" : "public static float toFloat(String str)",
      "info" : "MethodDeclaration[6614-7311]:MethodDeclaration[6614-7311]"
    }, {
      "left" : "public static float toFloat(String str, float defaultValue)",
      "right" : "public static float toFloat(String str, float defaultValue)",
      "info" : "MethodDeclaration[7317-8259]:MethodDeclaration[7317-8259]"
    }, {
      "left" : "public static double toDouble(String str)",
      "right" : "public static double toDouble(String str)",
      "info" : "MethodDeclaration[8265-8970]:MethodDeclaration[8265-8970]"
    }, {
      "left" : "public static double toDouble(String str, double defaultValue)",
      "right" : "public static double toDouble(String str, double defaultValue)",
      "info" : "MethodDeclaration[8976-9923]:MethodDeclaration[8976-9923]"
    }, {
      "left" : "public static byte toByte(String str)",
      "right" : "public static byte toByte(String str)",
      "info" : "MethodDeclaration[10009-10651]:MethodDeclaration[10009-10651]"
    }, {
      "left" : "public static byte toByte(String str, byte defaultValue)",
      "right" : "public static byte toByte(String str, byte defaultValue)",
      "info" : "MethodDeclaration[10657-11531]:MethodDeclaration[10657-11531]"
    }, {
      "left" : "public static short toShort(String str)",
      "right" : "public static short toShort(String str)",
      "info" : "MethodDeclaration[11537-12188]:MethodDeclaration[11537-12188]"
    }, {
      "left" : "public static short toShort(String str, short defaultValue)",
      "right" : "public static short toShort(String str, short defaultValue)",
      "info" : "MethodDeclaration[12194-13079]:MethodDeclaration[12194-13079]"
    }, {
      "left" : "public static Number createNumber(String str) throws NumberFormatException",
      "right" : "public static Number createNumber(String str) throws NumberFormatException",
      "info" : "MethodDeclaration[14344-21831]:MethodDeclaration[14344-21760]"
    }, {
      "left" : "private static boolean isAllZeros(String str)",
      "right" : "private static boolean isAllZeros(String str)",
      "info" : "MethodDeclaration[21837-22399]:MethodDeclaration[21766-22328]"
    }, {
      "left" : "public static Float createFloat(String str)",
      "right" : "public static Float createFloat(String str)",
      "info" : "MethodDeclaration[22483-23017]:MethodDeclaration[22412-22946]"
    }, {
      "left" : "public static Double createDouble(String str)",
      "right" : "public static Double createDouble(String str)",
      "info" : "MethodDeclaration[23023-23562]:MethodDeclaration[22952-23491]"
    }, {
      "left" : "public static Integer createInteger(String str)",
      "right" : "public static Integer createInteger(String str)",
      "info" : "MethodDeclaration[23568-24221]:MethodDeclaration[23497-24150]"
    }, {
      "left" : "public static Long createLong(String str)",
      "right" : "public static Long createLong(String str)",
      "info" : "MethodDeclaration[24227-24809]:MethodDeclaration[24156-24738]"
    }, {
      "left" : "public static BigInteger createBigInteger(String str)",
      "right" : "public static BigInteger createBigInteger(String str)",
      "info" : "MethodDeclaration[24815-25370]:MethodDeclaration[24744-25299]"
    }, {
      "left" : "public static BigDecimal createBigDecimal(String str)",
      "right" : "public static BigDecimal createBigDecimal(String str)",
      "info" : "MethodDeclaration[25376-26386]:MethodDeclaration[25305-26446]"
    }, {
      "left" : "public static long min(long[] array)",
      "right" : "public static long min(long[] array)",
      "info" : "MethodDeclaration[26487-27354]:MethodDeclaration[26547-27414]"
    }, {
      "left" : "public static int min(int[] array)",
      "right" : "public static int min(int[] array)",
      "info" : "MethodDeclaration[27360-28224]:MethodDeclaration[27420-28284]"
    }, {
      "left" : "public static short min(short[] array)",
      "right" : "public static short min(short[] array)",
      "info" : "MethodDeclaration[28230-29100]:MethodDeclaration[28290-29160]"
    }, {
      "left" : "public static byte min(byte[] array)",
      "right" : "public static byte min(byte[] array)",
      "info" : "MethodDeclaration[29106-29973]:MethodDeclaration[29166-30033]"
    }, {
      "left" : "public static double min(double[] array)",
      "right" : "public static double min(double[] array)",
      "info" : "MethodDeclaration[29980-31056]:MethodDeclaration[30040-31116]"
    }, {
      "left" : "public static float min(float[] array)",
      "right" : "public static float min(float[] array)",
      "info" : "MethodDeclaration[31062-32132]:MethodDeclaration[31122-32192]"
    }, {
      "left" : "public static long max(long[] array)",
      "right" : "public static long max(long[] array)",
      "info" : "MethodDeclaration[32233-33092]:MethodDeclaration[32293-33152]"
    }, {
      "left" : "public static int max(int[] array)",
      "right" : "public static int max(int[] array)",
      "info" : "MethodDeclaration[33098-33962]:MethodDeclaration[33158-34022]"
    }, {
      "left" : "public static short max(short[] array)",
      "right" : "public static short max(short[] array)",
      "info" : "MethodDeclaration[33968-34838]:MethodDeclaration[34028-34898]"
    }, {
      "left" : "public static byte max(byte[] array)",
      "right" : "public static byte max(byte[] array)",
      "info" : "MethodDeclaration[34844-35711]:MethodDeclaration[34904-35771]"
    }, {
      "left" : "public static double max(double[] array)",
      "right" : "public static double max(double[] array)",
      "info" : "MethodDeclaration[35717-36792]:MethodDeclaration[35777-36852]"
    }, {
      "left" : "public static float max(float[] array)",
      "right" : "public static float max(float[] array)",
      "info" : "MethodDeclaration[36798-37860]:MethodDeclaration[36858-37920]"
    }, {
      "left" : "public static long min(long a, long b, long c)",
      "right" : "public static long min(long a, long b, long c)",
      "info" : "MethodDeclaration[37968-38348]:MethodDeclaration[38028-38408]"
    }, {
      "left" : "public static int min(int a, int b, int c)",
      "right" : "public static int min(int a, int b, int c)",
      "info" : "MethodDeclaration[38354-38729]:MethodDeclaration[38414-38789]"
    }, {
      "left" : "public static short min(short a, short b, short c)",
      "right" : "public static short min(short a, short b, short c)",
      "info" : "MethodDeclaration[38735-39120]:MethodDeclaration[38795-39180]"
    }, {
      "left" : "public static byte min(byte a, byte b, byte c)",
      "right" : "public static byte min(byte a, byte b, byte c)",
      "info" : "MethodDeclaration[39126-39506]:MethodDeclaration[39186-39566]"
    }, {
      "left" : "public static double min(double a, double b, double c)",
      "right" : "public static double min(double a, double b, double c)",
      "info" : "MethodDeclaration[39512-40054]:MethodDeclaration[39572-40114]"
    }, {
      "left" : "public static float min(float a, float b, float c)",
      "right" : "public static float min(float a, float b, float c)",
      "info" : "MethodDeclaration[40060-40593]:MethodDeclaration[40120-40653]"
    }, {
      "left" : "public static long max(long a, long b, long c)",
      "right" : "public static long max(long a, long b, long c)",
      "info" : "MethodDeclaration[40696-41075]:MethodDeclaration[40756-41135]"
    }, {
      "left" : "public static int max(int a, int b, int c)",
      "right" : "public static int max(int a, int b, int c)",
      "info" : "MethodDeclaration[41081-41455]:MethodDeclaration[41141-41515]"
    }, {
      "left" : "public static short max(short a, short b, short c)",
      "right" : "public static short max(short a, short b, short c)",
      "info" : "MethodDeclaration[41461-41845]:MethodDeclaration[41521-41905]"
    }, {
      "left" : "public static byte max(byte a, byte b, byte c)",
      "right" : "public static byte max(byte a, byte b, byte c)",
      "info" : "MethodDeclaration[41851-42230]:MethodDeclaration[41911-42290]"
    }, {
      "left" : "public static double max(double a, double b, double c)",
      "right" : "public static double max(double a, double b, double c)",
      "info" : "MethodDeclaration[42236-42776]:MethodDeclaration[42296-42836]"
    }, {
      "left" : "public static float max(float a, float b, float c)",
      "right" : "public static float max(float a, float b, float c)",
      "info" : "MethodDeclaration[42782-43314]:MethodDeclaration[42842-43374]"
    }, {
      "left" : "public static boolean isDigits(String str)",
      "right" : "public static boolean isDigits(String str)",
      "info" : "MethodDeclaration[43398-44033]:MethodDeclaration[43458-44093]"
    }, {
      "left" : "public static boolean isNumber(String str)",
      "right" : "public static boolean isNumber(String str)",
      "info" : "MethodDeclaration[44039-48322]:MethodDeclaration[44099-48382]"
    } ],
    "mappings" : [
 {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[1056-1062]:Modifier[1056-1062]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[1063-1068]:TYPE_DECLARATION_KIND[1063-1068]"
    }, {
      "left" : "NumberUtils",
      "right" : "NumberUtils",
      "info" : "SimpleName[1069-1080]:SimpleName[1069-1080]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[3447-3453]:Modifier[3447-3453]"
    }, {
      "left" : "NumberUtils",
      "right" : "NumberUtils",
      "info" : "SimpleName[3454-3465]:SimpleName[3454-3465]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3468-3492]:Block[3468-3492]"
    }, {
      "left" : "super();",
      "right" : "super();",
      "info" : "SuperConstructorInvocation[3478-3486]:SuperConstructorInvocation[3478-3486]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[4131-4137]:Modifier[4131-4137]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[4138-4144]:Modifier[4138-4144]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[4145-4148]:PrimitiveType[4145-4148]"
    }, {
      "left" : "toInt",
      "right" : "toInt",
      "info" : "SimpleName[4149-4154]:SimpleName[4149-4154]"
    }, {
      "left" : "String str",
      "right" : "String str",
      "info" : "SingleVariableDeclaration[4155-4165]:SingleVariableDeclaration[4155-4165]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4167-4204]:Block[4167-4204]"
    }, {
      "left" : "return toInt(str, 0);",
      "right" : "return toInt(str, 0);",
      "info" : "ReturnStatement[4177-4198]:ReturnStatement[4177-4198]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[4804-4810]:Modifier[4804-4810]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[4811-4817]:Modifier[4811-4817]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[4818-4821]:PrimitiveType[4818-4821]"
    }, {
      "left" : "toInt",
      "right" : "toInt",
      "info" : "SimpleName[4822-4827]:SimpleName[4822-4827]"
    }, {
      "left" : "String str",
      "right" : "String str",
      "info" : "SingleVariableDeclaration[4828-4838]:SingleVariableDeclaration[4828-4838]"
    }, {
      "left" : "int defaultValue",
      "right" : "int defaultValue",
      "info" : "SingleVariableDeclaration[4840-4856]:SingleVariableDeclaration[4840-4856]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4858-5079]:Block[4858-5079]"
    }, {
      "left" : "if(str == null)",
      "right" : "if(str == null)",
      "info" : "IfStatement[4868-4928]:IfStatement[4868-4928]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4884-4928]:Block[4884-4928]"
    }, {
      "left" : "return defaultValue;",
      "right" : "return defaultValue;",
      "info" : "ReturnStatement[4898-4918]:ReturnStatement[4898-4918]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[4937-5073]:TryStatement[4937-5073]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4941-4994]:Block[4941-4994]"
    }, {
      "left" : "return Integer.parseInt(str);",
      "right" : "return Integer.parseInt(str);",
      "info" : "ReturnStatement[4955-4984]:ReturnStatement[4955-4984]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5029-5073]:Block[5029-5073]"
    }, {
      "left" : "return defaultValue;",
      "right" : "return defaultValue;",
      "info" : "ReturnStatement[5043-5063]:ReturnStatement[5043-5063]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[5644-5650]:Modifier[5644-5650]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[5651-5657]:Modifier[5651-5657]"
    }, {
      "left" : "long",
      "right" : "long",
      "info" : "PrimitiveType[5658-5662]:PrimitiveType[5658-5662]"
    }, {
      "left" : "toLong",
      "right" : "toLong",
      "info" : "SimpleName[5663-5669]:SimpleName[5663-5669]"
    }, {
      "left" : "String str",
      "right" : "String str",
      "info" : "SingleVariableDeclaration[5670-5680]:SingleVariableDeclaration[5670-5680]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5682-5721]:Block[5682-5721]"
    }, {
      "left" : "return toLong(str, 0L);",
      "right" : "return toLong(str, 0L);",
      "info" : "ReturnStatement[5692-5715]:ReturnStatement[5692-5715]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[6331-6337]:Modifier[6331-6337]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[6338-6344]:Modifier[6338-6344]"
    }, {
      "left" : "long",
      "right" : "long",
      "info" : "PrimitiveType[6345-6349]:PrimitiveType[6345-6349]"
    }, {
      "left" : "toLong",
      "right" : "toLong",
      "info" : "SimpleName[6350-6356]:SimpleName[6350-6356]"
    }, {
      "left" : "String str",
      "right" : "String str",
      "info" : "SingleVariableDeclaration[6357-6367]:SingleVariableDeclaration[6357-6367]"
    }, {
      "left" : "long defaultValue",
      "right" : "long defaultValue",
      "info" : "SingleVariableDeclaration[6369-6386]:SingleVariableDeclaration[6369-6386]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6388-6608]:Block[6388-6608]"
    }, {
      "left" : "if (str == null)",
      "right" : "if (str == null)",
      "info" : "IfStatement[6398-6459]:IfStatement[6398-6459]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6415-6459]:Block[6415-6459]"
    }, {
      "left" : "return defaultValue;",
      "right" : "return defaultValue;",
      "info" : "ReturnStatement[6429-6449]:ReturnStatement[6429-6449]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[6468-6602]:TryStatement[6468-6602]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6472-6523]:Block[6472-6523]"
    }, {
      "left" : "return Long.parseLong(str);",
      "right" : "return Long.parseLong(str);",
      "info" : "ReturnStatement[6486-6513]:ReturnStatement[6486-6513]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6558-6602]:Block[6558-6602]"
    }, {
      "left" : "return defaultValue;",
      "right" : "return defaultValue;",
      "info" : "ReturnStatement[6572-6592]:ReturnStatement[6572-6592]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[7229-7235]:Modifier[7229-7235]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[7236-7242]:Modifier[7236-7242]"
    }, {
      "left" : "float",
      "right" : "float",
      "info" : "PrimitiveType[7243-7248]:PrimitiveType[7243-7248]"
    }, {
      "left" : "toFloat",
      "right" : "toFloat",
      "info" : "SimpleName[7249-7256]:SimpleName[7249-7256]"
    }, {
      "left" : "String str",
      "right" : "String str",
      "info" : "SingleVariableDeclaration[7257-7267]:SingleVariableDeclaration[7257-7267]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7269-7311]:Block[7269-7311]"
    }, {
      "left" : "return toFloat(str, 0.0f);",
      "right" : "return toFloat(str, 0.0f);",
      "info" : "ReturnStatement[7279-7305]:ReturnStatement[7279-7305]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[7988-7994]:Modifier[7988-7994]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[7995-8001]:Modifier[7995-8001]"
    }, {
      "left" : "float",
      "right" : "float",
      "info" : "PrimitiveType[8002-8007]:PrimitiveType[8002-8007]"
    }, {
      "left" : "toFloat",
      "right" : "toFloat",
      "info" : "SimpleName[8008-8015]:SimpleName[8008-8015]"
    }, {
      "left" : "String str",
      "right" : "String str",
      "info" : "SingleVariableDeclaration[8016-8026]:SingleVariableDeclaration[8016-8026]"
    }, {
      "left" : "float defaultValue",
      "right" : "float defaultValue",
      "info" : "SingleVariableDeclaration[8028-8046]:SingleVariableDeclaration[8028-8046]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8048-8259]:Block[8048-8259]"
    }, {
      "left" : "if (str == null)",
      "right" : "if (str == null)",
      "info" : "IfStatement[8056-8113]:IfStatement[8056-8113]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8073-8113]:Block[8073-8113]"
    }, {
      "left" : "return defaultValue;",
      "right" : "return defaultValue;",
      "info" : "ReturnStatement[8085-8105]:ReturnStatement[8085-8105]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[8125-8253]:TryStatement[8125-8253]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8129-8178]:Block[8129-8178]"
    }, {
      "left" : "return Float.parseFloat(str);",
      "right" : "return Float.parseFloat(str);",
      "info" : "ReturnStatement[8141-8170]:ReturnStatement[8141-8170]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8213-8253]:Block[8213-8253]"
    }, {
      "left" : "return defaultValue;",
      "right" : "return defaultValue;",
      "info" : "ReturnStatement[8225-8245]:ReturnStatement[8225-8245]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[8885-8891]:Modifier[8885-8891]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[8892-8898]:Modifier[8892-8898]"
    }, {
      "left" : "double",
      "right" : "double",
      "info" : "PrimitiveType[8899-8905]:PrimitiveType[8899-8905]"
    }, {
      "left" : "toDouble",
      "right" : "toDouble",
      "info" : "SimpleName[8906-8914]:SimpleName[8906-8914]"
    }, {
      "left" : "String str",
      "right" : "String str",
      "info" : "SingleVariableDeclaration[8915-8925]:SingleVariableDeclaration[8915-8925]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8927-8970]:Block[8927-8970]"
    }, {
      "left" : "return toDouble(str, 0.0d);",
      "right" : "return toDouble(str, 0.0d);",
      "info" : "ReturnStatement[8937-8964]:ReturnStatement[8937-8964]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[9652-9658]:Modifier[9652-9658]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[9659-9665]:Modifier[9659-9665]"
    }, {
      "left" : "double",
      "right" : "double",
      "info" : "PrimitiveType[9666-9672]:PrimitiveType[9666-9672]"
    }, {
      "left" : "toDouble",
      "right" : "toDouble",
      "info" : "SimpleName[9673-9681]:SimpleName[9673-9681]"
    }, {
      "left" : "String str",
      "right" : "String str",
      "info" : "SingleVariableDeclaration[9682-9692]:SingleVariableDeclaration[9682-9692]"
    }, {
      "left" : "double defaultValue",
      "right" : "double defaultValue",
      "info" : "SingleVariableDeclaration[9694-9713]:SingleVariableDeclaration[9694-9713]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9715-9923]:Block[9715-9923]"
    }, {
      "left" : "if (str == null)",
      "right" : "if (str == null)",
      "info" : "IfStatement[9723-9780]:IfStatement[9723-9780]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9740-9780]:Block[9740-9780]"
    }, {
      "left" : "return defaultValue;",
      "right" : "return defaultValue;",
      "info" : "ReturnStatement[9752-9772]:ReturnStatement[9752-9772]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[9787-9917]:TryStatement[9787-9917]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9791-9842]:Block[9791-9842]"
    }, {
      "left" : "return Double.parseDouble(str);",
      "right" : "return Double.parseDouble(str);",
      "info" : "ReturnStatement[9803-9834]:ReturnStatement[9803-9834]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9877-9917]:Block[9877-9917]"
    }, {
      "left" : "return defaultValue;",
      "right" : "return defaultValue;",
      "info" : "ReturnStatement[9889-9909]:ReturnStatement[9889-9909]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[10568-10574]:Modifier[10568-10574]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[10575-10581]:Modifier[10575-10581]"
    }, {
      "left" : "byte",
      "right" : "byte",
      "info" : "PrimitiveType[10582-10586]:PrimitiveType[10582-10586]"
    }, {
      "left" : "toByte",
      "right" : "toByte",
      "info" : "SimpleName[10587-10593]:SimpleName[10587-10593]"
    }, {
      "left" : "String str",
      "right" : "String str",
      "info" : "SingleVariableDeclaration[10594-10604]:SingleVariableDeclaration[10594-10604]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10606-10651]:Block[10606-10651]"
    }, {
      "left" : "return toByte(str, (byte) 0);",
      "right" : "return toByte(str, (byte) 0);",
      "info" : "ReturnStatement[10616-10645]:ReturnStatement[10616-10645]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[11255-11261]:Modifier[11255-11261]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[11262-11268]:Modifier[11262-11268]"
    }, {
      "left" : "byte",
      "right" : "byte",
      "info" : "PrimitiveType[11269-11273]:PrimitiveType[11269-11273]"
    }, {
      "left" : "toByte",
      "right" : "toByte",
      "info" : "SimpleName[11274-11280]:SimpleName[11274-11280]"
    }, {
      "left" : "String str",
      "right" : "String str",
      "info" : "SingleVariableDeclaration[11281-11291]:SingleVariableDeclaration[11281-11291]"
    }, {
      "left" : "byte defaultValue",
      "right" : "byte defaultValue",
      "info" : "SingleVariableDeclaration[11293-11310]:SingleVariableDeclaration[11293-11310]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11312-11531]:Block[11312-11531]"
    }, {
      "left" : "if(str == null)",
      "right" : "if(str == null)",
      "info" : "IfStatement[11322-11382]:IfStatement[11322-11382]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11338-11382]:Block[11338-11382]"
    }, {
      "left" : "return defaultValue;",
      "right" : "return defaultValue;",
      "info" : "ReturnStatement[11352-11372]:ReturnStatement[11352-11372]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[11391-11525]:TryStatement[11391-11525]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11395-11446]:Block[11395-11446]"
    }, {
      "left" : "return Byte.parseByte(str);",
      "right" : "return Byte.parseByte(str);",
      "info" : "ReturnStatement[11409-11436]:ReturnStatement[11409-11436]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11481-11525]:Block[11481-11525]"
    }, {
      "left" : "return defaultValue;",
      "right" : "return defaultValue;",
      "info" : "ReturnStatement[11495-11515]:ReturnStatement[11495-11515]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[12101-12107]:Modifier[12101-12107]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[12108-12114]:Modifier[12108-12114]"
    }, {
      "left" : "short",
      "right" : "short",
      "info" : "PrimitiveType[12115-12120]:PrimitiveType[12115-12120]"
    }, {
      "left" : "toShort",
      "right" : "toShort",
      "info" : "SimpleName[12121-12128]:SimpleName[12121-12128]"
    }, {
      "left" : "String str",
      "right" : "String str",
      "info" : "SingleVariableDeclaration[12129-12139]:SingleVariableDeclaration[12129-12139]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12141-12188]:Block[12141-12188]"
    }, {
      "left" : "return toShort(str, (short) 0);",
      "right" : "return toShort(str, (short) 0);",
      "info" : "ReturnStatement[12151-12182]:ReturnStatement[12151-12182]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[12798-12804]:Modifier[12798-12804]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[12805-12811]:Modifier[12805-12811]"
    }, {
      "left" : "short",
      "right" : "short",
      "info" : "PrimitiveType[12812-12817]:PrimitiveType[12812-12817]"
    }, {
      "left" : "toShort",
      "right" : "toShort",
      "info" : "SimpleName[12818-12825]:SimpleName[12818-12825]"
    }, {
      "left" : "String str",
      "right" : "String str",
      "info" : "SingleVariableDeclaration[12826-12836]:SingleVariableDeclaration[12826-12836]"
    }, {
      "left" : "short defaultValue",
      "right" : "short defaultValue",
      "info" : "SingleVariableDeclaration[12838-12856]:SingleVariableDeclaration[12838-12856]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12858-13079]:Block[12858-13079]"
    }, {
      "left" : "if(str == null)",
      "right" : "if(str == null)",
      "info" : "IfStatement[12868-12928]:IfStatement[12868-12928]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12884-12928]:Block[12884-12928]"
    }, {
      "left" : "return defaultValue;",
      "right" : "return defaultValue;",
      "info" : "ReturnStatement[12898-12918]:ReturnStatement[12898-12918]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[12937-13073]:TryStatement[12937-13073]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12941-12994]:Block[12941-12994]"
    }, {
      "left" : "return Short.parseShort(str);",
      "right" : "return Short.parseShort(str);",
      "info" : "ReturnStatement[12955-12984]:ReturnStatement[12955-12984]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13029-13073]:Block[13029-13073]"
    }, {
      "left" : "return defaultValue;",
      "right" : "return defaultValue;",
      "info" : "ReturnStatement[13043-13063]:ReturnStatement[13043-13063]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[15744-15750]:Modifier[15744-15750]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[15751-15757]:Modifier[15751-15757]"
    }, {
      "left" : "Number",
      "right" : "Number",
      "info" : "SimpleType[15758-15764]:SimpleType[15758-15764]"
    }, {
      "left" : "createNumber",
      "right" : "createNumber",
      "info" : "SimpleName[15765-15777]:SimpleName[15765-15777]"
    }, {
      "left" : "String str",
      "right" : "String str",
      "info" : "SingleVariableDeclaration[15778-15788]:SingleVariableDeclaration[15778-15788]"
    }, {
      "left" : "NumberFormatException",
      "right" : "NumberFormatException",
      "info" : "SimpleType[15797-15818]:SimpleType[15797-15818]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15819-21831]:Block[15819-21760]"
    }, {
      "left" : "if (str == null)",
      "right" : "if (str == null)",
      "info" : "IfStatement[15829-15882]:IfStatement[15829-15882]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15846-15882]:Block[15846-15882]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[15860-15872]:ReturnStatement[15860-15872]"
    }, {
      "left" : "if (StringUtils.isBlank(str))",
      "right" : "if (StringUtils.isBlank(str))",
      "info" : "IfStatement[15891-16017]:IfStatement[15891-16017]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15921-16017]:Block[15921-16017]"
    }, {
      "left" : "throw new NumberFormatException(\"A blank string is not a valid number\");",
      "right" : "throw new NumberFormatException(\"A blank string is not a valid number\");",
      "info" : "ThrowStatement[15935-16007]:ThrowStatement[15935-16007]"
    }, {
      "left" : "if (str.startsWith(\"--\"))",
      "right" : "if (str.trim().startsWith(\"--\"))",
      "info" : "IfStatement[16028-16090]:IfStatement[26035-26404]"
    }, {
      "left" : "str",
      "right" : "str",
      "info" : "METHOD_INVOCATION_RECEIVER[16032-16035]:METHOD_INVOCATION_RECEIVER[26039-26042]"
    }, {
      "left" : "if (str.startsWith(\"0x\") || str.startsWith(\"-0x\") || str.startsWith(\"0X\") || str.startsWith(\"-0X\"))",
      "right" : "if (str.startsWith(\"0x\") || str.startsWith(\"-0x\") || str.startsWith(\"0X\") || str.startsWith(\"-0X\"))",
      "info" : "IfStatement[16099-16508]:IfStatement[16028-16437]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16199-16508]:Block[16128-16437]"
    }, {
      "left" : "int hexDigits = str.length() - 2;",
      "right" : "int hexDigits = str.length() - 2;",
      "info" : "VariableDeclarationStatement[16213-16246]:VariableDeclarationStatement[16142-16175]"
    }, {
      "left" : "if (str.startsWith(\"-\"))",
      "right" : "if (str.startsWith(\"-\"))",
      "info" : "IfStatement[16270-16349]:IfStatement[16199-16278]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16295-16349]:Block[16224-16278]"
    }, {
      "left" : "hexDigits--;",
      "right" : "hexDigits--;",
      "info" : "ExpressionStatement[16323-16335]:ExpressionStatement[16252-16264]"
    }, {
      "left" : "if (hexDigits > 8)",
      "right" : "if (hexDigits > 8)",
      "info" : "IfStatement[16362-16459]:IfStatement[16291-16388]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16381-16459]:Block[16310-16388]"
    }, {
      "left" : "return createLong(str);",
      "right" : "return createLong(str);",
      "info" : "ReturnStatement[16422-16445]:ReturnStatement[16351-16374]"
    }, {
      "left" : "return createInteger(str);",
      "right" : "return createInteger(str);",
      "info" : "ReturnStatement[16472-16498]:ReturnStatement[16401-16427]"
    }, {
      "left" : "char lastChar = str.charAt(str.length() - 1);",
      "right" : "char lastChar = str.charAt(str.length() - 1);",
      "info" : "VariableDeclarationStatement[16520-16565]:VariableDeclarationStatement[16449-16494]"
    }, {
      "left" : "String mant;",
      "right" : "String mant;",
      "info" : "VariableDeclarationStatement[16574-16586]:VariableDeclarationStatement[16503-16515]"
    }, {
      "left" : "String dec;",
      "right" : "String dec;",
      "info" : "VariableDeclarationStatement[16595-16606]:VariableDeclarationStatement[16524-16535]"
    }, {
      "left" : "String exp;",
      "right" : "String exp;",
      "info" : "VariableDeclarationStatement[16615-16626]:VariableDeclarationStatement[16544-16555]"
    }, {
      "left" : "int decPos = str.indexOf('.');",
      "right" : "int decPos = str.indexOf('.');",
      "info" : "VariableDeclarationStatement[16635-16665]:VariableDeclarationStatement[16564-16594]"
    }, {
      "left" : "int expPos = str.indexOf('e') + str.indexOf('E') + 1;",
      "right" : "int expPos = str.indexOf('e') + str.indexOf('E') + 1;",
      "info" : "VariableDeclarationStatement[16674-16727]:VariableDeclarationStatement[16603-16656]"
    }, {
      "left" : "if (decPos > -1)",
      "right" : "if (decPos > -1)",
      "info" : "IfStatement[16737-17484]:IfStatement[16666-17413]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16754-17151]:Block[16683-17080]"
    }, {
      "left" : "if (expPos > -1)",
      "right" : "if (expPos > -1)",
      "info" : "IfStatement[16769-17096]:IfStatement[16698-17025]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16786-17026]:Block[16715-16955]"
    }, {
      "left" : "if (expPos < decPos || expPos > str.length())",
      "right" : "if (expPos < decPos || expPos > str.length())",
      "info" : "IfStatement[16804-16955]:IfStatement[16733-16884]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16850-16955]:Block[16779-16884]"
    }, {
      "left" : "throw new NumberFormatException(str + \" is not a valid number.\");",
      "right" : "throw new NumberFormatException(str + \" is not a valid number.\");",
      "info" : "ThrowStatement[16872-16937]:ThrowStatement[16801-16866]"
    }, {
      "left" : "dec = str.substring(decPos + 1, expPos);",
      "right" : "dec = str.substring(decPos + 1, expPos);",
      "info" : "ExpressionStatement[16972-17012]:ExpressionStatement[16901-16941]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17032-17096]:Block[16961-17025]"
    }, {
      "left" : "dec = str.substring(decPos + 1);",
      "right" : "dec = str.substring(decPos + 1);",
      "info" : "ExpressionStatement[17050-17082]:ExpressionStatement[16979-17011]"
    }, {
      "left" : "mant = str.substring(0, decPos);",
      "right" : "mant = str.substring(0, decPos);",
      "info" : "ExpressionStatement[17109-17141]:ExpressionStatement[17038-17070]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17157-17484]:Block[17086-17413]"
    }, {
      "left" : "if (expPos > -1)",
      "right" : "if (expPos > -1)",
      "info" : "IfStatement[17171-17450]:IfStatement[17100-17379]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17188-17401]:Block[17117-17330]"
    }, {
      "left" : "if (expPos > str.length())",
      "right" : "if (expPos > str.length())",
      "info" : "IfStatement[17206-17338]:IfStatement[17135-17267]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17233-17338]:Block[17162-17267]"
    }, {
      "left" : "throw new NumberFormatException(str + \" is not a valid number.\");",
      "right" : "throw new NumberFormatException(str + \" is not a valid number.\");",
      "info" : "ThrowStatement[17255-17320]:ThrowStatement[17184-17249]"
    }, {
      "left" : "mant = str.substring(0, expPos);",
      "right" : "mant = str.substring(0, expPos);",
      "info" : "ExpressionStatement[17355-17387]:ExpressionStatement[17284-17316]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17407-17450]:Block[17336-17379]"
    }, {
      "left" : "mant = str;",
      "right" : "mant = str;",
      "info" : "ExpressionStatement[17425-17436]:ExpressionStatement[17354-17365]"
    }, {
      "left" : "dec = null;",
      "right" : "dec = null;",
      "info" : "ExpressionStatement[17463-17474]:ExpressionStatement[17392-17403]"
    }, {
      "left" : "if (!Character.isDigit(lastChar) && lastChar != '.')",
      "right" : "if (!Character.isDigit(lastChar) && lastChar != '.')",
      "info" : "IfStatement[17493-21825]:IfStatement[17422-21754]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17546-20094]:Block[17475-20023]"
    }, {
      "left" : "if (expPos > -1 && expPos < str.length() - 1)",
      "right" : "if (expPos > -1 && expPos < str.length() - 1)",
      "info" : "IfStatement[17560-17737]:IfStatement[17489-17666]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17606-17688]:Block[17535-17617]"
    }, {
      "left" : "exp = str.substring(expPos + 1, str.length() - 1);",
      "right" : "exp = str.substring(expPos + 1, str.length() - 1);",
      "info" : "ExpressionStatement[17624-17674]:ExpressionStatement[17553-17603]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17694-17737]:Block[17623-17666]"
    }, {
      "left" : "exp = null;",
      "right" : "exp = null;",
      "info" : "ExpressionStatement[17712-17723]:ExpressionStatement[17641-17652]"
    }, {
      "left" : "String numeric = str.substring(0, str.length() - 1);",
      "right" : "String numeric = str.substring(0, str.length() - 1);",
      "info" : "VariableDeclarationStatement[17793-17845]:VariableDeclarationStatement[17722-17774]"
    }, {
      "left" : "boolean allZeros = isAllZeros(mant) && isAllZeros(exp);",
      "right" : "boolean allZeros = isAllZeros(mant) && isAllZeros(exp);",
      "info" : "VariableDeclarationStatement[17858-17913]:VariableDeclarationStatement[17787-17842]"
    }, {
      "left" : "switch (lastChar) {\n                case 'l' :\n                case 'L' :\n                    if (dec == null\n                        && exp == null\n                        && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {\n                        try {\n                            return createLong(numeric);\n                        } catch (NumberFormatException nfe) { // NOPMD\n                            // Too big for a long\n                        }\n                        return createBigInteger(numeric);\n\n                    }\n                    throw new NumberFormatException(str + \" is not a valid number.\");\n                case 'f' :\n                case 'F' :\n                    try {\n                        Float f = NumberUtils.createFloat(numeric);\n                        if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                            //If it's too big for a float or the float value = 0 and the string\n                            //has non-zeros in it, then float does not have the precision we want\n                            return f;\n                        }\n\n                    } catch (NumberFormatException nfe) { // NOPMD\n                        // ignore the bad number\n                    }\n                    //$FALL-THROUGH$\n                case 'd' :\n                case 'D' :\n                    try {\n                        Double d = NumberUtils.createDouble(numeric);\n                        if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {\n                            return d;\n                        }\n                    } catch (NumberFormatException nfe) { // NOPMD\n                        // ignore the bad number\n                    }\n                    try {\n                        return createBigDecimal(numeric);\n                    } catch (NumberFormatException e) { // NOPMD\n                        // ignore the bad number\n                    }\n                    //$FALL-THROUGH$\n                default :\n                    throw new NumberFormatException(str + \" is not a valid number.\");\n\n            }",
      "right" : "switch (lastChar) {\n                case 'l' :\n                case 'L' :\n                    if (dec == null\n                        && exp == null\n                        && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {\n                        try {\n                            return createLong(numeric);\n                        } catch (NumberFormatException nfe) { // NOPMD\n                            // Too big for a long\n                        }\n                        return createBigInteger(numeric);\n\n                    }\n                    throw new NumberFormatException(str + \" is not a valid number.\");\n                case 'f' :\n                case 'F' :\n                    try {\n                        Float f = NumberUtils.createFloat(numeric);\n                        if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                            //If it's too big for a float or the float value = 0 and the string\n                            //has non-zeros in it, then float does not have the precision we want\n                            return f;\n                        }\n\n                    } catch (NumberFormatException nfe) { // NOPMD\n                        // ignore the bad number\n                    }\n                    //$FALL-THROUGH$\n                case 'd' :\n                case 'D' :\n                    try {\n                        Double d = NumberUtils.createDouble(numeric);\n                        if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {\n                            return d;\n                        }\n                    } catch (NumberFormatException nfe) { // NOPMD\n                        // ignore the bad number\n                    }\n                    try {\n                        return createBigDecimal(numeric);\n                    } catch (NumberFormatException e) { // NOPMD\n                        // ignore the bad number\n                    }\n                    //$FALL-THROUGH$\n                default :\n                    throw new NumberFormatException(str + \" is not a valid number.\");\n\n            }",
      "info" : "SwitchStatement[17926-20084]:SwitchStatement[17855-20013]"
    }, {
      "left" : "case 'l' :",
      "right" : "case 'l' :",
      "info" : "SwitchCase[17962-17972]:SwitchCase[17891-17901]"
    }, {
      "left" : "case 'L' :",
      "right" : "case 'L' :",
      "info" : "SwitchCase[17989-17999]:SwitchCase[17918-17928]"
    }, {
      "left" : "if (dec == null\n                        && exp == null\n                        && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric)))",
      "right" : "if (dec == null\n                        && exp == null\n                        && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric)))",
      "info" : "IfStatement[18020-18500]:IfStatement[17949-18429]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18185-18500]:Block[18114-18429]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[18211-18419]:TryStatement[18140-18348]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18215-18298]:Block[18144-18227]"
    }, {
      "left" : "return createLong(numeric);",
      "right" : "return createLong(numeric);",
      "info" : "ReturnStatement[18245-18272]:ReturnStatement[18174-18201]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18333-18419]:Block[18262-18348]"
    }, {
      "left" : "return createBigInteger(numeric);",
      "right" : "return createBigInteger(numeric);",
      "info" : "ReturnStatement[18444-18477]:ReturnStatement[18373-18406]"
    }, {
      "left" : "throw new NumberFormatException(str + \" is not a valid number.\");",
      "right" : "throw new NumberFormatException(str + \" is not a valid number.\");",
      "info" : "ThrowStatement[18521-18586]:ThrowStatement[18450-18515]"
    }, {
      "left" : "case 'f' :",
      "right" : "case 'f' :",
      "info" : "SwitchCase[18603-18613]:SwitchCase[18532-18542]"
    }, {
      "left" : "case 'F' :",
      "right" : "case 'F' :",
      "info" : "SwitchCase[18630-18640]:SwitchCase[18559-18569]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[18661-19221]:TryStatement[18590-19150]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18665-19105]:Block[18594-19034]"
    }, {
      "left" : "Float f = NumberUtils.createFloat(numeric);",
      "right" : "Float f = NumberUtils.createFloat(numeric);",
      "info" : "VariableDeclarationStatement[18691-18734]:VariableDeclarationStatement[18620-18663]"
    }, {
      "left" : "if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros)))",
      "right" : "if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros)))",
      "info" : "IfStatement[18759-19082]:IfStatement[18688-19011]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18823-19082]:Block[18752-19011]"
    }, {
      "left" : "return f;",
      "right" : "return f;",
      "info" : "ReturnStatement[19047-19056]:ReturnStatement[18976-18985]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19140-19221]:Block[19069-19150]"
    }, {
      "left" : "case 'd' :",
      "right" : "case 'd' :",
      "info" : "SwitchCase[19275-19285]:SwitchCase[19204-19214]"
    }, {
      "left" : "case 'D' :",
      "right" : "case 'D' :",
      "info" : "SwitchCase[19302-19312]:SwitchCase[19231-19241]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[19333-19700]:TryStatement[19262-19629]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19337-19584]:Block[19266-19513]"
    }, {
      "left" : "Double d = NumberUtils.createDouble(numeric);",
      "right" : "Double d = NumberUtils.createDouble(numeric);",
      "info" : "VariableDeclarationStatement[19363-19408]:VariableDeclarationStatement[19292-19337]"
    }, {
      "left" : "if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros)))",
      "right" : "if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros)))",
      "info" : "IfStatement[19433-19562]:IfStatement[19362-19491]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19497-19562]:Block[19426-19491]"
    }, {
      "left" : "return d;",
      "right" : "return d;",
      "info" : "ReturnStatement[19527-19536]:ReturnStatement[19456-19465]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19619-19700]:Block[19548-19629]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[19721-19920]:TryStatement[19650-19849]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19725-19806]:Block[19654-19735]"
    }, {
      "left" : "return createBigDecimal(numeric);",
      "right" : "return createBigDecimal(numeric);",
      "info" : "ReturnStatement[19751-19784]:ReturnStatement[19680-19713]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19839-19920]:Block[19768-19849]"
    }, {
      "left" : "default :",
      "right" : "default :",
      "info" : "SwitchCase[19974-19983]:SwitchCase[19903-19912]"
    }, {
      "left" : "throw new NumberFormatException(str + \" is not a valid number.\");",
      "right" : "throw new NumberFormatException(str + \" is not a valid number.\");",
      "info" : "ThrowStatement[20004-20069]:ThrowStatement[19933-19998]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20100-21825]:Block[20029-21754]"
    }, {
      "left" : "if (expPos > -1 && expPos < str.length() - 1)",
      "right" : "if (expPos > -1 && expPos < str.length() - 1)",
      "info" : "IfStatement[20235-20408]:IfStatement[20164-20337]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20281-20359]:Block[20210-20288]"
    }, {
      "left" : "exp = str.substring(expPos + 1, str.length());",
      "right" : "exp = str.substring(expPos + 1, str.length());",
      "info" : "ExpressionStatement[20299-20345]:ExpressionStatement[20228-20274]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20365-20408]:Block[20294-20337]"
    }, {
      "left" : "exp = null;",
      "right" : "exp = null;",
      "info" : "ExpressionStatement[20383-20394]:ExpressionStatement[20312-20323]"
    }, {
      "left" : "if (dec == null && exp == null)",
      "right" : "if (dec == null && exp == null)",
      "info" : "IfStatement[20421-21815]:IfStatement[20350-21744]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20453-20947]:Block[20382-20876]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[20516-20694]:TryStatement[20445-20623]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20520-20586]:Block[20449-20515]"
    }, {
      "left" : "return createInteger(str);",
      "right" : "return createInteger(str);",
      "info" : "ReturnStatement[20542-20568]:ReturnStatement[20471-20497]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20621-20694]:Block[20550-20623]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[20711-20886]:TryStatement[20640-20815]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20715-20778]:Block[20644-20707]"
    }, {
      "left" : "return createLong(str);",
      "right" : "return createLong(str);",
      "info" : "ReturnStatement[20737-20760]:ReturnStatement[20666-20689]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20813-20886]:Block[20742-20815]"
    }, {
      "left" : "return createBigInteger(str);",
      "right" : "return createBigInteger(str);",
      "info" : "ReturnStatement[20903-20932]:ReturnStatement[20832-20861]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20953-21815]:Block[20882-21744]"
    }, {
      "left" : "boolean allZeros = isAllZeros(mant) && isAllZeros(exp);",
      "right" : "boolean allZeros = isAllZeros(mant) && isAllZeros(exp);",
      "info" : "VariableDeclarationStatement[21019-21074]:VariableDeclarationStatement[20948-21003]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[21091-21412]:TryStatement[21020-21341]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21095-21304]:Block[21024-21233]"
    }, {
      "left" : "Float f = createFloat(str);",
      "right" : "Float f = createFloat(str);",
      "info" : "VariableDeclarationStatement[21117-21144]:VariableDeclarationStatement[21046-21073]"
    }, {
      "left" : "if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros)))",
      "right" : "if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros)))",
      "info" : "IfStatement[21165-21286]:IfStatement[21094-21215]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21229-21286]:Block[21158-21215]"
    }, {
      "left" : "return f;",
      "right" : "return f;",
      "info" : "ReturnStatement[21255-21264]:ReturnStatement[21184-21193]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21339-21412]:Block[21268-21341]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[21429-21753]:TryStatement[21358-21682]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21433-21645]:Block[21362-21574]"
    }, {
      "left" : "Double d = createDouble(str);",
      "right" : "Double d = createDouble(str);",
      "info" : "VariableDeclarationStatement[21455-21484]:VariableDeclarationStatement[21384-21413]"
    }, {
      "left" : "if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros)))",
      "right" : "if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros)))",
      "info" : "IfStatement[21505-21627]:IfStatement[21434-21556]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21570-21627]:Block[21499-21556]"
    }, {
      "left" : "return d;",
      "right" : "return d;",
      "info" : "ReturnStatement[21596-21605]:ReturnStatement[21525-21534]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21680-21753]:Block[21609-21682]"
    }, {
      "left" : "return createBigDecimal(str);",
      "right" : "return createBigDecimal(str);",
      "info" : "ReturnStatement[21771-21800]:ReturnStatement[21700-21729]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[22103-22110]:Modifier[22032-22039]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[22111-22117]:Modifier[22040-22046]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[22118-22125]:PrimitiveType[22047-22054]"
    }, {
      "left" : "isAllZeros",
      "right" : "isAllZeros",
      "info" : "SimpleName[22126-22136]:SimpleName[22055-22065]"
    }, {
      "left" : "String str",
      "right" : "String str",
      "info" : "SingleVariableDeclaration[22137-22147]:SingleVariableDeclaration[22066-22076]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22149-22399]:Block[22078-22328]"
    }, {
      "left" : "if (str == null)",
      "right" : "if (str == null)",
      "info" : "IfStatement[22159-22212]:IfStatement[22088-22141]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22176-22212]:Block[22105-22141]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[22190-22202]:ReturnStatement[22119-22131]"
    }, {
      "left" : "for (int i = str.length() - 1; i >= 0; i--)",
      "right" : "for (int i = str.length() - 1; i >= 0; i--)",
      "info" : "ForStatement[22221-22360]:ForStatement[22150-22289]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22265-22360]:Block[22194-22289]"
    }, {
      "left" : "if (str.charAt(i) != '0')",
      "right" : "if (str.charAt(i) != '0')",
      "info" : "IfStatement[22279-22350]:IfStatement[22208-22279]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22305-22350]:Block[22234-22279]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[22323-22336]:ReturnStatement[22252-22265]"
    }, {
      "left" : "return str.length() > 0;",
      "right" : "return str.length() > 0;",
      "info" : "ReturnStatement[22369-22393]:ReturnStatement[22298-22322]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[22869-22875]:Modifier[22798-22804]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[22876-22882]:Modifier[22805-22811]"
    }, {
      "left" : "Float",
      "right" : "Float",
      "info" : "SimpleType[22883-22888]:SimpleType[22812-22817]"
    }, {
      "left" : "createFloat",
      "right" : "createFloat",
      "info" : "SimpleName[22889-22900]:SimpleName[22818-22829]"
    }, {
      "left" : "String str",
      "right" : "String str",
      "info" : "SingleVariableDeclaration[22901-22911]:SingleVariableDeclaration[22830-22840]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22913-23017]:Block[22842-22946]"
    }, {
      "left" : "if (str == null)",
      "right" : "if (str == null)",
      "info" : "IfStatement[22923-22976]:IfStatement[22852-22905]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22940-22976]:Block[22869-22905]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[22954-22966]:ReturnStatement[22883-22895]"
    }, {
      "left" : "return Float.valueOf(str);",
      "right" : "return Float.valueOf(str);",
      "info" : "ReturnStatement[22985-23011]:ReturnStatement[22914-22940]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[23411-23417]:Modifier[23340-23346]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[23418-23424]:Modifier[23347-23353]"
    }, {
      "left" : "Double",
      "right" : "Double",
      "info" : "SimpleType[23425-23431]:SimpleType[23354-23360]"
    }, {
      "left" : "createDouble",
      "right" : "createDouble",
      "info" : "SimpleName[23432-23444]:SimpleName[23361-23373]"
    }, {
      "left" : "String str",
      "right" : "String str",
      "info" : "SingleVariableDeclaration[23445-23455]:SingleVariableDeclaration[23374-23384]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23457-23562]:Block[23386-23491]"
    }, {
      "left" : "if (str == null)",
      "right" : "if (str == null)",
      "info" : "IfStatement[23467-23520]:IfStatement[23396-23449]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23484-23520]:Block[23413-23449]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[23498-23510]:ReturnStatement[23427-23439]"
    }, {
      "left" : "return Double.valueOf(str);",
      "right" : "return Double.valueOf(str);",
      "info" : "ReturnStatement[23529-23556]:ReturnStatement[23458-23485]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[23999-24005]:Modifier[23928-23934]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[24006-24012]:Modifier[23935-23941]"
    }, {
      "left" : "Integer",
      "right" : "Integer",
      "info" : "SimpleType[24013-24020]:SimpleType[23942-23949]"
    }, {
      "left" : "createInteger",
      "right" : "createInteger",
      "info" : "SimpleName[24021-24034]:SimpleName[23950-23963]"
    }, {
      "left" : "String str",
      "right" : "String str",
      "info" : "SingleVariableDeclaration[24035-24045]:SingleVariableDeclaration[23964-23974]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24047-24221]:Block[23976-24150]"
    }, {
      "left" : "if (str == null)",
      "right" : "if (str == null)",
      "info" : "IfStatement[24057-24110]:IfStatement[23986-24039]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24074-24110]:Block[24003-24039]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[24088-24100]:ReturnStatement[24017-24029]"
    }, {
      "left" : "return Integer.decode(str);",
      "right" : "return Integer.decode(str);",
      "info" : "ReturnStatement[24188-24215]:ReturnStatement[24117-24144]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[24665-24671]:Modifier[24594-24600]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[24672-24678]:Modifier[24601-24607]"
    }, {
      "left" : "Long",
      "right" : "Long",
      "info" : "SimpleType[24679-24683]:SimpleType[24608-24612]"
    }, {
      "left" : "createLong",
      "right" : "createLong",
      "info" : "SimpleName[24684-24694]:SimpleName[24613-24623]"
    }, {
      "left" : "String str",
      "right" : "String str",
      "info" : "SingleVariableDeclaration[24695-24705]:SingleVariableDeclaration[24624-24634]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24707-24809]:Block[24636-24738]"
    }, {
      "left" : "if (str == null)",
      "right" : "if (str == null)",
      "info" : "IfStatement[24717-24770]:IfStatement[24646-24699]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24734-24770]:Block[24663-24699]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[24748-24760]:ReturnStatement[24677-24689]"
    }, {
      "left" : "return Long.decode(str);",
      "right" : "return Long.decode(str);",
      "info" : "ReturnStatement[24779-24803]:ReturnStatement[24708-24732]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[25211-25217]:Modifier[25140-25146]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[25218-25224]:Modifier[25147-25153]"
    }, {
      "left" : "BigInteger",
      "right" : "BigInteger",
      "info" : "SimpleType[25225-25235]:SimpleType[25154-25164]"
    }, {
      "left" : "createBigInteger",
      "right" : "createBigInteger",
      "info" : "SimpleName[25236-25252]:SimpleName[25165-25181]"
    }, {
      "left" : "String str",
      "right" : "String str",
      "info" : "SingleVariableDeclaration[25253-25263]:SingleVariableDeclaration[25182-25192]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25265-25370]:Block[25194-25299]"
    }, {
      "left" : "if (str == null)",
      "right" : "if (str == null)",
      "info" : "IfStatement[25275-25328]:IfStatement[25204-25257]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25292-25328]:Block[25221-25257]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[25306-25318]:ReturnStatement[25235-25247]"
    }, {
      "left" : "return new BigInteger(str);",
      "right" : "return new BigInteger(str);",
      "info" : "ReturnStatement[25337-25364]:ReturnStatement[25266-25293]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[25772-25778]:Modifier[25701-25707]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[25779-25785]:Modifier[25708-25714]"
    }, {
      "left" : "BigDecimal",
      "right" : "BigDecimal",
      "info" : "SimpleType[25786-25796]:SimpleType[25715-25725]"
    }, {
      "left" : "createBigDecimal",
      "right" : "createBigDecimal",
      "info" : "SimpleName[25797-25813]:SimpleName[25726-25742]"
    }, {
      "left" : "String str",
      "right" : "String str",
      "info" : "SingleVariableDeclaration[25814-25824]:SingleVariableDeclaration[25743-25753]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25826-26386]:Block[25755-26446]"
    }, {
      "left" : "if (str == null)",
      "right" : "if (str == null)",
      "info" : "IfStatement[25836-25889]:IfStatement[25765-25818]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25853-25889]:Block[25782-25818]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[25867-25879]:ReturnStatement[25796-25808]"
    }, {
      "left" : "if (StringUtils.isBlank(str))",
      "right" : "if (StringUtils.isBlank(str))",
      "info" : "IfStatement[25971-26097]:IfStatement[25900-26026]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26001-26097]:Block[25930-26026]"
    }, {
      "left" : "throw new NumberFormatException(\"A blank string is not a valid number\");",
      "right" : "throw new NumberFormatException(\"A blank string is not a valid number\");",
      "info" : "ThrowStatement[26015-26087]:ThrowStatement[25944-26016]"
    }, {
      "left" : "return new BigDecimal(str);",
      "right" : "return new BigDecimal(str);",
      "info" : "ReturnStatement[26353-26380]:ReturnStatement[26413-26440]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[26821-26827]:Modifier[26881-26887]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[26828-26834]:Modifier[26888-26894]"
    }, {
      "left" : "long",
      "right" : "long",
      "info" : "PrimitiveType[26835-26839]:PrimitiveType[26895-26899]"
    }, {
      "left" : "min",
      "right" : "min",
      "info" : "SimpleName[26840-26843]:SimpleName[26900-26903]"
    }, {
      "left" : "long[] array",
      "right" : "long[] array",
      "info" : "SingleVariableDeclaration[26844-26856]:SingleVariableDeclaration[26904-26916]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26858-27354]:Block[26918-27414]"
    }, {
      "left" : "if (array == null)",
      "right" : "if (array == null)",
      "info" : "IfStatement[26895-27117]:IfStatement[26955-27177]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26914-27003]:Block[26974-27063]"
    }, {
      "left" : "throw new IllegalArgumentException(\"The Array must not be null\");",
      "right" : "throw new IllegalArgumentException(\"The Array must not be null\");",
      "info" : "ThrowStatement[26928-26993]:ThrowStatement[26988-27053]"
    }, {
      "left" : "if (array.length == 0)",
      "right" : "if (array.length == 0)",
      "info" : "IfStatement[27009-27117]:IfStatement[27069-27177]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27032-27117]:Block[27092-27177]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Array cannot be empty.\");",
      "right" : "throw new IllegalArgumentException(\"Array cannot be empty.\");",
      "info" : "ThrowStatement[27046-27107]:ThrowStatement[27106-27167]"
    }, {
      "left" : "long min = array[0];",
      "right" : "long min = array[0];",
      "info" : "VariableDeclarationStatement[27164-27184]:VariableDeclarationStatement[27224-27244]"
    }, {
      "left" : "for (int i = 1; i < array.length; i++)",
      "right" : "for (int i = 1; i < array.length; i++)",
      "info" : "ForStatement[27193-27323]:ForStatement[27253-27383]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27232-27323]:Block[27292-27383]"
    }, {
      "left" : "if (array[i] < min)",
      "right" : "if (array[i] < min)",
      "info" : "IfStatement[27246-27313]:IfStatement[27306-27373]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27266-27313]:Block[27326-27373]"
    }, {
      "left" : "min = array[i];",
      "right" : "min = array[i];",
      "info" : "ExpressionStatement[27284-27299]:ExpressionStatement[27344-27359]"
    }, {
      "left" : "return min;",
      "right" : "return min;",
      "info" : "ReturnStatement[27337-27348]:ReturnStatement[27397-27408]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[27694-27700]:Modifier[27754-27760]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[27701-27707]:Modifier[27761-27767]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[27708-27711]:PrimitiveType[27768-27771]"
    }, {
      "left" : "min",
      "right" : "min",
      "info" : "SimpleName[27712-27715]:SimpleName[27772-27775]"
    }, {
      "left" : "int[] array",
      "right" : "int[] array",
      "info" : "SingleVariableDeclaration[27716-27727]:SingleVariableDeclaration[27776-27787]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27729-28224]:Block[27789-28284]"
    }, {
      "left" : "if (array == null)",
      "right" : "if (array == null)",
      "info" : "IfStatement[27766-27988]:IfStatement[27826-28048]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27785-27874]:Block[27845-27934]"
    }, {
      "left" : "throw new IllegalArgumentException(\"The Array must not be null\");",
      "right" : "throw new IllegalArgumentException(\"The Array must not be null\");",
      "info" : "ThrowStatement[27799-27864]:ThrowStatement[27859-27924]"
    }, {
      "left" : "if (array.length == 0)",
      "right" : "if (array.length == 0)",
      "info" : "IfStatement[27880-27988]:IfStatement[27940-28048]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27903-27988]:Block[27963-28048]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Array cannot be empty.\");",
      "right" : "throw new IllegalArgumentException(\"Array cannot be empty.\");",
      "info" : "ThrowStatement[27917-27978]:ThrowStatement[27977-28038]"
    }, {
      "left" : "int min = array[0];",
      "right" : "int min = array[0];",
      "info" : "VariableDeclarationStatement[28035-28054]:VariableDeclarationStatement[28095-28114]"
    }, {
      "left" : "for (int j = 1; j < array.length; j++)",
      "right" : "for (int j = 1; j < array.length; j++)",
      "info" : "ForStatement[28063-28193]:ForStatement[28123-28253]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28102-28193]:Block[28162-28253]"
    }, {
      "left" : "if (array[j] < min)",
      "right" : "if (array[j] < min)",
      "info" : "IfStatement[28116-28183]:IfStatement[28176-28243]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28136-28183]:Block[28196-28243]"
    }, {
      "left" : "min = array[j];",
      "right" : "min = array[j];",
      "info" : "ExpressionStatement[28154-28169]:ExpressionStatement[28214-28229]"
    }, {
      "left" : "return min;",
      "right" : "return min;",
      "info" : "ReturnStatement[28207-28218]:ReturnStatement[28267-28278]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[28564-28570]:Modifier[28624-28630]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[28571-28577]:Modifier[28631-28637]"
    }, {
      "left" : "short",
      "right" : "short",
      "info" : "PrimitiveType[28578-28583]:PrimitiveType[28638-28643]"
    }, {
      "left" : "min",
      "right" : "min",
      "info" : "SimpleName[28584-28587]:SimpleName[28644-28647]"
    }, {
      "left" : "short[] array",
      "right" : "short[] array",
      "info" : "SingleVariableDeclaration[28588-28601]:SingleVariableDeclaration[28648-28661]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28603-29100]:Block[28663-29160]"
    }, {
      "left" : "if (array == null)",
      "right" : "if (array == null)",
      "info" : "IfStatement[28640-28862]:IfStatement[28700-28922]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28659-28748]:Block[28719-28808]"
    }, {
      "left" : "throw new IllegalArgumentException(\"The Array must not be null\");",
      "right" : "throw new IllegalArgumentException(\"The Array must not be null\");",
      "info" : "ThrowStatement[28673-28738]:ThrowStatement[28733-28798]"
    }, {
      "left" : "if (array.length == 0)",
      "right" : "if (array.length == 0)",
      "info" : "IfStatement[28754-28862]:IfStatement[28814-28922]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28777-28862]:Block[28837-28922]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Array cannot be empty.\");",
      "right" : "throw new IllegalArgumentException(\"Array cannot be empty.\");",
      "info" : "ThrowStatement[28791-28852]:ThrowStatement[28851-28912]"
    }, {
      "left" : "short min = array[0];",
      "right" : "short min = array[0];",
      "info" : "VariableDeclarationStatement[28909-28930]:VariableDeclarationStatement[28969-28990]"
    }, {
      "left" : "for (int i = 1; i < array.length; i++)",
      "right" : "for (int i = 1; i < array.length; i++)",
      "info" : "ForStatement[28939-29069]:ForStatement[28999-29129]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28978-29069]:Block[29038-29129]"
    }, {
      "left" : "if (array[i] < min)",
      "right" : "if (array[i] < min)",
      "info" : "IfStatement[28992-29059]:IfStatement[29052-29119]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29012-29059]:Block[29072-29119]"
    }, {
      "left" : "min = array[i];",
      "right" : "min = array[i];",
      "info" : "ExpressionStatement[29030-29045]:ExpressionStatement[29090-29105]"
    }, {
      "left" : "return min;",
      "right" : "return min;",
      "info" : "ReturnStatement[29083-29094]:ReturnStatement[29143-29154]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[29440-29446]:Modifier[29500-29506]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[29447-29453]:Modifier[29507-29513]"
    }, {
      "left" : "byte",
      "right" : "byte",
      "info" : "PrimitiveType[29454-29458]:PrimitiveType[29514-29518]"
    }, {
      "left" : "min",
      "right" : "min",
      "info" : "SimpleName[29459-29462]:SimpleName[29519-29522]"
    }, {
      "left" : "byte[] array",
      "right" : "byte[] array",
      "info" : "SingleVariableDeclaration[29463-29475]:SingleVariableDeclaration[29523-29535]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29477-29973]:Block[29537-30033]"
    }, {
      "left" : "if (array == null)",
      "right" : "if (array == null)",
      "info" : "IfStatement[29514-29736]:IfStatement[29574-29796]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29533-29622]:Block[29593-29682]"
    }, {
      "left" : "throw new IllegalArgumentException(\"The Array must not be null\");",
      "right" : "throw new IllegalArgumentException(\"The Array must not be null\");",
      "info" : "ThrowStatement[29547-29612]:ThrowStatement[29607-29672]"
    }, {
      "left" : "if (array.length == 0)",
      "right" : "if (array.length == 0)",
      "info" : "IfStatement[29628-29736]:IfStatement[29688-29796]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29651-29736]:Block[29711-29796]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Array cannot be empty.\");",
      "right" : "throw new IllegalArgumentException(\"Array cannot be empty.\");",
      "info" : "ThrowStatement[29665-29726]:ThrowStatement[29725-29786]"
    }, {
      "left" : "byte min = array[0];",
      "right" : "byte min = array[0];",
      "info" : "VariableDeclarationStatement[29783-29803]:VariableDeclarationStatement[29843-29863]"
    }, {
      "left" : "for (int i = 1; i < array.length; i++)",
      "right" : "for (int i = 1; i < array.length; i++)",
      "info" : "ForStatement[29812-29942]:ForStatement[29872-30002]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29851-29942]:Block[29911-30002]"
    }, {
      "left" : "if (array[i] < min)",
      "right" : "if (array[i] < min)",
      "info" : "IfStatement[29865-29932]:IfStatement[29925-29992]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29885-29932]:Block[29945-29992]"
    }, {
      "left" : "min = array[i];",
      "right" : "min = array[i];",
      "info" : "ExpressionStatement[29903-29918]:ExpressionStatement[29963-29978]"
    }, {
      "left" : "return min;",
      "right" : "return min;",
      "info" : "ReturnStatement[29956-29967]:ReturnStatement[30016-30027]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[30426-30432]:Modifier[30486-30492]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[30433-30439]:Modifier[30493-30499]"
    }, {
      "left" : "double",
      "right" : "double",
      "info" : "PrimitiveType[30440-30446]:PrimitiveType[30500-30506]"
    }, {
      "left" : "min",
      "right" : "min",
      "info" : "SimpleName[30447-30450]:SimpleName[30507-30510]"
    }, {
      "left" : "double[] array",
      "right" : "double[] array",
      "info" : "SingleVariableDeclaration[30451-30465]:SingleVariableDeclaration[30511-30525]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30467-31056]:Block[30527-31116]"
    }, {
      "left" : "if (array == null)",
      "right" : "if (array == null)",
      "info" : "IfStatement[30504-30726]:IfStatement[30564-30786]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30523-30612]:Block[30583-30672]"
    }, {
      "left" : "throw new IllegalArgumentException(\"The Array must not be null\");",
      "right" : "throw new IllegalArgumentException(\"The Array must not be null\");",
      "info" : "ThrowStatement[30537-30602]:ThrowStatement[30597-30662]"
    }, {
      "left" : "if (array.length == 0)",
      "right" : "if (array.length == 0)",
      "info" : "IfStatement[30618-30726]:IfStatement[30678-30786]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30641-30726]:Block[30701-30786]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Array cannot be empty.\");",
      "right" : "throw new IllegalArgumentException(\"Array cannot be empty.\");",
      "info" : "ThrowStatement[30655-30716]:ThrowStatement[30715-30776]"
    }, {
      "left" : "double min = array[0];",
      "right" : "double min = array[0];",
      "info" : "VariableDeclarationStatement[30773-30795]:VariableDeclarationStatement[30833-30855]"
    }, {
      "left" : "for (int i = 1; i < array.length; i++)",
      "right" : "for (int i = 1; i < array.length; i++)",
      "info" : "ForStatement[30804-31025]:ForStatement[30864-31085]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30843-31025]:Block[30903-31085]"
    }, {
      "left" : "if (Double.isNaN(array[i]))",
      "right" : "if (Double.isNaN(array[i]))",
      "info" : "IfStatement[30857-30935]:IfStatement[30917-30995]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30885-30935]:Block[30945-30995]"
    }, {
      "left" : "return Double.NaN;",
      "right" : "return Double.NaN;",
      "info" : "ReturnStatement[30903-30921]:ReturnStatement[30963-30981]"
    }, {
      "left" : "if (array[i] < min)",
      "right" : "if (array[i] < min)",
      "info" : "IfStatement[30948-31015]:IfStatement[31008-31075]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30968-31015]:Block[31028-31075]"
    }, {
      "left" : "min = array[i];",
      "right" : "min = array[i];",
      "info" : "ExpressionStatement[30986-31001]:ExpressionStatement[31046-31061]"
    }, {
      "left" : "return min;",
      "right" : "return min;",
      "info" : "ReturnStatement[31039-31050]:ReturnStatement[31099-31110]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[31507-31513]:Modifier[31567-31573]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[31514-31520]:Modifier[31574-31580]"
    }, {
      "left" : "float",
      "right" : "float",
      "info" : "PrimitiveType[31521-31526]:PrimitiveType[31581-31586]"
    }, {
      "left" : "min",
      "right" : "min",
      "info" : "SimpleName[31527-31530]:SimpleName[31587-31590]"
    }, {
      "left" : "float[] array",
      "right" : "float[] array",
      "info" : "SingleVariableDeclaration[31531-31544]:SingleVariableDeclaration[31591-31604]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31546-32132]:Block[31606-32192]"
    }, {
      "left" : "if (array == null)",
      "right" : "if (array == null)",
      "info" : "IfStatement[31583-31805]:IfStatement[31643-31865]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31602-31691]:Block[31662-31751]"
    }, {
      "left" : "throw new IllegalArgumentException(\"The Array must not be null\");",
      "right" : "throw new IllegalArgumentException(\"The Array must not be null\");",
      "info" : "ThrowStatement[31616-31681]:ThrowStatement[31676-31741]"
    }, {
      "left" : "if (array.length == 0)",
      "right" : "if (array.length == 0)",
      "info" : "IfStatement[31697-31805]:IfStatement[31757-31865]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31720-31805]:Block[31780-31865]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Array cannot be empty.\");",
      "right" : "throw new IllegalArgumentException(\"Array cannot be empty.\");",
      "info" : "ThrowStatement[31734-31795]:ThrowStatement[31794-31855]"
    }, {
      "left" : "float min = array[0];",
      "right" : "float min = array[0];",
      "info" : "VariableDeclarationStatement[31852-31873]:VariableDeclarationStatement[31912-31933]"
    }, {
      "left" : "for (int i = 1; i < array.length; i++)",
      "right" : "for (int i = 1; i < array.length; i++)",
      "info" : "ForStatement[31882-32101]:ForStatement[31942-32161]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31921-32101]:Block[31981-32161]"
    }, {
      "left" : "if (Float.isNaN(array[i]))",
      "right" : "if (Float.isNaN(array[i]))",
      "info" : "IfStatement[31935-32011]:IfStatement[31995-32071]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31962-32011]:Block[32022-32071]"
    }, {
      "left" : "return Float.NaN;",
      "right" : "return Float.NaN;",
      "info" : "ReturnStatement[31980-31997]:ReturnStatement[32040-32057]"
    }, {
      "left" : "if (array[i] < min)",
      "right" : "if (array[i] < min)",
      "info" : "IfStatement[32024-32091]:IfStatement[32084-32151]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32044-32091]:Block[32104-32151]"
    }, {
      "left" : "min = array[i];",
      "right" : "min = array[i];",
      "info" : "ExpressionStatement[32062-32077]:ExpressionStatement[32122-32137]"
    }, {
      "left" : "return min;",
      "right" : "return min;",
      "info" : "ReturnStatement[32115-32126]:ReturnStatement[32175-32186]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[32567-32573]:Modifier[32627-32633]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[32574-32580]:Modifier[32634-32640]"
    }, {
      "left" : "long",
      "right" : "long",
      "info" : "PrimitiveType[32581-32585]:PrimitiveType[32641-32645]"
    }, {
      "left" : "max",
      "right" : "max",
      "info" : "SimpleName[32586-32589]:SimpleName[32646-32649]"
    }, {
      "left" : "long[] array",
      "right" : "long[] array",
      "info" : "SingleVariableDeclaration[32590-32602]:SingleVariableDeclaration[32650-32662]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32604-33092]:Block[32664-33152]"
    }, {
      "left" : "if (array == null)",
      "right" : "if (array == null)",
      "info" : "IfStatement[32641-32863]:IfStatement[32701-32923]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32660-32749]:Block[32720-32809]"
    }, {
      "left" : "throw new IllegalArgumentException(\"The Array must not be null\");",
      "right" : "throw new IllegalArgumentException(\"The Array must not be null\");",
      "info" : "ThrowStatement[32674-32739]:ThrowStatement[32734-32799]"
    }, {
      "left" : "if (array.length == 0)",
      "right" : "if (array.length == 0)",
      "info" : "IfStatement[32755-32863]:IfStatement[32815-32923]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32778-32863]:Block[32838-32923]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Array cannot be empty.\");",
      "right" : "throw new IllegalArgumentException(\"Array cannot be empty.\");",
      "info" : "ThrowStatement[32792-32853]:ThrowStatement[32852-32913]"
    }, {
      "left" : "long max = array[0];",
      "right" : "long max = array[0];",
      "info" : "VariableDeclarationStatement[32906-32926]:VariableDeclarationStatement[32966-32986]"
    }, {
      "left" : "for (int j = 1; j < array.length; j++)",
      "right" : "for (int j = 1; j < array.length; j++)",
      "info" : "ForStatement[32935-33065]:ForStatement[32995-33125]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32974-33065]:Block[33034-33125]"
    }, {
      "left" : "if (array[j] > max)",
      "right" : "if (array[j] > max)",
      "info" : "IfStatement[32988-33055]:IfStatement[33048-33115]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33008-33055]:Block[33068-33115]"
    }, {
      "left" : "max = array[j];",
      "right" : "max = array[j];",
      "info" : "ExpressionStatement[33026-33041]:ExpressionStatement[33086-33101]"
    }, {
      "left" : "return max;",
      "right" : "return max;",
      "info" : "ReturnStatement[33075-33086]:ReturnStatement[33135-33146]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[33432-33438]:Modifier[33492-33498]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[33439-33445]:Modifier[33499-33505]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[33446-33449]:PrimitiveType[33506-33509]"
    }, {
      "left" : "max",
      "right" : "max",
      "info" : "SimpleName[33450-33453]:SimpleName[33510-33513]"
    }, {
      "left" : "int[] array",
      "right" : "int[] array",
      "info" : "SingleVariableDeclaration[33454-33465]:SingleVariableDeclaration[33514-33525]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33467-33962]:Block[33527-34022]"
    }, {
      "left" : "if (array == null)",
      "right" : "if (array == null)",
      "info" : "IfStatement[33504-33726]:IfStatement[33564-33786]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33523-33612]:Block[33583-33672]"
    }, {
      "left" : "throw new IllegalArgumentException(\"The Array must not be null\");",
      "right" : "throw new IllegalArgumentException(\"The Array must not be null\");",
      "info" : "ThrowStatement[33537-33602]:ThrowStatement[33597-33662]"
    }, {
      "left" : "if (array.length == 0)",
      "right" : "if (array.length == 0)",
      "info" : "IfStatement[33618-33726]:IfStatement[33678-33786]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33641-33726]:Block[33701-33786]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Array cannot be empty.\");",
      "right" : "throw new IllegalArgumentException(\"Array cannot be empty.\");",
      "info" : "ThrowStatement[33655-33716]:ThrowStatement[33715-33776]"
    }, {
      "left" : "int max = array[0];",
      "right" : "int max = array[0];",
      "info" : "VariableDeclarationStatement[33773-33792]:VariableDeclarationStatement[33833-33852]"
    }, {
      "left" : "for (int j = 1; j < array.length; j++)",
      "right" : "for (int j = 1; j < array.length; j++)",
      "info" : "ForStatement[33801-33931]:ForStatement[33861-33991]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33840-33931]:Block[33900-33991]"
    }, {
      "left" : "if (array[j] > max)",
      "right" : "if (array[j] > max)",
      "info" : "IfStatement[33854-33921]:IfStatement[33914-33981]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33874-33921]:Block[33934-33981]"
    }, {
      "left" : "max = array[j];",
      "right" : "max = array[j];",
      "info" : "ExpressionStatement[33892-33907]:ExpressionStatement[33952-33967]"
    }, {
      "left" : "return max;",
      "right" : "return max;",
      "info" : "ReturnStatement[33945-33956]:ReturnStatement[34005-34016]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[34302-34308]:Modifier[34362-34368]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[34309-34315]:Modifier[34369-34375]"
    }, {
      "left" : "short",
      "right" : "short",
      "info" : "PrimitiveType[34316-34321]:PrimitiveType[34376-34381]"
    }, {
      "left" : "max",
      "right" : "max",
      "info" : "SimpleName[34322-34325]:SimpleName[34382-34385]"
    }, {
      "left" : "short[] array",
      "right" : "short[] array",
      "info" : "SingleVariableDeclaration[34326-34339]:SingleVariableDeclaration[34386-34399]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34341-34838]:Block[34401-34898]"
    }, {
      "left" : "if (array == null)",
      "right" : "if (array == null)",
      "info" : "IfStatement[34378-34600]:IfStatement[34438-34660]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34397-34486]:Block[34457-34546]"
    }, {
      "left" : "throw new IllegalArgumentException(\"The Array must not be null\");",
      "right" : "throw new IllegalArgumentException(\"The Array must not be null\");",
      "info" : "ThrowStatement[34411-34476]:ThrowStatement[34471-34536]"
    }, {
      "left" : "if (array.length == 0)",
      "right" : "if (array.length == 0)",
      "info" : "IfStatement[34492-34600]:IfStatement[34552-34660]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34515-34600]:Block[34575-34660]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Array cannot be empty.\");",
      "right" : "throw new IllegalArgumentException(\"Array cannot be empty.\");",
      "info" : "ThrowStatement[34529-34590]:ThrowStatement[34589-34650]"
    }, {
      "left" : "short max = array[0];",
      "right" : "short max = array[0];",
      "info" : "VariableDeclarationStatement[34647-34668]:VariableDeclarationStatement[34707-34728]"
    }, {
      "left" : "for (int i = 1; i < array.length; i++)",
      "right" : "for (int i = 1; i < array.length; i++)",
      "info" : "ForStatement[34677-34807]:ForStatement[34737-34867]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34716-34807]:Block[34776-34867]"
    }, {
      "left" : "if (array[i] > max)",
      "right" : "if (array[i] > max)",
      "info" : "IfStatement[34730-34797]:IfStatement[34790-34857]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34750-34797]:Block[34810-34857]"
    }, {
      "left" : "max = array[i];",
      "right" : "max = array[i];",
      "info" : "ExpressionStatement[34768-34783]:ExpressionStatement[34828-34843]"
    }, {
      "left" : "return max;",
      "right" : "return max;",
      "info" : "ReturnStatement[34821-34832]:ReturnStatement[34881-34892]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[35178-35184]:Modifier[35238-35244]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[35185-35191]:Modifier[35245-35251]"
    }, {
      "left" : "byte",
      "right" : "byte",
      "info" : "PrimitiveType[35192-35196]:PrimitiveType[35252-35256]"
    }, {
      "left" : "max",
      "right" : "max",
      "info" : "SimpleName[35197-35200]:SimpleName[35257-35260]"
    }, {
      "left" : "byte[] array",
      "right" : "byte[] array",
      "info" : "SingleVariableDeclaration[35201-35213]:SingleVariableDeclaration[35261-35273]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35215-35711]:Block[35275-35771]"
    }, {
      "left" : "if (array == null)",
      "right" : "if (array == null)",
      "info" : "IfStatement[35252-35474]:IfStatement[35312-35534]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35271-35360]:Block[35331-35420]"
    }, {
      "left" : "throw new IllegalArgumentException(\"The Array must not be null\");",
      "right" : "throw new IllegalArgumentException(\"The Array must not be null\");",
      "info" : "ThrowStatement[35285-35350]:ThrowStatement[35345-35410]"
    }, {
      "left" : "if (array.length == 0)",
      "right" : "if (array.length == 0)",
      "info" : "IfStatement[35366-35474]:IfStatement[35426-35534]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35389-35474]:Block[35449-35534]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Array cannot be empty.\");",
      "right" : "throw new IllegalArgumentException(\"Array cannot be empty.\");",
      "info" : "ThrowStatement[35403-35464]:ThrowStatement[35463-35524]"
    }, {
      "left" : "byte max = array[0];",
      "right" : "byte max = array[0];",
      "info" : "VariableDeclarationStatement[35521-35541]:VariableDeclarationStatement[35581-35601]"
    }, {
      "left" : "for (int i = 1; i < array.length; i++)",
      "right" : "for (int i = 1; i < array.length; i++)",
      "info" : "ForStatement[35550-35680]:ForStatement[35610-35740]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35589-35680]:Block[35649-35740]"
    }, {
      "left" : "if (array[i] > max)",
      "right" : "if (array[i] > max)",
      "info" : "IfStatement[35603-35670]:IfStatement[35663-35730]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35623-35670]:Block[35683-35730]"
    }, {
      "left" : "max = array[i];",
      "right" : "max = array[i];",
      "info" : "ExpressionStatement[35641-35656]:ExpressionStatement[35701-35716]"
    }, {
      "left" : "return max;",
      "right" : "return max;",
      "info" : "ReturnStatement[35694-35705]:ReturnStatement[35754-35765]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[36163-36169]:Modifier[36223-36229]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[36170-36176]:Modifier[36230-36236]"
    }, {
      "left" : "double",
      "right" : "double",
      "info" : "PrimitiveType[36177-36183]:PrimitiveType[36237-36243]"
    }, {
      "left" : "max",
      "right" : "max",
      "info" : "SimpleName[36184-36187]:SimpleName[36244-36247]"
    }, {
      "left" : "double[] array",
      "right" : "double[] array",
      "info" : "SingleVariableDeclaration[36188-36202]:SingleVariableDeclaration[36248-36262]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36204-36792]:Block[36264-36852]"
    }, {
      "left" : "if (array== null)",
      "right" : "if (array== null)",
      "info" : "IfStatement[36241-36462]:IfStatement[36301-36522]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36259-36348]:Block[36319-36408]"
    }, {
      "left" : "throw new IllegalArgumentException(\"The Array must not be null\");",
      "right" : "throw new IllegalArgumentException(\"The Array must not be null\");",
      "info" : "ThrowStatement[36273-36338]:ThrowStatement[36333-36398]"
    }, {
      "left" : "if (array.length == 0)",
      "right" : "if (array.length == 0)",
      "info" : "IfStatement[36354-36462]:IfStatement[36414-36522]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36377-36462]:Block[36437-36522]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Array cannot be empty.\");",
      "right" : "throw new IllegalArgumentException(\"Array cannot be empty.\");",
      "info" : "ThrowStatement[36391-36452]:ThrowStatement[36451-36512]"
    }, {
      "left" : "double max = array[0];",
      "right" : "double max = array[0];",
      "info" : "VariableDeclarationStatement[36509-36531]:VariableDeclarationStatement[36569-36591]"
    }, {
      "left" : "for (int j = 1; j < array.length; j++)",
      "right" : "for (int j = 1; j < array.length; j++)",
      "info" : "ForStatement[36540-36761]:ForStatement[36600-36821]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36579-36761]:Block[36639-36821]"
    }, {
      "left" : "if (Double.isNaN(array[j]))",
      "right" : "if (Double.isNaN(array[j]))",
      "info" : "IfStatement[36593-36671]:IfStatement[36653-36731]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36621-36671]:Block[36681-36731]"
    }, {
      "left" : "return Double.NaN;",
      "right" : "return Double.NaN;",
      "info" : "ReturnStatement[36639-36657]:ReturnStatement[36699-36717]"
    }, {
      "left" : "if (array[j] > max)",
      "right" : "if (array[j] > max)",
      "info" : "IfStatement[36684-36751]:IfStatement[36744-36811]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36704-36751]:Block[36764-36811]"
    }, {
      "left" : "max = array[j];",
      "right" : "max = array[j];",
      "info" : "ExpressionStatement[36722-36737]:ExpressionStatement[36782-36797]"
    }, {
      "left" : "return max;",
      "right" : "return max;",
      "info" : "ReturnStatement[36775-36786]:ReturnStatement[36835-36846]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[37243-37249]:Modifier[37303-37309]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[37250-37256]:Modifier[37310-37316]"
    }, {
      "left" : "float",
      "right" : "float",
      "info" : "PrimitiveType[37257-37262]:PrimitiveType[37317-37322]"
    }, {
      "left" : "max",
      "right" : "max",
      "info" : "SimpleName[37263-37266]:SimpleName[37323-37326]"
    }, {
      "left" : "float[] array",
      "right" : "float[] array",
      "info" : "SingleVariableDeclaration[37267-37280]:SingleVariableDeclaration[37327-37340]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37282-37860]:Block[37342-37920]"
    }, {
      "left" : "if (array == null)",
      "right" : "if (array == null)",
      "info" : "IfStatement[37319-37541]:IfStatement[37379-37601]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37338-37427]:Block[37398-37487]"
    }, {
      "left" : "throw new IllegalArgumentException(\"The Array must not be null\");",
      "right" : "throw new IllegalArgumentException(\"The Array must not be null\");",
      "info" : "ThrowStatement[37352-37417]:ThrowStatement[37412-37477]"
    }, {
      "left" : "if (array.length == 0)",
      "right" : "if (array.length == 0)",
      "info" : "IfStatement[37433-37541]:IfStatement[37493-37601]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37456-37541]:Block[37516-37601]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Array cannot be empty.\");",
      "right" : "throw new IllegalArgumentException(\"Array cannot be empty.\");",
      "info" : "ThrowStatement[37470-37531]:ThrowStatement[37530-37591]"
    }, {
      "left" : "float max = array[0];",
      "right" : "float max = array[0];",
      "info" : "VariableDeclarationStatement[37584-37605]:VariableDeclarationStatement[37644-37665]"
    }, {
      "left" : "for (int j = 1; j < array.length; j++)",
      "right" : "for (int j = 1; j < array.length; j++)",
      "info" : "ForStatement[37614-37833]:ForStatement[37674-37893]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37653-37833]:Block[37713-37893]"
    }, {
      "left" : "if (Float.isNaN(array[j]))",
      "right" : "if (Float.isNaN(array[j]))",
      "info" : "IfStatement[37667-37743]:IfStatement[37727-37803]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37694-37743]:Block[37754-37803]"
    }, {
      "left" : "return Float.NaN;",
      "right" : "return Float.NaN;",
      "info" : "ReturnStatement[37712-37729]:ReturnStatement[37772-37789]"
    }, {
      "left" : "if (array[j] > max)",
      "right" : "if (array[j] > max)",
      "info" : "IfStatement[37756-37823]:IfStatement[37816-37883]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37776-37823]:Block[37836-37883]"
    }, {
      "left" : "max = array[j];",
      "right" : "max = array[j];",
      "info" : "ExpressionStatement[37794-37809]:ExpressionStatement[37854-37869]"
    }, {
      "left" : "return max;",
      "right" : "return max;",
      "info" : "ReturnStatement[37843-37854]:ReturnStatement[37903-37914]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[38176-38182]:Modifier[38236-38242]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[38183-38189]:Modifier[38243-38249]"
    }, {
      "left" : "long",
      "right" : "long",
      "info" : "PrimitiveType[38190-38194]:PrimitiveType[38250-38254]"
    }, {
      "left" : "min",
      "right" : "min",
      "info" : "SimpleName[38195-38198]:SimpleName[38255-38258]"
    }, {
      "left" : "long a",
      "right" : "long a",
      "info" : "SingleVariableDeclaration[38199-38205]:SingleVariableDeclaration[38259-38265]"
    }, {
      "left" : "long b",
      "right" : "long b",
      "info" : "SingleVariableDeclaration[38207-38213]:SingleVariableDeclaration[38267-38273]"
    }, {
      "left" : "long c",
      "right" : "long c",
      "info" : "SingleVariableDeclaration[38215-38221]:SingleVariableDeclaration[38275-38281]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38223-38348]:Block[38283-38408]"
    }, {
      "left" : "if (b < a)",
      "right" : "if (b < a)",
      "info" : "IfStatement[38233-38274]:IfStatement[38293-38334]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38244-38274]:Block[38304-38334]"
    }, {
      "left" : "a = b;",
      "right" : "a = b;",
      "info" : "ExpressionStatement[38258-38264]:ExpressionStatement[38318-38324]"
    }, {
      "left" : "if (c < a)",
      "right" : "if (c < a)",
      "info" : "IfStatement[38283-38324]:IfStatement[38343-38384]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38294-38324]:Block[38354-38384]"
    }, {
      "left" : "a = c;",
      "right" : "a = c;",
      "info" : "ExpressionStatement[38308-38314]:ExpressionStatement[38368-38374]"
    }, {
      "left" : "return a;",
      "right" : "return a;",
      "info" : "ReturnStatement[38333-38342]:ReturnStatement[38393-38402]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[38561-38567]:Modifier[38621-38627]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[38568-38574]:Modifier[38628-38634]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[38575-38578]:PrimitiveType[38635-38638]"
    }, {
      "left" : "min",
      "right" : "min",
      "info" : "SimpleName[38579-38582]:SimpleName[38639-38642]"
    }, {
      "left" : "int a",
      "right" : "int a",
      "info" : "SingleVariableDeclaration[38583-38588]:SingleVariableDeclaration[38643-38648]"
    }, {
      "left" : "int b",
      "right" : "int b",
      "info" : "SingleVariableDeclaration[38590-38595]:SingleVariableDeclaration[38650-38655]"
    }, {
      "left" : "int c",
      "right" : "int c",
      "info" : "SingleVariableDeclaration[38597-38602]:SingleVariableDeclaration[38657-38662]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38604-38729]:Block[38664-38789]"
    }, {
      "left" : "if (b < a)",
      "right" : "if (b < a)",
      "info" : "IfStatement[38614-38655]:IfStatement[38674-38715]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38625-38655]:Block[38685-38715]"
    }, {
      "left" : "a = b;",
      "right" : "a = b;",
      "info" : "ExpressionStatement[38639-38645]:ExpressionStatement[38699-38705]"
    }, {
      "left" : "if (c < a)",
      "right" : "if (c < a)",
      "info" : "IfStatement[38664-38705]:IfStatement[38724-38765]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38675-38705]:Block[38735-38765]"
    }, {
      "left" : "a = c;",
      "right" : "a = c;",
      "info" : "ExpressionStatement[38689-38695]:ExpressionStatement[38749-38755]"
    }, {
      "left" : "return a;",
      "right" : "return a;",
      "info" : "ReturnStatement[38714-38723]:ReturnStatement[38774-38783]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[38944-38950]:Modifier[39004-39010]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[38951-38957]:Modifier[39011-39017]"
    }, {
      "left" : "short",
      "right" : "short",
      "info" : "PrimitiveType[38958-38963]:PrimitiveType[39018-39023]"
    }, {
      "left" : "min",
      "right" : "min",
      "info" : "SimpleName[38964-38967]:SimpleName[39024-39027]"
    }, {
      "left" : "short a",
      "right" : "short a",
      "info" : "SingleVariableDeclaration[38968-38975]:SingleVariableDeclaration[39028-39035]"
    }, {
      "left" : "short b",
      "right" : "short b",
      "info" : "SingleVariableDeclaration[38977-38984]:SingleVariableDeclaration[39037-39044]"
    }, {
      "left" : "short c",
      "right" : "short c",
      "info" : "SingleVariableDeclaration[38986-38993]:SingleVariableDeclaration[39046-39053]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38995-39120]:Block[39055-39180]"
    }, {
      "left" : "if (b < a)",
      "right" : "if (b < a)",
      "info" : "IfStatement[39005-39046]:IfStatement[39065-39106]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39016-39046]:Block[39076-39106]"
    }, {
      "left" : "a = b;",
      "right" : "a = b;",
      "info" : "ExpressionStatement[39030-39036]:ExpressionStatement[39090-39096]"
    }, {
      "left" : "if (c < a)",
      "right" : "if (c < a)",
      "info" : "IfStatement[39055-39096]:IfStatement[39115-39156]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39066-39096]:Block[39126-39156]"
    }, {
      "left" : "a = c;",
      "right" : "a = c;",
      "info" : "ExpressionStatement[39080-39086]:ExpressionStatement[39140-39146]"
    }, {
      "left" : "return a;",
      "right" : "return a;",
      "info" : "ReturnStatement[39105-39114]:ReturnStatement[39165-39174]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[39334-39340]:Modifier[39394-39400]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[39341-39347]:Modifier[39401-39407]"
    }, {
      "left" : "byte",
      "right" : "byte",
      "info" : "PrimitiveType[39348-39352]:PrimitiveType[39408-39412]"
    }, {
      "left" : "min",
      "right" : "min",
      "info" : "SimpleName[39353-39356]:SimpleName[39413-39416]"
    }, {
      "left" : "byte a",
      "right" : "byte a",
      "info" : "SingleVariableDeclaration[39357-39363]:SingleVariableDeclaration[39417-39423]"
    }, {
      "left" : "byte b",
      "right" : "byte b",
      "info" : "SingleVariableDeclaration[39365-39371]:SingleVariableDeclaration[39425-39431]"
    }, {
      "left" : "byte c",
      "right" : "byte c",
      "info" : "SingleVariableDeclaration[39373-39379]:SingleVariableDeclaration[39433-39439]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39381-39506]:Block[39441-39566]"
    }, {
      "left" : "if (b < a)",
      "right" : "if (b < a)",
      "info" : "IfStatement[39391-39432]:IfStatement[39451-39492]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39402-39432]:Block[39462-39492]"
    }, {
      "left" : "a = b;",
      "right" : "a = b;",
      "info" : "ExpressionStatement[39416-39422]:ExpressionStatement[39476-39482]"
    }, {
      "left" : "if (c < a)",
      "right" : "if (c < a)",
      "info" : "IfStatement[39441-39482]:IfStatement[39501-39542]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39452-39482]:Block[39512-39542]"
    }, {
      "left" : "a = c;",
      "right" : "a = c;",
      "info" : "ExpressionStatement[39466-39472]:ExpressionStatement[39526-39532]"
    }, {
      "left" : "return a;",
      "right" : "return a;",
      "info" : "ReturnStatement[39491-39500]:ReturnStatement[39551-39560]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[39948-39954]:Modifier[40008-40014]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[39955-39961]:Modifier[40015-40021]"
    }, {
      "left" : "double",
      "right" : "double",
      "info" : "PrimitiveType[39962-39968]:PrimitiveType[40022-40028]"
    }, {
      "left" : "min",
      "right" : "min",
      "info" : "SimpleName[39969-39972]:SimpleName[40029-40032]"
    }, {
      "left" : "double a",
      "right" : "double a",
      "info" : "SingleVariableDeclaration[39973-39981]:SingleVariableDeclaration[40033-40041]"
    }, {
      "left" : "double b",
      "right" : "double b",
      "info" : "SingleVariableDeclaration[39983-39991]:SingleVariableDeclaration[40043-40051]"
    }, {
      "left" : "double c",
      "right" : "double c",
      "info" : "SingleVariableDeclaration[39993-40001]:SingleVariableDeclaration[40053-40061]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40003-40054]:Block[40063-40114]"
    }, {
      "left" : "return Math.min(Math.min(a, b), c);",
      "right" : "return Math.min(Math.min(a, b), c);",
      "info" : "ReturnStatement[40013-40048]:ReturnStatement[40073-40108]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[40491-40497]:Modifier[40551-40557]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[40498-40504]:Modifier[40558-40564]"
    }, {
      "left" : "float",
      "right" : "float",
      "info" : "PrimitiveType[40505-40510]:PrimitiveType[40565-40570]"
    }, {
      "left" : "min",
      "right" : "min",
      "info" : "SimpleName[40511-40514]:SimpleName[40571-40574]"
    }, {
      "left" : "float a",
      "right" : "float a",
      "info" : "SingleVariableDeclaration[40515-40522]:SingleVariableDeclaration[40575-40582]"
    }, {
      "left" : "float b",
      "right" : "float b",
      "info" : "SingleVariableDeclaration[40524-40531]:SingleVariableDeclaration[40584-40591]"
    }, {
      "left" : "float c",
      "right" : "float c",
      "info" : "SingleVariableDeclaration[40533-40540]:SingleVariableDeclaration[40593-40600]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40542-40593]:Block[40602-40653]"
    }, {
      "left" : "return Math.min(Math.min(a, b), c);",
      "right" : "return Math.min(Math.min(a, b), c);",
      "info" : "ReturnStatement[40552-40587]:ReturnStatement[40612-40647]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[40903-40909]:Modifier[40963-40969]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[40910-40916]:Modifier[40970-40976]"
    }, {
      "left" : "long",
      "right" : "long",
      "info" : "PrimitiveType[40917-40921]:PrimitiveType[40977-40981]"
    }, {
      "left" : "max",
      "right" : "max",
      "info" : "SimpleName[40922-40925]:SimpleName[40982-40985]"
    }, {
      "left" : "long a",
      "right" : "long a",
      "info" : "SingleVariableDeclaration[40926-40932]:SingleVariableDeclaration[40986-40992]"
    }, {
      "left" : "long b",
      "right" : "long b",
      "info" : "SingleVariableDeclaration[40934-40940]:SingleVariableDeclaration[40994-41000]"
    }, {
      "left" : "long c",
      "right" : "long c",
      "info" : "SingleVariableDeclaration[40942-40948]:SingleVariableDeclaration[41002-41008]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40950-41075]:Block[41010-41135]"
    }, {
      "left" : "if (b > a)",
      "right" : "if (b > a)",
      "info" : "IfStatement[40960-41001]:IfStatement[41020-41061]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40971-41001]:Block[41031-41061]"
    }, {
      "left" : "a = b;",
      "right" : "a = b;",
      "info" : "ExpressionStatement[40985-40991]:ExpressionStatement[41045-41051]"
    }, {
      "left" : "if (c > a)",
      "right" : "if (c > a)",
      "info" : "IfStatement[41010-41051]:IfStatement[41070-41111]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41021-41051]:Block[41081-41111]"
    }, {
      "left" : "a = c;",
      "right" : "a = c;",
      "info" : "ExpressionStatement[41035-41041]:ExpressionStatement[41095-41101]"
    }, {
      "left" : "return a;",
      "right" : "return a;",
      "info" : "ReturnStatement[41060-41069]:ReturnStatement[41120-41129]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[41287-41293]:Modifier[41347-41353]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[41294-41300]:Modifier[41354-41360]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[41301-41304]:PrimitiveType[41361-41364]"
    }, {
      "left" : "max",
      "right" : "max",
      "info" : "SimpleName[41305-41308]:SimpleName[41365-41368]"
    }, {
      "left" : "int a",
      "right" : "int a",
      "info" : "SingleVariableDeclaration[41309-41314]:SingleVariableDeclaration[41369-41374]"
    }, {
      "left" : "int b",
      "right" : "int b",
      "info" : "SingleVariableDeclaration[41316-41321]:SingleVariableDeclaration[41376-41381]"
    }, {
      "left" : "int c",
      "right" : "int c",
      "info" : "SingleVariableDeclaration[41323-41328]:SingleVariableDeclaration[41383-41388]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41330-41455]:Block[41390-41515]"
    }, {
      "left" : "if (b > a)",
      "right" : "if (b > a)",
      "info" : "IfStatement[41340-41381]:IfStatement[41400-41441]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41351-41381]:Block[41411-41441]"
    }, {
      "left" : "a = b;",
      "right" : "a = b;",
      "info" : "ExpressionStatement[41365-41371]:ExpressionStatement[41425-41431]"
    }, {
      "left" : "if (c > a)",
      "right" : "if (c > a)",
      "info" : "IfStatement[41390-41431]:IfStatement[41450-41491]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41401-41431]:Block[41461-41491]"
    }, {
      "left" : "a = c;",
      "right" : "a = c;",
      "info" : "ExpressionStatement[41415-41421]:ExpressionStatement[41475-41481]"
    }, {
      "left" : "return a;",
      "right" : "return a;",
      "info" : "ReturnStatement[41440-41449]:ReturnStatement[41500-41509]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[41669-41675]:Modifier[41729-41735]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[41676-41682]:Modifier[41736-41742]"
    }, {
      "left" : "short",
      "right" : "short",
      "info" : "PrimitiveType[41683-41688]:PrimitiveType[41743-41748]"
    }, {
      "left" : "max",
      "right" : "max",
      "info" : "SimpleName[41689-41692]:SimpleName[41749-41752]"
    }, {
      "left" : "short a",
      "right" : "short a",
      "info" : "SingleVariableDeclaration[41693-41700]:SingleVariableDeclaration[41753-41760]"
    }, {
      "left" : "short b",
      "right" : "short b",
      "info" : "SingleVariableDeclaration[41702-41709]:SingleVariableDeclaration[41762-41769]"
    }, {
      "left" : "short c",
      "right" : "short c",
      "info" : "SingleVariableDeclaration[41711-41718]:SingleVariableDeclaration[41771-41778]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41720-41845]:Block[41780-41905]"
    }, {
      "left" : "if (b > a)",
      "right" : "if (b > a)",
      "info" : "IfStatement[41730-41771]:IfStatement[41790-41831]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41741-41771]:Block[41801-41831]"
    }, {
      "left" : "a = b;",
      "right" : "a = b;",
      "info" : "ExpressionStatement[41755-41761]:ExpressionStatement[41815-41821]"
    }, {
      "left" : "if (c > a)",
      "right" : "if (c > a)",
      "info" : "IfStatement[41780-41821]:IfStatement[41840-41881]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41791-41821]:Block[41851-41881]"
    }, {
      "left" : "a = c;",
      "right" : "a = c;",
      "info" : "ExpressionStatement[41805-41811]:ExpressionStatement[41865-41871]"
    }, {
      "left" : "return a;",
      "right" : "return a;",
      "info" : "ReturnStatement[41830-41839]:ReturnStatement[41890-41899]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[42058-42064]:Modifier[42118-42124]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[42065-42071]:Modifier[42125-42131]"
    }, {
      "left" : "byte",
      "right" : "byte",
      "info" : "PrimitiveType[42072-42076]:PrimitiveType[42132-42136]"
    }, {
      "left" : "max",
      "right" : "max",
      "info" : "SimpleName[42077-42080]:SimpleName[42137-42140]"
    }, {
      "left" : "byte a",
      "right" : "byte a",
      "info" : "SingleVariableDeclaration[42081-42087]:SingleVariableDeclaration[42141-42147]"
    }, {
      "left" : "byte b",
      "right" : "byte b",
      "info" : "SingleVariableDeclaration[42089-42095]:SingleVariableDeclaration[42149-42155]"
    }, {
      "left" : "byte c",
      "right" : "byte c",
      "info" : "SingleVariableDeclaration[42097-42103]:SingleVariableDeclaration[42157-42163]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42105-42230]:Block[42165-42290]"
    }, {
      "left" : "if (b > a)",
      "right" : "if (b > a)",
      "info" : "IfStatement[42115-42156]:IfStatement[42175-42216]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42126-42156]:Block[42186-42216]"
    }, {
      "left" : "a = b;",
      "right" : "a = b;",
      "info" : "ExpressionStatement[42140-42146]:ExpressionStatement[42200-42206]"
    }, {
      "left" : "if (c > a)",
      "right" : "if (c > a)",
      "info" : "IfStatement[42165-42206]:IfStatement[42225-42266]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42176-42206]:Block[42236-42266]"
    }, {
      "left" : "a = c;",
      "right" : "a = c;",
      "info" : "ExpressionStatement[42190-42196]:ExpressionStatement[42250-42256]"
    }, {
      "left" : "return a;",
      "right" : "return a;",
      "info" : "ReturnStatement[42215-42224]:ReturnStatement[42275-42284]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[42670-42676]:Modifier[42730-42736]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[42677-42683]:Modifier[42737-42743]"
    }, {
      "left" : "double",
      "right" : "double",
      "info" : "PrimitiveType[42684-42690]:PrimitiveType[42744-42750]"
    }, {
      "left" : "max",
      "right" : "max",
      "info" : "SimpleName[42691-42694]:SimpleName[42751-42754]"
    }, {
      "left" : "double a",
      "right" : "double a",
      "info" : "SingleVariableDeclaration[42695-42703]:SingleVariableDeclaration[42755-42763]"
    }, {
      "left" : "double b",
      "right" : "double b",
      "info" : "SingleVariableDeclaration[42705-42713]:SingleVariableDeclaration[42765-42773]"
    }, {
      "left" : "double c",
      "right" : "double c",
      "info" : "SingleVariableDeclaration[42715-42723]:SingleVariableDeclaration[42775-42783]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42725-42776]:Block[42785-42836]"
    }, {
      "left" : "return Math.max(Math.max(a, b), c);",
      "right" : "return Math.max(Math.max(a, b), c);",
      "info" : "ReturnStatement[42735-42770]:ReturnStatement[42795-42830]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[43212-43218]:Modifier[43272-43278]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[43219-43225]:Modifier[43279-43285]"
    }, {
      "left" : "float",
      "right" : "float",
      "info" : "PrimitiveType[43226-43231]:PrimitiveType[43286-43291]"
    }, {
      "left" : "max",
      "right" : "max",
      "info" : "SimpleName[43232-43235]:SimpleName[43292-43295]"
    }, {
      "left" : "float a",
      "right" : "float a",
      "info" : "SingleVariableDeclaration[43236-43243]:SingleVariableDeclaration[43296-43303]"
    }, {
      "left" : "float b",
      "right" : "float b",
      "info" : "SingleVariableDeclaration[43245-43252]:SingleVariableDeclaration[43305-43312]"
    }, {
      "left" : "float c",
      "right" : "float c",
      "info" : "SingleVariableDeclaration[43254-43261]:SingleVariableDeclaration[43314-43321]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43263-43314]:Block[43323-43374]"
    }, {
      "left" : "return Math.max(Math.max(a, b), c);",
      "right" : "return Math.max(Math.max(a, b), c);",
      "info" : "ReturnStatement[43273-43308]:ReturnStatement[43333-43368]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[43730-43736]:Modifier[43790-43796]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[43737-43743]:Modifier[43797-43803]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[43744-43751]:PrimitiveType[43804-43811]"
    }, {
      "left" : "isDigits",
      "right" : "isDigits",
      "info" : "SimpleName[43752-43760]:SimpleName[43812-43820]"
    }, {
      "left" : "String str",
      "right" : "String str",
      "info" : "SingleVariableDeclaration[43761-43771]:SingleVariableDeclaration[43821-43831]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43773-44033]:Block[43833-44093]"
    }, {
      "left" : "if (StringUtils.isEmpty(str))",
      "right" : "if (StringUtils.isEmpty(str))",
      "info" : "IfStatement[43783-43850]:IfStatement[43843-43910]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43813-43850]:Block[43873-43910]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[43827-43840]:ReturnStatement[43887-43900]"
    }, {
      "left" : "for (int i = 0; i < str.length(); i++)",
      "right" : "for (int i = 0; i < str.length(); i++)",
      "info" : "ForStatement[43859-44006]:ForStatement[43919-44066]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43898-44006]:Block[43958-44066]"
    }, {
      "left" : "if (!Character.isDigit(str.charAt(i)))",
      "right" : "if (!Character.isDigit(str.charAt(i)))",
      "info" : "IfStatement[43912-43996]:IfStatement[43972-44056]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43951-43996]:Block[44011-44056]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[43969-43982]:ReturnStatement[44029-44042]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[44015-44027]:ReturnStatement[44075-44087]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[44535-44541]:Modifier[44595-44601]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[44542-44548]:Modifier[44602-44608]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[44549-44556]:PrimitiveType[44609-44616]"
    }, {
      "left" : "isNumber",
      "right" : "isNumber",
      "info" : "SimpleName[44557-44565]:SimpleName[44617-44625]"
    }, {
      "left" : "String str",
      "right" : "String str",
      "info" : "SingleVariableDeclaration[44566-44576]:SingleVariableDeclaration[44626-44636]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44578-48322]:Block[44638-48382]"
    }, {
      "left" : "if (StringUtils.isEmpty(str))",
      "right" : "if (StringUtils.isEmpty(str))",
      "info" : "IfStatement[44588-44655]:IfStatement[44648-44715]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44618-44655]:Block[44678-44715]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[44632-44645]:ReturnStatement[44692-44705]"
    }, {
      "left" : "char[] chars = str.toCharArray();",
      "right" : "char[] chars = str.toCharArray();",
      "info" : "VariableDeclarationStatement[44664-44697]:VariableDeclarationStatement[44724-44757]"
    }, {
      "left" : "int sz = chars.length;",
      "right" : "int sz = chars.length;",
      "info" : "VariableDeclarationStatement[44706-44728]:VariableDeclarationStatement[44766-44788]"
    }, {
      "left" : "boolean hasExp = false;",
      "right" : "boolean hasExp = false;",
      "info" : "VariableDeclarationStatement[44737-44760]:VariableDeclarationStatement[44797-44820]"
    }, {
      "left" : "boolean hasDecPoint = false;",
      "right" : "boolean hasDecPoint = false;",
      "info" : "VariableDeclarationStatement[44769-44797]:VariableDeclarationStatement[44829-44857]"
    }, {
      "left" : "boolean allowSigns = false;",
      "right" : "boolean allowSigns = false;",
      "info" : "VariableDeclarationStatement[44806-44833]:VariableDeclarationStatement[44866-44893]"
    }, {
      "left" : "boolean foundDigit = false;",
      "right" : "boolean foundDigit = false;",
      "info" : "VariableDeclarationStatement[44842-44869]:VariableDeclarationStatement[44902-44929]"
    }, {
      "left" : "int start = (chars[0] == '-') ? 1 : 0;",
      "right" : "int start = (chars[0] == '-') ? 1 : 0;",
      "info" : "VariableDeclarationStatement[44926-44964]:VariableDeclarationStatement[44986-45024]"
    }, {
      "left" : "if (sz > start + 1 && chars[start] == '0' && chars[start + 1] == 'x')",
      "right" : "if (sz > start + 1 && chars[start] == '0' && chars[start + 1] == 'x')",
      "info" : "IfStatement[44973-45536]:IfStatement[45033-45596]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45043-45536]:Block[45103-45596]"
    }, {
      "left" : "int i = start + 2;",
      "right" : "int i = start + 2;",
      "info" : "VariableDeclarationStatement[45057-45075]:VariableDeclarationStatement[45117-45135]"
    }, {
      "left" : "if (i == sz)",
      "right" : "if (i == sz)",
      "info" : "IfStatement[45088-45161]:IfStatement[45148-45221]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45101-45161]:Block[45161-45221]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[45119-45132]:ReturnStatement[45179-45192]"
    }, {
      "left" : "for (; i < chars.length; i++)",
      "right" : "for (; i < chars.length; i++)",
      "info" : "ForStatement[45230-45501]:ForStatement[45290-45561]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45260-45501]:Block[45320-45561]"
    }, {
      "left" : "if ((chars[i] < '0' || chars[i] > '9')\n                    && (chars[i] < 'a' || chars[i] > 'f')\n                    && (chars[i] < 'A' || chars[i] > 'F'))",
      "right" : "if ((chars[i] < '0' || chars[i] > '9')\n                    && (chars[i] < 'a' || chars[i] > 'f')\n                    && (chars[i] < 'A' || chars[i] > 'F'))",
      "info" : "IfStatement[45278-45487]:IfStatement[45338-45547]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45434-45487]:Block[45494-45547]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[45456-45469]:ReturnStatement[45516-45529]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[45514-45526]:ReturnStatement[45574-45586]"
    }, {
      "left" : "sz--;",
      "right" : "sz--;",
      "info" : "ExpressionStatement[45545-45550]:ExpressionStatement[45605-45610]"
    }, {
      "left" : "int i = start;",
      "right" : "int i = start;",
      "info" : "VariableDeclarationStatement[45656-45670]:VariableDeclarationStatement[45716-45730]"
    }, {
      "left" : "while (i < sz || (i < sz + 1 && allowSigns && !foundDigit))",
      "right" : "while (i < sz || (i < sz + 1 && allowSigns && !foundDigit))",
      "info" : "WhileStatement[45828-46976]:WhileStatement[45888-47036]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45888-46976]:Block[45948-47036]"
    }, {
      "left" : "if (chars[i] >= '0' && chars[i] <= '9')",
      "right" : "if (chars[i] >= '0' && chars[i] <= '9')",
      "info" : "IfStatement[45902-46949]:IfStatement[45962-47009]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45942-46029]:Block[46002-46089]"
    }, {
      "left" : "foundDigit = true;",
      "right" : "foundDigit = true;",
      "info" : "ExpressionStatement[45960-45978]:ExpressionStatement[46020-46038]"
    }, {
      "left" : "allowSigns = false;",
      "right" : "allowSigns = false;",
      "info" : "ExpressionStatement[45995-46014]:ExpressionStatement[46055-46074]"
    }, {
      "left" : "if (chars[i] == '.')",
      "right" : "if (chars[i] == '.')",
      "info" : "IfStatement[46035-46949]:IfStatement[46095-47009]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46056-46268]:Block[46116-46328]"
    }, {
      "left" : "if (hasDecPoint || hasExp)",
      "right" : "if (hasDecPoint || hasExp)",
      "info" : "IfStatement[46074-46218]:IfStatement[46134-46278]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46101-46218]:Block[46161-46278]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[46187-46200]:ReturnStatement[46247-46260]"
    }, {
      "left" : "hasDecPoint = true;",
      "right" : "hasDecPoint = true;",
      "info" : "ExpressionStatement[46235-46254]:ExpressionStatement[46295-46314]"
    }, {
      "left" : "if (chars[i] == 'e' || chars[i] == 'E')",
      "right" : "if (chars[i] == 'e' || chars[i] == 'E')",
      "info" : "IfStatement[46274-46949]:IfStatement[46334-47009]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46314-46647]:Block[46374-46707]"
    }, {
      "left" : "if (hasExp)",
      "right" : "if (hasExp)",
      "info" : "IfStatement[46384-46480]:IfStatement[46444-46540]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46396-46480]:Block[46456-46540]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[46449-46462]:ReturnStatement[46509-46522]"
    }, {
      "left" : "if (!foundDigit)",
      "right" : "if (!foundDigit)",
      "info" : "IfStatement[46497-46567]:IfStatement[46557-46627]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46514-46567]:Block[46574-46627]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[46536-46549]:ReturnStatement[46596-46609]"
    }, {
      "left" : "hasExp = true;",
      "right" : "hasExp = true;",
      "info" : "ExpressionStatement[46584-46598]:ExpressionStatement[46644-46658]"
    }, {
      "left" : "allowSigns = true;",
      "right" : "allowSigns = true;",
      "info" : "ExpressionStatement[46615-46633]:ExpressionStatement[46675-46693]"
    }, {
      "left" : "if (chars[i] == '+' || chars[i] == '-')",
      "right" : "if (chars[i] == '+' || chars[i] == '-')",
      "info" : "IfStatement[46653-46949]:IfStatement[46713-47009]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46693-46898]:Block[46753-46958]"
    }, {
      "left" : "if (!allowSigns)",
      "right" : "if (!allowSigns)",
      "info" : "IfStatement[46711-46781]:IfStatement[46771-46841]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46728-46781]:Block[46788-46841]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[46750-46763]:ReturnStatement[46810-46823]"
    }, {
      "left" : "allowSigns = false;",
      "right" : "allowSigns = false;",
      "info" : "ExpressionStatement[46798-46817]:ExpressionStatement[46858-46877]"
    }, {
      "left" : "foundDigit = false;",
      "right" : "foundDigit = false;",
      "info" : "ExpressionStatement[46834-46853]:ExpressionStatement[46894-46913]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46904-46949]:Block[46964-47009]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[46922-46935]:ReturnStatement[46982-46995]"
    }, {
      "left" : "i++;",
      "right" : "i++;",
      "info" : "ExpressionStatement[46962-46966]:ExpressionStatement[47022-47026]"
    }, {
      "left" : "if (i < chars.length)",
      "right" : "if (i < chars.length)",
      "info" : "IfStatement[46985-48137]:IfStatement[47045-48197]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47007-48137]:Block[47067-48197]"
    }, {
      "left" : "if (chars[i] >= '0' && chars[i] <= '9')",
      "right" : "if (chars[i] >= '0' && chars[i] <= '9')",
      "info" : "IfStatement[47021-47146]:IfStatement[47081-47206]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47061-47146]:Block[47121-47206]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[47120-47132]:ReturnStatement[47180-47192]"
    }, {
      "left" : "if (chars[i] == 'e' || chars[i] == 'E')",
      "right" : "if (chars[i] == 'e' || chars[i] == 'E')",
      "info" : "IfStatement[47159-47296]:IfStatement[47219-47356]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47199-47296]:Block[47259-47356]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[47269-47282]:ReturnStatement[47329-47342]"
    }, {
      "left" : "if (chars[i] == '.')",
      "right" : "if (chars[i] == '.')",
      "info" : "IfStatement[47309-47612]:IfStatement[47369-47672]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47330-47612]:Block[47390-47672]"
    }, {
      "left" : "if (hasDecPoint || hasExp)",
      "right" : "if (hasDecPoint || hasExp)",
      "info" : "IfStatement[47348-47489]:IfStatement[47408-47549]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47375-47489]:Block[47435-47549]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[47458-47471]:ReturnStatement[47518-47531]"
    }, {
      "left" : "return foundDigit;",
      "right" : "return foundDigit;",
      "info" : "ReturnStatement[47580-47598]:ReturnStatement[47640-47658]"
    }, {
      "left" : "if (!allowSigns\n                && (chars[i] == 'd'\n                    || chars[i] == 'D'\n                    || chars[i] == 'f'\n                    || chars[i] == 'F'))",
      "right" : "if (!allowSigns\n                && (chars[i] == 'd'\n                    || chars[i] == 'D'\n                    || chars[i] == 'f'\n                    || chars[i] == 'F'))",
      "info" : "IfStatement[47625-47846]:IfStatement[47685-47906]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47796-47846]:Block[47856-47906]"
    }, {
      "left" : "return foundDigit;",
      "right" : "return foundDigit;",
      "info" : "ReturnStatement[47814-47832]:ReturnStatement[47874-47892]"
    }, {
      "left" : "if (chars[i] == 'l'\n                || chars[i] == 'L')",
      "right" : "if (chars[i] == 'l'\n                || chars[i] == 'L')",
      "info" : "IfStatement[47859-48060]:IfStatement[47919-48120]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47915-48060]:Block[47975-48120]"
    }, {
      "left" : "return foundDigit && !hasExp && !hasDecPoint;",
      "right" : "return foundDigit && !hasExp && !hasDecPoint;",
      "info" : "ReturnStatement[48001-48046]:ReturnStatement[48061-48106]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[48114-48127]:ReturnStatement[48174-48187]"
    }, {
      "left" : "return !allowSigns && foundDigit;",
      "right" : "return !allowSigns && foundDigit;",
      "info" : "ReturnStatement[48283-48316]:ReturnStatement[48343-48376]"
    } ]
  },
  "interFileMappings" : { }
}