{
  "matchedElements" : [
 {
    "left" : "class : NumberUtils",
    "right" : "class : NumberUtils",
    "info" : "TypeDeclaration[982-48784]:TypeDeclaration[982-49044]"
  }, {
    "left" : "LONG_ZERO",
    "right" : "LONG_ZERO",
    "info" : "FieldDeclaration[1124-1222]:FieldDeclaration[1124-1222]"
  }, {
    "left" : "LONG_ONE",
    "right" : "LONG_ONE",
    "info" : "FieldDeclaration[1227-1323]:FieldDeclaration[1227-1323]"
  }, {
    "left" : "LONG_MINUS_ONE",
    "right" : "LONG_MINUS_ONE",
    "info" : "FieldDeclaration[1328-1437]:FieldDeclaration[1328-1437]"
  }, {
    "left" : "INTEGER_ZERO",
    "right" : "INTEGER_ZERO",
    "info" : "FieldDeclaration[1442-1551]:FieldDeclaration[1442-1551]"
  }, {
    "left" : "INTEGER_ONE",
    "right" : "INTEGER_ONE",
    "info" : "FieldDeclaration[1556-1663]:FieldDeclaration[1556-1663]"
  }, {
    "left" : "INTEGER_MINUS_ONE",
    "right" : "INTEGER_MINUS_ONE",
    "info" : "FieldDeclaration[1668-1788]:FieldDeclaration[1668-1788]"
  }, {
    "left" : "SHORT_ZERO",
    "right" : "SHORT_ZERO",
    "info" : "FieldDeclaration[1793-1902]:FieldDeclaration[1793-1902]"
  }, {
    "left" : "SHORT_ONE",
    "right" : "SHORT_ONE",
    "info" : "FieldDeclaration[1907-2014]:FieldDeclaration[1907-2014]"
  }, {
    "left" : "SHORT_MINUS_ONE",
    "right" : "SHORT_MINUS_ONE",
    "info" : "FieldDeclaration[2019-2139]:FieldDeclaration[2019-2139]"
  }, {
    "left" : "BYTE_ZERO",
    "right" : "BYTE_ZERO",
    "info" : "FieldDeclaration[2144-2248]:FieldDeclaration[2144-2248]"
  }, {
    "left" : "BYTE_ONE",
    "right" : "BYTE_ONE",
    "info" : "FieldDeclaration[2253-2355]:FieldDeclaration[2253-2355]"
  }, {
    "left" : "BYTE_MINUS_ONE",
    "right" : "BYTE_MINUS_ONE",
    "info" : "FieldDeclaration[2360-2475]:FieldDeclaration[2360-2475]"
  }, {
    "left" : "DOUBLE_ZERO",
    "right" : "DOUBLE_ZERO",
    "info" : "FieldDeclaration[2480-2588]:FieldDeclaration[2480-2588]"
  }, {
    "left" : "DOUBLE_ONE",
    "right" : "DOUBLE_ONE",
    "info" : "FieldDeclaration[2593-2699]:FieldDeclaration[2593-2699]"
  }, {
    "left" : "DOUBLE_MINUS_ONE",
    "right" : "DOUBLE_MINUS_ONE",
    "info" : "FieldDeclaration[2704-2823]:FieldDeclaration[2704-2823]"
  }, {
    "left" : "FLOAT_ZERO",
    "right" : "FLOAT_ZERO",
    "info" : "FieldDeclaration[2828-2932]:FieldDeclaration[2828-2932]"
  }, {
    "left" : "FLOAT_ONE",
    "right" : "FLOAT_ONE",
    "info" : "FieldDeclaration[2937-3039]:FieldDeclaration[2937-3039]"
  }, {
    "left" : "FLOAT_MINUS_ONE",
    "right" : "FLOAT_MINUS_ONE",
    "info" : "FieldDeclaration[3044-3159]:FieldDeclaration[3044-3159]"
  }, {
    "left" : "public NumberUtils()",
    "right" : "public NumberUtils()",
    "info" : "MethodDeclaration[3165-3524]:MethodDeclaration[3165-3524]"
  }, {
    "left" : "public toInt(str ) : int",
    "right" : "public toInt(str ) : int",
    "info" : "MethodDeclaration[3608-4242]:MethodDeclaration[3608-4242]"
  }, {
    "left" : "public toInt(str , defaultValue int) : int",
    "right" : "public toInt(str , defaultValue int) : int",
    "info" : "MethodDeclaration[4248-5135]:MethodDeclaration[4248-5135]"
  }, {
    "left" : "public toLong(str ) : long",
    "right" : "public toLong(str ) : long",
    "info" : "MethodDeclaration[5141-5783]:MethodDeclaration[5141-5783]"
  }, {
    "left" : "public toLong(str , defaultValue long) : long",
    "right" : "public toLong(str , defaultValue long) : long",
    "info" : "MethodDeclaration[5789-6688]:MethodDeclaration[5789-6688]"
  }, {
    "left" : "public toFloat(str ) : float",
    "right" : "public toFloat(str ) : float",
    "info" : "MethodDeclaration[6694-7397]:MethodDeclaration[6694-7397]"
  }, {
    "left" : "public toFloat(str , defaultValue float) : float",
    "right" : "public toFloat(str , defaultValue float) : float",
    "info" : "MethodDeclaration[7403-8363]:MethodDeclaration[7403-8363]"
  }, {
    "left" : "public toDouble(str ) : double",
    "right" : "public toDouble(str ) : double",
    "info" : "MethodDeclaration[8369-9080]:MethodDeclaration[8369-9080]"
  }, {
    "left" : "public toDouble(str , defaultValue double) : double",
    "right" : "public toDouble(str , defaultValue double) : double",
    "info" : "MethodDeclaration[9086-10051]:MethodDeclaration[9086-10051]"
  }, {
    "left" : "public toByte(str ) : byte",
    "right" : "public toByte(str ) : byte",
    "info" : "MethodDeclaration[10137-10785]:MethodDeclaration[10137-10785]"
  }, {
    "left" : "public toByte(str , defaultValue byte) : byte",
    "right" : "public toByte(str , defaultValue byte) : byte",
    "info" : "MethodDeclaration[10791-11683]:MethodDeclaration[10791-11683]"
  }, {
    "left" : "public toShort(str ) : short",
    "right" : "public toShort(str ) : short",
    "info" : "MethodDeclaration[11689-12346]:MethodDeclaration[11689-12346]"
  }, {
    "left" : "public toShort(str , defaultValue short) : short",
    "right" : "public toShort(str , defaultValue short) : short",
    "info" : "MethodDeclaration[12352-13255]:MethodDeclaration[12352-13255]"
  }, {
    "left" : "public createNumber(str ) : ",
    "right" : "public createNumber(str ) : ",
    "info" : "MethodDeclaration[14520-22901]:MethodDeclaration[14520-23161]"
  }, {
    "left" : "private isAllZeros(str ) : boolean",
    "right" : "private isAllZeros(str ) : boolean",
    "info" : "MethodDeclaration[22907-23475]:MethodDeclaration[23167-23735]"
  }, {
    "left" : "public createFloat(str ) : ",
    "right" : "public createFloat(str ) : ",
    "info" : "MethodDeclaration[23559-24099]:MethodDeclaration[23819-24359]"
  }, {
    "left" : "public createDouble(str ) : ",
    "right" : "public createDouble(str ) : ",
    "info" : "MethodDeclaration[24105-24650]:MethodDeclaration[24365-24910]"
  }, {
    "left" : "public createInteger(str ) : ",
    "right" : "public createInteger(str ) : ",
    "info" : "MethodDeclaration[24656-25315]:MethodDeclaration[24916-25575]"
  }, {
    "left" : "public createLong(str ) : ",
    "right" : "public createLong(str ) : ",
    "info" : "MethodDeclaration[25321-25909]:MethodDeclaration[25581-26169]"
  }, {
    "left" : "public createBigInteger(str ) : ",
    "right" : "public createBigInteger(str ) : ",
    "info" : "MethodDeclaration[25915-27319]:MethodDeclaration[26175-27579]"
  }, {
    "left" : "public createBigDecimal(str ) : ",
    "right" : "public createBigDecimal(str ) : ",
    "info" : "MethodDeclaration[27325-28472]:MethodDeclaration[27585-28732]"
  }, {
    "left" : "public min(array ) : long",
    "right" : "public min(array ) : long",
    "info" : "MethodDeclaration[28573-29245]:MethodDeclaration[28833-29505]"
  }, {
    "left" : "public min(array ) : int",
    "right" : "public min(array ) : int",
    "info" : "MethodDeclaration[29251-29920]:MethodDeclaration[29511-30180]"
  }, {
    "left" : "public min(array ) : short",
    "right" : "public min(array ) : short",
    "info" : "MethodDeclaration[29926-30601]:MethodDeclaration[30186-30861]"
  }, {
    "left" : "public min(array ) : byte",
    "right" : "public min(array ) : byte",
    "info" : "MethodDeclaration[30607-31279]:MethodDeclaration[30867-31539]"
  }, {
    "left" : "public min(array ) : double",
    "right" : "public min(array ) : double",
    "info" : "MethodDeclaration[31286-32167]:MethodDeclaration[31546-32427]"
  }, {
    "left" : "public min(array ) : float",
    "right" : "public min(array ) : float",
    "info" : "MethodDeclaration[32173-33048]:MethodDeclaration[32433-33308]"
  }, {
    "left" : "public max(array ) : long",
    "right" : "public max(array ) : long",
    "info" : "MethodDeclaration[33149-33813]:MethodDeclaration[33409-34073]"
  }, {
    "left" : "public max(array ) : int",
    "right" : "public max(array ) : int",
    "info" : "MethodDeclaration[33819-34488]:MethodDeclaration[34079-34748]"
  }, {
    "left" : "public max(array ) : short",
    "right" : "public max(array ) : short",
    "info" : "MethodDeclaration[34494-35169]:MethodDeclaration[34754-35429]"
  }, {
    "left" : "public max(array ) : byte",
    "right" : "public max(array ) : byte",
    "info" : "MethodDeclaration[35175-35847]:MethodDeclaration[35435-36107]"
  }, {
    "left" : "public max(array ) : double",
    "right" : "public max(array ) : double",
    "info" : "MethodDeclaration[35853-36730]:MethodDeclaration[36113-36990]"
  }, {
    "left" : "public max(array ) : float",
    "right" : "public max(array ) : float",
    "info" : "MethodDeclaration[36736-37603]:MethodDeclaration[36996-37863]"
  }, {
    "left" : "private validateArray(array ) : void",
    "right" : "private validateArray(array ) : void",
    "info" : "MethodDeclaration[37609-38127]:MethodDeclaration[37869-38387]"
  }, {
    "left" : "public min(a long, b long, c long) : long",
    "right" : "public min(a long, b long, c long) : long",
    "info" : "MethodDeclaration[38235-38627]:MethodDeclaration[38495-38887]"
  }, {
    "left" : "public min(a int, b int, c int) : int",
    "right" : "public min(a int, b int, c int) : int",
    "info" : "MethodDeclaration[38633-39020]:MethodDeclaration[38893-39280]"
  }, {
    "left" : "public min(a short, b short, c short) : short",
    "right" : "public min(a short, b short, c short) : short",
    "info" : "MethodDeclaration[39026-39423]:MethodDeclaration[39286-39683]"
  }, {
    "left" : "public min(a byte, b byte, c byte) : byte",
    "right" : "public min(a byte, b byte, c byte) : byte",
    "info" : "MethodDeclaration[39429-39821]:MethodDeclaration[39689-40081]"
  }, {
    "left" : "public min(a double, b double, c double) : double",
    "right" : "public min(a double, b double, c double) : double",
    "info" : "MethodDeclaration[39827-40387]:MethodDeclaration[40087-40647]"
  }, {
    "left" : "public min(a float, b float, c float) : float",
    "right" : "public min(a float, b float, c float) : float",
    "info" : "MethodDeclaration[40393-40944]:MethodDeclaration[40653-41204]"
  }, {
    "left" : "public max(a long, b long, c long) : long",
    "right" : "public max(a long, b long, c long) : long",
    "info" : "MethodDeclaration[41047-41438]:MethodDeclaration[41307-41698]"
  }, {
    "left" : "public max(a int, b int, c int) : int",
    "right" : "public max(a int, b int, c int) : int",
    "info" : "MethodDeclaration[41444-41830]:MethodDeclaration[41704-42090]"
  }, {
    "left" : "public max(a short, b short, c short) : short",
    "right" : "public max(a short, b short, c short) : short",
    "info" : "MethodDeclaration[41836-42232]:MethodDeclaration[42096-42492]"
  }, {
    "left" : "public max(a byte, b byte, c byte) : byte",
    "right" : "public max(a byte, b byte, c byte) : byte",
    "info" : "MethodDeclaration[42238-42629]:MethodDeclaration[42498-42889]"
  }, {
    "left" : "public max(a double, b double, c double) : double",
    "right" : "public max(a double, b double, c double) : double",
    "info" : "MethodDeclaration[42635-43193]:MethodDeclaration[42895-43453]"
  }, {
    "left" : "public max(a float, b float, c float) : float",
    "right" : "public max(a float, b float, c float) : float",
    "info" : "MethodDeclaration[43199-43749]:MethodDeclaration[43459-44009]"
  }, {
    "left" : "public isDigits(str ) : boolean",
    "right" : "public isDigits(str ) : boolean",
    "info" : "MethodDeclaration[43833-44474]:MethodDeclaration[44093-44734]"
  }, {
    "left" : "public isNumber(str ) : boolean",
    "right" : "public isNumber(str ) : boolean",
    "info" : "MethodDeclaration[44480-48781]:MethodDeclaration[44740-49041]"
  } ],
  "mappings" : [
 {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[3479-3485]:Modifier[3479-3485]"
  }, {
    "left" : "NumberUtils",
    "right" : "NumberUtils",
    "info" : "SimpleName[3486-3497]:SimpleName[3486-3497]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3500-3524]:Block[3500-3524]"
  }, {
    "left" : "super();",
    "right" : "super();",
    "info" : "SuperConstructorInvocation[3510-3518]:SuperConstructorInvocation[3510-3518]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[4163-4169]:Modifier[4163-4169]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[4170-4176]:Modifier[4170-4176]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[4177-4180]:PrimitiveType[4177-4180]"
  }, {
    "left" : "toInt",
    "right" : "toInt",
    "info" : "SimpleName[4181-4186]:SimpleName[4181-4186]"
  }, {
    "left" : "final String str",
    "right" : "final String str",
    "info" : "SingleVariableDeclaration[4187-4203]:SingleVariableDeclaration[4187-4203]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4205-4242]:Block[4205-4242]"
  }, {
    "left" : "return toInt(str, 0);",
    "right" : "return toInt(str, 0);",
    "info" : "ReturnStatement[4215-4236]:ReturnStatement[4215-4236]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[4842-4848]:Modifier[4842-4848]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[4849-4855]:Modifier[4849-4855]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[4856-4859]:PrimitiveType[4856-4859]"
  }, {
    "left" : "toInt",
    "right" : "toInt",
    "info" : "SimpleName[4860-4865]:SimpleName[4860-4865]"
  }, {
    "left" : "final String str",
    "right" : "final String str",
    "info" : "SingleVariableDeclaration[4866-4882]:SingleVariableDeclaration[4866-4882]"
  }, {
    "left" : "final int defaultValue",
    "right" : "final int defaultValue",
    "info" : "SingleVariableDeclaration[4884-4906]:SingleVariableDeclaration[4884-4906]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4908-5135]:Block[4908-5135]"
  }, {
    "left" : "if(str == null)",
    "right" : "if(str == null)",
    "info" : "IfStatement[4918-4978]:IfStatement[4918-4978]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4934-4978]:Block[4934-4978]"
  }, {
    "left" : "return defaultValue;",
    "right" : "return defaultValue;",
    "info" : "ReturnStatement[4948-4968]:ReturnStatement[4948-4968]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[4987-5129]:TryStatement[4987-5129]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4991-5044]:Block[4991-5044]"
  }, {
    "left" : "return Integer.parseInt(str);",
    "right" : "return Integer.parseInt(str);",
    "info" : "ReturnStatement[5005-5034]:ReturnStatement[5005-5034]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5085-5129]:Block[5085-5129]"
  }, {
    "left" : "return defaultValue;",
    "right" : "return defaultValue;",
    "info" : "ReturnStatement[5099-5119]:ReturnStatement[5099-5119]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[5700-5706]:Modifier[5700-5706]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[5707-5713]:Modifier[5707-5713]"
  }, {
    "left" : "long",
    "right" : "long",
    "info" : "PrimitiveType[5714-5718]:PrimitiveType[5714-5718]"
  }, {
    "left" : "toLong",
    "right" : "toLong",
    "info" : "SimpleName[5719-5725]:SimpleName[5719-5725]"
  }, {
    "left" : "final String str",
    "right" : "final String str",
    "info" : "SingleVariableDeclaration[5726-5742]:SingleVariableDeclaration[5726-5742]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5744-5783]:Block[5744-5783]"
  }, {
    "left" : "return toLong(str, 0L);",
    "right" : "return toLong(str, 0L);",
    "info" : "ReturnStatement[5754-5777]:ReturnStatement[5754-5777]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[6393-6399]:Modifier[6393-6399]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[6400-6406]:Modifier[6400-6406]"
  }, {
    "left" : "long",
    "right" : "long",
    "info" : "PrimitiveType[6407-6411]:PrimitiveType[6407-6411]"
  }, {
    "left" : "toLong",
    "right" : "toLong",
    "info" : "SimpleName[6412-6418]:SimpleName[6412-6418]"
  }, {
    "left" : "final String str",
    "right" : "final String str",
    "info" : "SingleVariableDeclaration[6419-6435]:SingleVariableDeclaration[6419-6435]"
  }, {
    "left" : "final long defaultValue",
    "right" : "final long defaultValue",
    "info" : "SingleVariableDeclaration[6437-6460]:SingleVariableDeclaration[6437-6460]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6462-6688]:Block[6462-6688]"
  }, {
    "left" : "if (str == null)",
    "right" : "if (str == null)",
    "info" : "IfStatement[6472-6533]:IfStatement[6472-6533]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6489-6533]:Block[6489-6533]"
  }, {
    "left" : "return defaultValue;",
    "right" : "return defaultValue;",
    "info" : "ReturnStatement[6503-6523]:ReturnStatement[6503-6523]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[6542-6682]:TryStatement[6542-6682]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6546-6597]:Block[6546-6597]"
  }, {
    "left" : "return Long.parseLong(str);",
    "right" : "return Long.parseLong(str);",
    "info" : "ReturnStatement[6560-6587]:ReturnStatement[6560-6587]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6638-6682]:Block[6638-6682]"
  }, {
    "left" : "return defaultValue;",
    "right" : "return defaultValue;",
    "info" : "ReturnStatement[6652-6672]:ReturnStatement[6652-6672]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[7309-7315]:Modifier[7309-7315]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[7316-7322]:Modifier[7316-7322]"
  }, {
    "left" : "float",
    "right" : "float",
    "info" : "PrimitiveType[7323-7328]:PrimitiveType[7323-7328]"
  }, {
    "left" : "toFloat",
    "right" : "toFloat",
    "info" : "SimpleName[7329-7336]:SimpleName[7329-7336]"
  }, {
    "left" : "final String str",
    "right" : "final String str",
    "info" : "SingleVariableDeclaration[7337-7353]:SingleVariableDeclaration[7337-7353]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7355-7397]:Block[7355-7397]"
  }, {
    "left" : "return toFloat(str, 0.0f);",
    "right" : "return toFloat(str, 0.0f);",
    "info" : "ReturnStatement[7365-7391]:ReturnStatement[7365-7391]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[8074-8080]:Modifier[8074-8080]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[8081-8087]:Modifier[8081-8087]"
  }, {
    "left" : "float",
    "right" : "float",
    "info" : "PrimitiveType[8088-8093]:PrimitiveType[8088-8093]"
  }, {
    "left" : "toFloat",
    "right" : "toFloat",
    "info" : "SimpleName[8094-8101]:SimpleName[8094-8101]"
  }, {
    "left" : "final String str",
    "right" : "final String str",
    "info" : "SingleVariableDeclaration[8102-8118]:SingleVariableDeclaration[8102-8118]"
  }, {
    "left" : "final float defaultValue",
    "right" : "final float defaultValue",
    "info" : "SingleVariableDeclaration[8120-8144]:SingleVariableDeclaration[8120-8144]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8146-8363]:Block[8146-8363]"
  }, {
    "left" : "if (str == null)",
    "right" : "if (str == null)",
    "info" : "IfStatement[8154-8211]:IfStatement[8154-8211]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8171-8211]:Block[8171-8211]"
  }, {
    "left" : "return defaultValue;",
    "right" : "return defaultValue;",
    "info" : "ReturnStatement[8183-8203]:ReturnStatement[8183-8203]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[8223-8357]:TryStatement[8223-8357]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8227-8276]:Block[8227-8276]"
  }, {
    "left" : "return Float.parseFloat(str);",
    "right" : "return Float.parseFloat(str);",
    "info" : "ReturnStatement[8239-8268]:ReturnStatement[8239-8268]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8317-8357]:Block[8317-8357]"
  }, {
    "left" : "return defaultValue;",
    "right" : "return defaultValue;",
    "info" : "ReturnStatement[8329-8349]:ReturnStatement[8329-8349]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[8989-8995]:Modifier[8989-8995]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[8996-9002]:Modifier[8996-9002]"
  }, {
    "left" : "double",
    "right" : "double",
    "info" : "PrimitiveType[9003-9009]:PrimitiveType[9003-9009]"
  }, {
    "left" : "toDouble",
    "right" : "toDouble",
    "info" : "SimpleName[9010-9018]:SimpleName[9010-9018]"
  }, {
    "left" : "final String str",
    "right" : "final String str",
    "info" : "SingleVariableDeclaration[9019-9035]:SingleVariableDeclaration[9019-9035]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9037-9080]:Block[9037-9080]"
  }, {
    "left" : "return toDouble(str, 0.0d);",
    "right" : "return toDouble(str, 0.0d);",
    "info" : "ReturnStatement[9047-9074]:ReturnStatement[9047-9074]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[9762-9768]:Modifier[9762-9768]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[9769-9775]:Modifier[9769-9775]"
  }, {
    "left" : "double",
    "right" : "double",
    "info" : "PrimitiveType[9776-9782]:PrimitiveType[9776-9782]"
  }, {
    "left" : "toDouble",
    "right" : "toDouble",
    "info" : "SimpleName[9783-9791]:SimpleName[9783-9791]"
  }, {
    "left" : "final String str",
    "right" : "final String str",
    "info" : "SingleVariableDeclaration[9792-9808]:SingleVariableDeclaration[9792-9808]"
  }, {
    "left" : "final double defaultValue",
    "right" : "final double defaultValue",
    "info" : "SingleVariableDeclaration[9810-9835]:SingleVariableDeclaration[9810-9835]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9837-10051]:Block[9837-10051]"
  }, {
    "left" : "if (str == null)",
    "right" : "if (str == null)",
    "info" : "IfStatement[9845-9902]:IfStatement[9845-9902]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9862-9902]:Block[9862-9902]"
  }, {
    "left" : "return defaultValue;",
    "right" : "return defaultValue;",
    "info" : "ReturnStatement[9874-9894]:ReturnStatement[9874-9894]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[9909-10045]:TryStatement[9909-10045]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9913-9964]:Block[9913-9964]"
  }, {
    "left" : "return Double.parseDouble(str);",
    "right" : "return Double.parseDouble(str);",
    "info" : "ReturnStatement[9925-9956]:ReturnStatement[9925-9956]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10005-10045]:Block[10005-10045]"
  }, {
    "left" : "return defaultValue;",
    "right" : "return defaultValue;",
    "info" : "ReturnStatement[10017-10037]:ReturnStatement[10017-10037]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[10696-10702]:Modifier[10696-10702]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[10703-10709]:Modifier[10703-10709]"
  }, {
    "left" : "byte",
    "right" : "byte",
    "info" : "PrimitiveType[10710-10714]:PrimitiveType[10710-10714]"
  }, {
    "left" : "toByte",
    "right" : "toByte",
    "info" : "SimpleName[10715-10721]:SimpleName[10715-10721]"
  }, {
    "left" : "final String str",
    "right" : "final String str",
    "info" : "SingleVariableDeclaration[10722-10738]:SingleVariableDeclaration[10722-10738]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10740-10785]:Block[10740-10785]"
  }, {
    "left" : "return toByte(str, (byte) 0);",
    "right" : "return toByte(str, (byte) 0);",
    "info" : "ReturnStatement[10750-10779]:ReturnStatement[10750-10779]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[11389-11395]:Modifier[11389-11395]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[11396-11402]:Modifier[11396-11402]"
  }, {
    "left" : "byte",
    "right" : "byte",
    "info" : "PrimitiveType[11403-11407]:PrimitiveType[11403-11407]"
  }, {
    "left" : "toByte",
    "right" : "toByte",
    "info" : "SimpleName[11408-11414]:SimpleName[11408-11414]"
  }, {
    "left" : "final String str",
    "right" : "final String str",
    "info" : "SingleVariableDeclaration[11415-11431]:SingleVariableDeclaration[11415-11431]"
  }, {
    "left" : "final byte defaultValue",
    "right" : "final byte defaultValue",
    "info" : "SingleVariableDeclaration[11433-11456]:SingleVariableDeclaration[11433-11456]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11458-11683]:Block[11458-11683]"
  }, {
    "left" : "if(str == null)",
    "right" : "if(str == null)",
    "info" : "IfStatement[11468-11528]:IfStatement[11468-11528]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11484-11528]:Block[11484-11528]"
  }, {
    "left" : "return defaultValue;",
    "right" : "return defaultValue;",
    "info" : "ReturnStatement[11498-11518]:ReturnStatement[11498-11518]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[11537-11677]:TryStatement[11537-11677]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11541-11592]:Block[11541-11592]"
  }, {
    "left" : "return Byte.parseByte(str);",
    "right" : "return Byte.parseByte(str);",
    "info" : "ReturnStatement[11555-11582]:ReturnStatement[11555-11582]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11633-11677]:Block[11633-11677]"
  }, {
    "left" : "return defaultValue;",
    "right" : "return defaultValue;",
    "info" : "ReturnStatement[11647-11667]:ReturnStatement[11647-11667]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[12253-12259]:Modifier[12253-12259]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[12260-12266]:Modifier[12260-12266]"
  }, {
    "left" : "short",
    "right" : "short",
    "info" : "PrimitiveType[12267-12272]:PrimitiveType[12267-12272]"
  }, {
    "left" : "toShort",
    "right" : "toShort",
    "info" : "SimpleName[12273-12280]:SimpleName[12273-12280]"
  }, {
    "left" : "final String str",
    "right" : "final String str",
    "info" : "SingleVariableDeclaration[12281-12297]:SingleVariableDeclaration[12281-12297]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12299-12346]:Block[12299-12346]"
  }, {
    "left" : "return toShort(str, (short) 0);",
    "right" : "return toShort(str, (short) 0);",
    "info" : "ReturnStatement[12309-12340]:ReturnStatement[12309-12340]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[12956-12962]:Modifier[12956-12962]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[12963-12969]:Modifier[12963-12969]"
  }, {
    "left" : "short",
    "right" : "short",
    "info" : "PrimitiveType[12970-12975]:PrimitiveType[12970-12975]"
  }, {
    "left" : "toShort",
    "right" : "toShort",
    "info" : "SimpleName[12976-12983]:SimpleName[12976-12983]"
  }, {
    "left" : "final String str",
    "right" : "final String str",
    "info" : "SingleVariableDeclaration[12984-13000]:SingleVariableDeclaration[12984-13000]"
  }, {
    "left" : "final short defaultValue",
    "right" : "final short defaultValue",
    "info" : "SingleVariableDeclaration[13002-13026]:SingleVariableDeclaration[13002-13026]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13028-13255]:Block[13028-13255]"
  }, {
    "left" : "if(str == null)",
    "right" : "if(str == null)",
    "info" : "IfStatement[13038-13098]:IfStatement[13038-13098]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13054-13098]:Block[13054-13098]"
  }, {
    "left" : "return defaultValue;",
    "right" : "return defaultValue;",
    "info" : "ReturnStatement[13068-13088]:ReturnStatement[13068-13088]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[13107-13249]:TryStatement[13107-13249]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13111-13164]:Block[13111-13164]"
  }, {
    "left" : "return Short.parseShort(str);",
    "right" : "return Short.parseShort(str);",
    "info" : "ReturnStatement[13125-13154]:ReturnStatement[13125-13154]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13205-13249]:Block[13205-13249]"
  }, {
    "left" : "return defaultValue;",
    "right" : "return defaultValue;",
    "info" : "ReturnStatement[13219-13239]:ReturnStatement[13219-13239]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[16092-16098]:Modifier[16092-16098]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[16099-16105]:Modifier[16099-16105]"
  }, {
    "left" : "Number",
    "right" : "Number",
    "info" : "SimpleType[16106-16112]:SimpleType[16106-16112]"
  }, {
    "left" : "createNumber",
    "right" : "createNumber",
    "info" : "SimpleName[16113-16125]:SimpleName[16113-16125]"
  }, {
    "left" : "final String str",
    "right" : "final String str",
    "info" : "SingleVariableDeclaration[16126-16142]:SingleVariableDeclaration[16126-16142]"
  }, {
    "left" : "NumberFormatException",
    "right" : "NumberFormatException",
    "info" : "SimpleType[16151-16172]:SimpleType[16151-16172]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16173-22901]:Block[16173-23161]"
  }, {
    "left" : "if (str == null)",
    "right" : "if (str == null)",
    "info" : "IfStatement[16183-16236]:IfStatement[16183-16236]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16200-16236]:Block[16200-16236]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[16214-16226]:ReturnStatement[16214-16226]"
  }, {
    "left" : "if (StringUtils.isBlank(str))",
    "right" : "if (StringUtils.isBlank(str))",
    "info" : "IfStatement[16245-16371]:IfStatement[16245-16371]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16275-16371]:Block[16275-16371]"
  }, {
    "left" : "throw new NumberFormatException(\"A blank string is not a valid number\");",
    "right" : "throw new NumberFormatException(\"A blank string is not a valid number\");",
    "info" : "ThrowStatement[16289-16361]:ThrowStatement[16289-16361]"
  }, {
    "left" : "final String[] hex_prefixes = {\"0x\", \"0X\", \"-0x\", \"-0X\", \"#\", \"-#\"};",
    "right" : "final String[] hex_prefixes = {\"0x\", \"0X\", \"-0x\", \"-0X\", \"#\", \"-#\"};",
    "info" : "VariableDeclarationStatement[16440-16508]:VariableDeclarationStatement[16440-16508]"
  }, {
    "left" : "int pfxLen = 0;",
    "right" : "int pfxLen = 0;",
    "info" : "VariableDeclarationStatement[16517-16532]:VariableDeclarationStatement[16517-16532]"
  }, {
    "left" : "for(final String pfx : hex_prefixes)",
    "right" : "for(final String pfx : hex_prefixes)",
    "info" : "EnhancedForStatement[16541-16705]:EnhancedForStatement[16541-16705]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16578-16705]:Block[16578-16705]"
  }, {
    "left" : "if (str.startsWith(pfx))",
    "right" : "if (str.startsWith(pfx))",
    "info" : "IfStatement[16592-16695]:IfStatement[16592-16695]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16617-16695]:Block[16617-16695]"
  }, {
    "left" : "pfxLen += pfx.length();",
    "right" : "pfxLen += pfx.length();",
    "info" : "ExpressionStatement[16635-16658]:ExpressionStatement[16635-16658]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[16675-16681]:BreakStatement[16675-16681]"
  }, {
    "left" : "if (pfxLen > 0)",
    "right" : "if (pfxLen > 0)",
    "info" : "IfStatement[16714-17086]:IfStatement[16714-17086]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16730-17086]:Block[16730-17086]"
  }, {
    "left" : "final int hexDigits = str.length() - pfxLen;",
    "right" : "final int hexDigits = str.length() - pfxLen;",
    "info" : "VariableDeclarationStatement[16768-16812]:VariableDeclarationStatement[16768-16812]"
  }, {
    "left" : "if (hexDigits > 16)",
    "right" : "if (hexDigits > 16)",
    "info" : "IfStatement[16825-16927]:IfStatement[16825-16927]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16845-16927]:Block[16845-16927]"
  }, {
    "left" : "return createBigInteger(str);",
    "right" : "return createBigInteger(str);",
    "info" : "ReturnStatement[16884-16913]:ReturnStatement[16884-16913]"
  }, {
    "left" : "if (hexDigits > 8)",
    "right" : "if (hexDigits > 8)",
    "info" : "IfStatement[16940-17037]:IfStatement[16940-17037]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16959-17037]:Block[16959-17037]"
  }, {
    "left" : "return createLong(str);",
    "right" : "return createLong(str);",
    "info" : "ReturnStatement[17000-17023]:ReturnStatement[17000-17023]"
  }, {
    "left" : "return createInteger(str);",
    "right" : "return createInteger(str);",
    "info" : "ReturnStatement[17050-17076]:ReturnStatement[17050-17076]"
  }, {
    "left" : "final char lastChar = str.charAt(str.length() - 1);",
    "right" : "final char lastChar = str.charAt(str.length() - 1);",
    "info" : "VariableDeclarationStatement[17095-17146]:VariableDeclarationStatement[17095-17146]"
  }, {
    "left" : "String mant;",
    "right" : "String mant;",
    "info" : "VariableDeclarationStatement[17155-17167]:VariableDeclarationStatement[17155-17167]"
  }, {
    "left" : "String dec;",
    "right" : "String dec;",
    "info" : "VariableDeclarationStatement[17176-17187]:VariableDeclarationStatement[17176-17187]"
  }, {
    "left" : "String exp;",
    "right" : "String exp;",
    "info" : "VariableDeclarationStatement[17196-17207]:VariableDeclarationStatement[17196-17207]"
  }, {
    "left" : "final int decPos = str.indexOf('.');",
    "right" : "final int decPos = str.indexOf('.');",
    "info" : "VariableDeclarationStatement[17216-17252]:VariableDeclarationStatement[17216-17252]"
  }, {
    "left" : "final int expPos = str.indexOf('e') + str.indexOf('E') + 1;",
    "right" : "final int expPos = str.indexOf('e') + str.indexOf('E') + 1;",
    "info" : "VariableDeclarationStatement[17261-17320]:VariableDeclarationStatement[17261-17320]"
  }, {
    "left" : "int numDecimals = 0;",
    "right" : "int numDecimals = 0;",
    "info" : "VariableDeclarationStatement[17563-17583]:VariableDeclarationStatement[17563-17583]"
  }, {
    "left" : "if (decPos > -1)",
    "right" : "if (decPos > -1)",
    "info" : "IfStatement[17631-18655]:IfStatement[17631-18655]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17648-18280]:Block[17648-18280]"
  }, {
    "left" : "if (expPos > -1)",
    "right" : "if (expPos > -1)",
    "info" : "IfStatement[17691-18084]:IfStatement[17691-18084]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17708-18014]:Block[17708-18014]"
  }, {
    "left" : "if (expPos < decPos || expPos > str.length())",
    "right" : "if (expPos < decPos || expPos > str.length())",
    "info" : "IfStatement[17750-17943]:IfStatement[17750-17943]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17796-17943]:Block[17796-17943]"
  }, {
    "left" : "throw new NumberFormatException(str + \" is not a valid number.\");",
    "right" : "throw new NumberFormatException(str + \" is not a valid number.\");",
    "info" : "ThrowStatement[17860-17925]:ThrowStatement[17860-17925]"
  }, {
    "left" : "dec = str.substring(decPos + 1, expPos);",
    "right" : "dec = str.substring(decPos + 1, expPos);",
    "info" : "ExpressionStatement[17960-18000]:ExpressionStatement[17960-18000]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18020-18084]:Block[18020-18084]"
  }, {
    "left" : "dec = str.substring(decPos + 1);",
    "right" : "dec = str.substring(decPos + 1);",
    "info" : "ExpressionStatement[18038-18070]:ExpressionStatement[18038-18070]"
  }, {
    "left" : "mant = str.substring(0, decPos);",
    "right" : "mant = str.substring(0, decPos);",
    "info" : "ExpressionStatement[18097-18129]:ExpressionStatement[18097-18129]"
  }, {
    "left" : "numDecimals = dec.length();",
    "right" : "numDecimals = dec.length();",
    "info" : "ExpressionStatement[18142-18169]:ExpressionStatement[18142-18169]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18286-18655]:Block[18286-18655]"
  }, {
    "left" : "if (expPos > -1)",
    "right" : "if (expPos > -1)",
    "info" : "IfStatement[18300-18621]:IfStatement[18300-18621]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18317-18572]:Block[18317-18572]"
  }, {
    "left" : "if (expPos > str.length())",
    "right" : "if (expPos > str.length())",
    "info" : "IfStatement[18335-18509]:IfStatement[18335-18509]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18362-18509]:Block[18362-18509]"
  }, {
    "left" : "throw new NumberFormatException(str + \" is not a valid number.\");",
    "right" : "throw new NumberFormatException(str + \" is not a valid number.\");",
    "info" : "ThrowStatement[18426-18491]:ThrowStatement[18426-18491]"
  }, {
    "left" : "mant = str.substring(0, expPos);",
    "right" : "mant = str.substring(0, expPos);",
    "info" : "ExpressionStatement[18526-18558]:ExpressionStatement[18526-18558]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18578-18621]:Block[18578-18621]"
  }, {
    "left" : "mant = str;",
    "right" : "mant = str;",
    "info" : "ExpressionStatement[18596-18607]:ExpressionStatement[18596-18607]"
  }, {
    "left" : "dec = null;",
    "right" : "dec = null;",
    "info" : "ExpressionStatement[18634-18645]:ExpressionStatement[18634-18645]"
  }, {
    "left" : "if (!Character.isDigit(lastChar) && lastChar != '.')",
    "right" : "if (!Character.isDigit(lastChar) && lastChar != '.')",
    "info" : "IfStatement[18664-21313]:IfStatement[18664-21313]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18717-21313]:Block[18717-21313]"
  }, {
    "left" : "if (expPos > -1 && expPos < str.length() - 1)",
    "right" : "if (expPos > -1 && expPos < str.length() - 1)",
    "info" : "IfStatement[18731-18908]:IfStatement[18731-18908]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18777-18859]:Block[18777-18859]"
  }, {
    "left" : "exp = str.substring(expPos + 1, str.length() - 1);",
    "right" : "exp = str.substring(expPos + 1, str.length() - 1);",
    "info" : "ExpressionStatement[18795-18845]:ExpressionStatement[18795-18845]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18865-18908]:Block[18865-18908]"
  }, {
    "left" : "exp = null;",
    "right" : "exp = null;",
    "info" : "ExpressionStatement[18883-18894]:ExpressionStatement[18883-18894]"
  }, {
    "left" : "final String numeric = str.substring(0, str.length() - 1);",
    "right" : "final String numeric = str.substring(0, str.length() - 1);",
    "info" : "VariableDeclarationStatement[18964-19022]:VariableDeclarationStatement[18964-19022]"
  }, {
    "left" : "final boolean allZeros = isAllZeros(mant) && isAllZeros(exp);",
    "right" : "final boolean allZeros = isAllZeros(mant) && isAllZeros(exp);",
    "info" : "VariableDeclarationStatement[19035-19096]:VariableDeclarationStatement[19035-19096]"
  }, {
    "left" : "switch (lastChar) {\n                case 'l' :\n                case 'L' :\n                    if (dec == null\n                        && exp == null\n                        && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {\n                        try {\n                            return createLong(numeric);\n                        } catch (final NumberFormatException nfe) { // NOPMD\n                            // Too big for a long\n                        }\n                        return createBigInteger(numeric);\n\n                    }\n                    throw new NumberFormatException(str + \" is not a valid number.\");\n                case 'f' :\n                case 'F' :\n                    try {\n                        final Float f = NumberUtils.createFloat(numeric);\n                        if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                            //If it's too big for a float or the float value = 0 and the string\n                            //has non-zeros in it, then float does not have the precision we want\n                            return f;\n                        }\n\n                    } catch (final NumberFormatException nfe) { // NOPMD\n                        // ignore the bad number\n                    }\n                    //$FALL-THROUGH$\n                case 'd' :\n                case 'D' :\n                    try {\n                        final Double d = NumberUtils.createDouble(numeric);\n                        if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {\n                            return d;\n                        }\n                    } catch (final NumberFormatException nfe) { // NOPMD\n                        // ignore the bad number\n                    }\n                    try {\n                        return createBigDecimal(numeric);\n                    } catch (final NumberFormatException e) { // NOPMD\n                        // ignore the bad number\n                    }\n                    //$FALL-THROUGH$\n                default :\n                    throw new NumberFormatException(str + \" is not a valid number.\");\n\n            }",
    "right" : "switch (lastChar) {\n                case 'l' :\n                case 'L' :\n                    if (dec == null\n                        && exp == null\n                        && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {\n                        try {\n                            return createLong(numeric);\n                        } catch (final NumberFormatException nfe) { // NOPMD\n                            // Too big for a long\n                        }\n                        return createBigInteger(numeric);\n\n                    }\n                    throw new NumberFormatException(str + \" is not a valid number.\");\n                case 'f' :\n                case 'F' :\n                    try {\n                        final Float f = NumberUtils.createFloat(numeric);\n                        if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                            //If it's too big for a float or the float value = 0 and the string\n                            //has non-zeros in it, then float does not have the precision we want\n                            return f;\n                        }\n\n                    } catch (final NumberFormatException nfe) { // NOPMD\n                        // ignore the bad number\n                    }\n                    //$FALL-THROUGH$\n                case 'd' :\n                case 'D' :\n                    try {\n                        final Double d = NumberUtils.createDouble(numeric);\n                        if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {\n                            return d;\n                        }\n                    } catch (final NumberFormatException nfe) { // NOPMD\n                        // ignore the bad number\n                    }\n                    try {\n                        return createBigDecimal(numeric);\n                    } catch (final NumberFormatException e) { // NOPMD\n                        // ignore the bad number\n                    }\n                    //$FALL-THROUGH$\n                default :\n                    throw new NumberFormatException(str + \" is not a valid number.\");\n\n            }",
    "info" : "SwitchStatement[19109-21303]:SwitchStatement[19109-21303]"
  }, {
    "left" : "case 'l' :",
    "right" : "case 'l' :",
    "info" : "SwitchCase[19145-19155]:SwitchCase[19145-19155]"
  }, {
    "left" : "case 'L' :",
    "right" : "case 'L' :",
    "info" : "SwitchCase[19172-19182]:SwitchCase[19172-19182]"
  }, {
    "left" : "if (dec == null\n                        && exp == null\n                        && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric)))",
    "right" : "if (dec == null\n                        && exp == null\n                        && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric)))",
    "info" : "IfStatement[19203-19689]:IfStatement[19203-19689]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[19368-19689]:Block[19368-19689]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[19394-19608]:TryStatement[19394-19608]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[19398-19481]:Block[19398-19481]"
  }, {
    "left" : "return createLong(numeric);",
    "right" : "return createLong(numeric);",
    "info" : "ReturnStatement[19428-19455]:ReturnStatement[19428-19455]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[19522-19608]:Block[19522-19608]"
  }, {
    "left" : "return createBigInteger(numeric);",
    "right" : "return createBigInteger(numeric);",
    "info" : "ReturnStatement[19633-19666]:ReturnStatement[19633-19666]"
  }, {
    "left" : "throw new NumberFormatException(str + \" is not a valid number.\");",
    "right" : "throw new NumberFormatException(str + \" is not a valid number.\");",
    "info" : "ThrowStatement[19710-19775]:ThrowStatement[19710-19775]"
  }, {
    "left" : "case 'f' :",
    "right" : "case 'f' :",
    "info" : "SwitchCase[19792-19802]:SwitchCase[19792-19802]"
  }, {
    "left" : "case 'F' :",
    "right" : "case 'F' :",
    "info" : "SwitchCase[19819-19829]:SwitchCase[19819-19829]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[19850-20422]:TryStatement[19850-20422]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[19854-20300]:Block[19854-20300]"
  }, {
    "left" : "final Float f = NumberUtils.createFloat(numeric);",
    "right" : "final Float f = NumberUtils.createFloat(numeric);",
    "info" : "VariableDeclarationStatement[19880-19929]:VariableDeclarationStatement[19880-19929]"
  }, {
    "left" : "if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros)))",
    "right" : "if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros)))",
    "info" : "IfStatement[19954-20277]:IfStatement[19954-20277]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[20018-20277]:Block[20018-20277]"
  }, {
    "left" : "return f;",
    "right" : "return f;",
    "info" : "ReturnStatement[20242-20251]:ReturnStatement[20242-20251]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[20341-20422]:Block[20341-20422]"
  }, {
    "left" : "case 'd' :",
    "right" : "case 'd' :",
    "info" : "SwitchCase[20476-20486]:SwitchCase[20476-20486]"
  }, {
    "left" : "case 'D' :",
    "right" : "case 'D' :",
    "info" : "SwitchCase[20503-20513]:SwitchCase[20503-20513]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[20534-20913]:TryStatement[20534-20913]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[20538-20791]:Block[20538-20791]"
  }, {
    "left" : "final Double d = NumberUtils.createDouble(numeric);",
    "right" : "final Double d = NumberUtils.createDouble(numeric);",
    "info" : "VariableDeclarationStatement[20564-20615]:VariableDeclarationStatement[20564-20615]"
  }, {
    "left" : "if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros)))",
    "right" : "if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros)))",
    "info" : "IfStatement[20640-20769]:IfStatement[20640-20769]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[20704-20769]:Block[20704-20769]"
  }, {
    "left" : "return d;",
    "right" : "return d;",
    "info" : "ReturnStatement[20734-20743]:ReturnStatement[20734-20743]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[20832-20913]:Block[20832-20913]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[20934-21139]:TryStatement[20934-21139]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[20938-21019]:Block[20938-21019]"
  }, {
    "left" : "return createBigDecimal(numeric);",
    "right" : "return createBigDecimal(numeric);",
    "info" : "ReturnStatement[20964-20997]:ReturnStatement[20964-20997]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[21058-21139]:Block[21058-21139]"
  }, {
    "left" : "default :",
    "right" : "default :",
    "info" : "SwitchCase[21193-21202]:SwitchCase[21193-21202]"
  }, {
    "left" : "throw new NumberFormatException(str + \" is not a valid number.\");",
    "right" : "throw new NumberFormatException(str + \" is not a valid number.\");",
    "info" : "ThrowStatement[21223-21288]:ThrowStatement[21223-21288]"
  }, {
    "left" : "if (expPos > -1 && expPos < str.length() - 1)",
    "right" : "if (expPos > -1 && expPos < str.length() - 1)",
    "info" : "IfStatement[21435-21592]:IfStatement[21435-21592]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[21481-21551]:Block[21481-21551]"
  }, {
    "left" : "exp = str.substring(expPos + 1, str.length());",
    "right" : "exp = str.substring(expPos + 1, str.length());",
    "info" : "ExpressionStatement[21495-21541]:ExpressionStatement[21495-21541]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[21557-21592]:Block[21557-21592]"
  }, {
    "left" : "exp = null;",
    "right" : "exp = null;",
    "info" : "ExpressionStatement[21571-21582]:ExpressionStatement[21571-21582]"
  }, {
    "left" : "if (dec == null && exp == null)",
    "right" : "if (dec == null && exp == null)",
    "info" : "IfStatement[21601-22132]:IfStatement[21601-22132]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[21633-22132]:Block[21633-22132]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[21734-21902]:TryStatement[21734-21902]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[21738-21796]:Block[21738-21796]"
  }, {
    "left" : "return createInteger(str);",
    "right" : "return createInteger(str);",
    "info" : "ReturnStatement[21756-21782]:ReturnStatement[21756-21782]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[21837-21902]:Block[21837-21902]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[21915-22080]:TryStatement[21915-22080]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[21919-21974]:Block[21919-21974]"
  }, {
    "left" : "return createLong(str);",
    "right" : "return createLong(str);",
    "info" : "ReturnStatement[21937-21960]:ReturnStatement[21937-21960]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[22015-22080]:Block[22015-22080]"
  }, {
    "left" : "return createBigInteger(str);",
    "right" : "return createBigInteger(str);",
    "info" : "ReturnStatement[22093-22122]:ReturnStatement[22093-22122]"
  }, {
    "left" : "final boolean allZeros = isAllZeros(mant) && isAllZeros(exp);",
    "right" : "final boolean allZeros = isAllZeros(mant) && isAllZeros(exp);",
    "info" : "VariableDeclarationStatement[22188-22249]:VariableDeclarationStatement[22188-22249]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[22258-22551]:TryStatement[22258-22677]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[22262-22453]:Block[22296-22569]"
  }, {
    "left" : "final Float f = createFloat(str);",
    "right" : "final Float f = createFloat(str);",
    "info" : "VariableDeclarationStatement[22280-22313]:VariableDeclarationStatement[22392-22425]"
  }, {
    "left" : "if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros)))",
    "right" : "if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros)))",
    "info" : "IfStatement[22330-22443]:IfStatement[22442-22555]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[22394-22443]:Block[22506-22555]"
  }, {
    "left" : "return f;",
    "right" : "return f;",
    "info" : "ReturnStatement[22416-22425]:ReturnStatement[22528-22537]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[22494-22551]:Block[22620-22677]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[22560-22856]:TryStatement[22686-23116]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[22564-22758]:Block[22725-23008]"
  }, {
    "left" : "final Double d = createDouble(str);",
    "right" : "final Double d = createDouble(str);",
    "info" : "VariableDeclarationStatement[22582-22617]:VariableDeclarationStatement[22828-22863]"
  }, {
    "left" : "if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros)))",
    "right" : "if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros)))",
    "info" : "IfStatement[22634-22748]:IfStatement[22880-22994]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[22699-22748]:Block[22945-22994]"
  }, {
    "left" : "return d;",
    "right" : "return d;",
    "info" : "ReturnStatement[22721-22730]:ReturnStatement[22967-22976]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[22799-22856]:Block[23059-23116]"
  }, {
    "left" : "return createBigDecimal(str);",
    "right" : "return createBigDecimal(str);",
    "info" : "ReturnStatement[22866-22895]:ReturnStatement[23126-23155]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[23173-23180]:Modifier[23433-23440]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[23181-23187]:Modifier[23441-23447]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[23188-23195]:PrimitiveType[23448-23455]"
  }, {
    "left" : "isAllZeros",
    "right" : "isAllZeros",
    "info" : "SimpleName[23196-23206]:SimpleName[23456-23466]"
  }, {
    "left" : "final String str",
    "right" : "final String str",
    "info" : "SingleVariableDeclaration[23207-23223]:SingleVariableDeclaration[23467-23483]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[23225-23475]:Block[23485-23735]"
  }, {
    "left" : "if (str == null)",
    "right" : "if (str == null)",
    "info" : "IfStatement[23235-23288]:IfStatement[23495-23548]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[23252-23288]:Block[23512-23548]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[23266-23278]:ReturnStatement[23526-23538]"
  }, {
    "left" : "for (int i = str.length() - 1; i >= 0; i--)",
    "right" : "for (int i = str.length() - 1; i >= 0; i--)",
    "info" : "ForStatement[23297-23436]:ForStatement[23557-23696]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[23341-23436]:Block[23601-23696]"
  }, {
    "left" : "if (str.charAt(i) != '0')",
    "right" : "if (str.charAt(i) != '0')",
    "info" : "IfStatement[23355-23426]:IfStatement[23615-23686]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[23381-23426]:Block[23641-23686]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[23399-23412]:ReturnStatement[23659-23672]"
  }, {
    "left" : "return str.length() > 0;",
    "right" : "return str.length() > 0;",
    "info" : "ReturnStatement[23445-23469]:ReturnStatement[23705-23729]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[23945-23951]:Modifier[24205-24211]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[23952-23958]:Modifier[24212-24218]"
  }, {
    "left" : "Float",
    "right" : "Float",
    "info" : "SimpleType[23959-23964]:SimpleType[24219-24224]"
  }, {
    "left" : "createFloat",
    "right" : "createFloat",
    "info" : "SimpleName[23965-23976]:SimpleName[24225-24236]"
  }, {
    "left" : "final String str",
    "right" : "final String str",
    "info" : "SingleVariableDeclaration[23977-23993]:SingleVariableDeclaration[24237-24253]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[23995-24099]:Block[24255-24359]"
  }, {
    "left" : "if (str == null)",
    "right" : "if (str == null)",
    "info" : "IfStatement[24005-24058]:IfStatement[24265-24318]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[24022-24058]:Block[24282-24318]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[24036-24048]:ReturnStatement[24296-24308]"
  }, {
    "left" : "return Float.valueOf(str);",
    "right" : "return Float.valueOf(str);",
    "info" : "ReturnStatement[24067-24093]:ReturnStatement[24327-24353]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[24493-24499]:Modifier[24753-24759]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[24500-24506]:Modifier[24760-24766]"
  }, {
    "left" : "Double",
    "right" : "Double",
    "info" : "SimpleType[24507-24513]:SimpleType[24767-24773]"
  }, {
    "left" : "createDouble",
    "right" : "createDouble",
    "info" : "SimpleName[24514-24526]:SimpleName[24774-24786]"
  }, {
    "left" : "final String str",
    "right" : "final String str",
    "info" : "SingleVariableDeclaration[24527-24543]:SingleVariableDeclaration[24787-24803]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[24545-24650]:Block[24805-24910]"
  }, {
    "left" : "if (str == null)",
    "right" : "if (str == null)",
    "info" : "IfStatement[24555-24608]:IfStatement[24815-24868]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[24572-24608]:Block[24832-24868]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[24586-24598]:ReturnStatement[24846-24858]"
  }, {
    "left" : "return Double.valueOf(str);",
    "right" : "return Double.valueOf(str);",
    "info" : "ReturnStatement[24617-24644]:ReturnStatement[24877-24904]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[25087-25093]:Modifier[25347-25353]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[25094-25100]:Modifier[25354-25360]"
  }, {
    "left" : "Integer",
    "right" : "Integer",
    "info" : "SimpleType[25101-25108]:SimpleType[25361-25368]"
  }, {
    "left" : "createInteger",
    "right" : "createInteger",
    "info" : "SimpleName[25109-25122]:SimpleName[25369-25382]"
  }, {
    "left" : "final String str",
    "right" : "final String str",
    "info" : "SingleVariableDeclaration[25123-25139]:SingleVariableDeclaration[25383-25399]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[25141-25315]:Block[25401-25575]"
  }, {
    "left" : "if (str == null)",
    "right" : "if (str == null)",
    "info" : "IfStatement[25151-25204]:IfStatement[25411-25464]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[25168-25204]:Block[25428-25464]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[25182-25194]:ReturnStatement[25442-25454]"
  }, {
    "left" : "return Integer.decode(str);",
    "right" : "return Integer.decode(str);",
    "info" : "ReturnStatement[25282-25309]:ReturnStatement[25542-25569]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[25759-25765]:Modifier[26019-26025]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[25766-25772]:Modifier[26026-26032]"
  }, {
    "left" : "Long",
    "right" : "Long",
    "info" : "SimpleType[25773-25777]:SimpleType[26033-26037]"
  }, {
    "left" : "createLong",
    "right" : "createLong",
    "info" : "SimpleName[25778-25788]:SimpleName[26038-26048]"
  }, {
    "left" : "final String str",
    "right" : "final String str",
    "info" : "SingleVariableDeclaration[25789-25805]:SingleVariableDeclaration[26049-26065]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[25807-25909]:Block[26067-26169]"
  }, {
    "left" : "if (str == null)",
    "right" : "if (str == null)",
    "info" : "IfStatement[25817-25870]:IfStatement[26077-26130]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[25834-25870]:Block[26094-26130]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[25848-25860]:ReturnStatement[26108-26120]"
  }, {
    "left" : "return Long.decode(str);",
    "right" : "return Long.decode(str);",
    "info" : "ReturnStatement[25879-25903]:ReturnStatement[26139-26163]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[26378-26384]:Modifier[26638-26644]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[26385-26391]:Modifier[26645-26651]"
  }, {
    "left" : "BigInteger",
    "right" : "BigInteger",
    "info" : "SimpleType[26392-26402]:SimpleType[26652-26662]"
  }, {
    "left" : "createBigInteger",
    "right" : "createBigInteger",
    "info" : "SimpleName[26403-26419]:SimpleName[26663-26679]"
  }, {
    "left" : "final String str",
    "right" : "final String str",
    "info" : "SingleVariableDeclaration[26420-26436]:SingleVariableDeclaration[26680-26696]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[26438-27319]:Block[26698-27579]"
  }, {
    "left" : "if (str == null)",
    "right" : "if (str == null)",
    "info" : "IfStatement[26448-26501]:IfStatement[26708-26761]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[26465-26501]:Block[26725-26761]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[26479-26491]:ReturnStatement[26739-26751]"
  }, {
    "left" : "int pos = 0;",
    "right" : "int pos = 0;",
    "info" : "VariableDeclarationStatement[26510-26522]:VariableDeclarationStatement[26770-26782]"
  }, {
    "left" : "int radix = 10;",
    "right" : "int radix = 10;",
    "info" : "VariableDeclarationStatement[26555-26570]:VariableDeclarationStatement[26815-26830]"
  }, {
    "left" : "boolean negate = false;",
    "right" : "boolean negate = false;",
    "info" : "VariableDeclarationStatement[26579-26602]:VariableDeclarationStatement[26839-26862]"
  }, {
    "left" : "if (str.startsWith(\"-\"))",
    "right" : "if (str.startsWith(\"-\"))",
    "info" : "IfStatement[26636-26720]:IfStatement[26896-26980]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[26661-26720]:Block[26921-26980]"
  }, {
    "left" : "negate = true;",
    "right" : "negate = true;",
    "info" : "ExpressionStatement[26675-26689]:ExpressionStatement[26935-26949]"
  }, {
    "left" : "pos = 1;",
    "right" : "pos = 1;",
    "info" : "ExpressionStatement[26702-26710]:ExpressionStatement[26962-26970]"
  }, {
    "left" : "if (str.startsWith(\"0x\", pos) || str.startsWith(\"0x\", pos))",
    "right" : "if (str.startsWith(\"0x\", pos) || str.startsWith(\"0x\", pos))",
    "info" : "IfStatement[26729-27154]:IfStatement[26989-27414]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[26789-26853]:Block[27049-27113]"
  }, {
    "left" : "radix = 16;",
    "right" : "radix = 16;",
    "info" : "ExpressionStatement[26810-26821]:ExpressionStatement[27070-27081]"
  }, {
    "left" : "pos += 2;",
    "right" : "pos += 2;",
    "info" : "ExpressionStatement[26834-26843]:ExpressionStatement[27094-27103]"
  }, {
    "left" : "if (str.startsWith(\"#\", pos))",
    "right" : "if (str.startsWith(\"#\", pos))",
    "info" : "IfStatement[26859-27154]:IfStatement[27119-27414]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[26889-26989]:Block[27149-27249]"
  }, {
    "left" : "radix = 16;",
    "right" : "radix = 16;",
    "info" : "ExpressionStatement[26948-26959]:ExpressionStatement[27208-27219]"
  }, {
    "left" : "pos ++;",
    "right" : "pos ++;",
    "info" : "ExpressionStatement[26972-26979]:ExpressionStatement[27232-27239]"
  }, {
    "left" : "if (str.startsWith(\"0\", pos) && str.length() > pos + 1)",
    "right" : "if (str.startsWith(\"0\", pos) && str.length() > pos + 1)",
    "info" : "IfStatement[26995-27154]:IfStatement[27255-27414]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[27051-27154]:Block[27311-27414]"
  }, {
    "left" : "radix = 8;",
    "right" : "radix = 8;",
    "info" : "ExpressionStatement[27114-27124]:ExpressionStatement[27374-27384]"
  }, {
    "left" : "pos ++;",
    "right" : "pos ++;",
    "info" : "ExpressionStatement[27137-27144]:ExpressionStatement[27397-27404]"
  }, {
    "left" : "final BigInteger value = new BigInteger(str.substring(pos), radix);",
    "right" : "final BigInteger value = new BigInteger(str.substring(pos), radix);",
    "info" : "VariableDeclarationStatement[27198-27265]:VariableDeclarationStatement[27458-27525]"
  }, {
    "left" : "return negate ? value.negate() : value;",
    "right" : "return negate ? value.negate() : value;",
    "info" : "ReturnStatement[27274-27313]:ReturnStatement[27534-27573]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[27721-27727]:Modifier[27981-27987]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[27728-27734]:Modifier[27988-27994]"
  }, {
    "left" : "BigDecimal",
    "right" : "BigDecimal",
    "info" : "SimpleType[27735-27745]:SimpleType[27995-28005]"
  }, {
    "left" : "createBigDecimal",
    "right" : "createBigDecimal",
    "info" : "SimpleName[27746-27762]:SimpleName[28006-28022]"
  }, {
    "left" : "final String str",
    "right" : "final String str",
    "info" : "SingleVariableDeclaration[27763-27779]:SingleVariableDeclaration[28023-28039]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[27781-28472]:Block[28041-28732]"
  }, {
    "left" : "if (str == null)",
    "right" : "if (str == null)",
    "info" : "IfStatement[27791-27844]:IfStatement[28051-28104]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[27808-27844]:Block[28068-28104]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[27822-27834]:ReturnStatement[28082-28094]"
  }, {
    "left" : "if (StringUtils.isBlank(str))",
    "right" : "if (StringUtils.isBlank(str))",
    "info" : "IfStatement[27926-28052]:IfStatement[28186-28312]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[27956-28052]:Block[28216-28312]"
  }, {
    "left" : "throw new NumberFormatException(\"A blank string is not a valid number\");",
    "right" : "throw new NumberFormatException(\"A blank string is not a valid number\");",
    "info" : "ThrowStatement[27970-28042]:ThrowStatement[28230-28302]"
  }, {
    "left" : "if (str.trim().startsWith(\"--\"))",
    "right" : "if (str.trim().startsWith(\"--\"))",
    "info" : "IfStatement[28061-28430]:IfStatement[28321-28690]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[28094-28430]:Block[28354-28690]"
  }, {
    "left" : "throw new NumberFormatException(str + \" is not a valid number.\");",
    "right" : "throw new NumberFormatException(str + \" is not a valid number.\");",
    "info" : "ThrowStatement[28355-28420]:ThrowStatement[28615-28680]"
  }, {
    "left" : "return new BigDecimal(str);",
    "right" : "return new BigDecimal(str);",
    "info" : "ReturnStatement[28439-28466]:ReturnStatement[28699-28726]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[28907-28913]:Modifier[29167-29173]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[28914-28920]:Modifier[29174-29180]"
  }, {
    "left" : "long",
    "right" : "long",
    "info" : "PrimitiveType[28921-28925]:PrimitiveType[29181-29185]"
  }, {
    "left" : "min",
    "right" : "min",
    "info" : "SimpleName[28926-28929]:SimpleName[29186-29189]"
  }, {
    "left" : "final long[] array",
    "right" : "final long[] array",
    "info" : "SingleVariableDeclaration[28930-28948]:SingleVariableDeclaration[29190-29208]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[28950-29245]:Block[29210-29505]"
  }, {
    "left" : "validateArray(array);",
    "right" : "validateArray(array);",
    "info" : "ExpressionStatement[28987-29008]:ExpressionStatement[29247-29268]"
  }, {
    "left" : "long min = array[0];",
    "right" : "long min = array[0];",
    "info" : "VariableDeclarationStatement[29055-29075]:VariableDeclarationStatement[29315-29335]"
  }, {
    "left" : "for (int i = 1; i < array.length; i++)",
    "right" : "for (int i = 1; i < array.length; i++)",
    "info" : "ForStatement[29084-29214]:ForStatement[29344-29474]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[29123-29214]:Block[29383-29474]"
  }, {
    "left" : "if (array[i] < min)",
    "right" : "if (array[i] < min)",
    "info" : "IfStatement[29137-29204]:IfStatement[29397-29464]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[29157-29204]:Block[29417-29464]"
  }, {
    "left" : "min = array[i];",
    "right" : "min = array[i];",
    "info" : "ExpressionStatement[29175-29190]:ExpressionStatement[29435-29450]"
  }, {
    "left" : "return min;",
    "right" : "return min;",
    "info" : "ReturnStatement[29228-29239]:ReturnStatement[29488-29499]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[29585-29591]:Modifier[29845-29851]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[29592-29598]:Modifier[29852-29858]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[29599-29602]:PrimitiveType[29859-29862]"
  }, {
    "left" : "min",
    "right" : "min",
    "info" : "SimpleName[29603-29606]:SimpleName[29863-29866]"
  }, {
    "left" : "final int[] array",
    "right" : "final int[] array",
    "info" : "SingleVariableDeclaration[29607-29624]:SingleVariableDeclaration[29867-29884]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[29626-29920]:Block[29886-30180]"
  }, {
    "left" : "validateArray(array);",
    "right" : "validateArray(array);",
    "info" : "ExpressionStatement[29663-29684]:ExpressionStatement[29923-29944]"
  }, {
    "left" : "int min = array[0];",
    "right" : "int min = array[0];",
    "info" : "VariableDeclarationStatement[29731-29750]:VariableDeclarationStatement[29991-30010]"
  }, {
    "left" : "for (int j = 1; j < array.length; j++)",
    "right" : "for (int j = 1; j < array.length; j++)",
    "info" : "ForStatement[29759-29889]:ForStatement[30019-30149]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[29798-29889]:Block[30058-30149]"
  }, {
    "left" : "if (array[j] < min)",
    "right" : "if (array[j] < min)",
    "info" : "IfStatement[29812-29879]:IfStatement[30072-30139]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[29832-29879]:Block[30092-30139]"
  }, {
    "left" : "min = array[j];",
    "right" : "min = array[j];",
    "info" : "ExpressionStatement[29850-29865]:ExpressionStatement[30110-30125]"
  }, {
    "left" : "return min;",
    "right" : "return min;",
    "info" : "ReturnStatement[29903-29914]:ReturnStatement[30163-30174]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[30260-30266]:Modifier[30520-30526]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[30267-30273]:Modifier[30527-30533]"
  }, {
    "left" : "short",
    "right" : "short",
    "info" : "PrimitiveType[30274-30279]:PrimitiveType[30534-30539]"
  }, {
    "left" : "min",
    "right" : "min",
    "info" : "SimpleName[30280-30283]:SimpleName[30540-30543]"
  }, {
    "left" : "final short[] array",
    "right" : "final short[] array",
    "info" : "SingleVariableDeclaration[30284-30303]:SingleVariableDeclaration[30544-30563]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[30305-30601]:Block[30565-30861]"
  }, {
    "left" : "validateArray(array);",
    "right" : "validateArray(array);",
    "info" : "ExpressionStatement[30342-30363]:ExpressionStatement[30602-30623]"
  }, {
    "left" : "short min = array[0];",
    "right" : "short min = array[0];",
    "info" : "VariableDeclarationStatement[30410-30431]:VariableDeclarationStatement[30670-30691]"
  }, {
    "left" : "for (int i = 1; i < array.length; i++)",
    "right" : "for (int i = 1; i < array.length; i++)",
    "info" : "ForStatement[30440-30570]:ForStatement[30700-30830]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[30479-30570]:Block[30739-30830]"
  }, {
    "left" : "if (array[i] < min)",
    "right" : "if (array[i] < min)",
    "info" : "IfStatement[30493-30560]:IfStatement[30753-30820]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[30513-30560]:Block[30773-30820]"
  }, {
    "left" : "min = array[i];",
    "right" : "min = array[i];",
    "info" : "ExpressionStatement[30531-30546]:ExpressionStatement[30791-30806]"
  }, {
    "left" : "return min;",
    "right" : "return min;",
    "info" : "ReturnStatement[30584-30595]:ReturnStatement[30844-30855]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[30941-30947]:Modifier[31201-31207]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[30948-30954]:Modifier[31208-31214]"
  }, {
    "left" : "byte",
    "right" : "byte",
    "info" : "PrimitiveType[30955-30959]:PrimitiveType[31215-31219]"
  }, {
    "left" : "min",
    "right" : "min",
    "info" : "SimpleName[30960-30963]:SimpleName[31220-31223]"
  }, {
    "left" : "final byte[] array",
    "right" : "final byte[] array",
    "info" : "SingleVariableDeclaration[30964-30982]:SingleVariableDeclaration[31224-31242]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[30984-31279]:Block[31244-31539]"
  }, {
    "left" : "validateArray(array);",
    "right" : "validateArray(array);",
    "info" : "ExpressionStatement[31021-31042]:ExpressionStatement[31281-31302]"
  }, {
    "left" : "byte min = array[0];",
    "right" : "byte min = array[0];",
    "info" : "VariableDeclarationStatement[31089-31109]:VariableDeclarationStatement[31349-31369]"
  }, {
    "left" : "for (int i = 1; i < array.length; i++)",
    "right" : "for (int i = 1; i < array.length; i++)",
    "info" : "ForStatement[31118-31248]:ForStatement[31378-31508]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[31157-31248]:Block[31417-31508]"
  }, {
    "left" : "if (array[i] < min)",
    "right" : "if (array[i] < min)",
    "info" : "IfStatement[31171-31238]:IfStatement[31431-31498]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[31191-31238]:Block[31451-31498]"
  }, {
    "left" : "min = array[i];",
    "right" : "min = array[i];",
    "info" : "ExpressionStatement[31209-31224]:ExpressionStatement[31469-31484]"
  }, {
    "left" : "return min;",
    "right" : "return min;",
    "info" : "ReturnStatement[31262-31273]:ReturnStatement[31522-31533]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[31732-31738]:Modifier[31992-31998]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[31739-31745]:Modifier[31999-32005]"
  }, {
    "left" : "double",
    "right" : "double",
    "info" : "PrimitiveType[31746-31752]:PrimitiveType[32006-32012]"
  }, {
    "left" : "min",
    "right" : "min",
    "info" : "SimpleName[31753-31756]:SimpleName[32013-32016]"
  }, {
    "left" : "final double[] array",
    "right" : "final double[] array",
    "info" : "SingleVariableDeclaration[31757-31777]:SingleVariableDeclaration[32017-32037]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[31779-32167]:Block[32039-32427]"
  }, {
    "left" : "validateArray(array);",
    "right" : "validateArray(array);",
    "info" : "ExpressionStatement[31816-31837]:ExpressionStatement[32076-32097]"
  }, {
    "left" : "double min = array[0];",
    "right" : "double min = array[0];",
    "info" : "VariableDeclarationStatement[31884-31906]:VariableDeclarationStatement[32144-32166]"
  }, {
    "left" : "for (int i = 1; i < array.length; i++)",
    "right" : "for (int i = 1; i < array.length; i++)",
    "info" : "ForStatement[31915-32136]:ForStatement[32175-32396]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[31954-32136]:Block[32214-32396]"
  }, {
    "left" : "if (Double.isNaN(array[i]))",
    "right" : "if (Double.isNaN(array[i]))",
    "info" : "IfStatement[31968-32046]:IfStatement[32228-32306]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[31996-32046]:Block[32256-32306]"
  }, {
    "left" : "return Double.NaN;",
    "right" : "return Double.NaN;",
    "info" : "ReturnStatement[32014-32032]:ReturnStatement[32274-32292]"
  }, {
    "left" : "if (array[i] < min)",
    "right" : "if (array[i] < min)",
    "info" : "IfStatement[32059-32126]:IfStatement[32319-32386]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[32079-32126]:Block[32339-32386]"
  }, {
    "left" : "min = array[i];",
    "right" : "min = array[i];",
    "info" : "ExpressionStatement[32097-32112]:ExpressionStatement[32357-32372]"
  }, {
    "left" : "return min;",
    "right" : "return min;",
    "info" : "ReturnStatement[32150-32161]:ReturnStatement[32410-32421]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[32618-32624]:Modifier[32878-32884]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[32625-32631]:Modifier[32885-32891]"
  }, {
    "left" : "float",
    "right" : "float",
    "info" : "PrimitiveType[32632-32637]:PrimitiveType[32892-32897]"
  }, {
    "left" : "min",
    "right" : "min",
    "info" : "SimpleName[32638-32641]:SimpleName[32898-32901]"
  }, {
    "left" : "final float[] array",
    "right" : "final float[] array",
    "info" : "SingleVariableDeclaration[32642-32661]:SingleVariableDeclaration[32902-32921]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[32663-33048]:Block[32923-33308]"
  }, {
    "left" : "validateArray(array);",
    "right" : "validateArray(array);",
    "info" : "ExpressionStatement[32700-32721]:ExpressionStatement[32960-32981]"
  }, {
    "left" : "float min = array[0];",
    "right" : "float min = array[0];",
    "info" : "VariableDeclarationStatement[32768-32789]:VariableDeclarationStatement[33028-33049]"
  }, {
    "left" : "for (int i = 1; i < array.length; i++)",
    "right" : "for (int i = 1; i < array.length; i++)",
    "info" : "ForStatement[32798-33017]:ForStatement[33058-33277]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[32837-33017]:Block[33097-33277]"
  }, {
    "left" : "if (Float.isNaN(array[i]))",
    "right" : "if (Float.isNaN(array[i]))",
    "info" : "IfStatement[32851-32927]:IfStatement[33111-33187]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[32878-32927]:Block[33138-33187]"
  }, {
    "left" : "return Float.NaN;",
    "right" : "return Float.NaN;",
    "info" : "ReturnStatement[32896-32913]:ReturnStatement[33156-33173]"
  }, {
    "left" : "if (array[i] < min)",
    "right" : "if (array[i] < min)",
    "info" : "IfStatement[32940-33007]:IfStatement[33200-33267]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[32960-33007]:Block[33220-33267]"
  }, {
    "left" : "min = array[i];",
    "right" : "min = array[i];",
    "info" : "ExpressionStatement[32978-32993]:ExpressionStatement[33238-33253]"
  }, {
    "left" : "return min;",
    "right" : "return min;",
    "info" : "ReturnStatement[33031-33042]:ReturnStatement[33291-33302]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[33483-33489]:Modifier[33743-33749]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[33490-33496]:Modifier[33750-33756]"
  }, {
    "left" : "long",
    "right" : "long",
    "info" : "PrimitiveType[33497-33501]:PrimitiveType[33757-33761]"
  }, {
    "left" : "max",
    "right" : "max",
    "info" : "SimpleName[33502-33505]:SimpleName[33762-33765]"
  }, {
    "left" : "final long[] array",
    "right" : "final long[] array",
    "info" : "SingleVariableDeclaration[33506-33524]:SingleVariableDeclaration[33766-33784]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[33526-33813]:Block[33786-34073]"
  }, {
    "left" : "validateArray(array);",
    "right" : "validateArray(array);",
    "info" : "ExpressionStatement[33563-33584]:ExpressionStatement[33823-33844]"
  }, {
    "left" : "long max = array[0];",
    "right" : "long max = array[0];",
    "info" : "VariableDeclarationStatement[33627-33647]:VariableDeclarationStatement[33887-33907]"
  }, {
    "left" : "for (int j = 1; j < array.length; j++)",
    "right" : "for (int j = 1; j < array.length; j++)",
    "info" : "ForStatement[33656-33786]:ForStatement[33916-34046]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[33695-33786]:Block[33955-34046]"
  }, {
    "left" : "if (array[j] > max)",
    "right" : "if (array[j] > max)",
    "info" : "IfStatement[33709-33776]:IfStatement[33969-34036]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[33729-33776]:Block[33989-34036]"
  }, {
    "left" : "max = array[j];",
    "right" : "max = array[j];",
    "info" : "ExpressionStatement[33747-33762]:ExpressionStatement[34007-34022]"
  }, {
    "left" : "return max;",
    "right" : "return max;",
    "info" : "ReturnStatement[33796-33807]:ReturnStatement[34056-34067]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[34153-34159]:Modifier[34413-34419]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[34160-34166]:Modifier[34420-34426]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[34167-34170]:PrimitiveType[34427-34430]"
  }, {
    "left" : "max",
    "right" : "max",
    "info" : "SimpleName[34171-34174]:SimpleName[34431-34434]"
  }, {
    "left" : "final int[] array",
    "right" : "final int[] array",
    "info" : "SingleVariableDeclaration[34175-34192]:SingleVariableDeclaration[34435-34452]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[34194-34488]:Block[34454-34748]"
  }, {
    "left" : "validateArray(array);",
    "right" : "validateArray(array);",
    "info" : "ExpressionStatement[34231-34252]:ExpressionStatement[34491-34512]"
  }, {
    "left" : "int max = array[0];",
    "right" : "int max = array[0];",
    "info" : "VariableDeclarationStatement[34299-34318]:VariableDeclarationStatement[34559-34578]"
  }, {
    "left" : "for (int j = 1; j < array.length; j++)",
    "right" : "for (int j = 1; j < array.length; j++)",
    "info" : "ForStatement[34327-34457]:ForStatement[34587-34717]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[34366-34457]:Block[34626-34717]"
  }, {
    "left" : "if (array[j] > max)",
    "right" : "if (array[j] > max)",
    "info" : "IfStatement[34380-34447]:IfStatement[34640-34707]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[34400-34447]:Block[34660-34707]"
  }, {
    "left" : "max = array[j];",
    "right" : "max = array[j];",
    "info" : "ExpressionStatement[34418-34433]:ExpressionStatement[34678-34693]"
  }, {
    "left" : "return max;",
    "right" : "return max;",
    "info" : "ReturnStatement[34471-34482]:ReturnStatement[34731-34742]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[34828-34834]:Modifier[35088-35094]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[34835-34841]:Modifier[35095-35101]"
  }, {
    "left" : "short",
    "right" : "short",
    "info" : "PrimitiveType[34842-34847]:PrimitiveType[35102-35107]"
  }, {
    "left" : "max",
    "right" : "max",
    "info" : "SimpleName[34848-34851]:SimpleName[35108-35111]"
  }, {
    "left" : "final short[] array",
    "right" : "final short[] array",
    "info" : "SingleVariableDeclaration[34852-34871]:SingleVariableDeclaration[35112-35131]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[34873-35169]:Block[35133-35429]"
  }, {
    "left" : "validateArray(array);",
    "right" : "validateArray(array);",
    "info" : "ExpressionStatement[34910-34931]:ExpressionStatement[35170-35191]"
  }, {
    "left" : "short max = array[0];",
    "right" : "short max = array[0];",
    "info" : "VariableDeclarationStatement[34978-34999]:VariableDeclarationStatement[35238-35259]"
  }, {
    "left" : "for (int i = 1; i < array.length; i++)",
    "right" : "for (int i = 1; i < array.length; i++)",
    "info" : "ForStatement[35008-35138]:ForStatement[35268-35398]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[35047-35138]:Block[35307-35398]"
  }, {
    "left" : "if (array[i] > max)",
    "right" : "if (array[i] > max)",
    "info" : "IfStatement[35061-35128]:IfStatement[35321-35388]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[35081-35128]:Block[35341-35388]"
  }, {
    "left" : "max = array[i];",
    "right" : "max = array[i];",
    "info" : "ExpressionStatement[35099-35114]:ExpressionStatement[35359-35374]"
  }, {
    "left" : "return max;",
    "right" : "return max;",
    "info" : "ReturnStatement[35152-35163]:ReturnStatement[35412-35423]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[35509-35515]:Modifier[35769-35775]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[35516-35522]:Modifier[35776-35782]"
  }, {
    "left" : "byte",
    "right" : "byte",
    "info" : "PrimitiveType[35523-35527]:PrimitiveType[35783-35787]"
  }, {
    "left" : "max",
    "right" : "max",
    "info" : "SimpleName[35528-35531]:SimpleName[35788-35791]"
  }, {
    "left" : "final byte[] array",
    "right" : "final byte[] array",
    "info" : "SingleVariableDeclaration[35532-35550]:SingleVariableDeclaration[35792-35810]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[35552-35847]:Block[35812-36107]"
  }, {
    "left" : "validateArray(array);",
    "right" : "validateArray(array);",
    "info" : "ExpressionStatement[35589-35610]:ExpressionStatement[35849-35870]"
  }, {
    "left" : "byte max = array[0];",
    "right" : "byte max = array[0];",
    "info" : "VariableDeclarationStatement[35657-35677]:VariableDeclarationStatement[35917-35937]"
  }, {
    "left" : "for (int i = 1; i < array.length; i++)",
    "right" : "for (int i = 1; i < array.length; i++)",
    "info" : "ForStatement[35686-35816]:ForStatement[35946-36076]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[35725-35816]:Block[35985-36076]"
  }, {
    "left" : "if (array[i] > max)",
    "right" : "if (array[i] > max)",
    "info" : "IfStatement[35739-35806]:IfStatement[35999-36066]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[35759-35806]:Block[36019-36066]"
  }, {
    "left" : "max = array[i];",
    "right" : "max = array[i];",
    "info" : "ExpressionStatement[35777-35792]:ExpressionStatement[36037-36052]"
  }, {
    "left" : "return max;",
    "right" : "return max;",
    "info" : "ReturnStatement[35830-35841]:ReturnStatement[36090-36101]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[36299-36305]:Modifier[36559-36565]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[36306-36312]:Modifier[36566-36572]"
  }, {
    "left" : "double",
    "right" : "double",
    "info" : "PrimitiveType[36313-36319]:PrimitiveType[36573-36579]"
  }, {
    "left" : "max",
    "right" : "max",
    "info" : "SimpleName[36320-36323]:SimpleName[36580-36583]"
  }, {
    "left" : "final double[] array",
    "right" : "final double[] array",
    "info" : "SingleVariableDeclaration[36324-36344]:SingleVariableDeclaration[36584-36604]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[36346-36730]:Block[36606-36990]"
  }, {
    "left" : "validateArray(array);",
    "right" : "validateArray(array);",
    "info" : "ExpressionStatement[36383-36404]:ExpressionStatement[36643-36664]"
  }, {
    "left" : "double max = array[0];",
    "right" : "double max = array[0];",
    "info" : "VariableDeclarationStatement[36447-36469]:VariableDeclarationStatement[36707-36729]"
  }, {
    "left" : "for (int j = 1; j < array.length; j++)",
    "right" : "for (int j = 1; j < array.length; j++)",
    "info" : "ForStatement[36478-36699]:ForStatement[36738-36959]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[36517-36699]:Block[36777-36959]"
  }, {
    "left" : "if (Double.isNaN(array[j]))",
    "right" : "if (Double.isNaN(array[j]))",
    "info" : "IfStatement[36531-36609]:IfStatement[36791-36869]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[36559-36609]:Block[36819-36869]"
  }, {
    "left" : "return Double.NaN;",
    "right" : "return Double.NaN;",
    "info" : "ReturnStatement[36577-36595]:ReturnStatement[36837-36855]"
  }, {
    "left" : "if (array[j] > max)",
    "right" : "if (array[j] > max)",
    "info" : "IfStatement[36622-36689]:IfStatement[36882-36949]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[36642-36689]:Block[36902-36949]"
  }, {
    "left" : "max = array[j];",
    "right" : "max = array[j];",
    "info" : "ExpressionStatement[36660-36675]:ExpressionStatement[36920-36935]"
  }, {
    "left" : "return max;",
    "right" : "return max;",
    "info" : "ReturnStatement[36713-36724]:ReturnStatement[36973-36984]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[37181-37187]:Modifier[37441-37447]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[37188-37194]:Modifier[37448-37454]"
  }, {
    "left" : "float",
    "right" : "float",
    "info" : "PrimitiveType[37195-37200]:PrimitiveType[37455-37460]"
  }, {
    "left" : "max",
    "right" : "max",
    "info" : "SimpleName[37201-37204]:SimpleName[37461-37464]"
  }, {
    "left" : "final float[] array",
    "right" : "final float[] array",
    "info" : "SingleVariableDeclaration[37205-37224]:SingleVariableDeclaration[37465-37484]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[37226-37603]:Block[37486-37863]"
  }, {
    "left" : "validateArray(array);",
    "right" : "validateArray(array);",
    "info" : "ExpressionStatement[37263-37284]:ExpressionStatement[37523-37544]"
  }, {
    "left" : "float max = array[0];",
    "right" : "float max = array[0];",
    "info" : "VariableDeclarationStatement[37327-37348]:VariableDeclarationStatement[37587-37608]"
  }, {
    "left" : "for (int j = 1; j < array.length; j++)",
    "right" : "for (int j = 1; j < array.length; j++)",
    "info" : "ForStatement[37357-37576]:ForStatement[37617-37836]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[37396-37576]:Block[37656-37836]"
  }, {
    "left" : "if (Float.isNaN(array[j]))",
    "right" : "if (Float.isNaN(array[j]))",
    "info" : "IfStatement[37410-37486]:IfStatement[37670-37746]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[37437-37486]:Block[37697-37746]"
  }, {
    "left" : "return Float.NaN;",
    "right" : "return Float.NaN;",
    "info" : "ReturnStatement[37455-37472]:ReturnStatement[37715-37732]"
  }, {
    "left" : "if (array[j] > max)",
    "right" : "if (array[j] > max)",
    "info" : "IfStatement[37499-37566]:IfStatement[37759-37826]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[37519-37566]:Block[37779-37826]"
  }, {
    "left" : "max = array[j];",
    "right" : "max = array[j];",
    "info" : "ExpressionStatement[37537-37552]:ExpressionStatement[37797-37812]"
  }, {
    "left" : "return max;",
    "right" : "return max;",
    "info" : "ReturnStatement[37586-37597]:ReturnStatement[37846-37857]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[37825-37832]:Modifier[38085-38092]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[37833-37839]:Modifier[38093-38099]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[37840-37844]:PrimitiveType[38100-38104]"
  }, {
    "left" : "validateArray",
    "right" : "validateArray",
    "info" : "SimpleName[37845-37858]:SimpleName[38105-38118]"
  }, {
    "left" : "final Object array",
    "right" : "final Object array",
    "info" : "SingleVariableDeclaration[37859-37877]:SingleVariableDeclaration[38119-38137]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[37879-38127]:Block[38139-38387]"
  }, {
    "left" : "if (array == null)",
    "right" : "if (array == null)",
    "info" : "IfStatement[37889-38121]:IfStatement[38149-38381]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[37908-37997]:Block[38168-38257]"
  }, {
    "left" : "throw new IllegalArgumentException(\"The Array must not be null\");",
    "right" : "throw new IllegalArgumentException(\"The Array must not be null\");",
    "info" : "ThrowStatement[37922-37987]:ThrowStatement[38182-38247]"
  }, {
    "left" : "if (Array.getLength(array) == 0)",
    "right" : "if (Array.getLength(array) == 0)",
    "info" : "IfStatement[38003-38121]:IfStatement[38263-38381]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[38036-38121]:Block[38296-38381]"
  }, {
    "left" : "throw new IllegalArgumentException(\"Array cannot be empty.\");",
    "right" : "throw new IllegalArgumentException(\"Array cannot be empty.\");",
    "info" : "ThrowStatement[38050-38111]:ThrowStatement[38310-38371]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[38443-38449]:Modifier[38703-38709]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[38450-38456]:Modifier[38710-38716]"
  }, {
    "left" : "long",
    "right" : "long",
    "info" : "PrimitiveType[38457-38461]:PrimitiveType[38717-38721]"
  }, {
    "left" : "min",
    "right" : "min",
    "info" : "SimpleName[38462-38465]:SimpleName[38722-38725]"
  }, {
    "left" : "long a",
    "right" : "long a",
    "info" : "SingleVariableDeclaration[38466-38472]:SingleVariableDeclaration[38726-38732]"
  }, {
    "left" : "final long b",
    "right" : "final long b",
    "info" : "SingleVariableDeclaration[38474-38486]:SingleVariableDeclaration[38734-38746]"
  }, {
    "left" : "final long c",
    "right" : "final long c",
    "info" : "SingleVariableDeclaration[38488-38500]:SingleVariableDeclaration[38748-38760]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[38502-38627]:Block[38762-38887]"
  }, {
    "left" : "if (b < a)",
    "right" : "if (b < a)",
    "info" : "IfStatement[38512-38553]:IfStatement[38772-38813]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[38523-38553]:Block[38783-38813]"
  }, {
    "left" : "a = b;",
    "right" : "a = b;",
    "info" : "ExpressionStatement[38537-38543]:ExpressionStatement[38797-38803]"
  }, {
    "left" : "if (c < a)",
    "right" : "if (c < a)",
    "info" : "IfStatement[38562-38603]:IfStatement[38822-38863]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[38573-38603]:Block[38833-38863]"
  }, {
    "left" : "a = c;",
    "right" : "a = c;",
    "info" : "ExpressionStatement[38587-38593]:ExpressionStatement[38847-38853]"
  }, {
    "left" : "return a;",
    "right" : "return a;",
    "info" : "ReturnStatement[38612-38621]:ReturnStatement[38872-38881]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[38840-38846]:Modifier[39100-39106]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[38847-38853]:Modifier[39107-39113]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[38854-38857]:PrimitiveType[39114-39117]"
  }, {
    "left" : "min",
    "right" : "min",
    "info" : "SimpleName[38858-38861]:SimpleName[39118-39121]"
  }, {
    "left" : "int a",
    "right" : "int a",
    "info" : "SingleVariableDeclaration[38862-38867]:SingleVariableDeclaration[39122-39127]"
  }, {
    "left" : "final int b",
    "right" : "final int b",
    "info" : "SingleVariableDeclaration[38869-38880]:SingleVariableDeclaration[39129-39140]"
  }, {
    "left" : "final int c",
    "right" : "final int c",
    "info" : "SingleVariableDeclaration[38882-38893]:SingleVariableDeclaration[39142-39153]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[38895-39020]:Block[39155-39280]"
  }, {
    "left" : "if (b < a)",
    "right" : "if (b < a)",
    "info" : "IfStatement[38905-38946]:IfStatement[39165-39206]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[38916-38946]:Block[39176-39206]"
  }, {
    "left" : "a = b;",
    "right" : "a = b;",
    "info" : "ExpressionStatement[38930-38936]:ExpressionStatement[39190-39196]"
  }, {
    "left" : "if (c < a)",
    "right" : "if (c < a)",
    "info" : "IfStatement[38955-38996]:IfStatement[39215-39256]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[38966-38996]:Block[39226-39256]"
  }, {
    "left" : "a = c;",
    "right" : "a = c;",
    "info" : "ExpressionStatement[38980-38986]:ExpressionStatement[39240-39246]"
  }, {
    "left" : "return a;",
    "right" : "return a;",
    "info" : "ReturnStatement[39005-39014]:ReturnStatement[39265-39274]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[39235-39241]:Modifier[39495-39501]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[39242-39248]:Modifier[39502-39508]"
  }, {
    "left" : "short",
    "right" : "short",
    "info" : "PrimitiveType[39249-39254]:PrimitiveType[39509-39514]"
  }, {
    "left" : "min",
    "right" : "min",
    "info" : "SimpleName[39255-39258]:SimpleName[39515-39518]"
  }, {
    "left" : "short a",
    "right" : "short a",
    "info" : "SingleVariableDeclaration[39259-39266]:SingleVariableDeclaration[39519-39526]"
  }, {
    "left" : "final short b",
    "right" : "final short b",
    "info" : "SingleVariableDeclaration[39268-39281]:SingleVariableDeclaration[39528-39541]"
  }, {
    "left" : "final short c",
    "right" : "final short c",
    "info" : "SingleVariableDeclaration[39283-39296]:SingleVariableDeclaration[39543-39556]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[39298-39423]:Block[39558-39683]"
  }, {
    "left" : "if (b < a)",
    "right" : "if (b < a)",
    "info" : "IfStatement[39308-39349]:IfStatement[39568-39609]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[39319-39349]:Block[39579-39609]"
  }, {
    "left" : "a = b;",
    "right" : "a = b;",
    "info" : "ExpressionStatement[39333-39339]:ExpressionStatement[39593-39599]"
  }, {
    "left" : "if (c < a)",
    "right" : "if (c < a)",
    "info" : "IfStatement[39358-39399]:IfStatement[39618-39659]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[39369-39399]:Block[39629-39659]"
  }, {
    "left" : "a = c;",
    "right" : "a = c;",
    "info" : "ExpressionStatement[39383-39389]:ExpressionStatement[39643-39649]"
  }, {
    "left" : "return a;",
    "right" : "return a;",
    "info" : "ReturnStatement[39408-39417]:ReturnStatement[39668-39677]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[39637-39643]:Modifier[39897-39903]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[39644-39650]:Modifier[39904-39910]"
  }, {
    "left" : "byte",
    "right" : "byte",
    "info" : "PrimitiveType[39651-39655]:PrimitiveType[39911-39915]"
  }, {
    "left" : "min",
    "right" : "min",
    "info" : "SimpleName[39656-39659]:SimpleName[39916-39919]"
  }, {
    "left" : "byte a",
    "right" : "byte a",
    "info" : "SingleVariableDeclaration[39660-39666]:SingleVariableDeclaration[39920-39926]"
  }, {
    "left" : "final byte b",
    "right" : "final byte b",
    "info" : "SingleVariableDeclaration[39668-39680]:SingleVariableDeclaration[39928-39940]"
  }, {
    "left" : "final byte c",
    "right" : "final byte c",
    "info" : "SingleVariableDeclaration[39682-39694]:SingleVariableDeclaration[39942-39954]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[39696-39821]:Block[39956-40081]"
  }, {
    "left" : "if (b < a)",
    "right" : "if (b < a)",
    "info" : "IfStatement[39706-39747]:IfStatement[39966-40007]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[39717-39747]:Block[39977-40007]"
  }, {
    "left" : "a = b;",
    "right" : "a = b;",
    "info" : "ExpressionStatement[39731-39737]:ExpressionStatement[39991-39997]"
  }, {
    "left" : "if (c < a)",
    "right" : "if (c < a)",
    "info" : "IfStatement[39756-39797]:IfStatement[40016-40057]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[39767-39797]:Block[40027-40057]"
  }, {
    "left" : "a = c;",
    "right" : "a = c;",
    "info" : "ExpressionStatement[39781-39787]:ExpressionStatement[40041-40047]"
  }, {
    "left" : "return a;",
    "right" : "return a;",
    "info" : "ReturnStatement[39806-39815]:ReturnStatement[40066-40075]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[40263-40269]:Modifier[40523-40529]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[40270-40276]:Modifier[40530-40536]"
  }, {
    "left" : "double",
    "right" : "double",
    "info" : "PrimitiveType[40277-40283]:PrimitiveType[40537-40543]"
  }, {
    "left" : "min",
    "right" : "min",
    "info" : "SimpleName[40284-40287]:SimpleName[40544-40547]"
  }, {
    "left" : "final double a",
    "right" : "final double a",
    "info" : "SingleVariableDeclaration[40288-40302]:SingleVariableDeclaration[40548-40562]"
  }, {
    "left" : "final double b",
    "right" : "final double b",
    "info" : "SingleVariableDeclaration[40304-40318]:SingleVariableDeclaration[40564-40578]"
  }, {
    "left" : "final double c",
    "right" : "final double c",
    "info" : "SingleVariableDeclaration[40320-40334]:SingleVariableDeclaration[40580-40594]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[40336-40387]:Block[40596-40647]"
  }, {
    "left" : "return Math.min(Math.min(a, b), c);",
    "right" : "return Math.min(Math.min(a, b), c);",
    "info" : "ReturnStatement[40346-40381]:ReturnStatement[40606-40641]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[40824-40830]:Modifier[41084-41090]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[40831-40837]:Modifier[41091-41097]"
  }, {
    "left" : "float",
    "right" : "float",
    "info" : "PrimitiveType[40838-40843]:PrimitiveType[41098-41103]"
  }, {
    "left" : "min",
    "right" : "min",
    "info" : "SimpleName[40844-40847]:SimpleName[41104-41107]"
  }, {
    "left" : "final float a",
    "right" : "final float a",
    "info" : "SingleVariableDeclaration[40848-40861]:SingleVariableDeclaration[41108-41121]"
  }, {
    "left" : "final float b",
    "right" : "final float b",
    "info" : "SingleVariableDeclaration[40863-40876]:SingleVariableDeclaration[41123-41136]"
  }, {
    "left" : "final float c",
    "right" : "final float c",
    "info" : "SingleVariableDeclaration[40878-40891]:SingleVariableDeclaration[41138-41151]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[40893-40944]:Block[41153-41204]"
  }, {
    "left" : "return Math.min(Math.min(a, b), c);",
    "right" : "return Math.min(Math.min(a, b), c);",
    "info" : "ReturnStatement[40903-40938]:ReturnStatement[41163-41198]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[41254-41260]:Modifier[41514-41520]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[41261-41267]:Modifier[41521-41527]"
  }, {
    "left" : "long",
    "right" : "long",
    "info" : "PrimitiveType[41268-41272]:PrimitiveType[41528-41532]"
  }, {
    "left" : "max",
    "right" : "max",
    "info" : "SimpleName[41273-41276]:SimpleName[41533-41536]"
  }, {
    "left" : "long a",
    "right" : "long a",
    "info" : "SingleVariableDeclaration[41277-41283]:SingleVariableDeclaration[41537-41543]"
  }, {
    "left" : "final long b",
    "right" : "final long b",
    "info" : "SingleVariableDeclaration[41285-41297]:SingleVariableDeclaration[41545-41557]"
  }, {
    "left" : "final long c",
    "right" : "final long c",
    "info" : "SingleVariableDeclaration[41299-41311]:SingleVariableDeclaration[41559-41571]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[41313-41438]:Block[41573-41698]"
  }, {
    "left" : "if (b > a)",
    "right" : "if (b > a)",
    "info" : "IfStatement[41323-41364]:IfStatement[41583-41624]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[41334-41364]:Block[41594-41624]"
  }, {
    "left" : "a = b;",
    "right" : "a = b;",
    "info" : "ExpressionStatement[41348-41354]:ExpressionStatement[41608-41614]"
  }, {
    "left" : "if (c > a)",
    "right" : "if (c > a)",
    "info" : "IfStatement[41373-41414]:IfStatement[41633-41674]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[41384-41414]:Block[41644-41674]"
  }, {
    "left" : "a = c;",
    "right" : "a = c;",
    "info" : "ExpressionStatement[41398-41404]:ExpressionStatement[41658-41664]"
  }, {
    "left" : "return a;",
    "right" : "return a;",
    "info" : "ReturnStatement[41423-41432]:ReturnStatement[41683-41692]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[41650-41656]:Modifier[41910-41916]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[41657-41663]:Modifier[41917-41923]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[41664-41667]:PrimitiveType[41924-41927]"
  }, {
    "left" : "max",
    "right" : "max",
    "info" : "SimpleName[41668-41671]:SimpleName[41928-41931]"
  }, {
    "left" : "int a",
    "right" : "int a",
    "info" : "SingleVariableDeclaration[41672-41677]:SingleVariableDeclaration[41932-41937]"
  }, {
    "left" : "final int b",
    "right" : "final int b",
    "info" : "SingleVariableDeclaration[41679-41690]:SingleVariableDeclaration[41939-41950]"
  }, {
    "left" : "final int c",
    "right" : "final int c",
    "info" : "SingleVariableDeclaration[41692-41703]:SingleVariableDeclaration[41952-41963]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[41705-41830]:Block[41965-42090]"
  }, {
    "left" : "if (b > a)",
    "right" : "if (b > a)",
    "info" : "IfStatement[41715-41756]:IfStatement[41975-42016]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[41726-41756]:Block[41986-42016]"
  }, {
    "left" : "a = b;",
    "right" : "a = b;",
    "info" : "ExpressionStatement[41740-41746]:ExpressionStatement[42000-42006]"
  }, {
    "left" : "if (c > a)",
    "right" : "if (c > a)",
    "info" : "IfStatement[41765-41806]:IfStatement[42025-42066]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[41776-41806]:Block[42036-42066]"
  }, {
    "left" : "a = c;",
    "right" : "a = c;",
    "info" : "ExpressionStatement[41790-41796]:ExpressionStatement[42050-42056]"
  }, {
    "left" : "return a;",
    "right" : "return a;",
    "info" : "ReturnStatement[41815-41824]:ReturnStatement[42075-42084]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[42044-42050]:Modifier[42304-42310]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[42051-42057]:Modifier[42311-42317]"
  }, {
    "left" : "short",
    "right" : "short",
    "info" : "PrimitiveType[42058-42063]:PrimitiveType[42318-42323]"
  }, {
    "left" : "max",
    "right" : "max",
    "info" : "SimpleName[42064-42067]:SimpleName[42324-42327]"
  }, {
    "left" : "short a",
    "right" : "short a",
    "info" : "SingleVariableDeclaration[42068-42075]:SingleVariableDeclaration[42328-42335]"
  }, {
    "left" : "final short b",
    "right" : "final short b",
    "info" : "SingleVariableDeclaration[42077-42090]:SingleVariableDeclaration[42337-42350]"
  }, {
    "left" : "final short c",
    "right" : "final short c",
    "info" : "SingleVariableDeclaration[42092-42105]:SingleVariableDeclaration[42352-42365]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[42107-42232]:Block[42367-42492]"
  }, {
    "left" : "if (b > a)",
    "right" : "if (b > a)",
    "info" : "IfStatement[42117-42158]:IfStatement[42377-42418]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[42128-42158]:Block[42388-42418]"
  }, {
    "left" : "a = b;",
    "right" : "a = b;",
    "info" : "ExpressionStatement[42142-42148]:ExpressionStatement[42402-42408]"
  }, {
    "left" : "if (c > a)",
    "right" : "if (c > a)",
    "info" : "IfStatement[42167-42208]:IfStatement[42427-42468]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[42178-42208]:Block[42438-42468]"
  }, {
    "left" : "a = c;",
    "right" : "a = c;",
    "info" : "ExpressionStatement[42192-42198]:ExpressionStatement[42452-42458]"
  }, {
    "left" : "return a;",
    "right" : "return a;",
    "info" : "ReturnStatement[42217-42226]:ReturnStatement[42477-42486]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[42445-42451]:Modifier[42705-42711]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[42452-42458]:Modifier[42712-42718]"
  }, {
    "left" : "byte",
    "right" : "byte",
    "info" : "PrimitiveType[42459-42463]:PrimitiveType[42719-42723]"
  }, {
    "left" : "max",
    "right" : "max",
    "info" : "SimpleName[42464-42467]:SimpleName[42724-42727]"
  }, {
    "left" : "byte a",
    "right" : "byte a",
    "info" : "SingleVariableDeclaration[42468-42474]:SingleVariableDeclaration[42728-42734]"
  }, {
    "left" : "final byte b",
    "right" : "final byte b",
    "info" : "SingleVariableDeclaration[42476-42488]:SingleVariableDeclaration[42736-42748]"
  }, {
    "left" : "final byte c",
    "right" : "final byte c",
    "info" : "SingleVariableDeclaration[42490-42502]:SingleVariableDeclaration[42750-42762]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[42504-42629]:Block[42764-42889]"
  }, {
    "left" : "if (b > a)",
    "right" : "if (b > a)",
    "info" : "IfStatement[42514-42555]:IfStatement[42774-42815]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[42525-42555]:Block[42785-42815]"
  }, {
    "left" : "a = b;",
    "right" : "a = b;",
    "info" : "ExpressionStatement[42539-42545]:ExpressionStatement[42799-42805]"
  }, {
    "left" : "if (c > a)",
    "right" : "if (c > a)",
    "info" : "IfStatement[42564-42605]:IfStatement[42824-42865]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[42575-42605]:Block[42835-42865]"
  }, {
    "left" : "a = c;",
    "right" : "a = c;",
    "info" : "ExpressionStatement[42589-42595]:ExpressionStatement[42849-42855]"
  }, {
    "left" : "return a;",
    "right" : "return a;",
    "info" : "ReturnStatement[42614-42623]:ReturnStatement[42874-42883]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[43069-43075]:Modifier[43329-43335]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[43076-43082]:Modifier[43336-43342]"
  }, {
    "left" : "double",
    "right" : "double",
    "info" : "PrimitiveType[43083-43089]:PrimitiveType[43343-43349]"
  }, {
    "left" : "max",
    "right" : "max",
    "info" : "SimpleName[43090-43093]:SimpleName[43350-43353]"
  }, {
    "left" : "final double a",
    "right" : "final double a",
    "info" : "SingleVariableDeclaration[43094-43108]:SingleVariableDeclaration[43354-43368]"
  }, {
    "left" : "final double b",
    "right" : "final double b",
    "info" : "SingleVariableDeclaration[43110-43124]:SingleVariableDeclaration[43370-43384]"
  }, {
    "left" : "final double c",
    "right" : "final double c",
    "info" : "SingleVariableDeclaration[43126-43140]:SingleVariableDeclaration[43386-43400]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[43142-43193]:Block[43402-43453]"
  }, {
    "left" : "return Math.max(Math.max(a, b), c);",
    "right" : "return Math.max(Math.max(a, b), c);",
    "info" : "ReturnStatement[43152-43187]:ReturnStatement[43412-43447]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[43629-43635]:Modifier[43889-43895]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[43636-43642]:Modifier[43896-43902]"
  }, {
    "left" : "float",
    "right" : "float",
    "info" : "PrimitiveType[43643-43648]:PrimitiveType[43903-43908]"
  }, {
    "left" : "max",
    "right" : "max",
    "info" : "SimpleName[43649-43652]:SimpleName[43909-43912]"
  }, {
    "left" : "final float a",
    "right" : "final float a",
    "info" : "SingleVariableDeclaration[43653-43666]:SingleVariableDeclaration[43913-43926]"
  }, {
    "left" : "final float b",
    "right" : "final float b",
    "info" : "SingleVariableDeclaration[43668-43681]:SingleVariableDeclaration[43928-43941]"
  }, {
    "left" : "final float c",
    "right" : "final float c",
    "info" : "SingleVariableDeclaration[43683-43696]:SingleVariableDeclaration[43943-43956]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[43698-43749]:Block[43958-44009]"
  }, {
    "left" : "return Math.max(Math.max(a, b), c);",
    "right" : "return Math.max(Math.max(a, b), c);",
    "info" : "ReturnStatement[43708-43743]:ReturnStatement[43968-44003]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[44165-44171]:Modifier[44425-44431]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[44172-44178]:Modifier[44432-44438]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[44179-44186]:PrimitiveType[44439-44446]"
  }, {
    "left" : "isDigits",
    "right" : "isDigits",
    "info" : "SimpleName[44187-44195]:SimpleName[44447-44455]"
  }, {
    "left" : "final String str",
    "right" : "final String str",
    "info" : "SingleVariableDeclaration[44196-44212]:SingleVariableDeclaration[44456-44472]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[44214-44474]:Block[44474-44734]"
  }, {
    "left" : "if (StringUtils.isEmpty(str))",
    "right" : "if (StringUtils.isEmpty(str))",
    "info" : "IfStatement[44224-44291]:IfStatement[44484-44551]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[44254-44291]:Block[44514-44551]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[44268-44281]:ReturnStatement[44528-44541]"
  }, {
    "left" : "for (int i = 0; i < str.length(); i++)",
    "right" : "for (int i = 0; i < str.length(); i++)",
    "info" : "ForStatement[44300-44447]:ForStatement[44560-44707]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[44339-44447]:Block[44599-44707]"
  }, {
    "left" : "if (!Character.isDigit(str.charAt(i)))",
    "right" : "if (!Character.isDigit(str.charAt(i)))",
    "info" : "IfStatement[44353-44437]:IfStatement[44613-44697]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[44392-44437]:Block[44652-44697]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[44410-44423]:ReturnStatement[44670-44683]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[44456-44468]:ReturnStatement[44716-44728]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[44976-44982]:Modifier[45236-45242]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[44983-44989]:Modifier[45243-45249]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[44990-44997]:PrimitiveType[45250-45257]"
  }, {
    "left" : "isNumber",
    "right" : "isNumber",
    "info" : "SimpleName[44998-45006]:SimpleName[45258-45266]"
  }, {
    "left" : "final String str",
    "right" : "final String str",
    "info" : "SingleVariableDeclaration[45007-45023]:SingleVariableDeclaration[45267-45283]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[45025-48781]:Block[45285-49041]"
  }, {
    "left" : "if (StringUtils.isEmpty(str))",
    "right" : "if (StringUtils.isEmpty(str))",
    "info" : "IfStatement[45035-45102]:IfStatement[45295-45362]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[45065-45102]:Block[45325-45362]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[45079-45092]:ReturnStatement[45339-45352]"
  }, {
    "left" : "final char[] chars = str.toCharArray();",
    "right" : "final char[] chars = str.toCharArray();",
    "info" : "VariableDeclarationStatement[45111-45150]:VariableDeclarationStatement[45371-45410]"
  }, {
    "left" : "int sz = chars.length;",
    "right" : "int sz = chars.length;",
    "info" : "VariableDeclarationStatement[45159-45181]:VariableDeclarationStatement[45419-45441]"
  }, {
    "left" : "boolean hasExp = false;",
    "right" : "boolean hasExp = false;",
    "info" : "VariableDeclarationStatement[45190-45213]:VariableDeclarationStatement[45450-45473]"
  }, {
    "left" : "boolean hasDecPoint = false;",
    "right" : "boolean hasDecPoint = false;",
    "info" : "VariableDeclarationStatement[45222-45250]:VariableDeclarationStatement[45482-45510]"
  }, {
    "left" : "boolean allowSigns = false;",
    "right" : "boolean allowSigns = false;",
    "info" : "VariableDeclarationStatement[45259-45286]:VariableDeclarationStatement[45519-45546]"
  }, {
    "left" : "boolean foundDigit = false;",
    "right" : "boolean foundDigit = false;",
    "info" : "VariableDeclarationStatement[45295-45322]:VariableDeclarationStatement[45555-45582]"
  }, {
    "left" : "final int start = (chars[0] == '-') ? 1 : 0;",
    "right" : "final int start = (chars[0] == '-') ? 1 : 0;",
    "info" : "VariableDeclarationStatement[45379-45423]:VariableDeclarationStatement[45639-45683]"
  }, {
    "left" : "if (sz > start + 1 && chars[start] == '0' && chars[start + 1] == 'x')",
    "right" : "if (sz > start + 1 && chars[start] == '0' && chars[start + 1] == 'x')",
    "info" : "IfStatement[45432-45995]:IfStatement[45692-46255]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[45502-45995]:Block[45762-46255]"
  }, {
    "left" : "int i = start + 2;",
    "right" : "int i = start + 2;",
    "info" : "VariableDeclarationStatement[45516-45534]:VariableDeclarationStatement[45776-45794]"
  }, {
    "left" : "if (i == sz)",
    "right" : "if (i == sz)",
    "info" : "IfStatement[45547-45620]:IfStatement[45807-45880]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[45560-45620]:Block[45820-45880]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[45578-45591]:ReturnStatement[45838-45851]"
  }, {
    "left" : "for (; i < chars.length; i++)",
    "right" : "for (; i < chars.length; i++)",
    "info" : "ForStatement[45689-45960]:ForStatement[45949-46220]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[45719-45960]:Block[45979-46220]"
  }, {
    "left" : "if ((chars[i] < '0' || chars[i] > '9')\n                    && (chars[i] < 'a' || chars[i] > 'f')\n                    && (chars[i] < 'A' || chars[i] > 'F'))",
    "right" : "if ((chars[i] < '0' || chars[i] > '9')\n                    && (chars[i] < 'a' || chars[i] > 'f')\n                    && (chars[i] < 'A' || chars[i] > 'F'))",
    "info" : "IfStatement[45737-45946]:IfStatement[45997-46206]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[45893-45946]:Block[46153-46206]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[45915-45928]:ReturnStatement[46175-46188]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[45973-45985]:ReturnStatement[46233-46245]"
  }, {
    "left" : "sz--;",
    "right" : "sz--;",
    "info" : "ExpressionStatement[46004-46009]:ExpressionStatement[46264-46269]"
  }, {
    "left" : "int i = start;",
    "right" : "int i = start;",
    "info" : "VariableDeclarationStatement[46115-46129]:VariableDeclarationStatement[46375-46389]"
  }, {
    "left" : "while (i < sz || (i < sz + 1 && allowSigns && !foundDigit))",
    "right" : "while (i < sz || (i < sz + 1 && allowSigns && !foundDigit))",
    "info" : "WhileStatement[46287-47435]:WhileStatement[46547-47695]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[46347-47435]:Block[46607-47695]"
  }, {
    "left" : "if (chars[i] >= '0' && chars[i] <= '9')",
    "right" : "if (chars[i] >= '0' && chars[i] <= '9')",
    "info" : "IfStatement[46361-47408]:IfStatement[46621-47668]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[46401-46488]:Block[46661-46748]"
  }, {
    "left" : "foundDigit = true;",
    "right" : "foundDigit = true;",
    "info" : "ExpressionStatement[46419-46437]:ExpressionStatement[46679-46697]"
  }, {
    "left" : "allowSigns = false;",
    "right" : "allowSigns = false;",
    "info" : "ExpressionStatement[46454-46473]:ExpressionStatement[46714-46733]"
  }, {
    "left" : "if (chars[i] == '.')",
    "right" : "if (chars[i] == '.')",
    "info" : "IfStatement[46494-47408]:IfStatement[46754-47668]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[46515-46727]:Block[46775-46987]"
  }, {
    "left" : "if (hasDecPoint || hasExp)",
    "right" : "if (hasDecPoint || hasExp)",
    "info" : "IfStatement[46533-46677]:IfStatement[46793-46937]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[46560-46677]:Block[46820-46937]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[46646-46659]:ReturnStatement[46906-46919]"
  }, {
    "left" : "hasDecPoint = true;",
    "right" : "hasDecPoint = true;",
    "info" : "ExpressionStatement[46694-46713]:ExpressionStatement[46954-46973]"
  }, {
    "left" : "if (chars[i] == 'e' || chars[i] == 'E')",
    "right" : "if (chars[i] == 'e' || chars[i] == 'E')",
    "info" : "IfStatement[46733-47408]:IfStatement[46993-47668]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[46773-47106]:Block[47033-47366]"
  }, {
    "left" : "if (hasExp)",
    "right" : "if (hasExp)",
    "info" : "IfStatement[46843-46939]:IfStatement[47103-47199]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[46855-46939]:Block[47115-47199]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[46908-46921]:ReturnStatement[47168-47181]"
  }, {
    "left" : "if (!foundDigit)",
    "right" : "if (!foundDigit)",
    "info" : "IfStatement[46956-47026]:IfStatement[47216-47286]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[46973-47026]:Block[47233-47286]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[46995-47008]:ReturnStatement[47255-47268]"
  }, {
    "left" : "hasExp = true;",
    "right" : "hasExp = true;",
    "info" : "ExpressionStatement[47043-47057]:ExpressionStatement[47303-47317]"
  }, {
    "left" : "allowSigns = true;",
    "right" : "allowSigns = true;",
    "info" : "ExpressionStatement[47074-47092]:ExpressionStatement[47334-47352]"
  }, {
    "left" : "if (chars[i] == '+' || chars[i] == '-')",
    "right" : "if (chars[i] == '+' || chars[i] == '-')",
    "info" : "IfStatement[47112-47408]:IfStatement[47372-47668]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[47152-47357]:Block[47412-47617]"
  }, {
    "left" : "if (!allowSigns)",
    "right" : "if (!allowSigns)",
    "info" : "IfStatement[47170-47240]:IfStatement[47430-47500]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[47187-47240]:Block[47447-47500]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[47209-47222]:ReturnStatement[47469-47482]"
  }, {
    "left" : "allowSigns = false;",
    "right" : "allowSigns = false;",
    "info" : "ExpressionStatement[47257-47276]:ExpressionStatement[47517-47536]"
  }, {
    "left" : "foundDigit = false;",
    "right" : "foundDigit = false;",
    "info" : "ExpressionStatement[47293-47312]:ExpressionStatement[47553-47572]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[47363-47408]:Block[47623-47668]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[47381-47394]:ReturnStatement[47641-47654]"
  }, {
    "left" : "i++;",
    "right" : "i++;",
    "info" : "ExpressionStatement[47421-47425]:ExpressionStatement[47681-47685]"
  }, {
    "left" : "if (i < chars.length)",
    "right" : "if (i < chars.length)",
    "info" : "IfStatement[47444-48596]:IfStatement[47704-48856]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[47466-48596]:Block[47726-48856]"
  }, {
    "left" : "if (chars[i] >= '0' && chars[i] <= '9')",
    "right" : "if (chars[i] >= '0' && chars[i] <= '9')",
    "info" : "IfStatement[47480-47605]:IfStatement[47740-47865]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[47520-47605]:Block[47780-47865]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[47579-47591]:ReturnStatement[47839-47851]"
  }, {
    "left" : "if (chars[i] == 'e' || chars[i] == 'E')",
    "right" : "if (chars[i] == 'e' || chars[i] == 'E')",
    "info" : "IfStatement[47618-47755]:IfStatement[47878-48015]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[47658-47755]:Block[47918-48015]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[47728-47741]:ReturnStatement[47988-48001]"
  }, {
    "left" : "if (chars[i] == '.')",
    "right" : "if (chars[i] == '.')",
    "info" : "IfStatement[47768-48071]:IfStatement[48028-48331]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[47789-48071]:Block[48049-48331]"
  }, {
    "left" : "if (hasDecPoint || hasExp)",
    "right" : "if (hasDecPoint || hasExp)",
    "info" : "IfStatement[47807-47948]:IfStatement[48067-48208]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[47834-47948]:Block[48094-48208]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[47917-47930]:ReturnStatement[48177-48190]"
  }, {
    "left" : "return foundDigit;",
    "right" : "return foundDigit;",
    "info" : "ReturnStatement[48039-48057]:ReturnStatement[48299-48317]"
  }, {
    "left" : "if (!allowSigns\n                && (chars[i] == 'd'\n                    || chars[i] == 'D'\n                    || chars[i] == 'f'\n                    || chars[i] == 'F'))",
    "right" : "if (!allowSigns\n                && (chars[i] == 'd'\n                    || chars[i] == 'D'\n                    || chars[i] == 'f'\n                    || chars[i] == 'F'))",
    "info" : "IfStatement[48084-48305]:IfStatement[48344-48565]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[48255-48305]:Block[48515-48565]"
  }, {
    "left" : "return foundDigit;",
    "right" : "return foundDigit;",
    "info" : "ReturnStatement[48273-48291]:ReturnStatement[48533-48551]"
  }, {
    "left" : "if (chars[i] == 'l'\n                || chars[i] == 'L')",
    "right" : "if (chars[i] == 'l'\n                || chars[i] == 'L')",
    "info" : "IfStatement[48318-48519]:IfStatement[48578-48779]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[48374-48519]:Block[48634-48779]"
  }, {
    "left" : "return foundDigit && !hasExp && !hasDecPoint;",
    "right" : "return foundDigit && !hasExp && !hasDecPoint;",
    "info" : "ReturnStatement[48460-48505]:ReturnStatement[48720-48765]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[48573-48586]:ReturnStatement[48833-48846]"
  }, {
    "left" : "return !allowSigns && foundDigit;",
    "right" : "return !allowSigns && foundDigit;",
    "info" : "ReturnStatement[48742-48775]:ReturnStatement[49002-49035]"
  } ]
}