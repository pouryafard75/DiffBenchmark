{
  "matchedElements" : [
 {
    "left" : "class : Base64",
    "right" : "class : Base64",
    "info" : "TypeDeclaration[1073-41034]:TypeDeclaration[1073-41150]"
  }, {
    "left" : "DEFAULT_BUFFER_RESIZE_FACTOR",
    "right" : "DEFAULT_BUFFER_RESIZE_FACTOR",
    "info" : "FieldDeclaration[2206-2264]:FieldDeclaration[2206-2264]"
  }, {
    "left" : "DEFAULT_BUFFER_SIZE",
    "right" : "DEFAULT_BUFFER_SIZE",
    "info" : "FieldDeclaration[2270-2322]:FieldDeclaration[2270-2322]"
  }, {
    "left" : "MIME_CHUNK_SIZE",
    "right" : "MIME_CHUNK_SIZE",
    "info" : "FieldDeclaration[2328-2698]:FieldDeclaration[2328-2698]"
  }, {
    "left" : "PEM_CHUNK_SIZE",
    "right" : "PEM_CHUNK_SIZE",
    "info" : "FieldDeclaration[2704-3078]:FieldDeclaration[2704-3078]"
  }, {
    "left" : "CHUNK_SEPARATOR",
    "right" : "CHUNK_SEPARATOR",
    "info" : "FieldDeclaration[3084-3409]:FieldDeclaration[3084-3409]"
  }, {
    "left" : "STANDARD_ENCODE_TABLE",
    "right" : "STANDARD_ENCODE_TABLE",
    "info" : "FieldDeclaration[3415-4197]:FieldDeclaration[3415-4197]"
  }, {
    "left" : "URL_SAFE_ENCODE_TABLE",
    "right" : "URL_SAFE_ENCODE_TABLE",
    "info" : "FieldDeclaration[4203-4887]:FieldDeclaration[4203-4887]"
  }, {
    "left" : "PAD",
    "right" : "PAD",
    "info" : "FieldDeclaration[4893-4977]:FieldDeclaration[4893-4977]"
  }, {
    "left" : "DECODE_TABLE",
    "right" : "DECODE_TABLE",
    "info" : "FieldDeclaration[4983-6320]:FieldDeclaration[4983-6320]"
  }, {
    "left" : "MASK_6BITS",
    "right" : "MASK_6BITS",
    "info" : "FieldDeclaration[6326-6428]:FieldDeclaration[6326-6428]"
  }, {
    "left" : "MASK_8BITS",
    "right" : "MASK_8BITS",
    "info" : "FieldDeclaration[6434-6547]:FieldDeclaration[6434-6547]"
  }, {
    "left" : "encodeTable",
    "right" : "encodeTable",
    "info" : "FieldDeclaration[6817-7132]:FieldDeclaration[6817-7132]"
  }, {
    "left" : "lineLength",
    "right" : "lineLength",
    "info" : "FieldDeclaration[7138-7319]:FieldDeclaration[7138-7319]"
  }, {
    "left" : "lineSeparator",
    "right" : "lineSeparator",
    "info" : "FieldDeclaration[7325-7465]:FieldDeclaration[7325-7465]"
  }, {
    "left" : "decodeSize",
    "right" : "decodeSize",
    "info" : "FieldDeclaration[7471-7688]:FieldDeclaration[7471-7688]"
  }, {
    "left" : "encodeSize",
    "right" : "encodeSize",
    "info" : "FieldDeclaration[7694-7911]:FieldDeclaration[7694-7911]"
  }, {
    "left" : "buffer",
    "right" : "buffer",
    "info" : "FieldDeclaration[7917-7984]:FieldDeclaration[7917-7984]"
  }, {
    "left" : "pos",
    "right" : "pos",
    "info" : "FieldDeclaration[7990-8092]:FieldDeclaration[7990-8092]"
  }, {
    "left" : "readPos",
    "right" : "readPos",
    "info" : "FieldDeclaration[8098-8203]:FieldDeclaration[8098-8203]"
  }, {
    "left" : "currentLinePos",
    "right" : "currentLinePos",
    "info" : "FieldDeclaration[8209-8457]:FieldDeclaration[8209-8457]"
  }, {
    "left" : "modulus",
    "right" : "modulus",
    "info" : "FieldDeclaration[8463-8644]:FieldDeclaration[8463-8644]"
  }, {
    "left" : "eof",
    "right" : "eof",
    "info" : "FieldDeclaration[8650-8839]:FieldDeclaration[8650-8839]"
  }, {
    "left" : "x",
    "right" : "x",
    "info" : "FieldDeclaration[8845-9048]:FieldDeclaration[8845-9048]"
  }, {
    "left" : "public Base64()",
    "right" : "public Base64()",
    "info" : "MethodDeclaration[9054-9412]:MethodDeclaration[9054-9412]"
  }, {
    "left" : "public Base64(urlSafe boolean)",
    "right" : "public Base64(urlSafe boolean)",
    "info" : "MethodDeclaration[9418-10043]:MethodDeclaration[9418-10043]"
  }, {
    "left" : "public Base64(lineLength int)",
    "right" : "public Base64(lineLength int)",
    "info" : "MethodDeclaration[10049-10915]:MethodDeclaration[10049-10915]"
  }, {
    "left" : "public Base64(lineLength int, lineSeparator )",
    "right" : "public Base64(lineLength int, lineSeparator )",
    "info" : "MethodDeclaration[10921-12047]:MethodDeclaration[10921-12047]"
  }, {
    "left" : "public Base64(lineLength int, lineSeparator , urlSafe boolean)",
    "right" : "public Base64(lineLength int, lineSeparator , urlSafe boolean)",
    "info" : "MethodDeclaration[12053-14285]:MethodDeclaration[12053-14285]"
  }, {
    "left" : "public isUrlSafe() : boolean",
    "right" : "public isUrlSafe() : boolean",
    "info" : "MethodDeclaration[14291-14570]:MethodDeclaration[14291-14570]"
  }, {
    "left" : "package hasData() : boolean",
    "right" : "package hasData() : boolean",
    "info" : "MethodDeclaration[14576-14809]:MethodDeclaration[14576-14809]"
  }, {
    "left" : "package avail() : int",
    "right" : "package avail() : int",
    "info" : "MethodDeclaration[14815-15041]:MethodDeclaration[14815-15041]"
  }, {
    "left" : "private resizeBuffer() : void",
    "right" : "private resizeBuffer() : void",
    "info" : "MethodDeclaration[15047-15433]:MethodDeclaration[15047-15433]"
  }, {
    "left" : "package readResults(b , bPos int, bAvail int) : int",
    "right" : "package readResults(b , bPos int, bAvail int) : int",
    "info" : "MethodDeclaration[15439-16623]:MethodDeclaration[15439-16623]"
  }, {
    "left" : "package setInitialBuffer(out , outPos int, outAvail int) : void",
    "right" : "package setInitialBuffer(out , outPos int, outAvail int) : void",
    "info" : "MethodDeclaration[16629-17457]:MethodDeclaration[16629-17457]"
  }, {
    "left" : "package encode(in , inPos int, inAvail int) : void",
    "right" : "package encode(in , inPos int, inAvail int) : void",
    "info" : "MethodDeclaration[17463-20850]:MethodDeclaration[17463-20850]"
  }, {
    "left" : "package decode(in , inPos int, inAvail int) : void",
    "right" : "package decode(in , inPos int, inAvail int) : void",
    "info" : "MethodDeclaration[20856-23782]:MethodDeclaration[20856-23898]"
  }, {
    "left" : "public isBase64(octet byte) : boolean",
    "right" : "public isBase64(octet byte) : boolean",
    "info" : "MethodDeclaration[23788-24238]:MethodDeclaration[23904-24354]"
  }, {
    "left" : "public isArrayByteBase64(arrayOctet ) : boolean",
    "right" : "public isArrayByteBase64(arrayOctet ) : boolean",
    "info" : "MethodDeclaration[24244-24914]:MethodDeclaration[24360-25030]"
  }, {
    "left" : "private containsBase64Byte(arrayOctet ) : boolean",
    "right" : "private containsBase64Byte(arrayOctet ) : boolean",
    "info" : "MethodDeclaration[24920-25454]:MethodDeclaration[25036-25570]"
  }, {
    "left" : "public encodeBase64(binaryData ) : ",
    "right" : "public encodeBase64(binaryData ) : ",
    "info" : "MethodDeclaration[25460-25824]:MethodDeclaration[25576-25940]"
  }, {
    "left" : "public encodeBase64String(binaryData ) : ",
    "right" : "public encodeBase64String(binaryData ) : ",
    "info" : "MethodDeclaration[25830-26230]:MethodDeclaration[25946-26346]"
  }, {
    "left" : "public encodeBase64URLSafe(binaryData ) : ",
    "right" : "public encodeBase64URLSafe(binaryData ) : ",
    "info" : "MethodDeclaration[26240-26734]:MethodDeclaration[26356-26850]"
  }, {
    "left" : "public encodeBase64URLSafeString(binaryData ) : ",
    "right" : "public encodeBase64URLSafeString(binaryData ) : ",
    "info" : "MethodDeclaration[26740-27239]:MethodDeclaration[26856-27355]"
  }, {
    "left" : "public encodeBase64Chunked(binaryData ) : ",
    "right" : "public encodeBase64Chunked(binaryData ) : ",
    "info" : "MethodDeclaration[27249-27625]:MethodDeclaration[27365-27741]"
  }, {
    "left" : "public decode(pObject ) : ",
    "right" : "public decode(pObject ) : ",
    "info" : "MethodDeclaration[27631-28558]:MethodDeclaration[27747-28674]"
  }, {
    "left" : "public decode(pArray ) : ",
    "right" : "public decode(pArray ) : ",
    "info" : "MethodDeclaration[28564-28907]:MethodDeclaration[28680-29023]"
  }, {
    "left" : "public decode(pArray ) : ",
    "right" : "public decode(pArray ) : ",
    "info" : "MethodDeclaration[28913-29986]:MethodDeclaration[29029-30102]"
  }, {
    "left" : "public encodeBase64(binaryData , isChunked boolean) : ",
    "right" : "public encodeBase64(binaryData , isChunked boolean) : ",
    "info" : "MethodDeclaration[29992-30662]:MethodDeclaration[30108-30778]"
  }, {
    "left" : "public encodeBase64(binaryData , isChunked boolean, urlSafe boolean) : ",
    "right" : "public encodeBase64(binaryData , isChunked boolean, urlSafe boolean) : ",
    "info" : "MethodDeclaration[30668-31527]:MethodDeclaration[30784-31643]"
  }, {
    "left" : "public encodeBase64(binaryData , isChunked boolean, urlSafe boolean, maxResultSize int) : ",
    "right" : "public encodeBase64(binaryData , isChunked boolean, urlSafe boolean, maxResultSize int) : ",
    "info" : "MethodDeclaration[31533-32999]:MethodDeclaration[31649-33115]"
  }, {
    "left" : "public decodeBase64(base64String ) : ",
    "right" : "public decodeBase64(base64String ) : ",
    "info" : "MethodDeclaration[33005-33322]:MethodDeclaration[33121-33438]"
  }, {
    "left" : "public decodeBase64(base64Data ) : ",
    "right" : "public decodeBase64(base64Data ) : ",
    "info" : "MethodDeclaration[33328-33622]:MethodDeclaration[33444-33738]"
  }, {
    "left" : "package discardWhitespace(data ) : ",
    "right" : "package discardWhitespace(data ) : ",
    "info" : "MethodDeclaration[33628-34521]:MethodDeclaration[33744-34637]"
  }, {
    "left" : "private isWhiteSpace(byteToCheck byte) : boolean",
    "right" : "private isWhiteSpace(byteToCheck byte) : boolean",
    "info" : "MethodDeclaration[34527-35002]:MethodDeclaration[34643-35118]"
  }, {
    "left" : "public encode(pObject ) : ",
    "right" : "public encode(pObject ) : ",
    "info" : "MethodDeclaration[35056-35841]:MethodDeclaration[35172-35957]"
  }, {
    "left" : "public encodeToString(pArray ) : ",
    "right" : "public encodeToString(pArray ) : ",
    "info" : "MethodDeclaration[35847-36246]:MethodDeclaration[35963-36362]"
  }, {
    "left" : "public encode(pArray ) : ",
    "right" : "public encode(pArray ) : ",
    "info" : "MethodDeclaration[36252-37434]:MethodDeclaration[36368-37550]"
  }, {
    "left" : "private getEncodeLength(pArray , chunkSize int, chunkSeparator ) : long",
    "right" : "private getEncodeLength(pArray , chunkSize int, chunkSeparator ) : long",
    "info" : "MethodDeclaration[37440-38613]:MethodDeclaration[37556-38729]"
  }, {
    "left" : "public decodeInteger(pArray ) : ",
    "right" : "public decodeInteger(pArray ) : ",
    "info" : "MethodDeclaration[38677-39047]:MethodDeclaration[38793-39163]"
  }, {
    "left" : "public encodeInteger(bigInt ) : ",
    "right" : "public encodeInteger(bigInt ) : ",
    "info" : "MethodDeclaration[39053-39634]:MethodDeclaration[39169-39750]"
  }, {
    "left" : "package toIntegerBytes(bigInt ) : ",
    "right" : "package toIntegerBytes(bigInt ) : ",
    "info" : "MethodDeclaration[39640-40777]:MethodDeclaration[39756-40893]"
  }, {
    "left" : "private reset() : void",
    "right" : "private reset() : void",
    "info" : "MethodDeclaration[40783-41031]:MethodDeclaration[40899-41147]"
  } ],
  "mappings" : [
 {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[2140-2146]:Modifier[2140-2146]"
  }, {
    "left" : "class",
    "right" : "class",
    "info" : "TYPE_DECLARATION_KIND[2147-2152]:TYPE_DECLARATION_KIND[2147-2152]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[9372-9378]:Modifier[9372-9378]"
  }, {
    "left" : "Base64",
    "right" : "Base64",
    "info" : "SimpleName[9379-9385]:SimpleName[9379-9385]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9388-9412]:Block[9388-9412]"
  }, {
    "left" : "this(0);",
    "right" : "this(0);",
    "info" : "ConstructorInvocation[9398-9406]:ConstructorInvocation[9398-9406]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[9948-9954]:Modifier[9948-9954]"
  }, {
    "left" : "Base64",
    "right" : "Base64",
    "info" : "SimpleName[9955-9961]:SimpleName[9955-9961]"
  }, {
    "left" : "boolean urlSafe",
    "right" : "boolean urlSafe",
    "info" : "SingleVariableDeclaration[9962-9977]:SingleVariableDeclaration[9962-9977]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9979-10043]:Block[9979-10043]"
  }, {
    "left" : "this(MIME_CHUNK_SIZE, CHUNK_SEPARATOR, urlSafe);",
    "right" : "this(MIME_CHUNK_SIZE, CHUNK_SEPARATOR, urlSafe);",
    "info" : "ConstructorInvocation[9989-10037]:ConstructorInvocation[9989-10037]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[10835-10841]:Modifier[10835-10841]"
  }, {
    "left" : "Base64",
    "right" : "Base64",
    "info" : "SimpleName[10842-10848]:SimpleName[10842-10848]"
  }, {
    "left" : "int lineLength",
    "right" : "int lineLength",
    "info" : "SingleVariableDeclaration[10849-10863]:SingleVariableDeclaration[10849-10863]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10865-10915]:Block[10865-10915]"
  }, {
    "left" : "this(lineLength, CHUNK_SEPARATOR);",
    "right" : "this(lineLength, CHUNK_SEPARATOR);",
    "info" : "ConstructorInvocation[10875-10909]:ConstructorInvocation[10875-10909]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[11940-11946]:Modifier[11940-11946]"
  }, {
    "left" : "Base64",
    "right" : "Base64",
    "info" : "SimpleName[11947-11953]:SimpleName[11947-11953]"
  }, {
    "left" : "int lineLength",
    "right" : "int lineLength",
    "info" : "SingleVariableDeclaration[11954-11968]:SingleVariableDeclaration[11954-11968]"
  }, {
    "left" : "byte[] lineSeparator",
    "right" : "byte[] lineSeparator",
    "info" : "SingleVariableDeclaration[11970-11990]:SingleVariableDeclaration[11970-11990]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11992-12047]:Block[11992-12047]"
  }, {
    "left" : "this(lineLength, lineSeparator, false);",
    "right" : "this(lineLength, lineSeparator, false);",
    "info" : "ConstructorInvocation[12002-12041]:ConstructorInvocation[12002-12041]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[13296-13302]:Modifier[13296-13302]"
  }, {
    "left" : "Base64",
    "right" : "Base64",
    "info" : "SimpleName[13303-13309]:SimpleName[13303-13309]"
  }, {
    "left" : "int lineLength",
    "right" : "int lineLength",
    "info" : "SingleVariableDeclaration[13310-13324]:SingleVariableDeclaration[13310-13324]"
  }, {
    "left" : "byte[] lineSeparator",
    "right" : "byte[] lineSeparator",
    "info" : "SingleVariableDeclaration[13326-13346]:SingleVariableDeclaration[13326-13346]"
  }, {
    "left" : "boolean urlSafe",
    "right" : "boolean urlSafe",
    "info" : "SingleVariableDeclaration[13348-13363]:SingleVariableDeclaration[13348-13363]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13365-14285]:Block[13365-14285]"
  }, {
    "left" : "if (lineSeparator == null)",
    "right" : "if (lineSeparator == null)",
    "info" : "IfStatement[13375-13542]:IfStatement[13375-13542]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13402-13542]:Block[13402-13542]"
  }, {
    "left" : "lineLength = 0;",
    "right" : "lineLength = 0;",
    "info" : "ExpressionStatement[13416-13431]:ExpressionStatement[13416-13431]"
  }, {
    "left" : "lineSeparator = CHUNK_SEPARATOR;",
    "right" : "lineSeparator = CHUNK_SEPARATOR;",
    "info" : "ExpressionStatement[13473-13505]:ExpressionStatement[13473-13505]"
  }, {
    "left" : "this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;",
    "right" : "this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;",
    "info" : "ExpressionStatement[13551-13611]:ExpressionStatement[13551-13611]"
  }, {
    "left" : "this.lineSeparator = new byte[lineSeparator.length];",
    "right" : "this.lineSeparator = new byte[lineSeparator.length];",
    "info" : "ExpressionStatement[13620-13672]:ExpressionStatement[13620-13672]"
  }, {
    "left" : "System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);",
    "right" : "System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);",
    "info" : "ExpressionStatement[13681-13761]:ExpressionStatement[13681-13761]"
  }, {
    "left" : "if (lineLength > 0)",
    "right" : "if (lineLength > 0)",
    "info" : "IfStatement[13770-13907]:IfStatement[13770-13907]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13790-13857]:Block[13790-13857]"
  }, {
    "left" : "this.encodeSize = 4 + lineSeparator.length;",
    "right" : "this.encodeSize = 4 + lineSeparator.length;",
    "info" : "ExpressionStatement[13804-13847]:ExpressionStatement[13804-13847]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13863-13907]:Block[13863-13907]"
  }, {
    "left" : "this.encodeSize = 4;",
    "right" : "this.encodeSize = 4;",
    "info" : "ExpressionStatement[13877-13897]:ExpressionStatement[13877-13897]"
  }, {
    "left" : "this.decodeSize = this.encodeSize - 1;",
    "right" : "this.decodeSize = this.encodeSize - 1;",
    "info" : "ExpressionStatement[13916-13954]:ExpressionStatement[13916-13954]"
  }, {
    "left" : "if (containsBase64Byte(lineSeparator))",
    "right" : "if (containsBase64Byte(lineSeparator))",
    "info" : "IfStatement[13963-14195]:IfStatement[13963-14195]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14002-14195]:Block[14002-14195]"
  }, {
    "left" : "String sep = StringUtils.newStringUtf8(lineSeparator);",
    "right" : "String sep = StringUtils.newStringUtf8(lineSeparator);",
    "info" : "VariableDeclarationStatement[14016-14070]:VariableDeclarationStatement[14016-14070]"
  }, {
    "left" : "throw new IllegalArgumentException(\"lineSeperator must not contain base64 characters: [
\" + sep + \"]\");",
    "right" : "throw new IllegalArgumentException(\"lineSeperator must not contain base64 characters: [
\" + sep + \"]\");",
    "info" : "ThrowStatement[14083-14185]:ThrowStatement[14083-14185]"
  }, {
    "left" : "this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;",
    "right" : "this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;",
    "info" : "ExpressionStatement[14204-14279]:ExpressionStatement[14204-14279]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[14478-14484]:Modifier[14478-14484]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[14485-14492]:PrimitiveType[14485-14492]"
  }, {
    "left" : "isUrlSafe",
    "right" : "isUrlSafe",
    "info" : "SimpleName[14493-14502]:SimpleName[14493-14502]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14505-14570]:Block[14505-14570]"
  }, {
    "left" : "return this.encodeTable == URL_SAFE_ENCODE_TABLE;",
    "right" : "return this.encodeTable == URL_SAFE_ENCODE_TABLE;",
    "info" : "ReturnStatement[14515-14564]:ReturnStatement[14515-14564]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[14748-14755]:PrimitiveType[14748-14755]"
  }, {
    "left" : "hasData",
    "right" : "hasData",
    "info" : "SimpleName[14756-14763]:SimpleName[14756-14763]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14766-14809]:Block[14766-14809]"
  }, {
    "left" : "return this.buffer != null;",
    "right" : "return this.buffer != null;",
    "info" : "ReturnStatement[14776-14803]:ReturnStatement[14776-14803]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[14971-14974]:PrimitiveType[14971-14974]"
  }, {
    "left" : "avail",
    "right" : "avail",
    "info" : "SimpleName[14975-14980]:SimpleName[14975-14980]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14983-15041]:Block[14983-15041]"
  }, {
    "left" : "return buffer != null ? pos - readPos : 0;",
    "right" : "return buffer != null ? pos - readPos : 0;",
    "info" : "ReturnStatement[14993-15035]:ReturnStatement[14993-15035]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[15078-15085]:Modifier[15078-15085]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[15086-15090]:PrimitiveType[15086-15090]"
  }, {
    "left" : "resizeBuffer",
    "right" : "resizeBuffer",
    "info" : "SimpleName[15091-15103]:SimpleName[15091-15103]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15106-15433]:Block[15106-15433]"
  }, {
    "left" : "if (buffer == null)",
    "right" : "if (buffer == null)",
    "info" : "IfStatement[15116-15427]:IfStatement[15116-15427]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15136-15245]:Block[15136-15245]"
  }, {
    "left" : "buffer = new byte[DEFAULT_BUFFER_SIZE];",
    "right" : "buffer = new byte[DEFAULT_BUFFER_SIZE];",
    "info" : "ExpressionStatement[15150-15189]:ExpressionStatement[15150-15189]"
  }, {
    "left" : "pos = 0;",
    "right" : "pos = 0;",
    "info" : "ExpressionStatement[15202-15210]:ExpressionStatement[15202-15210]"
  }, {
    "left" : "readPos = 0;",
    "right" : "readPos = 0;",
    "info" : "ExpressionStatement[15223-15235]:ExpressionStatement[15223-15235]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15251-15427]:Block[15251-15427]"
  }, {
    "left" : "byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];",
    "right" : "byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];",
    "info" : "VariableDeclarationStatement[15265-15331]:VariableDeclarationStatement[15265-15331]"
  }, {
    "left" : "System.arraycopy(buffer, 0, b, 0, buffer.length);",
    "right" : "System.arraycopy(buffer, 0, b, 0, buffer.length);",
    "info" : "ExpressionStatement[15344-15393]:ExpressionStatement[15344-15393]"
  }, {
    "left" : "buffer = b;",
    "right" : "buffer = b;",
    "info" : "ExpressionStatement[15406-15417]:ExpressionStatement[15406-15417]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[16026-16029]:PrimitiveType[16026-16029]"
  }, {
    "left" : "readResults",
    "right" : "readResults",
    "info" : "SimpleName[16030-16041]:SimpleName[16030-16041]"
  }, {
    "left" : "byte[] b",
    "right" : "byte[] b",
    "info" : "SingleVariableDeclaration[16042-16050]:SingleVariableDeclaration[16042-16050]"
  }, {
    "left" : "int bPos",
    "right" : "int bPos",
    "info" : "SingleVariableDeclaration[16052-16060]:SingleVariableDeclaration[16052-16060]"
  }, {
    "left" : "int bAvail",
    "right" : "int bAvail",
    "info" : "SingleVariableDeclaration[16062-16072]:SingleVariableDeclaration[16062-16072]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16074-16623]:Block[16074-16623]"
  }, {
    "left" : "if (buffer != null)",
    "right" : "if (buffer != null)",
    "info" : "IfStatement[16084-16588]:IfStatement[16084-16588]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16104-16588]:Block[16104-16588]"
  }, {
    "left" : "int len = Math.min(avail(), bAvail);",
    "right" : "int len = Math.min(avail(), bAvail);",
    "info" : "VariableDeclarationStatement[16118-16154]:VariableDeclarationStatement[16118-16154]"
  }, {
    "left" : "if (buffer != b)",
    "right" : "if (buffer != b)",
    "info" : "IfStatement[16167-16554]:IfStatement[16167-16554]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16184-16387]:Block[16184-16387]"
  }, {
    "left" : "System.arraycopy(buffer, readPos, b, bPos, len);",
    "right" : "System.arraycopy(buffer, readPos, b, bPos, len);",
    "info" : "ExpressionStatement[16202-16250]:ExpressionStatement[16202-16250]"
  }, {
    "left" : "readPos += len;",
    "right" : "readPos += len;",
    "info" : "ExpressionStatement[16267-16282]:ExpressionStatement[16267-16282]"
  }, {
    "left" : "if (readPos >= pos)",
    "right" : "if (readPos >= pos)",
    "info" : "IfStatement[16299-16373]:IfStatement[16299-16373]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16319-16373]:Block[16319-16373]"
  }, {
    "left" : "buffer = null;",
    "right" : "buffer = null;",
    "info" : "ExpressionStatement[16341-16355]:ExpressionStatement[16341-16355]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16393-16554]:Block[16393-16554]"
  }, {
    "left" : "buffer = null;",
    "right" : "buffer = null;",
    "info" : "ExpressionStatement[16526-16540]:ExpressionStatement[16526-16540]"
  }, {
    "left" : "return len;",
    "right" : "return len;",
    "info" : "ReturnStatement[16567-16578]:ReturnStatement[16567-16578]"
  }, {
    "left" : "return eof ? -1 : 0;",
    "right" : "return eof ? -1 : 0;",
    "info" : "ReturnStatement[16597-16617]:ReturnStatement[16597-16617]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[17112-17116]:PrimitiveType[17112-17116]"
  }, {
    "left" : "setInitialBuffer",
    "right" : "setInitialBuffer",
    "info" : "SimpleName[17117-17133]:SimpleName[17117-17133]"
  }, {
    "left" : "byte[] out",
    "right" : "byte[] out",
    "info" : "SingleVariableDeclaration[17134-17144]:SingleVariableDeclaration[17134-17144]"
  }, {
    "left" : "int outPos",
    "right" : "int outPos",
    "info" : "SingleVariableDeclaration[17146-17156]:SingleVariableDeclaration[17146-17156]"
  }, {
    "left" : "int outAvail",
    "right" : "int outAvail",
    "info" : "SingleVariableDeclaration[17158-17170]:SingleVariableDeclaration[17158-17170]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17172-17457]:Block[17172-17457]"
  }, {
    "left" : "if (out != null && out.length == outAvail)",
    "right" : "if (out != null && out.length == outAvail)",
    "info" : "IfStatement[17315-17451]:IfStatement[17315-17451]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17358-17451]:Block[17358-17451]"
  }, {
    "left" : "buffer = out;",
    "right" : "buffer = out;",
    "info" : "ExpressionStatement[17372-17385]:ExpressionStatement[17372-17385]"
  }, {
    "left" : "pos = outPos;",
    "right" : "pos = outPos;",
    "info" : "ExpressionStatement[17398-17411]:ExpressionStatement[17398-17411]"
  }, {
    "left" : "readPos = outPos;",
    "right" : "readPos = outPos;",
    "info" : "ExpressionStatement[17424-17441]:ExpressionStatement[17424-17441]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[18247-18251]:PrimitiveType[18247-18251]"
  }, {
    "left" : "encode",
    "right" : "encode",
    "info" : "SimpleName[18252-18258]:SimpleName[18252-18258]"
  }, {
    "left" : "byte[] in",
    "right" : "byte[] in",
    "info" : "SingleVariableDeclaration[18259-18268]:SingleVariableDeclaration[18259-18268]"
  }, {
    "left" : "int inPos",
    "right" : "int inPos",
    "info" : "SingleVariableDeclaration[18270-18279]:SingleVariableDeclaration[18270-18279]"
  }, {
    "left" : "int inAvail",
    "right" : "int inAvail",
    "info" : "SingleVariableDeclaration[18281-18292]:SingleVariableDeclaration[18281-18292]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18294-20850]:Block[18294-20850]"
  }, {
    "left" : "if (eof)",
    "right" : "if (eof)",
    "info" : "IfStatement[18304-18344]:IfStatement[18304-18344]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18313-18344]:Block[18313-18344]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[18327-18334]:ReturnStatement[18327-18334]"
  }, {
    "left" : "if (inAvail < 0)",
    "right" : "if (inAvail < 0)",
    "info" : "IfStatement[18455-20844]:IfStatement[18455-20844]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18472-19780]:Block[18472-19780]"
  }, {
    "left" : "eof = true;",
    "right" : "eof = true;",
    "info" : "ExpressionStatement[18486-18497]:ExpressionStatement[18486-18497]"
  }, {
    "left" : "if (buffer == null || buffer.length - pos < encodeSize)",
    "right" : "if (buffer == null || buffer.length - pos < encodeSize)",
    "info" : "IfStatement[18510-18613]:IfStatement[18510-18613]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18566-18613]:Block[18566-18613]"
  }, {
    "left" : "resizeBuffer();",
    "right" : "resizeBuffer();",
    "info" : "ExpressionStatement[18584-18599]:ExpressionStatement[18584-18599]"
  }, {
    "left" : "switch (modulus) {\n                case 1 :\n                    buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];\n                    buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];\n                    // URL-SAFE skips the padding to further reduce size.\n                    if (encodeTable == STANDARD_ENCODE_TABLE) {\n                        buffer[pos++] = PAD;\n                        buffer[pos++] = PAD;\n                    }\n                    break;\n\n                case 2 :\n                    buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];\n                    buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];\n                    buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];\n                    // URL-SAFE skips the padding to further reduce size.\n                    if (encodeTable == STANDARD_ENCODE_TABLE) {\n                        buffer[pos++] = PAD;\n                    }\n                    break;\n            }",
    "right" : "switch (modulus) {\n                case 1 :\n                    buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];\n                    buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];\n                    // URL-SAFE skips the padding to further reduce size.\n                    if (encodeTable == STANDARD_ENCODE_TABLE) {\n                        buffer[pos++] = PAD;\n                        buffer[pos++] = PAD;\n                    }\n                    break;\n\n                case 2 :\n                    buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];\n                    buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];\n                    buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];\n                    // URL-SAFE skips the padding to further reduce size.\n                    if (encodeTable == STANDARD_ENCODE_TABLE) {\n                        buffer[pos++] = PAD;\n                    }\n                    break;\n            }",
    "info" : "SwitchStatement[18626-19579]:SwitchStatement[18626-19579]"
  }, {
    "left" : "case 1 :",
    "right" : "case 1 :",
    "info" : "SwitchCase[18661-18669]:SwitchCase[18661-18669]"
  }, {
    "left" : "buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];",
    "right" : "buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];",
    "info" : "ExpressionStatement[18690-18741]:ExpressionStatement[18690-18741]"
  }, {
    "left" : "buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];",
    "right" : "buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];",
    "info" : "ExpressionStatement[18762-18813]:ExpressionStatement[18762-18813]"
  }, {
    "left" : "if (encodeTable == STANDARD_ENCODE_TABLE)",
    "right" : "if (encodeTable == STANDARD_ENCODE_TABLE)",
    "info" : "IfStatement[18908-19063]:IfStatement[18908-19063]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18950-19063]:Block[18950-19063]"
  }, {
    "left" : "buffer[pos++] = PAD;",
    "right" : "buffer[pos++] = PAD;",
    "info" : "ExpressionStatement[18976-18996]:ExpressionStatement[18976-18996]"
  }, {
    "left" : "buffer[pos++] = PAD;",
    "right" : "buffer[pos++] = PAD;",
    "info" : "ExpressionStatement[19021-19041]:ExpressionStatement[19021-19041]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[19084-19090]:BreakStatement[19084-19090]"
  }, {
    "left" : "case 2 :",
    "right" : "case 2 :",
    "info" : "SwitchCase[19108-19116]:SwitchCase[19108-19116]"
  }, {
    "left" : "buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];",
    "right" : "buffer[pos++] = encodeTable[(x >> 10) & MASK_6BITS];",
    "info" : "ExpressionStatement[19137-19189]:ExpressionStatement[19137-19189]"
  }, {
    "left" : "buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];",
    "right" : "buffer[pos++] = encodeTable[(x >> 4) & MASK_6BITS];",
    "info" : "ExpressionStatement[19210-19261]:ExpressionStatement[19210-19261]"
  }, {
    "left" : "buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];",
    "right" : "buffer[pos++] = encodeTable[(x << 2) & MASK_6BITS];",
    "info" : "ExpressionStatement[19282-19333]:ExpressionStatement[19282-19333]"
  }, {
    "left" : "if (encodeTable == STANDARD_ENCODE_TABLE)",
    "right" : "if (encodeTable == STANDARD_ENCODE_TABLE)",
    "info" : "IfStatement[19428-19538]:IfStatement[19428-19538]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[19470-19538]:Block[19470-19538]"
  }, {
    "left" : "buffer[pos++] = PAD;",
    "right" : "buffer[pos++] = PAD;",
    "info" : "ExpressionStatement[19496-19516]:ExpressionStatement[19496-19516]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[19559-19565]:BreakStatement[19559-19565]"
  }, {
    "left" : "if (lineLength > 0 && pos > 0)",
    "right" : "if (lineLength > 0 && pos > 0)",
    "info" : "IfStatement[19592-19770]:IfStatement[19592-19770]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[19623-19770]:Block[19623-19770]"
  }, {
    "left" : "System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);",
    "right" : "System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);",
    "info" : "ExpressionStatement[19641-19711]:ExpressionStatement[19641-19711]"
  }, {
    "left" : "pos += lineSeparator.length;",
    "right" : "pos += lineSeparator.length;",
    "info" : "ExpressionStatement[19728-19756]:ExpressionStatement[19728-19756]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[19786-20844]:Block[19786-20844]"
  }, {
    "left" : "for (int i = 0; i < inAvail; i++)",
    "right" : "for (int i = 0; i < inAvail; i++)",
    "info" : "ForStatement[19800-20834]:ForStatement[19800-20834]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[19834-20834]:Block[19834-20834]"
  }, {
    "left" : "if (buffer == null || buffer.length - pos < encodeSize)",
    "right" : "if (buffer == null || buffer.length - pos < encodeSize)",
    "info" : "IfStatement[19852-19963]:IfStatement[19852-19963]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[19908-19963]:Block[19908-19963]"
  }, {
    "left" : "resizeBuffer();",
    "right" : "resizeBuffer();",
    "info" : "ExpressionStatement[19930-19945]:ExpressionStatement[19930-19945]"
  }, {
    "left" : "modulus = (++modulus) % 3;",
    "right" : "modulus = (++modulus) % 3;",
    "info" : "ExpressionStatement[19980-20006]:ExpressionStatement[19980-20006]"
  }, {
    "left" : "int b = in[inPos++];",
    "right" : "int b = in[inPos++];",
    "info" : "VariableDeclarationStatement[20023-20043]:VariableDeclarationStatement[20023-20043]"
  }, {
    "left" : "if (b < 0)",
    "right" : "if (b < 0)",
    "info" : "IfStatement[20060-20120]:IfStatement[20060-20120]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[20071-20120]:Block[20071-20120]"
  }, {
    "left" : "b += 256;",
    "right" : "b += 256;",
    "info" : "ExpressionStatement[20093-20102]:ExpressionStatement[20093-20102]"
  }, {
    "left" : "x = (x << 8) + b;",
    "right" : "x = (x << 8) + b;",
    "info" : "ExpressionStatement[20137-20154]:ExpressionStatement[20137-20154]"
  }, {
    "left" : "if (0 == modulus)",
    "right" : "if (0 == modulus)",
    "info" : "IfStatement[20171-20820]:IfStatement[20171-20820]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[20189-20820]:Block[20189-20820]"
  }, {
    "left" : "buffer[pos++] = encodeTable[(x >> 18) & MASK_6BITS];",
    "right" : "buffer[pos++] = encodeTable[(x >> 18) & MASK_6BITS];",
    "info" : "ExpressionStatement[20211-20263]:ExpressionStatement[20211-20263]"
  }, {
    "left" : "buffer[pos++] = encodeTable[(x >> 12) & MASK_6BITS];",
    "right" : "buffer[pos++] = encodeTable[(x >> 12) & MASK_6BITS];",
    "info" : "ExpressionStatement[20284-20336]:ExpressionStatement[20284-20336]"
  }, {
    "left" : "buffer[pos++] = encodeTable[(x >> 6) & MASK_6BITS];",
    "right" : "buffer[pos++] = encodeTable[(x >> 6) & MASK_6BITS];",
    "info" : "ExpressionStatement[20357-20408]:ExpressionStatement[20357-20408]"
  }, {
    "left" : "buffer[pos++] = encodeTable[x & MASK_6BITS];",
    "right" : "buffer[pos++] = encodeTable[x & MASK_6BITS];",
    "info" : "ExpressionStatement[20429-20473]:ExpressionStatement[20429-20473]"
  }, {
    "left" : "currentLinePos += 4;",
    "right" : "currentLinePos += 4;",
    "info" : "ExpressionStatement[20494-20514]:ExpressionStatement[20494-20514]"
  }, {
    "left" : "if (lineLength > 0 && lineLength <= currentLinePos)",
    "right" : "if (lineLength > 0 && lineLength <= currentLinePos)",
    "info" : "IfStatement[20535-20802]:IfStatement[20535-20802]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[20587-20802]:Block[20587-20802]"
  }, {
    "left" : "System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);",
    "right" : "System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);",
    "info" : "ExpressionStatement[20613-20683]:ExpressionStatement[20613-20683]"
  }, {
    "left" : "pos += lineSeparator.length;",
    "right" : "pos += lineSeparator.length;",
    "info" : "ExpressionStatement[20708-20736]:ExpressionStatement[20708-20736]"
  }, {
    "left" : "currentLinePos = 0;",
    "right" : "currentLinePos = 0;",
    "info" : "ExpressionStatement[20761-20780]:ExpressionStatement[20761-20780]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[21995-21999]:PrimitiveType[21995-21999]"
  }, {
    "left" : "decode",
    "right" : "decode",
    "info" : "SimpleName[22000-22006]:SimpleName[22000-22006]"
  }, {
    "left" : "byte[] in",
    "right" : "byte[] in",
    "info" : "SingleVariableDeclaration[22007-22016]:SingleVariableDeclaration[22007-22016]"
  }, {
    "left" : "int inPos",
    "right" : "int inPos",
    "info" : "SingleVariableDeclaration[22018-22027]:SingleVariableDeclaration[22018-22027]"
  }, {
    "left" : "int inAvail",
    "right" : "int inAvail",
    "info" : "SingleVariableDeclaration[22029-22040]:SingleVariableDeclaration[22029-22040]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[22042-23782]:Block[22042-23898]"
  }, {
    "left" : "if (eof)",
    "right" : "if (eof)",
    "info" : "IfStatement[22052-22092]:IfStatement[22052-22092]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[22061-22092]:Block[22061-22092]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[22075-22082]:ReturnStatement[22075-22082]"
  }, {
    "left" : "if (inAvail < 0)",
    "right" : "if (inAvail < 0)",
    "info" : "IfStatement[22101-22153]:IfStatement[22101-22153]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[22118-22153]:Block[22118-22153]"
  }, {
    "left" : "eof = true;",
    "right" : "eof = true;",
    "info" : "ExpressionStatement[22132-22143]:ExpressionStatement[22132-22143]"
  }, {
    "left" : "for (int i = 0; i < inAvail; i++)",
    "right" : "for (int i = 0; i < inAvail; i++)",
    "info" : "ForStatement[22162-23078]:ForStatement[22162-23078]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[22196-23078]:Block[22196-23078]"
  }, {
    "left" : "if (buffer == null || buffer.length - pos < decodeSize)",
    "right" : "if (buffer == null || buffer.length - pos < decodeSize)",
    "info" : "IfStatement[22210-22313]:IfStatement[22210-22313]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[22266-22313]:Block[22266-22313]"
  }, {
    "left" : "resizeBuffer();",
    "right" : "resizeBuffer();",
    "info" : "ExpressionStatement[22284-22299]:ExpressionStatement[22284-22299]"
  }, {
    "left" : "byte b = in[inPos++];",
    "right" : "byte b = in[inPos++];",
    "info" : "VariableDeclarationStatement[22326-22347]:VariableDeclarationStatement[22326-22347]"
  }, {
    "left" : "if (b == PAD)",
    "right" : "if (b == PAD)",
    "info" : "IfStatement[22360-23068]:IfStatement[22360-23068]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[22374-22471]:Block[22374-22471]"
  }, {
    "left" : "eof = true;",
    "right" : "eof = true;",
    "info" : "ExpressionStatement[22423-22434]:ExpressionStatement[22423-22434]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[22451-22457]:BreakStatement[22451-22457]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[22477-23068]:Block[22477-23068]"
  }, {
    "left" : "if (b >= 0 && b < DECODE_TABLE.length)",
    "right" : "if (b >= 0 && b < DECODE_TABLE.length)",
    "info" : "IfStatement[22495-23054]:IfStatement[22495-23054]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[22534-23054]:Block[22534-23054]"
  }, {
    "left" : "int result = DECODE_TABLE[b];",
    "right" : "int result = DECODE_TABLE[b];",
    "info" : "VariableDeclarationStatement[22556-22585]:VariableDeclarationStatement[22556-22585]"
  }, {
    "left" : "if (result >= 0)",
    "right" : "if (result >= 0)",
    "info" : "IfStatement[22606-23036]:IfStatement[22606-23036]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[22623-23036]:Block[22623-23036]"
  }, {
    "left" : "modulus = (++modulus) % 4;",
    "right" : "modulus = (++modulus) % 4;",
    "info" : "ExpressionStatement[22649-22675]:ExpressionStatement[22649-22675]"
  }, {
    "left" : "x = (x << 6) + result;",
    "right" : "x = (x << 6) + result;",
    "info" : "ExpressionStatement[22700-22722]:ExpressionStatement[22700-22722]"
  }, {
    "left" : "if (modulus == 0)",
    "right" : "if (modulus == 0)",
    "info" : "IfStatement[22747-23014]:IfStatement[22747-23014]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[22765-23014]:Block[22765-23014]"
  }, {
    "left" : "buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);",
    "right" : "buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);",
    "info" : "ExpressionStatement[22795-22843]:ExpressionStatement[22795-22843]"
  }, {
    "left" : "buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);",
    "right" : "buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);",
    "info" : "ExpressionStatement[22872-22919]:ExpressionStatement[22872-22919]"
  }, {
    "left" : "buffer[pos++] = (byte) (x & MASK_8BITS);",
    "right" : "buffer[pos++] = (byte) (x & MASK_8BITS);",
    "info" : "ExpressionStatement[22948-22988]:ExpressionStatement[22948-22988]"
  }, {
    "left" : "if (eof && modulus != 0)",
    "right" : "if (eof && modulus != 0)",
    "info" : "IfStatement[23316-23776]:IfStatement[23316-23892]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[23341-23776]:Block[23341-23892]"
  }, {
    "left" : "x = x << 6;",
    "right" : "x = x << 6;",
    "info" : "ExpressionStatement[23368-23379]:ExpressionStatement[23484-23495]"
  }, {
    "left" : "switch (modulus) {\n                case 2 :\n                    x = x << 6;\n                    buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);\n                    break;\n                case 3 :\n                    buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);\n                    buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);\n                    break;\n            }",
    "right" : "switch (modulus) {\n                case 2 :\n                    x = x << 6;\n                    buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);\n                    break;\n                case 3 :\n                    buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);\n                    buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);\n                    break;\n            }",
    "info" : "SwitchStatement[23392-23766]:SwitchStatement[23508-23882]"
  }, {
    "left" : "case 2 :",
    "right" : "case 2 :",
    "info" : "SwitchCase[23427-23435]:SwitchCase[23543-23551]"
  }, {
    "left" : "x = x << 6;",
    "right" : "x = x << 6;",
    "info" : "ExpressionStatement[23456-23467]:ExpressionStatement[23572-23583]"
  }, {
    "left" : "buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);",
    "right" : "buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);",
    "info" : "ExpressionStatement[23488-23536]:ExpressionStatement[23604-23652]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[23557-23563]:BreakStatement[23673-23679]"
  }, {
    "left" : "case 3 :",
    "right" : "case 3 :",
    "info" : "SwitchCase[23580-23588]:SwitchCase[23696-23704]"
  }, {
    "left" : "buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);",
    "right" : "buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);",
    "info" : "ExpressionStatement[23609-23657]:ExpressionStatement[23725-23773]"
  }, {
    "left" : "buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);",
    "right" : "buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);",
    "info" : "ExpressionStatement[23678-23725]:ExpressionStatement[23794-23841]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[23746-23752]:BreakStatement[23862-23868]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[24083-24089]:Modifier[24199-24205]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[24090-24096]:Modifier[24206-24212]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[24097-24104]:PrimitiveType[24213-24220]"
  }, {
    "left" : "isBase64",
    "right" : "isBase64",
    "info" : "SimpleName[24105-24113]:SimpleName[24221-24229]"
  }, {
    "left" : "byte octet",
    "right" : "byte octet",
    "info" : "SingleVariableDeclaration[24114-24124]:SingleVariableDeclaration[24230-24240]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[24126-24238]:Block[24242-24354]"
  }, {
    "left" : "return octet == PAD || (octet >= 0 && octet < DECODE_TABLE.length && DECODE_TABLE[octet] != -1);",
    "right" : "return octet == PAD || (octet >= 0 && octet < DECODE_TABLE.length && DECODE_TABLE[octet] != -1);",
    "info" : "ReturnStatement[24136-24232]:ReturnStatement[24252-24348]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[24643-24649]:Modifier[24759-24765]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[24650-24656]:Modifier[24766-24772]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[24657-24664]:PrimitiveType[24773-24780]"
  }, {
    "left" : "isArrayByteBase64",
    "right" : "isArrayByteBase64",
    "info" : "SimpleName[24665-24682]:SimpleName[24781-24798]"
  }, {
    "left" : "byte[] arrayOctet",
    "right" : "byte[] arrayOctet",
    "info" : "SingleVariableDeclaration[24683-24700]:SingleVariableDeclaration[24799-24816]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[24702-24914]:Block[24818-25030]"
  }, {
    "left" : "for (int i = 0; i < arrayOctet.length; i++)",
    "right" : "for (int i = 0; i < arrayOctet.length; i++)",
    "info" : "ForStatement[24712-24887]:ForStatement[24828-25003]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[24756-24887]:Block[24872-25003]"
  }, {
    "left" : "if (!isBase64(arrayOctet[i]) && !isWhiteSpace(arrayOctet[i]))",
    "right" : "if (!isBase64(arrayOctet[i]) && !isWhiteSpace(arrayOctet[i]))",
    "info" : "IfStatement[24770-24877]:IfStatement[24886-24993]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[24832-24877]:Block[24948-24993]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[24850-24863]:ReturnStatement[24966-24979]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[24896-24908]:ReturnStatement[25012-25024]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[25214-25221]:Modifier[25330-25337]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[25222-25228]:Modifier[25338-25344]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[25229-25236]:PrimitiveType[25345-25352]"
  }, {
    "left" : "containsBase64Byte",
    "right" : "containsBase64Byte",
    "info" : "SimpleName[25237-25255]:SimpleName[25353-25371]"
  }, {
    "left" : "byte[] arrayOctet",
    "right" : "byte[] arrayOctet",
    "info" : "SingleVariableDeclaration[25256-25273]:SingleVariableDeclaration[25372-25389]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[25275-25454]:Block[25391-25570]"
  }, {
    "left" : "for (int i = 0; i < arrayOctet.length; i++)",
    "right" : "for (int i = 0; i < arrayOctet.length; i++)",
    "info" : "ForStatement[25285-25426]:ForStatement[25401-25542]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[25329-25426]:Block[25445-25542]"
  }, {
    "left" : "if (isBase64(arrayOctet[i]))",
    "right" : "if (isBase64(arrayOctet[i]))",
    "info" : "IfStatement[25343-25416]:IfStatement[25459-25532]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[25372-25416]:Block[25488-25532]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[25390-25402]:ReturnStatement[25506-25518]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[25435-25448]:ReturnStatement[25551-25564]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[25716-25722]:Modifier[25832-25838]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[25723-25729]:Modifier[25839-25845]"
  }, {
    "left" : "byte[]",
    "right" : "byte[]",
    "info" : "ArrayType[25730-25736]:ArrayType[25846-25852]"
  }, {
    "left" : "encodeBase64",
    "right" : "encodeBase64",
    "info" : "SimpleName[25737-25749]:SimpleName[25853-25865]"
  }, {
    "left" : "byte[] binaryData",
    "right" : "byte[] binaryData",
    "info" : "SingleVariableDeclaration[25750-25767]:SingleVariableDeclaration[25866-25883]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[25769-25824]:Block[25885-25940]"
  }, {
    "left" : "return encodeBase64(binaryData, false);",
    "right" : "return encodeBase64(binaryData, false);",
    "info" : "ReturnStatement[25779-25818]:ReturnStatement[25895-25934]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[26090-26096]:Modifier[26206-26212]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[26097-26103]:Modifier[26213-26219]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[26104-26110]:SimpleType[26220-26226]"
  }, {
    "left" : "encodeBase64String",
    "right" : "encodeBase64String",
    "info" : "SimpleName[26111-26129]:SimpleName[26227-26245]"
  }, {
    "left" : "byte[] binaryData",
    "right" : "byte[] binaryData",
    "info" : "SingleVariableDeclaration[26130-26147]:SingleVariableDeclaration[26246-26263]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[26149-26230]:Block[26265-26346]"
  }, {
    "left" : "return StringUtils.newStringUtf8(encodeBase64(binaryData, true));",
    "right" : "return StringUtils.newStringUtf8(encodeBase64(binaryData, true));",
    "info" : "ReturnStatement[26159-26224]:ReturnStatement[26275-26340]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[26613-26619]:Modifier[26729-26735]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[26620-26626]:Modifier[26736-26742]"
  }, {
    "left" : "byte[]",
    "right" : "byte[]",
    "info" : "ArrayType[26627-26633]:ArrayType[26743-26749]"
  }, {
    "left" : "encodeBase64URLSafe",
    "right" : "encodeBase64URLSafe",
    "info" : "SimpleName[26634-26653]:SimpleName[26750-26769]"
  }, {
    "left" : "byte[] binaryData",
    "right" : "byte[] binaryData",
    "info" : "SingleVariableDeclaration[26654-26671]:SingleVariableDeclaration[26770-26787]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[26673-26734]:Block[26789-26850]"
  }, {
    "left" : "return encodeBase64(binaryData, false, true);",
    "right" : "return encodeBase64(binaryData, false, true);",
    "info" : "ReturnStatement[26683-26728]:ReturnStatement[26799-26844]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[27085-27091]:Modifier[27201-27207]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[27092-27098]:Modifier[27208-27214]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[27099-27105]:SimpleType[27215-27221]"
  }, {
    "left" : "encodeBase64URLSafeString",
    "right" : "encodeBase64URLSafeString",
    "info" : "SimpleName[27106-27131]:SimpleName[27222-27247]"
  }, {
    "left" : "byte[] binaryData",
    "right" : "byte[] binaryData",
    "info" : "SingleVariableDeclaration[27132-27149]:SingleVariableDeclaration[27248-27265]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[27151-27239]:Block[27267-27355]"
  }, {
    "left" : "return StringUtils.newStringUtf8(encodeBase64(binaryData, false, true));",
    "right" : "return StringUtils.newStringUtf8(encodeBase64(binaryData, false, true));",
    "info" : "ReturnStatement[27161-27233]:ReturnStatement[27277-27349]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[27511-27517]:Modifier[27627-27633]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[27518-27524]:Modifier[27634-27640]"
  }, {
    "left" : "byte[]",
    "right" : "byte[]",
    "info" : "ArrayType[27525-27531]:ArrayType[27641-27647]"
  }, {
    "left" : "encodeBase64Chunked",
    "right" : "encodeBase64Chunked",
    "info" : "SimpleName[27532-27551]:SimpleName[27648-27667]"
  }, {
    "left" : "byte[] binaryData",
    "right" : "byte[] binaryData",
    "info" : "SingleVariableDeclaration[27552-27569]:SingleVariableDeclaration[27668-27685]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[27571-27625]:Block[27687-27741]"
  }, {
    "left" : "return encodeBase64(binaryData, true);",
    "right" : "return encodeBase64(binaryData, true);",
    "info" : "ReturnStatement[27581-27619]:ReturnStatement[27697-27735]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[28169-28175]:Modifier[28285-28291]"
  }, {
    "left" : "Object",
    "right" : "Object",
    "info" : "SimpleType[28176-28182]:SimpleType[28292-28298]"
  }, {
    "left" : "decode",
    "right" : "decode",
    "info" : "SimpleName[28183-28189]:SimpleName[28299-28305]"
  }, {
    "left" : "Object pObject",
    "right" : "Object pObject",
    "info" : "SingleVariableDeclaration[28190-28204]:SingleVariableDeclaration[28306-28320]"
  }, {
    "left" : "DecoderException",
    "right" : "DecoderException",
    "info" : "SimpleType[28213-28229]:SimpleType[28329-28345]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[28230-28558]:Block[28346-28674]"
  }, {
    "left" : "if (pObject instanceof byte[])",
    "right" : "if (pObject instanceof byte[])",
    "info" : "IfStatement[28248-28552]:IfStatement[28364-28668]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[28279-28335]:Block[28395-28451]"
  }, {
    "left" : "return decode((byte[]) pObject);",
    "right" : "return decode((byte[]) pObject);",
    "info" : "ReturnStatement[28293-28325]:ReturnStatement[28409-28441]"
  }, {
    "left" : "if (pObject instanceof String)",
    "right" : "if (pObject instanceof String)",
    "info" : "IfStatement[28341-28552]:IfStatement[28457-28668]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[28372-28428]:Block[28488-28544]"
  }, {
    "left" : "return decode((String) pObject);",
    "right" : "return decode((String) pObject);",
    "info" : "ReturnStatement[28386-28418]:ReturnStatement[28502-28534]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[28434-28552]:Block[28550-28668]"
  }, {
    "left" : "throw new DecoderException(\"Parameter supplied to Base64 decode is not a byte[] or a String\");",
    "right" : "throw new DecoderException(\"Parameter supplied to Base64 decode is not a byte[] or a String\");",
    "info" : "ThrowStatement[28448-28542]:ThrowStatement[28564-28658]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[28807-28813]:Modifier[28923-28929]"
  }, {
    "left" : "byte[]",
    "right" : "byte[]",
    "info" : "ArrayType[28814-28820]:ArrayType[28930-28936]"
  }, {
    "left" : "decode",
    "right" : "decode",
    "info" : "SimpleName[28821-28827]:SimpleName[28937-28943]"
  }, {
    "left" : "String pArray",
    "right" : "String pArray",
    "info" : "SingleVariableDeclaration[28828-28841]:SingleVariableDeclaration[28944-28957]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[28843-28907]:Block[28959-29023]"
  }, {
    "left" : "return decode(StringUtils.getBytesUtf8(pArray));",
    "right" : "return decode(StringUtils.getBytesUtf8(pArray));",
    "info" : "ReturnStatement[28853-28901]:ReturnStatement[28969-29017]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[29143-29149]:Modifier[29259-29265]"
  }, {
    "left" : "byte[]",
    "right" : "byte[]",
    "info" : "ArrayType[29150-29156]:ArrayType[29266-29272]"
  }, {
    "left" : "decode",
    "right" : "decode",
    "info" : "SimpleName[29157-29163]:SimpleName[29273-29279]"
  }, {
    "left" : "byte[] pArray",
    "right" : "byte[] pArray",
    "info" : "SingleVariableDeclaration[29164-29177]:SingleVariableDeclaration[29280-29293]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[29179-29986]:Block[29295-30102]"
  }, {
    "left" : "reset();",
    "right" : "reset();",
    "info" : "ExpressionStatement[29189-29197]:ExpressionStatement[29305-29313]"
  }, {
    "left" : "if (pArray == null || pArray.length == 0)",
    "right" : "if (pArray == null || pArray.length == 0)",
    "info" : "IfStatement[29206-29286]:IfStatement[29322-29402]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[29248-29286]:Block[29364-29402]"
  }, {
    "left" : "return pArray;",
    "right" : "return pArray;",
    "info" : "ReturnStatement[29262-29276]:ReturnStatement[29378-29392]"
  }, {
    "left" : "long len = (pArray.length * 3) / 4;",
    "right" : "long len = (pArray.length * 3) / 4;",
    "info" : "VariableDeclarationStatement[29295-29330]:VariableDeclarationStatement[29411-29446]"
  }, {
    "left" : "byte[] buf = new byte[(int) len];",
    "right" : "byte[] buf = new byte[(int) len];",
    "info" : "VariableDeclarationStatement[29339-29372]:VariableDeclarationStatement[29455-29488]"
  }, {
    "left" : "setInitialBuffer(buf, 0, buf.length);",
    "right" : "setInitialBuffer(buf, 0, buf.length);",
    "info" : "ExpressionStatement[29381-29418]:ExpressionStatement[29497-29534]"
  }, {
    "left" : "decode(pArray, 0, pArray.length);",
    "right" : "decode(pArray, 0, pArray.length);",
    "info" : "ExpressionStatement[29427-29460]:ExpressionStatement[29543-29576]"
  }, {
    "left" : "decode(pArray, 0, -1);",
    "right" : "decode(pArray, 0, -1);",
    "info" : "ExpressionStatement[29469-29491]:ExpressionStatement[29585-29607]"
  }, {
    "left" : "byte[] result = new byte[pos];",
    "right" : "byte[] result = new byte[pos];",
    "info" : "VariableDeclarationStatement[29880-29910]:VariableDeclarationStatement[29996-30026]"
  }, {
    "left" : "readResults(result, 0, result.length);",
    "right" : "readResults(result, 0, result.length);",
    "info" : "ExpressionStatement[29919-29957]:ExpressionStatement[30035-30073]"
  }, {
    "left" : "return result;",
    "right" : "return result;",
    "info" : "ReturnStatement[29966-29980]:ReturnStatement[30082-30096]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[30524-30530]:Modifier[30640-30646]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[30531-30537]:Modifier[30647-30653]"
  }, {
    "left" : "byte[]",
    "right" : "byte[]",
    "info" : "ArrayType[30538-30544]:ArrayType[30654-30660]"
  }, {
    "left" : "encodeBase64",
    "right" : "encodeBase64",
    "info" : "SimpleName[30545-30557]:SimpleName[30661-30673]"
  }, {
    "left" : "byte[] binaryData",
    "right" : "byte[] binaryData",
    "info" : "SingleVariableDeclaration[30558-30575]:SingleVariableDeclaration[30674-30691]"
  }, {
    "left" : "boolean isChunked",
    "right" : "boolean isChunked",
    "info" : "SingleVariableDeclaration[30577-30594]:SingleVariableDeclaration[30693-30710]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[30596-30662]:Block[30712-30778]"
  }, {
    "left" : "return encodeBase64(binaryData, isChunked, false);",
    "right" : "return encodeBase64(binaryData, isChunked, false);",
    "info" : "ReturnStatement[30606-30656]:ReturnStatement[30722-30772]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[31351-31357]:Modifier[31467-31473]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[31358-31364]:Modifier[31474-31480]"
  }, {
    "left" : "byte[]",
    "right" : "byte[]",
    "info" : "ArrayType[31365-31371]:ArrayType[31481-31487]"
  }, {
    "left" : "encodeBase64",
    "right" : "encodeBase64",
    "info" : "SimpleName[31372-31384]:SimpleName[31488-31500]"
  }, {
    "left" : "byte[] binaryData",
    "right" : "byte[] binaryData",
    "info" : "SingleVariableDeclaration[31385-31402]:SingleVariableDeclaration[31501-31518]"
  }, {
    "left" : "boolean isChunked",
    "right" : "boolean isChunked",
    "info" : "SingleVariableDeclaration[31404-31421]:SingleVariableDeclaration[31520-31537]"
  }, {
    "left" : "boolean urlSafe",
    "right" : "boolean urlSafe",
    "info" : "SingleVariableDeclaration[31423-31438]:SingleVariableDeclaration[31539-31554]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[31440-31527]:Block[31556-31643]"
  }, {
    "left" : "return encodeBase64(binaryData, isChunked, urlSafe, Integer.MAX_VALUE);",
    "right" : "return encodeBase64(binaryData, isChunked, urlSafe, Integer.MAX_VALUE);",
    "info" : "ReturnStatement[31450-31521]:ReturnStatement[31566-31637]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[32285-32291]:Modifier[32401-32407]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[32292-32298]:Modifier[32408-32414]"
  }, {
    "left" : "byte[]",
    "right" : "byte[]",
    "info" : "ArrayType[32299-32305]:ArrayType[32415-32421]"
  }, {
    "left" : "encodeBase64",
    "right" : "encodeBase64",
    "info" : "SimpleName[32306-32318]:SimpleName[32422-32434]"
  }, {
    "left" : "byte[] binaryData",
    "right" : "byte[] binaryData",
    "info" : "SingleVariableDeclaration[32319-32336]:SingleVariableDeclaration[32435-32452]"
  }, {
    "left" : "boolean isChunked",
    "right" : "boolean isChunked",
    "info" : "SingleVariableDeclaration[32338-32355]:SingleVariableDeclaration[32454-32471]"
  }, {
    "left" : "boolean urlSafe",
    "right" : "boolean urlSafe",
    "info" : "SingleVariableDeclaration[32357-32372]:SingleVariableDeclaration[32473-32488]"
  }, {
    "left" : "int maxResultSize",
    "right" : "int maxResultSize",
    "info" : "SingleVariableDeclaration[32374-32391]:SingleVariableDeclaration[32490-32507]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[32393-32999]:Block[32509-33115]"
  }, {
    "left" : "if (binaryData == null || binaryData.length == 0)",
    "right" : "if (binaryData == null || binaryData.length == 0)",
    "info" : "IfStatement[32403-32495]:IfStatement[32519-32611]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[32453-32495]:Block[32569-32611]"
  }, {
    "left" : "return binaryData;",
    "right" : "return binaryData;",
    "info" : "ReturnStatement[32467-32485]:ReturnStatement[32583-32601]"
  }, {
    "left" : "long len = getEncodeLength(binaryData, MIME_CHUNK_SIZE, CHUNK_SEPARATOR);",
    "right" : "long len = getEncodeLength(binaryData, MIME_CHUNK_SIZE, CHUNK_SEPARATOR);",
    "info" : "VariableDeclarationStatement[32505-32578]:VariableDeclarationStatement[32621-32694]"
  }, {
    "left" : "if (len > maxResultSize)",
    "right" : "if (len > maxResultSize)",
    "info" : "IfStatement[32587-32841]:IfStatement[32703-32957]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[32612-32841]:Block[32728-32957]"
  }, {
    "left" : "throw new IllegalArgumentException(\"Input array too big, the output array would be bigger (\" +\n                len +\n                \") than the specified maxium size of \" +\n                maxResultSize);",
    "right" : "throw new IllegalArgumentException(\"Input array too big, the output array would be bigger (\" +\n                len +\n                \") than the specified maxium size of \" +\n                maxResultSize);",
    "info" : "ThrowStatement[32626-32831]:ThrowStatement[32742-32947]"
  }, {
    "left" : "Base64 b64 = isChunked ? new Base64(urlSafe) : new Base64(0, CHUNK_SEPARATOR, urlSafe);",
    "right" : "Base64 b64 = isChunked ? new Base64(urlSafe) : new Base64(0, CHUNK_SEPARATOR, urlSafe);",
    "info" : "VariableDeclarationStatement[32867-32954]:VariableDeclarationStatement[32983-33070]"
  }, {
    "left" : "return b64.encode(binaryData);",
    "right" : "return b64.encode(binaryData);",
    "info" : "ReturnStatement[32963-32993]:ReturnStatement[33079-33109]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[33210-33216]:Modifier[33326-33332]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[33217-33223]:Modifier[33333-33339]"
  }, {
    "left" : "byte[]",
    "right" : "byte[]",
    "info" : "ArrayType[33224-33230]:ArrayType[33340-33346]"
  }, {
    "left" : "decodeBase64",
    "right" : "decodeBase64",
    "info" : "SimpleName[33231-33243]:SimpleName[33347-33359]"
  }, {
    "left" : "String base64String",
    "right" : "String base64String",
    "info" : "SingleVariableDeclaration[33244-33263]:SingleVariableDeclaration[33360-33379]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[33265-33322]:Block[33381-33438]"
  }, {
    "left" : "return new Base64().decode(base64String);",
    "right" : "return new Base64().decode(base64String);",
    "info" : "ReturnStatement[33275-33316]:ReturnStatement[33391-33432]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[33514-33520]:Modifier[33630-33636]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[33521-33527]:Modifier[33637-33643]"
  }, {
    "left" : "byte[]",
    "right" : "byte[]",
    "info" : "ArrayType[33528-33534]:ArrayType[33644-33650]"
  }, {
    "left" : "decodeBase64",
    "right" : "decodeBase64",
    "info" : "SimpleName[33535-33547]:SimpleName[33651-33663]"
  }, {
    "left" : "byte[] base64Data",
    "right" : "byte[] base64Data",
    "info" : "SingleVariableDeclaration[33548-33565]:SingleVariableDeclaration[33664-33681]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[33567-33622]:Block[33683-33738]"
  }, {
    "left" : "return new Base64().decode(base64Data);",
    "right" : "return new Base64().decode(base64Data);",
    "info" : "ReturnStatement[33577-33616]:ReturnStatement[33693-33732]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[33915-33921]:Modifier[34031-34037]"
  }, {
    "left" : "byte[]",
    "right" : "byte[]",
    "info" : "ArrayType[33922-33928]:ArrayType[34038-34044]"
  }, {
    "left" : "discardWhitespace",
    "right" : "discardWhitespace",
    "info" : "SimpleName[33929-33946]:SimpleName[34045-34062]"
  }, {
    "left" : "byte[] data",
    "right" : "byte[] data",
    "info" : "SingleVariableDeclaration[33947-33958]:SingleVariableDeclaration[34063-34074]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[33960-34521]:Block[34076-34637]"
  }, {
    "left" : "byte groomedData[] = new byte[data.length];",
    "right" : "byte groomedData[] = new byte[data.length];",
    "info" : "VariableDeclarationStatement[33970-34013]:VariableDeclarationStatement[34086-34129]"
  }, {
    "left" : "int bytesCopied = 0;",
    "right" : "int bytesCopied = 0;",
    "info" : "VariableDeclarationStatement[34022-34042]:VariableDeclarationStatement[34138-34158]"
  }, {
    "left" : "for (int i = 0; i < data.length; i++)",
    "right" : "for (int i = 0; i < data.length; i++)",
    "info" : "ForStatement[34051-34367]:ForStatement[34167-34483]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[34089-34367]:Block[34205-34483]"
  }, {
    "left" : "switch (data[i]) {\n                case ' ' :\n                case '\\n' :\n                case '\\r' :\n                case '\\t' :\n                    break;\n                default :\n                    groomedData[bytesCopied++] = data[i];\n            }",
    "right" : "switch (data[i]) {\n                case ' ' :\n                case '\\n' :\n                case '\\r' :\n                case '\\t' :\n                    break;\n                default :\n                    groomedData[bytesCopied++] = data[i];\n            }",
    "info" : "SwitchStatement[34103-34357]:SwitchStatement[34219-34473]"
  }, {
    "left" : "case ' ' :",
    "right" : "case ' ' :",
    "info" : "SwitchCase[34138-34148]:SwitchCase[34254-34264]"
  }, {
    "left" : "case '\\n' :",
    "right" : "case '\\n' :",
    "info" : "SwitchCase[34165-34176]:SwitchCase[34281-34292]"
  }, {
    "left" : "case '\\r' :",
    "right" : "case '\\r' :",
    "info" : "SwitchCase[34193-34204]:SwitchCase[34309-34320]"
  }, {
    "left" : "case '\\t' :",
    "right" : "case '\\t' :",
    "info" : "SwitchCase[34221-34232]:SwitchCase[34337-34348]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[34253-34259]:BreakStatement[34369-34375]"
  }, {
    "left" : "default :",
    "right" : "default :",
    "info" : "SwitchCase[34276-34285]:SwitchCase[34392-34401]"
  }, {
    "left" : "groomedData[bytesCopied++] = data[i];",
    "right" : "groomedData[bytesCopied++] = data[i];",
    "info" : "ExpressionStatement[34306-34343]:ExpressionStatement[34422-34459]"
  }, {
    "left" : "byte packedData[] = new byte[bytesCopied];",
    "right" : "byte packedData[] = new byte[bytesCopied];",
    "info" : "VariableDeclarationStatement[34376-34418]:VariableDeclarationStatement[34492-34534]"
  }, {
    "left" : "System.arraycopy(groomedData, 0, packedData, 0, bytesCopied);",
    "right" : "System.arraycopy(groomedData, 0, packedData, 0, bytesCopied);",
    "info" : "ExpressionStatement[34427-34488]:ExpressionStatement[34543-34604]"
  }, {
    "left" : "return packedData;",
    "right" : "return packedData;",
    "info" : "ReturnStatement[34497-34515]:ReturnStatement[34613-34631]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[34724-34731]:Modifier[34840-34847]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[34732-34738]:Modifier[34848-34854]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[34739-34746]:PrimitiveType[34855-34862]"
  }, {
    "left" : "isWhiteSpace",
    "right" : "isWhiteSpace",
    "info" : "SimpleName[34747-34759]:SimpleName[34863-34875]"
  }, {
    "left" : "byte byteToCheck",
    "right" : "byte byteToCheck",
    "info" : "SingleVariableDeclaration[34760-34776]:SingleVariableDeclaration[34876-34892]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[34778-35002]:Block[34894-35118]"
  }, {
    "left" : "switch (byteToCheck) {\n            case ' ' :\n            case '\\n' :\n            case '\\r' :\n            case '\\t' :\n                return true;\n            default :\n                return false;\n        }",
    "right" : "switch (byteToCheck) {\n            case ' ' :\n            case '\\n' :\n            case '\\r' :\n            case '\\t' :\n                return true;\n            default :\n                return false;\n        }",
    "info" : "SwitchStatement[34788-34996]:SwitchStatement[34904-35112]"
  }, {
    "left" : "case ' ' :",
    "right" : "case ' ' :",
    "info" : "SwitchCase[34823-34833]:SwitchCase[34939-34949]"
  }, {
    "left" : "case '\\n' :",
    "right" : "case '\\n' :",
    "info" : "SwitchCase[34846-34857]:SwitchCase[34962-34973]"
  }, {
    "left" : "case '\\r' :",
    "right" : "case '\\r' :",
    "info" : "SwitchCase[34870-34881]:SwitchCase[34986-34997]"
  }, {
    "left" : "case '\\t' :",
    "right" : "case '\\t' :",
    "info" : "SwitchCase[34894-34905]:SwitchCase[35010-35021]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[34922-34934]:ReturnStatement[35038-35050]"
  }, {
    "left" : "default :",
    "right" : "default :",
    "info" : "SwitchCase[34947-34956]:SwitchCase[35063-35072]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[34973-34986]:ReturnStatement[35089-35102]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[35583-35589]:Modifier[35699-35705]"
  }, {
    "left" : "Object",
    "right" : "Object",
    "info" : "SimpleType[35590-35596]:SimpleType[35706-35712]"
  }, {
    "left" : "encode",
    "right" : "encode",
    "info" : "SimpleName[35597-35603]:SimpleName[35713-35719]"
  }, {
    "left" : "Object pObject",
    "right" : "Object pObject",
    "info" : "SingleVariableDeclaration[35604-35618]:SingleVariableDeclaration[35720-35734]"
  }, {
    "left" : "EncoderException",
    "right" : "EncoderException",
    "info" : "SimpleType[35627-35643]:SimpleType[35743-35759]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[35644-35841]:Block[35760-35957]"
  }, {
    "left" : "if (!(pObject instanceof byte[]))",
    "right" : "if (!(pObject instanceof byte[]))",
    "info" : "IfStatement[35654-35794]:IfStatement[35770-35910]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[35688-35794]:Block[35804-35910]"
  }, {
    "left" : "throw new EncoderException(\"Parameter supplied to Base64 encode is not a byte[]\");",
    "right" : "throw new EncoderException(\"Parameter supplied to Base64 encode is not a byte[]\");",
    "info" : "ThrowStatement[35702-35784]:ThrowStatement[35818-35900]"
  }, {
    "left" : "return encode((byte[]) pObject);",
    "right" : "return encode((byte[]) pObject);",
    "info" : "ReturnStatement[35803-35835]:ReturnStatement[35919-35951]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[36137-36143]:Modifier[36253-36259]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[36144-36150]:SimpleType[36260-36266]"
  }, {
    "left" : "encodeToString",
    "right" : "encodeToString",
    "info" : "SimpleName[36151-36165]:SimpleName[36267-36281]"
  }, {
    "left" : "byte[] pArray",
    "right" : "byte[] pArray",
    "info" : "SingleVariableDeclaration[36166-36179]:SingleVariableDeclaration[36282-36295]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[36181-36246]:Block[36297-36362]"
  }, {
    "left" : "return StringUtils.newStringUtf8(encode(pArray));",
    "right" : "return StringUtils.newStringUtf8(encode(pArray));",
    "info" : "ReturnStatement[36191-36240]:ReturnStatement[36307-36356]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[36525-36531]:Modifier[36641-36647]"
  }, {
    "left" : "byte[]",
    "right" : "byte[]",
    "info" : "ArrayType[36532-36538]:ArrayType[36648-36654]"
  }, {
    "left" : "encode",
    "right" : "encode",
    "info" : "SimpleName[36539-36545]:SimpleName[36655-36661]"
  }, {
    "left" : "byte[] pArray",
    "right" : "byte[] pArray",
    "info" : "SingleVariableDeclaration[36546-36559]:SingleVariableDeclaration[36662-36675]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[36561-37434]:Block[36677-37550]"
  }, {
    "left" : "reset();",
    "right" : "reset();",
    "info" : "ExpressionStatement[36571-36579]:ExpressionStatement[36687-36695]"
  }, {
    "left" : "if (pArray == null || pArray.length == 0)",
    "right" : "if (pArray == null || pArray.length == 0)",
    "info" : "IfStatement[36596-36676]:IfStatement[36712-36792]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[36638-36676]:Block[36754-36792]"
  }, {
    "left" : "return pArray;",
    "right" : "return pArray;",
    "info" : "ReturnStatement[36652-36666]:ReturnStatement[36768-36782]"
  }, {
    "left" : "long len = getEncodeLength(pArray, lineLength, lineSeparator);",
    "right" : "long len = getEncodeLength(pArray, lineLength, lineSeparator);",
    "info" : "VariableDeclarationStatement[36685-36747]:VariableDeclarationStatement[36801-36863]"
  }, {
    "left" : "byte[] buf = new byte[(int) len];",
    "right" : "byte[] buf = new byte[(int) len];",
    "info" : "VariableDeclarationStatement[36756-36789]:VariableDeclarationStatement[36872-36905]"
  }, {
    "left" : "setInitialBuffer(buf, 0, buf.length);",
    "right" : "setInitialBuffer(buf, 0, buf.length);",
    "info" : "ExpressionStatement[36798-36835]:ExpressionStatement[36914-36951]"
  }, {
    "left" : "encode(pArray, 0, pArray.length);",
    "right" : "encode(pArray, 0, pArray.length);",
    "info" : "ExpressionStatement[36844-36877]:ExpressionStatement[36960-36993]"
  }, {
    "left" : "encode(pArray, 0, -1);",
    "right" : "encode(pArray, 0, -1);",
    "info" : "ExpressionStatement[36886-36908]:ExpressionStatement[37002-37024]"
  }, {
    "left" : "if (buffer != buf)",
    "right" : "if (buffer != buf)",
    "info" : "IfStatement[37014-37089]:IfStatement[37130-37205]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[37033-37089]:Block[37149-37205]"
  }, {
    "left" : "readResults(buf, 0, buf.length);",
    "right" : "readResults(buf, 0, buf.length);",
    "info" : "ExpressionStatement[37047-37079]:ExpressionStatement[37163-37195]"
  }, {
    "left" : "if (isUrlSafe() && pos < buf.length)",
    "right" : "if (isUrlSafe() && pos < buf.length)",
    "info" : "IfStatement[37217-37400]:IfStatement[37333-37516]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[37254-37400]:Block[37370-37516]"
  }, {
    "left" : "byte[] smallerBuf = new byte[pos];",
    "right" : "byte[] smallerBuf = new byte[pos];",
    "info" : "VariableDeclarationStatement[37268-37302]:VariableDeclarationStatement[37384-37418]"
  }, {
    "left" : "System.arraycopy(buf, 0, smallerBuf, 0, pos);",
    "right" : "System.arraycopy(buf, 0, smallerBuf, 0, pos);",
    "info" : "ExpressionStatement[37315-37360]:ExpressionStatement[37431-37476]"
  }, {
    "left" : "buf = smallerBuf;",
    "right" : "buf = smallerBuf;",
    "info" : "ExpressionStatement[37373-37390]:ExpressionStatement[37489-37506]"
  }, {
    "left" : "return buf;",
    "right" : "return buf;",
    "info" : "ReturnStatement[37409-37420]:ReturnStatement[37525-37536]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[38006-38013]:Modifier[38122-38129]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[38014-38020]:Modifier[38130-38136]"
  }, {
    "left" : "long",
    "right" : "long",
    "info" : "PrimitiveType[38021-38025]:PrimitiveType[38137-38141]"
  }, {
    "left" : "getEncodeLength",
    "right" : "getEncodeLength",
    "info" : "SimpleName[38026-38041]:SimpleName[38142-38157]"
  }, {
    "left" : "byte[] pArray",
    "right" : "byte[] pArray",
    "info" : "SingleVariableDeclaration[38042-38055]:SingleVariableDeclaration[38158-38171]"
  }, {
    "left" : "int chunkSize",
    "right" : "int chunkSize",
    "info" : "SingleVariableDeclaration[38057-38070]:SingleVariableDeclaration[38173-38186]"
  }, {
    "left" : "byte[] chunkSeparator",
    "right" : "byte[] chunkSeparator",
    "info" : "SingleVariableDeclaration[38072-38093]:SingleVariableDeclaration[38188-38209]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[38095-38613]:Block[38211-38729]"
  }, {
    "left" : "chunkSize = (chunkSize / 4) * 4;",
    "right" : "chunkSize = (chunkSize / 4) * 4;",
    "info" : "ExpressionStatement[38157-38189]:ExpressionStatement[38273-38305]"
  }, {
    "left" : "long len = (pArray.length * 4) / 3;",
    "right" : "long len = (pArray.length * 4) / 3;",
    "info" : "VariableDeclarationStatement[38199-38234]:VariableDeclarationStatement[38315-38350]"
  }, {
    "left" : "long mod = len % 4;",
    "right" : "long mod = len % 4;",
    "info" : "VariableDeclarationStatement[38243-38262]:VariableDeclarationStatement[38359-38378]"
  }, {
    "left" : "if (mod != 0)",
    "right" : "if (mod != 0)",
    "info" : "IfStatement[38271-38324]:IfStatement[38387-38440]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[38285-38324]:Block[38401-38440]"
  }, {
    "left" : "len += 4 - mod;",
    "right" : "len += 4 - mod;",
    "info" : "ExpressionStatement[38299-38314]:ExpressionStatement[38415-38430]"
  }, {
    "left" : "if (chunkSize > 0)",
    "right" : "if (chunkSize > 0)",
    "info" : "IfStatement[38333-38587]:IfStatement[38449-38703]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[38352-38587]:Block[38468-38703]"
  }, {
    "left" : "boolean lenChunksPerfectly = len % chunkSize == 0;",
    "right" : "boolean lenChunksPerfectly = len % chunkSize == 0;",
    "info" : "VariableDeclarationStatement[38366-38416]:VariableDeclarationStatement[38482-38532]"
  }, {
    "left" : "len += (len / chunkSize) * chunkSeparator.length;",
    "right" : "len += (len / chunkSize) * chunkSeparator.length;",
    "info" : "ExpressionStatement[38429-38478]:ExpressionStatement[38545-38594]"
  }, {
    "left" : "if (!lenChunksPerfectly)",
    "right" : "if (!lenChunksPerfectly)",
    "info" : "IfStatement[38491-38577]:IfStatement[38607-38693]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[38516-38577]:Block[38632-38693]"
  }, {
    "left" : "len += chunkSeparator.length;",
    "right" : "len += chunkSeparator.length;",
    "info" : "ExpressionStatement[38534-38563]:ExpressionStatement[38650-38679]"
  }, {
    "left" : "return len;",
    "right" : "return len;",
    "info" : "ReturnStatement[38596-38607]:ReturnStatement[38712-38723]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[38930-38936]:Modifier[39046-39052]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[38937-38943]:Modifier[39053-39059]"
  }, {
    "left" : "BigInteger",
    "right" : "BigInteger",
    "info" : "SimpleType[38944-38954]:SimpleType[39060-39070]"
  }, {
    "left" : "decodeInteger",
    "right" : "decodeInteger",
    "info" : "SimpleName[38955-38968]:SimpleName[39071-39084]"
  }, {
    "left" : "byte[] pArray",
    "right" : "byte[] pArray",
    "info" : "SingleVariableDeclaration[38969-38982]:SingleVariableDeclaration[39085-39098]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[38984-39047]:Block[39100-39163]"
  }, {
    "left" : "return new BigInteger(1, decodeBase64(pArray));",
    "right" : "return new BigInteger(1, decodeBase64(pArray));",
    "info" : "ReturnStatement[38994-39041]:ReturnStatement[39110-39157]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[39385-39391]:Modifier[39501-39507]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[39392-39398]:Modifier[39508-39514]"
  }, {
    "left" : "byte[]",
    "right" : "byte[]",
    "info" : "ArrayType[39399-39405]:ArrayType[39515-39521]"
  }, {
    "left" : "encodeInteger",
    "right" : "encodeInteger",
    "info" : "SimpleName[39406-39419]:SimpleName[39522-39535]"
  }, {
    "left" : "BigInteger bigInt",
    "right" : "BigInteger bigInt",
    "info" : "SingleVariableDeclaration[39420-39437]:SingleVariableDeclaration[39536-39553]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[39439-39634]:Block[39555-39750]"
  }, {
    "left" : "if (bigInt == null)",
    "right" : "if (bigInt == null)",
    "info" : "IfStatement[39449-39568]:IfStatement[39565-39684]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[39469-39568]:Block[39585-39684]"
  }, {
    "left" : "throw new NullPointerException(\"encodeInteger called with null parameter\");",
    "right" : "throw new NullPointerException(\"encodeInteger called with null parameter\");",
    "info" : "ThrowStatement[39483-39558]:ThrowStatement[39599-39674]"
  }, {
    "left" : "return encodeBase64(toIntegerBytes(bigInt), false);",
    "right" : "return encodeBase64(toIntegerBytes(bigInt), false);",
    "info" : "ReturnStatement[39577-39628]:ReturnStatement[39693-39744]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[39904-39910]:Modifier[40020-40026]"
  }, {
    "left" : "byte[]",
    "right" : "byte[]",
    "info" : "ArrayType[39911-39917]:ArrayType[40027-40033]"
  }, {
    "left" : "toIntegerBytes",
    "right" : "toIntegerBytes",
    "info" : "SimpleName[39918-39932]:SimpleName[40034-40048]"
  }, {
    "left" : "BigInteger bigInt",
    "right" : "BigInteger bigInt",
    "info" : "SingleVariableDeclaration[39933-39950]:SingleVariableDeclaration[40049-40066]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[39952-40777]:Block[40068-40893]"
  }, {
    "left" : "int bitlen = bigInt.bitLength();",
    "right" : "int bitlen = bigInt.bitLength();",
    "info" : "VariableDeclarationStatement[39962-39994]:VariableDeclarationStatement[40078-40110]"
  }, {
    "left" : "bitlen = ((bitlen + 7) >> 3) << 3;",
    "right" : "bitlen = ((bitlen + 7) >> 3) << 3;",
    "info" : "ExpressionStatement[40027-40061]:ExpressionStatement[40143-40177]"
  }, {
    "left" : "byte[] bigBytes = bigInt.toByteArray();",
    "right" : "byte[] bigBytes = bigInt.toByteArray();",
    "info" : "VariableDeclarationStatement[40070-40109]:VariableDeclarationStatement[40186-40225]"
  }, {
    "left" : "if (((bigInt.bitLength() % 8) != 0) && (((bigInt.bitLength() / 8) + 1) == (bitlen / 8)))",
    "right" : "if (((bigInt.bitLength() % 8) != 0) && (((bigInt.bitLength() / 8) + 1) == (bitlen / 8)))",
    "info" : "IfStatement[40119-40248]:IfStatement[40235-40364]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[40208-40248]:Block[40324-40364]"
  }, {
    "left" : "return bigBytes;",
    "right" : "return bigBytes;",
    "info" : "ReturnStatement[40222-40238]:ReturnStatement[40338-40354]"
  }, {
    "left" : "int startSrc = 0;",
    "right" : "int startSrc = 0;",
    "info" : "VariableDeclarationStatement[40318-40335]:VariableDeclarationStatement[40434-40451]"
  }, {
    "left" : "int len = bigBytes.length;",
    "right" : "int len = bigBytes.length;",
    "info" : "VariableDeclarationStatement[40344-40370]:VariableDeclarationStatement[40460-40486]"
  }, {
    "left" : "if ((bigInt.bitLength() % 8) == 0)",
    "right" : "if ((bigInt.bitLength() % 8) == 0)",
    "info" : "IfStatement[40452-40543]:IfStatement[40568-40659]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[40487-40543]:Block[40603-40659]"
  }, {
    "left" : "startSrc = 1;",
    "right" : "startSrc = 1;",
    "info" : "ExpressionStatement[40501-40514]:ExpressionStatement[40617-40630]"
  }, {
    "left" : "len--;",
    "right" : "len--;",
    "info" : "ExpressionStatement[40527-40533]:ExpressionStatement[40643-40649]"
  }, {
    "left" : "int startDst = bitlen / 8 - len;",
    "right" : "int startDst = bitlen / 8 - len;",
    "info" : "VariableDeclarationStatement[40552-40584]:VariableDeclarationStatement[40668-40700]"
  }, {
    "left" : "byte[] resizedBytes = new byte[bitlen / 8];",
    "right" : "byte[] resizedBytes = new byte[bitlen / 8];",
    "info" : "VariableDeclarationStatement[40624-40667]:VariableDeclarationStatement[40740-40783]"
  }, {
    "left" : "System.arraycopy(bigBytes, startSrc, resizedBytes, startDst, len);",
    "right" : "System.arraycopy(bigBytes, startSrc, resizedBytes, startDst, len);",
    "info" : "ExpressionStatement[40676-40742]:ExpressionStatement[40792-40858]"
  }, {
    "left" : "return resizedBytes;",
    "right" : "return resizedBytes;",
    "info" : "ReturnStatement[40751-40771]:ReturnStatement[40867-40887]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[40872-40879]:Modifier[40988-40995]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[40880-40884]:PrimitiveType[40996-41000]"
  }, {
    "left" : "reset",
    "right" : "reset",
    "info" : "SimpleName[40885-40890]:SimpleName[41001-41006]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[40893-41031]:Block[41009-41147]"
  }, {
    "left" : "buffer = null;",
    "right" : "buffer = null;",
    "info" : "ExpressionStatement[40903-40917]:ExpressionStatement[41019-41033]"
  }, {
    "left" : "pos = 0;",
    "right" : "pos = 0;",
    "info" : "ExpressionStatement[40926-40934]:ExpressionStatement[41042-41050]"
  }, {
    "left" : "readPos = 0;",
    "right" : "readPos = 0;",
    "info" : "ExpressionStatement[40943-40955]:ExpressionStatement[41059-41071]"
  }, {
    "left" : "currentLinePos = 0;",
    "right" : "currentLinePos = 0;",
    "info" : "ExpressionStatement[40964-40983]:ExpressionStatement[41080-41099]"
  }, {
    "left" : "modulus = 0;",
    "right" : "modulus = 0;",
    "info" : "ExpressionStatement[40992-41004]:ExpressionStatement[41108-41120]"
  }, {
    "left" : "eof = false;",
    "right" : "eof = false;",
    "info" : "ExpressionStatement[41013-41025]:ExpressionStatement[41129-41141]"
  } ]
}