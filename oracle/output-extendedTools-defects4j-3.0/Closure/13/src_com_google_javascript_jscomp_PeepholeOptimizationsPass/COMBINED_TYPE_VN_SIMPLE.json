{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "PeepholeOptimizationsPass",
      "right" : "PeepholeOptimizationsPass",
      "info" : "TypeDeclaration[809-5543]:TypeDeclaration[809-5543]"
    }, {
      "left" : "private AbstractCompiler compiler;",
      "right" : "private AbstractCompiler compiler;",
      "info" : "FieldDeclaration[1103-1137]:FieldDeclaration[1103-1137]"
    }, {
      "left" : "private final AbstractPeepholeOptimization[] peepholeOptimizations;",
      "right" : "private final AbstractPeepholeOptimization[] peepholeOptimizations;",
      "info" : "FieldDeclaration[1210-1277]:FieldDeclaration[1210-1277]"
    }, {
      "left" : "private StateStack traversalState = new StateStack();",
      "right" : "private StateStack traversalState = new StateStack();",
      "info" : "FieldDeclaration[1376-1429]:FieldDeclaration[1376-1429]"
    }, {
      "left" : "ScopeState",
      "right" : "ScopeState",
      "info" : "TypeDeclaration[1433-1647]:TypeDeclaration[1433-1647]"
    }, {
      "left" : "boolean changed;",
      "right" : "boolean changed;",
      "info" : "FieldDeclaration[1471-1487]:FieldDeclaration[1471-1487]"
    }, {
      "left" : "boolean traverseChildScopes;",
      "right" : "boolean traverseChildScopes;",
      "info" : "FieldDeclaration[1492-1520]:FieldDeclaration[1492-1520]"
    }, {
      "left" : "ScopeState()",
      "right" : "ScopeState()",
      "info" : "MethodDeclaration[1525-1560]:MethodDeclaration[1525-1560]"
    }, {
      "left" : "void reset()",
      "right" : "void reset()",
      "info" : "MethodDeclaration[1566-1643]:MethodDeclaration[1566-1643]"
    }, {
      "left" : "StateStack",
      "right" : "StateStack",
      "info" : "TypeDeclaration[1651-2158]:TypeDeclaration[1651-2158]"
    }, {
      "left" : "private ArrayList<ScopeState> states = Lists.newArrayList();",
      "right" : "private ArrayList<ScopeState> states = Lists.newArrayList();",
      "info" : "FieldDeclaration[1689-1749]:FieldDeclaration[1689-1749]"
    }, {
      "left" : "private int currentDepth = 0;",
      "right" : "private int currentDepth = 0;",
      "info" : "FieldDeclaration[1754-1783]:FieldDeclaration[1754-1783]"
    }, {
      "left" : "StateStack()",
      "right" : "StateStack()",
      "info" : "MethodDeclaration[1789-1845]:MethodDeclaration[1789-1845]"
    }, {
      "left" : "ScopeState peek()",
      "right" : "ScopeState peek()",
      "info" : "MethodDeclaration[1851-1915]:MethodDeclaration[1851-1915]"
    }, {
      "left" : "void push()",
      "right" : "void push()",
      "info" : "MethodDeclaration[1921-2108]:MethodDeclaration[1921-2108]"
    }, {
      "left" : "void pop()",
      "right" : "void pop()",
      "info" : "MethodDeclaration[2114-2154]:MethodDeclaration[2114-2154]"
    }, {
      "left" : "PeepholeChangeHandler",
      "right" : "PeepholeChangeHandler",
      "info" : "TypeDeclaration[2162-2329]:TypeDeclaration[2162-2329]"
    }, {
      "left" : "public void reportChange()",
      "right" : "public void reportChange()",
      "info" : "MethodDeclaration[2233-2325]:MethodDeclaration[2233-2325]"
    }, {
      "left" : "PeepholeOptimizationsPass(AbstractCompiler compiler,\n      AbstractPeepholeOptimization... optimizations)",
      "right" : "PeepholeOptimizationsPass(AbstractCompiler compiler,\n      AbstractPeepholeOptimization... optimizations)",
      "info" : "MethodDeclaration[2333-2616]:MethodDeclaration[2333-2616]"
    }, {
      "left" : "public AbstractCompiler getCompiler()",
      "right" : "public AbstractCompiler getCompiler()",
      "info" : "MethodDeclaration[2620-2684]:MethodDeclaration[2620-2684]"
    }, {
      "left" : "public void process(Node externs, Node root)",
      "right" : "public void process(Node externs, Node root)",
      "info" : "MethodDeclaration[2688-2960]:MethodDeclaration[2688-2960]"
    }, {
      "left" : "private void traverse(Node node)",
      "right" : "private void traverse(Node node)",
      "info" : "MethodDeclaration[2964-3587]:MethodDeclaration[2964-3587]"
    }, {
      "left" : "private boolean shouldRetraverse(Node node)",
      "right" : "private boolean shouldRetraverse(Node node)",
      "info" : "MethodDeclaration[3591-4108]:MethodDeclaration[3591-4108]"
    }, {
      "left" : "private boolean shouldVisit(Node node)",
      "right" : "private boolean shouldVisit(Node node)",
      "info" : "MethodDeclaration[4112-4380]:MethodDeclaration[4112-4380]"
    }, {
      "left" : "private void exitNode(Node node)",
      "right" : "private void exitNode(Node node)",
      "info" : "MethodDeclaration[4384-4504]:MethodDeclaration[4384-4504]"
    }, {
      "left" : "public void visit(Node n)",
      "right" : "public void visit(Node n)",
      "info" : "MethodDeclaration[4508-5096]:MethodDeclaration[4508-5096]"
    }, {
      "left" : "private void beginTraversal()",
      "right" : "private void beginTraversal()",
      "info" : "MethodDeclaration[5100-5377]:MethodDeclaration[5100-5377]"
    }, {
      "left" : "private void endTraversal()",
      "right" : "private void endTraversal()",
      "info" : "MethodDeclaration[5381-5541]:MethodDeclaration[5381-5541]"
    } ],
    "mappings" : [
 {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[1039-1044]:TYPE_DECLARATION_KIND[1039-1044]"
    }, {
      "left" : "PeepholeOptimizationsPass",
      "right" : "PeepholeOptimizationsPass",
      "info" : "SimpleName[1045-1070]:SimpleName[1045-1070]"
    }, {
      "left" : "CompilerPass",
      "right" : "CompilerPass",
      "info" : "SimpleType[1086-1098]:SimpleType[1086-1098]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[1433-1439]:Modifier[1433-1439]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[1440-1447]:Modifier[1440-1447]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[1448-1453]:TYPE_DECLARATION_KIND[1448-1453]"
    }, {
      "left" : "ScopeState",
      "right" : "ScopeState",
      "info" : "SimpleName[1454-1464]:SimpleName[1454-1464]"
    }, {
      "left" : "ScopeState",
      "right" : "ScopeState",
      "info" : "SimpleName[1525-1535]:SimpleName[1525-1535]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1538-1560]:Block[1538-1560]"
    }, {
      "left" : "reset();",
      "right" : "reset();",
      "info" : "ExpressionStatement[1546-1554]:ExpressionStatement[1546-1554]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[1566-1570]:PrimitiveType[1566-1570]"
    }, {
      "left" : "reset",
      "right" : "reset",
      "info" : "SimpleName[1571-1576]:SimpleName[1571-1576]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1579-1643]:Block[1579-1643]"
    }, {
      "left" : "changed = false;",
      "right" : "changed = false;",
      "info" : "ExpressionStatement[1587-1603]:ExpressionStatement[1587-1603]"
    }, {
      "left" : "traverseChildScopes = true;",
      "right" : "traverseChildScopes = true;",
      "info" : "ExpressionStatement[1610-1637]:ExpressionStatement[1610-1637]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[1651-1657]:Modifier[1651-1657]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[1658-1665]:Modifier[1658-1665]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[1666-1671]:TYPE_DECLARATION_KIND[1666-1671]"
    }, {
      "left" : "StateStack",
      "right" : "StateStack",
      "info" : "SimpleName[1672-1682]:SimpleName[1672-1682]"
    }, {
      "left" : "StateStack",
      "right" : "StateStack",
      "info" : "SimpleName[1789-1799]:SimpleName[1789-1799]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1802-1845]:Block[1802-1845]"
    }, {
      "left" : "states.add(new ScopeState());",
      "right" : "states.add(new ScopeState());",
      "info" : "ExpressionStatement[1810-1839]:ExpressionStatement[1810-1839]"
    }, {
      "left" : "ScopeState",
      "right" : "ScopeState",
      "info" : "SimpleType[1851-1861]:SimpleType[1851-1861]"
    }, {
      "left" : "peek",
      "right" : "peek",
      "info" : "SimpleName[1862-1866]:SimpleName[1862-1866]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1869-1915]:Block[1869-1915]"
    }, {
      "left" : "return states.get(currentDepth);",
      "right" : "return states.get(currentDepth);",
      "info" : "ReturnStatement[1877-1909]:ReturnStatement[1877-1909]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[1921-1925]:PrimitiveType[1921-1925]"
    }, {
      "left" : "push",
      "right" : "push",
      "info" : "SimpleName[1926-1930]:SimpleName[1926-1930]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1933-2108]:Block[1933-2108]"
    }, {
      "left" : "currentDepth++;",
      "right" : "currentDepth++;",
      "info" : "ExpressionStatement[1941-1956]:ExpressionStatement[1941-1956]"
    }, {
      "left" : "if (states.size() <= currentDepth)",
      "right" : "if (states.size() <= currentDepth)",
      "info" : "IfStatement[1963-2102]:IfStatement[1963-2102]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1998-2045]:Block[1998-2045]"
    }, {
      "left" : "states.add(new ScopeState());",
      "right" : "states.add(new ScopeState());",
      "info" : "ExpressionStatement[2008-2037]:ExpressionStatement[2008-2037]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2051-2102]:Block[2051-2102]"
    }, {
      "left" : "states.get(currentDepth).reset();",
      "right" : "states.get(currentDepth).reset();",
      "info" : "ExpressionStatement[2061-2094]:ExpressionStatement[2061-2094]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[2114-2118]:PrimitiveType[2114-2118]"
    }, {
      "left" : "pop",
      "right" : "pop",
      "info" : "SimpleName[2119-2122]:SimpleName[2119-2122]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2125-2154]:Block[2125-2154]"
    }, {
      "left" : "currentDepth--;",
      "right" : "currentDepth--;",
      "info" : "ExpressionStatement[2133-2148]:ExpressionStatement[2133-2148]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[2162-2169]:Modifier[2162-2169]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[2170-2175]:TYPE_DECLARATION_KIND[2170-2175]"
    }, {
      "left" : "PeepholeChangeHandler",
      "right" : "PeepholeChangeHandler",
      "info" : "SimpleName[2176-2197]:SimpleName[2176-2197]"
    }, {
      "left" : "CodeChangeHandler",
      "right" : "CodeChangeHandler",
      "info" : "SimpleType[2209-2226]:SimpleType[2209-2226]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[2233-2242]:MarkerAnnotation[2233-2242]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[2247-2253]:Modifier[2247-2253]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[2254-2258]:PrimitiveType[2254-2258]"
    }, {
      "left" : "reportChange",
      "right" : "reportChange",
      "info" : "SimpleName[2259-2271]:SimpleName[2259-2271]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2274-2325]:Block[2274-2325]"
    }, {
      "left" : "traversalState.peek().changed = true;",
      "right" : "traversalState.peek().changed = true;",
      "info" : "ExpressionStatement[2282-2319]:ExpressionStatement[2282-2319]"
    }, {
      "left" : "PeepholeOptimizationsPass",
      "right" : "PeepholeOptimizationsPass",
      "info" : "SimpleName[2427-2452]:SimpleName[2427-2452]"
    }, {
      "left" : "AbstractCompiler compiler",
      "right" : "AbstractCompiler compiler",
      "info" : "SingleVariableDeclaration[2453-2478]:SingleVariableDeclaration[2453-2478]"
    }, {
      "left" : "AbstractPeepholeOptimization... optimizations",
      "right" : "AbstractPeepholeOptimization... optimizations",
      "info" : "SingleVariableDeclaration[2486-2531]:SingleVariableDeclaration[2486-2531]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2533-2616]:Block[2533-2616]"
    }, {
      "left" : "this.compiler = compiler;",
      "right" : "this.compiler = compiler;",
      "info" : "ExpressionStatement[2539-2564]:ExpressionStatement[2539-2564]"
    }, {
      "left" : "this.peepholeOptimizations = optimizations;",
      "right" : "this.peepholeOptimizations = optimizations;",
      "info" : "ExpressionStatement[2569-2612]:ExpressionStatement[2569-2612]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[2620-2626]:Modifier[2620-2626]"
    }, {
      "left" : "AbstractCompiler",
      "right" : "AbstractCompiler",
      "info" : "SimpleType[2627-2643]:SimpleType[2627-2643]"
    }, {
      "left" : "getCompiler",
      "right" : "getCompiler",
      "info" : "SimpleName[2644-2655]:SimpleName[2644-2655]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2658-2684]:Block[2658-2684]"
    }, {
      "left" : "return compiler;",
      "right" : "return compiler;",
      "info" : "ReturnStatement[2664-2680]:ReturnStatement[2664-2680]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[2688-2697]:MarkerAnnotation[2688-2697]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[2700-2706]:Modifier[2700-2706]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[2707-2711]:PrimitiveType[2707-2711]"
    }, {
      "left" : "process",
      "right" : "process",
      "info" : "SimpleName[2712-2719]:SimpleName[2712-2719]"
    }, {
      "left" : "Node externs",
      "right" : "Node externs",
      "info" : "SingleVariableDeclaration[2720-2732]:SingleVariableDeclaration[2720-2732]"
    }, {
      "left" : "Node root",
      "right" : "Node root",
      "info" : "SingleVariableDeclaration[2734-2743]:SingleVariableDeclaration[2734-2743]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2745-2960]:Block[2745-2960]"
    }, {
      "left" : "PeepholeChangeHandler handler = new PeepholeChangeHandler();",
      "right" : "PeepholeChangeHandler handler = new PeepholeChangeHandler();",
      "info" : "VariableDeclarationStatement[2751-2811]:VariableDeclarationStatement[2751-2811]"
    }, {
      "left" : "compiler.addChangeHandler(handler);",
      "right" : "compiler.addChangeHandler(handler);",
      "info" : "ExpressionStatement[2816-2851]:ExpressionStatement[2816-2851]"
    }, {
      "left" : "beginTraversal();",
      "right" : "beginTraversal();",
      "info" : "ExpressionStatement[2856-2873]:ExpressionStatement[2856-2873]"
    }, {
      "left" : "traverse(root);",
      "right" : "traverse(root);",
      "info" : "ExpressionStatement[2878-2893]:ExpressionStatement[2878-2893]"
    }, {
      "left" : "endTraversal();",
      "right" : "endTraversal();",
      "info" : "ExpressionStatement[2898-2913]:ExpressionStatement[2898-2913]"
    }, {
      "left" : "compiler.removeChangeHandler(handler);",
      "right" : "compiler.removeChangeHandler(handler);",
      "info" : "ExpressionStatement[2918-2956]:ExpressionStatement[2918-2956]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[2964-2971]:Modifier[2964-2971]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[2972-2976]:PrimitiveType[2972-2976]"
    }, {
      "left" : "traverse",
      "right" : "traverse",
      "info" : "SimpleName[2977-2985]:SimpleName[2977-2985]"
    }, {
      "left" : "Node node",
      "right" : "Node node",
      "info" : "SingleVariableDeclaration[2986-2995]:SingleVariableDeclaration[2986-2995]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2997-3587]:Block[2997-3587]"
    }, {
      "left" : "if (!shouldVisit(node))",
      "right" : "if (!shouldVisit(node))",
      "info" : "IfStatement[3198-3243]:IfStatement[3198-3243]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3222-3243]:Block[3222-3243]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[3230-3237]:ReturnStatement[3230-3237]"
    }, {
      "left" : "int visits = 0;",
      "right" : "int visits = 0;",
      "info" : "VariableDeclarationStatement[3249-3264]:VariableDeclarationStatement[3249-3264]"
    }, {
      "left" : "do{...}",
      "right" : "do{...}",
      "info" : "DoStatement[3269-3562]:DoStatement[3269-3562]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3272-3530]:Block[3272-3530]"
    }, {
      "left" : "Node c = node.getFirstChild();",
      "right" : "Node c = node.getFirstChild();",
      "info" : "VariableDeclarationStatement[3280-3310]:VariableDeclarationStatement[3280-3310]"
    }, {
      "left" : "while(c != null)",
      "right" : "while(c != null)",
      "info" : "WhileStatement[3317-3415]:WhileStatement[3317-3415]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3334-3415]:Block[3334-3415]"
    }, {
      "left" : "traverse(c);",
      "right" : "traverse(c);",
      "info" : "ExpressionStatement[3344-3356]:ExpressionStatement[3377-3389]"
    }, {
      "left" : "Node next = c.getNext();",
      "right" : "Node next = c.getNext();",
      "info" : "VariableDeclarationStatement[3365-3389]:VariableDeclarationStatement[3344-3368]"
    }, {
      "left" : "c = next;",
      "right" : "c = next;",
      "info" : "ExpressionStatement[3398-3407]:ExpressionStatement[3398-3407]"
    }, {
      "left" : "visit(node);",
      "right" : "visit(node);",
      "info" : "ExpressionStatement[3423-3435]:ExpressionStatement[3423-3435]"
    }, {
      "left" : "visits++;",
      "right" : "visits++;",
      "info" : "ExpressionStatement[3442-3451]:ExpressionStatement[3442-3451]"
    }, {
      "left" : "Preconditions.checkState(visits < 10000, \"too many interations\");",
      "right" : "Preconditions.checkState(visits < 10000, \"too many interations\");",
      "info" : "ExpressionStatement[3459-3524]:ExpressionStatement[3459-3524]"
    }, {
      "left" : "exitNode(node);",
      "right" : "exitNode(node);",
      "info" : "ExpressionStatement[3568-3583]:ExpressionStatement[3568-3583]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[3591-3598]:Modifier[3591-3598]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[3599-3606]:PrimitiveType[3599-3606]"
    }, {
      "left" : "shouldRetraverse",
      "right" : "shouldRetraverse",
      "info" : "SimpleName[3607-3623]:SimpleName[3607-3623]"
    }, {
      "left" : "Node node",
      "right" : "Node node",
      "info" : "SingleVariableDeclaration[3624-3633]:SingleVariableDeclaration[3624-3633]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3635-4108]:Block[3635-4108]"
    }, {
      "left" : "if (node.getParent() != null && node.isFunction() || node.isScript())",
      "right" : "if (node.getParent() != null && node.isFunction() || node.isScript())",
      "info" : "IfStatement[3641-4086]:IfStatement[3641-4086]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3711-4086]:Block[3711-4086]"
    }, {
      "left" : "ScopeState state = traversalState.peek();",
      "right" : "ScopeState state = traversalState.peek();",
      "info" : "VariableDeclarationStatement[3719-3760]:VariableDeclarationStatement[3719-3760]"
    }, {
      "left" : "if (state.changed)",
      "right" : "if (state.changed)",
      "info" : "IfStatement[3767-4080]:IfStatement[3767-4080]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3786-4080]:Block[3786-4080]"
    }, {
      "left" : "state.changed = false;",
      "right" : "state.changed = false;",
      "info" : "ExpressionStatement[3986-4008]:ExpressionStatement[3986-4008]"
    }, {
      "left" : "state.traverseChildScopes = false;",
      "right" : "state.traverseChildScopes = false;",
      "info" : "ExpressionStatement[4017-4051]:ExpressionStatement[4017-4051]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[4060-4072]:ReturnStatement[4060-4072]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[4091-4104]:ReturnStatement[4091-4104]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[4112-4119]:Modifier[4112-4119]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[4120-4127]:PrimitiveType[4120-4127]"
    }, {
      "left" : "shouldVisit",
      "right" : "shouldVisit",
      "info" : "SimpleName[4128-4139]:SimpleName[4128-4139]"
    }, {
      "left" : "Node node",
      "right" : "Node node",
      "info" : "SingleVariableDeclaration[4140-4149]:SingleVariableDeclaration[4140-4149]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4151-4380]:Block[4151-4380]"
    }, {
      "left" : "if (node.isFunction() || node.isScript())",
      "right" : "if (node.isFunction() || node.isScript())",
      "info" : "IfStatement[4157-4359]:IfStatement[4157-4359]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4199-4359]:Block[4199-4359]"
    }, {
      "left" : "ScopeState previous = traversalState.peek();",
      "right" : "ScopeState previous = traversalState.peek();",
      "info" : "VariableDeclarationStatement[4207-4251]:VariableDeclarationStatement[4207-4251]"
    }, {
      "left" : "if (!previous.traverseChildScopes)",
      "right" : "if (!previous.traverseChildScopes)",
      "info" : "IfStatement[4258-4324]:IfStatement[4258-4324]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4293-4324]:Block[4293-4324]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[4303-4316]:ReturnStatement[4303-4316]"
    }, {
      "left" : "traversalState.push();",
      "right" : "traversalState.push();",
      "info" : "ExpressionStatement[4331-4353]:ExpressionStatement[4331-4353]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[4364-4376]:ReturnStatement[4364-4376]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[4384-4391]:Modifier[4384-4391]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[4392-4396]:PrimitiveType[4392-4396]"
    }, {
      "left" : "exitNode",
      "right" : "exitNode",
      "info" : "SimpleName[4397-4405]:SimpleName[4397-4405]"
    }, {
      "left" : "Node node",
      "right" : "Node node",
      "info" : "SingleVariableDeclaration[4406-4415]:SingleVariableDeclaration[4406-4415]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4417-4504]:Block[4417-4504]"
    }, {
      "left" : "if (node.isFunction() || node.isScript())",
      "right" : "if (node.isFunction() || node.isScript())",
      "info" : "IfStatement[4423-4500]:IfStatement[4423-4500]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4465-4500]:Block[4465-4500]"
    }, {
      "left" : "traversalState.pop();",
      "right" : "traversalState.pop();",
      "info" : "ExpressionStatement[4473-4494]:ExpressionStatement[4473-4494]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[4508-4514]:Modifier[4508-4514]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[4515-4519]:PrimitiveType[4515-4519]"
    }, {
      "left" : "visit",
      "right" : "visit",
      "info" : "SimpleName[4520-4525]:SimpleName[4520-4525]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[4526-4532]:SingleVariableDeclaration[4526-4532]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4534-5096]:Block[4534-5096]"
    }, {
      "left" : "Node currentVersionOfNode = n;",
      "right" : "Node currentVersionOfNode = n;",
      "info" : "VariableDeclarationStatement[4540-4570]:VariableDeclarationStatement[4540-4570]"
    }, {
      "left" : "boolean somethingChanged = false;",
      "right" : "boolean somethingChanged = false;",
      "info" : "VariableDeclarationStatement[4575-4608]:VariableDeclarationStatement[4575-4608]"
    }, {
      "left" : "do{...}",
      "right" : "do{...}",
      "info" : "DoStatement[4614-5092]:DoStatement[4614-5092]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4617-5067]:Block[4617-5067]"
    }, {
      "left" : "somethingChanged = false;",
      "right" : "somethingChanged = false;",
      "info" : "ExpressionStatement[4625-4650]:ExpressionStatement[4625-4650]"
    }, {
      "left" : "for (AbstractPeepholeOptimization optimization : peepholeOptimizations)",
      "right" : "for (AbstractPeepholeOptimization optimization : peepholeOptimizations)",
      "info" : "EnhancedForStatement[4657-5061]:EnhancedForStatement[4657-5061]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4729-5061]:Block[4729-5061]"
    }, {
      "left" : "Node newVersionOfNode =\n            optimization.optimizeSubtree(currentVersionOfNode);",
      "right" : "Node newVersionOfNode =\n            optimization.optimizeSubtree(currentVersionOfNode);",
      "info" : "VariableDeclarationStatement[4739-4826]:VariableDeclarationStatement[4739-4826]"
    }, {
      "left" : "if (newVersionOfNode != currentVersionOfNode)",
      "right" : "if (newVersionOfNode != currentVersionOfNode)",
      "info" : "IfStatement[4836-4980]:IfStatement[4836-4980]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4882-4980]:Block[4882-4980]"
    }, {
      "left" : "somethingChanged = true;",
      "right" : "somethingChanged = true;",
      "info" : "ExpressionStatement[4894-4918]:ExpressionStatement[4894-4918]"
    }, {
      "left" : "currentVersionOfNode = newVersionOfNode;",
      "right" : "currentVersionOfNode = newVersionOfNode;",
      "info" : "ExpressionStatement[4930-4970]:ExpressionStatement[4930-4970]"
    }, {
      "left" : "if (currentVersionOfNode == null)",
      "right" : "if (currentVersionOfNode == null)",
      "info" : "IfStatement[4990-5053]:IfStatement[4990-5053]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5024-5053]:Block[5024-5053]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[5036-5043]:ReturnStatement[5036-5043]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[5213-5220]:Modifier[5213-5220]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[5221-5225]:PrimitiveType[5221-5225]"
    }, {
      "left" : "beginTraversal",
      "right" : "beginTraversal",
      "info" : "SimpleName[5226-5240]:SimpleName[5226-5240]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5243-5377]:Block[5243-5377]"
    }, {
      "left" : "for (AbstractPeepholeOptimization optimization : peepholeOptimizations)",
      "right" : "for (AbstractPeepholeOptimization optimization : peepholeOptimizations)",
      "info" : "EnhancedForStatement[5249-5373]:EnhancedForStatement[5249-5373]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5321-5373]:Block[5321-5373]"
    }, {
      "left" : "optimization.beginTraversal(compiler);",
      "right" : "optimization.beginTraversal(compiler);",
      "info" : "ExpressionStatement[5329-5367]:ExpressionStatement[5329-5367]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[5381-5388]:Modifier[5381-5388]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[5389-5393]:PrimitiveType[5389-5393]"
    }, {
      "left" : "endTraversal",
      "right" : "endTraversal",
      "info" : "SimpleName[5394-5406]:SimpleName[5394-5406]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5409-5541]:Block[5409-5541]"
    }, {
      "left" : "for (AbstractPeepholeOptimization optimization : peepholeOptimizations)",
      "right" : "for (AbstractPeepholeOptimization optimization : peepholeOptimizations)",
      "info" : "EnhancedForStatement[5415-5537]:EnhancedForStatement[5415-5537]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5487-5537]:Block[5487-5537]"
    }, {
      "left" : "optimization.endTraversal(compiler);",
      "right" : "optimization.endTraversal(compiler);",
      "info" : "ExpressionStatement[5495-5531]:ExpressionStatement[5495-5531]"
    } ]
  },
  "interFileMappings" : { }
}