{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "private static final Pattern charsetPattern = Pattern.compile(\"(?i)\\\\bcharset=\\\\s*(?:[\\\"'])?([^\\\\s,;\\\"']*)\");",
      "right" : "private static final Pattern charsetPattern = Pattern.compile(\"(?i)\\\\bcharset=\\\\s*(?:[\\\"'])?([^\\\\s,;\\\"']*)\");",
      "info" : "FieldDeclaration[832-941]:FieldDeclaration[871-980]"
    }, {
      "left" : "static final String defaultCharset = \"UTF-8\";",
      "right" : "static final String defaultCharset = \"UTF-8\";",
      "info" : "FieldDeclaration[946-991]:FieldDeclaration[985-1030]"
    }, {
      "left" : "private static final int firstReadBufferSize = 1024 * 5;",
      "right" : "private static final int firstReadBufferSize = 1024 * 5;",
      "info" : "FieldDeclaration[1043-1099]:FieldDeclaration[1082-1138]"
    }, {
      "left" : "static final int bufferSize = 1024 * 32;",
      "right" : "static final int bufferSize = 1024 * 32;",
      "info" : "FieldDeclaration[1104-1144]:FieldDeclaration[1143-1183]"
    }, {
      "left" : "private static final char[] mimeBoundaryChars =\n            \"-_1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\".toCharArray();",
      "right" : "private static final char[] mimeBoundaryChars =\n            \"-_1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\".toCharArray();",
      "info" : "FieldDeclaration[1149-1290]:FieldDeclaration[1188-1329]"
    }, {
      "left" : "static final int boundaryLength = 32;",
      "right" : "static final int boundaryLength = 32;",
      "info" : "FieldDeclaration[1295-1332]:FieldDeclaration[1334-1371]"
    }, {
      "left" : "private DataUtil()",
      "right" : "private DataUtil()",
      "info" : "MethodDeclaration[1338-1359]:MethodDeclaration[1377-1398]"
    }, {
      "left" : "public static Document load(File in, String charsetName, String baseUri) throws IOException",
      "right" : "public static Document load(File in, String charsetName, String baseUri) throws IOException",
      "info" : "MethodDeclaration[1365-1836]:MethodDeclaration[1404-1875]"
    }, {
      "left" : "public static Document load(InputStream in, String charsetName, String baseUri) throws IOException",
      "right" : "public static Document load(InputStream in, String charsetName, String baseUri) throws IOException",
      "info" : "MethodDeclaration[1842-2347]:MethodDeclaration[1881-2386]"
    }, {
      "left" : "public static Document load(InputStream in, String charsetName, String baseUri, Parser parser) throws IOException",
      "right" : "public static Document load(InputStream in, String charsetName, String baseUri, Parser parser) throws IOException",
      "info" : "MethodDeclaration[2353-2960]:MethodDeclaration[2392-2999]"
    }, {
      "left" : "static void crossStreams(final InputStream in, final OutputStream out) throws IOException",
      "right" : "static void crossStreams(final InputStream in, final OutputStream out) throws IOException",
      "info" : "MethodDeclaration[2966-3444]:MethodDeclaration[3005-3483]"
    }, {
      "left" : "public static ByteBuffer readToByteBuffer(InputStream inStream, int maxSize) throws IOException",
      "right" : "public static ByteBuffer readToByteBuffer(InputStream inStream, int maxSize) throws IOException",
      "info" : "MethodDeclaration[6895-7735]:MethodDeclaration[7052-7892]"
    }, {
      "left" : "static ByteBuffer readToByteBuffer(InputStream inStream) throws IOException",
      "right" : "static ByteBuffer readToByteBuffer(InputStream inStream) throws IOException",
      "info" : "MethodDeclaration[7741-7870]:MethodDeclaration[7898-8027]"
    }, {
      "left" : "static ByteBuffer readFileToByteBuffer(File file) throws IOException",
      "right" : "static ByteBuffer readFileToByteBuffer(File file) throws IOException",
      "info" : "MethodDeclaration[7876-8354]:MethodDeclaration[8033-8511]"
    }, {
      "left" : "static ByteBuffer emptyByteBuffer()",
      "right" : "static ByteBuffer emptyByteBuffer()",
      "info" : "MethodDeclaration[8360-8442]:MethodDeclaration[8517-8599]"
    }, {
      "left" : "static String getCharsetFromContentType(String contentType)",
      "right" : "static String getCharsetFromContentType(String contentType)",
      "info" : "MethodDeclaration[8448-9117]:MethodDeclaration[8605-9274]"
    }, {
      "left" : "private static String validateCharset(String cs)",
      "right" : "private static String validateCharset(String cs)",
      "info" : "MethodDeclaration[9123-9611]:MethodDeclaration[9280-9768]"
    }, {
      "left" : "static String mimeBoundary()",
      "right" : "static String mimeBoundary()",
      "info" : "MethodDeclaration[9617-10026]:MethodDeclaration[9774-10183]"
    }, {
      "left" : "private static BomCharset detectCharsetFromBom(final ByteBuffer byteData)",
      "right" : "private static BomCharset detectCharsetFromBom(final ByteBuffer byteData)",
      "info" : "MethodDeclaration[10032-11196]:MethodDeclaration[10189-11353]"
    }, {
      "left" : "BomCharset",
      "right" : "BomCharset",
      "info" : "TypeDeclaration[11202-11450]:TypeDeclaration[11359-11607]"
    }, {
      "left" : "private final String charset;",
      "right" : "private final String charset;",
      "info" : "FieldDeclaration[11244-11273]:FieldDeclaration[11401-11430]"
    }, {
      "left" : "private final int offset;",
      "right" : "private final int offset;",
      "info" : "FieldDeclaration[11282-11307]:FieldDeclaration[11439-11464]"
    }, {
      "left" : "public BomCharset(String charset, int offset)",
      "right" : "public BomCharset(String charset, int offset)",
      "info" : "MethodDeclaration[11317-11444]:MethodDeclaration[11474-11601]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1357-1359]:Block[1396-1398]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1728-1836]:Block[1767-1875]"
    }, {
      "left" : "return parseInputStream(new FileInputStream(in), charsetName, baseUri, Parser.htmlParser());",
      "right" : "return parseInputStream(new FileInputStream(in), charsetName, baseUri, Parser.htmlParser());",
      "info" : "ReturnStatement[1738-1830]:ReturnStatement[1777-1869]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2260-2347]:Block[2299-2386]"
    }, {
      "left" : "return parseInputStream(in, charsetName, baseUri, Parser.htmlParser());",
      "right" : "return parseInputStream(in, charsetName, baseUri, Parser.htmlParser());",
      "info" : "ReturnStatement[2270-2341]:ReturnStatement[2309-2380]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2886-2960]:Block[2925-2999]"
    }, {
      "left" : "return parseInputStream(in, charsetName, baseUri, parser);",
      "right" : "return parseInputStream(in, charsetName, baseUri, parser);",
      "info" : "ReturnStatement[2896-2954]:ReturnStatement[2935-2993]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3271-3444]:Block[3310-3483]"
    }, {
      "left" : "final byte[] buffer = new byte[bufferSize];",
      "right" : "final byte[] buffer = new byte[bufferSize];",
      "info" : "VariableDeclarationStatement[3281-3324]:VariableDeclarationStatement[3320-3363]"
    }, {
      "left" : "int len;",
      "right" : "int len;",
      "info" : "VariableDeclarationStatement[3333-3341]:VariableDeclarationStatement[3372-3380]"
    }, {
      "left" : "while ((len = in.read(buffer)) != -1)",
      "right" : "while ((len = in.read(buffer)) != -1)",
      "info" : "WhileStatement[3350-3438]:WhileStatement[3389-3477]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3388-3438]:Block[3427-3477]"
    }, {
      "left" : "out.write(buffer, 0, len);",
      "right" : "out.write(buffer, 0, len);",
      "info" : "ExpressionStatement[3402-3428]:ExpressionStatement[3441-3467]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7489-7735]:Block[7646-7892]"
    }, {
      "left" : "Validate.isTrue(maxSize >= 0, \"maxSize must be 0 (unlimited) or larger\");",
      "right" : "Validate.isTrue(maxSize >= 0, \"maxSize must be 0 (unlimited) or larger\");",
      "info" : "ExpressionStatement[7499-7572]:ExpressionStatement[7656-7729]"
    }, {
      "left" : "final ConstrainableInputStream input = ConstrainableInputStream.wrap(inStream, bufferSize, maxSize);",
      "right" : "final ConstrainableInputStream input = ConstrainableInputStream.wrap(inStream, bufferSize, maxSize);",
      "info" : "VariableDeclarationStatement[7581-7681]:VariableDeclarationStatement[7738-7838]"
    }, {
      "left" : "return input.readToByteBuffer(maxSize);",
      "right" : "return input.readToByteBuffer(maxSize);",
      "info" : "ReturnStatement[7690-7729]:ReturnStatement[7847-7886]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7817-7870]:Block[7974-8027]"
    }, {
      "left" : "return readToByteBuffer(inStream, 0);",
      "right" : "return readToByteBuffer(inStream, 0);",
      "info" : "ReturnStatement[7827-7864]:ReturnStatement[7984-8021]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7945-8354]:Block[8102-8511]"
    }, {
      "left" : "RandomAccessFile randomAccessFile = null;",
      "right" : "RandomAccessFile randomAccessFile = null;",
      "info" : "VariableDeclarationStatement[7955-7996]:VariableDeclarationStatement[8112-8153]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[8005-8348]:TryStatement[8162-8505]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8009-8244]:Block[8166-8401]"
    }, {
      "left" : "randomAccessFile = new RandomAccessFile(file, \"r\");",
      "right" : "randomAccessFile = new RandomAccessFile(file, \"r\");",
      "info" : "ExpressionStatement[8023-8074]:ExpressionStatement[8180-8231]"
    }, {
      "left" : "byte[] bytes = new byte[(int) randomAccessFile.length()];",
      "right" : "byte[] bytes = new byte[(int) randomAccessFile.length()];",
      "info" : "VariableDeclarationStatement[8087-8144]:VariableDeclarationStatement[8244-8301]"
    }, {
      "left" : "randomAccessFile.readFully(bytes);",
      "right" : "randomAccessFile.readFully(bytes);",
      "info" : "ExpressionStatement[8157-8191]:ExpressionStatement[8314-8348]"
    }, {
      "left" : "return ByteBuffer.wrap(bytes);",
      "right" : "return ByteBuffer.wrap(bytes);",
      "info" : "ReturnStatement[8204-8234]:ReturnStatement[8361-8391]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8253-8348]:Block[8410-8505]"
    }, {
      "left" : "if (randomAccessFile != null)",
      "right" : "if (randomAccessFile != null)",
      "info" : "IfStatement[8267-8338]:IfStatement[8424-8495]"
    }, {
      "left" : "randomAccessFile.close();",
      "right" : "randomAccessFile.close();",
      "info" : "ExpressionStatement[8313-8338]:ExpressionStatement[8470-8495]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8396-8442]:Block[8553-8599]"
    }, {
      "left" : "return ByteBuffer.allocate(0);",
      "right" : "return ByteBuffer.allocate(0);",
      "info" : "ReturnStatement[8406-8436]:ReturnStatement[8563-8593]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8804-9117]:Block[8961-9274]"
    }, {
      "left" : "if (contentType == null)",
      "right" : "if (contentType == null)",
      "info" : "IfStatement[8814-8851]:IfStatement[8971-9008]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[8839-8851]:ReturnStatement[8996-9008]"
    }, {
      "left" : "Matcher m = charsetPattern.matcher(contentType);",
      "right" : "Matcher m = charsetPattern.matcher(contentType);",
      "info" : "VariableDeclarationStatement[8860-8908]:VariableDeclarationStatement[9017-9065]"
    }, {
      "left" : "if (m.find())",
      "right" : "if (m.find())",
      "info" : "IfStatement[8917-9090]:IfStatement[9074-9247]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8931-9090]:Block[9088-9247]"
    }, {
      "left" : "String charset = m.group(1).trim();",
      "right" : "String charset = m.group(1).trim();",
      "info" : "VariableDeclarationStatement[8945-8980]:VariableDeclarationStatement[9102-9137]"
    }, {
      "left" : "charset = charset.replace(\"charset=\", \"\");",
      "right" : "charset = charset.replace(\"charset=\", \"\");",
      "info" : "ExpressionStatement[8993-9035]:ExpressionStatement[9150-9192]"
    }, {
      "left" : "return validateCharset(charset);",
      "right" : "return validateCharset(charset);",
      "info" : "ReturnStatement[9048-9080]:ReturnStatement[9205-9237]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[9099-9111]:ReturnStatement[9256-9268]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9172-9611]:Block[9329-9768]"
    }, {
      "left" : "if (cs == null || cs.length() == 0)",
      "right" : "if (cs == null || cs.length() == 0)",
      "info" : "IfStatement[9182-9230]:IfStatement[9339-9387]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[9218-9230]:ReturnStatement[9375-9387]"
    }, {
      "left" : "cs = cs.trim().replaceAll(\"[\\\"']\", \"\");",
      "right" : "cs = cs.trim().replaceAll(\"[\\\"']\", \"\");",
      "info" : "ExpressionStatement[9239-9278]:ExpressionStatement[9396-9435]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[9287-9584]:TryStatement[9444-9741]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9291-9455]:Block[9448-9612]"
    }, {
      "left" : "if (Charset.isSupported(cs))",
      "right" : "if (Charset.isSupported(cs))",
      "info" : "IfStatement[9305-9344]:IfStatement[9462-9501]"
    }, {
      "left" : "return cs;",
      "right" : "return cs;",
      "info" : "ReturnStatement[9334-9344]:ReturnStatement[9491-9501]"
    }, {
      "left" : "cs = cs.toUpperCase(Locale.ENGLISH);",
      "right" : "cs = cs.toUpperCase(Locale.ENGLISH);",
      "info" : "ExpressionStatement[9357-9393]:ExpressionStatement[9514-9550]"
    }, {
      "left" : "if (Charset.isSupported(cs))",
      "right" : "if (Charset.isSupported(cs))",
      "info" : "IfStatement[9406-9445]:IfStatement[9563-9602]"
    }, {
      "left" : "return cs;",
      "right" : "return cs;",
      "info" : "ReturnStatement[9435-9445]:ReturnStatement[9592-9602]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9494-9584]:Block[9651-9741]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[9593-9605]:ReturnStatement[9750-9762]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9730-10026]:Block[9887-10183]"
    }, {
      "left" : "final StringBuilder mime = new StringBuilder(boundaryLength);",
      "right" : "final StringBuilder mime = new StringBuilder(boundaryLength);",
      "info" : "VariableDeclarationStatement[9740-9801]:VariableDeclarationStatement[9897-9958]"
    }, {
      "left" : "final Random rand = new Random();",
      "right" : "final Random rand = new Random();",
      "info" : "VariableDeclarationStatement[9810-9843]:VariableDeclarationStatement[9967-10000]"
    }, {
      "left" : "for (int i = 0; i < boundaryLength; i++)",
      "right" : "for (int i = 0; i < boundaryLength; i++)",
      "info" : "ForStatement[9852-9988]:ForStatement[10009-10145]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9893-9988]:Block[10050-10145]"
    }, {
      "left" : "mime.append(mimeBoundaryChars[rand.nextInt(mimeBoundaryChars.length)]);",
      "right" : "mime.append(mimeBoundaryChars[rand.nextInt(mimeBoundaryChars.length)]);",
      "info" : "ExpressionStatement[9907-9978]:ExpressionStatement[10064-10135]"
    }, {
      "left" : "return mime.toString();",
      "right" : "return mime.toString();",
      "info" : "ReturnStatement[9997-10020]:ReturnStatement[10154-10177]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10106-11196]:Block[10263-11353]"
    }, {
      "left" : "final Buffer buffer = byteData;",
      "right" : "final Buffer buffer = byteData;",
      "info" : "VariableDeclarationStatement[10116-10147]:VariableDeclarationStatement[10273-10304]"
    }, {
      "left" : "buffer.mark();",
      "right" : "buffer.mark();",
      "info" : "ExpressionStatement[10243-10257]:ExpressionStatement[10400-10414]"
    }, {
      "left" : "byte[] bom = new byte[4];",
      "right" : "byte[] bom = new byte[4];",
      "info" : "VariableDeclarationStatement[10266-10291]:VariableDeclarationStatement[10423-10448]"
    }, {
      "left" : "if (byteData.remaining() >= bom.length)",
      "right" : "if (byteData.remaining() >= bom.length)",
      "info" : "IfStatement[10300-10411]:IfStatement[10457-10568]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10340-10411]:Block[10497-10568]"
    }, {
      "left" : "byteData.get(bom);",
      "right" : "byteData.get(bom);",
      "info" : "ExpressionStatement[10354-10372]:ExpressionStatement[10511-10529]"
    }, {
      "left" : "buffer.rewind();",
      "right" : "buffer.rewind();",
      "info" : "ExpressionStatement[10385-10401]:ExpressionStatement[10542-10558]"
    }, {
      "left" : "if (bom[0] == 0x00 && bom[1] == 0x00 && bom[2] == (byte) 0xFE && bom[3] == (byte) 0xFF || // BE\n            bom[0] == (byte) 0xFF && bom[1] == (byte) 0xFE && bom[2] == 0x00 && bom[3] == 0x00)",
      "right" : "if (bom[0] == 0x00 && bom[1] == 0x00 && bom[2] == (byte) 0xFE && bom[3] == (byte) 0xFF || // BE\n            bom[0] == (byte) 0xFF && bom[1] == (byte) 0xFE && bom[2] == 0x00 && bom[3] == 0x00)",
      "info" : "IfStatement[10420-11169]:IfStatement[10577-11326]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10612-10711]:Block[10769-10868]"
    }, {
      "left" : "return new BomCharset(\"UTF-32\", 0);",
      "right" : "return new BomCharset(\"UTF-32\", 0);",
      "info" : "ReturnStatement[10632-10667]:ReturnStatement[10789-10824]"
    }, {
      "left" : "if (bom[0] == (byte) 0xFE && bom[1] == (byte) 0xFF || // BE\n            bom[0] == (byte) 0xFF && bom[1] == (byte) 0xFE)",
      "right" : "if (bom[0] == (byte) 0xFE && bom[1] == (byte) 0xFF || // BE\n            bom[0] == (byte) 0xFF && bom[1] == (byte) 0xFE)",
      "info" : "IfStatement[10717-11169]:IfStatement[10874-11326]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10837-10912]:Block[10994-11069]"
    }, {
      "left" : "return new BomCharset(\"UTF-16\", 0);",
      "right" : "return new BomCharset(\"UTF-16\", 0);",
      "info" : "ReturnStatement[10851-10886]:ReturnStatement[11008-11043]"
    }, {
      "left" : "if (bom[0] == (byte) 0xEF && bom[1] == (byte) 0xBB && bom[2] == (byte) 0xBF)",
      "right" : "if (bom[0] == (byte) 0xEF && bom[1] == (byte) 0xBB && bom[2] == (byte) 0xBF)",
      "info" : "IfStatement[10918-11169]:IfStatement[11075-11326]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10995-11169]:Block[11152-11326]"
    }, {
      "left" : "return new BomCharset(\"UTF-8\", 3);",
      "right" : "return new BomCharset(\"UTF-8\", 3);",
      "info" : "ReturnStatement[11009-11043]:ReturnStatement[11166-11200]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[11178-11190]:ReturnStatement[11335-11347]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11363-11444]:Block[11520-11601]"
    }, {
      "left" : "this.charset = charset;",
      "right" : "this.charset = charset;",
      "info" : "ExpressionStatement[11377-11400]:ExpressionStatement[11534-11557]"
    }, {
      "left" : "this.offset = offset;",
      "right" : "this.offset = offset;",
      "info" : "ExpressionStatement[11413-11434]:ExpressionStatement[11570-11591]"
    } ]
  },
  "interFileMappings" : { }
}