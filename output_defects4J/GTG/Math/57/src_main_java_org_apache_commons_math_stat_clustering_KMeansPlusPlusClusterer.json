{
  "matchedElements" : [
 {
    "left" : "class : KMeansPlusPlusClusterer",
    "right" : "class : KMeansPlusPlusClusterer",
    "info" : "TypeDeclaration[1153-12565]:TypeDeclaration[1153-12568]"
  }, {
    "left" : "random",
    "right" : "random",
    "info" : "FieldDeclaration[1951-2037]:FieldDeclaration[1951-2037]"
  }, {
    "left" : "emptyStrategy",
    "right" : "emptyStrategy",
    "info" : "FieldDeclaration[2043-2141]:FieldDeclaration[2043-2141]"
  }, {
    "left" : "public KMeansPlusPlusClusterer(random )",
    "right" : "public KMeansPlusPlusClusterer(random )",
    "info" : "MethodDeclaration[2147-2562]:MethodDeclaration[2147-2562]"
  }, {
    "left" : "public KMeansPlusPlusClusterer(random , emptyStrategy )",
    "right" : "public KMeansPlusPlusClusterer(random , emptyStrategy )",
    "info" : "MethodDeclaration[2568-3000]:MethodDeclaration[2568-3000]"
  }, {
    "left" : "public cluster(points , k int, maxIterations int) : ",
    "right" : "public cluster(points , k int, maxIterations int) : ",
    "info" : "MethodDeclaration[3006-5436]:MethodDeclaration[3006-5436]"
  }, {
    "left" : "private assignPointsToClusters(clusters , points ...) : void",
    "right" : "private assignPointsToClusters(clusters , points ...) : void",
    "info" : "MethodDeclaration[5442-6003]:MethodDeclaration[5442-6003]"
  }, {
    "left" : "private chooseInitialCenters(points , k int, random ) : ",
    "right" : "private chooseInitialCenters(points , k int, random ) : ",
    "info" : "MethodDeclaration[6009-7886]:MethodDeclaration[6009-7889]"
  }, {
    "left" : "private getPointFromLargestVarianceCluster(clusters ...) : ",
    "right" : "private getPointFromLargestVarianceCluster(clusters ...) : ",
    "info" : "MethodDeclaration[7892-9393]:MethodDeclaration[7895-9396]"
  }, {
    "left" : "private getPointFromLargestNumberCluster(clusters ...) : ",
    "right" : "private getPointFromLargestNumberCluster(clusters ...) : ",
    "info" : "MethodDeclaration[9399-10526]:MethodDeclaration[9402-10529]"
  }, {
    "left" : "private getFarthestPoint(clusters ...) : ",
    "right" : "private getFarthestPoint(clusters ...) : ",
    "info" : "MethodDeclaration[10532-11730]:MethodDeclaration[10535-11733]"
  }, {
    "left" : "private getNearestCluster(clusters , point ) : ",
    "right" : "private getNearestCluster(clusters , point ) : ",
    "info" : "MethodDeclaration[11736-12562]:MethodDeclaration[11739-12565]"
  } ],
  "mappings" : [
 {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[2442-2448]:Modifier[2442-2448]"
  }, {
    "left" : "KMeansPlusPlusClusterer",
    "right" : "KMeansPlusPlusClusterer",
    "info" : "SimpleName[2449-2472]:SimpleName[2449-2472]"
  }, {
    "left" : "final Random random",
    "right" : "final Random random",
    "info" : "SingleVariableDeclaration[2473-2492]:SingleVariableDeclaration[2473-2492]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[2494-2562]:Block[2494-2562]"
  }, {
    "left" : "this(random, EmptyClusterStrategy.LARGEST_VARIANCE);",
    "right" : "this(random, EmptyClusterStrategy.LARGEST_VARIANCE);",
    "info" : "ConstructorInvocation[2504-2556]:ConstructorInvocation[2504-2556]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[2818-2824]:Modifier[2818-2824]"
  }, {
    "left" : "KMeansPlusPlusClusterer",
    "right" : "KMeansPlusPlusClusterer",
    "info" : "SimpleName[2825-2848]:SimpleName[2825-2848]"
  }, {
    "left" : "final Random random",
    "right" : "final Random random",
    "info" : "SingleVariableDeclaration[2849-2868]:SingleVariableDeclaration[2849-2868]"
  }, {
    "left" : "final EmptyClusterStrategy emptyStrategy",
    "right" : "final EmptyClusterStrategy emptyStrategy",
    "info" : "SingleVariableDeclaration[2870-2910]:SingleVariableDeclaration[2870-2910]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[2912-3000]:Block[2912-3000]"
  }, {
    "left" : "this.random        = random;",
    "right" : "this.random        = random;",
    "info" : "ExpressionStatement[2922-2950]:ExpressionStatement[2922-2950]"
  }, {
    "left" : "this.emptyStrategy = emptyStrategy;",
    "right" : "this.emptyStrategy = emptyStrategy;",
    "info" : "ExpressionStatement[2959-2994]:ExpressionStatement[2959-2994]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[3374-3380]:Modifier[3374-3380]"
  }, {
    "left" : "List<Cluster<T>>",
    "right" : "List<Cluster<T>>",
    "info" : "ParameterizedType[3381-3397]:ParameterizedType[3381-3397]"
  }, {
    "left" : "cluster",
    "right" : "cluster",
    "info" : "SimpleName[3398-3405]:SimpleName[3398-3405]"
  }, {
    "left" : "final Collection<T> points",
    "right" : "final Collection<T> points",
    "info" : "SingleVariableDeclaration[3406-3432]:SingleVariableDeclaration[3406-3432]"
  }, {
    "left" : "final int k",
    "right" : "final int k",
    "info" : "SingleVariableDeclaration[3470-3481]:SingleVariableDeclaration[3470-3481]"
  }, {
    "left" : "final int maxIterations",
    "right" : "final int maxIterations",
    "info" : "SingleVariableDeclaration[3483-3506]:SingleVariableDeclaration[3483-3506]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3508-5436]:Block[3508-5436]"
  }, {
    "left" : "List<Cluster<T>> clusters = chooseInitialCenters(points, k, random);",
    "right" : "List<Cluster<T>> clusters = chooseInitialCenters(points, k, random);",
    "info" : "VariableDeclarationStatement[3557-3625]:VariableDeclarationStatement[3557-3625]"
  }, {
    "left" : "assignPointsToClusters(clusters, points);",
    "right" : "assignPointsToClusters(clusters, points);",
    "info" : "ExpressionStatement[3634-3675]:ExpressionStatement[3634-3675]"
  }, {
    "left" : "final int max = (maxIterations < 0) ? Integer.MAX_VALUE : maxIterations;",
    "right" : "final int max = (maxIterations < 0) ? Integer.MAX_VALUE : maxIterations;",
    "info" : "VariableDeclarationStatement[3750-3822]:VariableDeclarationStatement[3750-3822]"
  }, {
    "left" : "for (int count = 0; count < max; count++)",
    "right" : "for (int count = 0; count < max; count++)",
    "info" : "ForStatement[3831-5405]:ForStatement[3831-5405]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3873-5405]:Block[3873-5405]"
  }, {
    "left" : "boolean clusteringChanged = false;",
    "right" : "boolean clusteringChanged = false;",
    "info" : "VariableDeclarationStatement[3887-3921]:VariableDeclarationStatement[3887-3921]"
  }, {
    "left" : "List<Cluster<T>> newClusters = new ArrayList<Cluster<T>>();",
    "right" : "List<Cluster<T>> newClusters = new ArrayList<Cluster<T>>();",
    "info" : "VariableDeclarationStatement[3934-3993]:VariableDeclarationStatement[3934-3993]"
  }, {
    "left" : "for (final Cluster<T> cluster : clusters)",
    "right" : "for (final Cluster<T> cluster : clusters)",
    "info" : "EnhancedForStatement[4006-5217]:EnhancedForStatement[4006-5217]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4048-5217]:Block[4048-5217]"
  }, {
    "left" : "final T newCenter;",
    "right" : "final T newCenter;",
    "info" : "VariableDeclarationStatement[4066-4084]:VariableDeclarationStatement[4066-4084]"
  }, {
    "left" : "if (cluster.getPoints().isEmpty())",
    "right" : "if (cluster.getPoints().isEmpty())",
    "info" : "IfStatement[4101-5143]:IfStatement[4101-5143]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4136-4895]:Block[4136-4895]"
  }, {
    "left" : "switch (emptyStrategy) {\n                        case LARGEST_VARIANCE :\n                            newCenter = getPointFromLargestVarianceCluster(clusters);\n                            break;\n                        case LARGEST_POINTS_NUMBER :\n                            newCenter = getPointFromLargestNumberCluster(clusters);\n                            break;\n                        case FARTHEST_POINT :\n                            newCenter = getFarthestPoint(clusters);\n                            break;\n                        default :\n                            throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);\n                    }",
    "right" : "switch (emptyStrategy) {\n                        case LARGEST_VARIANCE :\n                            newCenter = getPointFromLargestVarianceCluster(clusters);\n                            break;\n                        case LARGEST_POINTS_NUMBER :\n                            newCenter = getPointFromLargestNumberCluster(clusters);\n                            break;\n                        case FARTHEST_POINT :\n                            newCenter = getFarthestPoint(clusters);\n                            break;\n                        default :\n                            throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);\n                    }",
    "info" : "SwitchStatement[4158-4831]:SwitchStatement[4158-4831]"
  }, {
    "left" : "case LARGEST_VARIANCE :",
    "right" : "case LARGEST_VARIANCE :",
    "info" : "SwitchCase[4207-4230]:SwitchCase[4207-4230]"
  }, {
    "left" : "newCenter = getPointFromLargestVarianceCluster(clusters);",
    "right" : "newCenter = getPointFromLargestVarianceCluster(clusters);",
    "info" : "ExpressionStatement[4259-4316]:ExpressionStatement[4259-4316]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[4345-4351]:BreakStatement[4345-4351]"
  }, {
    "left" : "case LARGEST_POINTS_NUMBER :",
    "right" : "case LARGEST_POINTS_NUMBER :",
    "info" : "SwitchCase[4376-4404]:SwitchCase[4376-4404]"
  }, {
    "left" : "newCenter = getPointFromLargestNumberCluster(clusters);",
    "right" : "newCenter = getPointFromLargestNumberCluster(clusters);",
    "info" : "ExpressionStatement[4433-4488]:ExpressionStatement[4433-4488]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[4517-4523]:BreakStatement[4517-4523]"
  }, {
    "left" : "case FARTHEST_POINT :",
    "right" : "case FARTHEST_POINT :",
    "info" : "SwitchCase[4548-4569]:SwitchCase[4548-4569]"
  }, {
    "left" : "newCenter = getFarthestPoint(clusters);",
    "right" : "newCenter = getFarthestPoint(clusters);",
    "info" : "ExpressionStatement[4598-4637]:ExpressionStatement[4598-4637]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[4666-4672]:BreakStatement[4666-4672]"
  }, {
    "left" : "default :",
    "right" : "default :",
    "info" : "SwitchCase[4697-4706]:SwitchCase[4697-4706]"
  }, {
    "left" : "throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);",
    "right" : "throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);",
    "info" : "ThrowStatement[4735-4809]:ThrowStatement[4735-4809]"
  }, {
    "left" : "clusteringChanged = true;",
    "right" : "clusteringChanged = true;",
    "info" : "ExpressionStatement[4852-4877]:ExpressionStatement[4852-4877]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4901-5143]:Block[4901-5143]"
  }, {
    "left" : "newCenter = cluster.getCenter().centroidOf(cluster.getPoints());",
    "right" : "newCenter = cluster.getCenter().centroidOf(cluster.getPoints());",
    "info" : "ExpressionStatement[4923-4987]:ExpressionStatement[4923-4987]"
  }, {
    "left" : "if (!newCenter.equals(cluster.getCenter()))",
    "right" : "if (!newCenter.equals(cluster.getCenter()))",
    "info" : "IfStatement[5008-5125]:IfStatement[5008-5125]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5052-5125]:Block[5052-5125]"
  }, {
    "left" : "clusteringChanged = true;",
    "right" : "clusteringChanged = true;",
    "info" : "ExpressionStatement[5078-5103]:ExpressionStatement[5078-5103]"
  }, {
    "left" : "newClusters.add(new Cluster<T>(newCenter));",
    "right" : "newClusters.add(new Cluster<T>(newCenter));",
    "info" : "ExpressionStatement[5160-5203]:ExpressionStatement[5160-5203]"
  }, {
    "left" : "if (!clusteringChanged)",
    "right" : "if (!clusteringChanged)",
    "info" : "IfStatement[5230-5302]:IfStatement[5230-5302]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5254-5302]:Block[5254-5302]"
  }, {
    "left" : "return clusters;",
    "right" : "return clusters;",
    "info" : "ReturnStatement[5272-5288]:ReturnStatement[5272-5288]"
  }, {
    "left" : "assignPointsToClusters(newClusters, points);",
    "right" : "assignPointsToClusters(newClusters, points);",
    "info" : "ExpressionStatement[5315-5359]:ExpressionStatement[5315-5359]"
  }, {
    "left" : "clusters = newClusters;",
    "right" : "clusters = newClusters;",
    "info" : "ExpressionStatement[5372-5395]:ExpressionStatement[5372-5395]"
  }, {
    "left" : "return clusters;",
    "right" : "return clusters;",
    "info" : "ReturnStatement[5414-5430]:ReturnStatement[5414-5430]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[5708-5715]:Modifier[5708-5715]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[5716-5722]:Modifier[5716-5722]"
  }, {
    "left" : "T extends Clusterable<T>",
    "right" : "T extends Clusterable<T>",
    "info" : "TypeParameter[5724-5748]:TypeParameter[5724-5748]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[5750-5754]:PrimitiveType[5750-5754]"
  }, {
    "left" : "assignPointsToClusters",
    "right" : "assignPointsToClusters",
    "info" : "SimpleName[5763-5785]:SimpleName[5763-5785]"
  }, {
    "left" : "final Collection<Cluster<T>> clusters",
    "right" : "final Collection<Cluster<T>> clusters",
    "info" : "SingleVariableDeclaration[5786-5823]:SingleVariableDeclaration[5786-5823]"
  }, {
    "left" : "final Collection<T> points",
    "right" : "final Collection<T> points",
    "info" : "SingleVariableDeclaration[5825-5851]:SingleVariableDeclaration[5825-5851]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5853-6003]:Block[5853-6003]"
  }, {
    "left" : "for (final T p : points)",
    "right" : "for (final T p : points)",
    "info" : "EnhancedForStatement[5863-5997]:EnhancedForStatement[5863-5997]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5888-5997]:Block[5888-5997]"
  }, {
    "left" : "Cluster<T> cluster = getNearestCluster(clusters, p);",
    "right" : "Cluster<T> cluster = getNearestCluster(clusters, p);",
    "info" : "VariableDeclarationStatement[5902-5954]:VariableDeclarationStatement[5902-5954]"
  }, {
    "left" : "cluster.addPoint(p);",
    "right" : "cluster.addPoint(p);",
    "info" : "ExpressionStatement[5967-5987]:ExpressionStatement[5967-5987]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[6327-6334]:Modifier[6327-6334]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[6335-6341]:Modifier[6335-6341]"
  }, {
    "left" : "T extends Clusterable<T>",
    "right" : "T extends Clusterable<T>",
    "info" : "TypeParameter[6343-6367]:TypeParameter[6343-6367]"
  }, {
    "left" : "List<Cluster<T>>",
    "right" : "List<Cluster<T>>",
    "info" : "ParameterizedType[6369-6385]:ParameterizedType[6369-6385]"
  }, {
    "left" : "chooseInitialCenters",
    "right" : "chooseInitialCenters",
    "info" : "SimpleName[6394-6414]:SimpleName[6394-6414]"
  }, {
    "left" : "final Collection<T> points",
    "right" : "final Collection<T> points",
    "info" : "SingleVariableDeclaration[6415-6441]:SingleVariableDeclaration[6415-6441]"
  }, {
    "left" : "final int k",
    "right" : "final int k",
    "info" : "SingleVariableDeclaration[6443-6454]:SingleVariableDeclaration[6443-6454]"
  }, {
    "left" : "final Random random",
    "right" : "final Random random",
    "info" : "SingleVariableDeclaration[6456-6475]:SingleVariableDeclaration[6456-6475]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6477-7886]:Block[6477-7889]"
  }, {
    "left" : "final List<T> pointSet = new ArrayList<T>(points);",
    "right" : "final List<T> pointSet = new ArrayList<T>(points);",
    "info" : "VariableDeclarationStatement[6488-6538]:VariableDeclarationStatement[6488-6538]"
  }, {
    "left" : "final List<Cluster<T>> resultSet = new ArrayList<Cluster<T>>();",
    "right" : "final List<Cluster<T>> resultSet = new ArrayList<Cluster<T>>();",
    "info" : "VariableDeclarationStatement[6547-6610]:VariableDeclarationStatement[6547-6610]"
  }, {
    "left" : "final T firstPoint = pointSet.remove(random.nextInt(pointSet.size()));",
    "right" : "final T firstPoint = pointSet.remove(random.nextInt(pointSet.size()));",
    "info" : "VariableDeclarationStatement[6697-6767]:VariableDeclarationStatement[6697-6767]"
  }, {
    "left" : "resultSet.add(new Cluster<T>(firstPoint));",
    "right" : "resultSet.add(new Cluster<T>(firstPoint));",
    "info" : "ExpressionStatement[6776-6818]:ExpressionStatement[6776-6818]"
  }, {
    "left" : "final double[] dx2 = new double[pointSet.size()];",
    "right" : "final double[] dx2 = new double[pointSet.size()];",
    "info" : "VariableDeclarationStatement[6828-6877]:VariableDeclarationStatement[6828-6877]"
  }, {
    "left" : "while (resultSet.size() < k)",
    "right" : "while (resultSet.size() < k)",
    "info" : "WhileStatement[6886-7852]:WhileStatement[6886-7855]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6915-7852]:Block[6915-7855]"
  }, {
    "left" : "int",
    "right" : "double",
    "info" : "PrimitiveType[7072-7075]:PrimitiveType[7072-7078]"
  }, {
    "left" : "int sum = 0;",
    "right" : "double sum = 0;",
    "info" : "VariableDeclarationStatement[7072-7084]:VariableDeclarationStatement[7072-7087]"
  }, {
    "left" : "for (int i = 0; i < pointSet.size(); i++)",
    "right" : "for (int i = 0; i < pointSet.size(); i++)",
    "info" : "ForStatement[7097-7405]:ForStatement[7100-7408]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7139-7405]:Block[7142-7408]"
  }, {
    "left" : "final T p = pointSet.get(i);",
    "right" : "final T p = pointSet.get(i);",
    "info" : "VariableDeclarationStatement[7157-7185]:VariableDeclarationStatement[7160-7188]"
  }, {
    "left" : "final Cluster<T> nearest = getNearestCluster(resultSet, p);",
    "right" : "final Cluster<T> nearest = getNearestCluster(resultSet, p);",
    "info" : "VariableDeclarationStatement[7202-7261]:VariableDeclarationStatement[7205-7264]"
  }, {
    "left" : "final double d = p.distanceFrom(nearest.getCenter());",
    "right" : "final double d = p.distanceFrom(nearest.getCenter());",
    "info" : "VariableDeclarationStatement[7278-7331]:VariableDeclarationStatement[7281-7334]"
  }, {
    "left" : "sum += d * d;",
    "right" : "sum += d * d;",
    "info" : "ExpressionStatement[7348-7361]:ExpressionStatement[7351-7364]"
  }, {
    "left" : "dx2[i] = sum;",
    "right" : "dx2[i] = sum;",
    "info" : "ExpressionStatement[7378-7391]:ExpressionStatement[7381-7394]"
  }, {
    "left" : "final double r = random.nextDouble() * sum;",
    "right" : "final double r = random.nextDouble() * sum;",
    "info" : "VariableDeclarationStatement[7547-7590]:VariableDeclarationStatement[7550-7593]"
  }, {
    "left" : "for (int i = 0 ; i < dx2.length; i++)",
    "right" : "for (int i = 0 ; i < dx2.length; i++)",
    "info" : "ForStatement[7603-7842]:ForStatement[7606-7845]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7641-7842]:Block[7644-7845]"
  }, {
    "left" : "if (dx2[i] >= r)",
    "right" : "if (dx2[i] >= r)",
    "info" : "IfStatement[7659-7828]:IfStatement[7662-7831]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7676-7828]:Block[7679-7831]"
  }, {
    "left" : "final T p = pointSet.remove(i);",
    "right" : "final T p = pointSet.remove(i);",
    "info" : "VariableDeclarationStatement[7698-7729]:VariableDeclarationStatement[7701-7732]"
  }, {
    "left" : "resultSet.add(new Cluster<T>(p));",
    "right" : "resultSet.add(new Cluster<T>(p));",
    "info" : "ExpressionStatement[7750-7783]:ExpressionStatement[7753-7786]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[7804-7810]:BreakStatement[7807-7813]"
  }, {
    "left" : "return resultSet;",
    "right" : "return resultSet;",
    "info" : "ReturnStatement[7862-7879]:ReturnStatement[7865-7882]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[8112-8119]:Modifier[8115-8122]"
  }, {
    "left" : "T",
    "right" : "T",
    "info" : "SimpleType[8120-8121]:SimpleType[8123-8124]"
  }, {
    "left" : "getPointFromLargestVarianceCluster",
    "right" : "getPointFromLargestVarianceCluster",
    "info" : "SimpleName[8122-8156]:SimpleName[8125-8159]"
  }, {
    "left" : "final Collection<Cluster<T>> clusters",
    "right" : "final Collection<Cluster<T>> clusters",
    "info" : "SingleVariableDeclaration[8157-8194]:SingleVariableDeclaration[8160-8197]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8196-9393]:Block[8199-9396]"
  }, {
    "left" : "double maxVariance = Double.NEGATIVE_INFINITY;",
    "right" : "double maxVariance = Double.NEGATIVE_INFINITY;",
    "info" : "VariableDeclarationStatement[8207-8253]:VariableDeclarationStatement[8210-8256]"
  }, {
    "left" : "Cluster<T> selected = null;",
    "right" : "Cluster<T> selected = null;",
    "info" : "VariableDeclarationStatement[8262-8289]:VariableDeclarationStatement[8265-8292]"
  }, {
    "left" : "for (final Cluster<T> cluster : clusters)",
    "right" : "for (final Cluster<T> cluster : clusters)",
    "info" : "EnhancedForStatement[8298-9010]:EnhancedForStatement[8301-9013]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8340-9010]:Block[8343-9013]"
  }, {
    "left" : "if (!cluster.getPoints().isEmpty())",
    "right" : "if (!cluster.getPoints().isEmpty())",
    "info" : "IfStatement[8354-9000]:IfStatement[8357-9003]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8390-9000]:Block[8393-9003]"
  }, {
    "left" : "final T center = cluster.getCenter();",
    "right" : "final T center = cluster.getCenter();",
    "info" : "VariableDeclarationStatement[8481-8518]:VariableDeclarationStatement[8484-8521]"
  }, {
    "left" : "final Variance stat = new Variance();",
    "right" : "final Variance stat = new Variance();",
    "info" : "VariableDeclarationStatement[8535-8572]:VariableDeclarationStatement[8538-8575]"
  }, {
    "left" : "for (final T point : cluster.getPoints())",
    "right" : "for (final T point : cluster.getPoints())",
    "info" : "EnhancedForStatement[8589-8714]:EnhancedForStatement[8592-8717]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8631-8714]:Block[8634-8717]"
  }, {
    "left" : "stat.increment(point.distanceFrom(center));",
    "right" : "stat.increment(point.distanceFrom(center));",
    "info" : "ExpressionStatement[8653-8696]:ExpressionStatement[8656-8699]"
  }, {
    "left" : "final double variance = stat.getResult();",
    "right" : "final double variance = stat.getResult();",
    "info" : "VariableDeclarationStatement[8731-8772]:VariableDeclarationStatement[8734-8775]"
  }, {
    "left" : "if (variance > maxVariance)",
    "right" : "if (variance > maxVariance)",
    "info" : "IfStatement[8854-8985]:IfStatement[8857-8988]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8882-8985]:Block[8885-8988]"
  }, {
    "left" : "maxVariance = variance;",
    "right" : "maxVariance = variance;",
    "info" : "ExpressionStatement[8904-8927]:ExpressionStatement[8907-8930]"
  }, {
    "left" : "selected = cluster;",
    "right" : "selected = cluster;",
    "info" : "ExpressionStatement[8948-8967]:ExpressionStatement[8951-8970]"
  }, {
    "left" : "if (selected == null)",
    "right" : "if (selected == null)",
    "info" : "IfStatement[9076-9196]:IfStatement[9079-9199]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9098-9196]:Block[9101-9199]"
  }, {
    "left" : "throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);",
    "right" : "throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);",
    "info" : "ThrowStatement[9112-9186]:ThrowStatement[9115-9189]"
  }, {
    "left" : "final List<T> selectedPoints = selected.getPoints();",
    "right" : "final List<T> selectedPoints = selected.getPoints();",
    "info" : "VariableDeclarationStatement[9257-9309]:VariableDeclarationStatement[9260-9312]"
  }, {
    "left" : "return selectedPoints.remove(random.nextInt(selectedPoints.size()));",
    "right" : "return selectedPoints.remove(random.nextInt(selectedPoints.size()));",
    "info" : "ReturnStatement[9318-9386]:ReturnStatement[9321-9389]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[9617-9624]:Modifier[9620-9627]"
  }, {
    "left" : "T",
    "right" : "T",
    "info" : "SimpleType[9625-9626]:SimpleType[9628-9629]"
  }, {
    "left" : "getPointFromLargestNumberCluster",
    "right" : "getPointFromLargestNumberCluster",
    "info" : "SimpleName[9627-9659]:SimpleName[9630-9662]"
  }, {
    "left" : "final Collection<Cluster<T>> clusters",
    "right" : "final Collection<Cluster<T>> clusters",
    "info" : "SingleVariableDeclaration[9660-9697]:SingleVariableDeclaration[9663-9700]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9699-10526]:Block[9702-10529]"
  }, {
    "left" : "int maxNumber = 0;",
    "right" : "int maxNumber = 0;",
    "info" : "VariableDeclarationStatement[9710-9728]:VariableDeclarationStatement[9713-9731]"
  }, {
    "left" : "Cluster<T> selected = null;",
    "right" : "Cluster<T> selected = null;",
    "info" : "VariableDeclarationStatement[9737-9764]:VariableDeclarationStatement[9740-9767]"
  }, {
    "left" : "for (final Cluster<T> cluster : clusters)",
    "right" : "for (final Cluster<T> cluster : clusters)",
    "info" : "EnhancedForStatement[9773-10143]:EnhancedForStatement[9776-10146]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9815-10143]:Block[9818-10146]"
  }, {
    "left" : "final int number = cluster.getPoints().size();",
    "right" : "final int number = cluster.getPoints().size();",
    "info" : "VariableDeclarationStatement[9893-9939]:VariableDeclarationStatement[9896-9942]"
  }, {
    "left" : "if (number > maxNumber)",
    "right" : "if (number > maxNumber)",
    "info" : "IfStatement[10021-10132]:IfStatement[10024-10135]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10045-10132]:Block[10048-10135]"
  }, {
    "left" : "maxNumber = number;",
    "right" : "maxNumber = number;",
    "info" : "ExpressionStatement[10063-10082]:ExpressionStatement[10066-10085]"
  }, {
    "left" : "selected = cluster;",
    "right" : "selected = cluster;",
    "info" : "ExpressionStatement[10099-10118]:ExpressionStatement[10102-10121]"
  }, {
    "left" : "if (selected == null)",
    "right" : "if (selected == null)",
    "info" : "IfStatement[10209-10329]:IfStatement[10212-10332]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10231-10329]:Block[10234-10332]"
  }, {
    "left" : "throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);",
    "right" : "throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);",
    "info" : "ThrowStatement[10245-10319]:ThrowStatement[10248-10322]"
  }, {
    "left" : "final List<T> selectedPoints = selected.getPoints();",
    "right" : "final List<T> selectedPoints = selected.getPoints();",
    "info" : "VariableDeclarationStatement[10390-10442]:VariableDeclarationStatement[10393-10445]"
  }, {
    "left" : "return selectedPoints.remove(random.nextInt(selectedPoints.size()));",
    "right" : "return selectedPoints.remove(random.nextInt(selectedPoints.size()));",
    "info" : "ReturnStatement[10451-10519]:ReturnStatement[10454-10522]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[10713-10720]:Modifier[10716-10723]"
  }, {
    "left" : "T",
    "right" : "T",
    "info" : "SimpleType[10721-10722]:SimpleType[10724-10725]"
  }, {
    "left" : "getFarthestPoint",
    "right" : "getFarthestPoint",
    "info" : "SimpleName[10723-10739]:SimpleName[10726-10742]"
  }, {
    "left" : "final Collection<Cluster<T>> clusters",
    "right" : "final Collection<Cluster<T>> clusters",
    "info" : "SingleVariableDeclaration[10740-10777]:SingleVariableDeclaration[10743-10780]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10779-11730]:Block[10782-11733]"
  }, {
    "left" : "double maxDistance = Double.NEGATIVE_INFINITY;",
    "right" : "double maxDistance = Double.NEGATIVE_INFINITY;",
    "info" : "VariableDeclarationStatement[10790-10836]:VariableDeclarationStatement[10793-10839]"
  }, {
    "left" : "Cluster<T> selectedCluster = null;",
    "right" : "Cluster<T> selectedCluster = null;",
    "info" : "VariableDeclarationStatement[10845-10879]:VariableDeclarationStatement[10848-10882]"
  }, {
    "left" : "int selectedPoint = -1;",
    "right" : "int selectedPoint = -1;",
    "info" : "VariableDeclarationStatement[10888-10911]:VariableDeclarationStatement[10891-10914]"
  }, {
    "left" : "for (final Cluster<T> cluster : clusters)",
    "right" : "for (final Cluster<T> cluster : clusters)",
    "info" : "EnhancedForStatement[10920-11463]:EnhancedForStatement[10923-11466]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10962-11463]:Block[10965-11466]"
  }, {
    "left" : "final T center = cluster.getCenter();",
    "right" : "final T center = cluster.getCenter();",
    "info" : "VariableDeclarationStatement[11015-11052]:VariableDeclarationStatement[11018-11055]"
  }, {
    "left" : "final List<T> points = cluster.getPoints();",
    "right" : "final List<T> points = cluster.getPoints();",
    "info" : "VariableDeclarationStatement[11065-11108]:VariableDeclarationStatement[11068-11111]"
  }, {
    "left" : "for (int i = 0; i < points.size(); ++i)",
    "right" : "for (int i = 0; i < points.size(); ++i)",
    "info" : "ForStatement[11121-11452]:ForStatement[11124-11455]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11161-11452]:Block[11164-11455]"
  }, {
    "left" : "final double distance = points.get(i).distanceFrom(center);",
    "right" : "final double distance = points.get(i).distanceFrom(center);",
    "info" : "VariableDeclarationStatement[11179-11238]:VariableDeclarationStatement[11182-11241]"
  }, {
    "left" : "if (distance > maxDistance)",
    "right" : "if (distance > maxDistance)",
    "info" : "IfStatement[11255-11438]:IfStatement[11258-11441]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11283-11438]:Block[11286-11441]"
  }, {
    "left" : "maxDistance     = distance;",
    "right" : "maxDistance     = distance;",
    "info" : "ExpressionStatement[11305-11332]:ExpressionStatement[11308-11335]"
  }, {
    "left" : "selectedCluster = cluster;",
    "right" : "selectedCluster = cluster;",
    "info" : "ExpressionStatement[11353-11379]:ExpressionStatement[11356-11382]"
  }, {
    "left" : "selectedPoint   = i;",
    "right" : "selectedPoint   = i;",
    "info" : "ExpressionStatement[11400-11420]:ExpressionStatement[11403-11423]"
  }, {
    "left" : "if (selectedCluster == null)",
    "right" : "if (selectedCluster == null)",
    "info" : "IfStatement[11529-11656]:IfStatement[11532-11659]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11558-11656]:Block[11561-11659]"
  }, {
    "left" : "throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);",
    "right" : "throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);",
    "info" : "ThrowStatement[11572-11646]:ThrowStatement[11575-11649]"
  }, {
    "left" : "return selectedCluster.getPoints().remove(selectedPoint);",
    "right" : "return selectedCluster.getPoints().remove(selectedPoint);",
    "info" : "ReturnStatement[11666-11723]:ReturnStatement[11669-11726]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[12055-12062]:Modifier[12058-12065]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[12063-12069]:Modifier[12066-12072]"
  }, {
    "left" : "T extends Clusterable<T>",
    "right" : "T extends Clusterable<T>",
    "info" : "TypeParameter[12071-12095]:TypeParameter[12074-12098]"
  }, {
    "left" : "Cluster<T>",
    "right" : "Cluster<T>",
    "info" : "ParameterizedType[12097-12107]:ParameterizedType[12100-12110]"
  }, {
    "left" : "getNearestCluster",
    "right" : "getNearestCluster",
    "info" : "SimpleName[12116-12133]:SimpleName[12119-12136]"
  }, {
    "left" : "final Collection<Cluster<T>> clusters",
    "right" : "final Collection<Cluster<T>> clusters",
    "info" : "SingleVariableDeclaration[12134-12171]:SingleVariableDeclaration[12137-12174]"
  }, {
    "left" : "final T point",
    "right" : "final T point",
    "info" : "SingleVariableDeclaration[12173-12186]:SingleVariableDeclaration[12176-12189]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12188-12562]:Block[12191-12565]"
  }, {
    "left" : "double minDistance = Double.MAX_VALUE;",
    "right" : "double minDistance = Double.MAX_VALUE;",
    "info" : "VariableDeclarationStatement[12198-12236]:VariableDeclarationStatement[12201-12239]"
  }, {
    "left" : "Cluster<T> minCluster = null;",
    "right" : "Cluster<T> minCluster = null;",
    "info" : "VariableDeclarationStatement[12245-12274]:VariableDeclarationStatement[12248-12277]"
  }, {
    "left" : "for (final Cluster<T> c : clusters)",
    "right" : "for (final Cluster<T> c : clusters)",
    "info" : "EnhancedForStatement[12283-12529]:EnhancedForStatement[12286-12532]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12319-12529]:Block[12322-12532]"
  }, {
    "left" : "final double distance = point.distanceFrom(c.getCenter());",
    "right" : "final double distance = point.distanceFrom(c.getCenter());",
    "info" : "VariableDeclarationStatement[12333-12391]:VariableDeclarationStatement[12336-12394]"
  }, {
    "left" : "if (distance < minDistance)",
    "right" : "if (distance < minDistance)",
    "info" : "IfStatement[12404-12519]:IfStatement[12407-12522]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12432-12519]:Block[12435-12522]"
  }, {
    "left" : "minDistance = distance;",
    "right" : "minDistance = distance;",
    "info" : "ExpressionStatement[12450-12473]:ExpressionStatement[12453-12476]"
  }, {
    "left" : "minCluster = c;",
    "right" : "minCluster = c;",
    "info" : "ExpressionStatement[12490-12505]:ExpressionStatement[12493-12508]"
  }, {
    "left" : "return minCluster;",
    "right" : "return minCluster;",
    "info" : "ReturnStatement[12538-12556]:ReturnStatement[12541-12559]"
  } ]
}