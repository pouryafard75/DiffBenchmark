{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "ArchiveStreamFactory",
      "right" : "ArchiveStreamFactory",
      "info" : "TypeDeclaration[1963-15888]:TypeDeclaration[1963-16196]"
    }, {
      "left" : "public static final String AR = \"ar\";",
      "right" : "public static final String AR = \"ar\";",
      "info" : "FieldDeclaration[3316-3460]:FieldDeclaration[3316-3460]"
    }, {
      "left" : "public static final String ARJ = \"arj\";",
      "right" : "public static final String ARJ = \"arj\";",
      "info" : "FieldDeclaration[3465-3659]:FieldDeclaration[3465-3659]"
    }, {
      "left" : "public static final String CPIO = \"cpio\";",
      "right" : "public static final String CPIO = \"cpio\";",
      "info" : "FieldDeclaration[3664-3814]:FieldDeclaration[3664-3814]"
    }, {
      "left" : "public static final String DUMP = \"dump\";",
      "right" : "public static final String DUMP = \"dump\";",
      "info" : "FieldDeclaration[3819-4021]:FieldDeclaration[3819-4021]"
    }, {
      "left" : "public static final String JAR = \"jar\";",
      "right" : "public static final String JAR = \"jar\";",
      "info" : "FieldDeclaration[4026-4173]:FieldDeclaration[4026-4173]"
    }, {
      "left" : "public static final String TAR = \"tar\";",
      "right" : "public static final String TAR = \"tar\";",
      "info" : "FieldDeclaration[4178-4308]:FieldDeclaration[4178-4308]"
    }, {
      "left" : "public static final String ZIP = \"zip\";",
      "right" : "public static final String ZIP = \"zip\";",
      "info" : "FieldDeclaration[4313-4460]:FieldDeclaration[4313-4460]"
    }, {
      "left" : "public static final String SEVEN_Z = \"7z\";",
      "right" : "public static final String SEVEN_Z = \"7z\";",
      "info" : "FieldDeclaration[4465-4614]:FieldDeclaration[4465-4614]"
    }, {
      "left" : "private final String encoding;",
      "right" : "private final String encoding;",
      "info" : "FieldDeclaration[4620-4720]:FieldDeclaration[4620-4720]"
    }, {
      "left" : "private volatile String entryEncoding = null;",
      "right" : "private volatile String entryEncoding = null;",
      "info" : "FieldDeclaration[4726-4832]:FieldDeclaration[4726-4832]"
    }, {
      "left" : "public ArchiveStreamFactory()",
      "right" : "public ArchiveStreamFactory()",
      "info" : "MethodDeclaration[4838-4974]:MethodDeclaration[4838-4974]"
    }, {
      "left" : "public ArchiveStreamFactory(String encoding)",
      "right" : "public ArchiveStreamFactory(String encoding)",
      "info" : "MethodDeclaration[4980-5341]:MethodDeclaration[4980-5341]"
    }, {
      "left" : "public String getEntryEncoding()",
      "right" : "public String getEntryEncoding()",
      "info" : "MethodDeclaration[5347-5643]:MethodDeclaration[5347-5643]"
    }, {
      "left" : "public void setEntryEncoding(String entryEncoding)",
      "right" : "public void setEntryEncoding(String entryEncoding)",
      "info" : "MethodDeclaration[5649-6483]:MethodDeclaration[5649-6483]"
    }, {
      "left" : "public ArchiveInputStream createArchiveInputStream(\n            final String archiverName, final InputStream in)\n            throws ArchiveException",
      "right" : "public ArchiveInputStream createArchiveInputStream(\n            final String archiverName, final InputStream in)\n            throws ArchiveException",
      "info" : "MethodDeclaration[6489-9373]:MethodDeclaration[6489-9373]"
    }, {
      "left" : "public ArchiveOutputStream createArchiveOutputStream(\n            final String archiverName, final OutputStream out)\n            throws ArchiveException",
      "right" : "public ArchiveOutputStream createArchiveOutputStream(\n            final String archiverName, final OutputStream out)\n            throws ArchiveException",
      "info" : "MethodDeclaration[9379-11571]:MethodDeclaration[9379-11718]"
    }, {
      "left" : "public ArchiveInputStream createArchiveInputStream(final InputStream in)\n            throws ArchiveException",
      "right" : "public ArchiveInputStream createArchiveInputStream(final InputStream in)\n            throws ArchiveException",
      "info" : "MethodDeclaration[11577-15885]:MethodDeclaration[11724-16193]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4947-4974]:Block[4947-4974]"
    }, {
      "left" : "this(null);",
      "right" : "this(null);",
      "info" : "ConstructorInvocation[4957-4968]:ConstructorInvocation[4957-4968]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5178-5341]:Block[5178-5341]"
    }, {
      "left" : "super();",
      "right" : "super();",
      "info" : "SuperConstructorInvocation[5188-5196]:SuperConstructorInvocation[5188-5196]"
    }, {
      "left" : "this.encoding = encoding;",
      "right" : "this.encoding = encoding;",
      "info" : "ExpressionStatement[5205-5230]:ExpressionStatement[5205-5230]"
    }, {
      "left" : "this.entryEncoding = encoding;",
      "right" : "this.entryEncoding = encoding;",
      "info" : "ExpressionStatement[5305-5335]:ExpressionStatement[5305-5335]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5606-5643]:Block[5606-5643]"
    }, {
      "left" : "return entryEncoding;",
      "right" : "return entryEncoding;",
      "info" : "ReturnStatement[5616-5637]:ReturnStatement[5616-5637]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6184-6483]:Block[6184-6483]"
    }, {
      "left" : "if (encoding != null)",
      "right" : "if (encoding != null)",
      "info" : "IfStatement[6305-6433]:IfStatement[6305-6433]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6327-6433]:Block[6327-6433]"
    }, {
      "left" : "throw new IllegalStateException(\"Cannot overide encoding set by the constructor\");",
      "right" : "throw new IllegalStateException(\"Cannot overide encoding set by the constructor\");",
      "info" : "ThrowStatement[6341-6423]:ThrowStatement[6341-6423]"
    }, {
      "left" : "this.entryEncoding = entryEncoding;",
      "right" : "this.entryEncoding = entryEncoding;",
      "info" : "ExpressionStatement[6442-6477]:ExpressionStatement[6442-6477]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7241-9373]:Block[7241-9373]"
    }, {
      "left" : "if (archiverName == null)",
      "right" : "if (archiverName == null)",
      "info" : "IfStatement[7252-7371]:IfStatement[7252-7371]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7278-7371]:Block[7278-7371]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Archivername must not be null.\");",
      "right" : "throw new IllegalArgumentException(\"Archivername must not be null.\");",
      "info" : "ThrowStatement[7292-7361]:ThrowStatement[7292-7361]"
    }, {
      "left" : "if (in == null)",
      "right" : "if (in == null)",
      "info" : "IfStatement[7381-7489]:IfStatement[7381-7489]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7397-7489]:Block[7397-7489]"
    }, {
      "left" : "throw new IllegalArgumentException(\"InputStream must not be null.\");",
      "right" : "throw new IllegalArgumentException(\"InputStream must not be null.\");",
      "info" : "ThrowStatement[7411-7479]:ThrowStatement[7411-7479]"
    }, {
      "left" : "if (AR.equalsIgnoreCase(archiverName))",
      "right" : "if (AR.equalsIgnoreCase(archiverName))",
      "info" : "IfStatement[7499-7598]:IfStatement[7499-7598]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7538-7598]:Block[7538-7598]"
    }, {
      "left" : "return new ArArchiveInputStream(in);",
      "right" : "return new ArArchiveInputStream(in);",
      "info" : "ReturnStatement[7552-7588]:ReturnStatement[7552-7588]"
    }, {
      "left" : "if (ARJ.equalsIgnoreCase(archiverName))",
      "right" : "if (ARJ.equalsIgnoreCase(archiverName))",
      "info" : "IfStatement[7607-7857]:IfStatement[7607-7857]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7647-7857]:Block[7647-7857]"
    }, {
      "left" : "if (entryEncoding != null)",
      "right" : "if (entryEncoding != null)",
      "info" : "IfStatement[7661-7847]:IfStatement[7661-7847]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7688-7772]:Block[7688-7772]"
    }, {
      "left" : "return new ArjArchiveInputStream(in, entryEncoding);",
      "right" : "return new ArjArchiveInputStream(in, entryEncoding);",
      "info" : "ReturnStatement[7706-7758]:ReturnStatement[7706-7758]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7778-7847]:Block[7778-7847]"
    }, {
      "left" : "return new ArjArchiveInputStream(in);",
      "right" : "return new ArjArchiveInputStream(in);",
      "info" : "ReturnStatement[7796-7833]:ReturnStatement[7796-7833]"
    }, {
      "left" : "if (ZIP.equalsIgnoreCase(archiverName))",
      "right" : "if (ZIP.equalsIgnoreCase(archiverName))",
      "info" : "IfStatement[7866-8116]:IfStatement[7866-8116]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7906-8116]:Block[7906-8116]"
    }, {
      "left" : "if (entryEncoding != null)",
      "right" : "if (entryEncoding != null)",
      "info" : "IfStatement[7920-8106]:IfStatement[7920-8106]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7947-8031]:Block[7947-8031]"
    }, {
      "left" : "return new ZipArchiveInputStream(in, entryEncoding);",
      "right" : "return new ZipArchiveInputStream(in, entryEncoding);",
      "info" : "ReturnStatement[7965-8017]:ReturnStatement[7965-8017]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8037-8106]:Block[8037-8106]"
    }, {
      "left" : "return new ZipArchiveInputStream(in);",
      "right" : "return new ZipArchiveInputStream(in);",
      "info" : "ReturnStatement[8055-8092]:ReturnStatement[8055-8092]"
    }, {
      "left" : "if (TAR.equalsIgnoreCase(archiverName))",
      "right" : "if (TAR.equalsIgnoreCase(archiverName))",
      "info" : "IfStatement[8125-8375]:IfStatement[8125-8375]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8165-8375]:Block[8165-8375]"
    }, {
      "left" : "if (entryEncoding != null)",
      "right" : "if (entryEncoding != null)",
      "info" : "IfStatement[8179-8365]:IfStatement[8179-8365]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8206-8290]:Block[8206-8290]"
    }, {
      "left" : "return new TarArchiveInputStream(in, entryEncoding);",
      "right" : "return new TarArchiveInputStream(in, entryEncoding);",
      "info" : "ReturnStatement[8224-8276]:ReturnStatement[8224-8276]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8296-8365]:Block[8296-8365]"
    }, {
      "left" : "return new TarArchiveInputStream(in);",
      "right" : "return new TarArchiveInputStream(in);",
      "info" : "ReturnStatement[8314-8351]:ReturnStatement[8314-8351]"
    }, {
      "left" : "if (JAR.equalsIgnoreCase(archiverName))",
      "right" : "if (JAR.equalsIgnoreCase(archiverName))",
      "info" : "IfStatement[8384-8634]:IfStatement[8384-8634]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8424-8634]:Block[8424-8634]"
    }, {
      "left" : "if (entryEncoding != null)",
      "right" : "if (entryEncoding != null)",
      "info" : "IfStatement[8438-8624]:IfStatement[8438-8624]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8465-8549]:Block[8465-8549]"
    }, {
      "left" : "return new JarArchiveInputStream(in, entryEncoding);",
      "right" : "return new JarArchiveInputStream(in, entryEncoding);",
      "info" : "ReturnStatement[8483-8535]:ReturnStatement[8483-8535]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8555-8624]:Block[8555-8624]"
    }, {
      "left" : "return new JarArchiveInputStream(in);",
      "right" : "return new JarArchiveInputStream(in);",
      "info" : "ReturnStatement[8573-8610]:ReturnStatement[8573-8610]"
    }, {
      "left" : "if (CPIO.equalsIgnoreCase(archiverName))",
      "right" : "if (CPIO.equalsIgnoreCase(archiverName))",
      "info" : "IfStatement[8643-8896]:IfStatement[8643-8896]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8684-8896]:Block[8684-8896]"
    }, {
      "left" : "if (entryEncoding != null)",
      "right" : "if (entryEncoding != null)",
      "info" : "IfStatement[8698-8886]:IfStatement[8698-8886]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8725-8810]:Block[8725-8810]"
    }, {
      "left" : "return new CpioArchiveInputStream(in, entryEncoding);",
      "right" : "return new CpioArchiveInputStream(in, entryEncoding);",
      "info" : "ReturnStatement[8743-8796]:ReturnStatement[8743-8796]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8816-8886]:Block[8816-8886]"
    }, {
      "left" : "return new CpioArchiveInputStream(in);",
      "right" : "return new CpioArchiveInputStream(in);",
      "info" : "ReturnStatement[8834-8872]:ReturnStatement[8834-8872]"
    }, {
      "left" : "if (DUMP.equalsIgnoreCase(archiverName))",
      "right" : "if (DUMP.equalsIgnoreCase(archiverName))",
      "info" : "IfStatement[8905-9158]:IfStatement[8905-9158]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8946-9158]:Block[8946-9158]"
    }, {
      "left" : "if (entryEncoding != null)",
      "right" : "if (entryEncoding != null)",
      "info" : "IfStatement[8960-9148]:IfStatement[8960-9148]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8987-9072]:Block[8987-9072]"
    }, {
      "left" : "return new DumpArchiveInputStream(in, entryEncoding);",
      "right" : "return new DumpArchiveInputStream(in, entryEncoding);",
      "info" : "ReturnStatement[9005-9058]:ReturnStatement[9005-9058]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9078-9148]:Block[9078-9148]"
    }, {
      "left" : "return new DumpArchiveInputStream(in);",
      "right" : "return new DumpArchiveInputStream(in);",
      "info" : "ReturnStatement[9096-9134]:ReturnStatement[9096-9134]"
    }, {
      "left" : "if (SEVEN_Z.equalsIgnoreCase(archiverName))",
      "right" : "if (SEVEN_Z.equalsIgnoreCase(archiverName))",
      "info" : "IfStatement[9167-9285]:IfStatement[9167-9285]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9211-9285]:Block[9211-9285]"
    }, {
      "left" : "throw new StreamingNotSupportedException(SEVEN_Z);",
      "right" : "throw new StreamingNotSupportedException(SEVEN_Z);",
      "info" : "ThrowStatement[9225-9275]:ThrowStatement[9225-9275]"
    }, {
      "left" : "throw new ArchiveException(\"Archiver: \" + archiverName + \" not found.\");",
      "right" : "throw new ArchiveException(\"Archiver: \" + archiverName + \" not found.\");",
      "info" : "ThrowStatement[9295-9367]:ThrowStatement[9295-9367]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10092-11571]:Block[10092-11718]"
    }, {
      "left" : "if (archiverName == null)",
      "right" : "if (archiverName == null)",
      "info" : "IfStatement[10102-10221]:IfStatement[10102-10221]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10128-10221]:Block[10128-10221]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Archivername must not be null.\");",
      "right" : "throw new IllegalArgumentException(\"Archivername must not be null.\");",
      "info" : "ThrowStatement[10142-10211]:ThrowStatement[10142-10211]"
    }, {
      "left" : "if (out == null)",
      "right" : "if (out == null)",
      "info" : "IfStatement[10230-10340]:IfStatement[10230-10340]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10247-10340]:Block[10247-10340]"
    }, {
      "left" : "throw new IllegalArgumentException(\"OutputStream must not be null.\");",
      "right" : "throw new IllegalArgumentException(\"OutputStream must not be null.\");",
      "info" : "ThrowStatement[10261-10330]:ThrowStatement[10261-10330]"
    }, {
      "left" : "if (AR.equalsIgnoreCase(archiverName))",
      "right" : "if (AR.equalsIgnoreCase(archiverName))",
      "info" : "IfStatement[10350-10451]:IfStatement[10350-10451]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10389-10451]:Block[10389-10451]"
    }, {
      "left" : "return new ArArchiveOutputStream(out);",
      "right" : "return new ArArchiveOutputStream(out);",
      "info" : "ReturnStatement[10403-10441]:ReturnStatement[10403-10441]"
    }, {
      "left" : "if (ZIP.equalsIgnoreCase(archiverName))",
      "right" : "if (ZIP.equalsIgnoreCase(archiverName))",
      "info" : "IfStatement[10460-10712]:IfStatement[10460-10712]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10500-10712]:Block[10500-10712]"
    }, {
      "left" : "ZipArchiveOutputStream zip = new ZipArchiveOutputStream(out);",
      "right" : "ZipArchiveOutputStream zip = new ZipArchiveOutputStream(out);",
      "info" : "VariableDeclarationStatement[10514-10575]:VariableDeclarationStatement[10514-10575]"
    }, {
      "left" : "if (entryEncoding != null)",
      "right" : "if (entryEncoding != null)",
      "info" : "IfStatement[10588-10678]:IfStatement[10588-10678]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10615-10678]:Block[10615-10678]"
    }, {
      "left" : "zip.setEncoding(entryEncoding);",
      "right" : "zip.setEncoding(entryEncoding);",
      "info" : "ExpressionStatement[10633-10664]:ExpressionStatement[10633-10664]"
    }, {
      "left" : "return zip;",
      "right" : "return zip;",
      "info" : "ReturnStatement[10691-10702]:ReturnStatement[10691-10702]"
    }, {
      "left" : "if (TAR.equalsIgnoreCase(archiverName))",
      "right" : "if (TAR.equalsIgnoreCase(archiverName))",
      "info" : "IfStatement[10721-10975]:IfStatement[10721-10975]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10761-10975]:Block[10761-10975]"
    }, {
      "left" : "if (entryEncoding != null)",
      "right" : "if (entryEncoding != null)",
      "info" : "IfStatement[10775-10965]:IfStatement[10775-10965]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10802-10888]:Block[10802-10888]"
    }, {
      "left" : "return new TarArchiveOutputStream(out, entryEncoding);",
      "right" : "return new TarArchiveOutputStream(out, entryEncoding);",
      "info" : "ReturnStatement[10820-10874]:ReturnStatement[10820-10874]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10894-10965]:Block[10894-10965]"
    }, {
      "left" : "return new TarArchiveOutputStream(out);",
      "right" : "return new TarArchiveOutputStream(out);",
      "info" : "ReturnStatement[10912-10951]:ReturnStatement[10912-10951]"
    }, {
      "left" : "if (JAR.equalsIgnoreCase(archiverName))",
      "right" : "if (JAR.equalsIgnoreCase(archiverName))",
      "info" : "IfStatement[10984-11091]:IfStatement[10984-11238]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11024-11091]:Block[11024-11238]"
    }, {
      "left" : "return new JarArchiveOutputStream(out);",
      "right" : "return new JarArchiveOutputStream(out);",
      "info" : "ReturnStatement[11042-11081]:ReturnStatement[11175-11214]"
    }, {
      "left" : "if (CPIO.equalsIgnoreCase(archiverName))",
      "right" : "if (CPIO.equalsIgnoreCase(archiverName))",
      "info" : "IfStatement[11100-11357]:IfStatement[11247-11504]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11141-11357]:Block[11288-11504]"
    }, {
      "left" : "if (entryEncoding != null)",
      "right" : "if (entryEncoding != null)",
      "info" : "IfStatement[11155-11347]:IfStatement[11038-11228]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11182-11269]:Block[11329-11416]"
    }, {
      "left" : "return new CpioArchiveOutputStream(out, entryEncoding);",
      "right" : "return new CpioArchiveOutputStream(out, entryEncoding);",
      "info" : "ReturnStatement[11200-11255]:ReturnStatement[11347-11402]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11275-11347]:Block[11422-11494]"
    }, {
      "left" : "return new CpioArchiveOutputStream(out);",
      "right" : "return new CpioArchiveOutputStream(out);",
      "info" : "ReturnStatement[11293-11333]:ReturnStatement[11440-11480]"
    }, {
      "left" : "if (SEVEN_Z.equalsIgnoreCase(archiverName))",
      "right" : "if (SEVEN_Z.equalsIgnoreCase(archiverName))",
      "info" : "IfStatement[11366-11484]:IfStatement[11513-11631]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11410-11484]:Block[11557-11631]"
    }, {
      "left" : "throw new StreamingNotSupportedException(SEVEN_Z);",
      "right" : "throw new StreamingNotSupportedException(SEVEN_Z);",
      "info" : "ThrowStatement[11424-11474]:ThrowStatement[11571-11621]"
    }, {
      "left" : "throw new ArchiveException(\"Archiver: \" + archiverName + \" not found.\");",
      "right" : "throw new ArchiveException(\"Archiver: \" + archiverName + \" not found.\");",
      "info" : "ThrowStatement[11493-11565]:ThrowStatement[11640-11712]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12240-15885]:Block[12387-16193]"
    }, {
      "left" : "if (in == null)",
      "right" : "if (in == null)",
      "info" : "IfStatement[12250-12353]:IfStatement[12397-12500]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12266-12353]:Block[12413-12500]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Stream must not be null.\");",
      "right" : "throw new IllegalArgumentException(\"Stream must not be null.\");",
      "info" : "ThrowStatement[12280-12343]:ThrowStatement[12427-12490]"
    }, {
      "left" : "if (!in.markSupported())",
      "right" : "if (!in.markSupported())",
      "info" : "IfStatement[12363-12473]:IfStatement[12510-12620]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12388-12473]:Block[12535-12620]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Mark is not supported.\");",
      "right" : "throw new IllegalArgumentException(\"Mark is not supported.\");",
      "info" : "ThrowStatement[12402-12463]:ThrowStatement[12549-12610]"
    }, {
      "left" : "final byte[] signature = new byte[12];",
      "right" : "final byte[] signature = new byte[12];",
      "info" : "VariableDeclarationStatement[12483-12521]:VariableDeclarationStatement[12630-12668]"
    }, {
      "left" : "in.mark(signature.length);",
      "right" : "in.mark(signature.length);",
      "info" : "ExpressionStatement[12530-12556]:ExpressionStatement[12677-12703]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[12565-15796]:TryStatement[12712-16104]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12569-15675]:Block[12716-15983]"
    }, {
      "left" : "int signatureLength = IOUtils.readFully(in, signature);",
      "right" : "int signatureLength = IOUtils.readFully(in, signature);",
      "info" : "VariableDeclarationStatement[12583-12638]:VariableDeclarationStatement[12730-12785]"
    }, {
      "left" : "in.reset();",
      "right" : "in.reset();",
      "info" : "ExpressionStatement[12651-12662]:ExpressionStatement[12798-12809]"
    }, {
      "left" : "if (ZipArchiveInputStream.matches(signature, signatureLength))",
      "right" : "if (ZipArchiveInputStream.matches(signature, signatureLength))",
      "info" : "IfStatement[12675-13999]:IfStatement[12822-14307]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12738-12972]:Block[12885-13119]"
    }, {
      "left" : "if (entryEncoding != null)",
      "right" : "if (entryEncoding != null)",
      "info" : "IfStatement[12756-12958]:IfStatement[12903-13105]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12783-12875]:Block[12930-13022]"
    }, {
      "left" : "return new ZipArchiveInputStream(in, entryEncoding);",
      "right" : "return new ZipArchiveInputStream(in, entryEncoding);",
      "info" : "ReturnStatement[12805-12857]:ReturnStatement[12952-13004]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12881-12958]:Block[13028-13105]"
    }, {
      "left" : "return new ZipArchiveInputStream(in);",
      "right" : "return new ZipArchiveInputStream(in);",
      "info" : "ReturnStatement[12903-12940]:ReturnStatement[13050-13087]"
    }, {
      "left" : "if (JarArchiveInputStream.matches(signature, signatureLength))",
      "right" : "if (JarArchiveInputStream.matches(signature, signatureLength))",
      "info" : "IfStatement[12978-13999]:IfStatement[13125-14307]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13041-13275]:Block[13188-13422]"
    }, {
      "left" : "if (entryEncoding != null)",
      "right" : "if (entryEncoding != null)",
      "info" : "IfStatement[13059-13261]:IfStatement[13206-13408]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13086-13178]:Block[13233-13325]"
    }, {
      "left" : "return new JarArchiveInputStream(in, entryEncoding);",
      "right" : "return new JarArchiveInputStream(in, entryEncoding);",
      "info" : "ReturnStatement[13108-13160]:ReturnStatement[13255-13307]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13184-13261]:Block[13331-13408]"
    }, {
      "left" : "return new JarArchiveInputStream(in);",
      "right" : "return new JarArchiveInputStream(in);",
      "info" : "ReturnStatement[13206-13243]:ReturnStatement[13353-13390]"
    }, {
      "left" : "if (ArArchiveInputStream.matches(signature, signatureLength))",
      "right" : "if (ArArchiveInputStream.matches(signature, signatureLength))",
      "info" : "IfStatement[13281-13999]:IfStatement[13428-14307]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13343-13411]:Block[13490-13558]"
    }, {
      "left" : "return new ArArchiveInputStream(in);",
      "right" : "return new ArArchiveInputStream(in);",
      "info" : "ReturnStatement[13361-13397]:ReturnStatement[13508-13544]"
    }, {
      "left" : "if (CpioArchiveInputStream.matches(signature, signatureLength))",
      "right" : "if (CpioArchiveInputStream.matches(signature, signatureLength))",
      "info" : "IfStatement[13417-13999]:IfStatement[13564-14307]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13481-13717]:Block[13628-13864]"
    }, {
      "left" : "if (entryEncoding != null)",
      "right" : "if (entryEncoding != null)",
      "info" : "IfStatement[13499-13703]:IfStatement[13646-13850]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13526-13619]:Block[13673-13766]"
    }, {
      "left" : "return new CpioArchiveInputStream(in, entryEncoding);",
      "right" : "return new CpioArchiveInputStream(in, entryEncoding);",
      "info" : "ReturnStatement[13548-13601]:ReturnStatement[13695-13748]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13625-13703]:Block[13772-13850]"
    }, {
      "left" : "return new CpioArchiveInputStream(in);",
      "right" : "return new CpioArchiveInputStream(in);",
      "info" : "ReturnStatement[13647-13685]:ReturnStatement[13794-13832]"
    }, {
      "left" : "if (ArjArchiveInputStream.matches(signature, signatureLength))",
      "right" : "if (ArjArchiveInputStream.matches(signature, signatureLength))",
      "info" : "IfStatement[13723-13999]:IfStatement[13870-14307]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13786-13859]:Block[13933-14167]"
    }, {
      "left" : "return new ArjArchiveInputStream(in);",
      "right" : "return new ArjArchiveInputStream(in);",
      "info" : "ReturnStatement[13808-13845]:ReturnStatement[14098-14135]"
    }, {
      "left" : "if (SevenZFile.matches(signature, signatureLength))",
      "right" : "if (SevenZFile.matches(signature, signatureLength))",
      "info" : "IfStatement[13865-13999]:IfStatement[14173-14307]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13917-13999]:Block[14225-14307]"
    }, {
      "left" : "throw new StreamingNotSupportedException(SEVEN_Z);",
      "right" : "throw new StreamingNotSupportedException(SEVEN_Z);",
      "info" : "ThrowStatement[13935-13985]:ThrowStatement[14243-14293]"
    }, {
      "left" : "final byte[] dumpsig = new byte[32];",
      "right" : "final byte[] dumpsig = new byte[32];",
      "info" : "VariableDeclarationStatement[14079-14115]:VariableDeclarationStatement[14387-14423]"
    }, {
      "left" : "in.mark(dumpsig.length);",
      "right" : "in.mark(dumpsig.length);",
      "info" : "ExpressionStatement[14128-14152]:ExpressionStatement[14436-14460]"
    }, {
      "left" : "signatureLength = IOUtils.readFully(in, dumpsig);",
      "right" : "signatureLength = IOUtils.readFully(in, dumpsig);",
      "info" : "ExpressionStatement[14165-14214]:ExpressionStatement[14473-14522]"
    }, {
      "left" : "in.reset();",
      "right" : "in.reset();",
      "info" : "ExpressionStatement[14227-14238]:ExpressionStatement[14535-14546]"
    }, {
      "left" : "if (DumpArchiveInputStream.matches(dumpsig, signatureLength))",
      "right" : "if (DumpArchiveInputStream.matches(dumpsig, signatureLength))",
      "info" : "IfStatement[14251-14398]:IfStatement[14559-14706]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14313-14398]:Block[14621-14706]"
    }, {
      "left" : "return new DumpArchiveInputStream(in, entryEncoding);",
      "right" : "return new DumpArchiveInputStream(in, entryEncoding);",
      "info" : "ReturnStatement[14331-14384]:ReturnStatement[14639-14692]"
    }, {
      "left" : "final byte[] tarheader = new byte[512];",
      "right" : "final byte[] tarheader = new byte[512];",
      "info" : "VariableDeclarationStatement[14504-14543]:VariableDeclarationStatement[14812-14851]"
    }, {
      "left" : "in.mark(tarheader.length);",
      "right" : "in.mark(tarheader.length);",
      "info" : "ExpressionStatement[14556-14582]:ExpressionStatement[14864-14890]"
    }, {
      "left" : "signatureLength = IOUtils.readFully(in, tarheader);",
      "right" : "signatureLength = IOUtils.readFully(in, tarheader);",
      "info" : "ExpressionStatement[14595-14646]:ExpressionStatement[14903-14954]"
    }, {
      "left" : "in.reset();",
      "right" : "in.reset();",
      "info" : "ExpressionStatement[14659-14670]:ExpressionStatement[14967-14978]"
    }, {
      "left" : "if (TarArchiveInputStream.matches(tarheader, signatureLength))",
      "right" : "if (TarArchiveInputStream.matches(tarheader, signatureLength))",
      "info" : "IfStatement[14683-14830]:IfStatement[14991-15138]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14746-14830]:Block[15054-15138]"
    }, {
      "left" : "return new TarArchiveInputStream(in, entryEncoding);",
      "right" : "return new TarArchiveInputStream(in, entryEncoding);",
      "info" : "ReturnStatement[14764-14816]:ReturnStatement[15072-15124]"
    }, {
      "left" : "if (signatureLength >= 512)",
      "right" : "if (signatureLength >= 512)",
      "info" : "IfStatement[14898-15665]:IfStatement[15206-15973]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14926-15665]:Block[15234-15973]"
    }, {
      "left" : "TarArchiveInputStream tais = null;",
      "right" : "TarArchiveInputStream tais = null;",
      "info" : "VariableDeclarationStatement[14944-14978]:VariableDeclarationStatement[15252-15286]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[14995-15651]:TryStatement[15303-15959]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14999-15333]:Block[15307-15641]"
    }, {
      "left" : "tais = new TarArchiveInputStream(new ByteArrayInputStream(tarheader));",
      "right" : "tais = new TarArchiveInputStream(new ByteArrayInputStream(tarheader));",
      "info" : "ExpressionStatement[15021-15091]:ExpressionStatement[15329-15399]"
    }, {
      "left" : "if (tais.getNextTarEntry().isCheckSumOK())",
      "right" : "if (tais.getNextTarEntry().isCheckSumOK())",
      "info" : "IfStatement[15177-15315]:IfStatement[15485-15623]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15220-15315]:Block[15528-15623]"
    }, {
      "left" : "return new TarArchiveInputStream(in, encoding);",
      "right" : "return new TarArchiveInputStream(in, encoding);",
      "info" : "ReturnStatement[15246-15293]:ReturnStatement[15554-15601]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15354-15575]:Block[15662-15883]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15584-15651]:Block[15892-15959]"
    }, {
      "left" : "IOUtils.closeQuietly(tais);",
      "right" : "IOUtils.closeQuietly(tais);",
      "info" : "ExpressionStatement[15606-15633]:ExpressionStatement[15914-15941]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15698-15796]:Block[16006-16104]"
    }, {
      "left" : "throw new ArchiveException(\"Could not use reset and mark operations.\", e);",
      "right" : "throw new ArchiveException(\"Could not use reset and mark operations.\", e);",
      "info" : "ThrowStatement[15712-15786]:ThrowStatement[16020-16094]"
    }, {
      "left" : "throw new ArchiveException(\"No Archiver found for the stream signature\");",
      "right" : "throw new ArchiveException(\"No Archiver found for the stream signature\");",
      "info" : "ThrowStatement[15806-15879]:ThrowStatement[16114-16187]"
    } ]
  },
  "interFileMappings" : { }
}