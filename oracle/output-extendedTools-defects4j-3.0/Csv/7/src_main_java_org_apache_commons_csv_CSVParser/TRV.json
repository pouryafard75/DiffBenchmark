{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "public static CSVParser parse(final File file, final CSVFormat format) throws IOException",
      "right" : "public static CSVParser parse(final File file, final CSVFormat format) throws IOException",
      "info" : "MethodDeclaration[4431-5155]:MethodDeclaration[4456-5180]"
    }, {
      "left" : "public static CSVParser parse(final String string, final CSVFormat format) throws IOException",
      "right" : "public static CSVParser parse(final String string, final CSVFormat format) throws IOException",
      "info" : "MethodDeclaration[5161-5905]:MethodDeclaration[5186-5930]"
    }, {
      "left" : "public static CSVParser parse(final URL url, final Charset charset, final CSVFormat format) throws IOException",
      "right" : "public static CSVParser parse(final URL url, final Charset charset, final CSVFormat format) throws IOException",
      "info" : "MethodDeclaration[5911-6996]:MethodDeclaration[5936-7021]"
    }, {
      "left" : "private final CSVFormat format;",
      "right" : "private final CSVFormat format;",
      "info" : "FieldDeclaration[7061-7092]:FieldDeclaration[7086-7117]"
    }, {
      "left" : "private final Map<String, Integer> headerMap;",
      "right" : "private final Map<String, Integer> headerMap;",
      "info" : "FieldDeclaration[7098-7198]:FieldDeclaration[7123-7223]"
    }, {
      "left" : "private final Lexer lexer;",
      "right" : "private final Lexer lexer;",
      "info" : "FieldDeclaration[7204-7230]:FieldDeclaration[7229-7255]"
    }, {
      "left" : "private final List<String> record = new ArrayList<String>();",
      "right" : "private final List<String> record = new ArrayList<String>();",
      "info" : "FieldDeclaration[7236-7374]:FieldDeclaration[7261-7399]"
    }, {
      "left" : "private long recordNumber;",
      "right" : "private long recordNumber;",
      "info" : "FieldDeclaration[7380-7406]:FieldDeclaration[7405-7431]"
    }, {
      "left" : "private final Token reusableToken = new Token();",
      "right" : "private final Token reusableToken = new Token();",
      "info" : "FieldDeclaration[7412-7460]:FieldDeclaration[7437-7485]"
    }, {
      "left" : "public CSVParser(final Reader reader, final CSVFormat format) throws IOException",
      "right" : "public CSVParser(final Reader reader, final CSVFormat format) throws IOException",
      "info" : "MethodDeclaration[7466-8515]:MethodDeclaration[7491-8540]"
    }, {
      "left" : "private void addRecordValue()",
      "right" : "private void addRecordValue()",
      "info" : "MethodDeclaration[8521-8866]:MethodDeclaration[8546-8891]"
    }, {
      "left" : "public void close() throws IOException",
      "right" : "public void close() throws IOException",
      "info" : "MethodDeclaration[8872-9111]:MethodDeclaration[8897-9136]"
    }, {
      "left" : "public long getCurrentLineNumber()",
      "right" : "public long getCurrentLineNumber()",
      "info" : "MethodDeclaration[9117-9495]:MethodDeclaration[9142-9520]"
    }, {
      "left" : "public Map<String, Integer> getHeaderMap()",
      "right" : "public Map<String, Integer> getHeaderMap()",
      "info" : "MethodDeclaration[9501-9905]:MethodDeclaration[9526-9930]"
    }, {
      "left" : "public long getRecordNumber()",
      "right" : "public long getRecordNumber()",
      "info" : "MethodDeclaration[9911-10268]:MethodDeclaration[9936-10293]"
    }, {
      "left" : "public List<CSVRecord> getRecords() throws IOException",
      "right" : "public List<CSVRecord> getRecords() throws IOException",
      "info" : "MethodDeclaration[10274-10805]:MethodDeclaration[10299-10830]"
    }, {
      "left" : "public <T extends Collection<CSVRecord>> T getRecords(T records) throws IOException",
      "right" : "public <T extends Collection<CSVRecord>> T getRecords(T records) throws IOException",
      "info" : "MethodDeclaration[10811-11581]:MethodDeclaration[10836-11606]"
    }, {
      "left" : "public boolean isClosed()",
      "right" : "public boolean isClosed()",
      "info" : "MethodDeclaration[12797-12868]:MethodDeclaration[13025-13096]"
    }, {
      "left" : "public Iterator<CSVRecord> iterator()",
      "right" : "public Iterator<CSVRecord> iterator()",
      "info" : "MethodDeclaration[12874-14663]:MethodDeclaration[13102-14891]"
    }, {
      "left" : "private CSVRecord current;",
      "right" : "private CSVRecord current;",
      "info" : "FieldDeclaration[13235-13261]:FieldDeclaration[13463-13489]"
    }, {
      "left" : "private CSVRecord getNextRecord()",
      "right" : "private CSVRecord getNextRecord()",
      "info" : "MethodDeclaration[13275-13589]:MethodDeclaration[13503-13817]"
    }, {
      "left" : "public boolean hasNext()",
      "right" : "public boolean hasNext()",
      "info" : "MethodDeclaration[13603-13909]:MethodDeclaration[13831-14137]"
    }, {
      "left" : "public CSVRecord next()",
      "right" : "public CSVRecord next()",
      "info" : "MethodDeclaration[13923-14537]:MethodDeclaration[14151-14765]"
    }, {
      "left" : "public void remove()",
      "right" : "public void remove()",
      "info" : "MethodDeclaration[14551-14646]:MethodDeclaration[14779-14874]"
    }, {
      "left" : "CSVRecord nextRecord() throws IOException",
      "right" : "CSVRecord nextRecord() throws IOException",
      "info" : "MethodDeclaration[14669-16628]:MethodDeclaration[14897-16856]"
    } ],
    "mappings" : [
 {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[4909-4915]:Modifier[4934-4940]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[4916-4922]:Modifier[4941-4947]"
    }, {
      "left" : "CSVParser",
      "right" : "CSVParser",
      "info" : "SimpleType[4923-4932]:SimpleType[4948-4957]"
    }, {
      "left" : "parse",
      "right" : "parse",
      "info" : "SimpleName[4933-4938]:SimpleName[4958-4963]"
    }, {
      "left" : "final File file",
      "right" : "final File file",
      "info" : "SingleVariableDeclaration[4939-4954]:SingleVariableDeclaration[4964-4979]"
    }, {
      "left" : "final CSVFormat format",
      "right" : "final CSVFormat format",
      "info" : "SingleVariableDeclaration[4956-4978]:SingleVariableDeclaration[4981-5003]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[4987-4998]:SimpleType[5012-5023]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4999-5155]:Block[5024-5180]"
    }, {
      "left" : "Assertions.notNull(file, \"file\");",
      "right" : "Assertions.notNull(file, \"file\");",
      "info" : "ExpressionStatement[5009-5042]:ExpressionStatement[5034-5067]"
    }, {
      "left" : "Assertions.notNull(format, \"format\");",
      "right" : "Assertions.notNull(format, \"format\");",
      "info" : "ExpressionStatement[5051-5088]:ExpressionStatement[5076-5113]"
    }, {
      "left" : "return new CSVParser(new FileReader(file), format);",
      "right" : "return new CSVParser(new FileReader(file), format);",
      "info" : "ReturnStatement[5098-5149]:ReturnStatement[5123-5174]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[5647-5653]:Modifier[5672-5678]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[5654-5660]:Modifier[5679-5685]"
    }, {
      "left" : "CSVParser",
      "right" : "CSVParser",
      "info" : "SimpleType[5661-5670]:SimpleType[5686-5695]"
    }, {
      "left" : "parse",
      "right" : "parse",
      "info" : "SimpleName[5671-5676]:SimpleName[5696-5701]"
    }, {
      "left" : "final String string",
      "right" : "final String string",
      "info" : "SingleVariableDeclaration[5677-5696]:SingleVariableDeclaration[5702-5721]"
    }, {
      "left" : "final CSVFormat format",
      "right" : "final CSVFormat format",
      "info" : "SingleVariableDeclaration[5698-5720]:SingleVariableDeclaration[5723-5745]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[5729-5740]:SimpleType[5754-5765]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5741-5905]:Block[5766-5930]"
    }, {
      "left" : "Assertions.notNull(string, \"string\");",
      "right" : "Assertions.notNull(string, \"string\");",
      "info" : "ExpressionStatement[5751-5788]:ExpressionStatement[5776-5813]"
    }, {
      "left" : "Assertions.notNull(format, \"format\");",
      "right" : "Assertions.notNull(format, \"format\");",
      "info" : "ExpressionStatement[5797-5834]:ExpressionStatement[5822-5859]"
    }, {
      "left" : "return new CSVParser(new StringReader(string), format);",
      "right" : "return new CSVParser(new StringReader(string), format);",
      "info" : "ReturnStatement[5844-5899]:ReturnStatement[5869-5924]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[6655-6661]:Modifier[6680-6686]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[6662-6668]:Modifier[6687-6693]"
    }, {
      "left" : "CSVParser",
      "right" : "CSVParser",
      "info" : "SimpleType[6669-6678]:SimpleType[6694-6703]"
    }, {
      "left" : "parse",
      "right" : "parse",
      "info" : "SimpleName[6679-6684]:SimpleName[6704-6709]"
    }, {
      "left" : "final URL url",
      "right" : "final URL url",
      "info" : "SingleVariableDeclaration[6685-6698]:SingleVariableDeclaration[6710-6723]"
    }, {
      "left" : "final Charset charset",
      "right" : "final Charset charset",
      "info" : "SingleVariableDeclaration[6700-6721]:SingleVariableDeclaration[6725-6746]"
    }, {
      "left" : "final CSVFormat format",
      "right" : "final CSVFormat format",
      "info" : "SingleVariableDeclaration[6723-6745]:SingleVariableDeclaration[6748-6770]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[6754-6765]:SimpleType[6779-6790]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6766-6996]:Block[6791-7021]"
    }, {
      "left" : "Assertions.notNull(url, \"url\");",
      "right" : "Assertions.notNull(url, \"url\");",
      "info" : "ExpressionStatement[6776-6807]:ExpressionStatement[6801-6832]"
    }, {
      "left" : "Assertions.notNull(charset, \"charset\");",
      "right" : "Assertions.notNull(charset, \"charset\");",
      "info" : "ExpressionStatement[6816-6855]:ExpressionStatement[6841-6880]"
    }, {
      "left" : "Assertions.notNull(format, \"format\");",
      "right" : "Assertions.notNull(format, \"format\");",
      "info" : "ExpressionStatement[6864-6901]:ExpressionStatement[6889-6926]"
    }, {
      "left" : "return new CSVParser(new InputStreamReader(url.openStream(), charset), format);",
      "right" : "return new CSVParser(new InputStreamReader(url.openStream(), charset), format);",
      "info" : "ReturnStatement[6911-6990]:ReturnStatement[6936-7015]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[8151-8157]:Modifier[8176-8182]"
    }, {
      "left" : "CSVParser",
      "right" : "CSVParser",
      "info" : "SimpleName[8158-8167]:SimpleName[8183-8192]"
    }, {
      "left" : "final Reader reader",
      "right" : "final Reader reader",
      "info" : "SingleVariableDeclaration[8168-8187]:SingleVariableDeclaration[8193-8212]"
    }, {
      "left" : "final CSVFormat format",
      "right" : "final CSVFormat format",
      "info" : "SingleVariableDeclaration[8189-8211]:SingleVariableDeclaration[8214-8236]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[8220-8231]:SimpleType[8245-8256]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8232-8515]:Block[8257-8540]"
    }, {
      "left" : "Assertions.notNull(reader, \"reader\");",
      "right" : "Assertions.notNull(reader, \"reader\");",
      "info" : "ExpressionStatement[8242-8279]:ExpressionStatement[8267-8304]"
    }, {
      "left" : "Assertions.notNull(format, \"format\");",
      "right" : "Assertions.notNull(format, \"format\");",
      "info" : "ExpressionStatement[8288-8325]:ExpressionStatement[8313-8350]"
    }, {
      "left" : "format.validate();",
      "right" : "format.validate();",
      "info" : "ExpressionStatement[8335-8353]:ExpressionStatement[8360-8378]"
    }, {
      "left" : "this.format = format;",
      "right" : "this.format = format;",
      "info" : "ExpressionStatement[8362-8383]:ExpressionStatement[8387-8408]"
    }, {
      "left" : "this.lexer = new Lexer(format, new ExtendedBufferedReader(reader));",
      "right" : "this.lexer = new Lexer(format, new ExtendedBufferedReader(reader));",
      "info" : "ExpressionStatement[8392-8459]:ExpressionStatement[8417-8484]"
    }, {
      "left" : "this.headerMap = this.initializeHeader();",
      "right" : "this.headerMap = this.initializeHeader();",
      "info" : "ExpressionStatement[8468-8509]:ExpressionStatement[8493-8534]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[8521-8528]:Modifier[8546-8553]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[8529-8533]:PrimitiveType[8554-8558]"
    }, {
      "left" : "addRecordValue",
      "right" : "addRecordValue",
      "info" : "SimpleName[8534-8548]:SimpleName[8559-8573]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8551-8866]:Block[8576-8891]"
    }, {
      "left" : "final String input = this.reusableToken.content.toString();",
      "right" : "final String input = this.reusableToken.content.toString();",
      "info" : "VariableDeclarationStatement[8561-8620]:VariableDeclarationStatement[8586-8645]"
    }, {
      "left" : "final String nullString = this.format.getNullString();",
      "right" : "final String nullString = this.format.getNullString();",
      "info" : "VariableDeclarationStatement[8629-8683]:VariableDeclarationStatement[8654-8708]"
    }, {
      "left" : "if (nullString == null)",
      "right" : "if (nullString == null)",
      "info" : "IfStatement[8692-8860]:IfStatement[8717-8885]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8716-8763]:Block[8741-8788]"
    }, {
      "left" : "this.record.add(input);",
      "right" : "this.record.add(input);",
      "info" : "ExpressionStatement[8730-8753]:ExpressionStatement[8755-8778]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8769-8860]:Block[8794-8885]"
    }, {
      "left" : "this.record.add(input.equalsIgnoreCase(nullString) ? null : input);",
      "right" : "this.record.add(input.equalsIgnoreCase(nullString) ? null : input);",
      "info" : "ExpressionStatement[8783-8850]:ExpressionStatement[8808-8875]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[8989-8995]:Modifier[9014-9020]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[8996-9000]:PrimitiveType[9021-9025]"
    }, {
      "left" : "close",
      "right" : "close",
      "info" : "SimpleName[9001-9006]:SimpleName[9026-9031]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[9016-9027]:SimpleType[9041-9052]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9028-9111]:Block[9053-9136]"
    }, {
      "left" : "if (this.lexer != null)",
      "right" : "if (this.lexer != null)",
      "info" : "IfStatement[9038-9105]:IfStatement[9063-9130]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9062-9105]:Block[9087-9130]"
    }, {
      "left" : "this.lexer.close();",
      "right" : "this.lexer.close();",
      "info" : "ExpressionStatement[9076-9095]:ExpressionStatement[9101-9120]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[9403-9409]:Modifier[9428-9434]"
    }, {
      "left" : "long",
      "right" : "long",
      "info" : "PrimitiveType[9410-9414]:PrimitiveType[9435-9439]"
    }, {
      "left" : "getCurrentLineNumber",
      "right" : "getCurrentLineNumber",
      "info" : "SimpleName[9415-9435]:SimpleName[9440-9460]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9438-9495]:Block[9463-9520]"
    }, {
      "left" : "return this.lexer.getCurrentLineNumber();",
      "right" : "return this.lexer.getCurrentLineNumber();",
      "info" : "ReturnStatement[9448-9489]:ReturnStatement[9473-9514]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[9756-9762]:Modifier[9781-9787]"
    }, {
      "left" : "Map<String, Integer>",
      "right" : "Map<String, Integer>",
      "info" : "ParameterizedType[9763-9783]:ParameterizedType[9788-9808]"
    }, {
      "left" : "getHeaderMap",
      "right" : "getHeaderMap",
      "info" : "SimpleName[9784-9796]:SimpleName[9809-9821]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9799-9905]:Block[9824-9930]"
    }, {
      "left" : "return this.headerMap == null ? null : new LinkedHashMap<String, Integer>(this.headerMap);",
      "right" : "return this.headerMap == null ? null : new LinkedHashMap<String, Integer>(this.headerMap);",
      "info" : "ReturnStatement[9809-9899]:ReturnStatement[9834-9924]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[10197-10203]:Modifier[10222-10228]"
    }, {
      "left" : "long",
      "right" : "long",
      "info" : "PrimitiveType[10204-10208]:PrimitiveType[10229-10233]"
    }, {
      "left" : "getRecordNumber",
      "right" : "getRecordNumber",
      "info" : "SimpleName[10209-10224]:SimpleName[10234-10249]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10227-10268]:Block[10252-10293]"
    }, {
      "left" : "return this.recordNumber;",
      "right" : "return this.recordNumber;",
      "info" : "ReturnStatement[10237-10262]:ReturnStatement[10262-10287]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[10688-10694]:Modifier[10713-10719]"
    }, {
      "left" : "List<CSVRecord>",
      "right" : "List<CSVRecord>",
      "info" : "ParameterizedType[10695-10710]:ParameterizedType[10720-10735]"
    }, {
      "left" : "getRecords",
      "right" : "getRecords",
      "info" : "SimpleName[10711-10721]:SimpleName[10736-10746]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[10731-10742]:SimpleType[10756-10767]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10743-10805]:Block[10768-10830]"
    }, {
      "left" : "return getRecords(new ArrayList<CSVRecord>());",
      "right" : "return getRecords(new ArrayList<CSVRecord>());",
      "info" : "ReturnStatement[10753-10799]:ReturnStatement[10778-10824]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[11351-11357]:Modifier[11376-11382]"
    }, {
      "left" : "T extends Collection<CSVRecord>",
      "right" : "T extends Collection<CSVRecord>",
      "info" : "TypeParameter[11359-11390]:TypeParameter[11384-11415]"
    }, {
      "left" : "T",
      "right" : "T",
      "info" : "SimpleType[11392-11393]:SimpleType[11417-11418]"
    }, {
      "left" : "getRecords",
      "right" : "getRecords",
      "info" : "SimpleName[11394-11404]:SimpleName[11419-11429]"
    }, {
      "left" : "T records",
      "right" : "T records",
      "info" : "SingleVariableDeclaration[11405-11414]:SingleVariableDeclaration[11430-11439]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[11423-11434]:SimpleType[11448-11459]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11435-11581]:Block[11460-11606]"
    }, {
      "left" : "CSVRecord rec;",
      "right" : "CSVRecord rec;",
      "info" : "VariableDeclarationStatement[11445-11459]:VariableDeclarationStatement[11470-11484]"
    }, {
      "left" : "while ((rec = this.nextRecord()) != null)",
      "right" : "while ((rec = this.nextRecord()) != null)",
      "info" : "WhileStatement[11468-11551]:WhileStatement[11493-11576]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11510-11551]:Block[11535-11576]"
    }, {
      "left" : "records.add(rec);",
      "right" : "records.add(rec);",
      "info" : "ExpressionStatement[11524-11541]:ExpressionStatement[11549-11566]"
    }, {
      "left" : "return records;",
      "right" : "return records;",
      "info" : "ReturnStatement[11560-11575]:ReturnStatement[11585-11600]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[12797-12803]:Modifier[13025-13031]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[12804-12811]:PrimitiveType[13032-13039]"
    }, {
      "left" : "isClosed",
      "right" : "isClosed",
      "info" : "SimpleName[12812-12820]:SimpleName[13040-13048]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12823-12868]:Block[13051-13096]"
    }, {
      "left" : "return this.lexer.isClosed();",
      "right" : "return this.lexer.isClosed();",
      "info" : "ReturnStatement[12833-12862]:ReturnStatement[13061-13090]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[13140-13146]:Modifier[13368-13374]"
    }, {
      "left" : "Iterator<CSVRecord>",
      "right" : "Iterator<CSVRecord>",
      "info" : "ParameterizedType[13147-13166]:ParameterizedType[13375-13394]"
    }, {
      "left" : "iterator",
      "right" : "iterator",
      "info" : "SimpleName[13167-13175]:SimpleName[13395-13403]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13178-14663]:Block[13406-14891]"
    }, {
      "left" : "return new Iterator<CSVRecord>() {\n            private CSVRecord current;\n\n            private CSVRecord getNextRecord() {\n                try {\n                    return CSVParser.this.nextRecord();\n                } catch (final IOException e) {\n                    // TODO: This is not great, throw an ISE instead?\n                    throw new RuntimeException(e);\n                }\n            }\n\n            public boolean hasNext() {\n                if (CSVParser.this.isClosed()) {\n                    return false;\n                }\n                if (this.current == null) {\n                    this.current = this.getNextRecord();\n                }\n\n                return this.current != null;\n            }\n\n            public CSVRecord next() {\n                if (CSVParser.this.isClosed()) {\n                    throw new NoSuchElementException(\"CSVParser has been closed\");\n                }\n                CSVRecord next = this.current;\n                this.current = null;\n\n                if (next == null) {\n                    // hasNext() wasn't called before\n                    next = this.getNextRecord();\n                    if (next == null) {\n                        throw new NoSuchElementException(\"No more CSV records available\");\n                    }\n                }\n\n                return next;\n            }\n\n            public void remove() {\n                throw new UnsupportedOperationException();\n            }\n        };",
      "right" : "return new Iterator<CSVRecord>() {\n            private CSVRecord current;\n\n            private CSVRecord getNextRecord() {\n                try {\n                    return CSVParser.this.nextRecord();\n                } catch (final IOException e) {\n                    // TODO: This is not great, throw an ISE instead?\n                    throw new RuntimeException(e);\n                }\n            }\n\n            public boolean hasNext() {\n                if (CSVParser.this.isClosed()) {\n                    return false;\n                }\n                if (this.current == null) {\n                    this.current = this.getNextRecord();\n                }\n\n                return this.current != null;\n            }\n\n            public CSVRecord next() {\n                if (CSVParser.this.isClosed()) {\n                    throw new NoSuchElementException(\"CSVParser has been closed\");\n                }\n                CSVRecord next = this.current;\n                this.current = null;\n\n                if (next == null) {\n                    // hasNext() wasn't called before\n                    next = this.getNextRecord();\n                    if (next == null) {\n                        throw new NoSuchElementException(\"No more CSV records available\");\n                    }\n                }\n\n                return next;\n            }\n\n            public void remove() {\n                throw new UnsupportedOperationException();\n            }\n        };",
      "info" : "ReturnStatement[13188-14657]:ReturnStatement[13416-14885]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[13275-13282]:Modifier[13503-13510]"
    }, {
      "left" : "CSVRecord",
      "right" : "CSVRecord",
      "info" : "SimpleType[13283-13292]:SimpleType[13511-13520]"
    }, {
      "left" : "getNextRecord",
      "right" : "getNextRecord",
      "info" : "SimpleName[13293-13306]:SimpleName[13521-13534]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13309-13589]:Block[13537-13817]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[13327-13575]:TryStatement[13555-13803]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13331-13406]:Block[13559-13634]"
    }, {
      "left" : "return CSVParser.this.nextRecord();",
      "right" : "return CSVParser.this.nextRecord();",
      "info" : "ReturnStatement[13353-13388]:ReturnStatement[13581-13616]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13435-13575]:Block[13663-13803]"
    }, {
      "left" : "throw new RuntimeException(e);",
      "right" : "throw new RuntimeException(e);",
      "info" : "ThrowStatement[13527-13557]:ThrowStatement[13755-13785]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[13603-13609]:Modifier[13831-13837]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[13610-13617]:PrimitiveType[13838-13845]"
    }, {
      "left" : "hasNext",
      "right" : "hasNext",
      "info" : "SimpleName[13618-13625]:SimpleName[13846-13853]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13628-13909]:Block[13856-14137]"
    }, {
      "left" : "if (CSVParser.this.isClosed())",
      "right" : "if (CSVParser.this.isClosed())",
      "info" : "IfStatement[13646-13730]:IfStatement[13874-13958]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13677-13730]:Block[13905-13958]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[13699-13712]:ReturnStatement[13927-13940]"
    }, {
      "left" : "if (this.current == null)",
      "right" : "if (this.current == null)",
      "info" : "IfStatement[13747-13849]:IfStatement[13975-14077]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13773-13849]:Block[14001-14077]"
    }, {
      "left" : "this.current = this.getNextRecord();",
      "right" : "this.current = this.getNextRecord();",
      "info" : "ExpressionStatement[13795-13831]:ExpressionStatement[14023-14059]"
    }, {
      "left" : "return this.current != null;",
      "right" : "return this.current != null;",
      "info" : "ReturnStatement[13867-13895]:ReturnStatement[14095-14123]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[13923-13929]:Modifier[14151-14157]"
    }, {
      "left" : "CSVRecord",
      "right" : "CSVRecord",
      "info" : "SimpleType[13930-13939]:SimpleType[14158-14167]"
    }, {
      "left" : "next",
      "right" : "next",
      "info" : "SimpleName[13940-13944]:SimpleName[14168-14172]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13947-14537]:Block[14175-14765]"
    }, {
      "left" : "if (CSVParser.this.isClosed())",
      "right" : "if (CSVParser.this.isClosed())",
      "info" : "IfStatement[13965-14098]:IfStatement[14193-14326]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13996-14098]:Block[14224-14326]"
    }, {
      "left" : "throw new NoSuchElementException(\"CSVParser has been closed\");",
      "right" : "throw new NoSuchElementException(\"CSVParser has been closed\");",
      "info" : "ThrowStatement[14018-14080]:ThrowStatement[14246-14308]"
    }, {
      "left" : "CSVRecord next = this.current;",
      "right" : "CSVRecord next = this.current;",
      "info" : "VariableDeclarationStatement[14115-14145]:VariableDeclarationStatement[14343-14373]"
    }, {
      "left" : "this.current = null;",
      "right" : "this.current = null;",
      "info" : "ExpressionStatement[14162-14182]:ExpressionStatement[14390-14410]"
    }, {
      "left" : "if (next == null)",
      "right" : "if (next == null)",
      "info" : "IfStatement[14200-14493]:IfStatement[14428-14721]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14218-14493]:Block[14446-14721]"
    }, {
      "left" : "next = this.getNextRecord();",
      "right" : "next = this.getNextRecord();",
      "info" : "ExpressionStatement[14294-14322]:ExpressionStatement[14522-14550]"
    }, {
      "left" : "if (next == null)",
      "right" : "if (next == null)",
      "info" : "IfStatement[14343-14475]:IfStatement[14571-14703]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14361-14475]:Block[14589-14703]"
    }, {
      "left" : "throw new NoSuchElementException(\"No more CSV records available\");",
      "right" : "throw new NoSuchElementException(\"No more CSV records available\");",
      "info" : "ThrowStatement[14387-14453]:ThrowStatement[14615-14681]"
    }, {
      "left" : "return next;",
      "right" : "return next;",
      "info" : "ReturnStatement[14511-14523]:ReturnStatement[14739-14751]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[14551-14557]:Modifier[14779-14785]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[14558-14562]:PrimitiveType[14786-14790]"
    }, {
      "left" : "remove",
      "right" : "remove",
      "info" : "SimpleName[14563-14569]:SimpleName[14791-14797]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14572-14646]:Block[14800-14874]"
    }, {
      "left" : "throw new UnsupportedOperationException();",
      "right" : "throw new UnsupportedOperationException();",
      "info" : "ThrowStatement[14590-14632]:ThrowStatement[14818-14860]"
    }, {
      "left" : "CSVRecord",
      "right" : "CSVRecord",
      "info" : "SimpleType[14951-14960]:SimpleType[15179-15188]"
    }, {
      "left" : "nextRecord",
      "right" : "nextRecord",
      "info" : "SimpleName[14961-14971]:SimpleName[15189-15199]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[14981-14992]:SimpleType[15209-15220]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14993-16628]:Block[15221-16856]"
    }, {
      "left" : "CSVRecord result = null;",
      "right" : "CSVRecord result = null;",
      "info" : "VariableDeclarationStatement[15003-15027]:VariableDeclarationStatement[15231-15255]"
    }, {
      "left" : "this.record.clear();",
      "right" : "this.record.clear();",
      "info" : "ExpressionStatement[15036-15056]:ExpressionStatement[15264-15284]"
    }, {
      "left" : "StringBuilder sb = null;",
      "right" : "StringBuilder sb = null;",
      "info" : "VariableDeclarationStatement[15065-15089]:VariableDeclarationStatement[15293-15317]"
    }, {
      "left" : "do{...}",
      "right" : "do{...}",
      "info" : "DoStatement[15098-16294]:DoStatement[15326-16522]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15101-16252]:Block[15329-16480]"
    }, {
      "left" : "this.reusableToken.reset();",
      "right" : "this.reusableToken.reset();",
      "info" : "ExpressionStatement[15115-15142]:ExpressionStatement[15343-15370]"
    }, {
      "left" : "this.lexer.nextToken(this.reusableToken);",
      "right" : "this.lexer.nextToken(this.reusableToken);",
      "info" : "ExpressionStatement[15155-15196]:ExpressionStatement[15383-15424]"
    }, {
      "left" : "switch (this.reusableToken.type) {\n            case TOKEN:\n                this.addRecordValue();\n                break;\n            case EORECORD:\n                this.addRecordValue();\n                break;\n            case EOF:\n                if (this.reusableToken.isReady) {\n                    this.addRecordValue();\n                }\n                break;\n            case INVALID:\n                throw new IOException(\"(line \" + this.getCurrentLineNumber() + \") invalid parse sequence\");\n            case COMMENT: // Ignored currently\n                if (sb == null) { // first comment for this record\n                    sb = new StringBuilder();\n                } else {\n                    sb.append(Constants.LF);\n                }\n                sb.append(this.reusableToken.content);\n                this.reusableToken.type = TOKEN; // Read another token\n                break;\n            default:\n                throw new IllegalStateException(\"Unexpected Token type: \" + this.reusableToken.type);\n            }",
      "right" : "switch (this.reusableToken.type) {\n            case TOKEN:\n                this.addRecordValue();\n                break;\n            case EORECORD:\n                this.addRecordValue();\n                break;\n            case EOF:\n                if (this.reusableToken.isReady) {\n                    this.addRecordValue();\n                }\n                break;\n            case INVALID:\n                throw new IOException(\"(line \" + this.getCurrentLineNumber() + \") invalid parse sequence\");\n            case COMMENT: // Ignored currently\n                if (sb == null) { // first comment for this record\n                    sb = new StringBuilder();\n                } else {\n                    sb.append(Constants.LF);\n                }\n                sb.append(this.reusableToken.content);\n                this.reusableToken.type = TOKEN; // Read another token\n                break;\n            default:\n                throw new IllegalStateException(\"Unexpected Token type: \" + this.reusableToken.type);\n            }",
      "info" : "SwitchStatement[15209-16242]:SwitchStatement[15437-16470]"
    }, {
      "left" : "case TOKEN:",
      "right" : "case TOKEN:",
      "info" : "SwitchCase[15256-15267]:SwitchCase[15484-15495]"
    }, {
      "left" : "this.addRecordValue();",
      "right" : "this.addRecordValue();",
      "info" : "ExpressionStatement[15284-15306]:ExpressionStatement[15512-15534]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[15323-15329]:BreakStatement[15551-15557]"
    }, {
      "left" : "case EORECORD:",
      "right" : "case EORECORD:",
      "info" : "SwitchCase[15342-15356]:SwitchCase[15570-15584]"
    }, {
      "left" : "this.addRecordValue();",
      "right" : "this.addRecordValue();",
      "info" : "ExpressionStatement[15373-15395]:ExpressionStatement[15601-15623]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[15412-15418]:BreakStatement[15640-15646]"
    }, {
      "left" : "case EOF:",
      "right" : "case EOF:",
      "info" : "SwitchCase[15431-15440]:SwitchCase[15659-15668]"
    }, {
      "left" : "if (this.reusableToken.isReady)",
      "right" : "if (this.reusableToken.isReady)",
      "info" : "IfStatement[15457-15551]:IfStatement[15685-15779]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15489-15551]:Block[15717-15779]"
    }, {
      "left" : "this.addRecordValue();",
      "right" : "this.addRecordValue();",
      "info" : "ExpressionStatement[15511-15533]:ExpressionStatement[15739-15761]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[15568-15574]:BreakStatement[15796-15802]"
    }, {
      "left" : "case INVALID:",
      "right" : "case INVALID:",
      "info" : "SwitchCase[15587-15600]:SwitchCase[15815-15828]"
    }, {
      "left" : "throw new IOException(\"(line \" + this.getCurrentLineNumber() + \") invalid parse sequence\");",
      "right" : "throw new IOException(\"(line \" + this.getCurrentLineNumber() + \") invalid parse sequence\");",
      "info" : "ThrowStatement[15617-15708]:ThrowStatement[15845-15936]"
    }, {
      "left" : "case COMMENT:",
      "right" : "case COMMENT:",
      "info" : "SwitchCase[15721-15734]:SwitchCase[15949-15962]"
    }, {
      "left" : "if (sb == null)",
      "right" : "if (sb == null)",
      "info" : "IfStatement[15772-15956]:IfStatement[16000-16184]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15788-15886]:Block[16016-16114]"
    }, {
      "left" : "sb = new StringBuilder();",
      "right" : "sb = new StringBuilder();",
      "info" : "ExpressionStatement[15843-15868]:ExpressionStatement[16071-16096]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15892-15956]:Block[16120-16184]"
    }, {
      "left" : "sb.append(Constants.LF);",
      "right" : "sb.append(Constants.LF);",
      "info" : "ExpressionStatement[15914-15938]:ExpressionStatement[16142-16166]"
    }, {
      "left" : "sb.append(this.reusableToken.content);",
      "right" : "sb.append(this.reusableToken.content);",
      "info" : "ExpressionStatement[15973-16011]:ExpressionStatement[16201-16239]"
    }, {
      "left" : "this.reusableToken.type = TOKEN;",
      "right" : "this.reusableToken.type = TOKEN;",
      "info" : "ExpressionStatement[16028-16060]:ExpressionStatement[16256-16288]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[16099-16105]:BreakStatement[16327-16333]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[16118-16126]:SwitchCase[16346-16354]"
    }, {
      "left" : "throw new IllegalStateException(\"Unexpected Token type: \" + this.reusableToken.type);",
      "right" : "throw new IllegalStateException(\"Unexpected Token type: \" + this.reusableToken.type);",
      "info" : "ThrowStatement[16143-16228]:ThrowStatement[16371-16456]"
    }, {
      "left" : "if (!this.record.isEmpty())",
      "right" : "if (!this.record.isEmpty())",
      "info" : "IfStatement[16304-16599]:IfStatement[16532-16827]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16332-16599]:Block[16560-16827]"
    }, {
      "left" : "this.recordNumber++;",
      "right" : "this.recordNumber++;",
      "info" : "ExpressionStatement[16346-16366]:ExpressionStatement[16574-16594]"
    }, {
      "left" : "final String comment = sb == null ? null : sb.toString();",
      "right" : "final String comment = sb == null ? null : sb.toString();",
      "info" : "VariableDeclarationStatement[16379-16436]:VariableDeclarationStatement[16607-16664]"
    }, {
      "left" : "result = new CSVRecord(this.record.toArray(new String[this.record.size()]), this.headerMap, comment,\n                    this.recordNumber);",
      "right" : "result = new CSVRecord(this.record.toArray(new String[this.record.size()]), this.headerMap, comment,\n                    this.recordNumber);",
      "info" : "ExpressionStatement[16449-16589]:ExpressionStatement[16677-16817]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[16608-16622]:ReturnStatement[16836-16850]"
    } ]
  },
  "interFileMappings" : { }
}