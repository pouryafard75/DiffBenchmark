{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "CommandLineRunner",
      "right" : "CommandLineRunner",
      "info" : "TypeDeclaration[1491-21656]:TypeDeclaration[1491-21621]"
    }, {
      "left" : "Flags",
      "right" : "Flags",
      "info" : "TypeDeclaration[2655-13866]:TypeDeclaration[2655-13866]"
    }, {
      "left" : "@Option(name = \"--help\",\n        usage = \"Displays this message\")\n    private boolean display_help = false;",
      "right" : "@Option(name = \"--help\",\n        usage = \"Displays this message\")\n    private boolean display_help = false;",
      "info" : "FieldDeclaration[2688-2795]:FieldDeclaration[2688-2795]"
    }, {
      "left" : "@Option(name = \"--print_tree\",\n        handler = BooleanOptionHandler.class,\n        usage = \"Prints out the parse tree and exits\")\n    private boolean print_tree = false;",
      "right" : "@Option(name = \"--print_tree\",\n        handler = BooleanOptionHandler.class,\n        usage = \"Prints out the parse tree and exits\")\n    private boolean print_tree = false;",
      "info" : "FieldDeclaration[2801-2972]:FieldDeclaration[2801-2972]"
    }, {
      "left" : "@Option(name = \"--compute_phase_ordering\",\n        handler = BooleanOptionHandler.class,\n        usage = \"Runs the compile job many times, then prints out the \" +\n        \"best phase ordering from this run\")\n    private boolean compute_phase_ordering = false;",
      "right" : "@Option(name = \"--compute_phase_ordering\",\n        handler = BooleanOptionHandler.class,\n        usage = \"Runs the compile job many times, then prints out the \" +\n        \"best phase ordering from this run\")\n    private boolean compute_phase_ordering = false;",
      "info" : "FieldDeclaration[2978-3237]:FieldDeclaration[2978-3237]"
    }, {
      "left" : "@Option(name = \"--print_ast\",\n        handler = BooleanOptionHandler.class,\n        usage = \"Prints a dot file describing the internal abstract syntax\"\n        + \" tree and exits\")\n    private boolean print_ast = false;",
      "right" : "@Option(name = \"--print_ast\",\n        handler = BooleanOptionHandler.class,\n        usage = \"Prints a dot file describing the internal abstract syntax\"\n        + \" tree and exits\")\n    private boolean print_ast = false;",
      "info" : "FieldDeclaration[3243-3462]:FieldDeclaration[3243-3462]"
    }, {
      "left" : "@Option(name = \"--print_pass_graph\",\n        usage = \"Prints a dot file describing the passes that will get run\"\n        + \" and exits\")\n    private boolean print_pass_graph = false;",
      "right" : "@Option(name = \"--print_pass_graph\",\n        usage = \"Prints a dot file describing the passes that will get run\"\n        + \" and exits\")\n    private boolean print_pass_graph = false;",
      "info" : "FieldDeclaration[3468-3650]:FieldDeclaration[3468-3650]"
    }, {
      "left" : "@Option(name = \"--jscomp_dev_mode\",\n        usage = \"Turns on extra sanity checks\",\n        aliases = {\"--dev_mode\"})\n    private CompilerOptions.DevMode jscomp_dev_mode =\n        CompilerOptions.DevMode.OFF;",
      "right" : "@Option(name = \"--jscomp_dev_mode\",\n        usage = \"Turns on extra sanity checks\",\n        aliases = {\"--dev_mode\"})\n    private CompilerOptions.DevMode jscomp_dev_mode =\n        CompilerOptions.DevMode.OFF;",
      "info" : "FieldDeclaration[3656-3864]:FieldDeclaration[3656-3864]"
    }, {
      "left" : "@Option(name = \"--logging_level\",\n        usage = \"The logging level (standard java.util.logging.Level\"\n        + \" values) for Compiler progress. Does not control errors or\"\n        + \" warnings for the JavaScript code under compilation\")\n    private String logging_level = Level.WARNING.getName();",
      "right" : "@Option(name = \"--logging_level\",\n        usage = \"The logging level (standard java.util.logging.Level\"\n        + \" values) for Compiler progress. Does not control errors or\"\n        + \" warnings for the JavaScript code under compilation\")\n    private String logging_level = Level.WARNING.getName();",
      "info" : "FieldDeclaration[3934-4233]:FieldDeclaration[3934-4233]"
    }, {
      "left" : "@Option(name = \"--externs\",\n        usage = \"The file containing javascript externs. You may specify\"\n        + \" multiple\")\n    private List<String> externs = Lists.newArrayList();",
      "right" : "@Option(name = \"--externs\",\n        usage = \"The file containing javascript externs. You may specify\"\n        + \" multiple\")\n    private List<String> externs = Lists.newArrayList();",
      "info" : "FieldDeclaration[4239-4420]:FieldDeclaration[4239-4420]"
    }, {
      "left" : "@Option(name = \"--js\",\n        usage = \"The javascript filename. You may specify multiple\")\n    private List<String> js = Lists.newArrayList();",
      "right" : "@Option(name = \"--js\",\n        usage = \"The javascript filename. You may specify multiple\")\n    private List<String> js = Lists.newArrayList();",
      "info" : "FieldDeclaration[4426-4569]:FieldDeclaration[4426-4569]"
    }, {
      "left" : "@Option(name = \"--js_output_file\",\n        usage = \"Primary output filename. If not specified, output is \" +\n        \"written to stdout\")\n    private String js_output_file = \"\";",
      "right" : "@Option(name = \"--js_output_file\",\n        usage = \"Primary output filename. If not specified, output is \" +\n        \"written to stdout\")\n    private String js_output_file = \"\";",
      "info" : "FieldDeclaration[4575-4752]:FieldDeclaration[4575-4752]"
    }, {
      "left" : "@Option(name = \"--module\",\n        usage = \"A javascript module specification. The format is \"\n        + \"<name>:<num-js-files>[:[<dep>,...][:]]]. Module names must be \"\n        + \"unique. Each dep is the name of a module that this module \"\n        + \"depends on. Modules must be listed in dependency order, and js \"\n        + \"source files must be listed in the corresponding order. Where \"\n        + \"--module flags occur in relation to --js flags is unimportant\")\n    private List<String> module = Lists.newArrayList();",
      "right" : "@Option(name = \"--module\",\n        usage = \"A javascript module specification. The format is \"\n        + \"<name>:<num-js-files>[:[<dep>,...][:]]]. Module names must be \"\n        + \"unique. Each dep is the name of a module that this module \"\n        + \"depends on. Modules must be listed in dependency order, and js \"\n        + \"source files must be listed in the corresponding order. Where \"\n        + \"--module flags occur in relation to --js flags is unimportant\")\n    private List<String> module = Lists.newArrayList();",
      "info" : "FieldDeclaration[4758-5280]:FieldDeclaration[4758-5280]"
    }, {
      "left" : "@Option(name = \"--variable_map_input_file\",\n        usage = \"File containing the serialized version of the variable \"\n        + \"renaming map produced by a previous compilation\")\n    private String variable_map_input_file = \"\";",
      "right" : "@Option(name = \"--variable_map_input_file\",\n        usage = \"File containing the serialized version of the variable \"\n        + \"renaming map produced by a previous compilation\")\n    private String variable_map_input_file = \"\";",
      "info" : "FieldDeclaration[5286-5513]:FieldDeclaration[5286-5513]"
    }, {
      "left" : "@Option(name = \"--property_map_input_file\",\n        usage = \"File containing the serialized version of the property \"\n        + \"renaming map produced by a previous compilation\")\n    private String property_map_input_file = \"\";",
      "right" : "@Option(name = \"--property_map_input_file\",\n        usage = \"File containing the serialized version of the property \"\n        + \"renaming map produced by a previous compilation\")\n    private String property_map_input_file = \"\";",
      "info" : "FieldDeclaration[5519-5746]:FieldDeclaration[5519-5746]"
    }, {
      "left" : "@Option(name = \"--variable_map_output_file\",\n        usage = \"File where the serialized version of the variable \"\n        + \"renaming map produced should be saved\")\n    private String variable_map_output_file = \"\";",
      "right" : "@Option(name = \"--variable_map_output_file\",\n        usage = \"File where the serialized version of the variable \"\n        + \"renaming map produced should be saved\")\n    private String variable_map_output_file = \"\";",
      "info" : "FieldDeclaration[5752-5966]:FieldDeclaration[5752-5966]"
    }, {
      "left" : "@Option(name = \"--create_name_map_files\",\n        handler = BooleanOptionHandler.class,\n        usage = \"If true, variable renaming and property renaming map \"\n        + \"files will be produced as {binary name}_vars_map.out and \"\n        + \"{binary name}_props_map.out. Note that this flag cannot be used \"\n        + \"in conjunction with either variable_map_output_file or \"\n        + \"property_map_output_file\")\n    private boolean create_name_map_files = false;",
      "right" : "@Option(name = \"--create_name_map_files\",\n        handler = BooleanOptionHandler.class,\n        usage = \"If true, variable renaming and property renaming map \"\n        + \"files will be produced as {binary name}_vars_map.out and \"\n        + \"{binary name}_props_map.out. Note that this flag cannot be used \"\n        + \"in conjunction with either variable_map_output_file or \"\n        + \"property_map_output_file\")\n    private boolean create_name_map_files = false;",
      "info" : "FieldDeclaration[5972-6435]:FieldDeclaration[5972-6435]"
    }, {
      "left" : "@Option(name = \"--property_map_output_file\",\n        usage = \"File where the serialized version of the property \"\n        + \"renaming map produced should be saved\")\n    private String property_map_output_file = \"\";",
      "right" : "@Option(name = \"--property_map_output_file\",\n        usage = \"File where the serialized version of the property \"\n        + \"renaming map produced should be saved\")\n    private String property_map_output_file = \"\";",
      "info" : "FieldDeclaration[6441-6655]:FieldDeclaration[6441-6655]"
    }, {
      "left" : "@Option(name = \"--third_party\",\n        handler = BooleanOptionHandler.class,\n        usage = \"Check source validity but do not enforce Closure style \"\n        + \"rules and conventions\")\n    private boolean third_party = false;",
      "right" : "@Option(name = \"--third_party\",\n        handler = BooleanOptionHandler.class,\n        usage = \"Check source validity but do not enforce Closure style \"\n        + \"rules and conventions\")\n    private boolean third_party = false;",
      "info" : "FieldDeclaration[6661-6888]:FieldDeclaration[6661-6888]"
    }, {
      "left" : "@Option(name = \"--summary_detail_level\",\n        usage = \"Controls how detailed the compilation summary is. Values:\"\n        + \" 0 (never print summary), 1 (print summary only if there are \"\n        + \"errors or warnings), 2 (print summary if type checking is on, \"\n        + \"see --check_types), 3 (always print summary). The default level \"\n        + \"is 1\")\n    private int summary_detail_level = 1;",
      "right" : "@Option(name = \"--summary_detail_level\",\n        usage = \"Controls how detailed the compilation summary is. Values:\"\n        + \" 0 (never print summary), 1 (print summary only if there are \"\n        + \"errors or warnings), 2 (print summary if type checking is on, \"\n        + \"see --check_types), 3 (always print summary). The default level \"\n        + \"is 1\")\n    private int summary_detail_level = 1;",
      "info" : "FieldDeclaration[6895-7297]:FieldDeclaration[6895-7297]"
    }, {
      "left" : "@Option(name = \"--output_wrapper\",\n        usage = \"Interpolate output into this string at the place denoted\"\n        + \" by the marker token %output%. See --output_wrapper_marker\")\n    private String output_wrapper = \"\";",
      "right" : "@Option(name = \"--output_wrapper\",\n        usage = \"Interpolate output into this string at the place denoted\"\n        + \" by the marker token %output%. See --output_wrapper_marker\")\n    private String output_wrapper = \"\";",
      "info" : "FieldDeclaration[7303-7524]:FieldDeclaration[7303-7524]"
    }, {
      "left" : "@Option(name = \"--output_wrapper_marker\",\n        usage = \"Use this token as output marker in the value of\"\n        + \" --output_wrapper\")\n    private String output_wrapper_marker = \"%output%\";",
      "right" : "@Option(name = \"--output_wrapper_marker\",\n        usage = \"Use this token as output marker in the value of\"\n        + \" --output_wrapper\")\n    private String output_wrapper_marker = \"%output%\";",
      "info" : "FieldDeclaration[7530-7723]:FieldDeclaration[7530-7723]"
    }, {
      "left" : "@Option(name = \"--module_wrapper\",\n        usage = \"An output wrapper for a javascript module (optional). \"\n        + \"The format is <name>:<wrapper>. The module name must correspond \"\n        + \"with a module specified using --module. The wrapper must \"\n        + \"contain %s as the code placeholder\")\n    private List<String> module_wrapper = Lists.newArrayList();",
      "right" : "@Option(name = \"--module_wrapper\",\n        usage = \"An output wrapper for a javascript module (optional). \"\n        + \"The format is <name>:<wrapper>. The module name must correspond \"\n        + \"with a module specified using --module. The wrapper must \"\n        + \"contain %s as the code placeholder\")\n    private List<String> module_wrapper = Lists.newArrayList();",
      "info" : "FieldDeclaration[7729-8095]:FieldDeclaration[7729-8095]"
    }, {
      "left" : "@Option(name = \"--module_output_path_prefix\",\n        usage = \"Prefix for filenames of compiled js modules. \"\n        + \"<module-name>.js will be appended to this prefix. Directories \"\n        + \"will be created as needed. Use with --module\")\n    private String module_output_path_prefix = \"./\";",
      "right" : "@Option(name = \"--module_output_path_prefix\",\n        usage = \"Prefix for filenames of compiled js modules. \"\n        + \"<module-name>.js will be appended to this prefix. Directories \"\n        + \"will be created as needed. Use with --module\")\n    private String module_output_path_prefix = \"./\";",
      "info" : "FieldDeclaration[8101-8396]:FieldDeclaration[8101-8396]"
    }, {
      "left" : "@Option(name = \"--create_source_map\",\n        usage = \"If specified, a source map file mapping the generated \" +\n        \"source files back to the original source file will be \" +\n        \"output to the specified path. The %outname% placeholder will \" +\n        \"expand to the name of the output file that the source map \" +\n        \"corresponds to.\")\n    private String create_source_map = \"\";",
      "right" : "@Option(name = \"--create_source_map\",\n        usage = \"If specified, a source map file mapping the generated \" +\n        \"source files back to the original source file will be \" +\n        \"output to the specified path. The %outname% placeholder will \" +\n        \"expand to the name of the output file that the source map \" +\n        \"corresponds to.\")\n    private String create_source_map = \"\";",
      "info" : "FieldDeclaration[8402-8796]:FieldDeclaration[8402-8796]"
    }, {
      "left" : "@Option(name = \"--jscomp_error\",\n        usage = \"Make the named class of warnings an error. Options:\" +\n        DiagnosticGroups.DIAGNOSTIC_GROUP_NAMES)\n    private List<String> jscomp_error = Lists.newArrayList();",
      "right" : "@Option(name = \"--jscomp_error\",\n        usage = \"Make the named class of warnings an error. Options:\" +\n        DiagnosticGroups.DIAGNOSTIC_GROUP_NAMES)\n    private List<String> jscomp_error = Lists.newArrayList();",
      "info" : "FieldDeclaration[8802-9017]:FieldDeclaration[8802-9017]"
    }, {
      "left" : "@Option(name = \"--jscomp_warning\",\n        usage = \"Make the named class of warnings a normal warning. \" +\n        \"Options:\" + DiagnosticGroups.DIAGNOSTIC_GROUP_NAMES)\n    private List<String> jscomp_warning =  Lists.newArrayList();",
      "right" : "@Option(name = \"--jscomp_warning\",\n        usage = \"Make the named class of warnings a normal warning. \" +\n        \"Options:\" + DiagnosticGroups.DIAGNOSTIC_GROUP_NAMES)\n    private List<String> jscomp_warning =  Lists.newArrayList();",
      "info" : "FieldDeclaration[9023-9256]:FieldDeclaration[9023-9256]"
    }, {
      "left" : "@Option(name = \"--jscomp_off\",\n        usage = \"Turn off the named class of warnings. Options:\" +\n        DiagnosticGroups.DIAGNOSTIC_GROUP_NAMES)\n    private List<String> jscomp_off = Lists.newArrayList();",
      "right" : "@Option(name = \"--jscomp_off\",\n        usage = \"Turn off the named class of warnings. Options:\" +\n        DiagnosticGroups.DIAGNOSTIC_GROUP_NAMES)\n    private List<String> jscomp_off = Lists.newArrayList();",
      "info" : "FieldDeclaration[9262-9468]:FieldDeclaration[9262-9468]"
    }, {
      "left" : "@Option(name = \"--define\",\n        aliases = {\"--D\", \"-D\"},\n        usage = \"Override the value of a variable annotated @define. \" +\n        \"The format is <name>[=<val>], where <name> is the name of a @define \" +\n        \"variable and <val> is a boolean, number, or a single-quoted string \" +\n        \"that contains no single quotes. If [=<val>] is omitted, \" +\n        \"the variable is marked true\")\n    private List<String> define = Lists.newArrayList();",
      "right" : "@Option(name = \"--define\",\n        aliases = {\"--D\", \"-D\"},\n        usage = \"Override the value of a variable annotated @define. \" +\n        \"The format is <name>[=<val>], where <name> is the name of a @define \" +\n        \"variable and <val> is a boolean, number, or a single-quoted string \" +\n        \"that contains no single quotes. If [=<val>] is omitted, \" +\n        \"the variable is marked true\")\n    private List<String> define = Lists.newArrayList();",
      "info" : "FieldDeclaration[9474-9931]:FieldDeclaration[9474-9931]"
    }, {
      "left" : "@Option(name = \"--charset\",\n        usage = \"Input and output charset for all files. By default, we \" +\n                \"accept UTF-8 as input and output US_ASCII\")\n    private String charset = \"\";",
      "right" : "@Option(name = \"--charset\",\n        usage = \"Input and output charset for all files. By default, we \" +\n                \"accept UTF-8 as input and output US_ASCII\")\n    private String charset = \"\";",
      "info" : "FieldDeclaration[9937-10134]:FieldDeclaration[9937-10134]"
    }, {
      "left" : "@Option(name = \"--compilation_level\",\n        usage = \"Specifies the compilation level to use. Options: \" +\n        \"WHITESPACE_ONLY, SIMPLE_OPTIMIZATIONS, ADVANCED_OPTIMIZATIONS\")\n    private CompilationLevel compilation_level =\n        CompilationLevel.SIMPLE_OPTIMIZATIONS;",
      "right" : "@Option(name = \"--compilation_level\",\n        usage = \"Specifies the compilation level to use. Options: \" +\n        \"WHITESPACE_ONLY, SIMPLE_OPTIMIZATIONS, ADVANCED_OPTIMIZATIONS\")\n    private CompilationLevel compilation_level =\n        CompilationLevel.SIMPLE_OPTIMIZATIONS;",
      "info" : "FieldDeclaration[10140-10416]:FieldDeclaration[10140-10416]"
    }, {
      "left" : "@Option(name = \"--warning_level\",\n        usage = \"Specifies the warning level to use. Options: \" +\n        \"QUIET, DEFAULT, VERBOSE\")\n    private WarningLevel warning_level = WarningLevel.DEFAULT;",
      "right" : "@Option(name = \"--warning_level\",\n        usage = \"Specifies the warning level to use. Options: \" +\n        \"QUIET, DEFAULT, VERBOSE\")\n    private WarningLevel warning_level = WarningLevel.DEFAULT;",
      "info" : "FieldDeclaration[10422-10619]:FieldDeclaration[10422-10619]"
    }, {
      "left" : "@Option(name = \"--use_only_custom_externs\",\n        handler = BooleanOptionHandler.class,\n        usage = \"Specifies whether the default externs should be excluded\")\n    private boolean use_only_custom_externs = false;",
      "right" : "@Option(name = \"--use_only_custom_externs\",\n        handler = BooleanOptionHandler.class,\n        usage = \"Specifies whether the default externs should be excluded\")\n    private boolean use_only_custom_externs = false;",
      "info" : "FieldDeclaration[10625-10843]:FieldDeclaration[10625-10843]"
    }, {
      "left" : "@Option(name = \"--debug\",\n        handler = BooleanOptionHandler.class,\n        usage = \"Enable debugging options\")\n    private boolean debug = false;",
      "right" : "@Option(name = \"--debug\",\n        handler = BooleanOptionHandler.class,\n        usage = \"Enable debugging options\")\n    private boolean debug = false;",
      "info" : "FieldDeclaration[10849-10999]:FieldDeclaration[10849-10999]"
    }, {
      "left" : "@Option(name = \"--formatting\",\n        usage = \"Specifies which formatting options, if any, should be \"\n        + \"applied to the output JS. Options: \"\n        + \"PRETTY_PRINT, PRINT_INPUT_DELIMITER\")\n    private List<FormattingOption> formatting = Lists.newArrayList();",
      "right" : "@Option(name = \"--formatting\",\n        usage = \"Specifies which formatting options, if any, should be \"\n        + \"applied to the output JS. Options: \"\n        + \"PRETTY_PRINT, PRINT_INPUT_DELIMITER\")\n    private List<FormattingOption> formatting = Lists.newArrayList();",
      "info" : "FieldDeclaration[11005-11275]:FieldDeclaration[11005-11275]"
    }, {
      "left" : "@Option(name = \"--process_closure_primitives\",\n        handler = BooleanOptionHandler.class,\n        usage = \"Processes built-ins from the Closure library, such as \"\n        + \"goog.require(), goog.provide(), and goog.exportSymbol()\")\n    private boolean process_closure_primitives = true;",
      "right" : "@Option(name = \"--process_closure_primitives\",\n        handler = BooleanOptionHandler.class,\n        usage = \"Processes built-ins from the Closure library, such as \"\n        + \"goog.require(), goog.provide(), and goog.exportSymbol()\")\n    private boolean process_closure_primitives = true;",
      "info" : "FieldDeclaration[11281-11570]:FieldDeclaration[11281-11570]"
    }, {
      "left" : "@Option(name = \"--manage_closure_dependencies\",\n        handler = BooleanOptionHandler.class,\n        usage = \"Automatically sort dependencies so that a file that \"\n        + \"goog.provides symbol X will always come before a file that \"\n        + \"goog.requires symbol X. If an input provides symbols, and \"\n        + \"those symbols are never required, then that input will not \"\n        + \"be included in the compilation.\")\n    private boolean manage_closure_dependencies = false;",
      "right" : "@Option(name = \"--manage_closure_dependencies\",\n        handler = BooleanOptionHandler.class,\n        usage = \"Automatically sort dependencies so that a file that \"\n        + \"goog.provides symbol X will always come before a file that \"\n        + \"goog.requires symbol X. If an input provides symbols, and \"\n        + \"those symbols are never required, then that input will not \"\n        + \"be included in the compilation.\")\n    private boolean manage_closure_dependencies = false;",
      "info" : "FieldDeclaration[11576-12057]:FieldDeclaration[11576-12057]"
    }, {
      "left" : "@Option(name = \"--output_manifest\",\n        usage = \"Prints out a list of all the files in the compilation. \"\n        + \"If --manage_closure_dependencies is on, this will not include \"\n        + \"files that got dropped because they were not required. \"\n        + \"The %outname% placeholder expands to the js output file. \"\n        + \"If you're using modularization, using %outname% will create \"\n        + \"a manifest for each module.\")\n    private String output_manifest = \"\";",
      "right" : "@Option(name = \"--output_manifest\",\n        usage = \"Prints out a list of all the files in the compilation. \"\n        + \"If --manage_closure_dependencies is on, this will not include \"\n        + \"files that got dropped because they were not required. \"\n        + \"The %outname% placeholder expands to the js output file. \"\n        + \"If you're using modularization, using %outname% will create \"\n        + \"a manifest for each module.\")\n    private String output_manifest = \"\";",
      "info" : "FieldDeclaration[12063-12540]:FieldDeclaration[12063-12540]"
    }, {
      "left" : "BooleanOptionHandler",
      "right" : "BooleanOptionHandler",
      "info" : "TypeDeclaration[12682-13862]:TypeDeclaration[12682-13862]"
    }, {
      "left" : "private static final Set<String> TRUES =\n          Sets.newHashSet(\"true\", \"on\", \"yes\", \"1\");",
      "right" : "private static final Set<String> TRUES =\n          Sets.newHashSet(\"true\", \"on\", \"yes\", \"1\");",
      "info" : "FieldDeclaration[12762-12855]:FieldDeclaration[12762-12855]"
    }, {
      "left" : "private static final Set<String> FALSES =\n          Sets.newHashSet(\"false\", \"off\", \"no\", \"0\");",
      "right" : "private static final Set<String> FALSES =\n          Sets.newHashSet(\"false\", \"off\", \"no\", \"0\");",
      "info" : "FieldDeclaration[12862-12957]:FieldDeclaration[12862-12957]"
    }, {
      "left" : "public BooleanOptionHandler(\n          CmdLineParser parser, OptionDef option,\n          Setter<? super Boolean> setter)",
      "right" : "public BooleanOptionHandler(\n          CmdLineParser parser, OptionDef option,\n          Setter<? super Boolean> setter)",
      "info" : "MethodDeclaration[12965-13134]:MethodDeclaration[12965-13134]"
    }, {
      "left" : "public int parseArguments(Parameters params) throws CmdLineException",
      "right" : "public int parseArguments(Parameters params) throws CmdLineException",
      "info" : "MethodDeclaration[13142-13763]:MethodDeclaration[13142-13763]"
    }, {
      "left" : "public String getDefaultMetaVariable()",
      "right" : "public String getDefaultMetaVariable()",
      "info" : "MethodDeclaration[13771-13856]:MethodDeclaration[13771-13856]"
    }, {
      "left" : "enum : FormattingOption",
      "right" : "enum : FormattingOption",
      "info" : "EnumDeclaration[13870-14410]:EnumDeclaration[13870-14410]"
    }, {
      "left" : "private void applyToOptions(CompilerOptions options)",
      "right" : "private void applyToOptions(CompilerOptions options)",
      "info" : "MethodDeclaration[14042-14406]:MethodDeclaration[14042-14406]"
    }, {
      "left" : "private final Flags flags = new Flags();",
      "right" : "private final Flags flags = new Flags();",
      "info" : "FieldDeclaration[14414-14454]:FieldDeclaration[14414-14454]"
    }, {
      "left" : "private boolean isConfigValid = false;",
      "right" : "private boolean isConfigValid = false;",
      "info" : "FieldDeclaration[14458-14496]:FieldDeclaration[14458-14496]"
    }, {
      "left" : "protected CommandLineRunner(String[] args)",
      "right" : "protected CommandLineRunner(String[] args)",
      "info" : "MethodDeclaration[14500-14792]:MethodDeclaration[14500-14792]"
    }, {
      "left" : "protected CommandLineRunner(String[] args, PrintStream out, PrintStream err)",
      "right" : "protected CommandLineRunner(String[] args, PrintStream out, PrintStream err)",
      "info" : "MethodDeclaration[14796-14935]:MethodDeclaration[14796-14935]"
    }, {
      "left" : "private void initConfigFromFlags(String[] args, PrintStream err)",
      "right" : "private void initConfigFromFlags(String[] args, PrintStream err)",
      "info" : "MethodDeclaration[14939-17856]:MethodDeclaration[14939-17856]"
    }, {
      "left" : "protected CompilerOptions createOptions()",
      "right" : "protected CompilerOptions createOptions()",
      "info" : "MethodDeclaration[17860-18556]:MethodDeclaration[17860-18521]"
    }, {
      "left" : "protected Compiler createCompiler()",
      "right" : "protected Compiler createCompiler()",
      "info" : "MethodDeclaration[18560-18661]:MethodDeclaration[18525-18626]"
    }, {
      "left" : "protected List<JSSourceFile> createExterns() throws FlagUsageException,\n      IOException",
      "right" : "protected List<JSSourceFile> createExterns() throws FlagUsageException,\n      IOException",
      "info" : "MethodDeclaration[18665-19041]:MethodDeclaration[18630-19006]"
    }, {
      "left" : "private static final List<String> DEFAULT_EXTERNS_NAMES = ImmutableList.of(\n    // JS externs\n    \"es3.js\",\n    \"es5.js\",\n\n    // Event APIs\n    \"w3c_event.js\",\n    \"w3c_event3.js\",\n    \"gecko_event.js\",\n    \"ie_event.js\",\n    \"webkit_event.js\",\n\n    // DOM apis\n    \"w3c_dom1.js\",\n    \"w3c_dom2.js\",\n    \"w3c_dom3.js\",\n    \"gecko_dom.js\",\n    \"ie_dom.js\",\n    \"webkit_dom.js\",\n\n    // CSS apis\n    \"w3c_css.js\",\n    \"gecko_css.js\",\n    \"ie_css.js\",\n    \"webkit_css.js\",\n\n    // Top-level namespaces\n    \"google.js\",\n\n    \"deprecated.js\",\n    \"fileapi.js\",\n    \"flash.js\",\n    \"gears_symbols.js\",\n    \"gears_types.js\",\n    \"gecko_xml.js\",\n    \"html5.js\",\n    \"ie_vml.js\",\n    \"iphone.js\",\n    \"webstorage.js\",\n    \"w3c_css3d.js\",\n    \"w3c_elementtraversal.js\",\n    \"w3c_geolocation.js\",\n    \"w3c_range.js\",\n    \"w3c_selectors.js\",\n    \"w3c_xml.js\",\n    \"window.js\",\n    \"webkit_notifications.js\");",
      "right" : "private static final List<String> DEFAULT_EXTERNS_NAMES = ImmutableList.of(\n    // JS externs\n    \"es3.js\",\n    \"es5.js\",\n\n    // Event APIs\n    \"w3c_event.js\",\n    \"w3c_event3.js\",\n    \"gecko_event.js\",\n    \"ie_event.js\",\n    \"webkit_event.js\",\n\n    // DOM apis\n    \"w3c_dom1.js\",\n    \"w3c_dom2.js\",\n    \"w3c_dom3.js\",\n    \"gecko_dom.js\",\n    \"ie_dom.js\",\n    \"webkit_dom.js\",\n\n    // CSS apis\n    \"w3c_css.js\",\n    \"gecko_css.js\",\n    \"ie_css.js\",\n    \"webkit_css.js\",\n\n    // Top-level namespaces\n    \"google.js\",\n\n    \"deprecated.js\",\n    \"fileapi.js\",\n    \"flash.js\",\n    \"gears_symbols.js\",\n    \"gears_types.js\",\n    \"gecko_xml.js\",\n    \"html5.js\",\n    \"ie_vml.js\",\n    \"iphone.js\",\n    \"webstorage.js\",\n    \"w3c_css3d.js\",\n    \"w3c_elementtraversal.js\",\n    \"w3c_geolocation.js\",\n    \"w3c_range.js\",\n    \"w3c_selectors.js\",\n    \"w3c_xml.js\",\n    \"window.js\",\n    \"webkit_notifications.js\");",
      "info" : "FieldDeclaration[19104-20001]:FieldDeclaration[19069-19966]"
    }, {
      "left" : "public static List<JSSourceFile> getDefaultExterns() throws IOException",
      "right" : "public static List<JSSourceFile> getDefaultExterns() throws IOException",
      "info" : "MethodDeclaration[20005-21234]:MethodDeclaration[19970-21199]"
    }, {
      "left" : "public boolean shouldRunCompiler()",
      "right" : "public boolean shouldRunCompiler()",
      "info" : "MethodDeclaration[21238-21370]:MethodDeclaration[21203-21335]"
    }, {
      "left" : "public static void main(String[] args)",
      "right" : "public static void main(String[] args)",
      "info" : "MethodDeclaration[21374-21654]:MethodDeclaration[21339-21619]"
    } ],
    "mappings" : [
 {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[2655-2662]:Modifier[2655-2662]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[2663-2669]:Modifier[2663-2669]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[2670-2675]:TYPE_DECLARATION_KIND[2670-2675]"
    }, {
      "left" : "Flags",
      "right" : "Flags",
      "info" : "SimpleName[2676-2681]:SimpleName[2676-2681]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[12682-12688]:Modifier[12682-12688]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[12689-12695]:Modifier[12689-12695]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[12696-12701]:TYPE_DECLARATION_KIND[12696-12701]"
    }, {
      "left" : "BooleanOptionHandler",
      "right" : "BooleanOptionHandler",
      "info" : "SimpleName[12702-12722]:SimpleName[12702-12722]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[12965-12971]:Modifier[12965-12971]"
    }, {
      "left" : "BooleanOptionHandler",
      "right" : "BooleanOptionHandler",
      "info" : "SimpleName[12972-12992]:SimpleName[12972-12992]"
    }, {
      "left" : "CmdLineParser parser",
      "right" : "CmdLineParser parser",
      "info" : "SingleVariableDeclaration[13004-13024]:SingleVariableDeclaration[13004-13024]"
    }, {
      "left" : "OptionDef option",
      "right" : "OptionDef option",
      "info" : "SingleVariableDeclaration[13026-13042]:SingleVariableDeclaration[13026-13042]"
    }, {
      "left" : "Setter<? super Boolean> setter",
      "right" : "Setter<? super Boolean> setter",
      "info" : "SingleVariableDeclaration[13054-13084]:SingleVariableDeclaration[13054-13084]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13086-13134]:Block[13086-13134]"
    }, {
      "left" : "super(parser, option, setter);",
      "right" : "super(parser, option, setter);",
      "info" : "SuperConstructorInvocation[13096-13126]:SuperConstructorInvocation[13096-13126]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[13142-13151]:MarkerAnnotation[13142-13151]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[13158-13164]:Modifier[13158-13164]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[13165-13168]:PrimitiveType[13165-13168]"
    }, {
      "left" : "parseArguments",
      "right" : "parseArguments",
      "info" : "SimpleName[13169-13183]:SimpleName[13169-13183]"
    }, {
      "left" : "Parameters params",
      "right" : "Parameters params",
      "info" : "SingleVariableDeclaration[13184-13201]:SingleVariableDeclaration[13184-13201]"
    }, {
      "left" : "CmdLineException",
      "right" : "CmdLineException",
      "info" : "SimpleType[13210-13226]:SimpleType[13210-13226]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13227-13763]:Block[13227-13763]"
    }, {
      "left" : "String param = params.getParameter(0);",
      "right" : "String param = params.getParameter(0);",
      "info" : "VariableDeclarationStatement[13237-13275]:VariableDeclarationStatement[13237-13275]"
    }, {
      "left" : "if (param == null)",
      "right" : "if (param == null)",
      "info" : "IfStatement[13284-13755]:IfStatement[13284-13755]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13303-13367]:Block[13303-13367]"
    }, {
      "left" : "setter.addValue(true);",
      "right" : "setter.addValue(true);",
      "info" : "ExpressionStatement[13315-13337]:ExpressionStatement[13315-13337]"
    }, {
      "left" : "return 0;",
      "right" : "return 0;",
      "info" : "ReturnStatement[13348-13357]:ReturnStatement[13348-13357]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13373-13755]:Block[13373-13755]"
    }, {
      "left" : "String lowerParam = param.toLowerCase();",
      "right" : "String lowerParam = param.toLowerCase();",
      "info" : "VariableDeclarationStatement[13385-13425]:VariableDeclarationStatement[13385-13425]"
    }, {
      "left" : "if (TRUES.contains(lowerParam))",
      "right" : "if (TRUES.contains(lowerParam))",
      "info" : "IfStatement[13436-13725]:IfStatement[13436-13725]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13468-13516]:Block[13468-13516]"
    }, {
      "left" : "setter.addValue(true);",
      "right" : "setter.addValue(true);",
      "info" : "ExpressionStatement[13482-13504]:ExpressionStatement[13482-13504]"
    }, {
      "left" : "if (FALSES.contains(lowerParam))",
      "right" : "if (FALSES.contains(lowerParam))",
      "info" : "IfStatement[13522-13725]:IfStatement[13522-13725]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13555-13604]:Block[13555-13604]"
    }, {
      "left" : "setter.addValue(false);",
      "right" : "setter.addValue(false);",
      "info" : "ExpressionStatement[13569-13592]:ExpressionStatement[13569-13592]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13610-13725]:Block[13610-13725]"
    }, {
      "left" : "throw new CmdLineException(owner,\n               \"Illegal boolean value: \" + lowerParam);",
      "right" : "throw new CmdLineException(owner,\n               \"Illegal boolean value: \" + lowerParam);",
      "info" : "ThrowStatement[13624-13713]:ThrowStatement[13624-13713]"
    }, {
      "left" : "return 1;",
      "right" : "return 1;",
      "info" : "ReturnStatement[13736-13745]:ReturnStatement[13736-13745]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[13771-13780]:MarkerAnnotation[13771-13780]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[13787-13793]:Modifier[13787-13793]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[13794-13800]:SimpleType[13794-13800]"
    }, {
      "left" : "getDefaultMetaVariable",
      "right" : "getDefaultMetaVariable",
      "info" : "SimpleName[13801-13823]:SimpleName[13801-13823]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13826-13856]:Block[13826-13856]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[13836-13848]:ReturnStatement[13836-13848]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[14042-14049]:Modifier[14042-14049]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[14050-14054]:PrimitiveType[14050-14054]"
    }, {
      "left" : "applyToOptions",
      "right" : "applyToOptions",
      "info" : "SimpleName[14055-14069]:SimpleName[14055-14069]"
    }, {
      "left" : "CompilerOptions options",
      "right" : "CompilerOptions options",
      "info" : "SingleVariableDeclaration[14070-14093]:SingleVariableDeclaration[14070-14093]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14095-14406]:Block[14095-14406]"
    }, {
      "left" : "switch (this) {\n        case PRETTY_PRINT:\n          options.prettyPrint = true;\n          break;\n        case PRINT_INPUT_DELIMITER:\n          options.printInputDelimiter = true;\n          break;\n        default:\n          throw new RuntimeException(\"Unknown formatting option: \" + this);\n      }",
      "right" : "switch (this) {\n        case PRETTY_PRINT:\n          options.prettyPrint = true;\n          break;\n        case PRINT_INPUT_DELIMITER:\n          options.printInputDelimiter = true;\n          break;\n        default:\n          throw new RuntimeException(\"Unknown formatting option: \" + this);\n      }",
      "info" : "SwitchStatement[14103-14400]:SwitchStatement[14103-14400]"
    }, {
      "left" : "case PRETTY_PRINT:",
      "right" : "case PRETTY_PRINT:",
      "info" : "SwitchCase[14127-14145]:SwitchCase[14127-14145]"
    }, {
      "left" : "options.prettyPrint = true;",
      "right" : "options.prettyPrint = true;",
      "info" : "ExpressionStatement[14156-14183]:ExpressionStatement[14156-14183]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[14194-14200]:BreakStatement[14194-14200]"
    }, {
      "left" : "case PRINT_INPUT_DELIMITER:",
      "right" : "case PRINT_INPUT_DELIMITER:",
      "info" : "SwitchCase[14209-14236]:SwitchCase[14209-14236]"
    }, {
      "left" : "options.printInputDelimiter = true;",
      "right" : "options.printInputDelimiter = true;",
      "info" : "ExpressionStatement[14247-14282]:ExpressionStatement[14247-14282]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[14293-14299]:BreakStatement[14293-14299]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[14308-14316]:SwitchCase[14308-14316]"
    }, {
      "left" : "throw new RuntimeException(\"Unknown formatting option: \" + this);",
      "right" : "throw new RuntimeException(\"Unknown formatting option: \" + this);",
      "info" : "ThrowStatement[14327-14392]:ThrowStatement[14327-14392]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[14688-14697]:Modifier[14688-14697]"
    }, {
      "left" : "CommandLineRunner",
      "right" : "CommandLineRunner",
      "info" : "SimpleName[14698-14715]:SimpleName[14698-14715]"
    }, {
      "left" : "String[] args",
      "right" : "String[] args",
      "info" : "SingleVariableDeclaration[14716-14729]:SingleVariableDeclaration[14716-14729]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14731-14792]:Block[14731-14792]"
    }, {
      "left" : "super();",
      "right" : "super();",
      "info" : "SuperConstructorInvocation[14737-14745]:SuperConstructorInvocation[14737-14745]"
    }, {
      "left" : "initConfigFromFlags(args, System.err);",
      "right" : "initConfigFromFlags(args, System.err);",
      "info" : "ExpressionStatement[14750-14788]:ExpressionStatement[14750-14788]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[14796-14805]:Modifier[14796-14805]"
    }, {
      "left" : "CommandLineRunner",
      "right" : "CommandLineRunner",
      "info" : "SimpleName[14806-14823]:SimpleName[14806-14823]"
    }, {
      "left" : "String[] args",
      "right" : "String[] args",
      "info" : "SingleVariableDeclaration[14824-14837]:SingleVariableDeclaration[14824-14837]"
    }, {
      "left" : "PrintStream out",
      "right" : "PrintStream out",
      "info" : "SingleVariableDeclaration[14839-14854]:SingleVariableDeclaration[14839-14854]"
    }, {
      "left" : "PrintStream err",
      "right" : "PrintStream err",
      "info" : "SingleVariableDeclaration[14856-14871]:SingleVariableDeclaration[14856-14871]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14873-14935]:Block[14873-14935]"
    }, {
      "left" : "super(out, err);",
      "right" : "super(out, err);",
      "info" : "SuperConstructorInvocation[14879-14895]:SuperConstructorInvocation[14879-14895]"
    }, {
      "left" : "initConfigFromFlags(args, err);",
      "right" : "initConfigFromFlags(args, err);",
      "info" : "ExpressionStatement[14900-14931]:ExpressionStatement[14900-14931]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[14939-14946]:Modifier[14939-14946]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[14947-14951]:PrimitiveType[14947-14951]"
    }, {
      "left" : "initConfigFromFlags",
      "right" : "initConfigFromFlags",
      "info" : "SimpleName[14952-14971]:SimpleName[14952-14971]"
    }, {
      "left" : "String[] args",
      "right" : "String[] args",
      "info" : "SingleVariableDeclaration[14972-14985]:SingleVariableDeclaration[14972-14985]"
    }, {
      "left" : "PrintStream err",
      "right" : "PrintStream err",
      "info" : "SingleVariableDeclaration[14987-15002]:SingleVariableDeclaration[14987-15002]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15004-17856]:Block[15004-17856]"
    }, {
      "left" : "Pattern argPattern = Pattern.compile(\"(--[a-zA-Z_]+)=(.*)\");",
      "right" : "Pattern argPattern = Pattern.compile(\"(--[a-zA-Z_]+)=(.*)\");",
      "info" : "VariableDeclarationStatement[15170-15230]:VariableDeclarationStatement[15170-15230]"
    }, {
      "left" : "Pattern quotesPattern = Pattern.compile(\"^['\\\"](.*)['\\\"]$\");",
      "right" : "Pattern quotesPattern = Pattern.compile(\"^['\\\"](.*)['\\\"]$\");",
      "info" : "VariableDeclarationStatement[15235-15295]:VariableDeclarationStatement[15235-15295]"
    }, {
      "left" : "List<String> processedArgs = Lists.newArrayList();",
      "right" : "List<String> processedArgs = Lists.newArrayList();",
      "info" : "VariableDeclarationStatement[15300-15350]:VariableDeclarationStatement[15300-15350]"
    }, {
      "left" : "for (String arg : args)",
      "right" : "for (String arg : args)",
      "info" : "EnhancedForStatement[15355-15825]:EnhancedForStatement[15355-15825]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15379-15825]:Block[15379-15825]"
    }, {
      "left" : "Matcher matcher = argPattern.matcher(arg);",
      "right" : "Matcher matcher = argPattern.matcher(arg);",
      "info" : "VariableDeclarationStatement[15387-15429]:VariableDeclarationStatement[15387-15429]"
    }, {
      "left" : "if (matcher.matches())",
      "right" : "if (matcher.matches())",
      "info" : "IfStatement[15436-15819]:IfStatement[15436-15819]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15459-15772]:Block[15459-15772]"
    }, {
      "left" : "processedArgs.add(matcher.group(1));",
      "right" : "processedArgs.add(matcher.group(1));",
      "info" : "ExpressionStatement[15469-15505]:ExpressionStatement[15469-15505]"
    }, {
      "left" : "String value = matcher.group(2);",
      "right" : "String value = matcher.group(2);",
      "info" : "VariableDeclarationStatement[15515-15547]:VariableDeclarationStatement[15515-15547]"
    }, {
      "left" : "Matcher quotesMatcher = quotesPattern.matcher(value);",
      "right" : "Matcher quotesMatcher = quotesPattern.matcher(value);",
      "info" : "VariableDeclarationStatement[15556-15609]:VariableDeclarationStatement[15556-15609]"
    }, {
      "left" : "if (quotesMatcher.matches())",
      "right" : "if (quotesMatcher.matches())",
      "info" : "IfStatement[15618-15764]:IfStatement[15618-15764]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15647-15711]:Block[15647-15711]"
    }, {
      "left" : "processedArgs.add(quotesMatcher.group(1));",
      "right" : "processedArgs.add(quotesMatcher.group(1));",
      "info" : "ExpressionStatement[15659-15701]:ExpressionStatement[15659-15701]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15717-15764]:Block[15717-15764]"
    }, {
      "left" : "processedArgs.add(value);",
      "right" : "processedArgs.add(value);",
      "info" : "ExpressionStatement[15729-15754]:ExpressionStatement[15729-15754]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15778-15819]:Block[15778-15819]"
    }, {
      "left" : "processedArgs.add(arg);",
      "right" : "processedArgs.add(arg);",
      "info" : "ExpressionStatement[15788-15811]:ExpressionStatement[15788-15811]"
    }, {
      "left" : "CmdLineParser parser = new CmdLineParser(flags);",
      "right" : "CmdLineParser parser = new CmdLineParser(flags);",
      "info" : "VariableDeclarationStatement[15831-15879]:VariableDeclarationStatement[15831-15879]"
    }, {
      "left" : "isConfigValid = true;",
      "right" : "isConfigValid = true;",
      "info" : "ExpressionStatement[15884-15905]:ExpressionStatement[15884-15905]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[15910-16088]:TryStatement[15910-16088]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15914-15989]:Block[15914-15989]"
    }, {
      "left" : "parser.parseArgument(processedArgs.toArray(new String[] {}));",
      "right" : "parser.parseArgument(processedArgs.toArray(new String[] {}));",
      "info" : "ExpressionStatement[15922-15983]:ExpressionStatement[15922-15983]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16017-16088]:Block[16017-16088]"
    }, {
      "left" : "err.println(e.getMessage());",
      "right" : "err.println(e.getMessage());",
      "info" : "ExpressionStatement[16025-16053]:ExpressionStatement[16025-16053]"
    }, {
      "left" : "isConfigValid = false;",
      "right" : "isConfigValid = false;",
      "info" : "ExpressionStatement[16060-16082]:ExpressionStatement[16060-16082]"
    }, {
      "left" : "if (!isConfigValid || flags.display_help)",
      "right" : "if (!isConfigValid || flags.display_help)",
      "info" : "IfStatement[16094-17852]:IfStatement[16094-17852]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16136-16202]:Block[16136-16202]"
    }, {
      "left" : "isConfigValid = false;",
      "right" : "isConfigValid = false;",
      "info" : "ExpressionStatement[16144-16166]:ExpressionStatement[16144-16166]"
    }, {
      "left" : "parser.printUsage(err);",
      "right" : "parser.printUsage(err);",
      "info" : "ExpressionStatement[16173-16196]:ExpressionStatement[16173-16196]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16208-17852]:Block[16208-17852]"
    }, {
      "left" : "getCommandLineConfig()\n          .setPrintTree(flags.print_tree)\n          .setComputePhaseOrdering(flags.compute_phase_ordering)\n          .setPrintAst(flags.print_ast)\n          .setPrintPassGraph(flags.print_pass_graph)\n          .setJscompDevMode(flags.jscomp_dev_mode)\n          .setLoggingLevel(flags.logging_level)\n          .setExterns(flags.externs)\n          .setJs(flags.js)\n          .setJsOutputFile(flags.js_output_file)\n          .setModule(flags.module)\n          .setVariableMapInputFile(flags.variable_map_input_file)\n          .setPropertyMapInputFile(flags.property_map_input_file)\n          .setVariableMapOutputFile(flags.variable_map_output_file)\n          .setCreateNameMapFiles(flags.create_name_map_files)\n          .setPropertyMapOutputFile(flags.property_map_output_file)\n          .setCodingConvention(flags.third_party ?\n               new DefaultCodingConvention() :\n               new ClosureCodingConvention())\n          .setSummaryDetailLevel(flags.summary_detail_level)\n          .setOutputWrapper(flags.output_wrapper)\n          .setOutputWrapperMarker(flags.output_wrapper_marker)\n          .setModuleWrapper(flags.module_wrapper)\n          .setModuleOutputPathPrefix(flags.module_output_path_prefix)\n          .setCreateSourceMap(flags.create_source_map)\n          .setJscompError(flags.jscomp_error)\n          .setJscompWarning(flags.jscomp_warning)\n          .setJscompOff(flags.jscomp_off)\n          .setDefine(flags.define)\n          .setCharset(flags.charset)\n          .setManageClosureDependencies(flags.manage_closure_dependencies)\n          .setOutputManifest(flags.output_manifest);",
      "right" : "getCommandLineConfig()\n          .setPrintTree(flags.print_tree)\n          .setComputePhaseOrdering(flags.compute_phase_ordering)\n          .setPrintAst(flags.print_ast)\n          .setPrintPassGraph(flags.print_pass_graph)\n          .setJscompDevMode(flags.jscomp_dev_mode)\n          .setLoggingLevel(flags.logging_level)\n          .setExterns(flags.externs)\n          .setJs(flags.js)\n          .setJsOutputFile(flags.js_output_file)\n          .setModule(flags.module)\n          .setVariableMapInputFile(flags.variable_map_input_file)\n          .setPropertyMapInputFile(flags.property_map_input_file)\n          .setVariableMapOutputFile(flags.variable_map_output_file)\n          .setCreateNameMapFiles(flags.create_name_map_files)\n          .setPropertyMapOutputFile(flags.property_map_output_file)\n          .setCodingConvention(flags.third_party ?\n               new DefaultCodingConvention() :\n               new ClosureCodingConvention())\n          .setSummaryDetailLevel(flags.summary_detail_level)\n          .setOutputWrapper(flags.output_wrapper)\n          .setOutputWrapperMarker(flags.output_wrapper_marker)\n          .setModuleWrapper(flags.module_wrapper)\n          .setModuleOutputPathPrefix(flags.module_output_path_prefix)\n          .setCreateSourceMap(flags.create_source_map)\n          .setJscompError(flags.jscomp_error)\n          .setJscompWarning(flags.jscomp_warning)\n          .setJscompOff(flags.jscomp_off)\n          .setDefine(flags.define)\n          .setCharset(flags.charset)\n          .setManageClosureDependencies(flags.manage_closure_dependencies)\n          .setOutputManifest(flags.output_manifest);",
      "info" : "ExpressionStatement[16216-17846]:ExpressionStatement[16216-17846]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[17860-17869]:MarkerAnnotation[17860-17869]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[17872-17881]:Modifier[17872-17881]"
    }, {
      "left" : "CompilerOptions",
      "right" : "CompilerOptions",
      "info" : "SimpleType[17882-17897]:SimpleType[17882-17897]"
    }, {
      "left" : "createOptions",
      "right" : "createOptions",
      "info" : "SimpleName[17898-17911]:SimpleName[17898-17911]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17914-18556]:Block[17914-18521]"
    }, {
      "left" : "CompilerOptions options = new CompilerOptions();",
      "right" : "CompilerOptions options = new CompilerOptions();",
      "info" : "VariableDeclarationStatement[17920-17968]:VariableDeclarationStatement[17920-17968]"
    }, {
      "left" : "options.setCodingConvention(new ClosureCodingConvention());",
      "right" : "options.setCodingConvention(new ClosureCodingConvention());",
      "info" : "ExpressionStatement[17973-18032]:ExpressionStatement[17973-18032]"
    }, {
      "left" : "CompilationLevel level = flags.compilation_level;",
      "right" : "CompilationLevel level = flags.compilation_level;",
      "info" : "VariableDeclarationStatement[18037-18086]:VariableDeclarationStatement[18037-18086]"
    }, {
      "left" : "level.setOptionsForCompilationLevel(options);",
      "right" : "level.setOptionsForCompilationLevel(options);",
      "info" : "ExpressionStatement[18091-18136]:ExpressionStatement[18091-18136]"
    }, {
      "left" : "if (flags.debug)",
      "right" : "if (flags.debug)",
      "info" : "IfStatement[18141-18222]:IfStatement[18141-18222]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18158-18222]:Block[18158-18222]"
    }, {
      "left" : "level.setDebugOptionsForCompilationLevel(options);",
      "right" : "level.setDebugOptionsForCompilationLevel(options);",
      "info" : "ExpressionStatement[18166-18216]:ExpressionStatement[18166-18216]"
    }, {
      "left" : "WarningLevel wLevel = flags.warning_level;",
      "right" : "WarningLevel wLevel = flags.warning_level;",
      "info" : "VariableDeclarationStatement[18228-18270]:VariableDeclarationStatement[18228-18270]"
    }, {
      "left" : "wLevel.setOptionsForWarningLevel(options);",
      "right" : "wLevel.setOptionsForWarningLevel(options);",
      "info" : "ExpressionStatement[18275-18317]:ExpressionStatement[18275-18317]"
    }, {
      "left" : "for (FormattingOption formattingOption : flags.formatting)",
      "right" : "for (FormattingOption formattingOption : flags.formatting)",
      "info" : "EnhancedForStatement[18322-18436]:EnhancedForStatement[18322-18436]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18381-18436]:Block[18381-18436]"
    }, {
      "left" : "formattingOption.applyToOptions(options);",
      "right" : "formattingOption.applyToOptions(options);",
      "info" : "ExpressionStatement[18389-18430]:ExpressionStatement[18389-18430]"
    }, {
      "left" : "options.closurePass = flags.process_closure_primitives;",
      "right" : "options.closurePass = flags.process_closure_primitives;",
      "info" : "ExpressionStatement[18442-18497]:ExpressionStatement[18442-18497]"
    }, {
      "left" : "return options;",
      "right" : "return options;",
      "info" : "ReturnStatement[18537-18552]:ReturnStatement[18502-18517]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[18560-18569]:MarkerAnnotation[18525-18534]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[18572-18581]:Modifier[18537-18546]"
    }, {
      "left" : "Compiler",
      "right" : "Compiler",
      "info" : "SimpleType[18582-18590]:SimpleType[18547-18555]"
    }, {
      "left" : "createCompiler",
      "right" : "createCompiler",
      "info" : "SimpleName[18591-18605]:SimpleName[18556-18570]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18608-18661]:Block[18573-18626]"
    }, {
      "left" : "return new Compiler(getErrorPrintStream());",
      "right" : "return new Compiler(getErrorPrintStream());",
      "info" : "ReturnStatement[18614-18657]:ReturnStatement[18579-18622]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[18665-18674]:MarkerAnnotation[18630-18639]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[18677-18686]:Modifier[18642-18651]"
    }, {
      "left" : "List<JSSourceFile>",
      "right" : "List<JSSourceFile>",
      "info" : "ParameterizedType[18687-18705]:ParameterizedType[18652-18670]"
    }, {
      "left" : "createExterns",
      "right" : "createExterns",
      "info" : "SimpleName[18706-18719]:SimpleName[18671-18684]"
    }, {
      "left" : "FlagUsageException",
      "right" : "FlagUsageException",
      "info" : "SimpleType[18729-18747]:SimpleType[18694-18712]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[18755-18766]:SimpleType[18720-18731]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18767-19041]:Block[18732-19006]"
    }, {
      "left" : "List<JSSourceFile> externs = super.createExterns();",
      "right" : "List<JSSourceFile> externs = super.createExterns();",
      "info" : "VariableDeclarationStatement[18773-18824]:VariableDeclarationStatement[18738-18789]"
    }, {
      "left" : "if (!flags.use_only_custom_externs)",
      "right" : "if (!flags.use_only_custom_externs)",
      "info" : "IfStatement[18829-19037]:IfStatement[18794-19002]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18865-19002]:Block[18830-18967]"
    }, {
      "left" : "List<JSSourceFile> defaultExterns = getDefaultExterns();",
      "right" : "List<JSSourceFile> defaultExterns = getDefaultExterns();",
      "info" : "VariableDeclarationStatement[18873-18929]:VariableDeclarationStatement[18838-18894]"
    }, {
      "left" : "defaultExterns.addAll(externs);",
      "right" : "defaultExterns.addAll(externs);",
      "info" : "ExpressionStatement[18936-18967]:ExpressionStatement[18901-18932]"
    }, {
      "left" : "return defaultExterns;",
      "right" : "return defaultExterns;",
      "info" : "ReturnStatement[18974-18996]:ReturnStatement[18939-18961]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19008-19037]:Block[18973-19002]"
    }, {
      "left" : "return externs;",
      "right" : "return externs;",
      "info" : "ReturnStatement[19016-19031]:ReturnStatement[18981-18996]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[20070-20076]:Modifier[20035-20041]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[20077-20083]:Modifier[20042-20048]"
    }, {
      "left" : "List<JSSourceFile>",
      "right" : "List<JSSourceFile>",
      "info" : "ParameterizedType[20084-20102]:ParameterizedType[20049-20067]"
    }, {
      "left" : "getDefaultExterns",
      "right" : "getDefaultExterns",
      "info" : "SimpleName[20103-20120]:SimpleName[20068-20085]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[20130-20141]:SimpleType[20095-20106]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20142-21234]:Block[20107-21199]"
    }, {
      "left" : "InputStream input = CommandLineRunner.class.getResourceAsStream(\n        \"/externs.zip\");",
      "right" : "InputStream input = CommandLineRunner.class.getResourceAsStream(\n        \"/externs.zip\");",
      "info" : "VariableDeclarationStatement[20148-20237]:VariableDeclarationStatement[20113-20202]"
    }, {
      "left" : "ZipInputStream zip = new ZipInputStream(input);",
      "right" : "ZipInputStream zip = new ZipInputStream(input);",
      "info" : "VariableDeclarationStatement[20242-20289]:VariableDeclarationStatement[20207-20254]"
    }, {
      "left" : "Map<String, JSSourceFile> externsMap = Maps.newHashMap();",
      "right" : "Map<String, JSSourceFile> externsMap = Maps.newHashMap();",
      "info" : "VariableDeclarationStatement[20294-20351]:VariableDeclarationStatement[20259-20316]"
    }, {
      "left" : "for (ZipEntry entry = null; (entry = zip.getNextEntry()) != null)",
      "right" : "for (ZipEntry entry = null; (entry = zip.getNextEntry()) != null)",
      "info" : "ForStatement[20356-20784]:ForStatement[20321-20749]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20424-20784]:Block[20389-20749]"
    }, {
      "left" : "LimitInputStream entryStream = new LimitInputStream(zip, entry.getSize());",
      "right" : "LimitInputStream entryStream = new LimitInputStream(zip, entry.getSize());",
      "info" : "VariableDeclarationStatement[20432-20506]:VariableDeclarationStatement[20397-20471]"
    }, {
      "left" : "externsMap.put(entry.getName(),\n          JSSourceFile.fromInputStream(\n              // Give the files an odd prefix, so that they do not conflict\n              // with the user's files.\n              \"externs.zip//\" + entry.getName(),\n              entryStream));",
      "right" : "externsMap.put(entry.getName(),\n          JSSourceFile.fromInputStream(\n              // Give the files an odd prefix, so that they do not conflict\n              // with the user's files.\n              \"externs.zip//\" + entry.getName(),\n              entryStream));",
      "info" : "ExpressionStatement[20513-20778]:ExpressionStatement[20478-20743]"
    }, {
      "left" : "Preconditions.checkState(\n        externsMap.keySet().equals(Sets.newHashSet(DEFAULT_EXTERNS_NAMES)),\n        \"Externs zip must match our hard-coded list of externs.\");",
      "right" : "Preconditions.checkState(\n        externsMap.keySet().equals(Sets.newHashSet(DEFAULT_EXTERNS_NAMES)),\n        \"Externs zip must match our hard-coded list of externs.\");",
      "info" : "ExpressionStatement[20790-20958]:ExpressionStatement[20755-20923]"
    }, {
      "left" : "List<JSSourceFile> externs = Lists.newArrayList();",
      "right" : "List<JSSourceFile> externs = Lists.newArrayList();",
      "info" : "VariableDeclarationStatement[21066-21116]:VariableDeclarationStatement[21031-21081]"
    }, {
      "left" : "for (String key : DEFAULT_EXTERNS_NAMES)",
      "right" : "for (String key : DEFAULT_EXTERNS_NAMES)",
      "info" : "EnhancedForStatement[21121-21209]:EnhancedForStatement[21086-21174]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21162-21209]:Block[21127-21174]"
    }, {
      "left" : "externs.add(externsMap.get(key));",
      "right" : "externs.add(externsMap.get(key));",
      "info" : "ExpressionStatement[21170-21203]:ExpressionStatement[21135-21168]"
    }, {
      "left" : "return externs;",
      "right" : "return externs;",
      "info" : "ReturnStatement[21215-21230]:ReturnStatement[21180-21195]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[21299-21305]:Modifier[21264-21270]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[21306-21313]:PrimitiveType[21271-21278]"
    }, {
      "left" : "shouldRunCompiler",
      "right" : "shouldRunCompiler",
      "info" : "SimpleName[21314-21331]:SimpleName[21279-21296]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21334-21370]:Block[21299-21335]"
    }, {
      "left" : "return this.isConfigValid;",
      "right" : "return this.isConfigValid;",
      "info" : "ReturnStatement[21340-21366]:ReturnStatement[21305-21331]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[21450-21456]:Modifier[21415-21421]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[21457-21463]:Modifier[21422-21428]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[21464-21468]:PrimitiveType[21429-21433]"
    }, {
      "left" : "main",
      "right" : "main",
      "info" : "SimpleName[21469-21473]:SimpleName[21434-21438]"
    }, {
      "left" : "String[] args",
      "right" : "String[] args",
      "info" : "SingleVariableDeclaration[21474-21487]:SingleVariableDeclaration[21439-21452]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21489-21654]:Block[21454-21619]"
    }, {
      "left" : "CommandLineRunner runner = new CommandLineRunner(args);",
      "right" : "CommandLineRunner runner = new CommandLineRunner(args);",
      "info" : "VariableDeclarationStatement[21495-21550]:VariableDeclarationStatement[21460-21515]"
    }, {
      "left" : "if (runner.shouldRunCompiler())",
      "right" : "if (runner.shouldRunCompiler())",
      "info" : "IfStatement[21555-21650]:IfStatement[21520-21615]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21587-21614]:Block[21552-21579]"
    }, {
      "left" : "runner.run();",
      "right" : "runner.run();",
      "info" : "ExpressionStatement[21595-21608]:ExpressionStatement[21560-21573]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21620-21650]:Block[21585-21615]"
    }, {
      "left" : "System.exit(-1);",
      "right" : "System.exit(-1);",
      "info" : "ExpressionStatement[21628-21644]:ExpressionStatement[21593-21609]"
    } ]
  },
  "interFileMappings" : { }
}