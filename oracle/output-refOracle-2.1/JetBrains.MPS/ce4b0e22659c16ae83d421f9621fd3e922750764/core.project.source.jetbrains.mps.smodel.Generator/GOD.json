{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "Generator",
      "right" : "Generator",
      "info" : "TypeDeclaration[2128-10093]:TypeDeclaration[2128-10153]"
    }, {
      "left" : "public static final Logger LOG = LogManager.getLogger(Generator.class);",
      "right" : "public static final Logger LOG = LogManager.getLogger(Generator.class);",
      "info" : "FieldDeclaration[2184-2255]:FieldDeclaration[2184-2255]"
    }, {
      "left" : "@NotNull private Language mySourceLanguage;",
      "right" : "@NotNull private Language mySourceLanguage;",
      "info" : "FieldDeclaration[2359-2402]:FieldDeclaration[2359-2402]"
    }, {
      "left" : "private GeneratorDescriptor myGeneratorDescriptor;",
      "right" : "private GeneratorDescriptor myGeneratorDescriptor;",
      "info" : "FieldDeclaration[2405-2455]:FieldDeclaration[2405-2455]"
    }, {
      "left" : "public Generator(@NotNull Language sourceLanguage, GeneratorDescriptor generatorDescriptor)",
      "right" : "public Generator(@NotNull Language sourceLanguage, GeneratorDescriptor generatorDescriptor)",
      "info" : "MethodDeclaration[2459-2645]:MethodDeclaration[2459-2645]"
    }, {
      "left" : "//models will be named like xxx.modelName, where xxx is a part of newName before sharp symbol\n  public void rename(String newName)",
      "right" : "//models will be named like xxx.modelName, where xxx is a part of newName before sharp symbol\n  public void rename(String newName)",
      "info" : "MethodDeclaration[2651-2955]:MethodDeclaration[2651-3015]"
    }, {
      "left" : "public boolean isPackaged()",
      "right" : "public boolean isPackaged()",
      "info" : "MethodDeclaration[2959-3049]:MethodDeclaration[3019-3109]"
    }, {
      "left" : "public List<SModel> getOwnTemplateModels()",
      "right" : "public List<SModel> getOwnTemplateModels()",
      "info" : "MethodDeclaration[3053-3359]:MethodDeclaration[3113-3419]"
    }, {
      "left" : "public GeneratorDescriptor getModuleDescriptor()",
      "right" : "public GeneratorDescriptor getModuleDescriptor()",
      "info" : "MethodDeclaration[3363-3463]:MethodDeclaration[3423-3523]"
    }, {
      "left" : "public IFile getModuleSourceDir()",
      "right" : "public IFile getModuleSourceDir()",
      "info" : "MethodDeclaration[3467-3568]:MethodDeclaration[3527-3628]"
    }, {
      "left" : "public IFile getDescriptorFile()",
      "right" : "public IFile getDescriptorFile()",
      "info" : "MethodDeclaration[3572-3639]:MethodDeclaration[3632-3699]"
    }, {
      "left" : "protected void doSetModuleDescriptor(ModuleDescriptor moduleDescriptor)",
      "right" : "protected void doSetModuleDescriptor(ModuleDescriptor moduleDescriptor)",
      "info" : "MethodDeclaration[3643-4172]:MethodDeclaration[3703-4232]"
    }, {
      "left" : "public String getAlias()",
      "right" : "public String getAlias()",
      "info" : "MethodDeclaration[4176-4354]:MethodDeclaration[4236-4414]"
    }, {
      "left" : "public static String generateGeneratorUID(Language sourceLanguage)",
      "right" : "public static String generateGeneratorUID(Language sourceLanguage)",
      "info" : "MethodDeclaration[4358-4528]:MethodDeclaration[4418-4588]"
    }, {
      "left" : "public Language getSourceLanguage()",
      "right" : "public Language getSourceLanguage()",
      "info" : "MethodDeclaration[4532-4602]:MethodDeclaration[4592-4662]"
    }, {
      "left" : "public boolean generateTemplates()",
      "right" : "public boolean generateTemplates()",
      "info" : "MethodDeclaration[4606-4852]:MethodDeclaration[4666-4912]"
    }, {
      "left" : "public String toString()",
      "right" : "public String toString()",
      "info" : "MethodDeclaration[4856-4926]:MethodDeclaration[4916-4986]"
    }, {
      "left" : "public void save()",
      "right" : "public void save()",
      "info" : "MethodDeclaration[4930-5013]:MethodDeclaration[4990-5073]"
    }, {
      "left" : "public Iterable<SDependency> getDeclaredDependencies()",
      "right" : "public Iterable<SDependency> getDeclaredDependencies()",
      "info" : "MethodDeclaration[5017-6167]:MethodDeclaration[5077-6227]"
    }, {
      "left" : "public List<SModuleReference> getReferencedGeneratorUIDs()",
      "right" : "public List<SModuleReference> getReferencedGeneratorUIDs()",
      "info" : "MethodDeclaration[6171-6321]:MethodDeclaration[6231-6381]"
    }, {
      "left" : "public List<Generator> getReferencedGenerators()",
      "right" : "public List<Generator> getReferencedGenerators()",
      "info" : "MethodDeclaration[6325-7043]:MethodDeclaration[6385-7103]"
    }, {
      "left" : "public boolean deleteReferenceFromPriorities(org.jetbrains.mps.openapi.model.SModelReference ref)",
      "right" : "public boolean deleteReferenceFromPriorities(org.jetbrains.mps.openapi.model.SModelReference ref)",
      "info" : "MethodDeclaration[7047-7666]:MethodDeclaration[7107-7726]"
    }, {
      "left" : "final void updateGeneratorDescriptor(GeneratorDescriptor generatorDescriptor)",
      "right" : "final void updateGeneratorDescriptor(GeneratorDescriptor generatorDescriptor)",
      "info" : "MethodDeclaration[7670-8292]:MethodDeclaration[7730-8352]"
    }, {
      "left" : "private void initGeneratorDescriptor(GeneratorDescriptor generatorDescriptor)",
      "right" : "private void initGeneratorDescriptor(GeneratorDescriptor generatorDescriptor)",
      "info" : "MethodDeclaration[8296-8919]:MethodDeclaration[8356-8979]"
    }, {
      "left" : "GeneratorModelsAutoImports",
      "right" : "GeneratorModelsAutoImports",
      "info" : "TypeDeclaration[8923-9980]:TypeDeclaration[8983-10040]"
    }, {
      "left" : "public Class<Generator> getApplicableSModuleClass()",
      "right" : "public Class<Generator> getApplicableSModuleClass()",
      "info" : "MethodDeclaration[9019-9122]:MethodDeclaration[9079-9182]"
    }, {
      "left" : "public Set<Language> getAutoImportedLanguages(Generator contextGenerator, org.jetbrains.mps.openapi.model.SModel model)",
      "right" : "public Set<Language> getAutoImportedLanguages(Generator contextGenerator, org.jetbrains.mps.openapi.model.SModel model)",
      "info" : "MethodDeclaration[9128-9764]:MethodDeclaration[9188-9824]"
    }, {
      "left" : "public Set<DevKit> getAutoImportedDevKits(Generator contextModule, org.jetbrains.mps.openapi.model.SModel model)",
      "right" : "public Set<DevKit> getAutoImportedDevKits(Generator contextModule, org.jetbrains.mps.openapi.model.SModel model)",
      "info" : "MethodDeclaration[9770-9976]:MethodDeclaration[9830-10036]"
    }, {
      "left" : "public ClassLoader getRootClassLoader()",
      "right" : "public ClassLoader getRootClassLoader()",
      "info" : "MethodDeclaration[9984-10091]:MethodDeclaration[10044-10151]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2266-2355]:Block[2266-2355]"
    }, {
      "left" : "ModelsAutoImportsManager.registerContributor(new GeneratorModelsAutoImports());",
      "right" : "ModelsAutoImportsManager.registerContributor(new GeneratorModelsAutoImports());",
      "info" : "ExpressionStatement[2272-2351]:ExpressionStatement[2272-2351]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2551-2645]:Block[2551-2645]"
    }, {
      "left" : "mySourceLanguage = sourceLanguage;",
      "right" : "mySourceLanguage = sourceLanguage;",
      "info" : "ExpressionStatement[2557-2591]:ExpressionStatement[2557-2591]"
    }, {
      "left" : "initGeneratorDescriptor(generatorDescriptor);",
      "right" : "initGeneratorDescriptor(generatorDescriptor);",
      "info" : "ExpressionStatement[2596-2641]:ExpressionStatement[2596-2641]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2794-2955]:Block[2794-3015]"
    }, {
      "left" : "int sharp = newName.indexOf(\"#\");",
      "right" : "int sharp = newName.indexOf(\"#\");",
      "info" : "VariableDeclarationStatement[2800-2833]:VariableDeclarationStatement[2800-2833]"
    }, {
      "left" : "super.rename(sharp < 0 ? newName : newName.substring(sharp));",
      "right" : "renameModels(getSourceLanguage().getModuleName(), newName);",
      "info" : "ExpressionStatement[2838-2899]:ExpressionStatement[2900-2959]"
    }, {
      "left" : "myGeneratorDescriptor.setGeneratorUID(newName);",
      "right" : "myGeneratorDescriptor.setGeneratorUID(newName);",
      "info" : "ExpressionStatement[2904-2951]:ExpressionStatement[2964-3011]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2999-3049]:Block[3059-3109]"
    }, {
      "left" : "return getSourceLanguage().isPackaged();",
      "right" : "return getSourceLanguage().isPackaged();",
      "info" : "ReturnStatement[3005-3045]:ReturnStatement[3065-3105]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3096-3359]:Block[3156-3419]"
    }, {
      "left" : "List<SModel> templateModels = new ArrayList<SModel>();",
      "right" : "List<SModel> templateModels = new ArrayList<SModel>();",
      "info" : "VariableDeclarationStatement[3102-3156]:VariableDeclarationStatement[3162-3216]"
    }, {
      "left" : "for (SModel modelDescriptor : getModels())",
      "right" : "for (SModel modelDescriptor : getModels())",
      "info" : "EnhancedForStatement[3161-3328]:EnhancedForStatement[3221-3388]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3204-3328]:Block[3264-3388]"
    }, {
      "left" : "if (SModelStereotype.isGeneratorModel(modelDescriptor))",
      "right" : "if (SModelStereotype.isGeneratorModel(modelDescriptor))",
      "info" : "IfStatement[3212-3322]:IfStatement[3272-3382]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3268-3322]:Block[3328-3382]"
    }, {
      "left" : "templateModels.add(modelDescriptor);",
      "right" : "templateModels.add(modelDescriptor);",
      "info" : "ExpressionStatement[3278-3314]:ExpressionStatement[3338-3374]"
    }, {
      "left" : "return templateModels;",
      "right" : "return templateModels;",
      "info" : "ReturnStatement[3333-3355]:ReturnStatement[3393-3415]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3424-3463]:Block[3484-3523]"
    }, {
      "left" : "return myGeneratorDescriptor;",
      "right" : "return myGeneratorDescriptor;",
      "info" : "ReturnStatement[3430-3459]:ReturnStatement[3490-3519]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3513-3568]:Block[3573-3628]"
    }, {
      "left" : "return mySourceLanguage.getModuleSourceDir();",
      "right" : "return mySourceLanguage.getModuleSourceDir();",
      "info" : "ReturnStatement[3519-3564]:ReturnStatement[3579-3624]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3617-3639]:Block[3677-3699]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[3623-3635]:ReturnStatement[3683-3695]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3727-4172]:Block[3787-4232]"
    }, {
      "left" : "assert moduleDescriptor instanceof GeneratorDescriptor;",
      "right" : "assert moduleDescriptor instanceof GeneratorDescriptor;",
      "info" : "AssertStatement[3733-3788]:AssertStatement[3793-3848]"
    }, {
      "left" : "LanguageDescriptor languageDescriptor = getSourceLanguage().getModuleDescriptor();",
      "right" : "LanguageDescriptor languageDescriptor = getSourceLanguage().getModuleDescriptor();",
      "info" : "VariableDeclarationStatement[3793-3875]:VariableDeclarationStatement[3853-3935]"
    }, {
      "left" : "int index = languageDescriptor.getGenerators().indexOf(getModuleDescriptor());",
      "right" : "int index = languageDescriptor.getGenerators().indexOf(getModuleDescriptor());",
      "info" : "VariableDeclarationStatement[3880-3958]:VariableDeclarationStatement[3940-4018]"
    }, {
      "left" : "languageDescriptor.getGenerators().remove(index);",
      "right" : "languageDescriptor.getGenerators().remove(index);",
      "info" : "ExpressionStatement[3963-4012]:ExpressionStatement[4023-4072]"
    }, {
      "left" : "languageDescriptor.getGenerators().add(index, (GeneratorDescriptor) moduleDescriptor);",
      "right" : "languageDescriptor.getGenerators().add(index, (GeneratorDescriptor) moduleDescriptor);",
      "info" : "ExpressionStatement[4017-4103]:ExpressionStatement[4077-4163]"
    }, {
      "left" : "getSourceLanguage().setModuleDescriptor(languageDescriptor);",
      "right" : "getSourceLanguage().setModuleDescriptor(languageDescriptor);",
      "info" : "ExpressionStatement[4108-4168]:ExpressionStatement[4168-4228]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4201-4354]:Block[4261-4414]"
    }, {
      "left" : "String name = myGeneratorDescriptor.getNamespace();",
      "right" : "String name = myGeneratorDescriptor.getNamespace();",
      "info" : "VariableDeclarationStatement[4207-4258]:VariableDeclarationStatement[4267-4318]"
    }, {
      "left" : "return getSourceLanguage().getModuleName() + \"/\" + (name == null ? \"<no name>\" : name);",
      "right" : "return getSourceLanguage().getModuleName() + \"/\" + (name == null ? \"<no name>\" : name);",
      "info" : "ReturnStatement[4263-4350]:ReturnStatement[4323-4410]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4425-4528]:Block[4485-4588]"
    }, {
      "left" : "return sourceLanguage.getModuleName() + \"#\" + jetbrains.mps.smodel.SModel.generateUniqueId();",
      "right" : "return sourceLanguage.getModuleName() + \"#\" + jetbrains.mps.smodel.SModel.generateUniqueId();",
      "info" : "ReturnStatement[4431-4524]:ReturnStatement[4491-4584]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4568-4602]:Block[4628-4662]"
    }, {
      "left" : "return mySourceLanguage;",
      "right" : "return mySourceLanguage;",
      "info" : "ReturnStatement[4574-4598]:ReturnStatement[4634-4658]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4791-4852]:Block[4851-4912]"
    }, {
      "left" : "return myGeneratorDescriptor.isGenerateTemplates();",
      "right" : "return myGeneratorDescriptor.isGenerateTemplates();",
      "info" : "ReturnStatement[4797-4848]:ReturnStatement[4857-4908]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4881-4926]:Block[4941-4986]"
    }, {
      "left" : "return getAlias() + \" [generator]\";",
      "right" : "return getAlias() + \" [generator]\";",
      "info" : "ReturnStatement[4887-4922]:ReturnStatement[4947-4982]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4961-5013]:Block[5021-5073]"
    }, {
      "left" : "super.save();",
      "right" : "super.save();",
      "info" : "ExpressionStatement[4967-4980]:ExpressionStatement[5027-5040]"
    }, {
      "left" : "mySourceLanguage.save();",
      "right" : "mySourceLanguage.save();",
      "info" : "ExpressionStatement[4985-5009]:ExpressionStatement[5045-5069]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5084-6167]:Block[5144-6227]"
    }, {
      "left" : "HashSet<SDependency> rv = new HashSet<SDependency>(IterableUtil.asCollection(super.getDeclaredDependencies()));",
      "right" : "HashSet<SDependency> rv = new HashSet<SDependency>(IterableUtil.asCollection(super.getDeclaredDependencies()));",
      "info" : "VariableDeclarationStatement[5090-5201]:VariableDeclarationStatement[5150-5261]"
    }, {
      "left" : "final SRepository repo = getRepository();",
      "right" : "final SRepository repo = getRepository();",
      "info" : "VariableDeclarationStatement[5206-5247]:VariableDeclarationStatement[5266-5307]"
    }, {
      "left" : "rv.add(new SDependencyImpl(mySourceLanguage.getModuleReference(), repo, SDependencyScope.DEFAULT, false));",
      "right" : "rv.add(new SDependencyImpl(mySourceLanguage.getModuleReference(), repo, SDependencyScope.DEFAULT, false));",
      "info" : "ExpressionStatement[5295-5401]:ExpressionStatement[5355-5461]"
    }, {
      "left" : "for (SModuleReference rt : mySourceLanguage.getRuntimeModulesReferences())",
      "right" : "for (SModuleReference rt : mySourceLanguage.getRuntimeModulesReferences())",
      "info" : "EnhancedForStatement[5406-5566]:EnhancedForStatement[5466-5626]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5481-5566]:Block[5541-5626]"
    }, {
      "left" : "rv.add(new SDependencyImpl(rt, repo, SDependencyScope.RUNTIME, false));",
      "right" : "rv.add(new SDependencyImpl(rt, repo, SDependencyScope.RUNTIME, false));",
      "info" : "ExpressionStatement[5489-5560]:ExpressionStatement[5549-5620]"
    }, {
      "left" : "for (SModuleReference refGenerator : getReferencedGeneratorUIDs())",
      "right" : "for (SModuleReference refGenerator : getReferencedGeneratorUIDs())",
      "info" : "EnhancedForStatement[5635-6148]:EnhancedForStatement[5695-6208]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5702-6148]:Block[5762-6208]"
    }, {
      "left" : "rv.add(new SDependencyImpl(refGenerator, repo, SDependencyScope.EXTENDS, false));",
      "right" : "rv.add(new SDependencyImpl(refGenerator, repo, SDependencyScope.EXTENDS, false));",
      "info" : "ExpressionStatement[6061-6142]:ExpressionStatement[6121-6202]"
    }, {
      "left" : "return rv;",
      "right" : "return rv;",
      "info" : "ReturnStatement[6153-6163]:ReturnStatement[6213-6223]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6230-6321]:Block[6290-6381]"
    }, {
      "left" : "return new ArrayList<SModuleReference>(myGeneratorDescriptor.getDepGenerators());",
      "right" : "return new ArrayList<SModuleReference>(myGeneratorDescriptor.getDepGenerators());",
      "info" : "ReturnStatement[6236-6317]:ReturnStatement[6296-6377]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6730-7043]:Block[6790-7103]"
    }, {
      "left" : "List<Generator> result = new ArrayList<Generator>();",
      "right" : "List<Generator> result = new ArrayList<Generator>();",
      "info" : "VariableDeclarationStatement[6736-6788]:VariableDeclarationStatement[6796-6848]"
    }, {
      "left" : "for (SModuleReference guid : getReferencedGeneratorUIDs())",
      "right" : "for (SModuleReference guid : getReferencedGeneratorUIDs())",
      "info" : "EnhancedForStatement[6793-7020]:EnhancedForStatement[6853-7080]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6852-7020]:Block[6912-7080]"
    }, {
      "left" : "SModule module = guid.resolve(MPSModuleRepository.getInstance());",
      "right" : "SModule module = guid.resolve(MPSModuleRepository.getInstance());",
      "info" : "VariableDeclarationStatement[6860-6925]:VariableDeclarationStatement[6920-6985]"
    }, {
      "left" : "if (module instanceof Generator)",
      "right" : "if (module instanceof Generator)",
      "info" : "IfStatement[6932-7014]:IfStatement[6992-7074]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6965-7014]:Block[7025-7074]"
    }, {
      "left" : "result.add((Generator) module);",
      "right" : "result.add((Generator) module);",
      "info" : "ExpressionStatement[6975-7006]:ExpressionStatement[7035-7066]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[7025-7039]:ReturnStatement[7085-7099]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7145-7666]:Block[7205-7726]"
    }, {
      "left" : "boolean[] descriptorChanged = new boolean[]{false};",
      "right" : "boolean[] descriptorChanged = new boolean[]{false};",
      "info" : "VariableDeclarationStatement[7151-7202]:VariableDeclarationStatement[7211-7262]"
    }, {
      "left" : "Iterator<MappingPriorityRule> it = myGeneratorDescriptor.getPriorityRules().iterator();",
      "right" : "Iterator<MappingPriorityRule> it = myGeneratorDescriptor.getPriorityRules().iterator();",
      "info" : "VariableDeclarationStatement[7207-7294]:VariableDeclarationStatement[7267-7354]"
    }, {
      "left" : "while (it.hasNext())",
      "right" : "while (it.hasNext())",
      "info" : "WhileStatement[7299-7629]:WhileStatement[7359-7689]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7320-7629]:Block[7380-7689]"
    }, {
      "left" : "MappingPriorityRule rule = it.next();",
      "right" : "MappingPriorityRule rule = it.next();",
      "info" : "VariableDeclarationStatement[7328-7365]:VariableDeclarationStatement[7388-7425]"
    }, {
      "left" : "MappingConfig_AbstractRef right = rule.getRight();",
      "right" : "MappingConfig_AbstractRef right = rule.getRight();",
      "info" : "VariableDeclarationStatement[7372-7422]:VariableDeclarationStatement[7432-7482]"
    }, {
      "left" : "MappingConfig_AbstractRef left = rule.getLeft();",
      "right" : "MappingConfig_AbstractRef left = rule.getLeft();",
      "info" : "VariableDeclarationStatement[7429-7477]:VariableDeclarationStatement[7489-7537]"
    }, {
      "left" : "if (right.removeModelReference(ref, descriptorChanged) || left.removeModelReference(ref, descriptorChanged))",
      "right" : "if (right.removeModelReference(ref, descriptorChanged) || left.removeModelReference(ref, descriptorChanged))",
      "info" : "IfStatement[7484-7623]:IfStatement[7544-7683]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7593-7623]:Block[7653-7683]"
    }, {
      "left" : "it.remove();",
      "right" : "it.remove();",
      "info" : "ExpressionStatement[7603-7615]:ExpressionStatement[7663-7675]"
    }, {
      "left" : "return descriptorChanged[0];",
      "right" : "return descriptorChanged[0];",
      "info" : "ReturnStatement[7634-7662]:ReturnStatement[7694-7722]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8202-8292]:Block[8262-8352]"
    }, {
      "left" : "initGeneratorDescriptor(generatorDescriptor);",
      "right" : "initGeneratorDescriptor(generatorDescriptor);",
      "info" : "ExpressionStatement[8208-8253]:ExpressionStatement[8268-8313]"
    }, {
      "left" : "reloadAfterDescriptorChange();",
      "right" : "reloadAfterDescriptorChange();",
      "info" : "ExpressionStatement[8258-8288]:ExpressionStatement[8318-8348]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8374-8919]:Block[8434-8979]"
    }, {
      "left" : "myGeneratorDescriptor = generatorDescriptor;",
      "right" : "myGeneratorDescriptor = generatorDescriptor;",
      "info" : "ExpressionStatement[8380-8424]:ExpressionStatement[8440-8484]"
    }, {
      "left" : "String uid = myGeneratorDescriptor.getGeneratorUID();",
      "right" : "String uid = myGeneratorDescriptor.getGeneratorUID();",
      "info" : "VariableDeclarationStatement[8430-8483]:VariableDeclarationStatement[8490-8543]"
    }, {
      "left" : "if (uid == null)",
      "right" : "if (uid == null)",
      "info" : "IfStatement[8488-8597]:IfStatement[8548-8657]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8505-8597]:Block[8565-8657]"
    }, {
      "left" : "myGeneratorDescriptor.setGeneratorUID(generateGeneratorUID(mySourceLanguage));",
      "right" : "myGeneratorDescriptor.setGeneratorUID(generateGeneratorUID(mySourceLanguage));",
      "info" : "ExpressionStatement[8513-8591]:ExpressionStatement[8573-8651]"
    }, {
      "left" : "ModuleId uuid = myGeneratorDescriptor.getId();",
      "right" : "ModuleId uuid = myGeneratorDescriptor.getId();",
      "info" : "VariableDeclarationStatement[8603-8649]:VariableDeclarationStatement[8663-8709]"
    }, {
      "left" : "if (uuid == null)",
      "right" : "if (uuid == null)",
      "info" : "IfStatement[8654-8753]:IfStatement[8714-8813]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8672-8753]:Block[8732-8813]"
    }, {
      "left" : "uuid = ModuleId.regular();",
      "right" : "uuid = ModuleId.regular();",
      "info" : "ExpressionStatement[8680-8706]:ExpressionStatement[8740-8766]"
    }, {
      "left" : "myGeneratorDescriptor.setId(uuid);",
      "right" : "myGeneratorDescriptor.setId(uuid);",
      "info" : "ExpressionStatement[8713-8747]:ExpressionStatement[8773-8807]"
    }, {
      "left" : "SModuleReference mp = new jetbrains.mps.project.structure.modules.ModuleReference(myGeneratorDescriptor.getGeneratorUID(), uuid);",
      "right" : "SModuleReference mp = new jetbrains.mps.project.structure.modules.ModuleReference(myGeneratorDescriptor.getGeneratorUID(), uuid);",
      "info" : "VariableDeclarationStatement[8758-8887]:VariableDeclarationStatement[8818-8947]"
    }, {
      "left" : "setModuleReference(mp);",
      "right" : "setModuleReference(mp);",
      "info" : "ExpressionStatement[8892-8915]:ExpressionStatement[8952-8975]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9085-9122]:Block[9145-9182]"
    }, {
      "left" : "return Generator.class;",
      "right" : "return Generator.class;",
      "info" : "ReturnStatement[9093-9116]:ReturnStatement[9153-9176]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9262-9764]:Block[9322-9824]"
    }, {
      "left" : "if (SModelStereotype.isGeneratorModel(model))",
      "right" : "if (SModelStereotype.isGeneratorModel(model))",
      "info" : "IfStatement[9270-9758]:IfStatement[9330-9818]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9316-9704]:Block[9376-9764]"
    }, {
      "left" : "Language sourceLanguage = contextGenerator.getSourceLanguage();",
      "right" : "Language sourceLanguage = contextGenerator.getSourceLanguage();",
      "info" : "VariableDeclarationStatement[9326-9389]:VariableDeclarationStatement[9386-9449]"
    }, {
      "left" : "Set<Language> result = new LinkedHashSet<Language>();",
      "right" : "Set<Language> result = new LinkedHashSet<Language>();",
      "info" : "VariableDeclarationStatement[9399-9452]:VariableDeclarationStatement[9459-9512]"
    }, {
      "left" : "result.add(BootstrapLanguages.generatorLanguage());",
      "right" : "result.add(BootstrapLanguages.generatorLanguage());",
      "info" : "ExpressionStatement[9461-9512]:ExpressionStatement[9521-9572]"
    }, {
      "left" : "result.add(BootstrapLanguages.generatorContextLanguage());",
      "right" : "result.add(BootstrapLanguages.generatorContextLanguage());",
      "info" : "ExpressionStatement[9521-9579]:ExpressionStatement[9581-9639]"
    }, {
      "left" : "result.addAll(LanguageDependenciesManager.getAllExtendedLanguages(sourceLanguage));",
      "right" : "result.addAll(LanguageDependenciesManager.getAllExtendedLanguages(sourceLanguage));",
      "info" : "ExpressionStatement[9589-9672]:ExpressionStatement[9649-9732]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[9682-9696]:ReturnStatement[9742-9756]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9710-9758]:Block[9770-9818]"
    }, {
      "left" : "return Collections.emptySet();",
      "right" : "return Collections.emptySet();",
      "info" : "ReturnStatement[9720-9750]:ReturnStatement[9780-9810]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9897-9976]:Block[9957-10036]"
    }, {
      "left" : "return Collections.singleton(BootstrapLanguages.generalDevKit());",
      "right" : "return Collections.singleton(BootstrapLanguages.generalDevKit());",
      "info" : "ReturnStatement[9905-9970]:ReturnStatement[9965-10030]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10036-10091]:Block[10096-10151]"
    }, {
      "left" : "return mySourceLanguage.getRootClassLoader();",
      "right" : "return mySourceLanguage.getRootClassLoader();",
      "info" : "ReturnStatement[10042-10087]:ReturnStatement[10102-10147]"
    } ]
  },
  "interFileMappings" : { }
}