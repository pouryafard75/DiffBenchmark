{
  "matchedElements" : [
 {
    "left" : "class : Entities",
    "right" : "class : Entities",
    "info" : "TypeDeclaration[179-76533]:TypeDeclaration[179-76537]"
  }, {
    "left" : "map",
    "right" : "map",
    "info" : "FieldDeclaration[700-735]:FieldDeclaration[700-735]"
  }, {
    "left" : "package EscapeMode(map )",
    "right" : "package EscapeMode(map )",
    "info" : "MethodDeclaration[745-823]:MethodDeclaration[745-823]"
  }, {
    "left" : "public getMap() : ",
    "right" : "public getMap() : ",
    "info" : "MethodDeclaration[833-907]:MethodDeclaration[833-907]"
  }, {
    "left" : "full",
    "right" : "full",
    "info" : "FieldDeclaration[919-968]:FieldDeclaration[919-968]"
  }, {
    "left" : "xhtmlByVal",
    "right" : "xhtmlByVal",
    "info" : "FieldDeclaration[973-1028]:FieldDeclaration[973-1028]"
  }, {
    "left" : "baseByVal",
    "right" : "baseByVal",
    "info" : "FieldDeclaration[1033-1087]:FieldDeclaration[1033-1087]"
  }, {
    "left" : "fullByVal",
    "right" : "fullByVal",
    "info" : "FieldDeclaration[1092-1146]:FieldDeclaration[1092-1146]"
  }, {
    "left" : "unescapePattern",
    "right" : "unescapePattern",
    "info" : "FieldDeclaration[1151-1254]:FieldDeclaration[1151-1258]"
  }, {
    "left" : "package escape(string , out ) : ",
    "right" : "package escape(string , out ) : ",
    "info" : "MethodDeclaration[1260-1396]:MethodDeclaration[1264-1400]"
  }, {
    "left" : "package escape(string , encoder , escapeMode ) : ",
    "right" : "package escape(string , encoder , escapeMode ) : ",
    "info" : "MethodDeclaration[1402-2040]:MethodDeclaration[1406-2044]"
  }, {
    "left" : "package unescape(string ) : ",
    "right" : "package unescape(string ) : ",
    "info" : "MethodDeclaration[2046-3439]:MethodDeclaration[2050-3443]"
  }, {
    "left" : "xhtmlArray",
    "right" : "xhtmlArray",
    "info" : "FieldDeclaration[3482-3684]:FieldDeclaration[3486-3688]"
  }, {
    "left" : "baseArray",
    "right" : "baseArray",
    "info" : "FieldDeclaration[3777-7202]:FieldDeclaration[3781-7206]"
  }, {
    "left" : "fullArray",
    "right" : "fullArray",
    "info" : "FieldDeclaration[7416-75608]:FieldDeclaration[7420-75612]"
  } ],
  "mappings" : [
 {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[377-383]:Modifier[377-383]"
  }, {
    "left" : "class",
    "right" : "class",
    "info" : "TYPE_DECLARATION_KIND[384-389]:TYPE_DECLARATION_KIND[384-389]"
  }, {
    "left" : "EscapeMode",
    "right" : "EscapeMode",
    "info" : "SimpleName[745-755]:SimpleName[745-755]"
  }, {
    "left" : "Map<Character, String> map",
    "right" : "Map<Character, String> map",
    "info" : "SingleVariableDeclaration[756-782]:SingleVariableDeclaration[756-782]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[784-823]:Block[784-823]"
  }, {
    "left" : "this.map = map;",
    "right" : "this.map = map;",
    "info" : "ExpressionStatement[798-813]:ExpressionStatement[798-813]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[833-839]:Modifier[833-839]"
  }, {
    "left" : "Map<Character, String>",
    "right" : "Map<Character, String>",
    "info" : "ParameterizedType[840-862]:ParameterizedType[840-862]"
  }, {
    "left" : "getMap",
    "right" : "getMap",
    "info" : "SimpleName[863-869]:SimpleName[863-869]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[872-907]:Block[872-907]"
  }, {
    "left" : "return map;",
    "right" : "return map;",
    "info" : "ReturnStatement[886-897]:ReturnStatement[886-897]"
  }, {
    "left" : "\"&(#(x|X)?([0-9a-fA-F]+)|[a-zA-Z]+);?\"",
    "right" : "\"&(#(x|X)?([0-9a-fA-F]+)|[a-zA-Z]+\\\\d*);?\"",
    "info" : "StringLiteral[1214-1252]:StringLiteral[1214-1256]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[1260-1266]:Modifier[1264-1270]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[1267-1273]:SimpleType[1271-1277]"
  }, {
    "left" : "escape",
    "right" : "escape",
    "info" : "SimpleName[1274-1280]:SimpleName[1278-1284]"
  }, {
    "left" : "String string",
    "right" : "String string",
    "info" : "SingleVariableDeclaration[1281-1294]:SingleVariableDeclaration[1285-1298]"
  }, {
    "left" : "Document.OutputSettings out",
    "right" : "Document.OutputSettings out",
    "info" : "SingleVariableDeclaration[1296-1323]:SingleVariableDeclaration[1300-1327]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[1325-1396]:Block[1329-1400]"
  }, {
    "left" : "return escape(string, out.encoder(), out.escapeMode());",
    "right" : "return escape(string, out.encoder(), out.escapeMode());",
    "info" : "ReturnStatement[1335-1390]:ReturnStatement[1339-1394]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[1402-1408]:Modifier[1406-1412]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[1409-1415]:SimpleType[1413-1419]"
  }, {
    "left" : "escape",
    "right" : "escape",
    "info" : "SimpleName[1416-1422]:SimpleName[1420-1426]"
  }, {
    "left" : "String string",
    "right" : "String string",
    "info" : "SingleVariableDeclaration[1423-1436]:SingleVariableDeclaration[1427-1440]"
  }, {
    "left" : "CharsetEncoder encoder",
    "right" : "CharsetEncoder encoder",
    "info" : "SingleVariableDeclaration[1438-1460]:SingleVariableDeclaration[1442-1464]"
  }, {
    "left" : "EscapeMode escapeMode",
    "right" : "EscapeMode escapeMode",
    "info" : "SingleVariableDeclaration[1462-1483]:SingleVariableDeclaration[1466-1487]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[1485-2040]:Block[1489-2044]"
  }, {
    "left" : "StringBuilder accum = new StringBuilder(string.length() * 2);",
    "right" : "StringBuilder accum = new StringBuilder(string.length() * 2);",
    "info" : "VariableDeclarationStatement[1495-1556]:VariableDeclarationStatement[1499-1560]"
  }, {
    "left" : "Map<Character, String> map = escapeMode.getMap();",
    "right" : "Map<Character, String> map = escapeMode.getMap();",
    "info" : "VariableDeclarationStatement[1565-1614]:VariableDeclarationStatement[1569-1618]"
  }, {
    "left" : "for (int pos = 0; pos < string.length(); pos++)",
    "right" : "for (int pos = 0; pos < string.length(); pos++)",
    "info" : "ForStatement[1624-2000]:ForStatement[1628-2004]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[1672-2000]:Block[1676-2004]"
  }, {
    "left" : "Character c = string.charAt(pos);",
    "right" : "Character c = string.charAt(pos);",
    "info" : "VariableDeclarationStatement[1686-1719]:VariableDeclarationStatement[1690-1723]"
  }, {
    "left" : "if (map.containsKey(c))",
    "right" : "if (map.containsKey(c))",
    "info" : "IfStatement[1732-1990]:IfStatement[1736-1994]"
  }, {
    "left" : "accum.append('&').append(map.get(c)).append(';');",
    "right" : "accum.append('&').append(map.get(c)).append(';');",
    "info" : "ExpressionStatement[1772-1821]:ExpressionStatement[1776-1825]"
  }, {
    "left" : "if (encoder.canEncode(c))",
    "right" : "if (encoder.canEncode(c))",
    "info" : "IfStatement[1839-1990]:IfStatement[1843-1994]"
  }, {
    "left" : "accum.append(c.charValue());",
    "right" : "accum.append(c.charValue());",
    "info" : "ExpressionStatement[1881-1909]:ExpressionStatement[1885-1913]"
  }, {
    "left" : "accum.append(\"&#\").append((int) c).append(';');",
    "right" : "accum.append(\"&#\").append((int) c).append(';');",
    "info" : "ExpressionStatement[1943-1990]:ExpressionStatement[1947-1994]"
  }, {
    "left" : "return accum.toString();",
    "right" : "return accum.toString();",
    "info" : "ReturnStatement[2010-2034]:ReturnStatement[2014-2038]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[2046-2052]:Modifier[2050-2056]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[2053-2059]:SimpleType[2057-2063]"
  }, {
    "left" : "unescape",
    "right" : "unescape",
    "info" : "SimpleName[2060-2068]:SimpleName[2064-2072]"
  }, {
    "left" : "String string",
    "right" : "String string",
    "info" : "SingleVariableDeclaration[2069-2082]:SingleVariableDeclaration[2073-2086]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[2084-3439]:Block[2088-3443]"
  }, {
    "left" : "if (!string.contains(\"&\"))",
    "right" : "if (!string.contains(\"&\"))",
    "info" : "IfStatement[2094-2147]:IfStatement[2098-2151]"
  }, {
    "left" : "return string;",
    "right" : "return string;",
    "info" : "ReturnStatement[2133-2147]:ReturnStatement[2137-2151]"
  }, {
    "left" : "Matcher m = unescapePattern.matcher(string);",
    "right" : "Matcher m = unescapePattern.matcher(string);",
    "info" : "VariableDeclarationStatement[2157-2201]:VariableDeclarationStatement[2161-2205]"
  }, {
    "left" : "StringBuffer accum = new StringBuffer(string.length());",
    "right" : "StringBuffer accum = new StringBuffer(string.length());",
    "info" : "VariableDeclarationStatement[2253-2308]:VariableDeclarationStatement[2257-2312]"
  }, {
    "left" : "while (m.find())",
    "right" : "while (m.find())",
    "info" : "WhileStatement[2482-3371]:WhileStatement[2486-3375]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[2499-3371]:Block[2503-3375]"
  }, {
    "left" : "int charval = -1;",
    "right" : "int charval = -1;",
    "info" : "VariableDeclarationStatement[2513-2530]:VariableDeclarationStatement[2517-2534]"
  }, {
    "left" : "String num = m.group(3);",
    "right" : "String num = m.group(3);",
    "info" : "VariableDeclarationStatement[2543-2567]:VariableDeclarationStatement[2547-2571]"
  }, {
    "left" : "if (num != null)",
    "right" : "if (num != null)",
    "info" : "IfStatement[2580-3006]:IfStatement[2584-3010]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[2597-2853]:Block[2601-2857]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[2615-2831]:TryStatement[2619-2835]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[2619-2779]:Block[2623-2783]"
  }, {
    "left" : "int base = m.group(2) != null ? 16 : 10;",
    "right" : "int base = m.group(2) != null ? 16 : 10;",
    "info" : "VariableDeclarationStatement[2641-2681]:VariableDeclarationStatement[2645-2685]"
  }, {
    "left" : "charval = Integer.valueOf(num, base);",
    "right" : "charval = Integer.valueOf(num, base);",
    "info" : "ExpressionStatement[2724-2761]:ExpressionStatement[2728-2765]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[2812-2831]:Block[2816-2835]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[2859-3006]:Block[2863-3010]"
  }, {
    "left" : "String name = m.group(1);",
    "right" : "String name = m.group(1);",
    "info" : "VariableDeclarationStatement[2877-2902]:VariableDeclarationStatement[2881-2906]"
  }, {
    "left" : "if (full.containsKey(name))",
    "right" : "if (full.containsKey(name))",
    "info" : "IfStatement[2919-2992]:IfStatement[2923-2996]"
  }, {
    "left" : "charval = full.get(name);",
    "right" : "charval = full.get(name);",
    "info" : "ExpressionStatement[2967-2992]:ExpressionStatement[2971-2996]"
  }, {
    "left" : "if (charval != -1 || charval > 0xFFFF)",
    "right" : "if (charval != -1 || charval > 0xFFFF)",
    "info" : "IfStatement[3020-3361]:IfStatement[3024-3365]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3059-3226]:Block[3063-3230]"
  }, {
    "left" : "String c = Character.toString((char) charval);",
    "right" : "String c = Character.toString((char) charval);",
    "info" : "VariableDeclarationStatement[3093-3139]:VariableDeclarationStatement[3097-3143]"
  }, {
    "left" : "m.appendReplacement(accum, Matcher.quoteReplacement(c));",
    "right" : "m.appendReplacement(accum, Matcher.quoteReplacement(c));",
    "info" : "ExpressionStatement[3156-3212]:ExpressionStatement[3160-3216]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3232-3361]:Block[3236-3365]"
  }, {
    "left" : "m.appendReplacement(accum, Matcher.quoteReplacement(m.group(0)));",
    "right" : "m.appendReplacement(accum, Matcher.quoteReplacement(m.group(0)));",
    "info" : "ExpressionStatement[3250-3315]:ExpressionStatement[3254-3319]"
  }, {
    "left" : "m.appendTail(accum);",
    "right" : "m.appendTail(accum);",
    "info" : "ExpressionStatement[3380-3400]:ExpressionStatement[3384-3404]"
  }, {
    "left" : "return accum.toString();",
    "right" : "return accum.toString();",
    "info" : "ReturnStatement[3409-3433]:ReturnStatement[3413-3437]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[75621-76529]:Block[75625-76533]"
  }, {
    "left" : "full = new HashMap<String, Character>(fullArray.length);",
    "right" : "full = new HashMap<String, Character>(fullArray.length);",
    "info" : "ExpressionStatement[75631-75687]:ExpressionStatement[75635-75691]"
  }, {
    "left" : "xhtmlByVal = new HashMap<Character, String>(xhtmlArray.length);",
    "right" : "xhtmlByVal = new HashMap<Character, String>(xhtmlArray.length);",
    "info" : "ExpressionStatement[75696-75759]:ExpressionStatement[75700-75763]"
  }, {
    "left" : "baseByVal = new HashMap<Character, String>(baseArray.length);",
    "right" : "baseByVal = new HashMap<Character, String>(baseArray.length);",
    "info" : "ExpressionStatement[75768-75829]:ExpressionStatement[75772-75833]"
  }, {
    "left" : "fullByVal = new HashMap<Character, String>(fullArray.length);",
    "right" : "fullByVal = new HashMap<Character, String>(fullArray.length);",
    "info" : "ExpressionStatement[75838-75899]:ExpressionStatement[75842-75903]"
  }, {
    "left" : "for (Object[] entity : xhtmlArray)",
    "right" : "for (Object[] entity : xhtmlArray)",
    "info" : "EnhancedForStatement[75909-76094]:EnhancedForStatement[75913-76098]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[75944-76094]:Block[75948-76098]"
  }, {
    "left" : "Character c = Character.valueOf((char) ((Integer) entity[1]).intValue());",
    "right" : "Character c = Character.valueOf((char) ((Integer) entity[1]).intValue());",
    "info" : "VariableDeclarationStatement[75958-76031]:VariableDeclarationStatement[75962-76035]"
  }, {
    "left" : "xhtmlByVal.put(c, ((String) entity[0]));",
    "right" : "xhtmlByVal.put(c, ((String) entity[0]));",
    "info" : "ExpressionStatement[76044-76084]:ExpressionStatement[76048-76088]"
  }, {
    "left" : "for (Object[] entity : baseArray)",
    "right" : "for (Object[] entity : baseArray)",
    "info" : "EnhancedForStatement[76103-76286]:EnhancedForStatement[76107-76290]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[76137-76286]:Block[76141-76290]"
  }, {
    "left" : "Character c = Character.valueOf((char) ((Integer) entity[1]).intValue());",
    "right" : "Character c = Character.valueOf((char) ((Integer) entity[1]).intValue());",
    "info" : "VariableDeclarationStatement[76151-76224]:VariableDeclarationStatement[76155-76228]"
  }, {
    "left" : "baseByVal.put(c, ((String) entity[0]));",
    "right" : "baseByVal.put(c, ((String) entity[0]));",
    "info" : "ExpressionStatement[76237-76276]:ExpressionStatement[76241-76280]"
  }, {
    "left" : "for (Object[] entity : fullArray)",
    "right" : "for (Object[] entity : fullArray)",
    "info" : "EnhancedForStatement[76295-76523]:EnhancedForStatement[76299-76527]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[76329-76523]:Block[76333-76527]"
  }, {
    "left" : "Character c = Character.valueOf((char) ((Integer) entity[1]).intValue());",
    "right" : "Character c = Character.valueOf((char) ((Integer) entity[1]).intValue());",
    "info" : "VariableDeclarationStatement[76343-76416]:VariableDeclarationStatement[76347-76420]"
  }, {
    "left" : "full.put((String) entity[0], c);",
    "right" : "full.put((String) entity[0], c);",
    "info" : "ExpressionStatement[76429-76461]:ExpressionStatement[76433-76465]"
  }, {
    "left" : "fullByVal.put(c, ((String) entity[0]));",
    "right" : "fullByVal.put(c, ((String) entity[0]));",
    "info" : "ExpressionStatement[76474-76513]:ExpressionStatement[76478-76517]"
  } ]
}