{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "Standalone",
      "right" : "Standalone",
      "info" : "TypeDeclaration[1627-9090]:TypeDeclaration[1463-8970]"
    }, {
      "left" : "@Argument(value = \"config\", prefix = \"--\", description = \"Path to directory containing global options (idea.config.path)\")\n  public String configPath;",
      "right" : "@Argument(value = \"config\", prefix = \"--\", description = \"Path to directory containing global options (idea.config.path)\")\n  public String configPath;",
      "info" : "FieldDeclaration[1752-1902]:FieldDeclaration[1588-1738]"
    }, {
      "left" : "@Argument(value = \"script\", prefix = \"--\", description = \"Path to Groovy script which will be used to initialize global options\")\n  public String initializationScriptPath;",
      "right" : "@Argument(value = \"script\", prefix = \"--\", description = \"Path to Groovy script which will be used to initialize global options\")\n  public String initializationScriptPath;",
      "info" : "FieldDeclaration[1906-2077]:FieldDeclaration[1742-1913]"
    }, {
      "left" : "@Argument(value = \"cache-dir\", prefix = \"--\", description = \"Path to directory to store build caches\")\n  public String cacheDirPath;",
      "right" : "@Argument(value = \"cache-dir\", prefix = \"--\", description = \"Path to directory to store build caches\")\n  public String cacheDirPath;",
      "info" : "FieldDeclaration[2081-2213]:FieldDeclaration[1917-2049]"
    }, {
      "left" : "@Argument(value = \"modules\", prefix = \"--\", delimiter = \",\", description = \"Comma-separated list of modules to compile\")\n  public String[] modules = ArrayUtil.EMPTY_STRING_ARRAY;",
      "right" : "@Argument(value = \"modules\", prefix = \"--\", delimiter = \",\", description = \"Comma-separated list of modules to compile\")\n  public String[] modules = ArrayUtil.EMPTY_STRING_ARRAY;",
      "info" : "FieldDeclaration[2217-2395]:FieldDeclaration[2053-2231]"
    }, {
      "left" : "@Argument(value = \"all-modules\", prefix = \"--\", description = \"Compile all modules\")\n  public boolean allModules;",
      "right" : "@Argument(value = \"all-modules\", prefix = \"--\", description = \"Compile all modules\")\n  public boolean allModules;",
      "info" : "FieldDeclaration[2399-2512]:FieldDeclaration[2235-2348]"
    }, {
      "left" : "@Argument(value = \"artifacts\", prefix = \"--\", delimiter = \",\", description = \"Comma-separated list of artifacts to build\")\n  public String[] artifacts = ArrayUtil.EMPTY_STRING_ARRAY;",
      "right" : "@Argument(value = \"artifacts\", prefix = \"--\", delimiter = \",\", description = \"Comma-separated list of artifacts to build\")\n  public String[] artifacts = ArrayUtil.EMPTY_STRING_ARRAY;",
      "info" : "FieldDeclaration[2516-2698]:FieldDeclaration[2352-2534]"
    }, {
      "left" : "@Argument(value = \"all-artifacts\", prefix = \"--\", description = \"Build all artifacts\")\n  public boolean allArtifacts;",
      "right" : "@Argument(value = \"all-artifacts\", prefix = \"--\", description = \"Build all artifacts\")\n  public boolean allArtifacts;",
      "info" : "FieldDeclaration[2702-2819]:FieldDeclaration[2538-2655]"
    }, {
      "left" : "@Argument(value = \"i\", description = \"Build incrementally\")\n  public boolean incremental;",
      "right" : "@Argument(value = \"i\", description = \"Build incrementally\")\n  public boolean incremental;",
      "info" : "FieldDeclaration[2823-2912]:FieldDeclaration[2659-2748]"
    }, {
      "left" : "public static void main(String[] args)",
      "right" : "public static void main(String[] args)",
      "info" : "MethodDeclaration[2916-3506]:MethodDeclaration[2796-3386]"
    }, {
      "left" : "private static void printUsageAndExit()",
      "right" : "private static void printUsageAndExit()",
      "info" : "MethodDeclaration[3510-3621]:MethodDeclaration[3390-3501]"
    }, {
      "left" : "public void loadAndRunBuild(final String projectPath)",
      "right" : "public void loadAndRunBuild(final String projectPath)",
      "info" : "MethodDeclaration[3625-5712]:MethodDeclaration[3505-5592]"
    }, {
      "left" : "public static void runBuild(JpsModelLoader loader, final File dataStorageRoot, boolean forceBuild, Set<String> modulesSet,\n                              List<String> artifactsList, final boolean includeTests, final MessageHandler messageHandler) throws Exception",
      "right" : "public static void runBuild(JpsModelLoader loader, final File dataStorageRoot, boolean forceBuild, Set<String> modulesSet,\n                              List<String> artifactsList, final boolean includeTests, final MessageHandler messageHandler) throws Exception",
      "info" : "MethodDeclaration[5716-6128]:MethodDeclaration[5596-6008]"
    }, {
      "left" : "public static void runBuild(JpsModelLoader loader, final File dataStorageRoot, boolean forceBuild, Set<String> modulesSet,\n                              final boolean allModules, List<String> artifactsList, final boolean includeTests,\n                              final MessageHandler messageHandler) throws Exception",
      "right" : "public static void runBuild(JpsModelLoader loader, final File dataStorageRoot, boolean forceBuild, Set<String> modulesSet,\n                              final boolean allModules, List<String> artifactsList, final boolean includeTests,\n                              final MessageHandler messageHandler) throws Exception",
      "info" : "MethodDeclaration[6132-6583]:MethodDeclaration[6012-6463]"
    }, {
      "left" : "public static void runBuild(JpsModelLoader loader, final File dataStorageRoot, boolean forceBuild, Set<String> modulesSet,\n                              final boolean allModules, List<String> artifactsList, boolean allArtifacts, final boolean includeTests,\n                              final MessageHandler messageHandler) throws Exception",
      "right" : "public static void runBuild(JpsModelLoader loader, final File dataStorageRoot, boolean forceBuild, Set<String> modulesSet,\n                              final boolean allModules, List<String> artifactsList, boolean allArtifacts, final boolean includeTests,\n                              final MessageHandler messageHandler) throws Exception",
      "info" : "MethodDeclaration[6587-7944]:MethodDeclaration[6467-7824]"
    }, {
      "left" : "public static void runBuild(JpsModelLoader loader, File dataStorageRoot, MessageHandler messageHandler, List<TargetTypeBuildScope> scopes,\n                              boolean includeDependenciesToScope) throws Exception",
      "right" : "public static void runBuild(JpsModelLoader loader, File dataStorageRoot, MessageHandler messageHandler, List<TargetTypeBuildScope> scopes,\n                              boolean includeDependenciesToScope) throws Exception",
      "info" : "MethodDeclaration[7948-8546]:MethodDeclaration[7828-8426]"
    }, {
      "left" : "ConsoleMessageHandler",
      "right" : "ConsoleMessageHandler",
      "info" : "TypeDeclaration[8550-9088]:TypeDeclaration[8430-8968]"
    }, {
      "left" : "public void processMessage(BuildMessage msg)",
      "right" : "public void processMessage(BuildMessage msg)",
      "info" : "MethodDeclaration[8625-9084]:MethodDeclaration[8505-8964]"
    } ],
    "mappings" : [
 {
      "left" : "org.jetbrains.jps.cmdline.BuildRunner",
      "right" : "org.jetbrains.jps.cmdline",
      "info" : "QualifiedName[945-982]:QualifiedName[945-970]"
    }, {
      "left" : "@SuppressWarnings({\"UseOfSystemOutOrSystemErr\", \"CallToPrintStackTrace\"})",
      "right" : "@SuppressWarnings({\"UseOfSystemOutOrSystemErr\", \"CallToPrintStackTrace\"})",
      "info" : "SingleMemberAnnotation[1650-1723]:SingleMemberAnnotation[1486-1559]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[1724-1730]:Modifier[1560-1566]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[1731-1736]:TYPE_DECLARATION_KIND[1567-1572]"
    }, {
      "left" : "Standalone",
      "right" : "Standalone",
      "info" : "SimpleName[1737-1747]:SimpleName[1573-1583]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[2916-2922]:Modifier[2796-2802]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[2923-2929]:Modifier[2803-2809]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[2930-2934]:PrimitiveType[2810-2814]"
    }, {
      "left" : "main",
      "right" : "main",
      "info" : "SimpleName[2935-2939]:SimpleName[2815-2819]"
    }, {
      "left" : "String[] args",
      "right" : "String[] args",
      "info" : "SingleVariableDeclaration[2940-2953]:SingleVariableDeclaration[2820-2833]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2955-3506]:Block[2835-3386]"
    }, {
      "left" : "Standalone instance = new Standalone();",
      "right" : "Standalone instance = new Standalone();",
      "info" : "VariableDeclarationStatement[2961-3000]:VariableDeclarationStatement[2841-2880]"
    }, {
      "left" : "List<String> projectPaths;",
      "right" : "List<String> projectPaths;",
      "info" : "VariableDeclarationStatement[3005-3031]:VariableDeclarationStatement[2885-2911]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[3036-3169]:TryStatement[2916-3049]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3040-3096]:Block[2920-2976]"
    }, {
      "left" : "projectPaths = Args.parse(instance, args);",
      "right" : "projectPaths = Args.parse(instance, args);",
      "info" : "ExpressionStatement[3048-3090]:ExpressionStatement[2928-2970]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3121-3169]:Block[3001-3049]"
    }, {
      "left" : "printUsageAndExit();",
      "right" : "printUsageAndExit();",
      "info" : "ExpressionStatement[3129-3149]:ExpressionStatement[3009-3029]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[3156-3163]:ReturnStatement[3036-3043]"
    }, {
      "left" : "if (projectPaths.isEmpty())",
      "right" : "if (projectPaths.isEmpty())",
      "info" : "IfStatement[3175-3299]:IfStatement[3055-3179]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3203-3299]:Block[3083-3179]"
    }, {
      "left" : "System.out.println(\"Path to project is not specified\");",
      "right" : "System.out.println(\"Path to project is not specified\");",
      "info" : "ExpressionStatement[3211-3266]:ExpressionStatement[3091-3146]"
    }, {
      "left" : "printUsageAndExit();",
      "right" : "printUsageAndExit();",
      "info" : "ExpressionStatement[3273-3293]:ExpressionStatement[3153-3173]"
    }, {
      "left" : "if (projectPaths.size() > 1)",
      "right" : "if (projectPaths.size() > 1)",
      "info" : "IfStatement[3304-3430]:IfStatement[3184-3310]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3333-3430]:Block[3213-3310]"
    }, {
      "left" : "System.out.println(\"Only one project can be specified\");",
      "right" : "System.out.println(\"Only one project can be specified\");",
      "info" : "ExpressionStatement[3341-3397]:ExpressionStatement[3221-3277]"
    }, {
      "left" : "printUsageAndExit();",
      "right" : "printUsageAndExit();",
      "info" : "ExpressionStatement[3404-3424]:ExpressionStatement[3284-3304]"
    }, {
      "left" : "instance.loadAndRunBuild(projectPaths.get(0));",
      "right" : "instance.loadAndRunBuild(projectPaths.get(0));",
      "info" : "ExpressionStatement[3436-3482]:ExpressionStatement[3316-3362]"
    }, {
      "left" : "System.exit(0);",
      "right" : "System.exit(0);",
      "info" : "ExpressionStatement[3487-3502]:ExpressionStatement[3367-3382]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[3510-3517]:Modifier[3390-3397]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[3518-3524]:Modifier[3398-3404]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[3525-3529]:PrimitiveType[3405-3409]"
    }, {
      "left" : "printUsageAndExit",
      "right" : "printUsageAndExit",
      "info" : "SimpleName[3530-3547]:SimpleName[3410-3427]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3550-3621]:Block[3430-3501]"
    }, {
      "left" : "Args.usage(System.err, new Standalone());",
      "right" : "Args.usage(System.err, new Standalone());",
      "info" : "ExpressionStatement[3556-3597]:ExpressionStatement[3436-3477]"
    }, {
      "left" : "System.exit(0);",
      "right" : "System.exit(0);",
      "info" : "ExpressionStatement[3602-3617]:ExpressionStatement[3482-3497]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[3625-3631]:Modifier[3505-3511]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[3632-3636]:PrimitiveType[3512-3516]"
    }, {
      "left" : "loadAndRunBuild",
      "right" : "loadAndRunBuild",
      "info" : "SimpleName[3637-3652]:SimpleName[3517-3532]"
    }, {
      "left" : "final String projectPath",
      "right" : "final String projectPath",
      "info" : "SingleVariableDeclaration[3653-3677]:SingleVariableDeclaration[3533-3557]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3679-5712]:Block[3559-5592]"
    }, {
      "left" : "String globalOptionsPath = null;",
      "right" : "String globalOptionsPath = null;",
      "info" : "VariableDeclarationStatement[3685-3717]:VariableDeclarationStatement[3565-3597]"
    }, {
      "left" : "if (configPath != null)",
      "right" : "if (configPath != null)",
      "info" : "IfStatement[3722-4054]:IfStatement[3602-3934]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3746-4054]:Block[3626-3934]"
    }, {
      "left" : "File optionsDir = new File(configPath, \"options\");",
      "right" : "File optionsDir = new File(configPath, \"options\");",
      "info" : "VariableDeclarationStatement[3754-3804]:VariableDeclarationStatement[3634-3684]"
    }, {
      "left" : "if (!optionsDir.isDirectory())",
      "right" : "if (!optionsDir.isDirectory())",
      "info" : "IfStatement[3811-3992]:IfStatement[3691-3872]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3842-3992]:Block[3722-3872]"
    }, {
      "left" : "System.err.println(\"'\" + configPath + \"' is not valid config path: \" + optionsDir.getAbsolutePath() + \" not found\");",
      "right" : "System.err.println(\"'\" + configPath + \"' is not valid config path: \" + optionsDir.getAbsolutePath() + \" not found\");",
      "info" : "ExpressionStatement[3852-3968]:ExpressionStatement[3732-3848]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[3977-3984]:ReturnStatement[3857-3864]"
    }, {
      "left" : "globalOptionsPath = optionsDir.getAbsolutePath();",
      "right" : "globalOptionsPath = optionsDir.getAbsolutePath();",
      "info" : "ExpressionStatement[3999-4048]:ExpressionStatement[3879-3928]"
    }, {
      "left" : "ParameterizedRunnable<JpsModel> initializer = null;",
      "right" : "ParameterizedRunnable<JpsModel> initializer = null;",
      "info" : "VariableDeclarationStatement[4060-4111]:VariableDeclarationStatement[3940-3991]"
    }, {
      "left" : "String scriptPath = initializationScriptPath;",
      "right" : "String scriptPath = initializationScriptPath;",
      "info" : "VariableDeclarationStatement[4116-4161]:VariableDeclarationStatement[3996-4041]"
    }, {
      "left" : "if (scriptPath != null)",
      "right" : "if (scriptPath != null)",
      "info" : "IfStatement[4166-4430]:IfStatement[4046-4310]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4190-4430]:Block[4070-4310]"
    }, {
      "left" : "File scriptFile = new File(scriptPath);",
      "right" : "File scriptFile = new File(scriptPath);",
      "info" : "VariableDeclarationStatement[4198-4237]:VariableDeclarationStatement[4078-4117]"
    }, {
      "left" : "if (!scriptFile.isFile())",
      "right" : "if (!scriptFile.isFile())",
      "info" : "IfStatement[4244-4364]:IfStatement[4124-4244]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4270-4364]:Block[4150-4244]"
    }, {
      "left" : "System.err.println(\"Script '\" + scriptPath + \"' not found\");",
      "right" : "System.err.println(\"Script '\" + scriptPath + \"' not found\");",
      "info" : "ExpressionStatement[4280-4340]:ExpressionStatement[4160-4220]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[4349-4356]:ReturnStatement[4229-4236]"
    }, {
      "left" : "initializer = new GroovyModelInitializer(scriptFile);",
      "right" : "initializer = new GroovyModelInitializer(scriptFile);",
      "info" : "ExpressionStatement[4371-4424]:ExpressionStatement[4251-4304]"
    }, {
      "left" : "if (modules.length == 0 && artifacts.length == 0 && !allModules && !allArtifacts)",
      "right" : "if (modules.length == 0 && artifacts.length == 0 && !allModules && !allArtifacts)",
      "info" : "IfStatement[4436-4690]:IfStatement[4316-4570]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4518-4690]:Block[4398-4570]"
    }, {
      "left" : "System.err.println(\"Nothing to compile: at least one of --modules, --artifacts, --all-modules or --all-artifacts parameters must be specified\");",
      "right" : "System.err.println(\"Nothing to compile: at least one of --modules, --artifacts, --all-modules or --all-artifacts parameters must be specified\");",
      "info" : "ExpressionStatement[4526-4670]:ExpressionStatement[4406-4550]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[4677-4684]:ReturnStatement[4557-4564]"
    }, {
      "left" : "JpsModelLoaderImpl loader = new JpsModelLoaderImpl(projectPath, globalOptionsPath, initializer);",
      "right" : "JpsModelLoaderImpl loader = new JpsModelLoaderImpl(projectPath, globalOptionsPath, initializer);",
      "info" : "VariableDeclarationStatement[4696-4792]:VariableDeclarationStatement[4576-4672]"
    }, {
      "left" : "Set<String> modulesSet = new HashSet<String>(Arrays.asList(modules));",
      "right" : "Set<String> modulesSet = new HashSet<String>(Arrays.asList(modules));",
      "info" : "VariableDeclarationStatement[4797-4866]:VariableDeclarationStatement[4677-4746]"
    }, {
      "left" : "List<String> artifactsList = Arrays.asList(artifacts);",
      "right" : "List<String> artifactsList = Arrays.asList(artifacts);",
      "info" : "VariableDeclarationStatement[4871-4925]:VariableDeclarationStatement[4751-4805]"
    }, {
      "left" : "File dataStorageRoot;",
      "right" : "File dataStorageRoot;",
      "info" : "VariableDeclarationStatement[4930-4951]:VariableDeclarationStatement[4810-4831]"
    }, {
      "left" : "if (cacheDirPath != null)",
      "right" : "if (cacheDirPath != null)",
      "info" : "IfStatement[4956-5117]:IfStatement[4836-4997]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4982-5037]:Block[4862-4917]"
    }, {
      "left" : "dataStorageRoot = new File(cacheDirPath);",
      "right" : "dataStorageRoot = new File(cacheDirPath);",
      "info" : "ExpressionStatement[4990-5031]:ExpressionStatement[4870-4911]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5047-5117]:Block[4927-4997]"
    }, {
      "left" : "dataStorageRoot = Utils.getDataStorageRoot(projectPath);",
      "right" : "dataStorageRoot = Utils.getDataStorageRoot(projectPath);",
      "info" : "ExpressionStatement[5055-5111]:ExpressionStatement[4935-4991]"
    }, {
      "left" : "if (dataStorageRoot == null)",
      "right" : "if (dataStorageRoot == null)",
      "info" : "IfStatement[5122-5276]:IfStatement[5002-5156]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5151-5276]:Block[5031-5156]"
    }, {
      "left" : "System.err.println(\"Error: Cannot determine build data storage root for project \" + projectPath);",
      "right" : "System.err.println(\"Error: Cannot determine build data storage root for project \" + projectPath);",
      "info" : "ExpressionStatement[5159-5256]:ExpressionStatement[5039-5136]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[5263-5270]:ReturnStatement[5143-5150]"
    }, {
      "left" : "long start = System.currentTimeMillis();",
      "right" : "long start = System.currentTimeMillis();",
      "info" : "VariableDeclarationStatement[5282-5322]:VariableDeclarationStatement[5162-5202]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[5327-5603]:TryStatement[5207-5483]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5331-5481]:Block[5211-5361]"
    }, {
      "left" : "runBuild(loader, dataStorageRoot, !incremental, modulesSet, allModules, artifactsList, allArtifacts, true, new ConsoleMessageHandler());",
      "right" : "runBuild(loader, dataStorageRoot, !incremental, modulesSet, allModules, artifactsList, allArtifacts, true, new ConsoleMessageHandler());",
      "info" : "ExpressionStatement[5339-5475]:ExpressionStatement[5219-5355]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5506-5603]:Block[5386-5483]"
    }, {
      "left" : "System.err.println(\"Internal error: \" + t.getMessage());",
      "right" : "System.err.println(\"Internal error: \" + t.getMessage());",
      "info" : "ExpressionStatement[5514-5570]:ExpressionStatement[5394-5450]"
    }, {
      "left" : "t.printStackTrace();",
      "right" : "t.printStackTrace();",
      "info" : "ExpressionStatement[5577-5597]:ExpressionStatement[5457-5477]"
    }, {
      "left" : "System.out.println(\"Build finished in \" + Utils.formatDuration(System.currentTimeMillis() - start));",
      "right" : "System.out.println(\"Build finished in \" + Utils.formatDuration(System.currentTimeMillis() - start));",
      "info" : "ExpressionStatement[5608-5708]:ExpressionStatement[5488-5588]"
    }, {
      "left" : "@Deprecated",
      "right" : "@Deprecated",
      "info" : "MarkerAnnotation[5716-5727]:MarkerAnnotation[5596-5607]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[5730-5736]:Modifier[5610-5616]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[5737-5743]:Modifier[5617-5623]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[5744-5748]:PrimitiveType[5624-5628]"
    }, {
      "left" : "runBuild",
      "right" : "runBuild",
      "info" : "SimpleName[5749-5757]:SimpleName[5629-5637]"
    }, {
      "left" : "JpsModelLoader loader",
      "right" : "JpsModelLoader loader",
      "info" : "SingleVariableDeclaration[5758-5779]:SingleVariableDeclaration[5638-5659]"
    }, {
      "left" : "final File dataStorageRoot",
      "right" : "final File dataStorageRoot",
      "info" : "SingleVariableDeclaration[5781-5807]:SingleVariableDeclaration[5661-5687]"
    }, {
      "left" : "boolean forceBuild",
      "right" : "boolean forceBuild",
      "info" : "SingleVariableDeclaration[5809-5827]:SingleVariableDeclaration[5689-5707]"
    }, {
      "left" : "Set<String> modulesSet",
      "right" : "Set<String> modulesSet",
      "info" : "SingleVariableDeclaration[5829-5851]:SingleVariableDeclaration[5709-5731]"
    }, {
      "left" : "List<String> artifactsList",
      "right" : "List<String> artifactsList",
      "info" : "SingleVariableDeclaration[5883-5909]:SingleVariableDeclaration[5763-5789]"
    }, {
      "left" : "final boolean includeTests",
      "right" : "final boolean includeTests",
      "info" : "SingleVariableDeclaration[5911-5937]:SingleVariableDeclaration[5791-5817]"
    }, {
      "left" : "final MessageHandler messageHandler",
      "right" : "final MessageHandler messageHandler",
      "info" : "SingleVariableDeclaration[5939-5974]:SingleVariableDeclaration[5819-5854]"
    }, {
      "left" : "Exception",
      "right" : "Exception",
      "info" : "SimpleType[5983-5992]:SimpleType[5863-5872]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5993-6128]:Block[5873-6008]"
    }, {
      "left" : "runBuild(loader, dataStorageRoot, forceBuild, modulesSet, modulesSet.isEmpty(), artifactsList, includeTests, messageHandler);",
      "right" : "runBuild(loader, dataStorageRoot, forceBuild, modulesSet, modulesSet.isEmpty(), artifactsList, includeTests, messageHandler);",
      "info" : "ExpressionStatement[5999-6124]:ExpressionStatement[5879-6004]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[6132-6138]:Modifier[6012-6018]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[6139-6145]:Modifier[6019-6025]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[6146-6150]:PrimitiveType[6026-6030]"
    }, {
      "left" : "runBuild",
      "right" : "runBuild",
      "info" : "SimpleName[6151-6159]:SimpleName[6031-6039]"
    }, {
      "left" : "JpsModelLoader loader",
      "right" : "JpsModelLoader loader",
      "info" : "SingleVariableDeclaration[6160-6181]:SingleVariableDeclaration[6040-6061]"
    }, {
      "left" : "final File dataStorageRoot",
      "right" : "final File dataStorageRoot",
      "info" : "SingleVariableDeclaration[6183-6209]:SingleVariableDeclaration[6063-6089]"
    }, {
      "left" : "boolean forceBuild",
      "right" : "boolean forceBuild",
      "info" : "SingleVariableDeclaration[6211-6229]:SingleVariableDeclaration[6091-6109]"
    }, {
      "left" : "Set<String> modulesSet",
      "right" : "Set<String> modulesSet",
      "info" : "SingleVariableDeclaration[6231-6253]:SingleVariableDeclaration[6111-6133]"
    }, {
      "left" : "final boolean allModules",
      "right" : "final boolean allModules",
      "info" : "SingleVariableDeclaration[6285-6309]:SingleVariableDeclaration[6165-6189]"
    }, {
      "left" : "List<String> artifactsList",
      "right" : "List<String> artifactsList",
      "info" : "SingleVariableDeclaration[6311-6337]:SingleVariableDeclaration[6191-6217]"
    }, {
      "left" : "final boolean includeTests",
      "right" : "final boolean includeTests",
      "info" : "SingleVariableDeclaration[6339-6365]:SingleVariableDeclaration[6219-6245]"
    }, {
      "left" : "final MessageHandler messageHandler",
      "right" : "final MessageHandler messageHandler",
      "info" : "SingleVariableDeclaration[6397-6432]:SingleVariableDeclaration[6277-6312]"
    }, {
      "left" : "Exception",
      "right" : "Exception",
      "info" : "SimpleType[6441-6450]:SimpleType[6321-6330]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6451-6583]:Block[6331-6463]"
    }, {
      "left" : "runBuild(loader, dataStorageRoot, forceBuild, modulesSet, allModules, artifactsList, false, includeTests, messageHandler);",
      "right" : "runBuild(loader, dataStorageRoot, forceBuild, modulesSet, allModules, artifactsList, false, includeTests, messageHandler);",
      "info" : "ExpressionStatement[6457-6579]:ExpressionStatement[6337-6459]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[6587-6593]:Modifier[6467-6473]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[6594-6600]:Modifier[6474-6480]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[6601-6605]:PrimitiveType[6481-6485]"
    }, {
      "left" : "runBuild",
      "right" : "runBuild",
      "info" : "SimpleName[6606-6614]:SimpleName[6486-6494]"
    }, {
      "left" : "JpsModelLoader loader",
      "right" : "JpsModelLoader loader",
      "info" : "SingleVariableDeclaration[6615-6636]:SingleVariableDeclaration[6495-6516]"
    }, {
      "left" : "final File dataStorageRoot",
      "right" : "final File dataStorageRoot",
      "info" : "SingleVariableDeclaration[6638-6664]:SingleVariableDeclaration[6518-6544]"
    }, {
      "left" : "boolean forceBuild",
      "right" : "boolean forceBuild",
      "info" : "SingleVariableDeclaration[6666-6684]:SingleVariableDeclaration[6546-6564]"
    }, {
      "left" : "Set<String> modulesSet",
      "right" : "Set<String> modulesSet",
      "info" : "SingleVariableDeclaration[6686-6708]:SingleVariableDeclaration[6566-6588]"
    }, {
      "left" : "final boolean allModules",
      "right" : "final boolean allModules",
      "info" : "SingleVariableDeclaration[6740-6764]:SingleVariableDeclaration[6620-6644]"
    }, {
      "left" : "List<String> artifactsList",
      "right" : "List<String> artifactsList",
      "info" : "SingleVariableDeclaration[6766-6792]:SingleVariableDeclaration[6646-6672]"
    }, {
      "left" : "boolean allArtifacts",
      "right" : "boolean allArtifacts",
      "info" : "SingleVariableDeclaration[6794-6814]:SingleVariableDeclaration[6674-6694]"
    }, {
      "left" : "final boolean includeTests",
      "right" : "final boolean includeTests",
      "info" : "SingleVariableDeclaration[6816-6842]:SingleVariableDeclaration[6696-6722]"
    }, {
      "left" : "final MessageHandler messageHandler",
      "right" : "final MessageHandler messageHandler",
      "info" : "SingleVariableDeclaration[6874-6909]:SingleVariableDeclaration[6754-6789]"
    }, {
      "left" : "Exception",
      "right" : "Exception",
      "info" : "SimpleType[6918-6927]:SimpleType[6798-6807]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6928-7944]:Block[6808-7824]"
    }, {
      "left" : "List<TargetTypeBuildScope> scopes = new ArrayList<TargetTypeBuildScope>();",
      "right" : "List<TargetTypeBuildScope> scopes = new ArrayList<TargetTypeBuildScope>();",
      "info" : "VariableDeclarationStatement[6934-7008]:VariableDeclarationStatement[6814-6888]"
    }, {
      "left" : "for (JavaModuleBuildTargetType type : JavaModuleBuildTargetType.ALL_TYPES)",
      "right" : "for (JavaModuleBuildTargetType type : JavaModuleBuildTargetType.ALL_TYPES)",
      "info" : "EnhancedForStatement[7013-7497]:EnhancedForStatement[6893-7377]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7088-7497]:Block[6968-7377]"
    }, {
      "left" : "if (includeTests || !type.isTests())",
      "right" : "if (includeTests || !type.isTests())",
      "info" : "IfStatement[7096-7491]:IfStatement[6976-7371]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7133-7491]:Block[7013-7371]"
    }, {
      "left" : "TargetTypeBuildScope.Builder builder = TargetTypeBuildScope.newBuilder().setTypeId(type.getTypeId()).setForceBuild(forceBuild);",
      "right" : "TargetTypeBuildScope.Builder builder = TargetTypeBuildScope.newBuilder().setTypeId(type.getTypeId()).setForceBuild(forceBuild);",
      "info" : "VariableDeclarationStatement[7143-7270]:VariableDeclarationStatement[7023-7150]"
    }, {
      "left" : "if (allModules)",
      "right" : "if (allModules)",
      "info" : "IfStatement[7279-7483]:IfStatement[7159-7363]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7295-7365]:Block[7175-7245]"
    }, {
      "left" : "scopes.add(builder.setAllTargets(true).build());",
      "right" : "scopes.add(builder.setAllTargets(true).build());",
      "info" : "ExpressionStatement[7307-7355]:ExpressionStatement[7187-7235]"
    }, {
      "left" : "if (!modulesSet.isEmpty())",
      "right" : "if (!modulesSet.isEmpty())",
      "info" : "IfStatement[7379-7483]:IfStatement[7259-7363]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7406-7483]:Block[7286-7363]"
    }, {
      "left" : "scopes.add(builder.addAllTargetId(modulesSet).build());",
      "right" : "scopes.add(builder.addAllTargetId(modulesSet).build());",
      "info" : "ExpressionStatement[7418-7473]:ExpressionStatement[7298-7353]"
    }, {
      "left" : "TargetTypeBuildScope.Builder builder = TargetTypeBuildScope.newBuilder()\n      .setTypeId(ArtifactBuildTargetType.INSTANCE.getTypeId())\n      .setForceBuild(forceBuild);",
      "right" : "TargetTypeBuildScope.Builder builder = TargetTypeBuildScope.newBuilder()\n      .setTypeId(ArtifactBuildTargetType.INSTANCE.getTypeId())\n      .setForceBuild(forceBuild);",
      "info" : "VariableDeclarationStatement[7503-7672]:VariableDeclarationStatement[7383-7552]"
    }, {
      "left" : "if (allArtifacts)",
      "right" : "if (allArtifacts)",
      "info" : "IfStatement[7678-7870]:IfStatement[7558-7750]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7696-7758]:Block[7576-7638]"
    }, {
      "left" : "scopes.add(builder.setAllTargets(true).build());",
      "right" : "scopes.add(builder.setAllTargets(true).build());",
      "info" : "ExpressionStatement[7704-7752]:ExpressionStatement[7584-7632]"
    }, {
      "left" : "if (!artifactsList.isEmpty())",
      "right" : "if (!artifactsList.isEmpty())",
      "info" : "IfStatement[7768-7870]:IfStatement[7648-7750]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7798-7870]:Block[7678-7750]"
    }, {
      "left" : "scopes.add(builder.addAllTargetId(artifactsList).build());",
      "right" : "scopes.add(builder.addAllTargetId(artifactsList).build());",
      "info" : "ExpressionStatement[7806-7864]:ExpressionStatement[7686-7744]"
    }, {
      "left" : "runBuild(loader, dataStorageRoot, messageHandler, scopes, true);",
      "right" : "runBuild(loader, dataStorageRoot, messageHandler, scopes, true);",
      "info" : "ExpressionStatement[7876-7940]:ExpressionStatement[7756-7820]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[7948-7954]:Modifier[7828-7834]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[7955-7961]:Modifier[7835-7841]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[7962-7966]:PrimitiveType[7842-7846]"
    }, {
      "left" : "runBuild",
      "right" : "runBuild",
      "info" : "SimpleName[7967-7975]:SimpleName[7847-7855]"
    }, {
      "left" : "JpsModelLoader loader",
      "right" : "JpsModelLoader loader",
      "info" : "SingleVariableDeclaration[7976-7997]:SingleVariableDeclaration[7856-7877]"
    }, {
      "left" : "File dataStorageRoot",
      "right" : "File dataStorageRoot",
      "info" : "SingleVariableDeclaration[7999-8019]:SingleVariableDeclaration[7879-7899]"
    }, {
      "left" : "MessageHandler messageHandler",
      "right" : "MessageHandler messageHandler",
      "info" : "SingleVariableDeclaration[8021-8050]:SingleVariableDeclaration[7901-7930]"
    }, {
      "left" : "List<TargetTypeBuildScope> scopes",
      "right" : "List<TargetTypeBuildScope> scopes",
      "info" : "SingleVariableDeclaration[8052-8085]:SingleVariableDeclaration[7932-7965]"
    }, {
      "left" : "boolean includeDependenciesToScope",
      "right" : "boolean includeDependenciesToScope",
      "info" : "SingleVariableDeclaration[8117-8151]:SingleVariableDeclaration[7997-8031]"
    }, {
      "left" : "Exception",
      "right" : "Exception",
      "info" : "SimpleType[8160-8169]:SimpleType[8040-8049]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8170-8546]:Block[8050-8426]"
    }, {
      "left" : "final BuildRunner buildRunner = new BuildRunner(loader);",
      "right" : "final BuildRunner buildRunner = new BuildRunner(loader);",
      "info" : "VariableDeclarationStatement[8176-8232]:VariableDeclarationStatement[8056-8112]"
    }, {
      "left" : "ProjectDescriptor descriptor = buildRunner.load(messageHandler, dataStorageRoot, new BuildFSState(true));",
      "right" : "ProjectDescriptor descriptor = buildRunner.load(messageHandler, dataStorageRoot, new BuildFSState(true));",
      "info" : "VariableDeclarationStatement[8237-8342]:VariableDeclarationStatement[8117-8222]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[8347-8542]:TryStatement[8227-8422]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8351-8494]:Block[8231-8374]"
    }, {
      "left" : "buildRunner.runBuild(descriptor, CanceledStatus.NULL, null, messageHandler, BuildType.BUILD, scopes, includeDependenciesToScope);",
      "right" : "buildRunner.runBuild(descriptor, CanceledStatus.NULL, null, messageHandler, BuildType.BUILD, scopes, includeDependenciesToScope);",
      "info" : "ExpressionStatement[8359-8488]:ExpressionStatement[8239-8368]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8507-8542]:Block[8387-8422]"
    }, {
      "left" : "descriptor.release();",
      "right" : "descriptor.release();",
      "info" : "ExpressionStatement[8515-8536]:ExpressionStatement[8395-8416]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[8550-8557]:Modifier[8430-8437]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[8558-8564]:Modifier[8438-8444]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[8565-8570]:TYPE_DECLARATION_KIND[8445-8450]"
    }, {
      "left" : "ConsoleMessageHandler",
      "right" : "ConsoleMessageHandler",
      "info" : "SimpleName[8571-8592]:SimpleName[8451-8472]"
    }, {
      "left" : "MessageHandler",
      "right" : "MessageHandler",
      "info" : "SimpleType[8604-8618]:SimpleType[8484-8498]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[8625-8634]:MarkerAnnotation[8505-8514]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[8639-8645]:Modifier[8519-8525]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[8646-8650]:PrimitiveType[8526-8530]"
    }, {
      "left" : "processMessage",
      "right" : "processMessage",
      "info" : "SimpleName[8651-8665]:SimpleName[8531-8545]"
    }, {
      "left" : "BuildMessage msg",
      "right" : "BuildMessage msg",
      "info" : "SingleVariableDeclaration[8666-8682]:SingleVariableDeclaration[8546-8562]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8684-9084]:Block[8564-8964]"
    }, {
      "left" : "String messageText = msg.getMessageText();",
      "right" : "String messageText = msg.getMessageText();",
      "info" : "VariableDeclarationStatement[8692-8734]:VariableDeclarationStatement[8572-8614]"
    }, {
      "left" : "if (messageText.isEmpty())",
      "right" : "if (messageText.isEmpty())",
      "info" : "IfStatement[8741-8775]:IfStatement[8621-8655]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[8768-8775]:ReturnStatement[8648-8655]"
    }, {
      "left" : "if (msg.getKind() == BuildMessage.Kind.ERROR)",
      "right" : "if (msg.getKind() == BuildMessage.Kind.ERROR)",
      "info" : "IfStatement[8782-9078]:IfStatement[8662-8958]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8828-8890]:Block[8708-8770]"
    }, {
      "left" : "System.err.println(\"Error: \" + messageText);",
      "right" : "System.err.println(\"Error: \" + messageText);",
      "info" : "ExpressionStatement[8838-8882]:ExpressionStatement[8718-8762]"
    }, {
      "left" : "if (msg.getKind() != BuildMessage.Kind.PROGRESS || !messageText.startsWith(\"Compiled\") && !messageText.startsWith(\"Copying\"))",
      "right" : "if (msg.getKind() != BuildMessage.Kind.PROGRESS || !messageText.startsWith(\"Compiled\") && !messageText.startsWith(\"Copying\"))",
      "info" : "IfStatement[8902-9078]:IfStatement[8782-8958]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9028-9078]:Block[8908-8958]"
    }, {
      "left" : "System.out.println(messageText);",
      "right" : "System.out.println(messageText);",
      "info" : "ExpressionStatement[9038-9070]:ExpressionStatement[8918-8950]"
    } ]
  },
  "interFileMappings" : { }
}