{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "CreateResourceBundleDialogComponent",
      "right" : "CreateResourceBundleDialogComponent",
      "info" : "TypeDeclaration[1886-16570]:TypeDeclaration[1968-17282]"
    }, {
      "left" : "private final static Logger LOG = Logger.getInstance(CreateResourceBundleDialogComponent.class);",
      "right" : "private final static Logger LOG = Logger.getInstance(CreateResourceBundleDialogComponent.class);",
      "info" : "FieldDeclaration[1975-2071]:FieldDeclaration[2057-2153]"
    }, {
      "left" : "private static final Comparator<Locale> LOCALE_COMPARATOR = new Comparator<Locale>() {\n    @Override\n    public int compare(Locale l1, Locale l2) {\n      if (l1 == PropertiesUtil.DEFAULT_LOCALE) {\n        return -1;\n      }\n      if (l2 == PropertiesUtil.DEFAULT_LOCALE) {\n        return 1;\n      }\n      return l1.toString().compareTo(l2.toString());\n    }\n  };",
      "right" : "private static final Comparator<Locale> LOCALE_COMPARATOR = new Comparator<Locale>() {\n    @Override\n    public int compare(Locale l1, Locale l2) {\n      if (l1 == PropertiesUtil.DEFAULT_LOCALE) {\n        return -1;\n      }\n      if (l2 == PropertiesUtil.DEFAULT_LOCALE) {\n        return 1;\n      }\n      return l1.toString().compareTo(l2.toString());\n    }\n  };",
      "info" : "FieldDeclaration[2075-2437]:FieldDeclaration[2157-2519]"
    }, {
      "left" : "public int compare(Locale l1, Locale l2)",
      "right" : "public int compare(Locale l1, Locale l2)",
      "info" : "MethodDeclaration[2166-2432]:MethodDeclaration[2248-2514]"
    }, {
      "left" : "private final Project myProject;",
      "right" : "private final Project myProject;",
      "info" : "FieldDeclaration[2440-2472]:FieldDeclaration[2522-2554]"
    }, {
      "left" : "private final PsiDirectory myDirectory;",
      "right" : "private final PsiDirectory myDirectory;",
      "info" : "FieldDeclaration[2475-2514]:FieldDeclaration[2557-2596]"
    }, {
      "left" : "private final ResourceBundle myResourceBundle;",
      "right" : "private final ResourceBundle myResourceBundle;",
      "info" : "FieldDeclaration[2517-2563]:FieldDeclaration[2599-2645]"
    }, {
      "left" : "private JPanel myPanel;",
      "right" : "private JPanel myPanel;",
      "info" : "FieldDeclaration[2566-2589]:FieldDeclaration[2648-2671]"
    }, {
      "left" : "private JTextField myResourceBundleBaseNameTextField;",
      "right" : "private JTextField myResourceBundleBaseNameTextField;",
      "info" : "FieldDeclaration[2592-2645]:FieldDeclaration[2674-2727]"
    }, {
      "left" : "private JButton myAddLocaleFromExistButton;",
      "right" : "private JButton myAddLocaleFromExistButton;",
      "info" : "FieldDeclaration[2648-2691]:FieldDeclaration[2730-2773]"
    }, {
      "left" : "private JPanel myNewBundleLocalesPanel;",
      "right" : "private JPanel myNewBundleLocalesPanel;",
      "info" : "FieldDeclaration[2694-2733]:FieldDeclaration[2776-2815]"
    }, {
      "left" : "private JPanel myProjectExistLocalesPanel;",
      "right" : "private JPanel myProjectExistLocalesPanel;",
      "info" : "FieldDeclaration[2736-2778]:FieldDeclaration[2818-2860]"
    }, {
      "left" : "private JButton myAddAllButton;",
      "right" : "private JButton myAddAllButton;",
      "info" : "FieldDeclaration[2781-2812]:FieldDeclaration[2863-2894]"
    }, {
      "left" : "private JPanel myResourceBundleNamePanel;",
      "right" : "private JPanel myResourceBundleNamePanel;",
      "info" : "FieldDeclaration[2815-2856]:FieldDeclaration[2897-2938]"
    }, {
      "left" : "private CollectionListModel<Locale> myLocalesModel;",
      "right" : "private CollectionListModel<Locale> myLocalesModel;",
      "info" : "FieldDeclaration[2859-2910]:FieldDeclaration[2941-2992]"
    }, {
      "left" : "public CreateResourceBundleDialogComponent(Project project, PsiDirectory directory, ResourceBundle resourceBundle)",
      "right" : "public CreateResourceBundleDialogComponent(Project project, PsiDirectory directory, ResourceBundle resourceBundle)",
      "info" : "MethodDeclaration[2914-3218]:MethodDeclaration[2996-3300]"
    }, {
      "left" : "Dialog",
      "right" : "Dialog",
      "info" : "TypeDeclaration[3222-4886]:TypeDeclaration[3304-5500]"
    }, {
      "left" : "@Nullable private final Project myProject;",
      "right" : "@Nullable private final Project myProject;",
      "info" : "FieldDeclaration[3277-3319]:FieldDeclaration[3359-3401]"
    }, {
      "left" : "@NotNull private final PsiDirectory myDirectory;",
      "right" : "@NotNull private final PsiDirectory myDirectory;",
      "info" : "FieldDeclaration[3324-3372]:FieldDeclaration[3406-3454]"
    }, {
      "left" : "private CreateResourceBundleDialogComponent myComponent;",
      "right" : "private CreateResourceBundleDialogComponent myComponent;",
      "info" : "FieldDeclaration[3377-3433]:FieldDeclaration[3459-3515]"
    }, {
      "left" : "private PsiElement[] myCreatedFiles;",
      "right" : "private PsiElement[] myCreatedFiles;",
      "info" : "FieldDeclaration[3438-3474]:FieldDeclaration[3520-3556]"
    }, {
      "left" : "protected Dialog(@Nullable Project project, @Nullable PsiDirectory directory, @Nullable ResourceBundle resourceBundle)",
      "right" : "protected Dialog(@Nullable Project project, @Nullable PsiDirectory directory, @Nullable ResourceBundle resourceBundle)",
      "info" : "MethodDeclaration[3480-4238]:MethodDeclaration[3562-4320]"
    }, {
      "left" : "protected void doOKAction()",
      "right" : "protected void doOKAction()",
      "info" : "MethodDeclaration[4244-4683]:MethodDeclaration[4326-4765]"
    }, {
      "left" : "protected JComponent createCenterPanel()",
      "right" : "protected JComponent createCenterPanel()",
      "info" : "MethodDeclaration[4689-4802]:MethodDeclaration[5303-5416]"
    }, {
      "left" : "public PsiElement[] getCreatedFiles()",
      "right" : "public PsiElement[] getCreatedFiles()",
      "info" : "MethodDeclaration[4808-4882]:MethodDeclaration[5422-5496]"
    }, {
      "left" : "private List<PsiFile> createPropertiesFiles()",
      "right" : "private List<PsiFile> createPropertiesFiles()",
      "info" : "MethodDeclaration[4890-5779]:MethodDeclaration[5504-6091]"
    }, {
      "left" : "public String fun(Locale locale)",
      "right" : "public String fun(Locale locale)",
      "info" : "MethodDeclaration[5099-5289]:MethodDeclaration[6289-6479]"
    }, {
      "left" : "public List<PsiFile> compute()",
      "right" : "public List<PsiFile> compute()",
      "info" : "MethodDeclaration[5428-5693]:MethodDeclaration[5740-6005]"
    }, {
      "left" : "public PsiFile fun(String n)",
      "right" : "public PsiFile fun(String n)",
      "info" : "MethodDeclaration[5565-5673]:MethodDeclaration[5877-5985]"
    }, {
      "left" : "private void combineToResourceBundleIfNeed(Collection<PsiFile> files)",
      "right" : "private void combineToResourceBundleIfNeed(Collection<PsiFile> files)",
      "info" : "MethodDeclaration[5783-7264]:MethodDeclaration[6495-7976]"
    }, {
      "left" : "public PropertiesFile fun(PsiFile dom)",
      "right" : "public PropertiesFile fun(PsiFile dom)",
      "info" : "MethodDeclaration[5981-6198]:MethodDeclaration[6693-6910]"
    }, {
      "left" : "private String getBaseName()",
      "right" : "private String getBaseName()",
      "info" : "MethodDeclaration[7268-7418]:MethodDeclaration[7980-8130]"
    }, {
      "left" : "private String canCreateAllFilesForAllLocales()",
      "right" : "private String canCreateAllFilesForAllLocales()",
      "info" : "MethodDeclaration[7422-8344]:MethodDeclaration[8134-9056]"
    }, {
      "left" : "public String fun(Locale locale)",
      "right" : "public String fun(Locale locale)",
      "info" : "MethodDeclaration[7699-7820]:MethodDeclaration[8411-8532]"
    }, {
      "left" : "public JPanel getPanel()",
      "right" : "public JPanel getPanel()",
      "info" : "MethodDeclaration[8348-8398]:MethodDeclaration[9060-9110]"
    }, {
      "left" : "private static List<Locale> extractLocalesFromString(final String rawLocales)",
      "right" : "private static List<Locale> extractLocalesFromString(final String rawLocales)",
      "info" : "MethodDeclaration[8402-9037]:MethodDeclaration[9114-9749]"
    }, {
      "left" : "private void createUIComponents()",
      "right" : "private void createUIComponents()",
      "info" : "MethodDeclaration[9041-14346]:MethodDeclaration[9753-15058]"
    }, {
      "left" : "public Locale fun(PropertiesFile propertiesFile)",
      "right" : "public Locale fun(PropertiesFile propertiesFile)",
      "info" : "MethodDeclaration[10133-10256]:MethodDeclaration[10845-10968]"
    }, {
      "left" : "public void add(@NotNull List<? extends Locale> elements)",
      "right" : "public void add(@NotNull List<? extends Locale> elements)",
      "info" : "MethodDeclaration[10343-10767]:MethodDeclaration[11055-11479]"
    }, {
      "left" : "public boolean value(Locale locale)",
      "right" : "public boolean value(Locale locale)",
      "info" : "MethodDeclaration[10559-10718]:MethodDeclaration[11271-11430]"
    }, {
      "left" : "public void focusGained(FocusEvent e)",
      "right" : "public void focusGained(FocusEvent e)",
      "info" : "MethodDeclaration[10946-11059]:MethodDeclaration[11658-11771]"
    }, {
      "left" : "public void focusGained(FocusEvent e)",
      "right" : "public void focusGained(FocusEvent e)",
      "info" : "MethodDeclaration[11140-11246]:MethodDeclaration[11852-11958]"
    }, {
      "left" : "public void run(AnActionButton button)",
      "right" : "public void run(AnActionButton button)",
      "info" : "MethodDeclaration[11387-12614]:MethodDeclaration[12099-13326]"
    }, {
      "left" : "public String getErrorText(String inputString)",
      "right" : "public String getErrorText(String inputString)",
      "info" : "MethodDeclaration[11894-12073]:MethodDeclaration[12606-12785]"
    }, {
      "left" : "public boolean checkInput(String inputString)",
      "right" : "public boolean checkInput(String inputString)",
      "info" : "MethodDeclaration[12087-12238]:MethodDeclaration[12799-12950]"
    }, {
      "left" : "public boolean canClose(String inputString)",
      "right" : "public boolean canClose(String inputString)",
      "info" : "MethodDeclaration[12252-12379]:MethodDeclaration[12964-13091]"
    }, {
      "left" : "public boolean onClick(@NotNull MouseEvent event, int clickCount)",
      "right" : "public boolean onClick(@NotNull MouseEvent event, int clickCount)",
      "info" : "MethodDeclaration[12914-13341]:MethodDeclaration[13626-14053]"
    }, {
      "left" : "public Locale fun(Object o)",
      "right" : "public Locale fun(Object o)",
      "info" : "MethodDeclaration[13166-13263]:MethodDeclaration[13878-13975]"
    }, {
      "left" : "public void valueChanged(ListSelectionEvent e)",
      "right" : "public void valueChanged(ListSelectionEvent e)",
      "info" : "MethodDeclaration[13477-13952]:MethodDeclaration[14189-14664]"
    }, {
      "left" : "public boolean onClick(@NotNull MouseEvent event, int clickCount)",
      "right" : "public boolean onClick(@NotNull MouseEvent event, int clickCount)",
      "info" : "MethodDeclaration[14089-14309]:MethodDeclaration[14801-15021]"
    }, {
      "left" : "private static ColoredListCellRenderer<Locale> getLocaleRenderer()",
      "right" : "private static ColoredListCellRenderer<Locale> getLocaleRenderer()",
      "info" : "MethodDeclaration[14350-14890]:MethodDeclaration[15062-15602]"
    }, {
      "left" : "protected void customizeCellRenderer(JList list, Locale locale, int index, boolean selected, boolean hasFocus)",
      "right" : "protected void customizeCellRenderer(JList list, Locale locale, int index, boolean selected, boolean hasFocus)",
      "info" : "MethodDeclaration[14487-14879]:MethodDeclaration[15199-15591]"
    }, {
      "left" : "MyExistLocalesListModel",
      "right" : "MyExistLocalesListModel",
      "info" : "TypeDeclaration[14894-15970]:TypeDeclaration[15606-16682]"
    }, {
      "left" : "private final List<Locale> myLocales;",
      "right" : "private final List<Locale> myLocales;",
      "info" : "FieldDeclaration[14964-15001]:FieldDeclaration[15676-15713]"
    }, {
      "left" : "private MyExistLocalesListModel()",
      "right" : "private MyExistLocalesListModel()",
      "info" : "MethodDeclaration[15007-15717]:MethodDeclaration[15719-16429]"
    }, {
      "left" : "public boolean process(String baseName, PropertiesFile propertiesFile)",
      "right" : "public boolean process(String baseName, PropertiesFile propertiesFile)",
      "info" : "MethodDeclaration[15300-15618]:MethodDeclaration[16012-16330]"
    }, {
      "left" : "public int getSize()",
      "right" : "public int getSize()",
      "info" : "MethodDeclaration[15723-15796]:MethodDeclaration[16435-16508]"
    }, {
      "left" : "public Locale getElementAt(int index)",
      "right" : "public Locale getElementAt(int index)",
      "info" : "MethodDeclaration[15802-15896]:MethodDeclaration[16514-16608]"
    }, {
      "left" : "public List<Locale> getLocales()",
      "right" : "public List<Locale> getLocales()",
      "info" : "MethodDeclaration[15902-15966]:MethodDeclaration[16614-16678]"
    }, {
      "left" : "static PsiDirectory getResourceBundlePlacementDirectory(ResourceBundle resourceBundle)",
      "right" : "static PsiDirectory getResourceBundlePlacementDirectory(ResourceBundle resourceBundle)",
      "info" : "MethodDeclaration[15974-16568]:MethodDeclaration[16686-17280]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2221-2432]:Block[2303-2514]"
    }, {
      "left" : "if (l1 == PropertiesUtil.DEFAULT_LOCALE)",
      "right" : "if (l1 == PropertiesUtil.DEFAULT_LOCALE)",
      "info" : "IfStatement[2229-2298]:IfStatement[2311-2380]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2270-2298]:Block[2352-2380]"
    }, {
      "left" : "return -1;",
      "right" : "return -1;",
      "info" : "ReturnStatement[2280-2290]:ReturnStatement[2362-2372]"
    }, {
      "left" : "if (l2 == PropertiesUtil.DEFAULT_LOCALE)",
      "right" : "if (l2 == PropertiesUtil.DEFAULT_LOCALE)",
      "info" : "IfStatement[2305-2373]:IfStatement[2387-2455]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2346-2373]:Block[2428-2455]"
    }, {
      "left" : "return 1;",
      "right" : "return 1;",
      "info" : "ReturnStatement[2356-2365]:ReturnStatement[2438-2447]"
    }, {
      "left" : "return l1.toString().compareTo(l2.toString());",
      "right" : "return l1.toString().compareTo(l2.toString());",
      "info" : "ReturnStatement[2380-2426]:ReturnStatement[2462-2508]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3029-3218]:Block[3111-3300]"
    }, {
      "left" : "myProject = project;",
      "right" : "myProject = project;",
      "info" : "ExpressionStatement[3035-3055]:ExpressionStatement[3117-3137]"
    }, {
      "left" : "myDirectory = directory;",
      "right" : "myDirectory = directory;",
      "info" : "ExpressionStatement[3060-3084]:ExpressionStatement[3142-3166]"
    }, {
      "left" : "myResourceBundle = resourceBundle;",
      "right" : "myResourceBundle = resourceBundle;",
      "info" : "ExpressionStatement[3089-3123]:ExpressionStatement[3171-3205]"
    }, {
      "left" : "if (resourceBundle != null)",
      "right" : "if (resourceBundle != null)",
      "info" : "IfStatement[3128-3214]:IfStatement[3210-3296]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3156-3214]:Block[3238-3296]"
    }, {
      "left" : "myResourceBundleNamePanel.setVisible(false);",
      "right" : "myResourceBundleNamePanel.setVisible(false);",
      "info" : "ExpressionStatement[3164-3208]:ExpressionStatement[3246-3290]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3599-4238]:Block[3681-4320]"
    }, {
      "left" : "super(project);",
      "right" : "super(project);",
      "info" : "SuperConstructorInvocation[3607-3622]:SuperConstructorInvocation[3689-3704]"
    }, {
      "left" : "if (directory == null)",
      "right" : "if (directory == null)",
      "info" : "IfStatement[3629-3772]:IfStatement[3711-3854]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3652-3772]:Block[3734-3854]"
    }, {
      "left" : "LOG.assertTrue(resourceBundle != null && getResourceBundlePlacementDirectory(resourceBundle) != null);",
      "right" : "LOG.assertTrue(resourceBundle != null && getResourceBundlePlacementDirectory(resourceBundle) != null);",
      "info" : "ExpressionStatement[3662-3764]:ExpressionStatement[3744-3846]"
    }, {
      "left" : "myProject = project;",
      "right" : "myProject = project;",
      "info" : "ExpressionStatement[3779-3799]:ExpressionStatement[3861-3881]"
    }, {
      "left" : "myDirectory = directory == null ? resourceBundle.getDefaultPropertiesFile().getContainingFile().getContainingDirectory() : directory;",
      "right" : "myDirectory = directory == null ? resourceBundle.getDefaultPropertiesFile().getContainingFile().getContainingDirectory() : directory;",
      "info" : "ExpressionStatement[3806-3939]:ExpressionStatement[3888-4021]"
    }, {
      "left" : "myComponent = new CreateResourceBundleDialogComponent(myProject, myDirectory, resourceBundle);",
      "right" : "myComponent = new CreateResourceBundleDialogComponent(myProject, myDirectory, resourceBundle);",
      "info" : "ExpressionStatement[3946-4040]:ExpressionStatement[4028-4122]"
    }, {
      "left" : "init();",
      "right" : "init();",
      "info" : "ExpressionStatement[4047-4054]:ExpressionStatement[4129-4136]"
    }, {
      "left" : "initValidation();",
      "right" : "initValidation();",
      "info" : "ExpressionStatement[4061-4078]:ExpressionStatement[4143-4160]"
    }, {
      "left" : "setTitle(resourceBundle == null ? \"Create resource bundle\" : String.format(\"Add locales to resource bundle \\'%s\\'\", resourceBundle.getBaseName()));",
      "right" : "setTitle(resourceBundle == null ? \"Create resource bundle\" : String.format(\"Add locales to resource bundle \\'%s\\'\", resourceBundle.getBaseName()));",
      "info" : "ExpressionStatement[4085-4232]:ExpressionStatement[4167-4314]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4286-4683]:Block[4368-4765]"
    }, {
      "left" : "final String errorString = myComponent.canCreateAllFilesForAllLocales();",
      "right" : "final String errorString = myComponent.canCreateAllFilesForAllLocales();",
      "info" : "VariableDeclarationStatement[4294-4366]:VariableDeclarationStatement[4376-4448]"
    }, {
      "left" : "if (errorString != null)",
      "right" : "if (errorString != null)",
      "info" : "IfStatement[4373-4677]:IfStatement[4455-4759]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4398-4473]:Block[4480-4555]"
    }, {
      "left" : "Messages.showErrorDialog(getContentPanel(), errorString);",
      "right" : "Messages.showErrorDialog(getContentPanel(), errorString);",
      "info" : "ExpressionStatement[4408-4465]:ExpressionStatement[4490-4547]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4479-4677]:Block[4561-4759]"
    }, {
      "left" : "final List<PsiFile> createFiles = myComponent.createPropertiesFiles();",
      "right" : "final List<PsiFile> createFiles = myComponent.createPropertiesFiles();",
      "info" : "VariableDeclarationStatement[4489-4559]:VariableDeclarationStatement[4571-4641]"
    }, {
      "left" : "myCreatedFiles = createFiles.toArray(new PsiElement[createFiles.size()]);",
      "right" : "myCreatedFiles = createFiles.toArray(new PsiElement[createFiles.size()]);",
      "info" : "ExpressionStatement[4568-4641]:ExpressionStatement[4650-4723]"
    }, {
      "left" : "super.doOKAction();",
      "right" : "super.doOKAction();",
      "info" : "ExpressionStatement[4650-4669]:ExpressionStatement[4732-4751]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4758-4802]:Block[5372-5416]"
    }, {
      "left" : "return myComponent.getPanel();",
      "right" : "return myComponent.getPanel();",
      "info" : "ReturnStatement[4766-4796]:ReturnStatement[5380-5410]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4846-4882]:Block[5460-5496]"
    }, {
      "left" : "return myCreatedFiles;",
      "right" : "return myCreatedFiles;",
      "info" : "ReturnStatement[4854-4876]:ReturnStatement[5468-5490]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4936-5779]:Block[5550-6091]"
    }, {
      "left" : "final Set<String> fileNames = ContainerUtil.map2Set(myLocalesModel.getItems(), new Function<Locale, String>() {\n      @Override\n      public String fun(Locale locale) {\n        return locale == PropertiesUtil.DEFAULT_LOCALE ? (name + \".properties\") : (name + \"_\" + locale.toString() + \".properties\");\n      }\n    });",
      "right" : "final Set<String> fileNames = getFileNamesToCreate();",
      "info" : "VariableDeclarationStatement[4981-5297]:VariableDeclarationStatement[5556-5609]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5148-5289]:Block[6338-6479]"
    }, {
      "left" : "return locale == PropertiesUtil.DEFAULT_LOCALE ? (name + \".properties\") : (name + \"_\" + locale.toString() + \".properties\");",
      "right" : "return locale == PropertiesUtil.DEFAULT_LOCALE ? (name + \".properties\") : (name + \"_\" + locale.toString() + \".properties\");",
      "info" : "ReturnStatement[5158-5281]:ReturnStatement[6348-6471]"
    }, {
      "left" : "final List<PsiFile> createdFiles = ApplicationManager.getApplication().runWriteAction(new Computable<List<PsiFile>>() {\n      @Override\n      public List<PsiFile> compute() {\n        return ContainerUtil.map(fileNames, new Function<String, PsiFile>() {\n          @Override\n          public PsiFile fun(String n) {\n            return myDirectory.createFile(n);\n          }\n        });\n      }\n    });",
      "right" : "final List<PsiFile> createdFiles = ApplicationManager.getApplication().runWriteAction(new Computable<List<PsiFile>>() {\n      @Override\n      public List<PsiFile> compute() {\n        return ContainerUtil.map(fileNames, new Function<String, PsiFile>() {\n          @Override\n          public PsiFile fun(String n) {\n            return myDirectory.createFile(n);\n          }\n        });\n      }\n    });",
      "info" : "VariableDeclarationStatement[5302-5701]:VariableDeclarationStatement[5614-6013]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5475-5693]:Block[5787-6005]"
    }, {
      "left" : "return ContainerUtil.map(fileNames, new Function<String, PsiFile>() {\n          @Override\n          public PsiFile fun(String n) {\n            return myDirectory.createFile(n);\n          }\n        });",
      "right" : "return ContainerUtil.map(fileNames, new Function<String, PsiFile>() {\n          @Override\n          public PsiFile fun(String n) {\n            return myDirectory.createFile(n);\n          }\n        });",
      "info" : "ReturnStatement[5485-5685]:ReturnStatement[5797-5997]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5614-5673]:Block[5926-5985]"
    }, {
      "left" : "return myDirectory.createFile(n);",
      "right" : "return myDirectory.createFile(n);",
      "info" : "ReturnStatement[5628-5661]:ReturnStatement[5940-5973]"
    }, {
      "left" : "combineToResourceBundleIfNeed(createdFiles);",
      "right" : "combineToResourceBundleIfNeed(createdFiles);",
      "info" : "ExpressionStatement[5706-5750]:ExpressionStatement[6018-6062]"
    }, {
      "left" : "return createdFiles;",
      "right" : "return createdFiles;",
      "info" : "ReturnStatement[5755-5775]:ReturnStatement[6067-6087]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5853-7264]:Block[6565-7976]"
    }, {
      "left" : "Collection<PropertiesFile> createdFiles = ContainerUtil.map(files, new NotNullFunction<PsiFile, PropertiesFile>() {\n      @NotNull\n      @Override\n      public PropertiesFile fun(PsiFile dom) {\n        final PropertiesFile file = PropertiesImplUtil.getPropertiesFile(dom);\n        LOG.assertTrue(file != null);\n        return file;\n      }\n    });",
      "right" : "Collection<PropertiesFile> createdFiles = ContainerUtil.map(files, new NotNullFunction<PsiFile, PropertiesFile>() {\n      @NotNull\n      @Override\n      public PropertiesFile fun(PsiFile dom) {\n        final PropertiesFile file = PropertiesImplUtil.getPropertiesFile(dom);\n        LOG.assertTrue(file != null);\n        return file;\n      }\n    });",
      "info" : "VariableDeclarationStatement[5859-6206]:VariableDeclarationStatement[6571-6918]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6051-6198]:Block[6763-6910]"
    }, {
      "left" : "final PropertiesFile file = PropertiesImplUtil.getPropertiesFile(dom);",
      "right" : "final PropertiesFile file = PropertiesImplUtil.getPropertiesFile(dom);",
      "info" : "VariableDeclarationStatement[6061-6131]:VariableDeclarationStatement[6773-6843]"
    }, {
      "left" : "LOG.assertTrue(file != null);",
      "right" : "LOG.assertTrue(file != null);",
      "info" : "ExpressionStatement[6140-6169]:ExpressionStatement[6852-6881]"
    }, {
      "left" : "return file;",
      "right" : "return file;",
      "info" : "ReturnStatement[6178-6190]:ReturnStatement[6890-6902]"
    }, {
      "left" : "ResourceBundle mainBundle = myResourceBundle;",
      "right" : "ResourceBundle mainBundle = myResourceBundle;",
      "info" : "VariableDeclarationStatement[6212-6257]:VariableDeclarationStatement[6924-6969]"
    }, {
      "left" : "final Set<ResourceBundle> allBundles = new HashSet<ResourceBundle>();",
      "right" : "final Set<ResourceBundle> allBundles = new HashSet<ResourceBundle>();",
      "info" : "VariableDeclarationStatement[6262-6331]:VariableDeclarationStatement[6974-7043]"
    }, {
      "left" : "if (mainBundle != null)",
      "right" : "if (mainBundle != null)",
      "info" : "IfStatement[6336-6401]:IfStatement[7048-7113]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6360-6401]:Block[7072-7113]"
    }, {
      "left" : "allBundles.add(mainBundle);",
      "right" : "allBundles.add(mainBundle);",
      "info" : "ExpressionStatement[6368-6395]:ExpressionStatement[7080-7107]"
    }, {
      "left" : "boolean needCombining = false;",
      "right" : "boolean needCombining = false;",
      "info" : "VariableDeclarationStatement[6406-6436]:VariableDeclarationStatement[7118-7148]"
    }, {
      "left" : "for (PropertiesFile file : createdFiles)",
      "right" : "for (PropertiesFile file : createdFiles)",
      "info" : "EnhancedForStatement[6441-6717]:EnhancedForStatement[7153-7429]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6482-6717]:Block[7194-7429]"
    }, {
      "left" : "final ResourceBundle rb = file.getResourceBundle();",
      "right" : "final ResourceBundle rb = file.getResourceBundle();",
      "info" : "VariableDeclarationStatement[6490-6541]:VariableDeclarationStatement[7202-7253]"
    }, {
      "left" : "if (mainBundle == null)",
      "right" : "if (mainBundle == null)",
      "info" : "IfStatement[6548-6685]:IfStatement[7260-7397]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6572-6606]:Block[7284-7318]"
    }, {
      "left" : "mainBundle = rb;",
      "right" : "mainBundle = rb;",
      "info" : "ExpressionStatement[6582-6598]:ExpressionStatement[7294-7310]"
    }, {
      "left" : "if (!mainBundle.equals(rb))",
      "right" : "if (!mainBundle.equals(rb))",
      "info" : "IfStatement[6618-6685]:IfStatement[7330-7397]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6646-6685]:Block[7358-7397]"
    }, {
      "left" : "needCombining = true;",
      "right" : "needCombining = true;",
      "info" : "ExpressionStatement[6656-6677]:ExpressionStatement[7368-7389]"
    }, {
      "left" : "allBundles.add(rb);",
      "right" : "allBundles.add(rb);",
      "info" : "ExpressionStatement[6692-6711]:ExpressionStatement[7404-7423]"
    }, {
      "left" : "if (needCombining)",
      "right" : "if (needCombining)",
      "info" : "IfStatement[6723-7260]:IfStatement[7435-7972]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6742-7260]:Block[7454-7972]"
    }, {
      "left" : "final List<PropertiesFile> toCombine = new ArrayList<PropertiesFile>(createdFiles);",
      "right" : "final List<PropertiesFile> toCombine = new ArrayList<PropertiesFile>(createdFiles);",
      "info" : "VariableDeclarationStatement[6750-6833]:VariableDeclarationStatement[7462-7545]"
    }, {
      "left" : "final String baseName = getBaseName();",
      "right" : "final String baseName = getBaseName();",
      "info" : "VariableDeclarationStatement[6840-6878]:VariableDeclarationStatement[7552-7590]"
    }, {
      "left" : "if (myResourceBundle != null)",
      "right" : "if (myResourceBundle != null)",
      "info" : "IfStatement[6885-6989]:IfStatement[7597-7701]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6915-6989]:Block[7627-7701]"
    }, {
      "left" : "toCombine.addAll(myResourceBundle.getPropertiesFiles());",
      "right" : "toCombine.addAll(myResourceBundle.getPropertiesFiles());",
      "info" : "ExpressionStatement[6925-6981]:ExpressionStatement[7637-7693]"
    }, {
      "left" : "ResourceBundleManager manager = ResourceBundleManager.getInstance(mainBundle.getProject());",
      "right" : "ResourceBundleManager manager = ResourceBundleManager.getInstance(mainBundle.getProject());",
      "info" : "VariableDeclarationStatement[6996-7087]:VariableDeclarationStatement[7708-7799]"
    }, {
      "left" : "for (ResourceBundle bundle : allBundles)",
      "right" : "for (ResourceBundle bundle : allBundles)",
      "info" : "EnhancedForStatement[7094-7194]:EnhancedForStatement[7806-7906]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7135-7194]:Block[7847-7906]"
    }, {
      "left" : "manager.dissociateResourceBundle(bundle);",
      "right" : "manager.dissociateResourceBundle(bundle);",
      "info" : "ExpressionStatement[7145-7186]:ExpressionStatement[7857-7898]"
    }, {
      "left" : "manager.combineToResourceBundle(toCombine, baseName);",
      "right" : "manager.combineToResourceBundle(toCombine, baseName);",
      "info" : "ExpressionStatement[7201-7254]:ExpressionStatement[7913-7966]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7297-7418]:Block[8009-8130]"
    }, {
      "left" : "return myResourceBundle == null ? myResourceBundleBaseNameTextField.getText() : myResourceBundle.getBaseName();",
      "right" : "return myResourceBundle == null ? myResourceBundleBaseNameTextField.getText() : myResourceBundle.getBaseName();",
      "info" : "ReturnStatement[7303-7414]:ReturnStatement[8015-8126]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7470-8344]:Block[8182-9056]"
    }, {
      "left" : "final String name = getBaseName();",
      "right" : "final String name = getBaseName();",
      "info" : "VariableDeclarationStatement[7476-7510]:VariableDeclarationStatement[8188-8222]"
    }, {
      "left" : "if (name.isEmpty())",
      "right" : "if (name.isEmpty())",
      "info" : "IfStatement[7515-7577]:IfStatement[8227-8289]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7535-7577]:Block[8247-8289]"
    }, {
      "left" : "return \"Base name is empty\";",
      "right" : "return \"Base name is empty\";",
      "info" : "ReturnStatement[7543-7571]:ReturnStatement[8255-8283]"
    }, {
      "left" : "final Set<String> suffixes = ContainerUtil.map2Set(myLocalesModel.getItems(), new Function<Locale, String>() {\n      @Override\n      public String fun(Locale locale) {\n        return name + \"_\" + locale.toString() + \".properties\";\n      }\n    });",
      "right" : "final Set<String> suffixes = ContainerUtil.map2Set(myLocalesModel.getItems(), new Function<Locale, String>() {\n      @Override\n      public String fun(Locale locale) {\n        return name + \"_\" + locale.toString() + \".properties\";\n      }\n    });",
      "info" : "VariableDeclarationStatement[7582-7828]:VariableDeclarationStatement[8294-8540]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7748-7820]:Block[8460-8532]"
    }, {
      "left" : "return name + \"_\" + locale.toString() + \".properties\";",
      "right" : "return name + \"_\" + locale.toString() + \".properties\";",
      "info" : "ReturnStatement[7758-7812]:ReturnStatement[8470-8524]"
    }, {
      "left" : "if (suffixes.isEmpty())",
      "right" : "if (suffixes.isEmpty())",
      "info" : "IfStatement[7833-7897]:IfStatement[8545-8609]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7857-7897]:Block[8569-8609]"
    }, {
      "left" : "return \"No locales added\";",
      "right" : "return \"No locales added\";",
      "info" : "ReturnStatement[7865-7891]:ReturnStatement[8577-8603]"
    }, {
      "left" : "for (PsiElement element : myDirectory.getChildren())",
      "right" : "for (PsiElement element : myDirectory.getChildren())",
      "info" : "EnhancedForStatement[7902-8323]:EnhancedForStatement[8614-9035]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7955-8323]:Block[8667-9035]"
    }, {
      "left" : "if (element instanceof PsiFile)",
      "right" : "if (element instanceof PsiFile)",
      "info" : "IfStatement[7963-8317]:IfStatement[8675-9029]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7995-8317]:Block[8707-9029]"
    }, {
      "left" : "if (element instanceof PropertiesFile)",
      "right" : "if (element instanceof PropertiesFile)",
      "info" : "IfStatement[8005-8309]:IfStatement[8717-9021]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8044-8309]:Block[8756-9021]"
    }, {
      "left" : "PropertiesFile propertiesFile = (PropertiesFile)element;",
      "right" : "PropertiesFile propertiesFile = (PropertiesFile)element;",
      "info" : "VariableDeclarationStatement[8056-8112]:VariableDeclarationStatement[8768-8824]"
    }, {
      "left" : "final String propertiesFileName = propertiesFile.getName();",
      "right" : "final String propertiesFileName = propertiesFile.getName();",
      "info" : "VariableDeclarationStatement[8123-8182]:VariableDeclarationStatement[8835-8894]"
    }, {
      "left" : "if (suffixes.contains(propertiesFileName))",
      "right" : "if (suffixes.contains(propertiesFileName))",
      "info" : "IfStatement[8193-8299]:IfStatement[8905-9011]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8236-8299]:Block[8948-9011]"
    }, {
      "left" : "return \"Some of files already exist\";",
      "right" : "return \"Some of files already exist\";",
      "info" : "ReturnStatement[8250-8287]:ReturnStatement[8962-8999]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[8328-8340]:ReturnStatement[9040-9052]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8373-8398]:Block[9085-9110]"
    }, {
      "left" : "return myPanel;",
      "right" : "return myPanel;",
      "info" : "ReturnStatement[8379-8394]:ReturnStatement[9091-9106]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8492-9037]:Block[9204-9749]"
    }, {
      "left" : "if (rawLocales.isEmpty())",
      "right" : "if (rawLocales.isEmpty())",
      "info" : "IfStatement[8498-8569]:IfStatement[9210-9281]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8524-8569]:Block[9236-9281]"
    }, {
      "left" : "return Collections.emptyList();",
      "right" : "return Collections.emptyList();",
      "info" : "ReturnStatement[8532-8563]:ReturnStatement[9244-9275]"
    }, {
      "left" : "final String[] splitRawLocales = rawLocales.split(\",\");",
      "right" : "final String[] splitRawLocales = rawLocales.split(\",\");",
      "info" : "VariableDeclarationStatement[8574-8629]:VariableDeclarationStatement[9286-9341]"
    }, {
      "left" : "final List<Locale> locales = new ArrayList<Locale>(splitRawLocales.length);",
      "right" : "final List<Locale> locales = new ArrayList<Locale>(splitRawLocales.length);",
      "info" : "VariableDeclarationStatement[8634-8709]:VariableDeclarationStatement[9346-9421]"
    }, {
      "left" : "for (String rawLocale : splitRawLocales)",
      "right" : "for (String rawLocale : splitRawLocales)",
      "info" : "EnhancedForStatement[8715-9013]:EnhancedForStatement[9427-9725]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8756-9013]:Block[9468-9725]"
    }, {
      "left" : "final Locale locale = PropertiesUtil.getLocale(\"_\" + rawLocale + \".properties\");",
      "right" : "final Locale locale = PropertiesUtil.getLocale(\"_\" + rawLocale + \".properties\");",
      "info" : "VariableDeclarationStatement[8764-8844]:VariableDeclarationStatement[9476-9556]"
    }, {
      "left" : "if (locale == PropertiesUtil.DEFAULT_LOCALE)",
      "right" : "if (locale == PropertiesUtil.DEFAULT_LOCALE)",
      "info" : "IfStatement[8851-9007]:IfStatement[9563-9719]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8896-8926]:Block[9608-9638]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[8906-8918]:ReturnStatement[9618-9630]"
    }, {
      "left" : "if (!locales.contains(locale))",
      "right" : "if (!locales.contains(locale))",
      "info" : "IfStatement[8938-9007]:IfStatement[9650-9719]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8969-9007]:Block[9681-9719]"
    }, {
      "left" : "locales.add(locale);",
      "right" : "locales.add(locale);",
      "info" : "ExpressionStatement[8979-8999]:ExpressionStatement[9691-9711]"
    }, {
      "left" : "return locales;",
      "right" : "return locales;",
      "info" : "ReturnStatement[9018-9033]:ReturnStatement[9730-9745]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9108-14346]:Block[9820-15058]"
    }, {
      "left" : "final JBList projectExistLocalesList = new JBList();",
      "right" : "final JBList projectExistLocalesList = new JBList();",
      "info" : "VariableDeclarationStatement[9114-9166]:VariableDeclarationStatement[9826-9878]"
    }, {
      "left" : "final MyExistLocalesListModel existLocalesListModel = new MyExistLocalesListModel();",
      "right" : "final MyExistLocalesListModel existLocalesListModel = new MyExistLocalesListModel();",
      "info" : "VariableDeclarationStatement[9171-9255]:VariableDeclarationStatement[9883-9967]"
    }, {
      "left" : "projectExistLocalesList.setModel(existLocalesListModel);",
      "right" : "projectExistLocalesList.setModel(existLocalesListModel);",
      "info" : "ExpressionStatement[9260-9316]:ExpressionStatement[9972-10028]"
    }, {
      "left" : "projectExistLocalesList.setCellRenderer(getLocaleRenderer());",
      "right" : "projectExistLocalesList.setCellRenderer(getLocaleRenderer());",
      "info" : "ExpressionStatement[9321-9382]:ExpressionStatement[10033-10094]"
    }, {
      "left" : "myProjectExistLocalesPanel = ToolbarDecorator.createDecorator(projectExistLocalesList)\n      .disableRemoveAction()\n      .disableUpDownActions()\n      .createPanel();",
      "right" : "myProjectExistLocalesPanel = ToolbarDecorator.createDecorator(projectExistLocalesList)\n      .disableRemoveAction()\n      .disableUpDownActions()\n      .createPanel();",
      "info" : "ExpressionStatement[9387-9554]:ExpressionStatement[10099-10266]"
    }, {
      "left" : "myProjectExistLocalesPanel.setBorder(IdeBorderFactory.createTitledBorder(\"Project locales\", false));",
      "right" : "myProjectExistLocalesPanel.setBorder(IdeBorderFactory.createTitledBorder(\"Project locales\", false));",
      "info" : "ExpressionStatement[9559-9659]:ExpressionStatement[10271-10371]"
    }, {
      "left" : "final JBList localesToAddList = new JBList();",
      "right" : "final JBList localesToAddList = new JBList();",
      "info" : "VariableDeclarationStatement[9665-9710]:VariableDeclarationStatement[10377-10422]"
    }, {
      "left" : "final List<Locale> locales;",
      "right" : "final List<Locale> locales;",
      "info" : "VariableDeclarationStatement[9716-9743]:VariableDeclarationStatement[10428-10455]"
    }, {
      "left" : "final List<Locale> restrictedLocales;",
      "right" : "final List<Locale> restrictedLocales;",
      "info" : "VariableDeclarationStatement[9748-9785]:VariableDeclarationStatement[10460-10497]"
    }, {
      "left" : "if (myResourceBundle == null)",
      "right" : "if (myResourceBundle == null)",
      "info" : "IfStatement[9790-10272]:IfStatement[10502-10984]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9820-9952]:Block[10532-10664]"
    }, {
      "left" : "locales = Collections.singletonList(PropertiesUtil.DEFAULT_LOCALE);",
      "right" : "locales = Collections.singletonList(PropertiesUtil.DEFAULT_LOCALE);",
      "info" : "ExpressionStatement[9828-9895]:ExpressionStatement[10540-10607]"
    }, {
      "left" : "restrictedLocales = Collections.emptyList();",
      "right" : "restrictedLocales = Collections.emptyList();",
      "info" : "ExpressionStatement[9902-9946]:ExpressionStatement[10614-10658]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9958-10272]:Block[10670-10984]"
    }, {
      "left" : "locales = Collections.emptyList();",
      "right" : "locales = Collections.emptyList();",
      "info" : "ExpressionStatement[9966-10000]:ExpressionStatement[10678-10712]"
    }, {
      "left" : "restrictedLocales = ContainerUtil.map(myResourceBundle.getPropertiesFiles(), new Function<PropertiesFile, Locale>() {\n        @Override\n        public Locale fun(PropertiesFile propertiesFile) {\n          return propertiesFile.getLocale();\n        }\n      });",
      "right" : "restrictedLocales = ContainerUtil.map(myResourceBundle.getPropertiesFiles(), new Function<PropertiesFile, Locale>() {\n        @Override\n        public Locale fun(PropertiesFile propertiesFile) {\n          return propertiesFile.getLocale();\n        }\n      });",
      "info" : "ExpressionStatement[10007-10266]:ExpressionStatement[10719-10978]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10200-10256]:Block[10912-10968]"
    }, {
      "left" : "return propertiesFile.getLocale();",
      "right" : "return propertiesFile.getLocale();",
      "info" : "ReturnStatement[10212-10246]:ReturnStatement[10924-10958]"
    }, {
      "left" : "myLocalesModel = new CollectionListModel<Locale>(locales) {\n      @Override\n      public void add(@NotNull List<? extends Locale> elements) {\n        final List<Locale> currentItems = getItems();\n        elements = ContainerUtil.filter(elements, new Condition<Locale>() {\n          @Override\n          public boolean value(Locale locale) {\n            return !restrictedLocales.contains(locale) && !currentItems.contains(locale);\n          }\n        });\n        super.add(elements);\n      }\n    };",
      "right" : "myLocalesModel = new CollectionListModel<Locale>(locales) {\n      @Override\n      public void add(@NotNull List<? extends Locale> elements) {\n        final List<Locale> currentItems = getItems();\n        elements = ContainerUtil.filter(elements, new Condition<Locale>() {\n          @Override\n          public boolean value(Locale locale) {\n            return !restrictedLocales.contains(locale) && !currentItems.contains(locale);\n          }\n        });\n        super.add(elements);\n      }\n    };",
      "info" : "ExpressionStatement[10277-10774]:ExpressionStatement[10989-11486]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10417-10767]:Block[11129-11479]"
    }, {
      "left" : "final List<Locale> currentItems = getItems();",
      "right" : "final List<Locale> currentItems = getItems();",
      "info" : "VariableDeclarationStatement[10427-10472]:VariableDeclarationStatement[11139-11184]"
    }, {
      "left" : "elements = ContainerUtil.filter(elements, new Condition<Locale>() {\n          @Override\n          public boolean value(Locale locale) {\n            return !restrictedLocales.contains(locale) && !currentItems.contains(locale);\n          }\n        });",
      "right" : "elements = ContainerUtil.filter(elements, new Condition<Locale>() {\n          @Override\n          public boolean value(Locale locale) {\n            return !restrictedLocales.contains(locale) && !currentItems.contains(locale);\n          }\n        });",
      "info" : "ExpressionStatement[10481-10730]:ExpressionStatement[11193-11442]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10615-10718]:Block[11327-11430]"
    }, {
      "left" : "return !restrictedLocales.contains(locale) && !currentItems.contains(locale);",
      "right" : "return !restrictedLocales.contains(locale) && !currentItems.contains(locale);",
      "info" : "ReturnStatement[10629-10706]:ReturnStatement[11341-11418]"
    }, {
      "left" : "super.add(elements);",
      "right" : "super.add(elements);",
      "info" : "ExpressionStatement[10739-10759]:ExpressionStatement[11451-11471]"
    }, {
      "left" : "localesToAddList.setModel(myLocalesModel);",
      "right" : "localesToAddList.setModel(myLocalesModel);",
      "info" : "ExpressionStatement[10779-10821]:ExpressionStatement[11491-11533]"
    }, {
      "left" : "localesToAddList.setCellRenderer(getLocaleRenderer());",
      "right" : "localesToAddList.setCellRenderer(getLocaleRenderer());",
      "info" : "ExpressionStatement[10826-10880]:ExpressionStatement[11538-11592]"
    }, {
      "left" : "localesToAddList.addFocusListener(new FocusAdapter() {\n      @Override\n      public void focusGained(FocusEvent e) {\n        projectExistLocalesList.clearSelection();\n      }\n    });",
      "right" : "localesToAddList.addFocusListener(new FocusAdapter() {\n      @Override\n      public void focusGained(FocusEvent e) {\n        projectExistLocalesList.clearSelection();\n      }\n    });",
      "info" : "ExpressionStatement[10885-11067]:ExpressionStatement[11597-11779]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11000-11059]:Block[11712-11771]"
    }, {
      "left" : "projectExistLocalesList.clearSelection();",
      "right" : "projectExistLocalesList.clearSelection();",
      "info" : "ExpressionStatement[11010-11051]:ExpressionStatement[11722-11763]"
    }, {
      "left" : "projectExistLocalesList.addFocusListener(new FocusAdapter() {\n      @Override\n      public void focusGained(FocusEvent e) {\n        localesToAddList.clearSelection();\n      }\n    });",
      "right" : "projectExistLocalesList.addFocusListener(new FocusAdapter() {\n      @Override\n      public void focusGained(FocusEvent e) {\n        localesToAddList.clearSelection();\n      }\n    });",
      "info" : "ExpressionStatement[11072-11254]:ExpressionStatement[11784-11966]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11194-11246]:Block[11906-11958]"
    }, {
      "left" : "localesToAddList.clearSelection();",
      "right" : "localesToAddList.clearSelection();",
      "info" : "ExpressionStatement[11204-11238]:ExpressionStatement[11916-11950]"
    }, {
      "left" : "myNewBundleLocalesPanel = ToolbarDecorator.createDecorator(localesToAddList).setAddAction(new AnActionButtonRunnable() {\n      @Override\n      public void run(AnActionButton button) {\n        final String rawAddedLocales = Messages.showInputDialog(myProject,\n                                                  PropertiesBundle.message(\"create.resource.bundle.dialog.add.locales.validator.message\"),\n                                                  PropertiesBundle.message(\"create.resource.bundle.dialog.add.locales.validator.title\"),\n                                                  null, null, new InputValidatorEx() {\n            @Nullable\n            @Override\n            public String getErrorText(String inputString) {\n              return checkInput(inputString) ? null : \"Invalid locales\";\n            }\n\n            @Override\n            public boolean checkInput(String inputString) {\n              return extractLocalesFromString(inputString) != null;\n            }\n\n            @Override\n            public boolean canClose(String inputString) {\n              return checkInput(inputString);\n            }\n          });\n        if (rawAddedLocales != null) {\n          final List<Locale> locales = extractLocalesFromString(rawAddedLocales);\n          LOG.assertTrue(locales != null);\n          myLocalesModel.add(locales);\n        }\n      }\n    }).setAddActionName(\"Add locales by suffix\")\n      .disableUpDownActions().createPanel();",
      "right" : "myNewBundleLocalesPanel = ToolbarDecorator.createDecorator(localesToAddList).setAddAction(new AnActionButtonRunnable() {\n      @Override\n      public void run(AnActionButton button) {\n        final String rawAddedLocales = Messages.showInputDialog(myProject,\n                                                  PropertiesBundle.message(\"create.resource.bundle.dialog.add.locales.validator.message\"),\n                                                  PropertiesBundle.message(\"create.resource.bundle.dialog.add.locales.validator.title\"),\n                                                  null, null, new InputValidatorEx() {\n            @Nullable\n            @Override\n            public String getErrorText(String inputString) {\n              return checkInput(inputString) ? null : \"Invalid locales\";\n            }\n\n            @Override\n            public boolean checkInput(String inputString) {\n              return extractLocalesFromString(inputString) != null;\n            }\n\n            @Override\n            public boolean canClose(String inputString) {\n              return checkInput(inputString);\n            }\n          });\n        if (rawAddedLocales != null) {\n          final List<Locale> locales = extractLocalesFromString(rawAddedLocales);\n          LOG.assertTrue(locales != null);\n          myLocalesModel.add(locales);\n        }\n      }\n    }).setAddActionName(\"Add locales by suffix\")\n      .disableUpDownActions().createPanel();",
      "info" : "ExpressionStatement[11260-12708]:ExpressionStatement[11972-13420]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11442-12614]:Block[12154-13326]"
    }, {
      "left" : "final String rawAddedLocales = Messages.showInputDialog(myProject,\n                                                  PropertiesBundle.message(\"create.resource.bundle.dialog.add.locales.validator.message\"),\n                                                  PropertiesBundle.message(\"create.resource.bundle.dialog.add.locales.validator.title\"),\n                                                  null, null, new InputValidatorEx() {\n            @Nullable\n            @Override\n            public String getErrorText(String inputString) {\n              return checkInput(inputString) ? null : \"Invalid locales\";\n            }\n\n            @Override\n            public boolean checkInput(String inputString) {\n              return extractLocalesFromString(inputString) != null;\n            }\n\n            @Override\n            public boolean canClose(String inputString) {\n              return checkInput(inputString);\n            }\n          });",
      "right" : "final String rawAddedLocales = Messages.showInputDialog(myProject,\n                                                  PropertiesBundle.message(\"create.resource.bundle.dialog.add.locales.validator.message\"),\n                                                  PropertiesBundle.message(\"create.resource.bundle.dialog.add.locales.validator.title\"),\n                                                  null, null, new InputValidatorEx() {\n            @Nullable\n            @Override\n            public String getErrorText(String inputString) {\n              return checkInput(inputString) ? null : \"Invalid locales\";\n            }\n\n            @Override\n            public boolean checkInput(String inputString) {\n              return extractLocalesFromString(inputString) != null;\n            }\n\n            @Override\n            public boolean canClose(String inputString) {\n              return checkInput(inputString);\n            }\n          });",
      "info" : "VariableDeclarationStatement[11452-12393]:VariableDeclarationStatement[12164-13105]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11985-12073]:Block[12697-12785]"
    }, {
      "left" : "return checkInput(inputString) ? null : \"Invalid locales\";",
      "right" : "return checkInput(inputString) ? null : \"Invalid locales\";",
      "info" : "ReturnStatement[12001-12059]:ReturnStatement[12713-12771]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12155-12238]:Block[12867-12950]"
    }, {
      "left" : "return extractLocalesFromString(inputString) != null;",
      "right" : "return extractLocalesFromString(inputString) != null;",
      "info" : "ReturnStatement[12171-12224]:ReturnStatement[12883-12936]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12318-12379]:Block[13030-13091]"
    }, {
      "left" : "return checkInput(inputString);",
      "right" : "return checkInput(inputString);",
      "info" : "ReturnStatement[12334-12365]:ReturnStatement[13046-13077]"
    }, {
      "left" : "if (rawAddedLocales != null)",
      "right" : "if (rawAddedLocales != null)",
      "info" : "IfStatement[12402-12606]:IfStatement[13114-13318]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12431-12606]:Block[13143-13318]"
    }, {
      "left" : "final List<Locale> locales = extractLocalesFromString(rawAddedLocales);",
      "right" : "final List<Locale> locales = extractLocalesFromString(rawAddedLocales);",
      "info" : "VariableDeclarationStatement[12443-12514]:VariableDeclarationStatement[13155-13226]"
    }, {
      "left" : "LOG.assertTrue(locales != null);",
      "right" : "LOG.assertTrue(locales != null);",
      "info" : "ExpressionStatement[12525-12557]:ExpressionStatement[13237-13269]"
    }, {
      "left" : "myLocalesModel.add(locales);",
      "right" : "myLocalesModel.add(locales);",
      "info" : "ExpressionStatement[12568-12596]:ExpressionStatement[13280-13308]"
    }, {
      "left" : "myNewBundleLocalesPanel.setBorder(IdeBorderFactory.createTitledBorder(\"Locales to add\", false));",
      "right" : "myNewBundleLocalesPanel.setBorder(IdeBorderFactory.createTitledBorder(\"Locales to add\", false));",
      "info" : "ExpressionStatement[12713-12809]:ExpressionStatement[13425-13521]"
    }, {
      "left" : "myAddLocaleFromExistButton = new JButton(AllIcons.Actions.Forward);",
      "right" : "myAddLocaleFromExistButton = new JButton(AllIcons.Actions.Forward);",
      "info" : "ExpressionStatement[12815-12882]:ExpressionStatement[13527-13594]"
    }, {
      "left" : "new ClickListener(){\n      @Override\n      public boolean onClick(@NotNull MouseEvent event, int clickCount) {\n        if (clickCount == 1) {\n          myLocalesModel.add(ContainerUtil.map(projectExistLocalesList.getSelectedValues(), new Function<Object, Locale>() {\n            @Override\n            public Locale fun(Object o) {\n              return (Locale)o;\n            }\n          }));\n          return true;\n        }\n        return false;\n      }\n    }.installOn(myAddLocaleFromExistButton);",
      "right" : "new ClickListener(){\n      @Override\n      public boolean onClick(@NotNull MouseEvent event, int clickCount) {\n        if (clickCount == 1) {\n          myLocalesModel.add(ContainerUtil.map(projectExistLocalesList.getSelectedValues(), new Function<Object, Locale>() {\n            @Override\n            public Locale fun(Object o) {\n              return (Locale)o;\n            }\n          }));\n          return true;\n        }\n        return false;\n      }\n    }.installOn(myAddLocaleFromExistButton);",
      "info" : "ExpressionStatement[12887-13386]:ExpressionStatement[13599-14098]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12996-13341]:Block[13708-14053]"
    }, {
      "left" : "if (clickCount == 1)",
      "right" : "if (clickCount == 1)",
      "info" : "IfStatement[13006-13311]:IfStatement[13718-14023]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13027-13311]:Block[13739-14023]"
    }, {
      "left" : "myLocalesModel.add(ContainerUtil.map(projectExistLocalesList.getSelectedValues(), new Function<Object, Locale>() {\n            @Override\n            public Locale fun(Object o) {\n              return (Locale)o;\n            }\n          }));",
      "right" : "myLocalesModel.add(ContainerUtil.map(projectExistLocalesList.getSelectedValues(), new Function<Object, Locale>() {\n            @Override\n            public Locale fun(Object o) {\n              return (Locale)o;\n            }\n          }));",
      "info" : "ExpressionStatement[13039-13278]:ExpressionStatement[13751-13990]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13216-13263]:Block[13928-13975]"
    }, {
      "left" : "return (Locale)o;",
      "right" : "return (Locale)o;",
      "info" : "ReturnStatement[13232-13249]:ReturnStatement[13944-13961]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[13289-13301]:ReturnStatement[14001-14013]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[13320-13333]:ReturnStatement[14032-14045]"
    }, {
      "left" : "projectExistLocalesList.addListSelectionListener(new ListSelectionListener() {\n      @Override\n      public void valueChanged(ListSelectionEvent e) {\n        final List<Locale> currentItems = myLocalesModel.getItems();\n        for (Object o : projectExistLocalesList.getSelectedValues()) {\n          Locale l = (Locale) o;\n          if (!restrictedLocales.contains(l) && !currentItems.contains(l)) {\n            myAddLocaleFromExistButton.setEnabled(true);\n            return;\n          }\n        }\n        myAddLocaleFromExistButton.setEnabled(false);\n      }\n    });",
      "right" : "projectExistLocalesList.addListSelectionListener(new ListSelectionListener() {\n      @Override\n      public void valueChanged(ListSelectionEvent e) {\n        final List<Locale> currentItems = myLocalesModel.getItems();\n        for (Object o : projectExistLocalesList.getSelectedValues()) {\n          Locale l = (Locale) o;\n          if (!restrictedLocales.contains(l) && !currentItems.contains(l)) {\n            myAddLocaleFromExistButton.setEnabled(true);\n            return;\n          }\n        }\n        myAddLocaleFromExistButton.setEnabled(false);\n      }\n    });",
      "info" : "ExpressionStatement[13392-13960]:ExpressionStatement[14104-14672]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13540-13952]:Block[14252-14664]"
    }, {
      "left" : "final List<Locale> currentItems = myLocalesModel.getItems();",
      "right" : "final List<Locale> currentItems = myLocalesModel.getItems();",
      "info" : "VariableDeclarationStatement[13550-13610]:VariableDeclarationStatement[14262-14322]"
    }, {
      "left" : "for (Object o : projectExistLocalesList.getSelectedValues())",
      "right" : "for (Object o : projectExistLocalesList.getSelectedValues())",
      "info" : "EnhancedForStatement[13619-13890]:EnhancedForStatement[14331-14602]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13680-13890]:Block[14392-14602]"
    }, {
      "left" : "Locale l = (Locale) o;",
      "right" : "Locale l = (Locale) o;",
      "info" : "VariableDeclarationStatement[13692-13714]:VariableDeclarationStatement[14404-14426]"
    }, {
      "left" : "if (!restrictedLocales.contains(l) && !currentItems.contains(l))",
      "right" : "if (!restrictedLocales.contains(l) && !currentItems.contains(l))",
      "info" : "IfStatement[13725-13880]:IfStatement[14437-14592]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13790-13880]:Block[14502-14592]"
    }, {
      "left" : "myAddLocaleFromExistButton.setEnabled(true);",
      "right" : "myAddLocaleFromExistButton.setEnabled(true);",
      "info" : "ExpressionStatement[13804-13848]:ExpressionStatement[14516-14560]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[13861-13868]:ReturnStatement[14573-14580]"
    }, {
      "left" : "myAddLocaleFromExistButton.setEnabled(false);",
      "right" : "myAddLocaleFromExistButton.setEnabled(false);",
      "info" : "ExpressionStatement[13899-13944]:ExpressionStatement[14611-14656]"
    }, {
      "left" : "myAddLocaleFromExistButton.setEnabled(false);",
      "right" : "myAddLocaleFromExistButton.setEnabled(false);",
      "info" : "ExpressionStatement[13965-14010]:ExpressionStatement[14677-14722]"
    }, {
      "left" : "myAddAllButton = new JButton(\"Add All\");",
      "right" : "myAddAllButton = new JButton(\"Add All\");",
      "info" : "ExpressionStatement[14016-14056]:ExpressionStatement[14728-14768]"
    }, {
      "left" : "new ClickListener() {\n      @Override\n      public boolean onClick(@NotNull MouseEvent event, int clickCount) {\n        if (clickCount == 1) {\n          myLocalesModel.add(existLocalesListModel.getLocales());\n        }\n        return false;\n      }\n    }.installOn(myAddAllButton);",
      "right" : "new ClickListener() {\n      @Override\n      public boolean onClick(@NotNull MouseEvent event, int clickCount) {\n        if (clickCount == 1) {\n          myLocalesModel.add(existLocalesListModel.getLocales());\n        }\n        return false;\n      }\n    }.installOn(myAddAllButton);",
      "info" : "ExpressionStatement[14061-14342]:ExpressionStatement[14773-15054]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14171-14309]:Block[14883-15021]"
    }, {
      "left" : "if (clickCount == 1)",
      "right" : "if (clickCount == 1)",
      "info" : "IfStatement[14181-14279]:IfStatement[14893-14991]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14202-14279]:Block[14914-14991]"
    }, {
      "left" : "myLocalesModel.add(existLocalesListModel.getLocales());",
      "right" : "myLocalesModel.add(existLocalesListModel.getLocales());",
      "info" : "ExpressionStatement[14214-14269]:ExpressionStatement[14926-14981]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[14288-14301]:ReturnStatement[15000-15013]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14428-14890]:Block[15140-15602]"
    }, {
      "left" : "return new ColoredListCellRenderer<Locale>() {\n      @Override\n      protected void customizeCellRenderer(JList list, Locale locale, int index, boolean selected, boolean hasFocus) {\n        if (PropertiesUtil.DEFAULT_LOCALE == locale) {\n          append(\"Default locale\");\n        } else {\n          append(locale.toString());\n          append(PropertiesUtil.getPresentableLocale(locale), SimpleTextAttributes.GRAY_ATTRIBUTES);\n        }\n      }\n    };",
      "right" : "return new ColoredListCellRenderer<Locale>() {\n      @Override\n      protected void customizeCellRenderer(JList list, Locale locale, int index, boolean selected, boolean hasFocus) {\n        if (PropertiesUtil.DEFAULT_LOCALE == locale) {\n          append(\"Default locale\");\n        } else {\n          append(locale.toString());\n          append(PropertiesUtil.getPresentableLocale(locale), SimpleTextAttributes.GRAY_ATTRIBUTES);\n        }\n      }\n    };",
      "info" : "ReturnStatement[14434-14886]:ReturnStatement[15146-15598]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14614-14879]:Block[15326-15591]"
    }, {
      "left" : "if (PropertiesUtil.DEFAULT_LOCALE == locale)",
      "right" : "if (PropertiesUtil.DEFAULT_LOCALE == locale)",
      "info" : "IfStatement[14624-14871]:IfStatement[15336-15583]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14669-14716]:Block[15381-15428]"
    }, {
      "left" : "append(\"Default locale\");",
      "right" : "append(\"Default locale\");",
      "info" : "ExpressionStatement[14681-14706]:ExpressionStatement[15393-15418]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14722-14871]:Block[15434-15583]"
    }, {
      "left" : "append(locale.toString());",
      "right" : "append(locale.toString());",
      "info" : "ExpressionStatement[14734-14760]:ExpressionStatement[15446-15472]"
    }, {
      "left" : "append(PropertiesUtil.getPresentableLocale(locale), SimpleTextAttributes.GRAY_ATTRIBUTES);",
      "right" : "append(PropertiesUtil.getPresentableLocale(locale), SimpleTextAttributes.GRAY_ATTRIBUTES);",
      "info" : "ExpressionStatement[14771-14861]:ExpressionStatement[15483-15573]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15041-15717]:Block[15753-16429]"
    }, {
      "left" : "myLocales = new ArrayList<Locale>();",
      "right" : "myLocales = new ArrayList<Locale>();",
      "info" : "ExpressionStatement[15049-15085]:ExpressionStatement[15761-15797]"
    }, {
      "left" : "myLocales.add(PropertiesUtil.DEFAULT_LOCALE);",
      "right" : "myLocales.add(PropertiesUtil.DEFAULT_LOCALE);",
      "info" : "ExpressionStatement[15092-15137]:ExpressionStatement[15804-15849]"
    }, {
      "left" : "PropertiesReferenceManager.getInstance(myProject).processPropertiesFiles(GlobalSearchScope.projectScope(myProject), new PropertiesFileProcessor() {\n        @Override\n        public boolean process(String baseName, PropertiesFile propertiesFile) {\n          final Locale locale = propertiesFile.getLocale();\n          if (locale != PropertiesUtil.DEFAULT_LOCALE && !myLocales.contains(locale)) {\n            myLocales.add(locale);\n          }\n          return true;\n        }\n      }, BundleNameEvaluator.DEFAULT);",
      "right" : "PropertiesReferenceManager.getInstance(myProject).processPropertiesFiles(GlobalSearchScope.projectScope(myProject), new PropertiesFileProcessor() {\n        @Override\n        public boolean process(String baseName, PropertiesFile propertiesFile) {\n          final Locale locale = propertiesFile.getLocale();\n          if (locale != PropertiesUtil.DEFAULT_LOCALE && !myLocales.contains(locale)) {\n            myLocales.add(locale);\n          }\n          return true;\n        }\n      }, BundleNameEvaluator.DEFAULT);",
      "info" : "ExpressionStatement[15144-15657]:ExpressionStatement[15856-16369]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15389-15618]:Block[16101-16330]"
    }, {
      "left" : "final Locale locale = propertiesFile.getLocale();",
      "right" : "final Locale locale = propertiesFile.getLocale();",
      "info" : "VariableDeclarationStatement[15401-15450]:VariableDeclarationStatement[16113-16162]"
    }, {
      "left" : "if (locale != PropertiesUtil.DEFAULT_LOCALE && !myLocales.contains(locale))",
      "right" : "if (locale != PropertiesUtil.DEFAULT_LOCALE && !myLocales.contains(locale))",
      "info" : "IfStatement[15461-15585]:IfStatement[16173-16297]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15537-15585]:Block[16249-16297]"
    }, {
      "left" : "myLocales.add(locale);",
      "right" : "myLocales.add(locale);",
      "info" : "ExpressionStatement[15551-15573]:ExpressionStatement[16263-16285]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[15596-15608]:ReturnStatement[16308-16320]"
    }, {
      "left" : "Collections.sort(myLocales, LOCALE_COMPARATOR);",
      "right" : "Collections.sort(myLocales, LOCALE_COMPARATOR);",
      "info" : "ExpressionStatement[15664-15711]:ExpressionStatement[16376-16423]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15758-15796]:Block[16470-16508]"
    }, {
      "left" : "return myLocales.size();",
      "right" : "return myLocales.size();",
      "info" : "ReturnStatement[15766-15790]:ReturnStatement[16478-16502]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15854-15896]:Block[16566-16608]"
    }, {
      "left" : "return myLocales.get(index);",
      "right" : "return myLocales.get(index);",
      "info" : "ReturnStatement[15862-15890]:ReturnStatement[16574-16602]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15935-15966]:Block[16647-16678]"
    }, {
      "left" : "return myLocales;",
      "right" : "return myLocales;",
      "info" : "ReturnStatement[15943-15960]:ReturnStatement[16655-16672]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16073-16568]:Block[16785-17280]"
    }, {
      "left" : "PsiDirectory containingDirectory = null;",
      "right" : "PsiDirectory containingDirectory = null;",
      "info" : "VariableDeclarationStatement[16079-16119]:VariableDeclarationStatement[16791-16831]"
    }, {
      "left" : "for (PropertiesFile propertiesFile : resourceBundle.getPropertiesFiles())",
      "right" : "for (PropertiesFile propertiesFile : resourceBundle.getPropertiesFiles())",
      "info" : "EnhancedForStatement[16124-16483]:EnhancedForStatement[16836-17195]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16198-16483]:Block[16910-17195]"
    }, {
      "left" : "if (containingDirectory == null)",
      "right" : "if (containingDirectory == null)",
      "info" : "IfStatement[16206-16477]:IfStatement[16918-17189]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16239-16339]:Block[16951-17051]"
    }, {
      "left" : "containingDirectory = propertiesFile.getContainingFile().getContainingDirectory();",
      "right" : "containingDirectory = propertiesFile.getContainingFile().getContainingDirectory();",
      "info" : "ExpressionStatement[16249-16331]:ExpressionStatement[16961-17043]"
    }, {
      "left" : "if (!containingDirectory.isEquivalentTo(propertiesFile.getContainingFile().getContainingDirectory()))",
      "right" : "if (!containingDirectory.isEquivalentTo(propertiesFile.getContainingFile().getContainingDirectory()))",
      "info" : "IfStatement[16345-16477]:IfStatement[17057-17189]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16447-16477]:Block[17159-17189]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[16457-16469]:ReturnStatement[17169-17181]"
    }, {
      "left" : "LOG.assertTrue(containingDirectory != null);",
      "right" : "LOG.assertTrue(containingDirectory != null);",
      "info" : "ExpressionStatement[16488-16532]:ExpressionStatement[17200-17244]"
    }, {
      "left" : "return containingDirectory;",
      "right" : "return containingDirectory;",
      "info" : "ReturnStatement[16537-16564]:ReturnStatement[17249-17276]"
    } ]
  },
  "interFileMappings" : { }
}