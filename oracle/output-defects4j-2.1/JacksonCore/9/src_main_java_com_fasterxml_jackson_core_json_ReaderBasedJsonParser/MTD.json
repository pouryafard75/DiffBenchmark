{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "ReaderBasedJsonParser",
      "right" : "ReaderBasedJsonParser",
      "info" : "TypeDeclaration[409-81178]:TypeDeclaration[409-81372]"
    }, {
      "left" : "protected final static int[] _icLatin1 = CharTypes.getInputCodeLatin1();",
      "right" : "protected final static int[] _icLatin1 = CharTypes.getInputCodeLatin1();",
      "info" : "FieldDeclaration[801-873]:FieldDeclaration[801-873]"
    }, {
      "left" : "protected Reader _reader;",
      "right" : "protected Reader _reader;",
      "info" : "FieldDeclaration[1050-1256]:FieldDeclaration[1050-1256]"
    }, {
      "left" : "protected char[] _inputBuffer;",
      "right" : "protected char[] _inputBuffer;",
      "info" : "FieldDeclaration[1262-1416]:FieldDeclaration[1262-1416]"
    }, {
      "left" : "protected boolean _bufferRecyclable;",
      "right" : "protected boolean _bufferRecyclable;",
      "info" : "FieldDeclaration[1422-1708]:FieldDeclaration[1422-1708]"
    }, {
      "left" : "protected ObjectCodec _objectCodec;",
      "right" : "protected ObjectCodec _objectCodec;",
      "info" : "FieldDeclaration[1883-1918]:FieldDeclaration[1883-1918]"
    }, {
      "left" : "final protected CharsToNameCanonicalizer _symbols;",
      "right" : "final protected CharsToNameCanonicalizer _symbols;",
      "info" : "FieldDeclaration[1924-1974]:FieldDeclaration[1924-1974]"
    }, {
      "left" : "final protected int _hashSeed;",
      "right" : "final protected int _hashSeed;",
      "info" : "FieldDeclaration[1984-2014]:FieldDeclaration[1984-2014]"
    }, {
      "left" : "protected boolean _tokenIncomplete = false;",
      "right" : "protected boolean _tokenIncomplete = false;",
      "info" : "FieldDeclaration[2189-2425]:FieldDeclaration[2189-2425]"
    }, {
      "left" : "public ReaderBasedJsonParser(IOContext ctxt, int features, Reader r,\n            ObjectCodec codec, CharsToNameCanonicalizer st,\n            char[] inputBuffer, int start, int end,\n            boolean bufferRecyclable)",
      "right" : "public ReaderBasedJsonParser(IOContext ctxt, int features, Reader r,\n            ObjectCodec codec, CharsToNameCanonicalizer st,\n            char[] inputBuffer, int start, int end,\n            boolean bufferRecyclable)",
      "info" : "MethodDeclaration[2593-3285]:MethodDeclaration[2593-3285]"
    }, {
      "left" : "public ReaderBasedJsonParser(IOContext ctxt, int features, Reader r,\n        ObjectCodec codec, CharsToNameCanonicalizer st)",
      "right" : "public ReaderBasedJsonParser(IOContext ctxt, int features, Reader r,\n        ObjectCodec codec, CharsToNameCanonicalizer st)",
      "info" : "MethodDeclaration[3291-3844]:MethodDeclaration[3291-3844]"
    }, {
      "left" : "public ObjectCodec getCodec()",
      "right" : "public ObjectCodec getCodec()",
      "info" : "MethodDeclaration[4029-4093]:MethodDeclaration[4029-4093]"
    }, {
      "left" : "public void setCodec(ObjectCodec c)",
      "right" : "public void setCodec(ObjectCodec c)",
      "info" : "MethodDeclaration[4098-4165]:MethodDeclaration[4098-4165]"
    }, {
      "left" : "public int releaseBuffered(Writer w) throws IOException",
      "right" : "public int releaseBuffered(Writer w) throws IOException",
      "info" : "MethodDeclaration[4175-4475]:MethodDeclaration[4175-4475]"
    }, {
      "left" : "public Object getInputSource()",
      "right" : "public Object getInputSource()",
      "info" : "MethodDeclaration[4481-4541]:MethodDeclaration[4481-4541]"
    }, {
      "left" : "protected boolean loadMore() throws IOException",
      "right" : "protected boolean loadMore() throws IOException",
      "info" : "MethodDeclaration[4547-5234]:MethodDeclaration[4547-5234]"
    }, {
      "left" : "protected char getNextChar(String eofMsg) throws IOException",
      "right" : "protected char getNextChar(String eofMsg) throws IOException",
      "info" : "MethodDeclaration[5240-5458]:MethodDeclaration[5240-5458]"
    }, {
      "left" : "protected void _closeInput() throws IOException",
      "right" : "protected void _closeInput() throws IOException",
      "info" : "MethodDeclaration[5464-6125]:MethodDeclaration[5464-6125]"
    }, {
      "left" : "protected void _releaseBuffers() throws IOException",
      "right" : "protected void _releaseBuffers() throws IOException",
      "info" : "MethodDeclaration[6131-6830]:MethodDeclaration[6131-6830]"
    }, {
      "left" : "public final String getText() throws IOException",
      "right" : "public final String getText() throws IOException",
      "info" : "MethodDeclaration[7019-7678]:MethodDeclaration[7019-7678]"
    }, {
      "left" : "public final String getValueAsString() throws IOException",
      "right" : "public final String getValueAsString() throws IOException",
      "info" : "MethodDeclaration[7774-8174]:MethodDeclaration[7774-8271]"
    }, {
      "left" : "public final String getValueAsString(String defValue) throws IOException",
      "right" : "public final String getValueAsString(String defValue) throws IOException",
      "info" : "MethodDeclaration[8202-8617]:MethodDeclaration[8299-8811]"
    }, {
      "left" : "protected final String _getText2(JsonToken t)",
      "right" : "protected final String _getText2(JsonToken t)",
      "info" : "MethodDeclaration[8623-9065]:MethodDeclaration[8817-9259]"
    }, {
      "left" : "public final char[] getTextCharacters() throws IOException",
      "right" : "public final char[] getTextCharacters() throws IOException",
      "info" : "MethodDeclaration[9071-10387]:MethodDeclaration[9265-10581]"
    }, {
      "left" : "public final int getTextLength() throws IOException",
      "right" : "public final int getTextLength() throws IOException",
      "info" : "MethodDeclaration[10393-11173]:MethodDeclaration[10587-11367]"
    }, {
      "left" : "public final int getTextOffset() throws IOException",
      "right" : "public final int getTextOffset() throws IOException",
      "info" : "MethodDeclaration[11179-11870]:MethodDeclaration[11373-12064]"
    }, {
      "left" : "public byte[] getBinaryValue(Base64Variant b64variant) throws IOException",
      "right" : "public byte[] getBinaryValue(Base64Variant b64variant) throws IOException",
      "info" : "MethodDeclaration[11876-13208]:MethodDeclaration[12070-13402]"
    }, {
      "left" : "public int readBinaryValue(Base64Variant b64variant, OutputStream out) throws IOException",
      "right" : "public int readBinaryValue(Base64Variant b64variant, OutputStream out) throws IOException",
      "info" : "MethodDeclaration[13218-13852]:MethodDeclaration[13412-14046]"
    }, {
      "left" : "protected int _readBinary(Base64Variant b64variant, OutputStream out, byte[] buffer) throws IOException",
      "right" : "protected int _readBinary(Base64Variant b64variant, OutputStream out, byte[] buffer) throws IOException",
      "info" : "MethodDeclaration[13858-18994]:MethodDeclaration[14052-19188]"
    }, {
      "left" : "public final JsonToken nextToken() throws IOException",
      "right" : "public final JsonToken nextToken() throws IOException",
      "info" : "MethodDeclaration[19169-23618]:MethodDeclaration[19363-23812]"
    }, {
      "left" : "private final JsonToken _nextAfterName()",
      "right" : "private final JsonToken _nextAfterName()",
      "info" : "MethodDeclaration[23624-24195]:MethodDeclaration[23818-24389]"
    }, {
      "left" : "public final String nextTextValue() throws IOException",
      "right" : "public final String nextTextValue() throws IOException",
      "info" : "MethodDeclaration[24370-25413]:MethodDeclaration[24564-25607]"
    }, {
      "left" : "public final int nextIntValue(int defaultValue) throws IOException",
      "right" : "public final int nextIntValue(int defaultValue) throws IOException",
      "info" : "MethodDeclaration[25469-26355]:MethodDeclaration[25663-26549]"
    }, {
      "left" : "public final long nextLongValue(long defaultValue) throws IOException",
      "right" : "public final long nextLongValue(long defaultValue) throws IOException",
      "info" : "MethodDeclaration[26411-27341]:MethodDeclaration[26605-27535]"
    }, {
      "left" : "public final Boolean nextBooleanValue() throws IOException",
      "right" : "public final Boolean nextBooleanValue() throws IOException",
      "info" : "MethodDeclaration[27401-28488]:MethodDeclaration[27595-28682]"
    }, {
      "left" : "protected final JsonToken _parsePosNumber(int ch) throws IOException",
      "right" : "protected final JsonToken _parsePosNumber(int ch) throws IOException",
      "info" : "MethodDeclaration[28678-31460]:MethodDeclaration[28872-31654]"
    }, {
      "left" : "private final JsonToken _parseFloat(int ch, int startPtr, int ptr, boolean neg, int intLen)\n        throws IOException",
      "right" : "private final JsonToken _parseFloat(int ch, int startPtr, int ptr, boolean neg, int intLen)\n        throws IOException",
      "info" : "MethodDeclaration[31466-33848]:MethodDeclaration[31660-34042]"
    }, {
      "left" : "protected final JsonToken _parseNegNumber() throws IOException",
      "right" : "protected final JsonToken _parseNegNumber() throws IOException",
      "info" : "MethodDeclaration[33854-35373]:MethodDeclaration[34048-35567]"
    }, {
      "left" : "private final JsonToken _parseNumber2(boolean neg, int startPtr) throws IOException",
      "right" : "private final JsonToken _parseNumber2(boolean neg, int startPtr) throws IOException",
      "info" : "MethodDeclaration[35379-40030]:MethodDeclaration[35573-40224]"
    }, {
      "left" : "private final char _verifyNoLeadingZeroes() throws IOException",
      "right" : "private final char _verifyNoLeadingZeroes() throws IOException",
      "info" : "MethodDeclaration[40036-40602]:MethodDeclaration[40230-40796]"
    }, {
      "left" : "private char _verifyNLZ2() throws IOException",
      "right" : "private char _verifyNLZ2() throws IOException",
      "info" : "MethodDeclaration[40616-41647]:MethodDeclaration[40810-41841]"
    }, {
      "left" : "protected JsonToken _handleInvalidNumberStart(int ch, boolean negative) throws IOException",
      "right" : "protected JsonToken _handleInvalidNumberStart(int ch, boolean negative) throws IOException",
      "info" : "MethodDeclaration[41653-43133]:MethodDeclaration[41847-43327]"
    }, {
      "left" : "private final void _verifyRootSpace(int ch) throws IOException",
      "right" : "private final void _verifyRootSpace(int ch) throws IOException",
      "info" : "MethodDeclaration[43139-43836]:MethodDeclaration[43333-44030]"
    }, {
      "left" : "protected final String _parseName() throws IOException",
      "right" : "protected final String _parseName() throws IOException",
      "info" : "MethodDeclaration[44033-44970]:MethodDeclaration[44227-45164]"
    }, {
      "left" : "private String _parseName2(int startPtr, int hash, int endChar) throws IOException",
      "right" : "private String _parseName2(int startPtr, int hash, int endChar) throws IOException",
      "info" : "MethodDeclaration[44976-46992]:MethodDeclaration[45170-47186]"
    }, {
      "left" : "protected String _handleOddName(int i) throws IOException",
      "right" : "protected String _handleOddName(int i) throws IOException",
      "info" : "MethodDeclaration[46998-49346]:MethodDeclaration[47192-49540]"
    }, {
      "left" : "protected String _parseAposName() throws IOException",
      "right" : "protected String _parseAposName() throws IOException",
      "info" : "MethodDeclaration[49352-50335]:MethodDeclaration[49546-50529]"
    }, {
      "left" : "protected JsonToken _handleOddValue(int i) throws IOException",
      "right" : "protected JsonToken _handleOddValue(int i) throws IOException",
      "info" : "MethodDeclaration[50341-52543]:MethodDeclaration[50535-52737]"
    }, {
      "left" : "protected JsonToken _handleApos() throws IOException",
      "right" : "protected JsonToken _handleApos() throws IOException",
      "info" : "MethodDeclaration[52553-54016]:MethodDeclaration[52747-54210]"
    }, {
      "left" : "private String _handleOddName2(int startPtr, int hash, int[] codes) throws IOException",
      "right" : "private String _handleOddName2(int startPtr, int hash, int[] codes) throws IOException",
      "info" : "MethodDeclaration[54026-55511]:MethodDeclaration[54220-55705]"
    }, {
      "left" : "protected final void _finishString() throws IOException",
      "right" : "protected final void _finishString() throws IOException",
      "info" : "MethodDeclaration[55519-56708]:MethodDeclaration[55713-56902]"
    }, {
      "left" : "protected void _finishString2() throws IOException",
      "right" : "protected void _finishString2() throws IOException",
      "info" : "MethodDeclaration[56714-58174]:MethodDeclaration[56908-58368]"
    }, {
      "left" : "protected final void _skipString() throws IOException",
      "right" : "protected final void _skipString() throws IOException",
      "info" : "MethodDeclaration[58180-59828]:MethodDeclaration[58374-60022]"
    }, {
      "left" : "protected final void _skipCR() throws IOException",
      "right" : "protected final void _skipCR() throws IOException",
      "info" : "MethodDeclaration[60021-60416]:MethodDeclaration[60215-60610]"
    }, {
      "left" : "private final int _skipColon() throws IOException",
      "right" : "private final int _skipColon() throws IOException",
      "info" : "MethodDeclaration[60426-62253]:MethodDeclaration[60620-62447]"
    }, {
      "left" : "private final int _skipColon2(boolean gotColon) throws IOException",
      "right" : "private final int _skipColon2(boolean gotColon) throws IOException",
      "info" : "MethodDeclaration[62259-63600]:MethodDeclaration[62453-63794]"
    }, {
      "left" : "private final int _skipComma(int i) throws IOException",
      "right" : "private final int _skipComma(int i) throws IOException",
      "info" : "MethodDeclaration[63659-64588]:MethodDeclaration[63853-64782]"
    }, {
      "left" : "private final int _skipAfterComma2() throws IOException",
      "right" : "private final int _skipAfterComma2() throws IOException",
      "info" : "MethodDeclaration[64594-65593]:MethodDeclaration[64788-65787]"
    }, {
      "left" : "private final int _skipWSOrEnd() throws IOException",
      "right" : "private final int _skipWSOrEnd() throws IOException",
      "info" : "MethodDeclaration[65603-67211]:MethodDeclaration[65797-67405]"
    }, {
      "left" : "private int _skipWSOrEnd2() throws IOException",
      "right" : "private int _skipWSOrEnd2() throws IOException",
      "info" : "MethodDeclaration[67217-68235]:MethodDeclaration[67411-68429]"
    }, {
      "left" : "private void _skipComment() throws IOException",
      "right" : "private void _skipComment() throws IOException",
      "info" : "MethodDeclaration[68245-68951]:MethodDeclaration[68439-69145]"
    }, {
      "left" : "private void _skipCComment() throws IOException",
      "right" : "private void _skipCComment() throws IOException",
      "info" : "MethodDeclaration[68957-70010]:MethodDeclaration[69151-70204]"
    }, {
      "left" : "private boolean _skipYAMLComment() throws IOException",
      "right" : "private boolean _skipYAMLComment() throws IOException",
      "info" : "MethodDeclaration[70016-70214]:MethodDeclaration[70210-70408]"
    }, {
      "left" : "private void _skipLine() throws IOException",
      "right" : "private void _skipLine() throws IOException",
      "info" : "MethodDeclaration[70224-70844]:MethodDeclaration[70418-71038]"
    }, {
      "left" : "protected char _decodeEscaped() throws IOException",
      "right" : "protected char _decodeEscaped() throws IOException",
      "info" : "MethodDeclaration[70850-72316]:MethodDeclaration[71044-72510]"
    }, {
      "left" : "private final void _matchTrue() throws IOException",
      "right" : "private final void _matchTrue() throws IOException",
      "info" : "MethodDeclaration[72326-72867]:MethodDeclaration[72520-73061]"
    }, {
      "left" : "private final void _matchFalse() throws IOException",
      "right" : "private final void _matchFalse() throws IOException",
      "info" : "MethodDeclaration[72873-73435]:MethodDeclaration[73067-73629]"
    }, {
      "left" : "private final void _matchNull() throws IOException",
      "right" : "private final void _matchNull() throws IOException",
      "info" : "MethodDeclaration[73441-73982]:MethodDeclaration[73635-74176]"
    }, {
      "left" : "protected final void _matchToken(String matchStr, int i) throws IOException",
      "right" : "protected final void _matchToken(String matchStr, int i) throws IOException",
      "info" : "MethodDeclaration[73988-75110]:MethodDeclaration[74182-75304]"
    }, {
      "left" : "protected byte[] _decodeBase64(Base64Variant b64variant) throws IOException",
      "right" : "protected byte[] _decodeBase64(Base64Variant b64variant) throws IOException",
      "info" : "MethodDeclaration[75281-80051]:MethodDeclaration[75475-80245]"
    }, {
      "left" : "protected void _reportInvalidToken(String matchedPart) throws IOException",
      "right" : "protected void _reportInvalidToken(String matchedPart) throws IOException",
      "info" : "MethodDeclaration[80224-80381]:MethodDeclaration[80418-80575]"
    }, {
      "left" : "protected void _reportInvalidToken(String matchedPart, String msg) throws IOException",
      "right" : "protected void _reportInvalidToken(String matchedPart, String msg) throws IOException",
      "info" : "MethodDeclaration[80391-81176]:MethodDeclaration[80585-81370]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3004-3285]:Block[3004-3285]"
    }, {
      "left" : "super(ctxt, features);",
      "right" : "super(ctxt, features);",
      "info" : "SuperConstructorInvocation[3014-3036]:SuperConstructorInvocation[3014-3036]"
    }, {
      "left" : "_reader = r;",
      "right" : "_reader = r;",
      "info" : "ExpressionStatement[3045-3057]:ExpressionStatement[3045-3057]"
    }, {
      "left" : "_inputBuffer = inputBuffer;",
      "right" : "_inputBuffer = inputBuffer;",
      "info" : "ExpressionStatement[3066-3093]:ExpressionStatement[3066-3093]"
    }, {
      "left" : "_inputPtr = start;",
      "right" : "_inputPtr = start;",
      "info" : "ExpressionStatement[3102-3120]:ExpressionStatement[3102-3120]"
    }, {
      "left" : "_inputEnd = end;",
      "right" : "_inputEnd = end;",
      "info" : "ExpressionStatement[3129-3145]:ExpressionStatement[3129-3145]"
    }, {
      "left" : "_objectCodec = codec;",
      "right" : "_objectCodec = codec;",
      "info" : "ExpressionStatement[3154-3175]:ExpressionStatement[3154-3175]"
    }, {
      "left" : "_symbols = st;",
      "right" : "_symbols = st;",
      "info" : "ExpressionStatement[3184-3198]:ExpressionStatement[3184-3198]"
    }, {
      "left" : "_hashSeed = st.hashSeed();",
      "right" : "_hashSeed = st.hashSeed();",
      "info" : "ExpressionStatement[3207-3233]:ExpressionStatement[3207-3233]"
    }, {
      "left" : "_bufferRecyclable = bufferRecyclable;",
      "right" : "_bufferRecyclable = bufferRecyclable;",
      "info" : "ExpressionStatement[3242-3279]:ExpressionStatement[3242-3279]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3569-3844]:Block[3569-3844]"
    }, {
      "left" : "super(ctxt, features);",
      "right" : "super(ctxt, features);",
      "info" : "SuperConstructorInvocation[3579-3601]:SuperConstructorInvocation[3579-3601]"
    }, {
      "left" : "_reader = r;",
      "right" : "_reader = r;",
      "info" : "ExpressionStatement[3610-3622]:ExpressionStatement[3610-3622]"
    }, {
      "left" : "_inputBuffer = ctxt.allocTokenBuffer();",
      "right" : "_inputBuffer = ctxt.allocTokenBuffer();",
      "info" : "ExpressionStatement[3631-3670]:ExpressionStatement[3631-3670]"
    }, {
      "left" : "_inputPtr = 0;",
      "right" : "_inputPtr = 0;",
      "info" : "ExpressionStatement[3679-3693]:ExpressionStatement[3679-3693]"
    }, {
      "left" : "_inputEnd = 0;",
      "right" : "_inputEnd = 0;",
      "info" : "ExpressionStatement[3702-3716]:ExpressionStatement[3702-3716]"
    }, {
      "left" : "_objectCodec = codec;",
      "right" : "_objectCodec = codec;",
      "info" : "ExpressionStatement[3725-3746]:ExpressionStatement[3725-3746]"
    }, {
      "left" : "_symbols = st;",
      "right" : "_symbols = st;",
      "info" : "ExpressionStatement[3755-3769]:ExpressionStatement[3755-3769]"
    }, {
      "left" : "_hashSeed = st.hashSeed();",
      "right" : "_hashSeed = st.hashSeed();",
      "info" : "ExpressionStatement[3778-3804]:ExpressionStatement[3778-3804]"
    }, {
      "left" : "_bufferRecyclable = true;",
      "right" : "_bufferRecyclable = true;",
      "info" : "ExpressionStatement[3813-3838]:ExpressionStatement[3813-3838]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4069-4093]:Block[4069-4093]"
    }, {
      "left" : "return _objectCodec;",
      "right" : "return _objectCodec;",
      "info" : "ReturnStatement[4071-4091]:ReturnStatement[4071-4091]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4144-4165]:Block[4144-4165]"
    }, {
      "left" : "_objectCodec = c;",
      "right" : "_objectCodec = c;",
      "info" : "ExpressionStatement[4146-4163]:ExpressionStatement[4146-4163]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4245-4475]:Block[4245-4475]"
    }, {
      "left" : "int count = _inputEnd - _inputPtr;",
      "right" : "int count = _inputEnd - _inputPtr;",
      "info" : "VariableDeclarationStatement[4255-4289]:VariableDeclarationStatement[4255-4289]"
    }, {
      "left" : "if (count < 1)",
      "right" : "if (count < 1)",
      "info" : "IfStatement[4298-4326]:IfStatement[4298-4326]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4313-4326]:Block[4313-4326]"
    }, {
      "left" : "return 0;",
      "right" : "return 0;",
      "info" : "ReturnStatement[4315-4324]:ReturnStatement[4315-4324]"
    }, {
      "left" : "int origPtr = _inputPtr;",
      "right" : "int origPtr = _inputPtr;",
      "info" : "VariableDeclarationStatement[4376-4400]:VariableDeclarationStatement[4376-4400]"
    }, {
      "left" : "w.write(_inputBuffer, origPtr, count);",
      "right" : "w.write(_inputBuffer, origPtr, count);",
      "info" : "ExpressionStatement[4409-4447]:ExpressionStatement[4409-4447]"
    }, {
      "left" : "return count;",
      "right" : "return count;",
      "info" : "ReturnStatement[4456-4469]:ReturnStatement[4456-4469]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4522-4541]:Block[4522-4541]"
    }, {
      "left" : "return _reader;",
      "right" : "return _reader;",
      "info" : "ReturnStatement[4524-4539]:ReturnStatement[4524-4539]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4613-5234]:Block[4613-5234]"
    }, {
      "left" : "_currInputProcessed += _inputEnd;",
      "right" : "_currInputProcessed += _inputEnd;",
      "info" : "ExpressionStatement[4623-4656]:ExpressionStatement[4623-4656]"
    }, {
      "left" : "_currInputRowStart -= _inputEnd;",
      "right" : "_currInputRowStart -= _inputEnd;",
      "info" : "ExpressionStatement[4665-4697]:ExpressionStatement[4665-4697]"
    }, {
      "left" : "if (_reader != null)",
      "right" : "if (_reader != null)",
      "info" : "IfStatement[4707-5206]:IfStatement[4707-5206]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4728-5206]:Block[4728-5206]"
    }, {
      "left" : "int count = _reader.read(_inputBuffer, 0, _inputBuffer.length);",
      "right" : "int count = _reader.read(_inputBuffer, 0, _inputBuffer.length);",
      "info" : "VariableDeclarationStatement[4742-4805]:VariableDeclarationStatement[4742-4805]"
    }, {
      "left" : "if (count > 0)",
      "right" : "if (count > 0)",
      "info" : "IfStatement[4818-4943]:IfStatement[4818-4943]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4833-4943]:Block[4833-4943]"
    }, {
      "left" : "_inputPtr = 0;",
      "right" : "_inputPtr = 0;",
      "info" : "ExpressionStatement[4851-4865]:ExpressionStatement[4851-4865]"
    }, {
      "left" : "_inputEnd = count;",
      "right" : "_inputEnd = count;",
      "info" : "ExpressionStatement[4882-4900]:ExpressionStatement[4882-4900]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[4917-4929]:ReturnStatement[4917-4929]"
    }, {
      "left" : "_closeInput();",
      "right" : "_closeInput();",
      "info" : "ExpressionStatement[4984-4998]:ExpressionStatement[4984-4998]"
    }, {
      "left" : "if (count == 0)",
      "right" : "if (count == 0)",
      "info" : "IfStatement[5063-5196]:IfStatement[5063-5196]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5079-5196]:Block[5079-5196]"
    }, {
      "left" : "throw new IOException(\"Reader returned 0 characters when trying to read \"+_inputEnd);",
      "right" : "throw new IOException(\"Reader returned 0 characters when trying to read \"+_inputEnd);",
      "info" : "ThrowStatement[5097-5182]:ThrowStatement[5097-5182]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[5215-5228]:ReturnStatement[5215-5228]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5301-5458]:Block[5301-5458]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[5311-5410]:IfStatement[5311-5410]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5339-5410]:Block[5339-5410]"
    }, {
      "left" : "if (!loadMore())",
      "right" : "if (!loadMore())",
      "info" : "IfStatement[5353-5400]:IfStatement[5353-5400]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5370-5400]:Block[5370-5400]"
    }, {
      "left" : "_reportInvalidEOF(eofMsg);",
      "right" : "_reportInvalidEOF(eofMsg);",
      "info" : "ExpressionStatement[5372-5398]:ExpressionStatement[5372-5398]"
    }, {
      "left" : "return _inputBuffer[_inputPtr++];",
      "right" : "return _inputBuffer[_inputPtr++];",
      "info" : "ReturnStatement[5419-5452]:ReturnStatement[5419-5452]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5526-6125]:Block[5526-6125]"
    }, {
      "left" : "if (_reader != null)",
      "right" : "if (_reader != null)",
      "info" : "IfStatement[5922-6119]:IfStatement[5922-6119]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5943-6119]:Block[5943-6119]"
    }, {
      "left" : "if (_ioContext.isResourceManaged() || isEnabled(Feature.AUTO_CLOSE_SOURCE))",
      "right" : "if (_ioContext.isResourceManaged() || isEnabled(Feature.AUTO_CLOSE_SOURCE))",
      "info" : "IfStatement[5957-6081]:IfStatement[5957-6081]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6033-6081]:Block[6033-6081]"
    }, {
      "left" : "_reader.close();",
      "right" : "_reader.close();",
      "info" : "ExpressionStatement[6051-6067]:ExpressionStatement[6051-6067]"
    }, {
      "left" : "_reader = null;",
      "right" : "_reader = null;",
      "info" : "ExpressionStatement[6094-6109]:ExpressionStatement[6094-6109]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6449-6830]:Block[6449-6830]"
    }, {
      "left" : "super._releaseBuffers();",
      "right" : "super._releaseBuffers();",
      "info" : "ExpressionStatement[6459-6483]:ExpressionStatement[6459-6483]"
    }, {
      "left" : "_symbols.release();",
      "right" : "_symbols.release();",
      "info" : "ExpressionStatement[6529-6548]:ExpressionStatement[6529-6548]"
    }, {
      "left" : "if (_bufferRecyclable)",
      "right" : "if (_bufferRecyclable)",
      "info" : "IfStatement[6617-6824]:IfStatement[6617-6824]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6640-6824]:Block[6640-6824]"
    }, {
      "left" : "char[] buf = _inputBuffer;",
      "right" : "char[] buf = _inputBuffer;",
      "info" : "VariableDeclarationStatement[6654-6680]:VariableDeclarationStatement[6654-6680]"
    }, {
      "left" : "if (buf != null)",
      "right" : "if (buf != null)",
      "info" : "IfStatement[6693-6814]:IfStatement[6693-6814]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6710-6814]:Block[6710-6814]"
    }, {
      "left" : "_inputBuffer = null;",
      "right" : "_inputBuffer = null;",
      "info" : "ExpressionStatement[6728-6748]:ExpressionStatement[6728-6748]"
    }, {
      "left" : "_ioContext.releaseTokenBuffer(buf);",
      "right" : "_ioContext.releaseTokenBuffer(buf);",
      "info" : "ExpressionStatement[6765-6800]:ExpressionStatement[6765-6800]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7345-7678]:Block[7345-7678]"
    }, {
      "left" : "JsonToken t = _currToken;",
      "right" : "JsonToken t = _currToken;",
      "info" : "VariableDeclarationStatement[7355-7380]:VariableDeclarationStatement[7355-7380]"
    }, {
      "left" : "if (t == JsonToken.VALUE_STRING)",
      "right" : "if (t == JsonToken.VALUE_STRING)",
      "info" : "IfStatement[7389-7643]:IfStatement[7389-7643]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7422-7643]:Block[7422-7643]"
    }, {
      "left" : "if (_tokenIncomplete)",
      "right" : "if (_tokenIncomplete)",
      "info" : "IfStatement[7436-7582]:IfStatement[7436-7582]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7458-7582]:Block[7458-7582]"
    }, {
      "left" : "_tokenIncomplete = false;",
      "right" : "_tokenIncomplete = false;",
      "info" : "ExpressionStatement[7476-7501]:ExpressionStatement[7476-7501]"
    }, {
      "left" : "_finishString();",
      "right" : "_finishString();",
      "info" : "ExpressionStatement[7518-7534]:ExpressionStatement[7518-7534]"
    }, {
      "left" : "return _textBuffer.contentsAsString();",
      "right" : "return _textBuffer.contentsAsString();",
      "info" : "ReturnStatement[7595-7633]:ReturnStatement[7595-7633]"
    }, {
      "left" : "return _getText2(t);",
      "right" : "return _getText2(t);",
      "info" : "ReturnStatement[7652-7672]:ReturnStatement[7652-7672]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7850-8174]:Block[7850-8271]"
    }, {
      "left" : "if (_currToken == JsonToken.VALUE_STRING)",
      "right" : "if (_currToken == JsonToken.FIELD_NAME)",
      "info" : "IfStatement[7860-8123]:IfStatement[8132-8220]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7902-8123]:Block[7902-8123]"
    }, {
      "left" : "if (_tokenIncomplete)",
      "right" : "if (_tokenIncomplete)",
      "info" : "IfStatement[7916-8062]:IfStatement[7916-8062]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7938-8062]:Block[7938-8062]"
    }, {
      "left" : "_tokenIncomplete = false;",
      "right" : "_tokenIncomplete = false;",
      "info" : "ExpressionStatement[7956-7981]:ExpressionStatement[7956-7981]"
    }, {
      "left" : "_finishString();",
      "right" : "_finishString();",
      "info" : "ExpressionStatement[7998-8014]:ExpressionStatement[7998-8014]"
    }, {
      "left" : "return _textBuffer.contentsAsString();",
      "right" : "return _textBuffer.contentsAsString();",
      "info" : "ReturnStatement[8075-8113]:ReturnStatement[8075-8113]"
    }, {
      "left" : "return super.getValueAsString(null);",
      "right" : "return super.getValueAsString(null);",
      "info" : "ReturnStatement[8132-8168]:ReturnStatement[8229-8265]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8289-8617]:Block[8386-8811]"
    }, {
      "left" : "if (_currToken == JsonToken.VALUE_STRING)",
      "right" : "if (_currToken == JsonToken.FIELD_NAME)",
      "info" : "IfStatement[8299-8562]:IfStatement[8668-8756]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8341-8562]:Block[8438-8659]"
    }, {
      "left" : "if (_tokenIncomplete)",
      "right" : "if (_tokenIncomplete)",
      "info" : "IfStatement[8355-8501]:IfStatement[8452-8598]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8377-8501]:Block[8474-8598]"
    }, {
      "left" : "_tokenIncomplete = false;",
      "right" : "_tokenIncomplete = false;",
      "info" : "ExpressionStatement[8395-8420]:ExpressionStatement[8492-8517]"
    }, {
      "left" : "_finishString();",
      "right" : "_finishString();",
      "info" : "ExpressionStatement[8437-8453]:ExpressionStatement[8534-8550]"
    }, {
      "left" : "return _textBuffer.contentsAsString();",
      "right" : "return _textBuffer.contentsAsString();",
      "info" : "ReturnStatement[8514-8552]:ReturnStatement[8611-8649]"
    }, {
      "left" : "return super.getValueAsString(defValue);",
      "right" : "return super.getValueAsString(defValue);",
      "info" : "ReturnStatement[8571-8611]:ReturnStatement[8765-8805]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8669-9065]:Block[8863-9259]"
    }, {
      "left" : "if (t == null)",
      "right" : "if (t == null)",
      "info" : "IfStatement[8679-8730]:IfStatement[8873-8924]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8694-8730]:Block[8888-8924]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[8708-8720]:ReturnStatement[8902-8914]"
    }, {
      "left" : "switch (t.id()) {\n        case ID_FIELD_NAME:\n            return _parsingContext.getCurrentName();\n\n        case ID_STRING:\n            // fall through\n        case ID_NUMBER_INT:\n        case ID_NUMBER_FLOAT:\n            return _textBuffer.contentsAsString();\n        default:\n            return t.asString();\n        }",
      "right" : "switch (t.id()) {\n        case ID_FIELD_NAME:\n            return _parsingContext.getCurrentName();\n\n        case ID_STRING:\n            // fall through\n        case ID_NUMBER_INT:\n        case ID_NUMBER_FLOAT:\n            return _textBuffer.contentsAsString();\n        default:\n            return t.asString();\n        }",
      "info" : "SwitchStatement[8739-9059]:SwitchStatement[8933-9253]"
    }, {
      "left" : "case ID_FIELD_NAME:",
      "right" : "case ID_FIELD_NAME:",
      "info" : "SwitchCase[8765-8784]:SwitchCase[8959-8978]"
    }, {
      "left" : "return _parsingContext.getCurrentName();",
      "right" : "return _parsingContext.getCurrentName();",
      "info" : "ReturnStatement[8797-8837]:ReturnStatement[8991-9031]"
    }, {
      "left" : "case ID_STRING:",
      "right" : "case ID_STRING:",
      "info" : "SwitchCase[8847-8862]:SwitchCase[9041-9056]"
    }, {
      "left" : "case ID_NUMBER_INT:",
      "right" : "case ID_NUMBER_INT:",
      "info" : "SwitchCase[8899-8918]:SwitchCase[9093-9112]"
    }, {
      "left" : "case ID_NUMBER_FLOAT:",
      "right" : "case ID_NUMBER_FLOAT:",
      "info" : "SwitchCase[8927-8948]:SwitchCase[9121-9142]"
    }, {
      "left" : "return _textBuffer.contentsAsString();",
      "right" : "return _textBuffer.contentsAsString();",
      "info" : "ReturnStatement[8961-8999]:ReturnStatement[9155-9193]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[9008-9016]:SwitchCase[9202-9210]"
    }, {
      "left" : "return t.asString();",
      "right" : "return t.asString();",
      "info" : "ReturnStatement[9029-9049]:ReturnStatement[9223-9243]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9148-10387]:Block[9342-10581]"
    }, {
      "left" : "if (_currToken != null)",
      "right" : "if (_currToken != null)",
      "info" : "IfStatement[9158-10360]:IfStatement[9352-10554]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9182-10360]:Block[9376-10554]"
    }, {
      "left" : "switch (_currToken.id()) {\n            case ID_FIELD_NAME:\n                if (!_nameCopied) {\n                    String name = _parsingContext.getCurrentName();\n                    int nameLen = name.length();\n                    if (_nameCopyBuffer == null) {\n                        _nameCopyBuffer = _ioContext.allocNameCopyBuffer(nameLen);\n                    } else if (_nameCopyBuffer.length < nameLen) {\n                        _nameCopyBuffer = new char[nameLen];\n                    }\n                    name.getChars(0, nameLen, _nameCopyBuffer, 0);\n                    _nameCopied = true;\n                }\n                return _nameCopyBuffer;\n    \n            case ID_STRING:\n                if (_tokenIncomplete) {\n                    _tokenIncomplete = false;\n                    _finishString(); // only strings can be incomplete\n                }\n                // fall through\n            case ID_NUMBER_INT:\n            case ID_NUMBER_FLOAT:\n                return _textBuffer.getTextBuffer();\n                \n            default:\n                return _currToken.asCharArray();\n            }",
      "right" : "switch (_currToken.id()) {\n            case ID_FIELD_NAME:\n                if (!_nameCopied) {\n                    String name = _parsingContext.getCurrentName();\n                    int nameLen = name.length();\n                    if (_nameCopyBuffer == null) {\n                        _nameCopyBuffer = _ioContext.allocNameCopyBuffer(nameLen);\n                    } else if (_nameCopyBuffer.length < nameLen) {\n                        _nameCopyBuffer = new char[nameLen];\n                    }\n                    name.getChars(0, nameLen, _nameCopyBuffer, 0);\n                    _nameCopied = true;\n                }\n                return _nameCopyBuffer;\n    \n            case ID_STRING:\n                if (_tokenIncomplete) {\n                    _tokenIncomplete = false;\n                    _finishString(); // only strings can be incomplete\n                }\n                // fall through\n            case ID_NUMBER_INT:\n            case ID_NUMBER_FLOAT:\n                return _textBuffer.getTextBuffer();\n                \n            default:\n                return _currToken.asCharArray();\n            }",
      "info" : "SwitchStatement[9231-10350]:SwitchStatement[9425-10544]"
    }, {
      "left" : "case ID_FIELD_NAME:",
      "right" : "case ID_FIELD_NAME:",
      "info" : "SwitchCase[9270-9289]:SwitchCase[9464-9483]"
    }, {
      "left" : "if (!_nameCopied)",
      "right" : "if (!_nameCopied)",
      "info" : "IfStatement[9306-9851]:IfStatement[9500-10045]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9324-9851]:Block[9518-10045]"
    }, {
      "left" : "String name = _parsingContext.getCurrentName();",
      "right" : "String name = _parsingContext.getCurrentName();",
      "info" : "VariableDeclarationStatement[9346-9393]:VariableDeclarationStatement[9540-9587]"
    }, {
      "left" : "int nameLen = name.length();",
      "right" : "int nameLen = name.length();",
      "info" : "VariableDeclarationStatement[9414-9442]:VariableDeclarationStatement[9608-9636]"
    }, {
      "left" : "if (_nameCopyBuffer == null)",
      "right" : "if (_nameCopyBuffer == null)",
      "info" : "IfStatement[9463-9726]:IfStatement[9657-9920]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9492-9598]:Block[9686-9792]"
    }, {
      "left" : "_nameCopyBuffer = _ioContext.allocNameCopyBuffer(nameLen);",
      "right" : "_nameCopyBuffer = _ioContext.allocNameCopyBuffer(nameLen);",
      "info" : "ExpressionStatement[9518-9576]:ExpressionStatement[9712-9770]"
    }, {
      "left" : "if (_nameCopyBuffer.length < nameLen)",
      "right" : "if (_nameCopyBuffer.length < nameLen)",
      "info" : "IfStatement[9604-9726]:IfStatement[9798-9920]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9642-9726]:Block[9836-9920]"
    }, {
      "left" : "_nameCopyBuffer = new char[nameLen];",
      "right" : "_nameCopyBuffer = new char[nameLen];",
      "info" : "ExpressionStatement[9668-9704]:ExpressionStatement[9862-9898]"
    }, {
      "left" : "name.getChars(0, nameLen, _nameCopyBuffer, 0);",
      "right" : "name.getChars(0, nameLen, _nameCopyBuffer, 0);",
      "info" : "ExpressionStatement[9747-9793]:ExpressionStatement[9941-9987]"
    }, {
      "left" : "_nameCopied = true;",
      "right" : "_nameCopied = true;",
      "info" : "ExpressionStatement[9814-9833]:ExpressionStatement[10008-10027]"
    }, {
      "left" : "return _nameCopyBuffer;",
      "right" : "return _nameCopyBuffer;",
      "info" : "ReturnStatement[9868-9891]:ReturnStatement[10062-10085]"
    }, {
      "left" : "case ID_STRING:",
      "right" : "case ID_STRING:",
      "info" : "SwitchCase[9909-9924]:SwitchCase[10103-10118]"
    }, {
      "left" : "if (_tokenIncomplete)",
      "right" : "if (_tokenIncomplete)",
      "info" : "IfStatement[9941-10099]:IfStatement[10135-10293]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9963-10099]:Block[10157-10293]"
    }, {
      "left" : "_tokenIncomplete = false;",
      "right" : "_tokenIncomplete = false;",
      "info" : "ExpressionStatement[9985-10010]:ExpressionStatement[10179-10204]"
    }, {
      "left" : "_finishString();",
      "right" : "_finishString();",
      "info" : "ExpressionStatement[10031-10047]:ExpressionStatement[10225-10241]"
    }, {
      "left" : "case ID_NUMBER_INT:",
      "right" : "case ID_NUMBER_INT:",
      "info" : "SwitchCase[10144-10163]:SwitchCase[10338-10357]"
    }, {
      "left" : "case ID_NUMBER_FLOAT:",
      "right" : "case ID_NUMBER_FLOAT:",
      "info" : "SwitchCase[10176-10197]:SwitchCase[10370-10391]"
    }, {
      "left" : "return _textBuffer.getTextBuffer();",
      "right" : "return _textBuffer.getTextBuffer();",
      "info" : "ReturnStatement[10214-10249]:ReturnStatement[10408-10443]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[10279-10287]:SwitchCase[10473-10481]"
    }, {
      "left" : "return _currToken.asCharArray();",
      "right" : "return _currToken.asCharArray();",
      "info" : "ReturnStatement[10304-10336]:ReturnStatement[10498-10530]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[10369-10381]:ReturnStatement[10563-10575]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10463-11173]:Block[10657-11367]"
    }, {
      "left" : "if (_currToken != null)",
      "right" : "if (_currToken != null)",
      "info" : "IfStatement[10473-11149]:IfStatement[10667-11343]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10497-11149]:Block[10691-11343]"
    }, {
      "left" : "switch (_currToken.id()) {\n                \n            case ID_FIELD_NAME:\n                return _parsingContext.getCurrentName().length();\n            case ID_STRING:\n                if (_tokenIncomplete) {\n                    _tokenIncomplete = false;\n                    _finishString(); // only strings can be incomplete\n                }\n                // fall through\n            case ID_NUMBER_INT:\n            case ID_NUMBER_FLOAT:\n                return _textBuffer.size();\n                \n            default:\n                return _currToken.asCharArray().length;\n            }",
      "right" : "switch (_currToken.id()) {\n                \n            case ID_FIELD_NAME:\n                return _parsingContext.getCurrentName().length();\n            case ID_STRING:\n                if (_tokenIncomplete) {\n                    _tokenIncomplete = false;\n                    _finishString(); // only strings can be incomplete\n                }\n                // fall through\n            case ID_NUMBER_INT:\n            case ID_NUMBER_FLOAT:\n                return _textBuffer.size();\n                \n            default:\n                return _currToken.asCharArray().length;\n            }",
      "info" : "SwitchStatement[10546-11139]:SwitchStatement[10740-11333]"
    }, {
      "left" : "case ID_FIELD_NAME:",
      "right" : "case ID_FIELD_NAME:",
      "info" : "SwitchCase[10602-10621]:SwitchCase[10796-10815]"
    }, {
      "left" : "return _parsingContext.getCurrentName().length();",
      "right" : "return _parsingContext.getCurrentName().length();",
      "info" : "ReturnStatement[10638-10687]:ReturnStatement[10832-10881]"
    }, {
      "left" : "case ID_STRING:",
      "right" : "case ID_STRING:",
      "info" : "SwitchCase[10700-10715]:SwitchCase[10894-10909]"
    }, {
      "left" : "if (_tokenIncomplete)",
      "right" : "if (_tokenIncomplete)",
      "info" : "IfStatement[10732-10890]:IfStatement[10926-11084]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10754-10890]:Block[10948-11084]"
    }, {
      "left" : "_tokenIncomplete = false;",
      "right" : "_tokenIncomplete = false;",
      "info" : "ExpressionStatement[10776-10801]:ExpressionStatement[10970-10995]"
    }, {
      "left" : "_finishString();",
      "right" : "_finishString();",
      "info" : "ExpressionStatement[10822-10838]:ExpressionStatement[11016-11032]"
    }, {
      "left" : "case ID_NUMBER_INT:",
      "right" : "case ID_NUMBER_INT:",
      "info" : "SwitchCase[10935-10954]:SwitchCase[11129-11148]"
    }, {
      "left" : "case ID_NUMBER_FLOAT:",
      "right" : "case ID_NUMBER_FLOAT:",
      "info" : "SwitchCase[10967-10988]:SwitchCase[11161-11182]"
    }, {
      "left" : "return _textBuffer.size();",
      "right" : "return _textBuffer.size();",
      "info" : "ReturnStatement[11005-11031]:ReturnStatement[11199-11225]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[11061-11069]:SwitchCase[11255-11263]"
    }, {
      "left" : "return _currToken.asCharArray().length;",
      "right" : "return _currToken.asCharArray().length;",
      "info" : "ReturnStatement[11086-11125]:ReturnStatement[11280-11319]"
    }, {
      "left" : "return 0;",
      "right" : "return 0;",
      "info" : "ReturnStatement[11158-11167]:ReturnStatement[11352-11361]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11249-11870]:Block[11443-12064]"
    }, {
      "left" : "if (_currToken != null)",
      "right" : "if (_currToken != null)",
      "info" : "IfStatement[11326-11846]:IfStatement[11520-12040]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11350-11846]:Block[11544-12040]"
    }, {
      "left" : "switch (_currToken.id()) {\n            case ID_FIELD_NAME:\n                return 0;\n            case ID_STRING:\n                if (_tokenIncomplete) {\n                    _tokenIncomplete = false;\n                    _finishString(); // only strings can be incomplete\n                }\n                // fall through\n            case ID_NUMBER_INT:\n            case ID_NUMBER_FLOAT:\n                return _textBuffer.getTextOffset();\n            default:\n            }",
      "right" : "switch (_currToken.id()) {\n            case ID_FIELD_NAME:\n                return 0;\n            case ID_STRING:\n                if (_tokenIncomplete) {\n                    _tokenIncomplete = false;\n                    _finishString(); // only strings can be incomplete\n                }\n                // fall through\n            case ID_NUMBER_INT:\n            case ID_NUMBER_FLOAT:\n                return _textBuffer.getTextOffset();\n            default:\n            }",
      "info" : "SwitchStatement[11364-11836]:SwitchStatement[11558-12030]"
    }, {
      "left" : "case ID_FIELD_NAME:",
      "right" : "case ID_FIELD_NAME:",
      "info" : "SwitchCase[11403-11422]:SwitchCase[11597-11616]"
    }, {
      "left" : "return 0;",
      "right" : "return 0;",
      "info" : "ReturnStatement[11439-11448]:ReturnStatement[11633-11642]"
    }, {
      "left" : "case ID_STRING:",
      "right" : "case ID_STRING:",
      "info" : "SwitchCase[11461-11476]:SwitchCase[11655-11670]"
    }, {
      "left" : "if (_tokenIncomplete)",
      "right" : "if (_tokenIncomplete)",
      "info" : "IfStatement[11493-11651]:IfStatement[11687-11845]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11515-11651]:Block[11709-11845]"
    }, {
      "left" : "_tokenIncomplete = false;",
      "right" : "_tokenIncomplete = false;",
      "info" : "ExpressionStatement[11537-11562]:ExpressionStatement[11731-11756]"
    }, {
      "left" : "_finishString();",
      "right" : "_finishString();",
      "info" : "ExpressionStatement[11583-11599]:ExpressionStatement[11777-11793]"
    }, {
      "left" : "case ID_NUMBER_INT:",
      "right" : "case ID_NUMBER_INT:",
      "info" : "SwitchCase[11696-11715]:SwitchCase[11890-11909]"
    }, {
      "left" : "case ID_NUMBER_FLOAT:",
      "right" : "case ID_NUMBER_FLOAT:",
      "info" : "SwitchCase[11728-11749]:SwitchCase[11922-11943]"
    }, {
      "left" : "return _textBuffer.getTextOffset();",
      "right" : "return _textBuffer.getTextOffset();",
      "info" : "ReturnStatement[11766-11801]:ReturnStatement[11960-11995]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[11814-11822]:SwitchCase[12008-12016]"
    }, {
      "left" : "return 0;",
      "right" : "return 0;",
      "info" : "ReturnStatement[11855-11864]:ReturnStatement[12049-12058]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11968-13208]:Block[12162-13402]"
    }, {
      "left" : "if (_currToken != JsonToken.VALUE_STRING &&\n                (_currToken != JsonToken.VALUE_EMBEDDED_OBJECT || _binaryValue == null))",
      "right" : "if (_currToken != JsonToken.VALUE_STRING &&\n                (_currToken != JsonToken.VALUE_EMBEDDED_OBJECT || _binaryValue == null))",
      "info" : "IfStatement[11978-12250]:IfStatement[12172-12444]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12111-12250]:Block[12305-12444]"
    }, {
      "left" : "_reportError(\"Current token (\"+_currToken+\") not VALUE_STRING or VALUE_EMBEDDED_OBJECT, can not access as binary\");",
      "right" : "_reportError(\"Current token (\"+_currToken+\") not VALUE_STRING or VALUE_EMBEDDED_OBJECT, can not access as binary\");",
      "info" : "ExpressionStatement[12125-12240]:ExpressionStatement[12319-12434]"
    }, {
      "left" : "if (_tokenIncomplete)",
      "right" : "if (_tokenIncomplete)",
      "info" : "IfStatement[12365-13173]:IfStatement[12559-13367]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12387-12834]:Block[12581-13028]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[12401-12649]:TryStatement[12595-12843]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12405-12478]:Block[12599-12672]"
    }, {
      "left" : "_binaryValue = _decodeBase64(b64variant);",
      "right" : "_binaryValue = _decodeBase64(b64variant);",
      "info" : "ExpressionStatement[12423-12464]:ExpressionStatement[12617-12658]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12516-12649]:Block[12710-12843]"
    }, {
      "left" : "throw _constructError(\"Failed to decode VALUE_STRING as base64 (\"+b64variant+\"): \"+iae.getMessage());",
      "right" : "throw _constructError(\"Failed to decode VALUE_STRING as base64 (\"+b64variant+\"): \"+iae.getMessage());",
      "info" : "ThrowStatement[12534-12635]:ThrowStatement[12728-12829]"
    }, {
      "left" : "_tokenIncomplete = false;",
      "right" : "_tokenIncomplete = false;",
      "info" : "ExpressionStatement[12799-12824]:ExpressionStatement[12993-13018]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12840-13173]:Block[13034-13367]"
    }, {
      "left" : "if (_binaryValue == null)",
      "right" : "if (_binaryValue == null)",
      "info" : "IfStatement[12892-13163]:IfStatement[13086-13357]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12918-13163]:Block[13112-13357]"
    }, {
      "left" : "@SuppressWarnings(\"resource\")\n                ByteArrayBuilder builder = _getByteArrayBuilder();",
      "right" : "@SuppressWarnings(\"resource\")\n                ByteArrayBuilder builder = _getByteArrayBuilder();",
      "info" : "VariableDeclarationStatement[12936-13032]:VariableDeclarationStatement[13130-13226]"
    }, {
      "left" : "_decodeBase64(getText(), builder, b64variant);",
      "right" : "_decodeBase64(getText(), builder, b64variant);",
      "info" : "ExpressionStatement[13049-13095]:ExpressionStatement[13243-13289]"
    }, {
      "left" : "_binaryValue = builder.toByteArray();",
      "right" : "_binaryValue = builder.toByteArray();",
      "info" : "ExpressionStatement[13112-13149]:ExpressionStatement[13306-13343]"
    }, {
      "left" : "return _binaryValue;",
      "right" : "return _binaryValue;",
      "info" : "ReturnStatement[13182-13202]:ReturnStatement[13376-13396]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13326-13852]:Block[13520-14046]"
    }, {
      "left" : "if (!_tokenIncomplete || _currToken != JsonToken.VALUE_STRING)",
      "right" : "if (!_tokenIncomplete || _currToken != JsonToken.VALUE_STRING)",
      "info" : "IfStatement[13412-13592]:IfStatement[13606-13786]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13475-13592]:Block[13669-13786]"
    }, {
      "left" : "byte[] b = getBinaryValue(b64variant);",
      "right" : "byte[] b = getBinaryValue(b64variant);",
      "info" : "VariableDeclarationStatement[13489-13527]:VariableDeclarationStatement[13683-13721]"
    }, {
      "left" : "out.write(b);",
      "right" : "out.write(b);",
      "info" : "ExpressionStatement[13540-13553]:ExpressionStatement[13734-13747]"
    }, {
      "left" : "return b.length;",
      "right" : "return b.length;",
      "info" : "ReturnStatement[13566-13582]:ReturnStatement[13760-13776]"
    }, {
      "left" : "byte[] buf = _ioContext.allocBase64Buffer();",
      "right" : "byte[] buf = _ioContext.allocBase64Buffer();",
      "info" : "VariableDeclarationStatement[13655-13699]:VariableDeclarationStatement[13849-13893]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[13708-13846]:TryStatement[13902-14040]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13712-13777]:Block[13906-13971]"
    }, {
      "left" : "return _readBinary(b64variant, out, buf);",
      "right" : "return _readBinary(b64variant, out, buf);",
      "info" : "ReturnStatement[13726-13767]:ReturnStatement[13920-13961]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13786-13846]:Block[13980-14040]"
    }, {
      "left" : "_ioContext.releaseBase64Buffer(buf);",
      "right" : "_ioContext.releaseBase64Buffer(buf);",
      "info" : "ExpressionStatement[13800-13836]:ExpressionStatement[13994-14030]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13966-18994]:Block[14160-19188]"
    }, {
      "left" : "int outputPtr = 0;",
      "right" : "int outputPtr = 0;",
      "info" : "VariableDeclarationStatement[13976-13994]:VariableDeclarationStatement[14170-14188]"
    }, {
      "left" : "final int outputEnd = buffer.length - 3;",
      "right" : "final int outputEnd = buffer.length - 3;",
      "info" : "VariableDeclarationStatement[14003-14043]:VariableDeclarationStatement[14197-14237]"
    }, {
      "left" : "int outputCount = 0;",
      "right" : "int outputCount = 0;",
      "info" : "VariableDeclarationStatement[14052-14072]:VariableDeclarationStatement[14246-14266]"
    }, {
      "left" : "while (true)",
      "right" : "while (true)",
      "info" : "WhileStatement[14082-18804]:WhileStatement[14276-18998]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14095-18804]:Block[14289-18998]"
    }, {
      "left" : "char ch;",
      "right" : "char ch;",
      "info" : "VariableDeclarationStatement[14172-14180]:VariableDeclarationStatement[14366-14374]"
    }, {
      "left" : "do{...}",
      "right" : "do{...}",
      "info" : "DoStatement[14193-14390]:DoStatement[14387-14584]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14196-14365]:Block[14390-14559]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[14214-14303]:IfStatement[14408-14497]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14242-14303]:Block[14436-14497]"
    }, {
      "left" : "loadMoreGuaranteed();",
      "right" : "loadMoreGuaranteed();",
      "info" : "ExpressionStatement[14264-14285]:ExpressionStatement[14458-14479]"
    }, {
      "left" : "ch = _inputBuffer[_inputPtr++];",
      "right" : "ch = _inputBuffer[_inputPtr++];",
      "info" : "ExpressionStatement[14320-14351]:ExpressionStatement[14514-14545]"
    }, {
      "left" : "int bits = b64variant.decodeBase64Char(ch);",
      "right" : "int bits = b64variant.decodeBase64Char(ch);",
      "info" : "VariableDeclarationStatement[14403-14446]:VariableDeclarationStatement[14597-14640]"
    }, {
      "left" : "if (bits < 0)",
      "right" : "if (bits < 0)",
      "info" : "IfStatement[14459-14769]:IfStatement[14653-14963]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14473-14769]:Block[14667-14963]"
    }, {
      "left" : "if (ch == '\"')",
      "right" : "if (ch == '\"')",
      "info" : "IfStatement[14528-14589]:IfStatement[14722-14783]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14543-14589]:Block[14737-14783]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[14565-14571]:BreakStatement[14759-14765]"
    }, {
      "left" : "bits = _decodeBase64Escape(b64variant, ch, 0);",
      "right" : "bits = _decodeBase64Escape(b64variant, ch, 0);",
      "info" : "ExpressionStatement[14606-14652]:ExpressionStatement[14800-14846]"
    }, {
      "left" : "if (bits < 0)",
      "right" : "if (bits < 0)",
      "info" : "IfStatement[14669-14755]:IfStatement[14863-14949]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14683-14755]:Block[14877-14949]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[14728-14737]:ContinueStatement[14922-14931]"
    }, {
      "left" : "if (outputPtr > outputEnd)",
      "right" : "if (outputPtr > outputEnd)",
      "info" : "IfStatement[14825-14989]:IfStatement[15019-15183]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14852-14989]:Block[15046-15183]"
    }, {
      "left" : "outputCount += outputPtr;",
      "right" : "outputCount += outputPtr;",
      "info" : "ExpressionStatement[14870-14895]:ExpressionStatement[15064-15089]"
    }, {
      "left" : "out.write(buffer, 0, outputPtr);",
      "right" : "out.write(buffer, 0, outputPtr);",
      "info" : "ExpressionStatement[14912-14944]:ExpressionStatement[15106-15138]"
    }, {
      "left" : "outputPtr = 0;",
      "right" : "outputPtr = 0;",
      "info" : "ExpressionStatement[14961-14975]:ExpressionStatement[15155-15169]"
    }, {
      "left" : "int decodedData = bits;",
      "right" : "int decodedData = bits;",
      "info" : "VariableDeclarationStatement[15003-15026]:VariableDeclarationStatement[15197-15220]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[15111-15192]:IfStatement[15305-15386]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15139-15192]:Block[15333-15386]"
    }, {
      "left" : "loadMoreGuaranteed();",
      "right" : "loadMoreGuaranteed();",
      "info" : "ExpressionStatement[15157-15178]:ExpressionStatement[15351-15372]"
    }, {
      "left" : "ch = _inputBuffer[_inputPtr++];",
      "right" : "ch = _inputBuffer[_inputPtr++];",
      "info" : "ExpressionStatement[15205-15236]:ExpressionStatement[15399-15430]"
    }, {
      "left" : "bits = b64variant.decodeBase64Char(ch);",
      "right" : "bits = b64variant.decodeBase64Char(ch);",
      "info" : "ExpressionStatement[15249-15288]:ExpressionStatement[15443-15482]"
    }, {
      "left" : "if (bits < 0)",
      "right" : "if (bits < 0)",
      "info" : "IfStatement[15301-15393]:IfStatement[15495-15587]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15315-15393]:Block[15509-15587]"
    }, {
      "left" : "bits = _decodeBase64Escape(b64variant, ch, 1);",
      "right" : "bits = _decodeBase64Escape(b64variant, ch, 1);",
      "info" : "ExpressionStatement[15333-15379]:ExpressionStatement[15527-15573]"
    }, {
      "left" : "decodedData = (decodedData << 6) | bits;",
      "right" : "decodedData = (decodedData << 6) | bits;",
      "info" : "ExpressionStatement[15406-15446]:ExpressionStatement[15600-15640]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[15521-15602]:IfStatement[15715-15796]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15549-15602]:Block[15743-15796]"
    }, {
      "left" : "loadMoreGuaranteed();",
      "right" : "loadMoreGuaranteed();",
      "info" : "ExpressionStatement[15567-15588]:ExpressionStatement[15761-15782]"
    }, {
      "left" : "ch = _inputBuffer[_inputPtr++];",
      "right" : "ch = _inputBuffer[_inputPtr++];",
      "info" : "ExpressionStatement[15615-15646]:ExpressionStatement[15809-15840]"
    }, {
      "left" : "bits = b64variant.decodeBase64Char(ch);",
      "right" : "bits = b64variant.decodeBase64Char(ch);",
      "info" : "ExpressionStatement[15659-15698]:ExpressionStatement[15853-15892]"
    }, {
      "left" : "if (bits < 0)",
      "right" : "if (bits < 0)",
      "info" : "IfStatement[15769-16971]:IfStatement[15963-17165]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15783-16971]:Block[15977-17165]"
    }, {
      "left" : "if (bits != Base64Variant.BASE64_VALUE_PADDING)",
      "right" : "if (bits != Base64Variant.BASE64_VALUE_PADDING)",
      "info" : "IfStatement[15801-16246]:IfStatement[15995-16440]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15849-16246]:Block[16043-16440]"
    }, {
      "left" : "if (ch == '\"' && !b64variant.usesPadding())",
      "right" : "if (ch == '\"' && !b64variant.usesPadding())",
      "info" : "IfStatement[15954-16161]:IfStatement[16148-16355]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15998-16161]:Block[16192-16355]"
    }, {
      "left" : "decodedData >>= 4;",
      "right" : "decodedData >>= 4;",
      "info" : "ExpressionStatement[16024-16042]:ExpressionStatement[16218-16236]"
    }, {
      "left" : "buffer[outputPtr++] = (byte) decodedData;",
      "right" : "buffer[outputPtr++] = (byte) decodedData;",
      "info" : "ExpressionStatement[16067-16108]:ExpressionStatement[16261-16302]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[16133-16139]:BreakStatement[16327-16333]"
    }, {
      "left" : "bits = _decodeBase64Escape(b64variant, ch, 2);",
      "right" : "bits = _decodeBase64Escape(b64variant, ch, 2);",
      "info" : "ExpressionStatement[16182-16228]:ExpressionStatement[16376-16422]"
    }, {
      "left" : "if (bits == Base64Variant.BASE64_VALUE_PADDING)",
      "right" : "if (bits == Base64Variant.BASE64_VALUE_PADDING)",
      "info" : "IfStatement[16263-16957]:IfStatement[16457-17151]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16311-16957]:Block[16505-17151]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[16377-16474]:IfStatement[16571-16668]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16405-16474]:Block[16599-16668]"
    }, {
      "left" : "loadMoreGuaranteed();",
      "right" : "loadMoreGuaranteed();",
      "info" : "ExpressionStatement[16431-16452]:ExpressionStatement[16625-16646]"
    }, {
      "left" : "ch = _inputBuffer[_inputPtr++];",
      "right" : "ch = _inputBuffer[_inputPtr++];",
      "info" : "ExpressionStatement[16495-16526]:ExpressionStatement[16689-16720]"
    }, {
      "left" : "if (!b64variant.usesPaddingChar(ch))",
      "right" : "if (!b64variant.usesPaddingChar(ch))",
      "info" : "IfStatement[16547-16745]:IfStatement[16741-16939]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16584-16745]:Block[16778-16939]"
    }, {
      "left" : "throw reportInvalidBase64Char(b64variant, ch, 3, \"expected padding character '\"+b64variant.getPaddingChar()+\"'\");",
      "right" : "throw reportInvalidBase64Char(b64variant, ch, 3, \"expected padding character '\"+b64variant.getPaddingChar()+\"'\");",
      "info" : "ThrowStatement[16610-16723]:ThrowStatement[16804-16917]"
    }, {
      "left" : "decodedData >>= 4;",
      "right" : "decodedData >>= 4;",
      "info" : "ExpressionStatement[16829-16847]:ExpressionStatement[17023-17041]"
    }, {
      "left" : "buffer[outputPtr++] = (byte) decodedData;",
      "right" : "buffer[outputPtr++] = (byte) decodedData;",
      "info" : "ExpressionStatement[16868-16909]:ExpressionStatement[17062-17103]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[16930-16939]:ContinueStatement[17124-17133]"
    }, {
      "left" : "decodedData = (decodedData << 6) | bits;",
      "right" : "decodedData = (decodedData << 6) | bits;",
      "info" : "ExpressionStatement[17018-17058]:ExpressionStatement[17212-17252]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[17142-17223]:IfStatement[17336-17417]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17170-17223]:Block[17364-17417]"
    }, {
      "left" : "loadMoreGuaranteed();",
      "right" : "loadMoreGuaranteed();",
      "info" : "ExpressionStatement[17188-17209]:ExpressionStatement[17382-17403]"
    }, {
      "left" : "ch = _inputBuffer[_inputPtr++];",
      "right" : "ch = _inputBuffer[_inputPtr++];",
      "info" : "ExpressionStatement[17236-17267]:ExpressionStatement[17430-17461]"
    }, {
      "left" : "bits = b64variant.decodeBase64Char(ch);",
      "right" : "bits = b64variant.decodeBase64Char(ch);",
      "info" : "ExpressionStatement[17280-17319]:ExpressionStatement[17474-17513]"
    }, {
      "left" : "if (bits < 0)",
      "right" : "if (bits < 0)",
      "info" : "IfStatement[17332-18510]:IfStatement[17526-18704]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17346-18510]:Block[17540-18704]"
    }, {
      "left" : "if (bits != Base64Variant.BASE64_VALUE_PADDING)",
      "right" : "if (bits != Base64Variant.BASE64_VALUE_PADDING)",
      "info" : "IfStatement[17364-17882]:IfStatement[17558-18076]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17412-17882]:Block[17606-18076]"
    }, {
      "left" : "if (ch == '\"' && !b64variant.usesPadding())",
      "right" : "if (ch == '\"' && !b64variant.usesPadding())",
      "info" : "IfStatement[17517-17797]:IfStatement[17711-17991]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17561-17797]:Block[17755-17991]"
    }, {
      "left" : "decodedData >>= 2;",
      "right" : "decodedData >>= 2;",
      "info" : "ExpressionStatement[17587-17605]:ExpressionStatement[17781-17799]"
    }, {
      "left" : "buffer[outputPtr++] = (byte) (decodedData >> 8);",
      "right" : "buffer[outputPtr++] = (byte) (decodedData >> 8);",
      "info" : "ExpressionStatement[17630-17678]:ExpressionStatement[17824-17872]"
    }, {
      "left" : "buffer[outputPtr++] = (byte) decodedData;",
      "right" : "buffer[outputPtr++] = (byte) decodedData;",
      "info" : "ExpressionStatement[17703-17744]:ExpressionStatement[17897-17938]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[17769-17775]:BreakStatement[17963-17969]"
    }, {
      "left" : "bits = _decodeBase64Escape(b64variant, ch, 3);",
      "right" : "bits = _decodeBase64Escape(b64variant, ch, 3);",
      "info" : "ExpressionStatement[17818-17864]:ExpressionStatement[18012-18058]"
    }, {
      "left" : "if (bits == Base64Variant.BASE64_VALUE_PADDING)",
      "right" : "if (bits == Base64Variant.BASE64_VALUE_PADDING)",
      "info" : "IfStatement[17899-18496]:IfStatement[18093-18690]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17947-18496]:Block[18141-18690]"
    }, {
      "left" : "decodedData >>= 2;",
      "right" : "decodedData >>= 2;",
      "info" : "ExpressionStatement[18299-18317]:ExpressionStatement[18493-18511]"
    }, {
      "left" : "buffer[outputPtr++] = (byte) (decodedData >> 8);",
      "right" : "buffer[outputPtr++] = (byte) (decodedData >> 8);",
      "info" : "ExpressionStatement[18338-18386]:ExpressionStatement[18532-18580]"
    }, {
      "left" : "buffer[outputPtr++] = (byte) decodedData;",
      "right" : "buffer[outputPtr++] = (byte) decodedData;",
      "info" : "ExpressionStatement[18407-18448]:ExpressionStatement[18601-18642]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[18469-18478]:ContinueStatement[18663-18672]"
    }, {
      "left" : "decodedData = (decodedData << 6) | bits;",
      "right" : "decodedData = (decodedData << 6) | bits;",
      "info" : "ExpressionStatement[18577-18617]:ExpressionStatement[18771-18811]"
    }, {
      "left" : "buffer[outputPtr++] = (byte) (decodedData >> 16);",
      "right" : "buffer[outputPtr++] = (byte) (decodedData >> 16);",
      "info" : "ExpressionStatement[18630-18679]:ExpressionStatement[18824-18873]"
    }, {
      "left" : "buffer[outputPtr++] = (byte) (decodedData >> 8);",
      "right" : "buffer[outputPtr++] = (byte) (decodedData >> 8);",
      "info" : "ExpressionStatement[18692-18740]:ExpressionStatement[18886-18934]"
    }, {
      "left" : "buffer[outputPtr++] = (byte) decodedData;",
      "right" : "buffer[outputPtr++] = (byte) decodedData;",
      "info" : "ExpressionStatement[18753-18794]:ExpressionStatement[18947-18988]"
    }, {
      "left" : "_tokenIncomplete = false;",
      "right" : "_tokenIncomplete = false;",
      "info" : "ExpressionStatement[18813-18838]:ExpressionStatement[19007-19032]"
    }, {
      "left" : "if (outputPtr > 0)",
      "right" : "if (outputPtr > 0)",
      "info" : "IfStatement[18847-18960]:IfStatement[19041-19154]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18866-18960]:Block[19060-19154]"
    }, {
      "left" : "outputCount += outputPtr;",
      "right" : "outputCount += outputPtr;",
      "info" : "ExpressionStatement[18880-18905]:ExpressionStatement[19074-19099]"
    }, {
      "left" : "out.write(buffer, 0, outputPtr);",
      "right" : "out.write(buffer, 0, outputPtr);",
      "info" : "ExpressionStatement[18918-18950]:ExpressionStatement[19112-19144]"
    }, {
      "left" : "return outputCount;",
      "right" : "return outputCount;",
      "info" : "ReturnStatement[18969-18988]:ReturnStatement[19163-19182]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19356-23618]:Block[19550-23812]"
    }, {
      "left" : "_numTypesValid = NR_UNKNOWN;",
      "right" : "_numTypesValid = NR_UNKNOWN;",
      "info" : "ExpressionStatement[19366-19394]:ExpressionStatement[19560-19588]"
    }, {
      "left" : "if (_currToken == JsonToken.FIELD_NAME)",
      "right" : "if (_currToken == JsonToken.FIELD_NAME)",
      "info" : "IfStatement[19617-19705]:IfStatement[19811-19899]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19657-19705]:Block[19851-19899]"
    }, {
      "left" : "return _nextAfterName();",
      "right" : "return _nextAfterName();",
      "info" : "ReturnStatement[19671-19695]:ReturnStatement[19865-19889]"
    }, {
      "left" : "if (_tokenIncomplete)",
      "right" : "if (_tokenIncomplete)",
      "info" : "IfStatement[19714-19805]:IfStatement[19908-19999]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19736-19805]:Block[19930-19999]"
    }, {
      "left" : "_skipString();",
      "right" : "_skipString();",
      "info" : "ExpressionStatement[19750-19764]:ExpressionStatement[19944-19958]"
    }, {
      "left" : "int i = _skipWSOrEnd();",
      "right" : "int i = _skipWSOrEnd();",
      "info" : "VariableDeclarationStatement[19814-19837]:VariableDeclarationStatement[20008-20031]"
    }, {
      "left" : "if (i < 0)",
      "right" : "if (i < 0)",
      "info" : "IfStatement[19846-20110]:IfStatement[20040-20304]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19857-20110]:Block[20051-20304]"
    }, {
      "left" : "close();",
      "right" : "close();",
      "info" : "ExpressionStatement[20052-20060]:ExpressionStatement[20246-20254]"
    }, {
      "left" : "return (_currToken = null);",
      "right" : "return (_currToken = null);",
      "info" : "ReturnStatement[20073-20100]:ReturnStatement[20267-20294]"
    }, {
      "left" : "_tokenInputTotal = _currInputProcessed + _inputPtr - 1;",
      "right" : "_tokenInputTotal = _currInputProcessed + _inputPtr - 1;",
      "info" : "ExpressionStatement[20250-20305]:ExpressionStatement[20444-20499]"
    }, {
      "left" : "_tokenInputRow = _currInputRow;",
      "right" : "_tokenInputRow = _currInputRow;",
      "info" : "ExpressionStatement[20314-20345]:ExpressionStatement[20508-20539]"
    }, {
      "left" : "_tokenInputCol = _inputPtr - _currInputRowStart - 1;",
      "right" : "_tokenInputCol = _inputPtr - _currInputRowStart - 1;",
      "info" : "ExpressionStatement[20354-20406]:ExpressionStatement[20548-20600]"
    }, {
      "left" : "_binaryValue = null;",
      "right" : "_binaryValue = null;",
      "info" : "ExpressionStatement[20467-20487]:ExpressionStatement[20661-20681]"
    }, {
      "left" : "if (i == INT_RBRACKET)",
      "right" : "if (i == INT_RBRACKET)",
      "info" : "IfStatement[20523-20783]:IfStatement[20717-20977]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20546-20783]:Block[20740-20977]"
    }, {
      "left" : "if (!_parsingContext.inArray())",
      "right" : "if (!_parsingContext.inArray())",
      "info" : "IfStatement[20560-20659]:IfStatement[20754-20853]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20592-20659]:Block[20786-20853]"
    }, {
      "left" : "_reportMismatchedEndMarker(i, '}');",
      "right" : "_reportMismatchedEndMarker(i, '}');",
      "info" : "ExpressionStatement[20610-20645]:ExpressionStatement[20804-20839]"
    }, {
      "left" : "_parsingContext = _parsingContext.getParent();",
      "right" : "_parsingContext = _parsingContext.getParent();",
      "info" : "ExpressionStatement[20672-20718]:ExpressionStatement[20866-20912]"
    }, {
      "left" : "return (_currToken = JsonToken.END_ARRAY);",
      "right" : "return (_currToken = JsonToken.END_ARRAY);",
      "info" : "ReturnStatement[20731-20773]:ReturnStatement[20925-20967]"
    }, {
      "left" : "if (i == INT_RCURLY)",
      "right" : "if (i == INT_RCURLY)",
      "info" : "IfStatement[20792-21052]:IfStatement[20986-21246]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20813-21052]:Block[21007-21246]"
    }, {
      "left" : "if (!_parsingContext.inObject())",
      "right" : "if (!_parsingContext.inObject())",
      "info" : "IfStatement[20827-20927]:IfStatement[21021-21121]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20860-20927]:Block[21054-21121]"
    }, {
      "left" : "_reportMismatchedEndMarker(i, ']');",
      "right" : "_reportMismatchedEndMarker(i, ']');",
      "info" : "ExpressionStatement[20878-20913]:ExpressionStatement[21072-21107]"
    }, {
      "left" : "_parsingContext = _parsingContext.getParent();",
      "right" : "_parsingContext = _parsingContext.getParent();",
      "info" : "ExpressionStatement[20940-20986]:ExpressionStatement[21134-21180]"
    }, {
      "left" : "return (_currToken = JsonToken.END_OBJECT);",
      "right" : "return (_currToken = JsonToken.END_OBJECT);",
      "info" : "ReturnStatement[20999-21042]:ReturnStatement[21193-21236]"
    }, {
      "left" : "if (_parsingContext.expectComma())",
      "right" : "if (_parsingContext.expectComma())",
      "info" : "IfStatement[21106-21183]:IfStatement[21300-21377]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21141-21183]:Block[21335-21377]"
    }, {
      "left" : "i = _skipComma(i);",
      "right" : "i = _skipComma(i);",
      "info" : "ExpressionStatement[21155-21173]:ExpressionStatement[21349-21367]"
    }, {
      "left" : "boolean inObject = _parsingContext.inObject();",
      "right" : "boolean inObject = _parsingContext.inObject();",
      "info" : "VariableDeclarationStatement[21365-21411]:VariableDeclarationStatement[21559-21605]"
    }, {
      "left" : "if (inObject)",
      "right" : "if (inObject)",
      "info" : "IfStatement[21420-21691]:IfStatement[21614-21885]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21434-21691]:Block[21628-21885]"
    }, {
      "left" : "String name = (i == INT_QUOTE) ? _parseName() : _handleOddName(i);",
      "right" : "String name = (i == INT_QUOTE) ? _parseName() : _handleOddName(i);",
      "info" : "VariableDeclarationStatement[21488-21554]:VariableDeclarationStatement[21682-21748]"
    }, {
      "left" : "_parsingContext.setCurrentName(name);",
      "right" : "_parsingContext.setCurrentName(name);",
      "info" : "ExpressionStatement[21567-21604]:ExpressionStatement[21761-21798]"
    }, {
      "left" : "_currToken = JsonToken.FIELD_NAME;",
      "right" : "_currToken = JsonToken.FIELD_NAME;",
      "info" : "ExpressionStatement[21617-21651]:ExpressionStatement[21811-21845]"
    }, {
      "left" : "i = _skipColon();",
      "right" : "i = _skipColon();",
      "info" : "ExpressionStatement[21664-21681]:ExpressionStatement[21858-21875]"
    }, {
      "left" : "JsonToken t;",
      "right" : "JsonToken t;",
      "info" : "VariableDeclarationStatement[21753-21765]:VariableDeclarationStatement[21947-21959]"
    }, {
      "left" : "switch (i) {\n        case '\"':\n            _tokenIncomplete = true;\n            t = JsonToken.VALUE_STRING;\n            break;\n        case '[':\n            if (!inObject) {\n                _parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);\n            }\n            t = JsonToken.START_ARRAY;\n            break;\n        case '{':\n            if (!inObject) {\n                _parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);\n            }\n            t = JsonToken.START_OBJECT;\n            break;\n        case ']':\n        case '}':\n            // Error: neither is valid at this point; valid closers have\n            // been handled earlier\n            _reportUnexpectedChar(i, \"expected a value\");\n        case 't':\n            _matchTrue();\n            t = JsonToken.VALUE_TRUE;\n            break;\n        case 'f':\n            _matchFalse();\n            t = JsonToken.VALUE_FALSE;\n            break;\n        case 'n':\n            _matchNull();\n            t = JsonToken.VALUE_NULL;\n            break;\n\n        case '-':\n            /* Should we have separate handling for plus? Although\n             * it is not allowed per se, it may be erroneously used,\n             * and could be indicate by a more specific error message.\n             */\n            t = _parseNegNumber();\n            break;\n        case '0':\n        case '1':\n        case '2':\n        case '3':\n        case '4':\n        case '5':\n        case '6':\n        case '7':\n        case '8':\n        case '9':\n            t = _parsePosNumber(i);\n            break;\n        default:\n            t = _handleOddValue(i);\n            break;\n        }",
      "right" : "switch (i) {\n        case '\"':\n            _tokenIncomplete = true;\n            t = JsonToken.VALUE_STRING;\n            break;\n        case '[':\n            if (!inObject) {\n                _parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);\n            }\n            t = JsonToken.START_ARRAY;\n            break;\n        case '{':\n            if (!inObject) {\n                _parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);\n            }\n            t = JsonToken.START_OBJECT;\n            break;\n        case ']':\n        case '}':\n            // Error: neither is valid at this point; valid closers have\n            // been handled earlier\n            _reportUnexpectedChar(i, \"expected a value\");\n        case 't':\n            _matchTrue();\n            t = JsonToken.VALUE_TRUE;\n            break;\n        case 'f':\n            _matchFalse();\n            t = JsonToken.VALUE_FALSE;\n            break;\n        case 'n':\n            _matchNull();\n            t = JsonToken.VALUE_NULL;\n            break;\n\n        case '-':\n            /* Should we have separate handling for plus? Although\n             * it is not allowed per se, it may be erroneously used,\n             * and could be indicate by a more specific error message.\n             */\n            t = _parseNegNumber();\n            break;\n        case '0':\n        case '1':\n        case '2':\n        case '3':\n        case '4':\n        case '5':\n        case '6':\n        case '7':\n        case '8':\n        case '9':\n            t = _parsePosNumber(i);\n            break;\n        default:\n            t = _handleOddValue(i);\n            break;\n        }",
      "info" : "SwitchStatement[21775-23476]:SwitchStatement[21969-23670]"
    }, {
      "left" : "case '\"':",
      "right" : "case '\"':",
      "info" : "SwitchCase[21796-21805]:SwitchCase[21990-21999]"
    }, {
      "left" : "_tokenIncomplete = true;",
      "right" : "_tokenIncomplete = true;",
      "info" : "ExpressionStatement[21818-21842]:ExpressionStatement[22012-22036]"
    }, {
      "left" : "t = JsonToken.VALUE_STRING;",
      "right" : "t = JsonToken.VALUE_STRING;",
      "info" : "ExpressionStatement[21855-21882]:ExpressionStatement[22049-22076]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[21895-21901]:BreakStatement[22089-22095]"
    }, {
      "left" : "case '[':",
      "right" : "case '[':",
      "info" : "SwitchCase[21910-21919]:SwitchCase[22104-22113]"
    }, {
      "left" : "if (!inObject)",
      "right" : "if (!inObject)",
      "info" : "IfStatement[21932-22069]:IfStatement[22126-22263]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21947-22069]:Block[22141-22263]"
    }, {
      "left" : "_parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);",
      "right" : "_parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);",
      "info" : "ExpressionStatement[21965-22055]:ExpressionStatement[22159-22249]"
    }, {
      "left" : "t = JsonToken.START_ARRAY;",
      "right" : "t = JsonToken.START_ARRAY;",
      "info" : "ExpressionStatement[22082-22108]:ExpressionStatement[22276-22302]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[22121-22127]:BreakStatement[22315-22321]"
    }, {
      "left" : "case '{':",
      "right" : "case '{':",
      "info" : "SwitchCase[22136-22145]:SwitchCase[22330-22339]"
    }, {
      "left" : "if (!inObject)",
      "right" : "if (!inObject)",
      "info" : "IfStatement[22158-22296]:IfStatement[22352-22490]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22173-22296]:Block[22367-22490]"
    }, {
      "left" : "_parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);",
      "right" : "_parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);",
      "info" : "ExpressionStatement[22191-22282]:ExpressionStatement[22385-22476]"
    }, {
      "left" : "t = JsonToken.START_OBJECT;",
      "right" : "t = JsonToken.START_OBJECT;",
      "info" : "ExpressionStatement[22309-22336]:ExpressionStatement[22503-22530]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[22349-22355]:BreakStatement[22543-22549]"
    }, {
      "left" : "case ']':",
      "right" : "case ']':",
      "info" : "SwitchCase[22364-22373]:SwitchCase[22558-22567]"
    }, {
      "left" : "case '}':",
      "right" : "case '}':",
      "info" : "SwitchCase[22382-22391]:SwitchCase[22576-22585]"
    }, {
      "left" : "_reportUnexpectedChar(i, \"expected a value\");",
      "right" : "_reportUnexpectedChar(i, \"expected a value\");",
      "info" : "ExpressionStatement[22513-22558]:ExpressionStatement[22707-22752]"
    }, {
      "left" : "case 't':",
      "right" : "case 't':",
      "info" : "SwitchCase[22567-22576]:SwitchCase[22761-22770]"
    }, {
      "left" : "_matchTrue();",
      "right" : "_matchTrue();",
      "info" : "ExpressionStatement[22589-22602]:ExpressionStatement[22783-22796]"
    }, {
      "left" : "t = JsonToken.VALUE_TRUE;",
      "right" : "t = JsonToken.VALUE_TRUE;",
      "info" : "ExpressionStatement[22615-22640]:ExpressionStatement[22809-22834]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[22653-22659]:BreakStatement[22847-22853]"
    }, {
      "left" : "case 'f':",
      "right" : "case 'f':",
      "info" : "SwitchCase[22668-22677]:SwitchCase[22862-22871]"
    }, {
      "left" : "_matchFalse();",
      "right" : "_matchFalse();",
      "info" : "ExpressionStatement[22690-22704]:ExpressionStatement[22884-22898]"
    }, {
      "left" : "t = JsonToken.VALUE_FALSE;",
      "right" : "t = JsonToken.VALUE_FALSE;",
      "info" : "ExpressionStatement[22717-22743]:ExpressionStatement[22911-22937]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[22756-22762]:BreakStatement[22950-22956]"
    }, {
      "left" : "case 'n':",
      "right" : "case 'n':",
      "info" : "SwitchCase[22771-22780]:SwitchCase[22965-22974]"
    }, {
      "left" : "_matchNull();",
      "right" : "_matchNull();",
      "info" : "ExpressionStatement[22793-22806]:ExpressionStatement[22987-23000]"
    }, {
      "left" : "t = JsonToken.VALUE_NULL;",
      "right" : "t = JsonToken.VALUE_NULL;",
      "info" : "ExpressionStatement[22819-22844]:ExpressionStatement[23013-23038]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[22857-22863]:BreakStatement[23051-23057]"
    }, {
      "left" : "case '-':",
      "right" : "case '-':",
      "info" : "SwitchCase[22873-22882]:SwitchCase[23067-23076]"
    }, {
      "left" : "t = _parseNegNumber();",
      "right" : "t = _parseNegNumber();",
      "info" : "ExpressionStatement[23118-23140]:ExpressionStatement[23312-23334]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[23153-23159]:BreakStatement[23347-23353]"
    }, {
      "left" : "case '0':",
      "right" : "case '0':",
      "info" : "SwitchCase[23168-23177]:SwitchCase[23362-23371]"
    }, {
      "left" : "case '1':",
      "right" : "case '1':",
      "info" : "SwitchCase[23186-23195]:SwitchCase[23380-23389]"
    }, {
      "left" : "case '2':",
      "right" : "case '2':",
      "info" : "SwitchCase[23204-23213]:SwitchCase[23398-23407]"
    }, {
      "left" : "case '3':",
      "right" : "case '3':",
      "info" : "SwitchCase[23222-23231]:SwitchCase[23416-23425]"
    }, {
      "left" : "case '4':",
      "right" : "case '4':",
      "info" : "SwitchCase[23240-23249]:SwitchCase[23434-23443]"
    }, {
      "left" : "case '5':",
      "right" : "case '5':",
      "info" : "SwitchCase[23258-23267]:SwitchCase[23452-23461]"
    }, {
      "left" : "case '6':",
      "right" : "case '6':",
      "info" : "SwitchCase[23276-23285]:SwitchCase[23470-23479]"
    }, {
      "left" : "case '7':",
      "right" : "case '7':",
      "info" : "SwitchCase[23294-23303]:SwitchCase[23488-23497]"
    }, {
      "left" : "case '8':",
      "right" : "case '8':",
      "info" : "SwitchCase[23312-23321]:SwitchCase[23506-23515]"
    }, {
      "left" : "case '9':",
      "right" : "case '9':",
      "info" : "SwitchCase[23330-23339]:SwitchCase[23524-23533]"
    }, {
      "left" : "t = _parsePosNumber(i);",
      "right" : "t = _parsePosNumber(i);",
      "info" : "ExpressionStatement[23352-23375]:ExpressionStatement[23546-23569]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[23388-23394]:BreakStatement[23582-23588]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[23403-23411]:SwitchCase[23597-23605]"
    }, {
      "left" : "t = _handleOddValue(i);",
      "right" : "t = _handleOddValue(i);",
      "info" : "ExpressionStatement[23424-23447]:ExpressionStatement[23618-23641]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[23460-23466]:BreakStatement[23654-23660]"
    }, {
      "left" : "if (inObject)",
      "right" : "if (inObject)",
      "info" : "IfStatement[23486-23570]:IfStatement[23680-23764]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23500-23570]:Block[23694-23764]"
    }, {
      "left" : "_nextToken = t;",
      "right" : "_nextToken = t;",
      "info" : "ExpressionStatement[23514-23529]:ExpressionStatement[23708-23723]"
    }, {
      "left" : "return _currToken;",
      "right" : "return _currToken;",
      "info" : "ReturnStatement[23542-23560]:ReturnStatement[23736-23754]"
    }, {
      "left" : "_currToken = t;",
      "right" : "_currToken = t;",
      "info" : "ExpressionStatement[23579-23594]:ExpressionStatement[23773-23788]"
    }, {
      "left" : "return t;",
      "right" : "return t;",
      "info" : "ReturnStatement[23603-23612]:ReturnStatement[23797-23806]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23669-24195]:Block[23863-24389]"
    }, {
      "left" : "_nameCopied = false;",
      "right" : "_nameCopied = false;",
      "info" : "ExpressionStatement[23679-23699]:ExpressionStatement[23873-23893]"
    }, {
      "left" : "JsonToken t = _nextToken;",
      "right" : "JsonToken t = _nextToken;",
      "info" : "VariableDeclarationStatement[23747-23772]:VariableDeclarationStatement[23941-23966]"
    }, {
      "left" : "_nextToken = null;",
      "right" : "_nextToken = null;",
      "info" : "ExpressionStatement[23781-23799]:ExpressionStatement[23975-23993]"
    }, {
      "left" : "if (t == JsonToken.START_ARRAY)",
      "right" : "if (t == JsonToken.START_ARRAY)",
      "info" : "IfStatement[23856-24156]:IfStatement[24050-24350]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23888-24002]:Block[24082-24196]"
    }, {
      "left" : "_parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);",
      "right" : "_parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);",
      "info" : "ExpressionStatement[23902-23992]:ExpressionStatement[24096-24186]"
    }, {
      "left" : "if (t == JsonToken.START_OBJECT)",
      "right" : "if (t == JsonToken.START_OBJECT)",
      "info" : "IfStatement[24008-24156]:IfStatement[24202-24350]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24041-24156]:Block[24235-24350]"
    }, {
      "left" : "_parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);",
      "right" : "_parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);",
      "info" : "ExpressionStatement[24055-24146]:ExpressionStatement[24249-24340]"
    }, {
      "left" : "return (_currToken = t);",
      "right" : "return (_currToken = t);",
      "info" : "ReturnStatement[24165-24189]:ReturnStatement[24359-24383]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24443-25413]:Block[24637-25607]"
    }, {
      "left" : "if (_currToken == JsonToken.FIELD_NAME)",
      "right" : "if (_currToken == JsonToken.FIELD_NAME)",
      "info" : "IfStatement[24453-25284]:IfStatement[24647-25478]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24493-25284]:Block[24687-25478]"
    }, {
      "left" : "_nameCopied = false;",
      "right" : "_nameCopied = false;",
      "info" : "ExpressionStatement[24546-24566]:ExpressionStatement[24740-24760]"
    }, {
      "left" : "JsonToken t = _nextToken;",
      "right" : "JsonToken t = _nextToken;",
      "info" : "VariableDeclarationStatement[24579-24604]:VariableDeclarationStatement[24773-24798]"
    }, {
      "left" : "_nextToken = null;",
      "right" : "_nextToken = null;",
      "info" : "ExpressionStatement[24617-24635]:ExpressionStatement[24811-24829]"
    }, {
      "left" : "_currToken = t;",
      "right" : "_currToken = t;",
      "info" : "ExpressionStatement[24648-24663]:ExpressionStatement[24842-24857]"
    }, {
      "left" : "if (t == JsonToken.VALUE_STRING)",
      "right" : "if (t == JsonToken.VALUE_STRING)",
      "info" : "IfStatement[24676-24920]:IfStatement[24870-25114]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24709-24920]:Block[24903-25114]"
    }, {
      "left" : "if (_tokenIncomplete)",
      "right" : "if (_tokenIncomplete)",
      "info" : "IfStatement[24727-24851]:IfStatement[24921-25045]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24749-24851]:Block[24943-25045]"
    }, {
      "left" : "_tokenIncomplete = false;",
      "right" : "_tokenIncomplete = false;",
      "info" : "ExpressionStatement[24771-24796]:ExpressionStatement[24965-24990]"
    }, {
      "left" : "_finishString();",
      "right" : "_finishString();",
      "info" : "ExpressionStatement[24817-24833]:ExpressionStatement[25011-25027]"
    }, {
      "left" : "return _textBuffer.contentsAsString();",
      "right" : "return _textBuffer.contentsAsString();",
      "info" : "ReturnStatement[24868-24906]:ReturnStatement[25062-25100]"
    }, {
      "left" : "if (t == JsonToken.START_ARRAY)",
      "right" : "if (t == JsonToken.START_ARRAY)",
      "info" : "IfStatement[24933-25249]:IfStatement[25127-25443]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24965-25087]:Block[25159-25281]"
    }, {
      "left" : "_parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);",
      "right" : "_parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);",
      "info" : "ExpressionStatement[24983-25073]:ExpressionStatement[25177-25267]"
    }, {
      "left" : "if (t == JsonToken.START_OBJECT)",
      "right" : "if (t == JsonToken.START_OBJECT)",
      "info" : "IfStatement[25093-25249]:IfStatement[25287-25443]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25126-25249]:Block[25320-25443]"
    }, {
      "left" : "_parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);",
      "right" : "_parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);",
      "info" : "ExpressionStatement[25144-25235]:ExpressionStatement[25338-25429]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[25262-25274]:ReturnStatement[25456-25468]"
    }, {
      "left" : "return (nextToken() == JsonToken.VALUE_STRING) ? getText() : null;",
      "right" : "return (nextToken() == JsonToken.VALUE_STRING) ? getText() : null;",
      "info" : "ReturnStatement[25341-25407]:ReturnStatement[25535-25601]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25554-26355]:Block[25748-26549]"
    }, {
      "left" : "if (_currToken == JsonToken.FIELD_NAME)",
      "right" : "if (_currToken == JsonToken.FIELD_NAME)",
      "info" : "IfStatement[25564-26210]:IfStatement[25758-26404]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25604-26210]:Block[25798-26404]"
    }, {
      "left" : "_nameCopied = false;",
      "right" : "_nameCopied = false;",
      "info" : "ExpressionStatement[25618-25638]:ExpressionStatement[25812-25832]"
    }, {
      "left" : "JsonToken t = _nextToken;",
      "right" : "JsonToken t = _nextToken;",
      "info" : "VariableDeclarationStatement[25651-25676]:VariableDeclarationStatement[25845-25870]"
    }, {
      "left" : "_nextToken = null;",
      "right" : "_nextToken = null;",
      "info" : "ExpressionStatement[25689-25707]:ExpressionStatement[25883-25901]"
    }, {
      "left" : "_currToken = t;",
      "right" : "_currToken = t;",
      "info" : "ExpressionStatement[25720-25735]:ExpressionStatement[25914-25929]"
    }, {
      "left" : "if (t == JsonToken.VALUE_NUMBER_INT)",
      "right" : "if (t == JsonToken.VALUE_NUMBER_INT)",
      "info" : "IfStatement[25748-25838]:IfStatement[25942-26032]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25785-25838]:Block[25979-26032]"
    }, {
      "left" : "return getIntValue();",
      "right" : "return getIntValue();",
      "info" : "ReturnStatement[25803-25824]:ReturnStatement[25997-26018]"
    }, {
      "left" : "if (t == JsonToken.START_ARRAY)",
      "right" : "if (t == JsonToken.START_ARRAY)",
      "info" : "IfStatement[25851-26167]:IfStatement[26045-26361]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25883-26005]:Block[26077-26199]"
    }, {
      "left" : "_parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);",
      "right" : "_parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);",
      "info" : "ExpressionStatement[25901-25991]:ExpressionStatement[26095-26185]"
    }, {
      "left" : "if (t == JsonToken.START_OBJECT)",
      "right" : "if (t == JsonToken.START_OBJECT)",
      "info" : "IfStatement[26011-26167]:IfStatement[26205-26361]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26044-26167]:Block[26238-26361]"
    }, {
      "left" : "_parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);",
      "right" : "_parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);",
      "info" : "ExpressionStatement[26062-26153]:ExpressionStatement[26256-26347]"
    }, {
      "left" : "return defaultValue;",
      "right" : "return defaultValue;",
      "info" : "ReturnStatement[26180-26200]:ReturnStatement[26374-26394]"
    }, {
      "left" : "return (nextToken() == JsonToken.VALUE_NUMBER_INT) ? getIntValue() : defaultValue;",
      "right" : "return (nextToken() == JsonToken.VALUE_NUMBER_INT) ? getIntValue() : defaultValue;",
      "info" : "ReturnStatement[26267-26349]:ReturnStatement[26461-26543]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26499-27341]:Block[26693-27535]"
    }, {
      "left" : "if (_currToken == JsonToken.FIELD_NAME)",
      "right" : "if (_currToken == JsonToken.FIELD_NAME)",
      "info" : "IfStatement[26509-27195]:IfStatement[26703-27389]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26549-27195]:Block[26743-27389]"
    }, {
      "left" : "_nameCopied = false;",
      "right" : "_nameCopied = false;",
      "info" : "ExpressionStatement[26602-26622]:ExpressionStatement[26796-26816]"
    }, {
      "left" : "JsonToken t = _nextToken;",
      "right" : "JsonToken t = _nextToken;",
      "info" : "VariableDeclarationStatement[26635-26660]:VariableDeclarationStatement[26829-26854]"
    }, {
      "left" : "_nextToken = null;",
      "right" : "_nextToken = null;",
      "info" : "ExpressionStatement[26673-26691]:ExpressionStatement[26867-26885]"
    }, {
      "left" : "_currToken = t;",
      "right" : "_currToken = t;",
      "info" : "ExpressionStatement[26704-26719]:ExpressionStatement[26898-26913]"
    }, {
      "left" : "if (t == JsonToken.VALUE_NUMBER_INT)",
      "right" : "if (t == JsonToken.VALUE_NUMBER_INT)",
      "info" : "IfStatement[26732-26823]:IfStatement[26926-27017]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26769-26823]:Block[26963-27017]"
    }, {
      "left" : "return getLongValue();",
      "right" : "return getLongValue();",
      "info" : "ReturnStatement[26787-26809]:ReturnStatement[26981-27003]"
    }, {
      "left" : "if (t == JsonToken.START_ARRAY)",
      "right" : "if (t == JsonToken.START_ARRAY)",
      "info" : "IfStatement[26836-27152]:IfStatement[27030-27346]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26868-26990]:Block[27062-27184]"
    }, {
      "left" : "_parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);",
      "right" : "_parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);",
      "info" : "ExpressionStatement[26886-26976]:ExpressionStatement[27080-27170]"
    }, {
      "left" : "if (t == JsonToken.START_OBJECT)",
      "right" : "if (t == JsonToken.START_OBJECT)",
      "info" : "IfStatement[26996-27152]:IfStatement[27190-27346]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27029-27152]:Block[27223-27346]"
    }, {
      "left" : "_parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);",
      "right" : "_parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);",
      "info" : "ExpressionStatement[27047-27138]:ExpressionStatement[27241-27332]"
    }, {
      "left" : "return defaultValue;",
      "right" : "return defaultValue;",
      "info" : "ReturnStatement[27165-27185]:ReturnStatement[27359-27379]"
    }, {
      "left" : "return (nextToken() == JsonToken.VALUE_NUMBER_INT) ? getLongValue() : defaultValue;",
      "right" : "return (nextToken() == JsonToken.VALUE_NUMBER_INT) ? getLongValue() : defaultValue;",
      "info" : "ReturnStatement[27252-27335]:ReturnStatement[27446-27529]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27478-28488]:Block[27672-28682]"
    }, {
      "left" : "if (_currToken == JsonToken.FIELD_NAME)",
      "right" : "if (_currToken == JsonToken.FIELD_NAME)",
      "info" : "IfStatement[27488-28256]:IfStatement[27682-28450]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27528-28256]:Block[27722-28450]"
    }, {
      "left" : "_nameCopied = false;",
      "right" : "_nameCopied = false;",
      "info" : "ExpressionStatement[27581-27601]:ExpressionStatement[27775-27795]"
    }, {
      "left" : "JsonToken t = _nextToken;",
      "right" : "JsonToken t = _nextToken;",
      "info" : "VariableDeclarationStatement[27614-27639]:VariableDeclarationStatement[27808-27833]"
    }, {
      "left" : "_nextToken = null;",
      "right" : "_nextToken = null;",
      "info" : "ExpressionStatement[27652-27670]:ExpressionStatement[27846-27864]"
    }, {
      "left" : "_currToken = t;",
      "right" : "_currToken = t;",
      "info" : "ExpressionStatement[27683-27698]:ExpressionStatement[27877-27892]"
    }, {
      "left" : "if (t == JsonToken.VALUE_TRUE)",
      "right" : "if (t == JsonToken.VALUE_TRUE)",
      "info" : "IfStatement[27711-27794]:IfStatement[27905-27988]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27742-27794]:Block[27936-27988]"
    }, {
      "left" : "return Boolean.TRUE;",
      "right" : "return Boolean.TRUE;",
      "info" : "ReturnStatement[27760-27780]:ReturnStatement[27954-27974]"
    }, {
      "left" : "if (t == JsonToken.VALUE_FALSE)",
      "right" : "if (t == JsonToken.VALUE_FALSE)",
      "info" : "IfStatement[27807-27892]:IfStatement[28001-28086]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27839-27892]:Block[28033-28086]"
    }, {
      "left" : "return Boolean.FALSE;",
      "right" : "return Boolean.FALSE;",
      "info" : "ReturnStatement[27857-27878]:ReturnStatement[28051-28072]"
    }, {
      "left" : "if (t == JsonToken.START_ARRAY)",
      "right" : "if (t == JsonToken.START_ARRAY)",
      "info" : "IfStatement[27905-28221]:IfStatement[28099-28415]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27937-28059]:Block[28131-28253]"
    }, {
      "left" : "_parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);",
      "right" : "_parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);",
      "info" : "ExpressionStatement[27955-28045]:ExpressionStatement[28149-28239]"
    }, {
      "left" : "if (t == JsonToken.START_OBJECT)",
      "right" : "if (t == JsonToken.START_OBJECT)",
      "info" : "IfStatement[28065-28221]:IfStatement[28259-28415]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28098-28221]:Block[28292-28415]"
    }, {
      "left" : "_parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);",
      "right" : "_parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);",
      "info" : "ExpressionStatement[28116-28207]:ExpressionStatement[28310-28401]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[28234-28246]:ReturnStatement[28428-28440]"
    }, {
      "left" : "JsonToken t = nextToken();",
      "right" : "JsonToken t = nextToken();",
      "info" : "VariableDeclarationStatement[28265-28291]:VariableDeclarationStatement[28459-28485]"
    }, {
      "left" : "if (t != null)",
      "right" : "if (t != null)",
      "info" : "IfStatement[28300-28461]:IfStatement[28494-28655]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28315-28461]:Block[28509-28655]"
    }, {
      "left" : "int id = t.id();",
      "right" : "int id = t.id();",
      "info" : "VariableDeclarationStatement[28329-28345]:VariableDeclarationStatement[28523-28539]"
    }, {
      "left" : "if (id == ID_TRUE)",
      "right" : "if (id == ID_TRUE)",
      "info" : "IfStatement[28358-28397]:IfStatement[28552-28591]"
    }, {
      "left" : "return Boolean.TRUE;",
      "right" : "return Boolean.TRUE;",
      "info" : "ReturnStatement[28377-28397]:ReturnStatement[28571-28591]"
    }, {
      "left" : "if (id == ID_FALSE)",
      "right" : "if (id == ID_FALSE)",
      "info" : "IfStatement[28410-28451]:IfStatement[28604-28645]"
    }, {
      "left" : "return Boolean.FALSE;",
      "right" : "return Boolean.FALSE;",
      "info" : "ReturnStatement[28430-28451]:ReturnStatement[28624-28645]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[28470-28482]:ReturnStatement[28664-28676]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29530-31460]:Block[29724-31654]"
    }, {
      "left" : "int ptr = _inputPtr;",
      "right" : "int ptr = _inputPtr;",
      "info" : "VariableDeclarationStatement[29813-29833]:VariableDeclarationStatement[30007-30027]"
    }, {
      "left" : "int startPtr = ptr-1;",
      "right" : "int startPtr = ptr-1;",
      "info" : "VariableDeclarationStatement[29842-29863]:VariableDeclarationStatement[30036-30057]"
    }, {
      "left" : "final int inputLen = _inputEnd;",
      "right" : "final int inputLen = _inputEnd;",
      "info" : "VariableDeclarationStatement[29905-29936]:VariableDeclarationStatement[30099-30130]"
    }, {
      "left" : "if (ch == INT_0)",
      "right" : "if (ch == INT_0)",
      "info" : "IfStatement[29993-30072]:IfStatement[30187-30266]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30010-30072]:Block[30204-30266]"
    }, {
      "left" : "return _parseNumber2(false, startPtr);",
      "right" : "return _parseNumber2(false, startPtr);",
      "info" : "ReturnStatement[30024-30062]:ReturnStatement[30218-30256]"
    }, {
      "left" : "int intLen = 1;",
      "right" : "int intLen = 1;",
      "info" : "VariableDeclarationStatement[30390-30405]:VariableDeclarationStatement[30584-30599]"
    }, {
      "left" : "int_loop:\n        while (true) {\n            if (ptr >= inputLen) {\n                _inputPtr = startPtr;\n                return _parseNumber2(false, startPtr);\n            }\n            ch = (int) _inputBuffer[ptr++];\n            if (ch < INT_0 || ch > INT_9) {\n                break int_loop;\n            }\n            ++intLen;\n        }",
      "right" : "int_loop:\n        while (true) {\n            if (ptr >= inputLen) {\n                _inputPtr = startPtr;\n                return _parseNumber2(false, startPtr);\n            }\n            ch = (int) _inputBuffer[ptr++];\n            if (ch < INT_0 || ch > INT_9) {\n                break int_loop;\n            }\n            ++intLen;\n        }",
      "info" : "LabeledStatement[30498-30838]:LabeledStatement[30692-31032]"
    }, {
      "left" : "while (true)",
      "right" : "while (true)",
      "info" : "WhileStatement[30516-30838]:WhileStatement[30710-31032]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30529-30838]:Block[30723-31032]"
    }, {
      "left" : "if (ptr >= inputLen)",
      "right" : "if (ptr >= inputLen)",
      "info" : "IfStatement[30543-30672]:IfStatement[30737-30866]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30564-30672]:Block[30758-30866]"
    }, {
      "left" : "_inputPtr = startPtr;",
      "right" : "_inputPtr = startPtr;",
      "info" : "ExpressionStatement[30582-30603]:ExpressionStatement[30776-30797]"
    }, {
      "left" : "return _parseNumber2(false, startPtr);",
      "right" : "return _parseNumber2(false, startPtr);",
      "info" : "ReturnStatement[30620-30658]:ReturnStatement[30814-30852]"
    }, {
      "left" : "ch = (int) _inputBuffer[ptr++];",
      "right" : "ch = (int) _inputBuffer[ptr++];",
      "info" : "ExpressionStatement[30685-30716]:ExpressionStatement[30879-30910]"
    }, {
      "left" : "if (ch < INT_0 || ch > INT_9)",
      "right" : "if (ch < INT_0 || ch > INT_9)",
      "info" : "IfStatement[30729-30806]:IfStatement[30923-31000]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30759-30806]:Block[30953-31000]"
    }, {
      "left" : "break int_loop;",
      "right" : "break int_loop;",
      "info" : "BreakStatement[30777-30792]:BreakStatement[30971-30986]"
    }, {
      "left" : "++intLen;",
      "right" : "++intLen;",
      "info" : "ExpressionStatement[30819-30828]:ExpressionStatement[31013-31022]"
    }, {
      "left" : "if (ch == INT_PERIOD || ch == INT_e || ch == INT_E)",
      "right" : "if (ch == INT_PERIOD || ch == INT_e || ch == INT_E)",
      "info" : "IfStatement[30847-31005]:IfStatement[31041-31199]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30899-31005]:Block[31093-31199]"
    }, {
      "left" : "_inputPtr = ptr;",
      "right" : "_inputPtr = ptr;",
      "info" : "ExpressionStatement[30913-30929]:ExpressionStatement[31107-31123]"
    }, {
      "left" : "return _parseFloat(ch, startPtr, ptr, false, intLen);",
      "right" : "return _parseFloat(ch, startPtr, ptr, false, intLen);",
      "info" : "ReturnStatement[30942-30995]:ReturnStatement[31136-31189]"
    }, {
      "left" : "--ptr;",
      "right" : "--ptr;",
      "info" : "ExpressionStatement[31082-31088]:ExpressionStatement[31276-31282]"
    }, {
      "left" : "_inputPtr = ptr;",
      "right" : "_inputPtr = ptr;",
      "info" : "ExpressionStatement[31138-31154]:ExpressionStatement[31332-31348]"
    }, {
      "left" : "if (_parsingContext.inRoot())",
      "right" : "if (_parsingContext.inRoot())",
      "info" : "IfStatement[31241-31316]:IfStatement[31435-31510]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31271-31316]:Block[31465-31510]"
    }, {
      "left" : "_verifyRootSpace(ch);",
      "right" : "_verifyRootSpace(ch);",
      "info" : "ExpressionStatement[31285-31306]:ExpressionStatement[31479-31500]"
    }, {
      "left" : "int len = ptr-startPtr;",
      "right" : "int len = ptr-startPtr;",
      "info" : "VariableDeclarationStatement[31325-31348]:VariableDeclarationStatement[31519-31542]"
    }, {
      "left" : "_textBuffer.resetWithShared(_inputBuffer, startPtr, len);",
      "right" : "_textBuffer.resetWithShared(_inputBuffer, startPtr, len);",
      "info" : "ExpressionStatement[31357-31414]:ExpressionStatement[31551-31608]"
    }, {
      "left" : "return resetInt(false, intLen);",
      "right" : "return resetInt(false, intLen);",
      "info" : "ReturnStatement[31423-31454]:ReturnStatement[31617-31648]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31589-33848]:Block[31783-34042]"
    }, {
      "left" : "final int inputLen = _inputEnd;",
      "right" : "final int inputLen = _inputEnd;",
      "info" : "VariableDeclarationStatement[31599-31630]:VariableDeclarationStatement[31793-31824]"
    }, {
      "left" : "int fractLen = 0;",
      "right" : "int fractLen = 0;",
      "info" : "VariableDeclarationStatement[31639-31656]:VariableDeclarationStatement[31833-31850]"
    }, {
      "left" : "if (ch == '.')",
      "right" : "if (ch == '.')",
      "info" : "IfStatement[31712-32315]:IfStatement[31906-32509]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31727-32315]:Block[31921-32509]"
    }, {
      "left" : "fract_loop:\n            while (true) {\n                if (ptr >= inputLen) {\n                    return _parseNumber2(neg, startPtr);\n                }\n                ch = (int) _inputBuffer[ptr++];\n                if (ch < INT_0 || ch > INT_9) {\n                    break fract_loop;\n                }\n                ++fractLen;\n            }",
      "right" : "fract_loop:\n            while (true) {\n                if (ptr >= inputLen) {\n                    return _parseNumber2(neg, startPtr);\n                }\n                ch = (int) _inputBuffer[ptr++];\n                if (ch < INT_0 || ch > INT_9) {\n                    break fract_loop;\n                }\n                ++fractLen;\n            }",
      "info" : "LabeledStatement[31758-32104]:LabeledStatement[31952-32298]"
    }, {
      "left" : "while (true)",
      "right" : "while (true)",
      "info" : "WhileStatement[31782-32104]:WhileStatement[31976-32298]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31795-32104]:Block[31989-32298]"
    }, {
      "left" : "if (ptr >= inputLen)",
      "right" : "if (ptr >= inputLen)",
      "info" : "IfStatement[31813-31910]:IfStatement[32007-32104]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31834-31910]:Block[32028-32104]"
    }, {
      "left" : "return _parseNumber2(neg, startPtr);",
      "right" : "return _parseNumber2(neg, startPtr);",
      "info" : "ReturnStatement[31856-31892]:ReturnStatement[32050-32086]"
    }, {
      "left" : "ch = (int) _inputBuffer[ptr++];",
      "right" : "ch = (int) _inputBuffer[ptr++];",
      "info" : "ExpressionStatement[31927-31958]:ExpressionStatement[32121-32152]"
    }, {
      "left" : "if (ch < INT_0 || ch > INT_9)",
      "right" : "if (ch < INT_0 || ch > INT_9)",
      "info" : "IfStatement[31975-32062]:IfStatement[32169-32256]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32005-32062]:Block[32199-32256]"
    }, {
      "left" : "break fract_loop;",
      "right" : "break fract_loop;",
      "info" : "BreakStatement[32027-32044]:BreakStatement[32221-32238]"
    }, {
      "left" : "++fractLen;",
      "right" : "++fractLen;",
      "info" : "ExpressionStatement[32079-32090]:ExpressionStatement[32273-32284]"
    }, {
      "left" : "if (fractLen == 0)",
      "right" : "if (fractLen == 0)",
      "info" : "IfStatement[32182-32305]:IfStatement[32376-32499]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32201-32305]:Block[32395-32499]"
    }, {
      "left" : "reportUnexpectedNumberChar(ch, \"Decimal point not followed by a digit\");",
      "right" : "reportUnexpectedNumberChar(ch, \"Decimal point not followed by a digit\");",
      "info" : "ExpressionStatement[32219-32291]:ExpressionStatement[32413-32485]"
    }, {
      "left" : "int expLen = 0;",
      "right" : "int expLen = 0;",
      "info" : "VariableDeclarationStatement[32324-32339]:VariableDeclarationStatement[32518-32533]"
    }, {
      "left" : "if (ch == 'e' || ch == 'E')",
      "right" : "if (ch == 'e' || ch == 'E')",
      "info" : "IfStatement[32348-33410]:IfStatement[32542-33604]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32376-33410]:Block[32570-33604]"
    }, {
      "left" : "if (ptr >= inputLen)",
      "right" : "if (ptr >= inputLen)",
      "info" : "IfStatement[32409-32536]:IfStatement[32603-32730]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32430-32536]:Block[32624-32730]"
    }, {
      "left" : "_inputPtr = startPtr;",
      "right" : "_inputPtr = startPtr;",
      "info" : "ExpressionStatement[32448-32469]:ExpressionStatement[32642-32663]"
    }, {
      "left" : "return _parseNumber2(neg, startPtr);",
      "right" : "return _parseNumber2(neg, startPtr);",
      "info" : "ReturnStatement[32486-32522]:ReturnStatement[32680-32716]"
    }, {
      "left" : "ch = (int) _inputBuffer[ptr++];",
      "right" : "ch = (int) _inputBuffer[ptr++];",
      "info" : "ExpressionStatement[32580-32611]:ExpressionStatement[32774-32805]"
    }, {
      "left" : "if (ch == INT_MINUS || ch == INT_PLUS)",
      "right" : "if (ch == INT_MINUS || ch == INT_PLUS)",
      "info" : "IfStatement[32624-32903]:IfStatement[32818-33097]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32663-32903]:Block[32857-33097]"
    }, {
      "left" : "if (ptr >= inputLen)",
      "right" : "if (ptr >= inputLen)",
      "info" : "IfStatement[32702-32841]:IfStatement[32896-33035]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32723-32841]:Block[32917-33035]"
    }, {
      "left" : "_inputPtr = startPtr;",
      "right" : "_inputPtr = startPtr;",
      "info" : "ExpressionStatement[32745-32766]:ExpressionStatement[32939-32960]"
    }, {
      "left" : "return _parseNumber2(neg, startPtr);",
      "right" : "return _parseNumber2(neg, startPtr);",
      "info" : "ReturnStatement[32787-32823]:ReturnStatement[32981-33017]"
    }, {
      "left" : "ch = (int) _inputBuffer[ptr++];",
      "right" : "ch = (int) _inputBuffer[ptr++];",
      "info" : "ExpressionStatement[32858-32889]:ExpressionStatement[33052-33083]"
    }, {
      "left" : "while (ch <= INT_9 && ch >= INT_0)",
      "right" : "while (ch <= INT_9 && ch >= INT_0)",
      "info" : "WhileStatement[32916-33196]:WhileStatement[33110-33390]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32951-33196]:Block[33145-33390]"
    }, {
      "left" : "++expLen;",
      "right" : "++expLen;",
      "info" : "ExpressionStatement[32969-32978]:ExpressionStatement[33163-33172]"
    }, {
      "left" : "if (ptr >= inputLen)",
      "right" : "if (ptr >= inputLen)",
      "info" : "IfStatement[32995-33134]:IfStatement[33189-33328]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33016-33134]:Block[33210-33328]"
    }, {
      "left" : "_inputPtr = startPtr;",
      "right" : "_inputPtr = startPtr;",
      "info" : "ExpressionStatement[33038-33059]:ExpressionStatement[33232-33253]"
    }, {
      "left" : "return _parseNumber2(neg, startPtr);",
      "right" : "return _parseNumber2(neg, startPtr);",
      "info" : "ReturnStatement[33080-33116]:ReturnStatement[33274-33310]"
    }, {
      "left" : "ch = (int) _inputBuffer[ptr++];",
      "right" : "ch = (int) _inputBuffer[ptr++];",
      "info" : "ExpressionStatement[33151-33182]:ExpressionStatement[33345-33376]"
    }, {
      "left" : "if (expLen == 0)",
      "right" : "if (expLen == 0)",
      "info" : "IfStatement[33274-33400]:IfStatement[33468-33594]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33291-33400]:Block[33485-33594]"
    }, {
      "left" : "reportUnexpectedNumberChar(ch, \"Exponent indicator not followed by a digit\");",
      "right" : "reportUnexpectedNumberChar(ch, \"Exponent indicator not followed by a digit\");",
      "info" : "ExpressionStatement[33309-33386]:ExpressionStatement[33503-33580]"
    }, {
      "left" : "--ptr;",
      "right" : "--ptr;",
      "info" : "ExpressionStatement[33419-33425]:ExpressionStatement[33613-33619]"
    }, {
      "left" : "_inputPtr = ptr;",
      "right" : "_inputPtr = ptr;",
      "info" : "ExpressionStatement[33475-33491]:ExpressionStatement[33669-33685]"
    }, {
      "left" : "if (_parsingContext.inRoot())",
      "right" : "if (_parsingContext.inRoot())",
      "info" : "IfStatement[33578-33653]:IfStatement[33772-33847]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33608-33653]:Block[33802-33847]"
    }, {
      "left" : "_verifyRootSpace(ch);",
      "right" : "_verifyRootSpace(ch);",
      "info" : "ExpressionStatement[33622-33643]:ExpressionStatement[33816-33837]"
    }, {
      "left" : "int len = ptr-startPtr;",
      "right" : "int len = ptr-startPtr;",
      "info" : "VariableDeclarationStatement[33662-33685]:VariableDeclarationStatement[33856-33879]"
    }, {
      "left" : "_textBuffer.resetWithShared(_inputBuffer, startPtr, len);",
      "right" : "_textBuffer.resetWithShared(_inputBuffer, startPtr, len);",
      "info" : "ExpressionStatement[33694-33751]:ExpressionStatement[33888-33945]"
    }, {
      "left" : "return resetFloat(neg, intLen, fractLen, expLen);",
      "right" : "return resetFloat(neg, intLen, fractLen, expLen);",
      "info" : "ReturnStatement[33793-33842]:ReturnStatement[33987-34036]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33921-35373]:Block[34115-35567]"
    }, {
      "left" : "int ptr = _inputPtr;",
      "right" : "int ptr = _inputPtr;",
      "info" : "VariableDeclarationStatement[33931-33951]:VariableDeclarationStatement[34125-34145]"
    }, {
      "left" : "int startPtr = ptr-1;",
      "right" : "int startPtr = ptr-1;",
      "info" : "VariableDeclarationStatement[33960-33981]:VariableDeclarationStatement[34154-34175]"
    }, {
      "left" : "final int inputLen = _inputEnd;",
      "right" : "final int inputLen = _inputEnd;",
      "info" : "VariableDeclarationStatement[34028-34059]:VariableDeclarationStatement[34222-34253]"
    }, {
      "left" : "if (ptr >= inputLen)",
      "right" : "if (ptr >= inputLen)",
      "info" : "IfStatement[34069-34151]:IfStatement[34263-34345]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34090-34151]:Block[34284-34345]"
    }, {
      "left" : "return _parseNumber2(true, startPtr);",
      "right" : "return _parseNumber2(true, startPtr);",
      "info" : "ReturnStatement[34104-34141]:ReturnStatement[34298-34335]"
    }, {
      "left" : "int ch = _inputBuffer[ptr++];",
      "right" : "int ch = _inputBuffer[ptr++];",
      "info" : "VariableDeclarationStatement[34160-34189]:VariableDeclarationStatement[34354-34383]"
    }, {
      "left" : "if (ch > INT_9 || ch < INT_0)",
      "right" : "if (ch > INT_9 || ch < INT_0)",
      "info" : "IfStatement[34261-34387]:IfStatement[34455-34581]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34291-34387]:Block[34485-34581]"
    }, {
      "left" : "_inputPtr = ptr;",
      "right" : "_inputPtr = ptr;",
      "info" : "ExpressionStatement[34305-34321]:ExpressionStatement[34499-34515]"
    }, {
      "left" : "return _handleInvalidNumberStart(ch, true);",
      "right" : "return _handleInvalidNumberStart(ch, true);",
      "info" : "ReturnStatement[34334-34377]:ReturnStatement[34528-34571]"
    }, {
      "left" : "if (ch == INT_0)",
      "right" : "if (ch == INT_0)",
      "info" : "IfStatement[34443-34521]:IfStatement[34637-34715]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34460-34521]:Block[34654-34715]"
    }, {
      "left" : "return _parseNumber2(true, startPtr);",
      "right" : "return _parseNumber2(true, startPtr);",
      "info" : "ReturnStatement[34474-34511]:ReturnStatement[34668-34705]"
    }, {
      "left" : "int intLen = 1;",
      "right" : "int intLen = 1;",
      "info" : "VariableDeclarationStatement[34530-34545]:VariableDeclarationStatement[34724-34739]"
    }, {
      "left" : "int_loop:\n        while (true) {\n            if (ptr >= inputLen) {\n                return _parseNumber2(true, startPtr);\n            }\n            ch = (int) _inputBuffer[ptr++];\n            if (ch < INT_0 || ch > INT_9) {\n                break int_loop;\n            }\n            ++intLen;\n        }",
      "right" : "int_loop:\n        while (true) {\n            if (ptr >= inputLen) {\n                return _parseNumber2(true, startPtr);\n            }\n            ch = (int) _inputBuffer[ptr++];\n            if (ch < INT_0 || ch > INT_9) {\n                break int_loop;\n            }\n            ++intLen;\n        }",
      "info" : "LabeledStatement[34638-34939]:LabeledStatement[34832-35133]"
    }, {
      "left" : "while (true)",
      "right" : "while (true)",
      "info" : "WhileStatement[34656-34939]:WhileStatement[34850-35133]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34669-34939]:Block[34863-35133]"
    }, {
      "left" : "if (ptr >= inputLen)",
      "right" : "if (ptr >= inputLen)",
      "info" : "IfStatement[34683-34773]:IfStatement[34877-34967]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34704-34773]:Block[34898-34967]"
    }, {
      "left" : "return _parseNumber2(true, startPtr);",
      "right" : "return _parseNumber2(true, startPtr);",
      "info" : "ReturnStatement[34722-34759]:ReturnStatement[34916-34953]"
    }, {
      "left" : "ch = (int) _inputBuffer[ptr++];",
      "right" : "ch = (int) _inputBuffer[ptr++];",
      "info" : "ExpressionStatement[34786-34817]:ExpressionStatement[34980-35011]"
    }, {
      "left" : "if (ch < INT_0 || ch > INT_9)",
      "right" : "if (ch < INT_0 || ch > INT_9)",
      "info" : "IfStatement[34830-34907]:IfStatement[35024-35101]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34860-34907]:Block[35054-35101]"
    }, {
      "left" : "break int_loop;",
      "right" : "break int_loop;",
      "info" : "BreakStatement[34878-34893]:BreakStatement[35072-35087]"
    }, {
      "left" : "++intLen;",
      "right" : "++intLen;",
      "info" : "ExpressionStatement[34920-34929]:ExpressionStatement[35114-35123]"
    }, {
      "left" : "if (ch == INT_PERIOD || ch == INT_e || ch == INT_E)",
      "right" : "if (ch == INT_PERIOD || ch == INT_e || ch == INT_E)",
      "info" : "IfStatement[34949-35106]:IfStatement[35143-35300]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35001-35106]:Block[35195-35300]"
    }, {
      "left" : "_inputPtr = ptr;",
      "right" : "_inputPtr = ptr;",
      "info" : "ExpressionStatement[35015-35031]:ExpressionStatement[35209-35225]"
    }, {
      "left" : "return _parseFloat(ch, startPtr, ptr, true, intLen);",
      "right" : "return _parseFloat(ch, startPtr, ptr, true, intLen);",
      "info" : "ReturnStatement[35044-35096]:ReturnStatement[35238-35290]"
    }, {
      "left" : "--ptr;",
      "right" : "--ptr;",
      "info" : "ExpressionStatement[35115-35121]:ExpressionStatement[35309-35315]"
    }, {
      "left" : "_inputPtr = ptr;",
      "right" : "_inputPtr = ptr;",
      "info" : "ExpressionStatement[35130-35146]:ExpressionStatement[35324-35340]"
    }, {
      "left" : "if (_parsingContext.inRoot())",
      "right" : "if (_parsingContext.inRoot())",
      "info" : "IfStatement[35155-35230]:IfStatement[35349-35424]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35185-35230]:Block[35379-35424]"
    }, {
      "left" : "_verifyRootSpace(ch);",
      "right" : "_verifyRootSpace(ch);",
      "info" : "ExpressionStatement[35199-35220]:ExpressionStatement[35393-35414]"
    }, {
      "left" : "int len = ptr-startPtr;",
      "right" : "int len = ptr-startPtr;",
      "info" : "VariableDeclarationStatement[35239-35262]:VariableDeclarationStatement[35433-35456]"
    }, {
      "left" : "_textBuffer.resetWithShared(_inputBuffer, startPtr, len);",
      "right" : "_textBuffer.resetWithShared(_inputBuffer, startPtr, len);",
      "info" : "ExpressionStatement[35271-35328]:ExpressionStatement[35465-35522]"
    }, {
      "left" : "return resetInt(true, intLen);",
      "right" : "return resetInt(true, intLen);",
      "info" : "ReturnStatement[35337-35367]:ReturnStatement[35531-35561]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35794-40030]:Block[35988-40224]"
    }, {
      "left" : "_inputPtr = neg ? (startPtr+1) : startPtr;",
      "right" : "_inputPtr = neg ? (startPtr+1) : startPtr;",
      "info" : "ExpressionStatement[35804-35846]:ExpressionStatement[35998-36040]"
    }, {
      "left" : "char[] outBuf = _textBuffer.emptyAndGetCurrentSegment();",
      "right" : "char[] outBuf = _textBuffer.emptyAndGetCurrentSegment();",
      "info" : "VariableDeclarationStatement[35855-35911]:VariableDeclarationStatement[36049-36105]"
    }, {
      "left" : "int outPtr = 0;",
      "right" : "int outPtr = 0;",
      "info" : "VariableDeclarationStatement[35920-35935]:VariableDeclarationStatement[36114-36129]"
    }, {
      "left" : "if (neg)",
      "right" : "if (neg)",
      "info" : "IfStatement[35978-36034]:IfStatement[36172-36228]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35987-36034]:Block[36181-36228]"
    }, {
      "left" : "outBuf[outPtr++] = '-';",
      "right" : "outBuf[outPtr++] = '-';",
      "info" : "ExpressionStatement[36001-36024]:ExpressionStatement[36195-36218]"
    }, {
      "left" : "int intLen = 0;",
      "right" : "int intLen = 0;",
      "info" : "VariableDeclarationStatement[36106-36121]:VariableDeclarationStatement[36300-36315]"
    }, {
      "left" : "char c = (_inputPtr < _inputEnd) ? _inputBuffer[_inputPtr++] : getNextChar(\"No digit following minus sign\");",
      "right" : "char c = (_inputPtr < _inputEnd) ? _inputBuffer[_inputPtr++] : getNextChar(\"No digit following minus sign\");",
      "info" : "VariableDeclarationStatement[36130-36238]:VariableDeclarationStatement[36324-36432]"
    }, {
      "left" : "if (c == '0')",
      "right" : "if (c == '0')",
      "info" : "IfStatement[36247-36314]:IfStatement[36441-36508]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36261-36314]:Block[36455-36508]"
    }, {
      "left" : "c = _verifyNoLeadingZeroes();",
      "right" : "c = _verifyNoLeadingZeroes();",
      "info" : "ExpressionStatement[36275-36304]:ExpressionStatement[36469-36498]"
    }, {
      "left" : "boolean eof = false;",
      "right" : "boolean eof = false;",
      "info" : "VariableDeclarationStatement[36323-36343]:VariableDeclarationStatement[36517-36537]"
    }, {
      "left" : "int_loop:\n        while (c >= '0' && c <= '9') {\n            ++intLen;\n            if (outPtr >= outBuf.length) {\n                outBuf = _textBuffer.finishCurrentSegment();\n                outPtr = 0;\n            }\n            outBuf[outPtr++] = c;\n            if (_inputPtr >= _inputEnd && !loadMore()) {\n                // EOF is legal for main level int values\n                c = CHAR_NULL;\n                eof = true;\n                break int_loop;\n            }\n            c = _inputBuffer[_inputPtr++];\n        }",
      "right" : "int_loop:\n        while (c >= '0' && c <= '9') {\n            ++intLen;\n            if (outPtr >= outBuf.length) {\n                outBuf = _textBuffer.finishCurrentSegment();\n                outPtr = 0;\n            }\n            outBuf[outPtr++] = c;\n            if (_inputPtr >= _inputEnd && !loadMore()) {\n                // EOF is legal for main level int values\n                c = CHAR_NULL;\n                eof = true;\n                break int_loop;\n            }\n            c = _inputBuffer[_inputPtr++];\n        }",
      "info" : "LabeledStatement[36403-36926]:LabeledStatement[36597-37120]"
    }, {
      "left" : "while (c >= '0' && c <= '9')",
      "right" : "while (c >= '0' && c <= '9')",
      "info" : "WhileStatement[36421-36926]:WhileStatement[36615-37120]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36450-36926]:Block[36644-37120]"
    }, {
      "left" : "++intLen;",
      "right" : "++intLen;",
      "info" : "ExpressionStatement[36464-36473]:ExpressionStatement[36658-36667]"
    }, {
      "left" : "if (outPtr >= outBuf.length)",
      "right" : "if (outPtr >= outBuf.length)",
      "info" : "IfStatement[36486-36619]:IfStatement[36680-36813]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36515-36619]:Block[36709-36813]"
    }, {
      "left" : "outBuf = _textBuffer.finishCurrentSegment();",
      "right" : "outBuf = _textBuffer.finishCurrentSegment();",
      "info" : "ExpressionStatement[36533-36577]:ExpressionStatement[36727-36771]"
    }, {
      "left" : "outPtr = 0;",
      "right" : "outPtr = 0;",
      "info" : "ExpressionStatement[36594-36605]:ExpressionStatement[36788-36799]"
    }, {
      "left" : "outBuf[outPtr++] = c;",
      "right" : "outBuf[outPtr++] = c;",
      "info" : "ExpressionStatement[36632-36653]:ExpressionStatement[36826-36847]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd && !loadMore())",
      "right" : "if (_inputPtr >= _inputEnd && !loadMore())",
      "info" : "IfStatement[36666-36873]:IfStatement[36860-37067]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36709-36873]:Block[36903-37067]"
    }, {
      "left" : "c = CHAR_NULL;",
      "right" : "c = CHAR_NULL;",
      "info" : "ExpressionStatement[36785-36799]:ExpressionStatement[36979-36993]"
    }, {
      "left" : "eof = true;",
      "right" : "eof = true;",
      "info" : "ExpressionStatement[36816-36827]:ExpressionStatement[37010-37021]"
    }, {
      "left" : "break int_loop;",
      "right" : "break int_loop;",
      "info" : "BreakStatement[36844-36859]:BreakStatement[37038-37053]"
    }, {
      "left" : "c = _inputBuffer[_inputPtr++];",
      "right" : "c = _inputBuffer[_inputPtr++];",
      "info" : "ExpressionStatement[36886-36916]:ExpressionStatement[37080-37110]"
    }, {
      "left" : "if (intLen == 0)",
      "right" : "if (intLen == 0)",
      "info" : "IfStatement[36981-37063]:IfStatement[37175-37257]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36998-37063]:Block[37192-37257]"
    }, {
      "left" : "return _handleInvalidNumberStart(c, neg);",
      "right" : "return _handleInvalidNumberStart(c, neg);",
      "info" : "ReturnStatement[37012-37053]:ReturnStatement[37206-37247]"
    }, {
      "left" : "int fractLen = 0;",
      "right" : "int fractLen = 0;",
      "info" : "VariableDeclarationStatement[37073-37090]:VariableDeclarationStatement[37267-37284]"
    }, {
      "left" : "if (c == '.')",
      "right" : "if (c == '.')",
      "info" : "IfStatement[37145-38013]:IfStatement[37339-38207]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37159-38013]:Block[37353-38207]"
    }, {
      "left" : "outBuf[outPtr++] = c;",
      "right" : "outBuf[outPtr++] = c;",
      "info" : "ExpressionStatement[37190-37211]:ExpressionStatement[37384-37405]"
    }, {
      "left" : "fract_loop:\n            while (true) {\n                if (_inputPtr >= _inputEnd && !loadMore()) {\n                    eof = true;\n                    break fract_loop;\n                }\n                c = _inputBuffer[_inputPtr++];\n                if (c < INT_0 || c > INT_9) {\n                    break fract_loop;\n                }\n                ++fractLen;\n                if (outPtr >= outBuf.length) {\n                    outBuf = _textBuffer.finishCurrentSegment();\n                    outPtr = 0;\n                }\n                outBuf[outPtr++] = c;\n            }",
      "right" : "fract_loop:\n            while (true) {\n                if (_inputPtr >= _inputEnd && !loadMore()) {\n                    eof = true;\n                    break fract_loop;\n                }\n                c = _inputBuffer[_inputPtr++];\n                if (c < INT_0 || c > INT_9) {\n                    break fract_loop;\n                }\n                ++fractLen;\n                if (outPtr >= outBuf.length) {\n                    outBuf = _textBuffer.finishCurrentSegment();\n                    outPtr = 0;\n                }\n                outBuf[outPtr++] = c;\n            }",
      "info" : "LabeledStatement[37225-37803]:LabeledStatement[37419-37997]"
    }, {
      "left" : "while (true)",
      "right" : "while (true)",
      "info" : "WhileStatement[37249-37803]:WhileStatement[37443-37997]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37262-37803]:Block[37456-37997]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd && !loadMore())",
      "right" : "if (_inputPtr >= _inputEnd && !loadMore())",
      "info" : "IfStatement[37280-37412]:IfStatement[37474-37606]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37323-37412]:Block[37517-37606]"
    }, {
      "left" : "eof = true;",
      "right" : "eof = true;",
      "info" : "ExpressionStatement[37345-37356]:ExpressionStatement[37539-37550]"
    }, {
      "left" : "break fract_loop;",
      "right" : "break fract_loop;",
      "info" : "BreakStatement[37377-37394]:BreakStatement[37571-37588]"
    }, {
      "left" : "c = _inputBuffer[_inputPtr++];",
      "right" : "c = _inputBuffer[_inputPtr++];",
      "info" : "ExpressionStatement[37429-37459]:ExpressionStatement[37623-37653]"
    }, {
      "left" : "if (c < INT_0 || c > INT_9)",
      "right" : "if (c < INT_0 || c > INT_9)",
      "info" : "IfStatement[37476-37561]:IfStatement[37670-37755]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37504-37561]:Block[37698-37755]"
    }, {
      "left" : "break fract_loop;",
      "right" : "break fract_loop;",
      "info" : "BreakStatement[37526-37543]:BreakStatement[37720-37737]"
    }, {
      "left" : "++fractLen;",
      "right" : "++fractLen;",
      "info" : "ExpressionStatement[37578-37589]:ExpressionStatement[37772-37783]"
    }, {
      "left" : "if (outPtr >= outBuf.length)",
      "right" : "if (outPtr >= outBuf.length)",
      "info" : "IfStatement[37606-37751]:IfStatement[37800-37945]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37635-37751]:Block[37829-37945]"
    }, {
      "left" : "outBuf = _textBuffer.finishCurrentSegment();",
      "right" : "outBuf = _textBuffer.finishCurrentSegment();",
      "info" : "ExpressionStatement[37657-37701]:ExpressionStatement[37851-37895]"
    }, {
      "left" : "outPtr = 0;",
      "right" : "outPtr = 0;",
      "info" : "ExpressionStatement[37722-37733]:ExpressionStatement[37916-37927]"
    }, {
      "left" : "outBuf[outPtr++] = c;",
      "right" : "outBuf[outPtr++] = c;",
      "info" : "ExpressionStatement[37768-37789]:ExpressionStatement[37962-37983]"
    }, {
      "left" : "if (fractLen == 0)",
      "right" : "if (fractLen == 0)",
      "info" : "IfStatement[37881-38003]:IfStatement[38075-38197]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37900-38003]:Block[38094-38197]"
    }, {
      "left" : "reportUnexpectedNumberChar(c, \"Decimal point not followed by a digit\");",
      "right" : "reportUnexpectedNumberChar(c, \"Decimal point not followed by a digit\");",
      "info" : "ExpressionStatement[37918-37989]:ExpressionStatement[38112-38183]"
    }, {
      "left" : "int expLen = 0;",
      "right" : "int expLen = 0;",
      "info" : "VariableDeclarationStatement[38023-38038]:VariableDeclarationStatement[38217-38232]"
    }, {
      "left" : "if (c == 'e' || c == 'E')",
      "right" : "if (c == 'e' || c == 'E')",
      "info" : "IfStatement[38047-39665]:IfStatement[38241-39859]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38073-39665]:Block[38267-39859]"
    }, {
      "left" : "if (outPtr >= outBuf.length)",
      "right" : "if (outPtr >= outBuf.length)",
      "info" : "IfStatement[38100-38233]:IfStatement[38294-38427]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38129-38233]:Block[38323-38427]"
    }, {
      "left" : "outBuf = _textBuffer.finishCurrentSegment();",
      "right" : "outBuf = _textBuffer.finishCurrentSegment();",
      "info" : "ExpressionStatement[38147-38191]:ExpressionStatement[38341-38385]"
    }, {
      "left" : "outPtr = 0;",
      "right" : "outPtr = 0;",
      "info" : "ExpressionStatement[38208-38219]:ExpressionStatement[38402-38413]"
    }, {
      "left" : "outBuf[outPtr++] = c;",
      "right" : "outBuf[outPtr++] = c;",
      "info" : "ExpressionStatement[38246-38267]:ExpressionStatement[38440-38461]"
    }, {
      "left" : "c = (_inputPtr < _inputEnd) ? _inputBuffer[_inputPtr++]\n                : getNextChar(\"expected a digit for number exponent\");",
      "right" : "c = (_inputPtr < _inputEnd) ? _inputBuffer[_inputPtr++]\n                : getNextChar(\"expected a digit for number exponent\");",
      "info" : "ExpressionStatement[38347-38473]:ExpressionStatement[38541-38667]"
    }, {
      "left" : "if (c == '-' || c == '+')",
      "right" : "if (c == '-' || c == '+')",
      "info" : "IfStatement[38517-38948]:IfStatement[38711-39142]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38543-38948]:Block[38737-39142]"
    }, {
      "left" : "if (outPtr >= outBuf.length)",
      "right" : "if (outPtr >= outBuf.length)",
      "info" : "IfStatement[38561-38706]:IfStatement[38755-38900]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38590-38706]:Block[38784-38900]"
    }, {
      "left" : "outBuf = _textBuffer.finishCurrentSegment();",
      "right" : "outBuf = _textBuffer.finishCurrentSegment();",
      "info" : "ExpressionStatement[38612-38656]:ExpressionStatement[38806-38850]"
    }, {
      "left" : "outPtr = 0;",
      "right" : "outPtr = 0;",
      "info" : "ExpressionStatement[38677-38688]:ExpressionStatement[38871-38882]"
    }, {
      "left" : "outBuf[outPtr++] = c;",
      "right" : "outBuf[outPtr++] = c;",
      "info" : "ExpressionStatement[38723-38744]:ExpressionStatement[38917-38938]"
    }, {
      "left" : "c = (_inputPtr < _inputEnd) ? _inputBuffer[_inputPtr++]\n                    : getNextChar(\"expected a digit for number exponent\");",
      "right" : "c = (_inputPtr < _inputEnd) ? _inputBuffer[_inputPtr++]\n                    : getNextChar(\"expected a digit for number exponent\");",
      "info" : "ExpressionStatement[38804-38934]:ExpressionStatement[38998-39128]"
    }, {
      "left" : "exp_loop:\n            while (c <= INT_9 && c >= INT_0) {\n                ++expLen;\n                if (outPtr >= outBuf.length) {\n                    outBuf = _textBuffer.finishCurrentSegment();\n                    outPtr = 0;\n                }\n                outBuf[outPtr++] = c;\n                if (_inputPtr >= _inputEnd && !loadMore()) {\n                    eof = true;\n                    break exp_loop;\n                }\n                c = _inputBuffer[_inputPtr++];\n            }",
      "right" : "exp_loop:\n            while (c <= INT_9 && c >= INT_0) {\n                ++expLen;\n                if (outPtr >= outBuf.length) {\n                    outBuf = _textBuffer.finishCurrentSegment();\n                    outPtr = 0;\n                }\n                outBuf[outPtr++] = c;\n                if (_inputPtr >= _inputEnd && !loadMore()) {\n                    eof = true;\n                    break exp_loop;\n                }\n                c = _inputBuffer[_inputPtr++];\n            }",
      "info" : "LabeledStatement[38962-39452]:LabeledStatement[39156-39646]"
    }, {
      "left" : "while (c <= INT_9 && c >= INT_0)",
      "right" : "while (c <= INT_9 && c >= INT_0)",
      "info" : "WhileStatement[38984-39452]:WhileStatement[39178-39646]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39017-39452]:Block[39211-39646]"
    }, {
      "left" : "++expLen;",
      "right" : "++expLen;",
      "info" : "ExpressionStatement[39035-39044]:ExpressionStatement[39229-39238]"
    }, {
      "left" : "if (outPtr >= outBuf.length)",
      "right" : "if (outPtr >= outBuf.length)",
      "info" : "IfStatement[39061-39206]:IfStatement[39255-39400]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39090-39206]:Block[39284-39400]"
    }, {
      "left" : "outBuf = _textBuffer.finishCurrentSegment();",
      "right" : "outBuf = _textBuffer.finishCurrentSegment();",
      "info" : "ExpressionStatement[39112-39156]:ExpressionStatement[39306-39350]"
    }, {
      "left" : "outPtr = 0;",
      "right" : "outPtr = 0;",
      "info" : "ExpressionStatement[39177-39188]:ExpressionStatement[39371-39382]"
    }, {
      "left" : "outBuf[outPtr++] = c;",
      "right" : "outBuf[outPtr++] = c;",
      "info" : "ExpressionStatement[39223-39244]:ExpressionStatement[39417-39438]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd && !loadMore())",
      "right" : "if (_inputPtr >= _inputEnd && !loadMore())",
      "info" : "IfStatement[39261-39391]:IfStatement[39455-39585]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39304-39391]:Block[39498-39585]"
    }, {
      "left" : "eof = true;",
      "right" : "eof = true;",
      "info" : "ExpressionStatement[39326-39337]:ExpressionStatement[39520-39531]"
    }, {
      "left" : "break exp_loop;",
      "right" : "break exp_loop;",
      "info" : "BreakStatement[39358-39373]:BreakStatement[39552-39567]"
    }, {
      "left" : "c = _inputBuffer[_inputPtr++];",
      "right" : "c = _inputBuffer[_inputPtr++];",
      "info" : "ExpressionStatement[39408-39438]:ExpressionStatement[39602-39632]"
    }, {
      "left" : "if (expLen == 0)",
      "right" : "if (expLen == 0)",
      "info" : "IfStatement[39530-39655]:IfStatement[39724-39849]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39547-39655]:Block[39741-39849]"
    }, {
      "left" : "reportUnexpectedNumberChar(c, \"Exponent indicator not followed by a digit\");",
      "right" : "reportUnexpectedNumberChar(c, \"Exponent indicator not followed by a digit\");",
      "info" : "ExpressionStatement[39565-39641]:ExpressionStatement[39759-39835]"
    }, {
      "left" : "if (!eof)",
      "right" : "if (!eof)",
      "info" : "IfStatement[39751-39892]:IfStatement[39945-40086]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39761-39892]:Block[39955-40086]"
    }, {
      "left" : "--_inputPtr;",
      "right" : "--_inputPtr;",
      "info" : "ExpressionStatement[39775-39787]:ExpressionStatement[39969-39981]"
    }, {
      "left" : "if (_parsingContext.inRoot())",
      "right" : "if (_parsingContext.inRoot())",
      "info" : "IfStatement[39800-39882]:IfStatement[39994-40076]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39830-39882]:Block[40024-40076]"
    }, {
      "left" : "_verifyRootSpace(c);",
      "right" : "_verifyRootSpace(c);",
      "info" : "ExpressionStatement[39848-39868]:ExpressionStatement[40042-40062]"
    }, {
      "left" : "_textBuffer.setCurrentLength(outPtr);",
      "right" : "_textBuffer.setCurrentLength(outPtr);",
      "info" : "ExpressionStatement[39901-39938]:ExpressionStatement[40095-40132]"
    }, {
      "left" : "return reset(neg, intLen, fractLen, expLen);",
      "right" : "return reset(neg, intLen, fractLen, expLen);",
      "info" : "ReturnStatement[39980-40024]:ReturnStatement[40174-40218]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40224-40602]:Block[40418-40796]"
    }, {
      "left" : "if (_inputPtr < _inputEnd)",
      "right" : "if (_inputPtr < _inputEnd)",
      "info" : "IfStatement[40262-40522]:IfStatement[40456-40716]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40289-40522]:Block[40483-40716]"
    }, {
      "left" : "char ch = _inputBuffer[_inputPtr];",
      "right" : "char ch = _inputBuffer[_inputPtr];",
      "info" : "VariableDeclarationStatement[40303-40337]:VariableDeclarationStatement[40497-40531]"
    }, {
      "left" : "if (ch < '0' || ch > '9')",
      "right" : "if (ch < '0' || ch > '9')",
      "info" : "IfStatement[40443-40512]:IfStatement[40637-40706]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40469-40512]:Block[40663-40706]"
    }, {
      "left" : "return '0';",
      "right" : "return '0';",
      "info" : "ReturnStatement[40487-40498]:ReturnStatement[40681-40692]"
    }, {
      "left" : "return _verifyNLZ2();",
      "right" : "return _verifyNLZ2();",
      "info" : "ReturnStatement[40575-40596]:ReturnStatement[40769-40790]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40666-41647]:Block[40860-41841]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd && !loadMore())",
      "right" : "if (_inputPtr >= _inputEnd && !loadMore())",
      "info" : "IfStatement[40676-40754]:IfStatement[40870-40948]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40719-40754]:Block[40913-40948]"
    }, {
      "left" : "return '0';",
      "right" : "return '0';",
      "info" : "ReturnStatement[40733-40744]:ReturnStatement[40927-40938]"
    }, {
      "left" : "char ch = _inputBuffer[_inputPtr];",
      "right" : "char ch = _inputBuffer[_inputPtr];",
      "info" : "VariableDeclarationStatement[40763-40797]:VariableDeclarationStatement[40957-40991]"
    }, {
      "left" : "if (ch < '0' || ch > '9')",
      "right" : "if (ch < '0' || ch > '9')",
      "info" : "IfStatement[40806-40867]:IfStatement[41000-41061]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40832-40867]:Block[41026-41061]"
    }, {
      "left" : "return '0';",
      "right" : "return '0';",
      "info" : "ReturnStatement[40846-40857]:ReturnStatement[41040-41051]"
    }, {
      "left" : "if (!isEnabled(Feature.ALLOW_NUMERIC_LEADING_ZEROS))",
      "right" : "if (!isEnabled(Feature.ALLOW_NUMERIC_LEADING_ZEROS))",
      "info" : "IfStatement[40876-41003]:IfStatement[41070-41197]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40929-41003]:Block[41123-41197]"
    }, {
      "left" : "reportInvalidNumber(\"Leading zeroes not allowed\");",
      "right" : "reportInvalidNumber(\"Leading zeroes not allowed\");",
      "info" : "ExpressionStatement[40943-40993]:ExpressionStatement[41137-41187]"
    }, {
      "left" : "++_inputPtr;",
      "right" : "++_inputPtr;",
      "info" : "ExpressionStatement[41122-41134]:ExpressionStatement[41316-41328]"
    }, {
      "left" : "if (ch == INT_0)",
      "right" : "if (ch == INT_0)",
      "info" : "IfStatement[41173-41622]:IfStatement[41367-41816]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41190-41622]:Block[41384-41816]"
    }, {
      "left" : "while (_inputPtr < _inputEnd || loadMore())",
      "right" : "while (_inputPtr < _inputEnd || loadMore())",
      "info" : "WhileStatement[41204-41612]:WhileStatement[41398-41806]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41248-41612]:Block[41442-41806]"
    }, {
      "left" : "ch = _inputBuffer[_inputPtr];",
      "right" : "ch = _inputBuffer[_inputPtr];",
      "info" : "ExpressionStatement[41266-41295]:ExpressionStatement[41460-41489]"
    }, {
      "left" : "if (ch < '0' || ch > '9')",
      "right" : "if (ch < '0' || ch > '9')",
      "info" : "IfStatement[41312-41432]:IfStatement[41506-41626]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41338-41432]:Block[41532-41626]"
    }, {
      "left" : "return '0';",
      "right" : "return '0';",
      "info" : "ReturnStatement[41403-41414]:ReturnStatement[41597-41608]"
    }, {
      "left" : "++_inputPtr;",
      "right" : "++_inputPtr;",
      "info" : "ExpressionStatement[41449-41461]:ExpressionStatement[41643-41655]"
    }, {
      "left" : "if (ch != '0')",
      "right" : "if (ch != '0')",
      "info" : "IfStatement[41500-41598]:IfStatement[41694-41792]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41515-41598]:Block[41709-41792]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[41574-41580]:BreakStatement[41768-41774]"
    }, {
      "left" : "return ch;",
      "right" : "return ch;",
      "info" : "ReturnStatement[41631-41641]:ReturnStatement[41825-41835]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41868-43133]:Block[42062-43327]"
    }, {
      "left" : "if (ch == 'I')",
      "right" : "if (ch == 'I')",
      "info" : "IfStatement[41878-42996]:IfStatement[42072-43190]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41893-42996]:Block[42087-43190]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[41907-42015]:IfStatement[42101-42209]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41935-42015]:Block[42129-42209]"
    }, {
      "left" : "if (!loadMore())",
      "right" : "if (!loadMore())",
      "info" : "IfStatement[41953-42001]:IfStatement[42147-42195]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41970-42001]:Block[42164-42195]"
    }, {
      "left" : "_reportInvalidEOFInValue();",
      "right" : "_reportInvalidEOFInValue();",
      "info" : "ExpressionStatement[41972-41999]:ExpressionStatement[42166-42193]"
    }, {
      "left" : "ch = _inputBuffer[_inputPtr++];",
      "right" : "ch = _inputBuffer[_inputPtr++];",
      "info" : "ExpressionStatement[42028-42059]:ExpressionStatement[42222-42253]"
    }, {
      "left" : "if (ch == 'N')",
      "right" : "if (ch == 'N')",
      "info" : "IfStatement[42072-42986]:IfStatement[42266-43180]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42087-42521]:Block[42281-42715]"
    }, {
      "left" : "String match = negative ? \"-INF\" :\"+INF\";",
      "right" : "String match = negative ? \"-INF\" :\"+INF\";",
      "info" : "VariableDeclarationStatement[42105-42146]:VariableDeclarationStatement[42299-42340]"
    }, {
      "left" : "_matchToken(match, 3);",
      "right" : "_matchToken(match, 3);",
      "info" : "ExpressionStatement[42163-42185]:ExpressionStatement[42357-42379]"
    }, {
      "left" : "if (isEnabled(Feature.ALLOW_NON_NUMERIC_NUMBERS))",
      "right" : "if (isEnabled(Feature.ALLOW_NON_NUMERIC_NUMBERS))",
      "info" : "IfStatement[42202-42381]:IfStatement[42396-42575]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42252-42381]:Block[42446-42575]"
    }, {
      "left" : "return resetAsNaN(match, negative ? Double.NEGATIVE_INFINITY : Double.POSITIVE_INFINITY);",
      "right" : "return resetAsNaN(match, negative ? Double.NEGATIVE_INFINITY : Double.POSITIVE_INFINITY);",
      "info" : "ReturnStatement[42274-42363]:ReturnStatement[42468-42557]"
    }, {
      "left" : "_reportError(\"Non-standard token '\"+match+\"': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow\");",
      "right" : "_reportError(\"Non-standard token '\"+match+\"': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow\");",
      "info" : "ExpressionStatement[42398-42507]:ExpressionStatement[42592-42701]"
    }, {
      "left" : "if (ch == 'n')",
      "right" : "if (ch == 'n')",
      "info" : "IfStatement[42527-42986]:IfStatement[42721-43180]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42542-42986]:Block[42736-43180]"
    }, {
      "left" : "String match = negative ? \"-Infinity\" :\"+Infinity\";",
      "right" : "String match = negative ? \"-Infinity\" :\"+Infinity\";",
      "info" : "VariableDeclarationStatement[42560-42611]:VariableDeclarationStatement[42754-42805]"
    }, {
      "left" : "_matchToken(match, 3);",
      "right" : "_matchToken(match, 3);",
      "info" : "ExpressionStatement[42628-42650]:ExpressionStatement[42822-42844]"
    }, {
      "left" : "if (isEnabled(Feature.ALLOW_NON_NUMERIC_NUMBERS))",
      "right" : "if (isEnabled(Feature.ALLOW_NON_NUMERIC_NUMBERS))",
      "info" : "IfStatement[42667-42846]:IfStatement[42861-43040]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42717-42846]:Block[42911-43040]"
    }, {
      "left" : "return resetAsNaN(match, negative ? Double.NEGATIVE_INFINITY : Double.POSITIVE_INFINITY);",
      "right" : "return resetAsNaN(match, negative ? Double.NEGATIVE_INFINITY : Double.POSITIVE_INFINITY);",
      "info" : "ReturnStatement[42739-42828]:ReturnStatement[42933-43022]"
    }, {
      "left" : "_reportError(\"Non-standard token '\"+match+\"': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow\");",
      "right" : "_reportError(\"Non-standard token '\"+match+\"': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow\");",
      "info" : "ExpressionStatement[42863-42972]:ExpressionStatement[43057-43166]"
    }, {
      "left" : "reportUnexpectedNumberChar(ch, \"expected digit (0-9) to follow minus sign, for valid numeric value\");",
      "right" : "reportUnexpectedNumberChar(ch, \"expected digit (0-9) to follow minus sign, for valid numeric value\");",
      "info" : "ExpressionStatement[43005-43106]:ExpressionStatement[43199-43300]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[43115-43127]:ReturnStatement[43309-43321]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43451-43836]:Block[43645-44030]"
    }, {
      "left" : "++_inputPtr;",
      "right" : "++_inputPtr;",
      "info" : "ExpressionStatement[43521-43533]:ExpressionStatement[43715-43727]"
    }, {
      "left" : "switch (ch) {\n        case ' ':\n        case '\\t':\n            return;\n        case '\\r':\n            _skipCR();\n            return;\n        case '\\n':\n            ++_currInputRow;\n            _currInputRowStart = _inputPtr;\n            return;\n        }",
      "right" : "switch (ch) {\n        case ' ':\n        case '\\t':\n            return;\n        case '\\r':\n            _skipCR();\n            return;\n        case '\\n':\n            ++_currInputRow;\n            _currInputRowStart = _inputPtr;\n            return;\n        }",
      "info" : "SwitchStatement[43542-43796]:SwitchStatement[43736-43990]"
    }, {
      "left" : "case ' ':",
      "right" : "case ' ':",
      "info" : "SwitchCase[43564-43573]:SwitchCase[43758-43767]"
    }, {
      "left" : "case '\\t':",
      "right" : "case '\\t':",
      "info" : "SwitchCase[43582-43592]:SwitchCase[43776-43786]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[43605-43612]:ReturnStatement[43799-43806]"
    }, {
      "left" : "case '\\r':",
      "right" : "case '\\r':",
      "info" : "SwitchCase[43621-43631]:SwitchCase[43815-43825]"
    }, {
      "left" : "_skipCR();",
      "right" : "_skipCR();",
      "info" : "ExpressionStatement[43644-43654]:ExpressionStatement[43838-43848]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[43667-43674]:ReturnStatement[43861-43868]"
    }, {
      "left" : "case '\\n':",
      "right" : "case '\\n':",
      "info" : "SwitchCase[43683-43693]:SwitchCase[43877-43887]"
    }, {
      "left" : "++_currInputRow;",
      "right" : "++_currInputRow;",
      "info" : "ExpressionStatement[43706-43722]:ExpressionStatement[43900-43916]"
    }, {
      "left" : "_currInputRowStart = _inputPtr;",
      "right" : "_currInputRowStart = _inputPtr;",
      "info" : "ExpressionStatement[43735-43766]:ExpressionStatement[43929-43960]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[43779-43786]:ReturnStatement[43973-43980]"
    }, {
      "left" : "_reportMissingRootWS(ch);",
      "right" : "_reportMissingRootWS(ch);",
      "info" : "ExpressionStatement[43805-43830]:ExpressionStatement[43999-44024]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44092-44970]:Block[44286-45164]"
    }, {
      "left" : "int ptr = _inputPtr;",
      "right" : "int ptr = _inputPtr;",
      "info" : "VariableDeclarationStatement[44260-44280]:VariableDeclarationStatement[44454-44474]"
    }, {
      "left" : "int hash = _hashSeed;",
      "right" : "int hash = _hashSeed;",
      "info" : "VariableDeclarationStatement[44289-44310]:VariableDeclarationStatement[44483-44504]"
    }, {
      "left" : "final int[] codes = _icLatin1;",
      "right" : "final int[] codes = _icLatin1;",
      "info" : "VariableDeclarationStatement[44319-44349]:VariableDeclarationStatement[44513-44543]"
    }, {
      "left" : "while (ptr < _inputEnd)",
      "right" : "while (ptr < _inputEnd)",
      "info" : "WhileStatement[44359-44856]:WhileStatement[44553-45050]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44383-44856]:Block[44577-45050]"
    }, {
      "left" : "int ch = _inputBuffer[ptr];",
      "right" : "int ch = _inputBuffer[ptr];",
      "info" : "VariableDeclarationStatement[44397-44424]:VariableDeclarationStatement[44591-44618]"
    }, {
      "left" : "if (ch < codes.length && codes[ch] != 0)",
      "right" : "if (ch < codes.length && codes[ch] != 0)",
      "info" : "IfStatement[44437-44758]:IfStatement[44631-44952]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44478-44758]:Block[44672-44952]"
    }, {
      "left" : "if (ch == '\"')",
      "right" : "if (ch == '\"')",
      "info" : "IfStatement[44496-44721]:IfStatement[44690-44915]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44511-44721]:Block[44705-44915]"
    }, {
      "left" : "int start = _inputPtr;",
      "right" : "int start = _inputPtr;",
      "info" : "VariableDeclarationStatement[44533-44555]:VariableDeclarationStatement[44727-44749]"
    }, {
      "left" : "_inputPtr = ptr+1;",
      "right" : "_inputPtr = ptr+1;",
      "info" : "ExpressionStatement[44576-44594]:ExpressionStatement[44770-44788]"
    }, {
      "left" : "return _symbols.findSymbol(_inputBuffer, start, ptr - start, hash);",
      "right" : "return _symbols.findSymbol(_inputBuffer, start, ptr - start, hash);",
      "info" : "ReturnStatement[44636-44703]:ReturnStatement[44830-44897]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[44738-44744]:BreakStatement[44932-44938]"
    }, {
      "left" : "hash = (hash * CharsToNameCanonicalizer.HASH_MULT) + ch;",
      "right" : "hash = (hash * CharsToNameCanonicalizer.HASH_MULT) + ch;",
      "info" : "ExpressionStatement[44771-44827]:ExpressionStatement[44965-45021]"
    }, {
      "left" : "++ptr;",
      "right" : "++ptr;",
      "info" : "ExpressionStatement[44840-44846]:ExpressionStatement[45034-45040]"
    }, {
      "left" : "int start = _inputPtr;",
      "right" : "int start = _inputPtr;",
      "info" : "VariableDeclarationStatement[44865-44887]:VariableDeclarationStatement[45059-45081]"
    }, {
      "left" : "_inputPtr = ptr;",
      "right" : "_inputPtr = ptr;",
      "info" : "ExpressionStatement[44896-44912]:ExpressionStatement[45090-45106]"
    }, {
      "left" : "return _parseName2(start, hash, INT_QUOTE);",
      "right" : "return _parseName2(start, hash, INT_QUOTE);",
      "info" : "ReturnStatement[44921-44964]:ReturnStatement[45115-45158]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45063-46992]:Block[45257-47186]"
    }, {
      "left" : "_textBuffer.resetWithShared(_inputBuffer, startPtr, (_inputPtr - startPtr));",
      "right" : "_textBuffer.resetWithShared(_inputBuffer, startPtr, (_inputPtr - startPtr));",
      "info" : "ExpressionStatement[45073-45149]:ExpressionStatement[45267-45343]"
    }, {
      "left" : "char[] outBuf = _textBuffer.getCurrentSegment();",
      "right" : "char[] outBuf = _textBuffer.getCurrentSegment();",
      "info" : "VariableDeclarationStatement[45304-45352]:VariableDeclarationStatement[45498-45546]"
    }, {
      "left" : "int outPtr = _textBuffer.getCurrentSegmentSize();",
      "right" : "int outPtr = _textBuffer.getCurrentSegmentSize();",
      "info" : "VariableDeclarationStatement[45361-45410]:VariableDeclarationStatement[45555-45604]"
    }, {
      "left" : "while (true)",
      "right" : "while (true)",
      "info" : "WhileStatement[45420-46693]:WhileStatement[45614-46887]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45433-46693]:Block[45627-46887]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[45447-45641]:IfStatement[45641-45835]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45475-45641]:Block[45669-45835]"
    }, {
      "left" : "if (!loadMore())",
      "right" : "if (!loadMore())",
      "info" : "IfStatement[45493-45627]:IfStatement[45687-45821]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45510-45627]:Block[45704-45821]"
    }, {
      "left" : "_reportInvalidEOF(\": was expecting closing '\"+((char) endChar)+\"' for name\");",
      "right" : "_reportInvalidEOF(\": was expecting closing '\"+((char) endChar)+\"' for name\");",
      "info" : "ExpressionStatement[45532-45609]:ExpressionStatement[45726-45803]"
    }, {
      "left" : "char c = _inputBuffer[_inputPtr++];",
      "right" : "char c = _inputBuffer[_inputPtr++];",
      "info" : "VariableDeclarationStatement[45654-45689]:VariableDeclarationStatement[45848-45883]"
    }, {
      "left" : "int i = (int) c;",
      "right" : "int i = (int) c;",
      "info" : "VariableDeclarationStatement[45702-45718]:VariableDeclarationStatement[45896-45912]"
    }, {
      "left" : "if (i <= INT_BACKSLASH)",
      "right" : "if (i <= INT_BACKSLASH)",
      "info" : "IfStatement[45731-46358]:IfStatement[45925-46552]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45755-46358]:Block[45949-46552]"
    }, {
      "left" : "if (i == INT_BACKSLASH)",
      "right" : "if (i == INT_BACKSLASH)",
      "info" : "IfStatement[45773-46344]:IfStatement[45967-46538]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45797-46089]:Block[45991-46283]"
    }, {
      "left" : "c = _decodeEscaped();",
      "right" : "c = _decodeEscaped();",
      "info" : "ExpressionStatement[46050-46071]:ExpressionStatement[46244-46265]"
    }, {
      "left" : "if (i <= endChar)",
      "right" : "if (i <= endChar)",
      "info" : "IfStatement[46095-46344]:IfStatement[46289-46538]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46113-46344]:Block[46307-46538]"
    }, {
      "left" : "if (i == endChar)",
      "right" : "if (i == endChar)",
      "info" : "IfStatement[46135-46207]:IfStatement[46329-46401]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46153-46207]:Block[46347-46401]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[46179-46185]:BreakStatement[46373-46379]"
    }, {
      "left" : "if (i < INT_SPACE)",
      "right" : "if (i < INT_SPACE)",
      "info" : "IfStatement[46228-46326]:IfStatement[46422-46520]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46247-46326]:Block[46441-46520]"
    }, {
      "left" : "_throwUnquotedSpace(i, \"name\");",
      "right" : "_throwUnquotedSpace(i, \"name\");",
      "info" : "ExpressionStatement[46273-46304]:ExpressionStatement[46467-46498]"
    }, {
      "left" : "hash = (hash * CharsToNameCanonicalizer.HASH_MULT) + i;",
      "right" : "hash = (hash * CharsToNameCanonicalizer.HASH_MULT) + i;",
      "info" : "ExpressionStatement[46371-46426]:ExpressionStatement[46565-46620]"
    }, {
      "left" : "outBuf[outPtr++] = c;",
      "right" : "outBuf[outPtr++] = c;",
      "info" : "ExpressionStatement[46484-46505]:ExpressionStatement[46678-46699]"
    }, {
      "left" : "if (outPtr >= outBuf.length)",
      "right" : "if (outPtr >= outBuf.length)",
      "info" : "IfStatement[46550-46683]:IfStatement[46744-46877]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46579-46683]:Block[46773-46877]"
    }, {
      "left" : "outBuf = _textBuffer.finishCurrentSegment();",
      "right" : "outBuf = _textBuffer.finishCurrentSegment();",
      "info" : "ExpressionStatement[46597-46641]:ExpressionStatement[46791-46835]"
    }, {
      "left" : "outPtr = 0;",
      "right" : "outPtr = 0;",
      "info" : "ExpressionStatement[46658-46669]:ExpressionStatement[46852-46863]"
    }, {
      "left" : "_textBuffer.setCurrentLength(outPtr);",
      "right" : "_textBuffer.setCurrentLength(outPtr);",
      "info" : "ExpressionStatement[46702-46739]:ExpressionStatement[46896-46933]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46748-46986]:Block[46942-47180]"
    }, {
      "left" : "TextBuffer tb = _textBuffer;",
      "right" : "TextBuffer tb = _textBuffer;",
      "info" : "VariableDeclarationStatement[46762-46790]:VariableDeclarationStatement[46956-46984]"
    }, {
      "left" : "char[] buf = tb.getTextBuffer();",
      "right" : "char[] buf = tb.getTextBuffer();",
      "info" : "VariableDeclarationStatement[46803-46835]:VariableDeclarationStatement[46997-47029]"
    }, {
      "left" : "int start = tb.getTextOffset();",
      "right" : "int start = tb.getTextOffset();",
      "info" : "VariableDeclarationStatement[46848-46879]:VariableDeclarationStatement[47042-47073]"
    }, {
      "left" : "int len = tb.size();",
      "right" : "int len = tb.size();",
      "info" : "VariableDeclarationStatement[46892-46912]:VariableDeclarationStatement[47086-47106]"
    }, {
      "left" : "return _symbols.findSymbol(buf, start, len, hash);",
      "right" : "return _symbols.findSymbol(buf, start, len, hash);",
      "info" : "ReturnStatement[46926-46976]:ReturnStatement[47120-47170]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47310-49346]:Block[47504-49540]"
    }, {
      "left" : "if (i == '\\'' && isEnabled(Feature.ALLOW_SINGLE_QUOTES))",
      "right" : "if (i == '\\'' && isEnabled(Feature.ALLOW_SINGLE_QUOTES))",
      "info" : "IfStatement[47366-47471]:IfStatement[47560-47665]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47423-47471]:Block[47617-47665]"
    }, {
      "left" : "return _parseAposName();",
      "right" : "return _parseAposName();",
      "info" : "ReturnStatement[47437-47461]:ReturnStatement[47631-47655]"
    }, {
      "left" : "if (!isEnabled(Feature.ALLOW_UNQUOTED_FIELD_NAMES))",
      "right" : "if (!isEnabled(Feature.ALLOW_UNQUOTED_FIELD_NAMES))",
      "info" : "IfStatement[47546-47697]:IfStatement[47740-47891]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47598-47697]:Block[47792-47891]"
    }, {
      "left" : "_reportUnexpectedChar(i, \"was expecting double-quote to start field name\");",
      "right" : "_reportUnexpectedChar(i, \"was expecting double-quote to start field name\");",
      "info" : "ExpressionStatement[47612-47687]:ExpressionStatement[47806-47881]"
    }, {
      "left" : "final int[] codes = CharTypes.getInputCodeLatin1JsNames();",
      "right" : "final int[] codes = CharTypes.getInputCodeLatin1JsNames();",
      "info" : "VariableDeclarationStatement[47706-47764]:VariableDeclarationStatement[47900-47958]"
    }, {
      "left" : "final int maxCode = codes.length;",
      "right" : "final int maxCode = codes.length;",
      "info" : "VariableDeclarationStatement[47773-47806]:VariableDeclarationStatement[47967-48000]"
    }, {
      "left" : "boolean firstOk;",
      "right" : "boolean firstOk;",
      "info" : "VariableDeclarationStatement[47889-47905]:VariableDeclarationStatement[48083-48099]"
    }, {
      "left" : "if (i < maxCode)",
      "right" : "if (i < maxCode)",
      "info" : "IfStatement[47915-48104]:IfStatement[48109-48298]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47932-48023]:Block[48126-48217]"
    }, {
      "left" : "firstOk = (codes[i] == 0);",
      "right" : "firstOk = (codes[i] == 0);",
      "info" : "ExpressionStatement[47987-48013]:ExpressionStatement[48181-48207]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48029-48104]:Block[48223-48298]"
    }, {
      "left" : "firstOk = Character.isJavaIdentifierPart((char) i);",
      "right" : "firstOk = Character.isJavaIdentifierPart((char) i);",
      "info" : "ExpressionStatement[48043-48094]:ExpressionStatement[48237-48288]"
    }, {
      "left" : "if (!firstOk)",
      "right" : "if (!firstOk)",
      "info" : "IfStatement[48113-48290]:IfStatement[48307-48484]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48127-48290]:Block[48321-48484]"
    }, {
      "left" : "_reportUnexpectedChar(i, \"was expecting either valid name character (for unquoted name) or double-quote (for quoted) to start field name\");",
      "right" : "_reportUnexpectedChar(i, \"was expecting either valid name character (for unquoted name) or double-quote (for quoted) to start field name\");",
      "info" : "ExpressionStatement[48141-48280]:ExpressionStatement[48335-48474]"
    }, {
      "left" : "int ptr = _inputPtr;",
      "right" : "int ptr = _inputPtr;",
      "info" : "VariableDeclarationStatement[48299-48319]:VariableDeclarationStatement[48493-48513]"
    }, {
      "left" : "int hash = _hashSeed;",
      "right" : "int hash = _hashSeed;",
      "info" : "VariableDeclarationStatement[48328-48349]:VariableDeclarationStatement[48522-48543]"
    }, {
      "left" : "final int inputLen = _inputEnd;",
      "right" : "final int inputLen = _inputEnd;",
      "info" : "VariableDeclarationStatement[48358-48389]:VariableDeclarationStatement[48552-48583]"
    }, {
      "left" : "if (ptr < inputLen)",
      "right" : "if (ptr < inputLen)",
      "info" : "IfStatement[48399-49230]:IfStatement[48593-49424]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48419-49230]:Block[48613-49424]"
    }, {
      "left" : "do{...}",
      "right" : "do{...}",
      "info" : "DoStatement[48433-49220]:DoStatement[48627-49414]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48436-49196]:Block[48630-49390]"
    }, {
      "left" : "int ch = _inputBuffer[ptr];",
      "right" : "int ch = _inputBuffer[ptr];",
      "info" : "VariableDeclarationStatement[48454-48481]:VariableDeclarationStatement[48648-48675]"
    }, {
      "left" : "if (ch < maxCode)",
      "right" : "if (ch < maxCode)",
      "info" : "IfStatement[48498-49086]:IfStatement[48692-49280]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48516-48812]:Block[48710-49006]"
    }, {
      "left" : "if (codes[ch] != 0)",
      "right" : "if (codes[ch] != 0)",
      "info" : "IfStatement[48538-48794]:IfStatement[48732-48988]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48558-48794]:Block[48752-48988]"
    }, {
      "left" : "int start = _inputPtr-1;",
      "right" : "int start = _inputPtr-1;",
      "info" : "VariableDeclarationStatement[48584-48608]:VariableDeclarationStatement[48778-48802]"
    }, {
      "left" : "_inputPtr = ptr;",
      "right" : "_inputPtr = ptr;",
      "info" : "ExpressionStatement[48664-48680]:ExpressionStatement[48858-48874]"
    }, {
      "left" : "return _symbols.findSymbol(_inputBuffer, start, ptr - start, hash);",
      "right" : "return _symbols.findSymbol(_inputBuffer, start, ptr - start, hash);",
      "info" : "ReturnStatement[48705-48772]:ReturnStatement[48899-48966]"
    }, {
      "left" : "if (!Character.isJavaIdentifierPart((char) ch))",
      "right" : "if (!Character.isJavaIdentifierPart((char) ch))",
      "info" : "IfStatement[48818-49086]:IfStatement[49012-49280]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48866-49086]:Block[49060-49280]"
    }, {
      "left" : "int start = _inputPtr-1;",
      "right" : "int start = _inputPtr-1;",
      "info" : "VariableDeclarationStatement[48888-48912]:VariableDeclarationStatement[49082-49106]"
    }, {
      "left" : "_inputPtr = ptr;",
      "right" : "_inputPtr = ptr;",
      "info" : "ExpressionStatement[48964-48980]:ExpressionStatement[49158-49174]"
    }, {
      "left" : "return _symbols.findSymbol(_inputBuffer, start, ptr - start, hash);",
      "right" : "return _symbols.findSymbol(_inputBuffer, start, ptr - start, hash);",
      "info" : "ReturnStatement[49001-49068]:ReturnStatement[49195-49262]"
    }, {
      "left" : "hash = (hash * CharsToNameCanonicalizer.HASH_MULT) + ch;",
      "right" : "hash = (hash * CharsToNameCanonicalizer.HASH_MULT) + ch;",
      "info" : "ExpressionStatement[49103-49159]:ExpressionStatement[49297-49353]"
    }, {
      "left" : "++ptr;",
      "right" : "++ptr;",
      "info" : "ExpressionStatement[49176-49182]:ExpressionStatement[49370-49376]"
    }, {
      "left" : "int start = _inputPtr-1;",
      "right" : "int start = _inputPtr-1;",
      "info" : "VariableDeclarationStatement[49239-49263]:VariableDeclarationStatement[49433-49457]"
    }, {
      "left" : "_inputPtr = ptr;",
      "right" : "_inputPtr = ptr;",
      "info" : "ExpressionStatement[49272-49288]:ExpressionStatement[49466-49482]"
    }, {
      "left" : "return _handleOddName2(start, hash, codes);",
      "right" : "return _handleOddName2(start, hash, codes);",
      "info" : "ReturnStatement[49297-49340]:ReturnStatement[49491-49534]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49409-50335]:Block[49603-50529]"
    }, {
      "left" : "int ptr = _inputPtr;",
      "right" : "int ptr = _inputPtr;",
      "info" : "VariableDeclarationStatement[49466-49486]:VariableDeclarationStatement[49660-49680]"
    }, {
      "left" : "int hash = _hashSeed;",
      "right" : "int hash = _hashSeed;",
      "info" : "VariableDeclarationStatement[49495-49516]:VariableDeclarationStatement[49689-49710]"
    }, {
      "left" : "final int inputLen = _inputEnd;",
      "right" : "final int inputLen = _inputEnd;",
      "info" : "VariableDeclarationStatement[49525-49556]:VariableDeclarationStatement[49719-49750]"
    }, {
      "left" : "if (ptr < inputLen)",
      "right" : "if (ptr < inputLen)",
      "info" : "IfStatement[49566-50224]:IfStatement[49760-50418]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49586-50224]:Block[49780-50418]"
    }, {
      "left" : "final int[] codes = _icLatin1;",
      "right" : "final int[] codes = _icLatin1;",
      "info" : "VariableDeclarationStatement[49600-49630]:VariableDeclarationStatement[49794-49824]"
    }, {
      "left" : "final int maxCode = codes.length;",
      "right" : "final int maxCode = codes.length;",
      "info" : "VariableDeclarationStatement[49643-49676]:VariableDeclarationStatement[49837-49870]"
    }, {
      "left" : "do{...}",
      "right" : "do{...}",
      "info" : "DoStatement[49690-50214]:DoStatement[49884-50408]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49693-50190]:Block[49887-50384]"
    }, {
      "left" : "int ch = _inputBuffer[ptr];",
      "right" : "int ch = _inputBuffer[ptr];",
      "info" : "VariableDeclarationStatement[49711-49738]:VariableDeclarationStatement[49905-49932]"
    }, {
      "left" : "if (ch == '\\'')",
      "right" : "if (ch == '\\'')",
      "info" : "IfStatement[49755-49981]:IfStatement[49949-50175]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49771-49981]:Block[49965-50175]"
    }, {
      "left" : "int start = _inputPtr;",
      "right" : "int start = _inputPtr;",
      "info" : "VariableDeclarationStatement[49793-49815]:VariableDeclarationStatement[49987-50009]"
    }, {
      "left" : "_inputPtr = ptr+1;",
      "right" : "_inputPtr = ptr+1;",
      "info" : "ExpressionStatement[49836-49854]:ExpressionStatement[50030-50048]"
    }, {
      "left" : "return _symbols.findSymbol(_inputBuffer, start, ptr - start, hash);",
      "right" : "return _symbols.findSymbol(_inputBuffer, start, ptr - start, hash);",
      "info" : "ReturnStatement[49896-49963]:ReturnStatement[50090-50157]"
    }, {
      "left" : "if (ch < maxCode && codes[ch] != 0)",
      "right" : "if (ch < maxCode && codes[ch] != 0)",
      "info" : "IfStatement[49998-50080]:IfStatement[50192-50274]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50034-50080]:Block[50228-50274]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[50056-50062]:BreakStatement[50250-50256]"
    }, {
      "left" : "hash = (hash * CharsToNameCanonicalizer.HASH_MULT) + ch;",
      "right" : "hash = (hash * CharsToNameCanonicalizer.HASH_MULT) + ch;",
      "info" : "ExpressionStatement[50097-50153]:ExpressionStatement[50291-50347]"
    }, {
      "left" : "++ptr;",
      "right" : "++ptr;",
      "info" : "ExpressionStatement[50170-50176]:ExpressionStatement[50364-50370]"
    }, {
      "left" : "int start = _inputPtr;",
      "right" : "int start = _inputPtr;",
      "info" : "VariableDeclarationStatement[50234-50256]:VariableDeclarationStatement[50428-50450]"
    }, {
      "left" : "_inputPtr = ptr;",
      "right" : "_inputPtr = ptr;",
      "info" : "ExpressionStatement[50265-50281]:ExpressionStatement[50459-50475]"
    }, {
      "left" : "return _parseName2(start, hash, '\\'');",
      "right" : "return _parseName2(start, hash, '\\'');",
      "info" : "ReturnStatement[50291-50329]:ReturnStatement[50485-50523]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50562-52543]:Block[50756-52737]"
    }, {
      "left" : "switch (i) {\n        case '\\'':\n            /* [JACKSON-173]: allow single quotes. Unlike with regular\n             * Strings, we'll eagerly parse contents; this so that there's\n             * no need to store information on quote char used.\n             *\n             * Also, no separation to fast/slow parsing; we'll just do\n             * one regular (~= slowish) parsing, to keep code simple\n             */\n            if (isEnabled(Feature.ALLOW_SINGLE_QUOTES)) {\n                return _handleApos();\n            }\n            break;\n        case 'N':\n            _matchToken(\"NaN\", 1);\n            if (isEnabled(Feature.ALLOW_NON_NUMERIC_NUMBERS)) {\n                return resetAsNaN(\"NaN\", Double.NaN);\n            }\n            _reportError(\"Non-standard token 'NaN': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow\");\n            break;\n        case 'I':\n            _matchToken(\"Infinity\", 1);\n            if (isEnabled(Feature.ALLOW_NON_NUMERIC_NUMBERS)) {\n                return resetAsNaN(\"Infinity\", Double.POSITIVE_INFINITY);\n            }\n            _reportError(\"Non-standard token 'Infinity': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow\");\n            break;\n        case '+': // note: '-' is taken as number\n            if (_inputPtr >= _inputEnd) {\n                if (!loadMore()) {\n                    _reportInvalidEOFInValue();\n                }\n            }\n            return _handleInvalidNumberStart(_inputBuffer[_inputPtr++], false);\n        }",
      "right" : "switch (i) {\n        case '\\'':\n            /* [JACKSON-173]: allow single quotes. Unlike with regular\n             * Strings, we'll eagerly parse contents; this so that there's\n             * no need to store information on quote char used.\n             *\n             * Also, no separation to fast/slow parsing; we'll just do\n             * one regular (~= slowish) parsing, to keep code simple\n             */\n            if (isEnabled(Feature.ALLOW_SINGLE_QUOTES)) {\n                return _handleApos();\n            }\n            break;\n        case 'N':\n            _matchToken(\"NaN\", 1);\n            if (isEnabled(Feature.ALLOW_NON_NUMERIC_NUMBERS)) {\n                return resetAsNaN(\"NaN\", Double.NaN);\n            }\n            _reportError(\"Non-standard token 'NaN': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow\");\n            break;\n        case 'I':\n            _matchToken(\"Infinity\", 1);\n            if (isEnabled(Feature.ALLOW_NON_NUMERIC_NUMBERS)) {\n                return resetAsNaN(\"Infinity\", Double.POSITIVE_INFINITY);\n            }\n            _reportError(\"Non-standard token 'Infinity': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow\");\n            break;\n        case '+': // note: '-' is taken as number\n            if (_inputPtr >= _inputEnd) {\n                if (!loadMore()) {\n                    _reportInvalidEOFInValue();\n                }\n            }\n            return _handleInvalidNumberStart(_inputBuffer[_inputPtr++], false);\n        }",
      "info" : "SwitchStatement[50649-52156]:SwitchStatement[50843-52350]"
    }, {
      "left" : "case '\\'':",
      "right" : "case '\\'':",
      "info" : "SwitchCase[50670-50680]:SwitchCase[50864-50874]"
    }, {
      "left" : "if (isEnabled(Feature.ALLOW_SINGLE_QUOTES))",
      "right" : "if (isEnabled(Feature.ALLOW_SINGLE_QUOTES))",
      "info" : "IfStatement[51074-51171]:IfStatement[51268-51365]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51118-51171]:Block[51312-51365]"
    }, {
      "left" : "return _handleApos();",
      "right" : "return _handleApos();",
      "info" : "ReturnStatement[51136-51157]:ReturnStatement[51330-51351]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[51184-51190]:BreakStatement[51378-51384]"
    }, {
      "left" : "case 'N':",
      "right" : "case 'N':",
      "info" : "SwitchCase[51199-51208]:SwitchCase[51393-51402]"
    }, {
      "left" : "_matchToken(\"NaN\", 1);",
      "right" : "_matchToken(\"NaN\", 1);",
      "info" : "ExpressionStatement[51221-51243]:ExpressionStatement[51415-51437]"
    }, {
      "left" : "if (isEnabled(Feature.ALLOW_NON_NUMERIC_NUMBERS))",
      "right" : "if (isEnabled(Feature.ALLOW_NON_NUMERIC_NUMBERS))",
      "info" : "IfStatement[51256-51375]:IfStatement[51450-51569]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51306-51375]:Block[51500-51569]"
    }, {
      "left" : "return resetAsNaN(\"NaN\", Double.NaN);",
      "right" : "return resetAsNaN(\"NaN\", Double.NaN);",
      "info" : "ReturnStatement[51324-51361]:ReturnStatement[51518-51555]"
    }, {
      "left" : "_reportError(\"Non-standard token 'NaN': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow\");",
      "right" : "_reportError(\"Non-standard token 'NaN': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow\");",
      "info" : "ExpressionStatement[51388-51491]:ExpressionStatement[51582-51685]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[51504-51510]:BreakStatement[51698-51704]"
    }, {
      "left" : "case 'I':",
      "right" : "case 'I':",
      "info" : "SwitchCase[51519-51528]:SwitchCase[51713-51722]"
    }, {
      "left" : "_matchToken(\"Infinity\", 1);",
      "right" : "_matchToken(\"Infinity\", 1);",
      "info" : "ExpressionStatement[51541-51568]:ExpressionStatement[51735-51762]"
    }, {
      "left" : "if (isEnabled(Feature.ALLOW_NON_NUMERIC_NUMBERS))",
      "right" : "if (isEnabled(Feature.ALLOW_NON_NUMERIC_NUMBERS))",
      "info" : "IfStatement[51581-51719]:IfStatement[51775-51913]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51631-51719]:Block[51825-51913]"
    }, {
      "left" : "return resetAsNaN(\"Infinity\", Double.POSITIVE_INFINITY);",
      "right" : "return resetAsNaN(\"Infinity\", Double.POSITIVE_INFINITY);",
      "info" : "ReturnStatement[51649-51705]:ReturnStatement[51843-51899]"
    }, {
      "left" : "_reportError(\"Non-standard token 'Infinity': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow\");",
      "right" : "_reportError(\"Non-standard token 'Infinity': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow\");",
      "info" : "ExpressionStatement[51732-51840]:ExpressionStatement[51926-52034]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[51853-51859]:BreakStatement[52047-52053]"
    }, {
      "left" : "case '+':",
      "right" : "case '+':",
      "info" : "SwitchCase[51868-51877]:SwitchCase[52062-52071]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[51922-52066]:IfStatement[52116-52260]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51950-52066]:Block[52144-52260]"
    }, {
      "left" : "if (!loadMore())",
      "right" : "if (!loadMore())",
      "info" : "IfStatement[51968-52052]:IfStatement[52162-52246]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51985-52052]:Block[52179-52246]"
    }, {
      "left" : "_reportInvalidEOFInValue();",
      "right" : "_reportInvalidEOFInValue();",
      "info" : "ExpressionStatement[52007-52034]:ExpressionStatement[52201-52228]"
    }, {
      "left" : "return _handleInvalidNumberStart(_inputBuffer[_inputPtr++], false);",
      "right" : "return _handleInvalidNumberStart(_inputBuffer[_inputPtr++], false);",
      "info" : "ReturnStatement[52079-52146]:ReturnStatement[52273-52340]"
    }, {
      "left" : "if (Character.isJavaIdentifierStart(i))",
      "right" : "if (Character.isJavaIdentifierStart(i))",
      "info" : "IfStatement[52219-52349]:IfStatement[52413-52543]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52259-52349]:Block[52453-52543]"
    }, {
      "left" : "_reportInvalidToken(\"\"+((char) i), \"('true', 'false' or 'null')\");",
      "right" : "_reportInvalidToken(\"\"+((char) i), \"('true', 'false' or 'null')\");",
      "info" : "ExpressionStatement[52273-52339]:ExpressionStatement[52467-52533]"
    }, {
      "left" : "_reportUnexpectedChar(i, \"expected a valid value (number, String, array, object, 'true', 'false' or 'null')\");",
      "right" : "_reportUnexpectedChar(i, \"expected a valid value (number, String, array, object, 'true', 'false' or 'null')\");",
      "info" : "ExpressionStatement[52406-52516]:ExpressionStatement[52600-52710]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[52525-52537]:ReturnStatement[52719-52731]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52610-54016]:Block[52804-54210]"
    }, {
      "left" : "char[] outBuf = _textBuffer.emptyAndGetCurrentSegment();",
      "right" : "char[] outBuf = _textBuffer.emptyAndGetCurrentSegment();",
      "info" : "VariableDeclarationStatement[52620-52676]:VariableDeclarationStatement[52814-52870]"
    }, {
      "left" : "int outPtr = _textBuffer.getCurrentSegmentSize();",
      "right" : "int outPtr = _textBuffer.getCurrentSegmentSize();",
      "info" : "VariableDeclarationStatement[52685-52734]:VariableDeclarationStatement[52879-52928]"
    }, {
      "left" : "while (true)",
      "right" : "while (true)",
      "info" : "WhileStatement[52744-53925]:WhileStatement[52938-54119]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52757-53925]:Block[52951-54119]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[52771-52958]:IfStatement[52965-53152]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52799-52958]:Block[52993-53152]"
    }, {
      "left" : "if (!loadMore())",
      "right" : "if (!loadMore())",
      "info" : "IfStatement[52817-52944]:IfStatement[53011-53138]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52834-52944]:Block[53028-53138]"
    }, {
      "left" : "_reportInvalidEOF(\": was expecting closing quote for a string value\");",
      "right" : "_reportInvalidEOF(\": was expecting closing quote for a string value\");",
      "info" : "ExpressionStatement[52856-52926]:ExpressionStatement[53050-53120]"
    }, {
      "left" : "char c = _inputBuffer[_inputPtr++];",
      "right" : "char c = _inputBuffer[_inputPtr++];",
      "info" : "VariableDeclarationStatement[52971-53006]:VariableDeclarationStatement[53165-53200]"
    }, {
      "left" : "int i = (int) c;",
      "right" : "int i = (int) c;",
      "info" : "VariableDeclarationStatement[53019-53035]:VariableDeclarationStatement[53213-53229]"
    }, {
      "left" : "if (i <= '\\\\')",
      "right" : "if (i <= '\\\\')",
      "info" : "IfStatement[53048-53659]:IfStatement[53242-53853]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53063-53659]:Block[53257-53853]"
    }, {
      "left" : "if (i == '\\\\')",
      "right" : "if (i == '\\\\')",
      "info" : "IfStatement[53081-53645]:IfStatement[53275-53839]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53096-53388]:Block[53290-53582]"
    }, {
      "left" : "c = _decodeEscaped();",
      "right" : "c = _decodeEscaped();",
      "info" : "ExpressionStatement[53349-53370]:ExpressionStatement[53543-53564]"
    }, {
      "left" : "if (i <= '\\'')",
      "right" : "if (i <= '\\'')",
      "info" : "IfStatement[53394-53645]:IfStatement[53588-53839]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53409-53645]:Block[53603-53839]"
    }, {
      "left" : "if (i == '\\'')",
      "right" : "if (i == '\\'')",
      "info" : "IfStatement[53431-53500]:IfStatement[53625-53694]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53446-53500]:Block[53640-53694]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[53472-53478]:BreakStatement[53666-53672]"
    }, {
      "left" : "if (i < INT_SPACE)",
      "right" : "if (i < INT_SPACE)",
      "info" : "IfStatement[53521-53627]:IfStatement[53715-53821]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53540-53627]:Block[53734-53821]"
    }, {
      "left" : "_throwUnquotedSpace(i, \"string value\");",
      "right" : "_throwUnquotedSpace(i, \"string value\");",
      "info" : "ExpressionStatement[53566-53605]:ExpressionStatement[53760-53799]"
    }, {
      "left" : "if (outPtr >= outBuf.length)",
      "right" : "if (outPtr >= outBuf.length)",
      "info" : "IfStatement[53703-53836]:IfStatement[53897-54030]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53732-53836]:Block[53926-54030]"
    }, {
      "left" : "outBuf = _textBuffer.finishCurrentSegment();",
      "right" : "outBuf = _textBuffer.finishCurrentSegment();",
      "info" : "ExpressionStatement[53750-53794]:ExpressionStatement[53944-53988]"
    }, {
      "left" : "outPtr = 0;",
      "right" : "outPtr = 0;",
      "info" : "ExpressionStatement[53811-53822]:ExpressionStatement[54005-54016]"
    }, {
      "left" : "outBuf[outPtr++] = c;",
      "right" : "outBuf[outPtr++] = c;",
      "info" : "ExpressionStatement[53894-53915]:ExpressionStatement[54088-54109]"
    }, {
      "left" : "_textBuffer.setCurrentLength(outPtr);",
      "right" : "_textBuffer.setCurrentLength(outPtr);",
      "info" : "ExpressionStatement[53934-53971]:ExpressionStatement[54128-54165]"
    }, {
      "left" : "return JsonToken.VALUE_STRING;",
      "right" : "return JsonToken.VALUE_STRING;",
      "info" : "ReturnStatement[53980-54010]:ReturnStatement[54174-54204]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54117-55511]:Block[54311-55705]"
    }, {
      "left" : "_textBuffer.resetWithShared(_inputBuffer, startPtr, (_inputPtr - startPtr));",
      "right" : "_textBuffer.resetWithShared(_inputBuffer, startPtr, (_inputPtr - startPtr));",
      "info" : "ExpressionStatement[54127-54203]:ExpressionStatement[54321-54397]"
    }, {
      "left" : "char[] outBuf = _textBuffer.getCurrentSegment();",
      "right" : "char[] outBuf = _textBuffer.getCurrentSegment();",
      "info" : "VariableDeclarationStatement[54212-54260]:VariableDeclarationStatement[54406-54454]"
    }, {
      "left" : "int outPtr = _textBuffer.getCurrentSegmentSize();",
      "right" : "int outPtr = _textBuffer.getCurrentSegmentSize();",
      "info" : "VariableDeclarationStatement[54269-54318]:VariableDeclarationStatement[54463-54512]"
    }, {
      "left" : "final int maxCode = codes.length;",
      "right" : "final int maxCode = codes.length;",
      "info" : "VariableDeclarationStatement[54327-54360]:VariableDeclarationStatement[54521-54554]"
    }, {
      "left" : "while (true)",
      "right" : "while (true)",
      "info" : "WhileStatement[54370-55212]:WhileStatement[54564-55406]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54383-55212]:Block[54577-55406]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[54397-54565]:IfStatement[54591-54759]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54425-54565]:Block[54619-54759]"
    }, {
      "left" : "if (!loadMore())",
      "right" : "if (!loadMore())",
      "info" : "IfStatement[54443-54551]:IfStatement[54637-54745]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54460-54551]:Block[54654-54745]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[54527-54533]:BreakStatement[54721-54727]"
    }, {
      "left" : "char c = _inputBuffer[_inputPtr];",
      "right" : "char c = _inputBuffer[_inputPtr];",
      "info" : "VariableDeclarationStatement[54578-54611]:VariableDeclarationStatement[54772-54805]"
    }, {
      "left" : "int i = (int) c;",
      "right" : "int i = (int) c;",
      "info" : "VariableDeclarationStatement[54624-54640]:VariableDeclarationStatement[54818-54834]"
    }, {
      "left" : "if (i <= maxCode)",
      "right" : "if (i <= maxCode)",
      "info" : "IfStatement[54653-54852]:IfStatement[54847-55046]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54671-54768]:Block[54865-54962]"
    }, {
      "left" : "if (codes[i] != 0)",
      "right" : "if (codes[i] != 0)",
      "info" : "IfStatement[54689-54754]:IfStatement[54883-54948]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54708-54754]:Block[54902-54948]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[54730-54736]:BreakStatement[54924-54930]"
    }, {
      "left" : "if (!Character.isJavaIdentifierPart(c))",
      "right" : "if (!Character.isJavaIdentifierPart(c))",
      "info" : "IfStatement[54774-54852]:IfStatement[54968-55046]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54814-54852]:Block[55008-55046]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[54832-54838]:BreakStatement[55026-55032]"
    }, {
      "left" : "++_inputPtr;",
      "right" : "++_inputPtr;",
      "info" : "ExpressionStatement[54865-54877]:ExpressionStatement[55059-55071]"
    }, {
      "left" : "hash = (hash * CharsToNameCanonicalizer.HASH_MULT) + i;",
      "right" : "hash = (hash * CharsToNameCanonicalizer.HASH_MULT) + i;",
      "info" : "ExpressionStatement[54890-54945]:ExpressionStatement[55084-55139]"
    }, {
      "left" : "outBuf[outPtr++] = c;",
      "right" : "outBuf[outPtr++] = c;",
      "info" : "ExpressionStatement[55003-55024]:ExpressionStatement[55197-55218]"
    }, {
      "left" : "if (outPtr >= outBuf.length)",
      "right" : "if (outPtr >= outBuf.length)",
      "info" : "IfStatement[55069-55202]:IfStatement[55263-55396]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55098-55202]:Block[55292-55396]"
    }, {
      "left" : "outBuf = _textBuffer.finishCurrentSegment();",
      "right" : "outBuf = _textBuffer.finishCurrentSegment();",
      "info" : "ExpressionStatement[55116-55160]:ExpressionStatement[55310-55354]"
    }, {
      "left" : "outPtr = 0;",
      "right" : "outPtr = 0;",
      "info" : "ExpressionStatement[55177-55188]:ExpressionStatement[55371-55382]"
    }, {
      "left" : "_textBuffer.setCurrentLength(outPtr);",
      "right" : "_textBuffer.setCurrentLength(outPtr);",
      "info" : "ExpressionStatement[55221-55258]:ExpressionStatement[55415-55452]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55267-55505]:Block[55461-55699]"
    }, {
      "left" : "TextBuffer tb = _textBuffer;",
      "right" : "TextBuffer tb = _textBuffer;",
      "info" : "VariableDeclarationStatement[55281-55309]:VariableDeclarationStatement[55475-55503]"
    }, {
      "left" : "char[] buf = tb.getTextBuffer();",
      "right" : "char[] buf = tb.getTextBuffer();",
      "info" : "VariableDeclarationStatement[55322-55354]:VariableDeclarationStatement[55516-55548]"
    }, {
      "left" : "int start = tb.getTextOffset();",
      "right" : "int start = tb.getTextOffset();",
      "info" : "VariableDeclarationStatement[55367-55398]:VariableDeclarationStatement[55561-55592]"
    }, {
      "left" : "int len = tb.size();",
      "right" : "int len = tb.size();",
      "info" : "VariableDeclarationStatement[55411-55431]:VariableDeclarationStatement[55605-55625]"
    }, {
      "left" : "return _symbols.findSymbol(buf, start, len, hash);",
      "right" : "return _symbols.findSymbol(buf, start, len, hash);",
      "info" : "ReturnStatement[55445-55495]:ReturnStatement[55639-55689]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55593-56708]:Block[55787-56902]"
    }, {
      "left" : "int ptr = _inputPtr;",
      "right" : "int ptr = _inputPtr;",
      "info" : "VariableDeclarationStatement[55790-55810]:VariableDeclarationStatement[55984-56004]"
    }, {
      "left" : "final int inputLen = _inputEnd;",
      "right" : "final int inputLen = _inputEnd;",
      "info" : "VariableDeclarationStatement[55819-55850]:VariableDeclarationStatement[56013-56044]"
    }, {
      "left" : "if (ptr < inputLen)",
      "right" : "if (ptr < inputLen)",
      "info" : "IfStatement[55860-56477]:IfStatement[56054-56671]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55880-56477]:Block[56074-56671]"
    }, {
      "left" : "final int[] codes = _icLatin1;",
      "right" : "final int[] codes = _icLatin1;",
      "info" : "VariableDeclarationStatement[55894-55924]:VariableDeclarationStatement[56088-56118]"
    }, {
      "left" : "final int maxCode = codes.length;",
      "right" : "final int maxCode = codes.length;",
      "info" : "VariableDeclarationStatement[55937-55970]:VariableDeclarationStatement[56131-56164]"
    }, {
      "left" : "do{...}",
      "right" : "do{...}",
      "info" : "DoStatement[55984-56467]:DoStatement[56178-56661]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55987-56443]:Block[56181-56637]"
    }, {
      "left" : "int ch = _inputBuffer[ptr];",
      "right" : "int ch = _inputBuffer[ptr];",
      "info" : "VariableDeclarationStatement[56005-56032]:VariableDeclarationStatement[56199-56226]"
    }, {
      "left" : "if (ch < maxCode && codes[ch] != 0)",
      "right" : "if (ch < maxCode && codes[ch] != 0)",
      "info" : "IfStatement[56049-56406]:IfStatement[56243-56600]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56085-56406]:Block[56279-56600]"
    }, {
      "left" : "if (ch == '\"')",
      "right" : "if (ch == '\"')",
      "info" : "IfStatement[56107-56361]:IfStatement[56301-56555]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56122-56361]:Block[56316-56555]"
    }, {
      "left" : "_textBuffer.resetWithShared(_inputBuffer, _inputPtr, (ptr-_inputPtr));",
      "right" : "_textBuffer.resetWithShared(_inputBuffer, _inputPtr, (ptr-_inputPtr));",
      "info" : "ExpressionStatement[56148-56218]:ExpressionStatement[56342-56412]"
    }, {
      "left" : "_inputPtr = ptr+1;",
      "right" : "_inputPtr = ptr+1;",
      "info" : "ExpressionStatement[56243-56261]:ExpressionStatement[56437-56455]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[56332-56339]:ReturnStatement[56526-56533]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[56382-56388]:BreakStatement[56576-56582]"
    }, {
      "left" : "++ptr;",
      "right" : "++ptr;",
      "info" : "ExpressionStatement[56423-56429]:ExpressionStatement[56617-56623]"
    }, {
      "left" : "_textBuffer.resetWithCopy(_inputBuffer, _inputPtr, (ptr-_inputPtr));",
      "right" : "_textBuffer.resetWithCopy(_inputBuffer, _inputPtr, (ptr-_inputPtr));",
      "info" : "ExpressionStatement[56583-56651]:ExpressionStatement[56777-56845]"
    }, {
      "left" : "_inputPtr = ptr;",
      "right" : "_inputPtr = ptr;",
      "info" : "ExpressionStatement[56660-56676]:ExpressionStatement[56854-56870]"
    }, {
      "left" : "_finishString2();",
      "right" : "_finishString2();",
      "info" : "ExpressionStatement[56685-56702]:ExpressionStatement[56879-56896]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56769-58174]:Block[56963-58368]"
    }, {
      "left" : "char[] outBuf = _textBuffer.getCurrentSegment();",
      "right" : "char[] outBuf = _textBuffer.getCurrentSegment();",
      "info" : "VariableDeclarationStatement[56779-56827]:VariableDeclarationStatement[56973-57021]"
    }, {
      "left" : "int outPtr = _textBuffer.getCurrentSegmentSize();",
      "right" : "int outPtr = _textBuffer.getCurrentSegmentSize();",
      "info" : "VariableDeclarationStatement[56836-56885]:VariableDeclarationStatement[57030-57079]"
    }, {
      "left" : "final int[] codes = _icLatin1;",
      "right" : "final int[] codes = _icLatin1;",
      "info" : "VariableDeclarationStatement[56894-56924]:VariableDeclarationStatement[57088-57118]"
    }, {
      "left" : "final int maxCode = codes.length;",
      "right" : "final int maxCode = codes.length;",
      "info" : "VariableDeclarationStatement[56933-56966]:VariableDeclarationStatement[57127-57160]"
    }, {
      "left" : "while (true)",
      "right" : "while (true)",
      "info" : "WhileStatement[56976-58122]:WhileStatement[57170-58316]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56989-58122]:Block[57183-58316]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[57003-57190]:IfStatement[57197-57384]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57031-57190]:Block[57225-57384]"
    }, {
      "left" : "if (!loadMore())",
      "right" : "if (!loadMore())",
      "info" : "IfStatement[57049-57176]:IfStatement[57243-57370]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57066-57176]:Block[57260-57370]"
    }, {
      "left" : "_reportInvalidEOF(\": was expecting closing quote for a string value\");",
      "right" : "_reportInvalidEOF(\": was expecting closing quote for a string value\");",
      "info" : "ExpressionStatement[57088-57158]:ExpressionStatement[57282-57352]"
    }, {
      "left" : "char c = _inputBuffer[_inputPtr++];",
      "right" : "char c = _inputBuffer[_inputPtr++];",
      "info" : "VariableDeclarationStatement[57203-57238]:VariableDeclarationStatement[57397-57432]"
    }, {
      "left" : "int i = (int) c;",
      "right" : "int i = (int) c;",
      "info" : "VariableDeclarationStatement[57251-57267]:VariableDeclarationStatement[57445-57461]"
    }, {
      "left" : "if (i < maxCode && codes[i] != 0)",
      "right" : "if (i < maxCode && codes[i] != 0)",
      "info" : "IfStatement[57280-57856]:IfStatement[57474-58050]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57314-57856]:Block[57508-58050]"
    }, {
      "left" : "if (i == INT_QUOTE)",
      "right" : "if (i == INT_QUOTE)",
      "info" : "IfStatement[57332-57824]:IfStatement[57526-58018]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57352-57398]:Block[57546-57592]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[57374-57380]:BreakStatement[57568-57574]"
    }, {
      "left" : "if (i == INT_BACKSLASH)",
      "right" : "if (i == INT_BACKSLASH)",
      "info" : "IfStatement[57404-57824]:IfStatement[57598-58018]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57428-57720]:Block[57622-57914]"
    }, {
      "left" : "c = _decodeEscaped();",
      "right" : "c = _decodeEscaped();",
      "info" : "ExpressionStatement[57681-57702]:ExpressionStatement[57875-57896]"
    }, {
      "left" : "if (i < INT_SPACE)",
      "right" : "if (i < INT_SPACE)",
      "info" : "IfStatement[57726-57824]:IfStatement[57920-58018]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57745-57824]:Block[57939-58018]"
    }, {
      "left" : "_throwUnquotedSpace(i, \"string value\");",
      "right" : "_throwUnquotedSpace(i, \"string value\");",
      "info" : "ExpressionStatement[57767-57806]:ExpressionStatement[57961-58000]"
    }, {
      "left" : "if (outPtr >= outBuf.length)",
      "right" : "if (outPtr >= outBuf.length)",
      "info" : "IfStatement[57900-58033]:IfStatement[58094-58227]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57929-58033]:Block[58123-58227]"
    }, {
      "left" : "outBuf = _textBuffer.finishCurrentSegment();",
      "right" : "outBuf = _textBuffer.finishCurrentSegment();",
      "info" : "ExpressionStatement[57947-57991]:ExpressionStatement[58141-58185]"
    }, {
      "left" : "outPtr = 0;",
      "right" : "outPtr = 0;",
      "info" : "ExpressionStatement[58008-58019]:ExpressionStatement[58202-58213]"
    }, {
      "left" : "outBuf[outPtr++] = c;",
      "right" : "outBuf[outPtr++] = c;",
      "info" : "ExpressionStatement[58091-58112]:ExpressionStatement[58285-58306]"
    }, {
      "left" : "_textBuffer.setCurrentLength(outPtr);",
      "right" : "_textBuffer.setCurrentLength(outPtr);",
      "info" : "ExpressionStatement[58131-58168]:ExpressionStatement[58325-58362]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58435-59828]:Block[58629-60022]"
    }, {
      "left" : "_tokenIncomplete = false;",
      "right" : "_tokenIncomplete = false;",
      "info" : "ExpressionStatement[58445-58470]:ExpressionStatement[58639-58664]"
    }, {
      "left" : "int inPtr = _inputPtr;",
      "right" : "int inPtr = _inputPtr;",
      "info" : "VariableDeclarationStatement[58480-58502]:VariableDeclarationStatement[58674-58696]"
    }, {
      "left" : "int inLen = _inputEnd;",
      "right" : "int inLen = _inputEnd;",
      "info" : "VariableDeclarationStatement[58511-58533]:VariableDeclarationStatement[58705-58727]"
    }, {
      "left" : "char[] inBuf = _inputBuffer;",
      "right" : "char[] inBuf = _inputBuffer;",
      "info" : "VariableDeclarationStatement[58542-58570]:VariableDeclarationStatement[58736-58764]"
    }, {
      "left" : "while (true)",
      "right" : "while (true)",
      "info" : "WhileStatement[58580-59822]:WhileStatement[58774-60016]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58593-59822]:Block[58787-60016]"
    }, {
      "left" : "if (inPtr >= inLen)",
      "right" : "if (inPtr >= inLen)",
      "info" : "IfStatement[58607-58891]:IfStatement[58801-59085]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58627-58891]:Block[58821-59085]"
    }, {
      "left" : "_inputPtr = inPtr;",
      "right" : "_inputPtr = inPtr;",
      "info" : "ExpressionStatement[58645-58663]:ExpressionStatement[58839-58857]"
    }, {
      "left" : "if (!loadMore())",
      "right" : "if (!loadMore())",
      "info" : "IfStatement[58680-58807]:IfStatement[58874-59001]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58697-58807]:Block[58891-59001]"
    }, {
      "left" : "_reportInvalidEOF(\": was expecting closing quote for a string value\");",
      "right" : "_reportInvalidEOF(\": was expecting closing quote for a string value\");",
      "info" : "ExpressionStatement[58719-58789]:ExpressionStatement[58913-58983]"
    }, {
      "left" : "inPtr = _inputPtr;",
      "right" : "inPtr = _inputPtr;",
      "info" : "ExpressionStatement[58824-58842]:ExpressionStatement[59018-59036]"
    }, {
      "left" : "inLen = _inputEnd;",
      "right" : "inLen = _inputEnd;",
      "info" : "ExpressionStatement[58859-58877]:ExpressionStatement[59053-59071]"
    }, {
      "left" : "char c = inBuf[inPtr++];",
      "right" : "char c = inBuf[inPtr++];",
      "info" : "VariableDeclarationStatement[58904-58928]:VariableDeclarationStatement[59098-59122]"
    }, {
      "left" : "int i = (int) c;",
      "right" : "int i = (int) c;",
      "info" : "VariableDeclarationStatement[58941-58957]:VariableDeclarationStatement[59135-59151]"
    }, {
      "left" : "if (i <= INT_BACKSLASH)",
      "right" : "if (i <= INT_BACKSLASH)",
      "info" : "IfStatement[58970-59812]:IfStatement[59164-60006]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58994-59812]:Block[59188-60006]"
    }, {
      "left" : "if (i == INT_BACKSLASH)",
      "right" : "if (i == INT_BACKSLASH)",
      "info" : "IfStatement[59012-59798]:IfStatement[59206-59992]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[59036-59445]:Block[59230-59639]"
    }, {
      "left" : "_inputPtr = inPtr;",
      "right" : "_inputPtr = inPtr;",
      "info" : "ExpressionStatement[59289-59307]:ExpressionStatement[59483-59501]"
    }, {
      "left" : "c = _decodeEscaped();",
      "right" : "c = _decodeEscaped();",
      "info" : "ExpressionStatement[59328-59349]:ExpressionStatement[59522-59543]"
    }, {
      "left" : "inPtr = _inputPtr;",
      "right" : "inPtr = _inputPtr;",
      "info" : "ExpressionStatement[59370-59388]:ExpressionStatement[59564-59582]"
    }, {
      "left" : "inLen = _inputEnd;",
      "right" : "inLen = _inputEnd;",
      "info" : "ExpressionStatement[59409-59427]:ExpressionStatement[59603-59621]"
    }, {
      "left" : "if (i <= INT_QUOTE)",
      "right" : "if (i <= INT_QUOTE)",
      "info" : "IfStatement[59451-59798]:IfStatement[59645-59992]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[59471-59798]:Block[59665-59992]"
    }, {
      "left" : "if (i == INT_QUOTE)",
      "right" : "if (i == INT_QUOTE)",
      "info" : "IfStatement[59493-59610]:IfStatement[59687-59804]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[59513-59610]:Block[59707-59804]"
    }, {
      "left" : "_inputPtr = inPtr;",
      "right" : "_inputPtr = inPtr;",
      "info" : "ExpressionStatement[59539-59557]:ExpressionStatement[59733-59751]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[59582-59588]:BreakStatement[59776-59782]"
    }, {
      "left" : "if (i < INT_SPACE)",
      "right" : "if (i < INT_SPACE)",
      "info" : "IfStatement[59631-59780]:IfStatement[59825-59974]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[59650-59780]:Block[59844-59974]"
    }, {
      "left" : "_inputPtr = inPtr;",
      "right" : "_inputPtr = inPtr;",
      "info" : "ExpressionStatement[59676-59694]:ExpressionStatement[59870-59888]"
    }, {
      "left" : "_throwUnquotedSpace(i, \"string value\");",
      "right" : "_throwUnquotedSpace(i, \"string value\");",
      "info" : "ExpressionStatement[59719-59758]:ExpressionStatement[59913-59952]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60189-60416]:Block[60383-60610]"
    }, {
      "left" : "if (_inputPtr < _inputEnd || loadMore())",
      "right" : "if (_inputPtr < _inputEnd || loadMore())",
      "info" : "IfStatement[60199-60345]:IfStatement[60393-60539]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60240-60345]:Block[60434-60539]"
    }, {
      "left" : "if (_inputBuffer[_inputPtr] == '\\n')",
      "right" : "if (_inputBuffer[_inputPtr] == '\\n')",
      "info" : "IfStatement[60254-60335]:IfStatement[60448-60529]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60291-60335]:Block[60485-60529]"
    }, {
      "left" : "++_inputPtr;",
      "right" : "++_inputPtr;",
      "info" : "ExpressionStatement[60309-60321]:ExpressionStatement[60503-60515]"
    }, {
      "left" : "++_currInputRow;",
      "right" : "++_currInputRow;",
      "info" : "ExpressionStatement[60354-60370]:ExpressionStatement[60548-60564]"
    }, {
      "left" : "_currInputRowStart = _inputPtr;",
      "right" : "_currInputRowStart = _inputPtr;",
      "info" : "ExpressionStatement[60379-60410]:ExpressionStatement[60573-60604]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60480-62253]:Block[60674-62447]"
    }, {
      "left" : "if ((_inputPtr + 4) >= _inputEnd)",
      "right" : "if ((_inputPtr + 4) >= _inputEnd)",
      "info" : "IfStatement[60490-60574]:IfStatement[60684-60768]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60524-60574]:Block[60718-60768]"
    }, {
      "left" : "return _skipColon2(false);",
      "right" : "return _skipColon2(false);",
      "info" : "ReturnStatement[60538-60564]:ReturnStatement[60732-60758]"
    }, {
      "left" : "char c = _inputBuffer[_inputPtr];",
      "right" : "char c = _inputBuffer[_inputPtr];",
      "info" : "VariableDeclarationStatement[60583-60616]:VariableDeclarationStatement[60777-60810]"
    }, {
      "left" : "if (c == ':')",
      "right" : "if (c == ':')",
      "info" : "IfStatement[60625-61416]:IfStatement[60819-61610]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60639-61416]:Block[60833-61610]"
    }, {
      "left" : "int i = _inputBuffer[++_inputPtr];",
      "right" : "int i = _inputBuffer[++_inputPtr];",
      "info" : "VariableDeclarationStatement[60686-60720]:VariableDeclarationStatement[60880-60914]"
    }, {
      "left" : "if (i > INT_SPACE)",
      "right" : "if (i > INT_SPACE)",
      "info" : "IfStatement[60733-60957]:IfStatement[60927-61151]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60752-60957]:Block[60946-61151]"
    }, {
      "left" : "if (i == INT_SLASH || i == INT_HASH)",
      "right" : "if (i == INT_SLASH || i == INT_HASH)",
      "info" : "IfStatement[60786-60888]:IfStatement[60980-61082]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60823-60888]:Block[61017-61082]"
    }, {
      "left" : "return _skipColon2(true);",
      "right" : "return _skipColon2(true);",
      "info" : "ReturnStatement[60845-60870]:ReturnStatement[61039-61064]"
    }, {
      "left" : "++_inputPtr;",
      "right" : "++_inputPtr;",
      "info" : "ExpressionStatement[60905-60917]:ExpressionStatement[61099-61111]"
    }, {
      "left" : "return i;",
      "right" : "return i;",
      "info" : "ReturnStatement[60934-60943]:ReturnStatement[61128-61137]"
    }, {
      "left" : "if (i == INT_SPACE || i == INT_TAB)",
      "right" : "if (i == INT_SPACE || i == INT_TAB)",
      "info" : "IfStatement[60970-61343]:IfStatement[61164-61537]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61006-61343]:Block[61200-61537]"
    }, {
      "left" : "i = (int) _inputBuffer[++_inputPtr];",
      "right" : "i = (int) _inputBuffer[++_inputPtr];",
      "info" : "ExpressionStatement[61024-61060]:ExpressionStatement[61218-61254]"
    }, {
      "left" : "if (i > INT_SPACE)",
      "right" : "if (i > INT_SPACE)",
      "info" : "IfStatement[61077-61329]:IfStatement[61271-61523]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61096-61329]:Block[61290-61523]"
    }, {
      "left" : "if (i == INT_SLASH || i == INT_HASH)",
      "right" : "if (i == INT_SLASH || i == INT_HASH)",
      "info" : "IfStatement[61118-61228]:IfStatement[61312-61422]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61155-61228]:Block[61349-61422]"
    }, {
      "left" : "return _skipColon2(true);",
      "right" : "return _skipColon2(true);",
      "info" : "ReturnStatement[61181-61206]:ReturnStatement[61375-61400]"
    }, {
      "left" : "++_inputPtr;",
      "right" : "++_inputPtr;",
      "info" : "ExpressionStatement[61249-61261]:ExpressionStatement[61443-61455]"
    }, {
      "left" : "return i;",
      "right" : "return i;",
      "info" : "ReturnStatement[61302-61311]:ReturnStatement[61496-61505]"
    }, {
      "left" : "return _skipColon2(true);",
      "right" : "return _skipColon2(true);",
      "info" : "ReturnStatement[61356-61381]:ReturnStatement[61550-61575]"
    }, {
      "left" : "if (c == ' ' || c == '\\t')",
      "right" : "if (c == ' ' || c == '\\t')",
      "info" : "IfStatement[61425-61506]:IfStatement[61619-61700]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61452-61506]:Block[61646-61700]"
    }, {
      "left" : "c = _inputBuffer[++_inputPtr];",
      "right" : "c = _inputBuffer[++_inputPtr];",
      "info" : "ExpressionStatement[61466-61496]:ExpressionStatement[61660-61690]"
    }, {
      "left" : "if (c == ':')",
      "right" : "if (c == ':')",
      "info" : "IfStatement[61515-62212]:IfStatement[61709-62406]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61529-62212]:Block[61723-62406]"
    }, {
      "left" : "int i = _inputBuffer[++_inputPtr];",
      "right" : "int i = _inputBuffer[++_inputPtr];",
      "info" : "VariableDeclarationStatement[61543-61577]:VariableDeclarationStatement[61737-61771]"
    }, {
      "left" : "if (i > INT_SPACE)",
      "right" : "if (i > INT_SPACE)",
      "info" : "IfStatement[61590-61798]:IfStatement[61784-61992]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61609-61798]:Block[61803-61992]"
    }, {
      "left" : "if (i == INT_SLASH || i == INT_HASH)",
      "right" : "if (i == INT_SLASH || i == INT_HASH)",
      "info" : "IfStatement[61627-61729]:IfStatement[61821-61923]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61664-61729]:Block[61858-61923]"
    }, {
      "left" : "return _skipColon2(true);",
      "right" : "return _skipColon2(true);",
      "info" : "ReturnStatement[61686-61711]:ReturnStatement[61880-61905]"
    }, {
      "left" : "++_inputPtr;",
      "right" : "++_inputPtr;",
      "info" : "ExpressionStatement[61746-61758]:ExpressionStatement[61940-61952]"
    }, {
      "left" : "return i;",
      "right" : "return i;",
      "info" : "ReturnStatement[61775-61784]:ReturnStatement[61969-61978]"
    }, {
      "left" : "if (i == INT_SPACE || i == INT_TAB)",
      "right" : "if (i == INT_SPACE || i == INT_TAB)",
      "info" : "IfStatement[61811-62164]:IfStatement[62005-62358]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61847-62164]:Block[62041-62358]"
    }, {
      "left" : "i = (int) _inputBuffer[++_inputPtr];",
      "right" : "i = (int) _inputBuffer[++_inputPtr];",
      "info" : "ExpressionStatement[61865-61901]:ExpressionStatement[62059-62095]"
    }, {
      "left" : "if (i > INT_SPACE)",
      "right" : "if (i > INT_SPACE)",
      "info" : "IfStatement[61918-62150]:IfStatement[62112-62344]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61937-62150]:Block[62131-62344]"
    }, {
      "left" : "if (i == INT_SLASH || i == INT_HASH)",
      "right" : "if (i == INT_SLASH || i == INT_HASH)",
      "info" : "IfStatement[61959-62069]:IfStatement[62153-62263]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61996-62069]:Block[62190-62263]"
    }, {
      "left" : "return _skipColon2(true);",
      "right" : "return _skipColon2(true);",
      "info" : "ReturnStatement[62022-62047]:ReturnStatement[62216-62241]"
    }, {
      "left" : "++_inputPtr;",
      "right" : "++_inputPtr;",
      "info" : "ExpressionStatement[62090-62102]:ExpressionStatement[62284-62296]"
    }, {
      "left" : "return i;",
      "right" : "return i;",
      "info" : "ReturnStatement[62123-62132]:ReturnStatement[62317-62326]"
    }, {
      "left" : "return _skipColon2(true);",
      "right" : "return _skipColon2(true);",
      "info" : "ReturnStatement[62177-62202]:ReturnStatement[62371-62396]"
    }, {
      "left" : "return _skipColon2(false);",
      "right" : "return _skipColon2(false);",
      "info" : "ReturnStatement[62221-62247]:ReturnStatement[62415-62441]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62330-63600]:Block[62524-63794]"
    }, {
      "left" : "while (true)",
      "right" : "while (true)",
      "info" : "WhileStatement[62340-63594]:WhileStatement[62534-63788]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62353-63594]:Block[62547-63788]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[62367-62448]:IfStatement[62561-62642]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62395-62448]:Block[62589-62642]"
    }, {
      "left" : "loadMoreGuaranteed();",
      "right" : "loadMoreGuaranteed();",
      "info" : "ExpressionStatement[62413-62434]:ExpressionStatement[62607-62628]"
    }, {
      "left" : "int i = (int) _inputBuffer[_inputPtr++];",
      "right" : "int i = (int) _inputBuffer[_inputPtr++];",
      "info" : "VariableDeclarationStatement[62461-62501]:VariableDeclarationStatement[62655-62695]"
    }, {
      "left" : "if (i > INT_SPACE)",
      "right" : "if (i > INT_SPACE)",
      "info" : "IfStatement[62514-63236]:IfStatement[62708-63430]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62533-63236]:Block[62727-63430]"
    }, {
      "left" : "if (i == INT_SLASH)",
      "right" : "if (i == INT_SLASH)",
      "info" : "IfStatement[62551-62656]:IfStatement[62745-62850]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62571-62656]:Block[62765-62850]"
    }, {
      "left" : "_skipComment();",
      "right" : "_skipComment();",
      "info" : "ExpressionStatement[62593-62608]:ExpressionStatement[62787-62802]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[62629-62638]:ContinueStatement[62823-62832]"
    }, {
      "left" : "if (i == INT_HASH)",
      "right" : "if (i == INT_HASH)",
      "info" : "IfStatement[62673-62813]:IfStatement[62867-63007]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62692-62813]:Block[62886-63007]"
    }, {
      "left" : "if (_skipYAMLComment())",
      "right" : "if (_skipYAMLComment())",
      "info" : "IfStatement[62714-62795]:IfStatement[62908-62989]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62738-62795]:Block[62932-62989]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[62764-62773]:ContinueStatement[62958-62967]"
    }, {
      "left" : "if (gotColon)",
      "right" : "if (gotColon)",
      "info" : "IfStatement[62830-62893]:IfStatement[63024-63087]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62844-62893]:Block[63038-63087]"
    }, {
      "left" : "return i;",
      "right" : "return i;",
      "info" : "ReturnStatement[62866-62875]:ReturnStatement[63060-63069]"
    }, {
      "left" : "if (i != INT_COLON)",
      "right" : "if (i != INT_COLON)",
      "info" : "IfStatement[62910-63163]:IfStatement[63104-63357]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62930-63163]:Block[63124-63357]"
    }, {
      "left" : "if (i < INT_SPACE)",
      "right" : "if (i < INT_SPACE)",
      "info" : "IfStatement[62952-63041]:IfStatement[63146-63235]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62971-63041]:Block[63165-63235]"
    }, {
      "left" : "_throwInvalidSpace(i);",
      "right" : "_throwInvalidSpace(i);",
      "info" : "ExpressionStatement[62997-63019]:ExpressionStatement[63191-63213]"
    }, {
      "left" : "_reportUnexpectedChar(i, \"was expecting a colon to separate field name and value\");",
      "right" : "_reportUnexpectedChar(i, \"was expecting a colon to separate field name and value\");",
      "info" : "ExpressionStatement[63062-63145]:ExpressionStatement[63256-63339]"
    }, {
      "left" : "gotColon = true;",
      "right" : "gotColon = true;",
      "info" : "ExpressionStatement[63180-63196]:ExpressionStatement[63374-63390]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[63213-63222]:ContinueStatement[63407-63416]"
    }, {
      "left" : "if (i < INT_SPACE)",
      "right" : "if (i < INT_SPACE)",
      "info" : "IfStatement[63249-63584]:IfStatement[63443-63778]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63268-63584]:Block[63462-63778]"
    }, {
      "left" : "if (i == INT_LF)",
      "right" : "if (i == INT_LF)",
      "info" : "IfStatement[63286-63570]:IfStatement[63480-63764]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63303-63411]:Block[63497-63605]"
    }, {
      "left" : "++_currInputRow;",
      "right" : "++_currInputRow;",
      "info" : "ExpressionStatement[63325-63341]:ExpressionStatement[63519-63535]"
    }, {
      "left" : "_currInputRowStart = _inputPtr;",
      "right" : "_currInputRowStart = _inputPtr;",
      "info" : "ExpressionStatement[63362-63393]:ExpressionStatement[63556-63587]"
    }, {
      "left" : "if (i == INT_CR)",
      "right" : "if (i == INT_CR)",
      "info" : "IfStatement[63417-63570]:IfStatement[63611-63764]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63434-63484]:Block[63628-63678]"
    }, {
      "left" : "_skipCR();",
      "right" : "_skipCR();",
      "info" : "ExpressionStatement[63456-63466]:ExpressionStatement[63650-63660]"
    }, {
      "left" : "if (i != INT_TAB)",
      "right" : "if (i != INT_TAB)",
      "info" : "IfStatement[63490-63570]:IfStatement[63684-63764]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63508-63570]:Block[63702-63764]"
    }, {
      "left" : "_throwInvalidSpace(i);",
      "right" : "_throwInvalidSpace(i);",
      "info" : "ExpressionStatement[63530-63552]:ExpressionStatement[63724-63746]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63718-64588]:Block[63912-64782]"
    }, {
      "left" : "if (i != INT_COMMA)",
      "right" : "if (i != INT_COMMA)",
      "info" : "IfStatement[63728-63874]:IfStatement[63922-64068]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63748-63874]:Block[63942-64068]"
    }, {
      "left" : "_reportUnexpectedChar(i, \"was expecting comma to separate \"+_parsingContext.getTypeDesc()+\" entries\");",
      "right" : "_reportUnexpectedChar(i, \"was expecting comma to separate \"+_parsingContext.getTypeDesc()+\" entries\");",
      "info" : "ExpressionStatement[63762-63864]:ExpressionStatement[63956-64058]"
    }, {
      "left" : "while (_inputPtr < _inputEnd)",
      "right" : "while (_inputPtr < _inputEnd)",
      "info" : "WhileStatement[63883-64547]:WhileStatement[64077-64741]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63913-64547]:Block[64107-64741]"
    }, {
      "left" : "i = (int) _inputBuffer[_inputPtr++];",
      "right" : "i = (int) _inputBuffer[_inputPtr++];",
      "info" : "ExpressionStatement[63927-63963]:ExpressionStatement[64121-64157]"
    }, {
      "left" : "if (i > INT_SPACE)",
      "right" : "if (i > INT_SPACE)",
      "info" : "IfStatement[63976-64189]:IfStatement[64170-64383]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63995-64189]:Block[64189-64383]"
    }, {
      "left" : "if (i == INT_SLASH || i == INT_HASH)",
      "right" : "if (i == INT_SLASH || i == INT_HASH)",
      "info" : "IfStatement[64013-64149]:IfStatement[64207-64343]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64050-64149]:Block[64244-64343]"
    }, {
      "left" : "--_inputPtr;",
      "right" : "--_inputPtr;",
      "info" : "ExpressionStatement[64072-64084]:ExpressionStatement[64266-64278]"
    }, {
      "left" : "return _skipAfterComma2();",
      "right" : "return _skipAfterComma2();",
      "info" : "ReturnStatement[64105-64131]:ReturnStatement[64299-64325]"
    }, {
      "left" : "return i;",
      "right" : "return i;",
      "info" : "ReturnStatement[64166-64175]:ReturnStatement[64360-64369]"
    }, {
      "left" : "if (i < INT_SPACE)",
      "right" : "if (i < INT_SPACE)",
      "info" : "IfStatement[64202-64537]:IfStatement[64396-64731]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64221-64537]:Block[64415-64731]"
    }, {
      "left" : "if (i == INT_LF)",
      "right" : "if (i == INT_LF)",
      "info" : "IfStatement[64239-64523]:IfStatement[64433-64717]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64256-64364]:Block[64450-64558]"
    }, {
      "left" : "++_currInputRow;",
      "right" : "++_currInputRow;",
      "info" : "ExpressionStatement[64278-64294]:ExpressionStatement[64472-64488]"
    }, {
      "left" : "_currInputRowStart = _inputPtr;",
      "right" : "_currInputRowStart = _inputPtr;",
      "info" : "ExpressionStatement[64315-64346]:ExpressionStatement[64509-64540]"
    }, {
      "left" : "if (i == INT_CR)",
      "right" : "if (i == INT_CR)",
      "info" : "IfStatement[64370-64523]:IfStatement[64564-64717]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64387-64437]:Block[64581-64631]"
    }, {
      "left" : "_skipCR();",
      "right" : "_skipCR();",
      "info" : "ExpressionStatement[64409-64419]:ExpressionStatement[64603-64613]"
    }, {
      "left" : "if (i != INT_TAB)",
      "right" : "if (i != INT_TAB)",
      "info" : "IfStatement[64443-64523]:IfStatement[64637-64717]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64461-64523]:Block[64655-64717]"
    }, {
      "left" : "_throwInvalidSpace(i);",
      "right" : "_throwInvalidSpace(i);",
      "info" : "ExpressionStatement[64483-64505]:ExpressionStatement[64677-64699]"
    }, {
      "left" : "return _skipAfterComma2();",
      "right" : "return _skipAfterComma2();",
      "info" : "ReturnStatement[64556-64582]:ReturnStatement[64750-64776]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64654-65593]:Block[64848-65787]"
    }, {
      "left" : "while (_inputPtr < _inputEnd || loadMore())",
      "right" : "while (_inputPtr < _inputEnd || loadMore())",
      "info" : "WhileStatement[64664-65472]:WhileStatement[64858-65666]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64708-65472]:Block[64902-65666]"
    }, {
      "left" : "int i = (int) _inputBuffer[_inputPtr++];",
      "right" : "int i = (int) _inputBuffer[_inputPtr++];",
      "info" : "VariableDeclarationStatement[64722-64762]:VariableDeclarationStatement[64916-64956]"
    }, {
      "left" : "if (i > INT_SPACE)",
      "right" : "if (i > INT_SPACE)",
      "info" : "IfStatement[64775-65114]:IfStatement[64969-65308]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64794-65114]:Block[64988-65308]"
    }, {
      "left" : "if (i == INT_SLASH)",
      "right" : "if (i == INT_SLASH)",
      "info" : "IfStatement[64812-64917]:IfStatement[65006-65111]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64832-64917]:Block[65026-65111]"
    }, {
      "left" : "_skipComment();",
      "right" : "_skipComment();",
      "info" : "ExpressionStatement[64854-64869]:ExpressionStatement[65048-65063]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[64890-64899]:ContinueStatement[65084-65093]"
    }, {
      "left" : "if (i == INT_HASH)",
      "right" : "if (i == INT_HASH)",
      "info" : "IfStatement[64934-65074]:IfStatement[65128-65268]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64953-65074]:Block[65147-65268]"
    }, {
      "left" : "if (_skipYAMLComment())",
      "right" : "if (_skipYAMLComment())",
      "info" : "IfStatement[64975-65056]:IfStatement[65169-65250]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64999-65056]:Block[65193-65250]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[65025-65034]:ContinueStatement[65219-65228]"
    }, {
      "left" : "return i;",
      "right" : "return i;",
      "info" : "ReturnStatement[65091-65100]:ReturnStatement[65285-65294]"
    }, {
      "left" : "if (i < INT_SPACE)",
      "right" : "if (i < INT_SPACE)",
      "info" : "IfStatement[65127-65462]:IfStatement[65321-65656]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65146-65462]:Block[65340-65656]"
    }, {
      "left" : "if (i == INT_LF)",
      "right" : "if (i == INT_LF)",
      "info" : "IfStatement[65164-65448]:IfStatement[65358-65642]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65181-65289]:Block[65375-65483]"
    }, {
      "left" : "++_currInputRow;",
      "right" : "++_currInputRow;",
      "info" : "ExpressionStatement[65203-65219]:ExpressionStatement[65397-65413]"
    }, {
      "left" : "_currInputRowStart = _inputPtr;",
      "right" : "_currInputRowStart = _inputPtr;",
      "info" : "ExpressionStatement[65240-65271]:ExpressionStatement[65434-65465]"
    }, {
      "left" : "if (i == INT_CR)",
      "right" : "if (i == INT_CR)",
      "info" : "IfStatement[65295-65448]:IfStatement[65489-65642]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65312-65362]:Block[65506-65556]"
    }, {
      "left" : "_skipCR();",
      "right" : "_skipCR();",
      "info" : "ExpressionStatement[65334-65344]:ExpressionStatement[65528-65538]"
    }, {
      "left" : "if (i != INT_TAB)",
      "right" : "if (i != INT_TAB)",
      "info" : "IfStatement[65368-65448]:IfStatement[65562-65642]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65386-65448]:Block[65580-65642]"
    }, {
      "left" : "_throwInvalidSpace(i);",
      "right" : "_throwInvalidSpace(i);",
      "info" : "ExpressionStatement[65408-65430]:ExpressionStatement[65602-65624]"
    }, {
      "left" : "throw _constructError(\"Unexpected end-of-input within/between \"+_parsingContext.getTypeDesc()+\" entries\");",
      "right" : "throw _constructError(\"Unexpected end-of-input within/between \"+_parsingContext.getTypeDesc()+\" entries\");",
      "info" : "ThrowStatement[65481-65587]:ThrowStatement[65675-65781]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65659-67211]:Block[65853-67405]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[65821-65946]:IfStatement[66015-66140]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65849-65946]:Block[66043-66140]"
    }, {
      "left" : "if (!loadMore())",
      "right" : "if (!loadMore())",
      "info" : "IfStatement[65863-65936]:IfStatement[66057-66130]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65880-65936]:Block[66074-66130]"
    }, {
      "left" : "return _eofAsNextChar();",
      "right" : "return _eofAsNextChar();",
      "info" : "ReturnStatement[65898-65922]:ReturnStatement[66092-66116]"
    }, {
      "left" : "int i = _inputBuffer[_inputPtr++];",
      "right" : "int i = _inputBuffer[_inputPtr++];",
      "info" : "VariableDeclarationStatement[65955-65989]:VariableDeclarationStatement[66149-66183]"
    }, {
      "left" : "if (i > INT_SPACE)",
      "right" : "if (i > INT_SPACE)",
      "info" : "IfStatement[65998-66184]:IfStatement[66192-66378]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66017-66184]:Block[66211-66378]"
    }, {
      "left" : "if (i == INT_SLASH || i == INT_HASH)",
      "right" : "if (i == INT_SLASH || i == INT_HASH)",
      "info" : "IfStatement[66031-66152]:IfStatement[66225-66346]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66068-66152]:Block[66262-66346]"
    }, {
      "left" : "--_inputPtr;",
      "right" : "--_inputPtr;",
      "info" : "ExpressionStatement[66086-66098]:ExpressionStatement[66280-66292]"
    }, {
      "left" : "return _skipWSOrEnd2();",
      "right" : "return _skipWSOrEnd2();",
      "info" : "ReturnStatement[66115-66138]:ReturnStatement[66309-66332]"
    }, {
      "left" : "return i;",
      "right" : "return i;",
      "info" : "ReturnStatement[66165-66174]:ReturnStatement[66359-66368]"
    }, {
      "left" : "if (i != INT_SPACE)",
      "right" : "if (i != INT_SPACE)",
      "info" : "IfStatement[66193-66493]:IfStatement[66387-66687]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66213-66493]:Block[66407-66687]"
    }, {
      "left" : "if (i == INT_LF)",
      "right" : "if (i == INT_LF)",
      "info" : "IfStatement[66227-66483]:IfStatement[66421-66677]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66244-66340]:Block[66438-66534]"
    }, {
      "left" : "++_currInputRow;",
      "right" : "++_currInputRow;",
      "info" : "ExpressionStatement[66262-66278]:ExpressionStatement[66456-66472]"
    }, {
      "left" : "_currInputRowStart = _inputPtr;",
      "right" : "_currInputRowStart = _inputPtr;",
      "info" : "ExpressionStatement[66295-66326]:ExpressionStatement[66489-66520]"
    }, {
      "left" : "if (i == INT_CR)",
      "right" : "if (i == INT_CR)",
      "info" : "IfStatement[66346-66483]:IfStatement[66540-66677]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66363-66405]:Block[66557-66599]"
    }, {
      "left" : "_skipCR();",
      "right" : "_skipCR();",
      "info" : "ExpressionStatement[66381-66391]:ExpressionStatement[66575-66585]"
    }, {
      "left" : "if (i != INT_TAB)",
      "right" : "if (i != INT_TAB)",
      "info" : "IfStatement[66411-66483]:IfStatement[66605-66677]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66429-66483]:Block[66623-66677]"
    }, {
      "left" : "_throwInvalidSpace(i);",
      "right" : "_throwInvalidSpace(i);",
      "info" : "ExpressionStatement[66447-66469]:ExpressionStatement[66641-66663]"
    }, {
      "left" : "while (_inputPtr < _inputEnd)",
      "right" : "while (_inputPtr < _inputEnd)",
      "info" : "WhileStatement[66511-67173]:WhileStatement[66705-67367]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66541-67173]:Block[66735-67367]"
    }, {
      "left" : "i = (int) _inputBuffer[_inputPtr++];",
      "right" : "i = (int) _inputBuffer[_inputPtr++];",
      "info" : "ExpressionStatement[66555-66591]:ExpressionStatement[66749-66785]"
    }, {
      "left" : "if (i > INT_SPACE)",
      "right" : "if (i > INT_SPACE)",
      "info" : "IfStatement[66604-66814]:IfStatement[66798-67008]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66623-66814]:Block[66817-67008]"
    }, {
      "left" : "if (i == INT_SLASH || i == INT_HASH)",
      "right" : "if (i == INT_SLASH || i == INT_HASH)",
      "info" : "IfStatement[66641-66774]:IfStatement[66835-66968]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66678-66774]:Block[66872-66968]"
    }, {
      "left" : "--_inputPtr;",
      "right" : "--_inputPtr;",
      "info" : "ExpressionStatement[66700-66712]:ExpressionStatement[66894-66906]"
    }, {
      "left" : "return _skipWSOrEnd2();",
      "right" : "return _skipWSOrEnd2();",
      "info" : "ReturnStatement[66733-66756]:ReturnStatement[66927-66950]"
    }, {
      "left" : "return i;",
      "right" : "return i;",
      "info" : "ReturnStatement[66791-66800]:ReturnStatement[66985-66994]"
    }, {
      "left" : "if (i != INT_SPACE)",
      "right" : "if (i != INT_SPACE)",
      "info" : "IfStatement[66827-67163]:IfStatement[67021-67357]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66847-67163]:Block[67041-67357]"
    }, {
      "left" : "if (i == INT_LF)",
      "right" : "if (i == INT_LF)",
      "info" : "IfStatement[66865-67149]:IfStatement[67059-67343]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66882-66990]:Block[67076-67184]"
    }, {
      "left" : "++_currInputRow;",
      "right" : "++_currInputRow;",
      "info" : "ExpressionStatement[66904-66920]:ExpressionStatement[67098-67114]"
    }, {
      "left" : "_currInputRowStart = _inputPtr;",
      "right" : "_currInputRowStart = _inputPtr;",
      "info" : "ExpressionStatement[66941-66972]:ExpressionStatement[67135-67166]"
    }, {
      "left" : "if (i == INT_CR)",
      "right" : "if (i == INT_CR)",
      "info" : "IfStatement[66996-67149]:IfStatement[67190-67343]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67013-67063]:Block[67207-67257]"
    }, {
      "left" : "_skipCR();",
      "right" : "_skipCR();",
      "info" : "ExpressionStatement[67035-67045]:ExpressionStatement[67229-67239]"
    }, {
      "left" : "if (i != INT_TAB)",
      "right" : "if (i != INT_TAB)",
      "info" : "IfStatement[67069-67149]:IfStatement[67263-67343]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67087-67149]:Block[67281-67343]"
    }, {
      "left" : "_throwInvalidSpace(i);",
      "right" : "_throwInvalidSpace(i);",
      "info" : "ExpressionStatement[67109-67131]:ExpressionStatement[67303-67325]"
    }, {
      "left" : "return _skipWSOrEnd2();",
      "right" : "return _skipWSOrEnd2();",
      "info" : "ReturnStatement[67182-67205]:ReturnStatement[67376-67399]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67268-68235]:Block[67462-68429]"
    }, {
      "left" : "while (true)",
      "right" : "while (true)",
      "info" : "WhileStatement[67278-68229]:WhileStatement[67472-68423]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67291-68229]:Block[67485-68423]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[67305-67472]:IfStatement[67499-67666]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67333-67472]:Block[67527-67666]"
    }, {
      "left" : "if (!loadMore())",
      "right" : "if (!loadMore())",
      "info" : "IfStatement[67351-67458]:IfStatement[67545-67652]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67368-67458]:Block[67562-67652]"
    }, {
      "left" : "return _eofAsNextChar();",
      "right" : "return _eofAsNextChar();",
      "info" : "ReturnStatement[67416-67440]:ReturnStatement[67610-67634]"
    }, {
      "left" : "int i = (int) _inputBuffer[_inputPtr++];",
      "right" : "int i = (int) _inputBuffer[_inputPtr++];",
      "info" : "VariableDeclarationStatement[67485-67525]:VariableDeclarationStatement[67679-67719]"
    }, {
      "left" : "if (i > INT_SPACE)",
      "right" : "if (i > INT_SPACE)",
      "info" : "IfStatement[67538-68219]:IfStatement[67732-68413]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67557-67877]:Block[67751-68071]"
    }, {
      "left" : "if (i == INT_SLASH)",
      "right" : "if (i == INT_SLASH)",
      "info" : "IfStatement[67575-67680]:IfStatement[67769-67874]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67595-67680]:Block[67789-67874]"
    }, {
      "left" : "_skipComment();",
      "right" : "_skipComment();",
      "info" : "ExpressionStatement[67617-67632]:ExpressionStatement[67811-67826]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[67653-67662]:ContinueStatement[67847-67856]"
    }, {
      "left" : "if (i == INT_HASH)",
      "right" : "if (i == INT_HASH)",
      "info" : "IfStatement[67697-67837]:IfStatement[67891-68031]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67716-67837]:Block[67910-68031]"
    }, {
      "left" : "if (_skipYAMLComment())",
      "right" : "if (_skipYAMLComment())",
      "info" : "IfStatement[67738-67819]:IfStatement[67932-68013]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67762-67819]:Block[67956-68013]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[67788-67797]:ContinueStatement[67982-67991]"
    }, {
      "left" : "return i;",
      "right" : "return i;",
      "info" : "ReturnStatement[67854-67863]:ReturnStatement[68048-68057]"
    }, {
      "left" : "if (i != INT_SPACE)",
      "right" : "if (i != INT_SPACE)",
      "info" : "IfStatement[67883-68219]:IfStatement[68077-68413]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67903-68219]:Block[68097-68413]"
    }, {
      "left" : "if (i == INT_LF)",
      "right" : "if (i == INT_LF)",
      "info" : "IfStatement[67921-68205]:IfStatement[68115-68399]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67938-68046]:Block[68132-68240]"
    }, {
      "left" : "++_currInputRow;",
      "right" : "++_currInputRow;",
      "info" : "ExpressionStatement[67960-67976]:ExpressionStatement[68154-68170]"
    }, {
      "left" : "_currInputRowStart = _inputPtr;",
      "right" : "_currInputRowStart = _inputPtr;",
      "info" : "ExpressionStatement[67997-68028]:ExpressionStatement[68191-68222]"
    }, {
      "left" : "if (i == INT_CR)",
      "right" : "if (i == INT_CR)",
      "info" : "IfStatement[68052-68205]:IfStatement[68246-68399]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[68069-68119]:Block[68263-68313]"
    }, {
      "left" : "_skipCR();",
      "right" : "_skipCR();",
      "info" : "ExpressionStatement[68091-68101]:ExpressionStatement[68285-68295]"
    }, {
      "left" : "if (i != INT_TAB)",
      "right" : "if (i != INT_TAB)",
      "info" : "IfStatement[68125-68205]:IfStatement[68319-68399]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[68143-68205]:Block[68337-68399]"
    }, {
      "left" : "_throwInvalidSpace(i);",
      "right" : "_throwInvalidSpace(i);",
      "info" : "ExpressionStatement[68165-68187]:ExpressionStatement[68359-68381]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[68296-68951]:Block[68490-69145]"
    }, {
      "left" : "if (!isEnabled(Feature.ALLOW_COMMENTS))",
      "right" : "if (!isEnabled(Feature.ALLOW_COMMENTS))",
      "info" : "IfStatement[68306-68510]:IfStatement[68500-68704]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[68346-68510]:Block[68540-68704]"
    }, {
      "left" : "_reportUnexpectedChar('/', \"maybe a (non-standard) comment? (not recognized as one since Feature 'ALLOW_COMMENTS' not enabled for parser)\");",
      "right" : "_reportUnexpectedChar('/', \"maybe a (non-standard) comment? (not recognized as one since Feature 'ALLOW_COMMENTS' not enabled for parser)\");",
      "info" : "ExpressionStatement[68360-68500]:ExpressionStatement[68554-68694]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd && !loadMore())",
      "right" : "if (_inputPtr >= _inputEnd && !loadMore())",
      "info" : "IfStatement[68576-68678]:IfStatement[68770-68872]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[68619-68678]:Block[68813-68872]"
    }, {
      "left" : "_reportInvalidEOF(\" in a comment\");",
      "right" : "_reportInvalidEOF(\" in a comment\");",
      "info" : "ExpressionStatement[68633-68668]:ExpressionStatement[68827-68862]"
    }, {
      "left" : "char c = _inputBuffer[_inputPtr++];",
      "right" : "char c = _inputBuffer[_inputPtr++];",
      "info" : "VariableDeclarationStatement[68687-68722]:VariableDeclarationStatement[68881-68916]"
    }, {
      "left" : "if (c == '/')",
      "right" : "if (c == '/')",
      "info" : "IfStatement[68731-68945]:IfStatement[68925-69139]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[68745-68781]:Block[68939-68975]"
    }, {
      "left" : "_skipLine();",
      "right" : "_skipLine();",
      "info" : "ExpressionStatement[68759-68771]:ExpressionStatement[68953-68965]"
    }, {
      "left" : "if (c == '*')",
      "right" : "if (c == '*')",
      "info" : "IfStatement[68787-68945]:IfStatement[68981-69139]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[68801-68841]:Block[68995-69035]"
    }, {
      "left" : "_skipCComment();",
      "right" : "_skipCComment();",
      "info" : "ExpressionStatement[68815-68831]:ExpressionStatement[69009-69025]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[68847-68945]:Block[69041-69139]"
    }, {
      "left" : "_reportUnexpectedChar(c, \"was expecting either '*' or '/' for a comment\");",
      "right" : "_reportUnexpectedChar(c, \"was expecting either '*' or '/' for a comment\");",
      "info" : "ExpressionStatement[68861-68935]:ExpressionStatement[69055-69129]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[69009-70010]:Block[69203-70204]"
    }, {
      "left" : "while ((_inputPtr < _inputEnd) || loadMore())",
      "right" : "while ((_inputPtr < _inputEnd) || loadMore())",
      "info" : "WhileStatement[69057-69960]:WhileStatement[69251-70154]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[69103-69960]:Block[69297-70154]"
    }, {
      "left" : "int i = (int) _inputBuffer[_inputPtr++];",
      "right" : "int i = (int) _inputBuffer[_inputPtr++];",
      "info" : "VariableDeclarationStatement[69117-69157]:VariableDeclarationStatement[69311-69351]"
    }, {
      "left" : "if (i <= '*')",
      "right" : "if (i <= '*')",
      "info" : "IfStatement[69170-69950]:IfStatement[69364-70144]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[69184-69950]:Block[69378-70144]"
    }, {
      "left" : "if (i == '*')",
      "right" : "if (i == '*')",
      "info" : "IfStatement[69202-69548]:IfStatement[69396-69742]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[69216-69548]:Block[69410-69742]"
    }, {
      "left" : "if ((_inputPtr >= _inputEnd) && !loadMore())",
      "right" : "if ((_inputPtr >= _inputEnd) && !loadMore())",
      "info" : "IfStatement[69246-69345]:IfStatement[69440-69539]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[69291-69345]:Block[69485-69539]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[69317-69323]:BreakStatement[69511-69517]"
    }, {
      "left" : "if (_inputBuffer[_inputPtr] == INT_SLASH)",
      "right" : "if (_inputBuffer[_inputPtr] == INT_SLASH)",
      "info" : "IfStatement[69366-69500]:IfStatement[69560-69694]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[69408-69500]:Block[69602-69694]"
    }, {
      "left" : "++_inputPtr;",
      "right" : "++_inputPtr;",
      "info" : "ExpressionStatement[69434-69446]:ExpressionStatement[69628-69640]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[69471-69478]:ReturnStatement[69665-69672]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[69521-69530]:ContinueStatement[69715-69724]"
    }, {
      "left" : "if (i < INT_SPACE)",
      "right" : "if (i < INT_SPACE)",
      "info" : "IfStatement[69565-69936]:IfStatement[69759-70130]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[69584-69936]:Block[69778-70130]"
    }, {
      "left" : "if (i == INT_LF)",
      "right" : "if (i == INT_LF)",
      "info" : "IfStatement[69606-69918]:IfStatement[69800-70112]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[69623-69743]:Block[69817-69937]"
    }, {
      "left" : "++_currInputRow;",
      "right" : "++_currInputRow;",
      "info" : "ExpressionStatement[69649-69665]:ExpressionStatement[69843-69859]"
    }, {
      "left" : "_currInputRowStart = _inputPtr;",
      "right" : "_currInputRowStart = _inputPtr;",
      "info" : "ExpressionStatement[69690-69721]:ExpressionStatement[69884-69915]"
    }, {
      "left" : "if (i == INT_CR)",
      "right" : "if (i == INT_CR)",
      "info" : "IfStatement[69749-69918]:IfStatement[69943-70112]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[69766-69824]:Block[69960-70018]"
    }, {
      "left" : "_skipCR();",
      "right" : "_skipCR();",
      "info" : "ExpressionStatement[69792-69802]:ExpressionStatement[69986-69996]"
    }, {
      "left" : "if (i != INT_TAB)",
      "right" : "if (i != INT_TAB)",
      "info" : "IfStatement[69830-69918]:IfStatement[70024-70112]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[69848-69918]:Block[70042-70112]"
    }, {
      "left" : "_throwInvalidSpace(i);",
      "right" : "_throwInvalidSpace(i);",
      "info" : "ExpressionStatement[69874-69896]:ExpressionStatement[70068-70090]"
    }, {
      "left" : "_reportInvalidEOF(\" in a comment\");",
      "right" : "_reportInvalidEOF(\" in a comment\");",
      "info" : "ExpressionStatement[69969-70004]:ExpressionStatement[70163-70198]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[70074-70214]:Block[70268-70408]"
    }, {
      "left" : "if (!isEnabled(Feature.ALLOW_YAML_COMMENTS))",
      "right" : "if (!isEnabled(Feature.ALLOW_YAML_COMMENTS))",
      "info" : "IfStatement[70084-70166]:IfStatement[70278-70360]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[70129-70166]:Block[70323-70360]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[70143-70156]:ReturnStatement[70337-70350]"
    }, {
      "left" : "_skipLine();",
      "right" : "_skipLine();",
      "info" : "ExpressionStatement[70175-70187]:ExpressionStatement[70369-70381]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[70196-70208]:ReturnStatement[70390-70402]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[70272-70844]:Block[70466-71038]"
    }, {
      "left" : "while ((_inputPtr < _inputEnd) || loadMore())",
      "right" : "while ((_inputPtr < _inputEnd) || loadMore())",
      "info" : "WhileStatement[70326-70838]:WhileStatement[70520-71032]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[70372-70838]:Block[70566-71032]"
    }, {
      "left" : "int i = (int) _inputBuffer[_inputPtr++];",
      "right" : "int i = (int) _inputBuffer[_inputPtr++];",
      "info" : "VariableDeclarationStatement[70386-70426]:VariableDeclarationStatement[70580-70620]"
    }, {
      "left" : "if (i < INT_SPACE)",
      "right" : "if (i < INT_SPACE)",
      "info" : "IfStatement[70439-70828]:IfStatement[70633-71022]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[70458-70828]:Block[70652-71022]"
    }, {
      "left" : "if (i == INT_LF)",
      "right" : "if (i == INT_LF)",
      "info" : "IfStatement[70476-70814]:IfStatement[70670-71008]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[70493-70628]:Block[70687-70822]"
    }, {
      "left" : "++_currInputRow;",
      "right" : "++_currInputRow;",
      "info" : "ExpressionStatement[70515-70531]:ExpressionStatement[70709-70725]"
    }, {
      "left" : "_currInputRowStart = _inputPtr;",
      "right" : "_currInputRowStart = _inputPtr;",
      "info" : "ExpressionStatement[70552-70583]:ExpressionStatement[70746-70777]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[70604-70610]:BreakStatement[70798-70804]"
    }, {
      "left" : "if (i == INT_CR)",
      "right" : "if (i == INT_CR)",
      "info" : "IfStatement[70634-70814]:IfStatement[70828-71008]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[70651-70728]:Block[70845-70922]"
    }, {
      "left" : "_skipCR();",
      "right" : "_skipCR();",
      "info" : "ExpressionStatement[70673-70683]:ExpressionStatement[70867-70877]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[70704-70710]:BreakStatement[70898-70904]"
    }, {
      "left" : "if (i != INT_TAB)",
      "right" : "if (i != INT_TAB)",
      "info" : "IfStatement[70734-70814]:IfStatement[70928-71008]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[70752-70814]:Block[70946-71008]"
    }, {
      "left" : "_throwInvalidSpace(i);",
      "right" : "_throwInvalidSpace(i);",
      "info" : "ExpressionStatement[70774-70796]:ExpressionStatement[70968-70990]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[70919-72316]:Block[71113-72510]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[70929-71081]:IfStatement[71123-71275]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[70957-71081]:Block[71151-71275]"
    }, {
      "left" : "if (!loadMore())",
      "right" : "if (!loadMore())",
      "info" : "IfStatement[70971-71071]:IfStatement[71165-71265]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[70988-71071]:Block[71182-71265]"
    }, {
      "left" : "_reportInvalidEOF(\" in character escape sequence\");",
      "right" : "_reportInvalidEOF(\" in character escape sequence\");",
      "info" : "ExpressionStatement[71006-71057]:ExpressionStatement[71200-71251]"
    }, {
      "left" : "char c = _inputBuffer[_inputPtr++];",
      "right" : "char c = _inputBuffer[_inputPtr++];",
      "info" : "VariableDeclarationStatement[71090-71125]:VariableDeclarationStatement[71284-71319]"
    }, {
      "left" : "switch ((int) c) {\n            // First, ones that are mapped\n        case 'b':\n            return '\\b';\n        case 't':\n            return '\\t';\n        case 'n':\n            return '\\n';\n        case 'f':\n            return '\\f';\n        case 'r':\n            return '\\r';\n\n            // And these are to be returned as they are\n        case '\"':\n        case '/':\n        case '\\\\':\n            return c;\n\n        case 'u': // and finally hex-escaped\n            break;\n\n        default:\n            return _handleUnrecognizedCharacterEscape(c);\n        }",
      "right" : "switch ((int) c) {\n            // First, ones that are mapped\n        case 'b':\n            return '\\b';\n        case 't':\n            return '\\t';\n        case 'n':\n            return '\\n';\n        case 'f':\n            return '\\f';\n        case 'r':\n            return '\\r';\n\n            // And these are to be returned as they are\n        case '\"':\n        case '/':\n        case '\\\\':\n            return c;\n\n        case 'u': // and finally hex-escaped\n            break;\n\n        default:\n            return _handleUnrecognizedCharacterEscape(c);\n        }",
      "info" : "SwitchStatement[71135-71696]:SwitchStatement[71329-71890]"
    }, {
      "left" : "case 'b':",
      "right" : "case 'b':",
      "info" : "SwitchCase[71205-71214]:SwitchCase[71399-71408]"
    }, {
      "left" : "return '\\b';",
      "right" : "return '\\b';",
      "info" : "ReturnStatement[71227-71239]:ReturnStatement[71421-71433]"
    }, {
      "left" : "case 't':",
      "right" : "case 't':",
      "info" : "SwitchCase[71248-71257]:SwitchCase[71442-71451]"
    }, {
      "left" : "return '\\t';",
      "right" : "return '\\t';",
      "info" : "ReturnStatement[71270-71282]:ReturnStatement[71464-71476]"
    }, {
      "left" : "case 'n':",
      "right" : "case 'n':",
      "info" : "SwitchCase[71291-71300]:SwitchCase[71485-71494]"
    }, {
      "left" : "return '\\n';",
      "right" : "return '\\n';",
      "info" : "ReturnStatement[71313-71325]:ReturnStatement[71507-71519]"
    }, {
      "left" : "case 'f':",
      "right" : "case 'f':",
      "info" : "SwitchCase[71334-71343]:SwitchCase[71528-71537]"
    }, {
      "left" : "return '\\f';",
      "right" : "return '\\f';",
      "info" : "ReturnStatement[71356-71368]:ReturnStatement[71550-71562]"
    }, {
      "left" : "case 'r':",
      "right" : "case 'r':",
      "info" : "SwitchCase[71377-71386]:SwitchCase[71571-71580]"
    }, {
      "left" : "return '\\r';",
      "right" : "return '\\r';",
      "info" : "ReturnStatement[71399-71411]:ReturnStatement[71593-71605]"
    }, {
      "left" : "case '\"':",
      "right" : "case '\"':",
      "info" : "SwitchCase[71477-71486]:SwitchCase[71671-71680]"
    }, {
      "left" : "case '/':",
      "right" : "case '/':",
      "info" : "SwitchCase[71495-71504]:SwitchCase[71689-71698]"
    }, {
      "left" : "case '\\\\':",
      "right" : "case '\\\\':",
      "info" : "SwitchCase[71513-71523]:SwitchCase[71707-71717]"
    }, {
      "left" : "return c;",
      "right" : "return c;",
      "info" : "ReturnStatement[71536-71545]:ReturnStatement[71730-71739]"
    }, {
      "left" : "case 'u':",
      "right" : "case 'u':",
      "info" : "SwitchCase[71555-71564]:SwitchCase[71749-71758]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[71604-71610]:BreakStatement[71798-71804]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[71620-71628]:SwitchCase[71814-71822]"
    }, {
      "left" : "return _handleUnrecognizedCharacterEscape(c);",
      "right" : "return _handleUnrecognizedCharacterEscape(c);",
      "info" : "ReturnStatement[71641-71686]:ReturnStatement[71835-71880]"
    }, {
      "left" : "int value = 0;",
      "right" : "int value = 0;",
      "info" : "VariableDeclarationStatement[71753-71767]:VariableDeclarationStatement[71947-71961]"
    }, {
      "left" : "for (int i = 0; i < 4; ++i)",
      "right" : "for (int i = 0; i < 4; ++i)",
      "info" : "ForStatement[71776-72281]:ForStatement[71970-72475]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[71804-72281]:Block[71998-72475]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[71818-71986]:IfStatement[72012-72180]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[71846-71986]:Block[72040-72180]"
    }, {
      "left" : "if (!loadMore())",
      "right" : "if (!loadMore())",
      "info" : "IfStatement[71864-71972]:IfStatement[72058-72166]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[71881-71972]:Block[72075-72166]"
    }, {
      "left" : "_reportInvalidEOF(\" in character escape sequence\");",
      "right" : "_reportInvalidEOF(\" in character escape sequence\");",
      "info" : "ExpressionStatement[71903-71954]:ExpressionStatement[72097-72148]"
    }, {
      "left" : "int ch = (int) _inputBuffer[_inputPtr++];",
      "right" : "int ch = (int) _inputBuffer[_inputPtr++];",
      "info" : "VariableDeclarationStatement[71999-72040]:VariableDeclarationStatement[72193-72234]"
    }, {
      "left" : "int digit = CharTypes.charToHex(ch);",
      "right" : "int digit = CharTypes.charToHex(ch);",
      "info" : "VariableDeclarationStatement[72053-72089]:VariableDeclarationStatement[72247-72283]"
    }, {
      "left" : "if (digit < 0)",
      "right" : "if (digit < 0)",
      "info" : "IfStatement[72102-72229]:IfStatement[72296-72423]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[72117-72229]:Block[72311-72423]"
    }, {
      "left" : "_reportUnexpectedChar(ch, \"expected a hex-digit for character escape sequence\");",
      "right" : "_reportUnexpectedChar(ch, \"expected a hex-digit for character escape sequence\");",
      "info" : "ExpressionStatement[72135-72215]:ExpressionStatement[72329-72409]"
    }, {
      "left" : "value = (value << 4) | digit;",
      "right" : "value = (value << 4) | digit;",
      "info" : "ExpressionStatement[72242-72271]:ExpressionStatement[72436-72465]"
    }, {
      "left" : "return (char) value;",
      "right" : "return (char) value;",
      "info" : "ReturnStatement[72290-72310]:ReturnStatement[72484-72504]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[72377-72867]:Block[72571-73061]"
    }, {
      "left" : "int ptr = _inputPtr;",
      "right" : "int ptr = _inputPtr;",
      "info" : "VariableDeclarationStatement[72387-72407]:VariableDeclarationStatement[72581-72601]"
    }, {
      "left" : "if ((ptr + 3) < _inputEnd)",
      "right" : "if ((ptr + 3) < _inputEnd)",
      "info" : "IfStatement[72416-72781]:IfStatement[72610-72975]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[72443-72781]:Block[72637-72975]"
    }, {
      "left" : "final char[] b = _inputBuffer;",
      "right" : "final char[] b = _inputBuffer;",
      "info" : "VariableDeclarationStatement[72457-72487]:VariableDeclarationStatement[72651-72681]"
    }, {
      "left" : "if (b[ptr] == 'r' && b[++ptr] == 'u' && b[++ptr] == 'e')",
      "right" : "if (b[ptr] == 'r' && b[++ptr] == 'u' && b[++ptr] == 'e')",
      "info" : "IfStatement[72500-72771]:IfStatement[72694-72965]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[72557-72771]:Block[72751-72965]"
    }, {
      "left" : "char c = b[++ptr];",
      "right" : "char c = b[++ptr];",
      "info" : "VariableDeclarationStatement[72575-72593]:VariableDeclarationStatement[72769-72787]"
    }, {
      "left" : "if (c < '0' || c == ']' || c == '}')",
      "right" : "if (c < '0' || c == ']' || c == '}')",
      "info" : "IfStatement[72610-72757]:IfStatement[72804-72951]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[72647-72757]:Block[72841-72951]"
    }, {
      "left" : "_inputPtr = ptr;",
      "right" : "_inputPtr = ptr;",
      "info" : "ExpressionStatement[72695-72711]:ExpressionStatement[72889-72905]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[72732-72739]:ReturnStatement[72926-72933]"
    }, {
      "left" : "_matchToken(\"true\", 1);",
      "right" : "_matchToken(\"true\", 1);",
      "info" : "ExpressionStatement[72838-72861]:ExpressionStatement[73032-73055]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[72925-73435]:Block[73119-73629]"
    }, {
      "left" : "int ptr = _inputPtr;",
      "right" : "int ptr = _inputPtr;",
      "info" : "VariableDeclarationStatement[72935-72955]:VariableDeclarationStatement[73129-73149]"
    }, {
      "left" : "if ((ptr + 4) < _inputEnd)",
      "right" : "if ((ptr + 4) < _inputEnd)",
      "info" : "IfStatement[72964-73348]:IfStatement[73158-73542]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[72991-73348]:Block[73185-73542]"
    }, {
      "left" : "final char[] b = _inputBuffer;",
      "right" : "final char[] b = _inputBuffer;",
      "info" : "VariableDeclarationStatement[73005-73035]:VariableDeclarationStatement[73199-73229]"
    }, {
      "left" : "if (b[ptr] == 'a' && b[++ptr] == 'l' && b[++ptr] == 's' && b[++ptr] == 'e')",
      "right" : "if (b[ptr] == 'a' && b[++ptr] == 'l' && b[++ptr] == 's' && b[++ptr] == 'e')",
      "info" : "IfStatement[73048-73338]:IfStatement[73242-73532]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[73124-73338]:Block[73318-73532]"
    }, {
      "left" : "char c = b[++ptr];",
      "right" : "char c = b[++ptr];",
      "info" : "VariableDeclarationStatement[73142-73160]:VariableDeclarationStatement[73336-73354]"
    }, {
      "left" : "if (c < '0' || c == ']' || c == '}')",
      "right" : "if (c < '0' || c == ']' || c == '}')",
      "info" : "IfStatement[73177-73324]:IfStatement[73371-73518]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[73214-73324]:Block[73408-73518]"
    }, {
      "left" : "_inputPtr = ptr;",
      "right" : "_inputPtr = ptr;",
      "info" : "ExpressionStatement[73262-73278]:ExpressionStatement[73456-73472]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[73299-73306]:ReturnStatement[73493-73500]"
    }, {
      "left" : "_matchToken(\"false\", 1);",
      "right" : "_matchToken(\"false\", 1);",
      "info" : "ExpressionStatement[73405-73429]:ExpressionStatement[73599-73623]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[73492-73982]:Block[73686-74176]"
    }, {
      "left" : "int ptr = _inputPtr;",
      "right" : "int ptr = _inputPtr;",
      "info" : "VariableDeclarationStatement[73502-73522]:VariableDeclarationStatement[73696-73716]"
    }, {
      "left" : "if ((ptr + 3) < _inputEnd)",
      "right" : "if ((ptr + 3) < _inputEnd)",
      "info" : "IfStatement[73531-73896]:IfStatement[73725-74090]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[73558-73896]:Block[73752-74090]"
    }, {
      "left" : "final char[] b = _inputBuffer;",
      "right" : "final char[] b = _inputBuffer;",
      "info" : "VariableDeclarationStatement[73572-73602]:VariableDeclarationStatement[73766-73796]"
    }, {
      "left" : "if (b[ptr] == 'u' && b[++ptr] == 'l' && b[++ptr] == 'l')",
      "right" : "if (b[ptr] == 'u' && b[++ptr] == 'l' && b[++ptr] == 'l')",
      "info" : "IfStatement[73615-73886]:IfStatement[73809-74080]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[73672-73886]:Block[73866-74080]"
    }, {
      "left" : "char c = b[++ptr];",
      "right" : "char c = b[++ptr];",
      "info" : "VariableDeclarationStatement[73690-73708]:VariableDeclarationStatement[73884-73902]"
    }, {
      "left" : "if (c < '0' || c == ']' || c == '}')",
      "right" : "if (c < '0' || c == ']' || c == '}')",
      "info" : "IfStatement[73725-73872]:IfStatement[73919-74066]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[73762-73872]:Block[73956-74066]"
    }, {
      "left" : "_inputPtr = ptr;",
      "right" : "_inputPtr = ptr;",
      "info" : "ExpressionStatement[73810-73826]:ExpressionStatement[74004-74020]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[73847-73854]:ReturnStatement[74041-74048]"
    }, {
      "left" : "_matchToken(\"null\", 1);",
      "right" : "_matchToken(\"null\", 1);",
      "info" : "ExpressionStatement[73953-73976]:ExpressionStatement[74147-74170]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[74155-75110]:Block[74349-75304]"
    }, {
      "left" : "final int len = matchStr.length();",
      "right" : "final int len = matchStr.length();",
      "info" : "VariableDeclarationStatement[74165-74199]:VariableDeclarationStatement[74359-74393]"
    }, {
      "left" : "do{...}",
      "right" : "do{...}",
      "info" : "DoStatement[74209-74585]:DoStatement[74403-74779]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[74212-74566]:Block[74406-74760]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[74226-74389]:IfStatement[74420-74583]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[74254-74389]:Block[74448-74583]"
    }, {
      "left" : "if (!loadMore())",
      "right" : "if (!loadMore())",
      "info" : "IfStatement[74272-74375]:IfStatement[74466-74569]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[74289-74375]:Block[74483-74569]"
    }, {
      "left" : "_reportInvalidToken(matchStr.substring(0, i));",
      "right" : "_reportInvalidToken(matchStr.substring(0, i));",
      "info" : "ExpressionStatement[74311-74357]:ExpressionStatement[74505-74551]"
    }, {
      "left" : "if (_inputBuffer[_inputPtr] != matchStr.charAt(i))",
      "right" : "if (_inputBuffer[_inputPtr] != matchStr.charAt(i))",
      "info" : "IfStatement[74402-74531]:IfStatement[74596-74725]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[74453-74531]:Block[74647-74725]"
    }, {
      "left" : "_reportInvalidToken(matchStr.substring(0, i));",
      "right" : "_reportInvalidToken(matchStr.substring(0, i));",
      "info" : "ExpressionStatement[74471-74517]:ExpressionStatement[74665-74711]"
    }, {
      "left" : "++_inputPtr;",
      "right" : "++_inputPtr;",
      "info" : "ExpressionStatement[74544-74556]:ExpressionStatement[74738-74750]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[74671-74779]:IfStatement[74865-74973]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[74699-74779]:Block[74893-74973]"
    }, {
      "left" : "if (!loadMore())",
      "right" : "if (!loadMore())",
      "info" : "IfStatement[74713-74769]:IfStatement[74907-74963]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[74730-74769]:Block[74924-74963]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[74748-74755]:ReturnStatement[74942-74949]"
    }, {
      "left" : "char c = _inputBuffer[_inputPtr];",
      "right" : "char c = _inputBuffer[_inputPtr];",
      "info" : "VariableDeclarationStatement[74788-74821]:VariableDeclarationStatement[74982-75015]"
    }, {
      "left" : "if (c < '0' || c == ']' || c == '}')",
      "right" : "if (c < '0' || c == ']' || c == '}')",
      "info" : "IfStatement[74830-74924]:IfStatement[75024-75118]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[74867-74924]:Block[75061-75118]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[74907-74914]:ReturnStatement[75101-75108]"
    }, {
      "left" : "if (Character.isJavaIdentifierPart(c))",
      "right" : "if (Character.isJavaIdentifierPart(c))",
      "info" : "IfStatement[74979-75088]:IfStatement[75173-75282]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[75018-75088]:Block[75212-75282]"
    }, {
      "left" : "_reportInvalidToken(matchStr.substring(0, i));",
      "right" : "_reportInvalidToken(matchStr.substring(0, i));",
      "info" : "ExpressionStatement[75032-75078]:ExpressionStatement[75226-75272]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[75097-75104]:ReturnStatement[75291-75298]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[75503-80051]:Block[75697-80245]"
    }, {
      "left" : "ByteArrayBuilder builder = _getByteArrayBuilder();",
      "right" : "ByteArrayBuilder builder = _getByteArrayBuilder();",
      "info" : "VariableDeclarationStatement[75513-75563]:VariableDeclarationStatement[75707-75757]"
    }, {
      "left" : "while (true)",
      "right" : "while (true)",
      "info" : "WhileStatement[75594-80045]:WhileStatement[75788-80239]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[75607-80045]:Block[75801-80239]"
    }, {
      "left" : "char ch;",
      "right" : "char ch;",
      "info" : "VariableDeclarationStatement[75684-75692]:VariableDeclarationStatement[75878-75886]"
    }, {
      "left" : "do{...}",
      "right" : "do{...}",
      "info" : "DoStatement[75705-75902]:DoStatement[75899-76096]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[75708-75877]:Block[75902-76071]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[75726-75815]:IfStatement[75920-76009]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[75754-75815]:Block[75948-76009]"
    }, {
      "left" : "loadMoreGuaranteed();",
      "right" : "loadMoreGuaranteed();",
      "info" : "ExpressionStatement[75776-75797]:ExpressionStatement[75970-75991]"
    }, {
      "left" : "ch = _inputBuffer[_inputPtr++];",
      "right" : "ch = _inputBuffer[_inputPtr++];",
      "info" : "ExpressionStatement[75832-75863]:ExpressionStatement[76026-76057]"
    }, {
      "left" : "int bits = b64variant.decodeBase64Char(ch);",
      "right" : "int bits = b64variant.decodeBase64Char(ch);",
      "info" : "VariableDeclarationStatement[75915-75958]:VariableDeclarationStatement[76109-76152]"
    }, {
      "left" : "if (bits < 0)",
      "right" : "if (bits < 0)",
      "info" : "IfStatement[75971-76304]:IfStatement[76165-76498]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[75985-76304]:Block[76179-76498]"
    }, {
      "left" : "if (ch == '\"')",
      "right" : "if (ch == '\"')",
      "info" : "IfStatement[76003-76124]:IfStatement[76197-76318]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[76018-76124]:Block[76212-76318]"
    }, {
      "left" : "return builder.toByteArray();",
      "right" : "return builder.toByteArray();",
      "info" : "ReturnStatement[76077-76106]:ReturnStatement[76271-76300]"
    }, {
      "left" : "bits = _decodeBase64Escape(b64variant, ch, 0);",
      "right" : "bits = _decodeBase64Escape(b64variant, ch, 0);",
      "info" : "ExpressionStatement[76141-76187]:ExpressionStatement[76335-76381]"
    }, {
      "left" : "if (bits < 0)",
      "right" : "if (bits < 0)",
      "info" : "IfStatement[76204-76290]:IfStatement[76398-76484]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[76218-76290]:Block[76412-76484]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[76263-76272]:ContinueStatement[76457-76466]"
    }, {
      "left" : "int decodedData = bits;",
      "right" : "int decodedData = bits;",
      "info" : "VariableDeclarationStatement[76317-76340]:VariableDeclarationStatement[76511-76534]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[76449-76530]:IfStatement[76643-76724]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[76477-76530]:Block[76671-76724]"
    }, {
      "left" : "loadMoreGuaranteed();",
      "right" : "loadMoreGuaranteed();",
      "info" : "ExpressionStatement[76495-76516]:ExpressionStatement[76689-76710]"
    }, {
      "left" : "ch = _inputBuffer[_inputPtr++];",
      "right" : "ch = _inputBuffer[_inputPtr++];",
      "info" : "ExpressionStatement[76543-76574]:ExpressionStatement[76737-76768]"
    }, {
      "left" : "bits = b64variant.decodeBase64Char(ch);",
      "right" : "bits = b64variant.decodeBase64Char(ch);",
      "info" : "ExpressionStatement[76587-76626]:ExpressionStatement[76781-76820]"
    }, {
      "left" : "if (bits < 0)",
      "right" : "if (bits < 0)",
      "info" : "IfStatement[76639-76731]:IfStatement[76833-76925]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[76653-76731]:Block[76847-76925]"
    }, {
      "left" : "bits = _decodeBase64Escape(b64variant, ch, 1);",
      "right" : "bits = _decodeBase64Escape(b64variant, ch, 1);",
      "info" : "ExpressionStatement[76671-76717]:ExpressionStatement[76865-76911]"
    }, {
      "left" : "decodedData = (decodedData << 6) | bits;",
      "right" : "decodedData = (decodedData << 6) | bits;",
      "info" : "ExpressionStatement[76744-76784]:ExpressionStatement[76938-76978]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[76871-76952]:IfStatement[77065-77146]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[76899-76952]:Block[77093-77146]"
    }, {
      "left" : "loadMoreGuaranteed();",
      "right" : "loadMoreGuaranteed();",
      "info" : "ExpressionStatement[76917-76938]:ExpressionStatement[77111-77132]"
    }, {
      "left" : "ch = _inputBuffer[_inputPtr++];",
      "right" : "ch = _inputBuffer[_inputPtr++];",
      "info" : "ExpressionStatement[76965-76996]:ExpressionStatement[77159-77190]"
    }, {
      "left" : "bits = b64variant.decodeBase64Char(ch);",
      "right" : "bits = b64variant.decodeBase64Char(ch);",
      "info" : "ExpressionStatement[77009-77048]:ExpressionStatement[77203-77242]"
    }, {
      "left" : "if (bits < 0)",
      "right" : "if (bits < 0)",
      "info" : "IfStatement[77119-78413]:IfStatement[77313-78607]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[77133-78413]:Block[77327-78607]"
    }, {
      "left" : "if (bits != Base64Variant.BASE64_VALUE_PADDING)",
      "right" : "if (bits != Base64Variant.BASE64_VALUE_PADDING)",
      "info" : "IfStatement[77151-77606]:IfStatement[77345-77800]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[77199-77606]:Block[77393-77800]"
    }, {
      "left" : "if (ch == '\"' && !b64variant.usesPadding())",
      "right" : "if (ch == '\"' && !b64variant.usesPadding())",
      "info" : "IfStatement[77304-77521]:IfStatement[77498-77715]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[77348-77521]:Block[77542-77715]"
    }, {
      "left" : "decodedData >>= 4;",
      "right" : "decodedData >>= 4;",
      "info" : "ExpressionStatement[77374-77392]:ExpressionStatement[77568-77586]"
    }, {
      "left" : "builder.append(decodedData);",
      "right" : "builder.append(decodedData);",
      "info" : "ExpressionStatement[77417-77445]:ExpressionStatement[77611-77639]"
    }, {
      "left" : "return builder.toByteArray();",
      "right" : "return builder.toByteArray();",
      "info" : "ReturnStatement[77470-77499]:ReturnStatement[77664-77693]"
    }, {
      "left" : "bits = _decodeBase64Escape(b64variant, ch, 2);",
      "right" : "bits = _decodeBase64Escape(b64variant, ch, 2);",
      "info" : "ExpressionStatement[77542-77588]:ExpressionStatement[77736-77782]"
    }, {
      "left" : "if (bits == Base64Variant.BASE64_VALUE_PADDING)",
      "right" : "if (bits == Base64Variant.BASE64_VALUE_PADDING)",
      "info" : "IfStatement[77623-78321]:IfStatement[77817-78515]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[77671-78321]:Block[77865-78515]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[77754-77851]:IfStatement[77948-78045]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[77782-77851]:Block[77976-78045]"
    }, {
      "left" : "loadMoreGuaranteed();",
      "right" : "loadMoreGuaranteed();",
      "info" : "ExpressionStatement[77808-77829]:ExpressionStatement[78002-78023]"
    }, {
      "left" : "ch = _inputBuffer[_inputPtr++];",
      "right" : "ch = _inputBuffer[_inputPtr++];",
      "info" : "ExpressionStatement[77872-77903]:ExpressionStatement[78066-78097]"
    }, {
      "left" : "if (!b64variant.usesPaddingChar(ch))",
      "right" : "if (!b64variant.usesPaddingChar(ch))",
      "info" : "IfStatement[77924-78122]:IfStatement[78118-78316]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[77961-78122]:Block[78155-78316]"
    }, {
      "left" : "throw reportInvalidBase64Char(b64variant, ch, 3, \"expected padding character '\"+b64variant.getPaddingChar()+\"'\");",
      "right" : "throw reportInvalidBase64Char(b64variant, ch, 3, \"expected padding character '\"+b64variant.getPaddingChar()+\"'\");",
      "info" : "ThrowStatement[77987-78100]:ThrowStatement[78181-78294]"
    }, {
      "left" : "decodedData >>= 4;",
      "right" : "decodedData >>= 4;",
      "info" : "ExpressionStatement[78206-78224]:ExpressionStatement[78400-78418]"
    }, {
      "left" : "builder.append(decodedData);",
      "right" : "builder.append(decodedData);",
      "info" : "ExpressionStatement[78245-78273]:ExpressionStatement[78439-78467]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[78294-78303]:ContinueStatement[78488-78497]"
    }, {
      "left" : "decodedData = (decodedData << 6) | bits;",
      "right" : "decodedData = (decodedData << 6) | bits;",
      "info" : "ExpressionStatement[78460-78500]:ExpressionStatement[78654-78694]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[78584-78665]:IfStatement[78778-78859]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[78612-78665]:Block[78806-78859]"
    }, {
      "left" : "loadMoreGuaranteed();",
      "right" : "loadMoreGuaranteed();",
      "info" : "ExpressionStatement[78630-78651]:ExpressionStatement[78824-78845]"
    }, {
      "left" : "ch = _inputBuffer[_inputPtr++];",
      "right" : "ch = _inputBuffer[_inputPtr++];",
      "info" : "ExpressionStatement[78678-78709]:ExpressionStatement[78872-78903]"
    }, {
      "left" : "bits = b64variant.decodeBase64Char(ch);",
      "right" : "bits = b64variant.decodeBase64Char(ch);",
      "info" : "ExpressionStatement[78722-78761]:ExpressionStatement[78916-78955]"
    }, {
      "left" : "if (bits < 0)",
      "right" : "if (bits < 0)",
      "info" : "IfStatement[78774-79877]:IfStatement[78968-80071]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[78788-79877]:Block[78982-80071]"
    }, {
      "left" : "if (bits != Base64Variant.BASE64_VALUE_PADDING)",
      "right" : "if (bits != Base64Variant.BASE64_VALUE_PADDING)",
      "info" : "IfStatement[78806-79269]:IfStatement[79000-79463]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[78854-79269]:Block[79048-79463]"
    }, {
      "left" : "if (ch == '\"' && !b64variant.usesPadding())",
      "right" : "if (ch == '\"' && !b64variant.usesPadding())",
      "info" : "IfStatement[78959-79184]:IfStatement[79153-79378]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[79003-79184]:Block[79197-79378]"
    }, {
      "left" : "decodedData >>= 2;",
      "right" : "decodedData >>= 2;",
      "info" : "ExpressionStatement[79029-79047]:ExpressionStatement[79223-79241]"
    }, {
      "left" : "builder.appendTwoBytes(decodedData);",
      "right" : "builder.appendTwoBytes(decodedData);",
      "info" : "ExpressionStatement[79072-79108]:ExpressionStatement[79266-79302]"
    }, {
      "left" : "return builder.toByteArray();",
      "right" : "return builder.toByteArray();",
      "info" : "ReturnStatement[79133-79162]:ReturnStatement[79327-79356]"
    }, {
      "left" : "bits = _decodeBase64Escape(b64variant, ch, 3);",
      "right" : "bits = _decodeBase64Escape(b64variant, ch, 3);",
      "info" : "ExpressionStatement[79205-79251]:ExpressionStatement[79399-79445]"
    }, {
      "left" : "if (bits == Base64Variant.BASE64_VALUE_PADDING)",
      "right" : "if (bits == Base64Variant.BASE64_VALUE_PADDING)",
      "info" : "IfStatement[79286-79785]:IfStatement[79480-79979]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[79334-79785]:Block[79528-79979]"
    }, {
      "left" : "decodedData >>= 2;",
      "right" : "decodedData >>= 2;",
      "info" : "ExpressionStatement[79662-79680]:ExpressionStatement[79856-79874]"
    }, {
      "left" : "builder.appendTwoBytes(decodedData);",
      "right" : "builder.appendTwoBytes(decodedData);",
      "info" : "ExpressionStatement[79701-79737]:ExpressionStatement[79895-79931]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[79758-79767]:ContinueStatement[79952-79961]"
    }, {
      "left" : "decodedData = (decodedData << 6) | bits;",
      "right" : "decodedData = (decodedData << 6) | bits;",
      "info" : "ExpressionStatement[79944-79984]:ExpressionStatement[80138-80178]"
    }, {
      "left" : "builder.appendThreeBytes(decodedData);",
      "right" : "builder.appendThreeBytes(decodedData);",
      "info" : "ExpressionStatement[79997-80035]:ExpressionStatement[80191-80229]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[80298-80381]:Block[80492-80575]"
    }, {
      "left" : "_reportInvalidToken(matchedPart, \"'null', 'true', 'false' or NaN\");",
      "right" : "_reportInvalidToken(matchedPart, \"'null', 'true', 'false' or NaN\");",
      "info" : "ExpressionStatement[80308-80375]:ExpressionStatement[80502-80569]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[80481-81176]:Block[80675-81370]"
    }, {
      "left" : "StringBuilder sb = new StringBuilder(matchedPart);",
      "right" : "StringBuilder sb = new StringBuilder(matchedPart);",
      "info" : "VariableDeclarationStatement[80491-80541]:VariableDeclarationStatement[80685-80735]"
    }, {
      "left" : "while (true)",
      "right" : "while (true)",
      "info" : "WhileStatement[80738-81086]:WhileStatement[80932-81280]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[80751-81086]:Block[80945-81280]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[80765-80888]:IfStatement[80959-81082]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[80793-80888]:Block[80987-81082]"
    }, {
      "left" : "if (!loadMore())",
      "right" : "if (!loadMore())",
      "info" : "IfStatement[80811-80874]:IfStatement[81005-81068]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[80828-80874]:Block[81022-81068]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[80850-80856]:BreakStatement[81044-81050]"
    }, {
      "left" : "char c = _inputBuffer[_inputPtr];",
      "right" : "char c = _inputBuffer[_inputPtr];",
      "info" : "VariableDeclarationStatement[80901-80934]:VariableDeclarationStatement[81095-81128]"
    }, {
      "left" : "if (!Character.isJavaIdentifierPart(c))",
      "right" : "if (!Character.isJavaIdentifierPart(c))",
      "info" : "IfStatement[80947-81025]:IfStatement[81141-81219]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[80987-81025]:Block[81181-81219]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[81005-81011]:BreakStatement[81199-81205]"
    }, {
      "left" : "++_inputPtr;",
      "right" : "++_inputPtr;",
      "info" : "ExpressionStatement[81038-81050]:ExpressionStatement[81232-81244]"
    }, {
      "left" : "sb.append(c);",
      "right" : "sb.append(c);",
      "info" : "ExpressionStatement[81063-81076]:ExpressionStatement[81257-81270]"
    }, {
      "left" : "_reportError(\"Unrecognized token '\"+sb.toString()+\"': was expecting \"+msg);",
      "right" : "_reportError(\"Unrecognized token '\"+sb.toString()+\"': was expecting \"+msg);",
      "info" : "ExpressionStatement[81095-81170]:ExpressionStatement[81289-81364]"
    } ]
  },
  "interFileMappings" : { }
}