{
  "matchedElements" : [
 {
    "left" : "package process(t , tb ) : boolean",
    "right" : "package process(t , tb ) : boolean",
    "info" : "MethodDeclaration[471-1552]:MethodDeclaration[471-1552]"
  }, {
    "left" : "package process(t , tb ) : boolean",
    "right" : "package process(t , tb ) : boolean",
    "info" : "MethodDeclaration[1585-2447]:MethodDeclaration[1585-2447]"
  }, {
    "left" : "private anythingElse(t , tb ) : boolean",
    "right" : "private anythingElse(t , tb ) : boolean",
    "info" : "MethodDeclaration[2457-2638]:MethodDeclaration[2457-2638]"
  }, {
    "left" : "package process(t , tb ) : boolean",
    "right" : "package process(t , tb ) : boolean",
    "info" : "MethodDeclaration[2671-3796]:MethodDeclaration[2671-3796]"
  }, {
    "left" : "package process(t , tb ) : boolean",
    "right" : "package process(t , tb ) : boolean",
    "info" : "MethodDeclaration[3825-6783]:MethodDeclaration[3825-6783]"
  }, {
    "left" : "private anythingElse(t , tb ) : boolean",
    "right" : "private anythingElse(t , tb ) : boolean",
    "info" : "MethodDeclaration[6793-6930]:MethodDeclaration[6793-6930]"
  }, {
    "left" : "package process(t , tb ) : boolean",
    "right" : "package process(t , tb ) : boolean",
    "info" : "MethodDeclaration[6967-8040]:MethodDeclaration[6967-8040]"
  }, {
    "left" : "private anythingElse(t , tb ) : boolean",
    "right" : "private anythingElse(t , tb ) : boolean",
    "info" : "MethodDeclaration[8050-8237]:MethodDeclaration[8050-8237]"
  }, {
    "left" : "package process(t , tb ) : boolean",
    "right" : "package process(t , tb ) : boolean",
    "info" : "MethodDeclaration[8269-10048]:MethodDeclaration[8269-10048]"
  }, {
    "left" : "private anythingElse(t , tb ) : boolean",
    "right" : "private anythingElse(t , tb ) : boolean",
    "info" : "MethodDeclaration[10058-10234]:MethodDeclaration[10058-10234]"
  }, {
    "left" : "package process(t , tb ) : boolean",
    "right" : "package process(t , tb ) : boolean",
    "info" : "MethodDeclaration[10263-38446]:MethodDeclaration[10263-38527]"
  }, {
    "left" : "package anyOtherEndTag(t , tb ) : boolean",
    "right" : "package anyOtherEndTag(t , tb ) : boolean",
    "info" : "MethodDeclaration[38456-39316]:MethodDeclaration[38537-39397]"
  }, {
    "left" : "package process(t , tb ) : boolean",
    "right" : "package process(t , tb ) : boolean",
    "info" : "MethodDeclaration[39406-40052]:MethodDeclaration[39487-40133]"
  }, {
    "left" : "package process(t , tb ) : boolean",
    "right" : "package process(t , tb ) : boolean",
    "info" : "MethodDeclaration[40082-43971]:MethodDeclaration[40163-44052]"
  }, {
    "left" : "package anythingElse(t , tb ) : boolean",
    "right" : "package anythingElse(t , tb ) : boolean",
    "info" : "MethodDeclaration[43981-44462]:MethodDeclaration[44062-44543]"
  }, {
    "left" : "package process(t , tb ) : boolean",
    "right" : "package process(t , tb ) : boolean",
    "info" : "MethodDeclaration[44496-46283]:MethodDeclaration[44577-46364]"
  }, {
    "left" : "package process(t , tb ) : boolean",
    "right" : "package process(t , tb ) : boolean",
    "info" : "MethodDeclaration[46315-47877]:MethodDeclaration[46396-47958]"
  }, {
    "left" : "package process(t , tb ) : boolean",
    "right" : "package process(t , tb ) : boolean",
    "info" : "MethodDeclaration[47913-49751]:MethodDeclaration[47994-49832]"
  }, {
    "left" : "private anythingElse(t , tb ) : boolean",
    "right" : "private anythingElse(t , tb ) : boolean",
    "info" : "MethodDeclaration[49761-50007]:MethodDeclaration[49842-50088]"
  }, {
    "left" : "package process(t , tb ) : boolean",
    "right" : "package process(t , tb ) : boolean",
    "info" : "MethodDeclaration[50041-52135]:MethodDeclaration[50122-52216]"
  }, {
    "left" : "private exitTableBody(t , tb ) : boolean",
    "right" : "private exitTableBody(t , tb ) : boolean",
    "info" : "MethodDeclaration[52145-52584]:MethodDeclaration[52226-52665]"
  }, {
    "left" : "private anythingElse(t , tb ) : boolean",
    "right" : "private anythingElse(t , tb ) : boolean",
    "info" : "MethodDeclaration[52594-52706]:MethodDeclaration[52675-52787]"
  }, {
    "left" : "package process(t , tb ) : boolean",
    "right" : "package process(t , tb ) : boolean",
    "info" : "MethodDeclaration[52734-54806]:MethodDeclaration[52815-54887]"
  }, {
    "left" : "private anythingElse(t , tb ) : boolean",
    "right" : "private anythingElse(t , tb ) : boolean",
    "info" : "MethodDeclaration[54816-54928]:MethodDeclaration[54897-55009]"
  }, {
    "left" : "private handleMissingTr(t , tb ) : boolean",
    "right" : "private handleMissingTr(t , tb ) : boolean",
    "info" : "MethodDeclaration[54938-55174]:MethodDeclaration[55019-55255]"
  }, {
    "left" : "package process(t , tb ) : boolean",
    "right" : "package process(t , tb ) : boolean",
    "info" : "MethodDeclaration[55203-57145]:MethodDeclaration[55284-57226]"
  }, {
    "left" : "private anythingElse(t , tb ) : boolean",
    "right" : "private anythingElse(t , tb ) : boolean",
    "info" : "MethodDeclaration[57155-57266]:MethodDeclaration[57236-57347]"
  }, {
    "left" : "private closeCell(tb ) : void",
    "right" : "private closeCell(tb ) : void",
    "info" : "MethodDeclaration[57276-57500]:MethodDeclaration[57357-57581]"
  }, {
    "left" : "package process(t , tb ) : boolean",
    "right" : "package process(t , tb ) : boolean",
    "info" : "MethodDeclaration[57531-61547]:MethodDeclaration[57612-61628]"
  }, {
    "left" : "private anythingElse(t , tb ) : boolean",
    "right" : "private anythingElse(t , tb ) : boolean",
    "info" : "MethodDeclaration[61557-61680]:MethodDeclaration[61638-61761]"
  }, {
    "left" : "package process(t , tb ) : boolean",
    "right" : "package process(t , tb ) : boolean",
    "info" : "MethodDeclaration[61718-62511]:MethodDeclaration[61799-62592]"
  }, {
    "left" : "package process(t , tb ) : boolean",
    "right" : "package process(t , tb ) : boolean",
    "info" : "MethodDeclaration[62543-63552]:MethodDeclaration[62624-63633]"
  }, {
    "left" : "package process(t , tb ) : boolean",
    "right" : "package process(t , tb ) : boolean",
    "info" : "MethodDeclaration[63585-65382]:MethodDeclaration[63666-65463]"
  }, {
    "left" : "package process(t , tb ) : boolean",
    "right" : "package process(t , tb ) : boolean",
    "info" : "MethodDeclaration[65418-66350]:MethodDeclaration[65499-66431]"
  }, {
    "left" : "package process(t , tb ) : boolean",
    "right" : "package process(t , tb ) : boolean",
    "info" : "MethodDeclaration[66387-66929]:MethodDeclaration[66468-67010]"
  }, {
    "left" : "package process(t , tb ) : boolean",
    "right" : "package process(t , tb ) : boolean",
    "info" : "MethodDeclaration[66970-67602]:MethodDeclaration[67051-67683]"
  }, {
    "left" : "package process(t , tb ) : boolean",
    "right" : "package process(t , tb ) : boolean",
    "info" : "MethodDeclaration[67639-67778]:MethodDeclaration[67720-67859]"
  }, {
    "left" : "nullString",
    "right" : "nullString",
    "info" : "FieldDeclaration[67791-67851]:FieldDeclaration[67872-67932]"
  }, {
    "left" : "public abstract process(t , tb ) : boolean",
    "right" : "public abstract process(t , tb ) : boolean",
    "info" : "MethodDeclaration[67857-67911]:MethodDeclaration[67938-67992]"
  }, {
    "left" : "private isWhitespace(t ) : boolean",
    "right" : "private isWhitespace(t ) : boolean",
    "info" : "MethodDeclaration[67917-68124]:MethodDeclaration[67998-68205]"
  }, {
    "left" : "private isWhitespace(data ) : boolean",
    "right" : "private isWhitespace(data ) : boolean",
    "info" : "MethodDeclaration[68130-68453]:MethodDeclaration[68211-68534]"
  }, {
    "left" : "private handleRcData(startTag , tb ) : void",
    "right" : "private handleRcData(startTag , tb ) : void",
    "info" : "MethodDeclaration[68459-68690]:MethodDeclaration[68540-68771]"
  }, {
    "left" : "private handleRawtext(startTag , tb ) : void",
    "right" : "private handleRawtext(startTag , tb ) : void",
    "info" : "MethodDeclaration[68696-68929]:MethodDeclaration[68777-69010]"
  }, {
    "left" : "class : Constants",
    "right" : "class : Constants",
    "info" : "TypeDeclaration[69221-71504]:TypeDeclaration[69302-71585]"
  }, {
    "left" : "InBodyStartToHead",
    "right" : "InBodyStartToHead",
    "info" : "FieldDeclaration[69260-69413]:FieldDeclaration[69341-69494]"
  }, {
    "left" : "InBodyStartPClosers",
    "right" : "InBodyStartPClosers",
    "info" : "FieldDeclaration[69422-69709]:FieldDeclaration[69503-69790]"
  }, {
    "left" : "Headings",
    "right" : "Headings",
    "info" : "FieldDeclaration[69718-69800]:FieldDeclaration[69799-69881]"
  }, {
    "left" : "InBodyStartPreListing",
    "right" : "InBodyStartPreListing",
    "info" : "FieldDeclaration[69809-69886]:FieldDeclaration[69890-69967]"
  }, {
    "left" : "InBodyStartLiBreakers",
    "right" : "InBodyStartLiBreakers",
    "info" : "FieldDeclaration[69895-69977]:FieldDeclaration[69976-70058]"
  }, {
    "left" : "DdDt",
    "right" : "DdDt",
    "info" : "FieldDeclaration[69986-70040]:FieldDeclaration[70067-70121]"
  }, {
    "left" : "Formatters",
    "right" : "Formatters",
    "info" : "FieldDeclaration[70049-70181]:FieldDeclaration[70130-70262]"
  }, {
    "left" : "InBodyStartApplets",
    "right" : "InBodyStartApplets",
    "info" : "FieldDeclaration[70190-70277]:FieldDeclaration[70271-70358]"
  }, {
    "left" : "InBodyStartEmptyFormatters",
    "right" : "InBodyStartEmptyFormatters",
    "info" : "FieldDeclaration[70286-70397]:FieldDeclaration[70367-70478]"
  }, {
    "left" : "InBodyStartMedia",
    "right" : "InBodyStartMedia",
    "info" : "FieldDeclaration[70406-70488]:FieldDeclaration[70487-70569]"
  }, {
    "left" : "InBodyStartInputAttribs",
    "right" : "InBodyStartInputAttribs",
    "info" : "FieldDeclaration[70497-70586]:FieldDeclaration[70578-70667]"
  }, {
    "left" : "InBodyStartOptions",
    "right" : "InBodyStartOptions",
    "info" : "FieldDeclaration[70595-70673]:FieldDeclaration[70676-70754]"
  }, {
    "left" : "InBodyStartRuby",
    "right" : "InBodyStartRuby",
    "info" : "FieldDeclaration[70682-70747]:FieldDeclaration[70763-70828]"
  }, {
    "left" : "InBodyStartDrop",
    "right" : "InBodyStartDrop",
    "info" : "FieldDeclaration[70756-70901]:FieldDeclaration[70837-70982]"
  }, {
    "left" : "InBodyEndClosers",
    "right" : "InBodyEndClosers",
    "info" : "FieldDeclaration[70910-71217]:FieldDeclaration[70991-71298]"
  }, {
    "left" : "InBodyEndAdoptionFormatters",
    "right" : "InBodyEndAdoptionFormatters",
    "info" : "FieldDeclaration[71226-71388]:FieldDeclaration[71307-71469]"
  }, {
    "left" : "InBodyEndTableFosters",
    "right" : "InBodyEndTableFosters",
    "info" : "FieldDeclaration[71397-71498]:FieldDeclaration[71478-71579]"
  } ],
  "mappings" : [
 {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[471-478]:PrimitiveType[471-478]"
  }, {
    "left" : "process",
    "right" : "process",
    "info" : "SimpleName[479-486]:SimpleName[479-486]"
  }, {
    "left" : "Token t",
    "right" : "Token t",
    "info" : "SingleVariableDeclaration[487-494]:SingleVariableDeclaration[487-494]"
  }, {
    "left" : "HtmlTreeBuilder tb",
    "right" : "HtmlTreeBuilder tb",
    "info" : "SingleVariableDeclaration[496-514]:SingleVariableDeclaration[496-514]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[516-1552]:Block[516-1552]"
  }, {
    "left" : "if (isWhitespace(t))",
    "right" : "if (isWhitespace(t))",
    "info" : "IfStatement[530-1517]:IfStatement[530-1517]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[551-616]:Block[551-616]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[569-581]:ReturnStatement[569-581]"
  }, {
    "left" : "if (t.isComment())",
    "right" : "if (t.isComment())",
    "info" : "IfStatement[622-1517]:IfStatement[622-1517]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[641-698]:Block[641-698]"
  }, {
    "left" : "tb.insert(t.asComment());",
    "right" : "tb.insert(t.asComment());",
    "info" : "ExpressionStatement[659-684]:ExpressionStatement[659-684]"
  }, {
    "left" : "if (t.isDoctype())",
    "right" : "if (t.isDoctype())",
    "info" : "IfStatement[704-1517]:IfStatement[704-1517]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[723-1346]:Block[723-1346]"
  }, {
    "left" : "Token.Doctype d = t.asDoctype();",
    "right" : "Token.Doctype d = t.asDoctype();",
    "info" : "VariableDeclarationStatement[863-895]:VariableDeclarationStatement[863-895]"
  }, {
    "left" : "DocumentType doctype = new DocumentType(\n                    tb.settings.normalizeTag(d.getName()), d.getPublicIdentifier(), d.getSystemIdentifier());",
    "right" : "DocumentType doctype = new DocumentType(\n                    tb.settings.normalizeTag(d.getName()), d.getPublicIdentifier(), d.getSystemIdentifier());",
    "info" : "VariableDeclarationStatement[912-1062]:VariableDeclarationStatement[912-1062]"
  }, {
    "left" : "doctype.setPubSysKey(d.getPubSysKey());",
    "right" : "doctype.setPubSysKey(d.getPubSysKey());",
    "info" : "ExpressionStatement[1079-1118]:ExpressionStatement[1079-1118]"
  }, {
    "left" : "tb.getDocument().appendChild(doctype);",
    "right" : "tb.getDocument().appendChild(doctype);",
    "info" : "ExpressionStatement[1135-1173]:ExpressionStatement[1135-1173]"
  }, {
    "left" : "if (d.isForceQuirks())",
    "right" : "if (d.isForceQuirks())",
    "info" : "IfStatement[1190-1289]:IfStatement[1190-1289]"
  }, {
    "left" : "tb.getDocument().quirksMode(Document.QuirksMode.quirks);",
    "right" : "tb.getDocument().quirksMode(Document.QuirksMode.quirks);",
    "info" : "ExpressionStatement[1233-1289]:ExpressionStatement[1233-1289]"
  }, {
    "left" : "tb.transition(BeforeHtml);",
    "right" : "tb.transition(BeforeHtml);",
    "info" : "ExpressionStatement[1306-1332]:ExpressionStatement[1306-1332]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[1352-1517]:Block[1352-1517]"
  }, {
    "left" : "tb.transition(BeforeHtml);",
    "right" : "tb.transition(BeforeHtml);",
    "info" : "ExpressionStatement[1419-1445]:ExpressionStatement[1419-1445]"
  }, {
    "left" : "return tb.process(t);",
    "right" : "return tb.process(t);",
    "info" : "ReturnStatement[1462-1483]:ReturnStatement[1462-1483]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[1530-1542]:ReturnStatement[1530-1542]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[1585-1592]:PrimitiveType[1585-1592]"
  }, {
    "left" : "process",
    "right" : "process",
    "info" : "SimpleName[1593-1600]:SimpleName[1593-1600]"
  }, {
    "left" : "Token t",
    "right" : "Token t",
    "info" : "SingleVariableDeclaration[1601-1608]:SingleVariableDeclaration[1601-1608]"
  }, {
    "left" : "HtmlTreeBuilder tb",
    "right" : "HtmlTreeBuilder tb",
    "info" : "SingleVariableDeclaration[1610-1628]:SingleVariableDeclaration[1610-1628]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[1630-2447]:Block[1630-2447]"
  }, {
    "left" : "if (t.isDoctype())",
    "right" : "if (t.isDoctype())",
    "info" : "IfStatement[1644-2412]:IfStatement[1644-2412]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[1663-1740]:Block[1663-1740]"
  }, {
    "left" : "tb.error(this);",
    "right" : "tb.error(this);",
    "info" : "ExpressionStatement[1681-1696]:ExpressionStatement[1681-1696]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[1713-1726]:ReturnStatement[1713-1726]"
  }, {
    "left" : "if (t.isComment())",
    "right" : "if (t.isComment())",
    "info" : "IfStatement[1746-2412]:IfStatement[1746-2412]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[1765-1822]:Block[1765-1822]"
  }, {
    "left" : "tb.insert(t.asComment());",
    "right" : "tb.insert(t.asComment());",
    "info" : "ExpressionStatement[1783-1808]:ExpressionStatement[1783-1808]"
  }, {
    "left" : "if (isWhitespace(t))",
    "right" : "if (isWhitespace(t))",
    "info" : "IfStatement[1828-2412]:IfStatement[1828-2412]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[1849-1914]:Block[1849-1914]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[1867-1879]:ReturnStatement[1867-1879]"
  }, {
    "left" : "if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\"))",
    "right" : "if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\"))",
    "info" : "IfStatement[1920-2412]:IfStatement[1920-2412]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[1986-2087]:Block[1986-2087]"
  }, {
    "left" : "tb.insert(t.asStartTag());",
    "right" : "tb.insert(t.asStartTag());",
    "info" : "ExpressionStatement[2004-2030]:ExpressionStatement[2004-2030]"
  }, {
    "left" : "tb.transition(BeforeHead);",
    "right" : "tb.transition(BeforeHead);",
    "info" : "ExpressionStatement[2047-2073]:ExpressionStatement[2047-2073]"
  }, {
    "left" : "if (t.isEndTag() && (StringUtil.in(t.asEndTag().normalName(), \"head\", \"body\", \"html\", \"br\")))",
    "right" : "if (t.isEndTag() && (StringUtil.in(t.asEndTag().normalName(), \"head\", \"body\", \"html\", \"br\")))",
    "info" : "IfStatement[2093-2412]:IfStatement[2093-2412]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[2187-2246]:Block[2187-2246]"
  }, {
    "left" : "return anythingElse(t, tb);",
    "right" : "return anythingElse(t, tb);",
    "info" : "ReturnStatement[2205-2232]:ReturnStatement[2205-2232]"
  }, {
    "left" : "if (t.isEndTag())",
    "right" : "if (t.isEndTag())",
    "info" : "IfStatement[2252-2412]:IfStatement[2252-2412]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[2270-2347]:Block[2270-2347]"
  }, {
    "left" : "tb.error(this);",
    "right" : "tb.error(this);",
    "info" : "ExpressionStatement[2288-2303]:ExpressionStatement[2288-2303]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[2320-2333]:ReturnStatement[2320-2333]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[2353-2412]:Block[2353-2412]"
  }, {
    "left" : "return anythingElse(t, tb);",
    "right" : "return anythingElse(t, tb);",
    "info" : "ReturnStatement[2371-2398]:ReturnStatement[2371-2398]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[2425-2437]:ReturnStatement[2425-2437]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[2457-2464]:Modifier[2457-2464]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[2465-2472]:PrimitiveType[2465-2472]"
  }, {
    "left" : "anythingElse",
    "right" : "anythingElse",
    "info" : "SimpleName[2473-2485]:SimpleName[2473-2485]"
  }, {
    "left" : "Token t",
    "right" : "Token t",
    "info" : "SingleVariableDeclaration[2486-2493]:SingleVariableDeclaration[2486-2493]"
  }, {
    "left" : "HtmlTreeBuilder tb",
    "right" : "HtmlTreeBuilder tb",
    "info" : "SingleVariableDeclaration[2495-2513]:SingleVariableDeclaration[2495-2513]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[2515-2638]:Block[2515-2638]"
  }, {
    "left" : "tb.insertStartTag(\"html\");",
    "right" : "tb.insertStartTag(\"html\");",
    "info" : "ExpressionStatement[2529-2555]:ExpressionStatement[2529-2555]"
  }, {
    "left" : "tb.transition(BeforeHead);",
    "right" : "tb.transition(BeforeHead);",
    "info" : "ExpressionStatement[2568-2594]:ExpressionStatement[2568-2594]"
  }, {
    "left" : "return tb.process(t);",
    "right" : "return tb.process(t);",
    "info" : "ReturnStatement[2607-2628]:ReturnStatement[2607-2628]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[2671-2678]:PrimitiveType[2671-2678]"
  }, {
    "left" : "process",
    "right" : "process",
    "info" : "SimpleName[2679-2686]:SimpleName[2679-2686]"
  }, {
    "left" : "Token t",
    "right" : "Token t",
    "info" : "SingleVariableDeclaration[2687-2694]:SingleVariableDeclaration[2687-2694]"
  }, {
    "left" : "HtmlTreeBuilder tb",
    "right" : "HtmlTreeBuilder tb",
    "info" : "SingleVariableDeclaration[2696-2714]:SingleVariableDeclaration[2696-2714]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[2716-3796]:Block[2716-3796]"
  }, {
    "left" : "if (isWhitespace(t))",
    "right" : "if (isWhitespace(t))",
    "info" : "IfStatement[2730-3761]:IfStatement[2730-3761]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[2751-2795]:Block[2751-2795]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[2769-2781]:ReturnStatement[2769-2781]"
  }, {
    "left" : "if (t.isComment())",
    "right" : "if (t.isComment())",
    "info" : "IfStatement[2801-3761]:IfStatement[2801-3761]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[2820-2877]:Block[2820-2877]"
  }, {
    "left" : "tb.insert(t.asComment());",
    "right" : "tb.insert(t.asComment());",
    "info" : "ExpressionStatement[2838-2863]:ExpressionStatement[2838-2863]"
  }, {
    "left" : "if (t.isDoctype())",
    "right" : "if (t.isDoctype())",
    "info" : "IfStatement[2883-3761]:IfStatement[2883-3761]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[2902-2979]:Block[2902-2979]"
  }, {
    "left" : "tb.error(this);",
    "right" : "tb.error(this);",
    "info" : "ExpressionStatement[2920-2935]:ExpressionStatement[2920-2935]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[2952-2965]:ReturnStatement[2952-2965]"
  }, {
    "left" : "if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\"))",
    "right" : "if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\"))",
    "info" : "IfStatement[2985-3761]:IfStatement[2985-3761]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3051-3135]:Block[3051-3135]"
  }, {
    "left" : "return InBody.process(t, tb);",
    "right" : "return InBody.process(t, tb);",
    "info" : "ReturnStatement[3069-3098]:ReturnStatement[3069-3098]"
  }, {
    "left" : "if (t.isStartTag() && t.asStartTag().normalName().equals(\"head\"))",
    "right" : "if (t.isStartTag() && t.asStartTag().normalName().equals(\"head\"))",
    "info" : "IfStatement[3141-3761]:IfStatement[3141-3761]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3207-3360]:Block[3207-3360]"
  }, {
    "left" : "Element head = tb.insert(t.asStartTag());",
    "right" : "Element head = tb.insert(t.asStartTag());",
    "info" : "VariableDeclarationStatement[3225-3266]:VariableDeclarationStatement[3225-3266]"
  }, {
    "left" : "tb.setHeadElement(head);",
    "right" : "tb.setHeadElement(head);",
    "info" : "ExpressionStatement[3283-3307]:ExpressionStatement[3283-3307]"
  }, {
    "left" : "tb.transition(InHead);",
    "right" : "tb.transition(InHead);",
    "info" : "ExpressionStatement[3324-3346]:ExpressionStatement[3324-3346]"
  }, {
    "left" : "if (t.isEndTag() && (StringUtil.in(t.asEndTag().normalName(), \"head\", \"body\", \"html\", \"br\")))",
    "right" : "if (t.isEndTag() && (StringUtil.in(t.asEndTag().normalName(), \"head\", \"body\", \"html\", \"br\")))",
    "info" : "IfStatement[3366-3761]:IfStatement[3366-3761]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3460-3557]:Block[3460-3557]"
  }, {
    "left" : "tb.processStartTag(\"head\");",
    "right" : "tb.processStartTag(\"head\");",
    "info" : "ExpressionStatement[3478-3505]:ExpressionStatement[3478-3505]"
  }, {
    "left" : "return tb.process(t);",
    "right" : "return tb.process(t);",
    "info" : "ReturnStatement[3522-3543]:ReturnStatement[3522-3543]"
  }, {
    "left" : "if (t.isEndTag())",
    "right" : "if (t.isEndTag())",
    "info" : "IfStatement[3563-3761]:IfStatement[3563-3761]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3581-3658]:Block[3581-3658]"
  }, {
    "left" : "tb.error(this);",
    "right" : "tb.error(this);",
    "info" : "ExpressionStatement[3599-3614]:ExpressionStatement[3599-3614]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[3631-3644]:ReturnStatement[3631-3644]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3664-3761]:Block[3664-3761]"
  }, {
    "left" : "tb.processStartTag(\"head\");",
    "right" : "tb.processStartTag(\"head\");",
    "info" : "ExpressionStatement[3682-3709]:ExpressionStatement[3682-3709]"
  }, {
    "left" : "return tb.process(t);",
    "right" : "return tb.process(t);",
    "info" : "ReturnStatement[3726-3747]:ReturnStatement[3726-3747]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[3774-3786]:ReturnStatement[3774-3786]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[3825-3832]:PrimitiveType[3825-3832]"
  }, {
    "left" : "process",
    "right" : "process",
    "info" : "SimpleName[3833-3840]:SimpleName[3833-3840]"
  }, {
    "left" : "Token t",
    "right" : "Token t",
    "info" : "SingleVariableDeclaration[3841-3848]:SingleVariableDeclaration[3841-3848]"
  }, {
    "left" : "HtmlTreeBuilder tb",
    "right" : "HtmlTreeBuilder tb",
    "info" : "SingleVariableDeclaration[3850-3868]:SingleVariableDeclaration[3850-3868]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3870-6783]:Block[3870-6783]"
  }, {
    "left" : "if (isWhitespace(t))",
    "right" : "if (isWhitespace(t))",
    "info" : "IfStatement[3884-3993]:IfStatement[3884-3993]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3905-3993]:Block[3905-3993]"
  }, {
    "left" : "tb.insert(t.asCharacter());",
    "right" : "tb.insert(t.asCharacter());",
    "info" : "ExpressionStatement[3923-3950]:ExpressionStatement[3923-3950]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[3967-3979]:ReturnStatement[3967-3979]"
  }, {
    "left" : "switch (t.type) {\n                case Comment:\n                    tb.insert(t.asComment());\n                    break;\n                case Doctype:\n                    tb.error(this);\n                    return false;\n                case StartTag:\n                    Token.StartTag start = t.asStartTag();\n                    String name = start.normalName();\n                    if (name.equals(\"html\")) {\n                        return InBody.process(t, tb);\n                    } else if (StringUtil.in(name, \"base\", \"basefont\", \"bgsound\", \"command\", \"link\")) {\n                        Element el = tb.insertEmpty(start);\n                        // jsoup special: update base the frist time it is seen\n                        if (name.equals(\"base\") && el.hasAttr(\"href\"))\n                            tb.maybeSetBaseUri(el);\n                    } else if (name.equals(\"meta\")) {\n                        Element meta = tb.insertEmpty(start);\n                        // todo: charset switches\n                    } else if (name.equals(\"title\")) {\n                        handleRcData(start, tb);\n                    } else if (StringUtil.in(name, \"noframes\", \"style\")) {\n                        handleRawtext(start, tb);\n                    } else if (name.equals(\"noscript\")) {\n                        // else if noscript && scripting flag = true: rawtext (jsoup doesn't run script, to handle as noscript)\n                        tb.insert(start);\n                        tb.transition(InHeadNoscript);\n                    } else if (name.equals(\"script\")) {\n                        // skips some script rules as won't execute them\n\n                        tb.tokeniser.transition(TokeniserState.ScriptData);\n                        tb.markInsertionMode();\n                        tb.transition(Text);\n                        tb.insert(start);\n                    } else if (name.equals(\"head\")) {\n                        tb.error(this);\n                        return false;\n                    } else {\n                        return anythingElse(t, tb);\n                    }\n                    break;\n                case EndTag:\n                    Token.EndTag end = t.asEndTag();\n                    name = end.normalName();\n                    if (name.equals(\"head\")) {\n                        tb.pop();\n                        tb.transition(AfterHead);\n                    } else if (StringUtil.in(name, \"body\", \"html\", \"br\")) {\n                        return anythingElse(t, tb);\n                    } else {\n                        tb.error(this);\n                        return false;\n                    }\n                    break;\n                default:\n                    return anythingElse(t, tb);\n            }",
    "right" : "switch (t.type) {\n                case Comment:\n                    tb.insert(t.asComment());\n                    break;\n                case Doctype:\n                    tb.error(this);\n                    return false;\n                case StartTag:\n                    Token.StartTag start = t.asStartTag();\n                    String name = start.normalName();\n                    if (name.equals(\"html\")) {\n                        return InBody.process(t, tb);\n                    } else if (StringUtil.in(name, \"base\", \"basefont\", \"bgsound\", \"command\", \"link\")) {\n                        Element el = tb.insertEmpty(start);\n                        // jsoup special: update base the frist time it is seen\n                        if (name.equals(\"base\") && el.hasAttr(\"href\"))\n                            tb.maybeSetBaseUri(el);\n                    } else if (name.equals(\"meta\")) {\n                        Element meta = tb.insertEmpty(start);\n                        // todo: charset switches\n                    } else if (name.equals(\"title\")) {\n                        handleRcData(start, tb);\n                    } else if (StringUtil.in(name, \"noframes\", \"style\")) {\n                        handleRawtext(start, tb);\n                    } else if (name.equals(\"noscript\")) {\n                        // else if noscript && scripting flag = true: rawtext (jsoup doesn't run script, to handle as noscript)\n                        tb.insert(start);\n                        tb.transition(InHeadNoscript);\n                    } else if (name.equals(\"script\")) {\n                        // skips some script rules as won't execute them\n\n                        tb.tokeniser.transition(TokeniserState.ScriptData);\n                        tb.markInsertionMode();\n                        tb.transition(Text);\n                        tb.insert(start);\n                    } else if (name.equals(\"head\")) {\n                        tb.error(this);\n                        return false;\n                    } else {\n                        return anythingElse(t, tb);\n                    }\n                    break;\n                case EndTag:\n                    Token.EndTag end = t.asEndTag();\n                    name = end.normalName();\n                    if (name.equals(\"head\")) {\n                        tb.pop();\n                        tb.transition(AfterHead);\n                    } else if (StringUtil.in(name, \"body\", \"html\", \"br\")) {\n                        return anythingElse(t, tb);\n                    } else {\n                        tb.error(this);\n                        return false;\n                    }\n                    break;\n                default:\n                    return anythingElse(t, tb);\n            }",
    "info" : "SwitchStatement[4006-6748]:SwitchStatement[4006-6748]"
  }, {
    "left" : "case Comment:",
    "right" : "case Comment:",
    "info" : "SwitchCase[4040-4053]:SwitchCase[4040-4053]"
  }, {
    "left" : "tb.insert(t.asComment());",
    "right" : "tb.insert(t.asComment());",
    "info" : "ExpressionStatement[4074-4099]:ExpressionStatement[4074-4099]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[4120-4126]:BreakStatement[4120-4126]"
  }, {
    "left" : "case Doctype:",
    "right" : "case Doctype:",
    "info" : "SwitchCase[4143-4156]:SwitchCase[4143-4156]"
  }, {
    "left" : "tb.error(this);",
    "right" : "tb.error(this);",
    "info" : "ExpressionStatement[4177-4192]:ExpressionStatement[4177-4192]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[4213-4226]:ReturnStatement[4213-4226]"
  }, {
    "left" : "case StartTag:",
    "right" : "case StartTag:",
    "info" : "SwitchCase[4243-4257]:SwitchCase[4243-4257]"
  }, {
    "left" : "Token.StartTag start = t.asStartTag();",
    "right" : "Token.StartTag start = t.asStartTag();",
    "info" : "VariableDeclarationStatement[4278-4316]:VariableDeclarationStatement[4278-4316]"
  }, {
    "left" : "String name = start.normalName();",
    "right" : "String name = start.normalName();",
    "info" : "VariableDeclarationStatement[4337-4370]:VariableDeclarationStatement[4337-4370]"
  }, {
    "left" : "if (name.equals(\"html\"))",
    "right" : "if (name.equals(\"html\"))",
    "info" : "IfStatement[4391-6092]:IfStatement[4391-6092]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4416-4493]:Block[4416-4493]"
  }, {
    "left" : "return InBody.process(t, tb);",
    "right" : "return InBody.process(t, tb);",
    "info" : "ReturnStatement[4442-4471]:ReturnStatement[4442-4471]"
  }, {
    "left" : "if (StringUtil.in(name, \"base\", \"basefont\", \"bgsound\", \"command\", \"link\"))",
    "right" : "if (StringUtil.in(name, \"base\", \"basefont\", \"bgsound\", \"command\", \"link\"))",
    "info" : "IfStatement[4499-6092]:IfStatement[4499-6092]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4574-4860]:Block[4574-4860]"
  }, {
    "left" : "Element el = tb.insertEmpty(start);",
    "right" : "Element el = tb.insertEmpty(start);",
    "info" : "VariableDeclarationStatement[4600-4635]:VariableDeclarationStatement[4600-4635]"
  }, {
    "left" : "if (name.equals(\"base\") && el.hasAttr(\"href\"))",
    "right" : "if (name.equals(\"base\") && el.hasAttr(\"href\"))",
    "info" : "IfStatement[4740-4838]:IfStatement[4740-4838]"
  }, {
    "left" : "tb.maybeSetBaseUri(el);",
    "right" : "tb.maybeSetBaseUri(el);",
    "info" : "ExpressionStatement[4815-4838]:ExpressionStatement[4815-4838]"
  }, {
    "left" : "if (name.equals(\"meta\"))",
    "right" : "if (name.equals(\"meta\"))",
    "info" : "IfStatement[4866-6092]:IfStatement[4866-6092]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4891-5026]:Block[4891-5026]"
  }, {
    "left" : "Element meta = tb.insertEmpty(start);",
    "right" : "Element meta = tb.insertEmpty(start);",
    "info" : "VariableDeclarationStatement[4917-4954]:VariableDeclarationStatement[4917-4954]"
  }, {
    "left" : "if (name.equals(\"title\"))",
    "right" : "if (name.equals(\"title\"))",
    "info" : "IfStatement[5032-6092]:IfStatement[5032-6092]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5058-5130]:Block[5058-5130]"
  }, {
    "left" : "handleRcData(start, tb);",
    "right" : "handleRcData(start, tb);",
    "info" : "ExpressionStatement[5084-5108]:ExpressionStatement[5084-5108]"
  }, {
    "left" : "if (StringUtil.in(name, \"noframes\", \"style\"))",
    "right" : "if (StringUtil.in(name, \"noframes\", \"style\"))",
    "info" : "IfStatement[5136-6092]:IfStatement[5136-6092]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5182-5255]:Block[5182-5255]"
  }, {
    "left" : "handleRawtext(start, tb);",
    "right" : "handleRawtext(start, tb);",
    "info" : "ExpressionStatement[5208-5233]:ExpressionStatement[5208-5233]"
  }, {
    "left" : "if (name.equals(\"noscript\"))",
    "right" : "if (name.equals(\"noscript\"))",
    "info" : "IfStatement[5261-6092]:IfStatement[5261-6092]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5290-5538]:Block[5290-5538]"
  }, {
    "left" : "tb.insert(start);",
    "right" : "tb.insert(start);",
    "info" : "ExpressionStatement[5444-5461]:ExpressionStatement[5444-5461]"
  }, {
    "left" : "tb.transition(InHeadNoscript);",
    "right" : "tb.transition(InHeadNoscript);",
    "info" : "ExpressionStatement[5486-5516]:ExpressionStatement[5486-5516]"
  }, {
    "left" : "if (name.equals(\"script\"))",
    "right" : "if (name.equals(\"script\"))",
    "info" : "IfStatement[5544-6092]:IfStatement[5544-6092]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5571-5879]:Block[5571-5879]"
  }, {
    "left" : "tb.tokeniser.transition(TokeniserState.ScriptData);",
    "right" : "tb.tokeniser.transition(TokeniserState.ScriptData);",
    "info" : "ExpressionStatement[5671-5722]:ExpressionStatement[5671-5722]"
  }, {
    "left" : "tb.markInsertionMode();",
    "right" : "tb.markInsertionMode();",
    "info" : "ExpressionStatement[5747-5770]:ExpressionStatement[5747-5770]"
  }, {
    "left" : "tb.transition(Text);",
    "right" : "tb.transition(Text);",
    "info" : "ExpressionStatement[5795-5815]:ExpressionStatement[5795-5815]"
  }, {
    "left" : "tb.insert(start);",
    "right" : "tb.insert(start);",
    "info" : "ExpressionStatement[5840-5857]:ExpressionStatement[5840-5857]"
  }, {
    "left" : "if (name.equals(\"head\"))",
    "right" : "if (name.equals(\"head\"))",
    "info" : "IfStatement[5885-6092]:IfStatement[5885-6092]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5910-6011]:Block[5910-6011]"
  }, {
    "left" : "tb.error(this);",
    "right" : "tb.error(this);",
    "info" : "ExpressionStatement[5936-5951]:ExpressionStatement[5936-5951]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[5976-5989]:ReturnStatement[5976-5989]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6017-6092]:Block[6017-6092]"
  }, {
    "left" : "return anythingElse(t, tb);",
    "right" : "return anythingElse(t, tb);",
    "info" : "ReturnStatement[6043-6070]:ReturnStatement[6043-6070]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[6113-6119]:BreakStatement[6113-6119]"
  }, {
    "left" : "case EndTag:",
    "right" : "case EndTag:",
    "info" : "SwitchCase[6136-6148]:SwitchCase[6136-6148]"
  }, {
    "left" : "Token.EndTag end = t.asEndTag();",
    "right" : "Token.EndTag end = t.asEndTag();",
    "info" : "VariableDeclarationStatement[6169-6201]:VariableDeclarationStatement[6169-6201]"
  }, {
    "left" : "name = end.normalName();",
    "right" : "name = end.normalName();",
    "info" : "ExpressionStatement[6222-6246]:ExpressionStatement[6222-6246]"
  }, {
    "left" : "if (name.equals(\"head\"))",
    "right" : "if (name.equals(\"head\"))",
    "info" : "IfStatement[6267-6634]:IfStatement[6267-6634]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6292-6399]:Block[6292-6399]"
  }, {
    "left" : "tb.pop();",
    "right" : "tb.pop();",
    "info" : "ExpressionStatement[6318-6327]:ExpressionStatement[6318-6327]"
  }, {
    "left" : "tb.transition(AfterHead);",
    "right" : "tb.transition(AfterHead);",
    "info" : "ExpressionStatement[6352-6377]:ExpressionStatement[6352-6377]"
  }, {
    "left" : "if (StringUtil.in(name, \"body\", \"html\", \"br\"))",
    "right" : "if (StringUtil.in(name, \"body\", \"html\", \"br\"))",
    "info" : "IfStatement[6405-6634]:IfStatement[6405-6634]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6452-6527]:Block[6452-6527]"
  }, {
    "left" : "return anythingElse(t, tb);",
    "right" : "return anythingElse(t, tb);",
    "info" : "ReturnStatement[6478-6505]:ReturnStatement[6478-6505]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6533-6634]:Block[6533-6634]"
  }, {
    "left" : "tb.error(this);",
    "right" : "tb.error(this);",
    "info" : "ExpressionStatement[6559-6574]:ExpressionStatement[6559-6574]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[6599-6612]:ReturnStatement[6599-6612]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[6655-6661]:BreakStatement[6655-6661]"
  }, {
    "left" : "default:",
    "right" : "default:",
    "info" : "SwitchCase[6678-6686]:SwitchCase[6678-6686]"
  }, {
    "left" : "return anythingElse(t, tb);",
    "right" : "return anythingElse(t, tb);",
    "info" : "ReturnStatement[6707-6734]:ReturnStatement[6707-6734]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[6761-6773]:ReturnStatement[6761-6773]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[6793-6800]:Modifier[6793-6800]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[6801-6808]:PrimitiveType[6801-6808]"
  }, {
    "left" : "anythingElse",
    "right" : "anythingElse",
    "info" : "SimpleName[6809-6821]:SimpleName[6809-6821]"
  }, {
    "left" : "Token t",
    "right" : "Token t",
    "info" : "SingleVariableDeclaration[6822-6829]:SingleVariableDeclaration[6822-6829]"
  }, {
    "left" : "TreeBuilder tb",
    "right" : "TreeBuilder tb",
    "info" : "SingleVariableDeclaration[6831-6845]:SingleVariableDeclaration[6831-6845]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6847-6930]:Block[6847-6930]"
  }, {
    "left" : "tb.processEndTag(\"head\");",
    "right" : "tb.processEndTag(\"head\");",
    "info" : "ExpressionStatement[6861-6886]:ExpressionStatement[6861-6886]"
  }, {
    "left" : "return tb.process(t);",
    "right" : "return tb.process(t);",
    "info" : "ReturnStatement[6899-6920]:ReturnStatement[6899-6920]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[6967-6974]:PrimitiveType[6967-6974]"
  }, {
    "left" : "process",
    "right" : "process",
    "info" : "SimpleName[6975-6982]:SimpleName[6975-6982]"
  }, {
    "left" : "Token t",
    "right" : "Token t",
    "info" : "SingleVariableDeclaration[6983-6990]:SingleVariableDeclaration[6983-6990]"
  }, {
    "left" : "HtmlTreeBuilder tb",
    "right" : "HtmlTreeBuilder tb",
    "info" : "SingleVariableDeclaration[6992-7010]:SingleVariableDeclaration[6992-7010]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7012-8040]:Block[7012-8040]"
  }, {
    "left" : "if (t.isDoctype())",
    "right" : "if (t.isDoctype())",
    "info" : "IfStatement[7026-8005]:IfStatement[7026-8005]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7045-7092]:Block[7045-7092]"
  }, {
    "left" : "tb.error(this);",
    "right" : "tb.error(this);",
    "info" : "ExpressionStatement[7063-7078]:ExpressionStatement[7063-7078]"
  }, {
    "left" : "if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\"))",
    "right" : "if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\"))",
    "info" : "IfStatement[7098-8005]:IfStatement[7098-8005]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7164-7225]:Block[7164-7225]"
  }, {
    "left" : "return tb.process(t, InBody);",
    "right" : "return tb.process(t, InBody);",
    "info" : "ReturnStatement[7182-7211]:ReturnStatement[7182-7211]"
  }, {
    "left" : "if (t.isEndTag() && t.asEndTag().normalName().equals(\"noscript\"))",
    "right" : "if (t.isEndTag() && t.asEndTag().normalName().equals(\"noscript\"))",
    "info" : "IfStatement[7231-8005]:IfStatement[7231-8005]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7297-7377]:Block[7297-7377]"
  }, {
    "left" : "tb.pop();",
    "right" : "tb.pop();",
    "info" : "ExpressionStatement[7315-7324]:ExpressionStatement[7315-7324]"
  }, {
    "left" : "tb.transition(InHead);",
    "right" : "tb.transition(InHead);",
    "info" : "ExpressionStatement[7341-7363]:ExpressionStatement[7341-7363]"
  }, {
    "left" : "if (isWhitespace(t) || t.isComment() || (t.isStartTag() && StringUtil.in(t.asStartTag().normalName(),\n                    \"basefont\", \"bgsound\", \"link\", \"meta\", \"noframes\", \"style\")))",
    "right" : "if (isWhitespace(t) || t.isComment() || (t.isStartTag() && StringUtil.in(t.asStartTag().normalName(),\n                    \"basefont\", \"bgsound\", \"link\", \"meta\", \"noframes\", \"style\")))",
    "info" : "IfStatement[7383-8005]:IfStatement[7383-8005]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7567-7628]:Block[7567-7628]"
  }, {
    "left" : "return tb.process(t, InHead);",
    "right" : "return tb.process(t, InHead);",
    "info" : "ReturnStatement[7585-7614]:ReturnStatement[7585-7614]"
  }, {
    "left" : "if (t.isEndTag() && t.asEndTag().normalName().equals(\"br\"))",
    "right" : "if (t.isEndTag() && t.asEndTag().normalName().equals(\"br\"))",
    "info" : "IfStatement[7634-8005]:IfStatement[7634-8005]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7694-7753]:Block[7694-7753]"
  }, {
    "left" : "return anythingElse(t, tb);",
    "right" : "return anythingElse(t, tb);",
    "info" : "ReturnStatement[7712-7739]:ReturnStatement[7712-7739]"
  }, {
    "left" : "if ((t.isStartTag() && StringUtil.in(t.asStartTag().normalName(), \"head\", \"noscript\")) || t.isEndTag())",
    "right" : "if ((t.isStartTag() && StringUtil.in(t.asStartTag().normalName(), \"head\", \"noscript\")) || t.isEndTag())",
    "info" : "IfStatement[7759-8005]:IfStatement[7759-8005]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7863-7940]:Block[7863-7940]"
  }, {
    "left" : "tb.error(this);",
    "right" : "tb.error(this);",
    "info" : "ExpressionStatement[7881-7896]:ExpressionStatement[7881-7896]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[7913-7926]:ReturnStatement[7913-7926]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7946-8005]:Block[7946-8005]"
  }, {
    "left" : "return anythingElse(t, tb);",
    "right" : "return anythingElse(t, tb);",
    "info" : "ReturnStatement[7964-7991]:ReturnStatement[7964-7991]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[8018-8030]:ReturnStatement[8018-8030]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[8050-8057]:Modifier[8050-8057]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[8058-8065]:PrimitiveType[8058-8065]"
  }, {
    "left" : "anythingElse",
    "right" : "anythingElse",
    "info" : "SimpleName[8066-8078]:SimpleName[8066-8078]"
  }, {
    "left" : "Token t",
    "right" : "Token t",
    "info" : "SingleVariableDeclaration[8079-8086]:SingleVariableDeclaration[8079-8086]"
  }, {
    "left" : "HtmlTreeBuilder tb",
    "right" : "HtmlTreeBuilder tb",
    "info" : "SingleVariableDeclaration[8088-8106]:SingleVariableDeclaration[8088-8106]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8108-8237]:Block[8108-8237]"
  }, {
    "left" : "tb.error(this);",
    "right" : "tb.error(this);",
    "info" : "ExpressionStatement[8122-8137]:ExpressionStatement[8122-8137]"
  }, {
    "left" : "tb.insert(new Token.Character().data(t.toString()));",
    "right" : "tb.insert(new Token.Character().data(t.toString()));",
    "info" : "ExpressionStatement[8150-8202]:ExpressionStatement[8150-8202]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[8215-8227]:ReturnStatement[8215-8227]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[8269-8276]:PrimitiveType[8269-8276]"
  }, {
    "left" : "process",
    "right" : "process",
    "info" : "SimpleName[8277-8284]:SimpleName[8277-8284]"
  }, {
    "left" : "Token t",
    "right" : "Token t",
    "info" : "SingleVariableDeclaration[8285-8292]:SingleVariableDeclaration[8285-8292]"
  }, {
    "left" : "HtmlTreeBuilder tb",
    "right" : "HtmlTreeBuilder tb",
    "info" : "SingleVariableDeclaration[8294-8312]:SingleVariableDeclaration[8294-8312]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8314-10048]:Block[8314-10048]"
  }, {
    "left" : "if (isWhitespace(t))",
    "right" : "if (isWhitespace(t))",
    "info" : "IfStatement[8328-10013]:IfStatement[8328-10013]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8349-8408]:Block[8349-8408]"
  }, {
    "left" : "tb.insert(t.asCharacter());",
    "right" : "tb.insert(t.asCharacter());",
    "info" : "ExpressionStatement[8367-8394]:ExpressionStatement[8367-8394]"
  }, {
    "left" : "if (t.isComment())",
    "right" : "if (t.isComment())",
    "info" : "IfStatement[8414-10013]:IfStatement[8414-10013]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8433-8490]:Block[8433-8490]"
  }, {
    "left" : "tb.insert(t.asComment());",
    "right" : "tb.insert(t.asComment());",
    "info" : "ExpressionStatement[8451-8476]:ExpressionStatement[8451-8476]"
  }, {
    "left" : "if (t.isDoctype())",
    "right" : "if (t.isDoctype())",
    "info" : "IfStatement[8496-10013]:IfStatement[8496-10013]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8515-8562]:Block[8515-8562]"
  }, {
    "left" : "tb.error(this);",
    "right" : "tb.error(this);",
    "info" : "ExpressionStatement[8533-8548]:ExpressionStatement[8533-8548]"
  }, {
    "left" : "if (t.isStartTag())",
    "right" : "if (t.isStartTag())",
    "info" : "IfStatement[8568-10013]:IfStatement[8568-10013]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8588-9682]:Block[8588-9682]"
  }, {
    "left" : "Token.StartTag startTag = t.asStartTag();",
    "right" : "Token.StartTag startTag = t.asStartTag();",
    "info" : "VariableDeclarationStatement[8606-8647]:VariableDeclarationStatement[8606-8647]"
  }, {
    "left" : "String name = startTag.normalName();",
    "right" : "String name = startTag.normalName();",
    "info" : "VariableDeclarationStatement[8664-8700]:VariableDeclarationStatement[8664-8700]"
  }, {
    "left" : "if (name.equals(\"html\"))",
    "right" : "if (name.equals(\"html\"))",
    "info" : "IfStatement[8717-9668]:IfStatement[8717-9668]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8742-8811]:Block[8742-8811]"
  }, {
    "left" : "return tb.process(t, InBody);",
    "right" : "return tb.process(t, InBody);",
    "info" : "ReturnStatement[8764-8793]:ReturnStatement[8764-8793]"
  }, {
    "left" : "if (name.equals(\"body\"))",
    "right" : "if (name.equals(\"body\"))",
    "info" : "IfStatement[8817-9668]:IfStatement[8817-9668]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8842-8987]:Block[8842-8987]"
  }, {
    "left" : "tb.insert(startTag);",
    "right" : "tb.insert(startTag);",
    "info" : "ExpressionStatement[8864-8884]:ExpressionStatement[8864-8884]"
  }, {
    "left" : "tb.framesetOk(false);",
    "right" : "tb.framesetOk(false);",
    "info" : "ExpressionStatement[8905-8926]:ExpressionStatement[8905-8926]"
  }, {
    "left" : "tb.transition(InBody);",
    "right" : "tb.transition(InBody);",
    "info" : "ExpressionStatement[8947-8969]:ExpressionStatement[8947-8969]"
  }, {
    "left" : "if (name.equals(\"frameset\"))",
    "right" : "if (name.equals(\"frameset\"))",
    "info" : "IfStatement[8993-9668]:IfStatement[8993-9668]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9022-9129]:Block[9022-9129]"
  }, {
    "left" : "tb.insert(startTag);",
    "right" : "tb.insert(startTag);",
    "info" : "ExpressionStatement[9044-9064]:ExpressionStatement[9044-9064]"
  }, {
    "left" : "tb.transition(InFrameset);",
    "right" : "tb.transition(InFrameset);",
    "info" : "ExpressionStatement[9085-9111]:ExpressionStatement[9085-9111]"
  }, {
    "left" : "if (StringUtil.in(name, \"base\", \"basefont\", \"bgsound\", \"link\", \"meta\", \"noframes\", \"script\", \"style\", \"title\"))",
    "right" : "if (StringUtil.in(name, \"base\", \"basefont\", \"bgsound\", \"link\", \"meta\", \"noframes\", \"script\", \"style\", \"title\"))",
    "info" : "IfStatement[9135-9668]:IfStatement[9135-9668]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9247-9482]:Block[9247-9482]"
  }, {
    "left" : "tb.error(this);",
    "right" : "tb.error(this);",
    "info" : "ExpressionStatement[9269-9284]:ExpressionStatement[9269-9284]"
  }, {
    "left" : "Element head = tb.getHeadElement();",
    "right" : "Element head = tb.getHeadElement();",
    "info" : "VariableDeclarationStatement[9305-9340]:VariableDeclarationStatement[9305-9340]"
  }, {
    "left" : "tb.push(head);",
    "right" : "tb.push(head);",
    "info" : "ExpressionStatement[9361-9375]:ExpressionStatement[9361-9375]"
  }, {
    "left" : "tb.process(t, InHead);",
    "right" : "tb.process(t, InHead);",
    "info" : "ExpressionStatement[9396-9418]:ExpressionStatement[9396-9418]"
  }, {
    "left" : "tb.removeFromStack(head);",
    "right" : "tb.removeFromStack(head);",
    "info" : "ExpressionStatement[9439-9464]:ExpressionStatement[9439-9464]"
  }, {
    "left" : "if (name.equals(\"head\"))",
    "right" : "if (name.equals(\"head\"))",
    "info" : "IfStatement[9488-9668]:IfStatement[9488-9668]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9513-9602]:Block[9513-9602]"
  }, {
    "left" : "tb.error(this);",
    "right" : "tb.error(this);",
    "info" : "ExpressionStatement[9535-9550]:ExpressionStatement[9535-9550]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[9571-9584]:ReturnStatement[9571-9584]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9608-9668]:Block[9608-9668]"
  }, {
    "left" : "anythingElse(t, tb);",
    "right" : "anythingElse(t, tb);",
    "info" : "ExpressionStatement[9630-9650]:ExpressionStatement[9630-9650]"
  }, {
    "left" : "if (t.isEndTag())",
    "right" : "if (t.isEndTag())",
    "info" : "IfStatement[9688-10013]:IfStatement[9688-10013]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9706-9955]:Block[9706-9955]"
  }, {
    "left" : "if (StringUtil.in(t.asEndTag().normalName(), \"body\", \"html\"))",
    "right" : "if (StringUtil.in(t.asEndTag().normalName(), \"body\", \"html\"))",
    "info" : "IfStatement[9724-9941]:IfStatement[9724-9941]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9786-9846]:Block[9786-9846]"
  }, {
    "left" : "anythingElse(t, tb);",
    "right" : "anythingElse(t, tb);",
    "info" : "ExpressionStatement[9808-9828]:ExpressionStatement[9808-9828]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9852-9941]:Block[9852-9941]"
  }, {
    "left" : "tb.error(this);",
    "right" : "tb.error(this);",
    "info" : "ExpressionStatement[9874-9889]:ExpressionStatement[9874-9889]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[9910-9923]:ReturnStatement[9910-9923]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9961-10013]:Block[9961-10013]"
  }, {
    "left" : "anythingElse(t, tb);",
    "right" : "anythingElse(t, tb);",
    "info" : "ExpressionStatement[9979-9999]:ExpressionStatement[9979-9999]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[10026-10038]:ReturnStatement[10026-10038]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[10058-10065]:Modifier[10058-10065]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[10066-10073]:PrimitiveType[10066-10073]"
  }, {
    "left" : "anythingElse",
    "right" : "anythingElse",
    "info" : "SimpleName[10074-10086]:SimpleName[10074-10086]"
  }, {
    "left" : "Token t",
    "right" : "Token t",
    "info" : "SingleVariableDeclaration[10087-10094]:SingleVariableDeclaration[10087-10094]"
  }, {
    "left" : "HtmlTreeBuilder tb",
    "right" : "HtmlTreeBuilder tb",
    "info" : "SingleVariableDeclaration[10096-10114]:SingleVariableDeclaration[10096-10114]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10116-10234]:Block[10116-10234]"
  }, {
    "left" : "tb.processStartTag(\"body\");",
    "right" : "tb.processStartTag(\"body\");",
    "info" : "ExpressionStatement[10130-10157]:ExpressionStatement[10130-10157]"
  }, {
    "left" : "tb.framesetOk(true);",
    "right" : "tb.framesetOk(true);",
    "info" : "ExpressionStatement[10170-10190]:ExpressionStatement[10170-10190]"
  }, {
    "left" : "return tb.process(t);",
    "right" : "return tb.process(t);",
    "info" : "ReturnStatement[10203-10224]:ReturnStatement[10203-10224]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[10263-10270]:PrimitiveType[10263-10270]"
  }, {
    "left" : "process",
    "right" : "process",
    "info" : "SimpleName[10271-10278]:SimpleName[10271-10278]"
  }, {
    "left" : "Token t",
    "right" : "Token t",
    "info" : "SingleVariableDeclaration[10279-10286]:SingleVariableDeclaration[10279-10286]"
  }, {
    "left" : "HtmlTreeBuilder tb",
    "right" : "HtmlTreeBuilder tb",
    "info" : "SingleVariableDeclaration[10288-10306]:SingleVariableDeclaration[10288-10306]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10308-38446]:Block[10308-38527]"
  }, {
    "left" : "switch (t.type) {\n                case Character: {\n                    Token.Character c = t.asCharacter();\n                    if (c.getData().equals(nullString)) {\n                        // todo confirm that check\n                        tb.error(this);\n                        return false;\n                    } else if (tb.framesetOk() && isWhitespace(c)) { // don't check if whitespace if frames already closed\n                        tb.reconstructFormattingElements();\n                        tb.insert(c);\n                    } else {\n                        tb.reconstructFormattingElements();\n                        tb.insert(c);\n                        tb.framesetOk(false);\n                    }\n                    break;\n                }\n                case Comment: {\n                    tb.insert(t.asComment());\n                    break;\n                }\n                case Doctype: {\n                    tb.error(this);\n                    return false;\n                }\n                case StartTag:\n                    Token.StartTag startTag = t.asStartTag();\n                    // todo - refactor to a switch statement\n                    String name = startTag.normalName();\n                    if (name.equals(\"a\")) {\n                        if (tb.getActiveFormattingElement(\"a\") != null) {\n                            tb.error(this);\n                            tb.processEndTag(\"a\");\n\n                            // still on stack?\n                            Element remainingA = tb.getFromStack(\"a\");\n                            if (remainingA != null) {\n                                tb.removeFromActiveFormattingElements(remainingA);\n                                tb.removeFromStack(remainingA);\n                            }\n                        }\n                        tb.reconstructFormattingElements();\n                        Element a = tb.insert(startTag);\n                        tb.pushActiveFormattingElements(a);\n                    } else if (StringUtil.inSorted(name, Constants.InBodyStartEmptyFormatters)) {\n                        tb.reconstructFormattingElements();\n                        tb.insertEmpty(startTag);\n                        tb.framesetOk(false);\n                    } else if (StringUtil.inSorted(name, Constants.InBodyStartPClosers)) {\n                        if (tb.inButtonScope(\"p\")) {\n                            tb.processEndTag(\"p\");\n                        }\n                        tb.insert(startTag);\n                    } else if (name.equals(\"span\")) {\n                        // same as final else, but short circuits lots of checks\n                        tb.reconstructFormattingElements();\n                        tb.insert(startTag);\n                    } else if (name.equals(\"li\")) {\n                        tb.framesetOk(false);\n                        ArrayList<Element> stack = tb.getStack();\n                        for (int i = stack.size() - 1; i > 0; i--) {\n                            Element el = stack.get(i);\n                            if (el.nodeName().equals(\"li\")) {\n                                tb.processEndTag(\"li\");\n                                break;\n                            }\n                            if (tb.isSpecial(el) && !StringUtil.inSorted(el.nodeName(), Constants.InBodyStartLiBreakers))\n                                break;\n                        }\n                        if (tb.inButtonScope(\"p\")) {\n                            tb.processEndTag(\"p\");\n                        }\n                        tb.insert(startTag);\n                    } else if (name.equals(\"html\")) {\n                        tb.error(this);\n                        // merge attributes onto real html\n                        Element html = tb.getStack().get(0);\n                        for (Attribute attribute : startTag.getAttributes()) {\n                            if (!html.hasAttr(attribute.getKey()))\n                                html.attributes().put(attribute);\n                        }\n                    } else if (StringUtil.inSorted(name, Constants.InBodyStartToHead)) {\n                        return tb.process(t, InHead);\n                    } else if (name.equals(\"body\")) {\n                        tb.error(this);\n                        ArrayList<Element> stack = tb.getStack();\n                        if (stack.size() == 1 || (stack.size() > 2 && !stack.get(1).nodeName().equals(\"body\"))) {\n                            // only in fragment case\n                            return false; // ignore\n                        } else {\n                            tb.framesetOk(false);\n                            Element body = stack.get(1);\n                            for (Attribute attribute : startTag.getAttributes()) {\n                                if (!body.hasAttr(attribute.getKey()))\n                                    body.attributes().put(attribute);\n                            }\n                        }\n                    } else if (name.equals(\"frameset\")) {\n                        tb.error(this);\n                        ArrayList<Element> stack = tb.getStack();\n                        if (stack.size() == 1 || (stack.size() > 2 && !stack.get(1).nodeName().equals(\"body\"))) {\n                            // only in fragment case\n                            return false; // ignore\n                        } else if (!tb.framesetOk()) {\n                            return false; // ignore frameset\n                        } else {\n                            Element second = stack.get(1);\n                            if (second.parent() != null)\n                                second.remove();\n                            // pop up to html element\n                            while (stack.size() > 1)\n                                stack.remove(stack.size()-1);\n                            tb.insert(startTag);\n                            tb.transition(InFrameset);\n                        }\n                    } else if (StringUtil.inSorted(name, Constants.Headings)) {\n                        if (tb.inButtonScope(\"p\")) {\n                            tb.processEndTag(\"p\");\n                        }\n                        if (StringUtil.inSorted(tb.currentElement().nodeName(), Constants.Headings)) {\n                            tb.error(this);\n                            tb.pop();\n                        }\n                        tb.insert(startTag);\n                    } else if (StringUtil.inSorted(name, Constants.InBodyStartPreListing)) {\n                        if (tb.inButtonScope(\"p\")) {\n                            tb.processEndTag(\"p\");\n                        }\n                        tb.insert(startTag);\n                        tb.framesetOk(false);\n                    } else if (name.equals(\"form\")) {\n                        if (tb.getFormElement() != null) {\n                            tb.error(this);\n                            return false;\n                        }\n                        if (tb.inButtonScope(\"p\")) {\n                            tb.processEndTag(\"p\");\n                        }\n                        tb.insertForm(startTag, true);\n                    } else if (StringUtil.inSorted(name, Constants.DdDt)) {\n                        tb.framesetOk(false);\n                        ArrayList<Element> stack = tb.getStack();\n                        for (int i = stack.size() - 1; i > 0; i--) {\n                            Element el = stack.get(i);\n                            if (StringUtil.inSorted(el.nodeName(), Constants.DdDt)) {\n                                tb.processEndTag(el.nodeName());\n                                break;\n                            }\n                            if (tb.isSpecial(el) && !StringUtil.inSorted(el.nodeName(), Constants.InBodyStartLiBreakers))\n                                break;\n                        }\n                        if (tb.inButtonScope(\"p\")) {\n                            tb.processEndTag(\"p\");\n                        }\n                        tb.insert(startTag);\n                    } else if (name.equals(\"plaintext\")) {\n                        if (tb.inButtonScope(\"p\")) {\n                            tb.processEndTag(\"p\");\n                        }\n                        tb.insert(startTag);\n                        tb.tokeniser.transition(TokeniserState.PLAINTEXT); // once in, never gets out\n                    } else if (name.equals(\"button\")) {\n                        if (tb.inButtonScope(\"button\")) {\n                            // close and reprocess\n                            tb.error(this);\n                            tb.processEndTag(\"button\");\n                            tb.process(startTag);\n                        } else {\n                            tb.reconstructFormattingElements();\n                            tb.insert(startTag);\n                            tb.framesetOk(false);\n                        }\n                    } else if (StringUtil.inSorted(name, Constants.Formatters)) {\n                        tb.reconstructFormattingElements();\n                        Element el = tb.insert(startTag);\n                        tb.pushActiveFormattingElements(el);\n                    } else if (name.equals(\"nobr\")) {\n                        tb.reconstructFormattingElements();\n                        if (tb.inScope(\"nobr\")) {\n                            tb.error(this);\n                            tb.processEndTag(\"nobr\");\n                            tb.reconstructFormattingElements();\n                        }\n                        Element el = tb.insert(startTag);\n                        tb.pushActiveFormattingElements(el);\n                    } else if (StringUtil.inSorted(name, Constants.InBodyStartApplets)) {\n                        tb.reconstructFormattingElements();\n                        tb.insert(startTag);\n                        tb.insertMarkerToFormattingElements();\n                        tb.framesetOk(false);\n                    } else if (name.equals(\"table\")) {\n                        if (tb.getDocument().quirksMode() != Document.QuirksMode.quirks && tb.inButtonScope(\"p\")) {\n                            tb.processEndTag(\"p\");\n                        }\n                        tb.insert(startTag);\n                        tb.framesetOk(false);\n                        tb.transition(InTable);\n                    } else if (name.equals(\"input\")) {\n                        tb.reconstructFormattingElements();\n                        Element el = tb.insertEmpty(startTag);\n                        if (!el.attr(\"type\").equalsIgnoreCase(\"hidden\"))\n                            tb.framesetOk(false);\n                    } else if (StringUtil.inSorted(name, Constants.InBodyStartMedia)) {\n                        tb.insertEmpty(startTag);\n                    } else if (name.equals(\"hr\")) {\n                        if (tb.inButtonScope(\"p\")) {\n                            tb.processEndTag(\"p\");\n                        }\n                        tb.insertEmpty(startTag);\n                        tb.framesetOk(false);\n                    } else if (name.equals(\"image\")) {\n                        if (tb.getFromStack(\"svg\") == null)\n                            return tb.process(startTag.name(\"img\")); // change <image> to <img>, unless in svg\n                        else\n                            tb.insert(startTag);\n                    } else if (name.equals(\"isindex\")) {\n                        // how much do we care about the early 90s?\n                        tb.error(this);\n                        if (tb.getFormElement() != null)\n                            return false;\n\n                        tb.processStartTag(\"form\");\n                        if (startTag.attributes.hasKey(\"action\")) {\n                            Element form = tb.getFormElement();\n                            form.attr(\"action\", startTag.attributes.get(\"action\"));\n                        }\n                        tb.processStartTag(\"hr\");\n                        tb.processStartTag(\"label\");\n                        // hope you like english.\n                        String prompt = startTag.attributes.hasKey(\"prompt\") ?\n                                startTag.attributes.get(\"prompt\") :\n                                \"This is a searchable index. Enter search keywords: \";\n\n                        tb.process(new Token.Character().data(prompt));\n\n                        // input\n                        Attributes inputAttribs = new Attributes();\n                        for (Attribute attr : startTag.attributes) {\n                            if (!StringUtil.inSorted(attr.getKey(), Constants.InBodyStartInputAttribs))\n                                inputAttribs.put(attr);\n                        }\n                        inputAttribs.put(\"name\", \"isindex\");\n                        tb.processStartTag(\"input\", inputAttribs);\n                        tb.processEndTag(\"label\");\n                        tb.processStartTag(\"hr\");\n                        tb.processEndTag(\"form\");\n                    } else if (name.equals(\"textarea\")) {\n                        tb.insert(startTag);\n                        // todo: If the next token is a U+000A LINE FEED (LF) character token, then ignore that token and move on to the next one. (Newlines at the start of textarea elements are ignored as an authoring convenience.)\n                        tb.tokeniser.transition(TokeniserState.Rcdata);\n                        tb.markInsertionMode();\n                        tb.framesetOk(false);\n                        tb.transition(Text);\n                    } else if (name.equals(\"xmp\")) {\n                        if (tb.inButtonScope(\"p\")) {\n                            tb.processEndTag(\"p\");\n                        }\n                        tb.reconstructFormattingElements();\n                        tb.framesetOk(false);\n                        handleRawtext(startTag, tb);\n                    } else if (name.equals(\"iframe\")) {\n                        tb.framesetOk(false);\n                        handleRawtext(startTag, tb);\n                    } else if (name.equals(\"noembed\")) {\n                        // also handle noscript if script enabled\n                        handleRawtext(startTag, tb);\n                    } else if (name.equals(\"select\")) {\n                        tb.reconstructFormattingElements();\n                        tb.insert(startTag);\n                        tb.framesetOk(false);\n\n                        HtmlTreeBuilderState state = tb.state();\n                        if (state.equals(InTable) || state.equals(InCaption) || state.equals(InTableBody) || state.equals(InRow) || state.equals(InCell))\n                            tb.transition(InSelectInTable);\n                        else\n                            tb.transition(InSelect);\n                    } else if (StringUtil.inSorted(name, Constants.InBodyStartOptions)) {\n                        if (tb.currentElement().nodeName().equals(\"option\"))\n                            tb.processEndTag(\"option\");\n                        tb.reconstructFormattingElements();\n                        tb.insert(startTag);\n                    } else if (StringUtil.inSorted(name, Constants.InBodyStartRuby)) {\n                        if (tb.inScope(\"ruby\")) {\n                            tb.generateImpliedEndTags();\n                            if (!tb.currentElement().nodeName().equals(\"ruby\")) {\n                                tb.error(this);\n                                tb.popStackToBefore(\"ruby\"); // i.e. close up to but not include name\n                            }\n                            tb.insert(startTag);\n                        }\n                    } else if (name.equals(\"math\")) {\n                        tb.reconstructFormattingElements();\n                        // todo: handle A start tag whose tag name is \"math\" (i.e. foreign, mathml)\n                        tb.insert(startTag);\n                    } else if (name.equals(\"svg\")) {\n                        tb.reconstructFormattingElements();\n                        // todo: handle A start tag whose tag name is \"svg\" (xlink, svg)\n                        tb.insert(startTag);\n                    } else if (StringUtil.inSorted(name, Constants.InBodyStartDrop)) {\n                        tb.error(this);\n                        return false;\n                    } else {\n                        tb.reconstructFormattingElements();\n                        tb.insert(startTag);\n                    }\n                    break;\n\n                case EndTag:\n                    Token.EndTag endTag = t.asEndTag();\n                    name = endTag.normalName();\n                    if (StringUtil.inSorted(name, Constants.InBodyEndAdoptionFormatters)) {\n                        // Adoption Agency Algorithm.\n                        for (int i = 0; i < 8; i++) {\n                            Element formatEl = tb.getActiveFormattingElement(name);\n                            if (formatEl == null)\n                                return anyOtherEndTag(t, tb);\n                            else if (!tb.onStack(formatEl)) {\n                                tb.error(this);\n                                tb.removeFromActiveFormattingElements(formatEl);\n                                return true;\n                            } else if (!tb.inScope(formatEl.nodeName())) {\n                                tb.error(this);\n                                return false;\n                            } else if (tb.currentElement() != formatEl)\n                                tb.error(this);\n\n                            Element furthestBlock = null;\n                            Element commonAncestor = null;\n                            boolean seenFormattingElement = false;\n                            ArrayList<Element> stack = tb.getStack();\n                            // the spec doesn't limit to < 64, but in degenerate cases (9000+ stack depth) this prevents\n                            // run-aways\n                            final int stackSize = stack.size();\n                            for (int si = 0; si < stackSize && si < 64; si++) {\n                                Element el = stack.get(si);\n                                if (el == formatEl) {\n                                    commonAncestor = stack.get(si - 1);\n                                    seenFormattingElement = true;\n                                } else if (seenFormattingElement && tb.isSpecial(el)) {\n                                    furthestBlock = el;\n                                    break;\n                                }\n                            }\n                            if (furthestBlock == null) {\n                                tb.popStackToClose(formatEl.nodeName());\n                                tb.removeFromActiveFormattingElements(formatEl);\n                                return true;\n                            }\n\n                            // todo: Let a bookmark note the position of the formatting element in the list of active formatting elements relative to the elements on either side of it in the list.\n                            // does that mean: int pos of format el in list?\n                            Element node = furthestBlock;\n                            Element lastNode = furthestBlock;\n                            for (int j = 0; j < 3; j++) {\n                                if (tb.onStack(node))\n                                    node = tb.aboveOnStack(node);\n                                if (!tb.isInActiveFormattingElements(node)) { // note no bookmark check\n                                    tb.removeFromStack(node);\n                                    continue;\n                                } else if (node == formatEl)\n                                    break;\n\n                                Element replacement = new Element(Tag.valueOf(node.nodeName(), ParseSettings.preserveCase), tb.getBaseUri());\n                                // case will follow the original node (so honours ParseSettings)\n                                tb.replaceActiveFormattingElement(node, replacement);\n                                tb.replaceOnStack(node, replacement);\n                                node = replacement;\n\n                                if (lastNode == furthestBlock) {\n                                    // todo: move the aforementioned bookmark to be immediately after the new node in the list of active formatting elements.\n                                    // not getting how this bookmark both straddles the element above, but is inbetween here...\n                                }\n                                if (lastNode.parent() != null)\n                                    lastNode.remove();\n                                node.appendChild(lastNode);\n\n                                lastNode = node;\n                            }\n\n                            if (StringUtil.inSorted(commonAncestor.nodeName(), Constants.InBodyEndTableFosters)) {\n                                if (lastNode.parent() != null)\n                                    lastNode.remove();\n                                tb.insertInFosterParent(lastNode);\n                            } else {\n                                if (lastNode.parent() != null)\n                                    lastNode.remove();\n                                commonAncestor.appendChild(lastNode);\n                            }\n\n                            Element adopter = new Element(formatEl.tag(), tb.getBaseUri());\n                            adopter.attributes().addAll(formatEl.attributes());\n                            Node[] childNodes = furthestBlock.childNodes().toArray(new Node[furthestBlock.childNodeSize()]);\n                            for (Node childNode : childNodes) {\n                                adopter.appendChild(childNode); // append will reparent. thus the clone to avoid concurrent mod.\n                            }\n                            furthestBlock.appendChild(adopter);\n                            tb.removeFromActiveFormattingElements(formatEl);\n                            // todo: insert the new element into the list of active formatting elements at the position of the aforementioned bookmark.\n                            tb.removeFromStack(formatEl);\n                            tb.insertOnStackAfter(furthestBlock, adopter);\n                        }\n                    } else if (StringUtil.inSorted(name, Constants.InBodyEndClosers)) {\n                        if (!tb.inScope(name)) {\n                            // nothing to close\n                            tb.error(this);\n                            return false;\n                        } else {\n                            tb.generateImpliedEndTags();\n                            if (!tb.currentElement().nodeName().equals(name))\n                                tb.error(this);\n                            tb.popStackToClose(name);\n                        }\n                    } else if (name.equals(\"span\")) {\n                        // same as final fall through, but saves short circuit\n                        return anyOtherEndTag(t, tb);\n                    } else if (name.equals(\"li\")) {\n                        if (!tb.inListItemScope(name)) {\n                            tb.error(this);\n                            return false;\n                        } else {\n                            tb.generateImpliedEndTags(name);\n                            if (!tb.currentElement().nodeName().equals(name))\n                                tb.error(this);\n                            tb.popStackToClose(name);\n                        }\n                    } else if (name.equals(\"body\")) {\n                        if (!tb.inScope(\"body\")) {\n                            tb.error(this);\n                            return false;\n                        } else {\n                            // todo: error if stack contains something not dd, dt, li, optgroup, option, p, rp, rt, tbody, td, tfoot, th, thead, tr, body, html\n                            tb.transition(AfterBody);\n                        }\n                    } else if (name.equals(\"html\")) {\n                        boolean notIgnored = tb.processEndTag(\"body\");\n                        if (notIgnored)\n                            return tb.process(endTag);\n                    } else if (name.equals(\"form\")) {\n                        Element currentForm = tb.getFormElement();\n                        tb.setFormElement(null);\n                        if (currentForm == null || !tb.inScope(name)) {\n                            tb.error(this);\n                            return false;\n                        } else {\n                            tb.generateImpliedEndTags();\n                            if (!tb.currentElement().nodeName().equals(name))\n                                tb.error(this);\n                            // remove currentForm from stack. will shift anything under up.\n                            tb.removeFromStack(currentForm);\n                        }\n                    } else if (name.equals(\"p\")) {\n                        if (!tb.inButtonScope(name)) {\n                            tb.error(this);\n                            tb.processStartTag(name); // if no p to close, creates an empty <p></p>\n                            return tb.process(endTag);\n                        } else {\n                            tb.generateImpliedEndTags(name);\n                            if (!tb.currentElement().nodeName().equals(name))\n                                tb.error(this);\n                            tb.popStackToClose(name);\n                        }\n                    } else if (StringUtil.inSorted(name, Constants.DdDt)) {\n                        if (!tb.inScope(name)) {\n                            tb.error(this);\n                            return false;\n                        } else {\n                            tb.generateImpliedEndTags(name);\n                            if (!tb.currentElement().nodeName().equals(name))\n                                tb.error(this);\n                            tb.popStackToClose(name);\n                        }\n                    } else if (StringUtil.inSorted(name, Constants.Headings)) {\n                        if (!tb.inScope(Constants.Headings)) {\n                            tb.error(this);\n                            return false;\n                        } else {\n                            tb.generateImpliedEndTags(name);\n                            if (!tb.currentElement().nodeName().equals(name))\n                                tb.error(this);\n                            tb.popStackToClose(Constants.Headings);\n                        }\n                    } else if (name.equals(\"sarcasm\")) {\n                        // *sigh*\n                        return anyOtherEndTag(t, tb);\n                    } else if (StringUtil.inSorted(name, Constants.InBodyStartApplets)) {\n                        if (!tb.inScope(\"name\")) {\n                            if (!tb.inScope(name)) {\n                                tb.error(this);\n                                return false;\n                            }\n                            tb.generateImpliedEndTags();\n                            if (!tb.currentElement().nodeName().equals(name))\n                                tb.error(this);\n                            tb.popStackToClose(name);\n                            tb.clearFormattingElementsToLastMarker();\n                        }\n                    } else if (name.equals(\"br\")) {\n                        tb.error(this);\n                        tb.processStartTag(\"br\");\n                        return false;\n                    } else {\n                        return anyOtherEndTag(t, tb);\n                    }\n\n                    break;\n                case EOF:\n                    // todo: error if stack contains something not dd, dt, li, p, tbody, td, tfoot, th, thead, tr, body, html\n                    // stop parsing\n                    break;\n            }",
    "right" : "switch (t.type) {\n                case Character: {\n                    Token.Character c = t.asCharacter();\n                    if (c.getData().equals(nullString)) {\n                        // todo confirm that check\n                        tb.error(this);\n                        return false;\n                    } else if (tb.framesetOk() && isWhitespace(c)) { // don't check if whitespace if frames already closed\n                        tb.reconstructFormattingElements();\n                        tb.insert(c);\n                    } else {\n                        tb.reconstructFormattingElements();\n                        tb.insert(c);\n                        tb.framesetOk(false);\n                    }\n                    break;\n                }\n                case Comment: {\n                    tb.insert(t.asComment());\n                    break;\n                }\n                case Doctype: {\n                    tb.error(this);\n                    return false;\n                }\n                case StartTag:\n                    Token.StartTag startTag = t.asStartTag();\n                    // todo - refactor to a switch statement\n                    String name = startTag.normalName();\n                    if (name.equals(\"a\")) {\n                        if (tb.getActiveFormattingElement(\"a\") != null) {\n                            tb.error(this);\n                            tb.processEndTag(\"a\");\n\n                            // still on stack?\n                            Element remainingA = tb.getFromStack(\"a\");\n                            if (remainingA != null) {\n                                tb.removeFromActiveFormattingElements(remainingA);\n                                tb.removeFromStack(remainingA);\n                            }\n                        }\n                        tb.reconstructFormattingElements();\n                        Element a = tb.insert(startTag);\n                        tb.pushActiveFormattingElements(a);\n                    } else if (StringUtil.inSorted(name, Constants.InBodyStartEmptyFormatters)) {\n                        tb.reconstructFormattingElements();\n                        tb.insertEmpty(startTag);\n                        tb.framesetOk(false);\n                    } else if (StringUtil.inSorted(name, Constants.InBodyStartPClosers)) {\n                        if (tb.inButtonScope(\"p\")) {\n                            tb.processEndTag(\"p\");\n                        }\n                        tb.insert(startTag);\n                    } else if (name.equals(\"span\")) {\n                        // same as final else, but short circuits lots of checks\n                        tb.reconstructFormattingElements();\n                        tb.insert(startTag);\n                    } else if (name.equals(\"li\")) {\n                        tb.framesetOk(false);\n                        ArrayList<Element> stack = tb.getStack();\n                        for (int i = stack.size() - 1; i > 0; i--) {\n                            Element el = stack.get(i);\n                            if (el.nodeName().equals(\"li\")) {\n                                tb.processEndTag(\"li\");\n                                break;\n                            }\n                            if (tb.isSpecial(el) && !StringUtil.inSorted(el.nodeName(), Constants.InBodyStartLiBreakers))\n                                break;\n                        }\n                        if (tb.inButtonScope(\"p\")) {\n                            tb.processEndTag(\"p\");\n                        }\n                        tb.insert(startTag);\n                    } else if (name.equals(\"html\")) {\n                        tb.error(this);\n                        // merge attributes onto real html\n                        Element html = tb.getStack().get(0);\n                        for (Attribute attribute : startTag.getAttributes()) {\n                            if (!html.hasAttr(attribute.getKey()))\n                                html.attributes().put(attribute);\n                        }\n                    } else if (StringUtil.inSorted(name, Constants.InBodyStartToHead)) {\n                        return tb.process(t, InHead);\n                    } else if (name.equals(\"body\")) {\n                        tb.error(this);\n                        ArrayList<Element> stack = tb.getStack();\n                        if (stack.size() == 1 || (stack.size() > 2 && !stack.get(1).nodeName().equals(\"body\"))) {\n                            // only in fragment case\n                            return false; // ignore\n                        } else {\n                            tb.framesetOk(false);\n                            Element body = stack.get(1);\n                            for (Attribute attribute : startTag.getAttributes()) {\n                                if (!body.hasAttr(attribute.getKey()))\n                                    body.attributes().put(attribute);\n                            }\n                        }\n                    } else if (name.equals(\"frameset\")) {\n                        tb.error(this);\n                        ArrayList<Element> stack = tb.getStack();\n                        if (stack.size() == 1 || (stack.size() > 2 && !stack.get(1).nodeName().equals(\"body\"))) {\n                            // only in fragment case\n                            return false; // ignore\n                        } else if (!tb.framesetOk()) {\n                            return false; // ignore frameset\n                        } else {\n                            Element second = stack.get(1);\n                            if (second.parent() != null)\n                                second.remove();\n                            // pop up to html element\n                            while (stack.size() > 1)\n                                stack.remove(stack.size()-1);\n                            tb.insert(startTag);\n                            tb.transition(InFrameset);\n                        }\n                    } else if (StringUtil.inSorted(name, Constants.Headings)) {\n                        if (tb.inButtonScope(\"p\")) {\n                            tb.processEndTag(\"p\");\n                        }\n                        if (StringUtil.inSorted(tb.currentElement().nodeName(), Constants.Headings)) {\n                            tb.error(this);\n                            tb.pop();\n                        }\n                        tb.insert(startTag);\n                    } else if (StringUtil.inSorted(name, Constants.InBodyStartPreListing)) {\n                        if (tb.inButtonScope(\"p\")) {\n                            tb.processEndTag(\"p\");\n                        }\n                        tb.insert(startTag);\n                        tb.reader.matchConsume(\"\\n\"); // ignore LF if next token\n                        tb.framesetOk(false);\n                    } else if (name.equals(\"form\")) {\n                        if (tb.getFormElement() != null) {\n                            tb.error(this);\n                            return false;\n                        }\n                        if (tb.inButtonScope(\"p\")) {\n                            tb.processEndTag(\"p\");\n                        }\n                        tb.insertForm(startTag, true);\n                    } else if (StringUtil.inSorted(name, Constants.DdDt)) {\n                        tb.framesetOk(false);\n                        ArrayList<Element> stack = tb.getStack();\n                        for (int i = stack.size() - 1; i > 0; i--) {\n                            Element el = stack.get(i);\n                            if (StringUtil.inSorted(el.nodeName(), Constants.DdDt)) {\n                                tb.processEndTag(el.nodeName());\n                                break;\n                            }\n                            if (tb.isSpecial(el) && !StringUtil.inSorted(el.nodeName(), Constants.InBodyStartLiBreakers))\n                                break;\n                        }\n                        if (tb.inButtonScope(\"p\")) {\n                            tb.processEndTag(\"p\");\n                        }\n                        tb.insert(startTag);\n                    } else if (name.equals(\"plaintext\")) {\n                        if (tb.inButtonScope(\"p\")) {\n                            tb.processEndTag(\"p\");\n                        }\n                        tb.insert(startTag);\n                        tb.tokeniser.transition(TokeniserState.PLAINTEXT); // once in, never gets out\n                    } else if (name.equals(\"button\")) {\n                        if (tb.inButtonScope(\"button\")) {\n                            // close and reprocess\n                            tb.error(this);\n                            tb.processEndTag(\"button\");\n                            tb.process(startTag);\n                        } else {\n                            tb.reconstructFormattingElements();\n                            tb.insert(startTag);\n                            tb.framesetOk(false);\n                        }\n                    } else if (StringUtil.inSorted(name, Constants.Formatters)) {\n                        tb.reconstructFormattingElements();\n                        Element el = tb.insert(startTag);\n                        tb.pushActiveFormattingElements(el);\n                    } else if (name.equals(\"nobr\")) {\n                        tb.reconstructFormattingElements();\n                        if (tb.inScope(\"nobr\")) {\n                            tb.error(this);\n                            tb.processEndTag(\"nobr\");\n                            tb.reconstructFormattingElements();\n                        }\n                        Element el = tb.insert(startTag);\n                        tb.pushActiveFormattingElements(el);\n                    } else if (StringUtil.inSorted(name, Constants.InBodyStartApplets)) {\n                        tb.reconstructFormattingElements();\n                        tb.insert(startTag);\n                        tb.insertMarkerToFormattingElements();\n                        tb.framesetOk(false);\n                    } else if (name.equals(\"table\")) {\n                        if (tb.getDocument().quirksMode() != Document.QuirksMode.quirks && tb.inButtonScope(\"p\")) {\n                            tb.processEndTag(\"p\");\n                        }\n                        tb.insert(startTag);\n                        tb.framesetOk(false);\n                        tb.transition(InTable);\n                    } else if (name.equals(\"input\")) {\n                        tb.reconstructFormattingElements();\n                        Element el = tb.insertEmpty(startTag);\n                        if (!el.attr(\"type\").equalsIgnoreCase(\"hidden\"))\n                            tb.framesetOk(false);\n                    } else if (StringUtil.inSorted(name, Constants.InBodyStartMedia)) {\n                        tb.insertEmpty(startTag);\n                    } else if (name.equals(\"hr\")) {\n                        if (tb.inButtonScope(\"p\")) {\n                            tb.processEndTag(\"p\");\n                        }\n                        tb.insertEmpty(startTag);\n                        tb.framesetOk(false);\n                    } else if (name.equals(\"image\")) {\n                        if (tb.getFromStack(\"svg\") == null)\n                            return tb.process(startTag.name(\"img\")); // change <image> to <img>, unless in svg\n                        else\n                            tb.insert(startTag);\n                    } else if (name.equals(\"isindex\")) {\n                        // how much do we care about the early 90s?\n                        tb.error(this);\n                        if (tb.getFormElement() != null)\n                            return false;\n\n                        tb.processStartTag(\"form\");\n                        if (startTag.attributes.hasKey(\"action\")) {\n                            Element form = tb.getFormElement();\n                            form.attr(\"action\", startTag.attributes.get(\"action\"));\n                        }\n                        tb.processStartTag(\"hr\");\n                        tb.processStartTag(\"label\");\n                        // hope you like english.\n                        String prompt = startTag.attributes.hasKey(\"prompt\") ?\n                                startTag.attributes.get(\"prompt\") :\n                                \"This is a searchable index. Enter search keywords: \";\n\n                        tb.process(new Token.Character().data(prompt));\n\n                        // input\n                        Attributes inputAttribs = new Attributes();\n                        for (Attribute attr : startTag.attributes) {\n                            if (!StringUtil.inSorted(attr.getKey(), Constants.InBodyStartInputAttribs))\n                                inputAttribs.put(attr);\n                        }\n                        inputAttribs.put(\"name\", \"isindex\");\n                        tb.processStartTag(\"input\", inputAttribs);\n                        tb.processEndTag(\"label\");\n                        tb.processStartTag(\"hr\");\n                        tb.processEndTag(\"form\");\n                    } else if (name.equals(\"textarea\")) {\n                        tb.insert(startTag);\n                        // todo: If the next token is a U+000A LINE FEED (LF) character token, then ignore that token and move on to the next one. (Newlines at the start of textarea elements are ignored as an authoring convenience.)\n                        tb.tokeniser.transition(TokeniserState.Rcdata);\n                        tb.markInsertionMode();\n                        tb.framesetOk(false);\n                        tb.transition(Text);\n                    } else if (name.equals(\"xmp\")) {\n                        if (tb.inButtonScope(\"p\")) {\n                            tb.processEndTag(\"p\");\n                        }\n                        tb.reconstructFormattingElements();\n                        tb.framesetOk(false);\n                        handleRawtext(startTag, tb);\n                    } else if (name.equals(\"iframe\")) {\n                        tb.framesetOk(false);\n                        handleRawtext(startTag, tb);\n                    } else if (name.equals(\"noembed\")) {\n                        // also handle noscript if script enabled\n                        handleRawtext(startTag, tb);\n                    } else if (name.equals(\"select\")) {\n                        tb.reconstructFormattingElements();\n                        tb.insert(startTag);\n                        tb.framesetOk(false);\n\n                        HtmlTreeBuilderState state = tb.state();\n                        if (state.equals(InTable) || state.equals(InCaption) || state.equals(InTableBody) || state.equals(InRow) || state.equals(InCell))\n                            tb.transition(InSelectInTable);\n                        else\n                            tb.transition(InSelect);\n                    } else if (StringUtil.inSorted(name, Constants.InBodyStartOptions)) {\n                        if (tb.currentElement().nodeName().equals(\"option\"))\n                            tb.processEndTag(\"option\");\n                        tb.reconstructFormattingElements();\n                        tb.insert(startTag);\n                    } else if (StringUtil.inSorted(name, Constants.InBodyStartRuby)) {\n                        if (tb.inScope(\"ruby\")) {\n                            tb.generateImpliedEndTags();\n                            if (!tb.currentElement().nodeName().equals(\"ruby\")) {\n                                tb.error(this);\n                                tb.popStackToBefore(\"ruby\"); // i.e. close up to but not include name\n                            }\n                            tb.insert(startTag);\n                        }\n                    } else if (name.equals(\"math\")) {\n                        tb.reconstructFormattingElements();\n                        // todo: handle A start tag whose tag name is \"math\" (i.e. foreign, mathml)\n                        tb.insert(startTag);\n                    } else if (name.equals(\"svg\")) {\n                        tb.reconstructFormattingElements();\n                        // todo: handle A start tag whose tag name is \"svg\" (xlink, svg)\n                        tb.insert(startTag);\n                    } else if (StringUtil.inSorted(name, Constants.InBodyStartDrop)) {\n                        tb.error(this);\n                        return false;\n                    } else {\n                        tb.reconstructFormattingElements();\n                        tb.insert(startTag);\n                    }\n                    break;\n\n                case EndTag:\n                    Token.EndTag endTag = t.asEndTag();\n                    name = endTag.normalName();\n                    if (StringUtil.inSorted(name, Constants.InBodyEndAdoptionFormatters)) {\n                        // Adoption Agency Algorithm.\n                        for (int i = 0; i < 8; i++) {\n                            Element formatEl = tb.getActiveFormattingElement(name);\n                            if (formatEl == null)\n                                return anyOtherEndTag(t, tb);\n                            else if (!tb.onStack(formatEl)) {\n                                tb.error(this);\n                                tb.removeFromActiveFormattingElements(formatEl);\n                                return true;\n                            } else if (!tb.inScope(formatEl.nodeName())) {\n                                tb.error(this);\n                                return false;\n                            } else if (tb.currentElement() != formatEl)\n                                tb.error(this);\n\n                            Element furthestBlock = null;\n                            Element commonAncestor = null;\n                            boolean seenFormattingElement = false;\n                            ArrayList<Element> stack = tb.getStack();\n                            // the spec doesn't limit to < 64, but in degenerate cases (9000+ stack depth) this prevents\n                            // run-aways\n                            final int stackSize = stack.size();\n                            for (int si = 0; si < stackSize && si < 64; si++) {\n                                Element el = stack.get(si);\n                                if (el == formatEl) {\n                                    commonAncestor = stack.get(si - 1);\n                                    seenFormattingElement = true;\n                                } else if (seenFormattingElement && tb.isSpecial(el)) {\n                                    furthestBlock = el;\n                                    break;\n                                }\n                            }\n                            if (furthestBlock == null) {\n                                tb.popStackToClose(formatEl.nodeName());\n                                tb.removeFromActiveFormattingElements(formatEl);\n                                return true;\n                            }\n\n                            // todo: Let a bookmark note the position of the formatting element in the list of active formatting elements relative to the elements on either side of it in the list.\n                            // does that mean: int pos of format el in list?\n                            Element node = furthestBlock;\n                            Element lastNode = furthestBlock;\n                            for (int j = 0; j < 3; j++) {\n                                if (tb.onStack(node))\n                                    node = tb.aboveOnStack(node);\n                                if (!tb.isInActiveFormattingElements(node)) { // note no bookmark check\n                                    tb.removeFromStack(node);\n                                    continue;\n                                } else if (node == formatEl)\n                                    break;\n\n                                Element replacement = new Element(Tag.valueOf(node.nodeName(), ParseSettings.preserveCase), tb.getBaseUri());\n                                // case will follow the original node (so honours ParseSettings)\n                                tb.replaceActiveFormattingElement(node, replacement);\n                                tb.replaceOnStack(node, replacement);\n                                node = replacement;\n\n                                if (lastNode == furthestBlock) {\n                                    // todo: move the aforementioned bookmark to be immediately after the new node in the list of active formatting elements.\n                                    // not getting how this bookmark both straddles the element above, but is inbetween here...\n                                }\n                                if (lastNode.parent() != null)\n                                    lastNode.remove();\n                                node.appendChild(lastNode);\n\n                                lastNode = node;\n                            }\n\n                            if (StringUtil.inSorted(commonAncestor.nodeName(), Constants.InBodyEndTableFosters)) {\n                                if (lastNode.parent() != null)\n                                    lastNode.remove();\n                                tb.insertInFosterParent(lastNode);\n                            } else {\n                                if (lastNode.parent() != null)\n                                    lastNode.remove();\n                                commonAncestor.appendChild(lastNode);\n                            }\n\n                            Element adopter = new Element(formatEl.tag(), tb.getBaseUri());\n                            adopter.attributes().addAll(formatEl.attributes());\n                            Node[] childNodes = furthestBlock.childNodes().toArray(new Node[furthestBlock.childNodeSize()]);\n                            for (Node childNode : childNodes) {\n                                adopter.appendChild(childNode); // append will reparent. thus the clone to avoid concurrent mod.\n                            }\n                            furthestBlock.appendChild(adopter);\n                            tb.removeFromActiveFormattingElements(formatEl);\n                            // todo: insert the new element into the list of active formatting elements at the position of the aforementioned bookmark.\n                            tb.removeFromStack(formatEl);\n                            tb.insertOnStackAfter(furthestBlock, adopter);\n                        }\n                    } else if (StringUtil.inSorted(name, Constants.InBodyEndClosers)) {\n                        if (!tb.inScope(name)) {\n                            // nothing to close\n                            tb.error(this);\n                            return false;\n                        } else {\n                            tb.generateImpliedEndTags();\n                            if (!tb.currentElement().nodeName().equals(name))\n                                tb.error(this);\n                            tb.popStackToClose(name);\n                        }\n                    } else if (name.equals(\"span\")) {\n                        // same as final fall through, but saves short circuit\n                        return anyOtherEndTag(t, tb);\n                    } else if (name.equals(\"li\")) {\n                        if (!tb.inListItemScope(name)) {\n                            tb.error(this);\n                            return false;\n                        } else {\n                            tb.generateImpliedEndTags(name);\n                            if (!tb.currentElement().nodeName().equals(name))\n                                tb.error(this);\n                            tb.popStackToClose(name);\n                        }\n                    } else if (name.equals(\"body\")) {\n                        if (!tb.inScope(\"body\")) {\n                            tb.error(this);\n                            return false;\n                        } else {\n                            // todo: error if stack contains something not dd, dt, li, optgroup, option, p, rp, rt, tbody, td, tfoot, th, thead, tr, body, html\n                            tb.transition(AfterBody);\n                        }\n                    } else if (name.equals(\"html\")) {\n                        boolean notIgnored = tb.processEndTag(\"body\");\n                        if (notIgnored)\n                            return tb.process(endTag);\n                    } else if (name.equals(\"form\")) {\n                        Element currentForm = tb.getFormElement();\n                        tb.setFormElement(null);\n                        if (currentForm == null || !tb.inScope(name)) {\n                            tb.error(this);\n                            return false;\n                        } else {\n                            tb.generateImpliedEndTags();\n                            if (!tb.currentElement().nodeName().equals(name))\n                                tb.error(this);\n                            // remove currentForm from stack. will shift anything under up.\n                            tb.removeFromStack(currentForm);\n                        }\n                    } else if (name.equals(\"p\")) {\n                        if (!tb.inButtonScope(name)) {\n                            tb.error(this);\n                            tb.processStartTag(name); // if no p to close, creates an empty <p></p>\n                            return tb.process(endTag);\n                        } else {\n                            tb.generateImpliedEndTags(name);\n                            if (!tb.currentElement().nodeName().equals(name))\n                                tb.error(this);\n                            tb.popStackToClose(name);\n                        }\n                    } else if (StringUtil.inSorted(name, Constants.DdDt)) {\n                        if (!tb.inScope(name)) {\n                            tb.error(this);\n                            return false;\n                        } else {\n                            tb.generateImpliedEndTags(name);\n                            if (!tb.currentElement().nodeName().equals(name))\n                                tb.error(this);\n                            tb.popStackToClose(name);\n                        }\n                    } else if (StringUtil.inSorted(name, Constants.Headings)) {\n                        if (!tb.inScope(Constants.Headings)) {\n                            tb.error(this);\n                            return false;\n                        } else {\n                            tb.generateImpliedEndTags(name);\n                            if (!tb.currentElement().nodeName().equals(name))\n                                tb.error(this);\n                            tb.popStackToClose(Constants.Headings);\n                        }\n                    } else if (name.equals(\"sarcasm\")) {\n                        // *sigh*\n                        return anyOtherEndTag(t, tb);\n                    } else if (StringUtil.inSorted(name, Constants.InBodyStartApplets)) {\n                        if (!tb.inScope(\"name\")) {\n                            if (!tb.inScope(name)) {\n                                tb.error(this);\n                                return false;\n                            }\n                            tb.generateImpliedEndTags();\n                            if (!tb.currentElement().nodeName().equals(name))\n                                tb.error(this);\n                            tb.popStackToClose(name);\n                            tb.clearFormattingElementsToLastMarker();\n                        }\n                    } else if (name.equals(\"br\")) {\n                        tb.error(this);\n                        tb.processStartTag(\"br\");\n                        return false;\n                    } else {\n                        return anyOtherEndTag(t, tb);\n                    }\n\n                    break;\n                case EOF:\n                    // todo: error if stack contains something not dd, dt, li, p, tbody, td, tfoot, th, thead, tr, body, html\n                    // stop parsing\n                    break;\n            }",
    "info" : "SwitchStatement[10322-38411]:SwitchStatement[10322-38492]"
  }, {
    "left" : "case Character:",
    "right" : "case Character:",
    "info" : "SwitchCase[10356-10371]:SwitchCase[10356-10371]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10372-11078]:Block[10372-11078]"
  }, {
    "left" : "Token.Character c = t.asCharacter();",
    "right" : "Token.Character c = t.asCharacter();",
    "info" : "VariableDeclarationStatement[10394-10430]:VariableDeclarationStatement[10394-10430]"
  }, {
    "left" : "if (c.getData().equals(nullString))",
    "right" : "if (c.getData().equals(nullString))",
    "info" : "IfStatement[10451-11033]:IfStatement[10451-11033]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10487-10639]:Block[10487-10639]"
  }, {
    "left" : "tb.error(this);",
    "right" : "tb.error(this);",
    "info" : "ExpressionStatement[10564-10579]:ExpressionStatement[10564-10579]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[10604-10617]:ReturnStatement[10604-10617]"
  }, {
    "left" : "if (tb.framesetOk() && isWhitespace(c))",
    "right" : "if (tb.framesetOk() && isWhitespace(c))",
    "info" : "IfStatement[10645-11033]:IfStatement[10645-11033]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10685-10860]:Block[10685-10860]"
  }, {
    "left" : "tb.reconstructFormattingElements();",
    "right" : "tb.reconstructFormattingElements();",
    "info" : "ExpressionStatement[10765-10800]:ExpressionStatement[10765-10800]"
  }, {
    "left" : "tb.insert(c);",
    "right" : "tb.insert(c);",
    "info" : "ExpressionStatement[10825-10838]:ExpressionStatement[10825-10838]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10866-11033]:Block[10866-11033]"
  }, {
    "left" : "tb.reconstructFormattingElements();",
    "right" : "tb.reconstructFormattingElements();",
    "info" : "ExpressionStatement[10892-10927]:ExpressionStatement[10892-10927]"
  }, {
    "left" : "tb.insert(c);",
    "right" : "tb.insert(c);",
    "info" : "ExpressionStatement[10952-10965]:ExpressionStatement[10952-10965]"
  }, {
    "left" : "tb.framesetOk(false);",
    "right" : "tb.framesetOk(false);",
    "info" : "ExpressionStatement[10990-11011]:ExpressionStatement[10990-11011]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[11054-11060]:BreakStatement[11054-11060]"
  }, {
    "left" : "case Comment:",
    "right" : "case Comment:",
    "info" : "SwitchCase[11095-11108]:SwitchCase[11095-11108]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11109-11201]:Block[11109-11201]"
  }, {
    "left" : "tb.insert(t.asComment());",
    "right" : "tb.insert(t.asComment());",
    "info" : "ExpressionStatement[11131-11156]:ExpressionStatement[11131-11156]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[11177-11183]:BreakStatement[11177-11183]"
  }, {
    "left" : "case Doctype:",
    "right" : "case Doctype:",
    "info" : "SwitchCase[11218-11231]:SwitchCase[11218-11231]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11232-11321]:Block[11232-11321]"
  }, {
    "left" : "tb.error(this);",
    "right" : "tb.error(this);",
    "info" : "ExpressionStatement[11254-11269]:ExpressionStatement[11254-11269]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[11290-11303]:ReturnStatement[11290-11303]"
  }, {
    "left" : "case StartTag:",
    "right" : "case StartTag:",
    "info" : "SwitchCase[11338-11352]:SwitchCase[11338-11352]"
  }, {
    "left" : "Token.StartTag startTag = t.asStartTag();",
    "right" : "Token.StartTag startTag = t.asStartTag();",
    "info" : "VariableDeclarationStatement[11373-11414]:VariableDeclarationStatement[11373-11414]"
  }, {
    "left" : "String name = startTag.normalName();",
    "right" : "String name = startTag.normalName();",
    "info" : "VariableDeclarationStatement[11496-11532]:VariableDeclarationStatement[11496-11532]"
  }, {
    "left" : "if (name.equals(\"a\"))",
    "right" : "if (name.equals(\"a\"))",
    "info" : "IfStatement[11553-26816]:IfStatement[11553-26897]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11575-12320]:Block[11575-12320]"
  }, {
    "left" : "if (tb.getActiveFormattingElement(\"a\") != null)",
    "right" : "if (tb.getActiveFormattingElement(\"a\") != null)",
    "info" : "IfStatement[11601-12121]:IfStatement[11601-12121]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11649-12121]:Block[11649-12121]"
  }, {
    "left" : "tb.error(this);",
    "right" : "tb.error(this);",
    "info" : "ExpressionStatement[11679-11694]:ExpressionStatement[11679-11694]"
  }, {
    "left" : "tb.processEndTag(\"a\");",
    "right" : "tb.processEndTag(\"a\");",
    "info" : "ExpressionStatement[11723-11745]:ExpressionStatement[11723-11745]"
  }, {
    "left" : "Element remainingA = tb.getFromStack(\"a\");",
    "right" : "Element remainingA = tb.getFromStack(\"a\");",
    "info" : "VariableDeclarationStatement[11822-11864]:VariableDeclarationStatement[11822-11864]"
  }, {
    "left" : "if (remainingA != null)",
    "right" : "if (remainingA != null)",
    "info" : "IfStatement[11893-12095]:IfStatement[11893-12095]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11917-12095]:Block[11917-12095]"
  }, {
    "left" : "tb.removeFromActiveFormattingElements(remainingA);",
    "right" : "tb.removeFromActiveFormattingElements(remainingA);",
    "info" : "ExpressionStatement[11951-12001]:ExpressionStatement[11951-12001]"
  }, {
    "left" : "tb.removeFromStack(remainingA);",
    "right" : "tb.removeFromStack(remainingA);",
    "info" : "ExpressionStatement[12034-12065]:ExpressionStatement[12034-12065]"
  }, {
    "left" : "tb.reconstructFormattingElements();",
    "right" : "tb.reconstructFormattingElements();",
    "info" : "ExpressionStatement[12146-12181]:ExpressionStatement[12146-12181]"
  }, {
    "left" : "Element a = tb.insert(startTag);",
    "right" : "Element a = tb.insert(startTag);",
    "info" : "VariableDeclarationStatement[12206-12238]:VariableDeclarationStatement[12206-12238]"
  }, {
    "left" : "tb.pushActiveFormattingElements(a);",
    "right" : "tb.pushActiveFormattingElements(a);",
    "info" : "ExpressionStatement[12263-12298]:ExpressionStatement[12263-12298]"
  }, {
    "left" : "if (StringUtil.inSorted(name, Constants.InBodyStartEmptyFormatters))",
    "right" : "if (StringUtil.inSorted(name, Constants.InBodyStartEmptyFormatters))",
    "info" : "IfStatement[12326-26816]:IfStatement[12326-26897]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12395-12574]:Block[12395-12574]"
  }, {
    "left" : "tb.reconstructFormattingElements();",
    "right" : "tb.reconstructFormattingElements();",
    "info" : "ExpressionStatement[12421-12456]:ExpressionStatement[12421-12456]"
  }, {
    "left" : "tb.insertEmpty(startTag);",
    "right" : "tb.insertEmpty(startTag);",
    "info" : "ExpressionStatement[12481-12506]:ExpressionStatement[12481-12506]"
  }, {
    "left" : "tb.framesetOk(false);",
    "right" : "tb.framesetOk(false);",
    "info" : "ExpressionStatement[12531-12552]:ExpressionStatement[12531-12552]"
  }, {
    "left" : "if (StringUtil.inSorted(name, Constants.InBodyStartPClosers))",
    "right" : "if (StringUtil.inSorted(name, Constants.InBodyStartPClosers))",
    "info" : "IfStatement[12580-26816]:IfStatement[12580-26897]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12642-12840]:Block[12642-12840]"
  }, {
    "left" : "if (tb.inButtonScope(\"p\"))",
    "right" : "if (tb.inButtonScope(\"p\"))",
    "info" : "IfStatement[12668-12773]:IfStatement[12668-12773]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12695-12773]:Block[12695-12773]"
  }, {
    "left" : "tb.processEndTag(\"p\");",
    "right" : "tb.processEndTag(\"p\");",
    "info" : "ExpressionStatement[12725-12747]:ExpressionStatement[12725-12747]"
  }, {
    "left" : "tb.insert(startTag);",
    "right" : "tb.insert(startTag);",
    "info" : "ExpressionStatement[12798-12818]:ExpressionStatement[12798-12818]"
  }, {
    "left" : "if (name.equals(\"span\"))",
    "right" : "if (name.equals(\"span\"))",
    "info" : "IfStatement[12846-26816]:IfStatement[12846-26897]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12871-13080]:Block[12871-13080]"
  }, {
    "left" : "tb.reconstructFormattingElements();",
    "right" : "tb.reconstructFormattingElements();",
    "info" : "ExpressionStatement[12978-13013]:ExpressionStatement[12978-13013]"
  }, {
    "left" : "tb.insert(startTag);",
    "right" : "tb.insert(startTag);",
    "info" : "ExpressionStatement[13038-13058]:ExpressionStatement[13038-13058]"
  }, {
    "left" : "if (name.equals(\"li\"))",
    "right" : "if (name.equals(\"li\"))",
    "info" : "IfStatement[13086-26816]:IfStatement[13086-26897]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13109-13917]:Block[13109-13917]"
  }, {
    "left" : "tb.framesetOk(false);",
    "right" : "tb.framesetOk(false);",
    "info" : "ExpressionStatement[13135-13156]:ExpressionStatement[13135-13156]"
  }, {
    "left" : "ArrayList<Element> stack = tb.getStack();",
    "right" : "ArrayList<Element> stack = tb.getStack();",
    "info" : "VariableDeclarationStatement[13181-13222]:VariableDeclarationStatement[13181-13222]"
  }, {
    "left" : "for (int i = stack.size() - 1; i > 0; i--)",
    "right" : "for (int i = stack.size() - 1; i > 0; i--)",
    "info" : "ForStatement[13247-13720]:ForStatement[13247-13720]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13290-13720]:Block[13290-13720]"
  }, {
    "left" : "Element el = stack.get(i);",
    "right" : "Element el = stack.get(i);",
    "info" : "VariableDeclarationStatement[13320-13346]:VariableDeclarationStatement[13320-13346]"
  }, {
    "left" : "if (el.nodeName().equals(\"li\"))",
    "right" : "if (el.nodeName().equals(\"li\"))",
    "info" : "IfStatement[13375-13533]:IfStatement[13375-13533]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13407-13533]:Block[13407-13533]"
  }, {
    "left" : "tb.processEndTag(\"li\");",
    "right" : "tb.processEndTag(\"li\");",
    "info" : "ExpressionStatement[13441-13464]:ExpressionStatement[13441-13464]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[13497-13503]:BreakStatement[13497-13503]"
  }, {
    "left" : "if (tb.isSpecial(el) && !StringUtil.inSorted(el.nodeName(), Constants.InBodyStartLiBreakers))",
    "right" : "if (tb.isSpecial(el) && !StringUtil.inSorted(el.nodeName(), Constants.InBodyStartLiBreakers))",
    "info" : "IfStatement[13562-13694]:IfStatement[13562-13694]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[13688-13694]:BreakStatement[13688-13694]"
  }, {
    "left" : "if (tb.inButtonScope(\"p\"))",
    "right" : "if (tb.inButtonScope(\"p\"))",
    "info" : "IfStatement[13745-13850]:IfStatement[13745-13850]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13772-13850]:Block[13772-13850]"
  }, {
    "left" : "tb.processEndTag(\"p\");",
    "right" : "tb.processEndTag(\"p\");",
    "info" : "ExpressionStatement[13802-13824]:ExpressionStatement[13802-13824]"
  }, {
    "left" : "tb.insert(startTag);",
    "right" : "tb.insert(startTag);",
    "info" : "ExpressionStatement[13875-13895]:ExpressionStatement[13875-13895]"
  }, {
    "left" : "if (name.equals(\"html\"))",
    "right" : "if (name.equals(\"html\"))",
    "info" : "IfStatement[13923-26816]:IfStatement[13923-26897]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13948-14369]:Block[13948-14369]"
  }, {
    "left" : "tb.error(this);",
    "right" : "tb.error(this);",
    "info" : "ExpressionStatement[13974-13989]:ExpressionStatement[13974-13989]"
  }, {
    "left" : "Element html = tb.getStack().get(0);",
    "right" : "Element html = tb.getStack().get(0);",
    "info" : "VariableDeclarationStatement[14073-14109]:VariableDeclarationStatement[14073-14109]"
  }, {
    "left" : "for (Attribute attribute : startTag.getAttributes())",
    "right" : "for (Attribute attribute : startTag.getAttributes())",
    "info" : "EnhancedForStatement[14134-14347]:EnhancedForStatement[14134-14347]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14187-14347]:Block[14187-14347]"
  }, {
    "left" : "if (!html.hasAttr(attribute.getKey()))",
    "right" : "if (!html.hasAttr(attribute.getKey()))",
    "info" : "IfStatement[14217-14321]:IfStatement[14217-14321]"
  }, {
    "left" : "html.attributes().put(attribute);",
    "right" : "html.attributes().put(attribute);",
    "info" : "ExpressionStatement[14288-14321]:ExpressionStatement[14288-14321]"
  }, {
    "left" : "if (StringUtil.inSorted(name, Constants.InBodyStartToHead))",
    "right" : "if (StringUtil.inSorted(name, Constants.InBodyStartToHead))",
    "info" : "IfStatement[14375-26816]:IfStatement[14375-26897]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14435-14512]:Block[14435-14512]"
  }, {
    "left" : "return tb.process(t, InHead);",
    "right" : "return tb.process(t, InHead);",
    "info" : "ReturnStatement[14461-14490]:ReturnStatement[14461-14490]"
  }, {
    "left" : "if (name.equals(\"body\"))",
    "right" : "if (name.equals(\"body\"))",
    "info" : "IfStatement[14518-26816]:IfStatement[14518-26897]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14543-15311]:Block[14543-15311]"
  }, {
    "left" : "tb.error(this);",
    "right" : "tb.error(this);",
    "info" : "ExpressionStatement[14569-14584]:ExpressionStatement[14569-14584]"
  }, {
    "left" : "ArrayList<Element> stack = tb.getStack();",
    "right" : "ArrayList<Element> stack = tb.getStack();",
    "info" : "VariableDeclarationStatement[14609-14650]:VariableDeclarationStatement[14609-14650]"
  }, {
    "left" : "if (stack.size() == 1 || (stack.size() > 2 && !stack.get(1).nodeName().equals(\"body\")))",
    "right" : "if (stack.size() == 1 || (stack.size() > 2 && !stack.get(1).nodeName().equals(\"body\")))",
    "info" : "IfStatement[14675-15289]:IfStatement[14675-15289]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14763-14895]:Block[14763-14895]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[14846-14859]:ReturnStatement[14846-14859]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14901-15289]:Block[14901-15289]"
  }, {
    "left" : "tb.framesetOk(false);",
    "right" : "tb.framesetOk(false);",
    "info" : "ExpressionStatement[14931-14952]:ExpressionStatement[14931-14952]"
  }, {
    "left" : "Element body = stack.get(1);",
    "right" : "Element body = stack.get(1);",
    "info" : "VariableDeclarationStatement[14981-15009]:VariableDeclarationStatement[14981-15009]"
  }, {
    "left" : "for (Attribute attribute : startTag.getAttributes())",
    "right" : "for (Attribute attribute : startTag.getAttributes())",
    "info" : "EnhancedForStatement[15038-15263]:EnhancedForStatement[15038-15263]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15091-15263]:Block[15091-15263]"
  }, {
    "left" : "if (!body.hasAttr(attribute.getKey()))",
    "right" : "if (!body.hasAttr(attribute.getKey()))",
    "info" : "IfStatement[15125-15233]:IfStatement[15125-15233]"
  }, {
    "left" : "body.attributes().put(attribute);",
    "right" : "body.attributes().put(attribute);",
    "info" : "ExpressionStatement[15200-15233]:ExpressionStatement[15200-15233]"
  }, {
    "left" : "if (name.equals(\"frameset\"))",
    "right" : "if (name.equals(\"frameset\"))",
    "info" : "IfStatement[15317-26816]:IfStatement[15317-26897]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15346-16307]:Block[15346-16307]"
  }, {
    "left" : "tb.error(this);",
    "right" : "tb.error(this);",
    "info" : "ExpressionStatement[15372-15387]:ExpressionStatement[15372-15387]"
  }, {
    "left" : "ArrayList<Element> stack = tb.getStack();",
    "right" : "ArrayList<Element> stack = tb.getStack();",
    "info" : "VariableDeclarationStatement[15412-15453]:VariableDeclarationStatement[15412-15453]"
  }, {
    "left" : "if (stack.size() == 1 || (stack.size() > 2 && !stack.get(1).nodeName().equals(\"body\")))",
    "right" : "if (stack.size() == 1 || (stack.size() > 2 && !stack.get(1).nodeName().equals(\"body\")))",
    "info" : "IfStatement[15478-16285]:IfStatement[15478-16285]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15566-15698]:Block[15566-15698]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[15649-15662]:ReturnStatement[15649-15662]"
  }, {
    "left" : "if (!tb.framesetOk())",
    "right" : "if (!tb.framesetOk())",
    "info" : "IfStatement[15704-16285]:IfStatement[15704-16285]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15726-15814]:Block[15726-15814]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[15756-15769]:ReturnStatement[15756-15769]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15820-16285]:Block[15820-16285]"
  }, {
    "left" : "Element second = stack.get(1);",
    "right" : "Element second = stack.get(1);",
    "info" : "VariableDeclarationStatement[15850-15880]:VariableDeclarationStatement[15850-15880]"
  }, {
    "left" : "if (second.parent() != null)",
    "right" : "if (second.parent() != null)",
    "info" : "IfStatement[15909-15986]:IfStatement[15909-15986]"
  }, {
    "left" : "second.remove();",
    "right" : "second.remove();",
    "info" : "ExpressionStatement[15970-15986]:ExpressionStatement[15970-15986]"
  }, {
    "left" : "while (stack.size() > 1)\n                                stack.remove(stack.size()-1);",
    "right" : "while (stack.size() > 1)\n                                stack.remove(stack.size()-1);",
    "info" : "WhileStatement[16069-16155]:WhileStatement[16069-16155]"
  }, {
    "left" : "stack.remove(stack.size()-1);",
    "right" : "stack.remove(stack.size()-1);",
    "info" : "ExpressionStatement[16126-16155]:ExpressionStatement[16126-16155]"
  }, {
    "left" : "tb.insert(startTag);",
    "right" : "tb.insert(startTag);",
    "info" : "ExpressionStatement[16184-16204]:ExpressionStatement[16184-16204]"
  }, {
    "left" : "tb.transition(InFrameset);",
    "right" : "tb.transition(InFrameset);",
    "info" : "ExpressionStatement[16233-16259]:ExpressionStatement[16233-16259]"
  }, {
    "left" : "if (StringUtil.inSorted(name, Constants.Headings))",
    "right" : "if (StringUtil.inSorted(name, Constants.Headings))",
    "info" : "IfStatement[16313-26816]:IfStatement[16313-26897]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16364-16773]:Block[16364-16773]"
  }, {
    "left" : "if (tb.inButtonScope(\"p\"))",
    "right" : "if (tb.inButtonScope(\"p\"))",
    "info" : "IfStatement[16390-16495]:IfStatement[16390-16495]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16417-16495]:Block[16417-16495]"
  }, {
    "left" : "tb.processEndTag(\"p\");",
    "right" : "tb.processEndTag(\"p\");",
    "info" : "ExpressionStatement[16447-16469]:ExpressionStatement[16447-16469]"
  }, {
    "left" : "if (StringUtil.inSorted(tb.currentElement().nodeName(), Constants.Headings))",
    "right" : "if (StringUtil.inSorted(tb.currentElement().nodeName(), Constants.Headings))",
    "info" : "IfStatement[16520-16706]:IfStatement[16520-16706]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16597-16706]:Block[16597-16706]"
  }, {
    "left" : "tb.error(this);",
    "right" : "tb.error(this);",
    "info" : "ExpressionStatement[16627-16642]:ExpressionStatement[16627-16642]"
  }, {
    "left" : "tb.pop();",
    "right" : "tb.pop();",
    "info" : "ExpressionStatement[16671-16680]:ExpressionStatement[16671-16680]"
  }, {
    "left" : "tb.insert(startTag);",
    "right" : "tb.insert(startTag);",
    "info" : "ExpressionStatement[16731-16751]:ExpressionStatement[16731-16751]"
  }, {
    "left" : "if (StringUtil.inSorted(name, Constants.InBodyStartPreListing))",
    "right" : "if (StringUtil.inSorted(name, Constants.InBodyStartPreListing))",
    "info" : "IfStatement[16779-26816]:IfStatement[16779-26897]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16843-17087]:Block[16843-17168]"
  }, {
    "left" : "if (tb.inButtonScope(\"p\"))",
    "right" : "if (tb.inButtonScope(\"p\"))",
    "info" : "IfStatement[16869-16974]:IfStatement[16869-16974]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16896-16974]:Block[16896-16974]"
  }, {
    "left" : "tb.processEndTag(\"p\");",
    "right" : "tb.processEndTag(\"p\");",
    "info" : "ExpressionStatement[16926-16948]:ExpressionStatement[16926-16948]"
  }, {
    "left" : "tb.insert(startTag);",
    "right" : "tb.insert(startTag);",
    "info" : "ExpressionStatement[16999-17019]:ExpressionStatement[16999-17019]"
  }, {
    "left" : "tb.framesetOk(false);",
    "right" : "tb.framesetOk(false);",
    "info" : "ExpressionStatement[17044-17065]:ExpressionStatement[17125-17146]"
  }, {
    "left" : "if (name.equals(\"form\"))",
    "right" : "if (name.equals(\"form\"))",
    "info" : "IfStatement[17093-26816]:IfStatement[17174-26897]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17118-17497]:Block[17199-17578]"
  }, {
    "left" : "if (tb.getFormElement() != null)",
    "right" : "if (tb.getFormElement() != null)",
    "info" : "IfStatement[17144-17290]:IfStatement[17225-17371]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17177-17290]:Block[17258-17371]"
  }, {
    "left" : "tb.error(this);",
    "right" : "tb.error(this);",
    "info" : "ExpressionStatement[17207-17222]:ExpressionStatement[17288-17303]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[17251-17264]:ReturnStatement[17332-17345]"
  }, {
    "left" : "if (tb.inButtonScope(\"p\"))",
    "right" : "if (tb.inButtonScope(\"p\"))",
    "info" : "IfStatement[17315-17420]:IfStatement[17396-17501]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17342-17420]:Block[17423-17501]"
  }, {
    "left" : "tb.processEndTag(\"p\");",
    "right" : "tb.processEndTag(\"p\");",
    "info" : "ExpressionStatement[17372-17394]:ExpressionStatement[17453-17475]"
  }, {
    "left" : "tb.insertForm(startTag, true);",
    "right" : "tb.insertForm(startTag, true);",
    "info" : "ExpressionStatement[17445-17475]:ExpressionStatement[17526-17556]"
  }, {
    "left" : "if (StringUtil.inSorted(name, Constants.DdDt))",
    "right" : "if (StringUtil.inSorted(name, Constants.DdDt))",
    "info" : "IfStatement[17503-26816]:IfStatement[17584-26897]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17550-18391]:Block[17631-18472]"
  }, {
    "left" : "tb.framesetOk(false);",
    "right" : "tb.framesetOk(false);",
    "info" : "ExpressionStatement[17576-17597]:ExpressionStatement[17657-17678]"
  }, {
    "left" : "ArrayList<Element> stack = tb.getStack();",
    "right" : "ArrayList<Element> stack = tb.getStack();",
    "info" : "VariableDeclarationStatement[17622-17663]:VariableDeclarationStatement[17703-17744]"
  }, {
    "left" : "for (int i = stack.size() - 1; i > 0; i--)",
    "right" : "for (int i = stack.size() - 1; i > 0; i--)",
    "info" : "ForStatement[17688-18194]:ForStatement[17769-18275]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17731-18194]:Block[17812-18275]"
  }, {
    "left" : "Element el = stack.get(i);",
    "right" : "Element el = stack.get(i);",
    "info" : "VariableDeclarationStatement[17761-17787]:VariableDeclarationStatement[17842-17868]"
  }, {
    "left" : "if (StringUtil.inSorted(el.nodeName(), Constants.DdDt))",
    "right" : "if (StringUtil.inSorted(el.nodeName(), Constants.DdDt))",
    "info" : "IfStatement[17816-18007]:IfStatement[17897-18088]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17872-18007]:Block[17953-18088]"
  }, {
    "left" : "tb.processEndTag(el.nodeName());",
    "right" : "tb.processEndTag(el.nodeName());",
    "info" : "ExpressionStatement[17906-17938]:ExpressionStatement[17987-18019]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[17971-17977]:BreakStatement[18052-18058]"
  }, {
    "left" : "if (tb.isSpecial(el) && !StringUtil.inSorted(el.nodeName(), Constants.InBodyStartLiBreakers))",
    "right" : "if (tb.isSpecial(el) && !StringUtil.inSorted(el.nodeName(), Constants.InBodyStartLiBreakers))",
    "info" : "IfStatement[18036-18168]:IfStatement[18117-18249]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[18162-18168]:BreakStatement[18243-18249]"
  }, {
    "left" : "if (tb.inButtonScope(\"p\"))",
    "right" : "if (tb.inButtonScope(\"p\"))",
    "info" : "IfStatement[18219-18324]:IfStatement[18300-18405]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18246-18324]:Block[18327-18405]"
  }, {
    "left" : "tb.processEndTag(\"p\");",
    "right" : "tb.processEndTag(\"p\");",
    "info" : "ExpressionStatement[18276-18298]:ExpressionStatement[18357-18379]"
  }, {
    "left" : "tb.insert(startTag);",
    "right" : "tb.insert(startTag);",
    "info" : "ExpressionStatement[18349-18369]:ExpressionStatement[18430-18450]"
  }, {
    "left" : "if (name.equals(\"plaintext\"))",
    "right" : "if (name.equals(\"plaintext\"))",
    "info" : "IfStatement[18397-26816]:IfStatement[18478-26897]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18427-18727]:Block[18508-18808]"
  }, {
    "left" : "if (tb.inButtonScope(\"p\"))",
    "right" : "if (tb.inButtonScope(\"p\"))",
    "info" : "IfStatement[18453-18558]:IfStatement[18534-18639]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18480-18558]:Block[18561-18639]"
  }, {
    "left" : "tb.processEndTag(\"p\");",
    "right" : "tb.processEndTag(\"p\");",
    "info" : "ExpressionStatement[18510-18532]:ExpressionStatement[18591-18613]"
  }, {
    "left" : "tb.insert(startTag);",
    "right" : "tb.insert(startTag);",
    "info" : "ExpressionStatement[18583-18603]:ExpressionStatement[18664-18684]"
  }, {
    "left" : "tb.tokeniser.transition(TokeniserState.PLAINTEXT);",
    "right" : "tb.tokeniser.transition(TokeniserState.PLAINTEXT);",
    "info" : "ExpressionStatement[18628-18678]:ExpressionStatement[18709-18759]"
  }, {
    "left" : "if (name.equals(\"button\"))",
    "right" : "if (name.equals(\"button\"))",
    "info" : "IfStatement[18733-26816]:IfStatement[18814-26897]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18760-19264]:Block[18841-19345]"
  }, {
    "left" : "if (tb.inButtonScope(\"button\"))",
    "right" : "if (tb.inButtonScope(\"button\"))",
    "info" : "IfStatement[18786-19242]:IfStatement[18867-19323]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18818-19046]:Block[18899-19127]"
  }, {
    "left" : "tb.error(this);",
    "right" : "tb.error(this);",
    "info" : "ExpressionStatement[18899-18914]:ExpressionStatement[18980-18995]"
  }, {
    "left" : "tb.processEndTag(\"button\");",
    "right" : "tb.processEndTag(\"button\");",
    "info" : "ExpressionStatement[18943-18970]:ExpressionStatement[19024-19051]"
  }, {
    "left" : "tb.process(startTag);",
    "right" : "tb.process(startTag);",
    "info" : "ExpressionStatement[18999-19020]:ExpressionStatement[19080-19101]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[19052-19242]:Block[19133-19323]"
  }, {
    "left" : "tb.reconstructFormattingElements();",
    "right" : "tb.reconstructFormattingElements();",
    "info" : "ExpressionStatement[19082-19117]:ExpressionStatement[19163-19198]"
  }, {
    "left" : "tb.insert(startTag);",
    "right" : "tb.insert(startTag);",
    "info" : "ExpressionStatement[19146-19166]:ExpressionStatement[19227-19247]"
  }, {
    "left" : "tb.framesetOk(false);",
    "right" : "tb.framesetOk(false);",
    "info" : "ExpressionStatement[19195-19216]:ExpressionStatement[19276-19297]"
  }, {
    "left" : "if (StringUtil.inSorted(name, Constants.Formatters))",
    "right" : "if (StringUtil.inSorted(name, Constants.Formatters))",
    "info" : "IfStatement[19270-26816]:IfStatement[19351-26897]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[19323-19525]:Block[19404-19606]"
  }, {
    "left" : "tb.reconstructFormattingElements();",
    "right" : "tb.reconstructFormattingElements();",
    "info" : "ExpressionStatement[19349-19384]:ExpressionStatement[19430-19465]"
  }, {
    "left" : "Element el = tb.insert(startTag);",
    "right" : "Element el = tb.insert(startTag);",
    "info" : "VariableDeclarationStatement[19409-19442]:VariableDeclarationStatement[19490-19523]"
  }, {
    "left" : "tb.pushActiveFormattingElements(el);",
    "right" : "tb.pushActiveFormattingElements(el);",
    "info" : "ExpressionStatement[19467-19503]:ExpressionStatement[19548-19584]"
  }, {
    "left" : "if (name.equals(\"nobr\"))",
    "right" : "if (name.equals(\"nobr\"))",
    "info" : "IfStatement[19531-26816]:IfStatement[19612-26897]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[19556-19996]:Block[19637-20077]"
  }, {
    "left" : "tb.reconstructFormattingElements();",
    "right" : "tb.reconstructFormattingElements();",
    "info" : "ExpressionStatement[19582-19617]:ExpressionStatement[19663-19698]"
  }, {
    "left" : "if (tb.inScope(\"nobr\"))",
    "right" : "if (tb.inScope(\"nobr\"))",
    "info" : "IfStatement[19642-19855]:IfStatement[19723-19936]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[19666-19855]:Block[19747-19936]"
  }, {
    "left" : "tb.error(this);",
    "right" : "tb.error(this);",
    "info" : "ExpressionStatement[19696-19711]:ExpressionStatement[19777-19792]"
  }, {
    "left" : "tb.processEndTag(\"nobr\");",
    "right" : "tb.processEndTag(\"nobr\");",
    "info" : "ExpressionStatement[19740-19765]:ExpressionStatement[19821-19846]"
  }, {
    "left" : "tb.reconstructFormattingElements();",
    "right" : "tb.reconstructFormattingElements();",
    "info" : "ExpressionStatement[19794-19829]:ExpressionStatement[19875-19910]"
  }, {
    "left" : "Element el = tb.insert(startTag);",
    "right" : "Element el = tb.insert(startTag);",
    "info" : "VariableDeclarationStatement[19880-19913]:VariableDeclarationStatement[19961-19994]"
  }, {
    "left" : "tb.pushActiveFormattingElements(el);",
    "right" : "tb.pushActiveFormattingElements(el);",
    "info" : "ExpressionStatement[19938-19974]:ExpressionStatement[20019-20055]"
  }, {
    "left" : "if (StringUtil.inSorted(name, Constants.InBodyStartApplets))",
    "right" : "if (StringUtil.inSorted(name, Constants.InBodyStartApplets))",
    "info" : "IfStatement[20002-26816]:IfStatement[20083-26897]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[20063-20300]:Block[20144-20381]"
  }, {
    "left" : "tb.reconstructFormattingElements();",
    "right" : "tb.reconstructFormattingElements();",
    "info" : "ExpressionStatement[20089-20124]:ExpressionStatement[20170-20205]"
  }, {
    "left" : "tb.insert(startTag);",
    "right" : "tb.insert(startTag);",
    "info" : "ExpressionStatement[20149-20169]:ExpressionStatement[20230-20250]"
  }, {
    "left" : "tb.insertMarkerToFormattingElements();",
    "right" : "tb.insertMarkerToFormattingElements();",
    "info" : "ExpressionStatement[20194-20232]:ExpressionStatement[20275-20313]"
  }, {
    "left" : "tb.framesetOk(false);",
    "right" : "tb.framesetOk(false);",
    "info" : "ExpressionStatement[20257-20278]:ExpressionStatement[20338-20359]"
  }, {
    "left" : "if (name.equals(\"table\"))",
    "right" : "if (name.equals(\"table\"))",
    "info" : "IfStatement[20306-26816]:IfStatement[20387-26897]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[20332-20687]:Block[20413-20768]"
  }, {
    "left" : "if (tb.getDocument().quirksMode() != Document.QuirksMode.quirks && tb.inButtonScope(\"p\"))",
    "right" : "if (tb.getDocument().quirksMode() != Document.QuirksMode.quirks && tb.inButtonScope(\"p\"))",
    "info" : "IfStatement[20358-20526]:IfStatement[20439-20607]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[20448-20526]:Block[20529-20607]"
  }, {
    "left" : "tb.processEndTag(\"p\");",
    "right" : "tb.processEndTag(\"p\");",
    "info" : "ExpressionStatement[20478-20500]:ExpressionStatement[20559-20581]"
  }, {
    "left" : "tb.insert(startTag);",
    "right" : "tb.insert(startTag);",
    "info" : "ExpressionStatement[20551-20571]:ExpressionStatement[20632-20652]"
  }, {
    "left" : "tb.framesetOk(false);",
    "right" : "tb.framesetOk(false);",
    "info" : "ExpressionStatement[20596-20617]:ExpressionStatement[20677-20698]"
  }, {
    "left" : "tb.transition(InTable);",
    "right" : "tb.transition(InTable);",
    "info" : "ExpressionStatement[20642-20665]:ExpressionStatement[20723-20746]"
  }, {
    "left" : "if (name.equals(\"input\"))",
    "right" : "if (name.equals(\"input\"))",
    "info" : "IfStatement[20693-26816]:IfStatement[20774-26897]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[20719-20988]:Block[20800-21069]"
  }, {
    "left" : "tb.reconstructFormattingElements();",
    "right" : "tb.reconstructFormattingElements();",
    "info" : "ExpressionStatement[20745-20780]:ExpressionStatement[20826-20861]"
  }, {
    "left" : "Element el = tb.insertEmpty(startTag);",
    "right" : "Element el = tb.insertEmpty(startTag);",
    "info" : "VariableDeclarationStatement[20805-20843]:VariableDeclarationStatement[20886-20924]"
  }, {
    "left" : "if (!el.attr(\"type\").equalsIgnoreCase(\"hidden\"))",
    "right" : "if (!el.attr(\"type\").equalsIgnoreCase(\"hidden\"))",
    "info" : "IfStatement[20868-20966]:IfStatement[20949-21047]"
  }, {
    "left" : "tb.framesetOk(false);",
    "right" : "tb.framesetOk(false);",
    "info" : "ExpressionStatement[20945-20966]:ExpressionStatement[21026-21047]"
  }, {
    "left" : "if (StringUtil.inSorted(name, Constants.InBodyStartMedia))",
    "right" : "if (StringUtil.inSorted(name, Constants.InBodyStartMedia))",
    "info" : "IfStatement[20994-26816]:IfStatement[21075-26897]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[21053-21126]:Block[21134-21207]"
  }, {
    "left" : "tb.insertEmpty(startTag);",
    "right" : "tb.insertEmpty(startTag);",
    "info" : "ExpressionStatement[21079-21104]:ExpressionStatement[21160-21185]"
  }, {
    "left" : "if (name.equals(\"hr\"))",
    "right" : "if (name.equals(\"hr\"))",
    "info" : "IfStatement[21132-26816]:IfStatement[21213-26897]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[21155-21404]:Block[21236-21485]"
  }, {
    "left" : "if (tb.inButtonScope(\"p\"))",
    "right" : "if (tb.inButtonScope(\"p\"))",
    "info" : "IfStatement[21181-21286]:IfStatement[21262-21367]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[21208-21286]:Block[21289-21367]"
  }, {
    "left" : "tb.processEndTag(\"p\");",
    "right" : "tb.processEndTag(\"p\");",
    "info" : "ExpressionStatement[21238-21260]:ExpressionStatement[21319-21341]"
  }, {
    "left" : "tb.insertEmpty(startTag);",
    "right" : "tb.insertEmpty(startTag);",
    "info" : "ExpressionStatement[21311-21336]:ExpressionStatement[21392-21417]"
  }, {
    "left" : "tb.framesetOk(false);",
    "right" : "tb.framesetOk(false);",
    "info" : "ExpressionStatement[21361-21382]:ExpressionStatement[21442-21463]"
  }, {
    "left" : "if (name.equals(\"image\"))",
    "right" : "if (name.equals(\"image\"))",
    "info" : "IfStatement[21410-26816]:IfStatement[21491-26897]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[21436-21708]:Block[21517-21789]"
  }, {
    "left" : "if (tb.getFromStack(\"svg\") == null)",
    "right" : "if (tb.getFromStack(\"svg\") == null)",
    "info" : "IfStatement[21462-21686]:IfStatement[21543-21767]"
  }, {
    "left" : "return tb.process(startTag.name(\"img\"));",
    "right" : "return tb.process(startTag.name(\"img\"));",
    "info" : "ReturnStatement[21526-21566]:ReturnStatement[21607-21647]"
  }, {
    "left" : "tb.insert(startTag);",
    "right" : "tb.insert(startTag);",
    "info" : "ExpressionStatement[21666-21686]:ExpressionStatement[21747-21767]"
  }, {
    "left" : "if (name.equals(\"isindex\"))",
    "right" : "if (name.equals(\"isindex\"))",
    "info" : "IfStatement[21714-26816]:IfStatement[21795-26897]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[21742-23363]:Block[21823-23444]"
  }, {
    "left" : "tb.error(this);",
    "right" : "tb.error(this);",
    "info" : "ExpressionStatement[21836-21851]:ExpressionStatement[21917-21932]"
  }, {
    "left" : "if (tb.getFormElement() != null)",
    "right" : "if (tb.getFormElement() != null)",
    "info" : "IfStatement[21876-21950]:IfStatement[21957-22031]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[21937-21950]:ReturnStatement[22018-22031]"
  }, {
    "left" : "tb.processStartTag(\"form\");",
    "right" : "tb.processStartTag(\"form\");",
    "info" : "ExpressionStatement[21976-22003]:ExpressionStatement[22057-22084]"
  }, {
    "left" : "if (startTag.attributes.hasKey(\"action\"))",
    "right" : "if (startTag.attributes.hasKey(\"action\"))",
    "info" : "IfStatement[22028-22245]:IfStatement[22109-22326]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[22070-22245]:Block[22151-22326]"
  }, {
    "left" : "Element form = tb.getFormElement();",
    "right" : "Element form = tb.getFormElement();",
    "info" : "VariableDeclarationStatement[22100-22135]:VariableDeclarationStatement[22181-22216]"
  }, {
    "left" : "form.attr(\"action\", startTag.attributes.get(\"action\"));",
    "right" : "form.attr(\"action\", startTag.attributes.get(\"action\"));",
    "info" : "ExpressionStatement[22164-22219]:ExpressionStatement[22245-22300]"
  }, {
    "left" : "tb.processStartTag(\"hr\");",
    "right" : "tb.processStartTag(\"hr\");",
    "info" : "ExpressionStatement[22270-22295]:ExpressionStatement[22351-22376]"
  }, {
    "left" : "tb.processStartTag(\"label\");",
    "right" : "tb.processStartTag(\"label\");",
    "info" : "ExpressionStatement[22320-22348]:ExpressionStatement[22401-22429]"
  }, {
    "left" : "String prompt = startTag.attributes.hasKey(\"prompt\") ?\n                                startTag.attributes.get(\"prompt\") :\n                                \"This is a searchable index. Enter search keywords: \";",
    "right" : "String prompt = startTag.attributes.hasKey(\"prompt\") ?\n                                startTag.attributes.get(\"prompt\") :\n                                \"This is a searchable index. Enter search keywords: \";",
    "info" : "VariableDeclarationStatement[22423-22632]:VariableDeclarationStatement[22504-22713]"
  }, {
    "left" : "tb.process(new Token.Character().data(prompt));",
    "right" : "tb.process(new Token.Character().data(prompt));",
    "info" : "ExpressionStatement[22658-22705]:ExpressionStatement[22739-22786]"
  }, {
    "left" : "Attributes inputAttribs = new Attributes();",
    "right" : "Attributes inputAttribs = new Attributes();",
    "info" : "VariableDeclarationStatement[22764-22807]:VariableDeclarationStatement[22845-22888]"
  }, {
    "left" : "for (Attribute attr : startTag.attributes)",
    "right" : "for (Attribute attr : startTag.attributes)",
    "info" : "EnhancedForStatement[22832-23062]:EnhancedForStatement[22913-23143]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[22875-23062]:Block[22956-23143]"
  }, {
    "left" : "if (!StringUtil.inSorted(attr.getKey(), Constants.InBodyStartInputAttribs))",
    "right" : "if (!StringUtil.inSorted(attr.getKey(), Constants.InBodyStartInputAttribs))",
    "info" : "IfStatement[22905-23036]:IfStatement[22986-23117]"
  }, {
    "left" : "inputAttribs.put(attr);",
    "right" : "inputAttribs.put(attr);",
    "info" : "ExpressionStatement[23013-23036]:ExpressionStatement[23094-23117]"
  }, {
    "left" : "inputAttribs.put(\"name\", \"isindex\");",
    "right" : "inputAttribs.put(\"name\", \"isindex\");",
    "info" : "ExpressionStatement[23087-23123]:ExpressionStatement[23168-23204]"
  }, {
    "left" : "tb.processStartTag(\"input\", inputAttribs);",
    "right" : "tb.processStartTag(\"input\", inputAttribs);",
    "info" : "ExpressionStatement[23148-23190]:ExpressionStatement[23229-23271]"
  }, {
    "left" : "tb.processEndTag(\"label\");",
    "right" : "tb.processEndTag(\"label\");",
    "info" : "ExpressionStatement[23215-23241]:ExpressionStatement[23296-23322]"
  }, {
    "left" : "tb.processStartTag(\"hr\");",
    "right" : "tb.processStartTag(\"hr\");",
    "info" : "ExpressionStatement[23266-23291]:ExpressionStatement[23347-23372]"
  }, {
    "left" : "tb.processEndTag(\"form\");",
    "right" : "tb.processEndTag(\"form\");",
    "info" : "ExpressionStatement[23316-23341]:ExpressionStatement[23397-23422]"
  }, {
    "left" : "if (name.equals(\"textarea\"))",
    "right" : "if (name.equals(\"textarea\"))",
    "info" : "IfStatement[23369-26816]:IfStatement[23450-26897]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[23398-23910]:Block[23479-23991]"
  }, {
    "left" : "tb.insert(startTag);",
    "right" : "tb.insert(startTag);",
    "info" : "ExpressionStatement[23424-23444]:ExpressionStatement[23505-23525]"
  }, {
    "left" : "tb.tokeniser.transition(TokeniserState.Rcdata);",
    "right" : "tb.tokeniser.transition(TokeniserState.Rcdata);",
    "info" : "ExpressionStatement[23702-23749]:ExpressionStatement[23783-23830]"
  }, {
    "left" : "tb.markInsertionMode();",
    "right" : "tb.markInsertionMode();",
    "info" : "ExpressionStatement[23774-23797]:ExpressionStatement[23855-23878]"
  }, {
    "left" : "tb.framesetOk(false);",
    "right" : "tb.framesetOk(false);",
    "info" : "ExpressionStatement[23822-23843]:ExpressionStatement[23903-23924]"
  }, {
    "left" : "tb.transition(Text);",
    "right" : "tb.transition(Text);",
    "info" : "ExpressionStatement[23868-23888]:ExpressionStatement[23949-23969]"
  }, {
    "left" : "if (name.equals(\"xmp\"))",
    "right" : "if (name.equals(\"xmp\"))",
    "info" : "IfStatement[23916-26816]:IfStatement[23997-26897]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[23940-24252]:Block[24021-24333]"
  }, {
    "left" : "if (tb.inButtonScope(\"p\"))",
    "right" : "if (tb.inButtonScope(\"p\"))",
    "info" : "IfStatement[23966-24071]:IfStatement[24047-24152]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[23993-24071]:Block[24074-24152]"
  }, {
    "left" : "tb.processEndTag(\"p\");",
    "right" : "tb.processEndTag(\"p\");",
    "info" : "ExpressionStatement[24023-24045]:ExpressionStatement[24104-24126]"
  }, {
    "left" : "tb.reconstructFormattingElements();",
    "right" : "tb.reconstructFormattingElements();",
    "info" : "ExpressionStatement[24096-24131]:ExpressionStatement[24177-24212]"
  }, {
    "left" : "tb.framesetOk(false);",
    "right" : "tb.framesetOk(false);",
    "info" : "ExpressionStatement[24156-24177]:ExpressionStatement[24237-24258]"
  }, {
    "left" : "handleRawtext(startTag, tb);",
    "right" : "handleRawtext(startTag, tb);",
    "info" : "ExpressionStatement[24202-24230]:ExpressionStatement[24283-24311]"
  }, {
    "left" : "if (name.equals(\"iframe\"))",
    "right" : "if (name.equals(\"iframe\"))",
    "info" : "IfStatement[24258-26816]:IfStatement[24339-26897]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[24285-24407]:Block[24366-24488]"
  }, {
    "left" : "tb.framesetOk(false);",
    "right" : "tb.framesetOk(false);",
    "info" : "ExpressionStatement[24311-24332]:ExpressionStatement[24392-24413]"
  }, {
    "left" : "handleRawtext(startTag, tb);",
    "right" : "handleRawtext(startTag, tb);",
    "info" : "ExpressionStatement[24357-24385]:ExpressionStatement[24438-24466]"
  }, {
    "left" : "if (name.equals(\"noembed\"))",
    "right" : "if (name.equals(\"noembed\"))",
    "info" : "IfStatement[24413-26816]:IfStatement[24494-26897]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[24441-24583]:Block[24522-24664]"
  }, {
    "left" : "handleRawtext(startTag, tb);",
    "right" : "handleRawtext(startTag, tb);",
    "info" : "ExpressionStatement[24533-24561]:ExpressionStatement[24614-24642]"
  }, {
    "left" : "if (name.equals(\"select\"))",
    "right" : "if (name.equals(\"select\"))",
    "info" : "IfStatement[24589-26816]:IfStatement[24670-26897]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[24616-25152]:Block[24697-25233]"
  }, {
    "left" : "tb.reconstructFormattingElements();",
    "right" : "tb.reconstructFormattingElements();",
    "info" : "ExpressionStatement[24642-24677]:ExpressionStatement[24723-24758]"
  }, {
    "left" : "tb.insert(startTag);",
    "right" : "tb.insert(startTag);",
    "info" : "ExpressionStatement[24702-24722]:ExpressionStatement[24783-24803]"
  }, {
    "left" : "tb.framesetOk(false);",
    "right" : "tb.framesetOk(false);",
    "info" : "ExpressionStatement[24747-24768]:ExpressionStatement[24828-24849]"
  }, {
    "left" : "HtmlTreeBuilderState state = tb.state();",
    "right" : "HtmlTreeBuilderState state = tb.state();",
    "info" : "VariableDeclarationStatement[24794-24834]:VariableDeclarationStatement[24875-24915]"
  }, {
    "left" : "if (state.equals(InTable) || state.equals(InCaption) || state.equals(InTableBody) || state.equals(InRow) || state.equals(InCell))",
    "right" : "if (state.equals(InTable) || state.equals(InCaption) || state.equals(InTableBody) || state.equals(InRow) || state.equals(InCell))",
    "info" : "IfStatement[24859-25130]:IfStatement[24940-25211]"
  }, {
    "left" : "tb.transition(InSelectInTable);",
    "right" : "tb.transition(InSelectInTable);",
    "info" : "ExpressionStatement[25017-25048]:ExpressionStatement[25098-25129]"
  }, {
    "left" : "tb.transition(InSelect);",
    "right" : "tb.transition(InSelect);",
    "info" : "ExpressionStatement[25106-25130]:ExpressionStatement[25187-25211]"
  }, {
    "left" : "if (StringUtil.inSorted(name, Constants.InBodyStartOptions))",
    "right" : "if (StringUtil.inSorted(name, Constants.InBodyStartOptions))",
    "info" : "IfStatement[25158-26816]:IfStatement[25239-26897]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[25219-25480]:Block[25300-25561]"
  }, {
    "left" : "if (tb.currentElement().nodeName().equals(\"option\"))",
    "right" : "if (tb.currentElement().nodeName().equals(\"option\"))",
    "info" : "IfStatement[25245-25353]:IfStatement[25326-25434]"
  }, {
    "left" : "tb.processEndTag(\"option\");",
    "right" : "tb.processEndTag(\"option\");",
    "info" : "ExpressionStatement[25326-25353]:ExpressionStatement[25407-25434]"
  }, {
    "left" : "tb.reconstructFormattingElements();",
    "right" : "tb.reconstructFormattingElements();",
    "info" : "ExpressionStatement[25378-25413]:ExpressionStatement[25459-25494]"
  }, {
    "left" : "tb.insert(startTag);",
    "right" : "tb.insert(startTag);",
    "info" : "ExpressionStatement[25438-25458]:ExpressionStatement[25519-25539]"
  }, {
    "left" : "if (StringUtil.inSorted(name, Constants.InBodyStartRuby))",
    "right" : "if (StringUtil.inSorted(name, Constants.InBodyStartRuby))",
    "info" : "IfStatement[25486-26816]:IfStatement[25567-26897]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[25544-26011]:Block[25625-26092]"
  }, {
    "left" : "if (tb.inScope(\"ruby\"))",
    "right" : "if (tb.inScope(\"ruby\"))",
    "info" : "IfStatement[25570-25989]:IfStatement[25651-26070]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[25594-25989]:Block[25675-26070]"
  }, {
    "left" : "tb.generateImpliedEndTags();",
    "right" : "tb.generateImpliedEndTags();",
    "info" : "ExpressionStatement[25624-25652]:ExpressionStatement[25705-25733]"
  }, {
    "left" : "if (!tb.currentElement().nodeName().equals(\"ruby\"))",
    "right" : "if (!tb.currentElement().nodeName().equals(\"ruby\"))",
    "info" : "IfStatement[25681-25914]:IfStatement[25762-25995]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[25733-25914]:Block[25814-25995]"
  }, {
    "left" : "tb.error(this);",
    "right" : "tb.error(this);",
    "info" : "ExpressionStatement[25767-25782]:ExpressionStatement[25848-25863]"
  }, {
    "left" : "tb.popStackToBefore(\"ruby\");",
    "right" : "tb.popStackToBefore(\"ruby\");",
    "info" : "ExpressionStatement[25815-25843]:ExpressionStatement[25896-25924]"
  }, {
    "left" : "tb.insert(startTag);",
    "right" : "tb.insert(startTag);",
    "info" : "ExpressionStatement[25943-25963]:ExpressionStatement[26024-26044]"
  }, {
    "left" : "if (name.equals(\"math\"))",
    "right" : "if (name.equals(\"math\"))",
    "info" : "IfStatement[26017-26816]:IfStatement[26098-26897]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[26042-26270]:Block[26123-26351]"
  }, {
    "left" : "tb.reconstructFormattingElements();",
    "right" : "tb.reconstructFormattingElements();",
    "info" : "ExpressionStatement[26068-26103]:ExpressionStatement[26149-26184]"
  }, {
    "left" : "tb.insert(startTag);",
    "right" : "tb.insert(startTag);",
    "info" : "ExpressionStatement[26228-26248]:ExpressionStatement[26309-26329]"
  }, {
    "left" : "if (name.equals(\"svg\"))",
    "right" : "if (name.equals(\"svg\"))",
    "info" : "IfStatement[26276-26816]:IfStatement[26357-26897]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[26300-26517]:Block[26381-26598]"
  }, {
    "left" : "tb.reconstructFormattingElements();",
    "right" : "tb.reconstructFormattingElements();",
    "info" : "ExpressionStatement[26326-26361]:ExpressionStatement[26407-26442]"
  }, {
    "left" : "tb.insert(startTag);",
    "right" : "tb.insert(startTag);",
    "info" : "ExpressionStatement[26475-26495]:ExpressionStatement[26556-26576]"
  }, {
    "left" : "if (StringUtil.inSorted(name, Constants.InBodyStartDrop))",
    "right" : "if (StringUtil.inSorted(name, Constants.InBodyStartDrop))",
    "info" : "IfStatement[26523-26816]:IfStatement[26604-26897]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[26581-26682]:Block[26662-26763]"
  }, {
    "left" : "tb.error(this);",
    "right" : "tb.error(this);",
    "info" : "ExpressionStatement[26607-26622]:ExpressionStatement[26688-26703]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[26647-26660]:ReturnStatement[26728-26741]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[26688-26816]:Block[26769-26897]"
  }, {
    "left" : "tb.reconstructFormattingElements();",
    "right" : "tb.reconstructFormattingElements();",
    "info" : "ExpressionStatement[26714-26749]:ExpressionStatement[26795-26830]"
  }, {
    "left" : "tb.insert(startTag);",
    "right" : "tb.insert(startTag);",
    "info" : "ExpressionStatement[26774-26794]:ExpressionStatement[26855-26875]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[26837-26843]:BreakStatement[26918-26924]"
  }, {
    "left" : "case EndTag:",
    "right" : "case EndTag:",
    "info" : "SwitchCase[26861-26873]:SwitchCase[26942-26954]"
  }, {
    "left" : "Token.EndTag endTag = t.asEndTag();",
    "right" : "Token.EndTag endTag = t.asEndTag();",
    "info" : "VariableDeclarationStatement[26894-26929]:VariableDeclarationStatement[26975-27010]"
  }, {
    "left" : "name = endTag.normalName();",
    "right" : "name = endTag.normalName();",
    "info" : "ExpressionStatement[26950-26977]:ExpressionStatement[27031-27058]"
  }, {
    "left" : "if (StringUtil.inSorted(name, Constants.InBodyEndAdoptionFormatters))",
    "right" : "if (StringUtil.inSorted(name, Constants.InBodyEndAdoptionFormatters))",
    "info" : "IfStatement[26998-38154]:IfStatement[27079-38235]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[27068-32780]:Block[27149-32861]"
  }, {
    "left" : "for (int i = 0; i < 8; i++)",
    "right" : "for (int i = 0; i < 8; i++)",
    "info" : "ForStatement[27148-32758]:ForStatement[27229-32839]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[27176-32758]:Block[27257-32839]"
  }, {
    "left" : "Element formatEl = tb.getActiveFormattingElement(name);",
    "right" : "Element formatEl = tb.getActiveFormattingElement(name);",
    "info" : "VariableDeclarationStatement[27206-27261]:VariableDeclarationStatement[27287-27342]"
  }, {
    "left" : "if (formatEl == null)",
    "right" : "if (formatEl == null)",
    "info" : "IfStatement[27290-27898]:IfStatement[27371-27979]"
  }, {
    "left" : "return anyOtherEndTag(t, tb);",
    "right" : "return anyOtherEndTag(t, tb);",
    "info" : "ReturnStatement[27344-27373]:ReturnStatement[27425-27454]"
  }, {
    "left" : "if (!tb.onStack(formatEl))",
    "right" : "if (!tb.onStack(formatEl))",
    "info" : "IfStatement[27407-27898]:IfStatement[27488-27979]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[27434-27639]:Block[27515-27720]"
  }, {
    "left" : "tb.error(this);",
    "right" : "tb.error(this);",
    "info" : "ExpressionStatement[27468-27483]:ExpressionStatement[27549-27564]"
  }, {
    "left" : "tb.removeFromActiveFormattingElements(formatEl);",
    "right" : "tb.removeFromActiveFormattingElements(formatEl);",
    "info" : "ExpressionStatement[27516-27564]:ExpressionStatement[27597-27645]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[27597-27609]:ReturnStatement[27678-27690]"
  }, {
    "left" : "if (!tb.inScope(formatEl.nodeName()))",
    "right" : "if (!tb.inScope(formatEl.nodeName()))",
    "info" : "IfStatement[27645-27898]:IfStatement[27726-27979]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[27683-27808]:Block[27764-27889]"
  }, {
    "left" : "tb.error(this);",
    "right" : "tb.error(this);",
    "info" : "ExpressionStatement[27717-27732]:ExpressionStatement[27798-27813]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[27765-27778]:ReturnStatement[27846-27859]"
  }, {
    "left" : "if (tb.currentElement() != formatEl)",
    "right" : "if (tb.currentElement() != formatEl)",
    "info" : "IfStatement[27814-27898]:IfStatement[27895-27979]"
  }, {
    "left" : "tb.error(this);",
    "right" : "tb.error(this);",
    "info" : "ExpressionStatement[27883-27898]:ExpressionStatement[27964-27979]"
  }, {
    "left" : "Element furthestBlock = null;",
    "right" : "Element furthestBlock = null;",
    "info" : "VariableDeclarationStatement[27928-27957]:VariableDeclarationStatement[28009-28038]"
  }, {
    "left" : "Element commonAncestor = null;",
    "right" : "Element commonAncestor = null;",
    "info" : "VariableDeclarationStatement[27986-28016]:VariableDeclarationStatement[28067-28097]"
  }, {
    "left" : "boolean seenFormattingElement = false;",
    "right" : "boolean seenFormattingElement = false;",
    "info" : "VariableDeclarationStatement[28045-28083]:VariableDeclarationStatement[28126-28164]"
  }, {
    "left" : "ArrayList<Element> stack = tb.getStack();",
    "right" : "ArrayList<Element> stack = tb.getStack();",
    "info" : "VariableDeclarationStatement[28112-28153]:VariableDeclarationStatement[28193-28234]"
  }, {
    "left" : "final int stackSize = stack.size();",
    "right" : "final int stackSize = stack.size();",
    "info" : "VariableDeclarationStatement[28344-28379]:VariableDeclarationStatement[28425-28460]"
  }, {
    "left" : "for (int si = 0; si < stackSize && si < 64; si++)",
    "right" : "for (int si = 0; si < stackSize && si < 64; si++)",
    "info" : "ForStatement[28408-28962]:ForStatement[28489-29043]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[28458-28962]:Block[28539-29043]"
  }, {
    "left" : "Element el = stack.get(si);",
    "right" : "Element el = stack.get(si);",
    "info" : "VariableDeclarationStatement[28492-28519]:VariableDeclarationStatement[28573-28600]"
  }, {
    "left" : "if (el == formatEl)",
    "right" : "if (el == formatEl)",
    "info" : "IfStatement[28552-28932]:IfStatement[28633-29013]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[28572-28745]:Block[28653-28826]"
  }, {
    "left" : "commonAncestor = stack.get(si - 1);",
    "right" : "commonAncestor = stack.get(si - 1);",
    "info" : "ExpressionStatement[28610-28645]:ExpressionStatement[28691-28726]"
  }, {
    "left" : "seenFormattingElement = true;",
    "right" : "seenFormattingElement = true;",
    "info" : "ExpressionStatement[28682-28711]:ExpressionStatement[28763-28792]"
  }, {
    "left" : "if (seenFormattingElement && tb.isSpecial(el))",
    "right" : "if (seenFormattingElement && tb.isSpecial(el))",
    "info" : "IfStatement[28751-28932]:IfStatement[28832-29013]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[28798-28932]:Block[28879-29013]"
  }, {
    "left" : "furthestBlock = el;",
    "right" : "furthestBlock = el;",
    "info" : "ExpressionStatement[28836-28855]:ExpressionStatement[28917-28936]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[28892-28898]:BreakStatement[28973-28979]"
  }, {
    "left" : "if (furthestBlock == null)",
    "right" : "if (furthestBlock == null)",
    "info" : "IfStatement[28991-29248]:IfStatement[29072-29329]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[29018-29248]:Block[29099-29329]"
  }, {
    "left" : "tb.popStackToClose(formatEl.nodeName());",
    "right" : "tb.popStackToClose(formatEl.nodeName());",
    "info" : "ExpressionStatement[29052-29092]:ExpressionStatement[29133-29173]"
  }, {
    "left" : "tb.removeFromActiveFormattingElements(formatEl);",
    "right" : "tb.removeFromActiveFormattingElements(formatEl);",
    "info" : "ExpressionStatement[29125-29173]:ExpressionStatement[29206-29254]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[29206-29218]:ReturnStatement[29287-29299]"
  }, {
    "left" : "Element node = furthestBlock;",
    "right" : "Element node = furthestBlock;",
    "info" : "VariableDeclarationStatement[29552-29581]:VariableDeclarationStatement[29633-29662]"
  }, {
    "left" : "Element lastNode = furthestBlock;",
    "right" : "Element lastNode = furthestBlock;",
    "info" : "VariableDeclarationStatement[29610-29643]:VariableDeclarationStatement[29691-29724]"
  }, {
    "left" : "for (int j = 0; j < 3; j++)",
    "right" : "for (int j = 0; j < 3; j++)",
    "info" : "ForStatement[29672-31229]:ForStatement[29753-31310]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[29700-31229]:Block[29781-31310]"
  }, {
    "left" : "if (tb.onStack(node))",
    "right" : "if (tb.onStack(node))",
    "info" : "IfStatement[29734-29821]:IfStatement[29815-29902]"
  }, {
    "left" : "node = tb.aboveOnStack(node);",
    "right" : "node = tb.aboveOnStack(node);",
    "info" : "ExpressionStatement[29792-29821]:ExpressionStatement[29873-29902]"
  }, {
    "left" : "if (!tb.isInActiveFormattingElements(node))",
    "right" : "if (!tb.isInActiveFormattingElements(node))",
    "info" : "IfStatement[29854-30137]:IfStatement[29935-30218]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[29898-30067]:Block[29979-30148]"
  }, {
    "left" : "tb.removeFromStack(node);",
    "right" : "tb.removeFromStack(node);",
    "info" : "ExpressionStatement[29962-29987]:ExpressionStatement[30043-30068]"
  }, {
    "left" : "continue;",
    "right" : "continue;",
    "info" : "ContinueStatement[30024-30033]:ContinueStatement[30105-30114]"
  }, {
    "left" : "if (node == formatEl)",
    "right" : "if (node == formatEl)",
    "info" : "IfStatement[30073-30137]:IfStatement[30154-30218]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[30131-30137]:BreakStatement[30212-30218]"
  }, {
    "left" : "Element replacement = new Element(Tag.valueOf(node.nodeName(), ParseSettings.preserveCase), tb.getBaseUri());",
    "right" : "Element replacement = new Element(Tag.valueOf(node.nodeName(), ParseSettings.preserveCase), tb.getBaseUri());",
    "info" : "VariableDeclarationStatement[30171-30280]:VariableDeclarationStatement[30252-30361]"
  }, {
    "left" : "tb.replaceActiveFormattingElement(node, replacement);",
    "right" : "tb.replaceActiveFormattingElement(node, replacement);",
    "info" : "ExpressionStatement[30410-30463]:ExpressionStatement[30491-30544]"
  }, {
    "left" : "tb.replaceOnStack(node, replacement);",
    "right" : "tb.replaceOnStack(node, replacement);",
    "info" : "ExpressionStatement[30496-30533]:ExpressionStatement[30577-30614]"
  }, {
    "left" : "node = replacement;",
    "right" : "node = replacement;",
    "info" : "ExpressionStatement[30566-30585]:ExpressionStatement[30647-30666]"
  }, {
    "left" : "if (lastNode == furthestBlock)",
    "right" : "if (lastNode == furthestBlock)",
    "info" : "IfStatement[30619-30971]:IfStatement[30700-31052]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[30650-30971]:Block[30731-31052]"
  }, {
    "left" : "if (lastNode.parent() != null)",
    "right" : "if (lastNode.parent() != null)",
    "info" : "IfStatement[31004-31089]:IfStatement[31085-31170]"
  }, {
    "left" : "lastNode.remove();",
    "right" : "lastNode.remove();",
    "info" : "ExpressionStatement[31071-31089]:ExpressionStatement[31152-31170]"
  }, {
    "left" : "node.appendChild(lastNode);",
    "right" : "node.appendChild(lastNode);",
    "info" : "ExpressionStatement[31122-31149]:ExpressionStatement[31203-31230]"
  }, {
    "left" : "lastNode = node;",
    "right" : "lastNode = node;",
    "info" : "ExpressionStatement[31183-31199]:ExpressionStatement[31264-31280]"
  }, {
    "left" : "if (StringUtil.inSorted(commonAncestor.nodeName(), Constants.InBodyEndTableFosters))",
    "right" : "if (StringUtil.inSorted(commonAncestor.nodeName(), Constants.InBodyEndTableFosters))",
    "info" : "IfStatement[31259-31785]:IfStatement[31340-31866]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[31344-31560]:Block[31425-31641]"
  }, {
    "left" : "if (lastNode.parent() != null)",
    "right" : "if (lastNode.parent() != null)",
    "info" : "IfStatement[31378-31463]:IfStatement[31459-31544]"
  }, {
    "left" : "lastNode.remove();",
    "right" : "lastNode.remove();",
    "info" : "ExpressionStatement[31445-31463]:ExpressionStatement[31526-31544]"
  }, {
    "left" : "tb.insertInFosterParent(lastNode);",
    "right" : "tb.insertInFosterParent(lastNode);",
    "info" : "ExpressionStatement[31496-31530]:ExpressionStatement[31577-31611]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[31566-31785]:Block[31647-31866]"
  }, {
    "left" : "if (lastNode.parent() != null)",
    "right" : "if (lastNode.parent() != null)",
    "info" : "IfStatement[31600-31685]:IfStatement[31681-31766]"
  }, {
    "left" : "lastNode.remove();",
    "right" : "lastNode.remove();",
    "info" : "ExpressionStatement[31667-31685]:ExpressionStatement[31748-31766]"
  }, {
    "left" : "commonAncestor.appendChild(lastNode);",
    "right" : "commonAncestor.appendChild(lastNode);",
    "info" : "ExpressionStatement[31718-31755]:ExpressionStatement[31799-31836]"
  }, {
    "left" : "Element adopter = new Element(formatEl.tag(), tb.getBaseUri());",
    "right" : "Element adopter = new Element(formatEl.tag(), tb.getBaseUri());",
    "info" : "VariableDeclarationStatement[31815-31878]:VariableDeclarationStatement[31896-31959]"
  }, {
    "left" : "adopter.attributes().addAll(formatEl.attributes());",
    "right" : "adopter.attributes().addAll(formatEl.attributes());",
    "info" : "ExpressionStatement[31907-31958]:ExpressionStatement[31988-32039]"
  }, {
    "left" : "Node[] childNodes = furthestBlock.childNodes().toArray(new Node[furthestBlock.childNodeSize()]);",
    "right" : "Node[] childNodes = furthestBlock.childNodes().toArray(new Node[furthestBlock.childNodeSize()]);",
    "info" : "VariableDeclarationStatement[31987-32083]:VariableDeclarationStatement[32068-32164]"
  }, {
    "left" : "for (Node childNode : childNodes)",
    "right" : "for (Node childNode : childNodes)",
    "info" : "EnhancedForStatement[32112-32306]:EnhancedForStatement[32193-32387]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[32146-32306]:Block[32227-32387]"
  }, {
    "left" : "adopter.appendChild(childNode);",
    "right" : "adopter.appendChild(childNode);",
    "info" : "ExpressionStatement[32180-32211]:ExpressionStatement[32261-32292]"
  }, {
    "left" : "furthestBlock.appendChild(adopter);",
    "right" : "furthestBlock.appendChild(adopter);",
    "info" : "ExpressionStatement[32335-32370]:ExpressionStatement[32416-32451]"
  }, {
    "left" : "tb.removeFromActiveFormattingElements(formatEl);",
    "right" : "tb.removeFromActiveFormattingElements(formatEl);",
    "info" : "ExpressionStatement[32399-32447]:ExpressionStatement[32480-32528]"
  }, {
    "left" : "tb.removeFromStack(formatEl);",
    "right" : "tb.removeFromStack(formatEl);",
    "info" : "ExpressionStatement[32628-32657]:ExpressionStatement[32709-32738]"
  }, {
    "left" : "tb.insertOnStackAfter(furthestBlock, adopter);",
    "right" : "tb.insertOnStackAfter(furthestBlock, adopter);",
    "info" : "ExpressionStatement[32686-32732]:ExpressionStatement[32767-32813]"
  }, {
    "left" : "if (StringUtil.inSorted(name, Constants.InBodyEndClosers))",
    "right" : "if (StringUtil.inSorted(name, Constants.InBodyEndClosers))",
    "info" : "IfStatement[32786-38154]:IfStatement[32867-38235]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[32845-33347]:Block[32926-33428]"
  }, {
    "left" : "if (!tb.inScope(name))",
    "right" : "if (!tb.inScope(name))",
    "info" : "IfStatement[32871-33325]:IfStatement[32952-33406]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[32894-33055]:Block[32975-33136]"
  }, {
    "left" : "tb.error(this);",
    "right" : "tb.error(this);",
    "info" : "ExpressionStatement[32972-32987]:ExpressionStatement[33053-33068]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[33016-33029]:ReturnStatement[33097-33110]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[33061-33325]:Block[33142-33406]"
  }, {
    "left" : "tb.generateImpliedEndTags();",
    "right" : "tb.generateImpliedEndTags();",
    "info" : "ExpressionStatement[33091-33119]:ExpressionStatement[33172-33200]"
  }, {
    "left" : "if (!tb.currentElement().nodeName().equals(name))",
    "right" : "if (!tb.currentElement().nodeName().equals(name))",
    "info" : "IfStatement[33148-33245]:IfStatement[33229-33326]"
  }, {
    "left" : "tb.error(this);",
    "right" : "tb.error(this);",
    "info" : "ExpressionStatement[33230-33245]:ExpressionStatement[33311-33326]"
  }, {
    "left" : "tb.popStackToClose(name);",
    "right" : "tb.popStackToClose(name);",
    "info" : "ExpressionStatement[33274-33299]:ExpressionStatement[33355-33380]"
  }, {
    "left" : "if (name.equals(\"span\"))",
    "right" : "if (name.equals(\"span\"))",
    "info" : "IfStatement[33353-38154]:IfStatement[33434-38235]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[33378-33534]:Block[33459-33615]"
  }, {
    "left" : "return anyOtherEndTag(t, tb);",
    "right" : "return anyOtherEndTag(t, tb);",
    "info" : "ReturnStatement[33483-33512]:ReturnStatement[33564-33593]"
  }, {
    "left" : "if (name.equals(\"li\"))",
    "right" : "if (name.equals(\"li\"))",
    "info" : "IfStatement[33540-38154]:IfStatement[33621-38235]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[33563-34029]:Block[33644-34110]"
  }, {
    "left" : "if (!tb.inListItemScope(name))",
    "right" : "if (!tb.inListItemScope(name))",
    "info" : "IfStatement[33589-34007]:IfStatement[33670-34088]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[33620-33733]:Block[33701-33814]"
  }, {
    "left" : "tb.error(this);",
    "right" : "tb.error(this);",
    "info" : "ExpressionStatement[33650-33665]:ExpressionStatement[33731-33746]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[33694-33707]:ReturnStatement[33775-33788]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[33739-34007]:Block[33820-34088]"
  }, {
    "left" : "tb.generateImpliedEndTags(name);",
    "right" : "tb.generateImpliedEndTags(name);",
    "info" : "ExpressionStatement[33769-33801]:ExpressionStatement[33850-33882]"
  }, {
    "left" : "if (!tb.currentElement().nodeName().equals(name))",
    "right" : "if (!tb.currentElement().nodeName().equals(name))",
    "info" : "IfStatement[33830-33927]:IfStatement[33911-34008]"
  }, {
    "left" : "tb.error(this);",
    "right" : "tb.error(this);",
    "info" : "ExpressionStatement[33912-33927]:ExpressionStatement[33993-34008]"
  }, {
    "left" : "tb.popStackToClose(name);",
    "right" : "tb.popStackToClose(name);",
    "info" : "ExpressionStatement[33956-33981]:ExpressionStatement[34037-34062]"
  }, {
    "left" : "if (name.equals(\"body\"))",
    "right" : "if (name.equals(\"body\"))",
    "info" : "IfStatement[34035-38154]:IfStatement[34116-38235]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[34060-34493]:Block[34141-34574]"
  }, {
    "left" : "if (!tb.inScope(\"body\"))",
    "right" : "if (!tb.inScope(\"body\"))",
    "info" : "IfStatement[34086-34471]:IfStatement[34167-34552]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[34111-34224]:Block[34192-34305]"
  }, {
    "left" : "tb.error(this);",
    "right" : "tb.error(this);",
    "info" : "ExpressionStatement[34141-34156]:ExpressionStatement[34222-34237]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[34185-34198]:ReturnStatement[34266-34279]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[34230-34471]:Block[34311-34552]"
  }, {
    "left" : "tb.transition(AfterBody);",
    "right" : "tb.transition(AfterBody);",
    "info" : "ExpressionStatement[34420-34445]:ExpressionStatement[34501-34526]"
  }, {
    "left" : "if (name.equals(\"html\"))",
    "right" : "if (name.equals(\"html\"))",
    "info" : "IfStatement[34499-38154]:IfStatement[34580-38235]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[34524-34713]:Block[34605-34794]"
  }, {
    "left" : "boolean notIgnored = tb.processEndTag(\"body\");",
    "right" : "boolean notIgnored = tb.processEndTag(\"body\");",
    "info" : "VariableDeclarationStatement[34550-34596]:VariableDeclarationStatement[34631-34677]"
  }, {
    "left" : "if (notIgnored)",
    "right" : "if (notIgnored)",
    "info" : "IfStatement[34621-34691]:IfStatement[34702-34772]"
  }, {
    "left" : "return tb.process(endTag);",
    "right" : "return tb.process(endTag);",
    "info" : "ReturnStatement[34665-34691]:ReturnStatement[34746-34772]"
  }, {
    "left" : "if (name.equals(\"form\"))",
    "right" : "if (name.equals(\"form\"))",
    "info" : "IfStatement[34719-38154]:IfStatement[34800-38235]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[34744-35436]:Block[34825-35517]"
  }, {
    "left" : "Element currentForm = tb.getFormElement();",
    "right" : "Element currentForm = tb.getFormElement();",
    "info" : "VariableDeclarationStatement[34770-34812]:VariableDeclarationStatement[34851-34893]"
  }, {
    "left" : "tb.setFormElement(null);",
    "right" : "tb.setFormElement(null);",
    "info" : "ExpressionStatement[34837-34861]:ExpressionStatement[34918-34942]"
  }, {
    "left" : "if (currentForm == null || !tb.inScope(name))",
    "right" : "if (currentForm == null || !tb.inScope(name))",
    "info" : "IfStatement[34886-35414]:IfStatement[34967-35495]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[34932-35045]:Block[35013-35126]"
  }, {
    "left" : "tb.error(this);",
    "right" : "tb.error(this);",
    "info" : "ExpressionStatement[34962-34977]:ExpressionStatement[35043-35058]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[35006-35019]:ReturnStatement[35087-35100]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[35051-35414]:Block[35132-35495]"
  }, {
    "left" : "tb.generateImpliedEndTags();",
    "right" : "tb.generateImpliedEndTags();",
    "info" : "ExpressionStatement[35081-35109]:ExpressionStatement[35162-35190]"
  }, {
    "left" : "if (!tb.currentElement().nodeName().equals(name))",
    "right" : "if (!tb.currentElement().nodeName().equals(name))",
    "info" : "IfStatement[35138-35235]:IfStatement[35219-35316]"
  }, {
    "left" : "tb.error(this);",
    "right" : "tb.error(this);",
    "info" : "ExpressionStatement[35220-35235]:ExpressionStatement[35301-35316]"
  }, {
    "left" : "tb.removeFromStack(currentForm);",
    "right" : "tb.removeFromStack(currentForm);",
    "info" : "ExpressionStatement[35356-35388]:ExpressionStatement[35437-35469]"
  }, {
    "left" : "if (name.equals(\"p\"))",
    "right" : "if (name.equals(\"p\"))",
    "info" : "IfStatement[35442-38154]:IfStatement[35523-38235]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[35464-36041]:Block[35545-36122]"
  }, {
    "left" : "if (!tb.inButtonScope(name))",
    "right" : "if (!tb.inButtonScope(name))",
    "info" : "IfStatement[35490-36019]:IfStatement[35571-36100]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[35519-35745]:Block[35600-35826]"
  }, {
    "left" : "tb.error(this);",
    "right" : "tb.error(this);",
    "info" : "ExpressionStatement[35549-35564]:ExpressionStatement[35630-35645]"
  }, {
    "left" : "tb.processStartTag(name);",
    "right" : "tb.processStartTag(name);",
    "info" : "ExpressionStatement[35593-35618]:ExpressionStatement[35674-35699]"
  }, {
    "left" : "return tb.process(endTag);",
    "right" : "return tb.process(endTag);",
    "info" : "ReturnStatement[35693-35719]:ReturnStatement[35774-35800]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[35751-36019]:Block[35832-36100]"
  }, {
    "left" : "tb.generateImpliedEndTags(name);",
    "right" : "tb.generateImpliedEndTags(name);",
    "info" : "ExpressionStatement[35781-35813]:ExpressionStatement[35862-35894]"
  }, {
    "left" : "if (!tb.currentElement().nodeName().equals(name))",
    "right" : "if (!tb.currentElement().nodeName().equals(name))",
    "info" : "IfStatement[35842-35939]:IfStatement[35923-36020]"
  }, {
    "left" : "tb.error(this);",
    "right" : "tb.error(this);",
    "info" : "ExpressionStatement[35924-35939]:ExpressionStatement[36005-36020]"
  }, {
    "left" : "tb.popStackToClose(name);",
    "right" : "tb.popStackToClose(name);",
    "info" : "ExpressionStatement[35968-35993]:ExpressionStatement[36049-36074]"
  }, {
    "left" : "if (StringUtil.inSorted(name, Constants.DdDt))",
    "right" : "if (StringUtil.inSorted(name, Constants.DdDt))",
    "info" : "IfStatement[36047-38154]:IfStatement[36128-38235]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[36094-36552]:Block[36175-36633]"
  }, {
    "left" : "if (!tb.inScope(name))",
    "right" : "if (!tb.inScope(name))",
    "info" : "IfStatement[36120-36530]:IfStatement[36201-36611]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[36143-36256]:Block[36224-36337]"
  }, {
    "left" : "tb.error(this);",
    "right" : "tb.error(this);",
    "info" : "ExpressionStatement[36173-36188]:ExpressionStatement[36254-36269]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[36217-36230]:ReturnStatement[36298-36311]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[36262-36530]:Block[36343-36611]"
  }, {
    "left" : "tb.generateImpliedEndTags(name);",
    "right" : "tb.generateImpliedEndTags(name);",
    "info" : "ExpressionStatement[36292-36324]:ExpressionStatement[36373-36405]"
  }, {
    "left" : "if (!tb.currentElement().nodeName().equals(name))",
    "right" : "if (!tb.currentElement().nodeName().equals(name))",
    "info" : "IfStatement[36353-36450]:IfStatement[36434-36531]"
  }, {
    "left" : "tb.error(this);",
    "right" : "tb.error(this);",
    "info" : "ExpressionStatement[36435-36450]:ExpressionStatement[36516-36531]"
  }, {
    "left" : "tb.popStackToClose(name);",
    "right" : "tb.popStackToClose(name);",
    "info" : "ExpressionStatement[36479-36504]:ExpressionStatement[36560-36585]"
  }, {
    "left" : "if (StringUtil.inSorted(name, Constants.Headings))",
    "right" : "if (StringUtil.inSorted(name, Constants.Headings))",
    "info" : "IfStatement[36558-38154]:IfStatement[36639-38235]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[36609-37095]:Block[36690-37176]"
  }, {
    "left" : "if (!tb.inScope(Constants.Headings))",
    "right" : "if (!tb.inScope(Constants.Headings))",
    "info" : "IfStatement[36635-37073]:IfStatement[36716-37154]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[36672-36785]:Block[36753-36866]"
  }, {
    "left" : "tb.error(this);",
    "right" : "tb.error(this);",
    "info" : "ExpressionStatement[36702-36717]:ExpressionStatement[36783-36798]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[36746-36759]:ReturnStatement[36827-36840]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[36791-37073]:Block[36872-37154]"
  }, {
    "left" : "tb.generateImpliedEndTags(name);",
    "right" : "tb.generateImpliedEndTags(name);",
    "info" : "ExpressionStatement[36821-36853]:ExpressionStatement[36902-36934]"
  }, {
    "left" : "if (!tb.currentElement().nodeName().equals(name))",
    "right" : "if (!tb.currentElement().nodeName().equals(name))",
    "info" : "IfStatement[36882-36979]:IfStatement[36963-37060]"
  }, {
    "left" : "tb.error(this);",
    "right" : "tb.error(this);",
    "info" : "ExpressionStatement[36964-36979]:ExpressionStatement[37045-37060]"
  }, {
    "left" : "tb.popStackToClose(Constants.Headings);",
    "right" : "tb.popStackToClose(Constants.Headings);",
    "info" : "ExpressionStatement[37008-37047]:ExpressionStatement[37089-37128]"
  }, {
    "left" : "if (name.equals(\"sarcasm\"))",
    "right" : "if (name.equals(\"sarcasm\"))",
    "info" : "IfStatement[37101-38154]:IfStatement[37182-38235]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[37129-37240]:Block[37210-37321]"
  }, {
    "left" : "return anyOtherEndTag(t, tb);",
    "right" : "return anyOtherEndTag(t, tb);",
    "info" : "ReturnStatement[37189-37218]:ReturnStatement[37270-37299]"
  }, {
    "left" : "if (StringUtil.inSorted(name, Constants.InBodyStartApplets))",
    "right" : "if (StringUtil.inSorted(name, Constants.InBodyStartApplets))",
    "info" : "IfStatement[37246-38154]:IfStatement[37327-38235]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[37307-37891]:Block[37388-37972]"
  }, {
    "left" : "if (!tb.inScope(\"name\"))",
    "right" : "if (!tb.inScope(\"name\"))",
    "info" : "IfStatement[37333-37869]:IfStatement[37414-37950]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[37358-37869]:Block[37439-37950]"
  }, {
    "left" : "if (!tb.inScope(name))",
    "right" : "if (!tb.inScope(name))",
    "info" : "IfStatement[37388-37536]:IfStatement[37469-37617]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[37411-37536]:Block[37492-37617]"
  }, {
    "left" : "tb.error(this);",
    "right" : "tb.error(this);",
    "info" : "ExpressionStatement[37445-37460]:ExpressionStatement[37526-37541]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[37493-37506]:ReturnStatement[37574-37587]"
  }, {
    "left" : "tb.generateImpliedEndTags();",
    "right" : "tb.generateImpliedEndTags();",
    "info" : "ExpressionStatement[37565-37593]:ExpressionStatement[37646-37674]"
  }, {
    "left" : "if (!tb.currentElement().nodeName().equals(name))",
    "right" : "if (!tb.currentElement().nodeName().equals(name))",
    "info" : "IfStatement[37622-37719]:IfStatement[37703-37800]"
  }, {
    "left" : "tb.error(this);",
    "right" : "tb.error(this);",
    "info" : "ExpressionStatement[37704-37719]:ExpressionStatement[37785-37800]"
  }, {
    "left" : "tb.popStackToClose(name);",
    "right" : "tb.popStackToClose(name);",
    "info" : "ExpressionStatement[37748-37773]:ExpressionStatement[37829-37854]"
  }, {
    "left" : "tb.clearFormattingElementsToLastMarker();",
    "right" : "tb.clearFormattingElementsToLastMarker();",
    "info" : "ExpressionStatement[37802-37843]:ExpressionStatement[37883-37924]"
  }, {
    "left" : "if (name.equals(\"br\"))",
    "right" : "if (name.equals(\"br\"))",
    "info" : "IfStatement[37897-38154]:IfStatement[37978-38235]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[37920-38071]:Block[38001-38152]"
  }, {
    "left" : "tb.error(this);",
    "right" : "tb.error(this);",
    "info" : "ExpressionStatement[37946-37961]:ExpressionStatement[38027-38042]"
  }, {
    "left" : "tb.processStartTag(\"br\");",
    "right" : "tb.processStartTag(\"br\");",
    "info" : "ExpressionStatement[37986-38011]:ExpressionStatement[38067-38092]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[38036-38049]:ReturnStatement[38117-38130]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[38077-38154]:Block[38158-38235]"
  }, {
    "left" : "return anyOtherEndTag(t, tb);",
    "right" : "return anyOtherEndTag(t, tb);",
    "info" : "ReturnStatement[38103-38132]:ReturnStatement[38184-38213]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[38176-38182]:BreakStatement[38257-38263]"
  }, {
    "left" : "case EOF:",
    "right" : "case EOF:",
    "info" : "SwitchCase[38199-38208]:SwitchCase[38280-38289]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[38391-38397]:BreakStatement[38472-38478]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[38424-38436]:ReturnStatement[38505-38517]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[38456-38463]:PrimitiveType[38537-38544]"
  }, {
    "left" : "anyOtherEndTag",
    "right" : "anyOtherEndTag",
    "info" : "SimpleName[38464-38478]:SimpleName[38545-38559]"
  }, {
    "left" : "Token t",
    "right" : "Token t",
    "info" : "SingleVariableDeclaration[38479-38486]:SingleVariableDeclaration[38560-38567]"
  }, {
    "left" : "HtmlTreeBuilder tb",
    "right" : "HtmlTreeBuilder tb",
    "info" : "SingleVariableDeclaration[38488-38506]:SingleVariableDeclaration[38569-38587]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[38508-39316]:Block[38589-39397]"
  }, {
    "left" : "String name = tb.settings.normalizeTag(t.asEndTag().name());",
    "right" : "String name = tb.settings.normalizeTag(t.asEndTag().name());",
    "info" : "VariableDeclarationStatement[38522-38582]:VariableDeclarationStatement[38603-38663]"
  }, {
    "left" : "ArrayList<Element> stack = tb.getStack();",
    "right" : "ArrayList<Element> stack = tb.getStack();",
    "info" : "VariableDeclarationStatement[38639-38680]:VariableDeclarationStatement[38720-38761]"
  }, {
    "left" : "for (int pos = stack.size() -1; pos >= 0; pos--)",
    "right" : "for (int pos = stack.size() -1; pos >= 0; pos--)",
    "info" : "ForStatement[38693-39281]:ForStatement[38774-39362]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[38742-39281]:Block[38823-39362]"
  }, {
    "left" : "Element node = stack.get(pos);",
    "right" : "Element node = stack.get(pos);",
    "info" : "VariableDeclarationStatement[38760-38790]:VariableDeclarationStatement[38841-38871]"
  }, {
    "left" : "if (node.nodeName().equals(name))",
    "right" : "if (node.nodeName().equals(name))",
    "info" : "IfStatement[38807-39267]:IfStatement[38888-39348]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[38841-39096]:Block[38922-39177]"
  }, {
    "left" : "tb.generateImpliedEndTags(name);",
    "right" : "tb.generateImpliedEndTags(name);",
    "info" : "ExpressionStatement[38863-38895]:ExpressionStatement[38944-38976]"
  }, {
    "left" : "if (!name.equals(tb.currentElement().nodeName()))",
    "right" : "if (!name.equals(tb.currentElement().nodeName()))",
    "info" : "IfStatement[38916-39005]:IfStatement[38997-39086]"
  }, {
    "left" : "tb.error(this);",
    "right" : "tb.error(this);",
    "info" : "ExpressionStatement[38990-39005]:ExpressionStatement[39071-39086]"
  }, {
    "left" : "tb.popStackToClose(name);",
    "right" : "tb.popStackToClose(name);",
    "info" : "ExpressionStatement[39026-39051]:ExpressionStatement[39107-39132]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[39072-39078]:BreakStatement[39153-39159]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[39102-39267]:Block[39183-39348]"
  }, {
    "left" : "if (tb.isSpecial(node))",
    "right" : "if (tb.isSpecial(node))",
    "info" : "IfStatement[39124-39249]:IfStatement[39205-39330]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[39148-39249]:Block[39229-39330]"
  }, {
    "left" : "tb.error(this);",
    "right" : "tb.error(this);",
    "info" : "ExpressionStatement[39174-39189]:ExpressionStatement[39255-39270]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[39214-39227]:ReturnStatement[39295-39308]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[39294-39306]:ReturnStatement[39375-39387]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[39406-39413]:PrimitiveType[39487-39494]"
  }, {
    "left" : "process",
    "right" : "process",
    "info" : "SimpleName[39414-39421]:SimpleName[39495-39502]"
  }, {
    "left" : "Token t",
    "right" : "Token t",
    "info" : "SingleVariableDeclaration[39422-39429]:SingleVariableDeclaration[39503-39510]"
  }, {
    "left" : "HtmlTreeBuilder tb",
    "right" : "HtmlTreeBuilder tb",
    "info" : "SingleVariableDeclaration[39431-39449]:SingleVariableDeclaration[39512-39530]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[39451-40052]:Block[39532-40133]"
  }, {
    "left" : "if (t.isCharacter())",
    "right" : "if (t.isCharacter())",
    "info" : "IfStatement[39465-40017]:IfStatement[39546-40098]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[39486-39545]:Block[39567-39626]"
  }, {
    "left" : "tb.insert(t.asCharacter());",
    "right" : "tb.insert(t.asCharacter());",
    "info" : "ExpressionStatement[39504-39531]:ExpressionStatement[39585-39612]"
  }, {
    "left" : "if (t.isEOF())",
    "right" : "if (t.isEOF())",
    "info" : "IfStatement[39551-40017]:IfStatement[39632-40098]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[39566-39790]:Block[39647-39871]"
  }, {
    "left" : "tb.error(this);",
    "right" : "tb.error(this);",
    "info" : "ExpressionStatement[39584-39599]:ExpressionStatement[39665-39680]"
  }, {
    "left" : "tb.pop();",
    "right" : "tb.pop();",
    "info" : "ExpressionStatement[39678-39687]:ExpressionStatement[39759-39768]"
  }, {
    "left" : "tb.transition(tb.originalState());",
    "right" : "tb.transition(tb.originalState());",
    "info" : "ExpressionStatement[39704-39738]:ExpressionStatement[39785-39819]"
  }, {
    "left" : "return tb.process(t);",
    "right" : "return tb.process(t);",
    "info" : "ReturnStatement[39755-39776]:ReturnStatement[39836-39857]"
  }, {
    "left" : "if (t.isEndTag())",
    "right" : "if (t.isEndTag())",
    "info" : "IfStatement[39796-40017]:IfStatement[39877-40098]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[39814-40017]:Block[39895-40098]"
  }, {
    "left" : "tb.pop();",
    "right" : "tb.pop();",
    "info" : "ExpressionStatement[39943-39952]:ExpressionStatement[40024-40033]"
  }, {
    "left" : "tb.transition(tb.originalState());",
    "right" : "tb.transition(tb.originalState());",
    "info" : "ExpressionStatement[39969-40003]:ExpressionStatement[40050-40084]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[40030-40042]:ReturnStatement[40111-40123]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[40082-40089]:PrimitiveType[40163-40170]"
  }, {
    "left" : "process",
    "right" : "process",
    "info" : "SimpleName[40090-40097]:SimpleName[40171-40178]"
  }, {
    "left" : "Token t",
    "right" : "Token t",
    "info" : "SingleVariableDeclaration[40098-40105]:SingleVariableDeclaration[40179-40186]"
  }, {
    "left" : "HtmlTreeBuilder tb",
    "right" : "HtmlTreeBuilder tb",
    "info" : "SingleVariableDeclaration[40107-40125]:SingleVariableDeclaration[40188-40206]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[40127-43971]:Block[40208-44052]"
  }, {
    "left" : "if (t.isCharacter())",
    "right" : "if (t.isCharacter())",
    "info" : "IfStatement[40141-43921]:IfStatement[40222-44002]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[40162-40347]:Block[40243-40428]"
  }, {
    "left" : "tb.newPendingTableCharacters();",
    "right" : "tb.newPendingTableCharacters();",
    "info" : "ExpressionStatement[40180-40211]:ExpressionStatement[40261-40292]"
  }, {
    "left" : "tb.markInsertionMode();",
    "right" : "tb.markInsertionMode();",
    "info" : "ExpressionStatement[40228-40251]:ExpressionStatement[40309-40332]"
  }, {
    "left" : "tb.transition(InTableText);",
    "right" : "tb.transition(InTableText);",
    "info" : "ExpressionStatement[40268-40295]:ExpressionStatement[40349-40376]"
  }, {
    "left" : "return tb.process(t);",
    "right" : "return tb.process(t);",
    "info" : "ReturnStatement[40312-40333]:ReturnStatement[40393-40414]"
  }, {
    "left" : "if (t.isComment())",
    "right" : "if (t.isComment())",
    "info" : "IfStatement[40353-43921]:IfStatement[40434-44002]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[40372-40458]:Block[40453-40539]"
  }, {
    "left" : "tb.insert(t.asComment());",
    "right" : "tb.insert(t.asComment());",
    "info" : "ExpressionStatement[40390-40415]:ExpressionStatement[40471-40496]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[40432-40444]:ReturnStatement[40513-40525]"
  }, {
    "left" : "if (t.isDoctype())",
    "right" : "if (t.isDoctype())",
    "info" : "IfStatement[40464-43921]:IfStatement[40545-44002]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[40483-40560]:Block[40564-40641]"
  }, {
    "left" : "tb.error(this);",
    "right" : "tb.error(this);",
    "info" : "ExpressionStatement[40501-40516]:ExpressionStatement[40582-40597]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[40533-40546]:ReturnStatement[40614-40627]"
  }, {
    "left" : "if (t.isStartTag())",
    "right" : "if (t.isStartTag())",
    "info" : "IfStatement[40566-43921]:IfStatement[40647-44002]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[40586-42894]:Block[40667-42975]"
  }, {
    "left" : "Token.StartTag startTag = t.asStartTag();",
    "right" : "Token.StartTag startTag = t.asStartTag();",
    "info" : "VariableDeclarationStatement[40604-40645]:VariableDeclarationStatement[40685-40726]"
  }, {
    "left" : "String name = startTag.normalName();",
    "right" : "String name = startTag.normalName();",
    "info" : "VariableDeclarationStatement[40662-40698]:VariableDeclarationStatement[40743-40779]"
  }, {
    "left" : "if (name.equals(\"caption\"))",
    "right" : "if (name.equals(\"caption\"))",
    "info" : "IfStatement[40715-42705]:IfStatement[40796-42786]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[40743-40959]:Block[40824-41040]"
  }, {
    "left" : "tb.clearStackToTableContext();",
    "right" : "tb.clearStackToTableContext();",
    "info" : "ExpressionStatement[40765-40795]:ExpressionStatement[40846-40876]"
  }, {
    "left" : "tb.insertMarkerToFormattingElements();",
    "right" : "tb.insertMarkerToFormattingElements();",
    "info" : "ExpressionStatement[40816-40854]:ExpressionStatement[40897-40935]"
  }, {
    "left" : "tb.insert(startTag);",
    "right" : "tb.insert(startTag);",
    "info" : "ExpressionStatement[40875-40895]:ExpressionStatement[40956-40976]"
  }, {
    "left" : "tb.transition(InCaption);",
    "right" : "tb.transition(InCaption);",
    "info" : "ExpressionStatement[40916-40941]:ExpressionStatement[40997-41022]"
  }, {
    "left" : "if (name.equals(\"colgroup\"))",
    "right" : "if (name.equals(\"colgroup\"))",
    "info" : "IfStatement[40965-42705]:IfStatement[41046-42786]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[40994-41155]:Block[41075-41236]"
  }, {
    "left" : "tb.clearStackToTableContext();",
    "right" : "tb.clearStackToTableContext();",
    "info" : "ExpressionStatement[41016-41046]:ExpressionStatement[41097-41127]"
  }, {
    "left" : "tb.insert(startTag);",
    "right" : "tb.insert(startTag);",
    "info" : "ExpressionStatement[41067-41087]:ExpressionStatement[41148-41168]"
  }, {
    "left" : "tb.transition(InColumnGroup);",
    "right" : "tb.transition(InColumnGroup);",
    "info" : "ExpressionStatement[41108-41137]:ExpressionStatement[41189-41218]"
  }, {
    "left" : "if (name.equals(\"col\"))",
    "right" : "if (name.equals(\"col\"))",
    "info" : "IfStatement[41161-42705]:IfStatement[41242-42786]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[41185-41298]:Block[41266-41379]"
  }, {
    "left" : "tb.processStartTag(\"colgroup\");",
    "right" : "tb.processStartTag(\"colgroup\");",
    "info" : "ExpressionStatement[41207-41238]:ExpressionStatement[41288-41319]"
  }, {
    "left" : "return tb.process(t);",
    "right" : "return tb.process(t);",
    "info" : "ReturnStatement[41259-41280]:ReturnStatement[41340-41361]"
  }, {
    "left" : "if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\"))",
    "right" : "if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\"))",
    "info" : "IfStatement[41304-42705]:IfStatement[41385-42786]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[41356-41515]:Block[41437-41596]"
  }, {
    "left" : "tb.clearStackToTableContext();",
    "right" : "tb.clearStackToTableContext();",
    "info" : "ExpressionStatement[41378-41408]:ExpressionStatement[41459-41489]"
  }, {
    "left" : "tb.insert(startTag);",
    "right" : "tb.insert(startTag);",
    "info" : "ExpressionStatement[41429-41449]:ExpressionStatement[41510-41530]"
  }, {
    "left" : "tb.transition(InTableBody);",
    "right" : "tb.transition(InTableBody);",
    "info" : "ExpressionStatement[41470-41497]:ExpressionStatement[41551-41578]"
  }, {
    "left" : "if (StringUtil.in(name, \"td\", \"th\", \"tr\"))",
    "right" : "if (StringUtil.in(name, \"td\", \"th\", \"tr\"))",
    "info" : "IfStatement[41521-42705]:IfStatement[41602-42786]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[41564-41674]:Block[41645-41755]"
  }, {
    "left" : "tb.processStartTag(\"tbody\");",
    "right" : "tb.processStartTag(\"tbody\");",
    "info" : "ExpressionStatement[41586-41614]:ExpressionStatement[41667-41695]"
  }, {
    "left" : "return tb.process(t);",
    "right" : "return tb.process(t);",
    "info" : "ReturnStatement[41635-41656]:ReturnStatement[41716-41737]"
  }, {
    "left" : "if (name.equals(\"table\"))",
    "right" : "if (name.equals(\"table\"))",
    "info" : "IfStatement[41680-42705]:IfStatement[41761-42786]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[41706-41940]:Block[41787-42021]"
  }, {
    "left" : "tb.error(this);",
    "right" : "tb.error(this);",
    "info" : "ExpressionStatement[41728-41743]:ExpressionStatement[41809-41824]"
  }, {
    "left" : "boolean processed = tb.processEndTag(\"table\");",
    "right" : "boolean processed = tb.processEndTag(\"table\");",
    "info" : "VariableDeclarationStatement[41764-41810]:VariableDeclarationStatement[41845-41891]"
  }, {
    "left" : "if (processed)",
    "right" : "if (processed)",
    "info" : "IfStatement[41831-41922]:IfStatement[41912-42003]"
  }, {
    "left" : "return tb.process(t);",
    "right" : "return tb.process(t);",
    "info" : "ReturnStatement[41901-41922]:ReturnStatement[41982-42003]"
  }, {
    "left" : "if (StringUtil.in(name, \"style\", \"script\"))",
    "right" : "if (StringUtil.in(name, \"style\", \"script\"))",
    "info" : "IfStatement[41946-42705]:IfStatement[42027-42786]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[41990-42059]:Block[42071-42140]"
  }, {
    "left" : "return tb.process(t, InHead);",
    "right" : "return tb.process(t, InHead);",
    "info" : "ReturnStatement[42012-42041]:ReturnStatement[42093-42122]"
  }, {
    "left" : "if (name.equals(\"input\"))",
    "right" : "if (name.equals(\"input\"))",
    "info" : "IfStatement[42065-42705]:IfStatement[42146-42786]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[42091-42350]:Block[42172-42431]"
  }, {
    "left" : "if (!startTag.attributes.get(\"type\").equalsIgnoreCase(\"hidden\"))",
    "right" : "if (!startTag.attributes.get(\"type\").equalsIgnoreCase(\"hidden\"))",
    "info" : "IfStatement[42113-42332]:IfStatement[42194-42413]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[42178-42253]:Block[42259-42334]"
  }, {
    "left" : "return anythingElse(t, tb);",
    "right" : "return anythingElse(t, tb);",
    "info" : "ReturnStatement[42204-42231]:ReturnStatement[42285-42312]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[42259-42332]:Block[42340-42413]"
  }, {
    "left" : "tb.insertEmpty(startTag);",
    "right" : "tb.insertEmpty(startTag);",
    "info" : "ExpressionStatement[42285-42310]:ExpressionStatement[42366-42391]"
  }, {
    "left" : "if (name.equals(\"form\"))",
    "right" : "if (name.equals(\"form\"))",
    "info" : "IfStatement[42356-42705]:IfStatement[42437-42786]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[42381-42632]:Block[42462-42713]"
  }, {
    "left" : "tb.error(this);",
    "right" : "tb.error(this);",
    "info" : "ExpressionStatement[42403-42418]:ExpressionStatement[42484-42499]"
  }, {
    "left" : "if (tb.getFormElement() != null)",
    "right" : "if (tb.getFormElement() != null)",
    "info" : "IfStatement[42439-42614]:IfStatement[42520-42695]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[42496-42509]:ReturnStatement[42577-42590]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[42535-42614]:Block[42616-42695]"
  }, {
    "left" : "tb.insertForm(startTag, false);",
    "right" : "tb.insertForm(startTag, false);",
    "info" : "ExpressionStatement[42561-42592]:ExpressionStatement[42642-42673]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[42638-42705]:Block[42719-42786]"
  }, {
    "left" : "return anythingElse(t, tb);",
    "right" : "return anythingElse(t, tb);",
    "info" : "ReturnStatement[42660-42687]:ReturnStatement[42741-42768]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[42722-42734]:ReturnStatement[42803-42815]"
  }, {
    "left" : "if (t.isEndTag())",
    "right" : "if (t.isEndTag())",
    "info" : "IfStatement[42900-43921]:IfStatement[42981-44002]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[42918-43736]:Block[42999-43817]"
  }, {
    "left" : "Token.EndTag endTag = t.asEndTag();",
    "right" : "Token.EndTag endTag = t.asEndTag();",
    "info" : "VariableDeclarationStatement[42936-42971]:VariableDeclarationStatement[43017-43052]"
  }, {
    "left" : "String name = endTag.normalName();",
    "right" : "String name = endTag.normalName();",
    "info" : "VariableDeclarationStatement[42988-43022]:VariableDeclarationStatement[43069-43103]"
  }, {
    "left" : "if (name.equals(\"table\"))",
    "right" : "if (name.equals(\"table\"))",
    "info" : "IfStatement[43040-43670]:IfStatement[43121-43751]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[43066-43362]:Block[43147-43443]"
  }, {
    "left" : "if (!tb.inTableScope(name))",
    "right" : "if (!tb.inTableScope(name))",
    "info" : "IfStatement[43088-43299]:IfStatement[43169-43380]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[43116-43217]:Block[43197-43298]"
  }, {
    "left" : "tb.error(this);",
    "right" : "tb.error(this);",
    "info" : "ExpressionStatement[43142-43157]:ExpressionStatement[43223-43238]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[43182-43195]:ReturnStatement[43263-43276]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[43223-43299]:Block[43304-43380]"
  }, {
    "left" : "tb.popStackToClose(\"table\");",
    "right" : "tb.popStackToClose(\"table\");",
    "info" : "ExpressionStatement[43249-43277]:ExpressionStatement[43330-43358]"
  }, {
    "left" : "tb.resetInsertionMode();",
    "right" : "tb.resetInsertionMode();",
    "info" : "ExpressionStatement[43320-43344]:ExpressionStatement[43401-43425]"
  }, {
    "left" : "if (StringUtil.in(name,\n                        \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\"))",
    "right" : "if (StringUtil.in(name,\n                        \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\"))",
    "info" : "IfStatement[43368-43670]:IfStatement[43449-43751]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[43508-43597]:Block[43589-43678]"
  }, {
    "left" : "tb.error(this);",
    "right" : "tb.error(this);",
    "info" : "ExpressionStatement[43530-43545]:ExpressionStatement[43611-43626]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[43566-43579]:ReturnStatement[43647-43660]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[43603-43670]:Block[43684-43751]"
  }, {
    "left" : "return anythingElse(t, tb);",
    "right" : "return anythingElse(t, tb);",
    "info" : "ReturnStatement[43625-43652]:ReturnStatement[43706-43733]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[43687-43699]:ReturnStatement[43768-43780]"
  }, {
    "left" : "if (t.isEOF())",
    "right" : "if (t.isEOF())",
    "info" : "IfStatement[43742-43921]:IfStatement[43823-44002]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[43757-43921]:Block[43838-44002]"
  }, {
    "left" : "if (tb.currentElement().nodeName().equals(\"html\"))",
    "right" : "if (tb.currentElement().nodeName().equals(\"html\"))",
    "info" : "IfStatement[43775-43861]:IfStatement[43856-43942]"
  }, {
    "left" : "tb.error(this);",
    "right" : "tb.error(this);",
    "info" : "ExpressionStatement[43846-43861]:ExpressionStatement[43927-43942]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[43878-43890]:ReturnStatement[43959-43971]"
  }, {
    "left" : "return anythingElse(t, tb);",
    "right" : "return anythingElse(t, tb);",
    "info" : "ReturnStatement[43934-43961]:ReturnStatement[44015-44042]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[43981-43988]:PrimitiveType[44062-44069]"
  }, {
    "left" : "anythingElse",
    "right" : "anythingElse",
    "info" : "SimpleName[43989-44001]:SimpleName[44070-44082]"
  }, {
    "left" : "Token t",
    "right" : "Token t",
    "info" : "SingleVariableDeclaration[44002-44009]:SingleVariableDeclaration[44083-44090]"
  }, {
    "left" : "HtmlTreeBuilder tb",
    "right" : "HtmlTreeBuilder tb",
    "info" : "SingleVariableDeclaration[44011-44029]:SingleVariableDeclaration[44092-44110]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[44031-44462]:Block[44112-44543]"
  }, {
    "left" : "tb.error(this);",
    "right" : "tb.error(this);",
    "info" : "ExpressionStatement[44045-44060]:ExpressionStatement[44126-44141]"
  }, {
    "left" : "boolean processed;",
    "right" : "boolean processed;",
    "info" : "VariableDeclarationStatement[44073-44091]:VariableDeclarationStatement[44154-44172]"
  }, {
    "left" : "if (StringUtil.in(tb.currentElement().nodeName(), \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\"))",
    "right" : "if (StringUtil.in(tb.currentElement().nodeName(), \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\"))",
    "info" : "IfStatement[44104-44422]:IfStatement[44185-44503]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[44197-44350]:Block[44278-44431]"
  }, {
    "left" : "tb.setFosterInserts(true);",
    "right" : "tb.setFosterInserts(true);",
    "info" : "ExpressionStatement[44215-44241]:ExpressionStatement[44296-44322]"
  }, {
    "left" : "processed = tb.process(t, InBody);",
    "right" : "processed = tb.process(t, InBody);",
    "info" : "ExpressionStatement[44258-44292]:ExpressionStatement[44339-44373]"
  }, {
    "left" : "tb.setFosterInserts(false);",
    "right" : "tb.setFosterInserts(false);",
    "info" : "ExpressionStatement[44309-44336]:ExpressionStatement[44390-44417]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[44356-44422]:Block[44437-44503]"
  }, {
    "left" : "processed = tb.process(t, InBody);",
    "right" : "processed = tb.process(t, InBody);",
    "info" : "ExpressionStatement[44374-44408]:ExpressionStatement[44455-44489]"
  }, {
    "left" : "return processed;",
    "right" : "return processed;",
    "info" : "ReturnStatement[44435-44452]:ReturnStatement[44516-44533]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[44496-44503]:PrimitiveType[44577-44584]"
  }, {
    "left" : "process",
    "right" : "process",
    "info" : "SimpleName[44504-44511]:SimpleName[44585-44592]"
  }, {
    "left" : "Token t",
    "right" : "Token t",
    "info" : "SingleVariableDeclaration[44512-44519]:SingleVariableDeclaration[44593-44600]"
  }, {
    "left" : "HtmlTreeBuilder tb",
    "right" : "HtmlTreeBuilder tb",
    "info" : "SingleVariableDeclaration[44521-44539]:SingleVariableDeclaration[44602-44620]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[44541-46283]:Block[44622-46364]"
  }, {
    "left" : "switch (t.type) {\n                case Character:\n                    Token.Character c = t.asCharacter();\n                    if (c.getData().equals(nullString)) {\n                        tb.error(this);\n                        return false;\n                    } else {\n                        tb.getPendingTableCharacters().add(c.getData());\n                    }\n                    break;\n                default:\n                    // todo - don't really like the way these table character data lists are built\n                    if (tb.getPendingTableCharacters().size() > 0) {\n                        for (String character : tb.getPendingTableCharacters()) {\n                            if (!isWhitespace(character)) {\n                                // InTable anything else section:\n                                tb.error(this);\n                                if (StringUtil.in(tb.currentElement().nodeName(), \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) {\n                                    tb.setFosterInserts(true);\n                                    tb.process(new Token.Character().data(character), InBody);\n                                    tb.setFosterInserts(false);\n                                } else {\n                                    tb.process(new Token.Character().data(character), InBody);\n                                }\n                            } else\n                                tb.insert(new Token.Character().data(character));\n                        }\n                        tb.newPendingTableCharacters();\n                    }\n                    tb.transition(tb.originalState());\n                    return tb.process(t);\n            }",
    "right" : "switch (t.type) {\n                case Character:\n                    Token.Character c = t.asCharacter();\n                    if (c.getData().equals(nullString)) {\n                        tb.error(this);\n                        return false;\n                    } else {\n                        tb.getPendingTableCharacters().add(c.getData());\n                    }\n                    break;\n                default:\n                    // todo - don't really like the way these table character data lists are built\n                    if (tb.getPendingTableCharacters().size() > 0) {\n                        for (String character : tb.getPendingTableCharacters()) {\n                            if (!isWhitespace(character)) {\n                                // InTable anything else section:\n                                tb.error(this);\n                                if (StringUtil.in(tb.currentElement().nodeName(), \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) {\n                                    tb.setFosterInserts(true);\n                                    tb.process(new Token.Character().data(character), InBody);\n                                    tb.setFosterInserts(false);\n                                } else {\n                                    tb.process(new Token.Character().data(character), InBody);\n                                }\n                            } else\n                                tb.insert(new Token.Character().data(character));\n                        }\n                        tb.newPendingTableCharacters();\n                    }\n                    tb.transition(tb.originalState());\n                    return tb.process(t);\n            }",
    "info" : "SwitchStatement[44555-46248]:SwitchStatement[44636-46329]"
  }, {
    "left" : "case Character:",
    "right" : "case Character:",
    "info" : "SwitchCase[44589-44604]:SwitchCase[44670-44685]"
  }, {
    "left" : "Token.Character c = t.asCharacter();",
    "right" : "Token.Character c = t.asCharacter();",
    "info" : "VariableDeclarationStatement[44625-44661]:VariableDeclarationStatement[44706-44742]"
  }, {
    "left" : "if (c.getData().equals(nullString))",
    "right" : "if (c.getData().equals(nullString))",
    "info" : "IfStatement[44682-44921]:IfStatement[44763-45002]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[44718-44819]:Block[44799-44900]"
  }, {
    "left" : "tb.error(this);",
    "right" : "tb.error(this);",
    "info" : "ExpressionStatement[44744-44759]:ExpressionStatement[44825-44840]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[44784-44797]:ReturnStatement[44865-44878]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[44825-44921]:Block[44906-45002]"
  }, {
    "left" : "tb.getPendingTableCharacters().add(c.getData());",
    "right" : "tb.getPendingTableCharacters().add(c.getData());",
    "info" : "ExpressionStatement[44851-44899]:ExpressionStatement[44932-44980]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[44942-44948]:BreakStatement[45023-45029]"
  }, {
    "left" : "default:",
    "right" : "default:",
    "info" : "SwitchCase[44965-44973]:SwitchCase[45046-45054]"
  }, {
    "left" : "if (tb.getPendingTableCharacters().size() > 0)",
    "right" : "if (tb.getPendingTableCharacters().size() > 0)",
    "info" : "IfStatement[45093-46137]:IfStatement[45174-46218]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[45140-46137]:Block[45221-46218]"
  }, {
    "left" : "for (String character : tb.getPendingTableCharacters())",
    "right" : "for (String character : tb.getPendingTableCharacters())",
    "info" : "EnhancedForStatement[45166-46059]:EnhancedForStatement[45247-46140]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[45222-46059]:Block[45303-46140]"
  }, {
    "left" : "if (!isWhitespace(character))",
    "right" : "if (!isWhitespace(character))",
    "info" : "IfStatement[45252-46033]:IfStatement[45333-46114]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[45282-45946]:Block[45363-46027]"
  }, {
    "left" : "tb.error(this);",
    "right" : "tb.error(this);",
    "info" : "ExpressionStatement[45382-45397]:ExpressionStatement[45463-45478]"
  }, {
    "left" : "if (StringUtil.in(tb.currentElement().nodeName(), \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\"))",
    "right" : "if (StringUtil.in(tb.currentElement().nodeName(), \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\"))",
    "info" : "IfStatement[45430-45916]:IfStatement[45511-45997]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[45523-45780]:Block[45604-45861]"
  }, {
    "left" : "tb.setFosterInserts(true);",
    "right" : "tb.setFosterInserts(true);",
    "info" : "ExpressionStatement[45561-45587]:ExpressionStatement[45642-45668]"
  }, {
    "left" : "tb.process(new Token.Character().data(character), InBody);",
    "right" : "tb.process(new Token.Character().data(character), InBody);",
    "info" : "ExpressionStatement[45624-45682]:ExpressionStatement[45705-45763]"
  }, {
    "left" : "tb.setFosterInserts(false);",
    "right" : "tb.setFosterInserts(false);",
    "info" : "ExpressionStatement[45719-45746]:ExpressionStatement[45800-45827]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[45786-45916]:Block[45867-45997]"
  }, {
    "left" : "tb.process(new Token.Character().data(character), InBody);",
    "right" : "tb.process(new Token.Character().data(character), InBody);",
    "info" : "ExpressionStatement[45824-45882]:ExpressionStatement[45905-45963]"
  }, {
    "left" : "tb.insert(new Token.Character().data(character));",
    "right" : "tb.insert(new Token.Character().data(character));",
    "info" : "ExpressionStatement[45984-46033]:ExpressionStatement[46065-46114]"
  }, {
    "left" : "tb.newPendingTableCharacters();",
    "right" : "tb.newPendingTableCharacters();",
    "info" : "ExpressionStatement[46084-46115]:ExpressionStatement[46165-46196]"
  }, {
    "left" : "tb.transition(tb.originalState());",
    "right" : "tb.transition(tb.originalState());",
    "info" : "ExpressionStatement[46158-46192]:ExpressionStatement[46239-46273]"
  }, {
    "left" : "return tb.process(t);",
    "right" : "return tb.process(t);",
    "info" : "ReturnStatement[46213-46234]:ReturnStatement[46294-46315]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[46261-46273]:ReturnStatement[46342-46354]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[46315-46322]:PrimitiveType[46396-46403]"
  }, {
    "left" : "process",
    "right" : "process",
    "info" : "SimpleName[46323-46330]:SimpleName[46404-46411]"
  }, {
    "left" : "Token t",
    "right" : "Token t",
    "info" : "SingleVariableDeclaration[46331-46338]:SingleVariableDeclaration[46412-46419]"
  }, {
    "left" : "HtmlTreeBuilder tb",
    "right" : "HtmlTreeBuilder tb",
    "info" : "SingleVariableDeclaration[46340-46358]:SingleVariableDeclaration[46421-46439]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[46360-47877]:Block[46441-47958]"
  }, {
    "left" : "if (t.isEndTag() && t.asEndTag().normalName().equals(\"caption\"))",
    "right" : "if (t.isEndTag() && t.asEndTag().normalName().equals(\"caption\"))",
    "info" : "IfStatement[46374-47842]:IfStatement[46455-47923]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[46439-47037]:Block[46520-47118]"
  }, {
    "left" : "Token.EndTag endTag = t.asEndTag();",
    "right" : "Token.EndTag endTag = t.asEndTag();",
    "info" : "VariableDeclarationStatement[46457-46492]:VariableDeclarationStatement[46538-46573]"
  }, {
    "left" : "String name = endTag.normalName();",
    "right" : "String name = endTag.normalName();",
    "info" : "VariableDeclarationStatement[46509-46543]:VariableDeclarationStatement[46590-46624]"
  }, {
    "left" : "if (!tb.inTableScope(name))",
    "right" : "if (!tb.inTableScope(name))",
    "info" : "IfStatement[46560-47023]:IfStatement[46641-47104]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[46588-46677]:Block[46669-46758]"
  }, {
    "left" : "tb.error(this);",
    "right" : "tb.error(this);",
    "info" : "ExpressionStatement[46610-46625]:ExpressionStatement[46691-46706]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[46646-46659]:ReturnStatement[46727-46740]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[46683-47023]:Block[46764-47104]"
  }, {
    "left" : "tb.generateImpliedEndTags();",
    "right" : "tb.generateImpliedEndTags();",
    "info" : "ExpressionStatement[46705-46733]:ExpressionStatement[46786-46814]"
  }, {
    "left" : "if (!tb.currentElement().nodeName().equals(\"caption\"))",
    "right" : "if (!tb.currentElement().nodeName().equals(\"caption\"))",
    "info" : "IfStatement[46754-46848]:IfStatement[46835-46929]"
  }, {
    "left" : "tb.error(this);",
    "right" : "tb.error(this);",
    "info" : "ExpressionStatement[46833-46848]:ExpressionStatement[46914-46929]"
  }, {
    "left" : "tb.popStackToClose(\"caption\");",
    "right" : "tb.popStackToClose(\"caption\");",
    "info" : "ExpressionStatement[46869-46899]:ExpressionStatement[46950-46980]"
  }, {
    "left" : "tb.clearFormattingElementsToLastMarker();",
    "right" : "tb.clearFormattingElementsToLastMarker();",
    "info" : "ExpressionStatement[46920-46961]:ExpressionStatement[47001-47042]"
  }, {
    "left" : "tb.transition(InTable);",
    "right" : "tb.transition(InTable);",
    "info" : "ExpressionStatement[46982-47005]:ExpressionStatement[47063-47086]"
  }, {
    "left" : "if ((\n                    t.isStartTag() && StringUtil.in(t.asStartTag().normalName(),\n                            \"caption\", \"col\", \"colgroup\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\") ||\n                            t.isEndTag() && t.asEndTag().normalName().equals(\"table\")))",
    "right" : "if ((\n                    t.isStartTag() && StringUtil.in(t.asStartTag().normalName(),\n                            \"caption\", \"col\", \"colgroup\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\") ||\n                            t.isEndTag() && t.asEndTag().normalName().equals(\"table\")))",
    "info" : "IfStatement[47043-47842]:IfStatement[47124-47923]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[47345-47530]:Block[47426-47611]"
  }, {
    "left" : "tb.error(this);",
    "right" : "tb.error(this);",
    "info" : "ExpressionStatement[47363-47378]:ExpressionStatement[47444-47459]"
  }, {
    "left" : "boolean processed = tb.processEndTag(\"caption\");",
    "right" : "boolean processed = tb.processEndTag(\"caption\");",
    "info" : "VariableDeclarationStatement[47395-47443]:VariableDeclarationStatement[47476-47524]"
  }, {
    "left" : "if (processed)",
    "right" : "if (processed)",
    "info" : "IfStatement[47460-47516]:IfStatement[47541-47597]"
  }, {
    "left" : "return tb.process(t);",
    "right" : "return tb.process(t);",
    "info" : "ReturnStatement[47495-47516]:ReturnStatement[47576-47597]"
  }, {
    "left" : "if (t.isEndTag() && StringUtil.in(t.asEndTag().normalName(),\n                    \"body\", \"col\", \"colgroup\", \"html\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\"))",
    "right" : "if (t.isEndTag() && StringUtil.in(t.asEndTag().normalName(),\n                    \"body\", \"col\", \"colgroup\", \"html\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\"))",
    "info" : "IfStatement[47536-47842]:IfStatement[47617-47923]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[47698-47775]:Block[47779-47856]"
  }, {
    "left" : "tb.error(this);",
    "right" : "tb.error(this);",
    "info" : "ExpressionStatement[47716-47731]:ExpressionStatement[47797-47812]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[47748-47761]:ReturnStatement[47829-47842]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[47781-47842]:Block[47862-47923]"
  }, {
    "left" : "return tb.process(t, InBody);",
    "right" : "return tb.process(t, InBody);",
    "info" : "ReturnStatement[47799-47828]:ReturnStatement[47880-47909]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[47855-47867]:ReturnStatement[47936-47948]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[47913-47920]:PrimitiveType[47994-48001]"
  }, {
    "left" : "process",
    "right" : "process",
    "info" : "SimpleName[47921-47928]:SimpleName[48002-48009]"
  }, {
    "left" : "Token t",
    "right" : "Token t",
    "info" : "SingleVariableDeclaration[47929-47936]:SingleVariableDeclaration[48010-48017]"
  }, {
    "left" : "HtmlTreeBuilder tb",
    "right" : "HtmlTreeBuilder tb",
    "info" : "SingleVariableDeclaration[47938-47956]:SingleVariableDeclaration[48019-48037]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[47958-49751]:Block[48039-49832]"
  }, {
    "left" : "if (isWhitespace(t))",
    "right" : "if (isWhitespace(t))",
    "info" : "IfStatement[47972-48081]:IfStatement[48053-48162]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[47993-48081]:Block[48074-48162]"
  }, {
    "left" : "tb.insert(t.asCharacter());",
    "right" : "tb.insert(t.asCharacter());",
    "info" : "ExpressionStatement[48011-48038]:ExpressionStatement[48092-48119]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[48055-48067]:ReturnStatement[48136-48148]"
  }, {
    "left" : "switch (t.type) {\n                case Comment:\n                    tb.insert(t.asComment());\n                    break;\n                case Doctype:\n                    tb.error(this);\n                    break;\n                case StartTag:\n                    Token.StartTag startTag = t.asStartTag();\n                    switch (startTag.normalName()) {\n                        case \"html\":\n                            return tb.process(t, InBody);\n                        case \"col\":\n                            tb.insertEmpty(startTag);\n                            break;\n                        default:\n                            return anythingElse(t, tb);\n                    }\n                    break;\n                case EndTag:\n                    Token.EndTag endTag = t.asEndTag();\n                    if (endTag.normalName.equals(\"colgroup\")) {\n                        if (tb.currentElement().nodeName().equals(\"html\")) { // frag case\n                            tb.error(this);\n                            return false;\n                        } else {\n                            tb.pop();\n                            tb.transition(InTable);\n                        }\n                    } else\n                        return anythingElse(t, tb);\n                    break;\n                case EOF:\n                    if (tb.currentElement().nodeName().equals(\"html\"))\n                        return true; // stop parsing; frag case\n                    else\n                        return anythingElse(t, tb);\n                default:\n                    return anythingElse(t, tb);\n            }",
    "right" : "switch (t.type) {\n                case Comment:\n                    tb.insert(t.asComment());\n                    break;\n                case Doctype:\n                    tb.error(this);\n                    break;\n                case StartTag:\n                    Token.StartTag startTag = t.asStartTag();\n                    switch (startTag.normalName()) {\n                        case \"html\":\n                            return tb.process(t, InBody);\n                        case \"col\":\n                            tb.insertEmpty(startTag);\n                            break;\n                        default:\n                            return anythingElse(t, tb);\n                    }\n                    break;\n                case EndTag:\n                    Token.EndTag endTag = t.asEndTag();\n                    if (endTag.normalName.equals(\"colgroup\")) {\n                        if (tb.currentElement().nodeName().equals(\"html\")) { // frag case\n                            tb.error(this);\n                            return false;\n                        } else {\n                            tb.pop();\n                            tb.transition(InTable);\n                        }\n                    } else\n                        return anythingElse(t, tb);\n                    break;\n                case EOF:\n                    if (tb.currentElement().nodeName().equals(\"html\"))\n                        return true; // stop parsing; frag case\n                    else\n                        return anythingElse(t, tb);\n                default:\n                    return anythingElse(t, tb);\n            }",
    "info" : "SwitchStatement[48094-49716]:SwitchStatement[48175-49797]"
  }, {
    "left" : "case Comment:",
    "right" : "case Comment:",
    "info" : "SwitchCase[48128-48141]:SwitchCase[48209-48222]"
  }, {
    "left" : "tb.insert(t.asComment());",
    "right" : "tb.insert(t.asComment());",
    "info" : "ExpressionStatement[48162-48187]:ExpressionStatement[48243-48268]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[48208-48214]:BreakStatement[48289-48295]"
  }, {
    "left" : "case Doctype:",
    "right" : "case Doctype:",
    "info" : "SwitchCase[48231-48244]:SwitchCase[48312-48325]"
  }, {
    "left" : "tb.error(this);",
    "right" : "tb.error(this);",
    "info" : "ExpressionStatement[48265-48280]:ExpressionStatement[48346-48361]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[48301-48307]:BreakStatement[48382-48388]"
  }, {
    "left" : "case StartTag:",
    "right" : "case StartTag:",
    "info" : "SwitchCase[48324-48338]:SwitchCase[48405-48419]"
  }, {
    "left" : "Token.StartTag startTag = t.asStartTag();",
    "right" : "Token.StartTag startTag = t.asStartTag();",
    "info" : "VariableDeclarationStatement[48359-48400]:VariableDeclarationStatement[48440-48481]"
  }, {
    "left" : "switch (startTag.normalName()) {\n                        case \"html\":\n                            return tb.process(t, InBody);\n                        case \"col\":\n                            tb.insertEmpty(startTag);\n                            break;\n                        default:\n                            return anythingElse(t, tb);\n                    }",
    "right" : "switch (startTag.normalName()) {\n                        case \"html\":\n                            return tb.process(t, InBody);\n                        case \"col\":\n                            tb.insertEmpty(startTag);\n                            break;\n                        default:\n                            return anythingElse(t, tb);\n                    }",
    "info" : "SwitchStatement[48421-48784]:SwitchStatement[48502-48865]"
  }, {
    "left" : "case \"html\":",
    "right" : "case \"html\":",
    "info" : "SwitchCase[48478-48490]:SwitchCase[48559-48571]"
  }, {
    "left" : "return tb.process(t, InBody);",
    "right" : "return tb.process(t, InBody);",
    "info" : "ReturnStatement[48519-48548]:ReturnStatement[48600-48629]"
  }, {
    "left" : "case \"col\":",
    "right" : "case \"col\":",
    "info" : "SwitchCase[48573-48584]:SwitchCase[48654-48665]"
  }, {
    "left" : "tb.insertEmpty(startTag);",
    "right" : "tb.insertEmpty(startTag);",
    "info" : "ExpressionStatement[48613-48638]:ExpressionStatement[48694-48719]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[48667-48673]:BreakStatement[48748-48754]"
  }, {
    "left" : "default:",
    "right" : "default:",
    "info" : "SwitchCase[48698-48706]:SwitchCase[48779-48787]"
  }, {
    "left" : "return anythingElse(t, tb);",
    "right" : "return anythingElse(t, tb);",
    "info" : "ReturnStatement[48735-48762]:ReturnStatement[48816-48843]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[48805-48811]:BreakStatement[48886-48892]"
  }, {
    "left" : "case EndTag:",
    "right" : "case EndTag:",
    "info" : "SwitchCase[48828-48840]:SwitchCase[48909-48921]"
  }, {
    "left" : "Token.EndTag endTag = t.asEndTag();",
    "right" : "Token.EndTag endTag = t.asEndTag();",
    "info" : "VariableDeclarationStatement[48861-48896]:VariableDeclarationStatement[48942-48977]"
  }, {
    "left" : "if (endTag.normalName.equals(\"colgroup\"))",
    "right" : "if (endTag.normalName.equals(\"colgroup\"))",
    "info" : "IfStatement[48917-49364]:IfStatement[48998-49445]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[48959-49307]:Block[49040-49388]"
  }, {
    "left" : "if (tb.currentElement().nodeName().equals(\"html\"))",
    "right" : "if (tb.currentElement().nodeName().equals(\"html\"))",
    "info" : "IfStatement[48985-49285]:IfStatement[49066-49366]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[49036-49162]:Block[49117-49243]"
  }, {
    "left" : "tb.error(this);",
    "right" : "tb.error(this);",
    "info" : "ExpressionStatement[49079-49094]:ExpressionStatement[49160-49175]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[49123-49136]:ReturnStatement[49204-49217]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[49168-49285]:Block[49249-49366]"
  }, {
    "left" : "tb.pop();",
    "right" : "tb.pop();",
    "info" : "ExpressionStatement[49198-49207]:ExpressionStatement[49279-49288]"
  }, {
    "left" : "tb.transition(InTable);",
    "right" : "tb.transition(InTable);",
    "info" : "ExpressionStatement[49236-49259]:ExpressionStatement[49317-49340]"
  }, {
    "left" : "return anythingElse(t, tb);",
    "right" : "return anythingElse(t, tb);",
    "info" : "ReturnStatement[49337-49364]:ReturnStatement[49418-49445]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[49385-49391]:BreakStatement[49466-49472]"
  }, {
    "left" : "case EOF:",
    "right" : "case EOF:",
    "info" : "SwitchCase[49408-49417]:SwitchCase[49489-49498]"
  }, {
    "left" : "if (tb.currentElement().nodeName().equals(\"html\"))",
    "right" : "if (tb.currentElement().nodeName().equals(\"html\"))",
    "info" : "IfStatement[49438-49629]:IfStatement[49519-49710]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[49513-49525]:ReturnStatement[49594-49606]"
  }, {
    "left" : "return anythingElse(t, tb);",
    "right" : "return anythingElse(t, tb);",
    "info" : "ReturnStatement[49602-49629]:ReturnStatement[49683-49710]"
  }, {
    "left" : "default:",
    "right" : "default:",
    "info" : "SwitchCase[49646-49654]:SwitchCase[49727-49735]"
  }, {
    "left" : "return anythingElse(t, tb);",
    "right" : "return anythingElse(t, tb);",
    "info" : "ReturnStatement[49675-49702]:ReturnStatement[49756-49783]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[49729-49741]:ReturnStatement[49810-49822]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[49761-49768]:Modifier[49842-49849]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[49769-49776]:PrimitiveType[49850-49857]"
  }, {
    "left" : "anythingElse",
    "right" : "anythingElse",
    "info" : "SimpleName[49777-49789]:SimpleName[49858-49870]"
  }, {
    "left" : "Token t",
    "right" : "Token t",
    "info" : "SingleVariableDeclaration[49790-49797]:SingleVariableDeclaration[49871-49878]"
  }, {
    "left" : "TreeBuilder tb",
    "right" : "TreeBuilder tb",
    "info" : "SingleVariableDeclaration[49799-49813]:SingleVariableDeclaration[49880-49894]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[49815-50007]:Block[49896-50088]"
  }, {
    "left" : "boolean processed = tb.processEndTag(\"colgroup\");",
    "right" : "boolean processed = tb.processEndTag(\"colgroup\");",
    "info" : "VariableDeclarationStatement[49829-49878]:VariableDeclarationStatement[49910-49959]"
  }, {
    "left" : "if (processed)",
    "right" : "if (processed)",
    "info" : "IfStatement[49891-49972]:IfStatement[49972-50053]"
  }, {
    "left" : "return tb.process(t);",
    "right" : "return tb.process(t);",
    "info" : "ReturnStatement[49951-49972]:ReturnStatement[50032-50053]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[49985-49997]:ReturnStatement[50066-50078]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[50041-50048]:PrimitiveType[50122-50129]"
  }, {
    "left" : "process",
    "right" : "process",
    "info" : "SimpleName[50049-50056]:SimpleName[50130-50137]"
  }, {
    "left" : "Token t",
    "right" : "Token t",
    "info" : "SingleVariableDeclaration[50057-50064]:SingleVariableDeclaration[50138-50145]"
  }, {
    "left" : "HtmlTreeBuilder tb",
    "right" : "HtmlTreeBuilder tb",
    "info" : "SingleVariableDeclaration[50066-50084]:SingleVariableDeclaration[50147-50165]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[50086-52135]:Block[50167-52216]"
  }, {
    "left" : "switch (t.type) {\n                case StartTag:\n                    Token.StartTag startTag = t.asStartTag();\n                    String name = startTag.normalName();\n                    if (name.equals(\"template\")) {\n                        tb.insert(startTag);\n                    } else if (name.equals(\"tr\")) {\n                        tb.clearStackToTableBodyContext();\n                        tb.insert(startTag);\n                        tb.transition(InRow);\n                    } else if (StringUtil.in(name, \"th\", \"td\")) {\n                        tb.error(this);\n                        tb.processStartTag(\"tr\");\n                        return tb.process(startTag);\n                    } else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\")) {\n                        return exitTableBody(t, tb);\n                    } else\n                        return anythingElse(t, tb);\n                    break;\n                case EndTag:\n                    Token.EndTag endTag = t.asEndTag();\n                    name = endTag.normalName();\n                    if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) {\n                        if (!tb.inTableScope(name)) {\n                            tb.error(this);\n                            return false;\n                        } else {\n                            tb.clearStackToTableBodyContext();\n                            tb.pop();\n                            tb.transition(InTable);\n                        }\n                    } else if (name.equals(\"table\")) {\n                        return exitTableBody(t, tb);\n                    } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\", \"tr\")) {\n                        tb.error(this);\n                        return false;\n                    } else\n                        return anythingElse(t, tb);\n                    break;\n                default:\n                    return anythingElse(t, tb);\n            }",
    "right" : "switch (t.type) {\n                case StartTag:\n                    Token.StartTag startTag = t.asStartTag();\n                    String name = startTag.normalName();\n                    if (name.equals(\"template\")) {\n                        tb.insert(startTag);\n                    } else if (name.equals(\"tr\")) {\n                        tb.clearStackToTableBodyContext();\n                        tb.insert(startTag);\n                        tb.transition(InRow);\n                    } else if (StringUtil.in(name, \"th\", \"td\")) {\n                        tb.error(this);\n                        tb.processStartTag(\"tr\");\n                        return tb.process(startTag);\n                    } else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\")) {\n                        return exitTableBody(t, tb);\n                    } else\n                        return anythingElse(t, tb);\n                    break;\n                case EndTag:\n                    Token.EndTag endTag = t.asEndTag();\n                    name = endTag.normalName();\n                    if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) {\n                        if (!tb.inTableScope(name)) {\n                            tb.error(this);\n                            return false;\n                        } else {\n                            tb.clearStackToTableBodyContext();\n                            tb.pop();\n                            tb.transition(InTable);\n                        }\n                    } else if (name.equals(\"table\")) {\n                        return exitTableBody(t, tb);\n                    } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\", \"tr\")) {\n                        tb.error(this);\n                        return false;\n                    } else\n                        return anythingElse(t, tb);\n                    break;\n                default:\n                    return anythingElse(t, tb);\n            }",
    "info" : "SwitchStatement[50100-52100]:SwitchStatement[50181-52181]"
  }, {
    "left" : "case StartTag:",
    "right" : "case StartTag:",
    "info" : "SwitchCase[50134-50148]:SwitchCase[50215-50229]"
  }, {
    "left" : "Token.StartTag startTag = t.asStartTag();",
    "right" : "Token.StartTag startTag = t.asStartTag();",
    "info" : "VariableDeclarationStatement[50169-50210]:VariableDeclarationStatement[50250-50291]"
  }, {
    "left" : "String name = startTag.normalName();",
    "right" : "String name = startTag.normalName();",
    "info" : "VariableDeclarationStatement[50231-50267]:VariableDeclarationStatement[50312-50348]"
  }, {
    "left" : "if (name.equals(\"template\"))",
    "right" : "if (name.equals(\"template\"))",
    "info" : "IfStatement[50288-51017]:IfStatement[50369-51098]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[50317-50385]:Block[50398-50466]"
  }, {
    "left" : "tb.insert(startTag);",
    "right" : "tb.insert(startTag);",
    "info" : "ExpressionStatement[50343-50363]:ExpressionStatement[50424-50444]"
  }, {
    "left" : "if (name.equals(\"tr\"))",
    "right" : "if (name.equals(\"tr\"))",
    "info" : "IfStatement[50391-51017]:IfStatement[50472-51098]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[50414-50587]:Block[50495-50668]"
  }, {
    "left" : "tb.clearStackToTableBodyContext();",
    "right" : "tb.clearStackToTableBodyContext();",
    "info" : "ExpressionStatement[50440-50474]:ExpressionStatement[50521-50555]"
  }, {
    "left" : "tb.insert(startTag);",
    "right" : "tb.insert(startTag);",
    "info" : "ExpressionStatement[50499-50519]:ExpressionStatement[50580-50600]"
  }, {
    "left" : "tb.transition(InRow);",
    "right" : "tb.transition(InRow);",
    "info" : "ExpressionStatement[50544-50565]:ExpressionStatement[50625-50646]"
  }, {
    "left" : "if (StringUtil.in(name, \"th\", \"td\"))",
    "right" : "if (StringUtil.in(name, \"th\", \"td\"))",
    "info" : "IfStatement[50593-51017]:IfStatement[50674-51098]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[50630-50796]:Block[50711-50877]"
  }, {
    "left" : "tb.error(this);",
    "right" : "tb.error(this);",
    "info" : "ExpressionStatement[50656-50671]:ExpressionStatement[50737-50752]"
  }, {
    "left" : "tb.processStartTag(\"tr\");",
    "right" : "tb.processStartTag(\"tr\");",
    "info" : "ExpressionStatement[50696-50721]:ExpressionStatement[50777-50802]"
  }, {
    "left" : "return tb.process(startTag);",
    "right" : "return tb.process(startTag);",
    "info" : "ReturnStatement[50746-50774]:ReturnStatement[50827-50855]"
  }, {
    "left" : "if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\"))",
    "right" : "if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\"))",
    "info" : "IfStatement[50802-51017]:IfStatement[50883-51098]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[50884-50960]:Block[50965-51041]"
  }, {
    "left" : "return exitTableBody(t, tb);",
    "right" : "return exitTableBody(t, tb);",
    "info" : "ReturnStatement[50910-50938]:ReturnStatement[50991-51019]"
  }, {
    "left" : "return anythingElse(t, tb);",
    "right" : "return anythingElse(t, tb);",
    "info" : "ReturnStatement[50990-51017]:ReturnStatement[51071-51098]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[51038-51044]:BreakStatement[51119-51125]"
  }, {
    "left" : "case EndTag:",
    "right" : "case EndTag:",
    "info" : "SwitchCase[51061-51073]:SwitchCase[51142-51154]"
  }, {
    "left" : "Token.EndTag endTag = t.asEndTag();",
    "right" : "Token.EndTag endTag = t.asEndTag();",
    "info" : "VariableDeclarationStatement[51094-51129]:VariableDeclarationStatement[51175-51210]"
  }, {
    "left" : "name = endTag.normalName();",
    "right" : "name = endTag.normalName();",
    "info" : "ExpressionStatement[51150-51177]:ExpressionStatement[51231-51258]"
  }, {
    "left" : "if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\"))",
    "right" : "if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\"))",
    "info" : "IfStatement[51198-51986]:IfStatement[51279-52067]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[51250-51625]:Block[51331-51706]"
  }, {
    "left" : "if (!tb.inTableScope(name))",
    "right" : "if (!tb.inTableScope(name))",
    "info" : "IfStatement[51276-51603]:IfStatement[51357-51684]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[51304-51417]:Block[51385-51498]"
  }, {
    "left" : "tb.error(this);",
    "right" : "tb.error(this);",
    "info" : "ExpressionStatement[51334-51349]:ExpressionStatement[51415-51430]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[51378-51391]:ReturnStatement[51459-51472]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[51423-51603]:Block[51504-51684]"
  }, {
    "left" : "tb.clearStackToTableBodyContext();",
    "right" : "tb.clearStackToTableBodyContext();",
    "info" : "ExpressionStatement[51453-51487]:ExpressionStatement[51534-51568]"
  }, {
    "left" : "tb.pop();",
    "right" : "tb.pop();",
    "info" : "ExpressionStatement[51516-51525]:ExpressionStatement[51597-51606]"
  }, {
    "left" : "tb.transition(InTable);",
    "right" : "tb.transition(InTable);",
    "info" : "ExpressionStatement[51554-51577]:ExpressionStatement[51635-51658]"
  }, {
    "left" : "if (name.equals(\"table\"))",
    "right" : "if (name.equals(\"table\"))",
    "info" : "IfStatement[51631-51986]:IfStatement[51712-52067]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[51657-51733]:Block[51738-51814]"
  }, {
    "left" : "return exitTableBody(t, tb);",
    "right" : "return exitTableBody(t, tb);",
    "info" : "ReturnStatement[51683-51711]:ReturnStatement[51764-51792]"
  }, {
    "left" : "if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\", \"tr\"))",
    "right" : "if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\", \"tr\"))",
    "info" : "IfStatement[51739-51986]:IfStatement[51820-52067]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[51828-51929]:Block[51909-52010]"
  }, {
    "left" : "tb.error(this);",
    "right" : "tb.error(this);",
    "info" : "ExpressionStatement[51854-51869]:ExpressionStatement[51935-51950]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[51894-51907]:ReturnStatement[51975-51988]"
  }, {
    "left" : "return anythingElse(t, tb);",
    "right" : "return anythingElse(t, tb);",
    "info" : "ReturnStatement[51959-51986]:ReturnStatement[52040-52067]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[52007-52013]:BreakStatement[52088-52094]"
  }, {
    "left" : "default:",
    "right" : "default:",
    "info" : "SwitchCase[52030-52038]:SwitchCase[52111-52119]"
  }, {
    "left" : "return anythingElse(t, tb);",
    "right" : "return anythingElse(t, tb);",
    "info" : "ReturnStatement[52059-52086]:ReturnStatement[52140-52167]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[52113-52125]:ReturnStatement[52194-52206]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[52145-52152]:Modifier[52226-52233]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[52153-52160]:PrimitiveType[52234-52241]"
  }, {
    "left" : "exitTableBody",
    "right" : "exitTableBody",
    "info" : "SimpleName[52161-52174]:SimpleName[52242-52255]"
  }, {
    "left" : "Token t",
    "right" : "Token t",
    "info" : "SingleVariableDeclaration[52175-52182]:SingleVariableDeclaration[52256-52263]"
  }, {
    "left" : "HtmlTreeBuilder tb",
    "right" : "HtmlTreeBuilder tb",
    "info" : "SingleVariableDeclaration[52184-52202]:SingleVariableDeclaration[52265-52283]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[52204-52584]:Block[52285-52665]"
  }, {
    "left" : "if (!(tb.inTableScope(\"tbody\") || tb.inTableScope(\"thead\") || tb.inScope(\"tfoot\")))",
    "right" : "if (!(tb.inTableScope(\"tbody\") || tb.inTableScope(\"thead\") || tb.inScope(\"tfoot\")))",
    "info" : "IfStatement[52218-52408]:IfStatement[52299-52489]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[52302-52408]:Block[52383-52489]"
  }, {
    "left" : "tb.error(this);",
    "right" : "tb.error(this);",
    "info" : "ExpressionStatement[52349-52364]:ExpressionStatement[52430-52445]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[52381-52394]:ReturnStatement[52462-52475]"
  }, {
    "left" : "tb.clearStackToTableBodyContext();",
    "right" : "tb.clearStackToTableBodyContext();",
    "info" : "ExpressionStatement[52421-52455]:ExpressionStatement[52502-52536]"
  }, {
    "left" : "tb.processEndTag(tb.currentElement().nodeName());",
    "right" : "tb.processEndTag(tb.currentElement().nodeName());",
    "info" : "ExpressionStatement[52468-52517]:ExpressionStatement[52549-52598]"
  }, {
    "left" : "return tb.process(t);",
    "right" : "return tb.process(t);",
    "info" : "ReturnStatement[52553-52574]:ReturnStatement[52634-52655]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[52594-52601]:Modifier[52675-52682]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[52602-52609]:PrimitiveType[52683-52690]"
  }, {
    "left" : "anythingElse",
    "right" : "anythingElse",
    "info" : "SimpleName[52610-52622]:SimpleName[52691-52703]"
  }, {
    "left" : "Token t",
    "right" : "Token t",
    "info" : "SingleVariableDeclaration[52623-52630]:SingleVariableDeclaration[52704-52711]"
  }, {
    "left" : "HtmlTreeBuilder tb",
    "right" : "HtmlTreeBuilder tb",
    "info" : "SingleVariableDeclaration[52632-52650]:SingleVariableDeclaration[52713-52731]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[52652-52706]:Block[52733-52787]"
  }, {
    "left" : "return tb.process(t, InTable);",
    "right" : "return tb.process(t, InTable);",
    "info" : "ReturnStatement[52666-52696]:ReturnStatement[52747-52777]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[52734-52741]:PrimitiveType[52815-52822]"
  }, {
    "left" : "process",
    "right" : "process",
    "info" : "SimpleName[52742-52749]:SimpleName[52823-52830]"
  }, {
    "left" : "Token t",
    "right" : "Token t",
    "info" : "SingleVariableDeclaration[52750-52757]:SingleVariableDeclaration[52831-52838]"
  }, {
    "left" : "HtmlTreeBuilder tb",
    "right" : "HtmlTreeBuilder tb",
    "info" : "SingleVariableDeclaration[52759-52777]:SingleVariableDeclaration[52840-52858]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[52779-54806]:Block[52860-54887]"
  }, {
    "left" : "if (t.isStartTag())",
    "right" : "if (t.isStartTag())",
    "info" : "IfStatement[52793-54771]:IfStatement[52874-54852]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[52813-53542]:Block[52894-53623]"
  }, {
    "left" : "Token.StartTag startTag = t.asStartTag();",
    "right" : "Token.StartTag startTag = t.asStartTag();",
    "info" : "VariableDeclarationStatement[52831-52872]:VariableDeclarationStatement[52912-52953]"
  }, {
    "left" : "String name = startTag.normalName();",
    "right" : "String name = startTag.normalName();",
    "info" : "VariableDeclarationStatement[52889-52925]:VariableDeclarationStatement[52970-53006]"
  }, {
    "left" : "if (name.equals(\"template\"))",
    "right" : "if (name.equals(\"template\"))",
    "info" : "IfStatement[52943-53528]:IfStatement[53024-53609]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[52972-53032]:Block[53053-53113]"
  }, {
    "left" : "tb.insert(startTag);",
    "right" : "tb.insert(startTag);",
    "info" : "ExpressionStatement[52994-53014]:ExpressionStatement[53075-53095]"
  }, {
    "left" : "if (StringUtil.in(name, \"th\", \"td\"))",
    "right" : "if (StringUtil.in(name, \"th\", \"td\"))",
    "info" : "IfStatement[53038-53528]:IfStatement[53119-53609]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[53075-53291]:Block[53156-53372]"
  }, {
    "left" : "tb.clearStackToTableRowContext();",
    "right" : "tb.clearStackToTableRowContext();",
    "info" : "ExpressionStatement[53097-53130]:ExpressionStatement[53178-53211]"
  }, {
    "left" : "tb.insert(startTag);",
    "right" : "tb.insert(startTag);",
    "info" : "ExpressionStatement[53151-53171]:ExpressionStatement[53232-53252]"
  }, {
    "left" : "tb.transition(InCell);",
    "right" : "tb.transition(InCell);",
    "info" : "ExpressionStatement[53192-53214]:ExpressionStatement[53273-53295]"
  }, {
    "left" : "tb.insertMarkerToFormattingElements();",
    "right" : "tb.insertMarkerToFormattingElements();",
    "info" : "ExpressionStatement[53235-53273]:ExpressionStatement[53316-53354]"
  }, {
    "left" : "if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\", \"tr\"))",
    "right" : "if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\", \"tr\"))",
    "info" : "IfStatement[53297-53528]:IfStatement[53378-53609]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[53385-53455]:Block[53466-53536]"
  }, {
    "left" : "return handleMissingTr(t, tb);",
    "right" : "return handleMissingTr(t, tb);",
    "info" : "ReturnStatement[53407-53437]:ReturnStatement[53488-53518]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[53461-53528]:Block[53542-53609]"
  }, {
    "left" : "return anythingElse(t, tb);",
    "right" : "return anythingElse(t, tb);",
    "info" : "ReturnStatement[53483-53510]:ReturnStatement[53564-53591]"
  }, {
    "left" : "if (t.isEndTag())",
    "right" : "if (t.isEndTag())",
    "info" : "IfStatement[53548-54771]:IfStatement[53629-54852]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[53566-54706]:Block[53647-54787]"
  }, {
    "left" : "Token.EndTag endTag = t.asEndTag();",
    "right" : "Token.EndTag endTag = t.asEndTag();",
    "info" : "VariableDeclarationStatement[53584-53619]:VariableDeclarationStatement[53665-53700]"
  }, {
    "left" : "String name = endTag.normalName();",
    "right" : "String name = endTag.normalName();",
    "info" : "VariableDeclarationStatement[53636-53670]:VariableDeclarationStatement[53717-53751]"
  }, {
    "left" : "if (name.equals(\"tr\"))",
    "right" : "if (name.equals(\"tr\"))",
    "info" : "IfStatement[53688-54692]:IfStatement[53769-54773]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[53711-54026]:Block[53792-54107]"
  }, {
    "left" : "if (!tb.inTableScope(name))",
    "right" : "if (!tb.inTableScope(name))",
    "info" : "IfStatement[53733-53870]:IfStatement[53814-53951]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[53761-53870]:Block[53842-53951]"
  }, {
    "left" : "tb.error(this);",
    "right" : "tb.error(this);",
    "info" : "ExpressionStatement[53787-53802]:ExpressionStatement[53868-53883]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[53835-53848]:ReturnStatement[53916-53929]"
  }, {
    "left" : "tb.clearStackToTableRowContext();",
    "right" : "tb.clearStackToTableRowContext();",
    "info" : "ExpressionStatement[53891-53924]:ExpressionStatement[53972-54005]"
  }, {
    "left" : "tb.pop();",
    "right" : "tb.pop();",
    "info" : "ExpressionStatement[53945-53954]:ExpressionStatement[54026-54035]"
  }, {
    "left" : "tb.transition(InTableBody);",
    "right" : "tb.transition(InTableBody);",
    "info" : "ExpressionStatement[53981-54008]:ExpressionStatement[54062-54089]"
  }, {
    "left" : "if (name.equals(\"table\"))",
    "right" : "if (name.equals(\"table\"))",
    "info" : "IfStatement[54032-54692]:IfStatement[54113-54773]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[54058-54128]:Block[54139-54209]"
  }, {
    "left" : "return handleMissingTr(t, tb);",
    "right" : "return handleMissingTr(t, tb);",
    "info" : "ReturnStatement[54080-54110]:ReturnStatement[54161-54191]"
  }, {
    "left" : "if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\"))",
    "right" : "if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\"))",
    "info" : "IfStatement[54134-54692]:IfStatement[54215-54773]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[54186-54441]:Block[54267-54522]"
  }, {
    "left" : "if (!tb.inTableScope(name))",
    "right" : "if (!tb.inTableScope(name))",
    "info" : "IfStatement[54208-54337]:IfStatement[54289-54418]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[54236-54337]:Block[54317-54418]"
  }, {
    "left" : "tb.error(this);",
    "right" : "tb.error(this);",
    "info" : "ExpressionStatement[54262-54277]:ExpressionStatement[54343-54358]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[54302-54315]:ReturnStatement[54383-54396]"
  }, {
    "left" : "tb.processEndTag(\"tr\");",
    "right" : "tb.processEndTag(\"tr\");",
    "info" : "ExpressionStatement[54358-54381]:ExpressionStatement[54439-54462]"
  }, {
    "left" : "return tb.process(t);",
    "right" : "return tb.process(t);",
    "info" : "ReturnStatement[54402-54423]:ReturnStatement[54483-54504]"
  }, {
    "left" : "if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\"))",
    "right" : "if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\"))",
    "info" : "IfStatement[54447-54692]:IfStatement[54528-54773]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[54530-54619]:Block[54611-54700]"
  }, {
    "left" : "tb.error(this);",
    "right" : "tb.error(this);",
    "info" : "ExpressionStatement[54552-54567]:ExpressionStatement[54633-54648]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[54588-54601]:ReturnStatement[54669-54682]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[54625-54692]:Block[54706-54773]"
  }, {
    "left" : "return anythingElse(t, tb);",
    "right" : "return anythingElse(t, tb);",
    "info" : "ReturnStatement[54647-54674]:ReturnStatement[54728-54755]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[54712-54771]:Block[54793-54852]"
  }, {
    "left" : "return anythingElse(t, tb);",
    "right" : "return anythingElse(t, tb);",
    "info" : "ReturnStatement[54730-54757]:ReturnStatement[54811-54838]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[54784-54796]:ReturnStatement[54865-54877]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[54816-54823]:Modifier[54897-54904]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[54824-54831]:PrimitiveType[54905-54912]"
  }, {
    "left" : "anythingElse",
    "right" : "anythingElse",
    "info" : "SimpleName[54832-54844]:SimpleName[54913-54925]"
  }, {
    "left" : "Token t",
    "right" : "Token t",
    "info" : "SingleVariableDeclaration[54845-54852]:SingleVariableDeclaration[54926-54933]"
  }, {
    "left" : "HtmlTreeBuilder tb",
    "right" : "HtmlTreeBuilder tb",
    "info" : "SingleVariableDeclaration[54854-54872]:SingleVariableDeclaration[54935-54953]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[54874-54928]:Block[54955-55009]"
  }, {
    "left" : "return tb.process(t, InTable);",
    "right" : "return tb.process(t, InTable);",
    "info" : "ReturnStatement[54888-54918]:ReturnStatement[54969-54999]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[54938-54945]:Modifier[55019-55026]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[54946-54953]:PrimitiveType[55027-55034]"
  }, {
    "left" : "handleMissingTr",
    "right" : "handleMissingTr",
    "info" : "SimpleName[54954-54969]:SimpleName[55035-55050]"
  }, {
    "left" : "Token t",
    "right" : "Token t",
    "info" : "SingleVariableDeclaration[54970-54977]:SingleVariableDeclaration[55051-55058]"
  }, {
    "left" : "TreeBuilder tb",
    "right" : "TreeBuilder tb",
    "info" : "SingleVariableDeclaration[54979-54993]:SingleVariableDeclaration[55060-55074]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[54995-55174]:Block[55076-55255]"
  }, {
    "left" : "boolean processed = tb.processEndTag(\"tr\");",
    "right" : "boolean processed = tb.processEndTag(\"tr\");",
    "info" : "VariableDeclarationStatement[55009-55052]:VariableDeclarationStatement[55090-55133]"
  }, {
    "left" : "if (processed)",
    "right" : "if (processed)",
    "info" : "IfStatement[55065-55164]:IfStatement[55146-55245]"
  }, {
    "left" : "return tb.process(t);",
    "right" : "return tb.process(t);",
    "info" : "ReturnStatement[55096-55117]:ReturnStatement[55177-55198]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[55151-55164]:ReturnStatement[55232-55245]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[55203-55210]:PrimitiveType[55284-55291]"
  }, {
    "left" : "process",
    "right" : "process",
    "info" : "SimpleName[55211-55218]:SimpleName[55292-55299]"
  }, {
    "left" : "Token t",
    "right" : "Token t",
    "info" : "SingleVariableDeclaration[55219-55226]:SingleVariableDeclaration[55300-55307]"
  }, {
    "left" : "HtmlTreeBuilder tb",
    "right" : "HtmlTreeBuilder tb",
    "info" : "SingleVariableDeclaration[55228-55246]:SingleVariableDeclaration[55309-55327]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[55248-57145]:Block[55329-57226]"
  }, {
    "left" : "if (t.isEndTag())",
    "right" : "if (t.isEndTag())",
    "info" : "IfStatement[55262-57110]:IfStatement[55343-57191]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[55280-56605]:Block[55361-56686]"
  }, {
    "left" : "Token.EndTag endTag = t.asEndTag();",
    "right" : "Token.EndTag endTag = t.asEndTag();",
    "info" : "VariableDeclarationStatement[55298-55333]:VariableDeclarationStatement[55379-55414]"
  }, {
    "left" : "String name = endTag.normalName();",
    "right" : "String name = endTag.normalName();",
    "info" : "VariableDeclarationStatement[55350-55384]:VariableDeclarationStatement[55431-55465]"
  }, {
    "left" : "if (StringUtil.in(name, \"td\", \"th\"))",
    "right" : "if (StringUtil.in(name, \"td\", \"th\"))",
    "info" : "IfStatement[55402-56591]:IfStatement[55483-56672]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[55439-56033]:Block[55520-56114]"
  }, {
    "left" : "if (!tb.inTableScope(name))",
    "right" : "if (!tb.inTableScope(name))",
    "info" : "IfStatement[55461-55706]:IfStatement[55542-55787]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[55489-55706]:Block[55570-55787]"
  }, {
    "left" : "tb.error(this);",
    "right" : "tb.error(this);",
    "info" : "ExpressionStatement[55515-55530]:ExpressionStatement[55596-55611]"
  }, {
    "left" : "tb.transition(InRow);",
    "right" : "tb.transition(InRow);",
    "info" : "ExpressionStatement[55555-55576]:ExpressionStatement[55636-55657]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[55671-55684]:ReturnStatement[55752-55765]"
  }, {
    "left" : "tb.generateImpliedEndTags();",
    "right" : "tb.generateImpliedEndTags();",
    "info" : "ExpressionStatement[55727-55755]:ExpressionStatement[55808-55836]"
  }, {
    "left" : "if (!tb.currentElement().nodeName().equals(name))",
    "right" : "if (!tb.currentElement().nodeName().equals(name))",
    "info" : "IfStatement[55776-55865]:IfStatement[55857-55946]"
  }, {
    "left" : "tb.error(this);",
    "right" : "tb.error(this);",
    "info" : "ExpressionStatement[55850-55865]:ExpressionStatement[55931-55946]"
  }, {
    "left" : "tb.popStackToClose(name);",
    "right" : "tb.popStackToClose(name);",
    "info" : "ExpressionStatement[55886-55911]:ExpressionStatement[55967-55992]"
  }, {
    "left" : "tb.clearFormattingElementsToLastMarker();",
    "right" : "tb.clearFormattingElementsToLastMarker();",
    "info" : "ExpressionStatement[55932-55973]:ExpressionStatement[56013-56054]"
  }, {
    "left" : "tb.transition(InRow);",
    "right" : "tb.transition(InRow);",
    "info" : "ExpressionStatement[55994-56015]:ExpressionStatement[56075-56096]"
  }, {
    "left" : "if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\"))",
    "right" : "if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\"))",
    "info" : "IfStatement[56039-56591]:IfStatement[56120-56672]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[56110-56199]:Block[56191-56280]"
  }, {
    "left" : "tb.error(this);",
    "right" : "tb.error(this);",
    "info" : "ExpressionStatement[56132-56147]:ExpressionStatement[56213-56228]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[56168-56181]:ReturnStatement[56249-56262]"
  }, {
    "left" : "if (StringUtil.in(name, \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\"))",
    "right" : "if (StringUtil.in(name, \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\"))",
    "info" : "IfStatement[56205-56591]:IfStatement[56286-56672]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[56272-56518]:Block[56353-56599]"
  }, {
    "left" : "if (!tb.inTableScope(name))",
    "right" : "if (!tb.inTableScope(name))",
    "info" : "IfStatement[56294-56423]:IfStatement[56375-56504]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[56322-56423]:Block[56403-56504]"
  }, {
    "left" : "tb.error(this);",
    "right" : "tb.error(this);",
    "info" : "ExpressionStatement[56348-56363]:ExpressionStatement[56429-56444]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[56388-56401]:ReturnStatement[56469-56482]"
  }, {
    "left" : "closeCell(tb);",
    "right" : "closeCell(tb);",
    "info" : "ExpressionStatement[56444-56458]:ExpressionStatement[56525-56539]"
  }, {
    "left" : "return tb.process(t);",
    "right" : "return tb.process(t);",
    "info" : "ReturnStatement[56479-56500]:ReturnStatement[56560-56581]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[56524-56591]:Block[56605-56672]"
  }, {
    "left" : "return anythingElse(t, tb);",
    "right" : "return anythingElse(t, tb);",
    "info" : "ReturnStatement[56546-56573]:ReturnStatement[56627-56654]"
  }, {
    "left" : "if (t.isStartTag() &&\n                    StringUtil.in(t.asStartTag().normalName(),\n                            \"caption\", \"col\", \"colgroup\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\"))",
    "right" : "if (t.isStartTag() &&\n                    StringUtil.in(t.asStartTag().normalName(),\n                            \"caption\", \"col\", \"colgroup\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\"))",
    "info" : "IfStatement[56611-57110]:IfStatement[56692-57191]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[56800-57045]:Block[56881-57126]"
  }, {
    "left" : "if (!(tb.inTableScope(\"td\") || tb.inTableScope(\"th\")))",
    "right" : "if (!(tb.inTableScope(\"td\") || tb.inTableScope(\"th\")))",
    "info" : "IfStatement[56818-56962]:IfStatement[56899-57043]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[56873-56962]:Block[56954-57043]"
  }, {
    "left" : "tb.error(this);",
    "right" : "tb.error(this);",
    "info" : "ExpressionStatement[56895-56910]:ExpressionStatement[56976-56991]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[56931-56944]:ReturnStatement[57012-57025]"
  }, {
    "left" : "closeCell(tb);",
    "right" : "closeCell(tb);",
    "info" : "ExpressionStatement[56979-56993]:ExpressionStatement[57060-57074]"
  }, {
    "left" : "return tb.process(t);",
    "right" : "return tb.process(t);",
    "info" : "ReturnStatement[57010-57031]:ReturnStatement[57091-57112]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[57051-57110]:Block[57132-57191]"
  }, {
    "left" : "return anythingElse(t, tb);",
    "right" : "return anythingElse(t, tb);",
    "info" : "ReturnStatement[57069-57096]:ReturnStatement[57150-57177]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[57123-57135]:ReturnStatement[57204-57216]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[57155-57162]:Modifier[57236-57243]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[57163-57170]:PrimitiveType[57244-57251]"
  }, {
    "left" : "anythingElse",
    "right" : "anythingElse",
    "info" : "SimpleName[57171-57183]:SimpleName[57252-57264]"
  }, {
    "left" : "Token t",
    "right" : "Token t",
    "info" : "SingleVariableDeclaration[57184-57191]:SingleVariableDeclaration[57265-57272]"
  }, {
    "left" : "HtmlTreeBuilder tb",
    "right" : "HtmlTreeBuilder tb",
    "info" : "SingleVariableDeclaration[57193-57211]:SingleVariableDeclaration[57274-57292]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[57213-57266]:Block[57294-57347]"
  }, {
    "left" : "return tb.process(t, InBody);",
    "right" : "return tb.process(t, InBody);",
    "info" : "ReturnStatement[57227-57256]:ReturnStatement[57308-57337]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[57276-57283]:Modifier[57357-57364]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[57284-57288]:PrimitiveType[57365-57369]"
  }, {
    "left" : "closeCell",
    "right" : "closeCell",
    "info" : "SimpleName[57289-57298]:SimpleName[57370-57379]"
  }, {
    "left" : "HtmlTreeBuilder tb",
    "right" : "HtmlTreeBuilder tb",
    "info" : "SingleVariableDeclaration[57299-57317]:SingleVariableDeclaration[57380-57398]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[57319-57500]:Block[57400-57581]"
  }, {
    "left" : "if (tb.inTableScope(\"td\"))",
    "right" : "if (tb.inTableScope(\"td\"))",
    "info" : "IfStatement[57333-57456]:IfStatement[57414-57537]"
  }, {
    "left" : "tb.processEndTag(\"td\");",
    "right" : "tb.processEndTag(\"td\");",
    "info" : "ExpressionStatement[57376-57399]:ExpressionStatement[57457-57480]"
  }, {
    "left" : "tb.processEndTag(\"th\");",
    "right" : "tb.processEndTag(\"th\");",
    "info" : "ExpressionStatement[57433-57456]:ExpressionStatement[57514-57537]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[57531-57538]:PrimitiveType[57612-57619]"
  }, {
    "left" : "process",
    "right" : "process",
    "info" : "SimpleName[57539-57546]:SimpleName[57620-57627]"
  }, {
    "left" : "Token t",
    "right" : "Token t",
    "info" : "SingleVariableDeclaration[57547-57554]:SingleVariableDeclaration[57628-57635]"
  }, {
    "left" : "HtmlTreeBuilder tb",
    "right" : "HtmlTreeBuilder tb",
    "info" : "SingleVariableDeclaration[57556-57574]:SingleVariableDeclaration[57637-57655]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[57576-61547]:Block[57657-61628]"
  }, {
    "left" : "switch (t.type) {\n                case Character:\n                    Token.Character c = t.asCharacter();\n                    if (c.getData().equals(nullString)) {\n                        tb.error(this);\n                        return false;\n                    } else {\n                        tb.insert(c);\n                    }\n                    break;\n                case Comment:\n                    tb.insert(t.asComment());\n                    break;\n                case Doctype:\n                    tb.error(this);\n                    return false;\n                case StartTag:\n                    Token.StartTag start = t.asStartTag();\n                    String name = start.normalName();\n                    if (name.equals(\"html\"))\n                        return tb.process(start, InBody);\n                    else if (name.equals(\"option\")) {\n                        if (tb.currentElement().nodeName().equals(\"option\"))\n                            tb.processEndTag(\"option\");\n                        tb.insert(start);\n                    } else if (name.equals(\"optgroup\")) {\n                        if (tb.currentElement().nodeName().equals(\"option\"))\n                            tb.processEndTag(\"option\");\n                        else if (tb.currentElement().nodeName().equals(\"optgroup\"))\n                            tb.processEndTag(\"optgroup\");\n                        tb.insert(start);\n                    } else if (name.equals(\"select\")) {\n                        tb.error(this);\n                        return tb.processEndTag(\"select\");\n                    } else if (StringUtil.in(name, \"input\", \"keygen\", \"textarea\")) {\n                        tb.error(this);\n                        if (!tb.inSelectScope(\"select\"))\n                            return false; // frag\n                        tb.processEndTag(\"select\");\n                        return tb.process(start);\n                    } else if (name.equals(\"script\")) {\n                        return tb.process(t, InHead);\n                    } else {\n                        return anythingElse(t, tb);\n                    }\n                    break;\n                case EndTag:\n                    Token.EndTag end = t.asEndTag();\n                    name = end.normalName();\n                    switch (name) {\n                        case \"optgroup\":\n                            if (tb.currentElement().nodeName().equals(\"option\") && tb.aboveOnStack(tb.currentElement()) != null && tb.aboveOnStack(tb.currentElement()).nodeName().equals(\"optgroup\"))\n                                tb.processEndTag(\"option\");\n                            if (tb.currentElement().nodeName().equals(\"optgroup\"))\n                                tb.pop();\n                            else\n                                tb.error(this);\n                            break;\n                        case \"option\":\n                            if (tb.currentElement().nodeName().equals(\"option\"))\n                                tb.pop();\n                            else\n                                tb.error(this);\n                            break;\n                        case \"select\":\n                            if (!tb.inSelectScope(name)) {\n                                tb.error(this);\n                                return false;\n                            } else {\n                                tb.popStackToClose(name);\n                                tb.resetInsertionMode();\n                            }\n                            break;\n                        default:\n                            return anythingElse(t, tb);\n                    }\n                    break;\n                case EOF:\n                    if (!tb.currentElement().nodeName().equals(\"html\"))\n                        tb.error(this);\n                    break;\n                default:\n                    return anythingElse(t, tb);\n            }",
    "right" : "switch (t.type) {\n                case Character:\n                    Token.Character c = t.asCharacter();\n                    if (c.getData().equals(nullString)) {\n                        tb.error(this);\n                        return false;\n                    } else {\n                        tb.insert(c);\n                    }\n                    break;\n                case Comment:\n                    tb.insert(t.asComment());\n                    break;\n                case Doctype:\n                    tb.error(this);\n                    return false;\n                case StartTag:\n                    Token.StartTag start = t.asStartTag();\n                    String name = start.normalName();\n                    if (name.equals(\"html\"))\n                        return tb.process(start, InBody);\n                    else if (name.equals(\"option\")) {\n                        if (tb.currentElement().nodeName().equals(\"option\"))\n                            tb.processEndTag(\"option\");\n                        tb.insert(start);\n                    } else if (name.equals(\"optgroup\")) {\n                        if (tb.currentElement().nodeName().equals(\"option\"))\n                            tb.processEndTag(\"option\");\n                        else if (tb.currentElement().nodeName().equals(\"optgroup\"))\n                            tb.processEndTag(\"optgroup\");\n                        tb.insert(start);\n                    } else if (name.equals(\"select\")) {\n                        tb.error(this);\n                        return tb.processEndTag(\"select\");\n                    } else if (StringUtil.in(name, \"input\", \"keygen\", \"textarea\")) {\n                        tb.error(this);\n                        if (!tb.inSelectScope(\"select\"))\n                            return false; // frag\n                        tb.processEndTag(\"select\");\n                        return tb.process(start);\n                    } else if (name.equals(\"script\")) {\n                        return tb.process(t, InHead);\n                    } else {\n                        return anythingElse(t, tb);\n                    }\n                    break;\n                case EndTag:\n                    Token.EndTag end = t.asEndTag();\n                    name = end.normalName();\n                    switch (name) {\n                        case \"optgroup\":\n                            if (tb.currentElement().nodeName().equals(\"option\") && tb.aboveOnStack(tb.currentElement()) != null && tb.aboveOnStack(tb.currentElement()).nodeName().equals(\"optgroup\"))\n                                tb.processEndTag(\"option\");\n                            if (tb.currentElement().nodeName().equals(\"optgroup\"))\n                                tb.pop();\n                            else\n                                tb.error(this);\n                            break;\n                        case \"option\":\n                            if (tb.currentElement().nodeName().equals(\"option\"))\n                                tb.pop();\n                            else\n                                tb.error(this);\n                            break;\n                        case \"select\":\n                            if (!tb.inSelectScope(name)) {\n                                tb.error(this);\n                                return false;\n                            } else {\n                                tb.popStackToClose(name);\n                                tb.resetInsertionMode();\n                            }\n                            break;\n                        default:\n                            return anythingElse(t, tb);\n                    }\n                    break;\n                case EOF:\n                    if (!tb.currentElement().nodeName().equals(\"html\"))\n                        tb.error(this);\n                    break;\n                default:\n                    return anythingElse(t, tb);\n            }",
    "info" : "SwitchStatement[57590-61512]:SwitchStatement[57671-61593]"
  }, {
    "left" : "case Character:",
    "right" : "case Character:",
    "info" : "SwitchCase[57624-57639]:SwitchCase[57705-57720]"
  }, {
    "left" : "Token.Character c = t.asCharacter();",
    "right" : "Token.Character c = t.asCharacter();",
    "info" : "VariableDeclarationStatement[57660-57696]:VariableDeclarationStatement[57741-57777]"
  }, {
    "left" : "if (c.getData().equals(nullString))",
    "right" : "if (c.getData().equals(nullString))",
    "info" : "IfStatement[57717-57921]:IfStatement[57798-58002]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[57753-57854]:Block[57834-57935]"
  }, {
    "left" : "tb.error(this);",
    "right" : "tb.error(this);",
    "info" : "ExpressionStatement[57779-57794]:ExpressionStatement[57860-57875]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[57819-57832]:ReturnStatement[57900-57913]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[57860-57921]:Block[57941-58002]"
  }, {
    "left" : "tb.insert(c);",
    "right" : "tb.insert(c);",
    "info" : "ExpressionStatement[57886-57899]:ExpressionStatement[57967-57980]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[57942-57948]:BreakStatement[58023-58029]"
  }, {
    "left" : "case Comment:",
    "right" : "case Comment:",
    "info" : "SwitchCase[57965-57978]:SwitchCase[58046-58059]"
  }, {
    "left" : "tb.insert(t.asComment());",
    "right" : "tb.insert(t.asComment());",
    "info" : "ExpressionStatement[57999-58024]:ExpressionStatement[58080-58105]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[58045-58051]:BreakStatement[58126-58132]"
  }, {
    "left" : "case Doctype:",
    "right" : "case Doctype:",
    "info" : "SwitchCase[58068-58081]:SwitchCase[58149-58162]"
  }, {
    "left" : "tb.error(this);",
    "right" : "tb.error(this);",
    "info" : "ExpressionStatement[58102-58117]:ExpressionStatement[58183-58198]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[58138-58151]:ReturnStatement[58219-58232]"
  }, {
    "left" : "case StartTag:",
    "right" : "case StartTag:",
    "info" : "SwitchCase[58168-58182]:SwitchCase[58249-58263]"
  }, {
    "left" : "Token.StartTag start = t.asStartTag();",
    "right" : "Token.StartTag start = t.asStartTag();",
    "info" : "VariableDeclarationStatement[58203-58241]:VariableDeclarationStatement[58284-58322]"
  }, {
    "left" : "String name = start.normalName();",
    "right" : "String name = start.normalName();",
    "info" : "VariableDeclarationStatement[58262-58295]:VariableDeclarationStatement[58343-58376]"
  }, {
    "left" : "if (name.equals(\"html\"))",
    "right" : "if (name.equals(\"html\"))",
    "info" : "IfStatement[58316-59704]:IfStatement[58397-59785]"
  }, {
    "left" : "return tb.process(start, InBody);",
    "right" : "return tb.process(start, InBody);",
    "info" : "ReturnStatement[58365-58398]:ReturnStatement[58446-58479]"
  }, {
    "left" : "if (name.equals(\"option\"))",
    "right" : "if (name.equals(\"option\"))",
    "info" : "IfStatement[58424-59704]:IfStatement[58505-59785]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[58451-58649]:Block[58532-58730]"
  }, {
    "left" : "if (tb.currentElement().nodeName().equals(\"option\"))",
    "right" : "if (tb.currentElement().nodeName().equals(\"option\"))",
    "info" : "IfStatement[58477-58585]:IfStatement[58558-58666]"
  }, {
    "left" : "tb.processEndTag(\"option\");",
    "right" : "tb.processEndTag(\"option\");",
    "info" : "ExpressionStatement[58558-58585]:ExpressionStatement[58639-58666]"
  }, {
    "left" : "tb.insert(start);",
    "right" : "tb.insert(start);",
    "info" : "ExpressionStatement[58610-58627]:ExpressionStatement[58691-58708]"
  }, {
    "left" : "if (name.equals(\"optgroup\"))",
    "right" : "if (name.equals(\"optgroup\"))",
    "info" : "IfStatement[58655-59704]:IfStatement[58736-59785]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[58684-59024]:Block[58765-59105]"
  }, {
    "left" : "if (tb.currentElement().nodeName().equals(\"option\"))",
    "right" : "if (tb.currentElement().nodeName().equals(\"option\"))",
    "info" : "IfStatement[58710-58960]:IfStatement[58791-59041]"
  }, {
    "left" : "tb.processEndTag(\"option\");",
    "right" : "tb.processEndTag(\"option\");",
    "info" : "ExpressionStatement[58791-58818]:ExpressionStatement[58872-58899]"
  }, {
    "left" : "if (tb.currentElement().nodeName().equals(\"optgroup\"))",
    "right" : "if (tb.currentElement().nodeName().equals(\"optgroup\"))",
    "info" : "IfStatement[58848-58960]:IfStatement[58929-59041]"
  }, {
    "left" : "tb.processEndTag(\"optgroup\");",
    "right" : "tb.processEndTag(\"optgroup\");",
    "info" : "ExpressionStatement[58931-58960]:ExpressionStatement[59012-59041]"
  }, {
    "left" : "tb.insert(start);",
    "right" : "tb.insert(start);",
    "info" : "ExpressionStatement[58985-59002]:ExpressionStatement[59066-59083]"
  }, {
    "left" : "if (name.equals(\"select\"))",
    "right" : "if (name.equals(\"select\"))",
    "info" : "IfStatement[59030-59704]:IfStatement[59111-59785]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[59057-59179]:Block[59138-59260]"
  }, {
    "left" : "tb.error(this);",
    "right" : "tb.error(this);",
    "info" : "ExpressionStatement[59083-59098]:ExpressionStatement[59164-59179]"
  }, {
    "left" : "return tb.processEndTag(\"select\");",
    "right" : "return tb.processEndTag(\"select\");",
    "info" : "ReturnStatement[59123-59157]:ReturnStatement[59204-59238]"
  }, {
    "left" : "if (StringUtil.in(name, \"input\", \"keygen\", \"textarea\"))",
    "right" : "if (StringUtil.in(name, \"input\", \"keygen\", \"textarea\"))",
    "info" : "IfStatement[59185-59704]:IfStatement[59266-59785]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[59241-59513]:Block[59322-59594]"
  }, {
    "left" : "tb.error(this);",
    "right" : "tb.error(this);",
    "info" : "ExpressionStatement[59267-59282]:ExpressionStatement[59348-59363]"
  }, {
    "left" : "if (!tb.inSelectScope(\"select\"))",
    "right" : "if (!tb.inSelectScope(\"select\"))",
    "info" : "IfStatement[59307-59381]:IfStatement[59388-59462]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[59368-59381]:ReturnStatement[59449-59462]"
  }, {
    "left" : "tb.processEndTag(\"select\");",
    "right" : "tb.processEndTag(\"select\");",
    "info" : "ExpressionStatement[59414-59441]:ExpressionStatement[59495-59522]"
  }, {
    "left" : "return tb.process(start);",
    "right" : "return tb.process(start);",
    "info" : "ReturnStatement[59466-59491]:ReturnStatement[59547-59572]"
  }, {
    "left" : "if (name.equals(\"script\"))",
    "right" : "if (name.equals(\"script\"))",
    "info" : "IfStatement[59519-59704]:IfStatement[59600-59785]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[59546-59623]:Block[59627-59704]"
  }, {
    "left" : "return tb.process(t, InHead);",
    "right" : "return tb.process(t, InHead);",
    "info" : "ReturnStatement[59572-59601]:ReturnStatement[59653-59682]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[59629-59704]:Block[59710-59785]"
  }, {
    "left" : "return anythingElse(t, tb);",
    "right" : "return anythingElse(t, tb);",
    "info" : "ReturnStatement[59655-59682]:ReturnStatement[59736-59763]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[59725-59731]:BreakStatement[59806-59812]"
  }, {
    "left" : "case EndTag:",
    "right" : "case EndTag:",
    "info" : "SwitchCase[59748-59760]:SwitchCase[59829-59841]"
  }, {
    "left" : "Token.EndTag end = t.asEndTag();",
    "right" : "Token.EndTag end = t.asEndTag();",
    "info" : "VariableDeclarationStatement[59781-59813]:VariableDeclarationStatement[59862-59894]"
  }, {
    "left" : "name = end.normalName();",
    "right" : "name = end.normalName();",
    "info" : "ExpressionStatement[59834-59858]:ExpressionStatement[59915-59939]"
  }, {
    "left" : "switch (name) {\n                        case \"optgroup\":\n                            if (tb.currentElement().nodeName().equals(\"option\") && tb.aboveOnStack(tb.currentElement()) != null && tb.aboveOnStack(tb.currentElement()).nodeName().equals(\"optgroup\"))\n                                tb.processEndTag(\"option\");\n                            if (tb.currentElement().nodeName().equals(\"optgroup\"))\n                                tb.pop();\n                            else\n                                tb.error(this);\n                            break;\n                        case \"option\":\n                            if (tb.currentElement().nodeName().equals(\"option\"))\n                                tb.pop();\n                            else\n                                tb.error(this);\n                            break;\n                        case \"select\":\n                            if (!tb.inSelectScope(name)) {\n                                tb.error(this);\n                                return false;\n                            } else {\n                                tb.popStackToClose(name);\n                                tb.resetInsertionMode();\n                            }\n                            break;\n                        default:\n                            return anythingElse(t, tb);\n                    }",
    "right" : "switch (name) {\n                        case \"optgroup\":\n                            if (tb.currentElement().nodeName().equals(\"option\") && tb.aboveOnStack(tb.currentElement()) != null && tb.aboveOnStack(tb.currentElement()).nodeName().equals(\"optgroup\"))\n                                tb.processEndTag(\"option\");\n                            if (tb.currentElement().nodeName().equals(\"optgroup\"))\n                                tb.pop();\n                            else\n                                tb.error(this);\n                            break;\n                        case \"option\":\n                            if (tb.currentElement().nodeName().equals(\"option\"))\n                                tb.pop();\n                            else\n                                tb.error(this);\n                            break;\n                        case \"select\":\n                            if (!tb.inSelectScope(name)) {\n                                tb.error(this);\n                                return false;\n                            } else {\n                                tb.popStackToClose(name);\n                                tb.resetInsertionMode();\n                            }\n                            break;\n                        default:\n                            return anythingElse(t, tb);\n                    }",
    "info" : "SwitchStatement[59879-61233]:SwitchStatement[59960-61314]"
  }, {
    "left" : "case \"optgroup\":",
    "right" : "case \"optgroup\":",
    "info" : "SwitchCase[59919-59935]:SwitchCase[60000-60016]"
  }, {
    "left" : "if (tb.currentElement().nodeName().equals(\"option\") && tb.aboveOnStack(tb.currentElement()) != null && tb.aboveOnStack(tb.currentElement()).nodeName().equals(\"optgroup\"))",
    "right" : "if (tb.currentElement().nodeName().equals(\"option\") && tb.aboveOnStack(tb.currentElement()) != null && tb.aboveOnStack(tb.currentElement()).nodeName().equals(\"optgroup\"))",
    "info" : "IfStatement[59964-60194]:IfStatement[60045-60275]"
  }, {
    "left" : "tb.processEndTag(\"option\");",
    "right" : "tb.processEndTag(\"option\");",
    "info" : "ExpressionStatement[60167-60194]:ExpressionStatement[60248-60275]"
  }, {
    "left" : "if (tb.currentElement().nodeName().equals(\"optgroup\"))",
    "right" : "if (tb.currentElement().nodeName().equals(\"optgroup\"))",
    "info" : "IfStatement[60223-60400]:IfStatement[60304-60481]"
  }, {
    "left" : "tb.pop();",
    "right" : "tb.pop();",
    "info" : "ExpressionStatement[60310-60319]:ExpressionStatement[60391-60400]"
  }, {
    "left" : "tb.error(this);",
    "right" : "tb.error(this);",
    "info" : "ExpressionStatement[60385-60400]:ExpressionStatement[60466-60481]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[60429-60435]:BreakStatement[60510-60516]"
  }, {
    "left" : "case \"option\":",
    "right" : "case \"option\":",
    "info" : "SwitchCase[60460-60474]:SwitchCase[60541-60555]"
  }, {
    "left" : "if (tb.currentElement().nodeName().equals(\"option\"))",
    "right" : "if (tb.currentElement().nodeName().equals(\"option\"))",
    "info" : "IfStatement[60503-60678]:IfStatement[60584-60759]"
  }, {
    "left" : "tb.pop();",
    "right" : "tb.pop();",
    "info" : "ExpressionStatement[60588-60597]:ExpressionStatement[60669-60678]"
  }, {
    "left" : "tb.error(this);",
    "right" : "tb.error(this);",
    "info" : "ExpressionStatement[60663-60678]:ExpressionStatement[60744-60759]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[60707-60713]:BreakStatement[60788-60794]"
  }, {
    "left" : "case \"select\":",
    "right" : "case \"select\":",
    "info" : "SwitchCase[60738-60752]:SwitchCase[60819-60833]"
  }, {
    "left" : "if (!tb.inSelectScope(name))",
    "right" : "if (!tb.inSelectScope(name))",
    "info" : "IfStatement[60781-61087]:IfStatement[60862-61168]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[60810-60935]:Block[60891-61016]"
  }, {
    "left" : "tb.error(this);",
    "right" : "tb.error(this);",
    "info" : "ExpressionStatement[60844-60859]:ExpressionStatement[60925-60940]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[60892-60905]:ReturnStatement[60973-60986]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[60941-61087]:Block[61022-61168]"
  }, {
    "left" : "tb.popStackToClose(name);",
    "right" : "tb.popStackToClose(name);",
    "info" : "ExpressionStatement[60975-61000]:ExpressionStatement[61056-61081]"
  }, {
    "left" : "tb.resetInsertionMode();",
    "right" : "tb.resetInsertionMode();",
    "info" : "ExpressionStatement[61033-61057]:ExpressionStatement[61114-61138]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[61116-61122]:BreakStatement[61197-61203]"
  }, {
    "left" : "default:",
    "right" : "default:",
    "info" : "SwitchCase[61147-61155]:SwitchCase[61228-61236]"
  }, {
    "left" : "return anythingElse(t, tb);",
    "right" : "return anythingElse(t, tb);",
    "info" : "ReturnStatement[61184-61211]:ReturnStatement[61265-61292]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[61254-61260]:BreakStatement[61335-61341]"
  }, {
    "left" : "case EOF:",
    "right" : "case EOF:",
    "info" : "SwitchCase[61277-61286]:SwitchCase[61358-61367]"
  }, {
    "left" : "if (!tb.currentElement().nodeName().equals(\"html\"))",
    "right" : "if (!tb.currentElement().nodeName().equals(\"html\"))",
    "info" : "IfStatement[61307-61398]:IfStatement[61388-61479]"
  }, {
    "left" : "tb.error(this);",
    "right" : "tb.error(this);",
    "info" : "ExpressionStatement[61383-61398]:ExpressionStatement[61464-61479]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[61419-61425]:BreakStatement[61500-61506]"
  }, {
    "left" : "default:",
    "right" : "default:",
    "info" : "SwitchCase[61442-61450]:SwitchCase[61523-61531]"
  }, {
    "left" : "return anythingElse(t, tb);",
    "right" : "return anythingElse(t, tb);",
    "info" : "ReturnStatement[61471-61498]:ReturnStatement[61552-61579]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[61525-61537]:ReturnStatement[61606-61618]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[61557-61564]:Modifier[61638-61645]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[61565-61572]:PrimitiveType[61646-61653]"
  }, {
    "left" : "anythingElse",
    "right" : "anythingElse",
    "info" : "SimpleName[61573-61585]:SimpleName[61654-61666]"
  }, {
    "left" : "Token t",
    "right" : "Token t",
    "info" : "SingleVariableDeclaration[61586-61593]:SingleVariableDeclaration[61667-61674]"
  }, {
    "left" : "HtmlTreeBuilder tb",
    "right" : "HtmlTreeBuilder tb",
    "info" : "SingleVariableDeclaration[61595-61613]:SingleVariableDeclaration[61676-61694]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[61615-61680]:Block[61696-61761]"
  }, {
    "left" : "tb.error(this);",
    "right" : "tb.error(this);",
    "info" : "ExpressionStatement[61629-61644]:ExpressionStatement[61710-61725]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[61657-61670]:ReturnStatement[61738-61751]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[61718-61725]:PrimitiveType[61799-61806]"
  }, {
    "left" : "process",
    "right" : "process",
    "info" : "SimpleName[61726-61733]:SimpleName[61807-61814]"
  }, {
    "left" : "Token t",
    "right" : "Token t",
    "info" : "SingleVariableDeclaration[61734-61741]:SingleVariableDeclaration[61815-61822]"
  }, {
    "left" : "HtmlTreeBuilder tb",
    "right" : "HtmlTreeBuilder tb",
    "info" : "SingleVariableDeclaration[61743-61761]:SingleVariableDeclaration[61824-61842]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[61763-62511]:Block[61844-62592]"
  }, {
    "left" : "if (t.isStartTag() && StringUtil.in(t.asStartTag().normalName(), \"caption\", \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\", \"td\", \"th\"))",
    "right" : "if (t.isStartTag() && StringUtil.in(t.asStartTag().normalName(), \"caption\", \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\", \"td\", \"th\"))",
    "info" : "IfStatement[61777-62501]:IfStatement[61858-62582]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[61908-62037]:Block[61989-62118]"
  }, {
    "left" : "tb.error(this);",
    "right" : "tb.error(this);",
    "info" : "ExpressionStatement[61926-61941]:ExpressionStatement[62007-62022]"
  }, {
    "left" : "tb.processEndTag(\"select\");",
    "right" : "tb.processEndTag(\"select\");",
    "info" : "ExpressionStatement[61958-61985]:ExpressionStatement[62039-62066]"
  }, {
    "left" : "return tb.process(t);",
    "right" : "return tb.process(t);",
    "info" : "ReturnStatement[62002-62023]:ReturnStatement[62083-62104]"
  }, {
    "left" : "if (t.isEndTag() && StringUtil.in(t.asEndTag().normalName(), \"caption\", \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\", \"td\", \"th\"))",
    "right" : "if (t.isEndTag() && StringUtil.in(t.asEndTag().normalName(), \"caption\", \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\", \"td\", \"th\"))",
    "info" : "IfStatement[62043-62501]:IfStatement[62124-62582]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[62170-62432]:Block[62251-62513]"
  }, {
    "left" : "tb.error(this);",
    "right" : "tb.error(this);",
    "info" : "ExpressionStatement[62188-62203]:ExpressionStatement[62269-62284]"
  }, {
    "left" : "if (tb.inTableScope(t.asEndTag().normalName()))",
    "right" : "if (tb.inTableScope(t.asEndTag().normalName()))",
    "info" : "IfStatement[62220-62418]:IfStatement[62301-62499]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[62268-62379]:Block[62349-62460]"
  }, {
    "left" : "tb.processEndTag(\"select\");",
    "right" : "tb.processEndTag(\"select\");",
    "info" : "ExpressionStatement[62290-62317]:ExpressionStatement[62371-62398]"
  }, {
    "left" : "return (tb.process(t));",
    "right" : "return (tb.process(t));",
    "info" : "ReturnStatement[62338-62361]:ReturnStatement[62419-62442]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[62405-62418]:ReturnStatement[62486-62499]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[62438-62501]:Block[62519-62582]"
  }, {
    "left" : "return tb.process(t, InSelect);",
    "right" : "return tb.process(t, InSelect);",
    "info" : "ReturnStatement[62456-62487]:ReturnStatement[62537-62568]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[62543-62550]:PrimitiveType[62624-62631]"
  }, {
    "left" : "process",
    "right" : "process",
    "info" : "SimpleName[62551-62558]:SimpleName[62632-62639]"
  }, {
    "left" : "Token t",
    "right" : "Token t",
    "info" : "SingleVariableDeclaration[62559-62566]:SingleVariableDeclaration[62640-62647]"
  }, {
    "left" : "HtmlTreeBuilder tb",
    "right" : "HtmlTreeBuilder tb",
    "info" : "SingleVariableDeclaration[62568-62586]:SingleVariableDeclaration[62649-62667]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[62588-63552]:Block[62669-63633]"
  }, {
    "left" : "if (isWhitespace(t))",
    "right" : "if (isWhitespace(t))",
    "info" : "IfStatement[62602-63517]:IfStatement[62683-63598]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[62623-62684]:Block[62704-62765]"
  }, {
    "left" : "return tb.process(t, InBody);",
    "right" : "return tb.process(t, InBody);",
    "info" : "ReturnStatement[62641-62670]:ReturnStatement[62722-62751]"
  }, {
    "left" : "if (t.isComment())",
    "right" : "if (t.isComment())",
    "info" : "IfStatement[62690-63517]:IfStatement[62771-63598]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[62709-62784]:Block[62790-62865]"
  }, {
    "left" : "tb.insert(t.asComment());",
    "right" : "tb.insert(t.asComment());",
    "info" : "ExpressionStatement[62727-62752]:ExpressionStatement[62808-62833]"
  }, {
    "left" : "if (t.isDoctype())",
    "right" : "if (t.isDoctype())",
    "info" : "IfStatement[62790-63517]:IfStatement[62871-63598]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[62809-62886]:Block[62890-62967]"
  }, {
    "left" : "tb.error(this);",
    "right" : "tb.error(this);",
    "info" : "ExpressionStatement[62827-62842]:ExpressionStatement[62908-62923]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[62859-62872]:ReturnStatement[62940-62953]"
  }, {
    "left" : "if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\"))",
    "right" : "if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\"))",
    "info" : "IfStatement[62892-63517]:IfStatement[62973-63598]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[62958-63019]:Block[63039-63100]"
  }, {
    "left" : "return tb.process(t, InBody);",
    "right" : "return tb.process(t, InBody);",
    "info" : "ReturnStatement[62976-63005]:ReturnStatement[63057-63086]"
  }, {
    "left" : "if (t.isEndTag() && t.asEndTag().normalName().equals(\"html\"))",
    "right" : "if (t.isEndTag() && t.asEndTag().normalName().equals(\"html\"))",
    "info" : "IfStatement[63025-63517]:IfStatement[63106-63598]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[63087-63312]:Block[63168-63393]"
  }, {
    "left" : "if (tb.isFragmentParsing())",
    "right" : "if (tb.isFragmentParsing())",
    "info" : "IfStatement[63105-63298]:IfStatement[63186-63379]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[63133-63222]:Block[63214-63303]"
  }, {
    "left" : "tb.error(this);",
    "right" : "tb.error(this);",
    "info" : "ExpressionStatement[63155-63170]:ExpressionStatement[63236-63251]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[63191-63204]:ReturnStatement[63272-63285]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[63228-63298]:Block[63309-63379]"
  }, {
    "left" : "tb.transition(AfterAfterBody);",
    "right" : "tb.transition(AfterAfterBody);",
    "info" : "ExpressionStatement[63250-63280]:ExpressionStatement[63331-63361]"
  }, {
    "left" : "if (t.isEOF())",
    "right" : "if (t.isEOF())",
    "info" : "IfStatement[63318-63517]:IfStatement[63399-63598]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[63333-63387]:Block[63414-63468]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[63393-63517]:Block[63474-63598]"
  }, {
    "left" : "tb.error(this);",
    "right" : "tb.error(this);",
    "info" : "ExpressionStatement[63411-63426]:ExpressionStatement[63492-63507]"
  }, {
    "left" : "tb.transition(InBody);",
    "right" : "tb.transition(InBody);",
    "info" : "ExpressionStatement[63443-63465]:ExpressionStatement[63524-63546]"
  }, {
    "left" : "return tb.process(t);",
    "right" : "return tb.process(t);",
    "info" : "ReturnStatement[63482-63503]:ReturnStatement[63563-63584]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[63530-63542]:ReturnStatement[63611-63623]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[63585-63592]:PrimitiveType[63666-63673]"
  }, {
    "left" : "process",
    "right" : "process",
    "info" : "SimpleName[63593-63600]:SimpleName[63674-63681]"
  }, {
    "left" : "Token t",
    "right" : "Token t",
    "info" : "SingleVariableDeclaration[63601-63608]:SingleVariableDeclaration[63682-63689]"
  }, {
    "left" : "HtmlTreeBuilder tb",
    "right" : "HtmlTreeBuilder tb",
    "info" : "SingleVariableDeclaration[63610-63628]:SingleVariableDeclaration[63691-63709]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[63630-65382]:Block[63711-65463]"
  }, {
    "left" : "if (isWhitespace(t))",
    "right" : "if (isWhitespace(t))",
    "info" : "IfStatement[63644-65347]:IfStatement[63725-65428]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[63665-63724]:Block[63746-63805]"
  }, {
    "left" : "tb.insert(t.asCharacter());",
    "right" : "tb.insert(t.asCharacter());",
    "info" : "ExpressionStatement[63683-63710]:ExpressionStatement[63764-63791]"
  }, {
    "left" : "if (t.isComment())",
    "right" : "if (t.isComment())",
    "info" : "IfStatement[63730-65347]:IfStatement[63811-65428]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[63749-63806]:Block[63830-63887]"
  }, {
    "left" : "tb.insert(t.asComment());",
    "right" : "tb.insert(t.asComment());",
    "info" : "ExpressionStatement[63767-63792]:ExpressionStatement[63848-63873]"
  }, {
    "left" : "if (t.isDoctype())",
    "right" : "if (t.isDoctype())",
    "info" : "IfStatement[63812-65347]:IfStatement[63893-65428]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[63831-63908]:Block[63912-63989]"
  }, {
    "left" : "tb.error(this);",
    "right" : "tb.error(this);",
    "info" : "ExpressionStatement[63849-63864]:ExpressionStatement[63930-63945]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[63881-63894]:ReturnStatement[63962-63975]"
  }, {
    "left" : "if (t.isStartTag())",
    "right" : "if (t.isStartTag())",
    "info" : "IfStatement[63914-65347]:IfStatement[63995-65428]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[63934-64583]:Block[64015-64664]"
  }, {
    "left" : "Token.StartTag start = t.asStartTag();",
    "right" : "Token.StartTag start = t.asStartTag();",
    "info" : "VariableDeclarationStatement[63952-63990]:VariableDeclarationStatement[64033-64071]"
  }, {
    "left" : "switch (start.normalName()) {\n                    case \"html\":\n                        return tb.process(start, InBody);\n                    case \"frameset\":\n                        tb.insert(start);\n                        break;\n                    case \"frame\":\n                        tb.insertEmpty(start);\n                        break;\n                    case \"noframes\":\n                        return tb.process(start, InHead);\n                    default:\n                        tb.error(this);\n                        return false;\n                }",
    "right" : "switch (start.normalName()) {\n                    case \"html\":\n                        return tb.process(start, InBody);\n                    case \"frameset\":\n                        tb.insert(start);\n                        break;\n                    case \"frame\":\n                        tb.insertEmpty(start);\n                        break;\n                    case \"noframes\":\n                        return tb.process(start, InHead);\n                    default:\n                        tb.error(this);\n                        return false;\n                }",
    "info" : "SwitchStatement[64007-64569]:SwitchStatement[64088-64650]"
  }, {
    "left" : "case \"html\":",
    "right" : "case \"html\":",
    "info" : "SwitchCase[64057-64069]:SwitchCase[64138-64150]"
  }, {
    "left" : "return tb.process(start, InBody);",
    "right" : "return tb.process(start, InBody);",
    "info" : "ReturnStatement[64094-64127]:ReturnStatement[64175-64208]"
  }, {
    "left" : "case \"frameset\":",
    "right" : "case \"frameset\":",
    "info" : "SwitchCase[64148-64164]:SwitchCase[64229-64245]"
  }, {
    "left" : "tb.insert(start);",
    "right" : "tb.insert(start);",
    "info" : "ExpressionStatement[64189-64206]:ExpressionStatement[64270-64287]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[64231-64237]:BreakStatement[64312-64318]"
  }, {
    "left" : "case \"frame\":",
    "right" : "case \"frame\":",
    "info" : "SwitchCase[64258-64271]:SwitchCase[64339-64352]"
  }, {
    "left" : "tb.insertEmpty(start);",
    "right" : "tb.insertEmpty(start);",
    "info" : "ExpressionStatement[64296-64318]:ExpressionStatement[64377-64399]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[64343-64349]:BreakStatement[64424-64430]"
  }, {
    "left" : "case \"noframes\":",
    "right" : "case \"noframes\":",
    "info" : "SwitchCase[64370-64386]:SwitchCase[64451-64467]"
  }, {
    "left" : "return tb.process(start, InHead);",
    "right" : "return tb.process(start, InHead);",
    "info" : "ReturnStatement[64411-64444]:ReturnStatement[64492-64525]"
  }, {
    "left" : "default:",
    "right" : "default:",
    "info" : "SwitchCase[64465-64473]:SwitchCase[64546-64554]"
  }, {
    "left" : "tb.error(this);",
    "right" : "tb.error(this);",
    "info" : "ExpressionStatement[64498-64513]:ExpressionStatement[64579-64594]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[64538-64551]:ReturnStatement[64619-64632]"
  }, {
    "left" : "if (t.isEndTag() && t.asEndTag().normalName().equals(\"frameset\"))",
    "right" : "if (t.isEndTag() && t.asEndTag().normalName().equals(\"frameset\"))",
    "info" : "IfStatement[64589-65347]:IfStatement[64670-65428]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[64655-65071]:Block[64736-65152]"
  }, {
    "left" : "if (tb.currentElement().nodeName().equals(\"html\"))",
    "right" : "if (tb.currentElement().nodeName().equals(\"html\"))",
    "info" : "IfStatement[64673-65057]:IfStatement[64754-65138]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[64724-64821]:Block[64805-64902]"
  }, {
    "left" : "tb.error(this);",
    "right" : "tb.error(this);",
    "info" : "ExpressionStatement[64754-64769]:ExpressionStatement[64835-64850]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[64790-64803]:ReturnStatement[64871-64884]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[64827-65057]:Block[64908-65138]"
  }, {
    "left" : "tb.pop();",
    "right" : "tb.pop();",
    "info" : "ExpressionStatement[64849-64858]:ExpressionStatement[64930-64939]"
  }, {
    "left" : "if (!tb.isFragmentParsing() && !tb.currentElement().nodeName().equals(\"frameset\"))",
    "right" : "if (!tb.isFragmentParsing() && !tb.currentElement().nodeName().equals(\"frameset\"))",
    "info" : "IfStatement[64879-65039]:IfStatement[64960-65120]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[64962-65039]:Block[65043-65120]"
  }, {
    "left" : "tb.transition(AfterFrameset);",
    "right" : "tb.transition(AfterFrameset);",
    "info" : "ExpressionStatement[64988-65017]:ExpressionStatement[65069-65098]"
  }, {
    "left" : "if (t.isEOF())",
    "right" : "if (t.isEOF())",
    "info" : "IfStatement[65077-65347]:IfStatement[65158-65428]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[65092-65264]:Block[65173-65345]"
  }, {
    "left" : "if (!tb.currentElement().nodeName().equals(\"html\"))",
    "right" : "if (!tb.currentElement().nodeName().equals(\"html\"))",
    "info" : "IfStatement[65110-65250]:IfStatement[65191-65331]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[65162-65250]:Block[65243-65331]"
  }, {
    "left" : "tb.error(this);",
    "right" : "tb.error(this);",
    "info" : "ExpressionStatement[65184-65199]:ExpressionStatement[65265-65280]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[65220-65232]:ReturnStatement[65301-65313]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[65270-65347]:Block[65351-65428]"
  }, {
    "left" : "tb.error(this);",
    "right" : "tb.error(this);",
    "info" : "ExpressionStatement[65288-65303]:ExpressionStatement[65369-65384]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[65320-65333]:ReturnStatement[65401-65414]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[65360-65372]:ReturnStatement[65441-65453]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[65418-65425]:PrimitiveType[65499-65506]"
  }, {
    "left" : "process",
    "right" : "process",
    "info" : "SimpleName[65426-65433]:SimpleName[65507-65514]"
  }, {
    "left" : "Token t",
    "right" : "Token t",
    "info" : "SingleVariableDeclaration[65434-65441]:SingleVariableDeclaration[65515-65522]"
  }, {
    "left" : "HtmlTreeBuilder tb",
    "right" : "HtmlTreeBuilder tb",
    "info" : "SingleVariableDeclaration[65443-65461]:SingleVariableDeclaration[65524-65542]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[65463-66350]:Block[65544-66431]"
  }, {
    "left" : "if (isWhitespace(t))",
    "right" : "if (isWhitespace(t))",
    "info" : "IfStatement[65477-66315]:IfStatement[65558-66396]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[65498-65557]:Block[65579-65638]"
  }, {
    "left" : "tb.insert(t.asCharacter());",
    "right" : "tb.insert(t.asCharacter());",
    "info" : "ExpressionStatement[65516-65543]:ExpressionStatement[65597-65624]"
  }, {
    "left" : "if (t.isComment())",
    "right" : "if (t.isComment())",
    "info" : "IfStatement[65563-66315]:IfStatement[65644-66396]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[65582-65639]:Block[65663-65720]"
  }, {
    "left" : "tb.insert(t.asComment());",
    "right" : "tb.insert(t.asComment());",
    "info" : "ExpressionStatement[65600-65625]:ExpressionStatement[65681-65706]"
  }, {
    "left" : "if (t.isDoctype())",
    "right" : "if (t.isDoctype())",
    "info" : "IfStatement[65645-66315]:IfStatement[65726-66396]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[65664-65741]:Block[65745-65822]"
  }, {
    "left" : "tb.error(this);",
    "right" : "tb.error(this);",
    "info" : "ExpressionStatement[65682-65697]:ExpressionStatement[65763-65778]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[65714-65727]:ReturnStatement[65795-65808]"
  }, {
    "left" : "if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\"))",
    "right" : "if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\"))",
    "info" : "IfStatement[65747-66315]:IfStatement[65828-66396]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[65813-65874]:Block[65894-65955]"
  }, {
    "left" : "return tb.process(t, InBody);",
    "right" : "return tb.process(t, InBody);",
    "info" : "ReturnStatement[65831-65860]:ReturnStatement[65912-65941]"
  }, {
    "left" : "if (t.isEndTag() && t.asEndTag().normalName().equals(\"html\"))",
    "right" : "if (t.isEndTag() && t.asEndTag().normalName().equals(\"html\"))",
    "info" : "IfStatement[65880-66315]:IfStatement[65961-66396]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[65942-66008]:Block[66023-66089]"
  }, {
    "left" : "tb.transition(AfterAfterFrameset);",
    "right" : "tb.transition(AfterAfterFrameset);",
    "info" : "ExpressionStatement[65960-65994]:ExpressionStatement[66041-66075]"
  }, {
    "left" : "if (t.isStartTag() && t.asStartTag().normalName().equals(\"noframes\"))",
    "right" : "if (t.isStartTag() && t.asStartTag().normalName().equals(\"noframes\"))",
    "info" : "IfStatement[66014-66315]:IfStatement[66095-66396]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[66084-66145]:Block[66165-66226]"
  }, {
    "left" : "return tb.process(t, InHead);",
    "right" : "return tb.process(t, InHead);",
    "info" : "ReturnStatement[66102-66131]:ReturnStatement[66183-66212]"
  }, {
    "left" : "if (t.isEOF())",
    "right" : "if (t.isEOF())",
    "info" : "IfStatement[66151-66315]:IfStatement[66232-66396]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[66166-66232]:Block[66247-66313]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[66238-66315]:Block[66319-66396]"
  }, {
    "left" : "tb.error(this);",
    "right" : "tb.error(this);",
    "info" : "ExpressionStatement[66256-66271]:ExpressionStatement[66337-66352]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[66288-66301]:ReturnStatement[66369-66382]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[66328-66340]:ReturnStatement[66409-66421]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[66387-66394]:PrimitiveType[66468-66475]"
  }, {
    "left" : "process",
    "right" : "process",
    "info" : "SimpleName[66395-66402]:SimpleName[66476-66483]"
  }, {
    "left" : "Token t",
    "right" : "Token t",
    "info" : "SingleVariableDeclaration[66403-66410]:SingleVariableDeclaration[66484-66491]"
  }, {
    "left" : "HtmlTreeBuilder tb",
    "right" : "HtmlTreeBuilder tb",
    "info" : "SingleVariableDeclaration[66412-66430]:SingleVariableDeclaration[66493-66511]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[66432-66929]:Block[66513-67010]"
  }, {
    "left" : "if (t.isComment())",
    "right" : "if (t.isComment())",
    "info" : "IfStatement[66446-66894]:IfStatement[66527-66975]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[66465-66522]:Block[66546-66603]"
  }, {
    "left" : "tb.insert(t.asComment());",
    "right" : "tb.insert(t.asComment());",
    "info" : "ExpressionStatement[66483-66508]:ExpressionStatement[66564-66589]"
  }, {
    "left" : "if (t.isDoctype() || isWhitespace(t) || (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")))",
    "right" : "if (t.isDoctype() || isWhitespace(t) || (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")))",
    "info" : "IfStatement[66528-66894]:IfStatement[66609-66975]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[66632-66693]:Block[66713-66774]"
  }, {
    "left" : "return tb.process(t, InBody);",
    "right" : "return tb.process(t, InBody);",
    "info" : "ReturnStatement[66650-66679]:ReturnStatement[66731-66760]"
  }, {
    "left" : "if (t.isEOF())",
    "right" : "if (t.isEOF())",
    "info" : "IfStatement[66699-66894]:IfStatement[66780-66975]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[66714-66764]:Block[66795-66845]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[66770-66894]:Block[66851-66975]"
  }, {
    "left" : "tb.error(this);",
    "right" : "tb.error(this);",
    "info" : "ExpressionStatement[66788-66803]:ExpressionStatement[66869-66884]"
  }, {
    "left" : "tb.transition(InBody);",
    "right" : "tb.transition(InBody);",
    "info" : "ExpressionStatement[66820-66842]:ExpressionStatement[66901-66923]"
  }, {
    "left" : "return tb.process(t);",
    "right" : "return tb.process(t);",
    "info" : "ReturnStatement[66859-66880]:ReturnStatement[66940-66961]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[66907-66919]:ReturnStatement[66988-67000]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[66970-66977]:PrimitiveType[67051-67058]"
  }, {
    "left" : "process",
    "right" : "process",
    "info" : "SimpleName[66978-66985]:SimpleName[67059-67066]"
  }, {
    "left" : "Token t",
    "right" : "Token t",
    "info" : "SingleVariableDeclaration[66986-66993]:SingleVariableDeclaration[67067-67074]"
  }, {
    "left" : "HtmlTreeBuilder tb",
    "right" : "HtmlTreeBuilder tb",
    "info" : "SingleVariableDeclaration[66995-67013]:SingleVariableDeclaration[67076-67094]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[67015-67602]:Block[67096-67683]"
  }, {
    "left" : "if (t.isComment())",
    "right" : "if (t.isComment())",
    "info" : "IfStatement[67029-67567]:IfStatement[67110-67648]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[67048-67105]:Block[67129-67186]"
  }, {
    "left" : "tb.insert(t.asComment());",
    "right" : "tb.insert(t.asComment());",
    "info" : "ExpressionStatement[67066-67091]:ExpressionStatement[67147-67172]"
  }, {
    "left" : "if (t.isDoctype() || isWhitespace(t) || (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")))",
    "right" : "if (t.isDoctype() || isWhitespace(t) || (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")))",
    "info" : "IfStatement[67111-67567]:IfStatement[67192-67648]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[67215-67276]:Block[67296-67357]"
  }, {
    "left" : "return tb.process(t, InBody);",
    "right" : "return tb.process(t, InBody);",
    "info" : "ReturnStatement[67233-67262]:ReturnStatement[67314-67343]"
  }, {
    "left" : "if (t.isEOF())",
    "right" : "if (t.isEOF())",
    "info" : "IfStatement[67282-67567]:IfStatement[67363-67648]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[67297-67347]:Block[67378-67428]"
  }, {
    "left" : "if (t.isStartTag() && t.asStartTag().normalName().equals(\"noframes\"))",
    "right" : "if (t.isStartTag() && t.asStartTag().normalName().equals(\"noframes\"))",
    "info" : "IfStatement[67353-67567]:IfStatement[67434-67648]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[67423-67484]:Block[67504-67565]"
  }, {
    "left" : "return tb.process(t, InHead);",
    "right" : "return tb.process(t, InHead);",
    "info" : "ReturnStatement[67441-67470]:ReturnStatement[67522-67551]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[67490-67567]:Block[67571-67648]"
  }, {
    "left" : "tb.error(this);",
    "right" : "tb.error(this);",
    "info" : "ExpressionStatement[67508-67523]:ExpressionStatement[67589-67604]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[67540-67553]:ReturnStatement[67621-67634]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[67580-67592]:ReturnStatement[67661-67673]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[67639-67646]:PrimitiveType[67720-67727]"
  }, {
    "left" : "process",
    "right" : "process",
    "info" : "SimpleName[67647-67654]:SimpleName[67728-67735]"
  }, {
    "left" : "Token t",
    "right" : "Token t",
    "info" : "SingleVariableDeclaration[67655-67662]:SingleVariableDeclaration[67736-67743]"
  }, {
    "left" : "HtmlTreeBuilder tb",
    "right" : "HtmlTreeBuilder tb",
    "info" : "SingleVariableDeclaration[67664-67682]:SingleVariableDeclaration[67745-67763]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[67684-67778]:Block[67765-67859]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[67698-67710]:ReturnStatement[67779-67791]"
  }, {
    "left" : "abstract",
    "right" : "abstract",
    "info" : "Modifier[67857-67865]:Modifier[67938-67946]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[67866-67873]:PrimitiveType[67947-67954]"
  }, {
    "left" : "process",
    "right" : "process",
    "info" : "SimpleName[67874-67881]:SimpleName[67955-67962]"
  }, {
    "left" : "Token t",
    "right" : "Token t",
    "info" : "SingleVariableDeclaration[67882-67889]:SingleVariableDeclaration[67963-67970]"
  }, {
    "left" : "HtmlTreeBuilder tb",
    "right" : "HtmlTreeBuilder tb",
    "info" : "SingleVariableDeclaration[67891-67909]:SingleVariableDeclaration[67972-67990]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[67917-67924]:Modifier[67998-68005]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[67925-67931]:Modifier[68006-68012]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[67932-67939]:PrimitiveType[68013-68020]"
  }, {
    "left" : "isWhitespace",
    "right" : "isWhitespace",
    "info" : "SimpleName[67940-67952]:SimpleName[68021-68033]"
  }, {
    "left" : "Token t",
    "right" : "Token t",
    "info" : "SingleVariableDeclaration[67953-67960]:SingleVariableDeclaration[68034-68041]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[67962-68124]:Block[68043-68205]"
  }, {
    "left" : "if (t.isCharacter())",
    "right" : "if (t.isCharacter())",
    "info" : "IfStatement[67972-68096]:IfStatement[68053-68177]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[67993-68096]:Block[68074-68177]"
  }, {
    "left" : "String data = t.asCharacter().getData();",
    "right" : "String data = t.asCharacter().getData();",
    "info" : "VariableDeclarationStatement[68007-68047]:VariableDeclarationStatement[68088-68128]"
  }, {
    "left" : "return isWhitespace(data);",
    "right" : "return isWhitespace(data);",
    "info" : "ReturnStatement[68060-68086]:ReturnStatement[68141-68167]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[68105-68118]:ReturnStatement[68186-68199]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[68130-68137]:Modifier[68211-68218]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[68138-68144]:Modifier[68219-68225]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[68145-68152]:PrimitiveType[68226-68233]"
  }, {
    "left" : "isWhitespace",
    "right" : "isWhitespace",
    "info" : "SimpleName[68153-68165]:SimpleName[68234-68246]"
  }, {
    "left" : "String data",
    "right" : "String data",
    "info" : "SingleVariableDeclaration[68166-68177]:SingleVariableDeclaration[68247-68258]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[68179-68453]:Block[68260-68534]"
  }, {
    "left" : "for (int i = 0; i < data.length(); i++)",
    "right" : "for (int i = 0; i < data.length(); i++)",
    "info" : "ForStatement[68263-68426]:ForStatement[68344-68507]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[68303-68426]:Block[68384-68507]"
  }, {
    "left" : "char c = data.charAt(i);",
    "right" : "char c = data.charAt(i);",
    "info" : "VariableDeclarationStatement[68317-68341]:VariableDeclarationStatement[68398-68422]"
  }, {
    "left" : "if (!StringUtil.isWhitespace(c))",
    "right" : "if (!StringUtil.isWhitespace(c))",
    "info" : "IfStatement[68354-68416]:IfStatement[68435-68497]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[68403-68416]:ReturnStatement[68484-68497]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[68435-68447]:ReturnStatement[68516-68528]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[68459-68466]:Modifier[68540-68547]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[68467-68473]:Modifier[68548-68554]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[68474-68478]:PrimitiveType[68555-68559]"
  }, {
    "left" : "handleRcData",
    "right" : "handleRcData",
    "info" : "SimpleName[68479-68491]:SimpleName[68560-68572]"
  }, {
    "left" : "Token.StartTag startTag",
    "right" : "Token.StartTag startTag",
    "info" : "SingleVariableDeclaration[68492-68515]:SingleVariableDeclaration[68573-68596]"
  }, {
    "left" : "HtmlTreeBuilder tb",
    "right" : "HtmlTreeBuilder tb",
    "info" : "SingleVariableDeclaration[68517-68535]:SingleVariableDeclaration[68598-68616]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[68537-68690]:Block[68618-68771]"
  }, {
    "left" : "tb.tokeniser.transition(TokeniserState.Rcdata);",
    "right" : "tb.tokeniser.transition(TokeniserState.Rcdata);",
    "info" : "ExpressionStatement[68547-68594]:ExpressionStatement[68628-68675]"
  }, {
    "left" : "tb.markInsertionMode();",
    "right" : "tb.markInsertionMode();",
    "info" : "ExpressionStatement[68603-68626]:ExpressionStatement[68684-68707]"
  }, {
    "left" : "tb.transition(Text);",
    "right" : "tb.transition(Text);",
    "info" : "ExpressionStatement[68635-68655]:ExpressionStatement[68716-68736]"
  }, {
    "left" : "tb.insert(startTag);",
    "right" : "tb.insert(startTag);",
    "info" : "ExpressionStatement[68664-68684]:ExpressionStatement[68745-68765]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[68696-68703]:Modifier[68777-68784]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[68704-68710]:Modifier[68785-68791]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[68711-68715]:PrimitiveType[68792-68796]"
  }, {
    "left" : "handleRawtext",
    "right" : "handleRawtext",
    "info" : "SimpleName[68716-68729]:SimpleName[68797-68810]"
  }, {
    "left" : "Token.StartTag startTag",
    "right" : "Token.StartTag startTag",
    "info" : "SingleVariableDeclaration[68730-68753]:SingleVariableDeclaration[68811-68834]"
  }, {
    "left" : "HtmlTreeBuilder tb",
    "right" : "HtmlTreeBuilder tb",
    "info" : "SingleVariableDeclaration[68755-68773]:SingleVariableDeclaration[68836-68854]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[68775-68929]:Block[68856-69010]"
  }, {
    "left" : "tb.tokeniser.transition(TokeniserState.Rawtext);",
    "right" : "tb.tokeniser.transition(TokeniserState.Rawtext);",
    "info" : "ExpressionStatement[68785-68833]:ExpressionStatement[68866-68914]"
  }, {
    "left" : "tb.markInsertionMode();",
    "right" : "tb.markInsertionMode();",
    "info" : "ExpressionStatement[68842-68865]:ExpressionStatement[68923-68946]"
  }, {
    "left" : "tb.transition(Text);",
    "right" : "tb.transition(Text);",
    "info" : "ExpressionStatement[68874-68894]:ExpressionStatement[68955-68975]"
  }, {
    "left" : "tb.insert(startTag);",
    "right" : "tb.insert(startTag);",
    "info" : "ExpressionStatement[68903-68923]:ExpressionStatement[68984-69004]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[69221-69227]:Modifier[69302-69308]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[69228-69233]:Modifier[69309-69314]"
  }, {
    "left" : "class",
    "right" : "class",
    "info" : "TYPE_DECLARATION_KIND[69234-69239]:TYPE_DECLARATION_KIND[69315-69320]"
  } ]
}