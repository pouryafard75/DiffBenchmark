{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "NonLinearConjugateGradientOptimizer",
      "right" : "NonLinearConjugateGradientOptimizer",
      "info" : "TypeDeclaration[1771-15269]:TypeDeclaration[1771-15288]"
    }, {
      "left" : "private final Formula updateFormula;",
      "right" : "private final Formula updateFormula;",
      "info" : "FieldDeclaration[2324-2410]:FieldDeclaration[2324-2410]"
    }, {
      "left" : "private final Preconditioner preconditioner;",
      "right" : "private final Preconditioner preconditioner;",
      "info" : "FieldDeclaration[2415-2500]:FieldDeclaration[2415-2500]"
    }, {
      "left" : "private final UnivariateSolver solver;",
      "right" : "private final UnivariateSolver solver;",
      "info" : "FieldDeclaration[2505-2602]:FieldDeclaration[2505-2602]"
    }, {
      "left" : "private double initialStep = 1;",
      "right" : "private double initialStep = 1;",
      "info" : "FieldDeclaration[2607-2706]:FieldDeclaration[2607-2706]"
    }, {
      "left" : "public NonLinearConjugateGradientOptimizer(final Formula updateFormula,\n                                               ConvergenceChecker<PointValuePair> checker)",
      "right" : "public NonLinearConjugateGradientOptimizer(final Formula updateFormula,\n                                               ConvergenceChecker<PointValuePair> checker)",
      "info" : "MethodDeclaration[2712-3376]:MethodDeclaration[2712-3376]"
    }, {
      "left" : "enum : Formula",
      "right" : "enum : Formula",
      "info" : "EnumDeclaration[3382-4255]:EnumDeclaration[3382-4255]"
    }, {
      "left" : "BracketingStep",
      "right" : "BracketingStep",
      "info" : "TypeDeclaration[4261-5055]:TypeDeclaration[4261-5055]"
    }, {
      "left" : "private final double initialStep;",
      "right" : "private final double initialStep;",
      "info" : "FieldDeclaration[4622-4684]:FieldDeclaration[4622-4684]"
    }, {
      "left" : "public BracketingStep(double step)",
      "right" : "public BracketingStep(double step)",
      "info" : "MethodDeclaration[4694-4856]:MethodDeclaration[4694-4856]"
    }, {
      "left" : "public double getBracketingStep()",
      "right" : "public double getBracketingStep()",
      "info" : "MethodDeclaration[4866-5049]:MethodDeclaration[4866-5049]"
    }, {
      "left" : "public NonLinearConjugateGradientOptimizer(final Formula updateFormula,\n                                               ConvergenceChecker<PointValuePair> checker,\n                                               final UnivariateSolver lineSearchSolver)",
      "right" : "public NonLinearConjugateGradientOptimizer(final Formula updateFormula,\n                                               ConvergenceChecker<PointValuePair> checker,\n                                               final UnivariateSolver lineSearchSolver)",
      "info" : "MethodDeclaration[5061-5827]:MethodDeclaration[5061-5827]"
    }, {
      "left" : "public NonLinearConjugateGradientOptimizer(final Formula updateFormula,\n                                               ConvergenceChecker<PointValuePair> checker,\n                                               final UnivariateSolver lineSearchSolver,\n                                               final Preconditioner preconditioner)",
      "right" : "public NonLinearConjugateGradientOptimizer(final Formula updateFormula,\n                                               ConvergenceChecker<PointValuePair> checker,\n                                               final UnivariateSolver lineSearchSolver,\n                                               final Preconditioner preconditioner)",
      "info" : "MethodDeclaration[5833-6692]:MethodDeclaration[5833-6692]"
    }, {
      "left" : "public PointValuePair optimize(OptimizationData... optData)\n        throws TooManyEvaluationsException",
      "right" : "public PointValuePair optimize(OptimizationData... optData)\n        throws TooManyEvaluationsException",
      "info" : "MethodDeclaration[6698-7429]:MethodDeclaration[6698-7429]"
    }, {
      "left" : "protected PointValuePair doOptimize()",
      "right" : "protected PointValuePair doOptimize()",
      "info" : "MethodDeclaration[7435-11098]:MethodDeclaration[7435-11117]"
    }, {
      "left" : "protected void parseOptimizationData(OptimizationData... optData)",
      "right" : "protected void parseOptimizationData(OptimizationData... optData)",
      "info" : "MethodDeclaration[11104-12057]:MethodDeclaration[11123-12076]"
    }, {
      "left" : "private double findUpperBound(final UnivariateFunction f,\n                                  final double a, final double h)",
      "right" : "private double findUpperBound(final UnivariateFunction f,\n                                  final double a, final double h)",
      "info" : "MethodDeclaration[12063-12970]:MethodDeclaration[12082-12989]"
    }, {
      "left" : "IdentityPreconditioner",
      "right" : "IdentityPreconditioner",
      "info" : "TypeDeclaration[12976-13236]:TypeDeclaration[12995-13255]"
    }, {
      "left" : "public double[] precondition(double[] variables, double[] r)",
      "right" : "public double[] precondition(double[] variables, double[] r)",
      "info" : "MethodDeclaration[13099-13230]:MethodDeclaration[13118-13249]"
    }, {
      "left" : "LineSearchFunction",
      "right" : "LineSearchFunction",
      "info" : "TypeDeclaration[13242-14893]:TypeDeclaration[13261-14912]"
    }, {
      "left" : "private final double[] currentPoint;",
      "right" : "private final double[] currentPoint;",
      "info" : "FieldDeclaration[13709-13775]:FieldDeclaration[13728-13794]"
    }, {
      "left" : "private final double[] searchDirection;",
      "right" : "private final double[] searchDirection;",
      "info" : "FieldDeclaration[13784-13856]:FieldDeclaration[13803-13875]"
    }, {
      "left" : "public LineSearchFunction(double[] point,\n                                  double[] direction)",
      "right" : "public LineSearchFunction(double[] point,\n                                  double[] direction)",
      "info" : "MethodDeclaration[13866-14173]:MethodDeclaration[13885-14192]"
    }, {
      "left" : "public double value(double x)",
      "right" : "public double value(double x)",
      "info" : "MethodDeclaration[14183-14887]:MethodDeclaration[14202-14906]"
    }, {
      "left" : "private void checkParameters()",
      "right" : "private void checkParameters()",
      "info" : "MethodDeclaration[14899-15267]:MethodDeclaration[14918-15286]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3243-3376]:Block[3243-3376]"
    }, {
      "left" : "this(updateFormula,\n             checker,\n             new BrentSolver(),\n             new IdentityPreconditioner());",
      "right" : "this(updateFormula,\n             checker,\n             new BrentSolver(),\n             new IdentityPreconditioner());",
      "info" : "ConstructorInvocation[3253-3370]:ConstructorInvocation[3253-3370]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4813-4856]:Block[4813-4856]"
    }, {
      "left" : "initialStep = step;",
      "right" : "initialStep = step;",
      "info" : "ExpressionStatement[4827-4846]:ExpressionStatement[4827-4846]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5006-5049]:Block[5006-5049]"
    }, {
      "left" : "return initialStep;",
      "right" : "return initialStep;",
      "info" : "ReturnStatement[5020-5039]:ReturnStatement[5020-5039]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5695-5827]:Block[5695-5827]"
    }, {
      "left" : "this(updateFormula,\n             checker,\n             lineSearchSolver,\n             new IdentityPreconditioner());",
      "right" : "this(updateFormula,\n             checker,\n             lineSearchSolver,\n             new IdentityPreconditioner());",
      "info" : "ConstructorInvocation[5705-5821]:ConstructorInvocation[5705-5821]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6510-6692]:Block[6510-6692]"
    }, {
      "left" : "super(checker);",
      "right" : "super(checker);",
      "info" : "SuperConstructorInvocation[6520-6535]:SuperConstructorInvocation[6520-6535]"
    }, {
      "left" : "this.updateFormula = updateFormula;",
      "right" : "this.updateFormula = updateFormula;",
      "info" : "ExpressionStatement[6545-6580]:ExpressionStatement[6545-6580]"
    }, {
      "left" : "solver = lineSearchSolver;",
      "right" : "solver = lineSearchSolver;",
      "info" : "ExpressionStatement[6589-6615]:ExpressionStatement[6589-6615]"
    }, {
      "left" : "this.preconditioner = preconditioner;",
      "right" : "this.preconditioner = preconditioner;",
      "info" : "ExpressionStatement[6624-6661]:ExpressionStatement[6624-6661]"
    }, {
      "left" : "initialStep = 1;",
      "right" : "initialStep = 1;",
      "info" : "ExpressionStatement[6670-6686]:ExpressionStatement[6670-6686]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7328-7429]:Block[7328-7429]"
    }, {
      "left" : "return super.optimize(optData);",
      "right" : "return super.optimize(optData);",
      "info" : "ReturnStatement[7392-7423]:ReturnStatement[7392-7423]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7512-11098]:Block[7512-11117]"
    }, {
      "left" : "final ConvergenceChecker<PointValuePair> checker = getConvergenceChecker();",
      "right" : "final ConvergenceChecker<PointValuePair> checker = getConvergenceChecker();",
      "info" : "VariableDeclarationStatement[7522-7597]:VariableDeclarationStatement[7522-7597]"
    }, {
      "left" : "final double[] point = getStartPoint();",
      "right" : "final double[] point = getStartPoint();",
      "info" : "VariableDeclarationStatement[7606-7645]:VariableDeclarationStatement[7606-7645]"
    }, {
      "left" : "final GoalType goal = getGoalType();",
      "right" : "final GoalType goal = getGoalType();",
      "info" : "VariableDeclarationStatement[7654-7690]:VariableDeclarationStatement[7654-7690]"
    }, {
      "left" : "final int n = point.length;",
      "right" : "final int n = point.length;",
      "info" : "VariableDeclarationStatement[7699-7726]:VariableDeclarationStatement[7699-7726]"
    }, {
      "left" : "double[] r = computeObjectiveGradient(point);",
      "right" : "double[] r = computeObjectiveGradient(point);",
      "info" : "VariableDeclarationStatement[7735-7780]:VariableDeclarationStatement[7735-7780]"
    }, {
      "left" : "if (goal == GoalType.MINIMIZE)",
      "right" : "if (goal == GoalType.MINIMIZE)",
      "info" : "IfStatement[7789-7917]:IfStatement[7789-7917]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7820-7917]:Block[7820-7917]"
    }, {
      "left" : "for (int i = 0; i < n; i++)",
      "right" : "for (int i = 0; i < n; i++)",
      "info" : "ForStatement[7834-7907]:ForStatement[7834-7907]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7862-7907]:Block[7862-7907]"
    }, {
      "left" : "r[i] = -r[i];",
      "right" : "r[i] = -r[i];",
      "info" : "ExpressionStatement[7880-7893]:ExpressionStatement[7880-7893]"
    }, {
      "left" : "double[] steepestDescent = preconditioner.precondition(point, r);",
      "right" : "double[] steepestDescent = preconditioner.precondition(point, r);",
      "info" : "VariableDeclarationStatement[7964-8029]:VariableDeclarationStatement[7964-8029]"
    }, {
      "left" : "double[] searchDirection = steepestDescent.clone();",
      "right" : "double[] searchDirection = steepestDescent.clone();",
      "info" : "VariableDeclarationStatement[8038-8089]:VariableDeclarationStatement[8038-8089]"
    }, {
      "left" : "double delta = 0;",
      "right" : "double delta = 0;",
      "info" : "VariableDeclarationStatement[8099-8116]:VariableDeclarationStatement[8099-8116]"
    }, {
      "left" : "for (int i = 0; i < n; ++i)",
      "right" : "for (int i = 0; i < n; ++i)",
      "info" : "ForStatement[8125-8212]:ForStatement[8125-8212]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8153-8212]:Block[8153-8212]"
    }, {
      "left" : "delta += r[i] * searchDirection[i];",
      "right" : "delta += r[i] * searchDirection[i];",
      "info" : "ExpressionStatement[8167-8202]:ExpressionStatement[8167-8202]"
    }, {
      "left" : "PointValuePair current = null;",
      "right" : "PointValuePair current = null;",
      "info" : "VariableDeclarationStatement[8222-8252]:VariableDeclarationStatement[8222-8252]"
    }, {
      "left" : "int maxEval = getMaxEvaluations();",
      "right" : "int maxEval = getMaxEvaluations();",
      "info" : "VariableDeclarationStatement[8283-8317]:VariableDeclarationStatement[8261-8295]"
    }, {
      "left" : "while (true)",
      "right" : "while (true)",
      "info" : "WhileStatement[8326-11092]:WhileStatement[8304-11111]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8339-11092]:Block[8317-11111]"
    }, {
      "left" : "++iter;",
      "right" : "incrementIterationCount();",
      "info" : "ExpressionStatement[8353-8360]:ExpressionStatement[8331-8357]"
    }, {
      "left" : "final double objective = computeObjectiveValue(point);",
      "right" : "final double objective = computeObjectiveValue(point);",
      "info" : "VariableDeclarationStatement[8374-8428]:VariableDeclarationStatement[8371-8425]"
    }, {
      "left" : "PointValuePair previous = current;",
      "right" : "PointValuePair previous = current;",
      "info" : "VariableDeclarationStatement[8441-8475]:VariableDeclarationStatement[8438-8472]"
    }, {
      "left" : "current = new PointValuePair(point, objective);",
      "right" : "current = new PointValuePair(point, objective);",
      "info" : "ExpressionStatement[8488-8535]:ExpressionStatement[8485-8532]"
    }, {
      "left" : "if (previous != null)",
      "right" : "if (previous != null)",
      "info" : "IfStatement[8548-8754]:IfStatement[8545-8762]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8570-8754]:Block[8567-8762]"
    }, {
      "left" : "if (checker.converged(iter, previous, current))",
      "right" : "if (checker.converged(getIterations(), previous, current))",
      "info" : "IfStatement[8588-8740]:IfStatement[8585-8748]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8636-8740]:Block[8644-8748]"
    }, {
      "left" : "return current;",
      "right" : "return current;",
      "info" : "ReturnStatement[8707-8722]:ReturnStatement[8715-8730]"
    }, {
      "left" : "final UnivariateFunction lsf = new LineSearchFunction(point, searchDirection);",
      "right" : "final UnivariateFunction lsf = new LineSearchFunction(point, searchDirection);",
      "info" : "VariableDeclarationStatement[8830-8908]:VariableDeclarationStatement[8838-8916]"
    }, {
      "left" : "final double uB = findUpperBound(lsf, 0, initialStep);",
      "right" : "final double uB = findUpperBound(lsf, 0, initialStep);",
      "info" : "VariableDeclarationStatement[8921-8975]:VariableDeclarationStatement[8929-8983]"
    }, {
      "left" : "final double step = solver.solve(maxEval, lsf, 0, uB, 1e-15);",
      "right" : "final double step = solver.solve(maxEval, lsf, 0, uB, 1e-15);",
      "info" : "VariableDeclarationStatement[9185-9246]:VariableDeclarationStatement[9193-9254]"
    }, {
      "left" : "maxEval -= solver.getEvaluations();",
      "right" : "maxEval -= solver.getEvaluations();",
      "info" : "ExpressionStatement[9259-9294]:ExpressionStatement[9267-9302]"
    }, {
      "left" : "for (int i = 0; i < point.length; ++i)",
      "right" : "for (int i = 0; i < point.length; ++i)",
      "info" : "ForStatement[9376-9485]:ForStatement[9384-9493]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9415-9485]:Block[9423-9493]"
    }, {
      "left" : "point[i] += step * searchDirection[i];",
      "right" : "point[i] += step * searchDirection[i];",
      "info" : "ExpressionStatement[9433-9471]:ExpressionStatement[9441-9479]"
    }, {
      "left" : "r = computeObjectiveGradient(point);",
      "right" : "r = computeObjectiveGradient(point);",
      "info" : "ExpressionStatement[9499-9535]:ExpressionStatement[9507-9543]"
    }, {
      "left" : "if (goal == GoalType.MINIMIZE)",
      "right" : "if (goal == GoalType.MINIMIZE)",
      "info" : "IfStatement[9548-9692]:IfStatement[9556-9700]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9579-9692]:Block[9587-9700]"
    }, {
      "left" : "for (int i = 0; i < n; ++i)",
      "right" : "for (int i = 0; i < n; ++i)",
      "info" : "ForStatement[9597-9678]:ForStatement[9605-9686]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9625-9678]:Block[9633-9686]"
    }, {
      "left" : "r[i] = -r[i];",
      "right" : "r[i] = -r[i];",
      "info" : "ExpressionStatement[9647-9660]:ExpressionStatement[9655-9668]"
    }, {
      "left" : "final double deltaOld = delta;",
      "right" : "final double deltaOld = delta;",
      "info" : "VariableDeclarationStatement[9735-9765]:VariableDeclarationStatement[9743-9773]"
    }, {
      "left" : "final double[] newSteepestDescent = preconditioner.precondition(point, r);",
      "right" : "final double[] newSteepestDescent = preconditioner.precondition(point, r);",
      "info" : "VariableDeclarationStatement[9778-9852]:VariableDeclarationStatement[9786-9860]"
    }, {
      "left" : "delta = 0;",
      "right" : "delta = 0;",
      "info" : "ExpressionStatement[9865-9875]:ExpressionStatement[9873-9883]"
    }, {
      "left" : "for (int i = 0; i < n; ++i)",
      "right" : "for (int i = 0; i < n; ++i)",
      "info" : "ForStatement[9888-9986]:ForStatement[9896-9994]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9916-9986]:Block[9924-9994]"
    }, {
      "left" : "delta += r[i] * newSteepestDescent[i];",
      "right" : "delta += r[i] * newSteepestDescent[i];",
      "info" : "ExpressionStatement[9934-9972]:ExpressionStatement[9942-9980]"
    }, {
      "left" : "final double beta;",
      "right" : "final double beta;",
      "info" : "VariableDeclarationStatement[10000-10018]:VariableDeclarationStatement[10008-10026]"
    }, {
      "left" : "switch (updateFormula) {\n            case FLETCHER_REEVES:\n                beta = delta / deltaOld;\n                break;\n            case POLAK_RIBIERE:\n                double deltaMid = 0;\n                for (int i = 0; i < r.length; ++i) {\n                    deltaMid += r[i] * steepestDescent[i];\n                }\n                beta = (delta - deltaMid) / deltaOld;\n                break;\n            default:\n                // Should never happen.\n                throw new MathInternalError();\n            }",
      "right" : "switch (updateFormula) {\n            case FLETCHER_REEVES:\n                beta = delta / deltaOld;\n                break;\n            case POLAK_RIBIERE:\n                double deltaMid = 0;\n                for (int i = 0; i < r.length; ++i) {\n                    deltaMid += r[i] * steepestDescent[i];\n                }\n                beta = (delta - deltaMid) / deltaOld;\n                break;\n            default:\n                // Should never happen.\n                throw new MathInternalError();\n            }",
      "info" : "SwitchStatement[10031-10551]:SwitchStatement[10039-10559]"
    }, {
      "left" : "case FLETCHER_REEVES:",
      "right" : "case FLETCHER_REEVES:",
      "info" : "SwitchCase[10068-10089]:SwitchCase[10076-10097]"
    }, {
      "left" : "beta = delta / deltaOld;",
      "right" : "beta = delta / deltaOld;",
      "info" : "ExpressionStatement[10106-10130]:ExpressionStatement[10114-10138]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[10147-10153]:BreakStatement[10155-10161]"
    }, {
      "left" : "case POLAK_RIBIERE:",
      "right" : "case POLAK_RIBIERE:",
      "info" : "SwitchCase[10166-10185]:SwitchCase[10174-10193]"
    }, {
      "left" : "double deltaMid = 0;",
      "right" : "double deltaMid = 0;",
      "info" : "VariableDeclarationStatement[10202-10222]:VariableDeclarationStatement[10210-10230]"
    }, {
      "left" : "for (int i = 0; i < r.length; ++i)",
      "right" : "for (int i = 0; i < r.length; ++i)",
      "info" : "ForStatement[10239-10352]:ForStatement[10247-10360]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10274-10352]:Block[10282-10360]"
    }, {
      "left" : "deltaMid += r[i] * steepestDescent[i];",
      "right" : "deltaMid += r[i] * steepestDescent[i];",
      "info" : "ExpressionStatement[10296-10334]:ExpressionStatement[10304-10342]"
    }, {
      "left" : "beta = (delta - deltaMid) / deltaOld;",
      "right" : "beta = (delta - deltaMid) / deltaOld;",
      "info" : "ExpressionStatement[10369-10406]:ExpressionStatement[10377-10414]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[10423-10429]:BreakStatement[10431-10437]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[10442-10450]:SwitchCase[10450-10458]"
    }, {
      "left" : "throw new MathInternalError();",
      "right" : "throw new MathInternalError();",
      "info" : "ThrowStatement[10507-10537]:ThrowStatement[10515-10545]"
    }, {
      "left" : "steepestDescent = newSteepestDescent;",
      "right" : "steepestDescent = newSteepestDescent;",
      "info" : "ExpressionStatement[10564-10601]:ExpressionStatement[10572-10609]"
    }, {
      "left" : "if (iter % n == 0 ||\n                beta < 0)",
      "right" : "if (getIterations() % n == 0 ||\n                beta < 0)",
      "info" : "IfStatement[10666-11082]:IfStatement[10674-11101]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10713-10849]:Block[10732-10868]"
    }, {
      "left" : "searchDirection = steepestDescent.clone();",
      "right" : "searchDirection = steepestDescent.clone();",
      "info" : "ExpressionStatement[10793-10835]:ExpressionStatement[10812-10854]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10855-11082]:Block[10874-11101]"
    }, {
      "left" : "for (int i = 0; i < n; ++i)",
      "right" : "for (int i = 0; i < n; ++i)",
      "info" : "ForStatement[10932-11068]:ForStatement[10951-11087]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10960-11068]:Block[10979-11087]"
    }, {
      "left" : "searchDirection[i] = steepestDescent[i] + beta * searchDirection[i];",
      "right" : "searchDirection[i] = steepestDescent[i] + beta * searchDirection[i];",
      "info" : "ExpressionStatement[10982-11050]:ExpressionStatement[11001-11069]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11464-12057]:Block[11483-12076]"
    }, {
      "left" : "super.parseOptimizationData(optData);",
      "right" : "super.parseOptimizationData(optData);",
      "info" : "ExpressionStatement[11528-11565]:ExpressionStatement[11547-11584]"
    }, {
      "left" : "for (OptimizationData data : optData)",
      "right" : "for (OptimizationData data : optData)",
      "info" : "EnhancedForStatement[11696-12023]:EnhancedForStatement[11715-12042]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11734-12023]:Block[11753-12042]"
    }, {
      "left" : "if  (data instanceof BracketingStep)",
      "right" : "if  (data instanceof BracketingStep)",
      "info" : "IfStatement[11748-12013]:IfStatement[11767-12032]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11785-12013]:Block[11804-12032]"
    }, {
      "left" : "initialStep = ((BracketingStep) data).getBracketingStep();",
      "right" : "initialStep = ((BracketingStep) data).getBracketingStep();",
      "info" : "ExpressionStatement[11803-11861]:ExpressionStatement[11822-11880]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[11993-11999]:BreakStatement[12012-12018]"
    }, {
      "left" : "checkParameters();",
      "right" : "checkParameters();",
      "info" : "ExpressionStatement[12033-12051]:ExpressionStatement[12052-12070]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12556-12970]:Block[12575-12989]"
    }, {
      "left" : "final double yA = f.value(a);",
      "right" : "final double yA = f.value(a);",
      "info" : "VariableDeclarationStatement[12566-12595]:VariableDeclarationStatement[12585-12614]"
    }, {
      "left" : "double yB = yA;",
      "right" : "double yB = yA;",
      "info" : "VariableDeclarationStatement[12604-12619]:VariableDeclarationStatement[12623-12638]"
    }, {
      "left" : "for (double step = h; step < Double.MAX_VALUE; step *= FastMath.max(2, yA / yB))",
      "right" : "for (double step = h; step < Double.MAX_VALUE; step *= FastMath.max(2, yA / yB))",
      "info" : "ForStatement[12628-12860]:ForStatement[12647-12879]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12709-12860]:Block[12728-12879]"
    }, {
      "left" : "final double b = a + step;",
      "right" : "final double b = a + step;",
      "info" : "VariableDeclarationStatement[12723-12749]:VariableDeclarationStatement[12742-12768]"
    }, {
      "left" : "yB = f.value(b);",
      "right" : "yB = f.value(b);",
      "info" : "ExpressionStatement[12762-12778]:ExpressionStatement[12781-12797]"
    }, {
      "left" : "if (yA * yB <= 0)",
      "right" : "if (yA * yB <= 0)",
      "info" : "IfStatement[12791-12850]:IfStatement[12810-12869]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12809-12850]:Block[12828-12869]"
    }, {
      "left" : "return b;",
      "right" : "return b;",
      "info" : "ReturnStatement[12827-12836]:ReturnStatement[12846-12855]"
    }, {
      "left" : "throw new MathIllegalStateException(LocalizedFormats.UNABLE_TO_BRACKET_OPTIMUM_IN_LINE_SEARCH);",
      "right" : "throw new MathIllegalStateException(LocalizedFormats.UNABLE_TO_BRACKET_OPTIMUM_IN_LINE_SEARCH);",
      "info" : "ThrowStatement[12869-12964]:ThrowStatement[12888-12983]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13189-13230]:Block[13208-13249]"
    }, {
      "left" : "return r.clone();",
      "right" : "return r.clone();",
      "info" : "ReturnStatement[13203-13220]:ReturnStatement[13222-13239]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14071-14173]:Block[14090-14192]"
    }, {
      "left" : "currentPoint = point.clone();",
      "right" : "currentPoint = point.clone();",
      "info" : "ExpressionStatement[14085-14114]:ExpressionStatement[14104-14133]"
    }, {
      "left" : "searchDirection = direction.clone();",
      "right" : "searchDirection = direction.clone();",
      "info" : "ExpressionStatement[14127-14163]:ExpressionStatement[14146-14182]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14242-14887]:Block[14261-14906]"
    }, {
      "left" : "final double[] shiftedPoint = currentPoint.clone();",
      "right" : "final double[] shiftedPoint = currentPoint.clone();",
      "info" : "VariableDeclarationStatement[14309-14360]:VariableDeclarationStatement[14328-14379]"
    }, {
      "left" : "for (int i = 0; i < shiftedPoint.length; ++i)",
      "right" : "for (int i = 0; i < shiftedPoint.length; ++i)",
      "info" : "ForStatement[14373-14493]:ForStatement[14392-14512]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14419-14493]:Block[14438-14512]"
    }, {
      "left" : "shiftedPoint[i] += x * searchDirection[i];",
      "right" : "shiftedPoint[i] += x * searchDirection[i];",
      "info" : "ExpressionStatement[14437-14479]:ExpressionStatement[14456-14498]"
    }, {
      "left" : "final double[] gradient = computeObjectiveGradient(shiftedPoint);",
      "right" : "final double[] gradient = computeObjectiveGradient(shiftedPoint);",
      "info" : "VariableDeclarationStatement[14557-14622]:VariableDeclarationStatement[14576-14641]"
    }, {
      "left" : "double dotProduct = 0;",
      "right" : "double dotProduct = 0;",
      "info" : "VariableDeclarationStatement[14689-14711]:VariableDeclarationStatement[14708-14730]"
    }, {
      "left" : "for (int i = 0; i < gradient.length; ++i)",
      "right" : "for (int i = 0; i < gradient.length; ++i)",
      "info" : "ForStatement[14724-14845]:ForStatement[14743-14864]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14766-14845]:Block[14785-14864]"
    }, {
      "left" : "dotProduct += gradient[i] * searchDirection[i];",
      "right" : "dotProduct += gradient[i] * searchDirection[i];",
      "info" : "ExpressionStatement[14784-14831]:ExpressionStatement[14803-14850]"
    }, {
      "left" : "return dotProduct;",
      "right" : "return dotProduct;",
      "info" : "ReturnStatement[14859-14877]:ReturnStatement[14878-14896]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15086-15267]:Block[15105-15286]"
    }, {
      "left" : "if (getLowerBound() != null ||\n            getUpperBound() != null)",
      "right" : "if (getLowerBound() != null ||\n            getUpperBound() != null)",
      "info" : "IfStatement[15096-15261]:IfStatement[15115-15280]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15164-15261]:Block[15183-15280]"
    }, {
      "left" : "throw new MathUnsupportedOperationException(LocalizedFormats.CONSTRAINT);",
      "right" : "throw new MathUnsupportedOperationException(LocalizedFormats.CONSTRAINT);",
      "info" : "ThrowStatement[15178-15251]:ThrowStatement[15197-15270]"
    } ]
  },
  "interFileMappings" : { }
}