{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "public void onChange(ChangeEvent event)",
      "right" : "public void onChange(ChangeEvent event)",
      "info" : "MethodDeclaration[3293-3400]:MethodDeclaration[3339-3446]"
    }, {
      "left" : "public void onKeyUp(KeyUpEvent event)",
      "right" : "public void onKeyUp(KeyUpEvent event)",
      "info" : "MethodDeclaration[3478-3851]:MethodDeclaration[3524-3897]"
    }, {
      "left" : "public void onKeyUp(KeyUpEvent event)",
      "right" : "public void onKeyUp(KeyUpEvent event)",
      "info" : "MethodDeclaration[3963-4389]:MethodDeclaration[4009-4435]"
    }, {
      "left" : "public void onValueChange(ValueChangeEvent<Boolean> event)",
      "right" : "public void onValueChange(ValueChangeEvent<Boolean> event)",
      "info" : "MethodDeclaration[6930-7094]:MethodDeclaration[7000-7164]"
    }, {
      "left" : "public void onClick(ClickEvent event)",
      "right" : "public void onClick(ClickEvent event)",
      "info" : "MethodDeclaration[8427-8561]:MethodDeclaration[8706-8840]"
    }, {
      "left" : "public void onClick(ClickEvent event)",
      "right" : "public void onClick(ClickEvent event)",
      "info" : "MethodDeclaration[8823-8962]:MethodDeclaration[9102-9241]"
    }, {
      "left" : "public void focus()",
      "right" : "public void focus()",
      "info" : "MethodDeclaration[9289-9354]:MethodDeclaration[9568-9633]"
    }, {
      "left" : "private TextBox makeInputBox(final String option)",
      "right" : "private TextBox makeInputBox(final String option)",
      "info" : "MethodDeclaration[9362-10192]:MethodDeclaration[9641-10471]"
    }, {
      "left" : "public void onNativeEvent(NativeEvent event)",
      "right" : "public void onNativeEvent(NativeEvent event)",
      "info" : "MethodDeclaration[9633-10152]:MethodDeclaration[9912-10431]"
    }, {
      "left" : "public void execute()",
      "right" : "public void execute()",
      "info" : "MethodDeclaration[9805-10125]:MethodDeclaration[10084-10404]"
    }, {
      "left" : "private TriStateCheckBox makeTriStateCheckBox(String label, final String option)",
      "right" : "private TriStateCheckBox makeTriStateCheckBox(String label, final String option)",
      "info" : "MethodDeclaration[10200-11036]:MethodDeclaration[10479-11315]"
    }, {
      "left" : "public void onValueChange(ValueChangeEvent<State> event)",
      "right" : "public void onValueChange(ValueChangeEvent<State> event)",
      "info" : "MethodDeclaration[10477-10992]:MethodDeclaration[10756-11271]"
    }, {
      "left" : "private boolean has(String key)",
      "right" : "private boolean has(String key)",
      "info" : "MethodDeclaration[11044-11130]:MethodDeclaration[11323-11409]"
    }, {
      "left" : "public String get(String key)",
      "right" : "public String get(String key)",
      "info" : "MethodDeclaration[11138-11214]:MethodDeclaration[11417-11493]"
    }, {
      "left" : "private boolean getBoolean(String key)",
      "right" : "private boolean getBoolean(String key)",
      "info" : "MethodDeclaration[11222-11315]:MethodDeclaration[11501-11594]"
    }, {
      "left" : "private void set(String key, String value)",
      "right" : "private void set(String key, String value)",
      "info" : "MethodDeclaration[11323-11413]:MethodDeclaration[11602-11692]"
    }, {
      "left" : "private void unset(String key)",
      "right" : "private void unset(String key)",
      "info" : "MethodDeclaration[11421-11494]:MethodDeclaration[11700-11773]"
    }, {
      "left" : "private void revert(String key)",
      "right" : "private void revert(String key)",
      "info" : "MethodDeclaration[11502-11705]:MethodDeclaration[11781-11984]"
    }, {
      "left" : "public void init(AceEditorWidget widget, Position position)",
      "right" : "public void init(AceEditorWidget widget, Position position)",
      "info" : "MethodDeclaration[11713-12908]:MethodDeclaration[11992-13187]"
    }, {
      "left" : "private boolean isTrue(String string)",
      "right" : "private boolean isTrue(String string)",
      "info" : "MethodDeclaration[12916-13021]:MethodDeclaration[13195-13300]"
    }, {
      "left" : "private String extractChunkPreamble(String extractedChunkHeader,\n                                       String modeId)",
      "right" : "private String extractChunkPreamble(String extractedChunkHeader,\n                                       String modeId)",
      "info" : "MethodDeclaration[13029-13659]:MethodDeclaration[13308-13938]"
    }, {
      "left" : "private String extractChunkLabel(String extractedChunkHeader)",
      "right" : "private String extractChunkLabel(String extractedChunkHeader)",
      "info" : "MethodDeclaration[13667-14160]:MethodDeclaration[13946-14439]"
    }, {
      "left" : "private void parseChunkHeader(String line,\n                                 HashMap<String, String> chunkOptions)",
      "right" : "private void parseChunkHeader(String line,\n                                 HashMap<String, String> chunkOptions)",
      "info" : "MethodDeclaration[14168-15968]:MethodDeclaration[14447-16247]"
    }, {
      "left" : "public void hide()",
      "right" : "public void hide()",
      "info" : "MethodDeclaration[15976-16090]:MethodDeclaration[16255-16369]"
    }, {
      "left" : "private Pair<String, String> getChunkHeaderBounds(String modeId)",
      "right" : "private Pair<String, String> getChunkHeaderBounds(String modeId)",
      "info" : "MethodDeclaration[16098-16592]:MethodDeclaration[16377-16871]"
    }, {
      "left" : "private void synchronize()",
      "right" : "private void synchronize()",
      "info" : "MethodDeclaration[16600-17755]:MethodDeclaration[16879-18034]"
    }, {
      "left" : "private void revert()",
      "right" : "private void revert()",
      "info" : "MethodDeclaration[17763-18117]:MethodDeclaration[18042-18396]"
    }, {
      "left" : "private void hideAndFocusEditor()",
      "right" : "private void hideAndFocusEditor()",
      "info" : "MethodDeclaration[18125-18217]:MethodDeclaration[18404-18496]"
    }, {
      "left" : "private final VerticalPanel panel_;",
      "right" : "private final VerticalPanel panel_;",
      "info" : "FieldDeclaration[18225-18260]:FieldDeclaration[18712-18747]"
    }, {
      "left" : "private final TextBoxWithCue tbChunkLabel_;",
      "right" : "private final TextBoxWithCue tbChunkLabel_;",
      "info" : "FieldDeclaration[18264-18307]:FieldDeclaration[18751-18794]"
    }, {
      "left" : "private final Grid figureDimensionsPanel_;",
      "right" : "private final Grid figureDimensionsPanel_;",
      "info" : "FieldDeclaration[18358-18400]:FieldDeclaration[18840-18882]"
    }, {
      "left" : "private final TextBox figWidthBox_;",
      "right" : "private final TextBox figWidthBox_;",
      "info" : "FieldDeclaration[18404-18439]:FieldDeclaration[18886-18921]"
    }, {
      "left" : "private final TextBox figHeightBox_;",
      "right" : "private final TextBox figHeightBox_;",
      "info" : "FieldDeclaration[18443-18479]:FieldDeclaration[18925-18961]"
    }, {
      "left" : "private final ThemedCheckBox useCustomFigureCheckbox_;",
      "right" : "private final ThemedCheckBox useCustomFigureCheckbox_;",
      "info" : "FieldDeclaration[18483-18537]:FieldDeclaration[18965-19019]"
    }, {
      "left" : "private final TriStateCheckBox showWarningsInOutputCb_;",
      "right" : "private final TriStateCheckBox showWarningsInOutputCb_;",
      "info" : "FieldDeclaration[18541-18596]:FieldDeclaration[19023-19078]"
    }, {
      "left" : "private final TriStateCheckBox showMessagesInOutputCb_;",
      "right" : "private final TriStateCheckBox showMessagesInOutputCb_;",
      "info" : "FieldDeclaration[18600-18655]:FieldDeclaration[19082-19137]"
    }, {
      "left" : "private String originalLine_;",
      "right" : "private String originalLine_;",
      "info" : "FieldDeclaration[18663-18692]:FieldDeclaration[19145-19174]"
    }, {
      "left" : "private String chunkPreamble_;",
      "right" : "private String chunkPreamble_;",
      "info" : "FieldDeclaration[18696-18726]:FieldDeclaration[19178-19208]"
    }, {
      "left" : "private HashMap<String, String> chunkOptions_;",
      "right" : "private HashMap<String, String> chunkOptions_;",
      "info" : "FieldDeclaration[18734-18780]:FieldDeclaration[19216-19262]"
    }, {
      "left" : "private HashMap<String, String> originalChunkOptions_;",
      "right" : "private HashMap<String, String> originalChunkOptions_;",
      "info" : "FieldDeclaration[18784-18838]:FieldDeclaration[19266-19320]"
    }, {
      "left" : "private AceEditorWidget widget_;",
      "right" : "private AceEditorWidget widget_;",
      "info" : "FieldDeclaration[18846-18878]:FieldDeclaration[19328-19360]"
    }, {
      "left" : "private Position position_;",
      "right" : "private Position position_;",
      "info" : "FieldDeclaration[18882-18909]:FieldDeclaration[19364-19391]"
    }, {
      "left" : "private static final String OUTPUT_USE_DOCUMENT_DEFAULT =\n         \"(Use Document Default)\";",
      "right" : "private static final String OUTPUT_USE_DOCUMENT_DEFAULT =\n         \"(Use Document Default)\";",
      "info" : "FieldDeclaration[18917-19009]:FieldDeclaration[19399-19491]"
    }, {
      "left" : "private static final String OUTPUT_SHOW_CODE_AND_OUTPUT =\n         \"Show Code and Output\";",
      "right" : "private static final String OUTPUT_SHOW_CODE_AND_OUTPUT =\n         \"Show Code and Output\";",
      "info" : "FieldDeclaration[19014-19104]:FieldDeclaration[19496-19586]"
    }, {
      "left" : "private static final String OUTPUT_SHOW_OUTPUT_ONLY =\n         \"Show Output Only (Hide Code)\";",
      "right" : "private static final String OUTPUT_SHOW_OUTPUT_ONLY =\n         \"Show Output Only (Hide Code)\";",
      "info" : "FieldDeclaration[19109-19203]:FieldDeclaration[19591-19685]"
    }, {
      "left" : "private static final String OUTPUT_SHOW_NOTHING =\n         \"Show Nothing\";",
      "right" : "private static final String OUTPUT_SHOW_NOTHING =\n         \"Show Nothing\";",
      "info" : "FieldDeclaration[19211-19285]:FieldDeclaration[19693-19767]"
    }, {
      "left" : "Styles",
      "right" : "Styles",
      "info" : "TypeDeclaration[19293-19524]:TypeDeclaration[19775-20006]"
    }, {
      "left" : "String textBox();",
      "right" : "String textBox();",
      "info" : "MethodDeclaration[19348-19365]:MethodDeclaration[19830-19847]"
    }, {
      "left" : "String chunkLabel();",
      "right" : "String chunkLabel();",
      "info" : "MethodDeclaration[19379-19399]:MethodDeclaration[19861-19881]"
    }, {
      "left" : "String chunkName();",
      "right" : "String chunkName();",
      "info" : "MethodDeclaration[19406-19425]:MethodDeclaration[19888-19907]"
    }, {
      "left" : "String labelPanel();",
      "right" : "String labelPanel();",
      "info" : "MethodDeclaration[19432-19452]:MethodDeclaration[19914-19934]"
    }, {
      "left" : "String buttonPanel();",
      "right" : "String buttonPanel();",
      "info" : "MethodDeclaration[19466-19487]:MethodDeclaration[19948-19969]"
    }, {
      "left" : "String checkBox();",
      "right" : "String checkBox();",
      "info" : "MethodDeclaration[19501-19519]:MethodDeclaration[19983-20001]"
    }, {
      "left" : "Resources",
      "right" : "Resources",
      "info" : "TypeDeclaration[19532-19656]:TypeDeclaration[20014-20138]"
    }, {
      "left" : "Styles styles();",
      "right" : "Styles styles();",
      "info" : "MethodDeclaration[19591-19651]:MethodDeclaration[20073-20133]"
    }, {
      "left" : "private static Resources RES = GWT.create(Resources.class);",
      "right" : "private static Resources RES = GWT.create(Resources.class);",
      "info" : "FieldDeclaration[19664-19723]:FieldDeclaration[20146-20205]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3361-3400]:Block[3407-3446]"
    }, {
      "left" : "synchronize();",
      "right" : "synchronize();",
      "info" : "ExpressionStatement[3375-3389]:ExpressionStatement[3421-3435]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3544-3851]:Block[3590-3897]"
    }, {
      "left" : "int keyCode = event.getNativeKeyCode();",
      "right" : "int keyCode = event.getNativeKeyCode();",
      "info" : "VariableDeclarationStatement[3558-3597]:VariableDeclarationStatement[3604-3643]"
    }, {
      "left" : "if (keyCode == KeyCodes.KEY_ESCAPE ||\n                keyCode == KeyCodes.KEY_ENTER)",
      "right" : "if (keyCode == KeyCodes.KEY_ESCAPE ||\n                keyCode == KeyCodes.KEY_ENTER)",
      "info" : "IfStatement[3610-3840]:IfStatement[3656-3886]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3707-3840]:Block[3753-3886]"
    }, {
      "left" : "ChunkOptionsPopupPanel.this.hide();",
      "right" : "ChunkOptionsPopupPanel.this.hide();",
      "info" : "ExpressionStatement[3724-3759]:ExpressionStatement[3770-3805]"
    }, {
      "left" : "widget_.getEditor().focus();",
      "right" : "widget_.getEditor().focus();",
      "info" : "ExpressionStatement[3775-3803]:ExpressionStatement[3821-3849]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[3819-3826]:ReturnStatement[3865-3872]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4029-4389]:Block[4075-4435]"
    }, {
      "left" : "int keyCode = event.getNativeKeyCode();",
      "right" : "int keyCode = event.getNativeKeyCode();",
      "info" : "VariableDeclarationStatement[4043-4082]:VariableDeclarationStatement[4089-4128]"
    }, {
      "left" : "if (keyCode == KeyCodes.KEY_ESCAPE ||\n                keyCode == KeyCodes.KEY_ENTER)",
      "right" : "if (keyCode == KeyCodes.KEY_ESCAPE ||\n                keyCode == KeyCodes.KEY_ENTER)",
      "info" : "IfStatement[4095-4325]:IfStatement[4141-4371]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4192-4325]:Block[4238-4371]"
    }, {
      "left" : "ChunkOptionsPopupPanel.this.hide();",
      "right" : "ChunkOptionsPopupPanel.this.hide();",
      "info" : "ExpressionStatement[4209-4244]:ExpressionStatement[4255-4290]"
    }, {
      "left" : "widget_.getEditor().focus();",
      "right" : "widget_.getEditor().focus();",
      "info" : "ExpressionStatement[4260-4288]:ExpressionStatement[4306-4334]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[4304-4311]:ReturnStatement[4350-4357]"
    }, {
      "left" : "synchronize();",
      "right" : "synchronize();",
      "info" : "ExpressionStatement[4351-4365]:ExpressionStatement[4397-4411]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7017-7094]:Block[7087-7164]"
    }, {
      "left" : "figureDimensionsPanel_.setVisible(event.getValue());",
      "right" : "figureDimensionsPanel_.setVisible(event.getValue());",
      "info" : "ExpressionStatement[7031-7083]:ExpressionStatement[7101-7153]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8493-8561]:Block[8772-8840]"
    }, {
      "left" : "revert();",
      "right" : "revert();",
      "info" : "ExpressionStatement[8507-8516]:ExpressionStatement[8786-8795]"
    }, {
      "left" : "hideAndFocusEditor();",
      "right" : "hideAndFocusEditor();",
      "info" : "ExpressionStatement[8529-8550]:ExpressionStatement[8808-8829]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8889-8962]:Block[9168-9241]"
    }, {
      "left" : "synchronize();",
      "right" : "synchronize();",
      "info" : "ExpressionStatement[8903-8917]:ExpressionStatement[9182-9196]"
    }, {
      "left" : "hideAndFocusEditor();",
      "right" : "hideAndFocusEditor();",
      "info" : "ExpressionStatement[8930-8951]:ExpressionStatement[9209-9230]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9312-9354]:Block[9591-9633]"
    }, {
      "left" : "tbChunkLabel_.setFocus(true);",
      "right" : "tbChunkLabel_.setFocus(true);",
      "info" : "ExpressionStatement[9320-9349]:ExpressionStatement[9599-9628]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9415-10192]:Block[9694-10471]"
    }, {
      "left" : "final TextBox box = new TextBox();",
      "right" : "final TextBox box = new TextBox();",
      "info" : "VariableDeclarationStatement[9423-9457]:VariableDeclarationStatement[9702-9736]"
    }, {
      "left" : "box.getElement().setAttribute(\"placeholder\", \"Default\");",
      "right" : "box.getElement().setAttribute(\"placeholder\", \"Default\");",
      "info" : "ExpressionStatement[9464-9520]:ExpressionStatement[9743-9799]"
    }, {
      "left" : "box.setWidth(\"40px\");",
      "right" : "box.setWidth(\"40px\");",
      "info" : "ExpressionStatement[9527-9548]:ExpressionStatement[9806-9827]"
    }, {
      "left" : "DomUtils.addKeyHandlers(box, new NativeEventHandler()\n      {\n         @Override\n         public void onNativeEvent(NativeEvent event)\n         {\n            Scheduler.get().scheduleDeferred(new ScheduledCommand()\n            {\n               @Override\n               public void execute()\n               {\n                  String text = box.getText().trim();\n                  if (StringUtil.isNullOrEmpty(text))\n                     unset(option);\n                  else\n                     set(option, text);\n                  synchronize();\n               }\n            });\n         }\n      });",
      "right" : "DomUtils.addKeyHandlers(box, new NativeEventHandler()\n      {\n         @Override\n         public void onNativeEvent(NativeEvent event)\n         {\n            Scheduler.get().scheduleDeferred(new ScheduledCommand()\n            {\n               @Override\n               public void execute()\n               {\n                  String text = box.getText().trim();\n                  if (StringUtil.isNullOrEmpty(text))\n                     unset(option);\n                  else\n                     set(option, text);\n                  synchronize();\n               }\n            });\n         }\n      });",
      "info" : "ExpressionStatement[9562-10162]:ExpressionStatement[9841-10441]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9706-10152]:Block[9985-10431]"
    }, {
      "left" : "Scheduler.get().scheduleDeferred(new ScheduledCommand()\n            {\n               @Override\n               public void execute()\n               {\n                  String text = box.getText().trim();\n                  if (StringUtil.isNullOrEmpty(text))\n                     unset(option);\n                  else\n                     set(option, text);\n                  synchronize();\n               }\n            });",
      "right" : "Scheduler.get().scheduleDeferred(new ScheduledCommand()\n            {\n               @Override\n               public void execute()\n               {\n                  String text = box.getText().trim();\n                  if (StringUtil.isNullOrEmpty(text))\n                     unset(option);\n                  else\n                     set(option, text);\n                  synchronize();\n               }\n            });",
      "info" : "ExpressionStatement[9720-10141]:ExpressionStatement[9999-10420]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9867-10125]:Block[10146-10404]"
    }, {
      "left" : "String text = box.getText().trim();",
      "right" : "String text = box.getText().trim();",
      "info" : "VariableDeclarationStatement[9887-9922]:VariableDeclarationStatement[10166-10201]"
    }, {
      "left" : "if (StringUtil.isNullOrEmpty(text))",
      "right" : "if (StringUtil.isNullOrEmpty(text))",
      "info" : "IfStatement[9941-10075]:IfStatement[10220-10354]"
    }, {
      "left" : "unset(option);",
      "right" : "unset(option);",
      "info" : "ExpressionStatement[9998-10012]:ExpressionStatement[10277-10291]"
    }, {
      "left" : "set(option, text);",
      "right" : "set(option, text);",
      "info" : "ExpressionStatement[10057-10075]:ExpressionStatement[10336-10354]"
    }, {
      "left" : "synchronize();",
      "right" : "synchronize();",
      "info" : "ExpressionStatement[10094-10108]:ExpressionStatement[10373-10387]"
    }, {
      "left" : "return box;",
      "right" : "return box;",
      "info" : "ReturnStatement[10176-10187]:ReturnStatement[10455-10466]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10284-11036]:Block[10563-11315]"
    }, {
      "left" : "TriStateCheckBox checkBox = new TriStateCheckBox(label);",
      "right" : "TriStateCheckBox checkBox = new TriStateCheckBox(label);",
      "info" : "VariableDeclarationStatement[10292-10348]:VariableDeclarationStatement[10571-10627]"
    }, {
      "left" : "checkBox.addValueChangeHandler(\n            new ValueChangeHandler<TriStateCheckBox.State>()\n            {\n               @Override\n               public void onValueChange(ValueChangeEvent<State> event)\n               {\n                  State state = event.getValue();\n                  if (state == TriStateCheckBox.STATE_INDETERMINATE)\n                     unset(option);\n                  else if (state == TriStateCheckBox.STATE_OFF)\n                     set(option, \"FALSE\");\n                  else if (state == TriStateCheckBox.STATE_ON)\n                     set(option, \"TRUE\");\n                  synchronize();\n               }\n            });",
      "right" : "checkBox.addValueChangeHandler(\n            new ValueChangeHandler<TriStateCheckBox.State>()\n            {\n               @Override\n               public void onValueChange(ValueChangeEvent<State> event)\n               {\n                  State state = event.getValue();\n                  if (state == TriStateCheckBox.STATE_INDETERMINATE)\n                     unset(option);\n                  else if (state == TriStateCheckBox.STATE_OFF)\n                     set(option, \"FALSE\");\n                  else if (state == TriStateCheckBox.STATE_ON)\n                     set(option, \"TRUE\");\n                  synchronize();\n               }\n            });",
      "info" : "ExpressionStatement[10355-11008]:ExpressionStatement[10634-11287]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10574-10992]:Block[10853-11271]"
    }, {
      "left" : "State state = event.getValue();",
      "right" : "State state = event.getValue();",
      "info" : "VariableDeclarationStatement[10594-10625]:VariableDeclarationStatement[10873-10904]"
    }, {
      "left" : "if (state == TriStateCheckBox.STATE_INDETERMINATE)",
      "right" : "if (state == TriStateCheckBox.STATE_INDETERMINATE)",
      "info" : "IfStatement[10644-10942]:IfStatement[10923-11221]"
    }, {
      "left" : "unset(option);",
      "right" : "unset(option);",
      "info" : "ExpressionStatement[10716-10730]:ExpressionStatement[10995-11009]"
    }, {
      "left" : "if (state == TriStateCheckBox.STATE_OFF)",
      "right" : "if (state == TriStateCheckBox.STATE_OFF)",
      "info" : "IfStatement[10754-10942]:IfStatement[11033-11221]"
    }, {
      "left" : "set(option, \"FALSE\");",
      "right" : "set(option, \"FALSE\");",
      "info" : "ExpressionStatement[10816-10837]:ExpressionStatement[11095-11116]"
    }, {
      "left" : "if (state == TriStateCheckBox.STATE_ON)",
      "right" : "if (state == TriStateCheckBox.STATE_ON)",
      "info" : "IfStatement[10861-10942]:IfStatement[11140-11221]"
    }, {
      "left" : "set(option, \"TRUE\");",
      "right" : "set(option, \"TRUE\");",
      "info" : "ExpressionStatement[10922-10942]:ExpressionStatement[11201-11221]"
    }, {
      "left" : "synchronize();",
      "right" : "synchronize();",
      "info" : "ExpressionStatement[10961-10975]:ExpressionStatement[11240-11254]"
    }, {
      "left" : "return checkBox;",
      "right" : "return checkBox;",
      "info" : "ReturnStatement[11015-11031]:ReturnStatement[11294-11310]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11079-11130]:Block[11358-11409]"
    }, {
      "left" : "return chunkOptions_.containsKey(key);",
      "right" : "return chunkOptions_.containsKey(key);",
      "info" : "ReturnStatement[11087-11125]:ReturnStatement[11366-11404]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11171-11214]:Block[11450-11493]"
    }, {
      "left" : "return chunkOptions_.get(key);",
      "right" : "return chunkOptions_.get(key);",
      "info" : "ReturnStatement[11179-11209]:ReturnStatement[11458-11488]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11264-11315]:Block[11543-11594]"
    }, {
      "left" : "return isTrue(chunkOptions_.get(key));",
      "right" : "return isTrue(chunkOptions_.get(key));",
      "info" : "ReturnStatement[11272-11310]:ReturnStatement[11551-11589]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11369-11413]:Block[11648-11692]"
    }, {
      "left" : "chunkOptions_.put(key,  value);",
      "right" : "chunkOptions_.put(key,  value);",
      "info" : "ExpressionStatement[11377-11408]:ExpressionStatement[11656-11687]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11455-11494]:Block[11734-11773]"
    }, {
      "left" : "chunkOptions_.remove(key);",
      "right" : "chunkOptions_.remove(key);",
      "info" : "ExpressionStatement[11463-11489]:ExpressionStatement[11742-11768]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11537-11705]:Block[11816-11984]"
    }, {
      "left" : "if (originalChunkOptions_.containsKey(key))",
      "right" : "if (originalChunkOptions_.containsKey(key))",
      "info" : "IfStatement[11545-11700]:IfStatement[11824-11979]"
    }, {
      "left" : "chunkOptions_.put(key, originalChunkOptions_.get(key));",
      "right" : "chunkOptions_.put(key, originalChunkOptions_.get(key));",
      "info" : "ExpressionStatement[11598-11653]:ExpressionStatement[11877-11932]"
    }, {
      "left" : "chunkOptions_.remove(key);",
      "right" : "chunkOptions_.remove(key);",
      "info" : "ExpressionStatement[11674-11700]:ExpressionStatement[11953-11979]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11776-12908]:Block[12055-13187]"
    }, {
      "left" : "widget_ = widget;",
      "right" : "widget_ = widget;",
      "info" : "ExpressionStatement[11784-11801]:ExpressionStatement[12063-12080]"
    }, {
      "left" : "position_ = position;",
      "right" : "position_ = position;",
      "info" : "ExpressionStatement[11808-11829]:ExpressionStatement[12087-12108]"
    }, {
      "left" : "chunkOptions_.clear();",
      "right" : "chunkOptions_.clear();",
      "info" : "ExpressionStatement[11836-11858]:ExpressionStatement[12115-12137]"
    }, {
      "left" : "originalChunkOptions_.clear();",
      "right" : "originalChunkOptions_.clear();",
      "info" : "ExpressionStatement[11865-11895]:ExpressionStatement[12144-12174]"
    }, {
      "left" : "originalLine_ = widget_.getEditor().getSession().getLine(position_.getRow());",
      "right" : "originalLine_ = widget_.getEditor().getSession().getLine(position_.getRow());",
      "info" : "ExpressionStatement[11909-11986]:ExpressionStatement[12188-12265]"
    }, {
      "left" : "parseChunkHeader(originalLine_, originalChunkOptions_);",
      "right" : "parseChunkHeader(originalLine_, originalChunkOptions_);",
      "info" : "ExpressionStatement[11993-12048]:ExpressionStatement[12272-12327]"
    }, {
      "left" : "for (Map.Entry<String, String> pair : originalChunkOptions_.entrySet())\n         chunkOptions_.put(pair.getKey(), pair.getValue());",
      "right" : "for (Map.Entry<String, String> pair : originalChunkOptions_.entrySet())\n         chunkOptions_.put(pair.getKey(), pair.getValue());",
      "info" : "EnhancedForStatement[12055-12186]:EnhancedForStatement[12334-12465]"
    }, {
      "left" : "chunkOptions_.put(pair.getKey(), pair.getValue());",
      "right" : "chunkOptions_.put(pair.getKey(), pair.getValue());",
      "info" : "ExpressionStatement[12136-12186]:ExpressionStatement[12415-12465]"
    }, {
      "left" : "boolean hasRelevantFigureSettings =\n            has(\"fig.width\") ||\n            has(\"fig.height\");",
      "right" : "boolean hasRelevantFigureSettings =\n            has(\"fig.width\") ||\n            has(\"fig.height\");",
      "info" : "VariableDeclarationStatement[12200-12298]:VariableDeclarationStatement[12479-12577]"
    }, {
      "left" : "useCustomFigureCheckbox_.setValue(hasRelevantFigureSettings);",
      "right" : "useCustomFigureCheckbox_.setValue(hasRelevantFigureSettings);",
      "info" : "ExpressionStatement[12312-12373]:ExpressionStatement[12591-12652]"
    }, {
      "left" : "figureDimensionsPanel_.setVisible(hasRelevantFigureSettings);",
      "right" : "figureDimensionsPanel_.setVisible(hasRelevantFigureSettings);",
      "info" : "ExpressionStatement[12380-12441]:ExpressionStatement[12659-12720]"
    }, {
      "left" : "if (has(\"fig.width\"))",
      "right" : "if (has(\"fig.width\"))",
      "info" : "IfStatement[12455-12571]:IfStatement[12734-12850]"
    }, {
      "left" : "figWidthBox_.setText(get(\"fig.width\"));",
      "right" : "figWidthBox_.setText(get(\"fig.width\"));",
      "info" : "ExpressionStatement[12486-12525]:ExpressionStatement[12765-12804]"
    }, {
      "left" : "figWidthBox_.setText(\"\");",
      "right" : "figWidthBox_.setText(\"\");",
      "info" : "ExpressionStatement[12546-12571]:ExpressionStatement[12825-12850]"
    }, {
      "left" : "if (has(\"fig.height\"))",
      "right" : "if (has(\"fig.height\"))",
      "info" : "IfStatement[12585-12705]:IfStatement[12864-12984]"
    }, {
      "left" : "figHeightBox_.setText(get(\"fig.height\"));",
      "right" : "figHeightBox_.setText(get(\"fig.height\"));",
      "info" : "ExpressionStatement[12617-12658]:ExpressionStatement[12896-12937]"
    }, {
      "left" : "figHeightBox_.setText(\"\");",
      "right" : "figHeightBox_.setText(\"\");",
      "info" : "ExpressionStatement[12679-12705]:ExpressionStatement[12958-12984]"
    }, {
      "left" : "if (has(\"warning\"))",
      "right" : "if (has(\"warning\"))",
      "info" : "IfStatement[12719-12804]:IfStatement[12998-13083]"
    }, {
      "left" : "showWarningsInOutputCb_.setValue(getBoolean(\"warning\"));",
      "right" : "showWarningsInOutputCb_.setValue(getBoolean(\"warning\"));",
      "info" : "ExpressionStatement[12748-12804]:ExpressionStatement[13027-13083]"
    }, {
      "left" : "if (has(\"message\"))",
      "right" : "if (has(\"message\"))",
      "info" : "IfStatement[12818-12903]:IfStatement[13097-13182]"
    }, {
      "left" : "showMessagesInOutputCb_.setValue(getBoolean(\"message\"));",
      "right" : "showMessagesInOutputCb_.setValue(getBoolean(\"message\"));",
      "info" : "ExpressionStatement[12847-12903]:ExpressionStatement[13126-13182]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12957-13021]:Block[13236-13300]"
    }, {
      "left" : "return string.equals(\"TRUE\") || string.equals(\"T\");",
      "right" : "return string.equals(\"TRUE\") || string.equals(\"T\");",
      "info" : "ReturnStatement[12965-13016]:ReturnStatement[13244-13295]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13151-13659]:Block[13430-13938]"
    }, {
      "left" : "if (modeId.equals(\"mode/sweave\"))",
      "right" : "if (modeId.equals(\"mode/sweave\"))",
      "info" : "IfStatement[13159-13212]:IfStatement[13438-13491]"
    }, {
      "left" : "return \"\";",
      "right" : "return \"\";",
      "info" : "ReturnStatement[13202-13212]:ReturnStatement[13481-13491]"
    }, {
      "left" : "int firstSpaceIdx = extractedChunkHeader.indexOf(' ');",
      "right" : "int firstSpaceIdx = extractedChunkHeader.indexOf(' ');",
      "info" : "VariableDeclarationStatement[13226-13280]:VariableDeclarationStatement[13505-13559]"
    }, {
      "left" : "if (firstSpaceIdx == -1)",
      "right" : "if (firstSpaceIdx == -1)",
      "info" : "IfStatement[13287-13349]:IfStatement[13566-13628]"
    }, {
      "left" : "return extractedChunkHeader;",
      "right" : "return extractedChunkHeader;",
      "info" : "ReturnStatement[13321-13349]:ReturnStatement[13600-13628]"
    }, {
      "left" : "int firstCommaIdx = extractedChunkHeader.indexOf(',');",
      "right" : "int firstCommaIdx = extractedChunkHeader.indexOf(',');",
      "info" : "VariableDeclarationStatement[13363-13417]:VariableDeclarationStatement[13642-13696]"
    }, {
      "left" : "if (firstCommaIdx == -1)",
      "right" : "if (firstCommaIdx == -1)",
      "info" : "IfStatement[13424-13504]:IfStatement[13703-13783]"
    }, {
      "left" : "firstCommaIdx = extractedChunkHeader.length();",
      "right" : "firstCommaIdx = extractedChunkHeader.length();",
      "info" : "ExpressionStatement[13458-13504]:ExpressionStatement[13737-13783]"
    }, {
      "left" : "String label = extractedChunkHeader.substring(\n            0, Math.min(firstSpaceIdx, firstCommaIdx)).trim();",
      "right" : "String label = extractedChunkHeader.substring(\n            0, Math.min(firstSpaceIdx, firstCommaIdx)).trim();",
      "info" : "VariableDeclarationStatement[13518-13627]:VariableDeclarationStatement[13797-13906]"
    }, {
      "left" : "return label;",
      "right" : "return label;",
      "info" : "ReturnStatement[13641-13654]:ReturnStatement[13920-13933]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13732-14160]:Block[14011-14439]"
    }, {
      "left" : "int firstSpaceIdx = extractedChunkHeader.indexOf(' ');",
      "right" : "int firstSpaceIdx = extractedChunkHeader.indexOf(' ');",
      "info" : "VariableDeclarationStatement[13740-13794]:VariableDeclarationStatement[14019-14073]"
    }, {
      "left" : "if (firstSpaceIdx == -1)",
      "right" : "if (firstSpaceIdx == -1)",
      "info" : "IfStatement[13801-13845]:IfStatement[14080-14124]"
    }, {
      "left" : "return \"\";",
      "right" : "return \"\";",
      "info" : "ReturnStatement[13835-13845]:ReturnStatement[14114-14124]"
    }, {
      "left" : "int firstCommaIdx = extractedChunkHeader.indexOf(',');",
      "right" : "int firstCommaIdx = extractedChunkHeader.indexOf(',');",
      "info" : "VariableDeclarationStatement[13859-13913]:VariableDeclarationStatement[14138-14192]"
    }, {
      "left" : "if (firstCommaIdx == -1)",
      "right" : "if (firstCommaIdx == -1)",
      "info" : "IfStatement[13920-14000]:IfStatement[14199-14279]"
    }, {
      "left" : "firstCommaIdx = extractedChunkHeader.length();",
      "right" : "firstCommaIdx = extractedChunkHeader.length();",
      "info" : "ExpressionStatement[13954-14000]:ExpressionStatement[14233-14279]"
    }, {
      "left" : "return firstCommaIdx <= firstSpaceIdx ?\n            \"\" :\n            extractedChunkHeader.substring(firstSpaceIdx + 1, firstCommaIdx).trim();",
      "right" : "return firstCommaIdx <= firstSpaceIdx ?\n            \"\" :\n            extractedChunkHeader.substring(firstSpaceIdx + 1, firstCommaIdx).trim();",
      "info" : "ReturnStatement[14014-14155]:ReturnStatement[14293-14434]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14285-15968]:Block[14564-16247]"
    }, {
      "left" : "String modeId = widget_.getEditor().getSession().getMode().getId();",
      "right" : "String modeId = widget_.getEditor().getSession().getMode().getId();",
      "info" : "VariableDeclarationStatement[14293-14360]:VariableDeclarationStatement[14572-14639]"
    }, {
      "left" : "Pattern pattern = null;",
      "right" : "Pattern pattern = null;",
      "info" : "VariableDeclarationStatement[14374-14397]:VariableDeclarationStatement[14653-14676]"
    }, {
      "left" : "if (modeId.equals(\"mode/rmarkdown\"))",
      "right" : "if (modeId.equals(\"mode/rmarkdown\"))",
      "info" : "IfStatement[14404-14687]:IfStatement[14683-14966]"
    }, {
      "left" : "pattern = RegexUtil.RE_RMARKDOWN_CHUNK_BEGIN;",
      "right" : "pattern = RegexUtil.RE_RMARKDOWN_CHUNK_BEGIN;",
      "info" : "ExpressionStatement[14450-14495]:ExpressionStatement[14729-14774]"
    }, {
      "left" : "if (modeId.equals(\"mode/sweave\"))",
      "right" : "if (modeId.equals(\"mode/sweave\"))",
      "info" : "IfStatement[14507-14687]:IfStatement[14786-14966]"
    }, {
      "left" : "pattern = RegexUtil.RE_SWEAVE_CHUNK_BEGIN;",
      "right" : "pattern = RegexUtil.RE_SWEAVE_CHUNK_BEGIN;",
      "info" : "ExpressionStatement[14550-14592]:ExpressionStatement[14829-14871]"
    }, {
      "left" : "if (modeId.equals(\"mode/rhtml\"))",
      "right" : "if (modeId.equals(\"mode/rhtml\"))",
      "info" : "IfStatement[14604-14687]:IfStatement[14883-14966]"
    }, {
      "left" : "pattern = RegexUtil.RE_RHTML_CHUNK_BEGIN;",
      "right" : "pattern = RegexUtil.RE_RHTML_CHUNK_BEGIN;",
      "info" : "ExpressionStatement[14646-14687]:ExpressionStatement[14925-14966]"
    }, {
      "left" : "if (pattern == null)",
      "right" : "if (pattern == null)",
      "info" : "IfStatement[14701-14729]:IfStatement[14980-15008]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[14722-14729]:ReturnStatement[15001-15008]"
    }, {
      "left" : "Match match = pattern.match(line,  0);",
      "right" : "Match match = pattern.match(line,  0);",
      "info" : "VariableDeclarationStatement[14743-14781]:VariableDeclarationStatement[15022-15060]"
    }, {
      "left" : "if (match == null)",
      "right" : "if (match == null)",
      "info" : "IfStatement[14788-14814]:IfStatement[15067-15093]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[14807-14814]:ReturnStatement[15086-15093]"
    }, {
      "left" : "String extracted = match.getGroup(1);",
      "right" : "String extracted = match.getGroup(1);",
      "info" : "VariableDeclarationStatement[14828-14865]:VariableDeclarationStatement[15107-15144]"
    }, {
      "left" : "chunkPreamble_ = extractChunkPreamble(extracted, modeId);",
      "right" : "chunkPreamble_ = extractChunkPreamble(extracted, modeId);",
      "info" : "ExpressionStatement[14872-14929]:ExpressionStatement[15151-15208]"
    }, {
      "left" : "String chunkLabel = extractChunkLabel(extracted);",
      "right" : "String chunkLabel = extractChunkLabel(extracted);",
      "info" : "VariableDeclarationStatement[14943-14992]:VariableDeclarationStatement[15222-15271]"
    }, {
      "left" : "if (StringUtil.isNullOrEmpty(chunkLabel))",
      "right" : "if (StringUtil.isNullOrEmpty(chunkLabel))",
      "info" : "IfStatement[14999-15228]:IfStatement[15278-15507]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15047-15097]:Block[15326-15376]"
    }, {
      "left" : "tbChunkLabel_.setCueMode(true);",
      "right" : "tbChunkLabel_.setCueMode(true);",
      "info" : "ExpressionStatement[15058-15089]:ExpressionStatement[15337-15368]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15115-15228]:Block[15394-15507]"
    }, {
      "left" : "tbChunkLabel_.setCueMode(false);",
      "right" : "tbChunkLabel_.setCueMode(false);",
      "info" : "ExpressionStatement[15126-15158]:ExpressionStatement[15405-15437]"
    }, {
      "left" : "tbChunkLabel_.setText(extractChunkLabel(extracted));",
      "right" : "tbChunkLabel_.setText(extractChunkLabel(extracted));",
      "info" : "ExpressionStatement[15168-15220]:ExpressionStatement[15447-15499]"
    }, {
      "left" : "int firstCommaIndex = extracted.indexOf(',');",
      "right" : "int firstCommaIndex = extracted.indexOf(',');",
      "info" : "VariableDeclarationStatement[15242-15287]:VariableDeclarationStatement[15521-15566]"
    }, {
      "left" : "String arguments = extracted.substring(firstCommaIndex + 1);",
      "right" : "String arguments = extracted.substring(firstCommaIndex + 1);",
      "info" : "VariableDeclarationStatement[15294-15354]:VariableDeclarationStatement[15573-15633]"
    }, {
      "left" : "TextCursor cursor = new TextCursor(arguments);",
      "right" : "TextCursor cursor = new TextCursor(arguments);",
      "info" : "VariableDeclarationStatement[15361-15407]:VariableDeclarationStatement[15640-15686]"
    }, {
      "left" : "int startIndex = 0;",
      "right" : "int startIndex = 0;",
      "info" : "VariableDeclarationStatement[15421-15440]:VariableDeclarationStatement[15700-15719]"
    }, {
      "left" : "while (true)",
      "right" : "while (true)",
      "info" : "WhileStatement[15447-15963]:WhileStatement[15726-16242]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15466-15963]:Block[15745-16242]"
    }, {
      "left" : "if (!cursor.fwdToCharacter('=', false))",
      "right" : "if (!cursor.fwdToCharacter('=', false))",
      "info" : "IfStatement[15477-15535]:IfStatement[15756-15814]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[15529-15535]:BreakStatement[15808-15814]"
    }, {
      "left" : "int equalsIndex = cursor.getIndex();",
      "right" : "int equalsIndex = cursor.getIndex();",
      "info" : "VariableDeclarationStatement[15555-15591]:VariableDeclarationStatement[15834-15870]"
    }, {
      "left" : "int endIndex = arguments.length();",
      "right" : "int endIndex = arguments.length();",
      "info" : "VariableDeclarationStatement[15601-15635]:VariableDeclarationStatement[15880-15914]"
    }, {
      "left" : "if (cursor.fwdToCharacter(',', true))",
      "right" : "if (cursor.fwdToCharacter(',', true))",
      "info" : "IfStatement[15645-15724]:IfStatement[15924-16003]"
    }, {
      "left" : "endIndex = cursor.getIndex();",
      "right" : "endIndex = cursor.getIndex();",
      "info" : "ExpressionStatement[15695-15724]:ExpressionStatement[15974-16003]"
    }, {
      "left" : "chunkOptions.put(\n               arguments.substring(startIndex, equalsIndex).trim(),\n               arguments.substring(equalsIndex + 1, endIndex).trim());",
      "right" : "chunkOptions.put(\n               arguments.substring(startIndex, equalsIndex).trim(),\n               arguments.substring(equalsIndex + 1, endIndex).trim());",
      "info" : "ExpressionStatement[15744-15900]:ExpressionStatement[16023-16179]"
    }, {
      "left" : "startIndex = cursor.getIndex() + 1;",
      "right" : "startIndex = cursor.getIndex() + 1;",
      "info" : "ExpressionStatement[15920-15955]:ExpressionStatement[16199-16234]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16011-16090]:Block[16290-16369]"
    }, {
      "left" : "position_ = null;",
      "right" : "position_ = null;",
      "info" : "ExpressionStatement[16019-16036]:ExpressionStatement[16298-16315]"
    }, {
      "left" : "chunkOptions_.clear();",
      "right" : "chunkOptions_.clear();",
      "info" : "ExpressionStatement[16043-16065]:ExpressionStatement[16322-16344]"
    }, {
      "left" : "super.hide();",
      "right" : "super.hide();",
      "info" : "ExpressionStatement[16072-16085]:ExpressionStatement[16351-16364]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16166-16592]:Block[16445-16871]"
    }, {
      "left" : "if (modeId.equals(\"mode/rmarkdown\"))",
      "right" : "if (modeId.equals(\"mode/rmarkdown\"))",
      "info" : "IfStatement[16174-16561]:IfStatement[16453-16840]"
    }, {
      "left" : "return new Pair<String, String>(\"```{\", \"}\");",
      "right" : "return new Pair<String, String>(\"```{\", \"}\");",
      "info" : "ReturnStatement[16220-16265]:ReturnStatement[16499-16544]"
    }, {
      "left" : "if (modeId.equals(\"mode/sweave\"))",
      "right" : "if (modeId.equals(\"mode/sweave\"))",
      "info" : "IfStatement[16277-16561]:IfStatement[16556-16840]"
    }, {
      "left" : "return new Pair<String, String>(\"<<\", \">>=\");",
      "right" : "return new Pair<String, String>(\"<<\", \">>=\");",
      "info" : "ReturnStatement[16320-16365]:ReturnStatement[16599-16644]"
    }, {
      "left" : "if (modeId.equals(\"mode/rhtml\"))",
      "right" : "if (modeId.equals(\"mode/rhtml\"))",
      "info" : "IfStatement[16377-16561]:IfStatement[16656-16840]"
    }, {
      "left" : "return new Pair<String, String>(\"<!--\", \"\");",
      "right" : "return new Pair<String, String>(\"<!--\", \"\");",
      "info" : "ReturnStatement[16419-16463]:ReturnStatement[16698-16742]"
    }, {
      "left" : "if (modeId.equals(\"mode/c_cpp\"))",
      "right" : "if (modeId.equals(\"mode/c_cpp\"))",
      "info" : "IfStatement[16475-16561]:IfStatement[16754-16840]"
    }, {
      "left" : "return new Pair<String, String>(\"/***\", \"\");",
      "right" : "return new Pair<String, String>(\"/***\", \"\");",
      "info" : "ReturnStatement[16517-16561]:ReturnStatement[16796-16840]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[16575-16587]:ReturnStatement[16854-16866]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16630-17755]:Block[16909-18034]"
    }, {
      "left" : "String modeId = widget_.getEditor().getSession().getMode().getId();",
      "right" : "String modeId = widget_.getEditor().getSession().getMode().getId();",
      "info" : "VariableDeclarationStatement[16638-16705]:VariableDeclarationStatement[16917-16984]"
    }, {
      "left" : "Pair<String, String> chunkHeaderBounds =\n            getChunkHeaderBounds(modeId);",
      "right" : "Pair<String, String> chunkHeaderBounds =\n            getChunkHeaderBounds(modeId);",
      "info" : "VariableDeclarationStatement[16712-16794]:VariableDeclarationStatement[16991-17073]"
    }, {
      "left" : "if (chunkHeaderBounds == null)",
      "right" : "if (chunkHeaderBounds == null)",
      "info" : "IfStatement[16801-16848]:IfStatement[17080-17127]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[16841-16848]:ReturnStatement[17120-17127]"
    }, {
      "left" : "String label = tbChunkLabel_.getText();",
      "right" : "String label = tbChunkLabel_.getText();",
      "info" : "VariableDeclarationStatement[16862-16901]:VariableDeclarationStatement[17141-17180]"
    }, {
      "left" : "String newLine =\n            chunkHeaderBounds.first +\n            chunkPreamble_;",
      "right" : "String newLine =\n            chunkHeaderBounds.first +\n            chunkPreamble_;",
      "info" : "VariableDeclarationStatement[16908-16990]:VariableDeclarationStatement[17187-17269]"
    }, {
      "left" : "if (!label.isEmpty())",
      "right" : "if (!label.isEmpty())",
      "info" : "IfStatement[17004-17176]:IfStatement[17283-17455]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17032-17176]:Block[17311-17455]"
    }, {
      "left" : "if (StringUtil.isNullOrEmpty(chunkPreamble_))",
      "right" : "if (StringUtil.isNullOrEmpty(chunkPreamble_))",
      "info" : "IfStatement[17043-17168]:IfStatement[17322-17447]"
    }, {
      "left" : "newLine += label;",
      "right" : "newLine += label;",
      "info" : "ExpressionStatement[17101-17118]:ExpressionStatement[17380-17397]"
    }, {
      "left" : "newLine += \" \" + label;",
      "right" : "newLine += \" \" + label;",
      "info" : "ExpressionStatement[17145-17168]:ExpressionStatement[17424-17447]"
    }, {
      "left" : "if (!chunkOptions_.isEmpty())",
      "right" : "if (!chunkOptions_.isEmpty())",
      "info" : "IfStatement[17190-17453]:IfStatement[17469-17732]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17226-17453]:Block[17505-17732]"
    }, {
      "left" : "if (!(StringUtil.isNullOrEmpty(chunkPreamble_) &&\n             label.isEmpty()))",
      "right" : "if (!(StringUtil.isNullOrEmpty(chunkPreamble_) &&\n             label.isEmpty()))",
      "info" : "IfStatement[17237-17368]:IfStatement[17516-17647]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17327-17368]:Block[17606-17647]"
    }, {
      "left" : "newLine += \", \";",
      "right" : "newLine += \", \";",
      "info" : "ExpressionStatement[17341-17357]:ExpressionStatement[17620-17636]"
    }, {
      "left" : "newLine += StringUtil.collapse(chunkOptions_, \"=\", \", \");",
      "right" : "newLine += StringUtil.collapse(chunkOptions_, \"=\", \", \");",
      "info" : "ExpressionStatement[17388-17445]:ExpressionStatement[17667-17724]"
    }, {
      "left" : "newLine +=\n            chunkHeaderBounds.second +\n            \"\\n\";",
      "right" : "newLine +=\n            chunkHeaderBounds.second +\n            \"\\n\";",
      "info" : "ExpressionStatement[17467-17534]:ExpressionStatement[17746-17813]"
    }, {
      "left" : "widget_.getEditor().getSession().replace(\n            Range.fromPoints(\n                  Position.create(position_.getRow(), 0),\n                  Position.create(position_.getRow() + 1, 0)), newLine);",
      "right" : "widget_.getEditor().getSession().replace(\n            Range.fromPoints(\n                  Position.create(position_.getRow(), 0),\n                  Position.create(position_.getRow() + 1, 0)), newLine);",
      "info" : "ExpressionStatement[17548-17750]:ExpressionStatement[17827-18029]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17788-18117]:Block[18067-18396]"
    }, {
      "left" : "if (position_ == null)",
      "right" : "if (position_ == null)",
      "info" : "IfStatement[17796-17835]:IfStatement[18075-18114]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[17828-17835]:ReturnStatement[18107-18114]"
    }, {
      "left" : "Range replaceRange = Range.fromPoints(\n            Position.create(position_.getRow(), 0),\n            Position.create(position_.getRow() + 1, 0));",
      "right" : "Range replaceRange = Range.fromPoints(\n            Position.create(position_.getRow(), 0),\n            Position.create(position_.getRow() + 1, 0));",
      "info" : "VariableDeclarationStatement[17849-17996]:VariableDeclarationStatement[18128-18275]"
    }, {
      "left" : "widget_.getEditor().getSession().replace(\n            replaceRange,\n            originalLine_ + \"\\n\");",
      "right" : "widget_.getEditor().getSession().replace(\n            replaceRange,\n            originalLine_ + \"\\n\");",
      "info" : "ExpressionStatement[18010-18112]:ExpressionStatement[18289-18391]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18162-18217]:Block[18441-18496]"
    }, {
      "left" : "hide();",
      "right" : "hide();",
      "info" : "ExpressionStatement[18170-18177]:ExpressionStatement[18449-18456]"
    }, {
      "left" : "widget_.getEditor().focus();",
      "right" : "widget_.getEditor().focus();",
      "info" : "ExpressionStatement[18184-18212]:ExpressionStatement[18463-18491]"
    } ]
  },
  "interFileMappings" : { }
}