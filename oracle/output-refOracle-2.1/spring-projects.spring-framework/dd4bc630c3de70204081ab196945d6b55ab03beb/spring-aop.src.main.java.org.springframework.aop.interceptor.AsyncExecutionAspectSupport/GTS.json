{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "AsyncExecutionAspectSupport",
      "right" : "AsyncExecutionAspectSupport",
      "info" : "TypeDeclaration[1447-7343]:TypeDeclaration[1765-9385]"
    }, {
      "left" : "protected final Log logger = LogFactory.getLog(getClass());",
      "right" : "protected final Log logger = LogFactory.getLog(getClass());",
      "info" : "FieldDeclaration[2215-2274]:FieldDeclaration[2755-2814]"
    }, {
      "left" : "private final Map<Method, AsyncTaskExecutor> executors = new ConcurrentHashMap<Method, AsyncTaskExecutor>(16);",
      "right" : "private final Map<Method, AsyncTaskExecutor> executors = new ConcurrentHashMap<Method, AsyncTaskExecutor>(16);",
      "info" : "FieldDeclaration[2277-2387]:FieldDeclaration[2817-2927]"
    }, {
      "left" : "private Executor defaultExecutor;",
      "right" : "private Executor defaultExecutor;",
      "info" : "FieldDeclaration[2390-2423]:FieldDeclaration[2930-2963]"
    }, {
      "left" : "private AsyncUncaughtExceptionHandler exceptionHandler;",
      "right" : "private AsyncUncaughtExceptionHandler exceptionHandler;",
      "info" : "FieldDeclaration[2426-2481]:FieldDeclaration[2966-3021]"
    }, {
      "left" : "private BeanFactory beanFactory;",
      "right" : "private BeanFactory beanFactory;",
      "info" : "FieldDeclaration[2484-2516]:FieldDeclaration[3024-3056]"
    }, {
      "left" : "public AsyncExecutionAspectSupport(Executor defaultExecutor, AsyncUncaughtExceptionHandler exceptionHandler)",
      "right" : "public AsyncExecutionAspectSupport(Executor defaultExecutor, AsyncUncaughtExceptionHandler exceptionHandler)",
      "info" : "MethodDeclaration[2520-3088]:MethodDeclaration[3060-3628]"
    }, {
      "left" : "public AsyncExecutionAspectSupport(Executor defaultExecutor)",
      "right" : "public AsyncExecutionAspectSupport(Executor defaultExecutor)",
      "info" : "MethodDeclaration[3091-3314]:MethodDeclaration[3631-3854]"
    }, {
      "left" : "public void setExecutor(Executor defaultExecutor)",
      "right" : "public void setExecutor(Executor defaultExecutor)",
      "info" : "MethodDeclaration[3318-3920]:MethodDeclaration[3858-4460]"
    }, {
      "left" : "public void setExceptionHandler(AsyncUncaughtExceptionHandler exceptionHandler)",
      "right" : "public void setExceptionHandler(AsyncUncaughtExceptionHandler exceptionHandler)",
      "info" : "MethodDeclaration[3923-4219]:MethodDeclaration[4463-4759]"
    }, {
      "left" : "public void setBeanFactory(BeanFactory beanFactory)",
      "right" : "public void setBeanFactory(BeanFactory beanFactory)",
      "info" : "MethodDeclaration[4222-4416]:MethodDeclaration[4762-4956]"
    }, {
      "left" : "protected AsyncTaskExecutor determineAsyncExecutor(Method method)",
      "right" : "protected AsyncTaskExecutor determineAsyncExecutor(Method method)",
      "info" : "MethodDeclaration[4420-5554]:MethodDeclaration[4960-6094]"
    }, {
      "left" : "protected abstract String getExecutorQualifier(Method method);",
      "right" : "protected abstract String getExecutorQualifier(Method method);",
      "info" : "MethodDeclaration[5557-6180]:MethodDeclaration[6097-6720]"
    }, {
      "left" : "protected void handleError(Throwable ex, Method method, Object... params) throws Exception",
      "right" : "protected void handleError(Throwable ex, Method method, Object... params) throws Exception",
      "info" : "MethodDeclaration[6183-7340]:MethodDeclaration[7644-8801]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2998-3088]:Block[3538-3628]"
    }, {
      "left" : "this.defaultExecutor = defaultExecutor;",
      "right" : "this.defaultExecutor = defaultExecutor;",
      "info" : "ExpressionStatement[3002-3041]:ExpressionStatement[3542-3581]"
    }, {
      "left" : "this.exceptionHandler = exceptionHandler;",
      "right" : "this.exceptionHandler = exceptionHandler;",
      "info" : "ExpressionStatement[3044-3085]:ExpressionStatement[3584-3625]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3242-3314]:Block[3782-3854]"
    }, {
      "left" : "this(defaultExecutor, new SimpleAsyncUncaughtExceptionHandler());",
      "right" : "this(defaultExecutor, new SimpleAsyncUncaughtExceptionHandler());",
      "info" : "ConstructorInvocation[3246-3311]:ConstructorInvocation[3786-3851]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3874-3920]:Block[4414-4460]"
    }, {
      "left" : "this.defaultExecutor = defaultExecutor;",
      "right" : "this.defaultExecutor = defaultExecutor;",
      "info" : "ExpressionStatement[3878-3917]:ExpressionStatement[4418-4457]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4171-4219]:Block[4711-4759]"
    }, {
      "left" : "this.exceptionHandler = exceptionHandler;",
      "right" : "this.exceptionHandler = exceptionHandler;",
      "info" : "ExpressionStatement[4175-4216]:ExpressionStatement[4715-4756]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4378-4416]:Block[4918-4956]"
    }, {
      "left" : "this.beanFactory = beanFactory;",
      "right" : "this.beanFactory = beanFactory;",
      "info" : "ExpressionStatement[4382-4413]:ExpressionStatement[4922-4953]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4752-5554]:Block[5292-6094]"
    }, {
      "left" : "AsyncTaskExecutor executor = this.executors.get(method);",
      "right" : "AsyncTaskExecutor executor = this.executors.get(method);",
      "info" : "VariableDeclarationStatement[4756-4812]:VariableDeclarationStatement[5296-5352]"
    }, {
      "left" : "if (executor == null)",
      "right" : "if (executor == null)",
      "info" : "IfStatement[4815-5532]:IfStatement[5355-6072]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4837-5532]:Block[5377-6072]"
    }, {
      "left" : "Executor executorToUse = this.defaultExecutor;",
      "right" : "Executor executorToUse = this.defaultExecutor;",
      "info" : "VariableDeclarationStatement[4842-4888]:VariableDeclarationStatement[5382-5428]"
    }, {
      "left" : "String qualifier = getExecutorQualifier(method);",
      "right" : "String qualifier = getExecutorQualifier(method);",
      "info" : "VariableDeclarationStatement[4892-4940]:VariableDeclarationStatement[5432-5480]"
    }, {
      "left" : "if (StringUtils.hasLength(qualifier))",
      "right" : "if (StringUtils.hasLength(qualifier))",
      "info" : "IfStatement[4944-5325]:IfStatement[5484-5865]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4982-5266]:Block[5522-5806]"
    }, {
      "left" : "Assert.notNull(this.beanFactory, \"BeanFactory must be set on \" + getClass().getSimpleName() +\n\t\t\t\t\t\t\" to access qualified executor '\" + qualifier + \"'\");",
      "right" : "Assert.notNull(this.beanFactory, \"BeanFactory must be set on \" + getClass().getSimpleName() +\n\t\t\t\t\t\t\" to access qualified executor '\" + qualifier + \"'\");",
      "info" : "ExpressionStatement[4988-5141]:ExpressionStatement[5528-5681]"
    }, {
      "left" : "executorToUse = BeanFactoryAnnotationUtils.qualifiedBeanOfType(\n\t\t\t\t\t\tthis.beanFactory, Executor.class, qualifier);",
      "right" : "executorToUse = BeanFactoryAnnotationUtils.qualifiedBeanOfType(\n\t\t\t\t\t\tthis.beanFactory, Executor.class, qualifier);",
      "info" : "ExpressionStatement[5146-5261]:ExpressionStatement[5686-5801]"
    }, {
      "left" : "if (executorToUse == null)",
      "right" : "if (executorToUse == null)",
      "info" : "IfStatement[5275-5325]:IfStatement[5815-5865]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5302-5325]:Block[5842-5865]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[5308-5320]:ReturnStatement[5848-5860]"
    }, {
      "left" : "executor = (executorToUse instanceof AsyncListenableTaskExecutor ?\n\t\t\t\t\t(AsyncListenableTaskExecutor) executorToUse : new TaskExecutorAdapter(executorToUse));",
      "right" : "executor = (executorToUse instanceof AsyncListenableTaskExecutor ?\n\t\t\t\t\t(AsyncListenableTaskExecutor) executorToUse : new TaskExecutorAdapter(executorToUse));",
      "info" : "ExpressionStatement[5329-5487]:ExpressionStatement[5869-6027]"
    }, {
      "left" : "this.executors.put(method, executor);",
      "right" : "this.executors.put(method, executor);",
      "info" : "ExpressionStatement[5491-5528]:ExpressionStatement[6031-6068]"
    }, {
      "left" : "return executor;",
      "right" : "return executor;",
      "info" : "ReturnStatement[5535-5551]:ReturnStatement[6075-6091]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6887-7340]:Block[8348-8801]"
    }, {
      "left" : "if (Future.class.isAssignableFrom(method.getReturnType()))",
      "right" : "if (Future.class.isAssignableFrom(method.getReturnType()))",
      "info" : "IfStatement[6891-7337]:IfStatement[8352-8798]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6950-6996]:Block[8411-8457]"
    }, {
      "left" : "ReflectionUtils.rethrowException(ex);",
      "right" : "ReflectionUtils.rethrowException(ex);",
      "info" : "ExpressionStatement[6955-6992]:ExpressionStatement[8416-8453]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7004-7337]:Block[8465-8798]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[7084-7333]:TryStatement[8545-8794]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7088-7165]:Block[8549-8626]"
    }, {
      "left" : "this.exceptionHandler.handleUncaughtException(ex, method, params);",
      "right" : "this.exceptionHandler.handleUncaughtException(ex, method, params);",
      "info" : "ExpressionStatement[7094-7160]:ExpressionStatement[8555-8621]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7191-7333]:Block[8652-8794]"
    }, {
      "left" : "logger.error(\"Exception handler for async method '\" + method.toGenericString() +\n\t\t\t\t\t\t\"' threw unexpected exception itself\", ex2);",
      "right" : "logger.error(\"Exception handler for async method '\" + method.toGenericString() +\n\t\t\t\t\t\t\"' threw unexpected exception itself\", ex2);",
      "info" : "ExpressionStatement[7197-7328]:ExpressionStatement[8658-8789]"
    } ]
  },
  "interFileMappings" : { }
}