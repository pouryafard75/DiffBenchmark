{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "IRFactory",
      "right" : "IRFactory",
      "info" : "TypeDeclaration[3979-48268]:TypeDeclaration[3979-48544]"
    }, {
      "left" : "private final String sourceString;",
      "right" : "private final String sourceString;",
      "info" : "FieldDeclaration[4070-4104]:FieldDeclaration[4070-4104]"
    }, {
      "left" : "private final String sourceName;",
      "right" : "private final String sourceName;",
      "info" : "FieldDeclaration[4107-4139]:FieldDeclaration[4107-4139]"
    }, {
      "left" : "private final Config config;",
      "right" : "private final Config config;",
      "info" : "FieldDeclaration[4142-4170]:FieldDeclaration[4142-4170]"
    }, {
      "left" : "private final ErrorReporter errorReporter;",
      "right" : "private final ErrorReporter errorReporter;",
      "info" : "FieldDeclaration[4173-4215]:FieldDeclaration[4173-4215]"
    }, {
      "left" : "private final TransformDispatcher transformDispatcher;",
      "right" : "private final TransformDispatcher transformDispatcher;",
      "info" : "FieldDeclaration[4218-4272]:FieldDeclaration[4218-4272]"
    }, {
      "left" : "private final Set<String> ALLOWED_DIRECTIVES = Sets.newHashSet(\"use strict\");",
      "right" : "private final Set<String> ALLOWED_DIRECTIVES = Sets.newHashSet(\"use strict\");",
      "info" : "FieldDeclaration[4310-4387]:FieldDeclaration[4310-4387]"
    }, {
      "left" : "Node rootNodeJsDocHolder = new Node(Token.SCRIPT);",
      "right" : "Node rootNodeJsDocHolder = new Node(Token.SCRIPT);",
      "info" : "FieldDeclaration[4516-4566]:FieldDeclaration[4516-4566]"
    }, {
      "left" : "Node.FileLevelJsDocBuilder fileLevelJsDocBuilder =\n      rootNodeJsDocHolder.getJsDocBuilderForNode();",
      "right" : "Node.FileLevelJsDocBuilder fileLevelJsDocBuilder =\n      rootNodeJsDocHolder.getJsDocBuilderForNode();",
      "info" : "FieldDeclaration[4569-4671]:FieldDeclaration[4569-4671]"
    }, {
      "left" : "JSDocInfo fileOverviewInfo = null;",
      "right" : "JSDocInfo fileOverviewInfo = null;",
      "info" : "FieldDeclaration[4674-4708]:FieldDeclaration[4674-4708]"
    }, {
      "left" : "private Node templateNode;",
      "right" : "private Node templateNode;",
      "info" : "FieldDeclaration[4830-4856]:FieldDeclaration[4830-4856]"
    }, {
      "left" : "private IRFactory(String sourceString,\n                    String sourceName,\n                    Config config,\n                    ErrorReporter errorReporter)",
      "right" : "private IRFactory(String sourceString,\n                    String sourceName,\n                    Config config,\n                    ErrorReporter errorReporter)",
      "info" : "MethodDeclaration[4939-5428]:MethodDeclaration[4939-5428]"
    }, {
      "left" : "private Node createTemplateNode()",
      "right" : "private Node createTemplateNode()",
      "info" : "MethodDeclaration[5664-5878]:MethodDeclaration[5664-5878]"
    }, {
      "left" : "public static Node transformTree(AstRoot node,\n                                   String sourceString,\n                                   Config config,\n                                   ErrorReporter errorReporter)",
      "right" : "public static Node transformTree(AstRoot node,\n                                   String sourceString,\n                                   Config config,\n                                   ErrorReporter errorReporter)",
      "info" : "MethodDeclaration[5882-6570]:MethodDeclaration[5882-6570]"
    }, {
      "left" : "private void setFileOverviewJsDoc(Node irNode)",
      "right" : "private void setFileOverviewJsDoc(Node irNode)",
      "info" : "MethodDeclaration[6574-7115]:MethodDeclaration[6574-7115]"
    }, {
      "left" : "private Node transformBlock(AstNode node)",
      "right" : "private Node transformBlock(AstNode node)",
      "info" : "MethodDeclaration[7119-7589]:MethodDeclaration[7119-7589]"
    }, {
      "left" : "private boolean handlePossibleFileOverviewJsDoc(\n      JsDocInfoParser jsDocParser)",
      "right" : "private boolean handlePossibleFileOverviewJsDoc(\n      JsDocInfoParser jsDocParser)",
      "info" : "MethodDeclaration[7593-7936]:MethodDeclaration[7593-7936]"
    }, {
      "left" : "private void handlePossibleFileOverviewJsDoc(Comment comment)",
      "right" : "private void handlePossibleFileOverviewJsDoc(Comment comment)",
      "info" : "MethodDeclaration[7940-8152]:MethodDeclaration[7940-8152]"
    }, {
      "left" : "private JSDocInfo handleJsDoc(AstNode node)",
      "right" : "private JSDocInfo handleJsDoc(AstNode node)",
      "info" : "MethodDeclaration[8156-8526]:MethodDeclaration[8156-8526]"
    }, {
      "left" : "private Node transform(AstNode node)",
      "right" : "private Node transform(AstNode node)",
      "info" : "MethodDeclaration[8530-9511]:MethodDeclaration[8530-9511]"
    }, {
      "left" : "private JsDocInfoParser createJsDocInfoParser(Comment node)",
      "right" : "private JsDocInfoParser createJsDocInfoParser(Comment node)",
      "info" : "MethodDeclaration[9515-10721]:MethodDeclaration[9515-10721]"
    }, {
      "left" : "private int position2charno(int position)",
      "right" : "private int position2charno(int position)",
      "info" : "MethodDeclaration[10725-10994]:MethodDeclaration[10725-10994]"
    }, {
      "left" : "private Node justTransform(AstNode node)",
      "right" : "private Node justTransform(AstNode node)",
      "info" : "MethodDeclaration[10998-11090]:MethodDeclaration[10998-11090]"
    }, {
      "left" : "TransformDispatcher",
      "right" : "TransformDispatcher",
      "info" : "TypeDeclaration[11094-32282]:TypeDeclaration[11094-32558]"
    }, {
      "left" : "private Node processGeneric(\n        com.google.javascript.jscomp.mozilla.rhino.Node n)",
      "right" : "private Node processGeneric(\n        com.google.javascript.jscomp.mozilla.rhino.Node n)",
      "info" : "MethodDeclaration[11167-11477]:MethodDeclaration[11167-11477]"
    }, {
      "left" : "private Node transformAsString(AstNode n)",
      "right" : "private Node transformAsString(AstNode n)",
      "info" : "MethodDeclaration[11483-12209]:MethodDeclaration[11483-12209]"
    }, {
      "left" : "Node processArrayLiteral(ArrayLiteral literalNode)",
      "right" : "Node processArrayLiteral(ArrayLiteral literalNode)",
      "info" : "MethodDeclaration[12215-13077]:MethodDeclaration[12215-13077]"
    }, {
      "left" : "Node processAssignment(Assignment assignmentNode)",
      "right" : "Node processAssignment(Assignment assignmentNode)",
      "info" : "MethodDeclaration[13083-13459]:MethodDeclaration[13083-13459]"
    }, {
      "left" : "Node processAstRoot(AstRoot rootNode)",
      "right" : "Node processAstRoot(AstRoot rootNode)",
      "info" : "MethodDeclaration[13465-13756]:MethodDeclaration[13465-13756]"
    }, {
      "left" : "private void parseDirectives(Node node)",
      "right" : "private void parseDirectives(Node node)",
      "info" : "MethodDeclaration[13762-14613]:MethodDeclaration[13762-14613]"
    }, {
      "left" : "private boolean isDirective(Node n)",
      "right" : "private boolean isDirective(Node n)",
      "info" : "MethodDeclaration[14619-14929]:MethodDeclaration[14619-14929]"
    }, {
      "left" : "Node processBlock(Block blockNode)",
      "right" : "Node processBlock(Block blockNode)",
      "info" : "MethodDeclaration[14935-15031]:MethodDeclaration[14935-15031]"
    }, {
      "left" : "Node processBreakStatement(BreakStatement statementNode)",
      "right" : "Node processBreakStatement(BreakStatement statementNode)",
      "info" : "MethodDeclaration[15037-15426]:MethodDeclaration[15037-15426]"
    }, {
      "left" : "Node processCatchClause(CatchClause clauseNode)",
      "right" : "Node processCatchClause(CatchClause clauseNode)",
      "info" : "MethodDeclaration[15432-15920]:MethodDeclaration[15432-15920]"
    }, {
      "left" : "Node processConditionalExpression(ConditionalExpression exprNode)",
      "right" : "Node processConditionalExpression(ConditionalExpression exprNode)",
      "info" : "MethodDeclaration[15926-16212]:MethodDeclaration[15926-16212]"
    }, {
      "left" : "Node processContinueStatement(ContinueStatement statementNode)",
      "right" : "Node processContinueStatement(ContinueStatement statementNode)",
      "info" : "MethodDeclaration[16218-16606]:MethodDeclaration[16218-16606]"
    }, {
      "left" : "Node processDoLoop(DoLoop loopNode)",
      "right" : "Node processDoLoop(DoLoop loopNode)",
      "info" : "MethodDeclaration[16612-16804]:MethodDeclaration[16612-16804]"
    }, {
      "left" : "Node processElementGet(ElementGet getNode)",
      "right" : "Node processElementGet(ElementGet getNode)",
      "info" : "MethodDeclaration[16810-17007]:MethodDeclaration[16810-17007]"
    }, {
      "left" : "Node processEmptyExpression(EmptyExpression exprNode)",
      "right" : "Node processEmptyExpression(EmptyExpression exprNode)",
      "info" : "MethodDeclaration[17013-17147]:MethodDeclaration[17013-17147]"
    }, {
      "left" : "Node processExpressionStatement(ExpressionStatement statementNode)",
      "right" : "Node processExpressionStatement(ExpressionStatement statementNode)",
      "info" : "MethodDeclaration[17153-17401]:MethodDeclaration[17153-17401]"
    }, {
      "left" : "Node processForInLoop(ForInLoop loopNode)",
      "right" : "Node processForInLoop(ForInLoop loopNode)",
      "info" : "MethodDeclaration[17407-17656]:MethodDeclaration[17407-17656]"
    }, {
      "left" : "Node processForLoop(ForLoop loopNode)",
      "right" : "Node processForLoop(ForLoop loopNode)",
      "info" : "MethodDeclaration[17662-17992]:MethodDeclaration[17662-17992]"
    }, {
      "left" : "Node processFunctionCall(FunctionCall callNode)",
      "right" : "Node processFunctionCall(FunctionCall callNode)",
      "info" : "MethodDeclaration[17998-18496]:MethodDeclaration[17998-18496]"
    }, {
      "left" : "Node processFunctionNode(FunctionNode functionNode)",
      "right" : "Node processFunctionNode(FunctionNode functionNode)",
      "info" : "MethodDeclaration[18502-20537]:MethodDeclaration[18502-20813]"
    }, {
      "left" : "Node processIfStatement(IfStatement statementNode)",
      "right" : "Node processIfStatement(IfStatement statementNode)",
      "info" : "MethodDeclaration[20543-20942]:MethodDeclaration[20819-21218]"
    }, {
      "left" : "Node processInfixExpression(InfixExpression exprNode)",
      "right" : "Node processInfixExpression(InfixExpression exprNode)",
      "info" : "MethodDeclaration[20948-21664]:MethodDeclaration[21224-21940]"
    }, {
      "left" : "Node processKeywordLiteral(KeywordLiteral literalNode)",
      "right" : "Node processKeywordLiteral(KeywordLiteral literalNode)",
      "info" : "MethodDeclaration[21670-21811]:MethodDeclaration[21946-22087]"
    }, {
      "left" : "Node processLabel(Label labelNode)",
      "right" : "Node processLabel(Label labelNode)",
      "info" : "MethodDeclaration[21817-21940]:MethodDeclaration[22093-22216]"
    }, {
      "left" : "Node processLabeledStatement(LabeledStatement statementNode)",
      "right" : "Node processLabeledStatement(LabeledStatement statementNode)",
      "info" : "MethodDeclaration[21946-22626]:MethodDeclaration[22222-22902]"
    }, {
      "left" : "Node processName(Name nameNode)",
      "right" : "Node processName(Name nameNode)",
      "info" : "MethodDeclaration[22632-22751]:MethodDeclaration[22908-23027]"
    }, {
      "left" : "Node processNewExpression(NewExpression exprNode)",
      "right" : "Node processNewExpression(NewExpression exprNode)",
      "info" : "MethodDeclaration[22757-22872]:MethodDeclaration[23033-23148]"
    }, {
      "left" : "Node processNumberLiteral(NumberLiteral literalNode)",
      "right" : "Node processNumberLiteral(NumberLiteral literalNode)",
      "info" : "MethodDeclaration[22878-23005]:MethodDeclaration[23154-23281]"
    }, {
      "left" : "Node processObjectLiteral(ObjectLiteral literalNode)",
      "right" : "Node processObjectLiteral(ObjectLiteral literalNode)",
      "info" : "MethodDeclaration[23011-24220]:MethodDeclaration[23287-24496]"
    }, {
      "left" : "Node getFnParamNode(Node fnNode)",
      "right" : "Node getFnParamNode(Node fnNode)",
      "info" : "MethodDeclaration[24226-24558]:MethodDeclaration[24502-24834]"
    }, {
      "left" : "Node processObjectProperty(ObjectProperty propertyNode)",
      "right" : "Node processObjectProperty(ObjectProperty propertyNode)",
      "info" : "MethodDeclaration[24564-24692]:MethodDeclaration[24840-24968]"
    }, {
      "left" : "Node processParenthesizedExpression(ParenthesizedExpression exprNode)",
      "right" : "Node processParenthesizedExpression(ParenthesizedExpression exprNode)",
      "info" : "MethodDeclaration[24698-24922]:MethodDeclaration[24974-25198]"
    }, {
      "left" : "Node processPropertyGet(PropertyGet getNode)",
      "right" : "Node processPropertyGet(PropertyGet getNode)",
      "info" : "MethodDeclaration[24928-25136]:MethodDeclaration[25204-25412]"
    }, {
      "left" : "Node processRegExpLiteral(RegExpLiteral literalNode)",
      "right" : "Node processRegExpLiteral(RegExpLiteral literalNode)",
      "info" : "MethodDeclaration[25142-25775]:MethodDeclaration[25418-26051]"
    }, {
      "left" : "Node processReturnStatement(ReturnStatement statementNode)",
      "right" : "Node processReturnStatement(ReturnStatement statementNode)",
      "info" : "MethodDeclaration[25781-26053]:MethodDeclaration[26057-26329]"
    }, {
      "left" : "Node processScope(Scope scopeNode)",
      "right" : "Node processScope(Scope scopeNode)",
      "info" : "MethodDeclaration[26059-26155]:MethodDeclaration[26335-26431]"
    }, {
      "left" : "Node processStringLiteral(StringLiteral literalNode)",
      "right" : "Node processStringLiteral(StringLiteral literalNode)",
      "info" : "MethodDeclaration[26161-26305]:MethodDeclaration[26437-26581]"
    }, {
      "left" : "Node processSwitchCase(SwitchCase caseNode)",
      "right" : "Node processSwitchCase(SwitchCase caseNode)",
      "info" : "MethodDeclaration[26311-27034]:MethodDeclaration[26587-27310]"
    }, {
      "left" : "Node processSwitchStatement(SwitchStatement statementNode)",
      "right" : "Node processSwitchStatement(SwitchStatement statementNode)",
      "info" : "MethodDeclaration[27040-27342]:MethodDeclaration[27316-27618]"
    }, {
      "left" : "Node processThrowStatement(ThrowStatement statementNode)",
      "right" : "Node processThrowStatement(ThrowStatement statementNode)",
      "info" : "MethodDeclaration[27348-27513]:MethodDeclaration[27624-27789]"
    }, {
      "left" : "Node processTryStatement(TryStatement statementNode)",
      "right" : "Node processTryStatement(TryStatement statementNode)",
      "info" : "MethodDeclaration[27519-28612]:MethodDeclaration[27795-28888]"
    }, {
      "left" : "Node processUnaryExpression(UnaryExpression exprNode)",
      "right" : "Node processUnaryExpression(UnaryExpression exprNode)",
      "info" : "MethodDeclaration[28618-29520]:MethodDeclaration[28894-29796]"
    }, {
      "left" : "private boolean validAssignmentTarget(Node target)",
      "right" : "private boolean validAssignmentTarget(Node target)",
      "info" : "MethodDeclaration[29526-29750]:MethodDeclaration[29802-30026]"
    }, {
      "left" : "Node processVariableDeclaration(VariableDeclaration declarationNode)",
      "right" : "Node processVariableDeclaration(VariableDeclaration declarationNode)",
      "info" : "MethodDeclaration[29756-30223]:MethodDeclaration[30032-30499]"
    }, {
      "left" : "Node processVariableInitializer(VariableInitializer initializerNode)",
      "right" : "Node processVariableInitializer(VariableInitializer initializerNode)",
      "info" : "MethodDeclaration[30229-30574]:MethodDeclaration[30505-30850]"
    }, {
      "left" : "Node processWhileLoop(WhileLoop loopNode)",
      "right" : "Node processWhileLoop(WhileLoop loopNode)",
      "info" : "MethodDeclaration[30580-30781]:MethodDeclaration[30856-31057]"
    }, {
      "left" : "Node processWithStatement(WithStatement statementNode)",
      "right" : "Node processWithStatement(WithStatement statementNode)",
      "info" : "MethodDeclaration[30787-31016]:MethodDeclaration[31063-31292]"
    }, {
      "left" : "Node processIllegalToken(AstNode node)",
      "right" : "Node processIllegalToken(AstNode node)",
      "info" : "MethodDeclaration[31022-31339]:MethodDeclaration[31298-31615]"
    }, {
      "left" : "void reportDestructuringAssign(AstNode node)",
      "right" : "void reportDestructuringAssign(AstNode node)",
      "info" : "MethodDeclaration[31345-31530]:MethodDeclaration[31621-31806]"
    }, {
      "left" : "void reportGetter(AstNode node)",
      "right" : "void reportGetter(AstNode node)",
      "info" : "MethodDeclaration[31536-31720]:MethodDeclaration[31812-31996]"
    }, {
      "left" : "void reportSetter(AstNode node)",
      "right" : "void reportSetter(AstNode node)",
      "info" : "MethodDeclaration[31726-31910]:MethodDeclaration[32002-32186]"
    }, {
      "left" : "void reportGetterParam(AstNode node)",
      "right" : "void reportGetterParam(AstNode node)",
      "info" : "MethodDeclaration[31916-32090]:MethodDeclaration[32192-32366]"
    }, {
      "left" : "void reportSetterParam(AstNode node)",
      "right" : "void reportSetterParam(AstNode node)",
      "info" : "MethodDeclaration[32096-32278]:MethodDeclaration[32372-32554]"
    }, {
      "left" : "private static int transformTokenType(int token)",
      "right" : "private static int transformTokenType(int token)",
      "info" : "MethodDeclaration[32286-47329]:MethodDeclaration[32562-47605]"
    }, {
      "left" : "private Node newNode(int type)",
      "right" : "private Node newNode(int type)",
      "info" : "MethodDeclaration[47405-47497]:MethodDeclaration[47681-47773]"
    }, {
      "left" : "private Node newNode(int type, Node child1)",
      "right" : "private Node newNode(int type, Node child1)",
      "info" : "MethodDeclaration[47501-47614]:MethodDeclaration[47777-47890]"
    }, {
      "left" : "private Node newNode(int type, Node child1, Node child2)",
      "right" : "private Node newNode(int type, Node child1, Node child2)",
      "info" : "MethodDeclaration[47618-47752]:MethodDeclaration[47894-48028]"
    }, {
      "left" : "private Node newNode(int type, Node child1, Node child2, Node child3)",
      "right" : "private Node newNode(int type, Node child1, Node child2, Node child3)",
      "info" : "MethodDeclaration[47756-47911]:MethodDeclaration[48032-48187]"
    }, {
      "left" : "private Node newStringNode(String value)",
      "right" : "private Node newStringNode(String value)",
      "info" : "MethodDeclaration[47915-48024]:MethodDeclaration[48191-48300]"
    }, {
      "left" : "private Node newStringNode(int type, String value)",
      "right" : "private Node newStringNode(int type, String value)",
      "info" : "MethodDeclaration[48028-48153]:MethodDeclaration[48304-48429]"
    }, {
      "left" : "private Node newNumberNode(Double value)",
      "right" : "private Node newNumberNode(Double value)",
      "info" : "MethodDeclaration[48157-48266]:MethodDeclaration[48433-48542]"
    } ],
    "mappings" : [
 {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[4939-4946]:Modifier[4939-4946]"
    }, {
      "left" : "IRFactory",
      "right" : "IRFactory",
      "info" : "SimpleName[4947-4956]:SimpleName[4947-4956]"
    }, {
      "left" : "String sourceString",
      "right" : "String sourceString",
      "info" : "SingleVariableDeclaration[4957-4976]:SingleVariableDeclaration[4957-4976]"
    }, {
      "left" : "String sourceName",
      "right" : "String sourceName",
      "info" : "SingleVariableDeclaration[4998-5015]:SingleVariableDeclaration[4998-5015]"
    }, {
      "left" : "Config config",
      "right" : "Config config",
      "info" : "SingleVariableDeclaration[5037-5050]:SingleVariableDeclaration[5037-5050]"
    }, {
      "left" : "ErrorReporter errorReporter",
      "right" : "ErrorReporter errorReporter",
      "info" : "SingleVariableDeclaration[5072-5099]:SingleVariableDeclaration[5072-5099]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5101-5428]:Block[5101-5428]"
    }, {
      "left" : "this.sourceString = sourceString;",
      "right" : "this.sourceString = sourceString;",
      "info" : "ExpressionStatement[5107-5140]:ExpressionStatement[5107-5140]"
    }, {
      "left" : "this.sourceName = sourceName;",
      "right" : "this.sourceName = sourceName;",
      "info" : "ExpressionStatement[5145-5174]:ExpressionStatement[5145-5174]"
    }, {
      "left" : "this.config = config;",
      "right" : "this.config = config;",
      "info" : "ExpressionStatement[5179-5200]:ExpressionStatement[5179-5200]"
    }, {
      "left" : "this.errorReporter = errorReporter;",
      "right" : "this.errorReporter = errorReporter;",
      "info" : "ExpressionStatement[5205-5240]:ExpressionStatement[5205-5240]"
    }, {
      "left" : "this.transformDispatcher = new TransformDispatcher();",
      "right" : "this.transformDispatcher = new TransformDispatcher();",
      "info" : "ExpressionStatement[5245-5298]:ExpressionStatement[5245-5298]"
    }, {
      "left" : "this.templateNode = createTemplateNode();",
      "right" : "this.templateNode = createTemplateNode();",
      "info" : "ExpressionStatement[5383-5424]:ExpressionStatement[5383-5424]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[5664-5671]:Modifier[5664-5671]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[5672-5676]:SimpleType[5672-5676]"
    }, {
      "left" : "createTemplateNode",
      "right" : "createTemplateNode",
      "info" : "SimpleName[5677-5695]:SimpleName[5677-5695]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5698-5878]:Block[5698-5878]"
    }, {
      "left" : "Node templateNode = new Node(Token.SCRIPT);",
      "right" : "Node templateNode = new Node(Token.SCRIPT);",
      "info" : "VariableDeclarationStatement[5746-5789]:VariableDeclarationStatement[5746-5789]"
    }, {
      "left" : "templateNode.putProp(Node.SOURCENAME_PROP, sourceName);",
      "right" : "templateNode.putProp(Node.SOURCENAME_PROP, sourceName);",
      "info" : "ExpressionStatement[5794-5849]:ExpressionStatement[5794-5849]"
    }, {
      "left" : "return templateNode;",
      "right" : "return templateNode;",
      "info" : "ReturnStatement[5854-5874]:ReturnStatement[5854-5874]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[5882-5888]:Modifier[5882-5888]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[5889-5895]:Modifier[5889-5895]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[5896-5900]:SimpleType[5896-5900]"
    }, {
      "left" : "transformTree",
      "right" : "transformTree",
      "info" : "SimpleName[5901-5914]:SimpleName[5901-5914]"
    }, {
      "left" : "AstRoot node",
      "right" : "AstRoot node",
      "info" : "SingleVariableDeclaration[5915-5927]:SingleVariableDeclaration[5915-5927]"
    }, {
      "left" : "String sourceString",
      "right" : "String sourceString",
      "info" : "SingleVariableDeclaration[5964-5983]:SingleVariableDeclaration[5964-5983]"
    }, {
      "left" : "Config config",
      "right" : "Config config",
      "info" : "SingleVariableDeclaration[6020-6033]:SingleVariableDeclaration[6020-6033]"
    }, {
      "left" : "ErrorReporter errorReporter",
      "right" : "ErrorReporter errorReporter",
      "info" : "SingleVariableDeclaration[6070-6097]:SingleVariableDeclaration[6070-6097]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6099-6570]:Block[6099-6570]"
    }, {
      "left" : "IRFactory irFactory = new IRFactory(sourceString, node.getSourceName(),\n        config, errorReporter);",
      "right" : "IRFactory irFactory = new IRFactory(sourceString, node.getSourceName(),\n        config, errorReporter);",
      "info" : "VariableDeclarationStatement[6105-6208]:VariableDeclarationStatement[6105-6208]"
    }, {
      "left" : "Node irNode = irFactory.transform(node);",
      "right" : "Node irNode = irFactory.transform(node);",
      "info" : "VariableDeclarationStatement[6213-6253]:VariableDeclarationStatement[6213-6253]"
    }, {
      "left" : "if (node.getComments() != null)",
      "right" : "if (node.getComments() != null)",
      "info" : "IfStatement[6259-6501]:IfStatement[6259-6501]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6291-6501]:Block[6291-6501]"
    }, {
      "left" : "for (Comment comment : node.getComments())",
      "right" : "for (Comment comment : node.getComments())",
      "info" : "EnhancedForStatement[6299-6495]:EnhancedForStatement[6299-6495]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6342-6495]:Block[6342-6495]"
    }, {
      "left" : "if (comment.getCommentType() == JSDOC && !comment.isParsed())",
      "right" : "if (comment.getCommentType() == JSDOC && !comment.isParsed())",
      "info" : "IfStatement[6352-6487]:IfStatement[6352-6487]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6414-6487]:Block[6414-6487]"
    }, {
      "left" : "irFactory.handlePossibleFileOverviewJsDoc(comment);",
      "right" : "irFactory.handlePossibleFileOverviewJsDoc(comment);",
      "info" : "ExpressionStatement[6426-6477]:ExpressionStatement[6426-6477]"
    }, {
      "left" : "irFactory.setFileOverviewJsDoc(irNode);",
      "right" : "irFactory.setFileOverviewJsDoc(irNode);",
      "info" : "ExpressionStatement[6507-6546]:ExpressionStatement[6507-6546]"
    }, {
      "left" : "return irNode;",
      "right" : "return irNode;",
      "info" : "ReturnStatement[6552-6566]:ReturnStatement[6552-6566]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[6574-6581]:Modifier[6574-6581]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[6582-6586]:PrimitiveType[6582-6586]"
    }, {
      "left" : "setFileOverviewJsDoc",
      "right" : "setFileOverviewJsDoc",
      "info" : "SimpleName[6587-6607]:SimpleName[6587-6607]"
    }, {
      "left" : "Node irNode",
      "right" : "Node irNode",
      "info" : "SingleVariableDeclaration[6608-6619]:SingleVariableDeclaration[6608-6619]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6621-7115]:Block[6621-7115]"
    }, {
      "left" : "irNode.setJSDocInfo(rootNodeJsDocHolder.getJSDocInfo());",
      "right" : "irNode.setJSDocInfo(rootNodeJsDocHolder.getJSDocInfo());",
      "info" : "ExpressionStatement[6784-6840]:ExpressionStatement[6784-6840]"
    }, {
      "left" : "if (fileOverviewInfo != null)",
      "right" : "if (fileOverviewInfo != null)",
      "info" : "IfStatement[6845-7111]:IfStatement[6845-7111]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6875-7111]:Block[6875-7111]"
    }, {
      "left" : "if ((irNode.getJSDocInfo() != null) &&\n          (irNode.getJSDocInfo().getLicense() != null))",
      "right" : "if ((irNode.getJSDocInfo() != null) &&\n          (irNode.getJSDocInfo().getLicense() != null))",
      "info" : "IfStatement[6883-7060]:IfStatement[6883-7060]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6978-7060]:Block[6978-7060]"
    }, {
      "left" : "fileOverviewInfo.setLicense(irNode.getJSDocInfo().getLicense());",
      "right" : "fileOverviewInfo.setLicense(irNode.getJSDocInfo().getLicense());",
      "info" : "ExpressionStatement[6988-7052]:ExpressionStatement[6988-7052]"
    }, {
      "left" : "irNode.setJSDocInfo(fileOverviewInfo);",
      "right" : "irNode.setJSDocInfo(fileOverviewInfo);",
      "info" : "ExpressionStatement[7067-7105]:ExpressionStatement[7067-7105]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[7119-7126]:Modifier[7119-7126]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[7127-7131]:SimpleType[7127-7131]"
    }, {
      "left" : "transformBlock",
      "right" : "transformBlock",
      "info" : "SimpleName[7132-7146]:SimpleName[7132-7146]"
    }, {
      "left" : "AstNode node",
      "right" : "AstNode node",
      "info" : "SingleVariableDeclaration[7147-7159]:SingleVariableDeclaration[7147-7159]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7161-7589]:Block[7161-7589]"
    }, {
      "left" : "Node irNode = transform(node);",
      "right" : "Node irNode = transform(node);",
      "info" : "VariableDeclarationStatement[7167-7197]:VariableDeclarationStatement[7167-7197]"
    }, {
      "left" : "if (irNode.getType() != Token.BLOCK)",
      "right" : "if (irNode.getType() != Token.BLOCK)",
      "info" : "IfStatement[7202-7566]:IfStatement[7202-7566]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7239-7566]:Block[7239-7566]"
    }, {
      "left" : "if (irNode.getType() == Token.EMPTY)",
      "right" : "if (irNode.getType() == Token.EMPTY)",
      "info" : "IfStatement[7247-7560]:IfStatement[7247-7560]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7284-7368]:Block[7284-7368]"
    }, {
      "left" : "irNode.setType(Token.BLOCK);",
      "right" : "irNode.setType(Token.BLOCK);",
      "info" : "ExpressionStatement[7294-7322]:ExpressionStatement[7294-7322]"
    }, {
      "left" : "irNode.setWasEmptyNode(true);",
      "right" : "irNode.setWasEmptyNode(true);",
      "info" : "ExpressionStatement[7331-7360]:ExpressionStatement[7331-7360]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7374-7560]:Block[7374-7560]"
    }, {
      "left" : "Node newBlock = newNode(Token.BLOCK, irNode);",
      "right" : "Node newBlock = newNode(Token.BLOCK, irNode);",
      "info" : "VariableDeclarationStatement[7384-7429]:VariableDeclarationStatement[7384-7429]"
    }, {
      "left" : "newBlock.setLineno(irNode.getLineno());",
      "right" : "newBlock.setLineno(irNode.getLineno());",
      "info" : "ExpressionStatement[7438-7477]:ExpressionStatement[7438-7477]"
    }, {
      "left" : "newBlock.setCharno(irNode.getCharno());",
      "right" : "newBlock.setCharno(irNode.getCharno());",
      "info" : "ExpressionStatement[7486-7525]:ExpressionStatement[7486-7525]"
    }, {
      "left" : "irNode = newBlock;",
      "right" : "irNode = newBlock;",
      "info" : "ExpressionStatement[7534-7552]:ExpressionStatement[7534-7552]"
    }, {
      "left" : "return irNode;",
      "right" : "return irNode;",
      "info" : "ReturnStatement[7571-7585]:ReturnStatement[7571-7585]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[7669-7676]:Modifier[7669-7676]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[7677-7684]:PrimitiveType[7677-7684]"
    }, {
      "left" : "handlePossibleFileOverviewJsDoc",
      "right" : "handlePossibleFileOverviewJsDoc",
      "info" : "SimpleName[7685-7716]:SimpleName[7685-7716]"
    }, {
      "left" : "JsDocInfoParser jsDocParser",
      "right" : "JsDocInfoParser jsDocParser",
      "info" : "SingleVariableDeclaration[7724-7751]:SingleVariableDeclaration[7724-7751]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7753-7936]:Block[7753-7936]"
    }, {
      "left" : "if (jsDocParser.getFileOverviewJSDocInfo() != fileOverviewInfo)",
      "right" : "if (jsDocParser.getFileOverviewJSDocInfo() != fileOverviewInfo)",
      "info" : "IfStatement[7759-7914]:IfStatement[7759-7914]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7823-7914]:Block[7823-7914]"
    }, {
      "left" : "fileOverviewInfo = jsDocParser.getFileOverviewJSDocInfo();",
      "right" : "fileOverviewInfo = jsDocParser.getFileOverviewJSDocInfo();",
      "info" : "ExpressionStatement[7831-7889]:ExpressionStatement[7831-7889]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[7896-7908]:ReturnStatement[7896-7908]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[7919-7932]:ReturnStatement[7919-7932]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[7940-7947]:Modifier[7940-7947]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[7948-7952]:PrimitiveType[7948-7952]"
    }, {
      "left" : "handlePossibleFileOverviewJsDoc",
      "right" : "handlePossibleFileOverviewJsDoc",
      "info" : "SimpleName[7953-7984]:SimpleName[7953-7984]"
    }, {
      "left" : "Comment comment",
      "right" : "Comment comment",
      "info" : "SingleVariableDeclaration[7985-8000]:SingleVariableDeclaration[7985-8000]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8002-8152]:Block[8002-8152]"
    }, {
      "left" : "JsDocInfoParser jsDocParser = createJsDocInfoParser(comment);",
      "right" : "JsDocInfoParser jsDocParser = createJsDocInfoParser(comment);",
      "info" : "VariableDeclarationStatement[8008-8069]:VariableDeclarationStatement[8008-8069]"
    }, {
      "left" : "comment.setParsed(true);",
      "right" : "comment.setParsed(true);",
      "info" : "ExpressionStatement[8074-8098]:ExpressionStatement[8074-8098]"
    }, {
      "left" : "handlePossibleFileOverviewJsDoc(jsDocParser);",
      "right" : "handlePossibleFileOverviewJsDoc(jsDocParser);",
      "info" : "ExpressionStatement[8103-8148]:ExpressionStatement[8103-8148]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[8156-8163]:Modifier[8156-8163]"
    }, {
      "left" : "JSDocInfo",
      "right" : "JSDocInfo",
      "info" : "SimpleType[8164-8173]:SimpleType[8164-8173]"
    }, {
      "left" : "handleJsDoc",
      "right" : "handleJsDoc",
      "info" : "SimpleName[8174-8185]:SimpleName[8174-8185]"
    }, {
      "left" : "AstNode node",
      "right" : "AstNode node",
      "info" : "SingleVariableDeclaration[8186-8198]:SingleVariableDeclaration[8186-8198]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8200-8526]:Block[8200-8526]"
    }, {
      "left" : "Comment comment = node.getJsDocNode();",
      "right" : "Comment comment = node.getJsDocNode();",
      "info" : "VariableDeclarationStatement[8206-8244]:VariableDeclarationStatement[8206-8244]"
    }, {
      "left" : "if (comment != null)",
      "right" : "if (comment != null)",
      "info" : "IfStatement[8249-8505]:IfStatement[8249-8505]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8270-8505]:Block[8270-8505]"
    }, {
      "left" : "JsDocInfoParser jsDocParser = createJsDocInfoParser(comment);",
      "right" : "JsDocInfoParser jsDocParser = createJsDocInfoParser(comment);",
      "info" : "VariableDeclarationStatement[8278-8339]:VariableDeclarationStatement[8278-8339]"
    }, {
      "left" : "comment.setParsed(true);",
      "right" : "comment.setParsed(true);",
      "info" : "ExpressionStatement[8346-8370]:ExpressionStatement[8346-8370]"
    }, {
      "left" : "if (!handlePossibleFileOverviewJsDoc(jsDocParser))",
      "right" : "if (!handlePossibleFileOverviewJsDoc(jsDocParser))",
      "info" : "IfStatement[8377-8499]:IfStatement[8377-8499]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8428-8499]:Block[8428-8499]"
    }, {
      "left" : "return jsDocParser.retrieveAndResetParsedJSDocInfo();",
      "right" : "return jsDocParser.retrieveAndResetParsedJSDocInfo();",
      "info" : "ReturnStatement[8438-8491]:ReturnStatement[8438-8491]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[8510-8522]:ReturnStatement[8510-8522]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[8530-8537]:Modifier[8530-8537]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[8538-8542]:SimpleType[8538-8542]"
    }, {
      "left" : "transform",
      "right" : "transform",
      "info" : "SimpleName[8543-8552]:SimpleName[8543-8552]"
    }, {
      "left" : "AstNode node",
      "right" : "AstNode node",
      "info" : "SingleVariableDeclaration[8553-8565]:SingleVariableDeclaration[8553-8565]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8567-9511]:Block[8567-9511]"
    }, {
      "left" : "JSDocInfo jsDocInfo = handleJsDoc(node);",
      "right" : "JSDocInfo jsDocInfo = handleJsDoc(node);",
      "info" : "VariableDeclarationStatement[8573-8613]:VariableDeclarationStatement[8573-8613]"
    }, {
      "left" : "Node irNode = justTransform(node);",
      "right" : "Node irNode = justTransform(node);",
      "info" : "VariableDeclarationStatement[8618-8652]:VariableDeclarationStatement[8618-8652]"
    }, {
      "left" : "if (jsDocInfo != null)",
      "right" : "if (jsDocInfo != null)",
      "info" : "IfStatement[8657-8725]:IfStatement[8657-8725]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8680-8725]:Block[8680-8725]"
    }, {
      "left" : "irNode.setJSDocInfo(jsDocInfo);",
      "right" : "irNode.setJSDocInfo(jsDocInfo);",
      "info" : "ExpressionStatement[8688-8719]:ExpressionStatement[8688-8719]"
    }, {
      "left" : "if (irNode.getType() == Token.FUNCTION &&\n        irNode.getFirstChild().getLineno() != -1)",
      "right" : "if (irNode.getType() == Token.FUNCTION &&\n        irNode.getFirstChild().getLineno() != -1)",
      "info" : "IfStatement[8805-9488]:IfStatement[8805-9488]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8897-9024]:Block[8897-9024]"
    }, {
      "left" : "irNode.setLineno(irNode.getFirstChild().getLineno());",
      "right" : "irNode.setLineno(irNode.getFirstChild().getLineno());",
      "info" : "ExpressionStatement[8905-8958]:ExpressionStatement[8905-8958]"
    }, {
      "left" : "irNode.setCharno(irNode.getFirstChild().getCharno());",
      "right" : "irNode.setCharno(irNode.getFirstChild().getCharno());",
      "info" : "ExpressionStatement[8965-9018]:ExpressionStatement[8965-9018]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9030-9488]:Block[9030-9488]"
    }, {
      "left" : "if (irNode.getLineno() == -1)",
      "right" : "if (irNode.getLineno() == -1)",
      "info" : "IfStatement[9038-9482]:IfStatement[9038-9482]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9068-9482]:Block[9068-9482]"
    }, {
      "left" : "int lineno = node.getLineno();",
      "right" : "int lineno = node.getLineno();",
      "info" : "VariableDeclarationStatement[9310-9340]:VariableDeclarationStatement[9310-9340]"
    }, {
      "left" : "irNode.setLineno(lineno);",
      "right" : "irNode.setLineno(lineno);",
      "info" : "ExpressionStatement[9349-9374]:ExpressionStatement[9349-9374]"
    }, {
      "left" : "int charno = position2charno(node.getAbsolutePosition());",
      "right" : "int charno = position2charno(node.getAbsolutePosition());",
      "info" : "VariableDeclarationStatement[9383-9440]:VariableDeclarationStatement[9383-9440]"
    }, {
      "left" : "irNode.setCharno(charno);",
      "right" : "irNode.setCharno(charno);",
      "info" : "ExpressionStatement[9449-9474]:ExpressionStatement[9449-9474]"
    }, {
      "left" : "return irNode;",
      "right" : "return irNode;",
      "info" : "ReturnStatement[9493-9507]:ReturnStatement[9493-9507]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[9932-9939]:Modifier[9932-9939]"
    }, {
      "left" : "JsDocInfoParser",
      "right" : "JsDocInfoParser",
      "info" : "SimpleType[9940-9955]:SimpleType[9940-9955]"
    }, {
      "left" : "createJsDocInfoParser",
      "right" : "createJsDocInfoParser",
      "info" : "SimpleName[9956-9977]:SimpleName[9956-9977]"
    }, {
      "left" : "Comment node",
      "right" : "Comment node",
      "info" : "SingleVariableDeclaration[9978-9990]:SingleVariableDeclaration[9978-9990]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9992-10721]:Block[9992-10721]"
    }, {
      "left" : "String comment = node.getValue();",
      "right" : "String comment = node.getValue();",
      "info" : "VariableDeclarationStatement[9998-10031]:VariableDeclarationStatement[9998-10031]"
    }, {
      "left" : "int lineno = node.getLineno();",
      "right" : "int lineno = node.getLineno();",
      "info" : "VariableDeclarationStatement[10036-10066]:VariableDeclarationStatement[10036-10066]"
    }, {
      "left" : "int position = node.getAbsolutePosition();",
      "right" : "int position = node.getAbsolutePosition();",
      "info" : "VariableDeclarationStatement[10071-10113]:VariableDeclarationStatement[10071-10113]"
    }, {
      "left" : "int numOpeningChars = 3;",
      "right" : "int numOpeningChars = 3;",
      "info" : "VariableDeclarationStatement[10193-10217]:VariableDeclarationStatement[10193-10217]"
    }, {
      "left" : "JsDocInfoParser jsdocParser =\n      new JsDocInfoParser(\n          new JsDocTokenStream(comment.substring(numOpeningChars),\n                               lineno,\n                               position2charno(position) + numOpeningChars),\n          node,\n          sourceName,\n          config,\n          errorReporter);",
      "right" : "JsDocInfoParser jsdocParser =\n      new JsDocInfoParser(\n          new JsDocTokenStream(comment.substring(numOpeningChars),\n                               lineno,\n                               position2charno(position) + numOpeningChars),\n          node,\n          sourceName,\n          config,\n          errorReporter);",
      "info" : "VariableDeclarationStatement[10222-10543]:VariableDeclarationStatement[10222-10543]"
    }, {
      "left" : "jsdocParser.setFileLevelJsDocBuilder(fileLevelJsDocBuilder);",
      "right" : "jsdocParser.setFileLevelJsDocBuilder(fileLevelJsDocBuilder);",
      "info" : "ExpressionStatement[10548-10608]:ExpressionStatement[10548-10608]"
    }, {
      "left" : "jsdocParser.setFileOverviewJSDocInfo(fileOverviewInfo);",
      "right" : "jsdocParser.setFileOverviewJSDocInfo(fileOverviewInfo);",
      "info" : "ExpressionStatement[10613-10668]:ExpressionStatement[10613-10668]"
    }, {
      "left" : "jsdocParser.parse();",
      "right" : "jsdocParser.parse();",
      "info" : "ExpressionStatement[10673-10693]:ExpressionStatement[10673-10693]"
    }, {
      "left" : "return jsdocParser;",
      "right" : "return jsdocParser;",
      "info" : "ReturnStatement[10698-10717]:ReturnStatement[10698-10717]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[10725-10732]:Modifier[10725-10732]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[10733-10736]:PrimitiveType[10733-10736]"
    }, {
      "left" : "position2charno",
      "right" : "position2charno",
      "info" : "SimpleName[10737-10752]:SimpleName[10737-10752]"
    }, {
      "left" : "int position",
      "right" : "int position",
      "info" : "SingleVariableDeclaration[10753-10765]:SingleVariableDeclaration[10753-10765]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10767-10994]:Block[10767-10994]"
    }, {
      "left" : "int lineIndex = sourceString.lastIndexOf('\\n', position);",
      "right" : "int lineIndex = sourceString.lastIndexOf('\\n', position);",
      "info" : "VariableDeclarationStatement[10773-10830]:VariableDeclarationStatement[10773-10830]"
    }, {
      "left" : "if (lineIndex == -1)",
      "right" : "if (lineIndex == -1)",
      "info" : "IfStatement[10835-10990]:IfStatement[10835-10990]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10856-10886]:Block[10856-10886]"
    }, {
      "left" : "return position;",
      "right" : "return position;",
      "info" : "ReturnStatement[10864-10880]:ReturnStatement[10864-10880]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10892-10990]:Block[10892-10990]"
    }, {
      "left" : "return position - lineIndex - 1;",
      "right" : "return position - lineIndex - 1;",
      "info" : "ReturnStatement[10952-10984]:ReturnStatement[10952-10984]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[10998-11005]:Modifier[10998-11005]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[11006-11010]:SimpleType[11006-11010]"
    }, {
      "left" : "justTransform",
      "right" : "justTransform",
      "info" : "SimpleName[11011-11024]:SimpleName[11011-11024]"
    }, {
      "left" : "AstNode node",
      "right" : "AstNode node",
      "info" : "SingleVariableDeclaration[11025-11037]:SingleVariableDeclaration[11025-11037]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11039-11090]:Block[11039-11090]"
    }, {
      "left" : "return transformDispatcher.process(node);",
      "right" : "return transformDispatcher.process(node);",
      "info" : "ReturnStatement[11045-11086]:ReturnStatement[11045-11086]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[11167-11174]:Modifier[11167-11174]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[11175-11179]:SimpleType[11175-11179]"
    }, {
      "left" : "processGeneric",
      "right" : "processGeneric",
      "info" : "SimpleName[11180-11194]:SimpleName[11180-11194]"
    }, {
      "left" : "com.google.javascript.jscomp.mozilla.rhino.Node n",
      "right" : "com.google.javascript.jscomp.mozilla.rhino.Node n",
      "info" : "SingleVariableDeclaration[11204-11253]:SingleVariableDeclaration[11204-11253]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11255-11477]:Block[11255-11477]"
    }, {
      "left" : "Node node = newNode(transformTokenType(n.getType()));",
      "right" : "Node node = newNode(transformTokenType(n.getType()));",
      "info" : "VariableDeclarationStatement[11263-11316]:VariableDeclarationStatement[11263-11316]"
    }, {
      "left" : "for (com.google.javascript.jscomp.mozilla.rhino.Node child : n)",
      "right" : "for (com.google.javascript.jscomp.mozilla.rhino.Node child : n)",
      "info" : "EnhancedForStatement[11323-11452]:EnhancedForStatement[11323-11452]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11387-11452]:Block[11387-11452]"
    }, {
      "left" : "node.addChildToBack(transform((AstNode)child));",
      "right" : "node.addChildToBack(transform((AstNode)child));",
      "info" : "ExpressionStatement[11397-11444]:ExpressionStatement[11397-11444]"
    }, {
      "left" : "return node;",
      "right" : "return node;",
      "info" : "ReturnStatement[11459-11471]:ReturnStatement[11459-11471]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[11925-11932]:Modifier[11925-11932]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[11933-11937]:SimpleType[11933-11937]"
    }, {
      "left" : "transformAsString",
      "right" : "transformAsString",
      "info" : "SimpleName[11938-11955]:SimpleName[11938-11955]"
    }, {
      "left" : "AstNode n",
      "right" : "AstNode n",
      "info" : "SingleVariableDeclaration[11956-11965]:SingleVariableDeclaration[11956-11965]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11967-12209]:Block[11967-12209]"
    }, {
      "left" : "Node ret = transform(n);",
      "right" : "Node ret = transform(n);",
      "info" : "VariableDeclarationStatement[11975-11999]:VariableDeclarationStatement[11975-11999]"
    }, {
      "left" : "if (ret.getType() == Token.STRING)",
      "right" : "if (ret.getType() == Token.STRING)",
      "info" : "IfStatement[12006-12185]:IfStatement[12006-12185]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12041-12102]:Block[12041-12102]"
    }, {
      "left" : "ret.putBooleanProp(Node.QUOTED_PROP, true);",
      "right" : "ret.putBooleanProp(Node.QUOTED_PROP, true);",
      "info" : "ExpressionStatement[12051-12094]:ExpressionStatement[12051-12094]"
    }, {
      "left" : "if (ret.getType() == Token.NAME)",
      "right" : "if (ret.getType() == Token.NAME)",
      "info" : "IfStatement[12108-12185]:IfStatement[12108-12185]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12141-12185]:Block[12141-12185]"
    }, {
      "left" : "ret.setType(Token.STRING);",
      "right" : "ret.setType(Token.STRING);",
      "info" : "ExpressionStatement[12151-12177]:ExpressionStatement[12151-12177]"
    }, {
      "left" : "return ret;",
      "right" : "return ret;",
      "info" : "ReturnStatement[12192-12203]:ReturnStatement[12192-12203]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[12215-12224]:MarkerAnnotation[12215-12224]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[12229-12233]:SimpleType[12229-12233]"
    }, {
      "left" : "processArrayLiteral",
      "right" : "processArrayLiteral",
      "info" : "SimpleName[12234-12253]:SimpleName[12234-12253]"
    }, {
      "left" : "ArrayLiteral literalNode",
      "right" : "ArrayLiteral literalNode",
      "info" : "SingleVariableDeclaration[12254-12278]:SingleVariableDeclaration[12254-12278]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12280-13077]:Block[12280-13077]"
    }, {
      "left" : "if (literalNode.isDestructuring())",
      "right" : "if (literalNode.isDestructuring())",
      "info" : "IfStatement[12288-12380]:IfStatement[12288-12380]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12323-12380]:Block[12323-12380]"
    }, {
      "left" : "reportDestructuringAssign(literalNode);",
      "right" : "reportDestructuringAssign(literalNode);",
      "info" : "ExpressionStatement[12333-12372]:ExpressionStatement[12333-12372]"
    }, {
      "left" : "Node node = newNode(Token.ARRAYLIT);",
      "right" : "Node node = newNode(Token.ARRAYLIT);",
      "info" : "VariableDeclarationStatement[12388-12424]:VariableDeclarationStatement[12388-12424]"
    }, {
      "left" : "int skipCount = 0;",
      "right" : "int skipCount = 0;",
      "info" : "VariableDeclarationStatement[12431-12449]:VariableDeclarationStatement[12431-12449]"
    }, {
      "left" : "for (AstNode child : literalNode.getElements())",
      "right" : "for (AstNode child : literalNode.getElements())",
      "info" : "EnhancedForStatement[12456-12656]:EnhancedForStatement[12456-12656]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12504-12656]:Block[12504-12656]"
    }, {
      "left" : "Node c = transform(child);",
      "right" : "Node c = transform(child);",
      "info" : "VariableDeclarationStatement[12514-12540]:VariableDeclarationStatement[12514-12540]"
    }, {
      "left" : "if (c.getType() == Token.EMPTY)",
      "right" : "if (c.getType() == Token.EMPTY)",
      "info" : "IfStatement[12549-12615]:IfStatement[12549-12615]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12581-12615]:Block[12581-12615]"
    }, {
      "left" : "skipCount++;",
      "right" : "skipCount++;",
      "info" : "ExpressionStatement[12593-12605]:ExpressionStatement[12593-12605]"
    }, {
      "left" : "node.addChildToBack(c);",
      "right" : "node.addChildToBack(c);",
      "info" : "ExpressionStatement[12624-12647]:ExpressionStatement[12624-12647]"
    }, {
      "left" : "if (skipCount > 0)",
      "right" : "if (skipCount > 0)",
      "info" : "IfStatement[12663-13052]:IfStatement[12663-13052]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12682-13052]:Block[12682-13052]"
    }, {
      "left" : "int[] skipIndexes = new int[skipCount];",
      "right" : "int[] skipIndexes = new int[skipCount];",
      "info" : "VariableDeclarationStatement[12692-12731]:VariableDeclarationStatement[12692-12731]"
    }, {
      "left" : "int i = 0;",
      "right" : "int i = 0;",
      "info" : "VariableDeclarationStatement[12740-12750]:VariableDeclarationStatement[12740-12750]"
    }, {
      "left" : "int j = 0;",
      "right" : "int j = 0;",
      "info" : "VariableDeclarationStatement[12759-12769]:VariableDeclarationStatement[12759-12769]"
    }, {
      "left" : "for (Node child : node.children())",
      "right" : "for (Node child : node.children())",
      "info" : "EnhancedForStatement[12778-12985]:EnhancedForStatement[12778-12985]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12813-12985]:Block[12813-12985]"
    }, {
      "left" : "if (child.getType() == Token.EMPTY)",
      "right" : "if (child.getType() == Token.EMPTY)",
      "info" : "IfStatement[12825-12960]:IfStatement[12825-12960]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12861-12960]:Block[12861-12960]"
    }, {
      "left" : "node.removeChild(child);",
      "right" : "node.removeChild(child);",
      "info" : "ExpressionStatement[12875-12899]:ExpressionStatement[12875-12899]"
    }, {
      "left" : "skipIndexes[j] = i;",
      "right" : "skipIndexes[j] = i;",
      "info" : "ExpressionStatement[12912-12931]:ExpressionStatement[12912-12931]"
    }, {
      "left" : "j++;",
      "right" : "j++;",
      "info" : "ExpressionStatement[12944-12948]:ExpressionStatement[12944-12948]"
    }, {
      "left" : "i++;",
      "right" : "i++;",
      "info" : "ExpressionStatement[12971-12975]:ExpressionStatement[12971-12975]"
    }, {
      "left" : "node.putProp(Node.SKIP_INDEXES_PROP, skipIndexes);",
      "right" : "node.putProp(Node.SKIP_INDEXES_PROP, skipIndexes);",
      "info" : "ExpressionStatement[12994-13044]:ExpressionStatement[12994-13044]"
    }, {
      "left" : "return node;",
      "right" : "return node;",
      "info" : "ReturnStatement[13059-13071]:ReturnStatement[13059-13071]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[13083-13092]:MarkerAnnotation[13083-13092]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[13097-13101]:SimpleType[13097-13101]"
    }, {
      "left" : "processAssignment",
      "right" : "processAssignment",
      "info" : "SimpleName[13102-13119]:SimpleName[13102-13119]"
    }, {
      "left" : "Assignment assignmentNode",
      "right" : "Assignment assignmentNode",
      "info" : "SingleVariableDeclaration[13120-13145]:SingleVariableDeclaration[13120-13145]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13147-13459]:Block[13147-13459]"
    }, {
      "left" : "Node assign = processInfixExpression(assignmentNode);",
      "right" : "Node assign = processInfixExpression(assignmentNode);",
      "info" : "VariableDeclarationStatement[13155-13208]:VariableDeclarationStatement[13155-13208]"
    }, {
      "left" : "Node target = assign.getFirstChild();",
      "right" : "Node target = assign.getFirstChild();",
      "info" : "VariableDeclarationStatement[13215-13252]:VariableDeclarationStatement[13215-13252]"
    }, {
      "left" : "if (!validAssignmentTarget(target))",
      "right" : "if (!validAssignmentTarget(target))",
      "info" : "IfStatement[13259-13432]:IfStatement[13259-13432]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13295-13432]:Block[13295-13432]"
    }, {
      "left" : "errorReporter.error(\n          \"invalid assignment target\",\n          sourceName,\n          target.getLineno(), \"\", 0);",
      "right" : "errorReporter.error(\n          \"invalid assignment target\",\n          sourceName,\n          target.getLineno(), \"\", 0);",
      "info" : "ExpressionStatement[13305-13424]:ExpressionStatement[13305-13424]"
    }, {
      "left" : "return assign;",
      "right" : "return assign;",
      "info" : "ReturnStatement[13439-13453]:ReturnStatement[13439-13453]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[13465-13474]:MarkerAnnotation[13465-13474]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[13479-13483]:SimpleType[13479-13483]"
    }, {
      "left" : "processAstRoot",
      "right" : "processAstRoot",
      "info" : "SimpleName[13484-13498]:SimpleName[13484-13498]"
    }, {
      "left" : "AstRoot rootNode",
      "right" : "AstRoot rootNode",
      "info" : "SingleVariableDeclaration[13499-13515]:SingleVariableDeclaration[13499-13515]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13517-13756]:Block[13517-13756]"
    }, {
      "left" : "Node node = newNode(Token.SCRIPT);",
      "right" : "Node node = newNode(Token.SCRIPT);",
      "info" : "VariableDeclarationStatement[13525-13559]:VariableDeclarationStatement[13525-13559]"
    }, {
      "left" : "for (com.google.javascript.jscomp.mozilla.rhino.Node child : rootNode)",
      "right" : "for (com.google.javascript.jscomp.mozilla.rhino.Node child : rootNode)",
      "info" : "EnhancedForStatement[13566-13702]:EnhancedForStatement[13566-13702]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13637-13702]:Block[13637-13702]"
    }, {
      "left" : "node.addChildToBack(transform((AstNode)child));",
      "right" : "node.addChildToBack(transform((AstNode)child));",
      "info" : "ExpressionStatement[13647-13694]:ExpressionStatement[13647-13694]"
    }, {
      "left" : "parseDirectives(node);",
      "right" : "parseDirectives(node);",
      "info" : "ExpressionStatement[13709-13731]:ExpressionStatement[13709-13731]"
    }, {
      "left" : "return node;",
      "right" : "return node;",
      "info" : "ReturnStatement[13738-13750]:ReturnStatement[13738-13750]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[14097-14104]:Modifier[14097-14104]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[14105-14109]:PrimitiveType[14105-14109]"
    }, {
      "left" : "parseDirectives",
      "right" : "parseDirectives",
      "info" : "SimpleName[14110-14125]:SimpleName[14110-14125]"
    }, {
      "left" : "Node node",
      "right" : "Node node",
      "info" : "SingleVariableDeclaration[14126-14135]:SingleVariableDeclaration[14126-14135]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14137-14613]:Block[14137-14613]"
    }, {
      "left" : "Set<String> directives = null;",
      "right" : "Set<String> directives = null;",
      "info" : "VariableDeclarationStatement[14209-14239]:VariableDeclarationStatement[14209-14239]"
    }, {
      "left" : "while (isDirective(node.getFirstChild()))",
      "right" : "while (isDirective(node.getFirstChild()))",
      "info" : "WhileStatement[14246-14526]:WhileStatement[14246-14526]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14288-14526]:Block[14288-14526]"
    }, {
      "left" : "String directive = node.removeFirstChild().getFirstChild().getString();",
      "right" : "String directive = node.removeFirstChild().getFirstChild().getString();",
      "info" : "VariableDeclarationStatement[14298-14369]:VariableDeclarationStatement[14298-14369]"
    }, {
      "left" : "if (directives == null)",
      "right" : "if (directives == null)",
      "info" : "IfStatement[14378-14518]:IfStatement[14378-14518]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14402-14464]:Block[14402-14464]"
    }, {
      "left" : "directives = Sets.newHashSet(directive);",
      "right" : "directives = Sets.newHashSet(directive);",
      "info" : "ExpressionStatement[14414-14454]:ExpressionStatement[14414-14454]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14470-14518]:Block[14470-14518]"
    }, {
      "left" : "directives.add(directive);",
      "right" : "directives.add(directive);",
      "info" : "ExpressionStatement[14482-14508]:ExpressionStatement[14482-14508]"
    }, {
      "left" : "if (directives != null)",
      "right" : "if (directives != null)",
      "info" : "IfStatement[14534-14607]:IfStatement[14534-14607]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14558-14607]:Block[14558-14607]"
    }, {
      "left" : "node.setDirectives(directives);",
      "right" : "node.setDirectives(directives);",
      "info" : "ExpressionStatement[14568-14599]:ExpressionStatement[14568-14599]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[14619-14626]:Modifier[14619-14626]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[14627-14634]:PrimitiveType[14627-14634]"
    }, {
      "left" : "isDirective",
      "right" : "isDirective",
      "info" : "SimpleName[14635-14646]:SimpleName[14635-14646]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[14647-14653]:SingleVariableDeclaration[14647-14653]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14655-14929]:Block[14655-14929]"
    }, {
      "left" : "if (n == null)",
      "right" : "if (n == null)",
      "info" : "IfStatement[14663-14691]:IfStatement[14663-14691]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[14678-14691]:ReturnStatement[14678-14691]"
    }, {
      "left" : "int nType = n.getType();",
      "right" : "int nType = n.getType();",
      "info" : "VariableDeclarationStatement[14699-14723]:VariableDeclarationStatement[14699-14723]"
    }, {
      "left" : "return (nType == Token.EXPR_RESULT || nType == Token.EXPR_VOID) &&\n          n.getFirstChild().getType() == Token.STRING &&\n          ALLOWED_DIRECTIVES.contains(n.getFirstChild().getString());",
      "right" : "return (nType == Token.EXPR_RESULT || nType == Token.EXPR_VOID) &&\n          n.getFirstChild().getType() == Token.STRING &&\n          ALLOWED_DIRECTIVES.contains(n.getFirstChild().getString());",
      "info" : "ReturnStatement[14730-14923]:ReturnStatement[14730-14923]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[14935-14944]:MarkerAnnotation[14935-14944]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[14949-14953]:SimpleType[14949-14953]"
    }, {
      "left" : "processBlock",
      "right" : "processBlock",
      "info" : "SimpleName[14954-14966]:SimpleName[14954-14966]"
    }, {
      "left" : "Block blockNode",
      "right" : "Block blockNode",
      "info" : "SingleVariableDeclaration[14967-14982]:SingleVariableDeclaration[14967-14982]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14984-15031]:Block[14984-15031]"
    }, {
      "left" : "return processGeneric(blockNode);",
      "right" : "return processGeneric(blockNode);",
      "info" : "ReturnStatement[14992-15025]:ReturnStatement[14992-15025]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[15037-15046]:MarkerAnnotation[15037-15046]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[15051-15055]:SimpleType[15051-15055]"
    }, {
      "left" : "processBreakStatement",
      "right" : "processBreakStatement",
      "info" : "SimpleName[15056-15077]:SimpleName[15056-15077]"
    }, {
      "left" : "BreakStatement statementNode",
      "right" : "BreakStatement statementNode",
      "info" : "SingleVariableDeclaration[15078-15106]:SingleVariableDeclaration[15078-15106]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15108-15426]:Block[15108-15426]"
    }, {
      "left" : "Node node = newNode(Token.BREAK);",
      "right" : "Node node = newNode(Token.BREAK);",
      "info" : "VariableDeclarationStatement[15116-15149]:VariableDeclarationStatement[15116-15149]"
    }, {
      "left" : "if (statementNode.getBreakLabel() != null)",
      "right" : "if (statementNode.getBreakLabel() != null)",
      "info" : "IfStatement[15156-15401]:IfStatement[15156-15401]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15199-15401]:Block[15199-15401]"
    }, {
      "left" : "Node labelName = transform(statementNode.getBreakLabel());",
      "right" : "Node labelName = transform(statementNode.getBreakLabel());",
      "info" : "VariableDeclarationStatement[15209-15267]:VariableDeclarationStatement[15209-15267]"
    }, {
      "left" : "labelName.setType(Token.LABEL_NAME);",
      "right" : "labelName.setType(Token.LABEL_NAME);",
      "info" : "ExpressionStatement[15317-15353]:ExpressionStatement[15317-15353]"
    }, {
      "left" : "node.addChildToBack(labelName);",
      "right" : "node.addChildToBack(labelName);",
      "info" : "ExpressionStatement[15362-15393]:ExpressionStatement[15362-15393]"
    }, {
      "left" : "return node;",
      "right" : "return node;",
      "info" : "ReturnStatement[15408-15420]:ReturnStatement[15408-15420]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[15432-15441]:MarkerAnnotation[15432-15441]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[15446-15450]:SimpleType[15446-15450]"
    }, {
      "left" : "processCatchClause",
      "right" : "processCatchClause",
      "info" : "SimpleName[15451-15469]:SimpleName[15451-15469]"
    }, {
      "left" : "CatchClause clauseNode",
      "right" : "CatchClause clauseNode",
      "info" : "SingleVariableDeclaration[15470-15492]:SingleVariableDeclaration[15470-15492]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15494-15920]:Block[15494-15920]"
    }, {
      "left" : "AstNode catchVar = clauseNode.getVarName();",
      "right" : "AstNode catchVar = clauseNode.getVarName();",
      "info" : "VariableDeclarationStatement[15502-15545]:VariableDeclarationStatement[15502-15545]"
    }, {
      "left" : "Node node = newNode(Token.CATCH, transform(catchVar));",
      "right" : "Node node = newNode(Token.CATCH, transform(catchVar));",
      "info" : "VariableDeclarationStatement[15552-15606]:VariableDeclarationStatement[15552-15606]"
    }, {
      "left" : "if (clauseNode.getCatchCondition() != null)",
      "right" : "if (clauseNode.getCatchCondition() != null)",
      "info" : "IfStatement[15613-15830]:IfStatement[15613-15830]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15657-15830]:Block[15657-15830]"
    }, {
      "left" : "errorReporter.error(\n            \"Catch clauses are not supported\",\n            sourceName,\n            clauseNode.getCatchCondition().getLineno(), \"\", 0);",
      "right" : "errorReporter.error(\n            \"Catch clauses are not supported\",\n            sourceName,\n            clauseNode.getCatchCondition().getLineno(), \"\", 0);",
      "info" : "ExpressionStatement[15667-15822]:ExpressionStatement[15667-15822]"
    }, {
      "left" : "node.addChildToBack(transformBlock(clauseNode.getBody()));",
      "right" : "node.addChildToBack(transformBlock(clauseNode.getBody()));",
      "info" : "ExpressionStatement[15837-15895]:ExpressionStatement[15837-15895]"
    }, {
      "left" : "return node;",
      "right" : "return node;",
      "info" : "ReturnStatement[15902-15914]:ReturnStatement[15902-15914]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[15926-15935]:MarkerAnnotation[15926-15935]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[15940-15944]:SimpleType[15940-15944]"
    }, {
      "left" : "processConditionalExpression",
      "right" : "processConditionalExpression",
      "info" : "SimpleName[15945-15973]:SimpleName[15945-15973]"
    }, {
      "left" : "ConditionalExpression exprNode",
      "right" : "ConditionalExpression exprNode",
      "info" : "SingleVariableDeclaration[15974-16004]:SingleVariableDeclaration[15974-16004]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16006-16212]:Block[16006-16212]"
    }, {
      "left" : "return newNode(\n          Token.HOOK,\n          transform(exprNode.getTestExpression()),\n          transform(exprNode.getTrueExpression()),\n          transform(exprNode.getFalseExpression()));",
      "right" : "return newNode(\n          Token.HOOK,\n          transform(exprNode.getTestExpression()),\n          transform(exprNode.getTrueExpression()),\n          transform(exprNode.getFalseExpression()));",
      "info" : "ReturnStatement[16014-16206]:ReturnStatement[16014-16206]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[16218-16227]:MarkerAnnotation[16218-16227]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[16232-16236]:SimpleType[16232-16236]"
    }, {
      "left" : "processContinueStatement",
      "right" : "processContinueStatement",
      "info" : "SimpleName[16237-16261]:SimpleName[16237-16261]"
    }, {
      "left" : "ContinueStatement statementNode",
      "right" : "ContinueStatement statementNode",
      "info" : "SingleVariableDeclaration[16262-16293]:SingleVariableDeclaration[16262-16293]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16295-16606]:Block[16295-16606]"
    }, {
      "left" : "Node node = newNode(Token.CONTINUE);",
      "right" : "Node node = newNode(Token.CONTINUE);",
      "info" : "VariableDeclarationStatement[16303-16339]:VariableDeclarationStatement[16303-16339]"
    }, {
      "left" : "if (statementNode.getLabel() != null)",
      "right" : "if (statementNode.getLabel() != null)",
      "info" : "IfStatement[16346-16581]:IfStatement[16346-16581]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16384-16581]:Block[16384-16581]"
    }, {
      "left" : "Node labelName = transform(statementNode.getLabel());",
      "right" : "Node labelName = transform(statementNode.getLabel());",
      "info" : "VariableDeclarationStatement[16394-16447]:VariableDeclarationStatement[16394-16447]"
    }, {
      "left" : "labelName.setType(Token.LABEL_NAME);",
      "right" : "labelName.setType(Token.LABEL_NAME);",
      "info" : "ExpressionStatement[16497-16533]:ExpressionStatement[16497-16533]"
    }, {
      "left" : "node.addChildToBack(labelName);",
      "right" : "node.addChildToBack(labelName);",
      "info" : "ExpressionStatement[16542-16573]:ExpressionStatement[16542-16573]"
    }, {
      "left" : "return node;",
      "right" : "return node;",
      "info" : "ReturnStatement[16588-16600]:ReturnStatement[16588-16600]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[16612-16621]:MarkerAnnotation[16612-16621]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[16626-16630]:SimpleType[16626-16630]"
    }, {
      "left" : "processDoLoop",
      "right" : "processDoLoop",
      "info" : "SimpleName[16631-16644]:SimpleName[16631-16644]"
    }, {
      "left" : "DoLoop loopNode",
      "right" : "DoLoop loopNode",
      "info" : "SingleVariableDeclaration[16645-16660]:SingleVariableDeclaration[16645-16660]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16662-16804]:Block[16662-16804]"
    }, {
      "left" : "return newNode(\n          Token.DO,\n          transformBlock(loopNode.getBody()),\n          transform(loopNode.getCondition()));",
      "right" : "return newNode(\n          Token.DO,\n          transformBlock(loopNode.getBody()),\n          transform(loopNode.getCondition()));",
      "info" : "ReturnStatement[16670-16798]:ReturnStatement[16670-16798]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[16810-16819]:MarkerAnnotation[16810-16819]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[16824-16828]:SimpleType[16824-16828]"
    }, {
      "left" : "processElementGet",
      "right" : "processElementGet",
      "info" : "SimpleName[16829-16846]:SimpleName[16829-16846]"
    }, {
      "left" : "ElementGet getNode",
      "right" : "ElementGet getNode",
      "info" : "SingleVariableDeclaration[16847-16865]:SingleVariableDeclaration[16847-16865]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16867-17007]:Block[16867-17007]"
    }, {
      "left" : "return newNode(\n          Token.GETELEM,\n          transform(getNode.getTarget()),\n          transform(getNode.getElement()));",
      "right" : "return newNode(\n          Token.GETELEM,\n          transform(getNode.getTarget()),\n          transform(getNode.getElement()));",
      "info" : "ReturnStatement[16875-17001]:ReturnStatement[16875-17001]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[17013-17022]:MarkerAnnotation[17013-17022]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[17027-17031]:SimpleType[17027-17031]"
    }, {
      "left" : "processEmptyExpression",
      "right" : "processEmptyExpression",
      "info" : "SimpleName[17032-17054]:SimpleName[17032-17054]"
    }, {
      "left" : "EmptyExpression exprNode",
      "right" : "EmptyExpression exprNode",
      "info" : "SingleVariableDeclaration[17055-17079]:SingleVariableDeclaration[17055-17079]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17081-17147]:Block[17081-17147]"
    }, {
      "left" : "Node node = newNode(Token.EMPTY);",
      "right" : "Node node = newNode(Token.EMPTY);",
      "info" : "VariableDeclarationStatement[17089-17122]:VariableDeclarationStatement[17089-17122]"
    }, {
      "left" : "return node;",
      "right" : "return node;",
      "info" : "ReturnStatement[17129-17141]:ReturnStatement[17129-17141]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[17153-17162]:MarkerAnnotation[17153-17162]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[17167-17171]:SimpleType[17167-17171]"
    }, {
      "left" : "processExpressionStatement",
      "right" : "processExpressionStatement",
      "info" : "SimpleName[17172-17198]:SimpleName[17172-17198]"
    }, {
      "left" : "ExpressionStatement statementNode",
      "right" : "ExpressionStatement statementNode",
      "info" : "SingleVariableDeclaration[17199-17232]:SingleVariableDeclaration[17199-17232]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17234-17401]:Block[17234-17401]"
    }, {
      "left" : "Node node = newNode(transformTokenType(statementNode.getType()));",
      "right" : "Node node = newNode(transformTokenType(statementNode.getType()));",
      "info" : "VariableDeclarationStatement[17242-17307]:VariableDeclarationStatement[17242-17307]"
    }, {
      "left" : "node.addChildToBack(transform(statementNode.getExpression()));",
      "right" : "node.addChildToBack(transform(statementNode.getExpression()));",
      "info" : "ExpressionStatement[17314-17376]:ExpressionStatement[17314-17376]"
    }, {
      "left" : "return node;",
      "right" : "return node;",
      "info" : "ReturnStatement[17383-17395]:ReturnStatement[17383-17395]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[17407-17416]:MarkerAnnotation[17407-17416]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[17421-17425]:SimpleType[17421-17425]"
    }, {
      "left" : "processForInLoop",
      "right" : "processForInLoop",
      "info" : "SimpleName[17426-17442]:SimpleName[17426-17442]"
    }, {
      "left" : "ForInLoop loopNode",
      "right" : "ForInLoop loopNode",
      "info" : "SingleVariableDeclaration[17443-17461]:SingleVariableDeclaration[17443-17461]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17463-17656]:Block[17463-17656]"
    }, {
      "left" : "return newNode(\n          Token.FOR,\n          transform(loopNode.getIterator()),\n          transform(loopNode.getIteratedObject()),\n          transformBlock(loopNode.getBody()));",
      "right" : "return newNode(\n          Token.FOR,\n          transform(loopNode.getIterator()),\n          transform(loopNode.getIteratedObject()),\n          transformBlock(loopNode.getBody()));",
      "info" : "ReturnStatement[17471-17650]:ReturnStatement[17471-17650]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[17662-17671]:MarkerAnnotation[17662-17671]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[17676-17680]:SimpleType[17676-17680]"
    }, {
      "left" : "processForLoop",
      "right" : "processForLoop",
      "info" : "SimpleName[17681-17695]:SimpleName[17681-17695]"
    }, {
      "left" : "ForLoop loopNode",
      "right" : "ForLoop loopNode",
      "info" : "SingleVariableDeclaration[17696-17712]:SingleVariableDeclaration[17696-17712]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17714-17992]:Block[17714-17992]"
    }, {
      "left" : "Node node = newNode(\n          Token.FOR,\n          transform(loopNode.getInitializer()),\n          transform(loopNode.getCondition()),\n          transform(loopNode.getIncrement()));",
      "right" : "Node node = newNode(\n          Token.FOR,\n          transform(loopNode.getInitializer()),\n          transform(loopNode.getCondition()),\n          transform(loopNode.getIncrement()));",
      "info" : "VariableDeclarationStatement[17722-17904]:VariableDeclarationStatement[17722-17904]"
    }, {
      "left" : "node.addChildToBack(transformBlock(loopNode.getBody()));",
      "right" : "node.addChildToBack(transformBlock(loopNode.getBody()));",
      "info" : "ExpressionStatement[17911-17967]:ExpressionStatement[17911-17967]"
    }, {
      "left" : "return node;",
      "right" : "return node;",
      "info" : "ReturnStatement[17974-17986]:ReturnStatement[17974-17986]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[17998-18007]:MarkerAnnotation[17998-18007]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[18012-18016]:SimpleType[18012-18016]"
    }, {
      "left" : "processFunctionCall",
      "right" : "processFunctionCall",
      "info" : "SimpleName[18017-18036]:SimpleName[18017-18036]"
    }, {
      "left" : "FunctionCall callNode",
      "right" : "FunctionCall callNode",
      "info" : "SingleVariableDeclaration[18037-18058]:SingleVariableDeclaration[18037-18058]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18060-18496]:Block[18060-18496]"
    }, {
      "left" : "Node node = newNode(transformTokenType(callNode.getType()),\n                           transform(callNode.getTarget()));",
      "right" : "Node node = newNode(transformTokenType(callNode.getType()),\n                           transform(callNode.getTarget()));",
      "info" : "VariableDeclarationStatement[18068-18188]:VariableDeclarationStatement[18068-18188]"
    }, {
      "left" : "for (AstNode child : callNode.getArguments())",
      "right" : "for (AstNode child : callNode.getArguments())",
      "info" : "EnhancedForStatement[18195-18297]:EnhancedForStatement[18195-18297]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18241-18297]:Block[18241-18297]"
    }, {
      "left" : "node.addChildToBack(transform(child));",
      "right" : "node.addChildToBack(transform(child));",
      "info" : "ExpressionStatement[18251-18289]:ExpressionStatement[18251-18289]"
    }, {
      "left" : "int leftParamPos = callNode.getAbsolutePosition() + callNode.getLp();",
      "right" : "int leftParamPos = callNode.getAbsolutePosition() + callNode.getLp();",
      "info" : "VariableDeclarationStatement[18305-18374]:VariableDeclarationStatement[18305-18374]"
    }, {
      "left" : "node.setLineno(callNode.getLineno());",
      "right" : "node.setLineno(callNode.getLineno());",
      "info" : "ExpressionStatement[18381-18418]:ExpressionStatement[18381-18418]"
    }, {
      "left" : "node.setCharno(position2charno(leftParamPos));",
      "right" : "node.setCharno(position2charno(leftParamPos));",
      "info" : "ExpressionStatement[18425-18471]:ExpressionStatement[18425-18471]"
    }, {
      "left" : "return node;",
      "right" : "return node;",
      "info" : "ReturnStatement[18478-18490]:ReturnStatement[18478-18490]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[18502-18511]:MarkerAnnotation[18502-18511]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[18516-18520]:SimpleType[18516-18520]"
    }, {
      "left" : "processFunctionNode",
      "right" : "processFunctionNode",
      "info" : "SimpleName[18521-18540]:SimpleName[18521-18540]"
    }, {
      "left" : "FunctionNode functionNode",
      "right" : "FunctionNode functionNode",
      "info" : "SingleVariableDeclaration[18541-18566]:SingleVariableDeclaration[18541-18566]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18568-20537]:Block[18568-20813]"
    }, {
      "left" : "Name name = functionNode.getFunctionName();",
      "right" : "Name name = functionNode.getFunctionName();",
      "info" : "VariableDeclarationStatement[18576-18619]:VariableDeclarationStatement[18576-18619]"
    }, {
      "left" : "Boolean isUnnamedFunction = false;",
      "right" : "Boolean isUnnamedFunction = false;",
      "info" : "VariableDeclarationStatement[18626-18660]:VariableDeclarationStatement[18626-18660]"
    }, {
      "left" : "if (name == null)",
      "right" : "if (name == null)",
      "info" : "IfStatement[18667-18787]:IfStatement[18667-19063]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18685-18787]:Block[18685-19063]"
    }, {
      "left" : "name = new Name();",
      "right" : "name = new Name();",
      "info" : "ExpressionStatement[18695-18713]:ExpressionStatement[18971-18989]"
    }, {
      "left" : "name.setIdentifier(\"\");",
      "right" : "name.setIdentifier(\"\");",
      "info" : "ExpressionStatement[18722-18745]:ExpressionStatement[18998-19021]"
    }, {
      "left" : "isUnnamedFunction = true;",
      "right" : "isUnnamedFunction = true;",
      "info" : "ExpressionStatement[18754-18779]:ExpressionStatement[19030-19055]"
    }, {
      "left" : "Node node = newNode(Token.FUNCTION);",
      "right" : "Node node = newNode(Token.FUNCTION);",
      "info" : "VariableDeclarationStatement[18794-18830]:VariableDeclarationStatement[19070-19106]"
    }, {
      "left" : "Node newName = transform(name);",
      "right" : "Node newName = transform(name);",
      "info" : "VariableDeclarationStatement[18837-18868]:VariableDeclarationStatement[19113-19144]"
    }, {
      "left" : "if (isUnnamedFunction)",
      "right" : "if (isUnnamedFunction)",
      "info" : "IfStatement[18875-19387]:IfStatement[19151-19663]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18898-19387]:Block[19174-19663]"
    }, {
      "left" : "newName.setLineno(functionNode.getLineno());",
      "right" : "newName.setLineno(functionNode.getLineno());",
      "info" : "ExpressionStatement[19008-19052]:ExpressionStatement[19284-19328]"
    }, {
      "left" : "int lpColumn = functionNode.getAbsolutePosition() +\n            functionNode.getLp();",
      "right" : "int lpColumn = functionNode.getAbsolutePosition() +\n            functionNode.getLp();",
      "info" : "VariableDeclarationStatement[19240-19325]:VariableDeclarationStatement[19516-19601]"
    }, {
      "left" : "newName.setCharno(position2charno(lpColumn));",
      "right" : "newName.setCharno(position2charno(lpColumn));",
      "info" : "ExpressionStatement[19334-19379]:ExpressionStatement[19610-19655]"
    }, {
      "left" : "node.addChildToBack(newName);",
      "right" : "node.addChildToBack(newName);",
      "info" : "ExpressionStatement[19395-19424]:ExpressionStatement[19671-19700]"
    }, {
      "left" : "Node lp = newNode(Token.LP);",
      "right" : "Node lp = newNode(Token.LP);",
      "info" : "VariableDeclarationStatement[19431-19459]:VariableDeclarationStatement[19707-19735]"
    }, {
      "left" : "Name fnName = functionNode.getFunctionName();",
      "right" : "Name fnName = functionNode.getFunctionName();",
      "info" : "VariableDeclarationStatement[19914-19959]:VariableDeclarationStatement[20190-20235]"
    }, {
      "left" : "if (fnName != null)",
      "right" : "if (fnName != null)",
      "info" : "IfStatement[19966-20100]:IfStatement[20242-20376]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19986-20037]:Block[20262-20313]"
    }, {
      "left" : "lp.setLineno(fnName.getLineno());",
      "right" : "lp.setLineno(fnName.getLineno());",
      "info" : "ExpressionStatement[19996-20029]:ExpressionStatement[20272-20305]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20043-20100]:Block[20319-20376]"
    }, {
      "left" : "lp.setLineno(functionNode.getLineno());",
      "right" : "lp.setLineno(functionNode.getLineno());",
      "info" : "ExpressionStatement[20053-20092]:ExpressionStatement[20329-20368]"
    }, {
      "left" : "int lparenCharno = functionNode.getLp() +\n          functionNode.getAbsolutePosition();",
      "right" : "int lparenCharno = functionNode.getLp() +\n          functionNode.getAbsolutePosition();",
      "info" : "VariableDeclarationStatement[20107-20194]:VariableDeclarationStatement[20383-20470]"
    }, {
      "left" : "lp.setCharno(position2charno(lparenCharno));",
      "right" : "lp.setCharno(position2charno(lparenCharno));",
      "info" : "ExpressionStatement[20202-20246]:ExpressionStatement[20478-20522]"
    }, {
      "left" : "for (AstNode param : functionNode.getParams())",
      "right" : "for (AstNode param : functionNode.getParams())",
      "info" : "EnhancedForStatement[20253-20354]:EnhancedForStatement[20529-20630]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20300-20354]:Block[20576-20630]"
    }, {
      "left" : "lp.addChildToBack(transform(param));",
      "right" : "lp.addChildToBack(transform(param));",
      "info" : "ExpressionStatement[20310-20346]:ExpressionStatement[20586-20622]"
    }, {
      "left" : "node.addChildToBack(lp);",
      "right" : "node.addChildToBack(lp);",
      "info" : "ExpressionStatement[20361-20385]:ExpressionStatement[20637-20661]"
    }, {
      "left" : "Node bodyNode = transform(functionNode.getBody());",
      "right" : "Node bodyNode = transform(functionNode.getBody());",
      "info" : "VariableDeclarationStatement[20393-20443]:VariableDeclarationStatement[20669-20719]"
    }, {
      "left" : "parseDirectives(bodyNode);",
      "right" : "parseDirectives(bodyNode);",
      "info" : "ExpressionStatement[20450-20476]:ExpressionStatement[20726-20752]"
    }, {
      "left" : "node.addChildToBack(bodyNode);",
      "right" : "node.addChildToBack(bodyNode);",
      "info" : "ExpressionStatement[20483-20513]:ExpressionStatement[20759-20789]"
    }, {
      "left" : "return node;",
      "right" : "return node;",
      "info" : "ReturnStatement[20519-20531]:ReturnStatement[20795-20807]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[20543-20552]:MarkerAnnotation[20819-20828]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[20557-20561]:SimpleType[20833-20837]"
    }, {
      "left" : "processIfStatement",
      "right" : "processIfStatement",
      "info" : "SimpleName[20562-20580]:SimpleName[20838-20856]"
    }, {
      "left" : "IfStatement statementNode",
      "right" : "IfStatement statementNode",
      "info" : "SingleVariableDeclaration[20581-20606]:SingleVariableDeclaration[20857-20882]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20608-20942]:Block[20884-21218]"
    }, {
      "left" : "Node node = newNode(Token.IF);",
      "right" : "Node node = newNode(Token.IF);",
      "info" : "VariableDeclarationStatement[20616-20646]:VariableDeclarationStatement[20892-20922]"
    }, {
      "left" : "node.addChildToBack(transform(statementNode.getCondition()));",
      "right" : "node.addChildToBack(transform(statementNode.getCondition()));",
      "info" : "ExpressionStatement[20653-20714]:ExpressionStatement[20929-20990]"
    }, {
      "left" : "node.addChildToBack(transformBlock(statementNode.getThenPart()));",
      "right" : "node.addChildToBack(transformBlock(statementNode.getThenPart()));",
      "info" : "ExpressionStatement[20721-20786]:ExpressionStatement[20997-21062]"
    }, {
      "left" : "if (statementNode.getElsePart() != null)",
      "right" : "if (statementNode.getElsePart() != null)",
      "info" : "IfStatement[20793-20917]:IfStatement[21069-21193]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20834-20917]:Block[21110-21193]"
    }, {
      "left" : "node.addChildToBack(transformBlock(statementNode.getElsePart()));",
      "right" : "node.addChildToBack(transformBlock(statementNode.getElsePart()));",
      "info" : "ExpressionStatement[20844-20909]:ExpressionStatement[21120-21185]"
    }, {
      "left" : "return node;",
      "right" : "return node;",
      "info" : "ReturnStatement[20924-20936]:ReturnStatement[21200-21212]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[20948-20957]:MarkerAnnotation[21224-21233]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[20962-20966]:SimpleType[21238-21242]"
    }, {
      "left" : "processInfixExpression",
      "right" : "processInfixExpression",
      "info" : "SimpleName[20967-20989]:SimpleName[21243-21265]"
    }, {
      "left" : "InfixExpression exprNode",
      "right" : "InfixExpression exprNode",
      "info" : "SingleVariableDeclaration[20990-21014]:SingleVariableDeclaration[21266-21290]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21016-21664]:Block[21292-21940]"
    }, {
      "left" : "Node n =  newNode(\n          transformTokenType(exprNode.getType()),\n          transform(exprNode.getLeft()),\n          transform(exprNode.getRight()));",
      "right" : "Node n =  newNode(\n          transformTokenType(exprNode.getType()),\n          transform(exprNode.getLeft()),\n          transform(exprNode.getRight()));",
      "info" : "VariableDeclarationStatement[21024-21176]:VariableDeclarationStatement[21300-21452]"
    }, {
      "left" : "n.setLineno(exprNode.getLineno());",
      "right" : "n.setLineno(exprNode.getLineno());",
      "info" : "ExpressionStatement[21279-21313]:ExpressionStatement[21555-21589]"
    }, {
      "left" : "n.setCharno(position2charno(exprNode.getAbsolutePosition() +\n          exprNode.getOperatorPosition()));",
      "right" : "n.setCharno(position2charno(exprNode.getAbsolutePosition() +\n          exprNode.getOperatorPosition()));",
      "info" : "ExpressionStatement[21538-21642]:ExpressionStatement[21814-21918]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[21649-21658]:ReturnStatement[21925-21934]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[21670-21679]:MarkerAnnotation[21946-21955]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[21684-21688]:SimpleType[21960-21964]"
    }, {
      "left" : "processKeywordLiteral",
      "right" : "processKeywordLiteral",
      "info" : "SimpleName[21689-21710]:SimpleName[21965-21986]"
    }, {
      "left" : "KeywordLiteral literalNode",
      "right" : "KeywordLiteral literalNode",
      "info" : "SingleVariableDeclaration[21711-21737]:SingleVariableDeclaration[21987-22013]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21739-21811]:Block[22015-22087]"
    }, {
      "left" : "return newNode(transformTokenType(literalNode.getType()));",
      "right" : "return newNode(transformTokenType(literalNode.getType()));",
      "info" : "ReturnStatement[21747-21805]:ReturnStatement[22023-22081]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[21817-21826]:MarkerAnnotation[22093-22102]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[21831-21835]:SimpleType[22107-22111]"
    }, {
      "left" : "processLabel",
      "right" : "processLabel",
      "info" : "SimpleName[21836-21848]:SimpleName[22112-22124]"
    }, {
      "left" : "Label labelNode",
      "right" : "Label labelNode",
      "info" : "SingleVariableDeclaration[21849-21864]:SingleVariableDeclaration[22125-22140]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21866-21940]:Block[22142-22216]"
    }, {
      "left" : "return newStringNode(Token.LABEL_NAME, labelNode.getName());",
      "right" : "return newStringNode(Token.LABEL_NAME, labelNode.getName());",
      "info" : "ReturnStatement[21874-21934]:ReturnStatement[22150-22210]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[21946-21955]:MarkerAnnotation[22222-22231]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[21960-21964]:SimpleType[22236-22240]"
    }, {
      "left" : "processLabeledStatement",
      "right" : "processLabeledStatement",
      "info" : "SimpleName[21965-21988]:SimpleName[22241-22264]"
    }, {
      "left" : "LabeledStatement statementNode",
      "right" : "LabeledStatement statementNode",
      "info" : "SingleVariableDeclaration[21989-22019]:SingleVariableDeclaration[22265-22295]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22021-22626]:Block[22297-22902]"
    }, {
      "left" : "Node node = newNode(Token.LABEL);",
      "right" : "Node node = newNode(Token.LABEL);",
      "info" : "VariableDeclarationStatement[22029-22062]:VariableDeclarationStatement[22305-22338]"
    }, {
      "left" : "Node prev = null;",
      "right" : "Node prev = null;",
      "info" : "VariableDeclarationStatement[22069-22086]:VariableDeclarationStatement[22345-22362]"
    }, {
      "left" : "Node cur = node;",
      "right" : "Node cur = node;",
      "info" : "VariableDeclarationStatement[22093-22109]:VariableDeclarationStatement[22369-22385]"
    }, {
      "left" : "for (Label label : statementNode.getLabels())",
      "right" : "for (Label label : statementNode.getLabels())",
      "info" : "EnhancedForStatement[22116-22533]:EnhancedForStatement[22392-22809]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22162-22533]:Block[22438-22809]"
    }, {
      "left" : "if (prev != null)",
      "right" : "if (prev != null)",
      "info" : "IfStatement[22172-22237]:IfStatement[22448-22513]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22190-22237]:Block[22466-22513]"
    }, {
      "left" : "prev.addChildToBack(cur);",
      "right" : "prev.addChildToBack(cur);",
      "info" : "ExpressionStatement[22202-22227]:ExpressionStatement[22478-22503]"
    }, {
      "left" : "cur.addChildToBack(transform(label));",
      "right" : "cur.addChildToBack(transform(label));",
      "info" : "ExpressionStatement[22246-22283]:ExpressionStatement[22522-22559]"
    }, {
      "left" : "cur.setLineno(label.getLineno());",
      "right" : "cur.setLineno(label.getLineno());",
      "info" : "ExpressionStatement[22293-22326]:ExpressionStatement[22569-22602]"
    }, {
      "left" : "int clauseAbsolutePosition =\n            position2charno(label.getAbsolutePosition());",
      "right" : "int clauseAbsolutePosition =\n            position2charno(label.getAbsolutePosition());",
      "info" : "VariableDeclarationStatement[22335-22421]:VariableDeclarationStatement[22611-22697]"
    }, {
      "left" : "cur.setCharno(clauseAbsolutePosition);",
      "right" : "cur.setCharno(clauseAbsolutePosition);",
      "info" : "ExpressionStatement[22430-22468]:ExpressionStatement[22706-22744]"
    }, {
      "left" : "prev = cur;",
      "right" : "prev = cur;",
      "info" : "ExpressionStatement[22478-22489]:ExpressionStatement[22754-22765]"
    }, {
      "left" : "cur = newNode(Token.LABEL);",
      "right" : "cur = newNode(Token.LABEL);",
      "info" : "ExpressionStatement[22498-22525]:ExpressionStatement[22774-22801]"
    }, {
      "left" : "prev.addChildToBack(transform(statementNode.getStatement()));",
      "right" : "prev.addChildToBack(transform(statementNode.getStatement()));",
      "info" : "ExpressionStatement[22540-22601]:ExpressionStatement[22816-22877]"
    }, {
      "left" : "return node;",
      "right" : "return node;",
      "info" : "ReturnStatement[22608-22620]:ReturnStatement[22884-22896]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[22632-22641]:MarkerAnnotation[22908-22917]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[22646-22650]:SimpleType[22922-22926]"
    }, {
      "left" : "processName",
      "right" : "processName",
      "info" : "SimpleName[22651-22662]:SimpleName[22927-22938]"
    }, {
      "left" : "Name nameNode",
      "right" : "Name nameNode",
      "info" : "SingleVariableDeclaration[22663-22676]:SingleVariableDeclaration[22939-22952]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22678-22751]:Block[22954-23027]"
    }, {
      "left" : "return newStringNode(Token.NAME, nameNode.getIdentifier());",
      "right" : "return newStringNode(Token.NAME, nameNode.getIdentifier());",
      "info" : "ReturnStatement[22686-22745]:ReturnStatement[22962-23021]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[22757-22766]:MarkerAnnotation[23033-23042]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[22771-22775]:SimpleType[23047-23051]"
    }, {
      "left" : "processNewExpression",
      "right" : "processNewExpression",
      "info" : "SimpleName[22776-22796]:SimpleName[23052-23072]"
    }, {
      "left" : "NewExpression exprNode",
      "right" : "NewExpression exprNode",
      "info" : "SingleVariableDeclaration[22797-22819]:SingleVariableDeclaration[23073-23095]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22821-22872]:Block[23097-23148]"
    }, {
      "left" : "return processFunctionCall(exprNode);",
      "right" : "return processFunctionCall(exprNode);",
      "info" : "ReturnStatement[22829-22866]:ReturnStatement[23105-23142]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[22878-22887]:MarkerAnnotation[23154-23163]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[22892-22896]:SimpleType[23168-23172]"
    }, {
      "left" : "processNumberLiteral",
      "right" : "processNumberLiteral",
      "info" : "SimpleName[22897-22917]:SimpleName[23173-23193]"
    }, {
      "left" : "NumberLiteral literalNode",
      "right" : "NumberLiteral literalNode",
      "info" : "SingleVariableDeclaration[22918-22943]:SingleVariableDeclaration[23194-23219]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22945-23005]:Block[23221-23281]"
    }, {
      "left" : "return newNumberNode(literalNode.getNumber());",
      "right" : "return newNumberNode(literalNode.getNumber());",
      "info" : "ReturnStatement[22953-22999]:ReturnStatement[23229-23275]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[23011-23020]:MarkerAnnotation[23287-23296]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[23025-23029]:SimpleType[23301-23305]"
    }, {
      "left" : "processObjectLiteral",
      "right" : "processObjectLiteral",
      "info" : "SimpleName[23030-23050]:SimpleName[23306-23326]"
    }, {
      "left" : "ObjectLiteral literalNode",
      "right" : "ObjectLiteral literalNode",
      "info" : "SingleVariableDeclaration[23051-23076]:SingleVariableDeclaration[23327-23352]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23078-24220]:Block[23354-24496]"
    }, {
      "left" : "if (literalNode.isDestructuring())",
      "right" : "if (literalNode.isDestructuring())",
      "info" : "IfStatement[23086-23178]:IfStatement[23362-23454]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23121-23178]:Block[23397-23454]"
    }, {
      "left" : "reportDestructuringAssign(literalNode);",
      "right" : "reportDestructuringAssign(literalNode);",
      "info" : "ExpressionStatement[23131-23170]:ExpressionStatement[23407-23446]"
    }, {
      "left" : "Node node = newNode(Token.OBJECTLIT);",
      "right" : "Node node = newNode(Token.OBJECTLIT);",
      "info" : "VariableDeclarationStatement[23186-23223]:VariableDeclarationStatement[23462-23499]"
    }, {
      "left" : "for (ObjectProperty el : literalNode.getElements())",
      "right" : "for (ObjectProperty el : literalNode.getElements())",
      "info" : "EnhancedForStatement[23230-24195]:EnhancedForStatement[23506-24471]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23282-24195]:Block[23558-24471]"
    }, {
      "left" : "if (!config.acceptES5)",
      "right" : "if (!config.acceptES5)",
      "info" : "IfStatement[23292-23511]:IfStatement[23568-23787]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23315-23511]:Block[23591-23787]"
    }, {
      "left" : "if (el.isGetter())",
      "right" : "if (el.isGetter())",
      "info" : "IfStatement[23327-23501]:IfStatement[23603-23777]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23346-23411]:Block[23622-23687]"
    }, {
      "left" : "reportGetter(el);",
      "right" : "reportGetter(el);",
      "info" : "ExpressionStatement[23360-23377]:ExpressionStatement[23636-23653]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[23390-23399]:ContinueStatement[23666-23675]"
    }, {
      "left" : "if (el.isSetter())",
      "right" : "if (el.isSetter())",
      "info" : "IfStatement[23417-23501]:IfStatement[23693-23777]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23436-23501]:Block[23712-23777]"
    }, {
      "left" : "reportSetter(el);",
      "right" : "reportSetter(el);",
      "info" : "ExpressionStatement[23450-23467]:ExpressionStatement[23726-23743]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[23480-23489]:ContinueStatement[23756-23765]"
    }, {
      "left" : "Node key = transformAsString(el.getLeft());",
      "right" : "Node key = transformAsString(el.getLeft());",
      "info" : "VariableDeclarationStatement[23521-23564]:VariableDeclarationStatement[23797-23840]"
    }, {
      "left" : "Node value = transform(el.getRight());",
      "right" : "Node value = transform(el.getRight());",
      "info" : "VariableDeclarationStatement[23573-23611]:VariableDeclarationStatement[23849-23887]"
    }, {
      "left" : "if (el.isGetter())",
      "right" : "if (el.isGetter())",
      "info" : "IfStatement[23620-24117]:IfStatement[23896-24393]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23639-23865]:Block[23915-24141]"
    }, {
      "left" : "key.setType(Token.GET);",
      "right" : "key.setType(Token.GET);",
      "info" : "ExpressionStatement[23651-23674]:ExpressionStatement[23927-23950]"
    }, {
      "left" : "Preconditions.checkState(value.getType() == Token.FUNCTION);",
      "right" : "Preconditions.checkState(value.getType() == Token.FUNCTION);",
      "info" : "ExpressionStatement[23685-23745]:ExpressionStatement[23961-24021]"
    }, {
      "left" : "if (getFnParamNode(value).hasChildren())",
      "right" : "if (getFnParamNode(value).hasChildren())",
      "info" : "IfStatement[23756-23855]:IfStatement[24032-24131]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23797-23855]:Block[24073-24131]"
    }, {
      "left" : "reportGetterParam(el.getLeft());",
      "right" : "reportGetterParam(el.getLeft());",
      "info" : "ExpressionStatement[23811-23843]:ExpressionStatement[24087-24119]"
    }, {
      "left" : "if (el.isSetter())",
      "right" : "if (el.isSetter())",
      "info" : "IfStatement[23871-24117]:IfStatement[24147-24393]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23890-24117]:Block[24166-24393]"
    }, {
      "left" : "key.setType(Token.SET);",
      "right" : "key.setType(Token.SET);",
      "info" : "ExpressionStatement[23902-23925]:ExpressionStatement[24178-24201]"
    }, {
      "left" : "Preconditions.checkState(value.getType() == Token.FUNCTION);",
      "right" : "Preconditions.checkState(value.getType() == Token.FUNCTION);",
      "info" : "ExpressionStatement[23936-23996]:ExpressionStatement[24212-24272]"
    }, {
      "left" : "if (!getFnParamNode(value).hasOneChild())",
      "right" : "if (!getFnParamNode(value).hasOneChild())",
      "info" : "IfStatement[24007-24107]:IfStatement[24283-24383]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24049-24107]:Block[24325-24383]"
    }, {
      "left" : "reportSetterParam(el.getLeft());",
      "right" : "reportSetterParam(el.getLeft());",
      "info" : "ExpressionStatement[24063-24095]:ExpressionStatement[24339-24371]"
    }, {
      "left" : "key.addChildToFront(value);",
      "right" : "key.addChildToFront(value);",
      "info" : "ExpressionStatement[24126-24153]:ExpressionStatement[24402-24429]"
    }, {
      "left" : "node.addChildToBack(key);",
      "right" : "node.addChildToBack(key);",
      "info" : "ExpressionStatement[24162-24187]:ExpressionStatement[24438-24463]"
    }, {
      "left" : "return node;",
      "right" : "return node;",
      "info" : "ReturnStatement[24202-24214]:ReturnStatement[24478-24490]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[24336-24340]:SimpleType[24612-24616]"
    }, {
      "left" : "getFnParamNode",
      "right" : "getFnParamNode",
      "info" : "SimpleName[24341-24355]:SimpleName[24617-24631]"
    }, {
      "left" : "Node fnNode",
      "right" : "Node fnNode",
      "info" : "SingleVariableDeclaration[24356-24367]:SingleVariableDeclaration[24632-24643]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24369-24558]:Block[24645-24834]"
    }, {
      "left" : "Preconditions.checkArgument(fnNode.getType() == Token.FUNCTION);",
      "right" : "Preconditions.checkArgument(fnNode.getType() == Token.FUNCTION);",
      "info" : "ExpressionStatement[24443-24507]:ExpressionStatement[24719-24783]"
    }, {
      "left" : "return fnNode.getFirstChild().getNext();",
      "right" : "return fnNode.getFirstChild().getNext();",
      "info" : "ReturnStatement[24513-24553]:ReturnStatement[24789-24829]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[24564-24573]:MarkerAnnotation[24840-24849]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[24578-24582]:SimpleType[24854-24858]"
    }, {
      "left" : "processObjectProperty",
      "right" : "processObjectProperty",
      "info" : "SimpleName[24583-24604]:SimpleName[24859-24880]"
    }, {
      "left" : "ObjectProperty propertyNode",
      "right" : "ObjectProperty propertyNode",
      "info" : "SingleVariableDeclaration[24605-24632]:SingleVariableDeclaration[24881-24908]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24634-24692]:Block[24910-24968]"
    }, {
      "left" : "return processInfixExpression(propertyNode);",
      "right" : "return processInfixExpression(propertyNode);",
      "info" : "ReturnStatement[24642-24686]:ReturnStatement[24918-24962]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[24698-24707]:MarkerAnnotation[24974-24983]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[24712-24716]:SimpleType[24988-24992]"
    }, {
      "left" : "processParenthesizedExpression",
      "right" : "processParenthesizedExpression",
      "info" : "SimpleName[24717-24747]:SimpleName[24993-25023]"
    }, {
      "left" : "ParenthesizedExpression exprNode",
      "right" : "ParenthesizedExpression exprNode",
      "info" : "SingleVariableDeclaration[24748-24780]:SingleVariableDeclaration[25024-25056]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24782-24922]:Block[25058-25198]"
    }, {
      "left" : "Node node = transform(exprNode.getExpression());",
      "right" : "Node node = transform(exprNode.getExpression());",
      "info" : "VariableDeclarationStatement[24790-24838]:VariableDeclarationStatement[25066-25114]"
    }, {
      "left" : "node.putProp(Node.PARENTHESIZED_PROP, Boolean.TRUE);",
      "right" : "node.putProp(Node.PARENTHESIZED_PROP, Boolean.TRUE);",
      "info" : "ExpressionStatement[24845-24897]:ExpressionStatement[25121-25173]"
    }, {
      "left" : "return node;",
      "right" : "return node;",
      "info" : "ReturnStatement[24904-24916]:ReturnStatement[25180-25192]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[24928-24937]:MarkerAnnotation[25204-25213]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[24942-24946]:SimpleType[25218-25222]"
    }, {
      "left" : "processPropertyGet",
      "right" : "processPropertyGet",
      "info" : "SimpleName[24947-24965]:SimpleName[25223-25241]"
    }, {
      "left" : "PropertyGet getNode",
      "right" : "PropertyGet getNode",
      "info" : "SingleVariableDeclaration[24966-24985]:SingleVariableDeclaration[25242-25261]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24987-25136]:Block[25263-25412]"
    }, {
      "left" : "return newNode(\n          Token.GETPROP,\n          transform(getNode.getTarget()),\n          transformAsString(getNode.getProperty()));",
      "right" : "return newNode(\n          Token.GETPROP,\n          transform(getNode.getTarget()),\n          transformAsString(getNode.getProperty()));",
      "info" : "ReturnStatement[24995-25130]:ReturnStatement[25271-25406]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[25142-25151]:MarkerAnnotation[25418-25427]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[25156-25160]:SimpleType[25432-25436]"
    }, {
      "left" : "processRegExpLiteral",
      "right" : "processRegExpLiteral",
      "info" : "SimpleName[25161-25181]:SimpleName[25437-25457]"
    }, {
      "left" : "RegExpLiteral literalNode",
      "right" : "RegExpLiteral literalNode",
      "info" : "SingleVariableDeclaration[25182-25207]:SingleVariableDeclaration[25458-25483]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25209-25775]:Block[25485-26051]"
    }, {
      "left" : "Node literalStringNode = newStringNode(literalNode.getValue());",
      "right" : "Node literalStringNode = newStringNode(literalNode.getValue());",
      "info" : "VariableDeclarationStatement[25217-25280]:VariableDeclarationStatement[25493-25556]"
    }, {
      "left" : "literalStringNode.setLineno(literalNode.getLineno());",
      "right" : "literalStringNode.setLineno(literalNode.getLineno());",
      "info" : "ExpressionStatement[25326-25379]:ExpressionStatement[25602-25655]"
    }, {
      "left" : "Node node = newNode(Token.REGEXP, literalStringNode);",
      "right" : "Node node = newNode(Token.REGEXP, literalStringNode);",
      "info" : "VariableDeclarationStatement[25386-25439]:VariableDeclarationStatement[25662-25715]"
    }, {
      "left" : "String flags = literalNode.getFlags();",
      "right" : "String flags = literalNode.getFlags();",
      "info" : "VariableDeclarationStatement[25446-25484]:VariableDeclarationStatement[25722-25760]"
    }, {
      "left" : "if (flags != null && !flags.isEmpty())",
      "right" : "if (flags != null && !flags.isEmpty())",
      "info" : "IfStatement[25491-25750]:IfStatement[25767-26026]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25530-25750]:Block[25806-26026]"
    }, {
      "left" : "Node flagsNode = newStringNode(flags);",
      "right" : "Node flagsNode = newStringNode(flags);",
      "info" : "VariableDeclarationStatement[25540-25578]:VariableDeclarationStatement[25816-25854]"
    }, {
      "left" : "flagsNode.setLineno(literalNode.getLineno());",
      "right" : "flagsNode.setLineno(literalNode.getLineno());",
      "info" : "ExpressionStatement[25657-25702]:ExpressionStatement[25933-25978]"
    }, {
      "left" : "node.addChildToBack(flagsNode);",
      "right" : "node.addChildToBack(flagsNode);",
      "info" : "ExpressionStatement[25711-25742]:ExpressionStatement[25987-26018]"
    }, {
      "left" : "return node;",
      "right" : "return node;",
      "info" : "ReturnStatement[25757-25769]:ReturnStatement[26033-26045]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[25781-25790]:MarkerAnnotation[26057-26066]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[25795-25799]:SimpleType[26071-26075]"
    }, {
      "left" : "processReturnStatement",
      "right" : "processReturnStatement",
      "info" : "SimpleName[25800-25822]:SimpleName[26076-26098]"
    }, {
      "left" : "ReturnStatement statementNode",
      "right" : "ReturnStatement statementNode",
      "info" : "SingleVariableDeclaration[25823-25852]:SingleVariableDeclaration[26099-26128]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25854-26053]:Block[26130-26329]"
    }, {
      "left" : "Node node = newNode(Token.RETURN);",
      "right" : "Node node = newNode(Token.RETURN);",
      "info" : "VariableDeclarationStatement[25862-25896]:VariableDeclarationStatement[26138-26172]"
    }, {
      "left" : "if (statementNode.getReturnValue() != null)",
      "right" : "if (statementNode.getReturnValue() != null)",
      "info" : "IfStatement[25903-26028]:IfStatement[26179-26304]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25947-26028]:Block[26223-26304]"
    }, {
      "left" : "node.addChildToBack(transform(statementNode.getReturnValue()));",
      "right" : "node.addChildToBack(transform(statementNode.getReturnValue()));",
      "info" : "ExpressionStatement[25957-26020]:ExpressionStatement[26233-26296]"
    }, {
      "left" : "return node;",
      "right" : "return node;",
      "info" : "ReturnStatement[26035-26047]:ReturnStatement[26311-26323]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[26059-26068]:MarkerAnnotation[26335-26344]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[26073-26077]:SimpleType[26349-26353]"
    }, {
      "left" : "processScope",
      "right" : "processScope",
      "info" : "SimpleName[26078-26090]:SimpleName[26354-26366]"
    }, {
      "left" : "Scope scopeNode",
      "right" : "Scope scopeNode",
      "info" : "SingleVariableDeclaration[26091-26106]:SingleVariableDeclaration[26367-26382]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26108-26155]:Block[26384-26431]"
    }, {
      "left" : "return processGeneric(scopeNode);",
      "right" : "return processGeneric(scopeNode);",
      "info" : "ReturnStatement[26116-26149]:ReturnStatement[26392-26425]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[26161-26170]:MarkerAnnotation[26437-26446]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[26175-26179]:SimpleType[26451-26455]"
    }, {
      "left" : "processStringLiteral",
      "right" : "processStringLiteral",
      "info" : "SimpleName[26180-26200]:SimpleName[26456-26476]"
    }, {
      "left" : "StringLiteral literalNode",
      "right" : "StringLiteral literalNode",
      "info" : "SingleVariableDeclaration[26201-26226]:SingleVariableDeclaration[26477-26502]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26228-26305]:Block[26504-26581]"
    }, {
      "left" : "Node n = newStringNode(literalNode.getValue());",
      "right" : "Node n = newStringNode(literalNode.getValue());",
      "info" : "VariableDeclarationStatement[26236-26283]:VariableDeclarationStatement[26512-26559]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[26290-26299]:ReturnStatement[26566-26575]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[26311-26320]:MarkerAnnotation[26587-26596]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[26325-26329]:SimpleType[26601-26605]"
    }, {
      "left" : "processSwitchCase",
      "right" : "processSwitchCase",
      "info" : "SimpleName[26330-26347]:SimpleName[26606-26623]"
    }, {
      "left" : "SwitchCase caseNode",
      "right" : "SwitchCase caseNode",
      "info" : "SingleVariableDeclaration[26348-26367]:SingleVariableDeclaration[26624-26643]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26369-27034]:Block[26645-27310]"
    }, {
      "left" : "Node node;",
      "right" : "Node node;",
      "info" : "VariableDeclarationStatement[26377-26387]:VariableDeclarationStatement[26653-26663]"
    }, {
      "left" : "if (caseNode.isDefault())",
      "right" : "if (caseNode.isDefault())",
      "info" : "IfStatement[26394-26585]:IfStatement[26670-26861]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26420-26468]:Block[26696-26744]"
    }, {
      "left" : "node = newNode(Token.DEFAULT);",
      "right" : "node = newNode(Token.DEFAULT);",
      "info" : "ExpressionStatement[26430-26460]:ExpressionStatement[26706-26736]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26474-26585]:Block[26750-26861]"
    }, {
      "left" : "AstNode expr = caseNode.getExpression();",
      "right" : "AstNode expr = caseNode.getExpression();",
      "info" : "VariableDeclarationStatement[26484-26524]:VariableDeclarationStatement[26760-26800]"
    }, {
      "left" : "node = newNode(Token.CASE, transform(expr));",
      "right" : "node = newNode(Token.CASE, transform(expr));",
      "info" : "ExpressionStatement[26533-26577]:ExpressionStatement[26809-26853]"
    }, {
      "left" : "Node block = newNode(Token.BLOCK);",
      "right" : "Node block = newNode(Token.BLOCK);",
      "info" : "VariableDeclarationStatement[26592-26626]:VariableDeclarationStatement[26868-26902]"
    }, {
      "left" : "block.putBooleanProp(Node.SYNTHETIC_BLOCK_PROP, true);",
      "right" : "block.putBooleanProp(Node.SYNTHETIC_BLOCK_PROP, true);",
      "info" : "ExpressionStatement[26633-26687]:ExpressionStatement[26909-26963]"
    }, {
      "left" : "block.setLineno(caseNode.getLineno());",
      "right" : "block.setLineno(caseNode.getLineno());",
      "info" : "ExpressionStatement[26694-26732]:ExpressionStatement[26970-27008]"
    }, {
      "left" : "block.setCharno(position2charno(caseNode.getAbsolutePosition()));",
      "right" : "block.setCharno(position2charno(caseNode.getAbsolutePosition()));",
      "info" : "ExpressionStatement[26739-26804]:ExpressionStatement[27015-27080]"
    }, {
      "left" : "if (caseNode.getStatements() != null)",
      "right" : "if (caseNode.getStatements() != null)",
      "info" : "IfStatement[26811-26975]:IfStatement[27087-27251]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26849-26975]:Block[27125-27251]"
    }, {
      "left" : "for (AstNode child : caseNode.getStatements())",
      "right" : "for (AstNode child : caseNode.getStatements())",
      "info" : "EnhancedForStatement[26859-26967]:EnhancedForStatement[27135-27243]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26906-26967]:Block[27182-27243]"
    }, {
      "left" : "block.addChildToBack(transform(child));",
      "right" : "block.addChildToBack(transform(child));",
      "info" : "ExpressionStatement[26918-26957]:ExpressionStatement[27194-27233]"
    }, {
      "left" : "node.addChildToBack(block);",
      "right" : "node.addChildToBack(block);",
      "info" : "ExpressionStatement[26982-27009]:ExpressionStatement[27258-27285]"
    }, {
      "left" : "return node;",
      "right" : "return node;",
      "info" : "ReturnStatement[27016-27028]:ReturnStatement[27292-27304]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[27040-27049]:MarkerAnnotation[27316-27325]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[27054-27058]:SimpleType[27330-27334]"
    }, {
      "left" : "processSwitchStatement",
      "right" : "processSwitchStatement",
      "info" : "SimpleName[27059-27081]:SimpleName[27335-27357]"
    }, {
      "left" : "SwitchStatement statementNode",
      "right" : "SwitchStatement statementNode",
      "info" : "SingleVariableDeclaration[27082-27111]:SingleVariableDeclaration[27358-27387]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27113-27342]:Block[27389-27618]"
    }, {
      "left" : "Node node = newNode(Token.SWITCH,\n          transform(statementNode.getExpression()));",
      "right" : "Node node = newNode(Token.SWITCH,\n          transform(statementNode.getExpression()));",
      "info" : "VariableDeclarationStatement[27121-27207]:VariableDeclarationStatement[27397-27483]"
    }, {
      "left" : "for (AstNode child : statementNode.getCases())",
      "right" : "for (AstNode child : statementNode.getCases())",
      "info" : "EnhancedForStatement[27214-27317]:EnhancedForStatement[27490-27593]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27261-27317]:Block[27537-27593]"
    }, {
      "left" : "node.addChildToBack(transform(child));",
      "right" : "node.addChildToBack(transform(child));",
      "info" : "ExpressionStatement[27271-27309]:ExpressionStatement[27547-27585]"
    }, {
      "left" : "return node;",
      "right" : "return node;",
      "info" : "ReturnStatement[27324-27336]:ReturnStatement[27600-27612]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[27348-27357]:MarkerAnnotation[27624-27633]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[27362-27366]:SimpleType[27638-27642]"
    }, {
      "left" : "processThrowStatement",
      "right" : "processThrowStatement",
      "info" : "SimpleName[27367-27388]:SimpleName[27643-27664]"
    }, {
      "left" : "ThrowStatement statementNode",
      "right" : "ThrowStatement statementNode",
      "info" : "SingleVariableDeclaration[27389-27417]:SingleVariableDeclaration[27665-27693]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27419-27513]:Block[27695-27789]"
    }, {
      "left" : "return newNode(Token.THROW,\n          transform(statementNode.getExpression()));",
      "right" : "return newNode(Token.THROW,\n          transform(statementNode.getExpression()));",
      "info" : "ReturnStatement[27427-27507]:ReturnStatement[27703-27783]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[27519-27528]:MarkerAnnotation[27795-27804]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[27533-27537]:SimpleType[27809-27813]"
    }, {
      "left" : "processTryStatement",
      "right" : "processTryStatement",
      "info" : "SimpleName[27538-27557]:SimpleName[27814-27833]"
    }, {
      "left" : "TryStatement statementNode",
      "right" : "TryStatement statementNode",
      "info" : "SingleVariableDeclaration[27558-27584]:SingleVariableDeclaration[27834-27860]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27586-28612]:Block[27862-28888]"
    }, {
      "left" : "Node node = newNode(Token.TRY,\n          transformBlock(statementNode.getTryBlock()));",
      "right" : "Node node = newNode(Token.TRY,\n          transformBlock(statementNode.getTryBlock()));",
      "info" : "VariableDeclarationStatement[27594-27680]:VariableDeclarationStatement[27870-27956]"
    }, {
      "left" : "Node block = newNode(Token.BLOCK);",
      "right" : "Node block = newNode(Token.BLOCK);",
      "info" : "VariableDeclarationStatement[27687-27721]:VariableDeclarationStatement[27963-27997]"
    }, {
      "left" : "boolean lineSet = false;",
      "right" : "boolean lineSet = false;",
      "info" : "VariableDeclarationStatement[27728-27752]:VariableDeclarationStatement[28004-28028]"
    }, {
      "left" : "for (CatchClause cc : statementNode.getCatchClauses())",
      "right" : "for (CatchClause cc : statementNode.getCatchClauses())",
      "info" : "EnhancedForStatement[27760-28075]:EnhancedForStatement[28036-28351]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27815-28075]:Block[28091-28351]"
    }, {
      "left" : "if (lineSet == false)",
      "right" : "if (lineSet == false)",
      "info" : "IfStatement[27916-28022]:IfStatement[28192-28298]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27938-28022]:Block[28214-28298]"
    }, {
      "left" : "block.setLineno(cc.getLineno());",
      "right" : "block.setLineno(cc.getLineno());",
      "info" : "ExpressionStatement[27952-27984]:ExpressionStatement[28228-28260]"
    }, {
      "left" : "lineSet = true;",
      "right" : "lineSet = true;",
      "info" : "ExpressionStatement[27997-28012]:ExpressionStatement[28273-28288]"
    }, {
      "left" : "block.addChildToBack(transform(cc));",
      "right" : "block.addChildToBack(transform(cc));",
      "info" : "ExpressionStatement[28031-28067]:ExpressionStatement[28307-28343]"
    }, {
      "left" : "node.addChildToBack(block);",
      "right" : "node.addChildToBack(block);",
      "info" : "ExpressionStatement[28082-28109]:ExpressionStatement[28358-28385]"
    }, {
      "left" : "AstNode finallyBlock = statementNode.getFinallyBlock();",
      "right" : "AstNode finallyBlock = statementNode.getFinallyBlock();",
      "info" : "VariableDeclarationStatement[28117-28172]:VariableDeclarationStatement[28393-28448]"
    }, {
      "left" : "if (finallyBlock != null)",
      "right" : "if (finallyBlock != null)",
      "info" : "IfStatement[28179-28273]:IfStatement[28455-28549]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28205-28273]:Block[28481-28549]"
    }, {
      "left" : "node.addChildToBack(transformBlock(finallyBlock));",
      "right" : "node.addChildToBack(transformBlock(finallyBlock));",
      "info" : "ExpressionStatement[28215-28265]:ExpressionStatement[28491-28541]"
    }, {
      "left" : "if ((lineSet == false) && (finallyBlock != null))",
      "right" : "if ((lineSet == false) && (finallyBlock != null))",
      "info" : "IfStatement[28476-28586]:IfStatement[28752-28862]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28526-28586]:Block[28802-28862]"
    }, {
      "left" : "block.setLineno(finallyBlock.getLineno());",
      "right" : "block.setLineno(finallyBlock.getLineno());",
      "info" : "ExpressionStatement[28536-28578]:ExpressionStatement[28812-28854]"
    }, {
      "left" : "return node;",
      "right" : "return node;",
      "info" : "ReturnStatement[28594-28606]:ReturnStatement[28870-28882]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[28618-28627]:MarkerAnnotation[28894-28903]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[28632-28636]:SimpleType[28908-28912]"
    }, {
      "left" : "processUnaryExpression",
      "right" : "processUnaryExpression",
      "info" : "SimpleName[28637-28659]:SimpleName[28913-28935]"
    }, {
      "left" : "UnaryExpression exprNode",
      "right" : "UnaryExpression exprNode",
      "info" : "SingleVariableDeclaration[28660-28684]:SingleVariableDeclaration[28936-28960]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28686-29520]:Block[28962-29796]"
    }, {
      "left" : "int type = transformTokenType(exprNode.getType());",
      "right" : "int type = transformTokenType(exprNode.getType());",
      "info" : "VariableDeclarationStatement[28694-28744]:VariableDeclarationStatement[28970-29020]"
    }, {
      "left" : "Node operand = transform(exprNode.getOperand());",
      "right" : "Node operand = transform(exprNode.getOperand());",
      "info" : "VariableDeclarationStatement[28751-28799]:VariableDeclarationStatement[29027-29075]"
    }, {
      "left" : "if (type == Token.NEG && operand.getType() == Token.NUMBER)",
      "right" : "if (type == Token.NEG && operand.getType() == Token.NUMBER)",
      "info" : "IfStatement[28806-29514]:IfStatement[29082-29790]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28866-28948]:Block[29142-29224]"
    }, {
      "left" : "operand.setDouble(-operand.getDouble());",
      "right" : "operand.setDouble(-operand.getDouble());",
      "info" : "ExpressionStatement[28876-28916]:ExpressionStatement[29152-29192]"
    }, {
      "left" : "return operand;",
      "right" : "return operand;",
      "info" : "ReturnStatement[28925-28940]:ReturnStatement[29201-29216]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28954-29514]:Block[29230-29790]"
    }, {
      "left" : "if (type == Token.INC || type == Token.DEC)",
      "right" : "if (type == Token.INC || type == Token.DEC)",
      "info" : "IfStatement[28964-29337]:IfStatement[29240-29613]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29008-29337]:Block[29284-29613]"
    }, {
      "left" : "if (!validAssignmentTarget(operand))",
      "right" : "if (!validAssignmentTarget(operand))",
      "info" : "IfStatement[29020-29327]:IfStatement[29296-29603]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29057-29327]:Block[29333-29603]"
    }, {
      "left" : "String msg = (type == Token.INC)\n                ? \"invalid increment target\"\n                : \"invalid decrement target\";",
      "right" : "String msg = (type == Token.INC)\n                ? \"invalid increment target\"\n                : \"invalid decrement target\";",
      "info" : "VariableDeclarationStatement[29071-29194]:VariableDeclarationStatement[29347-29470]"
    }, {
      "left" : "errorReporter.error(\n              msg,\n              sourceName,\n              operand.getLineno(), \"\", 0);",
      "right" : "errorReporter.error(\n              msg,\n              sourceName,\n              operand.getLineno(), \"\", 0);",
      "info" : "ExpressionStatement[29207-29315]:ExpressionStatement[29483-29591]"
    }, {
      "left" : "Node node = newNode(type, operand);",
      "right" : "Node node = newNode(type, operand);",
      "info" : "VariableDeclarationStatement[29347-29382]:VariableDeclarationStatement[29623-29658]"
    }, {
      "left" : "if (exprNode.isPostfix())",
      "right" : "if (exprNode.isPostfix())",
      "info" : "IfStatement[29391-29485]:IfStatement[29667-29761]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29417-29485]:Block[29693-29761]"
    }, {
      "left" : "node.putBooleanProp(Node.INCRDECR_PROP, true);",
      "right" : "node.putBooleanProp(Node.INCRDECR_PROP, true);",
      "info" : "ExpressionStatement[29429-29475]:ExpressionStatement[29705-29751]"
    }, {
      "left" : "return node;",
      "right" : "return node;",
      "info" : "ReturnStatement[29494-29506]:ReturnStatement[29770-29782]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[29526-29533]:Modifier[29802-29809]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[29534-29541]:PrimitiveType[29810-29817]"
    }, {
      "left" : "validAssignmentTarget",
      "right" : "validAssignmentTarget",
      "info" : "SimpleName[29542-29563]:SimpleName[29818-29839]"
    }, {
      "left" : "Node target",
      "right" : "Node target",
      "info" : "SingleVariableDeclaration[29564-29575]:SingleVariableDeclaration[29840-29851]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29577-29750]:Block[29853-30026]"
    }, {
      "left" : "switch (target.getType()) {\n        case Token.NAME:\n        case Token.GETPROP:\n        case Token.GETELEM:\n          return true;\n      }",
      "right" : "switch (target.getType()) {\n        case Token.NAME:\n        case Token.GETPROP:\n        case Token.GETELEM:\n          return true;\n      }",
      "info" : "SwitchStatement[29585-29724]:SwitchStatement[29861-30000]"
    }, {
      "left" : "case Token.NAME:",
      "right" : "case Token.NAME:",
      "info" : "SwitchCase[29621-29637]:SwitchCase[29897-29913]"
    }, {
      "left" : "case Token.GETPROP:",
      "right" : "case Token.GETPROP:",
      "info" : "SwitchCase[29646-29665]:SwitchCase[29922-29941]"
    }, {
      "left" : "case Token.GETELEM:",
      "right" : "case Token.GETELEM:",
      "info" : "SwitchCase[29674-29693]:SwitchCase[29950-29969]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[29704-29716]:ReturnStatement[29980-29992]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[29731-29744]:ReturnStatement[30007-30020]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[29756-29765]:MarkerAnnotation[30032-30041]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[29770-29774]:SimpleType[30046-30050]"
    }, {
      "left" : "processVariableDeclaration",
      "right" : "processVariableDeclaration",
      "info" : "SimpleName[29775-29801]:SimpleName[30051-30077]"
    }, {
      "left" : "VariableDeclaration declarationNode",
      "right" : "VariableDeclaration declarationNode",
      "info" : "SingleVariableDeclaration[29802-29837]:SingleVariableDeclaration[30078-30113]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29839-30223]:Block[30115-30499]"
    }, {
      "left" : "if (!config.acceptConstKeyword && declarationNode.getType() ==\n          com.google.javascript.jscomp.mozilla.rhino.Token.CONST)",
      "right" : "if (!config.acceptConstKeyword && declarationNode.getType() ==\n          com.google.javascript.jscomp.mozilla.rhino.Token.CONST)",
      "info" : "IfStatement[29847-30031]:IfStatement[30123-30307]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29976-30031]:Block[30252-30307]"
    }, {
      "left" : "processIllegalToken(declarationNode);",
      "right" : "processIllegalToken(declarationNode);",
      "info" : "ExpressionStatement[29986-30023]:ExpressionStatement[30262-30299]"
    }, {
      "left" : "Node node = newNode(Token.VAR);",
      "right" : "Node node = newNode(Token.VAR);",
      "info" : "VariableDeclarationStatement[30039-30070]:VariableDeclarationStatement[30315-30346]"
    }, {
      "left" : "for (VariableInitializer child : declarationNode.getVariables())",
      "right" : "for (VariableInitializer child : declarationNode.getVariables())",
      "info" : "EnhancedForStatement[30077-30198]:EnhancedForStatement[30353-30474]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30142-30198]:Block[30418-30474]"
    }, {
      "left" : "node.addChildToBack(transform(child));",
      "right" : "node.addChildToBack(transform(child));",
      "info" : "ExpressionStatement[30152-30190]:ExpressionStatement[30428-30466]"
    }, {
      "left" : "return node;",
      "right" : "return node;",
      "info" : "ReturnStatement[30205-30217]:ReturnStatement[30481-30493]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[30229-30238]:MarkerAnnotation[30505-30514]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[30243-30247]:SimpleType[30519-30523]"
    }, {
      "left" : "processVariableInitializer",
      "right" : "processVariableInitializer",
      "info" : "SimpleName[30248-30274]:SimpleName[30524-30550]"
    }, {
      "left" : "VariableInitializer initializerNode",
      "right" : "VariableInitializer initializerNode",
      "info" : "SingleVariableDeclaration[30275-30310]:SingleVariableDeclaration[30551-30586]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30312-30574]:Block[30588-30850]"
    }, {
      "left" : "Node node = transform(initializerNode.getTarget());",
      "right" : "Node node = transform(initializerNode.getTarget());",
      "info" : "VariableDeclarationStatement[30320-30371]:VariableDeclarationStatement[30596-30647]"
    }, {
      "left" : "if (initializerNode.getInitializer() != null)",
      "right" : "if (initializerNode.getInitializer() != null)",
      "info" : "IfStatement[30378-30549]:IfStatement[30654-30825]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30424-30549]:Block[30700-30825]"
    }, {
      "left" : "node.addChildToBack(transform(initializerNode.getInitializer()));",
      "right" : "node.addChildToBack(transform(initializerNode.getInitializer()));",
      "info" : "ExpressionStatement[30434-30499]:ExpressionStatement[30710-30775]"
    }, {
      "left" : "node.setLineno(node.getLineno());",
      "right" : "node.setLineno(node.getLineno());",
      "info" : "ExpressionStatement[30508-30541]:ExpressionStatement[30784-30817]"
    }, {
      "left" : "return node;",
      "right" : "return node;",
      "info" : "ReturnStatement[30556-30568]:ReturnStatement[30832-30844]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[30580-30589]:MarkerAnnotation[30856-30865]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[30594-30598]:SimpleType[30870-30874]"
    }, {
      "left" : "processWhileLoop",
      "right" : "processWhileLoop",
      "info" : "SimpleName[30599-30615]:SimpleName[30875-30891]"
    }, {
      "left" : "WhileLoop loopNode",
      "right" : "WhileLoop loopNode",
      "info" : "SingleVariableDeclaration[30616-30634]:SingleVariableDeclaration[30892-30910]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30636-30781]:Block[30912-31057]"
    }, {
      "left" : "return newNode(\n          Token.WHILE,\n          transform(loopNode.getCondition()),\n          transformBlock(loopNode.getBody()));",
      "right" : "return newNode(\n          Token.WHILE,\n          transform(loopNode.getCondition()),\n          transformBlock(loopNode.getBody()));",
      "info" : "ReturnStatement[30644-30775]:ReturnStatement[30920-31051]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[30787-30796]:MarkerAnnotation[31063-31072]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[30801-30805]:SimpleType[31077-31081]"
    }, {
      "left" : "processWithStatement",
      "right" : "processWithStatement",
      "info" : "SimpleName[30806-30826]:SimpleName[31082-31102]"
    }, {
      "left" : "WithStatement statementNode",
      "right" : "WithStatement statementNode",
      "info" : "SingleVariableDeclaration[30827-30854]:SingleVariableDeclaration[31103-31130]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30856-31016]:Block[31132-31292]"
    }, {
      "left" : "return newNode(\n          Token.WITH,\n          transform(statementNode.getExpression()),\n          transformBlock(statementNode.getStatement()));",
      "right" : "return newNode(\n          Token.WITH,\n          transform(statementNode.getExpression()),\n          transformBlock(statementNode.getStatement()));",
      "info" : "ReturnStatement[30864-31010]:ReturnStatement[31140-31286]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[31022-31031]:MarkerAnnotation[31298-31307]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[31036-31040]:SimpleType[31312-31316]"
    }, {
      "left" : "processIllegalToken",
      "right" : "processIllegalToken",
      "info" : "SimpleName[31041-31060]:SimpleName[31317-31336]"
    }, {
      "left" : "AstNode node",
      "right" : "AstNode node",
      "info" : "SingleVariableDeclaration[31061-31073]:SingleVariableDeclaration[31337-31349]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31075-31339]:Block[31351-31615]"
    }, {
      "left" : "errorReporter.error(\n          \"Unsupported syntax: \" +\n          com.google.javascript.jscomp.mozilla.rhino.Token.typeToName(\n              node.getType()),\n          sourceName,\n          node.getLineno(), \"\", 0);",
      "right" : "errorReporter.error(\n          \"Unsupported syntax: \" +\n          com.google.javascript.jscomp.mozilla.rhino.Token.typeToName(\n              node.getType()),\n          sourceName,\n          node.getLineno(), \"\", 0);",
      "info" : "ExpressionStatement[31083-31298]:ExpressionStatement[31359-31574]"
    }, {
      "left" : "return newNode(Token.EMPTY);",
      "right" : "return newNode(Token.EMPTY);",
      "info" : "ReturnStatement[31305-31333]:ReturnStatement[31581-31609]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[31345-31349]:PrimitiveType[31621-31625]"
    }, {
      "left" : "reportDestructuringAssign",
      "right" : "reportDestructuringAssign",
      "info" : "SimpleName[31350-31375]:SimpleName[31626-31651]"
    }, {
      "left" : "AstNode node",
      "right" : "AstNode node",
      "info" : "SingleVariableDeclaration[31376-31388]:SingleVariableDeclaration[31652-31664]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31390-31530]:Block[31666-31806]"
    }, {
      "left" : "errorReporter.error(\n          \"destructuring assignment forbidden\",\n          sourceName,\n          node.getLineno(), \"\", 0);",
      "right" : "errorReporter.error(\n          \"destructuring assignment forbidden\",\n          sourceName,\n          node.getLineno(), \"\", 0);",
      "info" : "ExpressionStatement[31398-31524]:ExpressionStatement[31674-31800]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[31536-31540]:PrimitiveType[31812-31816]"
    }, {
      "left" : "reportGetter",
      "right" : "reportGetter",
      "info" : "SimpleName[31541-31553]:SimpleName[31817-31829]"
    }, {
      "left" : "AstNode node",
      "right" : "AstNode node",
      "info" : "SingleVariableDeclaration[31554-31566]:SingleVariableDeclaration[31830-31842]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31568-31720]:Block[31844-31996]"
    }, {
      "left" : "errorReporter.error(\n          \"getters are not supported in Internet Explorer\",\n          sourceName,\n          node.getLineno(), \"\", 0);",
      "right" : "errorReporter.error(\n          \"getters are not supported in Internet Explorer\",\n          sourceName,\n          node.getLineno(), \"\", 0);",
      "info" : "ExpressionStatement[31576-31714]:ExpressionStatement[31852-31990]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[31726-31730]:PrimitiveType[32002-32006]"
    }, {
      "left" : "reportSetter",
      "right" : "reportSetter",
      "info" : "SimpleName[31731-31743]:SimpleName[32007-32019]"
    }, {
      "left" : "AstNode node",
      "right" : "AstNode node",
      "info" : "SingleVariableDeclaration[31744-31756]:SingleVariableDeclaration[32020-32032]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31758-31910]:Block[32034-32186]"
    }, {
      "left" : "errorReporter.error(\n          \"setters are not supported in Internet Explorer\",\n          sourceName,\n          node.getLineno(), \"\", 0);",
      "right" : "errorReporter.error(\n          \"setters are not supported in Internet Explorer\",\n          sourceName,\n          node.getLineno(), \"\", 0);",
      "info" : "ExpressionStatement[31766-31904]:ExpressionStatement[32042-32180]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[31916-31920]:PrimitiveType[32192-32196]"
    }, {
      "left" : "reportGetterParam",
      "right" : "reportGetterParam",
      "info" : "SimpleName[31921-31938]:SimpleName[32197-32214]"
    }, {
      "left" : "AstNode node",
      "right" : "AstNode node",
      "info" : "SingleVariableDeclaration[31939-31951]:SingleVariableDeclaration[32215-32227]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31953-32090]:Block[32229-32366]"
    }, {
      "left" : "errorReporter.error(\n          \"getters may not have parameters\",\n          sourceName,\n          node.getLineno(), \"\", 0);",
      "right" : "errorReporter.error(\n          \"getters may not have parameters\",\n          sourceName,\n          node.getLineno(), \"\", 0);",
      "info" : "ExpressionStatement[31961-32084]:ExpressionStatement[32237-32360]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[32096-32100]:PrimitiveType[32372-32376]"
    }, {
      "left" : "reportSetterParam",
      "right" : "reportSetterParam",
      "info" : "SimpleName[32101-32118]:SimpleName[32377-32394]"
    }, {
      "left" : "AstNode node",
      "right" : "AstNode node",
      "info" : "SingleVariableDeclaration[32119-32131]:SingleVariableDeclaration[32395-32407]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32133-32278]:Block[32409-32554]"
    }, {
      "left" : "errorReporter.error(\n          \"setters must have exactly one parameter\",\n          sourceName,\n          node.getLineno(), \"\", 0);",
      "right" : "errorReporter.error(\n          \"setters must have exactly one parameter\",\n          sourceName,\n          node.getLineno(), \"\", 0);",
      "info" : "ExpressionStatement[32141-32272]:ExpressionStatement[32417-32548]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[32286-32293]:Modifier[32562-32569]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[32294-32300]:Modifier[32570-32576]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[32301-32304]:PrimitiveType[32577-32580]"
    }, {
      "left" : "transformTokenType",
      "right" : "transformTokenType",
      "info" : "SimpleName[32305-32323]:SimpleName[32581-32599]"
    }, {
      "left" : "int token",
      "right" : "int token",
      "info" : "SingleVariableDeclaration[32324-32333]:SingleVariableDeclaration[32600-32609]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32335-47329]:Block[32611-47605]"
    }, {
      "left" : "switch (token) {\n      case com.google.javascript.jscomp.mozilla.rhino.Token.ERROR:\n        return Token.ERROR;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.EOF:\n        return Token.EOF;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.EOL:\n        return Token.EOL;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.ENTERWITH:\n        return Token.ENTERWITH;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.LEAVEWITH:\n        return Token.LEAVEWITH;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.RETURN:\n        return Token.RETURN;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.GOTO:\n        return Token.GOTO;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.IFEQ:\n        return Token.IFEQ;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.IFNE:\n        return Token.IFNE;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.SETNAME:\n        return Token.SETNAME;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.BITOR:\n        return Token.BITOR;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.BITXOR:\n        return Token.BITXOR;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.BITAND:\n        return Token.BITAND;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.EQ:\n        return Token.EQ;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.NE:\n        return Token.NE;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.LT:\n        return Token.LT;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.LE:\n        return Token.LE;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.GT:\n        return Token.GT;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.GE:\n        return Token.GE;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.LSH:\n        return Token.LSH;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.RSH:\n        return Token.RSH;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.URSH:\n        return Token.URSH;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.ADD:\n        return Token.ADD;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.SUB:\n        return Token.SUB;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.MUL:\n        return Token.MUL;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.DIV:\n        return Token.DIV;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.MOD:\n        return Token.MOD;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.NOT:\n        return Token.NOT;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.BITNOT:\n        return Token.BITNOT;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.POS:\n        return Token.POS;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.NEG:\n        return Token.NEG;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.NEW:\n        return Token.NEW;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.DELPROP:\n        return Token.DELPROP;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.TYPEOF:\n        return Token.TYPEOF;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.GETPROP:\n        return Token.GETPROP;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.SETPROP:\n        return Token.SETPROP;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.GETELEM:\n        return Token.GETELEM;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.SETELEM:\n        return Token.SETELEM;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.CALL:\n        return Token.CALL;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.NAME:\n        return Token.NAME;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.NUMBER:\n        return Token.NUMBER;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.STRING:\n        return Token.STRING;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.NULL:\n        return Token.NULL;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.THIS:\n        return Token.THIS;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.FALSE:\n        return Token.FALSE;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.TRUE:\n        return Token.TRUE;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.SHEQ:\n        return Token.SHEQ;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.SHNE:\n        return Token.SHNE;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.REGEXP:\n        return Token.REGEXP;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.BINDNAME:\n        return Token.BINDNAME;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.THROW:\n        return Token.THROW;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.RETHROW:\n        return Token.RETHROW;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.IN:\n        return Token.IN;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.INSTANCEOF:\n        return Token.INSTANCEOF;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.LOCAL_LOAD:\n        return Token.LOCAL_LOAD;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.GETVAR:\n        return Token.GETVAR;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.SETVAR:\n        return Token.SETVAR;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.CATCH_SCOPE:\n        return Token.CATCH_SCOPE;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.ENUM_INIT_KEYS:\n        return Token.ENUM_INIT_KEYS;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.ENUM_INIT_VALUES:\n        return Token.ENUM_INIT_VALUES;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.ENUM_NEXT:\n        return Token.ENUM_NEXT;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.ENUM_ID:\n        return Token.ENUM_ID;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.THISFN:\n        return Token.THISFN;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.RETURN_RESULT:\n        return Token.RETURN_RESULT;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.ARRAYLIT:\n        return Token.ARRAYLIT;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.OBJECTLIT:\n        return Token.OBJECTLIT;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.GET_REF:\n        return Token.GET_REF;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.SET_REF:\n        return Token.SET_REF;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.DEL_REF:\n        return Token.DEL_REF;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.REF_CALL:\n        return Token.REF_CALL;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.REF_SPECIAL:\n        return Token.REF_SPECIAL;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.DEFAULTNAMESPACE:\n        return Token.DEFAULTNAMESPACE;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.ESCXMLTEXT:\n        return Token.ESCXMLTEXT;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.ESCXMLATTR:\n        return Token.ESCXMLATTR;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.REF_MEMBER:\n        return Token.REF_MEMBER;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.REF_NS_MEMBER:\n        return Token.REF_NS_MEMBER;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.REF_NAME:\n        return Token.REF_NAME;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.REF_NS_NAME:\n        return Token.REF_NS_NAME;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.TRY:\n        return Token.TRY;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.SEMI:\n        return Token.SEMI;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.LB:\n        return Token.LB;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.RB:\n        return Token.RB;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.LC:\n        return Token.LC;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.RC:\n        return Token.RC;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.LP:\n        return Token.LP;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.RP:\n        return Token.RP;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.COMMA:\n        return Token.COMMA;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.ASSIGN:\n        return Token.ASSIGN;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.ASSIGN_BITOR:\n        return Token.ASSIGN_BITOR;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.ASSIGN_BITXOR:\n        return Token.ASSIGN_BITXOR;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.ASSIGN_BITAND:\n        return Token.ASSIGN_BITAND;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.ASSIGN_LSH:\n        return Token.ASSIGN_LSH;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.ASSIGN_RSH:\n        return Token.ASSIGN_RSH;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.ASSIGN_URSH:\n        return Token.ASSIGN_URSH;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.ASSIGN_ADD:\n        return Token.ASSIGN_ADD;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.ASSIGN_SUB:\n        return Token.ASSIGN_SUB;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.ASSIGN_MUL:\n        return Token.ASSIGN_MUL;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.ASSIGN_DIV:\n        return Token.ASSIGN_DIV;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.ASSIGN_MOD:\n        return Token.ASSIGN_MOD;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.HOOK:\n        return Token.HOOK;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.COLON:\n        return Token.COLON;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.OR:\n        return Token.OR;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.AND:\n        return Token.AND;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.INC:\n        return Token.INC;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.DEC:\n        return Token.DEC;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.DOT:\n        return Token.DOT;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.FUNCTION:\n        return Token.FUNCTION;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.EXPORT:\n        return Token.EXPORT;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.IMPORT:\n        return Token.IMPORT;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.IF:\n        return Token.IF;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.ELSE:\n        return Token.ELSE;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.SWITCH:\n        return Token.SWITCH;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.CASE:\n        return Token.CASE;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.DEFAULT:\n        return Token.DEFAULT;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.WHILE:\n        return Token.WHILE;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.DO:\n        return Token.DO;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.FOR:\n        return Token.FOR;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.BREAK:\n        return Token.BREAK;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.CONTINUE:\n        return Token.CONTINUE;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.VAR:\n        return Token.VAR;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.WITH:\n        return Token.WITH;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.CATCH:\n        return Token.CATCH;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.FINALLY:\n        return Token.FINALLY;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.VOID:\n        return Token.VOID;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.RESERVED:\n        return Token.RESERVED;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.EMPTY:\n        return Token.EMPTY;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.BLOCK:\n        return Token.BLOCK;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.LABEL:\n        return Token.LABEL;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.TARGET:\n        return Token.TARGET;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.LOOP:\n        return Token.LOOP;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_VOID:\n      case com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_RESULT:\n        return Token.EXPR_RESULT;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.JSR:\n        return Token.JSR;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.SCRIPT:\n        return Token.SCRIPT;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.TYPEOFNAME:\n        return Token.TYPEOFNAME;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.USE_STACK:\n        return Token.USE_STACK;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.SETPROP_OP:\n        return Token.SETPROP_OP;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.SETELEM_OP:\n        return Token.SETELEM_OP;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.LOCAL_BLOCK:\n        return Token.LOCAL_BLOCK;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.SET_REF_OP:\n        return Token.SET_REF_OP;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.DOTDOT:\n        return Token.DOTDOT;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.COLONCOLON:\n        return Token.COLONCOLON;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.XML:\n        return Token.XML;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.DOTQUERY:\n        return Token.DOTQUERY;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.XMLATTR:\n        return Token.XMLATTR;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.XMLEND:\n        return Token.XMLEND;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.TO_OBJECT:\n        return Token.TO_OBJECT;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.TO_DOUBLE:\n        return Token.TO_DOUBLE;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.GET:\n        return Token.GET;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.SET:\n        return Token.SET;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.CONST:\n        return Token.CONST;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.SETCONST:\n        return Token.SETCONST;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.DEBUGGER:\n        return Token.DEBUGGER;\n    }",
      "right" : "switch (token) {\n      case com.google.javascript.jscomp.mozilla.rhino.Token.ERROR:\n        return Token.ERROR;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.EOF:\n        return Token.EOF;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.EOL:\n        return Token.EOL;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.ENTERWITH:\n        return Token.ENTERWITH;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.LEAVEWITH:\n        return Token.LEAVEWITH;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.RETURN:\n        return Token.RETURN;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.GOTO:\n        return Token.GOTO;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.IFEQ:\n        return Token.IFEQ;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.IFNE:\n        return Token.IFNE;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.SETNAME:\n        return Token.SETNAME;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.BITOR:\n        return Token.BITOR;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.BITXOR:\n        return Token.BITXOR;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.BITAND:\n        return Token.BITAND;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.EQ:\n        return Token.EQ;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.NE:\n        return Token.NE;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.LT:\n        return Token.LT;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.LE:\n        return Token.LE;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.GT:\n        return Token.GT;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.GE:\n        return Token.GE;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.LSH:\n        return Token.LSH;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.RSH:\n        return Token.RSH;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.URSH:\n        return Token.URSH;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.ADD:\n        return Token.ADD;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.SUB:\n        return Token.SUB;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.MUL:\n        return Token.MUL;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.DIV:\n        return Token.DIV;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.MOD:\n        return Token.MOD;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.NOT:\n        return Token.NOT;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.BITNOT:\n        return Token.BITNOT;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.POS:\n        return Token.POS;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.NEG:\n        return Token.NEG;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.NEW:\n        return Token.NEW;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.DELPROP:\n        return Token.DELPROP;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.TYPEOF:\n        return Token.TYPEOF;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.GETPROP:\n        return Token.GETPROP;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.SETPROP:\n        return Token.SETPROP;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.GETELEM:\n        return Token.GETELEM;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.SETELEM:\n        return Token.SETELEM;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.CALL:\n        return Token.CALL;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.NAME:\n        return Token.NAME;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.NUMBER:\n        return Token.NUMBER;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.STRING:\n        return Token.STRING;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.NULL:\n        return Token.NULL;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.THIS:\n        return Token.THIS;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.FALSE:\n        return Token.FALSE;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.TRUE:\n        return Token.TRUE;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.SHEQ:\n        return Token.SHEQ;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.SHNE:\n        return Token.SHNE;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.REGEXP:\n        return Token.REGEXP;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.BINDNAME:\n        return Token.BINDNAME;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.THROW:\n        return Token.THROW;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.RETHROW:\n        return Token.RETHROW;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.IN:\n        return Token.IN;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.INSTANCEOF:\n        return Token.INSTANCEOF;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.LOCAL_LOAD:\n        return Token.LOCAL_LOAD;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.GETVAR:\n        return Token.GETVAR;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.SETVAR:\n        return Token.SETVAR;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.CATCH_SCOPE:\n        return Token.CATCH_SCOPE;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.ENUM_INIT_KEYS:\n        return Token.ENUM_INIT_KEYS;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.ENUM_INIT_VALUES:\n        return Token.ENUM_INIT_VALUES;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.ENUM_NEXT:\n        return Token.ENUM_NEXT;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.ENUM_ID:\n        return Token.ENUM_ID;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.THISFN:\n        return Token.THISFN;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.RETURN_RESULT:\n        return Token.RETURN_RESULT;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.ARRAYLIT:\n        return Token.ARRAYLIT;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.OBJECTLIT:\n        return Token.OBJECTLIT;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.GET_REF:\n        return Token.GET_REF;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.SET_REF:\n        return Token.SET_REF;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.DEL_REF:\n        return Token.DEL_REF;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.REF_CALL:\n        return Token.REF_CALL;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.REF_SPECIAL:\n        return Token.REF_SPECIAL;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.DEFAULTNAMESPACE:\n        return Token.DEFAULTNAMESPACE;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.ESCXMLTEXT:\n        return Token.ESCXMLTEXT;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.ESCXMLATTR:\n        return Token.ESCXMLATTR;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.REF_MEMBER:\n        return Token.REF_MEMBER;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.REF_NS_MEMBER:\n        return Token.REF_NS_MEMBER;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.REF_NAME:\n        return Token.REF_NAME;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.REF_NS_NAME:\n        return Token.REF_NS_NAME;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.TRY:\n        return Token.TRY;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.SEMI:\n        return Token.SEMI;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.LB:\n        return Token.LB;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.RB:\n        return Token.RB;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.LC:\n        return Token.LC;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.RC:\n        return Token.RC;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.LP:\n        return Token.LP;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.RP:\n        return Token.RP;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.COMMA:\n        return Token.COMMA;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.ASSIGN:\n        return Token.ASSIGN;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.ASSIGN_BITOR:\n        return Token.ASSIGN_BITOR;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.ASSIGN_BITXOR:\n        return Token.ASSIGN_BITXOR;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.ASSIGN_BITAND:\n        return Token.ASSIGN_BITAND;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.ASSIGN_LSH:\n        return Token.ASSIGN_LSH;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.ASSIGN_RSH:\n        return Token.ASSIGN_RSH;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.ASSIGN_URSH:\n        return Token.ASSIGN_URSH;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.ASSIGN_ADD:\n        return Token.ASSIGN_ADD;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.ASSIGN_SUB:\n        return Token.ASSIGN_SUB;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.ASSIGN_MUL:\n        return Token.ASSIGN_MUL;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.ASSIGN_DIV:\n        return Token.ASSIGN_DIV;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.ASSIGN_MOD:\n        return Token.ASSIGN_MOD;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.HOOK:\n        return Token.HOOK;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.COLON:\n        return Token.COLON;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.OR:\n        return Token.OR;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.AND:\n        return Token.AND;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.INC:\n        return Token.INC;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.DEC:\n        return Token.DEC;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.DOT:\n        return Token.DOT;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.FUNCTION:\n        return Token.FUNCTION;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.EXPORT:\n        return Token.EXPORT;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.IMPORT:\n        return Token.IMPORT;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.IF:\n        return Token.IF;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.ELSE:\n        return Token.ELSE;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.SWITCH:\n        return Token.SWITCH;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.CASE:\n        return Token.CASE;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.DEFAULT:\n        return Token.DEFAULT;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.WHILE:\n        return Token.WHILE;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.DO:\n        return Token.DO;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.FOR:\n        return Token.FOR;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.BREAK:\n        return Token.BREAK;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.CONTINUE:\n        return Token.CONTINUE;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.VAR:\n        return Token.VAR;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.WITH:\n        return Token.WITH;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.CATCH:\n        return Token.CATCH;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.FINALLY:\n        return Token.FINALLY;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.VOID:\n        return Token.VOID;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.RESERVED:\n        return Token.RESERVED;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.EMPTY:\n        return Token.EMPTY;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.BLOCK:\n        return Token.BLOCK;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.LABEL:\n        return Token.LABEL;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.TARGET:\n        return Token.TARGET;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.LOOP:\n        return Token.LOOP;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_VOID:\n      case com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_RESULT:\n        return Token.EXPR_RESULT;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.JSR:\n        return Token.JSR;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.SCRIPT:\n        return Token.SCRIPT;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.TYPEOFNAME:\n        return Token.TYPEOFNAME;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.USE_STACK:\n        return Token.USE_STACK;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.SETPROP_OP:\n        return Token.SETPROP_OP;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.SETELEM_OP:\n        return Token.SETELEM_OP;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.LOCAL_BLOCK:\n        return Token.LOCAL_BLOCK;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.SET_REF_OP:\n        return Token.SET_REF_OP;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.DOTDOT:\n        return Token.DOTDOT;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.COLONCOLON:\n        return Token.COLONCOLON;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.XML:\n        return Token.XML;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.DOTQUERY:\n        return Token.DOTQUERY;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.XMLATTR:\n        return Token.XMLATTR;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.XMLEND:\n        return Token.XMLEND;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.TO_OBJECT:\n        return Token.TO_OBJECT;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.TO_DOUBLE:\n        return Token.TO_DOUBLE;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.GET:\n        return Token.GET;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.SET:\n        return Token.SET;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.CONST:\n        return Token.CONST;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.SETCONST:\n        return Token.SETCONST;\n      case com.google.javascript.jscomp.mozilla.rhino.Token.DEBUGGER:\n        return Token.DEBUGGER;\n    }",
      "info" : "SwitchStatement[32341-47238]:SwitchStatement[32617-47514]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.ERROR:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.ERROR:",
      "info" : "SwitchCase[32364-32424]:SwitchCase[32640-32700]"
    }, {
      "left" : "return Token.ERROR;",
      "right" : "return Token.ERROR;",
      "info" : "ReturnStatement[32433-32452]:ReturnStatement[32709-32728]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.EOF:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.EOF:",
      "info" : "SwitchCase[32459-32517]:SwitchCase[32735-32793]"
    }, {
      "left" : "return Token.EOF;",
      "right" : "return Token.EOF;",
      "info" : "ReturnStatement[32526-32543]:ReturnStatement[32802-32819]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.EOL:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.EOL:",
      "info" : "SwitchCase[32550-32608]:SwitchCase[32826-32884]"
    }, {
      "left" : "return Token.EOL;",
      "right" : "return Token.EOL;",
      "info" : "ReturnStatement[32617-32634]:ReturnStatement[32893-32910]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.ENTERWITH:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.ENTERWITH:",
      "info" : "SwitchCase[32641-32705]:SwitchCase[32917-32981]"
    }, {
      "left" : "return Token.ENTERWITH;",
      "right" : "return Token.ENTERWITH;",
      "info" : "ReturnStatement[32714-32737]:ReturnStatement[32990-33013]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.LEAVEWITH:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.LEAVEWITH:",
      "info" : "SwitchCase[32744-32808]:SwitchCase[33020-33084]"
    }, {
      "left" : "return Token.LEAVEWITH;",
      "right" : "return Token.LEAVEWITH;",
      "info" : "ReturnStatement[32817-32840]:ReturnStatement[33093-33116]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.RETURN:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.RETURN:",
      "info" : "SwitchCase[32847-32908]:SwitchCase[33123-33184]"
    }, {
      "left" : "return Token.RETURN;",
      "right" : "return Token.RETURN;",
      "info" : "ReturnStatement[32917-32937]:ReturnStatement[33193-33213]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.GOTO:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.GOTO:",
      "info" : "SwitchCase[32944-33003]:SwitchCase[33220-33279]"
    }, {
      "left" : "return Token.GOTO;",
      "right" : "return Token.GOTO;",
      "info" : "ReturnStatement[33012-33030]:ReturnStatement[33288-33306]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.IFEQ:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.IFEQ:",
      "info" : "SwitchCase[33037-33096]:SwitchCase[33313-33372]"
    }, {
      "left" : "return Token.IFEQ;",
      "right" : "return Token.IFEQ;",
      "info" : "ReturnStatement[33105-33123]:ReturnStatement[33381-33399]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.IFNE:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.IFNE:",
      "info" : "SwitchCase[33130-33189]:SwitchCase[33406-33465]"
    }, {
      "left" : "return Token.IFNE;",
      "right" : "return Token.IFNE;",
      "info" : "ReturnStatement[33198-33216]:ReturnStatement[33474-33492]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.SETNAME:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.SETNAME:",
      "info" : "SwitchCase[33223-33285]:SwitchCase[33499-33561]"
    }, {
      "left" : "return Token.SETNAME;",
      "right" : "return Token.SETNAME;",
      "info" : "ReturnStatement[33294-33315]:ReturnStatement[33570-33591]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.BITOR:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.BITOR:",
      "info" : "SwitchCase[33322-33382]:SwitchCase[33598-33658]"
    }, {
      "left" : "return Token.BITOR;",
      "right" : "return Token.BITOR;",
      "info" : "ReturnStatement[33391-33410]:ReturnStatement[33667-33686]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.BITXOR:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.BITXOR:",
      "info" : "SwitchCase[33417-33478]:SwitchCase[33693-33754]"
    }, {
      "left" : "return Token.BITXOR;",
      "right" : "return Token.BITXOR;",
      "info" : "ReturnStatement[33487-33507]:ReturnStatement[33763-33783]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.BITAND:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.BITAND:",
      "info" : "SwitchCase[33514-33575]:SwitchCase[33790-33851]"
    }, {
      "left" : "return Token.BITAND;",
      "right" : "return Token.BITAND;",
      "info" : "ReturnStatement[33584-33604]:ReturnStatement[33860-33880]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.EQ:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.EQ:",
      "info" : "SwitchCase[33611-33668]:SwitchCase[33887-33944]"
    }, {
      "left" : "return Token.EQ;",
      "right" : "return Token.EQ;",
      "info" : "ReturnStatement[33677-33693]:ReturnStatement[33953-33969]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.NE:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.NE:",
      "info" : "SwitchCase[33700-33757]:SwitchCase[33976-34033]"
    }, {
      "left" : "return Token.NE;",
      "right" : "return Token.NE;",
      "info" : "ReturnStatement[33766-33782]:ReturnStatement[34042-34058]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.LT:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.LT:",
      "info" : "SwitchCase[33789-33846]:SwitchCase[34065-34122]"
    }, {
      "left" : "return Token.LT;",
      "right" : "return Token.LT;",
      "info" : "ReturnStatement[33855-33871]:ReturnStatement[34131-34147]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.LE:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.LE:",
      "info" : "SwitchCase[33878-33935]:SwitchCase[34154-34211]"
    }, {
      "left" : "return Token.LE;",
      "right" : "return Token.LE;",
      "info" : "ReturnStatement[33944-33960]:ReturnStatement[34220-34236]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.GT:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.GT:",
      "info" : "SwitchCase[33967-34024]:SwitchCase[34243-34300]"
    }, {
      "left" : "return Token.GT;",
      "right" : "return Token.GT;",
      "info" : "ReturnStatement[34033-34049]:ReturnStatement[34309-34325]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.GE:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.GE:",
      "info" : "SwitchCase[34056-34113]:SwitchCase[34332-34389]"
    }, {
      "left" : "return Token.GE;",
      "right" : "return Token.GE;",
      "info" : "ReturnStatement[34122-34138]:ReturnStatement[34398-34414]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.LSH:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.LSH:",
      "info" : "SwitchCase[34145-34203]:SwitchCase[34421-34479]"
    }, {
      "left" : "return Token.LSH;",
      "right" : "return Token.LSH;",
      "info" : "ReturnStatement[34212-34229]:ReturnStatement[34488-34505]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.RSH:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.RSH:",
      "info" : "SwitchCase[34236-34294]:SwitchCase[34512-34570]"
    }, {
      "left" : "return Token.RSH;",
      "right" : "return Token.RSH;",
      "info" : "ReturnStatement[34303-34320]:ReturnStatement[34579-34596]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.URSH:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.URSH:",
      "info" : "SwitchCase[34327-34386]:SwitchCase[34603-34662]"
    }, {
      "left" : "return Token.URSH;",
      "right" : "return Token.URSH;",
      "info" : "ReturnStatement[34395-34413]:ReturnStatement[34671-34689]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.ADD:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.ADD:",
      "info" : "SwitchCase[34420-34478]:SwitchCase[34696-34754]"
    }, {
      "left" : "return Token.ADD;",
      "right" : "return Token.ADD;",
      "info" : "ReturnStatement[34487-34504]:ReturnStatement[34763-34780]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.SUB:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.SUB:",
      "info" : "SwitchCase[34511-34569]:SwitchCase[34787-34845]"
    }, {
      "left" : "return Token.SUB;",
      "right" : "return Token.SUB;",
      "info" : "ReturnStatement[34578-34595]:ReturnStatement[34854-34871]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.MUL:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.MUL:",
      "info" : "SwitchCase[34602-34660]:SwitchCase[34878-34936]"
    }, {
      "left" : "return Token.MUL;",
      "right" : "return Token.MUL;",
      "info" : "ReturnStatement[34669-34686]:ReturnStatement[34945-34962]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.DIV:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.DIV:",
      "info" : "SwitchCase[34693-34751]:SwitchCase[34969-35027]"
    }, {
      "left" : "return Token.DIV;",
      "right" : "return Token.DIV;",
      "info" : "ReturnStatement[34760-34777]:ReturnStatement[35036-35053]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.MOD:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.MOD:",
      "info" : "SwitchCase[34784-34842]:SwitchCase[35060-35118]"
    }, {
      "left" : "return Token.MOD;",
      "right" : "return Token.MOD;",
      "info" : "ReturnStatement[34851-34868]:ReturnStatement[35127-35144]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.NOT:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.NOT:",
      "info" : "SwitchCase[34875-34933]:SwitchCase[35151-35209]"
    }, {
      "left" : "return Token.NOT;",
      "right" : "return Token.NOT;",
      "info" : "ReturnStatement[34942-34959]:ReturnStatement[35218-35235]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.BITNOT:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.BITNOT:",
      "info" : "SwitchCase[34966-35027]:SwitchCase[35242-35303]"
    }, {
      "left" : "return Token.BITNOT;",
      "right" : "return Token.BITNOT;",
      "info" : "ReturnStatement[35036-35056]:ReturnStatement[35312-35332]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.POS:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.POS:",
      "info" : "SwitchCase[35063-35121]:SwitchCase[35339-35397]"
    }, {
      "left" : "return Token.POS;",
      "right" : "return Token.POS;",
      "info" : "ReturnStatement[35130-35147]:ReturnStatement[35406-35423]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.NEG:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.NEG:",
      "info" : "SwitchCase[35154-35212]:SwitchCase[35430-35488]"
    }, {
      "left" : "return Token.NEG;",
      "right" : "return Token.NEG;",
      "info" : "ReturnStatement[35221-35238]:ReturnStatement[35497-35514]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.NEW:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.NEW:",
      "info" : "SwitchCase[35245-35303]:SwitchCase[35521-35579]"
    }, {
      "left" : "return Token.NEW;",
      "right" : "return Token.NEW;",
      "info" : "ReturnStatement[35312-35329]:ReturnStatement[35588-35605]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.DELPROP:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.DELPROP:",
      "info" : "SwitchCase[35336-35398]:SwitchCase[35612-35674]"
    }, {
      "left" : "return Token.DELPROP;",
      "right" : "return Token.DELPROP;",
      "info" : "ReturnStatement[35407-35428]:ReturnStatement[35683-35704]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.TYPEOF:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.TYPEOF:",
      "info" : "SwitchCase[35435-35496]:SwitchCase[35711-35772]"
    }, {
      "left" : "return Token.TYPEOF;",
      "right" : "return Token.TYPEOF;",
      "info" : "ReturnStatement[35505-35525]:ReturnStatement[35781-35801]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.GETPROP:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.GETPROP:",
      "info" : "SwitchCase[35532-35594]:SwitchCase[35808-35870]"
    }, {
      "left" : "return Token.GETPROP;",
      "right" : "return Token.GETPROP;",
      "info" : "ReturnStatement[35603-35624]:ReturnStatement[35879-35900]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.SETPROP:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.SETPROP:",
      "info" : "SwitchCase[35631-35693]:SwitchCase[35907-35969]"
    }, {
      "left" : "return Token.SETPROP;",
      "right" : "return Token.SETPROP;",
      "info" : "ReturnStatement[35702-35723]:ReturnStatement[35978-35999]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.GETELEM:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.GETELEM:",
      "info" : "SwitchCase[35730-35792]:SwitchCase[36006-36068]"
    }, {
      "left" : "return Token.GETELEM;",
      "right" : "return Token.GETELEM;",
      "info" : "ReturnStatement[35801-35822]:ReturnStatement[36077-36098]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.SETELEM:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.SETELEM:",
      "info" : "SwitchCase[35829-35891]:SwitchCase[36105-36167]"
    }, {
      "left" : "return Token.SETELEM;",
      "right" : "return Token.SETELEM;",
      "info" : "ReturnStatement[35900-35921]:ReturnStatement[36176-36197]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.CALL:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.CALL:",
      "info" : "SwitchCase[35928-35987]:SwitchCase[36204-36263]"
    }, {
      "left" : "return Token.CALL;",
      "right" : "return Token.CALL;",
      "info" : "ReturnStatement[35996-36014]:ReturnStatement[36272-36290]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.NAME:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.NAME:",
      "info" : "SwitchCase[36021-36080]:SwitchCase[36297-36356]"
    }, {
      "left" : "return Token.NAME;",
      "right" : "return Token.NAME;",
      "info" : "ReturnStatement[36089-36107]:ReturnStatement[36365-36383]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.NUMBER:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.NUMBER:",
      "info" : "SwitchCase[36114-36175]:SwitchCase[36390-36451]"
    }, {
      "left" : "return Token.NUMBER;",
      "right" : "return Token.NUMBER;",
      "info" : "ReturnStatement[36184-36204]:ReturnStatement[36460-36480]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.STRING:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.STRING:",
      "info" : "SwitchCase[36211-36272]:SwitchCase[36487-36548]"
    }, {
      "left" : "return Token.STRING;",
      "right" : "return Token.STRING;",
      "info" : "ReturnStatement[36281-36301]:ReturnStatement[36557-36577]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.NULL:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.NULL:",
      "info" : "SwitchCase[36308-36367]:SwitchCase[36584-36643]"
    }, {
      "left" : "return Token.NULL;",
      "right" : "return Token.NULL;",
      "info" : "ReturnStatement[36376-36394]:ReturnStatement[36652-36670]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.THIS:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.THIS:",
      "info" : "SwitchCase[36401-36460]:SwitchCase[36677-36736]"
    }, {
      "left" : "return Token.THIS;",
      "right" : "return Token.THIS;",
      "info" : "ReturnStatement[36469-36487]:ReturnStatement[36745-36763]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.FALSE:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.FALSE:",
      "info" : "SwitchCase[36494-36554]:SwitchCase[36770-36830]"
    }, {
      "left" : "return Token.FALSE;",
      "right" : "return Token.FALSE;",
      "info" : "ReturnStatement[36563-36582]:ReturnStatement[36839-36858]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.TRUE:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.TRUE:",
      "info" : "SwitchCase[36589-36648]:SwitchCase[36865-36924]"
    }, {
      "left" : "return Token.TRUE;",
      "right" : "return Token.TRUE;",
      "info" : "ReturnStatement[36657-36675]:ReturnStatement[36933-36951]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.SHEQ:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.SHEQ:",
      "info" : "SwitchCase[36682-36741]:SwitchCase[36958-37017]"
    }, {
      "left" : "return Token.SHEQ;",
      "right" : "return Token.SHEQ;",
      "info" : "ReturnStatement[36750-36768]:ReturnStatement[37026-37044]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.SHNE:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.SHNE:",
      "info" : "SwitchCase[36775-36834]:SwitchCase[37051-37110]"
    }, {
      "left" : "return Token.SHNE;",
      "right" : "return Token.SHNE;",
      "info" : "ReturnStatement[36843-36861]:ReturnStatement[37119-37137]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.REGEXP:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.REGEXP:",
      "info" : "SwitchCase[36868-36929]:SwitchCase[37144-37205]"
    }, {
      "left" : "return Token.REGEXP;",
      "right" : "return Token.REGEXP;",
      "info" : "ReturnStatement[36938-36958]:ReturnStatement[37214-37234]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.BINDNAME:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.BINDNAME:",
      "info" : "SwitchCase[36965-37028]:SwitchCase[37241-37304]"
    }, {
      "left" : "return Token.BINDNAME;",
      "right" : "return Token.BINDNAME;",
      "info" : "ReturnStatement[37037-37059]:ReturnStatement[37313-37335]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.THROW:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.THROW:",
      "info" : "SwitchCase[37066-37126]:SwitchCase[37342-37402]"
    }, {
      "left" : "return Token.THROW;",
      "right" : "return Token.THROW;",
      "info" : "ReturnStatement[37135-37154]:ReturnStatement[37411-37430]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.RETHROW:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.RETHROW:",
      "info" : "SwitchCase[37161-37223]:SwitchCase[37437-37499]"
    }, {
      "left" : "return Token.RETHROW;",
      "right" : "return Token.RETHROW;",
      "info" : "ReturnStatement[37232-37253]:ReturnStatement[37508-37529]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.IN:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.IN:",
      "info" : "SwitchCase[37260-37317]:SwitchCase[37536-37593]"
    }, {
      "left" : "return Token.IN;",
      "right" : "return Token.IN;",
      "info" : "ReturnStatement[37326-37342]:ReturnStatement[37602-37618]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.INSTANCEOF:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.INSTANCEOF:",
      "info" : "SwitchCase[37349-37414]:SwitchCase[37625-37690]"
    }, {
      "left" : "return Token.INSTANCEOF;",
      "right" : "return Token.INSTANCEOF;",
      "info" : "ReturnStatement[37423-37447]:ReturnStatement[37699-37723]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.LOCAL_LOAD:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.LOCAL_LOAD:",
      "info" : "SwitchCase[37454-37519]:SwitchCase[37730-37795]"
    }, {
      "left" : "return Token.LOCAL_LOAD;",
      "right" : "return Token.LOCAL_LOAD;",
      "info" : "ReturnStatement[37528-37552]:ReturnStatement[37804-37828]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.GETVAR:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.GETVAR:",
      "info" : "SwitchCase[37559-37620]:SwitchCase[37835-37896]"
    }, {
      "left" : "return Token.GETVAR;",
      "right" : "return Token.GETVAR;",
      "info" : "ReturnStatement[37629-37649]:ReturnStatement[37905-37925]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.SETVAR:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.SETVAR:",
      "info" : "SwitchCase[37656-37717]:SwitchCase[37932-37993]"
    }, {
      "left" : "return Token.SETVAR;",
      "right" : "return Token.SETVAR;",
      "info" : "ReturnStatement[37726-37746]:ReturnStatement[38002-38022]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.CATCH_SCOPE:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.CATCH_SCOPE:",
      "info" : "SwitchCase[37753-37819]:SwitchCase[38029-38095]"
    }, {
      "left" : "return Token.CATCH_SCOPE;",
      "right" : "return Token.CATCH_SCOPE;",
      "info" : "ReturnStatement[37828-37853]:ReturnStatement[38104-38129]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.ENUM_INIT_KEYS:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.ENUM_INIT_KEYS:",
      "info" : "SwitchCase[37860-37929]:SwitchCase[38136-38205]"
    }, {
      "left" : "return Token.ENUM_INIT_KEYS;",
      "right" : "return Token.ENUM_INIT_KEYS;",
      "info" : "ReturnStatement[37938-37966]:ReturnStatement[38214-38242]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.ENUM_INIT_VALUES:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.ENUM_INIT_VALUES:",
      "info" : "SwitchCase[37973-38044]:SwitchCase[38249-38320]"
    }, {
      "left" : "return Token.ENUM_INIT_VALUES;",
      "right" : "return Token.ENUM_INIT_VALUES;",
      "info" : "ReturnStatement[38053-38083]:ReturnStatement[38329-38359]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.ENUM_NEXT:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.ENUM_NEXT:",
      "info" : "SwitchCase[38090-38154]:SwitchCase[38366-38430]"
    }, {
      "left" : "return Token.ENUM_NEXT;",
      "right" : "return Token.ENUM_NEXT;",
      "info" : "ReturnStatement[38163-38186]:ReturnStatement[38439-38462]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.ENUM_ID:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.ENUM_ID:",
      "info" : "SwitchCase[38193-38255]:SwitchCase[38469-38531]"
    }, {
      "left" : "return Token.ENUM_ID;",
      "right" : "return Token.ENUM_ID;",
      "info" : "ReturnStatement[38264-38285]:ReturnStatement[38540-38561]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.THISFN:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.THISFN:",
      "info" : "SwitchCase[38292-38353]:SwitchCase[38568-38629]"
    }, {
      "left" : "return Token.THISFN;",
      "right" : "return Token.THISFN;",
      "info" : "ReturnStatement[38362-38382]:ReturnStatement[38638-38658]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.RETURN_RESULT:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.RETURN_RESULT:",
      "info" : "SwitchCase[38389-38457]:SwitchCase[38665-38733]"
    }, {
      "left" : "return Token.RETURN_RESULT;",
      "right" : "return Token.RETURN_RESULT;",
      "info" : "ReturnStatement[38466-38493]:ReturnStatement[38742-38769]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.ARRAYLIT:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.ARRAYLIT:",
      "info" : "SwitchCase[38500-38563]:SwitchCase[38776-38839]"
    }, {
      "left" : "return Token.ARRAYLIT;",
      "right" : "return Token.ARRAYLIT;",
      "info" : "ReturnStatement[38572-38594]:ReturnStatement[38848-38870]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.OBJECTLIT:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.OBJECTLIT:",
      "info" : "SwitchCase[38601-38665]:SwitchCase[38877-38941]"
    }, {
      "left" : "return Token.OBJECTLIT;",
      "right" : "return Token.OBJECTLIT;",
      "info" : "ReturnStatement[38674-38697]:ReturnStatement[38950-38973]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.GET_REF:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.GET_REF:",
      "info" : "SwitchCase[38704-38766]:SwitchCase[38980-39042]"
    }, {
      "left" : "return Token.GET_REF;",
      "right" : "return Token.GET_REF;",
      "info" : "ReturnStatement[38775-38796]:ReturnStatement[39051-39072]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.SET_REF:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.SET_REF:",
      "info" : "SwitchCase[38803-38865]:SwitchCase[39079-39141]"
    }, {
      "left" : "return Token.SET_REF;",
      "right" : "return Token.SET_REF;",
      "info" : "ReturnStatement[38874-38895]:ReturnStatement[39150-39171]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.DEL_REF:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.DEL_REF:",
      "info" : "SwitchCase[38902-38964]:SwitchCase[39178-39240]"
    }, {
      "left" : "return Token.DEL_REF;",
      "right" : "return Token.DEL_REF;",
      "info" : "ReturnStatement[38973-38994]:ReturnStatement[39249-39270]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.REF_CALL:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.REF_CALL:",
      "info" : "SwitchCase[39001-39064]:SwitchCase[39277-39340]"
    }, {
      "left" : "return Token.REF_CALL;",
      "right" : "return Token.REF_CALL;",
      "info" : "ReturnStatement[39073-39095]:ReturnStatement[39349-39371]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.REF_SPECIAL:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.REF_SPECIAL:",
      "info" : "SwitchCase[39102-39168]:SwitchCase[39378-39444]"
    }, {
      "left" : "return Token.REF_SPECIAL;",
      "right" : "return Token.REF_SPECIAL;",
      "info" : "ReturnStatement[39177-39202]:ReturnStatement[39453-39478]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.DEFAULTNAMESPACE:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.DEFAULTNAMESPACE:",
      "info" : "SwitchCase[39209-39280]:SwitchCase[39485-39556]"
    }, {
      "left" : "return Token.DEFAULTNAMESPACE;",
      "right" : "return Token.DEFAULTNAMESPACE;",
      "info" : "ReturnStatement[39289-39319]:ReturnStatement[39565-39595]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.ESCXMLTEXT:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.ESCXMLTEXT:",
      "info" : "SwitchCase[39326-39391]:SwitchCase[39602-39667]"
    }, {
      "left" : "return Token.ESCXMLTEXT;",
      "right" : "return Token.ESCXMLTEXT;",
      "info" : "ReturnStatement[39400-39424]:ReturnStatement[39676-39700]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.ESCXMLATTR:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.ESCXMLATTR:",
      "info" : "SwitchCase[39431-39496]:SwitchCase[39707-39772]"
    }, {
      "left" : "return Token.ESCXMLATTR;",
      "right" : "return Token.ESCXMLATTR;",
      "info" : "ReturnStatement[39505-39529]:ReturnStatement[39781-39805]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.REF_MEMBER:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.REF_MEMBER:",
      "info" : "SwitchCase[39536-39601]:SwitchCase[39812-39877]"
    }, {
      "left" : "return Token.REF_MEMBER;",
      "right" : "return Token.REF_MEMBER;",
      "info" : "ReturnStatement[39610-39634]:ReturnStatement[39886-39910]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.REF_NS_MEMBER:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.REF_NS_MEMBER:",
      "info" : "SwitchCase[39641-39709]:SwitchCase[39917-39985]"
    }, {
      "left" : "return Token.REF_NS_MEMBER;",
      "right" : "return Token.REF_NS_MEMBER;",
      "info" : "ReturnStatement[39718-39745]:ReturnStatement[39994-40021]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.REF_NAME:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.REF_NAME:",
      "info" : "SwitchCase[39752-39815]:SwitchCase[40028-40091]"
    }, {
      "left" : "return Token.REF_NAME;",
      "right" : "return Token.REF_NAME;",
      "info" : "ReturnStatement[39824-39846]:ReturnStatement[40100-40122]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.REF_NS_NAME:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.REF_NS_NAME:",
      "info" : "SwitchCase[39853-39919]:SwitchCase[40129-40195]"
    }, {
      "left" : "return Token.REF_NS_NAME;",
      "right" : "return Token.REF_NS_NAME;",
      "info" : "ReturnStatement[39928-39953]:ReturnStatement[40204-40229]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.TRY:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.TRY:",
      "info" : "SwitchCase[39960-40018]:SwitchCase[40236-40294]"
    }, {
      "left" : "return Token.TRY;",
      "right" : "return Token.TRY;",
      "info" : "ReturnStatement[40027-40044]:ReturnStatement[40303-40320]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.SEMI:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.SEMI:",
      "info" : "SwitchCase[40051-40110]:SwitchCase[40327-40386]"
    }, {
      "left" : "return Token.SEMI;",
      "right" : "return Token.SEMI;",
      "info" : "ReturnStatement[40119-40137]:ReturnStatement[40395-40413]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.LB:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.LB:",
      "info" : "SwitchCase[40144-40201]:SwitchCase[40420-40477]"
    }, {
      "left" : "return Token.LB;",
      "right" : "return Token.LB;",
      "info" : "ReturnStatement[40210-40226]:ReturnStatement[40486-40502]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.RB:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.RB:",
      "info" : "SwitchCase[40233-40290]:SwitchCase[40509-40566]"
    }, {
      "left" : "return Token.RB;",
      "right" : "return Token.RB;",
      "info" : "ReturnStatement[40299-40315]:ReturnStatement[40575-40591]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.LC:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.LC:",
      "info" : "SwitchCase[40322-40379]:SwitchCase[40598-40655]"
    }, {
      "left" : "return Token.LC;",
      "right" : "return Token.LC;",
      "info" : "ReturnStatement[40388-40404]:ReturnStatement[40664-40680]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.RC:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.RC:",
      "info" : "SwitchCase[40411-40468]:SwitchCase[40687-40744]"
    }, {
      "left" : "return Token.RC;",
      "right" : "return Token.RC;",
      "info" : "ReturnStatement[40477-40493]:ReturnStatement[40753-40769]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.LP:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.LP:",
      "info" : "SwitchCase[40500-40557]:SwitchCase[40776-40833]"
    }, {
      "left" : "return Token.LP;",
      "right" : "return Token.LP;",
      "info" : "ReturnStatement[40566-40582]:ReturnStatement[40842-40858]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.RP:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.RP:",
      "info" : "SwitchCase[40589-40646]:SwitchCase[40865-40922]"
    }, {
      "left" : "return Token.RP;",
      "right" : "return Token.RP;",
      "info" : "ReturnStatement[40655-40671]:ReturnStatement[40931-40947]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.COMMA:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.COMMA:",
      "info" : "SwitchCase[40678-40738]:SwitchCase[40954-41014]"
    }, {
      "left" : "return Token.COMMA;",
      "right" : "return Token.COMMA;",
      "info" : "ReturnStatement[40747-40766]:ReturnStatement[41023-41042]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.ASSIGN:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.ASSIGN:",
      "info" : "SwitchCase[40773-40834]:SwitchCase[41049-41110]"
    }, {
      "left" : "return Token.ASSIGN;",
      "right" : "return Token.ASSIGN;",
      "info" : "ReturnStatement[40843-40863]:ReturnStatement[41119-41139]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.ASSIGN_BITOR:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.ASSIGN_BITOR:",
      "info" : "SwitchCase[40870-40937]:SwitchCase[41146-41213]"
    }, {
      "left" : "return Token.ASSIGN_BITOR;",
      "right" : "return Token.ASSIGN_BITOR;",
      "info" : "ReturnStatement[40946-40972]:ReturnStatement[41222-41248]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.ASSIGN_BITXOR:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.ASSIGN_BITXOR:",
      "info" : "SwitchCase[40979-41047]:SwitchCase[41255-41323]"
    }, {
      "left" : "return Token.ASSIGN_BITXOR;",
      "right" : "return Token.ASSIGN_BITXOR;",
      "info" : "ReturnStatement[41056-41083]:ReturnStatement[41332-41359]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.ASSIGN_BITAND:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.ASSIGN_BITAND:",
      "info" : "SwitchCase[41090-41158]:SwitchCase[41366-41434]"
    }, {
      "left" : "return Token.ASSIGN_BITAND;",
      "right" : "return Token.ASSIGN_BITAND;",
      "info" : "ReturnStatement[41167-41194]:ReturnStatement[41443-41470]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.ASSIGN_LSH:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.ASSIGN_LSH:",
      "info" : "SwitchCase[41201-41266]:SwitchCase[41477-41542]"
    }, {
      "left" : "return Token.ASSIGN_LSH;",
      "right" : "return Token.ASSIGN_LSH;",
      "info" : "ReturnStatement[41275-41299]:ReturnStatement[41551-41575]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.ASSIGN_RSH:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.ASSIGN_RSH:",
      "info" : "SwitchCase[41306-41371]:SwitchCase[41582-41647]"
    }, {
      "left" : "return Token.ASSIGN_RSH;",
      "right" : "return Token.ASSIGN_RSH;",
      "info" : "ReturnStatement[41380-41404]:ReturnStatement[41656-41680]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.ASSIGN_URSH:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.ASSIGN_URSH:",
      "info" : "SwitchCase[41411-41477]:SwitchCase[41687-41753]"
    }, {
      "left" : "return Token.ASSIGN_URSH;",
      "right" : "return Token.ASSIGN_URSH;",
      "info" : "ReturnStatement[41486-41511]:ReturnStatement[41762-41787]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.ASSIGN_ADD:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.ASSIGN_ADD:",
      "info" : "SwitchCase[41518-41583]:SwitchCase[41794-41859]"
    }, {
      "left" : "return Token.ASSIGN_ADD;",
      "right" : "return Token.ASSIGN_ADD;",
      "info" : "ReturnStatement[41592-41616]:ReturnStatement[41868-41892]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.ASSIGN_SUB:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.ASSIGN_SUB:",
      "info" : "SwitchCase[41623-41688]:SwitchCase[41899-41964]"
    }, {
      "left" : "return Token.ASSIGN_SUB;",
      "right" : "return Token.ASSIGN_SUB;",
      "info" : "ReturnStatement[41697-41721]:ReturnStatement[41973-41997]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.ASSIGN_MUL:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.ASSIGN_MUL:",
      "info" : "SwitchCase[41728-41793]:SwitchCase[42004-42069]"
    }, {
      "left" : "return Token.ASSIGN_MUL;",
      "right" : "return Token.ASSIGN_MUL;",
      "info" : "ReturnStatement[41802-41826]:ReturnStatement[42078-42102]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.ASSIGN_DIV:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.ASSIGN_DIV:",
      "info" : "SwitchCase[41833-41898]:SwitchCase[42109-42174]"
    }, {
      "left" : "return Token.ASSIGN_DIV;",
      "right" : "return Token.ASSIGN_DIV;",
      "info" : "ReturnStatement[41907-41931]:ReturnStatement[42183-42207]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.ASSIGN_MOD:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.ASSIGN_MOD:",
      "info" : "SwitchCase[41938-42003]:SwitchCase[42214-42279]"
    }, {
      "left" : "return Token.ASSIGN_MOD;",
      "right" : "return Token.ASSIGN_MOD;",
      "info" : "ReturnStatement[42012-42036]:ReturnStatement[42288-42312]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.HOOK:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.HOOK:",
      "info" : "SwitchCase[42043-42102]:SwitchCase[42319-42378]"
    }, {
      "left" : "return Token.HOOK;",
      "right" : "return Token.HOOK;",
      "info" : "ReturnStatement[42111-42129]:ReturnStatement[42387-42405]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.COLON:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.COLON:",
      "info" : "SwitchCase[42136-42196]:SwitchCase[42412-42472]"
    }, {
      "left" : "return Token.COLON;",
      "right" : "return Token.COLON;",
      "info" : "ReturnStatement[42205-42224]:ReturnStatement[42481-42500]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.OR:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.OR:",
      "info" : "SwitchCase[42231-42288]:SwitchCase[42507-42564]"
    }, {
      "left" : "return Token.OR;",
      "right" : "return Token.OR;",
      "info" : "ReturnStatement[42297-42313]:ReturnStatement[42573-42589]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.AND:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.AND:",
      "info" : "SwitchCase[42320-42378]:SwitchCase[42596-42654]"
    }, {
      "left" : "return Token.AND;",
      "right" : "return Token.AND;",
      "info" : "ReturnStatement[42387-42404]:ReturnStatement[42663-42680]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.INC:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.INC:",
      "info" : "SwitchCase[42411-42469]:SwitchCase[42687-42745]"
    }, {
      "left" : "return Token.INC;",
      "right" : "return Token.INC;",
      "info" : "ReturnStatement[42478-42495]:ReturnStatement[42754-42771]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.DEC:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.DEC:",
      "info" : "SwitchCase[42502-42560]:SwitchCase[42778-42836]"
    }, {
      "left" : "return Token.DEC;",
      "right" : "return Token.DEC;",
      "info" : "ReturnStatement[42569-42586]:ReturnStatement[42845-42862]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.DOT:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.DOT:",
      "info" : "SwitchCase[42593-42651]:SwitchCase[42869-42927]"
    }, {
      "left" : "return Token.DOT;",
      "right" : "return Token.DOT;",
      "info" : "ReturnStatement[42660-42677]:ReturnStatement[42936-42953]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.FUNCTION:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.FUNCTION:",
      "info" : "SwitchCase[42684-42747]:SwitchCase[42960-43023]"
    }, {
      "left" : "return Token.FUNCTION;",
      "right" : "return Token.FUNCTION;",
      "info" : "ReturnStatement[42756-42778]:ReturnStatement[43032-43054]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.EXPORT:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.EXPORT:",
      "info" : "SwitchCase[42785-42846]:SwitchCase[43061-43122]"
    }, {
      "left" : "return Token.EXPORT;",
      "right" : "return Token.EXPORT;",
      "info" : "ReturnStatement[42855-42875]:ReturnStatement[43131-43151]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.IMPORT:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.IMPORT:",
      "info" : "SwitchCase[42882-42943]:SwitchCase[43158-43219]"
    }, {
      "left" : "return Token.IMPORT;",
      "right" : "return Token.IMPORT;",
      "info" : "ReturnStatement[42952-42972]:ReturnStatement[43228-43248]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.IF:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.IF:",
      "info" : "SwitchCase[42979-43036]:SwitchCase[43255-43312]"
    }, {
      "left" : "return Token.IF;",
      "right" : "return Token.IF;",
      "info" : "ReturnStatement[43045-43061]:ReturnStatement[43321-43337]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.ELSE:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.ELSE:",
      "info" : "SwitchCase[43068-43127]:SwitchCase[43344-43403]"
    }, {
      "left" : "return Token.ELSE;",
      "right" : "return Token.ELSE;",
      "info" : "ReturnStatement[43136-43154]:ReturnStatement[43412-43430]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.SWITCH:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.SWITCH:",
      "info" : "SwitchCase[43161-43222]:SwitchCase[43437-43498]"
    }, {
      "left" : "return Token.SWITCH;",
      "right" : "return Token.SWITCH;",
      "info" : "ReturnStatement[43231-43251]:ReturnStatement[43507-43527]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.CASE:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.CASE:",
      "info" : "SwitchCase[43258-43317]:SwitchCase[43534-43593]"
    }, {
      "left" : "return Token.CASE;",
      "right" : "return Token.CASE;",
      "info" : "ReturnStatement[43326-43344]:ReturnStatement[43602-43620]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.DEFAULT:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.DEFAULT:",
      "info" : "SwitchCase[43351-43413]:SwitchCase[43627-43689]"
    }, {
      "left" : "return Token.DEFAULT;",
      "right" : "return Token.DEFAULT;",
      "info" : "ReturnStatement[43422-43443]:ReturnStatement[43698-43719]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.WHILE:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.WHILE:",
      "info" : "SwitchCase[43450-43510]:SwitchCase[43726-43786]"
    }, {
      "left" : "return Token.WHILE;",
      "right" : "return Token.WHILE;",
      "info" : "ReturnStatement[43519-43538]:ReturnStatement[43795-43814]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.DO:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.DO:",
      "info" : "SwitchCase[43545-43602]:SwitchCase[43821-43878]"
    }, {
      "left" : "return Token.DO;",
      "right" : "return Token.DO;",
      "info" : "ReturnStatement[43611-43627]:ReturnStatement[43887-43903]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.FOR:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.FOR:",
      "info" : "SwitchCase[43634-43692]:SwitchCase[43910-43968]"
    }, {
      "left" : "return Token.FOR;",
      "right" : "return Token.FOR;",
      "info" : "ReturnStatement[43701-43718]:ReturnStatement[43977-43994]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.BREAK:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.BREAK:",
      "info" : "SwitchCase[43725-43785]:SwitchCase[44001-44061]"
    }, {
      "left" : "return Token.BREAK;",
      "right" : "return Token.BREAK;",
      "info" : "ReturnStatement[43794-43813]:ReturnStatement[44070-44089]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.CONTINUE:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.CONTINUE:",
      "info" : "SwitchCase[43820-43883]:SwitchCase[44096-44159]"
    }, {
      "left" : "return Token.CONTINUE;",
      "right" : "return Token.CONTINUE;",
      "info" : "ReturnStatement[43892-43914]:ReturnStatement[44168-44190]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.VAR:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.VAR:",
      "info" : "SwitchCase[43921-43979]:SwitchCase[44197-44255]"
    }, {
      "left" : "return Token.VAR;",
      "right" : "return Token.VAR;",
      "info" : "ReturnStatement[43988-44005]:ReturnStatement[44264-44281]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.WITH:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.WITH:",
      "info" : "SwitchCase[44012-44071]:SwitchCase[44288-44347]"
    }, {
      "left" : "return Token.WITH;",
      "right" : "return Token.WITH;",
      "info" : "ReturnStatement[44080-44098]:ReturnStatement[44356-44374]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.CATCH:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.CATCH:",
      "info" : "SwitchCase[44105-44165]:SwitchCase[44381-44441]"
    }, {
      "left" : "return Token.CATCH;",
      "right" : "return Token.CATCH;",
      "info" : "ReturnStatement[44174-44193]:ReturnStatement[44450-44469]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.FINALLY:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.FINALLY:",
      "info" : "SwitchCase[44200-44262]:SwitchCase[44476-44538]"
    }, {
      "left" : "return Token.FINALLY;",
      "right" : "return Token.FINALLY;",
      "info" : "ReturnStatement[44271-44292]:ReturnStatement[44547-44568]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.VOID:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.VOID:",
      "info" : "SwitchCase[44299-44358]:SwitchCase[44575-44634]"
    }, {
      "left" : "return Token.VOID;",
      "right" : "return Token.VOID;",
      "info" : "ReturnStatement[44367-44385]:ReturnStatement[44643-44661]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.RESERVED:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.RESERVED:",
      "info" : "SwitchCase[44392-44455]:SwitchCase[44668-44731]"
    }, {
      "left" : "return Token.RESERVED;",
      "right" : "return Token.RESERVED;",
      "info" : "ReturnStatement[44464-44486]:ReturnStatement[44740-44762]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.EMPTY:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.EMPTY:",
      "info" : "SwitchCase[44493-44553]:SwitchCase[44769-44829]"
    }, {
      "left" : "return Token.EMPTY;",
      "right" : "return Token.EMPTY;",
      "info" : "ReturnStatement[44562-44581]:ReturnStatement[44838-44857]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.BLOCK:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.BLOCK:",
      "info" : "SwitchCase[44588-44648]:SwitchCase[44864-44924]"
    }, {
      "left" : "return Token.BLOCK;",
      "right" : "return Token.BLOCK;",
      "info" : "ReturnStatement[44657-44676]:ReturnStatement[44933-44952]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.LABEL:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.LABEL:",
      "info" : "SwitchCase[44683-44743]:SwitchCase[44959-45019]"
    }, {
      "left" : "return Token.LABEL;",
      "right" : "return Token.LABEL;",
      "info" : "ReturnStatement[44752-44771]:ReturnStatement[45028-45047]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.TARGET:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.TARGET:",
      "info" : "SwitchCase[44778-44839]:SwitchCase[45054-45115]"
    }, {
      "left" : "return Token.TARGET;",
      "right" : "return Token.TARGET;",
      "info" : "ReturnStatement[44848-44868]:ReturnStatement[45124-45144]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.LOOP:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.LOOP:",
      "info" : "SwitchCase[44875-44934]:SwitchCase[45151-45210]"
    }, {
      "left" : "return Token.LOOP;",
      "right" : "return Token.LOOP;",
      "info" : "ReturnStatement[44943-44961]:ReturnStatement[45219-45237]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_VOID:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_VOID:",
      "info" : "SwitchCase[44968-45032]:SwitchCase[45244-45308]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_RESULT:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.EXPR_RESULT:",
      "info" : "SwitchCase[45039-45105]:SwitchCase[45315-45381]"
    }, {
      "left" : "return Token.EXPR_RESULT;",
      "right" : "return Token.EXPR_RESULT;",
      "info" : "ReturnStatement[45114-45139]:ReturnStatement[45390-45415]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.JSR:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.JSR:",
      "info" : "SwitchCase[45146-45204]:SwitchCase[45422-45480]"
    }, {
      "left" : "return Token.JSR;",
      "right" : "return Token.JSR;",
      "info" : "ReturnStatement[45213-45230]:ReturnStatement[45489-45506]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.SCRIPT:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.SCRIPT:",
      "info" : "SwitchCase[45237-45298]:SwitchCase[45513-45574]"
    }, {
      "left" : "return Token.SCRIPT;",
      "right" : "return Token.SCRIPT;",
      "info" : "ReturnStatement[45307-45327]:ReturnStatement[45583-45603]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.TYPEOFNAME:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.TYPEOFNAME:",
      "info" : "SwitchCase[45334-45399]:SwitchCase[45610-45675]"
    }, {
      "left" : "return Token.TYPEOFNAME;",
      "right" : "return Token.TYPEOFNAME;",
      "info" : "ReturnStatement[45408-45432]:ReturnStatement[45684-45708]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.USE_STACK:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.USE_STACK:",
      "info" : "SwitchCase[45439-45503]:SwitchCase[45715-45779]"
    }, {
      "left" : "return Token.USE_STACK;",
      "right" : "return Token.USE_STACK;",
      "info" : "ReturnStatement[45512-45535]:ReturnStatement[45788-45811]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.SETPROP_OP:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.SETPROP_OP:",
      "info" : "SwitchCase[45542-45607]:SwitchCase[45818-45883]"
    }, {
      "left" : "return Token.SETPROP_OP;",
      "right" : "return Token.SETPROP_OP;",
      "info" : "ReturnStatement[45616-45640]:ReturnStatement[45892-45916]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.SETELEM_OP:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.SETELEM_OP:",
      "info" : "SwitchCase[45647-45712]:SwitchCase[45923-45988]"
    }, {
      "left" : "return Token.SETELEM_OP;",
      "right" : "return Token.SETELEM_OP;",
      "info" : "ReturnStatement[45721-45745]:ReturnStatement[45997-46021]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.LOCAL_BLOCK:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.LOCAL_BLOCK:",
      "info" : "SwitchCase[45752-45818]:SwitchCase[46028-46094]"
    }, {
      "left" : "return Token.LOCAL_BLOCK;",
      "right" : "return Token.LOCAL_BLOCK;",
      "info" : "ReturnStatement[45827-45852]:ReturnStatement[46103-46128]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.SET_REF_OP:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.SET_REF_OP:",
      "info" : "SwitchCase[45859-45924]:SwitchCase[46135-46200]"
    }, {
      "left" : "return Token.SET_REF_OP;",
      "right" : "return Token.SET_REF_OP;",
      "info" : "ReturnStatement[45933-45957]:ReturnStatement[46209-46233]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.DOTDOT:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.DOTDOT:",
      "info" : "SwitchCase[45964-46025]:SwitchCase[46240-46301]"
    }, {
      "left" : "return Token.DOTDOT;",
      "right" : "return Token.DOTDOT;",
      "info" : "ReturnStatement[46034-46054]:ReturnStatement[46310-46330]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.COLONCOLON:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.COLONCOLON:",
      "info" : "SwitchCase[46061-46126]:SwitchCase[46337-46402]"
    }, {
      "left" : "return Token.COLONCOLON;",
      "right" : "return Token.COLONCOLON;",
      "info" : "ReturnStatement[46135-46159]:ReturnStatement[46411-46435]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.XML:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.XML:",
      "info" : "SwitchCase[46166-46224]:SwitchCase[46442-46500]"
    }, {
      "left" : "return Token.XML;",
      "right" : "return Token.XML;",
      "info" : "ReturnStatement[46233-46250]:ReturnStatement[46509-46526]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.DOTQUERY:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.DOTQUERY:",
      "info" : "SwitchCase[46257-46320]:SwitchCase[46533-46596]"
    }, {
      "left" : "return Token.DOTQUERY;",
      "right" : "return Token.DOTQUERY;",
      "info" : "ReturnStatement[46329-46351]:ReturnStatement[46605-46627]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.XMLATTR:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.XMLATTR:",
      "info" : "SwitchCase[46358-46420]:SwitchCase[46634-46696]"
    }, {
      "left" : "return Token.XMLATTR;",
      "right" : "return Token.XMLATTR;",
      "info" : "ReturnStatement[46429-46450]:ReturnStatement[46705-46726]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.XMLEND:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.XMLEND:",
      "info" : "SwitchCase[46457-46518]:SwitchCase[46733-46794]"
    }, {
      "left" : "return Token.XMLEND;",
      "right" : "return Token.XMLEND;",
      "info" : "ReturnStatement[46527-46547]:ReturnStatement[46803-46823]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.TO_OBJECT:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.TO_OBJECT:",
      "info" : "SwitchCase[46554-46618]:SwitchCase[46830-46894]"
    }, {
      "left" : "return Token.TO_OBJECT;",
      "right" : "return Token.TO_OBJECT;",
      "info" : "ReturnStatement[46627-46650]:ReturnStatement[46903-46926]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.TO_DOUBLE:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.TO_DOUBLE:",
      "info" : "SwitchCase[46657-46721]:SwitchCase[46933-46997]"
    }, {
      "left" : "return Token.TO_DOUBLE;",
      "right" : "return Token.TO_DOUBLE;",
      "info" : "ReturnStatement[46730-46753]:ReturnStatement[47006-47029]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.GET:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.GET:",
      "info" : "SwitchCase[46760-46818]:SwitchCase[47036-47094]"
    }, {
      "left" : "return Token.GET;",
      "right" : "return Token.GET;",
      "info" : "ReturnStatement[46827-46844]:ReturnStatement[47103-47120]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.SET:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.SET:",
      "info" : "SwitchCase[46851-46909]:SwitchCase[47127-47185]"
    }, {
      "left" : "return Token.SET;",
      "right" : "return Token.SET;",
      "info" : "ReturnStatement[46918-46935]:ReturnStatement[47194-47211]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.CONST:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.CONST:",
      "info" : "SwitchCase[46942-47002]:SwitchCase[47218-47278]"
    }, {
      "left" : "return Token.CONST;",
      "right" : "return Token.CONST;",
      "info" : "ReturnStatement[47011-47030]:ReturnStatement[47287-47306]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.SETCONST:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.SETCONST:",
      "info" : "SwitchCase[47037-47100]:SwitchCase[47313-47376]"
    }, {
      "left" : "return Token.SETCONST;",
      "right" : "return Token.SETCONST;",
      "info" : "ReturnStatement[47109-47131]:ReturnStatement[47385-47407]"
    }, {
      "left" : "case com.google.javascript.jscomp.mozilla.rhino.Token.DEBUGGER:",
      "right" : "case com.google.javascript.jscomp.mozilla.rhino.Token.DEBUGGER:",
      "info" : "SwitchCase[47138-47201]:SwitchCase[47414-47477]"
    }, {
      "left" : "return Token.DEBUGGER;",
      "right" : "return Token.DEBUGGER;",
      "info" : "ReturnStatement[47210-47232]:ReturnStatement[47486-47508]"
    }, {
      "left" : "throw new IllegalStateException(String.valueOf(token));",
      "right" : "throw new IllegalStateException(String.valueOf(token));",
      "info" : "ThrowStatement[47270-47325]:ThrowStatement[47546-47601]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[47405-47412]:Modifier[47681-47688]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[47413-47417]:SimpleType[47689-47693]"
    }, {
      "left" : "newNode",
      "right" : "newNode",
      "info" : "SimpleName[47418-47425]:SimpleName[47694-47701]"
    }, {
      "left" : "int type",
      "right" : "int type",
      "info" : "SingleVariableDeclaration[47426-47434]:SingleVariableDeclaration[47702-47710]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47436-47497]:Block[47712-47773]"
    }, {
      "left" : "return new Node(type).clonePropsFrom(templateNode);",
      "right" : "return new Node(type).clonePropsFrom(templateNode);",
      "info" : "ReturnStatement[47442-47493]:ReturnStatement[47718-47769]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[47501-47508]:Modifier[47777-47784]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[47509-47513]:SimpleType[47785-47789]"
    }, {
      "left" : "newNode",
      "right" : "newNode",
      "info" : "SimpleName[47514-47521]:SimpleName[47790-47797]"
    }, {
      "left" : "int type",
      "right" : "int type",
      "info" : "SingleVariableDeclaration[47522-47530]:SingleVariableDeclaration[47798-47806]"
    }, {
      "left" : "Node child1",
      "right" : "Node child1",
      "info" : "SingleVariableDeclaration[47532-47543]:SingleVariableDeclaration[47808-47819]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47545-47614]:Block[47821-47890]"
    }, {
      "left" : "return new Node(type, child1).clonePropsFrom(templateNode);",
      "right" : "return new Node(type, child1).clonePropsFrom(templateNode);",
      "info" : "ReturnStatement[47551-47610]:ReturnStatement[47827-47886]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[47618-47625]:Modifier[47894-47901]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[47626-47630]:SimpleType[47902-47906]"
    }, {
      "left" : "newNode",
      "right" : "newNode",
      "info" : "SimpleName[47631-47638]:SimpleName[47907-47914]"
    }, {
      "left" : "int type",
      "right" : "int type",
      "info" : "SingleVariableDeclaration[47639-47647]:SingleVariableDeclaration[47915-47923]"
    }, {
      "left" : "Node child1",
      "right" : "Node child1",
      "info" : "SingleVariableDeclaration[47649-47660]:SingleVariableDeclaration[47925-47936]"
    }, {
      "left" : "Node child2",
      "right" : "Node child2",
      "info" : "SingleVariableDeclaration[47662-47673]:SingleVariableDeclaration[47938-47949]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47675-47752]:Block[47951-48028]"
    }, {
      "left" : "return new Node(type, child1, child2).clonePropsFrom(templateNode);",
      "right" : "return new Node(type, child1, child2).clonePropsFrom(templateNode);",
      "info" : "ReturnStatement[47681-47748]:ReturnStatement[47957-48024]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[47756-47763]:Modifier[48032-48039]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[47764-47768]:SimpleType[48040-48044]"
    }, {
      "left" : "newNode",
      "right" : "newNode",
      "info" : "SimpleName[47769-47776]:SimpleName[48045-48052]"
    }, {
      "left" : "int type",
      "right" : "int type",
      "info" : "SingleVariableDeclaration[47777-47785]:SingleVariableDeclaration[48053-48061]"
    }, {
      "left" : "Node child1",
      "right" : "Node child1",
      "info" : "SingleVariableDeclaration[47787-47798]:SingleVariableDeclaration[48063-48074]"
    }, {
      "left" : "Node child2",
      "right" : "Node child2",
      "info" : "SingleVariableDeclaration[47800-47811]:SingleVariableDeclaration[48076-48087]"
    }, {
      "left" : "Node child3",
      "right" : "Node child3",
      "info" : "SingleVariableDeclaration[47813-47824]:SingleVariableDeclaration[48089-48100]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47826-47911]:Block[48102-48187]"
    }, {
      "left" : "return new Node(type, child1, child2, child3).clonePropsFrom(templateNode);",
      "right" : "return new Node(type, child1, child2, child3).clonePropsFrom(templateNode);",
      "info" : "ReturnStatement[47832-47907]:ReturnStatement[48108-48183]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[47915-47922]:Modifier[48191-48198]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[47923-47927]:SimpleType[48199-48203]"
    }, {
      "left" : "newStringNode",
      "right" : "newStringNode",
      "info" : "SimpleName[47928-47941]:SimpleName[48204-48217]"
    }, {
      "left" : "String value",
      "right" : "String value",
      "info" : "SingleVariableDeclaration[47942-47954]:SingleVariableDeclaration[48218-48230]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47956-48024]:Block[48232-48300]"
    }, {
      "left" : "return Node.newString(value).clonePropsFrom(templateNode);",
      "right" : "return Node.newString(value).clonePropsFrom(templateNode);",
      "info" : "ReturnStatement[47962-48020]:ReturnStatement[48238-48296]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[48028-48035]:Modifier[48304-48311]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[48036-48040]:SimpleType[48312-48316]"
    }, {
      "left" : "newStringNode",
      "right" : "newStringNode",
      "info" : "SimpleName[48041-48054]:SimpleName[48317-48330]"
    }, {
      "left" : "int type",
      "right" : "int type",
      "info" : "SingleVariableDeclaration[48055-48063]:SingleVariableDeclaration[48331-48339]"
    }, {
      "left" : "String value",
      "right" : "String value",
      "info" : "SingleVariableDeclaration[48065-48077]:SingleVariableDeclaration[48341-48353]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48079-48153]:Block[48355-48429]"
    }, {
      "left" : "return Node.newString(type, value).clonePropsFrom(templateNode);",
      "right" : "return Node.newString(type, value).clonePropsFrom(templateNode);",
      "info" : "ReturnStatement[48085-48149]:ReturnStatement[48361-48425]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[48157-48164]:Modifier[48433-48440]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[48165-48169]:SimpleType[48441-48445]"
    }, {
      "left" : "newNumberNode",
      "right" : "newNumberNode",
      "info" : "SimpleName[48170-48183]:SimpleName[48446-48459]"
    }, {
      "left" : "Double value",
      "right" : "Double value",
      "info" : "SingleVariableDeclaration[48184-48196]:SingleVariableDeclaration[48460-48472]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48198-48266]:Block[48474-48542]"
    }, {
      "left" : "return Node.newNumber(value).clonePropsFrom(templateNode);",
      "right" : "return Node.newNumber(value).clonePropsFrom(templateNode);",
      "info" : "ReturnStatement[48204-48262]:ReturnStatement[48480-48538]"
    } ]
  },
  "interFileMappings" : { }
}