{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "AnnotationMetadataSourceProcessorImpl",
      "right" : "AnnotationMetadataSourceProcessorImpl",
      "info" : "TypeDeclaration[1867-11426]:TypeDeclaration[1910-11616]"
    }, {
      "left" : "private static final Logger log = Logger.getLogger( AnnotationMetadataSourceProcessorImpl.class );",
      "right" : "private static final Logger log = Logger.getLogger( AnnotationMetadataSourceProcessorImpl.class );",
      "info" : "FieldDeclaration[1990-2088]:FieldDeclaration[2033-2131]"
    }, {
      "left" : "private final MetadataBuildingContextRootImpl rootMetadataBuildingContext;",
      "right" : "private final MetadataBuildingContextRootImpl rootMetadataBuildingContext;",
      "info" : "FieldDeclaration[2091-2165]:FieldDeclaration[2134-2208]"
    }, {
      "left" : "@SuppressWarnings(\"FieldCanBeLocal\")\n\tprivate final IndexView jandexView;",
      "right" : "@SuppressWarnings(\"FieldCanBeLocal\")\n\tprivate final IndexView jandexView;",
      "info" : "FieldDeclaration[2168-2241]:FieldDeclaration[2211-2284]"
    }, {
      "left" : "private final ReflectionManager reflectionManager;",
      "right" : "private final ReflectionManager reflectionManager;",
      "info" : "FieldDeclaration[2244-2294]:FieldDeclaration[2287-2337]"
    }, {
      "left" : "private final LinkedHashSet<String> annotatedPackages = new LinkedHashSet<String>();",
      "right" : "private final LinkedHashSet<String> annotatedPackages = new LinkedHashSet<String>();",
      "info" : "FieldDeclaration[2297-2381]:FieldDeclaration[2340-2424]"
    }, {
      "left" : "private final List<XClass> xClasses = new ArrayList<XClass>();",
      "right" : "private final List<XClass> xClasses = new ArrayList<XClass>();",
      "info" : "FieldDeclaration[2384-2446]:FieldDeclaration[2427-2489]"
    }, {
      "left" : "public AnnotationMetadataSourceProcessorImpl(\n\t\t\tMetadataSources sources,\n\t\t\tfinal MetadataBuildingContextRootImpl rootMetadataBuildingContext,\n\t\t\tIndexView jandexView)",
      "right" : "private void categorizeAnnotatedClass(Class annotatedClass, AttributeConverterManager attributeConverterManager)",
      "info" : "MethodDeclaration[2449-5562]:MethodDeclaration[5054-5752]"
    }, {
      "left" : "private XClass toXClass(String className, ReflectionManager reflectionManager)",
      "right" : "private XClass toXClass(String className, ReflectionManager reflectionManager)",
      "info" : "MethodDeclaration[5565-5883]:MethodDeclaration[5755-6073]"
    }, {
      "left" : "public void prepare()",
      "right" : "public void prepare()",
      "info" : "MethodDeclaration[6530-7899]:MethodDeclaration[6720-8089]"
    }, {
      "left" : "final Map persistenceUnitDefaults = reflectionManager.getDefaults();",
      "right" : "final Map persistenceUnitDefaults = reflectionManager.getDefaults();",
      "info" : "FieldDeclaration[6767-6835]:FieldDeclaration[6957-7025]"
    }, {
      "left" : "public String getDefaultSchemaName()",
      "right" : "public String getDefaultSchemaName()",
      "info" : "MethodDeclaration[6842-6993]:MethodDeclaration[7032-7183]"
    }, {
      "left" : "public String getDefaultCatalogName()",
      "right" : "public String getDefaultCatalogName()",
      "info" : "MethodDeclaration[7000-7153]:MethodDeclaration[7190-7343]"
    }, {
      "left" : "public boolean shouldImplicitlyQuoteIdentifiers()",
      "right" : "public boolean shouldImplicitlyQuoteIdentifiers()",
      "info" : "MethodDeclaration[7160-7386]:MethodDeclaration[7350-7576]"
    }, {
      "left" : "public void processTypeDefinitions()",
      "right" : "public void processTypeDefinitions()",
      "info" : "MethodDeclaration[7902-7955]:MethodDeclaration[8092-8145]"
    }, {
      "left" : "public void processQueryRenames()",
      "right" : "public void processQueryRenames()",
      "info" : "MethodDeclaration[7958-8008]:MethodDeclaration[8148-8198]"
    }, {
      "left" : "public void processNamedQueries()",
      "right" : "public void processNamedQueries()",
      "info" : "MethodDeclaration[8011-8061]:MethodDeclaration[8201-8251]"
    }, {
      "left" : "public void processAuxiliaryDatabaseObjectDefinitions()",
      "right" : "public void processAuxiliaryDatabaseObjectDefinitions()",
      "info" : "MethodDeclaration[8064-8136]:MethodDeclaration[8254-8326]"
    }, {
      "left" : "public void processIdentifierGenerators()",
      "right" : "public void processIdentifierGenerators()",
      "info" : "MethodDeclaration[8139-8197]:MethodDeclaration[8329-8387]"
    }, {
      "left" : "public void processFilterDefinitions()",
      "right" : "public void processFilterDefinitions()",
      "info" : "MethodDeclaration[8200-8255]:MethodDeclaration[8390-8445]"
    }, {
      "left" : "public void processFetchProfiles()",
      "right" : "public void processFetchProfiles()",
      "info" : "MethodDeclaration[8258-8309]:MethodDeclaration[8448-8499]"
    }, {
      "left" : "public void prepareForEntityHierarchyProcessing()",
      "right" : "public void prepareForEntityHierarchyProcessing()",
      "info" : "MethodDeclaration[8312-8378]:MethodDeclaration[8502-8568]"
    }, {
      "left" : "public void processEntityHierarchies(Set<String> processedEntityNames)",
      "right" : "public void processEntityHierarchies(Set<String> processedEntityNames)",
      "info" : "MethodDeclaration[8381-9082]:MethodDeclaration[8571-9272]"
    }, {
      "left" : "private List<XClass> orderAndFillHierarchy(List<XClass> original)",
      "right" : "private List<XClass> orderAndFillHierarchy(List<XClass> original)",
      "info" : "MethodDeclaration[9085-9562]:MethodDeclaration[9275-9752]"
    }, {
      "left" : "private void insertMappedSuperclasses(List<XClass> original, List<XClass> copy)",
      "right" : "private void insertMappedSuperclasses(List<XClass> original, List<XClass> copy)",
      "info" : "MethodDeclaration[9565-10097]:MethodDeclaration[9755-10287]"
    }, {
      "left" : "private void orderHierarchy(List<XClass> copy, List<XClass> newList, List<XClass> original, XClass clazz)",
      "right" : "private void orderHierarchy(List<XClass> copy, List<XClass> newList, List<XClass> original, XClass clazz)",
      "info" : "MethodDeclaration[10100-10535]:MethodDeclaration[10290-10725]"
    }, {
      "left" : "public void postProcessEntityHierarchies()",
      "right" : "public void postProcessEntityHierarchies()",
      "info" : "MethodDeclaration[10538-10597]:MethodDeclaration[10728-10787]"
    }, {
      "left" : "public void processResultSetMappings()",
      "right" : "public void processResultSetMappings()",
      "info" : "MethodDeclaration[10600-10655]:MethodDeclaration[10790-10845]"
    }, {
      "left" : "public void finishUp()",
      "right" : "public void finishUp()",
      "info" : "MethodDeclaration[10658-10697]:MethodDeclaration[10848-10887]"
    }, {
      "left" : "AttributeConverterManager",
      "right" : "AttributeConverterManager",
      "info" : "TypeDeclaration[10700-11424]:TypeDeclaration[10890-11614]"
    }, {
      "left" : "private final MetadataBuildingContextRootImpl rootMetadataBuildingContext;",
      "right" : "private final MetadataBuildingContextRootImpl rootMetadataBuildingContext;",
      "info" : "FieldDeclaration[10800-10874]:FieldDeclaration[10990-11064]"
    }, {
      "left" : "public AttributeConverterManager(MetadataBuildingContextRootImpl rootMetadataBuildingContext)",
      "right" : "public AttributeConverterManager(MetadataBuildingContextRootImpl rootMetadataBuildingContext)",
      "info" : "MethodDeclaration[10878-11044]:MethodDeclaration[11068-11234]"
    }, {
      "left" : "public void addAttributeConverter(AttributeConverterDefinition definition)",
      "right" : "public void addAttributeConverter(AttributeConverterDefinition definition)",
      "info" : "MethodDeclaration[11048-11231]:MethodDeclaration[11238-11421]"
    }, {
      "left" : "public void addAttributeConverter(Class<? extends AttributeConverter> converterClass)",
      "right" : "public void addAttributeConverter(Class<? extends AttributeConverter> converterClass)",
      "info" : "MethodDeclaration[11235-11421]:MethodDeclaration[11425-11611]"
    } ],
    "mappings" : [
 {
      "left" : "this.rootMetadataBuildingContext = rootMetadataBuildingContext;",
      "right" : "this.rootMetadataBuildingContext = rootMetadataBuildingContext;",
      "info" : "ExpressionStatement[2622-2685]:ExpressionStatement[2665-2728]"
    }, {
      "left" : "this.jandexView = jandexView;",
      "right" : "this.jandexView = jandexView;",
      "info" : "ExpressionStatement[2688-2717]:ExpressionStatement[2731-2760]"
    }, {
      "left" : "this.reflectionManager = rootMetadataBuildingContext.getBuildingOptions().getReflectionManager();",
      "right" : "this.reflectionManager = rootMetadataBuildingContext.getBuildingOptions().getReflectionManager();",
      "info" : "ExpressionStatement[2721-2818]:ExpressionStatement[2764-2861]"
    }, {
      "left" : "if ( CollectionHelper.isNotEmpty( sources.getAnnotatedPackages() ))",
      "right" : "if ( CollectionHelper.isNotEmpty( sources.getAnnotatedPackages() ))",
      "info" : "IfStatement[2822-2959]:IfStatement[2865-3002]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2891-2959]:Block[2934-3002]"
    }, {
      "left" : "annotatedPackages.addAll( sources.getAnnotatedPackages() );",
      "right" : "annotatedPackages.addAll( sources.getAnnotatedPackages() );",
      "info" : "ExpressionStatement[2896-2955]:ExpressionStatement[2939-2998]"
    }, {
      "left" : "final AttributeConverterManager attributeConverterManager = new AttributeConverterManager( rootMetadataBuildingContext );",
      "right" : "final AttributeConverterManager attributeConverterManager = new AttributeConverterManager( rootMetadataBuildingContext );",
      "info" : "VariableDeclarationStatement[2963-3084]:VariableDeclarationStatement[3006-3127]"
    }, {
      "left" : "final JPAMetadataProvider jpaMetadataProvider = (JPAMetadataProvider) ( (MetadataProviderInjector) reflectionManager ).getMetadataProvider();",
      "right" : "final JPAMetadataProvider jpaMetadataProvider = (JPAMetadataProvider) ( (MetadataProviderInjector) reflectionManager ).getMetadataProvider();",
      "info" : "VariableDeclarationStatement[3291-3432]:VariableDeclarationStatement[3334-3475]"
    }, {
      "left" : "for ( Binding xmlBinding : sources.getXmlBindings())",
      "right" : "for ( Binding xmlBinding : sources.getXmlBindings())",
      "info" : "EnhancedForStatement[3435-4294]:EnhancedForStatement[3478-4337]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3489-4294]:Block[3532-4337]"
    }, {
      "left" : "if ( !org.dom4j.Document.class.isInstance( xmlBinding.getRoot() ))",
      "right" : "if ( !org.dom4j.Document.class.isInstance( xmlBinding.getRoot() ))",
      "info" : "IfStatement[3919-4007]:IfStatement[3962-4050]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3987-4007]:Block[4030-4050]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[3993-4002]:ContinueStatement[4036-4045]"
    }, {
      "left" : "org.dom4j.Document dom4jDocument = (Document) xmlBinding.getRoot();",
      "right" : "org.dom4j.Document dom4jDocument = (Document) xmlBinding.getRoot();",
      "info" : "VariableDeclarationStatement[4011-4078]:VariableDeclarationStatement[4054-4121]"
    }, {
      "left" : "final List<String> classNames = jpaMetadataProvider.getXMLContext().addDocument( dom4jDocument );",
      "right" : "final List<String> classNames = jpaMetadataProvider.getXMLContext().addDocument( dom4jDocument );",
      "info" : "VariableDeclarationStatement[4083-4180]:VariableDeclarationStatement[4126-4223]"
    }, {
      "left" : "for ( String className : classNames)",
      "right" : "for ( String className : classNames)",
      "info" : "EnhancedForStatement[4184-4290]:EnhancedForStatement[4227-4333]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4222-4290]:Block[4265-4333]"
    }, {
      "left" : "xClasses.add( toXClass( className, reflectionManager ) );",
      "right" : "xClasses.add( toXClass( className, reflectionManager ) );",
      "info" : "ExpressionStatement[4228-4285]:ExpressionStatement[4271-4328]"
    }, {
      "left" : "jpaMetadataProvider.getXMLContext().applyDiscoveredAttributeConverters( attributeConverterManager );",
      "right" : "jpaMetadataProvider.getXMLContext().applyDiscoveredAttributeConverters( attributeConverterManager );",
      "info" : "ExpressionStatement[4297-4397]:ExpressionStatement[4340-4440]"
    }, {
      "left" : "final ClassLoaderService cls = rootMetadataBuildingContext.getBuildingOptions().getServiceRegistry().getService( ClassLoaderService.class );",
      "right" : "final ClassLoaderService cls = rootMetadataBuildingContext.getBuildingOptions().getServiceRegistry().getService( ClassLoaderService.class );",
      "info" : "VariableDeclarationStatement[4516-4656]:VariableDeclarationStatement[4559-4699]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4719-5126]:Block[2661-5051]"
    }, {
      "left" : "final Class clazz = cls.classForName( className );",
      "right" : "final Class annotatedClass = cls.classForName( className );",
      "info" : "VariableDeclarationStatement[4724-4774]:VariableDeclarationStatement[4767-4826]"
    }, {
      "left" : "attributeConverterManager.addAttributeConverter( clazz );",
      "right" : "categorizeAnnotatedClass( annotatedClass, attributeConverterManager );",
      "info" : "ExpressionStatement[5017-5074]:ExpressionStatement[4974-5044]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5088-5122]:Block[4969-5048]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5190-5559]:Block[5167-5752]"
    }, {
      "left" : "final XClass xClass = reflectionManager.toXClass( annotateClass );",
      "right" : "final XClass xClass = reflectionManager.toXClass( annotatedClass );",
      "info" : "VariableDeclarationStatement[5195-5261]:VariableDeclarationStatement[5171-5238]"
    }, {
      "left" : "if ( xClass.isAnnotationPresent( Converter.class ))",
      "right" : "if ( xClass.isAnnotationPresent( Converter.class ))",
      "info" : "IfStatement[5354-5555]:IfStatement[5323-5749]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5407-5512]:Block[5376-5479]"
    }, {
      "left" : "attributeConverterManager.addAttributeConverter( annotateClass );",
      "right" : "attributeConverterManager.addAttributeConverter( annotatedClass );",
      "info" : "ExpressionStatement[5442-5507]:ExpressionStatement[5409-5475]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5521-5555]:Block[5637-5749]"
    }, {
      "left" : "xClasses.add( xClass );",
      "right" : "xClasses.add( xClass );",
      "info" : "ExpressionStatement[5527-5550]:ExpressionStatement[5602-5625]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5678-5883]:Block[5868-6073]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[5682-5880]:TryStatement[5872-6070]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5686-5746]:Block[5876-5936]"
    }, {
      "left" : "return reflectionManager.classForName( className );",
      "right" : "return reflectionManager.classForName( className );",
      "info" : "ReturnStatement[5691-5742]:ReturnStatement[5881-5932]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5783-5880]:Block[5973-6070]"
    }, {
      "left" : "throw new AnnotationException( \"Unable to load class defined in XML: \" + className, e );",
      "right" : "throw new AnnotationException( \"Unable to load class defined in XML: \" + className, e );",
      "info" : "ThrowStatement[5788-5876]:ThrowStatement[5978-6066]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6563-7899]:Block[6753-8089]"
    }, {
      "left" : "( ( MetadataBuildingOptionsImpl ) rootMetadataBuildingContext.getBuildingOptions() ).apply(\n\t\t\t\tnew JpaOrmXmlPersistenceUnitDefaults() {\n\t\t\t\t\tfinal Map persistenceUnitDefaults = reflectionManager.getDefaults();\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic String getDefaultSchemaName() {\n\t\t\t\t\t\treturn StringHelper.nullIfEmpty( (String) persistenceUnitDefaults.get( \"schema\" ) );\n\t\t\t\t\t}\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic String getDefaultCatalogName() {\n\t\t\t\t\t\treturn StringHelper.nullIfEmpty( (String) persistenceUnitDefaults.get( \"catalog\" ) );\n\t\t\t\t\t}\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic boolean shouldImplicitlyQuoteIdentifiers() {\n\t\t\t\t\t\tfinal Object isDelimited = persistenceUnitDefaults.get( \"delimited-identifier\" );\n\t\t\t\t\t\treturn isDelimited != null && isDelimited == Boolean.TRUE;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t);",
      "right" : "( ( MetadataBuildingOptionsImpl ) rootMetadataBuildingContext.getBuildingOptions() ).apply(\n\t\t\t\tnew JpaOrmXmlPersistenceUnitDefaults() {\n\t\t\t\t\tfinal Map persistenceUnitDefaults = reflectionManager.getDefaults();\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic String getDefaultSchemaName() {\n\t\t\t\t\t\treturn StringHelper.nullIfEmpty( (String) persistenceUnitDefaults.get( \"schema\" ) );\n\t\t\t\t\t}\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic String getDefaultCatalogName() {\n\t\t\t\t\t\treturn StringHelper.nullIfEmpty( (String) persistenceUnitDefaults.get( \"catalog\" ) );\n\t\t\t\t\t}\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic boolean shouldImplicitlyQuoteIdentifiers() {\n\t\t\t\t\t\tfinal Object isDelimited = persistenceUnitDefaults.get( \"delimited-identifier\" );\n\t\t\t\t\t\treturn isDelimited != null && isDelimited == Boolean.TRUE;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t);",
      "info" : "ExpressionStatement[6625-7397]:ExpressionStatement[6815-7587]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6894-6993]:Block[7084-7183]"
    }, {
      "left" : "return StringHelper.nullIfEmpty( (String) persistenceUnitDefaults.get( \"schema\" ) );",
      "right" : "return StringHelper.nullIfEmpty( (String) persistenceUnitDefaults.get( \"schema\" ) );",
      "info" : "ReturnStatement[6902-6986]:ReturnStatement[7092-7176]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7053-7153]:Block[7243-7343]"
    }, {
      "left" : "return StringHelper.nullIfEmpty( (String) persistenceUnitDefaults.get( \"catalog\" ) );",
      "right" : "return StringHelper.nullIfEmpty( (String) persistenceUnitDefaults.get( \"catalog\" ) );",
      "info" : "ReturnStatement[7061-7146]:ReturnStatement[7251-7336]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7225-7386]:Block[7415-7576]"
    }, {
      "left" : "final Object isDelimited = persistenceUnitDefaults.get( \"delimited-identifier\" );",
      "right" : "final Object isDelimited = persistenceUnitDefaults.get( \"delimited-identifier\" );",
      "info" : "VariableDeclarationStatement[7233-7314]:VariableDeclarationStatement[7423-7504]"
    }, {
      "left" : "return isDelimited != null && isDelimited == Boolean.TRUE;",
      "right" : "return isDelimited != null && isDelimited == Boolean.TRUE;",
      "info" : "ReturnStatement[7321-7379]:ReturnStatement[7511-7569]"
    }, {
      "left" : "rootMetadataBuildingContext.getMetadataCollector().getDatabase().adjustDefaultSchema(\n\t\t\t\trootMetadataBuildingContext.getBuildingOptions().getMappingDefaults().getImplicitCatalogName(),\n\t\t\t\trootMetadataBuildingContext.getBuildingOptions().getMappingDefaults().getImplicitSchemaName()\n\t\t);",
      "right" : "rootMetadataBuildingContext.getMetadataCollector().getDatabase().adjustDefaultSchema(\n\t\t\t\trootMetadataBuildingContext.getBuildingOptions().getMappingDefaults().getImplicitCatalogName(),\n\t\t\t\trootMetadataBuildingContext.getBuildingOptions().getMappingDefaults().getImplicitSchemaName()\n\t\t);",
      "info" : "ExpressionStatement[7401-7689]:ExpressionStatement[7591-7879]"
    }, {
      "left" : "AnnotationBinder.bindDefaults( rootMetadataBuildingContext );",
      "right" : "AnnotationBinder.bindDefaults( rootMetadataBuildingContext );",
      "info" : "ExpressionStatement[7693-7754]:ExpressionStatement[7883-7944]"
    }, {
      "left" : "for ( String annotatedPackage : annotatedPackages)",
      "right" : "for ( String annotatedPackage : annotatedPackages)",
      "info" : "EnhancedForStatement[7757-7896]:EnhancedForStatement[7947-8086]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7809-7896]:Block[7999-8086]"
    }, {
      "left" : "AnnotationBinder.bindPackage( annotatedPackage, rootMetadataBuildingContext );",
      "right" : "AnnotationBinder.bindPackage( annotatedPackage, rootMetadataBuildingContext );",
      "info" : "ExpressionStatement[7814-7892]:ExpressionStatement[8004-8082]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7950-7955]:Block[8140-8145]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8003-8008]:Block[8193-8198]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8056-8061]:Block[8246-8251]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8131-8136]:Block[8321-8326]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8192-8197]:Block[8382-8387]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8250-8255]:Block[8440-8445]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8304-8309]:Block[8494-8499]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8373-8378]:Block[8563-8568]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8463-9082]:Block[8653-9272]"
    }, {
      "left" : "final List<XClass> orderedClasses = orderAndFillHierarchy( xClasses );",
      "right" : "final List<XClass> orderedClasses = orderAndFillHierarchy( xClasses );",
      "info" : "VariableDeclarationStatement[8467-8537]:VariableDeclarationStatement[8657-8727]"
    }, {
      "left" : "Map<XClass, InheritanceState> inheritanceStatePerClass = AnnotationBinder.buildInheritanceStates(\n\t\t\t\torderedClasses,\n\t\t\t\trootMetadataBuildingContext\n\t\t);",
      "right" : "Map<XClass, InheritanceState> inheritanceStatePerClass = AnnotationBinder.buildInheritanceStates(\n\t\t\t\torderedClasses,\n\t\t\t\trootMetadataBuildingContext\n\t\t);",
      "info" : "VariableDeclarationStatement[8540-8694]:VariableDeclarationStatement[8730-8884]"
    }, {
      "left" : "for ( XClass clazz : orderedClasses)",
      "right" : "for ( XClass clazz : orderedClasses)",
      "info" : "EnhancedForStatement[8699-9079]:EnhancedForStatement[8889-9269]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8737-9079]:Block[8927-9269]"
    }, {
      "left" : "if ( processedEntityNames.contains( clazz.getName() ))",
      "right" : "if ( processedEntityNames.contains( clazz.getName() ))",
      "info" : "IfStatement[8742-8931]:IfStatement[8932-9121]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8798-8931]:Block[8988-9121]"
    }, {
      "left" : "log.debugf( \"Skipping annotated class processing of entity [%s], as it has already been processed\", clazz );",
      "right" : "log.debugf( \"Skipping annotated class processing of entity [%s], as it has already been processed\", clazz );",
      "info" : "ExpressionStatement[8804-8912]:ExpressionStatement[8994-9102]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[8917-8926]:ContinueStatement[9107-9116]"
    }, {
      "left" : "AnnotationBinder.bindClass( clazz, inheritanceStatePerClass, rootMetadataBuildingContext );",
      "right" : "AnnotationBinder.bindClass( clazz, inheritanceStatePerClass, rootMetadataBuildingContext );",
      "info" : "ExpressionStatement[8936-9027]:ExpressionStatement[9126-9217]"
    }, {
      "left" : "processedEntityNames.add( clazz.getName() );",
      "right" : "processedEntityNames.add( clazz.getName() );",
      "info" : "ExpressionStatement[9031-9075]:ExpressionStatement[9221-9265]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9151-9562]:Block[9341-9752]"
    }, {
      "left" : "List<XClass> copy = new ArrayList<XClass>( original );",
      "right" : "List<XClass> copy = new ArrayList<XClass>( original );",
      "info" : "VariableDeclarationStatement[9155-9209]:VariableDeclarationStatement[9345-9399]"
    }, {
      "left" : "insertMappedSuperclasses( original, copy );",
      "right" : "insertMappedSuperclasses( original, copy );",
      "info" : "ExpressionStatement[9212-9255]:ExpressionStatement[9402-9445]"
    }, {
      "left" : "List<XClass> workingCopy = new ArrayList<XClass>( copy );",
      "right" : "List<XClass> workingCopy = new ArrayList<XClass>( copy );",
      "info" : "VariableDeclarationStatement[9284-9341]:VariableDeclarationStatement[9474-9531]"
    }, {
      "left" : "List<XClass> newList = new ArrayList<XClass>( copy.size() );",
      "right" : "List<XClass> newList = new ArrayList<XClass>( copy.size() );",
      "info" : "VariableDeclarationStatement[9344-9404]:VariableDeclarationStatement[9534-9594]"
    }, {
      "left" : "while ( workingCopy.size() > 0)",
      "right" : "while ( workingCopy.size() > 0)",
      "info" : "WhileStatement[9407-9541]:WhileStatement[9597-9731]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9440-9541]:Block[9630-9731]"
    }, {
      "left" : "XClass clazz = workingCopy.get( 0 );",
      "right" : "XClass clazz = workingCopy.get( 0 );",
      "info" : "VariableDeclarationStatement[9445-9481]:VariableDeclarationStatement[9635-9671]"
    }, {
      "left" : "orderHierarchy( workingCopy, newList, copy, clazz );",
      "right" : "orderHierarchy( workingCopy, newList, copy, clazz );",
      "info" : "ExpressionStatement[9485-9537]:ExpressionStatement[9675-9727]"
    }, {
      "left" : "return newList;",
      "right" : "return newList;",
      "info" : "ReturnStatement[9544-9559]:ReturnStatement[9734-9749]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9645-10097]:Block[9835-10287]"
    }, {
      "left" : "for ( XClass clazz : original)",
      "right" : "for ( XClass clazz : original)",
      "info" : "EnhancedForStatement[9649-10094]:EnhancedForStatement[9839-10284]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9681-10094]:Block[9871-10284]"
    }, {
      "left" : "XClass superClass = clazz.getSuperclass();",
      "right" : "XClass superClass = clazz.getSuperclass();",
      "info" : "VariableDeclarationStatement[9686-9728]:VariableDeclarationStatement[9876-9918]"
    }, {
      "left" : "while ( superClass != null\n\t\t\t\t\t&& !reflectionManager.equals( superClass, Object.class )\n\t\t\t\t\t&& !copy.contains( superClass ))",
      "right" : "while ( superClass != null\n\t\t\t\t\t&& !reflectionManager.equals( superClass, Object.class )\n\t\t\t\t\t&& !copy.contains( superClass ))",
      "info" : "WhileStatement[9732-10090]:WhileStatement[9922-10280]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9860-10090]:Block[10050-10280]"
    }, {
      "left" : "if ( superClass.isAnnotationPresent( Entity.class )\n\t\t\t\t\t\t|| superClass.isAnnotationPresent( javax.persistence.MappedSuperclass.class ))",
      "right" : "if ( superClass.isAnnotationPresent( Entity.class )\n\t\t\t\t\t\t|| superClass.isAnnotationPresent( javax.persistence.MappedSuperclass.class ))",
      "info" : "IfStatement[9866-10040]:IfStatement[10056-10230]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10004-10040]:Block[10194-10230]"
    }, {
      "left" : "copy.add( superClass );",
      "right" : "copy.add( superClass );",
      "info" : "ExpressionStatement[10011-10034]:ExpressionStatement[10201-10224]"
    }, {
      "left" : "superClass = superClass.getSuperclass();",
      "right" : "superClass = superClass.getSuperclass();",
      "info" : "ExpressionStatement[10045-10085]:ExpressionStatement[10235-10275]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10206-10535]:Block[10396-10725]"
    }, {
      "left" : "if ( clazz == null || reflectionManager.equals( clazz, Object.class ))",
      "right" : "if ( clazz == null || reflectionManager.equals( clazz, Object.class ))",
      "info" : "IfStatement[10210-10298]:IfStatement[10400-10488]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10282-10298]:Block[10472-10488]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[10287-10294]:ReturnStatement[10477-10484]"
    }, {
      "left" : "orderHierarchy( copy, newList, original, clazz.getSuperclass() );",
      "right" : "orderHierarchy( copy, newList, original, clazz.getSuperclass() );",
      "info" : "ExpressionStatement[10330-10395]:ExpressionStatement[10520-10585]"
    }, {
      "left" : "if ( original.contains( clazz ))",
      "right" : "if ( original.contains( clazz ))",
      "info" : "IfStatement[10398-10532]:IfStatement[10588-10722]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10432-10532]:Block[10622-10722]"
    }, {
      "left" : "if ( !newList.contains( clazz ))",
      "right" : "if ( !newList.contains( clazz ))",
      "info" : "IfStatement[10437-10503]:IfStatement[10627-10693]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10471-10503]:Block[10661-10693]"
    }, {
      "left" : "newList.add( clazz );",
      "right" : "newList.add( clazz );",
      "info" : "ExpressionStatement[10477-10498]:ExpressionStatement[10667-10688]"
    }, {
      "left" : "copy.remove( clazz );",
      "right" : "copy.remove( clazz );",
      "info" : "ExpressionStatement[10507-10528]:ExpressionStatement[10697-10718]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10592-10597]:Block[10782-10787]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10650-10655]:Block[10840-10845]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10692-10697]:Block[10882-10887]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10972-11044]:Block[11162-11234]"
    }, {
      "left" : "this.rootMetadataBuildingContext = rootMetadataBuildingContext;",
      "right" : "this.rootMetadataBuildingContext = rootMetadataBuildingContext;",
      "info" : "ExpressionStatement[10977-11040]:ExpressionStatement[11167-11230]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11135-11231]:Block[11325-11421]"
    }, {
      "left" : "rootMetadataBuildingContext.getMetadataCollector().addAttributeConverter( definition );",
      "right" : "rootMetadataBuildingContext.getMetadataCollector().addAttributeConverter( definition );",
      "info" : "ExpressionStatement[11140-11227]:ExpressionStatement[11330-11417]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11321-11421]:Block[11511-11611]"
    }, {
      "left" : "rootMetadataBuildingContext.getMetadataCollector().addAttributeConverter( converterClass );",
      "right" : "rootMetadataBuildingContext.getMetadataCollector().addAttributeConverter( converterClass );",
      "info" : "ExpressionStatement[11326-11417]:ExpressionStatement[11516-11607]"
    } ]
  },
  "interFileMappings" : { }
}