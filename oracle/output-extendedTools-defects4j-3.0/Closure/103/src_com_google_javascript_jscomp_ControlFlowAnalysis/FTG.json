{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "ControlFlowAnalysis",
      "right" : "ControlFlowAnalysis",
      "info" : "TypeDeclaration[1264-33055]:TypeDeclaration[1264-33084]"
    }, {
      "left" : "private final AbstractCompiler compiler;",
      "right" : "private final AbstractCompiler compiler;",
      "info" : "FieldDeclaration[1411-2028]:FieldDeclaration[1411-2028]"
    }, {
      "left" : "private ControlFlowGraph<Node> cfg;",
      "right" : "private ControlFlowGraph<Node> cfg;",
      "info" : "FieldDeclaration[2032-2067]:FieldDeclaration[2032-2067]"
    }, {
      "left" : "private Map<Node, Integer> astPosition;",
      "right" : "private Map<Node, Integer> astPosition;",
      "info" : "FieldDeclaration[2071-2110]:FieldDeclaration[2071-2110]"
    }, {
      "left" : "private Map<DiGraphNode<Node, Branch>, Integer> nodePriorities;",
      "right" : "private Map<DiGraphNode<Node, Branch>, Integer> nodePriorities;",
      "info" : "FieldDeclaration[2171-2234]:FieldDeclaration[2171-2234]"
    }, {
      "left" : "private final Comparator<DiGraphNode<Node, Branch>> priorityComparator =\n      new Comparator<DiGraphNode<Node, Branch>>() {\n    @Override\n    public int compare(\n        DiGraphNode<Node, Branch> a, DiGraphNode<Node, Branch> b) {\n      return astPosition.get(a.getValue()) - astPosition.get(b.getValue());\n    }\n  };",
      "right" : "private final Comparator<DiGraphNode<Node, Branch>> priorityComparator =\n      new Comparator<DiGraphNode<Node, Branch>>() {\n    @Override\n    public int compare(\n        DiGraphNode<Node, Branch> a, DiGraphNode<Node, Branch> b) {\n      return astPosition.get(a.getValue()) - astPosition.get(b.getValue());\n    }\n  };",
      "info" : "FieldDeclaration[2434-2751]:FieldDeclaration[2434-2751]"
    }, {
      "left" : "public int compare(\n        DiGraphNode<Node, Branch> a, DiGraphNode<Node, Branch> b)",
      "right" : "public int compare(\n        DiGraphNode<Node, Branch> a, DiGraphNode<Node, Branch> b)",
      "info" : "MethodDeclaration[2563-2746]:MethodDeclaration[2563-2746]"
    }, {
      "left" : "private int astPositionCounter;",
      "right" : "private int astPositionCounter;",
      "info" : "FieldDeclaration[2755-2786]:FieldDeclaration[2755-2786]"
    }, {
      "left" : "private int priorityCounter;",
      "right" : "private int priorityCounter;",
      "info" : "FieldDeclaration[2789-2817]:FieldDeclaration[2789-2817]"
    }, {
      "left" : "private final boolean shouldTraverseFunctions;",
      "right" : "private final boolean shouldTraverseFunctions;",
      "info" : "FieldDeclaration[2821-2867]:FieldDeclaration[2821-2867]"
    }, {
      "left" : "private Node root;",
      "right" : "private Node root;",
      "info" : "FieldDeclaration[3058-3076]:FieldDeclaration[3058-3076]"
    }, {
      "left" : "private final Deque<Node> exceptionHandler = new ArrayDeque<Node>();",
      "right" : "private final Deque<Node> exceptionHandler = new ArrayDeque<Node>();",
      "info" : "FieldDeclaration[3323-3391]:FieldDeclaration[3323-3391]"
    }, {
      "left" : "private final Multimap<Node, Node> finallyMap = HashMultimap.create();",
      "right" : "private final Multimap<Node, Node> finallyMap = HashMultimap.create();",
      "info" : "FieldDeclaration[4019-4089]:FieldDeclaration[4019-4089]"
    }, {
      "left" : "ControlFlowAnalysis(AbstractCompiler compiler,\n      boolean shouldTraverseFunctions)",
      "right" : "ControlFlowAnalysis(AbstractCompiler compiler,\n      boolean shouldTraverseFunctions)",
      "info" : "MethodDeclaration[4093-4450]:MethodDeclaration[4093-4450]"
    }, {
      "left" : "ControlFlowGraph<Node> getCfg()",
      "right" : "ControlFlowGraph<Node> getCfg()",
      "info" : "MethodDeclaration[4454-4507]:MethodDeclaration[4454-4507]"
    }, {
      "left" : "public void process(Node externs, Node root)",
      "right" : "public void process(Node externs, Node root)",
      "info" : "MethodDeclaration[4511-6211]:MethodDeclaration[4511-6211]"
    }, {
      "left" : "private void prioritizeFromEntryNode(DiGraphNode<Node, Branch> entry)",
      "right" : "private void prioritizeFromEntryNode(DiGraphNode<Node, Branch> entry)",
      "info" : "MethodDeclaration[6215-6990]:MethodDeclaration[6215-6990]"
    }, {
      "left" : "public boolean shouldTraverse(\n      NodeTraversal nodeTraversal, Node n, Node parent)",
      "right" : "public boolean shouldTraverse(\n      NodeTraversal nodeTraversal, Node n, Node parent)",
      "info" : "MethodDeclaration[6994-9748]:MethodDeclaration[6994-9748]"
    }, {
      "left" : "public void visit(NodeTraversal t, Node n, Node parent)",
      "right" : "public void visit(NodeTraversal t, Node n, Node parent)",
      "info" : "MethodDeclaration[9752-11069]:MethodDeclaration[9752-11069]"
    }, {
      "left" : "private void handleIf(Node node)",
      "right" : "private void handleIf(Node node)",
      "info" : "MethodDeclaration[11073-11585]:MethodDeclaration[11073-11585]"
    }, {
      "left" : "private void handleWhile(Node node)",
      "right" : "private void handleWhile(Node node)",
      "info" : "MethodDeclaration[11589-12046]:MethodDeclaration[11589-12046]"
    }, {
      "left" : "private void handleDo(Node node)",
      "right" : "private void handleDo(Node node)",
      "info" : "MethodDeclaration[12050-12488]:MethodDeclaration[12050-12488]"
    }, {
      "left" : "private void handleFor(Node forNode)",
      "right" : "private void handleFor(Node forNode)",
      "info" : "MethodDeclaration[12492-14183]:MethodDeclaration[12492-14183]"
    }, {
      "left" : "private void handleSwitch(Node node)",
      "right" : "private void handleSwitch(Node node)",
      "info" : "MethodDeclaration[14187-14913]:MethodDeclaration[14187-14913]"
    }, {
      "left" : "private void handleCase(Node node)",
      "right" : "private void handleCase(Node node)",
      "info" : "MethodDeclaration[14917-15903]:MethodDeclaration[14917-15903]"
    }, {
      "left" : "private void handleDefault(Node node)",
      "right" : "private void handleDefault(Node node)",
      "info" : "MethodDeclaration[15907-16084]:MethodDeclaration[15907-16084]"
    }, {
      "left" : "private void handleWith(Node node)",
      "right" : "private void handleWith(Node node)",
      "info" : "MethodDeclaration[16088-16328]:MethodDeclaration[16088-16328]"
    }, {
      "left" : "private void handleStmtList(Node node)",
      "right" : "private void handleStmtList(Node node)",
      "info" : "MethodDeclaration[16332-17682]:MethodDeclaration[16332-17682]"
    }, {
      "left" : "private void handleFunction(Node node)",
      "right" : "private void handleFunction(Node node)",
      "info" : "MethodDeclaration[17686-18056]:MethodDeclaration[17686-18056]"
    }, {
      "left" : "private void handleExpr(Node node)",
      "right" : "private void handleExpr(Node node)",
      "info" : "MethodDeclaration[18060-18213]:MethodDeclaration[18060-18213]"
    }, {
      "left" : "private void handleThrow(Node node)",
      "right" : "private void handleThrow(Node node)",
      "info" : "MethodDeclaration[18217-18309]:MethodDeclaration[18217-18309]"
    }, {
      "left" : "private void handleTry(Node node)",
      "right" : "private void handleTry(Node node)",
      "info" : "MethodDeclaration[18313-18411]:MethodDeclaration[18313-18411]"
    }, {
      "left" : "private void handleCatch(Node node)",
      "right" : "private void handleCatch(Node node)",
      "info" : "MethodDeclaration[18415-18514]:MethodDeclaration[18415-18514]"
    }, {
      "left" : "private void handleBreak(Node node)",
      "right" : "private void handleBreak(Node node)",
      "info" : "MethodDeclaration[18518-20056]:MethodDeclaration[18518-20056]"
    }, {
      "left" : "private void handleContinue(Node node)",
      "right" : "private void handleContinue(Node node)",
      "info" : "MethodDeclaration[20060-21120]:MethodDeclaration[20060-21120]"
    }, {
      "left" : "private void handleReturn(Node node)",
      "right" : "private void handleReturn(Node node)",
      "info" : "MethodDeclaration[21124-21929]:MethodDeclaration[21124-21929]"
    }, {
      "left" : "private void handleStmt(Node node)",
      "right" : "private void handleStmt(Node node)",
      "info" : "MethodDeclaration[21933-22127]:MethodDeclaration[21933-22127]"
    }, {
      "left" : "private Node computeFollowNode(Node node)",
      "right" : "private Node computeFollowNode(Node node)",
      "info" : "MethodDeclaration[22131-22220]:MethodDeclaration[22131-22220]"
    }, {
      "left" : "private Node computeFollowNode(Node fromNode, Node node)",
      "right" : "private Node computeFollowNode(Node fromNode, Node node)",
      "info" : "MethodDeclaration[22224-26222]:MethodDeclaration[22224-26222]"
    }, {
      "left" : "private static Node computeFallThrough(Node n)",
      "right" : "private static Node computeFallThrough(Node n)",
      "info" : "MethodDeclaration[26226-26822]:MethodDeclaration[26226-26822]"
    }, {
      "left" : "private void createEdge(Node fromNode, ControlFlowGraph.Branch branch,\n      Node toNode)",
      "right" : "private void createEdge(Node fromNode, ControlFlowGraph.Branch branch,\n      Node toNode)",
      "info" : "MethodDeclaration[26826-27165]:MethodDeclaration[26826-27165]"
    }, {
      "left" : "private void connectToPossibleExceptionHandler(Node cfgNode, Node target)",
      "right" : "private void connectToPossibleExceptionHandler(Node cfgNode, Node target)",
      "info" : "MethodDeclaration[27169-28372]:MethodDeclaration[27169-28372]"
    }, {
      "left" : "private static Node getNextSiblingOfType(Node first, int ... types)",
      "right" : "private static Node getNextSiblingOfType(Node first, int ... types)",
      "info" : "MethodDeclaration[28376-28715]:MethodDeclaration[28376-28715]"
    }, {
      "left" : "private static boolean isBreakTarget(\n      Node target, Node parent, String label)",
      "right" : "private static boolean isBreakTarget(\n      Node target, Node parent, String label)",
      "info" : "MethodDeclaration[28719-29029]:MethodDeclaration[28719-29029]"
    }, {
      "left" : "private static boolean isContinueTarget(\n      Node target, Node parent, String label)",
      "right" : "private static boolean isContinueTarget(\n      Node target, Node parent, String label)",
      "info" : "MethodDeclaration[29033-29340]:MethodDeclaration[29033-29340]"
    }, {
      "left" : "private static boolean matchLabel(Node target, String label)",
      "right" : "private static boolean matchLabel(Node target, String label)",
      "info" : "MethodDeclaration[29343-29788]:MethodDeclaration[29343-29788]"
    }, {
      "left" : "private static boolean mayThrowException(Node n)",
      "right" : "private static boolean mayThrowException(Node n)",
      "info" : "MethodDeclaration[29792-30407]:MethodDeclaration[29792-30436]"
    }, {
      "left" : "static boolean isBreakStructure(Node n, boolean labeled)",
      "right" : "static boolean isBreakStructure(Node n, boolean labeled)",
      "info" : "MethodDeclaration[30411-30835]:MethodDeclaration[30440-30864]"
    }, {
      "left" : "static boolean isContinueStructure(Node n)",
      "right" : "static boolean isContinueStructure(Node n)",
      "info" : "MethodDeclaration[30839-31134]:MethodDeclaration[30868-31163]"
    }, {
      "left" : "AstControlFlowGraph",
      "right" : "AstControlFlowGraph",
      "info" : "TypeDeclaration[31138-33053]:TypeDeclaration[31167-33082]"
    }, {
      "left" : "private final Map<DiGraphNode<Node, Branch>, Integer> priorities;",
      "right" : "private final Map<DiGraphNode<Node, Branch>, Integer> priorities;",
      "info" : "FieldDeclaration[31343-31408]:FieldDeclaration[31372-31437]"
    }, {
      "left" : "private AstControlFlowGraph(Node entry,\n        Map<DiGraphNode<Node, Branch>, Integer> priorities)",
      "right" : "private AstControlFlowGraph(Node entry,\n        Map<DiGraphNode<Node, Branch>, Integer> priorities)",
      "info" : "MethodDeclaration[31414-31792]:MethodDeclaration[31443-31821]"
    }, {
      "left" : "public Comparator<DiGraphNode<Node, Branch>> getOptionalNodeComparator(\n        boolean isForward)",
      "right" : "public Comparator<DiGraphNode<Node, Branch>> getOptionalNodeComparator(\n        boolean isForward)",
      "info" : "MethodDeclaration[31798-32726]:MethodDeclaration[31827-32755]"
    }, {
      "left" : "public int compare(\n              DiGraphNode<Node, Branch> n1, DiGraphNode<Node, Branch> n2)",
      "right" : "public int compare(\n              DiGraphNode<Node, Branch> n1, DiGraphNode<Node, Branch> n2)",
      "info" : "MethodDeclaration[32241-32422]:MethodDeclaration[32270-32451]"
    }, {
      "left" : "public int compare(\n              DiGraphNode<Node, Branch> n1, DiGraphNode<Node, Branch> n2)",
      "right" : "public int compare(\n              DiGraphNode<Node, Branch> n1, DiGraphNode<Node, Branch> n2)",
      "info" : "MethodDeclaration[32520-32701]:MethodDeclaration[32549-32730]"
    }, {
      "left" : "private int getPosition(DiGraphNode<Node, Branch> n)",
      "right" : "private int getPosition(DiGraphNode<Node, Branch> n)",
      "info" : "MethodDeclaration[32732-33049]:MethodDeclaration[32761-33078]"
    } ],
    "mappings" : [
 {
      "left" : "Callback",
      "right" : "Callback",
      "info" : "SimpleType[1383-1391]:SimpleType[1383-1391]"
    }, {
      "left" : "CompilerPass",
      "right" : "CompilerPass",
      "info" : "SimpleType[1393-1405]:SimpleType[1393-1405]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[2563-2572]:MarkerAnnotation[2563-2572]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[2577-2583]:Modifier[2577-2583]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[2584-2587]:PrimitiveType[2584-2587]"
    }, {
      "left" : "compare",
      "right" : "compare",
      "info" : "SimpleName[2588-2595]:SimpleName[2588-2595]"
    }, {
      "left" : "DiGraphNode<Node, Branch> a",
      "right" : "DiGraphNode<Node, Branch> a",
      "info" : "SingleVariableDeclaration[2605-2632]:SingleVariableDeclaration[2605-2632]"
    }, {
      "left" : "DiGraphNode<Node, Branch> b",
      "right" : "DiGraphNode<Node, Branch> b",
      "info" : "SingleVariableDeclaration[2634-2661]:SingleVariableDeclaration[2634-2661]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2663-2746]:Block[2663-2746]"
    }, {
      "left" : "return astPosition.get(a.getValue()) - astPosition.get(b.getValue());",
      "right" : "return astPosition.get(a.getValue()) - astPosition.get(b.getValue());",
      "info" : "ReturnStatement[2671-2740]:ReturnStatement[2671-2740]"
    }, {
      "left" : "ControlFlowAnalysis",
      "right" : "ControlFlowAnalysis",
      "info" : "SimpleName[4269-4288]:SimpleName[4269-4288]"
    }, {
      "left" : "AbstractCompiler compiler",
      "right" : "AbstractCompiler compiler",
      "info" : "SingleVariableDeclaration[4289-4314]:SingleVariableDeclaration[4289-4314]"
    }, {
      "left" : "boolean shouldTraverseFunctions",
      "right" : "boolean shouldTraverseFunctions",
      "info" : "SingleVariableDeclaration[4322-4353]:SingleVariableDeclaration[4322-4353]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4355-4450]:Block[4355-4450]"
    }, {
      "left" : "this.compiler = compiler;",
      "right" : "this.compiler = compiler;",
      "info" : "ExpressionStatement[4361-4386]:ExpressionStatement[4361-4386]"
    }, {
      "left" : "this.shouldTraverseFunctions = shouldTraverseFunctions;",
      "right" : "this.shouldTraverseFunctions = shouldTraverseFunctions;",
      "info" : "ExpressionStatement[4391-4446]:ExpressionStatement[4391-4446]"
    }, {
      "left" : "ControlFlowGraph<Node>",
      "right" : "ControlFlowGraph<Node>",
      "info" : "ParameterizedType[4454-4476]:ParameterizedType[4454-4476]"
    }, {
      "left" : "getCfg",
      "right" : "getCfg",
      "info" : "SimpleName[4477-4483]:SimpleName[4477-4483]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4486-4507]:Block[4486-4507]"
    }, {
      "left" : "return cfg;",
      "right" : "return cfg;",
      "info" : "ReturnStatement[4492-4503]:ReturnStatement[4492-4503]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[4511-4520]:MarkerAnnotation[4511-4520]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[4523-4529]:Modifier[4523-4529]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[4530-4534]:PrimitiveType[4530-4534]"
    }, {
      "left" : "process",
      "right" : "process",
      "info" : "SimpleName[4535-4542]:SimpleName[4535-4542]"
    }, {
      "left" : "Node externs",
      "right" : "Node externs",
      "info" : "SingleVariableDeclaration[4543-4555]:SingleVariableDeclaration[4543-4555]"
    }, {
      "left" : "Node root",
      "right" : "Node root",
      "info" : "SingleVariableDeclaration[4557-4566]:SingleVariableDeclaration[4557-4566]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4568-6211]:Block[4568-6211]"
    }, {
      "left" : "this.root = root;",
      "right" : "this.root = root;",
      "info" : "ExpressionStatement[4574-4591]:ExpressionStatement[4574-4591]"
    }, {
      "left" : "astPositionCounter = 0;",
      "right" : "astPositionCounter = 0;",
      "info" : "ExpressionStatement[4596-4619]:ExpressionStatement[4596-4619]"
    }, {
      "left" : "astPosition = Maps.newHashMap();",
      "right" : "astPosition = Maps.newHashMap();",
      "info" : "ExpressionStatement[4624-4656]:ExpressionStatement[4624-4656]"
    }, {
      "left" : "nodePriorities = Maps.newHashMap();",
      "right" : "nodePriorities = Maps.newHashMap();",
      "info" : "ExpressionStatement[4661-4696]:ExpressionStatement[4661-4696]"
    }, {
      "left" : "cfg = new AstControlFlowGraph(computeFallThrough(root), nodePriorities);",
      "right" : "cfg = new AstControlFlowGraph(computeFallThrough(root), nodePriorities);",
      "info" : "ExpressionStatement[4701-4773]:ExpressionStatement[4701-4773]"
    }, {
      "left" : "NodeTraversal.traverse(compiler, root, this);",
      "right" : "NodeTraversal.traverse(compiler, root, this);",
      "info" : "ExpressionStatement[4778-4823]:ExpressionStatement[4778-4823]"
    }, {
      "left" : "astPosition.put(null, ++astPositionCounter);",
      "right" : "astPosition.put(null, ++astPositionCounter);",
      "info" : "ExpressionStatement[4828-4872]:ExpressionStatement[4828-4872]"
    }, {
      "left" : "priorityCounter = 0;",
      "right" : "priorityCounter = 0;",
      "info" : "ExpressionStatement[5002-5022]:ExpressionStatement[5002-5022]"
    }, {
      "left" : "DiGraphNode<Node, Branch> entry = cfg.getEntry();",
      "right" : "DiGraphNode<Node, Branch> entry = cfg.getEntry();",
      "info" : "VariableDeclarationStatement[5027-5076]:VariableDeclarationStatement[5027-5076]"
    }, {
      "left" : "prioritizeFromEntryNode(entry);",
      "right" : "prioritizeFromEntryNode(entry);",
      "info" : "ExpressionStatement[5081-5112]:ExpressionStatement[5081-5112]"
    }, {
      "left" : "if (shouldTraverseFunctions)",
      "right" : "if (shouldTraverseFunctions)",
      "info" : "IfStatement[5118-5617]:IfStatement[5118-5617]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5147-5617]:Block[5147-5617]"
    }, {
      "left" : "for (DiGraphNode<Node, Branch> candidate : cfg.getDirectedGraphNodes())",
      "right" : "for (DiGraphNode<Node, Branch> candidate : cfg.getDirectedGraphNodes())",
      "info" : "EnhancedForStatement[5252-5611]:EnhancedForStatement[5252-5611]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5324-5611]:Block[5324-5611]"
    }, {
      "left" : "Node value = candidate.getValue();",
      "right" : "Node value = candidate.getValue();",
      "info" : "VariableDeclarationStatement[5334-5368]:VariableDeclarationStatement[5334-5368]"
    }, {
      "left" : "if (value != null && value.getType() == Token.FUNCTION)",
      "right" : "if (value != null && value.getType() == Token.FUNCTION)",
      "info" : "IfStatement[5377-5603]:IfStatement[5377-5603]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5433-5603]:Block[5433-5603]"
    }, {
      "left" : "Preconditions.checkState(\n              !nodePriorities.containsKey(candidate) || candidate == entry);",
      "right" : "Preconditions.checkState(\n              !nodePriorities.containsKey(candidate) || candidate == entry);",
      "info" : "ExpressionStatement[5445-5547]:ExpressionStatement[5445-5547]"
    }, {
      "left" : "prioritizeFromEntryNode(candidate);",
      "right" : "prioritizeFromEntryNode(candidate);",
      "info" : "ExpressionStatement[5558-5593]:ExpressionStatement[5558-5593]"
    }, {
      "left" : "for (DiGraphNode<Node, Branch> candidate : cfg.getDirectedGraphNodes())",
      "right" : "for (DiGraphNode<Node, Branch> candidate : cfg.getDirectedGraphNodes())",
      "info" : "EnhancedForStatement[5886-6083]:EnhancedForStatement[5886-6083]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5958-6083]:Block[5958-6083]"
    }, {
      "left" : "if (!nodePriorities.containsKey(candidate))",
      "right" : "if (!nodePriorities.containsKey(candidate))",
      "info" : "IfStatement[5966-6077]:IfStatement[5966-6077]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6010-6077]:Block[6010-6077]"
    }, {
      "left" : "nodePriorities.put(candidate, ++priorityCounter);",
      "right" : "nodePriorities.put(candidate, ++priorityCounter);",
      "info" : "ExpressionStatement[6020-6069]:ExpressionStatement[6020-6069]"
    }, {
      "left" : "nodePriorities.put(cfg.getImplicitReturn(), ++priorityCounter);",
      "right" : "nodePriorities.put(cfg.getImplicitReturn(), ++priorityCounter);",
      "info" : "ExpressionStatement[6144-6207]:ExpressionStatement[6144-6207]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[6323-6330]:Modifier[6323-6330]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[6331-6335]:PrimitiveType[6331-6335]"
    }, {
      "left" : "prioritizeFromEntryNode",
      "right" : "prioritizeFromEntryNode",
      "info" : "SimpleName[6336-6359]:SimpleName[6336-6359]"
    }, {
      "left" : "DiGraphNode<Node, Branch> entry",
      "right" : "DiGraphNode<Node, Branch> entry",
      "info" : "SingleVariableDeclaration[6360-6391]:SingleVariableDeclaration[6360-6391]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6393-6990]:Block[6393-6990]"
    }, {
      "left" : "PriorityQueue<DiGraphNode<Node, Branch>> worklist =\n        new PriorityQueue<DiGraphNode<Node, Branch>>(10, priorityComparator);",
      "right" : "PriorityQueue<DiGraphNode<Node, Branch>> worklist =\n        new PriorityQueue<DiGraphNode<Node, Branch>>(10, priorityComparator);",
      "info" : "VariableDeclarationStatement[6399-6528]:VariableDeclarationStatement[6399-6528]"
    }, {
      "left" : "worklist.add(entry);",
      "right" : "worklist.add(entry);",
      "info" : "ExpressionStatement[6533-6553]:ExpressionStatement[6533-6553]"
    }, {
      "left" : "while (!worklist.isEmpty())",
      "right" : "while (!worklist.isEmpty())",
      "info" : "WhileStatement[6559-6986]:WhileStatement[6559-6986]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6587-6986]:Block[6587-6986]"
    }, {
      "left" : "DiGraphNode<Node, Branch> current = worklist.remove();",
      "right" : "DiGraphNode<Node, Branch> current = worklist.remove();",
      "info" : "VariableDeclarationStatement[6595-6649]:VariableDeclarationStatement[6595-6649]"
    }, {
      "left" : "if (nodePriorities.containsKey(current))",
      "right" : "if (nodePriorities.containsKey(current))",
      "info" : "IfStatement[6656-6724]:IfStatement[6656-6724]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6697-6724]:Block[6697-6724]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[6707-6716]:ContinueStatement[6707-6716]"
    }, {
      "left" : "nodePriorities.put(current, ++priorityCounter);",
      "right" : "nodePriorities.put(current, ++priorityCounter);",
      "info" : "ExpressionStatement[6732-6779]:ExpressionStatement[6732-6779]"
    }, {
      "left" : "List<DiGraphNode<Node, Branch>> successors =\n          cfg.getDirectedSuccNodes(current);",
      "right" : "List<DiGraphNode<Node, Branch>> successors =\n          cfg.getDirectedSuccNodes(current);",
      "info" : "VariableDeclarationStatement[6787-6876]:VariableDeclarationStatement[6787-6876]"
    }, {
      "left" : "for (DiGraphNode<Node, Branch> candidate : successors)",
      "right" : "for (DiGraphNode<Node, Branch> candidate : successors)",
      "info" : "EnhancedForStatement[6883-6980]:EnhancedForStatement[6883-6980]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6938-6980]:Block[6938-6980]"
    }, {
      "left" : "worklist.add(candidate);",
      "right" : "worklist.add(candidate);",
      "info" : "ExpressionStatement[6948-6972]:ExpressionStatement[6948-6972]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[6994-7003]:MarkerAnnotation[6994-7003]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[7006-7012]:Modifier[7006-7012]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[7013-7020]:PrimitiveType[7013-7020]"
    }, {
      "left" : "shouldTraverse",
      "right" : "shouldTraverse",
      "info" : "SimpleName[7021-7035]:SimpleName[7021-7035]"
    }, {
      "left" : "NodeTraversal nodeTraversal",
      "right" : "NodeTraversal nodeTraversal",
      "info" : "SingleVariableDeclaration[7043-7070]:SingleVariableDeclaration[7043-7070]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[7072-7078]:SingleVariableDeclaration[7072-7078]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[7080-7091]:SingleVariableDeclaration[7080-7091]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7093-9748]:Block[7093-9748]"
    }, {
      "left" : "astPosition.put(n, astPositionCounter++);",
      "right" : "astPosition.put(n, astPositionCounter++);",
      "info" : "ExpressionStatement[7099-7140]:ExpressionStatement[7099-7140]"
    }, {
      "left" : "switch (n.getType()) {\n      case Token.FUNCTION:\n        if (shouldTraverseFunctions || n == cfg.getEntry().getValue()) {\n          exceptionHandler.push(n);\n          return true;\n        }\n        return false;\n      case Token.TRY:\n        exceptionHandler.push(n);\n        return true;\n    }",
      "right" : "switch (n.getType()) {\n      case Token.FUNCTION:\n        if (shouldTraverseFunctions || n == cfg.getEntry().getValue()) {\n          exceptionHandler.push(n);\n          return true;\n        }\n        return false;\n      case Token.TRY:\n        exceptionHandler.push(n);\n        return true;\n    }",
      "info" : "SwitchStatement[7146-7442]:SwitchStatement[7146-7442]"
    }, {
      "left" : "case Token.FUNCTION:",
      "right" : "case Token.FUNCTION:",
      "info" : "SwitchCase[7175-7195]:SwitchCase[7175-7195]"
    }, {
      "left" : "if (shouldTraverseFunctions || n == cfg.getEntry().getValue())",
      "right" : "if (shouldTraverseFunctions || n == cfg.getEntry().getValue())",
      "info" : "IfStatement[7204-7337]:IfStatement[7204-7337]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7267-7337]:Block[7267-7337]"
    }, {
      "left" : "exceptionHandler.push(n);",
      "right" : "exceptionHandler.push(n);",
      "info" : "ExpressionStatement[7279-7304]:ExpressionStatement[7279-7304]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[7315-7327]:ReturnStatement[7315-7327]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[7346-7359]:ReturnStatement[7346-7359]"
    }, {
      "left" : "case Token.TRY:",
      "right" : "case Token.TRY:",
      "info" : "SwitchCase[7366-7381]:SwitchCase[7366-7381]"
    }, {
      "left" : "exceptionHandler.push(n);",
      "right" : "exceptionHandler.push(n);",
      "info" : "ExpressionStatement[7390-7415]:ExpressionStatement[7390-7415]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[7424-7436]:ReturnStatement[7424-7436]"
    }, {
      "left" : "if (parent != null)",
      "right" : "if (parent != null)",
      "info" : "IfStatement[8217-9727]:IfStatement[8217-9727]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8237-9727]:Block[8237-9727]"
    }, {
      "left" : "switch (parent.getType()) {\n        case Token.FOR:\n          // Only traverse the body of the for loop.\n          return n == parent.getLastChild();\n\n        // Skip the conditions.\n        case Token.IF:\n        case Token.WHILE:\n        case Token.WITH:\n          return n != parent.getFirstChild();\n        case Token.DO:\n          return n != parent.getFirstChild().getNext();\n        // Only traverse the body of the cases\n        case Token.SWITCH:\n        case Token.CASE:\n        case Token.CATCH:\n        case Token.LABEL:\n          return n != parent.getFirstChild();\n        case Token.FUNCTION:\n          return n == parent.getFirstChild().getNext().getNext();\n        case Token.CONTINUE:\n        case Token.BREAK:\n        case Token.EXPR_RESULT:\n        case Token.VAR:\n        case Token.RETURN:\n        case Token.THROW:\n          return false;\n        case Token.TRY:\n          /* Just before we are about to visit the second child of the TRY node,\n           * we know that we will be visiting either the CATCH or the FINALLY.\n           * In other words, we know that the post order traversal of the TRY\n           * block has been finished, no more exceptions can be caught by the\n           * handler at this TRY block and should be taken out of the stack.\n           */\n          if (n == parent.getFirstChild().getNext()) {\n            Preconditions.checkState(exceptionHandler.peek() == parent);\n            exceptionHandler.pop();\n          }\n      }",
      "right" : "switch (parent.getType()) {\n        case Token.FOR:\n          // Only traverse the body of the for loop.\n          return n == parent.getLastChild();\n\n        // Skip the conditions.\n        case Token.IF:\n        case Token.WHILE:\n        case Token.WITH:\n          return n != parent.getFirstChild();\n        case Token.DO:\n          return n != parent.getFirstChild().getNext();\n        // Only traverse the body of the cases\n        case Token.SWITCH:\n        case Token.CASE:\n        case Token.CATCH:\n        case Token.LABEL:\n          return n != parent.getFirstChild();\n        case Token.FUNCTION:\n          return n == parent.getFirstChild().getNext().getNext();\n        case Token.CONTINUE:\n        case Token.BREAK:\n        case Token.EXPR_RESULT:\n        case Token.VAR:\n        case Token.RETURN:\n        case Token.THROW:\n          return false;\n        case Token.TRY:\n          /* Just before we are about to visit the second child of the TRY node,\n           * we know that we will be visiting either the CATCH or the FINALLY.\n           * In other words, we know that the post order traversal of the TRY\n           * block has been finished, no more exceptions can be caught by the\n           * handler at this TRY block and should be taken out of the stack.\n           */\n          if (n == parent.getFirstChild().getNext()) {\n            Preconditions.checkState(exceptionHandler.peek() == parent);\n            exceptionHandler.pop();\n          }\n      }",
      "info" : "SwitchStatement[8245-9721]:SwitchStatement[8245-9721]"
    }, {
      "left" : "case Token.FOR:",
      "right" : "case Token.FOR:",
      "info" : "SwitchCase[8281-8296]:SwitchCase[8281-8296]"
    }, {
      "left" : "return n == parent.getLastChild();",
      "right" : "return n == parent.getLastChild();",
      "info" : "ReturnStatement[8360-8394]:ReturnStatement[8360-8394]"
    }, {
      "left" : "case Token.IF:",
      "right" : "case Token.IF:",
      "info" : "SwitchCase[8436-8450]:SwitchCase[8436-8450]"
    }, {
      "left" : "case Token.WHILE:",
      "right" : "case Token.WHILE:",
      "info" : "SwitchCase[8459-8476]:SwitchCase[8459-8476]"
    }, {
      "left" : "case Token.WITH:",
      "right" : "case Token.WITH:",
      "info" : "SwitchCase[8485-8501]:SwitchCase[8485-8501]"
    }, {
      "left" : "return n != parent.getFirstChild();",
      "right" : "return n != parent.getFirstChild();",
      "info" : "ReturnStatement[8512-8547]:ReturnStatement[8512-8547]"
    }, {
      "left" : "case Token.DO:",
      "right" : "case Token.DO:",
      "info" : "SwitchCase[8556-8570]:SwitchCase[8556-8570]"
    }, {
      "left" : "return n != parent.getFirstChild().getNext();",
      "right" : "return n != parent.getFirstChild().getNext();",
      "info" : "ReturnStatement[8581-8626]:ReturnStatement[8581-8626]"
    }, {
      "left" : "case Token.SWITCH:",
      "right" : "case Token.SWITCH:",
      "info" : "SwitchCase[8682-8700]:SwitchCase[8682-8700]"
    }, {
      "left" : "case Token.CASE:",
      "right" : "case Token.CASE:",
      "info" : "SwitchCase[8709-8725]:SwitchCase[8709-8725]"
    }, {
      "left" : "case Token.CATCH:",
      "right" : "case Token.CATCH:",
      "info" : "SwitchCase[8734-8751]:SwitchCase[8734-8751]"
    }, {
      "left" : "case Token.LABEL:",
      "right" : "case Token.LABEL:",
      "info" : "SwitchCase[8760-8777]:SwitchCase[8760-8777]"
    }, {
      "left" : "return n != parent.getFirstChild();",
      "right" : "return n != parent.getFirstChild();",
      "info" : "ReturnStatement[8788-8823]:ReturnStatement[8788-8823]"
    }, {
      "left" : "case Token.FUNCTION:",
      "right" : "case Token.FUNCTION:",
      "info" : "SwitchCase[8832-8852]:SwitchCase[8832-8852]"
    }, {
      "left" : "return n == parent.getFirstChild().getNext().getNext();",
      "right" : "return n == parent.getFirstChild().getNext().getNext();",
      "info" : "ReturnStatement[8863-8918]:ReturnStatement[8863-8918]"
    }, {
      "left" : "case Token.CONTINUE:",
      "right" : "case Token.CONTINUE:",
      "info" : "SwitchCase[8927-8947]:SwitchCase[8927-8947]"
    }, {
      "left" : "case Token.BREAK:",
      "right" : "case Token.BREAK:",
      "info" : "SwitchCase[8956-8973]:SwitchCase[8956-8973]"
    }, {
      "left" : "case Token.EXPR_RESULT:",
      "right" : "case Token.EXPR_RESULT:",
      "info" : "SwitchCase[8982-9005]:SwitchCase[8982-9005]"
    }, {
      "left" : "case Token.VAR:",
      "right" : "case Token.VAR:",
      "info" : "SwitchCase[9014-9029]:SwitchCase[9014-9029]"
    }, {
      "left" : "case Token.RETURN:",
      "right" : "case Token.RETURN:",
      "info" : "SwitchCase[9038-9056]:SwitchCase[9038-9056]"
    }, {
      "left" : "case Token.THROW:",
      "right" : "case Token.THROW:",
      "info" : "SwitchCase[9065-9082]:SwitchCase[9065-9082]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[9093-9106]:ReturnStatement[9093-9106]"
    }, {
      "left" : "case Token.TRY:",
      "right" : "case Token.TRY:",
      "info" : "SwitchCase[9115-9130]:SwitchCase[9115-9130]"
    }, {
      "left" : "if (n == parent.getFirstChild().getNext())",
      "right" : "if (n == parent.getFirstChild().getNext())",
      "info" : "IfStatement[9548-9713]:IfStatement[9548-9713]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9591-9713]:Block[9591-9713]"
    }, {
      "left" : "Preconditions.checkState(exceptionHandler.peek() == parent);",
      "right" : "Preconditions.checkState(exceptionHandler.peek() == parent);",
      "info" : "ExpressionStatement[9605-9665]:ExpressionStatement[9605-9665]"
    }, {
      "left" : "exceptionHandler.pop();",
      "right" : "exceptionHandler.pop();",
      "info" : "ExpressionStatement[9678-9701]:ExpressionStatement[9678-9701]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[9732-9744]:ReturnStatement[9732-9744]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[9752-9761]:MarkerAnnotation[9752-9761]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[9764-9770]:Modifier[9764-9770]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[9771-9775]:PrimitiveType[9771-9775]"
    }, {
      "left" : "visit",
      "right" : "visit",
      "info" : "SimpleName[9776-9781]:SimpleName[9776-9781]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[9782-9797]:SingleVariableDeclaration[9782-9797]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[9799-9805]:SingleVariableDeclaration[9799-9805]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[9807-9818]:SingleVariableDeclaration[9807-9818]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9820-11069]:Block[9820-11069]"
    }, {
      "left" : "switch (n.getType()) {\n      case Token.IF:\n        handleIf(n);\n        return;\n      case Token.WHILE:\n        handleWhile(n);\n        return;\n      case Token.DO:\n        handleDo(n);\n        return;\n      case Token.FOR:\n        handleFor(n);\n        return;\n      case Token.SWITCH:\n        handleSwitch(n);\n        return;\n      case Token.CASE:\n        handleCase(n);\n        return;\n      case Token.DEFAULT:\n        handleDefault(n);\n        return;\n      case Token.BLOCK:\n      case Token.SCRIPT:\n        handleStmtList(n);\n        return;\n      case Token.FUNCTION:\n        handleFunction(n);\n        return;\n      case Token.EXPR_RESULT:\n        handleExpr(n);\n        return;\n      case Token.THROW:\n        handleThrow(n);\n        return;\n      case Token.TRY:\n        handleTry(n);\n        return;\n      case Token.CATCH:\n        handleCatch(n);\n        return;\n      case Token.BREAK:\n        handleBreak(n);\n        return;\n      case Token.CONTINUE:\n        handleContinue(n);\n        return;\n      case Token.RETURN:\n        handleReturn(n);\n        return;\n      case Token.WITH:\n        handleWith(n);\n        return;\n      case Token.LABEL:\n        return;\n      default:\n        handleStmt(n);\n        return;\n    }",
      "right" : "switch (n.getType()) {\n      case Token.IF:\n        handleIf(n);\n        return;\n      case Token.WHILE:\n        handleWhile(n);\n        return;\n      case Token.DO:\n        handleDo(n);\n        return;\n      case Token.FOR:\n        handleFor(n);\n        return;\n      case Token.SWITCH:\n        handleSwitch(n);\n        return;\n      case Token.CASE:\n        handleCase(n);\n        return;\n      case Token.DEFAULT:\n        handleDefault(n);\n        return;\n      case Token.BLOCK:\n      case Token.SCRIPT:\n        handleStmtList(n);\n        return;\n      case Token.FUNCTION:\n        handleFunction(n);\n        return;\n      case Token.EXPR_RESULT:\n        handleExpr(n);\n        return;\n      case Token.THROW:\n        handleThrow(n);\n        return;\n      case Token.TRY:\n        handleTry(n);\n        return;\n      case Token.CATCH:\n        handleCatch(n);\n        return;\n      case Token.BREAK:\n        handleBreak(n);\n        return;\n      case Token.CONTINUE:\n        handleContinue(n);\n        return;\n      case Token.RETURN:\n        handleReturn(n);\n        return;\n      case Token.WITH:\n        handleWith(n);\n        return;\n      case Token.LABEL:\n        return;\n      default:\n        handleStmt(n);\n        return;\n    }",
      "info" : "SwitchStatement[9826-11065]:SwitchStatement[9826-11065]"
    }, {
      "left" : "case Token.IF:",
      "right" : "case Token.IF:",
      "info" : "SwitchCase[9855-9869]:SwitchCase[9855-9869]"
    }, {
      "left" : "handleIf(n);",
      "right" : "handleIf(n);",
      "info" : "ExpressionStatement[9878-9890]:ExpressionStatement[9878-9890]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[9899-9906]:ReturnStatement[9899-9906]"
    }, {
      "left" : "case Token.WHILE:",
      "right" : "case Token.WHILE:",
      "info" : "SwitchCase[9913-9930]:SwitchCase[9913-9930]"
    }, {
      "left" : "handleWhile(n);",
      "right" : "handleWhile(n);",
      "info" : "ExpressionStatement[9939-9954]:ExpressionStatement[9939-9954]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[9963-9970]:ReturnStatement[9963-9970]"
    }, {
      "left" : "case Token.DO:",
      "right" : "case Token.DO:",
      "info" : "SwitchCase[9977-9991]:SwitchCase[9977-9991]"
    }, {
      "left" : "handleDo(n);",
      "right" : "handleDo(n);",
      "info" : "ExpressionStatement[10000-10012]:ExpressionStatement[10000-10012]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[10021-10028]:ReturnStatement[10021-10028]"
    }, {
      "left" : "case Token.FOR:",
      "right" : "case Token.FOR:",
      "info" : "SwitchCase[10035-10050]:SwitchCase[10035-10050]"
    }, {
      "left" : "handleFor(n);",
      "right" : "handleFor(n);",
      "info" : "ExpressionStatement[10059-10072]:ExpressionStatement[10059-10072]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[10081-10088]:ReturnStatement[10081-10088]"
    }, {
      "left" : "case Token.SWITCH:",
      "right" : "case Token.SWITCH:",
      "info" : "SwitchCase[10095-10113]:SwitchCase[10095-10113]"
    }, {
      "left" : "handleSwitch(n);",
      "right" : "handleSwitch(n);",
      "info" : "ExpressionStatement[10122-10138]:ExpressionStatement[10122-10138]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[10147-10154]:ReturnStatement[10147-10154]"
    }, {
      "left" : "case Token.CASE:",
      "right" : "case Token.CASE:",
      "info" : "SwitchCase[10161-10177]:SwitchCase[10161-10177]"
    }, {
      "left" : "handleCase(n);",
      "right" : "handleCase(n);",
      "info" : "ExpressionStatement[10186-10200]:ExpressionStatement[10186-10200]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[10209-10216]:ReturnStatement[10209-10216]"
    }, {
      "left" : "case Token.DEFAULT:",
      "right" : "case Token.DEFAULT:",
      "info" : "SwitchCase[10223-10242]:SwitchCase[10223-10242]"
    }, {
      "left" : "handleDefault(n);",
      "right" : "handleDefault(n);",
      "info" : "ExpressionStatement[10251-10268]:ExpressionStatement[10251-10268]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[10277-10284]:ReturnStatement[10277-10284]"
    }, {
      "left" : "case Token.BLOCK:",
      "right" : "case Token.BLOCK:",
      "info" : "SwitchCase[10291-10308]:SwitchCase[10291-10308]"
    }, {
      "left" : "case Token.SCRIPT:",
      "right" : "case Token.SCRIPT:",
      "info" : "SwitchCase[10315-10333]:SwitchCase[10315-10333]"
    }, {
      "left" : "handleStmtList(n);",
      "right" : "handleStmtList(n);",
      "info" : "ExpressionStatement[10342-10360]:ExpressionStatement[10342-10360]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[10369-10376]:ReturnStatement[10369-10376]"
    }, {
      "left" : "case Token.FUNCTION:",
      "right" : "case Token.FUNCTION:",
      "info" : "SwitchCase[10383-10403]:SwitchCase[10383-10403]"
    }, {
      "left" : "handleFunction(n);",
      "right" : "handleFunction(n);",
      "info" : "ExpressionStatement[10412-10430]:ExpressionStatement[10412-10430]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[10439-10446]:ReturnStatement[10439-10446]"
    }, {
      "left" : "case Token.EXPR_RESULT:",
      "right" : "case Token.EXPR_RESULT:",
      "info" : "SwitchCase[10453-10476]:SwitchCase[10453-10476]"
    }, {
      "left" : "handleExpr(n);",
      "right" : "handleExpr(n);",
      "info" : "ExpressionStatement[10485-10499]:ExpressionStatement[10485-10499]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[10508-10515]:ReturnStatement[10508-10515]"
    }, {
      "left" : "case Token.THROW:",
      "right" : "case Token.THROW:",
      "info" : "SwitchCase[10522-10539]:SwitchCase[10522-10539]"
    }, {
      "left" : "handleThrow(n);",
      "right" : "handleThrow(n);",
      "info" : "ExpressionStatement[10548-10563]:ExpressionStatement[10548-10563]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[10572-10579]:ReturnStatement[10572-10579]"
    }, {
      "left" : "case Token.TRY:",
      "right" : "case Token.TRY:",
      "info" : "SwitchCase[10586-10601]:SwitchCase[10586-10601]"
    }, {
      "left" : "handleTry(n);",
      "right" : "handleTry(n);",
      "info" : "ExpressionStatement[10610-10623]:ExpressionStatement[10610-10623]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[10632-10639]:ReturnStatement[10632-10639]"
    }, {
      "left" : "case Token.CATCH:",
      "right" : "case Token.CATCH:",
      "info" : "SwitchCase[10646-10663]:SwitchCase[10646-10663]"
    }, {
      "left" : "handleCatch(n);",
      "right" : "handleCatch(n);",
      "info" : "ExpressionStatement[10672-10687]:ExpressionStatement[10672-10687]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[10696-10703]:ReturnStatement[10696-10703]"
    }, {
      "left" : "case Token.BREAK:",
      "right" : "case Token.BREAK:",
      "info" : "SwitchCase[10710-10727]:SwitchCase[10710-10727]"
    }, {
      "left" : "handleBreak(n);",
      "right" : "handleBreak(n);",
      "info" : "ExpressionStatement[10736-10751]:ExpressionStatement[10736-10751]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[10760-10767]:ReturnStatement[10760-10767]"
    }, {
      "left" : "case Token.CONTINUE:",
      "right" : "case Token.CONTINUE:",
      "info" : "SwitchCase[10774-10794]:SwitchCase[10774-10794]"
    }, {
      "left" : "handleContinue(n);",
      "right" : "handleContinue(n);",
      "info" : "ExpressionStatement[10803-10821]:ExpressionStatement[10803-10821]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[10830-10837]:ReturnStatement[10830-10837]"
    }, {
      "left" : "case Token.RETURN:",
      "right" : "case Token.RETURN:",
      "info" : "SwitchCase[10844-10862]:SwitchCase[10844-10862]"
    }, {
      "left" : "handleReturn(n);",
      "right" : "handleReturn(n);",
      "info" : "ExpressionStatement[10871-10887]:ExpressionStatement[10871-10887]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[10896-10903]:ReturnStatement[10896-10903]"
    }, {
      "left" : "case Token.WITH:",
      "right" : "case Token.WITH:",
      "info" : "SwitchCase[10910-10926]:SwitchCase[10910-10926]"
    }, {
      "left" : "handleWith(n);",
      "right" : "handleWith(n);",
      "info" : "ExpressionStatement[10935-10949]:ExpressionStatement[10935-10949]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[10958-10965]:ReturnStatement[10958-10965]"
    }, {
      "left" : "case Token.LABEL:",
      "right" : "case Token.LABEL:",
      "info" : "SwitchCase[10972-10989]:SwitchCase[10972-10989]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[10998-11005]:ReturnStatement[10998-11005]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[11012-11020]:SwitchCase[11012-11020]"
    }, {
      "left" : "handleStmt(n);",
      "right" : "handleStmt(n);",
      "info" : "ExpressionStatement[11029-11043]:ExpressionStatement[11029-11043]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[11052-11059]:ReturnStatement[11052-11059]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[11073-11080]:Modifier[11073-11080]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[11081-11085]:PrimitiveType[11081-11085]"
    }, {
      "left" : "handleIf",
      "right" : "handleIf",
      "info" : "SimpleName[11086-11094]:SimpleName[11086-11094]"
    }, {
      "left" : "Node node",
      "right" : "Node node",
      "info" : "SingleVariableDeclaration[11095-11104]:SingleVariableDeclaration[11095-11104]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11106-11585]:Block[11106-11585]"
    }, {
      "left" : "Node thenBlock = node.getFirstChild().getNext();",
      "right" : "Node thenBlock = node.getFirstChild().getNext();",
      "info" : "VariableDeclarationStatement[11112-11160]:VariableDeclarationStatement[11112-11160]"
    }, {
      "left" : "Node elseBlock = thenBlock.getNext();",
      "right" : "Node elseBlock = thenBlock.getNext();",
      "info" : "VariableDeclarationStatement[11165-11202]:VariableDeclarationStatement[11165-11202]"
    }, {
      "left" : "createEdge(node, Branch.ON_TRUE, computeFallThrough(thenBlock));",
      "right" : "createEdge(node, Branch.ON_TRUE, computeFallThrough(thenBlock));",
      "info" : "ExpressionStatement[11207-11271]:ExpressionStatement[11207-11271]"
    }, {
      "left" : "if (elseBlock == null)",
      "right" : "if (elseBlock == null)",
      "info" : "IfStatement[11277-11488]:IfStatement[11277-11488]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11300-11403]:Block[11300-11403]"
    }, {
      "left" : "createEdge(node, Branch.ON_FALSE,\n          computeFollowNode(node));",
      "right" : "createEdge(node, Branch.ON_FALSE,\n          computeFollowNode(node));",
      "info" : "ExpressionStatement[11308-11377]:ExpressionStatement[11308-11377]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11409-11488]:Block[11409-11488]"
    }, {
      "left" : "createEdge(node, Branch.ON_FALSE, computeFallThrough(elseBlock));",
      "right" : "createEdge(node, Branch.ON_FALSE, computeFallThrough(elseBlock));",
      "info" : "ExpressionStatement[11417-11482]:ExpressionStatement[11417-11482]"
    }, {
      "left" : "connectToPossibleExceptionHandler(\n        node, NodeUtil.getConditionExpression(node));",
      "right" : "connectToPossibleExceptionHandler(\n        node, NodeUtil.getConditionExpression(node));",
      "info" : "ExpressionStatement[11493-11581]:ExpressionStatement[11493-11581]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[11589-11596]:Modifier[11589-11596]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[11597-11601]:PrimitiveType[11597-11601]"
    }, {
      "left" : "handleWhile",
      "right" : "handleWhile",
      "info" : "SimpleName[11602-11613]:SimpleName[11602-11613]"
    }, {
      "left" : "Node node",
      "right" : "Node node",
      "info" : "SingleVariableDeclaration[11614-11623]:SingleVariableDeclaration[11614-11623]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11625-12046]:Block[11625-12046]"
    }, {
      "left" : "createEdge(node, Branch.ON_TRUE,\n        computeFallThrough(node.getFirstChild().getNext()));",
      "right" : "createEdge(node, Branch.ON_TRUE,\n        computeFallThrough(node.getFirstChild().getNext()));",
      "info" : "ExpressionStatement[11710-11803]:ExpressionStatement[11710-11803]"
    }, {
      "left" : "createEdge(node, Branch.ON_FALSE,\n        computeFollowNode(node));",
      "right" : "createEdge(node, Branch.ON_FALSE,\n        computeFollowNode(node));",
      "info" : "ExpressionStatement[11882-11949]:ExpressionStatement[11882-11949]"
    }, {
      "left" : "connectToPossibleExceptionHandler(\n        node, NodeUtil.getConditionExpression(node));",
      "right" : "connectToPossibleExceptionHandler(\n        node, NodeUtil.getConditionExpression(node));",
      "info" : "ExpressionStatement[11954-12042]:ExpressionStatement[11954-12042]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[12050-12057]:Modifier[12050-12057]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[12058-12062]:PrimitiveType[12058-12062]"
    }, {
      "left" : "handleDo",
      "right" : "handleDo",
      "info" : "SimpleName[12063-12071]:SimpleName[12063-12071]"
    }, {
      "left" : "Node node",
      "right" : "Node node",
      "info" : "SingleVariableDeclaration[12072-12081]:SingleVariableDeclaration[12072-12081]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12083-12488]:Block[12083-12488]"
    }, {
      "left" : "createEdge(node, Branch.ON_TRUE, computeFallThrough(node.getFirstChild()));",
      "right" : "createEdge(node, Branch.ON_TRUE, computeFallThrough(node.getFirstChild()));",
      "info" : "ExpressionStatement[12180-12255]:ExpressionStatement[12180-12255]"
    }, {
      "left" : "createEdge(node, Branch.ON_FALSE,\n        computeFollowNode(node));",
      "right" : "createEdge(node, Branch.ON_FALSE,\n        computeFollowNode(node));",
      "info" : "ExpressionStatement[12324-12391]:ExpressionStatement[12324-12391]"
    }, {
      "left" : "connectToPossibleExceptionHandler(\n        node, NodeUtil.getConditionExpression(node));",
      "right" : "connectToPossibleExceptionHandler(\n        node, NodeUtil.getConditionExpression(node));",
      "info" : "ExpressionStatement[12396-12484]:ExpressionStatement[12396-12484]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[12492-12499]:Modifier[12492-12499]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[12500-12504]:PrimitiveType[12500-12504]"
    }, {
      "left" : "handleFor",
      "right" : "handleFor",
      "info" : "SimpleName[12505-12514]:SimpleName[12505-12514]"
    }, {
      "left" : "Node forNode",
      "right" : "Node forNode",
      "info" : "SingleVariableDeclaration[12515-12527]:SingleVariableDeclaration[12515-12527]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12529-14183]:Block[12529-14183]"
    }, {
      "left" : "if (forNode.getChildCount() == 4)",
      "right" : "if (forNode.getChildCount() == 4)",
      "info" : "IfStatement[12535-14179]:IfStatement[12535-14179]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12569-13666]:Block[12569-13666]"
    }, {
      "left" : "Node init = forNode.getFirstChild();",
      "right" : "Node init = forNode.getFirstChild();",
      "info" : "VariableDeclarationStatement[12626-12662]:VariableDeclarationStatement[12626-12662]"
    }, {
      "left" : "Node cond = init.getNext();",
      "right" : "Node cond = init.getNext();",
      "info" : "VariableDeclarationStatement[12669-12696]:VariableDeclarationStatement[12669-12696]"
    }, {
      "left" : "Node iter = cond.getNext();",
      "right" : "Node iter = cond.getNext();",
      "info" : "VariableDeclarationStatement[12703-12730]:VariableDeclarationStatement[12703-12730]"
    }, {
      "left" : "Node body = iter.getNext();",
      "right" : "Node body = iter.getNext();",
      "info" : "VariableDeclarationStatement[12737-12764]:VariableDeclarationStatement[12737-12764]"
    }, {
      "left" : "createEdge(init, Branch.UNCOND, forNode);",
      "right" : "createEdge(init, Branch.UNCOND, forNode);",
      "info" : "ExpressionStatement[12901-12942]:ExpressionStatement[12901-12942]"
    }, {
      "left" : "createEdge(forNode, Branch.ON_TRUE, computeFallThrough(body));",
      "right" : "createEdge(forNode, Branch.ON_TRUE, computeFallThrough(body));",
      "info" : "ExpressionStatement[13024-13086]:ExpressionStatement[13024-13086]"
    }, {
      "left" : "createEdge(forNode, Branch.ON_FALSE,\n          computeFollowNode(forNode));",
      "right" : "createEdge(forNode, Branch.ON_FALSE,\n          computeFollowNode(forNode));",
      "info" : "ExpressionStatement[13131-13206]:ExpressionStatement[13131-13206]"
    }, {
      "left" : "createEdge(iter, Branch.UNCOND, forNode);",
      "right" : "createEdge(iter, Branch.UNCOND, forNode);",
      "info" : "ExpressionStatement[13457-13498]:ExpressionStatement[13457-13498]"
    }, {
      "left" : "connectToPossibleExceptionHandler(init, init);",
      "right" : "connectToPossibleExceptionHandler(init, init);",
      "info" : "ExpressionStatement[13505-13551]:ExpressionStatement[13505-13551]"
    }, {
      "left" : "connectToPossibleExceptionHandler(forNode, cond);",
      "right" : "connectToPossibleExceptionHandler(forNode, cond);",
      "info" : "ExpressionStatement[13558-13607]:ExpressionStatement[13558-13607]"
    }, {
      "left" : "connectToPossibleExceptionHandler(iter, iter);",
      "right" : "connectToPossibleExceptionHandler(iter, iter);",
      "info" : "ExpressionStatement[13614-13660]:ExpressionStatement[13614-13660]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13672-14179]:Block[13672-14179]"
    }, {
      "left" : "Node item = forNode.getFirstChild();",
      "right" : "Node item = forNode.getFirstChild();",
      "info" : "VariableDeclarationStatement[13731-13767]:VariableDeclarationStatement[13731-13767]"
    }, {
      "left" : "Node collection = item.getNext();",
      "right" : "Node collection = item.getNext();",
      "info" : "VariableDeclarationStatement[13774-13807]:VariableDeclarationStatement[13774-13807]"
    }, {
      "left" : "Node body = collection.getNext();",
      "right" : "Node body = collection.getNext();",
      "info" : "VariableDeclarationStatement[13814-13847]:VariableDeclarationStatement[13814-13847]"
    }, {
      "left" : "createEdge(forNode, Branch.ON_TRUE, computeFallThrough(body));",
      "right" : "createEdge(forNode, Branch.ON_TRUE, computeFallThrough(body));",
      "info" : "ExpressionStatement[13929-13991]:ExpressionStatement[13929-13991]"
    }, {
      "left" : "createEdge(forNode, Branch.ON_FALSE,\n          computeFollowNode(forNode));",
      "right" : "createEdge(forNode, Branch.ON_FALSE,\n          computeFollowNode(forNode));",
      "info" : "ExpressionStatement[14036-14111]:ExpressionStatement[14036-14111]"
    }, {
      "left" : "connectToPossibleExceptionHandler(forNode, collection);",
      "right" : "connectToPossibleExceptionHandler(forNode, collection);",
      "info" : "ExpressionStatement[14118-14173]:ExpressionStatement[14118-14173]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[14187-14194]:Modifier[14187-14194]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[14195-14199]:PrimitiveType[14195-14199]"
    }, {
      "left" : "handleSwitch",
      "right" : "handleSwitch",
      "info" : "SimpleName[14200-14212]:SimpleName[14200-14212]"
    }, {
      "left" : "Node node",
      "right" : "Node node",
      "info" : "SingleVariableDeclaration[14213-14222]:SingleVariableDeclaration[14213-14222]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14224-14913]:Block[14224-14913]"
    }, {
      "left" : "Node next = getNextSiblingOfType(\n        node.getFirstChild().getNext(), Token.CASE, Token.EMPTY);",
      "right" : "Node next = getNextSiblingOfType(\n        node.getFirstChild().getNext(), Token.CASE, Token.EMPTY);",
      "info" : "VariableDeclarationStatement[14346-14445]:VariableDeclarationStatement[14346-14445]"
    }, {
      "left" : "if (next != null)",
      "right" : "if (next != null)",
      "info" : "IfStatement[14450-14842]:IfStatement[14450-14842]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14468-14554]:Block[14468-14554]"
    }, {
      "left" : "createEdge(node, Branch.UNCOND, next);",
      "right" : "createEdge(node, Branch.UNCOND, next);",
      "info" : "ExpressionStatement[14510-14548]:ExpressionStatement[14510-14548]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14560-14842]:Block[14560-14842]"
    }, {
      "left" : "if (node.getFirstChild().getNext() != null)",
      "right" : "if (node.getFirstChild().getNext() != null)",
      "info" : "IfStatement[14606-14836]:IfStatement[14606-14836]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14650-14732]:Block[14650-14732]"
    }, {
      "left" : "createEdge(node, Branch.UNCOND, node.getFirstChild().getNext());",
      "right" : "createEdge(node, Branch.UNCOND, node.getFirstChild().getNext());",
      "info" : "ExpressionStatement[14660-14724]:ExpressionStatement[14660-14724]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14738-14836]:Block[14738-14836]"
    }, {
      "left" : "createEdge(node, Branch.UNCOND, computeFollowNode(node));",
      "right" : "createEdge(node, Branch.UNCOND, computeFollowNode(node));",
      "info" : "ExpressionStatement[14771-14828]:ExpressionStatement[14771-14828]"
    }, {
      "left" : "connectToPossibleExceptionHandler(node, node.getFirstChild());",
      "right" : "connectToPossibleExceptionHandler(node, node.getFirstChild());",
      "info" : "ExpressionStatement[14847-14909]:ExpressionStatement[14847-14909]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[14917-14924]:Modifier[14917-14924]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[14925-14929]:PrimitiveType[14925-14929]"
    }, {
      "left" : "handleCase",
      "right" : "handleCase",
      "info" : "SimpleName[14930-14940]:SimpleName[14930-14940]"
    }, {
      "left" : "Node node",
      "right" : "Node node",
      "info" : "SingleVariableDeclaration[14941-14950]:SingleVariableDeclaration[14941-14950]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14952-15903]:Block[14952-15903]"
    }, {
      "left" : "createEdge(node, Branch.ON_TRUE,\n        node.getFirstChild().getNext());",
      "right" : "createEdge(node, Branch.ON_TRUE,\n        node.getFirstChild().getNext());",
      "info" : "ExpressionStatement[15039-15112]:ExpressionStatement[15039-15112]"
    }, {
      "left" : "Node next = getNextSiblingOfType(node.getNext(), Token.CASE);",
      "right" : "Node next = getNextSiblingOfType(node.getNext(), Token.CASE);",
      "info" : "VariableDeclarationStatement[15171-15232]:VariableDeclarationStatement[15171-15232]"
    }, {
      "left" : "if (next != null)",
      "right" : "if (next != null)",
      "info" : "IfStatement[15237-15832]:IfStatement[15237-15832]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15255-15387]:Block[15255-15387]"
    }, {
      "left" : "Preconditions.checkState(next.getType() == Token.CASE);",
      "right" : "Preconditions.checkState(next.getType() == Token.CASE);",
      "info" : "ExpressionStatement[15279-15334]:ExpressionStatement[15279-15334]"
    }, {
      "left" : "createEdge(node, Branch.ON_FALSE, next);",
      "right" : "createEdge(node, Branch.ON_FALSE, next);",
      "info" : "ExpressionStatement[15341-15381]:ExpressionStatement[15341-15381]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15393-15832]:Block[15393-15832]"
    }, {
      "left" : "Node parent = node.getParent();",
      "right" : "Node parent = node.getParent();",
      "info" : "VariableDeclarationStatement[15458-15489]:VariableDeclarationStatement[15458-15489]"
    }, {
      "left" : "Node deflt = getNextSiblingOfType(\n        parent.getFirstChild().getNext(), Token.DEFAULT);",
      "right" : "Node deflt = getNextSiblingOfType(\n        parent.getFirstChild().getNext(), Token.DEFAULT);",
      "info" : "VariableDeclarationStatement[15496-15588]:VariableDeclarationStatement[15496-15588]"
    }, {
      "left" : "if (deflt != null)",
      "right" : "if (deflt != null)",
      "info" : "IfStatement[15595-15826]:IfStatement[15595-15826]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15614-15690]:Block[15614-15690]"
    }, {
      "left" : "createEdge(node, Branch.ON_FALSE, deflt);",
      "right" : "createEdge(node, Branch.ON_FALSE, deflt);",
      "info" : "ExpressionStatement[15641-15682]:ExpressionStatement[15641-15682]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15696-15826]:Block[15696-15826]"
    }, {
      "left" : "createEdge(node, Branch.ON_FALSE, computeFollowNode(node));",
      "right" : "createEdge(node, Branch.ON_FALSE, computeFollowNode(node));",
      "info" : "ExpressionStatement[15759-15818]:ExpressionStatement[15759-15818]"
    }, {
      "left" : "connectToPossibleExceptionHandler(node, node.getFirstChild());",
      "right" : "connectToPossibleExceptionHandler(node, node.getFirstChild());",
      "info" : "ExpressionStatement[15837-15899]:ExpressionStatement[15837-15899]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[15907-15914]:Modifier[15907-15914]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[15915-15919]:PrimitiveType[15915-15919]"
    }, {
      "left" : "handleDefault",
      "right" : "handleDefault",
      "info" : "SimpleName[15920-15933]:SimpleName[15920-15933]"
    }, {
      "left" : "Node node",
      "right" : "Node node",
      "info" : "SingleVariableDeclaration[15934-15943]:SingleVariableDeclaration[15934-15943]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15945-16084]:Block[15945-16084]"
    }, {
      "left" : "createEdge(node, Branch.UNCOND, node.getFirstChild());",
      "right" : "createEdge(node, Branch.UNCOND, node.getFirstChild());",
      "info" : "ExpressionStatement[16026-16080]:ExpressionStatement[16026-16080]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[16088-16095]:Modifier[16088-16095]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[16096-16100]:PrimitiveType[16096-16100]"
    }, {
      "left" : "handleWith",
      "right" : "handleWith",
      "info" : "SimpleName[16101-16111]:SimpleName[16101-16111]"
    }, {
      "left" : "Node node",
      "right" : "Node node",
      "info" : "SingleVariableDeclaration[16112-16121]:SingleVariableDeclaration[16112-16121]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16123-16328]:Block[16123-16328]"
    }, {
      "left" : "createEdge(node, Branch.UNCOND, node.getLastChild());",
      "right" : "createEdge(node, Branch.UNCOND, node.getLastChild());",
      "info" : "ExpressionStatement[16204-16257]:ExpressionStatement[16204-16257]"
    }, {
      "left" : "connectToPossibleExceptionHandler(node, node.getFirstChild());",
      "right" : "connectToPossibleExceptionHandler(node, node.getFirstChild());",
      "info" : "ExpressionStatement[16262-16324]:ExpressionStatement[16262-16324]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[16332-16339]:Modifier[16332-16339]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[16340-16344]:PrimitiveType[16340-16344]"
    }, {
      "left" : "handleStmtList",
      "right" : "handleStmtList",
      "info" : "SimpleName[16345-16359]:SimpleName[16345-16359]"
    }, {
      "left" : "Node node",
      "right" : "Node node",
      "info" : "SingleVariableDeclaration[16360-16369]:SingleVariableDeclaration[16360-16369]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16371-17682]:Block[16371-17682]"
    }, {
      "left" : "Node parent = node.getParent();",
      "right" : "Node parent = node.getParent();",
      "info" : "VariableDeclarationStatement[16377-16408]:VariableDeclarationStatement[16377-16408]"
    }, {
      "left" : "if (node.getType() == Token.BLOCK && parent != null &&\n        parent.getType() == Token.TRY &&\n        NodeUtil.getCatchBlock(parent) == node &&\n        !NodeUtil.hasCatchHandler(node))",
      "right" : "if (node.getType() == Token.BLOCK && parent != null &&\n        parent.getType() == Token.TRY &&\n        NodeUtil.getCatchBlock(parent) == node &&\n        !NodeUtil.hasCatchHandler(node))",
      "info" : "IfStatement[16487-16695]:IfStatement[16487-16695]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16674-16695]:Block[16674-16695]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[16682-16689]:ReturnStatement[16682-16689]"
    }, {
      "left" : "Node child = node.getFirstChild();",
      "right" : "Node child = node.getFirstChild();",
      "info" : "VariableDeclarationStatement[16772-16806]:VariableDeclarationStatement[16772-16806]"
    }, {
      "left" : "while (child != null && child.getType() == Token.FUNCTION)",
      "right" : "while (child != null && child.getType() == Token.FUNCTION)",
      "info" : "WhileStatement[16926-17023]:WhileStatement[16926-17023]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16985-17023]:Block[16985-17023]"
    }, {
      "left" : "child = child.getNext();",
      "right" : "child = child.getNext();",
      "info" : "ExpressionStatement[16993-17017]:ExpressionStatement[16993-17017]"
    }, {
      "left" : "if (child != null)",
      "right" : "if (child != null)",
      "info" : "IfStatement[17029-17198]:IfStatement[17029-17198]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17048-17121]:Block[17048-17121]"
    }, {
      "left" : "createEdge(node, Branch.UNCOND, computeFallThrough(child));",
      "right" : "createEdge(node, Branch.UNCOND, computeFallThrough(child));",
      "info" : "ExpressionStatement[17056-17115]:ExpressionStatement[17056-17115]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17127-17198]:Block[17127-17198]"
    }, {
      "left" : "createEdge(node, Branch.UNCOND, computeFollowNode(node));",
      "right" : "createEdge(node, Branch.UNCOND, computeFollowNode(node));",
      "info" : "ExpressionStatement[17135-17192]:ExpressionStatement[17135-17192]"
    }, {
      "left" : "if (parent != null)",
      "right" : "if (parent != null)",
      "info" : "IfStatement[17228-17678]:IfStatement[17228-17678]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17248-17678]:Block[17248-17678]"
    }, {
      "left" : "switch (parent.getType()) {\n        case Token.DEFAULT:\n        case Token.CASE:\n        case Token.TRY:\n          break;\n        default:\n          if (node.getType() == Token.BLOCK && node.isSyntheticBlock()) {\n            Node next = node.getLastChild();\n            if (next != null) {\n              createEdge(node, Branch.SYN_BLOCK, computeFallThrough(next));\n            }\n          }\n          break;\n      }",
      "right" : "switch (parent.getType()) {\n        case Token.DEFAULT:\n        case Token.CASE:\n        case Token.TRY:\n          break;\n        default:\n          if (node.getType() == Token.BLOCK && node.isSyntheticBlock()) {\n            Node next = node.getLastChild();\n            if (next != null) {\n              createEdge(node, Branch.SYN_BLOCK, computeFallThrough(next));\n            }\n          }\n          break;\n      }",
      "info" : "SwitchStatement[17256-17672]:SwitchStatement[17256-17672]"
    }, {
      "left" : "case Token.DEFAULT:",
      "right" : "case Token.DEFAULT:",
      "info" : "SwitchCase[17292-17311]:SwitchCase[17292-17311]"
    }, {
      "left" : "case Token.CASE:",
      "right" : "case Token.CASE:",
      "info" : "SwitchCase[17320-17336]:SwitchCase[17320-17336]"
    }, {
      "left" : "case Token.TRY:",
      "right" : "case Token.TRY:",
      "info" : "SwitchCase[17345-17360]:SwitchCase[17345-17360]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[17371-17377]:BreakStatement[17371-17377]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[17386-17394]:SwitchCase[17386-17394]"
    }, {
      "left" : "if (node.getType() == Token.BLOCK && node.isSyntheticBlock())",
      "right" : "if (node.getType() == Token.BLOCK && node.isSyntheticBlock())",
      "info" : "IfStatement[17405-17647]:IfStatement[17405-17647]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17467-17647]:Block[17467-17647]"
    }, {
      "left" : "Node next = node.getLastChild();",
      "right" : "Node next = node.getLastChild();",
      "info" : "VariableDeclarationStatement[17481-17513]:VariableDeclarationStatement[17481-17513]"
    }, {
      "left" : "if (next != null)",
      "right" : "if (next != null)",
      "info" : "IfStatement[17526-17635]:IfStatement[17526-17635]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17544-17635]:Block[17544-17635]"
    }, {
      "left" : "createEdge(node, Branch.SYN_BLOCK, computeFallThrough(next));",
      "right" : "createEdge(node, Branch.SYN_BLOCK, computeFallThrough(next));",
      "info" : "ExpressionStatement[17560-17621]:ExpressionStatement[17560-17621]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[17658-17664]:BreakStatement[17658-17664]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[17686-17693]:Modifier[17686-17693]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[17694-17698]:PrimitiveType[17694-17698]"
    }, {
      "left" : "handleFunction",
      "right" : "handleFunction",
      "info" : "SimpleName[17699-17713]:SimpleName[17699-17713]"
    }, {
      "left" : "Node node",
      "right" : "Node node",
      "info" : "SingleVariableDeclaration[17714-17723]:SingleVariableDeclaration[17714-17723]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17725-18056]:Block[17725-18056]"
    }, {
      "left" : "Preconditions.checkState(node.getChildCount() >= 3);",
      "right" : "Preconditions.checkState(node.getChildCount() >= 3);",
      "info" : "ExpressionStatement[17802-17854]:ExpressionStatement[17802-17854]"
    }, {
      "left" : "createEdge(node, Branch.UNCOND,\n        computeFallThrough(node.getFirstChild().getNext().getNext()));",
      "right" : "createEdge(node, Branch.UNCOND,\n        computeFallThrough(node.getFirstChild().getNext().getNext()));",
      "info" : "ExpressionStatement[17859-17961]:ExpressionStatement[17859-17961]"
    }, {
      "left" : "Preconditions.checkState(exceptionHandler.peek() == node);",
      "right" : "Preconditions.checkState(exceptionHandler.peek() == node);",
      "info" : "ExpressionStatement[17966-18024]:ExpressionStatement[17966-18024]"
    }, {
      "left" : "exceptionHandler.pop();",
      "right" : "exceptionHandler.pop();",
      "info" : "ExpressionStatement[18029-18052]:ExpressionStatement[18029-18052]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[18060-18067]:Modifier[18060-18067]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[18068-18072]:PrimitiveType[18068-18072]"
    }, {
      "left" : "handleExpr",
      "right" : "handleExpr",
      "info" : "SimpleName[18073-18083]:SimpleName[18073-18083]"
    }, {
      "left" : "Node node",
      "right" : "Node node",
      "info" : "SingleVariableDeclaration[18084-18093]:SingleVariableDeclaration[18084-18093]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18095-18213]:Block[18095-18213]"
    }, {
      "left" : "createEdge(node, Branch.UNCOND, computeFollowNode(node));",
      "right" : "createEdge(node, Branch.UNCOND, computeFollowNode(node));",
      "info" : "ExpressionStatement[18101-18158]:ExpressionStatement[18101-18158]"
    }, {
      "left" : "connectToPossibleExceptionHandler(node, node);",
      "right" : "connectToPossibleExceptionHandler(node, node);",
      "info" : "ExpressionStatement[18163-18209]:ExpressionStatement[18163-18209]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[18217-18224]:Modifier[18217-18224]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[18225-18229]:PrimitiveType[18225-18229]"
    }, {
      "left" : "handleThrow",
      "right" : "handleThrow",
      "info" : "SimpleName[18230-18241]:SimpleName[18230-18241]"
    }, {
      "left" : "Node node",
      "right" : "Node node",
      "info" : "SingleVariableDeclaration[18242-18251]:SingleVariableDeclaration[18242-18251]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18253-18309]:Block[18253-18309]"
    }, {
      "left" : "connectToPossibleExceptionHandler(node, node);",
      "right" : "connectToPossibleExceptionHandler(node, node);",
      "info" : "ExpressionStatement[18259-18305]:ExpressionStatement[18259-18305]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[18313-18320]:Modifier[18313-18320]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[18321-18325]:PrimitiveType[18321-18325]"
    }, {
      "left" : "handleTry",
      "right" : "handleTry",
      "info" : "SimpleName[18326-18335]:SimpleName[18326-18335]"
    }, {
      "left" : "Node node",
      "right" : "Node node",
      "info" : "SingleVariableDeclaration[18336-18345]:SingleVariableDeclaration[18336-18345]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18347-18411]:Block[18347-18411]"
    }, {
      "left" : "createEdge(node, Branch.UNCOND, node.getFirstChild());",
      "right" : "createEdge(node, Branch.UNCOND, node.getFirstChild());",
      "info" : "ExpressionStatement[18353-18407]:ExpressionStatement[18353-18407]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[18415-18422]:Modifier[18415-18422]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[18423-18427]:PrimitiveType[18423-18427]"
    }, {
      "left" : "handleCatch",
      "right" : "handleCatch",
      "info" : "SimpleName[18428-18439]:SimpleName[18428-18439]"
    }, {
      "left" : "Node node",
      "right" : "Node node",
      "info" : "SingleVariableDeclaration[18440-18449]:SingleVariableDeclaration[18440-18449]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18451-18514]:Block[18451-18514]"
    }, {
      "left" : "createEdge(node, Branch.UNCOND, node.getLastChild());",
      "right" : "createEdge(node, Branch.UNCOND, node.getLastChild());",
      "info" : "ExpressionStatement[18457-18510]:ExpressionStatement[18457-18510]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[18518-18525]:Modifier[18518-18525]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[18526-18530]:PrimitiveType[18526-18530]"
    }, {
      "left" : "handleBreak",
      "right" : "handleBreak",
      "info" : "SimpleName[18531-18542]:SimpleName[18531-18542]"
    }, {
      "left" : "Node node",
      "right" : "Node node",
      "info" : "SingleVariableDeclaration[18543-18552]:SingleVariableDeclaration[18543-18552]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18554-20056]:Block[18554-20056]"
    }, {
      "left" : "String label = null;",
      "right" : "String label = null;",
      "info" : "VariableDeclarationStatement[18560-18580]:VariableDeclarationStatement[18560-18580]"
    }, {
      "left" : "if (node.hasChildren())",
      "right" : "if (node.hasChildren())",
      "info" : "IfStatement[18625-18704]:IfStatement[18625-18704]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18649-18704]:Block[18649-18704]"
    }, {
      "left" : "label = node.getFirstChild().getString();",
      "right" : "label = node.getFirstChild().getString();",
      "info" : "ExpressionStatement[18657-18698]:ExpressionStatement[18657-18698]"
    }, {
      "left" : "Node cur;",
      "right" : "Node cur;",
      "info" : "VariableDeclarationStatement[18709-18718]:VariableDeclarationStatement[18709-18718]"
    }, {
      "left" : "Node lastJump;",
      "right" : "Node lastJump;",
      "info" : "VariableDeclarationStatement[18723-18737]:VariableDeclarationStatement[18723-18737]"
    }, {
      "left" : "Node parent = node.getParent();",
      "right" : "Node parent = node.getParent();",
      "info" : "VariableDeclarationStatement[18742-18773]:VariableDeclarationStatement[18742-18773]"
    }, {
      "left" : "for (cur = node, lastJump = node;\n        !isBreakTarget(cur, parent, label);\n        cur = parent, parent = parent.getParent())",
      "right" : "for (cur = node, lastJump = node;\n        !isBreakTarget(cur, parent, label);\n        cur = parent, parent = parent.getParent())",
      "info" : "ForStatement[19332-19882]:ForStatement[19332-19882]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19461-19882]:Block[19461-19882]"
    }, {
      "left" : "if (cur.getType() == Token.TRY && NodeUtil.hasFinally(cur))",
      "right" : "if (cur.getType() == Token.TRY && NodeUtil.hasFinally(cur))",
      "info" : "IfStatement[19469-19799]:IfStatement[19469-19799]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19529-19799]:Block[19529-19799]"
    }, {
      "left" : "if (lastJump == node)",
      "right" : "if (lastJump == node)",
      "info" : "IfStatement[19539-19767]:IfStatement[19539-19767]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19561-19674]:Block[19561-19674]"
    }, {
      "left" : "createEdge(lastJump, Branch.UNCOND, computeFallThrough(\n              cur.getLastChild()));",
      "right" : "createEdge(lastJump, Branch.UNCOND, computeFallThrough(\n              cur.getLastChild()));",
      "info" : "ExpressionStatement[19573-19664]:ExpressionStatement[19573-19664]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19680-19767]:Block[19680-19767]"
    }, {
      "left" : "finallyMap.put(lastJump, computeFallThrough(cur.getLastChild()));",
      "right" : "finallyMap.put(lastJump, computeFallThrough(cur.getLastChild()));",
      "info" : "ExpressionStatement[19692-19757]:ExpressionStatement[19692-19757]"
    }, {
      "left" : "lastJump = cur;",
      "right" : "lastJump = cur;",
      "info" : "ExpressionStatement[19776-19791]:ExpressionStatement[19776-19791]"
    }, {
      "left" : "Preconditions.checkState(parent != null, \"Cannot find break target.\");",
      "right" : "Preconditions.checkState(parent != null, \"Cannot find break target.\");",
      "info" : "ExpressionStatement[19806-19876]:ExpressionStatement[19806-19876]"
    }, {
      "left" : "if (lastJump == node)",
      "right" : "if (lastJump == node)",
      "info" : "IfStatement[19887-20052]:IfStatement[19887-20052]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19909-19983]:Block[19909-19983]"
    }, {
      "left" : "createEdge(lastJump, Branch.UNCOND, computeFollowNode(cur));",
      "right" : "createEdge(lastJump, Branch.UNCOND, computeFollowNode(cur));",
      "info" : "ExpressionStatement[19917-19977]:ExpressionStatement[19917-19977]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19989-20052]:Block[19989-20052]"
    }, {
      "left" : "finallyMap.put(lastJump, computeFollowNode(cur));",
      "right" : "finallyMap.put(lastJump, computeFollowNode(cur));",
      "info" : "ExpressionStatement[19997-20046]:ExpressionStatement[19997-20046]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[20060-20067]:Modifier[20060-20067]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[20068-20072]:PrimitiveType[20068-20072]"
    }, {
      "left" : "handleContinue",
      "right" : "handleContinue",
      "info" : "SimpleName[20073-20087]:SimpleName[20073-20087]"
    }, {
      "left" : "Node node",
      "right" : "Node node",
      "info" : "SingleVariableDeclaration[20088-20097]:SingleVariableDeclaration[20088-20097]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20099-21120]:Block[20099-21120]"
    }, {
      "left" : "String label = null;",
      "right" : "String label = null;",
      "info" : "VariableDeclarationStatement[20105-20125]:VariableDeclarationStatement[20105-20125]"
    }, {
      "left" : "if (node.hasChildren())",
      "right" : "if (node.hasChildren())",
      "info" : "IfStatement[20130-20209]:IfStatement[20130-20209]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20154-20209]:Block[20154-20209]"
    }, {
      "left" : "label = node.getFirstChild().getString();",
      "right" : "label = node.getFirstChild().getString();",
      "info" : "ExpressionStatement[20162-20203]:ExpressionStatement[20162-20203]"
    }, {
      "left" : "Node cur;",
      "right" : "Node cur;",
      "info" : "VariableDeclarationStatement[20214-20223]:VariableDeclarationStatement[20214-20223]"
    }, {
      "left" : "Node lastJump;",
      "right" : "Node lastJump;",
      "info" : "VariableDeclarationStatement[20228-20242]:VariableDeclarationStatement[20228-20242]"
    }, {
      "left" : "Node parent = node.getParent();",
      "right" : "Node parent = node.getParent();",
      "info" : "VariableDeclarationStatement[20311-20342]:VariableDeclarationStatement[20311-20342]"
    }, {
      "left" : "for (cur = node, lastJump = node;\n        !isContinueTarget(cur, parent, label);\n        cur = parent, parent = parent.getParent())",
      "right" : "for (cur = node, lastJump = node;\n        !isContinueTarget(cur, parent, label);\n        cur = parent, parent = parent.getParent())",
      "info" : "ForStatement[20347-20868]:ForStatement[20347-20868]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20479-20868]:Block[20479-20868]"
    }, {
      "left" : "if (cur.getType() == Token.TRY && NodeUtil.hasFinally(cur))",
      "right" : "if (cur.getType() == Token.TRY && NodeUtil.hasFinally(cur))",
      "info" : "IfStatement[20487-20782]:IfStatement[20487-20782]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20547-20782]:Block[20547-20782]"
    }, {
      "left" : "if (lastJump == node)",
      "right" : "if (lastJump == node)",
      "info" : "IfStatement[20557-20750]:IfStatement[20557-20750]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20579-20657]:Block[20579-20657]"
    }, {
      "left" : "createEdge(lastJump, Branch.UNCOND, cur.getLastChild());",
      "right" : "createEdge(lastJump, Branch.UNCOND, cur.getLastChild());",
      "info" : "ExpressionStatement[20591-20647]:ExpressionStatement[20591-20647]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20663-20750]:Block[20663-20750]"
    }, {
      "left" : "finallyMap.put(lastJump, computeFallThrough(cur.getLastChild()));",
      "right" : "finallyMap.put(lastJump, computeFallThrough(cur.getLastChild()));",
      "info" : "ExpressionStatement[20675-20740]:ExpressionStatement[20675-20740]"
    }, {
      "left" : "lastJump = cur;",
      "right" : "lastJump = cur;",
      "info" : "ExpressionStatement[20759-20774]:ExpressionStatement[20759-20774]"
    }, {
      "left" : "Preconditions.checkState(parent != null, \"Cannot find continue target.\");",
      "right" : "Preconditions.checkState(parent != null, \"Cannot find continue target.\");",
      "info" : "ExpressionStatement[20789-20862]:ExpressionStatement[20789-20862]"
    }, {
      "left" : "Node iter = cur;",
      "right" : "Node iter = cur;",
      "info" : "VariableDeclarationStatement[20873-20889]:VariableDeclarationStatement[20873-20889]"
    }, {
      "left" : "if (cur.getChildCount() == 4)",
      "right" : "if (cur.getChildCount() == 4)",
      "info" : "IfStatement[20894-20985]:IfStatement[20894-20985]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20924-20985]:Block[20924-20985]"
    }, {
      "left" : "iter = cur.getFirstChild().getNext().getNext();",
      "right" : "iter = cur.getFirstChild().getNext().getNext();",
      "info" : "ExpressionStatement[20932-20979]:ExpressionStatement[20932-20979]"
    }, {
      "left" : "if (lastJump == node)",
      "right" : "if (lastJump == node)",
      "info" : "IfStatement[20991-21116]:IfStatement[20991-21116]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21013-21065]:Block[21013-21065]"
    }, {
      "left" : "createEdge(node, Branch.UNCOND, iter);",
      "right" : "createEdge(node, Branch.UNCOND, iter);",
      "info" : "ExpressionStatement[21021-21059]:ExpressionStatement[21021-21059]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21071-21116]:Block[21071-21116]"
    }, {
      "left" : "finallyMap.put(lastJump, iter);",
      "right" : "finallyMap.put(lastJump, iter);",
      "info" : "ExpressionStatement[21079-21110]:ExpressionStatement[21079-21110]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[21124-21131]:Modifier[21124-21131]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[21132-21136]:PrimitiveType[21132-21136]"
    }, {
      "left" : "handleReturn",
      "right" : "handleReturn",
      "info" : "SimpleName[21137-21149]:SimpleName[21137-21149]"
    }, {
      "left" : "Node node",
      "right" : "Node node",
      "info" : "SingleVariableDeclaration[21150-21159]:SingleVariableDeclaration[21150-21159]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21161-21929]:Block[21161-21929]"
    }, {
      "left" : "Node lastJump = null;",
      "right" : "Node lastJump = null;",
      "info" : "VariableDeclarationStatement[21167-21188]:VariableDeclarationStatement[21167-21188]"
    }, {
      "left" : "for (Iterator<Node> iter = exceptionHandler.iterator(); iter.hasNext())",
      "right" : "for (Iterator<Node> iter = exceptionHandler.iterator(); iter.hasNext())",
      "info" : "ForStatement[21193-21688]:ForStatement[21193-21688]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21266-21688]:Block[21266-21688]"
    }, {
      "left" : "Node curHandler = iter.next();",
      "right" : "Node curHandler = iter.next();",
      "info" : "VariableDeclarationStatement[21274-21304]:VariableDeclarationStatement[21274-21304]"
    }, {
      "left" : "if (NodeUtil.isFunction(curHandler))",
      "right" : "if (NodeUtil.isFunction(curHandler))",
      "info" : "IfStatement[21311-21372]:IfStatement[21311-21372]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21348-21372]:Block[21348-21372]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[21358-21364]:BreakStatement[21358-21364]"
    }, {
      "left" : "if (NodeUtil.hasFinally(curHandler))",
      "right" : "if (NodeUtil.hasFinally(curHandler))",
      "info" : "IfStatement[21379-21682]:IfStatement[21379-21682]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21416-21682]:Block[21416-21682]"
    }, {
      "left" : "if (lastJump == null)",
      "right" : "if (lastJump == null)",
      "info" : "IfStatement[21426-21643]:IfStatement[21426-21643]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21448-21529]:Block[21448-21529]"
    }, {
      "left" : "createEdge(node, Branch.UNCOND, curHandler.getLastChild());",
      "right" : "createEdge(node, Branch.UNCOND, curHandler.getLastChild());",
      "info" : "ExpressionStatement[21460-21519]:ExpressionStatement[21460-21519]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21535-21643]:Block[21535-21643]"
    }, {
      "left" : "finallyMap.put(lastJump,\n              computeFallThrough(curHandler.getLastChild()));",
      "right" : "finallyMap.put(lastJump,\n              computeFallThrough(curHandler.getLastChild()));",
      "info" : "ExpressionStatement[21547-21633]:ExpressionStatement[21547-21633]"
    }, {
      "left" : "lastJump = curHandler;",
      "right" : "lastJump = curHandler;",
      "info" : "ExpressionStatement[21652-21674]:ExpressionStatement[21652-21674]"
    }, {
      "left" : "if (node.hasChildren())",
      "right" : "if (node.hasChildren())",
      "info" : "IfStatement[21694-21794]:IfStatement[21694-21794]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21718-21794]:Block[21718-21794]"
    }, {
      "left" : "connectToPossibleExceptionHandler(node, node.getFirstChild());",
      "right" : "connectToPossibleExceptionHandler(node, node.getFirstChild());",
      "info" : "ExpressionStatement[21726-21788]:ExpressionStatement[21726-21788]"
    }, {
      "left" : "if (lastJump == null)",
      "right" : "if (lastJump == null)",
      "info" : "IfStatement[21800-21925]:IfStatement[21800-21925]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21822-21874]:Block[21822-21874]"
    }, {
      "left" : "createEdge(node, Branch.UNCOND, null);",
      "right" : "createEdge(node, Branch.UNCOND, null);",
      "info" : "ExpressionStatement[21830-21868]:ExpressionStatement[21830-21868]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21880-21925]:Block[21880-21925]"
    }, {
      "left" : "finallyMap.put(lastJump, null);",
      "right" : "finallyMap.put(lastJump, null);",
      "info" : "ExpressionStatement[21888-21919]:ExpressionStatement[21888-21919]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[21933-21940]:Modifier[21933-21940]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[21941-21945]:PrimitiveType[21941-21945]"
    }, {
      "left" : "handleStmt",
      "right" : "handleStmt",
      "info" : "SimpleName[21946-21956]:SimpleName[21946-21956]"
    }, {
      "left" : "Node node",
      "right" : "Node node",
      "info" : "SingleVariableDeclaration[21957-21966]:SingleVariableDeclaration[21957-21966]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21968-22127]:Block[21968-22127]"
    }, {
      "left" : "createEdge(node, Branch.UNCOND, computeFollowNode(node));",
      "right" : "createEdge(node, Branch.UNCOND, computeFollowNode(node));",
      "info" : "ExpressionStatement[22015-22072]:ExpressionStatement[22015-22072]"
    }, {
      "left" : "connectToPossibleExceptionHandler(node, node);",
      "right" : "connectToPossibleExceptionHandler(node, node);",
      "info" : "ExpressionStatement[22077-22123]:ExpressionStatement[22077-22123]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[22131-22138]:Modifier[22131-22138]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[22139-22143]:SimpleType[22139-22143]"
    }, {
      "left" : "computeFollowNode",
      "right" : "computeFollowNode",
      "info" : "SimpleName[22144-22161]:SimpleName[22144-22161]"
    }, {
      "left" : "Node node",
      "right" : "Node node",
      "info" : "SingleVariableDeclaration[22162-22171]:SingleVariableDeclaration[22162-22171]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22173-22220]:Block[22173-22220]"
    }, {
      "left" : "return computeFollowNode(node, node);",
      "right" : "return computeFollowNode(node, node);",
      "info" : "ReturnStatement[22179-22216]:ReturnStatement[22179-22216]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[22678-22685]:Modifier[22678-22685]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[22686-22690]:SimpleType[22686-22690]"
    }, {
      "left" : "computeFollowNode",
      "right" : "computeFollowNode",
      "info" : "SimpleName[22691-22708]:SimpleName[22691-22708]"
    }, {
      "left" : "Node fromNode",
      "right" : "Node fromNode",
      "info" : "SingleVariableDeclaration[22709-22722]:SingleVariableDeclaration[22709-22722]"
    }, {
      "left" : "Node node",
      "right" : "Node node",
      "info" : "SingleVariableDeclaration[22724-22733]:SingleVariableDeclaration[22724-22733]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22735-26222]:Block[22735-26222]"
    }, {
      "left" : "Node parent = node.getParent();",
      "right" : "Node parent = node.getParent();",
      "info" : "VariableDeclarationStatement[23382-23413]:VariableDeclarationStatement[23382-23413]"
    }, {
      "left" : "if (parent == null || parent.getType() == Token.FUNCTION || node == root)",
      "right" : "if (parent == null || parent.getType() == Token.FUNCTION || node == root)",
      "info" : "IfStatement[23418-23518]:IfStatement[23418-23518]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23492-23518]:Block[23492-23518]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[23500-23512]:ReturnStatement[23500-23512]"
    }, {
      "left" : "switch (parent.getType()) {\n      // The follow() of any of the path from IF would be what follows IF.\n      case Token.IF:\n        return computeFollowNode(fromNode, parent);\n      case Token.CASE:\n      case Token.DEFAULT:\n        // After the body of a CASE, the control goes to the body of the next\n        // case, without having to go to the case condition.\n        if (parent.getNext() != null) {\n          if (parent.getNext().getType() == Token.CASE) {\n            return parent.getNext().getFirstChild().getNext();\n          } else if (parent.getNext().getType() == Token.DEFAULT) {\n            return parent.getNext().getFirstChild();\n          } else {\n            Preconditions.checkState(false, \"Not reachable\");\n          }\n        } else {\n          return computeFollowNode(fromNode, parent);\n        }\n        break;\n      case Token.FOR:\n        if (NodeUtil.isForIn(parent)) {\n          return parent;\n        } else {\n          return parent.getFirstChild().getNext().getNext();\n        }\n      case Token.WHILE:\n      case Token.DO:\n        return parent;\n      case Token.TRY:\n        // If we are coming out of the TRY block...\n        if (parent.getFirstChild() == node) {\n          if (NodeUtil.hasFinally(parent)) { // and have FINALLY block.\n            return computeFallThrough(parent.getLastChild());\n          } else { // and have no FINALLY.\n            return computeFollowNode(fromNode, parent);\n          }\n        // CATCH block.\n        } else if (NodeUtil.getCatchBlock(parent) == node){\n          if (NodeUtil.hasFinally(parent)) { // and have FINALLY block.\n            return computeFallThrough(node.getNext());\n          } else {\n            return computeFollowNode(fromNode, parent);\n          }\n        // If we are coming out of the FINALLY block...\n        } else if (parent.getLastChild() == node){\n          for (Node finallyNode : finallyMap.get(parent)) {\n            createEdge(fromNode, Branch.UNCOND, finallyNode);\n          }\n          return computeFollowNode(fromNode, parent);\n        }\n    }",
      "right" : "switch (parent.getType()) {\n      // The follow() of any of the path from IF would be what follows IF.\n      case Token.IF:\n        return computeFollowNode(fromNode, parent);\n      case Token.CASE:\n      case Token.DEFAULT:\n        // After the body of a CASE, the control goes to the body of the next\n        // case, without having to go to the case condition.\n        if (parent.getNext() != null) {\n          if (parent.getNext().getType() == Token.CASE) {\n            return parent.getNext().getFirstChild().getNext();\n          } else if (parent.getNext().getType() == Token.DEFAULT) {\n            return parent.getNext().getFirstChild();\n          } else {\n            Preconditions.checkState(false, \"Not reachable\");\n          }\n        } else {\n          return computeFollowNode(fromNode, parent);\n        }\n        break;\n      case Token.FOR:\n        if (NodeUtil.isForIn(parent)) {\n          return parent;\n        } else {\n          return parent.getFirstChild().getNext().getNext();\n        }\n      case Token.WHILE:\n      case Token.DO:\n        return parent;\n      case Token.TRY:\n        // If we are coming out of the TRY block...\n        if (parent.getFirstChild() == node) {\n          if (NodeUtil.hasFinally(parent)) { // and have FINALLY block.\n            return computeFallThrough(parent.getLastChild());\n          } else { // and have no FINALLY.\n            return computeFollowNode(fromNode, parent);\n          }\n        // CATCH block.\n        } else if (NodeUtil.getCatchBlock(parent) == node){\n          if (NodeUtil.hasFinally(parent)) { // and have FINALLY block.\n            return computeFallThrough(node.getNext());\n          } else {\n            return computeFollowNode(fromNode, parent);\n          }\n        // If we are coming out of the FINALLY block...\n        } else if (parent.getLastChild() == node){\n          for (Node finallyNode : finallyMap.get(parent)) {\n            createEdge(fromNode, Branch.UNCOND, finallyNode);\n          }\n          return computeFollowNode(fromNode, parent);\n        }\n    }",
      "info" : "SwitchStatement[23572-25623]:SwitchStatement[23572-25623]"
    }, {
      "left" : "case Token.IF:",
      "right" : "case Token.IF:",
      "info" : "SwitchCase[23681-23695]:SwitchCase[23681-23695]"
    }, {
      "left" : "return computeFollowNode(fromNode, parent);",
      "right" : "return computeFollowNode(fromNode, parent);",
      "info" : "ReturnStatement[23704-23747]:ReturnStatement[23704-23747]"
    }, {
      "left" : "case Token.CASE:",
      "right" : "case Token.CASE:",
      "info" : "SwitchCase[23754-23770]:SwitchCase[23754-23770]"
    }, {
      "left" : "case Token.DEFAULT:",
      "right" : "case Token.DEFAULT:",
      "info" : "SwitchCase[23777-23796]:SwitchCase[23777-23796]"
    }, {
      "left" : "if (parent.getNext() != null)",
      "right" : "if (parent.getNext() != null)",
      "info" : "IfStatement[23944-24391]:IfStatement[23944-24391]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23974-24320]:Block[23974-24320]"
    }, {
      "left" : "if (parent.getNext().getType() == Token.CASE)",
      "right" : "if (parent.getNext().getType() == Token.CASE)",
      "info" : "IfStatement[23986-24310]:IfStatement[23986-24310]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24032-24108]:Block[24032-24108]"
    }, {
      "left" : "return parent.getNext().getFirstChild().getNext();",
      "right" : "return parent.getNext().getFirstChild().getNext();",
      "info" : "ReturnStatement[24046-24096]:ReturnStatement[24046-24096]"
    }, {
      "left" : "if (parent.getNext().getType() == Token.DEFAULT)",
      "right" : "if (parent.getNext().getType() == Token.DEFAULT)",
      "info" : "IfStatement[24114-24310]:IfStatement[24114-24310]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24163-24229]:Block[24163-24229]"
    }, {
      "left" : "return parent.getNext().getFirstChild();",
      "right" : "return parent.getNext().getFirstChild();",
      "info" : "ReturnStatement[24177-24217]:ReturnStatement[24177-24217]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24235-24310]:Block[24235-24310]"
    }, {
      "left" : "Preconditions.checkState(false, \"Not reachable\");",
      "right" : "Preconditions.checkState(false, \"Not reachable\");",
      "info" : "ExpressionStatement[24249-24298]:ExpressionStatement[24249-24298]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24326-24391]:Block[24326-24391]"
    }, {
      "left" : "return computeFollowNode(fromNode, parent);",
      "right" : "return computeFollowNode(fromNode, parent);",
      "info" : "ReturnStatement[24338-24381]:ReturnStatement[24338-24381]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[24400-24406]:BreakStatement[24400-24406]"
    }, {
      "left" : "case Token.FOR:",
      "right" : "case Token.FOR:",
      "info" : "SwitchCase[24413-24428]:SwitchCase[24413-24428]"
    }, {
      "left" : "if (NodeUtil.isForIn(parent))",
      "right" : "if (NodeUtil.isForIn(parent))",
      "info" : "IfStatement[24437-24581]:IfStatement[24437-24581]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24467-24503]:Block[24467-24503]"
    }, {
      "left" : "return parent;",
      "right" : "return parent;",
      "info" : "ReturnStatement[24479-24493]:ReturnStatement[24479-24493]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24509-24581]:Block[24509-24581]"
    }, {
      "left" : "return parent.getFirstChild().getNext().getNext();",
      "right" : "return parent.getFirstChild().getNext().getNext();",
      "info" : "ReturnStatement[24521-24571]:ReturnStatement[24521-24571]"
    }, {
      "left" : "case Token.WHILE:",
      "right" : "case Token.WHILE:",
      "info" : "SwitchCase[24588-24605]:SwitchCase[24588-24605]"
    }, {
      "left" : "case Token.DO:",
      "right" : "case Token.DO:",
      "info" : "SwitchCase[24612-24626]:SwitchCase[24612-24626]"
    }, {
      "left" : "return parent;",
      "right" : "return parent;",
      "info" : "ReturnStatement[24635-24649]:ReturnStatement[24635-24649]"
    }, {
      "left" : "case Token.TRY:",
      "right" : "case Token.TRY:",
      "info" : "SwitchCase[24656-24671]:SwitchCase[24656-24671]"
    }, {
      "left" : "if (parent.getFirstChild() == node)",
      "right" : "if (parent.getFirstChild() == node)",
      "info" : "IfStatement[24732-25617]:IfStatement[24732-25617]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24768-25048]:Block[24768-25048]"
    }, {
      "left" : "if (NodeUtil.hasFinally(parent))",
      "right" : "if (NodeUtil.hasFinally(parent))",
      "info" : "IfStatement[24780-25014]:IfStatement[24780-25014]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24813-24915]:Block[24813-24915]"
    }, {
      "left" : "return computeFallThrough(parent.getLastChild());",
      "right" : "return computeFallThrough(parent.getLastChild());",
      "info" : "ReturnStatement[24854-24903]:ReturnStatement[24854-24903]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24921-25014]:Block[24921-25014]"
    }, {
      "left" : "return computeFollowNode(fromNode, parent);",
      "right" : "return computeFollowNode(fromNode, parent);",
      "info" : "ReturnStatement[24959-25002]:ReturnStatement[24959-25002]"
    }, {
      "left" : "if (NodeUtil.getCatchBlock(parent) == node)",
      "right" : "if (NodeUtil.getCatchBlock(parent) == node)",
      "info" : "IfStatement[25054-25617]:IfStatement[25054-25617]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25097-25378]:Block[25097-25378]"
    }, {
      "left" : "if (NodeUtil.hasFinally(parent))",
      "right" : "if (NodeUtil.hasFinally(parent))",
      "info" : "IfStatement[25109-25312]:IfStatement[25109-25312]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25142-25237]:Block[25142-25237]"
    }, {
      "left" : "return computeFallThrough(node.getNext());",
      "right" : "return computeFallThrough(node.getNext());",
      "info" : "ReturnStatement[25183-25225]:ReturnStatement[25183-25225]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25243-25312]:Block[25243-25312]"
    }, {
      "left" : "return computeFollowNode(fromNode, parent);",
      "right" : "return computeFollowNode(fromNode, parent);",
      "info" : "ReturnStatement[25257-25300]:ReturnStatement[25257-25300]"
    }, {
      "left" : "if (parent.getLastChild() == node)",
      "right" : "if (parent.getLastChild() == node)",
      "info" : "IfStatement[25384-25617]:IfStatement[25384-25617]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25418-25617]:Block[25418-25617]"
    }, {
      "left" : "for (Node finallyNode : finallyMap.get(parent))",
      "right" : "for (Node finallyNode : finallyMap.get(parent))",
      "info" : "EnhancedForStatement[25430-25553]:EnhancedForStatement[25430-25553]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25478-25553]:Block[25478-25553]"
    }, {
      "left" : "createEdge(fromNode, Branch.UNCOND, finallyNode);",
      "right" : "createEdge(fromNode, Branch.UNCOND, finallyNode);",
      "info" : "ExpressionStatement[25492-25541]:ExpressionStatement[25492-25541]"
    }, {
      "left" : "return computeFollowNode(fromNode, parent);",
      "right" : "return computeFollowNode(fromNode, parent);",
      "info" : "ReturnStatement[25564-25607]:ReturnStatement[25564-25607]"
    }, {
      "left" : "Node nextSibling = node.getNext();",
      "right" : "Node nextSibling = node.getNext();",
      "info" : "VariableDeclarationStatement[25760-25794]:VariableDeclarationStatement[25760-25794]"
    }, {
      "left" : "while (nextSibling != null && nextSibling.getType() == Token.FUNCTION)",
      "right" : "while (nextSibling != null && nextSibling.getType() == Token.FUNCTION)",
      "info" : "WhileStatement[25876-25997]:WhileStatement[25876-25997]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25947-25997]:Block[25947-25997]"
    }, {
      "left" : "nextSibling = nextSibling.getNext();",
      "right" : "nextSibling = nextSibling.getNext();",
      "info" : "ExpressionStatement[25955-25991]:ExpressionStatement[25955-25991]"
    }, {
      "left" : "if (nextSibling != null)",
      "right" : "if (nextSibling != null)",
      "info" : "IfStatement[26003-26218]:IfStatement[26003-26218]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26028-26081]:Block[26028-26081]"
    }, {
      "left" : "return computeFallThrough(nextSibling);",
      "right" : "return computeFallThrough(nextSibling);",
      "info" : "ReturnStatement[26036-26075]:ReturnStatement[26036-26075]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26087-26218]:Block[26087-26218]"
    }, {
      "left" : "return computeFollowNode(fromNode, parent);",
      "right" : "return computeFollowNode(fromNode, parent);",
      "info" : "ReturnStatement[26169-26212]:ReturnStatement[26169-26212]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[26411-26418]:Modifier[26411-26418]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[26419-26425]:Modifier[26419-26425]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[26426-26430]:SimpleType[26426-26430]"
    }, {
      "left" : "computeFallThrough",
      "right" : "computeFallThrough",
      "info" : "SimpleName[26431-26449]:SimpleName[26431-26449]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[26450-26456]:SingleVariableDeclaration[26450-26456]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26458-26822]:Block[26458-26822]"
    }, {
      "left" : "switch (n.getType()) {\n      case Token.DO:\n        return computeFallThrough(n.getFirstChild());\n      case Token.FOR:\n        if (NodeUtil.isForIn(n)) {\n          return n;\n        }\n        return computeFallThrough(n.getFirstChild());\n      case Token.LABEL:\n        return computeFallThrough(n.getLastChild());\n      default:\n        return n;\n    }",
      "right" : "switch (n.getType()) {\n      case Token.DO:\n        return computeFallThrough(n.getFirstChild());\n      case Token.FOR:\n        if (NodeUtil.isForIn(n)) {\n          return n;\n        }\n        return computeFallThrough(n.getFirstChild());\n      case Token.LABEL:\n        return computeFallThrough(n.getLastChild());\n      default:\n        return n;\n    }",
      "info" : "SwitchStatement[26464-26818]:SwitchStatement[26464-26818]"
    }, {
      "left" : "case Token.DO:",
      "right" : "case Token.DO:",
      "info" : "SwitchCase[26493-26507]:SwitchCase[26493-26507]"
    }, {
      "left" : "return computeFallThrough(n.getFirstChild());",
      "right" : "return computeFallThrough(n.getFirstChild());",
      "info" : "ReturnStatement[26516-26561]:ReturnStatement[26516-26561]"
    }, {
      "left" : "case Token.FOR:",
      "right" : "case Token.FOR:",
      "info" : "SwitchCase[26568-26583]:SwitchCase[26568-26583]"
    }, {
      "left" : "if (NodeUtil.isForIn(n))",
      "right" : "if (NodeUtil.isForIn(n))",
      "info" : "IfStatement[26592-26648]:IfStatement[26592-26648]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26617-26648]:Block[26617-26648]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[26629-26638]:ReturnStatement[26629-26638]"
    }, {
      "left" : "return computeFallThrough(n.getFirstChild());",
      "right" : "return computeFallThrough(n.getFirstChild());",
      "info" : "ReturnStatement[26657-26702]:ReturnStatement[26657-26702]"
    }, {
      "left" : "case Token.LABEL:",
      "right" : "case Token.LABEL:",
      "info" : "SwitchCase[26709-26726]:SwitchCase[26709-26726]"
    }, {
      "left" : "return computeFallThrough(n.getLastChild());",
      "right" : "return computeFallThrough(n.getLastChild());",
      "info" : "ReturnStatement[26735-26779]:ReturnStatement[26735-26779]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[26786-26794]:SwitchCase[26786-26794]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[26803-26812]:ReturnStatement[26803-26812]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[26959-26966]:Modifier[26959-26966]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[26967-26971]:PrimitiveType[26967-26971]"
    }, {
      "left" : "createEdge",
      "right" : "createEdge",
      "info" : "SimpleName[26972-26982]:SimpleName[26972-26982]"
    }, {
      "left" : "Node fromNode",
      "right" : "Node fromNode",
      "info" : "SingleVariableDeclaration[26983-26996]:SingleVariableDeclaration[26983-26996]"
    }, {
      "left" : "ControlFlowGraph.Branch branch",
      "right" : "ControlFlowGraph.Branch branch",
      "info" : "SingleVariableDeclaration[26998-27028]:SingleVariableDeclaration[26998-27028]"
    }, {
      "left" : "Node toNode",
      "right" : "Node toNode",
      "info" : "SingleVariableDeclaration[27036-27047]:SingleVariableDeclaration[27036-27047]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27049-27165]:Block[27049-27165]"
    }, {
      "left" : "cfg.createNode(fromNode);",
      "right" : "cfg.createNode(fromNode);",
      "info" : "ExpressionStatement[27055-27080]:ExpressionStatement[27055-27080]"
    }, {
      "left" : "cfg.createNode(toNode);",
      "right" : "cfg.createNode(toNode);",
      "info" : "ExpressionStatement[27085-27108]:ExpressionStatement[27085-27108]"
    }, {
      "left" : "cfg.connectIfNotFound(fromNode, branch, toNode);",
      "right" : "cfg.connectIfNotFound(fromNode, branch, toNode);",
      "info" : "ExpressionStatement[27113-27161]:ExpressionStatement[27113-27161]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[27387-27394]:Modifier[27387-27394]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[27395-27399]:PrimitiveType[27395-27399]"
    }, {
      "left" : "connectToPossibleExceptionHandler",
      "right" : "connectToPossibleExceptionHandler",
      "info" : "SimpleName[27400-27433]:SimpleName[27400-27433]"
    }, {
      "left" : "Node cfgNode",
      "right" : "Node cfgNode",
      "info" : "SingleVariableDeclaration[27434-27446]:SingleVariableDeclaration[27434-27446]"
    }, {
      "left" : "Node target",
      "right" : "Node target",
      "info" : "SingleVariableDeclaration[27448-27459]:SingleVariableDeclaration[27448-27459]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27461-28372]:Block[27461-28372]"
    }, {
      "left" : "if (mayThrowException(target) && !exceptionHandler.isEmpty())",
      "right" : "if (mayThrowException(target) && !exceptionHandler.isEmpty())",
      "info" : "IfStatement[27467-28368]:IfStatement[27467-28368]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27529-28368]:Block[27529-28368]"
    }, {
      "left" : "Node lastJump = cfgNode;",
      "right" : "Node lastJump = cfgNode;",
      "info" : "VariableDeclarationStatement[27537-27561]:VariableDeclarationStatement[27537-27561]"
    }, {
      "left" : "for (Node handler : exceptionHandler)",
      "right" : "for (Node handler : exceptionHandler)",
      "info" : "EnhancedForStatement[27568-28362]:EnhancedForStatement[27568-28362]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27606-28362]:Block[27606-28362]"
    }, {
      "left" : "if (NodeUtil.isFunction(handler))",
      "right" : "if (NodeUtil.isFunction(handler))",
      "info" : "IfStatement[27616-27679]:IfStatement[27616-27679]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27650-27679]:Block[27650-27679]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[27662-27669]:ReturnStatement[27662-27669]"
    }, {
      "left" : "Preconditions.checkState(handler.getType() == Token.TRY);",
      "right" : "Preconditions.checkState(handler.getType() == Token.TRY);",
      "info" : "ExpressionStatement[27688-27745]:ExpressionStatement[27688-27745]"
    }, {
      "left" : "Node catchBlock = NodeUtil.getCatchBlock(handler);",
      "right" : "Node catchBlock = NodeUtil.getCatchBlock(handler);",
      "info" : "VariableDeclarationStatement[27754-27804]:VariableDeclarationStatement[27754-27804]"
    }, {
      "left" : "if (!NodeUtil.hasCatchHandler(catchBlock))",
      "right" : "if (!NodeUtil.hasCatchHandler(catchBlock))",
      "info" : "IfStatement[27814-28326]:IfStatement[27814-28326]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27857-28096]:Block[27857-28096]"
    }, {
      "left" : "if (lastJump == cfgNode)",
      "right" : "if (lastJump == cfgNode)",
      "info" : "IfStatement[27896-28086]:IfStatement[27896-28086]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27921-28005]:Block[27921-28005]"
    }, {
      "left" : "createEdge(cfgNode, Branch.ON_EX, handler.getLastChild());",
      "right" : "createEdge(cfgNode, Branch.ON_EX, handler.getLastChild());",
      "info" : "ExpressionStatement[27935-27993]:ExpressionStatement[27935-27993]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28011-28086]:Block[28011-28086]"
    }, {
      "left" : "finallyMap.put(lastJump, handler.getLastChild());",
      "right" : "finallyMap.put(lastJump, handler.getLastChild());",
      "info" : "ExpressionStatement[28025-28074]:ExpressionStatement[28025-28074]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28102-28326]:Block[28102-28326]"
    }, {
      "left" : "if (lastJump == cfgNode)",
      "right" : "if (lastJump == cfgNode)",
      "info" : "IfStatement[28130-28316]:IfStatement[28130-28316]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28155-28247]:Block[28155-28247]"
    }, {
      "left" : "createEdge(cfgNode, Branch.ON_EX, catchBlock);",
      "right" : "createEdge(cfgNode, Branch.ON_EX, catchBlock);",
      "info" : "ExpressionStatement[28169-28215]:ExpressionStatement[28169-28215]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[28228-28235]:ReturnStatement[28228-28235]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28253-28316]:Block[28253-28316]"
    }, {
      "left" : "finallyMap.put(lastJump, catchBlock);",
      "right" : "finallyMap.put(lastJump, catchBlock);",
      "info" : "ExpressionStatement[28267-28304]:ExpressionStatement[28267-28304]"
    }, {
      "left" : "lastJump = handler;",
      "right" : "lastJump = handler;",
      "info" : "ExpressionStatement[28335-28354]:ExpressionStatement[28335-28354]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[28460-28467]:Modifier[28460-28467]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[28468-28474]:Modifier[28468-28474]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[28475-28479]:SimpleType[28475-28479]"
    }, {
      "left" : "getNextSiblingOfType",
      "right" : "getNextSiblingOfType",
      "info" : "SimpleName[28480-28500]:SimpleName[28480-28500]"
    }, {
      "left" : "Node first",
      "right" : "Node first",
      "info" : "SingleVariableDeclaration[28501-28511]:SingleVariableDeclaration[28501-28511]"
    }, {
      "left" : "int ... types",
      "right" : "int ... types",
      "info" : "SingleVariableDeclaration[28513-28526]:SingleVariableDeclaration[28513-28526]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28528-28715]:Block[28528-28715]"
    }, {
      "left" : "for (Node c = first; c != null; c = c.getNext())",
      "right" : "for (Node c = first; c != null; c = c.getNext())",
      "info" : "ForStatement[28534-28694]:ForStatement[28534-28694]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28583-28694]:Block[28583-28694]"
    }, {
      "left" : "for (int type : types)",
      "right" : "for (int type : types)",
      "info" : "EnhancedForStatement[28591-28688]:EnhancedForStatement[28591-28688]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28614-28688]:Block[28614-28688]"
    }, {
      "left" : "if (c.getType() == type)",
      "right" : "if (c.getType() == type)",
      "info" : "IfStatement[28624-28680]:IfStatement[28624-28680]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28649-28680]:Block[28649-28680]"
    }, {
      "left" : "return c;",
      "right" : "return c;",
      "info" : "ReturnStatement[28661-28670]:ReturnStatement[28661-28670]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[28699-28711]:ReturnStatement[28699-28711]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[28859-28866]:Modifier[28859-28866]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[28867-28873]:Modifier[28867-28873]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[28874-28881]:PrimitiveType[28874-28881]"
    }, {
      "left" : "isBreakTarget",
      "right" : "isBreakTarget",
      "info" : "SimpleName[28882-28895]:SimpleName[28882-28895]"
    }, {
      "left" : "Node target",
      "right" : "Node target",
      "info" : "SingleVariableDeclaration[28903-28914]:SingleVariableDeclaration[28903-28914]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[28916-28927]:SingleVariableDeclaration[28916-28927]"
    }, {
      "left" : "String label",
      "right" : "String label",
      "info" : "SingleVariableDeclaration[28929-28941]:SingleVariableDeclaration[28929-28941]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28943-29029]:Block[28943-29029]"
    }, {
      "left" : "return isBreakStructure(target, label != null) && matchLabel(parent, label);",
      "right" : "return isBreakStructure(target, label != null) && matchLabel(parent, label);",
      "info" : "ReturnStatement[28949-29025]:ReturnStatement[28949-29025]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[29179-29186]:Modifier[29179-29186]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[29187-29193]:Modifier[29187-29193]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[29194-29201]:PrimitiveType[29194-29201]"
    }, {
      "left" : "isContinueTarget",
      "right" : "isContinueTarget",
      "info" : "SimpleName[29202-29218]:SimpleName[29202-29218]"
    }, {
      "left" : "Node target",
      "right" : "Node target",
      "info" : "SingleVariableDeclaration[29226-29237]:SingleVariableDeclaration[29226-29237]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[29239-29250]:SingleVariableDeclaration[29239-29250]"
    }, {
      "left" : "String label",
      "right" : "String label",
      "info" : "SingleVariableDeclaration[29252-29264]:SingleVariableDeclaration[29252-29264]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29266-29340]:Block[29266-29340]"
    }, {
      "left" : "return isContinueStructure(target) && matchLabel(parent, label);",
      "right" : "return isContinueStructure(target) && matchLabel(parent, label);",
      "info" : "ReturnStatement[29272-29336]:ReturnStatement[29272-29336]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[29476-29483]:Modifier[29476-29483]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[29484-29490]:Modifier[29484-29490]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[29491-29498]:PrimitiveType[29491-29498]"
    }, {
      "left" : "matchLabel",
      "right" : "matchLabel",
      "info" : "SimpleName[29499-29509]:SimpleName[29499-29509]"
    }, {
      "left" : "Node target",
      "right" : "Node target",
      "info" : "SingleVariableDeclaration[29510-29521]:SingleVariableDeclaration[29510-29521]"
    }, {
      "left" : "String label",
      "right" : "String label",
      "info" : "SingleVariableDeclaration[29523-29535]:SingleVariableDeclaration[29523-29535]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29537-29788]:Block[29537-29788]"
    }, {
      "left" : "if (label == null)",
      "right" : "if (label == null)",
      "info" : "IfStatement[29543-29588]:IfStatement[29543-29588]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29562-29588]:Block[29562-29588]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[29570-29582]:ReturnStatement[29570-29582]"
    }, {
      "left" : "while (target.getType() == Token.LABEL)",
      "right" : "while (target.getType() == Token.LABEL)",
      "info" : "WhileStatement[29593-29766]:WhileStatement[29593-29766]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29633-29766]:Block[29633-29766]"
    }, {
      "left" : "if (target.getFirstChild().getString().equals(label))",
      "right" : "if (target.getFirstChild().getString().equals(label))",
      "info" : "IfStatement[29641-29725]:IfStatement[29641-29725]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29695-29725]:Block[29695-29725]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[29705-29717]:ReturnStatement[29705-29717]"
    }, {
      "left" : "target = target.getParent();",
      "right" : "target = target.getParent();",
      "info" : "ExpressionStatement[29732-29760]:ExpressionStatement[29732-29760]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[29771-29784]:ReturnStatement[29771-29784]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[29861-29868]:Modifier[29861-29868]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[29869-29875]:Modifier[29869-29875]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[29876-29883]:PrimitiveType[29876-29883]"
    }, {
      "left" : "mayThrowException",
      "right" : "mayThrowException",
      "info" : "SimpleName[29884-29901]:SimpleName[29884-29901]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[29902-29908]:SingleVariableDeclaration[29902-29908]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29910-30407]:Block[29910-30436]"
    }, {
      "left" : "switch (n.getType()) {\n      case Token.CALL:\n      case Token.GETPROP:\n      case Token.GETELEM:\n      case Token.THROW:\n      case Token.NEW:\n      case Token.ASSIGN:\n      case Token.INC:\n      case Token.DEC:\n        return true;\n      case Token.FUNCTION:\n        return false;\n    }",
      "right" : "switch (n.getType()) {\n      case Token.CALL:\n      case Token.GETPROP:\n      case Token.GETELEM:\n      case Token.THROW:\n      case Token.NEW:\n      case Token.ASSIGN:\n      case Token.INC:\n      case Token.DEC:\n      case Token.INSTANCEOF:\n        return true;\n      case Token.FUNCTION:\n        return false;\n    }",
      "info" : "SwitchStatement[29916-30204]:SwitchStatement[29916-30233]"
    }, {
      "left" : "case Token.CALL:",
      "right" : "case Token.CALL:",
      "info" : "SwitchCase[29945-29961]:SwitchCase[29945-29961]"
    }, {
      "left" : "case Token.GETPROP:",
      "right" : "case Token.GETPROP:",
      "info" : "SwitchCase[29968-29987]:SwitchCase[29968-29987]"
    }, {
      "left" : "case Token.GETELEM:",
      "right" : "case Token.GETELEM:",
      "info" : "SwitchCase[29994-30013]:SwitchCase[29994-30013]"
    }, {
      "left" : "case Token.THROW:",
      "right" : "case Token.THROW:",
      "info" : "SwitchCase[30020-30037]:SwitchCase[30020-30037]"
    }, {
      "left" : "case Token.NEW:",
      "right" : "case Token.NEW:",
      "info" : "SwitchCase[30044-30059]:SwitchCase[30044-30059]"
    }, {
      "left" : "case Token.ASSIGN:",
      "right" : "case Token.ASSIGN:",
      "info" : "SwitchCase[30066-30084]:SwitchCase[30066-30084]"
    }, {
      "left" : "case Token.INC:",
      "right" : "case Token.INC:",
      "info" : "SwitchCase[30091-30106]:SwitchCase[30091-30106]"
    }, {
      "left" : "case Token.DEC:",
      "right" : "case Token.DEC:",
      "info" : "SwitchCase[30113-30128]:SwitchCase[30113-30128]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[30137-30149]:ReturnStatement[30166-30178]"
    }, {
      "left" : "case Token.FUNCTION:",
      "right" : "case Token.FUNCTION:",
      "info" : "SwitchCase[30156-30176]:SwitchCase[30185-30205]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[30185-30198]:ReturnStatement[30214-30227]"
    }, {
      "left" : "for (Node c = n.getFirstChild(); c != null; c = c.getNext())",
      "right" : "for (Node c = n.getFirstChild(); c != null; c = c.getNext())",
      "info" : "ForStatement[30209-30385]:ForStatement[30238-30414]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30270-30385]:Block[30299-30414]"
    }, {
      "left" : "if (!ControlFlowGraph.isEnteringNewCfgNode(c) && mayThrowException(c))",
      "right" : "if (!ControlFlowGraph.isEnteringNewCfgNode(c) && mayThrowException(c))",
      "info" : "IfStatement[30278-30379]:IfStatement[30307-30408]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30349-30379]:Block[30378-30408]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[30359-30371]:ReturnStatement[30388-30400]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[30390-30403]:ReturnStatement[30419-30432]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[30499-30505]:Modifier[30528-30534]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[30506-30513]:PrimitiveType[30535-30542]"
    }, {
      "left" : "isBreakStructure",
      "right" : "isBreakStructure",
      "info" : "SimpleName[30514-30530]:SimpleName[30543-30559]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[30531-30537]:SingleVariableDeclaration[30560-30566]"
    }, {
      "left" : "boolean labeled",
      "right" : "boolean labeled",
      "info" : "SingleVariableDeclaration[30539-30554]:SingleVariableDeclaration[30568-30583]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30556-30835]:Block[30585-30864]"
    }, {
      "left" : "switch (n.getType()) {\n      case Token.FOR:\n      case Token.DO:\n      case Token.WHILE:\n      case Token.SWITCH:\n        return true;\n      case Token.BLOCK:\n      case Token.IF:\n      case Token.TRY:\n        return labeled;\n      default:\n        return false;\n    }",
      "right" : "switch (n.getType()) {\n      case Token.FOR:\n      case Token.DO:\n      case Token.WHILE:\n      case Token.SWITCH:\n        return true;\n      case Token.BLOCK:\n      case Token.IF:\n      case Token.TRY:\n        return labeled;\n      default:\n        return false;\n    }",
      "info" : "SwitchStatement[30562-30831]:SwitchStatement[30591-30860]"
    }, {
      "left" : "case Token.FOR:",
      "right" : "case Token.FOR:",
      "info" : "SwitchCase[30591-30606]:SwitchCase[30620-30635]"
    }, {
      "left" : "case Token.DO:",
      "right" : "case Token.DO:",
      "info" : "SwitchCase[30613-30627]:SwitchCase[30642-30656]"
    }, {
      "left" : "case Token.WHILE:",
      "right" : "case Token.WHILE:",
      "info" : "SwitchCase[30634-30651]:SwitchCase[30663-30680]"
    }, {
      "left" : "case Token.SWITCH:",
      "right" : "case Token.SWITCH:",
      "info" : "SwitchCase[30658-30676]:SwitchCase[30687-30705]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[30685-30697]:ReturnStatement[30714-30726]"
    }, {
      "left" : "case Token.BLOCK:",
      "right" : "case Token.BLOCK:",
      "info" : "SwitchCase[30704-30721]:SwitchCase[30733-30750]"
    }, {
      "left" : "case Token.IF:",
      "right" : "case Token.IF:",
      "info" : "SwitchCase[30728-30742]:SwitchCase[30757-30771]"
    }, {
      "left" : "case Token.TRY:",
      "right" : "case Token.TRY:",
      "info" : "SwitchCase[30749-30764]:SwitchCase[30778-30793]"
    }, {
      "left" : "return labeled;",
      "right" : "return labeled;",
      "info" : "ReturnStatement[30773-30788]:ReturnStatement[30802-30817]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[30795-30803]:SwitchCase[30824-30832]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[30812-30825]:ReturnStatement[30841-30854]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[30928-30934]:Modifier[30957-30963]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[30935-30942]:PrimitiveType[30964-30971]"
    }, {
      "left" : "isContinueStructure",
      "right" : "isContinueStructure",
      "info" : "SimpleName[30943-30962]:SimpleName[30972-30991]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[30963-30969]:SingleVariableDeclaration[30992-30998]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30971-31134]:Block[31000-31163]"
    }, {
      "left" : "switch (n.getType()) {\n      case Token.FOR:\n      case Token.DO:\n      case Token.WHILE:\n        return true;\n      default:\n        return false;\n    }",
      "right" : "switch (n.getType()) {\n      case Token.FOR:\n      case Token.DO:\n      case Token.WHILE:\n        return true;\n      default:\n        return false;\n    }",
      "info" : "SwitchStatement[30977-31130]:SwitchStatement[31006-31159]"
    }, {
      "left" : "case Token.FOR:",
      "right" : "case Token.FOR:",
      "info" : "SwitchCase[31006-31021]:SwitchCase[31035-31050]"
    }, {
      "left" : "case Token.DO:",
      "right" : "case Token.DO:",
      "info" : "SwitchCase[31028-31042]:SwitchCase[31057-31071]"
    }, {
      "left" : "case Token.WHILE:",
      "right" : "case Token.WHILE:",
      "info" : "SwitchCase[31049-31066]:SwitchCase[31078-31095]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[31075-31087]:ReturnStatement[31104-31116]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[31094-31102]:SwitchCase[31123-31131]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[31111-31124]:ReturnStatement[31140-31153]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[31265-31272]:Modifier[31294-31301]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[31273-31279]:Modifier[31302-31308]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[31280-31285]:TYPE_DECLARATION_KIND[31309-31314]"
    }, {
      "left" : "AstControlFlowGraph",
      "right" : "AstControlFlowGraph",
      "info" : "SimpleName[31286-31305]:SimpleName[31315-31334]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[31629-31636]:Modifier[31658-31665]"
    }, {
      "left" : "AstControlFlowGraph",
      "right" : "AstControlFlowGraph",
      "info" : "SimpleName[31637-31656]:SimpleName[31666-31685]"
    }, {
      "left" : "Node entry",
      "right" : "Node entry",
      "info" : "SingleVariableDeclaration[31657-31667]:SingleVariableDeclaration[31686-31696]"
    }, {
      "left" : "Map<DiGraphNode<Node, Branch>, Integer> priorities",
      "right" : "Map<DiGraphNode<Node, Branch>, Integer> priorities",
      "info" : "SingleVariableDeclaration[31677-31727]:SingleVariableDeclaration[31706-31756]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31729-31792]:Block[31758-31821]"
    }, {
      "left" : "super(entry);",
      "right" : "super(entry);",
      "info" : "SuperConstructorInvocation[31737-31750]:SuperConstructorInvocation[31766-31779]"
    }, {
      "left" : "this.priorities = priorities;",
      "right" : "this.priorities = priorities;",
      "info" : "ExpressionStatement[31757-31786]:ExpressionStatement[31786-31815]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[31798-31807]:MarkerAnnotation[31827-31836]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[32046-32052]:Modifier[32075-32081]"
    }, {
      "left" : "Comparator<DiGraphNode<Node, Branch>>",
      "right" : "Comparator<DiGraphNode<Node, Branch>>",
      "info" : "ParameterizedType[32053-32090]:ParameterizedType[32082-32119]"
    }, {
      "left" : "getOptionalNodeComparator",
      "right" : "getOptionalNodeComparator",
      "info" : "SimpleName[32091-32116]:SimpleName[32120-32145]"
    }, {
      "left" : "boolean isForward",
      "right" : "boolean isForward",
      "info" : "SingleVariableDeclaration[32126-32143]:SingleVariableDeclaration[32155-32172]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32145-32726]:Block[32174-32755]"
    }, {
      "left" : "if (isForward)",
      "right" : "if (isForward)",
      "info" : "IfStatement[32153-32720]:IfStatement[32182-32749]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32168-32441]:Block[32197-32470]"
    }, {
      "left" : "return new Comparator<DiGraphNode<Node, Branch>>() {\n          @Override\n          public int compare(\n              DiGraphNode<Node, Branch> n1, DiGraphNode<Node, Branch> n2) {\n            return getPosition(n1) - getPosition(n2);\n          }\n        };",
      "right" : "return new Comparator<DiGraphNode<Node, Branch>>() {\n          @Override\n          public int compare(\n              DiGraphNode<Node, Branch> n1, DiGraphNode<Node, Branch> n2) {\n            return getPosition(n1) - getPosition(n2);\n          }\n        };",
      "info" : "ReturnStatement[32178-32433]:ReturnStatement[32207-32462]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[32241-32250]:MarkerAnnotation[32270-32279]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[32261-32267]:Modifier[32290-32296]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[32268-32271]:PrimitiveType[32297-32300]"
    }, {
      "left" : "compare",
      "right" : "compare",
      "info" : "SimpleName[32272-32279]:SimpleName[32301-32308]"
    }, {
      "left" : "DiGraphNode<Node, Branch> n1",
      "right" : "DiGraphNode<Node, Branch> n1",
      "info" : "SingleVariableDeclaration[32295-32323]:SingleVariableDeclaration[32324-32352]"
    }, {
      "left" : "DiGraphNode<Node, Branch> n2",
      "right" : "DiGraphNode<Node, Branch> n2",
      "info" : "SingleVariableDeclaration[32325-32353]:SingleVariableDeclaration[32354-32382]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32355-32422]:Block[32384-32451]"
    }, {
      "left" : "return getPosition(n1) - getPosition(n2);",
      "right" : "return getPosition(n1) - getPosition(n2);",
      "info" : "ReturnStatement[32369-32410]:ReturnStatement[32398-32439]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32447-32720]:Block[32476-32749]"
    }, {
      "left" : "return new Comparator<DiGraphNode<Node, Branch>>() {\n          @Override\n          public int compare(\n              DiGraphNode<Node, Branch> n1, DiGraphNode<Node, Branch> n2) {\n            return getPosition(n2) - getPosition(n1);\n          }\n        };",
      "right" : "return new Comparator<DiGraphNode<Node, Branch>>() {\n          @Override\n          public int compare(\n              DiGraphNode<Node, Branch> n1, DiGraphNode<Node, Branch> n2) {\n            return getPosition(n2) - getPosition(n1);\n          }\n        };",
      "info" : "ReturnStatement[32457-32712]:ReturnStatement[32486-32741]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[32520-32529]:MarkerAnnotation[32549-32558]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[32540-32546]:Modifier[32569-32575]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[32547-32550]:PrimitiveType[32576-32579]"
    }, {
      "left" : "compare",
      "right" : "compare",
      "info" : "SimpleName[32551-32558]:SimpleName[32580-32587]"
    }, {
      "left" : "DiGraphNode<Node, Branch> n1",
      "right" : "DiGraphNode<Node, Branch> n1",
      "info" : "SingleVariableDeclaration[32574-32602]:SingleVariableDeclaration[32603-32631]"
    }, {
      "left" : "DiGraphNode<Node, Branch> n2",
      "right" : "DiGraphNode<Node, Branch> n2",
      "info" : "SingleVariableDeclaration[32604-32632]:SingleVariableDeclaration[32633-32661]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32634-32701]:Block[32663-32730]"
    }, {
      "left" : "return getPosition(n2) - getPosition(n1);",
      "right" : "return getPosition(n2) - getPosition(n1);",
      "info" : "ReturnStatement[32648-32689]:ReturnStatement[32677-32718]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[32878-32885]:Modifier[32907-32914]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[32886-32889]:PrimitiveType[32915-32918]"
    }, {
      "left" : "getPosition",
      "right" : "getPosition",
      "info" : "SimpleName[32890-32901]:SimpleName[32919-32930]"
    }, {
      "left" : "DiGraphNode<Node, Branch> n",
      "right" : "DiGraphNode<Node, Branch> n",
      "info" : "SingleVariableDeclaration[32902-32929]:SingleVariableDeclaration[32931-32958]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32931-33049]:Block[32960-33078]"
    }, {
      "left" : "Integer priority = priorities.get(n);",
      "right" : "Integer priority = priorities.get(n);",
      "info" : "VariableDeclarationStatement[32939-32976]:VariableDeclarationStatement[32968-33005]"
    }, {
      "left" : "Preconditions.checkNotNull(priority);",
      "right" : "Preconditions.checkNotNull(priority);",
      "info" : "ExpressionStatement[32983-33020]:ExpressionStatement[33012-33049]"
    }, {
      "left" : "return priority;",
      "right" : "return priority;",
      "info" : "ReturnStatement[33027-33043]:ReturnStatement[33056-33072]"
    } ]
  },
  "interFileMappings" : { }
}