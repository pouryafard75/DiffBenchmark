{
  "matchedElements" : [
 {
    "left" : "class : NodeTraversal",
    "right" : "class : NodeTraversal",
    "info" : "TypeDeclaration[1022-19232]:TypeDeclaration[1022-19238]"
  }, {
    "left" : "compiler",
    "right" : "compiler",
    "info" : "FieldDeclaration[1227-1267]:FieldDeclaration[1227-1267]"
  }, {
    "left" : "callback",
    "right" : "callback",
    "info" : "FieldDeclaration[1270-1302]:FieldDeclaration[1270-1302]"
  }, {
    "left" : "curNode",
    "right" : "curNode",
    "info" : "FieldDeclaration[1306-1361]:FieldDeclaration[1306-1361]"
  }, {
    "left" : "NODE_TRAVERSAL_ERROR",
    "right" : "NODE_TRAVERSAL_ERROR",
    "info" : "FieldDeclaration[1365-1485]:FieldDeclaration[1365-1485]"
  }, {
    "left" : "scopes",
    "right" : "scopes",
    "info" : "FieldDeclaration[1489-1764]:FieldDeclaration[1489-1764]"
  }, {
    "left" : "scopeRoots",
    "right" : "scopeRoots",
    "info" : "FieldDeclaration[1768-1945]:FieldDeclaration[1768-1945]"
  }, {
    "left" : "cfgs",
    "right" : "cfgs",
    "info" : "FieldDeclaration[1950-2334]:FieldDeclaration[1950-2334]"
  }, {
    "left" : "sourceName",
    "right" : "sourceName",
    "info" : "FieldDeclaration[2338-2402]:FieldDeclaration[2338-2402]"
  }, {
    "left" : "inputId",
    "right" : "inputId",
    "info" : "FieldDeclaration[2406-2457]:FieldDeclaration[2406-2457]"
  }, {
    "left" : "scopeCreator",
    "right" : "scopeCreator",
    "info" : "FieldDeclaration[2461-2522]:FieldDeclaration[2461-2522]"
  }, {
    "left" : "scopeCallback",
    "right" : "scopeCallback",
    "info" : "FieldDeclaration[2526-2617]:FieldDeclaration[2526-2617]"
  }, {
    "left" : "interface : Callback",
    "right" : "interface : Callback",
    "info" : "TypeDeclaration[2621-3569]:TypeDeclaration[2621-3569]"
  }, {
    "left" : "public shouldTraverse(nodeTraversal , n , parent ) : boolean",
    "right" : "public shouldTraverse(nodeTraversal , n , parent ) : boolean",
    "info" : "MethodDeclaration[2679-3190]:MethodDeclaration[2679-3190]"
  }, {
    "left" : "public visit(t , n , parent ) : void",
    "right" : "public visit(t , n , parent ) : void",
    "info" : "MethodDeclaration[3196-3565]:MethodDeclaration[3196-3565]"
  }, {
    "left" : "interface : ScopedCallback",
    "right" : "interface : ScopedCallback",
    "info" : "TypeDeclaration[3573-4021]:TypeDeclaration[3573-4021]"
  }, {
    "left" : "public enterScope(t ) : void",
    "right" : "public enterScope(t ) : void",
    "info" : "MethodDeclaration[3691-3852]:MethodDeclaration[3691-3852]"
  }, {
    "left" : "public exitScope(t ) : void",
    "right" : "public exitScope(t ) : void",
    "info" : "MethodDeclaration[3858-4017]:MethodDeclaration[3858-4017]"
  }, {
    "left" : "class : AbstractPostOrderCallback",
    "right" : "class : AbstractPostOrderCallback",
    "info" : "TypeDeclaration[4025-4313]:TypeDeclaration[4025-4313]"
  }, {
    "left" : "public shouldTraverse(nodeTraversal , n , parent ) : boolean",
    "right" : "public shouldTraverse(nodeTraversal , n , parent ) : boolean",
    "info" : "MethodDeclaration[4175-4309]:MethodDeclaration[4175-4309]"
  }, {
    "left" : "class : AbstractScopedCallback",
    "right" : "class : AbstractScopedCallback",
    "info" : "TypeDeclaration[4317-4744]:TypeDeclaration[4317-4744]"
  }, {
    "left" : "public shouldTraverse(nodeTraversal , n , parent ) : boolean",
    "right" : "public shouldTraverse(nodeTraversal , n , parent ) : boolean",
    "info" : "MethodDeclaration[4483-4617]:MethodDeclaration[4483-4617]"
  }, {
    "left" : "public enterScope(t ) : void",
    "right" : "public enterScope(t ) : void",
    "info" : "MethodDeclaration[4623-4679]:MethodDeclaration[4623-4679]"
  }, {
    "left" : "public exitScope(t ) : void",
    "right" : "public exitScope(t ) : void",
    "info" : "MethodDeclaration[4685-4740]:MethodDeclaration[4685-4740]"
  }, {
    "left" : "class : AbstractShallowCallback",
    "right" : "class : AbstractShallowCallback",
    "info" : "TypeDeclaration[4748-5262]:TypeDeclaration[4748-5262]"
  }, {
    "left" : "public shouldTraverse(nodeTraversal , n , parent ) : boolean",
    "right" : "public shouldTraverse(nodeTraversal , n , parent ) : boolean",
    "info" : "MethodDeclaration[4925-5258]:MethodDeclaration[4925-5258]"
  }, {
    "left" : "class : AbstractShallowStatementCallback",
    "right" : "class : AbstractShallowStatementCallback",
    "info" : "TypeDeclaration[5266-5728]:TypeDeclaration[5266-5728]"
  }, {
    "left" : "public shouldTraverse(nodeTraversal , n , parent ) : boolean",
    "right" : "public shouldTraverse(nodeTraversal , n , parent ) : boolean",
    "info" : "MethodDeclaration[5495-5724]:MethodDeclaration[5495-5724]"
  }, {
    "left" : "class : AbstractNodeTypePruningCallback",
    "right" : "class : AbstractNodeTypePruningCallback",
    "info" : "TypeDeclaration[5732-6745]:TypeDeclaration[5732-6745]"
  }, {
    "left" : "nodeTypes",
    "right" : "nodeTypes",
    "info" : "FieldDeclaration[5894-5931]:FieldDeclaration[5894-5931]"
  }, {
    "left" : "include",
    "right" : "include",
    "info" : "FieldDeclaration[5936-5966]:FieldDeclaration[5936-5966]"
  }, {
    "left" : "public AbstractNodeTypePruningCallback(nodeTypes ...)",
    "right" : "public AbstractNodeTypePruningCallback(nodeTypes ...)",
    "info" : "MethodDeclaration[5972-6193]:MethodDeclaration[5972-6193]"
  }, {
    "left" : "public AbstractNodeTypePruningCallback(nodeTypes , include boolean)",
    "right" : "public AbstractNodeTypePruningCallback(nodeTypes , include boolean)",
    "info" : "MethodDeclaration[6199-6569]:MethodDeclaration[6199-6569]"
  }, {
    "left" : "public shouldTraverse(nodeTraversal , n , parent ) : boolean",
    "right" : "public shouldTraverse(nodeTraversal , n , parent ) : boolean",
    "info" : "MethodDeclaration[6575-6741]:MethodDeclaration[6575-6741]"
  }, {
    "left" : "public NodeTraversal(compiler , cb )",
    "right" : "public NodeTraversal(compiler , cb )",
    "info" : "MethodDeclaration[6749-6958]:MethodDeclaration[6749-6958]"
  }, {
    "left" : "public NodeTraversal(compiler , cb , scopeCreator )",
    "right" : "public NodeTraversal(compiler , cb , scopeCreator )",
    "info" : "MethodDeclaration[6962-7407]:MethodDeclaration[6962-7407]"
  }, {
    "left" : "private throwUnexpectedException(unexpectedException ) : void",
    "right" : "private throwUnexpectedException(unexpectedException ) : void",
    "info" : "MethodDeclaration[7411-8200]:MethodDeclaration[7411-8200]"
  }, {
    "left" : "private formatNodeContext(label , n ) : ",
    "right" : "private formatNodeContext(label , n ) : ",
    "info" : "MethodDeclaration[8204-8434]:MethodDeclaration[8204-8434]"
  }, {
    "left" : "public traverse(root ) : void",
    "right" : "public traverse(root ) : void",
    "info" : "MethodDeclaration[8438-8806]:MethodDeclaration[8438-8806]"
  }, {
    "left" : "public traverseRoots() : void",
    "right" : "public traverseRoots() : void",
    "info" : "MethodDeclaration[8810-8903]:MethodDeclaration[8810-8903]"
  }, {
    "left" : "public traverseRoots(roots ...) : void",
    "right" : "public traverseRoots(roots ...) : void",
    "info" : "MethodDeclaration[8907-9512]:MethodDeclaration[8907-9512]"
  }, {
    "left" : "MISSING_SOURCE",
    "right" : "MISSING_SOURCE",
    "info" : "FieldDeclaration[9516-9580]:FieldDeclaration[9516-9580]"
  }, {
    "left" : "private formatNodePosition(n ) : ",
    "right" : "private formatNodePosition(n ) : ",
    "info" : "MethodDeclaration[9584-9982]:MethodDeclaration[9584-9982]"
  }, {
    "left" : "package traverseWithScope(root , s ...) : void",
    "right" : "package traverseWithScope(root , s ...) : void",
    "info" : "MethodDeclaration[9986-10399]:MethodDeclaration[9986-10399]"
  }, {
    "left" : "package traverseAtScope(s ...) : void",
    "right" : "package traverseAtScope(s ...) : void",
    "info" : "MethodDeclaration[10403-11096]:MethodDeclaration[10403-11096]"
  }, {
    "left" : "protected traverseInnerNode(node , parent , refinedScope ) : void",
    "right" : "protected traverseInnerNode(node , parent , refinedScope ) : void",
    "info" : "MethodDeclaration[11100-11894]:MethodDeclaration[11100-11894]"
  }, {
    "left" : "public getCompiler() : ",
    "right" : "public getCompiler() : ",
    "info" : "MethodDeclaration[11898-12098]:MethodDeclaration[11898-12098]"
  }, {
    "left" : "public getLineNumber() : int",
    "right" : "public getLineNumber() : int",
    "info" : "MethodDeclaration[12102-12474]:MethodDeclaration[12102-12474]"
  }, {
    "left" : "public getSourceName() : ",
    "right" : "public getSourceName() : ",
    "info" : "MethodDeclaration[12478-12648]:MethodDeclaration[12478-12648]"
  }, {
    "left" : "public getInput() : ",
    "right" : "public getInput() : ",
    "info" : "MethodDeclaration[12652-12776]:MethodDeclaration[12652-12776]"
  }, {
    "left" : "public getModule() : ",
    "right" : "public getModule() : ",
    "info" : "MethodDeclaration[12780-12952]:MethodDeclaration[12780-12952]"
  }, {
    "left" : "public getCurrentNode() : ",
    "right" : "public getCurrentNode() : ",
    "info" : "MethodDeclaration[12956-13063]:MethodDeclaration[12956-13063]"
  }, {
    "left" : "public traverse(compiler , root , cb ) : void",
    "right" : "public traverse(compiler , root , cb ) : void",
    "info" : "MethodDeclaration[13067-13282]:MethodDeclaration[13067-13282]"
  }, {
    "left" : "public traverseRoots(compiler , roots , cb ) : void",
    "right" : "public traverseRoots(compiler , roots , cb ) : void",
    "info" : "MethodDeclaration[13286-13521]:MethodDeclaration[13286-13521]"
  }, {
    "left" : "public traverseRoots(compiler , cb , ) : void",
    "right" : "public traverseRoots(compiler , cb , ) : void",
    "info" : "MethodDeclaration[13525-13709]:MethodDeclaration[13525-13709]"
  }, {
    "left" : "private traverseBranch(n , parent ) : void",
    "right" : "private traverseBranch(n , parent ) : void",
    "info" : "MethodDeclaration[13713-14535]:MethodDeclaration[13713-14535]"
  }, {
    "left" : "private traverseFunction(n , parent ) : void",
    "right" : "private traverseFunction(n , parent ) : void",
    "info" : "MethodDeclaration[14539-15489]:MethodDeclaration[14539-15495]"
  }, {
    "left" : "public getEnclosingFunction() : ",
    "right" : "public getEnclosingFunction() : ",
    "info" : "MethodDeclaration[15493-15868]:MethodDeclaration[15499-15874]"
  }, {
    "left" : "private pushScope(node ) : void",
    "right" : "private pushScope(node ) : void",
    "info" : "MethodDeclaration[15872-16145]:MethodDeclaration[15878-16151]"
  }, {
    "left" : "private pushScope(s ...) : void",
    "right" : "private pushScope(s ...) : void",
    "info" : "MethodDeclaration[16149-16413]:MethodDeclaration[16155-16419]"
  }, {
    "left" : "private popScope() : void",
    "right" : "private popScope() : void",
    "info" : "MethodDeclaration[16417-16706]:MethodDeclaration[16423-16712]"
  }, {
    "left" : "public getScope() : ",
    "right" : "public getScope() : ",
    "info" : "MethodDeclaration[16710-17107]:MethodDeclaration[16716-17113]"
  }, {
    "left" : "public getControlFlowGraph() : ",
    "right" : "public getControlFlowGraph() : ",
    "info" : "MethodDeclaration[17111-17462]:MethodDeclaration[17117-17468]"
  }, {
    "left" : "public getScopeRoot() : ",
    "right" : "public getScopeRoot() : ",
    "info" : "MethodDeclaration[17466-17666]:MethodDeclaration[17472-17672]"
  }, {
    "left" : "package inGlobalScope() : boolean",
    "right" : "package inGlobalScope() : boolean",
    "info" : "MethodDeclaration[17670-17816]:MethodDeclaration[17676-17822]"
  }, {
    "left" : "package getScopeDepth() : int",
    "right" : "package getScopeDepth() : int",
    "info" : "MethodDeclaration[17820-17891]:MethodDeclaration[17826-17897]"
  }, {
    "left" : "public hasScope() : boolean",
    "right" : "public hasScope() : boolean",
    "info" : "MethodDeclaration[17895-17982]:MethodDeclaration[17901-17988]"
  }, {
    "left" : "public report(n , diagnosticType , ) : void",
    "right" : "public report(n , diagnosticType , ) : void",
    "info" : "MethodDeclaration[17986-18234]:MethodDeclaration[17992-18240]"
  }, {
    "left" : "private getSourceName(n ) : ",
    "right" : "private getSourceName(n ) : ",
    "info" : "MethodDeclaration[18238-18365]:MethodDeclaration[18244-18371]"
  }, {
    "left" : "package getInputId() : ",
    "right" : "package getInputId() : ",
    "info" : "MethodDeclaration[18369-18415]:MethodDeclaration[18375-18421]"
  }, {
    "left" : "public makeError(n , level , type , ) : ",
    "right" : "public makeError(n , level , type , ) : ",
    "info" : "MethodDeclaration[18419-18838]:MethodDeclaration[18425-18844]"
  }, {
    "left" : "public makeError(n , type , ) : ",
    "right" : "public makeError(n , type , ) : ",
    "info" : "MethodDeclaration[18842-19230]:MethodDeclaration[18848-19236]"
  } ],
  "mappings" : [
 {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[1163-1169]:Modifier[1163-1169]"
  }, {
    "left" : "class",
    "right" : "class",
    "info" : "TYPE_DECLARATION_KIND[1170-1175]:TYPE_DECLARATION_KIND[1170-1175]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[2647-2653]:Modifier[2647-2653]"
  }, {
    "left" : "interface",
    "right" : "interface",
    "info" : "TYPE_DECLARATION_KIND[2654-2663]:TYPE_DECLARATION_KIND[2654-2663]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[3117-3124]:PrimitiveType[3117-3124]"
  }, {
    "left" : "shouldTraverse",
    "right" : "shouldTraverse",
    "info" : "SimpleName[3125-3139]:SimpleName[3125-3139]"
  }, {
    "left" : "NodeTraversal nodeTraversal",
    "right" : "NodeTraversal nodeTraversal",
    "info" : "SingleVariableDeclaration[3140-3167]:SingleVariableDeclaration[3140-3167]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[3169-3175]:SingleVariableDeclaration[3169-3175]"
  }, {
    "left" : "Node parent",
    "right" : "Node parent",
    "info" : "SingleVariableDeclaration[3177-3188]:SingleVariableDeclaration[3177-3188]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[3516-3520]:PrimitiveType[3516-3520]"
  }, {
    "left" : "visit",
    "right" : "visit",
    "info" : "SimpleName[3521-3526]:SimpleName[3521-3526]"
  }, {
    "left" : "NodeTraversal t",
    "right" : "NodeTraversal t",
    "info" : "SingleVariableDeclaration[3527-3542]:SingleVariableDeclaration[3527-3542]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[3544-3550]:SingleVariableDeclaration[3544-3550]"
  }, {
    "left" : "Node parent",
    "right" : "Node parent",
    "info" : "SingleVariableDeclaration[3552-3563]:SingleVariableDeclaration[3552-3563]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[3635-3641]:Modifier[3635-3641]"
  }, {
    "left" : "interface",
    "right" : "interface",
    "info" : "TYPE_DECLARATION_KIND[3642-3651]:TYPE_DECLARATION_KIND[3642-3651]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[3819-3823]:PrimitiveType[3819-3823]"
  }, {
    "left" : "enterScope",
    "right" : "enterScope",
    "info" : "SimpleName[3824-3834]:SimpleName[3824-3834]"
  }, {
    "left" : "NodeTraversal t",
    "right" : "NodeTraversal t",
    "info" : "SingleVariableDeclaration[3835-3850]:SingleVariableDeclaration[3835-3850]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[3985-3989]:PrimitiveType[3985-3989]"
  }, {
    "left" : "exitScope",
    "right" : "exitScope",
    "info" : "SimpleName[3990-3999]:SimpleName[3990-3999]"
  }, {
    "left" : "NodeTraversal t",
    "right" : "NodeTraversal t",
    "info" : "SingleVariableDeclaration[4000-4015]:SingleVariableDeclaration[4000-4015]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[4094-4100]:Modifier[4094-4100]"
  }, {
    "left" : "abstract",
    "right" : "abstract",
    "info" : "Modifier[4101-4109]:Modifier[4101-4109]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[4110-4116]:Modifier[4110-4116]"
  }, {
    "left" : "class",
    "right" : "class",
    "info" : "TYPE_DECLARATION_KIND[4117-4122]:TYPE_DECLARATION_KIND[4117-4122]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[4175-4184]:MarkerAnnotation[4175-4184]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[4189-4195]:Modifier[4189-4195]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[4196-4201]:Modifier[4196-4201]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[4202-4209]:PrimitiveType[4202-4209]"
  }, {
    "left" : "shouldTraverse",
    "right" : "shouldTraverse",
    "info" : "SimpleName[4210-4224]:SimpleName[4210-4224]"
  }, {
    "left" : "NodeTraversal nodeTraversal",
    "right" : "NodeTraversal nodeTraversal",
    "info" : "SingleVariableDeclaration[4225-4252]:SingleVariableDeclaration[4225-4252]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[4254-4260]:SingleVariableDeclaration[4254-4260]"
  }, {
    "left" : "Node parent",
    "right" : "Node parent",
    "info" : "SingleVariableDeclaration[4270-4281]:SingleVariableDeclaration[4270-4281]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4283-4309]:Block[4283-4309]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[4291-4303]:ReturnStatement[4291-4303]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[4393-4399]:Modifier[4393-4399]"
  }, {
    "left" : "abstract",
    "right" : "abstract",
    "info" : "Modifier[4400-4408]:Modifier[4400-4408]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[4409-4415]:Modifier[4409-4415]"
  }, {
    "left" : "class",
    "right" : "class",
    "info" : "TYPE_DECLARATION_KIND[4416-4421]:TYPE_DECLARATION_KIND[4416-4421]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[4483-4492]:MarkerAnnotation[4483-4492]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[4497-4503]:Modifier[4497-4503]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[4504-4509]:Modifier[4504-4509]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[4510-4517]:PrimitiveType[4510-4517]"
  }, {
    "left" : "shouldTraverse",
    "right" : "shouldTraverse",
    "info" : "SimpleName[4518-4532]:SimpleName[4518-4532]"
  }, {
    "left" : "NodeTraversal nodeTraversal",
    "right" : "NodeTraversal nodeTraversal",
    "info" : "SingleVariableDeclaration[4533-4560]:SingleVariableDeclaration[4533-4560]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[4562-4568]:SingleVariableDeclaration[4562-4568]"
  }, {
    "left" : "Node parent",
    "right" : "Node parent",
    "info" : "SingleVariableDeclaration[4578-4589]:SingleVariableDeclaration[4578-4589]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4591-4617]:Block[4591-4617]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[4599-4611]:ReturnStatement[4599-4611]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[4623-4632]:MarkerAnnotation[4623-4632]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[4637-4643]:Modifier[4637-4643]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[4644-4648]:PrimitiveType[4644-4648]"
  }, {
    "left" : "enterScope",
    "right" : "enterScope",
    "info" : "SimpleName[4649-4659]:SimpleName[4649-4659]"
  }, {
    "left" : "NodeTraversal t",
    "right" : "NodeTraversal t",
    "info" : "SingleVariableDeclaration[4660-4675]:SingleVariableDeclaration[4660-4675]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4677-4679]:Block[4677-4679]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[4685-4694]:MarkerAnnotation[4685-4694]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[4699-4705]:Modifier[4699-4705]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[4706-4710]:PrimitiveType[4706-4710]"
  }, {
    "left" : "exitScope",
    "right" : "exitScope",
    "info" : "SimpleName[4711-4720]:SimpleName[4711-4720]"
  }, {
    "left" : "NodeTraversal t",
    "right" : "NodeTraversal t",
    "info" : "SingleVariableDeclaration[4721-4736]:SingleVariableDeclaration[4721-4736]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4738-4740]:Block[4738-4740]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[4846-4852]:Modifier[4846-4852]"
  }, {
    "left" : "abstract",
    "right" : "abstract",
    "info" : "Modifier[4853-4861]:Modifier[4853-4861]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[4862-4868]:Modifier[4862-4868]"
  }, {
    "left" : "class",
    "right" : "class",
    "info" : "TYPE_DECLARATION_KIND[4869-4874]:TYPE_DECLARATION_KIND[4869-4874]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[4925-4934]:MarkerAnnotation[4925-4934]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[4939-4945]:Modifier[4939-4945]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[4946-4951]:Modifier[4946-4951]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[4952-4959]:PrimitiveType[4952-4959]"
  }, {
    "left" : "shouldTraverse",
    "right" : "shouldTraverse",
    "info" : "SimpleName[4960-4974]:SimpleName[4960-4974]"
  }, {
    "left" : "NodeTraversal nodeTraversal",
    "right" : "NodeTraversal nodeTraversal",
    "info" : "SingleVariableDeclaration[4975-5002]:SingleVariableDeclaration[4975-5002]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[5004-5010]:SingleVariableDeclaration[5004-5010]"
  }, {
    "left" : "Node parent",
    "right" : "Node parent",
    "info" : "SingleVariableDeclaration[5020-5031]:SingleVariableDeclaration[5020-5031]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5033-5258]:Block[5033-5258]"
  }, {
    "left" : "return parent == null || !parent.isFunction() ||\n          n == parent.getFirstChild();",
    "right" : "return parent == null || !parent.isFunction() ||\n          n == parent.getFirstChild();",
    "info" : "ReturnStatement[5165-5252]:ReturnStatement[5165-5252]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[5401-5407]:Modifier[5401-5407]"
  }, {
    "left" : "abstract",
    "right" : "abstract",
    "info" : "Modifier[5408-5416]:Modifier[5408-5416]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[5417-5423]:Modifier[5417-5423]"
  }, {
    "left" : "class",
    "right" : "class",
    "info" : "TYPE_DECLARATION_KIND[5424-5429]:TYPE_DECLARATION_KIND[5424-5429]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[5495-5504]:MarkerAnnotation[5495-5504]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[5509-5515]:Modifier[5509-5515]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[5516-5521]:Modifier[5516-5521]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[5522-5529]:PrimitiveType[5522-5529]"
  }, {
    "left" : "shouldTraverse",
    "right" : "shouldTraverse",
    "info" : "SimpleName[5530-5544]:SimpleName[5530-5544]"
  }, {
    "left" : "NodeTraversal nodeTraversal",
    "right" : "NodeTraversal nodeTraversal",
    "info" : "SingleVariableDeclaration[5545-5572]:SingleVariableDeclaration[5545-5572]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[5574-5580]:SingleVariableDeclaration[5574-5580]"
  }, {
    "left" : "Node parent",
    "right" : "Node parent",
    "info" : "SingleVariableDeclaration[5590-5601]:SingleVariableDeclaration[5590-5601]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5603-5724]:Block[5603-5724]"
  }, {
    "left" : "return parent == null || NodeUtil.isControlStructure(parent)\n         || NodeUtil.isStatementBlock(parent);",
    "right" : "return parent == null || NodeUtil.isControlStructure(parent)\n         || NodeUtil.isStatementBlock(parent);",
    "info" : "ReturnStatement[5611-5718]:ReturnStatement[5611-5718]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[5799-5805]:Modifier[5799-5805]"
  }, {
    "left" : "abstract",
    "right" : "abstract",
    "info" : "Modifier[5806-5814]:Modifier[5806-5814]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[5815-5821]:Modifier[5815-5821]"
  }, {
    "left" : "class",
    "right" : "class",
    "info" : "TYPE_DECLARATION_KIND[5822-5827]:TYPE_DECLARATION_KIND[5822-5827]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[6094-6100]:Modifier[6094-6100]"
  }, {
    "left" : "AbstractNodeTypePruningCallback",
    "right" : "AbstractNodeTypePruningCallback",
    "info" : "SimpleName[6101-6132]:SimpleName[6101-6132]"
  }, {
    "left" : "Set<Integer> nodeTypes",
    "right" : "Set<Integer> nodeTypes",
    "info" : "SingleVariableDeclaration[6133-6155]:SingleVariableDeclaration[6133-6155]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6157-6193]:Block[6157-6193]"
  }, {
    "left" : "this(nodeTypes, true);",
    "right" : "this(nodeTypes, true);",
    "info" : "ConstructorInvocation[6165-6187]:ConstructorInvocation[6165-6187]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[6408-6414]:Modifier[6408-6414]"
  }, {
    "left" : "AbstractNodeTypePruningCallback",
    "right" : "AbstractNodeTypePruningCallback",
    "info" : "SimpleName[6415-6446]:SimpleName[6415-6446]"
  }, {
    "left" : "Set<Integer> nodeTypes",
    "right" : "Set<Integer> nodeTypes",
    "info" : "SingleVariableDeclaration[6447-6469]:SingleVariableDeclaration[6447-6469]"
  }, {
    "left" : "boolean include",
    "right" : "boolean include",
    "info" : "SingleVariableDeclaration[6481-6496]:SingleVariableDeclaration[6481-6496]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6498-6569]:Block[6498-6569]"
  }, {
    "left" : "this.nodeTypes = nodeTypes;",
    "right" : "this.nodeTypes = nodeTypes;",
    "info" : "ExpressionStatement[6506-6533]:ExpressionStatement[6506-6533]"
  }, {
    "left" : "this.include = include;",
    "right" : "this.include = include;",
    "info" : "ExpressionStatement[6540-6563]:ExpressionStatement[6540-6563]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[6575-6584]:MarkerAnnotation[6575-6584]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[6589-6595]:Modifier[6589-6595]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[6596-6603]:PrimitiveType[6596-6603]"
  }, {
    "left" : "shouldTraverse",
    "right" : "shouldTraverse",
    "info" : "SimpleName[6604-6618]:SimpleName[6604-6618]"
  }, {
    "left" : "NodeTraversal nodeTraversal",
    "right" : "NodeTraversal nodeTraversal",
    "info" : "SingleVariableDeclaration[6619-6646]:SingleVariableDeclaration[6619-6646]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[6648-6654]:SingleVariableDeclaration[6648-6654]"
  }, {
    "left" : "Node parent",
    "right" : "Node parent",
    "info" : "SingleVariableDeclaration[6664-6675]:SingleVariableDeclaration[6664-6675]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6677-6741]:Block[6677-6741]"
  }, {
    "left" : "return include == nodeTypes.contains(n.getType());",
    "right" : "return include == nodeTypes.contains(n.getType());",
    "info" : "ReturnStatement[6685-6735]:ReturnStatement[6685-6735]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[6831-6837]:Modifier[6831-6837]"
  }, {
    "left" : "NodeTraversal",
    "right" : "NodeTraversal",
    "info" : "SimpleName[6838-6851]:SimpleName[6838-6851]"
  }, {
    "left" : "AbstractCompiler compiler",
    "right" : "AbstractCompiler compiler",
    "info" : "SingleVariableDeclaration[6852-6877]:SingleVariableDeclaration[6852-6877]"
  }, {
    "left" : "Callback cb",
    "right" : "Callback cb",
    "info" : "SingleVariableDeclaration[6879-6890]:SingleVariableDeclaration[6879-6890]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6892-6958]:Block[6892-6958]"
  }, {
    "left" : "this(compiler, cb, new SyntacticScopeCreator(compiler));",
    "right" : "this(compiler, cb, new SyntacticScopeCreator(compiler));",
    "info" : "ConstructorInvocation[6898-6954]:ConstructorInvocation[6898-6954]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[7071-7077]:Modifier[7071-7077]"
  }, {
    "left" : "NodeTraversal",
    "right" : "NodeTraversal",
    "info" : "SimpleName[7078-7091]:SimpleName[7078-7091]"
  }, {
    "left" : "AbstractCompiler compiler",
    "right" : "AbstractCompiler compiler",
    "info" : "SingleVariableDeclaration[7092-7117]:SingleVariableDeclaration[7092-7117]"
  }, {
    "left" : "Callback cb",
    "right" : "Callback cb",
    "info" : "SingleVariableDeclaration[7119-7130]:SingleVariableDeclaration[7119-7130]"
  }, {
    "left" : "ScopeCreator scopeCreator",
    "right" : "ScopeCreator scopeCreator",
    "info" : "SingleVariableDeclaration[7138-7163]:SingleVariableDeclaration[7138-7163]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7165-7407]:Block[7165-7407]"
  }, {
    "left" : "this.callback = cb;",
    "right" : "this.callback = cb;",
    "info" : "ExpressionStatement[7171-7190]:ExpressionStatement[7171-7190]"
  }, {
    "left" : "if (cb instanceof ScopedCallback)",
    "right" : "if (cb instanceof ScopedCallback)",
    "info" : "IfStatement[7195-7284]:IfStatement[7195-7284]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7229-7284]:Block[7229-7284]"
  }, {
    "left" : "this.scopeCallback = (ScopedCallback) cb;",
    "right" : "this.scopeCallback = (ScopedCallback) cb;",
    "info" : "ExpressionStatement[7237-7278]:ExpressionStatement[7237-7278]"
  }, {
    "left" : "this.compiler = compiler;",
    "right" : "this.compiler = compiler;",
    "info" : "ExpressionStatement[7289-7314]:ExpressionStatement[7289-7314]"
  }, {
    "left" : "this.inputId = null;",
    "right" : "this.inputId = null;",
    "info" : "ExpressionStatement[7319-7339]:ExpressionStatement[7319-7339]"
  }, {
    "left" : "this.sourceName = \"\";",
    "right" : "this.sourceName = \"\";",
    "info" : "ExpressionStatement[7344-7365]:ExpressionStatement[7344-7365]"
  }, {
    "left" : "this.scopeCreator = scopeCreator;",
    "right" : "this.scopeCreator = scopeCreator;",
    "info" : "ExpressionStatement[7370-7403]:ExpressionStatement[7370-7403]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[7411-7418]:Modifier[7411-7418]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[7419-7423]:PrimitiveType[7419-7423]"
  }, {
    "left" : "throwUnexpectedException",
    "right" : "throwUnexpectedException",
    "info" : "SimpleName[7424-7448]:SimpleName[7424-7448]"
  }, {
    "left" : "Exception unexpectedException",
    "right" : "Exception unexpectedException",
    "info" : "SingleVariableDeclaration[7449-7478]:SingleVariableDeclaration[7449-7478]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7480-8200]:Block[7480-8200]"
  }, {
    "left" : "String message = unexpectedException.getMessage();",
    "right" : "String message = unexpectedException.getMessage();",
    "info" : "VariableDeclarationStatement[7591-7641]:VariableDeclarationStatement[7591-7641]"
  }, {
    "left" : "if (inputId != null)",
    "right" : "if (inputId != null)",
    "info" : "IfStatement[7877-8133]:IfStatement[7877-8133]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7898-8133]:Block[7898-8133]"
  }, {
    "left" : "message =\n          unexpectedException.getMessage() + \"\\n\" +\n          formatNodeContext(\"Node\", curNode) +\n          (curNode == null ?\n              \"\" :\n              formatNodeContext(\"Parent\", curNode.getParent()));",
    "right" : "message =\n          unexpectedException.getMessage() + \"\\n\" +\n          formatNodeContext(\"Node\", curNode) +\n          (curNode == null ?\n              \"\" :\n              formatNodeContext(\"Parent\", curNode.getParent()));",
    "info" : "ExpressionStatement[7906-8127]:ExpressionStatement[7906-8127]"
  }, {
    "left" : "compiler.throwInternalError(message, unexpectedException);",
    "right" : "compiler.throwInternalError(message, unexpectedException);",
    "info" : "ExpressionStatement[8138-8196]:ExpressionStatement[8138-8196]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[8204-8211]:Modifier[8204-8211]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[8212-8218]:SimpleType[8212-8218]"
  }, {
    "left" : "formatNodeContext",
    "right" : "formatNodeContext",
    "info" : "SimpleName[8219-8236]:SimpleName[8219-8236]"
  }, {
    "left" : "String label",
    "right" : "String label",
    "info" : "SingleVariableDeclaration[8237-8249]:SingleVariableDeclaration[8237-8249]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[8251-8257]:SingleVariableDeclaration[8251-8257]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8259-8434]:Block[8259-8434]"
  }, {
    "left" : "if (n == null)",
    "right" : "if (n == null)",
    "info" : "IfStatement[8265-8325]:IfStatement[8265-8325]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8280-8325]:Block[8280-8325]"
  }, {
    "left" : "return \"  \" + label + \": NULL\";",
    "right" : "return \"  \" + label + \": NULL\";",
    "info" : "ReturnStatement[8288-8319]:ReturnStatement[8288-8319]"
  }, {
    "left" : "return \"  \" + label + \"(\" + n.toString(false, false, false) + \"): \"\n        + formatNodePosition(n);",
    "right" : "return \"  \" + label + \"(\" + n.toString(false, false, false) + \"): \"\n        + formatNodePosition(n);",
    "info" : "ReturnStatement[8330-8430]:ReturnStatement[8330-8430]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[8491-8497]:Modifier[8491-8497]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[8498-8502]:PrimitiveType[8498-8502]"
  }, {
    "left" : "traverse",
    "right" : "traverse",
    "info" : "SimpleName[8503-8511]:SimpleName[8503-8511]"
  }, {
    "left" : "Node root",
    "right" : "Node root",
    "info" : "SingleVariableDeclaration[8512-8521]:SingleVariableDeclaration[8512-8521]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8523-8806]:Block[8523-8806]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[8529-8802]:TryStatement[8529-8802]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8533-8703]:Block[8533-8703]"
  }, {
    "left" : "inputId = NodeUtil.getInputId(root);",
    "right" : "inputId = NodeUtil.getInputId(root);",
    "info" : "ExpressionStatement[8541-8577]:ExpressionStatement[8541-8577]"
  }, {
    "left" : "sourceName = \"\";",
    "right" : "sourceName = \"\";",
    "info" : "ExpressionStatement[8584-8600]:ExpressionStatement[8584-8600]"
  }, {
    "left" : "curNode = root;",
    "right" : "curNode = root;",
    "info" : "ExpressionStatement[8607-8622]:ExpressionStatement[8607-8622]"
  }, {
    "left" : "pushScope(root);",
    "right" : "pushScope(root);",
    "info" : "ExpressionStatement[8629-8645]:ExpressionStatement[8629-8645]"
  }, {
    "left" : "traverseBranch(root, null);",
    "right" : "traverseBranch(root, null);",
    "info" : "ExpressionStatement[8652-8679]:ExpressionStatement[8652-8679]"
  }, {
    "left" : "popScope();",
    "right" : "popScope();",
    "info" : "ExpressionStatement[8686-8697]:ExpressionStatement[8686-8697]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8742-8802]:Block[8742-8802]"
  }, {
    "left" : "throwUnexpectedException(unexpectedException);",
    "right" : "throwUnexpectedException(unexpectedException);",
    "info" : "ExpressionStatement[8750-8796]:ExpressionStatement[8750-8796]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[8810-8816]:Modifier[8810-8816]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[8817-8821]:PrimitiveType[8817-8821]"
  }, {
    "left" : "traverseRoots",
    "right" : "traverseRoots",
    "info" : "SimpleName[8822-8835]:SimpleName[8822-8835]"
  }, {
    "left" : "Node ... roots",
    "right" : "Node ... roots",
    "info" : "SingleVariableDeclaration[8836-8850]:SingleVariableDeclaration[8836-8850]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8852-8903]:Block[8852-8903]"
  }, {
    "left" : "traverseRoots(Lists.newArrayList(roots));",
    "right" : "traverseRoots(Lists.newArrayList(roots));",
    "info" : "ExpressionStatement[8858-8899]:ExpressionStatement[8858-8899]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[8907-8913]:Modifier[8907-8913]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[8914-8918]:PrimitiveType[8914-8918]"
  }, {
    "left" : "traverseRoots",
    "right" : "traverseRoots",
    "info" : "SimpleName[8919-8932]:SimpleName[8919-8932]"
  }, {
    "left" : "List<Node> roots",
    "right" : "List<Node> roots",
    "info" : "SingleVariableDeclaration[8933-8949]:SingleVariableDeclaration[8933-8949]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8951-9512]:Block[8951-9512]"
  }, {
    "left" : "if (roots.isEmpty())",
    "right" : "if (roots.isEmpty())",
    "info" : "IfStatement[8957-8999]:IfStatement[8957-8999]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8978-8999]:Block[8978-8999]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[8986-8993]:ReturnStatement[8986-8993]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[9005-9508]:TryStatement[9005-9508]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9009-9409]:Block[9009-9409]"
  }, {
    "left" : "Node scopeRoot = roots.get(0).getParent();",
    "right" : "Node scopeRoot = roots.get(0).getParent();",
    "info" : "VariableDeclarationStatement[9017-9059]:VariableDeclarationStatement[9017-9059]"
  }, {
    "left" : "Preconditions.checkState(scopeRoot != null);",
    "right" : "Preconditions.checkState(scopeRoot != null);",
    "info" : "ExpressionStatement[9066-9110]:ExpressionStatement[9066-9110]"
  }, {
    "left" : "inputId = NodeUtil.getInputId(scopeRoot);",
    "right" : "inputId = NodeUtil.getInputId(scopeRoot);",
    "info" : "ExpressionStatement[9118-9159]:ExpressionStatement[9118-9159]"
  }, {
    "left" : "sourceName = \"\";",
    "right" : "sourceName = \"\";",
    "info" : "ExpressionStatement[9166-9182]:ExpressionStatement[9166-9182]"
  }, {
    "left" : "curNode = scopeRoot;",
    "right" : "curNode = scopeRoot;",
    "info" : "ExpressionStatement[9189-9209]:ExpressionStatement[9189-9209]"
  }, {
    "left" : "pushScope(scopeRoot);",
    "right" : "pushScope(scopeRoot);",
    "info" : "ExpressionStatement[9216-9237]:ExpressionStatement[9216-9237]"
  }, {
    "left" : "for (Node root : roots)",
    "right" : "for (Node root : roots)",
    "info" : "EnhancedForStatement[9245-9384]:EnhancedForStatement[9245-9384]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9269-9384]:Block[9269-9384]"
  }, {
    "left" : "Preconditions.checkState(root.getParent() == scopeRoot);",
    "right" : "Preconditions.checkState(root.getParent() == scopeRoot);",
    "info" : "ExpressionStatement[9279-9335]:ExpressionStatement[9279-9335]"
  }, {
    "left" : "traverseBranch(root, scopeRoot);",
    "right" : "traverseBranch(root, scopeRoot);",
    "info" : "ExpressionStatement[9344-9376]:ExpressionStatement[9344-9376]"
  }, {
    "left" : "popScope();",
    "right" : "popScope();",
    "info" : "ExpressionStatement[9392-9403]:ExpressionStatement[9392-9403]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9448-9508]:Block[9448-9508]"
  }, {
    "left" : "throwUnexpectedException(unexpectedException);",
    "right" : "throwUnexpectedException(unexpectedException);",
    "info" : "ExpressionStatement[9456-9502]:ExpressionStatement[9456-9502]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[9584-9591]:Modifier[9584-9591]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[9592-9598]:SimpleType[9592-9598]"
  }, {
    "left" : "formatNodePosition",
    "right" : "formatNodePosition",
    "info" : "SimpleName[9599-9617]:SimpleName[9599-9617]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[9618-9624]:SingleVariableDeclaration[9618-9624]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9626-9982]:Block[9626-9982]"
  }, {
    "left" : "if (n == null)",
    "right" : "if (n == null)",
    "info" : "IfStatement[9632-9690]:IfStatement[9632-9690]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9647-9690]:Block[9647-9690]"
  }, {
    "left" : "return MISSING_SOURCE + \"\\n\";",
    "right" : "return MISSING_SOURCE + \"\\n\";",
    "info" : "ReturnStatement[9655-9684]:ReturnStatement[9655-9684]"
  }, {
    "left" : "int lineNumber = n.getLineno();",
    "right" : "int lineNumber = n.getLineno();",
    "info" : "VariableDeclarationStatement[9696-9727]:VariableDeclarationStatement[9696-9727]"
  }, {
    "left" : "int columnNumber = n.getCharno();",
    "right" : "int columnNumber = n.getCharno();",
    "info" : "VariableDeclarationStatement[9732-9765]:VariableDeclarationStatement[9732-9765]"
  }, {
    "left" : "String src = compiler.getSourceLine(sourceName, lineNumber);",
    "right" : "String src = compiler.getSourceLine(sourceName, lineNumber);",
    "info" : "VariableDeclarationStatement[9770-9830]:VariableDeclarationStatement[9770-9830]"
  }, {
    "left" : "if (src == null)",
    "right" : "if (src == null)",
    "info" : "IfStatement[9835-9887]:IfStatement[9835-9887]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9852-9887]:Block[9852-9887]"
  }, {
    "left" : "src = MISSING_SOURCE;",
    "right" : "src = MISSING_SOURCE;",
    "info" : "ExpressionStatement[9860-9881]:ExpressionStatement[9860-9881]"
  }, {
    "left" : "return sourceName + \":\" + lineNumber + \":\" + columnNumber + \"\\n\"\n        + src + \"\\n\";",
    "right" : "return sourceName + \":\" + lineNumber + \":\" + columnNumber + \"\\n\"\n        + src + \"\\n\";",
    "info" : "ReturnStatement[9892-9978]:ReturnStatement[9892-9978]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[10179-10183]:PrimitiveType[10179-10183]"
  }, {
    "left" : "traverseWithScope",
    "right" : "traverseWithScope",
    "info" : "SimpleName[10184-10201]:SimpleName[10184-10201]"
  }, {
    "left" : "Node root",
    "right" : "Node root",
    "info" : "SingleVariableDeclaration[10202-10211]:SingleVariableDeclaration[10202-10211]"
  }, {
    "left" : "Scope s",
    "right" : "Scope s",
    "info" : "SingleVariableDeclaration[10213-10220]:SingleVariableDeclaration[10213-10220]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10222-10399]:Block[10222-10399]"
  }, {
    "left" : "Preconditions.checkState(s.isGlobal());",
    "right" : "Preconditions.checkState(s.isGlobal());",
    "info" : "ExpressionStatement[10228-10267]:ExpressionStatement[10228-10267]"
  }, {
    "left" : "inputId = null;",
    "right" : "inputId = null;",
    "info" : "ExpressionStatement[10273-10288]:ExpressionStatement[10273-10288]"
  }, {
    "left" : "sourceName = \"\";",
    "right" : "sourceName = \"\";",
    "info" : "ExpressionStatement[10293-10309]:ExpressionStatement[10293-10309]"
  }, {
    "left" : "curNode = root;",
    "right" : "curNode = root;",
    "info" : "ExpressionStatement[10314-10329]:ExpressionStatement[10314-10329]"
  }, {
    "left" : "pushScope(s);",
    "right" : "pushScope(s);",
    "info" : "ExpressionStatement[10334-10347]:ExpressionStatement[10334-10347]"
  }, {
    "left" : "traverseBranch(root, null);",
    "right" : "traverseBranch(root, null);",
    "info" : "ExpressionStatement[10352-10379]:ExpressionStatement[10352-10379]"
  }, {
    "left" : "popScope();",
    "right" : "popScope();",
    "info" : "ExpressionStatement[10384-10395]:ExpressionStatement[10384-10395]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[10505-10509]:PrimitiveType[10505-10509]"
  }, {
    "left" : "traverseAtScope",
    "right" : "traverseAtScope",
    "info" : "SimpleName[10510-10525]:SimpleName[10510-10525]"
  }, {
    "left" : "Scope s",
    "right" : "Scope s",
    "info" : "SingleVariableDeclaration[10526-10533]:SingleVariableDeclaration[10526-10533]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10535-11096]:Block[10535-11096]"
  }, {
    "left" : "Node n = s.getRootNode();",
    "right" : "Node n = s.getRootNode();",
    "info" : "VariableDeclarationStatement[10541-10566]:VariableDeclarationStatement[10541-10566]"
  }, {
    "left" : "if (n.isFunction())",
    "right" : "if (n.isFunction())",
    "info" : "IfStatement[10571-11092]:IfStatement[10571-11092]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10591-11048]:Block[10591-11048]"
  }, {
    "left" : "if (inputId == null)",
    "right" : "if (inputId == null)",
    "info" : "IfStatement[10731-10803]:IfStatement[10731-10803]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10752-10803]:Block[10752-10803]"
  }, {
    "left" : "inputId = NodeUtil.getInputId(n);",
    "right" : "inputId = NodeUtil.getInputId(n);",
    "info" : "ExpressionStatement[10762-10795]:ExpressionStatement[10762-10795]"
  }, {
    "left" : "sourceName = getSourceName(n);",
    "right" : "sourceName = getSourceName(n);",
    "info" : "ExpressionStatement[10810-10840]:ExpressionStatement[10810-10840]"
  }, {
    "left" : "curNode = n;",
    "right" : "curNode = n;",
    "info" : "ExpressionStatement[10847-10859]:ExpressionStatement[10847-10859]"
  }, {
    "left" : "pushScope(s);",
    "right" : "pushScope(s);",
    "info" : "ExpressionStatement[10866-10879]:ExpressionStatement[10866-10879]"
  }, {
    "left" : "Node args = n.getFirstChild().getNext();",
    "right" : "Node args = n.getFirstChild().getNext();",
    "info" : "VariableDeclarationStatement[10887-10927]:VariableDeclarationStatement[10887-10927]"
  }, {
    "left" : "Node body = args.getNext();",
    "right" : "Node body = args.getNext();",
    "info" : "VariableDeclarationStatement[10934-10961]:VariableDeclarationStatement[10934-10961]"
  }, {
    "left" : "traverseBranch(args, n);",
    "right" : "traverseBranch(args, n);",
    "info" : "ExpressionStatement[10968-10992]:ExpressionStatement[10968-10992]"
  }, {
    "left" : "traverseBranch(body, n);",
    "right" : "traverseBranch(body, n);",
    "info" : "ExpressionStatement[10999-11023]:ExpressionStatement[10999-11023]"
  }, {
    "left" : "popScope();",
    "right" : "popScope();",
    "info" : "ExpressionStatement[11031-11042]:ExpressionStatement[11031-11042]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11054-11092]:Block[11054-11092]"
  }, {
    "left" : "traverseWithScope(n, s);",
    "right" : "traverseWithScope(n, s);",
    "info" : "ExpressionStatement[11062-11086]:ExpressionStatement[11062-11086]"
  }, {
    "left" : "protected",
    "right" : "protected",
    "info" : "Modifier[11548-11557]:Modifier[11548-11557]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[11558-11562]:PrimitiveType[11558-11562]"
  }, {
    "left" : "traverseInnerNode",
    "right" : "traverseInnerNode",
    "info" : "SimpleName[11563-11580]:SimpleName[11563-11580]"
  }, {
    "left" : "Node node",
    "right" : "Node node",
    "info" : "SingleVariableDeclaration[11581-11590]:SingleVariableDeclaration[11581-11590]"
  }, {
    "left" : "Node parent",
    "right" : "Node parent",
    "info" : "SingleVariableDeclaration[11592-11603]:SingleVariableDeclaration[11592-11603]"
  }, {
    "left" : "Scope refinedScope",
    "right" : "Scope refinedScope",
    "info" : "SingleVariableDeclaration[11605-11623]:SingleVariableDeclaration[11605-11623]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11625-11894]:Block[11625-11894]"
  }, {
    "left" : "Preconditions.checkNotNull(parent);",
    "right" : "Preconditions.checkNotNull(parent);",
    "info" : "ExpressionStatement[11631-11666]:ExpressionStatement[11631-11666]"
  }, {
    "left" : "if (refinedScope != null && getScope() != refinedScope)",
    "right" : "if (refinedScope != null && getScope() != refinedScope)",
    "info" : "IfStatement[11671-11890]:IfStatement[11671-11890]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11727-11841]:Block[11727-11841]"
  }, {
    "left" : "curNode = node;",
    "right" : "curNode = node;",
    "info" : "ExpressionStatement[11735-11750]:ExpressionStatement[11735-11750]"
  }, {
    "left" : "pushScope(refinedScope);",
    "right" : "pushScope(refinedScope);",
    "info" : "ExpressionStatement[11757-11781]:ExpressionStatement[11757-11781]"
  }, {
    "left" : "traverseBranch(node, parent);",
    "right" : "traverseBranch(node, parent);",
    "info" : "ExpressionStatement[11788-11817]:ExpressionStatement[11788-11817]"
  }, {
    "left" : "popScope();",
    "right" : "popScope();",
    "info" : "ExpressionStatement[11824-11835]:ExpressionStatement[11824-11835]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11847-11890]:Block[11847-11890]"
  }, {
    "left" : "traverseBranch(node, parent);",
    "right" : "traverseBranch(node, parent);",
    "info" : "ExpressionStatement[11855-11884]:ExpressionStatement[11855-11884]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[11934-11940]:Modifier[11934-11940]"
  }, {
    "left" : "Compiler",
    "right" : "Compiler",
    "info" : "SimpleType[11941-11949]:SimpleType[11941-11949]"
  }, {
    "left" : "getCompiler",
    "right" : "getCompiler",
    "info" : "SimpleName[11950-11961]:SimpleName[11950-11961]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11964-12098]:Block[11964-12098]"
  }, {
    "left" : "return (Compiler) compiler;",
    "right" : "return (Compiler) compiler;",
    "info" : "ReturnStatement[12067-12094]:ReturnStatement[12067-12094]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[12258-12264]:Modifier[12258-12264]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[12265-12268]:PrimitiveType[12265-12268]"
  }, {
    "left" : "getLineNumber",
    "right" : "getLineNumber",
    "info" : "SimpleName[12269-12282]:SimpleName[12269-12282]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12285-12474]:Block[12285-12474]"
  }, {
    "left" : "Node cur = curNode;",
    "right" : "Node cur = curNode;",
    "info" : "VariableDeclarationStatement[12291-12310]:VariableDeclarationStatement[12291-12310]"
  }, {
    "left" : "while (cur != null)",
    "right" : "while (cur != null)",
    "info" : "WhileStatement[12315-12456]:WhileStatement[12315-12456]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12335-12456]:Block[12335-12456]"
  }, {
    "left" : "int line = cur.getLineno();",
    "right" : "int line = cur.getLineno();",
    "info" : "VariableDeclarationStatement[12343-12370]:VariableDeclarationStatement[12343-12370]"
  }, {
    "left" : "if (line >=0)",
    "right" : "if (line >=0)",
    "info" : "IfStatement[12377-12421]:IfStatement[12377-12421]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12391-12421]:Block[12391-12421]"
  }, {
    "left" : "return line;",
    "right" : "return line;",
    "info" : "ReturnStatement[12401-12413]:ReturnStatement[12401-12413]"
  }, {
    "left" : "cur = cur.getParent();",
    "right" : "cur = cur.getParent();",
    "info" : "ExpressionStatement[12428-12450]:ExpressionStatement[12428-12450]"
  }, {
    "left" : "return 0;",
    "right" : "return 0;",
    "info" : "ReturnStatement[12461-12470]:ReturnStatement[12461-12470]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[12590-12596]:Modifier[12590-12596]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[12597-12603]:SimpleType[12597-12603]"
  }, {
    "left" : "getSourceName",
    "right" : "getSourceName",
    "info" : "SimpleName[12604-12617]:SimpleName[12604-12617]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12620-12648]:Block[12620-12648]"
  }, {
    "left" : "return sourceName;",
    "right" : "return sourceName;",
    "info" : "ReturnStatement[12626-12644]:ReturnStatement[12626-12644]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[12700-12706]:Modifier[12700-12706]"
  }, {
    "left" : "CompilerInput",
    "right" : "CompilerInput",
    "info" : "SimpleType[12707-12720]:SimpleType[12707-12720]"
  }, {
    "left" : "getInput",
    "right" : "getInput",
    "info" : "SimpleName[12721-12729]:SimpleName[12721-12729]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12732-12776]:Block[12732-12776]"
  }, {
    "left" : "return compiler.getInput(inputId);",
    "right" : "return compiler.getInput(inputId);",
    "info" : "ReturnStatement[12738-12772]:ReturnStatement[12738-12772]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[12828-12834]:Modifier[12828-12834]"
  }, {
    "left" : "JSModule",
    "right" : "JSModule",
    "info" : "SimpleType[12835-12843]:SimpleType[12835-12843]"
  }, {
    "left" : "getModule",
    "right" : "getModule",
    "info" : "SimpleName[12844-12853]:SimpleName[12844-12853]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12856-12952]:Block[12856-12952]"
  }, {
    "left" : "CompilerInput input = getInput();",
    "right" : "CompilerInput input = getInput();",
    "info" : "VariableDeclarationStatement[12862-12895]:VariableDeclarationStatement[12862-12895]"
  }, {
    "left" : "return input == null ? null : input.getModule();",
    "right" : "return input == null ? null : input.getModule();",
    "info" : "ReturnStatement[12900-12948]:ReturnStatement[12900-12948]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[13009-13015]:Modifier[13009-13015]"
  }, {
    "left" : "Node",
    "right" : "Node",
    "info" : "SimpleType[13016-13020]:SimpleType[13016-13020]"
  }, {
    "left" : "getCurrentNode",
    "right" : "getCurrentNode",
    "info" : "SimpleName[13021-13035]:SimpleName[13021-13035]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13038-13063]:Block[13038-13063]"
  }, {
    "left" : "return curNode;",
    "right" : "return curNode;",
    "info" : "ReturnStatement[13044-13059]:ReturnStatement[13044-13059]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[13114-13120]:Modifier[13114-13120]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[13121-13127]:Modifier[13121-13127]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[13128-13132]:PrimitiveType[13128-13132]"
  }, {
    "left" : "traverse",
    "right" : "traverse",
    "info" : "SimpleName[13133-13141]:SimpleName[13133-13141]"
  }, {
    "left" : "AbstractCompiler compiler",
    "right" : "AbstractCompiler compiler",
    "info" : "SingleVariableDeclaration[13149-13174]:SingleVariableDeclaration[13149-13174]"
  }, {
    "left" : "Node root",
    "right" : "Node root",
    "info" : "SingleVariableDeclaration[13176-13185]:SingleVariableDeclaration[13176-13185]"
  }, {
    "left" : "Callback cb",
    "right" : "Callback cb",
    "info" : "SingleVariableDeclaration[13187-13198]:SingleVariableDeclaration[13187-13198]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13200-13282]:Block[13200-13282]"
  }, {
    "left" : "NodeTraversal t = new NodeTraversal(compiler, cb);",
    "right" : "NodeTraversal t = new NodeTraversal(compiler, cb);",
    "info" : "VariableDeclarationStatement[13206-13256]:VariableDeclarationStatement[13206-13256]"
  }, {
    "left" : "t.traverse(root);",
    "right" : "t.traverse(root);",
    "info" : "ExpressionStatement[13261-13278]:ExpressionStatement[13261-13278]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[13335-13341]:Modifier[13335-13341]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[13342-13348]:Modifier[13342-13348]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[13349-13353]:PrimitiveType[13349-13353]"
  }, {
    "left" : "traverseRoots",
    "right" : "traverseRoots",
    "info" : "SimpleName[13354-13367]:SimpleName[13354-13367]"
  }, {
    "left" : "AbstractCompiler compiler",
    "right" : "AbstractCompiler compiler",
    "info" : "SingleVariableDeclaration[13375-13400]:SingleVariableDeclaration[13375-13400]"
  }, {
    "left" : "List<Node> roots",
    "right" : "List<Node> roots",
    "info" : "SingleVariableDeclaration[13402-13418]:SingleVariableDeclaration[13402-13418]"
  }, {
    "left" : "Callback cb",
    "right" : "Callback cb",
    "info" : "SingleVariableDeclaration[13420-13431]:SingleVariableDeclaration[13420-13431]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13433-13521]:Block[13433-13521]"
  }, {
    "left" : "NodeTraversal t = new NodeTraversal(compiler, cb);",
    "right" : "NodeTraversal t = new NodeTraversal(compiler, cb);",
    "info" : "VariableDeclarationStatement[13439-13489]:VariableDeclarationStatement[13439-13489]"
  }, {
    "left" : "t.traverseRoots(roots);",
    "right" : "t.traverseRoots(roots);",
    "info" : "ExpressionStatement[13494-13517]:ExpressionStatement[13494-13517]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[13525-13531]:Modifier[13525-13531]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[13532-13538]:Modifier[13532-13538]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[13539-13543]:PrimitiveType[13539-13543]"
  }, {
    "left" : "traverseRoots",
    "right" : "traverseRoots",
    "info" : "SimpleName[13544-13557]:SimpleName[13544-13557]"
  }, {
    "left" : "AbstractCompiler compiler",
    "right" : "AbstractCompiler compiler",
    "info" : "SingleVariableDeclaration[13565-13590]:SingleVariableDeclaration[13565-13590]"
  }, {
    "left" : "Callback cb",
    "right" : "Callback cb",
    "info" : "SingleVariableDeclaration[13592-13603]:SingleVariableDeclaration[13592-13603]"
  }, {
    "left" : "Node ... roots",
    "right" : "Node ... roots",
    "info" : "SingleVariableDeclaration[13605-13619]:SingleVariableDeclaration[13605-13619]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13621-13709]:Block[13621-13709]"
  }, {
    "left" : "NodeTraversal t = new NodeTraversal(compiler, cb);",
    "right" : "NodeTraversal t = new NodeTraversal(compiler, cb);",
    "info" : "VariableDeclarationStatement[13627-13677]:VariableDeclarationStatement[13627-13677]"
  }, {
    "left" : "t.traverseRoots(roots);",
    "right" : "t.traverseRoots(roots);",
    "info" : "ExpressionStatement[13682-13705]:ExpressionStatement[13682-13705]"
  }, {
    "left" : "@SuppressWarnings(\"fallthrough\")",
    "right" : "@SuppressWarnings(\"fallthrough\")",
    "info" : "SingleMemberAnnotation[13750-13782]:SingleMemberAnnotation[13750-13782]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[13785-13792]:Modifier[13785-13792]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[13793-13797]:PrimitiveType[13793-13797]"
  }, {
    "left" : "traverseBranch",
    "right" : "traverseBranch",
    "info" : "SimpleName[13798-13812]:SimpleName[13798-13812]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[13813-13819]:SingleVariableDeclaration[13813-13819]"
  }, {
    "left" : "Node parent",
    "right" : "Node parent",
    "info" : "SingleVariableDeclaration[13821-13832]:SingleVariableDeclaration[13821-13832]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13834-14535]:Block[13834-14535]"
  }, {
    "left" : "int type = n.getType();",
    "right" : "int type = n.getType();",
    "info" : "VariableDeclarationStatement[13840-13863]:VariableDeclarationStatement[13840-13863]"
  }, {
    "left" : "if (type == Token.SCRIPT)",
    "right" : "if (type == Token.SCRIPT)",
    "info" : "IfStatement[13868-13970]:IfStatement[13868-13970]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13894-13970]:Block[13894-13970]"
  }, {
    "left" : "inputId = n.getInputId();",
    "right" : "inputId = n.getInputId();",
    "info" : "ExpressionStatement[13902-13927]:ExpressionStatement[13902-13927]"
  }, {
    "left" : "sourceName = getSourceName(n);",
    "right" : "sourceName = getSourceName(n);",
    "info" : "ExpressionStatement[13934-13964]:ExpressionStatement[13934-13964]"
  }, {
    "left" : "curNode = n;",
    "right" : "curNode = n;",
    "info" : "ExpressionStatement[13976-13988]:ExpressionStatement[13976-13988]"
  }, {
    "left" : "if (!callback.shouldTraverse(this, n, parent))",
    "right" : "if (!callback.shouldTraverse(this, n, parent))",
    "info" : "IfStatement[13993-14047]:IfStatement[13993-14047]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[14040-14047]:ReturnStatement[14040-14047]"
  }, {
    "left" : "switch (type) {\n      case Token.FUNCTION:\n        traverseFunction(n, parent);\n        break;\n\n      default:\n        for (Node child = n.getFirstChild(); child != null; ) {\n          // child could be replaced, in which case our child node\n          // would no longer point to the true next\n          Node next = child.getNext();\n          traverseBranch(child, n);\n          child = next;\n        }\n        break;\n    }",
    "right" : "switch (type) {\n      case Token.FUNCTION:\n        traverseFunction(n, parent);\n        break;\n\n      default:\n        for (Node child = n.getFirstChild(); child != null; ) {\n          // child could be replaced, in which case our child node\n          // would no longer point to the true next\n          Node next = child.getNext();\n          traverseBranch(child, n);\n          child = next;\n        }\n        break;\n    }",
    "info" : "SwitchStatement[14053-14476]:SwitchStatement[14053-14476]"
  }, {
    "left" : "case Token.FUNCTION:",
    "right" : "case Token.FUNCTION:",
    "info" : "SwitchCase[14075-14095]:SwitchCase[14075-14095]"
  }, {
    "left" : "traverseFunction(n, parent);",
    "right" : "traverseFunction(n, parent);",
    "info" : "ExpressionStatement[14104-14132]:ExpressionStatement[14104-14132]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[14141-14147]:BreakStatement[14141-14147]"
  }, {
    "left" : "default:",
    "right" : "default:",
    "info" : "SwitchCase[14155-14163]:SwitchCase[14155-14163]"
  }, {
    "left" : "for (Node child = n.getFirstChild(); child != null)",
    "right" : "for (Node child = n.getFirstChild(); child != null)",
    "info" : "ForStatement[14172-14455]:ForStatement[14172-14455]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14226-14455]:Block[14226-14455]"
  }, {
    "left" : "Node next = child.getNext();",
    "right" : "Node next = child.getNext();",
    "info" : "VariableDeclarationStatement[14357-14385]:VariableDeclarationStatement[14357-14385]"
  }, {
    "left" : "traverseBranch(child, n);",
    "right" : "traverseBranch(child, n);",
    "info" : "ExpressionStatement[14396-14421]:ExpressionStatement[14396-14421]"
  }, {
    "left" : "child = next;",
    "right" : "child = next;",
    "info" : "ExpressionStatement[14432-14445]:ExpressionStatement[14432-14445]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[14464-14470]:BreakStatement[14464-14470]"
  }, {
    "left" : "curNode = n;",
    "right" : "curNode = n;",
    "info" : "ExpressionStatement[14482-14494]:ExpressionStatement[14482-14494]"
  }, {
    "left" : "callback.visit(this, n, parent);",
    "right" : "callback.visit(this, n, parent);",
    "info" : "ExpressionStatement[14499-14531]:ExpressionStatement[14499-14531]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[14578-14585]:Modifier[14578-14585]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[14586-14590]:PrimitiveType[14586-14590]"
  }, {
    "left" : "traverseFunction",
    "right" : "traverseFunction",
    "info" : "SimpleName[14591-14607]:SimpleName[14591-14607]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[14608-14614]:SingleVariableDeclaration[14608-14614]"
  }, {
    "left" : "Node parent",
    "right" : "Node parent",
    "info" : "SingleVariableDeclaration[14616-14627]:SingleVariableDeclaration[14616-14627]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14629-15489]:Block[14629-15495]"
  }, {
    "left" : "Preconditions.checkState(n.getChildCount() == 3);",
    "right" : "Preconditions.checkState(n.getChildCount() == 3);",
    "info" : "ExpressionStatement[14635-14684]:ExpressionStatement[14635-14684]"
  }, {
    "left" : "Preconditions.checkState(n.isFunction());",
    "right" : "Preconditions.checkState(n.isFunction());",
    "info" : "ExpressionStatement[14689-14730]:ExpressionStatement[14689-14730]"
  }, {
    "left" : "final Node fnName = n.getFirstChild();",
    "right" : "final Node fnName = n.getFirstChild();",
    "info" : "VariableDeclarationStatement[14736-14774]:VariableDeclarationStatement[14736-14774]"
  }, {
    "left" : "boolean isFunctionExpression = (parent != null)\n        && NodeUtil.isFunctionExpression(n);",
    "right" : "boolean isFunctionExpression = (parent != null)\n        && NodeUtil.isFunctionExpression(n);",
    "info" : "VariableDeclarationStatement[14780-14872]:VariableDeclarationStatement[14780-14872]"
  }, {
    "left" : "if (!isFunctionExpression)",
    "right" : "if (!isFunctionExpression)",
    "info" : "IfStatement[14878-15022]:IfStatement[14878-15022]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14905-15022]:Block[14905-15022]"
  }, {
    "left" : "traverseBranch(fnName, n);",
    "right" : "traverseBranch(fnName, n);",
    "info" : "ExpressionStatement[14990-15016]:ExpressionStatement[14990-15016]"
  }, {
    "left" : "curNode = n;",
    "right" : "curNode = n;",
    "info" : "ExpressionStatement[15028-15040]:ExpressionStatement[15028-15040]"
  }, {
    "left" : "pushScope(n);",
    "right" : "pushScope(n);",
    "info" : "ExpressionStatement[15045-15058]:ExpressionStatement[15045-15058]"
  }, {
    "left" : "if (isFunctionExpression)",
    "right" : "if (isFunctionExpression)",
    "info" : "IfStatement[15064-15221]:IfStatement[15064-15221]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15090-15221]:Block[15090-15221]"
  }, {
    "left" : "traverseBranch(fnName, n);",
    "right" : "traverseBranch(fnName, n);",
    "info" : "ExpressionStatement[15189-15215]:ExpressionStatement[15189-15215]"
  }, {
    "left" : "final Node args = fnName.getNext();",
    "right" : "final Node args = fnName.getNext();",
    "info" : "VariableDeclarationStatement[15227-15262]:VariableDeclarationStatement[15227-15262]"
  }, {
    "left" : "final Node body = args.getNext();",
    "right" : "final Node body = args.getNext();",
    "info" : "VariableDeclarationStatement[15267-15300]:VariableDeclarationStatement[15267-15300]"
  }, {
    "left" : "traverseBranch(args, n);",
    "right" : "traverseBranch(args, n);",
    "info" : "ExpressionStatement[15318-15342]:ExpressionStatement[15318-15342]"
  }, {
    "left" : "Preconditions.checkState(body.getNext() == null &&\n            body.isBlock());",
    "right" : "Preconditions.checkState(body.getNext() == null &&\n            body.isBlock(), body);",
    "info" : "ExpressionStatement[15360-15439]:ExpressionStatement[15360-15445]"
  }, {
    "left" : "traverseBranch(body, n);",
    "right" : "traverseBranch(body, n);",
    "info" : "ExpressionStatement[15444-15468]:ExpressionStatement[15450-15474]"
  }, {
    "left" : "popScope();",
    "right" : "popScope();",
    "info" : "ExpressionStatement[15474-15485]:ExpressionStatement[15480-15491]"
  }, {
    "left" : "@SuppressWarnings(\"unchecked\")",
    "right" : "@SuppressWarnings(\"unchecked\")",
    "info" : "SingleMemberAnnotation[15573-15603]:SingleMemberAnnotation[15579-15609]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[15606-15612]:Modifier[15612-15618]"
  }, {
    "left" : "Node",
    "right" : "Node",
    "info" : "SimpleType[15613-15617]:SimpleType[15619-15623]"
  }, {
    "left" : "getEnclosingFunction",
    "right" : "getEnclosingFunction",
    "info" : "SimpleName[15618-15638]:SimpleName[15624-15644]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15641-15868]:Block[15647-15874]"
  }, {
    "left" : "if (scopes.size() + scopeRoots.size() < 2)",
    "right" : "if (scopes.size() + scopeRoots.size() < 2)",
    "info" : "IfStatement[15647-15864]:IfStatement[15653-15870]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15690-15716]:Block[15696-15722]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[15698-15710]:ReturnStatement[15704-15716]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15722-15864]:Block[15728-15870]"
  }, {
    "left" : "if (scopeRoots.isEmpty())",
    "right" : "if (scopeRoots.isEmpty())",
    "info" : "IfStatement[15730-15858]:IfStatement[15736-15864]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15756-15809]:Block[15762-15815]"
  }, {
    "left" : "return scopes.peek().getRootNode();",
    "right" : "return scopes.peek().getRootNode();",
    "info" : "ReturnStatement[15766-15801]:ReturnStatement[15772-15807]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15815-15858]:Block[15821-15864]"
  }, {
    "left" : "return scopeRoots.peek();",
    "right" : "return scopeRoots.peek();",
    "info" : "ReturnStatement[15825-15850]:ReturnStatement[15831-15856]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[15934-15941]:Modifier[15940-15947]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[15942-15946]:PrimitiveType[15948-15952]"
  }, {
    "left" : "pushScope",
    "right" : "pushScope",
    "info" : "SimpleName[15947-15956]:SimpleName[15953-15962]"
  }, {
    "left" : "Node node",
    "right" : "Node node",
    "info" : "SingleVariableDeclaration[15957-15966]:SingleVariableDeclaration[15963-15972]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15968-16145]:Block[15974-16151]"
  }, {
    "left" : "Preconditions.checkState(curNode != null);",
    "right" : "Preconditions.checkState(curNode != null);",
    "info" : "ExpressionStatement[15974-16016]:ExpressionStatement[15980-16022]"
  }, {
    "left" : "scopeRoots.push(node);",
    "right" : "scopeRoots.push(node);",
    "info" : "ExpressionStatement[16021-16043]:ExpressionStatement[16027-16049]"
  }, {
    "left" : "cfgs.push(null);",
    "right" : "cfgs.push(null);",
    "info" : "ExpressionStatement[16048-16064]:ExpressionStatement[16054-16070]"
  }, {
    "left" : "if (scopeCallback != null)",
    "right" : "if (scopeCallback != null)",
    "info" : "IfStatement[16069-16141]:IfStatement[16075-16147]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16096-16141]:Block[16102-16147]"
  }, {
    "left" : "scopeCallback.enterScope(this);",
    "right" : "scopeCallback.enterScope(this);",
    "info" : "ExpressionStatement[16104-16135]:ExpressionStatement[16110-16141]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[16211-16218]:Modifier[16217-16224]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[16219-16223]:PrimitiveType[16225-16229]"
  }, {
    "left" : "pushScope",
    "right" : "pushScope",
    "info" : "SimpleName[16224-16233]:SimpleName[16230-16239]"
  }, {
    "left" : "Scope s",
    "right" : "Scope s",
    "info" : "SingleVariableDeclaration[16234-16241]:SingleVariableDeclaration[16240-16247]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16243-16413]:Block[16249-16419]"
  }, {
    "left" : "Preconditions.checkState(curNode != null);",
    "right" : "Preconditions.checkState(curNode != null);",
    "info" : "ExpressionStatement[16249-16291]:ExpressionStatement[16255-16297]"
  }, {
    "left" : "scopes.push(s);",
    "right" : "scopes.push(s);",
    "info" : "ExpressionStatement[16296-16311]:ExpressionStatement[16302-16317]"
  }, {
    "left" : "cfgs.push(null);",
    "right" : "cfgs.push(null);",
    "info" : "ExpressionStatement[16316-16332]:ExpressionStatement[16322-16338]"
  }, {
    "left" : "if (scopeCallback != null)",
    "right" : "if (scopeCallback != null)",
    "info" : "IfStatement[16337-16409]:IfStatement[16343-16415]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16364-16409]:Block[16370-16415]"
  }, {
    "left" : "scopeCallback.enterScope(this);",
    "right" : "scopeCallback.enterScope(this);",
    "info" : "ExpressionStatement[16372-16403]:ExpressionStatement[16378-16409]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[16490-16497]:Modifier[16496-16503]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[16498-16502]:PrimitiveType[16504-16508]"
  }, {
    "left" : "popScope",
    "right" : "popScope",
    "info" : "SimpleName[16503-16511]:SimpleName[16509-16517]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16514-16706]:Block[16520-16712]"
  }, {
    "left" : "if (scopeCallback != null)",
    "right" : "if (scopeCallback != null)",
    "info" : "IfStatement[16520-16591]:IfStatement[16526-16597]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16547-16591]:Block[16553-16597]"
  }, {
    "left" : "scopeCallback.exitScope(this);",
    "right" : "scopeCallback.exitScope(this);",
    "info" : "ExpressionStatement[16555-16585]:ExpressionStatement[16561-16591]"
  }, {
    "left" : "if (scopeRoots.isEmpty())",
    "right" : "if (scopeRoots.isEmpty())",
    "info" : "IfStatement[16596-16686]:IfStatement[16602-16692]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16622-16649]:Block[16628-16655]"
  }, {
    "left" : "scopes.pop();",
    "right" : "scopes.pop();",
    "info" : "ExpressionStatement[16630-16643]:ExpressionStatement[16636-16649]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16655-16686]:Block[16661-16692]"
  }, {
    "left" : "scopeRoots.pop();",
    "right" : "scopeRoots.pop();",
    "info" : "ExpressionStatement[16663-16680]:ExpressionStatement[16669-16686]"
  }, {
    "left" : "cfgs.pop();",
    "right" : "cfgs.pop();",
    "info" : "ExpressionStatement[16691-16702]:ExpressionStatement[16697-16708]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[16743-16749]:Modifier[16749-16755]"
  }, {
    "left" : "Scope",
    "right" : "Scope",
    "info" : "SimpleType[16750-16755]:SimpleType[16756-16761]"
  }, {
    "left" : "getScope",
    "right" : "getScope",
    "info" : "SimpleName[16756-16764]:SimpleName[16762-16770]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16767-17107]:Block[16773-17113]"
  }, {
    "left" : "Scope scope = scopes.isEmpty() ? null : scopes.peek();",
    "right" : "Scope scope = scopes.isEmpty() ? null : scopes.peek();",
    "info" : "VariableDeclarationStatement[16773-16827]:VariableDeclarationStatement[16779-16833]"
  }, {
    "left" : "if (scopeRoots.isEmpty())",
    "right" : "if (scopeRoots.isEmpty())",
    "info" : "IfStatement[16832-16885]:IfStatement[16838-16891]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16858-16885]:Block[16864-16891]"
  }, {
    "left" : "return scope;",
    "right" : "return scope;",
    "info" : "ReturnStatement[16866-16879]:ReturnStatement[16872-16885]"
  }, {
    "left" : "Iterator<Node> it = scopeRoots.descendingIterator();",
    "right" : "Iterator<Node> it = scopeRoots.descendingIterator();",
    "info" : "VariableDeclarationStatement[16891-16943]:VariableDeclarationStatement[16897-16949]"
  }, {
    "left" : "while (it.hasNext())",
    "right" : "while (it.hasNext())",
    "info" : "WhileStatement[16948-17060]:WhileStatement[16954-17066]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16969-17060]:Block[16975-17066]"
  }, {
    "left" : "scope = scopeCreator.createScope(it.next(), scope);",
    "right" : "scope = scopeCreator.createScope(it.next(), scope);",
    "info" : "ExpressionStatement[16977-17028]:ExpressionStatement[16983-17034]"
  }, {
    "left" : "scopes.push(scope);",
    "right" : "scopes.push(scope);",
    "info" : "ExpressionStatement[17035-17054]:ExpressionStatement[17041-17060]"
  }, {
    "left" : "scopeRoots.clear();",
    "right" : "scopeRoots.clear();",
    "info" : "ExpressionStatement[17065-17084]:ExpressionStatement[17071-17090]"
  }, {
    "left" : "return scope;",
    "right" : "return scope;",
    "info" : "ReturnStatement[17090-17103]:ReturnStatement[17096-17109]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[17174-17180]:Modifier[17180-17186]"
  }, {
    "left" : "ControlFlowGraph<Node>",
    "right" : "ControlFlowGraph<Node>",
    "info" : "ParameterizedType[17181-17203]:ParameterizedType[17187-17209]"
  }, {
    "left" : "getControlFlowGraph",
    "right" : "getControlFlowGraph",
    "info" : "SimpleName[17204-17223]:SimpleName[17210-17229]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17226-17462]:Block[17232-17468]"
  }, {
    "left" : "if (cfgs.peek() == null)",
    "right" : "if (cfgs.peek() == null)",
    "info" : "IfStatement[17232-17434]:IfStatement[17238-17440]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17257-17434]:Block[17263-17440]"
  }, {
    "left" : "ControlFlowAnalysis cfa = new ControlFlowAnalysis(compiler, false, true);",
    "right" : "ControlFlowAnalysis cfa = new ControlFlowAnalysis(compiler, false, true);",
    "info" : "VariableDeclarationStatement[17265-17338]:VariableDeclarationStatement[17271-17344]"
  }, {
    "left" : "cfa.process(null, getScopeRoot());",
    "right" : "cfa.process(null, getScopeRoot());",
    "info" : "ExpressionStatement[17345-17379]:ExpressionStatement[17351-17385]"
  }, {
    "left" : "cfgs.pop();",
    "right" : "cfgs.pop();",
    "info" : "ExpressionStatement[17386-17397]:ExpressionStatement[17392-17403]"
  }, {
    "left" : "cfgs.push(cfa.getCfg());",
    "right" : "cfgs.push(cfa.getCfg());",
    "info" : "ExpressionStatement[17404-17428]:ExpressionStatement[17410-17434]"
  }, {
    "left" : "return cfgs.peek();",
    "right" : "return cfgs.peek();",
    "info" : "ReturnStatement[17439-17458]:ReturnStatement[17445-17464]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[17509-17515]:Modifier[17515-17521]"
  }, {
    "left" : "Node",
    "right" : "Node",
    "info" : "SimpleType[17516-17520]:SimpleType[17522-17526]"
  }, {
    "left" : "getScopeRoot",
    "right" : "getScopeRoot",
    "info" : "SimpleName[17521-17533]:SimpleName[17527-17539]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17536-17666]:Block[17542-17672]"
  }, {
    "left" : "if (scopeRoots.isEmpty())",
    "right" : "if (scopeRoots.isEmpty())",
    "info" : "IfStatement[17542-17662]:IfStatement[17548-17668]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17568-17617]:Block[17574-17623]"
  }, {
    "left" : "return scopes.peek().getRootNode();",
    "right" : "return scopes.peek().getRootNode();",
    "info" : "ReturnStatement[17576-17611]:ReturnStatement[17582-17617]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17623-17662]:Block[17629-17668]"
  }, {
    "left" : "return scopeRoots.peek();",
    "right" : "return scopeRoots.peek();",
    "info" : "ReturnStatement[17631-17656]:ReturnStatement[17637-17662]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[17754-17761]:PrimitiveType[17760-17767]"
  }, {
    "left" : "inGlobalScope",
    "right" : "inGlobalScope",
    "info" : "SimpleName[17762-17775]:SimpleName[17768-17781]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17778-17816]:Block[17784-17822]"
  }, {
    "left" : "return getScopeDepth() <= 1;",
    "right" : "return getScopeDepth() <= 1;",
    "info" : "ReturnStatement[17784-17812]:ReturnStatement[17790-17818]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[17820-17823]:PrimitiveType[17826-17829]"
  }, {
    "left" : "getScopeDepth",
    "right" : "getScopeDepth",
    "info" : "SimpleName[17824-17837]:SimpleName[17830-17843]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17840-17891]:Block[17846-17897]"
  }, {
    "left" : "return scopes.size() + scopeRoots.size();",
    "right" : "return scopes.size() + scopeRoots.size();",
    "info" : "ReturnStatement[17846-17887]:ReturnStatement[17852-17893]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[17895-17901]:Modifier[17901-17907]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[17902-17909]:PrimitiveType[17908-17915]"
  }, {
    "left" : "hasScope",
    "right" : "hasScope",
    "info" : "SimpleName[17910-17918]:SimpleName[17916-17924]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17921-17982]:Block[17927-17988]"
  }, {
    "left" : "return !(scopes.isEmpty() && scopeRoots.isEmpty());",
    "right" : "return !(scopes.isEmpty() && scopeRoots.isEmpty());",
    "info" : "ReturnStatement[17927-17978]:ReturnStatement[17933-17984]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[18035-18041]:Modifier[18041-18047]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[18042-18046]:PrimitiveType[18048-18052]"
  }, {
    "left" : "report",
    "right" : "report",
    "info" : "SimpleName[18047-18053]:SimpleName[18053-18059]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[18054-18060]:SingleVariableDeclaration[18060-18066]"
  }, {
    "left" : "DiagnosticType diagnosticType",
    "right" : "DiagnosticType diagnosticType",
    "info" : "SingleVariableDeclaration[18062-18091]:SingleVariableDeclaration[18068-18097]"
  }, {
    "left" : "String... arguments",
    "right" : "String... arguments",
    "info" : "SingleVariableDeclaration[18099-18118]:SingleVariableDeclaration[18105-18124]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18120-18234]:Block[18126-18240]"
  }, {
    "left" : "JSError error = JSError.make(getSourceName(), n, diagnosticType, arguments);",
    "right" : "JSError error = JSError.make(getSourceName(), n, diagnosticType, arguments);",
    "info" : "VariableDeclarationStatement[18126-18202]:VariableDeclarationStatement[18132-18208]"
  }, {
    "left" : "compiler.report(error);",
    "right" : "compiler.report(error);",
    "info" : "ExpressionStatement[18207-18230]:ExpressionStatement[18213-18236]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[18238-18245]:Modifier[18244-18251]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[18246-18252]:Modifier[18252-18258]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[18253-18259]:SimpleType[18259-18265]"
  }, {
    "left" : "getSourceName",
    "right" : "getSourceName",
    "info" : "SimpleName[18260-18273]:SimpleName[18266-18279]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[18274-18280]:SingleVariableDeclaration[18280-18286]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18282-18365]:Block[18288-18371]"
  }, {
    "left" : "String name = n.getSourceFileName();",
    "right" : "String name = n.getSourceFileName();",
    "info" : "VariableDeclarationStatement[18288-18324]:VariableDeclarationStatement[18294-18330]"
  }, {
    "left" : "return name == null ? \"\" : name;",
    "right" : "return name == null ? \"\" : name;",
    "info" : "ReturnStatement[18329-18361]:ReturnStatement[18335-18367]"
  }, {
    "left" : "InputId",
    "right" : "InputId",
    "info" : "SimpleType[18369-18376]:SimpleType[18375-18382]"
  }, {
    "left" : "getInputId",
    "right" : "getInputId",
    "info" : "SimpleName[18377-18387]:SimpleName[18383-18393]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18390-18415]:Block[18396-18421]"
  }, {
    "left" : "return inputId;",
    "right" : "return inputId;",
    "info" : "ReturnStatement[18396-18411]:ReturnStatement[18402-18417]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[18665-18671]:Modifier[18671-18677]"
  }, {
    "left" : "JSError",
    "right" : "JSError",
    "info" : "SimpleType[18672-18679]:SimpleType[18678-18685]"
  }, {
    "left" : "makeError",
    "right" : "makeError",
    "info" : "SimpleName[18680-18689]:SimpleName[18686-18695]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[18690-18696]:SingleVariableDeclaration[18696-18702]"
  }, {
    "left" : "CheckLevel level",
    "right" : "CheckLevel level",
    "info" : "SingleVariableDeclaration[18698-18714]:SingleVariableDeclaration[18704-18720]"
  }, {
    "left" : "DiagnosticType type",
    "right" : "DiagnosticType type",
    "info" : "SingleVariableDeclaration[18716-18735]:SingleVariableDeclaration[18722-18741]"
  }, {
    "left" : "String... arguments",
    "right" : "String... arguments",
    "info" : "SingleVariableDeclaration[18743-18762]:SingleVariableDeclaration[18749-18768]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18764-18838]:Block[18770-18844]"
  }, {
    "left" : "return JSError.make(getSourceName(), n, level, type, arguments);",
    "right" : "return JSError.make(getSourceName(), n, level, type, arguments);",
    "info" : "ReturnStatement[18770-18834]:ReturnStatement[18776-18840]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[19088-19094]:Modifier[19094-19100]"
  }, {
    "left" : "JSError",
    "right" : "JSError",
    "info" : "SimpleType[19095-19102]:SimpleType[19101-19108]"
  }, {
    "left" : "makeError",
    "right" : "makeError",
    "info" : "SimpleName[19103-19112]:SimpleName[19109-19118]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[19113-19119]:SingleVariableDeclaration[19119-19125]"
  }, {
    "left" : "DiagnosticType type",
    "right" : "DiagnosticType type",
    "info" : "SingleVariableDeclaration[19121-19140]:SingleVariableDeclaration[19127-19146]"
  }, {
    "left" : "String... arguments",
    "right" : "String... arguments",
    "info" : "SingleVariableDeclaration[19142-19161]:SingleVariableDeclaration[19148-19167]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[19163-19230]:Block[19169-19236]"
  }, {
    "left" : "return JSError.make(getSourceName(), n, type, arguments);",
    "right" : "return JSError.make(getSourceName(), n, type, arguments);",
    "info" : "ReturnStatement[19169-19226]:ReturnStatement[19175-19232]"
  } ]
}