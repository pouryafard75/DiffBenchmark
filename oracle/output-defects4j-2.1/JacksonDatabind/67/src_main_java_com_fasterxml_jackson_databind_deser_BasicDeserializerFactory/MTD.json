{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "BasicDeserializerFactory",
      "right" : "BasicDeserializerFactory",
      "info" : "TypeDeclaration[1040-88956]:TypeDeclaration[1040-88982]"
    }, {
      "left" : "private final static Class<?> CLASS_OBJECT = Object.class;",
      "right" : "private final static Class<?> CLASS_OBJECT = Object.class;",
      "info" : "FieldDeclaration[1610-1668]:FieldDeclaration[1610-1668]"
    }, {
      "left" : "private final static Class<?> CLASS_STRING = String.class;",
      "right" : "private final static Class<?> CLASS_STRING = String.class;",
      "info" : "FieldDeclaration[1673-1731]:FieldDeclaration[1673-1731]"
    }, {
      "left" : "private final static Class<?> CLASS_CHAR_BUFFER = CharSequence.class;",
      "right" : "private final static Class<?> CLASS_CHAR_BUFFER = CharSequence.class;",
      "info" : "FieldDeclaration[1736-1805]:FieldDeclaration[1736-1805]"
    }, {
      "left" : "private final static Class<?> CLASS_ITERABLE = Iterable.class;",
      "right" : "private final static Class<?> CLASS_ITERABLE = Iterable.class;",
      "info" : "FieldDeclaration[1810-1872]:FieldDeclaration[1810-1872]"
    }, {
      "left" : "private final static Class<?> CLASS_MAP_ENTRY = Map.Entry.class;",
      "right" : "private final static Class<?> CLASS_MAP_ENTRY = Map.Entry.class;",
      "info" : "FieldDeclaration[1877-1941]:FieldDeclaration[1877-1941]"
    }, {
      "left" : "protected final static PropertyName UNWRAPPED_CREATOR_PARAM_NAME = new PropertyName(\"@JsonUnwrapped\");",
      "right" : "protected final static PropertyName UNWRAPPED_CREATOR_PARAM_NAME = new PropertyName(\"@JsonUnwrapped\");",
      "info" : "FieldDeclaration[1947-2192]:FieldDeclaration[1947-2192]"
    }, {
      "left" : "@SuppressWarnings(\"rawtypes\")\n    final static HashMap<String, Class<? extends Map>> _mapFallbacks =\n        new HashMap<String, Class<? extends Map>>();",
      "right" : "@SuppressWarnings(\"rawtypes\")\n    final static HashMap<String, Class<? extends Map>> _mapFallbacks =\n        new HashMap<String, Class<? extends Map>>();",
      "info" : "FieldDeclaration[2398-2551]:FieldDeclaration[2398-2551]"
    }, {
      "left" : "@SuppressWarnings(\"rawtypes\")\n    final static HashMap<String, Class<? extends Collection>> _collectionFallbacks =\n        new HashMap<String, Class<? extends Collection>>();",
      "right" : "@SuppressWarnings(\"rawtypes\")\n    final static HashMap<String, Class<? extends Collection>> _collectionFallbacks =\n        new HashMap<String, Class<? extends Collection>>();",
      "info" : "FieldDeclaration[3243-3417]:FieldDeclaration[3243-3417]"
    }, {
      "left" : "protected final DeserializerFactoryConfig _factoryConfig;",
      "right" : "protected final DeserializerFactoryConfig _factoryConfig;",
      "info" : "FieldDeclaration[4407-4636]:FieldDeclaration[4407-4636]"
    }, {
      "left" : "protected BasicDeserializerFactory(DeserializerFactoryConfig config)",
      "right" : "protected BasicDeserializerFactory(DeserializerFactoryConfig config)",
      "info" : "MethodDeclaration[4804-4913]:MethodDeclaration[4804-4913]"
    }, {
      "left" : "public DeserializerFactoryConfig getFactoryConfig()",
      "right" : "public DeserializerFactoryConfig getFactoryConfig()",
      "info" : "MethodDeclaration[4923-5300]:MethodDeclaration[4923-5300]"
    }, {
      "left" : "protected abstract DeserializerFactory withConfig(DeserializerFactoryConfig config);",
      "right" : "protected abstract DeserializerFactory withConfig(DeserializerFactoryConfig config);",
      "info" : "MethodDeclaration[5306-5390]:MethodDeclaration[5306-5390]"
    }, {
      "left" : "public final DeserializerFactory withAdditionalDeserializers(Deserializers additional)",
      "right" : "public final DeserializerFactory withAdditionalDeserializers(Deserializers additional)",
      "info" : "MethodDeclaration[5588-5903]:MethodDeclaration[5588-5903]"
    }, {
      "left" : "public final DeserializerFactory withAdditionalKeyDeserializers(KeyDeserializers additional)",
      "right" : "public final DeserializerFactory withAdditionalKeyDeserializers(KeyDeserializers additional)",
      "info" : "MethodDeclaration[5909-6236]:MethodDeclaration[5909-6236]"
    }, {
      "left" : "public final DeserializerFactory withDeserializerModifier(BeanDeserializerModifier modifier)",
      "right" : "public final DeserializerFactory withDeserializerModifier(BeanDeserializerModifier modifier)",
      "info" : "MethodDeclaration[6246-6573]:MethodDeclaration[6246-6573]"
    }, {
      "left" : "public final DeserializerFactory withAbstractTypeResolver(AbstractTypeResolver resolver)",
      "right" : "public final DeserializerFactory withAbstractTypeResolver(AbstractTypeResolver resolver)",
      "info" : "MethodDeclaration[6579-6898]:MethodDeclaration[6579-6898]"
    }, {
      "left" : "public final DeserializerFactory withValueInstantiators(ValueInstantiators instantiators)",
      "right" : "public final DeserializerFactory withValueInstantiators(ValueInstantiators instantiators)",
      "info" : "MethodDeclaration[6904-7225]:MethodDeclaration[6904-7225]"
    }, {
      "left" : "public JavaType mapAbstractType(DeserializationConfig config, JavaType type) throws JsonMappingException",
      "right" : "public JavaType mapAbstractType(DeserializationConfig config, JavaType type) throws JsonMappingException",
      "info" : "MethodDeclaration[7432-8324]:MethodDeclaration[7432-8324]"
    }, {
      "left" : "private JavaType _mapAbstractType2(DeserializationConfig config, JavaType type)\n        throws JsonMappingException",
      "right" : "private JavaType _mapAbstractType2(DeserializationConfig config, JavaType type)\n        throws JsonMappingException",
      "info" : "MethodDeclaration[8330-9100]:MethodDeclaration[8330-9100]"
    }, {
      "left" : "public ValueInstantiator findValueInstantiator(DeserializationContext ctxt,\n            BeanDescription beanDesc)\n        throws JsonMappingException",
      "right" : "public ValueInstantiator findValueInstantiator(DeserializationContext ctxt,\n            BeanDescription beanDesc)\n        throws JsonMappingException",
      "info" : "MethodDeclaration[9320-11708]:MethodDeclaration[9320-11708]"
    }, {
      "left" : "private ValueInstantiator _findStdValueInstantiator(DeserializationConfig config,\n            BeanDescription beanDesc)\n        throws JsonMappingException",
      "right" : "private ValueInstantiator _findStdValueInstantiator(DeserializationConfig config,\n            BeanDescription beanDesc)\n        throws JsonMappingException",
      "info" : "MethodDeclaration[11714-12024]:MethodDeclaration[11714-12024]"
    }, {
      "left" : "protected ValueInstantiator _constructDefaultValueInstantiator(DeserializationContext ctxt,\n            BeanDescription beanDesc)\n        throws JsonMappingException",
      "right" : "protected ValueInstantiator _constructDefaultValueInstantiator(DeserializationContext ctxt,\n            BeanDescription beanDesc)\n        throws JsonMappingException",
      "info" : "MethodDeclaration[12030-13973]:MethodDeclaration[12030-13973]"
    }, {
      "left" : "protected Map<AnnotatedWithParams,BeanPropertyDefinition[]> _findCreatorsFromProperties(DeserializationContext ctxt,\n            BeanDescription beanDesc) throws JsonMappingException",
      "right" : "protected Map<AnnotatedWithParams,BeanPropertyDefinition[]> _findCreatorsFromProperties(DeserializationContext ctxt,\n            BeanDescription beanDesc) throws JsonMappingException",
      "info" : "MethodDeclaration[13979-15492]:MethodDeclaration[13979-15492]"
    }, {
      "left" : "public ValueInstantiator _valueInstantiatorInstance(DeserializationConfig config,\n            Annotated annotated, Object instDef)\n        throws JsonMappingException",
      "right" : "public ValueInstantiator _valueInstantiatorInstance(DeserializationConfig config,\n            Annotated annotated, Object instDef)\n        throws JsonMappingException",
      "info" : "MethodDeclaration[15502-16964]:MethodDeclaration[15502-16964]"
    }, {
      "left" : "protected void _addDeserializerConstructors\n        (DeserializationContext ctxt, BeanDescription beanDesc, VisibilityChecker<?> vchecker,\n         AnnotationIntrospector intr, CreatorCollector creators,\n         Map<AnnotatedWithParams,BeanPropertyDefinition[]> creatorParams)\n        throws JsonMappingException",
      "right" : "protected void _addDeserializerConstructors\n        (DeserializationContext ctxt, BeanDescription beanDesc, VisibilityChecker<?> vchecker,\n         AnnotationIntrospector intr, CreatorCollector creators,\n         Map<AnnotatedWithParams,BeanPropertyDefinition[]> creatorParams)\n        throws JsonMappingException",
      "info" : "MethodDeclaration[16970-24369]:MethodDeclaration[16970-24369]"
    }, {
      "left" : "protected void _checkImplicitlyNamedConstructors(DeserializationContext ctxt,\n            BeanDescription beanDesc, VisibilityChecker<?> vchecker,\n            AnnotationIntrospector intr, CreatorCollector creators,\n            List<AnnotatedConstructor> implicitCtors) throws JsonMappingException",
      "right" : "protected void _checkImplicitlyNamedConstructors(DeserializationContext ctxt,\n            BeanDescription beanDesc, VisibilityChecker<?> vchecker,\n            AnnotationIntrospector intr, CreatorCollector creators,\n            List<AnnotatedConstructor> implicitCtors) throws JsonMappingException",
      "info" : "MethodDeclaration[24375-26898]:MethodDeclaration[24375-26898]"
    }, {
      "left" : "protected boolean _checkIfCreatorPropertyBased(AnnotationIntrospector intr,\n            AnnotatedWithParams creator, BeanPropertyDefinition propDef)",
      "right" : "protected boolean _checkIfCreatorPropertyBased(AnnotationIntrospector intr,\n            AnnotatedWithParams creator, BeanPropertyDefinition propDef)",
      "info" : "MethodDeclaration[26904-28037]:MethodDeclaration[26904-28037]"
    }, {
      "left" : "protected boolean _handleSingleArgumentConstructor(DeserializationContext ctxt,\n            BeanDescription beanDesc, VisibilityChecker<?> vchecker,\n            AnnotationIntrospector intr, CreatorCollector creators,\n            AnnotatedConstructor ctor, boolean isCreator, boolean isVisible)\n        throws JsonMappingException",
      "right" : "protected boolean _handleSingleArgumentConstructor(DeserializationContext ctxt,\n            BeanDescription beanDesc, VisibilityChecker<?> vchecker,\n            AnnotationIntrospector intr, CreatorCollector creators,\n            AnnotatedConstructor ctor, boolean isCreator, boolean isVisible)\n        throws JsonMappingException",
      "info" : "MethodDeclaration[28047-29779]:MethodDeclaration[28047-29779]"
    }, {
      "left" : "protected void _addDeserializerFactoryMethods\n        (DeserializationContext ctxt, BeanDescription beanDesc, VisibilityChecker<?> vchecker,\n         AnnotationIntrospector intr, CreatorCollector creators,\n         Map<AnnotatedWithParams,BeanPropertyDefinition[]> creatorParams)\n        throws JsonMappingException",
      "right" : "protected void _addDeserializerFactoryMethods\n        (DeserializationContext ctxt, BeanDescription beanDesc, VisibilityChecker<?> vchecker,\n         AnnotationIntrospector intr, CreatorCollector creators,\n         Map<AnnotatedWithParams,BeanPropertyDefinition[]> creatorParams)\n        throws JsonMappingException",
      "info" : "MethodDeclaration[29785-35687]:MethodDeclaration[29785-35687]"
    }, {
      "left" : "protected boolean _handleSingleArgumentFactory(DeserializationConfig config,\n            BeanDescription beanDesc, VisibilityChecker<?> vchecker,\n            AnnotationIntrospector intr, CreatorCollector creators,\n            AnnotatedMethod factory, boolean isCreator)\n        throws JsonMappingException",
      "right" : "protected boolean _handleSingleArgumentFactory(DeserializationConfig config,\n            BeanDescription beanDesc, VisibilityChecker<?> vchecker,\n            AnnotationIntrospector intr, CreatorCollector creators,\n            AnnotatedMethod factory, boolean isCreator)\n        throws JsonMappingException",
      "info" : "MethodDeclaration[35693-37419]:MethodDeclaration[35693-37419]"
    }, {
      "left" : "protected SettableBeanProperty constructCreatorProperty(DeserializationContext ctxt,\n            BeanDescription beanDesc, PropertyName name, int index,\n            AnnotatedParameter param,\n            Object injectableValueId)\n        throws JsonMappingException",
      "right" : "protected SettableBeanProperty constructCreatorProperty(DeserializationContext ctxt,\n            BeanDescription beanDesc, PropertyName name, int index,\n            AnnotatedParameter param,\n            Object injectableValueId)\n        throws JsonMappingException",
      "info" : "MethodDeclaration[37425-39998]:MethodDeclaration[37425-39998]"
    }, {
      "left" : "protected PropertyName _findParamName(AnnotatedParameter param, AnnotationIntrospector intr)",
      "right" : "protected PropertyName _findParamName(AnnotatedParameter param, AnnotationIntrospector intr)",
      "info" : "MethodDeclaration[40004-40634]:MethodDeclaration[40004-40634]"
    }, {
      "left" : "protected PropertyName _findImplicitParamName(AnnotatedParameter param, AnnotationIntrospector intr)",
      "right" : "protected PropertyName _findImplicitParamName(AnnotatedParameter param, AnnotationIntrospector intr)",
      "info" : "MethodDeclaration[40640-40935]:MethodDeclaration[40640-40935]"
    }, {
      "left" : "// in 2.6, remove from 2.7\n    protected PropertyName _findExplicitParamName(AnnotatedParameter param, AnnotationIntrospector intr)",
      "right" : "// in 2.6, remove from 2.7\n    protected PropertyName _findExplicitParamName(AnnotatedParameter param, AnnotationIntrospector intr)",
      "info" : "MethodDeclaration[40941-41231]:MethodDeclaration[40941-41231]"
    }, {
      "left" : "// in 2.6, remove from 2.7\n    protected boolean _hasExplicitParamName(AnnotatedParameter param, AnnotationIntrospector intr)",
      "right" : "// in 2.6, remove from 2.7\n    protected boolean _hasExplicitParamName(AnnotatedParameter param, AnnotationIntrospector intr)",
      "info" : "MethodDeclaration[41237-41585]:MethodDeclaration[41237-41585]"
    }, {
      "left" : "public JsonDeserializer<?> createArrayDeserializer(DeserializationContext ctxt,\n            ArrayType type, final BeanDescription beanDesc)\n        throws JsonMappingException",
      "right" : "public JsonDeserializer<?> createArrayDeserializer(DeserializationContext ctxt,\n            ArrayType type, final BeanDescription beanDesc)\n        throws JsonMappingException",
      "info" : "MethodDeclaration[41800-43632]:MethodDeclaration[41800-43632]"
    }, {
      "left" : "public JsonDeserializer<?> createCollectionDeserializer(DeserializationContext ctxt,\n            CollectionType type, BeanDescription beanDesc)\n        throws JsonMappingException",
      "right" : "public JsonDeserializer<?> createCollectionDeserializer(DeserializationContext ctxt,\n            CollectionType type, BeanDescription beanDesc)\n        throws JsonMappingException",
      "info" : "MethodDeclaration[43851-47856]:MethodDeclaration[43851-47856]"
    }, {
      "left" : "protected CollectionType _mapAbstractCollectionType(JavaType type, DeserializationConfig config)",
      "right" : "protected CollectionType _mapAbstractCollectionType(JavaType type, DeserializationConfig config)",
      "info" : "MethodDeclaration[47862-48266]:MethodDeclaration[47862-48266]"
    }, {
      "left" : "public JsonDeserializer<?> createCollectionLikeDeserializer(DeserializationContext ctxt,\n            CollectionLikeType type, final BeanDescription beanDesc)\n        throws JsonMappingException",
      "right" : "public JsonDeserializer<?> createCollectionLikeDeserializer(DeserializationContext ctxt,\n            CollectionLikeType type, final BeanDescription beanDesc)\n        throws JsonMappingException",
      "info" : "MethodDeclaration[48375-49794]:MethodDeclaration[48375-49794]"
    }, {
      "left" : "public JsonDeserializer<?> createMapDeserializer(DeserializationContext ctxt,\n            MapType type, BeanDescription beanDesc)\n        throws JsonMappingException",
      "right" : "public JsonDeserializer<?> createMapDeserializer(DeserializationContext ctxt,\n            MapType type, BeanDescription beanDesc)\n        throws JsonMappingException",
      "info" : "MethodDeclaration[50006-54724]:MethodDeclaration[50006-54724]"
    }, {
      "left" : "public JsonDeserializer<?> createMapLikeDeserializer(DeserializationContext ctxt,\n            MapLikeType type, final BeanDescription beanDesc)\n        throws JsonMappingException",
      "right" : "public JsonDeserializer<?> createMapLikeDeserializer(DeserializationContext ctxt,\n            MapLikeType type, final BeanDescription beanDesc)\n        throws JsonMappingException",
      "info" : "MethodDeclaration[54822-56697]:MethodDeclaration[54822-56697]"
    }, {
      "left" : "public JsonDeserializer<?> createEnumDeserializer(DeserializationContext ctxt,\n            JavaType type, BeanDescription beanDesc)\n        throws JsonMappingException",
      "right" : "public JsonDeserializer<?> createEnumDeserializer(DeserializationContext ctxt,\n            JavaType type, BeanDescription beanDesc)\n        throws JsonMappingException",
      "info" : "MethodDeclaration[56900-59249]:MethodDeclaration[56900-59249]"
    }, {
      "left" : "public JsonDeserializer<?> createTreeDeserializer(DeserializationConfig config,\n            JavaType nodeType, BeanDescription beanDesc)\n        throws JsonMappingException",
      "right" : "public JsonDeserializer<?> createTreeDeserializer(DeserializationConfig config,\n            JavaType nodeType, BeanDescription beanDesc)\n        throws JsonMappingException",
      "info" : "MethodDeclaration[59255-59887]:MethodDeclaration[59255-59887]"
    }, {
      "left" : "public JsonDeserializer<?> createReferenceDeserializer(DeserializationContext ctxt,\n            ReferenceType type, BeanDescription beanDesc)\n        throws JsonMappingException",
      "right" : "public JsonDeserializer<?> createReferenceDeserializer(DeserializationContext ctxt,\n            ReferenceType type, BeanDescription beanDesc)\n        throws JsonMappingException",
      "info" : "MethodDeclaration[59893-61546]:MethodDeclaration[59893-61546]"
    }, {
      "left" : "public TypeDeserializer findTypeDeserializer(DeserializationConfig config,\n            JavaType baseType)\n        throws JsonMappingException",
      "right" : "public TypeDeserializer findTypeDeserializer(DeserializationConfig config,\n            JavaType baseType)\n        throws JsonMappingException",
      "info" : "MethodDeclaration[61762-63242]:MethodDeclaration[61762-63242]"
    }, {
      "left" : "protected JsonDeserializer<?> findOptionalStdDeserializer(DeserializationContext ctxt,\n            JavaType type, BeanDescription beanDesc)\n        throws JsonMappingException",
      "right" : "protected JsonDeserializer<?> findOptionalStdDeserializer(DeserializationContext ctxt,\n            JavaType type, BeanDescription beanDesc)\n        throws JsonMappingException",
      "info" : "MethodDeclaration[63248-63641]:MethodDeclaration[63248-63641]"
    }, {
      "left" : "public KeyDeserializer createKeyDeserializer(DeserializationContext ctxt,\n            JavaType type)\n        throws JsonMappingException",
      "right" : "public KeyDeserializer createKeyDeserializer(DeserializationContext ctxt,\n            JavaType type)\n        throws JsonMappingException",
      "info" : "MethodDeclaration[63864-65173]:MethodDeclaration[63864-65199]"
    }, {
      "left" : "private KeyDeserializer _createEnumKeyDeserializer(DeserializationContext ctxt,\n            JavaType type)\n        throws JsonMappingException",
      "right" : "private KeyDeserializer _createEnumKeyDeserializer(DeserializationContext ctxt,\n            JavaType type)\n        throws JsonMappingException",
      "info" : "MethodDeclaration[65179-68187]:MethodDeclaration[65205-68213]"
    }, {
      "left" : "public TypeDeserializer findPropertyTypeDeserializer(DeserializationConfig config,\n            JavaType baseType, AnnotatedMember annotated)\n        throws JsonMappingException",
      "right" : "public TypeDeserializer findPropertyTypeDeserializer(DeserializationConfig config,\n            JavaType baseType, AnnotatedMember annotated)\n        throws JsonMappingException",
      "info" : "MethodDeclaration[68357-69830]:MethodDeclaration[68383-69856]"
    }, {
      "left" : "public TypeDeserializer findPropertyContentTypeDeserializer(DeserializationConfig config,\n            JavaType containerType, AnnotatedMember propertyEntity)\n        throws JsonMappingException",
      "right" : "public TypeDeserializer findPropertyContentTypeDeserializer(DeserializationConfig config,\n            JavaType containerType, AnnotatedMember propertyEntity)\n        throws JsonMappingException",
      "info" : "MethodDeclaration[69840-71355]:MethodDeclaration[69866-71381]"
    }, {
      "left" : "public JsonDeserializer<?> findDefaultDeserializer(DeserializationContext ctxt,\n            JavaType type, BeanDescription beanDesc)\n        throws JsonMappingException",
      "right" : "public JsonDeserializer<?> findDefaultDeserializer(DeserializationContext ctxt,\n            JavaType type, BeanDescription beanDesc)\n        throws JsonMappingException",
      "info" : "MethodDeclaration[71361-74754]:MethodDeclaration[71387-74780]"
    }, {
      "left" : "protected JavaType _findRemappedType(DeserializationConfig config, Class<?> rawType) throws JsonMappingException",
      "right" : "protected JavaType _findRemappedType(DeserializationConfig config, Class<?> rawType) throws JsonMappingException",
      "info" : "MethodDeclaration[74760-75034]:MethodDeclaration[74786-75060]"
    }, {
      "left" : "protected JsonDeserializer<?> _findCustomTreeNodeDeserializer(Class<? extends JsonNode> type,\n            DeserializationConfig config, BeanDescription beanDesc)\n        throws JsonMappingException",
      "right" : "protected JsonDeserializer<?> _findCustomTreeNodeDeserializer(Class<? extends JsonNode> type,\n            DeserializationConfig config, BeanDescription beanDesc)\n        throws JsonMappingException",
      "info" : "MethodDeclaration[75236-75711]:MethodDeclaration[75262-75737]"
    }, {
      "left" : "protected JsonDeserializer<?> _findCustomReferenceDeserializer(ReferenceType type,\n            DeserializationConfig config, BeanDescription beanDesc,\n            TypeDeserializer contentTypeDeserializer, JsonDeserializer<?> contentDeserializer)\n        throws JsonMappingException",
      "right" : "protected JsonDeserializer<?> _findCustomReferenceDeserializer(ReferenceType type,\n            DeserializationConfig config, BeanDescription beanDesc,\n            TypeDeserializer contentTypeDeserializer, JsonDeserializer<?> contentDeserializer)\n        throws JsonMappingException",
      "info" : "MethodDeclaration[75717-76343]:MethodDeclaration[75743-76369]"
    }, {
      "left" : "protected JsonDeserializer<Object> _findCustomBeanDeserializer(JavaType type,\n            DeserializationConfig config, BeanDescription beanDesc)\n        throws JsonMappingException",
      "right" : "protected JsonDeserializer<Object> _findCustomBeanDeserializer(JavaType type,\n            DeserializationConfig config, BeanDescription beanDesc)\n        throws JsonMappingException",
      "info" : "MethodDeclaration[76349-76866]:MethodDeclaration[76375-76892]"
    }, {
      "left" : "protected JsonDeserializer<?> _findCustomArrayDeserializer(ArrayType type,\n            DeserializationConfig config, BeanDescription beanDesc,\n            TypeDeserializer elementTypeDeserializer, JsonDeserializer<?> elementDeserializer)\n        throws JsonMappingException",
      "right" : "protected JsonDeserializer<?> _findCustomArrayDeserializer(ArrayType type,\n            DeserializationConfig config, BeanDescription beanDesc,\n            TypeDeserializer elementTypeDeserializer, JsonDeserializer<?> elementDeserializer)\n        throws JsonMappingException",
      "info" : "MethodDeclaration[76872-77486]:MethodDeclaration[76898-77512]"
    }, {
      "left" : "protected JsonDeserializer<?> _findCustomCollectionDeserializer(CollectionType type,\n            DeserializationConfig config, BeanDescription beanDesc,\n            TypeDeserializer elementTypeDeserializer, JsonDeserializer<?> elementDeserializer)\n        throws JsonMappingException",
      "right" : "protected JsonDeserializer<?> _findCustomCollectionDeserializer(CollectionType type,\n            DeserializationConfig config, BeanDescription beanDesc,\n            TypeDeserializer elementTypeDeserializer, JsonDeserializer<?> elementDeserializer)\n        throws JsonMappingException",
      "info" : "MethodDeclaration[77496-78125]:MethodDeclaration[77522-78151]"
    }, {
      "left" : "protected JsonDeserializer<?> _findCustomCollectionLikeDeserializer(CollectionLikeType type,\n            DeserializationConfig config, BeanDescription beanDesc,\n            TypeDeserializer elementTypeDeserializer, JsonDeserializer<?> elementDeserializer)\n        throws JsonMappingException",
      "right" : "protected JsonDeserializer<?> _findCustomCollectionLikeDeserializer(CollectionLikeType type,\n            DeserializationConfig config, BeanDescription beanDesc,\n            TypeDeserializer elementTypeDeserializer, JsonDeserializer<?> elementDeserializer)\n        throws JsonMappingException",
      "info" : "MethodDeclaration[78135-78776]:MethodDeclaration[78161-78802]"
    }, {
      "left" : "protected JsonDeserializer<?> _findCustomEnumDeserializer(Class<?> type,\n            DeserializationConfig config, BeanDescription beanDesc)\n        throws JsonMappingException",
      "right" : "protected JsonDeserializer<?> _findCustomEnumDeserializer(Class<?> type,\n            DeserializationConfig config, BeanDescription beanDesc)\n        throws JsonMappingException",
      "info" : "MethodDeclaration[78782-79232]:MethodDeclaration[78808-79258]"
    }, {
      "left" : "protected JsonDeserializer<?> _findCustomMapDeserializer(MapType type,\n            DeserializationConfig config, BeanDescription beanDesc,\n            KeyDeserializer keyDeserializer,\n            TypeDeserializer elementTypeDeserializer, JsonDeserializer<?> elementDeserializer)\n        throws JsonMappingException",
      "right" : "protected JsonDeserializer<?> _findCustomMapDeserializer(MapType type,\n            DeserializationConfig config, BeanDescription beanDesc,\n            KeyDeserializer keyDeserializer,\n            TypeDeserializer elementTypeDeserializer, JsonDeserializer<?> elementDeserializer)\n        throws JsonMappingException",
      "info" : "MethodDeclaration[79242-79912]:MethodDeclaration[79268-79938]"
    }, {
      "left" : "protected JsonDeserializer<?> _findCustomMapLikeDeserializer(MapLikeType type,\n            DeserializationConfig config, BeanDescription beanDesc,\n            KeyDeserializer keyDeserializer,\n            TypeDeserializer elementTypeDeserializer, JsonDeserializer<?> elementDeserializer)\n        throws JsonMappingException",
      "right" : "protected JsonDeserializer<?> _findCustomMapLikeDeserializer(MapLikeType type,\n            DeserializationConfig config, BeanDescription beanDesc,\n            KeyDeserializer keyDeserializer,\n            TypeDeserializer elementTypeDeserializer, JsonDeserializer<?> elementDeserializer)\n        throws JsonMappingException",
      "info" : "MethodDeclaration[79918-80600]:MethodDeclaration[79944-80626]"
    }, {
      "left" : "protected JsonDeserializer<Object> findDeserializerFromAnnotation(DeserializationContext ctxt,\n            Annotated ann)\n        throws JsonMappingException",
      "right" : "protected JsonDeserializer<Object> findDeserializerFromAnnotation(DeserializationContext ctxt,\n            Annotated ann)\n        throws JsonMappingException",
      "info" : "MethodDeclaration[80814-81681]:MethodDeclaration[80840-81707]"
    }, {
      "left" : "protected KeyDeserializer findKeyDeserializerFromAnnotation(DeserializationContext ctxt,\n            Annotated ann)\n            throws JsonMappingException",
      "right" : "protected KeyDeserializer findKeyDeserializerFromAnnotation(DeserializationContext ctxt,\n            Annotated ann)\n            throws JsonMappingException",
      "info" : "MethodDeclaration[81687-82360]:MethodDeclaration[81713-82386]"
    }, {
      "left" : "protected JavaType resolveMemberAndTypeAnnotations(DeserializationContext ctxt,\n            AnnotatedMember member, JavaType type)\n        throws JsonMappingException",
      "right" : "protected JavaType resolveMemberAndTypeAnnotations(DeserializationContext ctxt,\n            AnnotatedMember member, JavaType type)\n        throws JsonMappingException",
      "info" : "MethodDeclaration[82366-84990]:MethodDeclaration[82392-85016]"
    }, {
      "left" : "protected EnumResolver constructEnumResolver(Class<?> enumClass,\n            DeserializationConfig config, AnnotatedMethod jsonValueMethod)",
      "right" : "protected EnumResolver constructEnumResolver(Class<?> enumClass,\n            DeserializationConfig config, AnnotatedMethod jsonValueMethod)",
      "info" : "MethodDeclaration[84996-85831]:MethodDeclaration[85022-85857]"
    }, {
      "left" : "protected JavaType modifyTypeByAnnotation(DeserializationContext ctxt,\n            Annotated a, JavaType type)\n        throws JsonMappingException",
      "right" : "protected JavaType modifyTypeByAnnotation(DeserializationContext ctxt,\n            Annotated a, JavaType type)\n        throws JsonMappingException",
      "info" : "MethodDeclaration[86018-88100]:MethodDeclaration[86044-88126]"
    }, {
      "left" : "// since 2.8\n    protected JavaType resolveType(DeserializationContext ctxt,\n            BeanDescription beanDesc, JavaType type, AnnotatedMember member)\n        throws JsonMappingException",
      "right" : "// since 2.8\n    protected JavaType resolveType(DeserializationContext ctxt,\n            BeanDescription beanDesc, JavaType type, AnnotatedMember member)\n        throws JsonMappingException",
      "info" : "MethodDeclaration[88106-88487]:MethodDeclaration[88132-88513]"
    }, {
      "left" : "// not used, possibly remove as early as 2.9\n    protected AnnotatedMethod _findJsonValueFor(DeserializationConfig config, JavaType enumType)",
      "right" : "// not used, possibly remove as early as 2.9\n    protected AnnotatedMethod _findJsonValueFor(DeserializationConfig config, JavaType enumType)",
      "info" : "MethodDeclaration[88493-88954]:MethodDeclaration[88519-88980]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2563-3028]:Block[2563-3028]"
    }, {
      "left" : "_mapFallbacks.put(Map.class.getName(), LinkedHashMap.class);",
      "right" : "_mapFallbacks.put(Map.class.getName(), LinkedHashMap.class);",
      "info" : "ExpressionStatement[2573-2633]:ExpressionStatement[2573-2633]"
    }, {
      "left" : "_mapFallbacks.put(ConcurrentMap.class.getName(), ConcurrentHashMap.class);",
      "right" : "_mapFallbacks.put(ConcurrentMap.class.getName(), ConcurrentHashMap.class);",
      "info" : "ExpressionStatement[2642-2716]:ExpressionStatement[2642-2716]"
    }, {
      "left" : "_mapFallbacks.put(SortedMap.class.getName(), TreeMap.class);",
      "right" : "_mapFallbacks.put(SortedMap.class.getName(), TreeMap.class);",
      "info" : "ExpressionStatement[2725-2785]:ExpressionStatement[2725-2785]"
    }, {
      "left" : "_mapFallbacks.put(java.util.NavigableMap.class.getName(), TreeMap.class);",
      "right" : "_mapFallbacks.put(java.util.NavigableMap.class.getName(), TreeMap.class);",
      "info" : "ExpressionStatement[2795-2868]:ExpressionStatement[2795-2868]"
    }, {
      "left" : "_mapFallbacks.put(java.util.concurrent.ConcurrentNavigableMap.class.getName(),\n                java.util.concurrent.ConcurrentSkipListMap.class);",
      "right" : "_mapFallbacks.put(java.util.concurrent.ConcurrentNavigableMap.class.getName(),\n                java.util.concurrent.ConcurrentSkipListMap.class);",
      "info" : "ExpressionStatement[2877-3022]:ExpressionStatement[2877-3022]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3429-4239]:Block[3429-4239]"
    }, {
      "left" : "_collectionFallbacks.put(Collection.class.getName(), ArrayList.class);",
      "right" : "_collectionFallbacks.put(Collection.class.getName(), ArrayList.class);",
      "info" : "ExpressionStatement[3439-3509]:ExpressionStatement[3439-3509]"
    }, {
      "left" : "_collectionFallbacks.put(List.class.getName(), ArrayList.class);",
      "right" : "_collectionFallbacks.put(List.class.getName(), ArrayList.class);",
      "info" : "ExpressionStatement[3518-3582]:ExpressionStatement[3518-3582]"
    }, {
      "left" : "_collectionFallbacks.put(Set.class.getName(), HashSet.class);",
      "right" : "_collectionFallbacks.put(Set.class.getName(), HashSet.class);",
      "info" : "ExpressionStatement[3591-3652]:ExpressionStatement[3591-3652]"
    }, {
      "left" : "_collectionFallbacks.put(SortedSet.class.getName(), TreeSet.class);",
      "right" : "_collectionFallbacks.put(SortedSet.class.getName(), TreeSet.class);",
      "info" : "ExpressionStatement[3661-3728]:ExpressionStatement[3661-3728]"
    }, {
      "left" : "_collectionFallbacks.put(Queue.class.getName(), LinkedList.class);",
      "right" : "_collectionFallbacks.put(Queue.class.getName(), LinkedList.class);",
      "info" : "ExpressionStatement[3737-3803]:ExpressionStatement[3737-3803]"
    }, {
      "left" : "_collectionFallbacks.put(\"java.util.Deque\", LinkedList.class);",
      "right" : "_collectionFallbacks.put(\"java.util.Deque\", LinkedList.class);",
      "info" : "ExpressionStatement[4096-4158]:ExpressionStatement[4096-4158]"
    }, {
      "left" : "_collectionFallbacks.put(\"java.util.NavigableSet\", TreeSet.class);",
      "right" : "_collectionFallbacks.put(\"java.util.NavigableSet\", TreeSet.class);",
      "info" : "ExpressionStatement[4167-4233]:ExpressionStatement[4167-4233]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4873-4913]:Block[4873-4913]"
    }, {
      "left" : "_factoryConfig = config;",
      "right" : "_factoryConfig = config;",
      "info" : "ExpressionStatement[4883-4907]:ExpressionStatement[4883-4907]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5262-5300]:Block[5262-5300]"
    }, {
      "left" : "return _factoryConfig;",
      "right" : "return _factoryConfig;",
      "info" : "ReturnStatement[5272-5294]:ReturnStatement[5272-5294]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5813-5903]:Block[5813-5903]"
    }, {
      "left" : "return withConfig(_factoryConfig.withAdditionalDeserializers(additional));",
      "right" : "return withConfig(_factoryConfig.withAdditionalDeserializers(additional));",
      "info" : "ReturnStatement[5823-5897]:ReturnStatement[5823-5897]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6143-6236]:Block[6143-6236]"
    }, {
      "left" : "return withConfig(_factoryConfig.withAdditionalKeyDeserializers(additional));",
      "right" : "return withConfig(_factoryConfig.withAdditionalKeyDeserializers(additional));",
      "info" : "ReturnStatement[6153-6230]:ReturnStatement[6153-6230]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6488-6573]:Block[6488-6573]"
    }, {
      "left" : "return withConfig(_factoryConfig.withDeserializerModifier(modifier));",
      "right" : "return withConfig(_factoryConfig.withDeserializerModifier(modifier));",
      "info" : "ReturnStatement[6498-6567]:ReturnStatement[6498-6567]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6813-6898]:Block[6813-6898]"
    }, {
      "left" : "return withConfig(_factoryConfig.withAbstractTypeResolver(resolver));",
      "right" : "return withConfig(_factoryConfig.withAbstractTypeResolver(resolver));",
      "info" : "ReturnStatement[6823-6892]:ReturnStatement[6823-6892]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7137-7225]:Block[7137-7225]"
    }, {
      "left" : "return withConfig(_factoryConfig.withValueInstantiators(instantiators));",
      "right" : "return withConfig(_factoryConfig.withValueInstantiators(instantiators));",
      "info" : "ReturnStatement[7147-7219]:ReturnStatement[7147-7219]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7555-8324]:Block[7555-8324]"
    }, {
      "left" : "while (true)",
      "right" : "while (true)",
      "info" : "WhileStatement[7600-8318]:WhileStatement[7600-8318]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7613-8318]:Block[7613-8318]"
    }, {
      "left" : "JavaType next = _mapAbstractType2(config, type);",
      "right" : "JavaType next = _mapAbstractType2(config, type);",
      "info" : "VariableDeclarationStatement[7627-7675]:VariableDeclarationStatement[7627-7675]"
    }, {
      "left" : "if (next == null)",
      "right" : "if (next == null)",
      "info" : "IfStatement[7688-7750]:IfStatement[7688-7750]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7706-7750]:Block[7706-7750]"
    }, {
      "left" : "return type;",
      "right" : "return type;",
      "info" : "ReturnStatement[7724-7736]:ReturnStatement[7724-7736]"
    }, {
      "left" : "Class<?> prevCls = type.getRawClass();",
      "right" : "Class<?> prevCls = type.getRawClass();",
      "info" : "VariableDeclarationStatement[7953-7991]:VariableDeclarationStatement[7953-7991]"
    }, {
      "left" : "Class<?> nextCls = next.getRawClass();",
      "right" : "Class<?> nextCls = next.getRawClass();",
      "info" : "VariableDeclarationStatement[8004-8042]:VariableDeclarationStatement[8004-8042]"
    }, {
      "left" : "if ((prevCls == nextCls) || !prevCls.isAssignableFrom(nextCls))",
      "right" : "if ((prevCls == nextCls) || !prevCls.isAssignableFrom(nextCls))",
      "info" : "IfStatement[8055-8283]:IfStatement[8055-8283]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8119-8283]:Block[8119-8283]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Invalid abstract type resolution from \"+type+\" to \"+next+\": latter is not a subtype of former\");",
      "right" : "throw new IllegalArgumentException(\"Invalid abstract type resolution from \"+type+\" to \"+next+\": latter is not a subtype of former\");",
      "info" : "ThrowStatement[8137-8269]:ThrowStatement[8137-8269]"
    }, {
      "left" : "type = next;",
      "right" : "type = next;",
      "info" : "ExpressionStatement[8296-8308]:ExpressionStatement[8296-8308]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8641-9100]:Block[8641-9100]"
    }, {
      "left" : "Class<?> currClass = type.getRawClass();",
      "right" : "Class<?> currClass = type.getRawClass();",
      "info" : "VariableDeclarationStatement[8651-8691]:VariableDeclarationStatement[8651-8691]"
    }, {
      "left" : "if (_factoryConfig.hasAbstractTypeResolvers())",
      "right" : "if (_factoryConfig.hasAbstractTypeResolvers())",
      "info" : "IfStatement[8700-9073]:IfStatement[8700-9073]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8747-9073]:Block[8747-9073]"
    }, {
      "left" : "for (AbstractTypeResolver resolver : _factoryConfig.abstractTypeResolvers())",
      "right" : "for (AbstractTypeResolver resolver : _factoryConfig.abstractTypeResolvers())",
      "info" : "EnhancedForStatement[8761-9063]:EnhancedForStatement[8761-9063]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8838-9063]:Block[8838-9063]"
    }, {
      "left" : "JavaType concrete = resolver.findTypeMapping(config, type);",
      "right" : "JavaType concrete = resolver.findTypeMapping(config, type);",
      "info" : "VariableDeclarationStatement[8856-8915]:VariableDeclarationStatement[8856-8915]"
    }, {
      "left" : "if (concrete != null && concrete.getRawClass() != currClass)",
      "right" : "if (concrete != null && concrete.getRawClass() != currClass)",
      "info" : "IfStatement[8932-9049]:IfStatement[8932-9049]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8993-9049]:Block[8993-9049]"
    }, {
      "left" : "return concrete;",
      "right" : "return concrete;",
      "info" : "ReturnStatement[9015-9031]:ReturnStatement[9015-9031]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[9082-9094]:ReturnStatement[9082-9094]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9679-11708]:Block[9679-11708]"
    }, {
      "left" : "final DeserializationConfig config = ctxt.getConfig();",
      "right" : "final DeserializationConfig config = ctxt.getConfig();",
      "info" : "VariableDeclarationStatement[9689-9743]:VariableDeclarationStatement[9689-9743]"
    }, {
      "left" : "ValueInstantiator instantiator = null;",
      "right" : "ValueInstantiator instantiator = null;",
      "info" : "VariableDeclarationStatement[9753-9791]:VariableDeclarationStatement[9753-9791]"
    }, {
      "left" : "AnnotatedClass ac = beanDesc.getClassInfo();",
      "right" : "AnnotatedClass ac = beanDesc.getClassInfo();",
      "info" : "VariableDeclarationStatement[9875-9919]:VariableDeclarationStatement[9875-9919]"
    }, {
      "left" : "Object instDef = ctxt.getAnnotationIntrospector().findValueInstantiator(ac);",
      "right" : "Object instDef = ctxt.getAnnotationIntrospector().findValueInstantiator(ac);",
      "info" : "VariableDeclarationStatement[9928-10004]:VariableDeclarationStatement[9928-10004]"
    }, {
      "left" : "if (instDef != null)",
      "right" : "if (instDef != null)",
      "info" : "IfStatement[10013-10121]:IfStatement[10013-10121]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10034-10121]:Block[10034-10121]"
    }, {
      "left" : "instantiator = _valueInstantiatorInstance(config, ac, instDef);",
      "right" : "instantiator = _valueInstantiatorInstance(config, ac, instDef);",
      "info" : "ExpressionStatement[10048-10111]:ExpressionStatement[10048-10111]"
    }, {
      "left" : "if (instantiator == null)",
      "right" : "if (instantiator == null)",
      "info" : "IfStatement[10130-10507]:IfStatement[10130-10507]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10156-10507]:Block[10156-10507]"
    }, {
      "left" : "instantiator = _findStdValueInstantiator(config, beanDesc);",
      "right" : "instantiator = _findStdValueInstantiator(config, beanDesc);",
      "info" : "ExpressionStatement[10301-10360]:ExpressionStatement[10301-10360]"
    }, {
      "left" : "if (instantiator == null)",
      "right" : "if (instantiator == null)",
      "info" : "IfStatement[10373-10497]:IfStatement[10373-10497]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10399-10497]:Block[10399-10497]"
    }, {
      "left" : "instantiator = _constructDefaultValueInstantiator(ctxt, beanDesc);",
      "right" : "instantiator = _constructDefaultValueInstantiator(ctxt, beanDesc);",
      "info" : "ExpressionStatement[10417-10483]:ExpressionStatement[10417-10483]"
    }, {
      "left" : "if (_factoryConfig.hasValueInstantiators())",
      "right" : "if (_factoryConfig.hasValueInstantiators())",
      "info" : "IfStatement[10586-11126]:IfStatement[10586-11126]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10630-11126]:Block[10630-11126]"
    }, {
      "left" : "for (ValueInstantiators insts : _factoryConfig.valueInstantiators())",
      "right" : "for (ValueInstantiators insts : _factoryConfig.valueInstantiators())",
      "info" : "EnhancedForStatement[10644-11116]:EnhancedForStatement[10644-11116]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10713-11116]:Block[10713-11116]"
    }, {
      "left" : "instantiator = insts.findValueInstantiator(config, beanDesc, instantiator);",
      "right" : "instantiator = insts.findValueInstantiator(config, beanDesc, instantiator);",
      "info" : "ExpressionStatement[10731-10806]:ExpressionStatement[10731-10806]"
    }, {
      "left" : "if (instantiator == null)",
      "right" : "if (instantiator == null)",
      "info" : "IfStatement[10895-11102]:IfStatement[10895-11102]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10921-11102]:Block[10921-11102]"
    }, {
      "left" : "ctxt.reportMappingException(\n\t\t\t\t\t\t\"Broken registered ValueInstantiators (of type %s): returned null ValueInstantiator\",\n\t\t\t\t\t\tinsts.getClass().getName());",
      "right" : "ctxt.reportMappingException(\n\t\t\t\t\t\t\"Broken registered ValueInstantiators (of type %s): returned null ValueInstantiator\",\n\t\t\t\t\t\tinsts.getClass().getName());",
      "info" : "ExpressionStatement[10929-11084]:ExpressionStatement[10929-11084]"
    }, {
      "left" : "if (instantiator.getIncompleteParameter() != null)",
      "right" : "if (instantiator.getIncompleteParameter() != null)",
      "info" : "IfStatement[11216-11672]:IfStatement[11216-11672]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11267-11672]:Block[11267-11672]"
    }, {
      "left" : "final AnnotatedParameter nonAnnotatedParam = instantiator.getIncompleteParameter();",
      "right" : "final AnnotatedParameter nonAnnotatedParam = instantiator.getIncompleteParameter();",
      "info" : "VariableDeclarationStatement[11281-11364]:VariableDeclarationStatement[11281-11364]"
    }, {
      "left" : "final AnnotatedWithParams ctor = nonAnnotatedParam.getOwner();",
      "right" : "final AnnotatedWithParams ctor = nonAnnotatedParam.getOwner();",
      "info" : "VariableDeclarationStatement[11377-11439]:VariableDeclarationStatement[11377-11439]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Argument #\"+nonAnnotatedParam.getIndex()+\" of constructor \"+ctor+\" has no property name annotation; must have name when multiple-parameter constructor annotated as Creator\");",
      "right" : "throw new IllegalArgumentException(\"Argument #\"+nonAnnotatedParam.getIndex()+\" of constructor \"+ctor+\" has no property name annotation; must have name when multiple-parameter constructor annotated as Creator\");",
      "info" : "ThrowStatement[11452-11662]:ThrowStatement[11452-11662]"
    }, {
      "left" : "return instantiator;",
      "right" : "return instantiator;",
      "info" : "ReturnStatement[11682-11702]:ReturnStatement[11682-11702]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11874-12024]:Block[11874-12024]"
    }, {
      "left" : "if (beanDesc.getBeanClass() == JsonLocation.class)",
      "right" : "if (beanDesc.getBeanClass() == JsonLocation.class)",
      "info" : "IfStatement[11884-11997]:IfStatement[11884-11997]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11935-11997]:Block[11935-11997]"
    }, {
      "left" : "return new JsonLocationInstantiator();",
      "right" : "return new JsonLocationInstantiator();",
      "info" : "ReturnStatement[11949-11987]:ReturnStatement[11949-11987]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[12006-12018]:ReturnStatement[12006-12018]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12359-13973]:Block[12359-13973]"
    }, {
      "left" : "CreatorCollector creators =  new CreatorCollector(beanDesc, ctxt.getConfig());",
      "right" : "CreatorCollector creators =  new CreatorCollector(beanDesc, ctxt.getConfig());",
      "info" : "VariableDeclarationStatement[12369-12447]:VariableDeclarationStatement[12369-12447]"
    }, {
      "left" : "AnnotationIntrospector intr = ctxt.getAnnotationIntrospector();",
      "right" : "AnnotationIntrospector intr = ctxt.getAnnotationIntrospector();",
      "info" : "VariableDeclarationStatement[12456-12519]:VariableDeclarationStatement[12456-12519]"
    }, {
      "left" : "final DeserializationConfig config = ctxt.getConfig();",
      "right" : "final DeserializationConfig config = ctxt.getConfig();",
      "info" : "VariableDeclarationStatement[12595-12649]:VariableDeclarationStatement[12595-12649]"
    }, {
      "left" : "VisibilityChecker<?> vchecker = config.getDefaultVisibilityChecker();",
      "right" : "VisibilityChecker<?> vchecker = config.getDefaultVisibilityChecker();",
      "info" : "VariableDeclarationStatement[12658-12727]:VariableDeclarationStatement[12658-12727]"
    }, {
      "left" : "vchecker = intr.findAutoDetectVisibility(beanDesc.getClassInfo(), vchecker);",
      "right" : "vchecker = intr.findAutoDetectVisibility(beanDesc.getClassInfo(), vchecker);",
      "info" : "ExpressionStatement[12736-12812]:ExpressionStatement[12736-12812]"
    }, {
      "left" : "Map<AnnotatedWithParams,BeanPropertyDefinition[]> creatorDefs = _findCreatorsFromProperties(ctxt,\n                beanDesc);",
      "right" : "Map<AnnotatedWithParams,BeanPropertyDefinition[]> creatorDefs = _findCreatorsFromProperties(ctxt,\n                beanDesc);",
      "info" : "VariableDeclarationStatement[13356-13480]:VariableDeclarationStatement[13356-13480]"
    }, {
      "left" : "_addDeserializerFactoryMethods(ctxt, beanDesc, vchecker, intr, creators, creatorDefs);",
      "right" : "_addDeserializerFactoryMethods(ctxt, beanDesc, vchecker, intr, creators, creatorDefs);",
      "info" : "ExpressionStatement[13612-13698]:ExpressionStatement[13612-13698]"
    }, {
      "left" : "if (beanDesc.getType().isConcrete())",
      "right" : "if (beanDesc.getType().isConcrete())",
      "info" : "IfStatement[13762-13907]:IfStatement[13762-13907]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13799-13907]:Block[13799-13907]"
    }, {
      "left" : "_addDeserializerConstructors(ctxt, beanDesc, vchecker, intr, creators, creatorDefs);",
      "right" : "_addDeserializerConstructors(ctxt, beanDesc, vchecker, intr, creators, creatorDefs);",
      "info" : "ExpressionStatement[13813-13897]:ExpressionStatement[13813-13897]"
    }, {
      "left" : "return creators.constructValueInstantiator(config);",
      "right" : "return creators.constructValueInstantiator(config);",
      "info" : "ReturnStatement[13916-13967]:ReturnStatement[13916-13967]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14166-15492]:Block[14166-15492]"
    }, {
      "left" : "Map<AnnotatedWithParams,BeanPropertyDefinition[]> result = Collections.emptyMap();",
      "right" : "Map<AnnotatedWithParams,BeanPropertyDefinition[]> result = Collections.emptyMap();",
      "info" : "VariableDeclarationStatement[14176-14258]:VariableDeclarationStatement[14176-14258]"
    }, {
      "left" : "for (BeanPropertyDefinition propDef : beanDesc.findProperties())",
      "right" : "for (BeanPropertyDefinition propDef : beanDesc.findProperties())",
      "info" : "EnhancedForStatement[14267-15463]:EnhancedForStatement[14267-15463]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14332-15463]:Block[14332-15463]"
    }, {
      "left" : "Iterator<AnnotatedParameter> it = propDef.getConstructorParameters();",
      "right" : "Iterator<AnnotatedParameter> it = propDef.getConstructorParameters();",
      "info" : "VariableDeclarationStatement[14346-14415]:VariableDeclarationStatement[14346-14415]"
    }, {
      "left" : "while (it.hasNext())",
      "right" : "while (it.hasNext())",
      "info" : "WhileStatement[14428-15453]:WhileStatement[14428-15453]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14449-15453]:Block[14449-15453]"
    }, {
      "left" : "AnnotatedParameter param = it.next();",
      "right" : "AnnotatedParameter param = it.next();",
      "info" : "VariableDeclarationStatement[14467-14504]:VariableDeclarationStatement[14467-14504]"
    }, {
      "left" : "AnnotatedWithParams owner = param.getOwner();",
      "right" : "AnnotatedWithParams owner = param.getOwner();",
      "info" : "VariableDeclarationStatement[14521-14566]:VariableDeclarationStatement[14521-14566]"
    }, {
      "left" : "BeanPropertyDefinition[] defs = result.get(owner);",
      "right" : "BeanPropertyDefinition[] defs = result.get(owner);",
      "info" : "VariableDeclarationStatement[14583-14633]:VariableDeclarationStatement[14583-14633]"
    }, {
      "left" : "final int index = param.getIndex();",
      "right" : "final int index = param.getIndex();",
      "info" : "VariableDeclarationStatement[14650-14685]:VariableDeclarationStatement[14650-14685]"
    }, {
      "left" : "if (defs == null)",
      "right" : "if (defs == null)",
      "info" : "IfStatement[14719-15400]:IfStatement[14719-15400]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14737-15108]:Block[14737-15108]"
    }, {
      "left" : "if (result.isEmpty())",
      "right" : "if (result.isEmpty())",
      "info" : "IfStatement[14759-14963]:IfStatement[14759-14963]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14781-14963]:Block[14781-14963]"
    }, {
      "left" : "result = new LinkedHashMap<AnnotatedWithParams,BeanPropertyDefinition[]>();",
      "right" : "result = new LinkedHashMap<AnnotatedWithParams,BeanPropertyDefinition[]>();",
      "info" : "ExpressionStatement[14866-14941]:ExpressionStatement[14866-14941]"
    }, {
      "left" : "defs = new BeanPropertyDefinition[owner.getParameterCount()];",
      "right" : "defs = new BeanPropertyDefinition[owner.getParameterCount()];",
      "info" : "ExpressionStatement[14984-15045]:ExpressionStatement[14984-15045]"
    }, {
      "left" : "result.put(owner, defs);",
      "right" : "result.put(owner, defs);",
      "info" : "ExpressionStatement[15066-15090]:ExpressionStatement[15066-15090]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15114-15400]:Block[15114-15400]"
    }, {
      "left" : "if (defs[index] != null)",
      "right" : "if (defs[index] != null)",
      "info" : "IfStatement[15136-15382]:IfStatement[15136-15382]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15161-15382]:Block[15161-15382]"
    }, {
      "left" : "throw new IllegalStateException(\"Conflict: parameter #\"+index+\" of \"+owner\n                                +\" bound to more than one property; \"+defs[index]+\" vs \"+propDef);",
      "right" : "throw new IllegalStateException(\"Conflict: parameter #\"+index+\" of \"+owner\n                                +\" bound to more than one property; \"+defs[index]+\" vs \"+propDef);",
      "info" : "ThrowStatement[15187-15360]:ThrowStatement[15187-15360]"
    }, {
      "left" : "defs[index] = propDef;",
      "right" : "defs[index] = propDef;",
      "info" : "ExpressionStatement[15417-15439]:ExpressionStatement[15417-15439]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[15472-15486]:ReturnStatement[15472-15486]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15673-16964]:Block[15673-16964]"
    }, {
      "left" : "if (instDef == null)",
      "right" : "if (instDef == null)",
      "info" : "IfStatement[15683-15740]:IfStatement[15683-15740]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15704-15740]:Block[15704-15740]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[15718-15730]:ReturnStatement[15718-15730]"
    }, {
      "left" : "ValueInstantiator inst;",
      "right" : "ValueInstantiator inst;",
      "info" : "VariableDeclarationStatement[15750-15773]:VariableDeclarationStatement[15750-15773]"
    }, {
      "left" : "if (instDef instanceof ValueInstantiator)",
      "right" : "if (instDef instanceof ValueInstantiator)",
      "info" : "IfStatement[15791-15892]:IfStatement[15791-15892]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15833-15892]:Block[15833-15892]"
    }, {
      "left" : "return (ValueInstantiator) instDef;",
      "right" : "return (ValueInstantiator) instDef;",
      "info" : "ReturnStatement[15847-15882]:ReturnStatement[15847-15882]"
    }, {
      "left" : "if (!(instDef instanceof Class))",
      "right" : "if (!(instDef instanceof Class))",
      "info" : "IfStatement[15901-16201]:IfStatement[15901-16201]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15934-16201]:Block[15934-16201]"
    }, {
      "left" : "throw new IllegalStateException(\"AnnotationIntrospector returned key deserializer definition of type \"\n                    +instDef.getClass().getName()\n                    +\"; expected type KeyDeserializer or Class<KeyDeserializer> instead\");",
      "right" : "throw new IllegalStateException(\"AnnotationIntrospector returned key deserializer definition of type \"\n                    +instDef.getClass().getName()\n                    +\"; expected type KeyDeserializer or Class<KeyDeserializer> instead\");",
      "info" : "ThrowStatement[15948-16191]:ThrowStatement[15948-16191]"
    }, {
      "left" : "Class<?> instClass = (Class<?>)instDef;",
      "right" : "Class<?> instClass = (Class<?>)instDef;",
      "info" : "VariableDeclarationStatement[16210-16249]:VariableDeclarationStatement[16210-16249]"
    }, {
      "left" : "if (ClassUtil.isBogusClass(instClass))",
      "right" : "if (ClassUtil.isBogusClass(instClass))",
      "info" : "IfStatement[16258-16333]:IfStatement[16258-16333]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16297-16333]:Block[16297-16333]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[16311-16323]:ReturnStatement[16311-16323]"
    }, {
      "left" : "if (!ValueInstantiator.class.isAssignableFrom(instClass))",
      "right" : "if (!ValueInstantiator.class.isAssignableFrom(instClass))",
      "info" : "IfStatement[16342-16577]:IfStatement[16342-16577]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16400-16577]:Block[16400-16577]"
    }, {
      "left" : "throw new IllegalStateException(\"AnnotationIntrospector returned Class \"+instClass.getName()\n                    +\"; expected Class<ValueInstantiator>\");",
      "right" : "throw new IllegalStateException(\"AnnotationIntrospector returned Class \"+instClass.getName()\n                    +\"; expected Class<ValueInstantiator>\");",
      "info" : "ThrowStatement[16414-16567]:ThrowStatement[16414-16567]"
    }, {
      "left" : "HandlerInstantiator hi = config.getHandlerInstantiator();",
      "right" : "HandlerInstantiator hi = config.getHandlerInstantiator();",
      "info" : "VariableDeclarationStatement[16586-16643]:VariableDeclarationStatement[16586-16643]"
    }, {
      "left" : "if (hi != null)",
      "right" : "if (hi != null)",
      "info" : "IfStatement[16652-16833]:IfStatement[16652-16833]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16668-16833]:Block[16668-16833]"
    }, {
      "left" : "inst = hi.valueInstantiatorInstance(config, annotated, instClass);",
      "right" : "inst = hi.valueInstantiatorInstance(config, annotated, instClass);",
      "info" : "ExpressionStatement[16682-16748]:ExpressionStatement[16682-16748]"
    }, {
      "left" : "if (inst != null)",
      "right" : "if (inst != null)",
      "info" : "IfStatement[16761-16823]:IfStatement[16761-16823]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16779-16823]:Block[16779-16823]"
    }, {
      "left" : "return inst;",
      "right" : "return inst;",
      "info" : "ReturnStatement[16797-16809]:ReturnStatement[16797-16809]"
    }, {
      "left" : "return (ValueInstantiator) ClassUtil.createInstance(instClass,\n                config.canOverrideAccessModifiers());",
      "right" : "return (ValueInstantiator) ClassUtil.createInstance(instClass,\n                config.canOverrideAccessModifiers());",
      "info" : "ReturnStatement[16842-16958]:ReturnStatement[16842-16958]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17288-24369]:Block[17288-24369]"
    }, {
      "left" : "AnnotatedConstructor defaultCtor = beanDesc.findDefaultConstructor();",
      "right" : "AnnotatedConstructor defaultCtor = beanDesc.findDefaultConstructor();",
      "info" : "VariableDeclarationStatement[17506-17575]:VariableDeclarationStatement[17506-17575]"
    }, {
      "left" : "if (defaultCtor != null)",
      "right" : "if (defaultCtor != null)",
      "info" : "IfStatement[17584-17782]:IfStatement[17584-17782]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17609-17782]:Block[17609-17782]"
    }, {
      "left" : "if (!creators.hasDefaultCreator() || intr.hasCreatorAnnotation(defaultCtor))",
      "right" : "if (!creators.hasDefaultCreator() || intr.hasCreatorAnnotation(defaultCtor))",
      "info" : "IfStatement[17623-17772]:IfStatement[17623-17772]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17700-17772]:Block[17700-17772]"
    }, {
      "left" : "creators.setDefaultCreator(defaultCtor);",
      "right" : "creators.setDefaultCreator(defaultCtor);",
      "info" : "ExpressionStatement[17718-17758]:ExpressionStatement[17718-17758]"
    }, {
      "left" : "List<AnnotatedConstructor> implicitCtors = null;",
      "right" : "List<AnnotatedConstructor> implicitCtors = null;",
      "info" : "VariableDeclarationStatement[17837-17885]:VariableDeclarationStatement[17837-17885]"
    }, {
      "left" : "for (AnnotatedConstructor ctor : beanDesc.getConstructors())",
      "right" : "for (AnnotatedConstructor ctor : beanDesc.getConstructors())",
      "info" : "EnhancedForStatement[17894-23980]:EnhancedForStatement[17894-23980]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17955-23980]:Block[17955-23980]"
    }, {
      "left" : "final boolean isCreator = intr.hasCreatorAnnotation(ctor);",
      "right" : "final boolean isCreator = intr.hasCreatorAnnotation(ctor);",
      "info" : "VariableDeclarationStatement[17969-18027]:VariableDeclarationStatement[17969-18027]"
    }, {
      "left" : "BeanPropertyDefinition[] propDefs = creatorParams.get(ctor);",
      "right" : "BeanPropertyDefinition[] propDefs = creatorParams.get(ctor);",
      "info" : "VariableDeclarationStatement[18040-18100]:VariableDeclarationStatement[18040-18100]"
    }, {
      "left" : "final int argCount = ctor.getParameterCount();",
      "right" : "final int argCount = ctor.getParameterCount();",
      "info" : "VariableDeclarationStatement[18113-18159]:VariableDeclarationStatement[18113-18159]"
    }, {
      "left" : "if (argCount == 1)",
      "right" : "if (argCount == 1)",
      "info" : "IfStatement[18255-19611]:IfStatement[18255-19611]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18274-19611]:Block[18274-19611]"
    }, {
      "left" : "BeanPropertyDefinition argDef = (propDefs == null) ? null : propDefs[0];",
      "right" : "BeanPropertyDefinition argDef = (propDefs == null) ? null : propDefs[0];",
      "info" : "VariableDeclarationStatement[18292-18364]:VariableDeclarationStatement[18292-18364]"
    }, {
      "left" : "boolean useProps = _checkIfCreatorPropertyBased(intr, ctor, argDef);",
      "right" : "boolean useProps = _checkIfCreatorPropertyBased(intr, ctor, argDef);",
      "info" : "VariableDeclarationStatement[18381-18449]:VariableDeclarationStatement[18381-18449]"
    }, {
      "left" : "if (useProps)",
      "right" : "if (useProps)",
      "info" : "IfStatement[18467-19526]:IfStatement[18467-19526]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18481-18971]:Block[18481-18971]"
    }, {
      "left" : "SettableBeanProperty[] properties = new SettableBeanProperty[1];",
      "right" : "SettableBeanProperty[] properties = new SettableBeanProperty[1];",
      "info" : "VariableDeclarationStatement[18503-18567]:VariableDeclarationStatement[18503-18567]"
    }, {
      "left" : "PropertyName name = (argDef == null) ? null : argDef.getFullName();",
      "right" : "PropertyName name = (argDef == null) ? null : argDef.getFullName();",
      "info" : "VariableDeclarationStatement[18588-18655]:VariableDeclarationStatement[18588-18655]"
    }, {
      "left" : "AnnotatedParameter arg = ctor.getParameter(0);",
      "right" : "AnnotatedParameter arg = ctor.getParameter(0);",
      "info" : "VariableDeclarationStatement[18676-18722]:VariableDeclarationStatement[18676-18722]"
    }, {
      "left" : "properties[0] = constructCreatorProperty(ctxt, beanDesc, name, 0, arg,\n                            intr.findInjectableValueId(arg));",
      "right" : "properties[0] = constructCreatorProperty(ctxt, beanDesc, name, 0, arg,\n                            intr.findInjectableValueId(arg));",
      "info" : "ExpressionStatement[18743-18875]:ExpressionStatement[18743-18875]"
    }, {
      "left" : "creators.addPropertyCreator(ctor, isCreator, properties);",
      "right" : "creators.addPropertyCreator(ctor, isCreator, properties);",
      "info" : "ExpressionStatement[18896-18953]:ExpressionStatement[18896-18953]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18977-19526]:Block[18977-19526]"
    }, {
      "left" : "_handleSingleArgumentConstructor(ctxt, beanDesc, vchecker, intr, creators,\n                            ctor, isCreator,\n                            vchecker.isCreatorVisible(ctor));",
      "right" : "_handleSingleArgumentConstructor(ctxt, beanDesc, vchecker, intr, creators,\n                            ctor, isCreator,\n                            vchecker.isCreatorVisible(ctor));",
      "info" : "ExpressionStatement[19020-19201]:ExpressionStatement[19020-19201]"
    }, {
      "left" : "if (argDef != null)",
      "right" : "if (argDef != null)",
      "info" : "IfStatement[19388-19508]:IfStatement[19388-19508]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19408-19508]:Block[19408-19508]"
    }, {
      "left" : "((POJOPropertyBuilder) argDef).removeConstructors();",
      "right" : "((POJOPropertyBuilder) argDef).removeConstructors();",
      "info" : "ExpressionStatement[19434-19486]:ExpressionStatement[19434-19486]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[19588-19597]:ContinueStatement[19588-19597]"
    }, {
      "left" : "AnnotatedParameter nonAnnotatedParam = null;",
      "right" : "AnnotatedParameter nonAnnotatedParam = null;",
      "info" : "VariableDeclarationStatement[19874-19918]:VariableDeclarationStatement[19874-19918]"
    }, {
      "left" : "SettableBeanProperty[] properties = new SettableBeanProperty[argCount];",
      "right" : "SettableBeanProperty[] properties = new SettableBeanProperty[argCount];",
      "info" : "VariableDeclarationStatement[19931-20002]:VariableDeclarationStatement[19931-20002]"
    }, {
      "left" : "int explicitNameCount = 0;",
      "right" : "int explicitNameCount = 0;",
      "info" : "VariableDeclarationStatement[20015-20041]:VariableDeclarationStatement[20015-20041]"
    }, {
      "left" : "int implicitWithCreatorCount = 0;",
      "right" : "int implicitWithCreatorCount = 0;",
      "info" : "VariableDeclarationStatement[20054-20087]:VariableDeclarationStatement[20054-20087]"
    }, {
      "left" : "int injectCount = 0;",
      "right" : "int injectCount = 0;",
      "info" : "VariableDeclarationStatement[20100-20120]:VariableDeclarationStatement[20100-20120]"
    }, {
      "left" : "for (int i = 0; i < argCount; ++i)",
      "right" : "for (int i = 0; i < argCount; ++i)",
      "info" : "ForStatement[20134-21811]:ForStatement[20134-21811]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20169-21811]:Block[20169-21811]"
    }, {
      "left" : "final AnnotatedParameter param = ctor.getParameter(i);",
      "right" : "final AnnotatedParameter param = ctor.getParameter(i);",
      "info" : "VariableDeclarationStatement[20187-20241]:VariableDeclarationStatement[20187-20241]"
    }, {
      "left" : "BeanPropertyDefinition propDef = (propDefs == null) ? null : propDefs[i];",
      "right" : "BeanPropertyDefinition propDef = (propDefs == null) ? null : propDefs[i];",
      "info" : "VariableDeclarationStatement[20258-20331]:VariableDeclarationStatement[20258-20331]"
    }, {
      "left" : "Object injectId = intr.findInjectableValueId(param);",
      "right" : "Object injectId = intr.findInjectableValueId(param);",
      "info" : "VariableDeclarationStatement[20348-20400]:VariableDeclarationStatement[20348-20400]"
    }, {
      "left" : "final PropertyName name = (propDef == null) ? null : propDef.getFullName();",
      "right" : "final PropertyName name = (propDef == null) ? null : propDef.getFullName();",
      "info" : "VariableDeclarationStatement[20417-20492]:VariableDeclarationStatement[20417-20492]"
    }, {
      "left" : "if (propDef != null && propDef.isExplicitlyNamed())",
      "right" : "if (propDef != null && propDef.isExplicitlyNamed())",
      "info" : "IfStatement[20510-20756]:IfStatement[20510-20756]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20562-20756]:Block[20562-20756]"
    }, {
      "left" : "++explicitNameCount;",
      "right" : "++explicitNameCount;",
      "info" : "ExpressionStatement[20584-20604]:ExpressionStatement[20584-20604]"
    }, {
      "left" : "properties[i] = constructCreatorProperty(ctxt, beanDesc, name, i, param, injectId);",
      "right" : "properties[i] = constructCreatorProperty(ctxt, beanDesc, name, i, param, injectId);",
      "info" : "ExpressionStatement[20625-20708]:ExpressionStatement[20625-20708]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[20729-20738]:ContinueStatement[20729-20738]"
    }, {
      "left" : "if (injectId != null)",
      "right" : "if (injectId != null)",
      "info" : "IfStatement[20773-20983]:IfStatement[20773-20983]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20795-20983]:Block[20795-20983]"
    }, {
      "left" : "++injectCount;",
      "right" : "++injectCount;",
      "info" : "ExpressionStatement[20817-20831]:ExpressionStatement[20817-20831]"
    }, {
      "left" : "properties[i] = constructCreatorProperty(ctxt, beanDesc, name, i, param, injectId);",
      "right" : "properties[i] = constructCreatorProperty(ctxt, beanDesc, name, i, param, injectId);",
      "info" : "ExpressionStatement[20852-20935]:ExpressionStatement[20852-20935]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[20956-20965]:ContinueStatement[20956-20965]"
    }, {
      "left" : "NameTransformer unwrapper = intr.findUnwrappingNameTransformer(param);",
      "right" : "NameTransformer unwrapper = intr.findUnwrappingNameTransformer(param);",
      "info" : "VariableDeclarationStatement[21000-21070]:VariableDeclarationStatement[21000-21070]"
    }, {
      "left" : "if (unwrapper != null)",
      "right" : "if (unwrapper != null)",
      "info" : "IfStatement[21087-21324]:IfStatement[21087-21324]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21110-21324]:Block[21110-21324]"
    }, {
      "left" : "properties[i] = constructCreatorProperty(ctxt, beanDesc, UNWRAPPED_CREATOR_PARAM_NAME, i, param, null);",
      "right" : "properties[i] = constructCreatorProperty(ctxt, beanDesc, UNWRAPPED_CREATOR_PARAM_NAME, i, param, null);",
      "info" : "ExpressionStatement[21132-21235]:ExpressionStatement[21132-21235]"
    }, {
      "left" : "++explicitNameCount;",
      "right" : "++explicitNameCount;",
      "info" : "ExpressionStatement[21256-21276]:ExpressionStatement[21256-21276]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[21297-21306]:ContinueStatement[21297-21306]"
    }, {
      "left" : "if (isCreator && (name != null && !name.isEmpty()))",
      "right" : "if (isCreator && (name != null && !name.isEmpty()))",
      "info" : "IfStatement[21430-21683]:IfStatement[21430-21683]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21482-21683]:Block[21482-21683]"
    }, {
      "left" : "++implicitWithCreatorCount;",
      "right" : "++implicitWithCreatorCount;",
      "info" : "ExpressionStatement[21504-21531]:ExpressionStatement[21504-21531]"
    }, {
      "left" : "properties[i] = constructCreatorProperty(ctxt, beanDesc, name, i, param, injectId);",
      "right" : "properties[i] = constructCreatorProperty(ctxt, beanDesc, name, i, param, injectId);",
      "info" : "ExpressionStatement[21552-21635]:ExpressionStatement[21552-21635]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[21656-21665]:ContinueStatement[21656-21665]"
    }, {
      "left" : "if (nonAnnotatedParam == null)",
      "right" : "if (nonAnnotatedParam == null)",
      "info" : "IfStatement[21700-21797]:IfStatement[21700-21797]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21731-21797]:Block[21731-21797]"
    }, {
      "left" : "nonAnnotatedParam = param;",
      "right" : "nonAnnotatedParam = param;",
      "info" : "ExpressionStatement[21753-21779]:ExpressionStatement[21753-21779]"
    }, {
      "left" : "final int namedCount = explicitNameCount + implicitWithCreatorCount;",
      "right" : "final int namedCount = explicitNameCount + implicitWithCreatorCount;",
      "info" : "VariableDeclarationStatement[21825-21893]:VariableDeclarationStatement[21825-21893]"
    }, {
      "left" : "if (isCreator || (explicitNameCount > 0) || (injectCount > 0))",
      "right" : "if (isCreator || (explicitNameCount > 0) || (injectCount > 0))",
      "info" : "IfStatement[21973-23653]:IfStatement[21973-23653]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22036-23653]:Block[22036-23653]"
    }, {
      "left" : "if ((namedCount + injectCount) == argCount)",
      "right" : "if ((namedCount + injectCount) == argCount)",
      "info" : "IfStatement[22106-22277]:IfStatement[22106-22277]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22150-22277]:Block[22150-22277]"
    }, {
      "left" : "creators.addPropertyCreator(ctor, isCreator, properties);",
      "right" : "creators.addPropertyCreator(ctor, isCreator, properties);",
      "info" : "ExpressionStatement[22172-22229]:ExpressionStatement[22172-22229]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[22250-22259]:ContinueStatement[22250-22259]"
    }, {
      "left" : "if ((explicitNameCount == 0) && ((injectCount + 1) == argCount))",
      "right" : "if ((explicitNameCount == 0) && ((injectCount + 1) == argCount))",
      "info" : "IfStatement[22294-22574]:IfStatement[22294-22574]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22359-22574]:Block[22359-22574]"
    }, {
      "left" : "creators.addDelegatingCreator(ctor, isCreator, properties);",
      "right" : "creators.addDelegatingCreator(ctor, isCreator, properties);",
      "info" : "ExpressionStatement[22467-22526]:ExpressionStatement[22467-22526]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[22547-22556]:ContinueStatement[22547-22556]"
    }, {
      "left" : "PropertyName impl = _findImplicitParamName(nonAnnotatedParam, intr);",
      "right" : "PropertyName impl = _findImplicitParamName(nonAnnotatedParam, intr);",
      "info" : "VariableDeclarationStatement[22797-22865]:VariableDeclarationStatement[22797-22865]"
    }, {
      "left" : "if (impl == null || impl.isEmpty())",
      "right" : "if (impl == null || impl.isEmpty())",
      "info" : "IfStatement[22882-23639]:IfStatement[22882-23639]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22918-23639]:Block[22918-23639]"
    }, {
      "left" : "int ix = nonAnnotatedParam.getIndex();",
      "right" : "int ix = nonAnnotatedParam.getIndex();",
      "info" : "VariableDeclarationStatement[23022-23060]:VariableDeclarationStatement[23022-23060]"
    }, {
      "left" : "if ((ix == 0) && ClassUtil.isNonStaticInnerClass(ctor.getDeclaringClass()))",
      "right" : "if ((ix == 0) && ClassUtil.isNonStaticInnerClass(ctor.getDeclaringClass()))",
      "info" : "IfStatement[23081-23387]:IfStatement[23081-23387]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23157-23387]:Block[23157-23387]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Non-static inner classes like \"\n                                +ctor.getDeclaringClass().getName()+\" can not use @JsonCreator for constructors\");",
      "right" : "throw new IllegalArgumentException(\"Non-static inner classes like \"\n                                +ctor.getDeclaringClass().getName()+\" can not use @JsonCreator for constructors\");",
      "info" : "ThrowStatement[23183-23365]:ThrowStatement[23183-23365]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Argument #\"+ix\n                            +\" of constructor \"+ctor+\" has no property name annotation; must have name when multiple-parameter constructor annotated as Creator\");",
      "right" : "throw new IllegalArgumentException(\"Argument #\"+ix\n                            +\" of constructor \"+ctor+\" has no property name annotation; must have name when multiple-parameter constructor annotated as Creator\");",
      "info" : "ThrowStatement[23408-23621]:ThrowStatement[23408-23621]"
    }, {
      "left" : "if (!creators.hasDefaultCreator())",
      "right" : "if (!creators.hasDefaultCreator())",
      "info" : "IfStatement[23740-23970]:IfStatement[23740-23970]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23775-23970]:Block[23775-23970]"
    }, {
      "left" : "if (implicitCtors == null)",
      "right" : "if (implicitCtors == null)",
      "info" : "IfStatement[23793-23915]:IfStatement[23793-23915]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23820-23915]:Block[23820-23915]"
    }, {
      "left" : "implicitCtors = new LinkedList<AnnotatedConstructor>();",
      "right" : "implicitCtors = new LinkedList<AnnotatedConstructor>();",
      "info" : "ExpressionStatement[23842-23897]:ExpressionStatement[23842-23897]"
    }, {
      "left" : "implicitCtors.add(ctor);",
      "right" : "implicitCtors.add(ctor);",
      "info" : "ExpressionStatement[23932-23956]:ExpressionStatement[23932-23956]"
    }, {
      "left" : "if ((implicitCtors != null) && !creators.hasDelegatingCreator()\n                && !creators.hasPropertyBasedCreator())",
      "right" : "if ((implicitCtors != null) && !creators.hasDelegatingCreator()\n                && !creators.hasPropertyBasedCreator())",
      "info" : "IfStatement[24108-24363]:IfStatement[24108-24363]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24228-24363]:Block[24228-24363]"
    }, {
      "left" : "_checkImplicitlyNamedConstructors(ctxt, beanDesc, vchecker, intr,\n                    creators, implicitCtors);",
      "right" : "_checkImplicitlyNamedConstructors(ctxt, beanDesc, vchecker, intr,\n                    creators, implicitCtors);",
      "info" : "ExpressionStatement[24242-24353]:ExpressionStatement[24242-24353]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24676-26898]:Block[24676-26898]"
    }, {
      "left" : "AnnotatedConstructor found = null;",
      "right" : "AnnotatedConstructor found = null;",
      "info" : "VariableDeclarationStatement[24686-24720]:VariableDeclarationStatement[24686-24720]"
    }, {
      "left" : "SettableBeanProperty[] foundProps = null;",
      "right" : "SettableBeanProperty[] foundProps = null;",
      "info" : "VariableDeclarationStatement[24729-24770]:VariableDeclarationStatement[24729-24770]"
    }, {
      "left" : "main_loop:\n        for (AnnotatedConstructor ctor : implicitCtors) {\n            if (!vchecker.isCreatorVisible(ctor)) {\n                continue;\n            }\n            // as per earlier notes, only end up here if no properties associated with creator\n            final int argCount = ctor.getParameterCount();\n            SettableBeanProperty[] properties = new SettableBeanProperty[argCount];\n            for (int i = 0; i < argCount; ++i) {\n                final AnnotatedParameter param = ctor.getParameter(i);\n                final PropertyName name = _findParamName(param, intr);\n\n                // must have name (implicit fine)\n                if (name == null || name.isEmpty()) {\n                    continue main_loop;\n                }\n                properties[i] = constructCreatorProperty(ctxt, beanDesc, name, param.getIndex(),\n                        param, /*injectId*/ null);\n            }\n            if (found != null) { // only one allowed\n                found = null;\n                break;\n            }\n            found = ctor;\n            foundProps = properties;\n        }",
      "right" : "main_loop:\n        for (AnnotatedConstructor ctor : implicitCtors) {\n            if (!vchecker.isCreatorVisible(ctor)) {\n                continue;\n            }\n            // as per earlier notes, only end up here if no properties associated with creator\n            final int argCount = ctor.getParameterCount();\n            SettableBeanProperty[] properties = new SettableBeanProperty[argCount];\n            for (int i = 0; i < argCount; ++i) {\n                final AnnotatedParameter param = ctor.getParameter(i);\n                final PropertyName name = _findParamName(param, intr);\n\n                // must have name (implicit fine)\n                if (name == null || name.isEmpty()) {\n                    continue main_loop;\n                }\n                properties[i] = constructCreatorProperty(ctxt, beanDesc, name, param.getIndex(),\n                        param, /*injectId*/ null);\n            }\n            if (found != null) { // only one allowed\n                found = null;\n                break;\n            }\n            found = ctor;\n            foundProps = properties;\n        }",
      "info" : "LabeledStatement[25053-26160]:LabeledStatement[25053-26160]"
    }, {
      "left" : "for (AnnotatedConstructor ctor : implicitCtors)",
      "right" : "for (AnnotatedConstructor ctor : implicitCtors)",
      "info" : "EnhancedForStatement[25072-26160]:EnhancedForStatement[25072-26160]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25120-26160]:Block[25120-26160]"
    }, {
      "left" : "if (!vchecker.isCreatorVisible(ctor))",
      "right" : "if (!vchecker.isCreatorVisible(ctor))",
      "info" : "IfStatement[25134-25213]:IfStatement[25134-25213]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25172-25213]:Block[25172-25213]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[25190-25199]:ContinueStatement[25190-25199]"
    }, {
      "left" : "final int argCount = ctor.getParameterCount();",
      "right" : "final int argCount = ctor.getParameterCount();",
      "info" : "VariableDeclarationStatement[25321-25367]:VariableDeclarationStatement[25321-25367]"
    }, {
      "left" : "SettableBeanProperty[] properties = new SettableBeanProperty[argCount];",
      "right" : "SettableBeanProperty[] properties = new SettableBeanProperty[argCount];",
      "info" : "VariableDeclarationStatement[25380-25451]:VariableDeclarationStatement[25380-25451]"
    }, {
      "left" : "for (int i = 0; i < argCount; ++i)",
      "right" : "for (int i = 0; i < argCount; ++i)",
      "info" : "ForStatement[25464-25967]:ForStatement[25464-25967]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25499-25967]:Block[25499-25967]"
    }, {
      "left" : "final AnnotatedParameter param = ctor.getParameter(i);",
      "right" : "final AnnotatedParameter param = ctor.getParameter(i);",
      "info" : "VariableDeclarationStatement[25517-25571]:VariableDeclarationStatement[25517-25571]"
    }, {
      "left" : "final PropertyName name = _findParamName(param, intr);",
      "right" : "final PropertyName name = _findParamName(param, intr);",
      "info" : "VariableDeclarationStatement[25588-25642]:VariableDeclarationStatement[25588-25642]"
    }, {
      "left" : "if (name == null || name.isEmpty())",
      "right" : "if (name == null || name.isEmpty())",
      "info" : "IfStatement[25710-25805]:IfStatement[25710-25805]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25746-25805]:Block[25746-25805]"
    }, {
      "left" : "continue main_loop;",
      "right" : "continue main_loop;",
      "info" : "ContinueStatement[25768-25787]:ContinueStatement[25768-25787]"
    }, {
      "left" : "properties[i] = constructCreatorProperty(ctxt, beanDesc, name, param.getIndex(),\n                        param, /*injectId*/ null);",
      "right" : "properties[i] = constructCreatorProperty(ctxt, beanDesc, name, param.getIndex(),\n                        param, /*injectId*/ null);",
      "info" : "ExpressionStatement[25822-25953]:ExpressionStatement[25822-25953]"
    }, {
      "left" : "if (found != null)",
      "right" : "if (found != null)",
      "info" : "IfStatement[25980-26087]:IfStatement[25980-26087]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25999-26087]:Block[25999-26087]"
    }, {
      "left" : "found = null;",
      "right" : "found = null;",
      "info" : "ExpressionStatement[26037-26050]:ExpressionStatement[26037-26050]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[26067-26073]:BreakStatement[26067-26073]"
    }, {
      "left" : "found = ctor;",
      "right" : "found = ctor;",
      "info" : "ExpressionStatement[26100-26113]:ExpressionStatement[26100-26113]"
    }, {
      "left" : "foundProps = properties;",
      "right" : "foundProps = properties;",
      "info" : "ExpressionStatement[26126-26150]:ExpressionStatement[26126-26150]"
    }, {
      "left" : "if (found != null)",
      "right" : "if (found != null)",
      "info" : "IfStatement[26221-26892]:IfStatement[26221-26892]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26240-26892]:Block[26240-26892]"
    }, {
      "left" : "creators.addPropertyCreator(found, /*isCreator*/ false, foundProps);",
      "right" : "creators.addPropertyCreator(found, /*isCreator*/ false, foundProps);",
      "info" : "ExpressionStatement[26254-26322]:ExpressionStatement[26254-26322]"
    }, {
      "left" : "BasicBeanDescription bbd = (BasicBeanDescription) beanDesc;",
      "right" : "BasicBeanDescription bbd = (BasicBeanDescription) beanDesc;",
      "info" : "VariableDeclarationStatement[26335-26394]:VariableDeclarationStatement[26335-26394]"
    }, {
      "left" : "for (SettableBeanProperty prop : foundProps)",
      "right" : "for (SettableBeanProperty prop : foundProps)",
      "info" : "EnhancedForStatement[26500-26882]:EnhancedForStatement[26500-26882]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26545-26882]:Block[26545-26882]"
    }, {
      "left" : "PropertyName pn = prop.getFullName();",
      "right" : "PropertyName pn = prop.getFullName();",
      "info" : "VariableDeclarationStatement[26563-26600]:VariableDeclarationStatement[26563-26600]"
    }, {
      "left" : "if (!bbd.hasProperty(pn))",
      "right" : "if (!bbd.hasProperty(pn))",
      "info" : "IfStatement[26617-26868]:IfStatement[26617-26868]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26643-26868]:Block[26643-26868]"
    }, {
      "left" : "BeanPropertyDefinition newDef = SimpleBeanPropertyDefinition.construct(\n                            ctxt.getConfig(), prop.getMember(), pn);",
      "right" : "BeanPropertyDefinition newDef = SimpleBeanPropertyDefinition.construct(\n                            ctxt.getConfig(), prop.getMember(), pn);",
      "info" : "VariableDeclarationStatement[26665-26805]:VariableDeclarationStatement[26665-26805]"
    }, {
      "left" : "bbd.addProperty(newDef);",
      "right" : "bbd.addProperty(newDef);",
      "info" : "ExpressionStatement[26826-26850]:ExpressionStatement[26826-26850]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27057-28037]:Block[27057-28037]"
    }, {
      "left" : "JsonCreator.Mode mode = intr.findCreatorBinding(creator);",
      "right" : "JsonCreator.Mode mode = intr.findCreatorBinding(creator);",
      "info" : "VariableDeclarationStatement[27067-27124]:VariableDeclarationStatement[27067-27124]"
    }, {
      "left" : "if (mode == JsonCreator.Mode.PROPERTIES)",
      "right" : "if (mode == JsonCreator.Mode.PROPERTIES)",
      "info" : "IfStatement[27134-27211]:IfStatement[27134-27211]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27175-27211]:Block[27175-27211]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[27189-27201]:ReturnStatement[27189-27201]"
    }, {
      "left" : "if (mode == JsonCreator.Mode.DELEGATING)",
      "right" : "if (mode == JsonCreator.Mode.DELEGATING)",
      "info" : "IfStatement[27220-27298]:IfStatement[27220-27298]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27261-27298]:Block[27261-27298]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[27275-27288]:ReturnStatement[27275-27288]"
    }, {
      "left" : "if (((propDef != null) && propDef.isExplicitlyNamed())\n                || (intr.findInjectableValueId(creator.getParameter(0)) != null))",
      "right" : "if (((propDef != null) && propDef.isExplicitlyNamed())\n                || (intr.findInjectableValueId(creator.getParameter(0)) != null))",
      "info" : "IfStatement[27365-27538]:IfStatement[27365-27538]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27502-27538]:Block[27502-27538]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[27516-27528]:ReturnStatement[27516-27528]"
    }, {
      "left" : "if (propDef != null)",
      "right" : "if (propDef != null)",
      "info" : "IfStatement[27547-27945]:IfStatement[27547-27945]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27568-27945]:Block[27568-27945]"
    }, {
      "left" : "String implName = propDef.getName();",
      "right" : "String implName = propDef.getName();",
      "info" : "VariableDeclarationStatement[27727-27763]:VariableDeclarationStatement[27727-27763]"
    }, {
      "left" : "if (implName != null && !implName.isEmpty())",
      "right" : "if (implName != null && !implName.isEmpty())",
      "info" : "IfStatement[27776-27935]:IfStatement[27776-27935]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27821-27935]:Block[27821-27935]"
    }, {
      "left" : "if (propDef.couldSerialize())",
      "right" : "if (propDef.couldSerialize())",
      "info" : "IfStatement[27839-27921]:IfStatement[27839-27921]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27869-27921]:Block[27869-27921]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[27891-27903]:ReturnStatement[27891-27903]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[28018-28031]:ReturnStatement[28018-28031]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28381-29779]:Block[28381-29779]"
    }, {
      "left" : "Class<?> type = ctor.getRawParameterType(0);",
      "right" : "Class<?> type = ctor.getRawParameterType(0);",
      "info" : "VariableDeclarationStatement[28465-28509]:VariableDeclarationStatement[28465-28509]"
    }, {
      "left" : "if (type == String.class || type == CharSequence.class)",
      "right" : "if (type == String.class || type == CharSequence.class)",
      "info" : "IfStatement[28518-28726]:IfStatement[28518-28726]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28574-28726]:Block[28574-28726]"
    }, {
      "left" : "if (isCreator || isVisible)",
      "right" : "if (isCreator || isVisible)",
      "info" : "IfStatement[28588-28691]:IfStatement[28588-28691]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28616-28691]:Block[28616-28691]"
    }, {
      "left" : "creators.addStringCreator(ctor, isCreator);",
      "right" : "creators.addStringCreator(ctor, isCreator);",
      "info" : "ExpressionStatement[28634-28677]:ExpressionStatement[28634-28677]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[28704-28716]:ReturnStatement[28704-28716]"
    }, {
      "left" : "if (type == int.class || type == Integer.class)",
      "right" : "if (type == int.class || type == Integer.class)",
      "info" : "IfStatement[28735-28932]:IfStatement[28735-28932]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28783-28932]:Block[28783-28932]"
    }, {
      "left" : "if (isCreator || isVisible)",
      "right" : "if (isCreator || isVisible)",
      "info" : "IfStatement[28797-28897]:IfStatement[28797-28897]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28825-28897]:Block[28825-28897]"
    }, {
      "left" : "creators.addIntCreator(ctor, isCreator);",
      "right" : "creators.addIntCreator(ctor, isCreator);",
      "info" : "ExpressionStatement[28843-28883]:ExpressionStatement[28843-28883]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[28910-28922]:ReturnStatement[28910-28922]"
    }, {
      "left" : "if (type == long.class || type == Long.class)",
      "right" : "if (type == long.class || type == Long.class)",
      "info" : "IfStatement[28941-29137]:IfStatement[28941-29137]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28987-29137]:Block[28987-29137]"
    }, {
      "left" : "if (isCreator || isVisible)",
      "right" : "if (isCreator || isVisible)",
      "info" : "IfStatement[29001-29102]:IfStatement[29001-29102]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29029-29102]:Block[29029-29102]"
    }, {
      "left" : "creators.addLongCreator(ctor, isCreator);",
      "right" : "creators.addLongCreator(ctor, isCreator);",
      "info" : "ExpressionStatement[29047-29088]:ExpressionStatement[29047-29088]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[29115-29127]:ReturnStatement[29115-29127]"
    }, {
      "left" : "if (type == double.class || type == Double.class)",
      "right" : "if (type == double.class || type == Double.class)",
      "info" : "IfStatement[29146-29348]:IfStatement[29146-29348]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29196-29348]:Block[29196-29348]"
    }, {
      "left" : "if (isCreator || isVisible)",
      "right" : "if (isCreator || isVisible)",
      "info" : "IfStatement[29210-29313]:IfStatement[29210-29313]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29238-29313]:Block[29238-29313]"
    }, {
      "left" : "creators.addDoubleCreator(ctor, isCreator);",
      "right" : "creators.addDoubleCreator(ctor, isCreator);",
      "info" : "ExpressionStatement[29256-29299]:ExpressionStatement[29256-29299]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[29326-29338]:ReturnStatement[29326-29338]"
    }, {
      "left" : "if (type == boolean.class || type == Boolean.class)",
      "right" : "if (type == boolean.class || type == Boolean.class)",
      "info" : "IfStatement[29357-29562]:IfStatement[29357-29562]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29409-29562]:Block[29409-29562]"
    }, {
      "left" : "if (isCreator || isVisible)",
      "right" : "if (isCreator || isVisible)",
      "info" : "IfStatement[29423-29527]:IfStatement[29423-29527]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29451-29527]:Block[29451-29527]"
    }, {
      "left" : "creators.addBooleanCreator(ctor, isCreator);",
      "right" : "creators.addBooleanCreator(ctor, isCreator);",
      "info" : "ExpressionStatement[29469-29513]:ExpressionStatement[29469-29513]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[29540-29552]:ReturnStatement[29540-29552]"
    }, {
      "left" : "if (isCreator)",
      "right" : "if (isCreator)",
      "info" : "IfStatement[29634-29751]:IfStatement[29634-29751]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29649-29751]:Block[29649-29751]"
    }, {
      "left" : "creators.addDelegatingCreator(ctor, isCreator, null);",
      "right" : "creators.addDelegatingCreator(ctor, isCreator, null);",
      "info" : "ExpressionStatement[29663-29716]:ExpressionStatement[29663-29716]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[29729-29741]:ReturnStatement[29729-29741]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[29760-29773]:ReturnStatement[29760-29773]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30105-35687]:Block[30105-35687]"
    }, {
      "left" : "final DeserializationConfig config = ctxt.getConfig();",
      "right" : "final DeserializationConfig config = ctxt.getConfig();",
      "info" : "VariableDeclarationStatement[30115-30169]:VariableDeclarationStatement[30115-30169]"
    }, {
      "left" : "for (AnnotatedMethod factory : beanDesc.getFactoryMethods())",
      "right" : "for (AnnotatedMethod factory : beanDesc.getFactoryMethods())",
      "info" : "EnhancedForStatement[30178-35681]:EnhancedForStatement[30178-35681]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30239-35681]:Block[30239-35681]"
    }, {
      "left" : "final boolean isCreator = intr.hasCreatorAnnotation(factory);",
      "right" : "final boolean isCreator = intr.hasCreatorAnnotation(factory);",
      "info" : "VariableDeclarationStatement[30253-30314]:VariableDeclarationStatement[30253-30314]"
    }, {
      "left" : "final int argCount = factory.getParameterCount();",
      "right" : "final int argCount = factory.getParameterCount();",
      "info" : "VariableDeclarationStatement[30327-30376]:VariableDeclarationStatement[30327-30376]"
    }, {
      "left" : "if (argCount == 0)",
      "right" : "if (argCount == 0)",
      "info" : "IfStatement[30484-30652]:IfStatement[30484-30652]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30503-30652]:Block[30503-30652]"
    }, {
      "left" : "if (isCreator)",
      "right" : "if (isCreator)",
      "info" : "IfStatement[30521-30612]:IfStatement[30521-30612]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30536-30612]:Block[30536-30612]"
    }, {
      "left" : "creators.setDefaultCreator(factory);",
      "right" : "creators.setDefaultCreator(factory);",
      "info" : "ExpressionStatement[30558-30594]:ExpressionStatement[30558-30594]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[30629-30638]:ContinueStatement[30629-30638]"
    }, {
      "left" : "final BeanPropertyDefinition[] propDefs = creatorParams.get(factory);",
      "right" : "final BeanPropertyDefinition[] propDefs = creatorParams.get(factory);",
      "info" : "VariableDeclarationStatement[30666-30735]:VariableDeclarationStatement[30666-30735]"
    }, {
      "left" : "if (argCount == 1)",
      "right" : "if (argCount == 1)",
      "info" : "IfStatement[30830-31853]:IfStatement[30830-31853]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30849-31690]:Block[30849-31690]"
    }, {
      "left" : "BeanPropertyDefinition argDef = (propDefs == null) ? null : propDefs[0];",
      "right" : "BeanPropertyDefinition argDef = (propDefs == null) ? null : propDefs[0];",
      "info" : "VariableDeclarationStatement[30867-30939]:VariableDeclarationStatement[30867-30939]"
    }, {
      "left" : "boolean useProps = _checkIfCreatorPropertyBased(intr, factory, argDef);",
      "right" : "boolean useProps = _checkIfCreatorPropertyBased(intr, factory, argDef);",
      "info" : "VariableDeclarationStatement[30956-31027]:VariableDeclarationStatement[30956-31027]"
    }, {
      "left" : "if (!useProps)",
      "right" : "if (!useProps)",
      "info" : "IfStatement[31044-31628]:IfStatement[31044-31628]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31059-31628]:Block[31059-31628]"
    }, {
      "left" : "_handleSingleArgumentFactory(config, beanDesc, vchecker, intr, creators,\n                            factory, isCreator);",
      "right" : "_handleSingleArgumentFactory(config, beanDesc, vchecker, intr, creators,\n                            factory, isCreator);",
      "info" : "ExpressionStatement[31137-31258]:ExpressionStatement[31137-31258]"
    }, {
      "left" : "if (argDef != null)",
      "right" : "if (argDef != null)",
      "info" : "IfStatement[31460-31580]:IfStatement[31460-31580]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31480-31580]:Block[31480-31580]"
    }, {
      "left" : "((POJOPropertyBuilder) argDef).removeConstructors();",
      "right" : "((POJOPropertyBuilder) argDef).removeConstructors();",
      "info" : "ExpressionStatement[31506-31558]:ExpressionStatement[31506-31558]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[31601-31610]:ContinueStatement[31601-31610]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31696-31853]:Block[31696-31853]"
    }, {
      "left" : "if (!isCreator)",
      "right" : "if (!isCreator)",
      "info" : "IfStatement[31774-31839]:IfStatement[31774-31839]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31790-31839]:Block[31790-31839]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[31812-31821]:ContinueStatement[31812-31821]"
    }, {
      "left" : "AnnotatedParameter nonAnnotatedParam = null;",
      "right" : "AnnotatedParameter nonAnnotatedParam = null;",
      "info" : "VariableDeclarationStatement[31935-31979]:VariableDeclarationStatement[31935-31979]"
    }, {
      "left" : "SettableBeanProperty[] properties = new SettableBeanProperty[argCount];",
      "right" : "SettableBeanProperty[] properties = new SettableBeanProperty[argCount];",
      "info" : "VariableDeclarationStatement[32004-32075]:VariableDeclarationStatement[32004-32075]"
    }, {
      "left" : "int implicitNameCount = 0;",
      "right" : "int implicitNameCount = 0;",
      "info" : "VariableDeclarationStatement[32088-32114]:VariableDeclarationStatement[32088-32114]"
    }, {
      "left" : "int explicitNameCount = 0;",
      "right" : "int explicitNameCount = 0;",
      "info" : "VariableDeclarationStatement[32127-32153]:VariableDeclarationStatement[32127-32153]"
    }, {
      "left" : "int injectCount = 0;",
      "right" : "int injectCount = 0;",
      "info" : "VariableDeclarationStatement[32166-32186]:VariableDeclarationStatement[32166-32186]"
    }, {
      "left" : "for (int i = 0; i < argCount; ++i)",
      "right" : "for (int i = 0; i < argCount; ++i)",
      "info" : "ForStatement[32212-34637]:ForStatement[32212-34637]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32247-34637]:Block[32247-34637]"
    }, {
      "left" : "final AnnotatedParameter param = factory.getParameter(i);",
      "right" : "final AnnotatedParameter param = factory.getParameter(i);",
      "info" : "VariableDeclarationStatement[32265-32322]:VariableDeclarationStatement[32265-32322]"
    }, {
      "left" : "BeanPropertyDefinition propDef = (propDefs == null) ? null : propDefs[i];",
      "right" : "BeanPropertyDefinition propDef = (propDefs == null) ? null : propDefs[i];",
      "info" : "VariableDeclarationStatement[32339-32412]:VariableDeclarationStatement[32339-32412]"
    }, {
      "left" : "Object injectId = intr.findInjectableValueId(param);",
      "right" : "Object injectId = intr.findInjectableValueId(param);",
      "info" : "VariableDeclarationStatement[32429-32481]:VariableDeclarationStatement[32429-32481]"
    }, {
      "left" : "final PropertyName name = (propDef == null) ? null : propDef.getFullName();",
      "right" : "final PropertyName name = (propDef == null) ? null : propDef.getFullName();",
      "info" : "VariableDeclarationStatement[32498-32573]:VariableDeclarationStatement[32498-32573]"
    }, {
      "left" : "if (propDef != null && propDef.isExplicitlyNamed())",
      "right" : "if (propDef != null && propDef.isExplicitlyNamed())",
      "info" : "IfStatement[32591-32837]:IfStatement[32591-32837]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32643-32837]:Block[32643-32837]"
    }, {
      "left" : "++explicitNameCount;",
      "right" : "++explicitNameCount;",
      "info" : "ExpressionStatement[32665-32685]:ExpressionStatement[32665-32685]"
    }, {
      "left" : "properties[i] = constructCreatorProperty(ctxt, beanDesc, name, i, param, injectId);",
      "right" : "properties[i] = constructCreatorProperty(ctxt, beanDesc, name, i, param, injectId);",
      "info" : "ExpressionStatement[32706-32789]:ExpressionStatement[32706-32789]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[32810-32819]:ContinueStatement[32810-32819]"
    }, {
      "left" : "if (injectId != null)",
      "right" : "if (injectId != null)",
      "info" : "IfStatement[32854-33064]:IfStatement[32854-33064]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32876-33064]:Block[32876-33064]"
    }, {
      "left" : "++injectCount;",
      "right" : "++injectCount;",
      "info" : "ExpressionStatement[32898-32912]:ExpressionStatement[32898-32912]"
    }, {
      "left" : "properties[i] = constructCreatorProperty(ctxt, beanDesc, name, i, param, injectId);",
      "right" : "properties[i] = constructCreatorProperty(ctxt, beanDesc, name, i, param, injectId);",
      "info" : "ExpressionStatement[32933-33016]:ExpressionStatement[32933-33016]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[33037-33046]:ContinueStatement[33037-33046]"
    }, {
      "left" : "NameTransformer unwrapper = intr.findUnwrappingNameTransformer(param);",
      "right" : "NameTransformer unwrapper = intr.findUnwrappingNameTransformer(param);",
      "info" : "VariableDeclarationStatement[33081-33151]:VariableDeclarationStatement[33081-33151]"
    }, {
      "left" : "if (unwrapper != null)",
      "right" : "if (unwrapper != null)",
      "info" : "IfStatement[33168-33405]:IfStatement[33168-33405]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33191-33405]:Block[33191-33405]"
    }, {
      "left" : "properties[i] = constructCreatorProperty(ctxt, beanDesc, UNWRAPPED_CREATOR_PARAM_NAME, i, param, null);",
      "right" : "properties[i] = constructCreatorProperty(ctxt, beanDesc, UNWRAPPED_CREATOR_PARAM_NAME, i, param, null);",
      "info" : "ExpressionStatement[33213-33316]:ExpressionStatement[33213-33316]"
    }, {
      "left" : "++implicitNameCount;",
      "right" : "++implicitNameCount;",
      "info" : "ExpressionStatement[33337-33357]:ExpressionStatement[33337-33357]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[33378-33387]:ContinueStatement[33378-33387]"
    }, {
      "left" : "if (isCreator)",
      "right" : "if (isCreator)",
      "info" : "IfStatement[33511-33813]:IfStatement[33511-33813]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33526-33813]:Block[33526-33813]"
    }, {
      "left" : "if (name != null && !name.isEmpty())",
      "right" : "if (name != null && !name.isEmpty())",
      "info" : "IfStatement[33548-33795]:IfStatement[33548-33795]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33585-33795]:Block[33585-33795]"
    }, {
      "left" : "++implicitNameCount;",
      "right" : "++implicitNameCount;",
      "info" : "ExpressionStatement[33611-33631]:ExpressionStatement[33611-33631]"
    }, {
      "left" : "properties[i] = constructCreatorProperty(ctxt, beanDesc, name, i, param, injectId);",
      "right" : "properties[i] = constructCreatorProperty(ctxt, beanDesc, name, i, param, injectId);",
      "info" : "ExpressionStatement[33656-33739]:ExpressionStatement[33656-33739]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[33764-33773]:ContinueStatement[33764-33773]"
    }, {
      "left" : "if (nonAnnotatedParam == null)",
      "right" : "if (nonAnnotatedParam == null)",
      "info" : "IfStatement[34526-34623]:IfStatement[34526-34623]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34557-34623]:Block[34557-34623]"
    }, {
      "left" : "nonAnnotatedParam = param;",
      "right" : "nonAnnotatedParam = param;",
      "info" : "ExpressionStatement[34579-34605]:ExpressionStatement[34579-34605]"
    }, {
      "left" : "final int namedCount = explicitNameCount + implicitNameCount;",
      "right" : "final int namedCount = explicitNameCount + implicitNameCount;",
      "info" : "VariableDeclarationStatement[34650-34711]:VariableDeclarationStatement[34650-34711]"
    }, {
      "left" : "if (isCreator || explicitNameCount > 0 || injectCount > 0)",
      "right" : "if (isCreator || explicitNameCount > 0 || injectCount > 0)",
      "info" : "IfStatement[34804-35671]:IfStatement[34804-35671]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34863-35671]:Block[34863-35671]"
    }, {
      "left" : "if ((namedCount + injectCount) == argCount)",
      "right" : "if ((namedCount + injectCount) == argCount)",
      "info" : "IfStatement[34933-35657]:IfStatement[34933-35657]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34977-35077]:Block[34977-35077]"
    }, {
      "left" : "creators.addPropertyCreator(factory, isCreator, properties);",
      "right" : "creators.addPropertyCreator(factory, isCreator, properties);",
      "info" : "ExpressionStatement[34999-35059]:ExpressionStatement[34999-35059]"
    }, {
      "left" : "if ((explicitNameCount == 0) && ((injectCount + 1) == argCount))",
      "right" : "if ((explicitNameCount == 0) && ((injectCount + 1) == argCount))",
      "info" : "IfStatement[35083-35657]:IfStatement[35083-35657]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35148-35342]:Block[35148-35342]"
    }, {
      "left" : "creators.addDelegatingCreator(factory, isCreator, properties);",
      "right" : "creators.addDelegatingCreator(factory, isCreator, properties);",
      "info" : "ExpressionStatement[35262-35324]:ExpressionStatement[35262-35324]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35348-35657]:Block[35348-35657]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Argument #\"+nonAnnotatedParam.getIndex()\n                            +\" of factory method \"+factory+\" has no property name annotation; must have name when multiple-parameter constructor annotated as Creator\");",
      "right" : "throw new IllegalArgumentException(\"Argument #\"+nonAnnotatedParam.getIndex()\n                            +\" of factory method \"+factory+\" has no property name annotation; must have name when multiple-parameter constructor annotated as Creator\");",
      "info" : "ThrowStatement[35394-35639]:ThrowStatement[35394-35639]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36003-37419]:Block[36003-37419]"
    }, {
      "left" : "Class<?> type = factory.getRawParameterType(0);",
      "right" : "Class<?> type = factory.getRawParameterType(0);",
      "info" : "VariableDeclarationStatement[36013-36060]:VariableDeclarationStatement[36013-36060]"
    }, {
      "left" : "if (type == String.class || type == CharSequence.class)",
      "right" : "if (type == String.class || type == CharSequence.class)",
      "info" : "IfStatement[36078-36314]:IfStatement[36078-36314]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36134-36314]:Block[36134-36314]"
    }, {
      "left" : "if (isCreator || vchecker.isCreatorVisible(factory))",
      "right" : "if (isCreator || vchecker.isCreatorVisible(factory))",
      "info" : "IfStatement[36148-36279]:IfStatement[36148-36279]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36201-36279]:Block[36201-36279]"
    }, {
      "left" : "creators.addStringCreator(factory, isCreator);",
      "right" : "creators.addStringCreator(factory, isCreator);",
      "info" : "ExpressionStatement[36219-36265]:ExpressionStatement[36219-36265]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[36292-36304]:ReturnStatement[36292-36304]"
    }, {
      "left" : "if (type == int.class || type == Integer.class)",
      "right" : "if (type == int.class || type == Integer.class)",
      "info" : "IfStatement[36323-36548]:IfStatement[36323-36548]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36371-36548]:Block[36371-36548]"
    }, {
      "left" : "if (isCreator || vchecker.isCreatorVisible(factory))",
      "right" : "if (isCreator || vchecker.isCreatorVisible(factory))",
      "info" : "IfStatement[36385-36513]:IfStatement[36385-36513]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36438-36513]:Block[36438-36513]"
    }, {
      "left" : "creators.addIntCreator(factory, isCreator);",
      "right" : "creators.addIntCreator(factory, isCreator);",
      "info" : "ExpressionStatement[36456-36499]:ExpressionStatement[36456-36499]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[36526-36538]:ReturnStatement[36526-36538]"
    }, {
      "left" : "if (type == long.class || type == Long.class)",
      "right" : "if (type == long.class || type == Long.class)",
      "info" : "IfStatement[36557-36781]:IfStatement[36557-36781]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36603-36781]:Block[36603-36781]"
    }, {
      "left" : "if (isCreator || vchecker.isCreatorVisible(factory))",
      "right" : "if (isCreator || vchecker.isCreatorVisible(factory))",
      "info" : "IfStatement[36617-36746]:IfStatement[36617-36746]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36670-36746]:Block[36670-36746]"
    }, {
      "left" : "creators.addLongCreator(factory, isCreator);",
      "right" : "creators.addLongCreator(factory, isCreator);",
      "info" : "ExpressionStatement[36688-36732]:ExpressionStatement[36688-36732]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[36759-36771]:ReturnStatement[36759-36771]"
    }, {
      "left" : "if (type == double.class || type == Double.class)",
      "right" : "if (type == double.class || type == Double.class)",
      "info" : "IfStatement[36790-37020]:IfStatement[36790-37020]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36840-37020]:Block[36840-37020]"
    }, {
      "left" : "if (isCreator || vchecker.isCreatorVisible(factory))",
      "right" : "if (isCreator || vchecker.isCreatorVisible(factory))",
      "info" : "IfStatement[36854-36985]:IfStatement[36854-36985]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36907-36985]:Block[36907-36985]"
    }, {
      "left" : "creators.addDoubleCreator(factory, isCreator);",
      "right" : "creators.addDoubleCreator(factory, isCreator);",
      "info" : "ExpressionStatement[36925-36971]:ExpressionStatement[36925-36971]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[36998-37010]:ReturnStatement[36998-37010]"
    }, {
      "left" : "if (type == boolean.class || type == Boolean.class)",
      "right" : "if (type == boolean.class || type == Boolean.class)",
      "info" : "IfStatement[37029-37262]:IfStatement[37029-37262]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37081-37262]:Block[37081-37262]"
    }, {
      "left" : "if (isCreator || vchecker.isCreatorVisible(factory))",
      "right" : "if (isCreator || vchecker.isCreatorVisible(factory))",
      "info" : "IfStatement[37095-37227]:IfStatement[37095-37227]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37148-37227]:Block[37148-37227]"
    }, {
      "left" : "creators.addBooleanCreator(factory, isCreator);",
      "right" : "creators.addBooleanCreator(factory, isCreator);",
      "info" : "ExpressionStatement[37166-37213]:ExpressionStatement[37166-37213]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[37240-37252]:ReturnStatement[37240-37252]"
    }, {
      "left" : "if (isCreator)",
      "right" : "if (isCreator)",
      "info" : "IfStatement[37271-37391]:IfStatement[37271-37391]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37286-37391]:Block[37286-37391]"
    }, {
      "left" : "creators.addDelegatingCreator(factory, isCreator, null);",
      "right" : "creators.addDelegatingCreator(factory, isCreator, null);",
      "info" : "ExpressionStatement[37300-37356]:ExpressionStatement[37300-37356]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[37369-37381]:ReturnStatement[37369-37381]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[37400-37413]:ReturnStatement[37400-37413]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37869-39998]:Block[37869-39998]"
    }, {
      "left" : "final DeserializationConfig config = ctxt.getConfig();",
      "right" : "final DeserializationConfig config = ctxt.getConfig();",
      "info" : "VariableDeclarationStatement[37879-37933]:VariableDeclarationStatement[37879-37933]"
    }, {
      "left" : "final AnnotationIntrospector intr = ctxt.getAnnotationIntrospector();",
      "right" : "final AnnotationIntrospector intr = ctxt.getAnnotationIntrospector();",
      "info" : "VariableDeclarationStatement[37942-38011]:VariableDeclarationStatement[37942-38011]"
    }, {
      "left" : "PropertyMetadata metadata;",
      "right" : "PropertyMetadata metadata;",
      "info" : "VariableDeclarationStatement[38020-38046]:VariableDeclarationStatement[38020-38046]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38055-38596]:Block[38055-38596]"
    }, {
      "left" : "if (intr == null)",
      "right" : "if (intr == null)",
      "info" : "IfStatement[38069-38586]:IfStatement[38069-38586]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38087-38172]:Block[38087-38172]"
    }, {
      "left" : "metadata = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;",
      "right" : "metadata = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;",
      "info" : "ExpressionStatement[38105-38158]:ExpressionStatement[38105-38158]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38178-38586]:Block[38178-38586]"
    }, {
      "left" : "Boolean b = intr.hasRequiredMarker(param);",
      "right" : "Boolean b = intr.hasRequiredMarker(param);",
      "info" : "VariableDeclarationStatement[38196-38238]:VariableDeclarationStatement[38196-38238]"
    }, {
      "left" : "boolean req = (b != null && b.booleanValue());",
      "right" : "boolean req = (b != null && b.booleanValue());",
      "info" : "VariableDeclarationStatement[38255-38301]:VariableDeclarationStatement[38255-38301]"
    }, {
      "left" : "String desc = intr.findPropertyDescription(param);",
      "right" : "String desc = intr.findPropertyDescription(param);",
      "info" : "VariableDeclarationStatement[38318-38368]:VariableDeclarationStatement[38318-38368]"
    }, {
      "left" : "Integer idx = intr.findPropertyIndex(param);",
      "right" : "Integer idx = intr.findPropertyIndex(param);",
      "info" : "VariableDeclarationStatement[38385-38429]:VariableDeclarationStatement[38385-38429]"
    }, {
      "left" : "String def = intr.findPropertyDefaultValue(param);",
      "right" : "String def = intr.findPropertyDefaultValue(param);",
      "info" : "VariableDeclarationStatement[38446-38496]:VariableDeclarationStatement[38446-38496]"
    }, {
      "left" : "metadata = PropertyMetadata.construct(req, desc, idx, def);",
      "right" : "metadata = PropertyMetadata.construct(req, desc, idx, def);",
      "info" : "ExpressionStatement[38513-38572]:ExpressionStatement[38513-38572]"
    }, {
      "left" : "JavaType type = resolveMemberAndTypeAnnotations(ctxt, param, param.getType());",
      "right" : "JavaType type = resolveMemberAndTypeAnnotations(ctxt, param, param.getType());",
      "info" : "VariableDeclarationStatement[38605-38683]:VariableDeclarationStatement[38605-38683]"
    }, {
      "left" : "BeanProperty.Std property = new BeanProperty.Std(name, type,\n                intr.findWrapperName(param),\n                beanDesc.getClassAnnotations(), param, metadata);",
      "right" : "BeanProperty.Std property = new BeanProperty.Std(name, type,\n                intr.findWrapperName(param),\n                beanDesc.getClassAnnotations(), param, metadata);",
      "info" : "VariableDeclarationStatement[38692-38863]:VariableDeclarationStatement[38692-38863]"
    }, {
      "left" : "TypeDeserializer typeDeser = (TypeDeserializer) type.getTypeHandler();",
      "right" : "TypeDeserializer typeDeser = (TypeDeserializer) type.getTypeHandler();",
      "info" : "VariableDeclarationStatement[38952-39022]:VariableDeclarationStatement[38952-39022]"
    }, {
      "left" : "if (typeDeser == null)",
      "right" : "if (typeDeser == null)",
      "info" : "IfStatement[39085-39179]:IfStatement[39085-39179]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39108-39179]:Block[39108-39179]"
    }, {
      "left" : "typeDeser = findTypeDeserializer(config, type);",
      "right" : "typeDeser = findTypeDeserializer(config, type);",
      "info" : "ExpressionStatement[39122-39169]:ExpressionStatement[39122-39169]"
    }, {
      "left" : "SettableBeanProperty prop = new CreatorProperty(name, type, property.getWrapperName(),\n                typeDeser, beanDesc.getClassAnnotations(), param, index, injectableValueId,\n                metadata);",
      "right" : "SettableBeanProperty prop = new CreatorProperty(name, type, property.getWrapperName(),\n                typeDeser, beanDesc.getClassAnnotations(), param, index, injectableValueId,\n                metadata);",
      "info" : "VariableDeclarationStatement[39330-39535]:VariableDeclarationStatement[39330-39535]"
    }, {
      "left" : "JsonDeserializer<?> deser = findDeserializerFromAnnotation(ctxt, param);",
      "right" : "JsonDeserializer<?> deser = findDeserializerFromAnnotation(ctxt, param);",
      "info" : "VariableDeclarationStatement[39544-39616]:VariableDeclarationStatement[39544-39616]"
    }, {
      "left" : "if (deser == null)",
      "right" : "if (deser == null)",
      "info" : "IfStatement[39625-39699]:IfStatement[39625-39699]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39644-39699]:Block[39644-39699]"
    }, {
      "left" : "deser = type.getValueHandler();",
      "right" : "deser = type.getValueHandler();",
      "info" : "ExpressionStatement[39658-39689]:ExpressionStatement[39658-39689]"
    }, {
      "left" : "if (deser != null)",
      "right" : "if (deser != null)",
      "info" : "IfStatement[39708-39971]:IfStatement[39708-39971]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39727-39971]:Block[39727-39971]"
    }, {
      "left" : "deser = ctxt.handlePrimaryContextualization(deser, prop, type);",
      "right" : "deser = ctxt.handlePrimaryContextualization(deser, prop, type);",
      "info" : "ExpressionStatement[39844-39907]:ExpressionStatement[39844-39907]"
    }, {
      "left" : "prop = prop.withValueDeserializer(deser);",
      "right" : "prop = prop.withValueDeserializer(deser);",
      "info" : "ExpressionStatement[39920-39961]:ExpressionStatement[39920-39961]"
    }, {
      "left" : "return prop;",
      "right" : "return prop;",
      "info" : "ReturnStatement[39980-39992]:ReturnStatement[39980-39992]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40101-40634]:Block[40101-40634]"
    }, {
      "left" : "if (param != null && intr != null)",
      "right" : "if (param != null && intr != null)",
      "info" : "IfStatement[40111-40607]:IfStatement[40111-40607]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40146-40607]:Block[40146-40607]"
    }, {
      "left" : "PropertyName name = intr.findNameForDeserialization(param);",
      "right" : "PropertyName name = intr.findNameForDeserialization(param);",
      "info" : "VariableDeclarationStatement[40160-40219]:VariableDeclarationStatement[40160-40219]"
    }, {
      "left" : "if (name != null)",
      "right" : "if (name != null)",
      "info" : "IfStatement[40232-40294]:IfStatement[40232-40294]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40250-40294]:Block[40250-40294]"
    }, {
      "left" : "return name;",
      "right" : "return name;",
      "info" : "ReturnStatement[40268-40280]:ReturnStatement[40268-40280]"
    }, {
      "left" : "String str = intr.findImplicitPropertyName(param);",
      "right" : "String str = intr.findImplicitPropertyName(param);",
      "info" : "VariableDeclarationStatement[40432-40482]:VariableDeclarationStatement[40432-40482]"
    }, {
      "left" : "if (str != null && !str.isEmpty())",
      "right" : "if (str != null && !str.isEmpty())",
      "info" : "IfStatement[40495-40597]:IfStatement[40495-40597]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40530-40597]:Block[40530-40597]"
    }, {
      "left" : "return PropertyName.construct(str);",
      "right" : "return PropertyName.construct(str);",
      "info" : "ReturnStatement[40548-40583]:ReturnStatement[40548-40583]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[40616-40628]:ReturnStatement[40616-40628]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40745-40935]:Block[40745-40935]"
    }, {
      "left" : "String str = intr.findImplicitPropertyName(param);",
      "right" : "String str = intr.findImplicitPropertyName(param);",
      "info" : "VariableDeclarationStatement[40755-40805]:VariableDeclarationStatement[40755-40805]"
    }, {
      "left" : "if (str != null && !str.isEmpty())",
      "right" : "if (str != null && !str.isEmpty())",
      "info" : "IfStatement[40814-40908]:IfStatement[40814-40908]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40849-40908]:Block[40849-40908]"
    }, {
      "left" : "return PropertyName.construct(str);",
      "right" : "return PropertyName.construct(str);",
      "info" : "ReturnStatement[40863-40898]:ReturnStatement[40863-40898]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[40917-40929]:ReturnStatement[40917-40929]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41089-41231]:Block[41089-41231]"
    }, {
      "left" : "if (param != null && intr != null)",
      "right" : "if (param != null && intr != null)",
      "info" : "IfStatement[41099-41204]:IfStatement[41099-41204]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41134-41204]:Block[41134-41204]"
    }, {
      "left" : "return intr.findNameForDeserialization(param);",
      "right" : "return intr.findNameForDeserialization(param);",
      "info" : "ReturnStatement[41148-41194]:ReturnStatement[41148-41194]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[41213-41225]:ReturnStatement[41213-41225]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41379-41585]:Block[41379-41585]"
    }, {
      "left" : "if (param != null && intr != null)",
      "right" : "if (param != null && intr != null)",
      "info" : "IfStatement[41389-41557]:IfStatement[41389-41557]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41424-41557]:Block[41424-41557]"
    }, {
      "left" : "PropertyName n = intr.findNameForDeserialization(param);",
      "right" : "PropertyName n = intr.findNameForDeserialization(param);",
      "info" : "VariableDeclarationStatement[41438-41494]:VariableDeclarationStatement[41438-41494]"
    }, {
      "left" : "return (n != null) && n.hasSimpleName();",
      "right" : "return (n != null) && n.hasSimpleName();",
      "info" : "ReturnStatement[41507-41547]:ReturnStatement[41507-41547]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[41566-41579]:ReturnStatement[41566-41579]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41994-43632]:Block[41994-43632]"
    }, {
      "left" : "final DeserializationConfig config = ctxt.getConfig();",
      "right" : "final DeserializationConfig config = ctxt.getConfig();",
      "info" : "VariableDeclarationStatement[42004-42058]:VariableDeclarationStatement[42004-42058]"
    }, {
      "left" : "JavaType elemType = type.getContentType();",
      "right" : "JavaType elemType = type.getContentType();",
      "info" : "VariableDeclarationStatement[42067-42109]:VariableDeclarationStatement[42067-42109]"
    }, {
      "left" : "JsonDeserializer<Object> contentDeser = elemType.getValueHandler();",
      "right" : "JsonDeserializer<Object> contentDeser = elemType.getValueHandler();",
      "info" : "VariableDeclarationStatement[42197-42264]:VariableDeclarationStatement[42197-42264]"
    }, {
      "left" : "TypeDeserializer elemTypeDeser = elemType.getTypeHandler();",
      "right" : "TypeDeserializer elemTypeDeser = elemType.getTypeHandler();",
      "info" : "VariableDeclarationStatement[42375-42434]:VariableDeclarationStatement[42375-42434]"
    }, {
      "left" : "if (elemTypeDeser == null)",
      "right" : "if (elemTypeDeser == null)",
      "info" : "IfStatement[42497-42603]:IfStatement[42497-42603]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42524-42603]:Block[42524-42603]"
    }, {
      "left" : "elemTypeDeser = findTypeDeserializer(config, elemType);",
      "right" : "elemTypeDeser = findTypeDeserializer(config, elemType);",
      "info" : "ExpressionStatement[42538-42593]:ExpressionStatement[42538-42593]"
    }, {
      "left" : "JsonDeserializer<?>  deser = _findCustomArrayDeserializer(type,\n                config, beanDesc, elemTypeDeser, contentDeser);",
      "right" : "JsonDeserializer<?>  deser = _findCustomArrayDeserializer(type,\n                config, beanDesc, elemTypeDeser, contentDeser);",
      "info" : "VariableDeclarationStatement[42669-42796]:VariableDeclarationStatement[42669-42796]"
    }, {
      "left" : "if (deser == null)",
      "right" : "if (deser == null)",
      "info" : "IfStatement[42805-43272]:IfStatement[42805-43272]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42824-43272]:Block[42824-43272]"
    }, {
      "left" : "if (contentDeser == null)",
      "right" : "if (contentDeser == null)",
      "info" : "IfStatement[42838-43178]:IfStatement[42838-43178]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42864-43178]:Block[42864-43178]"
    }, {
      "left" : "Class<?> raw = elemType.getRawClass();",
      "right" : "Class<?> raw = elemType.getRawClass();",
      "info" : "VariableDeclarationStatement[42882-42920]:VariableDeclarationStatement[42882-42920]"
    }, {
      "left" : "if (elemType.isPrimitive())",
      "right" : "if (elemType.isPrimitive())",
      "info" : "IfStatement[42937-43164]:IfStatement[42937-43164]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42965-43053]:Block[42965-43053]"
    }, {
      "left" : "return PrimitiveArrayDeserializers.forType(raw);",
      "right" : "return PrimitiveArrayDeserializers.forType(raw);",
      "info" : "ReturnStatement[42987-43035]:ReturnStatement[42987-43035]"
    }, {
      "left" : "if (raw == String.class)",
      "right" : "if (raw == String.class)",
      "info" : "IfStatement[43059-43164]:IfStatement[43059-43164]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43084-43164]:Block[43084-43164]"
    }, {
      "left" : "return StringArrayDeserializer.instance;",
      "right" : "return StringArrayDeserializer.instance;",
      "info" : "ReturnStatement[43106-43146]:ReturnStatement[43106-43146]"
    }, {
      "left" : "deser = new ObjectArrayDeserializer(type, contentDeser, elemTypeDeser);",
      "right" : "deser = new ObjectArrayDeserializer(type, contentDeser, elemTypeDeser);",
      "info" : "ExpressionStatement[43191-43262]:ExpressionStatement[43191-43262]"
    }, {
      "left" : "if (_factoryConfig.hasDeserializerModifiers())",
      "right" : "if (_factoryConfig.hasDeserializerModifiers())",
      "info" : "IfStatement[43358-43604]:IfStatement[43358-43604]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43405-43604]:Block[43405-43604]"
    }, {
      "left" : "for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers())",
      "right" : "for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers())",
      "info" : "EnhancedForStatement[43419-43594]:EnhancedForStatement[43419-43594]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43495-43594]:Block[43495-43594]"
    }, {
      "left" : "deser = mod.modifyArrayDeserializer(config, type, beanDesc, deser);",
      "right" : "deser = mod.modifyArrayDeserializer(config, type, beanDesc, deser);",
      "info" : "ExpressionStatement[43513-43580]:ExpressionStatement[43513-43580]"
    }, {
      "left" : "return deser;",
      "right" : "return deser;",
      "info" : "ReturnStatement[43613-43626]:ReturnStatement[43613-43626]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44049-47856]:Block[44049-47856]"
    }, {
      "left" : "JavaType contentType = type.getContentType();",
      "right" : "JavaType contentType = type.getContentType();",
      "info" : "VariableDeclarationStatement[44059-44104]:VariableDeclarationStatement[44059-44104]"
    }, {
      "left" : "JsonDeserializer<Object> contentDeser = contentType.getValueHandler();",
      "right" : "JsonDeserializer<Object> contentDeser = contentType.getValueHandler();",
      "info" : "VariableDeclarationStatement[44183-44253]:VariableDeclarationStatement[44183-44253]"
    }, {
      "left" : "final DeserializationConfig config = ctxt.getConfig();",
      "right" : "final DeserializationConfig config = ctxt.getConfig();",
      "info" : "VariableDeclarationStatement[44262-44316]:VariableDeclarationStatement[44262-44316]"
    }, {
      "left" : "TypeDeserializer contentTypeDeser = contentType.getTypeHandler();",
      "right" : "TypeDeserializer contentTypeDeser = contentType.getTypeHandler();",
      "info" : "VariableDeclarationStatement[44428-44493]:VariableDeclarationStatement[44428-44493]"
    }, {
      "left" : "if (contentTypeDeser == null)",
      "right" : "if (contentTypeDeser == null)",
      "info" : "IfStatement[44556-44671]:IfStatement[44556-44671]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44586-44671]:Block[44586-44671]"
    }, {
      "left" : "contentTypeDeser = findTypeDeserializer(config, contentType);",
      "right" : "contentTypeDeser = findTypeDeserializer(config, contentType);",
      "info" : "ExpressionStatement[44600-44661]:ExpressionStatement[44600-44661]"
    }, {
      "left" : "JsonDeserializer<?> deser = _findCustomCollectionDeserializer(type,\n                config, beanDesc, contentTypeDeser, contentDeser);",
      "right" : "JsonDeserializer<?> deser = _findCustomCollectionDeserializer(type,\n                config, beanDesc, contentTypeDeser, contentDeser);",
      "info" : "VariableDeclarationStatement[44731-44865]:VariableDeclarationStatement[44731-44865]"
    }, {
      "left" : "if (deser == null)",
      "right" : "if (deser == null)",
      "info" : "IfStatement[44874-45253]:IfStatement[44874-45253]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44893-45253]:Block[44893-45253]"
    }, {
      "left" : "Class<?> collectionClass = type.getRawClass();",
      "right" : "Class<?> collectionClass = type.getRawClass();",
      "info" : "VariableDeclarationStatement[44907-44953]:VariableDeclarationStatement[44907-44953]"
    }, {
      "left" : "if (contentDeser == null)",
      "right" : "if (contentDeser == null)",
      "info" : "IfStatement[44966-45243]:IfStatement[44966-45243]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44992-45243]:Block[44992-45243]"
    }, {
      "left" : "if (EnumSet.class.isAssignableFrom(collectionClass))",
      "right" : "if (EnumSet.class.isAssignableFrom(collectionClass))",
      "info" : "IfStatement[45085-45229]:IfStatement[45085-45229]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45138-45229]:Block[45138-45229]"
    }, {
      "left" : "deser = new EnumSetDeserializer(contentType, null);",
      "right" : "deser = new EnumSetDeserializer(contentType, null);",
      "info" : "ExpressionStatement[45160-45211]:ExpressionStatement[45160-45211]"
    }, {
      "left" : "if (deser == null)",
      "right" : "if (deser == null)",
      "info" : "IfStatement[45724-47528]:IfStatement[45724-47528]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45743-47528]:Block[45743-47528]"
    }, {
      "left" : "if (type.isInterface() || type.isAbstract())",
      "right" : "if (type.isInterface() || type.isAbstract())",
      "info" : "IfStatement[45757-46546]:IfStatement[45757-46546]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45802-46546]:Block[45802-46546]"
    }, {
      "left" : "CollectionType implType = _mapAbstractCollectionType(type, config);",
      "right" : "CollectionType implType = _mapAbstractCollectionType(type, config);",
      "info" : "VariableDeclarationStatement[45820-45887]:VariableDeclarationStatement[45820-45887]"
    }, {
      "left" : "if (implType == null)",
      "right" : "if (implType == null)",
      "info" : "IfStatement[45904-46532]:IfStatement[45904-46532]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45926-46335]:Block[45926-46335]"
    }, {
      "left" : "if (type.getTypeHandler() == null)",
      "right" : "if (type.getTypeHandler() == null)",
      "info" : "IfStatement[46049-46237]:IfStatement[46049-46237]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46084-46237]:Block[46084-46237]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Can not find a deserializer for non-concrete Collection type \"+type);",
      "right" : "throw new IllegalArgumentException(\"Can not find a deserializer for non-concrete Collection type \"+type);",
      "info" : "ThrowStatement[46110-46215]:ThrowStatement[46110-46215]"
    }, {
      "left" : "deser = AbstractDeserializer.constructForNonPOJO(beanDesc);",
      "right" : "deser = AbstractDeserializer.constructForNonPOJO(beanDesc);",
      "info" : "ExpressionStatement[46258-46317]:ExpressionStatement[46258-46317]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46341-46532]:Block[46341-46532]"
    }, {
      "left" : "type = implType;",
      "right" : "type = implType;",
      "info" : "ExpressionStatement[46363-46379]:ExpressionStatement[46363-46379]"
    }, {
      "left" : "beanDesc = config.introspectForCreation(type);",
      "right" : "beanDesc = config.introspectForCreation(type);",
      "info" : "ExpressionStatement[46468-46514]:ExpressionStatement[46468-46514]"
    }, {
      "left" : "if (deser == null)",
      "right" : "if (deser == null)",
      "info" : "IfStatement[46559-47518]:IfStatement[46559-47518]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46578-47518]:Block[46578-47518]"
    }, {
      "left" : "ValueInstantiator inst = findValueInstantiator(ctxt, beanDesc);",
      "right" : "ValueInstantiator inst = findValueInstantiator(ctxt, beanDesc);",
      "info" : "VariableDeclarationStatement[46596-46659]:VariableDeclarationStatement[46596-46659]"
    }, {
      "left" : "if (!inst.canCreateUsingDefault())",
      "right" : "if (!inst.canCreateUsingDefault())",
      "info" : "IfStatement[46676-47025]:IfStatement[46676-47025]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46711-47025]:Block[46711-47025]"
    }, {
      "left" : "if (type.getRawClass() == ArrayBlockingQueue.class)",
      "right" : "if (type.getRawClass() == ArrayBlockingQueue.class)",
      "info" : "IfStatement[46821-47007]:IfStatement[46821-47007]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46873-47007]:Block[46873-47007]"
    }, {
      "left" : "return new ArrayBlockingQueueDeserializer(type, contentDeser, contentTypeDeser, inst);",
      "right" : "return new ArrayBlockingQueueDeserializer(type, contentDeser, contentTypeDeser, inst);",
      "info" : "ReturnStatement[46899-46985]:ReturnStatement[46899-46985]"
    }, {
      "left" : "if (contentType.getRawClass() == String.class)",
      "right" : "if (contentType.getRawClass() == String.class)",
      "info" : "IfStatement[47126-47504]:IfStatement[47126-47504]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47173-47379]:Block[47173-47379]"
    }, {
      "left" : "deser = new StringCollectionDeserializer(type, contentDeser, inst);",
      "right" : "deser = new StringCollectionDeserializer(type, contentDeser, inst);",
      "info" : "ExpressionStatement[47294-47361]:ExpressionStatement[47294-47361]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47385-47504]:Block[47385-47504]"
    }, {
      "left" : "deser = new CollectionDeserializer(type, contentDeser, contentTypeDeser, inst);",
      "right" : "deser = new CollectionDeserializer(type, contentDeser, contentTypeDeser, inst);",
      "info" : "ExpressionStatement[47407-47486]:ExpressionStatement[47407-47486]"
    }, {
      "left" : "if (_factoryConfig.hasDeserializerModifiers())",
      "right" : "if (_factoryConfig.hasDeserializerModifiers())",
      "info" : "IfStatement[47577-47828]:IfStatement[47577-47828]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47624-47828]:Block[47624-47828]"
    }, {
      "left" : "for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers())",
      "right" : "for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers())",
      "info" : "EnhancedForStatement[47638-47818]:EnhancedForStatement[47638-47818]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47714-47818]:Block[47714-47818]"
    }, {
      "left" : "deser = mod.modifyCollectionDeserializer(config, type, beanDesc, deser);",
      "right" : "deser = mod.modifyCollectionDeserializer(config, type, beanDesc, deser);",
      "info" : "ExpressionStatement[47732-47804]:ExpressionStatement[47732-47804]"
    }, {
      "left" : "return deser;",
      "right" : "return deser;",
      "info" : "ReturnStatement[47837-47850]:ReturnStatement[47837-47850]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47963-48266]:Block[47963-48266]"
    }, {
      "left" : "Class<?> collectionClass = type.getRawClass();",
      "right" : "Class<?> collectionClass = type.getRawClass();",
      "info" : "VariableDeclarationStatement[47973-48019]:VariableDeclarationStatement[47973-48019]"
    }, {
      "left" : "collectionClass = _collectionFallbacks.get(collectionClass.getName());",
      "right" : "collectionClass = _collectionFallbacks.get(collectionClass.getName());",
      "info" : "ExpressionStatement[48028-48098]:ExpressionStatement[48028-48098]"
    }, {
      "left" : "if (collectionClass == null)",
      "right" : "if (collectionClass == null)",
      "info" : "IfStatement[48107-48172]:IfStatement[48107-48172]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48136-48172]:Block[48136-48172]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[48150-48162]:ReturnStatement[48150-48162]"
    }, {
      "left" : "return (CollectionType) config.constructSpecializedType(type, collectionClass);",
      "right" : "return (CollectionType) config.constructSpecializedType(type, collectionClass);",
      "info" : "ReturnStatement[48181-48260]:ReturnStatement[48181-48260]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48587-49794]:Block[48587-49794]"
    }, {
      "left" : "JavaType contentType = type.getContentType();",
      "right" : "JavaType contentType = type.getContentType();",
      "info" : "VariableDeclarationStatement[48597-48642]:VariableDeclarationStatement[48597-48642]"
    }, {
      "left" : "JsonDeserializer<Object> contentDeser = contentType.getValueHandler();",
      "right" : "JsonDeserializer<Object> contentDeser = contentType.getValueHandler();",
      "info" : "VariableDeclarationStatement[48721-48791]:VariableDeclarationStatement[48721-48791]"
    }, {
      "left" : "final DeserializationConfig config = ctxt.getConfig();",
      "right" : "final DeserializationConfig config = ctxt.getConfig();",
      "info" : "VariableDeclarationStatement[48800-48854]:VariableDeclarationStatement[48800-48854]"
    }, {
      "left" : "TypeDeserializer contentTypeDeser = contentType.getTypeHandler();",
      "right" : "TypeDeserializer contentTypeDeser = contentType.getTypeHandler();",
      "info" : "VariableDeclarationStatement[48972-49037]:VariableDeclarationStatement[48972-49037]"
    }, {
      "left" : "if (contentTypeDeser == null)",
      "right" : "if (contentTypeDeser == null)",
      "info" : "IfStatement[49100-49215]:IfStatement[49100-49215]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49130-49215]:Block[49130-49215]"
    }, {
      "left" : "contentTypeDeser = findTypeDeserializer(config, contentType);",
      "right" : "contentTypeDeser = findTypeDeserializer(config, contentType);",
      "info" : "ExpressionStatement[49144-49205]:ExpressionStatement[49144-49205]"
    }, {
      "left" : "JsonDeserializer<?> deser = _findCustomCollectionLikeDeserializer(type, config, beanDesc,\n                contentTypeDeser, contentDeser);",
      "right" : "JsonDeserializer<?> deser = _findCustomCollectionLikeDeserializer(type, config, beanDesc,\n                contentTypeDeser, contentDeser);",
      "info" : "VariableDeclarationStatement[49224-49362]:VariableDeclarationStatement[49224-49362]"
    }, {
      "left" : "if (deser != null)",
      "right" : "if (deser != null)",
      "info" : "IfStatement[49371-49766]:IfStatement[49371-49766]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49390-49766]:Block[49390-49766]"
    }, {
      "left" : "if (_factoryConfig.hasDeserializerModifiers())",
      "right" : "if (_factoryConfig.hasDeserializerModifiers())",
      "info" : "IfStatement[49485-49756]:IfStatement[49485-49756]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49532-49756]:Block[49532-49756]"
    }, {
      "left" : "for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers())",
      "right" : "for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers())",
      "info" : "EnhancedForStatement[49550-49742]:EnhancedForStatement[49550-49742]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49626-49742]:Block[49626-49742]"
    }, {
      "left" : "deser = mod.modifyCollectionLikeDeserializer(config, type, beanDesc, deser);",
      "right" : "deser = mod.modifyCollectionLikeDeserializer(config, type, beanDesc, deser);",
      "info" : "ExpressionStatement[49648-49724]:ExpressionStatement[49648-49724]"
    }, {
      "left" : "return deser;",
      "right" : "return deser;",
      "info" : "ReturnStatement[49775-49788]:ReturnStatement[49775-49788]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50190-54724]:Block[50190-54724]"
    }, {
      "left" : "final DeserializationConfig config = ctxt.getConfig();",
      "right" : "final DeserializationConfig config = ctxt.getConfig();",
      "info" : "VariableDeclarationStatement[50200-50254]:VariableDeclarationStatement[50200-50254]"
    }, {
      "left" : "JavaType keyType = type.getKeyType();",
      "right" : "JavaType keyType = type.getKeyType();",
      "info" : "VariableDeclarationStatement[50263-50300]:VariableDeclarationStatement[50263-50300]"
    }, {
      "left" : "JavaType contentType = type.getContentType();",
      "right" : "JavaType contentType = type.getContentType();",
      "info" : "VariableDeclarationStatement[50309-50354]:VariableDeclarationStatement[50309-50354]"
    }, {
      "left" : "@SuppressWarnings(\"unchecked\")\n        JsonDeserializer<Object> contentDeser = (JsonDeserializer<Object>) contentType.getValueHandler();",
      "right" : "@SuppressWarnings(\"unchecked\")\n        JsonDeserializer<Object> contentDeser = (JsonDeserializer<Object>) contentType.getValueHandler();",
      "info" : "VariableDeclarationStatement[50445-50581]:VariableDeclarationStatement[50445-50581]"
    }, {
      "left" : "KeyDeserializer keyDes = (KeyDeserializer) keyType.getValueHandler();",
      "right" : "KeyDeserializer keyDes = (KeyDeserializer) keyType.getValueHandler();",
      "info" : "VariableDeclarationStatement[50662-50731]:VariableDeclarationStatement[50662-50731]"
    }, {
      "left" : "TypeDeserializer contentTypeDeser = contentType.getTypeHandler();",
      "right" : "TypeDeserializer contentTypeDeser = contentType.getTypeHandler();",
      "info" : "VariableDeclarationStatement[50825-50890]:VariableDeclarationStatement[50825-50890]"
    }, {
      "left" : "if (contentTypeDeser == null)",
      "right" : "if (contentTypeDeser == null)",
      "info" : "IfStatement[50953-51068]:IfStatement[50953-51068]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50983-51068]:Block[50983-51068]"
    }, {
      "left" : "contentTypeDeser = findTypeDeserializer(config, contentType);",
      "right" : "contentTypeDeser = findTypeDeserializer(config, contentType);",
      "info" : "ExpressionStatement[50997-51058]:ExpressionStatement[50997-51058]"
    }, {
      "left" : "JsonDeserializer<?> deser = _findCustomMapDeserializer(type, config, beanDesc,\n                keyDes, contentTypeDeser, contentDeser);",
      "right" : "JsonDeserializer<?> deser = _findCustomMapDeserializer(type, config, beanDesc,\n                keyDes, contentTypeDeser, contentDeser);",
      "info" : "VariableDeclarationStatement[51129-51264]:VariableDeclarationStatement[51129-51264]"
    }, {
      "left" : "if (deser == null)",
      "right" : "if (deser == null)",
      "info" : "IfStatement[51274-54443]:IfStatement[51274-54443]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51293-54443]:Block[51293-54443]"
    }, {
      "left" : "Class<?> mapClass = type.getRawClass();",
      "right" : "Class<?> mapClass = type.getRawClass();",
      "info" : "VariableDeclarationStatement[51406-51445]:VariableDeclarationStatement[51406-51445]"
    }, {
      "left" : "if (EnumMap.class.isAssignableFrom(mapClass))",
      "right" : "if (EnumMap.class.isAssignableFrom(mapClass))",
      "info" : "IfStatement[51458-51852]:IfStatement[51458-51852]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51504-51852]:Block[51504-51852]"
    }, {
      "left" : "Class<?> kt = keyType.getRawClass();",
      "right" : "Class<?> kt = keyType.getRawClass();",
      "info" : "VariableDeclarationStatement[51522-51558]:VariableDeclarationStatement[51522-51558]"
    }, {
      "left" : "if (kt == null || !kt.isEnum())",
      "right" : "if (kt == null || !kt.isEnum())",
      "info" : "IfStatement[51575-51745]:IfStatement[51575-51745]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51607-51745]:Block[51607-51745]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Can not construct EnumMap; generic (key) type not available\");",
      "right" : "throw new IllegalArgumentException(\"Can not construct EnumMap; generic (key) type not available\");",
      "info" : "ThrowStatement[51629-51727]:ThrowStatement[51629-51727]"
    }, {
      "left" : "deser = new EnumMapDeserializer(type, null, contentDeser, contentTypeDeser);",
      "right" : "deser = new EnumMapDeserializer(type, null, contentDeser, contentTypeDeser);",
      "info" : "ExpressionStatement[51762-51838]:ExpressionStatement[51762-51838]"
    }, {
      "left" : "if (deser == null)",
      "right" : "if (deser == null)",
      "info" : "IfStatement[52431-54433]:IfStatement[52431-54433]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52450-54433]:Block[52450-54433]"
    }, {
      "left" : "if (type.isInterface() || type.isAbstract())",
      "right" : "if (type.isInterface() || type.isAbstract())",
      "info" : "IfStatement[52468-53448]:IfStatement[52468-53448]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52513-53448]:Block[52513-53448]"
    }, {
      "left" : "@SuppressWarnings(\"rawtypes\")\n                    Class<? extends Map> fallback = _mapFallbacks.get(mapClass.getName());",
      "right" : "@SuppressWarnings(\"rawtypes\")\n                    Class<? extends Map> fallback = _mapFallbacks.get(mapClass.getName());",
      "info" : "VariableDeclarationStatement[52535-52655]:VariableDeclarationStatement[52535-52655]"
    }, {
      "left" : "if (fallback != null)",
      "right" : "if (fallback != null)",
      "info" : "IfStatement[52676-53430]:IfStatement[52676-53430]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52698-52999]:Block[52698-52999]"
    }, {
      "left" : "mapClass = fallback;",
      "right" : "mapClass = fallback;",
      "info" : "ExpressionStatement[52724-52744]:ExpressionStatement[52724-52744]"
    }, {
      "left" : "type = (MapType) config.constructSpecializedType(type, mapClass);",
      "right" : "type = (MapType) config.constructSpecializedType(type, mapClass);",
      "info" : "ExpressionStatement[52769-52834]:ExpressionStatement[52769-52834]"
    }, {
      "left" : "beanDesc = config.introspectForCreation(type);",
      "right" : "beanDesc = config.introspectForCreation(type);",
      "info" : "ExpressionStatement[52931-52977]:ExpressionStatement[52931-52977]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53005-53430]:Block[53005-53430]"
    }, {
      "left" : "if (type.getTypeHandler() == null)",
      "right" : "if (type.getTypeHandler() == null)",
      "info" : "IfStatement[53135-53324]:IfStatement[53135-53324]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53170-53324]:Block[53170-53324]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Can not find a deserializer for non-concrete Map type \"+type);",
      "right" : "throw new IllegalArgumentException(\"Can not find a deserializer for non-concrete Map type \"+type);",
      "info" : "ThrowStatement[53200-53298]:ThrowStatement[53200-53298]"
    }, {
      "left" : "deser = AbstractDeserializer.constructForNonPOJO(beanDesc);",
      "right" : "deser = AbstractDeserializer.constructForNonPOJO(beanDesc);",
      "info" : "ExpressionStatement[53349-53408]:ExpressionStatement[53349-53408]"
    }, {
      "left" : "if (deser == null)",
      "right" : "if (deser == null)",
      "info" : "IfStatement[53465-54419]:IfStatement[53465-54419]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53484-54419]:Block[53484-54419]"
    }, {
      "left" : "ValueInstantiator inst = findValueInstantiator(ctxt, beanDesc);",
      "right" : "ValueInstantiator inst = findValueInstantiator(ctxt, beanDesc);",
      "info" : "VariableDeclarationStatement[53506-53569]:VariableDeclarationStatement[53506-53569]"
    }, {
      "left" : "MapDeserializer md = new MapDeserializer(type, inst, keyDes, contentDeser, contentTypeDeser);",
      "right" : "MapDeserializer md = new MapDeserializer(type, inst, keyDes, contentDeser, contentTypeDeser);",
      "info" : "VariableDeclarationStatement[53923-54016]:VariableDeclarationStatement[53923-54016]"
    }, {
      "left" : "JsonIgnoreProperties.Value ignorals = config.getDefaultPropertyIgnorals(Map.class,\n                            beanDesc.getClassInfo());",
      "right" : "JsonIgnoreProperties.Value ignorals = config.getDefaultPropertyIgnorals(Map.class,\n                            beanDesc.getClassInfo());",
      "info" : "VariableDeclarationStatement[54037-54173]:VariableDeclarationStatement[54037-54173]"
    }, {
      "left" : "Set<String> ignored = (ignorals == null) ? null\n                            : ignorals.findIgnoredForDeserialization();",
      "right" : "Set<String> ignored = (ignorals == null) ? null\n                            : ignorals.findIgnoredForDeserialization();",
      "info" : "VariableDeclarationStatement[54194-54313]:VariableDeclarationStatement[54194-54313]"
    }, {
      "left" : "md.setIgnorableProperties(ignored);",
      "right" : "md.setIgnorableProperties(ignored);",
      "info" : "ExpressionStatement[54334-54369]:ExpressionStatement[54334-54369]"
    }, {
      "left" : "deser = md;",
      "right" : "deser = md;",
      "info" : "ExpressionStatement[54390-54401]:ExpressionStatement[54390-54401]"
    }, {
      "left" : "if (_factoryConfig.hasDeserializerModifiers())",
      "right" : "if (_factoryConfig.hasDeserializerModifiers())",
      "info" : "IfStatement[54452-54696]:IfStatement[54452-54696]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54499-54696]:Block[54499-54696]"
    }, {
      "left" : "for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers())",
      "right" : "for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers())",
      "info" : "EnhancedForStatement[54513-54686]:EnhancedForStatement[54513-54686]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54589-54686]:Block[54589-54686]"
    }, {
      "left" : "deser = mod.modifyMapDeserializer(config, type, beanDesc, deser);",
      "right" : "deser = mod.modifyMapDeserializer(config, type, beanDesc, deser);",
      "info" : "ExpressionStatement[54607-54672]:ExpressionStatement[54607-54672]"
    }, {
      "left" : "return deser;",
      "right" : "return deser;",
      "info" : "ReturnStatement[54705-54718]:ReturnStatement[54705-54718]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55020-56697]:Block[55020-56697]"
    }, {
      "left" : "JavaType keyType = type.getKeyType();",
      "right" : "JavaType keyType = type.getKeyType();",
      "info" : "VariableDeclarationStatement[55030-55067]:VariableDeclarationStatement[55030-55067]"
    }, {
      "left" : "JavaType contentType = type.getContentType();",
      "right" : "JavaType contentType = type.getContentType();",
      "info" : "VariableDeclarationStatement[55076-55121]:VariableDeclarationStatement[55076-55121]"
    }, {
      "left" : "final DeserializationConfig config = ctxt.getConfig();",
      "right" : "final DeserializationConfig config = ctxt.getConfig();",
      "info" : "VariableDeclarationStatement[55130-55184]:VariableDeclarationStatement[55130-55184]"
    }, {
      "left" : "@SuppressWarnings(\"unchecked\")\n        JsonDeserializer<Object> contentDeser = (JsonDeserializer<Object>) contentType.getValueHandler();",
      "right" : "@SuppressWarnings(\"unchecked\")\n        JsonDeserializer<Object> contentDeser = (JsonDeserializer<Object>) contentType.getValueHandler();",
      "info" : "VariableDeclarationStatement[55275-55411]:VariableDeclarationStatement[55275-55411]"
    }, {
      "left" : "KeyDeserializer keyDes = (KeyDeserializer) keyType.getValueHandler();",
      "right" : "KeyDeserializer keyDes = (KeyDeserializer) keyType.getValueHandler();",
      "info" : "VariableDeclarationStatement[55500-55569]:VariableDeclarationStatement[55500-55569]"
    }, {
      "left" : "TypeDeserializer contentTypeDeser = contentType.getTypeHandler();",
      "right" : "TypeDeserializer contentTypeDeser = contentType.getTypeHandler();",
      "info" : "VariableDeclarationStatement[55881-55946]:VariableDeclarationStatement[55881-55946]"
    }, {
      "left" : "if (contentTypeDeser == null)",
      "right" : "if (contentTypeDeser == null)",
      "info" : "IfStatement[56009-56124]:IfStatement[56009-56124]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56039-56124]:Block[56039-56124]"
    }, {
      "left" : "contentTypeDeser = findTypeDeserializer(config, contentType);",
      "right" : "contentTypeDeser = findTypeDeserializer(config, contentType);",
      "info" : "ExpressionStatement[56053-56114]:ExpressionStatement[56053-56114]"
    }, {
      "left" : "JsonDeserializer<?> deser = _findCustomMapLikeDeserializer(type, config,\n                beanDesc, keyDes, contentTypeDeser, contentDeser);",
      "right" : "JsonDeserializer<?> deser = _findCustomMapLikeDeserializer(type, config,\n                beanDesc, keyDes, contentTypeDeser, contentDeser);",
      "info" : "VariableDeclarationStatement[56133-56272]:VariableDeclarationStatement[56133-56272]"
    }, {
      "left" : "if (deser != null)",
      "right" : "if (deser != null)",
      "info" : "IfStatement[56281-56669]:IfStatement[56281-56669]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56300-56669]:Block[56300-56669]"
    }, {
      "left" : "if (_factoryConfig.hasDeserializerModifiers())",
      "right" : "if (_factoryConfig.hasDeserializerModifiers())",
      "info" : "IfStatement[56395-56659]:IfStatement[56395-56659]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56442-56659]:Block[56442-56659]"
    }, {
      "left" : "for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers())",
      "right" : "for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers())",
      "info" : "EnhancedForStatement[56460-56645]:EnhancedForStatement[56460-56645]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56536-56645]:Block[56536-56645]"
    }, {
      "left" : "deser = mod.modifyMapLikeDeserializer(config, type, beanDesc, deser);",
      "right" : "deser = mod.modifyMapLikeDeserializer(config, type, beanDesc, deser);",
      "info" : "ExpressionStatement[56558-56627]:ExpressionStatement[56558-56627]"
    }, {
      "left" : "return deser;",
      "right" : "return deser;",
      "info" : "ReturnStatement[56678-56691]:ReturnStatement[56678-56691]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57176-59249]:Block[57176-59249]"
    }, {
      "left" : "final DeserializationConfig config = ctxt.getConfig();",
      "right" : "final DeserializationConfig config = ctxt.getConfig();",
      "info" : "VariableDeclarationStatement[57186-57240]:VariableDeclarationStatement[57186-57240]"
    }, {
      "left" : "final Class<?> enumClass = type.getRawClass();",
      "right" : "final Class<?> enumClass = type.getRawClass();",
      "info" : "VariableDeclarationStatement[57249-57295]:VariableDeclarationStatement[57249-57295]"
    }, {
      "left" : "JsonDeserializer<?> deser = _findCustomEnumDeserializer(enumClass, config, beanDesc);",
      "right" : "JsonDeserializer<?> deser = _findCustomEnumDeserializer(enumClass, config, beanDesc);",
      "info" : "VariableDeclarationStatement[57355-57440]:VariableDeclarationStatement[57355-57440]"
    }, {
      "left" : "if (deser == null)",
      "right" : "if (deser == null)",
      "info" : "IfStatement[57450-58926]:IfStatement[57450-58926]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57469-58926]:Block[57469-58926]"
    }, {
      "left" : "ValueInstantiator valueInstantiator = _constructDefaultValueInstantiator(ctxt, beanDesc);",
      "right" : "ValueInstantiator valueInstantiator = _constructDefaultValueInstantiator(ctxt, beanDesc);",
      "info" : "VariableDeclarationStatement[57483-57572]:VariableDeclarationStatement[57483-57572]"
    }, {
      "left" : "SettableBeanProperty[] creatorProps = (valueInstantiator == null) ? null\n                    : valueInstantiator.getFromObjectArguments(ctxt.getConfig());",
      "right" : "SettableBeanProperty[] creatorProps = (valueInstantiator == null) ? null\n                    : valueInstantiator.getFromObjectArguments(ctxt.getConfig());",
      "info" : "VariableDeclarationStatement[57585-57739]:VariableDeclarationStatement[57585-57739]"
    }, {
      "left" : "for (AnnotatedMethod factory : beanDesc.getFactoryMethods())",
      "right" : "for (AnnotatedMethod factory : beanDesc.getFactoryMethods())",
      "info" : "EnhancedForStatement[57816-58657]:EnhancedForStatement[57816-58657]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57877-58657]:Block[57877-58657]"
    }, {
      "left" : "if (ctxt.getAnnotationIntrospector().hasCreatorAnnotation(factory))",
      "right" : "if (ctxt.getAnnotationIntrospector().hasCreatorAnnotation(factory))",
      "info" : "IfStatement[57895-58643]:IfStatement[57895-58643]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57963-58643]:Block[57963-58643]"
    }, {
      "left" : "if (factory.getParameterCount() == 0)",
      "right" : "if (factory.getParameterCount() == 0)",
      "info" : "IfStatement[57985-58202]:IfStatement[57985-58202]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58023-58202]:Block[58023-58202]"
    }, {
      "left" : "deser = EnumDeserializer.deserializerForNoArgsCreator(config, enumClass, factory);",
      "right" : "deser = EnumDeserializer.deserializerForNoArgsCreator(config, enumClass, factory);",
      "info" : "ExpressionStatement[58067-58149]:ExpressionStatement[58067-58149]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[58174-58180]:BreakStatement[58174-58180]"
    }, {
      "left" : "Class<?> returnType = factory.getRawReturnType();",
      "right" : "Class<?> returnType = factory.getRawReturnType();",
      "info" : "VariableDeclarationStatement[58223-58272]:VariableDeclarationStatement[58223-58272]"
    }, {
      "left" : "if (returnType.isAssignableFrom(enumClass))",
      "right" : "if (returnType.isAssignableFrom(enumClass))",
      "info" : "IfStatement[58393-58625]:IfStatement[58393-58625]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58437-58625]:Block[58437-58625]"
    }, {
      "left" : "deser = EnumDeserializer.deserializerForCreator(config, enumClass, factory, valueInstantiator, creatorProps);",
      "right" : "deser = EnumDeserializer.deserializerForCreator(config, enumClass, factory, valueInstantiator, creatorProps);",
      "info" : "ExpressionStatement[58463-58572]:ExpressionStatement[58463-58572]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[58597-58603]:BreakStatement[58597-58603]"
    }, {
      "left" : "if (deser == null)",
      "right" : "if (deser == null)",
      "info" : "IfStatement[58738-58916]:IfStatement[58738-58916]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58757-58916]:Block[58757-58916]"
    }, {
      "left" : "deser = new EnumDeserializer(constructEnumResolver(enumClass,\n                        config, beanDesc.findJsonValueMethod()));",
      "right" : "deser = new EnumDeserializer(constructEnumResolver(enumClass,\n                        config, beanDesc.findJsonValueMethod()));",
      "info" : "ExpressionStatement[58775-58902]:ExpressionStatement[58775-58902]"
    }, {
      "left" : "if (_factoryConfig.hasDeserializerModifiers())",
      "right" : "if (_factoryConfig.hasDeserializerModifiers())",
      "info" : "IfStatement[58976-59221]:IfStatement[58976-59221]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[59023-59221]:Block[59023-59221]"
    }, {
      "left" : "for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers())",
      "right" : "for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers())",
      "info" : "EnhancedForStatement[59037-59211]:EnhancedForStatement[59037-59211]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[59113-59211]:Block[59113-59211]"
    }, {
      "left" : "deser = mod.modifyEnumDeserializer(config, type, beanDesc, deser);",
      "right" : "deser = mod.modifyEnumDeserializer(config, type, beanDesc, deser);",
      "info" : "ExpressionStatement[59131-59197]:ExpressionStatement[59131-59197]"
    }, {
      "left" : "return deser;",
      "right" : "return deser;",
      "info" : "ReturnStatement[59230-59243]:ReturnStatement[59230-59243]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[59446-59887]:Block[59446-59887]"
    }, {
      "left" : "@SuppressWarnings(\"unchecked\")\n        Class<? extends JsonNode> nodeClass = (Class<? extends JsonNode>) nodeType.getRawClass();",
      "right" : "@SuppressWarnings(\"unchecked\")\n        Class<? extends JsonNode> nodeClass = (Class<? extends JsonNode>) nodeType.getRawClass();",
      "info" : "VariableDeclarationStatement[59456-59584]:VariableDeclarationStatement[59456-59584]"
    }, {
      "left" : "JsonDeserializer<?> custom = _findCustomTreeNodeDeserializer(nodeClass, config,\n                beanDesc);",
      "right" : "JsonDeserializer<?> custom = _findCustomTreeNodeDeserializer(nodeClass, config,\n                beanDesc);",
      "info" : "VariableDeclarationStatement[59644-59750]:VariableDeclarationStatement[59644-59750]"
    }, {
      "left" : "if (custom != null)",
      "right" : "if (custom != null)",
      "info" : "IfStatement[59759-59817]:IfStatement[59759-59817]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[59779-59817]:Block[59779-59817]"
    }, {
      "left" : "return custom;",
      "right" : "return custom;",
      "info" : "ReturnStatement[59793-59807]:ReturnStatement[59793-59807]"
    }, {
      "left" : "return JsonNodeDeserializer.getDeserializer(nodeClass);",
      "right" : "return JsonNodeDeserializer.getDeserializer(nodeClass);",
      "info" : "ReturnStatement[59826-59881]:ReturnStatement[59826-59881]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60089-61546]:Block[60089-61546]"
    }, {
      "left" : "JavaType contentType = type.getContentType();",
      "right" : "JavaType contentType = type.getContentType();",
      "info" : "VariableDeclarationStatement[60099-60144]:VariableDeclarationStatement[60099-60144]"
    }, {
      "left" : "JsonDeserializer<Object> contentDeser = contentType.getValueHandler();",
      "right" : "JsonDeserializer<Object> contentDeser = contentType.getValueHandler();",
      "info" : "VariableDeclarationStatement[60223-60293]:VariableDeclarationStatement[60223-60293]"
    }, {
      "left" : "final DeserializationConfig config = ctxt.getConfig();",
      "right" : "final DeserializationConfig config = ctxt.getConfig();",
      "info" : "VariableDeclarationStatement[60302-60356]:VariableDeclarationStatement[60302-60356]"
    }, {
      "left" : "TypeDeserializer contentTypeDeser = contentType.getTypeHandler();",
      "right" : "TypeDeserializer contentTypeDeser = contentType.getTypeHandler();",
      "info" : "VariableDeclarationStatement[60467-60532]:VariableDeclarationStatement[60467-60532]"
    }, {
      "left" : "if (contentTypeDeser == null)",
      "right" : "if (contentTypeDeser == null)",
      "info" : "IfStatement[60541-60691]:IfStatement[60541-60691]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60571-60691]:Block[60571-60691]"
    }, {
      "left" : "contentTypeDeser = findTypeDeserializer(config, contentType);",
      "right" : "contentTypeDeser = findTypeDeserializer(config, contentType);",
      "info" : "ExpressionStatement[60620-60681]:ExpressionStatement[60620-60681]"
    }, {
      "left" : "JsonDeserializer<?> deser = _findCustomReferenceDeserializer(type, config, beanDesc,\n                contentTypeDeser, contentDeser);",
      "right" : "JsonDeserializer<?> deser = _findCustomReferenceDeserializer(type, config, beanDesc,\n                contentTypeDeser, contentDeser);",
      "info" : "VariableDeclarationStatement[60700-60833]:VariableDeclarationStatement[60700-60833]"
    }, {
      "left" : "if (deser == null)",
      "right" : "if (deser == null)",
      "info" : "IfStatement[60843-61163]:IfStatement[60843-61163]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60862-61163]:Block[60862-61163]"
    }, {
      "left" : "if (AtomicReference.class.isAssignableFrom(type.getRawClass()))",
      "right" : "if (AtomicReference.class.isAssignableFrom(type.getRawClass()))",
      "info" : "IfStatement[60980-61153]:IfStatement[60980-61153]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61044-61153]:Block[61044-61153]"
    }, {
      "left" : "return new AtomicReferenceDeserializer(type, contentTypeDeser, contentDeser);",
      "right" : "return new AtomicReferenceDeserializer(type, contentTypeDeser, contentDeser);",
      "info" : "ReturnStatement[61062-61139]:ReturnStatement[61062-61139]"
    }, {
      "left" : "if (deser != null)",
      "right" : "if (deser != null)",
      "info" : "IfStatement[61172-61518]:IfStatement[61172-61518]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61191-61518]:Block[61191-61518]"
    }, {
      "left" : "if (_factoryConfig.hasDeserializerModifiers())",
      "right" : "if (_factoryConfig.hasDeserializerModifiers())",
      "info" : "IfStatement[61242-61508]:IfStatement[61242-61508]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61289-61508]:Block[61289-61508]"
    }, {
      "left" : "for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers())",
      "right" : "for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers())",
      "info" : "EnhancedForStatement[61307-61494]:EnhancedForStatement[61307-61494]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61383-61494]:Block[61383-61494]"
    }, {
      "left" : "deser = mod.modifyReferenceDeserializer(config, type, beanDesc, deser);",
      "right" : "deser = mod.modifyReferenceDeserializer(config, type, beanDesc, deser);",
      "info" : "ExpressionStatement[61405-61476]:ExpressionStatement[61405-61476]"
    }, {
      "left" : "return deser;",
      "right" : "return deser;",
      "info" : "ReturnStatement[61527-61540]:ReturnStatement[61527-61540]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61922-63242]:Block[61922-63242]"
    }, {
      "left" : "BeanDescription bean = config.introspectClassAnnotations(baseType.getRawClass());",
      "right" : "BeanDescription bean = config.introspectClassAnnotations(baseType.getRawClass());",
      "info" : "VariableDeclarationStatement[61932-62013]:VariableDeclarationStatement[61932-62013]"
    }, {
      "left" : "AnnotatedClass ac = bean.getClassInfo();",
      "right" : "AnnotatedClass ac = bean.getClassInfo();",
      "info" : "VariableDeclarationStatement[62022-62062]:VariableDeclarationStatement[62022-62062]"
    }, {
      "left" : "AnnotationIntrospector ai = config.getAnnotationIntrospector();",
      "right" : "AnnotationIntrospector ai = config.getAnnotationIntrospector();",
      "info" : "VariableDeclarationStatement[62071-62134]:VariableDeclarationStatement[62071-62134]"
    }, {
      "left" : "TypeResolverBuilder<?> b = ai.findTypeResolver(config, ac, baseType);",
      "right" : "TypeResolverBuilder<?> b = ai.findTypeResolver(config, ac, baseType);",
      "info" : "VariableDeclarationStatement[62143-62212]:VariableDeclarationStatement[62143-62212]"
    }, {
      "left" : "Collection<NamedType> subtypes = null;",
      "right" : "Collection<NamedType> subtypes = null;",
      "info" : "VariableDeclarationStatement[62373-62411]:VariableDeclarationStatement[62373-62411]"
    }, {
      "left" : "if (b == null)",
      "right" : "if (b == null)",
      "info" : "IfStatement[62420-62683]:IfStatement[62420-62683]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62435-62568]:Block[62435-62568]"
    }, {
      "left" : "b = config.getDefaultTyper(baseType);",
      "right" : "b = config.getDefaultTyper(baseType);",
      "info" : "ExpressionStatement[62449-62486]:ExpressionStatement[62449-62486]"
    }, {
      "left" : "if (b == null)",
      "right" : "if (b == null)",
      "info" : "IfStatement[62499-62558]:IfStatement[62499-62558]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62514-62558]:Block[62514-62558]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[62532-62544]:ReturnStatement[62532-62544]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62574-62683]:Block[62574-62683]"
    }, {
      "left" : "subtypes = config.getSubtypeResolver().collectAndResolveSubtypesByTypeId(config, ac);",
      "right" : "subtypes = config.getSubtypeResolver().collectAndResolveSubtypesByTypeId(config, ac);",
      "info" : "ExpressionStatement[62588-62673]:ExpressionStatement[62588-62673]"
    }, {
      "left" : "if ((b.getDefaultImpl() == null) && baseType.isAbstract())",
      "right" : "if ((b.getDefaultImpl() == null) && baseType.isAbstract())",
      "info" : "IfStatement[62858-63168]:IfStatement[62858-63168]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62917-63168]:Block[62917-63168]"
    }, {
      "left" : "JavaType defaultType = mapAbstractType(config, baseType);",
      "right" : "JavaType defaultType = mapAbstractType(config, baseType);",
      "info" : "VariableDeclarationStatement[62931-62988]:VariableDeclarationStatement[62931-62988]"
    }, {
      "left" : "if (defaultType != null && defaultType.getRawClass() != baseType.getRawClass())",
      "right" : "if (defaultType != null && defaultType.getRawClass() != baseType.getRawClass())",
      "info" : "IfStatement[63001-63158]:IfStatement[63001-63158]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63081-63158]:Block[63081-63158]"
    }, {
      "left" : "b = b.defaultImpl(defaultType.getRawClass());",
      "right" : "b = b.defaultImpl(defaultType.getRawClass());",
      "info" : "ExpressionStatement[63099-63144]:ExpressionStatement[63099-63144]"
    }, {
      "left" : "return b.buildTypeDeserializer(config, baseType, subtypes);",
      "right" : "return b.buildTypeDeserializer(config, baseType, subtypes);",
      "info" : "ReturnStatement[63177-63236]:ReturnStatement[63177-63236]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63535-63641]:Block[63535-63641]"
    }, {
      "left" : "return OptionalHandlerFactory.instance.findDeserializer(type, ctxt.getConfig(), beanDesc);",
      "right" : "return OptionalHandlerFactory.instance.findDeserializer(type, ctxt.getConfig(), beanDesc);",
      "info" : "ReturnStatement[63545-63635]:ReturnStatement[63545-63635]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64019-65173]:Block[64019-65199]"
    }, {
      "left" : "final DeserializationConfig config = ctxt.getConfig();",
      "right" : "final DeserializationConfig config = ctxt.getConfig();",
      "info" : "VariableDeclarationStatement[64029-64083]:VariableDeclarationStatement[64029-64083]"
    }, {
      "left" : "KeyDeserializer deser = null;",
      "right" : "KeyDeserializer deser = null;",
      "info" : "VariableDeclarationStatement[64092-64121]:VariableDeclarationStatement[64092-64121]"
    }, {
      "left" : "if (_factoryConfig.hasKeyDeserializers())",
      "right" : "if (_factoryConfig.hasKeyDeserializers())",
      "info" : "IfStatement[64130-64520]:IfStatement[64130-64520]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64172-64520]:Block[64172-64520]"
    }, {
      "left" : "BeanDescription beanDesc = config.introspectClassAnnotations(type.getRawClass());",
      "right" : "BeanDescription beanDesc = config.introspectClassAnnotations(type.getRawClass());",
      "info" : "VariableDeclarationStatement[64186-64267]:VariableDeclarationStatement[64186-64267]"
    }, {
      "left" : "for (KeyDeserializers d  : _factoryConfig.keyDeserializers())",
      "right" : "for (KeyDeserializers d  : _factoryConfig.keyDeserializers())",
      "info" : "EnhancedForStatement[64280-64510]:EnhancedForStatement[64280-64510]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64342-64510]:Block[64342-64510]"
    }, {
      "left" : "deser = d.findKeyDeserializer(type, config, beanDesc);",
      "right" : "deser = d.findKeyDeserializer(type, config, beanDesc);",
      "info" : "ExpressionStatement[64360-64414]:ExpressionStatement[64360-64414]"
    }, {
      "left" : "if (deser != null)",
      "right" : "if (deser != null)",
      "info" : "IfStatement[64431-64496]:IfStatement[64431-64496]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64450-64496]:Block[64450-64496]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[64472-64478]:BreakStatement[64472-64478]"
    }, {
      "left" : "if (deser == null)",
      "right" : "if (deser == null)",
      "info" : "IfStatement[64577-64807]:IfStatement[64577-64833]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64596-64807]:Block[64718-64823]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64633-64711]:Block[64633-64712]"
    }, {
      "left" : "deser = StdKeyDeserializers.findStringBasedKeyDeserializer(config, type);",
      "right" : "deser = StdKeyDeserializers.findStringBasedKeyDeserializer(config, type);",
      "info" : "ExpressionStatement[64724-64797]:ExpressionStatement[64736-64809]"
    }, {
      "left" : "if (deser != null)",
      "right" : "if (deser != null)",
      "info" : "IfStatement[64852-65145]:IfStatement[64878-65171]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64871-65145]:Block[64897-65171]"
    }, {
      "left" : "if (_factoryConfig.hasDeserializerModifiers())",
      "right" : "if (_factoryConfig.hasDeserializerModifiers())",
      "info" : "IfStatement[64885-65135]:IfStatement[64911-65161]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64932-65135]:Block[64958-65161]"
    }, {
      "left" : "for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers())",
      "right" : "for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers())",
      "info" : "EnhancedForStatement[64950-65121]:EnhancedForStatement[64976-65147]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65026-65121]:Block[65052-65147]"
    }, {
      "left" : "deser = mod.modifyKeyDeserializer(config, type, deser);",
      "right" : "deser = mod.modifyKeyDeserializer(config, type, deser);",
      "info" : "ExpressionStatement[65048-65103]:ExpressionStatement[65074-65129]"
    }, {
      "left" : "return deser;",
      "right" : "return deser;",
      "info" : "ReturnStatement[65154-65167]:ReturnStatement[65180-65193]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65326-68187]:Block[65352-68213]"
    }, {
      "left" : "final DeserializationConfig config = ctxt.getConfig();",
      "right" : "final DeserializationConfig config = ctxt.getConfig();",
      "info" : "VariableDeclarationStatement[65336-65390]:VariableDeclarationStatement[65362-65416]"
    }, {
      "left" : "Class<?> enumClass = type.getRawClass();",
      "right" : "Class<?> enumClass = type.getRawClass();",
      "info" : "VariableDeclarationStatement[65399-65439]:VariableDeclarationStatement[65425-65465]"
    }, {
      "left" : "BeanDescription beanDesc = config.introspect(type);",
      "right" : "BeanDescription beanDesc = config.introspect(type);",
      "info" : "VariableDeclarationStatement[65449-65500]:VariableDeclarationStatement[65475-65526]"
    }, {
      "left" : "KeyDeserializer des = findKeyDeserializerFromAnnotation(ctxt, beanDesc.getClassInfo());",
      "right" : "KeyDeserializer des = findKeyDeserializerFromAnnotation(ctxt, beanDesc.getClassInfo());",
      "info" : "VariableDeclarationStatement[65581-65668]:VariableDeclarationStatement[65607-65694]"
    }, {
      "left" : "if (des != null)",
      "right" : "if (des != null)",
      "info" : "IfStatement[65677-66375]:IfStatement[65703-66401]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65694-65729]:Block[65720-65755]"
    }, {
      "left" : "return des;",
      "right" : "return des;",
      "info" : "ReturnStatement[65708-65719]:ReturnStatement[65734-65745]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65735-66375]:Block[65761-66401]"
    }, {
      "left" : "JsonDeserializer<?> custom = _findCustomEnumDeserializer(enumClass, config, beanDesc);",
      "right" : "JsonDeserializer<?> custom = _findCustomEnumDeserializer(enumClass, config, beanDesc);",
      "info" : "VariableDeclarationStatement[65853-65939]:VariableDeclarationStatement[65879-65965]"
    }, {
      "left" : "if (custom != null)",
      "right" : "if (custom != null)",
      "info" : "IfStatement[65952-66088]:IfStatement[65978-66114]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65972-66088]:Block[65998-66114]"
    }, {
      "left" : "return StdKeyDeserializers.constructDelegatingKeyDeserializer(config, type, custom);",
      "right" : "return StdKeyDeserializers.constructDelegatingKeyDeserializer(config, type, custom);",
      "info" : "ReturnStatement[65990-66074]:ReturnStatement[66016-66100]"
    }, {
      "left" : "JsonDeserializer<?> valueDesForKey = findDeserializerFromAnnotation(ctxt, beanDesc.getClassInfo());",
      "right" : "JsonDeserializer<?> valueDesForKey = findDeserializerFromAnnotation(ctxt, beanDesc.getClassInfo());",
      "info" : "VariableDeclarationStatement[66101-66200]:VariableDeclarationStatement[66127-66226]"
    }, {
      "left" : "if (valueDesForKey != null)",
      "right" : "if (valueDesForKey != null)",
      "info" : "IfStatement[66213-66365]:IfStatement[66239-66391]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66241-66365]:Block[66267-66391]"
    }, {
      "left" : "return StdKeyDeserializers.constructDelegatingKeyDeserializer(config, type, valueDesForKey);",
      "right" : "return StdKeyDeserializers.constructDelegatingKeyDeserializer(config, type, valueDesForKey);",
      "info" : "ReturnStatement[66259-66351]:ReturnStatement[66285-66377]"
    }, {
      "left" : "EnumResolver enumRes = constructEnumResolver(enumClass, config, beanDesc.findJsonValueMethod());",
      "right" : "EnumResolver enumRes = constructEnumResolver(enumClass, config, beanDesc.findJsonValueMethod());",
      "info" : "VariableDeclarationStatement[66384-66480]:VariableDeclarationStatement[66410-66506]"
    }, {
      "left" : "final AnnotationIntrospector ai = config.getAnnotationIntrospector();",
      "right" : "final AnnotationIntrospector ai = config.getAnnotationIntrospector();",
      "info" : "VariableDeclarationStatement[66549-66618]:VariableDeclarationStatement[66575-66644]"
    }, {
      "left" : "for (AnnotatedMethod factory : beanDesc.getFactoryMethods())",
      "right" : "for (AnnotatedMethod factory : beanDesc.getFactoryMethods())",
      "info" : "EnhancedForStatement[66627-68048]:EnhancedForStatement[66653-68074]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66688-68048]:Block[66714-68074]"
    }, {
      "left" : "if (ai.hasCreatorAnnotation(factory))",
      "right" : "if (ai.hasCreatorAnnotation(factory))",
      "info" : "IfStatement[66702-68038]:IfStatement[66728-68064]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66740-68038]:Block[66766-68064]"
    }, {
      "left" : "int argCount = factory.getParameterCount();",
      "right" : "int argCount = factory.getParameterCount();",
      "info" : "VariableDeclarationStatement[66758-66801]:VariableDeclarationStatement[66784-66827]"
    }, {
      "left" : "if (argCount == 1)",
      "right" : "if (argCount == 1)",
      "info" : "IfStatement[66818-67844]:IfStatement[66844-67870]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66837-67844]:Block[66863-67870]"
    }, {
      "left" : "Class<?> returnType = factory.getRawReturnType();",
      "right" : "Class<?> returnType = factory.getRawReturnType();",
      "info" : "VariableDeclarationStatement[66859-66908]:VariableDeclarationStatement[66885-66934]"
    }, {
      "left" : "if (returnType.isAssignableFrom(enumClass))",
      "right" : "if (returnType.isAssignableFrom(enumClass))",
      "info" : "IfStatement[67029-67826]:IfStatement[67055-67852]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67073-67826]:Block[67099-67852]"
    }, {
      "left" : "if (factory.getRawParameterType(0) != String.class)",
      "right" : "if (factory.getRawParameterType(0) != String.class)",
      "info" : "IfStatement[67198-67434]:IfStatement[67224-67460]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67250-67434]:Block[67276-67460]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Parameter #0 type for factory method (\"+factory+\") not suitable, must be java.lang.String\");",
      "right" : "throw new IllegalArgumentException(\"Parameter #0 type for factory method (\"+factory+\") not suitable, must be java.lang.String\");",
      "info" : "ThrowStatement[67280-67408]:ThrowStatement[67306-67434]"
    }, {
      "left" : "if (config.canOverrideAccessModifiers())",
      "right" : "if (config.canOverrideAccessModifiers())",
      "info" : "IfStatement[67459-67705]:IfStatement[67485-67731]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67500-67705]:Block[67526-67731]"
    }, {
      "left" : "ClassUtil.checkAndFixAccess(factory.getMember(),\n                                    ctxt.isEnabled(MapperFeature.OVERRIDE_PUBLIC_ACCESS_MODIFIERS));",
      "right" : "ClassUtil.checkAndFixAccess(factory.getMember(),\n                                    ctxt.isEnabled(MapperFeature.OVERRIDE_PUBLIC_ACCESS_MODIFIERS));",
      "info" : "ExpressionStatement[67530-67679]:ExpressionStatement[67556-67705]"
    }, {
      "left" : "return StdKeyDeserializers.constructEnumKeyDeserializer(enumRes, factory);",
      "right" : "return StdKeyDeserializers.constructEnumKeyDeserializer(enumRes, factory);",
      "info" : "ReturnStatement[67730-67804]:ReturnStatement[67756-67830]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Unsuitable method (\"+factory+\") decorated with @JsonCreator (for Enum type \"\n                        +enumClass.getName()+\")\");",
      "right" : "throw new IllegalArgumentException(\"Unsuitable method (\"+factory+\") decorated with @JsonCreator (for Enum type \"\n                        +enumClass.getName()+\")\");",
      "info" : "ThrowStatement[67861-68024]:ThrowStatement[67887-68050]"
    }, {
      "left" : "return StdKeyDeserializers.constructEnumKeyDeserializer(enumRes);",
      "right" : "return StdKeyDeserializers.constructEnumKeyDeserializer(enumRes);",
      "info" : "ReturnStatement[68116-68181]:ReturnStatement[68142-68207]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[69201-69830]:Block[69227-69856]"
    }, {
      "left" : "AnnotationIntrospector ai = config.getAnnotationIntrospector();",
      "right" : "AnnotationIntrospector ai = config.getAnnotationIntrospector();",
      "info" : "VariableDeclarationStatement[69211-69274]:VariableDeclarationStatement[69237-69300]"
    }, {
      "left" : "TypeResolverBuilder<?> b = ai.findPropertyTypeResolver(config, annotated, baseType);",
      "right" : "TypeResolverBuilder<?> b = ai.findPropertyTypeResolver(config, annotated, baseType);",
      "info" : "VariableDeclarationStatement[69283-69367]:VariableDeclarationStatement[69309-69393]"
    }, {
      "left" : "if (b == null)",
      "right" : "if (b == null)",
      "info" : "IfStatement[69454-69539]:IfStatement[69480-69565]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[69469-69539]:Block[69495-69565]"
    }, {
      "left" : "return findTypeDeserializer(config, baseType);",
      "right" : "return findTypeDeserializer(config, baseType);",
      "info" : "ReturnStatement[69483-69529]:ReturnStatement[69509-69555]"
    }, {
      "left" : "Collection<NamedType> subtypes = config.getSubtypeResolver().collectAndResolveSubtypesByTypeId(\n                config, annotated, baseType);",
      "right" : "Collection<NamedType> subtypes = config.getSubtypeResolver().collectAndResolveSubtypesByTypeId(\n                config, annotated, baseType);",
      "info" : "VariableDeclarationStatement[69615-69756]:VariableDeclarationStatement[69641-69782]"
    }, {
      "left" : "return b.buildTypeDeserializer(config, baseType, subtypes);",
      "right" : "return b.buildTypeDeserializer(config, baseType, subtypes);",
      "info" : "ReturnStatement[69765-69824]:ReturnStatement[69791-69850]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[70638-71355]:Block[70664-71381]"
    }, {
      "left" : "AnnotationIntrospector ai = config.getAnnotationIntrospector();",
      "right" : "AnnotationIntrospector ai = config.getAnnotationIntrospector();",
      "info" : "VariableDeclarationStatement[70648-70711]:VariableDeclarationStatement[70674-70737]"
    }, {
      "left" : "TypeResolverBuilder<?> b = ai.findPropertyContentTypeResolver(config, propertyEntity, containerType);",
      "right" : "TypeResolverBuilder<?> b = ai.findPropertyContentTypeResolver(config, propertyEntity, containerType);",
      "info" : "VariableDeclarationStatement[70720-70821]:VariableDeclarationStatement[70746-70847]"
    }, {
      "left" : "JavaType contentType = containerType.getContentType();",
      "right" : "JavaType contentType = containerType.getContentType();",
      "info" : "VariableDeclarationStatement[70838-70892]:VariableDeclarationStatement[70864-70918]"
    }, {
      "left" : "if (b == null)",
      "right" : "if (b == null)",
      "info" : "IfStatement[70965-71053]:IfStatement[70991-71079]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[70980-71053]:Block[71006-71079]"
    }, {
      "left" : "return findTypeDeserializer(config, contentType);",
      "right" : "return findTypeDeserializer(config, contentType);",
      "info" : "ReturnStatement[70994-71043]:ReturnStatement[71020-71069]"
    }, {
      "left" : "Collection<NamedType> subtypes = config.getSubtypeResolver().collectAndResolveSubtypesByTypeId(\n                config, propertyEntity, contentType);",
      "right" : "Collection<NamedType> subtypes = config.getSubtypeResolver().collectAndResolveSubtypesByTypeId(\n                config, propertyEntity, contentType);",
      "info" : "VariableDeclarationStatement[71129-71278]:VariableDeclarationStatement[71155-71304]"
    }, {
      "left" : "return b.buildTypeDeserializer(config, contentType, subtypes);",
      "right" : "return b.buildTypeDeserializer(config, contentType, subtypes);",
      "info" : "ReturnStatement[71287-71349]:ReturnStatement[71313-71375]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[71752-74754]:Block[71778-74780]"
    }, {
      "left" : "Class<?> rawType = type.getRawClass();",
      "right" : "Class<?> rawType = type.getRawClass();",
      "info" : "VariableDeclarationStatement[71762-71800]:VariableDeclarationStatement[71788-71826]"
    }, {
      "left" : "if (rawType == CLASS_OBJECT)",
      "right" : "if (rawType == CLASS_OBJECT)",
      "info" : "IfStatement[71860-72410]:IfStatement[71886-72436]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[71889-72410]:Block[71915-72436]"
    }, {
      "left" : "DeserializationConfig config = ctxt.getConfig();",
      "right" : "DeserializationConfig config = ctxt.getConfig();",
      "info" : "VariableDeclarationStatement[72005-72053]:VariableDeclarationStatement[72031-72079]"
    }, {
      "left" : "JavaType lt, mt;",
      "right" : "JavaType lt, mt;",
      "info" : "VariableDeclarationStatement[72066-72082]:VariableDeclarationStatement[72092-72108]"
    }, {
      "left" : "if (_factoryConfig.hasAbstractTypeResolvers())",
      "right" : "if (_factoryConfig.hasAbstractTypeResolvers())",
      "info" : "IfStatement[72108-72342]:IfStatement[72134-72368]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[72155-72289]:Block[72181-72315]"
    }, {
      "left" : "lt = _findRemappedType(config, List.class);",
      "right" : "lt = _findRemappedType(config, List.class);",
      "info" : "ExpressionStatement[72173-72216]:ExpressionStatement[72199-72242]"
    }, {
      "left" : "mt = _findRemappedType(config, Map.class);",
      "right" : "mt = _findRemappedType(config, Map.class);",
      "info" : "ExpressionStatement[72233-72275]:ExpressionStatement[72259-72301]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[72295-72342]:Block[72321-72368]"
    }, {
      "left" : "lt = mt = null;",
      "right" : "lt = mt = null;",
      "info" : "ExpressionStatement[72313-72328]:ExpressionStatement[72339-72354]"
    }, {
      "left" : "return new UntypedObjectDeserializer(lt, mt);",
      "right" : "return new UntypedObjectDeserializer(lt, mt);",
      "info" : "ReturnStatement[72355-72400]:ReturnStatement[72381-72426]"
    }, {
      "left" : "if (rawType == CLASS_STRING || rawType == CLASS_CHAR_BUFFER)",
      "right" : "if (rawType == CLASS_STRING || rawType == CLASS_CHAR_BUFFER)",
      "info" : "IfStatement[72419-72539]:IfStatement[72445-72565]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[72480-72539]:Block[72506-72565]"
    }, {
      "left" : "return StringDeserializer.instance;",
      "right" : "return StringDeserializer.instance;",
      "info" : "ReturnStatement[72494-72529]:ReturnStatement[72520-72555]"
    }, {
      "left" : "if (rawType == CLASS_ITERABLE)",
      "right" : "if (rawType == CLASS_ITERABLE)",
      "info" : "IfStatement[72548-73124]:IfStatement[72574-73150]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[72579-73124]:Block[72605-73150]"
    }, {
      "left" : "TypeFactory tf = ctxt.getTypeFactory();",
      "right" : "TypeFactory tf = ctxt.getTypeFactory();",
      "info" : "VariableDeclarationStatement[72671-72710]:VariableDeclarationStatement[72697-72736]"
    }, {
      "left" : "JavaType[] tps = tf.findTypeParameters(type, CLASS_ITERABLE);",
      "right" : "JavaType[] tps = tf.findTypeParameters(type, CLASS_ITERABLE);",
      "info" : "VariableDeclarationStatement[72723-72784]:VariableDeclarationStatement[72749-72810]"
    }, {
      "left" : "JavaType elemType = (tps == null || tps.length != 1) ? TypeFactory.unknownType() : tps[0];",
      "right" : "JavaType elemType = (tps == null || tps.length != 1) ? TypeFactory.unknownType() : tps[0];",
      "info" : "VariableDeclarationStatement[72797-72887]:VariableDeclarationStatement[72823-72913]"
    }, {
      "left" : "CollectionType ct = tf.constructCollectionType(Collection.class, elemType);",
      "right" : "CollectionType ct = tf.constructCollectionType(Collection.class, elemType);",
      "info" : "VariableDeclarationStatement[72900-72975]:VariableDeclarationStatement[72926-73001]"
    }, {
      "left" : "return createCollectionDeserializer(ctxt, ct, beanDesc);",
      "right" : "return createCollectionDeserializer(ctxt, ct, beanDesc);",
      "info" : "ReturnStatement[73058-73114]:ReturnStatement[73084-73140]"
    }, {
      "left" : "if (rawType == CLASS_MAP_ENTRY)",
      "right" : "if (rawType == CLASS_MAP_ENTRY)",
      "info" : "IfStatement[73133-73945]:IfStatement[73159-73971]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[73165-73945]:Block[73191-73971]"
    }, {
      "left" : "JavaType kt = type.containedType(0);",
      "right" : "JavaType kt = type.containedType(0);",
      "info" : "VariableDeclarationStatement[73255-73291]:VariableDeclarationStatement[73281-73317]"
    }, {
      "left" : "if (kt == null)",
      "right" : "if (kt == null)",
      "info" : "IfStatement[73304-73383]:IfStatement[73330-73409]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[73320-73383]:Block[73346-73409]"
    }, {
      "left" : "kt = TypeFactory.unknownType();",
      "right" : "kt = TypeFactory.unknownType();",
      "info" : "ExpressionStatement[73338-73369]:ExpressionStatement[73364-73395]"
    }, {
      "left" : "JavaType vt = type.containedType(1);",
      "right" : "JavaType vt = type.containedType(1);",
      "info" : "VariableDeclarationStatement[73396-73432]:VariableDeclarationStatement[73422-73458]"
    }, {
      "left" : "if (vt == null)",
      "right" : "if (vt == null)",
      "info" : "IfStatement[73445-73524]:IfStatement[73471-73550]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[73461-73524]:Block[73487-73550]"
    }, {
      "left" : "vt = TypeFactory.unknownType();",
      "right" : "vt = TypeFactory.unknownType();",
      "info" : "ExpressionStatement[73479-73510]:ExpressionStatement[73505-73536]"
    }, {
      "left" : "TypeDeserializer vts = (TypeDeserializer) vt.getTypeHandler();",
      "right" : "TypeDeserializer vts = (TypeDeserializer) vt.getTypeHandler();",
      "info" : "VariableDeclarationStatement[73537-73599]:VariableDeclarationStatement[73563-73625]"
    }, {
      "left" : "if (vts == null)",
      "right" : "if (vts == null)",
      "info" : "IfStatement[73612-73710]:IfStatement[73638-73736]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[73629-73710]:Block[73655-73736]"
    }, {
      "left" : "vts = findTypeDeserializer(ctxt.getConfig(), vt);",
      "right" : "vts = findTypeDeserializer(ctxt.getConfig(), vt);",
      "info" : "ExpressionStatement[73647-73696]:ExpressionStatement[73673-73722]"
    }, {
      "left" : "JsonDeserializer<Object> valueDeser = vt.getValueHandler();",
      "right" : "JsonDeserializer<Object> valueDeser = vt.getValueHandler();",
      "info" : "VariableDeclarationStatement[73723-73782]:VariableDeclarationStatement[73749-73808]"
    }, {
      "left" : "KeyDeserializer keyDes = (KeyDeserializer) kt.getValueHandler();",
      "right" : "KeyDeserializer keyDes = (KeyDeserializer) kt.getValueHandler();",
      "info" : "VariableDeclarationStatement[73795-73859]:VariableDeclarationStatement[73821-73885]"
    }, {
      "left" : "return new MapEntryDeserializer(type, keyDes, valueDeser, vts);",
      "right" : "return new MapEntryDeserializer(type, keyDes, valueDeser, vts);",
      "info" : "ReturnStatement[73872-73935]:ReturnStatement[73898-73961]"
    }, {
      "left" : "String clsName = rawType.getName();",
      "right" : "String clsName = rawType.getName();",
      "info" : "VariableDeclarationStatement[73954-73989]:VariableDeclarationStatement[73980-74015]"
    }, {
      "left" : "if (rawType.isPrimitive() || clsName.startsWith(\"java.\"))",
      "right" : "if (rawType.isPrimitive() || clsName.startsWith(\"java.\"))",
      "info" : "IfStatement[73998-74392]:IfStatement[74024-74418]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[74056-74392]:Block[74082-74418]"
    }, {
      "left" : "JsonDeserializer<?> deser = NumberDeserializers.find(rawType, clsName);",
      "right" : "JsonDeserializer<?> deser = NumberDeserializers.find(rawType, clsName);",
      "info" : "VariableDeclarationStatement[74121-74192]:VariableDeclarationStatement[74147-74218]"
    }, {
      "left" : "if (deser == null)",
      "right" : "if (deser == null)",
      "info" : "IfStatement[74205-74305]:IfStatement[74231-74331]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[74224-74305]:Block[74250-74331]"
    }, {
      "left" : "deser = DateDeserializers.find(rawType, clsName);",
      "right" : "deser = DateDeserializers.find(rawType, clsName);",
      "info" : "ExpressionStatement[74242-74291]:ExpressionStatement[74268-74317]"
    }, {
      "left" : "if (deser != null)",
      "right" : "if (deser != null)",
      "info" : "IfStatement[74318-74382]:IfStatement[74344-74408]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[74337-74382]:Block[74363-74408]"
    }, {
      "left" : "return deser;",
      "right" : "return deser;",
      "info" : "ReturnStatement[74355-74368]:ReturnStatement[74381-74394]"
    }, {
      "left" : "if (rawType == TokenBuffer.class)",
      "right" : "if (rawType == TokenBuffer.class)",
      "info" : "IfStatement[74445-74540]:IfStatement[74471-74566]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[74479-74540]:Block[74505-74566]"
    }, {
      "left" : "return new TokenBufferDeserializer();",
      "right" : "return new TokenBufferDeserializer();",
      "info" : "ReturnStatement[74493-74530]:ReturnStatement[74519-74556]"
    }, {
      "left" : "JsonDeserializer<?> deser = findOptionalStdDeserializer(ctxt, type, beanDesc);",
      "right" : "JsonDeserializer<?> deser = findOptionalStdDeserializer(ctxt, type, beanDesc);",
      "info" : "VariableDeclarationStatement[74549-74627]:VariableDeclarationStatement[74575-74653]"
    }, {
      "left" : "if (deser != null)",
      "right" : "if (deser != null)",
      "info" : "IfStatement[74636-74692]:IfStatement[74662-74718]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[74655-74692]:Block[74681-74718]"
    }, {
      "left" : "return deser;",
      "right" : "return deser;",
      "info" : "ReturnStatement[74669-74682]:ReturnStatement[74695-74708]"
    }, {
      "left" : "return JdkDeserializers.find(rawType, clsName);",
      "right" : "return JdkDeserializers.find(rawType, clsName);",
      "info" : "ReturnStatement[74701-74748]:ReturnStatement[74727-74774]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[74873-75034]:Block[74899-75060]"
    }, {
      "left" : "JavaType type = mapAbstractType(config, config.constructType(rawType));",
      "right" : "JavaType type = mapAbstractType(config, config.constructType(rawType));",
      "info" : "VariableDeclarationStatement[74883-74954]:VariableDeclarationStatement[74909-74980]"
    }, {
      "left" : "return (type == null || type.hasRawClass(rawType)) ? null : type;",
      "right" : "return (type == null || type.hasRawClass(rawType)) ? null : type;",
      "info" : "ReturnStatement[74963-75028]:ReturnStatement[74989-75054]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[75438-75711]:Block[75464-75737]"
    }, {
      "left" : "for (Deserializers d  : _factoryConfig.deserializers())",
      "right" : "for (Deserializers d  : _factoryConfig.deserializers())",
      "info" : "EnhancedForStatement[75448-75684]:EnhancedForStatement[75474-75710]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[75504-75684]:Block[75530-75710]"
    }, {
      "left" : "JsonDeserializer<?> deser = d.findTreeNodeDeserializer(type, config, beanDesc);",
      "right" : "JsonDeserializer<?> deser = d.findTreeNodeDeserializer(type, config, beanDesc);",
      "info" : "VariableDeclarationStatement[75518-75597]:VariableDeclarationStatement[75544-75623]"
    }, {
      "left" : "if (deser != null)",
      "right" : "if (deser != null)",
      "info" : "IfStatement[75610-75674]:IfStatement[75636-75700]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[75629-75674]:Block[75655-75700]"
    }, {
      "left" : "return deser;",
      "right" : "return deser;",
      "info" : "ReturnStatement[75647-75660]:ReturnStatement[75673-75686]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[75693-75705]:ReturnStatement[75719-75731]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[76003-76343]:Block[76029-76369]"
    }, {
      "left" : "for (Deserializers d  : _factoryConfig.deserializers())",
      "right" : "for (Deserializers d  : _factoryConfig.deserializers())",
      "info" : "EnhancedForStatement[76013-76316]:EnhancedForStatement[76039-76342]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[76069-76316]:Block[76095-76342]"
    }, {
      "left" : "JsonDeserializer<?> deser = d.findReferenceDeserializer(type, config, beanDesc,\n                    contentTypeDeserializer, contentDeserializer);",
      "right" : "JsonDeserializer<?> deser = d.findReferenceDeserializer(type, config, beanDesc,\n                    contentTypeDeserializer, contentDeserializer);",
      "info" : "VariableDeclarationStatement[76083-76229]:VariableDeclarationStatement[76109-76255]"
    }, {
      "left" : "if (deser != null)",
      "right" : "if (deser != null)",
      "info" : "IfStatement[76242-76306]:IfStatement[76268-76332]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[76261-76306]:Block[76287-76332]"
    }, {
      "left" : "return deser;",
      "right" : "return deser;",
      "info" : "ReturnStatement[76279-76292]:ReturnStatement[76305-76318]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[76325-76337]:ReturnStatement[76351-76363]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[76570-76866]:Block[76596-76892]"
    }, {
      "left" : "for (Deserializers d  : _factoryConfig.deserializers())",
      "right" : "for (Deserializers d  : _factoryConfig.deserializers())",
      "info" : "EnhancedForStatement[76580-76839]:EnhancedForStatement[76606-76865]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[76636-76839]:Block[76662-76865]"
    }, {
      "left" : "JsonDeserializer<?> deser = d.findBeanDeserializer(type, config, beanDesc);",
      "right" : "JsonDeserializer<?> deser = d.findBeanDeserializer(type, config, beanDesc);",
      "info" : "VariableDeclarationStatement[76650-76725]:VariableDeclarationStatement[76676-76751]"
    }, {
      "left" : "if (deser != null)",
      "right" : "if (deser != null)",
      "info" : "IfStatement[76738-76829]:IfStatement[76764-76855]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[76757-76829]:Block[76783-76855]"
    }, {
      "left" : "return (JsonDeserializer<Object>) deser;",
      "right" : "return (JsonDeserializer<Object>) deser;",
      "info" : "ReturnStatement[76775-76815]:ReturnStatement[76801-76841]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[76848-76860]:ReturnStatement[76874-76886]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[77150-77486]:Block[77176-77512]"
    }, {
      "left" : "for (Deserializers d  : _factoryConfig.deserializers())",
      "right" : "for (Deserializers d  : _factoryConfig.deserializers())",
      "info" : "EnhancedForStatement[77160-77459]:EnhancedForStatement[77186-77485]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[77216-77459]:Block[77242-77485]"
    }, {
      "left" : "JsonDeserializer<?> deser = d.findArrayDeserializer(type, config,\n                    beanDesc, elementTypeDeserializer, elementDeserializer);",
      "right" : "JsonDeserializer<?> deser = d.findArrayDeserializer(type, config,\n                    beanDesc, elementTypeDeserializer, elementDeserializer);",
      "info" : "VariableDeclarationStatement[77230-77372]:VariableDeclarationStatement[77256-77398]"
    }, {
      "left" : "if (deser != null)",
      "right" : "if (deser != null)",
      "info" : "IfStatement[77385-77449]:IfStatement[77411-77475]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[77404-77449]:Block[77430-77475]"
    }, {
      "left" : "return deser;",
      "right" : "return deser;",
      "info" : "ReturnStatement[77422-77435]:ReturnStatement[77448-77461]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[77468-77480]:ReturnStatement[77494-77506]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[77784-78125]:Block[77810-78151]"
    }, {
      "left" : "for (Deserializers d  : _factoryConfig.deserializers())",
      "right" : "for (Deserializers d  : _factoryConfig.deserializers())",
      "info" : "EnhancedForStatement[77794-78098]:EnhancedForStatement[77820-78124]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[77850-78098]:Block[77876-78124]"
    }, {
      "left" : "JsonDeserializer<?> deser = d.findCollectionDeserializer(type, config, beanDesc,\n                    elementTypeDeserializer, elementDeserializer);",
      "right" : "JsonDeserializer<?> deser = d.findCollectionDeserializer(type, config, beanDesc,\n                    elementTypeDeserializer, elementDeserializer);",
      "info" : "VariableDeclarationStatement[77864-78011]:VariableDeclarationStatement[77890-78037]"
    }, {
      "left" : "if (deser != null)",
      "right" : "if (deser != null)",
      "info" : "IfStatement[78024-78088]:IfStatement[78050-78114]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[78043-78088]:Block[78069-78114]"
    }, {
      "left" : "return deser;",
      "right" : "return deser;",
      "info" : "ReturnStatement[78061-78074]:ReturnStatement[78087-78100]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[78107-78119]:ReturnStatement[78133-78145]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[78431-78776]:Block[78457-78802]"
    }, {
      "left" : "for (Deserializers d  : _factoryConfig.deserializers())",
      "right" : "for (Deserializers d  : _factoryConfig.deserializers())",
      "info" : "EnhancedForStatement[78441-78749]:EnhancedForStatement[78467-78775]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[78497-78749]:Block[78523-78775]"
    }, {
      "left" : "JsonDeserializer<?> deser = d.findCollectionLikeDeserializer(type, config, beanDesc,\n                    elementTypeDeserializer, elementDeserializer);",
      "right" : "JsonDeserializer<?> deser = d.findCollectionLikeDeserializer(type, config, beanDesc,\n                    elementTypeDeserializer, elementDeserializer);",
      "info" : "VariableDeclarationStatement[78511-78662]:VariableDeclarationStatement[78537-78688]"
    }, {
      "left" : "if (deser != null)",
      "right" : "if (deser != null)",
      "info" : "IfStatement[78675-78739]:IfStatement[78701-78765]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[78694-78739]:Block[78720-78765]"
    }, {
      "left" : "return deser;",
      "right" : "return deser;",
      "info" : "ReturnStatement[78712-78725]:ReturnStatement[78738-78751]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[78758-78770]:ReturnStatement[78784-78796]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[78963-79232]:Block[78989-79258]"
    }, {
      "left" : "for (Deserializers d  : _factoryConfig.deserializers())",
      "right" : "for (Deserializers d  : _factoryConfig.deserializers())",
      "info" : "EnhancedForStatement[78973-79205]:EnhancedForStatement[78999-79231]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[79029-79205]:Block[79055-79231]"
    }, {
      "left" : "JsonDeserializer<?> deser = d.findEnumDeserializer(type, config, beanDesc);",
      "right" : "JsonDeserializer<?> deser = d.findEnumDeserializer(type, config, beanDesc);",
      "info" : "VariableDeclarationStatement[79043-79118]:VariableDeclarationStatement[79069-79144]"
    }, {
      "left" : "if (deser != null)",
      "right" : "if (deser != null)",
      "info" : "IfStatement[79131-79195]:IfStatement[79157-79221]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[79150-79195]:Block[79176-79221]"
    }, {
      "left" : "return deser;",
      "right" : "return deser;",
      "info" : "ReturnStatement[79168-79181]:ReturnStatement[79194-79207]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[79214-79226]:ReturnStatement[79240-79252]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[79561-79912]:Block[79587-79938]"
    }, {
      "left" : "for (Deserializers d  : _factoryConfig.deserializers())",
      "right" : "for (Deserializers d  : _factoryConfig.deserializers())",
      "info" : "EnhancedForStatement[79571-79885]:EnhancedForStatement[79597-79911]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[79627-79885]:Block[79653-79911]"
    }, {
      "left" : "JsonDeserializer<?> deser = d.findMapDeserializer(type, config, beanDesc,\n                    keyDeserializer, elementTypeDeserializer, elementDeserializer);",
      "right" : "JsonDeserializer<?> deser = d.findMapDeserializer(type, config, beanDesc,\n                    keyDeserializer, elementTypeDeserializer, elementDeserializer);",
      "info" : "VariableDeclarationStatement[79641-79798]:VariableDeclarationStatement[79667-79824]"
    }, {
      "left" : "if (deser != null)",
      "right" : "if (deser != null)",
      "info" : "IfStatement[79811-79875]:IfStatement[79837-79901]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[79830-79875]:Block[79856-79901]"
    }, {
      "left" : "return deser;",
      "right" : "return deser;",
      "info" : "ReturnStatement[79848-79861]:ReturnStatement[79874-79887]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[79894-79906]:ReturnStatement[79920-79932]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[80245-80600]:Block[80271-80626]"
    }, {
      "left" : "for (Deserializers d  : _factoryConfig.deserializers())",
      "right" : "for (Deserializers d  : _factoryConfig.deserializers())",
      "info" : "EnhancedForStatement[80255-80573]:EnhancedForStatement[80281-80599]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[80311-80573]:Block[80337-80599]"
    }, {
      "left" : "JsonDeserializer<?> deser = d.findMapLikeDeserializer(type, config, beanDesc,\n                    keyDeserializer, elementTypeDeserializer, elementDeserializer);",
      "right" : "JsonDeserializer<?> deser = d.findMapLikeDeserializer(type, config, beanDesc,\n                    keyDeserializer, elementTypeDeserializer, elementDeserializer);",
      "info" : "VariableDeclarationStatement[80325-80486]:VariableDeclarationStatement[80351-80512]"
    }, {
      "left" : "if (deser != null)",
      "right" : "if (deser != null)",
      "info" : "IfStatement[80499-80563]:IfStatement[80525-80589]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[80518-80563]:Block[80544-80589]"
    }, {
      "left" : "return deser;",
      "right" : "return deser;",
      "info" : "ReturnStatement[80536-80549]:ReturnStatement[80562-80575]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[80582-80594]:ReturnStatement[80608-80620]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[81370-81681]:Block[81396-81707]"
    }, {
      "left" : "AnnotationIntrospector intr = ctxt.getAnnotationIntrospector();",
      "right" : "AnnotationIntrospector intr = ctxt.getAnnotationIntrospector();",
      "info" : "VariableDeclarationStatement[81380-81443]:VariableDeclarationStatement[81406-81469]"
    }, {
      "left" : "if (intr != null)",
      "right" : "if (intr != null)",
      "info" : "IfStatement[81452-81654]:IfStatement[81478-81680]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[81470-81654]:Block[81496-81680]"
    }, {
      "left" : "Object deserDef = intr.findDeserializer(ann);",
      "right" : "Object deserDef = intr.findDeserializer(ann);",
      "info" : "VariableDeclarationStatement[81484-81529]:VariableDeclarationStatement[81510-81555]"
    }, {
      "left" : "if (deserDef != null)",
      "right" : "if (deserDef != null)",
      "info" : "IfStatement[81542-81644]:IfStatement[81568-81670]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[81564-81644]:Block[81590-81670]"
    }, {
      "left" : "return ctxt.deserializerInstance(ann, deserDef);",
      "right" : "return ctxt.deserializerInstance(ann, deserDef);",
      "info" : "ReturnStatement[81582-81630]:ReturnStatement[81608-81656]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[81663-81675]:ReturnStatement[81689-81701]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[82043-82360]:Block[82069-82386]"
    }, {
      "left" : "AnnotationIntrospector intr = ctxt.getAnnotationIntrospector();",
      "right" : "AnnotationIntrospector intr = ctxt.getAnnotationIntrospector();",
      "info" : "VariableDeclarationStatement[82053-82116]:VariableDeclarationStatement[82079-82142]"
    }, {
      "left" : "if (intr != null)",
      "right" : "if (intr != null)",
      "info" : "IfStatement[82125-82333]:IfStatement[82151-82359]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[82143-82333]:Block[82169-82359]"
    }, {
      "left" : "Object deserDef = intr.findKeyDeserializer(ann);",
      "right" : "Object deserDef = intr.findKeyDeserializer(ann);",
      "info" : "VariableDeclarationStatement[82157-82205]:VariableDeclarationStatement[82183-82231]"
    }, {
      "left" : "if (deserDef != null)",
      "right" : "if (deserDef != null)",
      "info" : "IfStatement[82218-82323]:IfStatement[82244-82349]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[82240-82323]:Block[82266-82349]"
    }, {
      "left" : "return ctxt.keyDeserializerInstance(ann, deserDef);",
      "right" : "return ctxt.keyDeserializerInstance(ann, deserDef);",
      "info" : "ReturnStatement[82258-82309]:ReturnStatement[82284-82335]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[82342-82354]:ReturnStatement[82368-82380]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[82987-84990]:Block[83013-85016]"
    }, {
      "left" : "AnnotationIntrospector intr = ctxt.getAnnotationIntrospector();",
      "right" : "AnnotationIntrospector intr = ctxt.getAnnotationIntrospector();",
      "info" : "VariableDeclarationStatement[82997-83060]:VariableDeclarationStatement[83023-83086]"
    }, {
      "left" : "if (intr == null)",
      "right" : "if (intr == null)",
      "info" : "IfStatement[83069-83123]:IfStatement[83095-83149]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[83087-83123]:Block[83113-83149]"
    }, {
      "left" : "return type;",
      "right" : "return type;",
      "info" : "ReturnStatement[83101-83113]:ReturnStatement[83127-83139]"
    }, {
      "left" : "if (type.isMapLikeType())",
      "right" : "if (type.isMapLikeType())",
      "info" : "IfStatement[83224-83713]:IfStatement[83250-83739]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[83250-83713]:Block[83276-83739]"
    }, {
      "left" : "JavaType keyType = type.getKeyType();",
      "right" : "JavaType keyType = type.getKeyType();",
      "info" : "VariableDeclarationStatement[83264-83301]:VariableDeclarationStatement[83290-83327]"
    }, {
      "left" : "if (keyType != null)",
      "right" : "if (keyType != null)",
      "info" : "IfStatement[83314-83703]:IfStatement[83340-83729]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[83335-83703]:Block[83361-83729]"
    }, {
      "left" : "Object kdDef = intr.findKeyDeserializer(member);",
      "right" : "Object kdDef = intr.findKeyDeserializer(member);",
      "info" : "VariableDeclarationStatement[83353-83401]:VariableDeclarationStatement[83379-83427]"
    }, {
      "left" : "KeyDeserializer kd = ctxt.keyDeserializerInstance(member, kdDef);",
      "right" : "KeyDeserializer kd = ctxt.keyDeserializerInstance(member, kdDef);",
      "info" : "VariableDeclarationStatement[83418-83483]:VariableDeclarationStatement[83444-83509]"
    }, {
      "left" : "if (kd != null)",
      "right" : "if (kd != null)",
      "info" : "IfStatement[83500-83689]:IfStatement[83526-83715]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[83516-83689]:Block[83542-83715]"
    }, {
      "left" : "type = ((MapLikeType) type).withKeyValueHandler(kd);",
      "right" : "type = ((MapLikeType) type).withKeyValueHandler(kd);",
      "info" : "ExpressionStatement[83538-83590]:ExpressionStatement[83564-83616]"
    }, {
      "left" : "keyType = type.getKeyType();",
      "right" : "keyType = type.getKeyType();",
      "info" : "ExpressionStatement[83611-83639]:ExpressionStatement[83637-83665]"
    }, {
      "left" : "if (type.hasContentType())",
      "right" : "if (type.hasContentType())",
      "info" : "IfStatement[83723-84354]:IfStatement[83749-84380]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[83750-84354]:Block[83776-84380]"
    }, {
      "left" : "Object cdDef = intr.findContentDeserializer(member);",
      "right" : "Object cdDef = intr.findContentDeserializer(member);",
      "info" : "VariableDeclarationStatement[83815-83867]:VariableDeclarationStatement[83841-83893]"
    }, {
      "left" : "JsonDeserializer<?> cd = ctxt.deserializerInstance(member, cdDef);",
      "right" : "JsonDeserializer<?> cd = ctxt.deserializerInstance(member, cdDef);",
      "info" : "VariableDeclarationStatement[83880-83946]:VariableDeclarationStatement[83906-83972]"
    }, {
      "left" : "if (cd != null)",
      "right" : "if (cd != null)",
      "info" : "IfStatement[83959-84047]:IfStatement[83985-84073]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[83975-84047]:Block[84001-84073]"
    }, {
      "left" : "type = type.withContentValueHandler(cd);",
      "right" : "type = type.withContentValueHandler(cd);",
      "info" : "ExpressionStatement[83993-84033]:ExpressionStatement[84019-84059]"
    }, {
      "left" : "TypeDeserializer contentTypeDeser = findPropertyContentTypeDeserializer(\n                    ctxt.getConfig(), type, (AnnotatedMember) member);",
      "right" : "TypeDeserializer contentTypeDeser = findPropertyContentTypeDeserializer(\n                    ctxt.getConfig(), type, (AnnotatedMember) member);",
      "info" : "VariableDeclarationStatement[84060-84203]:VariableDeclarationStatement[84086-84229]"
    }, {
      "left" : "if (contentTypeDeser != null)",
      "right" : "if (contentTypeDeser != null)",
      "info" : "IfStatement[84229-84344]:IfStatement[84255-84370]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[84259-84344]:Block[84285-84370]"
    }, {
      "left" : "type = type.withContentTypeHandler(contentTypeDeser);",
      "right" : "type = type.withContentTypeHandler(contentTypeDeser);",
      "info" : "ExpressionStatement[84277-84330]:ExpressionStatement[84303-84356]"
    }, {
      "left" : "TypeDeserializer valueTypeDeser = findPropertyTypeDeserializer(ctxt.getConfig(),\n                    type, (AnnotatedMember) member);",
      "right" : "TypeDeserializer valueTypeDeser = findPropertyTypeDeserializer(ctxt.getConfig(),\n                    type, (AnnotatedMember) member);",
      "info" : "VariableDeclarationStatement[84363-84496]:VariableDeclarationStatement[84389-84522]"
    }, {
      "left" : "if (valueTypeDeser != null)",
      "right" : "if (valueTypeDeser != null)",
      "info" : "IfStatement[84505-84601]:IfStatement[84531-84627]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[84533-84601]:Block[84559-84627]"
    }, {
      "left" : "type = type.withTypeHandler(valueTypeDeser);",
      "right" : "type = type.withTypeHandler(valueTypeDeser);",
      "info" : "ExpressionStatement[84547-84591]:ExpressionStatement[84573-84617]"
    }, {
      "left" : "type = intr.refineDeserializationType(ctxt.getConfig(), member, type);",
      "right" : "type = intr.refineDeserializationType(ctxt.getConfig(), member, type);",
      "info" : "ExpressionStatement[84893-84963]:ExpressionStatement[84919-84989]"
    }, {
      "left" : "return type;",
      "right" : "return type;",
      "info" : "ReturnStatement[84972-84984]:ReturnStatement[84998-85010]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[85140-85831]:Block[85166-85857]"
    }, {
      "left" : "if (jsonValueMethod != null)",
      "right" : "if (jsonValueMethod != null)",
      "info" : "IfStatement[85150-85559]:IfStatement[85176-85585]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[85179-85559]:Block[85205-85585]"
    }, {
      "left" : "Method accessor = jsonValueMethod.getAnnotated();",
      "right" : "Method accessor = jsonValueMethod.getAnnotated();",
      "info" : "VariableDeclarationStatement[85193-85242]:VariableDeclarationStatement[85219-85268]"
    }, {
      "left" : "if (config.canOverrideAccessModifiers())",
      "right" : "if (config.canOverrideAccessModifiers())",
      "info" : "IfStatement[85255-85432]:IfStatement[85281-85458]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[85296-85432]:Block[85322-85458]"
    }, {
      "left" : "ClassUtil.checkAndFixAccess(accessor, config.isEnabled(MapperFeature.OVERRIDE_PUBLIC_ACCESS_MODIFIERS));",
      "right" : "ClassUtil.checkAndFixAccess(accessor, config.isEnabled(MapperFeature.OVERRIDE_PUBLIC_ACCESS_MODIFIERS));",
      "info" : "ExpressionStatement[85314-85418]:ExpressionStatement[85340-85444]"
    }, {
      "left" : "return EnumResolver.constructUnsafeUsingMethod(enumClass, accessor, config.getAnnotationIntrospector());",
      "right" : "return EnumResolver.constructUnsafeUsingMethod(enumClass, accessor, config.getAnnotationIntrospector());",
      "info" : "ReturnStatement[85445-85549]:ReturnStatement[85471-85575]"
    }, {
      "left" : "return EnumResolver.constructUnsafe(enumClass, config.getAnnotationIntrospector());",
      "right" : "return EnumResolver.constructUnsafe(enumClass, config.getAnnotationIntrospector());",
      "info" : "ReturnStatement[85742-85825]:ReturnStatement[85768-85851]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[86428-88100]:Block[86454-88126]"
    }, {
      "left" : "AnnotationIntrospector intr = ctxt.getAnnotationIntrospector();",
      "right" : "AnnotationIntrospector intr = ctxt.getAnnotationIntrospector();",
      "info" : "VariableDeclarationStatement[86438-86501]:VariableDeclarationStatement[86464-86527]"
    }, {
      "left" : "if (intr == null)",
      "right" : "if (intr == null)",
      "info" : "IfStatement[86510-86564]:IfStatement[86536-86590]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[86528-86564]:Block[86554-86590]"
    }, {
      "left" : "return type;",
      "right" : "return type;",
      "info" : "ReturnStatement[86542-86554]:ReturnStatement[86568-86580]"
    }, {
      "left" : "return intr.refineDeserializationType(ctxt.getConfig(), a, type);",
      "right" : "return intr.refineDeserializationType(ctxt.getConfig(), a, type);",
      "info" : "ReturnStatement[88029-88094]:ReturnStatement[88055-88120]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[88412-88487]:Block[88438-88513]"
    }, {
      "left" : "return resolveMemberAndTypeAnnotations(ctxt, member, type);",
      "right" : "return resolveMemberAndTypeAnnotations(ctxt, member, type);",
      "info" : "ReturnStatement[88422-88481]:ReturnStatement[88448-88507]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[88769-88954]:Block[88795-88980]"
    }, {
      "left" : "if (enumType == null)",
      "right" : "if (enumType == null)",
      "info" : "IfStatement[88779-88837]:IfStatement[88805-88863]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[88801-88837]:Block[88827-88863]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[88815-88827]:ReturnStatement[88841-88853]"
    }, {
      "left" : "BeanDescription beanDesc = config.introspect(enumType);",
      "right" : "BeanDescription beanDesc = config.introspect(enumType);",
      "info" : "VariableDeclarationStatement[88846-88901]:VariableDeclarationStatement[88872-88927]"
    }, {
      "left" : "return beanDesc.findJsonValueMethod();",
      "right" : "return beanDesc.findJsonValueMethod();",
      "info" : "ReturnStatement[88910-88948]:ReturnStatement[88936-88974]"
    } ]
  },
  "interFileMappings" : { }
}