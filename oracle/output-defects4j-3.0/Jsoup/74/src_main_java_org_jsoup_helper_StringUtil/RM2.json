{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "StringUtil",
      "right" : "StringUtil",
      "info" : "TypeDeclaration[169-9123]:TypeDeclaration[169-9301]"
    }, {
      "left" : "static final String[] padding = {\"\", \" \", \"  \", \"   \", \"    \", \"     \", \"      \", \"       \", \"        \",\n        \"         \", \"          \", \"           \", \"            \", \"             \", \"              \", \"               \",\n        \"                \", \"                 \", \"                  \", \"                   \", \"                    \"};",
      "right" : "static final String[] padding = {\"\", \" \", \"  \", \"   \", \"    \", \"     \", \"      \", \"       \", \"        \",\n        \"         \", \"          \", \"           \", \"            \", \"             \", \"              \", \"               \",\n        \"                \", \"                 \", \"                  \", \"                   \", \"                    \"};",
      "info" : "FieldDeclaration[319-662]:FieldDeclaration[319-662]"
    }, {
      "left" : "public static String join(Collection strings, String sep)",
      "right" : "public static String join(Collection strings, String sep)",
      "info" : "MethodDeclaration[668-976]:MethodDeclaration[668-976]"
    }, {
      "left" : "public static String join(Iterator strings, String sep)",
      "right" : "public static String join(Iterator strings, String sep)",
      "info" : "MethodDeclaration[982-1639]:MethodDeclaration[982-1639]"
    }, {
      "left" : "public static String join(String[] strings, String sep)",
      "right" : "public static String join(String[] strings, String sep)",
      "info" : "MethodDeclaration[1645-1951]:MethodDeclaration[1645-1951]"
    }, {
      "left" : "public static String padding(int width)",
      "right" : "public static String padding(int width)",
      "info" : "MethodDeclaration[1957-2439]:MethodDeclaration[1957-2439]"
    }, {
      "left" : "public static boolean isBlank(String string)",
      "right" : "public static boolean isBlank(String string)",
      "info" : "MethodDeclaration[2445-2946]:MethodDeclaration[2445-2946]"
    }, {
      "left" : "public static boolean isNumeric(String string)",
      "right" : "public static boolean isNumeric(String string)",
      "info" : "MethodDeclaration[2952-3493]:MethodDeclaration[2952-3493]"
    }, {
      "left" : "public static boolean isWhitespace(int c",
      "right" : "public static boolean isWhitespace(int c",
      "info" : "MethodDeclaration[3499-3875]:MethodDeclaration[3499-3875]"
    }, {
      "left" : "public static boolean isActuallyWhitespace(int c",
      "right" : "public static boolean isActuallyWhitespace(int c",
      "info" : "MethodDeclaration[3881-4325]:MethodDeclaration[3881-4325]"
    }, {
      "left" : "public static String normaliseWhitespace(String string)",
      "right" : "public static String normaliseWhitespace(String string)",
      "info" : "MethodDeclaration[4392-4859]:MethodDeclaration[4545-5012]"
    }, {
      "left" : "public static void appendNormalisedWhitespace(StringBuilder accum, String string, boolean stripLeading)",
      "right" : "public static void appendNormalisedWhitespace(StringBuilder accum, String string, boolean stripLeading)",
      "info" : "MethodDeclaration[4865-5891]:MethodDeclaration[5018-6069]"
    }, {
      "left" : "public static boolean in(final String needle, final String... haystack)",
      "right" : "public static boolean in(final String needle, final String... haystack)",
      "info" : "MethodDeclaration[5897-6158]:MethodDeclaration[6075-6336]"
    }, {
      "left" : "public static boolean inSorted(String needle, String[] haystack)",
      "right" : "public static boolean inSorted(String needle, String[] haystack)",
      "info" : "MethodDeclaration[6164-6295]:MethodDeclaration[6342-6473]"
    }, {
      "left" : "public static URL resolve(URL base, String relUrl) throws MalformedURLException",
      "right" : "public static URL resolve(URL base, String relUrl) throws MalformedURLException",
      "info" : "MethodDeclaration[6301-7279]:MethodDeclaration[6479-7457]"
    }, {
      "left" : "public static String resolve(final String baseUrl, final String relUrl)",
      "right" : "public static String resolve(final String baseUrl, final String relUrl)",
      "info" : "MethodDeclaration[7285-8201]:MethodDeclaration[7463-8379]"
    }, {
      "left" : "public static StringBuilder stringBuilder()",
      "right" : "public static StringBuilder stringBuilder()",
      "info" : "MethodDeclaration[8207-8812]:MethodDeclaration[8385-8990]"
    }, {
      "left" : "private static final int MaxCachedBuilderSize = 8 * 1024;",
      "right" : "private static final int MaxCachedBuilderSize = 8 * 1024;",
      "info" : "FieldDeclaration[8818-8875]:FieldDeclaration[8996-9053]"
    }, {
      "left" : "private static final ThreadLocal<StringBuilder> stringLocal = new ThreadLocal<StringBuilder>(){\n        @Override\n        protected StringBuilder initialValue() {\n            return new StringBuilder(MaxCachedBuilderSize);\n        }\n    };",
      "right" : "private static final ThreadLocal<StringBuilder> stringLocal = new ThreadLocal<StringBuilder>(){\n        @Override\n        protected StringBuilder initialValue() {\n            return new StringBuilder(MaxCachedBuilderSize);\n        }\n    };",
      "info" : "FieldDeclaration[8880-9119]:FieldDeclaration[9058-9297]"
    }, {
      "left" : "protected StringBuilder initialValue()",
      "right" : "protected StringBuilder initialValue()",
      "info" : "MethodDeclaration[8984-9112]:MethodDeclaration[9162-9290]"
    } ],
    "mappings" : [
 {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[250-256]:Modifier[250-256]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[263-268]:TYPE_DECLARATION_KIND[263-268]"
    }, {
      "left" : "StringUtil",
      "right" : "StringUtil",
      "info" : "SimpleName[269-279]:SimpleName[269-279]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[865-871]:Modifier[865-871]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[872-878]:Modifier[872-878]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[879-885]:SimpleType[879-885]"
    }, {
      "left" : "join",
      "right" : "join",
      "info" : "SimpleName[886-890]:SimpleName[886-890]"
    }, {
      "left" : "Collection strings",
      "right" : "Collection strings",
      "info" : "SingleVariableDeclaration[891-909]:SingleVariableDeclaration[891-909]"
    }, {
      "left" : "String sep",
      "right" : "String sep",
      "info" : "SingleVariableDeclaration[911-921]:SingleVariableDeclaration[911-921]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[923-976]:Block[923-976]"
    }, {
      "left" : "return join(strings.iterator(), sep);",
      "right" : "return join(strings.iterator(), sep);",
      "info" : "ReturnStatement[933-970]:ReturnStatement[933-970]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[1177-1183]:Modifier[1177-1183]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[1184-1190]:Modifier[1184-1190]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[1191-1197]:SimpleType[1191-1197]"
    }, {
      "left" : "join",
      "right" : "join",
      "info" : "SimpleName[1198-1202]:SimpleName[1198-1202]"
    }, {
      "left" : "Iterator strings",
      "right" : "Iterator strings",
      "info" : "SingleVariableDeclaration[1203-1219]:SingleVariableDeclaration[1203-1219]"
    }, {
      "left" : "String sep",
      "right" : "String sep",
      "info" : "SingleVariableDeclaration[1221-1231]:SingleVariableDeclaration[1221-1231]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1233-1639]:Block[1233-1639]"
    }, {
      "left" : "if (!strings.hasNext())",
      "right" : "if (!strings.hasNext())",
      "info" : "IfStatement[1243-1289]:IfStatement[1243-1289]"
    }, {
      "left" : "return \"\";",
      "right" : "return \"\";",
      "info" : "ReturnStatement[1279-1289]:ReturnStatement[1279-1289]"
    }, {
      "left" : "String start = strings.next().toString();",
      "right" : "String start = strings.next().toString();",
      "info" : "VariableDeclarationStatement[1299-1340]:VariableDeclarationStatement[1299-1340]"
    }, {
      "left" : "if (!strings.hasNext())",
      "right" : "if (!strings.hasNext())",
      "info" : "IfStatement[1349-1425]:IfStatement[1349-1425]"
    }, {
      "left" : "return start;",
      "right" : "return start;",
      "info" : "ReturnStatement[1412-1425]:ReturnStatement[1412-1425]"
    }, {
      "left" : "StringBuilder sb = new StringBuilder(64).append(start);",
      "right" : "StringBuilder sb = new StringBuilder(64).append(start);",
      "info" : "VariableDeclarationStatement[1435-1490]:VariableDeclarationStatement[1435-1490]"
    }, {
      "left" : "while (strings.hasNext())",
      "right" : "while (strings.hasNext())",
      "info" : "WhileStatement[1499-1603]:WhileStatement[1499-1603]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1525-1603]:Block[1525-1603]"
    }, {
      "left" : "sb.append(sep);",
      "right" : "sb.append(sep);",
      "info" : "ExpressionStatement[1539-1554]:ExpressionStatement[1539-1554]"
    }, {
      "left" : "sb.append(strings.next());",
      "right" : "sb.append(strings.next());",
      "info" : "ExpressionStatement[1567-1593]:ExpressionStatement[1567-1593]"
    }, {
      "left" : "return sb.toString();",
      "right" : "return sb.toString();",
      "info" : "ReturnStatement[1612-1633]:ReturnStatement[1612-1633]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[1838-1844]:Modifier[1838-1844]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[1845-1851]:Modifier[1845-1851]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[1852-1858]:SimpleType[1852-1858]"
    }, {
      "left" : "join",
      "right" : "join",
      "info" : "SimpleName[1859-1863]:SimpleName[1859-1863]"
    }, {
      "left" : "String[] strings",
      "right" : "String[] strings",
      "info" : "SingleVariableDeclaration[1864-1880]:SingleVariableDeclaration[1864-1880]"
    }, {
      "left" : "String sep",
      "right" : "String sep",
      "info" : "SingleVariableDeclaration[1882-1892]:SingleVariableDeclaration[1882-1892]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1894-1951]:Block[1894-1951]"
    }, {
      "left" : "return join(Arrays.asList(strings), sep);",
      "right" : "return join(Arrays.asList(strings), sep);",
      "info" : "ReturnStatement[1904-1945]:ReturnStatement[1904-1945]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[2088-2094]:Modifier[2088-2094]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[2095-2101]:Modifier[2095-2101]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[2102-2108]:SimpleType[2102-2108]"
    }, {
      "left" : "padding",
      "right" : "padding",
      "info" : "SimpleName[2109-2116]:SimpleName[2109-2116]"
    }, {
      "left" : "int width",
      "right" : "int width",
      "info" : "SingleVariableDeclaration[2117-2126]:SingleVariableDeclaration[2117-2126]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2128-2439]:Block[2128-2439]"
    }, {
      "left" : "if (width < 0)",
      "right" : "if (width < 0)",
      "info" : "IfStatement[2138-2221]:IfStatement[2138-2221]"
    }, {
      "left" : "throw new IllegalArgumentException(\"width must be > 0\");",
      "right" : "throw new IllegalArgumentException(\"width must be > 0\");",
      "info" : "ThrowStatement[2165-2221]:ThrowStatement[2165-2221]"
    }, {
      "left" : "if (width < padding.length)",
      "right" : "if (width < padding.length)",
      "info" : "IfStatement[2231-2293]:IfStatement[2231-2293]"
    }, {
      "left" : "return padding[width];",
      "right" : "return padding[width];",
      "info" : "ReturnStatement[2271-2293]:ReturnStatement[2271-2293]"
    }, {
      "left" : "char[] out = new char[width];",
      "right" : "char[] out = new char[width];",
      "info" : "VariableDeclarationStatement[2302-2331]:VariableDeclarationStatement[2302-2331]"
    }, {
      "left" : "for (int i = 0; i < width; i++)\n            out[i] = ' ';",
      "right" : "for (int i = 0; i < width; i++)\n            out[i] = ' ';",
      "info" : "ForStatement[2340-2397]:ForStatement[2340-2397]"
    }, {
      "left" : "out[i] = ' ';",
      "right" : "out[i] = ' ';",
      "info" : "ExpressionStatement[2384-2397]:ExpressionStatement[2384-2397]"
    }, {
      "left" : "return String.valueOf(out);",
      "right" : "return String.valueOf(out);",
      "info" : "ReturnStatement[2406-2433]:ReturnStatement[2406-2433]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[2619-2625]:Modifier[2619-2625]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[2626-2632]:Modifier[2626-2632]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[2633-2640]:PrimitiveType[2633-2640]"
    }, {
      "left" : "isBlank",
      "right" : "isBlank",
      "info" : "SimpleName[2641-2648]:SimpleName[2641-2648]"
    }, {
      "left" : "String string",
      "right" : "String string",
      "info" : "SingleVariableDeclaration[2649-2662]:SingleVariableDeclaration[2649-2662]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2664-2946]:Block[2664-2946]"
    }, {
      "left" : "if (string == null || string.length() == 0)",
      "right" : "if (string == null || string.length() == 0)",
      "info" : "IfStatement[2674-2742]:IfStatement[2674-2742]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[2730-2742]:ReturnStatement[2730-2742]"
    }, {
      "left" : "int l = string.length();",
      "right" : "int l = string.length();",
      "info" : "VariableDeclarationStatement[2752-2776]:VariableDeclarationStatement[2752-2776]"
    }, {
      "left" : "for (int i = 0; i < l; i++)",
      "right" : "for (int i = 0; i < l; i++)",
      "info" : "ForStatement[2785-2919]:ForStatement[2785-2919]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2813-2919]:Block[2813-2919]"
    }, {
      "left" : "if (!StringUtil.isWhitespace(string.codePointAt(i)))",
      "right" : "if (!StringUtil.isWhitespace(string.codePointAt(i)))",
      "info" : "IfStatement[2827-2909]:IfStatement[2827-2909]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[2896-2909]:ReturnStatement[2896-2909]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[2928-2940]:ReturnStatement[2928-2940]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[3169-3175]:Modifier[3169-3175]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[3176-3182]:Modifier[3176-3182]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[3183-3190]:PrimitiveType[3183-3190]"
    }, {
      "left" : "isNumeric",
      "right" : "isNumeric",
      "info" : "SimpleName[3191-3200]:SimpleName[3191-3200]"
    }, {
      "left" : "String string",
      "right" : "String string",
      "info" : "SingleVariableDeclaration[3201-3214]:SingleVariableDeclaration[3201-3214]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3216-3493]:Block[3216-3493]"
    }, {
      "left" : "if (string == null || string.length() == 0)",
      "right" : "if (string == null || string.length() == 0)",
      "info" : "IfStatement[3226-3295]:IfStatement[3226-3295]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[3282-3295]:ReturnStatement[3282-3295]"
    }, {
      "left" : "int l = string.length();",
      "right" : "int l = string.length();",
      "info" : "VariableDeclarationStatement[3305-3329]:VariableDeclarationStatement[3305-3329]"
    }, {
      "left" : "for (int i = 0; i < l; i++)",
      "right" : "for (int i = 0; i < l; i++)",
      "info" : "ForStatement[3338-3466]:ForStatement[3338-3466]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3366-3466]:Block[3366-3466]"
    }, {
      "left" : "if (!Character.isDigit(string.codePointAt(i)))",
      "right" : "if (!Character.isDigit(string.codePointAt(i)))",
      "info" : "IfStatement[3380-3456]:IfStatement[3380-3456]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[3443-3456]:ReturnStatement[3443-3456]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[3475-3487]:ReturnStatement[3475-3487]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[3750-3756]:Modifier[3750-3756]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[3757-3763]:Modifier[3757-3763]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[3764-3771]:PrimitiveType[3764-3771]"
    }, {
      "left" : "isWhitespace",
      "right" : "isWhitespace",
      "info" : "SimpleName[3772-3784]:SimpleName[3772-3784]"
    }, {
      "left" : "int c",
      "right" : "int c",
      "info" : "SingleVariableDeclaration[3785-3790]:SingleVariableDeclaration[3785-3790]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3791-3875]:Block[3791-3875]"
    }, {
      "left" : "return c == ' ' || c == '\\t' || c == '\\n' || c == '\\f' || c == '\\r';",
      "right" : "return c == ' ' || c == '\\t' || c == '\\n' || c == '\\f' || c == '\\r';",
      "info" : "ReturnStatement[3801-3869]:ReturnStatement[3801-3869]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[4103-4109]:Modifier[4103-4109]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[4110-4116]:Modifier[4110-4116]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[4117-4124]:PrimitiveType[4117-4124]"
    }, {
      "left" : "isActuallyWhitespace",
      "right" : "isActuallyWhitespace",
      "info" : "SimpleName[4125-4145]:SimpleName[4125-4145]"
    }, {
      "left" : "int c",
      "right" : "int c",
      "info" : "SingleVariableDeclaration[4146-4151]:SingleVariableDeclaration[4146-4151]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4152-4325]:Block[4152-4325]"
    }, {
      "left" : "return c == ' ' || c == '\\t' || c == '\\n' || c == '\\f' || c == '\\r' || c == 160;",
      "right" : "return c == ' ' || c == '\\t' || c == '\\n' || c == '\\f' || c == '\\r' || c == 160;",
      "info" : "ReturnStatement[4162-4242]:ReturnStatement[4162-4242]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[4656-4662]:Modifier[4809-4815]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[4663-4669]:Modifier[4816-4822]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[4670-4676]:SimpleType[4823-4829]"
    }, {
      "left" : "normaliseWhitespace",
      "right" : "normaliseWhitespace",
      "info" : "SimpleName[4677-4696]:SimpleName[4830-4849]"
    }, {
      "left" : "String string",
      "right" : "String string",
      "info" : "SingleVariableDeclaration[4697-4710]:SingleVariableDeclaration[4850-4863]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4712-4859]:Block[4865-5012]"
    }, {
      "left" : "StringBuilder sb = StringUtil.stringBuilder();",
      "right" : "StringBuilder sb = StringUtil.stringBuilder();",
      "info" : "VariableDeclarationStatement[4722-4768]:VariableDeclarationStatement[4875-4921]"
    }, {
      "left" : "appendNormalisedWhitespace(sb, string, false);",
      "right" : "appendNormalisedWhitespace(sb, string, false);",
      "info" : "ExpressionStatement[4777-4823]:ExpressionStatement[4930-4976]"
    }, {
      "left" : "return sb.toString();",
      "right" : "return sb.toString();",
      "info" : "ReturnStatement[4832-4853]:ReturnStatement[4985-5006]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[5154-5160]:Modifier[5307-5313]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[5161-5167]:Modifier[5314-5320]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[5168-5172]:PrimitiveType[5321-5325]"
    }, {
      "left" : "appendNormalisedWhitespace",
      "right" : "appendNormalisedWhitespace",
      "info" : "SimpleName[5173-5199]:SimpleName[5326-5352]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5258-5891]:Block[5411-6069]"
    }, {
      "left" : "boolean lastWasWhite = false;",
      "right" : "boolean lastWasWhite = false;",
      "info" : "VariableDeclarationStatement[5268-5297]:VariableDeclarationStatement[5421-5450]"
    }, {
      "left" : "boolean reachedNonWhite = false;",
      "right" : "boolean reachedNonWhite = false;",
      "info" : "VariableDeclarationStatement[5306-5338]:VariableDeclarationStatement[5459-5491]"
    }, {
      "left" : "int len = string.length();",
      "right" : "int len = string.length();",
      "info" : "VariableDeclarationStatement[5348-5374]:VariableDeclarationStatement[5501-5527]"
    }, {
      "left" : "int c;",
      "right" : "int c;",
      "info" : "VariableDeclarationStatement[5383-5389]:VariableDeclarationStatement[5536-5542]"
    }, {
      "left" : "for (int i = 0; i < len; i+= Character.charCount(c))",
      "right" : "for (int i = 0; i < len; i+= Character.charCount(c))",
      "info" : "ForStatement[5398-5885]:ForStatement[5551-6063]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5451-5885]:Block[5604-6063]"
    }, {
      "left" : "c = string.codePointAt(i);",
      "right" : "c = string.codePointAt(i);",
      "info" : "ExpressionStatement[5465-5491]:ExpressionStatement[5618-5644]"
    }, {
      "left" : "if (isActuallyWhitespace(c))",
      "right" : "if (isActuallyWhitespace(c))",
      "info" : "IfStatement[5504-5875]:IfStatement[5657-6053]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5533-5722]:Block[5686-5875]"
    }, {
      "left" : "if ((stripLeading && !reachedNonWhite) || lastWasWhite)",
      "right" : "if ((stripLeading && !reachedNonWhite) || lastWasWhite)",
      "info" : "IfStatement[5551-5636]:IfStatement[5704-5789]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[5627-5636]:ContinueStatement[5780-5789]"
    }, {
      "left" : "accum.append(' ');",
      "right" : "accum.append(' ');",
      "info" : "ExpressionStatement[5653-5671]:ExpressionStatement[5806-5824]"
    }, {
      "left" : "lastWasWhite = true;",
      "right" : "lastWasWhite = true;",
      "info" : "ExpressionStatement[5688-5708]:ExpressionStatement[5841-5861]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5740-5875]:Block[5918-6053]"
    }, {
      "left" : "accum.appendCodePoint(c);",
      "right" : "accum.appendCodePoint(c);",
      "info" : "ExpressionStatement[5758-5783]:ExpressionStatement[5936-5961]"
    }, {
      "left" : "lastWasWhite = false;",
      "right" : "lastWasWhite = false;",
      "info" : "ExpressionStatement[5800-5821]:ExpressionStatement[5978-5999]"
    }, {
      "left" : "reachedNonWhite = true;",
      "right" : "reachedNonWhite = true;",
      "info" : "ExpressionStatement[5838-5861]:ExpressionStatement[6016-6039]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[5897-5903]:Modifier[6075-6081]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[5904-5910]:Modifier[6082-6088]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[5911-5918]:PrimitiveType[6089-6096]"
    }, {
      "left" : "in",
      "right" : "in",
      "info" : "SimpleName[5919-5921]:SimpleName[6097-6099]"
    }, {
      "left" : "final String needle",
      "right" : "final String needle",
      "info" : "SingleVariableDeclaration[5922-5941]:SingleVariableDeclaration[6100-6119]"
    }, {
      "left" : "final String... haystack",
      "right" : "final String... haystack",
      "info" : "SingleVariableDeclaration[5943-5967]:SingleVariableDeclaration[6121-6145]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5969-6158]:Block[6147-6336]"
    }, {
      "left" : "final int len = haystack.length;",
      "right" : "final int len = haystack.length;",
      "info" : "VariableDeclarationStatement[5979-6011]:VariableDeclarationStatement[6157-6189]"
    }, {
      "left" : "for (int i = 0; i < len; i++)",
      "right" : "for (int i = 0; i < len; i++)",
      "info" : "ForStatement[6020-6130]:ForStatement[6198-6308]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6050-6130]:Block[6228-6308]"
    }, {
      "left" : "if (haystack[i].equals(needle))",
      "right" : "if (haystack[i].equals(needle))",
      "info" : "IfStatement[6064-6120]:IfStatement[6242-6298]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[6108-6120]:ReturnStatement[6286-6298]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[6139-6152]:ReturnStatement[6317-6330]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[6164-6170]:Modifier[6342-6348]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[6171-6177]:Modifier[6349-6355]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[6178-6185]:PrimitiveType[6356-6363]"
    }, {
      "left" : "inSorted",
      "right" : "inSorted",
      "info" : "SimpleName[6186-6194]:SimpleName[6364-6372]"
    }, {
      "left" : "String needle",
      "right" : "String needle",
      "info" : "SingleVariableDeclaration[6195-6208]:SingleVariableDeclaration[6373-6386]"
    }, {
      "left" : "String[] haystack",
      "right" : "String[] haystack",
      "info" : "SingleVariableDeclaration[6210-6227]:SingleVariableDeclaration[6388-6405]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6229-6295]:Block[6407-6473]"
    }, {
      "left" : "return Arrays.binarySearch(haystack, needle) >= 0;",
      "right" : "return Arrays.binarySearch(haystack, needle) >= 0;",
      "info" : "ReturnStatement[6239-6289]:ReturnStatement[6417-6467]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[6685-6691]:Modifier[6863-6869]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[6692-6698]:Modifier[6870-6876]"
    }, {
      "left" : "URL",
      "right" : "URL",
      "info" : "SimpleType[6699-6702]:SimpleType[6877-6880]"
    }, {
      "left" : "resolve",
      "right" : "resolve",
      "info" : "SimpleName[6703-6710]:SimpleName[6881-6888]"
    }, {
      "left" : "URL base",
      "right" : "URL base",
      "info" : "SingleVariableDeclaration[6711-6719]:SingleVariableDeclaration[6889-6897]"
    }, {
      "left" : "String relUrl",
      "right" : "String relUrl",
      "info" : "SingleVariableDeclaration[6721-6734]:SingleVariableDeclaration[6899-6912]"
    }, {
      "left" : "MalformedURLException",
      "right" : "MalformedURLException",
      "info" : "SimpleType[6743-6764]:SimpleType[6921-6942]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6765-7279]:Block[6943-7457]"
    }, {
      "left" : "if (relUrl.startsWith(\"?\"))",
      "right" : "if (relUrl.startsWith(\"?\"))",
      "info" : "IfStatement[6884-6957]:IfStatement[7062-7135]"
    }, {
      "left" : "relUrl = base.getPath() + relUrl;",
      "right" : "relUrl = base.getPath() + relUrl;",
      "info" : "ExpressionStatement[6924-6957]:ExpressionStatement[7102-7135]"
    }, {
      "left" : "if (relUrl.indexOf('.') == 0 && base.getFile().indexOf('/') != 0)",
      "right" : "if (relUrl.indexOf('.') == 0 && base.getFile().indexOf('/') != 0)",
      "info" : "IfStatement[7056-7235]:IfStatement[7234-7413]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7122-7235]:Block[7300-7413]"
    }, {
      "left" : "base = new URL(base.getProtocol(), base.getHost(), base.getPort(), \"/\" + base.getFile());",
      "right" : "base = new URL(base.getProtocol(), base.getHost(), base.getPort(), \"/\" + base.getFile());",
      "info" : "ExpressionStatement[7136-7225]:ExpressionStatement[7314-7403]"
    }, {
      "left" : "return new URL(base, relUrl);",
      "right" : "return new URL(base, relUrl);",
      "info" : "ReturnStatement[7244-7273]:ReturnStatement[7422-7451]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[7645-7651]:Modifier[7823-7829]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[7652-7658]:Modifier[7830-7836]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[7659-7665]:SimpleType[7837-7843]"
    }, {
      "left" : "resolve",
      "right" : "resolve",
      "info" : "SimpleName[7666-7673]:SimpleName[7844-7851]"
    }, {
      "left" : "final String baseUrl",
      "right" : "final String baseUrl",
      "info" : "SingleVariableDeclaration[7674-7694]:SingleVariableDeclaration[7852-7872]"
    }, {
      "left" : "final String relUrl",
      "right" : "final String relUrl",
      "info" : "SingleVariableDeclaration[7696-7715]:SingleVariableDeclaration[7874-7893]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7717-8201]:Block[7895-8379]"
    }, {
      "left" : "URL base;",
      "right" : "URL base;",
      "info" : "VariableDeclarationStatement[7727-7736]:VariableDeclarationStatement[7905-7914]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[7745-8195]:TryStatement[7923-8373]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7749-8128]:Block[7927-8306]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[7763-8059]:TryStatement[7941-8237]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7767-7823]:Block[7945-8001]"
    }, {
      "left" : "base = new URL(baseUrl);",
      "right" : "base = new URL(baseUrl);",
      "info" : "ExpressionStatement[7785-7809]:ExpressionStatement[7963-7987]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7856-8059]:Block[8034-8237]"
    }, {
      "left" : "URL abs = new URL(relUrl);",
      "right" : "URL abs = new URL(relUrl);",
      "info" : "VariableDeclarationStatement[7974-8000]:VariableDeclarationStatement[8152-8178]"
    }, {
      "left" : "return abs.toExternalForm();",
      "right" : "return abs.toExternalForm();",
      "info" : "ReturnStatement[8017-8045]:ReturnStatement[8195-8223]"
    }, {
      "left" : "return resolve(base, relUrl).toExternalForm();",
      "right" : "return resolve(base, relUrl).toExternalForm();",
      "info" : "ReturnStatement[8072-8118]:ReturnStatement[8250-8296]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8161-8195]:Block[8339-8373]"
    }, {
      "left" : "return \"\";",
      "right" : "return \"\";",
      "info" : "ReturnStatement[8175-8185]:ReturnStatement[8353-8363]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[8488-8494]:Modifier[8666-8672]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[8495-8501]:Modifier[8673-8679]"
    }, {
      "left" : "StringBuilder",
      "right" : "StringBuilder",
      "info" : "SimpleType[8502-8515]:SimpleType[8680-8693]"
    }, {
      "left" : "stringBuilder",
      "right" : "stringBuilder",
      "info" : "SimpleName[8516-8529]:SimpleName[8694-8707]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8532-8812]:Block[8710-8990]"
    }, {
      "left" : "StringBuilder sb = stringLocal.get();",
      "right" : "StringBuilder sb = stringLocal.get();",
      "info" : "VariableDeclarationStatement[8542-8579]:VariableDeclarationStatement[8720-8757]"
    }, {
      "left" : "if (sb.length() > MaxCachedBuilderSize)",
      "right" : "if (sb.length() > MaxCachedBuilderSize)",
      "info" : "IfStatement[8588-8786]:IfStatement[8766-8964]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8628-8730]:Block[8806-8908]"
    }, {
      "left" : "sb = new StringBuilder(MaxCachedBuilderSize);",
      "right" : "sb = new StringBuilder(MaxCachedBuilderSize);",
      "info" : "ExpressionStatement[8642-8687]:ExpressionStatement[8820-8865]"
    }, {
      "left" : "stringLocal.set(sb);",
      "right" : "stringLocal.set(sb);",
      "info" : "ExpressionStatement[8700-8720]:ExpressionStatement[8878-8898]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8736-8786]:Block[8914-8964]"
    }, {
      "left" : "sb.delete(0, sb.length());",
      "right" : "sb.delete(0, sb.length());",
      "info" : "ExpressionStatement[8750-8776]:ExpressionStatement[8928-8954]"
    }, {
      "left" : "return sb;",
      "right" : "return sb;",
      "info" : "ReturnStatement[8795-8805]:ReturnStatement[8973-8983]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[8984-8993]:MarkerAnnotation[9162-9171]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[9002-9011]:Modifier[9180-9189]"
    }, {
      "left" : "StringBuilder",
      "right" : "StringBuilder",
      "info" : "SimpleType[9012-9025]:SimpleType[9190-9203]"
    }, {
      "left" : "initialValue",
      "right" : "initialValue",
      "info" : "SimpleName[9026-9038]:SimpleName[9204-9216]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9041-9112]:Block[9219-9290]"
    }, {
      "left" : "return new StringBuilder(MaxCachedBuilderSize);",
      "right" : "return new StringBuilder(MaxCachedBuilderSize);",
      "info" : "ReturnStatement[9055-9102]:ReturnStatement[9233-9280]"
    } ]
  },
  "interFileMappings" : { }
}