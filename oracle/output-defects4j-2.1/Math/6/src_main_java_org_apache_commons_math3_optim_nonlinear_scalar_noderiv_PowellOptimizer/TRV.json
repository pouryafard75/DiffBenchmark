{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "private static final double MIN_RELATIVE_TOLERANCE = 2 * FastMath.ulp(1d);",
      "right" : "private static final double MIN_RELATIVE_TOLERANCE = 2 * FastMath.ulp(1d);",
      "info" : "FieldDeclaration[3283-3408]:FieldDeclaration[3283-3408]"
    }, {
      "left" : "private final double relativeThreshold;",
      "right" : "private final double relativeThreshold;",
      "info" : "FieldDeclaration[3413-3495]:FieldDeclaration[3413-3495]"
    }, {
      "left" : "private final double absoluteThreshold;",
      "right" : "private final double absoluteThreshold;",
      "info" : "FieldDeclaration[3500-3582]:FieldDeclaration[3500-3582]"
    }, {
      "left" : "private final LineSearch line;",
      "right" : "private final LineSearch line;",
      "info" : "FieldDeclaration[3587-3653]:FieldDeclaration[3587-3653]"
    }, {
      "left" : "public PowellOptimizer(double rel,\n                           double abs,\n                           ConvergenceChecker<PointValuePair> checker)",
      "right" : "public PowellOptimizer(double rel,\n                           double abs,\n                           ConvergenceChecker<PointValuePair> checker)",
      "info" : "MethodDeclaration[3659-4496]:MethodDeclaration[3659-4496]"
    }, {
      "left" : "public PowellOptimizer(double rel,\n                           double abs,\n                           double lineRel,\n                           double lineAbs,\n                           ConvergenceChecker<PointValuePair> checker)",
      "right" : "public PowellOptimizer(double rel,\n                           double abs,\n                           double lineRel,\n                           double lineAbs,\n                           ConvergenceChecker<PointValuePair> checker)",
      "info" : "MethodDeclaration[4502-5878]:MethodDeclaration[4502-5878]"
    }, {
      "left" : "public PowellOptimizer(double rel,\n                           double abs)",
      "right" : "public PowellOptimizer(double rel,\n                           double abs)",
      "info" : "MethodDeclaration[5884-6459]:MethodDeclaration[5884-6459]"
    }, {
      "left" : "public PowellOptimizer(double rel,\n                           double abs,\n                           double lineRel,\n                           double lineAbs)",
      "right" : "public PowellOptimizer(double rel,\n                           double abs,\n                           double lineRel,\n                           double lineAbs)",
      "info" : "MethodDeclaration[6465-7157]:MethodDeclaration[6465-7157]"
    }, {
      "left" : "private double[][] newPointAndDirection(double[] p,\n                                            double[] d,\n                                            double optimum)",
      "right" : "private double[][] newPointAndDirection(double[] p,\n                                            double[] d,\n                                            double optimum)",
      "info" : "MethodDeclaration[10391-11335]:MethodDeclaration[10399-11343]"
    }, {
      "left" : "LineSearch",
      "right" : "LineSearch",
      "info" : "TypeDeclaration[11341-14425]:TypeDeclaration[11349-14433]"
    }, {
      "left" : "private static final double REL_TOL_UNUSED = 1e-15;",
      "right" : "private static final double REL_TOL_UNUSED = 1e-15;",
      "info" : "FieldDeclaration[11510-11806]:FieldDeclaration[11518-11814]"
    }, {
      "left" : "private static final double ABS_TOL_UNUSED = Double.MIN_VALUE;",
      "right" : "private static final double ABS_TOL_UNUSED = Double.MIN_VALUE;",
      "info" : "FieldDeclaration[11815-12122]:FieldDeclaration[11823-12130]"
    }, {
      "left" : "private final BracketFinder bracket = new BracketFinder();",
      "right" : "private final BracketFinder bracket = new BracketFinder();",
      "info" : "FieldDeclaration[12131-12246]:FieldDeclaration[12139-12254]"
    }, {
      "left" : "LineSearch(double rel,\n                   double abs)",
      "right" : "LineSearch(double rel,\n                   double abs)",
      "info" : "MethodDeclaration[12256-12789]:MethodDeclaration[12264-12797]"
    }, {
      "left" : "public UnivariatePointValuePair search(final double[] p, final double[] d)",
      "right" : "public UnivariatePointValuePair search(final double[] p, final double[] d)",
      "info" : "MethodDeclaration[12799-14419]:MethodDeclaration[12807-14427]"
    }, {
      "left" : "public double value(double alpha)",
      "right" : "public double value(double alpha)",
      "info" : "MethodDeclaration[13346-13723]:MethodDeclaration[13354-13731]"
    }, {
      "left" : "private void checkParameters()",
      "right" : "private void checkParameters()",
      "info" : "MethodDeclaration[14431-14799]:MethodDeclaration[14439-14807]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4416-4496]:Block[4416-4496]"
    }, {
      "left" : "this(rel, abs, FastMath.sqrt(rel), FastMath.sqrt(abs), checker);",
      "right" : "this(rel, abs, FastMath.sqrt(rel), FastMath.sqrt(abs), checker);",
      "info" : "ConstructorInvocation[4426-4490]:ConstructorInvocation[4426-4490]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5426-5878]:Block[5426-5878]"
    }, {
      "left" : "super(checker);",
      "right" : "super(checker);",
      "info" : "SuperConstructorInvocation[5436-5451]:SuperConstructorInvocation[5436-5451]"
    }, {
      "left" : "if (rel < MIN_RELATIVE_TOLERANCE)",
      "right" : "if (rel < MIN_RELATIVE_TOLERANCE)",
      "info" : "IfStatement[5461-5590]:IfStatement[5461-5590]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5495-5590]:Block[5495-5590]"
    }, {
      "left" : "throw new NumberIsTooSmallException(rel, MIN_RELATIVE_TOLERANCE, true);",
      "right" : "throw new NumberIsTooSmallException(rel, MIN_RELATIVE_TOLERANCE, true);",
      "info" : "ThrowStatement[5509-5580]:ThrowStatement[5509-5580]"
    }, {
      "left" : "if (abs <= 0)",
      "right" : "if (abs <= 0)",
      "info" : "IfStatement[5599-5681]:IfStatement[5599-5681]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5613-5681]:Block[5613-5681]"
    }, {
      "left" : "throw new NotStrictlyPositiveException(abs);",
      "right" : "throw new NotStrictlyPositiveException(abs);",
      "info" : "ThrowStatement[5627-5671]:ThrowStatement[5627-5671]"
    }, {
      "left" : "relativeThreshold = rel;",
      "right" : "relativeThreshold = rel;",
      "info" : "ExpressionStatement[5690-5714]:ExpressionStatement[5690-5714]"
    }, {
      "left" : "absoluteThreshold = abs;",
      "right" : "absoluteThreshold = abs;",
      "info" : "ExpressionStatement[5723-5747]:ExpressionStatement[5723-5747]"
    }, {
      "left" : "line = new LineSearch(lineRel,\n                              lineAbs);",
      "right" : "line = new LineSearch(lineRel,\n                              lineAbs);",
      "info" : "ExpressionStatement[5802-5872]:ExpressionStatement[5802-5872]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6422-6459]:Block[6422-6459]"
    }, {
      "left" : "this(rel, abs, null);",
      "right" : "this(rel, abs, null);",
      "info" : "ConstructorInvocation[6432-6453]:ConstructorInvocation[6432-6453]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7102-7157]:Block[7102-7157]"
    }, {
      "left" : "this(rel, abs, lineRel, lineAbs, null);",
      "right" : "this(rel, abs, lineRel, lineAbs, null);",
      "info" : "ConstructorInvocation[7112-7151]:ConstructorInvocation[7112-7151]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10968-11335]:Block[10976-11343]"
    }, {
      "left" : "final int n = p.length;",
      "right" : "final int n = p.length;",
      "info" : "VariableDeclarationStatement[10978-11001]:VariableDeclarationStatement[10986-11009]"
    }, {
      "left" : "final double[] nP = new double[n];",
      "right" : "final double[] nP = new double[n];",
      "info" : "VariableDeclarationStatement[11010-11044]:VariableDeclarationStatement[11018-11052]"
    }, {
      "left" : "final double[] nD = new double[n];",
      "right" : "final double[] nD = new double[n];",
      "info" : "VariableDeclarationStatement[11053-11087]:VariableDeclarationStatement[11061-11095]"
    }, {
      "left" : "for (int i = 0; i < n; i++)",
      "right" : "for (int i = 0; i < n; i++)",
      "info" : "ForStatement[11096-11205]:ForStatement[11104-11213]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11124-11205]:Block[11132-11213]"
    }, {
      "left" : "nD[i] = d[i] * optimum;",
      "right" : "nD[i] = d[i] * optimum;",
      "info" : "ExpressionStatement[11138-11161]:ExpressionStatement[11146-11169]"
    }, {
      "left" : "nP[i] = p[i] + nD[i];",
      "right" : "nP[i] = p[i] + nD[i];",
      "info" : "ExpressionStatement[11174-11195]:ExpressionStatement[11182-11203]"
    }, {
      "left" : "final double[][] result = new double[2][];",
      "right" : "final double[][] result = new double[2][];",
      "info" : "VariableDeclarationStatement[11215-11257]:VariableDeclarationStatement[11223-11265]"
    }, {
      "left" : "result[0] = nP;",
      "right" : "result[0] = nP;",
      "info" : "ExpressionStatement[11266-11281]:ExpressionStatement[11274-11289]"
    }, {
      "left" : "result[1] = nD;",
      "right" : "result[1] = nD;",
      "info" : "ExpressionStatement[11290-11305]:ExpressionStatement[11298-11313]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[11315-11329]:ReturnStatement[11323-11337]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12647-12789]:Block[12655-12797]"
    }, {
      "left" : "super(REL_TOL_UNUSED,\n                  ABS_TOL_UNUSED,\n                  new SimpleUnivariateValueChecker(rel, abs));",
      "right" : "super(REL_TOL_UNUSED,\n                  ABS_TOL_UNUSED,\n                  new SimpleUnivariateValueChecker(rel, abs));",
      "info" : "SuperConstructorInvocation[12661-12779]:SuperConstructorInvocation[12669-12787]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13220-14419]:Block[13228-14427]"
    }, {
      "left" : "final int n = p.length;",
      "right" : "final int n = p.length;",
      "info" : "VariableDeclarationStatement[13234-13257]:VariableDeclarationStatement[13242-13265]"
    }, {
      "left" : "final UnivariateFunction f = new UnivariateFunction() {\n                    public double value(double alpha) {\n                        final double[] x = new double[n];\n                        for (int i = 0; i < n; i++) {\n                            x[i] = p[i] + alpha * d[i];\n                        }\n                        final double obj = PowellOptimizer.this.computeObjectiveValue(x);\n                        return obj;\n                    }\n                };",
      "right" : "final UnivariateFunction f = new UnivariateFunction() {\n                    public double value(double alpha) {\n                        final double[] x = new double[n];\n                        for (int i = 0; i < n; i++) {\n                            x[i] = p[i] + alpha * d[i];\n                        }\n                        final double obj = PowellOptimizer.this.computeObjectiveValue(x);\n                        return obj;\n                    }\n                };",
      "info" : "VariableDeclarationStatement[13270-13742]:VariableDeclarationStatement[13278-13750]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13380-13723]:Block[13388-13731]"
    }, {
      "left" : "final double[] x = new double[n];",
      "right" : "final double[] x = new double[n];",
      "info" : "VariableDeclarationStatement[13406-13439]:VariableDeclarationStatement[13414-13447]"
    }, {
      "left" : "for (int i = 0; i < n; i++)",
      "right" : "for (int i = 0; i < n; i++)",
      "info" : "ForStatement[13464-13575]:ForStatement[13472-13583]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13492-13575]:Block[13500-13583]"
    }, {
      "left" : "x[i] = p[i] + alpha * d[i];",
      "right" : "x[i] = p[i] + alpha * d[i];",
      "info" : "ExpressionStatement[13522-13549]:ExpressionStatement[13530-13557]"
    }, {
      "left" : "final double obj = PowellOptimizer.this.computeObjectiveValue(x);",
      "right" : "final double obj = PowellOptimizer.this.computeObjectiveValue(x);",
      "info" : "VariableDeclarationStatement[13600-13665]:VariableDeclarationStatement[13608-13673]"
    }, {
      "left" : "return obj;",
      "right" : "return obj;",
      "info" : "ReturnStatement[13690-13701]:ReturnStatement[13698-13709]"
    }, {
      "left" : "final GoalType goal = PowellOptimizer.this.getGoalType();",
      "right" : "final GoalType goal = PowellOptimizer.this.getGoalType();",
      "info" : "VariableDeclarationStatement[13756-13813]:VariableDeclarationStatement[13764-13821]"
    }, {
      "left" : "bracket.search(f, goal, 0, 1);",
      "right" : "bracket.search(f, goal, 0, 1);",
      "info" : "ExpressionStatement[13826-13856]:ExpressionStatement[13834-13864]"
    }, {
      "left" : "return optimize(new MaxEval(Integer.MAX_VALUE),\n                            new UnivariateObjectiveFunction(f),\n                            goal,\n                            new SearchInterval(bracket.getLo(),\n                                               bracket.getHi(),\n                                               bracket.getMid()));",
      "right" : "return optimize(new MaxEval(Integer.MAX_VALUE),\n                            new UnivariateObjectiveFunction(f),\n                            goal,\n                            new SearchInterval(bracket.getLo(),\n                                               bracket.getHi(),\n                                               bracket.getMid()));",
      "info" : "ReturnStatement[14069-14409]:ReturnStatement[14077-14417]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14618-14799]:Block[14626-14807]"
    }, {
      "left" : "if (getLowerBound() != null ||\n            getUpperBound() != null)",
      "right" : "if (getLowerBound() != null ||\n            getUpperBound() != null)",
      "info" : "IfStatement[14628-14793]:IfStatement[14636-14801]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14696-14793]:Block[14704-14801]"
    }, {
      "left" : "throw new MathUnsupportedOperationException(LocalizedFormats.CONSTRAINT);",
      "right" : "throw new MathUnsupportedOperationException(LocalizedFormats.CONSTRAINT);",
      "info" : "ThrowStatement[14710-14783]:ThrowStatement[14718-14791]"
    } ]
  },
  "interFileMappings" : { }
}