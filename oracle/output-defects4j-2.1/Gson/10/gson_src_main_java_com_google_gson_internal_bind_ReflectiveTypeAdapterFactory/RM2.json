{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "ReflectiveTypeAdapterFactory",
      "right" : "ReflectiveTypeAdapterFactory",
      "info" : "TypeDeclaration[1670-9273]:TypeDeclaration[1670-9310]"
    }, {
      "left" : "private final ConstructorConstructor constructorConstructor;",
      "right" : "private final ConstructorConstructor constructorConstructor;",
      "info" : "FieldDeclaration[1830-1890]:FieldDeclaration[1830-1890]"
    }, {
      "left" : "private final FieldNamingStrategy fieldNamingPolicy;",
      "right" : "private final FieldNamingStrategy fieldNamingPolicy;",
      "info" : "FieldDeclaration[1893-1945]:FieldDeclaration[1893-1945]"
    }, {
      "left" : "private final Excluder excluder;",
      "right" : "private final Excluder excluder;",
      "info" : "FieldDeclaration[1948-1980]:FieldDeclaration[1948-1980]"
    }, {
      "left" : "public ReflectiveTypeAdapterFactory(ConstructorConstructor constructorConstructor,\n      FieldNamingStrategy fieldNamingPolicy, Excluder excluder)",
      "right" : "public ReflectiveTypeAdapterFactory(ConstructorConstructor constructorConstructor,\n      FieldNamingStrategy fieldNamingPolicy, Excluder excluder)",
      "info" : "MethodDeclaration[1984-2272]:MethodDeclaration[1984-2272]"
    }, {
      "left" : "public boolean excludeField(Field f, boolean serialize)",
      "right" : "public boolean excludeField(Field f, boolean serialize)",
      "info" : "MethodDeclaration[2276-2386]:MethodDeclaration[2276-2386]"
    }, {
      "left" : "static boolean excludeField(Field f, boolean serialize, Excluder excluder)",
      "right" : "static boolean excludeField(Field f, boolean serialize, Excluder excluder)",
      "info" : "MethodDeclaration[2390-2569]:MethodDeclaration[2390-2569]"
    }, {
      "left" : "private List<String> getFieldNames(Field f)",
      "right" : "private List<String> getFieldNames(Field f)",
      "info" : "MethodDeclaration[2573-3289]:MethodDeclaration[2573-3289]"
    }, {
      "left" : "public <T> TypeAdapter<T> create(Gson gson, final TypeToken<T> type)",
      "right" : "public <T> TypeAdapter<T> create(Gson gson, final TypeToken<T> type)",
      "info" : "MethodDeclaration[3293-3664]:MethodDeclaration[3293-3664]"
    }, {
      "left" : "private ReflectiveTypeAdapterFactory.BoundField createBoundField(\n      final Gson context, final Field field, final String name,\n      final TypeToken<?> fieldType, boolean serialize, boolean deserialize)",
      "right" : "private ReflectiveTypeAdapterFactory.BoundField createBoundField(\n      final Gson context, final Field field, final String name,\n      final TypeToken<?> fieldType, boolean serialize, boolean deserialize)",
      "info" : "MethodDeclaration[3668-5482]:MethodDeclaration[3668-5519]"
    }, {
      "left" : "void read(JsonReader reader, Object value)\n          throws IOException, IllegalAccessException",
      "right" : "void read(JsonReader reader, Object value)\n          throws IOException, IllegalAccessException",
      "info" : "MethodDeclaration[4921-5190]:MethodDeclaration[4958-5227]"
    }, {
      "left" : "public boolean writeField(Object value) throws IOException, IllegalAccessException",
      "right" : "public boolean writeField(Object value) throws IOException, IllegalAccessException",
      "info" : "MethodDeclaration[5197-5471]:MethodDeclaration[5234-5508]"
    }, {
      "left" : "private Map<String, BoundField> getBoundFields(Gson context, TypeToken<?> type, Class<?> raw)",
      "right" : "private Map<String, BoundField> getBoundFields(Gson context, TypeToken<?> type, Class<?> raw)",
      "info" : "MethodDeclaration[5486-7052]:MethodDeclaration[5523-7089]"
    }, {
      "left" : "BoundField",
      "right" : "BoundField",
      "info" : "TypeDeclaration[7056-7659]:TypeDeclaration[7093-7696]"
    }, {
      "left" : "final String name;",
      "right" : "final String name;",
      "info" : "FieldDeclaration[7095-7113]:FieldDeclaration[7132-7150]"
    }, {
      "left" : "final boolean serialized;",
      "right" : "final boolean serialized;",
      "info" : "FieldDeclaration[7118-7143]:FieldDeclaration[7155-7180]"
    }, {
      "left" : "final boolean deserialized;",
      "right" : "final boolean deserialized;",
      "info" : "FieldDeclaration[7148-7175]:FieldDeclaration[7185-7212]"
    }, {
      "left" : "protected BoundField(String name, boolean serialized, boolean deserialized)",
      "right" : "protected BoundField(String name, boolean serialized, boolean deserialized)",
      "info" : "MethodDeclaration[7181-7364]:MethodDeclaration[7218-7401]"
    }, {
      "left" : "abstract boolean writeField(Object value) throws IOException, IllegalAccessException;",
      "right" : "abstract boolean writeField(Object value) throws IOException, IllegalAccessException;",
      "info" : "MethodDeclaration[7369-7454]:MethodDeclaration[7406-7491]"
    }, {
      "left" : "abstract void write(JsonWriter writer, Object value) throws IOException, IllegalAccessException;",
      "right" : "abstract void write(JsonWriter writer, Object value) throws IOException, IllegalAccessException;",
      "info" : "MethodDeclaration[7459-7555]:MethodDeclaration[7496-7592]"
    }, {
      "left" : "abstract void read(JsonReader reader, Object value) throws IOException, IllegalAccessException;",
      "right" : "abstract void read(JsonReader reader, Object value) throws IOException, IllegalAccessException;",
      "info" : "MethodDeclaration[7560-7655]:MethodDeclaration[7597-7692]"
    }, {
      "left" : "Adapter",
      "right" : "Adapter",
      "info" : "TypeDeclaration[7663-9271]:TypeDeclaration[7700-9308]"
    }, {
      "left" : "private final ObjectConstructor<T> constructor;",
      "right" : "private final ObjectConstructor<T> constructor;",
      "info" : "FieldDeclaration[7729-7776]:FieldDeclaration[7766-7813]"
    }, {
      "left" : "private final Map<String, BoundField> boundFields;",
      "right" : "private final Map<String, BoundField> boundFields;",
      "info" : "FieldDeclaration[7781-7831]:FieldDeclaration[7818-7868]"
    }, {
      "left" : "Adapter(ObjectConstructor<T> constructor, Map<String, BoundField> boundFields)",
      "right" : "Adapter(ObjectConstructor<T> constructor, Map<String, BoundField> boundFields)",
      "info" : "MethodDeclaration[7837-7999]:MethodDeclaration[7874-8036]"
    }, {
      "left" : "public T read(JsonReader in) throws IOException",
      "right" : "public T read(JsonReader in) throws IOException",
      "info" : "MethodDeclaration[8005-8747]:MethodDeclaration[8042-8784]"
    }, {
      "left" : "public void write(JsonWriter out, T value) throws IOException",
      "right" : "public void write(JsonWriter out, T value) throws IOException",
      "info" : "MethodDeclaration[8753-9267]:MethodDeclaration[8790-9304]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2131-2272]:Block[2131-2272]"
    }, {
      "left" : "this.constructorConstructor = constructorConstructor;",
      "right" : "this.constructorConstructor = constructorConstructor;",
      "info" : "ExpressionStatement[2137-2190]:ExpressionStatement[2137-2190]"
    }, {
      "left" : "this.fieldNamingPolicy = fieldNamingPolicy;",
      "right" : "this.fieldNamingPolicy = fieldNamingPolicy;",
      "info" : "ExpressionStatement[2195-2238]:ExpressionStatement[2195-2238]"
    }, {
      "left" : "this.excluder = excluder;",
      "right" : "this.excluder = excluder;",
      "info" : "ExpressionStatement[2243-2268]:ExpressionStatement[2243-2268]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2332-2386]:Block[2332-2386]"
    }, {
      "left" : "return excludeField(f, serialize, excluder);",
      "right" : "return excludeField(f, serialize, excluder);",
      "info" : "ReturnStatement[2338-2382]:ReturnStatement[2338-2382]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2465-2569]:Block[2465-2569]"
    }, {
      "left" : "return !excluder.excludeClass(f.getType(), serialize) && !excluder.excludeField(f, serialize);",
      "right" : "return !excluder.excludeClass(f.getType(), serialize) && !excluder.excludeField(f, serialize);",
      "info" : "ReturnStatement[2471-2565]:ReturnStatement[2471-2565]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2663-3289]:Block[2663-3289]"
    }, {
      "left" : "SerializedName annotation = f.getAnnotation(SerializedName.class);",
      "right" : "SerializedName annotation = f.getAnnotation(SerializedName.class);",
      "info" : "VariableDeclarationStatement[2669-2735]:VariableDeclarationStatement[2669-2735]"
    }, {
      "left" : "if (annotation == null)",
      "right" : "if (annotation == null)",
      "info" : "IfStatement[2740-2873]:IfStatement[2740-2873]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2764-2873]:Block[2764-2873]"
    }, {
      "left" : "String name = fieldNamingPolicy.translateName(f);",
      "right" : "String name = fieldNamingPolicy.translateName(f);",
      "info" : "VariableDeclarationStatement[2772-2821]:VariableDeclarationStatement[2772-2821]"
    }, {
      "left" : "return Collections.singletonList(name);",
      "right" : "return Collections.singletonList(name);",
      "info" : "ReturnStatement[2828-2867]:ReturnStatement[2828-2867]"
    }, {
      "left" : "String serializedName = annotation.value();",
      "right" : "String serializedName = annotation.value();",
      "info" : "VariableDeclarationStatement[2879-2922]:VariableDeclarationStatement[2879-2922]"
    }, {
      "left" : "String[] alternates = annotation.alternate();",
      "right" : "String[] alternates = annotation.alternate();",
      "info" : "VariableDeclarationStatement[2927-2972]:VariableDeclarationStatement[2927-2972]"
    }, {
      "left" : "if (alternates.length == 0)",
      "right" : "if (alternates.length == 0)",
      "info" : "IfStatement[2977-3068]:IfStatement[2977-3068]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3005-3068]:Block[3005-3068]"
    }, {
      "left" : "return Collections.singletonList(serializedName);",
      "right" : "return Collections.singletonList(serializedName);",
      "info" : "ReturnStatement[3013-3062]:ReturnStatement[3013-3062]"
    }, {
      "left" : "List<String> fieldNames = new ArrayList<String>(alternates.length + 1);",
      "right" : "List<String> fieldNames = new ArrayList<String>(alternates.length + 1);",
      "info" : "VariableDeclarationStatement[3074-3145]:VariableDeclarationStatement[3074-3145]"
    }, {
      "left" : "fieldNames.add(serializedName);",
      "right" : "fieldNames.add(serializedName);",
      "info" : "ExpressionStatement[3150-3181]:ExpressionStatement[3150-3181]"
    }, {
      "left" : "for (String alternate : alternates)",
      "right" : "for (String alternate : alternates)",
      "info" : "EnhancedForStatement[3186-3262]:EnhancedForStatement[3186-3262]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3222-3262]:Block[3222-3262]"
    }, {
      "left" : "fieldNames.add(alternate);",
      "right" : "fieldNames.add(alternate);",
      "info" : "ExpressionStatement[3230-3256]:ExpressionStatement[3230-3256]"
    }, {
      "left" : "return fieldNames;",
      "right" : "return fieldNames;",
      "info" : "ReturnStatement[3267-3285]:ReturnStatement[3267-3285]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3372-3664]:Block[3372-3664]"
    }, {
      "left" : "Class<? super T> raw = type.getRawType();",
      "right" : "Class<? super T> raw = type.getRawType();",
      "info" : "VariableDeclarationStatement[3378-3419]:VariableDeclarationStatement[3378-3419]"
    }, {
      "left" : "if (!Object.class.isAssignableFrom(raw))",
      "right" : "if (!Object.class.isAssignableFrom(raw))",
      "info" : "IfStatement[3425-3513]:IfStatement[3425-3513]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3466-3513]:Block[3466-3513]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[3474-3486]:ReturnStatement[3474-3486]"
    }, {
      "left" : "ObjectConstructor<T> constructor = constructorConstructor.get(type);",
      "right" : "ObjectConstructor<T> constructor = constructorConstructor.get(type);",
      "info" : "VariableDeclarationStatement[3519-3587]:VariableDeclarationStatement[3519-3587]"
    }, {
      "left" : "return new Adapter<T>(constructor, getBoundFields(gson, type, raw));",
      "right" : "return new Adapter<T>(constructor, getBoundFields(gson, type, raw));",
      "info" : "ReturnStatement[3592-3660]:ReturnStatement[3592-3660]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3874-5482]:Block[3874-5519]"
    }, {
      "left" : "final boolean isPrimitive = Primitives.isPrimitive(fieldType.getRawType());",
      "right" : "final boolean isPrimitive = Primitives.isPrimitive(fieldType.getRawType());",
      "info" : "VariableDeclarationStatement[3880-3955]:VariableDeclarationStatement[3880-3955]"
    }, {
      "left" : "JsonAdapter annotation = field.getAnnotation(JsonAdapter.class);",
      "right" : "JsonAdapter annotation = field.getAnnotation(JsonAdapter.class);",
      "info" : "VariableDeclarationStatement[4022-4086]:VariableDeclarationStatement[4022-4086]"
    }, {
      "left" : "TypeAdapter<?> mapped = null;",
      "right" : "TypeAdapter<?> mapped = null;",
      "info" : "VariableDeclarationStatement[4091-4120]:VariableDeclarationStatement[4091-4120]"
    }, {
      "left" : "if (annotation != null)",
      "right" : "if (annotation != null)",
      "info" : "IfStatement[4125-4243]:IfStatement[4125-4243]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4149-4243]:Block[4149-4243]"
    }, {
      "left" : "mapped = getTypeAdapter(constructorConstructor, context, fieldType, annotation);",
      "right" : "mapped = getTypeAdapter(constructorConstructor, context, fieldType, annotation);",
      "info" : "ExpressionStatement[4157-4237]:ExpressionStatement[4157-4237]"
    }, {
      "left" : "final boolean jsonAdapterPresent = mapped != null;",
      "right" : "final boolean jsonAdapterPresent = mapped != null;",
      "info" : "VariableDeclarationStatement[4248-4298]:VariableDeclarationStatement[4248-4298]"
    }, {
      "left" : "if (mapped == null)",
      "right" : "if (mapped == null)",
      "info" : "IfStatement[4303-4362]:IfStatement[4303-4362]"
    }, {
      "left" : "mapped = context.getAdapter(fieldType);",
      "right" : "mapped = context.getAdapter(fieldType);",
      "info" : "ExpressionStatement[4323-4362]:ExpressionStatement[4323-4362]"
    }, {
      "left" : "final TypeAdapter<?> typeAdapter = mapped;",
      "right" : "final TypeAdapter<?> typeAdapter = mapped;",
      "info" : "VariableDeclarationStatement[4368-4410]:VariableDeclarationStatement[4368-4410]"
    }, {
      "left" : "return new ReflectiveTypeAdapterFactory.BoundField(name, serialize, deserialize) {\n      @SuppressWarnings({\"unchecked\", \"rawtypes\"}) // the type adapter and field type always agree\n      @Override void write(JsonWriter writer, Object value)\n          throws IOException, IllegalAccessException {\n        Object fieldValue = field.get(value);\n        TypeAdapter t =\n          new TypeAdapterRuntimeTypeWrapper(context, typeAdapter, fieldType.getType());\n        t.write(writer, fieldValue);\n      }\n      @Override void read(JsonReader reader, Object value)\n          throws IOException, IllegalAccessException {\n        Object fieldValue = typeAdapter.read(reader);\n        if (fieldValue != null || !isPrimitive) {\n          field.set(value, fieldValue);\n        }\n      }\n      @Override public boolean writeField(Object value) throws IOException, IllegalAccessException {\n        if (!serialized) return false;\n        Object fieldValue = field.get(value);\n        return fieldValue != value; // avoid recursion for example for Throwable.cause\n      }\n    };",
      "right" : "return new ReflectiveTypeAdapterFactory.BoundField(name, serialize, deserialize) {\n      @SuppressWarnings({\"unchecked\", \"rawtypes\"}) // the type adapter and field type always agree\n      @Override void write(JsonWriter writer, Object value)\n          throws IOException, IllegalAccessException {\n        Object fieldValue = field.get(value);\n        TypeAdapter t = jsonAdapterPresent ? typeAdapter\n            : new TypeAdapterRuntimeTypeWrapper(context, typeAdapter, fieldType.getType());\n        t.write(writer, fieldValue);\n      }\n      @Override void read(JsonReader reader, Object value)\n          throws IOException, IllegalAccessException {\n        Object fieldValue = typeAdapter.read(reader);\n        if (fieldValue != null || !isPrimitive) {\n          field.set(value, fieldValue);\n        }\n      }\n      @Override public boolean writeField(Object value) throws IOException, IllegalAccessException {\n        if (!serialized) return false;\n        Object fieldValue = field.get(value);\n        return fieldValue != value; // avoid recursion for example for Throwable.cause\n      }\n    };",
      "info" : "ReturnStatement[4415-5478]:ReturnStatement[4415-5515]"
    }, {
      "left" : "Object fieldValue = field.get(value);",
      "right" : "Object fieldValue = field.get(value);",
      "info" : "VariableDeclarationStatement[4720-4757]:VariableDeclarationStatement[4720-4757]"
    }, {
      "left" : "TypeAdapter t =\n          new TypeAdapterRuntimeTypeWrapper(context, typeAdapter, fieldType.getType());",
      "right" : "TypeAdapter t = jsonAdapterPresent ? typeAdapter\n            : new TypeAdapterRuntimeTypeWrapper(context, typeAdapter, fieldType.getType());",
      "info" : "VariableDeclarationStatement[4766-4869]:VariableDeclarationStatement[4766-4906]"
    }, {
      "left" : "t.write(writer, fieldValue);",
      "right" : "t.write(writer, fieldValue);",
      "info" : "ExpressionStatement[4878-4906]:ExpressionStatement[4915-4943]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5027-5190]:Block[5064-5227]"
    }, {
      "left" : "Object fieldValue = typeAdapter.read(reader);",
      "right" : "Object fieldValue = typeAdapter.read(reader);",
      "info" : "VariableDeclarationStatement[5037-5082]:VariableDeclarationStatement[5074-5119]"
    }, {
      "left" : "if (fieldValue != null || !isPrimitive)",
      "right" : "if (fieldValue != null || !isPrimitive)",
      "info" : "IfStatement[5091-5182]:IfStatement[5128-5219]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5131-5182]:Block[5168-5219]"
    }, {
      "left" : "field.set(value, fieldValue);",
      "right" : "field.set(value, fieldValue);",
      "info" : "ExpressionStatement[5143-5172]:ExpressionStatement[5180-5209]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5290-5471]:Block[5327-5508]"
    }, {
      "left" : "if (!serialized)",
      "right" : "if (!serialized)",
      "info" : "IfStatement[5300-5330]:IfStatement[5337-5367]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[5317-5330]:ReturnStatement[5354-5367]"
    }, {
      "left" : "Object fieldValue = field.get(value);",
      "right" : "Object fieldValue = field.get(value);",
      "info" : "VariableDeclarationStatement[5339-5376]:VariableDeclarationStatement[5376-5413]"
    }, {
      "left" : "return fieldValue != value;",
      "right" : "return fieldValue != value;",
      "info" : "ReturnStatement[5385-5412]:ReturnStatement[5422-5449]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5580-7052]:Block[5617-7089]"
    }, {
      "left" : "Map<String, BoundField> result = new LinkedHashMap<String, BoundField>();",
      "right" : "Map<String, BoundField> result = new LinkedHashMap<String, BoundField>();",
      "info" : "VariableDeclarationStatement[5586-5659]:VariableDeclarationStatement[5623-5696]"
    }, {
      "left" : "if (raw.isInterface())",
      "right" : "if (raw.isInterface())",
      "info" : "IfStatement[5664-5715]:IfStatement[5701-5752]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5687-5715]:Block[5724-5752]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[5695-5709]:ReturnStatement[5732-5746]"
    }, {
      "left" : "Type declaredType = type.getType();",
      "right" : "Type declaredType = type.getType();",
      "info" : "VariableDeclarationStatement[5721-5756]:VariableDeclarationStatement[5758-5793]"
    }, {
      "left" : "while (raw != Object.class)",
      "right" : "while (raw != Object.class)",
      "info" : "WhileStatement[5761-7029]:WhileStatement[5798-7066]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5789-7029]:Block[5826-7066]"
    }, {
      "left" : "Field[] fields = raw.getDeclaredFields();",
      "right" : "Field[] fields = raw.getDeclaredFields();",
      "info" : "VariableDeclarationStatement[5797-5838]:VariableDeclarationStatement[5834-5875]"
    }, {
      "left" : "for (Field field : fields)",
      "right" : "for (Field field : fields)",
      "info" : "EnhancedForStatement[5845-6894]:EnhancedForStatement[5882-6931]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5872-6894]:Block[5909-6931]"
    }, {
      "left" : "boolean serialize = excludeField(field, true);",
      "right" : "boolean serialize = excludeField(field, true);",
      "info" : "VariableDeclarationStatement[5882-5928]:VariableDeclarationStatement[5919-5965]"
    }, {
      "left" : "boolean deserialize = excludeField(field, false);",
      "right" : "boolean deserialize = excludeField(field, false);",
      "info" : "VariableDeclarationStatement[5937-5986]:VariableDeclarationStatement[5974-6023]"
    }, {
      "left" : "if (!serialize && !deserialize)",
      "right" : "if (!serialize && !deserialize)",
      "info" : "IfStatement[5995-6058]:IfStatement[6032-6095]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6027-6058]:Block[6064-6095]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[6039-6048]:ContinueStatement[6076-6085]"
    }, {
      "left" : "field.setAccessible(true);",
      "right" : "field.setAccessible(true);",
      "info" : "ExpressionStatement[6067-6093]:ExpressionStatement[6104-6130]"
    }, {
      "left" : "Type fieldType = $Gson$Types.resolve(type.getType(), raw, field.getGenericType());",
      "right" : "Type fieldType = $Gson$Types.resolve(type.getType(), raw, field.getGenericType());",
      "info" : "VariableDeclarationStatement[6102-6184]:VariableDeclarationStatement[6139-6221]"
    }, {
      "left" : "List<String> fieldNames = getFieldNames(field);",
      "right" : "List<String> fieldNames = getFieldNames(field);",
      "info" : "VariableDeclarationStatement[6193-6240]:VariableDeclarationStatement[6230-6277]"
    }, {
      "left" : "BoundField previous = null;",
      "right" : "BoundField previous = null;",
      "info" : "VariableDeclarationStatement[6249-6276]:VariableDeclarationStatement[6286-6313]"
    }, {
      "left" : "for (int i = 0; i < fieldNames.size(); ++i)",
      "right" : "for (int i = 0; i < fieldNames.size(); ++i)",
      "info" : "ForStatement[6285-6712]:ForStatement[6322-6749]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6329-6712]:Block[6366-6749]"
    }, {
      "left" : "String name = fieldNames.get(i);",
      "right" : "String name = fieldNames.get(i);",
      "info" : "VariableDeclarationStatement[6341-6373]:VariableDeclarationStatement[6378-6410]"
    }, {
      "left" : "if (i != 0)",
      "right" : "if (i != 0)",
      "info" : "IfStatement[6384-6414]:IfStatement[6421-6451]"
    }, {
      "left" : "serialize = false;",
      "right" : "serialize = false;",
      "info" : "ExpressionStatement[6396-6414]:ExpressionStatement[6433-6451]"
    }, {
      "left" : "BoundField boundField = createBoundField(context, field, name,\n              TypeToken.get(fieldType), serialize, deserialize);",
      "right" : "BoundField boundField = createBoundField(context, field, name,\n              TypeToken.get(fieldType), serialize, deserialize);",
      "info" : "VariableDeclarationStatement[6460-6587]:VariableDeclarationStatement[6497-6624]"
    }, {
      "left" : "BoundField replaced = result.put(name, boundField);",
      "right" : "BoundField replaced = result.put(name, boundField);",
      "info" : "VariableDeclarationStatement[6598-6649]:VariableDeclarationStatement[6635-6686]"
    }, {
      "left" : "if (previous == null)",
      "right" : "if (previous == null)",
      "info" : "IfStatement[6660-6702]:IfStatement[6697-6739]"
    }, {
      "left" : "previous = replaced;",
      "right" : "previous = replaced;",
      "info" : "ExpressionStatement[6682-6702]:ExpressionStatement[6719-6739]"
    }, {
      "left" : "if (previous != null)",
      "right" : "if (previous != null)",
      "info" : "IfStatement[6721-6886]:IfStatement[6758-6923]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6743-6886]:Block[6780-6923]"
    }, {
      "left" : "throw new IllegalArgumentException(declaredType\n              + \" declares multiple JSON fields named \" + previous.name);",
      "right" : "throw new IllegalArgumentException(declaredType\n              + \" declares multiple JSON fields named \" + previous.name);",
      "info" : "ThrowStatement[6755-6876]:ThrowStatement[6792-6913]"
    }, {
      "left" : "type = TypeToken.get($Gson$Types.resolve(type.getType(), raw, raw.getGenericSuperclass()));",
      "right" : "type = TypeToken.get($Gson$Types.resolve(type.getType(), raw, raw.getGenericSuperclass()));",
      "info" : "ExpressionStatement[6901-6992]:ExpressionStatement[6938-7029]"
    }, {
      "left" : "raw = type.getRawType();",
      "right" : "raw = type.getRawType();",
      "info" : "ExpressionStatement[6999-7023]:ExpressionStatement[7036-7060]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[7034-7048]:ReturnStatement[7071-7085]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7257-7364]:Block[7294-7401]"
    }, {
      "left" : "this.name = name;",
      "right" : "this.name = name;",
      "info" : "ExpressionStatement[7265-7282]:ExpressionStatement[7302-7319]"
    }, {
      "left" : "this.serialized = serialized;",
      "right" : "this.serialized = serialized;",
      "info" : "ExpressionStatement[7289-7318]:ExpressionStatement[7326-7355]"
    }, {
      "left" : "this.deserialized = deserialized;",
      "right" : "this.deserialized = deserialized;",
      "info" : "ExpressionStatement[7325-7358]:ExpressionStatement[7362-7395]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7916-7999]:Block[7953-8036]"
    }, {
      "left" : "this.constructor = constructor;",
      "right" : "this.constructor = constructor;",
      "info" : "ExpressionStatement[7924-7955]:ExpressionStatement[7961-7992]"
    }, {
      "left" : "this.boundFields = boundFields;",
      "right" : "this.boundFields = boundFields;",
      "info" : "ExpressionStatement[7962-7993]:ExpressionStatement[7999-8030]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8063-8747]:Block[8100-8784]"
    }, {
      "left" : "if (in.peek() == JsonToken.NULL)",
      "right" : "if (in.peek() == JsonToken.NULL)",
      "info" : "IfStatement[8071-8157]:IfStatement[8108-8194]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8104-8157]:Block[8141-8194]"
    }, {
      "left" : "in.nextNull();",
      "right" : "in.nextNull();",
      "info" : "ExpressionStatement[8114-8128]:ExpressionStatement[8151-8165]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[8137-8149]:ReturnStatement[8174-8186]"
    }, {
      "left" : "T instance = constructor.construct();",
      "right" : "T instance = constructor.construct();",
      "info" : "VariableDeclarationStatement[8165-8202]:VariableDeclarationStatement[8202-8239]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[8210-8696]:TryStatement[8247-8733]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8214-8532]:Block[8251-8569]"
    }, {
      "left" : "in.beginObject();",
      "right" : "in.beginObject();",
      "info" : "ExpressionStatement[8224-8241]:ExpressionStatement[8261-8278]"
    }, {
      "left" : "while (in.hasNext())",
      "right" : "while (in.hasNext())",
      "info" : "WhileStatement[8250-8524]:WhileStatement[8287-8561]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8271-8524]:Block[8308-8561]"
    }, {
      "left" : "String name = in.nextName();",
      "right" : "String name = in.nextName();",
      "info" : "VariableDeclarationStatement[8283-8311]:VariableDeclarationStatement[8320-8348]"
    }, {
      "left" : "BoundField field = boundFields.get(name);",
      "right" : "BoundField field = boundFields.get(name);",
      "info" : "VariableDeclarationStatement[8322-8363]:VariableDeclarationStatement[8359-8400]"
    }, {
      "left" : "if (field == null || !field.deserialized)",
      "right" : "if (field == null || !field.deserialized)",
      "info" : "IfStatement[8374-8514]:IfStatement[8411-8551]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8416-8457]:Block[8453-8494]"
    }, {
      "left" : "in.skipValue();",
      "right" : "in.skipValue();",
      "info" : "ExpressionStatement[8430-8445]:ExpressionStatement[8467-8482]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8463-8514]:Block[8500-8551]"
    }, {
      "left" : "field.read(in, instance);",
      "right" : "field.read(in, instance);",
      "info" : "ExpressionStatement[8477-8502]:ExpressionStatement[8514-8539]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8565-8616]:Block[8602-8653]"
    }, {
      "left" : "throw new JsonSyntaxException(e);",
      "right" : "throw new JsonSyntaxException(e);",
      "info" : "ThrowStatement[8575-8608]:ThrowStatement[8612-8645]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8650-8696]:Block[8687-8733]"
    }, {
      "left" : "throw new AssertionError(e);",
      "right" : "throw new AssertionError(e);",
      "info" : "ThrowStatement[8660-8688]:ThrowStatement[8697-8725]"
    }, {
      "left" : "in.endObject();",
      "right" : "in.endObject();",
      "info" : "ExpressionStatement[8703-8718]:ExpressionStatement[8740-8755]"
    }, {
      "left" : "return instance;",
      "right" : "return instance;",
      "info" : "ReturnStatement[8725-8741]:ReturnStatement[8762-8778]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8825-9267]:Block[8862-9304]"
    }, {
      "left" : "if (value == null)",
      "right" : "if (value == null)",
      "info" : "IfStatement[8833-8902]:IfStatement[8870-8939]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8852-8902]:Block[8889-8939]"
    }, {
      "left" : "out.nullValue();",
      "right" : "out.nullValue();",
      "info" : "ExpressionStatement[8862-8878]:ExpressionStatement[8899-8915]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[8887-8894]:ReturnStatement[8924-8931]"
    }, {
      "left" : "out.beginObject();",
      "right" : "out.beginObject();",
      "info" : "ExpressionStatement[8910-8928]:ExpressionStatement[8947-8965]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[8935-9238]:TryStatement[8972-9275]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8939-9158]:Block[8976-9195]"
    }, {
      "left" : "for (BoundField boundField : boundFields.values())",
      "right" : "for (BoundField boundField : boundFields.values())",
      "info" : "EnhancedForStatement[8949-9150]:EnhancedForStatement[8986-9187]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9000-9150]:Block[9037-9187]"
    }, {
      "left" : "if (boundField.writeField(value))",
      "right" : "if (boundField.writeField(value))",
      "info" : "IfStatement[9012-9140]:IfStatement[9049-9177]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9046-9140]:Block[9083-9177]"
    }, {
      "left" : "out.name(boundField.name);",
      "right" : "out.name(boundField.name);",
      "info" : "ExpressionStatement[9060-9086]:ExpressionStatement[9097-9123]"
    }, {
      "left" : "boundField.write(out, value);",
      "right" : "boundField.write(out, value);",
      "info" : "ExpressionStatement[9099-9128]:ExpressionStatement[9136-9165]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9192-9238]:Block[9229-9275]"
    }, {
      "left" : "throw new AssertionError(e);",
      "right" : "throw new AssertionError(e);",
      "info" : "ThrowStatement[9202-9230]:ThrowStatement[9239-9267]"
    }, {
      "left" : "out.endObject();",
      "right" : "out.endObject();",
      "info" : "ExpressionStatement[9245-9261]:ExpressionStatement[9282-9298]"
    } ]
  },
  "interFileMappings" : { }
}