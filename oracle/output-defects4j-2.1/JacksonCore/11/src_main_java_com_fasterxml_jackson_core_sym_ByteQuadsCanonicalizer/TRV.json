{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "private static final int DEFAULT_T_SIZE = 64;",
      "right" : "private static final int DEFAULT_T_SIZE = 64;",
      "info" : "FieldDeclaration[600-946]:FieldDeclaration[600-946]"
    }, {
      "left" : "private static final int MAX_T_SIZE = 0x10000;",
      "right" : "private static final int MAX_T_SIZE = 0x10000;",
      "info" : "FieldDeclaration[1005-1255]:FieldDeclaration[1005-1255]"
    }, {
      "left" : "final static int MIN_HASH_SIZE = 16;",
      "right" : "final static int MIN_HASH_SIZE = 16;",
      "info" : "FieldDeclaration[1296-1426]:FieldDeclaration[1296-1426]"
    }, {
      "left" : "final static int MAX_ENTRIES_FOR_REUSE = 6000;",
      "right" : "final static int MAX_ENTRIES_FOR_REUSE = 6000;",
      "info" : "FieldDeclaration[1436-1790]:FieldDeclaration[1436-1790]"
    }, {
      "left" : "final protected ByteQuadsCanonicalizer _parent;",
      "right" : "final protected ByteQuadsCanonicalizer _parent;",
      "info" : "FieldDeclaration[1989-2180]:FieldDeclaration[1989-2180]"
    }, {
      "left" : "final protected AtomicReference<TableInfo> _tableInfo;",
      "right" : "final protected AtomicReference<TableInfo> _tableInfo;",
      "info" : "FieldDeclaration[2186-2494]:FieldDeclaration[2186-2494]"
    }, {
      "left" : "final private int _seed;",
      "right" : "final private int _seed;",
      "info" : "FieldDeclaration[2504-2814]:FieldDeclaration[2504-2814]"
    }, {
      "left" : "protected boolean _intern;",
      "right" : "protected boolean _intern;",
      "info" : "FieldDeclaration[2989-3237]:FieldDeclaration[2989-3237]"
    }, {
      "left" : "protected final boolean _failOnDoS;",
      "right" : "protected final boolean _failOnDoS;",
      "info" : "FieldDeclaration[3243-3470]:FieldDeclaration[3243-3470]"
    }, {
      "left" : "protected int[] _hashArea;",
      "right" : "protected int[] _hashArea;",
      "info" : "FieldDeclaration[3658-3946]:FieldDeclaration[3658-3946]"
    }, {
      "left" : "protected int _hashSize;",
      "right" : "protected int _hashSize;",
      "info" : "FieldDeclaration[3952-4267]:FieldDeclaration[3952-4267]"
    }, {
      "left" : "protected int _secondaryStart;",
      "right" : "protected int _secondaryStart;",
      "info" : "FieldDeclaration[4273-4389]:FieldDeclaration[4273-4389]"
    }, {
      "left" : "protected int _tertiaryStart;",
      "right" : "protected int _tertiaryStart;",
      "info" : "FieldDeclaration[4395-4509]:FieldDeclaration[4395-4509]"
    }, {
      "left" : "protected int _tertiaryShift;",
      "right" : "protected int _tertiaryShift;",
      "info" : "FieldDeclaration[4519-4949]:FieldDeclaration[4519-4949]"
    }, {
      "left" : "protected int _count;",
      "right" : "protected int _count;",
      "info" : "FieldDeclaration[4955-5072]:FieldDeclaration[4955-5072]"
    }, {
      "left" : "protected String[] _names;",
      "right" : "protected String[] _names;",
      "info" : "FieldDeclaration[5078-5329]:FieldDeclaration[5078-5329]"
    }, {
      "left" : "protected int _spilloverEnd;",
      "right" : "protected int _spilloverEnd;",
      "info" : "FieldDeclaration[5521-5759]:FieldDeclaration[5521-5759]"
    }, {
      "left" : "protected int _longNameOffset;",
      "right" : "protected int _longNameOffset;",
      "info" : "FieldDeclaration[5765-6170]:FieldDeclaration[5765-6170]"
    }, {
      "left" : "private transient boolean _needRehash;",
      "right" : "private transient boolean _needRehash;",
      "info" : "FieldDeclaration[6176-6368]:FieldDeclaration[6176-6368]"
    }, {
      "left" : "private boolean _hashShared;",
      "right" : "private boolean _hashShared;",
      "info" : "FieldDeclaration[6619-7177]:FieldDeclaration[6619-7177]"
    }, {
      "left" : "private ByteQuadsCanonicalizer(int sz, boolean intern, int seed, boolean failOnDoS)",
      "right" : "private ByteQuadsCanonicalizer(int sz, boolean intern, int seed, boolean failOnDoS)",
      "info" : "MethodDeclaration[7359-8604]:MethodDeclaration[7359-8604]"
    }, {
      "left" : "private ByteQuadsCanonicalizer(ByteQuadsCanonicalizer parent, boolean intern,\n            int seed, boolean failOnDoS, TableInfo state)",
      "right" : "private ByteQuadsCanonicalizer(ByteQuadsCanonicalizer parent, boolean intern,\n            int seed, boolean failOnDoS, TableInfo state)",
      "info" : "MethodDeclaration[8610-9582]:MethodDeclaration[8610-9582]"
    }, {
      "left" : "public static ByteQuadsCanonicalizer createRoot()",
      "right" : "public static ByteQuadsCanonicalizer createRoot()",
      "info" : "MethodDeclaration[9780-10280]:MethodDeclaration[9780-10280]"
    }, {
      "left" : "protected static ByteQuadsCanonicalizer createRoot(int seed)",
      "right" : "protected static ByteQuadsCanonicalizer createRoot(int seed)",
      "info" : "MethodDeclaration[10286-10561]:MethodDeclaration[10286-10561]"
    }, {
      "left" : "public ByteQuadsCanonicalizer makeChild(int flags)",
      "right" : "public ByteQuadsCanonicalizer makeChild(int flags)",
      "info" : "MethodDeclaration[10571-11000]:MethodDeclaration[10571-11000]"
    }, {
      "left" : "public void release()",
      "right" : "public void release()",
      "info" : "MethodDeclaration[11006-11707]:MethodDeclaration[11006-11707]"
    }, {
      "left" : "private void mergeChild(TableInfo childState)",
      "right" : "private void mergeChild(TableInfo childState)",
      "info" : "MethodDeclaration[11713-12640]:MethodDeclaration[11713-12640]"
    }, {
      "left" : "public int size()",
      "right" : "public int size()",
      "info" : "MethodDeclaration[12812-12994]:MethodDeclaration[12812-12994]"
    }, {
      "left" : "public int bucketCount()",
      "right" : "public int bucketCount()",
      "info" : "MethodDeclaration[13000-13121]:MethodDeclaration[13000-13121]"
    }, {
      "left" : "public boolean maybeDirty()",
      "right" : "public boolean maybeDirty()",
      "info" : "MethodDeclaration[13127-13392]:MethodDeclaration[13127-13392]"
    }, {
      "left" : "public int hashSeed()",
      "right" : "public int hashSeed()",
      "info" : "MethodDeclaration[13398-13437]:MethodDeclaration[13398-13437]"
    }, {
      "left" : "public int primaryCount()",
      "right" : "public int primaryCount()",
      "info" : "MethodDeclaration[13447-13898]:MethodDeclaration[13447-13898]"
    }, {
      "left" : "public int secondaryCount()",
      "right" : "public int secondaryCount()",
      "info" : "MethodDeclaration[13904-14301]:MethodDeclaration[13904-14301]"
    }, {
      "left" : "public int tertiaryCount()",
      "right" : "public int tertiaryCount()",
      "info" : "MethodDeclaration[14307-14744]:MethodDeclaration[14307-14744]"
    }, {
      "left" : "public int spilloverCount()",
      "right" : "public int spilloverCount()",
      "info" : "MethodDeclaration[14750-15048]:MethodDeclaration[14750-15048]"
    }, {
      "left" : "public int totalCount()",
      "right" : "public int totalCount()",
      "info" : "MethodDeclaration[15054-15307]:MethodDeclaration[15054-15307]"
    }, {
      "left" : "public String toString()",
      "right" : "public String toString()",
      "info" : "MethodDeclaration[15313-15776]:MethodDeclaration[15313-15776]"
    }, {
      "left" : "public String findName(int q1)",
      "right" : "public String findName(int q1)",
      "info" : "MethodDeclaration[15963-16919]:MethodDeclaration[15963-16919]"
    }, {
      "left" : "public String findName(int q1, int q2)",
      "right" : "public String findName(int q1, int q2)",
      "info" : "MethodDeclaration[16925-17832]:MethodDeclaration[16925-17832]"
    }, {
      "left" : "public String findName(int q1, int q2, int q3)",
      "right" : "public String findName(int q1, int q2, int q3)",
      "info" : "MethodDeclaration[17838-18820]:MethodDeclaration[17838-18820]"
    }, {
      "left" : "public String findName(int[] q, int qlen)",
      "right" : "public String findName(int[] q, int qlen)",
      "info" : "MethodDeclaration[18826-20412]:MethodDeclaration[18826-20412]"
    }, {
      "left" : "private final int _calcOffset(int hash)",
      "right" : "private final int _calcOffset(int hash)",
      "info" : "MethodDeclaration[20422-20748]:MethodDeclaration[20422-20748]"
    }, {
      "left" : "private String _findSecondary(int origOffset, int q1)",
      "right" : "private String _findSecondary(int origOffset, int q1)",
      "info" : "MethodDeclaration[20934-22273]:MethodDeclaration[20934-22273]"
    }, {
      "left" : "private String _findSecondary(int origOffset, int q1, int q2)",
      "right" : "private String _findSecondary(int origOffset, int q1, int q2)",
      "info" : "MethodDeclaration[22279-23159]:MethodDeclaration[22279-23159]"
    }, {
      "left" : "private String _findSecondary(int origOffset, int q1, int q2, int q3)",
      "right" : "private String _findSecondary(int origOffset, int q1, int q2, int q3)",
      "info" : "MethodDeclaration[23165-24133]:MethodDeclaration[23165-24133]"
    }, {
      "left" : "private String _findSecondary(int origOffset, int hash, int[] q, int qlen)",
      "right" : "private String _findSecondary(int origOffset, int hash, int[] q, int qlen)",
      "info" : "MethodDeclaration[24139-25162]:MethodDeclaration[24139-25162]"
    }, {
      "left" : "private boolean _verifyLongName(int[] q, int qlen, int spillOffset)",
      "right" : "private boolean _verifyLongName(int[] q, int qlen, int spillOffset)",
      "info" : "MethodDeclaration[25172-26149]:MethodDeclaration[25172-26149]"
    }, {
      "left" : "private boolean _verifyLongName2(int[] q, int qlen, int spillOffset)",
      "right" : "private boolean _verifyLongName2(int[] q, int qlen, int spillOffset)",
      "info" : "MethodDeclaration[26155-26417]:MethodDeclaration[26155-26417]"
    }, {
      "left" : "public String addName(String name, int q1)",
      "right" : "public String addName(String name, int q1)",
      "info" : "MethodDeclaration[26588-26977]:MethodDeclaration[26588-26977]"
    }, {
      "left" : "public String addName(String name, int q1, int q2)",
      "right" : "public String addName(String name, int q1, int q2)",
      "info" : "MethodDeclaration[26983-27470]:MethodDeclaration[26983-27470]"
    }, {
      "left" : "public String addName(String name, int q1, int q2, int q3)",
      "right" : "public String addName(String name, int q1, int q2, int q3)",
      "info" : "MethodDeclaration[27476-27957]:MethodDeclaration[27476-27957]"
    }, {
      "left" : "public String addName(String name, int[] q, int qlen)",
      "right" : "public String addName(String name, int[] q, int qlen)",
      "info" : "MethodDeclaration[27963-29459]:MethodDeclaration[27963-29459]"
    }, {
      "left" : "private void _verifyNeedForRehash()",
      "right" : "private void _verifyNeedForRehash()",
      "info" : "MethodDeclaration[29465-29864]:MethodDeclaration[29465-29864]"
    }, {
      "left" : "private int _findOffsetForAdd(int hash)",
      "right" : "private int _findOffsetForAdd(int hash)",
      "info" : "MethodDeclaration[30339-32660]:MethodDeclaration[30375-32696]"
    }, {
      "left" : "private int _appendLongName(int[] quads, int qlen)",
      "right" : "private int _appendLongName(int[] quads, int qlen)",
      "info" : "MethodDeclaration[32666-33445]:MethodDeclaration[32702-33481]"
    }, {
      "left" : "private final static int MULT = 33;",
      "right" : "private final static int MULT = 33;",
      "info" : "FieldDeclaration[34136-34171]:FieldDeclaration[34172-34207]"
    }, {
      "left" : "private final static int MULT2 = 65599;",
      "right" : "private final static int MULT2 = 65599;",
      "info" : "FieldDeclaration[34176-34215]:FieldDeclaration[34212-34251]"
    }, {
      "left" : "private final static int MULT3 = 31;",
      "right" : "private final static int MULT3 = 31;",
      "info" : "FieldDeclaration[34220-34256]:FieldDeclaration[34256-34292]"
    }, {
      "left" : "public int calcHash(int q1)",
      "right" : "public int calcHash(int q1)",
      "info" : "MethodDeclaration[34266-34858]:MethodDeclaration[34302-34894]"
    }, {
      "left" : "public int calcHash(int q1, int q2)",
      "right" : "public int calcHash(int q1, int q2)",
      "info" : "MethodDeclaration[34864-35416]:MethodDeclaration[34900-35452]"
    }, {
      "left" : "public int calcHash(int q1, int q2, int q3)",
      "right" : "public int calcHash(int q1, int q2, int q3)",
      "info" : "MethodDeclaration[35422-35914]:MethodDeclaration[35458-35950]"
    }, {
      "left" : "public int calcHash(int[] q, int qlen)",
      "right" : "public int calcHash(int[] q, int qlen)",
      "info" : "MethodDeclaration[35920-36818]:MethodDeclaration[35956-36854]"
    }, {
      "left" : "private void rehash()",
      "right" : "private void rehash()",
      "info" : "MethodDeclaration[36985-40155]:MethodDeclaration[37021-40191]"
    }, {
      "left" : "private void nukeSymbols(boolean fill)",
      "right" : "private void nukeSymbols(boolean fill)",
      "info" : "MethodDeclaration[40161-40675]:MethodDeclaration[40197-40711]"
    }, {
      "left" : "private final int _spilloverStart()",
      "right" : "private final int _spilloverStart()",
      "info" : "MethodDeclaration[40847-41155]:MethodDeclaration[40883-41191]"
    }, {
      "left" : "protected void _reportTooManyCollisions()",
      "right" : "protected void _reportTooManyCollisions()",
      "info" : "MethodDeclaration[41161-41775]:MethodDeclaration[41197-41811]"
    }, {
      "left" : "static int _calcTertiaryShift(int primarySlots)",
      "right" : "static int _calcTertiaryShift(int primarySlots)",
      "info" : "MethodDeclaration[41781-42376]:MethodDeclaration[41817-42412]"
    }, {
      "left" : "TableInfo",
      "right" : "TableInfo",
      "info" : "TypeDeclaration[42548-44464]:TypeDeclaration[42584-44500]"
    }, {
      "left" : "public final int size;",
      "right" : "public final int size;",
      "info" : "FieldDeclaration[42827-42849]:FieldDeclaration[42863-42885]"
    }, {
      "left" : "public final int count;",
      "right" : "public final int count;",
      "info" : "FieldDeclaration[42858-42881]:FieldDeclaration[42894-42917]"
    }, {
      "left" : "public final int tertiaryShift;",
      "right" : "public final int tertiaryShift;",
      "info" : "FieldDeclaration[42890-42921]:FieldDeclaration[42926-42957]"
    }, {
      "left" : "public final int[] mainHash;",
      "right" : "public final int[] mainHash;",
      "info" : "FieldDeclaration[42930-42958]:FieldDeclaration[42966-42994]"
    }, {
      "left" : "public final String[] names;",
      "right" : "public final String[] names;",
      "info" : "FieldDeclaration[42967-42995]:FieldDeclaration[43003-43031]"
    }, {
      "left" : "public final int spilloverEnd;",
      "right" : "public final int spilloverEnd;",
      "info" : "FieldDeclaration[43004-43034]:FieldDeclaration[43040-43070]"
    }, {
      "left" : "public final int longNameOffset;",
      "right" : "public final int longNameOffset;",
      "info" : "FieldDeclaration[43043-43075]:FieldDeclaration[43079-43111]"
    }, {
      "left" : "public TableInfo(int size, int count, int tertiaryShift, \n                int[] mainHash, String[] names, int spilloverEnd, int longNameOffset)",
      "right" : "public TableInfo(int size, int count, int tertiaryShift, \n                int[] mainHash, String[] names, int spilloverEnd, int longNameOffset)",
      "info" : "MethodDeclaration[43085-43524]:MethodDeclaration[43121-43560]"
    }, {
      "left" : "public TableInfo(ByteQuadsCanonicalizer src)",
      "right" : "public TableInfo(ByteQuadsCanonicalizer src)",
      "info" : "MethodDeclaration[43534-43878]:MethodDeclaration[43570-43914]"
    }, {
      "left" : "public static TableInfo createInitial(int sz)",
      "right" : "public static TableInfo createInitial(int sz)",
      "info" : "MethodDeclaration[43888-44458]:MethodDeclaration[43924-44494]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7878-8604]:Block[7878-8604]"
    }, {
      "left" : "_parent = null;",
      "right" : "_parent = null;",
      "info" : "ExpressionStatement[7888-7903]:ExpressionStatement[7888-7903]"
    }, {
      "left" : "_seed = seed;",
      "right" : "_seed = seed;",
      "info" : "ExpressionStatement[7912-7925]:ExpressionStatement[7912-7925]"
    }, {
      "left" : "_intern = intern;",
      "right" : "_intern = intern;",
      "info" : "ExpressionStatement[7934-7951]:ExpressionStatement[7934-7951]"
    }, {
      "left" : "_failOnDoS = failOnDoS;",
      "right" : "_failOnDoS = failOnDoS;",
      "info" : "ExpressionStatement[7960-7983]:ExpressionStatement[7960-7983]"
    }, {
      "left" : "if (sz < MIN_HASH_SIZE)",
      "right" : "if (sz < MIN_HASH_SIZE)",
      "info" : "IfStatement[8072-8516]:IfStatement[8072-8516]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8096-8139]:Block[8096-8139]"
    }, {
      "left" : "sz = MIN_HASH_SIZE;",
      "right" : "sz = MIN_HASH_SIZE;",
      "info" : "ExpressionStatement[8110-8129]:ExpressionStatement[8110-8129]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8145-8516]:Block[8145-8516]"
    }, {
      "left" : "if ((sz & (sz - 1)) != 0)",
      "right" : "if ((sz & (sz - 1)) != 0)",
      "info" : "IfStatement[8283-8506]:IfStatement[8283-8506]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8309-8506]:Block[8309-8506]"
    }, {
      "left" : "int curr = MIN_HASH_SIZE;",
      "right" : "int curr = MIN_HASH_SIZE;",
      "info" : "VariableDeclarationStatement[8352-8377]:VariableDeclarationStatement[8352-8377]"
    }, {
      "left" : "while (curr < sz)",
      "right" : "while (curr < sz)",
      "info" : "WhileStatement[8394-8465]:WhileStatement[8394-8465]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8412-8465]:Block[8412-8465]"
    }, {
      "left" : "curr += curr;",
      "right" : "curr += curr;",
      "info" : "ExpressionStatement[8434-8447]:ExpressionStatement[8434-8447]"
    }, {
      "left" : "sz = curr;",
      "right" : "sz = curr;",
      "info" : "ExpressionStatement[8482-8492]:ExpressionStatement[8482-8492]"
    }, {
      "left" : "_tableInfo = new AtomicReference<TableInfo>(TableInfo.createInitial(sz));",
      "right" : "_tableInfo = new AtomicReference<TableInfo>(TableInfo.createInitial(sz));",
      "info" : "ExpressionStatement[8525-8598]:ExpressionStatement[8525-8598]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8821-9582]:Block[8821-9582]"
    }, {
      "left" : "_parent = parent;",
      "right" : "_parent = parent;",
      "info" : "ExpressionStatement[8831-8848]:ExpressionStatement[8831-8848]"
    }, {
      "left" : "_seed = seed;",
      "right" : "_seed = seed;",
      "info" : "ExpressionStatement[8857-8870]:ExpressionStatement[8857-8870]"
    }, {
      "left" : "_intern = intern;",
      "right" : "_intern = intern;",
      "info" : "ExpressionStatement[8879-8896]:ExpressionStatement[8879-8896]"
    }, {
      "left" : "_failOnDoS = failOnDoS;",
      "right" : "_failOnDoS = failOnDoS;",
      "info" : "ExpressionStatement[8905-8928]:ExpressionStatement[8905-8928]"
    }, {
      "left" : "_tableInfo = null;",
      "right" : "_tableInfo = null;",
      "info" : "ExpressionStatement[8937-8955]:ExpressionStatement[8937-8955]"
    }, {
      "left" : "_count = state.count;",
      "right" : "_count = state.count;",
      "info" : "ExpressionStatement[9027-9048]:ExpressionStatement[9027-9048]"
    }, {
      "left" : "_hashSize = state.size;",
      "right" : "_hashSize = state.size;",
      "info" : "ExpressionStatement[9057-9080]:ExpressionStatement[9057-9080]"
    }, {
      "left" : "_secondaryStart = _hashSize << 2;",
      "right" : "_secondaryStart = _hashSize << 2;",
      "info" : "ExpressionStatement[9089-9122]:ExpressionStatement[9089-9122]"
    }, {
      "left" : "_tertiaryStart = _secondaryStart + (_secondaryStart >> 1);",
      "right" : "_tertiaryStart = _secondaryStart + (_secondaryStart >> 1);",
      "info" : "ExpressionStatement[9159-9217]:ExpressionStatement[9159-9217]"
    }, {
      "left" : "_tertiaryShift = state.tertiaryShift;",
      "right" : "_tertiaryShift = state.tertiaryShift;",
      "info" : "ExpressionStatement[9251-9288]:ExpressionStatement[9251-9288]"
    }, {
      "left" : "_hashArea = state.mainHash;",
      "right" : "_hashArea = state.mainHash;",
      "info" : "ExpressionStatement[9306-9333]:ExpressionStatement[9306-9333]"
    }, {
      "left" : "_names = state.names;",
      "right" : "_names = state.names;",
      "info" : "ExpressionStatement[9342-9363]:ExpressionStatement[9342-9363]"
    }, {
      "left" : "_spilloverEnd = state.spilloverEnd;",
      "right" : "_spilloverEnd = state.spilloverEnd;",
      "info" : "ExpressionStatement[9373-9408]:ExpressionStatement[9373-9408]"
    }, {
      "left" : "_longNameOffset = state.longNameOffset;",
      "right" : "_longNameOffset = state.longNameOffset;",
      "info" : "ExpressionStatement[9417-9456]:ExpressionStatement[9417-9456]"
    }, {
      "left" : "_needRehash = false;",
      "right" : "_needRehash = false;",
      "info" : "ExpressionStatement[9528-9548]:ExpressionStatement[9528-9548]"
    }, {
      "left" : "_hashShared = true;",
      "right" : "_hashShared = true;",
      "info" : "ExpressionStatement[9557-9576]:ExpressionStatement[9557-9576]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9947-10280]:Block[9947-10280]"
    }, {
      "left" : "long now = System.currentTimeMillis();",
      "right" : "long now = System.currentTimeMillis();",
      "info" : "VariableDeclarationStatement[10072-10110]:VariableDeclarationStatement[10072-10110]"
    }, {
      "left" : "int seed = (((int) now) + ((int) (now >>> 32))) | 1;",
      "right" : "int seed = (((int) now) + ((int) (now >>> 32))) | 1;",
      "info" : "VariableDeclarationStatement[10189-10241]:VariableDeclarationStatement[10189-10241]"
    }, {
      "left" : "return createRoot(seed);",
      "right" : "return createRoot(seed);",
      "info" : "ReturnStatement[10250-10274]:ReturnStatement[10250-10274]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10477-10561]:Block[10477-10561]"
    }, {
      "left" : "return new ByteQuadsCanonicalizer(DEFAULT_T_SIZE, true, seed, true);",
      "right" : "return new ByteQuadsCanonicalizer(DEFAULT_T_SIZE, true, seed, true);",
      "info" : "ReturnStatement[10487-10555]:ReturnStatement[10487-10555]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10731-11000]:Block[10731-11000]"
    }, {
      "left" : "return new ByteQuadsCanonicalizer(this,\n                JsonFactory.Feature.INTERN_FIELD_NAMES.enabledIn(flags),\n                _seed,\n                JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW.enabledIn(flags),\n                _tableInfo.get());",
      "right" : "return new ByteQuadsCanonicalizer(this,\n                JsonFactory.Feature.INTERN_FIELD_NAMES.enabledIn(flags),\n                _seed,\n                JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW.enabledIn(flags),\n                _tableInfo.get());",
      "info" : "ReturnStatement[10741-10994]:ReturnStatement[10741-10994]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11318-11707]:Block[11318-11707]"
    }, {
      "left" : "if (_parent != null && maybeDirty())",
      "right" : "if (_parent != null && maybeDirty())",
      "info" : "IfStatement[11391-11701]:IfStatement[11391-11701]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11428-11701]:Block[11428-11701]"
    }, {
      "left" : "_parent.mergeChild(new TableInfo(this));",
      "right" : "_parent.mergeChild(new TableInfo(this));",
      "info" : "ExpressionStatement[11442-11482]:ExpressionStatement[11442-11482]"
    }, {
      "left" : "_hashShared = true;",
      "right" : "_hashShared = true;",
      "info" : "ExpressionStatement[11672-11691]:ExpressionStatement[11672-11691]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11763-12640]:Block[11763-12640]"
    }, {
      "left" : "final int childCount = childState.count;",
      "right" : "final int childCount = childState.count;",
      "info" : "VariableDeclarationStatement[11773-11813]:VariableDeclarationStatement[11773-11813]"
    }, {
      "left" : "TableInfo currState = _tableInfo.get();",
      "right" : "TableInfo currState = _tableInfo.get();",
      "info" : "VariableDeclarationStatement[11822-11861]:VariableDeclarationStatement[11822-11861]"
    }, {
      "left" : "if (childCount == currState.count)",
      "right" : "if (childCount == currState.count)",
      "info" : "IfStatement[12029-12095]:IfStatement[12029-12095]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12064-12095]:Block[12064-12095]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[12078-12085]:ReturnStatement[12078-12085]"
    }, {
      "left" : "if (childCount > MAX_ENTRIES_FOR_REUSE)",
      "right" : "if (childCount > MAX_ENTRIES_FOR_REUSE)",
      "info" : "IfStatement[12404-12577]:IfStatement[12404-12577]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12444-12577]:Block[12444-12577]"
    }, {
      "left" : "childState = TableInfo.createInitial(DEFAULT_T_SIZE);",
      "right" : "childState = TableInfo.createInitial(DEFAULT_T_SIZE);",
      "info" : "ExpressionStatement[12514-12567]:ExpressionStatement[12514-12567]"
    }, {
      "left" : "_tableInfo.compareAndSet(currState, childState);",
      "right" : "_tableInfo.compareAndSet(currState, childState);",
      "info" : "ExpressionStatement[12586-12634]:ExpressionStatement[12586-12634]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12834-12994]:Block[12834-12994]"
    }, {
      "left" : "if (_tableInfo != null)",
      "right" : "if (_tableInfo != null)",
      "info" : "IfStatement[12844-12936]:IfStatement[12844-12936]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12868-12936]:Block[12868-12936]"
    }, {
      "left" : "return _tableInfo.get().count;",
      "right" : "return _tableInfo.get().count;",
      "info" : "ReturnStatement[12896-12926]:ReturnStatement[12896-12926]"
    }, {
      "left" : "return _count;",
      "right" : "return _count;",
      "info" : "ReturnStatement[12974-12988]:ReturnStatement[12974-12988]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13100-13121]:Block[13100-13121]"
    }, {
      "left" : "return _hashSize;",
      "right" : "return _hashSize;",
      "info" : "ReturnStatement[13102-13119]:ReturnStatement[13102-13119]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13368-13392]:Block[13368-13392]"
    }, {
      "left" : "return !_hashShared;",
      "right" : "return !_hashShared;",
      "info" : "ReturnStatement[13370-13390]:ReturnStatement[13370-13390]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13420-13437]:Block[13420-13437]"
    }, {
      "left" : "return _seed;",
      "right" : "return _seed;",
      "info" : "ReturnStatement[13422-13435]:ReturnStatement[13422-13435]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13674-13898]:Block[13674-13898]"
    }, {
      "left" : "int count = 0;",
      "right" : "int count = 0;",
      "info" : "VariableDeclarationStatement[13684-13698]:VariableDeclarationStatement[13684-13698]"
    }, {
      "left" : "for (int offset = 3, end = _secondaryStart; offset < end; offset += 4)",
      "right" : "for (int offset = 3, end = _secondaryStart; offset < end; offset += 4)",
      "info" : "ForStatement[13707-13870]:ForStatement[13707-13870]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13778-13870]:Block[13778-13870]"
    }, {
      "left" : "if (_hashArea[offset] != 0)",
      "right" : "if (_hashArea[offset] != 0)",
      "info" : "IfStatement[13792-13860]:IfStatement[13792-13860]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13820-13860]:Block[13820-13860]"
    }, {
      "left" : "++count;",
      "right" : "++count;",
      "info" : "ExpressionStatement[13838-13846]:ExpressionStatement[13838-13846]"
    }, {
      "left" : "return count;",
      "right" : "return count;",
      "info" : "ReturnStatement[13879-13892]:ReturnStatement[13879-13892]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14048-14301]:Block[14048-14301]"
    }, {
      "left" : "int count = 0;",
      "right" : "int count = 0;",
      "info" : "VariableDeclarationStatement[14058-14072]:VariableDeclarationStatement[14058-14072]"
    }, {
      "left" : "int offset = _secondaryStart + 3;",
      "right" : "int offset = _secondaryStart + 3;",
      "info" : "VariableDeclarationStatement[14081-14114]:VariableDeclarationStatement[14081-14114]"
    }, {
      "left" : "for (int end = _tertiaryStart; offset < end; offset += 4)",
      "right" : "for (int end = _tertiaryStart; offset < end; offset += 4)",
      "info" : "ForStatement[14123-14273]:ForStatement[14123-14273]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14181-14273]:Block[14181-14273]"
    }, {
      "left" : "if (_hashArea[offset] != 0)",
      "right" : "if (_hashArea[offset] != 0)",
      "info" : "IfStatement[14195-14263]:IfStatement[14195-14263]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14223-14263]:Block[14223-14263]"
    }, {
      "left" : "++count;",
      "right" : "++count;",
      "info" : "ExpressionStatement[14241-14249]:ExpressionStatement[14241-14249]"
    }, {
      "left" : "return count;",
      "right" : "return count;",
      "info" : "ReturnStatement[14282-14295]:ReturnStatement[14282-14295]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14449-14744]:Block[14449-14744]"
    }, {
      "left" : "int count = 0;",
      "right" : "int count = 0;",
      "info" : "VariableDeclarationStatement[14459-14473]:VariableDeclarationStatement[14459-14473]"
    }, {
      "left" : "int offset = _tertiaryStart + 3;",
      "right" : "int offset = _tertiaryStart + 3;",
      "info" : "VariableDeclarationStatement[14482-14514]:VariableDeclarationStatement[14482-14514]"
    }, {
      "left" : "for (int end = offset + _hashSize; offset < end; offset += 4)",
      "right" : "for (int end = offset + _hashSize; offset < end; offset += 4)",
      "info" : "ForStatement[14562-14716]:ForStatement[14562-14716]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14624-14716]:Block[14624-14716]"
    }, {
      "left" : "if (_hashArea[offset] != 0)",
      "right" : "if (_hashArea[offset] != 0)",
      "info" : "IfStatement[14638-14706]:IfStatement[14638-14706]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14666-14706]:Block[14666-14706]"
    }, {
      "left" : "++count;",
      "right" : "++count;",
      "info" : "ExpressionStatement[14684-14692]:ExpressionStatement[14684-14692]"
    }, {
      "left" : "return count;",
      "right" : "return count;",
      "info" : "ReturnStatement[14725-14738]:ReturnStatement[14725-14738]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14898-15048]:Block[14898-15048]"
    }, {
      "left" : "return (_spilloverEnd - _spilloverStart()) >> 2;",
      "right" : "return (_spilloverEnd - _spilloverStart()) >> 2;",
      "info" : "ReturnStatement[14994-15042]:ReturnStatement[14994-15042]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15082-15307]:Block[15082-15307]"
    }, {
      "left" : "int count = 0;",
      "right" : "int count = 0;",
      "info" : "VariableDeclarationStatement[15092-15106]:VariableDeclarationStatement[15092-15106]"
    }, {
      "left" : "for (int offset = 3, end = (_hashSize << 3); offset < end; offset += 4)",
      "right" : "for (int offset = 3, end = (_hashSize << 3); offset < end; offset += 4)",
      "info" : "ForStatement[15115-15279]:ForStatement[15115-15279]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15187-15279]:Block[15187-15279]"
    }, {
      "left" : "if (_hashArea[offset] != 0)",
      "right" : "if (_hashArea[offset] != 0)",
      "info" : "IfStatement[15201-15269]:IfStatement[15201-15269]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15229-15269]:Block[15229-15269]"
    }, {
      "left" : "++count;",
      "right" : "++count;",
      "info" : "ExpressionStatement[15247-15255]:ExpressionStatement[15247-15255]"
    }, {
      "left" : "return count;",
      "right" : "return count;",
      "info" : "ReturnStatement[15288-15301]:ReturnStatement[15288-15301]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15352-15776]:Block[15352-15776]"
    }, {
      "left" : "int pri = primaryCount();",
      "right" : "int pri = primaryCount();",
      "info" : "VariableDeclarationStatement[15362-15387]:VariableDeclarationStatement[15362-15387]"
    }, {
      "left" : "int sec = secondaryCount();",
      "right" : "int sec = secondaryCount();",
      "info" : "VariableDeclarationStatement[15396-15423]:VariableDeclarationStatement[15396-15423]"
    }, {
      "left" : "int tert = tertiaryCount();",
      "right" : "int tert = tertiaryCount();",
      "info" : "VariableDeclarationStatement[15432-15459]:VariableDeclarationStatement[15432-15459]"
    }, {
      "left" : "int spill = spilloverCount();",
      "right" : "int spill = spilloverCount();",
      "info" : "VariableDeclarationStatement[15468-15497]:VariableDeclarationStatement[15468-15497]"
    }, {
      "left" : "int total = totalCount();",
      "right" : "int total = totalCount();",
      "info" : "VariableDeclarationStatement[15506-15531]:VariableDeclarationStatement[15506-15531]"
    }, {
      "left" : "return String.format(\"[%s: size=%d, hashSize=%d, %d/%d/%d/%d pri/sec/ter/spill (=%s), total:%d]\",\n                getClass().getName(), _count, _hashSize,\n                pri, sec, tert, spill, total, (pri+sec+tert+spill), total);",
      "right" : "return String.format(\"[%s: size=%d, hashSize=%d, %d/%d/%d/%d pri/sec/ter/spill (=%s), total:%d]\",\n                getClass().getName(), _count, _hashSize,\n                pri, sec, tert, spill, total, (pri+sec+tert+spill), total);",
      "info" : "ReturnStatement[15540-15770]:ReturnStatement[15540-15770]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15998-16919]:Block[15998-16919]"
    }, {
      "left" : "int offset = _calcOffset(calcHash(q1));",
      "right" : "int offset = _calcOffset(calcHash(q1));",
      "info" : "VariableDeclarationStatement[16008-16047]:VariableDeclarationStatement[16008-16047]"
    }, {
      "left" : "final int[] hashArea = _hashArea;",
      "right" : "final int[] hashArea = _hashArea;",
      "info" : "VariableDeclarationStatement[16089-16122]:VariableDeclarationStatement[16089-16122]"
    }, {
      "left" : "int len = hashArea[offset+3];",
      "right" : "int len = hashArea[offset+3];",
      "info" : "VariableDeclarationStatement[16132-16161]:VariableDeclarationStatement[16132-16161]"
    }, {
      "left" : "if (len == 1)",
      "right" : "if (len == 1)",
      "info" : "IfStatement[16171-16408]:IfStatement[16171-16408]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16185-16296]:Block[16185-16296]"
    }, {
      "left" : "if (hashArea[offset] == q1)",
      "right" : "if (hashArea[offset] == q1)",
      "info" : "IfStatement[16199-16286]:IfStatement[16199-16286]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16227-16286]:Block[16227-16286]"
    }, {
      "left" : "return _names[offset >> 2];",
      "right" : "return _names[offset >> 2];",
      "info" : "ReturnStatement[16245-16272]:ReturnStatement[16245-16272]"
    }, {
      "left" : "if (len == 0)",
      "right" : "if (len == 0)",
      "info" : "IfStatement[16302-16408]:IfStatement[16302-16408]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16316-16408]:Block[16316-16408]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[16386-16398]:ReturnStatement[16386-16398]"
    }, {
      "left" : "int offset2 = _secondaryStart + ((offset >> 3) << 2);",
      "right" : "int offset2 = _secondaryStart + ((offset >> 3) << 2);",
      "info" : "VariableDeclarationStatement[16475-16528]:VariableDeclarationStatement[16475-16528]"
    }, {
      "left" : "len = hashArea[offset2+3];",
      "right" : "len = hashArea[offset2+3];",
      "info" : "ExpressionStatement[16538-16564]:ExpressionStatement[16538-16564]"
    }, {
      "left" : "if (len == 1)",
      "right" : "if (len == 1)",
      "info" : "IfStatement[16574-16813]:IfStatement[16574-16813]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16588-16701]:Block[16588-16701]"
    }, {
      "left" : "if (hashArea[offset2] == q1)",
      "right" : "if (hashArea[offset2] == q1)",
      "info" : "IfStatement[16602-16691]:IfStatement[16602-16691]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16631-16691]:Block[16631-16691]"
    }, {
      "left" : "return _names[offset2 >> 2];",
      "right" : "return _names[offset2 >> 2];",
      "info" : "ReturnStatement[16649-16677]:ReturnStatement[16649-16677]"
    }, {
      "left" : "if (len == 0)",
      "right" : "if (len == 0)",
      "info" : "IfStatement[16707-16813]:IfStatement[16707-16813]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16721-16813]:Block[16721-16813]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[16791-16803]:ReturnStatement[16791-16803]"
    }, {
      "left" : "return _findSecondary(offset, q1);",
      "right" : "return _findSecondary(offset, q1);",
      "info" : "ReturnStatement[16879-16913]:ReturnStatement[16879-16913]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16968-17832]:Block[16968-17832]"
    }, {
      "left" : "int offset = _calcOffset(calcHash(q1, q2));",
      "right" : "int offset = _calcOffset(calcHash(q1, q2));",
      "info" : "VariableDeclarationStatement[16978-17021]:VariableDeclarationStatement[16978-17021]"
    }, {
      "left" : "final int[] hashArea = _hashArea;",
      "right" : "final int[] hashArea = _hashArea;",
      "info" : "VariableDeclarationStatement[17031-17064]:VariableDeclarationStatement[17031-17064]"
    }, {
      "left" : "int len = hashArea[offset+3];",
      "right" : "int len = hashArea[offset+3];",
      "info" : "VariableDeclarationStatement[17074-17103]:VariableDeclarationStatement[17074-17103]"
    }, {
      "left" : "if (len == 2)",
      "right" : "if (len == 2)",
      "info" : "IfStatement[17113-17382]:IfStatement[17113-17382]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17127-17270]:Block[17127-17270]"
    }, {
      "left" : "if ((q1 == hashArea[offset]) && (q2 == hashArea[offset+1]))",
      "right" : "if ((q1 == hashArea[offset]) && (q2 == hashArea[offset+1]))",
      "info" : "IfStatement[17141-17260]:IfStatement[17141-17260]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17201-17260]:Block[17201-17260]"
    }, {
      "left" : "return _names[offset >> 2];",
      "right" : "return _names[offset >> 2];",
      "info" : "ReturnStatement[17219-17246]:ReturnStatement[17219-17246]"
    }, {
      "left" : "if (len == 0)",
      "right" : "if (len == 0)",
      "info" : "IfStatement[17276-17382]:IfStatement[17276-17382]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17290-17382]:Block[17290-17382]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[17360-17372]:ReturnStatement[17360-17372]"
    }, {
      "left" : "int offset2 = _secondaryStart + ((offset >> 3) << 2);",
      "right" : "int offset2 = _secondaryStart + ((offset >> 3) << 2);",
      "info" : "VariableDeclarationStatement[17413-17466]:VariableDeclarationStatement[17413-17466]"
    }, {
      "left" : "len = hashArea[offset2+3];",
      "right" : "len = hashArea[offset2+3];",
      "info" : "ExpressionStatement[17476-17502]:ExpressionStatement[17476-17502]"
    }, {
      "left" : "if (len == 2)",
      "right" : "if (len == 2)",
      "info" : "IfStatement[17512-17779]:IfStatement[17512-17779]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17526-17672]:Block[17526-17672]"
    }, {
      "left" : "if ((q1 == hashArea[offset2]) && (q2 == hashArea[offset2+1]))",
      "right" : "if ((q1 == hashArea[offset2]) && (q2 == hashArea[offset2+1]))",
      "info" : "IfStatement[17540-17662]:IfStatement[17540-17662]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17602-17662]:Block[17602-17662]"
    }, {
      "left" : "return _names[offset2 >> 2];",
      "right" : "return _names[offset2 >> 2];",
      "info" : "ReturnStatement[17620-17648]:ReturnStatement[17620-17648]"
    }, {
      "left" : "if (len == 0)",
      "right" : "if (len == 0)",
      "info" : "IfStatement[17678-17779]:IfStatement[17678-17779]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17692-17779]:Block[17692-17779]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[17757-17769]:ReturnStatement[17757-17769]"
    }, {
      "left" : "return _findSecondary(offset, q1, q2);",
      "right" : "return _findSecondary(offset, q1, q2);",
      "info" : "ReturnStatement[17788-17826]:ReturnStatement[17788-17826]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17889-18820]:Block[17889-18820]"
    }, {
      "left" : "int offset = _calcOffset(calcHash(q1, q2, q3));",
      "right" : "int offset = _calcOffset(calcHash(q1, q2, q3));",
      "info" : "VariableDeclarationStatement[17899-17946]:VariableDeclarationStatement[17899-17946]"
    }, {
      "left" : "final int[] hashArea = _hashArea;",
      "right" : "final int[] hashArea = _hashArea;",
      "info" : "VariableDeclarationStatement[17955-17988]:VariableDeclarationStatement[17955-17988]"
    }, {
      "left" : "int len = hashArea[offset+3];",
      "right" : "int len = hashArea[offset+3];",
      "info" : "VariableDeclarationStatement[17997-18026]:VariableDeclarationStatement[17997-18026]"
    }, {
      "left" : "if (len == 3)",
      "right" : "if (len == 3)",
      "info" : "IfStatement[18036-18335]:IfStatement[18036-18335]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18050-18223]:Block[18050-18223]"
    }, {
      "left" : "if ((q1 == hashArea[offset]) && (hashArea[offset+1] == q2) && (hashArea[offset+2] == q3))",
      "right" : "if ((q1 == hashArea[offset]) && (hashArea[offset+1] == q2) && (hashArea[offset+2] == q3))",
      "info" : "IfStatement[18064-18213]:IfStatement[18064-18213]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18154-18213]:Block[18154-18213]"
    }, {
      "left" : "return _names[offset >> 2];",
      "right" : "return _names[offset >> 2];",
      "info" : "ReturnStatement[18172-18199]:ReturnStatement[18172-18199]"
    }, {
      "left" : "if (len == 0)",
      "right" : "if (len == 0)",
      "info" : "IfStatement[18229-18335]:IfStatement[18229-18335]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18243-18335]:Block[18243-18335]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[18313-18325]:ReturnStatement[18313-18325]"
    }, {
      "left" : "int offset2 = _secondaryStart + ((offset >> 3) << 2);",
      "right" : "int offset2 = _secondaryStart + ((offset >> 3) << 2);",
      "info" : "VariableDeclarationStatement[18366-18419]:VariableDeclarationStatement[18366-18419]"
    }, {
      "left" : "len = hashArea[offset2+3];",
      "right" : "len = hashArea[offset2+3];",
      "info" : "ExpressionStatement[18429-18455]:ExpressionStatement[18429-18455]"
    }, {
      "left" : "if (len == 3)",
      "right" : "if (len == 3)",
      "info" : "IfStatement[18465-18763]:IfStatement[18465-18763]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18479-18656]:Block[18479-18656]"
    }, {
      "left" : "if ((q1 == hashArea[offset2]) && (hashArea[offset2+1] == q2) && (hashArea[offset2+2] == q3))",
      "right" : "if ((q1 == hashArea[offset2]) && (hashArea[offset2+1] == q2) && (hashArea[offset2+2] == q3))",
      "info" : "IfStatement[18493-18646]:IfStatement[18493-18646]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18586-18646]:Block[18586-18646]"
    }, {
      "left" : "return _names[offset2 >> 2];",
      "right" : "return _names[offset2 >> 2];",
      "info" : "ReturnStatement[18604-18632]:ReturnStatement[18604-18632]"
    }, {
      "left" : "if (len == 0)",
      "right" : "if (len == 0)",
      "info" : "IfStatement[18662-18763]:IfStatement[18662-18763]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18676-18763]:Block[18676-18763]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[18741-18753]:ReturnStatement[18741-18753]"
    }, {
      "left" : "return _findSecondary(offset, q1, q2, q3);",
      "right" : "return _findSecondary(offset, q1, q2, q3);",
      "info" : "ReturnStatement[18772-18814]:ReturnStatement[18772-18814]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18872-20412]:Block[18872-20412]"
    }, {
      "left" : "if (qlen < 4)",
      "right" : "if (qlen < 4)",
      "info" : "IfStatement[19112-19378]:IfStatement[19112-19378]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19126-19378]:Block[19126-19378]"
    }, {
      "left" : "if (qlen == 3)",
      "right" : "if (qlen == 3)",
      "info" : "IfStatement[19164-19245]:IfStatement[19164-19245]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19179-19245]:Block[19179-19245]"
    }, {
      "left" : "return findName(q[0], q[1], q[2]);",
      "right" : "return findName(q[0], q[1], q[2]);",
      "info" : "ReturnStatement[19197-19231]:ReturnStatement[19197-19231]"
    }, {
      "left" : "if (qlen == 2)",
      "right" : "if (qlen == 2)",
      "info" : "IfStatement[19258-19333]:IfStatement[19258-19333]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19273-19333]:Block[19273-19333]"
    }, {
      "left" : "return findName(q[0], q[1]);",
      "right" : "return findName(q[0], q[1]);",
      "info" : "ReturnStatement[19291-19319]:ReturnStatement[19291-19319]"
    }, {
      "left" : "return findName(q[0]);",
      "right" : "return findName(q[0]);",
      "info" : "ReturnStatement[19346-19368]:ReturnStatement[19346-19368]"
    }, {
      "left" : "final int hash = calcHash(q, qlen);",
      "right" : "final int hash = calcHash(q, qlen);",
      "info" : "VariableDeclarationStatement[19387-19422]:VariableDeclarationStatement[19387-19422]"
    }, {
      "left" : "int offset = _calcOffset(hash);",
      "right" : "int offset = _calcOffset(hash);",
      "info" : "VariableDeclarationStatement[19431-19462]:VariableDeclarationStatement[19431-19462]"
    }, {
      "left" : "final int[] hashArea = _hashArea;",
      "right" : "final int[] hashArea = _hashArea;",
      "info" : "VariableDeclarationStatement[19472-19505]:VariableDeclarationStatement[19472-19505]"
    }, {
      "left" : "final int len = hashArea[offset+3];",
      "right" : "final int len = hashArea[offset+3];",
      "info" : "VariableDeclarationStatement[19515-19550]:VariableDeclarationStatement[19515-19550]"
    }, {
      "left" : "if ((hash == hashArea[offset]) && (len == qlen))",
      "right" : "if ((hash == hashArea[offset]) && (len == qlen))",
      "info" : "IfStatement[19568-19801]:IfStatement[19568-19801]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19617-19801]:Block[19617-19801]"
    }, {
      "left" : "if (_verifyLongName(q, qlen, hashArea[offset+1]))",
      "right" : "if (_verifyLongName(q, qlen, hashArea[offset+1]))",
      "info" : "IfStatement[19682-19791]:IfStatement[19682-19791]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19732-19791]:Block[19732-19791]"
    }, {
      "left" : "return _names[offset >> 2];",
      "right" : "return _names[offset >> 2];",
      "info" : "ReturnStatement[19750-19777]:ReturnStatement[19750-19777]"
    }, {
      "left" : "if (len == 0)",
      "right" : "if (len == 0)",
      "info" : "IfStatement[19810-19916]:IfStatement[19810-19916]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19824-19916]:Block[19824-19916]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[19894-19906]:ReturnStatement[19894-19906]"
    }, {
      "left" : "int offset2 = _secondaryStart + ((offset >> 3) << 2);",
      "right" : "int offset2 = _secondaryStart + ((offset >> 3) << 2);",
      "info" : "VariableDeclarationStatement[19947-20000]:VariableDeclarationStatement[19947-20000]"
    }, {
      "left" : "final int len2 = hashArea[offset2+3];",
      "right" : "final int len2 = hashArea[offset2+3];",
      "info" : "VariableDeclarationStatement[20010-20047]:VariableDeclarationStatement[20010-20047]"
    }, {
      "left" : "if ((hash == hashArea[offset2]) && (len2 == qlen))",
      "right" : "if ((hash == hashArea[offset2]) && (len2 == qlen))",
      "info" : "IfStatement[20056-20242]:IfStatement[20056-20242]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20107-20242]:Block[20107-20242]"
    }, {
      "left" : "if (_verifyLongName(q, qlen, hashArea[offset2+1]))",
      "right" : "if (_verifyLongName(q, qlen, hashArea[offset2+1]))",
      "info" : "IfStatement[20121-20232]:IfStatement[20121-20232]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20172-20232]:Block[20172-20232]"
    }, {
      "left" : "return _names[offset2 >> 2];",
      "right" : "return _names[offset2 >> 2];",
      "info" : "ReturnStatement[20190-20218]:ReturnStatement[20190-20218]"
    }, {
      "left" : "if (len == 0)",
      "right" : "if (len == 0)",
      "info" : "IfStatement[20251-20352]:IfStatement[20251-20352]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20265-20352]:Block[20265-20352]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[20330-20342]:ReturnStatement[20330-20342]"
    }, {
      "left" : "return _findSecondary(offset, hash, q, qlen);",
      "right" : "return _findSecondary(offset, hash, q, qlen);",
      "info" : "ReturnStatement[20361-20406]:ReturnStatement[20361-20406]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20466-20748]:Block[20466-20748]"
    }, {
      "left" : "int ix = hash & (_hashSize-1);",
      "right" : "int ix = hash & (_hashSize-1);",
      "info" : "VariableDeclarationStatement[20634-20664]:VariableDeclarationStatement[20634-20664]"
    }, {
      "left" : "return (ix << 2);",
      "right" : "return (ix << 2);",
      "info" : "ReturnStatement[20725-20742]:ReturnStatement[20725-20742]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20992-22273]:Block[20992-22273]"
    }, {
      "left" : "int offset = _tertiaryStart + ((origOffset >> (_tertiaryShift + 2)) << _tertiaryShift);",
      "right" : "int offset = _tertiaryStart + ((origOffset >> (_tertiaryShift + 2)) << _tertiaryShift);",
      "info" : "VariableDeclarationStatement[21342-21429]:VariableDeclarationStatement[21342-21429]"
    }, {
      "left" : "final int[] hashArea = _hashArea;",
      "right" : "final int[] hashArea = _hashArea;",
      "info" : "VariableDeclarationStatement[21438-21471]:VariableDeclarationStatement[21438-21471]"
    }, {
      "left" : "final int bucketSize = (1 << _tertiaryShift);",
      "right" : "final int bucketSize = (1 << _tertiaryShift);",
      "info" : "VariableDeclarationStatement[21480-21525]:VariableDeclarationStatement[21480-21525]"
    }, {
      "left" : "for (int end = offset + bucketSize; offset < end; offset += 4)",
      "right" : "for (int end = offset + bucketSize; offset < end; offset += 4)",
      "info" : "ForStatement[21534-21837]:ForStatement[21534-21837]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21597-21837]:Block[21597-21837]"
    }, {
      "left" : "int len = hashArea[offset+3];",
      "right" : "int len = hashArea[offset+3];",
      "info" : "VariableDeclarationStatement[21611-21640]:VariableDeclarationStatement[21611-21640]"
    }, {
      "left" : "if ((q1 == hashArea[offset]) && (1 == len))",
      "right" : "if ((q1 == hashArea[offset]) && (1 == len))",
      "info" : "IfStatement[21653-21756]:IfStatement[21653-21756]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21697-21756]:Block[21697-21756]"
    }, {
      "left" : "return _names[offset >> 2];",
      "right" : "return _names[offset >> 2];",
      "info" : "ReturnStatement[21715-21742]:ReturnStatement[21715-21742]"
    }, {
      "left" : "if (len == 0)",
      "right" : "if (len == 0)",
      "info" : "IfStatement[21769-21827]:IfStatement[21769-21827]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21783-21827]:Block[21783-21827]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[21801-21813]:ReturnStatement[21801-21813]"
    }, {
      "left" : "for (offset = _spilloverStart(); offset < _spilloverEnd; offset += 4)",
      "right" : "for (offset = _spilloverStart(); offset < _spilloverEnd; offset += 4)",
      "info" : "ForStatement[22034-22246]:ForStatement[22034-22246]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22104-22246]:Block[22104-22246]"
    }, {
      "left" : "if ((q1 == hashArea[offset]) && (1 == hashArea[offset+3]))",
      "right" : "if ((q1 == hashArea[offset]) && (1 == hashArea[offset+3]))",
      "info" : "IfStatement[22118-22236]:IfStatement[22118-22236]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22177-22236]:Block[22177-22236]"
    }, {
      "left" : "return _names[offset >> 2];",
      "right" : "return _names[offset >> 2];",
      "info" : "ReturnStatement[22195-22222]:ReturnStatement[22195-22222]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[22255-22267]:ReturnStatement[22255-22267]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22345-23159]:Block[22345-23159]"
    }, {
      "left" : "int offset = _tertiaryStart + ((origOffset >> (_tertiaryShift + 2)) << _tertiaryShift);",
      "right" : "int offset = _tertiaryStart + ((origOffset >> (_tertiaryShift + 2)) << _tertiaryShift);",
      "info" : "VariableDeclarationStatement[22355-22442]:VariableDeclarationStatement[22355-22442]"
    }, {
      "left" : "final int[] hashArea = _hashArea;",
      "right" : "final int[] hashArea = _hashArea;",
      "info" : "VariableDeclarationStatement[22451-22484]:VariableDeclarationStatement[22451-22484]"
    }, {
      "left" : "final int bucketSize = (1 << _tertiaryShift);",
      "right" : "final int bucketSize = (1 << _tertiaryShift);",
      "info" : "VariableDeclarationStatement[22494-22539]:VariableDeclarationStatement[22494-22539]"
    }, {
      "left" : "for (int end = offset + bucketSize; offset < end; offset += 4)",
      "right" : "for (int end = offset + bucketSize; offset < end; offset += 4)",
      "info" : "ForStatement[22548-22881]:ForStatement[22548-22881]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22611-22881]:Block[22611-22881]"
    }, {
      "left" : "int len = hashArea[offset+3];",
      "right" : "int len = hashArea[offset+3];",
      "info" : "VariableDeclarationStatement[22625-22654]:VariableDeclarationStatement[22625-22654]"
    }, {
      "left" : "if ((q1 == hashArea[offset]) && (q2 == hashArea[offset+1]) && (2 == len))",
      "right" : "if ((q1 == hashArea[offset]) && (q2 == hashArea[offset+1]) && (2 == len))",
      "info" : "IfStatement[22667-22800]:IfStatement[22667-22800]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22741-22800]:Block[22741-22800]"
    }, {
      "left" : "return _names[offset >> 2];",
      "right" : "return _names[offset >> 2];",
      "info" : "ReturnStatement[22759-22786]:ReturnStatement[22759-22786]"
    }, {
      "left" : "if (len == 0)",
      "right" : "if (len == 0)",
      "info" : "IfStatement[22813-22871]:IfStatement[22813-22871]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22827-22871]:Block[22827-22871]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[22845-22857]:ReturnStatement[22845-22857]"
    }, {
      "left" : "for (offset = _spilloverStart(); offset < _spilloverEnd; offset += 4)",
      "right" : "for (offset = _spilloverStart(); offset < _spilloverEnd; offset += 4)",
      "info" : "ForStatement[22890-23132]:ForStatement[22890-23132]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22960-23132]:Block[22960-23132]"
    }, {
      "left" : "if ((q1 == hashArea[offset]) && (q2 == hashArea[offset+1]) && (2 == hashArea[offset+3]))",
      "right" : "if ((q1 == hashArea[offset]) && (q2 == hashArea[offset+1]) && (2 == hashArea[offset+3]))",
      "info" : "IfStatement[22974-23122]:IfStatement[22974-23122]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23063-23122]:Block[23063-23122]"
    }, {
      "left" : "return _names[offset >> 2];",
      "right" : "return _names[offset >> 2];",
      "info" : "ReturnStatement[23081-23108]:ReturnStatement[23081-23108]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[23141-23153]:ReturnStatement[23141-23153]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23239-24133]:Block[23239-24133]"
    }, {
      "left" : "int offset = _tertiaryStart + ((origOffset >> (_tertiaryShift + 2)) << _tertiaryShift);",
      "right" : "int offset = _tertiaryStart + ((origOffset >> (_tertiaryShift + 2)) << _tertiaryShift);",
      "info" : "VariableDeclarationStatement[23249-23336]:VariableDeclarationStatement[23249-23336]"
    }, {
      "left" : "final int[] hashArea = _hashArea;",
      "right" : "final int[] hashArea = _hashArea;",
      "info" : "VariableDeclarationStatement[23345-23378]:VariableDeclarationStatement[23345-23378]"
    }, {
      "left" : "final int bucketSize = (1 << _tertiaryShift);",
      "right" : "final int bucketSize = (1 << _tertiaryShift);",
      "info" : "VariableDeclarationStatement[23388-23433]:VariableDeclarationStatement[23388-23433]"
    }, {
      "left" : "for (int end = offset + bucketSize; offset < end; offset += 4)",
      "right" : "for (int end = offset + bucketSize; offset < end; offset += 4)",
      "info" : "ForStatement[23442-23805]:ForStatement[23442-23805]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23505-23805]:Block[23505-23805]"
    }, {
      "left" : "int len = hashArea[offset+3];",
      "right" : "int len = hashArea[offset+3];",
      "info" : "VariableDeclarationStatement[23519-23548]:VariableDeclarationStatement[23519-23548]"
    }, {
      "left" : "if ((q1 == hashArea[offset]) && (q2 == hashArea[offset+1]) && (q3 == hashArea[offset+2]) && (3 == len))",
      "right" : "if ((q1 == hashArea[offset]) && (q2 == hashArea[offset+1]) && (q3 == hashArea[offset+2]) && (3 == len))",
      "info" : "IfStatement[23561-23724]:IfStatement[23561-23724]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23665-23724]:Block[23665-23724]"
    }, {
      "left" : "return _names[offset >> 2];",
      "right" : "return _names[offset >> 2];",
      "info" : "ReturnStatement[23683-23710]:ReturnStatement[23683-23710]"
    }, {
      "left" : "if (len == 0)",
      "right" : "if (len == 0)",
      "info" : "IfStatement[23737-23795]:IfStatement[23737-23795]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23751-23795]:Block[23751-23795]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[23769-23781]:ReturnStatement[23769-23781]"
    }, {
      "left" : "for (offset = _spilloverStart(); offset < _spilloverEnd; offset += 4)",
      "right" : "for (offset = _spilloverStart(); offset < _spilloverEnd; offset += 4)",
      "info" : "ForStatement[23814-24106]:ForStatement[23814-24106]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23884-24106]:Block[23884-24106]"
    }, {
      "left" : "if ((q1 == hashArea[offset]) && (q2 == hashArea[offset+1]) && (q3 == hashArea[offset+2])\n                    && (3 == hashArea[offset+3]))",
      "right" : "if ((q1 == hashArea[offset]) && (q2 == hashArea[offset+1]) && (q3 == hashArea[offset+2])\n                    && (3 == hashArea[offset+3]))",
      "info" : "IfStatement[23898-24096]:IfStatement[23898-24096]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24037-24096]:Block[24037-24096]"
    }, {
      "left" : "return _names[offset >> 2];",
      "right" : "return _names[offset >> 2];",
      "info" : "ReturnStatement[24055-24082]:ReturnStatement[24055-24082]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[24115-24127]:ReturnStatement[24115-24127]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24218-25162]:Block[24218-25162]"
    }, {
      "left" : "int offset = _tertiaryStart + ((origOffset >> (_tertiaryShift + 2)) << _tertiaryShift);",
      "right" : "int offset = _tertiaryStart + ((origOffset >> (_tertiaryShift + 2)) << _tertiaryShift);",
      "info" : "VariableDeclarationStatement[24228-24315]:VariableDeclarationStatement[24228-24315]"
    }, {
      "left" : "final int[] hashArea = _hashArea;",
      "right" : "final int[] hashArea = _hashArea;",
      "info" : "VariableDeclarationStatement[24324-24357]:VariableDeclarationStatement[24324-24357]"
    }, {
      "left" : "final int bucketSize = (1 << _tertiaryShift);",
      "right" : "final int bucketSize = (1 << _tertiaryShift);",
      "info" : "VariableDeclarationStatement[24367-24412]:VariableDeclarationStatement[24367-24412]"
    }, {
      "left" : "for (int end = offset + bucketSize; offset < end; offset += 4)",
      "right" : "for (int end = offset + bucketSize; offset < end; offset += 4)",
      "info" : "ForStatement[24421-24819]:ForStatement[24421-24819]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24484-24819]:Block[24484-24819]"
    }, {
      "left" : "int len = hashArea[offset+3];",
      "right" : "int len = hashArea[offset+3];",
      "info" : "VariableDeclarationStatement[24498-24527]:VariableDeclarationStatement[24498-24527]"
    }, {
      "left" : "if ((hash == hashArea[offset]) && (qlen == len))",
      "right" : "if ((hash == hashArea[offset]) && (qlen == len))",
      "info" : "IfStatement[24540-24738]:IfStatement[24540-24738]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24589-24738]:Block[24589-24738]"
    }, {
      "left" : "if (_verifyLongName(q, qlen, hashArea[offset+1]))",
      "right" : "if (_verifyLongName(q, qlen, hashArea[offset+1]))",
      "info" : "IfStatement[24607-24724]:IfStatement[24607-24724]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24657-24724]:Block[24657-24724]"
    }, {
      "left" : "return _names[offset >> 2];",
      "right" : "return _names[offset >> 2];",
      "info" : "ReturnStatement[24679-24706]:ReturnStatement[24679-24706]"
    }, {
      "left" : "if (len == 0)",
      "right" : "if (len == 0)",
      "info" : "IfStatement[24751-24809]:IfStatement[24751-24809]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24765-24809]:Block[24765-24809]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[24783-24795]:ReturnStatement[24783-24795]"
    }, {
      "left" : "for (offset = _spilloverStart(); offset < _spilloverEnd; offset += 4)",
      "right" : "for (offset = _spilloverStart(); offset < _spilloverEnd; offset += 4)",
      "info" : "ForStatement[24828-25135]:ForStatement[24828-25135]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24898-25135]:Block[24898-25135]"
    }, {
      "left" : "if ((hash == hashArea[offset]) && (qlen == hashArea[offset+3]))",
      "right" : "if ((hash == hashArea[offset]) && (qlen == hashArea[offset+3]))",
      "info" : "IfStatement[24912-25125]:IfStatement[24912-25125]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24976-25125]:Block[24976-25125]"
    }, {
      "left" : "if (_verifyLongName(q, qlen, hashArea[offset+1]))",
      "right" : "if (_verifyLongName(q, qlen, hashArea[offset+1]))",
      "info" : "IfStatement[24994-25111]:IfStatement[24994-25111]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25044-25111]:Block[25044-25111]"
    }, {
      "left" : "return _names[offset >> 2];",
      "right" : "return _names[offset >> 2];",
      "info" : "ReturnStatement[25066-25093]:ReturnStatement[25066-25093]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[25144-25156]:ReturnStatement[25144-25156]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25244-26149]:Block[25244-26149]"
    }, {
      "left" : "final int[] hashArea = _hashArea;",
      "right" : "final int[] hashArea = _hashArea;",
      "info" : "VariableDeclarationStatement[25254-25287]:VariableDeclarationStatement[25254-25287]"
    }, {
      "left" : "int ix = 0;",
      "right" : "int ix = 0;",
      "info" : "VariableDeclarationStatement[25371-25382]:VariableDeclarationStatement[25371-25382]"
    }, {
      "left" : "switch (qlen) {\n        default:\n            return _verifyLongName2(q, qlen, spillOffset);\n        case 8:\n            if (q[ix++] != hashArea[spillOffset++]) return false;\n        case 7:\n            if (q[ix++] != hashArea[spillOffset++]) return false;\n        case 6:\n            if (q[ix++] != hashArea[spillOffset++]) return false;\n        case 5:\n            if (q[ix++] != hashArea[spillOffset++]) return false;\n        case 4: // always at least 4\n            if (q[ix++] != hashArea[spillOffset++]) return false;\n            if (q[ix++] != hashArea[spillOffset++]) return false;\n            if (q[ix++] != hashArea[spillOffset++]) return false;\n            if (q[ix++] != hashArea[spillOffset++]) return false;\n        }",
      "right" : "switch (qlen) {\n        default:\n            return _verifyLongName2(q, qlen, spillOffset);\n        case 8:\n            if (q[ix++] != hashArea[spillOffset++]) return false;\n        case 7:\n            if (q[ix++] != hashArea[spillOffset++]) return false;\n        case 6:\n            if (q[ix++] != hashArea[spillOffset++]) return false;\n        case 5:\n            if (q[ix++] != hashArea[spillOffset++]) return false;\n        case 4: // always at least 4\n            if (q[ix++] != hashArea[spillOffset++]) return false;\n            if (q[ix++] != hashArea[spillOffset++]) return false;\n            if (q[ix++] != hashArea[spillOffset++]) return false;\n            if (q[ix++] != hashArea[spillOffset++]) return false;\n        }",
      "info" : "SwitchStatement[25392-26122]:SwitchStatement[25392-26122]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[25416-25424]:SwitchCase[25416-25424]"
    }, {
      "left" : "return _verifyLongName2(q, qlen, spillOffset);",
      "right" : "return _verifyLongName2(q, qlen, spillOffset);",
      "info" : "ReturnStatement[25437-25483]:ReturnStatement[25437-25483]"
    }, {
      "left" : "case 8:",
      "right" : "case 8:",
      "info" : "SwitchCase[25492-25499]:SwitchCase[25492-25499]"
    }, {
      "left" : "if (q[ix++] != hashArea[spillOffset++])",
      "right" : "if (q[ix++] != hashArea[spillOffset++])",
      "info" : "IfStatement[25512-25565]:IfStatement[25512-25565]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[25552-25565]:ReturnStatement[25552-25565]"
    }, {
      "left" : "case 7:",
      "right" : "case 7:",
      "info" : "SwitchCase[25574-25581]:SwitchCase[25574-25581]"
    }, {
      "left" : "if (q[ix++] != hashArea[spillOffset++])",
      "right" : "if (q[ix++] != hashArea[spillOffset++])",
      "info" : "IfStatement[25594-25647]:IfStatement[25594-25647]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[25634-25647]:ReturnStatement[25634-25647]"
    }, {
      "left" : "case 6:",
      "right" : "case 6:",
      "info" : "SwitchCase[25656-25663]:SwitchCase[25656-25663]"
    }, {
      "left" : "if (q[ix++] != hashArea[spillOffset++])",
      "right" : "if (q[ix++] != hashArea[spillOffset++])",
      "info" : "IfStatement[25676-25729]:IfStatement[25676-25729]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[25716-25729]:ReturnStatement[25716-25729]"
    }, {
      "left" : "case 5:",
      "right" : "case 5:",
      "info" : "SwitchCase[25738-25745]:SwitchCase[25738-25745]"
    }, {
      "left" : "if (q[ix++] != hashArea[spillOffset++])",
      "right" : "if (q[ix++] != hashArea[spillOffset++])",
      "info" : "IfStatement[25758-25811]:IfStatement[25758-25811]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[25798-25811]:ReturnStatement[25798-25811]"
    }, {
      "left" : "case 4:",
      "right" : "case 4:",
      "info" : "SwitchCase[25820-25827]:SwitchCase[25820-25827]"
    }, {
      "left" : "if (q[ix++] != hashArea[spillOffset++])",
      "right" : "if (q[ix++] != hashArea[spillOffset++])",
      "info" : "IfStatement[25861-25914]:IfStatement[25861-25914]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[25901-25914]:ReturnStatement[25901-25914]"
    }, {
      "left" : "if (q[ix++] != hashArea[spillOffset++])",
      "right" : "if (q[ix++] != hashArea[spillOffset++])",
      "info" : "IfStatement[25927-25980]:IfStatement[25927-25980]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[25967-25980]:ReturnStatement[25967-25980]"
    }, {
      "left" : "if (q[ix++] != hashArea[spillOffset++])",
      "right" : "if (q[ix++] != hashArea[spillOffset++])",
      "info" : "IfStatement[25993-26046]:IfStatement[25993-26046]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[26033-26046]:ReturnStatement[26033-26046]"
    }, {
      "left" : "if (q[ix++] != hashArea[spillOffset++])",
      "right" : "if (q[ix++] != hashArea[spillOffset++])",
      "info" : "IfStatement[26059-26112]:IfStatement[26059-26112]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[26099-26112]:ReturnStatement[26099-26112]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[26131-26143]:ReturnStatement[26131-26143]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26228-26417]:Block[26228-26417]"
    }, {
      "left" : "int ix = 0;",
      "right" : "int ix = 0;",
      "info" : "VariableDeclarationStatement[26238-26249]:VariableDeclarationStatement[26238-26249]"
    }, {
      "left" : "do{...}",
      "right" : "do{...}",
      "info" : "DoStatement[26258-26390]:DoStatement[26258-26390]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26261-26371]:Block[26261-26371]"
    }, {
      "left" : "if (q[ix++] != _hashArea[spillOffset++])",
      "right" : "if (q[ix++] != _hashArea[spillOffset++])",
      "info" : "IfStatement[26275-26361]:IfStatement[26275-26361]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26316-26361]:Block[26316-26361]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[26334-26347]:ReturnStatement[26334-26347]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[26399-26411]:ReturnStatement[26399-26411]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26631-26977]:Block[26631-26977]"
    }, {
      "left" : "_verifySharing();",
      "right" : "_verifySharing();",
      "info" : "ExpressionStatement[26641-26658]:ExpressionStatement[26641-26658]"
    }, {
      "left" : "if (_intern)",
      "right" : "if (_intern)",
      "info" : "IfStatement[26667-26745]:IfStatement[26667-26745]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26680-26745]:Block[26680-26745]"
    }, {
      "left" : "name = InternCache.instance.intern(name);",
      "right" : "name = InternCache.instance.intern(name);",
      "info" : "ExpressionStatement[26694-26735]:ExpressionStatement[26694-26735]"
    }, {
      "left" : "int offset = _findOffsetForAdd(calcHash(q1));",
      "right" : "int offset = _findOffsetForAdd(calcHash(q1));",
      "info" : "VariableDeclarationStatement[26754-26799]:VariableDeclarationStatement[26754-26799]"
    }, {
      "left" : "_hashArea[offset] = q1;",
      "right" : "_hashArea[offset] = q1;",
      "info" : "ExpressionStatement[26808-26831]:ExpressionStatement[26808-26831]"
    }, {
      "left" : "_hashArea[offset+3] = 1;",
      "right" : "_hashArea[offset+3] = 1;",
      "info" : "ExpressionStatement[26840-26864]:ExpressionStatement[26840-26864]"
    }, {
      "left" : "_names[offset >> 2] = name;",
      "right" : "_names[offset >> 2] = name;",
      "info" : "ExpressionStatement[26873-26900]:ExpressionStatement[26873-26900]"
    }, {
      "left" : "++_count;",
      "right" : "++_count;",
      "info" : "ExpressionStatement[26909-26918]:ExpressionStatement[26909-26918]"
    }, {
      "left" : "_verifyNeedForRehash();",
      "right" : "_verifyNeedForRehash();",
      "info" : "ExpressionStatement[26927-26950]:ExpressionStatement[26927-26950]"
    }, {
      "left" : "return name;",
      "right" : "return name;",
      "info" : "ReturnStatement[26959-26971]:ReturnStatement[26959-26971]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27034-27470]:Block[27034-27470]"
    }, {
      "left" : "_verifySharing();",
      "right" : "_verifySharing();",
      "info" : "ExpressionStatement[27044-27061]:ExpressionStatement[27044-27061]"
    }, {
      "left" : "if (_intern)",
      "right" : "if (_intern)",
      "info" : "IfStatement[27070-27148]:IfStatement[27070-27148]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27083-27148]:Block[27083-27148]"
    }, {
      "left" : "name = InternCache.instance.intern(name);",
      "right" : "name = InternCache.instance.intern(name);",
      "info" : "ExpressionStatement[27097-27138]:ExpressionStatement[27097-27138]"
    }, {
      "left" : "int hash = (q2 == 0) ? calcHash(q1) : calcHash(q1, q2);",
      "right" : "int hash = (q2 == 0) ? calcHash(q1) : calcHash(q1, q2);",
      "info" : "VariableDeclarationStatement[27157-27212]:VariableDeclarationStatement[27157-27212]"
    }, {
      "left" : "int offset = _findOffsetForAdd(hash);",
      "right" : "int offset = _findOffsetForAdd(hash);",
      "info" : "VariableDeclarationStatement[27221-27258]:VariableDeclarationStatement[27221-27258]"
    }, {
      "left" : "_hashArea[offset] = q1;",
      "right" : "_hashArea[offset] = q1;",
      "info" : "ExpressionStatement[27267-27290]:ExpressionStatement[27267-27290]"
    }, {
      "left" : "_hashArea[offset+1] = q2;",
      "right" : "_hashArea[offset+1] = q2;",
      "info" : "ExpressionStatement[27299-27324]:ExpressionStatement[27299-27324]"
    }, {
      "left" : "_hashArea[offset+3] = 2;",
      "right" : "_hashArea[offset+3] = 2;",
      "info" : "ExpressionStatement[27333-27357]:ExpressionStatement[27333-27357]"
    }, {
      "left" : "_names[offset >> 2] = name;",
      "right" : "_names[offset >> 2] = name;",
      "info" : "ExpressionStatement[27366-27393]:ExpressionStatement[27366-27393]"
    }, {
      "left" : "++_count;",
      "right" : "++_count;",
      "info" : "ExpressionStatement[27402-27411]:ExpressionStatement[27402-27411]"
    }, {
      "left" : "_verifyNeedForRehash();",
      "right" : "_verifyNeedForRehash();",
      "info" : "ExpressionStatement[27420-27443]:ExpressionStatement[27420-27443]"
    }, {
      "left" : "return name;",
      "right" : "return name;",
      "info" : "ReturnStatement[27452-27464]:ReturnStatement[27452-27464]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27535-27957]:Block[27535-27957]"
    }, {
      "left" : "_verifySharing();",
      "right" : "_verifySharing();",
      "info" : "ExpressionStatement[27545-27562]:ExpressionStatement[27545-27562]"
    }, {
      "left" : "if (_intern)",
      "right" : "if (_intern)",
      "info" : "IfStatement[27571-27649]:IfStatement[27571-27649]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27584-27649]:Block[27584-27649]"
    }, {
      "left" : "name = InternCache.instance.intern(name);",
      "right" : "name = InternCache.instance.intern(name);",
      "info" : "ExpressionStatement[27598-27639]:ExpressionStatement[27598-27639]"
    }, {
      "left" : "int offset = _findOffsetForAdd(calcHash(q1, q2, q3));",
      "right" : "int offset = _findOffsetForAdd(calcHash(q1, q2, q3));",
      "info" : "VariableDeclarationStatement[27658-27711]:VariableDeclarationStatement[27658-27711]"
    }, {
      "left" : "_hashArea[offset] = q1;",
      "right" : "_hashArea[offset] = q1;",
      "info" : "ExpressionStatement[27720-27743]:ExpressionStatement[27720-27743]"
    }, {
      "left" : "_hashArea[offset+1] = q2;",
      "right" : "_hashArea[offset+1] = q2;",
      "info" : "ExpressionStatement[27752-27777]:ExpressionStatement[27752-27777]"
    }, {
      "left" : "_hashArea[offset+2] = q3;",
      "right" : "_hashArea[offset+2] = q3;",
      "info" : "ExpressionStatement[27786-27811]:ExpressionStatement[27786-27811]"
    }, {
      "left" : "_hashArea[offset+3] = 3;",
      "right" : "_hashArea[offset+3] = 3;",
      "info" : "ExpressionStatement[27820-27844]:ExpressionStatement[27820-27844]"
    }, {
      "left" : "_names[offset >> 2] = name;",
      "right" : "_names[offset >> 2] = name;",
      "info" : "ExpressionStatement[27853-27880]:ExpressionStatement[27853-27880]"
    }, {
      "left" : "++_count;",
      "right" : "++_count;",
      "info" : "ExpressionStatement[27889-27898]:ExpressionStatement[27889-27898]"
    }, {
      "left" : "_verifyNeedForRehash();",
      "right" : "_verifyNeedForRehash();",
      "info" : "ExpressionStatement[27907-27930]:ExpressionStatement[27907-27930]"
    }, {
      "left" : "return name;",
      "right" : "return name;",
      "info" : "ReturnStatement[27939-27951]:ReturnStatement[27939-27951]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28021-29459]:Block[28021-29459]"
    }, {
      "left" : "_verifySharing();",
      "right" : "_verifySharing();",
      "info" : "ExpressionStatement[28031-28048]:ExpressionStatement[28031-28048]"
    }, {
      "left" : "if (_intern)",
      "right" : "if (_intern)",
      "info" : "IfStatement[28057-28135]:IfStatement[28057-28135]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28070-28135]:Block[28070-28135]"
    }, {
      "left" : "name = InternCache.instance.intern(name);",
      "right" : "name = InternCache.instance.intern(name);",
      "info" : "ExpressionStatement[28084-28125]:ExpressionStatement[28084-28125]"
    }, {
      "left" : "int offset;",
      "right" : "int offset;",
      "info" : "VariableDeclarationStatement[28144-28155]:VariableDeclarationStatement[28144-28155]"
    }, {
      "left" : "switch (qlen) {\n        case 1:\n        {\n                offset = _findOffsetForAdd(calcHash(q[0]));\n                _hashArea[offset] = q[0];\n                _hashArea[offset+3] = 1;\n            }\n            break;\n        case 2:\n            {\n                offset = _findOffsetForAdd(calcHash(q[0], q[1]));\n                _hashArea[offset] = q[0];\n                _hashArea[offset+1] = q[1];\n                _hashArea[offset+3] = 2;\n            }\n            break;\n        case 3:\n            {\n                offset = _findOffsetForAdd(calcHash(q[0], q[1], q[2]));\n                _hashArea[offset] = q[0];\n                _hashArea[offset+1] = q[1];\n                _hashArea[offset+2] = q[2];\n                _hashArea[offset+3] = 3;\n            }\n            break;\n        default:\n            final int hash = calcHash(q, qlen);\n            offset = _findOffsetForAdd(hash);\n\n            _hashArea[offset] = hash;\n            int longStart = _appendLongName(q, qlen);\n            _hashArea[offset+1] = longStart;\n            _hashArea[offset+3] = qlen;\n        }",
      "right" : "switch (qlen) {\n        case 1:\n        {\n                offset = _findOffsetForAdd(calcHash(q[0]));\n                _hashArea[offset] = q[0];\n                _hashArea[offset+3] = 1;\n            }\n            break;\n        case 2:\n            {\n                offset = _findOffsetForAdd(calcHash(q[0], q[1]));\n                _hashArea[offset] = q[0];\n                _hashArea[offset+1] = q[1];\n                _hashArea[offset+3] = 2;\n            }\n            break;\n        case 3:\n            {\n                offset = _findOffsetForAdd(calcHash(q[0], q[1], q[2]));\n                _hashArea[offset] = q[0];\n                _hashArea[offset+1] = q[1];\n                _hashArea[offset+2] = q[2];\n                _hashArea[offset+3] = 3;\n            }\n            break;\n        default:\n            final int hash = calcHash(q, qlen);\n            offset = _findOffsetForAdd(hash);\n\n            _hashArea[offset] = hash;\n            int longStart = _appendLongName(q, qlen);\n            _hashArea[offset+1] = longStart;\n            _hashArea[offset+3] = qlen;\n        }",
      "info" : "SwitchStatement[28173-29251]:SwitchStatement[28173-29251]"
    }, {
      "left" : "case 1:",
      "right" : "case 1:",
      "info" : "SwitchCase[28197-28204]:SwitchCase[28197-28204]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28213-28371]:Block[28213-28371]"
    }, {
      "left" : "offset = _findOffsetForAdd(calcHash(q[0]));",
      "right" : "offset = _findOffsetForAdd(calcHash(q[0]));",
      "info" : "ExpressionStatement[28231-28274]:ExpressionStatement[28231-28274]"
    }, {
      "left" : "_hashArea[offset] = q[0];",
      "right" : "_hashArea[offset] = q[0];",
      "info" : "ExpressionStatement[28291-28316]:ExpressionStatement[28291-28316]"
    }, {
      "left" : "_hashArea[offset+3] = 1;",
      "right" : "_hashArea[offset+3] = 1;",
      "info" : "ExpressionStatement[28333-28357]:ExpressionStatement[28333-28357]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[28384-28390]:BreakStatement[28384-28390]"
    }, {
      "left" : "case 2:",
      "right" : "case 2:",
      "info" : "SwitchCase[28399-28406]:SwitchCase[28399-28406]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28419-28627]:Block[28419-28627]"
    }, {
      "left" : "offset = _findOffsetForAdd(calcHash(q[0], q[1]));",
      "right" : "offset = _findOffsetForAdd(calcHash(q[0], q[1]));",
      "info" : "ExpressionStatement[28437-28486]:ExpressionStatement[28437-28486]"
    }, {
      "left" : "_hashArea[offset] = q[0];",
      "right" : "_hashArea[offset] = q[0];",
      "info" : "ExpressionStatement[28503-28528]:ExpressionStatement[28503-28528]"
    }, {
      "left" : "_hashArea[offset+1] = q[1];",
      "right" : "_hashArea[offset+1] = q[1];",
      "info" : "ExpressionStatement[28545-28572]:ExpressionStatement[28545-28572]"
    }, {
      "left" : "_hashArea[offset+3] = 2;",
      "right" : "_hashArea[offset+3] = 2;",
      "info" : "ExpressionStatement[28589-28613]:ExpressionStatement[28589-28613]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[28640-28646]:BreakStatement[28640-28646]"
    }, {
      "left" : "case 3:",
      "right" : "case 3:",
      "info" : "SwitchCase[28655-28662]:SwitchCase[28655-28662]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28675-28933]:Block[28675-28933]"
    }, {
      "left" : "offset = _findOffsetForAdd(calcHash(q[0], q[1], q[2]));",
      "right" : "offset = _findOffsetForAdd(calcHash(q[0], q[1], q[2]));",
      "info" : "ExpressionStatement[28693-28748]:ExpressionStatement[28693-28748]"
    }, {
      "left" : "_hashArea[offset] = q[0];",
      "right" : "_hashArea[offset] = q[0];",
      "info" : "ExpressionStatement[28765-28790]:ExpressionStatement[28765-28790]"
    }, {
      "left" : "_hashArea[offset+1] = q[1];",
      "right" : "_hashArea[offset+1] = q[1];",
      "info" : "ExpressionStatement[28807-28834]:ExpressionStatement[28807-28834]"
    }, {
      "left" : "_hashArea[offset+2] = q[2];",
      "right" : "_hashArea[offset+2] = q[2];",
      "info" : "ExpressionStatement[28851-28878]:ExpressionStatement[28851-28878]"
    }, {
      "left" : "_hashArea[offset+3] = 3;",
      "right" : "_hashArea[offset+3] = 3;",
      "info" : "ExpressionStatement[28895-28919]:ExpressionStatement[28895-28919]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[28946-28952]:BreakStatement[28946-28952]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[28961-28969]:SwitchCase[28961-28969]"
    }, {
      "left" : "final int hash = calcHash(q, qlen);",
      "right" : "final int hash = calcHash(q, qlen);",
      "info" : "VariableDeclarationStatement[28982-29017]:VariableDeclarationStatement[28982-29017]"
    }, {
      "left" : "offset = _findOffsetForAdd(hash);",
      "right" : "offset = _findOffsetForAdd(hash);",
      "info" : "ExpressionStatement[29030-29063]:ExpressionStatement[29030-29063]"
    }, {
      "left" : "_hashArea[offset] = hash;",
      "right" : "_hashArea[offset] = hash;",
      "info" : "ExpressionStatement[29077-29102]:ExpressionStatement[29077-29102]"
    }, {
      "left" : "int longStart = _appendLongName(q, qlen);",
      "right" : "int longStart = _appendLongName(q, qlen);",
      "info" : "VariableDeclarationStatement[29115-29156]:VariableDeclarationStatement[29115-29156]"
    }, {
      "left" : "_hashArea[offset+1] = longStart;",
      "right" : "_hashArea[offset+1] = longStart;",
      "info" : "ExpressionStatement[29169-29201]:ExpressionStatement[29169-29201]"
    }, {
      "left" : "_hashArea[offset+3] = qlen;",
      "right" : "_hashArea[offset+3] = qlen;",
      "info" : "ExpressionStatement[29214-29241]:ExpressionStatement[29214-29241]"
    }, {
      "left" : "_names[offset >> 2] = name;",
      "right" : "_names[offset >> 2] = name;",
      "info" : "ExpressionStatement[29298-29325]:ExpressionStatement[29298-29325]"
    }, {
      "left" : "++_count;",
      "right" : "++_count;",
      "info" : "ExpressionStatement[29391-29400]:ExpressionStatement[29391-29400]"
    }, {
      "left" : "_verifyNeedForRehash();",
      "right" : "_verifyNeedForRehash();",
      "info" : "ExpressionStatement[29409-29432]:ExpressionStatement[29409-29432]"
    }, {
      "left" : "return name;",
      "right" : "return name;",
      "info" : "ReturnStatement[29441-29453]:ReturnStatement[29441-29453]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29501-29864]:Block[29501-29864]"
    }, {
      "left" : "if (_count > (_hashSize >> 1))",
      "right" : "if (_count > (_hashSize >> 1))",
      "info" : "IfStatement[29578-29858]:IfStatement[29578-29858]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29609-29858]:Block[29609-29858]"
    }, {
      "left" : "int spillCount = (_spilloverEnd - _spilloverStart()) >> 2;",
      "right" : "int spillCount = (_spilloverEnd - _spilloverStart()) >> 2;",
      "info" : "VariableDeclarationStatement[29635-29693]:VariableDeclarationStatement[29635-29693]"
    }, {
      "left" : "if ((spillCount > (1 + _count >> 7))\n                    || (_count > (_hashSize * 0.80)))",
      "right" : "if ((spillCount > (1 + _count >> 7))\n                    || (_count > (_hashSize * 0.80)))",
      "info" : "IfStatement[29706-29848]:IfStatement[29706-29848]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29797-29848]:Block[29797-29848]"
    }, {
      "left" : "_needRehash = true;",
      "right" : "_needRehash = true;",
      "info" : "ExpressionStatement[29815-29834]:ExpressionStatement[29815-29834]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30483-32660]:Block[30519-32696]"
    }, {
      "left" : "int offset = _calcOffset(hash);",
      "right" : "int offset = _calcOffset(hash);",
      "info" : "VariableDeclarationStatement[30530-30561]:VariableDeclarationStatement[30566-30597]"
    }, {
      "left" : "final int[] hashArea = _hashArea;",
      "right" : "final int[] hashArea = _hashArea;",
      "info" : "VariableDeclarationStatement[30570-30603]:VariableDeclarationStatement[30606-30639]"
    }, {
      "left" : "if (hashArea[offset+3] == 0)",
      "right" : "if (hashArea[offset+3] == 0)",
      "info" : "IfStatement[30612-30758]:IfStatement[30648-30794]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30641-30758]:Block[30677-30794]"
    }, {
      "left" : "return offset;",
      "right" : "return offset;",
      "info" : "ReturnStatement[30734-30748]:ReturnStatement[30770-30784]"
    }, {
      "left" : "int offset2 = _secondaryStart + ((offset >> 3) << 2);",
      "right" : "int offset2 = _secondaryStart + ((offset >> 3) << 2);",
      "info" : "VariableDeclarationStatement[30793-30846]:VariableDeclarationStatement[30829-30882]"
    }, {
      "left" : "if (hashArea[offset2+3] == 0)",
      "right" : "if (hashArea[offset2+3] == 0)",
      "info" : "IfStatement[30855-31037]:IfStatement[30891-31073]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30885-31037]:Block[30921-31073]"
    }, {
      "left" : "return offset2;",
      "right" : "return offset2;",
      "info" : "ReturnStatement[31012-31027]:ReturnStatement[31048-31063]"
    }, {
      "left" : "offset2 = _tertiaryStart + ((offset >> (_tertiaryShift + 2)) << _tertiaryShift);",
      "right" : "offset2 = _tertiaryStart + ((offset >> (_tertiaryShift + 2)) << _tertiaryShift);",
      "info" : "ExpressionStatement[31076-31156]:ExpressionStatement[31112-31192]"
    }, {
      "left" : "final int bucketSize = (1 << _tertiaryShift);",
      "right" : "final int bucketSize = (1 << _tertiaryShift);",
      "info" : "VariableDeclarationStatement[31165-31210]:VariableDeclarationStatement[31201-31246]"
    }, {
      "left" : "for (int end = offset2 + bucketSize; offset2 < end; offset2 += 4)",
      "right" : "for (int end = offset2 + bucketSize; offset2 < end; offset2 += 4)",
      "info" : "ForStatement[31219-31557]:ForStatement[31255-31593]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31285-31557]:Block[31321-31593]"
    }, {
      "left" : "if (hashArea[offset2+3] == 0)",
      "right" : "if (hashArea[offset2+3] == 0)",
      "info" : "IfStatement[31299-31547]:IfStatement[31335-31583]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31329-31547]:Block[31365-31583]"
    }, {
      "left" : "return offset2;",
      "right" : "return offset2;",
      "info" : "ReturnStatement[31518-31533]:ReturnStatement[31554-31569]"
    }, {
      "left" : "offset = _spilloverEnd;",
      "right" : "offset = _spilloverEnd;",
      "info" : "ExpressionStatement[31637-31660]:ExpressionStatement[31673-31696]"
    }, {
      "left" : "_spilloverEnd += 4;",
      "right" : "_spilloverEnd += 4;",
      "info" : "ExpressionStatement[31669-31688]:ExpressionStatement[31705-31724]"
    }, {
      "left" : "final int end = (_hashSize << 3);",
      "right" : "final int end = (_hashSize << 3);",
      "info" : "VariableDeclarationStatement[32268-32301]:VariableDeclarationStatement[32304-32337]"
    }, {
      "left" : "if (_spilloverEnd >= end)",
      "right" : "if (_spilloverEnd >= end)",
      "info" : "IfStatement[32310-32631]:IfStatement[32346-32667]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32336-32631]:Block[32372-32667]"
    }, {
      "left" : "if (_failOnDoS)",
      "right" : "if (_failOnDoS)",
      "info" : "IfStatement[32350-32425]:IfStatement[32386-32461]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32366-32425]:Block[32402-32461]"
    }, {
      "left" : "_reportTooManyCollisions();",
      "right" : "_reportTooManyCollisions();",
      "info" : "ExpressionStatement[32384-32411]:ExpressionStatement[32420-32447]"
    }, {
      "left" : "_needRehash = true;",
      "right" : "_needRehash = true;",
      "info" : "ExpressionStatement[32602-32621]:ExpressionStatement[32638-32657]"
    }, {
      "left" : "return offset;",
      "right" : "return offset;",
      "info" : "ReturnStatement[32640-32654]:ReturnStatement[32676-32690]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32721-33445]:Block[32757-33481]"
    }, {
      "left" : "int start = _longNameOffset;",
      "right" : "int start = _longNameOffset;",
      "info" : "VariableDeclarationStatement[32731-32759]:VariableDeclarationStatement[32767-32795]"
    }, {
      "left" : "if ((start + qlen) > _hashArea.length)",
      "right" : "if ((start + qlen) > _hashArea.length)",
      "info" : "IfStatement[32865-33324]:IfStatement[32901-33360]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32904-33324]:Block[32940-33360]"
    }, {
      "left" : "int toAdd = (start + qlen) - _hashArea.length;",
      "right" : "int toAdd = (start + qlen) - _hashArea.length;",
      "info" : "VariableDeclarationStatement[33000-33046]:VariableDeclarationStatement[33036-33082]"
    }, {
      "left" : "int minAdd = Math.min(4096, _hashSize);",
      "right" : "int minAdd = Math.min(4096, _hashSize);",
      "info" : "VariableDeclarationStatement[33145-33184]:VariableDeclarationStatement[33181-33220]"
    }, {
      "left" : "int newSize = _hashArea.length + Math.max(toAdd, minAdd);",
      "right" : "int newSize = _hashArea.length + Math.max(toAdd, minAdd);",
      "info" : "VariableDeclarationStatement[33198-33255]:VariableDeclarationStatement[33234-33291]"
    }, {
      "left" : "_hashArea = Arrays.copyOf(_hashArea, newSize);",
      "right" : "_hashArea = Arrays.copyOf(_hashArea, newSize);",
      "info" : "ExpressionStatement[33268-33314]:ExpressionStatement[33304-33350]"
    }, {
      "left" : "System.arraycopy(quads, 0, _hashArea, start, qlen);",
      "right" : "System.arraycopy(quads, 0, _hashArea, start, qlen);",
      "info" : "ExpressionStatement[33333-33384]:ExpressionStatement[33369-33420]"
    }, {
      "left" : "_longNameOffset += qlen;",
      "right" : "_longNameOffset += qlen;",
      "info" : "ExpressionStatement[33393-33417]:ExpressionStatement[33429-33453]"
    }, {
      "left" : "return start;",
      "right" : "return start;",
      "info" : "ReturnStatement[33426-33439]:ReturnStatement[33462-33475]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34298-34858]:Block[34334-34894]"
    }, {
      "left" : "int hash = q1 ^ _seed;",
      "right" : "int hash = q1 ^ _seed;",
      "info" : "VariableDeclarationStatement[34308-34330]:VariableDeclarationStatement[34344-34366]"
    }, {
      "left" : "hash += (hash >>> 16);",
      "right" : "hash += (hash >>> 16);",
      "info" : "ExpressionStatement[34680-34702]:ExpressionStatement[34716-34738]"
    }, {
      "left" : "hash ^= (hash << 3);",
      "right" : "hash ^= (hash << 3);",
      "info" : "ExpressionStatement[34742-34762]:ExpressionStatement[34778-34798]"
    }, {
      "left" : "hash += (hash >>> 12);",
      "right" : "hash += (hash >>> 12);",
      "info" : "ExpressionStatement[34793-34815]:ExpressionStatement[34829-34851]"
    }, {
      "left" : "return hash;",
      "right" : "return hash;",
      "info" : "ReturnStatement[34840-34852]:ReturnStatement[34876-34888]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34904-35416]:Block[34940-35452]"
    }, {
      "left" : "int hash = q1;",
      "right" : "int hash = q1;",
      "info" : "VariableDeclarationStatement[35036-35050]:VariableDeclarationStatement[35072-35086]"
    }, {
      "left" : "hash += (hash >>> 15);",
      "right" : "hash += (hash >>> 15);",
      "info" : "ExpressionStatement[35060-35082]:ExpressionStatement[35096-35118]"
    }, {
      "left" : "hash ^= (hash >>> 9);",
      "right" : "hash ^= (hash >>> 9);",
      "info" : "ExpressionStatement[35139-35160]:ExpressionStatement[35175-35196]"
    }, {
      "left" : "hash += (q2 * MULT);",
      "right" : "hash += (q2 * MULT);",
      "info" : "ExpressionStatement[35198-35218]:ExpressionStatement[35234-35254]"
    }, {
      "left" : "hash ^= _seed;",
      "right" : "hash ^= _seed;",
      "info" : "ExpressionStatement[35251-35265]:ExpressionStatement[35287-35301]"
    }, {
      "left" : "hash += (hash >>> 16);",
      "right" : "hash += (hash >>> 16);",
      "info" : "ExpressionStatement[35274-35296]:ExpressionStatement[35310-35332]"
    }, {
      "left" : "hash ^= (hash >>> 4);",
      "right" : "hash ^= (hash >>> 4);",
      "info" : "ExpressionStatement[35330-35351]:ExpressionStatement[35366-35387]"
    }, {
      "left" : "hash += (hash << 3);",
      "right" : "hash += (hash << 3);",
      "info" : "ExpressionStatement[35360-35380]:ExpressionStatement[35396-35416]"
    }, {
      "left" : "return hash;",
      "right" : "return hash;",
      "info" : "ReturnStatement[35398-35410]:ReturnStatement[35434-35446]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35470-35914]:Block[35506-35950]"
    }, {
      "left" : "int hash = q1 ^ _seed;",
      "right" : "int hash = q1 ^ _seed;",
      "info" : "VariableDeclarationStatement[35537-35559]:VariableDeclarationStatement[35573-35595]"
    }, {
      "left" : "hash += (hash >>> 9);",
      "right" : "hash += (hash >>> 9);",
      "info" : "ExpressionStatement[35568-35589]:ExpressionStatement[35604-35625]"
    }, {
      "left" : "hash *= MULT3;",
      "right" : "hash *= MULT3;",
      "info" : "ExpressionStatement[35598-35612]:ExpressionStatement[35634-35648]"
    }, {
      "left" : "hash += q2;",
      "right" : "hash += q2;",
      "info" : "ExpressionStatement[35621-35632]:ExpressionStatement[35657-35668]"
    }, {
      "left" : "hash *= MULT;",
      "right" : "hash *= MULT;",
      "info" : "ExpressionStatement[35641-35654]:ExpressionStatement[35677-35690]"
    }, {
      "left" : "hash += (hash >>> 15);",
      "right" : "hash += (hash >>> 15);",
      "info" : "ExpressionStatement[35663-35685]:ExpressionStatement[35699-35721]"
    }, {
      "left" : "hash ^= q3;",
      "right" : "hash ^= q3;",
      "info" : "ExpressionStatement[35694-35705]:ExpressionStatement[35730-35741]"
    }, {
      "left" : "hash += (hash >>> 4);",
      "right" : "hash += (hash >>> 4);",
      "info" : "ExpressionStatement[35804-35825]:ExpressionStatement[35840-35861]"
    }, {
      "left" : "hash += (hash >>> 15);",
      "right" : "hash += (hash >>> 15);",
      "info" : "ExpressionStatement[35835-35857]:ExpressionStatement[35871-35893]"
    }, {
      "left" : "hash ^= (hash << 9);",
      "right" : "hash ^= (hash << 9);",
      "info" : "ExpressionStatement[35866-35886]:ExpressionStatement[35902-35922]"
    }, {
      "left" : "return hash;",
      "right" : "return hash;",
      "info" : "ReturnStatement[35896-35908]:ReturnStatement[35932-35944]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35963-36818]:Block[35999-36854]"
    }, {
      "left" : "if (qlen < 4)",
      "right" : "if (qlen < 4)",
      "info" : "IfStatement[35973-36048]:IfStatement[36009-36084]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35987-36048]:Block[36023-36084]"
    }, {
      "left" : "throw new IllegalArgumentException();",
      "right" : "throw new IllegalArgumentException();",
      "info" : "ThrowStatement[36001-36038]:ThrowStatement[36037-36074]"
    }, {
      "left" : "int hash = q[0] ^ _seed;",
      "right" : "int hash = q[0] ^ _seed;",
      "info" : "VariableDeclarationStatement[36320-36344]:VariableDeclarationStatement[36356-36380]"
    }, {
      "left" : "hash += (hash >>> 9);",
      "right" : "hash += (hash >>> 9);",
      "info" : "ExpressionStatement[36353-36374]:ExpressionStatement[36389-36410]"
    }, {
      "left" : "hash += q[1];",
      "right" : "hash += q[1];",
      "info" : "ExpressionStatement[36383-36396]:ExpressionStatement[36419-36432]"
    }, {
      "left" : "hash += (hash >>> 15);",
      "right" : "hash += (hash >>> 15);",
      "info" : "ExpressionStatement[36405-36427]:ExpressionStatement[36441-36463]"
    }, {
      "left" : "hash *= MULT;",
      "right" : "hash *= MULT;",
      "info" : "ExpressionStatement[36436-36449]:ExpressionStatement[36472-36485]"
    }, {
      "left" : "hash ^= q[2];",
      "right" : "hash ^= q[2];",
      "info" : "ExpressionStatement[36458-36471]:ExpressionStatement[36494-36507]"
    }, {
      "left" : "hash += (hash >>> 4);",
      "right" : "hash += (hash >>> 4);",
      "info" : "ExpressionStatement[36480-36501]:ExpressionStatement[36516-36537]"
    }, {
      "left" : "for (int i = 3; i < qlen; ++i)",
      "right" : "for (int i = 3; i < qlen; ++i)",
      "info" : "ForStatement[36511-36648]:ForStatement[36547-36684]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36542-36648]:Block[36578-36684]"
    }, {
      "left" : "int next = q[i];",
      "right" : "int next = q[i];",
      "info" : "VariableDeclarationStatement[36556-36572]:VariableDeclarationStatement[36592-36608]"
    }, {
      "left" : "next = next ^ (next >> 21);",
      "right" : "next = next ^ (next >> 21);",
      "info" : "ExpressionStatement[36585-36612]:ExpressionStatement[36621-36648]"
    }, {
      "left" : "hash += next;",
      "right" : "hash += next;",
      "info" : "ExpressionStatement[36625-36638]:ExpressionStatement[36661-36674]"
    }, {
      "left" : "hash *= MULT2;",
      "right" : "hash *= MULT2;",
      "info" : "ExpressionStatement[36657-36671]:ExpressionStatement[36693-36707]"
    }, {
      "left" : "hash += (hash >>> 19);",
      "right" : "hash += (hash >>> 19);",
      "info" : "ExpressionStatement[36740-36762]:ExpressionStatement[36776-36798]"
    }, {
      "left" : "hash ^= (hash << 5);",
      "right" : "hash ^= (hash << 5);",
      "info" : "ExpressionStatement[36771-36791]:ExpressionStatement[36807-36827]"
    }, {
      "left" : "return hash;",
      "right" : "return hash;",
      "info" : "ReturnStatement[36800-36812]:ReturnStatement[36836-36848]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37011-40155]:Block[37047-40191]"
    }, {
      "left" : "_needRehash = false;",
      "right" : "_needRehash = false;",
      "info" : "ExpressionStatement[37021-37041]:ExpressionStatement[37057-37077]"
    }, {
      "left" : "_hashShared = false;",
      "right" : "_hashShared = false;",
      "info" : "ExpressionStatement[37135-37155]:ExpressionStatement[37171-37191]"
    }, {
      "left" : "final int[] oldHashArea = _hashArea;",
      "right" : "final int[] oldHashArea = _hashArea;",
      "info" : "VariableDeclarationStatement[37337-37373]:VariableDeclarationStatement[37373-37409]"
    }, {
      "left" : "final String[] oldNames = _names;",
      "right" : "final String[] oldNames = _names;",
      "info" : "VariableDeclarationStatement[37382-37415]:VariableDeclarationStatement[37418-37451]"
    }, {
      "left" : "final int oldSize = _hashSize;",
      "right" : "final int oldSize = _hashSize;",
      "info" : "VariableDeclarationStatement[37424-37454]:VariableDeclarationStatement[37460-37490]"
    }, {
      "left" : "final int oldCount = _count;",
      "right" : "final int oldCount = _count;",
      "info" : "VariableDeclarationStatement[37463-37491]:VariableDeclarationStatement[37499-37527]"
    }, {
      "left" : "final int newSize = oldSize + oldSize;",
      "right" : "final int newSize = oldSize + oldSize;",
      "info" : "VariableDeclarationStatement[37500-37538]:VariableDeclarationStatement[37536-37574]"
    }, {
      "left" : "final int oldEnd = _spilloverEnd;",
      "right" : "final int oldEnd = _spilloverEnd;",
      "info" : "VariableDeclarationStatement[37547-37580]:VariableDeclarationStatement[37583-37616]"
    }, {
      "left" : "if (newSize > MAX_T_SIZE)",
      "right" : "if (newSize > MAX_T_SIZE)",
      "info" : "IfStatement[37744-37832]:IfStatement[37780-37868]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37770-37832]:Block[37806-37868]"
    }, {
      "left" : "nukeSymbols(true);",
      "right" : "nukeSymbols(true);",
      "info" : "ExpressionStatement[37784-37802]:ExpressionStatement[37820-37838]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[37815-37822]:ReturnStatement[37851-37858]"
    }, {
      "left" : "_hashArea = new int[oldHashArea.length + (oldSize<<3)];",
      "right" : "_hashArea = new int[oldHashArea.length + (oldSize<<3)];",
      "info" : "ExpressionStatement[37912-37967]:ExpressionStatement[37948-38003]"
    }, {
      "left" : "_hashSize = newSize;",
      "right" : "_hashSize = newSize;",
      "info" : "ExpressionStatement[37976-37996]:ExpressionStatement[38012-38032]"
    }, {
      "left" : "_secondaryStart = (newSize << 2);",
      "right" : "_secondaryStart = (newSize << 2);",
      "info" : "ExpressionStatement[38005-38038]:ExpressionStatement[38041-38074]"
    }, {
      "left" : "_tertiaryStart = _secondaryStart + (_secondaryStart >> 1);",
      "right" : "_tertiaryStart = _secondaryStart + (_secondaryStart >> 1);",
      "info" : "ExpressionStatement[38067-38125]:ExpressionStatement[38103-38161]"
    }, {
      "left" : "_tertiaryShift = _calcTertiaryShift(newSize);",
      "right" : "_tertiaryShift = _calcTertiaryShift(newSize);",
      "info" : "ExpressionStatement[38159-38204]:ExpressionStatement[38195-38240]"
    }, {
      "left" : "_names = new String[oldNames.length << 1];",
      "right" : "_names = new String[oldNames.length << 1];",
      "info" : "ExpressionStatement[38265-38307]:ExpressionStatement[38301-38343]"
    }, {
      "left" : "nukeSymbols(false);",
      "right" : "nukeSymbols(false);",
      "info" : "ExpressionStatement[38316-38335]:ExpressionStatement[38352-38371]"
    }, {
      "left" : "int copyCount = 0;",
      "right" : "int copyCount = 0;",
      "info" : "VariableDeclarationStatement[38658-38676]:VariableDeclarationStatement[38694-38712]"
    }, {
      "left" : "int[] q = new int[16];",
      "right" : "int[] q = new int[16];",
      "info" : "VariableDeclarationStatement[38685-38707]:VariableDeclarationStatement[38721-38743]"
    }, {
      "left" : "for (int offset = 0, end = oldEnd; offset < end; offset += 4)",
      "right" : "for (int offset = 0, end = oldEnd; offset < end; offset += 4)",
      "info" : "ForStatement[38716-39877]:ForStatement[38752-39913]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38778-39877]:Block[38814-39913]"
    }, {
      "left" : "int len = oldHashArea[offset+3];",
      "right" : "int len = oldHashArea[offset+3];",
      "info" : "VariableDeclarationStatement[38792-38824]:VariableDeclarationStatement[38828-38860]"
    }, {
      "left" : "if (len == 0)",
      "right" : "if (len == 0)",
      "info" : "IfStatement[38837-38912]:IfStatement[38873-38948]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38851-38912]:Block[38887-38948]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[38889-38898]:ContinueStatement[38925-38934]"
    }, {
      "left" : "++copyCount;",
      "right" : "++copyCount;",
      "info" : "ExpressionStatement[38925-38937]:ExpressionStatement[38961-38973]"
    }, {
      "left" : "String name = oldNames[offset>>2];",
      "right" : "String name = oldNames[offset>>2];",
      "info" : "VariableDeclarationStatement[38950-38984]:VariableDeclarationStatement[38986-39020]"
    }, {
      "left" : "switch (len) {\n            case 1:\n                q[0] = oldHashArea[offset];\n                addName(name, q, 1);\n                break;\n            case 2:\n                q[0] = oldHashArea[offset];\n                q[1] = oldHashArea[offset+1];\n                addName(name, q, 2);\n                break;\n            case 3:\n                q[0] = oldHashArea[offset];\n                q[1] = oldHashArea[offset+1];\n                q[2] = oldHashArea[offset+2];\n                addName(name, q, 3);\n                break;\n            default:\n                if (len > q.length) {\n                    q = new int[len];\n                }\n                // #0 is hash, #1 offset\n                int qoff = oldHashArea[offset+1];\n                System.arraycopy(oldHashArea, qoff, q, 0, len);\n                addName(name, q, len);\n                break;\n            }",
      "right" : "switch (len) {\n            case 1:\n                q[0] = oldHashArea[offset];\n                addName(name, q, 1);\n                break;\n            case 2:\n                q[0] = oldHashArea[offset];\n                q[1] = oldHashArea[offset+1];\n                addName(name, q, 2);\n                break;\n            case 3:\n                q[0] = oldHashArea[offset];\n                q[1] = oldHashArea[offset+1];\n                q[2] = oldHashArea[offset+2];\n                addName(name, q, 3);\n                break;\n            default:\n                if (len > q.length) {\n                    q = new int[len];\n                }\n                // #0 is hash, #1 offset\n                int qoff = oldHashArea[offset+1];\n                System.arraycopy(oldHashArea, qoff, q, 0, len);\n                addName(name, q, len);\n                break;\n            }",
      "info" : "SwitchStatement[38997-39867]:SwitchStatement[39033-39903]"
    }, {
      "left" : "case 1:",
      "right" : "case 1:",
      "info" : "SwitchCase[39024-39031]:SwitchCase[39060-39067]"
    }, {
      "left" : "q[0] = oldHashArea[offset];",
      "right" : "q[0] = oldHashArea[offset];",
      "info" : "ExpressionStatement[39048-39075]:ExpressionStatement[39084-39111]"
    }, {
      "left" : "addName(name, q, 1);",
      "right" : "addName(name, q, 1);",
      "info" : "ExpressionStatement[39092-39112]:ExpressionStatement[39128-39148]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[39129-39135]:BreakStatement[39165-39171]"
    }, {
      "left" : "case 2:",
      "right" : "case 2:",
      "info" : "SwitchCase[39148-39155]:SwitchCase[39184-39191]"
    }, {
      "left" : "q[0] = oldHashArea[offset];",
      "right" : "q[0] = oldHashArea[offset];",
      "info" : "ExpressionStatement[39172-39199]:ExpressionStatement[39208-39235]"
    }, {
      "left" : "q[1] = oldHashArea[offset+1];",
      "right" : "q[1] = oldHashArea[offset+1];",
      "info" : "ExpressionStatement[39216-39245]:ExpressionStatement[39252-39281]"
    }, {
      "left" : "addName(name, q, 2);",
      "right" : "addName(name, q, 2);",
      "info" : "ExpressionStatement[39262-39282]:ExpressionStatement[39298-39318]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[39299-39305]:BreakStatement[39335-39341]"
    }, {
      "left" : "case 3:",
      "right" : "case 3:",
      "info" : "SwitchCase[39318-39325]:SwitchCase[39354-39361]"
    }, {
      "left" : "q[0] = oldHashArea[offset];",
      "right" : "q[0] = oldHashArea[offset];",
      "info" : "ExpressionStatement[39342-39369]:ExpressionStatement[39378-39405]"
    }, {
      "left" : "q[1] = oldHashArea[offset+1];",
      "right" : "q[1] = oldHashArea[offset+1];",
      "info" : "ExpressionStatement[39386-39415]:ExpressionStatement[39422-39451]"
    }, {
      "left" : "q[2] = oldHashArea[offset+2];",
      "right" : "q[2] = oldHashArea[offset+2];",
      "info" : "ExpressionStatement[39432-39461]:ExpressionStatement[39468-39497]"
    }, {
      "left" : "addName(name, q, 3);",
      "right" : "addName(name, q, 3);",
      "info" : "ExpressionStatement[39478-39498]:ExpressionStatement[39514-39534]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[39515-39521]:BreakStatement[39551-39557]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[39534-39542]:SwitchCase[39570-39578]"
    }, {
      "left" : "if (len > q.length)",
      "right" : "if (len > q.length)",
      "info" : "IfStatement[39559-39636]:IfStatement[39595-39672]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39579-39636]:Block[39615-39672]"
    }, {
      "left" : "q = new int[len];",
      "right" : "q = new int[len];",
      "info" : "ExpressionStatement[39601-39618]:ExpressionStatement[39637-39654]"
    }, {
      "left" : "int qoff = oldHashArea[offset+1];",
      "right" : "int qoff = oldHashArea[offset+1];",
      "info" : "VariableDeclarationStatement[39694-39727]:VariableDeclarationStatement[39730-39763]"
    }, {
      "left" : "System.arraycopy(oldHashArea, qoff, q, 0, len);",
      "right" : "System.arraycopy(oldHashArea, qoff, q, 0, len);",
      "info" : "ExpressionStatement[39744-39791]:ExpressionStatement[39780-39827]"
    }, {
      "left" : "addName(name, q, len);",
      "right" : "addName(name, q, len);",
      "info" : "ExpressionStatement[39808-39830]:ExpressionStatement[39844-39866]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[39847-39853]:BreakStatement[39883-39889]"
    }, {
      "left" : "if (copyCount != oldCount)",
      "right" : "if (copyCount != oldCount)",
      "info" : "IfStatement[40001-40149]:IfStatement[40037-40185]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40028-40149]:Block[40064-40185]"
    }, {
      "left" : "throw new IllegalStateException(\"Failed rehash(): old count=\"+oldCount+\", copyCount=\"+copyCount);",
      "right" : "throw new IllegalStateException(\"Failed rehash(): old count=\"+oldCount+\", copyCount=\"+copyCount);",
      "info" : "ThrowStatement[40042-40139]:ThrowStatement[40078-40175]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40310-40675]:Block[40346-40711]"
    }, {
      "left" : "_count = 0;",
      "right" : "_count = 0;",
      "info" : "ExpressionStatement[40320-40331]:ExpressionStatement[40356-40367]"
    }, {
      "left" : "_spilloverEnd = _spilloverStart();",
      "right" : "_spilloverEnd = _spilloverStart();",
      "info" : "ExpressionStatement[40408-40442]:ExpressionStatement[40444-40478]"
    }, {
      "left" : "_longNameOffset = _hashSize << 3;",
      "right" : "_longNameOffset = _hashSize << 3;",
      "info" : "ExpressionStatement[40528-40561]:ExpressionStatement[40564-40597]"
    }, {
      "left" : "if (fill)",
      "right" : "if (fill)",
      "info" : "IfStatement[40570-40669]:IfStatement[40606-40705]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40580-40669]:Block[40616-40705]"
    }, {
      "left" : "Arrays.fill(_hashArea, 0);",
      "right" : "Arrays.fill(_hashArea, 0);",
      "info" : "ExpressionStatement[40594-40620]:ExpressionStatement[40630-40656]"
    }, {
      "left" : "Arrays.fill(_names, null);",
      "right" : "Arrays.fill(_names, null);",
      "info" : "ExpressionStatement[40633-40659]:ExpressionStatement[40669-40695]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40964-41155]:Block[41000-41191]"
    }, {
      "left" : "int offset = _hashSize;",
      "right" : "int offset = _hashSize;",
      "info" : "VariableDeclarationStatement[41087-41110]:VariableDeclarationStatement[41123-41146]"
    }, {
      "left" : "return (offset << 3) - offset;",
      "right" : "return (offset << 3) - offset;",
      "info" : "ReturnStatement[41119-41149]:ReturnStatement[41155-41185]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41207-41775]:Block[41243-41811]"
    }, {
      "left" : "if (_hashSize <= 1024)",
      "right" : "if (_hashSize <= 1024)",
      "info" : "IfStatement[41306-41405]:IfStatement[41342-41441]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41329-41405]:Block[41365-41441]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[41388-41395]:ReturnStatement[41424-41431]"
    }, {
      "left" : "throw new IllegalStateException(\"Spill-over slots in symbol table with \"+_count\n                +\" entries, hash area of \"+_hashSize+\" slots is now full (all \"\n                +(_hashSize >> 3)+\" slots -- suspect a DoS attack based on hash collisions.\"\n                +\" You can disable the check via `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`\");",
      "right" : "throw new IllegalStateException(\"Spill-over slots in symbol table with \"+_count\n                +\" entries, hash area of \"+_hashSize+\" slots is now full (all \"\n                +(_hashSize >> 3)+\" slots -- suspect a DoS attack based on hash collisions.\"\n                +\" You can disable the check via `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`\");",
      "info" : "ThrowStatement[41414-41769]:ThrowStatement[41450-41805]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41833-42376]:Block[41869-42412]"
    }, {
      "left" : "int tertSlots = (primarySlots) >> 2;",
      "right" : "int tertSlots = (primarySlots) >> 2;",
      "info" : "VariableDeclarationStatement[41908-41944]:VariableDeclarationStatement[41944-41980]"
    }, {
      "left" : "if (tertSlots < 64)",
      "right" : "if (tertSlots < 64)",
      "info" : "IfStatement[42034-42087]:IfStatement[42070-42123]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42054-42087]:Block[42090-42123]"
    }, {
      "left" : "return 4;",
      "right" : "return 4;",
      "info" : "ReturnStatement[42068-42077]:ReturnStatement[42104-42113]"
    }, {
      "left" : "if (tertSlots <= 256)",
      "right" : "if (tertSlots <= 256)",
      "info" : "IfStatement[42096-42195]:IfStatement[42132-42231]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42118-42195]:Block[42154-42231]"
    }, {
      "left" : "return 5;",
      "right" : "return 5;",
      "info" : "ReturnStatement[42176-42185]:ReturnStatement[42212-42221]"
    }, {
      "left" : "if (tertSlots <= 1024)",
      "right" : "if (tertSlots <= 1024)",
      "info" : "IfStatement[42204-42307]:IfStatement[42240-42343]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42227-42307]:Block[42263-42343]"
    }, {
      "left" : "return 6;",
      "right" : "return 6;",
      "info" : "ReturnStatement[42288-42297]:ReturnStatement[42324-42333]"
    }, {
      "left" : "return 7;",
      "right" : "return 7;",
      "info" : "ReturnStatement[42361-42370]:ReturnStatement[42397-42406]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43237-43524]:Block[43273-43560]"
    }, {
      "left" : "this.size = size;",
      "right" : "this.size = size;",
      "info" : "ExpressionStatement[43251-43268]:ExpressionStatement[43287-43304]"
    }, {
      "left" : "this.count = count;",
      "right" : "this.count = count;",
      "info" : "ExpressionStatement[43281-43300]:ExpressionStatement[43317-43336]"
    }, {
      "left" : "this.tertiaryShift = tertiaryShift;",
      "right" : "this.tertiaryShift = tertiaryShift;",
      "info" : "ExpressionStatement[43313-43348]:ExpressionStatement[43349-43384]"
    }, {
      "left" : "this.mainHash = mainHash;",
      "right" : "this.mainHash = mainHash;",
      "info" : "ExpressionStatement[43361-43386]:ExpressionStatement[43397-43422]"
    }, {
      "left" : "this.names = names;",
      "right" : "this.names = names;",
      "info" : "ExpressionStatement[43399-43418]:ExpressionStatement[43435-43454]"
    }, {
      "left" : "this.spilloverEnd = spilloverEnd;",
      "right" : "this.spilloverEnd = spilloverEnd;",
      "info" : "ExpressionStatement[43431-43464]:ExpressionStatement[43467-43500]"
    }, {
      "left" : "this.longNameOffset = longNameOffset;",
      "right" : "this.longNameOffset = longNameOffset;",
      "info" : "ExpressionStatement[43477-43514]:ExpressionStatement[43513-43550]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43587-43878]:Block[43623-43914]"
    }, {
      "left" : "size = src._hashSize;",
      "right" : "size = src._hashSize;",
      "info" : "ExpressionStatement[43601-43622]:ExpressionStatement[43637-43658]"
    }, {
      "left" : "count = src._count;",
      "right" : "count = src._count;",
      "info" : "ExpressionStatement[43635-43654]:ExpressionStatement[43671-43690]"
    }, {
      "left" : "tertiaryShift = src._tertiaryShift;",
      "right" : "tertiaryShift = src._tertiaryShift;",
      "info" : "ExpressionStatement[43667-43702]:ExpressionStatement[43703-43738]"
    }, {
      "left" : "mainHash = src._hashArea;",
      "right" : "mainHash = src._hashArea;",
      "info" : "ExpressionStatement[43715-43740]:ExpressionStatement[43751-43776]"
    }, {
      "left" : "names = src._names;",
      "right" : "names = src._names;",
      "info" : "ExpressionStatement[43753-43772]:ExpressionStatement[43789-43808]"
    }, {
      "left" : "spilloverEnd = src._spilloverEnd;",
      "right" : "spilloverEnd = src._spilloverEnd;",
      "info" : "ExpressionStatement[43785-43818]:ExpressionStatement[43821-43854]"
    }, {
      "left" : "longNameOffset = src._longNameOffset;",
      "right" : "longNameOffset = src._longNameOffset;",
      "info" : "ExpressionStatement[43831-43868]:ExpressionStatement[43867-43904]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43934-44458]:Block[43970-44494]"
    }, {
      "left" : "int hashAreaSize = sz << 3;",
      "right" : "int hashAreaSize = sz << 3;",
      "info" : "VariableDeclarationStatement[43948-43975]:VariableDeclarationStatement[43984-44011]"
    }, {
      "left" : "int tertShift = _calcTertiaryShift(sz);",
      "right" : "int tertShift = _calcTertiaryShift(sz);",
      "info" : "VariableDeclarationStatement[43988-44027]:VariableDeclarationStatement[44024-44063]"
    }, {
      "left" : "return new TableInfo(sz, // hashSize\n                    0, // count\n                    tertShift,\n                    new int[hashAreaSize], // mainHash, 2x slots, 4 ints per slot\n                    new String[sz << 1], // names == 2x slots\n                    hashAreaSize - sz, // at 7/8 of the total area\n                    hashAreaSize // longNameOffset, immediately after main hashes\n            );",
      "right" : "return new TableInfo(sz, // hashSize\n                    0, // count\n                    tertShift,\n                    new int[hashAreaSize], // mainHash, 2x slots, 4 ints per slot\n                    new String[sz << 1], // names == 2x slots\n                    hashAreaSize - sz, // at 7/8 of the total area\n                    hashAreaSize // longNameOffset, immediately after main hashes\n            );",
      "info" : "ReturnStatement[44041-44448]:ReturnStatement[44077-44484]"
    } ]
  },
  "interFileMappings" : { }
}