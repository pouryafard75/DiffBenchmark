{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "CheckGlobalThis",
      "right" : "CheckGlobalThis",
      "info" : "TypeDeclaration[873-5780]:TypeDeclaration[873-5922]"
    }, {
      "left" : "static final DiagnosticType GLOBAL_THIS = DiagnosticType.warning(\n      \"JSC_USED_GLOBAL_THIS\",\n      \"dangerous use of the global 'this' object\");",
      "right" : "static final DiagnosticType GLOBAL_THIS = DiagnosticType.warning(\n      \"JSC_USED_GLOBAL_THIS\",\n      \"dangerous use of the global 'this' object\");",
      "info" : "FieldDeclaration[1879-2026]:FieldDeclaration[1879-2026]"
    }, {
      "left" : "private final AbstractCompiler compiler;",
      "right" : "private final AbstractCompiler compiler;",
      "info" : "FieldDeclaration[2030-2070]:FieldDeclaration[2030-2070]"
    }, {
      "left" : "private final CheckLevel level;",
      "right" : "private final CheckLevel level;",
      "info" : "FieldDeclaration[2073-2104]:FieldDeclaration[2073-2104]"
    }, {
      "left" : "private Node assignLhsChild = null;",
      "right" : "private Node assignLhsChild = null;",
      "info" : "FieldDeclaration[2110-2336]:FieldDeclaration[2110-2336]"
    }, {
      "left" : "CheckGlobalThis(AbstractCompiler compiler, CheckLevel level)",
      "right" : "CheckGlobalThis(AbstractCompiler compiler, CheckLevel level)",
      "info" : "MethodDeclaration[2340-2460]:MethodDeclaration[2340-2460]"
    }, {
      "left" : "public boolean shouldTraverse(NodeTraversal t, Node n, Node parent)",
      "right" : "public boolean shouldTraverse(NodeTraversal t, Node n, Node parent)",
      "info" : "MethodDeclaration[2464-4404]:MethodDeclaration[2464-4546]"
    }, {
      "left" : "public void visit(NodeTraversal t, Node n, Node parent)",
      "right" : "public void visit(NodeTraversal t, Node n, Node parent)",
      "info" : "MethodDeclaration[4408-4668]:MethodDeclaration[4550-4810]"
    }, {
      "left" : "private boolean shouldReportThis(Node n, Node parent)",
      "right" : "private boolean shouldReportThis(Node n, Node parent)",
      "info" : "MethodDeclaration[4672-4955]:MethodDeclaration[4814-5097]"
    }, {
      "left" : "private JSDocInfo getFunctionJsDocInfo(Node n)",
      "right" : "private JSDocInfo getFunctionJsDocInfo(Node n)",
      "info" : "MethodDeclaration[4959-5778]:MethodDeclaration[5101-5920]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2401-2460]:Block[2401-2460]"
    }, {
      "left" : "this.compiler = compiler;",
      "right" : "this.compiler = compiler;",
      "info" : "ExpressionStatement[2407-2432]:ExpressionStatement[2407-2432]"
    }, {
      "left" : "this.level = level;",
      "right" : "this.level = level;",
      "info" : "ExpressionStatement[2437-2456]:ExpressionStatement[2437-2456]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2693-4404]:Block[2693-4546]"
    }, {
      "left" : "if (n.getType() == Token.FUNCTION)",
      "right" : "if (n.getType() == Token.FUNCTION)",
      "info" : "IfStatement[2700-3506]:IfStatement[2700-3540]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2735-3506]:Block[2735-3540]"
    }, {
      "left" : "JSDocInfo jsDoc = getFunctionJsDocInfo(n);",
      "right" : "JSDocInfo jsDoc = getFunctionJsDocInfo(n);",
      "info" : "VariableDeclarationStatement[2851-2893]:VariableDeclarationStatement[2851-2893]"
    }, {
      "left" : "if (jsDoc != null &&\n          (jsDoc.isConstructor() ||\n           jsDoc.hasThisType() ||\n           jsDoc.isOverride()))",
      "right" : "if (jsDoc != null &&\n          (jsDoc.isConstructor() ||\n           jsDoc.isInterface() ||\n           jsDoc.hasThisType() ||\n           jsDoc.isOverride()))",
      "info" : "IfStatement[2900-3054]:IfStatement[2900-3088]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3023-3054]:Block[3057-3088]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[3033-3046]:ReturnStatement[3067-3080]"
    }, {
      "left" : "int pType = parent.getType();",
      "right" : "int pType = parent.getType();",
      "info" : "VariableDeclarationStatement[3295-3324]:VariableDeclarationStatement[3329-3358]"
    }, {
      "left" : "if (!(pType == Token.BLOCK ||\n            pType == Token.SCRIPT ||\n            pType == Token.NAME ||\n            pType == Token.ASSIGN))",
      "right" : "if (!(pType == Token.BLOCK ||\n            pType == Token.SCRIPT ||\n            pType == Token.NAME ||\n            pType == Token.ASSIGN))",
      "info" : "IfStatement[3331-3500]:IfStatement[3365-3534]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3469-3500]:Block[3503-3534]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[3479-3492]:ReturnStatement[3513-3526]"
    }, {
      "left" : "if (parent != null && parent.getType() == Token.ASSIGN)",
      "right" : "if (parent != null && parent.getType() == Token.ASSIGN)",
      "info" : "IfStatement[3512-4382]:IfStatement[3546-4524]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3568-4382]:Block[3602-4524]"
    }, {
      "left" : "Node lhs = parent.getFirstChild();",
      "right" : "Node lhs = parent.getFirstChild();",
      "info" : "VariableDeclarationStatement[3576-3610]:VariableDeclarationStatement[3610-3644]"
    }, {
      "left" : "Node rhs = lhs.getNext();",
      "right" : "Node rhs = lhs.getNext();",
      "info" : "VariableDeclarationStatement[3617-3642]:VariableDeclarationStatement[3651-3676]"
    }, {
      "left" : "if (n == lhs)",
      "right" : "if (n == lhs)",
      "info" : "IfStatement[3656-4376]:IfStatement[3690-4518]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3670-3954]:Block[3704-3988]"
    }, {
      "left" : "if (assignLhsChild == null)",
      "right" : "if (assignLhsChild == null)",
      "info" : "IfStatement[3875-3946]:IfStatement[3909-3980]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3903-3946]:Block[3937-3980]"
    }, {
      "left" : "assignLhsChild = lhs;",
      "right" : "assignLhsChild = lhs;",
      "info" : "ExpressionStatement[3915-3936]:ExpressionStatement[3949-3970]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3960-4376]:Block[4146-4510]"
    }, {
      "left" : "if (lhs.getType() == Token.GETPROP &&\n              lhs.getLastChild().getString().equals(\"prototype\"))",
      "right" : "if (lhs.getType() == Token.GETPROP &&\n              lhs.getLastChild().getString().equals(\"prototype\"))",
      "info" : "IfStatement[4089-4232]:IfStatement[4158-4301]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4193-4232]:Block[4262-4301]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[4207-4220]:ReturnStatement[4276-4289]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4329-4368]:Block[4461-4500]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[4343-4356]:ReturnStatement[4475-4488]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[4388-4400]:ReturnStatement[4530-4542]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4464-4668]:Block[4606-4810]"
    }, {
      "left" : "if (n.getType() == Token.THIS && shouldReportThis(n, parent))",
      "right" : "if (n.getType() == Token.THIS && shouldReportThis(n, parent))",
      "info" : "IfStatement[4470-4598]:IfStatement[4612-4740]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4532-4598]:Block[4674-4740]"
    }, {
      "left" : "compiler.report(t.makeError(n, level, GLOBAL_THIS));",
      "right" : "compiler.report(t.makeError(n, level, GLOBAL_THIS));",
      "info" : "ExpressionStatement[4540-4592]:ExpressionStatement[4682-4734]"
    }, {
      "left" : "if (n == assignLhsChild)",
      "right" : "if (n == assignLhsChild)",
      "info" : "IfStatement[4603-4664]:IfStatement[4745-4806]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4628-4664]:Block[4770-4806]"
    }, {
      "left" : "assignLhsChild = null;",
      "right" : "assignLhsChild = null;",
      "info" : "ExpressionStatement[4636-4658]:ExpressionStatement[4778-4800]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4726-4955]:Block[4868-5097]"
    }, {
      "left" : "if (assignLhsChild != null)",
      "right" : "if (assignLhsChild != null)",
      "info" : "IfStatement[4732-4847]:IfStatement[4874-4989]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4760-4847]:Block[4902-4989]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[4829-4841]:ReturnStatement[4971-4983]"
    }, {
      "left" : "return parent != null && NodeUtil.isGet(parent);",
      "right" : "return parent != null && NodeUtil.isGet(parent);",
      "info" : "ReturnStatement[4903-4951]:ReturnStatement[5045-5093]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5282-5778]:Block[5424-5920]"
    }, {
      "left" : "JSDocInfo jsDoc = n.getJSDocInfo();",
      "right" : "JSDocInfo jsDoc = n.getJSDocInfo();",
      "info" : "VariableDeclarationStatement[5288-5323]:VariableDeclarationStatement[5430-5465]"
    }, {
      "left" : "Node parent = n.getParent();",
      "right" : "Node parent = n.getParent();",
      "info" : "VariableDeclarationStatement[5328-5356]:VariableDeclarationStatement[5470-5498]"
    }, {
      "left" : "if (jsDoc == null)",
      "right" : "if (jsDoc == null)",
      "info" : "IfStatement[5361-5756]:IfStatement[5503-5898]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5380-5756]:Block[5522-5898]"
    }, {
      "left" : "int parentType = parent.getType();",
      "right" : "int parentType = parent.getType();",
      "info" : "VariableDeclarationStatement[5388-5422]:VariableDeclarationStatement[5530-5564]"
    }, {
      "left" : "if (parentType == Token.NAME || parentType == Token.ASSIGN)",
      "right" : "if (parentType == Token.NAME || parentType == Token.ASSIGN)",
      "info" : "IfStatement[5429-5750]:IfStatement[5571-5892]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5489-5750]:Block[5631-5892]"
    }, {
      "left" : "jsDoc = parent.getJSDocInfo();",
      "right" : "jsDoc = parent.getJSDocInfo();",
      "info" : "ExpressionStatement[5499-5529]:ExpressionStatement[5641-5671]"
    }, {
      "left" : "if (jsDoc == null && parentType == Token.NAME)",
      "right" : "if (jsDoc == null && parentType == Token.NAME)",
      "info" : "IfStatement[5538-5742]:IfStatement[5680-5884]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5585-5742]:Block[5727-5884]"
    }, {
      "left" : "Node gramps = parent.getParent();",
      "right" : "Node gramps = parent.getParent();",
      "info" : "VariableDeclarationStatement[5597-5630]:VariableDeclarationStatement[5739-5772]"
    }, {
      "left" : "if (gramps.getType() == Token.VAR)",
      "right" : "if (gramps.getType() == Token.VAR)",
      "info" : "IfStatement[5641-5732]:IfStatement[5783-5874]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5676-5732]:Block[5818-5874]"
    }, {
      "left" : "jsDoc = gramps.getJSDocInfo();",
      "right" : "jsDoc = gramps.getJSDocInfo();",
      "info" : "ExpressionStatement[5690-5720]:ExpressionStatement[5832-5862]"
    }, {
      "left" : "return jsDoc;",
      "right" : "return jsDoc;",
      "info" : "ReturnStatement[5761-5774]:ReturnStatement[5903-5916]"
    } ]
  },
  "interFileMappings" : { }
}