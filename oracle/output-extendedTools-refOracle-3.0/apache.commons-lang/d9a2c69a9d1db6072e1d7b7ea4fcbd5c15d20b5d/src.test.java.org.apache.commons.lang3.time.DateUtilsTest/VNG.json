{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "DateUtilsTest",
      "right" : "DateUtilsTest",
      "info" : "TypeDeclaration[1744-81213]:TypeDeclaration[1744-81797]"
    }, {
      "left" : "private static Date BASE_DATE;",
      "right" : "private static Date BASE_DATE;",
      "info" : "FieldDeclaration[1849-1879]:FieldDeclaration[1849-1879]"
    }, {
      "left" : "public static void classSetup()",
      "right" : "public static void classSetup()",
      "info" : "MethodDeclaration[1885-2100]:MethodDeclaration[1885-2100]"
    }, {
      "left" : "@Rule\n    public SystemDefaultsSwitch defaults = new SystemDefaultsSwitch();",
      "right" : "@Rule\n    public SystemDefaultsSwitch defaults = new SystemDefaultsSwitch();",
      "info" : "FieldDeclaration[2106-2182]:FieldDeclaration[2106-2182]"
    }, {
      "left" : "private DateFormat dateParser = null;",
      "right" : "private DateFormat dateParser = null;",
      "info" : "FieldDeclaration[2192-2229]:FieldDeclaration[2192-2229]"
    }, {
      "left" : "private DateFormat dateTimeParser = null;",
      "right" : "private DateFormat dateTimeParser = null;",
      "info" : "FieldDeclaration[2234-2275]:FieldDeclaration[2234-2275]"
    }, {
      "left" : "private Date dateAmPm1 = null;",
      "right" : "private Date dateAmPm1 = null;",
      "info" : "FieldDeclaration[2280-2310]:FieldDeclaration[2280-2310]"
    }, {
      "left" : "private Date dateAmPm2 = null;",
      "right" : "private Date dateAmPm2 = null;",
      "info" : "FieldDeclaration[2315-2345]:FieldDeclaration[2315-2345]"
    }, {
      "left" : "private Date dateAmPm3 = null;",
      "right" : "private Date dateAmPm3 = null;",
      "info" : "FieldDeclaration[2350-2380]:FieldDeclaration[2350-2380]"
    }, {
      "left" : "private Date dateAmPm4 = null;",
      "right" : "private Date dateAmPm4 = null;",
      "info" : "FieldDeclaration[2385-2415]:FieldDeclaration[2385-2415]"
    }, {
      "left" : "private Date date0 = null;",
      "right" : "private Date date0 = null;",
      "info" : "FieldDeclaration[2420-2446]:FieldDeclaration[2420-2446]"
    }, {
      "left" : "private Date date1 = null;",
      "right" : "private Date date1 = null;",
      "info" : "FieldDeclaration[2451-2477]:FieldDeclaration[2451-2477]"
    }, {
      "left" : "private Date date2 = null;",
      "right" : "private Date date2 = null;",
      "info" : "FieldDeclaration[2482-2508]:FieldDeclaration[2482-2508]"
    }, {
      "left" : "private Date date3 = null;",
      "right" : "private Date date3 = null;",
      "info" : "FieldDeclaration[2513-2539]:FieldDeclaration[2513-2539]"
    }, {
      "left" : "private Date date4 = null;",
      "right" : "private Date date4 = null;",
      "info" : "FieldDeclaration[2544-2570]:FieldDeclaration[2544-2570]"
    }, {
      "left" : "private Date date5 = null;",
      "right" : "private Date date5 = null;",
      "info" : "FieldDeclaration[2575-2601]:FieldDeclaration[2575-2601]"
    }, {
      "left" : "private Date date6 = null;",
      "right" : "private Date date6 = null;",
      "info" : "FieldDeclaration[2606-2632]:FieldDeclaration[2606-2632]"
    }, {
      "left" : "private Date date7 = null;",
      "right" : "private Date date7 = null;",
      "info" : "FieldDeclaration[2637-2663]:FieldDeclaration[2637-2663]"
    }, {
      "left" : "private Date date8 = null;",
      "right" : "private Date date8 = null;",
      "info" : "FieldDeclaration[2668-2694]:FieldDeclaration[2668-2694]"
    }, {
      "left" : "private Calendar calAmPm1 = null;",
      "right" : "private Calendar calAmPm1 = null;",
      "info" : "FieldDeclaration[2699-2732]:FieldDeclaration[2699-2732]"
    }, {
      "left" : "private Calendar calAmPm2 = null;",
      "right" : "private Calendar calAmPm2 = null;",
      "info" : "FieldDeclaration[2737-2770]:FieldDeclaration[2737-2770]"
    }, {
      "left" : "private Calendar calAmPm3 = null;",
      "right" : "private Calendar calAmPm3 = null;",
      "info" : "FieldDeclaration[2775-2808]:FieldDeclaration[2775-2808]"
    }, {
      "left" : "private Calendar calAmPm4 = null;",
      "right" : "private Calendar calAmPm4 = null;",
      "info" : "FieldDeclaration[2813-2846]:FieldDeclaration[2813-2846]"
    }, {
      "left" : "private Calendar cal1 = null;",
      "right" : "private Calendar cal1 = null;",
      "info" : "FieldDeclaration[2851-2880]:FieldDeclaration[2851-2880]"
    }, {
      "left" : "private Calendar cal2 = null;",
      "right" : "private Calendar cal2 = null;",
      "info" : "FieldDeclaration[2885-2914]:FieldDeclaration[2885-2914]"
    }, {
      "left" : "private Calendar cal3 = null;",
      "right" : "private Calendar cal3 = null;",
      "info" : "FieldDeclaration[2919-2948]:FieldDeclaration[2919-2948]"
    }, {
      "left" : "private Calendar cal4 = null;",
      "right" : "private Calendar cal4 = null;",
      "info" : "FieldDeclaration[2953-2982]:FieldDeclaration[2953-2982]"
    }, {
      "left" : "private Calendar cal5 = null;",
      "right" : "private Calendar cal5 = null;",
      "info" : "FieldDeclaration[2987-3016]:FieldDeclaration[2987-3016]"
    }, {
      "left" : "private Calendar cal6 = null;",
      "right" : "private Calendar cal6 = null;",
      "info" : "FieldDeclaration[3021-3050]:FieldDeclaration[3021-3050]"
    }, {
      "left" : "private Calendar cal7 = null;",
      "right" : "private Calendar cal7 = null;",
      "info" : "FieldDeclaration[3055-3084]:FieldDeclaration[3055-3084]"
    }, {
      "left" : "private Calendar cal8 = null;",
      "right" : "private Calendar cal8 = null;",
      "info" : "FieldDeclaration[3089-3118]:FieldDeclaration[3089-3118]"
    }, {
      "left" : "private TimeZone zone = null;",
      "right" : "private TimeZone zone = null;",
      "info" : "FieldDeclaration[3123-3152]:FieldDeclaration[3123-3152]"
    }, {
      "left" : "private TimeZone defaultZone = null;",
      "right" : "private TimeZone defaultZone = null;",
      "info" : "FieldDeclaration[3157-3193]:FieldDeclaration[3157-3193]"
    }, {
      "left" : "public void setUp() throws Exception",
      "right" : "public void setUp() throws Exception",
      "info" : "MethodDeclaration[3199-5550]:MethodDeclaration[3199-5550]"
    }, {
      "left" : "public void testConstructor()",
      "right" : "public void testConstructor()",
      "info" : "MethodDeclaration[5634-6045]:MethodDeclaration[5634-6045]"
    }, {
      "left" : "public void testIsSameDay_Date()",
      "right" : "public void testIsSameDay_Date()",
      "info" : "MethodDeclaration[6133-6763]:MethodDeclaration[6133-6763]"
    }, {
      "left" : "public void testIsSameDay_DateNullNull() throws Exception",
      "right" : "public void testIsSameDay_DateNullNull() throws Exception",
      "info" : "MethodDeclaration[6769-6942]:MethodDeclaration[6769-6942]"
    }, {
      "left" : "public void testIsSameDay_DateNullNotNull() throws Exception",
      "right" : "public void testIsSameDay_DateNullNotNull() throws Exception",
      "info" : "MethodDeclaration[6948-7123]:MethodDeclaration[6948-7123]"
    }, {
      "left" : "public void testIsSameDay_DateNotNullNull() throws Exception",
      "right" : "public void testIsSameDay_DateNotNullNull() throws Exception",
      "info" : "MethodDeclaration[7129-7304]:MethodDeclaration[7129-7304]"
    }, {
      "left" : "public void testIsSameDay_Cal()",
      "right" : "public void testIsSameDay_Cal()",
      "info" : "MethodDeclaration[7388-7937]:MethodDeclaration[7388-7937]"
    }, {
      "left" : "public void testIsSameDay_CalNullNull() throws Exception",
      "right" : "public void testIsSameDay_CalNullNull() throws Exception",
      "info" : "MethodDeclaration[7943-8123]:MethodDeclaration[7943-8123]"
    }, {
      "left" : "public void testIsSameDay_CalNullNotNull() throws Exception",
      "right" : "public void testIsSameDay_CalNullNotNull() throws Exception",
      "info" : "MethodDeclaration[8129-8319]:MethodDeclaration[8129-8319]"
    }, {
      "left" : "public void testIsSameDay_CalNotNullNull() throws Exception",
      "right" : "public void testIsSameDay_CalNotNullNull() throws Exception",
      "info" : "MethodDeclaration[8325-8515]:MethodDeclaration[8325-8515]"
    }, {
      "left" : "public void testIsSameInstant_Date()",
      "right" : "public void testIsSameInstant_Date()",
      "info" : "MethodDeclaration[8599-9249]:MethodDeclaration[8599-9249]"
    }, {
      "left" : "public void testIsSameInstant_DateNullNull() throws Exception",
      "right" : "public void testIsSameInstant_DateNullNull() throws Exception",
      "info" : "MethodDeclaration[9255-9436]:MethodDeclaration[9255-9436]"
    }, {
      "left" : "public void testIsSameInstant_DateNullNotNull() throws Exception",
      "right" : "public void testIsSameInstant_DateNullNotNull() throws Exception",
      "info" : "MethodDeclaration[9442-9625]:MethodDeclaration[9442-9625]"
    }, {
      "left" : "public void testIsSameInstant_DateNotNullNull() throws Exception",
      "right" : "public void testIsSameInstant_DateNotNullNull() throws Exception",
      "info" : "MethodDeclaration[9631-9814]:MethodDeclaration[9631-9814]"
    }, {
      "left" : "public void testIsSameInstant_Cal()",
      "right" : "public void testIsSameInstant_Cal()",
      "info" : "MethodDeclaration[9898-10506]:MethodDeclaration[9898-10506]"
    }, {
      "left" : "public void testIsSameInstant_CalNullNull() throws Exception",
      "right" : "public void testIsSameInstant_CalNullNull() throws Exception",
      "info" : "MethodDeclaration[10512-10700]:MethodDeclaration[10512-10700]"
    }, {
      "left" : "public void testIsSameInstant_CalNullNotNull() throws Exception",
      "right" : "public void testIsSameInstant_CalNullNotNull() throws Exception",
      "info" : "MethodDeclaration[10706-10904]:MethodDeclaration[10706-10904]"
    }, {
      "left" : "public void testIsSameInstant_CalNotNullNull() throws Exception",
      "right" : "public void testIsSameInstant_CalNotNullNull() throws Exception",
      "info" : "MethodDeclaration[10910-11108]:MethodDeclaration[10910-11108]"
    }, {
      "left" : "public void testIsSameLocalTime_Cal()",
      "right" : "public void testIsSameLocalTime_Cal()",
      "info" : "MethodDeclaration[11192-12177]:MethodDeclaration[11192-12177]"
    }, {
      "left" : "public void testIsSameLocalTime_CalNullNull() throws Exception",
      "right" : "public void testIsSameLocalTime_CalNullNull() throws Exception",
      "info" : "MethodDeclaration[12183-12375]:MethodDeclaration[12183-12375]"
    }, {
      "left" : "public void testIsSameLocalTime_CalNullNotNull() throws Exception",
      "right" : "public void testIsSameLocalTime_CalNullNotNull() throws Exception",
      "info" : "MethodDeclaration[12381-12583]:MethodDeclaration[12381-12583]"
    }, {
      "left" : "public void testIsSameLocalTime_CalNotNullNull() throws Exception",
      "right" : "public void testIsSameLocalTime_CalNotNullNull() throws Exception",
      "info" : "MethodDeclaration[12589-12791]:MethodDeclaration[12589-12791]"
    }, {
      "left" : "public void testParseDate() throws Exception",
      "right" : "public void testParseDate() throws Exception",
      "info" : "MethodDeclaration[12875-13516]:MethodDeclaration[12875-13516]"
    }, {
      "left" : "public void testParseDate_NoDateString() throws Exception",
      "right" : "public void testParseDate_NoDateString() throws Exception",
      "info" : "MethodDeclaration[13522-13770]:MethodDeclaration[13522-13770]"
    }, {
      "left" : "public void testParseDate_InvalidDateString() throws Exception",
      "right" : "public void testParseDate_InvalidDateString() throws Exception",
      "info" : "MethodDeclaration[13776-14031]:MethodDeclaration[13776-14031]"
    }, {
      "left" : "public void testParseDate_Null() throws Exception",
      "right" : "public void testParseDate_Null() throws Exception",
      "info" : "MethodDeclaration[14037-14283]:MethodDeclaration[14037-14283]"
    }, {
      "left" : "public void testParse_NullParsers() throws Exception",
      "right" : "public void testParse_NullParsers() throws Exception",
      "info" : "MethodDeclaration[14289-14460]:MethodDeclaration[14289-14460]"
    }, {
      "left" : "public void testParse_EmptyParsers() throws Exception",
      "right" : "public void testParse_EmptyParsers() throws Exception",
      "info" : "MethodDeclaration[14470-14615]:MethodDeclaration[14470-14615]"
    }, {
      "left" : "public void testParseDateWithLeniency() throws Exception",
      "right" : "public void testParseDateWithLeniency() throws Exception",
      "info" : "MethodDeclaration[14637-15154]:MethodDeclaration[14637-15154]"
    }, {
      "left" : "public void testAddYears() throws Exception",
      "right" : "public void testAddYears() throws Exception",
      "info" : "MethodDeclaration[15238-15923]:MethodDeclaration[15238-15923]"
    }, {
      "left" : "public void testAddMonths() throws Exception",
      "right" : "public void testAddMonths() throws Exception",
      "info" : "MethodDeclaration[16007-16696]:MethodDeclaration[16007-16696]"
    }, {
      "left" : "public void testAddWeeks() throws Exception",
      "right" : "public void testAddWeeks() throws Exception",
      "info" : "MethodDeclaration[16780-17490]:MethodDeclaration[16780-17490]"
    }, {
      "left" : "public void testAddDays() throws Exception",
      "right" : "public void testAddDays() throws Exception",
      "info" : "MethodDeclaration[17574-18255]:MethodDeclaration[17574-18255]"
    }, {
      "left" : "public void testAddHours() throws Exception",
      "right" : "public void testAddHours() throws Exception",
      "info" : "MethodDeclaration[18339-19024]:MethodDeclaration[18339-19024]"
    }, {
      "left" : "public void testAddMinutes() throws Exception",
      "right" : "public void testAddMinutes() throws Exception",
      "info" : "MethodDeclaration[19108-19801]:MethodDeclaration[19108-19801]"
    }, {
      "left" : "public void testAddSeconds() throws Exception",
      "right" : "public void testAddSeconds() throws Exception",
      "info" : "MethodDeclaration[19885-20578]:MethodDeclaration[19885-20578]"
    }, {
      "left" : "public void testAddMilliseconds() throws Exception",
      "right" : "public void testAddMilliseconds() throws Exception",
      "info" : "MethodDeclaration[20662-21375]:MethodDeclaration[20662-21375]"
    }, {
      "left" : "public void testSetYears() throws Exception",
      "right" : "public void testSetYears() throws Exception",
      "info" : "MethodDeclaration[21460-22137]:MethodDeclaration[21460-22137]"
    }, {
      "left" : "public void testSetMonths() throws Exception",
      "right" : "public void testSetMonths() throws Exception",
      "info" : "MethodDeclaration[22222-22912]:MethodDeclaration[22222-22912]"
    }, {
      "left" : "public void testSetDays() throws Exception",
      "right" : "public void testSetDays() throws Exception",
      "info" : "MethodDeclaration[22997-23679]:MethodDeclaration[22997-23679]"
    }, {
      "left" : "public void testSetHours() throws Exception",
      "right" : "public void testSetHours() throws Exception",
      "info" : "MethodDeclaration[23764-24451]:MethodDeclaration[23764-24451]"
    }, {
      "left" : "public void testSetMinutes() throws Exception",
      "right" : "public void testSetMinutes() throws Exception",
      "info" : "MethodDeclaration[24536-25233]:MethodDeclaration[24536-25233]"
    }, {
      "left" : "public void testSetSeconds() throws Exception",
      "right" : "public void testSetSeconds() throws Exception",
      "info" : "MethodDeclaration[25318-26015]:MethodDeclaration[25318-26015]"
    }, {
      "left" : "public void testSetMilliseconds() throws Exception",
      "right" : "public void testSetMilliseconds() throws Exception",
      "info" : "MethodDeclaration[26100-26826]:MethodDeclaration[26100-26826]"
    }, {
      "left" : "private void assertDate(final Date date, final int year, final int month, final int day, final int hour, final int min, final int sec, final int mil) throws Exception",
      "right" : "private void assertDate(final Date date, final int year, final int month, final int day, final int hour, final int min, final int sec, final int mil) throws Exception",
      "info" : "MethodDeclaration[26910-27562]:MethodDeclaration[26910-27562]"
    }, {
      "left" : "public void testToCalendar()",
      "right" : "public void testToCalendar()",
      "info" : "MethodDeclaration[27646-28006]:MethodDeclaration[27646-28006]"
    }, {
      "left" : "public void testToCalendarWithDate()",
      "right" : "public void testToCalendarWithDateNull()",
      "info" : "MethodDeclaration[28094-28506]:MethodDeclaration[28393-28677]"
    }, {
      "left" : "public void testToCalendarWithTimeZone()",
      "right" : "public void testToCalendarWithTimeZoneNull()",
      "info" : "MethodDeclaration[28594-29015]:MethodDeclaration[29072-29365]"
    }, {
      "left" : "public void testToCalendarWithDateAndTimeZone()",
      "right" : "public void testToCalendarWithDateAndTimeZoneNotNull()",
      "info" : "MethodDeclaration[29101-29638]:MethodDeclaration[29453-29829]"
    }, {
      "left" : "public void testRound() throws Exception",
      "right" : "public void testRound() throws Exception",
      "info" : "MethodDeclaration[29722-41714]:MethodDeclaration[30306-42298]"
    }, {
      "left" : "public void testRoundLang346() throws Exception",
      "right" : "public void testRoundLang346() throws Exception",
      "info" : "MethodDeclaration[41720-44701]:MethodDeclaration[42304-45285]"
    }, {
      "left" : "public void testTruncate() throws Exception",
      "right" : "public void testTruncate() throws Exception",
      "info" : "MethodDeclaration[44707-55129]:MethodDeclaration[45291-55713]"
    }, {
      "left" : "public void testTruncateLang59() throws Exception",
      "right" : "public void testTruncateLang59() throws Exception",
      "info" : "MethodDeclaration[55135-58967]:MethodDeclaration[55719-59551]"
    }, {
      "left" : "public void testLang530() throws ParseException",
      "right" : "public void testLang530() throws ParseException",
      "info" : "MethodDeclaration[59026-59581]:MethodDeclaration[59610-60165]"
    }, {
      "left" : "public void testCeil() throws Exception",
      "right" : "public void testCeil() throws Exception",
      "info" : "MethodDeclaration[59591-72928]:MethodDeclaration[60175-73512]"
    }, {
      "left" : "public void testIteratorEx() throws Exception",
      "right" : "public void testIteratorEx() throws Exception",
      "info" : "MethodDeclaration[72934-73896]:MethodDeclaration[73518-74480]"
    }, {
      "left" : "public void testWeekIterator() throws Exception",
      "right" : "public void testWeekIterator() throws Exception",
      "info" : "MethodDeclaration[73902-76050]:MethodDeclaration[74486-76634]"
    }, {
      "left" : "public void testMonthIterator() throws Exception",
      "right" : "public void testMonthIterator() throws Exception",
      "info" : "MethodDeclaration[76068-77128]:MethodDeclaration[76652-77712]"
    }, {
      "left" : "public void testLANG799_EN_OK() throws ParseException",
      "right" : "public void testLANG799_EN_OK() throws ParseException",
      "info" : "MethodDeclaration[77134-77436]:MethodDeclaration[77718-78020]"
    }, {
      "left" : "public void testLANG799_EN_FAIL() throws ParseException",
      "right" : "public void testLANG799_EN_FAIL() throws ParseException",
      "info" : "MethodDeclaration[77487-77720]:MethodDeclaration[78071-78304]"
    }, {
      "left" : "public void testLANG799_DE_OK() throws ParseException",
      "right" : "public void testLANG799_DE_OK() throws ParseException",
      "info" : "MethodDeclaration[77726-78026]:MethodDeclaration[78310-78610]"
    }, {
      "left" : "public void testLANG799_DE_FAIL() throws ParseException",
      "right" : "public void testLANG799_DE_FAIL() throws ParseException",
      "info" : "MethodDeclaration[78077-78309]:MethodDeclaration[78661-78893]"
    }, {
      "left" : "public void testLANG799_EN_WITH_DE_LOCALE() throws ParseException",
      "right" : "public void testLANG799_EN_WITH_DE_LOCALE() throws ParseException",
      "info" : "MethodDeclaration[78399-78624]:MethodDeclaration[78983-79208]"
    }, {
      "left" : "private static void assertWeekIterator(final Iterator<?> it, final Calendar start)",
      "right" : "private static void assertWeekIterator(final Iterator<?> it, final Calendar start)",
      "info" : "MethodDeclaration[78634-79024]:MethodDeclaration[79218-79608]"
    }, {
      "left" : "private static void assertWeekIterator(final Iterator<?> it, final Date start, final Date end)",
      "right" : "private static void assertWeekIterator(final Iterator<?> it, final Date start, final Date end)",
      "info" : "MethodDeclaration[79030-79436]:MethodDeclaration[79614-80020]"
    }, {
      "left" : "private static void assertWeekIterator(final Iterator<?> it, final Calendar start, final Calendar end)",
      "right" : "private static void assertWeekIterator(final Iterator<?> it, final Calendar start, final Calendar end)",
      "info" : "MethodDeclaration[79442-80536]:MethodDeclaration[80026-81120]"
    }, {
      "left" : "private static void assertCalendarsEquals(final String message, final Calendar cal1, final Calendar cal2, final long delta)",
      "right" : "private static void assertCalendarsEquals(final String message, final Calendar cal1, final Calendar cal2, final long delta)",
      "info" : "MethodDeclaration[80542-81013]:MethodDeclaration[81126-81597]"
    }, {
      "left" : "public void testLANG799() throws ParseException",
      "right" : "public void testLANG799() throws ParseException",
      "info" : "MethodDeclaration[81019-81211]:MethodDeclaration[81603-81795]"
    } ],
    "mappings" : [
 {
      "left" : "@BeforeClass",
      "right" : "@BeforeClass",
      "info" : "MarkerAnnotation[1885-1897]:MarkerAnnotation[1885-1897]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[1902-1908]:Modifier[1902-1908]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[1909-1915]:Modifier[1909-1915]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[1916-1920]:PrimitiveType[1916-1920]"
    }, {
      "left" : "classSetup",
      "right" : "classSetup",
      "info" : "SimpleName[1921-1931]:SimpleName[1921-1931]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1934-2100]:Block[1934-2100]"
    }, {
      "left" : "final GregorianCalendar cal = new GregorianCalendar(2000, 6, 5, 4, 3, 2);",
      "right" : "final GregorianCalendar cal = new GregorianCalendar(2000, 6, 5, 4, 3, 2);",
      "info" : "VariableDeclarationStatement[1944-2017]:VariableDeclarationStatement[1944-2017]"
    }, {
      "left" : "cal.set(Calendar.MILLISECOND, 1);",
      "right" : "cal.set(Calendar.MILLISECOND, 1);",
      "info" : "ExpressionStatement[2026-2059]:ExpressionStatement[2026-2059]"
    }, {
      "left" : "BASE_DATE = cal.getTime();",
      "right" : "BASE_DATE = cal.getTime();",
      "info" : "ExpressionStatement[2068-2094]:ExpressionStatement[2068-2094]"
    }, {
      "left" : "@Before",
      "right" : "@Before",
      "info" : "MarkerAnnotation[3199-3206]:MarkerAnnotation[3199-3206]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[3211-3217]:Modifier[3211-3217]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[3218-3222]:PrimitiveType[3218-3222]"
    }, {
      "left" : "setUp",
      "right" : "setUp",
      "info" : "SimpleName[3223-3228]:SimpleName[3223-3228]"
    }, {
      "left" : "Exception",
      "right" : "Exception",
      "info" : "SimpleType[3238-3247]:SimpleType[3238-3247]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3248-5550]:Block[3248-5550]"
    }, {
      "left" : "dateParser = new SimpleDateFormat(\"MMM dd, yyyy\", Locale.ENGLISH);",
      "right" : "dateParser = new SimpleDateFormat(\"MMM dd, yyyy\", Locale.ENGLISH);",
      "info" : "ExpressionStatement[3258-3324]:ExpressionStatement[3258-3324]"
    }, {
      "left" : "dateTimeParser = new SimpleDateFormat(\"MMM dd, yyyy H:mm:ss.SSS\", Locale.ENGLISH);",
      "right" : "dateTimeParser = new SimpleDateFormat(\"MMM dd, yyyy H:mm:ss.SSS\", Locale.ENGLISH);",
      "info" : "ExpressionStatement[3333-3415]:ExpressionStatement[3333-3415]"
    }, {
      "left" : "dateAmPm1 = dateTimeParser.parse(\"February 3, 2002 01:10:00.000\");",
      "right" : "dateAmPm1 = dateTimeParser.parse(\"February 3, 2002 01:10:00.000\");",
      "info" : "ExpressionStatement[3425-3491]:ExpressionStatement[3425-3491]"
    }, {
      "left" : "dateAmPm2 = dateTimeParser.parse(\"February 3, 2002 11:10:00.000\");",
      "right" : "dateAmPm2 = dateTimeParser.parse(\"February 3, 2002 11:10:00.000\");",
      "info" : "ExpressionStatement[3500-3566]:ExpressionStatement[3500-3566]"
    }, {
      "left" : "dateAmPm3 = dateTimeParser.parse(\"February 3, 2002 13:10:00.000\");",
      "right" : "dateAmPm3 = dateTimeParser.parse(\"February 3, 2002 13:10:00.000\");",
      "info" : "ExpressionStatement[3575-3641]:ExpressionStatement[3575-3641]"
    }, {
      "left" : "dateAmPm4 = dateTimeParser.parse(\"February 3, 2002 19:10:00.000\");",
      "right" : "dateAmPm4 = dateTimeParser.parse(\"February 3, 2002 19:10:00.000\");",
      "info" : "ExpressionStatement[3650-3716]:ExpressionStatement[3650-3716]"
    }, {
      "left" : "date0 = dateTimeParser.parse(\"February 3, 2002 12:34:56.789\");",
      "right" : "date0 = dateTimeParser.parse(\"February 3, 2002 12:34:56.789\");",
      "info" : "ExpressionStatement[3725-3787]:ExpressionStatement[3725-3787]"
    }, {
      "left" : "date1 = dateTimeParser.parse(\"February 12, 2002 12:34:56.789\");",
      "right" : "date1 = dateTimeParser.parse(\"February 12, 2002 12:34:56.789\");",
      "info" : "ExpressionStatement[3796-3859]:ExpressionStatement[3796-3859]"
    }, {
      "left" : "date2 = dateTimeParser.parse(\"November 18, 2001 1:23:11.321\");",
      "right" : "date2 = dateTimeParser.parse(\"November 18, 2001 1:23:11.321\");",
      "info" : "ExpressionStatement[3868-3930]:ExpressionStatement[3868-3930]"
    }, {
      "left" : "defaultZone = TimeZone.getDefault();",
      "right" : "defaultZone = TimeZone.getDefault();",
      "info" : "ExpressionStatement[3939-3975]:ExpressionStatement[3939-3975]"
    }, {
      "left" : "zone = TimeZone.getTimeZone(\"MET\");",
      "right" : "zone = TimeZone.getTimeZone(\"MET\");",
      "info" : "ExpressionStatement[3984-4019]:ExpressionStatement[3984-4019]"
    }, {
      "left" : "TimeZone.setDefault(zone);",
      "right" : "TimeZone.setDefault(zone);",
      "info" : "ExpressionStatement[4028-4054]:ExpressionStatement[4028-4054]"
    }, {
      "left" : "dateTimeParser.setTimeZone(zone);",
      "right" : "dateTimeParser.setTimeZone(zone);",
      "info" : "ExpressionStatement[4063-4096]:ExpressionStatement[4063-4096]"
    }, {
      "left" : "date3 = dateTimeParser.parse(\"March 30, 2003 05:30:45.000\");",
      "right" : "date3 = dateTimeParser.parse(\"March 30, 2003 05:30:45.000\");",
      "info" : "ExpressionStatement[4105-4165]:ExpressionStatement[4105-4165]"
    }, {
      "left" : "date4 = dateTimeParser.parse(\"March 30, 2003 01:10:00.000\");",
      "right" : "date4 = dateTimeParser.parse(\"March 30, 2003 01:10:00.000\");",
      "info" : "ExpressionStatement[4174-4234]:ExpressionStatement[4174-4234]"
    }, {
      "left" : "date5 = dateTimeParser.parse(\"March 30, 2003 01:40:00.000\");",
      "right" : "date5 = dateTimeParser.parse(\"March 30, 2003 01:40:00.000\");",
      "info" : "ExpressionStatement[4243-4303]:ExpressionStatement[4243-4303]"
    }, {
      "left" : "date6 = dateTimeParser.parse(\"March 30, 2003 02:10:00.000\");",
      "right" : "date6 = dateTimeParser.parse(\"March 30, 2003 02:10:00.000\");",
      "info" : "ExpressionStatement[4312-4372]:ExpressionStatement[4312-4372]"
    }, {
      "left" : "date7 = dateTimeParser.parse(\"March 30, 2003 02:40:00.000\");",
      "right" : "date7 = dateTimeParser.parse(\"March 30, 2003 02:40:00.000\");",
      "info" : "ExpressionStatement[4381-4441]:ExpressionStatement[4381-4441]"
    }, {
      "left" : "date8 = dateTimeParser.parse(\"October 26, 2003 05:30:45.000\");",
      "right" : "date8 = dateTimeParser.parse(\"October 26, 2003 05:30:45.000\");",
      "info" : "ExpressionStatement[4450-4512]:ExpressionStatement[4450-4512]"
    }, {
      "left" : "dateTimeParser.setTimeZone(defaultZone);",
      "right" : "dateTimeParser.setTimeZone(defaultZone);",
      "info" : "ExpressionStatement[4521-4561]:ExpressionStatement[4521-4561]"
    }, {
      "left" : "TimeZone.setDefault(defaultZone);",
      "right" : "TimeZone.setDefault(defaultZone);",
      "info" : "ExpressionStatement[4570-4603]:ExpressionStatement[4570-4603]"
    }, {
      "left" : "calAmPm1 = Calendar.getInstance();",
      "right" : "calAmPm1 = Calendar.getInstance();",
      "info" : "ExpressionStatement[4612-4646]:ExpressionStatement[4612-4646]"
    }, {
      "left" : "calAmPm1.setTime(dateAmPm1);",
      "right" : "calAmPm1.setTime(dateAmPm1);",
      "info" : "ExpressionStatement[4655-4683]:ExpressionStatement[4655-4683]"
    }, {
      "left" : "calAmPm2 = Calendar.getInstance();",
      "right" : "calAmPm2 = Calendar.getInstance();",
      "info" : "ExpressionStatement[4692-4726]:ExpressionStatement[4692-4726]"
    }, {
      "left" : "calAmPm2.setTime(dateAmPm2);",
      "right" : "calAmPm2.setTime(dateAmPm2);",
      "info" : "ExpressionStatement[4735-4763]:ExpressionStatement[4735-4763]"
    }, {
      "left" : "calAmPm3 = Calendar.getInstance();",
      "right" : "calAmPm3 = Calendar.getInstance();",
      "info" : "ExpressionStatement[4772-4806]:ExpressionStatement[4772-4806]"
    }, {
      "left" : "calAmPm3.setTime(dateAmPm3);",
      "right" : "calAmPm3.setTime(dateAmPm3);",
      "info" : "ExpressionStatement[4815-4843]:ExpressionStatement[4815-4843]"
    }, {
      "left" : "calAmPm4 = Calendar.getInstance();",
      "right" : "calAmPm4 = Calendar.getInstance();",
      "info" : "ExpressionStatement[4852-4886]:ExpressionStatement[4852-4886]"
    }, {
      "left" : "calAmPm4.setTime(dateAmPm4);",
      "right" : "calAmPm4.setTime(dateAmPm4);",
      "info" : "ExpressionStatement[4895-4923]:ExpressionStatement[4895-4923]"
    }, {
      "left" : "cal1 = Calendar.getInstance();",
      "right" : "cal1 = Calendar.getInstance();",
      "info" : "ExpressionStatement[4932-4962]:ExpressionStatement[4932-4962]"
    }, {
      "left" : "cal1.setTime(date1);",
      "right" : "cal1.setTime(date1);",
      "info" : "ExpressionStatement[4971-4991]:ExpressionStatement[4971-4991]"
    }, {
      "left" : "cal2 = Calendar.getInstance();",
      "right" : "cal2 = Calendar.getInstance();",
      "info" : "ExpressionStatement[5000-5030]:ExpressionStatement[5000-5030]"
    }, {
      "left" : "cal2.setTime(date2);",
      "right" : "cal2.setTime(date2);",
      "info" : "ExpressionStatement[5039-5059]:ExpressionStatement[5039-5059]"
    }, {
      "left" : "TimeZone.setDefault(zone);",
      "right" : "TimeZone.setDefault(zone);",
      "info" : "ExpressionStatement[5068-5094]:ExpressionStatement[5068-5094]"
    }, {
      "left" : "cal3 = Calendar.getInstance();",
      "right" : "cal3 = Calendar.getInstance();",
      "info" : "ExpressionStatement[5103-5133]:ExpressionStatement[5103-5133]"
    }, {
      "left" : "cal3.setTime(date3);",
      "right" : "cal3.setTime(date3);",
      "info" : "ExpressionStatement[5142-5162]:ExpressionStatement[5142-5162]"
    }, {
      "left" : "cal4 = Calendar.getInstance();",
      "right" : "cal4 = Calendar.getInstance();",
      "info" : "ExpressionStatement[5171-5201]:ExpressionStatement[5171-5201]"
    }, {
      "left" : "cal4.setTime(date4);",
      "right" : "cal4.setTime(date4);",
      "info" : "ExpressionStatement[5210-5230]:ExpressionStatement[5210-5230]"
    }, {
      "left" : "cal5 = Calendar.getInstance();",
      "right" : "cal5 = Calendar.getInstance();",
      "info" : "ExpressionStatement[5239-5269]:ExpressionStatement[5239-5269]"
    }, {
      "left" : "cal5.setTime(date5);",
      "right" : "cal5.setTime(date5);",
      "info" : "ExpressionStatement[5278-5298]:ExpressionStatement[5278-5298]"
    }, {
      "left" : "cal6 = Calendar.getInstance();",
      "right" : "cal6 = Calendar.getInstance();",
      "info" : "ExpressionStatement[5307-5337]:ExpressionStatement[5307-5337]"
    }, {
      "left" : "cal6.setTime(date6);",
      "right" : "cal6.setTime(date6);",
      "info" : "ExpressionStatement[5346-5366]:ExpressionStatement[5346-5366]"
    }, {
      "left" : "cal7 = Calendar.getInstance();",
      "right" : "cal7 = Calendar.getInstance();",
      "info" : "ExpressionStatement[5375-5405]:ExpressionStatement[5375-5405]"
    }, {
      "left" : "cal7.setTime(date7);",
      "right" : "cal7.setTime(date7);",
      "info" : "ExpressionStatement[5414-5434]:ExpressionStatement[5414-5434]"
    }, {
      "left" : "cal8 = Calendar.getInstance();",
      "right" : "cal8 = Calendar.getInstance();",
      "info" : "ExpressionStatement[5443-5473]:ExpressionStatement[5443-5473]"
    }, {
      "left" : "cal8.setTime(date8);",
      "right" : "cal8.setTime(date8);",
      "info" : "ExpressionStatement[5482-5502]:ExpressionStatement[5482-5502]"
    }, {
      "left" : "TimeZone.setDefault(defaultZone);",
      "right" : "TimeZone.setDefault(defaultZone);",
      "info" : "ExpressionStatement[5511-5544]:ExpressionStatement[5511-5544]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[5634-5639]:MarkerAnnotation[5634-5639]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[5644-5650]:Modifier[5644-5650]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[5651-5655]:PrimitiveType[5651-5655]"
    }, {
      "left" : "testConstructor",
      "right" : "testConstructor",
      "info" : "SimpleName[5656-5671]:SimpleName[5656-5671]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5674-6045]:Block[5674-6045]"
    }, {
      "left" : "assertNotNull(new DateUtils());",
      "right" : "assertNotNull(new DateUtils());",
      "info" : "ExpressionStatement[5684-5715]:ExpressionStatement[5684-5715]"
    }, {
      "left" : "final Constructor<?>[] cons = DateUtils.class.getDeclaredConstructors();",
      "right" : "final Constructor<?>[] cons = DateUtils.class.getDeclaredConstructors();",
      "info" : "VariableDeclarationStatement[5724-5796]:VariableDeclarationStatement[5724-5796]"
    }, {
      "left" : "assertEquals(1, cons.length);",
      "right" : "assertEquals(1, cons.length);",
      "info" : "ExpressionStatement[5805-5834]:ExpressionStatement[5805-5834]"
    }, {
      "left" : "assertTrue(Modifier.isPublic(cons[0].getModifiers()));",
      "right" : "assertTrue(Modifier.isPublic(cons[0].getModifiers()));",
      "info" : "ExpressionStatement[5843-5897]:ExpressionStatement[5843-5897]"
    }, {
      "left" : "assertTrue(Modifier.isPublic(DateUtils.class.getModifiers()));",
      "right" : "assertTrue(Modifier.isPublic(DateUtils.class.getModifiers()));",
      "info" : "ExpressionStatement[5906-5968]:ExpressionStatement[5906-5968]"
    }, {
      "left" : "assertFalse(Modifier.isFinal(DateUtils.class.getModifiers()));",
      "right" : "assertFalse(Modifier.isFinal(DateUtils.class.getModifiers()));",
      "info" : "ExpressionStatement[5977-6039]:ExpressionStatement[5977-6039]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[6133-6138]:MarkerAnnotation[6133-6138]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[6143-6149]:Modifier[6143-6149]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[6150-6154]:PrimitiveType[6150-6154]"
    }, {
      "left" : "testIsSameDay_Date",
      "right" : "testIsSameDay_Date",
      "info" : "SimpleName[6155-6173]:SimpleName[6155-6173]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6176-6763]:Block[6176-6763]"
    }, {
      "left" : "Date datea = new GregorianCalendar(2004, 6, 9, 13, 45).getTime();",
      "right" : "Date datea = new GregorianCalendar(2004, 6, 9, 13, 45).getTime();",
      "info" : "VariableDeclarationStatement[6186-6251]:VariableDeclarationStatement[6186-6251]"
    }, {
      "left" : "Date dateb = new GregorianCalendar(2004, 6, 9, 13, 45).getTime();",
      "right" : "Date dateb = new GregorianCalendar(2004, 6, 9, 13, 45).getTime();",
      "info" : "VariableDeclarationStatement[6260-6325]:VariableDeclarationStatement[6260-6325]"
    }, {
      "left" : "assertTrue(DateUtils.isSameDay(datea, dateb));",
      "right" : "assertTrue(DateUtils.isSameDay(datea, dateb));",
      "info" : "ExpressionStatement[6334-6380]:ExpressionStatement[6334-6380]"
    }, {
      "left" : "dateb = new GregorianCalendar(2004, 6, 10, 13, 45).getTime();",
      "right" : "dateb = new GregorianCalendar(2004, 6, 10, 13, 45).getTime();",
      "info" : "ExpressionStatement[6389-6450]:ExpressionStatement[6389-6450]"
    }, {
      "left" : "assertFalse(DateUtils.isSameDay(datea, dateb));",
      "right" : "assertFalse(DateUtils.isSameDay(datea, dateb));",
      "info" : "ExpressionStatement[6459-6506]:ExpressionStatement[6459-6506]"
    }, {
      "left" : "datea = new GregorianCalendar(2004, 6, 10, 13, 45).getTime();",
      "right" : "datea = new GregorianCalendar(2004, 6, 10, 13, 45).getTime();",
      "info" : "ExpressionStatement[6515-6576]:ExpressionStatement[6515-6576]"
    }, {
      "left" : "assertTrue(DateUtils.isSameDay(datea, dateb));",
      "right" : "assertTrue(DateUtils.isSameDay(datea, dateb));",
      "info" : "ExpressionStatement[6585-6631]:ExpressionStatement[6585-6631]"
    }, {
      "left" : "dateb = new GregorianCalendar(2005, 6, 10, 13, 45).getTime();",
      "right" : "dateb = new GregorianCalendar(2005, 6, 10, 13, 45).getTime();",
      "info" : "ExpressionStatement[6640-6701]:ExpressionStatement[6640-6701]"
    }, {
      "left" : "assertFalse(DateUtils.isSameDay(datea, dateb));",
      "right" : "assertFalse(DateUtils.isSameDay(datea, dateb));",
      "info" : "ExpressionStatement[6710-6757]:ExpressionStatement[6710-6757]"
    }, {
      "left" : "@Test(expected = IllegalArgumentException.class)",
      "right" : "@Test(expected = IllegalArgumentException.class)",
      "info" : "NormalAnnotation[6769-6817]:NormalAnnotation[6769-6817]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[6822-6828]:Modifier[6822-6828]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[6829-6833]:PrimitiveType[6829-6833]"
    }, {
      "left" : "testIsSameDay_DateNullNull",
      "right" : "testIsSameDay_DateNullNull",
      "info" : "SimpleName[6834-6860]:SimpleName[6834-6860]"
    }, {
      "left" : "Exception",
      "right" : "Exception",
      "info" : "SimpleType[6870-6879]:SimpleType[6870-6879]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6880-6942]:Block[6880-6942]"
    }, {
      "left" : "DateUtils.isSameDay((Date) null, (Date) null);",
      "right" : "DateUtils.isSameDay((Date) null, (Date) null);",
      "info" : "ExpressionStatement[6890-6936]:ExpressionStatement[6890-6936]"
    }, {
      "left" : "@Test(expected = IllegalArgumentException.class)",
      "right" : "@Test(expected = IllegalArgumentException.class)",
      "info" : "NormalAnnotation[6948-6996]:NormalAnnotation[6948-6996]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[7001-7007]:Modifier[7001-7007]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[7008-7012]:PrimitiveType[7008-7012]"
    }, {
      "left" : "testIsSameDay_DateNullNotNull",
      "right" : "testIsSameDay_DateNullNotNull",
      "info" : "SimpleName[7013-7042]:SimpleName[7013-7042]"
    }, {
      "left" : "Exception",
      "right" : "Exception",
      "info" : "SimpleType[7052-7061]:SimpleType[7052-7061]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7062-7123]:Block[7062-7123]"
    }, {
      "left" : "DateUtils.isSameDay((Date) null, new Date());",
      "right" : "DateUtils.isSameDay((Date) null, new Date());",
      "info" : "ExpressionStatement[7072-7117]:ExpressionStatement[7072-7117]"
    }, {
      "left" : "@Test(expected = IllegalArgumentException.class)",
      "right" : "@Test(expected = IllegalArgumentException.class)",
      "info" : "NormalAnnotation[7129-7177]:NormalAnnotation[7129-7177]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[7182-7188]:Modifier[7182-7188]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[7189-7193]:PrimitiveType[7189-7193]"
    }, {
      "left" : "testIsSameDay_DateNotNullNull",
      "right" : "testIsSameDay_DateNotNullNull",
      "info" : "SimpleName[7194-7223]:SimpleName[7194-7223]"
    }, {
      "left" : "Exception",
      "right" : "Exception",
      "info" : "SimpleType[7233-7242]:SimpleType[7233-7242]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7243-7304]:Block[7243-7304]"
    }, {
      "left" : "DateUtils.isSameDay(new Date(), (Date) null);",
      "right" : "DateUtils.isSameDay(new Date(), (Date) null);",
      "info" : "ExpressionStatement[7253-7298]:ExpressionStatement[7253-7298]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[7388-7393]:MarkerAnnotation[7388-7393]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[7398-7404]:Modifier[7398-7404]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[7405-7409]:PrimitiveType[7405-7409]"
    }, {
      "left" : "testIsSameDay_Cal",
      "right" : "testIsSameDay_Cal",
      "info" : "SimpleName[7410-7427]:SimpleName[7410-7427]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7430-7937]:Block[7430-7937]"
    }, {
      "left" : "final GregorianCalendar cala = new GregorianCalendar(2004, 6, 9, 13, 45);",
      "right" : "final GregorianCalendar cala = new GregorianCalendar(2004, 6, 9, 13, 45);",
      "info" : "VariableDeclarationStatement[7440-7513]:VariableDeclarationStatement[7440-7513]"
    }, {
      "left" : "final GregorianCalendar calb = new GregorianCalendar(2004, 6, 9, 13, 45);",
      "right" : "final GregorianCalendar calb = new GregorianCalendar(2004, 6, 9, 13, 45);",
      "info" : "VariableDeclarationStatement[7522-7595]:VariableDeclarationStatement[7522-7595]"
    }, {
      "left" : "assertTrue(DateUtils.isSameDay(cala, calb));",
      "right" : "assertTrue(DateUtils.isSameDay(cala, calb));",
      "info" : "ExpressionStatement[7604-7648]:ExpressionStatement[7604-7648]"
    }, {
      "left" : "calb.add(Calendar.DAY_OF_YEAR, 1);",
      "right" : "calb.add(Calendar.DAY_OF_YEAR, 1);",
      "info" : "ExpressionStatement[7657-7691]:ExpressionStatement[7657-7691]"
    }, {
      "left" : "assertFalse(DateUtils.isSameDay(cala, calb));",
      "right" : "assertFalse(DateUtils.isSameDay(cala, calb));",
      "info" : "ExpressionStatement[7700-7745]:ExpressionStatement[7700-7745]"
    }, {
      "left" : "cala.add(Calendar.DAY_OF_YEAR, 1);",
      "right" : "cala.add(Calendar.DAY_OF_YEAR, 1);",
      "info" : "ExpressionStatement[7754-7788]:ExpressionStatement[7754-7788]"
    }, {
      "left" : "assertTrue(DateUtils.isSameDay(cala, calb));",
      "right" : "assertTrue(DateUtils.isSameDay(cala, calb));",
      "info" : "ExpressionStatement[7797-7841]:ExpressionStatement[7797-7841]"
    }, {
      "left" : "calb.add(Calendar.YEAR, 1);",
      "right" : "calb.add(Calendar.YEAR, 1);",
      "info" : "ExpressionStatement[7850-7877]:ExpressionStatement[7850-7877]"
    }, {
      "left" : "assertFalse(DateUtils.isSameDay(cala, calb));",
      "right" : "assertFalse(DateUtils.isSameDay(cala, calb));",
      "info" : "ExpressionStatement[7886-7931]:ExpressionStatement[7886-7931]"
    }, {
      "left" : "@Test(expected = IllegalArgumentException.class)",
      "right" : "@Test(expected = IllegalArgumentException.class)",
      "info" : "NormalAnnotation[7943-7991]:NormalAnnotation[7943-7991]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[7996-8002]:Modifier[7996-8002]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[8003-8007]:PrimitiveType[8003-8007]"
    }, {
      "left" : "testIsSameDay_CalNullNull",
      "right" : "testIsSameDay_CalNullNull",
      "info" : "SimpleName[8008-8033]:SimpleName[8008-8033]"
    }, {
      "left" : "Exception",
      "right" : "Exception",
      "info" : "SimpleType[8043-8052]:SimpleType[8043-8052]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8053-8123]:Block[8053-8123]"
    }, {
      "left" : "DateUtils.isSameDay((Calendar) null, (Calendar) null);",
      "right" : "DateUtils.isSameDay((Calendar) null, (Calendar) null);",
      "info" : "ExpressionStatement[8063-8117]:ExpressionStatement[8063-8117]"
    }, {
      "left" : "@Test(expected = IllegalArgumentException.class)",
      "right" : "@Test(expected = IllegalArgumentException.class)",
      "info" : "NormalAnnotation[8129-8177]:NormalAnnotation[8129-8177]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[8182-8188]:Modifier[8182-8188]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[8189-8193]:PrimitiveType[8189-8193]"
    }, {
      "left" : "testIsSameDay_CalNullNotNull",
      "right" : "testIsSameDay_CalNullNotNull",
      "info" : "SimpleName[8194-8222]:SimpleName[8194-8222]"
    }, {
      "left" : "Exception",
      "right" : "Exception",
      "info" : "SimpleType[8232-8241]:SimpleType[8232-8241]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8242-8319]:Block[8242-8319]"
    }, {
      "left" : "DateUtils.isSameDay((Calendar) null, Calendar.getInstance());",
      "right" : "DateUtils.isSameDay((Calendar) null, Calendar.getInstance());",
      "info" : "ExpressionStatement[8252-8313]:ExpressionStatement[8252-8313]"
    }, {
      "left" : "@Test(expected = IllegalArgumentException.class)",
      "right" : "@Test(expected = IllegalArgumentException.class)",
      "info" : "NormalAnnotation[8325-8373]:NormalAnnotation[8325-8373]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[8378-8384]:Modifier[8378-8384]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[8385-8389]:PrimitiveType[8385-8389]"
    }, {
      "left" : "testIsSameDay_CalNotNullNull",
      "right" : "testIsSameDay_CalNotNullNull",
      "info" : "SimpleName[8390-8418]:SimpleName[8390-8418]"
    }, {
      "left" : "Exception",
      "right" : "Exception",
      "info" : "SimpleType[8428-8437]:SimpleType[8428-8437]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8438-8515]:Block[8438-8515]"
    }, {
      "left" : "DateUtils.isSameDay(Calendar.getInstance(), (Calendar) null);",
      "right" : "DateUtils.isSameDay(Calendar.getInstance(), (Calendar) null);",
      "info" : "ExpressionStatement[8448-8509]:ExpressionStatement[8448-8509]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[8599-8604]:MarkerAnnotation[8599-8604]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[8609-8615]:Modifier[8609-8615]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[8616-8620]:PrimitiveType[8616-8620]"
    }, {
      "left" : "testIsSameInstant_Date",
      "right" : "testIsSameInstant_Date",
      "info" : "SimpleName[8621-8643]:SimpleName[8621-8643]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8646-9249]:Block[8646-9249]"
    }, {
      "left" : "Date datea = new GregorianCalendar(2004, 6, 9, 13, 45).getTime();",
      "right" : "Date datea = new GregorianCalendar(2004, 6, 9, 13, 45).getTime();",
      "info" : "VariableDeclarationStatement[8656-8721]:VariableDeclarationStatement[8656-8721]"
    }, {
      "left" : "Date dateb = new GregorianCalendar(2004, 6, 9, 13, 45).getTime();",
      "right" : "Date dateb = new GregorianCalendar(2004, 6, 9, 13, 45).getTime();",
      "info" : "VariableDeclarationStatement[8730-8795]:VariableDeclarationStatement[8730-8795]"
    }, {
      "left" : "assertTrue(DateUtils.isSameInstant(datea, dateb));",
      "right" : "assertTrue(DateUtils.isSameInstant(datea, dateb));",
      "info" : "ExpressionStatement[8804-8854]:ExpressionStatement[8804-8854]"
    }, {
      "left" : "dateb = new GregorianCalendar(2004, 6, 10, 13, 45).getTime();",
      "right" : "dateb = new GregorianCalendar(2004, 6, 10, 13, 45).getTime();",
      "info" : "ExpressionStatement[8863-8924]:ExpressionStatement[8863-8924]"
    }, {
      "left" : "assertFalse(DateUtils.isSameInstant(datea, dateb));",
      "right" : "assertFalse(DateUtils.isSameInstant(datea, dateb));",
      "info" : "ExpressionStatement[8933-8984]:ExpressionStatement[8933-8984]"
    }, {
      "left" : "datea = new GregorianCalendar(2004, 6, 10, 13, 45).getTime();",
      "right" : "datea = new GregorianCalendar(2004, 6, 10, 13, 45).getTime();",
      "info" : "ExpressionStatement[8993-9054]:ExpressionStatement[8993-9054]"
    }, {
      "left" : "assertTrue(DateUtils.isSameInstant(datea, dateb));",
      "right" : "assertTrue(DateUtils.isSameInstant(datea, dateb));",
      "info" : "ExpressionStatement[9063-9113]:ExpressionStatement[9063-9113]"
    }, {
      "left" : "dateb = new GregorianCalendar(2005, 6, 10, 13, 45).getTime();",
      "right" : "dateb = new GregorianCalendar(2005, 6, 10, 13, 45).getTime();",
      "info" : "ExpressionStatement[9122-9183]:ExpressionStatement[9122-9183]"
    }, {
      "left" : "assertFalse(DateUtils.isSameInstant(datea, dateb));",
      "right" : "assertFalse(DateUtils.isSameInstant(datea, dateb));",
      "info" : "ExpressionStatement[9192-9243]:ExpressionStatement[9192-9243]"
    }, {
      "left" : "@Test(expected = IllegalArgumentException.class)",
      "right" : "@Test(expected = IllegalArgumentException.class)",
      "info" : "NormalAnnotation[9255-9303]:NormalAnnotation[9255-9303]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[9308-9314]:Modifier[9308-9314]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[9315-9319]:PrimitiveType[9315-9319]"
    }, {
      "left" : "testIsSameInstant_DateNullNull",
      "right" : "testIsSameInstant_DateNullNull",
      "info" : "SimpleName[9320-9350]:SimpleName[9320-9350]"
    }, {
      "left" : "Exception",
      "right" : "Exception",
      "info" : "SimpleType[9360-9369]:SimpleType[9360-9369]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9370-9436]:Block[9370-9436]"
    }, {
      "left" : "DateUtils.isSameInstant((Date) null, (Date) null);",
      "right" : "DateUtils.isSameInstant((Date) null, (Date) null);",
      "info" : "ExpressionStatement[9380-9430]:ExpressionStatement[9380-9430]"
    }, {
      "left" : "@Test(expected = IllegalArgumentException.class)",
      "right" : "@Test(expected = IllegalArgumentException.class)",
      "info" : "NormalAnnotation[9442-9490]:NormalAnnotation[9442-9490]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[9495-9501]:Modifier[9495-9501]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[9502-9506]:PrimitiveType[9502-9506]"
    }, {
      "left" : "testIsSameInstant_DateNullNotNull",
      "right" : "testIsSameInstant_DateNullNotNull",
      "info" : "SimpleName[9507-9540]:SimpleName[9507-9540]"
    }, {
      "left" : "Exception",
      "right" : "Exception",
      "info" : "SimpleType[9550-9559]:SimpleType[9550-9559]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9560-9625]:Block[9560-9625]"
    }, {
      "left" : "DateUtils.isSameInstant((Date) null, new Date());",
      "right" : "DateUtils.isSameInstant((Date) null, new Date());",
      "info" : "ExpressionStatement[9570-9619]:ExpressionStatement[9570-9619]"
    }, {
      "left" : "@Test(expected = IllegalArgumentException.class)",
      "right" : "@Test(expected = IllegalArgumentException.class)",
      "info" : "NormalAnnotation[9631-9679]:NormalAnnotation[9631-9679]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[9684-9690]:Modifier[9684-9690]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[9691-9695]:PrimitiveType[9691-9695]"
    }, {
      "left" : "testIsSameInstant_DateNotNullNull",
      "right" : "testIsSameInstant_DateNotNullNull",
      "info" : "SimpleName[9696-9729]:SimpleName[9696-9729]"
    }, {
      "left" : "Exception",
      "right" : "Exception",
      "info" : "SimpleType[9739-9748]:SimpleType[9739-9748]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9749-9814]:Block[9749-9814]"
    }, {
      "left" : "DateUtils.isSameInstant(new Date(), (Date) null);",
      "right" : "DateUtils.isSameInstant(new Date(), (Date) null);",
      "info" : "ExpressionStatement[9759-9808]:ExpressionStatement[9759-9808]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[9898-9903]:MarkerAnnotation[9898-9903]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[9908-9914]:Modifier[9908-9914]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[9915-9919]:PrimitiveType[9915-9919]"
    }, {
      "left" : "testIsSameInstant_Cal",
      "right" : "testIsSameInstant_Cal",
      "info" : "SimpleName[9920-9941]:SimpleName[9920-9941]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9944-10506]:Block[9944-10506]"
    }, {
      "left" : "final GregorianCalendar cala = new GregorianCalendar(TimeZone.getTimeZone(\"GMT+1\"));",
      "right" : "final GregorianCalendar cala = new GregorianCalendar(TimeZone.getTimeZone(\"GMT+1\"));",
      "info" : "VariableDeclarationStatement[9954-10038]:VariableDeclarationStatement[9954-10038]"
    }, {
      "left" : "final GregorianCalendar calb = new GregorianCalendar(TimeZone.getTimeZone(\"GMT-1\"));",
      "right" : "final GregorianCalendar calb = new GregorianCalendar(TimeZone.getTimeZone(\"GMT-1\"));",
      "info" : "VariableDeclarationStatement[10047-10131]:VariableDeclarationStatement[10047-10131]"
    }, {
      "left" : "cala.set(2004, Calendar.JULY, 9, 13, 45, 0);",
      "right" : "cala.set(2004, Calendar.JULY, 9, 13, 45, 0);",
      "info" : "ExpressionStatement[10140-10184]:ExpressionStatement[10140-10184]"
    }, {
      "left" : "cala.set(Calendar.MILLISECOND, 0);",
      "right" : "cala.set(Calendar.MILLISECOND, 0);",
      "info" : "ExpressionStatement[10193-10227]:ExpressionStatement[10193-10227]"
    }, {
      "left" : "calb.set(2004, Calendar.JULY, 9, 13, 45, 0);",
      "right" : "calb.set(2004, Calendar.JULY, 9, 13, 45, 0);",
      "info" : "ExpressionStatement[10236-10280]:ExpressionStatement[10236-10280]"
    }, {
      "left" : "calb.set(Calendar.MILLISECOND, 0);",
      "right" : "calb.set(Calendar.MILLISECOND, 0);",
      "info" : "ExpressionStatement[10289-10323]:ExpressionStatement[10289-10323]"
    }, {
      "left" : "assertFalse(DateUtils.isSameInstant(cala, calb));",
      "right" : "assertFalse(DateUtils.isSameInstant(cala, calb));",
      "info" : "ExpressionStatement[10332-10381]:ExpressionStatement[10332-10381]"
    }, {
      "left" : "calb.set(2004, Calendar.JULY, 9, 11, 45, 0);",
      "right" : "calb.set(2004, Calendar.JULY, 9, 11, 45, 0);",
      "info" : "ExpressionStatement[10399-10443]:ExpressionStatement[10399-10443]"
    }, {
      "left" : "assertTrue(DateUtils.isSameInstant(cala, calb));",
      "right" : "assertTrue(DateUtils.isSameInstant(cala, calb));",
      "info" : "ExpressionStatement[10452-10500]:ExpressionStatement[10452-10500]"
    }, {
      "left" : "@Test(expected = IllegalArgumentException.class)",
      "right" : "@Test(expected = IllegalArgumentException.class)",
      "info" : "NormalAnnotation[10512-10560]:NormalAnnotation[10512-10560]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[10565-10571]:Modifier[10565-10571]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[10572-10576]:PrimitiveType[10572-10576]"
    }, {
      "left" : "testIsSameInstant_CalNullNull",
      "right" : "testIsSameInstant_CalNullNull",
      "info" : "SimpleName[10577-10606]:SimpleName[10577-10606]"
    }, {
      "left" : "Exception",
      "right" : "Exception",
      "info" : "SimpleType[10616-10625]:SimpleType[10616-10625]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10626-10700]:Block[10626-10700]"
    }, {
      "left" : "DateUtils.isSameInstant((Calendar) null, (Calendar) null);",
      "right" : "DateUtils.isSameInstant((Calendar) null, (Calendar) null);",
      "info" : "ExpressionStatement[10636-10694]:ExpressionStatement[10636-10694]"
    }, {
      "left" : "@Test(expected = IllegalArgumentException.class)",
      "right" : "@Test(expected = IllegalArgumentException.class)",
      "info" : "NormalAnnotation[10706-10754]:NormalAnnotation[10706-10754]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[10759-10765]:Modifier[10759-10765]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[10766-10770]:PrimitiveType[10766-10770]"
    }, {
      "left" : "testIsSameInstant_CalNullNotNull",
      "right" : "testIsSameInstant_CalNullNotNull",
      "info" : "SimpleName[10771-10803]:SimpleName[10771-10803]"
    }, {
      "left" : "Exception",
      "right" : "Exception",
      "info" : "SimpleType[10813-10822]:SimpleType[10813-10822]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10823-10904]:Block[10823-10904]"
    }, {
      "left" : "DateUtils.isSameInstant((Calendar) null, Calendar.getInstance());",
      "right" : "DateUtils.isSameInstant((Calendar) null, Calendar.getInstance());",
      "info" : "ExpressionStatement[10833-10898]:ExpressionStatement[10833-10898]"
    }, {
      "left" : "@Test(expected = IllegalArgumentException.class)",
      "right" : "@Test(expected = IllegalArgumentException.class)",
      "info" : "NormalAnnotation[10910-10958]:NormalAnnotation[10910-10958]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[10963-10969]:Modifier[10963-10969]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[10970-10974]:PrimitiveType[10970-10974]"
    }, {
      "left" : "testIsSameInstant_CalNotNullNull",
      "right" : "testIsSameInstant_CalNotNullNull",
      "info" : "SimpleName[10975-11007]:SimpleName[10975-11007]"
    }, {
      "left" : "Exception",
      "right" : "Exception",
      "info" : "SimpleType[11017-11026]:SimpleType[11017-11026]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11027-11108]:Block[11027-11108]"
    }, {
      "left" : "DateUtils.isSameInstant(Calendar.getInstance(), (Calendar) null);",
      "right" : "DateUtils.isSameInstant(Calendar.getInstance(), (Calendar) null);",
      "info" : "ExpressionStatement[11037-11102]:ExpressionStatement[11037-11102]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[11192-11197]:MarkerAnnotation[11192-11197]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[11202-11208]:Modifier[11202-11208]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[11209-11213]:PrimitiveType[11209-11213]"
    }, {
      "left" : "testIsSameLocalTime_Cal",
      "right" : "testIsSameLocalTime_Cal",
      "info" : "SimpleName[11214-11237]:SimpleName[11214-11237]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11240-12177]:Block[11240-12177]"
    }, {
      "left" : "final GregorianCalendar cala = new GregorianCalendar(TimeZone.getTimeZone(\"GMT+1\"));",
      "right" : "final GregorianCalendar cala = new GregorianCalendar(TimeZone.getTimeZone(\"GMT+1\"));",
      "info" : "VariableDeclarationStatement[11250-11334]:VariableDeclarationStatement[11250-11334]"
    }, {
      "left" : "final GregorianCalendar calb = new GregorianCalendar(TimeZone.getTimeZone(\"GMT-1\"));",
      "right" : "final GregorianCalendar calb = new GregorianCalendar(TimeZone.getTimeZone(\"GMT-1\"));",
      "info" : "VariableDeclarationStatement[11343-11427]:VariableDeclarationStatement[11343-11427]"
    }, {
      "left" : "cala.set(2004, Calendar.JULY, 9, 13, 45, 0);",
      "right" : "cala.set(2004, Calendar.JULY, 9, 13, 45, 0);",
      "info" : "ExpressionStatement[11436-11480]:ExpressionStatement[11436-11480]"
    }, {
      "left" : "cala.set(Calendar.MILLISECOND, 0);",
      "right" : "cala.set(Calendar.MILLISECOND, 0);",
      "info" : "ExpressionStatement[11489-11523]:ExpressionStatement[11489-11523]"
    }, {
      "left" : "calb.set(2004, Calendar.JULY, 9, 13, 45, 0);",
      "right" : "calb.set(2004, Calendar.JULY, 9, 13, 45, 0);",
      "info" : "ExpressionStatement[11532-11576]:ExpressionStatement[11532-11576]"
    }, {
      "left" : "calb.set(Calendar.MILLISECOND, 0);",
      "right" : "calb.set(Calendar.MILLISECOND, 0);",
      "info" : "ExpressionStatement[11585-11619]:ExpressionStatement[11585-11619]"
    }, {
      "left" : "assertTrue(DateUtils.isSameLocalTime(cala, calb));",
      "right" : "assertTrue(DateUtils.isSameLocalTime(cala, calb));",
      "info" : "ExpressionStatement[11628-11678]:ExpressionStatement[11628-11678]"
    }, {
      "left" : "final Calendar calc = Calendar.getInstance();",
      "right" : "final Calendar calc = Calendar.getInstance();",
      "info" : "VariableDeclarationStatement[11688-11733]:VariableDeclarationStatement[11688-11733]"
    }, {
      "left" : "final Calendar cald = Calendar.getInstance();",
      "right" : "final Calendar cald = Calendar.getInstance();",
      "info" : "VariableDeclarationStatement[11742-11787]:VariableDeclarationStatement[11742-11787]"
    }, {
      "left" : "calc.set(2004, Calendar.JULY, 9, 4,  0, 0);",
      "right" : "calc.set(2004, Calendar.JULY, 9, 4,  0, 0);",
      "info" : "ExpressionStatement[11796-11839]:ExpressionStatement[11796-11839]"
    }, {
      "left" : "cald.set(2004, Calendar.JULY, 9, 16, 0, 0);",
      "right" : "cald.set(2004, Calendar.JULY, 9, 16, 0, 0);",
      "info" : "ExpressionStatement[11848-11891]:ExpressionStatement[11848-11891]"
    }, {
      "left" : "calc.set(Calendar.MILLISECOND, 0);",
      "right" : "calc.set(Calendar.MILLISECOND, 0);",
      "info" : "ExpressionStatement[11900-11934]:ExpressionStatement[11900-11934]"
    }, {
      "left" : "cald.set(Calendar.MILLISECOND, 0);",
      "right" : "cald.set(Calendar.MILLISECOND, 0);",
      "info" : "ExpressionStatement[11943-11977]:ExpressionStatement[11943-11977]"
    }, {
      "left" : "assertFalse(\"LANG-677\", DateUtils.isSameLocalTime(calc, cald));",
      "right" : "assertFalse(\"LANG-677\", DateUtils.isSameLocalTime(calc, cald));",
      "info" : "ExpressionStatement[11986-12049]:ExpressionStatement[11986-12049]"
    }, {
      "left" : "calb.set(2004, Calendar.JULY, 9, 11, 45, 0);",
      "right" : "calb.set(2004, Calendar.JULY, 9, 11, 45, 0);",
      "info" : "ExpressionStatement[12067-12111]:ExpressionStatement[12067-12111]"
    }, {
      "left" : "assertFalse(DateUtils.isSameLocalTime(cala, calb));",
      "right" : "assertFalse(DateUtils.isSameLocalTime(cala, calb));",
      "info" : "ExpressionStatement[12120-12171]:ExpressionStatement[12120-12171]"
    }, {
      "left" : "@Test(expected = IllegalArgumentException.class)",
      "right" : "@Test(expected = IllegalArgumentException.class)",
      "info" : "NormalAnnotation[12183-12231]:NormalAnnotation[12183-12231]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[12236-12242]:Modifier[12236-12242]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[12243-12247]:PrimitiveType[12243-12247]"
    }, {
      "left" : "testIsSameLocalTime_CalNullNull",
      "right" : "testIsSameLocalTime_CalNullNull",
      "info" : "SimpleName[12248-12279]:SimpleName[12248-12279]"
    }, {
      "left" : "Exception",
      "right" : "Exception",
      "info" : "SimpleType[12289-12298]:SimpleType[12289-12298]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12299-12375]:Block[12299-12375]"
    }, {
      "left" : "DateUtils.isSameLocalTime((Calendar) null, (Calendar) null);",
      "right" : "DateUtils.isSameLocalTime((Calendar) null, (Calendar) null);",
      "info" : "ExpressionStatement[12309-12369]:ExpressionStatement[12309-12369]"
    }, {
      "left" : "@Test(expected = IllegalArgumentException.class)",
      "right" : "@Test(expected = IllegalArgumentException.class)",
      "info" : "NormalAnnotation[12381-12429]:NormalAnnotation[12381-12429]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[12434-12440]:Modifier[12434-12440]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[12441-12445]:PrimitiveType[12441-12445]"
    }, {
      "left" : "testIsSameLocalTime_CalNullNotNull",
      "right" : "testIsSameLocalTime_CalNullNotNull",
      "info" : "SimpleName[12446-12480]:SimpleName[12446-12480]"
    }, {
      "left" : "Exception",
      "right" : "Exception",
      "info" : "SimpleType[12490-12499]:SimpleType[12490-12499]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12500-12583]:Block[12500-12583]"
    }, {
      "left" : "DateUtils.isSameLocalTime((Calendar) null, Calendar.getInstance());",
      "right" : "DateUtils.isSameLocalTime((Calendar) null, Calendar.getInstance());",
      "info" : "ExpressionStatement[12510-12577]:ExpressionStatement[12510-12577]"
    }, {
      "left" : "@Test(expected = IllegalArgumentException.class)",
      "right" : "@Test(expected = IllegalArgumentException.class)",
      "info" : "NormalAnnotation[12589-12637]:NormalAnnotation[12589-12637]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[12642-12648]:Modifier[12642-12648]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[12649-12653]:PrimitiveType[12649-12653]"
    }, {
      "left" : "testIsSameLocalTime_CalNotNullNull",
      "right" : "testIsSameLocalTime_CalNotNullNull",
      "info" : "SimpleName[12654-12688]:SimpleName[12654-12688]"
    }, {
      "left" : "Exception",
      "right" : "Exception",
      "info" : "SimpleType[12698-12707]:SimpleType[12698-12707]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12708-12791]:Block[12708-12791]"
    }, {
      "left" : "DateUtils.isSameLocalTime(Calendar.getInstance(), (Calendar) null);",
      "right" : "DateUtils.isSameLocalTime(Calendar.getInstance(), (Calendar) null);",
      "info" : "ExpressionStatement[12718-12785]:ExpressionStatement[12718-12785]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[12875-12880]:MarkerAnnotation[12875-12880]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[12885-12891]:Modifier[12885-12891]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[12892-12896]:PrimitiveType[12892-12896]"
    }, {
      "left" : "testParseDate",
      "right" : "testParseDate",
      "info" : "SimpleName[12897-12910]:SimpleName[12897-12910]"
    }, {
      "left" : "Exception",
      "right" : "Exception",
      "info" : "SimpleType[12920-12929]:SimpleType[12920-12929]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12930-13516]:Block[12930-13516]"
    }, {
      "left" : "final GregorianCalendar cal = new GregorianCalendar(1972, 11, 3);",
      "right" : "final GregorianCalendar cal = new GregorianCalendar(1972, 11, 3);",
      "info" : "VariableDeclarationStatement[12940-13005]:VariableDeclarationStatement[12940-13005]"
    }, {
      "left" : "String dateStr = \"1972-12-03\";",
      "right" : "String dateStr = \"1972-12-03\";",
      "info" : "VariableDeclarationStatement[13014-13044]:VariableDeclarationStatement[13014-13044]"
    }, {
      "left" : "final String[] parsers = new String[] {\"yyyy'-'DDD\", \"yyyy'-'MM'-'dd\", \"yyyyMMdd\"};",
      "right" : "final String[] parsers = new String[] {\"yyyy'-'DDD\", \"yyyy'-'MM'-'dd\", \"yyyyMMdd\"};",
      "info" : "VariableDeclarationStatement[13053-13136]:VariableDeclarationStatement[13053-13136]"
    }, {
      "left" : "Date date = DateUtils.parseDate(dateStr, parsers);",
      "right" : "Date date = DateUtils.parseDate(dateStr, parsers);",
      "info" : "VariableDeclarationStatement[13145-13195]:VariableDeclarationStatement[13145-13195]"
    }, {
      "left" : "assertEquals(cal.getTime(), date);",
      "right" : "assertEquals(cal.getTime(), date);",
      "info" : "ExpressionStatement[13204-13238]:ExpressionStatement[13204-13238]"
    }, {
      "left" : "dateStr = \"1972-338\";",
      "right" : "dateStr = \"1972-338\";",
      "info" : "ExpressionStatement[13256-13277]:ExpressionStatement[13256-13277]"
    }, {
      "left" : "date = DateUtils.parseDate(dateStr, parsers);",
      "right" : "date = DateUtils.parseDate(dateStr, parsers);",
      "info" : "ExpressionStatement[13286-13331]:ExpressionStatement[13286-13331]"
    }, {
      "left" : "assertEquals(cal.getTime(), date);",
      "right" : "assertEquals(cal.getTime(), date);",
      "info" : "ExpressionStatement[13340-13374]:ExpressionStatement[13340-13374]"
    }, {
      "left" : "dateStr = \"19721203\";",
      "right" : "dateStr = \"19721203\";",
      "info" : "ExpressionStatement[13392-13413]:ExpressionStatement[13392-13413]"
    }, {
      "left" : "date = DateUtils.parseDate(dateStr, parsers);",
      "right" : "date = DateUtils.parseDate(dateStr, parsers);",
      "info" : "ExpressionStatement[13422-13467]:ExpressionStatement[13422-13467]"
    }, {
      "left" : "assertEquals(cal.getTime(), date);",
      "right" : "assertEquals(cal.getTime(), date);",
      "info" : "ExpressionStatement[13476-13510]:ExpressionStatement[13476-13510]"
    }, {
      "left" : "@Test(expected = ParseException.class)",
      "right" : "@Test(expected = ParseException.class)",
      "info" : "NormalAnnotation[13522-13560]:NormalAnnotation[13522-13560]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[13565-13571]:Modifier[13565-13571]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[13572-13576]:PrimitiveType[13572-13576]"
    }, {
      "left" : "testParseDate_NoDateString",
      "right" : "testParseDate_NoDateString",
      "info" : "SimpleName[13577-13603]:SimpleName[13577-13603]"
    }, {
      "left" : "Exception",
      "right" : "Exception",
      "info" : "SimpleType[13613-13622]:SimpleType[13613-13622]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13623-13770]:Block[13623-13770]"
    }, {
      "left" : "final String[] parsers = new String[] {\"yyyy'-'DDD\", \"yyyy'-'MM'-'dd\", \"yyyyMMdd\"};",
      "right" : "final String[] parsers = new String[] {\"yyyy'-'DDD\", \"yyyy'-'MM'-'dd\", \"yyyyMMdd\"};",
      "info" : "VariableDeclarationStatement[13633-13716]:VariableDeclarationStatement[13633-13716]"
    }, {
      "left" : "DateUtils.parseDate(\"PURPLE\", parsers);",
      "right" : "DateUtils.parseDate(\"PURPLE\", parsers);",
      "info" : "ExpressionStatement[13725-13764]:ExpressionStatement[13725-13764]"
    }, {
      "left" : "@Test(expected = ParseException.class)",
      "right" : "@Test(expected = ParseException.class)",
      "info" : "NormalAnnotation[13776-13814]:NormalAnnotation[13776-13814]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[13819-13825]:Modifier[13819-13825]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[13826-13830]:PrimitiveType[13826-13830]"
    }, {
      "left" : "testParseDate_InvalidDateString",
      "right" : "testParseDate_InvalidDateString",
      "info" : "SimpleName[13831-13862]:SimpleName[13831-13862]"
    }, {
      "left" : "Exception",
      "right" : "Exception",
      "info" : "SimpleType[13872-13881]:SimpleType[13872-13881]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13882-14031]:Block[13882-14031]"
    }, {
      "left" : "final String[] parsers = new String[] {\"yyyy'-'DDD\", \"yyyy'-'MM'-'dd\", \"yyyyMMdd\"};",
      "right" : "final String[] parsers = new String[] {\"yyyy'-'DDD\", \"yyyy'-'MM'-'dd\", \"yyyyMMdd\"};",
      "info" : "VariableDeclarationStatement[13892-13975]:VariableDeclarationStatement[13892-13975]"
    }, {
      "left" : "DateUtils.parseDate(\"197212AB\", parsers);",
      "right" : "DateUtils.parseDate(\"197212AB\", parsers);",
      "info" : "ExpressionStatement[13984-14025]:ExpressionStatement[13984-14025]"
    }, {
      "left" : "@Test(expected = IllegalArgumentException.class)",
      "right" : "@Test(expected = IllegalArgumentException.class)",
      "info" : "NormalAnnotation[14037-14085]:NormalAnnotation[14037-14085]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[14090-14096]:Modifier[14090-14096]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[14097-14101]:PrimitiveType[14097-14101]"
    }, {
      "left" : "testParseDate_Null",
      "right" : "testParseDate_Null",
      "info" : "SimpleName[14102-14120]:SimpleName[14102-14120]"
    }, {
      "left" : "Exception",
      "right" : "Exception",
      "info" : "SimpleType[14130-14139]:SimpleType[14130-14139]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14140-14283]:Block[14140-14283]"
    }, {
      "left" : "final String[] parsers = new String[] {\"yyyy'-'DDD\", \"yyyy'-'MM'-'dd\", \"yyyyMMdd\"};",
      "right" : "final String[] parsers = new String[] {\"yyyy'-'DDD\", \"yyyy'-'MM'-'dd\", \"yyyyMMdd\"};",
      "info" : "VariableDeclarationStatement[14150-14233]:VariableDeclarationStatement[14150-14233]"
    }, {
      "left" : "DateUtils.parseDate(null, parsers);",
      "right" : "DateUtils.parseDate(null, parsers);",
      "info" : "ExpressionStatement[14242-14277]:ExpressionStatement[14242-14277]"
    }, {
      "left" : "@Test(expected = IllegalArgumentException.class)",
      "right" : "@Test(expected = IllegalArgumentException.class)",
      "info" : "NormalAnnotation[14289-14337]:NormalAnnotation[14289-14337]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[14342-14348]:Modifier[14342-14348]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[14349-14353]:PrimitiveType[14349-14353]"
    }, {
      "left" : "testParse_NullParsers",
      "right" : "testParse_NullParsers",
      "info" : "SimpleName[14354-14375]:SimpleName[14354-14375]"
    }, {
      "left" : "Exception",
      "right" : "Exception",
      "info" : "SimpleType[14385-14394]:SimpleType[14385-14394]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14395-14460]:Block[14395-14460]"
    }, {
      "left" : "DateUtils.parseDate(\"19721203\", (String[]) null);",
      "right" : "DateUtils.parseDate(\"19721203\", (String[]) null);",
      "info" : "ExpressionStatement[14405-14454]:ExpressionStatement[14405-14454]"
    }, {
      "left" : "@Test(expected = ParseException.class)",
      "right" : "@Test(expected = ParseException.class)",
      "info" : "NormalAnnotation[14470-14508]:NormalAnnotation[14470-14508]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[14513-14519]:Modifier[14513-14519]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[14520-14524]:PrimitiveType[14520-14524]"
    }, {
      "left" : "testParse_EmptyParsers",
      "right" : "testParse_EmptyParsers",
      "info" : "SimpleName[14525-14547]:SimpleName[14525-14547]"
    }, {
      "left" : "Exception",
      "right" : "Exception",
      "info" : "SimpleType[14557-14566]:SimpleType[14557-14566]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14567-14615]:Block[14567-14615]"
    }, {
      "left" : "DateUtils.parseDate(\"19721203\");",
      "right" : "DateUtils.parseDate(\"19721203\");",
      "info" : "ExpressionStatement[14577-14609]:ExpressionStatement[14577-14609]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[14637-14642]:MarkerAnnotation[14637-14642]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[14647-14653]:Modifier[14647-14653]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[14654-14658]:PrimitiveType[14654-14658]"
    }, {
      "left" : "testParseDateWithLeniency",
      "right" : "testParseDateWithLeniency",
      "info" : "SimpleName[14659-14684]:SimpleName[14659-14684]"
    }, {
      "left" : "Exception",
      "right" : "Exception",
      "info" : "SimpleType[14694-14703]:SimpleType[14694-14703]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14704-15154]:Block[14704-15154]"
    }, {
      "left" : "final GregorianCalendar cal = new GregorianCalendar(1998, 6, 30);",
      "right" : "final GregorianCalendar cal = new GregorianCalendar(1998, 6, 30);",
      "info" : "VariableDeclarationStatement[14714-14779]:VariableDeclarationStatement[14714-14779]"
    }, {
      "left" : "final String dateStr = \"02 942, 1996\";",
      "right" : "final String dateStr = \"02 942, 1996\";",
      "info" : "VariableDeclarationStatement[14788-14826]:VariableDeclarationStatement[14788-14826]"
    }, {
      "left" : "final String[] parsers = new String[] {\"MM DDD, yyyy\"};",
      "right" : "final String[] parsers = new String[] {\"MM DDD, yyyy\"};",
      "info" : "VariableDeclarationStatement[14835-14890]:VariableDeclarationStatement[14835-14890]"
    }, {
      "left" : "Date date = DateUtils.parseDate(dateStr, parsers);",
      "right" : "Date date = DateUtils.parseDate(dateStr, parsers);",
      "info" : "VariableDeclarationStatement[14908-14958]:VariableDeclarationStatement[14908-14958]"
    }, {
      "left" : "assertEquals(cal.getTime(), date);",
      "right" : "assertEquals(cal.getTime(), date);",
      "info" : "ExpressionStatement[14967-15001]:ExpressionStatement[14967-15001]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[15019-15148]:TryStatement[15019-15148]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15023-15113]:Block[15023-15113]"
    }, {
      "left" : "DateUtils.parseDateStrictly(dateStr, parsers);",
      "right" : "DateUtils.parseDateStrictly(dateStr, parsers);",
      "info" : "ExpressionStatement[15037-15083]:ExpressionStatement[15037-15083]"
    }, {
      "left" : "fail();",
      "right" : "fail();",
      "info" : "ExpressionStatement[15096-15103]:ExpressionStatement[15096-15103]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15146-15148]:Block[15146-15148]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[15238-15243]:MarkerAnnotation[15238-15243]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[15248-15254]:Modifier[15248-15254]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[15255-15259]:PrimitiveType[15255-15259]"
    }, {
      "left" : "testAddYears",
      "right" : "testAddYears",
      "info" : "SimpleName[15260-15272]:SimpleName[15260-15272]"
    }, {
      "left" : "Exception",
      "right" : "Exception",
      "info" : "SimpleType[15282-15291]:SimpleType[15282-15291]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15292-15923]:Block[15292-15923]"
    }, {
      "left" : "Date result = DateUtils.addYears(BASE_DATE, 0);",
      "right" : "Date result = DateUtils.addYears(BASE_DATE, 0);",
      "info" : "VariableDeclarationStatement[15302-15349]:VariableDeclarationStatement[15302-15349]"
    }, {
      "left" : "assertNotSame(BASE_DATE, result);",
      "right" : "assertNotSame(BASE_DATE, result);",
      "info" : "ExpressionStatement[15358-15391]:ExpressionStatement[15358-15391]"
    }, {
      "left" : "assertDate(BASE_DATE, 2000, 6, 5, 4, 3, 2, 1);",
      "right" : "assertDate(BASE_DATE, 2000, 6, 5, 4, 3, 2, 1);",
      "info" : "ExpressionStatement[15400-15446]:ExpressionStatement[15400-15446]"
    }, {
      "left" : "assertDate(result, 2000, 6, 5, 4, 3, 2, 1);",
      "right" : "assertDate(result, 2000, 6, 5, 4, 3, 2, 1);",
      "info" : "ExpressionStatement[15455-15498]:ExpressionStatement[15455-15498]"
    }, {
      "left" : "result = DateUtils.addYears(BASE_DATE, 1);",
      "right" : "result = DateUtils.addYears(BASE_DATE, 1);",
      "info" : "ExpressionStatement[15516-15558]:ExpressionStatement[15516-15558]"
    }, {
      "left" : "assertNotSame(BASE_DATE, result);",
      "right" : "assertNotSame(BASE_DATE, result);",
      "info" : "ExpressionStatement[15567-15600]:ExpressionStatement[15567-15600]"
    }, {
      "left" : "assertDate(BASE_DATE, 2000, 6, 5, 4, 3, 2, 1);",
      "right" : "assertDate(BASE_DATE, 2000, 6, 5, 4, 3, 2, 1);",
      "info" : "ExpressionStatement[15609-15655]:ExpressionStatement[15609-15655]"
    }, {
      "left" : "assertDate(result, 2001, 6, 5, 4, 3, 2, 1);",
      "right" : "assertDate(result, 2001, 6, 5, 4, 3, 2, 1);",
      "info" : "ExpressionStatement[15664-15707]:ExpressionStatement[15664-15707]"
    }, {
      "left" : "result = DateUtils.addYears(BASE_DATE, -1);",
      "right" : "result = DateUtils.addYears(BASE_DATE, -1);",
      "info" : "ExpressionStatement[15725-15768]:ExpressionStatement[15725-15768]"
    }, {
      "left" : "assertNotSame(BASE_DATE, result);",
      "right" : "assertNotSame(BASE_DATE, result);",
      "info" : "ExpressionStatement[15777-15810]:ExpressionStatement[15777-15810]"
    }, {
      "left" : "assertDate(BASE_DATE, 2000, 6, 5, 4, 3, 2, 1);",
      "right" : "assertDate(BASE_DATE, 2000, 6, 5, 4, 3, 2, 1);",
      "info" : "ExpressionStatement[15819-15865]:ExpressionStatement[15819-15865]"
    }, {
      "left" : "assertDate(result, 1999, 6, 5, 4, 3, 2, 1);",
      "right" : "assertDate(result, 1999, 6, 5, 4, 3, 2, 1);",
      "info" : "ExpressionStatement[15874-15917]:ExpressionStatement[15874-15917]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[16007-16012]:MarkerAnnotation[16007-16012]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[16017-16023]:Modifier[16017-16023]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[16024-16028]:PrimitiveType[16024-16028]"
    }, {
      "left" : "testAddMonths",
      "right" : "testAddMonths",
      "info" : "SimpleName[16029-16042]:SimpleName[16029-16042]"
    }, {
      "left" : "Exception",
      "right" : "Exception",
      "info" : "SimpleType[16052-16061]:SimpleType[16052-16061]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16062-16696]:Block[16062-16696]"
    }, {
      "left" : "Date result = DateUtils.addMonths(BASE_DATE, 0);",
      "right" : "Date result = DateUtils.addMonths(BASE_DATE, 0);",
      "info" : "VariableDeclarationStatement[16072-16120]:VariableDeclarationStatement[16072-16120]"
    }, {
      "left" : "assertNotSame(BASE_DATE, result);",
      "right" : "assertNotSame(BASE_DATE, result);",
      "info" : "ExpressionStatement[16129-16162]:ExpressionStatement[16129-16162]"
    }, {
      "left" : "assertDate(BASE_DATE, 2000, 6, 5, 4, 3, 2, 1);",
      "right" : "assertDate(BASE_DATE, 2000, 6, 5, 4, 3, 2, 1);",
      "info" : "ExpressionStatement[16171-16217]:ExpressionStatement[16171-16217]"
    }, {
      "left" : "assertDate(result, 2000, 6, 5, 4, 3, 2, 1);",
      "right" : "assertDate(result, 2000, 6, 5, 4, 3, 2, 1);",
      "info" : "ExpressionStatement[16226-16269]:ExpressionStatement[16226-16269]"
    }, {
      "left" : "result = DateUtils.addMonths(BASE_DATE, 1);",
      "right" : "result = DateUtils.addMonths(BASE_DATE, 1);",
      "info" : "ExpressionStatement[16287-16330]:ExpressionStatement[16287-16330]"
    }, {
      "left" : "assertNotSame(BASE_DATE, result);",
      "right" : "assertNotSame(BASE_DATE, result);",
      "info" : "ExpressionStatement[16339-16372]:ExpressionStatement[16339-16372]"
    }, {
      "left" : "assertDate(BASE_DATE, 2000, 6, 5, 4, 3, 2, 1);",
      "right" : "assertDate(BASE_DATE, 2000, 6, 5, 4, 3, 2, 1);",
      "info" : "ExpressionStatement[16381-16427]:ExpressionStatement[16381-16427]"
    }, {
      "left" : "assertDate(result, 2000, 7, 5, 4, 3, 2, 1);",
      "right" : "assertDate(result, 2000, 7, 5, 4, 3, 2, 1);",
      "info" : "ExpressionStatement[16436-16479]:ExpressionStatement[16436-16479]"
    }, {
      "left" : "result = DateUtils.addMonths(BASE_DATE, -1);",
      "right" : "result = DateUtils.addMonths(BASE_DATE, -1);",
      "info" : "ExpressionStatement[16497-16541]:ExpressionStatement[16497-16541]"
    }, {
      "left" : "assertNotSame(BASE_DATE, result);",
      "right" : "assertNotSame(BASE_DATE, result);",
      "info" : "ExpressionStatement[16550-16583]:ExpressionStatement[16550-16583]"
    }, {
      "left" : "assertDate(BASE_DATE, 2000, 6, 5, 4, 3, 2, 1);",
      "right" : "assertDate(BASE_DATE, 2000, 6, 5, 4, 3, 2, 1);",
      "info" : "ExpressionStatement[16592-16638]:ExpressionStatement[16592-16638]"
    }, {
      "left" : "assertDate(result, 2000, 5, 5, 4, 3, 2, 1);",
      "right" : "assertDate(result, 2000, 5, 5, 4, 3, 2, 1);",
      "info" : "ExpressionStatement[16647-16690]:ExpressionStatement[16647-16690]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[16780-16785]:MarkerAnnotation[16780-16785]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[16790-16796]:Modifier[16790-16796]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[16797-16801]:PrimitiveType[16797-16801]"
    }, {
      "left" : "testAddWeeks",
      "right" : "testAddWeeks",
      "info" : "SimpleName[16802-16814]:SimpleName[16802-16814]"
    }, {
      "left" : "Exception",
      "right" : "Exception",
      "info" : "SimpleType[16824-16833]:SimpleType[16824-16833]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16834-17490]:Block[16834-17490]"
    }, {
      "left" : "Date result = DateUtils.addWeeks(BASE_DATE, 0);",
      "right" : "Date result = DateUtils.addWeeks(BASE_DATE, 0);",
      "info" : "VariableDeclarationStatement[16844-16891]:VariableDeclarationStatement[16844-16891]"
    }, {
      "left" : "assertNotSame(BASE_DATE, result);",
      "right" : "assertNotSame(BASE_DATE, result);",
      "info" : "ExpressionStatement[16900-16933]:ExpressionStatement[16900-16933]"
    }, {
      "left" : "assertDate(BASE_DATE, 2000, 6, 5, 4, 3, 2, 1);",
      "right" : "assertDate(BASE_DATE, 2000, 6, 5, 4, 3, 2, 1);",
      "info" : "ExpressionStatement[16942-16988]:ExpressionStatement[16942-16988]"
    }, {
      "left" : "assertDate(result, 2000, 6, 5, 4, 3, 2, 1);",
      "right" : "assertDate(result, 2000, 6, 5, 4, 3, 2, 1);",
      "info" : "ExpressionStatement[16997-17040]:ExpressionStatement[16997-17040]"
    }, {
      "left" : "result = DateUtils.addWeeks(BASE_DATE, 1);",
      "right" : "result = DateUtils.addWeeks(BASE_DATE, 1);",
      "info" : "ExpressionStatement[17058-17100]:ExpressionStatement[17058-17100]"
    }, {
      "left" : "assertNotSame(BASE_DATE, result);",
      "right" : "assertNotSame(BASE_DATE, result);",
      "info" : "ExpressionStatement[17109-17142]:ExpressionStatement[17109-17142]"
    }, {
      "left" : "assertDate(BASE_DATE, 2000, 6, 5, 4, 3, 2, 1);",
      "right" : "assertDate(BASE_DATE, 2000, 6, 5, 4, 3, 2, 1);",
      "info" : "ExpressionStatement[17151-17197]:ExpressionStatement[17151-17197]"
    }, {
      "left" : "assertDate(result, 2000, 6, 12, 4, 3, 2, 1);",
      "right" : "assertDate(result, 2000, 6, 12, 4, 3, 2, 1);",
      "info" : "ExpressionStatement[17206-17250]:ExpressionStatement[17206-17250]"
    }, {
      "left" : "result = DateUtils.addWeeks(BASE_DATE, -1);",
      "right" : "result = DateUtils.addWeeks(BASE_DATE, -1);",
      "info" : "ExpressionStatement[17268-17311]:ExpressionStatement[17268-17311]"
    }, {
      "left" : "assertNotSame(BASE_DATE, result);",
      "right" : "assertNotSame(BASE_DATE, result);",
      "info" : "ExpressionStatement[17320-17353]:ExpressionStatement[17320-17353]"
    }, {
      "left" : "assertDate(BASE_DATE, 2000, 6, 5, 4, 3, 2, 1);",
      "right" : "assertDate(BASE_DATE, 2000, 6, 5, 4, 3, 2, 1);",
      "info" : "ExpressionStatement[17362-17408]:ExpressionStatement[17362-17408]"
    }, {
      "left" : "assertDate(result, 2000, 5, 28, 4, 3, 2, 1);",
      "right" : "assertDate(result, 2000, 5, 28, 4, 3, 2, 1);",
      "info" : "ExpressionStatement[17430-17474]:ExpressionStatement[17430-17474]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[17574-17579]:MarkerAnnotation[17574-17579]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[17584-17590]:Modifier[17584-17590]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[17591-17595]:PrimitiveType[17591-17595]"
    }, {
      "left" : "testAddDays",
      "right" : "testAddDays",
      "info" : "SimpleName[17596-17607]:SimpleName[17596-17607]"
    }, {
      "left" : "Exception",
      "right" : "Exception",
      "info" : "SimpleType[17617-17626]:SimpleType[17617-17626]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17627-18255]:Block[17627-18255]"
    }, {
      "left" : "Date result = DateUtils.addDays(BASE_DATE, 0);",
      "right" : "Date result = DateUtils.addDays(BASE_DATE, 0);",
      "info" : "VariableDeclarationStatement[17637-17683]:VariableDeclarationStatement[17637-17683]"
    }, {
      "left" : "assertNotSame(BASE_DATE, result);",
      "right" : "assertNotSame(BASE_DATE, result);",
      "info" : "ExpressionStatement[17692-17725]:ExpressionStatement[17692-17725]"
    }, {
      "left" : "assertDate(BASE_DATE, 2000, 6, 5, 4, 3, 2, 1);",
      "right" : "assertDate(BASE_DATE, 2000, 6, 5, 4, 3, 2, 1);",
      "info" : "ExpressionStatement[17734-17780]:ExpressionStatement[17734-17780]"
    }, {
      "left" : "assertDate(result, 2000, 6, 5, 4, 3, 2, 1);",
      "right" : "assertDate(result, 2000, 6, 5, 4, 3, 2, 1);",
      "info" : "ExpressionStatement[17789-17832]:ExpressionStatement[17789-17832]"
    }, {
      "left" : "result = DateUtils.addDays(BASE_DATE, 1);",
      "right" : "result = DateUtils.addDays(BASE_DATE, 1);",
      "info" : "ExpressionStatement[17850-17891]:ExpressionStatement[17850-17891]"
    }, {
      "left" : "assertNotSame(BASE_DATE, result);",
      "right" : "assertNotSame(BASE_DATE, result);",
      "info" : "ExpressionStatement[17900-17933]:ExpressionStatement[17900-17933]"
    }, {
      "left" : "assertDate(BASE_DATE, 2000, 6, 5, 4, 3, 2, 1);",
      "right" : "assertDate(BASE_DATE, 2000, 6, 5, 4, 3, 2, 1);",
      "info" : "ExpressionStatement[17942-17988]:ExpressionStatement[17942-17988]"
    }, {
      "left" : "assertDate(result, 2000, 6, 6, 4, 3, 2, 1);",
      "right" : "assertDate(result, 2000, 6, 6, 4, 3, 2, 1);",
      "info" : "ExpressionStatement[17997-18040]:ExpressionStatement[17997-18040]"
    }, {
      "left" : "result = DateUtils.addDays(BASE_DATE, -1);",
      "right" : "result = DateUtils.addDays(BASE_DATE, -1);",
      "info" : "ExpressionStatement[18058-18100]:ExpressionStatement[18058-18100]"
    }, {
      "left" : "assertNotSame(BASE_DATE, result);",
      "right" : "assertNotSame(BASE_DATE, result);",
      "info" : "ExpressionStatement[18109-18142]:ExpressionStatement[18109-18142]"
    }, {
      "left" : "assertDate(BASE_DATE, 2000, 6, 5, 4, 3, 2, 1);",
      "right" : "assertDate(BASE_DATE, 2000, 6, 5, 4, 3, 2, 1);",
      "info" : "ExpressionStatement[18151-18197]:ExpressionStatement[18151-18197]"
    }, {
      "left" : "assertDate(result, 2000, 6, 4, 4, 3, 2, 1);",
      "right" : "assertDate(result, 2000, 6, 4, 4, 3, 2, 1);",
      "info" : "ExpressionStatement[18206-18249]:ExpressionStatement[18206-18249]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[18339-18344]:MarkerAnnotation[18339-18344]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[18349-18355]:Modifier[18349-18355]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[18356-18360]:PrimitiveType[18356-18360]"
    }, {
      "left" : "testAddHours",
      "right" : "testAddHours",
      "info" : "SimpleName[18361-18373]:SimpleName[18361-18373]"
    }, {
      "left" : "Exception",
      "right" : "Exception",
      "info" : "SimpleType[18383-18392]:SimpleType[18383-18392]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18393-19024]:Block[18393-19024]"
    }, {
      "left" : "Date result = DateUtils.addHours(BASE_DATE, 0);",
      "right" : "Date result = DateUtils.addHours(BASE_DATE, 0);",
      "info" : "VariableDeclarationStatement[18403-18450]:VariableDeclarationStatement[18403-18450]"
    }, {
      "left" : "assertNotSame(BASE_DATE, result);",
      "right" : "assertNotSame(BASE_DATE, result);",
      "info" : "ExpressionStatement[18459-18492]:ExpressionStatement[18459-18492]"
    }, {
      "left" : "assertDate(BASE_DATE, 2000, 6, 5, 4, 3, 2, 1);",
      "right" : "assertDate(BASE_DATE, 2000, 6, 5, 4, 3, 2, 1);",
      "info" : "ExpressionStatement[18501-18547]:ExpressionStatement[18501-18547]"
    }, {
      "left" : "assertDate(result, 2000, 6, 5, 4, 3, 2, 1);",
      "right" : "assertDate(result, 2000, 6, 5, 4, 3, 2, 1);",
      "info" : "ExpressionStatement[18556-18599]:ExpressionStatement[18556-18599]"
    }, {
      "left" : "result = DateUtils.addHours(BASE_DATE, 1);",
      "right" : "result = DateUtils.addHours(BASE_DATE, 1);",
      "info" : "ExpressionStatement[18617-18659]:ExpressionStatement[18617-18659]"
    }, {
      "left" : "assertNotSame(BASE_DATE, result);",
      "right" : "assertNotSame(BASE_DATE, result);",
      "info" : "ExpressionStatement[18668-18701]:ExpressionStatement[18668-18701]"
    }, {
      "left" : "assertDate(BASE_DATE, 2000, 6, 5, 4, 3, 2, 1);",
      "right" : "assertDate(BASE_DATE, 2000, 6, 5, 4, 3, 2, 1);",
      "info" : "ExpressionStatement[18710-18756]:ExpressionStatement[18710-18756]"
    }, {
      "left" : "assertDate(result, 2000, 6, 5, 5, 3, 2, 1);",
      "right" : "assertDate(result, 2000, 6, 5, 5, 3, 2, 1);",
      "info" : "ExpressionStatement[18765-18808]:ExpressionStatement[18765-18808]"
    }, {
      "left" : "result = DateUtils.addHours(BASE_DATE, -1);",
      "right" : "result = DateUtils.addHours(BASE_DATE, -1);",
      "info" : "ExpressionStatement[18826-18869]:ExpressionStatement[18826-18869]"
    }, {
      "left" : "assertNotSame(BASE_DATE, result);",
      "right" : "assertNotSame(BASE_DATE, result);",
      "info" : "ExpressionStatement[18878-18911]:ExpressionStatement[18878-18911]"
    }, {
      "left" : "assertDate(BASE_DATE, 2000, 6, 5, 4, 3, 2, 1);",
      "right" : "assertDate(BASE_DATE, 2000, 6, 5, 4, 3, 2, 1);",
      "info" : "ExpressionStatement[18920-18966]:ExpressionStatement[18920-18966]"
    }, {
      "left" : "assertDate(result, 2000, 6, 5, 3, 3, 2, 1);",
      "right" : "assertDate(result, 2000, 6, 5, 3, 3, 2, 1);",
      "info" : "ExpressionStatement[18975-19018]:ExpressionStatement[18975-19018]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[19108-19113]:MarkerAnnotation[19108-19113]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[19118-19124]:Modifier[19118-19124]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[19125-19129]:PrimitiveType[19125-19129]"
    }, {
      "left" : "testAddMinutes",
      "right" : "testAddMinutes",
      "info" : "SimpleName[19130-19144]:SimpleName[19130-19144]"
    }, {
      "left" : "Exception",
      "right" : "Exception",
      "info" : "SimpleType[19154-19163]:SimpleType[19154-19163]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19164-19801]:Block[19164-19801]"
    }, {
      "left" : "Date result = DateUtils.addMinutes(BASE_DATE, 0);",
      "right" : "Date result = DateUtils.addMinutes(BASE_DATE, 0);",
      "info" : "VariableDeclarationStatement[19174-19223]:VariableDeclarationStatement[19174-19223]"
    }, {
      "left" : "assertNotSame(BASE_DATE, result);",
      "right" : "assertNotSame(BASE_DATE, result);",
      "info" : "ExpressionStatement[19232-19265]:ExpressionStatement[19232-19265]"
    }, {
      "left" : "assertDate(BASE_DATE, 2000, 6, 5, 4, 3, 2, 1);",
      "right" : "assertDate(BASE_DATE, 2000, 6, 5, 4, 3, 2, 1);",
      "info" : "ExpressionStatement[19274-19320]:ExpressionStatement[19274-19320]"
    }, {
      "left" : "assertDate(result, 2000, 6, 5, 4, 3, 2, 1);",
      "right" : "assertDate(result, 2000, 6, 5, 4, 3, 2, 1);",
      "info" : "ExpressionStatement[19329-19372]:ExpressionStatement[19329-19372]"
    }, {
      "left" : "result = DateUtils.addMinutes(BASE_DATE, 1);",
      "right" : "result = DateUtils.addMinutes(BASE_DATE, 1);",
      "info" : "ExpressionStatement[19390-19434]:ExpressionStatement[19390-19434]"
    }, {
      "left" : "assertNotSame(BASE_DATE, result);",
      "right" : "assertNotSame(BASE_DATE, result);",
      "info" : "ExpressionStatement[19443-19476]:ExpressionStatement[19443-19476]"
    }, {
      "left" : "assertDate(BASE_DATE, 2000, 6, 5, 4, 3, 2, 1);",
      "right" : "assertDate(BASE_DATE, 2000, 6, 5, 4, 3, 2, 1);",
      "info" : "ExpressionStatement[19485-19531]:ExpressionStatement[19485-19531]"
    }, {
      "left" : "assertDate(result, 2000, 6, 5, 4, 4, 2, 1);",
      "right" : "assertDate(result, 2000, 6, 5, 4, 4, 2, 1);",
      "info" : "ExpressionStatement[19540-19583]:ExpressionStatement[19540-19583]"
    }, {
      "left" : "result = DateUtils.addMinutes(BASE_DATE, -1);",
      "right" : "result = DateUtils.addMinutes(BASE_DATE, -1);",
      "info" : "ExpressionStatement[19601-19646]:ExpressionStatement[19601-19646]"
    }, {
      "left" : "assertNotSame(BASE_DATE, result);",
      "right" : "assertNotSame(BASE_DATE, result);",
      "info" : "ExpressionStatement[19655-19688]:ExpressionStatement[19655-19688]"
    }, {
      "left" : "assertDate(BASE_DATE, 2000, 6, 5, 4, 3, 2, 1);",
      "right" : "assertDate(BASE_DATE, 2000, 6, 5, 4, 3, 2, 1);",
      "info" : "ExpressionStatement[19697-19743]:ExpressionStatement[19697-19743]"
    }, {
      "left" : "assertDate(result, 2000, 6, 5, 4, 2, 2, 1);",
      "right" : "assertDate(result, 2000, 6, 5, 4, 2, 2, 1);",
      "info" : "ExpressionStatement[19752-19795]:ExpressionStatement[19752-19795]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[19885-19890]:MarkerAnnotation[19885-19890]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[19895-19901]:Modifier[19895-19901]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[19902-19906]:PrimitiveType[19902-19906]"
    }, {
      "left" : "testAddSeconds",
      "right" : "testAddSeconds",
      "info" : "SimpleName[19907-19921]:SimpleName[19907-19921]"
    }, {
      "left" : "Exception",
      "right" : "Exception",
      "info" : "SimpleType[19931-19940]:SimpleType[19931-19940]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19941-20578]:Block[19941-20578]"
    }, {
      "left" : "Date result = DateUtils.addSeconds(BASE_DATE, 0);",
      "right" : "Date result = DateUtils.addSeconds(BASE_DATE, 0);",
      "info" : "VariableDeclarationStatement[19951-20000]:VariableDeclarationStatement[19951-20000]"
    }, {
      "left" : "assertNotSame(BASE_DATE, result);",
      "right" : "assertNotSame(BASE_DATE, result);",
      "info" : "ExpressionStatement[20009-20042]:ExpressionStatement[20009-20042]"
    }, {
      "left" : "assertDate(BASE_DATE, 2000, 6, 5, 4, 3, 2, 1);",
      "right" : "assertDate(BASE_DATE, 2000, 6, 5, 4, 3, 2, 1);",
      "info" : "ExpressionStatement[20051-20097]:ExpressionStatement[20051-20097]"
    }, {
      "left" : "assertDate(result, 2000, 6, 5, 4, 3, 2, 1);",
      "right" : "assertDate(result, 2000, 6, 5, 4, 3, 2, 1);",
      "info" : "ExpressionStatement[20106-20149]:ExpressionStatement[20106-20149]"
    }, {
      "left" : "result = DateUtils.addSeconds(BASE_DATE, 1);",
      "right" : "result = DateUtils.addSeconds(BASE_DATE, 1);",
      "info" : "ExpressionStatement[20167-20211]:ExpressionStatement[20167-20211]"
    }, {
      "left" : "assertNotSame(BASE_DATE, result);",
      "right" : "assertNotSame(BASE_DATE, result);",
      "info" : "ExpressionStatement[20220-20253]:ExpressionStatement[20220-20253]"
    }, {
      "left" : "assertDate(BASE_DATE, 2000, 6, 5, 4, 3, 2, 1);",
      "right" : "assertDate(BASE_DATE, 2000, 6, 5, 4, 3, 2, 1);",
      "info" : "ExpressionStatement[20262-20308]:ExpressionStatement[20262-20308]"
    }, {
      "left" : "assertDate(result, 2000, 6, 5, 4, 3, 3, 1);",
      "right" : "assertDate(result, 2000, 6, 5, 4, 3, 3, 1);",
      "info" : "ExpressionStatement[20317-20360]:ExpressionStatement[20317-20360]"
    }, {
      "left" : "result = DateUtils.addSeconds(BASE_DATE, -1);",
      "right" : "result = DateUtils.addSeconds(BASE_DATE, -1);",
      "info" : "ExpressionStatement[20378-20423]:ExpressionStatement[20378-20423]"
    }, {
      "left" : "assertNotSame(BASE_DATE, result);",
      "right" : "assertNotSame(BASE_DATE, result);",
      "info" : "ExpressionStatement[20432-20465]:ExpressionStatement[20432-20465]"
    }, {
      "left" : "assertDate(BASE_DATE, 2000, 6, 5, 4, 3, 2, 1);",
      "right" : "assertDate(BASE_DATE, 2000, 6, 5, 4, 3, 2, 1);",
      "info" : "ExpressionStatement[20474-20520]:ExpressionStatement[20474-20520]"
    }, {
      "left" : "assertDate(result, 2000, 6, 5, 4, 3, 1, 1);",
      "right" : "assertDate(result, 2000, 6, 5, 4, 3, 1, 1);",
      "info" : "ExpressionStatement[20529-20572]:ExpressionStatement[20529-20572]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[20662-20667]:MarkerAnnotation[20662-20667]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[20672-20678]:Modifier[20672-20678]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[20679-20683]:PrimitiveType[20679-20683]"
    }, {
      "left" : "testAddMilliseconds",
      "right" : "testAddMilliseconds",
      "info" : "SimpleName[20684-20703]:SimpleName[20684-20703]"
    }, {
      "left" : "Exception",
      "right" : "Exception",
      "info" : "SimpleType[20713-20722]:SimpleType[20713-20722]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20723-21375]:Block[20723-21375]"
    }, {
      "left" : "Date result = DateUtils.addMilliseconds(BASE_DATE, 0);",
      "right" : "Date result = DateUtils.addMilliseconds(BASE_DATE, 0);",
      "info" : "VariableDeclarationStatement[20733-20787]:VariableDeclarationStatement[20733-20787]"
    }, {
      "left" : "assertNotSame(BASE_DATE, result);",
      "right" : "assertNotSame(BASE_DATE, result);",
      "info" : "ExpressionStatement[20796-20829]:ExpressionStatement[20796-20829]"
    }, {
      "left" : "assertDate(BASE_DATE, 2000, 6, 5, 4, 3, 2, 1);",
      "right" : "assertDate(BASE_DATE, 2000, 6, 5, 4, 3, 2, 1);",
      "info" : "ExpressionStatement[20838-20884]:ExpressionStatement[20838-20884]"
    }, {
      "left" : "assertDate(result, 2000, 6, 5, 4, 3, 2, 1);",
      "right" : "assertDate(result, 2000, 6, 5, 4, 3, 2, 1);",
      "info" : "ExpressionStatement[20893-20936]:ExpressionStatement[20893-20936]"
    }, {
      "left" : "result = DateUtils.addMilliseconds(BASE_DATE, 1);",
      "right" : "result = DateUtils.addMilliseconds(BASE_DATE, 1);",
      "info" : "ExpressionStatement[20954-21003]:ExpressionStatement[20954-21003]"
    }, {
      "left" : "assertNotSame(BASE_DATE, result);",
      "right" : "assertNotSame(BASE_DATE, result);",
      "info" : "ExpressionStatement[21012-21045]:ExpressionStatement[21012-21045]"
    }, {
      "left" : "assertDate(BASE_DATE, 2000, 6, 5, 4, 3, 2, 1);",
      "right" : "assertDate(BASE_DATE, 2000, 6, 5, 4, 3, 2, 1);",
      "info" : "ExpressionStatement[21054-21100]:ExpressionStatement[21054-21100]"
    }, {
      "left" : "assertDate(result, 2000, 6, 5, 4, 3, 2, 2);",
      "right" : "assertDate(result, 2000, 6, 5, 4, 3, 2, 2);",
      "info" : "ExpressionStatement[21109-21152]:ExpressionStatement[21109-21152]"
    }, {
      "left" : "result = DateUtils.addMilliseconds(BASE_DATE, -1);",
      "right" : "result = DateUtils.addMilliseconds(BASE_DATE, -1);",
      "info" : "ExpressionStatement[21170-21220]:ExpressionStatement[21170-21220]"
    }, {
      "left" : "assertNotSame(BASE_DATE, result);",
      "right" : "assertNotSame(BASE_DATE, result);",
      "info" : "ExpressionStatement[21229-21262]:ExpressionStatement[21229-21262]"
    }, {
      "left" : "assertDate(BASE_DATE, 2000, 6, 5, 4, 3, 2, 1);",
      "right" : "assertDate(BASE_DATE, 2000, 6, 5, 4, 3, 2, 1);",
      "info" : "ExpressionStatement[21271-21317]:ExpressionStatement[21271-21317]"
    }, {
      "left" : "assertDate(result, 2000, 6, 5, 4, 3, 2, 0);",
      "right" : "assertDate(result, 2000, 6, 5, 4, 3, 2, 0);",
      "info" : "ExpressionStatement[21326-21369]:ExpressionStatement[21326-21369]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[21460-21465]:MarkerAnnotation[21460-21465]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[21470-21476]:Modifier[21470-21476]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[21477-21481]:PrimitiveType[21477-21481]"
    }, {
      "left" : "testSetYears",
      "right" : "testSetYears",
      "info" : "SimpleName[21482-21494]:SimpleName[21482-21494]"
    }, {
      "left" : "Exception",
      "right" : "Exception",
      "info" : "SimpleType[21504-21513]:SimpleType[21504-21513]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21514-22137]:Block[21514-22137]"
    }, {
      "left" : "Date result = DateUtils.setYears(BASE_DATE, 2000);",
      "right" : "Date result = DateUtils.setYears(BASE_DATE, 2000);",
      "info" : "VariableDeclarationStatement[21524-21574]:VariableDeclarationStatement[21524-21574]"
    }, {
      "left" : "assertNotSame(BASE_DATE, result);",
      "right" : "assertNotSame(BASE_DATE, result);",
      "info" : "ExpressionStatement[21583-21616]:ExpressionStatement[21583-21616]"
    }, {
      "left" : "assertDate(BASE_DATE, 2000, 6, 5, 4, 3, 2, 1);",
      "right" : "assertDate(BASE_DATE, 2000, 6, 5, 4, 3, 2, 1);",
      "info" : "ExpressionStatement[21625-21671]:ExpressionStatement[21625-21671]"
    }, {
      "left" : "assertDate(result, 2000, 6, 5, 4, 3, 2, 1);",
      "right" : "assertDate(result, 2000, 6, 5, 4, 3, 2, 1);",
      "info" : "ExpressionStatement[21680-21723]:ExpressionStatement[21680-21723]"
    }, {
      "left" : "result = DateUtils.setYears(BASE_DATE, 2008);",
      "right" : "result = DateUtils.setYears(BASE_DATE, 2008);",
      "info" : "ExpressionStatement[21733-21778]:ExpressionStatement[21733-21778]"
    }, {
      "left" : "assertNotSame(BASE_DATE, result);",
      "right" : "assertNotSame(BASE_DATE, result);",
      "info" : "ExpressionStatement[21787-21820]:ExpressionStatement[21787-21820]"
    }, {
      "left" : "assertDate(BASE_DATE, 2000, 6, 5, 4, 3, 2, 1);",
      "right" : "assertDate(BASE_DATE, 2000, 6, 5, 4, 3, 2, 1);",
      "info" : "ExpressionStatement[21829-21875]:ExpressionStatement[21829-21875]"
    }, {
      "left" : "assertDate(result, 2008, 6, 5, 4, 3, 2, 1);",
      "right" : "assertDate(result, 2008, 6, 5, 4, 3, 2, 1);",
      "info" : "ExpressionStatement[21884-21927]:ExpressionStatement[21884-21927]"
    }, {
      "left" : "result = DateUtils.setYears(BASE_DATE, 2005);",
      "right" : "result = DateUtils.setYears(BASE_DATE, 2005);",
      "info" : "ExpressionStatement[21937-21982]:ExpressionStatement[21937-21982]"
    }, {
      "left" : "assertNotSame(BASE_DATE, result);",
      "right" : "assertNotSame(BASE_DATE, result);",
      "info" : "ExpressionStatement[21991-22024]:ExpressionStatement[21991-22024]"
    }, {
      "left" : "assertDate(BASE_DATE, 2000, 6, 5, 4, 3, 2, 1);",
      "right" : "assertDate(BASE_DATE, 2000, 6, 5, 4, 3, 2, 1);",
      "info" : "ExpressionStatement[22033-22079]:ExpressionStatement[22033-22079]"
    }, {
      "left" : "assertDate(result, 2005, 6, 5, 4, 3, 2, 1);",
      "right" : "assertDate(result, 2005, 6, 5, 4, 3, 2, 1);",
      "info" : "ExpressionStatement[22088-22131]:ExpressionStatement[22088-22131]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[22222-22227]:MarkerAnnotation[22222-22227]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[22232-22238]:Modifier[22232-22238]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[22239-22243]:PrimitiveType[22239-22243]"
    }, {
      "left" : "testSetMonths",
      "right" : "testSetMonths",
      "info" : "SimpleName[22244-22257]:SimpleName[22244-22257]"
    }, {
      "left" : "Exception",
      "right" : "Exception",
      "info" : "SimpleType[22267-22276]:SimpleType[22267-22276]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22277-22912]:Block[22277-22912]"
    }, {
      "left" : "Date result = DateUtils.setMonths(BASE_DATE, 5);",
      "right" : "Date result = DateUtils.setMonths(BASE_DATE, 5);",
      "info" : "VariableDeclarationStatement[22287-22335]:VariableDeclarationStatement[22287-22335]"
    }, {
      "left" : "assertNotSame(BASE_DATE, result);",
      "right" : "assertNotSame(BASE_DATE, result);",
      "info" : "ExpressionStatement[22344-22377]:ExpressionStatement[22344-22377]"
    }, {
      "left" : "assertDate(BASE_DATE, 2000, 6, 5, 4, 3, 2, 1);",
      "right" : "assertDate(BASE_DATE, 2000, 6, 5, 4, 3, 2, 1);",
      "info" : "ExpressionStatement[22386-22432]:ExpressionStatement[22386-22432]"
    }, {
      "left" : "assertDate(result, 2000, 5, 5, 4, 3, 2, 1);",
      "right" : "assertDate(result, 2000, 5, 5, 4, 3, 2, 1);",
      "info" : "ExpressionStatement[22441-22484]:ExpressionStatement[22441-22484]"
    }, {
      "left" : "result = DateUtils.setMonths(BASE_DATE, 1);",
      "right" : "result = DateUtils.setMonths(BASE_DATE, 1);",
      "info" : "ExpressionStatement[22494-22537]:ExpressionStatement[22494-22537]"
    }, {
      "left" : "assertNotSame(BASE_DATE, result);",
      "right" : "assertNotSame(BASE_DATE, result);",
      "info" : "ExpressionStatement[22546-22579]:ExpressionStatement[22546-22579]"
    }, {
      "left" : "assertDate(BASE_DATE, 2000, 6, 5, 4, 3, 2, 1);",
      "right" : "assertDate(BASE_DATE, 2000, 6, 5, 4, 3, 2, 1);",
      "info" : "ExpressionStatement[22588-22634]:ExpressionStatement[22588-22634]"
    }, {
      "left" : "assertDate(result, 2000, 1, 5, 4, 3, 2, 1);",
      "right" : "assertDate(result, 2000, 1, 5, 4, 3, 2, 1);",
      "info" : "ExpressionStatement[22643-22686]:ExpressionStatement[22643-22686]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[22696-22906]:TryStatement[22696-22906]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22700-22852]:Block[22700-22852]"
    }, {
      "left" : "DateUtils.setMonths(BASE_DATE, 12);",
      "right" : "DateUtils.setMonths(BASE_DATE, 12);",
      "info" : "ExpressionStatement[22714-22749]:ExpressionStatement[22714-22749]"
    }, {
      "left" : "fail(\"DateUtils.setMonths did not throw an expected IllegalArgumentException.\");",
      "right" : "fail(\"DateUtils.setMonths did not throw an expected IllegalArgumentException.\");",
      "info" : "ExpressionStatement[22762-22842]:ExpressionStatement[22762-22842]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22894-22906]:Block[22894-22906]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[22997-23002]:MarkerAnnotation[22997-23002]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[23007-23013]:Modifier[23007-23013]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[23014-23018]:PrimitiveType[23014-23018]"
    }, {
      "left" : "testSetDays",
      "right" : "testSetDays",
      "info" : "SimpleName[23019-23030]:SimpleName[23019-23030]"
    }, {
      "left" : "Exception",
      "right" : "Exception",
      "info" : "SimpleType[23040-23049]:SimpleType[23040-23049]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23050-23679]:Block[23050-23679]"
    }, {
      "left" : "Date result = DateUtils.setDays(BASE_DATE, 1);",
      "right" : "Date result = DateUtils.setDays(BASE_DATE, 1);",
      "info" : "VariableDeclarationStatement[23060-23106]:VariableDeclarationStatement[23060-23106]"
    }, {
      "left" : "assertNotSame(BASE_DATE, result);",
      "right" : "assertNotSame(BASE_DATE, result);",
      "info" : "ExpressionStatement[23115-23148]:ExpressionStatement[23115-23148]"
    }, {
      "left" : "assertDate(BASE_DATE, 2000, 6, 5, 4, 3, 2, 1);",
      "right" : "assertDate(BASE_DATE, 2000, 6, 5, 4, 3, 2, 1);",
      "info" : "ExpressionStatement[23157-23203]:ExpressionStatement[23157-23203]"
    }, {
      "left" : "assertDate(result, 2000, 6, 1, 4, 3, 2, 1);",
      "right" : "assertDate(result, 2000, 6, 1, 4, 3, 2, 1);",
      "info" : "ExpressionStatement[23212-23255]:ExpressionStatement[23212-23255]"
    }, {
      "left" : "result = DateUtils.setDays(BASE_DATE, 29);",
      "right" : "result = DateUtils.setDays(BASE_DATE, 29);",
      "info" : "ExpressionStatement[23265-23307]:ExpressionStatement[23265-23307]"
    }, {
      "left" : "assertNotSame(BASE_DATE, result);",
      "right" : "assertNotSame(BASE_DATE, result);",
      "info" : "ExpressionStatement[23316-23349]:ExpressionStatement[23316-23349]"
    }, {
      "left" : "assertDate(BASE_DATE, 2000, 6, 5, 4, 3, 2, 1);",
      "right" : "assertDate(BASE_DATE, 2000, 6, 5, 4, 3, 2, 1);",
      "info" : "ExpressionStatement[23358-23404]:ExpressionStatement[23358-23404]"
    }, {
      "left" : "assertDate(result, 2000, 6, 29, 4, 3, 2, 1);",
      "right" : "assertDate(result, 2000, 6, 29, 4, 3, 2, 1);",
      "info" : "ExpressionStatement[23413-23457]:ExpressionStatement[23413-23457]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[23467-23673]:TryStatement[23467-23673]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23471-23619]:Block[23471-23619]"
    }, {
      "left" : "DateUtils.setDays(BASE_DATE, 32);",
      "right" : "DateUtils.setDays(BASE_DATE, 32);",
      "info" : "ExpressionStatement[23485-23518]:ExpressionStatement[23485-23518]"
    }, {
      "left" : "fail(\"DateUtils.setDays did not throw an expected IllegalArgumentException.\");",
      "right" : "fail(\"DateUtils.setDays did not throw an expected IllegalArgumentException.\");",
      "info" : "ExpressionStatement[23531-23609]:ExpressionStatement[23531-23609]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23661-23673]:Block[23661-23673]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[23764-23769]:MarkerAnnotation[23764-23769]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[23774-23780]:Modifier[23774-23780]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[23781-23785]:PrimitiveType[23781-23785]"
    }, {
      "left" : "testSetHours",
      "right" : "testSetHours",
      "info" : "SimpleName[23786-23798]:SimpleName[23786-23798]"
    }, {
      "left" : "Exception",
      "right" : "Exception",
      "info" : "SimpleType[23808-23817]:SimpleType[23808-23817]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23818-24451]:Block[23818-24451]"
    }, {
      "left" : "Date result = DateUtils.setHours(BASE_DATE, 0);",
      "right" : "Date result = DateUtils.setHours(BASE_DATE, 0);",
      "info" : "VariableDeclarationStatement[23828-23875]:VariableDeclarationStatement[23828-23875]"
    }, {
      "left" : "assertNotSame(BASE_DATE, result);",
      "right" : "assertNotSame(BASE_DATE, result);",
      "info" : "ExpressionStatement[23884-23917]:ExpressionStatement[23884-23917]"
    }, {
      "left" : "assertDate(BASE_DATE, 2000, 6, 5, 4, 3, 2, 1);",
      "right" : "assertDate(BASE_DATE, 2000, 6, 5, 4, 3, 2, 1);",
      "info" : "ExpressionStatement[23926-23972]:ExpressionStatement[23926-23972]"
    }, {
      "left" : "assertDate(result, 2000, 6, 5, 0, 3, 2, 1);",
      "right" : "assertDate(result, 2000, 6, 5, 0, 3, 2, 1);",
      "info" : "ExpressionStatement[23981-24024]:ExpressionStatement[23981-24024]"
    }, {
      "left" : "result = DateUtils.setHours(BASE_DATE, 23);",
      "right" : "result = DateUtils.setHours(BASE_DATE, 23);",
      "info" : "ExpressionStatement[24034-24077]:ExpressionStatement[24034-24077]"
    }, {
      "left" : "assertNotSame(BASE_DATE, result);",
      "right" : "assertNotSame(BASE_DATE, result);",
      "info" : "ExpressionStatement[24086-24119]:ExpressionStatement[24086-24119]"
    }, {
      "left" : "assertDate(BASE_DATE, 2000, 6, 5, 4, 3, 2, 1);",
      "right" : "assertDate(BASE_DATE, 2000, 6, 5, 4, 3, 2, 1);",
      "info" : "ExpressionStatement[24128-24174]:ExpressionStatement[24128-24174]"
    }, {
      "left" : "assertDate(result, 2000, 6, 5, 23, 3, 2, 1);",
      "right" : "assertDate(result, 2000, 6, 5, 23, 3, 2, 1);",
      "info" : "ExpressionStatement[24183-24227]:ExpressionStatement[24183-24227]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[24237-24445]:TryStatement[24237-24445]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24241-24391]:Block[24241-24391]"
    }, {
      "left" : "DateUtils.setHours(BASE_DATE, 24);",
      "right" : "DateUtils.setHours(BASE_DATE, 24);",
      "info" : "ExpressionStatement[24255-24289]:ExpressionStatement[24255-24289]"
    }, {
      "left" : "fail(\"DateUtils.setHours did not throw an expected IllegalArgumentException.\");",
      "right" : "fail(\"DateUtils.setHours did not throw an expected IllegalArgumentException.\");",
      "info" : "ExpressionStatement[24302-24381]:ExpressionStatement[24302-24381]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24433-24445]:Block[24433-24445]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[24536-24541]:MarkerAnnotation[24536-24541]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[24546-24552]:Modifier[24546-24552]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[24553-24557]:PrimitiveType[24553-24557]"
    }, {
      "left" : "testSetMinutes",
      "right" : "testSetMinutes",
      "info" : "SimpleName[24558-24572]:SimpleName[24558-24572]"
    }, {
      "left" : "Exception",
      "right" : "Exception",
      "info" : "SimpleType[24582-24591]:SimpleType[24582-24591]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24592-25233]:Block[24592-25233]"
    }, {
      "left" : "Date result = DateUtils.setMinutes(BASE_DATE, 0);",
      "right" : "Date result = DateUtils.setMinutes(BASE_DATE, 0);",
      "info" : "VariableDeclarationStatement[24602-24651]:VariableDeclarationStatement[24602-24651]"
    }, {
      "left" : "assertNotSame(BASE_DATE, result);",
      "right" : "assertNotSame(BASE_DATE, result);",
      "info" : "ExpressionStatement[24660-24693]:ExpressionStatement[24660-24693]"
    }, {
      "left" : "assertDate(BASE_DATE, 2000, 6, 5, 4, 3, 2, 1);",
      "right" : "assertDate(BASE_DATE, 2000, 6, 5, 4, 3, 2, 1);",
      "info" : "ExpressionStatement[24702-24748]:ExpressionStatement[24702-24748]"
    }, {
      "left" : "assertDate(result, 2000, 6, 5, 4, 0, 2, 1);",
      "right" : "assertDate(result, 2000, 6, 5, 4, 0, 2, 1);",
      "info" : "ExpressionStatement[24757-24800]:ExpressionStatement[24757-24800]"
    }, {
      "left" : "result = DateUtils.setMinutes(BASE_DATE, 59);",
      "right" : "result = DateUtils.setMinutes(BASE_DATE, 59);",
      "info" : "ExpressionStatement[24810-24855]:ExpressionStatement[24810-24855]"
    }, {
      "left" : "assertNotSame(BASE_DATE, result);",
      "right" : "assertNotSame(BASE_DATE, result);",
      "info" : "ExpressionStatement[24864-24897]:ExpressionStatement[24864-24897]"
    }, {
      "left" : "assertDate(BASE_DATE, 2000, 6, 5, 4, 3, 2, 1);",
      "right" : "assertDate(BASE_DATE, 2000, 6, 5, 4, 3, 2, 1);",
      "info" : "ExpressionStatement[24906-24952]:ExpressionStatement[24906-24952]"
    }, {
      "left" : "assertDate(result, 2000, 6, 5, 4, 59, 2, 1);",
      "right" : "assertDate(result, 2000, 6, 5, 4, 59, 2, 1);",
      "info" : "ExpressionStatement[24961-25005]:ExpressionStatement[24961-25005]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[25015-25227]:TryStatement[25015-25227]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25019-25173]:Block[25019-25173]"
    }, {
      "left" : "DateUtils.setMinutes(BASE_DATE, 60);",
      "right" : "DateUtils.setMinutes(BASE_DATE, 60);",
      "info" : "ExpressionStatement[25033-25069]:ExpressionStatement[25033-25069]"
    }, {
      "left" : "fail(\"DateUtils.setMinutes did not throw an expected IllegalArgumentException.\");",
      "right" : "fail(\"DateUtils.setMinutes did not throw an expected IllegalArgumentException.\");",
      "info" : "ExpressionStatement[25082-25163]:ExpressionStatement[25082-25163]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25215-25227]:Block[25215-25227]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[25318-25323]:MarkerAnnotation[25318-25323]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[25328-25334]:Modifier[25328-25334]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[25335-25339]:PrimitiveType[25335-25339]"
    }, {
      "left" : "testSetSeconds",
      "right" : "testSetSeconds",
      "info" : "SimpleName[25340-25354]:SimpleName[25340-25354]"
    }, {
      "left" : "Exception",
      "right" : "Exception",
      "info" : "SimpleType[25364-25373]:SimpleType[25364-25373]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25374-26015]:Block[25374-26015]"
    }, {
      "left" : "Date result = DateUtils.setSeconds(BASE_DATE, 0);",
      "right" : "Date result = DateUtils.setSeconds(BASE_DATE, 0);",
      "info" : "VariableDeclarationStatement[25384-25433]:VariableDeclarationStatement[25384-25433]"
    }, {
      "left" : "assertNotSame(BASE_DATE, result);",
      "right" : "assertNotSame(BASE_DATE, result);",
      "info" : "ExpressionStatement[25442-25475]:ExpressionStatement[25442-25475]"
    }, {
      "left" : "assertDate(BASE_DATE, 2000, 6, 5, 4, 3, 2, 1);",
      "right" : "assertDate(BASE_DATE, 2000, 6, 5, 4, 3, 2, 1);",
      "info" : "ExpressionStatement[25484-25530]:ExpressionStatement[25484-25530]"
    }, {
      "left" : "assertDate(result, 2000, 6, 5, 4, 3, 0, 1);",
      "right" : "assertDate(result, 2000, 6, 5, 4, 3, 0, 1);",
      "info" : "ExpressionStatement[25539-25582]:ExpressionStatement[25539-25582]"
    }, {
      "left" : "result = DateUtils.setSeconds(BASE_DATE, 59);",
      "right" : "result = DateUtils.setSeconds(BASE_DATE, 59);",
      "info" : "ExpressionStatement[25592-25637]:ExpressionStatement[25592-25637]"
    }, {
      "left" : "assertNotSame(BASE_DATE, result);",
      "right" : "assertNotSame(BASE_DATE, result);",
      "info" : "ExpressionStatement[25646-25679]:ExpressionStatement[25646-25679]"
    }, {
      "left" : "assertDate(BASE_DATE, 2000, 6, 5, 4, 3, 2, 1);",
      "right" : "assertDate(BASE_DATE, 2000, 6, 5, 4, 3, 2, 1);",
      "info" : "ExpressionStatement[25688-25734]:ExpressionStatement[25688-25734]"
    }, {
      "left" : "assertDate(result, 2000, 6, 5, 4, 3, 59, 1);",
      "right" : "assertDate(result, 2000, 6, 5, 4, 3, 59, 1);",
      "info" : "ExpressionStatement[25743-25787]:ExpressionStatement[25743-25787]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[25797-26009]:TryStatement[25797-26009]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25801-25955]:Block[25801-25955]"
    }, {
      "left" : "DateUtils.setSeconds(BASE_DATE, 60);",
      "right" : "DateUtils.setSeconds(BASE_DATE, 60);",
      "info" : "ExpressionStatement[25815-25851]:ExpressionStatement[25815-25851]"
    }, {
      "left" : "fail(\"DateUtils.setSeconds did not throw an expected IllegalArgumentException.\");",
      "right" : "fail(\"DateUtils.setSeconds did not throw an expected IllegalArgumentException.\");",
      "info" : "ExpressionStatement[25864-25945]:ExpressionStatement[25864-25945]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25997-26009]:Block[25997-26009]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[26100-26105]:MarkerAnnotation[26100-26105]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[26110-26116]:Modifier[26110-26116]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[26117-26121]:PrimitiveType[26117-26121]"
    }, {
      "left" : "testSetMilliseconds",
      "right" : "testSetMilliseconds",
      "info" : "SimpleName[26122-26141]:SimpleName[26122-26141]"
    }, {
      "left" : "Exception",
      "right" : "Exception",
      "info" : "SimpleType[26151-26160]:SimpleType[26151-26160]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26161-26826]:Block[26161-26826]"
    }, {
      "left" : "Date result = DateUtils.setMilliseconds(BASE_DATE, 0);",
      "right" : "Date result = DateUtils.setMilliseconds(BASE_DATE, 0);",
      "info" : "VariableDeclarationStatement[26171-26225]:VariableDeclarationStatement[26171-26225]"
    }, {
      "left" : "assertNotSame(BASE_DATE, result);",
      "right" : "assertNotSame(BASE_DATE, result);",
      "info" : "ExpressionStatement[26234-26267]:ExpressionStatement[26234-26267]"
    }, {
      "left" : "assertDate(BASE_DATE, 2000, 6, 5, 4, 3, 2, 1);",
      "right" : "assertDate(BASE_DATE, 2000, 6, 5, 4, 3, 2, 1);",
      "info" : "ExpressionStatement[26276-26322]:ExpressionStatement[26276-26322]"
    }, {
      "left" : "assertDate(result, 2000, 6, 5, 4, 3, 2, 0);",
      "right" : "assertDate(result, 2000, 6, 5, 4, 3, 2, 0);",
      "info" : "ExpressionStatement[26331-26374]:ExpressionStatement[26331-26374]"
    }, {
      "left" : "result = DateUtils.setMilliseconds(BASE_DATE, 999);",
      "right" : "result = DateUtils.setMilliseconds(BASE_DATE, 999);",
      "info" : "ExpressionStatement[26384-26435]:ExpressionStatement[26384-26435]"
    }, {
      "left" : "assertNotSame(BASE_DATE, result);",
      "right" : "assertNotSame(BASE_DATE, result);",
      "info" : "ExpressionStatement[26444-26477]:ExpressionStatement[26444-26477]"
    }, {
      "left" : "assertDate(BASE_DATE, 2000, 6, 5, 4, 3, 2, 1);",
      "right" : "assertDate(BASE_DATE, 2000, 6, 5, 4, 3, 2, 1);",
      "info" : "ExpressionStatement[26486-26532]:ExpressionStatement[26486-26532]"
    }, {
      "left" : "assertDate(result, 2000, 6, 5, 4, 3, 2, 999);",
      "right" : "assertDate(result, 2000, 6, 5, 4, 3, 2, 999);",
      "info" : "ExpressionStatement[26541-26586]:ExpressionStatement[26541-26586]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[26596-26820]:TryStatement[26596-26820]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26600-26766]:Block[26600-26766]"
    }, {
      "left" : "DateUtils.setMilliseconds(BASE_DATE, 1000);",
      "right" : "DateUtils.setMilliseconds(BASE_DATE, 1000);",
      "info" : "ExpressionStatement[26614-26657]:ExpressionStatement[26614-26657]"
    }, {
      "left" : "fail(\"DateUtils.setMilliseconds did not throw an expected IllegalArgumentException.\");",
      "right" : "fail(\"DateUtils.setMilliseconds did not throw an expected IllegalArgumentException.\");",
      "info" : "ExpressionStatement[26670-26756]:ExpressionStatement[26670-26756]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26808-26820]:Block[26808-26820]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[26910-26917]:Modifier[26910-26917]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[26918-26922]:PrimitiveType[26918-26922]"
    }, {
      "left" : "assertDate",
      "right" : "assertDate",
      "info" : "SimpleName[26923-26933]:SimpleName[26923-26933]"
    }, {
      "left" : "final Date date",
      "right" : "final Date date",
      "info" : "SingleVariableDeclaration[26934-26949]:SingleVariableDeclaration[26934-26949]"
    }, {
      "left" : "final int year",
      "right" : "final int year",
      "info" : "SingleVariableDeclaration[26951-26965]:SingleVariableDeclaration[26951-26965]"
    }, {
      "left" : "final int month",
      "right" : "final int month",
      "info" : "SingleVariableDeclaration[26967-26982]:SingleVariableDeclaration[26967-26982]"
    }, {
      "left" : "final int day",
      "right" : "final int day",
      "info" : "SingleVariableDeclaration[26984-26997]:SingleVariableDeclaration[26984-26997]"
    }, {
      "left" : "final int hour",
      "right" : "final int hour",
      "info" : "SingleVariableDeclaration[26999-27013]:SingleVariableDeclaration[26999-27013]"
    }, {
      "left" : "final int min",
      "right" : "final int min",
      "info" : "SingleVariableDeclaration[27015-27028]:SingleVariableDeclaration[27015-27028]"
    }, {
      "left" : "final int sec",
      "right" : "final int sec",
      "info" : "SingleVariableDeclaration[27030-27043]:SingleVariableDeclaration[27030-27043]"
    }, {
      "left" : "final int mil",
      "right" : "final int mil",
      "info" : "SingleVariableDeclaration[27045-27058]:SingleVariableDeclaration[27045-27058]"
    }, {
      "left" : "Exception",
      "right" : "Exception",
      "info" : "SimpleType[27067-27076]:SimpleType[27067-27076]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27077-27562]:Block[27077-27562]"
    }, {
      "left" : "final GregorianCalendar cal = new GregorianCalendar();",
      "right" : "final GregorianCalendar cal = new GregorianCalendar();",
      "info" : "VariableDeclarationStatement[27087-27141]:VariableDeclarationStatement[27087-27141]"
    }, {
      "left" : "cal.setTime(date);",
      "right" : "cal.setTime(date);",
      "info" : "ExpressionStatement[27150-27168]:ExpressionStatement[27150-27168]"
    }, {
      "left" : "assertEquals(year, cal.get(Calendar.YEAR));",
      "right" : "assertEquals(year, cal.get(Calendar.YEAR));",
      "info" : "ExpressionStatement[27177-27220]:ExpressionStatement[27177-27220]"
    }, {
      "left" : "assertEquals(month, cal.get(Calendar.MONTH));",
      "right" : "assertEquals(month, cal.get(Calendar.MONTH));",
      "info" : "ExpressionStatement[27229-27274]:ExpressionStatement[27229-27274]"
    }, {
      "left" : "assertEquals(day, cal.get(Calendar.DAY_OF_MONTH));",
      "right" : "assertEquals(day, cal.get(Calendar.DAY_OF_MONTH));",
      "info" : "ExpressionStatement[27283-27333]:ExpressionStatement[27283-27333]"
    }, {
      "left" : "assertEquals(hour, cal.get(Calendar.HOUR_OF_DAY));",
      "right" : "assertEquals(hour, cal.get(Calendar.HOUR_OF_DAY));",
      "info" : "ExpressionStatement[27342-27392]:ExpressionStatement[27342-27392]"
    }, {
      "left" : "assertEquals(min, cal.get(Calendar.MINUTE));",
      "right" : "assertEquals(min, cal.get(Calendar.MINUTE));",
      "info" : "ExpressionStatement[27401-27445]:ExpressionStatement[27401-27445]"
    }, {
      "left" : "assertEquals(sec, cal.get(Calendar.SECOND));",
      "right" : "assertEquals(sec, cal.get(Calendar.SECOND));",
      "info" : "ExpressionStatement[27454-27498]:ExpressionStatement[27454-27498]"
    }, {
      "left" : "assertEquals(mil, cal.get(Calendar.MILLISECOND));",
      "right" : "assertEquals(mil, cal.get(Calendar.MILLISECOND));",
      "info" : "ExpressionStatement[27507-27556]:ExpressionStatement[27507-27556]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[27646-27651]:MarkerAnnotation[27646-27651]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[27656-27662]:Modifier[27656-27662]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[27663-27667]:PrimitiveType[27663-27667]"
    }, {
      "left" : "testToCalendar",
      "right" : "testToCalendar",
      "info" : "SimpleName[27668-27682]:SimpleName[27668-27682]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27685-28006]:Block[27685-28006]"
    }, {
      "left" : "assertEquals(\"Failed to convert to a Calendar and back\", date1, DateUtils.toCalendar(date1).getTime());",
      "right" : "assertEquals(\"Failed to convert to a Calendar and back\", date1, DateUtils.toCalendar(date1).getTime());",
      "info" : "ExpressionStatement[27695-27798]:ExpressionStatement[27695-27798]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[27807-28000]:TryStatement[27807-28000]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27811-27926]:Block[27811-27926]"
    }, {
      "left" : "DateUtils.toCalendar(null);",
      "right" : "DateUtils.toCalendar(null);",
      "info" : "ExpressionStatement[27825-27852]:ExpressionStatement[27825-27852]"
    }, {
      "left" : "fail(\"Expected NullPointerException to be thrown\");",
      "right" : "fail(\"Expected NullPointerException to be thrown\");",
      "info" : "ExpressionStatement[27865-27916]:ExpressionStatement[27865-27916]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27965-28000]:Block[27965-28000]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[28094-28099]:MarkerAnnotation[28094-28099]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[28104-28110]:Modifier[28403-28409]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[28111-28115]:PrimitiveType[28410-28414]"
    }, {
      "left" : "testToCalendarWithDate",
      "right" : "testToCalendarWithDateNull",
      "info" : "SimpleName[28116-28138]:SimpleName[28415-28441]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28141-28506]:Block[28444-28677]"
    }, {
      "left" : "assertEquals(\"Convert Date and TimeZone to a Calendar, but failed to get the Date back\", date1, DateUtils.toCalendar(date1, zone).getTime());",
      "right" : "assertEquals(\"Convert Date and TimeZone to a Calendar, but failed to get the Date back\", date1, DateUtils.toCalendar(date1, zone).getTime());",
      "info" : "ExpressionStatement[28151-28292]:ExpressionStatement[28158-28299]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[28301-28500]:TryStatement[28454-28671]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28305-28426]:Block[28458-28597]"
    }, {
      "left" : "DateUtils.toCalendar(null, zone);",
      "right" : "DateUtils.toCalendar(null, zone);",
      "info" : "ExpressionStatement[28319-28352]:ExpressionStatement[28472-28505]"
    }, {
      "left" : "fail(\"Expected NullPointerException to be thrown\");",
      "right" : "fail(\"Expected NullPointerException to be thrown when Date is null\");",
      "info" : "ExpressionStatement[28365-28416]:ExpressionStatement[28518-28587]"
    }, {
      "left" : "\"Expected NullPointerException to be thrown\"",
      "right" : "\"Expected NullPointerException to be thrown when Date is null\"",
      "info" : "StringLiteral[28370-28414]:StringLiteral[28523-28585]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28465-28500]:Block[28636-28671]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[28594-28599]:MarkerAnnotation[28765-28770]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[28604-28610]:Modifier[29082-29088]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[28611-28615]:PrimitiveType[29089-29093]"
    }, {
      "left" : "testToCalendarWithTimeZone",
      "right" : "testToCalendarWithTimeZoneNull",
      "info" : "SimpleName[28616-28642]:SimpleName[29094-29124]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28645-29015]:Block[29127-29365]"
    }, {
      "left" : "assertEquals(\"Convert Date and TimeZone to a Calendar, but failed to get the TimeZone back\", zone, DateUtils.toCalendar(date1, zone).getTimeZone());",
      "right" : "assertEquals(\"Convert Date and TimeZone to a Calendar, but failed to get the TimeZone back\", zone, DateUtils.toCalendar(date1, zone).getTimeZone());",
      "info" : "ExpressionStatement[28652-28800]:ExpressionStatement[28830-28978]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[28809-29009]:TryStatement[29137-29359]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28813-28935]:Block[29141-29285]"
    }, {
      "left" : "DateUtils.toCalendar(date1, null);",
      "right" : "DateUtils.toCalendar(date1, null);",
      "info" : "ExpressionStatement[28827-28861]:ExpressionStatement[29155-29189]"
    }, {
      "left" : "fail(\"Expected NullPointerException to be thrown\");",
      "right" : "fail(\"Expected NullPointerException to be thrown when TimeZone is null\");",
      "info" : "ExpressionStatement[28874-28925]:ExpressionStatement[29202-29275]"
    }, {
      "left" : "\"Expected NullPointerException to be thrown\"",
      "right" : "\"Expected NullPointerException to be thrown when TimeZone is null\"",
      "info" : "StringLiteral[28879-28923]:StringLiteral[29207-29273]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28974-29009]:Block[29324-29359]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[29101-29106]:MarkerAnnotation[29453-29458]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[29111-29117]:Modifier[29463-29469]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[29118-29122]:PrimitiveType[29470-29474]"
    }, {
      "left" : "testToCalendarWithDateAndTimeZone",
      "right" : "testToCalendarWithDateAndTimeZoneNotNull",
      "info" : "SimpleName[29123-29156]:SimpleName[29475-29515]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29173-29521]:Block[29518-29829]"
    }, {
      "left" : "Calendar c = DateUtils.toCalendar(date2, defaultZone);",
      "right" : "Calendar c = DateUtils.toCalendar(date2, defaultZone);",
      "info" : "VariableDeclarationStatement[29184-29238]:VariableDeclarationStatement[29525-29579]"
    }, {
      "left" : "assertEquals(\"Convert Date and TimeZone to a Calendar, but failed to get the Date back\", date2, c.getTime());",
      "right" : "assertEquals(\"Convert Date and TimeZone to a Calendar, but failed to get the Date back\", date2, c.getTime());",
      "info" : "ExpressionStatement[29248-29357]:ExpressionStatement[29585-29694]"
    }, {
      "left" : "assertEquals(\"Convert Date and TimeZone to a Calendar, but failed to get the TimeZone back\", defaultZone, c.getTimeZone());",
      "right" : "assertEquals(\"Convert Date and TimeZone to a Calendar, but failed to get the TimeZone back\", defaultZone, c.getTimeZone());",
      "info" : "ExpressionStatement[29367-29490]:ExpressionStatement[29700-29823]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[29859-29864]:MarkerAnnotation[30443-30448]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[29869-29875]:Modifier[30453-30459]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[29876-29880]:PrimitiveType[30460-30464]"
    }, {
      "left" : "testRound",
      "right" : "testRound",
      "info" : "SimpleName[29881-29890]:SimpleName[30465-30474]"
    }, {
      "left" : "Exception",
      "right" : "Exception",
      "info" : "SimpleType[29900-29909]:SimpleType[30484-30493]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29910-41714]:Block[30494-42298]"
    }, {
      "left" : "assertEquals(\"round year-1 failed\",\n                dateParser.parse(\"January 1, 2002\"),\n                DateUtils.round(date1, Calendar.YEAR));",
      "right" : "assertEquals(\"round year-1 failed\",\n                dateParser.parse(\"January 1, 2002\"),\n                DateUtils.round(date1, Calendar.YEAR));",
      "info" : "ExpressionStatement[29988-30132]:ExpressionStatement[30572-30716]"
    }, {
      "left" : "assertEquals(\"round year-2 failed\",\n                dateParser.parse(\"January 1, 2002\"),\n                DateUtils.round(date2, Calendar.YEAR));",
      "right" : "assertEquals(\"round year-2 failed\",\n                dateParser.parse(\"January 1, 2002\"),\n                DateUtils.round(date2, Calendar.YEAR));",
      "info" : "ExpressionStatement[30141-30285]:ExpressionStatement[30725-30869]"
    }, {
      "left" : "assertEquals(\"round month-1 failed\",\n                dateParser.parse(\"February 1, 2002\"),\n                DateUtils.round(date1, Calendar.MONTH));",
      "right" : "assertEquals(\"round month-1 failed\",\n                dateParser.parse(\"February 1, 2002\"),\n                DateUtils.round(date1, Calendar.MONTH));",
      "info" : "ExpressionStatement[30294-30441]:ExpressionStatement[30878-31025]"
    }, {
      "left" : "assertEquals(\"round month-2 failed\",\n                dateParser.parse(\"December 1, 2001\"),\n                DateUtils.round(date2, Calendar.MONTH));",
      "right" : "assertEquals(\"round month-2 failed\",\n                dateParser.parse(\"December 1, 2001\"),\n                DateUtils.round(date2, Calendar.MONTH));",
      "info" : "ExpressionStatement[30450-30597]:ExpressionStatement[31034-31181]"
    }, {
      "left" : "assertEquals(\"round semimonth-0 failed\",\n                dateParser.parse(\"February 1, 2002\"),\n                DateUtils.round(date0, DateUtils.SEMI_MONTH));",
      "right" : "assertEquals(\"round semimonth-0 failed\",\n                dateParser.parse(\"February 1, 2002\"),\n                DateUtils.round(date0, DateUtils.SEMI_MONTH));",
      "info" : "ExpressionStatement[30606-30763]:ExpressionStatement[31190-31347]"
    }, {
      "left" : "assertEquals(\"round semimonth-1 failed\",\n                dateParser.parse(\"February 16, 2002\"),\n                DateUtils.round(date1, DateUtils.SEMI_MONTH));",
      "right" : "assertEquals(\"round semimonth-1 failed\",\n                dateParser.parse(\"February 16, 2002\"),\n                DateUtils.round(date1, DateUtils.SEMI_MONTH));",
      "info" : "ExpressionStatement[30772-30930]:ExpressionStatement[31356-31514]"
    }, {
      "left" : "assertEquals(\"round semimonth-2 failed\",\n                dateParser.parse(\"November 16, 2001\"),\n                DateUtils.round(date2, DateUtils.SEMI_MONTH));",
      "right" : "assertEquals(\"round semimonth-2 failed\",\n                dateParser.parse(\"November 16, 2001\"),\n                DateUtils.round(date2, DateUtils.SEMI_MONTH));",
      "info" : "ExpressionStatement[30939-31097]:ExpressionStatement[31523-31681]"
    }, {
      "left" : "assertEquals(\"round date-1 failed\",\n                dateParser.parse(\"February 13, 2002\"),\n                DateUtils.round(date1, Calendar.DATE));",
      "right" : "assertEquals(\"round date-1 failed\",\n                dateParser.parse(\"February 13, 2002\"),\n                DateUtils.round(date1, Calendar.DATE));",
      "info" : "ExpressionStatement[31124-31270]:ExpressionStatement[31708-31854]"
    }, {
      "left" : "assertEquals(\"round date-2 failed\",\n                dateParser.parse(\"November 18, 2001\"),\n                DateUtils.round(date2, Calendar.DATE));",
      "right" : "assertEquals(\"round date-2 failed\",\n                dateParser.parse(\"November 18, 2001\"),\n                DateUtils.round(date2, Calendar.DATE));",
      "info" : "ExpressionStatement[31279-31425]:ExpressionStatement[31863-32009]"
    }, {
      "left" : "assertEquals(\"round hour-1 failed\",\n                dateTimeParser.parse(\"February 12, 2002 13:00:00.000\"),\n                DateUtils.round(date1, Calendar.HOUR));",
      "right" : "assertEquals(\"round hour-1 failed\",\n                dateTimeParser.parse(\"February 12, 2002 13:00:00.000\"),\n                DateUtils.round(date1, Calendar.HOUR));",
      "info" : "ExpressionStatement[31434-31597]:ExpressionStatement[32018-32181]"
    }, {
      "left" : "assertEquals(\"round hour-2 failed\",\n                dateTimeParser.parse(\"November 18, 2001 1:00:00.000\"),\n                DateUtils.round(date2, Calendar.HOUR));",
      "right" : "assertEquals(\"round hour-2 failed\",\n                dateTimeParser.parse(\"November 18, 2001 1:00:00.000\"),\n                DateUtils.round(date2, Calendar.HOUR));",
      "info" : "ExpressionStatement[31606-31768]:ExpressionStatement[32190-32352]"
    }, {
      "left" : "assertEquals(\"round minute-1 failed\",\n                dateTimeParser.parse(\"February 12, 2002 12:35:00.000\"),\n                DateUtils.round(date1, Calendar.MINUTE));",
      "right" : "assertEquals(\"round minute-1 failed\",\n                dateTimeParser.parse(\"February 12, 2002 12:35:00.000\"),\n                DateUtils.round(date1, Calendar.MINUTE));",
      "info" : "ExpressionStatement[31777-31944]:ExpressionStatement[32361-32528]"
    }, {
      "left" : "assertEquals(\"round minute-2 failed\",\n                dateTimeParser.parse(\"November 18, 2001 1:23:00.000\"),\n                DateUtils.round(date2, Calendar.MINUTE));",
      "right" : "assertEquals(\"round minute-2 failed\",\n                dateTimeParser.parse(\"November 18, 2001 1:23:00.000\"),\n                DateUtils.round(date2, Calendar.MINUTE));",
      "info" : "ExpressionStatement[31953-32119]:ExpressionStatement[32537-32703]"
    }, {
      "left" : "assertEquals(\"round second-1 failed\",\n                dateTimeParser.parse(\"February 12, 2002 12:34:57.000\"),\n                DateUtils.round(date1, Calendar.SECOND));",
      "right" : "assertEquals(\"round second-1 failed\",\n                dateTimeParser.parse(\"February 12, 2002 12:34:57.000\"),\n                DateUtils.round(date1, Calendar.SECOND));",
      "info" : "ExpressionStatement[32128-32295]:ExpressionStatement[32712-32879]"
    }, {
      "left" : "assertEquals(\"round second-2 failed\",\n                dateTimeParser.parse(\"November 18, 2001 1:23:11.000\"),\n                DateUtils.round(date2, Calendar.SECOND));",
      "right" : "assertEquals(\"round second-2 failed\",\n                dateTimeParser.parse(\"November 18, 2001 1:23:11.000\"),\n                DateUtils.round(date2, Calendar.SECOND));",
      "info" : "ExpressionStatement[32304-32470]:ExpressionStatement[32888-33054]"
    }, {
      "left" : "assertEquals(\"round ampm-1 failed\",\n                dateTimeParser.parse(\"February 3, 2002 00:00:00.000\"),\n                DateUtils.round(dateAmPm1, Calendar.AM_PM));",
      "right" : "assertEquals(\"round ampm-1 failed\",\n                dateTimeParser.parse(\"February 3, 2002 00:00:00.000\"),\n                DateUtils.round(dateAmPm1, Calendar.AM_PM));",
      "info" : "ExpressionStatement[32479-32646]:ExpressionStatement[33063-33230]"
    }, {
      "left" : "assertEquals(\"round ampm-2 failed\",\n                dateTimeParser.parse(\"February 3, 2002 12:00:00.000\"),\n                DateUtils.round(dateAmPm2, Calendar.AM_PM));",
      "right" : "assertEquals(\"round ampm-2 failed\",\n                dateTimeParser.parse(\"February 3, 2002 12:00:00.000\"),\n                DateUtils.round(dateAmPm2, Calendar.AM_PM));",
      "info" : "ExpressionStatement[32655-32822]:ExpressionStatement[33239-33406]"
    }, {
      "left" : "assertEquals(\"round ampm-3 failed\",\n                dateTimeParser.parse(\"February 3, 2002 12:00:00.000\"),\n                DateUtils.round(dateAmPm3, Calendar.AM_PM));",
      "right" : "assertEquals(\"round ampm-3 failed\",\n                dateTimeParser.parse(\"February 3, 2002 12:00:00.000\"),\n                DateUtils.round(dateAmPm3, Calendar.AM_PM));",
      "info" : "ExpressionStatement[32831-32998]:ExpressionStatement[33415-33582]"
    }, {
      "left" : "assertEquals(\"round ampm-4 failed\",\n                dateTimeParser.parse(\"February 4, 2002 00:00:00.000\"),\n                DateUtils.round(dateAmPm4, Calendar.AM_PM));",
      "right" : "assertEquals(\"round ampm-4 failed\",\n                dateTimeParser.parse(\"February 4, 2002 00:00:00.000\"),\n                DateUtils.round(dateAmPm4, Calendar.AM_PM));",
      "info" : "ExpressionStatement[33007-33174]:ExpressionStatement[33591-33758]"
    }, {
      "left" : "assertEquals(\"round year-1 failed\",\n                dateParser.parse(\"January 1, 2002\"),\n                DateUtils.round((Object) date1, Calendar.YEAR));",
      "right" : "assertEquals(\"round year-1 failed\",\n                dateParser.parse(\"January 1, 2002\"),\n                DateUtils.round((Object) date1, Calendar.YEAR));",
      "info" : "ExpressionStatement[33254-33407]:ExpressionStatement[33838-33991]"
    }, {
      "left" : "assertEquals(\"round year-2 failed\",\n                dateParser.parse(\"January 1, 2002\"),\n                DateUtils.round((Object) date2, Calendar.YEAR));",
      "right" : "assertEquals(\"round year-2 failed\",\n                dateParser.parse(\"January 1, 2002\"),\n                DateUtils.round((Object) date2, Calendar.YEAR));",
      "info" : "ExpressionStatement[33416-33569]:ExpressionStatement[34000-34153]"
    }, {
      "left" : "assertEquals(\"round month-1 failed\",\n                dateParser.parse(\"February 1, 2002\"),\n                DateUtils.round((Object) date1, Calendar.MONTH));",
      "right" : "assertEquals(\"round month-1 failed\",\n                dateParser.parse(\"February 1, 2002\"),\n                DateUtils.round((Object) date1, Calendar.MONTH));",
      "info" : "ExpressionStatement[33578-33734]:ExpressionStatement[34162-34318]"
    }, {
      "left" : "assertEquals(\"round month-2 failed\",\n                dateParser.parse(\"December 1, 2001\"),\n                DateUtils.round((Object) date2, Calendar.MONTH));",
      "right" : "assertEquals(\"round month-2 failed\",\n                dateParser.parse(\"December 1, 2001\"),\n                DateUtils.round((Object) date2, Calendar.MONTH));",
      "info" : "ExpressionStatement[33743-33899]:ExpressionStatement[34327-34483]"
    }, {
      "left" : "assertEquals(\"round semimonth-1 failed\",\n                dateParser.parse(\"February 16, 2002\"),\n                DateUtils.round((Object) date1, DateUtils.SEMI_MONTH));",
      "right" : "assertEquals(\"round semimonth-1 failed\",\n                dateParser.parse(\"February 16, 2002\"),\n                DateUtils.round((Object) date1, DateUtils.SEMI_MONTH));",
      "info" : "ExpressionStatement[33908-34075]:ExpressionStatement[34492-34659]"
    }, {
      "left" : "assertEquals(\"round semimonth-2 failed\",\n                dateParser.parse(\"November 16, 2001\"),\n                DateUtils.round((Object) date2, DateUtils.SEMI_MONTH));",
      "right" : "assertEquals(\"round semimonth-2 failed\",\n                dateParser.parse(\"November 16, 2001\"),\n                DateUtils.round((Object) date2, DateUtils.SEMI_MONTH));",
      "info" : "ExpressionStatement[34084-34251]:ExpressionStatement[34668-34835]"
    }, {
      "left" : "assertEquals(\"round date-1 failed\",\n                dateParser.parse(\"February 13, 2002\"),\n                DateUtils.round((Object) date1, Calendar.DATE));",
      "right" : "assertEquals(\"round date-1 failed\",\n                dateParser.parse(\"February 13, 2002\"),\n                DateUtils.round((Object) date1, Calendar.DATE));",
      "info" : "ExpressionStatement[34260-34415]:ExpressionStatement[34844-34999]"
    }, {
      "left" : "assertEquals(\"round date-2 failed\",\n                dateParser.parse(\"November 18, 2001\"),\n                DateUtils.round((Object) date2, Calendar.DATE));",
      "right" : "assertEquals(\"round date-2 failed\",\n                dateParser.parse(\"November 18, 2001\"),\n                DateUtils.round((Object) date2, Calendar.DATE));",
      "info" : "ExpressionStatement[34424-34579]:ExpressionStatement[35008-35163]"
    }, {
      "left" : "assertEquals(\"round hour-1 failed\",\n                dateTimeParser.parse(\"February 12, 2002 13:00:00.000\"),\n                DateUtils.round((Object) date1, Calendar.HOUR));",
      "right" : "assertEquals(\"round hour-1 failed\",\n                dateTimeParser.parse(\"February 12, 2002 13:00:00.000\"),\n                DateUtils.round((Object) date1, Calendar.HOUR));",
      "info" : "ExpressionStatement[34588-34760]:ExpressionStatement[35172-35344]"
    }, {
      "left" : "assertEquals(\"round hour-2 failed\",\n                dateTimeParser.parse(\"November 18, 2001 1:00:00.000\"),\n                DateUtils.round((Object) date2, Calendar.HOUR));",
      "right" : "assertEquals(\"round hour-2 failed\",\n                dateTimeParser.parse(\"November 18, 2001 1:00:00.000\"),\n                DateUtils.round((Object) date2, Calendar.HOUR));",
      "info" : "ExpressionStatement[34769-34940]:ExpressionStatement[35353-35524]"
    }, {
      "left" : "assertEquals(\"round minute-1 failed\",\n                dateTimeParser.parse(\"February 12, 2002 12:35:00.000\"),\n                DateUtils.round((Object) date1, Calendar.MINUTE));",
      "right" : "assertEquals(\"round minute-1 failed\",\n                dateTimeParser.parse(\"February 12, 2002 12:35:00.000\"),\n                DateUtils.round((Object) date1, Calendar.MINUTE));",
      "info" : "ExpressionStatement[34949-35125]:ExpressionStatement[35533-35709]"
    }, {
      "left" : "assertEquals(\"round minute-2 failed\",\n                dateTimeParser.parse(\"November 18, 2001 1:23:00.000\"),\n                DateUtils.round((Object) date2, Calendar.MINUTE));",
      "right" : "assertEquals(\"round minute-2 failed\",\n                dateTimeParser.parse(\"November 18, 2001 1:23:00.000\"),\n                DateUtils.round((Object) date2, Calendar.MINUTE));",
      "info" : "ExpressionStatement[35134-35309]:ExpressionStatement[35718-35893]"
    }, {
      "left" : "assertEquals(\"round second-1 failed\",\n                dateTimeParser.parse(\"February 12, 2002 12:34:57.000\"),\n                DateUtils.round((Object) date1, Calendar.SECOND));",
      "right" : "assertEquals(\"round second-1 failed\",\n                dateTimeParser.parse(\"February 12, 2002 12:34:57.000\"),\n                DateUtils.round((Object) date1, Calendar.SECOND));",
      "info" : "ExpressionStatement[35318-35494]:ExpressionStatement[35902-36078]"
    }, {
      "left" : "assertEquals(\"round second-2 failed\",\n                dateTimeParser.parse(\"November 18, 2001 1:23:11.000\"),\n                DateUtils.round((Object) date2, Calendar.SECOND));",
      "right" : "assertEquals(\"round second-2 failed\",\n                dateTimeParser.parse(\"November 18, 2001 1:23:11.000\"),\n                DateUtils.round((Object) date2, Calendar.SECOND));",
      "info" : "ExpressionStatement[35503-35678]:ExpressionStatement[36087-36262]"
    }, {
      "left" : "assertEquals(\"round calendar second-1 failed\",\n                dateTimeParser.parse(\"February 12, 2002 12:34:57.000\"),\n                DateUtils.round((Object) cal1, Calendar.SECOND));",
      "right" : "assertEquals(\"round calendar second-1 failed\",\n                dateTimeParser.parse(\"February 12, 2002 12:34:57.000\"),\n                DateUtils.round((Object) cal1, Calendar.SECOND));",
      "info" : "ExpressionStatement[35687-35871]:ExpressionStatement[36271-36455]"
    }, {
      "left" : "assertEquals(\"round calendar second-2 failed\",\n                dateTimeParser.parse(\"November 18, 2001 1:23:11.000\"),\n                DateUtils.round((Object) cal2, Calendar.SECOND));",
      "right" : "assertEquals(\"round calendar second-2 failed\",\n                dateTimeParser.parse(\"November 18, 2001 1:23:11.000\"),\n                DateUtils.round((Object) cal2, Calendar.SECOND));",
      "info" : "ExpressionStatement[35880-36063]:ExpressionStatement[36464-36647]"
    }, {
      "left" : "assertEquals(\"round ampm-1 failed\",\n                dateTimeParser.parse(\"February 3, 2002 00:00:00.000\"),\n                DateUtils.round((Object) dateAmPm1, Calendar.AM_PM));",
      "right" : "assertEquals(\"round ampm-1 failed\",\n                dateTimeParser.parse(\"February 3, 2002 00:00:00.000\"),\n                DateUtils.round((Object) dateAmPm1, Calendar.AM_PM));",
      "info" : "ExpressionStatement[36072-36248]:ExpressionStatement[36656-36832]"
    }, {
      "left" : "assertEquals(\"round ampm-2 failed\",\n                dateTimeParser.parse(\"February 3, 2002 12:00:00.000\"),\n                DateUtils.round((Object) dateAmPm2, Calendar.AM_PM));",
      "right" : "assertEquals(\"round ampm-2 failed\",\n                dateTimeParser.parse(\"February 3, 2002 12:00:00.000\"),\n                DateUtils.round((Object) dateAmPm2, Calendar.AM_PM));",
      "info" : "ExpressionStatement[36257-36433]:ExpressionStatement[36841-37017]"
    }, {
      "left" : "assertEquals(\"round ampm-3 failed\",\n                dateTimeParser.parse(\"February 3, 2002 12:00:00.000\"),\n                DateUtils.round((Object) dateAmPm3, Calendar.AM_PM));",
      "right" : "assertEquals(\"round ampm-3 failed\",\n                dateTimeParser.parse(\"February 3, 2002 12:00:00.000\"),\n                DateUtils.round((Object) dateAmPm3, Calendar.AM_PM));",
      "info" : "ExpressionStatement[36442-36618]:ExpressionStatement[37026-37202]"
    }, {
      "left" : "assertEquals(\"round ampm-4 failed\",\n                dateTimeParser.parse(\"February 4, 2002 00:00:00.000\"),\n                DateUtils.round((Object) dateAmPm4, Calendar.AM_PM));",
      "right" : "assertEquals(\"round ampm-4 failed\",\n                dateTimeParser.parse(\"February 4, 2002 00:00:00.000\"),\n                DateUtils.round((Object) dateAmPm4, Calendar.AM_PM));",
      "info" : "ExpressionStatement[36627-36803]:ExpressionStatement[37211-37387]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[36813-36952]:TryStatement[37397-37536]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36817-36907]:Block[37401-37491]"
    }, {
      "left" : "DateUtils.round((Date) null, Calendar.SECOND);",
      "right" : "DateUtils.round((Date) null, Calendar.SECOND);",
      "info" : "ExpressionStatement[36831-36877]:ExpressionStatement[37415-37461]"
    }, {
      "left" : "fail();",
      "right" : "fail();",
      "info" : "ExpressionStatement[36890-36897]:ExpressionStatement[37474-37481]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36950-36952]:Block[37534-37536]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[36961-37104]:TryStatement[37545-37688]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36965-37059]:Block[37549-37643]"
    }, {
      "left" : "DateUtils.round((Calendar) null, Calendar.SECOND);",
      "right" : "DateUtils.round((Calendar) null, Calendar.SECOND);",
      "info" : "ExpressionStatement[36979-37029]:ExpressionStatement[37563-37613]"
    }, {
      "left" : "fail();",
      "right" : "fail();",
      "info" : "ExpressionStatement[37042-37049]:ExpressionStatement[37626-37633]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37102-37104]:Block[37686-37688]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[37113-37254]:TryStatement[37697-37838]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37117-37209]:Block[37701-37793]"
    }, {
      "left" : "DateUtils.round((Object) null, Calendar.SECOND);",
      "right" : "DateUtils.round((Object) null, Calendar.SECOND);",
      "info" : "ExpressionStatement[37131-37179]:ExpressionStatement[37715-37763]"
    }, {
      "left" : "fail();",
      "right" : "fail();",
      "info" : "ExpressionStatement[37192-37199]:ExpressionStatement[37776-37783]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37252-37254]:Block[37836-37838]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[37263-37387]:TryStatement[37847-37971]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37267-37348]:Block[37851-37932]"
    }, {
      "left" : "DateUtils.round(\"\", Calendar.SECOND);",
      "right" : "DateUtils.round(\"\", Calendar.SECOND);",
      "info" : "ExpressionStatement[37281-37318]:ExpressionStatement[37865-37902]"
    }, {
      "left" : "fail();",
      "right" : "fail();",
      "info" : "ExpressionStatement[37331-37338]:ExpressionStatement[37915-37922]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37385-37387]:Block[37969-37971]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[37396-37518]:TryStatement[37980-38102]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37400-37474]:Block[37984-38058]"
    }, {
      "left" : "DateUtils.round(date1, -9999);",
      "right" : "DateUtils.round(date1, -9999);",
      "info" : "ExpressionStatement[37414-37444]:ExpressionStatement[37998-38028]"
    }, {
      "left" : "fail();",
      "right" : "fail();",
      "info" : "ExpressionStatement[37457-37464]:ExpressionStatement[38041-38048]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37516-37518]:Block[38100-38102]"
    }, {
      "left" : "assertEquals(\"round ampm-1 failed\",\n                dateTimeParser.parse(\"February 3, 2002 00:00:00.000\"),\n                DateUtils.round((Object) calAmPm1, Calendar.AM_PM));",
      "right" : "assertEquals(\"round ampm-1 failed\",\n                dateTimeParser.parse(\"February 3, 2002 00:00:00.000\"),\n                DateUtils.round((Object) calAmPm1, Calendar.AM_PM));",
      "info" : "ExpressionStatement[37528-37703]:ExpressionStatement[38112-38287]"
    }, {
      "left" : "assertEquals(\"round ampm-2 failed\",\n                dateTimeParser.parse(\"February 3, 2002 12:00:00.000\"),\n                DateUtils.round((Object) calAmPm2, Calendar.AM_PM));",
      "right" : "assertEquals(\"round ampm-2 failed\",\n                dateTimeParser.parse(\"February 3, 2002 12:00:00.000\"),\n                DateUtils.round((Object) calAmPm2, Calendar.AM_PM));",
      "info" : "ExpressionStatement[37712-37887]:ExpressionStatement[38296-38471]"
    }, {
      "left" : "assertEquals(\"round ampm-3 failed\",\n                dateTimeParser.parse(\"February 3, 2002 12:00:00.000\"),\n                DateUtils.round((Object) calAmPm3, Calendar.AM_PM));",
      "right" : "assertEquals(\"round ampm-3 failed\",\n                dateTimeParser.parse(\"February 3, 2002 12:00:00.000\"),\n                DateUtils.round((Object) calAmPm3, Calendar.AM_PM));",
      "info" : "ExpressionStatement[37896-38071]:ExpressionStatement[38480-38655]"
    }, {
      "left" : "assertEquals(\"round ampm-4 failed\",\n                dateTimeParser.parse(\"February 4, 2002 00:00:00.000\"),\n                DateUtils.round((Object) calAmPm4, Calendar.AM_PM));",
      "right" : "assertEquals(\"round ampm-4 failed\",\n                dateTimeParser.parse(\"February 4, 2002 00:00:00.000\"),\n                DateUtils.round((Object) calAmPm4, Calendar.AM_PM));",
      "info" : "ExpressionStatement[38080-38255]:ExpressionStatement[38664-38839]"
    }, {
      "left" : "TimeZone.setDefault(zone);",
      "right" : "TimeZone.setDefault(zone);",
      "info" : "ExpressionStatement[38428-38454]:ExpressionStatement[39012-39038]"
    }, {
      "left" : "dateTimeParser.setTimeZone(zone);",
      "right" : "dateTimeParser.setTimeZone(zone);",
      "info" : "ExpressionStatement[38463-38496]:ExpressionStatement[39047-39080]"
    }, {
      "left" : "assertEquals(\"round MET date across DST change-over\",\n                dateTimeParser.parse(\"March 30, 2003 00:00:00.000\"),\n                DateUtils.round(date4, Calendar.DATE));",
      "right" : "assertEquals(\"round MET date across DST change-over\",\n                dateTimeParser.parse(\"March 30, 2003 00:00:00.000\"),\n                DateUtils.round(date4, Calendar.DATE));",
      "info" : "ExpressionStatement[38505-38683]:ExpressionStatement[39089-39267]"
    }, {
      "left" : "assertEquals(\"round MET date across DST change-over\",\n                dateTimeParser.parse(\"March 30, 2003 00:00:00.000\"),\n                DateUtils.round((Object) cal4, Calendar.DATE));",
      "right" : "assertEquals(\"round MET date across DST change-over\",\n                dateTimeParser.parse(\"March 30, 2003 00:00:00.000\"),\n                DateUtils.round((Object) cal4, Calendar.DATE));",
      "info" : "ExpressionStatement[38692-38878]:ExpressionStatement[39276-39462]"
    }, {
      "left" : "assertEquals(\"round MET date across DST change-over\",\n                dateTimeParser.parse(\"March 30, 2003 00:00:00.000\"),\n                DateUtils.round(date5, Calendar.DATE));",
      "right" : "assertEquals(\"round MET date across DST change-over\",\n                dateTimeParser.parse(\"March 30, 2003 00:00:00.000\"),\n                DateUtils.round(date5, Calendar.DATE));",
      "info" : "ExpressionStatement[38887-39065]:ExpressionStatement[39471-39649]"
    }, {
      "left" : "assertEquals(\"round MET date across DST change-over\",\n                dateTimeParser.parse(\"March 30, 2003 00:00:00.000\"),\n                DateUtils.round((Object) cal5, Calendar.DATE));",
      "right" : "assertEquals(\"round MET date across DST change-over\",\n                dateTimeParser.parse(\"March 30, 2003 00:00:00.000\"),\n                DateUtils.round((Object) cal5, Calendar.DATE));",
      "info" : "ExpressionStatement[39074-39260]:ExpressionStatement[39658-39844]"
    }, {
      "left" : "assertEquals(\"round MET date across DST change-over\",\n                dateTimeParser.parse(\"March 30, 2003 00:00:00.000\"),\n                DateUtils.round(date6, Calendar.DATE));",
      "right" : "assertEquals(\"round MET date across DST change-over\",\n                dateTimeParser.parse(\"March 30, 2003 00:00:00.000\"),\n                DateUtils.round(date6, Calendar.DATE));",
      "info" : "ExpressionStatement[39269-39447]:ExpressionStatement[39853-40031]"
    }, {
      "left" : "assertEquals(\"round MET date across DST change-over\",\n                dateTimeParser.parse(\"March 30, 2003 00:00:00.000\"),\n                DateUtils.round((Object) cal6, Calendar.DATE));",
      "right" : "assertEquals(\"round MET date across DST change-over\",\n                dateTimeParser.parse(\"March 30, 2003 00:00:00.000\"),\n                DateUtils.round((Object) cal6, Calendar.DATE));",
      "info" : "ExpressionStatement[39456-39642]:ExpressionStatement[40040-40226]"
    }, {
      "left" : "assertEquals(\"round MET date across DST change-over\",\n                dateTimeParser.parse(\"March 30, 2003 00:00:00.000\"),\n                DateUtils.round(date7, Calendar.DATE));",
      "right" : "assertEquals(\"round MET date across DST change-over\",\n                dateTimeParser.parse(\"March 30, 2003 00:00:00.000\"),\n                DateUtils.round(date7, Calendar.DATE));",
      "info" : "ExpressionStatement[39651-39829]:ExpressionStatement[40235-40413]"
    }, {
      "left" : "assertEquals(\"round MET date across DST change-over\",\n                dateTimeParser.parse(\"March 30, 2003 00:00:00.000\"),\n                DateUtils.round((Object) cal7, Calendar.DATE));",
      "right" : "assertEquals(\"round MET date across DST change-over\",\n                dateTimeParser.parse(\"March 30, 2003 00:00:00.000\"),\n                DateUtils.round((Object) cal7, Calendar.DATE));",
      "info" : "ExpressionStatement[39838-40024]:ExpressionStatement[40422-40608]"
    }, {
      "left" : "assertEquals(\"round MET date across DST change-over\",\n                dateTimeParser.parse(\"March 30, 2003 01:00:00.000\"),\n                DateUtils.round(date4, Calendar.HOUR_OF_DAY));",
      "right" : "assertEquals(\"round MET date across DST change-over\",\n                dateTimeParser.parse(\"March 30, 2003 01:00:00.000\"),\n                DateUtils.round(date4, Calendar.HOUR_OF_DAY));",
      "info" : "ExpressionStatement[40042-40227]:ExpressionStatement[40626-40811]"
    }, {
      "left" : "assertEquals(\"round MET date across DST change-over\",\n                dateTimeParser.parse(\"March 30, 2003 01:00:00.000\"),\n                DateUtils.round((Object) cal4, Calendar.HOUR_OF_DAY));",
      "right" : "assertEquals(\"round MET date across DST change-over\",\n                dateTimeParser.parse(\"March 30, 2003 01:00:00.000\"),\n                DateUtils.round((Object) cal4, Calendar.HOUR_OF_DAY));",
      "info" : "ExpressionStatement[40236-40429]:ExpressionStatement[40820-41013]"
    }, {
      "left" : "assertEquals(\"round MET date across DST change-over\",\n                dateTimeParser.parse(\"March 30, 2003 03:00:00.000\"),\n                DateUtils.round(date5, Calendar.HOUR_OF_DAY));",
      "right" : "assertEquals(\"round MET date across DST change-over\",\n                dateTimeParser.parse(\"March 30, 2003 03:00:00.000\"),\n                DateUtils.round(date5, Calendar.HOUR_OF_DAY));",
      "info" : "ExpressionStatement[40438-40623]:ExpressionStatement[41022-41207]"
    }, {
      "left" : "assertEquals(\"round MET date across DST change-over\",\n                dateTimeParser.parse(\"March 30, 2003 03:00:00.000\"),\n                DateUtils.round((Object) cal5, Calendar.HOUR_OF_DAY));",
      "right" : "assertEquals(\"round MET date across DST change-over\",\n                dateTimeParser.parse(\"March 30, 2003 03:00:00.000\"),\n                DateUtils.round((Object) cal5, Calendar.HOUR_OF_DAY));",
      "info" : "ExpressionStatement[40632-40825]:ExpressionStatement[41216-41409]"
    }, {
      "left" : "assertEquals(\"round MET date across DST change-over\",\n                dateTimeParser.parse(\"March 30, 2003 03:00:00.000\"),\n                DateUtils.round(date6, Calendar.HOUR_OF_DAY));",
      "right" : "assertEquals(\"round MET date across DST change-over\",\n                dateTimeParser.parse(\"March 30, 2003 03:00:00.000\"),\n                DateUtils.round(date6, Calendar.HOUR_OF_DAY));",
      "info" : "ExpressionStatement[40834-41019]:ExpressionStatement[41418-41603]"
    }, {
      "left" : "assertEquals(\"round MET date across DST change-over\",\n                dateTimeParser.parse(\"March 30, 2003 03:00:00.000\"),\n                DateUtils.round((Object) cal6, Calendar.HOUR_OF_DAY));",
      "right" : "assertEquals(\"round MET date across DST change-over\",\n                dateTimeParser.parse(\"March 30, 2003 03:00:00.000\"),\n                DateUtils.round((Object) cal6, Calendar.HOUR_OF_DAY));",
      "info" : "ExpressionStatement[41028-41221]:ExpressionStatement[41612-41805]"
    }, {
      "left" : "assertEquals(\"round MET date across DST change-over\",\n                dateTimeParser.parse(\"March 30, 2003 04:00:00.000\"),\n                DateUtils.round(date7, Calendar.HOUR_OF_DAY));",
      "right" : "assertEquals(\"round MET date across DST change-over\",\n                dateTimeParser.parse(\"March 30, 2003 04:00:00.000\"),\n                DateUtils.round(date7, Calendar.HOUR_OF_DAY));",
      "info" : "ExpressionStatement[41230-41415]:ExpressionStatement[41814-41999]"
    }, {
      "left" : "assertEquals(\"round MET date across DST change-over\",\n                dateTimeParser.parse(\"March 30, 2003 04:00:00.000\"),\n                DateUtils.round((Object) cal7, Calendar.HOUR_OF_DAY));",
      "right" : "assertEquals(\"round MET date across DST change-over\",\n                dateTimeParser.parse(\"March 30, 2003 04:00:00.000\"),\n                DateUtils.round((Object) cal7, Calendar.HOUR_OF_DAY));",
      "info" : "ExpressionStatement[41424-41617]:ExpressionStatement[42008-42201]"
    }, {
      "left" : "TimeZone.setDefault(defaultZone);",
      "right" : "TimeZone.setDefault(defaultZone);",
      "info" : "ExpressionStatement[41626-41659]:ExpressionStatement[42210-42243]"
    }, {
      "left" : "dateTimeParser.setTimeZone(defaultZone);",
      "right" : "dateTimeParser.setTimeZone(defaultZone);",
      "info" : "ExpressionStatement[41668-41708]:ExpressionStatement[42252-42292]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[41927-41932]:MarkerAnnotation[42511-42516]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[41937-41943]:Modifier[42521-42527]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[41944-41948]:PrimitiveType[42528-42532]"
    }, {
      "left" : "testRoundLang346",
      "right" : "testRoundLang346",
      "info" : "SimpleName[41949-41965]:SimpleName[42533-42549]"
    }, {
      "left" : "Exception",
      "right" : "Exception",
      "info" : "SimpleType[41975-41984]:SimpleType[42559-42568]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41985-44701]:Block[42569-45285]"
    }, {
      "left" : "TimeZone.setDefault(defaultZone);",
      "right" : "TimeZone.setDefault(defaultZone);",
      "info" : "ExpressionStatement[41995-42028]:ExpressionStatement[42579-42612]"
    }, {
      "left" : "dateTimeParser.setTimeZone(defaultZone);",
      "right" : "dateTimeParser.setTimeZone(defaultZone);",
      "info" : "ExpressionStatement[42037-42077]:ExpressionStatement[42621-42661]"
    }, {
      "left" : "final Calendar testCalendar = Calendar.getInstance();",
      "right" : "final Calendar testCalendar = Calendar.getInstance();",
      "info" : "VariableDeclarationStatement[42086-42139]:VariableDeclarationStatement[42670-42723]"
    }, {
      "left" : "testCalendar.set(2007, Calendar.JULY, 2, 8, 8, 50);",
      "right" : "testCalendar.set(2007, Calendar.JULY, 2, 8, 8, 50);",
      "info" : "ExpressionStatement[42148-42199]:ExpressionStatement[42732-42783]"
    }, {
      "left" : "Date date = testCalendar.getTime();",
      "right" : "Date date = testCalendar.getTime();",
      "info" : "VariableDeclarationStatement[42208-42243]:VariableDeclarationStatement[42792-42827]"
    }, {
      "left" : "assertEquals(\"Minute Round Up Failed\",\n                     dateTimeParser.parse(\"July 2, 2007 08:09:00.000\"),\n                     DateUtils.round(date, Calendar.MINUTE));",
      "right" : "assertEquals(\"Minute Round Up Failed\",\n                     dateTimeParser.parse(\"July 2, 2007 08:09:00.000\"),\n                     DateUtils.round(date, Calendar.MINUTE));",
      "info" : "ExpressionStatement[42252-42424]:ExpressionStatement[42836-43008]"
    }, {
      "left" : "testCalendar.set(2007, Calendar.JULY, 2, 8, 8, 20);",
      "right" : "testCalendar.set(2007, Calendar.JULY, 2, 8, 8, 20);",
      "info" : "ExpressionStatement[42434-42485]:ExpressionStatement[43018-43069]"
    }, {
      "left" : "date = testCalendar.getTime();",
      "right" : "date = testCalendar.getTime();",
      "info" : "ExpressionStatement[42494-42524]:ExpressionStatement[43078-43108]"
    }, {
      "left" : "assertEquals(\"Minute No Round Failed\",\n                     dateTimeParser.parse(\"July 2, 2007 08:08:00.000\"),\n                     DateUtils.round(date, Calendar.MINUTE));",
      "right" : "assertEquals(\"Minute No Round Failed\",\n                     dateTimeParser.parse(\"July 2, 2007 08:08:00.000\"),\n                     DateUtils.round(date, Calendar.MINUTE));",
      "info" : "ExpressionStatement[42533-42705]:ExpressionStatement[43117-43289]"
    }, {
      "left" : "testCalendar.set(2007, Calendar.JULY, 2, 8, 8, 50);",
      "right" : "testCalendar.set(2007, Calendar.JULY, 2, 8, 8, 50);",
      "info" : "ExpressionStatement[42715-42766]:ExpressionStatement[43299-43350]"
    }, {
      "left" : "testCalendar.set(Calendar.MILLISECOND, 600);",
      "right" : "testCalendar.set(Calendar.MILLISECOND, 600);",
      "info" : "ExpressionStatement[42775-42819]:ExpressionStatement[43359-43403]"
    }, {
      "left" : "date = testCalendar.getTime();",
      "right" : "date = testCalendar.getTime();",
      "info" : "ExpressionStatement[42828-42858]:ExpressionStatement[43412-43442]"
    }, {
      "left" : "assertEquals(\"Second Round Up with 600 Milli Seconds Failed\",\n                     dateTimeParser.parse(\"July 2, 2007 08:08:51.000\"),\n                     DateUtils.round(date, Calendar.SECOND));",
      "right" : "assertEquals(\"Second Round Up with 600 Milli Seconds Failed\",\n                     dateTimeParser.parse(\"July 2, 2007 08:08:51.000\"),\n                     DateUtils.round(date, Calendar.SECOND));",
      "info" : "ExpressionStatement[42868-43063]:ExpressionStatement[43452-43647]"
    }, {
      "left" : "testCalendar.set(2007, Calendar.JULY, 2, 8, 8, 50);",
      "right" : "testCalendar.set(2007, Calendar.JULY, 2, 8, 8, 50);",
      "info" : "ExpressionStatement[43073-43124]:ExpressionStatement[43657-43708]"
    }, {
      "left" : "testCalendar.set(Calendar.MILLISECOND, 200);",
      "right" : "testCalendar.set(Calendar.MILLISECOND, 200);",
      "info" : "ExpressionStatement[43133-43177]:ExpressionStatement[43717-43761]"
    }, {
      "left" : "date = testCalendar.getTime();",
      "right" : "date = testCalendar.getTime();",
      "info" : "ExpressionStatement[43186-43216]:ExpressionStatement[43770-43800]"
    }, {
      "left" : "assertEquals(\"Second Round Down with 200 Milli Seconds Failed\",\n                     dateTimeParser.parse(\"July 2, 2007 08:08:50.000\"),\n                     DateUtils.round(date, Calendar.SECOND));",
      "right" : "assertEquals(\"Second Round Down with 200 Milli Seconds Failed\",\n                     dateTimeParser.parse(\"July 2, 2007 08:08:50.000\"),\n                     DateUtils.round(date, Calendar.SECOND));",
      "info" : "ExpressionStatement[43225-43422]:ExpressionStatement[43809-44006]"
    }, {
      "left" : "testCalendar.set(2007, Calendar.JULY, 2, 8, 8, 20);",
      "right" : "testCalendar.set(2007, Calendar.JULY, 2, 8, 8, 20);",
      "info" : "ExpressionStatement[43432-43483]:ExpressionStatement[44016-44067]"
    }, {
      "left" : "testCalendar.set(Calendar.MILLISECOND, 600);",
      "right" : "testCalendar.set(Calendar.MILLISECOND, 600);",
      "info" : "ExpressionStatement[43492-43536]:ExpressionStatement[44076-44120]"
    }, {
      "left" : "date = testCalendar.getTime();",
      "right" : "date = testCalendar.getTime();",
      "info" : "ExpressionStatement[43545-43575]:ExpressionStatement[44129-44159]"
    }, {
      "left" : "assertEquals(\"Second Round Up with 200 Milli Seconds Failed\",\n                     dateTimeParser.parse(\"July 2, 2007 08:08:21.000\"),\n                     DateUtils.round(date, Calendar.SECOND));",
      "right" : "assertEquals(\"Second Round Up with 200 Milli Seconds Failed\",\n                     dateTimeParser.parse(\"July 2, 2007 08:08:21.000\"),\n                     DateUtils.round(date, Calendar.SECOND));",
      "info" : "ExpressionStatement[43584-43779]:ExpressionStatement[44168-44363]"
    }, {
      "left" : "testCalendar.set(2007, Calendar.JULY, 2, 8, 8, 20);",
      "right" : "testCalendar.set(2007, Calendar.JULY, 2, 8, 8, 20);",
      "info" : "ExpressionStatement[43789-43840]:ExpressionStatement[44373-44424]"
    }, {
      "left" : "testCalendar.set(Calendar.MILLISECOND, 200);",
      "right" : "testCalendar.set(Calendar.MILLISECOND, 200);",
      "info" : "ExpressionStatement[43849-43893]:ExpressionStatement[44433-44477]"
    }, {
      "left" : "date = testCalendar.getTime();",
      "right" : "date = testCalendar.getTime();",
      "info" : "ExpressionStatement[43902-43932]:ExpressionStatement[44486-44516]"
    }, {
      "left" : "assertEquals(\"Second Round Down with 200 Milli Seconds Failed\",\n                     dateTimeParser.parse(\"July 2, 2007 08:08:20.000\"),\n                     DateUtils.round(date, Calendar.SECOND));",
      "right" : "assertEquals(\"Second Round Down with 200 Milli Seconds Failed\",\n                     dateTimeParser.parse(\"July 2, 2007 08:08:20.000\"),\n                     DateUtils.round(date, Calendar.SECOND));",
      "info" : "ExpressionStatement[43941-44138]:ExpressionStatement[44525-44722]"
    }, {
      "left" : "testCalendar.set(2007, Calendar.JULY, 2, 8, 8, 50);",
      "right" : "testCalendar.set(2007, Calendar.JULY, 2, 8, 8, 50);",
      "info" : "ExpressionStatement[44148-44199]:ExpressionStatement[44732-44783]"
    }, {
      "left" : "date = testCalendar.getTime();",
      "right" : "date = testCalendar.getTime();",
      "info" : "ExpressionStatement[44208-44238]:ExpressionStatement[44792-44822]"
    }, {
      "left" : "assertEquals(\"Hour Round Down Failed\",\n                     dateTimeParser.parse(\"July 2, 2007 08:00:00.000\"),\n                     DateUtils.round(date, Calendar.HOUR));",
      "right" : "assertEquals(\"Hour Round Down Failed\",\n                     dateTimeParser.parse(\"July 2, 2007 08:00:00.000\"),\n                     DateUtils.round(date, Calendar.HOUR));",
      "info" : "ExpressionStatement[44247-44417]:ExpressionStatement[44831-45001]"
    }, {
      "left" : "testCalendar.set(2007, Calendar.JULY, 2, 8, 31, 50);",
      "right" : "testCalendar.set(2007, Calendar.JULY, 2, 8, 31, 50);",
      "info" : "ExpressionStatement[44427-44479]:ExpressionStatement[45011-45063]"
    }, {
      "left" : "date = testCalendar.getTime();",
      "right" : "date = testCalendar.getTime();",
      "info" : "ExpressionStatement[44488-44518]:ExpressionStatement[45072-45102]"
    }, {
      "left" : "assertEquals(\"Hour Round Up Failed\",\n                     dateTimeParser.parse(\"July 2, 2007 09:00:00.000\"),\n                     DateUtils.round(date, Calendar.HOUR));",
      "right" : "assertEquals(\"Hour Round Up Failed\",\n                     dateTimeParser.parse(\"July 2, 2007 09:00:00.000\"),\n                     DateUtils.round(date, Calendar.HOUR));",
      "info" : "ExpressionStatement[44527-44695]:ExpressionStatement[45111-45279]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[44844-44849]:MarkerAnnotation[45428-45433]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[44854-44860]:Modifier[45438-45444]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[44861-44865]:PrimitiveType[45445-45449]"
    }, {
      "left" : "testTruncate",
      "right" : "testTruncate",
      "info" : "SimpleName[44866-44878]:SimpleName[45450-45462]"
    }, {
      "left" : "Exception",
      "right" : "Exception",
      "info" : "SimpleType[44888-44897]:SimpleType[45472-45481]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44898-55129]:Block[45482-55713]"
    }, {
      "left" : "assertEquals(\"truncate year-1 failed\",\n                dateParser.parse(\"January 1, 2002\"),\n                DateUtils.truncate(date1, Calendar.YEAR));",
      "right" : "assertEquals(\"truncate year-1 failed\",\n                dateParser.parse(\"January 1, 2002\"),\n                DateUtils.truncate(date1, Calendar.YEAR));",
      "info" : "ExpressionStatement[44975-45125]:ExpressionStatement[45559-45709]"
    }, {
      "left" : "assertEquals(\"truncate year-2 failed\",\n                dateParser.parse(\"January 1, 2001\"),\n                DateUtils.truncate(date2, Calendar.YEAR));",
      "right" : "assertEquals(\"truncate year-2 failed\",\n                dateParser.parse(\"January 1, 2001\"),\n                DateUtils.truncate(date2, Calendar.YEAR));",
      "info" : "ExpressionStatement[45134-45284]:ExpressionStatement[45718-45868]"
    }, {
      "left" : "assertEquals(\"truncate month-1 failed\",\n                dateParser.parse(\"February 1, 2002\"),\n                DateUtils.truncate(date1, Calendar.MONTH));",
      "right" : "assertEquals(\"truncate month-1 failed\",\n                dateParser.parse(\"February 1, 2002\"),\n                DateUtils.truncate(date1, Calendar.MONTH));",
      "info" : "ExpressionStatement[45293-45446]:ExpressionStatement[45877-46030]"
    }, {
      "left" : "assertEquals(\"truncate month-2 failed\",\n                dateParser.parse(\"November 1, 2001\"),\n                DateUtils.truncate(date2, Calendar.MONTH));",
      "right" : "assertEquals(\"truncate month-2 failed\",\n                dateParser.parse(\"November 1, 2001\"),\n                DateUtils.truncate(date2, Calendar.MONTH));",
      "info" : "ExpressionStatement[45455-45608]:ExpressionStatement[46039-46192]"
    }, {
      "left" : "assertEquals(\"truncate semimonth-1 failed\",\n                dateParser.parse(\"February 1, 2002\"),\n                DateUtils.truncate(date1, DateUtils.SEMI_MONTH));",
      "right" : "assertEquals(\"truncate semimonth-1 failed\",\n                dateParser.parse(\"February 1, 2002\"),\n                DateUtils.truncate(date1, DateUtils.SEMI_MONTH));",
      "info" : "ExpressionStatement[45617-45780]:ExpressionStatement[46201-46364]"
    }, {
      "left" : "assertEquals(\"truncate semimonth-2 failed\",\n                dateParser.parse(\"November 16, 2001\"),\n                DateUtils.truncate(date2, DateUtils.SEMI_MONTH));",
      "right" : "assertEquals(\"truncate semimonth-2 failed\",\n                dateParser.parse(\"November 16, 2001\"),\n                DateUtils.truncate(date2, DateUtils.SEMI_MONTH));",
      "info" : "ExpressionStatement[45789-45953]:ExpressionStatement[46373-46537]"
    }, {
      "left" : "assertEquals(\"truncate date-1 failed\",\n                dateParser.parse(\"February 12, 2002\"),\n                DateUtils.truncate(date1, Calendar.DATE));",
      "right" : "assertEquals(\"truncate date-1 failed\",\n                dateParser.parse(\"February 12, 2002\"),\n                DateUtils.truncate(date1, Calendar.DATE));",
      "info" : "ExpressionStatement[45962-46114]:ExpressionStatement[46546-46698]"
    }, {
      "left" : "assertEquals(\"truncate date-2 failed\",\n                dateParser.parse(\"November 18, 2001\"),\n                DateUtils.truncate(date2, Calendar.DATE));",
      "right" : "assertEquals(\"truncate date-2 failed\",\n                dateParser.parse(\"November 18, 2001\"),\n                DateUtils.truncate(date2, Calendar.DATE));",
      "info" : "ExpressionStatement[46123-46275]:ExpressionStatement[46707-46859]"
    }, {
      "left" : "assertEquals(\"truncate hour-1 failed\",\n                dateTimeParser.parse(\"February 12, 2002 12:00:00.000\"),\n                DateUtils.truncate(date1, Calendar.HOUR));",
      "right" : "assertEquals(\"truncate hour-1 failed\",\n                dateTimeParser.parse(\"February 12, 2002 12:00:00.000\"),\n                DateUtils.truncate(date1, Calendar.HOUR));",
      "info" : "ExpressionStatement[46284-46453]:ExpressionStatement[46868-47037]"
    }, {
      "left" : "assertEquals(\"truncate hour-2 failed\",\n                dateTimeParser.parse(\"November 18, 2001 1:00:00.000\"),\n                DateUtils.truncate(date2, Calendar.HOUR));",
      "right" : "assertEquals(\"truncate hour-2 failed\",\n                dateTimeParser.parse(\"November 18, 2001 1:00:00.000\"),\n                DateUtils.truncate(date2, Calendar.HOUR));",
      "info" : "ExpressionStatement[46462-46630]:ExpressionStatement[47046-47214]"
    }, {
      "left" : "assertEquals(\"truncate minute-1 failed\",\n                dateTimeParser.parse(\"February 12, 2002 12:34:00.000\"),\n                DateUtils.truncate(date1, Calendar.MINUTE));",
      "right" : "assertEquals(\"truncate minute-1 failed\",\n                dateTimeParser.parse(\"February 12, 2002 12:34:00.000\"),\n                DateUtils.truncate(date1, Calendar.MINUTE));",
      "info" : "ExpressionStatement[46639-46812]:ExpressionStatement[47223-47396]"
    }, {
      "left" : "assertEquals(\"truncate minute-2 failed\",\n                dateTimeParser.parse(\"November 18, 2001 1:23:00.000\"),\n                DateUtils.truncate(date2, Calendar.MINUTE));",
      "right" : "assertEquals(\"truncate minute-2 failed\",\n                dateTimeParser.parse(\"November 18, 2001 1:23:00.000\"),\n                DateUtils.truncate(date2, Calendar.MINUTE));",
      "info" : "ExpressionStatement[46821-46993]:ExpressionStatement[47405-47577]"
    }, {
      "left" : "assertEquals(\"truncate second-1 failed\",\n                dateTimeParser.parse(\"February 12, 2002 12:34:56.000\"),\n                DateUtils.truncate(date1, Calendar.SECOND));",
      "right" : "assertEquals(\"truncate second-1 failed\",\n                dateTimeParser.parse(\"February 12, 2002 12:34:56.000\"),\n                DateUtils.truncate(date1, Calendar.SECOND));",
      "info" : "ExpressionStatement[47002-47175]:ExpressionStatement[47586-47759]"
    }, {
      "left" : "assertEquals(\"truncate second-2 failed\",\n                dateTimeParser.parse(\"November 18, 2001 1:23:11.000\"),\n                DateUtils.truncate(date2, Calendar.SECOND));",
      "right" : "assertEquals(\"truncate second-2 failed\",\n                dateTimeParser.parse(\"November 18, 2001 1:23:11.000\"),\n                DateUtils.truncate(date2, Calendar.SECOND));",
      "info" : "ExpressionStatement[47184-47356]:ExpressionStatement[47768-47940]"
    }, {
      "left" : "assertEquals(\"truncate ampm-1 failed\",\n                dateTimeParser.parse(\"February 3, 2002 00:00:00.000\"),\n                DateUtils.truncate(dateAmPm1, Calendar.AM_PM));",
      "right" : "assertEquals(\"truncate ampm-1 failed\",\n                dateTimeParser.parse(\"February 3, 2002 00:00:00.000\"),\n                DateUtils.truncate(dateAmPm1, Calendar.AM_PM));",
      "info" : "ExpressionStatement[47365-47538]:ExpressionStatement[47949-48122]"
    }, {
      "left" : "assertEquals(\"truncate ampm-2 failed\",\n                dateTimeParser.parse(\"February 3, 2002 00:00:00.000\"),\n                DateUtils.truncate(dateAmPm2, Calendar.AM_PM));",
      "right" : "assertEquals(\"truncate ampm-2 failed\",\n                dateTimeParser.parse(\"February 3, 2002 00:00:00.000\"),\n                DateUtils.truncate(dateAmPm2, Calendar.AM_PM));",
      "info" : "ExpressionStatement[47547-47720]:ExpressionStatement[48131-48304]"
    }, {
      "left" : "assertEquals(\"truncate ampm-3 failed\",\n                dateTimeParser.parse(\"February 3, 2002 12:00:00.000\"),\n                DateUtils.truncate(dateAmPm3, Calendar.AM_PM));",
      "right" : "assertEquals(\"truncate ampm-3 failed\",\n                dateTimeParser.parse(\"February 3, 2002 12:00:00.000\"),\n                DateUtils.truncate(dateAmPm3, Calendar.AM_PM));",
      "info" : "ExpressionStatement[47729-47902]:ExpressionStatement[48313-48486]"
    }, {
      "left" : "assertEquals(\"truncate ampm-4 failed\",\n                dateTimeParser.parse(\"February 3, 2002 12:00:00.000\"),\n                DateUtils.truncate(dateAmPm4, Calendar.AM_PM));",
      "right" : "assertEquals(\"truncate ampm-4 failed\",\n                dateTimeParser.parse(\"February 3, 2002 12:00:00.000\"),\n                DateUtils.truncate(dateAmPm4, Calendar.AM_PM));",
      "info" : "ExpressionStatement[47911-48084]:ExpressionStatement[48495-48668]"
    }, {
      "left" : "assertEquals(\"truncate year-1 failed\",\n                dateParser.parse(\"January 1, 2002\"),\n                DateUtils.truncate((Object) date1, Calendar.YEAR));",
      "right" : "assertEquals(\"truncate year-1 failed\",\n                dateParser.parse(\"January 1, 2002\"),\n                DateUtils.truncate((Object) date1, Calendar.YEAR));",
      "info" : "ExpressionStatement[48163-48322]:ExpressionStatement[48747-48906]"
    }, {
      "left" : "assertEquals(\"truncate year-2 failed\",\n                dateParser.parse(\"January 1, 2001\"),\n                DateUtils.truncate((Object) date2, Calendar.YEAR));",
      "right" : "assertEquals(\"truncate year-2 failed\",\n                dateParser.parse(\"January 1, 2001\"),\n                DateUtils.truncate((Object) date2, Calendar.YEAR));",
      "info" : "ExpressionStatement[48331-48490]:ExpressionStatement[48915-49074]"
    }, {
      "left" : "assertEquals(\"truncate month-1 failed\",\n                dateParser.parse(\"February 1, 2002\"),\n                DateUtils.truncate((Object) date1, Calendar.MONTH));",
      "right" : "assertEquals(\"truncate month-1 failed\",\n                dateParser.parse(\"February 1, 2002\"),\n                DateUtils.truncate((Object) date1, Calendar.MONTH));",
      "info" : "ExpressionStatement[48499-48661]:ExpressionStatement[49083-49245]"
    }, {
      "left" : "assertEquals(\"truncate month-2 failed\",\n                dateParser.parse(\"November 1, 2001\"),\n                DateUtils.truncate((Object) date2, Calendar.MONTH));",
      "right" : "assertEquals(\"truncate month-2 failed\",\n                dateParser.parse(\"November 1, 2001\"),\n                DateUtils.truncate((Object) date2, Calendar.MONTH));",
      "info" : "ExpressionStatement[48670-48832]:ExpressionStatement[49254-49416]"
    }, {
      "left" : "assertEquals(\"truncate semimonth-1 failed\",\n                dateParser.parse(\"February 1, 2002\"),\n                DateUtils.truncate((Object) date1, DateUtils.SEMI_MONTH));",
      "right" : "assertEquals(\"truncate semimonth-1 failed\",\n                dateParser.parse(\"February 1, 2002\"),\n                DateUtils.truncate((Object) date1, DateUtils.SEMI_MONTH));",
      "info" : "ExpressionStatement[48841-49013]:ExpressionStatement[49425-49597]"
    }, {
      "left" : "assertEquals(\"truncate semimonth-2 failed\",\n                dateParser.parse(\"November 16, 2001\"),\n                DateUtils.truncate((Object) date2, DateUtils.SEMI_MONTH));",
      "right" : "assertEquals(\"truncate semimonth-2 failed\",\n                dateParser.parse(\"November 16, 2001\"),\n                DateUtils.truncate((Object) date2, DateUtils.SEMI_MONTH));",
      "info" : "ExpressionStatement[49022-49195]:ExpressionStatement[49606-49779]"
    }, {
      "left" : "assertEquals(\"truncate date-1 failed\",\n                dateParser.parse(\"February 12, 2002\"),\n                DateUtils.truncate((Object) date1, Calendar.DATE));",
      "right" : "assertEquals(\"truncate date-1 failed\",\n                dateParser.parse(\"February 12, 2002\"),\n                DateUtils.truncate((Object) date1, Calendar.DATE));",
      "info" : "ExpressionStatement[49204-49365]:ExpressionStatement[49788-49949]"
    }, {
      "left" : "assertEquals(\"truncate date-2 failed\",\n                dateParser.parse(\"November 18, 2001\"),\n                DateUtils.truncate((Object) date2, Calendar.DATE));",
      "right" : "assertEquals(\"truncate date-2 failed\",\n                dateParser.parse(\"November 18, 2001\"),\n                DateUtils.truncate((Object) date2, Calendar.DATE));",
      "info" : "ExpressionStatement[49374-49535]:ExpressionStatement[49958-50119]"
    }, {
      "left" : "assertEquals(\"truncate hour-1 failed\",\n                dateTimeParser.parse(\"February 12, 2002 12:00:00.000\"),\n                DateUtils.truncate((Object) date1, Calendar.HOUR));",
      "right" : "assertEquals(\"truncate hour-1 failed\",\n                dateTimeParser.parse(\"February 12, 2002 12:00:00.000\"),\n                DateUtils.truncate((Object) date1, Calendar.HOUR));",
      "info" : "ExpressionStatement[49544-49722]:ExpressionStatement[50128-50306]"
    }, {
      "left" : "assertEquals(\"truncate hour-2 failed\",\n                dateTimeParser.parse(\"November 18, 2001 1:00:00.000\"),\n                DateUtils.truncate((Object) date2, Calendar.HOUR));",
      "right" : "assertEquals(\"truncate hour-2 failed\",\n                dateTimeParser.parse(\"November 18, 2001 1:00:00.000\"),\n                DateUtils.truncate((Object) date2, Calendar.HOUR));",
      "info" : "ExpressionStatement[49731-49908]:ExpressionStatement[50315-50492]"
    }, {
      "left" : "assertEquals(\"truncate minute-1 failed\",\n                dateTimeParser.parse(\"February 12, 2002 12:34:00.000\"),\n                DateUtils.truncate((Object) date1, Calendar.MINUTE));",
      "right" : "assertEquals(\"truncate minute-1 failed\",\n                dateTimeParser.parse(\"February 12, 2002 12:34:00.000\"),\n                DateUtils.truncate((Object) date1, Calendar.MINUTE));",
      "info" : "ExpressionStatement[49917-50099]:ExpressionStatement[50501-50683]"
    }, {
      "left" : "assertEquals(\"truncate minute-2 failed\",\n                dateTimeParser.parse(\"November 18, 2001 1:23:00.000\"),\n                DateUtils.truncate((Object) date2, Calendar.MINUTE));",
      "right" : "assertEquals(\"truncate minute-2 failed\",\n                dateTimeParser.parse(\"November 18, 2001 1:23:00.000\"),\n                DateUtils.truncate((Object) date2, Calendar.MINUTE));",
      "info" : "ExpressionStatement[50108-50289]:ExpressionStatement[50692-50873]"
    }, {
      "left" : "assertEquals(\"truncate second-1 failed\",\n                dateTimeParser.parse(\"February 12, 2002 12:34:56.000\"),\n                DateUtils.truncate((Object) date1, Calendar.SECOND));",
      "right" : "assertEquals(\"truncate second-1 failed\",\n                dateTimeParser.parse(\"February 12, 2002 12:34:56.000\"),\n                DateUtils.truncate((Object) date1, Calendar.SECOND));",
      "info" : "ExpressionStatement[50298-50480]:ExpressionStatement[50882-51064]"
    }, {
      "left" : "assertEquals(\"truncate second-2 failed\",\n                dateTimeParser.parse(\"November 18, 2001 1:23:11.000\"),\n                DateUtils.truncate((Object) date2, Calendar.SECOND));",
      "right" : "assertEquals(\"truncate second-2 failed\",\n                dateTimeParser.parse(\"November 18, 2001 1:23:11.000\"),\n                DateUtils.truncate((Object) date2, Calendar.SECOND));",
      "info" : "ExpressionStatement[50489-50670]:ExpressionStatement[51073-51254]"
    }, {
      "left" : "assertEquals(\"truncate ampm-1 failed\",\n                dateTimeParser.parse(\"February 3, 2002 00:00:00.000\"),\n                DateUtils.truncate((Object) dateAmPm1, Calendar.AM_PM));",
      "right" : "assertEquals(\"truncate ampm-1 failed\",\n                dateTimeParser.parse(\"February 3, 2002 00:00:00.000\"),\n                DateUtils.truncate((Object) dateAmPm1, Calendar.AM_PM));",
      "info" : "ExpressionStatement[50679-50861]:ExpressionStatement[51263-51445]"
    }, {
      "left" : "assertEquals(\"truncate ampm-2 failed\",\n                dateTimeParser.parse(\"February 3, 2002 00:00:00.000\"),\n                DateUtils.truncate((Object) dateAmPm2, Calendar.AM_PM));",
      "right" : "assertEquals(\"truncate ampm-2 failed\",\n                dateTimeParser.parse(\"February 3, 2002 00:00:00.000\"),\n                DateUtils.truncate((Object) dateAmPm2, Calendar.AM_PM));",
      "info" : "ExpressionStatement[50870-51052]:ExpressionStatement[51454-51636]"
    }, {
      "left" : "assertEquals(\"truncate ampm-3 failed\",\n                dateTimeParser.parse(\"February 3, 2002 12:00:00.000\"),\n                DateUtils.truncate((Object) dateAmPm3, Calendar.AM_PM));",
      "right" : "assertEquals(\"truncate ampm-3 failed\",\n                dateTimeParser.parse(\"February 3, 2002 12:00:00.000\"),\n                DateUtils.truncate((Object) dateAmPm3, Calendar.AM_PM));",
      "info" : "ExpressionStatement[51061-51243]:ExpressionStatement[51645-51827]"
    }, {
      "left" : "assertEquals(\"truncate ampm-4 failed\",\n                dateTimeParser.parse(\"February 3, 2002 12:00:00.000\"),\n                DateUtils.truncate((Object) dateAmPm4, Calendar.AM_PM));",
      "right" : "assertEquals(\"truncate ampm-4 failed\",\n                dateTimeParser.parse(\"February 3, 2002 12:00:00.000\"),\n                DateUtils.truncate((Object) dateAmPm4, Calendar.AM_PM));",
      "info" : "ExpressionStatement[51252-51434]:ExpressionStatement[51836-52018]"
    }, {
      "left" : "assertEquals(\"truncate calendar second-1 failed\",\n                dateTimeParser.parse(\"February 12, 2002 12:34:56.000\"),\n                DateUtils.truncate((Object) cal1, Calendar.SECOND));",
      "right" : "assertEquals(\"truncate calendar second-1 failed\",\n                dateTimeParser.parse(\"February 12, 2002 12:34:56.000\"),\n                DateUtils.truncate((Object) cal1, Calendar.SECOND));",
      "info" : "ExpressionStatement[51452-51642]:ExpressionStatement[52036-52226]"
    }, {
      "left" : "assertEquals(\"truncate calendar second-2 failed\",\n                dateTimeParser.parse(\"November 18, 2001 1:23:11.000\"),\n                DateUtils.truncate((Object) cal2, Calendar.SECOND));",
      "right" : "assertEquals(\"truncate calendar second-2 failed\",\n                dateTimeParser.parse(\"November 18, 2001 1:23:11.000\"),\n                DateUtils.truncate((Object) cal2, Calendar.SECOND));",
      "info" : "ExpressionStatement[51651-51840]:ExpressionStatement[52235-52424]"
    }, {
      "left" : "assertEquals(\"truncate ampm-1 failed\",\n                dateTimeParser.parse(\"February 3, 2002 00:00:00.000\"),\n                DateUtils.truncate((Object) calAmPm1, Calendar.AM_PM));",
      "right" : "assertEquals(\"truncate ampm-1 failed\",\n                dateTimeParser.parse(\"February 3, 2002 00:00:00.000\"),\n                DateUtils.truncate((Object) calAmPm1, Calendar.AM_PM));",
      "info" : "ExpressionStatement[51858-52039]:ExpressionStatement[52442-52623]"
    }, {
      "left" : "assertEquals(\"truncate ampm-2 failed\",\n                dateTimeParser.parse(\"February 3, 2002 00:00:00.000\"),\n                DateUtils.truncate((Object) calAmPm2, Calendar.AM_PM));",
      "right" : "assertEquals(\"truncate ampm-2 failed\",\n                dateTimeParser.parse(\"February 3, 2002 00:00:00.000\"),\n                DateUtils.truncate((Object) calAmPm2, Calendar.AM_PM));",
      "info" : "ExpressionStatement[52048-52229]:ExpressionStatement[52632-52813]"
    }, {
      "left" : "assertEquals(\"truncate ampm-3 failed\",\n                dateTimeParser.parse(\"February 3, 2002 12:00:00.000\"),\n                DateUtils.truncate((Object) calAmPm3, Calendar.AM_PM));",
      "right" : "assertEquals(\"truncate ampm-3 failed\",\n                dateTimeParser.parse(\"February 3, 2002 12:00:00.000\"),\n                DateUtils.truncate((Object) calAmPm3, Calendar.AM_PM));",
      "info" : "ExpressionStatement[52238-52419]:ExpressionStatement[52822-53003]"
    }, {
      "left" : "assertEquals(\"truncate ampm-4 failed\",\n                dateTimeParser.parse(\"February 3, 2002 12:00:00.000\"),\n                DateUtils.truncate((Object) calAmPm4, Calendar.AM_PM));",
      "right" : "assertEquals(\"truncate ampm-4 failed\",\n                dateTimeParser.parse(\"February 3, 2002 12:00:00.000\"),\n                DateUtils.truncate((Object) calAmPm4, Calendar.AM_PM));",
      "info" : "ExpressionStatement[52428-52609]:ExpressionStatement[53012-53193]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[52627-52769]:TryStatement[53211-53353]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52631-52724]:Block[53215-53308]"
    }, {
      "left" : "DateUtils.truncate((Date) null, Calendar.SECOND);",
      "right" : "DateUtils.truncate((Date) null, Calendar.SECOND);",
      "info" : "ExpressionStatement[52645-52694]:ExpressionStatement[53229-53278]"
    }, {
      "left" : "fail();",
      "right" : "fail();",
      "info" : "ExpressionStatement[52707-52714]:ExpressionStatement[53291-53298]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52767-52769]:Block[53351-53353]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[52778-52924]:TryStatement[53362-53508]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52782-52879]:Block[53366-53463]"
    }, {
      "left" : "DateUtils.truncate((Calendar) null, Calendar.SECOND);",
      "right" : "DateUtils.truncate((Calendar) null, Calendar.SECOND);",
      "info" : "ExpressionStatement[52796-52849]:ExpressionStatement[53380-53433]"
    }, {
      "left" : "fail();",
      "right" : "fail();",
      "info" : "ExpressionStatement[52862-52869]:ExpressionStatement[53446-53453]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52922-52924]:Block[53506-53508]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[52933-53077]:TryStatement[53517-53661]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52937-53032]:Block[53521-53616]"
    }, {
      "left" : "DateUtils.truncate((Object) null, Calendar.SECOND);",
      "right" : "DateUtils.truncate((Object) null, Calendar.SECOND);",
      "info" : "ExpressionStatement[52951-53002]:ExpressionStatement[53535-53586]"
    }, {
      "left" : "fail();",
      "right" : "fail();",
      "info" : "ExpressionStatement[53015-53022]:ExpressionStatement[53599-53606]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53075-53077]:Block[53659-53661]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[53086-53213]:TryStatement[53670-53797]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53090-53174]:Block[53674-53758]"
    }, {
      "left" : "DateUtils.truncate(\"\", Calendar.SECOND);",
      "right" : "DateUtils.truncate(\"\", Calendar.SECOND);",
      "info" : "ExpressionStatement[53104-53144]:ExpressionStatement[53688-53728]"
    }, {
      "left" : "fail();",
      "right" : "fail();",
      "info" : "ExpressionStatement[53157-53164]:ExpressionStatement[53741-53748]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53211-53213]:Block[53795-53797]"
    }, {
      "left" : "TimeZone.setDefault(zone);",
      "right" : "TimeZone.setDefault(zone);",
      "info" : "ExpressionStatement[53364-53390]:ExpressionStatement[53948-53974]"
    }, {
      "left" : "dateTimeParser.setTimeZone(zone);",
      "right" : "dateTimeParser.setTimeZone(zone);",
      "info" : "ExpressionStatement[53399-53432]:ExpressionStatement[53983-54016]"
    }, {
      "left" : "assertEquals(\"truncate MET date across DST change-over\",\n                dateTimeParser.parse(\"March 30, 2003 00:00:00.000\"),\n                DateUtils.truncate(date3, Calendar.DATE));",
      "right" : "assertEquals(\"truncate MET date across DST change-over\",\n                dateTimeParser.parse(\"March 30, 2003 00:00:00.000\"),\n                DateUtils.truncate(date3, Calendar.DATE));",
      "info" : "ExpressionStatement[53441-53625]:ExpressionStatement[54025-54209]"
    }, {
      "left" : "assertEquals(\"truncate MET date across DST change-over\",\n                dateTimeParser.parse(\"March 30, 2003 00:00:00.000\"),\n                DateUtils.truncate((Object) cal3, Calendar.DATE));",
      "right" : "assertEquals(\"truncate MET date across DST change-over\",\n                dateTimeParser.parse(\"March 30, 2003 00:00:00.000\"),\n                DateUtils.truncate((Object) cal3, Calendar.DATE));",
      "info" : "ExpressionStatement[53634-53826]:ExpressionStatement[54218-54410]"
    }, {
      "left" : "assertEquals(\"truncate MET date across DST change-over\",\n                dateTimeParser.parse(\"October 26, 2003 00:00:00.000\"),\n                DateUtils.truncate(date8, Calendar.DATE));",
      "right" : "assertEquals(\"truncate MET date across DST change-over\",\n                dateTimeParser.parse(\"October 26, 2003 00:00:00.000\"),\n                DateUtils.truncate(date8, Calendar.DATE));",
      "info" : "ExpressionStatement[53895-54081]:ExpressionStatement[54479-54665]"
    }, {
      "left" : "assertEquals(\"truncate MET date across DST change-over\",\n                dateTimeParser.parse(\"October 26, 2003 00:00:00.000\"),\n                DateUtils.truncate((Object) cal8, Calendar.DATE));",
      "right" : "assertEquals(\"truncate MET date across DST change-over\",\n                dateTimeParser.parse(\"October 26, 2003 00:00:00.000\"),\n                DateUtils.truncate((Object) cal8, Calendar.DATE));",
      "info" : "ExpressionStatement[54090-54284]:ExpressionStatement[54674-54868]"
    }, {
      "left" : "TimeZone.setDefault(defaultZone);",
      "right" : "TimeZone.setDefault(defaultZone);",
      "info" : "ExpressionStatement[54293-54326]:ExpressionStatement[54877-54910]"
    }, {
      "left" : "dateTimeParser.setTimeZone(defaultZone);",
      "right" : "dateTimeParser.setTimeZone(defaultZone);",
      "info" : "ExpressionStatement[54335-54375]:ExpressionStatement[54919-54959]"
    }, {
      "left" : "final Date endOfTime = new Date(Long.MAX_VALUE);",
      "right" : "final Date endOfTime = new Date(Long.MAX_VALUE);",
      "info" : "VariableDeclarationStatement[54427-54475]:VariableDeclarationStatement[55011-55059]"
    }, {
      "left" : "final GregorianCalendar endCal = new GregorianCalendar();",
      "right" : "final GregorianCalendar endCal = new GregorianCalendar();",
      "info" : "VariableDeclarationStatement[54540-54597]:VariableDeclarationStatement[55124-55181]"
    }, {
      "left" : "endCal.setTime(endOfTime);",
      "right" : "endCal.setTime(endOfTime);",
      "info" : "ExpressionStatement[54606-54632]:ExpressionStatement[55190-55216]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[54641-54771]:TryStatement[55225-55355]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54645-54731]:Block[55229-55315]"
    }, {
      "left" : "DateUtils.truncate(endCal, Calendar.DATE);",
      "right" : "DateUtils.truncate(endCal, Calendar.DATE);",
      "info" : "ExpressionStatement[54659-54701]:ExpressionStatement[55243-55285]"
    }, {
      "left" : "fail();",
      "right" : "fail();",
      "info" : "ExpressionStatement[54714-54721]:ExpressionStatement[55298-55305]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54769-54771]:Block[55353-55355]"
    }, {
      "left" : "endCal.set(Calendar.YEAR, 280000001);",
      "right" : "endCal.set(Calendar.YEAR, 280000001);",
      "info" : "ExpressionStatement[54780-54817]:ExpressionStatement[55364-55401]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[54826-54956]:TryStatement[55410-55540]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54830-54916]:Block[55414-55500]"
    }, {
      "left" : "DateUtils.truncate(endCal, Calendar.DATE);",
      "right" : "DateUtils.truncate(endCal, Calendar.DATE);",
      "info" : "ExpressionStatement[54844-54886]:ExpressionStatement[55428-55470]"
    }, {
      "left" : "fail();",
      "right" : "fail();",
      "info" : "ExpressionStatement[54899-54906]:ExpressionStatement[55483-55490]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54954-54956]:Block[55538-55540]"
    }, {
      "left" : "endCal.set(Calendar.YEAR, 280000000);",
      "right" : "endCal.set(Calendar.YEAR, 280000000);",
      "info" : "ExpressionStatement[54965-55002]:ExpressionStatement[55549-55586]"
    }, {
      "left" : "final Calendar cal = DateUtils.truncate(endCal, Calendar.DATE);",
      "right" : "final Calendar cal = DateUtils.truncate(endCal, Calendar.DATE);",
      "info" : "VariableDeclarationStatement[55011-55074]:VariableDeclarationStatement[55595-55658]"
    }, {
      "left" : "assertEquals(0, cal.get(Calendar.HOUR));",
      "right" : "assertEquals(0, cal.get(Calendar.HOUR));",
      "info" : "ExpressionStatement[55083-55123]:ExpressionStatement[55667-55707]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[55310-55315]:MarkerAnnotation[55894-55899]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[55320-55326]:Modifier[55904-55910]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[55327-55331]:PrimitiveType[55911-55915]"
    }, {
      "left" : "testTruncateLang59",
      "right" : "testTruncateLang59",
      "info" : "SimpleName[55332-55350]:SimpleName[55916-55934]"
    }, {
      "left" : "Exception",
      "right" : "Exception",
      "info" : "SimpleType[55360-55369]:SimpleType[55944-55953]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55370-58967]:Block[55954-59551]"
    }, {
      "left" : "final TimeZone MST_MDT = TimeZone.getTimeZone(\"MST7MDT\");",
      "right" : "final TimeZone MST_MDT = TimeZone.getTimeZone(\"MST7MDT\");",
      "info" : "VariableDeclarationStatement[55421-55478]:VariableDeclarationStatement[56005-56062]"
    }, {
      "left" : "TimeZone.setDefault(MST_MDT);",
      "right" : "TimeZone.setDefault(MST_MDT);",
      "info" : "ExpressionStatement[55487-55516]:ExpressionStatement[56071-56100]"
    }, {
      "left" : "final DateFormat format = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss.SSS z\");",
      "right" : "final DateFormat format = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss.SSS z\");",
      "info" : "VariableDeclarationStatement[55525-55601]:VariableDeclarationStatement[56109-56185]"
    }, {
      "left" : "format.setTimeZone(MST_MDT);",
      "right" : "format.setTimeZone(MST_MDT);",
      "info" : "ExpressionStatement[55610-55638]:ExpressionStatement[56194-56222]"
    }, {
      "left" : "final Date oct31_01MDT = new Date(1099206000000L);",
      "right" : "final Date oct31_01MDT = new Date(1099206000000L);",
      "info" : "VariableDeclarationStatement[55648-55698]:VariableDeclarationStatement[56232-56282]"
    }, {
      "left" : "final Date oct31MDT             = new Date(oct31_01MDT.getTime()       - 3600000L);",
      "right" : "final Date oct31MDT             = new Date(oct31_01MDT.getTime()       - 3600000L);",
      "info" : "VariableDeclarationStatement[55709-55792]:VariableDeclarationStatement[56293-56376]"
    }, {
      "left" : "final Date oct31_01_02MDT       = new Date(oct31_01MDT.getTime()       + 120000L);",
      "right" : "final Date oct31_01_02MDT       = new Date(oct31_01MDT.getTime()       + 120000L);",
      "info" : "VariableDeclarationStatement[55813-55895]:VariableDeclarationStatement[56397-56479]"
    }, {
      "left" : "final Date oct31_01_02_03MDT    = new Date(oct31_01_02MDT.getTime()    + 3000L);",
      "right" : "final Date oct31_01_02_03MDT    = new Date(oct31_01_02MDT.getTime()    + 3000L);",
      "info" : "VariableDeclarationStatement[55920-56000]:VariableDeclarationStatement[56504-56584]"
    }, {
      "left" : "final Date oct31_01_02_03_04MDT = new Date(oct31_01_02_03MDT.getTime() + 4L);",
      "right" : "final Date oct31_01_02_03_04MDT = new Date(oct31_01_02_03MDT.getTime() + 4L);",
      "info" : "VariableDeclarationStatement[56027-56104]:VariableDeclarationStatement[56611-56688]"
    }, {
      "left" : "assertEquals(\"Check 00:00:00.000\", \"2004-10-31 00:00:00.000 MDT\", format.format(oct31MDT));",
      "right" : "assertEquals(\"Check 00:00:00.000\", \"2004-10-31 00:00:00.000 MDT\", format.format(oct31MDT));",
      "info" : "ExpressionStatement[56140-56231]:ExpressionStatement[56724-56815]"
    }, {
      "left" : "assertEquals(\"Check 01:00:00.000\", \"2004-10-31 01:00:00.000 MDT\", format.format(oct31_01MDT));",
      "right" : "assertEquals(\"Check 01:00:00.000\", \"2004-10-31 01:00:00.000 MDT\", format.format(oct31_01MDT));",
      "info" : "ExpressionStatement[56240-56334]:ExpressionStatement[56824-56918]"
    }, {
      "left" : "assertEquals(\"Check 01:02:00.000\", \"2004-10-31 01:02:00.000 MDT\", format.format(oct31_01_02MDT));",
      "right" : "assertEquals(\"Check 01:02:00.000\", \"2004-10-31 01:02:00.000 MDT\", format.format(oct31_01_02MDT));",
      "info" : "ExpressionStatement[56343-56440]:ExpressionStatement[56927-57024]"
    }, {
      "left" : "assertEquals(\"Check 01:02:03.000\", \"2004-10-31 01:02:03.000 MDT\", format.format(oct31_01_02_03MDT));",
      "right" : "assertEquals(\"Check 01:02:03.000\", \"2004-10-31 01:02:03.000 MDT\", format.format(oct31_01_02_03MDT));",
      "info" : "ExpressionStatement[56449-56549]:ExpressionStatement[57033-57133]"
    }, {
      "left" : "assertEquals(\"Check 01:02:03.004\", \"2004-10-31 01:02:03.004 MDT\", format.format(oct31_01_02_03_04MDT));",
      "right" : "assertEquals(\"Check 01:02:03.004\", \"2004-10-31 01:02:03.004 MDT\", format.format(oct31_01_02_03_04MDT));",
      "info" : "ExpressionStatement[56558-56661]:ExpressionStatement[57142-57245]"
    }, {
      "left" : "final Calendar gval = Calendar.getInstance();",
      "right" : "final Calendar gval = Calendar.getInstance();",
      "info" : "VariableDeclarationStatement[56718-56763]:VariableDeclarationStatement[57302-57347]"
    }, {
      "left" : "gval.setTime(new Date(oct31_01MDT.getTime()));",
      "right" : "gval.setTime(new Date(oct31_01MDT.getTime()));",
      "info" : "ExpressionStatement[56772-56818]:ExpressionStatement[57356-57402]"
    }, {
      "left" : "gval.set(Calendar.MINUTE, gval.get(Calendar.MINUTE));",
      "right" : "gval.set(Calendar.MINUTE, gval.get(Calendar.MINUTE));",
      "info" : "ExpressionStatement[56827-56880]:ExpressionStatement[57411-57464]"
    }, {
      "left" : "assertEquals(\"Demonstrate Problem\", gval.getTime().getTime(), oct31_01MDT.getTime() + 3600000L);",
      "right" : "assertEquals(\"Demonstrate Problem\", gval.getTime().getTime(), oct31_01MDT.getTime() + 3600000L);",
      "info" : "ExpressionStatement[56922-57018]:ExpressionStatement[57506-57602]"
    }, {
      "left" : "assertEquals(\"Truncate Calendar.MILLISECOND\",\n                oct31_01_02_03_04MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.MILLISECOND));",
      "right" : "assertEquals(\"Truncate Calendar.MILLISECOND\",\n                oct31_01_02_03_04MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.MILLISECOND));",
      "info" : "ExpressionStatement[57075-57223]:ExpressionStatement[57659-57807]"
    }, {
      "left" : "assertEquals(\"Truncate Calendar.SECOND\",\n                   oct31_01_02_03MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.SECOND));",
      "right" : "assertEquals(\"Truncate Calendar.SECOND\",\n                   oct31_01_02_03MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.SECOND));",
      "info" : "ExpressionStatement[57233-57371]:ExpressionStatement[57817-57955]"
    }, {
      "left" : "assertEquals(\"Truncate Calendar.MINUTE\",\n                      oct31_01_02MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.MINUTE));",
      "right" : "assertEquals(\"Truncate Calendar.MINUTE\",\n                      oct31_01_02MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.MINUTE));",
      "info" : "ExpressionStatement[57381-57519]:ExpressionStatement[57965-58103]"
    }, {
      "left" : "assertEquals(\"Truncate Calendar.HOUR_OF_DAY\",\n                         oct31_01MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.HOUR_OF_DAY));",
      "right" : "assertEquals(\"Truncate Calendar.HOUR_OF_DAY\",\n                         oct31_01MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.HOUR_OF_DAY));",
      "info" : "ExpressionStatement[57529-57677]:ExpressionStatement[58113-58261]"
    }, {
      "left" : "assertEquals(\"Truncate Calendar.HOUR\",\n                         oct31_01MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.HOUR));",
      "right" : "assertEquals(\"Truncate Calendar.HOUR\",\n                         oct31_01MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.HOUR));",
      "info" : "ExpressionStatement[57687-57821]:ExpressionStatement[58271-58405]"
    }, {
      "left" : "assertEquals(\"Truncate Calendar.DATE\",\n                            oct31MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.DATE));",
      "right" : "assertEquals(\"Truncate Calendar.DATE\",\n                            oct31MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.DATE));",
      "info" : "ExpressionStatement[57831-57965]:ExpressionStatement[58415-58549]"
    }, {
      "left" : "assertEquals(\"Round Calendar.MILLISECOND\",\n                oct31_01_02_03_04MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.MILLISECOND));",
      "right" : "assertEquals(\"Round Calendar.MILLISECOND\",\n                oct31_01_02_03_04MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.MILLISECOND));",
      "info" : "ExpressionStatement[58027-58169]:ExpressionStatement[58611-58753]"
    }, {
      "left" : "assertEquals(\"Round Calendar.SECOND\",\n                   oct31_01_02_03MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.SECOND));",
      "right" : "assertEquals(\"Round Calendar.SECOND\",\n                   oct31_01_02_03MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.SECOND));",
      "info" : "ExpressionStatement[58179-58311]:ExpressionStatement[58763-58895]"
    }, {
      "left" : "assertEquals(\"Round Calendar.MINUTE\",\n                      oct31_01_02MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.MINUTE));",
      "right" : "assertEquals(\"Round Calendar.MINUTE\",\n                      oct31_01_02MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.MINUTE));",
      "info" : "ExpressionStatement[58321-58453]:ExpressionStatement[58905-59037]"
    }, {
      "left" : "assertEquals(\"Round Calendar.HOUR_OF_DAY\",\n                         oct31_01MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.HOUR_OF_DAY));",
      "right" : "assertEquals(\"Round Calendar.HOUR_OF_DAY\",\n                         oct31_01MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.HOUR_OF_DAY));",
      "info" : "ExpressionStatement[58463-58605]:ExpressionStatement[59047-59189]"
    }, {
      "left" : "assertEquals(\"Round Calendar.HOUR\",\n                         oct31_01MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.HOUR));",
      "right" : "assertEquals(\"Round Calendar.HOUR\",\n                         oct31_01MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.HOUR));",
      "info" : "ExpressionStatement[58615-58743]:ExpressionStatement[59199-59327]"
    }, {
      "left" : "assertEquals(\"Round Calendar.DATE\",\n                            oct31MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.DATE));",
      "right" : "assertEquals(\"Round Calendar.DATE\",\n                            oct31MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.DATE));",
      "info" : "ExpressionStatement[58753-58881]:ExpressionStatement[59337-59465]"
    }, {
      "left" : "TimeZone.setDefault(defaultZone);",
      "right" : "TimeZone.setDefault(defaultZone);",
      "info" : "ExpressionStatement[58928-58961]:ExpressionStatement[59512-59545]"
    }, {
      "left" : "@SuppressWarnings(\"deprecation\")",
      "right" : "@SuppressWarnings(\"deprecation\")",
      "info" : "SingleMemberAnnotation[59026-59058]:SingleMemberAnnotation[59610-59642]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[59063-59068]:MarkerAnnotation[59647-59652]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[59073-59079]:Modifier[59657-59663]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[59080-59084]:PrimitiveType[59664-59668]"
    }, {
      "left" : "testLang530",
      "right" : "testLang530",
      "info" : "SimpleName[59085-59096]:SimpleName[59669-59680]"
    }, {
      "left" : "ParseException",
      "right" : "ParseException",
      "info" : "SimpleType[59106-59120]:SimpleType[59690-59704]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[59121-59581]:Block[59705-60165]"
    }, {
      "left" : "final Date d = new Date();",
      "right" : "final Date d = new Date();",
      "info" : "VariableDeclarationStatement[59131-59157]:VariableDeclarationStatement[59715-59741]"
    }, {
      "left" : "final String isoDateStr = DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.format(d);",
      "right" : "final String isoDateStr = DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.format(d);",
      "info" : "VariableDeclarationStatement[59166-59248]:VariableDeclarationStatement[59750-59832]"
    }, {
      "left" : "final Date d2 = DateUtils.parseDate(isoDateStr, new String[] { DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.getPattern() });",
      "right" : "final Date d2 = DateUtils.parseDate(isoDateStr, new String[] { DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.getPattern() });",
      "info" : "VariableDeclarationStatement[59257-59382]:VariableDeclarationStatement[59841-59966]"
    }, {
      "left" : "assertEquals(\"Date not equal to itself ISO formatted and parsed\", d.getTime(), d2.getTime() + d.getTime() % 1000);",
      "right" : "assertEquals(\"Date not equal to itself ISO formatted and parsed\", d.getTime(), d2.getTime() + d.getTime() % 1000);",
      "info" : "ExpressionStatement[59460-59574]:ExpressionStatement[60044-60158]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[59730-59735]:MarkerAnnotation[60314-60319]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[59740-59746]:Modifier[60324-60330]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[59747-59751]:PrimitiveType[60331-60335]"
    }, {
      "left" : "testCeil",
      "right" : "testCeil",
      "info" : "SimpleName[59752-59760]:SimpleName[60336-60344]"
    }, {
      "left" : "Exception",
      "right" : "Exception",
      "info" : "SimpleType[59770-59779]:SimpleType[60354-60363]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[59780-72928]:Block[60364-73512]"
    }, {
      "left" : "assertEquals(\"ceiling javadoc-1 failed\",\n                dateTimeParser.parse(\"March 28, 2002 14:00:00.000\"),\n                DateUtils.ceiling(\n                    dateTimeParser.parse(\"March 28, 2002 13:45:01.231\"),\n                Calendar.HOUR));",
      "right" : "assertEquals(\"ceiling javadoc-1 failed\",\n                dateTimeParser.parse(\"March 28, 2002 14:00:00.000\"),\n                DateUtils.ceiling(\n                    dateTimeParser.parse(\"March 28, 2002 13:45:01.231\"),\n                Calendar.HOUR));",
      "info" : "ExpressionStatement[59814-60064]:ExpressionStatement[60398-60648]"
    }, {
      "left" : "assertEquals(\"ceiling javadoc-2 failed\",\n                dateTimeParser.parse(\"April 1, 2002 00:00:00.000\"),\n                DateUtils.ceiling(\n                    dateTimeParser.parse(\"March 28, 2002 13:45:01.231\"),\n                Calendar.MONTH));",
      "right" : "assertEquals(\"ceiling javadoc-2 failed\",\n                dateTimeParser.parse(\"April 1, 2002 00:00:00.000\"),\n                DateUtils.ceiling(\n                    dateTimeParser.parse(\"March 28, 2002 13:45:01.231\"),\n                Calendar.MONTH));",
      "info" : "ExpressionStatement[60073-60323]:ExpressionStatement[60657-60907]"
    }, {
      "left" : "assertEquals(\"ceiling year-1 failed\",\n                dateParser.parse(\"January 1, 2003\"),\n                DateUtils.ceiling(date1, Calendar.YEAR));",
      "right" : "assertEquals(\"ceiling year-1 failed\",\n                dateParser.parse(\"January 1, 2003\"),\n                DateUtils.ceiling(date1, Calendar.YEAR));",
      "info" : "ExpressionStatement[60399-60547]:ExpressionStatement[60983-61131]"
    }, {
      "left" : "assertEquals(\"ceiling year-2 failed\",\n                dateParser.parse(\"January 1, 2002\"),\n                DateUtils.ceiling(date2, Calendar.YEAR));",
      "right" : "assertEquals(\"ceiling year-2 failed\",\n                dateParser.parse(\"January 1, 2002\"),\n                DateUtils.ceiling(date2, Calendar.YEAR));",
      "info" : "ExpressionStatement[60556-60704]:ExpressionStatement[61140-61288]"
    }, {
      "left" : "assertEquals(\"ceiling month-1 failed\",\n                dateParser.parse(\"March 1, 2002\"),\n                DateUtils.ceiling(date1, Calendar.MONTH));",
      "right" : "assertEquals(\"ceiling month-1 failed\",\n                dateParser.parse(\"March 1, 2002\"),\n                DateUtils.ceiling(date1, Calendar.MONTH));",
      "info" : "ExpressionStatement[60713-60861]:ExpressionStatement[61297-61445]"
    }, {
      "left" : "assertEquals(\"ceiling month-2 failed\",\n                dateParser.parse(\"December 1, 2001\"),\n                DateUtils.ceiling(date2, Calendar.MONTH));",
      "right" : "assertEquals(\"ceiling month-2 failed\",\n                dateParser.parse(\"December 1, 2001\"),\n                DateUtils.ceiling(date2, Calendar.MONTH));",
      "info" : "ExpressionStatement[60870-61021]:ExpressionStatement[61454-61605]"
    }, {
      "left" : "assertEquals(\"ceiling semimonth-1 failed\",\n                dateParser.parse(\"February 16, 2002\"),\n                DateUtils.ceiling(date1, DateUtils.SEMI_MONTH));",
      "right" : "assertEquals(\"ceiling semimonth-1 failed\",\n                dateParser.parse(\"February 16, 2002\"),\n                DateUtils.ceiling(date1, DateUtils.SEMI_MONTH));",
      "info" : "ExpressionStatement[61030-61192]:ExpressionStatement[61614-61776]"
    }, {
      "left" : "assertEquals(\"ceiling semimonth-2 failed\",\n                dateParser.parse(\"December 1, 2001\"),\n                DateUtils.ceiling(date2, DateUtils.SEMI_MONTH));",
      "right" : "assertEquals(\"ceiling semimonth-2 failed\",\n                dateParser.parse(\"December 1, 2001\"),\n                DateUtils.ceiling(date2, DateUtils.SEMI_MONTH));",
      "info" : "ExpressionStatement[61201-61362]:ExpressionStatement[61785-61946]"
    }, {
      "left" : "assertEquals(\"ceiling date-1 failed\",\n                dateParser.parse(\"February 13, 2002\"),\n                DateUtils.ceiling(date1, Calendar.DATE));",
      "right" : "assertEquals(\"ceiling date-1 failed\",\n                dateParser.parse(\"February 13, 2002\"),\n                DateUtils.ceiling(date1, Calendar.DATE));",
      "info" : "ExpressionStatement[61371-61521]:ExpressionStatement[61955-62105]"
    }, {
      "left" : "assertEquals(\"ceiling date-2 failed\",\n                dateParser.parse(\"November 19, 2001\"),\n                DateUtils.ceiling(date2, Calendar.DATE));",
      "right" : "assertEquals(\"ceiling date-2 failed\",\n                dateParser.parse(\"November 19, 2001\"),\n                DateUtils.ceiling(date2, Calendar.DATE));",
      "info" : "ExpressionStatement[61530-61680]:ExpressionStatement[62114-62264]"
    }, {
      "left" : "assertEquals(\"ceiling hour-1 failed\",\n                dateTimeParser.parse(\"February 12, 2002 13:00:00.000\"),\n                DateUtils.ceiling(date1, Calendar.HOUR));",
      "right" : "assertEquals(\"ceiling hour-1 failed\",\n                dateTimeParser.parse(\"February 12, 2002 13:00:00.000\"),\n                DateUtils.ceiling(date1, Calendar.HOUR));",
      "info" : "ExpressionStatement[61689-61856]:ExpressionStatement[62273-62440]"
    }, {
      "left" : "assertEquals(\"ceiling hour-2 failed\",\n                dateTimeParser.parse(\"November 18, 2001 2:00:00.000\"),\n                DateUtils.ceiling(date2, Calendar.HOUR));",
      "right" : "assertEquals(\"ceiling hour-2 failed\",\n                dateTimeParser.parse(\"November 18, 2001 2:00:00.000\"),\n                DateUtils.ceiling(date2, Calendar.HOUR));",
      "info" : "ExpressionStatement[61865-62031]:ExpressionStatement[62449-62615]"
    }, {
      "left" : "assertEquals(\"ceiling minute-1 failed\",\n                dateTimeParser.parse(\"February 12, 2002 12:35:00.000\"),\n                DateUtils.ceiling(date1, Calendar.MINUTE));",
      "right" : "assertEquals(\"ceiling minute-1 failed\",\n                dateTimeParser.parse(\"February 12, 2002 12:35:00.000\"),\n                DateUtils.ceiling(date1, Calendar.MINUTE));",
      "info" : "ExpressionStatement[62040-62211]:ExpressionStatement[62624-62795]"
    }, {
      "left" : "assertEquals(\"ceiling minute-2 failed\",\n                dateTimeParser.parse(\"November 18, 2001 1:24:00.000\"),\n                DateUtils.ceiling(date2, Calendar.MINUTE));",
      "right" : "assertEquals(\"ceiling minute-2 failed\",\n                dateTimeParser.parse(\"November 18, 2001 1:24:00.000\"),\n                DateUtils.ceiling(date2, Calendar.MINUTE));",
      "info" : "ExpressionStatement[62220-62390]:ExpressionStatement[62804-62974]"
    }, {
      "left" : "assertEquals(\"ceiling second-1 failed\",\n                dateTimeParser.parse(\"February 12, 2002 12:34:57.000\"),\n                DateUtils.ceiling(date1, Calendar.SECOND));",
      "right" : "assertEquals(\"ceiling second-1 failed\",\n                dateTimeParser.parse(\"February 12, 2002 12:34:57.000\"),\n                DateUtils.ceiling(date1, Calendar.SECOND));",
      "info" : "ExpressionStatement[62399-62570]:ExpressionStatement[62983-63154]"
    }, {
      "left" : "assertEquals(\"ceiling second-2 failed\",\n                dateTimeParser.parse(\"November 18, 2001 1:23:12.000\"),\n                DateUtils.ceiling(date2, Calendar.SECOND));",
      "right" : "assertEquals(\"ceiling second-2 failed\",\n                dateTimeParser.parse(\"November 18, 2001 1:23:12.000\"),\n                DateUtils.ceiling(date2, Calendar.SECOND));",
      "info" : "ExpressionStatement[62579-62749]:ExpressionStatement[63163-63333]"
    }, {
      "left" : "assertEquals(\"ceiling ampm-1 failed\",\n                dateTimeParser.parse(\"February 3, 2002 12:00:00.000\"),\n                DateUtils.ceiling(dateAmPm1, Calendar.AM_PM));",
      "right" : "assertEquals(\"ceiling ampm-1 failed\",\n                dateTimeParser.parse(\"February 3, 2002 12:00:00.000\"),\n                DateUtils.ceiling(dateAmPm1, Calendar.AM_PM));",
      "info" : "ExpressionStatement[62758-62929]:ExpressionStatement[63342-63513]"
    }, {
      "left" : "assertEquals(\"ceiling ampm-2 failed\",\n                dateTimeParser.parse(\"February 3, 2002 12:00:00.000\"),\n                DateUtils.ceiling(dateAmPm2, Calendar.AM_PM));",
      "right" : "assertEquals(\"ceiling ampm-2 failed\",\n                dateTimeParser.parse(\"February 3, 2002 12:00:00.000\"),\n                DateUtils.ceiling(dateAmPm2, Calendar.AM_PM));",
      "info" : "ExpressionStatement[62938-63109]:ExpressionStatement[63522-63693]"
    }, {
      "left" : "assertEquals(\"ceiling ampm-3 failed\",\n                dateTimeParser.parse(\"February 4, 2002 00:00:00.000\"),\n                DateUtils.ceiling(dateAmPm3, Calendar.AM_PM));",
      "right" : "assertEquals(\"ceiling ampm-3 failed\",\n                dateTimeParser.parse(\"February 4, 2002 00:00:00.000\"),\n                DateUtils.ceiling(dateAmPm3, Calendar.AM_PM));",
      "info" : "ExpressionStatement[63118-63289]:ExpressionStatement[63702-63873]"
    }, {
      "left" : "assertEquals(\"ceiling ampm-4 failed\",\n                dateTimeParser.parse(\"February 4, 2002 00:00:00.000\"),\n                DateUtils.ceiling(dateAmPm4, Calendar.AM_PM));",
      "right" : "assertEquals(\"ceiling ampm-4 failed\",\n                dateTimeParser.parse(\"February 4, 2002 00:00:00.000\"),\n                DateUtils.ceiling(dateAmPm4, Calendar.AM_PM));",
      "info" : "ExpressionStatement[63298-63469]:ExpressionStatement[63882-64053]"
    }, {
      "left" : "assertEquals(\"ceiling year-1 failed\",\n                dateParser.parse(\"January 1, 2003\"),\n                DateUtils.ceiling((Object) date1, Calendar.YEAR));",
      "right" : "assertEquals(\"ceiling year-1 failed\",\n                dateParser.parse(\"January 1, 2003\"),\n                DateUtils.ceiling((Object) date1, Calendar.YEAR));",
      "info" : "ExpressionStatement[63552-63709]:ExpressionStatement[64136-64293]"
    }, {
      "left" : "assertEquals(\"ceiling year-2 failed\",\n                dateParser.parse(\"January 1, 2002\"),\n                DateUtils.ceiling((Object) date2, Calendar.YEAR));",
      "right" : "assertEquals(\"ceiling year-2 failed\",\n                dateParser.parse(\"January 1, 2002\"),\n                DateUtils.ceiling((Object) date2, Calendar.YEAR));",
      "info" : "ExpressionStatement[63718-63875]:ExpressionStatement[64302-64459]"
    }, {
      "left" : "assertEquals(\"ceiling month-1 failed\",\n                dateParser.parse(\"March 1, 2002\"),\n                DateUtils.ceiling((Object) date1, Calendar.MONTH));",
      "right" : "assertEquals(\"ceiling month-1 failed\",\n                dateParser.parse(\"March 1, 2002\"),\n                DateUtils.ceiling((Object) date1, Calendar.MONTH));",
      "info" : "ExpressionStatement[63884-64041]:ExpressionStatement[64468-64625]"
    }, {
      "left" : "assertEquals(\"ceiling month-2 failed\",\n                dateParser.parse(\"December 1, 2001\"),\n                DateUtils.ceiling((Object) date2, Calendar.MONTH));",
      "right" : "assertEquals(\"ceiling month-2 failed\",\n                dateParser.parse(\"December 1, 2001\"),\n                DateUtils.ceiling((Object) date2, Calendar.MONTH));",
      "info" : "ExpressionStatement[64050-64210]:ExpressionStatement[64634-64794]"
    }, {
      "left" : "assertEquals(\"ceiling semimonth-1 failed\",\n                dateParser.parse(\"February 16, 2002\"),\n                DateUtils.ceiling((Object) date1, DateUtils.SEMI_MONTH));",
      "right" : "assertEquals(\"ceiling semimonth-1 failed\",\n                dateParser.parse(\"February 16, 2002\"),\n                DateUtils.ceiling((Object) date1, DateUtils.SEMI_MONTH));",
      "info" : "ExpressionStatement[64219-64390]:ExpressionStatement[64803-64974]"
    }, {
      "left" : "assertEquals(\"ceiling semimonth-2 failed\",\n                dateParser.parse(\"December 1, 2001\"),\n                DateUtils.ceiling((Object) date2, DateUtils.SEMI_MONTH));",
      "right" : "assertEquals(\"ceiling semimonth-2 failed\",\n                dateParser.parse(\"December 1, 2001\"),\n                DateUtils.ceiling((Object) date2, DateUtils.SEMI_MONTH));",
      "info" : "ExpressionStatement[64399-64569]:ExpressionStatement[64983-65153]"
    }, {
      "left" : "assertEquals(\"ceiling date-1 failed\",\n                dateParser.parse(\"February 13, 2002\"),\n                DateUtils.ceiling((Object) date1, Calendar.DATE));",
      "right" : "assertEquals(\"ceiling date-1 failed\",\n                dateParser.parse(\"February 13, 2002\"),\n                DateUtils.ceiling((Object) date1, Calendar.DATE));",
      "info" : "ExpressionStatement[64578-64737]:ExpressionStatement[65162-65321]"
    }, {
      "left" : "assertEquals(\"ceiling date-2 failed\",\n                dateParser.parse(\"November 19, 2001\"),\n                DateUtils.ceiling((Object) date2, Calendar.DATE));",
      "right" : "assertEquals(\"ceiling date-2 failed\",\n                dateParser.parse(\"November 19, 2001\"),\n                DateUtils.ceiling((Object) date2, Calendar.DATE));",
      "info" : "ExpressionStatement[64746-64905]:ExpressionStatement[65330-65489]"
    }, {
      "left" : "assertEquals(\"ceiling hour-1 failed\",\n                dateTimeParser.parse(\"February 12, 2002 13:00:00.000\"),\n                DateUtils.ceiling((Object) date1, Calendar.HOUR));",
      "right" : "assertEquals(\"ceiling hour-1 failed\",\n                dateTimeParser.parse(\"February 12, 2002 13:00:00.000\"),\n                DateUtils.ceiling((Object) date1, Calendar.HOUR));",
      "info" : "ExpressionStatement[64914-65090]:ExpressionStatement[65498-65674]"
    }, {
      "left" : "assertEquals(\"ceiling hour-2 failed\",\n                dateTimeParser.parse(\"November 18, 2001 2:00:00.000\"),\n                DateUtils.ceiling((Object) date2, Calendar.HOUR));",
      "right" : "assertEquals(\"ceiling hour-2 failed\",\n                dateTimeParser.parse(\"November 18, 2001 2:00:00.000\"),\n                DateUtils.ceiling((Object) date2, Calendar.HOUR));",
      "info" : "ExpressionStatement[65099-65274]:ExpressionStatement[65683-65858]"
    }, {
      "left" : "assertEquals(\"ceiling minute-1 failed\",\n                dateTimeParser.parse(\"February 12, 2002 12:35:00.000\"),\n                DateUtils.ceiling((Object) date1, Calendar.MINUTE));",
      "right" : "assertEquals(\"ceiling minute-1 failed\",\n                dateTimeParser.parse(\"February 12, 2002 12:35:00.000\"),\n                DateUtils.ceiling((Object) date1, Calendar.MINUTE));",
      "info" : "ExpressionStatement[65283-65463]:ExpressionStatement[65867-66047]"
    }, {
      "left" : "assertEquals(\"ceiling minute-2 failed\",\n                dateTimeParser.parse(\"November 18, 2001 1:24:00.000\"),\n                DateUtils.ceiling((Object) date2, Calendar.MINUTE));",
      "right" : "assertEquals(\"ceiling minute-2 failed\",\n                dateTimeParser.parse(\"November 18, 2001 1:24:00.000\"),\n                DateUtils.ceiling((Object) date2, Calendar.MINUTE));",
      "info" : "ExpressionStatement[65472-65651]:ExpressionStatement[66056-66235]"
    }, {
      "left" : "assertEquals(\"ceiling second-1 failed\",\n                dateTimeParser.parse(\"February 12, 2002 12:34:57.000\"),\n                DateUtils.ceiling((Object) date1, Calendar.SECOND));",
      "right" : "assertEquals(\"ceiling second-1 failed\",\n                dateTimeParser.parse(\"February 12, 2002 12:34:57.000\"),\n                DateUtils.ceiling((Object) date1, Calendar.SECOND));",
      "info" : "ExpressionStatement[65660-65840]:ExpressionStatement[66244-66424]"
    }, {
      "left" : "assertEquals(\"ceiling second-2 failed\",\n                dateTimeParser.parse(\"November 18, 2001 1:23:12.000\"),\n                DateUtils.ceiling((Object) date2, Calendar.SECOND));",
      "right" : "assertEquals(\"ceiling second-2 failed\",\n                dateTimeParser.parse(\"November 18, 2001 1:23:12.000\"),\n                DateUtils.ceiling((Object) date2, Calendar.SECOND));",
      "info" : "ExpressionStatement[65849-66028]:ExpressionStatement[66433-66612]"
    }, {
      "left" : "assertEquals(\"ceiling ampm-1 failed\",\n                dateTimeParser.parse(\"February 3, 2002 12:00:00.000\"),\n                DateUtils.ceiling((Object) dateAmPm1, Calendar.AM_PM));",
      "right" : "assertEquals(\"ceiling ampm-1 failed\",\n                dateTimeParser.parse(\"February 3, 2002 12:00:00.000\"),\n                DateUtils.ceiling((Object) dateAmPm1, Calendar.AM_PM));",
      "info" : "ExpressionStatement[66037-66217]:ExpressionStatement[66621-66801]"
    }, {
      "left" : "assertEquals(\"ceiling ampm-2 failed\",\n                dateTimeParser.parse(\"February 3, 2002 12:00:00.000\"),\n                DateUtils.ceiling((Object) dateAmPm2, Calendar.AM_PM));",
      "right" : "assertEquals(\"ceiling ampm-2 failed\",\n                dateTimeParser.parse(\"February 3, 2002 12:00:00.000\"),\n                DateUtils.ceiling((Object) dateAmPm2, Calendar.AM_PM));",
      "info" : "ExpressionStatement[66226-66406]:ExpressionStatement[66810-66990]"
    }, {
      "left" : "assertEquals(\"ceiling ampm-3 failed\",\n                dateTimeParser.parse(\"February 4, 2002 00:00:00.000\"),\n                DateUtils.ceiling((Object) dateAmPm3, Calendar.AM_PM));",
      "right" : "assertEquals(\"ceiling ampm-3 failed\",\n                dateTimeParser.parse(\"February 4, 2002 00:00:00.000\"),\n                DateUtils.ceiling((Object) dateAmPm3, Calendar.AM_PM));",
      "info" : "ExpressionStatement[66415-66595]:ExpressionStatement[66999-67179]"
    }, {
      "left" : "assertEquals(\"ceiling ampm-4 failed\",\n                dateTimeParser.parse(\"February 4, 2002 00:00:00.000\"),\n                DateUtils.ceiling((Object) dateAmPm4, Calendar.AM_PM));",
      "right" : "assertEquals(\"ceiling ampm-4 failed\",\n                dateTimeParser.parse(\"February 4, 2002 00:00:00.000\"),\n                DateUtils.ceiling((Object) dateAmPm4, Calendar.AM_PM));",
      "info" : "ExpressionStatement[66604-66784]:ExpressionStatement[67188-67368]"
    }, {
      "left" : "assertEquals(\"ceiling calendar second-1 failed\",\n                dateTimeParser.parse(\"February 12, 2002 12:34:57.000\"),\n                DateUtils.ceiling((Object) cal1, Calendar.SECOND));",
      "right" : "assertEquals(\"ceiling calendar second-1 failed\",\n                dateTimeParser.parse(\"February 12, 2002 12:34:57.000\"),\n                DateUtils.ceiling((Object) cal1, Calendar.SECOND));",
      "info" : "ExpressionStatement[66802-66990]:ExpressionStatement[67386-67574]"
    }, {
      "left" : "assertEquals(\"ceiling calendar second-2 failed\",\n                dateTimeParser.parse(\"November 18, 2001 1:23:12.000\"),\n                DateUtils.ceiling((Object) cal2, Calendar.SECOND));",
      "right" : "assertEquals(\"ceiling calendar second-2 failed\",\n                dateTimeParser.parse(\"November 18, 2001 1:23:12.000\"),\n                DateUtils.ceiling((Object) cal2, Calendar.SECOND));",
      "info" : "ExpressionStatement[66999-67186]:ExpressionStatement[67583-67770]"
    }, {
      "left" : "assertEquals(\"ceiling ampm-1 failed\",\n                dateTimeParser.parse(\"February 3, 2002 12:00:00.000\"),\n                DateUtils.ceiling((Object) calAmPm1, Calendar.AM_PM));",
      "right" : "assertEquals(\"ceiling ampm-1 failed\",\n                dateTimeParser.parse(\"February 3, 2002 12:00:00.000\"),\n                DateUtils.ceiling((Object) calAmPm1, Calendar.AM_PM));",
      "info" : "ExpressionStatement[67204-67383]:ExpressionStatement[67788-67967]"
    }, {
      "left" : "assertEquals(\"ceiling ampm-2 failed\",\n                dateTimeParser.parse(\"February 3, 2002 12:00:00.000\"),\n                DateUtils.ceiling((Object) calAmPm2, Calendar.AM_PM));",
      "right" : "assertEquals(\"ceiling ampm-2 failed\",\n                dateTimeParser.parse(\"February 3, 2002 12:00:00.000\"),\n                DateUtils.ceiling((Object) calAmPm2, Calendar.AM_PM));",
      "info" : "ExpressionStatement[67392-67571]:ExpressionStatement[67976-68155]"
    }, {
      "left" : "assertEquals(\"ceiling ampm-3 failed\",\n                dateTimeParser.parse(\"February 4, 2002 00:00:00.000\"),\n                DateUtils.ceiling((Object) calAmPm3, Calendar.AM_PM));",
      "right" : "assertEquals(\"ceiling ampm-3 failed\",\n                dateTimeParser.parse(\"February 4, 2002 00:00:00.000\"),\n                DateUtils.ceiling((Object) calAmPm3, Calendar.AM_PM));",
      "info" : "ExpressionStatement[67580-67759]:ExpressionStatement[68164-68343]"
    }, {
      "left" : "assertEquals(\"ceiling ampm-4 failed\",\n                dateTimeParser.parse(\"February 4, 2002 00:00:00.000\"),\n                DateUtils.ceiling((Object) calAmPm4, Calendar.AM_PM));",
      "right" : "assertEquals(\"ceiling ampm-4 failed\",\n                dateTimeParser.parse(\"February 4, 2002 00:00:00.000\"),\n                DateUtils.ceiling((Object) calAmPm4, Calendar.AM_PM));",
      "info" : "ExpressionStatement[67768-67947]:ExpressionStatement[68352-68531]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[67957-68098]:TryStatement[68541-68682]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67961-68053]:Block[68545-68637]"
    }, {
      "left" : "DateUtils.ceiling((Date) null, Calendar.SECOND);",
      "right" : "DateUtils.ceiling((Date) null, Calendar.SECOND);",
      "info" : "ExpressionStatement[67975-68023]:ExpressionStatement[68559-68607]"
    }, {
      "left" : "fail();",
      "right" : "fail();",
      "info" : "ExpressionStatement[68036-68043]:ExpressionStatement[68620-68627]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[68096-68098]:Block[68680-68682]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[68107-68252]:TryStatement[68691-68836]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[68111-68207]:Block[68695-68791]"
    }, {
      "left" : "DateUtils.ceiling((Calendar) null, Calendar.SECOND);",
      "right" : "DateUtils.ceiling((Calendar) null, Calendar.SECOND);",
      "info" : "ExpressionStatement[68125-68177]:ExpressionStatement[68709-68761]"
    }, {
      "left" : "fail();",
      "right" : "fail();",
      "info" : "ExpressionStatement[68190-68197]:ExpressionStatement[68774-68781]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[68250-68252]:Block[68834-68836]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[68261-68404]:TryStatement[68845-68988]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[68265-68359]:Block[68849-68943]"
    }, {
      "left" : "DateUtils.ceiling((Object) null, Calendar.SECOND);",
      "right" : "DateUtils.ceiling((Object) null, Calendar.SECOND);",
      "info" : "ExpressionStatement[68279-68329]:ExpressionStatement[68863-68913]"
    }, {
      "left" : "fail();",
      "right" : "fail();",
      "info" : "ExpressionStatement[68342-68349]:ExpressionStatement[68926-68933]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[68402-68404]:Block[68986-68988]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[68413-68539]:TryStatement[68997-69123]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[68417-68500]:Block[69001-69084]"
    }, {
      "left" : "DateUtils.ceiling(\"\", Calendar.SECOND);",
      "right" : "DateUtils.ceiling(\"\", Calendar.SECOND);",
      "info" : "ExpressionStatement[68431-68470]:ExpressionStatement[69015-69054]"
    }, {
      "left" : "fail();",
      "right" : "fail();",
      "info" : "ExpressionStatement[68483-68490]:ExpressionStatement[69067-69074]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[68537-68539]:Block[69121-69123]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[68548-68672]:TryStatement[69132-69256]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[68552-68628]:Block[69136-69212]"
    }, {
      "left" : "DateUtils.ceiling(date1, -9999);",
      "right" : "DateUtils.ceiling(date1, -9999);",
      "info" : "ExpressionStatement[68566-68598]:ExpressionStatement[69150-69182]"
    }, {
      "left" : "fail();",
      "right" : "fail();",
      "info" : "ExpressionStatement[68611-68618]:ExpressionStatement[69195-69202]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[68670-68672]:Block[69254-69256]"
    }, {
      "left" : "TimeZone.setDefault(zone);",
      "right" : "TimeZone.setDefault(zone);",
      "info" : "ExpressionStatement[68835-68861]:ExpressionStatement[69419-69445]"
    }, {
      "left" : "dateTimeParser.setTimeZone(zone);",
      "right" : "dateTimeParser.setTimeZone(zone);",
      "info" : "ExpressionStatement[68870-68903]:ExpressionStatement[69454-69487]"
    }, {
      "left" : "assertEquals(\"ceiling MET date across DST change-over\",\n                dateTimeParser.parse(\"March 31, 2003 00:00:00.000\"),\n                DateUtils.ceiling(date4, Calendar.DATE));",
      "right" : "assertEquals(\"ceiling MET date across DST change-over\",\n                dateTimeParser.parse(\"March 31, 2003 00:00:00.000\"),\n                DateUtils.ceiling(date4, Calendar.DATE));",
      "info" : "ExpressionStatement[68913-69095]:ExpressionStatement[69497-69679]"
    }, {
      "left" : "assertEquals(\"ceiling MET date across DST change-over\",\n                dateTimeParser.parse(\"March 31, 2003 00:00:00.000\"),\n                DateUtils.ceiling((Object) cal4, Calendar.DATE));",
      "right" : "assertEquals(\"ceiling MET date across DST change-over\",\n                dateTimeParser.parse(\"March 31, 2003 00:00:00.000\"),\n                DateUtils.ceiling((Object) cal4, Calendar.DATE));",
      "info" : "ExpressionStatement[69104-69294]:ExpressionStatement[69688-69878]"
    }, {
      "left" : "assertEquals(\"ceiling MET date across DST change-over\",\n                dateTimeParser.parse(\"March 31, 2003 00:00:00.000\"),\n                DateUtils.ceiling(date5, Calendar.DATE));",
      "right" : "assertEquals(\"ceiling MET date across DST change-over\",\n                dateTimeParser.parse(\"March 31, 2003 00:00:00.000\"),\n                DateUtils.ceiling(date5, Calendar.DATE));",
      "info" : "ExpressionStatement[69303-69485]:ExpressionStatement[69887-70069]"
    }, {
      "left" : "assertEquals(\"ceiling MET date across DST change-over\",\n                dateTimeParser.parse(\"March 31, 2003 00:00:00.000\"),\n                DateUtils.ceiling((Object) cal5, Calendar.DATE));",
      "right" : "assertEquals(\"ceiling MET date across DST change-over\",\n                dateTimeParser.parse(\"March 31, 2003 00:00:00.000\"),\n                DateUtils.ceiling((Object) cal5, Calendar.DATE));",
      "info" : "ExpressionStatement[69494-69684]:ExpressionStatement[70078-70268]"
    }, {
      "left" : "assertEquals(\"ceiling MET date across DST change-over\",\n                dateTimeParser.parse(\"March 31, 2003 00:00:00.000\"),\n                DateUtils.ceiling(date6, Calendar.DATE));",
      "right" : "assertEquals(\"ceiling MET date across DST change-over\",\n                dateTimeParser.parse(\"March 31, 2003 00:00:00.000\"),\n                DateUtils.ceiling(date6, Calendar.DATE));",
      "info" : "ExpressionStatement[69693-69875]:ExpressionStatement[70277-70459]"
    }, {
      "left" : "assertEquals(\"ceiling MET date across DST change-over\",\n                dateTimeParser.parse(\"March 31, 2003 00:00:00.000\"),\n                DateUtils.ceiling((Object) cal6, Calendar.DATE));",
      "right" : "assertEquals(\"ceiling MET date across DST change-over\",\n                dateTimeParser.parse(\"March 31, 2003 00:00:00.000\"),\n                DateUtils.ceiling((Object) cal6, Calendar.DATE));",
      "info" : "ExpressionStatement[69884-70074]:ExpressionStatement[70468-70658]"
    }, {
      "left" : "assertEquals(\"ceiling MET date across DST change-over\",\n                dateTimeParser.parse(\"March 31, 2003 00:00:00.000\"),\n                DateUtils.ceiling(date7, Calendar.DATE));",
      "right" : "assertEquals(\"ceiling MET date across DST change-over\",\n                dateTimeParser.parse(\"March 31, 2003 00:00:00.000\"),\n                DateUtils.ceiling(date7, Calendar.DATE));",
      "info" : "ExpressionStatement[70083-70265]:ExpressionStatement[70667-70849]"
    }, {
      "left" : "assertEquals(\"ceiling MET date across DST change-over\",\n                dateTimeParser.parse(\"March 31, 2003 00:00:00.000\"),\n                DateUtils.ceiling((Object) cal7, Calendar.DATE));",
      "right" : "assertEquals(\"ceiling MET date across DST change-over\",\n                dateTimeParser.parse(\"March 31, 2003 00:00:00.000\"),\n                DateUtils.ceiling((Object) cal7, Calendar.DATE));",
      "info" : "ExpressionStatement[70274-70464]:ExpressionStatement[70858-71048]"
    }, {
      "left" : "assertEquals(\"ceiling MET date across DST change-over\",\n                dateTimeParser.parse(\"March 30, 2003 03:00:00.000\"),\n                DateUtils.ceiling(date4, Calendar.HOUR_OF_DAY));",
      "right" : "assertEquals(\"ceiling MET date across DST change-over\",\n                dateTimeParser.parse(\"March 30, 2003 03:00:00.000\"),\n                DateUtils.ceiling(date4, Calendar.HOUR_OF_DAY));",
      "info" : "ExpressionStatement[70482-70671]:ExpressionStatement[71066-71255]"
    }, {
      "left" : "assertEquals(\"ceiling MET date across DST change-over\",\n                dateTimeParser.parse(\"March 30, 2003 03:00:00.000\"),\n                DateUtils.ceiling((Object) cal4, Calendar.HOUR_OF_DAY));",
      "right" : "assertEquals(\"ceiling MET date across DST change-over\",\n                dateTimeParser.parse(\"March 30, 2003 03:00:00.000\"),\n                DateUtils.ceiling((Object) cal4, Calendar.HOUR_OF_DAY));",
      "info" : "ExpressionStatement[70680-70877]:ExpressionStatement[71264-71461]"
    }, {
      "left" : "assertEquals(\"ceiling MET date across DST change-over\",\n                dateTimeParser.parse(\"March 30, 2003 03:00:00.000\"),\n                DateUtils.ceiling(date5, Calendar.HOUR_OF_DAY));",
      "right" : "assertEquals(\"ceiling MET date across DST change-over\",\n                dateTimeParser.parse(\"March 30, 2003 03:00:00.000\"),\n                DateUtils.ceiling(date5, Calendar.HOUR_OF_DAY));",
      "info" : "ExpressionStatement[70886-71075]:ExpressionStatement[71470-71659]"
    }, {
      "left" : "assertEquals(\"ceiling MET date across DST change-over\",\n                dateTimeParser.parse(\"March 30, 2003 03:00:00.000\"),\n                DateUtils.ceiling((Object) cal5, Calendar.HOUR_OF_DAY));",
      "right" : "assertEquals(\"ceiling MET date across DST change-over\",\n                dateTimeParser.parse(\"March 30, 2003 03:00:00.000\"),\n                DateUtils.ceiling((Object) cal5, Calendar.HOUR_OF_DAY));",
      "info" : "ExpressionStatement[71084-71281]:ExpressionStatement[71668-71865]"
    }, {
      "left" : "assertEquals(\"ceiling MET date across DST change-over\",\n                dateTimeParser.parse(\"March 30, 2003 04:00:00.000\"),\n                DateUtils.ceiling(date6, Calendar.HOUR_OF_DAY));",
      "right" : "assertEquals(\"ceiling MET date across DST change-over\",\n                dateTimeParser.parse(\"March 30, 2003 04:00:00.000\"),\n                DateUtils.ceiling(date6, Calendar.HOUR_OF_DAY));",
      "info" : "ExpressionStatement[71290-71479]:ExpressionStatement[71874-72063]"
    }, {
      "left" : "assertEquals(\"ceiling MET date across DST change-over\",\n                dateTimeParser.parse(\"March 30, 2003 04:00:00.000\"),\n                DateUtils.ceiling((Object) cal6, Calendar.HOUR_OF_DAY));",
      "right" : "assertEquals(\"ceiling MET date across DST change-over\",\n                dateTimeParser.parse(\"March 30, 2003 04:00:00.000\"),\n                DateUtils.ceiling((Object) cal6, Calendar.HOUR_OF_DAY));",
      "info" : "ExpressionStatement[71488-71685]:ExpressionStatement[72072-72269]"
    }, {
      "left" : "assertEquals(\"ceiling MET date across DST change-over\",\n                dateTimeParser.parse(\"March 30, 2003 04:00:00.000\"),\n                DateUtils.ceiling(date7, Calendar.HOUR_OF_DAY));",
      "right" : "assertEquals(\"ceiling MET date across DST change-over\",\n                dateTimeParser.parse(\"March 30, 2003 04:00:00.000\"),\n                DateUtils.ceiling(date7, Calendar.HOUR_OF_DAY));",
      "info" : "ExpressionStatement[71694-71883]:ExpressionStatement[72278-72467]"
    }, {
      "left" : "assertEquals(\"ceiling MET date across DST change-over\",\n                dateTimeParser.parse(\"March 30, 2003 04:00:00.000\"),\n                DateUtils.ceiling((Object) cal7, Calendar.HOUR_OF_DAY));",
      "right" : "assertEquals(\"ceiling MET date across DST change-over\",\n                dateTimeParser.parse(\"March 30, 2003 04:00:00.000\"),\n                DateUtils.ceiling((Object) cal7, Calendar.HOUR_OF_DAY));",
      "info" : "ExpressionStatement[71892-72089]:ExpressionStatement[72476-72673]"
    }, {
      "left" : "TimeZone.setDefault(defaultZone);",
      "right" : "TimeZone.setDefault(defaultZone);",
      "info" : "ExpressionStatement[72098-72131]:ExpressionStatement[72682-72715]"
    }, {
      "left" : "dateTimeParser.setTimeZone(defaultZone);",
      "right" : "dateTimeParser.setTimeZone(defaultZone);",
      "info" : "ExpressionStatement[72140-72180]:ExpressionStatement[72724-72764]"
    }, {
      "left" : "final Date endOfTime = new Date(Long.MAX_VALUE);",
      "right" : "final Date endOfTime = new Date(Long.MAX_VALUE);",
      "info" : "VariableDeclarationStatement[72229-72277]:VariableDeclarationStatement[72813-72861]"
    }, {
      "left" : "final GregorianCalendar endCal = new GregorianCalendar();",
      "right" : "final GregorianCalendar endCal = new GregorianCalendar();",
      "info" : "VariableDeclarationStatement[72342-72399]:VariableDeclarationStatement[72926-72983]"
    }, {
      "left" : "endCal.setTime(endOfTime);",
      "right" : "endCal.setTime(endOfTime);",
      "info" : "ExpressionStatement[72408-72434]:ExpressionStatement[72992-73018]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[72443-72572]:TryStatement[73027-73156]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[72447-72532]:Block[73031-73116]"
    }, {
      "left" : "DateUtils.ceiling(endCal, Calendar.DATE);",
      "right" : "DateUtils.ceiling(endCal, Calendar.DATE);",
      "info" : "ExpressionStatement[72461-72502]:ExpressionStatement[73045-73086]"
    }, {
      "left" : "fail();",
      "right" : "fail();",
      "info" : "ExpressionStatement[72515-72522]:ExpressionStatement[73099-73106]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[72570-72572]:Block[73154-73156]"
    }, {
      "left" : "endCal.set(Calendar.YEAR, 280000001);",
      "right" : "endCal.set(Calendar.YEAR, 280000001);",
      "info" : "ExpressionStatement[72581-72618]:ExpressionStatement[73165-73202]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[72627-72756]:TryStatement[73211-73340]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[72631-72716]:Block[73215-73300]"
    }, {
      "left" : "DateUtils.ceiling(endCal, Calendar.DATE);",
      "right" : "DateUtils.ceiling(endCal, Calendar.DATE);",
      "info" : "ExpressionStatement[72645-72686]:ExpressionStatement[73229-73270]"
    }, {
      "left" : "fail();",
      "right" : "fail();",
      "info" : "ExpressionStatement[72699-72706]:ExpressionStatement[73283-73290]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[72754-72756]:Block[73338-73340]"
    }, {
      "left" : "endCal.set(Calendar.YEAR, 280000000);",
      "right" : "endCal.set(Calendar.YEAR, 280000000);",
      "info" : "ExpressionStatement[72765-72802]:ExpressionStatement[73349-73386]"
    }, {
      "left" : "final Calendar cal = DateUtils.ceiling(endCal, Calendar.DATE);",
      "right" : "final Calendar cal = DateUtils.ceiling(endCal, Calendar.DATE);",
      "info" : "VariableDeclarationStatement[72811-72873]:VariableDeclarationStatement[73395-73457]"
    }, {
      "left" : "assertEquals(0, cal.get(Calendar.HOUR));",
      "right" : "assertEquals(0, cal.get(Calendar.HOUR));",
      "info" : "ExpressionStatement[72882-72922]:ExpressionStatement[73466-73506]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[73058-73063]:MarkerAnnotation[73642-73647]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[73068-73074]:Modifier[73652-73658]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[73075-73079]:PrimitiveType[73659-73663]"
    }, {
      "left" : "testIteratorEx",
      "right" : "testIteratorEx",
      "info" : "SimpleName[73080-73094]:SimpleName[73664-73678]"
    }, {
      "left" : "Exception",
      "right" : "Exception",
      "info" : "SimpleType[73104-73113]:SimpleType[73688-73697]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[73114-73896]:Block[73698-74480]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[73124-73247]:TryStatement[73708-73831]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[73128-73202]:Block[73712-73786]"
    }, {
      "left" : "DateUtils.iterator(Calendar.getInstance(), -9999);",
      "right" : "DateUtils.iterator(Calendar.getInstance(), -9999);",
      "info" : "ExpressionStatement[73142-73192]:ExpressionStatement[73726-73776]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[73245-73247]:Block[73829-73831]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[73256-73410]:TryStatement[73840-73994]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[73260-73365]:Block[73844-73949]"
    }, {
      "left" : "DateUtils.iterator((Date) null, DateUtils.RANGE_WEEK_CENTER);",
      "right" : "DateUtils.iterator((Date) null, DateUtils.RANGE_WEEK_CENTER);",
      "info" : "ExpressionStatement[73274-73335]:ExpressionStatement[73858-73919]"
    }, {
      "left" : "fail();",
      "right" : "fail();",
      "info" : "ExpressionStatement[73348-73355]:ExpressionStatement[73932-73939]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[73408-73410]:Block[73992-73994]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[73419-73577]:TryStatement[74003-74161]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[73423-73532]:Block[74007-74116]"
    }, {
      "left" : "DateUtils.iterator((Calendar) null, DateUtils.RANGE_WEEK_CENTER);",
      "right" : "DateUtils.iterator((Calendar) null, DateUtils.RANGE_WEEK_CENTER);",
      "info" : "ExpressionStatement[73437-73502]:ExpressionStatement[74021-74086]"
    }, {
      "left" : "fail();",
      "right" : "fail();",
      "info" : "ExpressionStatement[73515-73522]:ExpressionStatement[74099-74106]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[73575-73577]:Block[74159-74161]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[73586-73742]:TryStatement[74170-74326]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[73590-73697]:Block[74174-74281]"
    }, {
      "left" : "DateUtils.iterator((Object) null, DateUtils.RANGE_WEEK_CENTER);",
      "right" : "DateUtils.iterator((Object) null, DateUtils.RANGE_WEEK_CENTER);",
      "info" : "ExpressionStatement[73604-73667]:ExpressionStatement[74188-74251]"
    }, {
      "left" : "fail();",
      "right" : "fail();",
      "info" : "ExpressionStatement[73680-73687]:ExpressionStatement[74264-74271]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[73740-73742]:Block[74324-74326]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[73751-73890]:TryStatement[74335-74474]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[73755-73851]:Block[74339-74435]"
    }, {
      "left" : "DateUtils.iterator(\"\", DateUtils.RANGE_WEEK_CENTER);",
      "right" : "DateUtils.iterator(\"\", DateUtils.RANGE_WEEK_CENTER);",
      "info" : "ExpressionStatement[73769-73821]:ExpressionStatement[74353-74405]"
    }, {
      "left" : "fail();",
      "right" : "fail();",
      "info" : "ExpressionStatement[73834-73841]:ExpressionStatement[74418-74425]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[73888-73890]:Block[74472-74474]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[74040-74045]:MarkerAnnotation[74624-74629]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[74050-74056]:Modifier[74634-74640]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[74057-74061]:PrimitiveType[74641-74645]"
    }, {
      "left" : "testWeekIterator",
      "right" : "testWeekIterator",
      "info" : "SimpleName[74062-74078]:SimpleName[74646-74662]"
    }, {
      "left" : "Exception",
      "right" : "Exception",
      "info" : "SimpleType[74088-74097]:SimpleType[74672-74681]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[74098-76050]:Block[74682-76634]"
    }, {
      "left" : "final Calendar now = Calendar.getInstance();",
      "right" : "final Calendar now = Calendar.getInstance();",
      "info" : "VariableDeclarationStatement[74108-74152]:VariableDeclarationStatement[74692-74736]"
    }, {
      "left" : "for (int i = 0; i< 7; i++)",
      "right" : "for (int i = 0; i< 7; i++)",
      "info" : "ForStatement[74161-76044]:ForStatement[74745-76628]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[74188-76044]:Block[74772-76628]"
    }, {
      "left" : "final Calendar today = DateUtils.truncate(now, Calendar.DATE);",
      "right" : "final Calendar today = DateUtils.truncate(now, Calendar.DATE);",
      "info" : "VariableDeclarationStatement[74202-74264]:VariableDeclarationStatement[74786-74848]"
    }, {
      "left" : "final Calendar sunday = DateUtils.truncate(now, Calendar.DATE);",
      "right" : "final Calendar sunday = DateUtils.truncate(now, Calendar.DATE);",
      "info" : "VariableDeclarationStatement[74277-74340]:VariableDeclarationStatement[74861-74924]"
    }, {
      "left" : "sunday.add(Calendar.DATE, 1 - sunday.get(Calendar.DAY_OF_WEEK));",
      "right" : "sunday.add(Calendar.DATE, 1 - sunday.get(Calendar.DAY_OF_WEEK));",
      "info" : "ExpressionStatement[74353-74417]:ExpressionStatement[74937-75001]"
    }, {
      "left" : "final Calendar monday = DateUtils.truncate(now, Calendar.DATE);",
      "right" : "final Calendar monday = DateUtils.truncate(now, Calendar.DATE);",
      "info" : "VariableDeclarationStatement[74430-74493]:VariableDeclarationStatement[75014-75077]"
    }, {
      "left" : "if (monday.get(Calendar.DAY_OF_WEEK) == 1)",
      "right" : "if (monday.get(Calendar.DAY_OF_WEEK) == 1)",
      "info" : "IfStatement[74506-74766]:IfStatement[75090-75350]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[74549-74664]:Block[75133-75248]"
    }, {
      "left" : "monday.add(Calendar.DATE, -6);",
      "right" : "monday.add(Calendar.DATE, -6);",
      "info" : "ExpressionStatement[74620-74650]:ExpressionStatement[75204-75234]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[74670-74766]:Block[75254-75350]"
    }, {
      "left" : "monday.add(Calendar.DATE, 2 - monday.get(Calendar.DAY_OF_WEEK));",
      "right" : "monday.add(Calendar.DATE, 2 - monday.get(Calendar.DAY_OF_WEEK));",
      "info" : "ExpressionStatement[74688-74752]:ExpressionStatement[75272-75336]"
    }, {
      "left" : "final Calendar centered = DateUtils.truncate(now, Calendar.DATE);",
      "right" : "final Calendar centered = DateUtils.truncate(now, Calendar.DATE);",
      "info" : "VariableDeclarationStatement[74779-74844]:VariableDeclarationStatement[75363-75428]"
    }, {
      "left" : "centered.add(Calendar.DATE, -3);",
      "right" : "centered.add(Calendar.DATE, -3);",
      "info" : "ExpressionStatement[74857-74889]:ExpressionStatement[75441-75473]"
    }, {
      "left" : "Iterator<?> it = DateUtils.iterator(now, DateUtils.RANGE_WEEK_SUNDAY);",
      "right" : "Iterator<?> it = DateUtils.iterator(now, DateUtils.RANGE_WEEK_SUNDAY);",
      "info" : "VariableDeclarationStatement[74915-74985]:VariableDeclarationStatement[75499-75569]"
    }, {
      "left" : "assertWeekIterator(it, sunday);",
      "right" : "assertWeekIterator(it, sunday);",
      "info" : "ExpressionStatement[74998-75029]:ExpressionStatement[75582-75613]"
    }, {
      "left" : "it = DateUtils.iterator(now, DateUtils.RANGE_WEEK_MONDAY);",
      "right" : "it = DateUtils.iterator(now, DateUtils.RANGE_WEEK_MONDAY);",
      "info" : "ExpressionStatement[75042-75100]:ExpressionStatement[75626-75684]"
    }, {
      "left" : "assertWeekIterator(it, monday);",
      "right" : "assertWeekIterator(it, monday);",
      "info" : "ExpressionStatement[75113-75144]:ExpressionStatement[75697-75728]"
    }, {
      "left" : "it = DateUtils.iterator(now, DateUtils.RANGE_WEEK_RELATIVE);",
      "right" : "it = DateUtils.iterator(now, DateUtils.RANGE_WEEK_RELATIVE);",
      "info" : "ExpressionStatement[75157-75217]:ExpressionStatement[75741-75801]"
    }, {
      "left" : "assertWeekIterator(it, today);",
      "right" : "assertWeekIterator(it, today);",
      "info" : "ExpressionStatement[75230-75260]:ExpressionStatement[75814-75844]"
    }, {
      "left" : "it = DateUtils.iterator(now, DateUtils.RANGE_WEEK_CENTER);",
      "right" : "it = DateUtils.iterator(now, DateUtils.RANGE_WEEK_CENTER);",
      "info" : "ExpressionStatement[75273-75331]:ExpressionStatement[75857-75915]"
    }, {
      "left" : "assertWeekIterator(it, centered);",
      "right" : "assertWeekIterator(it, centered);",
      "info" : "ExpressionStatement[75344-75377]:ExpressionStatement[75928-75961]"
    }, {
      "left" : "it = DateUtils.iterator((Object) now, DateUtils.RANGE_WEEK_CENTER);",
      "right" : "it = DateUtils.iterator((Object) now, DateUtils.RANGE_WEEK_CENTER);",
      "info" : "ExpressionStatement[75403-75470]:ExpressionStatement[75987-76054]"
    }, {
      "left" : "assertWeekIterator(it, centered);",
      "right" : "assertWeekIterator(it, centered);",
      "info" : "ExpressionStatement[75483-75516]:ExpressionStatement[76067-76100]"
    }, {
      "left" : "it = DateUtils.iterator((Object) now.getTime(), DateUtils.RANGE_WEEK_CENTER);",
      "right" : "it = DateUtils.iterator((Object) now.getTime(), DateUtils.RANGE_WEEK_CENTER);",
      "info" : "ExpressionStatement[75529-75606]:ExpressionStatement[76113-76190]"
    }, {
      "left" : "assertWeekIterator(it, centered);",
      "right" : "assertWeekIterator(it, centered);",
      "info" : "ExpressionStatement[75619-75652]:ExpressionStatement[76203-76236]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[75665-75778]:TryStatement[76249-76362]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[75669-75735]:Block[76253-76319]"
    }, {
      "left" : "it.next();",
      "right" : "it.next();",
      "info" : "ExpressionStatement[75687-75697]:ExpressionStatement[76271-76281]"
    }, {
      "left" : "fail();",
      "right" : "fail();",
      "info" : "ExpressionStatement[75714-75721]:ExpressionStatement[76298-76305]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[75776-75778]:Block[76360-76362]"
    }, {
      "left" : "it = DateUtils.iterator(now, DateUtils.RANGE_WEEK_CENTER);",
      "right" : "it = DateUtils.iterator(now, DateUtils.RANGE_WEEK_CENTER);",
      "info" : "ExpressionStatement[75791-75849]:ExpressionStatement[76375-76433]"
    }, {
      "left" : "it.next();",
      "right" : "it.next();",
      "info" : "ExpressionStatement[75862-75872]:ExpressionStatement[76446-76456]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[75885-75983]:TryStatement[76469-76567]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[75889-75933]:Block[76473-76517]"
    }, {
      "left" : "it.remove();",
      "right" : "it.remove();",
      "info" : "ExpressionStatement[75907-75919]:ExpressionStatement[76491-76503]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[75981-75983]:Block[76565-76567]"
    }, {
      "left" : "now.add(Calendar.DATE,1);",
      "right" : "now.add(Calendar.DATE,1);",
      "info" : "ExpressionStatement[76009-76034]:ExpressionStatement[76593-76618]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[76213-76218]:MarkerAnnotation[76797-76802]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[76223-76229]:Modifier[76807-76813]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[76230-76234]:PrimitiveType[76814-76818]"
    }, {
      "left" : "testMonthIterator",
      "right" : "testMonthIterator",
      "info" : "SimpleName[76235-76252]:SimpleName[76819-76836]"
    }, {
      "left" : "Exception",
      "right" : "Exception",
      "info" : "SimpleType[76262-76271]:SimpleType[76846-76855]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[76272-77128]:Block[76856-77712]"
    }, {
      "left" : "Iterator<?> it = DateUtils.iterator(date1, DateUtils.RANGE_MONTH_SUNDAY);",
      "right" : "Iterator<?> it = DateUtils.iterator(date1, DateUtils.RANGE_MONTH_SUNDAY);",
      "info" : "VariableDeclarationStatement[76282-76355]:VariableDeclarationStatement[76866-76939]"
    }, {
      "left" : "assertWeekIterator(it,\n                dateParser.parse(\"January 27, 2002\"),\n                dateParser.parse(\"March 2, 2002\"));",
      "right" : "assertWeekIterator(it,\n                dateParser.parse(\"January 27, 2002\"),\n                dateParser.parse(\"March 2, 2002\"));",
      "info" : "ExpressionStatement[76364-76492]:ExpressionStatement[76948-77076]"
    }, {
      "left" : "it = DateUtils.iterator(date1, DateUtils.RANGE_MONTH_MONDAY);",
      "right" : "it = DateUtils.iterator(date1, DateUtils.RANGE_MONTH_MONDAY);",
      "info" : "ExpressionStatement[76502-76563]:ExpressionStatement[77086-77147]"
    }, {
      "left" : "assertWeekIterator(it,\n                dateParser.parse(\"January 28, 2002\"),\n                dateParser.parse(\"March 3, 2002\"));",
      "right" : "assertWeekIterator(it,\n                dateParser.parse(\"January 28, 2002\"),\n                dateParser.parse(\"March 3, 2002\"));",
      "info" : "ExpressionStatement[76572-76700]:ExpressionStatement[77156-77284]"
    }, {
      "left" : "it = DateUtils.iterator(date2, DateUtils.RANGE_MONTH_SUNDAY);",
      "right" : "it = DateUtils.iterator(date2, DateUtils.RANGE_MONTH_SUNDAY);",
      "info" : "ExpressionStatement[76710-76771]:ExpressionStatement[77294-77355]"
    }, {
      "left" : "assertWeekIterator(it,\n                dateParser.parse(\"October 28, 2001\"),\n                dateParser.parse(\"December 1, 2001\"));",
      "right" : "assertWeekIterator(it,\n                dateParser.parse(\"October 28, 2001\"),\n                dateParser.parse(\"December 1, 2001\"));",
      "info" : "ExpressionStatement[76780-76911]:ExpressionStatement[77364-77495]"
    }, {
      "left" : "it = DateUtils.iterator(date2, DateUtils.RANGE_MONTH_MONDAY);",
      "right" : "it = DateUtils.iterator(date2, DateUtils.RANGE_MONTH_MONDAY);",
      "info" : "ExpressionStatement[76921-76982]:ExpressionStatement[77505-77566]"
    }, {
      "left" : "assertWeekIterator(it,\n                dateParser.parse(\"October 29, 2001\"),\n                dateParser.parse(\"December 2, 2001\"));",
      "right" : "assertWeekIterator(it,\n                dateParser.parse(\"October 29, 2001\"),\n                dateParser.parse(\"December 2, 2001\"));",
      "info" : "ExpressionStatement[76991-77122]:ExpressionStatement[77575-77706]"
    }, {
      "left" : "@SystemDefaults(locale=\"en\")",
      "right" : "@SystemDefaults(locale=\"en\")",
      "info" : "NormalAnnotation[77134-77162]:NormalAnnotation[77718-77746]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[77167-77172]:MarkerAnnotation[77751-77756]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[77177-77183]:Modifier[77761-77767]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[77184-77188]:PrimitiveType[77768-77772]"
    }, {
      "left" : "testLANG799_EN_OK",
      "right" : "testLANG799_EN_OK",
      "info" : "SimpleName[77189-77206]:SimpleName[77773-77790]"
    }, {
      "left" : "ParseException",
      "right" : "ParseException",
      "info" : "SimpleType[77216-77230]:SimpleType[77800-77814]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[77231-77436]:Block[77815-78020]"
    }, {
      "left" : "DateUtils.parseDate(\"Wed, 09 Apr 2008 23:55:38 GMT\", \"EEE, dd MMM yyyy HH:mm:ss zzz\");",
      "right" : "DateUtils.parseDate(\"Wed, 09 Apr 2008 23:55:38 GMT\", \"EEE, dd MMM yyyy HH:mm:ss zzz\");",
      "info" : "ExpressionStatement[77241-77327]:ExpressionStatement[77825-77911]"
    }, {
      "left" : "DateUtils.parseDateStrictly(\"Wed, 09 Apr 2008 23:55:38 GMT\", \"EEE, dd MMM yyyy HH:mm:ss zzz\");",
      "right" : "DateUtils.parseDateStrictly(\"Wed, 09 Apr 2008 23:55:38 GMT\", \"EEE, dd MMM yyyy HH:mm:ss zzz\");",
      "info" : "ExpressionStatement[77336-77430]:ExpressionStatement[77920-78014]"
    }, {
      "left" : "@SystemDefaults(locale=\"en\")",
      "right" : "@SystemDefaults(locale=\"en\")",
      "info" : "NormalAnnotation[77487-77515]:NormalAnnotation[78071-78099]"
    }, {
      "left" : "@Test(expected = ParseException.class)",
      "right" : "@Test(expected = ParseException.class)",
      "info" : "NormalAnnotation[77520-77558]:NormalAnnotation[78104-78142]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[77563-77569]:Modifier[78147-78153]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[77570-77574]:PrimitiveType[78154-78158]"
    }, {
      "left" : "testLANG799_EN_FAIL",
      "right" : "testLANG799_EN_FAIL",
      "info" : "SimpleName[77575-77594]:SimpleName[78159-78178]"
    }, {
      "left" : "ParseException",
      "right" : "ParseException",
      "info" : "SimpleType[77604-77618]:SimpleType[78188-78202]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[77619-77720]:Block[78203-78304]"
    }, {
      "left" : "DateUtils.parseDate(\"Mi, 09 Apr 2008 23:55:38 GMT\", \"EEE, dd MMM yyyy HH:mm:ss zzz\");",
      "right" : "DateUtils.parseDate(\"Mi, 09 Apr 2008 23:55:38 GMT\", \"EEE, dd MMM yyyy HH:mm:ss zzz\");",
      "info" : "ExpressionStatement[77629-77714]:ExpressionStatement[78213-78298]"
    }, {
      "left" : "@SystemDefaults(locale=\"de\")",
      "right" : "@SystemDefaults(locale=\"de\")",
      "info" : "NormalAnnotation[77726-77754]:NormalAnnotation[78310-78338]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[77759-77764]:MarkerAnnotation[78343-78348]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[77769-77775]:Modifier[78353-78359]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[77776-77780]:PrimitiveType[78360-78364]"
    }, {
      "left" : "testLANG799_DE_OK",
      "right" : "testLANG799_DE_OK",
      "info" : "SimpleName[77781-77798]:SimpleName[78365-78382]"
    }, {
      "left" : "ParseException",
      "right" : "ParseException",
      "info" : "SimpleType[77808-77822]:SimpleType[78392-78406]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[77823-78026]:Block[78407-78610]"
    }, {
      "left" : "DateUtils.parseDate(\"Mi, 09 Apr 2008 23:55:38 GMT\", \"EEE, dd MMM yyyy HH:mm:ss zzz\");",
      "right" : "DateUtils.parseDate(\"Mi, 09 Apr 2008 23:55:38 GMT\", \"EEE, dd MMM yyyy HH:mm:ss zzz\");",
      "info" : "ExpressionStatement[77833-77918]:ExpressionStatement[78417-78502]"
    }, {
      "left" : "DateUtils.parseDateStrictly(\"Mi, 09 Apr 2008 23:55:38 GMT\", \"EEE, dd MMM yyyy HH:mm:ss zzz\");",
      "right" : "DateUtils.parseDateStrictly(\"Mi, 09 Apr 2008 23:55:38 GMT\", \"EEE, dd MMM yyyy HH:mm:ss zzz\");",
      "info" : "ExpressionStatement[77927-78020]:ExpressionStatement[78511-78604]"
    }, {
      "left" : "@SystemDefaults(locale=\"de\")",
      "right" : "@SystemDefaults(locale=\"de\")",
      "info" : "NormalAnnotation[78077-78105]:NormalAnnotation[78661-78689]"
    }, {
      "left" : "@Test(expected=ParseException.class)",
      "right" : "@Test(expected=ParseException.class)",
      "info" : "NormalAnnotation[78110-78146]:NormalAnnotation[78694-78730]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[78151-78157]:Modifier[78735-78741]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[78158-78162]:PrimitiveType[78742-78746]"
    }, {
      "left" : "testLANG799_DE_FAIL",
      "right" : "testLANG799_DE_FAIL",
      "info" : "SimpleName[78163-78182]:SimpleName[78747-78766]"
    }, {
      "left" : "ParseException",
      "right" : "ParseException",
      "info" : "SimpleType[78192-78206]:SimpleType[78776-78790]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[78207-78309]:Block[78791-78893]"
    }, {
      "left" : "DateUtils.parseDate(\"Wed, 09 Apr 2008 23:55:38 GMT\", \"EEE, dd MMM yyyy HH:mm:ss zzz\");",
      "right" : "DateUtils.parseDate(\"Wed, 09 Apr 2008 23:55:38 GMT\", \"EEE, dd MMM yyyy HH:mm:ss zzz\");",
      "info" : "ExpressionStatement[78217-78303]:ExpressionStatement[78801-78887]"
    }, {
      "left" : "@SystemDefaults(locale=\"en\")",
      "right" : "@SystemDefaults(locale=\"en\")",
      "info" : "NormalAnnotation[78399-78427]:NormalAnnotation[78983-79011]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[78432-78437]:MarkerAnnotation[79016-79021]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[78442-78448]:Modifier[79026-79032]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[78449-78453]:PrimitiveType[79033-79037]"
    }, {
      "left" : "testLANG799_EN_WITH_DE_LOCALE",
      "right" : "testLANG799_EN_WITH_DE_LOCALE",
      "info" : "SimpleName[78454-78483]:SimpleName[79038-79067]"
    }, {
      "left" : "ParseException",
      "right" : "ParseException",
      "info" : "SimpleType[78493-78507]:SimpleType[79077-79091]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[78508-78624]:Block[79092-79208]"
    }, {
      "left" : "DateUtils.parseDate(\"Mi, 09 Apr 2008 23:55:38 GMT\", Locale.GERMAN, \"EEE, dd MMM yyyy HH:mm:ss zzz\");",
      "right" : "DateUtils.parseDate(\"Mi, 09 Apr 2008 23:55:38 GMT\", Locale.GERMAN, \"EEE, dd MMM yyyy HH:mm:ss zzz\");",
      "info" : "ExpressionStatement[78518-78618]:ExpressionStatement[79102-79202]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[78799-78806]:Modifier[79383-79390]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[78807-78813]:Modifier[79391-79397]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[78814-78818]:PrimitiveType[79398-79402]"
    }, {
      "left" : "assertWeekIterator",
      "right" : "assertWeekIterator",
      "info" : "SimpleName[78819-78837]:SimpleName[79403-79421]"
    }, {
      "left" : "final Iterator<?> it",
      "right" : "final Iterator<?> it",
      "info" : "SingleVariableDeclaration[78838-78858]:SingleVariableDeclaration[79422-79442]"
    }, {
      "left" : "final Calendar start",
      "right" : "final Calendar start",
      "info" : "SingleVariableDeclaration[78860-78880]:SingleVariableDeclaration[79444-79464]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[78882-79024]:Block[79466-79608]"
    }, {
      "left" : "final Calendar end = (Calendar) start.clone();",
      "right" : "final Calendar end = (Calendar) start.clone();",
      "info" : "VariableDeclarationStatement[78892-78938]:VariableDeclarationStatement[79476-79522]"
    }, {
      "left" : "end.add(Calendar.DATE, 6);",
      "right" : "end.add(Calendar.DATE, 6);",
      "info" : "ExpressionStatement[78947-78973]:ExpressionStatement[79531-79557]"
    }, {
      "left" : "assertWeekIterator(it, start, end);",
      "right" : "assertWeekIterator(it, start, end);",
      "info" : "ExpressionStatement[78983-79018]:ExpressionStatement[79567-79602]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[79107-79114]:Modifier[79691-79698]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[79115-79121]:Modifier[79699-79705]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[79122-79126]:PrimitiveType[79706-79710]"
    }, {
      "left" : "assertWeekIterator",
      "right" : "assertWeekIterator",
      "info" : "SimpleName[79127-79145]:SimpleName[79711-79729]"
    }, {
      "left" : "final Iterator<?> it",
      "right" : "final Iterator<?> it",
      "info" : "SingleVariableDeclaration[79146-79166]:SingleVariableDeclaration[79730-79750]"
    }, {
      "left" : "final Date start",
      "right" : "final Date start",
      "info" : "SingleVariableDeclaration[79168-79184]:SingleVariableDeclaration[79752-79768]"
    }, {
      "left" : "final Date end",
      "right" : "final Date end",
      "info" : "SingleVariableDeclaration[79186-79200]:SingleVariableDeclaration[79770-79784]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[79202-79436]:Block[79786-80020]"
    }, {
      "left" : "final Calendar calStart = Calendar.getInstance();",
      "right" : "final Calendar calStart = Calendar.getInstance();",
      "info" : "VariableDeclarationStatement[79212-79261]:VariableDeclarationStatement[79796-79845]"
    }, {
      "left" : "calStart.setTime(start);",
      "right" : "calStart.setTime(start);",
      "info" : "ExpressionStatement[79270-79294]:ExpressionStatement[79854-79878]"
    }, {
      "left" : "final Calendar calEnd = Calendar.getInstance();",
      "right" : "final Calendar calEnd = Calendar.getInstance();",
      "info" : "VariableDeclarationStatement[79303-79350]:VariableDeclarationStatement[79887-79934]"
    }, {
      "left" : "calEnd.setTime(end);",
      "right" : "calEnd.setTime(end);",
      "info" : "ExpressionStatement[79359-79379]:ExpressionStatement[79943-79963]"
    }, {
      "left" : "assertWeekIterator(it, calStart, calEnd);",
      "right" : "assertWeekIterator(it, calStart, calEnd);",
      "info" : "ExpressionStatement[79389-79430]:ExpressionStatement[79973-80014]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[79663-79670]:Modifier[80247-80254]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[79671-79677]:Modifier[80255-80261]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[79678-79682]:PrimitiveType[80262-80266]"
    }, {
      "left" : "assertWeekIterator",
      "right" : "assertWeekIterator",
      "info" : "SimpleName[79683-79701]:SimpleName[80267-80285]"
    }, {
      "left" : "final Iterator<?> it",
      "right" : "final Iterator<?> it",
      "info" : "SingleVariableDeclaration[79702-79722]:SingleVariableDeclaration[80286-80306]"
    }, {
      "left" : "final Calendar start",
      "right" : "final Calendar start",
      "info" : "SingleVariableDeclaration[79724-79744]:SingleVariableDeclaration[80308-80328]"
    }, {
      "left" : "final Calendar end",
      "right" : "final Calendar end",
      "info" : "SingleVariableDeclaration[79746-79764]:SingleVariableDeclaration[80330-80348]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[79766-80536]:Block[80350-81120]"
    }, {
      "left" : "Calendar cal = (Calendar) it.next();",
      "right" : "Calendar cal = (Calendar) it.next();",
      "info" : "VariableDeclarationStatement[79776-79812]:VariableDeclarationStatement[80360-80396]"
    }, {
      "left" : "assertCalendarsEquals(\"\", start, cal, 0);",
      "right" : "assertCalendarsEquals(\"\", start, cal, 0);",
      "info" : "ExpressionStatement[79821-79862]:ExpressionStatement[80405-80446]"
    }, {
      "left" : "Calendar last = null;",
      "right" : "Calendar last = null;",
      "info" : "VariableDeclarationStatement[79871-79892]:VariableDeclarationStatement[80455-80476]"
    }, {
      "left" : "int count = 1;",
      "right" : "int count = 1;",
      "info" : "VariableDeclarationStatement[79901-79915]:VariableDeclarationStatement[80485-80499]"
    }, {
      "left" : "while (it.hasNext())",
      "right" : "while (it.hasNext())",
      "info" : "WhileStatement[79924-80348]:WhileStatement[80508-80932]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[79945-80348]:Block[80529-80932]"
    }, {
      "left" : "assertCalendarsEquals(\"\", cal, DateUtils.truncate(cal, Calendar.DATE), 0);",
      "right" : "assertCalendarsEquals(\"\", cal, DateUtils.truncate(cal, Calendar.DATE), 0);",
      "info" : "ExpressionStatement[80019-80093]:ExpressionStatement[80603-80677]"
    }, {
      "left" : "last = cal;",
      "right" : "last = cal;",
      "info" : "ExpressionStatement[80107-80118]:ExpressionStatement[80691-80702]"
    }, {
      "left" : "cal = (Calendar) it.next();",
      "right" : "cal = (Calendar) it.next();",
      "info" : "ExpressionStatement[80131-80158]:ExpressionStatement[80715-80742]"
    }, {
      "left" : "count++;",
      "right" : "count++;",
      "info" : "ExpressionStatement[80171-80179]:ExpressionStatement[80755-80763]"
    }, {
      "left" : "last.add(Calendar.DATE, 1);",
      "right" : "last.add(Calendar.DATE, 1);",
      "info" : "ExpressionStatement[80258-80285]:ExpressionStatement[80842-80869]"
    }, {
      "left" : "assertCalendarsEquals(\"\", last, cal, 0);",
      "right" : "assertCalendarsEquals(\"\", last, cal, 0);",
      "info" : "ExpressionStatement[80298-80338]:ExpressionStatement[80882-80922]"
    }, {
      "left" : "if (count % 7 != 0)",
      "right" : "if (count % 7 != 0)",
      "info" : "IfStatement[80357-80482]:IfStatement[80941-81066]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[80377-80482]:Block[80961-81066]"
    }, {
      "left" : "throw new AssertionFailedError(\"There were \" + count + \" days in this iterator\");",
      "right" : "throw new AssertionFailedError(\"There were \" + count + \" days in this iterator\");",
      "info" : "ThrowStatement[80391-80472]:ThrowStatement[80975-81056]"
    }, {
      "left" : "assertCalendarsEquals(\"\", end, cal, 0);",
      "right" : "assertCalendarsEquals(\"\", end, cal, 0);",
      "info" : "ExpressionStatement[80491-80530]:ExpressionStatement[81075-81114]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[80650-80657]:Modifier[81234-81241]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[80658-80664]:Modifier[81242-81248]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[80665-80669]:PrimitiveType[81249-81253]"
    }, {
      "left" : "assertCalendarsEquals",
      "right" : "assertCalendarsEquals",
      "info" : "SimpleName[80670-80691]:SimpleName[81254-81275]"
    }, {
      "left" : "final String message",
      "right" : "final String message",
      "info" : "SingleVariableDeclaration[80692-80712]:SingleVariableDeclaration[81276-81296]"
    }, {
      "left" : "final Calendar cal1",
      "right" : "final Calendar cal1",
      "info" : "SingleVariableDeclaration[80714-80733]:SingleVariableDeclaration[81298-81317]"
    }, {
      "left" : "final Calendar cal2",
      "right" : "final Calendar cal2",
      "info" : "SingleVariableDeclaration[80735-80754]:SingleVariableDeclaration[81319-81338]"
    }, {
      "left" : "final long delta",
      "right" : "final long delta",
      "info" : "SingleVariableDeclaration[80756-80772]:SingleVariableDeclaration[81340-81356]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[80774-81013]:Block[81358-81597]"
    }, {
      "left" : "if (Math.abs(cal1.getTime().getTime() - cal2.getTime().getTime()) > delta)",
      "right" : "if (Math.abs(cal1.getTime().getTime() - cal2.getTime().getTime()) > delta)",
      "info" : "IfStatement[80784-81007]:IfStatement[81368-81591]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[80859-81007]:Block[81443-81591]"
    }, {
      "left" : "throw new AssertionFailedError(\n                    message + \" expected \" + cal1.getTime() + \" but got \" + cal2.getTime());",
      "right" : "throw new AssertionFailedError(\n                    message + \" expected \" + cal1.getTime() + \" but got \" + cal2.getTime());",
      "info" : "ThrowStatement[80873-80997]:ThrowStatement[81457-81581]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[81019-81024]:MarkerAnnotation[81603-81608]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[81029-81035]:Modifier[81613-81619]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[81036-81040]:PrimitiveType[81620-81624]"
    }, {
      "left" : "testLANG799",
      "right" : "testLANG799",
      "info" : "SimpleName[81041-81052]:SimpleName[81625-81636]"
    }, {
      "left" : "ParseException",
      "right" : "ParseException",
      "info" : "SimpleType[81062-81076]:SimpleType[81646-81660]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[81077-81211]:Block[81661-81795]"
    }, {
      "left" : "DateUtils.parseDateStrictly(\"09 abril 2008 23:55:38 GMT\", new Locale(\"es\"), new String[]{\"dd MMM yyyy HH:mm:ss zzz\"});",
      "right" : "DateUtils.parseDateStrictly(\"09 abril 2008 23:55:38 GMT\", new Locale(\"es\"), new String[]{\"dd MMM yyyy HH:mm:ss zzz\"});",
      "info" : "ExpressionStatement[81087-81205]:ExpressionStatement[81671-81789]"
    } ]
  },
  "interFileMappings" : { }
}