{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "private static final String TAG = \"KeyguardUpdateMonitor\";",
      "right" : "private static final String TAG = \"KeyguardUpdateMonitor\";",
      "info" : "FieldDeclaration[3444-3502]:FieldDeclaration[3444-3502]"
    }, {
      "left" : "private static final boolean DEBUG = KeyguardConstants.DEBUG;",
      "right" : "private static final boolean DEBUG = KeyguardConstants.DEBUG;",
      "info" : "FieldDeclaration[3507-3568]:FieldDeclaration[3507-3568]"
    }, {
      "left" : "private static final boolean DEBUG_SIM_STATES = DEBUG || false;",
      "right" : "private static final boolean DEBUG_SIM_STATES = DEBUG || false;",
      "info" : "FieldDeclaration[3573-3636]:FieldDeclaration[3573-3636]"
    }, {
      "left" : "private static final int FAILED_BIOMETRIC_UNLOCK_ATTEMPTS_BEFORE_BACKUP = 3;",
      "right" : "private static final int FAILED_BIOMETRIC_UNLOCK_ATTEMPTS_BEFORE_BACKUP = 3;",
      "info" : "FieldDeclaration[3641-3717]:FieldDeclaration[3641-3717]"
    }, {
      "left" : "private static final int FAILED_FINGERPRINT_UNLOCK_ATTEMPTS_BEFORE_BACKUP = 2;",
      "right" : "private static final int FAILED_FINGERPRINT_UNLOCK_ATTEMPTS_BEFORE_BACKUP = 2;",
      "info" : "FieldDeclaration[3722-3800]:FieldDeclaration[3722-3800]"
    }, {
      "left" : "private static final int LOW_BATTERY_THRESHOLD = 20;",
      "right" : "private static final int LOW_BATTERY_THRESHOLD = 20;",
      "info" : "FieldDeclaration[3805-3857]:FieldDeclaration[3805-3857]"
    }, {
      "left" : "private static final String ACTION_FACE_UNLOCK_STARTED\n            = \"com.android.facelock.FACE_UNLOCK_STARTED\";",
      "right" : "private static final String ACTION_FACE_UNLOCK_STARTED\n            = \"com.android.facelock.FACE_UNLOCK_STARTED\";",
      "info" : "FieldDeclaration[3863-3975]:FieldDeclaration[3863-3975]"
    }, {
      "left" : "private static final String ACTION_FACE_UNLOCK_STOPPED\n            = \"com.android.facelock.FACE_UNLOCK_STOPPED\";",
      "right" : "private static final String ACTION_FACE_UNLOCK_STOPPED\n            = \"com.android.facelock.FACE_UNLOCK_STOPPED\";",
      "info" : "FieldDeclaration[3980-4092]:FieldDeclaration[3980-4092]"
    }, {
      "left" : "private static final int MSG_TIME_UPDATE = 301;",
      "right" : "private static final int MSG_TIME_UPDATE = 301;",
      "info" : "FieldDeclaration[4123-4170]:FieldDeclaration[4123-4170]"
    }, {
      "left" : "private static final int MSG_BATTERY_UPDATE = 302;",
      "right" : "private static final int MSG_BATTERY_UPDATE = 302;",
      "info" : "FieldDeclaration[4175-4225]:FieldDeclaration[4175-4225]"
    }, {
      "left" : "private static final int MSG_SIM_STATE_CHANGE = 304;",
      "right" : "private static final int MSG_SIM_STATE_CHANGE = 304;",
      "info" : "FieldDeclaration[4230-4282]:FieldDeclaration[4230-4282]"
    }, {
      "left" : "private static final int MSG_RINGER_MODE_CHANGED = 305;",
      "right" : "private static final int MSG_RINGER_MODE_CHANGED = 305;",
      "info" : "FieldDeclaration[4287-4342]:FieldDeclaration[4287-4342]"
    }, {
      "left" : "private static final int MSG_PHONE_STATE_CHANGED = 306;",
      "right" : "private static final int MSG_PHONE_STATE_CHANGED = 306;",
      "info" : "FieldDeclaration[4347-4402]:FieldDeclaration[4347-4402]"
    }, {
      "left" : "private static final int MSG_CLOCK_VISIBILITY_CHANGED = 307;",
      "right" : "private static final int MSG_CLOCK_VISIBILITY_CHANGED = 307;",
      "info" : "FieldDeclaration[4407-4467]:FieldDeclaration[4407-4467]"
    }, {
      "left" : "private static final int MSG_DEVICE_PROVISIONED = 308;",
      "right" : "private static final int MSG_DEVICE_PROVISIONED = 308;",
      "info" : "FieldDeclaration[4472-4526]:FieldDeclaration[4472-4526]"
    }, {
      "left" : "private static final int MSG_DPM_STATE_CHANGED = 309;",
      "right" : "private static final int MSG_DPM_STATE_CHANGED = 309;",
      "info" : "FieldDeclaration[4531-4584]:FieldDeclaration[4531-4584]"
    }, {
      "left" : "private static final int MSG_USER_SWITCHING = 310;",
      "right" : "private static final int MSG_USER_SWITCHING = 310;",
      "info" : "FieldDeclaration[4589-4639]:FieldDeclaration[4589-4639]"
    }, {
      "left" : "private static final int MSG_USER_REMOVED = 311;",
      "right" : "private static final int MSG_USER_REMOVED = 311;",
      "info" : "FieldDeclaration[4644-4692]:FieldDeclaration[4644-4692]"
    }, {
      "left" : "private static final int MSG_KEYGUARD_VISIBILITY_CHANGED = 312;",
      "right" : "private static final int MSG_KEYGUARD_VISIBILITY_CHANGED = 312;",
      "info" : "FieldDeclaration[4697-4760]:FieldDeclaration[4697-4760]"
    }, {
      "left" : "private static final int MSG_BOOT_COMPLETED = 313;",
      "right" : "private static final int MSG_BOOT_COMPLETED = 313;",
      "info" : "FieldDeclaration[4765-4815]:FieldDeclaration[4765-4815]"
    }, {
      "left" : "private static final int MSG_USER_SWITCH_COMPLETE = 314;",
      "right" : "private static final int MSG_USER_SWITCH_COMPLETE = 314;",
      "info" : "FieldDeclaration[4820-4876]:FieldDeclaration[4820-4876]"
    }, {
      "left" : "private static final int MSG_SET_CURRENT_CLIENT_ID = 315;",
      "right" : "private static final int MSG_SET_CURRENT_CLIENT_ID = 315;",
      "info" : "FieldDeclaration[4881-4938]:FieldDeclaration[4881-4938]"
    }, {
      "left" : "private static final int MSG_SET_PLAYBACK_STATE = 316;",
      "right" : "private static final int MSG_SET_PLAYBACK_STATE = 316;",
      "info" : "FieldDeclaration[4943-4997]:FieldDeclaration[4943-4997]"
    }, {
      "left" : "private static final int MSG_USER_INFO_CHANGED = 317;",
      "right" : "private static final int MSG_USER_INFO_CHANGED = 317;",
      "info" : "FieldDeclaration[5002-5055]:FieldDeclaration[5002-5055]"
    }, {
      "left" : "private static final int MSG_REPORT_EMERGENCY_CALL_ACTION = 318;",
      "right" : "private static final int MSG_REPORT_EMERGENCY_CALL_ACTION = 318;",
      "info" : "FieldDeclaration[5060-5124]:FieldDeclaration[5060-5124]"
    }, {
      "left" : "private static final int MSG_SCREEN_TURNED_ON = 319;",
      "right" : "private static final int MSG_SCREEN_TURNED_ON = 319;",
      "info" : "FieldDeclaration[5129-5181]:FieldDeclaration[5129-5181]"
    }, {
      "left" : "private static final int MSG_SCREEN_TURNED_OFF = 320;",
      "right" : "private static final int MSG_SCREEN_TURNED_OFF = 320;",
      "info" : "FieldDeclaration[5186-5239]:FieldDeclaration[5186-5239]"
    }, {
      "left" : "private static final int MSG_AIRPLANE_MODE_CHANGED = 321;",
      "right" : "private static final int MSG_AIRPLANE_MODE_CHANGED = 321;",
      "info" : "FieldDeclaration[5244-5301]:FieldDeclaration[5244-5301]"
    }, {
      "left" : "private static final int MSG_KEYGUARD_BOUNCER_CHANGED = 322;",
      "right" : "private static final int MSG_KEYGUARD_BOUNCER_CHANGED = 322;",
      "info" : "FieldDeclaration[5306-5366]:FieldDeclaration[5306-5366]"
    }, {
      "left" : "private static final int MSG_FINGERPRINT_PROCESSED = 323;",
      "right" : "private static final int MSG_FINGERPRINT_PROCESSED = 323;",
      "info" : "FieldDeclaration[5371-5428]:FieldDeclaration[5371-5428]"
    }, {
      "left" : "private static final int MSG_FINGERPRINT_ACQUIRED = 324;",
      "right" : "private static final int MSG_FINGERPRINT_ACQUIRED = 324;",
      "info" : "FieldDeclaration[5433-5489]:FieldDeclaration[5433-5489]"
    }, {
      "left" : "private static final int MSG_FACE_UNLOCK_STATE_CHANGED = 325;",
      "right" : "private static final int MSG_FACE_UNLOCK_STATE_CHANGED = 325;",
      "info" : "FieldDeclaration[5494-5555]:FieldDeclaration[5494-5555]"
    }, {
      "left" : "private static final int MSG_SIM_SUBSCRIPTION_INFO_CHANGED = 326;",
      "right" : "private static final int MSG_SIM_SUBSCRIPTION_INFO_CHANGED = 326;",
      "info" : "FieldDeclaration[5560-5625]:FieldDeclaration[5560-5625]"
    }, {
      "left" : "private static final int MSG_SERVICE_STATE_CHANGED = 327;",
      "right" : "private static final int MSG_SERVICE_STATE_CHANGED = 327;",
      "info" : "FieldDeclaration[5630-5687]:FieldDeclaration[5630-5687]"
    }, {
      "left" : "private static KeyguardUpdateMonitor sInstance;",
      "right" : "private static KeyguardUpdateMonitor sInstance;",
      "info" : "FieldDeclaration[5693-5740]:FieldDeclaration[5693-5740]"
    }, {
      "left" : "private final Context mContext;",
      "right" : "private final Context mContext;",
      "info" : "FieldDeclaration[5746-5777]:FieldDeclaration[5746-5777]"
    }, {
      "left" : "HashMap<Integer, SimData> mSimDatas = new HashMap<Integer, SimData>();",
      "right" : "HashMap<Integer, SimData> mSimDatas = new HashMap<Integer, SimData>();",
      "info" : "FieldDeclaration[5782-5852]:FieldDeclaration[5782-5852]"
    }, {
      "left" : "HashMap<Integer, ServiceState> mServiceStates = new HashMap<Integer, ServiceState>();",
      "right" : "HashMap<Integer, ServiceState> mServiceStates = new HashMap<Integer, ServiceState>();",
      "info" : "FieldDeclaration[5857-5942]:FieldDeclaration[5857-5942]"
    }, {
      "left" : "private SubscriptionManager mSubscriptionManager;",
      "right" : "private SubscriptionManager mSubscriptionManager;",
      "info" : "FieldDeclaration[5948-5997]:FieldDeclaration[5948-5997]"
    }, {
      "left" : "private List<SubscriptionInfo> mSubscriptionInfo;",
      "right" : "private List<SubscriptionInfo> mSubscriptionInfo;",
      "info" : "FieldDeclaration[6002-6051]:FieldDeclaration[6002-6051]"
    }, {
      "left" : "private int mNumPhones;",
      "right" : "private int mNumPhones;",
      "info" : "FieldDeclaration[6056-6079]:FieldDeclaration[6056-6079]"
    }, {
      "left" : "private int mRingMode;",
      "right" : "private int mRingMode;",
      "info" : "FieldDeclaration[6085-6107]:FieldDeclaration[6085-6107]"
    }, {
      "left" : "private int mPhoneState;",
      "right" : "private int mPhoneState;",
      "info" : "FieldDeclaration[6112-6136]:FieldDeclaration[6112-6136]"
    }, {
      "left" : "private boolean mKeyguardIsVisible;",
      "right" : "private boolean mKeyguardIsVisible;",
      "info" : "FieldDeclaration[6141-6176]:FieldDeclaration[6141-6176]"
    }, {
      "left" : "private boolean mBouncer;",
      "right" : "private boolean mBouncer;",
      "info" : "FieldDeclaration[6181-6206]:FieldDeclaration[6181-6206]"
    }, {
      "left" : "private boolean mBootCompleted;",
      "right" : "private boolean mBootCompleted;",
      "info" : "FieldDeclaration[6211-6242]:FieldDeclaration[6211-6242]"
    }, {
      "left" : "private boolean mDeviceProvisioned;",
      "right" : "private boolean mDeviceProvisioned;",
      "info" : "FieldDeclaration[6281-6316]:FieldDeclaration[6281-6316]"
    }, {
      "left" : "private BatteryStatus mBatteryStatus;",
      "right" : "private BatteryStatus mBatteryStatus;",
      "info" : "FieldDeclaration[6344-6381]:FieldDeclaration[6344-6381]"
    }, {
      "left" : "private int mFailedAttempts = 0;",
      "right" : "private int mFailedAttempts = 0;",
      "info" : "FieldDeclaration[6412-6444]:FieldDeclaration[6412-6444]"
    }, {
      "left" : "private int mFailedBiometricUnlockAttempts = 0;",
      "right" : "private int mFailedBiometricUnlockAttempts = 0;",
      "info" : "FieldDeclaration[6449-6496]:FieldDeclaration[6449-6496]"
    }, {
      "left" : "private int mFailedFingerprintAttempts = 0;",
      "right" : "private int mFailedFingerprintAttempts = 0;",
      "info" : "FieldDeclaration[6501-6544]:FieldDeclaration[6501-6544]"
    }, {
      "left" : "private boolean mAlternateUnlockEnabled;",
      "right" : "private boolean mAlternateUnlockEnabled;",
      "info" : "FieldDeclaration[6550-6590]:FieldDeclaration[6550-6590]"
    }, {
      "left" : "private boolean mClockVisible;",
      "right" : "private boolean mClockVisible;",
      "info" : "FieldDeclaration[6596-6626]:FieldDeclaration[6596-6626]"
    }, {
      "left" : "private final ArrayList<WeakReference<KeyguardUpdateMonitorCallback>>\n            mCallbacks = Lists.newArrayList();",
      "right" : "private final ArrayList<WeakReference<KeyguardUpdateMonitorCallback>>\n            mCallbacks = Lists.newArrayList();",
      "info" : "FieldDeclaration[6632-6748]:FieldDeclaration[6632-6748]"
    }, {
      "left" : "private ContentObserver mDeviceProvisionedObserver;",
      "right" : "private ContentObserver mDeviceProvisionedObserver;",
      "info" : "FieldDeclaration[6753-6804]:FieldDeclaration[6753-6804]"
    }, {
      "left" : "private boolean mSwitchingUser;",
      "right" : "private boolean mSwitchingUser;",
      "info" : "FieldDeclaration[6810-6841]:FieldDeclaration[6810-6841]"
    }, {
      "left" : "private boolean mScreenOn;",
      "right" : "private boolean mScreenOn;",
      "info" : "FieldDeclaration[6847-6873]:FieldDeclaration[6847-6873]"
    }, {
      "left" : "private LockPatternUtils mLockPatternUtils;",
      "right" : "private LockPatternUtils mLockPatternUtils;",
      "info" : "FieldDeclaration[6879-6922]:FieldDeclaration[6879-6922]"
    }, {
      "left" : "private final Handler mHandler = new Handler() {\n        @Override\n        public void handleMessage(Message msg) {\n            switch (msg.what) {\n                case MSG_TIME_UPDATE:\n                    handleTimeUpdate();\n                    break;\n                case MSG_BATTERY_UPDATE:\n                    handleBatteryUpdate((BatteryStatus) msg.obj);\n                    break;\n                case MSG_SIM_STATE_CHANGE:\n                    handleSimStateChange(msg.arg1, msg.arg2, (State) msg.obj);\n                    break;\n                case MSG_RINGER_MODE_CHANGED:\n                    handleRingerModeChange(msg.arg1);\n                    break;\n                case MSG_PHONE_STATE_CHANGED:\n                    handlePhoneStateChanged((String) msg.obj);\n                    break;\n                case MSG_CLOCK_VISIBILITY_CHANGED:\n                    handleClockVisibilityChanged();\n                    break;\n                case MSG_DEVICE_PROVISIONED:\n                    handleDeviceProvisioned();\n                    break;\n                case MSG_DPM_STATE_CHANGED:\n                    handleDevicePolicyManagerStateChanged();\n                    break;\n                case MSG_USER_SWITCHING:\n                    handleUserSwitching(msg.arg1, (IRemoteCallback) msg.obj);\n                    break;\n                case MSG_USER_SWITCH_COMPLETE:\n                    handleUserSwitchComplete(msg.arg1);\n                    break;\n                case MSG_USER_REMOVED:\n                    handleUserRemoved(msg.arg1);\n                    break;\n                case MSG_KEYGUARD_VISIBILITY_CHANGED:\n                    handleKeyguardVisibilityChanged(msg.arg1);\n                    break;\n                case MSG_KEYGUARD_BOUNCER_CHANGED:\n                    handleKeyguardBouncerChanged(msg.arg1);\n                    break;\n                case MSG_BOOT_COMPLETED:\n                    handleBootCompleted();\n                    break;\n                case MSG_USER_INFO_CHANGED:\n                    handleUserInfoChanged(msg.arg1);\n                    break;\n                case MSG_REPORT_EMERGENCY_CALL_ACTION:\n                    handleReportEmergencyCallAction();\n                    break;\n                case MSG_SCREEN_TURNED_OFF:\n                    handleScreenTurnedOff(msg.arg1);\n                    break;\n                case MSG_SCREEN_TURNED_ON:\n                    handleScreenTurnedOn();\n                    break;\n                case MSG_AIRPLANE_MODE_CHANGED:\n                    handleAirplaneModeChanged(msg.arg1 != 0);\n                    break;\n                case MSG_FINGERPRINT_ACQUIRED:\n                    handleFingerprintAcquired(msg.arg1);\n                    break;\n                case MSG_FINGERPRINT_PROCESSED:\n                    handleFingerprintProcessed(msg.arg1);\n                    break;\n                case MSG_FACE_UNLOCK_STATE_CHANGED:\n                    handleFaceUnlockStateChanged(msg.arg1 != 0, msg.arg2);\n                    break;\n                case MSG_SERVICE_STATE_CHANGED:\n                    handleServiceStateChange(msg.arg1, (ServiceState) msg.obj);\n                    break;\n                case MSG_SIM_SUBSCRIPTION_INFO_CHANGED:\n                    handleSimSubscriptionInfoChanged();\n                    break;\n            }\n        }\n    };",
      "right" : "private final Handler mHandler = new Handler() {\n        @Override\n        public void handleMessage(Message msg) {\n            switch (msg.what) {\n                case MSG_TIME_UPDATE:\n                    handleTimeUpdate();\n                    break;\n                case MSG_BATTERY_UPDATE:\n                    handleBatteryUpdate((BatteryStatus) msg.obj);\n                    break;\n                case MSG_SIM_STATE_CHANGE:\n                    handleSimStateChange(msg.arg1, msg.arg2, (State) msg.obj);\n                    break;\n                case MSG_RINGER_MODE_CHANGED:\n                    handleRingerModeChange(msg.arg1);\n                    break;\n                case MSG_PHONE_STATE_CHANGED:\n                    handlePhoneStateChanged((String) msg.obj);\n                    break;\n                case MSG_CLOCK_VISIBILITY_CHANGED:\n                    handleClockVisibilityChanged();\n                    break;\n                case MSG_DEVICE_PROVISIONED:\n                    handleDeviceProvisioned();\n                    break;\n                case MSG_DPM_STATE_CHANGED:\n                    handleDevicePolicyManagerStateChanged();\n                    break;\n                case MSG_USER_SWITCHING:\n                    handleUserSwitching(msg.arg1, (IRemoteCallback) msg.obj);\n                    break;\n                case MSG_USER_SWITCH_COMPLETE:\n                    handleUserSwitchComplete(msg.arg1);\n                    break;\n                case MSG_USER_REMOVED:\n                    handleUserRemoved(msg.arg1);\n                    break;\n                case MSG_KEYGUARD_VISIBILITY_CHANGED:\n                    handleKeyguardVisibilityChanged(msg.arg1);\n                    break;\n                case MSG_KEYGUARD_BOUNCER_CHANGED:\n                    handleKeyguardBouncerChanged(msg.arg1);\n                    break;\n                case MSG_BOOT_COMPLETED:\n                    handleBootCompleted();\n                    break;\n                case MSG_USER_INFO_CHANGED:\n                    handleUserInfoChanged(msg.arg1);\n                    break;\n                case MSG_REPORT_EMERGENCY_CALL_ACTION:\n                    handleReportEmergencyCallAction();\n                    break;\n                case MSG_SCREEN_TURNED_OFF:\n                    handleScreenTurnedOff(msg.arg1);\n                    break;\n                case MSG_SCREEN_TURNED_ON:\n                    handleScreenTurnedOn();\n                    break;\n                case MSG_AIRPLANE_MODE_CHANGED:\n                    handleAirplaneModeChanged(msg.arg1 != 0);\n                    break;\n                case MSG_FINGERPRINT_ACQUIRED:\n                    handleFingerprintAcquired(msg.arg1);\n                    break;\n                case MSG_FINGERPRINT_PROCESSED:\n                    handleFingerprintProcessed(msg.arg1);\n                    break;\n                case MSG_FACE_UNLOCK_STATE_CHANGED:\n                    handleFaceUnlockStateChanged(msg.arg1 != 0, msg.arg2);\n                    break;\n                case MSG_SERVICE_STATE_CHANGED:\n                    handleServiceStateChange(msg.arg1, (ServiceState) msg.obj);\n                    break;\n                case MSG_SIM_SUBSCRIPTION_INFO_CHANGED:\n                    handleSimSubscriptionInfoChanged();\n                    break;\n            }\n        }\n    };",
      "info" : "FieldDeclaration[6928-10270]:FieldDeclaration[6928-10270]"
    }, {
      "left" : "public void handleMessage(Message msg)",
      "right" : "public void handleMessage(Message msg)",
      "info" : "MethodDeclaration[6985-10263]:MethodDeclaration[6985-10263]"
    }, {
      "left" : "private OnSubscriptionsChangedListener mSubscriptionListener =\n            new OnSubscriptionsChangedListener() {\n        @Override\n        public void onSubscriptionsChanged() {\n            mHandler.sendEmptyMessage(MSG_SIM_SUBSCRIPTION_INFO_CHANGED);\n        }\n    };",
      "right" : "private OnSubscriptionsChangedListener mSubscriptionListener =\n            new OnSubscriptionsChangedListener() {\n        @Override\n        public void onSubscriptionsChanged() {\n            mHandler.sendEmptyMessage(MSG_SIM_SUBSCRIPTION_INFO_CHANGED);\n        }\n    };",
      "info" : "FieldDeclaration[10276-10545]:FieldDeclaration[10276-10545]"
    }, {
      "left" : "public void onSubscriptionsChanged()",
      "right" : "public void onSubscriptionsChanged()",
      "info" : "MethodDeclaration[10398-10538]:MethodDeclaration[10398-10538]"
    }, {
      "left" : "private SparseBooleanArray mUserHasTrust = new SparseBooleanArray();",
      "right" : "private SparseBooleanArray mUserHasTrust = new SparseBooleanArray();",
      "info" : "FieldDeclaration[10551-10619]:FieldDeclaration[10551-10619]"
    }, {
      "left" : "private SparseBooleanArray mUserTrustIsManaged = new SparseBooleanArray();",
      "right" : "private SparseBooleanArray mUserTrustIsManaged = new SparseBooleanArray();",
      "info" : "FieldDeclaration[10624-10698]:FieldDeclaration[10624-10698]"
    }, {
      "left" : "private SparseBooleanArray mUserFingerprintRecognized = new SparseBooleanArray();",
      "right" : "private SparseBooleanArray mUserFingerprintRecognized = new SparseBooleanArray();",
      "info" : "FieldDeclaration[10703-10784]:FieldDeclaration[10703-10784]"
    }, {
      "left" : "private SparseBooleanArray mUserFaceUnlockRunning = new SparseBooleanArray();",
      "right" : "private SparseBooleanArray mUserFaceUnlockRunning = new SparseBooleanArray();",
      "info" : "FieldDeclaration[10789-10866]:FieldDeclaration[10789-10866]"
    }, {
      "left" : "public void onTrustChanged(boolean enabled, int userId, boolean initiatedByUser)",
      "right" : "public void onTrustChanged(boolean enabled, int userId, boolean initiatedByUser)",
      "info" : "MethodDeclaration[10872-11365]:MethodDeclaration[10872-11365]"
    }, {
      "left" : "protected void handleSimSubscriptionInfoChanged()",
      "right" : "protected void handleSimSubscriptionInfoChanged()",
      "info" : "MethodDeclaration[11371-13293]:MethodDeclaration[11371-13293]"
    }, {
      "left" : "List<SubscriptionInfo> getSubscriptionInfo(boolean forceReload)",
      "right" : "List<SubscriptionInfo> getSubscriptionInfo(boolean forceReload)",
      "info" : "MethodDeclaration[13299-13906]:MethodDeclaration[13299-13906]"
    }, {
      "left" : "public void onTrustManagedChanged(boolean managed, int userId)",
      "right" : "public void onTrustManagedChanged(boolean managed, int userId)",
      "info" : "MethodDeclaration[13912-14277]:MethodDeclaration[13912-14277]"
    }, {
      "left" : "private void onFingerprintAttemptFailed()",
      "right" : "private void onFingerprintAttemptFailed()",
      "info" : "MethodDeclaration[14283-14599]:MethodDeclaration[14283-14599]"
    }, {
      "left" : "private void onFingerprintRecognized(int userId)",
      "right" : "private void onFingerprintRecognized(int userId)",
      "info" : "MethodDeclaration[14605-14947]:MethodDeclaration[14605-14947]"
    }, {
      "left" : "private void handleFingerprintProcessed(int fingerprintId)",
      "right" : "private void handleFingerprintProcessed(int fingerprintId)",
      "info" : "MethodDeclaration[14953-16161]:MethodDeclaration[14953-16161]"
    }, {
      "left" : "private void handleFingerprintAcquired(int info)",
      "right" : "private void handleFingerprintAcquired(int info)",
      "info" : "MethodDeclaration[16167-16451]:MethodDeclaration[16167-16451]"
    }, {
      "left" : "private void handleFaceUnlockStateChanged(boolean running, int userId)",
      "right" : "private void handleFaceUnlockStateChanged(boolean running, int userId)",
      "info" : "MethodDeclaration[16457-16830]:MethodDeclaration[16457-16830]"
    }, {
      "left" : "public boolean isFaceUnlockRunning(int userId)",
      "right" : "public boolean isFaceUnlockRunning(int userId)",
      "info" : "MethodDeclaration[16836-16941]:MethodDeclaration[16836-16941]"
    }, {
      "left" : "private boolean isTrustDisabled(int userId)",
      "right" : "private boolean isTrustDisabled(int userId)",
      "info" : "MethodDeclaration[16947-17984]:MethodDeclaration[16947-17984]"
    }, {
      "left" : "private boolean isFingerprintDisabled(int userId)",
      "right" : "private boolean isFingerprintDisabled(int userId)",
      "info" : "MethodDeclaration[17990-18338]:MethodDeclaration[17990-18338]"
    }, {
      "left" : "public boolean getUserHasTrust(int userId)",
      "right" : "public boolean getUserHasTrust(int userId)",
      "info" : "MethodDeclaration[18344-18522]:MethodDeclaration[18344-18522]"
    }, {
      "left" : "public boolean getUserTrustIsManaged(int userId)",
      "right" : "public boolean getUserTrustIsManaged(int userId)",
      "info" : "MethodDeclaration[18528-18660]:MethodDeclaration[18528-18660]"
    }, {
      "left" : "DisplayClientState",
      "right" : "DisplayClientState",
      "info" : "TypeDeclaration[18666-18885]:TypeDeclaration[18666-18885]"
    }, {
      "left" : "public int clientGeneration;",
      "right" : "public int clientGeneration;",
      "info" : "FieldDeclaration[18708-18736]:FieldDeclaration[18708-18736]"
    }, {
      "left" : "public boolean clearing;",
      "right" : "public boolean clearing;",
      "info" : "FieldDeclaration[18745-18769]:FieldDeclaration[18745-18769]"
    }, {
      "left" : "public PendingIntent intent;",
      "right" : "public PendingIntent intent;",
      "info" : "FieldDeclaration[18778-18806]:FieldDeclaration[18778-18806]"
    }, {
      "left" : "public int playbackState;",
      "right" : "public int playbackState;",
      "info" : "FieldDeclaration[18815-18840]:FieldDeclaration[18815-18840]"
    }, {
      "left" : "public long playbackEventTime;",
      "right" : "public long playbackEventTime;",
      "info" : "FieldDeclaration[18849-18879]:FieldDeclaration[18849-18879]"
    }, {
      "left" : "private DisplayClientState mDisplayClientState = new DisplayClientState();",
      "right" : "private DisplayClientState mDisplayClientState = new DisplayClientState();",
      "info" : "FieldDeclaration[18891-18965]:FieldDeclaration[18891-18965]"
    }, {
      "left" : "private final BroadcastReceiver mBroadcastReceiver = new BroadcastReceiver() {\n\n        public void onReceive(Context context, Intent intent) {\n            final String action = intent.getAction();\n            if (DEBUG) Log.d(TAG, \"received broadcast \" + action);\n\n            if (Intent.ACTION_TIME_TICK.equals(action)\n                    || Intent.ACTION_TIME_CHANGED.equals(action)\n                    || Intent.ACTION_TIMEZONE_CHANGED.equals(action)) {\n                mHandler.sendEmptyMessage(MSG_TIME_UPDATE);\n            } else if (Intent.ACTION_BATTERY_CHANGED.equals(action)) {\n                final int status = intent.getIntExtra(EXTRA_STATUS, BATTERY_STATUS_UNKNOWN);\n                final int plugged = intent.getIntExtra(EXTRA_PLUGGED, 0);\n                final int level = intent.getIntExtra(EXTRA_LEVEL, 0);\n                final int health = intent.getIntExtra(EXTRA_HEALTH, BATTERY_HEALTH_UNKNOWN);\n                final Message msg = mHandler.obtainMessage(\n                        MSG_BATTERY_UPDATE, new BatteryStatus(status, level, plugged, health));\n                mHandler.sendMessage(msg);\n            } else if (TelephonyIntents.ACTION_SIM_STATE_CHANGED.equals(action)) {\n                SimData args = SimData.fromIntent(intent);\n                if (DEBUG_SIM_STATES) {\n                    Log.v(TAG, \"action \" + action\n                        + \" state: \" + intent.getStringExtra(IccCardConstants.INTENT_KEY_ICC_STATE)\n                        + \" slotId: \" + args.slotId + \" subid: \" + args.subId);\n                }\n                mHandler.obtainMessage(MSG_SIM_STATE_CHANGE, args.subId, args.slotId, args.simState)\n                        .sendToTarget();\n            } else if (AudioManager.RINGER_MODE_CHANGED_ACTION.equals(action)) {\n                mHandler.sendMessage(mHandler.obtainMessage(MSG_RINGER_MODE_CHANGED,\n                        intent.getIntExtra(AudioManager.EXTRA_RINGER_MODE, -1), 0));\n            } else if (TelephonyManager.ACTION_PHONE_STATE_CHANGED.equals(action)) {\n                String state = intent.getStringExtra(TelephonyManager.EXTRA_STATE);\n                mHandler.sendMessage(mHandler.obtainMessage(MSG_PHONE_STATE_CHANGED, state));\n            } else if (Intent.ACTION_USER_REMOVED.equals(action)) {\n                mHandler.sendMessage(mHandler.obtainMessage(MSG_USER_REMOVED,\n                       intent.getIntExtra(Intent.EXTRA_USER_HANDLE, 0), 0));\n            } else if (Intent.ACTION_AIRPLANE_MODE_CHANGED.equals(action)) {\n                boolean state = intent.getBooleanExtra(\"state\", false);\n                Message msg = mHandler.obtainMessage(MSG_AIRPLANE_MODE_CHANGED, state ? 1 : 0, 0);\n                msg.sendToTarget();\n            } else if (Intent.ACTION_BOOT_COMPLETED.equals(action)) {\n                dispatchBootCompleted();\n            } else if (TelephonyIntents.ACTION_SERVICE_STATE_CHANGED.equals(action)) {\n                int subId = intent.getIntExtra(PhoneConstants.SUBSCRIPTION_KEY,\n                        SubscriptionManager.INVALID_SUBSCRIPTION_ID);\n                ServiceState state = ServiceState.newFromBundle(intent.getExtras());\n                if (DEBUG) {\n                    Log.d(TAG, \"ACTION_SERVICE_STATE_CHANGED on sub \" + subId\n                            + \": serviceState: \" + state);\n                }\n                Message msg = mHandler.obtainMessage(MSG_SERVICE_STATE_CHANGED, subId, 0, state);\n                msg.sendToTarget();\n            }\n        }\n    };",
      "right" : "private final BroadcastReceiver mBroadcastReceiver = new BroadcastReceiver() {\n\n        public void onReceive(Context context, Intent intent) {\n            final String action = intent.getAction();\n            if (DEBUG) Log.d(TAG, \"received broadcast \" + action);\n\n            if (Intent.ACTION_TIME_TICK.equals(action)\n                    || Intent.ACTION_TIME_CHANGED.equals(action)\n                    || Intent.ACTION_TIMEZONE_CHANGED.equals(action)) {\n                mHandler.sendEmptyMessage(MSG_TIME_UPDATE);\n            } else if (Intent.ACTION_BATTERY_CHANGED.equals(action)) {\n                final int status = intent.getIntExtra(EXTRA_STATUS, BATTERY_STATUS_UNKNOWN);\n                final int plugged = intent.getIntExtra(EXTRA_PLUGGED, 0);\n                final int level = intent.getIntExtra(EXTRA_LEVEL, 0);\n                final int health = intent.getIntExtra(EXTRA_HEALTH, BATTERY_HEALTH_UNKNOWN);\n                final Message msg = mHandler.obtainMessage(\n                        MSG_BATTERY_UPDATE, new BatteryStatus(status, level, plugged, health));\n                mHandler.sendMessage(msg);\n            } else if (TelephonyIntents.ACTION_SIM_STATE_CHANGED.equals(action)) {\n                SimData args = SimData.fromIntent(intent);\n                if (DEBUG_SIM_STATES) {\n                    Log.v(TAG, \"action \" + action\n                        + \" state: \" + intent.getStringExtra(IccCardConstants.INTENT_KEY_ICC_STATE)\n                        + \" slotId: \" + args.slotId + \" subid: \" + args.subId);\n                }\n                mHandler.obtainMessage(MSG_SIM_STATE_CHANGE, args.subId, args.slotId, args.simState)\n                        .sendToTarget();\n            } else if (AudioManager.RINGER_MODE_CHANGED_ACTION.equals(action)) {\n                mHandler.sendMessage(mHandler.obtainMessage(MSG_RINGER_MODE_CHANGED,\n                        intent.getIntExtra(AudioManager.EXTRA_RINGER_MODE, -1), 0));\n            } else if (TelephonyManager.ACTION_PHONE_STATE_CHANGED.equals(action)) {\n                String state = intent.getStringExtra(TelephonyManager.EXTRA_STATE);\n                mHandler.sendMessage(mHandler.obtainMessage(MSG_PHONE_STATE_CHANGED, state));\n            } else if (Intent.ACTION_USER_REMOVED.equals(action)) {\n                mHandler.sendMessage(mHandler.obtainMessage(MSG_USER_REMOVED,\n                       intent.getIntExtra(Intent.EXTRA_USER_HANDLE, 0), 0));\n            } else if (Intent.ACTION_AIRPLANE_MODE_CHANGED.equals(action)) {\n                boolean state = intent.getBooleanExtra(\"state\", false);\n                Message msg = mHandler.obtainMessage(MSG_AIRPLANE_MODE_CHANGED, state ? 1 : 0, 0);\n                msg.sendToTarget();\n            } else if (Intent.ACTION_BOOT_COMPLETED.equals(action)) {\n                dispatchBootCompleted();\n            } else if (TelephonyIntents.ACTION_SERVICE_STATE_CHANGED.equals(action)) {\n                int subId = intent.getIntExtra(PhoneConstants.SUBSCRIPTION_KEY,\n                        SubscriptionManager.INVALID_SUBSCRIPTION_ID);\n                ServiceState state = ServiceState.newFromBundle(intent.getExtras());\n                if (DEBUG) {\n                    Log.d(TAG, \"ACTION_SERVICE_STATE_CHANGED on sub \" + subId\n                            + \": serviceState: \" + state);\n                }\n                Message msg = mHandler.obtainMessage(MSG_SERVICE_STATE_CHANGED, subId, 0, state);\n                msg.sendToTarget();\n            }\n        }\n    };",
      "info" : "FieldDeclaration[18971-22463]:FieldDeclaration[18971-22463]"
    }, {
      "left" : "public void onReceive(Context context, Intent intent)",
      "right" : "public void onReceive(Context context, Intent intent)",
      "info" : "MethodDeclaration[19059-22456]:MethodDeclaration[19059-22456]"
    }, {
      "left" : "private final BroadcastReceiver mBroadcastAllReceiver = new BroadcastReceiver() {\n\n        public void onReceive(Context context, Intent intent) {\n            final String action = intent.getAction();\n            if (AlarmManager.ACTION_NEXT_ALARM_CLOCK_CHANGED.equals(action)) {\n                mHandler.sendEmptyMessage(MSG_TIME_UPDATE);\n            } else if (Intent.ACTION_USER_INFO_CHANGED.equals(action)) {\n                mHandler.sendMessage(mHandler.obtainMessage(MSG_USER_INFO_CHANGED,\n                        intent.getIntExtra(Intent.EXTRA_USER_HANDLE, getSendingUserId()), 0));\n            } else if (ACTION_FACE_UNLOCK_STARTED.equals(action)) {\n                mHandler.sendMessage(mHandler.obtainMessage(MSG_FACE_UNLOCK_STATE_CHANGED, 1,\n                        getSendingUserId()));\n            } else if (ACTION_FACE_UNLOCK_STOPPED.equals(action)) {\n                mHandler.sendMessage(mHandler.obtainMessage(MSG_FACE_UNLOCK_STATE_CHANGED, 0,\n                        getSendingUserId()));\n            } else if (DevicePolicyManager.ACTION_DEVICE_POLICY_MANAGER_STATE_CHANGED\n                    .equals(action)) {\n                mHandler.sendEmptyMessage(MSG_DPM_STATE_CHANGED);\n            }\n        }\n    };",
      "right" : "private final BroadcastReceiver mBroadcastAllReceiver = new BroadcastReceiver() {\n\n        public void onReceive(Context context, Intent intent) {\n            final String action = intent.getAction();\n            if (AlarmManager.ACTION_NEXT_ALARM_CLOCK_CHANGED.equals(action)) {\n                mHandler.sendEmptyMessage(MSG_TIME_UPDATE);\n            } else if (Intent.ACTION_USER_INFO_CHANGED.equals(action)) {\n                mHandler.sendMessage(mHandler.obtainMessage(MSG_USER_INFO_CHANGED,\n                        intent.getIntExtra(Intent.EXTRA_USER_HANDLE, getSendingUserId()), 0));\n            } else if (ACTION_FACE_UNLOCK_STARTED.equals(action)) {\n                mHandler.sendMessage(mHandler.obtainMessage(MSG_FACE_UNLOCK_STATE_CHANGED, 1,\n                        getSendingUserId()));\n            } else if (ACTION_FACE_UNLOCK_STOPPED.equals(action)) {\n                mHandler.sendMessage(mHandler.obtainMessage(MSG_FACE_UNLOCK_STATE_CHANGED, 0,\n                        getSendingUserId()));\n            } else if (DevicePolicyManager.ACTION_DEVICE_POLICY_MANAGER_STATE_CHANGED\n                    .equals(action)) {\n                mHandler.sendEmptyMessage(MSG_DPM_STATE_CHANGED);\n            }\n        }\n    };",
      "info" : "FieldDeclaration[22469-23697]:FieldDeclaration[22469-23697]"
    }, {
      "left" : "public void onReceive(Context context, Intent intent)",
      "right" : "public void onReceive(Context context, Intent intent)",
      "info" : "MethodDeclaration[22560-23690]:MethodDeclaration[22560-23690]"
    }, {
      "left" : "private FingerprintManagerReceiver mFingerprintManagerReceiver =\n            new FingerprintManagerReceiver() {\n        @Override\n        public void onProcessed(int fingerprintId) {\n            mHandler.obtainMessage(MSG_FINGERPRINT_PROCESSED, fingerprintId, 0).sendToTarget();\n        };\n\n        @Override\n        public void onAcquired(int info) {\n            mHandler.obtainMessage(MSG_FINGERPRINT_ACQUIRED, info, 0).sendToTarget();\n        }\n\n        @Override\n        public void onError(int error) {\n            if (DEBUG) Log.w(TAG, \"FingerprintManager reported error: \" + error);\n        }\n    };",
      "right" : "private FingerprintManagerReceiver mFingerprintManagerReceiver =\n            new FingerprintManagerReceiver() {\n        @Override\n        public void onProcessed(int fingerprintId) {\n            mHandler.obtainMessage(MSG_FINGERPRINT_PROCESSED, fingerprintId, 0).sendToTarget();\n        };\n\n        @Override\n        public void onAcquired(int info) {\n            mHandler.obtainMessage(MSG_FINGERPRINT_ACQUIRED, info, 0).sendToTarget();\n        }\n\n        @Override\n        public void onError(int error) {\n            if (DEBUG) Log.w(TAG, \"FingerprintManager reported error: \" + error);\n        }\n    };",
      "info" : "FieldDeclaration[23702-24308]:FieldDeclaration[23702-24308]"
    }, {
      "left" : "public void onProcessed(int fingerprintId)",
      "right" : "public void onProcessed(int fingerprintId)",
      "info" : "MethodDeclaration[23822-23990]:MethodDeclaration[23822-23990]"
    }, {
      "left" : "public void onAcquired(int info)",
      "right" : "public void onAcquired(int info)",
      "info" : "MethodDeclaration[24001-24149]:MethodDeclaration[24001-24149]"
    }, {
      "left" : "public void onError(int error)",
      "right" : "public void onError(int error)",
      "info" : "MethodDeclaration[24159-24301]:MethodDeclaration[24159-24301]"
    }, {
      "left" : "SimData",
      "right" : "SimData",
      "info" : "TypeDeclaration[24314-27866]:TypeDeclaration[24314-27866]"
    }, {
      "left" : "public State simState;",
      "right" : "public State simState;",
      "info" : "FieldDeclaration[24736-24758]:FieldDeclaration[24736-24758]"
    }, {
      "left" : "public int slotId;",
      "right" : "public int slotId;",
      "info" : "FieldDeclaration[24767-24785]:FieldDeclaration[24767-24785]"
    }, {
      "left" : "public int subId;",
      "right" : "public int subId;",
      "info" : "FieldDeclaration[24794-24811]:FieldDeclaration[24794-24811]"
    }, {
      "left" : "SimData(IccCardConstants.State state, int slotId, int subId)",
      "right" : "SimData(IccCardConstants.State state, int slotId, int subId)",
      "info" : "MethodDeclaration[24821-24994]:MethodDeclaration[24821-24994]"
    }, {
      "left" : "static SimData fromIntent(Intent intent)",
      "right" : "static SimData fromIntent(Intent intent)",
      "info" : "MethodDeclaration[25004-27719]:MethodDeclaration[25004-27719]"
    }, {
      "left" : "public String toString()",
      "right" : "public String toString()",
      "info" : "MethodDeclaration[27729-27860]:MethodDeclaration[27729-27860]"
    }, {
      "left" : "BatteryStatus",
      "right" : "BatteryStatus",
      "info" : "TypeDeclaration[27872-29318]:TypeDeclaration[27872-29318]"
    }, {
      "left" : "public final int status;",
      "right" : "public final int status;",
      "info" : "FieldDeclaration[27916-27940]:FieldDeclaration[27916-27940]"
    }, {
      "left" : "public final int level;",
      "right" : "public final int level;",
      "info" : "FieldDeclaration[27949-27972]:FieldDeclaration[27949-27972]"
    }, {
      "left" : "public final int plugged;",
      "right" : "public final int plugged;",
      "info" : "FieldDeclaration[27981-28006]:FieldDeclaration[27981-28006]"
    }, {
      "left" : "public final int health;",
      "right" : "public final int health;",
      "info" : "FieldDeclaration[28015-28039]:FieldDeclaration[28015-28039]"
    }, {
      "left" : "public BatteryStatus(int status, int level, int plugged, int health)",
      "right" : "public BatteryStatus(int status, int level, int plugged, int health)",
      "info" : "MethodDeclaration[28048-28264]:MethodDeclaration[28048-28264]"
    }, {
      "left" : "public boolean isPluggedIn()",
      "right" : "public boolean isPluggedIn()",
      "info" : "MethodDeclaration[28274-28681]:MethodDeclaration[28274-28681]"
    }, {
      "left" : "public boolean isCharged()",
      "right" : "public boolean isCharged()",
      "info" : "MethodDeclaration[28691-29085]:MethodDeclaration[28691-29085]"
    }, {
      "left" : "public boolean isBatteryLow()",
      "right" : "public boolean isBatteryLow()",
      "info" : "MethodDeclaration[29095-29311]:MethodDeclaration[29095-29311]"
    }, {
      "left" : "public static KeyguardUpdateMonitor getInstance(Context context)",
      "right" : "public static KeyguardUpdateMonitor getInstance(Context context)",
      "info" : "MethodDeclaration[29324-29525]:MethodDeclaration[29324-29525]"
    }, {
      "left" : "protected void handleScreenTurnedOn()",
      "right" : "protected void handleScreenTurnedOn()",
      "info" : "MethodDeclaration[29531-29873]:MethodDeclaration[29531-29873]"
    }, {
      "left" : "protected void handleScreenTurnedOff(int arg1)",
      "right" : "protected void handleScreenTurnedOff(int arg1)",
      "info" : "MethodDeclaration[29879-30269]:MethodDeclaration[29879-30269]"
    }, {
      "left" : "public void dispatchSetBackground(Bitmap bmp)",
      "right" : "public void dispatchSetBackground(Bitmap bmp)",
      "info" : "MethodDeclaration[30275-30703]:MethodDeclaration[30275-30703]"
    }, {
      "left" : "private void handleAirplaneModeChanged(boolean on)",
      "right" : "private void handleAirplaneModeChanged(boolean on)",
      "info" : "MethodDeclaration[30709-30993]:MethodDeclaration[30709-30993]"
    }, {
      "left" : "private void handleUserInfoChanged(int userId)",
      "right" : "private void handleUserInfoChanged(int userId)",
      "info" : "MethodDeclaration[30999-31279]:MethodDeclaration[30999-31279]"
    }, {
      "left" : "private KeyguardUpdateMonitor(Context context)",
      "right" : "private KeyguardUpdateMonitor(Context context)",
      "info" : "MethodDeclaration[31285-34778]:MethodDeclaration[31285-34778]"
    }, {
      "left" : "public void onUserSwitching(int newUserId, IRemoteCallback reply)",
      "right" : "public void onUserSwitching(int newUserId, IRemoteCallback reply)",
      "info" : "MethodDeclaration[33675-34004]:MethodDeclaration[33675-34004]"
    }, {
      "left" : "public void onUserSwitchComplete(int newUserId) throws RemoteException",
      "right" : "public void onUserSwitchComplete(int newUserId) throws RemoteException",
      "info" : "MethodDeclaration[34029-34363]:MethodDeclaration[34029-34363]"
    }, {
      "left" : "private boolean isDeviceProvisionedInSettingsDb()",
      "right" : "private boolean isDeviceProvisionedInSettingsDb()",
      "info" : "MethodDeclaration[34784-34971]:MethodDeclaration[34784-34971]"
    }, {
      "left" : "private void watchForDeviceProvisioning()",
      "right" : "private void watchForDeviceProvisioning()",
      "info" : "MethodDeclaration[34977-36170]:MethodDeclaration[34977-36170]"
    }, {
      "left" : "public void onChange(boolean selfChange)",
      "right" : "public void onChange(boolean selfChange)",
      "info" : "MethodDeclaration[35102-35518]:MethodDeclaration[35102-35518]"
    }, {
      "left" : "protected void handleDevicePolicyManagerStateChanged()",
      "right" : "protected void handleDevicePolicyManagerStateChanged()",
      "info" : "MethodDeclaration[36176-36540]:MethodDeclaration[36176-36540]"
    }, {
      "left" : "protected void handleUserSwitching(int userId, IRemoteCallback reply)",
      "right" : "protected void handleUserSwitching(int userId, IRemoteCallback reply)",
      "info" : "MethodDeclaration[36546-37003]:MethodDeclaration[36546-37003]"
    }, {
      "left" : "protected void handleUserSwitchComplete(int userId)",
      "right" : "protected void handleUserSwitchComplete(int userId)",
      "info" : "MethodDeclaration[37009-37361]:MethodDeclaration[37009-37361]"
    }, {
      "left" : "public void dispatchBootCompleted()",
      "right" : "public void dispatchBootCompleted()",
      "info" : "MethodDeclaration[37367-37767]:MethodDeclaration[37367-37767]"
    }, {
      "left" : "protected void handleBootCompleted()",
      "right" : "protected void handleBootCompleted()",
      "info" : "MethodDeclaration[37773-38160]:MethodDeclaration[37773-38160]"
    }, {
      "left" : "public boolean hasBootCompleted()",
      "right" : "public boolean hasBootCompleted()",
      "info" : "MethodDeclaration[38166-38365]:MethodDeclaration[38166-38365]"
    }, {
      "left" : "protected void handleUserRemoved(int userId)",
      "right" : "protected void handleUserRemoved(int userId)",
      "info" : "MethodDeclaration[38371-38701]:MethodDeclaration[38371-38701]"
    }, {
      "left" : "protected void handleDeviceProvisioned()",
      "right" : "protected void handleDeviceProvisioned()",
      "info" : "MethodDeclaration[38707-39296]:MethodDeclaration[38707-39296]"
    }, {
      "left" : "protected void handlePhoneStateChanged(String newState)",
      "right" : "protected void handlePhoneStateChanged(String newState)",
      "info" : "MethodDeclaration[39302-40151]:MethodDeclaration[39302-40151]"
    }, {
      "left" : "protected void handleRingerModeChange(int mode)",
      "right" : "protected void handleRingerModeChange(int mode)",
      "info" : "MethodDeclaration[40157-40598]:MethodDeclaration[40157-40598]"
    }, {
      "left" : "private void handleTimeUpdate()",
      "right" : "private void handleTimeUpdate()",
      "info" : "MethodDeclaration[40604-40965]:MethodDeclaration[40604-40965]"
    }, {
      "left" : "private void handleBatteryUpdate(BatteryStatus status)",
      "right" : "private void handleBatteryUpdate(BatteryStatus status)",
      "info" : "MethodDeclaration[40971-41582]:MethodDeclaration[40971-41582]"
    }, {
      "left" : "private void handleSimStateChange(int subId, int slotId, State state)",
      "right" : "private void handleSimStateChange(int subId, int slotId, State state)",
      "info" : "MethodDeclaration[41588-42863]:MethodDeclaration[41588-42863]"
    }, {
      "left" : "private void handleServiceStateChange(int subId, ServiceState state)",
      "right" : "private void handleServiceStateChange(int subId, ServiceState state)",
      "info" : "MethodDeclaration[42869-43757]:MethodDeclaration[42869-43757]"
    }, {
      "left" : "private void handleClockVisibilityChanged()",
      "right" : "private void handleClockVisibilityChanged()",
      "info" : "MethodDeclaration[43763-44174]:MethodDeclaration[43763-44174]"
    }, {
      "left" : "private void handleKeyguardVisibilityChanged(int showing)",
      "right" : "private void handleKeyguardVisibilityChanged(int showing)",
      "info" : "MethodDeclaration[44180-44725]:MethodDeclaration[44180-44725]"
    }, {
      "left" : "private void handleKeyguardBouncerChanged(int bouncer)",
      "right" : "private void handleKeyguardBouncerChanged(int bouncer)",
      "info" : "MethodDeclaration[44731-45300]:MethodDeclaration[44731-45300]"
    }, {
      "left" : "private void handleReportEmergencyCallAction()",
      "right" : "private void handleReportEmergencyCallAction()",
      "info" : "MethodDeclaration[45306-45656]:MethodDeclaration[45306-45656]"
    }, {
      "left" : "public boolean isKeyguardVisible()",
      "right" : "public boolean isKeyguardVisible()",
      "info" : "MethodDeclaration[45662-45739]:MethodDeclaration[45662-45739]"
    }, {
      "left" : "public boolean isKeyguardBouncer()",
      "right" : "public boolean isKeyguardBouncer()",
      "info" : "MethodDeclaration[45745-45889]:MethodDeclaration[45745-45889]"
    }, {
      "left" : "public boolean isSwitchingUser()",
      "right" : "public boolean isSwitchingUser()",
      "info" : "MethodDeclaration[45895-45966]:MethodDeclaration[45895-45966]"
    }, {
      "left" : "private static boolean isBatteryUpdateInteresting(BatteryStatus old, BatteryStatus current)",
      "right" : "private static boolean isBatteryUpdateInteresting(BatteryStatus old, BatteryStatus current)",
      "info" : "MethodDeclaration[45972-46842]:MethodDeclaration[45972-46842]"
    }, {
      "left" : "public void removeCallback(KeyguardUpdateMonitorCallback callback)",
      "right" : "public void removeCallback(KeyguardUpdateMonitorCallback callback)",
      "info" : "MethodDeclaration[46848-47286]:MethodDeclaration[46848-47286]"
    }, {
      "left" : "public void registerCallback(KeyguardUpdateMonitorCallback callback)",
      "right" : "public void registerCallback(KeyguardUpdateMonitorCallback callback)",
      "info" : "MethodDeclaration[47292-48121]:MethodDeclaration[47292-48121]"
    }, {
      "left" : "private void sendUpdates(KeyguardUpdateMonitorCallback callback)",
      "right" : "private void sendUpdates(KeyguardUpdateMonitorCallback callback)",
      "info" : "MethodDeclaration[48127-48938]:MethodDeclaration[48127-48938]"
    }, {
      "left" : "public void sendKeyguardVisibilityChanged(boolean showing)",
      "right" : "public void sendKeyguardVisibilityChanged(boolean showing)",
      "info" : "MethodDeclaration[48944-49246]:MethodDeclaration[48944-49246]"
    }, {
      "left" : "public void sendKeyguardBouncerChanged(boolean showingBouncer)",
      "right" : "public void sendKeyguardBouncerChanged(boolean showingBouncer)",
      "info" : "MethodDeclaration[49252-49629]:MethodDeclaration[49252-49629]"
    }, {
      "left" : "public void reportClockVisible(boolean visible)",
      "right" : "public void reportClockVisible(boolean visible)",
      "info" : "MethodDeclaration[49635-49800]:MethodDeclaration[49635-49800]"
    }, {
      "left" : "public void reportSimUnlocked(int subId)",
      "right" : "public void reportSimUnlocked(int subId)",
      "info" : "MethodDeclaration[49806-50337]:MethodDeclaration[49806-50337]"
    }, {
      "left" : "public void reportEmergencyCallAction(boolean bypassHandler)",
      "right" : "public void reportEmergencyCallAction(boolean bypassHandler)",
      "info" : "MethodDeclaration[50343-50865]:MethodDeclaration[50343-50865]"
    }, {
      "left" : "public boolean isDeviceProvisioned()",
      "right" : "public boolean isDeviceProvisioned()",
      "info" : "MethodDeclaration[50871-51074]:MethodDeclaration[50871-51074]"
    }, {
      "left" : "public int getFailedUnlockAttempts()",
      "right" : "public int getFailedUnlockAttempts()",
      "info" : "MethodDeclaration[51080-51156]:MethodDeclaration[51080-51156]"
    }, {
      "left" : "public void startFingerAuthIfUsingFingerprint()",
      "right" : "public void startFingerAuthIfUsingFingerprint()",
      "info" : "MethodDeclaration[51328-51672]:MethodDeclaration[51589-51933]"
    }, {
      "left" : "public void stopAuthenticatingFingerprint()",
      "right" : "public void stopAuthenticatingFingerprint()",
      "info" : "MethodDeclaration[51678-51998]:MethodDeclaration[51939-52259]"
    }, {
      "left" : "public void clearFingerprintRecognized()",
      "right" : "public void clearFingerprintRecognized()",
      "info" : "MethodDeclaration[52004-52096]:MethodDeclaration[52265-52357]"
    }, {
      "left" : "public void reportFailedUnlockAttempt()",
      "right" : "public void reportFailedUnlockAttempt()",
      "info" : "MethodDeclaration[52102-52176]:MethodDeclaration[52472-52546]"
    }, {
      "left" : "public boolean isClockVisible()",
      "right" : "public boolean isClockVisible()",
      "info" : "MethodDeclaration[52182-52251]:MethodDeclaration[52552-52621]"
    }, {
      "left" : "public int getPhoneState()",
      "right" : "public int getPhoneState()",
      "info" : "MethodDeclaration[52257-52319]:MethodDeclaration[52627-52689]"
    }, {
      "left" : "public void reportFailedBiometricUnlockAttempt()",
      "right" : "public void reportFailedBiometricUnlockAttempt()",
      "info" : "MethodDeclaration[52325-52423]:MethodDeclaration[52695-52793]"
    }, {
      "left" : "public boolean getMaxBiometricUnlockAttemptsReached()",
      "right" : "public boolean getMaxBiometricUnlockAttemptsReached()",
      "info" : "MethodDeclaration[52429-52587]:MethodDeclaration[52799-52957]"
    }, {
      "left" : "public boolean isMaxFingerprintAttemptsReached()",
      "right" : "public boolean isMaxFingerprintAttemptsReached()",
      "info" : "MethodDeclaration[52593-52744]:MethodDeclaration[52963-53114]"
    }, {
      "left" : "public boolean isAlternateUnlockEnabled()",
      "right" : "public boolean isAlternateUnlockEnabled()",
      "info" : "MethodDeclaration[52750-52839]:MethodDeclaration[53120-53209]"
    }, {
      "left" : "public void setAlternateUnlockEnabled(boolean enabled)",
      "right" : "public void setAlternateUnlockEnabled(boolean enabled)",
      "info" : "MethodDeclaration[52845-52950]:MethodDeclaration[53215-53320]"
    }, {
      "left" : "public boolean isSimPinSecure()",
      "right" : "public boolean isSimPinSecure()",
      "info" : "MethodDeclaration[52956-53237]:MethodDeclaration[53326-53607]"
    }, {
      "left" : "public boolean isSimPinVoiceSecure()",
      "right" : "public boolean isSimPinVoiceSecure()",
      "info" : "MethodDeclaration[53243-53371]:MethodDeclaration[53613-53741]"
    }, {
      "left" : "public State getSimState(int subId)",
      "right" : "public State getSimState(int subId)",
      "info" : "MethodDeclaration[53377-53575]:MethodDeclaration[53747-53945]"
    }, {
      "left" : "public ServiceState getServiceState(int subId)",
      "right" : "public ServiceState getServiceState(int subId)",
      "info" : "MethodDeclaration[53581-53677]:MethodDeclaration[53951-54047]"
    }, {
      "left" : "private boolean refreshSimState(int subId, int slotId)",
      "right" : "private boolean refreshSimState(int subId, int slotId)",
      "info" : "MethodDeclaration[53683-54922]:MethodDeclaration[54053-55292]"
    }, {
      "left" : "public static boolean isSimPinSecure(IccCardConstants.State state)",
      "right" : "public static boolean isSimPinSecure(IccCardConstants.State state)",
      "info" : "MethodDeclaration[54928-55192]:MethodDeclaration[55298-55562]"
    }, {
      "left" : "public DisplayClientState getCachedDisplayClientState()",
      "right" : "public DisplayClientState getCachedDisplayClientState()",
      "info" : "MethodDeclaration[55198-55297]:MethodDeclaration[55568-55667]"
    }, {
      "left" : "public void dispatchScreenTurnedOn()",
      "right" : "public void dispatchScreenTurnedOn()",
      "info" : "MethodDeclaration[55435-55606]:MethodDeclaration[55805-55976]"
    }, {
      "left" : "public void dispatchScreenTurndOff(int why)",
      "right" : "public void dispatchScreenTurndOff(int why)",
      "info" : "MethodDeclaration[55612-55818]:MethodDeclaration[55982-56188]"
    }, {
      "left" : "public boolean isScreenOn()",
      "right" : "public boolean isScreenOn()",
      "info" : "MethodDeclaration[55824-55885]:MethodDeclaration[56194-56255]"
    }, {
      "left" : "public int getNextSubIdForState(State state)",
      "right" : "public int getNextSubIdForState(State state)",
      "info" : "MethodDeclaration[55891-56793]:MethodDeclaration[56261-57163]"
    }, {
      "left" : "public int getNumPhones()",
      "right" : "public int getNumPhones()",
      "info" : "MethodDeclaration[56799-56972]:MethodDeclaration[57169-57342]"
    } ],
    "mappings" : [
 {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[6985-6994]:MarkerAnnotation[6985-6994]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[7003-7009]:Modifier[7003-7009]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[7010-7014]:PrimitiveType[7010-7014]"
    }, {
      "left" : "handleMessage",
      "right" : "handleMessage",
      "info" : "SimpleName[7015-7028]:SimpleName[7015-7028]"
    }, {
      "left" : "Message msg",
      "right" : "Message msg",
      "info" : "SingleVariableDeclaration[7029-7040]:SingleVariableDeclaration[7029-7040]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7042-10263]:Block[7042-10263]"
    }, {
      "left" : "switch (msg.what) {\n                case MSG_TIME_UPDATE:\n                    handleTimeUpdate();\n                    break;\n                case MSG_BATTERY_UPDATE:\n                    handleBatteryUpdate((BatteryStatus) msg.obj);\n                    break;\n                case MSG_SIM_STATE_CHANGE:\n                    handleSimStateChange(msg.arg1, msg.arg2, (State) msg.obj);\n                    break;\n                case MSG_RINGER_MODE_CHANGED:\n                    handleRingerModeChange(msg.arg1);\n                    break;\n                case MSG_PHONE_STATE_CHANGED:\n                    handlePhoneStateChanged((String) msg.obj);\n                    break;\n                case MSG_CLOCK_VISIBILITY_CHANGED:\n                    handleClockVisibilityChanged();\n                    break;\n                case MSG_DEVICE_PROVISIONED:\n                    handleDeviceProvisioned();\n                    break;\n                case MSG_DPM_STATE_CHANGED:\n                    handleDevicePolicyManagerStateChanged();\n                    break;\n                case MSG_USER_SWITCHING:\n                    handleUserSwitching(msg.arg1, (IRemoteCallback) msg.obj);\n                    break;\n                case MSG_USER_SWITCH_COMPLETE:\n                    handleUserSwitchComplete(msg.arg1);\n                    break;\n                case MSG_USER_REMOVED:\n                    handleUserRemoved(msg.arg1);\n                    break;\n                case MSG_KEYGUARD_VISIBILITY_CHANGED:\n                    handleKeyguardVisibilityChanged(msg.arg1);\n                    break;\n                case MSG_KEYGUARD_BOUNCER_CHANGED:\n                    handleKeyguardBouncerChanged(msg.arg1);\n                    break;\n                case MSG_BOOT_COMPLETED:\n                    handleBootCompleted();\n                    break;\n                case MSG_USER_INFO_CHANGED:\n                    handleUserInfoChanged(msg.arg1);\n                    break;\n                case MSG_REPORT_EMERGENCY_CALL_ACTION:\n                    handleReportEmergencyCallAction();\n                    break;\n                case MSG_SCREEN_TURNED_OFF:\n                    handleScreenTurnedOff(msg.arg1);\n                    break;\n                case MSG_SCREEN_TURNED_ON:\n                    handleScreenTurnedOn();\n                    break;\n                case MSG_AIRPLANE_MODE_CHANGED:\n                    handleAirplaneModeChanged(msg.arg1 != 0);\n                    break;\n                case MSG_FINGERPRINT_ACQUIRED:\n                    handleFingerprintAcquired(msg.arg1);\n                    break;\n                case MSG_FINGERPRINT_PROCESSED:\n                    handleFingerprintProcessed(msg.arg1);\n                    break;\n                case MSG_FACE_UNLOCK_STATE_CHANGED:\n                    handleFaceUnlockStateChanged(msg.arg1 != 0, msg.arg2);\n                    break;\n                case MSG_SERVICE_STATE_CHANGED:\n                    handleServiceStateChange(msg.arg1, (ServiceState) msg.obj);\n                    break;\n                case MSG_SIM_SUBSCRIPTION_INFO_CHANGED:\n                    handleSimSubscriptionInfoChanged();\n                    break;\n            }",
      "right" : "switch (msg.what) {\n                case MSG_TIME_UPDATE:\n                    handleTimeUpdate();\n                    break;\n                case MSG_BATTERY_UPDATE:\n                    handleBatteryUpdate((BatteryStatus) msg.obj);\n                    break;\n                case MSG_SIM_STATE_CHANGE:\n                    handleSimStateChange(msg.arg1, msg.arg2, (State) msg.obj);\n                    break;\n                case MSG_RINGER_MODE_CHANGED:\n                    handleRingerModeChange(msg.arg1);\n                    break;\n                case MSG_PHONE_STATE_CHANGED:\n                    handlePhoneStateChanged((String) msg.obj);\n                    break;\n                case MSG_CLOCK_VISIBILITY_CHANGED:\n                    handleClockVisibilityChanged();\n                    break;\n                case MSG_DEVICE_PROVISIONED:\n                    handleDeviceProvisioned();\n                    break;\n                case MSG_DPM_STATE_CHANGED:\n                    handleDevicePolicyManagerStateChanged();\n                    break;\n                case MSG_USER_SWITCHING:\n                    handleUserSwitching(msg.arg1, (IRemoteCallback) msg.obj);\n                    break;\n                case MSG_USER_SWITCH_COMPLETE:\n                    handleUserSwitchComplete(msg.arg1);\n                    break;\n                case MSG_USER_REMOVED:\n                    handleUserRemoved(msg.arg1);\n                    break;\n                case MSG_KEYGUARD_VISIBILITY_CHANGED:\n                    handleKeyguardVisibilityChanged(msg.arg1);\n                    break;\n                case MSG_KEYGUARD_BOUNCER_CHANGED:\n                    handleKeyguardBouncerChanged(msg.arg1);\n                    break;\n                case MSG_BOOT_COMPLETED:\n                    handleBootCompleted();\n                    break;\n                case MSG_USER_INFO_CHANGED:\n                    handleUserInfoChanged(msg.arg1);\n                    break;\n                case MSG_REPORT_EMERGENCY_CALL_ACTION:\n                    handleReportEmergencyCallAction();\n                    break;\n                case MSG_SCREEN_TURNED_OFF:\n                    handleScreenTurnedOff(msg.arg1);\n                    break;\n                case MSG_SCREEN_TURNED_ON:\n                    handleScreenTurnedOn();\n                    break;\n                case MSG_AIRPLANE_MODE_CHANGED:\n                    handleAirplaneModeChanged(msg.arg1 != 0);\n                    break;\n                case MSG_FINGERPRINT_ACQUIRED:\n                    handleFingerprintAcquired(msg.arg1);\n                    break;\n                case MSG_FINGERPRINT_PROCESSED:\n                    handleFingerprintProcessed(msg.arg1);\n                    break;\n                case MSG_FACE_UNLOCK_STATE_CHANGED:\n                    handleFaceUnlockStateChanged(msg.arg1 != 0, msg.arg2);\n                    break;\n                case MSG_SERVICE_STATE_CHANGED:\n                    handleServiceStateChange(msg.arg1, (ServiceState) msg.obj);\n                    break;\n                case MSG_SIM_SUBSCRIPTION_INFO_CHANGED:\n                    handleSimSubscriptionInfoChanged();\n                    break;\n            }",
      "info" : "SwitchStatement[7056-10253]:SwitchStatement[7056-10253]"
    }, {
      "left" : "case MSG_TIME_UPDATE:",
      "right" : "case MSG_TIME_UPDATE:",
      "info" : "SwitchCase[7092-7113]:SwitchCase[7092-7113]"
    }, {
      "left" : "handleTimeUpdate();",
      "right" : "handleTimeUpdate();",
      "info" : "ExpressionStatement[7134-7153]:ExpressionStatement[7134-7153]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[7174-7180]:BreakStatement[7174-7180]"
    }, {
      "left" : "case MSG_BATTERY_UPDATE:",
      "right" : "case MSG_BATTERY_UPDATE:",
      "info" : "SwitchCase[7197-7221]:SwitchCase[7197-7221]"
    }, {
      "left" : "handleBatteryUpdate((BatteryStatus) msg.obj);",
      "right" : "handleBatteryUpdate((BatteryStatus) msg.obj);",
      "info" : "ExpressionStatement[7242-7287]:ExpressionStatement[7242-7287]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[7308-7314]:BreakStatement[7308-7314]"
    }, {
      "left" : "case MSG_SIM_STATE_CHANGE:",
      "right" : "case MSG_SIM_STATE_CHANGE:",
      "info" : "SwitchCase[7331-7357]:SwitchCase[7331-7357]"
    }, {
      "left" : "handleSimStateChange(msg.arg1, msg.arg2, (State) msg.obj);",
      "right" : "handleSimStateChange(msg.arg1, msg.arg2, (State) msg.obj);",
      "info" : "ExpressionStatement[7378-7436]:ExpressionStatement[7378-7436]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[7457-7463]:BreakStatement[7457-7463]"
    }, {
      "left" : "case MSG_RINGER_MODE_CHANGED:",
      "right" : "case MSG_RINGER_MODE_CHANGED:",
      "info" : "SwitchCase[7480-7509]:SwitchCase[7480-7509]"
    }, {
      "left" : "handleRingerModeChange(msg.arg1);",
      "right" : "handleRingerModeChange(msg.arg1);",
      "info" : "ExpressionStatement[7530-7563]:ExpressionStatement[7530-7563]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[7584-7590]:BreakStatement[7584-7590]"
    }, {
      "left" : "case MSG_PHONE_STATE_CHANGED:",
      "right" : "case MSG_PHONE_STATE_CHANGED:",
      "info" : "SwitchCase[7607-7636]:SwitchCase[7607-7636]"
    }, {
      "left" : "handlePhoneStateChanged((String) msg.obj);",
      "right" : "handlePhoneStateChanged((String) msg.obj);",
      "info" : "ExpressionStatement[7657-7699]:ExpressionStatement[7657-7699]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[7720-7726]:BreakStatement[7720-7726]"
    }, {
      "left" : "case MSG_CLOCK_VISIBILITY_CHANGED:",
      "right" : "case MSG_CLOCK_VISIBILITY_CHANGED:",
      "info" : "SwitchCase[7743-7777]:SwitchCase[7743-7777]"
    }, {
      "left" : "handleClockVisibilityChanged();",
      "right" : "handleClockVisibilityChanged();",
      "info" : "ExpressionStatement[7798-7829]:ExpressionStatement[7798-7829]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[7850-7856]:BreakStatement[7850-7856]"
    }, {
      "left" : "case MSG_DEVICE_PROVISIONED:",
      "right" : "case MSG_DEVICE_PROVISIONED:",
      "info" : "SwitchCase[7873-7901]:SwitchCase[7873-7901]"
    }, {
      "left" : "handleDeviceProvisioned();",
      "right" : "handleDeviceProvisioned();",
      "info" : "ExpressionStatement[7922-7948]:ExpressionStatement[7922-7948]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[7969-7975]:BreakStatement[7969-7975]"
    }, {
      "left" : "case MSG_DPM_STATE_CHANGED:",
      "right" : "case MSG_DPM_STATE_CHANGED:",
      "info" : "SwitchCase[7992-8019]:SwitchCase[7992-8019]"
    }, {
      "left" : "handleDevicePolicyManagerStateChanged();",
      "right" : "handleDevicePolicyManagerStateChanged();",
      "info" : "ExpressionStatement[8040-8080]:ExpressionStatement[8040-8080]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[8101-8107]:BreakStatement[8101-8107]"
    }, {
      "left" : "case MSG_USER_SWITCHING:",
      "right" : "case MSG_USER_SWITCHING:",
      "info" : "SwitchCase[8124-8148]:SwitchCase[8124-8148]"
    }, {
      "left" : "handleUserSwitching(msg.arg1, (IRemoteCallback) msg.obj);",
      "right" : "handleUserSwitching(msg.arg1, (IRemoteCallback) msg.obj);",
      "info" : "ExpressionStatement[8169-8226]:ExpressionStatement[8169-8226]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[8247-8253]:BreakStatement[8247-8253]"
    }, {
      "left" : "case MSG_USER_SWITCH_COMPLETE:",
      "right" : "case MSG_USER_SWITCH_COMPLETE:",
      "info" : "SwitchCase[8270-8300]:SwitchCase[8270-8300]"
    }, {
      "left" : "handleUserSwitchComplete(msg.arg1);",
      "right" : "handleUserSwitchComplete(msg.arg1);",
      "info" : "ExpressionStatement[8321-8356]:ExpressionStatement[8321-8356]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[8377-8383]:BreakStatement[8377-8383]"
    }, {
      "left" : "case MSG_USER_REMOVED:",
      "right" : "case MSG_USER_REMOVED:",
      "info" : "SwitchCase[8400-8422]:SwitchCase[8400-8422]"
    }, {
      "left" : "handleUserRemoved(msg.arg1);",
      "right" : "handleUserRemoved(msg.arg1);",
      "info" : "ExpressionStatement[8443-8471]:ExpressionStatement[8443-8471]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[8492-8498]:BreakStatement[8492-8498]"
    }, {
      "left" : "case MSG_KEYGUARD_VISIBILITY_CHANGED:",
      "right" : "case MSG_KEYGUARD_VISIBILITY_CHANGED:",
      "info" : "SwitchCase[8515-8552]:SwitchCase[8515-8552]"
    }, {
      "left" : "handleKeyguardVisibilityChanged(msg.arg1);",
      "right" : "handleKeyguardVisibilityChanged(msg.arg1);",
      "info" : "ExpressionStatement[8573-8615]:ExpressionStatement[8573-8615]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[8636-8642]:BreakStatement[8636-8642]"
    }, {
      "left" : "case MSG_KEYGUARD_BOUNCER_CHANGED:",
      "right" : "case MSG_KEYGUARD_BOUNCER_CHANGED:",
      "info" : "SwitchCase[8659-8693]:SwitchCase[8659-8693]"
    }, {
      "left" : "handleKeyguardBouncerChanged(msg.arg1);",
      "right" : "handleKeyguardBouncerChanged(msg.arg1);",
      "info" : "ExpressionStatement[8714-8753]:ExpressionStatement[8714-8753]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[8774-8780]:BreakStatement[8774-8780]"
    }, {
      "left" : "case MSG_BOOT_COMPLETED:",
      "right" : "case MSG_BOOT_COMPLETED:",
      "info" : "SwitchCase[8797-8821]:SwitchCase[8797-8821]"
    }, {
      "left" : "handleBootCompleted();",
      "right" : "handleBootCompleted();",
      "info" : "ExpressionStatement[8842-8864]:ExpressionStatement[8842-8864]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[8885-8891]:BreakStatement[8885-8891]"
    }, {
      "left" : "case MSG_USER_INFO_CHANGED:",
      "right" : "case MSG_USER_INFO_CHANGED:",
      "info" : "SwitchCase[8908-8935]:SwitchCase[8908-8935]"
    }, {
      "left" : "handleUserInfoChanged(msg.arg1);",
      "right" : "handleUserInfoChanged(msg.arg1);",
      "info" : "ExpressionStatement[8956-8988]:ExpressionStatement[8956-8988]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[9009-9015]:BreakStatement[9009-9015]"
    }, {
      "left" : "case MSG_REPORT_EMERGENCY_CALL_ACTION:",
      "right" : "case MSG_REPORT_EMERGENCY_CALL_ACTION:",
      "info" : "SwitchCase[9032-9070]:SwitchCase[9032-9070]"
    }, {
      "left" : "handleReportEmergencyCallAction();",
      "right" : "handleReportEmergencyCallAction();",
      "info" : "ExpressionStatement[9091-9125]:ExpressionStatement[9091-9125]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[9146-9152]:BreakStatement[9146-9152]"
    }, {
      "left" : "case MSG_SCREEN_TURNED_OFF:",
      "right" : "case MSG_SCREEN_TURNED_OFF:",
      "info" : "SwitchCase[9169-9196]:SwitchCase[9169-9196]"
    }, {
      "left" : "handleScreenTurnedOff(msg.arg1);",
      "right" : "handleScreenTurnedOff(msg.arg1);",
      "info" : "ExpressionStatement[9217-9249]:ExpressionStatement[9217-9249]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[9270-9276]:BreakStatement[9270-9276]"
    }, {
      "left" : "case MSG_SCREEN_TURNED_ON:",
      "right" : "case MSG_SCREEN_TURNED_ON:",
      "info" : "SwitchCase[9293-9319]:SwitchCase[9293-9319]"
    }, {
      "left" : "handleScreenTurnedOn();",
      "right" : "handleScreenTurnedOn();",
      "info" : "ExpressionStatement[9340-9363]:ExpressionStatement[9340-9363]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[9384-9390]:BreakStatement[9384-9390]"
    }, {
      "left" : "case MSG_AIRPLANE_MODE_CHANGED:",
      "right" : "case MSG_AIRPLANE_MODE_CHANGED:",
      "info" : "SwitchCase[9407-9438]:SwitchCase[9407-9438]"
    }, {
      "left" : "handleAirplaneModeChanged(msg.arg1 != 0);",
      "right" : "handleAirplaneModeChanged(msg.arg1 != 0);",
      "info" : "ExpressionStatement[9459-9500]:ExpressionStatement[9459-9500]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[9521-9527]:BreakStatement[9521-9527]"
    }, {
      "left" : "case MSG_FINGERPRINT_ACQUIRED:",
      "right" : "case MSG_FINGERPRINT_ACQUIRED:",
      "info" : "SwitchCase[9544-9574]:SwitchCase[9544-9574]"
    }, {
      "left" : "handleFingerprintAcquired(msg.arg1);",
      "right" : "handleFingerprintAcquired(msg.arg1);",
      "info" : "ExpressionStatement[9595-9631]:ExpressionStatement[9595-9631]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[9652-9658]:BreakStatement[9652-9658]"
    }, {
      "left" : "case MSG_FINGERPRINT_PROCESSED:",
      "right" : "case MSG_FINGERPRINT_PROCESSED:",
      "info" : "SwitchCase[9675-9706]:SwitchCase[9675-9706]"
    }, {
      "left" : "handleFingerprintProcessed(msg.arg1);",
      "right" : "handleFingerprintProcessed(msg.arg1);",
      "info" : "ExpressionStatement[9727-9764]:ExpressionStatement[9727-9764]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[9785-9791]:BreakStatement[9785-9791]"
    }, {
      "left" : "case MSG_FACE_UNLOCK_STATE_CHANGED:",
      "right" : "case MSG_FACE_UNLOCK_STATE_CHANGED:",
      "info" : "SwitchCase[9808-9843]:SwitchCase[9808-9843]"
    }, {
      "left" : "handleFaceUnlockStateChanged(msg.arg1 != 0, msg.arg2);",
      "right" : "handleFaceUnlockStateChanged(msg.arg1 != 0, msg.arg2);",
      "info" : "ExpressionStatement[9864-9918]:ExpressionStatement[9864-9918]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[9939-9945]:BreakStatement[9939-9945]"
    }, {
      "left" : "case MSG_SERVICE_STATE_CHANGED:",
      "right" : "case MSG_SERVICE_STATE_CHANGED:",
      "info" : "SwitchCase[9962-9993]:SwitchCase[9962-9993]"
    }, {
      "left" : "handleServiceStateChange(msg.arg1, (ServiceState) msg.obj);",
      "right" : "handleServiceStateChange(msg.arg1, (ServiceState) msg.obj);",
      "info" : "ExpressionStatement[10014-10073]:ExpressionStatement[10014-10073]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[10094-10100]:BreakStatement[10094-10100]"
    }, {
      "left" : "case MSG_SIM_SUBSCRIPTION_INFO_CHANGED:",
      "right" : "case MSG_SIM_SUBSCRIPTION_INFO_CHANGED:",
      "info" : "SwitchCase[10117-10156]:SwitchCase[10117-10156]"
    }, {
      "left" : "handleSimSubscriptionInfoChanged();",
      "right" : "handleSimSubscriptionInfoChanged();",
      "info" : "ExpressionStatement[10177-10212]:ExpressionStatement[10177-10212]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[10233-10239]:BreakStatement[10233-10239]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[10398-10407]:MarkerAnnotation[10398-10407]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[10416-10422]:Modifier[10416-10422]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[10423-10427]:PrimitiveType[10423-10427]"
    }, {
      "left" : "onSubscriptionsChanged",
      "right" : "onSubscriptionsChanged",
      "info" : "SimpleName[10428-10450]:SimpleName[10428-10450]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10453-10538]:Block[10453-10538]"
    }, {
      "left" : "mHandler.sendEmptyMessage(MSG_SIM_SUBSCRIPTION_INFO_CHANGED);",
      "right" : "mHandler.sendEmptyMessage(MSG_SIM_SUBSCRIPTION_INFO_CHANGED);",
      "info" : "ExpressionStatement[10467-10528]:ExpressionStatement[10467-10528]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[10872-10881]:MarkerAnnotation[10872-10881]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[10886-10892]:Modifier[10886-10892]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[10893-10897]:PrimitiveType[10893-10897]"
    }, {
      "left" : "onTrustChanged",
      "right" : "onTrustChanged",
      "info" : "SimpleName[10898-10912]:SimpleName[10898-10912]"
    }, {
      "left" : "boolean enabled",
      "right" : "boolean enabled",
      "info" : "SingleVariableDeclaration[10913-10928]:SingleVariableDeclaration[10913-10928]"
    }, {
      "left" : "int userId",
      "right" : "int userId",
      "info" : "SingleVariableDeclaration[10930-10940]:SingleVariableDeclaration[10930-10940]"
    }, {
      "left" : "boolean initiatedByUser",
      "right" : "boolean initiatedByUser",
      "info" : "SingleVariableDeclaration[10942-10965]:SingleVariableDeclaration[10942-10965]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10967-11365]:Block[10967-11365]"
    }, {
      "left" : "mUserHasTrust.put(userId, enabled);",
      "right" : "mUserHasTrust.put(userId, enabled);",
      "info" : "ExpressionStatement[10977-11012]:ExpressionStatement[10977-11012]"
    }, {
      "left" : "for (int i = 0; i < mCallbacks.size(); i++)",
      "right" : "for (int i = 0; i < mCallbacks.size(); i++)",
      "info" : "ForStatement[11022-11359]:ForStatement[11022-11359]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11066-11359]:Block[11066-11359]"
    }, {
      "left" : "KeyguardUpdateMonitorCallback cb = mCallbacks.get(i).get();",
      "right" : "KeyguardUpdateMonitorCallback cb = mCallbacks.get(i).get();",
      "info" : "VariableDeclarationStatement[11080-11139]:VariableDeclarationStatement[11080-11139]"
    }, {
      "left" : "if (cb != null)",
      "right" : "if (cb != null)",
      "info" : "IfStatement[11152-11349]:IfStatement[11152-11349]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11168-11349]:Block[11168-11349]"
    }, {
      "left" : "cb.onTrustChanged(userId);",
      "right" : "cb.onTrustChanged(userId);",
      "info" : "ExpressionStatement[11186-11212]:ExpressionStatement[11186-11212]"
    }, {
      "left" : "if (enabled && initiatedByUser)",
      "right" : "if (enabled && initiatedByUser)",
      "info" : "IfStatement[11229-11335]:IfStatement[11229-11335]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11261-11335]:Block[11261-11335]"
    }, {
      "left" : "cb.onTrustInitiatedByUser(userId);",
      "right" : "cb.onTrustInitiatedByUser(userId);",
      "info" : "ExpressionStatement[11283-11317]:ExpressionStatement[11283-11317]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[11371-11380]:Modifier[11371-11380]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[11381-11385]:PrimitiveType[11381-11385]"
    }, {
      "left" : "handleSimSubscriptionInfoChanged",
      "right" : "handleSimSubscriptionInfoChanged",
      "info" : "SimpleName[11386-11418]:SimpleName[11386-11418]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11421-13293]:Block[11421-13293]"
    }, {
      "left" : "if (DEBUG_SIM_STATES)",
      "right" : "if (DEBUG_SIM_STATES)",
      "info" : "IfStatement[11431-11878]:IfStatement[11431-11878]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11453-11878]:Block[11453-11878]"
    }, {
      "left" : "Log.v(TAG, \"onSubscriptionInfoChanged()\");",
      "right" : "Log.v(TAG, \"onSubscriptionInfoChanged()\");",
      "info" : "ExpressionStatement[11467-11509]:ExpressionStatement[11467-11509]"
    }, {
      "left" : "List<SubscriptionInfo> sil = mSubscriptionManager.getActiveSubscriptionInfoList();",
      "right" : "List<SubscriptionInfo> sil = mSubscriptionManager.getActiveSubscriptionInfoList();",
      "info" : "VariableDeclarationStatement[11522-11604]:VariableDeclarationStatement[11522-11604]"
    }, {
      "left" : "if (sil != null)",
      "right" : "if (sil != null)",
      "info" : "IfStatement[11617-11868]:IfStatement[11617-11868]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11634-11776]:Block[11634-11776]"
    }, {
      "left" : "for (SubscriptionInfo subInfo : sil)",
      "right" : "for (SubscriptionInfo subInfo : sil)",
      "info" : "EnhancedForStatement[11652-11762]:EnhancedForStatement[11652-11762]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11689-11762]:Block[11689-11762]"
    }, {
      "left" : "Log.v(TAG, \"SubInfo:\" + subInfo);",
      "right" : "Log.v(TAG, \"SubInfo:\" + subInfo);",
      "info" : "ExpressionStatement[11711-11744]:ExpressionStatement[11711-11744]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11782-11868]:Block[11782-11868]"
    }, {
      "left" : "Log.v(TAG, \"onSubscriptionInfoChanged: list is null\");",
      "right" : "Log.v(TAG, \"onSubscriptionInfoChanged: list is null\");",
      "info" : "ExpressionStatement[11800-11854]:ExpressionStatement[11800-11854]"
    }, {
      "left" : "List<SubscriptionInfo> subscriptionInfos = getSubscriptionInfo(true /* forceReload */);",
      "right" : "List<SubscriptionInfo> subscriptionInfos = getSubscriptionInfo(true /* forceReload */);",
      "info" : "VariableDeclarationStatement[11887-11974]:VariableDeclarationStatement[11887-11974]"
    }, {
      "left" : "ArrayList<SubscriptionInfo> changedSubscriptions = new ArrayList<>();",
      "right" : "ArrayList<SubscriptionInfo> changedSubscriptions = new ArrayList<>();",
      "info" : "VariableDeclarationStatement[12229-12298]:VariableDeclarationStatement[12229-12298]"
    }, {
      "left" : "for (int i = 0; i < subscriptionInfos.size(); i++)",
      "right" : "for (int i = 0; i < subscriptionInfos.size(); i++)",
      "info" : "ForStatement[12307-12617]:ForStatement[12307-12617]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12358-12617]:Block[12358-12617]"
    }, {
      "left" : "SubscriptionInfo info = subscriptionInfos.get(i);",
      "right" : "SubscriptionInfo info = subscriptionInfos.get(i);",
      "info" : "VariableDeclarationStatement[12372-12421]:VariableDeclarationStatement[12372-12421]"
    }, {
      "left" : "boolean changed = refreshSimState(info.getSubscriptionId(), info.getSimSlotIndex());",
      "right" : "boolean changed = refreshSimState(info.getSubscriptionId(), info.getSimSlotIndex());",
      "info" : "VariableDeclarationStatement[12434-12518]:VariableDeclarationStatement[12434-12518]"
    }, {
      "left" : "if (changed)",
      "right" : "if (changed)",
      "info" : "IfStatement[12531-12607]:IfStatement[12531-12607]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12544-12607]:Block[12544-12607]"
    }, {
      "left" : "changedSubscriptions.add(info);",
      "right" : "changedSubscriptions.add(info);",
      "info" : "ExpressionStatement[12562-12593]:ExpressionStatement[12562-12593]"
    }, {
      "left" : "for (int i = 0; i < changedSubscriptions.size(); i++)",
      "right" : "for (int i = 0; i < changedSubscriptions.size(); i++)",
      "info" : "ForStatement[12626-13064]:ForStatement[12626-13064]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12680-13064]:Block[12680-13064]"
    }, {
      "left" : "SimData data = mSimDatas.get(changedSubscriptions.get(i).getSubscriptionId());",
      "right" : "SimData data = mSimDatas.get(changedSubscriptions.get(i).getSubscriptionId());",
      "info" : "VariableDeclarationStatement[12694-12772]:VariableDeclarationStatement[12694-12772]"
    }, {
      "left" : "for (int j = 0; j < mCallbacks.size(); j++)",
      "right" : "for (int j = 0; j < mCallbacks.size(); j++)",
      "info" : "ForStatement[12785-13054]:ForStatement[12785-13054]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12829-13054]:Block[12829-13054]"
    }, {
      "left" : "KeyguardUpdateMonitorCallback cb = mCallbacks.get(j).get();",
      "right" : "KeyguardUpdateMonitorCallback cb = mCallbacks.get(j).get();",
      "info" : "VariableDeclarationStatement[12847-12906]:VariableDeclarationStatement[12847-12906]"
    }, {
      "left" : "if (cb != null)",
      "right" : "if (cb != null)",
      "info" : "IfStatement[12923-13040]:IfStatement[12923-13040]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12939-13040]:Block[12939-13040]"
    }, {
      "left" : "cb.onSimStateChanged(data.subId, data.slotId, data.simState);",
      "right" : "cb.onSimStateChanged(data.subId, data.slotId, data.simState);",
      "info" : "ExpressionStatement[12961-13022]:ExpressionStatement[12961-13022]"
    }, {
      "left" : "for (int j = 0; j < mCallbacks.size(); j++)",
      "right" : "for (int j = 0; j < mCallbacks.size(); j++)",
      "info" : "ForStatement[13073-13287]:ForStatement[13073-13287]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13117-13287]:Block[13117-13287]"
    }, {
      "left" : "KeyguardUpdateMonitorCallback cb = mCallbacks.get(j).get();",
      "right" : "KeyguardUpdateMonitorCallback cb = mCallbacks.get(j).get();",
      "info" : "VariableDeclarationStatement[13131-13190]:VariableDeclarationStatement[13131-13190]"
    }, {
      "left" : "if (cb != null)",
      "right" : "if (cb != null)",
      "info" : "IfStatement[13203-13277]:IfStatement[13203-13277]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13219-13277]:Block[13219-13277]"
    }, {
      "left" : "cb.onRefreshCarrierInfo();",
      "right" : "cb.onRefreshCarrierInfo();",
      "info" : "ExpressionStatement[13237-13263]:ExpressionStatement[13237-13263]"
    }, {
      "left" : "List<SubscriptionInfo>",
      "right" : "List<SubscriptionInfo>",
      "info" : "ParameterizedType[13379-13401]:ParameterizedType[13379-13401]"
    }, {
      "left" : "getSubscriptionInfo",
      "right" : "getSubscriptionInfo",
      "info" : "SimpleName[13402-13421]:SimpleName[13402-13421]"
    }, {
      "left" : "boolean forceReload",
      "right" : "boolean forceReload",
      "info" : "SingleVariableDeclaration[13422-13441]:SingleVariableDeclaration[13422-13441]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13443-13906]:Block[13443-13906]"
    }, {
      "left" : "List<SubscriptionInfo> sil = mSubscriptionInfo;",
      "right" : "List<SubscriptionInfo> sil = mSubscriptionInfo;",
      "info" : "VariableDeclarationStatement[13453-13500]:VariableDeclarationStatement[13453-13500]"
    }, {
      "left" : "if (sil == null || forceReload)",
      "right" : "if (sil == null || forceReload)",
      "info" : "IfStatement[13509-13624]:IfStatement[13509-13624]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13541-13624]:Block[13541-13624]"
    }, {
      "left" : "sil = mSubscriptionManager.getActiveSubscriptionInfoList();",
      "right" : "sil = mSubscriptionManager.getActiveSubscriptionInfoList();",
      "info" : "ExpressionStatement[13555-13614]:ExpressionStatement[13555-13614]"
    }, {
      "left" : "if (sil == null)",
      "right" : "if (sil == null)",
      "info" : "IfStatement[13633-13866]:IfStatement[13633-13866]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13650-13812]:Block[13650-13812]"
    }, {
      "left" : "mSubscriptionInfo = new ArrayList<SubscriptionInfo>();",
      "right" : "mSubscriptionInfo = new ArrayList<SubscriptionInfo>();",
      "info" : "ExpressionStatement[13748-13802]:ExpressionStatement[13748-13802]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13818-13866]:Block[13818-13866]"
    }, {
      "left" : "mSubscriptionInfo = sil;",
      "right" : "mSubscriptionInfo = sil;",
      "info" : "ExpressionStatement[13832-13856]:ExpressionStatement[13832-13856]"
    }, {
      "left" : "return mSubscriptionInfo;",
      "right" : "return mSubscriptionInfo;",
      "info" : "ReturnStatement[13875-13900]:ReturnStatement[13875-13900]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[13912-13921]:MarkerAnnotation[13912-13921]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[13926-13932]:Modifier[13926-13932]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[13933-13937]:PrimitiveType[13933-13937]"
    }, {
      "left" : "onTrustManagedChanged",
      "right" : "onTrustManagedChanged",
      "info" : "SimpleName[13938-13959]:SimpleName[13938-13959]"
    }, {
      "left" : "boolean managed",
      "right" : "boolean managed",
      "info" : "SingleVariableDeclaration[13960-13975]:SingleVariableDeclaration[13960-13975]"
    }, {
      "left" : "int userId",
      "right" : "int userId",
      "info" : "SingleVariableDeclaration[13977-13987]:SingleVariableDeclaration[13977-13987]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13989-14277]:Block[13989-14277]"
    }, {
      "left" : "mUserTrustIsManaged.put(userId, managed);",
      "right" : "mUserTrustIsManaged.put(userId, managed);",
      "info" : "ExpressionStatement[13999-14040]:ExpressionStatement[13999-14040]"
    }, {
      "left" : "for (int i = 0; i < mCallbacks.size(); i++)",
      "right" : "for (int i = 0; i < mCallbacks.size(); i++)",
      "info" : "ForStatement[14050-14271]:ForStatement[14050-14271]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14094-14271]:Block[14094-14271]"
    }, {
      "left" : "KeyguardUpdateMonitorCallback cb = mCallbacks.get(i).get();",
      "right" : "KeyguardUpdateMonitorCallback cb = mCallbacks.get(i).get();",
      "info" : "VariableDeclarationStatement[14108-14167]:VariableDeclarationStatement[14108-14167]"
    }, {
      "left" : "if (cb != null)",
      "right" : "if (cb != null)",
      "info" : "IfStatement[14180-14261]:IfStatement[14180-14261]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14196-14261]:Block[14196-14261]"
    }, {
      "left" : "cb.onTrustManagedChanged(userId);",
      "right" : "cb.onTrustManagedChanged(userId);",
      "info" : "ExpressionStatement[14214-14247]:ExpressionStatement[14214-14247]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[14283-14290]:Modifier[14283-14290]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[14291-14295]:PrimitiveType[14291-14295]"
    }, {
      "left" : "onFingerprintAttemptFailed",
      "right" : "onFingerprintAttemptFailed",
      "info" : "SimpleName[14296-14322]:SimpleName[14296-14322]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14325-14599]:Block[14325-14599]"
    }, {
      "left" : "mFailedFingerprintAttempts++;",
      "right" : "mFailedFingerprintAttempts++;",
      "info" : "ExpressionStatement[14335-14364]:ExpressionStatement[14335-14364]"
    }, {
      "left" : "for (int i = 0; i < mCallbacks.size(); i++)",
      "right" : "for (int i = 0; i < mCallbacks.size(); i++)",
      "info" : "ForStatement[14373-14593]:ForStatement[14373-14593]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14417-14593]:Block[14417-14593]"
    }, {
      "left" : "KeyguardUpdateMonitorCallback cb = mCallbacks.get(i).get();",
      "right" : "KeyguardUpdateMonitorCallback cb = mCallbacks.get(i).get();",
      "info" : "VariableDeclarationStatement[14431-14490]:VariableDeclarationStatement[14431-14490]"
    }, {
      "left" : "if (cb != null)",
      "right" : "if (cb != null)",
      "info" : "IfStatement[14503-14583]:IfStatement[14503-14583]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14519-14583]:Block[14519-14583]"
    }, {
      "left" : "cb.onFingerprintAttemptFailed();",
      "right" : "cb.onFingerprintAttemptFailed();",
      "info" : "ExpressionStatement[14537-14569]:ExpressionStatement[14537-14569]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[14605-14612]:Modifier[14605-14612]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[14613-14617]:PrimitiveType[14613-14617]"
    }, {
      "left" : "onFingerprintRecognized",
      "right" : "onFingerprintRecognized",
      "info" : "SimpleName[14618-14641]:SimpleName[14618-14641]"
    }, {
      "left" : "int userId",
      "right" : "int userId",
      "info" : "SingleVariableDeclaration[14642-14652]:SingleVariableDeclaration[14642-14652]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14654-14947]:Block[14654-14947]"
    }, {
      "left" : "mUserFingerprintRecognized.put(userId, true);",
      "right" : "mUserFingerprintRecognized.put(userId, true);",
      "info" : "ExpressionStatement[14664-14709]:ExpressionStatement[14664-14709]"
    }, {
      "left" : "for (int i = 0; i < mCallbacks.size(); i++)",
      "right" : "for (int i = 0; i < mCallbacks.size(); i++)",
      "info" : "ForStatement[14718-14941]:ForStatement[14718-14941]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14762-14941]:Block[14762-14941]"
    }, {
      "left" : "KeyguardUpdateMonitorCallback cb = mCallbacks.get(i).get();",
      "right" : "KeyguardUpdateMonitorCallback cb = mCallbacks.get(i).get();",
      "info" : "VariableDeclarationStatement[14776-14835]:VariableDeclarationStatement[14776-14835]"
    }, {
      "left" : "if (cb != null)",
      "right" : "if (cb != null)",
      "info" : "IfStatement[14848-14931]:IfStatement[14848-14931]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14864-14931]:Block[14864-14931]"
    }, {
      "left" : "cb.onFingerprintRecognized(userId);",
      "right" : "cb.onFingerprintRecognized(userId);",
      "info" : "ExpressionStatement[14882-14917]:ExpressionStatement[14882-14917]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[14953-14960]:Modifier[14953-14960]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[14961-14965]:PrimitiveType[14961-14965]"
    }, {
      "left" : "handleFingerprintProcessed",
      "right" : "handleFingerprintProcessed",
      "info" : "SimpleName[14966-14992]:SimpleName[14966-14992]"
    }, {
      "left" : "int fingerprintId",
      "right" : "int fingerprintId",
      "info" : "SingleVariableDeclaration[14993-15010]:SingleVariableDeclaration[14993-15010]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15012-16161]:Block[15012-16161]"
    }, {
      "left" : "if (fingerprintId == 0)",
      "right" : "if (fingerprintId == 0)",
      "info" : "IfStatement[15022-15397]:IfStatement[15022-15397]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15046-15397]:Block[15046-15397]"
    }, {
      "left" : "FingerprintManager fpm =\n                    (FingerprintManager) mContext.getSystemService(Context.FINGERPRINT_SERVICE);",
      "right" : "FingerprintManager fpm =\n                    (FingerprintManager) mContext.getSystemService(Context.FINGERPRINT_SERVICE);",
      "info" : "VariableDeclarationStatement[15145-15266]:VariableDeclarationStatement[15145-15266]"
    }, {
      "left" : "fpm.authenticate();",
      "right" : "fpm.authenticate();",
      "info" : "ExpressionStatement[15279-15298]:ExpressionStatement[15279-15298]"
    }, {
      "left" : "onFingerprintAttemptFailed();",
      "right" : "onFingerprintAttemptFailed();",
      "info" : "ExpressionStatement[15311-15340]:ExpressionStatement[15311-15340]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[15353-15360]:ReturnStatement[15353-15360]"
    }, {
      "left" : "final int userId;",
      "right" : "final int userId;",
      "info" : "VariableDeclarationStatement[15407-15424]:VariableDeclarationStatement[15407-15424]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[15433-15645]:TryStatement[15433-15645]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15437-15525]:Block[15437-15525]"
    }, {
      "left" : "userId = ActivityManagerNative.getDefault().getCurrentUser().id;",
      "right" : "userId = ActivityManagerNative.getDefault().getCurrentUser().id;",
      "info" : "ExpressionStatement[15451-15515]:ExpressionStatement[15451-15515]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15552-15645]:Block[15552-15645]"
    }, {
      "left" : "Log.e(TAG, \"Failed to get current user id: \", e);",
      "right" : "Log.e(TAG, \"Failed to get current user id: \", e);",
      "info" : "ExpressionStatement[15566-15615]:ExpressionStatement[15566-15615]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[15628-15635]:ReturnStatement[15628-15635]"
    }, {
      "left" : "if (isFingerprintDisabled(userId))",
      "right" : "if (isFingerprintDisabled(userId))",
      "info" : "IfStatement[15654-15797]:IfStatement[15654-15797]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15689-15797]:Block[15689-15797]"
    }, {
      "left" : "Log.d(TAG, \"Fingerprint disabled by DPM for userId: \" + userId);",
      "right" : "Log.d(TAG, \"Fingerprint disabled by DPM for userId: \" + userId);",
      "info" : "ExpressionStatement[15703-15767]:ExpressionStatement[15703-15767]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[15780-15787]:ReturnStatement[15780-15787]"
    }, {
      "left" : "final ContentResolver res = mContext.getContentResolver();",
      "right" : "final ContentResolver res = mContext.getContentResolver();",
      "info" : "VariableDeclarationStatement[15806-15864]:VariableDeclarationStatement[15806-15864]"
    }, {
      "left" : "final List<Fingerprint> fingerprints = FingerprintUtils.getFingerprintsForUser(res, userId);",
      "right" : "final List<Fingerprint> fingerprints = FingerprintUtils.getFingerprintsForUser(res, userId);",
      "info" : "VariableDeclarationStatement[15873-15965]:VariableDeclarationStatement[15873-15965]"
    }, {
      "left" : "for (Fingerprint fingerprint : fingerprints)",
      "right" : "for (Fingerprint fingerprint : fingerprints)",
      "info" : "EnhancedForStatement[15974-16155]:EnhancedForStatement[15974-16155]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16019-16155]:Block[16019-16155]"
    }, {
      "left" : "if (fingerprint.getFingerId() == fingerprintId)",
      "right" : "if (fingerprint.getFingerId() == fingerprintId)",
      "info" : "IfStatement[16033-16145]:IfStatement[16033-16145]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16081-16145]:Block[16081-16145]"
    }, {
      "left" : "onFingerprintRecognized(userId);",
      "right" : "onFingerprintRecognized(userId);",
      "info" : "ExpressionStatement[16099-16131]:ExpressionStatement[16099-16131]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[16167-16174]:Modifier[16167-16174]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[16175-16179]:PrimitiveType[16175-16179]"
    }, {
      "left" : "handleFingerprintAcquired",
      "right" : "handleFingerprintAcquired",
      "info" : "SimpleName[16180-16205]:SimpleName[16180-16205]"
    }, {
      "left" : "int info",
      "right" : "int info",
      "info" : "SingleVariableDeclaration[16206-16214]:SingleVariableDeclaration[16206-16214]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16216-16451]:Block[16216-16451]"
    }, {
      "left" : "for (int i = 0; i < mCallbacks.size(); i++)",
      "right" : "for (int i = 0; i < mCallbacks.size(); i++)",
      "info" : "ForStatement[16226-16445]:ForStatement[16226-16445]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16270-16445]:Block[16270-16445]"
    }, {
      "left" : "KeyguardUpdateMonitorCallback cb = mCallbacks.get(i).get();",
      "right" : "KeyguardUpdateMonitorCallback cb = mCallbacks.get(i).get();",
      "info" : "VariableDeclarationStatement[16284-16343]:VariableDeclarationStatement[16284-16343]"
    }, {
      "left" : "if (cb != null)",
      "right" : "if (cb != null)",
      "info" : "IfStatement[16356-16435]:IfStatement[16356-16435]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16372-16435]:Block[16372-16435]"
    }, {
      "left" : "cb.onFingerprintAcquired(info);",
      "right" : "cb.onFingerprintAcquired(info);",
      "info" : "ExpressionStatement[16390-16421]:ExpressionStatement[16390-16421]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[16457-16464]:Modifier[16457-16464]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[16465-16469]:PrimitiveType[16465-16469]"
    }, {
      "left" : "handleFaceUnlockStateChanged",
      "right" : "handleFaceUnlockStateChanged",
      "info" : "SimpleName[16470-16498]:SimpleName[16470-16498]"
    }, {
      "left" : "boolean running",
      "right" : "boolean running",
      "info" : "SingleVariableDeclaration[16499-16514]:SingleVariableDeclaration[16499-16514]"
    }, {
      "left" : "int userId",
      "right" : "int userId",
      "info" : "SingleVariableDeclaration[16516-16526]:SingleVariableDeclaration[16516-16526]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16528-16830]:Block[16528-16830]"
    }, {
      "left" : "mUserFaceUnlockRunning.put(userId, running);",
      "right" : "mUserFaceUnlockRunning.put(userId, running);",
      "info" : "ExpressionStatement[16538-16582]:ExpressionStatement[16538-16582]"
    }, {
      "left" : "for (int i = 0; i < mCallbacks.size(); i++)",
      "right" : "for (int i = 0; i < mCallbacks.size(); i++)",
      "info" : "ForStatement[16591-16824]:ForStatement[16591-16824]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16635-16824]:Block[16635-16824]"
    }, {
      "left" : "KeyguardUpdateMonitorCallback cb = mCallbacks.get(i).get();",
      "right" : "KeyguardUpdateMonitorCallback cb = mCallbacks.get(i).get();",
      "info" : "VariableDeclarationStatement[16649-16708]:VariableDeclarationStatement[16649-16708]"
    }, {
      "left" : "if (cb != null)",
      "right" : "if (cb != null)",
      "info" : "IfStatement[16721-16814]:IfStatement[16721-16814]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16737-16814]:Block[16737-16814]"
    }, {
      "left" : "cb.onFaceUnlockStateChanged(running, userId);",
      "right" : "cb.onFaceUnlockStateChanged(running, userId);",
      "info" : "ExpressionStatement[16755-16800]:ExpressionStatement[16755-16800]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[16836-16842]:Modifier[16836-16842]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[16843-16850]:PrimitiveType[16843-16850]"
    }, {
      "left" : "isFaceUnlockRunning",
      "right" : "isFaceUnlockRunning",
      "info" : "SimpleName[16851-16870]:SimpleName[16851-16870]"
    }, {
      "left" : "int userId",
      "right" : "int userId",
      "info" : "SingleVariableDeclaration[16871-16881]:SingleVariableDeclaration[16871-16881]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16883-16941]:Block[16883-16941]"
    }, {
      "left" : "return mUserFaceUnlockRunning.get(userId);",
      "right" : "return mUserFaceUnlockRunning.get(userId);",
      "info" : "ReturnStatement[16893-16935]:ReturnStatement[16893-16935]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[16947-16954]:Modifier[16947-16954]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[16955-16962]:PrimitiveType[16955-16962]"
    }, {
      "left" : "isTrustDisabled",
      "right" : "isTrustDisabled",
      "info" : "SimpleName[16963-16978]:SimpleName[16963-16978]"
    }, {
      "left" : "int userId",
      "right" : "int userId",
      "info" : "SingleVariableDeclaration[16979-16989]:SingleVariableDeclaration[16979-16989]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16991-17984]:Block[16991-17984]"
    }, {
      "left" : "final DevicePolicyManager dpm =\n                (DevicePolicyManager) mContext.getSystemService(Context.DEVICE_POLICY_SERVICE);",
      "right" : "final DevicePolicyManager dpm =\n                (DevicePolicyManager) mContext.getSystemService(Context.DEVICE_POLICY_SERVICE);",
      "info" : "VariableDeclarationStatement[17001-17128]:VariableDeclarationStatement[17001-17128]"
    }, {
      "left" : "if (dpm != null)",
      "right" : "if (dpm != null)",
      "info" : "IfStatement[17137-17956]:IfStatement[17137-17956]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17154-17956]:Block[17154-17956]"
    }, {
      "left" : "final boolean disabledByGlobalActions = false;",
      "right" : "final boolean disabledByGlobalActions = false;",
      "info" : "VariableDeclarationStatement[17217-17263]:VariableDeclarationStatement[17217-17263]"
    }, {
      "left" : "final boolean disabledBySettings = false;",
      "right" : "final boolean disabledBySettings = false;",
      "info" : "VariableDeclarationStatement[17280-17321]:VariableDeclarationStatement[17280-17321]"
    }, {
      "left" : "final boolean disabledBySimPin = isSimPinSecure();",
      "right" : "final boolean disabledBySimPin = isSimPinSecure();",
      "info" : "VariableDeclarationStatement[17588-17638]:VariableDeclarationStatement[17588-17638]"
    }, {
      "left" : "final boolean disabledByDpm = (dpm.getKeyguardDisabledFeatures(null, userId)\n                        & DevicePolicyManager.KEYGUARD_DISABLE_TRUST_AGENTS) != 0;",
      "right" : "final boolean disabledByDpm = (dpm.getKeyguardDisabledFeatures(null, userId)\n                        & DevicePolicyManager.KEYGUARD_DISABLE_TRUST_AGENTS) != 0;",
      "info" : "VariableDeclarationStatement[17656-17815]:VariableDeclarationStatement[17656-17815]"
    }, {
      "left" : "return disabledByDpm || disabledByGlobalActions || disabledBySettings\n                        || disabledBySimPin;",
      "right" : "return disabledByDpm || disabledByGlobalActions || disabledBySettings\n                        || disabledBySimPin;",
      "info" : "ReturnStatement[17832-17946]:ReturnStatement[17832-17946]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[17965-17978]:ReturnStatement[17965-17978]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[17990-17997]:Modifier[17990-17997]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[17998-18005]:PrimitiveType[17998-18005]"
    }, {
      "left" : "isFingerprintDisabled",
      "right" : "isFingerprintDisabled",
      "info" : "SimpleName[18006-18027]:SimpleName[18006-18027]"
    }, {
      "left" : "int userId",
      "right" : "int userId",
      "info" : "SingleVariableDeclaration[18028-18038]:SingleVariableDeclaration[18028-18038]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18040-18338]:Block[18040-18338]"
    }, {
      "left" : "final DevicePolicyManager dpm =\n                (DevicePolicyManager) mContext.getSystemService(Context.DEVICE_POLICY_SERVICE);",
      "right" : "final DevicePolicyManager dpm =\n                (DevicePolicyManager) mContext.getSystemService(Context.DEVICE_POLICY_SERVICE);",
      "info" : "VariableDeclarationStatement[18050-18177]:VariableDeclarationStatement[18050-18177]"
    }, {
      "left" : "return dpm != null && (dpm.getKeyguardDisabledFeatures(null, userId)\n                    & DevicePolicyManager.KEYGUARD_DISABLE_FINGERPRINT) != 0;",
      "right" : "return dpm != null && (dpm.getKeyguardDisabledFeatures(null, userId)\n                    & DevicePolicyManager.KEYGUARD_DISABLE_FINGERPRINT) != 0;",
      "info" : "ReturnStatement[18186-18332]:ReturnStatement[18186-18332]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[18344-18350]:Modifier[18344-18350]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[18351-18358]:PrimitiveType[18351-18358]"
    }, {
      "left" : "getUserHasTrust",
      "right" : "getUserHasTrust",
      "info" : "SimpleName[18359-18374]:SimpleName[18359-18374]"
    }, {
      "left" : "int userId",
      "right" : "int userId",
      "info" : "SingleVariableDeclaration[18375-18385]:SingleVariableDeclaration[18375-18385]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18387-18522]:Block[18387-18522]"
    }, {
      "left" : "return !isTrustDisabled(userId) && mUserHasTrust.get(userId)\n                || mUserFingerprintRecognized.get(userId);",
      "right" : "return !isTrustDisabled(userId) && mUserHasTrust.get(userId)\n                || mUserFingerprintRecognized.get(userId);",
      "info" : "ReturnStatement[18397-18516]:ReturnStatement[18397-18516]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[18528-18534]:Modifier[18528-18534]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[18535-18542]:PrimitiveType[18535-18542]"
    }, {
      "left" : "getUserTrustIsManaged",
      "right" : "getUserTrustIsManaged",
      "info" : "SimpleName[18543-18564]:SimpleName[18543-18564]"
    }, {
      "left" : "int userId",
      "right" : "int userId",
      "info" : "SingleVariableDeclaration[18565-18575]:SingleVariableDeclaration[18565-18575]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18577-18660]:Block[18577-18660]"
    }, {
      "left" : "return mUserTrustIsManaged.get(userId) && !isTrustDisabled(userId);",
      "right" : "return mUserTrustIsManaged.get(userId) && !isTrustDisabled(userId);",
      "info" : "ReturnStatement[18587-18654]:ReturnStatement[18587-18654]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[18666-18672]:Modifier[18666-18672]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[18673-18678]:TYPE_DECLARATION_KIND[18673-18678]"
    }, {
      "left" : "DisplayClientState",
      "right" : "DisplayClientState",
      "info" : "SimpleName[18679-18697]:SimpleName[18679-18697]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[19059-19065]:Modifier[19059-19065]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[19066-19070]:PrimitiveType[19066-19070]"
    }, {
      "left" : "onReceive",
      "right" : "onReceive",
      "info" : "SimpleName[19071-19080]:SimpleName[19071-19080]"
    }, {
      "left" : "Context context",
      "right" : "Context context",
      "info" : "SingleVariableDeclaration[19081-19096]:SingleVariableDeclaration[19081-19096]"
    }, {
      "left" : "Intent intent",
      "right" : "Intent intent",
      "info" : "SingleVariableDeclaration[19098-19111]:SingleVariableDeclaration[19098-19111]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19113-22456]:Block[19113-22456]"
    }, {
      "left" : "final String action = intent.getAction();",
      "right" : "final String action = intent.getAction();",
      "info" : "VariableDeclarationStatement[19127-19168]:VariableDeclarationStatement[19127-19168]"
    }, {
      "left" : "if (DEBUG)",
      "right" : "if (DEBUG)",
      "info" : "IfStatement[19181-19235]:IfStatement[19181-19235]"
    }, {
      "left" : "Log.d(TAG, \"received broadcast \" + action);",
      "right" : "Log.d(TAG, \"received broadcast \" + action);",
      "info" : "ExpressionStatement[19192-19235]:ExpressionStatement[19192-19235]"
    }, {
      "left" : "if (Intent.ACTION_TIME_TICK.equals(action)\n                    || Intent.ACTION_TIME_CHANGED.equals(action)\n                    || Intent.ACTION_TIMEZONE_CHANGED.equals(action))",
      "right" : "if (Intent.ACTION_TIME_TICK.equals(action)\n                    || Intent.ACTION_TIME_CHANGED.equals(action)\n                    || Intent.ACTION_TIMEZONE_CHANGED.equals(action))",
      "info" : "IfStatement[19249-22446]:IfStatement[19249-22446]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19427-19502]:Block[19427-19502]"
    }, {
      "left" : "mHandler.sendEmptyMessage(MSG_TIME_UPDATE);",
      "right" : "mHandler.sendEmptyMessage(MSG_TIME_UPDATE);",
      "info" : "ExpressionStatement[19445-19488]:ExpressionStatement[19445-19488]"
    }, {
      "left" : "if (Intent.ACTION_BATTERY_CHANGED.equals(action))",
      "right" : "if (Intent.ACTION_BATTERY_CHANGED.equals(action))",
      "info" : "IfStatement[19508-22446]:IfStatement[19508-22446]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19558-20102]:Block[19558-20102]"
    }, {
      "left" : "final int status = intent.getIntExtra(EXTRA_STATUS, BATTERY_STATUS_UNKNOWN);",
      "right" : "final int status = intent.getIntExtra(EXTRA_STATUS, BATTERY_STATUS_UNKNOWN);",
      "info" : "VariableDeclarationStatement[19576-19652]:VariableDeclarationStatement[19576-19652]"
    }, {
      "left" : "final int plugged = intent.getIntExtra(EXTRA_PLUGGED, 0);",
      "right" : "final int plugged = intent.getIntExtra(EXTRA_PLUGGED, 0);",
      "info" : "VariableDeclarationStatement[19669-19726]:VariableDeclarationStatement[19669-19726]"
    }, {
      "left" : "final int level = intent.getIntExtra(EXTRA_LEVEL, 0);",
      "right" : "final int level = intent.getIntExtra(EXTRA_LEVEL, 0);",
      "info" : "VariableDeclarationStatement[19743-19796]:VariableDeclarationStatement[19743-19796]"
    }, {
      "left" : "final int health = intent.getIntExtra(EXTRA_HEALTH, BATTERY_HEALTH_UNKNOWN);",
      "right" : "final int health = intent.getIntExtra(EXTRA_HEALTH, BATTERY_HEALTH_UNKNOWN);",
      "info" : "VariableDeclarationStatement[19813-19889]:VariableDeclarationStatement[19813-19889]"
    }, {
      "left" : "final Message msg = mHandler.obtainMessage(\n                        MSG_BATTERY_UPDATE, new BatteryStatus(status, level, plugged, health));",
      "right" : "final Message msg = mHandler.obtainMessage(\n                        MSG_BATTERY_UPDATE, new BatteryStatus(status, level, plugged, health));",
      "info" : "VariableDeclarationStatement[19906-20045]:VariableDeclarationStatement[19906-20045]"
    }, {
      "left" : "mHandler.sendMessage(msg);",
      "right" : "mHandler.sendMessage(msg);",
      "info" : "ExpressionStatement[20062-20088]:ExpressionStatement[20062-20088]"
    }, {
      "left" : "if (TelephonyIntents.ACTION_SIM_STATE_CHANGED.equals(action))",
      "right" : "if (TelephonyIntents.ACTION_SIM_STATE_CHANGED.equals(action))",
      "info" : "IfStatement[20108-22446]:IfStatement[20108-22446]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20170-20674]:Block[20170-20674]"
    }, {
      "left" : "SimData args = SimData.fromIntent(intent);",
      "right" : "SimData args = SimData.fromIntent(intent);",
      "info" : "VariableDeclarationStatement[20188-20230]:VariableDeclarationStatement[20188-20230]"
    }, {
      "left" : "if (DEBUG_SIM_STATES)",
      "right" : "if (DEBUG_SIM_STATES)",
      "info" : "IfStatement[20247-20518]:IfStatement[20247-20518]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20269-20518]:Block[20269-20518]"
    }, {
      "left" : "Log.v(TAG, \"action \" + action\n                        + \" state: \" + intent.getStringExtra(IccCardConstants.INTENT_KEY_ICC_STATE)\n                        + \" slotId: \" + args.slotId + \" subid: \" + args.subId);",
      "right" : "Log.v(TAG, \"action \" + action\n                        + \" state: \" + intent.getStringExtra(IccCardConstants.INTENT_KEY_ICC_STATE)\n                        + \" slotId: \" + args.slotId + \" subid: \" + args.subId);",
      "info" : "ExpressionStatement[20291-20500]:ExpressionStatement[20291-20500]"
    }, {
      "left" : "mHandler.obtainMessage(MSG_SIM_STATE_CHANGE, args.subId, args.slotId, args.simState)\n                        .sendToTarget();",
      "right" : "mHandler.obtainMessage(MSG_SIM_STATE_CHANGE, args.subId, args.slotId, args.simState)\n                        .sendToTarget();",
      "info" : "ExpressionStatement[20535-20660]:ExpressionStatement[20535-20660]"
    }, {
      "left" : "if (AudioManager.RINGER_MODE_CHANGED_ACTION.equals(action))",
      "right" : "if (AudioManager.RINGER_MODE_CHANGED_ACTION.equals(action))",
      "info" : "IfStatement[20680-22446]:IfStatement[20680-22446]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20740-20925]:Block[20740-20925]"
    }, {
      "left" : "mHandler.sendMessage(mHandler.obtainMessage(MSG_RINGER_MODE_CHANGED,\n                        intent.getIntExtra(AudioManager.EXTRA_RINGER_MODE, -1), 0));",
      "right" : "mHandler.sendMessage(mHandler.obtainMessage(MSG_RINGER_MODE_CHANGED,\n                        intent.getIntExtra(AudioManager.EXTRA_RINGER_MODE, -1), 0));",
      "info" : "ExpressionStatement[20758-20911]:ExpressionStatement[20758-20911]"
    }, {
      "left" : "if (TelephonyManager.ACTION_PHONE_STATE_CHANGED.equals(action))",
      "right" : "if (TelephonyManager.ACTION_PHONE_STATE_CHANGED.equals(action))",
      "info" : "IfStatement[20931-22446]:IfStatement[20931-22446]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20995-21188]:Block[20995-21188]"
    }, {
      "left" : "String state = intent.getStringExtra(TelephonyManager.EXTRA_STATE);",
      "right" : "String state = intent.getStringExtra(TelephonyManager.EXTRA_STATE);",
      "info" : "VariableDeclarationStatement[21013-21080]:VariableDeclarationStatement[21013-21080]"
    }, {
      "left" : "mHandler.sendMessage(mHandler.obtainMessage(MSG_PHONE_STATE_CHANGED, state));",
      "right" : "mHandler.sendMessage(mHandler.obtainMessage(MSG_PHONE_STATE_CHANGED, state));",
      "info" : "ExpressionStatement[21097-21174]:ExpressionStatement[21097-21174]"
    }, {
      "left" : "if (Intent.ACTION_USER_REMOVED.equals(action))",
      "right" : "if (Intent.ACTION_USER_REMOVED.equals(action))",
      "info" : "IfStatement[21194-22446]:IfStatement[21194-22446]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21241-21411]:Block[21241-21411]"
    }, {
      "left" : "mHandler.sendMessage(mHandler.obtainMessage(MSG_USER_REMOVED,\n                       intent.getIntExtra(Intent.EXTRA_USER_HANDLE, 0), 0));",
      "right" : "mHandler.sendMessage(mHandler.obtainMessage(MSG_USER_REMOVED,\n                       intent.getIntExtra(Intent.EXTRA_USER_HANDLE, 0), 0));",
      "info" : "ExpressionStatement[21259-21397]:ExpressionStatement[21259-21397]"
    }, {
      "left" : "if (Intent.ACTION_AIRPLANE_MODE_CHANGED.equals(action))",
      "right" : "if (Intent.ACTION_AIRPLANE_MODE_CHANGED.equals(action))",
      "info" : "IfStatement[21417-22446]:IfStatement[21417-22446]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21473-21695]:Block[21473-21695]"
    }, {
      "left" : "boolean state = intent.getBooleanExtra(\"state\", false);",
      "right" : "boolean state = intent.getBooleanExtra(\"state\", false);",
      "info" : "VariableDeclarationStatement[21491-21546]:VariableDeclarationStatement[21491-21546]"
    }, {
      "left" : "Message msg = mHandler.obtainMessage(MSG_AIRPLANE_MODE_CHANGED, state ? 1 : 0, 0);",
      "right" : "Message msg = mHandler.obtainMessage(MSG_AIRPLANE_MODE_CHANGED, state ? 1 : 0, 0);",
      "info" : "VariableDeclarationStatement[21563-21645]:VariableDeclarationStatement[21563-21645]"
    }, {
      "left" : "msg.sendToTarget();",
      "right" : "msg.sendToTarget();",
      "info" : "ExpressionStatement[21662-21681]:ExpressionStatement[21662-21681]"
    }, {
      "left" : "if (Intent.ACTION_BOOT_COMPLETED.equals(action))",
      "right" : "if (Intent.ACTION_BOOT_COMPLETED.equals(action))",
      "info" : "IfStatement[21701-22446]:IfStatement[21701-22446]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21750-21806]:Block[21750-21806]"
    }, {
      "left" : "dispatchBootCompleted();",
      "right" : "dispatchBootCompleted();",
      "info" : "ExpressionStatement[21768-21792]:ExpressionStatement[21768-21792]"
    }, {
      "left" : "if (TelephonyIntents.ACTION_SERVICE_STATE_CHANGED.equals(action))",
      "right" : "if (TelephonyIntents.ACTION_SERVICE_STATE_CHANGED.equals(action))",
      "info" : "IfStatement[21812-22446]:IfStatement[21812-22446]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21878-22446]:Block[21878-22446]"
    }, {
      "left" : "int subId = intent.getIntExtra(PhoneConstants.SUBSCRIPTION_KEY,\n                        SubscriptionManager.INVALID_SUBSCRIPTION_ID);",
      "right" : "int subId = intent.getIntExtra(PhoneConstants.SUBSCRIPTION_KEY,\n                        SubscriptionManager.INVALID_SUBSCRIPTION_ID);",
      "info" : "VariableDeclarationStatement[21896-22029]:VariableDeclarationStatement[21896-22029]"
    }, {
      "left" : "ServiceState state = ServiceState.newFromBundle(intent.getExtras());",
      "right" : "ServiceState state = ServiceState.newFromBundle(intent.getExtras());",
      "info" : "VariableDeclarationStatement[22046-22114]:VariableDeclarationStatement[22046-22114]"
    }, {
      "left" : "if (DEBUG)",
      "right" : "if (DEBUG)",
      "info" : "IfStatement[22131-22298]:IfStatement[22131-22298]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22142-22298]:Block[22142-22298]"
    }, {
      "left" : "Log.d(TAG, \"ACTION_SERVICE_STATE_CHANGED on sub \" + subId\n                            + \": serviceState: \" + state);",
      "right" : "Log.d(TAG, \"ACTION_SERVICE_STATE_CHANGED on sub \" + subId\n                            + \": serviceState: \" + state);",
      "info" : "ExpressionStatement[22164-22280]:ExpressionStatement[22164-22280]"
    }, {
      "left" : "Message msg = mHandler.obtainMessage(MSG_SERVICE_STATE_CHANGED, subId, 0, state);",
      "right" : "Message msg = mHandler.obtainMessage(MSG_SERVICE_STATE_CHANGED, subId, 0, state);",
      "info" : "VariableDeclarationStatement[22315-22396]:VariableDeclarationStatement[22315-22396]"
    }, {
      "left" : "msg.sendToTarget();",
      "right" : "msg.sendToTarget();",
      "info" : "ExpressionStatement[22413-22432]:ExpressionStatement[22413-22432]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[22560-22566]:Modifier[22560-22566]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[22567-22571]:PrimitiveType[22567-22571]"
    }, {
      "left" : "onReceive",
      "right" : "onReceive",
      "info" : "SimpleName[22572-22581]:SimpleName[22572-22581]"
    }, {
      "left" : "Context context",
      "right" : "Context context",
      "info" : "SingleVariableDeclaration[22582-22597]:SingleVariableDeclaration[22582-22597]"
    }, {
      "left" : "Intent intent",
      "right" : "Intent intent",
      "info" : "SingleVariableDeclaration[22599-22612]:SingleVariableDeclaration[22599-22612]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22614-23690]:Block[22614-23690]"
    }, {
      "left" : "final String action = intent.getAction();",
      "right" : "final String action = intent.getAction();",
      "info" : "VariableDeclarationStatement[22628-22669]:VariableDeclarationStatement[22628-22669]"
    }, {
      "left" : "if (AlarmManager.ACTION_NEXT_ALARM_CLOCK_CHANGED.equals(action))",
      "right" : "if (AlarmManager.ACTION_NEXT_ALARM_CLOCK_CHANGED.equals(action))",
      "info" : "IfStatement[22682-23680]:IfStatement[22682-23680]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22747-22822]:Block[22747-22822]"
    }, {
      "left" : "mHandler.sendEmptyMessage(MSG_TIME_UPDATE);",
      "right" : "mHandler.sendEmptyMessage(MSG_TIME_UPDATE);",
      "info" : "ExpressionStatement[22765-22808]:ExpressionStatement[22765-22808]"
    }, {
      "left" : "if (Intent.ACTION_USER_INFO_CHANGED.equals(action))",
      "right" : "if (Intent.ACTION_USER_INFO_CHANGED.equals(action))",
      "info" : "IfStatement[22828-23680]:IfStatement[22828-23680]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22880-23073]:Block[22880-23073]"
    }, {
      "left" : "mHandler.sendMessage(mHandler.obtainMessage(MSG_USER_INFO_CHANGED,\n                        intent.getIntExtra(Intent.EXTRA_USER_HANDLE, getSendingUserId()), 0));",
      "right" : "mHandler.sendMessage(mHandler.obtainMessage(MSG_USER_INFO_CHANGED,\n                        intent.getIntExtra(Intent.EXTRA_USER_HANDLE, getSendingUserId()), 0));",
      "info" : "ExpressionStatement[22898-23059]:ExpressionStatement[22898-23059]"
    }, {
      "left" : "if (ACTION_FACE_UNLOCK_STARTED.equals(action))",
      "right" : "if (ACTION_FACE_UNLOCK_STARTED.equals(action))",
      "info" : "IfStatement[23079-23680]:IfStatement[23079-23680]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23126-23281]:Block[23126-23281]"
    }, {
      "left" : "mHandler.sendMessage(mHandler.obtainMessage(MSG_FACE_UNLOCK_STATE_CHANGED, 1,\n                        getSendingUserId()));",
      "right" : "mHandler.sendMessage(mHandler.obtainMessage(MSG_FACE_UNLOCK_STATE_CHANGED, 1,\n                        getSendingUserId()));",
      "info" : "ExpressionStatement[23144-23267]:ExpressionStatement[23144-23267]"
    }, {
      "left" : "if (ACTION_FACE_UNLOCK_STOPPED.equals(action))",
      "right" : "if (ACTION_FACE_UNLOCK_STOPPED.equals(action))",
      "info" : "IfStatement[23287-23680]:IfStatement[23287-23680]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23334-23489]:Block[23334-23489]"
    }, {
      "left" : "mHandler.sendMessage(mHandler.obtainMessage(MSG_FACE_UNLOCK_STATE_CHANGED, 0,\n                        getSendingUserId()));",
      "right" : "mHandler.sendMessage(mHandler.obtainMessage(MSG_FACE_UNLOCK_STATE_CHANGED, 0,\n                        getSendingUserId()));",
      "info" : "ExpressionStatement[23352-23475]:ExpressionStatement[23352-23475]"
    }, {
      "left" : "if (DevicePolicyManager.ACTION_DEVICE_POLICY_MANAGER_STATE_CHANGED\n                    .equals(action))",
      "right" : "if (DevicePolicyManager.ACTION_DEVICE_POLICY_MANAGER_STATE_CHANGED\n                    .equals(action))",
      "info" : "IfStatement[23495-23680]:IfStatement[23495-23680]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23599-23680]:Block[23599-23680]"
    }, {
      "left" : "mHandler.sendEmptyMessage(MSG_DPM_STATE_CHANGED);",
      "right" : "mHandler.sendEmptyMessage(MSG_DPM_STATE_CHANGED);",
      "info" : "ExpressionStatement[23617-23666]:ExpressionStatement[23617-23666]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[23822-23831]:MarkerAnnotation[23822-23831]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[23840-23846]:Modifier[23840-23846]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[23847-23851]:PrimitiveType[23847-23851]"
    }, {
      "left" : "onProcessed",
      "right" : "onProcessed",
      "info" : "SimpleName[23852-23863]:SimpleName[23852-23863]"
    }, {
      "left" : "int fingerprintId",
      "right" : "int fingerprintId",
      "info" : "SingleVariableDeclaration[23864-23881]:SingleVariableDeclaration[23864-23881]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23883-23990]:Block[23883-23990]"
    }, {
      "left" : "mHandler.obtainMessage(MSG_FINGERPRINT_PROCESSED, fingerprintId, 0).sendToTarget();",
      "right" : "mHandler.obtainMessage(MSG_FINGERPRINT_PROCESSED, fingerprintId, 0).sendToTarget();",
      "info" : "ExpressionStatement[23897-23980]:ExpressionStatement[23897-23980]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[24001-24010]:MarkerAnnotation[24001-24010]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[24019-24025]:Modifier[24019-24025]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[24026-24030]:PrimitiveType[24026-24030]"
    }, {
      "left" : "onAcquired",
      "right" : "onAcquired",
      "info" : "SimpleName[24031-24041]:SimpleName[24031-24041]"
    }, {
      "left" : "int info",
      "right" : "int info",
      "info" : "SingleVariableDeclaration[24042-24050]:SingleVariableDeclaration[24042-24050]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24052-24149]:Block[24052-24149]"
    }, {
      "left" : "mHandler.obtainMessage(MSG_FINGERPRINT_ACQUIRED, info, 0).sendToTarget();",
      "right" : "mHandler.obtainMessage(MSG_FINGERPRINT_ACQUIRED, info, 0).sendToTarget();",
      "info" : "ExpressionStatement[24066-24139]:ExpressionStatement[24066-24139]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[24159-24168]:MarkerAnnotation[24159-24168]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[24177-24183]:Modifier[24177-24183]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[24184-24188]:PrimitiveType[24184-24188]"
    }, {
      "left" : "onError",
      "right" : "onError",
      "info" : "SimpleName[24189-24196]:SimpleName[24189-24196]"
    }, {
      "left" : "int error",
      "right" : "int error",
      "info" : "SingleVariableDeclaration[24197-24206]:SingleVariableDeclaration[24197-24206]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24208-24301]:Block[24208-24301]"
    }, {
      "left" : "if (DEBUG)",
      "right" : "if (DEBUG)",
      "info" : "IfStatement[24222-24291]:IfStatement[24222-24291]"
    }, {
      "left" : "Log.w(TAG, \"FingerprintManager reported error: \" + error);",
      "right" : "Log.w(TAG, \"FingerprintManager reported error: \" + error);",
      "info" : "ExpressionStatement[24233-24291]:ExpressionStatement[24233-24291]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[24697-24704]:Modifier[24697-24704]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[24705-24711]:Modifier[24705-24711]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[24712-24717]:TYPE_DECLARATION_KIND[24712-24717]"
    }, {
      "left" : "SimData",
      "right" : "SimData",
      "info" : "SimpleName[24718-24725]:SimpleName[24718-24725]"
    }, {
      "left" : "SimData",
      "right" : "SimData",
      "info" : "SimpleName[24821-24828]:SimpleName[24821-24828]"
    }, {
      "left" : "IccCardConstants.State state",
      "right" : "IccCardConstants.State state",
      "info" : "SingleVariableDeclaration[24829-24857]:SingleVariableDeclaration[24829-24857]"
    }, {
      "left" : "int slotId",
      "right" : "int slotId",
      "info" : "SingleVariableDeclaration[24859-24869]:SingleVariableDeclaration[24859-24869]"
    }, {
      "left" : "int subId",
      "right" : "int subId",
      "info" : "SingleVariableDeclaration[24871-24880]:SingleVariableDeclaration[24871-24880]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24882-24994]:Block[24882-24994]"
    }, {
      "left" : "this.simState = state;",
      "right" : "this.simState = state;",
      "info" : "ExpressionStatement[24896-24918]:ExpressionStatement[24896-24918]"
    }, {
      "left" : "this.slotId = slotId;",
      "right" : "this.slotId = slotId;",
      "info" : "ExpressionStatement[24931-24952]:ExpressionStatement[24931-24952]"
    }, {
      "left" : "this.subId = subId;",
      "right" : "this.subId = subId;",
      "info" : "ExpressionStatement[24965-24984]:ExpressionStatement[24965-24984]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[25004-25010]:Modifier[25004-25010]"
    }, {
      "left" : "SimData",
      "right" : "SimData",
      "info" : "SimpleType[25011-25018]:SimpleType[25011-25018]"
    }, {
      "left" : "fromIntent",
      "right" : "fromIntent",
      "info" : "SimpleName[25019-25029]:SimpleName[25019-25029]"
    }, {
      "left" : "Intent intent",
      "right" : "Intent intent",
      "info" : "SingleVariableDeclaration[25030-25043]:SingleVariableDeclaration[25030-25043]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25045-27719]:Block[25045-27719]"
    }, {
      "left" : "IccCardConstants.State state;",
      "right" : "IccCardConstants.State state;",
      "info" : "VariableDeclarationStatement[25059-25088]:VariableDeclarationStatement[25059-25088]"
    }, {
      "left" : "if (!TelephonyIntents.ACTION_SIM_STATE_CHANGED.equals(intent.getAction()))",
      "right" : "if (!TelephonyIntents.ACTION_SIM_STATE_CHANGED.equals(intent.getAction()))",
      "info" : "IfStatement[25101-25291]:IfStatement[25101-25291]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25176-25291]:Block[25176-25291]"
    }, {
      "left" : "throw new IllegalArgumentException(\"only handles intent ACTION_SIM_STATE_CHANGED\");",
      "right" : "throw new IllegalArgumentException(\"only handles intent ACTION_SIM_STATE_CHANGED\");",
      "info" : "ThrowStatement[25194-25277]:ThrowStatement[25194-25277]"
    }, {
      "left" : "String stateExtra = intent.getStringExtra(IccCardConstants.INTENT_KEY_ICC_STATE);",
      "right" : "String stateExtra = intent.getStringExtra(IccCardConstants.INTENT_KEY_ICC_STATE);",
      "info" : "VariableDeclarationStatement[25304-25385]:VariableDeclarationStatement[25304-25385]"
    }, {
      "left" : "int slotId = intent.getIntExtra(PhoneConstants.SLOT_KEY, 0);",
      "right" : "int slotId = intent.getIntExtra(PhoneConstants.SLOT_KEY, 0);",
      "info" : "VariableDeclarationStatement[25398-25458]:VariableDeclarationStatement[25398-25458]"
    }, {
      "left" : "int subId = intent.getIntExtra(PhoneConstants.SUBSCRIPTION_KEY,\n                    SubscriptionManager.INVALID_SUBSCRIPTION_ID);",
      "right" : "int subId = intent.getIntExtra(PhoneConstants.SUBSCRIPTION_KEY,\n                    SubscriptionManager.INVALID_SUBSCRIPTION_ID);",
      "info" : "VariableDeclarationStatement[25471-25600]:VariableDeclarationStatement[25471-25600]"
    }, {
      "left" : "if (IccCardConstants.INTENT_VALUE_ICC_ABSENT.equals(stateExtra))",
      "right" : "if (IccCardConstants.INTENT_VALUE_ICC_ABSENT.equals(stateExtra))",
      "info" : "IfStatement[25613-27655]:IfStatement[25613-27655]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25678-26116]:Block[25678-26116]"
    }, {
      "left" : "final String absentReason = intent\n                    .getStringExtra(IccCardConstants.INTENT_KEY_LOCKED_REASON);",
      "right" : "final String absentReason = intent\n                    .getStringExtra(IccCardConstants.INTENT_KEY_LOCKED_REASON);",
      "info" : "VariableDeclarationStatement[25696-25810]:VariableDeclarationStatement[25696-25810]"
    }, {
      "left" : "if (IccCardConstants.INTENT_VALUE_ABSENT_ON_PERM_DISABLED.equals(\n                        absentReason))",
      "right" : "if (IccCardConstants.INTENT_VALUE_ABSENT_ON_PERM_DISABLED.equals(\n                        absentReason))",
      "info" : "IfStatement[25828-26102]:IfStatement[25828-26102]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25933-26018]:Block[25933-26018]"
    }, {
      "left" : "state = IccCardConstants.State.PERM_DISABLED;",
      "right" : "state = IccCardConstants.State.PERM_DISABLED;",
      "info" : "ExpressionStatement[25955-26000]:ExpressionStatement[25955-26000]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26024-26102]:Block[26024-26102]"
    }, {
      "left" : "state = IccCardConstants.State.ABSENT;",
      "right" : "state = IccCardConstants.State.ABSENT;",
      "info" : "ExpressionStatement[26046-26084]:ExpressionStatement[26046-26084]"
    }, {
      "left" : "if (IccCardConstants.INTENT_VALUE_ICC_READY.equals(stateExtra))",
      "right" : "if (IccCardConstants.INTENT_VALUE_ICC_READY.equals(stateExtra))",
      "info" : "IfStatement[26122-27655]:IfStatement[26122-27655]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26186-26255]:Block[26186-26255]"
    }, {
      "left" : "state = IccCardConstants.State.READY;",
      "right" : "state = IccCardConstants.State.READY;",
      "info" : "ExpressionStatement[26204-26241]:ExpressionStatement[26204-26241]"
    }, {
      "left" : "if (IccCardConstants.INTENT_VALUE_ICC_LOCKED.equals(stateExtra))",
      "right" : "if (IccCardConstants.INTENT_VALUE_ICC_LOCKED.equals(stateExtra))",
      "info" : "IfStatement[26261-27655]:IfStatement[26261-27655]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26326-27051]:Block[26326-27051]"
    }, {
      "left" : "final String lockedReason = intent\n                        .getStringExtra(IccCardConstants.INTENT_KEY_LOCKED_REASON);",
      "right" : "final String lockedReason = intent\n                        .getStringExtra(IccCardConstants.INTENT_KEY_LOCKED_REASON);",
      "info" : "VariableDeclarationStatement[26344-26462]:VariableDeclarationStatement[26344-26462]"
    }, {
      "left" : "if (IccCardConstants.INTENT_VALUE_LOCKED_ON_PIN.equals(lockedReason))",
      "right" : "if (IccCardConstants.INTENT_VALUE_LOCKED_ON_PIN.equals(lockedReason))",
      "info" : "IfStatement[26479-27037]:IfStatement[26479-27037]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26549-26633]:Block[26549-26633]"
    }, {
      "left" : "state = IccCardConstants.State.PIN_REQUIRED;",
      "right" : "state = IccCardConstants.State.PIN_REQUIRED;",
      "info" : "ExpressionStatement[26571-26615]:ExpressionStatement[26571-26615]"
    }, {
      "left" : "if (IccCardConstants.INTENT_VALUE_LOCKED_ON_PUK.equals(lockedReason))",
      "right" : "if (IccCardConstants.INTENT_VALUE_LOCKED_ON_PUK.equals(lockedReason))",
      "info" : "IfStatement[26639-27037]:IfStatement[26639-27037]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26709-26793]:Block[26709-26793]"
    }, {
      "left" : "state = IccCardConstants.State.PUK_REQUIRED;",
      "right" : "state = IccCardConstants.State.PUK_REQUIRED;",
      "info" : "ExpressionStatement[26731-26775]:ExpressionStatement[26731-26775]"
    }, {
      "left" : "if (IccCardConstants.INTENT_VALUE_LOCKED_PERSO.equals(lockedReason))",
      "right" : "if (IccCardConstants.INTENT_VALUE_LOCKED_PERSO.equals(lockedReason))",
      "info" : "IfStatement[26799-27037]:IfStatement[26799-27037]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26868-26952]:Block[26868-26952]"
    }, {
      "left" : "state = IccCardConstants.State.PERSO_LOCKED;",
      "right" : "state = IccCardConstants.State.PERSO_LOCKED;",
      "info" : "ExpressionStatement[26890-26934]:ExpressionStatement[26890-26934]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26958-27037]:Block[26958-27037]"
    }, {
      "left" : "state = IccCardConstants.State.UNKNOWN;",
      "right" : "state = IccCardConstants.State.UNKNOWN;",
      "info" : "ExpressionStatement[26980-27019]:ExpressionStatement[26980-27019]"
    }, {
      "left" : "if (IccCardConstants.INTENT_VALUE_ICC_CARD_IO_ERROR.equals(stateExtra))",
      "right" : "if (IccCardConstants.INTENT_VALUE_ICC_CARD_IO_ERROR.equals(stateExtra))",
      "info" : "IfStatement[27057-27655]:IfStatement[27057-27655]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27129-27206]:Block[27129-27206]"
    }, {
      "left" : "state = IccCardConstants.State.CARD_IO_ERROR;",
      "right" : "state = IccCardConstants.State.CARD_IO_ERROR;",
      "info" : "ExpressionStatement[27147-27192]:ExpressionStatement[27147-27192]"
    }, {
      "left" : "if (IccCardConstants.INTENT_VALUE_ICC_LOADED.equals(stateExtra)\n                        || IccCardConstants.INTENT_VALUE_ICC_IMSI.equals(stateExtra))",
      "right" : "if (IccCardConstants.INTENT_VALUE_ICC_LOADED.equals(stateExtra)\n                        || IccCardConstants.INTENT_VALUE_ICC_IMSI.equals(stateExtra))",
      "info" : "IfStatement[27212-27655]:IfStatement[27212-27655]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27362-27578]:Block[27362-27578]"
    }, {
      "left" : "state = IccCardConstants.State.READY;",
      "right" : "state = IccCardConstants.State.READY;",
      "info" : "ExpressionStatement[27527-27564]:ExpressionStatement[27527-27564]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27584-27655]:Block[27584-27655]"
    }, {
      "left" : "state = IccCardConstants.State.UNKNOWN;",
      "right" : "state = IccCardConstants.State.UNKNOWN;",
      "info" : "ExpressionStatement[27602-27641]:ExpressionStatement[27602-27641]"
    }, {
      "left" : "return new SimData(state, slotId, subId);",
      "right" : "return new SimData(state, slotId, subId);",
      "info" : "ReturnStatement[27668-27709]:ReturnStatement[27668-27709]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[27729-27735]:Modifier[27729-27735]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[27736-27742]:SimpleType[27736-27742]"
    }, {
      "left" : "toString",
      "right" : "toString",
      "info" : "SimpleName[27743-27751]:SimpleName[27743-27751]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27754-27860]:Block[27754-27860]"
    }, {
      "left" : "return \"SimData [slot=\" + slotId + \", sub=\" + subId + \", state=\" + simState + \"]\";",
      "right" : "return \"SimData [slot=\" + slotId + \", sub=\" + subId + \", state=\" + simState + \"]\";",
      "info" : "ReturnStatement[27768-27850]:ReturnStatement[27768-27850]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[27872-27878]:Modifier[27872-27878]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[27879-27885]:Modifier[27879-27885]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[27886-27891]:TYPE_DECLARATION_KIND[27886-27891]"
    }, {
      "left" : "BatteryStatus",
      "right" : "BatteryStatus",
      "info" : "SimpleName[27892-27905]:SimpleName[27892-27905]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[28048-28054]:Modifier[28048-28054]"
    }, {
      "left" : "BatteryStatus",
      "right" : "BatteryStatus",
      "info" : "SimpleName[28055-28068]:SimpleName[28055-28068]"
    }, {
      "left" : "int status",
      "right" : "int status",
      "info" : "SingleVariableDeclaration[28069-28079]:SingleVariableDeclaration[28069-28079]"
    }, {
      "left" : "int level",
      "right" : "int level",
      "info" : "SingleVariableDeclaration[28081-28090]:SingleVariableDeclaration[28081-28090]"
    }, {
      "left" : "int plugged",
      "right" : "int plugged",
      "info" : "SingleVariableDeclaration[28092-28103]:SingleVariableDeclaration[28092-28103]"
    }, {
      "left" : "int health",
      "right" : "int health",
      "info" : "SingleVariableDeclaration[28105-28115]:SingleVariableDeclaration[28105-28115]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28117-28264]:Block[28117-28264]"
    }, {
      "left" : "this.status = status;",
      "right" : "this.status = status;",
      "info" : "ExpressionStatement[28131-28152]:ExpressionStatement[28131-28152]"
    }, {
      "left" : "this.level = level;",
      "right" : "this.level = level;",
      "info" : "ExpressionStatement[28165-28184]:ExpressionStatement[28165-28184]"
    }, {
      "left" : "this.plugged = plugged;",
      "right" : "this.plugged = plugged;",
      "info" : "ExpressionStatement[28197-28220]:ExpressionStatement[28197-28220]"
    }, {
      "left" : "this.health = health;",
      "right" : "this.health = health;",
      "info" : "ExpressionStatement[28233-28254]:ExpressionStatement[28233-28254]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[28432-28438]:Modifier[28432-28438]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[28439-28446]:PrimitiveType[28439-28446]"
    }, {
      "left" : "isPluggedIn",
      "right" : "isPluggedIn",
      "info" : "SimpleName[28447-28458]:SimpleName[28447-28458]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28461-28681]:Block[28461-28681]"
    }, {
      "left" : "return plugged == BatteryManager.BATTERY_PLUGGED_AC\n                    || plugged == BatteryManager.BATTERY_PLUGGED_USB\n                    || plugged == BatteryManager.BATTERY_PLUGGED_WIRELESS;",
      "right" : "return plugged == BatteryManager.BATTERY_PLUGGED_AC\n                    || plugged == BatteryManager.BATTERY_PLUGGED_USB\n                    || plugged == BatteryManager.BATTERY_PLUGGED_WIRELESS;",
      "info" : "ReturnStatement[28476-28671]:ReturnStatement[28476-28671]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[28981-28987]:Modifier[28981-28987]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[28988-28995]:PrimitiveType[28988-28995]"
    }, {
      "left" : "isCharged",
      "right" : "isCharged",
      "info" : "SimpleName[28996-29005]:SimpleName[28996-29005]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29008-29085]:Block[29008-29085]"
    }, {
      "left" : "return status == BATTERY_STATUS_FULL || level >= 100;",
      "right" : "return status == BATTERY_STATUS_FULL || level >= 100;",
      "info" : "ReturnStatement[29022-29075]:ReturnStatement[29022-29075]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[29220-29226]:Modifier[29220-29226]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[29227-29234]:PrimitiveType[29227-29234]"
    }, {
      "left" : "isBatteryLow",
      "right" : "isBatteryLow",
      "info" : "SimpleName[29235-29247]:SimpleName[29235-29247]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29250-29311]:Block[29250-29311]"
    }, {
      "left" : "return level < LOW_BATTERY_THRESHOLD;",
      "right" : "return level < LOW_BATTERY_THRESHOLD;",
      "info" : "ReturnStatement[29264-29301]:ReturnStatement[29264-29301]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[29324-29330]:Modifier[29324-29330]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[29331-29337]:Modifier[29331-29337]"
    }, {
      "left" : "KeyguardUpdateMonitor",
      "right" : "KeyguardUpdateMonitor",
      "info" : "SimpleType[29338-29359]:SimpleType[29338-29359]"
    }, {
      "left" : "getInstance",
      "right" : "getInstance",
      "info" : "SimpleName[29360-29371]:SimpleName[29360-29371]"
    }, {
      "left" : "Context context",
      "right" : "Context context",
      "info" : "SingleVariableDeclaration[29372-29387]:SingleVariableDeclaration[29372-29387]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29389-29525]:Block[29389-29525]"
    }, {
      "left" : "if (sInstance == null)",
      "right" : "if (sInstance == null)",
      "info" : "IfStatement[29399-29493]:IfStatement[29399-29493]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29422-29493]:Block[29422-29493]"
    }, {
      "left" : "sInstance = new KeyguardUpdateMonitor(context);",
      "right" : "sInstance = new KeyguardUpdateMonitor(context);",
      "info" : "ExpressionStatement[29436-29483]:ExpressionStatement[29436-29483]"
    }, {
      "left" : "return sInstance;",
      "right" : "return sInstance;",
      "info" : "ReturnStatement[29502-29519]:ReturnStatement[29502-29519]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[29531-29540]:Modifier[29531-29540]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[29541-29545]:PrimitiveType[29541-29545]"
    }, {
      "left" : "handleScreenTurnedOn",
      "right" : "handleScreenTurnedOn",
      "info" : "SimpleName[29546-29566]:SimpleName[29546-29566]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29569-29873]:Block[29569-29873]"
    }, {
      "left" : "startFingerAuthIfUsingFingerprint();",
      "right" : "startFingerAuthIfUsingFingerprint();",
      "info" : "ExpressionStatement[29579-29615]:ExpressionStatement[29579-29615]"
    }, {
      "left" : "final int count = mCallbacks.size();",
      "right" : "final int count = mCallbacks.size();",
      "info" : "VariableDeclarationStatement[29624-29660]:VariableDeclarationStatement[29624-29660]"
    }, {
      "left" : "for (int i = 0; i < count; i++)",
      "right" : "for (int i = 0; i < count; i++)",
      "info" : "ForStatement[29669-29867]:ForStatement[29669-29867]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29701-29867]:Block[29701-29867]"
    }, {
      "left" : "KeyguardUpdateMonitorCallback cb = mCallbacks.get(i).get();",
      "right" : "KeyguardUpdateMonitorCallback cb = mCallbacks.get(i).get();",
      "info" : "VariableDeclarationStatement[29715-29774]:VariableDeclarationStatement[29715-29774]"
    }, {
      "left" : "if (cb != null)",
      "right" : "if (cb != null)",
      "info" : "IfStatement[29787-29857]:IfStatement[29787-29857]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29803-29857]:Block[29803-29857]"
    }, {
      "left" : "cb.onScreenTurnedOn();",
      "right" : "cb.onScreenTurnedOn();",
      "info" : "ExpressionStatement[29821-29843]:ExpressionStatement[29821-29843]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[29879-29888]:Modifier[29879-29888]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[29889-29893]:PrimitiveType[29889-29893]"
    }, {
      "left" : "handleScreenTurnedOff",
      "right" : "handleScreenTurnedOff",
      "info" : "SimpleName[29894-29915]:SimpleName[29894-29915]"
    }, {
      "left" : "int arg1",
      "right" : "int arg1",
      "info" : "SingleVariableDeclaration[29916-29924]:SingleVariableDeclaration[29916-29924]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29926-30269]:Block[29926-30269]"
    }, {
      "left" : "stopAuthenticatingFingerprint();",
      "right" : "stopAuthenticatingFingerprint();",
      "info" : "ExpressionStatement[29936-29968]:ExpressionStatement[29936-29968]"
    }, {
      "left" : "clearFingerprintRecognized();",
      "right" : "clearFingerprintRecognized();",
      "info" : "ExpressionStatement[29977-30006]:ExpressionStatement[29977-30006]"
    }, {
      "left" : "final int count = mCallbacks.size();",
      "right" : "final int count = mCallbacks.size();",
      "info" : "VariableDeclarationStatement[30015-30051]:VariableDeclarationStatement[30015-30051]"
    }, {
      "left" : "for (int i = 0; i < count; i++)",
      "right" : "for (int i = 0; i < count; i++)",
      "info" : "ForStatement[30060-30263]:ForStatement[30060-30263]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30092-30263]:Block[30092-30263]"
    }, {
      "left" : "KeyguardUpdateMonitorCallback cb = mCallbacks.get(i).get();",
      "right" : "KeyguardUpdateMonitorCallback cb = mCallbacks.get(i).get();",
      "info" : "VariableDeclarationStatement[30106-30165]:VariableDeclarationStatement[30106-30165]"
    }, {
      "left" : "if (cb != null)",
      "right" : "if (cb != null)",
      "info" : "IfStatement[30178-30253]:IfStatement[30178-30253]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30194-30253]:Block[30194-30253]"
    }, {
      "left" : "cb.onScreenTurnedOff(arg1);",
      "right" : "cb.onScreenTurnedOff(arg1);",
      "info" : "ExpressionStatement[30212-30239]:ExpressionStatement[30212-30239]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[30340-30346]:Modifier[30340-30346]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[30347-30351]:PrimitiveType[30347-30351]"
    }, {
      "left" : "dispatchSetBackground",
      "right" : "dispatchSetBackground",
      "info" : "SimpleName[30352-30373]:SimpleName[30352-30373]"
    }, {
      "left" : "Bitmap bmp",
      "right" : "Bitmap bmp",
      "info" : "SingleVariableDeclaration[30374-30384]:SingleVariableDeclaration[30374-30384]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30386-30703]:Block[30386-30703]"
    }, {
      "left" : "if (DEBUG)",
      "right" : "if (DEBUG)",
      "info" : "IfStatement[30396-30443]:IfStatement[30396-30443]"
    }, {
      "left" : "Log.d(TAG, \"dispatchSetBackground\");",
      "right" : "Log.d(TAG, \"dispatchSetBackground\");",
      "info" : "ExpressionStatement[30407-30443]:ExpressionStatement[30407-30443]"
    }, {
      "left" : "final int count = mCallbacks.size();",
      "right" : "final int count = mCallbacks.size();",
      "info" : "VariableDeclarationStatement[30452-30488]:VariableDeclarationStatement[30452-30488]"
    }, {
      "left" : "for (int i = 0; i < count; i++)",
      "right" : "for (int i = 0; i < count; i++)",
      "info" : "ForStatement[30497-30697]:ForStatement[30497-30697]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30529-30697]:Block[30529-30697]"
    }, {
      "left" : "KeyguardUpdateMonitorCallback cb = mCallbacks.get(i).get();",
      "right" : "KeyguardUpdateMonitorCallback cb = mCallbacks.get(i).get();",
      "info" : "VariableDeclarationStatement[30543-30602]:VariableDeclarationStatement[30543-30602]"
    }, {
      "left" : "if (cb != null)",
      "right" : "if (cb != null)",
      "info" : "IfStatement[30615-30687]:IfStatement[30615-30687]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30631-30687]:Block[30631-30687]"
    }, {
      "left" : "cb.onSetBackground(bmp);",
      "right" : "cb.onSetBackground(bmp);",
      "info" : "ExpressionStatement[30649-30673]:ExpressionStatement[30649-30673]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[30709-30716]:Modifier[30709-30716]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[30717-30721]:PrimitiveType[30717-30721]"
    }, {
      "left" : "handleAirplaneModeChanged",
      "right" : "handleAirplaneModeChanged",
      "info" : "SimpleName[30722-30747]:SimpleName[30722-30747]"
    }, {
      "left" : "boolean on",
      "right" : "boolean on",
      "info" : "SingleVariableDeclaration[30748-30758]:SingleVariableDeclaration[30748-30758]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30760-30993]:Block[30760-30993]"
    }, {
      "left" : "for (int i = 0; i < mCallbacks.size(); i++)",
      "right" : "for (int i = 0; i < mCallbacks.size(); i++)",
      "info" : "ForStatement[30770-30987]:ForStatement[30770-30987]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30814-30987]:Block[30814-30987]"
    }, {
      "left" : "KeyguardUpdateMonitorCallback cb = mCallbacks.get(i).get();",
      "right" : "KeyguardUpdateMonitorCallback cb = mCallbacks.get(i).get();",
      "info" : "VariableDeclarationStatement[30828-30887]:VariableDeclarationStatement[30828-30887]"
    }, {
      "left" : "if (cb != null)",
      "right" : "if (cb != null)",
      "info" : "IfStatement[30900-30977]:IfStatement[30900-30977]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30916-30977]:Block[30916-30977]"
    }, {
      "left" : "cb.onAirplaneModeChanged(on);",
      "right" : "cb.onAirplaneModeChanged(on);",
      "info" : "ExpressionStatement[30934-30963]:ExpressionStatement[30934-30963]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[30999-31006]:Modifier[30999-31006]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[31007-31011]:PrimitiveType[31007-31011]"
    }, {
      "left" : "handleUserInfoChanged",
      "right" : "handleUserInfoChanged",
      "info" : "SimpleName[31012-31033]:SimpleName[31012-31033]"
    }, {
      "left" : "int userId",
      "right" : "int userId",
      "info" : "SingleVariableDeclaration[31034-31044]:SingleVariableDeclaration[31034-31044]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31046-31279]:Block[31046-31279]"
    }, {
      "left" : "for (int i = 0; i < mCallbacks.size(); i++)",
      "right" : "for (int i = 0; i < mCallbacks.size(); i++)",
      "info" : "ForStatement[31056-31273]:ForStatement[31056-31273]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31100-31273]:Block[31100-31273]"
    }, {
      "left" : "KeyguardUpdateMonitorCallback cb = mCallbacks.get(i).get();",
      "right" : "KeyguardUpdateMonitorCallback cb = mCallbacks.get(i).get();",
      "info" : "VariableDeclarationStatement[31114-31173]:VariableDeclarationStatement[31114-31173]"
    }, {
      "left" : "if (cb != null)",
      "right" : "if (cb != null)",
      "info" : "IfStatement[31186-31263]:IfStatement[31186-31263]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31202-31263]:Block[31202-31263]"
    }, {
      "left" : "cb.onUserInfoChanged(userId);",
      "right" : "cb.onUserInfoChanged(userId);",
      "info" : "ExpressionStatement[31220-31249]:ExpressionStatement[31220-31249]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[31285-31292]:Modifier[31285-31292]"
    }, {
      "left" : "KeyguardUpdateMonitor",
      "right" : "KeyguardUpdateMonitor",
      "info" : "SimpleName[31293-31314]:SimpleName[31293-31314]"
    }, {
      "left" : "Context context",
      "right" : "Context context",
      "info" : "SingleVariableDeclaration[31315-31330]:SingleVariableDeclaration[31315-31330]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31332-34778]:Block[31332-34778]"
    }, {
      "left" : "mContext = context;",
      "right" : "mContext = context;",
      "info" : "ExpressionStatement[31342-31361]:ExpressionStatement[31342-31361]"
    }, {
      "left" : "mSubscriptionManager = SubscriptionManager.from(context);",
      "right" : "mSubscriptionManager = SubscriptionManager.from(context);",
      "info" : "ExpressionStatement[31370-31427]:ExpressionStatement[31370-31427]"
    }, {
      "left" : "mDeviceProvisioned = isDeviceProvisionedInSettingsDb();",
      "right" : "mDeviceProvisioned = isDeviceProvisionedInSettingsDb();",
      "info" : "ExpressionStatement[31436-31491]:ExpressionStatement[31436-31491]"
    }, {
      "left" : "if (!mDeviceProvisioned)",
      "right" : "if (!mDeviceProvisioned)",
      "info" : "IfStatement[31648-31726]:IfStatement[31648-31726]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31673-31726]:Block[31673-31726]"
    }, {
      "left" : "watchForDeviceProvisioning();",
      "right" : "watchForDeviceProvisioning();",
      "info" : "ExpressionStatement[31687-31716]:ExpressionStatement[31687-31716]"
    }, {
      "left" : "mBatteryStatus = new BatteryStatus(BATTERY_STATUS_UNKNOWN, 100, 0, 0);",
      "right" : "mBatteryStatus = new BatteryStatus(BATTERY_STATUS_UNKNOWN, 100, 0, 0);",
      "info" : "ExpressionStatement[31736-31806]:ExpressionStatement[31736-31806]"
    }, {
      "left" : "final IntentFilter filter = new IntentFilter();",
      "right" : "final IntentFilter filter = new IntentFilter();",
      "info" : "VariableDeclarationStatement[31857-31904]:VariableDeclarationStatement[31857-31904]"
    }, {
      "left" : "filter.addAction(Intent.ACTION_TIME_TICK);",
      "right" : "filter.addAction(Intent.ACTION_TIME_TICK);",
      "info" : "ExpressionStatement[31913-31955]:ExpressionStatement[31913-31955]"
    }, {
      "left" : "filter.addAction(Intent.ACTION_TIME_CHANGED);",
      "right" : "filter.addAction(Intent.ACTION_TIME_CHANGED);",
      "info" : "ExpressionStatement[31964-32009]:ExpressionStatement[31964-32009]"
    }, {
      "left" : "filter.addAction(Intent.ACTION_BATTERY_CHANGED);",
      "right" : "filter.addAction(Intent.ACTION_BATTERY_CHANGED);",
      "info" : "ExpressionStatement[32018-32066]:ExpressionStatement[32018-32066]"
    }, {
      "left" : "filter.addAction(Intent.ACTION_TIMEZONE_CHANGED);",
      "right" : "filter.addAction(Intent.ACTION_TIMEZONE_CHANGED);",
      "info" : "ExpressionStatement[32075-32124]:ExpressionStatement[32075-32124]"
    }, {
      "left" : "filter.addAction(TelephonyIntents.ACTION_SIM_STATE_CHANGED);",
      "right" : "filter.addAction(TelephonyIntents.ACTION_SIM_STATE_CHANGED);",
      "info" : "ExpressionStatement[32133-32193]:ExpressionStatement[32133-32193]"
    }, {
      "left" : "filter.addAction(TelephonyManager.ACTION_PHONE_STATE_CHANGED);",
      "right" : "filter.addAction(TelephonyManager.ACTION_PHONE_STATE_CHANGED);",
      "info" : "ExpressionStatement[32202-32264]:ExpressionStatement[32202-32264]"
    }, {
      "left" : "filter.addAction(AudioManager.RINGER_MODE_CHANGED_ACTION);",
      "right" : "filter.addAction(AudioManager.RINGER_MODE_CHANGED_ACTION);",
      "info" : "ExpressionStatement[32273-32331]:ExpressionStatement[32273-32331]"
    }, {
      "left" : "filter.addAction(Intent.ACTION_USER_REMOVED);",
      "right" : "filter.addAction(Intent.ACTION_USER_REMOVED);",
      "info" : "ExpressionStatement[32340-32385]:ExpressionStatement[32340-32385]"
    }, {
      "left" : "filter.addAction(Intent.ACTION_AIRPLANE_MODE_CHANGED);",
      "right" : "filter.addAction(Intent.ACTION_AIRPLANE_MODE_CHANGED);",
      "info" : "ExpressionStatement[32394-32448]:ExpressionStatement[32394-32448]"
    }, {
      "left" : "filter.addAction(TelephonyIntents.ACTION_SERVICE_STATE_CHANGED);",
      "right" : "filter.addAction(TelephonyIntents.ACTION_SERVICE_STATE_CHANGED);",
      "info" : "ExpressionStatement[32457-32521]:ExpressionStatement[32457-32521]"
    }, {
      "left" : "context.registerReceiver(mBroadcastReceiver, filter);",
      "right" : "context.registerReceiver(mBroadcastReceiver, filter);",
      "info" : "ExpressionStatement[32531-32584]:ExpressionStatement[32531-32584]"
    }, {
      "left" : "final IntentFilter bootCompleteFilter = new IntentFilter();",
      "right" : "final IntentFilter bootCompleteFilter = new IntentFilter();",
      "info" : "VariableDeclarationStatement[32594-32653]:VariableDeclarationStatement[32594-32653]"
    }, {
      "left" : "bootCompleteFilter.setPriority(IntentFilter.SYSTEM_HIGH_PRIORITY);",
      "right" : "bootCompleteFilter.setPriority(IntentFilter.SYSTEM_HIGH_PRIORITY);",
      "info" : "ExpressionStatement[32662-32728]:ExpressionStatement[32662-32728]"
    }, {
      "left" : "bootCompleteFilter.addAction(Intent.ACTION_BOOT_COMPLETED);",
      "right" : "bootCompleteFilter.addAction(Intent.ACTION_BOOT_COMPLETED);",
      "info" : "ExpressionStatement[32737-32796]:ExpressionStatement[32737-32796]"
    }, {
      "left" : "context.registerReceiver(mBroadcastReceiver, bootCompleteFilter);",
      "right" : "context.registerReceiver(mBroadcastReceiver, bootCompleteFilter);",
      "info" : "ExpressionStatement[32805-32870]:ExpressionStatement[32805-32870]"
    }, {
      "left" : "final IntentFilter allUserFilter = new IntentFilter();",
      "right" : "final IntentFilter allUserFilter = new IntentFilter();",
      "info" : "VariableDeclarationStatement[32880-32934]:VariableDeclarationStatement[32880-32934]"
    }, {
      "left" : "allUserFilter.addAction(Intent.ACTION_USER_INFO_CHANGED);",
      "right" : "allUserFilter.addAction(Intent.ACTION_USER_INFO_CHANGED);",
      "info" : "ExpressionStatement[32943-33000]:ExpressionStatement[32943-33000]"
    }, {
      "left" : "allUserFilter.addAction(AlarmManager.ACTION_NEXT_ALARM_CLOCK_CHANGED);",
      "right" : "allUserFilter.addAction(AlarmManager.ACTION_NEXT_ALARM_CLOCK_CHANGED);",
      "info" : "ExpressionStatement[33009-33079]:ExpressionStatement[33009-33079]"
    }, {
      "left" : "allUserFilter.addAction(ACTION_FACE_UNLOCK_STARTED);",
      "right" : "allUserFilter.addAction(ACTION_FACE_UNLOCK_STARTED);",
      "info" : "ExpressionStatement[33088-33140]:ExpressionStatement[33088-33140]"
    }, {
      "left" : "allUserFilter.addAction(ACTION_FACE_UNLOCK_STOPPED);",
      "right" : "allUserFilter.addAction(ACTION_FACE_UNLOCK_STOPPED);",
      "info" : "ExpressionStatement[33149-33201]:ExpressionStatement[33149-33201]"
    }, {
      "left" : "allUserFilter.addAction(DevicePolicyManager.ACTION_DEVICE_POLICY_MANAGER_STATE_CHANGED);",
      "right" : "allUserFilter.addAction(DevicePolicyManager.ACTION_DEVICE_POLICY_MANAGER_STATE_CHANGED);",
      "info" : "ExpressionStatement[33210-33298]:ExpressionStatement[33210-33298]"
    }, {
      "left" : "context.registerReceiverAsUser(mBroadcastAllReceiver, UserHandle.ALL, allUserFilter,\n                null, null);",
      "right" : "context.registerReceiverAsUser(mBroadcastAllReceiver, UserHandle.ALL, allUserFilter,\n                null, null);",
      "info" : "ExpressionStatement[33307-33420]:ExpressionStatement[33307-33420]"
    }, {
      "left" : "mSubscriptionManager.addOnSubscriptionsChangedListener(mSubscriptionListener);",
      "right" : "mSubscriptionManager.addOnSubscriptionsChangedListener(mSubscriptionListener);",
      "info" : "ExpressionStatement[33430-33508]:ExpressionStatement[33430-33508]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[33517-34515]:TryStatement[33517-34515]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33521-34397]:Block[33521-34397]"
    }, {
      "left" : "ActivityManagerNative.getDefault().registerUserSwitchObserver(\n                    new IUserSwitchObserver.Stub() {\n                        @Override\n                        public void onUserSwitching(int newUserId, IRemoteCallback reply) {\n                            mHandler.sendMessage(mHandler.obtainMessage(MSG_USER_SWITCHING,\n                                    newUserId, 0, reply));\n                            mSwitchingUser = true;\n                        }\n                        @Override\n                        public void onUserSwitchComplete(int newUserId) throws RemoteException {\n                            mHandler.sendMessage(mHandler.obtainMessage(MSG_USER_SWITCH_COMPLETE,\n                                    newUserId, 0));\n                            mSwitchingUser = false;\n                        }\n                    });",
      "right" : "ActivityManagerNative.getDefault().registerUserSwitchObserver(\n                    new IUserSwitchObserver.Stub() {\n                        @Override\n                        public void onUserSwitching(int newUserId, IRemoteCallback reply) {\n                            mHandler.sendMessage(mHandler.obtainMessage(MSG_USER_SWITCHING,\n                                    newUserId, 0, reply));\n                            mSwitchingUser = true;\n                        }\n                        @Override\n                        public void onUserSwitchComplete(int newUserId) throws RemoteException {\n                            mHandler.sendMessage(mHandler.obtainMessage(MSG_USER_SWITCH_COMPLETE,\n                                    newUserId, 0));\n                            mSwitchingUser = false;\n                        }\n                    });",
      "info" : "ExpressionStatement[33535-34387]:ExpressionStatement[33535-34387]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[33675-33684]:MarkerAnnotation[33675-33684]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[33709-33715]:Modifier[33709-33715]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[33716-33720]:PrimitiveType[33716-33720]"
    }, {
      "left" : "onUserSwitching",
      "right" : "onUserSwitching",
      "info" : "SimpleName[33721-33736]:SimpleName[33721-33736]"
    }, {
      "left" : "int newUserId",
      "right" : "int newUserId",
      "info" : "SingleVariableDeclaration[33737-33750]:SingleVariableDeclaration[33737-33750]"
    }, {
      "left" : "IRemoteCallback reply",
      "right" : "IRemoteCallback reply",
      "info" : "SingleVariableDeclaration[33752-33773]:SingleVariableDeclaration[33752-33773]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33775-34004]:Block[33775-34004]"
    }, {
      "left" : "mHandler.sendMessage(mHandler.obtainMessage(MSG_USER_SWITCHING,\n                                    newUserId, 0, reply));",
      "right" : "mHandler.sendMessage(mHandler.obtainMessage(MSG_USER_SWITCHING,\n                                    newUserId, 0, reply));",
      "info" : "ExpressionStatement[33805-33927]:ExpressionStatement[33805-33927]"
    }, {
      "left" : "mSwitchingUser = true;",
      "right" : "mSwitchingUser = true;",
      "info" : "ExpressionStatement[33956-33978]:ExpressionStatement[33956-33978]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[34029-34038]:MarkerAnnotation[34029-34038]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[34063-34069]:Modifier[34063-34069]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[34070-34074]:PrimitiveType[34070-34074]"
    }, {
      "left" : "onUserSwitchComplete",
      "right" : "onUserSwitchComplete",
      "info" : "SimpleName[34075-34095]:SimpleName[34075-34095]"
    }, {
      "left" : "int newUserId",
      "right" : "int newUserId",
      "info" : "SingleVariableDeclaration[34096-34109]:SingleVariableDeclaration[34096-34109]"
    }, {
      "left" : "RemoteException",
      "right" : "RemoteException",
      "info" : "SimpleType[34118-34133]:SimpleType[34118-34133]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34134-34363]:Block[34134-34363]"
    }, {
      "left" : "mHandler.sendMessage(mHandler.obtainMessage(MSG_USER_SWITCH_COMPLETE,\n                                    newUserId, 0));",
      "right" : "mHandler.sendMessage(mHandler.obtainMessage(MSG_USER_SWITCH_COMPLETE,\n                                    newUserId, 0));",
      "info" : "ExpressionStatement[34164-34285]:ExpressionStatement[34164-34285]"
    }, {
      "left" : "mSwitchingUser = false;",
      "right" : "mSwitchingUser = false;",
      "info" : "ExpressionStatement[34314-34337]:ExpressionStatement[34314-34337]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34424-34515]:Block[34424-34515]"
    }, {
      "left" : "e.printStackTrace();",
      "right" : "e.printStackTrace();",
      "info" : "ExpressionStatement[34485-34505]:ExpressionStatement[34485-34505]"
    }, {
      "left" : "TrustManager trustManager = (TrustManager) context.getSystemService(Context.TRUST_SERVICE);",
      "right" : "TrustManager trustManager = (TrustManager) context.getSystemService(Context.TRUST_SERVICE);",
      "info" : "VariableDeclarationStatement[34525-34616]:VariableDeclarationStatement[34525-34616]"
    }, {
      "left" : "trustManager.registerTrustListener(this);",
      "right" : "trustManager.registerTrustListener(this);",
      "info" : "ExpressionStatement[34625-34666]:ExpressionStatement[34625-34666]"
    }, {
      "left" : "mLockPatternUtils = new LockPatternUtils(mContext);",
      "right" : "mLockPatternUtils = new LockPatternUtils(mContext);",
      "info" : "ExpressionStatement[34676-34727]:ExpressionStatement[34676-34727]"
    }, {
      "left" : "startFingerAuthIfUsingFingerprint();",
      "right" : "startFingerAuthIfUsingFingerprint();",
      "info" : "ExpressionStatement[34736-34772]:ExpressionStatement[34736-34772]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[34784-34791]:Modifier[34784-34791]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[34792-34799]:PrimitiveType[34792-34799]"
    }, {
      "left" : "isDeviceProvisionedInSettingsDb",
      "right" : "isDeviceProvisionedInSettingsDb",
      "info" : "SimpleName[34800-34831]:SimpleName[34800-34831]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34834-34971]:Block[34834-34971]"
    }, {
      "left" : "return Settings.Global.getInt(mContext.getContentResolver(),\n                Settings.Global.DEVICE_PROVISIONED, 0) != 0;",
      "right" : "return Settings.Global.getInt(mContext.getContentResolver(),\n                Settings.Global.DEVICE_PROVISIONED, 0) != 0;",
      "info" : "ReturnStatement[34844-34965]:ReturnStatement[34844-34965]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[34977-34984]:Modifier[34977-34984]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[34985-34989]:PrimitiveType[34985-34989]"
    }, {
      "left" : "watchForDeviceProvisioning",
      "right" : "watchForDeviceProvisioning",
      "info" : "SimpleName[34990-35016]:SimpleName[34990-35016]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35019-36170]:Block[35019-36170]"
    }, {
      "left" : "mDeviceProvisionedObserver = new ContentObserver(mHandler) {\n            @Override\n            public void onChange(boolean selfChange) {\n                super.onChange(selfChange);\n                mDeviceProvisioned = isDeviceProvisionedInSettingsDb();\n                if (mDeviceProvisioned) {\n                    mHandler.sendEmptyMessage(MSG_DEVICE_PROVISIONED);\n                }\n                if (DEBUG) Log.d(TAG, \"DEVICE_PROVISIONED state = \" + mDeviceProvisioned);\n            }\n        };",
      "right" : "mDeviceProvisionedObserver = new ContentObserver(mHandler) {\n            @Override\n            public void onChange(boolean selfChange) {\n                super.onChange(selfChange);\n                mDeviceProvisioned = isDeviceProvisionedInSettingsDb();\n                if (mDeviceProvisioned) {\n                    mHandler.sendEmptyMessage(MSG_DEVICE_PROVISIONED);\n                }\n                if (DEBUG) Log.d(TAG, \"DEVICE_PROVISIONED state = \" + mDeviceProvisioned);\n            }\n        };",
      "info" : "ExpressionStatement[35029-35529]:ExpressionStatement[35029-35529]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[35102-35111]:MarkerAnnotation[35102-35111]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[35124-35130]:Modifier[35124-35130]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[35131-35135]:PrimitiveType[35131-35135]"
    }, {
      "left" : "onChange",
      "right" : "onChange",
      "info" : "SimpleName[35136-35144]:SimpleName[35136-35144]"
    }, {
      "left" : "boolean selfChange",
      "right" : "boolean selfChange",
      "info" : "SingleVariableDeclaration[35145-35163]:SingleVariableDeclaration[35145-35163]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35165-35518]:Block[35165-35518]"
    }, {
      "left" : "super.onChange(selfChange);",
      "right" : "super.onChange(selfChange);",
      "info" : "ExpressionStatement[35183-35210]:ExpressionStatement[35183-35210]"
    }, {
      "left" : "mDeviceProvisioned = isDeviceProvisionedInSettingsDb();",
      "right" : "mDeviceProvisioned = isDeviceProvisionedInSettingsDb();",
      "info" : "ExpressionStatement[35227-35282]:ExpressionStatement[35227-35282]"
    }, {
      "left" : "if (mDeviceProvisioned)",
      "right" : "if (mDeviceProvisioned)",
      "info" : "IfStatement[35299-35413]:IfStatement[35299-35413]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35323-35413]:Block[35323-35413]"
    }, {
      "left" : "mHandler.sendEmptyMessage(MSG_DEVICE_PROVISIONED);",
      "right" : "mHandler.sendEmptyMessage(MSG_DEVICE_PROVISIONED);",
      "info" : "ExpressionStatement[35345-35395]:ExpressionStatement[35345-35395]"
    }, {
      "left" : "if (DEBUG)",
      "right" : "if (DEBUG)",
      "info" : "IfStatement[35430-35504]:IfStatement[35430-35504]"
    }, {
      "left" : "Log.d(TAG, \"DEVICE_PROVISIONED state = \" + mDeviceProvisioned);",
      "right" : "Log.d(TAG, \"DEVICE_PROVISIONED state = \" + mDeviceProvisioned);",
      "info" : "ExpressionStatement[35441-35504]:ExpressionStatement[35441-35504]"
    }, {
      "left" : "mContext.getContentResolver().registerContentObserver(\n                Settings.Global.getUriFor(Settings.Global.DEVICE_PROVISIONED),\n                false, mDeviceProvisionedObserver);",
      "right" : "mContext.getContentResolver().registerContentObserver(\n                Settings.Global.getUriFor(Settings.Global.DEVICE_PROVISIONED),\n                false, mDeviceProvisionedObserver);",
      "info" : "ExpressionStatement[35539-35724]:ExpressionStatement[35539-35724]"
    }, {
      "left" : "boolean provisioned = isDeviceProvisionedInSettingsDb();",
      "right" : "boolean provisioned = isDeviceProvisionedInSettingsDb();",
      "info" : "VariableDeclarationStatement[35884-35940]:VariableDeclarationStatement[35884-35940]"
    }, {
      "left" : "if (provisioned != mDeviceProvisioned)",
      "right" : "if (provisioned != mDeviceProvisioned)",
      "info" : "IfStatement[35949-36164]:IfStatement[35949-36164]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35988-36164]:Block[35988-36164]"
    }, {
      "left" : "mDeviceProvisioned = provisioned;",
      "right" : "mDeviceProvisioned = provisioned;",
      "info" : "ExpressionStatement[36002-36035]:ExpressionStatement[36002-36035]"
    }, {
      "left" : "if (mDeviceProvisioned)",
      "right" : "if (mDeviceProvisioned)",
      "info" : "IfStatement[36048-36154]:IfStatement[36048-36154]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36072-36154]:Block[36072-36154]"
    }, {
      "left" : "mHandler.sendEmptyMessage(MSG_DEVICE_PROVISIONED);",
      "right" : "mHandler.sendEmptyMessage(MSG_DEVICE_PROVISIONED);",
      "info" : "ExpressionStatement[36090-36140]:ExpressionStatement[36090-36140]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[36237-36246]:Modifier[36237-36246]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[36247-36251]:PrimitiveType[36247-36251]"
    }, {
      "left" : "handleDevicePolicyManagerStateChanged",
      "right" : "handleDevicePolicyManagerStateChanged",
      "info" : "SimpleName[36252-36289]:SimpleName[36252-36289]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36292-36540]:Block[36292-36540]"
    }, {
      "left" : "for (int i = mCallbacks.size() - 1; i >= 0; i--)",
      "right" : "for (int i = mCallbacks.size() - 1; i >= 0; i--)",
      "info" : "ForStatement[36302-36534]:ForStatement[36302-36534]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36351-36534]:Block[36351-36534]"
    }, {
      "left" : "KeyguardUpdateMonitorCallback cb = mCallbacks.get(i).get();",
      "right" : "KeyguardUpdateMonitorCallback cb = mCallbacks.get(i).get();",
      "info" : "VariableDeclarationStatement[36365-36424]:VariableDeclarationStatement[36365-36424]"
    }, {
      "left" : "if (cb != null)",
      "right" : "if (cb != null)",
      "info" : "IfStatement[36437-36524]:IfStatement[36437-36524]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36453-36524]:Block[36453-36524]"
    }, {
      "left" : "cb.onDevicePolicyManagerStateChanged();",
      "right" : "cb.onDevicePolicyManagerStateChanged();",
      "info" : "ExpressionStatement[36471-36510]:ExpressionStatement[36471-36510]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[36604-36613]:Modifier[36604-36613]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[36614-36618]:PrimitiveType[36614-36618]"
    }, {
      "left" : "handleUserSwitching",
      "right" : "handleUserSwitching",
      "info" : "SimpleName[36619-36638]:SimpleName[36619-36638]"
    }, {
      "left" : "int userId",
      "right" : "int userId",
      "info" : "SingleVariableDeclaration[36639-36649]:SingleVariableDeclaration[36639-36649]"
    }, {
      "left" : "IRemoteCallback reply",
      "right" : "IRemoteCallback reply",
      "info" : "SingleVariableDeclaration[36651-36672]:SingleVariableDeclaration[36651-36672]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36674-37003]:Block[36674-37003]"
    }, {
      "left" : "for (int i = 0; i < mCallbacks.size(); i++)",
      "right" : "for (int i = 0; i < mCallbacks.size(); i++)",
      "info" : "ForStatement[36684-36899]:ForStatement[36684-36899]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36728-36899]:Block[36728-36899]"
    }, {
      "left" : "KeyguardUpdateMonitorCallback cb = mCallbacks.get(i).get();",
      "right" : "KeyguardUpdateMonitorCallback cb = mCallbacks.get(i).get();",
      "info" : "VariableDeclarationStatement[36742-36801]:VariableDeclarationStatement[36742-36801]"
    }, {
      "left" : "if (cb != null)",
      "right" : "if (cb != null)",
      "info" : "IfStatement[36814-36889]:IfStatement[36814-36889]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36830-36889]:Block[36830-36889]"
    }, {
      "left" : "cb.onUserSwitching(userId);",
      "right" : "cb.onUserSwitching(userId);",
      "info" : "ExpressionStatement[36848-36875]:ExpressionStatement[36848-36875]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[36908-36997]:TryStatement[36908-36997]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36912-36959]:Block[36912-36959]"
    }, {
      "left" : "reply.sendResult(null);",
      "right" : "reply.sendResult(null);",
      "info" : "ExpressionStatement[36926-36949]:ExpressionStatement[36926-36949]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36986-36997]:Block[36986-36997]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[37073-37082]:Modifier[37073-37082]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[37083-37087]:PrimitiveType[37083-37087]"
    }, {
      "left" : "handleUserSwitchComplete",
      "right" : "handleUserSwitchComplete",
      "info" : "SimpleName[37088-37112]:SimpleName[37088-37112]"
    }, {
      "left" : "int userId",
      "right" : "int userId",
      "info" : "SingleVariableDeclaration[37113-37123]:SingleVariableDeclaration[37113-37123]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37125-37361]:Block[37125-37361]"
    }, {
      "left" : "for (int i = 0; i < mCallbacks.size(); i++)",
      "right" : "for (int i = 0; i < mCallbacks.size(); i++)",
      "info" : "ForStatement[37135-37355]:ForStatement[37135-37355]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37179-37355]:Block[37179-37355]"
    }, {
      "left" : "KeyguardUpdateMonitorCallback cb = mCallbacks.get(i).get();",
      "right" : "KeyguardUpdateMonitorCallback cb = mCallbacks.get(i).get();",
      "info" : "VariableDeclarationStatement[37193-37252]:VariableDeclarationStatement[37193-37252]"
    }, {
      "left" : "if (cb != null)",
      "right" : "if (cb != null)",
      "info" : "IfStatement[37265-37345]:IfStatement[37265-37345]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37281-37345]:Block[37281-37345]"
    }, {
      "left" : "cb.onUserSwitchComplete(userId);",
      "right" : "cb.onUserSwitchComplete(userId);",
      "info" : "ExpressionStatement[37299-37331]:ExpressionStatement[37299-37331]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[37669-37675]:Modifier[37669-37675]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[37676-37680]:PrimitiveType[37676-37680]"
    }, {
      "left" : "dispatchBootCompleted",
      "right" : "dispatchBootCompleted",
      "info" : "SimpleName[37681-37702]:SimpleName[37681-37702]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37705-37767]:Block[37705-37767]"
    }, {
      "left" : "mHandler.sendEmptyMessage(MSG_BOOT_COMPLETED);",
      "right" : "mHandler.sendEmptyMessage(MSG_BOOT_COMPLETED);",
      "info" : "ExpressionStatement[37715-37761]:ExpressionStatement[37715-37761]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[37831-37840]:Modifier[37831-37840]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[37841-37845]:PrimitiveType[37841-37845]"
    }, {
      "left" : "handleBootCompleted",
      "right" : "handleBootCompleted",
      "info" : "SimpleName[37846-37865]:SimpleName[37846-37865]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37868-38160]:Block[37868-38160]"
    }, {
      "left" : "if (mBootCompleted)",
      "right" : "if (mBootCompleted)",
      "info" : "IfStatement[37878-37905]:IfStatement[37878-37905]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[37898-37905]:ReturnStatement[37898-37905]"
    }, {
      "left" : "mBootCompleted = true;",
      "right" : "mBootCompleted = true;",
      "info" : "ExpressionStatement[37914-37936]:ExpressionStatement[37914-37936]"
    }, {
      "left" : "for (int i = 0; i < mCallbacks.size(); i++)",
      "right" : "for (int i = 0; i < mCallbacks.size(); i++)",
      "info" : "ForStatement[37945-38154]:ForStatement[37945-38154]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37989-38154]:Block[37989-38154]"
    }, {
      "left" : "KeyguardUpdateMonitorCallback cb = mCallbacks.get(i).get();",
      "right" : "KeyguardUpdateMonitorCallback cb = mCallbacks.get(i).get();",
      "info" : "VariableDeclarationStatement[38003-38062]:VariableDeclarationStatement[38003-38062]"
    }, {
      "left" : "if (cb != null)",
      "right" : "if (cb != null)",
      "info" : "IfStatement[38075-38144]:IfStatement[38075-38144]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38091-38144]:Block[38091-38144]"
    }, {
      "left" : "cb.onBootCompleted();",
      "right" : "cb.onBootCompleted();",
      "info" : "ExpressionStatement[38109-38130]:ExpressionStatement[38109-38130]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[38293-38299]:Modifier[38293-38299]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[38300-38307]:PrimitiveType[38300-38307]"
    }, {
      "left" : "hasBootCompleted",
      "right" : "hasBootCompleted",
      "info" : "SimpleName[38308-38324]:SimpleName[38308-38324]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38327-38365]:Block[38327-38365]"
    }, {
      "left" : "return mBootCompleted;",
      "right" : "return mBootCompleted;",
      "info" : "ReturnStatement[38337-38359]:ReturnStatement[38337-38359]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[38427-38436]:Modifier[38427-38436]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[38437-38441]:PrimitiveType[38437-38441]"
    }, {
      "left" : "handleUserRemoved",
      "right" : "handleUserRemoved",
      "info" : "SimpleName[38442-38459]:SimpleName[38442-38459]"
    }, {
      "left" : "int userId",
      "right" : "int userId",
      "info" : "SingleVariableDeclaration[38460-38470]:SingleVariableDeclaration[38460-38470]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38472-38701]:Block[38472-38701]"
    }, {
      "left" : "for (int i = 0; i < mCallbacks.size(); i++)",
      "right" : "for (int i = 0; i < mCallbacks.size(); i++)",
      "info" : "ForStatement[38482-38695]:ForStatement[38482-38695]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38526-38695]:Block[38526-38695]"
    }, {
      "left" : "KeyguardUpdateMonitorCallback cb = mCallbacks.get(i).get();",
      "right" : "KeyguardUpdateMonitorCallback cb = mCallbacks.get(i).get();",
      "info" : "VariableDeclarationStatement[38540-38599]:VariableDeclarationStatement[38540-38599]"
    }, {
      "left" : "if (cb != null)",
      "right" : "if (cb != null)",
      "info" : "IfStatement[38612-38685]:IfStatement[38612-38685]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38628-38685]:Block[38628-38685]"
    }, {
      "left" : "cb.onUserRemoved(userId);",
      "right" : "cb.onUserRemoved(userId);",
      "info" : "ExpressionStatement[38646-38671]:ExpressionStatement[38646-38671]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[38769-38778]:Modifier[38769-38778]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[38779-38783]:PrimitiveType[38779-38783]"
    }, {
      "left" : "handleDeviceProvisioned",
      "right" : "handleDeviceProvisioned",
      "info" : "SimpleName[38784-38807]:SimpleName[38784-38807]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38810-39296]:Block[38810-39296]"
    }, {
      "left" : "for (int i = 0; i < mCallbacks.size(); i++)",
      "right" : "for (int i = 0; i < mCallbacks.size(); i++)",
      "info" : "ForStatement[38820-39033]:ForStatement[38820-39033]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38864-39033]:Block[38864-39033]"
    }, {
      "left" : "KeyguardUpdateMonitorCallback cb = mCallbacks.get(i).get();",
      "right" : "KeyguardUpdateMonitorCallback cb = mCallbacks.get(i).get();",
      "info" : "VariableDeclarationStatement[38878-38937]:VariableDeclarationStatement[38878-38937]"
    }, {
      "left" : "if (cb != null)",
      "right" : "if (cb != null)",
      "info" : "IfStatement[38950-39023]:IfStatement[38950-39023]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38966-39023]:Block[38966-39023]"
    }, {
      "left" : "cb.onDeviceProvisioned();",
      "right" : "cb.onDeviceProvisioned();",
      "info" : "ExpressionStatement[38984-39009]:ExpressionStatement[38984-39009]"
    }, {
      "left" : "if (mDeviceProvisionedObserver != null)",
      "right" : "if (mDeviceProvisionedObserver != null)",
      "info" : "IfStatement[39042-39290]:IfStatement[39042-39290]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39082-39290]:Block[39082-39290]"
    }, {
      "left" : "mContext.getContentResolver().unregisterContentObserver(mDeviceProvisionedObserver);",
      "right" : "mContext.getContentResolver().unregisterContentObserver(mDeviceProvisionedObserver);",
      "info" : "ExpressionStatement[39149-39233]:ExpressionStatement[39149-39233]"
    }, {
      "left" : "mDeviceProvisionedObserver = null;",
      "right" : "mDeviceProvisionedObserver = null;",
      "info" : "ExpressionStatement[39246-39280]:ExpressionStatement[39246-39280]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[39365-39374]:Modifier[39365-39374]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[39375-39379]:PrimitiveType[39375-39379]"
    }, {
      "left" : "handlePhoneStateChanged",
      "right" : "handlePhoneStateChanged",
      "info" : "SimpleName[39380-39403]:SimpleName[39380-39403]"
    }, {
      "left" : "String newState",
      "right" : "String newState",
      "info" : "SingleVariableDeclaration[39404-39419]:SingleVariableDeclaration[39404-39419]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39421-40151]:Block[39421-40151]"
    }, {
      "left" : "if (DEBUG)",
      "right" : "if (DEBUG)",
      "info" : "IfStatement[39431-39498]:IfStatement[39431-39498]"
    }, {
      "left" : "Log.d(TAG, \"handlePhoneStateChanged(\" + newState + \")\");",
      "right" : "Log.d(TAG, \"handlePhoneStateChanged(\" + newState + \")\");",
      "info" : "ExpressionStatement[39442-39498]:ExpressionStatement[39442-39498]"
    }, {
      "left" : "if (TelephonyManager.EXTRA_STATE_IDLE.equals(newState))",
      "right" : "if (TelephonyManager.EXTRA_STATE_IDLE.equals(newState))",
      "info" : "IfStatement[39507-39912]:IfStatement[39507-39912]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39563-39634]:Block[39563-39634]"
    }, {
      "left" : "mPhoneState = TelephonyManager.CALL_STATE_IDLE;",
      "right" : "mPhoneState = TelephonyManager.CALL_STATE_IDLE;",
      "info" : "ExpressionStatement[39577-39624]:ExpressionStatement[39577-39624]"
    }, {
      "left" : "if (TelephonyManager.EXTRA_STATE_OFFHOOK.equals(newState))",
      "right" : "if (TelephonyManager.EXTRA_STATE_OFFHOOK.equals(newState))",
      "info" : "IfStatement[39640-39912]:IfStatement[39640-39912]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39699-39773]:Block[39699-39773]"
    }, {
      "left" : "mPhoneState = TelephonyManager.CALL_STATE_OFFHOOK;",
      "right" : "mPhoneState = TelephonyManager.CALL_STATE_OFFHOOK;",
      "info" : "ExpressionStatement[39713-39763]:ExpressionStatement[39713-39763]"
    }, {
      "left" : "if (TelephonyManager.EXTRA_STATE_RINGING.equals(newState))",
      "right" : "if (TelephonyManager.EXTRA_STATE_RINGING.equals(newState))",
      "info" : "IfStatement[39779-39912]:IfStatement[39779-39912]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39838-39912]:Block[39838-39912]"
    }, {
      "left" : "mPhoneState = TelephonyManager.CALL_STATE_RINGING;",
      "right" : "mPhoneState = TelephonyManager.CALL_STATE_RINGING;",
      "info" : "ExpressionStatement[39852-39902]:ExpressionStatement[39852-39902]"
    }, {
      "left" : "for (int i = 0; i < mCallbacks.size(); i++)",
      "right" : "for (int i = 0; i < mCallbacks.size(); i++)",
      "info" : "ForStatement[39921-40145]:ForStatement[39921-40145]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39965-40145]:Block[39965-40145]"
    }, {
      "left" : "KeyguardUpdateMonitorCallback cb = mCallbacks.get(i).get();",
      "right" : "KeyguardUpdateMonitorCallback cb = mCallbacks.get(i).get();",
      "info" : "VariableDeclarationStatement[39979-40038]:VariableDeclarationStatement[39979-40038]"
    }, {
      "left" : "if (cb != null)",
      "right" : "if (cb != null)",
      "info" : "IfStatement[40051-40135]:IfStatement[40051-40135]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40067-40135]:Block[40067-40135]"
    }, {
      "left" : "cb.onPhoneStateChanged(mPhoneState);",
      "right" : "cb.onPhoneStateChanged(mPhoneState);",
      "info" : "ExpressionStatement[40085-40121]:ExpressionStatement[40085-40121]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[40220-40229]:Modifier[40220-40229]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[40230-40234]:PrimitiveType[40230-40234]"
    }, {
      "left" : "handleRingerModeChange",
      "right" : "handleRingerModeChange",
      "info" : "SimpleName[40235-40257]:SimpleName[40235-40257]"
    }, {
      "left" : "int mode",
      "right" : "int mode",
      "info" : "SingleVariableDeclaration[40258-40266]:SingleVariableDeclaration[40258-40266]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40268-40598]:Block[40268-40598]"
    }, {
      "left" : "if (DEBUG)",
      "right" : "if (DEBUG)",
      "info" : "IfStatement[40278-40340]:IfStatement[40278-40340]"
    }, {
      "left" : "Log.d(TAG, \"handleRingerModeChange(\" + mode + \")\");",
      "right" : "Log.d(TAG, \"handleRingerModeChange(\" + mode + \")\");",
      "info" : "ExpressionStatement[40289-40340]:ExpressionStatement[40289-40340]"
    }, {
      "left" : "mRingMode = mode;",
      "right" : "mRingMode = mode;",
      "info" : "ExpressionStatement[40349-40366]:ExpressionStatement[40349-40366]"
    }, {
      "left" : "for (int i = 0; i < mCallbacks.size(); i++)",
      "right" : "for (int i = 0; i < mCallbacks.size(); i++)",
      "info" : "ForStatement[40375-40592]:ForStatement[40375-40592]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40419-40592]:Block[40419-40592]"
    }, {
      "left" : "KeyguardUpdateMonitorCallback cb = mCallbacks.get(i).get();",
      "right" : "KeyguardUpdateMonitorCallback cb = mCallbacks.get(i).get();",
      "info" : "VariableDeclarationStatement[40433-40492]:VariableDeclarationStatement[40433-40492]"
    }, {
      "left" : "if (cb != null)",
      "right" : "if (cb != null)",
      "info" : "IfStatement[40505-40582]:IfStatement[40505-40582]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40521-40582]:Block[40521-40582]"
    }, {
      "left" : "cb.onRingerModeChanged(mode);",
      "right" : "cb.onRingerModeChanged(mode);",
      "info" : "ExpressionStatement[40539-40568]:ExpressionStatement[40539-40568]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[40659-40666]:Modifier[40659-40666]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[40667-40671]:PrimitiveType[40667-40671]"
    }, {
      "left" : "handleTimeUpdate",
      "right" : "handleTimeUpdate",
      "info" : "SimpleName[40672-40688]:SimpleName[40672-40688]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40691-40965]:Block[40691-40965]"
    }, {
      "left" : "if (DEBUG)",
      "right" : "if (DEBUG)",
      "info" : "IfStatement[40701-40743]:IfStatement[40701-40743]"
    }, {
      "left" : "Log.d(TAG, \"handleTimeUpdate\");",
      "right" : "Log.d(TAG, \"handleTimeUpdate\");",
      "info" : "ExpressionStatement[40712-40743]:ExpressionStatement[40712-40743]"
    }, {
      "left" : "for (int i = 0; i < mCallbacks.size(); i++)",
      "right" : "for (int i = 0; i < mCallbacks.size(); i++)",
      "info" : "ForStatement[40752-40959]:ForStatement[40752-40959]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40796-40959]:Block[40796-40959]"
    }, {
      "left" : "KeyguardUpdateMonitorCallback cb = mCallbacks.get(i).get();",
      "right" : "KeyguardUpdateMonitorCallback cb = mCallbacks.get(i).get();",
      "info" : "VariableDeclarationStatement[40810-40869]:VariableDeclarationStatement[40810-40869]"
    }, {
      "left" : "if (cb != null)",
      "right" : "if (cb != null)",
      "info" : "IfStatement[40882-40949]:IfStatement[40882-40949]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40898-40949]:Block[40898-40949]"
    }, {
      "left" : "cb.onTimeChanged();",
      "right" : "cb.onTimeChanged();",
      "info" : "ExpressionStatement[40916-40935]:ExpressionStatement[40916-40935]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[41029-41036]:Modifier[41029-41036]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[41037-41041]:PrimitiveType[41037-41041]"
    }, {
      "left" : "handleBatteryUpdate",
      "right" : "handleBatteryUpdate",
      "info" : "SimpleName[41042-41061]:SimpleName[41042-41061]"
    }, {
      "left" : "BatteryStatus status",
      "right" : "BatteryStatus status",
      "info" : "SingleVariableDeclaration[41062-41082]:SingleVariableDeclaration[41062-41082]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41084-41582]:Block[41084-41582]"
    }, {
      "left" : "if (DEBUG)",
      "right" : "if (DEBUG)",
      "info" : "IfStatement[41094-41139]:IfStatement[41094-41139]"
    }, {
      "left" : "Log.d(TAG, \"handleBatteryUpdate\");",
      "right" : "Log.d(TAG, \"handleBatteryUpdate\");",
      "info" : "ExpressionStatement[41105-41139]:ExpressionStatement[41105-41139]"
    }, {
      "left" : "final boolean batteryUpdateInteresting = isBatteryUpdateInteresting(mBatteryStatus, status);",
      "right" : "final boolean batteryUpdateInteresting = isBatteryUpdateInteresting(mBatteryStatus, status);",
      "info" : "VariableDeclarationStatement[41148-41240]:VariableDeclarationStatement[41148-41240]"
    }, {
      "left" : "mBatteryStatus = status;",
      "right" : "mBatteryStatus = status;",
      "info" : "ExpressionStatement[41249-41273]:ExpressionStatement[41249-41273]"
    }, {
      "left" : "if (batteryUpdateInteresting)",
      "right" : "if (batteryUpdateInteresting)",
      "info" : "IfStatement[41282-41576]:IfStatement[41282-41576]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41312-41576]:Block[41312-41576]"
    }, {
      "left" : "for (int i = 0; i < mCallbacks.size(); i++)",
      "right" : "for (int i = 0; i < mCallbacks.size(); i++)",
      "info" : "ForStatement[41326-41566]:ForStatement[41326-41566]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41370-41566]:Block[41370-41566]"
    }, {
      "left" : "KeyguardUpdateMonitorCallback cb = mCallbacks.get(i).get();",
      "right" : "KeyguardUpdateMonitorCallback cb = mCallbacks.get(i).get();",
      "info" : "VariableDeclarationStatement[41388-41447]:VariableDeclarationStatement[41388-41447]"
    }, {
      "left" : "if (cb != null)",
      "right" : "if (cb != null)",
      "info" : "IfStatement[41464-41552]:IfStatement[41464-41552]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41480-41552]:Block[41480-41552]"
    }, {
      "left" : "cb.onRefreshBatteryInfo(status);",
      "right" : "cb.onRefreshBatteryInfo(status);",
      "info" : "ExpressionStatement[41502-41534]:ExpressionStatement[41502-41534]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[41648-41655]:Modifier[41648-41655]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[41656-41660]:PrimitiveType[41656-41660]"
    }, {
      "left" : "handleSimStateChange",
      "right" : "handleSimStateChange",
      "info" : "SimpleName[41661-41681]:SimpleName[41661-41681]"
    }, {
      "left" : "int subId",
      "right" : "int subId",
      "info" : "SingleVariableDeclaration[41682-41691]:SingleVariableDeclaration[41682-41691]"
    }, {
      "left" : "int slotId",
      "right" : "int slotId",
      "info" : "SingleVariableDeclaration[41693-41703]:SingleVariableDeclaration[41693-41703]"
    }, {
      "left" : "State state",
      "right" : "State state",
      "info" : "SingleVariableDeclaration[41705-41716]:SingleVariableDeclaration[41705-41716]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41718-42863]:Block[41718-42863]"
    }, {
      "left" : "if (DEBUG_SIM_STATES)",
      "right" : "if (DEBUG_SIM_STATES)",
      "info" : "IfStatement[41728-41893]:IfStatement[41728-41893]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41750-41893]:Block[41750-41893]"
    }, {
      "left" : "Log.d(TAG, \"handleSimStateChange(subId=\" + subId + \", slotId=\"\n                    + slotId + \", state=\" + state +\")\");",
      "right" : "Log.d(TAG, \"handleSimStateChange(subId=\" + subId + \", slotId=\"\n                    + slotId + \", state=\" + state +\")\");",
      "info" : "ExpressionStatement[41764-41883]:ExpressionStatement[41764-41883]"
    }, {
      "left" : "if (!SubscriptionManager.isValidSubscriptionId(subId))",
      "right" : "if (!SubscriptionManager.isValidSubscriptionId(subId))",
      "info" : "IfStatement[41902-42055]:IfStatement[41902-42055]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41957-42055]:Block[41957-42055]"
    }, {
      "left" : "Log.w(TAG, \"invalid subId in handleSimStateChange()\");",
      "right" : "Log.w(TAG, \"invalid subId in handleSimStateChange()\");",
      "info" : "ExpressionStatement[41971-42025]:ExpressionStatement[41971-42025]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[42038-42045]:ReturnStatement[42038-42045]"
    }, {
      "left" : "SimData data = mSimDatas.get(subId);",
      "right" : "SimData data = mSimDatas.get(subId);",
      "info" : "VariableDeclarationStatement[42064-42100]:VariableDeclarationStatement[42064-42100]"
    }, {
      "left" : "final boolean changed;",
      "right" : "final boolean changed;",
      "info" : "VariableDeclarationStatement[42109-42131]:VariableDeclarationStatement[42109-42131]"
    }, {
      "left" : "if (data == null)",
      "right" : "if (data == null)",
      "info" : "IfStatement[42140-42534]:IfStatement[42140-42534]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42158-42320]:Block[42158-42320]"
    }, {
      "left" : "data = new SimData(state, slotId, subId);",
      "right" : "data = new SimData(state, slotId, subId);",
      "info" : "ExpressionStatement[42172-42213]:ExpressionStatement[42172-42213]"
    }, {
      "left" : "mSimDatas.put(subId, data);",
      "right" : "mSimDatas.put(subId, data);",
      "info" : "ExpressionStatement[42226-42253]:ExpressionStatement[42226-42253]"
    }, {
      "left" : "changed = true;",
      "right" : "changed = true;",
      "info" : "ExpressionStatement[42266-42281]:ExpressionStatement[42266-42281]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42326-42534]:Block[42326-42534]"
    }, {
      "left" : "changed = (data.simState != state || data.subId != subId || data.slotId != slotId);",
      "right" : "changed = (data.simState != state || data.subId != subId || data.slotId != slotId);",
      "info" : "ExpressionStatement[42340-42423]:ExpressionStatement[42340-42423]"
    }, {
      "left" : "data.simState = state;",
      "right" : "data.simState = state;",
      "info" : "ExpressionStatement[42436-42458]:ExpressionStatement[42436-42458]"
    }, {
      "left" : "data.subId = subId;",
      "right" : "data.subId = subId;",
      "info" : "ExpressionStatement[42471-42490]:ExpressionStatement[42471-42490]"
    }, {
      "left" : "data.slotId = slotId;",
      "right" : "data.slotId = slotId;",
      "info" : "ExpressionStatement[42503-42524]:ExpressionStatement[42503-42524]"
    }, {
      "left" : "if (changed && state != State.UNKNOWN)",
      "right" : "if (changed && state != State.UNKNOWN)",
      "info" : "IfStatement[42543-42857]:IfStatement[42543-42857]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42582-42857]:Block[42582-42857]"
    }, {
      "left" : "for (int i = 0; i < mCallbacks.size(); i++)",
      "right" : "for (int i = 0; i < mCallbacks.size(); i++)",
      "info" : "ForStatement[42596-42847]:ForStatement[42596-42847]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42640-42847]:Block[42640-42847]"
    }, {
      "left" : "KeyguardUpdateMonitorCallback cb = mCallbacks.get(i).get();",
      "right" : "KeyguardUpdateMonitorCallback cb = mCallbacks.get(i).get();",
      "info" : "VariableDeclarationStatement[42658-42717]:VariableDeclarationStatement[42658-42717]"
    }, {
      "left" : "if (cb != null)",
      "right" : "if (cb != null)",
      "info" : "IfStatement[42734-42833]:IfStatement[42734-42833]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42750-42833]:Block[42750-42833]"
    }, {
      "left" : "cb.onSimStateChanged(subId, slotId, state);",
      "right" : "cb.onSimStateChanged(subId, slotId, state);",
      "info" : "ExpressionStatement[42772-42815]:ExpressionStatement[42772-42815]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[42869-42876]:Modifier[42869-42876]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[42877-42881]:PrimitiveType[42877-42881]"
    }, {
      "left" : "handleServiceStateChange",
      "right" : "handleServiceStateChange",
      "info" : "SimpleName[42882-42906]:SimpleName[42882-42906]"
    }, {
      "left" : "int subId",
      "right" : "int subId",
      "info" : "SingleVariableDeclaration[42907-42916]:SingleVariableDeclaration[42907-42916]"
    }, {
      "left" : "ServiceState state",
      "right" : "ServiceState state",
      "info" : "SingleVariableDeclaration[42918-42936]:SingleVariableDeclaration[42918-42936]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42938-43757]:Block[42938-43757]"
    }, {
      "left" : "if (!SubscriptionManager.isValidSubscriptionId(subId))",
      "right" : "if (!SubscriptionManager.isValidSubscriptionId(subId))",
      "info" : "IfStatement[42948-43105]:IfStatement[42948-43105]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43003-43105]:Block[43003-43105]"
    }, {
      "left" : "Log.w(TAG, \"invalid subId in handleServiceStateChange()\");",
      "right" : "Log.w(TAG, \"invalid subId in handleServiceStateChange()\");",
      "info" : "ExpressionStatement[43017-43075]:ExpressionStatement[43017-43075]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[43088-43095]:ReturnStatement[43088-43095]"
    }, {
      "left" : "if (DEBUG)",
      "right" : "if (DEBUG)",
      "info" : "IfStatement[43114-43230]:IfStatement[43114-43230]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43125-43230]:Block[43125-43230]"
    }, {
      "left" : "Log.d(TAG, \"handleServiceStateChange(subId=\" + subId + \", state=\" + state + \")\");",
      "right" : "Log.d(TAG, \"handleServiceStateChange(subId=\" + subId + \", state=\" + state + \")\");",
      "info" : "ExpressionStatement[43139-43220]:ExpressionStatement[43139-43220]"
    }, {
      "left" : "final boolean changed;",
      "right" : "final boolean changed;",
      "info" : "VariableDeclarationStatement[43239-43261]:VariableDeclarationStatement[43239-43261]"
    }, {
      "left" : "if (mServiceStates.containsKey(subId))",
      "right" : "if (mServiceStates.containsKey(subId))",
      "info" : "IfStatement[43270-43429]:IfStatement[43270-43429]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43309-43384]:Block[43309-43384]"
    }, {
      "left" : "changed = !state.equals(mServiceStates.get(subId));",
      "right" : "changed = !state.equals(mServiceStates.get(subId));",
      "info" : "ExpressionStatement[43323-43374]:ExpressionStatement[43323-43374]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43390-43429]:Block[43390-43429]"
    }, {
      "left" : "changed = true;",
      "right" : "changed = true;",
      "info" : "ExpressionStatement[43404-43419]:ExpressionStatement[43404-43419]"
    }, {
      "left" : "mServiceStates.put(subId, state);",
      "right" : "mServiceStates.put(subId, state);",
      "info" : "ExpressionStatement[43438-43471]:ExpressionStatement[43438-43471]"
    }, {
      "left" : "if (changed)",
      "right" : "if (changed)",
      "info" : "IfStatement[43480-43751]:IfStatement[43480-43751]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43493-43751]:Block[43493-43751]"
    }, {
      "left" : "for (int j = 0; j < mCallbacks.size(); j++)",
      "right" : "for (int j = 0; j < mCallbacks.size(); j++)",
      "info" : "ForStatement[43507-43741]:ForStatement[43507-43741]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43551-43741]:Block[43551-43741]"
    }, {
      "left" : "KeyguardUpdateMonitorCallback cb = mCallbacks.get(j).get();",
      "right" : "KeyguardUpdateMonitorCallback cb = mCallbacks.get(j).get();",
      "info" : "VariableDeclarationStatement[43569-43628]:VariableDeclarationStatement[43569-43628]"
    }, {
      "left" : "if (cb != null)",
      "right" : "if (cb != null)",
      "info" : "IfStatement[43645-43727]:IfStatement[43645-43727]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43661-43727]:Block[43661-43727]"
    }, {
      "left" : "cb.onRefreshCarrierInfo();",
      "right" : "cb.onRefreshCarrierInfo();",
      "info" : "ExpressionStatement[43683-43709]:ExpressionStatement[43683-43709]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[43831-43838]:Modifier[43831-43838]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[43839-43843]:PrimitiveType[43839-43843]"
    }, {
      "left" : "handleClockVisibilityChanged",
      "right" : "handleClockVisibilityChanged",
      "info" : "SimpleName[43844-43872]:SimpleName[43844-43872]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43875-44174]:Block[43875-44174]"
    }, {
      "left" : "if (DEBUG)",
      "right" : "if (DEBUG)",
      "info" : "IfStatement[43885-43941]:IfStatement[43885-43941]"
    }, {
      "left" : "Log.d(TAG, \"handleClockVisibilityChanged()\");",
      "right" : "Log.d(TAG, \"handleClockVisibilityChanged()\");",
      "info" : "ExpressionStatement[43896-43941]:ExpressionStatement[43896-43941]"
    }, {
      "left" : "for (int i = 0; i < mCallbacks.size(); i++)",
      "right" : "for (int i = 0; i < mCallbacks.size(); i++)",
      "info" : "ForStatement[43950-44168]:ForStatement[43950-44168]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43994-44168]:Block[43994-44168]"
    }, {
      "left" : "KeyguardUpdateMonitorCallback cb = mCallbacks.get(i).get();",
      "right" : "KeyguardUpdateMonitorCallback cb = mCallbacks.get(i).get();",
      "info" : "VariableDeclarationStatement[44008-44067]:VariableDeclarationStatement[44008-44067]"
    }, {
      "left" : "if (cb != null)",
      "right" : "if (cb != null)",
      "info" : "IfStatement[44080-44158]:IfStatement[44080-44158]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44096-44158]:Block[44096-44158]"
    }, {
      "left" : "cb.onClockVisibilityChanged();",
      "right" : "cb.onClockVisibilityChanged();",
      "info" : "ExpressionStatement[44114-44144]:ExpressionStatement[44114-44144]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[44251-44258]:Modifier[44251-44258]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[44259-44263]:PrimitiveType[44259-44263]"
    }, {
      "left" : "handleKeyguardVisibilityChanged",
      "right" : "handleKeyguardVisibilityChanged",
      "info" : "SimpleName[44264-44295]:SimpleName[44264-44295]"
    }, {
      "left" : "int showing",
      "right" : "int showing",
      "info" : "SingleVariableDeclaration[44296-44307]:SingleVariableDeclaration[44296-44307]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44309-44725]:Block[44309-44725]"
    }, {
      "left" : "if (DEBUG)",
      "right" : "if (DEBUG)",
      "info" : "IfStatement[44319-44393]:IfStatement[44319-44393]"
    }, {
      "left" : "Log.d(TAG, \"handleKeyguardVisibilityChanged(\" + showing + \")\");",
      "right" : "Log.d(TAG, \"handleKeyguardVisibilityChanged(\" + showing + \")\");",
      "info" : "ExpressionStatement[44330-44393]:ExpressionStatement[44330-44393]"
    }, {
      "left" : "boolean isShowing = (showing == 1);",
      "right" : "boolean isShowing = (showing == 1);",
      "info" : "VariableDeclarationStatement[44402-44437]:VariableDeclarationStatement[44402-44437]"
    }, {
      "left" : "mKeyguardIsVisible = isShowing;",
      "right" : "mKeyguardIsVisible = isShowing;",
      "info" : "ExpressionStatement[44446-44477]:ExpressionStatement[44446-44477]"
    }, {
      "left" : "for (int i = 0; i < mCallbacks.size(); i++)",
      "right" : "for (int i = 0; i < mCallbacks.size(); i++)",
      "info" : "ForStatement[44486-44719]:ForStatement[44486-44719]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44530-44719]:Block[44530-44719]"
    }, {
      "left" : "KeyguardUpdateMonitorCallback cb = mCallbacks.get(i).get();",
      "right" : "KeyguardUpdateMonitorCallback cb = mCallbacks.get(i).get();",
      "info" : "VariableDeclarationStatement[44544-44603]:VariableDeclarationStatement[44544-44603]"
    }, {
      "left" : "if (cb != null)",
      "right" : "if (cb != null)",
      "info" : "IfStatement[44616-44709]:IfStatement[44616-44709]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44632-44709]:Block[44632-44709]"
    }, {
      "left" : "cb.onKeyguardVisibilityChangedRaw(isShowing);",
      "right" : "cb.onKeyguardVisibilityChangedRaw(isShowing);",
      "info" : "ExpressionStatement[44650-44695]:ExpressionStatement[44650-44695]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[44848-44855]:Modifier[44848-44855]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[44856-44860]:PrimitiveType[44856-44860]"
    }, {
      "left" : "handleKeyguardBouncerChanged",
      "right" : "handleKeyguardBouncerChanged",
      "info" : "SimpleName[44861-44889]:SimpleName[44861-44889]"
    }, {
      "left" : "int bouncer",
      "right" : "int bouncer",
      "info" : "SingleVariableDeclaration[44890-44901]:SingleVariableDeclaration[44890-44901]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44903-45300]:Block[44903-45300]"
    }, {
      "left" : "if (DEBUG)",
      "right" : "if (DEBUG)",
      "info" : "IfStatement[44913-44984]:IfStatement[44913-44984]"
    }, {
      "left" : "Log.d(TAG, \"handleKeyguardBouncerChanged(\" + bouncer + \")\");",
      "right" : "Log.d(TAG, \"handleKeyguardBouncerChanged(\" + bouncer + \")\");",
      "info" : "ExpressionStatement[44924-44984]:ExpressionStatement[44924-44984]"
    }, {
      "left" : "boolean isBouncer = (bouncer == 1);",
      "right" : "boolean isBouncer = (bouncer == 1);",
      "info" : "VariableDeclarationStatement[44993-45028]:VariableDeclarationStatement[44993-45028]"
    }, {
      "left" : "mBouncer = isBouncer;",
      "right" : "mBouncer = isBouncer;",
      "info" : "ExpressionStatement[45037-45058]:ExpressionStatement[45037-45058]"
    }, {
      "left" : "for (int i = 0; i < mCallbacks.size(); i++)",
      "right" : "for (int i = 0; i < mCallbacks.size(); i++)",
      "info" : "ForStatement[45067-45294]:ForStatement[45067-45294]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45111-45294]:Block[45111-45294]"
    }, {
      "left" : "KeyguardUpdateMonitorCallback cb = mCallbacks.get(i).get();",
      "right" : "KeyguardUpdateMonitorCallback cb = mCallbacks.get(i).get();",
      "info" : "VariableDeclarationStatement[45125-45184]:VariableDeclarationStatement[45125-45184]"
    }, {
      "left" : "if (cb != null)",
      "right" : "if (cb != null)",
      "info" : "IfStatement[45197-45284]:IfStatement[45197-45284]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45213-45284]:Block[45213-45284]"
    }, {
      "left" : "cb.onKeyguardBouncerChanged(isBouncer);",
      "right" : "cb.onKeyguardBouncerChanged(isBouncer);",
      "info" : "ExpressionStatement[45231-45270]:ExpressionStatement[45231-45270]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[45378-45385]:Modifier[45378-45385]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[45386-45390]:PrimitiveType[45386-45390]"
    }, {
      "left" : "handleReportEmergencyCallAction",
      "right" : "handleReportEmergencyCallAction",
      "info" : "SimpleName[45391-45422]:SimpleName[45391-45422]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45425-45656]:Block[45425-45656]"
    }, {
      "left" : "for (int i = 0; i < mCallbacks.size(); i++)",
      "right" : "for (int i = 0; i < mCallbacks.size(); i++)",
      "info" : "ForStatement[45435-45650]:ForStatement[45435-45650]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45479-45650]:Block[45479-45650]"
    }, {
      "left" : "KeyguardUpdateMonitorCallback cb = mCallbacks.get(i).get();",
      "right" : "KeyguardUpdateMonitorCallback cb = mCallbacks.get(i).get();",
      "info" : "VariableDeclarationStatement[45493-45552]:VariableDeclarationStatement[45493-45552]"
    }, {
      "left" : "if (cb != null)",
      "right" : "if (cb != null)",
      "info" : "IfStatement[45565-45640]:IfStatement[45565-45640]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45581-45640]:Block[45581-45640]"
    }, {
      "left" : "cb.onEmergencyCallAction();",
      "right" : "cb.onEmergencyCallAction();",
      "info" : "ExpressionStatement[45599-45626]:ExpressionStatement[45599-45626]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[45662-45668]:Modifier[45662-45668]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[45669-45676]:PrimitiveType[45669-45676]"
    }, {
      "left" : "isKeyguardVisible",
      "right" : "isKeyguardVisible",
      "info" : "SimpleName[45677-45694]:SimpleName[45677-45694]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45697-45739]:Block[45697-45739]"
    }, {
      "left" : "return mKeyguardIsVisible;",
      "right" : "return mKeyguardIsVisible;",
      "info" : "ReturnStatement[45707-45733]:ReturnStatement[45707-45733]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[45822-45828]:Modifier[45822-45828]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[45829-45836]:PrimitiveType[45829-45836]"
    }, {
      "left" : "isKeyguardBouncer",
      "right" : "isKeyguardBouncer",
      "info" : "SimpleName[45837-45854]:SimpleName[45837-45854]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45857-45889]:Block[45857-45889]"
    }, {
      "left" : "return mBouncer;",
      "right" : "return mBouncer;",
      "info" : "ReturnStatement[45867-45883]:ReturnStatement[45867-45883]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[45895-45901]:Modifier[45895-45901]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[45902-45909]:PrimitiveType[45902-45909]"
    }, {
      "left" : "isSwitchingUser",
      "right" : "isSwitchingUser",
      "info" : "SimpleName[45910-45925]:SimpleName[45910-45925]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45928-45966]:Block[45928-45966]"
    }, {
      "left" : "return mSwitchingUser;",
      "right" : "return mSwitchingUser;",
      "info" : "ReturnStatement[45938-45960]:ReturnStatement[45938-45960]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[45972-45979]:Modifier[45972-45979]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[45980-45986]:Modifier[45980-45986]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[45987-45994]:PrimitiveType[45987-45994]"
    }, {
      "left" : "isBatteryUpdateInteresting",
      "right" : "isBatteryUpdateInteresting",
      "info" : "SimpleName[45995-46021]:SimpleName[45995-46021]"
    }, {
      "left" : "BatteryStatus old",
      "right" : "BatteryStatus old",
      "info" : "SingleVariableDeclaration[46022-46039]:SingleVariableDeclaration[46022-46039]"
    }, {
      "left" : "BatteryStatus current",
      "right" : "BatteryStatus current",
      "info" : "SingleVariableDeclaration[46041-46062]:SingleVariableDeclaration[46041-46062]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46064-46842]:Block[46064-46842]"
    }, {
      "left" : "final boolean nowPluggedIn = current.isPluggedIn();",
      "right" : "final boolean nowPluggedIn = current.isPluggedIn();",
      "info" : "VariableDeclarationStatement[46074-46125]:VariableDeclarationStatement[46074-46125]"
    }, {
      "left" : "final boolean wasPluggedIn = old.isPluggedIn();",
      "right" : "final boolean wasPluggedIn = old.isPluggedIn();",
      "info" : "VariableDeclarationStatement[46134-46181]:VariableDeclarationStatement[46134-46181]"
    }, {
      "left" : "final boolean stateChangedWhilePluggedIn =\n            wasPluggedIn == true && nowPluggedIn == true\n            && (old.status != current.status);",
      "right" : "final boolean stateChangedWhilePluggedIn =\n            wasPluggedIn == true && nowPluggedIn == true\n            && (old.status != current.status);",
      "info" : "VariableDeclarationStatement[46190-46336]:VariableDeclarationStatement[46190-46336]"
    }, {
      "left" : "if (wasPluggedIn != nowPluggedIn || stateChangedWhilePluggedIn)",
      "right" : "if (wasPluggedIn != nowPluggedIn || stateChangedWhilePluggedIn)",
      "info" : "IfStatement[46400-46500]:IfStatement[46400-46500]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46464-46500]:Block[46464-46500]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[46478-46490]:ReturnStatement[46478-46490]"
    }, {
      "left" : "if (nowPluggedIn && old.level != current.level)",
      "right" : "if (nowPluggedIn && old.level != current.level)",
      "info" : "IfStatement[46562-46646]:IfStatement[46562-46646]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46610-46646]:Block[46610-46646]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[46624-46636]:ReturnStatement[46624-46636]"
    }, {
      "left" : "if (!nowPluggedIn && current.isBatteryLow() && current.level != old.level)",
      "right" : "if (!nowPluggedIn && current.isBatteryLow() && current.level != old.level)",
      "info" : "IfStatement[46703-46814]:IfStatement[46703-46814]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46778-46814]:Block[46778-46814]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[46792-46804]:ReturnStatement[46792-46804]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[46823-46836]:ReturnStatement[46823-46836]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[46962-46968]:Modifier[46962-46968]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[46969-46973]:PrimitiveType[46969-46973]"
    }, {
      "left" : "removeCallback",
      "right" : "removeCallback",
      "info" : "SimpleName[46974-46988]:SimpleName[46974-46988]"
    }, {
      "left" : "KeyguardUpdateMonitorCallback callback",
      "right" : "KeyguardUpdateMonitorCallback callback",
      "info" : "SingleVariableDeclaration[46989-47027]:SingleVariableDeclaration[46989-47027]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47029-47286]:Block[47029-47286]"
    }, {
      "left" : "if (DEBUG)",
      "right" : "if (DEBUG)",
      "info" : "IfStatement[47039-47104]:IfStatement[47039-47104]"
    }, {
      "left" : "Log.v(TAG, \"*** unregister callback for \" + callback);",
      "right" : "Log.v(TAG, \"*** unregister callback for \" + callback);",
      "info" : "ExpressionStatement[47050-47104]:ExpressionStatement[47050-47104]"
    }, {
      "left" : "for (int i = mCallbacks.size() - 1; i >= 0; i--)",
      "right" : "for (int i = mCallbacks.size() - 1; i >= 0; i--)",
      "info" : "ForStatement[47113-47280]:ForStatement[47113-47280]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47162-47280]:Block[47162-47280]"
    }, {
      "left" : "if (mCallbacks.get(i).get() == callback)",
      "right" : "if (mCallbacks.get(i).get() == callback)",
      "info" : "IfStatement[47176-47270]:IfStatement[47176-47270]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47217-47270]:Block[47217-47270]"
    }, {
      "left" : "mCallbacks.remove(i);",
      "right" : "mCallbacks.remove(i);",
      "info" : "ExpressionStatement[47235-47256]:ExpressionStatement[47235-47256]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[47466-47472]:Modifier[47466-47472]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[47473-47477]:PrimitiveType[47473-47477]"
    }, {
      "left" : "registerCallback",
      "right" : "registerCallback",
      "info" : "SimpleName[47478-47494]:SimpleName[47478-47494]"
    }, {
      "left" : "KeyguardUpdateMonitorCallback callback",
      "right" : "KeyguardUpdateMonitorCallback callback",
      "info" : "SingleVariableDeclaration[47495-47533]:SingleVariableDeclaration[47495-47533]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47535-48121]:Block[47535-48121]"
    }, {
      "left" : "if (DEBUG)",
      "right" : "if (DEBUG)",
      "info" : "IfStatement[47545-47608]:IfStatement[47545-47608]"
    }, {
      "left" : "Log.v(TAG, \"*** register callback for \" + callback);",
      "right" : "Log.v(TAG, \"*** register callback for \" + callback);",
      "info" : "ExpressionStatement[47556-47608]:ExpressionStatement[47556-47608]"
    }, {
      "left" : "for (int i = 0; i < mCallbacks.size(); i++)",
      "right" : "for (int i = 0; i < mCallbacks.size(); i++)",
      "info" : "ForStatement[47663-47942]:ForStatement[47663-47942]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47707-47942]:Block[47707-47942]"
    }, {
      "left" : "if (mCallbacks.get(i).get() == callback)",
      "right" : "if (mCallbacks.get(i).get() == callback)",
      "info" : "IfStatement[47721-47932]:IfStatement[47721-47932]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47762-47932]:Block[47762-47932]"
    }, {
      "left" : "if (DEBUG)",
      "right" : "if (DEBUG)",
      "info" : "IfStatement[47780-47894]:IfStatement[47780-47894]"
    }, {
      "left" : "Log.e(TAG, \"Object tried to add another callback\",\n                        new Exception(\"Called by\"));",
      "right" : "Log.e(TAG, \"Object tried to add another callback\",\n                        new Exception(\"Called by\"));",
      "info" : "ExpressionStatement[47791-47894]:ExpressionStatement[47791-47894]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[47911-47918]:ReturnStatement[47911-47918]"
    }, {
      "left" : "mCallbacks.add(new WeakReference<KeyguardUpdateMonitorCallback>(callback));",
      "right" : "mCallbacks.add(new WeakReference<KeyguardUpdateMonitorCallback>(callback));",
      "info" : "ExpressionStatement[47951-48026]:ExpressionStatement[47951-48026]"
    }, {
      "left" : "removeCallback(null);",
      "right" : "removeCallback(null);",
      "info" : "ExpressionStatement[48035-48056]:ExpressionStatement[48035-48056]"
    }, {
      "left" : "sendUpdates(callback);",
      "right" : "sendUpdates(callback);",
      "info" : "ExpressionStatement[48093-48115]:ExpressionStatement[48093-48115]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[48127-48134]:Modifier[48127-48134]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[48135-48139]:PrimitiveType[48135-48139]"
    }, {
      "left" : "sendUpdates",
      "right" : "sendUpdates",
      "info" : "SimpleName[48140-48151]:SimpleName[48140-48151]"
    }, {
      "left" : "KeyguardUpdateMonitorCallback callback",
      "right" : "KeyguardUpdateMonitorCallback callback",
      "info" : "SingleVariableDeclaration[48152-48190]:SingleVariableDeclaration[48152-48190]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48192-48938]:Block[48192-48938]"
    }, {
      "left" : "callback.onRefreshBatteryInfo(mBatteryStatus);",
      "right" : "callback.onRefreshBatteryInfo(mBatteryStatus);",
      "info" : "ExpressionStatement[48250-48296]:ExpressionStatement[48250-48296]"
    }, {
      "left" : "callback.onTimeChanged();",
      "right" : "callback.onTimeChanged();",
      "info" : "ExpressionStatement[48305-48330]:ExpressionStatement[48305-48330]"
    }, {
      "left" : "callback.onRingerModeChanged(mRingMode);",
      "right" : "callback.onRingerModeChanged(mRingMode);",
      "info" : "ExpressionStatement[48339-48379]:ExpressionStatement[48339-48379]"
    }, {
      "left" : "callback.onPhoneStateChanged(mPhoneState);",
      "right" : "callback.onPhoneStateChanged(mPhoneState);",
      "info" : "ExpressionStatement[48388-48430]:ExpressionStatement[48388-48430]"
    }, {
      "left" : "callback.onRefreshCarrierInfo();",
      "right" : "callback.onRefreshCarrierInfo();",
      "info" : "ExpressionStatement[48439-48471]:ExpressionStatement[48439-48471]"
    }, {
      "left" : "callback.onClockVisibilityChanged();",
      "right" : "callback.onClockVisibilityChanged();",
      "info" : "ExpressionStatement[48480-48516]:ExpressionStatement[48480-48516]"
    }, {
      "left" : "for (Entry<Integer, SimData> data : mSimDatas.entrySet())",
      "right" : "for (Entry<Integer, SimData> data : mSimDatas.entrySet())",
      "info" : "EnhancedForStatement[48526-48729]:EnhancedForStatement[48526-48729]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48584-48729]:Block[48584-48729]"
    }, {
      "left" : "final SimData state = data.getValue();",
      "right" : "final SimData state = data.getValue();",
      "info" : "VariableDeclarationStatement[48598-48636]:VariableDeclarationStatement[48598-48636]"
    }, {
      "left" : "callback.onSimStateChanged(state.subId, state.slotId, state.simState);",
      "right" : "callback.onSimStateChanged(state.subId, state.slotId, state.simState);",
      "info" : "ExpressionStatement[48649-48719]:ExpressionStatement[48649-48719]"
    }, {
      "left" : "boolean airplaneModeOn = Settings.System.getInt(\n                mContext.getContentResolver(), Settings.System.AIRPLANE_MODE_ON, 0) != 0;",
      "right" : "boolean airplaneModeOn = Settings.System.getInt(\n                mContext.getContentResolver(), Settings.System.AIRPLANE_MODE_ON, 0) != 0;",
      "info" : "VariableDeclarationStatement[48738-48876]:VariableDeclarationStatement[48738-48876]"
    }, {
      "left" : "callback.onAirplaneModeChanged(airplaneModeOn);",
      "right" : "callback.onAirplaneModeChanged(airplaneModeOn);",
      "info" : "ExpressionStatement[48885-48932]:ExpressionStatement[48885-48932]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[48944-48950]:Modifier[48944-48950]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[48951-48955]:PrimitiveType[48951-48955]"
    }, {
      "left" : "sendKeyguardVisibilityChanged",
      "right" : "sendKeyguardVisibilityChanged",
      "info" : "SimpleName[48956-48985]:SimpleName[48956-48985]"
    }, {
      "left" : "boolean showing",
      "right" : "boolean showing",
      "info" : "SingleVariableDeclaration[48986-49001]:SingleVariableDeclaration[48986-49001]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49003-49246]:Block[49003-49246]"
    }, {
      "left" : "if (DEBUG)",
      "right" : "if (DEBUG)",
      "info" : "IfStatement[49013-49085]:IfStatement[49013-49085]"
    }, {
      "left" : "Log.d(TAG, \"sendKeyguardVisibilityChanged(\" + showing + \")\");",
      "right" : "Log.d(TAG, \"sendKeyguardVisibilityChanged(\" + showing + \")\");",
      "info" : "ExpressionStatement[49024-49085]:ExpressionStatement[49024-49085]"
    }, {
      "left" : "Message message = mHandler.obtainMessage(MSG_KEYGUARD_VISIBILITY_CHANGED);",
      "right" : "Message message = mHandler.obtainMessage(MSG_KEYGUARD_VISIBILITY_CHANGED);",
      "info" : "VariableDeclarationStatement[49094-49168]:VariableDeclarationStatement[49094-49168]"
    }, {
      "left" : "message.arg1 = showing ? 1 : 0;",
      "right" : "message.arg1 = showing ? 1 : 0;",
      "info" : "ExpressionStatement[49177-49208]:ExpressionStatement[49177-49208]"
    }, {
      "left" : "message.sendToTarget();",
      "right" : "message.sendToTarget();",
      "info" : "ExpressionStatement[49217-49240]:ExpressionStatement[49217-49240]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[49315-49321]:Modifier[49315-49321]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[49322-49326]:PrimitiveType[49322-49326]"
    }, {
      "left" : "sendKeyguardBouncerChanged",
      "right" : "sendKeyguardBouncerChanged",
      "info" : "SimpleName[49327-49353]:SimpleName[49327-49353]"
    }, {
      "left" : "boolean showingBouncer",
      "right" : "boolean showingBouncer",
      "info" : "SingleVariableDeclaration[49354-49376]:SingleVariableDeclaration[49354-49376]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49378-49629]:Block[49378-49629]"
    }, {
      "left" : "if (DEBUG)",
      "right" : "if (DEBUG)",
      "info" : "IfStatement[49388-49464]:IfStatement[49388-49464]"
    }, {
      "left" : "Log.d(TAG, \"sendKeyguardBouncerChanged(\" + showingBouncer + \")\");",
      "right" : "Log.d(TAG, \"sendKeyguardBouncerChanged(\" + showingBouncer + \")\");",
      "info" : "ExpressionStatement[49399-49464]:ExpressionStatement[49399-49464]"
    }, {
      "left" : "Message message = mHandler.obtainMessage(MSG_KEYGUARD_BOUNCER_CHANGED);",
      "right" : "Message message = mHandler.obtainMessage(MSG_KEYGUARD_BOUNCER_CHANGED);",
      "info" : "VariableDeclarationStatement[49473-49544]:VariableDeclarationStatement[49473-49544]"
    }, {
      "left" : "message.arg1 = showingBouncer ? 1 : 0;",
      "right" : "message.arg1 = showingBouncer ? 1 : 0;",
      "info" : "ExpressionStatement[49553-49591]:ExpressionStatement[49553-49591]"
    }, {
      "left" : "message.sendToTarget();",
      "right" : "message.sendToTarget();",
      "info" : "ExpressionStatement[49600-49623]:ExpressionStatement[49600-49623]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[49635-49641]:Modifier[49635-49641]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[49642-49646]:PrimitiveType[49642-49646]"
    }, {
      "left" : "reportClockVisible",
      "right" : "reportClockVisible",
      "info" : "SimpleName[49647-49665]:SimpleName[49647-49665]"
    }, {
      "left" : "boolean visible",
      "right" : "boolean visible",
      "info" : "SingleVariableDeclaration[49666-49681]:SingleVariableDeclaration[49666-49681]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49683-49800]:Block[49683-49800]"
    }, {
      "left" : "mClockVisible = visible;",
      "right" : "mClockVisible = visible;",
      "info" : "ExpressionStatement[49693-49717]:ExpressionStatement[49693-49717]"
    }, {
      "left" : "mHandler.obtainMessage(MSG_CLOCK_VISIBILITY_CHANGED).sendToTarget();",
      "right" : "mHandler.obtainMessage(MSG_CLOCK_VISIBILITY_CHANGED).sendToTarget();",
      "info" : "ExpressionStatement[49726-49794]:ExpressionStatement[49726-49794]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[50172-50178]:Modifier[50172-50178]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[50179-50183]:PrimitiveType[50179-50183]"
    }, {
      "left" : "reportSimUnlocked",
      "right" : "reportSimUnlocked",
      "info" : "SimpleName[50184-50201]:SimpleName[50184-50201]"
    }, {
      "left" : "int subId",
      "right" : "int subId",
      "info" : "SingleVariableDeclaration[50202-50211]:SingleVariableDeclaration[50202-50211]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50213-50337]:Block[50213-50337]"
    }, {
      "left" : "int slotId = SubscriptionManager.getSlotId(subId);",
      "right" : "int slotId = SubscriptionManager.getSlotId(subId);",
      "info" : "VariableDeclarationStatement[50223-50273]:VariableDeclarationStatement[50223-50273]"
    }, {
      "left" : "handleSimStateChange(subId, slotId, State.READY);",
      "right" : "handleSimStateChange(subId, slotId, State.READY);",
      "info" : "ExpressionStatement[50282-50331]:ExpressionStatement[50282-50331]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[50608-50614]:Modifier[50608-50614]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[50615-50619]:PrimitiveType[50615-50619]"
    }, {
      "left" : "reportEmergencyCallAction",
      "right" : "reportEmergencyCallAction",
      "info" : "SimpleName[50620-50645]:SimpleName[50620-50645]"
    }, {
      "left" : "boolean bypassHandler",
      "right" : "boolean bypassHandler",
      "info" : "SingleVariableDeclaration[50646-50667]:SingleVariableDeclaration[50646-50667]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50669-50865]:Block[50669-50865]"
    }, {
      "left" : "if (!bypassHandler)",
      "right" : "if (!bypassHandler)",
      "info" : "IfStatement[50679-50859]:IfStatement[50679-50859]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50699-50795]:Block[50699-50795]"
    }, {
      "left" : "mHandler.obtainMessage(MSG_REPORT_EMERGENCY_CALL_ACTION).sendToTarget();",
      "right" : "mHandler.obtainMessage(MSG_REPORT_EMERGENCY_CALL_ACTION).sendToTarget();",
      "info" : "ExpressionStatement[50713-50785]:ExpressionStatement[50713-50785]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50801-50859]:Block[50801-50859]"
    }, {
      "left" : "handleReportEmergencyCallAction();",
      "right" : "handleReportEmergencyCallAction();",
      "info" : "ExpressionStatement[50815-50849]:ExpressionStatement[50815-50849]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[50995-51001]:Modifier[50995-51001]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[51002-51009]:PrimitiveType[51002-51009]"
    }, {
      "left" : "isDeviceProvisioned",
      "right" : "isDeviceProvisioned",
      "info" : "SimpleName[51010-51029]:SimpleName[51010-51029]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51032-51074]:Block[51032-51074]"
    }, {
      "left" : "return mDeviceProvisioned;",
      "right" : "return mDeviceProvisioned;",
      "info" : "ReturnStatement[51042-51068]:ReturnStatement[51042-51068]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[51080-51086]:Modifier[51080-51086]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[51087-51090]:PrimitiveType[51087-51090]"
    }, {
      "left" : "getFailedUnlockAttempts",
      "right" : "getFailedUnlockAttempts",
      "info" : "SimpleName[51091-51114]:SimpleName[51091-51114]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51117-51156]:Block[51117-51156]"
    }, {
      "left" : "return mFailedAttempts;",
      "right" : "return mFailedAttempts;",
      "info" : "ReturnStatement[51127-51150]:ReturnStatement[51127-51150]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[51328-51334]:Modifier[51589-51595]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[51335-51339]:PrimitiveType[51596-51600]"
    }, {
      "left" : "startFingerAuthIfUsingFingerprint",
      "right" : "startFingerAuthIfUsingFingerprint",
      "info" : "SimpleName[51340-51373]:SimpleName[51601-51634]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51376-51672]:Block[51637-51933]"
    }, {
      "left" : "if (mLockPatternUtils.usingFingerprint())",
      "right" : "if (mLockPatternUtils.usingFingerprint())",
      "info" : "IfStatement[51386-51666]:IfStatement[51647-51927]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51428-51666]:Block[51689-51927]"
    }, {
      "left" : "FingerprintManager fpm =\n                    (FingerprintManager) mContext.getSystemService(Context.FINGERPRINT_SERVICE);",
      "right" : "FingerprintManager fpm =\n                    (FingerprintManager) mContext.getSystemService(Context.FINGERPRINT_SERVICE);",
      "info" : "VariableDeclarationStatement[51442-51563]:VariableDeclarationStatement[51703-51824]"
    }, {
      "left" : "fpm.startListening(mFingerprintManagerReceiver);",
      "right" : "fpm.startListening(mFingerprintManagerReceiver);",
      "info" : "ExpressionStatement[51576-51624]:ExpressionStatement[51837-51885]"
    }, {
      "left" : "fpm.authenticate();",
      "right" : "fpm.authenticate();",
      "info" : "ExpressionStatement[51637-51656]:ExpressionStatement[51898-51917]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[51678-51684]:Modifier[51939-51945]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[51685-51689]:PrimitiveType[51946-51950]"
    }, {
      "left" : "stopAuthenticatingFingerprint",
      "right" : "stopAuthenticatingFingerprint",
      "info" : "SimpleName[51690-51719]:SimpleName[51951-51980]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51722-51998]:Block[51983-52259]"
    }, {
      "left" : "if (mLockPatternUtils.isFingerprintInstalled(mContext))",
      "right" : "if (mLockPatternUtils.isFingerprintInstalled(mContext))",
      "info" : "IfStatement[51732-51992]:IfStatement[51993-52253]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51788-51992]:Block[52049-52253]"
    }, {
      "left" : "FingerprintManager fpm =\n                    (FingerprintManager) mContext.getSystemService(Context.FINGERPRINT_SERVICE);",
      "right" : "FingerprintManager fpm =\n                    (FingerprintManager) mContext.getSystemService(Context.FINGERPRINT_SERVICE);",
      "info" : "VariableDeclarationStatement[51802-51923]:VariableDeclarationStatement[52063-52184]"
    }, {
      "left" : "fpm.cancel();",
      "right" : "fpm.cancel();",
      "info" : "ExpressionStatement[51936-51949]:ExpressionStatement[52197-52210]"
    }, {
      "left" : "fpm.stopListening();",
      "right" : "fpm.stopListening();",
      "info" : "ExpressionStatement[51962-51982]:ExpressionStatement[52223-52243]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[52004-52010]:Modifier[52265-52271]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[52011-52015]:PrimitiveType[52272-52276]"
    }, {
      "left" : "clearFingerprintRecognized",
      "right" : "clearFingerprintRecognized",
      "info" : "SimpleName[52016-52042]:SimpleName[52277-52303]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52045-52096]:Block[52306-52357]"
    }, {
      "left" : "mUserFingerprintRecognized.clear();",
      "right" : "mUserFingerprintRecognized.clear();",
      "info" : "ExpressionStatement[52055-52090]:ExpressionStatement[52316-52351]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[52102-52108]:Modifier[52472-52478]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[52109-52113]:PrimitiveType[52479-52483]"
    }, {
      "left" : "reportFailedUnlockAttempt",
      "right" : "reportFailedUnlockAttempt",
      "info" : "SimpleName[52114-52139]:SimpleName[52484-52509]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52142-52176]:Block[52512-52546]"
    }, {
      "left" : "mFailedAttempts++;",
      "right" : "mFailedAttempts++;",
      "info" : "ExpressionStatement[52152-52170]:ExpressionStatement[52522-52540]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[52182-52188]:Modifier[52552-52558]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[52189-52196]:PrimitiveType[52559-52566]"
    }, {
      "left" : "isClockVisible",
      "right" : "isClockVisible",
      "info" : "SimpleName[52197-52211]:SimpleName[52567-52581]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52214-52251]:Block[52584-52621]"
    }, {
      "left" : "return mClockVisible;",
      "right" : "return mClockVisible;",
      "info" : "ReturnStatement[52224-52245]:ReturnStatement[52594-52615]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[52257-52263]:Modifier[52627-52633]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[52264-52267]:PrimitiveType[52634-52637]"
    }, {
      "left" : "getPhoneState",
      "right" : "getPhoneState",
      "info" : "SimpleName[52268-52281]:SimpleName[52638-52651]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52284-52319]:Block[52654-52689]"
    }, {
      "left" : "return mPhoneState;",
      "right" : "return mPhoneState;",
      "info" : "ReturnStatement[52294-52313]:ReturnStatement[52664-52683]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[52325-52331]:Modifier[52695-52701]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[52332-52336]:PrimitiveType[52702-52706]"
    }, {
      "left" : "reportFailedBiometricUnlockAttempt",
      "right" : "reportFailedBiometricUnlockAttempt",
      "info" : "SimpleName[52337-52371]:SimpleName[52707-52741]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52374-52423]:Block[52744-52793]"
    }, {
      "left" : "mFailedBiometricUnlockAttempts++;",
      "right" : "mFailedBiometricUnlockAttempts++;",
      "info" : "ExpressionStatement[52384-52417]:ExpressionStatement[52754-52787]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[52429-52435]:Modifier[52799-52805]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[52436-52443]:PrimitiveType[52806-52813]"
    }, {
      "left" : "getMaxBiometricUnlockAttemptsReached",
      "right" : "getMaxBiometricUnlockAttemptsReached",
      "info" : "SimpleName[52444-52480]:SimpleName[52814-52850]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52483-52587]:Block[52853-52957]"
    }, {
      "left" : "return mFailedBiometricUnlockAttempts >= FAILED_BIOMETRIC_UNLOCK_ATTEMPTS_BEFORE_BACKUP;",
      "right" : "return mFailedBiometricUnlockAttempts >= FAILED_BIOMETRIC_UNLOCK_ATTEMPTS_BEFORE_BACKUP;",
      "info" : "ReturnStatement[52493-52581]:ReturnStatement[52863-52951]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[52593-52599]:Modifier[52963-52969]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[52600-52607]:PrimitiveType[52970-52977]"
    }, {
      "left" : "isMaxFingerprintAttemptsReached",
      "right" : "isMaxFingerprintAttemptsReached",
      "info" : "SimpleName[52608-52639]:SimpleName[52978-53009]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52642-52744]:Block[53012-53114]"
    }, {
      "left" : "return mFailedFingerprintAttempts >= FAILED_FINGERPRINT_UNLOCK_ATTEMPTS_BEFORE_BACKUP;",
      "right" : "return mFailedFingerprintAttempts >= FAILED_FINGERPRINT_UNLOCK_ATTEMPTS_BEFORE_BACKUP;",
      "info" : "ReturnStatement[52652-52738]:ReturnStatement[53022-53108]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[52750-52756]:Modifier[53120-53126]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[52757-52764]:PrimitiveType[53127-53134]"
    }, {
      "left" : "isAlternateUnlockEnabled",
      "right" : "isAlternateUnlockEnabled",
      "info" : "SimpleName[52765-52789]:SimpleName[53135-53159]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52792-52839]:Block[53162-53209]"
    }, {
      "left" : "return mAlternateUnlockEnabled;",
      "right" : "return mAlternateUnlockEnabled;",
      "info" : "ReturnStatement[52802-52833]:ReturnStatement[53172-53203]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[52845-52851]:Modifier[53215-53221]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[52852-52856]:PrimitiveType[53222-53226]"
    }, {
      "left" : "setAlternateUnlockEnabled",
      "right" : "setAlternateUnlockEnabled",
      "info" : "SimpleName[52857-52882]:SimpleName[53227-53252]"
    }, {
      "left" : "boolean enabled",
      "right" : "boolean enabled",
      "info" : "SingleVariableDeclaration[52883-52898]:SingleVariableDeclaration[53253-53268]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52900-52950]:Block[53270-53320]"
    }, {
      "left" : "mAlternateUnlockEnabled = enabled;",
      "right" : "mAlternateUnlockEnabled = enabled;",
      "info" : "ExpressionStatement[52910-52944]:ExpressionStatement[53280-53314]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[52956-52962]:Modifier[53326-53332]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[52963-52970]:PrimitiveType[53333-53340]"
    }, {
      "left" : "isSimPinSecure",
      "right" : "isSimPinSecure",
      "info" : "SimpleName[52971-52985]:SimpleName[53341-53355]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52988-53237]:Block[53358-53607]"
    }, {
      "left" : "for (SubscriptionInfo info : getSubscriptionInfo(false /* forceReload */))",
      "right" : "for (SubscriptionInfo info : getSubscriptionInfo(false /* forceReload */))",
      "info" : "EnhancedForStatement[53039-53209]:EnhancedForStatement[53409-53579]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53114-53209]:Block[53484-53579]"
    }, {
      "left" : "if (isSimPinSecure(getSimState(info.getSubscriptionId())))",
      "right" : "if (isSimPinSecure(getSimState(info.getSubscriptionId())))",
      "info" : "IfStatement[53128-53199]:IfStatement[53498-53569]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[53187-53199]:ReturnStatement[53557-53569]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[53218-53231]:ReturnStatement[53588-53601]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[53243-53249]:Modifier[53613-53619]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[53250-53257]:PrimitiveType[53620-53627]"
    }, {
      "left" : "isSimPinVoiceSecure",
      "right" : "isSimPinVoiceSecure",
      "info" : "SimpleName[53258-53277]:SimpleName[53628-53647]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53280-53371]:Block[53650-53741]"
    }, {
      "left" : "return isSimPinSecure();",
      "right" : "return isSimPinSecure();",
      "info" : "ReturnStatement[53341-53365]:ReturnStatement[53711-53735]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[53377-53383]:Modifier[53747-53753]"
    }, {
      "left" : "State",
      "right" : "State",
      "info" : "SimpleType[53384-53389]:SimpleType[53754-53759]"
    }, {
      "left" : "getSimState",
      "right" : "getSimState",
      "info" : "SimpleName[53390-53401]:SimpleName[53760-53771]"
    }, {
      "left" : "int subId",
      "right" : "int subId",
      "info" : "SingleVariableDeclaration[53402-53411]:SingleVariableDeclaration[53772-53781]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53413-53575]:Block[53783-53945]"
    }, {
      "left" : "if (mSimDatas.containsKey(subId))",
      "right" : "if (mSimDatas.containsKey(subId))",
      "info" : "IfStatement[53423-53569]:IfStatement[53793-53939]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53457-53518]:Block[53827-53888]"
    }, {
      "left" : "return mSimDatas.get(subId).simState;",
      "right" : "return mSimDatas.get(subId).simState;",
      "info" : "ReturnStatement[53471-53508]:ReturnStatement[53841-53878]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53524-53569]:Block[53894-53939]"
    }, {
      "left" : "return State.UNKNOWN;",
      "right" : "return State.UNKNOWN;",
      "info" : "ReturnStatement[53538-53559]:ReturnStatement[53908-53929]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[53581-53587]:Modifier[53951-53957]"
    }, {
      "left" : "ServiceState",
      "right" : "ServiceState",
      "info" : "SimpleType[53588-53600]:SimpleType[53958-53970]"
    }, {
      "left" : "getServiceState",
      "right" : "getServiceState",
      "info" : "SimpleName[53601-53616]:SimpleName[53971-53986]"
    }, {
      "left" : "int subId",
      "right" : "int subId",
      "info" : "SingleVariableDeclaration[53617-53626]:SingleVariableDeclaration[53987-53996]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53628-53677]:Block[53998-54047]"
    }, {
      "left" : "return mServiceStates.get(subId);",
      "right" : "return mServiceStates.get(subId);",
      "info" : "ReturnStatement[53638-53671]:ReturnStatement[54008-54041]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[53789-53796]:Modifier[54159-54166]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[53797-53804]:PrimitiveType[54167-54174]"
    }, {
      "left" : "refreshSimState",
      "right" : "refreshSimState",
      "info" : "SimpleName[53805-53820]:SimpleName[54175-54190]"
    }, {
      "left" : "int subId",
      "right" : "int subId",
      "info" : "SingleVariableDeclaration[53821-53830]:SingleVariableDeclaration[54191-54200]"
    }, {
      "left" : "int slotId",
      "right" : "int slotId",
      "info" : "SingleVariableDeclaration[53832-53842]:SingleVariableDeclaration[54202-54212]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53844-54922]:Block[54214-55292]"
    }, {
      "left" : "final TelephonyManager tele = TelephonyManager.from(mContext);",
      "right" : "final TelephonyManager tele = TelephonyManager.from(mContext);",
      "info" : "VariableDeclarationStatement[54184-54246]:VariableDeclarationStatement[54554-54616]"
    }, {
      "left" : "int simState =  tele.getSimState(slotId);",
      "right" : "int simState =  tele.getSimState(slotId);",
      "info" : "VariableDeclarationStatement[54255-54296]:VariableDeclarationStatement[54625-54666]"
    }, {
      "left" : "State state;",
      "right" : "State state;",
      "info" : "VariableDeclarationStatement[54305-54317]:VariableDeclarationStatement[54675-54687]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[54326-54529]:TryStatement[54696-54899]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54330-54389]:Block[54700-54759]"
    }, {
      "left" : "state = State.intToState(simState);",
      "right" : "state = State.intToState(simState);",
      "info" : "ExpressionStatement[54344-54379]:ExpressionStatement[54714-54749]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54425-54529]:Block[54795-54899]"
    }, {
      "left" : "Log.w(TAG, \"Unknwon sim state: \" + simState);",
      "right" : "Log.w(TAG, \"Unknwon sim state: \" + simState);",
      "info" : "ExpressionStatement[54439-54484]:ExpressionStatement[54809-54854]"
    }, {
      "left" : "state = State.UNKNOWN;",
      "right" : "state = State.UNKNOWN;",
      "info" : "ExpressionStatement[54497-54519]:ExpressionStatement[54867-54889]"
    }, {
      "left" : "SimData data = mSimDatas.get(subId);",
      "right" : "SimData data = mSimDatas.get(subId);",
      "info" : "VariableDeclarationStatement[54538-54574]:VariableDeclarationStatement[54908-54944]"
    }, {
      "left" : "final boolean changed;",
      "right" : "final boolean changed;",
      "info" : "VariableDeclarationStatement[54583-54605]:VariableDeclarationStatement[54953-54975]"
    }, {
      "left" : "if (data == null)",
      "right" : "if (data == null)",
      "info" : "IfStatement[54614-54892]:IfStatement[54984-55262]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54632-54794]:Block[55002-55164]"
    }, {
      "left" : "data = new SimData(state, slotId, subId);",
      "right" : "data = new SimData(state, slotId, subId);",
      "info" : "ExpressionStatement[54646-54687]:ExpressionStatement[55016-55057]"
    }, {
      "left" : "mSimDatas.put(subId, data);",
      "right" : "mSimDatas.put(subId, data);",
      "info" : "ExpressionStatement[54700-54727]:ExpressionStatement[55070-55097]"
    }, {
      "left" : "changed = true;",
      "right" : "changed = true;",
      "info" : "ExpressionStatement[54740-54755]:ExpressionStatement[55110-55125]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54800-54892]:Block[55170-55262]"
    }, {
      "left" : "changed = data.simState != state;",
      "right" : "changed = data.simState != state;",
      "info" : "ExpressionStatement[54814-54847]:ExpressionStatement[55184-55217]"
    }, {
      "left" : "data.simState = state;",
      "right" : "data.simState = state;",
      "info" : "ExpressionStatement[54860-54882]:ExpressionStatement[55230-55252]"
    }, {
      "left" : "return changed;",
      "right" : "return changed;",
      "info" : "ReturnStatement[54901-54916]:ReturnStatement[55271-55286]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[54928-54934]:Modifier[55298-55304]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[54935-54941]:Modifier[55305-55311]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[54942-54949]:PrimitiveType[55312-55319]"
    }, {
      "left" : "isSimPinSecure",
      "right" : "isSimPinSecure",
      "info" : "SimpleName[54950-54964]:SimpleName[55320-55334]"
    }, {
      "left" : "IccCardConstants.State state",
      "right" : "IccCardConstants.State state",
      "info" : "SingleVariableDeclaration[54965-54993]:SingleVariableDeclaration[55335-55363]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54995-55192]:Block[55365-55562]"
    }, {
      "left" : "return state == IccCardConstants.State.PIN_REQUIRED\n                || state == IccCardConstants.State.PUK_REQUIRED\n                || state == IccCardConstants.State.PERM_DISABLED;",
      "right" : "return state == IccCardConstants.State.PIN_REQUIRED\n                || state == IccCardConstants.State.PUK_REQUIRED\n                || state == IccCardConstants.State.PERM_DISABLED;",
      "info" : "ReturnStatement[55005-55186]:ReturnStatement[55375-55556]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[55198-55204]:Modifier[55568-55574]"
    }, {
      "left" : "DisplayClientState",
      "right" : "DisplayClientState",
      "info" : "SimpleType[55205-55223]:SimpleType[55575-55593]"
    }, {
      "left" : "getCachedDisplayClientState",
      "right" : "getCachedDisplayClientState",
      "info" : "SimpleName[55224-55251]:SimpleName[55594-55621]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55254-55297]:Block[55624-55667]"
    }, {
      "left" : "return mDisplayClientState;",
      "right" : "return mDisplayClientState;",
      "info" : "ReturnStatement[55264-55291]:ReturnStatement[55634-55661]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[55435-55441]:Modifier[55805-55811]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[55442-55446]:PrimitiveType[55812-55816]"
    }, {
      "left" : "dispatchScreenTurnedOn",
      "right" : "dispatchScreenTurnedOn",
      "info" : "SimpleName[55447-55469]:SimpleName[55817-55839]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55472-55606]:Block[55842-55976]"
    }, {
      "left" : "synchronized (this) {\n            mScreenOn = true;\n        }",
      "right" : "synchronized (this) {\n            mScreenOn = true;\n        }",
      "info" : "SynchronizedStatement[55482-55543]:SynchronizedStatement[55852-55913]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55502-55543]:Block[55872-55913]"
    }, {
      "left" : "mScreenOn = true;",
      "right" : "mScreenOn = true;",
      "info" : "ExpressionStatement[55516-55533]:ExpressionStatement[55886-55903]"
    }, {
      "left" : "mHandler.sendEmptyMessage(MSG_SCREEN_TURNED_ON);",
      "right" : "mHandler.sendEmptyMessage(MSG_SCREEN_TURNED_ON);",
      "info" : "ExpressionStatement[55552-55600]:ExpressionStatement[55922-55970]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[55612-55618]:Modifier[55982-55988]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[55619-55623]:PrimitiveType[55989-55993]"
    }, {
      "left" : "dispatchScreenTurndOff",
      "right" : "dispatchScreenTurndOff",
      "info" : "SimpleName[55624-55646]:SimpleName[55994-56016]"
    }, {
      "left" : "int why",
      "right" : "int why",
      "info" : "SingleVariableDeclaration[55647-55654]:SingleVariableDeclaration[56017-56024]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55656-55818]:Block[56026-56188]"
    }, {
      "left" : "synchronized(this) {\n            mScreenOn = false;\n        }",
      "right" : "synchronized(this) {\n            mScreenOn = false;\n        }",
      "info" : "SynchronizedStatement[55666-55727]:SynchronizedStatement[56036-56097]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55685-55727]:Block[56055-56097]"
    }, {
      "left" : "mScreenOn = false;",
      "right" : "mScreenOn = false;",
      "info" : "ExpressionStatement[55699-55717]:ExpressionStatement[56069-56087]"
    }, {
      "left" : "mHandler.sendMessage(mHandler.obtainMessage(MSG_SCREEN_TURNED_OFF, why, 0));",
      "right" : "mHandler.sendMessage(mHandler.obtainMessage(MSG_SCREEN_TURNED_OFF, why, 0));",
      "info" : "ExpressionStatement[55736-55812]:ExpressionStatement[56106-56182]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[55824-55830]:Modifier[56194-56200]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[55831-55838]:PrimitiveType[56201-56208]"
    }, {
      "left" : "isScreenOn",
      "right" : "isScreenOn",
      "info" : "SimpleName[55839-55849]:SimpleName[56209-56219]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55852-55885]:Block[56222-56255]"
    }, {
      "left" : "return mScreenOn;",
      "right" : "return mScreenOn;",
      "info" : "ReturnStatement[55862-55879]:ReturnStatement[56232-56249]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[56118-56124]:Modifier[56488-56494]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[56125-56128]:PrimitiveType[56495-56498]"
    }, {
      "left" : "getNextSubIdForState",
      "right" : "getNextSubIdForState",
      "info" : "SimpleName[56129-56149]:SimpleName[56499-56519]"
    }, {
      "left" : "State state",
      "right" : "State state",
      "info" : "SingleVariableDeclaration[56150-56161]:SingleVariableDeclaration[56520-56531]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56163-56793]:Block[56533-57163]"
    }, {
      "left" : "List<SubscriptionInfo> list = getSubscriptionInfo(false /* forceReload */);",
      "right" : "List<SubscriptionInfo> list = getSubscriptionInfo(false /* forceReload */);",
      "info" : "VariableDeclarationStatement[56173-56248]:VariableDeclarationStatement[56543-56618]"
    }, {
      "left" : "int resultId = SubscriptionManager.INVALID_SUBSCRIPTION_ID;",
      "right" : "int resultId = SubscriptionManager.INVALID_SUBSCRIPTION_ID;",
      "info" : "VariableDeclarationStatement[56257-56316]:VariableDeclarationStatement[56627-56686]"
    }, {
      "left" : "int bestSlotId = Integer.MAX_VALUE;",
      "right" : "int bestSlotId = Integer.MAX_VALUE;",
      "info" : "VariableDeclarationStatement[56325-56360]:VariableDeclarationStatement[56695-56730]"
    }, {
      "left" : "for (int i = 0; i < list.size(); i++)",
      "right" : "for (int i = 0; i < list.size(); i++)",
      "info" : "ForStatement[56396-56762]:ForStatement[56766-57132]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56434-56762]:Block[56804-57132]"
    }, {
      "left" : "final SubscriptionInfo info = list.get(i);",
      "right" : "final SubscriptionInfo info = list.get(i);",
      "info" : "VariableDeclarationStatement[56448-56490]:VariableDeclarationStatement[56818-56860]"
    }, {
      "left" : "final int id = info.getSubscriptionId();",
      "right" : "final int id = info.getSubscriptionId();",
      "info" : "VariableDeclarationStatement[56503-56543]:VariableDeclarationStatement[56873-56913]"
    }, {
      "left" : "int slotId = SubscriptionManager.getSlotId(id);",
      "right" : "int slotId = SubscriptionManager.getSlotId(id);",
      "info" : "VariableDeclarationStatement[56556-56603]:VariableDeclarationStatement[56926-56973]"
    }, {
      "left" : "if (state == getSimState(id) && bestSlotId > slotId)",
      "right" : "if (state == getSimState(id) && bestSlotId > slotId)",
      "info" : "IfStatement[56616-56752]:IfStatement[56986-57122]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56669-56752]:Block[57039-57122]"
    }, {
      "left" : "resultId = id;",
      "right" : "resultId = id;",
      "info" : "ExpressionStatement[56687-56701]:ExpressionStatement[57057-57071]"
    }, {
      "left" : "bestSlotId = slotId;",
      "right" : "bestSlotId = slotId;",
      "info" : "ExpressionStatement[56718-56738]:ExpressionStatement[57088-57108]"
    }, {
      "left" : "return resultId;",
      "right" : "return resultId;",
      "info" : "ReturnStatement[56771-56787]:ReturnStatement[57141-57157]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[56799-56805]:Modifier[57169-57175]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[56806-56809]:PrimitiveType[57176-57179]"
    }, {
      "left" : "getNumPhones",
      "right" : "getNumPhones",
      "info" : "SimpleName[56810-56822]:SimpleName[57180-57192]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56825-56972]:Block[57195-57342]"
    }, {
      "left" : "if (mNumPhones == 0)",
      "right" : "if (mNumPhones == 0)",
      "info" : "IfStatement[56835-56939]:IfStatement[57205-57309]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56856-56939]:Block[57226-57309]"
    }, {
      "left" : "mNumPhones = TelephonyManager.getDefault().getPhoneCount();",
      "right" : "mNumPhones = TelephonyManager.getDefault().getPhoneCount();",
      "info" : "ExpressionStatement[56870-56929]:ExpressionStatement[57240-57299]"
    }, {
      "left" : "return mNumPhones;",
      "right" : "return mNumPhones;",
      "info" : "ReturnStatement[56948-56966]:ReturnStatement[57318-57336]"
    } ]
  },
  "interFileMappings" : { }
}