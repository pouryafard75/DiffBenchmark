{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "private static final Pattern charsetPattern = Pattern.compile(\"(?i)\\\\bcharset=\\\\s*(?:\\\"|')?([^\\\\s,;\\\"']*)\");",
      "right" : "private static final Pattern charsetPattern = Pattern.compile(\"(?i)\\\\bcharset=\\\\s*(?:\\\"|')?([^\\\\s,;\\\"']*)\");",
      "info" : "FieldDeclaration[663-771]:FieldDeclaration[663-771]"
    }, {
      "left" : "static final String defaultCharset = \"UTF-8\";",
      "right" : "static final String defaultCharset = \"UTF-8\";",
      "info" : "FieldDeclaration[776-821]:FieldDeclaration[776-821]"
    }, {
      "left" : "private static final int bufferSize = 0x20000;",
      "right" : "private static final int bufferSize = 0x20000;",
      "info" : "FieldDeclaration[873-919]:FieldDeclaration[873-919]"
    }, {
      "left" : "private static final int UNICODE_BOM = 0xFEFF;",
      "right" : "private static final int UNICODE_BOM = 0xFEFF;",
      "info" : "FieldDeclaration[934-980]:FieldDeclaration[934-980]"
    }, {
      "left" : "private static final char[] mimeBoundaryChars =\n            \"-_1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\".toCharArray();",
      "right" : "private static final char[] mimeBoundaryChars =\n            \"-_1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\".toCharArray();",
      "info" : "FieldDeclaration[985-1126]:FieldDeclaration[985-1126]"
    }, {
      "left" : "static final int boundaryLength = 32;",
      "right" : "static final int boundaryLength = 32;",
      "info" : "FieldDeclaration[1131-1168]:FieldDeclaration[1131-1168]"
    }, {
      "left" : "private DataUtil()",
      "right" : "private DataUtil()",
      "info" : "MethodDeclaration[1174-1195]:MethodDeclaration[1174-1195]"
    }, {
      "left" : "public static Document load(File in, String charsetName, String baseUri) throws IOException",
      "right" : "public static Document load(File in, String charsetName, String baseUri) throws IOException",
      "info" : "MethodDeclaration[1201-1710]:MethodDeclaration[1201-1710]"
    }, {
      "left" : "public static Document load(InputStream in, String charsetName, String baseUri) throws IOException",
      "right" : "public static Document load(InputStream in, String charsetName, String baseUri) throws IOException",
      "info" : "MethodDeclaration[1716-2276]:MethodDeclaration[1716-2276]"
    }, {
      "left" : "public static Document load(InputStream in, String charsetName, String baseUri, Parser parser) throws IOException",
      "right" : "public static Document load(InputStream in, String charsetName, String baseUri, Parser parser) throws IOException",
      "info" : "MethodDeclaration[2282-2944]:MethodDeclaration[2282-2944]"
    }, {
      "left" : "static void crossStreams(final InputStream in, final OutputStream out) throws IOException",
      "right" : "static void crossStreams(final InputStream in, final OutputStream out) throws IOException",
      "info" : "MethodDeclaration[2950-3428]:MethodDeclaration[2950-3428]"
    }, {
      "left" : "static ByteBuffer readToByteBuffer(InputStream inStream, int maxSize) throws IOException",
      "right" : "static ByteBuffer readToByteBuffer(InputStream inStream, int maxSize) throws IOException",
      "info" : "MethodDeclaration[6396-7572]:MethodDeclaration[6142-7318]"
    }, {
      "left" : "static ByteBuffer readToByteBuffer(InputStream inStream) throws IOException",
      "right" : "static ByteBuffer readToByteBuffer(InputStream inStream) throws IOException",
      "info" : "MethodDeclaration[7578-7707]:MethodDeclaration[7324-7453]"
    }, {
      "left" : "static ByteBuffer readFileToByteBuffer(File file) throws IOException",
      "right" : "static ByteBuffer readFileToByteBuffer(File file) throws IOException",
      "info" : "MethodDeclaration[7713-8191]:MethodDeclaration[7459-7937]"
    }, {
      "left" : "static ByteBuffer emptyByteBuffer()",
      "right" : "static ByteBuffer emptyByteBuffer()",
      "info" : "MethodDeclaration[8197-8279]:MethodDeclaration[7943-8025]"
    }, {
      "left" : "static String getCharsetFromContentType(String contentType)",
      "right" : "static String getCharsetFromContentType(String contentType)",
      "info" : "MethodDeclaration[8285-8954]:MethodDeclaration[8031-8700]"
    }, {
      "left" : "private static String validateCharset(String cs)",
      "right" : "private static String validateCharset(String cs)",
      "info" : "MethodDeclaration[8960-9448]:MethodDeclaration[8706-9194]"
    }, {
      "left" : "static String mimeBoundary()",
      "right" : "static String mimeBoundary()",
      "info" : "MethodDeclaration[9454-9863]:MethodDeclaration[9200-9609]"
    }, {
      "left" : "private static String detectCharsetFromBom(ByteBuffer byteData, String charsetName)",
      "right" : "private static String detectCharsetFromBom(ByteBuffer byteData, String charsetName)",
      "info" : "MethodDeclaration[9869-10913]:MethodDeclaration[9615-10659]"
    } ],
    "mappings" : [
 {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[1174-1181]:Modifier[1174-1181]"
    }, {
      "left" : "DataUtil",
      "right" : "DataUtil",
      "info" : "SimpleName[1182-1190]:SimpleName[1182-1190]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1193-1195]:Block[1193-1195]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[1472-1478]:Modifier[1472-1478]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[1479-1485]:Modifier[1479-1485]"
    }, {
      "left" : "Document",
      "right" : "Document",
      "info" : "SimpleType[1486-1494]:SimpleType[1486-1494]"
    }, {
      "left" : "load",
      "right" : "load",
      "info" : "SimpleName[1495-1499]:SimpleName[1495-1499]"
    }, {
      "left" : "File in",
      "right" : "File in",
      "info" : "SingleVariableDeclaration[1500-1507]:SingleVariableDeclaration[1500-1507]"
    }, {
      "left" : "String charsetName",
      "right" : "String charsetName",
      "info" : "SingleVariableDeclaration[1509-1527]:SingleVariableDeclaration[1509-1527]"
    }, {
      "left" : "String baseUri",
      "right" : "String baseUri",
      "info" : "SingleVariableDeclaration[1529-1543]:SingleVariableDeclaration[1529-1543]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[1552-1563]:SimpleType[1552-1563]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1564-1710]:Block[1564-1710]"
    }, {
      "left" : "ByteBuffer byteData = readFileToByteBuffer(in);",
      "right" : "ByteBuffer byteData = readFileToByteBuffer(in);",
      "info" : "VariableDeclarationStatement[1574-1621]:VariableDeclarationStatement[1574-1621]"
    }, {
      "left" : "return parseByteData(byteData, charsetName, baseUri, Parser.htmlParser());",
      "right" : "return parseByteData(byteData, charsetName, baseUri, Parser.htmlParser());",
      "info" : "ReturnStatement[1630-1704]:ReturnStatement[1630-1704]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[2035-2041]:Modifier[2035-2041]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[2042-2048]:Modifier[2042-2048]"
    }, {
      "left" : "Document",
      "right" : "Document",
      "info" : "SimpleType[2049-2057]:SimpleType[2049-2057]"
    }, {
      "left" : "load",
      "right" : "load",
      "info" : "SimpleName[2058-2062]:SimpleName[2058-2062]"
    }, {
      "left" : "InputStream in",
      "right" : "InputStream in",
      "info" : "SingleVariableDeclaration[2063-2077]:SingleVariableDeclaration[2063-2077]"
    }, {
      "left" : "String charsetName",
      "right" : "String charsetName",
      "info" : "SingleVariableDeclaration[2079-2097]:SingleVariableDeclaration[2079-2097]"
    }, {
      "left" : "String baseUri",
      "right" : "String baseUri",
      "info" : "SingleVariableDeclaration[2099-2113]:SingleVariableDeclaration[2099-2113]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[2122-2133]:SimpleType[2122-2133]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2134-2276]:Block[2134-2276]"
    }, {
      "left" : "ByteBuffer byteData = readToByteBuffer(in);",
      "right" : "ByteBuffer byteData = readToByteBuffer(in);",
      "info" : "VariableDeclarationStatement[2144-2187]:VariableDeclarationStatement[2144-2187]"
    }, {
      "left" : "return parseByteData(byteData, charsetName, baseUri, Parser.htmlParser());",
      "right" : "return parseByteData(byteData, charsetName, baseUri, Parser.htmlParser());",
      "info" : "ReturnStatement[2196-2270]:ReturnStatement[2196-2270]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[2701-2707]:Modifier[2701-2707]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[2708-2714]:Modifier[2708-2714]"
    }, {
      "left" : "Document",
      "right" : "Document",
      "info" : "SimpleType[2715-2723]:SimpleType[2715-2723]"
    }, {
      "left" : "load",
      "right" : "load",
      "info" : "SimpleName[2724-2728]:SimpleName[2724-2728]"
    }, {
      "left" : "InputStream in",
      "right" : "InputStream in",
      "info" : "SingleVariableDeclaration[2729-2743]:SingleVariableDeclaration[2729-2743]"
    }, {
      "left" : "String charsetName",
      "right" : "String charsetName",
      "info" : "SingleVariableDeclaration[2745-2763]:SingleVariableDeclaration[2745-2763]"
    }, {
      "left" : "String baseUri",
      "right" : "String baseUri",
      "info" : "SingleVariableDeclaration[2765-2779]:SingleVariableDeclaration[2765-2779]"
    }, {
      "left" : "Parser parser",
      "right" : "Parser parser",
      "info" : "SingleVariableDeclaration[2781-2794]:SingleVariableDeclaration[2781-2794]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[2803-2814]:SimpleType[2803-2814]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2815-2944]:Block[2815-2944]"
    }, {
      "left" : "ByteBuffer byteData = readToByteBuffer(in);",
      "right" : "ByteBuffer byteData = readToByteBuffer(in);",
      "info" : "VariableDeclarationStatement[2825-2868]:VariableDeclarationStatement[2825-2868]"
    }, {
      "left" : "return parseByteData(byteData, charsetName, baseUri, parser);",
      "right" : "return parseByteData(byteData, charsetName, baseUri, parser);",
      "info" : "ReturnStatement[2877-2938]:ReturnStatement[2877-2938]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[3165-3171]:Modifier[3165-3171]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[3172-3176]:PrimitiveType[3172-3176]"
    }, {
      "left" : "crossStreams",
      "right" : "crossStreams",
      "info" : "SimpleName[3177-3189]:SimpleName[3177-3189]"
    }, {
      "left" : "final InputStream in",
      "right" : "final InputStream in",
      "info" : "SingleVariableDeclaration[3190-3210]:SingleVariableDeclaration[3190-3210]"
    }, {
      "left" : "final OutputStream out",
      "right" : "final OutputStream out",
      "info" : "SingleVariableDeclaration[3212-3234]:SingleVariableDeclaration[3212-3234]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[3243-3254]:SimpleType[3243-3254]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3255-3428]:Block[3255-3428]"
    }, {
      "left" : "final byte[] buffer = new byte[bufferSize];",
      "right" : "final byte[] buffer = new byte[bufferSize];",
      "info" : "VariableDeclarationStatement[3265-3308]:VariableDeclarationStatement[3265-3308]"
    }, {
      "left" : "int len;",
      "right" : "int len;",
      "info" : "VariableDeclarationStatement[3317-3325]:VariableDeclarationStatement[3317-3325]"
    }, {
      "left" : "while ((len = in.read(buffer)) != -1)",
      "right" : "while ((len = in.read(buffer)) != -1)",
      "info" : "WhileStatement[3334-3422]:WhileStatement[3334-3422]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3372-3422]:Block[3372-3422]"
    }, {
      "left" : "out.write(buffer, 0, len);",
      "right" : "out.write(buffer, 0, len);",
      "info" : "ExpressionStatement[3386-3412]:ExpressionStatement[3386-3412]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[6739-6745]:Modifier[6485-6491]"
    }, {
      "left" : "ByteBuffer",
      "right" : "ByteBuffer",
      "info" : "SimpleType[6746-6756]:SimpleType[6492-6502]"
    }, {
      "left" : "readToByteBuffer",
      "right" : "readToByteBuffer",
      "info" : "SimpleName[6757-6773]:SimpleName[6503-6519]"
    }, {
      "left" : "InputStream inStream",
      "right" : "InputStream inStream",
      "info" : "SingleVariableDeclaration[6774-6794]:SingleVariableDeclaration[6520-6540]"
    }, {
      "left" : "int maxSize",
      "right" : "int maxSize",
      "info" : "SingleVariableDeclaration[6796-6807]:SingleVariableDeclaration[6542-6553]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[6816-6827]:SimpleType[6562-6573]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6828-7572]:Block[6574-7318]"
    }, {
      "left" : "Validate.isTrue(maxSize >= 0, \"maxSize must be 0 (unlimited) or larger\");",
      "right" : "Validate.isTrue(maxSize >= 0, \"maxSize must be 0 (unlimited) or larger\");",
      "info" : "ExpressionStatement[6838-6911]:ExpressionStatement[6584-6657]"
    }, {
      "left" : "final boolean capped = maxSize > 0;",
      "right" : "final boolean capped = maxSize > 0;",
      "info" : "VariableDeclarationStatement[6920-6955]:VariableDeclarationStatement[6666-6701]"
    }, {
      "left" : "byte[] buffer = new byte[bufferSize];",
      "right" : "byte[] buffer = new byte[bufferSize];",
      "info" : "VariableDeclarationStatement[6964-7001]:VariableDeclarationStatement[6710-6747]"
    }, {
      "left" : "ByteArrayOutputStream outStream = new ByteArrayOutputStream(bufferSize);",
      "right" : "ByteArrayOutputStream outStream = new ByteArrayOutputStream(bufferSize);",
      "info" : "VariableDeclarationStatement[7010-7082]:VariableDeclarationStatement[6756-6828]"
    }, {
      "left" : "int read;",
      "right" : "int read;",
      "info" : "VariableDeclarationStatement[7091-7100]:VariableDeclarationStatement[6837-6846]"
    }, {
      "left" : "int remaining = maxSize;",
      "right" : "int remaining = maxSize;",
      "info" : "VariableDeclarationStatement[7109-7133]:VariableDeclarationStatement[6855-6879]"
    }, {
      "left" : "while (true)",
      "right" : "while (true)",
      "info" : "WhileStatement[7143-7509]:WhileStatement[6889-7255]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7156-7509]:Block[6902-7255]"
    }, {
      "left" : "read = inStream.read(buffer);",
      "right" : "read = inStream.read(buffer);",
      "info" : "ExpressionStatement[7170-7199]:ExpressionStatement[6916-6945]"
    }, {
      "left" : "if (read == -1)",
      "right" : "if (read == -1)",
      "info" : "IfStatement[7212-7234]:IfStatement[6958-6980]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[7228-7234]:BreakStatement[6974-6980]"
    }, {
      "left" : "if (capped)",
      "right" : "if (capped)",
      "info" : "IfStatement[7247-7453]:IfStatement[6993-7199]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7259-7453]:Block[7005-7199]"
    }, {
      "left" : "if (read > remaining)",
      "right" : "if (read > remaining)",
      "info" : "IfStatement[7277-7404]:IfStatement[7023-7150]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7299-7404]:Block[7045-7150]"
    }, {
      "left" : "outStream.write(buffer, 0, remaining);",
      "right" : "outStream.write(buffer, 0, remaining);",
      "info" : "ExpressionStatement[7321-7359]:ExpressionStatement[7067-7105]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[7380-7386]:BreakStatement[7126-7132]"
    }, {
      "left" : "remaining -= read;",
      "right" : "remaining -= read;",
      "info" : "ExpressionStatement[7421-7439]:ExpressionStatement[7167-7185]"
    }, {
      "left" : "outStream.write(buffer, 0, read);",
      "right" : "outStream.write(buffer, 0, read);",
      "info" : "ExpressionStatement[7466-7499]:ExpressionStatement[7212-7245]"
    }, {
      "left" : "return ByteBuffer.wrap(outStream.toByteArray());",
      "right" : "return ByteBuffer.wrap(outStream.toByteArray());",
      "info" : "ReturnStatement[7518-7566]:ReturnStatement[7264-7312]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[7578-7584]:Modifier[7324-7330]"
    }, {
      "left" : "ByteBuffer",
      "right" : "ByteBuffer",
      "info" : "SimpleType[7585-7595]:SimpleType[7331-7341]"
    }, {
      "left" : "readToByteBuffer",
      "right" : "readToByteBuffer",
      "info" : "SimpleName[7596-7612]:SimpleName[7342-7358]"
    }, {
      "left" : "InputStream inStream",
      "right" : "InputStream inStream",
      "info" : "SingleVariableDeclaration[7613-7633]:SingleVariableDeclaration[7359-7379]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[7642-7653]:SimpleType[7388-7399]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7654-7707]:Block[7400-7453]"
    }, {
      "left" : "return readToByteBuffer(inStream, 0);",
      "right" : "return readToByteBuffer(inStream, 0);",
      "info" : "ReturnStatement[7664-7701]:ReturnStatement[7410-7447]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[7713-7719]:Modifier[7459-7465]"
    }, {
      "left" : "ByteBuffer",
      "right" : "ByteBuffer",
      "info" : "SimpleType[7720-7730]:SimpleType[7466-7476]"
    }, {
      "left" : "readFileToByteBuffer",
      "right" : "readFileToByteBuffer",
      "info" : "SimpleName[7731-7751]:SimpleName[7477-7497]"
    }, {
      "left" : "File file",
      "right" : "File file",
      "info" : "SingleVariableDeclaration[7752-7761]:SingleVariableDeclaration[7498-7507]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[7770-7781]:SimpleType[7516-7527]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7782-8191]:Block[7528-7937]"
    }, {
      "left" : "RandomAccessFile randomAccessFile = null;",
      "right" : "RandomAccessFile randomAccessFile = null;",
      "info" : "VariableDeclarationStatement[7792-7833]:VariableDeclarationStatement[7538-7579]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[7842-8185]:TryStatement[7588-7931]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7846-8081]:Block[7592-7827]"
    }, {
      "left" : "randomAccessFile = new RandomAccessFile(file, \"r\");",
      "right" : "randomAccessFile = new RandomAccessFile(file, \"r\");",
      "info" : "ExpressionStatement[7860-7911]:ExpressionStatement[7606-7657]"
    }, {
      "left" : "byte[] bytes = new byte[(int) randomAccessFile.length()];",
      "right" : "byte[] bytes = new byte[(int) randomAccessFile.length()];",
      "info" : "VariableDeclarationStatement[7924-7981]:VariableDeclarationStatement[7670-7727]"
    }, {
      "left" : "randomAccessFile.readFully(bytes);",
      "right" : "randomAccessFile.readFully(bytes);",
      "info" : "ExpressionStatement[7994-8028]:ExpressionStatement[7740-7774]"
    }, {
      "left" : "return ByteBuffer.wrap(bytes);",
      "right" : "return ByteBuffer.wrap(bytes);",
      "info" : "ReturnStatement[8041-8071]:ReturnStatement[7787-7817]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8090-8185]:Block[7836-7931]"
    }, {
      "left" : "if (randomAccessFile != null)",
      "right" : "if (randomAccessFile != null)",
      "info" : "IfStatement[8104-8175]:IfStatement[7850-7921]"
    }, {
      "left" : "randomAccessFile.close();",
      "right" : "randomAccessFile.close();",
      "info" : "ExpressionStatement[8150-8175]:ExpressionStatement[7896-7921]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[8197-8203]:Modifier[7943-7949]"
    }, {
      "left" : "ByteBuffer",
      "right" : "ByteBuffer",
      "info" : "SimpleType[8204-8214]:SimpleType[7950-7960]"
    }, {
      "left" : "emptyByteBuffer",
      "right" : "emptyByteBuffer",
      "info" : "SimpleName[8215-8230]:SimpleName[7961-7976]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8233-8279]:Block[7979-8025]"
    }, {
      "left" : "return ByteBuffer.allocate(0);",
      "right" : "return ByteBuffer.allocate(0);",
      "info" : "ReturnStatement[8243-8273]:ReturnStatement[7989-8019]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[8581-8587]:Modifier[8327-8333]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[8588-8594]:SimpleType[8334-8340]"
    }, {
      "left" : "getCharsetFromContentType",
      "right" : "getCharsetFromContentType",
      "info" : "SimpleName[8595-8620]:SimpleName[8341-8366]"
    }, {
      "left" : "String contentType",
      "right" : "String contentType",
      "info" : "SingleVariableDeclaration[8621-8639]:SingleVariableDeclaration[8367-8385]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8641-8954]:Block[8387-8700]"
    }, {
      "left" : "if (contentType == null)",
      "right" : "if (contentType == null)",
      "info" : "IfStatement[8651-8688]:IfStatement[8397-8434]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[8676-8688]:ReturnStatement[8422-8434]"
    }, {
      "left" : "Matcher m = charsetPattern.matcher(contentType);",
      "right" : "Matcher m = charsetPattern.matcher(contentType);",
      "info" : "VariableDeclarationStatement[8697-8745]:VariableDeclarationStatement[8443-8491]"
    }, {
      "left" : "if (m.find())",
      "right" : "if (m.find())",
      "info" : "IfStatement[8754-8927]:IfStatement[8500-8673]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8768-8927]:Block[8514-8673]"
    }, {
      "left" : "String charset = m.group(1).trim();",
      "right" : "String charset = m.group(1).trim();",
      "info" : "VariableDeclarationStatement[8782-8817]:VariableDeclarationStatement[8528-8563]"
    }, {
      "left" : "charset = charset.replace(\"charset=\", \"\");",
      "right" : "charset = charset.replace(\"charset=\", \"\");",
      "info" : "ExpressionStatement[8830-8872]:ExpressionStatement[8576-8618]"
    }, {
      "left" : "return validateCharset(charset);",
      "right" : "return validateCharset(charset);",
      "info" : "ReturnStatement[8885-8917]:ReturnStatement[8631-8663]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[8936-8948]:ReturnStatement[8682-8694]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[8960-8967]:Modifier[8706-8713]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[8968-8974]:Modifier[8714-8720]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[8975-8981]:SimpleType[8721-8727]"
    }, {
      "left" : "validateCharset",
      "right" : "validateCharset",
      "info" : "SimpleName[8982-8997]:SimpleName[8728-8743]"
    }, {
      "left" : "String cs",
      "right" : "String cs",
      "info" : "SingleVariableDeclaration[8998-9007]:SingleVariableDeclaration[8744-8753]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9009-9448]:Block[8755-9194]"
    }, {
      "left" : "if (cs == null || cs.length() == 0)",
      "right" : "if (cs == null || cs.length() == 0)",
      "info" : "IfStatement[9019-9067]:IfStatement[8765-8813]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[9055-9067]:ReturnStatement[8801-8813]"
    }, {
      "left" : "cs = cs.trim().replaceAll(\"[\\\"']\", \"\");",
      "right" : "cs = cs.trim().replaceAll(\"[\\\"']\", \"\");",
      "info" : "ExpressionStatement[9076-9115]:ExpressionStatement[8822-8861]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[9124-9421]:TryStatement[8870-9167]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9128-9292]:Block[8874-9038]"
    }, {
      "left" : "if (Charset.isSupported(cs))",
      "right" : "if (Charset.isSupported(cs))",
      "info" : "IfStatement[9142-9181]:IfStatement[8888-8927]"
    }, {
      "left" : "return cs;",
      "right" : "return cs;",
      "info" : "ReturnStatement[9171-9181]:ReturnStatement[8917-8927]"
    }, {
      "left" : "cs = cs.toUpperCase(Locale.ENGLISH);",
      "right" : "cs = cs.toUpperCase(Locale.ENGLISH);",
      "info" : "ExpressionStatement[9194-9230]:ExpressionStatement[8940-8976]"
    }, {
      "left" : "if (Charset.isSupported(cs))",
      "right" : "if (Charset.isSupported(cs))",
      "info" : "IfStatement[9243-9282]:IfStatement[8989-9028]"
    }, {
      "left" : "return cs;",
      "right" : "return cs;",
      "info" : "ReturnStatement[9272-9282]:ReturnStatement[9018-9028]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9331-9421]:Block[9077-9167]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[9430-9442]:ReturnStatement[9176-9188]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[9538-9544]:Modifier[9284-9290]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[9545-9551]:SimpleType[9291-9297]"
    }, {
      "left" : "mimeBoundary",
      "right" : "mimeBoundary",
      "info" : "SimpleName[9552-9564]:SimpleName[9298-9310]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9567-9863]:Block[9313-9609]"
    }, {
      "left" : "final StringBuilder mime = new StringBuilder(boundaryLength);",
      "right" : "final StringBuilder mime = new StringBuilder(boundaryLength);",
      "info" : "VariableDeclarationStatement[9577-9638]:VariableDeclarationStatement[9323-9384]"
    }, {
      "left" : "final Random rand = new Random();",
      "right" : "final Random rand = new Random();",
      "info" : "VariableDeclarationStatement[9647-9680]:VariableDeclarationStatement[9393-9426]"
    }, {
      "left" : "for (int i = 0; i < boundaryLength; i++)",
      "right" : "for (int i = 0; i < boundaryLength; i++)",
      "info" : "ForStatement[9689-9825]:ForStatement[9435-9571]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9730-9825]:Block[9476-9571]"
    }, {
      "left" : "mime.append(mimeBoundaryChars[rand.nextInt(mimeBoundaryChars.length)]);",
      "right" : "mime.append(mimeBoundaryChars[rand.nextInt(mimeBoundaryChars.length)]);",
      "info" : "ExpressionStatement[9744-9815]:ExpressionStatement[9490-9561]"
    }, {
      "left" : "return mime.toString();",
      "right" : "return mime.toString();",
      "info" : "ReturnStatement[9834-9857]:ReturnStatement[9580-9603]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[9869-9876]:Modifier[9615-9622]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[9877-9883]:Modifier[9623-9629]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[9884-9890]:SimpleType[9630-9636]"
    }, {
      "left" : "detectCharsetFromBom",
      "right" : "detectCharsetFromBom",
      "info" : "SimpleName[9891-9911]:SimpleName[9637-9657]"
    }, {
      "left" : "ByteBuffer byteData",
      "right" : "ByteBuffer byteData",
      "info" : "SingleVariableDeclaration[9912-9931]:SingleVariableDeclaration[9658-9677]"
    }, {
      "left" : "String charsetName",
      "right" : "String charsetName",
      "info" : "SingleVariableDeclaration[9933-9951]:SingleVariableDeclaration[9679-9697]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9953-10913]:Block[9699-10659]"
    }, {
      "left" : "byteData.mark();",
      "right" : "byteData.mark();",
      "info" : "ExpressionStatement[9963-9979]:ExpressionStatement[9709-9725]"
    }, {
      "left" : "byte[] bom = new byte[4];",
      "right" : "byte[] bom = new byte[4];",
      "info" : "VariableDeclarationStatement[9988-10013]:VariableDeclarationStatement[9734-9759]"
    }, {
      "left" : "if (byteData.remaining() >= bom.length)",
      "right" : "if (byteData.remaining() >= bom.length)",
      "info" : "IfStatement[10022-10135]:IfStatement[9768-9881]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10062-10135]:Block[9808-9881]"
    }, {
      "left" : "byteData.get(bom);",
      "right" : "byteData.get(bom);",
      "info" : "ExpressionStatement[10076-10094]:ExpressionStatement[9822-9840]"
    }, {
      "left" : "byteData.rewind();",
      "right" : "byteData.rewind();",
      "info" : "ExpressionStatement[10107-10125]:ExpressionStatement[9853-9871]"
    }, {
      "left" : "if (bom[0] == 0x00 && bom[1] == 0x00 && bom[2] == (byte) 0xFE && bom[3] == (byte) 0xFF || // BE\n            bom[0] == (byte) 0xFF && bom[1] == (byte) 0xFE && bom[2] == 0x00 && bom[3] == 0x00)",
      "right" : "if (bom[0] == 0x00 && bom[1] == 0x00 && bom[2] == (byte) 0xFE && bom[3] == (byte) 0xFF || // BE\n            bom[0] == (byte) 0xFF && bom[1] == (byte) 0xFE && bom[2] == 0x00 && bom[3] == 0x00)",
      "info" : "IfStatement[10144-10879]:IfStatement[9890-10625]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10336-10423]:Block[10082-10169]"
    }, {
      "left" : "charsetName = \"UTF-32\";",
      "right" : "charsetName = \"UTF-32\";",
      "info" : "ExpressionStatement[10356-10379]:ExpressionStatement[10102-10125]"
    }, {
      "left" : "if (bom[0] == (byte) 0xFE && bom[1] == (byte) 0xFF || // BE\n            bom[0] == (byte) 0xFF && bom[1] == (byte) 0xFE)",
      "right" : "if (bom[0] == (byte) 0xFE && bom[1] == (byte) 0xFF || // BE\n            bom[0] == (byte) 0xFF && bom[1] == (byte) 0xFE)",
      "info" : "IfStatement[10429-10879]:IfStatement[10175-10625]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10549-10612]:Block[10295-10358]"
    }, {
      "left" : "charsetName = \"UTF-16\";",
      "right" : "charsetName = \"UTF-16\";",
      "info" : "ExpressionStatement[10563-10586]:ExpressionStatement[10309-10332]"
    }, {
      "left" : "if (bom[0] == (byte) 0xEF && bom[1] == (byte) 0xBB && bom[2] == (byte) 0xBF)",
      "right" : "if (bom[0] == (byte) 0xEF && bom[1] == (byte) 0xBB && bom[2] == (byte) 0xBF)",
      "info" : "IfStatement[10618-10879]:IfStatement[10364-10625]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10695-10879]:Block[10441-10625]"
    }, {
      "left" : "charsetName = \"UTF-8\";",
      "right" : "charsetName = \"UTF-8\";",
      "info" : "ExpressionStatement[10709-10731]:ExpressionStatement[10455-10477]"
    }, {
      "left" : "byteData.position(3);",
      "right" : "byteData.position(3);",
      "info" : "ExpressionStatement[10760-10781]:ExpressionStatement[10506-10527]"
    }, {
      "left" : "return charsetName;",
      "right" : "return charsetName;",
      "info" : "ReturnStatement[10888-10907]:ReturnStatement[10634-10653]"
    } ]
  },
  "interFileMappings" : { }
}