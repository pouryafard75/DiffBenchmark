{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "private static final long serialVersionUID = 2L;",
      "right" : "private static final long serialVersionUID = 2L;",
      "info" : "FieldDeclaration[1301-1349]:FieldDeclaration[1301-1349]"
    }, {
      "left" : "protected final boolean _caseInsensitive;",
      "right" : "protected final boolean _caseInsensitive;",
      "info" : "FieldDeclaration[1355-1430]:FieldDeclaration[1355-1430]"
    }, {
      "left" : "private int _hashMask;",
      "right" : "private int _hashMask;",
      "info" : "FieldDeclaration[1436-1458]:FieldDeclaration[1436-1458]"
    }, {
      "left" : "private int _size;",
      "right" : "private int _size;",
      "info" : "FieldDeclaration[1464-1548]:FieldDeclaration[1464-1548]"
    }, {
      "left" : "private int _spillCount;",
      "right" : "private int _spillCount;",
      "info" : "FieldDeclaration[1558-1582]:FieldDeclaration[1558-1582]"
    }, {
      "left" : "private Object[] _hashArea;",
      "right" : "private Object[] _hashArea;",
      "info" : "FieldDeclaration[1588-1703]:FieldDeclaration[1588-1703]"
    }, {
      "left" : "private SettableBeanProperty[] _propsInOrder;",
      "right" : "private SettableBeanProperty[] _propsInOrder;",
      "info" : "FieldDeclaration[1709-1901]:FieldDeclaration[1709-1901]"
    }, {
      "left" : "public BeanPropertyMap(boolean caseInsensitive, Collection<SettableBeanProperty> props)",
      "right" : "public BeanPropertyMap(boolean caseInsensitive, Collection<SettableBeanProperty> props)",
      "info" : "MethodDeclaration[1907-2150]:MethodDeclaration[1907-2150]"
    }, {
      "left" : "protected BeanPropertyMap(BeanPropertyMap base, boolean caseInsensitive)",
      "right" : "protected BeanPropertyMap(BeanPropertyMap base, boolean caseInsensitive)",
      "info" : "MethodDeclaration[2156-2556]:MethodDeclaration[2156-2556]"
    }, {
      "left" : "public BeanPropertyMap withCaseInsensitivity(boolean state)",
      "right" : "public BeanPropertyMap withCaseInsensitivity(boolean state)",
      "info" : "MethodDeclaration[2562-2997]:MethodDeclaration[2562-2997]"
    }, {
      "left" : "protected void init(Collection<SettableBeanProperty> props)",
      "right" : "protected void init(Collection<SettableBeanProperty> props)",
      "info" : "MethodDeclaration[3003-4693]:MethodDeclaration[3003-4693]"
    }, {
      "left" : "private final static int findSize(int size)",
      "right" : "private final static int findSize(int size)",
      "info" : "MethodDeclaration[4703-5057]:MethodDeclaration[4703-5057]"
    }, {
      "left" : "public static BeanPropertyMap construct(Collection<SettableBeanProperty> props, boolean caseInsensitive)",
      "right" : "public static BeanPropertyMap construct(Collection<SettableBeanProperty> props, boolean caseInsensitive)",
      "info" : "MethodDeclaration[5067-5273]:MethodDeclaration[5067-5273]"
    }, {
      "left" : "public BeanPropertyMap withProperty(SettableBeanProperty newProp)",
      "right" : "public BeanPropertyMap withProperty(SettableBeanProperty newProp)",
      "info" : "MethodDeclaration[5283-7360]:MethodDeclaration[5283-7360]"
    }, {
      "left" : "public BeanPropertyMap assignIndexes()",
      "right" : "public BeanPropertyMap assignIndexes()",
      "info" : "MethodDeclaration[7366-7746]:MethodDeclaration[7366-7746]"
    }, {
      "left" : "public BeanPropertyMap renameAll(NameTransformer transformer)",
      "right" : "public BeanPropertyMap renameAll(NameTransformer transformer)",
      "info" : "MethodDeclaration[7752-8746]:MethodDeclaration[7752-8746]"
    }, {
      "left" : "public BeanPropertyMap withoutProperties(Collection<String> toExclude)",
      "right" : "public BeanPropertyMap withoutProperties(Collection<String> toExclude)",
      "info" : "MethodDeclaration[8752-9902]:MethodDeclaration[8752-9902]"
    }, {
      "left" : "public void replace(SettableBeanProperty newProp)",
      "right" : "public void replace(SettableBeanProperty newProp)",
      "info" : "MethodDeclaration[9912-10619]:MethodDeclaration[9912-10619]"
    }, {
      "left" : "private List<SettableBeanProperty> properties()",
      "right" : "private List<SettableBeanProperty> properties()",
      "info" : "MethodDeclaration[10625-11015]:MethodDeclaration[10625-11015]"
    }, {
      "left" : "public Iterator<SettableBeanProperty> iterator()",
      "right" : "public Iterator<SettableBeanProperty> iterator()",
      "info" : "MethodDeclaration[11021-11209]:MethodDeclaration[11021-11209]"
    }, {
      "left" : "public SettableBeanProperty[] getPropertiesInInsertionOrder()",
      "right" : "public SettableBeanProperty[] getPropertiesInInsertionOrder()",
      "info" : "MethodDeclaration[11215-11579]:MethodDeclaration[11215-11579]"
    }, {
      "left" : "protected final String getPropertyName(SettableBeanProperty prop)",
      "right" : "protected final String getPropertyName(SettableBeanProperty prop)",
      "info" : "MethodDeclaration[11774-11928]:MethodDeclaration[11774-11928]"
    }, {
      "left" : "public SettableBeanProperty find(int index)",
      "right" : "public SettableBeanProperty find(int index)",
      "info" : "MethodDeclaration[11934-12420]:MethodDeclaration[11934-12420]"
    }, {
      "left" : "public SettableBeanProperty find(String key)",
      "right" : "public SettableBeanProperty find(String key)",
      "info" : "MethodDeclaration[12426-13089]:MethodDeclaration[12426-13089]"
    }, {
      "left" : "private final SettableBeanProperty _find2(String key, int slot, Object match)",
      "right" : "private final SettableBeanProperty _find2(String key, int slot, Object match)",
      "info" : "MethodDeclaration[13095-13881]:MethodDeclaration[13095-13881]"
    }, {
      "left" : "public int size()",
      "right" : "public int size()",
      "info" : "MethodDeclaration[14053-14088]:MethodDeclaration[14053-14088]"
    }, {
      "left" : "public boolean findDeserializeAndSet(JsonParser p, DeserializationContext ctxt,\n            Object bean, String key) throws IOException",
      "right" : "public boolean findDeserializeAndSet(JsonParser p, DeserializationContext ctxt,\n            Object bean, String key) throws IOException",
      "info" : "MethodDeclaration[15342-16184]:MethodDeclaration[15342-16184]"
    }, {
      "left" : "public String toString()",
      "right" : "public String toString()",
      "info" : "MethodDeclaration[16190-16761]:MethodDeclaration[16190-16761]"
    }, {
      "left" : "protected SettableBeanProperty _rename(SettableBeanProperty prop, NameTransformer xf)",
      "right" : "protected SettableBeanProperty _rename(SettableBeanProperty prop, NameTransformer xf)",
      "info" : "MethodDeclaration[16937-17602]:MethodDeclaration[16937-17602]"
    }, {
      "left" : "protected void wrapAndThrow(Throwable t, Object bean, String fieldName, DeserializationContext ctxt)\n        throws IOException",
      "right" : "protected void wrapAndThrow(Throwable t, Object bean, String fieldName, DeserializationContext ctxt)\n        throws IOException",
      "info" : "MethodDeclaration[17608-18695]:MethodDeclaration[17608-18695]"
    }, {
      "left" : "private final int _findIndexInHash(String key)",
      "right" : "private final int _findIndexInHash(String key)",
      "info" : "MethodDeclaration[18701-19648]:MethodDeclaration[18701-19648]"
    }, {
      "left" : "private final int _findFromOrdered(SettableBeanProperty prop)",
      "right" : "private final int _findFromOrdered(SettableBeanProperty prop)",
      "info" : "MethodDeclaration[19658-20005]:MethodDeclaration[19658-20005]"
    }, {
      "left" : "private final int _hashCode(String key)",
      "right" : "private final int _hashCode(String key)",
      "info" : "MethodDeclaration[20087-20470]:MethodDeclaration[20087-20470]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1999-2150]:Block[1999-2150]"
    }, {
      "left" : "_caseInsensitive = caseInsensitive;",
      "right" : "_caseInsensitive = caseInsensitive;",
      "info" : "ExpressionStatement[2009-2044]:ExpressionStatement[2009-2044]"
    }, {
      "left" : "_propsInOrder = props.toArray(new SettableBeanProperty[props.size()]);",
      "right" : "_propsInOrder = props.toArray(new SettableBeanProperty[props.size()]);",
      "info" : "ExpressionStatement[2053-2123]:ExpressionStatement[2053-2123]"
    }, {
      "left" : "init(props);",
      "right" : "init(props);",
      "info" : "ExpressionStatement[2132-2144]:ExpressionStatement[2132-2144]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2267-2556]:Block[2267-2556]"
    }, {
      "left" : "_caseInsensitive = caseInsensitive;",
      "right" : "_caseInsensitive = caseInsensitive;",
      "info" : "ExpressionStatement[2277-2312]:ExpressionStatement[2277-2312]"
    }, {
      "left" : "_propsInOrder = Arrays.copyOf(base._propsInOrder, base._propsInOrder.length);",
      "right" : "_propsInOrder = Arrays.copyOf(base._propsInOrder, base._propsInOrder.length);",
      "info" : "ExpressionStatement[2429-2506]:ExpressionStatement[2429-2506]"
    }, {
      "left" : "init(Arrays.asList(_propsInOrder));",
      "right" : "init(Arrays.asList(_propsInOrder));",
      "info" : "ExpressionStatement[2515-2550]:ExpressionStatement[2515-2550]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2865-2997]:Block[2865-2997]"
    }, {
      "left" : "if (_caseInsensitive == state)",
      "right" : "if (_caseInsensitive == state)",
      "info" : "IfStatement[2875-2942]:IfStatement[2875-2942]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2906-2942]:Block[2906-2942]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[2920-2932]:ReturnStatement[2920-2932]"
    }, {
      "left" : "return new BeanPropertyMap(this, state);",
      "right" : "return new BeanPropertyMap(this, state);",
      "info" : "ReturnStatement[2951-2991]:ReturnStatement[2951-2991]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3067-4693]:Block[3067-4693]"
    }, {
      "left" : "_size = props.size();",
      "right" : "_size = props.size();",
      "info" : "ExpressionStatement[3077-3098]:ExpressionStatement[3077-3098]"
    }, {
      "left" : "final int hashSize = findSize(_size);",
      "right" : "final int hashSize = findSize(_size);",
      "info" : "VariableDeclarationStatement[3162-3199]:VariableDeclarationStatement[3162-3199]"
    }, {
      "left" : "_hashMask = hashSize-1;",
      "right" : "_hashMask = hashSize-1;",
      "info" : "ExpressionStatement[3208-3231]:ExpressionStatement[3208-3231]"
    }, {
      "left" : "int alloc = (hashSize + (hashSize>>1)) * 2;",
      "right" : "int alloc = (hashSize + (hashSize>>1)) * 2;",
      "info" : "VariableDeclarationStatement[3335-3378]:VariableDeclarationStatement[3335-3378]"
    }, {
      "left" : "Object[] hashed = new Object[alloc];",
      "right" : "Object[] hashed = new Object[alloc];",
      "info" : "VariableDeclarationStatement[3387-3423]:VariableDeclarationStatement[3387-3423]"
    }, {
      "left" : "int spillCount = 0;",
      "right" : "int spillCount = 0;",
      "info" : "VariableDeclarationStatement[3432-3451]:VariableDeclarationStatement[3432-3451]"
    }, {
      "left" : "for (SettableBeanProperty prop : props)",
      "right" : "for (SettableBeanProperty prop : props)",
      "info" : "EnhancedForStatement[3461-4493]:EnhancedForStatement[3461-4493]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3501-4493]:Block[3501-4493]"
    }, {
      "left" : "if (prop == null)",
      "right" : "if (prop == null)",
      "info" : "IfStatement[3602-3661]:IfStatement[3602-3661]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3620-3661]:Block[3620-3661]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[3638-3647]:ContinueStatement[3638-3647]"
    }, {
      "left" : "String key = getPropertyName(prop);",
      "right" : "String key = getPropertyName(prop);",
      "info" : "VariableDeclarationStatement[3687-3722]:VariableDeclarationStatement[3687-3722]"
    }, {
      "left" : "int slot = _hashCode(key);",
      "right" : "int slot = _hashCode(key);",
      "info" : "VariableDeclarationStatement[3735-3761]:VariableDeclarationStatement[3735-3761]"
    }, {
      "left" : "int ix = (slot<<1);",
      "right" : "int ix = (slot<<1);",
      "info" : "VariableDeclarationStatement[3774-3793]:VariableDeclarationStatement[3774-3793]"
    }, {
      "left" : "if (hashed[ix] != null)",
      "right" : "if (hashed[ix] != null)",
      "info" : "IfStatement[3845-4322]:IfStatement[3845-4322]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3869-4322]:Block[3869-4322]"
    }, {
      "left" : "ix = (hashSize + (slot >> 1)) << 1;",
      "right" : "ix = (hashSize + (slot >> 1)) << 1;",
      "info" : "ExpressionStatement[3917-3952]:ExpressionStatement[3917-3952]"
    }, {
      "left" : "if (hashed[ix] != null)",
      "right" : "if (hashed[ix] != null)",
      "info" : "IfStatement[3969-4308]:IfStatement[3969-4308]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3993-4308]:Block[3993-4308]"
    }, {
      "left" : "ix = ((hashSize + (hashSize >> 1) ) << 1) + spillCount;",
      "right" : "ix = ((hashSize + (hashSize >> 1) ) << 1) + spillCount;",
      "info" : "ExpressionStatement[4054-4109]:ExpressionStatement[4054-4109]"
    }, {
      "left" : "spillCount += 2;",
      "right" : "spillCount += 2;",
      "info" : "ExpressionStatement[4130-4146]:ExpressionStatement[4130-4146]"
    }, {
      "left" : "if (ix >= hashed.length)",
      "right" : "if (ix >= hashed.length)",
      "info" : "IfStatement[4167-4290]:IfStatement[4167-4290]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4192-4290]:Block[4192-4290]"
    }, {
      "left" : "hashed = Arrays.copyOf(hashed, hashed.length + 4);",
      "right" : "hashed = Arrays.copyOf(hashed, hashed.length + 4);",
      "info" : "ExpressionStatement[4218-4268]:ExpressionStatement[4218-4268]"
    }, {
      "left" : "hashed[ix] = key;",
      "right" : "hashed[ix] = key;",
      "info" : "ExpressionStatement[4433-4450]:ExpressionStatement[4433-4450]"
    }, {
      "left" : "hashed[ix+1] = prop;",
      "right" : "hashed[ix+1] = prop;",
      "info" : "ExpressionStatement[4463-4483]:ExpressionStatement[4463-4483]"
    }, {
      "left" : "_hashArea = hashed;",
      "right" : "_hashArea = hashed;",
      "info" : "ExpressionStatement[4634-4653]:ExpressionStatement[4634-4653]"
    }, {
      "left" : "_spillCount = spillCount;",
      "right" : "_spillCount = spillCount;",
      "info" : "ExpressionStatement[4662-4687]:ExpressionStatement[4662-4687]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4751-5057]:Block[4751-5057]"
    }, {
      "left" : "if (size <= 5)",
      "right" : "if (size <= 5)",
      "info" : "IfStatement[4761-4809]:IfStatement[4761-4809]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4776-4809]:Block[4776-4809]"
    }, {
      "left" : "return 8;",
      "right" : "return 8;",
      "info" : "ReturnStatement[4790-4799]:ReturnStatement[4790-4799]"
    }, {
      "left" : "if (size <= 12)",
      "right" : "if (size <= 12)",
      "info" : "IfStatement[4818-4868]:IfStatement[4818-4868]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4834-4868]:Block[4834-4868]"
    }, {
      "left" : "return 16;",
      "right" : "return 16;",
      "info" : "ReturnStatement[4848-4858]:ReturnStatement[4848-4858]"
    }, {
      "left" : "int needed = size + (size >> 2);",
      "right" : "int needed = size + (size >> 2);",
      "info" : "VariableDeclarationStatement[4877-4909]:VariableDeclarationStatement[4877-4909]"
    }, {
      "left" : "int result = 32;",
      "right" : "int result = 32;",
      "info" : "VariableDeclarationStatement[4938-4954]:VariableDeclarationStatement[4938-4954]"
    }, {
      "left" : "while (result < needed)",
      "right" : "while (result < needed)",
      "info" : "WhileStatement[4963-5028]:WhileStatement[4963-5028]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4987-5028]:Block[4987-5028]"
    }, {
      "left" : "result += result;",
      "right" : "result += result;",
      "info" : "ExpressionStatement[5001-5018]:ExpressionStatement[5001-5018]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[5037-5051]:ReturnStatement[5037-5051]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5206-5273]:Block[5206-5273]"
    }, {
      "left" : "return new BeanPropertyMap(caseInsensitive, props);",
      "right" : "return new BeanPropertyMap(caseInsensitive, props);",
      "info" : "ReturnStatement[5216-5267]:ReturnStatement[5216-5267]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5635-7360]:Block[5635-7360]"
    }, {
      "left" : "String key = getPropertyName(newProp);",
      "right" : "String key = getPropertyName(newProp);",
      "info" : "VariableDeclarationStatement[5692-5730]:VariableDeclarationStatement[5692-5730]"
    }, {
      "left" : "for (int i = 1, end = _hashArea.length; i < end; i += 2)",
      "right" : "for (int i = 1, end = _hashArea.length; i < end; i += 2)",
      "info" : "ForStatement[5740-6097]:ForStatement[5740-6097]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5797-6097]:Block[5797-6097]"
    }, {
      "left" : "SettableBeanProperty prop = (SettableBeanProperty) _hashArea[i];",
      "right" : "SettableBeanProperty prop = (SettableBeanProperty) _hashArea[i];",
      "info" : "VariableDeclarationStatement[5811-5875]:VariableDeclarationStatement[5811-5875]"
    }, {
      "left" : "if ((prop != null) && prop.getName().equals(key))",
      "right" : "if ((prop != null) && prop.getName().equals(key))",
      "info" : "IfStatement[5888-6087]:IfStatement[5888-6087]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5938-6087]:Block[5938-6087]"
    }, {
      "left" : "_hashArea[i] = newProp;",
      "right" : "_hashArea[i] = newProp;",
      "info" : "ExpressionStatement[5956-5979]:ExpressionStatement[5956-5979]"
    }, {
      "left" : "_propsInOrder[_findFromOrdered(prop)] = newProp;",
      "right" : "_propsInOrder[_findFromOrdered(prop)] = newProp;",
      "info" : "ExpressionStatement[5996-6044]:ExpressionStatement[5996-6044]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[6061-6073]:ReturnStatement[6061-6073]"
    }, {
      "left" : "final int slot = _hashCode(key);",
      "right" : "final int slot = _hashCode(key);",
      "info" : "VariableDeclarationStatement[6132-6164]:VariableDeclarationStatement[6132-6164]"
    }, {
      "left" : "final int hashSize = _hashMask+1;",
      "right" : "final int hashSize = _hashMask+1;",
      "info" : "VariableDeclarationStatement[6173-6206]:VariableDeclarationStatement[6173-6206]"
    }, {
      "left" : "int ix = (slot<<1);",
      "right" : "int ix = (slot<<1);",
      "info" : "VariableDeclarationStatement[6215-6234]:VariableDeclarationStatement[6215-6234]"
    }, {
      "left" : "if (_hashArea[ix] != null)",
      "right" : "if (_hashArea[ix] != null)",
      "info" : "IfStatement[6286-7052]:IfStatement[6286-7052]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6313-7052]:Block[6313-7052]"
    }, {
      "left" : "ix = (hashSize + (slot >> 1)) << 1;",
      "right" : "ix = (hashSize + (slot >> 1)) << 1;",
      "info" : "ExpressionStatement[6353-6388]:ExpressionStatement[6353-6388]"
    }, {
      "left" : "if (_hashArea[ix] != null)",
      "right" : "if (_hashArea[ix] != null)",
      "info" : "IfStatement[6401-7042]:IfStatement[6401-7042]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6428-7042]:Block[6428-7042]"
    }, {
      "left" : "ix = ((hashSize + (hashSize >> 1) ) << 1) + _spillCount;",
      "right" : "ix = ((hashSize + (hashSize >> 1) ) << 1) + _spillCount;",
      "info" : "ExpressionStatement[6481-6537]:ExpressionStatement[6481-6537]"
    }, {
      "left" : "_spillCount += 2;",
      "right" : "_spillCount += 2;",
      "info" : "ExpressionStatement[6554-6571]:ExpressionStatement[6554-6571]"
    }, {
      "left" : "if (ix >= _hashArea.length)",
      "right" : "if (ix >= _hashArea.length)",
      "info" : "IfStatement[6588-7028]:IfStatement[6588-7028]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6616-7028]:Block[6616-7028]"
    }, {
      "left" : "_hashArea = Arrays.copyOf(_hashArea, _hashArea.length + 4);",
      "right" : "_hashArea = Arrays.copyOf(_hashArea, _hashArea.length + 4);",
      "info" : "ExpressionStatement[6638-6697]:ExpressionStatement[6638-6697]"
    }, {
      "left" : "_hashArea[ix] = key;",
      "right" : "_hashArea[ix] = key;",
      "info" : "ExpressionStatement[7061-7081]:ExpressionStatement[7061-7081]"
    }, {
      "left" : "_hashArea[ix+1] = newProp;",
      "right" : "_hashArea[ix+1] = newProp;",
      "info" : "ExpressionStatement[7090-7116]:ExpressionStatement[7090-7116]"
    }, {
      "left" : "int last = _propsInOrder.length;",
      "right" : "int last = _propsInOrder.length;",
      "info" : "VariableDeclarationStatement[7126-7158]:VariableDeclarationStatement[7126-7158]"
    }, {
      "left" : "_propsInOrder = Arrays.copyOf(_propsInOrder, last+1);",
      "right" : "_propsInOrder = Arrays.copyOf(_propsInOrder, last+1);",
      "info" : "ExpressionStatement[7167-7220]:ExpressionStatement[7167-7220]"
    }, {
      "left" : "_propsInOrder[last] = newProp;",
      "right" : "_propsInOrder[last] = newProp;",
      "info" : "ExpressionStatement[7229-7259]:ExpressionStatement[7229-7259]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[7342-7354]:ReturnStatement[7342-7354]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7409-7746]:Block[7409-7746]"
    }, {
      "left" : "int index = 0;",
      "right" : "int index = 0;",
      "info" : "VariableDeclarationStatement[7462-7476]:VariableDeclarationStatement[7462-7476]"
    }, {
      "left" : "for (int i = 1, end = _hashArea.length; i < end; i += 2)",
      "right" : "for (int i = 1, end = _hashArea.length; i < end; i += 2)",
      "info" : "ForStatement[7485-7719]:ForStatement[7485-7719]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7542-7719]:Block[7542-7719]"
    }, {
      "left" : "SettableBeanProperty prop = (SettableBeanProperty) _hashArea[i];",
      "right" : "SettableBeanProperty prop = (SettableBeanProperty) _hashArea[i];",
      "info" : "VariableDeclarationStatement[7556-7620]:VariableDeclarationStatement[7556-7620]"
    }, {
      "left" : "if (prop != null)",
      "right" : "if (prop != null)",
      "info" : "IfStatement[7633-7709]:IfStatement[7633-7709]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7651-7709]:Block[7651-7709]"
    }, {
      "left" : "prop.assignIndex(index++);",
      "right" : "prop.assignIndex(index++);",
      "info" : "ExpressionStatement[7669-7695]:ExpressionStatement[7669-7695]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[7728-7740]:ReturnStatement[7728-7740]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7928-8746]:Block[7928-8746]"
    }, {
      "left" : "if (transformer == null || (transformer == NameTransformer.NOP))",
      "right" : "if (transformer == null || (transformer == NameTransformer.NOP))",
      "info" : "IfStatement[7938-8039]:IfStatement[7938-8039]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8003-8039]:Block[8003-8039]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[8017-8029]:ReturnStatement[8017-8029]"
    }, {
      "left" : "final int len = _propsInOrder.length;",
      "right" : "final int len = _propsInOrder.length;",
      "info" : "VariableDeclarationStatement[8100-8137]:VariableDeclarationStatement[8100-8137]"
    }, {
      "left" : "ArrayList<SettableBeanProperty> newProps = new ArrayList<SettableBeanProperty>(len);",
      "right" : "ArrayList<SettableBeanProperty> newProps = new ArrayList<SettableBeanProperty>(len);",
      "info" : "VariableDeclarationStatement[8146-8230]:VariableDeclarationStatement[8146-8230]"
    }, {
      "left" : "for (int i = 0; i < len; ++i)",
      "right" : "for (int i = 0; i < len; ++i)",
      "info" : "ForStatement[8240-8568]:ForStatement[8240-8568]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8270-8568]:Block[8270-8568]"
    }, {
      "left" : "SettableBeanProperty prop = _propsInOrder[i];",
      "right" : "SettableBeanProperty prop = _propsInOrder[i];",
      "info" : "VariableDeclarationStatement[8284-8329]:VariableDeclarationStatement[8284-8329]"
    }, {
      "left" : "if (prop == null)",
      "right" : "if (prop == null)",
      "info" : "IfStatement[8409-8504]:IfStatement[8409-8504]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8427-8504]:Block[8427-8504]"
    }, {
      "left" : "newProps.add(prop);",
      "right" : "newProps.add(prop);",
      "info" : "ExpressionStatement[8445-8464]:ExpressionStatement[8445-8464]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[8481-8490]:ContinueStatement[8481-8490]"
    }, {
      "left" : "newProps.add(_rename(prop, transformer));",
      "right" : "newProps.add(_rename(prop, transformer));",
      "info" : "ExpressionStatement[8517-8558]:ExpressionStatement[8517-8558]"
    }, {
      "left" : "return new BeanPropertyMap(_caseInsensitive, newProps);",
      "right" : "return new BeanPropertyMap(_caseInsensitive, newProps);",
      "info" : "ReturnStatement[8685-8740]:ReturnStatement[8685-8740]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9055-9902]:Block[9055-9902]"
    }, {
      "left" : "if (toExclude.isEmpty())",
      "right" : "if (toExclude.isEmpty())",
      "info" : "IfStatement[9065-9126]:IfStatement[9065-9126]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9090-9126]:Block[9090-9126]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[9104-9116]:ReturnStatement[9104-9116]"
    }, {
      "left" : "final int len = _propsInOrder.length;",
      "right" : "final int len = _propsInOrder.length;",
      "info" : "VariableDeclarationStatement[9135-9172]:VariableDeclarationStatement[9135-9172]"
    }, {
      "left" : "ArrayList<SettableBeanProperty> newProps = new ArrayList<SettableBeanProperty>(len);",
      "right" : "ArrayList<SettableBeanProperty> newProps = new ArrayList<SettableBeanProperty>(len);",
      "info" : "VariableDeclarationStatement[9181-9265]:VariableDeclarationStatement[9181-9265]"
    }, {
      "left" : "for (int i = 0; i < len; ++i)",
      "right" : "for (int i = 0; i < len; ++i)",
      "info" : "ForStatement[9275-9775]:ForStatement[9275-9775]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9305-9775]:Block[9305-9775]"
    }, {
      "left" : "SettableBeanProperty prop = _propsInOrder[i];",
      "right" : "SettableBeanProperty prop = _propsInOrder[i];",
      "info" : "VariableDeclarationStatement[9319-9364]:VariableDeclarationStatement[9319-9364]"
    }, {
      "left" : "if (prop != null)",
      "right" : "if (prop != null)",
      "info" : "IfStatement[9581-9765]:IfStatement[9581-9765]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9599-9765]:Block[9599-9765]"
    }, {
      "left" : "if (!toExclude.contains(prop.getName()))",
      "right" : "if (!toExclude.contains(prop.getName()))",
      "info" : "IfStatement[9651-9751]:IfStatement[9651-9751]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9692-9751]:Block[9692-9751]"
    }, {
      "left" : "newProps.add(prop);",
      "right" : "newProps.add(prop);",
      "info" : "ExpressionStatement[9714-9733]:ExpressionStatement[9714-9733]"
    }, {
      "left" : "return new BeanPropertyMap(_caseInsensitive, newProps);",
      "right" : "return new BeanPropertyMap(_caseInsensitive, newProps);",
      "info" : "ReturnStatement[9841-9896]:ReturnStatement[9841-9896]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10152-10619]:Block[10152-10619]"
    }, {
      "left" : "String key = getPropertyName(newProp);",
      "right" : "String key = getPropertyName(newProp);",
      "info" : "VariableDeclarationStatement[10162-10200]:VariableDeclarationStatement[10162-10200]"
    }, {
      "left" : "int ix = _findIndexInHash(key);",
      "right" : "int ix = _findIndexInHash(key);",
      "info" : "VariableDeclarationStatement[10209-10240]:VariableDeclarationStatement[10209-10240]"
    }, {
      "left" : "if (ix >= 0)",
      "right" : "if (ix >= 0)",
      "info" : "IfStatement[10258-10519]:IfStatement[10258-10519]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10271-10519]:Block[10271-10519]"
    }, {
      "left" : "SettableBeanProperty prop = (SettableBeanProperty) _hashArea[ix];",
      "right" : "SettableBeanProperty prop = (SettableBeanProperty) _hashArea[ix];",
      "info" : "VariableDeclarationStatement[10285-10350]:VariableDeclarationStatement[10285-10350]"
    }, {
      "left" : "_hashArea[ix] = newProp;",
      "right" : "_hashArea[ix] = newProp;",
      "info" : "ExpressionStatement[10363-10387]:ExpressionStatement[10363-10387]"
    }, {
      "left" : "_propsInOrder[_findFromOrdered(prop)] = newProp;",
      "right" : "_propsInOrder[_findFromOrdered(prop)] = newProp;",
      "info" : "ExpressionStatement[10441-10489]:ExpressionStatement[10441-10489]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[10502-10509]:ReturnStatement[10502-10509]"
    }, {
      "left" : "throw new NoSuchElementException(\"No entry '\"+key+\"' found, can't replace\");",
      "right" : "throw new NoSuchElementException(\"No entry '\"+key+\"' found, can't replace\");",
      "info" : "ThrowStatement[10537-10613]:ThrowStatement[10537-10613]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10673-11015]:Block[10673-11015]"
    }, {
      "left" : "ArrayList<SettableBeanProperty> p = new ArrayList<SettableBeanProperty>(_size);",
      "right" : "ArrayList<SettableBeanProperty> p = new ArrayList<SettableBeanProperty>(_size);",
      "info" : "VariableDeclarationStatement[10683-10762]:VariableDeclarationStatement[10683-10762]"
    }, {
      "left" : "for (int i = 1, end = _hashArea.length; i < end; i += 2)",
      "right" : "for (int i = 1, end = _hashArea.length; i < end; i += 2)",
      "info" : "ForStatement[10771-10991]:ForStatement[10771-10991]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10828-10991]:Block[10828-10991]"
    }, {
      "left" : "SettableBeanProperty prop = (SettableBeanProperty) _hashArea[i];",
      "right" : "SettableBeanProperty prop = (SettableBeanProperty) _hashArea[i];",
      "info" : "VariableDeclarationStatement[10842-10906]:VariableDeclarationStatement[10842-10906]"
    }, {
      "left" : "if (prop != null)",
      "right" : "if (prop != null)",
      "info" : "IfStatement[10919-10981]:IfStatement[10919-10981]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10937-10981]:Block[10937-10981]"
    }, {
      "left" : "p.add(prop);",
      "right" : "p.add(prop);",
      "info" : "ExpressionStatement[10955-10967]:ExpressionStatement[10955-10967]"
    }, {
      "left" : "return p;",
      "right" : "return p;",
      "info" : "ReturnStatement[11000-11009]:ReturnStatement[11000-11009]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11162-11209]:Block[11162-11209]"
    }, {
      "left" : "return properties().iterator();",
      "right" : "return properties().iterator();",
      "info" : "ReturnStatement[11172-11203]:ReturnStatement[11172-11203]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11542-11579]:Block[11542-11579]"
    }, {
      "left" : "return _propsInOrder;",
      "right" : "return _propsInOrder;",
      "info" : "ReturnStatement[11552-11573]:ReturnStatement[11552-11573]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11840-11928]:Block[11840-11928]"
    }, {
      "left" : "return _caseInsensitive ? prop.getName().toLowerCase() : prop.getName();",
      "right" : "return _caseInsensitive ? prop.getName().toLowerCase() : prop.getName();",
      "info" : "ReturnStatement[11850-11922]:ReturnStatement[11850-11922]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12016-12420]:Block[12016-12420]"
    }, {
      "left" : "for (int i = 1, end = _hashArea.length; i < end; i += 2)",
      "right" : "for (int i = 1, end = _hashArea.length; i < end; i += 2)",
      "info" : "ForStatement[12133-12393]:ForStatement[12133-12393]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12190-12393]:Block[12190-12393]"
    }, {
      "left" : "SettableBeanProperty prop = (SettableBeanProperty) _hashArea[i];",
      "right" : "SettableBeanProperty prop = (SettableBeanProperty) _hashArea[i];",
      "info" : "VariableDeclarationStatement[12204-12268]:VariableDeclarationStatement[12204-12268]"
    }, {
      "left" : "if ((prop != null) && (index == prop.getPropertyIndex()))",
      "right" : "if ((prop != null) && (index == prop.getPropertyIndex()))",
      "info" : "IfStatement[12281-12383]:IfStatement[12281-12383]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12339-12383]:Block[12339-12383]"
    }, {
      "left" : "return prop;",
      "right" : "return prop;",
      "info" : "ReturnStatement[12357-12369]:ReturnStatement[12357-12369]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[12402-12414]:ReturnStatement[12402-12414]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12475-13089]:Block[12475-13089]"
    }, {
      "left" : "if (key == null)",
      "right" : "if (key == null)",
      "info" : "IfStatement[12485-12596]:IfStatement[12485-12596]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12502-12596]:Block[12502-12596]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Can not pass null property name\");",
      "right" : "throw new IllegalArgumentException(\"Can not pass null property name\");",
      "info" : "ThrowStatement[12516-12586]:ThrowStatement[12516-12586]"
    }, {
      "left" : "if (_caseInsensitive)",
      "right" : "if (_caseInsensitive)",
      "info" : "IfStatement[12605-12675]:IfStatement[12605-12675]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12627-12675]:Block[12627-12675]"
    }, {
      "left" : "key = key.toLowerCase();",
      "right" : "key = key.toLowerCase();",
      "info" : "ExpressionStatement[12641-12665]:ExpressionStatement[12641-12665]"
    }, {
      "left" : "int slot = key.hashCode() & _hashMask;",
      "right" : "int slot = key.hashCode() & _hashMask;",
      "info" : "VariableDeclarationStatement[12733-12771]:VariableDeclarationStatement[12733-12771]"
    }, {
      "left" : "int ix = (slot<<1);",
      "right" : "int ix = (slot<<1);",
      "info" : "VariableDeclarationStatement[12865-12884]:VariableDeclarationStatement[12865-12884]"
    }, {
      "left" : "Object match = _hashArea[ix];",
      "right" : "Object match = _hashArea[ix];",
      "info" : "VariableDeclarationStatement[12893-12922]:VariableDeclarationStatement[12893-12922]"
    }, {
      "left" : "if ((match == key) || key.equals(match))",
      "right" : "if ((match == key) || key.equals(match))",
      "info" : "IfStatement[12931-13042]:IfStatement[12931-13042]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12972-13042]:Block[12972-13042]"
    }, {
      "left" : "return (SettableBeanProperty) _hashArea[ix+1];",
      "right" : "return (SettableBeanProperty) _hashArea[ix+1];",
      "info" : "ReturnStatement[12986-13032]:ReturnStatement[12986-13032]"
    }, {
      "left" : "return _find2(key, slot, match);",
      "right" : "return _find2(key, slot, match);",
      "info" : "ReturnStatement[13051-13083]:ReturnStatement[13051-13083]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13177-13881]:Block[13177-13881]"
    }, {
      "left" : "if (match == null)",
      "right" : "if (match == null)",
      "info" : "IfStatement[13187-13242]:IfStatement[13187-13242]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13206-13242]:Block[13206-13242]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[13220-13232]:ReturnStatement[13220-13232]"
    }, {
      "left" : "int hashSize = _hashMask+1;",
      "right" : "int hashSize = _hashMask+1;",
      "info" : "VariableDeclarationStatement[13277-13304]:VariableDeclarationStatement[13277-13304]"
    }, {
      "left" : "int ix = hashSize + (slot>>1) << 1;",
      "right" : "int ix = hashSize + (slot>>1) << 1;",
      "info" : "VariableDeclarationStatement[13313-13348]:VariableDeclarationStatement[13313-13348]"
    }, {
      "left" : "match = _hashArea[ix];",
      "right" : "match = _hashArea[ix];",
      "info" : "ExpressionStatement[13357-13379]:ExpressionStatement[13357-13379]"
    }, {
      "left" : "if (key.equals(match))",
      "right" : "if (key.equals(match))",
      "info" : "IfStatement[13388-13481]:IfStatement[13388-13481]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13411-13481]:Block[13411-13481]"
    }, {
      "left" : "return (SettableBeanProperty) _hashArea[ix+1];",
      "right" : "return (SettableBeanProperty) _hashArea[ix+1];",
      "info" : "ReturnStatement[13425-13471]:ReturnStatement[13425-13471]"
    }, {
      "left" : "if (match != null)",
      "right" : "if (match != null)",
      "info" : "IfStatement[13490-13854]:IfStatement[13490-13854]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13509-13854]:Block[13509-13854]"
    }, {
      "left" : "int i = (hashSize + (hashSize>>1)) << 1;",
      "right" : "int i = (hashSize + (hashSize>>1)) << 1;",
      "info" : "VariableDeclarationStatement[13546-13586]:VariableDeclarationStatement[13546-13586]"
    }, {
      "left" : "for (int end = i + _spillCount; i < end; i += 2)",
      "right" : "for (int end = i + _spillCount; i < end; i += 2)",
      "info" : "ForStatement[13599-13844]:ForStatement[13599-13844]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13648-13844]:Block[13648-13844]"
    }, {
      "left" : "match = _hashArea[i];",
      "right" : "match = _hashArea[i];",
      "info" : "ExpressionStatement[13666-13687]:ExpressionStatement[13666-13687]"
    }, {
      "left" : "if ((match == key) || key.equals(match))",
      "right" : "if ((match == key) || key.equals(match))",
      "info" : "IfStatement[13704-13830]:IfStatement[13704-13830]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13745-13830]:Block[13745-13830]"
    }, {
      "left" : "return (SettableBeanProperty) _hashArea[i+1];",
      "right" : "return (SettableBeanProperty) _hashArea[i+1];",
      "info" : "ReturnStatement[13767-13812]:ReturnStatement[13767-13812]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[13863-13875]:ReturnStatement[13863-13875]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14071-14088]:Block[14071-14088]"
    }, {
      "left" : "return _size;",
      "right" : "return _size;",
      "info" : "ReturnStatement[14073-14086]:ReturnStatement[14073-14086]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15886-16184]:Block[15886-16184]"
    }, {
      "left" : "final SettableBeanProperty prop = find(key);",
      "right" : "final SettableBeanProperty prop = find(key);",
      "info" : "VariableDeclarationStatement[15896-15940]:VariableDeclarationStatement[15896-15940]"
    }, {
      "left" : "if (prop == null)",
      "right" : "if (prop == null)",
      "info" : "IfStatement[15949-16004]:IfStatement[15949-16004]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15967-16004]:Block[15967-16004]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[15981-15994]:ReturnStatement[15981-15994]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[16013-16157]:TryStatement[16013-16157]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16017-16079]:Block[16017-16079]"
    }, {
      "left" : "prop.deserializeAndSet(p, ctxt, bean);",
      "right" : "prop.deserializeAndSet(p, ctxt, bean);",
      "info" : "ExpressionStatement[16031-16069]:ExpressionStatement[16031-16069]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16100-16157]:Block[16100-16157]"
    }, {
      "left" : "wrapAndThrow(e, bean, key, ctxt);",
      "right" : "wrapAndThrow(e, bean, key, ctxt);",
      "info" : "ExpressionStatement[16114-16147]:ExpressionStatement[16114-16147]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[16166-16178]:ReturnStatement[16166-16178]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16233-16761]:Block[16233-16761]"
    }, {
      "left" : "StringBuilder sb = new StringBuilder();",
      "right" : "StringBuilder sb = new StringBuilder();",
      "info" : "VariableDeclarationStatement[16243-16282]:VariableDeclarationStatement[16243-16282]"
    }, {
      "left" : "sb.append(\"Properties=[\");",
      "right" : "sb.append(\"Properties=[\");",
      "info" : "ExpressionStatement[16291-16317]:ExpressionStatement[16291-16317]"
    }, {
      "left" : "int count = 0;",
      "right" : "int count = 0;",
      "info" : "VariableDeclarationStatement[16326-16340]:VariableDeclarationStatement[16326-16340]"
    }, {
      "left" : "Iterator<SettableBeanProperty> it = iterator();",
      "right" : "Iterator<SettableBeanProperty> it = iterator();",
      "info" : "VariableDeclarationStatement[16350-16397]:VariableDeclarationStatement[16350-16397]"
    }, {
      "left" : "while (it.hasNext())",
      "right" : "while (it.hasNext())",
      "info" : "WhileStatement[16406-16701]:WhileStatement[16406-16701]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16427-16701]:Block[16427-16701]"
    }, {
      "left" : "SettableBeanProperty prop = it.next();",
      "right" : "SettableBeanProperty prop = it.next();",
      "info" : "VariableDeclarationStatement[16441-16479]:VariableDeclarationStatement[16441-16479]"
    }, {
      "left" : "if (count++ > 0)",
      "right" : "if (count++ > 0)",
      "info" : "IfStatement[16492-16557]:IfStatement[16492-16557]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16509-16557]:Block[16509-16557]"
    }, {
      "left" : "sb.append(\", \");",
      "right" : "sb.append(\", \");",
      "info" : "ExpressionStatement[16527-16543]:ExpressionStatement[16527-16543]"
    }, {
      "left" : "sb.append(prop.getName());",
      "right" : "sb.append(prop.getName());",
      "info" : "ExpressionStatement[16570-16596]:ExpressionStatement[16570-16596]"
    }, {
      "left" : "sb.append('(');",
      "right" : "sb.append('(');",
      "info" : "ExpressionStatement[16609-16624]:ExpressionStatement[16609-16624]"
    }, {
      "left" : "sb.append(prop.getType());",
      "right" : "sb.append(prop.getType());",
      "info" : "ExpressionStatement[16637-16663]:ExpressionStatement[16637-16663]"
    }, {
      "left" : "sb.append(')');",
      "right" : "sb.append(')');",
      "info" : "ExpressionStatement[16676-16691]:ExpressionStatement[16676-16691]"
    }, {
      "left" : "sb.append(']');",
      "right" : "sb.append(']');",
      "info" : "ExpressionStatement[16710-16725]:ExpressionStatement[16710-16725]"
    }, {
      "left" : "return sb.toString();",
      "right" : "return sb.toString();",
      "info" : "ReturnStatement[16734-16755]:ReturnStatement[16734-16755]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17027-17602]:Block[17027-17602]"
    }, {
      "left" : "if (prop == null)",
      "right" : "if (prop == null)",
      "info" : "IfStatement[17037-17091]:IfStatement[17037-17091]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17055-17091]:Block[17055-17091]"
    }, {
      "left" : "return prop;",
      "right" : "return prop;",
      "info" : "ReturnStatement[17069-17081]:ReturnStatement[17069-17081]"
    }, {
      "left" : "String newName = xf.transform(prop.getName());",
      "right" : "String newName = xf.transform(prop.getName());",
      "info" : "VariableDeclarationStatement[17100-17146]:VariableDeclarationStatement[17100-17146]"
    }, {
      "left" : "prop = prop.withSimpleName(newName);",
      "right" : "prop = prop.withSimpleName(newName);",
      "info" : "ExpressionStatement[17155-17191]:ExpressionStatement[17155-17191]"
    }, {
      "left" : "JsonDeserializer<?> deser = prop.getValueDeserializer();",
      "right" : "JsonDeserializer<?> deser = prop.getValueDeserializer();",
      "info" : "VariableDeclarationStatement[17200-17256]:VariableDeclarationStatement[17200-17256]"
    }, {
      "left" : "if (deser != null)",
      "right" : "if (deser != null)",
      "info" : "IfStatement[17265-17575]:IfStatement[17265-17575]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17284-17575]:Block[17284-17575]"
    }, {
      "left" : "@SuppressWarnings(\"unchecked\")\n            JsonDeserializer<Object> newDeser = (JsonDeserializer<Object>)\n                deser.unwrappingDeserializer(xf);",
      "right" : "@SuppressWarnings(\"unchecked\")\n            JsonDeserializer<Object> newDeser = (JsonDeserializer<Object>)\n                deser.unwrappingDeserializer(xf);",
      "info" : "VariableDeclarationStatement[17298-17453]:VariableDeclarationStatement[17298-17453]"
    }, {
      "left" : "if (newDeser != deser)",
      "right" : "if (newDeser != deser)",
      "info" : "IfStatement[17466-17565]:IfStatement[17466-17565]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17489-17565]:Block[17489-17565]"
    }, {
      "left" : "prop = prop.withValueDeserializer(newDeser);",
      "right" : "prop = prop.withValueDeserializer(newDeser);",
      "info" : "ExpressionStatement[17507-17551]:ExpressionStatement[17507-17551]"
    }, {
      "left" : "return prop;",
      "right" : "return prop;",
      "info" : "ReturnStatement[17584-17596]:ReturnStatement[17584-17596]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17740-18695]:Block[17740-18695]"
    }, {
      "left" : "while (t instanceof InvocationTargetException && t.getCause() != null)",
      "right" : "while (t instanceof InvocationTargetException && t.getCause() != null)",
      "info" : "WhileStatement[17794-17906]:WhileStatement[17794-17906]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17865-17906]:Block[17865-17906]"
    }, {
      "left" : "t = t.getCause();",
      "right" : "t = t.getCause();",
      "info" : "ExpressionStatement[17879-17896]:ExpressionStatement[17879-17896]"
    }, {
      "left" : "if (t instanceof Error)",
      "right" : "if (t instanceof Error)",
      "info" : "IfStatement[17952-18016]:IfStatement[17952-18016]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17976-18016]:Block[17976-18016]"
    }, {
      "left" : "throw (Error) t;",
      "right" : "throw (Error) t;",
      "info" : "ThrowStatement[17990-18006]:ThrowStatement[17990-18006]"
    }, {
      "left" : "boolean wrap = (ctxt == null) || ctxt.isEnabled(DeserializationFeature.WRAP_EXCEPTIONS);",
      "right" : "boolean wrap = (ctxt == null) || ctxt.isEnabled(DeserializationFeature.WRAP_EXCEPTIONS);",
      "info" : "VariableDeclarationStatement[18095-18183]:VariableDeclarationStatement[18095-18183]"
    }, {
      "left" : "if (t instanceof IOException)",
      "right" : "if (t instanceof IOException)",
      "info" : "IfStatement[18270-18620]:IfStatement[18270-18620]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18300-18432]:Block[18300-18432]"
    }, {
      "left" : "if (!wrap || !(t instanceof JsonProcessingException))",
      "right" : "if (!wrap || !(t instanceof JsonProcessingException))",
      "info" : "IfStatement[18314-18422]:IfStatement[18314-18422]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18368-18422]:Block[18368-18422]"
    }, {
      "left" : "throw (IOException) t;",
      "right" : "throw (IOException) t;",
      "info" : "ThrowStatement[18386-18408]:ThrowStatement[18386-18408]"
    }, {
      "left" : "if (!wrap)",
      "right" : "if (!wrap)",
      "info" : "IfStatement[18438-18620]:IfStatement[18438-18620]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18449-18620]:Block[18449-18620]"
    }, {
      "left" : "if (t instanceof RuntimeException)",
      "right" : "if (t instanceof RuntimeException)",
      "info" : "IfStatement[18516-18610]:IfStatement[18516-18610]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18551-18610]:Block[18551-18610]"
    }, {
      "left" : "throw (RuntimeException) t;",
      "right" : "throw (RuntimeException) t;",
      "info" : "ThrowStatement[18569-18596]:ThrowStatement[18569-18596]"
    }, {
      "left" : "throw JsonMappingException.wrapWithPath(t, bean, fieldName);",
      "right" : "throw JsonMappingException.wrapWithPath(t, bean, fieldName);",
      "info" : "ThrowStatement[18629-18689]:ThrowStatement[18629-18689]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19030-19648]:Block[19030-19648]"
    }, {
      "left" : "final int slot = _hashCode(key);",
      "right" : "final int slot = _hashCode(key);",
      "info" : "VariableDeclarationStatement[19040-19072]:VariableDeclarationStatement[19040-19072]"
    }, {
      "left" : "int ix = (slot<<1);",
      "right" : "int ix = (slot<<1);",
      "info" : "VariableDeclarationStatement[19081-19100]:VariableDeclarationStatement[19081-19100]"
    }, {
      "left" : "if (key.equals(_hashArea[ix]))",
      "right" : "if (key.equals(_hashArea[ix]))",
      "info" : "IfStatement[19144-19211]:IfStatement[19144-19211]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19175-19211]:Block[19175-19211]"
    }, {
      "left" : "return ix+1;",
      "right" : "return ix+1;",
      "info" : "ReturnStatement[19189-19201]:ReturnStatement[19189-19201]"
    }, {
      "left" : "int hashSize = _hashMask+1;",
      "right" : "int hashSize = _hashMask+1;",
      "info" : "VariableDeclarationStatement[19246-19273]:VariableDeclarationStatement[19246-19273]"
    }, {
      "left" : "ix = hashSize + (slot>>1) << 1;",
      "right" : "ix = hashSize + (slot>>1) << 1;",
      "info" : "ExpressionStatement[19282-19313]:ExpressionStatement[19282-19313]"
    }, {
      "left" : "if (key.equals(_hashArea[ix]))",
      "right" : "if (key.equals(_hashArea[ix]))",
      "info" : "IfStatement[19322-19389]:IfStatement[19322-19389]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19353-19389]:Block[19353-19389]"
    }, {
      "left" : "return ix+1;",
      "right" : "return ix+1;",
      "info" : "ReturnStatement[19367-19379]:ReturnStatement[19367-19379]"
    }, {
      "left" : "int i = (hashSize + (hashSize>>1)) << 1;",
      "right" : "int i = (hashSize + (hashSize>>1)) << 1;",
      "info" : "VariableDeclarationStatement[19428-19468]:VariableDeclarationStatement[19428-19468]"
    }, {
      "left" : "for (int end = i + _spillCount; i < end; i += 2)",
      "right" : "for (int end = i + _spillCount; i < end; i += 2)",
      "info" : "ForStatement[19477-19623]:ForStatement[19477-19623]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19526-19623]:Block[19526-19623]"
    }, {
      "left" : "if (key.equals(_hashArea[i]))",
      "right" : "if (key.equals(_hashArea[i]))",
      "info" : "IfStatement[19540-19613]:IfStatement[19540-19613]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19570-19613]:Block[19570-19613]"
    }, {
      "left" : "return i+1;",
      "right" : "return i+1;",
      "info" : "ReturnStatement[19588-19599]:ReturnStatement[19588-19599]"
    }, {
      "left" : "return -1;",
      "right" : "return -1;",
      "info" : "ReturnStatement[19632-19642]:ReturnStatement[19632-19642]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19720-20005]:Block[19720-20005]"
    }, {
      "left" : "for (int i = 0, end = _propsInOrder.length; i < end; ++i)",
      "right" : "for (int i = 0, end = _propsInOrder.length; i < end; ++i)",
      "info" : "ForStatement[19730-19883]:ForStatement[19730-19883]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19788-19883]:Block[19788-19883]"
    }, {
      "left" : "if (_propsInOrder[i] == prop)",
      "right" : "if (_propsInOrder[i] == prop)",
      "info" : "IfStatement[19802-19873]:IfStatement[19802-19873]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19832-19873]:Block[19832-19873]"
    }, {
      "left" : "return i;",
      "right" : "return i;",
      "info" : "ReturnStatement[19850-19859]:ReturnStatement[19850-19859]"
    }, {
      "left" : "throw new IllegalStateException(\"Illegal state: property '\"+prop.getName()+\"' missing from _propsInOrder\");",
      "right" : "throw new IllegalStateException(\"Illegal state: property '\"+prop.getName()+\"' missing from _propsInOrder\");",
      "info" : "ThrowStatement[19892-19999]:ThrowStatement[19892-19999]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20127-20470]:Block[20127-20470]"
    }, {
      "left" : "return key.hashCode() & _hashMask;",
      "right" : "return key.hashCode() & _hashMask;",
      "info" : "ReturnStatement[20430-20464]:ReturnStatement[20430-20464]"
    } ]
  },
  "interFileMappings" : { }
}