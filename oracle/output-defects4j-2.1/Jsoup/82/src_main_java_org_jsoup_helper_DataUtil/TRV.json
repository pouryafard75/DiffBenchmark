{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "private static final Pattern charsetPattern = Pattern.compile(\"(?i)\\\\bcharset=\\\\s*(?:[\\\"'])?([^\\\\s,;\\\"']*)\");",
      "right" : "private static final Pattern charsetPattern = Pattern.compile(\"(?i)\\\\bcharset=\\\\s*(?:[\\\"'])?([^\\\\s,;\\\"']*)\");",
      "info" : "FieldDeclaration[899-1008]:FieldDeclaration[899-1008]"
    }, {
      "left" : "static final String defaultCharset = \"UTF-8\";",
      "right" : "static final String defaultCharset = \"UTF-8\";",
      "info" : "FieldDeclaration[1013-1058]:FieldDeclaration[1013-1058]"
    }, {
      "left" : "private static final int firstReadBufferSize = 1024 * 5;",
      "right" : "private static final int firstReadBufferSize = 1024 * 5;",
      "info" : "FieldDeclaration[1110-1166]:FieldDeclaration[1110-1166]"
    }, {
      "left" : "static final int bufferSize = 1024 * 32;",
      "right" : "static final int bufferSize = 1024 * 32;",
      "info" : "FieldDeclaration[1171-1211]:FieldDeclaration[1171-1211]"
    }, {
      "left" : "private static final char[] mimeBoundaryChars =\n            \"-_1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\".toCharArray();",
      "right" : "private static final char[] mimeBoundaryChars =\n            \"-_1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\".toCharArray();",
      "info" : "FieldDeclaration[1216-1357]:FieldDeclaration[1216-1357]"
    }, {
      "left" : "static final int boundaryLength = 32;",
      "right" : "static final int boundaryLength = 32;",
      "info" : "FieldDeclaration[1362-1399]:FieldDeclaration[1362-1399]"
    }, {
      "left" : "private DataUtil()",
      "right" : "private DataUtil()",
      "info" : "MethodDeclaration[1405-1426]:MethodDeclaration[1405-1426]"
    }, {
      "left" : "public static Document load(File in, String charsetName, String baseUri) throws IOException",
      "right" : "public static Document load(File in, String charsetName, String baseUri) throws IOException",
      "info" : "MethodDeclaration[1432-1903]:MethodDeclaration[1432-1903]"
    }, {
      "left" : "public static Document load(InputStream in, String charsetName, String baseUri) throws IOException",
      "right" : "public static Document load(InputStream in, String charsetName, String baseUri) throws IOException",
      "info" : "MethodDeclaration[1909-2414]:MethodDeclaration[1909-2414]"
    }, {
      "left" : "public static Document load(InputStream in, String charsetName, String baseUri, Parser parser) throws IOException",
      "right" : "public static Document load(InputStream in, String charsetName, String baseUri, Parser parser) throws IOException",
      "info" : "MethodDeclaration[2420-3027]:MethodDeclaration[2420-3027]"
    }, {
      "left" : "static void crossStreams(final InputStream in, final OutputStream out) throws IOException",
      "right" : "static void crossStreams(final InputStream in, final OutputStream out) throws IOException",
      "info" : "MethodDeclaration[3033-3511]:MethodDeclaration[3033-3511]"
    }, {
      "left" : "public static ByteBuffer readToByteBuffer(InputStream inStream, int maxSize) throws IOException",
      "right" : "public static ByteBuffer readToByteBuffer(InputStream inStream, int maxSize) throws IOException",
      "info" : "MethodDeclaration[7734-8574]:MethodDeclaration[7850-8690]"
    }, {
      "left" : "static ByteBuffer emptyByteBuffer()",
      "right" : "static ByteBuffer emptyByteBuffer()",
      "info" : "MethodDeclaration[8580-8662]:MethodDeclaration[8696-8778]"
    }, {
      "left" : "static String getCharsetFromContentType(String contentType)",
      "right" : "static String getCharsetFromContentType(String contentType)",
      "info" : "MethodDeclaration[8668-9337]:MethodDeclaration[8784-9453]"
    }, {
      "left" : "private static String validateCharset(String cs)",
      "right" : "private static String validateCharset(String cs)",
      "info" : "MethodDeclaration[9343-9831]:MethodDeclaration[9459-9947]"
    }, {
      "left" : "static String mimeBoundary()",
      "right" : "static String mimeBoundary()",
      "info" : "MethodDeclaration[9837-10246]:MethodDeclaration[9953-10362]"
    }, {
      "left" : "private static BomCharset detectCharsetFromBom(final ByteBuffer byteData)",
      "right" : "private static BomCharset detectCharsetFromBom(final ByteBuffer byteData)",
      "info" : "MethodDeclaration[10252-11427]:MethodDeclaration[10368-11543]"
    }, {
      "left" : "BomCharset",
      "right" : "BomCharset",
      "info" : "TypeDeclaration[11433-11689]:TypeDeclaration[11549-11805]"
    }, {
      "left" : "private final String charset;",
      "right" : "private final String charset;",
      "info" : "FieldDeclaration[11475-11504]:FieldDeclaration[11591-11620]"
    }, {
      "left" : "private final boolean offset;",
      "right" : "private final boolean offset;",
      "info" : "FieldDeclaration[11513-11542]:FieldDeclaration[11629-11658]"
    }, {
      "left" : "public BomCharset(String charset, boolean offset)",
      "right" : "public BomCharset(String charset, boolean offset)",
      "info" : "MethodDeclaration[11552-11683]:MethodDeclaration[11668-11799]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1424-1426]:Block[1424-1426]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1795-1903]:Block[1795-1903]"
    }, {
      "left" : "return parseInputStream(new FileInputStream(in), charsetName, baseUri, Parser.htmlParser());",
      "right" : "return parseInputStream(new FileInputStream(in), charsetName, baseUri, Parser.htmlParser());",
      "info" : "ReturnStatement[1805-1897]:ReturnStatement[1805-1897]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2327-2414]:Block[2327-2414]"
    }, {
      "left" : "return parseInputStream(in, charsetName, baseUri, Parser.htmlParser());",
      "right" : "return parseInputStream(in, charsetName, baseUri, Parser.htmlParser());",
      "info" : "ReturnStatement[2337-2408]:ReturnStatement[2337-2408]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2953-3027]:Block[2953-3027]"
    }, {
      "left" : "return parseInputStream(in, charsetName, baseUri, parser);",
      "right" : "return parseInputStream(in, charsetName, baseUri, parser);",
      "info" : "ReturnStatement[2963-3021]:ReturnStatement[2963-3021]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3338-3511]:Block[3338-3511]"
    }, {
      "left" : "final byte[] buffer = new byte[bufferSize];",
      "right" : "final byte[] buffer = new byte[bufferSize];",
      "info" : "VariableDeclarationStatement[3348-3391]:VariableDeclarationStatement[3348-3391]"
    }, {
      "left" : "int len;",
      "right" : "int len;",
      "info" : "VariableDeclarationStatement[3400-3408]:VariableDeclarationStatement[3400-3408]"
    }, {
      "left" : "while ((len = in.read(buffer)) != -1)",
      "right" : "while ((len = in.read(buffer)) != -1)",
      "info" : "WhileStatement[3417-3505]:WhileStatement[3417-3505]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3455-3505]:Block[3455-3505]"
    }, {
      "left" : "out.write(buffer, 0, len);",
      "right" : "out.write(buffer, 0, len);",
      "info" : "ExpressionStatement[3469-3495]:ExpressionStatement[3469-3495]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8328-8574]:Block[8444-8690]"
    }, {
      "left" : "Validate.isTrue(maxSize >= 0, \"maxSize must be 0 (unlimited) or larger\");",
      "right" : "Validate.isTrue(maxSize >= 0, \"maxSize must be 0 (unlimited) or larger\");",
      "info" : "ExpressionStatement[8338-8411]:ExpressionStatement[8454-8527]"
    }, {
      "left" : "final ConstrainableInputStream input = ConstrainableInputStream.wrap(inStream, bufferSize, maxSize);",
      "right" : "final ConstrainableInputStream input = ConstrainableInputStream.wrap(inStream, bufferSize, maxSize);",
      "info" : "VariableDeclarationStatement[8420-8520]:VariableDeclarationStatement[8536-8636]"
    }, {
      "left" : "return input.readToByteBuffer(maxSize);",
      "right" : "return input.readToByteBuffer(maxSize);",
      "info" : "ReturnStatement[8529-8568]:ReturnStatement[8645-8684]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8616-8662]:Block[8732-8778]"
    }, {
      "left" : "return ByteBuffer.allocate(0);",
      "right" : "return ByteBuffer.allocate(0);",
      "info" : "ReturnStatement[8626-8656]:ReturnStatement[8742-8772]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9024-9337]:Block[9140-9453]"
    }, {
      "left" : "if (contentType == null)",
      "right" : "if (contentType == null)",
      "info" : "IfStatement[9034-9071]:IfStatement[9150-9187]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[9059-9071]:ReturnStatement[9175-9187]"
    }, {
      "left" : "Matcher m = charsetPattern.matcher(contentType);",
      "right" : "Matcher m = charsetPattern.matcher(contentType);",
      "info" : "VariableDeclarationStatement[9080-9128]:VariableDeclarationStatement[9196-9244]"
    }, {
      "left" : "if (m.find())",
      "right" : "if (m.find())",
      "info" : "IfStatement[9137-9310]:IfStatement[9253-9426]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9151-9310]:Block[9267-9426]"
    }, {
      "left" : "String charset = m.group(1).trim();",
      "right" : "String charset = m.group(1).trim();",
      "info" : "VariableDeclarationStatement[9165-9200]:VariableDeclarationStatement[9281-9316]"
    }, {
      "left" : "charset = charset.replace(\"charset=\", \"\");",
      "right" : "charset = charset.replace(\"charset=\", \"\");",
      "info" : "ExpressionStatement[9213-9255]:ExpressionStatement[9329-9371]"
    }, {
      "left" : "return validateCharset(charset);",
      "right" : "return validateCharset(charset);",
      "info" : "ReturnStatement[9268-9300]:ReturnStatement[9384-9416]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[9319-9331]:ReturnStatement[9435-9447]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9392-9831]:Block[9508-9947]"
    }, {
      "left" : "if (cs == null || cs.length() == 0)",
      "right" : "if (cs == null || cs.length() == 0)",
      "info" : "IfStatement[9402-9450]:IfStatement[9518-9566]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[9438-9450]:ReturnStatement[9554-9566]"
    }, {
      "left" : "cs = cs.trim().replaceAll(\"[\\\"']\", \"\");",
      "right" : "cs = cs.trim().replaceAll(\"[\\\"']\", \"\");",
      "info" : "ExpressionStatement[9459-9498]:ExpressionStatement[9575-9614]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[9507-9804]:TryStatement[9623-9920]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9511-9675]:Block[9627-9791]"
    }, {
      "left" : "if (Charset.isSupported(cs))",
      "right" : "if (Charset.isSupported(cs))",
      "info" : "IfStatement[9525-9564]:IfStatement[9641-9680]"
    }, {
      "left" : "return cs;",
      "right" : "return cs;",
      "info" : "ReturnStatement[9554-9564]:ReturnStatement[9670-9680]"
    }, {
      "left" : "cs = cs.toUpperCase(Locale.ENGLISH);",
      "right" : "cs = cs.toUpperCase(Locale.ENGLISH);",
      "info" : "ExpressionStatement[9577-9613]:ExpressionStatement[9693-9729]"
    }, {
      "left" : "if (Charset.isSupported(cs))",
      "right" : "if (Charset.isSupported(cs))",
      "info" : "IfStatement[9626-9665]:IfStatement[9742-9781]"
    }, {
      "left" : "return cs;",
      "right" : "return cs;",
      "info" : "ReturnStatement[9655-9665]:ReturnStatement[9771-9781]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9714-9804]:Block[9830-9920]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[9813-9825]:ReturnStatement[9929-9941]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9950-10246]:Block[10066-10362]"
    }, {
      "left" : "final StringBuilder mime = new StringBuilder(boundaryLength);",
      "right" : "final StringBuilder mime = new StringBuilder(boundaryLength);",
      "info" : "VariableDeclarationStatement[9960-10021]:VariableDeclarationStatement[10076-10137]"
    }, {
      "left" : "final Random rand = new Random();",
      "right" : "final Random rand = new Random();",
      "info" : "VariableDeclarationStatement[10030-10063]:VariableDeclarationStatement[10146-10179]"
    }, {
      "left" : "for (int i = 0; i < boundaryLength; i++)",
      "right" : "for (int i = 0; i < boundaryLength; i++)",
      "info" : "ForStatement[10072-10208]:ForStatement[10188-10324]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10113-10208]:Block[10229-10324]"
    }, {
      "left" : "mime.append(mimeBoundaryChars[rand.nextInt(mimeBoundaryChars.length)]);",
      "right" : "mime.append(mimeBoundaryChars[rand.nextInt(mimeBoundaryChars.length)]);",
      "info" : "ExpressionStatement[10127-10198]:ExpressionStatement[10243-10314]"
    }, {
      "left" : "return mime.toString();",
      "right" : "return mime.toString();",
      "info" : "ReturnStatement[10217-10240]:ReturnStatement[10333-10356]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10326-11427]:Block[10442-11543]"
    }, {
      "left" : "final Buffer buffer = byteData;",
      "right" : "final Buffer buffer = byteData;",
      "info" : "VariableDeclarationStatement[10336-10367]:VariableDeclarationStatement[10452-10483]"
    }, {
      "left" : "buffer.mark();",
      "right" : "buffer.mark();",
      "info" : "ExpressionStatement[10463-10477]:ExpressionStatement[10579-10593]"
    }, {
      "left" : "byte[] bom = new byte[4];",
      "right" : "byte[] bom = new byte[4];",
      "info" : "VariableDeclarationStatement[10486-10511]:VariableDeclarationStatement[10602-10627]"
    }, {
      "left" : "if (byteData.remaining() >= bom.length)",
      "right" : "if (byteData.remaining() >= bom.length)",
      "info" : "IfStatement[10520-10631]:IfStatement[10636-10747]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10560-10631]:Block[10676-10747]"
    }, {
      "left" : "byteData.get(bom);",
      "right" : "byteData.get(bom);",
      "info" : "ExpressionStatement[10574-10592]:ExpressionStatement[10690-10708]"
    }, {
      "left" : "buffer.rewind();",
      "right" : "buffer.rewind();",
      "info" : "ExpressionStatement[10605-10621]:ExpressionStatement[10721-10737]"
    }, {
      "left" : "if (bom[0] == 0x00 && bom[1] == 0x00 && bom[2] == (byte) 0xFE && bom[3] == (byte) 0xFF || // BE\n            bom[0] == (byte) 0xFF && bom[1] == (byte) 0xFE && bom[2] == 0x00 && bom[3] == 0x00)",
      "right" : "if (bom[0] == 0x00 && bom[1] == 0x00 && bom[2] == (byte) 0xFE && bom[3] == (byte) 0xFF || // BE\n            bom[0] == (byte) 0xFF && bom[1] == (byte) 0xFE && bom[2] == 0x00 && bom[3] == 0x00)",
      "info" : "IfStatement[10640-11400]:IfStatement[10756-11516]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10832-10935]:Block[10948-11051]"
    }, {
      "left" : "return new BomCharset(\"UTF-32\", false);",
      "right" : "return new BomCharset(\"UTF-32\", false);",
      "info" : "ReturnStatement[10852-10891]:ReturnStatement[10968-11007]"
    }, {
      "left" : "if (bom[0] == (byte) 0xFE && bom[1] == (byte) 0xFF || // BE\n            bom[0] == (byte) 0xFF && bom[1] == (byte) 0xFE)",
      "right" : "if (bom[0] == (byte) 0xFE && bom[1] == (byte) 0xFF || // BE\n            bom[0] == (byte) 0xFF && bom[1] == (byte) 0xFE)",
      "info" : "IfStatement[10941-11400]:IfStatement[11057-11516]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11061-11140]:Block[11177-11256]"
    }, {
      "left" : "return new BomCharset(\"UTF-16\", false);",
      "right" : "return new BomCharset(\"UTF-16\", false);",
      "info" : "ReturnStatement[11075-11114]:ReturnStatement[11191-11230]"
    }, {
      "left" : "if (bom[0] == (byte) 0xEF && bom[1] == (byte) 0xBB && bom[2] == (byte) 0xBF)",
      "right" : "if (bom[0] == (byte) 0xEF && bom[1] == (byte) 0xBB && bom[2] == (byte) 0xBF)",
      "info" : "IfStatement[11146-11400]:IfStatement[11262-11516]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11223-11400]:Block[11339-11516]"
    }, {
      "left" : "return new BomCharset(\"UTF-8\", true);",
      "right" : "return new BomCharset(\"UTF-8\", true);",
      "info" : "ReturnStatement[11237-11274]:ReturnStatement[11353-11390]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[11409-11421]:ReturnStatement[11525-11537]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11602-11683]:Block[11718-11799]"
    }, {
      "left" : "this.charset = charset;",
      "right" : "this.charset = charset;",
      "info" : "ExpressionStatement[11616-11639]:ExpressionStatement[11732-11755]"
    }, {
      "left" : "this.offset = offset;",
      "right" : "this.offset = offset;",
      "info" : "ExpressionStatement[11652-11673]:ExpressionStatement[11768-11789]"
    } ]
  },
  "interFileMappings" : { }
}