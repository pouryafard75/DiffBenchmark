{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "NodeUtil",
      "right" : "NodeUtil",
      "info" : "TypeDeclaration[1296-69798]:TypeDeclaration[1296-70297]"
    }, {
      "left" : "private static final Set<String> CONSTRUCTORS_WITHOUT_SIDE_EFFECTS =\n      new HashSet<String>(Arrays.asList(\n        \"Array\",\n        \"Date\",\n        \"Error\",\n        \"Object\",\n        \"RegExp\",\n        \"XMLHttpRequest\"));",
      "right" : "private static final Set<String> CONSTRUCTORS_WITHOUT_SIDE_EFFECTS =\n      new HashSet<String>(Arrays.asList(\n        \"Array\",\n        \"Date\",\n        \"Error\",\n        \"Object\",\n        \"RegExp\",\n        \"XMLHttpRequest\"));",
      "info" : "FieldDeclaration[1546-1840]:FieldDeclaration[1546-1840]"
    }, {
      "left" : "private NodeUtil()",
      "right" : "private NodeUtil()",
      "info" : "MethodDeclaration[1884-1905]:MethodDeclaration[1884-1905]"
    }, {
      "left" : "static TernaryValue getExpressionBooleanValue(Node n)",
      "right" : "static TernaryValue getExpressionBooleanValue(Node n)",
      "info" : "MethodDeclaration[1909-3398]:MethodDeclaration[1909-3398]"
    }, {
      "left" : "static TernaryValue getBooleanValue(Node n)",
      "right" : "static TernaryValue getBooleanValue(Node n)",
      "info" : "MethodDeclaration[3402-4536]:MethodDeclaration[3402-4536]"
    }, {
      "left" : "static String getStringValue(Node n)",
      "right" : "static String getStringValue(Node n)",
      "info" : "MethodDeclaration[4541-5475]:MethodDeclaration[4541-5475]"
    }, {
      "left" : "static String getFunctionName(Node n)",
      "right" : "static String getFunctionName(Node n)",
      "info" : "MethodDeclaration[5479-6683]:MethodDeclaration[5479-6683]"
    }, {
      "left" : "static String getNearestFunctionName(Node n)",
      "right" : "static String getNearestFunctionName(Node n)",
      "info" : "MethodDeclaration[6687-7678]:MethodDeclaration[6687-7678]"
    }, {
      "left" : "static boolean isImmutableValue(Node n)",
      "right" : "static boolean isImmutableValue(Node n)",
      "info" : "MethodDeclaration[7683-8397]:MethodDeclaration[7683-8397]"
    }, {
      "left" : "static boolean isLiteralValue(Node n, boolean includeFunctions)",
      "right" : "static boolean isLiteralValue(Node n, boolean includeFunctions)",
      "info" : "MethodDeclaration[8401-9918]:MethodDeclaration[8401-9918]"
    }, {
      "left" : "static boolean isValidDefineValue(Node val, Set<String> defines)",
      "right" : "static boolean isValidDefineValue(Node val, Set<String> defines)",
      "info" : "MethodDeclaration[9922-10913]:MethodDeclaration[9922-11412]"
    }, {
      "left" : "static boolean isEmptyBlock(Node block)",
      "right" : "static boolean isEmptyBlock(Node block)",
      "info" : "MethodDeclaration[10917-11297]:MethodDeclaration[11416-11796]"
    }, {
      "left" : "static boolean isSimpleOperator(Node n)",
      "right" : "static boolean isSimpleOperator(Node n)",
      "info" : "MethodDeclaration[11301-11392]:MethodDeclaration[11800-11891]"
    }, {
      "left" : "static boolean isSimpleOperatorType(int type)",
      "right" : "static boolean isSimpleOperatorType(int type)",
      "info" : "MethodDeclaration[11396-12373]:MethodDeclaration[11895-12872]"
    }, {
      "left" : "public static Node newExpr(Node child)",
      "right" : "public static Node newExpr(Node child)",
      "info" : "MethodDeclaration[12377-12683]:MethodDeclaration[12876-13182]"
    }, {
      "left" : "static boolean mayEffectMutableState(Node n)",
      "right" : "static boolean mayEffectMutableState(Node n)",
      "info" : "MethodDeclaration[12687-12950]:MethodDeclaration[13186-13449]"
    }, {
      "left" : "static boolean mayEffectMutableState(Node n, AbstractCompiler compiler)",
      "right" : "static boolean mayEffectMutableState(Node n, AbstractCompiler compiler)",
      "info" : "MethodDeclaration[12954-13088]:MethodDeclaration[13453-13587]"
    }, {
      "left" : "static boolean mayHaveSideEffects(Node n)",
      "right" : "static boolean mayHaveSideEffects(Node n)",
      "info" : "MethodDeclaration[13092-13264]:MethodDeclaration[13591-13763]"
    }, {
      "left" : "static boolean mayHaveSideEffects(Node n, AbstractCompiler compiler)",
      "right" : "static boolean mayHaveSideEffects(Node n, AbstractCompiler compiler)",
      "info" : "MethodDeclaration[13268-13400]:MethodDeclaration[13767-13899]"
    }, {
      "left" : "private static boolean checkForStateChangeHelper(\n      Node n, boolean checkForNewObjects, AbstractCompiler compiler)",
      "right" : "private static boolean checkForStateChangeHelper(\n      Node n, boolean checkForNewObjects, AbstractCompiler compiler)",
      "info" : "MethodDeclaration[13404-17926]:MethodDeclaration[13903-18425]"
    }, {
      "left" : "static boolean constructorCallHasSideEffects(Node callNode)",
      "right" : "static boolean constructorCallHasSideEffects(Node callNode)",
      "info" : "MethodDeclaration[17930-18167]:MethodDeclaration[18429-18666]"
    }, {
      "left" : "static boolean constructorCallHasSideEffects(\n      Node callNode, AbstractCompiler compiler)",
      "right" : "static boolean constructorCallHasSideEffects(\n      Node callNode, AbstractCompiler compiler)",
      "info" : "MethodDeclaration[18171-18693]:MethodDeclaration[18670-19192]"
    }, {
      "left" : "private static final Set<String> BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS =\n      ImmutableSet.of(\n          \"Object\", \"Array\", \"String\", \"Number\", \"Boolean\", \"RegExp\", \"Error\");",
      "right" : "private static final Set<String> BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS =\n      ImmutableSet.of(\n          \"Object\", \"Array\", \"String\", \"Number\", \"Boolean\", \"RegExp\", \"Error\");",
      "info" : "FieldDeclaration[18906-19081]:FieldDeclaration[19405-19580]"
    }, {
      "left" : "private static final Set<String> REGEXP_METHODS =\n      ImmutableSet.of(\"test\", \"exec\");",
      "right" : "private static final Set<String> REGEXP_METHODS =\n      ImmutableSet.of(\"test\", \"exec\");",
      "info" : "FieldDeclaration[19084-19172]:FieldDeclaration[19583-19671]"
    }, {
      "left" : "private static final Set<String> STRING_REGEXP_METHODS =\n      ImmutableSet.of(\"match\", \"replace\", \"search\", \"split\");",
      "right" : "private static final Set<String> STRING_REGEXP_METHODS =\n      ImmutableSet.of(\"match\", \"replace\", \"search\", \"split\");",
      "info" : "FieldDeclaration[19175-19293]:FieldDeclaration[19674-19792]"
    }, {
      "left" : "static boolean functionCallHasSideEffects(\n      Node callNode)",
      "right" : "static boolean functionCallHasSideEffects(\n      Node callNode)",
      "info" : "MethodDeclaration[19297-19543]:MethodDeclaration[19796-20042]"
    }, {
      "left" : "static boolean functionCallHasSideEffects(\n      Node callNode, @Nullable AbstractCompiler compiler)",
      "right" : "static boolean functionCallHasSideEffects(\n      Node callNode, @Nullable AbstractCompiler compiler)",
      "info" : "MethodDeclaration[19547-21518]:MethodDeclaration[20046-22017]"
    }, {
      "left" : "static boolean callHasLocalResult(Node n)",
      "right" : "static boolean callHasLocalResult(Node n)",
      "info" : "MethodDeclaration[21522-21755]:MethodDeclaration[22021-22254]"
    }, {
      "left" : "static boolean nodeTypeMayHaveSideEffects(Node n)",
      "right" : "static boolean nodeTypeMayHaveSideEffects(Node n)",
      "info" : "MethodDeclaration[21759-22131]:MethodDeclaration[22258-22630]"
    }, {
      "left" : "static boolean nodeTypeMayHaveSideEffects(Node n, AbstractCompiler compiler)",
      "right" : "static boolean nodeTypeMayHaveSideEffects(Node n, AbstractCompiler compiler)",
      "info" : "MethodDeclaration[22135-22723]:MethodDeclaration[22634-23222]"
    }, {
      "left" : "static boolean canBeSideEffected(Node n)",
      "right" : "static boolean canBeSideEffected(Node n)",
      "info" : "MethodDeclaration[22727-22967]:MethodDeclaration[23226-23466]"
    }, {
      "left" : "static boolean canBeSideEffected(Node n, Set<String> knownConstants)",
      "right" : "static boolean canBeSideEffected(Node n, Set<String> knownConstants)",
      "info" : "MethodDeclaration[22971-24306]:MethodDeclaration[23470-24805]"
    }, {
      "left" : "static int precedence(int type)",
      "right" : "static int precedence(int type)",
      "info" : "MethodDeclaration[24743-26798]:MethodDeclaration[25242-27297]"
    }, {
      "left" : "static boolean isAssociative(int type)",
      "right" : "static boolean isAssociative(int type)",
      "info" : "MethodDeclaration[26802-27270]:MethodDeclaration[27301-27769]"
    }, {
      "left" : "static boolean isAssignmentOp(Node n)",
      "right" : "static boolean isAssignmentOp(Node n)",
      "info" : "MethodDeclaration[27274-27741]:MethodDeclaration[27773-28240]"
    }, {
      "left" : "static int getOpFromAssignmentOp(Node n)",
      "right" : "static int getOpFromAssignmentOp(Node n)",
      "info" : "MethodDeclaration[27745-28508]:MethodDeclaration[28244-29007]"
    }, {
      "left" : "static boolean isExpressionNode(Node n)",
      "right" : "static boolean isExpressionNode(Node n)",
      "info" : "MethodDeclaration[28512-28602]:MethodDeclaration[29011-29101]"
    }, {
      "left" : "static boolean containsFunction(Node n)",
      "right" : "static boolean containsFunction(Node n)",
      "info" : "MethodDeclaration[28606-28800]:MethodDeclaration[29105-29299]"
    }, {
      "left" : "static boolean referencesThis(Node n)",
      "right" : "static boolean referencesThis(Node n)",
      "info" : "MethodDeclaration[28804-29000]:MethodDeclaration[29303-29499]"
    }, {
      "left" : "static boolean isGet(Node n)",
      "right" : "static boolean isGet(Node n)",
      "info" : "MethodDeclaration[29004-29171]:MethodDeclaration[29503-29670]"
    }, {
      "left" : "static boolean isGetProp(Node n)",
      "right" : "static boolean isGetProp(Node n)",
      "info" : "MethodDeclaration[29175-29295]:MethodDeclaration[29674-29794]"
    }, {
      "left" : "static boolean isName(Node n)",
      "right" : "static boolean isName(Node n)",
      "info" : "MethodDeclaration[29299-29410]:MethodDeclaration[29798-29909]"
    }, {
      "left" : "static boolean isNew(Node n)",
      "right" : "static boolean isNew(Node n)",
      "info" : "MethodDeclaration[29414-29522]:MethodDeclaration[29913-30021]"
    }, {
      "left" : "static boolean isVar(Node n)",
      "right" : "static boolean isVar(Node n)",
      "info" : "MethodDeclaration[29526-29634]:MethodDeclaration[30025-30133]"
    }, {
      "left" : "static boolean isVarDeclaration(Node n)",
      "right" : "static boolean isVarDeclaration(Node n)",
      "info" : "MethodDeclaration[29638-30047]:MethodDeclaration[30137-30546]"
    }, {
      "left" : "static Node getAssignedValue(Node n)",
      "right" : "static Node getAssignedValue(Node n)",
      "info" : "MethodDeclaration[30051-30493]:MethodDeclaration[30550-30992]"
    }, {
      "left" : "static boolean isString(Node n)",
      "right" : "static boolean isString(Node n)",
      "info" : "MethodDeclaration[30497-30614]:MethodDeclaration[30996-31113]"
    }, {
      "left" : "static boolean isExprAssign(Node n)",
      "right" : "static boolean isExprAssign(Node n)",
      "info" : "MethodDeclaration[30618-30946]:MethodDeclaration[31117-31445]"
    }, {
      "left" : "static boolean isAssign(Node n)",
      "right" : "static boolean isAssign(Node n)",
      "info" : "MethodDeclaration[30950-31068]:MethodDeclaration[31449-31567]"
    }, {
      "left" : "static boolean isExprCall(Node n)",
      "right" : "static boolean isExprCall(Node n)",
      "info" : "MethodDeclaration[31072-31387]:MethodDeclaration[31571-31886]"
    }, {
      "left" : "static boolean isForIn(Node n)",
      "right" : "static boolean isForIn(Node n)",
      "info" : "MethodDeclaration[31391-31566]:MethodDeclaration[31890-32065]"
    }, {
      "left" : "static boolean isLoopStructure(Node n)",
      "right" : "static boolean isLoopStructure(Node n)",
      "info" : "MethodDeclaration[31570-31852]:MethodDeclaration[32069-32351]"
    }, {
      "left" : "static Node getLoopCodeBlock(Node n)",
      "right" : "static Node getLoopCodeBlock(Node n)",
      "info" : "MethodDeclaration[31856-32259]:MethodDeclaration[32355-32758]"
    }, {
      "left" : "static boolean isWithinLoop(Node n)",
      "right" : "static boolean isWithinLoop(Node n)",
      "info" : "MethodDeclaration[32263-32620]:MethodDeclaration[32762-33119]"
    }, {
      "left" : "static boolean isControlStructure(Node n)",
      "right" : "static boolean isControlStructure(Node n)",
      "info" : "MethodDeclaration[32624-33107]:MethodDeclaration[33123-33606]"
    }, {
      "left" : "static boolean isControlStructureCodeBlock(Node parent, Node n)",
      "right" : "static boolean isControlStructureCodeBlock(Node parent, Node n)",
      "info" : "MethodDeclaration[33111-33992]:MethodDeclaration[33610-34491]"
    }, {
      "left" : "static Node getConditionExpression(Node n)",
      "right" : "static Node getConditionExpression(Node n)",
      "info" : "MethodDeclaration[33996-34796]:MethodDeclaration[34495-35295]"
    }, {
      "left" : "static boolean isStatementBlock(Node n)",
      "right" : "static boolean isStatementBlock(Node n)",
      "info" : "MethodDeclaration[34800-35001]:MethodDeclaration[35299-35500]"
    }, {
      "left" : "static boolean isStatement(Node n)",
      "right" : "static boolean isStatement(Node n)",
      "info" : "MethodDeclaration[35005-35554]:MethodDeclaration[35504-36053]"
    }, {
      "left" : "static boolean isSwitchCase(Node n)",
      "right" : "static boolean isSwitchCase(Node n)",
      "info" : "MethodDeclaration[35558-35726]:MethodDeclaration[36057-36225]"
    }, {
      "left" : "static boolean isReferenceName(Node n)",
      "right" : "static boolean isReferenceName(Node n)",
      "info" : "MethodDeclaration[35730-35989]:MethodDeclaration[36229-36488]"
    }, {
      "left" : "static boolean isLabelName(Node n)",
      "right" : "static boolean isLabelName(Node n)",
      "info" : "MethodDeclaration[35993-36143]:MethodDeclaration[36492-36642]"
    }, {
      "left" : "static boolean isTryFinallyNode(Node parent, Node child)",
      "right" : "static boolean isTryFinallyNode(Node parent, Node child)",
      "info" : "MethodDeclaration[36147-36387]:MethodDeclaration[36646-36886]"
    }, {
      "left" : "static void removeChild(Node parent, Node node)",
      "right" : "static void removeChild(Node parent, Node node)",
      "info" : "MethodDeclaration[36391-38057]:MethodDeclaration[36890-38556]"
    }, {
      "left" : "static boolean tryMergeBlock(Node block)",
      "right" : "static boolean tryMergeBlock(Node block)",
      "info" : "MethodDeclaration[38061-38750]:MethodDeclaration[38560-39249]"
    }, {
      "left" : "static boolean isCall(Node n)",
      "right" : "static boolean isCall(Node n)",
      "info" : "MethodDeclaration[38754-38865]:MethodDeclaration[39253-39364]"
    }, {
      "left" : "static boolean isFunction(Node n)",
      "right" : "static boolean isFunction(Node n)",
      "info" : "MethodDeclaration[38869-38992]:MethodDeclaration[39368-39491]"
    }, {
      "left" : "static Node getFunctionBody(Node fn)",
      "right" : "static Node getFunctionBody(Node fn)",
      "info" : "MethodDeclaration[38996-39183]:MethodDeclaration[39495-39682]"
    }, {
      "left" : "static boolean isThis(Node node)",
      "right" : "static boolean isThis(Node node)",
      "info" : "MethodDeclaration[39187-39304]:MethodDeclaration[39686-39803]"
    }, {
      "left" : "static boolean containsCall(Node n)",
      "right" : "static boolean containsCall(Node n)",
      "info" : "MethodDeclaration[39308-39450]:MethodDeclaration[39807-39949]"
    }, {
      "left" : "static boolean isFunctionDeclaration(Node n)",
      "right" : "static boolean isFunctionDeclaration(Node n)",
      "info" : "MethodDeclaration[39454-39803]:MethodDeclaration[39953-40302]"
    }, {
      "left" : "static boolean isHoistedFunctionDeclaration(Node n)",
      "right" : "static boolean isHoistedFunctionDeclaration(Node n)",
      "info" : "MethodDeclaration[39807-40209]:MethodDeclaration[40306-40708]"
    }, {
      "left" : "static boolean isFunctionExpression(Node n)",
      "right" : "static boolean isFunctionExpression(Node n)",
      "info" : "MethodDeclaration[40213-40979]:MethodDeclaration[40712-41478]"
    }, {
      "left" : "static boolean isEmptyFunctionExpression(Node node)",
      "right" : "static boolean isEmptyFunctionExpression(Node node)",
      "info" : "MethodDeclaration[40983-41307]:MethodDeclaration[41482-41806]"
    }, {
      "left" : "static boolean isVarArgsFunction(Node function)",
      "right" : "static boolean isVarArgsFunction(Node function)",
      "info" : "MethodDeclaration[41311-41681]:MethodDeclaration[41810-42180]"
    }, {
      "left" : "static boolean isObjectCallMethod(Node callNode, String methodName)",
      "right" : "static boolean isObjectCallMethod(Node callNode, String methodName)",
      "info" : "MethodDeclaration[41685-42288]:MethodDeclaration[42184-42787]"
    }, {
      "left" : "static boolean isFunctionObjectCall(Node callNode)",
      "right" : "static boolean isFunctionObjectCall(Node callNode)",
      "info" : "MethodDeclaration[42293-42528]:MethodDeclaration[42792-43027]"
    }, {
      "left" : "static boolean isFunctionObjectApply(Node callNode)",
      "right" : "static boolean isFunctionObjectApply(Node callNode)",
      "info" : "MethodDeclaration[42532-42771]:MethodDeclaration[43031-43270]"
    }, {
      "left" : "static boolean isSimpleFunctionObjectCall(Node callNode)",
      "right" : "static boolean isSimpleFunctionObjectCall(Node callNode)",
      "info" : "MethodDeclaration[42775-43170]:MethodDeclaration[43274-43669]"
    }, {
      "left" : "static boolean isLhs(Node n, Node parent)",
      "right" : "static boolean isLhs(Node n, Node parent)",
      "info" : "MethodDeclaration[43174-43692]:MethodDeclaration[43673-44191]"
    }, {
      "left" : "static boolean isObjectLitKey(Node node, Node parent)",
      "right" : "static boolean isObjectLitKey(Node node, Node parent)",
      "info" : "MethodDeclaration[43696-44292]:MethodDeclaration[44195-44791]"
    }, {
      "left" : "static String opToStr(int operator)",
      "right" : "static String opToStr(int operator)",
      "info" : "MethodDeclaration[44296-46209]:MethodDeclaration[44795-46708]"
    }, {
      "left" : "static String opToStrNoFail(int operator)",
      "right" : "static String opToStrNoFail(int operator)",
      "info" : "MethodDeclaration[46213-46716]:MethodDeclaration[46712-47215]"
    }, {
      "left" : "static boolean containsType(Node node,\n                              int type,\n                              Predicate<Node> traverseChildrenPred)",
      "right" : "static boolean containsType(Node node,\n                              int type,\n                              Predicate<Node> traverseChildrenPred)",
      "info" : "MethodDeclaration[46720-47025]:MethodDeclaration[47219-47524]"
    }, {
      "left" : "static boolean containsType(Node node, int type)",
      "right" : "static boolean containsType(Node node, int type)",
      "info" : "MethodDeclaration[47029-47235]:MethodDeclaration[47528-47734]"
    }, {
      "left" : "static void redeclareVarsInsideBranch(Node branch)",
      "right" : "static void redeclareVarsInsideBranch(Node branch)",
      "info" : "MethodDeclaration[47240-47987]:MethodDeclaration[47739-48486]"
    }, {
      "left" : "static void copyNameAnnotations(Node source, Node destination)",
      "right" : "static void copyNameAnnotations(Node source, Node destination)",
      "info" : "MethodDeclaration[47991-48292]:MethodDeclaration[48490-48791]"
    }, {
      "left" : "private static Node getAddingRoot(Node n)",
      "right" : "private static Node getAddingRoot(Node n)",
      "info" : "MethodDeclaration[48296-49118]:MethodDeclaration[48795-49617]"
    }, {
      "left" : "public static Node newFunctionNode(String name, List<Node> params,\n      Node body, int lineno, int charno)",
      "right" : "public static Node newFunctionNode(String name, List<Node> params,\n      Node body, int lineno, int charno)",
      "info" : "MethodDeclaration[49122-49699]:MethodDeclaration[49621-50198]"
    }, {
      "left" : "public static Node newQualifiedNameNode(String name, int lineno, int charno)",
      "right" : "public static Node newQualifiedNameNode(String name, int lineno, int charno)",
      "info" : "MethodDeclaration[49703-50756]:MethodDeclaration[50202-51255]"
    }, {
      "left" : "static Node newQualifiedNameNode(String name, Node basisNode,\n      String originalName)",
      "right" : "static Node newQualifiedNameNode(String name, Node basisNode,\n      String originalName)",
      "info" : "MethodDeclaration[50760-51506]:MethodDeclaration[51259-52005]"
    }, {
      "left" : "static Node getRootOfQualifiedName(Node qName)",
      "right" : "static Node getRootOfQualifiedName(Node qName)",
      "info" : "MethodDeclaration[51510-51914]:MethodDeclaration[52009-52413]"
    }, {
      "left" : "static void setDebugInformation(Node node, Node basisNode,\n                                  String originalName)",
      "right" : "static void setDebugInformation(Node node, Node basisNode,\n                                  String originalName)",
      "info" : "MethodDeclaration[51918-52449]:MethodDeclaration[52417-52948]"
    }, {
      "left" : "static Node newName(String name, Node basisNode)",
      "right" : "static Node newName(String name, Node basisNode)",
      "info" : "MethodDeclaration[52453-52953]:MethodDeclaration[52952-53452]"
    }, {
      "left" : "static Node newName(String name, Node basisNode, String originalName)",
      "right" : "static Node newName(String name, Node basisNode, String originalName)",
      "info" : "MethodDeclaration[52957-53672]:MethodDeclaration[53456-54171]"
    }, {
      "left" : "static boolean isLatin(String s)",
      "right" : "static boolean isLatin(String s)",
      "info" : "MethodDeclaration[53676-54543]:MethodDeclaration[54175-55042]"
    }, {
      "left" : "static boolean isValidPropertyName(String name)",
      "right" : "static boolean isValidPropertyName(String name)",
      "info" : "MethodDeclaration[54547-55208]:MethodDeclaration[55046-55707]"
    }, {
      "left" : "VarCollector",
      "right" : "VarCollector",
      "info" : "TypeDeclaration[55212-55649]:TypeDeclaration[55711-56148]"
    }, {
      "left" : "final Map<String, Node> vars = Maps.newLinkedHashMap();",
      "right" : "final Map<String, Node> vars = Maps.newLinkedHashMap();",
      "info" : "FieldDeclaration[55271-55326]:FieldDeclaration[55770-55825]"
    }, {
      "left" : "public void visit(Node n)",
      "right" : "public void visit(Node n)",
      "info" : "MethodDeclaration[55332-55645]:MethodDeclaration[55831-56144]"
    }, {
      "left" : "public static Collection<Node> getVarsDeclaredInBranch(Node root)",
      "right" : "public static Collection<Node> getVarsDeclaredInBranch(Node root)",
      "info" : "MethodDeclaration[55653-55987]:MethodDeclaration[56152-56486]"
    }, {
      "left" : "static boolean isPrototypePropertyDeclaration(Node n)",
      "right" : "static boolean isPrototypePropertyDeclaration(Node n)",
      "info" : "MethodDeclaration[55991-56289]:MethodDeclaration[56490-56788]"
    }, {
      "left" : "static boolean isPrototypeProperty(Node n)",
      "right" : "static boolean isPrototypeProperty(Node n)",
      "info" : "MethodDeclaration[56293-56529]:MethodDeclaration[56792-57028]"
    }, {
      "left" : "static Node getPrototypeClassName(Node qName)",
      "right" : "static Node getPrototypeClassName(Node qName)",
      "info" : "MethodDeclaration[56533-56892]:MethodDeclaration[57032-57391]"
    }, {
      "left" : "static String getPrototypePropertyName(Node qName)",
      "right" : "static String getPrototypePropertyName(Node qName)",
      "info" : "MethodDeclaration[56896-57254]:MethodDeclaration[57395-57753]"
    }, {
      "left" : "static Node newUndefinedNode(Node srcReferenceNode)",
      "right" : "static Node newUndefinedNode(Node srcReferenceNode)",
      "info" : "MethodDeclaration[57258-57641]:MethodDeclaration[57757-58140]"
    }, {
      "left" : "static Node newVarNode(String name, Node value)",
      "right" : "static Node newVarNode(String name, Node value)",
      "info" : "MethodDeclaration[57645-58114]:MethodDeclaration[58144-58613]"
    }, {
      "left" : "MatchNameNode",
      "right" : "MatchNameNode",
      "info" : "TypeDeclaration[58118-58470]:TypeDeclaration[58617-58969]"
    }, {
      "left" : "final String name;",
      "right" : "final String name;",
      "info" : "FieldDeclaration[58263-58281]:FieldDeclaration[58762-58780]"
    }, {
      "left" : "MatchNameNode(String name",
      "right" : "MatchNameNode(String name",
      "info" : "MethodDeclaration[58287-58344]:MethodDeclaration[58786-58843]"
    }, {
      "left" : "public boolean apply(Node n)",
      "right" : "public boolean apply(Node n)",
      "info" : "MethodDeclaration[58350-58466]:MethodDeclaration[58849-58965]"
    }, {
      "left" : "MatchNodeType",
      "right" : "MatchNodeType",
      "info" : "TypeDeclaration[58474-58761]:TypeDeclaration[58973-59260]"
    }, {
      "left" : "final int type;",
      "right" : "final int type;",
      "info" : "FieldDeclaration[58606-58621]:FieldDeclaration[59105-59120]"
    }, {
      "left" : "MatchNodeType(int type",
      "right" : "MatchNodeType(int type",
      "info" : "MethodDeclaration[58627-58681]:MethodDeclaration[59126-59180]"
    }, {
      "left" : "public boolean apply(Node n)",
      "right" : "public boolean apply(Node n)",
      "info" : "MethodDeclaration[58687-58757]:MethodDeclaration[59186-59256]"
    }, {
      "left" : "MatchDeclaration",
      "right" : "MatchDeclaration",
      "info" : "TypeDeclaration[58766-59008]:TypeDeclaration[59265-59507]"
    }, {
      "left" : "public boolean apply(Node n)",
      "right" : "public boolean apply(Node n)",
      "info" : "MethodDeclaration[58901-59004]:MethodDeclaration[59400-59503]"
    }, {
      "left" : "MatchNotFunction",
      "right" : "MatchNotFunction",
      "info" : "TypeDeclaration[59012-59217]:TypeDeclaration[59511-59716]"
    }, {
      "left" : "public boolean apply(Node n)",
      "right" : "public boolean apply(Node n)",
      "info" : "MethodDeclaration[59148-59213]:MethodDeclaration[59647-59712]"
    }, {
      "left" : "MatchShallowStatement",
      "right" : "MatchShallowStatement",
      "info" : "TypeDeclaration[59221-59628]:TypeDeclaration[59720-60127]"
    }, {
      "left" : "public boolean apply(Node n)",
      "right" : "public boolean apply(Node n)",
      "info" : "MethodDeclaration[59376-59624]:MethodDeclaration[59875-60123]"
    }, {
      "left" : "static int getNodeTypeReferenceCount(\n      Node node, int type, Predicate<Node> traverseChildrenPred)",
      "right" : "static int getNodeTypeReferenceCount(\n      Node node, int type, Predicate<Node> traverseChildrenPred)",
      "info" : "MethodDeclaration[59632-59900]:MethodDeclaration[60131-60399]"
    }, {
      "left" : "static boolean isNameReferenced(Node node,\n                                  String name,\n                                  Predicate<Node> traverseChildrenPred)",
      "right" : "static boolean isNameReferenced(Node node,\n                                  String name,\n                                  Predicate<Node> traverseChildrenPred)",
      "info" : "MethodDeclaration[59904-60215]:MethodDeclaration[60403-60714]"
    }, {
      "left" : "static boolean isNameReferenced(Node node, String name)",
      "right" : "static boolean isNameReferenced(Node node, String name)",
      "info" : "MethodDeclaration[60219-60427]:MethodDeclaration[60718-60926]"
    }, {
      "left" : "static int getNameReferenceCount(Node node, String name)",
      "right" : "static int getNameReferenceCount(Node node, String name)",
      "info" : "MethodDeclaration[60431-60678]:MethodDeclaration[60930-61177]"
    }, {
      "left" : "static boolean has(Node node,\n                     Predicate<Node> pred,\n                     Predicate<Node> traverseChildrenPred)",
      "right" : "static boolean has(Node node,\n                     Predicate<Node> pred,\n                     Predicate<Node> traverseChildrenPred)",
      "info" : "MethodDeclaration[60682-61209]:MethodDeclaration[61181-61708]"
    }, {
      "left" : "static int getCount(\n      Node n, Predicate<Node> pred, Predicate<Node> traverseChildrenPred)",
      "right" : "static int getCount(\n      Node n, Predicate<Node> pred, Predicate<Node> traverseChildrenPred)",
      "info" : "MethodDeclaration[61213-61694]:MethodDeclaration[61712-62193]"
    }, {
      "left" : "Visitor",
      "right" : "Visitor",
      "info" : "TypeDeclaration[61698-61830]:TypeDeclaration[62197-62329]"
    }, {
      "left" : "void visit(Node node);",
      "right" : "void visit(Node node);",
      "info" : "MethodDeclaration[61804-61826]:MethodDeclaration[62303-62325]"
    }, {
      "left" : "static void visitPreOrder(Node node,\n                     Visitor vistor,\n                     Predicate<Node> traverseChildrenPred)",
      "right" : "static void visitPreOrder(Node node,\n                     Visitor vistor,\n                     Predicate<Node> traverseChildrenPred)",
      "info" : "MethodDeclaration[61834-62288]:MethodDeclaration[62333-62787]"
    }, {
      "left" : "static void visitPostOrder(Node node,\n                     Visitor vistor,\n                     Predicate<Node> traverseChildrenPred)",
      "right" : "static void visitPostOrder(Node node,\n                     Visitor vistor,\n                     Predicate<Node> traverseChildrenPred)",
      "info" : "MethodDeclaration[62292-62749]:MethodDeclaration[62791-63248]"
    }, {
      "left" : "static boolean hasFinally(Node n)",
      "right" : "static boolean hasFinally(Node n)",
      "info" : "MethodDeclaration[62753-62951]:MethodDeclaration[63252-63450]"
    }, {
      "left" : "static Node getCatchBlock(Node n)",
      "right" : "static Node getCatchBlock(Node n)",
      "info" : "MethodDeclaration[62955-63183]:MethodDeclaration[63454-63682]"
    }, {
      "left" : "static boolean hasCatchHandler(Node n)",
      "right" : "static boolean hasCatchHandler(Node n)",
      "info" : "MethodDeclaration[63187-63474]:MethodDeclaration[63686-63973]"
    }, {
      "left" : "static Node getFnParameters(Node fnNode)",
      "right" : "static Node getFnParameters(Node fnNode)",
      "info" : "MethodDeclaration[63478-63807]:MethodDeclaration[63977-64306]"
    }, {
      "left" : "static boolean isConstantName(Node node)",
      "right" : "static boolean isConstantName(Node node)",
      "info" : "MethodDeclaration[63811-64614]:MethodDeclaration[64310-65113]"
    }, {
      "left" : "static boolean isConstantByConvention(\n      CodingConvention convention, Node node, Node parent)",
      "right" : "static boolean isConstantByConvention(\n      CodingConvention convention, Node node, Node parent)",
      "info" : "MethodDeclaration[64618-65107]:MethodDeclaration[65117-65606]"
    }, {
      "left" : "static JSDocInfo getInfoForNameNode(Node nameNode)",
      "right" : "static JSDocInfo getInfoForNameNode(Node nameNode)",
      "info" : "MethodDeclaration[65111-65636]:MethodDeclaration[65610-66135]"
    }, {
      "left" : "static JSDocInfo getFunctionInfo(Node n)",
      "right" : "static JSDocInfo getFunctionInfo(Node n)",
      "info" : "MethodDeclaration[65640-66268]:MethodDeclaration[66139-66767]"
    }, {
      "left" : "static String getSourceName(Node n)",
      "right" : "static String getSourceName(Node n)",
      "info" : "MethodDeclaration[66272-66608]:MethodDeclaration[66771-67107]"
    }, {
      "left" : "static Node newCallNode(Node callTarget, Node... parameters)",
      "right" : "static Node newCallNode(Node callTarget, Node... parameters)",
      "info" : "MethodDeclaration[66612-67007]:MethodDeclaration[67111-67506]"
    }, {
      "left" : "static boolean evaluatesToLocalValue(Node value)",
      "right" : "static boolean evaluatesToLocalValue(Node value)",
      "info" : "MethodDeclaration[67011-67242]:MethodDeclaration[67510-67741]"
    }, {
      "left" : "static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals)",
      "right" : "static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals)",
      "info" : "MethodDeclaration[67246-69796]:MethodDeclaration[67745-70295]"
    } ],
    "mappings" : [
 {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[1380-1386]:Modifier[1380-1386]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[1393-1398]:TYPE_DECLARATION_KIND[1393-1398]"
    }, {
      "left" : "NodeUtil",
      "right" : "NodeUtil",
      "info" : "SimpleName[1399-1407]:SimpleName[1399-1407]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[1884-1891]:Modifier[1884-1891]"
    }, {
      "left" : "NodeUtil",
      "right" : "NodeUtil",
      "info" : "SimpleName[1892-1900]:SimpleName[1892-1900]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1903-1905]:Block[1903-1905]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[2192-2198]:Modifier[2192-2198]"
    }, {
      "left" : "TernaryValue",
      "right" : "TernaryValue",
      "info" : "SimpleType[2199-2211]:SimpleType[2199-2211]"
    }, {
      "left" : "getExpressionBooleanValue",
      "right" : "getExpressionBooleanValue",
      "info" : "SimpleName[2212-2237]:SimpleName[2212-2237]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[2238-2244]:SingleVariableDeclaration[2238-2244]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2246-3398]:Block[2246-3398]"
    }, {
      "left" : "switch (n.getType()) {\n      case Token.ASSIGN:\n      case Token.COMMA:\n        // For ASSIGN and COMMA the value is the value of the RHS.\n        return getExpressionBooleanValue(n.getLastChild());\n      case Token.NOT:\n        TernaryValue value = getExpressionBooleanValue(n.getLastChild());\n        return value.not();\n      case Token.AND: {\n        TernaryValue lhs = getExpressionBooleanValue(n.getFirstChild());\n        TernaryValue rhs = getExpressionBooleanValue(n.getLastChild());\n        return lhs.and(rhs);\n      }\n      case Token.OR:  {\n        TernaryValue lhs = getExpressionBooleanValue(n.getFirstChild());\n        TernaryValue rhs = getExpressionBooleanValue(n.getLastChild());\n        return lhs.or(rhs);\n      }\n      case Token.HOOK:  {\n        TernaryValue trueValue = getExpressionBooleanValue(\n            n.getFirstChild().getNext());\n        TernaryValue falseValue = getExpressionBooleanValue(n.getLastChild());\n        if (trueValue.equals(falseValue)) {\n          return trueValue;\n        } else {\n          return TernaryValue.UNKNOWN;\n        }\n      }\n      default:\n        return getBooleanValue(n);\n    }",
      "right" : "switch (n.getType()) {\n      case Token.ASSIGN:\n      case Token.COMMA:\n        // For ASSIGN and COMMA the value is the value of the RHS.\n        return getExpressionBooleanValue(n.getLastChild());\n      case Token.NOT:\n        TernaryValue value = getExpressionBooleanValue(n.getLastChild());\n        return value.not();\n      case Token.AND: {\n        TernaryValue lhs = getExpressionBooleanValue(n.getFirstChild());\n        TernaryValue rhs = getExpressionBooleanValue(n.getLastChild());\n        return lhs.and(rhs);\n      }\n      case Token.OR:  {\n        TernaryValue lhs = getExpressionBooleanValue(n.getFirstChild());\n        TernaryValue rhs = getExpressionBooleanValue(n.getLastChild());\n        return lhs.or(rhs);\n      }\n      case Token.HOOK:  {\n        TernaryValue trueValue = getExpressionBooleanValue(\n            n.getFirstChild().getNext());\n        TernaryValue falseValue = getExpressionBooleanValue(n.getLastChild());\n        if (trueValue.equals(falseValue)) {\n          return trueValue;\n        } else {\n          return TernaryValue.UNKNOWN;\n        }\n      }\n      default:\n        return getBooleanValue(n);\n    }",
      "info" : "SwitchStatement[2252-3394]:SwitchStatement[2252-3394]"
    }, {
      "left" : "case Token.ASSIGN:",
      "right" : "case Token.ASSIGN:",
      "info" : "SwitchCase[2281-2299]:SwitchCase[2281-2299]"
    }, {
      "left" : "case Token.COMMA:",
      "right" : "case Token.COMMA:",
      "info" : "SwitchCase[2306-2323]:SwitchCase[2306-2323]"
    }, {
      "left" : "return getExpressionBooleanValue(n.getLastChild());",
      "right" : "return getExpressionBooleanValue(n.getLastChild());",
      "info" : "ReturnStatement[2399-2450]:ReturnStatement[2399-2450]"
    }, {
      "left" : "case Token.NOT:",
      "right" : "case Token.NOT:",
      "info" : "SwitchCase[2457-2472]:SwitchCase[2457-2472]"
    }, {
      "left" : "TernaryValue value = getExpressionBooleanValue(n.getLastChild());",
      "right" : "TernaryValue value = getExpressionBooleanValue(n.getLastChild());",
      "info" : "VariableDeclarationStatement[2481-2546]:VariableDeclarationStatement[2481-2546]"
    }, {
      "left" : "return value.not();",
      "right" : "return value.not();",
      "info" : "ReturnStatement[2555-2574]:ReturnStatement[2555-2574]"
    }, {
      "left" : "case Token.AND:",
      "right" : "case Token.AND:",
      "info" : "SwitchCase[2581-2596]:SwitchCase[2581-2596]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2597-2780]:Block[2597-2780]"
    }, {
      "left" : "TernaryValue lhs = getExpressionBooleanValue(n.getFirstChild());",
      "right" : "TernaryValue lhs = getExpressionBooleanValue(n.getFirstChild());",
      "info" : "VariableDeclarationStatement[2607-2671]:VariableDeclarationStatement[2607-2671]"
    }, {
      "left" : "TernaryValue rhs = getExpressionBooleanValue(n.getLastChild());",
      "right" : "TernaryValue rhs = getExpressionBooleanValue(n.getLastChild());",
      "info" : "VariableDeclarationStatement[2680-2743]:VariableDeclarationStatement[2680-2743]"
    }, {
      "left" : "return lhs.and(rhs);",
      "right" : "return lhs.and(rhs);",
      "info" : "ReturnStatement[2752-2772]:ReturnStatement[2752-2772]"
    }, {
      "left" : "case Token.OR:",
      "right" : "case Token.OR:",
      "info" : "SwitchCase[2787-2801]:SwitchCase[2787-2801]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2803-2985]:Block[2803-2985]"
    }, {
      "left" : "TernaryValue lhs = getExpressionBooleanValue(n.getFirstChild());",
      "right" : "TernaryValue lhs = getExpressionBooleanValue(n.getFirstChild());",
      "info" : "VariableDeclarationStatement[2813-2877]:VariableDeclarationStatement[2813-2877]"
    }, {
      "left" : "TernaryValue rhs = getExpressionBooleanValue(n.getLastChild());",
      "right" : "TernaryValue rhs = getExpressionBooleanValue(n.getLastChild());",
      "info" : "VariableDeclarationStatement[2886-2949]:VariableDeclarationStatement[2886-2949]"
    }, {
      "left" : "return lhs.or(rhs);",
      "right" : "return lhs.or(rhs);",
      "info" : "ReturnStatement[2958-2977]:ReturnStatement[2958-2977]"
    }, {
      "left" : "case Token.HOOK:",
      "right" : "case Token.HOOK:",
      "info" : "SwitchCase[2992-3008]:SwitchCase[2992-3008]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3010-3338]:Block[3010-3338]"
    }, {
      "left" : "TernaryValue trueValue = getExpressionBooleanValue(\n            n.getFirstChild().getNext());",
      "right" : "TernaryValue trueValue = getExpressionBooleanValue(\n            n.getFirstChild().getNext());",
      "info" : "VariableDeclarationStatement[3020-3113]:VariableDeclarationStatement[3020-3113]"
    }, {
      "left" : "TernaryValue falseValue = getExpressionBooleanValue(n.getLastChild());",
      "right" : "TernaryValue falseValue = getExpressionBooleanValue(n.getLastChild());",
      "info" : "VariableDeclarationStatement[3122-3192]:VariableDeclarationStatement[3122-3192]"
    }, {
      "left" : "if (trueValue.equals(falseValue))",
      "right" : "if (trueValue.equals(falseValue))",
      "info" : "IfStatement[3201-3330]:IfStatement[3201-3330]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3235-3274]:Block[3235-3274]"
    }, {
      "left" : "return trueValue;",
      "right" : "return trueValue;",
      "info" : "ReturnStatement[3247-3264]:ReturnStatement[3247-3264]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3280-3330]:Block[3280-3330]"
    }, {
      "left" : "return TernaryValue.UNKNOWN;",
      "right" : "return TernaryValue.UNKNOWN;",
      "info" : "ReturnStatement[3292-3320]:ReturnStatement[3292-3320]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[3345-3353]:SwitchCase[3345-3353]"
    }, {
      "left" : "return getBooleanValue(n);",
      "right" : "return getBooleanValue(n);",
      "info" : "ReturnStatement[3362-3388]:ReturnStatement[3362-3388]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[3570-3576]:Modifier[3570-3576]"
    }, {
      "left" : "TernaryValue",
      "right" : "TernaryValue",
      "info" : "SimpleType[3577-3589]:SimpleType[3577-3589]"
    }, {
      "left" : "getBooleanValue",
      "right" : "getBooleanValue",
      "info" : "SimpleName[3590-3605]:SimpleName[3590-3605]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[3606-3612]:SingleVariableDeclaration[3606-3612]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3614-4536]:Block[3614-4536]"
    }, {
      "left" : "switch (n.getType()) {\n      case Token.STRING:\n        return TernaryValue.forBoolean(n.getString().length() > 0);\n\n      case Token.NUMBER:\n        return TernaryValue.forBoolean(n.getDouble() != 0);\n\n      case Token.NULL:\n      case Token.FALSE:\n      case Token.VOID:\n        return TernaryValue.FALSE;\n\n      case Token.NAME:\n        String name = n.getString();\n        if (\"undefined\".equals(name)\n            || \"NaN\".equals(name)) {\n          // We assume here that programs don't change the value of the keyword\n          // undefined to something other than the value undefined.\n          return TernaryValue.FALSE;\n        } else if (\"Infinity\".equals(name)) {\n          return TernaryValue.TRUE;\n        }\n        break;\n\n      case Token.TRUE:\n      case Token.ARRAYLIT:\n      case Token.OBJECTLIT:\n      case Token.REGEXP:\n        return TernaryValue.TRUE;\n    }",
      "right" : "switch (n.getType()) {\n      case Token.STRING:\n        return TernaryValue.forBoolean(n.getString().length() > 0);\n\n      case Token.NUMBER:\n        return TernaryValue.forBoolean(n.getDouble() != 0);\n\n      case Token.NULL:\n      case Token.FALSE:\n      case Token.VOID:\n        return TernaryValue.FALSE;\n\n      case Token.NAME:\n        String name = n.getString();\n        if (\"undefined\".equals(name)\n            || \"NaN\".equals(name)) {\n          // We assume here that programs don't change the value of the keyword\n          // undefined to something other than the value undefined.\n          return TernaryValue.FALSE;\n        } else if (\"Infinity\".equals(name)) {\n          return TernaryValue.TRUE;\n        }\n        break;\n\n      case Token.TRUE:\n      case Token.ARRAYLIT:\n      case Token.OBJECTLIT:\n      case Token.REGEXP:\n        return TernaryValue.TRUE;\n    }",
      "info" : "SwitchStatement[3620-4498]:SwitchStatement[3620-4498]"
    }, {
      "left" : "case Token.STRING:",
      "right" : "case Token.STRING:",
      "info" : "SwitchCase[3649-3667]:SwitchCase[3649-3667]"
    }, {
      "left" : "return TernaryValue.forBoolean(n.getString().length() > 0);",
      "right" : "return TernaryValue.forBoolean(n.getString().length() > 0);",
      "info" : "ReturnStatement[3676-3735]:ReturnStatement[3676-3735]"
    }, {
      "left" : "case Token.NUMBER:",
      "right" : "case Token.NUMBER:",
      "info" : "SwitchCase[3743-3761]:SwitchCase[3743-3761]"
    }, {
      "left" : "return TernaryValue.forBoolean(n.getDouble() != 0);",
      "right" : "return TernaryValue.forBoolean(n.getDouble() != 0);",
      "info" : "ReturnStatement[3770-3821]:ReturnStatement[3770-3821]"
    }, {
      "left" : "case Token.NULL:",
      "right" : "case Token.NULL:",
      "info" : "SwitchCase[3829-3845]:SwitchCase[3829-3845]"
    }, {
      "left" : "case Token.FALSE:",
      "right" : "case Token.FALSE:",
      "info" : "SwitchCase[3852-3869]:SwitchCase[3852-3869]"
    }, {
      "left" : "case Token.VOID:",
      "right" : "case Token.VOID:",
      "info" : "SwitchCase[3876-3892]:SwitchCase[3876-3892]"
    }, {
      "left" : "return TernaryValue.FALSE;",
      "right" : "return TernaryValue.FALSE;",
      "info" : "ReturnStatement[3901-3927]:ReturnStatement[3901-3927]"
    }, {
      "left" : "case Token.NAME:",
      "right" : "case Token.NAME:",
      "info" : "SwitchCase[3935-3951]:SwitchCase[3935-3951]"
    }, {
      "left" : "String name = n.getString();",
      "right" : "String name = n.getString();",
      "info" : "VariableDeclarationStatement[3960-3988]:VariableDeclarationStatement[3960-3988]"
    }, {
      "left" : "if (\"undefined\".equals(name)\n            || \"NaN\".equals(name))",
      "right" : "if (\"undefined\".equals(name)\n            || \"NaN\".equals(name))",
      "info" : "IfStatement[3997-4339]:IfStatement[3997-4339]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4061-4257]:Block[4061-4257]"
    }, {
      "left" : "return TernaryValue.FALSE;",
      "right" : "return TernaryValue.FALSE;",
      "info" : "ReturnStatement[4221-4247]:ReturnStatement[4221-4247]"
    }, {
      "left" : "if (\"Infinity\".equals(name))",
      "right" : "if (\"Infinity\".equals(name))",
      "info" : "IfStatement[4263-4339]:IfStatement[4263-4339]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4292-4339]:Block[4292-4339]"
    }, {
      "left" : "return TernaryValue.TRUE;",
      "right" : "return TernaryValue.TRUE;",
      "info" : "ReturnStatement[4304-4329]:ReturnStatement[4304-4329]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[4348-4354]:BreakStatement[4348-4354]"
    }, {
      "left" : "case Token.TRUE:",
      "right" : "case Token.TRUE:",
      "info" : "SwitchCase[4362-4378]:SwitchCase[4362-4378]"
    }, {
      "left" : "case Token.ARRAYLIT:",
      "right" : "case Token.ARRAYLIT:",
      "info" : "SwitchCase[4385-4405]:SwitchCase[4385-4405]"
    }, {
      "left" : "case Token.OBJECTLIT:",
      "right" : "case Token.OBJECTLIT:",
      "info" : "SwitchCase[4412-4433]:SwitchCase[4412-4433]"
    }, {
      "left" : "case Token.REGEXP:",
      "right" : "case Token.REGEXP:",
      "info" : "SwitchCase[4440-4458]:SwitchCase[4440-4458]"
    }, {
      "left" : "return TernaryValue.TRUE;",
      "right" : "return TernaryValue.TRUE;",
      "info" : "ReturnStatement[4467-4492]:ReturnStatement[4467-4492]"
    }, {
      "left" : "return TernaryValue.UNKNOWN;",
      "right" : "return TernaryValue.UNKNOWN;",
      "info" : "ReturnStatement[4504-4532]:ReturnStatement[4504-4532]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[4761-4767]:Modifier[4761-4767]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[4768-4774]:SimpleType[4768-4774]"
    }, {
      "left" : "getStringValue",
      "right" : "getStringValue",
      "info" : "SimpleName[4775-4789]:SimpleName[4775-4789]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[4790-4796]:SingleVariableDeclaration[4790-4796]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4798-5475]:Block[4798-5475]"
    }, {
      "left" : "switch (n.getType()) {\n      case Token.NAME:\n      case Token.STRING:\n        return n.getString();\n\n      case Token.NUMBER:\n        double value = n.getDouble();\n        long longValue = (long) value;\n\n        // Return \"1\" instead of \"1.0\"\n        if (longValue == value) {\n          return Long.toString(longValue);\n        } else {\n          return Double.toString(n.getDouble());\n        }\n\n      case Token.FALSE:\n      case Token.TRUE:\n      case Token.NULL:\n        return Node.tokenToName(n.getType());\n\n      case Token.VOID:\n        return \"undefined\";\n    }",
      "right" : "switch (n.getType()) {\n      case Token.NAME:\n      case Token.STRING:\n        return n.getString();\n\n      case Token.NUMBER:\n        double value = n.getDouble();\n        long longValue = (long) value;\n\n        // Return \"1\" instead of \"1.0\"\n        if (longValue == value) {\n          return Long.toString(longValue);\n        } else {\n          return Double.toString(n.getDouble());\n        }\n\n      case Token.FALSE:\n      case Token.TRUE:\n      case Token.NULL:\n        return Node.tokenToName(n.getType());\n\n      case Token.VOID:\n        return \"undefined\";\n    }",
      "info" : "SwitchStatement[4883-5454]:SwitchStatement[4883-5454]"
    }, {
      "left" : "case Token.NAME:",
      "right" : "case Token.NAME:",
      "info" : "SwitchCase[4912-4928]:SwitchCase[4912-4928]"
    }, {
      "left" : "case Token.STRING:",
      "right" : "case Token.STRING:",
      "info" : "SwitchCase[4935-4953]:SwitchCase[4935-4953]"
    }, {
      "left" : "return n.getString();",
      "right" : "return n.getString();",
      "info" : "ReturnStatement[4962-4983]:ReturnStatement[4962-4983]"
    }, {
      "left" : "case Token.NUMBER:",
      "right" : "case Token.NUMBER:",
      "info" : "SwitchCase[4991-5009]:SwitchCase[4991-5009]"
    }, {
      "left" : "double value = n.getDouble();",
      "right" : "double value = n.getDouble();",
      "info" : "VariableDeclarationStatement[5018-5047]:VariableDeclarationStatement[5018-5047]"
    }, {
      "left" : "long longValue = (long) value;",
      "right" : "long longValue = (long) value;",
      "info" : "VariableDeclarationStatement[5056-5086]:VariableDeclarationStatement[5056-5086]"
    }, {
      "left" : "if (longValue == value)",
      "right" : "if (longValue == value)",
      "info" : "IfStatement[5135-5279]:IfStatement[5135-5279]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5159-5213]:Block[5159-5213]"
    }, {
      "left" : "return Long.toString(longValue);",
      "right" : "return Long.toString(longValue);",
      "info" : "ReturnStatement[5171-5203]:ReturnStatement[5171-5203]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5219-5279]:Block[5219-5279]"
    }, {
      "left" : "return Double.toString(n.getDouble());",
      "right" : "return Double.toString(n.getDouble());",
      "info" : "ReturnStatement[5231-5269]:ReturnStatement[5231-5269]"
    }, {
      "left" : "case Token.FALSE:",
      "right" : "case Token.FALSE:",
      "info" : "SwitchCase[5287-5304]:SwitchCase[5287-5304]"
    }, {
      "left" : "case Token.TRUE:",
      "right" : "case Token.TRUE:",
      "info" : "SwitchCase[5311-5327]:SwitchCase[5311-5327]"
    }, {
      "left" : "case Token.NULL:",
      "right" : "case Token.NULL:",
      "info" : "SwitchCase[5334-5350]:SwitchCase[5334-5350]"
    }, {
      "left" : "return Node.tokenToName(n.getType());",
      "right" : "return Node.tokenToName(n.getType());",
      "info" : "ReturnStatement[5359-5396]:ReturnStatement[5359-5396]"
    }, {
      "left" : "case Token.VOID:",
      "right" : "case Token.VOID:",
      "info" : "SwitchCase[5404-5420]:SwitchCase[5404-5420]"
    }, {
      "left" : "return \"undefined\";",
      "right" : "return \"undefined\";",
      "info" : "ReturnStatement[5429-5448]:ReturnStatement[5429-5448]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[5459-5471]:ReturnStatement[5459-5471]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[6092-6098]:Modifier[6092-6098]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[6099-6105]:SimpleType[6099-6105]"
    }, {
      "left" : "getFunctionName",
      "right" : "getFunctionName",
      "info" : "SimpleName[6106-6121]:SimpleName[6106-6121]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[6122-6128]:SingleVariableDeclaration[6122-6128]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6130-6683]:Block[6130-6683]"
    }, {
      "left" : "Node parent = n.getParent();",
      "right" : "Node parent = n.getParent();",
      "info" : "VariableDeclarationStatement[6136-6164]:VariableDeclarationStatement[6136-6164]"
    }, {
      "left" : "String name = n.getFirstChild().getString();",
      "right" : "String name = n.getFirstChild().getString();",
      "info" : "VariableDeclarationStatement[6169-6213]:VariableDeclarationStatement[6169-6213]"
    }, {
      "left" : "switch (parent.getType()) {\n      case Token.NAME:\n        // var name = function() ...\n        // var name2 = function name1() ...\n        return parent.getString();\n\n      case Token.ASSIGN:\n        // qualified.name = function() ...\n        // qualified.name2 = function name1() ...\n        return parent.getFirstChild().getQualifiedName();\n\n      default:\n        // function name() ...\n        return name != null && name.length() != 0 ? name : null;\n    }",
      "right" : "switch (parent.getType()) {\n      case Token.NAME:\n        // var name = function() ...\n        // var name2 = function name1() ...\n        return parent.getString();\n\n      case Token.ASSIGN:\n        // qualified.name = function() ...\n        // qualified.name2 = function name1() ...\n        return parent.getFirstChild().getQualifiedName();\n\n      default:\n        // function name() ...\n        return name != null && name.length() != 0 ? name : null;\n    }",
      "info" : "SwitchStatement[6218-6679]:SwitchStatement[6218-6679]"
    }, {
      "left" : "case Token.NAME:",
      "right" : "case Token.NAME:",
      "info" : "SwitchCase[6252-6268]:SwitchCase[6252-6268]"
    }, {
      "left" : "return parent.getString();",
      "right" : "return parent.getString();",
      "info" : "ReturnStatement[6358-6384]:ReturnStatement[6358-6384]"
    }, {
      "left" : "case Token.ASSIGN:",
      "right" : "case Token.ASSIGN:",
      "info" : "SwitchCase[6392-6410]:SwitchCase[6392-6410]"
    }, {
      "left" : "return parent.getFirstChild().getQualifiedName();",
      "right" : "return parent.getFirstChild().getQualifiedName();",
      "info" : "ReturnStatement[6512-6561]:ReturnStatement[6512-6561]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[6569-6577]:SwitchCase[6569-6577]"
    }, {
      "left" : "return name != null && name.length() != 0 ? name : null;",
      "right" : "return name != null && name.length() != 0 ? name : null;",
      "info" : "ReturnStatement[6617-6673]:ReturnStatement[6617-6673]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[7268-7274]:Modifier[7268-7274]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[7275-7281]:SimpleType[7275-7281]"
    }, {
      "left" : "getNearestFunctionName",
      "right" : "getNearestFunctionName",
      "info" : "SimpleName[7282-7304]:SimpleName[7282-7304]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[7305-7311]:SingleVariableDeclaration[7305-7311]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7313-7678]:Block[7313-7678]"
    }, {
      "left" : "String name = getFunctionName(n);",
      "right" : "String name = getFunctionName(n);",
      "info" : "VariableDeclarationStatement[7319-7352]:VariableDeclarationStatement[7319-7352]"
    }, {
      "left" : "if (name != null)",
      "right" : "if (name != null)",
      "info" : "IfStatement[7357-7401]:IfStatement[7357-7401]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7375-7401]:Block[7375-7401]"
    }, {
      "left" : "return name;",
      "right" : "return name;",
      "info" : "ReturnStatement[7383-7395]:ReturnStatement[7383-7395]"
    }, {
      "left" : "Node parent = n.getParent();",
      "right" : "Node parent = n.getParent();",
      "info" : "VariableDeclarationStatement[7458-7486]:VariableDeclarationStatement[7458-7486]"
    }, {
      "left" : "switch (parent.getType()) {\n      case Token.OBJECTLIT:\n        // Return the name of the literal's key.\n        return getStringValue(parent.getFirstChild());\n    }",
      "right" : "switch (parent.getType()) {\n      case Token.OBJECTLIT:\n        // Return the name of the literal's key.\n        return getStringValue(parent.getFirstChild());\n    }",
      "info" : "SwitchStatement[7491-7656]:SwitchStatement[7491-7656]"
    }, {
      "left" : "case Token.OBJECTLIT:",
      "right" : "case Token.OBJECTLIT:",
      "info" : "SwitchCase[7525-7546]:SwitchCase[7525-7546]"
    }, {
      "left" : "return getStringValue(parent.getFirstChild());",
      "right" : "return getStringValue(parent.getFirstChild());",
      "info" : "ReturnStatement[7604-7650]:ReturnStatement[7604-7650]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[7662-7674]:ReturnStatement[7662-7674]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[7744-7750]:Modifier[7744-7750]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[7751-7758]:PrimitiveType[7751-7758]"
    }, {
      "left" : "isImmutableValue",
      "right" : "isImmutableValue",
      "info" : "SimpleName[7759-7775]:SimpleName[7759-7775]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[7776-7782]:SingleVariableDeclaration[7776-7782]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7784-8397]:Block[7784-8397]"
    }, {
      "left" : "switch (n.getType()) {\n      case Token.STRING:\n      case Token.NUMBER:\n      case Token.NULL:\n      case Token.TRUE:\n      case Token.FALSE:\n        return true;\n      case Token.VOID:\n      case Token.NEG:\n        return isImmutableValue(n.getFirstChild());\n      case Token.NAME:\n        String name = n.getString();\n        // We assume here that programs don't change the value of the keyword\n        // undefined to something other than the value undefined.\n        return \"undefined\".equals(name)\n            || \"Infinity\".equals(name)\n            || \"NaN\".equals(name);\n    }",
      "right" : "switch (n.getType()) {\n      case Token.STRING:\n      case Token.NUMBER:\n      case Token.NULL:\n      case Token.TRUE:\n      case Token.FALSE:\n        return true;\n      case Token.VOID:\n      case Token.NEG:\n        return isImmutableValue(n.getFirstChild());\n      case Token.NAME:\n        String name = n.getString();\n        // We assume here that programs don't change the value of the keyword\n        // undefined to something other than the value undefined.\n        return \"undefined\".equals(name)\n            || \"Infinity\".equals(name)\n            || \"NaN\".equals(name);\n    }",
      "info" : "SwitchStatement[7790-8374]:SwitchStatement[7790-8374]"
    }, {
      "left" : "case Token.STRING:",
      "right" : "case Token.STRING:",
      "info" : "SwitchCase[7819-7837]:SwitchCase[7819-7837]"
    }, {
      "left" : "case Token.NUMBER:",
      "right" : "case Token.NUMBER:",
      "info" : "SwitchCase[7844-7862]:SwitchCase[7844-7862]"
    }, {
      "left" : "case Token.NULL:",
      "right" : "case Token.NULL:",
      "info" : "SwitchCase[7869-7885]:SwitchCase[7869-7885]"
    }, {
      "left" : "case Token.TRUE:",
      "right" : "case Token.TRUE:",
      "info" : "SwitchCase[7892-7908]:SwitchCase[7892-7908]"
    }, {
      "left" : "case Token.FALSE:",
      "right" : "case Token.FALSE:",
      "info" : "SwitchCase[7915-7932]:SwitchCase[7915-7932]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[7941-7953]:ReturnStatement[7941-7953]"
    }, {
      "left" : "case Token.VOID:",
      "right" : "case Token.VOID:",
      "info" : "SwitchCase[7960-7976]:SwitchCase[7960-7976]"
    }, {
      "left" : "case Token.NEG:",
      "right" : "case Token.NEG:",
      "info" : "SwitchCase[7983-7998]:SwitchCase[7983-7998]"
    }, {
      "left" : "return isImmutableValue(n.getFirstChild());",
      "right" : "return isImmutableValue(n.getFirstChild());",
      "info" : "ReturnStatement[8007-8050]:ReturnStatement[8007-8050]"
    }, {
      "left" : "case Token.NAME:",
      "right" : "case Token.NAME:",
      "info" : "SwitchCase[8057-8073]:SwitchCase[8057-8073]"
    }, {
      "left" : "String name = n.getString();",
      "right" : "String name = n.getString();",
      "info" : "VariableDeclarationStatement[8082-8110]:VariableDeclarationStatement[8082-8110]"
    }, {
      "left" : "return \"undefined\".equals(name)\n            || \"Infinity\".equals(name)\n            || \"NaN\".equals(name);",
      "right" : "return \"undefined\".equals(name)\n            || \"Infinity\".equals(name)\n            || \"NaN\".equals(name);",
      "info" : "ReturnStatement[8263-8368]:ReturnStatement[8263-8368]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[8380-8393]:ReturnStatement[8380-8393]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[9303-9309]:Modifier[9303-9309]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[9310-9317]:PrimitiveType[9310-9317]"
    }, {
      "left" : "isLiteralValue",
      "right" : "isLiteralValue",
      "info" : "SimpleName[9318-9332]:SimpleName[9318-9332]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[9333-9339]:SingleVariableDeclaration[9333-9339]"
    }, {
      "left" : "boolean includeFunctions",
      "right" : "boolean includeFunctions",
      "info" : "SingleVariableDeclaration[9341-9365]:SingleVariableDeclaration[9341-9365]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9367-9918]:Block[9367-9918]"
    }, {
      "left" : "switch (n.getType()) {\n      case Token.ARRAYLIT:\n      case Token.OBJECTLIT:\n      case Token.REGEXP:\n        // Return true only if all children are const.\n        for (Node child = n.getFirstChild(); child != null;\n             child = child.getNext()) {\n          if (!isLiteralValue(child, includeFunctions)) {\n            return false;\n          }\n        }\n        return true;\n\n      case Token.FUNCTION:\n        return includeFunctions && !NodeUtil.isFunctionDeclaration(n);\n\n      default:\n        return isImmutableValue(n);\n    }",
      "right" : "switch (n.getType()) {\n      case Token.ARRAYLIT:\n      case Token.OBJECTLIT:\n      case Token.REGEXP:\n        // Return true only if all children are const.\n        for (Node child = n.getFirstChild(); child != null;\n             child = child.getNext()) {\n          if (!isLiteralValue(child, includeFunctions)) {\n            return false;\n          }\n        }\n        return true;\n\n      case Token.FUNCTION:\n        return includeFunctions && !NodeUtil.isFunctionDeclaration(n);\n\n      default:\n        return isImmutableValue(n);\n    }",
      "info" : "SwitchStatement[9373-9914]:SwitchStatement[9373-9914]"
    }, {
      "left" : "case Token.ARRAYLIT:",
      "right" : "case Token.ARRAYLIT:",
      "info" : "SwitchCase[9402-9422]:SwitchCase[9402-9422]"
    }, {
      "left" : "case Token.OBJECTLIT:",
      "right" : "case Token.OBJECTLIT:",
      "info" : "SwitchCase[9429-9450]:SwitchCase[9429-9450]"
    }, {
      "left" : "case Token.REGEXP:",
      "right" : "case Token.REGEXP:",
      "info" : "SwitchCase[9457-9475]:SwitchCase[9457-9475]"
    }, {
      "left" : "for (Node child = n.getFirstChild(); child != null;\n             child = child.getNext())",
      "right" : "for (Node child = n.getFirstChild(); child != null;\n             child = child.getNext())",
      "info" : "ForStatement[9539-9736]:ForStatement[9539-9736]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9629-9736]:Block[9629-9736]"
    }, {
      "left" : "if (!isLiteralValue(child, includeFunctions))",
      "right" : "if (!isLiteralValue(child, includeFunctions))",
      "info" : "IfStatement[9641-9726]:IfStatement[9641-9726]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9687-9726]:Block[9687-9726]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[9701-9714]:ReturnStatement[9701-9714]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[9745-9757]:ReturnStatement[9745-9757]"
    }, {
      "left" : "case Token.FUNCTION:",
      "right" : "case Token.FUNCTION:",
      "info" : "SwitchCase[9765-9785]:SwitchCase[9765-9785]"
    }, {
      "left" : "return includeFunctions && !NodeUtil.isFunctionDeclaration(n);",
      "right" : "return includeFunctions && !NodeUtil.isFunctionDeclaration(n);",
      "info" : "ReturnStatement[9794-9856]:ReturnStatement[9794-9856]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[9864-9872]:SwitchCase[9864-9872]"
    }, {
      "left" : "return isImmutableValue(n);",
      "right" : "return isImmutableValue(n);",
      "info" : "ReturnStatement[9881-9908]:ReturnStatement[9881-9908]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[10109-10115]:Modifier[10109-10115]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[10116-10123]:PrimitiveType[10116-10123]"
    }, {
      "left" : "isValidDefineValue",
      "right" : "isValidDefineValue",
      "info" : "SimpleName[10124-10142]:SimpleName[10124-10142]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10174-10913]:Block[10174-11412]"
    }, {
      "left" : "switch (val.getType()) {\n      case Token.STRING:\n      case Token.NUMBER:\n      case Token.TRUE:\n      case Token.FALSE:\n        return true;\n\n      // Binary operators are only valid if both children are valid.\n      case Token.BITAND:\n      case Token.BITNOT:\n      case Token.BITOR:\n      case Token.BITXOR:\n\n      // Uniary operators are valid if the child is valid.\n      case Token.NOT:\n      case Token.NEG:\n        return isValidDefineValue(val.getFirstChild(), defines);\n\n      // Names are valid if and only if they are defines themselves.\n      case Token.NAME:\n      case Token.GETPROP:\n        if (val.isQualifiedName()) {\n          return defines.contains(val.getQualifiedName());\n        }\n    }",
      "right" : "switch (val.getType()) {\n      case Token.STRING:\n      case Token.NUMBER:\n      case Token.TRUE:\n      case Token.FALSE:\n        return true;\n\n      // Binary operators are only valid if both children are valid.\n      case Token.ADD:\n      case Token.BITAND:\n      case Token.BITNOT:\n      case Token.BITOR:\n      case Token.BITXOR:\n      case Token.DIV:\n      case Token.EQ:\n      case Token.GE:\n      case Token.GT:\n      case Token.LE:\n      case Token.LSH:\n      case Token.LT:\n      case Token.MOD:\n      case Token.MUL:\n      case Token.NE:\n      case Token.RSH:\n      case Token.SHEQ:\n      case Token.SHNE:\n      case Token.SUB:\n      case Token.URSH:\n        return isValidDefineValue(val.getFirstChild(), defines)\n            && isValidDefineValue(val.getLastChild(), defines);\n\n      // Uniary operators are valid if the child is valid.\n      case Token.NOT:\n      case Token.NEG:\n      case Token.POS:\n        return isValidDefineValue(val.getFirstChild(), defines);\n\n      // Names are valid if and only if they are defines themselves.\n      case Token.NAME:\n      case Token.GETPROP:\n        if (val.isQualifiedName()) {\n          return defines.contains(val.getQualifiedName());\n        }\n    }",
      "info" : "SwitchStatement[10180-10891]:SwitchStatement[10180-11390]"
    }, {
      "left" : "case Token.STRING:",
      "right" : "case Token.STRING:",
      "info" : "SwitchCase[10211-10229]:SwitchCase[10211-10229]"
    }, {
      "left" : "case Token.NUMBER:",
      "right" : "case Token.NUMBER:",
      "info" : "SwitchCase[10236-10254]:SwitchCase[10236-10254]"
    }, {
      "left" : "case Token.TRUE:",
      "right" : "case Token.TRUE:",
      "info" : "SwitchCase[10261-10277]:SwitchCase[10261-10277]"
    }, {
      "left" : "case Token.FALSE:",
      "right" : "case Token.FALSE:",
      "info" : "SwitchCase[10284-10301]:SwitchCase[10284-10301]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[10310-10322]:ReturnStatement[10310-10322]"
    }, {
      "left" : "case Token.BITAND:",
      "right" : "case Token.BITAND:",
      "info" : "SwitchCase[10399-10417]:SwitchCase[10421-10439]"
    }, {
      "left" : "case Token.BITNOT:",
      "right" : "case Token.BITNOT:",
      "info" : "SwitchCase[10424-10442]:SwitchCase[10446-10464]"
    }, {
      "left" : "case Token.BITOR:",
      "right" : "case Token.BITOR:",
      "info" : "SwitchCase[10449-10466]:SwitchCase[10471-10488]"
    }, {
      "left" : "case Token.BITXOR:",
      "right" : "case Token.BITXOR:",
      "info" : "SwitchCase[10473-10491]:SwitchCase[10495-10513]"
    }, {
      "left" : "case Token.NOT:",
      "right" : "case Token.NOT:",
      "info" : "SwitchCase[10558-10573]:SwitchCase[11035-11050]"
    }, {
      "left" : "case Token.NEG:",
      "right" : "case Token.NEG:",
      "info" : "SwitchCase[10580-10595]:SwitchCase[11057-11072]"
    }, {
      "left" : "return isValidDefineValue(val.getFirstChild(), defines);",
      "right" : "return isValidDefineValue(val.getFirstChild(), defines);",
      "info" : "ReturnStatement[10604-10660]:ReturnStatement[11103-11159]"
    }, {
      "left" : "case Token.NAME:",
      "right" : "case Token.NAME:",
      "info" : "SwitchCase[10737-10753]:SwitchCase[11236-11252]"
    }, {
      "left" : "case Token.GETPROP:",
      "right" : "case Token.GETPROP:",
      "info" : "SwitchCase[10760-10779]:SwitchCase[11259-11278]"
    }, {
      "left" : "if (val.isQualifiedName())",
      "right" : "if (val.isQualifiedName())",
      "info" : "IfStatement[10788-10885]:IfStatement[11287-11384]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10815-10885]:Block[11314-11384]"
    }, {
      "left" : "return defines.contains(val.getQualifiedName());",
      "right" : "return defines.contains(val.getQualifiedName());",
      "info" : "ReturnStatement[10827-10875]:ReturnStatement[11326-11374]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[10896-10909]:ReturnStatement[11395-11408]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[11019-11025]:Modifier[11518-11524]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[11026-11033]:PrimitiveType[11525-11532]"
    }, {
      "left" : "isEmptyBlock",
      "right" : "isEmptyBlock",
      "info" : "SimpleName[11034-11046]:SimpleName[11533-11545]"
    }, {
      "left" : "Node block",
      "right" : "Node block",
      "info" : "SingleVariableDeclaration[11047-11057]:SingleVariableDeclaration[11546-11556]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11059-11297]:Block[11558-11796]"
    }, {
      "left" : "if (block.getType() != Token.BLOCK)",
      "right" : "if (block.getType() != Token.BLOCK)",
      "info" : "IfStatement[11065-11128]:IfStatement[11564-11627]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11101-11128]:Block[11600-11627]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[11109-11122]:ReturnStatement[11608-11621]"
    }, {
      "left" : "for (Node n = block.getFirstChild(); n != null; n = n.getNext())",
      "right" : "for (Node n = block.getFirstChild(); n != null; n = n.getNext())",
      "info" : "ForStatement[11134-11276]:ForStatement[11633-11775]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11199-11276]:Block[11698-11775]"
    }, {
      "left" : "if (n.getType() != Token.EMPTY)",
      "right" : "if (n.getType() != Token.EMPTY)",
      "info" : "IfStatement[11207-11270]:IfStatement[11706-11769]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11239-11270]:Block[11738-11769]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[11249-11262]:ReturnStatement[11748-11761]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[11281-11293]:ReturnStatement[11780-11792]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[11301-11307]:Modifier[11800-11806]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[11308-11315]:PrimitiveType[11807-11814]"
    }, {
      "left" : "isSimpleOperator",
      "right" : "isSimpleOperator",
      "info" : "SimpleName[11316-11332]:SimpleName[11815-11831]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[11333-11339]:SingleVariableDeclaration[11832-11838]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11341-11392]:Block[11840-11891]"
    }, {
      "left" : "return isSimpleOperatorType(n.getType());",
      "right" : "return isSimpleOperatorType(n.getType());",
      "info" : "ReturnStatement[11347-11388]:ReturnStatement[11846-11887]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[11570-11576]:Modifier[12069-12075]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[11577-11584]:PrimitiveType[12076-12083]"
    }, {
      "left" : "isSimpleOperatorType",
      "right" : "isSimpleOperatorType",
      "info" : "SimpleName[11585-11605]:SimpleName[12084-12104]"
    }, {
      "left" : "int type",
      "right" : "int type",
      "info" : "SingleVariableDeclaration[11606-11614]:SingleVariableDeclaration[12105-12113]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11616-12373]:Block[12115-12872]"
    }, {
      "left" : "switch (type) {\n      case Token.ADD:\n      case Token.BITAND:\n      case Token.BITNOT:\n      case Token.BITOR:\n      case Token.BITXOR:\n      case Token.COMMA:\n      case Token.DIV:\n      case Token.EQ:\n      case Token.GE:\n      case Token.GETELEM:\n      case Token.GETPROP:\n      case Token.GT:\n      case Token.INSTANCEOF:\n      case Token.LE:\n      case Token.LSH:\n      case Token.LT:\n      case Token.MOD:\n      case Token.MUL:\n      case Token.NE:\n      case Token.NOT:\n      case Token.RSH:\n      case Token.SHEQ:\n      case Token.SHNE:\n      case Token.SUB:\n      case Token.TYPEOF:\n      case Token.VOID:\n      case Token.POS:\n      case Token.NEG:\n      case Token.URSH:\n        return true;\n\n      default:\n        return false;\n    }",
      "right" : "switch (type) {\n      case Token.ADD:\n      case Token.BITAND:\n      case Token.BITNOT:\n      case Token.BITOR:\n      case Token.BITXOR:\n      case Token.COMMA:\n      case Token.DIV:\n      case Token.EQ:\n      case Token.GE:\n      case Token.GETELEM:\n      case Token.GETPROP:\n      case Token.GT:\n      case Token.INSTANCEOF:\n      case Token.LE:\n      case Token.LSH:\n      case Token.LT:\n      case Token.MOD:\n      case Token.MUL:\n      case Token.NE:\n      case Token.NOT:\n      case Token.RSH:\n      case Token.SHEQ:\n      case Token.SHNE:\n      case Token.SUB:\n      case Token.TYPEOF:\n      case Token.VOID:\n      case Token.POS:\n      case Token.NEG:\n      case Token.URSH:\n        return true;\n\n      default:\n        return false;\n    }",
      "info" : "SwitchStatement[11622-12369]:SwitchStatement[12121-12868]"
    }, {
      "left" : "case Token.ADD:",
      "right" : "case Token.ADD:",
      "info" : "SwitchCase[11644-11659]:SwitchCase[12143-12158]"
    }, {
      "left" : "case Token.BITAND:",
      "right" : "case Token.BITAND:",
      "info" : "SwitchCase[11666-11684]:SwitchCase[12165-12183]"
    }, {
      "left" : "case Token.BITNOT:",
      "right" : "case Token.BITNOT:",
      "info" : "SwitchCase[11691-11709]:SwitchCase[12190-12208]"
    }, {
      "left" : "case Token.BITOR:",
      "right" : "case Token.BITOR:",
      "info" : "SwitchCase[11716-11733]:SwitchCase[12215-12232]"
    }, {
      "left" : "case Token.BITXOR:",
      "right" : "case Token.BITXOR:",
      "info" : "SwitchCase[11740-11758]:SwitchCase[12239-12257]"
    }, {
      "left" : "case Token.COMMA:",
      "right" : "case Token.COMMA:",
      "info" : "SwitchCase[11765-11782]:SwitchCase[12264-12281]"
    }, {
      "left" : "case Token.DIV:",
      "right" : "case Token.DIV:",
      "info" : "SwitchCase[11789-11804]:SwitchCase[12288-12303]"
    }, {
      "left" : "case Token.EQ:",
      "right" : "case Token.EQ:",
      "info" : "SwitchCase[11811-11825]:SwitchCase[12310-12324]"
    }, {
      "left" : "case Token.GE:",
      "right" : "case Token.GE:",
      "info" : "SwitchCase[11832-11846]:SwitchCase[12331-12345]"
    }, {
      "left" : "case Token.GETELEM:",
      "right" : "case Token.GETELEM:",
      "info" : "SwitchCase[11853-11872]:SwitchCase[12352-12371]"
    }, {
      "left" : "case Token.GETPROP:",
      "right" : "case Token.GETPROP:",
      "info" : "SwitchCase[11879-11898]:SwitchCase[12378-12397]"
    }, {
      "left" : "case Token.GT:",
      "right" : "case Token.GT:",
      "info" : "SwitchCase[11905-11919]:SwitchCase[12404-12418]"
    }, {
      "left" : "case Token.INSTANCEOF:",
      "right" : "case Token.INSTANCEOF:",
      "info" : "SwitchCase[11926-11948]:SwitchCase[12425-12447]"
    }, {
      "left" : "case Token.LE:",
      "right" : "case Token.LE:",
      "info" : "SwitchCase[11955-11969]:SwitchCase[12454-12468]"
    }, {
      "left" : "case Token.LSH:",
      "right" : "case Token.LSH:",
      "info" : "SwitchCase[11976-11991]:SwitchCase[12475-12490]"
    }, {
      "left" : "case Token.LT:",
      "right" : "case Token.LT:",
      "info" : "SwitchCase[11998-12012]:SwitchCase[12497-12511]"
    }, {
      "left" : "case Token.MOD:",
      "right" : "case Token.MOD:",
      "info" : "SwitchCase[12019-12034]:SwitchCase[12518-12533]"
    }, {
      "left" : "case Token.MUL:",
      "right" : "case Token.MUL:",
      "info" : "SwitchCase[12041-12056]:SwitchCase[12540-12555]"
    }, {
      "left" : "case Token.NE:",
      "right" : "case Token.NE:",
      "info" : "SwitchCase[12063-12077]:SwitchCase[12562-12576]"
    }, {
      "left" : "case Token.NOT:",
      "right" : "case Token.NOT:",
      "info" : "SwitchCase[12084-12099]:SwitchCase[12583-12598]"
    }, {
      "left" : "case Token.RSH:",
      "right" : "case Token.RSH:",
      "info" : "SwitchCase[12106-12121]:SwitchCase[12605-12620]"
    }, {
      "left" : "case Token.SHEQ:",
      "right" : "case Token.SHEQ:",
      "info" : "SwitchCase[12128-12144]:SwitchCase[12627-12643]"
    }, {
      "left" : "case Token.SHNE:",
      "right" : "case Token.SHNE:",
      "info" : "SwitchCase[12151-12167]:SwitchCase[12650-12666]"
    }, {
      "left" : "case Token.SUB:",
      "right" : "case Token.SUB:",
      "info" : "SwitchCase[12174-12189]:SwitchCase[12673-12688]"
    }, {
      "left" : "case Token.TYPEOF:",
      "right" : "case Token.TYPEOF:",
      "info" : "SwitchCase[12196-12214]:SwitchCase[12695-12713]"
    }, {
      "left" : "case Token.VOID:",
      "right" : "case Token.VOID:",
      "info" : "SwitchCase[12221-12237]:SwitchCase[12720-12736]"
    }, {
      "left" : "case Token.POS:",
      "right" : "case Token.POS:",
      "info" : "SwitchCase[12244-12259]:SwitchCase[12743-12758]"
    }, {
      "left" : "case Token.NEG:",
      "right" : "case Token.NEG:",
      "info" : "SwitchCase[12266-12281]:SwitchCase[12765-12780]"
    }, {
      "left" : "case Token.URSH:",
      "right" : "case Token.URSH:",
      "info" : "SwitchCase[12288-12304]:SwitchCase[12787-12803]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[12313-12325]:ReturnStatement[12812-12824]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[12333-12341]:SwitchCase[12832-12840]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[12350-12363]:ReturnStatement[12849-12862]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[12534-12540]:Modifier[13033-13039]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[12541-12547]:Modifier[13040-13046]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[12548-12552]:SimpleType[13047-13051]"
    }, {
      "left" : "newExpr",
      "right" : "newExpr",
      "info" : "SimpleName[12553-12560]:SimpleName[13052-13059]"
    }, {
      "left" : "Node child",
      "right" : "Node child",
      "info" : "SingleVariableDeclaration[12561-12571]:SingleVariableDeclaration[13060-13070]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12573-12683]:Block[13072-13182]"
    }, {
      "left" : "Node expr = new Node(Token.EXPR_RESULT, child)\n        .copyInformationFrom(child);",
      "right" : "Node expr = new Node(Token.EXPR_RESULT, child)\n        .copyInformationFrom(child);",
      "info" : "VariableDeclarationStatement[12579-12662]:VariableDeclarationStatement[13078-13161]"
    }, {
      "left" : "return expr;",
      "right" : "return expr;",
      "info" : "ReturnStatement[12667-12679]:ReturnStatement[13166-13178]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[12857-12863]:Modifier[13356-13362]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[12864-12871]:PrimitiveType[13363-13370]"
    }, {
      "left" : "mayEffectMutableState",
      "right" : "mayEffectMutableState",
      "info" : "SimpleName[12872-12893]:SimpleName[13371-13392]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[12894-12900]:SingleVariableDeclaration[13393-13399]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12902-12950]:Block[13401-13449]"
    }, {
      "left" : "return mayEffectMutableState(n, null);",
      "right" : "return mayEffectMutableState(n, null);",
      "info" : "ReturnStatement[12908-12946]:ReturnStatement[13407-13445]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[12954-12960]:Modifier[13453-13459]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[12961-12968]:PrimitiveType[13460-13467]"
    }, {
      "left" : "mayEffectMutableState",
      "right" : "mayEffectMutableState",
      "info" : "SimpleName[12969-12990]:SimpleName[13468-13489]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[12991-12997]:SingleVariableDeclaration[13490-13496]"
    }, {
      "left" : "AbstractCompiler compiler",
      "right" : "AbstractCompiler compiler",
      "info" : "SingleVariableDeclaration[12999-13024]:SingleVariableDeclaration[13498-13523]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13026-13088]:Block[13525-13587]"
    }, {
      "left" : "return checkForStateChangeHelper(n, true, compiler);",
      "right" : "return checkForStateChangeHelper(n, true, compiler);",
      "info" : "ReturnStatement[13032-13084]:ReturnStatement[13531-13583]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[13177-13183]:Modifier[13676-13682]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[13184-13191]:PrimitiveType[13683-13690]"
    }, {
      "left" : "mayHaveSideEffects",
      "right" : "mayHaveSideEffects",
      "info" : "SimpleName[13192-13210]:SimpleName[13691-13709]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[13211-13217]:SingleVariableDeclaration[13710-13716]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13219-13264]:Block[13718-13763]"
    }, {
      "left" : "return mayHaveSideEffects(n, null);",
      "right" : "return mayHaveSideEffects(n, null);",
      "info" : "ReturnStatement[13225-13260]:ReturnStatement[13724-13759]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[13268-13274]:Modifier[13767-13773]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[13275-13282]:PrimitiveType[13774-13781]"
    }, {
      "left" : "mayHaveSideEffects",
      "right" : "mayHaveSideEffects",
      "info" : "SimpleName[13283-13301]:SimpleName[13782-13800]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[13302-13308]:SingleVariableDeclaration[13801-13807]"
    }, {
      "left" : "AbstractCompiler compiler",
      "right" : "AbstractCompiler compiler",
      "info" : "SingleVariableDeclaration[13310-13335]:SingleVariableDeclaration[13809-13834]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13337-13400]:Block[13836-13899]"
    }, {
      "left" : "return checkForStateChangeHelper(n, false, compiler);",
      "right" : "return checkForStateChangeHelper(n, false, compiler);",
      "info" : "ReturnStatement[13343-13396]:ReturnStatement[13842-13895]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[13678-13685]:Modifier[14177-14184]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[13686-13692]:Modifier[14185-14191]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[13693-13700]:PrimitiveType[14192-14199]"
    }, {
      "left" : "checkForStateChangeHelper",
      "right" : "checkForStateChangeHelper",
      "info" : "SimpleName[13701-13726]:SimpleName[14200-14225]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[13734-13740]:SingleVariableDeclaration[14233-14239]"
    }, {
      "left" : "boolean checkForNewObjects",
      "right" : "boolean checkForNewObjects",
      "info" : "SingleVariableDeclaration[13742-13768]:SingleVariableDeclaration[14241-14267]"
    }, {
      "left" : "AbstractCompiler compiler",
      "right" : "AbstractCompiler compiler",
      "info" : "SingleVariableDeclaration[13770-13795]:SingleVariableDeclaration[14269-14294]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13797-17926]:Block[14296-18425]"
    }, {
      "left" : "switch (n.getType()) {\n      // other side-effect free statements and expressions\n      case Token.AND:\n      case Token.BLOCK:\n      case Token.EXPR_RESULT:\n      case Token.HOOK:\n      case Token.IF:\n      case Token.IN:\n      case Token.LP:\n      case Token.NUMBER:\n      case Token.OR:\n      case Token.THIS:\n      case Token.TRUE:\n      case Token.FALSE:\n      case Token.NULL:\n      case Token.STRING:\n      case Token.SWITCH:\n      case Token.TRY:\n      case Token.EMPTY:\n        break;\n\n      // Throws are by definition side effects\n      case Token.THROW:\n        return true;\n\n      case Token.OBJECTLIT:\n      case Token.ARRAYLIT:\n      case Token.REGEXP:\n        if (checkForNewObjects) {\n          return true;\n        }\n        break;\n\n      case Token.VAR:    // empty var statement (no declaration)\n      case Token.NAME:   // variable by itself\n        if (n.getFirstChild() != null) {\n          return true;\n        }\n        break;\n\n      case Token.FUNCTION:\n        // Function expressions don't have side-effects, but function\n        // declarations change the namespace. Either way, we don't need to\n        // check the children, since they aren't executed at declaration time.\n        return checkForNewObjects || !isFunctionExpression(n);\n\n      case Token.NEW:\n        if (checkForNewObjects) {\n          return true;\n        }\n\n        if (!constructorCallHasSideEffects(n)) {\n          // loop below will see if the constructor parameters have\n          // side-effects\n          break;\n        }\n        return true;\n\n      case Token.CALL:\n        // calls to functions that have no side effects have the no\n        // side effect property set.\n        if (!functionCallHasSideEffects(n, compiler)) {\n          // loop below will see if the function parameters have\n          // side-effects\n          break;\n        }\n        return true;\n\n      default:\n        if (isSimpleOperatorType(n.getType())) {\n          break;\n        }\n\n        if (isAssignmentOp(n)) {\n          Node assignTarget = n.getFirstChild();\n          if (isName(assignTarget)) {\n            return true;\n          }\n\n          // Assignments will have side effects if\n          // a) The RHS has side effects, or\n          // b) The LHS has side effects, or\n          // c) A name on the LHS will exist beyond the life of this statement.\n          if (checkForStateChangeHelper(\n                  n.getFirstChild(), checkForNewObjects, compiler) ||\n              checkForStateChangeHelper(\n                  n.getLastChild(), checkForNewObjects, compiler)) {\n            return true;\n          }\n\n          if (isGet(assignTarget)) {\n            // If the object being assigned to is a local object, don't\n            // consider this a side-effect as it can't be referenced\n            // elsewhere.  Don't do this recursively as the property might\n            // be an alias of another object, unlike a literal below.\n            Node current = assignTarget.getFirstChild();\n            if (evaluatesToLocalValue(current)) {\n              return false;\n            }\n\n            // A literal value as defined by \"isLiteralValue\" is guaranteed\n            // not to be an alias, or any components which are aliases of\n            // other objects.\n            // If the root object is a literal don't consider this a\n            // side-effect.\n            while (isGet(current)) {\n              current = current.getFirstChild();\n            }\n\n            return !isLiteralValue(current, true);\n          } else {\n            // TODO(johnlenz): remove this code and make this an exception. This\n            // is here only for legacy reasons, the AST is not valid but\n            // preserve existing behavior.\n            return !isLiteralValue(assignTarget, true);\n          }\n        }\n\n        return true;\n    }",
      "right" : "switch (n.getType()) {\n      // other side-effect free statements and expressions\n      case Token.AND:\n      case Token.BLOCK:\n      case Token.EXPR_RESULT:\n      case Token.HOOK:\n      case Token.IF:\n      case Token.IN:\n      case Token.LP:\n      case Token.NUMBER:\n      case Token.OR:\n      case Token.THIS:\n      case Token.TRUE:\n      case Token.FALSE:\n      case Token.NULL:\n      case Token.STRING:\n      case Token.SWITCH:\n      case Token.TRY:\n      case Token.EMPTY:\n        break;\n\n      // Throws are by definition side effects\n      case Token.THROW:\n        return true;\n\n      case Token.OBJECTLIT:\n      case Token.ARRAYLIT:\n      case Token.REGEXP:\n        if (checkForNewObjects) {\n          return true;\n        }\n        break;\n\n      case Token.VAR:    // empty var statement (no declaration)\n      case Token.NAME:   // variable by itself\n        if (n.getFirstChild() != null) {\n          return true;\n        }\n        break;\n\n      case Token.FUNCTION:\n        // Function expressions don't have side-effects, but function\n        // declarations change the namespace. Either way, we don't need to\n        // check the children, since they aren't executed at declaration time.\n        return checkForNewObjects || !isFunctionExpression(n);\n\n      case Token.NEW:\n        if (checkForNewObjects) {\n          return true;\n        }\n\n        if (!constructorCallHasSideEffects(n)) {\n          // loop below will see if the constructor parameters have\n          // side-effects\n          break;\n        }\n        return true;\n\n      case Token.CALL:\n        // calls to functions that have no side effects have the no\n        // side effect property set.\n        if (!functionCallHasSideEffects(n, compiler)) {\n          // loop below will see if the function parameters have\n          // side-effects\n          break;\n        }\n        return true;\n\n      default:\n        if (isSimpleOperatorType(n.getType())) {\n          break;\n        }\n\n        if (isAssignmentOp(n)) {\n          Node assignTarget = n.getFirstChild();\n          if (isName(assignTarget)) {\n            return true;\n          }\n\n          // Assignments will have side effects if\n          // a) The RHS has side effects, or\n          // b) The LHS has side effects, or\n          // c) A name on the LHS will exist beyond the life of this statement.\n          if (checkForStateChangeHelper(\n                  n.getFirstChild(), checkForNewObjects, compiler) ||\n              checkForStateChangeHelper(\n                  n.getLastChild(), checkForNewObjects, compiler)) {\n            return true;\n          }\n\n          if (isGet(assignTarget)) {\n            // If the object being assigned to is a local object, don't\n            // consider this a side-effect as it can't be referenced\n            // elsewhere.  Don't do this recursively as the property might\n            // be an alias of another object, unlike a literal below.\n            Node current = assignTarget.getFirstChild();\n            if (evaluatesToLocalValue(current)) {\n              return false;\n            }\n\n            // A literal value as defined by \"isLiteralValue\" is guaranteed\n            // not to be an alias, or any components which are aliases of\n            // other objects.\n            // If the root object is a literal don't consider this a\n            // side-effect.\n            while (isGet(current)) {\n              current = current.getFirstChild();\n            }\n\n            return !isLiteralValue(current, true);\n          } else {\n            // TODO(johnlenz): remove this code and make this an exception. This\n            // is here only for legacy reasons, the AST is not valid but\n            // preserve existing behavior.\n            return !isLiteralValue(assignTarget, true);\n          }\n        }\n\n        return true;\n    }",
      "info" : "SwitchStatement[13901-17728]:SwitchStatement[14400-18227]"
    }, {
      "left" : "case Token.AND:",
      "right" : "case Token.AND:",
      "info" : "SwitchCase[13989-14004]:SwitchCase[14488-14503]"
    }, {
      "left" : "case Token.BLOCK:",
      "right" : "case Token.BLOCK:",
      "info" : "SwitchCase[14011-14028]:SwitchCase[14510-14527]"
    }, {
      "left" : "case Token.EXPR_RESULT:",
      "right" : "case Token.EXPR_RESULT:",
      "info" : "SwitchCase[14035-14058]:SwitchCase[14534-14557]"
    }, {
      "left" : "case Token.HOOK:",
      "right" : "case Token.HOOK:",
      "info" : "SwitchCase[14065-14081]:SwitchCase[14564-14580]"
    }, {
      "left" : "case Token.IF:",
      "right" : "case Token.IF:",
      "info" : "SwitchCase[14088-14102]:SwitchCase[14587-14601]"
    }, {
      "left" : "case Token.IN:",
      "right" : "case Token.IN:",
      "info" : "SwitchCase[14109-14123]:SwitchCase[14608-14622]"
    }, {
      "left" : "case Token.LP:",
      "right" : "case Token.LP:",
      "info" : "SwitchCase[14130-14144]:SwitchCase[14629-14643]"
    }, {
      "left" : "case Token.NUMBER:",
      "right" : "case Token.NUMBER:",
      "info" : "SwitchCase[14151-14169]:SwitchCase[14650-14668]"
    }, {
      "left" : "case Token.OR:",
      "right" : "case Token.OR:",
      "info" : "SwitchCase[14176-14190]:SwitchCase[14675-14689]"
    }, {
      "left" : "case Token.THIS:",
      "right" : "case Token.THIS:",
      "info" : "SwitchCase[14197-14213]:SwitchCase[14696-14712]"
    }, {
      "left" : "case Token.TRUE:",
      "right" : "case Token.TRUE:",
      "info" : "SwitchCase[14220-14236]:SwitchCase[14719-14735]"
    }, {
      "left" : "case Token.FALSE:",
      "right" : "case Token.FALSE:",
      "info" : "SwitchCase[14243-14260]:SwitchCase[14742-14759]"
    }, {
      "left" : "case Token.NULL:",
      "right" : "case Token.NULL:",
      "info" : "SwitchCase[14267-14283]:SwitchCase[14766-14782]"
    }, {
      "left" : "case Token.STRING:",
      "right" : "case Token.STRING:",
      "info" : "SwitchCase[14290-14308]:SwitchCase[14789-14807]"
    }, {
      "left" : "case Token.SWITCH:",
      "right" : "case Token.SWITCH:",
      "info" : "SwitchCase[14315-14333]:SwitchCase[14814-14832]"
    }, {
      "left" : "case Token.TRY:",
      "right" : "case Token.TRY:",
      "info" : "SwitchCase[14340-14355]:SwitchCase[14839-14854]"
    }, {
      "left" : "case Token.EMPTY:",
      "right" : "case Token.EMPTY:",
      "info" : "SwitchCase[14362-14379]:SwitchCase[14861-14878]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[14388-14394]:BreakStatement[14887-14893]"
    }, {
      "left" : "case Token.THROW:",
      "right" : "case Token.THROW:",
      "info" : "SwitchCase[14449-14466]:SwitchCase[14948-14965]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[14475-14487]:ReturnStatement[14974-14986]"
    }, {
      "left" : "case Token.OBJECTLIT:",
      "right" : "case Token.OBJECTLIT:",
      "info" : "SwitchCase[14495-14516]:SwitchCase[14994-15015]"
    }, {
      "left" : "case Token.ARRAYLIT:",
      "right" : "case Token.ARRAYLIT:",
      "info" : "SwitchCase[14523-14543]:SwitchCase[15022-15042]"
    }, {
      "left" : "case Token.REGEXP:",
      "right" : "case Token.REGEXP:",
      "info" : "SwitchCase[14550-14568]:SwitchCase[15049-15067]"
    }, {
      "left" : "if (checkForNewObjects)",
      "right" : "if (checkForNewObjects)",
      "info" : "IfStatement[14577-14635]:IfStatement[15076-15134]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14601-14635]:Block[15100-15134]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[14613-14625]:ReturnStatement[15112-15124]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[14644-14650]:BreakStatement[15143-15149]"
    }, {
      "left" : "case Token.VAR:",
      "right" : "case Token.VAR:",
      "info" : "SwitchCase[14658-14673]:SwitchCase[15157-15172]"
    }, {
      "left" : "case Token.NAME:",
      "right" : "case Token.NAME:",
      "info" : "SwitchCase[14723-14739]:SwitchCase[15222-15238]"
    }, {
      "left" : "if (n.getFirstChild() != null)",
      "right" : "if (n.getFirstChild() != null)",
      "info" : "IfStatement[14772-14837]:IfStatement[15271-15336]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14803-14837]:Block[15302-15336]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[14815-14827]:ReturnStatement[15314-15326]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[14846-14852]:BreakStatement[15345-15351]"
    }, {
      "left" : "case Token.FUNCTION:",
      "right" : "case Token.FUNCTION:",
      "info" : "SwitchCase[14860-14880]:SwitchCase[15359-15379]"
    }, {
      "left" : "return checkForNewObjects || !isFunctionExpression(n);",
      "right" : "return checkForNewObjects || !isFunctionExpression(n);",
      "info" : "ReturnStatement[15113-15167]:ReturnStatement[15612-15666]"
    }, {
      "left" : "case Token.NEW:",
      "right" : "case Token.NEW:",
      "info" : "SwitchCase[15175-15190]:SwitchCase[15674-15689]"
    }, {
      "left" : "if (checkForNewObjects)",
      "right" : "if (checkForNewObjects)",
      "info" : "IfStatement[15199-15257]:IfStatement[15698-15756]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15223-15257]:Block[15722-15756]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[15235-15247]:ReturnStatement[15734-15746]"
    }, {
      "left" : "if (!constructorCallHasSideEffects(n))",
      "right" : "if (!constructorCallHasSideEffects(n))",
      "info" : "IfStatement[15267-15428]:IfStatement[15766-15927]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15306-15428]:Block[15805-15927]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[15412-15418]:BreakStatement[15911-15917]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[15437-15449]:ReturnStatement[15936-15948]"
    }, {
      "left" : "case Token.CALL:",
      "right" : "case Token.CALL:",
      "info" : "SwitchCase[15457-15473]:SwitchCase[15956-15972]"
    }, {
      "left" : "if (!functionCallHasSideEffects(n, compiler))",
      "right" : "if (!functionCallHasSideEffects(n, compiler))",
      "info" : "IfStatement[15587-15752]:IfStatement[16086-16251]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15633-15752]:Block[16132-16251]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[15736-15742]:BreakStatement[16235-16241]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[15761-15773]:ReturnStatement[16260-16272]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[15781-15789]:SwitchCase[16280-16288]"
    }, {
      "left" : "if (isSimpleOperatorType(n.getType()))",
      "right" : "if (isSimpleOperatorType(n.getType()))",
      "info" : "IfStatement[15798-15865]:IfStatement[16297-16364]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15837-15865]:Block[16336-16364]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[15849-15855]:BreakStatement[16348-16354]"
    }, {
      "left" : "if (isAssignmentOp(n))",
      "right" : "if (isAssignmentOp(n))",
      "info" : "IfStatement[15875-17700]:IfStatement[16374-18199]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15898-17700]:Block[16397-18199]"
    }, {
      "left" : "Node assignTarget = n.getFirstChild();",
      "right" : "Node assignTarget = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[15910-15948]:VariableDeclarationStatement[16409-16447]"
    }, {
      "left" : "if (isName(assignTarget))",
      "right" : "if (isName(assignTarget))",
      "info" : "IfStatement[15959-16023]:IfStatement[16458-16522]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15985-16023]:Block[16484-16522]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[15999-16011]:ReturnStatement[16498-16510]"
    }, {
      "left" : "if (checkForStateChangeHelper(\n                  n.getFirstChild(), checkForNewObjects, compiler) ||\n              checkForStateChangeHelper(\n                  n.getLastChild(), checkForNewObjects, compiler))",
      "right" : "if (checkForStateChangeHelper(\n                  n.getFirstChild(), checkForNewObjects, compiler) ||\n              checkForStateChangeHelper(\n                  n.getLastChild(), checkForNewObjects, compiler))",
      "info" : "IfStatement[16256-16503]:IfStatement[16755-17002]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16465-16503]:Block[16964-17002]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[16479-16491]:ReturnStatement[16978-16990]"
    }, {
      "left" : "if (isGet(assignTarget))",
      "right" : "if (isGet(assignTarget))",
      "info" : "IfStatement[16515-17690]:IfStatement[17014-18189]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16540-17418]:Block[17039-17917]"
    }, {
      "left" : "Node current = assignTarget.getFirstChild();",
      "right" : "Node current = assignTarget.getFirstChild();",
      "info" : "VariableDeclarationStatement[16840-16884]:VariableDeclarationStatement[17339-17383]"
    }, {
      "left" : "if (evaluatesToLocalValue(current))",
      "right" : "if (evaluatesToLocalValue(current))",
      "info" : "IfStatement[16897-16976]:IfStatement[17396-17475]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16933-16976]:Block[17432-17475]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[16949-16962]:ReturnStatement[17448-17461]"
    }, {
      "left" : "while (isGet(current))",
      "right" : "while (isGet(current))",
      "info" : "WhileStatement[17267-17354]:WhileStatement[17766-17853]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17290-17354]:Block[17789-17853]"
    }, {
      "left" : "current = current.getFirstChild();",
      "right" : "current = current.getFirstChild();",
      "info" : "ExpressionStatement[17306-17340]:ExpressionStatement[17805-17839]"
    }, {
      "left" : "return !isLiteralValue(current, true);",
      "right" : "return !isLiteralValue(current, true);",
      "info" : "ReturnStatement[17368-17406]:ReturnStatement[17867-17905]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17424-17690]:Block[17923-18189]"
    }, {
      "left" : "return !isLiteralValue(assignTarget, true);",
      "right" : "return !isLiteralValue(assignTarget, true);",
      "info" : "ReturnStatement[17635-17678]:ReturnStatement[18134-18177]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[17710-17722]:ReturnStatement[18209-18221]"
    }, {
      "left" : "for (Node c = n.getFirstChild(); c != null; c = c.getNext())",
      "right" : "for (Node c = n.getFirstChild(); c != null; c = c.getNext())",
      "info" : "ForStatement[17734-17903]:ForStatement[18233-18402]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17795-17903]:Block[18294-18402]"
    }, {
      "left" : "if (checkForStateChangeHelper(c, checkForNewObjects, compiler))",
      "right" : "if (checkForStateChangeHelper(c, checkForNewObjects, compiler))",
      "info" : "IfStatement[17803-17897]:IfStatement[18302-18396]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17867-17897]:Block[18366-18396]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[17877-17889]:ReturnStatement[18376-18388]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[17909-17922]:ReturnStatement[18408-18421]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[18044-18050]:Modifier[18543-18549]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[18051-18058]:PrimitiveType[18550-18557]"
    }, {
      "left" : "constructorCallHasSideEffects",
      "right" : "constructorCallHasSideEffects",
      "info" : "SimpleName[18059-18088]:SimpleName[18558-18587]"
    }, {
      "left" : "Node callNode",
      "right" : "Node callNode",
      "info" : "SingleVariableDeclaration[18089-18102]:SingleVariableDeclaration[18588-18601]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18104-18167]:Block[18603-18666]"
    }, {
      "left" : "return constructorCallHasSideEffects(callNode, null);",
      "right" : "return constructorCallHasSideEffects(callNode, null);",
      "info" : "ReturnStatement[18110-18163]:ReturnStatement[18609-18662]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[18171-18177]:Modifier[18670-18676]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[18178-18185]:PrimitiveType[18677-18684]"
    }, {
      "left" : "constructorCallHasSideEffects",
      "right" : "constructorCallHasSideEffects",
      "info" : "SimpleName[18186-18215]:SimpleName[18685-18714]"
    }, {
      "left" : "Node callNode",
      "right" : "Node callNode",
      "info" : "SingleVariableDeclaration[18223-18236]:SingleVariableDeclaration[18722-18735]"
    }, {
      "left" : "AbstractCompiler compiler",
      "right" : "AbstractCompiler compiler",
      "info" : "SingleVariableDeclaration[18238-18263]:SingleVariableDeclaration[18737-18762]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18265-18693]:Block[18764-19192]"
    }, {
      "left" : "Preconditions.checkArgument(\n        callNode.getType() == Token.NEW,\n        \"Expected NEW node, got \" + Token.name(callNode.getType()));",
      "right" : "Preconditions.checkArgument(\n        callNode.getType() == Token.NEW,\n        \"Expected NEW node, got \" + Token.name(callNode.getType()));",
      "info" : "ExpressionStatement[18271-18409]:ExpressionStatement[18770-18908]"
    }, {
      "left" : "if (callNode.isNoSideEffectsCall())",
      "right" : "if (callNode.isNoSideEffectsCall())",
      "info" : "IfStatement[18415-18478]:IfStatement[18914-18977]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18451-18478]:Block[18950-18977]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[18459-18472]:ReturnStatement[18958-18971]"
    }, {
      "left" : "Node nameNode = callNode.getFirstChild();",
      "right" : "Node nameNode = callNode.getFirstChild();",
      "info" : "VariableDeclarationStatement[18484-18525]:VariableDeclarationStatement[18983-19024]"
    }, {
      "left" : "if (nameNode.getType() == Token.NAME &&\n        CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))",
      "right" : "if (nameNode.getType() == Token.NAME &&\n        CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))",
      "info" : "IfStatement[18530-18671]:IfStatement[19029-19170]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18644-18671]:Block[19143-19170]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[18652-18665]:ReturnStatement[19151-19164]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[18677-18689]:ReturnStatement[19176-19188]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[19419-19425]:Modifier[19918-19924]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[19426-19433]:PrimitiveType[19925-19932]"
    }, {
      "left" : "functionCallHasSideEffects",
      "right" : "functionCallHasSideEffects",
      "info" : "SimpleName[19434-19460]:SimpleName[19933-19959]"
    }, {
      "left" : "Node callNode",
      "right" : "Node callNode",
      "info" : "SingleVariableDeclaration[19468-19481]:SingleVariableDeclaration[19967-19980]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19483-19543]:Block[19982-20042]"
    }, {
      "left" : "return functionCallHasSideEffects(callNode, null);",
      "right" : "return functionCallHasSideEffects(callNode, null);",
      "info" : "ReturnStatement[19489-19539]:ReturnStatement[19988-20038]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[19792-19798]:Modifier[20291-20297]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[19799-19806]:PrimitiveType[20298-20305]"
    }, {
      "left" : "functionCallHasSideEffects",
      "right" : "functionCallHasSideEffects",
      "info" : "SimpleName[19807-19833]:SimpleName[20306-20332]"
    }, {
      "left" : "Node callNode",
      "right" : "Node callNode",
      "info" : "SingleVariableDeclaration[19841-19854]:SingleVariableDeclaration[20340-20353]"
    }, {
      "left" : "@Nullable AbstractCompiler compiler",
      "right" : "@Nullable AbstractCompiler compiler",
      "info" : "SingleVariableDeclaration[19856-19891]:SingleVariableDeclaration[20355-20390]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19893-21518]:Block[20392-22017]"
    }, {
      "left" : "Preconditions.checkArgument(\n        callNode.getType() == Token.CALL,\n        \"Expected CALL node, got \" + Token.name(callNode.getType()));",
      "right" : "Preconditions.checkArgument(\n        callNode.getType() == Token.CALL,\n        \"Expected CALL node, got \" + Token.name(callNode.getType()));",
      "info" : "ExpressionStatement[19899-20039]:ExpressionStatement[20398-20538]"
    }, {
      "left" : "if (callNode.isNoSideEffectsCall())",
      "right" : "if (callNode.isNoSideEffectsCall())",
      "info" : "IfStatement[20045-20108]:IfStatement[20544-20607]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20081-20108]:Block[20580-20607]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[20089-20102]:ReturnStatement[20588-20601]"
    }, {
      "left" : "Node nameNode = callNode.getFirstChild();",
      "right" : "Node nameNode = callNode.getFirstChild();",
      "info" : "VariableDeclarationStatement[20114-20155]:VariableDeclarationStatement[20613-20654]"
    }, {
      "left" : "if (nameNode.getType() == Token.NAME)",
      "right" : "if (nameNode.getType() == Token.NAME)",
      "info" : "IfStatement[20209-21496]:IfStatement[20708-21995]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20247-20392]:Block[20746-20891]"
    }, {
      "left" : "String name = nameNode.getString();",
      "right" : "String name = nameNode.getString();",
      "info" : "VariableDeclarationStatement[20255-20290]:VariableDeclarationStatement[20754-20789]"
    }, {
      "left" : "if (BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(name))",
      "right" : "if (BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(name))",
      "info" : "IfStatement[20297-20386]:IfStatement[20796-20885]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20355-20386]:Block[20854-20885]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[20365-20378]:ReturnStatement[20864-20877]"
    }, {
      "left" : "if (nameNode.getType() == Token.GETPROP)",
      "right" : "if (nameNode.getType() == Token.GETPROP)",
      "info" : "IfStatement[20398-21496]:IfStatement[20897-21995]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20439-21496]:Block[20938-21995]"
    }, {
      "left" : "if (callNode.isOnlyModifiesThisCall()\n          && evaluatesToLocalValue(nameNode.getFirstChild()))",
      "right" : "if (callNode.isOnlyModifiesThisCall()\n          && evaluatesToLocalValue(nameNode.getFirstChild()))",
      "info" : "IfStatement[20447-20578]:IfStatement[20946-21077]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20547-20578]:Block[21046-21077]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[20557-20570]:ReturnStatement[21056-21069]"
    }, {
      "left" : "if (nameNode.getFirstChild().getType() == Token.NAME)",
      "right" : "if (nameNode.getFirstChild().getType() == Token.NAME)",
      "info" : "IfStatement[20651-20861]:IfStatement[21150-21360]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20705-20861]:Block[21204-21360]"
    }, {
      "left" : "String namespaceName = nameNode.getFirstChild().getString();",
      "right" : "String namespaceName = nameNode.getFirstChild().getString();",
      "info" : "VariableDeclarationStatement[20715-20775]:VariableDeclarationStatement[21214-21274]"
    }, {
      "left" : "if (namespaceName.equals(\"Math\"))",
      "right" : "if (namespaceName.equals(\"Math\"))",
      "info" : "IfStatement[20784-20853]:IfStatement[21283-21352]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20818-20853]:Block[21317-21352]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[20830-20843]:ReturnStatement[21329-21342]"
    }, {
      "left" : "if (compiler != null && !compiler.hasRegExpGlobalReferences())",
      "right" : "if (compiler != null && !compiler.hasRegExpGlobalReferences())",
      "info" : "IfStatement[20869-21490]:IfStatement[21368-21989]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20932-21490]:Block[21431-21989]"
    }, {
      "left" : "if (nameNode.getFirstChild().getType() == Token.REGEXP\n            && REGEXP_METHODS.contains(nameNode.getLastChild().getString()))",
      "right" : "if (nameNode.getFirstChild().getType() == Token.REGEXP\n            && REGEXP_METHODS.contains(nameNode.getLastChild().getString()))",
      "info" : "IfStatement[20942-21482]:IfStatement[21441-21981]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21074-21109]:Block[21573-21608]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[21086-21099]:ReturnStatement[21585-21598]"
    }, {
      "left" : "if (nameNode.getFirstChild().getType() == Token.STRING\n            && STRING_REGEXP_METHODS.contains(\n                nameNode.getLastChild().getString()))",
      "right" : "if (nameNode.getFirstChild().getType() == Token.STRING\n            && STRING_REGEXP_METHODS.contains(\n                nameNode.getLastChild().getString()))",
      "info" : "IfStatement[21115-21482]:IfStatement[21614-21981]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21271-21482]:Block[21770-21981]"
    }, {
      "left" : "Node param = nameNode.getNext();",
      "right" : "Node param = nameNode.getNext();",
      "info" : "VariableDeclarationStatement[21283-21315]:VariableDeclarationStatement[21782-21814]"
    }, {
      "left" : "if (param != null &&\n              (param.getType() == Token.STRING\n                  || param.getType() == Token.REGEXP))",
      "right" : "if (param != null &&\n              (param.getType() == Token.STRING\n                  || param.getType() == Token.REGEXP))",
      "info" : "IfStatement[21326-21472]:IfStatement[21825-21971]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[21459-21472]:ReturnStatement[21958-21971]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[21502-21514]:ReturnStatement[22001-22013]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[21584-21590]:Modifier[22083-22089]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[21591-21598]:PrimitiveType[22090-22097]"
    }, {
      "left" : "callHasLocalResult",
      "right" : "callHasLocalResult",
      "info" : "SimpleName[21599-21617]:SimpleName[22098-22116]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[21618-21624]:SingleVariableDeclaration[22117-22123]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21626-21755]:Block[22125-22254]"
    }, {
      "left" : "Preconditions.checkState(n.getType() == Token.CALL);",
      "right" : "Preconditions.checkState(n.getType() == Token.CALL);",
      "info" : "ExpressionStatement[21632-21684]:ExpressionStatement[22131-22183]"
    }, {
      "left" : "return (n.getSideEffectFlags() & Node.FLAG_LOCAL_RESULTS) > 0;",
      "right" : "return (n.getSideEffectFlags() & Node.FLAG_LOCAL_RESULTS) > 0;",
      "info" : "ReturnStatement[21689-21751]:ReturnStatement[22188-22250]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[22028-22034]:Modifier[22527-22533]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[22035-22042]:PrimitiveType[22534-22541]"
    }, {
      "left" : "nodeTypeMayHaveSideEffects",
      "right" : "nodeTypeMayHaveSideEffects",
      "info" : "SimpleName[22043-22069]:SimpleName[22542-22568]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[22070-22076]:SingleVariableDeclaration[22569-22575]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22078-22131]:Block[22577-22630]"
    }, {
      "left" : "return nodeTypeMayHaveSideEffects(n, null);",
      "right" : "return nodeTypeMayHaveSideEffects(n, null);",
      "info" : "ReturnStatement[22084-22127]:ReturnStatement[22583-22626]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[22135-22141]:Modifier[22634-22640]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[22142-22149]:PrimitiveType[22641-22648]"
    }, {
      "left" : "nodeTypeMayHaveSideEffects",
      "right" : "nodeTypeMayHaveSideEffects",
      "info" : "SimpleName[22150-22176]:SimpleName[22649-22675]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[22177-22183]:SingleVariableDeclaration[22676-22682]"
    }, {
      "left" : "AbstractCompiler compiler",
      "right" : "AbstractCompiler compiler",
      "info" : "SingleVariableDeclaration[22185-22210]:SingleVariableDeclaration[22684-22709]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22212-22723]:Block[22711-23222]"
    }, {
      "left" : "if (isAssignmentOp(n))",
      "right" : "if (isAssignmentOp(n))",
      "info" : "IfStatement[22218-22267]:IfStatement[22717-22766]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22241-22267]:Block[22740-22766]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[22249-22261]:ReturnStatement[22748-22760]"
    }, {
      "left" : "switch(n.getType()) {\n      case Token.DELPROP:\n      case Token.DEC:\n      case Token.INC:\n      case Token.THROW:\n        return true;\n      case Token.CALL:\n        return NodeUtil.functionCallHasSideEffects(n, compiler);\n      case Token.NEW:\n        return NodeUtil.constructorCallHasSideEffects(n, compiler);\n      case Token.NAME:\n        // A variable definition.\n        return n.hasChildren();\n      default:\n        return false;\n    }",
      "right" : "switch(n.getType()) {\n      case Token.DELPROP:\n      case Token.DEC:\n      case Token.INC:\n      case Token.THROW:\n        return true;\n      case Token.CALL:\n        return NodeUtil.functionCallHasSideEffects(n, compiler);\n      case Token.NEW:\n        return NodeUtil.constructorCallHasSideEffects(n, compiler);\n      case Token.NAME:\n        // A variable definition.\n        return n.hasChildren();\n      default:\n        return false;\n    }",
      "info" : "SwitchStatement[22273-22719]:SwitchStatement[22772-23218]"
    }, {
      "left" : "case Token.DELPROP:",
      "right" : "case Token.DELPROP:",
      "info" : "SwitchCase[22301-22320]:SwitchCase[22800-22819]"
    }, {
      "left" : "case Token.DEC:",
      "right" : "case Token.DEC:",
      "info" : "SwitchCase[22327-22342]:SwitchCase[22826-22841]"
    }, {
      "left" : "case Token.INC:",
      "right" : "case Token.INC:",
      "info" : "SwitchCase[22349-22364]:SwitchCase[22848-22863]"
    }, {
      "left" : "case Token.THROW:",
      "right" : "case Token.THROW:",
      "info" : "SwitchCase[22371-22388]:SwitchCase[22870-22887]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[22397-22409]:ReturnStatement[22896-22908]"
    }, {
      "left" : "case Token.CALL:",
      "right" : "case Token.CALL:",
      "info" : "SwitchCase[22416-22432]:SwitchCase[22915-22931]"
    }, {
      "left" : "return NodeUtil.functionCallHasSideEffects(n, compiler);",
      "right" : "return NodeUtil.functionCallHasSideEffects(n, compiler);",
      "info" : "ReturnStatement[22441-22497]:ReturnStatement[22940-22996]"
    }, {
      "left" : "case Token.NEW:",
      "right" : "case Token.NEW:",
      "info" : "SwitchCase[22504-22519]:SwitchCase[23003-23018]"
    }, {
      "left" : "return NodeUtil.constructorCallHasSideEffects(n, compiler);",
      "right" : "return NodeUtil.constructorCallHasSideEffects(n, compiler);",
      "info" : "ReturnStatement[22528-22587]:ReturnStatement[23027-23086]"
    }, {
      "left" : "case Token.NAME:",
      "right" : "case Token.NAME:",
      "info" : "SwitchCase[22594-22610]:SwitchCase[23093-23109]"
    }, {
      "left" : "return n.hasChildren();",
      "right" : "return n.hasChildren();",
      "info" : "ReturnStatement[22653-22676]:ReturnStatement[23152-23175]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[22683-22691]:SwitchCase[23182-23190]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[22700-22713]:ReturnStatement[23199-23212]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[22827-22833]:Modifier[23326-23332]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[22834-22841]:PrimitiveType[23333-23340]"
    }, {
      "left" : "canBeSideEffected",
      "right" : "canBeSideEffected",
      "info" : "SimpleName[22842-22859]:SimpleName[23341-23358]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[22860-22866]:SingleVariableDeclaration[23359-23365]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22868-22967]:Block[23367-23466]"
    }, {
      "left" : "Set<String> emptySet = Collections.emptySet();",
      "right" : "Set<String> emptySet = Collections.emptySet();",
      "info" : "VariableDeclarationStatement[22874-22920]:VariableDeclarationStatement[23373-23419]"
    }, {
      "left" : "return canBeSideEffected(n, emptySet);",
      "right" : "return canBeSideEffected(n, emptySet);",
      "info" : "ReturnStatement[22925-22963]:ReturnStatement[23424-23462]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[23218-23224]:Modifier[23717-23723]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[23225-23232]:PrimitiveType[23724-23731]"
    }, {
      "left" : "canBeSideEffected",
      "right" : "canBeSideEffected",
      "info" : "SimpleName[23233-23250]:SimpleName[23732-23749]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[23251-23257]:SingleVariableDeclaration[23750-23756]"
    }, {
      "left" : "Set<String> knownConstants",
      "right" : "Set<String> knownConstants",
      "info" : "SingleVariableDeclaration[23259-23285]:SingleVariableDeclaration[23758-23784]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23287-24306]:Block[23786-24805]"
    }, {
      "left" : "switch (n.getType()) {\n      case Token.CALL:\n      case Token.NEW:\n        // Function calls or constructor can reference changed values.\n        // TODO(johnlenz): Add some mechanism for determining that functions\n        // are unaffected by side effects.\n        return true;\n      case Token.NAME:\n        // Non-constant names values may have been changed.\n        return !isConstantName(n)\n            && !knownConstants.contains(n.getString());\n\n      // Properties on constant NAMEs can still be side-effected.\n      case Token.GETPROP:\n      case Token.GETELEM:\n        return true;\n\n      case Token.FUNCTION:\n        // Function expression are not changed by side-effects,\n        // and function declarations are not part of expressions.\n        Preconditions.checkState(isFunctionExpression(n));\n        return false;\n    }",
      "right" : "switch (n.getType()) {\n      case Token.CALL:\n      case Token.NEW:\n        // Function calls or constructor can reference changed values.\n        // TODO(johnlenz): Add some mechanism for determining that functions\n        // are unaffected by side effects.\n        return true;\n      case Token.NAME:\n        // Non-constant names values may have been changed.\n        return !isConstantName(n)\n            && !knownConstants.contains(n.getString());\n\n      // Properties on constant NAMEs can still be side-effected.\n      case Token.GETPROP:\n      case Token.GETELEM:\n        return true;\n\n      case Token.FUNCTION:\n        // Function expression are not changed by side-effects,\n        // and function declarations are not part of expressions.\n        Preconditions.checkState(isFunctionExpression(n));\n        return false;\n    }",
      "info" : "SwitchStatement[23293-24130]:SwitchStatement[23792-24629]"
    }, {
      "left" : "case Token.CALL:",
      "right" : "case Token.CALL:",
      "info" : "SwitchCase[23322-23338]:SwitchCase[23821-23837]"
    }, {
      "left" : "case Token.NEW:",
      "right" : "case Token.NEW:",
      "info" : "SwitchCase[23345-23360]:SwitchCase[23844-23859]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[23560-23572]:ReturnStatement[24059-24071]"
    }, {
      "left" : "case Token.NAME:",
      "right" : "case Token.NAME:",
      "info" : "SwitchCase[23579-23595]:SwitchCase[24078-24094]"
    }, {
      "left" : "return !isConstantName(n)\n            && !knownConstants.contains(n.getString());",
      "right" : "return !isConstantName(n)\n            && !knownConstants.contains(n.getString());",
      "info" : "ReturnStatement[23664-23745]:ReturnStatement[24163-24244]"
    }, {
      "left" : "case Token.GETPROP:",
      "right" : "case Token.GETPROP:",
      "info" : "SwitchCase[23819-23838]:SwitchCase[24318-24337]"
    }, {
      "left" : "case Token.GETELEM:",
      "right" : "case Token.GETELEM:",
      "info" : "SwitchCase[23845-23864]:SwitchCase[24344-24363]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[23873-23885]:ReturnStatement[24372-24384]"
    }, {
      "left" : "case Token.FUNCTION:",
      "right" : "case Token.FUNCTION:",
      "info" : "SwitchCase[23893-23913]:SwitchCase[24392-24412]"
    }, {
      "left" : "Preconditions.checkState(isFunctionExpression(n));",
      "right" : "Preconditions.checkState(isFunctionExpression(n));",
      "info" : "ExpressionStatement[24052-24102]:ExpressionStatement[24551-24601]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[24111-24124]:ReturnStatement[24610-24623]"
    }, {
      "left" : "for (Node c = n.getFirstChild(); c != null; c = c.getNext())",
      "right" : "for (Node c = n.getFirstChild(); c != null; c = c.getNext())",
      "info" : "ForStatement[24136-24283]:ForStatement[24635-24782]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24197-24283]:Block[24696-24782]"
    }, {
      "left" : "if (canBeSideEffected(c, knownConstants))",
      "right" : "if (canBeSideEffected(c, knownConstants))",
      "info" : "IfStatement[24205-24277]:IfStatement[24704-24776]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24247-24277]:Block[24746-24776]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[24257-24269]:ReturnStatement[24756-24768]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[24289-24302]:ReturnStatement[24788-24801]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[24743-24749]:Modifier[25242-25248]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[24750-24753]:PrimitiveType[25249-25252]"
    }, {
      "left" : "precedence",
      "right" : "precedence",
      "info" : "SimpleName[24754-24764]:SimpleName[25253-25263]"
    }, {
      "left" : "int type",
      "right" : "int type",
      "info" : "SingleVariableDeclaration[24765-24773]:SingleVariableDeclaration[25264-25272]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24775-26798]:Block[25274-27297]"
    }, {
      "left" : "switch (type) {\n      case Token.COMMA:  return 0;\n      case Token.ASSIGN_BITOR:\n      case Token.ASSIGN_BITXOR:\n      case Token.ASSIGN_BITAND:\n      case Token.ASSIGN_LSH:\n      case Token.ASSIGN_RSH:\n      case Token.ASSIGN_URSH:\n      case Token.ASSIGN_ADD:\n      case Token.ASSIGN_SUB:\n      case Token.ASSIGN_MUL:\n      case Token.ASSIGN_DIV:\n      case Token.ASSIGN_MOD:\n      case Token.ASSIGN: return 1;\n      case Token.HOOK:   return 2;  // ?: operator\n      case Token.OR:     return 3;\n      case Token.AND:    return 4;\n      case Token.BITOR:  return 5;\n      case Token.BITXOR: return 6;\n      case Token.BITAND: return 7;\n      case Token.EQ:\n      case Token.NE:\n      case Token.SHEQ:\n      case Token.SHNE:   return 8;\n      case Token.LT:\n      case Token.GT:\n      case Token.LE:\n      case Token.GE:\n      case Token.INSTANCEOF:\n      case Token.IN:     return 9;\n      case Token.LSH:\n      case Token.RSH:\n      case Token.URSH:   return 10;\n      case Token.SUB:\n      case Token.ADD:    return 11;\n      case Token.MUL:\n      case Token.MOD:\n      case Token.DIV:    return 12;\n      case Token.INC:\n      case Token.DEC:\n      case Token.NEW:\n      case Token.DELPROP:\n      case Token.TYPEOF:\n      case Token.VOID:\n      case Token.NOT:\n      case Token.BITNOT:\n      case Token.POS:\n      case Token.NEG:    return 13;\n\n      case Token.ARRAYLIT:\n      case Token.CALL:\n      case Token.EMPTY:\n      case Token.FALSE:\n      case Token.FUNCTION:\n      case Token.GETELEM:\n      case Token.GETPROP:\n      case Token.GET_REF:\n      case Token.IF:\n      case Token.LP:\n      case Token.NAME:\n      case Token.NULL:\n      case Token.NUMBER:\n      case Token.OBJECTLIT:\n      case Token.REGEXP:\n      case Token.RETURN:\n      case Token.STRING:\n      case Token.THIS:\n      case Token.TRUE:\n        return 15;\n\n      default: throw new Error(\"Unknown precedence for \" +\n                               Node.tokenToName(type) +\n                               \" (type \" + type + \")\");\n    }",
      "right" : "switch (type) {\n      case Token.COMMA:  return 0;\n      case Token.ASSIGN_BITOR:\n      case Token.ASSIGN_BITXOR:\n      case Token.ASSIGN_BITAND:\n      case Token.ASSIGN_LSH:\n      case Token.ASSIGN_RSH:\n      case Token.ASSIGN_URSH:\n      case Token.ASSIGN_ADD:\n      case Token.ASSIGN_SUB:\n      case Token.ASSIGN_MUL:\n      case Token.ASSIGN_DIV:\n      case Token.ASSIGN_MOD:\n      case Token.ASSIGN: return 1;\n      case Token.HOOK:   return 2;  // ?: operator\n      case Token.OR:     return 3;\n      case Token.AND:    return 4;\n      case Token.BITOR:  return 5;\n      case Token.BITXOR: return 6;\n      case Token.BITAND: return 7;\n      case Token.EQ:\n      case Token.NE:\n      case Token.SHEQ:\n      case Token.SHNE:   return 8;\n      case Token.LT:\n      case Token.GT:\n      case Token.LE:\n      case Token.GE:\n      case Token.INSTANCEOF:\n      case Token.IN:     return 9;\n      case Token.LSH:\n      case Token.RSH:\n      case Token.URSH:   return 10;\n      case Token.SUB:\n      case Token.ADD:    return 11;\n      case Token.MUL:\n      case Token.MOD:\n      case Token.DIV:    return 12;\n      case Token.INC:\n      case Token.DEC:\n      case Token.NEW:\n      case Token.DELPROP:\n      case Token.TYPEOF:\n      case Token.VOID:\n      case Token.NOT:\n      case Token.BITNOT:\n      case Token.POS:\n      case Token.NEG:    return 13;\n\n      case Token.ARRAYLIT:\n      case Token.CALL:\n      case Token.EMPTY:\n      case Token.FALSE:\n      case Token.FUNCTION:\n      case Token.GETELEM:\n      case Token.GETPROP:\n      case Token.GET_REF:\n      case Token.IF:\n      case Token.LP:\n      case Token.NAME:\n      case Token.NULL:\n      case Token.NUMBER:\n      case Token.OBJECTLIT:\n      case Token.REGEXP:\n      case Token.RETURN:\n      case Token.STRING:\n      case Token.THIS:\n      case Token.TRUE:\n        return 15;\n\n      default: throw new Error(\"Unknown precedence for \" +\n                               Node.tokenToName(type) +\n                               \" (type \" + type + \")\");\n    }",
      "info" : "SwitchStatement[24781-26794]:SwitchStatement[25280-27293]"
    }, {
      "left" : "case Token.COMMA:",
      "right" : "case Token.COMMA:",
      "info" : "SwitchCase[24803-24820]:SwitchCase[25302-25319]"
    }, {
      "left" : "return 0;",
      "right" : "return 0;",
      "info" : "ReturnStatement[24822-24831]:ReturnStatement[25321-25330]"
    }, {
      "left" : "case Token.ASSIGN_BITOR:",
      "right" : "case Token.ASSIGN_BITOR:",
      "info" : "SwitchCase[24838-24862]:SwitchCase[25337-25361]"
    }, {
      "left" : "case Token.ASSIGN_BITXOR:",
      "right" : "case Token.ASSIGN_BITXOR:",
      "info" : "SwitchCase[24869-24894]:SwitchCase[25368-25393]"
    }, {
      "left" : "case Token.ASSIGN_BITAND:",
      "right" : "case Token.ASSIGN_BITAND:",
      "info" : "SwitchCase[24901-24926]:SwitchCase[25400-25425]"
    }, {
      "left" : "case Token.ASSIGN_LSH:",
      "right" : "case Token.ASSIGN_LSH:",
      "info" : "SwitchCase[24933-24955]:SwitchCase[25432-25454]"
    }, {
      "left" : "case Token.ASSIGN_RSH:",
      "right" : "case Token.ASSIGN_RSH:",
      "info" : "SwitchCase[24962-24984]:SwitchCase[25461-25483]"
    }, {
      "left" : "case Token.ASSIGN_URSH:",
      "right" : "case Token.ASSIGN_URSH:",
      "info" : "SwitchCase[24991-25014]:SwitchCase[25490-25513]"
    }, {
      "left" : "case Token.ASSIGN_ADD:",
      "right" : "case Token.ASSIGN_ADD:",
      "info" : "SwitchCase[25021-25043]:SwitchCase[25520-25542]"
    }, {
      "left" : "case Token.ASSIGN_SUB:",
      "right" : "case Token.ASSIGN_SUB:",
      "info" : "SwitchCase[25050-25072]:SwitchCase[25549-25571]"
    }, {
      "left" : "case Token.ASSIGN_MUL:",
      "right" : "case Token.ASSIGN_MUL:",
      "info" : "SwitchCase[25079-25101]:SwitchCase[25578-25600]"
    }, {
      "left" : "case Token.ASSIGN_DIV:",
      "right" : "case Token.ASSIGN_DIV:",
      "info" : "SwitchCase[25108-25130]:SwitchCase[25607-25629]"
    }, {
      "left" : "case Token.ASSIGN_MOD:",
      "right" : "case Token.ASSIGN_MOD:",
      "info" : "SwitchCase[25137-25159]:SwitchCase[25636-25658]"
    }, {
      "left" : "case Token.ASSIGN:",
      "right" : "case Token.ASSIGN:",
      "info" : "SwitchCase[25166-25184]:SwitchCase[25665-25683]"
    }, {
      "left" : "return 1;",
      "right" : "return 1;",
      "info" : "ReturnStatement[25185-25194]:ReturnStatement[25684-25693]"
    }, {
      "left" : "case Token.HOOK:",
      "right" : "case Token.HOOK:",
      "info" : "SwitchCase[25201-25217]:SwitchCase[25700-25716]"
    }, {
      "left" : "return 2;",
      "right" : "return 2;",
      "info" : "ReturnStatement[25220-25229]:ReturnStatement[25719-25728]"
    }, {
      "left" : "case Token.OR:",
      "right" : "case Token.OR:",
      "info" : "SwitchCase[25252-25266]:SwitchCase[25751-25765]"
    }, {
      "left" : "return 3;",
      "right" : "return 3;",
      "info" : "ReturnStatement[25271-25280]:ReturnStatement[25770-25779]"
    }, {
      "left" : "case Token.AND:",
      "right" : "case Token.AND:",
      "info" : "SwitchCase[25287-25302]:SwitchCase[25786-25801]"
    }, {
      "left" : "return 4;",
      "right" : "return 4;",
      "info" : "ReturnStatement[25306-25315]:ReturnStatement[25805-25814]"
    }, {
      "left" : "case Token.BITOR:",
      "right" : "case Token.BITOR:",
      "info" : "SwitchCase[25322-25339]:SwitchCase[25821-25838]"
    }, {
      "left" : "return 5;",
      "right" : "return 5;",
      "info" : "ReturnStatement[25341-25350]:ReturnStatement[25840-25849]"
    }, {
      "left" : "case Token.BITXOR:",
      "right" : "case Token.BITXOR:",
      "info" : "SwitchCase[25357-25375]:SwitchCase[25856-25874]"
    }, {
      "left" : "return 6;",
      "right" : "return 6;",
      "info" : "ReturnStatement[25376-25385]:ReturnStatement[25875-25884]"
    }, {
      "left" : "case Token.BITAND:",
      "right" : "case Token.BITAND:",
      "info" : "SwitchCase[25392-25410]:SwitchCase[25891-25909]"
    }, {
      "left" : "return 7;",
      "right" : "return 7;",
      "info" : "ReturnStatement[25411-25420]:ReturnStatement[25910-25919]"
    }, {
      "left" : "case Token.EQ:",
      "right" : "case Token.EQ:",
      "info" : "SwitchCase[25427-25441]:SwitchCase[25926-25940]"
    }, {
      "left" : "case Token.NE:",
      "right" : "case Token.NE:",
      "info" : "SwitchCase[25448-25462]:SwitchCase[25947-25961]"
    }, {
      "left" : "case Token.SHEQ:",
      "right" : "case Token.SHEQ:",
      "info" : "SwitchCase[25469-25485]:SwitchCase[25968-25984]"
    }, {
      "left" : "case Token.SHNE:",
      "right" : "case Token.SHNE:",
      "info" : "SwitchCase[25492-25508]:SwitchCase[25991-26007]"
    }, {
      "left" : "return 8;",
      "right" : "return 8;",
      "info" : "ReturnStatement[25511-25520]:ReturnStatement[26010-26019]"
    }, {
      "left" : "case Token.LT:",
      "right" : "case Token.LT:",
      "info" : "SwitchCase[25527-25541]:SwitchCase[26026-26040]"
    }, {
      "left" : "case Token.GT:",
      "right" : "case Token.GT:",
      "info" : "SwitchCase[25548-25562]:SwitchCase[26047-26061]"
    }, {
      "left" : "case Token.LE:",
      "right" : "case Token.LE:",
      "info" : "SwitchCase[25569-25583]:SwitchCase[26068-26082]"
    }, {
      "left" : "case Token.GE:",
      "right" : "case Token.GE:",
      "info" : "SwitchCase[25590-25604]:SwitchCase[26089-26103]"
    }, {
      "left" : "case Token.INSTANCEOF:",
      "right" : "case Token.INSTANCEOF:",
      "info" : "SwitchCase[25611-25633]:SwitchCase[26110-26132]"
    }, {
      "left" : "case Token.IN:",
      "right" : "case Token.IN:",
      "info" : "SwitchCase[25640-25654]:SwitchCase[26139-26153]"
    }, {
      "left" : "return 9;",
      "right" : "return 9;",
      "info" : "ReturnStatement[25659-25668]:ReturnStatement[26158-26167]"
    }, {
      "left" : "case Token.LSH:",
      "right" : "case Token.LSH:",
      "info" : "SwitchCase[25675-25690]:SwitchCase[26174-26189]"
    }, {
      "left" : "case Token.RSH:",
      "right" : "case Token.RSH:",
      "info" : "SwitchCase[25697-25712]:SwitchCase[26196-26211]"
    }, {
      "left" : "case Token.URSH:",
      "right" : "case Token.URSH:",
      "info" : "SwitchCase[25719-25735]:SwitchCase[26218-26234]"
    }, {
      "left" : "return 10;",
      "right" : "return 10;",
      "info" : "ReturnStatement[25738-25748]:ReturnStatement[26237-26247]"
    }, {
      "left" : "case Token.SUB:",
      "right" : "case Token.SUB:",
      "info" : "SwitchCase[25755-25770]:SwitchCase[26254-26269]"
    }, {
      "left" : "case Token.ADD:",
      "right" : "case Token.ADD:",
      "info" : "SwitchCase[25777-25792]:SwitchCase[26276-26291]"
    }, {
      "left" : "return 11;",
      "right" : "return 11;",
      "info" : "ReturnStatement[25796-25806]:ReturnStatement[26295-26305]"
    }, {
      "left" : "case Token.MUL:",
      "right" : "case Token.MUL:",
      "info" : "SwitchCase[25813-25828]:SwitchCase[26312-26327]"
    }, {
      "left" : "case Token.MOD:",
      "right" : "case Token.MOD:",
      "info" : "SwitchCase[25835-25850]:SwitchCase[26334-26349]"
    }, {
      "left" : "case Token.DIV:",
      "right" : "case Token.DIV:",
      "info" : "SwitchCase[25857-25872]:SwitchCase[26356-26371]"
    }, {
      "left" : "return 12;",
      "right" : "return 12;",
      "info" : "ReturnStatement[25876-25886]:ReturnStatement[26375-26385]"
    }, {
      "left" : "case Token.INC:",
      "right" : "case Token.INC:",
      "info" : "SwitchCase[25893-25908]:SwitchCase[26392-26407]"
    }, {
      "left" : "case Token.DEC:",
      "right" : "case Token.DEC:",
      "info" : "SwitchCase[25915-25930]:SwitchCase[26414-26429]"
    }, {
      "left" : "case Token.NEW:",
      "right" : "case Token.NEW:",
      "info" : "SwitchCase[25937-25952]:SwitchCase[26436-26451]"
    }, {
      "left" : "case Token.DELPROP:",
      "right" : "case Token.DELPROP:",
      "info" : "SwitchCase[25959-25978]:SwitchCase[26458-26477]"
    }, {
      "left" : "case Token.TYPEOF:",
      "right" : "case Token.TYPEOF:",
      "info" : "SwitchCase[25985-26003]:SwitchCase[26484-26502]"
    }, {
      "left" : "case Token.VOID:",
      "right" : "case Token.VOID:",
      "info" : "SwitchCase[26010-26026]:SwitchCase[26509-26525]"
    }, {
      "left" : "case Token.NOT:",
      "right" : "case Token.NOT:",
      "info" : "SwitchCase[26033-26048]:SwitchCase[26532-26547]"
    }, {
      "left" : "case Token.BITNOT:",
      "right" : "case Token.BITNOT:",
      "info" : "SwitchCase[26055-26073]:SwitchCase[26554-26572]"
    }, {
      "left" : "case Token.POS:",
      "right" : "case Token.POS:",
      "info" : "SwitchCase[26080-26095]:SwitchCase[26579-26594]"
    }, {
      "left" : "case Token.NEG:",
      "right" : "case Token.NEG:",
      "info" : "SwitchCase[26102-26117]:SwitchCase[26601-26616]"
    }, {
      "left" : "return 13;",
      "right" : "return 13;",
      "info" : "ReturnStatement[26121-26131]:ReturnStatement[26620-26630]"
    }, {
      "left" : "case Token.ARRAYLIT:",
      "right" : "case Token.ARRAYLIT:",
      "info" : "SwitchCase[26139-26159]:SwitchCase[26638-26658]"
    }, {
      "left" : "case Token.CALL:",
      "right" : "case Token.CALL:",
      "info" : "SwitchCase[26166-26182]:SwitchCase[26665-26681]"
    }, {
      "left" : "case Token.EMPTY:",
      "right" : "case Token.EMPTY:",
      "info" : "SwitchCase[26189-26206]:SwitchCase[26688-26705]"
    }, {
      "left" : "case Token.FALSE:",
      "right" : "case Token.FALSE:",
      "info" : "SwitchCase[26213-26230]:SwitchCase[26712-26729]"
    }, {
      "left" : "case Token.FUNCTION:",
      "right" : "case Token.FUNCTION:",
      "info" : "SwitchCase[26237-26257]:SwitchCase[26736-26756]"
    }, {
      "left" : "case Token.GETELEM:",
      "right" : "case Token.GETELEM:",
      "info" : "SwitchCase[26264-26283]:SwitchCase[26763-26782]"
    }, {
      "left" : "case Token.GETPROP:",
      "right" : "case Token.GETPROP:",
      "info" : "SwitchCase[26290-26309]:SwitchCase[26789-26808]"
    }, {
      "left" : "case Token.GET_REF:",
      "right" : "case Token.GET_REF:",
      "info" : "SwitchCase[26316-26335]:SwitchCase[26815-26834]"
    }, {
      "left" : "case Token.IF:",
      "right" : "case Token.IF:",
      "info" : "SwitchCase[26342-26356]:SwitchCase[26841-26855]"
    }, {
      "left" : "case Token.LP:",
      "right" : "case Token.LP:",
      "info" : "SwitchCase[26363-26377]:SwitchCase[26862-26876]"
    }, {
      "left" : "case Token.NAME:",
      "right" : "case Token.NAME:",
      "info" : "SwitchCase[26384-26400]:SwitchCase[26883-26899]"
    }, {
      "left" : "case Token.NULL:",
      "right" : "case Token.NULL:",
      "info" : "SwitchCase[26407-26423]:SwitchCase[26906-26922]"
    }, {
      "left" : "case Token.NUMBER:",
      "right" : "case Token.NUMBER:",
      "info" : "SwitchCase[26430-26448]:SwitchCase[26929-26947]"
    }, {
      "left" : "case Token.OBJECTLIT:",
      "right" : "case Token.OBJECTLIT:",
      "info" : "SwitchCase[26455-26476]:SwitchCase[26954-26975]"
    }, {
      "left" : "case Token.REGEXP:",
      "right" : "case Token.REGEXP:",
      "info" : "SwitchCase[26483-26501]:SwitchCase[26982-27000]"
    }, {
      "left" : "case Token.RETURN:",
      "right" : "case Token.RETURN:",
      "info" : "SwitchCase[26508-26526]:SwitchCase[27007-27025]"
    }, {
      "left" : "case Token.STRING:",
      "right" : "case Token.STRING:",
      "info" : "SwitchCase[26533-26551]:SwitchCase[27032-27050]"
    }, {
      "left" : "case Token.THIS:",
      "right" : "case Token.THIS:",
      "info" : "SwitchCase[26558-26574]:SwitchCase[27057-27073]"
    }, {
      "left" : "case Token.TRUE:",
      "right" : "case Token.TRUE:",
      "info" : "SwitchCase[26581-26597]:SwitchCase[27080-27096]"
    }, {
      "left" : "return 15;",
      "right" : "return 15;",
      "info" : "ReturnStatement[26606-26616]:ReturnStatement[27105-27115]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[26624-26632]:SwitchCase[27123-27131]"
    }, {
      "left" : "throw new Error(\"Unknown precedence for \" +\n                               Node.tokenToName(type) +\n                               \" (type \" + type + \")\");",
      "right" : "throw new Error(\"Unknown precedence for \" +\n                               Node.tokenToName(type) +\n                               \" (type \" + type + \")\");",
      "info" : "ThrowStatement[26633-26788]:ThrowStatement[27132-27287]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[27028-27034]:Modifier[27527-27533]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[27035-27042]:PrimitiveType[27534-27541]"
    }, {
      "left" : "isAssociative",
      "right" : "isAssociative",
      "info" : "SimpleName[27043-27056]:SimpleName[27542-27555]"
    }, {
      "left" : "int type",
      "right" : "int type",
      "info" : "SingleVariableDeclaration[27057-27065]:SingleVariableDeclaration[27556-27564]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27067-27270]:Block[27566-27769]"
    }, {
      "left" : "switch (type) {\n      case Token.MUL:\n      case Token.AND:\n      case Token.OR:\n      case Token.BITOR:\n      case Token.BITAND:\n        return true;\n      default:\n        return false;\n    }",
      "right" : "switch (type) {\n      case Token.MUL:\n      case Token.AND:\n      case Token.OR:\n      case Token.BITOR:\n      case Token.BITAND:\n        return true;\n      default:\n        return false;\n    }",
      "info" : "SwitchStatement[27073-27266]:SwitchStatement[27572-27765]"
    }, {
      "left" : "case Token.MUL:",
      "right" : "case Token.MUL:",
      "info" : "SwitchCase[27095-27110]:SwitchCase[27594-27609]"
    }, {
      "left" : "case Token.AND:",
      "right" : "case Token.AND:",
      "info" : "SwitchCase[27117-27132]:SwitchCase[27616-27631]"
    }, {
      "left" : "case Token.OR:",
      "right" : "case Token.OR:",
      "info" : "SwitchCase[27139-27153]:SwitchCase[27638-27652]"
    }, {
      "left" : "case Token.BITOR:",
      "right" : "case Token.BITOR:",
      "info" : "SwitchCase[27160-27177]:SwitchCase[27659-27676]"
    }, {
      "left" : "case Token.BITAND:",
      "right" : "case Token.BITAND:",
      "info" : "SwitchCase[27184-27202]:SwitchCase[27683-27701]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[27211-27223]:ReturnStatement[27710-27722]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[27230-27238]:SwitchCase[27729-27737]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[27247-27260]:ReturnStatement[27746-27759]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[27274-27280]:Modifier[27773-27779]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[27281-27288]:PrimitiveType[27780-27787]"
    }, {
      "left" : "isAssignmentOp",
      "right" : "isAssignmentOp",
      "info" : "SimpleName[27289-27303]:SimpleName[27788-27802]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[27304-27310]:SingleVariableDeclaration[27803-27809]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27312-27741]:Block[27811-28240]"
    }, {
      "left" : "switch (n.getType()){\n      case Token.ASSIGN:\n      case Token.ASSIGN_BITOR:\n      case Token.ASSIGN_BITXOR:\n      case Token.ASSIGN_BITAND:\n      case Token.ASSIGN_LSH:\n      case Token.ASSIGN_RSH:\n      case Token.ASSIGN_URSH:\n      case Token.ASSIGN_ADD:\n      case Token.ASSIGN_SUB:\n      case Token.ASSIGN_MUL:\n      case Token.ASSIGN_DIV:\n      case Token.ASSIGN_MOD:\n        return true;\n    }",
      "right" : "switch (n.getType()){\n      case Token.ASSIGN:\n      case Token.ASSIGN_BITOR:\n      case Token.ASSIGN_BITXOR:\n      case Token.ASSIGN_BITAND:\n      case Token.ASSIGN_LSH:\n      case Token.ASSIGN_RSH:\n      case Token.ASSIGN_URSH:\n      case Token.ASSIGN_ADD:\n      case Token.ASSIGN_SUB:\n      case Token.ASSIGN_MUL:\n      case Token.ASSIGN_DIV:\n      case Token.ASSIGN_MOD:\n        return true;\n    }",
      "info" : "SwitchStatement[27318-27719]:SwitchStatement[27817-28218]"
    }, {
      "left" : "case Token.ASSIGN:",
      "right" : "case Token.ASSIGN:",
      "info" : "SwitchCase[27346-27364]:SwitchCase[27845-27863]"
    }, {
      "left" : "case Token.ASSIGN_BITOR:",
      "right" : "case Token.ASSIGN_BITOR:",
      "info" : "SwitchCase[27371-27395]:SwitchCase[27870-27894]"
    }, {
      "left" : "case Token.ASSIGN_BITXOR:",
      "right" : "case Token.ASSIGN_BITXOR:",
      "info" : "SwitchCase[27402-27427]:SwitchCase[27901-27926]"
    }, {
      "left" : "case Token.ASSIGN_BITAND:",
      "right" : "case Token.ASSIGN_BITAND:",
      "info" : "SwitchCase[27434-27459]:SwitchCase[27933-27958]"
    }, {
      "left" : "case Token.ASSIGN_LSH:",
      "right" : "case Token.ASSIGN_LSH:",
      "info" : "SwitchCase[27466-27488]:SwitchCase[27965-27987]"
    }, {
      "left" : "case Token.ASSIGN_RSH:",
      "right" : "case Token.ASSIGN_RSH:",
      "info" : "SwitchCase[27495-27517]:SwitchCase[27994-28016]"
    }, {
      "left" : "case Token.ASSIGN_URSH:",
      "right" : "case Token.ASSIGN_URSH:",
      "info" : "SwitchCase[27524-27547]:SwitchCase[28023-28046]"
    }, {
      "left" : "case Token.ASSIGN_ADD:",
      "right" : "case Token.ASSIGN_ADD:",
      "info" : "SwitchCase[27554-27576]:SwitchCase[28053-28075]"
    }, {
      "left" : "case Token.ASSIGN_SUB:",
      "right" : "case Token.ASSIGN_SUB:",
      "info" : "SwitchCase[27583-27605]:SwitchCase[28082-28104]"
    }, {
      "left" : "case Token.ASSIGN_MUL:",
      "right" : "case Token.ASSIGN_MUL:",
      "info" : "SwitchCase[27612-27634]:SwitchCase[28111-28133]"
    }, {
      "left" : "case Token.ASSIGN_DIV:",
      "right" : "case Token.ASSIGN_DIV:",
      "info" : "SwitchCase[27641-27663]:SwitchCase[28140-28162]"
    }, {
      "left" : "case Token.ASSIGN_MOD:",
      "right" : "case Token.ASSIGN_MOD:",
      "info" : "SwitchCase[27670-27692]:SwitchCase[28169-28191]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[27701-27713]:ReturnStatement[28200-28212]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[27724-27737]:ReturnStatement[28223-28236]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[27745-27751]:Modifier[28244-28250]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[27752-27755]:PrimitiveType[28251-28254]"
    }, {
      "left" : "getOpFromAssignmentOp",
      "right" : "getOpFromAssignmentOp",
      "info" : "SimpleName[27756-27777]:SimpleName[28255-28276]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[27778-27784]:SingleVariableDeclaration[28277-28283]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27786-28508]:Block[28285-29007]"
    }, {
      "left" : "switch (n.getType()){\n      case Token.ASSIGN_BITOR:\n        return Token.BITOR;\n      case Token.ASSIGN_BITXOR:\n        return Token.BITXOR;\n      case Token.ASSIGN_BITAND:\n        return Token.BITAND;\n      case Token.ASSIGN_LSH:\n        return Token.LSH;\n      case Token.ASSIGN_RSH:\n        return Token.RSH;\n      case Token.ASSIGN_URSH:\n        return Token.URSH;\n      case Token.ASSIGN_ADD:\n        return Token.ADD;\n      case Token.ASSIGN_SUB:\n        return Token.SUB;\n      case Token.ASSIGN_MUL:\n        return Token.MUL;\n      case Token.ASSIGN_DIV:\n        return Token.DIV;\n      case Token.ASSIGN_MOD:\n        return Token.MOD;\n    }",
      "right" : "switch (n.getType()){\n      case Token.ASSIGN_BITOR:\n        return Token.BITOR;\n      case Token.ASSIGN_BITXOR:\n        return Token.BITXOR;\n      case Token.ASSIGN_BITAND:\n        return Token.BITAND;\n      case Token.ASSIGN_LSH:\n        return Token.LSH;\n      case Token.ASSIGN_RSH:\n        return Token.RSH;\n      case Token.ASSIGN_URSH:\n        return Token.URSH;\n      case Token.ASSIGN_ADD:\n        return Token.ADD;\n      case Token.ASSIGN_SUB:\n        return Token.SUB;\n      case Token.ASSIGN_MUL:\n        return Token.MUL;\n      case Token.ASSIGN_DIV:\n        return Token.DIV;\n      case Token.ASSIGN_MOD:\n        return Token.MOD;\n    }",
      "info" : "SwitchStatement[27792-28442]:SwitchStatement[28291-28941]"
    }, {
      "left" : "case Token.ASSIGN_BITOR:",
      "right" : "case Token.ASSIGN_BITOR:",
      "info" : "SwitchCase[27820-27844]:SwitchCase[28319-28343]"
    }, {
      "left" : "return Token.BITOR;",
      "right" : "return Token.BITOR;",
      "info" : "ReturnStatement[27853-27872]:ReturnStatement[28352-28371]"
    }, {
      "left" : "case Token.ASSIGN_BITXOR:",
      "right" : "case Token.ASSIGN_BITXOR:",
      "info" : "SwitchCase[27879-27904]:SwitchCase[28378-28403]"
    }, {
      "left" : "return Token.BITXOR;",
      "right" : "return Token.BITXOR;",
      "info" : "ReturnStatement[27913-27933]:ReturnStatement[28412-28432]"
    }, {
      "left" : "case Token.ASSIGN_BITAND:",
      "right" : "case Token.ASSIGN_BITAND:",
      "info" : "SwitchCase[27940-27965]:SwitchCase[28439-28464]"
    }, {
      "left" : "return Token.BITAND;",
      "right" : "return Token.BITAND;",
      "info" : "ReturnStatement[27974-27994]:ReturnStatement[28473-28493]"
    }, {
      "left" : "case Token.ASSIGN_LSH:",
      "right" : "case Token.ASSIGN_LSH:",
      "info" : "SwitchCase[28001-28023]:SwitchCase[28500-28522]"
    }, {
      "left" : "return Token.LSH;",
      "right" : "return Token.LSH;",
      "info" : "ReturnStatement[28032-28049]:ReturnStatement[28531-28548]"
    }, {
      "left" : "case Token.ASSIGN_RSH:",
      "right" : "case Token.ASSIGN_RSH:",
      "info" : "SwitchCase[28056-28078]:SwitchCase[28555-28577]"
    }, {
      "left" : "return Token.RSH;",
      "right" : "return Token.RSH;",
      "info" : "ReturnStatement[28087-28104]:ReturnStatement[28586-28603]"
    }, {
      "left" : "case Token.ASSIGN_URSH:",
      "right" : "case Token.ASSIGN_URSH:",
      "info" : "SwitchCase[28111-28134]:SwitchCase[28610-28633]"
    }, {
      "left" : "return Token.URSH;",
      "right" : "return Token.URSH;",
      "info" : "ReturnStatement[28143-28161]:ReturnStatement[28642-28660]"
    }, {
      "left" : "case Token.ASSIGN_ADD:",
      "right" : "case Token.ASSIGN_ADD:",
      "info" : "SwitchCase[28168-28190]:SwitchCase[28667-28689]"
    }, {
      "left" : "return Token.ADD;",
      "right" : "return Token.ADD;",
      "info" : "ReturnStatement[28199-28216]:ReturnStatement[28698-28715]"
    }, {
      "left" : "case Token.ASSIGN_SUB:",
      "right" : "case Token.ASSIGN_SUB:",
      "info" : "SwitchCase[28223-28245]:SwitchCase[28722-28744]"
    }, {
      "left" : "return Token.SUB;",
      "right" : "return Token.SUB;",
      "info" : "ReturnStatement[28254-28271]:ReturnStatement[28753-28770]"
    }, {
      "left" : "case Token.ASSIGN_MUL:",
      "right" : "case Token.ASSIGN_MUL:",
      "info" : "SwitchCase[28278-28300]:SwitchCase[28777-28799]"
    }, {
      "left" : "return Token.MUL;",
      "right" : "return Token.MUL;",
      "info" : "ReturnStatement[28309-28326]:ReturnStatement[28808-28825]"
    }, {
      "left" : "case Token.ASSIGN_DIV:",
      "right" : "case Token.ASSIGN_DIV:",
      "info" : "SwitchCase[28333-28355]:SwitchCase[28832-28854]"
    }, {
      "left" : "return Token.DIV;",
      "right" : "return Token.DIV;",
      "info" : "ReturnStatement[28364-28381]:ReturnStatement[28863-28880]"
    }, {
      "left" : "case Token.ASSIGN_MOD:",
      "right" : "case Token.ASSIGN_MOD:",
      "info" : "SwitchCase[28388-28410]:SwitchCase[28887-28909]"
    }, {
      "left" : "return Token.MOD;",
      "right" : "return Token.MOD;",
      "info" : "ReturnStatement[28419-28436]:ReturnStatement[28918-28935]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Not an assiment op\");",
      "right" : "throw new IllegalArgumentException(\"Not an assiment op\");",
      "info" : "ThrowStatement[28447-28504]:ThrowStatement[28946-29003]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[28512-28518]:Modifier[29011-29017]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[28519-28526]:PrimitiveType[29018-29025]"
    }, {
      "left" : "isExpressionNode",
      "right" : "isExpressionNode",
      "info" : "SimpleName[28527-28543]:SimpleName[29026-29042]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[28544-28550]:SingleVariableDeclaration[29043-29049]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28552-28602]:Block[29051-29101]"
    }, {
      "left" : "return n.getType() == Token.EXPR_RESULT;",
      "right" : "return n.getType() == Token.EXPR_RESULT;",
      "info" : "ReturnStatement[28558-28598]:ReturnStatement[29057-29097]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[28711-28717]:Modifier[29210-29216]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[28718-28725]:PrimitiveType[29217-29224]"
    }, {
      "left" : "containsFunction",
      "right" : "containsFunction",
      "info" : "SimpleName[28726-28742]:SimpleName[29225-29241]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[28743-28749]:SingleVariableDeclaration[29242-29248]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28751-28800]:Block[29250-29299]"
    }, {
      "left" : "return containsType(n, Token.FUNCTION);",
      "right" : "return containsType(n, Token.FUNCTION);",
      "info" : "ReturnStatement[28757-28796]:ReturnStatement[29256-29295]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[28893-28899]:Modifier[29392-29398]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[28900-28907]:PrimitiveType[29399-29406]"
    }, {
      "left" : "referencesThis",
      "right" : "referencesThis",
      "info" : "SimpleName[28908-28922]:SimpleName[29407-29421]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[28923-28929]:SingleVariableDeclaration[29422-29428]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28931-29000]:Block[29430-29499]"
    }, {
      "left" : "return containsType(n, Token.THIS, new MatchNotFunction());",
      "right" : "return containsType(n, Token.THIS, new MatchNotFunction());",
      "info" : "ReturnStatement[28937-28996]:ReturnStatement[29436-29495]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[29056-29062]:Modifier[29555-29561]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[29063-29070]:PrimitiveType[29562-29569]"
    }, {
      "left" : "isGet",
      "right" : "isGet",
      "info" : "SimpleName[29071-29076]:SimpleName[29570-29575]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[29077-29083]:SingleVariableDeclaration[29576-29582]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29085-29171]:Block[29584-29670]"
    }, {
      "left" : "return n.getType() == Token.GETPROP\n        || n.getType() == Token.GETELEM;",
      "right" : "return n.getType() == Token.GETPROP\n        || n.getType() == Token.GETELEM;",
      "info" : "ReturnStatement[29091-29167]:ReturnStatement[29590-29666]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[29216-29222]:Modifier[29715-29721]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[29223-29230]:PrimitiveType[29722-29729]"
    }, {
      "left" : "isGetProp",
      "right" : "isGetProp",
      "info" : "SimpleName[29231-29240]:SimpleName[29730-29739]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[29241-29247]:SingleVariableDeclaration[29740-29746]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29249-29295]:Block[29748-29794]"
    }, {
      "left" : "return n.getType() == Token.GETPROP;",
      "right" : "return n.getType() == Token.GETPROP;",
      "info" : "ReturnStatement[29255-29291]:ReturnStatement[29754-29790]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[29337-29343]:Modifier[29836-29842]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[29344-29351]:PrimitiveType[29843-29850]"
    }, {
      "left" : "isName",
      "right" : "isName",
      "info" : "SimpleName[29352-29358]:SimpleName[29851-29857]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[29359-29365]:SingleVariableDeclaration[29858-29864]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29367-29410]:Block[29866-29909]"
    }, {
      "left" : "return n.getType() == Token.NAME;",
      "right" : "return n.getType() == Token.NAME;",
      "info" : "ReturnStatement[29373-29406]:ReturnStatement[29872-29905]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[29451-29457]:Modifier[29950-29956]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[29458-29465]:PrimitiveType[29957-29964]"
    }, {
      "left" : "isNew",
      "right" : "isNew",
      "info" : "SimpleName[29466-29471]:SimpleName[29965-29970]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[29472-29478]:SingleVariableDeclaration[29971-29977]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29480-29522]:Block[29979-30021]"
    }, {
      "left" : "return n.getType() == Token.NEW;",
      "right" : "return n.getType() == Token.NEW;",
      "info" : "ReturnStatement[29486-29518]:ReturnStatement[29985-30017]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[29563-29569]:Modifier[30062-30068]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[29570-29577]:PrimitiveType[30069-30076]"
    }, {
      "left" : "isVar",
      "right" : "isVar",
      "info" : "SimpleName[29578-29583]:SimpleName[30077-30082]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[29584-29590]:SingleVariableDeclaration[30083-30089]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29592-29634]:Block[30091-30133]"
    }, {
      "left" : "return n.getType() == Token.VAR;",
      "right" : "return n.getType() == Token.VAR;",
      "info" : "ReturnStatement[29598-29630]:ReturnStatement[30097-30129]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[29800-29806]:Modifier[30299-30305]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[29807-29814]:PrimitiveType[30306-30313]"
    }, {
      "left" : "isVarDeclaration",
      "right" : "isVarDeclaration",
      "info" : "SimpleName[29815-29831]:SimpleName[30314-30330]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[29832-29838]:SingleVariableDeclaration[30331-30337]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29840-30047]:Block[30339-30546]"
    }, {
      "left" : "return n.getType() == Token.NAME && n.getParent().getType() == Token.VAR;",
      "right" : "return n.getType() == Token.NAME && n.getParent().getType() == Token.VAR;",
      "info" : "ReturnStatement[29970-30043]:ReturnStatement[30469-30542]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[30190-30196]:Modifier[30689-30695]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[30197-30201]:SimpleType[30696-30700]"
    }, {
      "left" : "getAssignedValue",
      "right" : "getAssignedValue",
      "info" : "SimpleName[30202-30218]:SimpleName[30701-30717]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[30219-30225]:SingleVariableDeclaration[30718-30724]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30227-30493]:Block[30726-30992]"
    }, {
      "left" : "Preconditions.checkState(isName(n));",
      "right" : "Preconditions.checkState(isName(n));",
      "info" : "ExpressionStatement[30233-30269]:ExpressionStatement[30732-30768]"
    }, {
      "left" : "Node parent = n.getParent();",
      "right" : "Node parent = n.getParent();",
      "info" : "VariableDeclarationStatement[30274-30302]:VariableDeclarationStatement[30773-30801]"
    }, {
      "left" : "if (isVar(parent))",
      "right" : "if (isVar(parent))",
      "info" : "IfStatement[30307-30489]:IfStatement[30806-30988]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30326-30365]:Block[30825-30864]"
    }, {
      "left" : "return n.getFirstChild();",
      "right" : "return n.getFirstChild();",
      "info" : "ReturnStatement[30334-30359]:ReturnStatement[30833-30858]"
    }, {
      "left" : "if (isAssign(parent) && parent.getFirstChild() == n)",
      "right" : "if (isAssign(parent) && parent.getFirstChild() == n)",
      "info" : "IfStatement[30371-30489]:IfStatement[30870-30988]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30424-30457]:Block[30923-30956]"
    }, {
      "left" : "return n.getNext();",
      "right" : "return n.getNext();",
      "info" : "ReturnStatement[30432-30451]:ReturnStatement[30931-30950]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30463-30489]:Block[30962-30988]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[30471-30483]:ReturnStatement[30970-30982]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[30537-30543]:Modifier[31036-31042]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[30544-30551]:PrimitiveType[31043-31050]"
    }, {
      "left" : "isString",
      "right" : "isString",
      "info" : "SimpleName[30552-30560]:SimpleName[31051-31059]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[30561-30567]:SingleVariableDeclaration[31060-31066]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30569-30614]:Block[31068-31113]"
    }, {
      "left" : "return n.getType() == Token.STRING;",
      "right" : "return n.getType() == Token.STRING;",
      "info" : "ReturnStatement[30575-30610]:ReturnStatement[31074-31109]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[30805-30811]:Modifier[31304-31310]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[30812-30819]:PrimitiveType[31311-31318]"
    }, {
      "left" : "isExprAssign",
      "right" : "isExprAssign",
      "info" : "SimpleName[30820-30832]:SimpleName[31319-31331]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[30833-30839]:SingleVariableDeclaration[31332-31338]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30841-30946]:Block[31340-31445]"
    }, {
      "left" : "return n.getType() == Token.EXPR_RESULT\n        && n.getFirstChild().getType() == Token.ASSIGN;",
      "right" : "return n.getType() == Token.EXPR_RESULT\n        && n.getFirstChild().getType() == Token.ASSIGN;",
      "info" : "ReturnStatement[30847-30942]:ReturnStatement[31346-31441]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[30991-30997]:Modifier[31490-31496]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[30998-31005]:PrimitiveType[31497-31504]"
    }, {
      "left" : "isAssign",
      "right" : "isAssign",
      "info" : "SimpleName[31006-31014]:SimpleName[31505-31513]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[31015-31021]:SingleVariableDeclaration[31514-31520]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31023-31068]:Block[31522-31567]"
    }, {
      "left" : "return n.getType() == Token.ASSIGN;",
      "right" : "return n.getType() == Token.ASSIGN;",
      "info" : "ReturnStatement[31029-31064]:ReturnStatement[31528-31563]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[31250-31256]:Modifier[31749-31755]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[31257-31264]:PrimitiveType[31756-31763]"
    }, {
      "left" : "isExprCall",
      "right" : "isExprCall",
      "info" : "SimpleName[31265-31275]:SimpleName[31764-31774]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[31276-31282]:SingleVariableDeclaration[31775-31781]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31284-31387]:Block[31783-31886]"
    }, {
      "left" : "return n.getType() == Token.EXPR_RESULT\n        && n.getFirstChild().getType() == Token.CALL;",
      "right" : "return n.getType() == Token.EXPR_RESULT\n        && n.getFirstChild().getType() == Token.CALL;",
      "info" : "ReturnStatement[31290-31383]:ReturnStatement[31789-31882]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[31459-31465]:Modifier[31958-31964]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[31466-31473]:PrimitiveType[31965-31972]"
    }, {
      "left" : "isForIn",
      "right" : "isForIn",
      "info" : "SimpleName[31474-31481]:SimpleName[31973-31980]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[31482-31488]:SingleVariableDeclaration[31981-31987]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31490-31566]:Block[31989-32065]"
    }, {
      "left" : "return n.getType() == Token.FOR\n        && n.getChildCount() == 3;",
      "right" : "return n.getType() == Token.FOR\n        && n.getChildCount() == 3;",
      "info" : "ReturnStatement[31496-31562]:ReturnStatement[31995-32061]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[31650-31656]:Modifier[32149-32155]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[31657-31664]:PrimitiveType[32156-32163]"
    }, {
      "left" : "isLoopStructure",
      "right" : "isLoopStructure",
      "info" : "SimpleName[31665-31680]:SimpleName[32164-32179]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[31681-31687]:SingleVariableDeclaration[32180-32186]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31689-31852]:Block[32188-32351]"
    }, {
      "left" : "switch (n.getType()) {\n      case Token.FOR:\n      case Token.DO:\n      case Token.WHILE:\n        return true;\n      default:\n        return false;\n    }",
      "right" : "switch (n.getType()) {\n      case Token.FOR:\n      case Token.DO:\n      case Token.WHILE:\n        return true;\n      default:\n        return false;\n    }",
      "info" : "SwitchStatement[31695-31848]:SwitchStatement[32194-32347]"
    }, {
      "left" : "case Token.FOR:",
      "right" : "case Token.FOR:",
      "info" : "SwitchCase[31724-31739]:SwitchCase[32223-32238]"
    }, {
      "left" : "case Token.DO:",
      "right" : "case Token.DO:",
      "info" : "SwitchCase[31746-31760]:SwitchCase[32245-32259]"
    }, {
      "left" : "case Token.WHILE:",
      "right" : "case Token.WHILE:",
      "info" : "SwitchCase[31767-31784]:SwitchCase[32266-32283]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[31793-31805]:ReturnStatement[32292-32304]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[31812-31820]:SwitchCase[32311-32319]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[31829-31842]:ReturnStatement[32328-32341]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[32014-32020]:Modifier[32513-32519]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[32021-32025]:SimpleType[32520-32524]"
    }, {
      "left" : "getLoopCodeBlock",
      "right" : "getLoopCodeBlock",
      "info" : "SimpleName[32026-32042]:SimpleName[32525-32541]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[32043-32049]:SingleVariableDeclaration[32542-32548]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32051-32259]:Block[32550-32758]"
    }, {
      "left" : "switch (n.getType()) {\n      case Token.FOR:\n      case Token.WHILE:\n        return n.getLastChild();\n      case Token.DO:\n        return n.getFirstChild();\n      default:\n        return null;\n    }",
      "right" : "switch (n.getType()) {\n      case Token.FOR:\n      case Token.WHILE:\n        return n.getLastChild();\n      case Token.DO:\n        return n.getFirstChild();\n      default:\n        return null;\n    }",
      "info" : "SwitchStatement[32057-32255]:SwitchStatement[32556-32754]"
    }, {
      "left" : "case Token.FOR:",
      "right" : "case Token.FOR:",
      "info" : "SwitchCase[32086-32101]:SwitchCase[32585-32600]"
    }, {
      "left" : "case Token.WHILE:",
      "right" : "case Token.WHILE:",
      "info" : "SwitchCase[32108-32125]:SwitchCase[32607-32624]"
    }, {
      "left" : "return n.getLastChild();",
      "right" : "return n.getLastChild();",
      "info" : "ReturnStatement[32134-32158]:ReturnStatement[32633-32657]"
    }, {
      "left" : "case Token.DO:",
      "right" : "case Token.DO:",
      "info" : "SwitchCase[32165-32179]:SwitchCase[32664-32678]"
    }, {
      "left" : "return n.getFirstChild();",
      "right" : "return n.getFirstChild();",
      "info" : "ReturnStatement[32188-32213]:ReturnStatement[32687-32712]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[32220-32228]:SwitchCase[32719-32727]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[32237-32249]:ReturnStatement[32736-32748]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[32372-32378]:Modifier[32871-32877]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[32379-32386]:PrimitiveType[32878-32885]"
    }, {
      "left" : "isWithinLoop",
      "right" : "isWithinLoop",
      "info" : "SimpleName[32387-32399]:SimpleName[32886-32898]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[32400-32406]:SingleVariableDeclaration[32899-32905]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32408-32620]:Block[32907-33119]"
    }, {
      "left" : "for (Node parent : n.getAncestors())",
      "right" : "for (Node parent : n.getAncestors())",
      "info" : "EnhancedForStatement[32414-32598]:EnhancedForStatement[32913-33097]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32451-32598]:Block[32950-33097]"
    }, {
      "left" : "if (NodeUtil.isLoopStructure(parent))",
      "right" : "if (NodeUtil.isLoopStructure(parent))",
      "info" : "IfStatement[32459-32527]:IfStatement[32958-33026]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32497-32527]:Block[32996-33026]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[32507-32519]:ReturnStatement[33006-33018]"
    }, {
      "left" : "if (NodeUtil.isFunction(parent))",
      "right" : "if (NodeUtil.isFunction(parent))",
      "info" : "IfStatement[32535-32592]:IfStatement[33034-33091]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32568-32592]:Block[33067-33091]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[32578-32584]:BreakStatement[33077-33083]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[32603-32616]:ReturnStatement[33102-33115]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[32714-32720]:Modifier[33213-33219]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[32721-32728]:PrimitiveType[33220-33227]"
    }, {
      "left" : "isControlStructure",
      "right" : "isControlStructure",
      "info" : "SimpleName[32729-32747]:SimpleName[33228-33246]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[32748-32754]:SingleVariableDeclaration[33247-33253]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32756-33107]:Block[33255-33606]"
    }, {
      "left" : "switch (n.getType()) {\n      case Token.FOR:\n      case Token.DO:\n      case Token.WHILE:\n      case Token.WITH:\n      case Token.IF:\n      case Token.LABEL:\n      case Token.TRY:\n      case Token.CATCH:\n      case Token.SWITCH:\n      case Token.CASE:\n      case Token.DEFAULT:\n        return true;\n      default:\n        return false;\n    }",
      "right" : "switch (n.getType()) {\n      case Token.FOR:\n      case Token.DO:\n      case Token.WHILE:\n      case Token.WITH:\n      case Token.IF:\n      case Token.LABEL:\n      case Token.TRY:\n      case Token.CATCH:\n      case Token.SWITCH:\n      case Token.CASE:\n      case Token.DEFAULT:\n        return true;\n      default:\n        return false;\n    }",
      "info" : "SwitchStatement[32762-33103]:SwitchStatement[33261-33602]"
    }, {
      "left" : "case Token.FOR:",
      "right" : "case Token.FOR:",
      "info" : "SwitchCase[32791-32806]:SwitchCase[33290-33305]"
    }, {
      "left" : "case Token.DO:",
      "right" : "case Token.DO:",
      "info" : "SwitchCase[32813-32827]:SwitchCase[33312-33326]"
    }, {
      "left" : "case Token.WHILE:",
      "right" : "case Token.WHILE:",
      "info" : "SwitchCase[32834-32851]:SwitchCase[33333-33350]"
    }, {
      "left" : "case Token.WITH:",
      "right" : "case Token.WITH:",
      "info" : "SwitchCase[32858-32874]:SwitchCase[33357-33373]"
    }, {
      "left" : "case Token.IF:",
      "right" : "case Token.IF:",
      "info" : "SwitchCase[32881-32895]:SwitchCase[33380-33394]"
    }, {
      "left" : "case Token.LABEL:",
      "right" : "case Token.LABEL:",
      "info" : "SwitchCase[32902-32919]:SwitchCase[33401-33418]"
    }, {
      "left" : "case Token.TRY:",
      "right" : "case Token.TRY:",
      "info" : "SwitchCase[32926-32941]:SwitchCase[33425-33440]"
    }, {
      "left" : "case Token.CATCH:",
      "right" : "case Token.CATCH:",
      "info" : "SwitchCase[32948-32965]:SwitchCase[33447-33464]"
    }, {
      "left" : "case Token.SWITCH:",
      "right" : "case Token.SWITCH:",
      "info" : "SwitchCase[32972-32990]:SwitchCase[33471-33489]"
    }, {
      "left" : "case Token.CASE:",
      "right" : "case Token.CASE:",
      "info" : "SwitchCase[32997-33013]:SwitchCase[33496-33512]"
    }, {
      "left" : "case Token.DEFAULT:",
      "right" : "case Token.DEFAULT:",
      "info" : "SwitchCase[33020-33039]:SwitchCase[33519-33538]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[33048-33060]:ReturnStatement[33547-33559]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[33067-33075]:SwitchCase[33566-33574]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[33084-33097]:ReturnStatement[33583-33596]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[33218-33224]:Modifier[33717-33723]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[33225-33232]:PrimitiveType[33724-33731]"
    }, {
      "left" : "isControlStructureCodeBlock",
      "right" : "isControlStructureCodeBlock",
      "info" : "SimpleName[33233-33260]:SimpleName[33732-33759]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[33261-33272]:SingleVariableDeclaration[33760-33771]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[33274-33280]:SingleVariableDeclaration[33773-33779]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33282-33992]:Block[33781-34491]"
    }, {
      "left" : "switch (parent.getType()) {\n      case Token.FOR:\n      case Token.WHILE:\n      case Token.LABEL:\n      case Token.WITH:\n        return parent.getLastChild() == n;\n      case Token.DO:\n        return parent.getFirstChild() == n;\n      case Token.IF:\n        return parent.getFirstChild() != n;\n      case Token.TRY:\n        return parent.getFirstChild() == n || parent.getLastChild() == n;\n      case Token.CATCH:\n        return parent.getLastChild() == n;\n      case Token.SWITCH:\n      case Token.CASE:\n        return parent.getFirstChild() != n;\n      case Token.DEFAULT:\n        return true;\n      default:\n        Preconditions.checkState(isControlStructure(parent));\n        return false;\n    }",
      "right" : "switch (parent.getType()) {\n      case Token.FOR:\n      case Token.WHILE:\n      case Token.LABEL:\n      case Token.WITH:\n        return parent.getLastChild() == n;\n      case Token.DO:\n        return parent.getFirstChild() == n;\n      case Token.IF:\n        return parent.getFirstChild() != n;\n      case Token.TRY:\n        return parent.getFirstChild() == n || parent.getLastChild() == n;\n      case Token.CATCH:\n        return parent.getLastChild() == n;\n      case Token.SWITCH:\n      case Token.CASE:\n        return parent.getFirstChild() != n;\n      case Token.DEFAULT:\n        return true;\n      default:\n        Preconditions.checkState(isControlStructure(parent));\n        return false;\n    }",
      "info" : "SwitchStatement[33288-33988]:SwitchStatement[33787-34487]"
    }, {
      "left" : "case Token.FOR:",
      "right" : "case Token.FOR:",
      "info" : "SwitchCase[33322-33337]:SwitchCase[33821-33836]"
    }, {
      "left" : "case Token.WHILE:",
      "right" : "case Token.WHILE:",
      "info" : "SwitchCase[33344-33361]:SwitchCase[33843-33860]"
    }, {
      "left" : "case Token.LABEL:",
      "right" : "case Token.LABEL:",
      "info" : "SwitchCase[33368-33385]:SwitchCase[33867-33884]"
    }, {
      "left" : "case Token.WITH:",
      "right" : "case Token.WITH:",
      "info" : "SwitchCase[33392-33408]:SwitchCase[33891-33907]"
    }, {
      "left" : "return parent.getLastChild() == n;",
      "right" : "return parent.getLastChild() == n;",
      "info" : "ReturnStatement[33417-33451]:ReturnStatement[33916-33950]"
    }, {
      "left" : "case Token.DO:",
      "right" : "case Token.DO:",
      "info" : "SwitchCase[33458-33472]:SwitchCase[33957-33971]"
    }, {
      "left" : "return parent.getFirstChild() == n;",
      "right" : "return parent.getFirstChild() == n;",
      "info" : "ReturnStatement[33481-33516]:ReturnStatement[33980-34015]"
    }, {
      "left" : "case Token.IF:",
      "right" : "case Token.IF:",
      "info" : "SwitchCase[33523-33537]:SwitchCase[34022-34036]"
    }, {
      "left" : "return parent.getFirstChild() != n;",
      "right" : "return parent.getFirstChild() != n;",
      "info" : "ReturnStatement[33546-33581]:ReturnStatement[34045-34080]"
    }, {
      "left" : "case Token.TRY:",
      "right" : "case Token.TRY:",
      "info" : "SwitchCase[33588-33603]:SwitchCase[34087-34102]"
    }, {
      "left" : "return parent.getFirstChild() == n || parent.getLastChild() == n;",
      "right" : "return parent.getFirstChild() == n || parent.getLastChild() == n;",
      "info" : "ReturnStatement[33612-33677]:ReturnStatement[34111-34176]"
    }, {
      "left" : "case Token.CATCH:",
      "right" : "case Token.CATCH:",
      "info" : "SwitchCase[33684-33701]:SwitchCase[34183-34200]"
    }, {
      "left" : "return parent.getLastChild() == n;",
      "right" : "return parent.getLastChild() == n;",
      "info" : "ReturnStatement[33710-33744]:ReturnStatement[34209-34243]"
    }, {
      "left" : "case Token.SWITCH:",
      "right" : "case Token.SWITCH:",
      "info" : "SwitchCase[33751-33769]:SwitchCase[34250-34268]"
    }, {
      "left" : "case Token.CASE:",
      "right" : "case Token.CASE:",
      "info" : "SwitchCase[33776-33792]:SwitchCase[34275-34291]"
    }, {
      "left" : "return parent.getFirstChild() != n;",
      "right" : "return parent.getFirstChild() != n;",
      "info" : "ReturnStatement[33801-33836]:ReturnStatement[34300-34335]"
    }, {
      "left" : "case Token.DEFAULT:",
      "right" : "case Token.DEFAULT:",
      "info" : "SwitchCase[33843-33862]:SwitchCase[34342-34361]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[33871-33883]:ReturnStatement[34370-34382]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[33890-33898]:SwitchCase[34389-34397]"
    }, {
      "left" : "Preconditions.checkState(isControlStructure(parent));",
      "right" : "Preconditions.checkState(isControlStructure(parent));",
      "info" : "ExpressionStatement[33907-33960]:ExpressionStatement[34406-34459]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[33969-33982]:ReturnStatement[34468-34481]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[34207-34213]:Modifier[34706-34712]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[34214-34218]:SimpleType[34713-34717]"
    }, {
      "left" : "getConditionExpression",
      "right" : "getConditionExpression",
      "info" : "SimpleName[34219-34241]:SimpleName[34718-34740]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[34242-34248]:SingleVariableDeclaration[34741-34747]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34250-34796]:Block[34749-35295]"
    }, {
      "left" : "switch (n.getType()) {\n      case Token.IF:\n      case Token.WHILE:\n        return n.getFirstChild();\n      case Token.DO:\n        return n.getLastChild();\n      case Token.FOR:\n        switch (n.getChildCount()) {\n          case 3:\n            return null;\n          case 4:\n            return n.getFirstChild().getNext();\n        }\n        throw new IllegalArgumentException(\"malformed 'for' statement \" + n);\n      case Token.CASE:\n        return null;\n    }",
      "right" : "switch (n.getType()) {\n      case Token.IF:\n      case Token.WHILE:\n        return n.getFirstChild();\n      case Token.DO:\n        return n.getLastChild();\n      case Token.FOR:\n        switch (n.getChildCount()) {\n          case 3:\n            return null;\n          case 4:\n            return n.getFirstChild().getNext();\n        }\n        throw new IllegalArgumentException(\"malformed 'for' statement \" + n);\n      case Token.CASE:\n        return null;\n    }",
      "info" : "SwitchStatement[34256-34717]:SwitchStatement[34755-35216]"
    }, {
      "left" : "case Token.IF:",
      "right" : "case Token.IF:",
      "info" : "SwitchCase[34285-34299]:SwitchCase[34784-34798]"
    }, {
      "left" : "case Token.WHILE:",
      "right" : "case Token.WHILE:",
      "info" : "SwitchCase[34306-34323]:SwitchCase[34805-34822]"
    }, {
      "left" : "return n.getFirstChild();",
      "right" : "return n.getFirstChild();",
      "info" : "ReturnStatement[34332-34357]:ReturnStatement[34831-34856]"
    }, {
      "left" : "case Token.DO:",
      "right" : "case Token.DO:",
      "info" : "SwitchCase[34364-34378]:SwitchCase[34863-34877]"
    }, {
      "left" : "return n.getLastChild();",
      "right" : "return n.getLastChild();",
      "info" : "ReturnStatement[34387-34411]:ReturnStatement[34886-34910]"
    }, {
      "left" : "case Token.FOR:",
      "right" : "case Token.FOR:",
      "info" : "SwitchCase[34418-34433]:SwitchCase[34917-34932]"
    }, {
      "left" : "switch (n.getChildCount()) {\n          case 3:\n            return null;\n          case 4:\n            return n.getFirstChild().getNext();\n        }",
      "right" : "switch (n.getChildCount()) {\n          case 3:\n            return null;\n          case 4:\n            return n.getFirstChild().getNext();\n        }",
      "info" : "SwitchStatement[34442-34589]:SwitchStatement[34941-35088]"
    }, {
      "left" : "case 3:",
      "right" : "case 3:",
      "info" : "SwitchCase[34481-34488]:SwitchCase[34980-34987]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[34501-34513]:ReturnStatement[35000-35012]"
    }, {
      "left" : "case 4:",
      "right" : "case 4:",
      "info" : "SwitchCase[34524-34531]:SwitchCase[35023-35030]"
    }, {
      "left" : "return n.getFirstChild().getNext();",
      "right" : "return n.getFirstChild().getNext();",
      "info" : "ReturnStatement[34544-34579]:ReturnStatement[35043-35078]"
    }, {
      "left" : "throw new IllegalArgumentException(\"malformed 'for' statement \" + n);",
      "right" : "throw new IllegalArgumentException(\"malformed 'for' statement \" + n);",
      "info" : "ThrowStatement[34598-34667]:ThrowStatement[35097-35166]"
    }, {
      "left" : "case Token.CASE:",
      "right" : "case Token.CASE:",
      "info" : "SwitchCase[34674-34690]:SwitchCase[35173-35189]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[34699-34711]:ReturnStatement[35198-35210]"
    }, {
      "left" : "throw new IllegalArgumentException(n + \" does not have a condition.\");",
      "right" : "throw new IllegalArgumentException(n + \" does not have a condition.\");",
      "info" : "ThrowStatement[34722-34792]:ThrowStatement[35221-35291]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[34886-34892]:Modifier[35385-35391]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[34893-34900]:PrimitiveType[35392-35399]"
    }, {
      "left" : "isStatementBlock",
      "right" : "isStatementBlock",
      "info" : "SimpleName[34901-34917]:SimpleName[35400-35416]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[34918-34924]:SingleVariableDeclaration[35417-35423]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34926-35001]:Block[35425-35500]"
    }, {
      "left" : "return n.getType() == Token.SCRIPT || n.getType() == Token.BLOCK;",
      "right" : "return n.getType() == Token.SCRIPT || n.getType() == Token.BLOCK;",
      "info" : "ReturnStatement[34932-34997]:ReturnStatement[35431-35496]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[35071-35077]:Modifier[35570-35576]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[35078-35085]:PrimitiveType[35577-35584]"
    }, {
      "left" : "isStatement",
      "right" : "isStatement",
      "info" : "SimpleName[35086-35097]:SimpleName[35585-35596]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[35098-35104]:SingleVariableDeclaration[35597-35603]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35106-35554]:Block[35605-36053]"
    }, {
      "left" : "Node parent = n.getParent();",
      "right" : "Node parent = n.getParent();",
      "info" : "VariableDeclarationStatement[35112-35140]:VariableDeclarationStatement[35611-35639]"
    }, {
      "left" : "Preconditions.checkState(parent != null);",
      "right" : "Preconditions.checkState(parent != null);",
      "info" : "ExpressionStatement[35340-35381]:ExpressionStatement[35839-35880]"
    }, {
      "left" : "switch (parent.getType()) {\n      case Token.SCRIPT:\n      case Token.BLOCK:\n      case Token.LABEL:\n        return true;\n      default:\n        return false;\n    }",
      "right" : "switch (parent.getType()) {\n      case Token.SCRIPT:\n      case Token.BLOCK:\n      case Token.LABEL:\n        return true;\n      default:\n        return false;\n    }",
      "info" : "SwitchStatement[35386-35550]:SwitchStatement[35885-36049]"
    }, {
      "left" : "case Token.SCRIPT:",
      "right" : "case Token.SCRIPT:",
      "info" : "SwitchCase[35420-35438]:SwitchCase[35919-35937]"
    }, {
      "left" : "case Token.BLOCK:",
      "right" : "case Token.BLOCK:",
      "info" : "SwitchCase[35445-35462]:SwitchCase[35944-35961]"
    }, {
      "left" : "case Token.LABEL:",
      "right" : "case Token.LABEL:",
      "info" : "SwitchCase[35469-35486]:SwitchCase[35968-35985]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[35495-35507]:ReturnStatement[35994-36006]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[35514-35522]:SwitchCase[36013-36021]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[35531-35544]:ReturnStatement[36030-36043]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[35615-35621]:Modifier[36114-36120]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[35622-35629]:PrimitiveType[36121-36128]"
    }, {
      "left" : "isSwitchCase",
      "right" : "isSwitchCase",
      "info" : "SimpleName[35630-35642]:SimpleName[36129-36141]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[35643-35649]:SingleVariableDeclaration[36142-36148]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35651-35726]:Block[36150-36225]"
    }, {
      "left" : "return n.getType() == Token.CASE || n.getType() == Token.DEFAULT;",
      "right" : "return n.getType() == Token.CASE || n.getType() == Token.DEFAULT;",
      "info" : "ReturnStatement[35657-35722]:ReturnStatement[36156-36221]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[35895-35901]:Modifier[36394-36400]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[35902-35909]:PrimitiveType[36401-36408]"
    }, {
      "left" : "isReferenceName",
      "right" : "isReferenceName",
      "info" : "SimpleName[35910-35925]:SimpleName[36409-36424]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[35926-35932]:SingleVariableDeclaration[36425-36431]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35934-35989]:Block[36433-36488]"
    }, {
      "left" : "return isName(n) && !n.getString().isEmpty();",
      "right" : "return isName(n) && !n.getString().isEmpty();",
      "info" : "ReturnStatement[35940-35985]:ReturnStatement[36439-36484]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[36044-36050]:Modifier[36543-36549]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[36051-36058]:PrimitiveType[36550-36557]"
    }, {
      "left" : "isLabelName",
      "right" : "isLabelName",
      "info" : "SimpleName[36059-36070]:SimpleName[36558-36569]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[36071-36077]:SingleVariableDeclaration[36570-36576]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36079-36143]:Block[36578-36642]"
    }, {
      "left" : "return (n != null && n.getType() == Token.LABEL_NAME);",
      "right" : "return (n != null && n.getType() == Token.LABEL_NAME);",
      "info" : "ReturnStatement[36085-36139]:ReturnStatement[36584-36638]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[36210-36216]:Modifier[36709-36715]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[36217-36224]:PrimitiveType[36716-36723]"
    }, {
      "left" : "isTryFinallyNode",
      "right" : "isTryFinallyNode",
      "info" : "SimpleName[36225-36241]:SimpleName[36724-36740]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[36242-36253]:SingleVariableDeclaration[36741-36752]"
    }, {
      "left" : "Node child",
      "right" : "Node child",
      "info" : "SingleVariableDeclaration[36255-36265]:SingleVariableDeclaration[36754-36764]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36267-36387]:Block[36766-36886]"
    }, {
      "left" : "return parent.getType() == Token.TRY && parent.getChildCount() == 3\n        && child == parent.getLastChild();",
      "right" : "return parent.getType() == Token.TRY && parent.getChildCount() == 3\n        && child == parent.getLastChild();",
      "info" : "ReturnStatement[36273-36383]:ReturnStatement[36772-36882]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[36465-36471]:Modifier[36964-36970]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[36472-36476]:PrimitiveType[36971-36975]"
    }, {
      "left" : "removeChild",
      "right" : "removeChild",
      "info" : "SimpleName[36477-36488]:SimpleName[36976-36987]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[36489-36500]:SingleVariableDeclaration[36988-36999]"
    }, {
      "left" : "Node node",
      "right" : "Node node",
      "info" : "SingleVariableDeclaration[36502-36511]:SingleVariableDeclaration[37001-37010]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36513-38057]:Block[37012-38556]"
    }, {
      "left" : "if (isStatementBlock(parent)\n        || isSwitchCase(node)\n        || isTryFinallyNode(parent, node))",
      "right" : "if (isStatementBlock(parent)\n        || isSwitchCase(node)\n        || isTryFinallyNode(parent, node))",
      "info" : "IfStatement[36558-38053]:IfStatement[37057-38552]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36660-36754]:Block[37159-37253]"
    }, {
      "left" : "parent.removeChild(node);",
      "right" : "parent.removeChild(node);",
      "info" : "ExpressionStatement[36723-36748]:ExpressionStatement[37222-37247]"
    }, {
      "left" : "if (parent.getType() == Token.VAR)",
      "right" : "if (parent.getType() == Token.VAR)",
      "info" : "IfStatement[36760-38053]:IfStatement[37259-38552]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36795-37114]:Block[37294-37613]"
    }, {
      "left" : "if (parent.hasMoreThanOneChild())",
      "right" : "if (parent.hasMoreThanOneChild())",
      "info" : "IfStatement[36803-37108]:IfStatement[37302-37607]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36837-36880]:Block[37336-37379]"
    }, {
      "left" : "parent.removeChild(node);",
      "right" : "parent.removeChild(node);",
      "info" : "ExpressionStatement[36847-36872]:ExpressionStatement[37346-37371]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36886-37108]:Block[37385-37607]"
    }, {
      "left" : "parent.removeChild(node);",
      "right" : "parent.removeChild(node);",
      "info" : "ExpressionStatement[36961-36986]:ExpressionStatement[37460-37485]"
    }, {
      "left" : "removeChild(parent.getParent(), parent);",
      "right" : "removeChild(parent.getParent(), parent);",
      "info" : "ExpressionStatement[37060-37100]:ExpressionStatement[37559-37599]"
    }, {
      "left" : "if (node.getType() == Token.BLOCK)",
      "right" : "if (node.getType() == Token.BLOCK)",
      "info" : "IfStatement[37120-38053]:IfStatement[37619-38552]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37155-37287]:Block[37654-37786]"
    }, {
      "left" : "node.detachChildren();",
      "right" : "node.detachChildren();",
      "info" : "ExpressionStatement[37259-37281]:ExpressionStatement[37758-37780]"
    }, {
      "left" : "if (parent.getType() == Token.LABEL\n        && node == parent.getLastChild())",
      "right" : "if (parent.getType() == Token.LABEL\n        && node == parent.getLastChild())",
      "info" : "IfStatement[37293-38053]:IfStatement[37792-38552]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37371-37589]:Block[37870-38088]"
    }, {
      "left" : "parent.removeChild(node);",
      "right" : "parent.removeChild(node);",
      "info" : "ExpressionStatement[37442-37467]:ExpressionStatement[37941-37966]"
    }, {
      "left" : "removeChild(parent.getParent(), parent);",
      "right" : "removeChild(parent.getParent(), parent);",
      "info" : "ExpressionStatement[37543-37583]:ExpressionStatement[38042-38082]"
    }, {
      "left" : "if (parent.getType() == Token.FOR\n        && parent.getChildCount() == 4)",
      "right" : "if (parent.getType() == Token.FOR\n        && parent.getChildCount() == 4)",
      "info" : "IfStatement[37595-38053]:IfStatement[38094-38552]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37669-37909]:Block[38168-38408]"
    }, {
      "left" : "parent.replaceChild(node, new Node(Token.EMPTY));",
      "right" : "parent.replaceChild(node, new Node(Token.EMPTY));",
      "info" : "ExpressionStatement[37854-37903]:ExpressionStatement[38353-38402]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37915-38053]:Block[38414-38552]"
    }, {
      "left" : "throw new IllegalStateException(\"Invalid attempt to remove node: \" +\n          node.toString() + \" of \"+ parent.toString());",
      "right" : "throw new IllegalStateException(\"Invalid attempt to remove node: \" +\n          node.toString() + \" of \"+ parent.toString());",
      "info" : "ThrowStatement[37923-38047]:ThrowStatement[38422-38546]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[38159-38165]:Modifier[38658-38664]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[38166-38173]:PrimitiveType[38665-38672]"
    }, {
      "left" : "tryMergeBlock",
      "right" : "tryMergeBlock",
      "info" : "SimpleName[38174-38187]:SimpleName[38673-38686]"
    }, {
      "left" : "Node block",
      "right" : "Node block",
      "info" : "SingleVariableDeclaration[38188-38198]:SingleVariableDeclaration[38687-38697]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38200-38750]:Block[38699-39249]"
    }, {
      "left" : "Preconditions.checkState(block.getType() == Token.BLOCK);",
      "right" : "Preconditions.checkState(block.getType() == Token.BLOCK);",
      "info" : "ExpressionStatement[38206-38263]:ExpressionStatement[38705-38762]"
    }, {
      "left" : "Node parent = block.getParent();",
      "right" : "Node parent = block.getParent();",
      "info" : "VariableDeclarationStatement[38268-38300]:VariableDeclarationStatement[38767-38799]"
    }, {
      "left" : "if (isStatementBlock(parent))",
      "right" : "if (isStatementBlock(parent))",
      "info" : "IfStatement[38431-38746]:IfStatement[38930-39245]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38461-38713]:Block[38960-39212]"
    }, {
      "left" : "Node previous = block;",
      "right" : "Node previous = block;",
      "info" : "VariableDeclarationStatement[38469-38491]:VariableDeclarationStatement[38968-38990]"
    }, {
      "left" : "while (block.hasChildren())",
      "right" : "while (block.hasChildren())",
      "info" : "WhileStatement[38498-38655]:WhileStatement[38997-39154]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38526-38655]:Block[39025-39154]"
    }, {
      "left" : "Node child = block.removeFirstChild();",
      "right" : "Node child = block.removeFirstChild();",
      "info" : "VariableDeclarationStatement[38536-38574]:VariableDeclarationStatement[39035-39073]"
    }, {
      "left" : "parent.addChildAfter(child, previous);",
      "right" : "parent.addChildAfter(child, previous);",
      "info" : "ExpressionStatement[38583-38621]:ExpressionStatement[39082-39120]"
    }, {
      "left" : "previous = child;",
      "right" : "previous = child;",
      "info" : "ExpressionStatement[38630-38647]:ExpressionStatement[39129-39146]"
    }, {
      "left" : "parent.removeChild(block);",
      "right" : "parent.removeChild(block);",
      "info" : "ExpressionStatement[38662-38688]:ExpressionStatement[39161-39187]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[38695-38707]:ReturnStatement[39194-39206]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38719-38746]:Block[39218-39245]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[38727-38740]:ReturnStatement[39226-39239]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[38792-38798]:Modifier[39291-39297]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[38799-38806]:PrimitiveType[39298-39305]"
    }, {
      "left" : "isCall",
      "right" : "isCall",
      "info" : "SimpleName[38807-38813]:SimpleName[39306-39312]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[38814-38820]:SingleVariableDeclaration[39313-39319]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38822-38865]:Block[39321-39364]"
    }, {
      "left" : "return n.getType() == Token.CALL;",
      "right" : "return n.getType() == Token.CALL;",
      "info" : "ReturnStatement[38828-38861]:ReturnStatement[39327-39360]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[38911-38917]:Modifier[39410-39416]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[38918-38925]:PrimitiveType[39417-39424]"
    }, {
      "left" : "isFunction",
      "right" : "isFunction",
      "info" : "SimpleName[38926-38936]:SimpleName[39425-39435]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[38937-38943]:SingleVariableDeclaration[39436-39442]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38945-38992]:Block[39444-39491]"
    }, {
      "left" : "return n.getType() == Token.FUNCTION;",
      "right" : "return n.getType() == Token.FUNCTION;",
      "info" : "ReturnStatement[38951-38988]:ReturnStatement[39450-39487]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[39062-39068]:Modifier[39561-39567]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[39069-39073]:SimpleType[39568-39572]"
    }, {
      "left" : "getFunctionBody",
      "right" : "getFunctionBody",
      "info" : "SimpleName[39074-39089]:SimpleName[39573-39588]"
    }, {
      "left" : "Node fn",
      "right" : "Node fn",
      "info" : "SingleVariableDeclaration[39090-39097]:SingleVariableDeclaration[39589-39596]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39099-39183]:Block[39598-39682]"
    }, {
      "left" : "Preconditions.checkArgument(isFunction(fn));",
      "right" : "Preconditions.checkArgument(isFunction(fn));",
      "info" : "ExpressionStatement[39105-39149]:ExpressionStatement[39604-39648]"
    }, {
      "left" : "return fn.getLastChild();",
      "right" : "return fn.getLastChild();",
      "info" : "ReturnStatement[39154-39179]:ReturnStatement[39653-39678]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[39225-39231]:Modifier[39724-39730]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[39232-39239]:PrimitiveType[39731-39738]"
    }, {
      "left" : "isThis",
      "right" : "isThis",
      "info" : "SimpleName[39240-39246]:SimpleName[39739-39745]"
    }, {
      "left" : "Node node",
      "right" : "Node node",
      "info" : "SingleVariableDeclaration[39247-39256]:SingleVariableDeclaration[39746-39755]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39258-39304]:Block[39757-39803]"
    }, {
      "left" : "return node.getType() == Token.THIS;",
      "right" : "return node.getType() == Token.THIS;",
      "info" : "ReturnStatement[39264-39300]:ReturnStatement[39763-39799]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[39369-39375]:Modifier[39868-39874]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[39376-39383]:PrimitiveType[39875-39882]"
    }, {
      "left" : "containsCall",
      "right" : "containsCall",
      "info" : "SimpleName[39384-39396]:SimpleName[39883-39895]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[39397-39403]:SingleVariableDeclaration[39896-39902]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39405-39450]:Block[39904-39949]"
    }, {
      "left" : "return containsType(n, Token.CALL);",
      "right" : "return containsType(n, Token.CALL);",
      "info" : "ReturnStatement[39411-39446]:ReturnStatement[39910-39945]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[39693-39699]:Modifier[40192-40198]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[39700-39707]:PrimitiveType[40199-40206]"
    }, {
      "left" : "isFunctionDeclaration",
      "right" : "isFunctionDeclaration",
      "info" : "SimpleName[39708-39729]:SimpleName[40207-40228]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[39730-39736]:SingleVariableDeclaration[40229-40235]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39738-39803]:Block[40237-40302]"
    }, {
      "left" : "return n.getType() == Token.FUNCTION && isStatement(n);",
      "right" : "return n.getType() == Token.FUNCTION && isStatement(n);",
      "info" : "ReturnStatement[39744-39799]:ReturnStatement[40243-40298]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[39993-39999]:Modifier[40492-40498]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[40000-40007]:PrimitiveType[40499-40506]"
    }, {
      "left" : "isHoistedFunctionDeclaration",
      "right" : "isHoistedFunctionDeclaration",
      "info" : "SimpleName[40008-40036]:SimpleName[40507-40535]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[40037-40043]:SingleVariableDeclaration[40536-40542]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40045-40209]:Block[40544-40708]"
    }, {
      "left" : "return isFunctionDeclaration(n)\n        && (n.getParent().getType() == Token.SCRIPT\n            || n.getParent().getParent().getType() == Token.FUNCTION);",
      "right" : "return isFunctionDeclaration(n)\n        && (n.getParent().getType() == Token.SCRIPT\n            || n.getParent().getParent().getType() == Token.FUNCTION);",
      "info" : "ReturnStatement[40051-40205]:ReturnStatement[40550-40704]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[40869-40875]:Modifier[41368-41374]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[40876-40883]:PrimitiveType[41375-41382]"
    }, {
      "left" : "isFunctionExpression",
      "right" : "isFunctionExpression",
      "info" : "SimpleName[40884-40904]:SimpleName[41383-41403]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[40905-40911]:SingleVariableDeclaration[41404-41410]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40913-40979]:Block[41412-41478]"
    }, {
      "left" : "return n.getType() == Token.FUNCTION && !isStatement(n);",
      "right" : "return n.getType() == Token.FUNCTION && !isStatement(n);",
      "info" : "ReturnStatement[40919-40975]:ReturnStatement[41418-41474]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[41174-41180]:Modifier[41673-41679]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[41181-41188]:PrimitiveType[41680-41687]"
    }, {
      "left" : "isEmptyFunctionExpression",
      "right" : "isEmptyFunctionExpression",
      "info" : "SimpleName[41189-41214]:SimpleName[41688-41713]"
    }, {
      "left" : "Node node",
      "right" : "Node node",
      "info" : "SingleVariableDeclaration[41215-41224]:SingleVariableDeclaration[41714-41723]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41226-41307]:Block[41725-41806]"
    }, {
      "left" : "return isFunctionExpression(node) && isEmptyBlock(node.getLastChild());",
      "right" : "return isFunctionExpression(node) && isEmptyBlock(node.getLastChild());",
      "info" : "ReturnStatement[41232-41303]:ReturnStatement[41731-41802]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[41457-41463]:Modifier[41956-41962]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[41464-41471]:PrimitiveType[41963-41970]"
    }, {
      "left" : "isVarArgsFunction",
      "right" : "isVarArgsFunction",
      "info" : "SimpleName[41472-41489]:SimpleName[41971-41988]"
    }, {
      "left" : "Node function",
      "right" : "Node function",
      "info" : "SingleVariableDeclaration[41490-41503]:SingleVariableDeclaration[41989-42002]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41505-41681]:Block[42004-42180]"
    }, {
      "left" : "Preconditions.checkArgument(isFunction(function));",
      "right" : "Preconditions.checkArgument(isFunction(function));",
      "info" : "ExpressionStatement[41511-41561]:ExpressionStatement[42010-42060]"
    }, {
      "left" : "return isNameReferenced(\n        function.getLastChild(),\n        \"arguments\",\n        new MatchNotFunction());",
      "right" : "return isNameReferenced(\n        function.getLastChild(),\n        \"arguments\",\n        new MatchNotFunction());",
      "info" : "ReturnStatement[41566-41677]:ReturnStatement[42065-42176]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[41785-41791]:Modifier[42284-42290]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[41792-41799]:PrimitiveType[42291-42298]"
    }, {
      "left" : "isObjectCallMethod",
      "right" : "isObjectCallMethod",
      "info" : "SimpleName[41800-41818]:SimpleName[42299-42317]"
    }, {
      "left" : "Node callNode",
      "right" : "Node callNode",
      "info" : "SingleVariableDeclaration[41819-41832]:SingleVariableDeclaration[42318-42331]"
    }, {
      "left" : "String methodName",
      "right" : "String methodName",
      "info" : "SingleVariableDeclaration[41834-41851]:SingleVariableDeclaration[42333-42350]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41853-42288]:Block[42352-42787]"
    }, {
      "left" : "if (callNode.getType() == Token.CALL)",
      "right" : "if (callNode.getType() == Token.CALL)",
      "info" : "IfStatement[41859-42266]:IfStatement[42358-42765]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41897-42266]:Block[42396-42765]"
    }, {
      "left" : "Node functionIndentifyingExpression = callNode.getFirstChild();",
      "right" : "Node functionIndentifyingExpression = callNode.getFirstChild();",
      "info" : "VariableDeclarationStatement[41905-41968]:VariableDeclarationStatement[42404-42467]"
    }, {
      "left" : "if (isGet(functionIndentifyingExpression))",
      "right" : "if (isGet(functionIndentifyingExpression))",
      "info" : "IfStatement[41975-42260]:IfStatement[42474-42759]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42018-42260]:Block[42517-42759]"
    }, {
      "left" : "Node last = functionIndentifyingExpression.getLastChild();",
      "right" : "Node last = functionIndentifyingExpression.getLastChild();",
      "info" : "VariableDeclarationStatement[42028-42086]:VariableDeclarationStatement[42527-42585]"
    }, {
      "left" : "if (last != null && last.getType() == Token.STRING)",
      "right" : "if (last != null && last.getType() == Token.STRING)",
      "info" : "IfStatement[42095-42252]:IfStatement[42594-42751]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42147-42252]:Block[42646-42751]"
    }, {
      "left" : "String propName = last.getString();",
      "right" : "String propName = last.getString();",
      "info" : "VariableDeclarationStatement[42159-42194]:VariableDeclarationStatement[42658-42693]"
    }, {
      "left" : "return (propName.equals(methodName));",
      "right" : "return (propName.equals(methodName));",
      "info" : "ReturnStatement[42205-42242]:ReturnStatement[42704-42741]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[42271-42284]:ReturnStatement[42770-42783]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[42423-42429]:Modifier[42922-42928]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[42430-42437]:PrimitiveType[42929-42936]"
    }, {
      "left" : "isFunctionObjectCall",
      "right" : "isFunctionObjectCall",
      "info" : "SimpleName[42438-42458]:SimpleName[42937-42957]"
    }, {
      "left" : "Node callNode",
      "right" : "Node callNode",
      "info" : "SingleVariableDeclaration[42459-42472]:SingleVariableDeclaration[42958-42971]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42474-42528]:Block[42973-43027]"
    }, {
      "left" : "return isObjectCallMethod(callNode, \"call\");",
      "right" : "return isObjectCallMethod(callNode, \"call\");",
      "info" : "ReturnStatement[42480-42524]:ReturnStatement[42979-43023]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[42664-42670]:Modifier[43163-43169]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[42671-42678]:PrimitiveType[43170-43177]"
    }, {
      "left" : "isFunctionObjectApply",
      "right" : "isFunctionObjectApply",
      "info" : "SimpleName[42679-42700]:SimpleName[43178-43199]"
    }, {
      "left" : "Node callNode",
      "right" : "Node callNode",
      "info" : "SingleVariableDeclaration[42701-42714]:SingleVariableDeclaration[43200-43213]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42716-42771]:Block[43215-43270]"
    }, {
      "left" : "return isObjectCallMethod(callNode, \"apply\");",
      "right" : "return isObjectCallMethod(callNode, \"apply\");",
      "info" : "ReturnStatement[42722-42767]:ReturnStatement[43221-43266]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[42934-42940]:Modifier[43433-43439]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[42941-42948]:PrimitiveType[43440-43447]"
    }, {
      "left" : "isSimpleFunctionObjectCall",
      "right" : "isSimpleFunctionObjectCall",
      "info" : "SimpleName[42949-42975]:SimpleName[43448-43474]"
    }, {
      "left" : "Node callNode",
      "right" : "Node callNode",
      "info" : "SingleVariableDeclaration[42976-42989]:SingleVariableDeclaration[43475-43488]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42991-43170]:Block[43490-43669]"
    }, {
      "left" : "if (isFunctionObjectCall(callNode))",
      "right" : "if (isFunctionObjectCall(callNode))",
      "info" : "IfStatement[42997-43147]:IfStatement[43496-43646]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43033-43147]:Block[43532-43646]"
    }, {
      "left" : "if (callNode.getFirstChild().getFirstChild().getType() == Token.NAME)",
      "right" : "if (callNode.getFirstChild().getFirstChild().getType() == Token.NAME)",
      "info" : "IfStatement[43041-43141]:IfStatement[43540-43640]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43111-43141]:Block[43610-43640]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[43121-43133]:ReturnStatement[43620-43632]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[43153-43166]:ReturnStatement[43652-43665]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[43523-43529]:Modifier[44022-44028]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[43530-43537]:PrimitiveType[44029-44036]"
    }, {
      "left" : "isLhs",
      "right" : "isLhs",
      "info" : "SimpleName[43538-43543]:SimpleName[44037-44042]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[43544-43550]:SingleVariableDeclaration[44043-44049]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[43552-43563]:SingleVariableDeclaration[44051-44062]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43565-43692]:Block[44064-44191]"
    }, {
      "left" : "return (parent.getType() == Token.ASSIGN && parent.getFirstChild() == n) ||\n           parent.getType() == Token.VAR;",
      "right" : "return (parent.getType() == Token.ASSIGN && parent.getFirstChild() == n) ||\n           parent.getType() == Token.VAR;",
      "info" : "ReturnStatement[43571-43688]:ReturnStatement[44070-44187]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[43888-43894]:Modifier[44387-44393]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[43895-43902]:PrimitiveType[44394-44401]"
    }, {
      "left" : "isObjectLitKey",
      "right" : "isObjectLitKey",
      "info" : "SimpleName[43903-43917]:SimpleName[44402-44416]"
    }, {
      "left" : "Node node",
      "right" : "Node node",
      "info" : "SingleVariableDeclaration[43918-43927]:SingleVariableDeclaration[44417-44426]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[43929-43940]:SingleVariableDeclaration[44428-44439]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43942-44292]:Block[44441-44791]"
    }, {
      "left" : "if (node.getType() == Token.STRING && parent.getType() == Token.OBJECTLIT)",
      "right" : "if (node.getType() == Token.STRING && parent.getType() == Token.OBJECTLIT)",
      "info" : "IfStatement[43948-44270]:IfStatement[44447-44769]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44023-44270]:Block[44522-44769]"
    }, {
      "left" : "int index = 0;",
      "right" : "int index = 0;",
      "info" : "VariableDeclarationStatement[44031-44045]:VariableDeclarationStatement[44530-44544]"
    }, {
      "left" : "for (Node current = parent.getFirstChild();\n           current != null;\n           current = current.getNext())",
      "right" : "for (Node current = parent.getFirstChild();\n           current != null;\n           current = current.getNext())",
      "info" : "ForStatement[44052-44264]:ForStatement[44551-44763]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44164-44264]:Block[44663-44763]"
    }, {
      "left" : "if (current == node)",
      "right" : "if (current == node)",
      "info" : "IfStatement[44174-44239]:IfStatement[44673-44738]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44195-44239]:Block[44694-44738]"
    }, {
      "left" : "return index % 2 == 0;",
      "right" : "return index % 2 == 0;",
      "info" : "ReturnStatement[44207-44229]:ReturnStatement[44706-44728]"
    }, {
      "left" : "index++;",
      "right" : "index++;",
      "info" : "ExpressionStatement[44248-44256]:ExpressionStatement[44747-44755]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[44275-44288]:ReturnStatement[44774-44787]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[44563-44569]:Modifier[45062-45068]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[44570-44576]:SimpleType[45069-45075]"
    }, {
      "left" : "opToStr",
      "right" : "opToStr",
      "info" : "SimpleName[44577-44584]:SimpleName[45076-45083]"
    }, {
      "left" : "int operator",
      "right" : "int operator",
      "info" : "SingleVariableDeclaration[44585-44597]:SingleVariableDeclaration[45084-45096]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44599-46209]:Block[45098-46708]"
    }, {
      "left" : "switch (operator) {\n      case Token.BITOR: return \"|\";\n      case Token.OR: return \"||\";\n      case Token.BITXOR: return \"^\";\n      case Token.AND: return \"&&\";\n      case Token.BITAND: return \"&\";\n      case Token.SHEQ: return \"===\";\n      case Token.EQ: return \"==\";\n      case Token.NOT: return \"!\";\n      case Token.NE: return \"!=\";\n      case Token.SHNE: return \"!==\";\n      case Token.LSH: return \"<<\";\n      case Token.IN: return \"in\";\n      case Token.LE: return \"<=\";\n      case Token.LT: return \"<\";\n      case Token.URSH: return \">>>\";\n      case Token.RSH: return \">>\";\n      case Token.GE: return \">=\";\n      case Token.GT: return \">\";\n      case Token.MUL: return \"*\";\n      case Token.DIV: return \"/\";\n      case Token.MOD: return \"%\";\n      case Token.BITNOT: return \"~\";\n      case Token.ADD: return \"+\";\n      case Token.SUB: return \"-\";\n      case Token.POS: return \"+\";\n      case Token.NEG: return \"-\";\n      case Token.ASSIGN: return \"=\";\n      case Token.ASSIGN_BITOR: return \"|=\";\n      case Token.ASSIGN_BITXOR: return \"^=\";\n      case Token.ASSIGN_BITAND: return \"&=\";\n      case Token.ASSIGN_LSH: return \"<<=\";\n      case Token.ASSIGN_RSH: return \">>=\";\n      case Token.ASSIGN_URSH: return \">>>=\";\n      case Token.ASSIGN_ADD: return \"+=\";\n      case Token.ASSIGN_SUB: return \"-=\";\n      case Token.ASSIGN_MUL: return \"*=\";\n      case Token.ASSIGN_DIV: return \"/=\";\n      case Token.ASSIGN_MOD: return \"%=\";\n      case Token.VOID: return \"void\";\n      case Token.TYPEOF: return \"typeof\";\n      case Token.INSTANCEOF: return \"instanceof\";\n      default: return null;\n    }",
      "right" : "switch (operator) {\n      case Token.BITOR: return \"|\";\n      case Token.OR: return \"||\";\n      case Token.BITXOR: return \"^\";\n      case Token.AND: return \"&&\";\n      case Token.BITAND: return \"&\";\n      case Token.SHEQ: return \"===\";\n      case Token.EQ: return \"==\";\n      case Token.NOT: return \"!\";\n      case Token.NE: return \"!=\";\n      case Token.SHNE: return \"!==\";\n      case Token.LSH: return \"<<\";\n      case Token.IN: return \"in\";\n      case Token.LE: return \"<=\";\n      case Token.LT: return \"<\";\n      case Token.URSH: return \">>>\";\n      case Token.RSH: return \">>\";\n      case Token.GE: return \">=\";\n      case Token.GT: return \">\";\n      case Token.MUL: return \"*\";\n      case Token.DIV: return \"/\";\n      case Token.MOD: return \"%\";\n      case Token.BITNOT: return \"~\";\n      case Token.ADD: return \"+\";\n      case Token.SUB: return \"-\";\n      case Token.POS: return \"+\";\n      case Token.NEG: return \"-\";\n      case Token.ASSIGN: return \"=\";\n      case Token.ASSIGN_BITOR: return \"|=\";\n      case Token.ASSIGN_BITXOR: return \"^=\";\n      case Token.ASSIGN_BITAND: return \"&=\";\n      case Token.ASSIGN_LSH: return \"<<=\";\n      case Token.ASSIGN_RSH: return \">>=\";\n      case Token.ASSIGN_URSH: return \">>>=\";\n      case Token.ASSIGN_ADD: return \"+=\";\n      case Token.ASSIGN_SUB: return \"-=\";\n      case Token.ASSIGN_MUL: return \"*=\";\n      case Token.ASSIGN_DIV: return \"/=\";\n      case Token.ASSIGN_MOD: return \"%=\";\n      case Token.VOID: return \"void\";\n      case Token.TYPEOF: return \"typeof\";\n      case Token.INSTANCEOF: return \"instanceof\";\n      default: return null;\n    }",
      "info" : "SwitchStatement[44605-46205]:SwitchStatement[45104-46704]"
    }, {
      "left" : "case Token.BITOR:",
      "right" : "case Token.BITOR:",
      "info" : "SwitchCase[44631-44648]:SwitchCase[45130-45147]"
    }, {
      "left" : "return \"|\";",
      "right" : "return \"|\";",
      "info" : "ReturnStatement[44649-44660]:ReturnStatement[45148-45159]"
    }, {
      "left" : "case Token.OR:",
      "right" : "case Token.OR:",
      "info" : "SwitchCase[44667-44681]:SwitchCase[45166-45180]"
    }, {
      "left" : "return \"||\";",
      "right" : "return \"||\";",
      "info" : "ReturnStatement[44682-44694]:ReturnStatement[45181-45193]"
    }, {
      "left" : "case Token.BITXOR:",
      "right" : "case Token.BITXOR:",
      "info" : "SwitchCase[44701-44719]:SwitchCase[45200-45218]"
    }, {
      "left" : "return \"^\";",
      "right" : "return \"^\";",
      "info" : "ReturnStatement[44720-44731]:ReturnStatement[45219-45230]"
    }, {
      "left" : "case Token.AND:",
      "right" : "case Token.AND:",
      "info" : "SwitchCase[44738-44753]:SwitchCase[45237-45252]"
    }, {
      "left" : "return \"&&\";",
      "right" : "return \"&&\";",
      "info" : "ReturnStatement[44754-44766]:ReturnStatement[45253-45265]"
    }, {
      "left" : "case Token.BITAND:",
      "right" : "case Token.BITAND:",
      "info" : "SwitchCase[44773-44791]:SwitchCase[45272-45290]"
    }, {
      "left" : "return \"&\";",
      "right" : "return \"&\";",
      "info" : "ReturnStatement[44792-44803]:ReturnStatement[45291-45302]"
    }, {
      "left" : "case Token.SHEQ:",
      "right" : "case Token.SHEQ:",
      "info" : "SwitchCase[44810-44826]:SwitchCase[45309-45325]"
    }, {
      "left" : "return \"===\";",
      "right" : "return \"===\";",
      "info" : "ReturnStatement[44827-44840]:ReturnStatement[45326-45339]"
    }, {
      "left" : "case Token.EQ:",
      "right" : "case Token.EQ:",
      "info" : "SwitchCase[44847-44861]:SwitchCase[45346-45360]"
    }, {
      "left" : "return \"==\";",
      "right" : "return \"==\";",
      "info" : "ReturnStatement[44862-44874]:ReturnStatement[45361-45373]"
    }, {
      "left" : "case Token.NOT:",
      "right" : "case Token.NOT:",
      "info" : "SwitchCase[44881-44896]:SwitchCase[45380-45395]"
    }, {
      "left" : "return \"!\";",
      "right" : "return \"!\";",
      "info" : "ReturnStatement[44897-44908]:ReturnStatement[45396-45407]"
    }, {
      "left" : "case Token.NE:",
      "right" : "case Token.NE:",
      "info" : "SwitchCase[44915-44929]:SwitchCase[45414-45428]"
    }, {
      "left" : "return \"!=\";",
      "right" : "return \"!=\";",
      "info" : "ReturnStatement[44930-44942]:ReturnStatement[45429-45441]"
    }, {
      "left" : "case Token.SHNE:",
      "right" : "case Token.SHNE:",
      "info" : "SwitchCase[44949-44965]:SwitchCase[45448-45464]"
    }, {
      "left" : "return \"!==\";",
      "right" : "return \"!==\";",
      "info" : "ReturnStatement[44966-44979]:ReturnStatement[45465-45478]"
    }, {
      "left" : "case Token.LSH:",
      "right" : "case Token.LSH:",
      "info" : "SwitchCase[44986-45001]:SwitchCase[45485-45500]"
    }, {
      "left" : "return \"<<\";",
      "right" : "return \"<<\";",
      "info" : "ReturnStatement[45002-45014]:ReturnStatement[45501-45513]"
    }, {
      "left" : "case Token.IN:",
      "right" : "case Token.IN:",
      "info" : "SwitchCase[45021-45035]:SwitchCase[45520-45534]"
    }, {
      "left" : "return \"in\";",
      "right" : "return \"in\";",
      "info" : "ReturnStatement[45036-45048]:ReturnStatement[45535-45547]"
    }, {
      "left" : "case Token.LE:",
      "right" : "case Token.LE:",
      "info" : "SwitchCase[45055-45069]:SwitchCase[45554-45568]"
    }, {
      "left" : "return \"<=\";",
      "right" : "return \"<=\";",
      "info" : "ReturnStatement[45070-45082]:ReturnStatement[45569-45581]"
    }, {
      "left" : "case Token.LT:",
      "right" : "case Token.LT:",
      "info" : "SwitchCase[45089-45103]:SwitchCase[45588-45602]"
    }, {
      "left" : "return \"<\";",
      "right" : "return \"<\";",
      "info" : "ReturnStatement[45104-45115]:ReturnStatement[45603-45614]"
    }, {
      "left" : "case Token.URSH:",
      "right" : "case Token.URSH:",
      "info" : "SwitchCase[45122-45138]:SwitchCase[45621-45637]"
    }, {
      "left" : "return \">>>\";",
      "right" : "return \">>>\";",
      "info" : "ReturnStatement[45139-45152]:ReturnStatement[45638-45651]"
    }, {
      "left" : "case Token.RSH:",
      "right" : "case Token.RSH:",
      "info" : "SwitchCase[45159-45174]:SwitchCase[45658-45673]"
    }, {
      "left" : "return \">>\";",
      "right" : "return \">>\";",
      "info" : "ReturnStatement[45175-45187]:ReturnStatement[45674-45686]"
    }, {
      "left" : "case Token.GE:",
      "right" : "case Token.GE:",
      "info" : "SwitchCase[45194-45208]:SwitchCase[45693-45707]"
    }, {
      "left" : "return \">=\";",
      "right" : "return \">=\";",
      "info" : "ReturnStatement[45209-45221]:ReturnStatement[45708-45720]"
    }, {
      "left" : "case Token.GT:",
      "right" : "case Token.GT:",
      "info" : "SwitchCase[45228-45242]:SwitchCase[45727-45741]"
    }, {
      "left" : "return \">\";",
      "right" : "return \">\";",
      "info" : "ReturnStatement[45243-45254]:ReturnStatement[45742-45753]"
    }, {
      "left" : "case Token.MUL:",
      "right" : "case Token.MUL:",
      "info" : "SwitchCase[45261-45276]:SwitchCase[45760-45775]"
    }, {
      "left" : "return \"*\";",
      "right" : "return \"*\";",
      "info" : "ReturnStatement[45277-45288]:ReturnStatement[45776-45787]"
    }, {
      "left" : "case Token.DIV:",
      "right" : "case Token.DIV:",
      "info" : "SwitchCase[45295-45310]:SwitchCase[45794-45809]"
    }, {
      "left" : "return \"/\";",
      "right" : "return \"/\";",
      "info" : "ReturnStatement[45311-45322]:ReturnStatement[45810-45821]"
    }, {
      "left" : "case Token.MOD:",
      "right" : "case Token.MOD:",
      "info" : "SwitchCase[45329-45344]:SwitchCase[45828-45843]"
    }, {
      "left" : "return \"%\";",
      "right" : "return \"%\";",
      "info" : "ReturnStatement[45345-45356]:ReturnStatement[45844-45855]"
    }, {
      "left" : "case Token.BITNOT:",
      "right" : "case Token.BITNOT:",
      "info" : "SwitchCase[45363-45381]:SwitchCase[45862-45880]"
    }, {
      "left" : "return \"~\";",
      "right" : "return \"~\";",
      "info" : "ReturnStatement[45382-45393]:ReturnStatement[45881-45892]"
    }, {
      "left" : "case Token.ADD:",
      "right" : "case Token.ADD:",
      "info" : "SwitchCase[45400-45415]:SwitchCase[45899-45914]"
    }, {
      "left" : "return \"+\";",
      "right" : "return \"+\";",
      "info" : "ReturnStatement[45416-45427]:ReturnStatement[45915-45926]"
    }, {
      "left" : "case Token.SUB:",
      "right" : "case Token.SUB:",
      "info" : "SwitchCase[45434-45449]:SwitchCase[45933-45948]"
    }, {
      "left" : "return \"-\";",
      "right" : "return \"-\";",
      "info" : "ReturnStatement[45450-45461]:ReturnStatement[45949-45960]"
    }, {
      "left" : "case Token.POS:",
      "right" : "case Token.POS:",
      "info" : "SwitchCase[45468-45483]:SwitchCase[45967-45982]"
    }, {
      "left" : "return \"+\";",
      "right" : "return \"+\";",
      "info" : "ReturnStatement[45484-45495]:ReturnStatement[45983-45994]"
    }, {
      "left" : "case Token.NEG:",
      "right" : "case Token.NEG:",
      "info" : "SwitchCase[45502-45517]:SwitchCase[46001-46016]"
    }, {
      "left" : "return \"-\";",
      "right" : "return \"-\";",
      "info" : "ReturnStatement[45518-45529]:ReturnStatement[46017-46028]"
    }, {
      "left" : "case Token.ASSIGN:",
      "right" : "case Token.ASSIGN:",
      "info" : "SwitchCase[45536-45554]:SwitchCase[46035-46053]"
    }, {
      "left" : "return \"=\";",
      "right" : "return \"=\";",
      "info" : "ReturnStatement[45555-45566]:ReturnStatement[46054-46065]"
    }, {
      "left" : "case Token.ASSIGN_BITOR:",
      "right" : "case Token.ASSIGN_BITOR:",
      "info" : "SwitchCase[45573-45597]:SwitchCase[46072-46096]"
    }, {
      "left" : "return \"|=\";",
      "right" : "return \"|=\";",
      "info" : "ReturnStatement[45598-45610]:ReturnStatement[46097-46109]"
    }, {
      "left" : "case Token.ASSIGN_BITXOR:",
      "right" : "case Token.ASSIGN_BITXOR:",
      "info" : "SwitchCase[45617-45642]:SwitchCase[46116-46141]"
    }, {
      "left" : "return \"^=\";",
      "right" : "return \"^=\";",
      "info" : "ReturnStatement[45643-45655]:ReturnStatement[46142-46154]"
    }, {
      "left" : "case Token.ASSIGN_BITAND:",
      "right" : "case Token.ASSIGN_BITAND:",
      "info" : "SwitchCase[45662-45687]:SwitchCase[46161-46186]"
    }, {
      "left" : "return \"&=\";",
      "right" : "return \"&=\";",
      "info" : "ReturnStatement[45688-45700]:ReturnStatement[46187-46199]"
    }, {
      "left" : "case Token.ASSIGN_LSH:",
      "right" : "case Token.ASSIGN_LSH:",
      "info" : "SwitchCase[45707-45729]:SwitchCase[46206-46228]"
    }, {
      "left" : "return \"<<=\";",
      "right" : "return \"<<=\";",
      "info" : "ReturnStatement[45730-45743]:ReturnStatement[46229-46242]"
    }, {
      "left" : "case Token.ASSIGN_RSH:",
      "right" : "case Token.ASSIGN_RSH:",
      "info" : "SwitchCase[45750-45772]:SwitchCase[46249-46271]"
    }, {
      "left" : "return \">>=\";",
      "right" : "return \">>=\";",
      "info" : "ReturnStatement[45773-45786]:ReturnStatement[46272-46285]"
    }, {
      "left" : "case Token.ASSIGN_URSH:",
      "right" : "case Token.ASSIGN_URSH:",
      "info" : "SwitchCase[45793-45816]:SwitchCase[46292-46315]"
    }, {
      "left" : "return \">>>=\";",
      "right" : "return \">>>=\";",
      "info" : "ReturnStatement[45817-45831]:ReturnStatement[46316-46330]"
    }, {
      "left" : "case Token.ASSIGN_ADD:",
      "right" : "case Token.ASSIGN_ADD:",
      "info" : "SwitchCase[45838-45860]:SwitchCase[46337-46359]"
    }, {
      "left" : "return \"+=\";",
      "right" : "return \"+=\";",
      "info" : "ReturnStatement[45861-45873]:ReturnStatement[46360-46372]"
    }, {
      "left" : "case Token.ASSIGN_SUB:",
      "right" : "case Token.ASSIGN_SUB:",
      "info" : "SwitchCase[45880-45902]:SwitchCase[46379-46401]"
    }, {
      "left" : "return \"-=\";",
      "right" : "return \"-=\";",
      "info" : "ReturnStatement[45903-45915]:ReturnStatement[46402-46414]"
    }, {
      "left" : "case Token.ASSIGN_MUL:",
      "right" : "case Token.ASSIGN_MUL:",
      "info" : "SwitchCase[45922-45944]:SwitchCase[46421-46443]"
    }, {
      "left" : "return \"*=\";",
      "right" : "return \"*=\";",
      "info" : "ReturnStatement[45945-45957]:ReturnStatement[46444-46456]"
    }, {
      "left" : "case Token.ASSIGN_DIV:",
      "right" : "case Token.ASSIGN_DIV:",
      "info" : "SwitchCase[45964-45986]:SwitchCase[46463-46485]"
    }, {
      "left" : "return \"/=\";",
      "right" : "return \"/=\";",
      "info" : "ReturnStatement[45987-45999]:ReturnStatement[46486-46498]"
    }, {
      "left" : "case Token.ASSIGN_MOD:",
      "right" : "case Token.ASSIGN_MOD:",
      "info" : "SwitchCase[46006-46028]:SwitchCase[46505-46527]"
    }, {
      "left" : "return \"%=\";",
      "right" : "return \"%=\";",
      "info" : "ReturnStatement[46029-46041]:ReturnStatement[46528-46540]"
    }, {
      "left" : "case Token.VOID:",
      "right" : "case Token.VOID:",
      "info" : "SwitchCase[46048-46064]:SwitchCase[46547-46563]"
    }, {
      "left" : "return \"void\";",
      "right" : "return \"void\";",
      "info" : "ReturnStatement[46065-46079]:ReturnStatement[46564-46578]"
    }, {
      "left" : "case Token.TYPEOF:",
      "right" : "case Token.TYPEOF:",
      "info" : "SwitchCase[46086-46104]:SwitchCase[46585-46603]"
    }, {
      "left" : "return \"typeof\";",
      "right" : "return \"typeof\";",
      "info" : "ReturnStatement[46105-46121]:ReturnStatement[46604-46620]"
    }, {
      "left" : "case Token.INSTANCEOF:",
      "right" : "case Token.INSTANCEOF:",
      "info" : "SwitchCase[46128-46150]:SwitchCase[46627-46649]"
    }, {
      "left" : "return \"instanceof\";",
      "right" : "return \"instanceof\";",
      "info" : "ReturnStatement[46151-46171]:ReturnStatement[46650-46670]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[46178-46186]:SwitchCase[46677-46685]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[46187-46199]:ReturnStatement[46686-46698]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[46487-46493]:Modifier[46986-46992]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[46494-46500]:SimpleType[46993-46999]"
    }, {
      "left" : "opToStrNoFail",
      "right" : "opToStrNoFail",
      "info" : "SimpleName[46501-46514]:SimpleName[47000-47013]"
    }, {
      "left" : "int operator",
      "right" : "int operator",
      "info" : "SingleVariableDeclaration[46515-46527]:SingleVariableDeclaration[47014-47026]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46529-46716]:Block[47028-47215]"
    }, {
      "left" : "String res = opToStr(operator);",
      "right" : "String res = opToStr(operator);",
      "info" : "VariableDeclarationStatement[46535-46566]:VariableDeclarationStatement[47034-47065]"
    }, {
      "left" : "if (res == null)",
      "right" : "if (res == null)",
      "info" : "IfStatement[46571-46696]:IfStatement[47070-47195]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46588-46696]:Block[47087-47195]"
    }, {
      "left" : "throw new Error(\"Unknown op \" + operator + \": \" +\n                      Token.name(operator));",
      "right" : "throw new Error(\"Unknown op \" + operator + \": \" +\n                      Token.name(operator));",
      "info" : "ThrowStatement[46596-46690]:ThrowStatement[47095-47189]"
    }, {
      "left" : "return res;",
      "right" : "return res;",
      "info" : "ReturnStatement[46701-46712]:ReturnStatement[47200-47211]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[46804-46810]:Modifier[47303-47309]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[46811-46818]:PrimitiveType[47310-47317]"
    }, {
      "left" : "containsType",
      "right" : "containsType",
      "info" : "SimpleName[46819-46831]:SimpleName[47318-47330]"
    }, {
      "left" : "Node node",
      "right" : "Node node",
      "info" : "SingleVariableDeclaration[46832-46841]:SingleVariableDeclaration[47331-47340]"
    }, {
      "left" : "int type",
      "right" : "int type",
      "info" : "SingleVariableDeclaration[46873-46881]:SingleVariableDeclaration[47372-47380]"
    }, {
      "left" : "Predicate<Node> traverseChildrenPred",
      "right" : "Predicate<Node> traverseChildrenPred",
      "info" : "SingleVariableDeclaration[46913-46949]:SingleVariableDeclaration[47412-47448]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46951-47025]:Block[47450-47524]"
    }, {
      "left" : "return has(node, new MatchNodeType(type), traverseChildrenPred);",
      "right" : "return has(node, new MatchNodeType(type), traverseChildrenPred);",
      "info" : "ReturnStatement[46957-47021]:ReturnStatement[47456-47520]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[47113-47119]:Modifier[47612-47618]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[47120-47127]:PrimitiveType[47619-47626]"
    }, {
      "left" : "containsType",
      "right" : "containsType",
      "info" : "SimpleName[47128-47140]:SimpleName[47627-47639]"
    }, {
      "left" : "Node node",
      "right" : "Node node",
      "info" : "SingleVariableDeclaration[47141-47150]:SingleVariableDeclaration[47640-47649]"
    }, {
      "left" : "int type",
      "right" : "int type",
      "info" : "SingleVariableDeclaration[47152-47160]:SingleVariableDeclaration[47651-47659]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47162-47235]:Block[47661-47734]"
    }, {
      "left" : "return containsType(node, type, Predicates.<Node>alwaysTrue());",
      "right" : "return containsType(node, type, Predicates.<Node>alwaysTrue());",
      "info" : "ReturnStatement[47168-47231]:ReturnStatement[47667-47730]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[47455-47461]:Modifier[47954-47960]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[47462-47466]:PrimitiveType[47961-47965]"
    }, {
      "left" : "redeclareVarsInsideBranch",
      "right" : "redeclareVarsInsideBranch",
      "info" : "SimpleName[47467-47492]:SimpleName[47966-47991]"
    }, {
      "left" : "Node branch",
      "right" : "Node branch",
      "info" : "SingleVariableDeclaration[47493-47504]:SingleVariableDeclaration[47992-48003]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47506-47987]:Block[48005-48486]"
    }, {
      "left" : "Collection<Node> vars = getVarsDeclaredInBranch(branch);",
      "right" : "Collection<Node> vars = getVarsDeclaredInBranch(branch);",
      "info" : "VariableDeclarationStatement[47512-47568]:VariableDeclarationStatement[48011-48067]"
    }, {
      "left" : "if (vars.isEmpty())",
      "right" : "if (vars.isEmpty())",
      "info" : "IfStatement[47573-47614]:IfStatement[48072-48113]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47593-47614]:Block[48092-48113]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[47601-47608]:ReturnStatement[48100-48107]"
    }, {
      "left" : "Node parent = getAddingRoot(branch);",
      "right" : "Node parent = getAddingRoot(branch);",
      "info" : "VariableDeclarationStatement[47620-47656]:VariableDeclarationStatement[48119-48155]"
    }, {
      "left" : "for (Node nameNode : vars)",
      "right" : "for (Node nameNode : vars)",
      "info" : "EnhancedForStatement[47661-47983]:EnhancedForStatement[48160-48482]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47688-47983]:Block[48187-48482]"
    }, {
      "left" : "Node var = new Node(\n          Token.VAR,\n          Node.newString(Token.NAME, nameNode.getString())\n              .copyInformationFrom(nameNode))\n          .copyInformationFrom(nameNode);",
      "right" : "Node var = new Node(\n          Token.VAR,\n          Node.newString(Token.NAME, nameNode.getString())\n              .copyInformationFrom(nameNode))\n          .copyInformationFrom(nameNode);",
      "info" : "VariableDeclarationStatement[47696-47884]:VariableDeclarationStatement[48195-48383]"
    }, {
      "left" : "copyNameAnnotations(nameNode, var.getFirstChild());",
      "right" : "copyNameAnnotations(nameNode, var.getFirstChild());",
      "info" : "ExpressionStatement[47891-47942]:ExpressionStatement[48390-48441]"
    }, {
      "left" : "parent.addChildToFront(var);",
      "right" : "parent.addChildToFront(var);",
      "info" : "ExpressionStatement[47949-47977]:ExpressionStatement[48448-48476]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[48099-48105]:Modifier[48598-48604]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[48106-48110]:PrimitiveType[48605-48609]"
    }, {
      "left" : "copyNameAnnotations",
      "right" : "copyNameAnnotations",
      "info" : "SimpleName[48111-48130]:SimpleName[48610-48629]"
    }, {
      "left" : "Node source",
      "right" : "Node source",
      "info" : "SingleVariableDeclaration[48131-48142]:SingleVariableDeclaration[48630-48641]"
    }, {
      "left" : "Node destination",
      "right" : "Node destination",
      "info" : "SingleVariableDeclaration[48144-48160]:SingleVariableDeclaration[48643-48659]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48162-48292]:Block[48661-48791]"
    }, {
      "left" : "if (source.getBooleanProp(Node.IS_CONSTANT_NAME))",
      "right" : "if (source.getBooleanProp(Node.IS_CONSTANT_NAME))",
      "info" : "IfStatement[48168-48288]:IfStatement[48667-48787]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48218-48288]:Block[48717-48787]"
    }, {
      "left" : "destination.putBooleanProp(Node.IS_CONSTANT_NAME, true);",
      "right" : "destination.putBooleanProp(Node.IS_CONSTANT_NAME, true);",
      "info" : "ExpressionStatement[48226-48282]:ExpressionStatement[48725-48781]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[48413-48420]:Modifier[48912-48919]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[48421-48427]:Modifier[48920-48926]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[48428-48432]:SimpleType[48927-48931]"
    }, {
      "left" : "getAddingRoot",
      "right" : "getAddingRoot",
      "info" : "SimpleName[48433-48446]:SimpleName[48932-48945]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[48447-48453]:SingleVariableDeclaration[48946-48952]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48455-49118]:Block[48954-49617]"
    }, {
      "left" : "Node addingRoot = null;",
      "right" : "Node addingRoot = null;",
      "info" : "VariableDeclarationStatement[48461-48484]:VariableDeclarationStatement[48960-48983]"
    }, {
      "left" : "Node ancestor = n;",
      "right" : "Node ancestor = n;",
      "info" : "VariableDeclarationStatement[48489-48507]:VariableDeclarationStatement[48988-49006]"
    }, {
      "left" : "while (null != (ancestor = ancestor.getParent()))",
      "right" : "while (null != (ancestor = ancestor.getParent()))",
      "info" : "WhileStatement[48512-48798]:WhileStatement[49011-49297]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48562-48798]:Block[49061-49297]"
    }, {
      "left" : "int type = ancestor.getType();",
      "right" : "int type = ancestor.getType();",
      "info" : "VariableDeclarationStatement[48570-48600]:VariableDeclarationStatement[49069-49099]"
    }, {
      "left" : "if (type == Token.SCRIPT)",
      "right" : "if (type == Token.SCRIPT)",
      "info" : "IfStatement[48607-48792]:IfStatement[49106-49291]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48633-48688]:Block[49132-49187]"
    }, {
      "left" : "addingRoot = ancestor;",
      "right" : "addingRoot = ancestor;",
      "info" : "ExpressionStatement[48643-48665]:ExpressionStatement[49142-49164]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[48674-48680]:BreakStatement[49173-49179]"
    }, {
      "left" : "if (type == Token.FUNCTION)",
      "right" : "if (type == Token.FUNCTION)",
      "info" : "IfStatement[48694-48792]:IfStatement[49193-49291]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48722-48792]:Block[49221-49291]"
    }, {
      "left" : "addingRoot = ancestor.getLastChild();",
      "right" : "addingRoot = ancestor.getLastChild();",
      "info" : "ExpressionStatement[48732-48769]:ExpressionStatement[49231-49268]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[48778-48784]:BreakStatement[49277-49283]"
    }, {
      "left" : "Preconditions.checkState(addingRoot.getType() == Token.BLOCK ||\n        addingRoot.getType() == Token.SCRIPT);",
      "right" : "Preconditions.checkState(addingRoot.getType() == Token.BLOCK ||\n        addingRoot.getType() == Token.SCRIPT);",
      "info" : "ExpressionStatement[48851-48961]:ExpressionStatement[49350-49460]"
    }, {
      "left" : "Preconditions.checkState(addingRoot.getFirstChild() == null ||\n        addingRoot.getFirstChild().getType() != Token.SCRIPT);",
      "right" : "Preconditions.checkState(addingRoot.getFirstChild() == null ||\n        addingRoot.getFirstChild().getType() != Token.SCRIPT);",
      "info" : "ExpressionStatement[48966-49091]:ExpressionStatement[49465-49590]"
    }, {
      "left" : "return addingRoot;",
      "right" : "return addingRoot;",
      "info" : "ReturnStatement[49096-49114]:ReturnStatement[49595-49613]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[49188-49194]:Modifier[49687-49693]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[49195-49201]:Modifier[49694-49700]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[49202-49206]:SimpleType[49701-49705]"
    }, {
      "left" : "newFunctionNode",
      "right" : "newFunctionNode",
      "info" : "SimpleName[49207-49222]:SimpleName[49706-49721]"
    }, {
      "left" : "String name",
      "right" : "String name",
      "info" : "SingleVariableDeclaration[49223-49234]:SingleVariableDeclaration[49722-49733]"
    }, {
      "left" : "List<Node> params",
      "right" : "List<Node> params",
      "info" : "SingleVariableDeclaration[49236-49253]:SingleVariableDeclaration[49735-49752]"
    }, {
      "left" : "Node body",
      "right" : "Node body",
      "info" : "SingleVariableDeclaration[49261-49270]:SingleVariableDeclaration[49760-49769]"
    }, {
      "left" : "int lineno",
      "right" : "int lineno",
      "info" : "SingleVariableDeclaration[49272-49282]:SingleVariableDeclaration[49771-49781]"
    }, {
      "left" : "int charno",
      "right" : "int charno",
      "info" : "SingleVariableDeclaration[49284-49294]:SingleVariableDeclaration[49783-49793]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49296-49699]:Block[49795-50198]"
    }, {
      "left" : "Node parameterParen = new Node(Token.LP, lineno, charno);",
      "right" : "Node parameterParen = new Node(Token.LP, lineno, charno);",
      "info" : "VariableDeclarationStatement[49302-49359]:VariableDeclarationStatement[49801-49858]"
    }, {
      "left" : "for (Node param : params)",
      "right" : "for (Node param : params)",
      "info" : "EnhancedForStatement[49364-49441]:EnhancedForStatement[49863-49940]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49390-49441]:Block[49889-49940]"
    }, {
      "left" : "parameterParen.addChildToBack(param);",
      "right" : "parameterParen.addChildToBack(param);",
      "info" : "ExpressionStatement[49398-49435]:ExpressionStatement[49897-49934]"
    }, {
      "left" : "Node function = new Node(Token.FUNCTION, lineno, charno);",
      "right" : "Node function = new Node(Token.FUNCTION, lineno, charno);",
      "info" : "VariableDeclarationStatement[49446-49503]:VariableDeclarationStatement[49945-50002]"
    }, {
      "left" : "function.addChildrenToBack(\n        Node.newString(Token.NAME, name, lineno, charno));",
      "right" : "function.addChildrenToBack(\n        Node.newString(Token.NAME, name, lineno, charno));",
      "info" : "ExpressionStatement[49508-49594]:ExpressionStatement[50007-50093]"
    }, {
      "left" : "function.addChildToBack(parameterParen);",
      "right" : "function.addChildToBack(parameterParen);",
      "info" : "ExpressionStatement[49599-49639]:ExpressionStatement[50098-50138]"
    }, {
      "left" : "function.addChildToBack(body);",
      "right" : "function.addChildToBack(body);",
      "info" : "ExpressionStatement[49644-49674]:ExpressionStatement[50143-50173]"
    }, {
      "left" : "return function;",
      "right" : "return function;",
      "info" : "ReturnStatement[49679-49695]:ReturnStatement[50178-50194]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[49985-49991]:Modifier[50484-50490]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[49992-49998]:Modifier[50491-50497]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[49999-50003]:SimpleType[50498-50502]"
    }, {
      "left" : "newQualifiedNameNode",
      "right" : "newQualifiedNameNode",
      "info" : "SimpleName[50004-50024]:SimpleName[50503-50523]"
    }, {
      "left" : "String name",
      "right" : "String name",
      "info" : "SingleVariableDeclaration[50025-50036]:SingleVariableDeclaration[50524-50535]"
    }, {
      "left" : "int lineno",
      "right" : "int lineno",
      "info" : "SingleVariableDeclaration[50038-50048]:SingleVariableDeclaration[50537-50547]"
    }, {
      "left" : "int charno",
      "right" : "int charno",
      "info" : "SingleVariableDeclaration[50050-50060]:SingleVariableDeclaration[50549-50559]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50062-50756]:Block[50561-51255]"
    }, {
      "left" : "int endPos = name.indexOf('.');",
      "right" : "int endPos = name.indexOf('.');",
      "info" : "VariableDeclarationStatement[50068-50099]:VariableDeclarationStatement[50567-50598]"
    }, {
      "left" : "if (endPos == -1)",
      "right" : "if (endPos == -1)",
      "info" : "IfStatement[50104-50192]:IfStatement[50603-50691]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50122-50192]:Block[50621-50691]"
    }, {
      "left" : "return Node.newString(Token.NAME, name, lineno, charno);",
      "right" : "return Node.newString(Token.NAME, name, lineno, charno);",
      "info" : "ReturnStatement[50130-50186]:ReturnStatement[50629-50685]"
    }, {
      "left" : "Node node = Node.newString(Token.NAME, name.substring(0, endPos),\n                               lineno, charno);",
      "right" : "Node node = Node.newString(Token.NAME, name.substring(0, endPos),\n                               lineno, charno);",
      "info" : "VariableDeclarationStatement[50197-50310]:VariableDeclarationStatement[50696-50809]"
    }, {
      "left" : "int startPos;",
      "right" : "int startPos;",
      "info" : "VariableDeclarationStatement[50315-50328]:VariableDeclarationStatement[50814-50827]"
    }, {
      "left" : "do{...}",
      "right" : "do{...}",
      "info" : "DoStatement[50333-50734]:DoStatement[50832-51233]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50336-50712]:Block[50835-51211]"
    }, {
      "left" : "startPos = endPos + 1;",
      "right" : "startPos = endPos + 1;",
      "info" : "ExpressionStatement[50344-50366]:ExpressionStatement[50843-50865]"
    }, {
      "left" : "endPos = name.indexOf('.', startPos);",
      "right" : "endPos = name.indexOf('.', startPos);",
      "info" : "ExpressionStatement[50373-50410]:ExpressionStatement[50872-50909]"
    }, {
      "left" : "String part = (endPos == -1\n                     ? name.substring(startPos)\n                     : name.substring(startPos, endPos));",
      "right" : "String part = (endPos == -1\n                     ? name.substring(startPos)\n                     : name.substring(startPos, endPos));",
      "info" : "VariableDeclarationStatement[50417-50550]:VariableDeclarationStatement[50916-51049]"
    }, {
      "left" : "node = new Node(Token.GETPROP, node,\n                      Node.newString(Token.STRING, part, lineno, charno),\n                      lineno, charno);",
      "right" : "node = new Node(Token.GETPROP, node,\n                      Node.newString(Token.STRING, part, lineno, charno),\n                      lineno, charno);",
      "info" : "ExpressionStatement[50557-50706]:ExpressionStatement[51056-51205]"
    }, {
      "left" : "return node;",
      "right" : "return node;",
      "info" : "ReturnStatement[50740-50752]:ReturnStatement[51239-51251]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[51287-51293]:Modifier[51786-51792]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[51294-51298]:SimpleType[51793-51797]"
    }, {
      "left" : "newQualifiedNameNode",
      "right" : "newQualifiedNameNode",
      "info" : "SimpleName[51299-51319]:SimpleName[51798-51818]"
    }, {
      "left" : "String name",
      "right" : "String name",
      "info" : "SingleVariableDeclaration[51320-51331]:SingleVariableDeclaration[51819-51830]"
    }, {
      "left" : "Node basisNode",
      "right" : "Node basisNode",
      "info" : "SingleVariableDeclaration[51333-51347]:SingleVariableDeclaration[51832-51846]"
    }, {
      "left" : "String originalName",
      "right" : "String originalName",
      "info" : "SingleVariableDeclaration[51355-51374]:SingleVariableDeclaration[51854-51873]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51376-51506]:Block[51875-52005]"
    }, {
      "left" : "Node node = newQualifiedNameNode(name, -1, -1);",
      "right" : "Node node = newQualifiedNameNode(name, -1, -1);",
      "info" : "VariableDeclarationStatement[51382-51429]:VariableDeclarationStatement[51881-51928]"
    }, {
      "left" : "setDebugInformation(node, basisNode, originalName);",
      "right" : "setDebugInformation(node, basisNode, originalName);",
      "info" : "ExpressionStatement[51434-51485]:ExpressionStatement[51933-51984]"
    }, {
      "left" : "return node;",
      "right" : "return node;",
      "info" : "ReturnStatement[51490-51502]:ReturnStatement[51989-52001]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[51596-51602]:Modifier[52095-52101]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[51603-51607]:SimpleType[52102-52106]"
    }, {
      "left" : "getRootOfQualifiedName",
      "right" : "getRootOfQualifiedName",
      "info" : "SimpleName[51608-51630]:SimpleName[52107-52129]"
    }, {
      "left" : "Node qName",
      "right" : "Node qName",
      "info" : "SingleVariableDeclaration[51631-51641]:SingleVariableDeclaration[52130-52140]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51643-51914]:Block[52142-52413]"
    }, {
      "left" : "for (Node current = qName; true;\n         current = current.getFirstChild())",
      "right" : "for (Node current = qName; true;\n         current = current.getFirstChild())",
      "info" : "ForStatement[51649-51910]:ForStatement[52148-52409]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51726-51910]:Block[52225-52409]"
    }, {
      "left" : "int type = current.getType();",
      "right" : "int type = current.getType();",
      "info" : "VariableDeclarationStatement[51734-51763]:VariableDeclarationStatement[52233-52262]"
    }, {
      "left" : "if (type == Token.NAME || type == Token.THIS)",
      "right" : "if (type == Token.NAME || type == Token.THIS)",
      "info" : "IfStatement[51770-51849]:IfStatement[52269-52348]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51816-51849]:Block[52315-52348]"
    }, {
      "left" : "return current;",
      "right" : "return current;",
      "info" : "ReturnStatement[51826-51841]:ReturnStatement[52325-52340]"
    }, {
      "left" : "Preconditions.checkState(type == Token.GETPROP);",
      "right" : "Preconditions.checkState(type == Token.GETPROP);",
      "info" : "ExpressionStatement[51856-51904]:ExpressionStatement[52355-52403]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[52226-52232]:Modifier[52725-52731]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[52233-52237]:PrimitiveType[52732-52736]"
    }, {
      "left" : "setDebugInformation",
      "right" : "setDebugInformation",
      "info" : "SimpleName[52238-52257]:SimpleName[52737-52756]"
    }, {
      "left" : "Node node",
      "right" : "Node node",
      "info" : "SingleVariableDeclaration[52258-52267]:SingleVariableDeclaration[52757-52766]"
    }, {
      "left" : "Node basisNode",
      "right" : "Node basisNode",
      "info" : "SingleVariableDeclaration[52269-52283]:SingleVariableDeclaration[52768-52782]"
    }, {
      "left" : "String originalName",
      "right" : "String originalName",
      "info" : "SingleVariableDeclaration[52319-52338]:SingleVariableDeclaration[52818-52837]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52340-52449]:Block[52839-52948]"
    }, {
      "left" : "node.copyInformationFromForTree(basisNode);",
      "right" : "node.copyInformationFromForTree(basisNode);",
      "info" : "ExpressionStatement[52346-52389]:ExpressionStatement[52845-52888]"
    }, {
      "left" : "node.putProp(Node.ORIGINALNAME_PROP, originalName);",
      "right" : "node.putProp(Node.ORIGINALNAME_PROP, originalName);",
      "info" : "ExpressionStatement[52394-52445]:ExpressionStatement[52893-52944]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[52779-52785]:Modifier[53278-53284]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[52786-52790]:SimpleType[53285-53289]"
    }, {
      "left" : "newName",
      "right" : "newName",
      "info" : "SimpleName[52791-52798]:SimpleName[53290-53297]"
    }, {
      "left" : "String name",
      "right" : "String name",
      "info" : "SingleVariableDeclaration[52799-52810]:SingleVariableDeclaration[53298-53309]"
    }, {
      "left" : "Node basisNode",
      "right" : "Node basisNode",
      "info" : "SingleVariableDeclaration[52812-52826]:SingleVariableDeclaration[53311-53325]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52828-52953]:Block[53327-53452]"
    }, {
      "left" : "Node nameNode = Node.newString(Token.NAME, name);",
      "right" : "Node nameNode = Node.newString(Token.NAME, name);",
      "info" : "VariableDeclarationStatement[52834-52883]:VariableDeclarationStatement[53333-53382]"
    }, {
      "left" : "nameNode.copyInformationFrom(basisNode);",
      "right" : "nameNode.copyInformationFrom(basisNode);",
      "info" : "ExpressionStatement[52888-52928]:ExpressionStatement[53387-53427]"
    }, {
      "left" : "return nameNode;",
      "right" : "return nameNode;",
      "info" : "ReturnStatement[52933-52949]:ReturnStatement[53432-53448]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[53470-53476]:Modifier[53969-53975]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[53477-53481]:SimpleType[53976-53980]"
    }, {
      "left" : "newName",
      "right" : "newName",
      "info" : "SimpleName[53482-53489]:SimpleName[53981-53988]"
    }, {
      "left" : "String name",
      "right" : "String name",
      "info" : "SingleVariableDeclaration[53490-53501]:SingleVariableDeclaration[53989-54000]"
    }, {
      "left" : "Node basisNode",
      "right" : "Node basisNode",
      "info" : "SingleVariableDeclaration[53503-53517]:SingleVariableDeclaration[54002-54016]"
    }, {
      "left" : "String originalName",
      "right" : "String originalName",
      "info" : "SingleVariableDeclaration[53519-53538]:SingleVariableDeclaration[54018-54037]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53540-53672]:Block[54039-54171]"
    }, {
      "left" : "Node nameNode = newName(name, basisNode);",
      "right" : "Node nameNode = newName(name, basisNode);",
      "info" : "VariableDeclarationStatement[53546-53587]:VariableDeclarationStatement[54045-54086]"
    }, {
      "left" : "nameNode.putProp(Node.ORIGINALNAME_PROP, originalName);",
      "right" : "nameNode.putProp(Node.ORIGINALNAME_PROP, originalName);",
      "info" : "ExpressionStatement[53592-53647]:ExpressionStatement[54091-54146]"
    }, {
      "left" : "return nameNode;",
      "right" : "return nameNode;",
      "info" : "ReturnStatement[53652-53668]:ReturnStatement[54151-54167]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[54272-54278]:Modifier[54771-54777]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[54279-54286]:PrimitiveType[54778-54785]"
    }, {
      "left" : "isLatin",
      "right" : "isLatin",
      "info" : "SimpleName[54287-54294]:SimpleName[54786-54793]"
    }, {
      "left" : "String s",
      "right" : "String s",
      "info" : "SingleVariableDeclaration[54295-54303]:SingleVariableDeclaration[54794-54802]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54305-54543]:Block[54804-55042]"
    }, {
      "left" : "char LARGEST_BASIC_LATIN = 0x7f;",
      "right" : "char LARGEST_BASIC_LATIN = 0x7f;",
      "info" : "VariableDeclarationStatement[54311-54343]:VariableDeclarationStatement[54810-54842]"
    }, {
      "left" : "int len = s.length();",
      "right" : "int len = s.length();",
      "info" : "VariableDeclarationStatement[54348-54369]:VariableDeclarationStatement[54847-54868]"
    }, {
      "left" : "for (int index = 0; index < len; index++)",
      "right" : "for (int index = 0; index < len; index++)",
      "info" : "ForStatement[54374-54522]:ForStatement[54873-55021]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54416-54522]:Block[54915-55021]"
    }, {
      "left" : "char c = s.charAt(index);",
      "right" : "char c = s.charAt(index);",
      "info" : "VariableDeclarationStatement[54424-54449]:VariableDeclarationStatement[54923-54948]"
    }, {
      "left" : "if (c > LARGEST_BASIC_LATIN)",
      "right" : "if (c > LARGEST_BASIC_LATIN)",
      "info" : "IfStatement[54456-54516]:IfStatement[54955-55015]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54485-54516]:Block[54984-55015]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[54495-54508]:ReturnStatement[54994-55007]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[54527-54539]:ReturnStatement[55026-55038]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[54699-54705]:Modifier[55198-55204]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[54706-54713]:PrimitiveType[55205-55212]"
    }, {
      "left" : "isValidPropertyName",
      "right" : "isValidPropertyName",
      "info" : "SimpleName[54714-54733]:SimpleName[55213-55232]"
    }, {
      "left" : "String name",
      "right" : "String name",
      "info" : "SingleVariableDeclaration[54734-54745]:SingleVariableDeclaration[55233-55244]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54747-55208]:Block[55246-55707]"
    }, {
      "left" : "return TokenStream.isJSIdentifier(name) &&\n        !TokenStream.isKeyword(name) &&\n        // no Unicode escaped characters - some browsers are less tolerant\n        // of Unicode characters that might be valid according to the\n        // language spec.\n        // Note that by this point, unicode escapes have been converted\n        // to UTF-16 characters, so we're only searching for character\n        // values, not escapes.\n        isLatin(name);",
      "right" : "return TokenStream.isJSIdentifier(name) &&\n        !TokenStream.isKeyword(name) &&\n        // no Unicode escaped characters - some browsers are less tolerant\n        // of Unicode characters that might be valid according to the\n        // language spec.\n        // Note that by this point, unicode escapes have been converted\n        // to UTF-16 characters, so we're only searching for character\n        // values, not escapes.\n        isLatin(name);",
      "info" : "ReturnStatement[54753-55204]:ReturnStatement[55252-55703]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[55212-55219]:Modifier[55711-55718]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[55220-55226]:Modifier[55719-55725]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[55227-55232]:TYPE_DECLARATION_KIND[55726-55731]"
    }, {
      "left" : "VarCollector",
      "right" : "VarCollector",
      "info" : "SimpleName[55233-55245]:SimpleName[55732-55744]"
    }, {
      "left" : "Visitor",
      "right" : "Visitor",
      "info" : "SimpleType[55257-55264]:SimpleType[55756-55763]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[55332-55338]:Modifier[55831-55837]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[55339-55343]:PrimitiveType[55838-55842]"
    }, {
      "left" : "visit",
      "right" : "visit",
      "info" : "SimpleName[55344-55349]:SimpleName[55843-55848]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[55350-55356]:SingleVariableDeclaration[55849-55855]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55358-55645]:Block[55857-56144]"
    }, {
      "left" : "if (n.getType() == Token.NAME)",
      "right" : "if (n.getType() == Token.NAME)",
      "info" : "IfStatement[55366-55639]:IfStatement[55865-56138]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55397-55639]:Block[55896-56138]"
    }, {
      "left" : "Node parent = n.getParent();",
      "right" : "Node parent = n.getParent();",
      "info" : "VariableDeclarationStatement[55407-55435]:VariableDeclarationStatement[55906-55934]"
    }, {
      "left" : "if (parent != null && parent.getType() == Token.VAR)",
      "right" : "if (parent != null && parent.getType() == Token.VAR)",
      "info" : "IfStatement[55444-55631]:IfStatement[55943-56130]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55497-55631]:Block[55996-56130]"
    }, {
      "left" : "String name = n.getString();",
      "right" : "String name = n.getString();",
      "info" : "VariableDeclarationStatement[55509-55537]:VariableDeclarationStatement[56008-56036]"
    }, {
      "left" : "if (!vars.containsKey(name))",
      "right" : "if (!vars.containsKey(name))",
      "info" : "IfStatement[55548-55621]:IfStatement[56047-56120]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55577-55621]:Block[56076-56120]"
    }, {
      "left" : "vars.put(name, n);",
      "right" : "vars.put(name, n);",
      "info" : "ExpressionStatement[55591-55609]:ExpressionStatement[56090-56108]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[55746-55752]:Modifier[56245-56251]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[55753-55759]:Modifier[56252-56258]"
    }, {
      "left" : "Collection<Node>",
      "right" : "Collection<Node>",
      "info" : "ParameterizedType[55760-55776]:ParameterizedType[56259-56275]"
    }, {
      "left" : "getVarsDeclaredInBranch",
      "right" : "getVarsDeclaredInBranch",
      "info" : "SimpleName[55777-55800]:SimpleName[56276-56299]"
    }, {
      "left" : "Node root",
      "right" : "Node root",
      "info" : "SingleVariableDeclaration[55801-55810]:SingleVariableDeclaration[56300-56309]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55812-55987]:Block[56311-56486]"
    }, {
      "left" : "VarCollector collector = new VarCollector();",
      "right" : "VarCollector collector = new VarCollector();",
      "info" : "VariableDeclarationStatement[55818-55862]:VariableDeclarationStatement[56317-56361]"
    }, {
      "left" : "visitPreOrder(\n        root,\n        collector,\n        new MatchNotFunction());",
      "right" : "visitPreOrder(\n        root,\n        collector,\n        new MatchNotFunction());",
      "info" : "ExpressionStatement[55867-55947]:ExpressionStatement[56366-56446]"
    }, {
      "left" : "return collector.vars.values();",
      "right" : "return collector.vars.values();",
      "info" : "ReturnStatement[55952-55983]:ReturnStatement[56451-56482]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[56109-56115]:Modifier[56608-56614]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[56116-56123]:PrimitiveType[56615-56622]"
    }, {
      "left" : "isPrototypePropertyDeclaration",
      "right" : "isPrototypePropertyDeclaration",
      "info" : "SimpleName[56124-56154]:SimpleName[56623-56653]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[56155-56161]:SingleVariableDeclaration[56654-56660]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56163-56289]:Block[56662-56788]"
    }, {
      "left" : "if (!isExprAssign(n))",
      "right" : "if (!isExprAssign(n))",
      "info" : "IfStatement[56169-56218]:IfStatement[56668-56717]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56191-56218]:Block[56690-56717]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[56199-56212]:ReturnStatement[56698-56711]"
    }, {
      "left" : "return isPrototypeProperty(n.getFirstChild().getFirstChild());",
      "right" : "return isPrototypeProperty(n.getFirstChild().getFirstChild());",
      "info" : "ReturnStatement[56223-56285]:ReturnStatement[56722-56784]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[56293-56299]:Modifier[56792-56798]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[56300-56307]:PrimitiveType[56799-56806]"
    }, {
      "left" : "isPrototypeProperty",
      "right" : "isPrototypeProperty",
      "info" : "SimpleName[56308-56327]:SimpleName[56807-56826]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[56328-56334]:SingleVariableDeclaration[56827-56833]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56336-56529]:Block[56835-57028]"
    }, {
      "left" : "String lhsString = n.getQualifiedName();",
      "right" : "String lhsString = n.getQualifiedName();",
      "info" : "VariableDeclarationStatement[56342-56382]:VariableDeclarationStatement[56841-56881]"
    }, {
      "left" : "if (lhsString == null)",
      "right" : "if (lhsString == null)",
      "info" : "IfStatement[56387-56437]:IfStatement[56886-56936]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56410-56437]:Block[56909-56936]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[56418-56431]:ReturnStatement[56917-56930]"
    }, {
      "left" : "int prototypeIdx = lhsString.indexOf(\".prototype.\");",
      "right" : "int prototypeIdx = lhsString.indexOf(\".prototype.\");",
      "info" : "VariableDeclarationStatement[56442-56494]:VariableDeclarationStatement[56941-56993]"
    }, {
      "left" : "return prototypeIdx != -1;",
      "right" : "return prototypeIdx != -1;",
      "info" : "ReturnStatement[56499-56525]:ReturnStatement[56998-57024]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[56609-56615]:Modifier[57108-57114]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[56616-56620]:SimpleType[57115-57119]"
    }, {
      "left" : "getPrototypeClassName",
      "right" : "getPrototypeClassName",
      "info" : "SimpleName[56621-56642]:SimpleName[57120-57141]"
    }, {
      "left" : "Node qName",
      "right" : "Node qName",
      "info" : "SingleVariableDeclaration[56643-56653]:SingleVariableDeclaration[57142-57152]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56655-56892]:Block[57154-57391]"
    }, {
      "left" : "Node cur = qName;",
      "right" : "Node cur = qName;",
      "info" : "VariableDeclarationStatement[56661-56678]:VariableDeclarationStatement[57160-57177]"
    }, {
      "left" : "while (isGetProp(cur))",
      "right" : "while (isGetProp(cur))",
      "info" : "WhileStatement[56683-56871]:WhileStatement[57182-57370]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56706-56871]:Block[57205-57370]"
    }, {
      "left" : "if (cur.getLastChild().getString().equals(\"prototype\"))",
      "right" : "if (cur.getLastChild().getString().equals(\"prototype\"))",
      "info" : "IfStatement[56714-56865]:IfStatement[57213-57364]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56770-56815]:Block[57269-57314]"
    }, {
      "left" : "return cur.getFirstChild();",
      "right" : "return cur.getFirstChild();",
      "info" : "ReturnStatement[56780-56807]:ReturnStatement[57279-57306]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56821-56865]:Block[57320-57364]"
    }, {
      "left" : "cur = cur.getFirstChild();",
      "right" : "cur = cur.getFirstChild();",
      "info" : "ExpressionStatement[56831-56857]:ExpressionStatement[57330-57356]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[56876-56888]:ReturnStatement[57375-57387]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[56982-56988]:Modifier[57481-57487]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[56989-56995]:SimpleType[57488-57494]"
    }, {
      "left" : "getPrototypePropertyName",
      "right" : "getPrototypePropertyName",
      "info" : "SimpleName[56996-57020]:SimpleName[57495-57519]"
    }, {
      "left" : "Node qName",
      "right" : "Node qName",
      "info" : "SingleVariableDeclaration[57021-57031]:SingleVariableDeclaration[57520-57530]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57033-57254]:Block[57532-57753]"
    }, {
      "left" : "String qNameStr = qName.getQualifiedName();",
      "right" : "String qNameStr = qName.getQualifiedName();",
      "info" : "VariableDeclarationStatement[57039-57082]:VariableDeclarationStatement[57538-57581]"
    }, {
      "left" : "int prototypeIdx = qNameStr.lastIndexOf(\".prototype.\");",
      "right" : "int prototypeIdx = qNameStr.lastIndexOf(\".prototype.\");",
      "info" : "VariableDeclarationStatement[57087-57142]:VariableDeclarationStatement[57586-57641]"
    }, {
      "left" : "int memberIndex = prototypeIdx + \".prototype\".length() + 1;",
      "right" : "int memberIndex = prototypeIdx + \".prototype\".length() + 1;",
      "info" : "VariableDeclarationStatement[57147-57206]:VariableDeclarationStatement[57646-57705]"
    }, {
      "left" : "return qNameStr.substring(memberIndex);",
      "right" : "return qNameStr.substring(memberIndex);",
      "info" : "ReturnStatement[57211-57250]:ReturnStatement[57710-57749]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[57337-57343]:Modifier[57836-57842]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[57344-57348]:SimpleType[57843-57847]"
    }, {
      "left" : "newUndefinedNode",
      "right" : "newUndefinedNode",
      "info" : "SimpleName[57349-57365]:SimpleName[57848-57864]"
    }, {
      "left" : "Node srcReferenceNode",
      "right" : "Node srcReferenceNode",
      "info" : "SingleVariableDeclaration[57366-57387]:SingleVariableDeclaration[57865-57886]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57389-57641]:Block[57888-58140]"
    }, {
      "left" : "Node node = new Node(Token.VOID, Node.newNumber(0));",
      "right" : "Node node = new Node(Token.VOID, Node.newNumber(0));",
      "info" : "VariableDeclarationStatement[57467-57519]:VariableDeclarationStatement[57966-58018]"
    }, {
      "left" : "if (srcReferenceNode != null)",
      "right" : "if (srcReferenceNode != null)",
      "info" : "IfStatement[57524-57620]:IfStatement[58023-58119]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57554-57620]:Block[58053-58119]"
    }, {
      "left" : "node.copyInformationFromForTree(srcReferenceNode);",
      "right" : "node.copyInformationFromForTree(srcReferenceNode);",
      "info" : "ExpressionStatement[57564-57614]:ExpressionStatement[58063-58113]"
    }, {
      "left" : "return node;",
      "right" : "return node;",
      "info" : "ReturnStatement[57625-57637]:ReturnStatement[58124-58136]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[57736-57742]:Modifier[58235-58241]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[57743-57747]:SimpleType[58242-58246]"
    }, {
      "left" : "newVarNode",
      "right" : "newVarNode",
      "info" : "SimpleName[57748-57758]:SimpleName[58247-58257]"
    }, {
      "left" : "String name",
      "right" : "String name",
      "info" : "SingleVariableDeclaration[57759-57770]:SingleVariableDeclaration[58258-58269]"
    }, {
      "left" : "Node value",
      "right" : "Node value",
      "info" : "SingleVariableDeclaration[57772-57782]:SingleVariableDeclaration[58271-58281]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57784-58114]:Block[58283-58613]"
    }, {
      "left" : "Node nodeName = Node.newString(Token.NAME, name);",
      "right" : "Node nodeName = Node.newString(Token.NAME, name);",
      "info" : "VariableDeclarationStatement[57790-57839]:VariableDeclarationStatement[58289-58338]"
    }, {
      "left" : "if (value != null)",
      "right" : "if (value != null)",
      "info" : "IfStatement[57844-58008]:IfStatement[58343-58507]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57863-58008]:Block[58362-58507]"
    }, {
      "left" : "Preconditions.checkState(value.getNext() == null);",
      "right" : "Preconditions.checkState(value.getNext() == null);",
      "info" : "ExpressionStatement[57871-57921]:ExpressionStatement[58370-58420]"
    }, {
      "left" : "nodeName.addChildToBack(value);",
      "right" : "nodeName.addChildToBack(value);",
      "info" : "ExpressionStatement[57928-57959]:ExpressionStatement[58427-58458]"
    }, {
      "left" : "nodeName.copyInformationFrom(value);",
      "right" : "nodeName.copyInformationFrom(value);",
      "info" : "ExpressionStatement[57966-58002]:ExpressionStatement[58465-58501]"
    }, {
      "left" : "Node var = new Node(Token.VAR, nodeName)\n        .copyInformationFrom(nodeName);",
      "right" : "Node var = new Node(Token.VAR, nodeName)\n        .copyInformationFrom(nodeName);",
      "info" : "VariableDeclarationStatement[58013-58093]:VariableDeclarationStatement[58512-58592]"
    }, {
      "left" : "return var;",
      "right" : "return var;",
      "info" : "ReturnStatement[58099-58110]:ReturnStatement[58598-58609]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[58196-58203]:Modifier[58695-58702]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[58204-58210]:Modifier[58703-58709]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[58211-58216]:TYPE_DECLARATION_KIND[58710-58715]"
    }, {
      "left" : "MatchNameNode",
      "right" : "MatchNameNode",
      "info" : "SimpleName[58217-58230]:SimpleName[58716-58729]"
    }, {
      "left" : "MatchNameNode",
      "right" : "MatchNameNode",
      "info" : "SimpleName[58287-58300]:SimpleName[58786-58799]"
    }, {
      "left" : "String name",
      "right" : "String name",
      "info" : "SingleVariableDeclaration[58301-58312]:SingleVariableDeclaration[58800-58811]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58313-58344]:Block[58812-58843]"
    }, {
      "left" : "this.name = name;",
      "right" : "this.name = name;",
      "info" : "ExpressionStatement[58321-58338]:ExpressionStatement[58820-58837]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[58350-58356]:Modifier[58849-58855]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[58357-58364]:PrimitiveType[58856-58863]"
    }, {
      "left" : "apply",
      "right" : "apply",
      "info" : "SimpleName[58365-58370]:SimpleName[58864-58869]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[58371-58377]:SingleVariableDeclaration[58870-58876]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58379-58466]:Block[58878-58965]"
    }, {
      "left" : "return n.getType() == Token.NAME\n          && n.getString().equals(name);",
      "right" : "return n.getType() == Token.NAME\n          && n.getString().equals(name);",
      "info" : "ReturnStatement[58387-58460]:ReturnStatement[58886-58959]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[58547-58553]:Modifier[59046-59052]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[58554-58559]:TYPE_DECLARATION_KIND[59053-59058]"
    }, {
      "left" : "MatchNodeType",
      "right" : "MatchNodeType",
      "info" : "SimpleName[58560-58573]:SimpleName[59059-59072]"
    }, {
      "left" : "MatchNodeType",
      "right" : "MatchNodeType",
      "info" : "SimpleName[58627-58640]:SimpleName[59126-59139]"
    }, {
      "left" : "int type",
      "right" : "int type",
      "info" : "SingleVariableDeclaration[58641-58649]:SingleVariableDeclaration[59140-59148]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58650-58681]:Block[59149-59180]"
    }, {
      "left" : "this.type = type;",
      "right" : "this.type = type;",
      "info" : "ExpressionStatement[58658-58675]:ExpressionStatement[59157-59174]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[58687-58693]:Modifier[59186-59192]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[58694-58701]:PrimitiveType[59193-59200]"
    }, {
      "left" : "apply",
      "right" : "apply",
      "info" : "SimpleName[58702-58707]:SimpleName[59201-59206]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[58708-58714]:SingleVariableDeclaration[59207-59213]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58716-58757]:Block[59215-59256]"
    }, {
      "left" : "return n.getType() == type;",
      "right" : "return n.getType() == type;",
      "info" : "ReturnStatement[58724-58751]:ReturnStatement[59223-59250]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[58838-58844]:Modifier[59337-59343]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[58845-58850]:TYPE_DECLARATION_KIND[59344-59349]"
    }, {
      "left" : "MatchDeclaration",
      "right" : "MatchDeclaration",
      "info" : "SimpleName[58851-58867]:SimpleName[59350-59366]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[58901-58907]:Modifier[59400-59406]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[58908-58915]:PrimitiveType[59407-59414]"
    }, {
      "left" : "apply",
      "right" : "apply",
      "info" : "SimpleName[58916-58921]:SimpleName[59415-59420]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[58922-58928]:SingleVariableDeclaration[59421-59427]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58930-59004]:Block[59429-59503]"
    }, {
      "left" : "return isFunctionDeclaration(n) || n.getType() == Token.VAR;",
      "right" : "return isFunctionDeclaration(n) || n.getType() == Token.VAR;",
      "info" : "ReturnStatement[58938-58998]:ReturnStatement[59437-59497]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[59086-59092]:Modifier[59585-59591]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[59093-59098]:TYPE_DECLARATION_KIND[59592-59597]"
    }, {
      "left" : "MatchNotFunction",
      "right" : "MatchNotFunction",
      "info" : "SimpleName[59099-59115]:SimpleName[59598-59614]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[59148-59154]:Modifier[59647-59653]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[59155-59162]:PrimitiveType[59654-59661]"
    }, {
      "left" : "apply",
      "right" : "apply",
      "info" : "SimpleName[59163-59168]:SimpleName[59662-59667]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[59169-59175]:SingleVariableDeclaration[59668-59674]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[59177-59213]:Block[59676-59712]"
    }, {
      "left" : "return !isFunction(n);",
      "right" : "return !isFunction(n);",
      "info" : "ReturnStatement[59185-59207]:ReturnStatement[59684-59706]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[59309-59315]:Modifier[59808-59814]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[59316-59321]:TYPE_DECLARATION_KIND[59815-59820]"
    }, {
      "left" : "MatchShallowStatement",
      "right" : "MatchShallowStatement",
      "info" : "SimpleName[59322-59343]:SimpleName[59821-59842]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[59376-59382]:Modifier[59875-59881]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[59383-59390]:PrimitiveType[59882-59889]"
    }, {
      "left" : "apply",
      "right" : "apply",
      "info" : "SimpleName[59391-59396]:SimpleName[59890-59895]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[59397-59403]:SingleVariableDeclaration[59896-59902]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[59405-59624]:Block[59904-60123]"
    }, {
      "left" : "Node parent = n.getParent();",
      "right" : "Node parent = n.getParent();",
      "info" : "VariableDeclarationStatement[59413-59441]:VariableDeclarationStatement[59912-59940]"
    }, {
      "left" : "return n.getType() == Token.BLOCK\n          || (!isFunction(n) && (parent == null\n              || isControlStructure(parent)\n              || isStatementBlock(parent)));",
      "right" : "return n.getType() == Token.BLOCK\n          || (!isFunction(n) && (parent == null\n              || isControlStructure(parent)\n              || isStatementBlock(parent)));",
      "info" : "ReturnStatement[59448-59618]:ReturnStatement[59947-60117]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[59718-59724]:Modifier[60217-60223]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[59725-59728]:PrimitiveType[60224-60227]"
    }, {
      "left" : "getNodeTypeReferenceCount",
      "right" : "getNodeTypeReferenceCount",
      "info" : "SimpleName[59729-59754]:SimpleName[60228-60253]"
    }, {
      "left" : "Node node",
      "right" : "Node node",
      "info" : "SingleVariableDeclaration[59762-59771]:SingleVariableDeclaration[60261-60270]"
    }, {
      "left" : "int type",
      "right" : "int type",
      "info" : "SingleVariableDeclaration[59773-59781]:SingleVariableDeclaration[60272-60280]"
    }, {
      "left" : "Predicate<Node> traverseChildrenPred",
      "right" : "Predicate<Node> traverseChildrenPred",
      "info" : "SingleVariableDeclaration[59783-59819]:SingleVariableDeclaration[60282-60318]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[59821-59900]:Block[60320-60399]"
    }, {
      "left" : "return getCount(node, new MatchNodeType(type), traverseChildrenPred);",
      "right" : "return getCount(node, new MatchNodeType(type), traverseChildrenPred);",
      "info" : "ReturnStatement[59827-59896]:ReturnStatement[60326-60395]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[59979-59985]:Modifier[60478-60484]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[59986-59993]:PrimitiveType[60485-60492]"
    }, {
      "left" : "isNameReferenced",
      "right" : "isNameReferenced",
      "info" : "SimpleName[59994-60010]:SimpleName[60493-60509]"
    }, {
      "left" : "Node node",
      "right" : "Node node",
      "info" : "SingleVariableDeclaration[60011-60020]:SingleVariableDeclaration[60510-60519]"
    }, {
      "left" : "String name",
      "right" : "String name",
      "info" : "SingleVariableDeclaration[60056-60067]:SingleVariableDeclaration[60555-60566]"
    }, {
      "left" : "Predicate<Node> traverseChildrenPred",
      "right" : "Predicate<Node> traverseChildrenPred",
      "info" : "SingleVariableDeclaration[60103-60139]:SingleVariableDeclaration[60602-60638]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60141-60215]:Block[60640-60714]"
    }, {
      "left" : "return has(node, new MatchNameNode(name), traverseChildrenPred);",
      "right" : "return has(node, new MatchNameNode(name), traverseChildrenPred);",
      "info" : "ReturnStatement[60147-60211]:ReturnStatement[60646-60710]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[60294-60300]:Modifier[60793-60799]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[60301-60308]:PrimitiveType[60800-60807]"
    }, {
      "left" : "isNameReferenced",
      "right" : "isNameReferenced",
      "info" : "SimpleName[60309-60325]:SimpleName[60808-60824]"
    }, {
      "left" : "Node node",
      "right" : "Node node",
      "info" : "SingleVariableDeclaration[60326-60335]:SingleVariableDeclaration[60825-60834]"
    }, {
      "left" : "String name",
      "right" : "String name",
      "info" : "SingleVariableDeclaration[60337-60348]:SingleVariableDeclaration[60836-60847]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60350-60427]:Block[60849-60926]"
    }, {
      "left" : "return isNameReferenced(node, name, Predicates.<Node>alwaysTrue());",
      "right" : "return isNameReferenced(node, name, Predicates.<Node>alwaysTrue());",
      "info" : "ReturnStatement[60356-60423]:ReturnStatement[60855-60922]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[60524-60530]:Modifier[61023-61029]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[60531-60534]:PrimitiveType[61030-61033]"
    }, {
      "left" : "getNameReferenceCount",
      "right" : "getNameReferenceCount",
      "info" : "SimpleName[60535-60556]:SimpleName[61034-61055]"
    }, {
      "left" : "Node node",
      "right" : "Node node",
      "info" : "SingleVariableDeclaration[60557-60566]:SingleVariableDeclaration[61056-61065]"
    }, {
      "left" : "String name",
      "right" : "String name",
      "info" : "SingleVariableDeclaration[60568-60579]:SingleVariableDeclaration[61067-61078]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60581-60678]:Block[61080-61177]"
    }, {
      "left" : "return getCount(\n        node, new MatchNameNode(name), Predicates.<Node>alwaysTrue());",
      "right" : "return getCount(\n        node, new MatchNameNode(name), Predicates.<Node>alwaysTrue());",
      "info" : "ReturnStatement[60587-60674]:ReturnStatement[61086-61173]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[60774-60780]:Modifier[61273-61279]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[60781-60788]:PrimitiveType[61280-61287]"
    }, {
      "left" : "has",
      "right" : "has",
      "info" : "SimpleName[60789-60792]:SimpleName[61288-61291]"
    }, {
      "left" : "Node node",
      "right" : "Node node",
      "info" : "SingleVariableDeclaration[60793-60802]:SingleVariableDeclaration[61292-61301]"
    }, {
      "left" : "Predicate<Node> pred",
      "right" : "Predicate<Node> pred",
      "info" : "SingleVariableDeclaration[60825-60845]:SingleVariableDeclaration[61324-61344]"
    }, {
      "left" : "Predicate<Node> traverseChildrenPred",
      "right" : "Predicate<Node> traverseChildrenPred",
      "info" : "SingleVariableDeclaration[60868-60904]:SingleVariableDeclaration[61367-61403]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60906-61209]:Block[61405-61708]"
    }, {
      "left" : "if (pred.apply(node))",
      "right" : "if (pred.apply(node))",
      "info" : "IfStatement[60912-60960]:IfStatement[61411-61459]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60934-60960]:Block[61433-61459]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[60942-60954]:ReturnStatement[61441-61453]"
    }, {
      "left" : "if (!traverseChildrenPred.apply(node))",
      "right" : "if (!traverseChildrenPred.apply(node))",
      "info" : "IfStatement[60966-61032]:IfStatement[61465-61531]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61005-61032]:Block[61504-61531]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[61013-61026]:ReturnStatement[61512-61525]"
    }, {
      "left" : "for (Node c = node.getFirstChild(); c != null; c = c.getNext())",
      "right" : "for (Node c = node.getFirstChild(); c != null; c = c.getNext())",
      "info" : "ForStatement[61038-61186]:ForStatement[61537-61685]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61102-61186]:Block[61601-61685]"
    }, {
      "left" : "if (has(c, pred, traverseChildrenPred))",
      "right" : "if (has(c, pred, traverseChildrenPred))",
      "info" : "IfStatement[61110-61180]:IfStatement[61609-61679]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61150-61180]:Block[61649-61679]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[61160-61172]:ReturnStatement[61659-61671]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[61192-61205]:ReturnStatement[61691-61704]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[61326-61332]:Modifier[61825-61831]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[61333-61336]:PrimitiveType[61832-61835]"
    }, {
      "left" : "getCount",
      "right" : "getCount",
      "info" : "SimpleName[61337-61345]:SimpleName[61836-61844]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[61353-61359]:SingleVariableDeclaration[61852-61858]"
    }, {
      "left" : "Predicate<Node> pred",
      "right" : "Predicate<Node> pred",
      "info" : "SingleVariableDeclaration[61361-61381]:SingleVariableDeclaration[61860-61880]"
    }, {
      "left" : "Predicate<Node> traverseChildrenPred",
      "right" : "Predicate<Node> traverseChildrenPred",
      "info" : "SingleVariableDeclaration[61383-61419]:SingleVariableDeclaration[61882-61918]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61421-61694]:Block[61920-62193]"
    }, {
      "left" : "int total = 0;",
      "right" : "int total = 0;",
      "info" : "VariableDeclarationStatement[61427-61441]:VariableDeclarationStatement[61926-61940]"
    }, {
      "left" : "if (pred.apply(n))",
      "right" : "if (pred.apply(n))",
      "info" : "IfStatement[61447-61488]:IfStatement[61946-61987]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61466-61488]:Block[61965-61987]"
    }, {
      "left" : "total++;",
      "right" : "total++;",
      "info" : "ExpressionStatement[61474-61482]:ExpressionStatement[61973-61981]"
    }, {
      "left" : "if (traverseChildrenPred.apply(n))",
      "right" : "if (traverseChildrenPred.apply(n))",
      "info" : "IfStatement[61494-61671]:IfStatement[61993-62170]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61529-61671]:Block[62028-62170]"
    }, {
      "left" : "for (Node c = n.getFirstChild(); c != null; c = c.getNext())",
      "right" : "for (Node c = n.getFirstChild(); c != null; c = c.getNext())",
      "info" : "ForStatement[61537-61665]:ForStatement[62036-62164]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61598-61665]:Block[62097-62164]"
    }, {
      "left" : "total += getCount(c, pred, traverseChildrenPred);",
      "right" : "total += getCount(c, pred, traverseChildrenPred);",
      "info" : "ExpressionStatement[61608-61657]:ExpressionStatement[62107-62156]"
    }, {
      "left" : "return total;",
      "right" : "return total;",
      "info" : "ReturnStatement[61677-61690]:ReturnStatement[62176-62189]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[61773-61779]:Modifier[62272-62278]"
    }, {
      "left" : "interface",
      "right" : "interface",
      "info" : "TYPE_DECLARATION_KIND[61780-61789]:TYPE_DECLARATION_KIND[62279-62288]"
    }, {
      "left" : "Visitor",
      "right" : "Visitor",
      "info" : "SimpleName[61790-61797]:SimpleName[62289-62296]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[61804-61808]:PrimitiveType[62303-62307]"
    }, {
      "left" : "visit",
      "right" : "visit",
      "info" : "SimpleName[61809-61814]:SimpleName[62308-62313]"
    }, {
      "left" : "Node node",
      "right" : "Node node",
      "info" : "SingleVariableDeclaration[61815-61824]:SingleVariableDeclaration[62314-62323]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[61939-61945]:Modifier[62438-62444]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[61946-61950]:PrimitiveType[62445-62449]"
    }, {
      "left" : "visitPreOrder",
      "right" : "visitPreOrder",
      "info" : "SimpleName[61951-61964]:SimpleName[62450-62463]"
    }, {
      "left" : "Node node",
      "right" : "Node node",
      "info" : "SingleVariableDeclaration[61965-61974]:SingleVariableDeclaration[62464-62473]"
    }, {
      "left" : "Visitor vistor",
      "right" : "Visitor vistor",
      "info" : "SingleVariableDeclaration[61997-62011]:SingleVariableDeclaration[62496-62510]"
    }, {
      "left" : "Predicate<Node> traverseChildrenPred",
      "right" : "Predicate<Node> traverseChildrenPred",
      "info" : "SingleVariableDeclaration[62034-62070]:SingleVariableDeclaration[62533-62569]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62072-62288]:Block[62571-62787]"
    }, {
      "left" : "vistor.visit(node);",
      "right" : "vistor.visit(node);",
      "info" : "ExpressionStatement[62078-62097]:ExpressionStatement[62577-62596]"
    }, {
      "left" : "if (traverseChildrenPred.apply(node))",
      "right" : "if (traverseChildrenPred.apply(node))",
      "info" : "IfStatement[62103-62284]:IfStatement[62602-62783]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62141-62284]:Block[62640-62783]"
    }, {
      "left" : "for (Node c = node.getFirstChild(); c != null; c = c.getNext())",
      "right" : "for (Node c = node.getFirstChild(); c != null; c = c.getNext())",
      "info" : "ForStatement[62149-62278]:ForStatement[62648-62777]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62213-62278]:Block[62712-62777]"
    }, {
      "left" : "visitPreOrder(c, vistor, traverseChildrenPred);",
      "right" : "visitPreOrder(c, vistor, traverseChildrenPred);",
      "info" : "ExpressionStatement[62223-62270]:ExpressionStatement[62722-62769]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[62398-62404]:Modifier[62897-62903]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[62405-62409]:PrimitiveType[62904-62908]"
    }, {
      "left" : "visitPostOrder",
      "right" : "visitPostOrder",
      "info" : "SimpleName[62410-62424]:SimpleName[62909-62923]"
    }, {
      "left" : "Node node",
      "right" : "Node node",
      "info" : "SingleVariableDeclaration[62425-62434]:SingleVariableDeclaration[62924-62933]"
    }, {
      "left" : "Visitor vistor",
      "right" : "Visitor vistor",
      "info" : "SingleVariableDeclaration[62457-62471]:SingleVariableDeclaration[62956-62970]"
    }, {
      "left" : "Predicate<Node> traverseChildrenPred",
      "right" : "Predicate<Node> traverseChildrenPred",
      "info" : "SingleVariableDeclaration[62494-62530]:SingleVariableDeclaration[62993-63029]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62532-62749]:Block[63031-63248]"
    }, {
      "left" : "if (traverseChildrenPred.apply(node))",
      "right" : "if (traverseChildrenPred.apply(node))",
      "info" : "IfStatement[62538-62720]:IfStatement[63037-63219]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62576-62720]:Block[63075-63219]"
    }, {
      "left" : "for (Node c = node.getFirstChild(); c != null; c = c.getNext())",
      "right" : "for (Node c = node.getFirstChild(); c != null; c = c.getNext())",
      "info" : "ForStatement[62584-62714]:ForStatement[63083-63213]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62648-62714]:Block[63147-63213]"
    }, {
      "left" : "visitPostOrder(c, vistor, traverseChildrenPred);",
      "right" : "visitPostOrder(c, vistor, traverseChildrenPred);",
      "info" : "ExpressionStatement[62658-62706]:ExpressionStatement[63157-63205]"
    }, {
      "left" : "vistor.visit(node);",
      "right" : "vistor.visit(node);",
      "info" : "ExpressionStatement[62726-62745]:ExpressionStatement[63225-63244]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[62818-62824]:Modifier[63317-63323]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[62825-62832]:PrimitiveType[63324-63331]"
    }, {
      "left" : "hasFinally",
      "right" : "hasFinally",
      "info" : "SimpleName[62833-62843]:SimpleName[63332-63342]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[62844-62850]:SingleVariableDeclaration[63343-63349]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62852-62951]:Block[63351-63450]"
    }, {
      "left" : "Preconditions.checkArgument(n.getType() == Token.TRY);",
      "right" : "Preconditions.checkArgument(n.getType() == Token.TRY);",
      "info" : "ExpressionStatement[62858-62912]:ExpressionStatement[63357-63411]"
    }, {
      "left" : "return n.getChildCount() == 3;",
      "right" : "return n.getChildCount() == 3;",
      "info" : "ReturnStatement[62917-62947]:ReturnStatement[63416-63446]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[63045-63051]:Modifier[63544-63550]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[63052-63056]:SimpleType[63551-63555]"
    }, {
      "left" : "getCatchBlock",
      "right" : "getCatchBlock",
      "info" : "SimpleName[63057-63070]:SimpleName[63556-63569]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[63071-63077]:SingleVariableDeclaration[63570-63576]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63079-63183]:Block[63578-63682]"
    }, {
      "left" : "Preconditions.checkArgument(n.getType() == Token.TRY);",
      "right" : "Preconditions.checkArgument(n.getType() == Token.TRY);",
      "info" : "ExpressionStatement[63085-63139]:ExpressionStatement[63584-63638]"
    }, {
      "left" : "return n.getFirstChild().getNext();",
      "right" : "return n.getFirstChild().getNext();",
      "info" : "ReturnStatement[63144-63179]:ReturnStatement[63643-63678]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[63295-63301]:Modifier[63794-63800]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[63302-63309]:PrimitiveType[63801-63808]"
    }, {
      "left" : "hasCatchHandler",
      "right" : "hasCatchHandler",
      "info" : "SimpleName[63310-63325]:SimpleName[63809-63824]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[63326-63332]:SingleVariableDeclaration[63825-63831]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63334-63474]:Block[63833-63973]"
    }, {
      "left" : "Preconditions.checkArgument(n.getType() == Token.BLOCK);",
      "right" : "Preconditions.checkArgument(n.getType() == Token.BLOCK);",
      "info" : "ExpressionStatement[63340-63396]:ExpressionStatement[63839-63895]"
    }, {
      "left" : "return n.hasChildren() && n.getFirstChild().getType() == Token.CATCH;",
      "right" : "return n.hasChildren() && n.getFirstChild().getType() == Token.CATCH;",
      "info" : "ReturnStatement[63401-63470]:ReturnStatement[63900-63969]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[63584-63590]:Modifier[64083-64089]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[63591-63595]:SimpleType[64090-64094]"
    }, {
      "left" : "getFnParameters",
      "right" : "getFnParameters",
      "info" : "SimpleName[63596-63611]:SimpleName[64095-64110]"
    }, {
      "left" : "Node fnNode",
      "right" : "Node fnNode",
      "info" : "SingleVariableDeclaration[63612-63623]:SingleVariableDeclaration[64111-64122]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63625-63807]:Block[64124-64306]"
    }, {
      "left" : "Preconditions.checkArgument(fnNode.getType() == Token.FUNCTION);",
      "right" : "Preconditions.checkArgument(fnNode.getType() == Token.FUNCTION);",
      "info" : "ExpressionStatement[63695-63759]:ExpressionStatement[64194-64258]"
    }, {
      "left" : "return fnNode.getFirstChild().getNext();",
      "right" : "return fnNode.getFirstChild().getNext();",
      "info" : "ReturnStatement[63763-63803]:ReturnStatement[64262-64302]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[64513-64519]:Modifier[65012-65018]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[64520-64527]:PrimitiveType[65019-65026]"
    }, {
      "left" : "isConstantName",
      "right" : "isConstantName",
      "info" : "SimpleName[64528-64542]:SimpleName[65027-65041]"
    }, {
      "left" : "Node node",
      "right" : "Node node",
      "info" : "SingleVariableDeclaration[64543-64552]:SingleVariableDeclaration[65042-65051]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64554-64614]:Block[65053-65113]"
    }, {
      "left" : "return node.getBooleanProp(Node.IS_CONSTANT_NAME);",
      "right" : "return node.getBooleanProp(Node.IS_CONSTANT_NAME);",
      "info" : "ReturnStatement[64560-64610]:ReturnStatement[65059-65109]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[64684-64690]:Modifier[65183-65189]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[64691-64698]:PrimitiveType[65190-65197]"
    }, {
      "left" : "isConstantByConvention",
      "right" : "isConstantByConvention",
      "info" : "SimpleName[64699-64721]:SimpleName[65198-65220]"
    }, {
      "left" : "CodingConvention convention",
      "right" : "CodingConvention convention",
      "info" : "SingleVariableDeclaration[64729-64756]:SingleVariableDeclaration[65228-65255]"
    }, {
      "left" : "Node node",
      "right" : "Node node",
      "info" : "SingleVariableDeclaration[64758-64767]:SingleVariableDeclaration[65257-65266]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[64769-64780]:SingleVariableDeclaration[65268-65279]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64782-65107]:Block[65281-65606]"
    }, {
      "left" : "String name = node.getString();",
      "right" : "String name = node.getString();",
      "info" : "VariableDeclarationStatement[64788-64819]:VariableDeclarationStatement[65287-65318]"
    }, {
      "left" : "if (parent.getType() == Token.GETPROP &&\n        node == parent.getLastChild())",
      "right" : "if (parent.getType() == Token.GETPROP &&\n        node == parent.getLastChild())",
      "info" : "IfStatement[64824-65103]:IfStatement[65323-65602]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64904-64956]:Block[65403-65455]"
    }, {
      "left" : "return convention.isConstantKey(name);",
      "right" : "return convention.isConstantKey(name);",
      "info" : "ReturnStatement[64912-64950]:ReturnStatement[65411-65449]"
    }, {
      "left" : "if (isObjectLitKey(node, parent))",
      "right" : "if (isObjectLitKey(node, parent))",
      "info" : "IfStatement[64962-65103]:IfStatement[65461-65602]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64996-65048]:Block[65495-65547]"
    }, {
      "left" : "return convention.isConstantKey(name);",
      "right" : "return convention.isConstantKey(name);",
      "info" : "ReturnStatement[65004-65042]:ReturnStatement[65503-65541]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65054-65103]:Block[65553-65602]"
    }, {
      "left" : "return convention.isConstant(name);",
      "right" : "return convention.isConstant(name);",
      "info" : "ReturnStatement[65062-65097]:ReturnStatement[65561-65596]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[65201-65207]:Modifier[65700-65706]"
    }, {
      "left" : "JSDocInfo",
      "right" : "JSDocInfo",
      "info" : "SimpleType[65208-65217]:SimpleType[65707-65716]"
    }, {
      "left" : "getInfoForNameNode",
      "right" : "getInfoForNameNode",
      "info" : "SimpleName[65218-65236]:SimpleName[65717-65735]"
    }, {
      "left" : "Node nameNode",
      "right" : "Node nameNode",
      "info" : "SingleVariableDeclaration[65237-65250]:SingleVariableDeclaration[65736-65749]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65252-65636]:Block[65751-66135]"
    }, {
      "left" : "JSDocInfo info = null;",
      "right" : "JSDocInfo info = null;",
      "info" : "VariableDeclarationStatement[65258-65280]:VariableDeclarationStatement[65757-65779]"
    }, {
      "left" : "Node parent = null;",
      "right" : "Node parent = null;",
      "info" : "VariableDeclarationStatement[65285-65304]:VariableDeclarationStatement[65784-65803]"
    }, {
      "left" : "if (nameNode != null)",
      "right" : "if (nameNode != null)",
      "info" : "IfStatement[65309-65413]:IfStatement[65808-65912]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65331-65413]:Block[65830-65912]"
    }, {
      "left" : "info = nameNode.getJSDocInfo();",
      "right" : "info = nameNode.getJSDocInfo();",
      "info" : "ExpressionStatement[65339-65370]:ExpressionStatement[65838-65869]"
    }, {
      "left" : "parent = nameNode.getParent();",
      "right" : "parent = nameNode.getParent();",
      "info" : "ExpressionStatement[65377-65407]:ExpressionStatement[65876-65906]"
    }, {
      "left" : "if (info == null && parent != null &&\n        ((parent.getType() == Token.VAR && parent.hasOneChild()) ||\n          parent.getType() == Token.FUNCTION))",
      "right" : "if (info == null && parent != null &&\n        ((parent.getType() == Token.VAR && parent.hasOneChild()) ||\n          parent.getType() == Token.FUNCTION))",
      "info" : "IfStatement[65419-65615]:IfStatement[65918-66114]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65572-65615]:Block[66071-66114]"
    }, {
      "left" : "info = parent.getJSDocInfo();",
      "right" : "info = parent.getJSDocInfo();",
      "info" : "ExpressionStatement[65580-65609]:ExpressionStatement[66079-66108]"
    }, {
      "left" : "return info;",
      "right" : "return info;",
      "info" : "ReturnStatement[65620-65632]:ReturnStatement[66119-66131]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[65691-65697]:Modifier[66190-66196]"
    }, {
      "left" : "JSDocInfo",
      "right" : "JSDocInfo",
      "info" : "SimpleType[65698-65707]:SimpleType[66197-66206]"
    }, {
      "left" : "getFunctionInfo",
      "right" : "getFunctionInfo",
      "info" : "SimpleName[65708-65723]:SimpleName[66207-66222]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[65724-65730]:SingleVariableDeclaration[66223-66229]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65732-66268]:Block[66231-66767]"
    }, {
      "left" : "Preconditions.checkState(n.getType() == Token.FUNCTION);",
      "right" : "Preconditions.checkState(n.getType() == Token.FUNCTION);",
      "info" : "ExpressionStatement[65738-65794]:ExpressionStatement[66237-66293]"
    }, {
      "left" : "JSDocInfo fnInfo = n.getJSDocInfo();",
      "right" : "JSDocInfo fnInfo = n.getJSDocInfo();",
      "info" : "VariableDeclarationStatement[65799-65835]:VariableDeclarationStatement[66298-66334]"
    }, {
      "left" : "if (fnInfo == null && NodeUtil.isFunctionExpression(n))",
      "right" : "if (fnInfo == null && NodeUtil.isFunctionExpression(n))",
      "info" : "IfStatement[65840-66245]:IfStatement[66339-66744]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65896-66245]:Block[66395-66744]"
    }, {
      "left" : "Node parent = n.getParent();",
      "right" : "Node parent = n.getParent();",
      "info" : "VariableDeclarationStatement[65947-65975]:VariableDeclarationStatement[66446-66474]"
    }, {
      "left" : "if (parent.getType() == Token.ASSIGN)",
      "right" : "if (parent.getType() == Token.ASSIGN)",
      "info" : "IfStatement[65982-66239]:IfStatement[66481-66738]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66020-66091]:Block[66519-66590]"
    }, {
      "left" : "fnInfo = parent.getJSDocInfo();",
      "right" : "fnInfo = parent.getJSDocInfo();",
      "info" : "ExpressionStatement[66052-66083]:ExpressionStatement[66551-66582]"
    }, {
      "left" : "if (parent.getType() == Token.NAME)",
      "right" : "if (parent.getType() == Token.NAME)",
      "info" : "IfStatement[66097-66239]:IfStatement[66596-66738]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66133-66239]:Block[66632-66738]"
    }, {
      "left" : "fnInfo = parent.getParent().getJSDocInfo();",
      "right" : "fnInfo = parent.getParent().getJSDocInfo();",
      "info" : "ExpressionStatement[66188-66231]:ExpressionStatement[66687-66730]"
    }, {
      "left" : "return fnInfo;",
      "right" : "return fnInfo;",
      "info" : "ReturnStatement[66250-66264]:ReturnStatement[66749-66763]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[66376-66382]:Modifier[66875-66881]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[66383-66389]:SimpleType[66882-66888]"
    }, {
      "left" : "getSourceName",
      "right" : "getSourceName",
      "info" : "SimpleName[66390-66403]:SimpleName[66889-66902]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[66404-66410]:SingleVariableDeclaration[66903-66909]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66412-66608]:Block[66911-67107]"
    }, {
      "left" : "String sourceName = null;",
      "right" : "String sourceName = null;",
      "info" : "VariableDeclarationStatement[66418-66443]:VariableDeclarationStatement[66917-66942]"
    }, {
      "left" : "while (sourceName == null && n != null)",
      "right" : "while (sourceName == null && n != null)",
      "info" : "WhileStatement[66448-66581]:WhileStatement[66947-67080]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66488-66581]:Block[66987-67080]"
    }, {
      "left" : "sourceName = (String) n.getProp(Node.SOURCENAME_PROP);",
      "right" : "sourceName = (String) n.getProp(Node.SOURCENAME_PROP);",
      "info" : "ExpressionStatement[66496-66550]:ExpressionStatement[66995-67049]"
    }, {
      "left" : "n = n.getParent();",
      "right" : "n = n.getParent();",
      "info" : "ExpressionStatement[66557-66575]:ExpressionStatement[67056-67074]"
    }, {
      "left" : "return sourceName;",
      "right" : "return sourceName;",
      "info" : "ReturnStatement[66586-66604]:ReturnStatement[67085-67103]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[66692-66698]:Modifier[67191-67197]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[66699-66703]:SimpleType[67198-67202]"
    }, {
      "left" : "newCallNode",
      "right" : "newCallNode",
      "info" : "SimpleName[66704-66715]:SimpleName[67203-67214]"
    }, {
      "left" : "Node callTarget",
      "right" : "Node callTarget",
      "info" : "SingleVariableDeclaration[66716-66731]:SingleVariableDeclaration[67215-67230]"
    }, {
      "left" : "Node... parameters",
      "right" : "Node... parameters",
      "info" : "SingleVariableDeclaration[66733-66751]:SingleVariableDeclaration[67232-67250]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66753-67007]:Block[67252-67506]"
    }, {
      "left" : "boolean isFreeCall = isName(callTarget);",
      "right" : "boolean isFreeCall = isName(callTarget);",
      "info" : "VariableDeclarationStatement[66759-66799]:VariableDeclarationStatement[67258-67298]"
    }, {
      "left" : "Node call = new Node(Token.CALL, callTarget);",
      "right" : "Node call = new Node(Token.CALL, callTarget);",
      "info" : "VariableDeclarationStatement[66804-66849]:VariableDeclarationStatement[67303-67348]"
    }, {
      "left" : "call.putBooleanProp(Node.FREE_CALL, isFreeCall);",
      "right" : "call.putBooleanProp(Node.FREE_CALL, isFreeCall);",
      "info" : "ExpressionStatement[66854-66902]:ExpressionStatement[67353-67401]"
    }, {
      "left" : "for (Node parameter : parameters)",
      "right" : "for (Node parameter : parameters)",
      "info" : "EnhancedForStatement[66907-66986]:EnhancedForStatement[67406-67485]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66941-66986]:Block[67440-67485]"
    }, {
      "left" : "call.addChildToBack(parameter);",
      "right" : "call.addChildToBack(parameter);",
      "info" : "ExpressionStatement[66949-66980]:ExpressionStatement[67448-67479]"
    }, {
      "left" : "return call;",
      "right" : "return call;",
      "info" : "ReturnStatement[66991-67003]:ReturnStatement[67490-67502]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[67115-67121]:Modifier[67614-67620]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[67122-67129]:PrimitiveType[67621-67628]"
    }, {
      "left" : "evaluatesToLocalValue",
      "right" : "evaluatesToLocalValue",
      "info" : "SimpleName[67130-67151]:SimpleName[67629-67650]"
    }, {
      "left" : "Node value",
      "right" : "Node value",
      "info" : "SingleVariableDeclaration[67152-67162]:SingleVariableDeclaration[67651-67661]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67164-67242]:Block[67663-67741]"
    }, {
      "left" : "return evaluatesToLocalValue(value, Predicates.<Node>alwaysFalse());",
      "right" : "return evaluatesToLocalValue(value, Predicates.<Node>alwaysFalse());",
      "info" : "ReturnStatement[67170-67238]:ReturnStatement[67669-67737]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[67439-67445]:Modifier[67938-67944]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[67446-67453]:PrimitiveType[67945-67952]"
    }, {
      "left" : "evaluatesToLocalValue",
      "right" : "evaluatesToLocalValue",
      "info" : "SimpleName[67454-67475]:SimpleName[67953-67974]"
    }, {
      "left" : "Node value",
      "right" : "Node value",
      "info" : "SingleVariableDeclaration[67476-67486]:SingleVariableDeclaration[67975-67985]"
    }, {
      "left" : "Predicate<Node> locals",
      "right" : "Predicate<Node> locals",
      "info" : "SingleVariableDeclaration[67488-67510]:SingleVariableDeclaration[67987-68009]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67512-69796]:Block[68011-70295]"
    }, {
      "left" : "switch (value.getType()) {\n      case Token.ASSIGN:\n        // A result that is aliased by a non-local name, is the effectively the\n        // same as returning a non-local name, but this doesn't matter if the\n        // value is immutable.\n        return NodeUtil.isImmutableValue(value.getLastChild())\n            || (locals.apply(value)\n                && evaluatesToLocalValue(value.getLastChild(), locals));\n      case Token.COMMA:\n        return evaluatesToLocalValue(value.getLastChild(), locals);\n      case Token.AND:\n      case Token.OR:\n        return evaluatesToLocalValue(value.getFirstChild(), locals)\n           && evaluatesToLocalValue(value.getLastChild(), locals);\n      case Token.HOOK:\n        return evaluatesToLocalValue(value.getFirstChild().getNext(), locals)\n           && evaluatesToLocalValue(value.getLastChild(), locals);\n      case Token.INC:\n      case Token.DEC:\n        if (value.getBooleanProp(Node.INCRDECR_PROP)) {\n          return evaluatesToLocalValue(value.getFirstChild(), locals);\n        } else {\n          return true;\n        }\n      case Token.THIS:\n        return locals.apply(value);\n      case Token.NAME:\n        return isImmutableValue(value) || locals.apply(value);\n      case Token.GETELEM:\n      case Token.GETPROP:\n        // There is no information about the locality of object properties.\n        return locals.apply(value);\n      case Token.CALL:\n        return callHasLocalResult(value) || locals.apply(value);\n      case Token.NEW:\n        return true;\n      case Token.FUNCTION:\n      case Token.REGEXP:\n      case Token.ARRAYLIT:\n      case Token.OBJECTLIT:\n        // Literals objects with non-literal children are allowed.\n        return true;\n      case Token.IN:\n        // TODO(johnlenz): should IN operator be included in #isSimpleOperator?\n        return true;\n      default:\n        // Other op force a local value:\n        //  x = '' + g (x is now an local string)\n        //  x -= g (x is now an local number)\n        if (isAssignmentOp(value)\n            || isSimpleOperator(value)\n            || isImmutableValue(value)) {\n          return true;\n        }\n\n        throw new IllegalStateException(\n            \"Unexpected expression node\" + value +\n            \"\\n parent:\" + value.getParent());\n    }",
      "right" : "switch (value.getType()) {\n      case Token.ASSIGN:\n        // A result that is aliased by a non-local name, is the effectively the\n        // same as returning a non-local name, but this doesn't matter if the\n        // value is immutable.\n        return NodeUtil.isImmutableValue(value.getLastChild())\n            || (locals.apply(value)\n                && evaluatesToLocalValue(value.getLastChild(), locals));\n      case Token.COMMA:\n        return evaluatesToLocalValue(value.getLastChild(), locals);\n      case Token.AND:\n      case Token.OR:\n        return evaluatesToLocalValue(value.getFirstChild(), locals)\n           && evaluatesToLocalValue(value.getLastChild(), locals);\n      case Token.HOOK:\n        return evaluatesToLocalValue(value.getFirstChild().getNext(), locals)\n           && evaluatesToLocalValue(value.getLastChild(), locals);\n      case Token.INC:\n      case Token.DEC:\n        if (value.getBooleanProp(Node.INCRDECR_PROP)) {\n          return evaluatesToLocalValue(value.getFirstChild(), locals);\n        } else {\n          return true;\n        }\n      case Token.THIS:\n        return locals.apply(value);\n      case Token.NAME:\n        return isImmutableValue(value) || locals.apply(value);\n      case Token.GETELEM:\n      case Token.GETPROP:\n        // There is no information about the locality of object properties.\n        return locals.apply(value);\n      case Token.CALL:\n        return callHasLocalResult(value) || locals.apply(value);\n      case Token.NEW:\n        return true;\n      case Token.FUNCTION:\n      case Token.REGEXP:\n      case Token.ARRAYLIT:\n      case Token.OBJECTLIT:\n        // Literals objects with non-literal children are allowed.\n        return true;\n      case Token.IN:\n        // TODO(johnlenz): should IN operator be included in #isSimpleOperator?\n        return true;\n      default:\n        // Other op force a local value:\n        //  x = '' + g (x is now an local string)\n        //  x -= g (x is now an local number)\n        if (isAssignmentOp(value)\n            || isSimpleOperator(value)\n            || isImmutableValue(value)) {\n          return true;\n        }\n\n        throw new IllegalStateException(\n            \"Unexpected expression node\" + value +\n            \"\\n parent:\" + value.getParent());\n    }",
      "info" : "SwitchStatement[67518-69792]:SwitchStatement[68017-70291]"
    }, {
      "left" : "case Token.ASSIGN:",
      "right" : "case Token.ASSIGN:",
      "info" : "SwitchCase[67551-67569]:SwitchCase[68050-68068]"
    }, {
      "left" : "return NodeUtil.isImmutableValue(value.getLastChild())\n            || (locals.apply(value)\n                && evaluatesToLocalValue(value.getLastChild(), locals));",
      "right" : "return NodeUtil.isImmutableValue(value.getLastChild())\n            || (locals.apply(value)\n                && evaluatesToLocalValue(value.getLastChild(), locals));",
      "info" : "ReturnStatement[67767-67930]:ReturnStatement[68266-68429]"
    }, {
      "left" : "case Token.COMMA:",
      "right" : "case Token.COMMA:",
      "info" : "SwitchCase[67937-67954]:SwitchCase[68436-68453]"
    }, {
      "left" : "return evaluatesToLocalValue(value.getLastChild(), locals);",
      "right" : "return evaluatesToLocalValue(value.getLastChild(), locals);",
      "info" : "ReturnStatement[67963-68022]:ReturnStatement[68462-68521]"
    }, {
      "left" : "case Token.AND:",
      "right" : "case Token.AND:",
      "info" : "SwitchCase[68029-68044]:SwitchCase[68528-68543]"
    }, {
      "left" : "case Token.OR:",
      "right" : "case Token.OR:",
      "info" : "SwitchCase[68051-68065]:SwitchCase[68550-68564]"
    }, {
      "left" : "return evaluatesToLocalValue(value.getFirstChild(), locals)\n           && evaluatesToLocalValue(value.getLastChild(), locals);",
      "right" : "return evaluatesToLocalValue(value.getFirstChild(), locals)\n           && evaluatesToLocalValue(value.getLastChild(), locals);",
      "info" : "ReturnStatement[68074-68200]:ReturnStatement[68573-68699]"
    }, {
      "left" : "case Token.HOOK:",
      "right" : "case Token.HOOK:",
      "info" : "SwitchCase[68207-68223]:SwitchCase[68706-68722]"
    }, {
      "left" : "return evaluatesToLocalValue(value.getFirstChild().getNext(), locals)\n           && evaluatesToLocalValue(value.getLastChild(), locals);",
      "right" : "return evaluatesToLocalValue(value.getFirstChild().getNext(), locals)\n           && evaluatesToLocalValue(value.getLastChild(), locals);",
      "info" : "ReturnStatement[68232-68368]:ReturnStatement[68731-68867]"
    }, {
      "left" : "case Token.INC:",
      "right" : "case Token.INC:",
      "info" : "SwitchCase[68375-68390]:SwitchCase[68874-68889]"
    }, {
      "left" : "case Token.DEC:",
      "right" : "case Token.DEC:",
      "info" : "SwitchCase[68397-68412]:SwitchCase[68896-68911]"
    }, {
      "left" : "if (value.getBooleanProp(Node.INCRDECR_PROP))",
      "right" : "if (value.getBooleanProp(Node.INCRDECR_PROP))",
      "info" : "IfStatement[68421-68589]:IfStatement[68920-69088]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[68467-68549]:Block[68966-69048]"
    }, {
      "left" : "return evaluatesToLocalValue(value.getFirstChild(), locals);",
      "right" : "return evaluatesToLocalValue(value.getFirstChild(), locals);",
      "info" : "ReturnStatement[68479-68539]:ReturnStatement[68978-69038]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[68555-68589]:Block[69054-69088]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[68567-68579]:ReturnStatement[69066-69078]"
    }, {
      "left" : "case Token.THIS:",
      "right" : "case Token.THIS:",
      "info" : "SwitchCase[68596-68612]:SwitchCase[69095-69111]"
    }, {
      "left" : "return locals.apply(value);",
      "right" : "return locals.apply(value);",
      "info" : "ReturnStatement[68621-68648]:ReturnStatement[69120-69147]"
    }, {
      "left" : "case Token.NAME:",
      "right" : "case Token.NAME:",
      "info" : "SwitchCase[68655-68671]:SwitchCase[69154-69170]"
    }, {
      "left" : "return isImmutableValue(value) || locals.apply(value);",
      "right" : "return isImmutableValue(value) || locals.apply(value);",
      "info" : "ReturnStatement[68680-68734]:ReturnStatement[69179-69233]"
    }, {
      "left" : "case Token.GETELEM:",
      "right" : "case Token.GETELEM:",
      "info" : "SwitchCase[68741-68760]:SwitchCase[69240-69259]"
    }, {
      "left" : "case Token.GETPROP:",
      "right" : "case Token.GETPROP:",
      "info" : "SwitchCase[68767-68786]:SwitchCase[69266-69285]"
    }, {
      "left" : "return locals.apply(value);",
      "right" : "return locals.apply(value);",
      "info" : "ReturnStatement[68871-68898]:ReturnStatement[69370-69397]"
    }, {
      "left" : "case Token.CALL:",
      "right" : "case Token.CALL:",
      "info" : "SwitchCase[68905-68921]:SwitchCase[69404-69420]"
    }, {
      "left" : "return callHasLocalResult(value) || locals.apply(value);",
      "right" : "return callHasLocalResult(value) || locals.apply(value);",
      "info" : "ReturnStatement[68930-68986]:ReturnStatement[69429-69485]"
    }, {
      "left" : "case Token.NEW:",
      "right" : "case Token.NEW:",
      "info" : "SwitchCase[68993-69008]:SwitchCase[69492-69507]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[69017-69029]:ReturnStatement[69516-69528]"
    }, {
      "left" : "case Token.FUNCTION:",
      "right" : "case Token.FUNCTION:",
      "info" : "SwitchCase[69036-69056]:SwitchCase[69535-69555]"
    }, {
      "left" : "case Token.REGEXP:",
      "right" : "case Token.REGEXP:",
      "info" : "SwitchCase[69063-69081]:SwitchCase[69562-69580]"
    }, {
      "left" : "case Token.ARRAYLIT:",
      "right" : "case Token.ARRAYLIT:",
      "info" : "SwitchCase[69088-69108]:SwitchCase[69587-69607]"
    }, {
      "left" : "case Token.OBJECTLIT:",
      "right" : "case Token.OBJECTLIT:",
      "info" : "SwitchCase[69115-69136]:SwitchCase[69614-69635]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[69212-69224]:ReturnStatement[69711-69723]"
    }, {
      "left" : "case Token.IN:",
      "right" : "case Token.IN:",
      "info" : "SwitchCase[69231-69245]:SwitchCase[69730-69744]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[69334-69346]:ReturnStatement[69833-69845]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[69353-69361]:SwitchCase[69852-69860]"
    }, {
      "left" : "if (isAssignmentOp(value)\n            || isSimpleOperator(value)\n            || isImmutableValue(value))",
      "right" : "if (isAssignmentOp(value)\n            || isSimpleOperator(value)\n            || isImmutableValue(value))",
      "info" : "IfStatement[69507-69646]:IfStatement[70006-70145]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[69612-69646]:Block[70111-70145]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[69624-69636]:ReturnStatement[70123-70135]"
    }, {
      "left" : "throw new IllegalStateException(\n            \"Unexpected expression node\" + value +\n            \"\\n parent:\" + value.getParent());",
      "right" : "throw new IllegalStateException(\n            \"Unexpected expression node\" + value +\n            \"\\n parent:\" + value.getParent());",
      "info" : "ThrowStatement[69656-69786]:ThrowStatement[70155-70285]"
    } ]
  },
  "interFileMappings" : { }
}