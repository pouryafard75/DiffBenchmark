{
  "matchedElements" : [
 {
    "left" : "",
    "right" : "",
    "info" : "TypeDeclaration[2034-495686]:TypeDeclaration[2034-495716]"
  }, {
    "left" : "/** Full name of the Java version (i.e. 1.5.0_11). */\n  static public final String javaVersionName =\n    System.getProperty(\"java.version\");",
    "right" : "/** Full name of the Java version (i.e. 1.5.0_11). */\n  static public final String javaVersionName =\n    System.getProperty(\"java.version\");",
    "info" : "FieldDeclaration[3936-4076]:FieldDeclaration[3936-4076]"
  }, {
    "left" : "static public final int javaPlatform =\n    PApplet.parseInt(PApplet.split(javaVersionName, '.')[1]);",
    "right" : "static public final int javaPlatform =\n    PApplet.parseInt(PApplet.split(javaVersionName, '.')[1]);",
    "info" : "FieldDeclaration[4416-4516]:FieldDeclaration[4416-4516]"
  }, {
    "left" : "",
    "right" : "",
    "info" : "FieldDeclaration[4706-5578]:FieldDeclaration[4706-5578]"
  }, {
    "left" : "",
    "right" : "",
    "info" : "FieldDeclaration[5848-5985]:FieldDeclaration[5848-5985]"
  }, {
    "left" : "",
    "right" : "",
    "info" : "FieldDeclaration[6332-6742]:FieldDeclaration[6332-6742]"
  }, {
    "left" : "",
    "right" : "",
    "info" : "FieldDeclaration[6746-6826]:FieldDeclaration[6746-6826]"
  }, {
    "left" : "/**\n   * ( begin auto-generated from displayWidth.xml )\n   *\n   * System variable which stores the width of the computer screen. For\n   * example, if the current screen resolution is 1024x768,\n   * <b>displayWidth</b> is 1024 and <b>displayHeight</b> is 768. These\n   * dimensions are useful when exporting full-screen applications.\n   * <br /><br />\n   * To ensure that the sketch takes over the entire screen, use \"Present\"\n   * instead of \"Run\". Otherwise the window will still have a frame border\n   * around it and not be placed in the upper corner of the screen. On Mac OS\n   * X, the menu bar will remain present unless \"Present\" mode is used.\n   *\n   * ( end auto-generated )\n   */\n  public int displayWidth;",
    "right" : "/**\n   * ( begin auto-generated from displayWidth.xml )\n   *\n   * System variable which stores the width of the computer screen. For\n   * example, if the current screen resolution is 1024x768,\n   * <b>displayWidth</b> is 1024 and <b>displayHeight</b> is 768. These\n   * dimensions are useful when exporting full-screen applications.\n   * <br /><br />\n   * To ensure that the sketch takes over the entire screen, use \"Present\"\n   * instead of \"Run\". Otherwise the window will still have a frame border\n   * around it and not be placed in the upper corner of the screen. On Mac OS\n   * X, the menu bar will remain present unless \"Present\" mode is used.\n   *\n   * ( end auto-generated )\n   */\n  public int displayWidth;",
    "info" : "FieldDeclaration[6830-7546]:FieldDeclaration[6830-7546]"
  }, {
    "left" : "/**\n   * ( begin auto-generated from displayHeight.xml )\n   *\n   * System variable that stores the height of the computer screen. For\n   * example, if the current screen resolution is 1024x768,\n   * <b>displayWidth</b> is 1024 and <b>displayHeight</b> is 768. These\n   * dimensions are useful when exporting full-screen applications.\n   * <br /><br />\n   * To ensure that the sketch takes over the entire screen, use \"Present\"\n   * instead of \"Run\". Otherwise the window will still have a frame border\n   * around it and not be placed in the upper corner of the screen. On Mac OS\n   * X, the menu bar will remain present unless \"Present\" mode is used.\n   *\n   * ( end auto-generated )\n   */\n  public int displayHeight;",
    "right" : "/**\n   * ( begin auto-generated from displayHeight.xml )\n   *\n   * System variable that stores the height of the computer screen. For\n   * example, if the current screen resolution is 1024x768,\n   * <b>displayWidth</b> is 1024 and <b>displayHeight</b> is 768. These\n   * dimensions are useful when exporting full-screen applications.\n   * <br /><br />\n   * To ensure that the sketch takes over the entire screen, use \"Present\"\n   * instead of \"Run\". Otherwise the window will still have a frame border\n   * around it and not be placed in the upper corner of the screen. On Mac OS\n   * X, the menu bar will remain present unless \"Present\" mode is used.\n   *\n   * ( end auto-generated )\n   */\n  public int displayHeight;",
    "info" : "FieldDeclaration[7550-8268]:FieldDeclaration[7550-8268]"
  }, {
    "left" : "/** A leech graphics object that is echoing all events. */\n  public PGraphics recorder;",
    "right" : "/** A leech graphics object that is echoing all events. */\n  public PGraphics recorder;",
    "info" : "FieldDeclaration[8272-8359]:FieldDeclaration[8272-8359]"
  }, {
    "left" : "",
    "right" : "",
    "info" : "FieldDeclaration[8363-8538]:FieldDeclaration[8363-8538]"
  }, {
    "left" : "",
    "right" : "",
    "info" : "FieldDeclaration[8542-8777]:FieldDeclaration[8542-8777]"
  }, {
    "left" : "",
    "right" : "",
    "info" : "FieldDeclaration[8811-8846]:FieldDeclaration[8811-8846]"
  }, {
    "left" : "/** Default width and height for sketch when not specified */\n  static public final int DEFAULT_WIDTH = 100;",
    "right" : "/** Default width and height for sketch when not specified */\n  static public final int DEFAULT_WIDTH = 100;",
    "info" : "FieldDeclaration[8889-8997]:FieldDeclaration[8889-8997]"
  }, {
    "left" : "",
    "right" : "",
    "info" : "FieldDeclaration[9000-9045]:FieldDeclaration[9000-9045]"
  }, {
    "left" : "",
    "right" : "",
    "info" : "FieldDeclaration[9432-9618]:FieldDeclaration[9432-9618]"
  }, {
    "left" : "",
    "right" : "",
    "info" : "FieldDeclaration[9741-10952]:FieldDeclaration[9741-10952]"
  }, {
    "left" : "",
    "right" : "",
    "info" : "FieldDeclaration[10956-11493]:FieldDeclaration[10956-11493]"
  }, {
    "left" : "/**\n   * ( begin auto-generated from height.xml )\n   *\n   * System variable which stores the height of the display window. This\n   * value is set by the second parameter of the <b>size()</b> function. For\n   * example, the function call <b>size(320, 240)</b> sets the <b>height</b>\n   * variable to the value 240. The value of <b>height</b> is zero until\n   * <b>size()</b> is called.\n   *\n   * ( end auto-generated )\n   * @webref environment\n   * @see PApplet#width\n   * @see PApplet#size(int, int)\n   */\n  public int height = DEFAULT_HEIGHT;",
    "right" : "/**\n   * ( begin auto-generated from height.xml )\n   *\n   * System variable which stores the height of the display window. This\n   * value is set by the second parameter of the <b>size()</b> function. For\n   * example, the function call <b>size(320, 240)</b> sets the <b>height</b>\n   * variable to the value 240. The value of <b>height</b> is zero until\n   * <b>size()</b> is called.\n   *\n   * ( end auto-generated )\n   * @webref environment\n   * @see PApplet#width\n   * @see PApplet#size(int, int)\n   */\n  public int height = DEFAULT_HEIGHT;",
    "info" : "FieldDeclaration[11497-12040]:FieldDeclaration[11497-12040]"
  }, {
    "left" : "",
    "right" : "",
    "info" : "FieldDeclaration[12044-12167]:FieldDeclaration[12044-12167]"
  }, {
    "left" : "/**\n   * Height of the pixels in this drawing surface\n   * (takes pixelDensity into account).\n   */\n  public int pixelHeight;",
    "right" : "/**\n   * Height of the pixels in this drawing surface\n   * (takes pixelDensity into account).\n   */\n  public int pixelHeight;",
    "info" : "FieldDeclaration[12171-12296]:FieldDeclaration[12171-12296]"
  }, {
    "left" : "",
    "right" : "",
    "info" : "FieldDeclaration[12300-12900]:FieldDeclaration[12300-12900]"
  }, {
    "left" : "",
    "right" : "",
    "info" : "FieldDeclaration[12904-13497]:FieldDeclaration[12904-13497]"
  }, {
    "left" : "",
    "right" : "",
    "info" : "FieldDeclaration[13501-15231]:FieldDeclaration[13501-15231]"
  }, {
    "left" : "/**\n   * ( begin auto-generated from pmouseY.xml )\n   *\n   * The system variable <b>pmouseY</b> always contains the vertical position\n   * of the mouse in the frame previous to the current frame. More detailed\n   * information about how <b>pmouseY</b> is updated inside of <b>draw()</b>\n   * and mouse events is explained in the reference for <b>pmouseX</b>.\n   *\n   * ( end auto-generated )\n   * @webref input:mouse\n   * @see PApplet#mouseX\n   * @see PApplet#mouseY\n   * @see PApplet#pmouseX\n   * @see PApplet#mousePressed\n   * @see PApplet#mousePressed()\n   * @see PApplet#mouseReleased()\n   * @see PApplet#mouseClicked()\n   * @see PApplet#mouseMoved()\n   * @see PApplet#mouseDragged()\n   * @see PApplet#mouseButton\n   * @see PApplet#mouseWheel(MouseEvent)\n   */\n  public int pmouseY;",
    "right" : "/**\n   * ( begin auto-generated from pmouseY.xml )\n   *\n   * The system variable <b>pmouseY</b> always contains the vertical position\n   * of the mouse in the frame previous to the current frame. More detailed\n   * information about how <b>pmouseY</b> is updated inside of <b>draw()</b>\n   * and mouse events is explained in the reference for <b>pmouseX</b>.\n   *\n   * ( end auto-generated )\n   * @webref input:mouse\n   * @see PApplet#mouseX\n   * @see PApplet#mouseY\n   * @see PApplet#pmouseX\n   * @see PApplet#mousePressed\n   * @see PApplet#mousePressed()\n   * @see PApplet#mouseReleased()\n   * @see PApplet#mouseClicked()\n   * @see PApplet#mouseMoved()\n   * @see PApplet#mouseDragged()\n   * @see PApplet#mouseButton\n   * @see PApplet#mouseWheel(MouseEvent)\n   */\n  public int pmouseY;",
    "info" : "FieldDeclaration[15235-16021]:FieldDeclaration[15235-16021]"
  }, {
    "left" : "",
    "right" : "",
    "info" : "FieldDeclaration[16025-16250]:FieldDeclaration[16025-16250]"
  }, {
    "left" : "",
    "right" : "",
    "info" : "FieldDeclaration[16254-16641]:FieldDeclaration[16254-16641]"
  }, {
    "left" : "",
    "right" : "",
    "info" : "FieldDeclaration[16645-17171]:FieldDeclaration[16645-17171]"
  }, {
    "left" : "/**\n   * ( begin auto-generated from mouseButton.xml )\n   *\n   * Processing automatically tracks if the mouse button is pressed and which\n   * button is pressed. The value of the system variable <b>mouseButton</b>\n   * is either <b>LEFT</b>, <b>RIGHT</b>, or <b>CENTER</b> depending on which\n   * button is pressed.\n   *\n   * ( end auto-generated )\n   *\n   * <h3>Advanced:</h3>\n   *\n   * If running on Mac OS, a ctrl-click will be interpreted as the right-hand\n   * mouse button (unlike Java, which reports it as the left mouse).\n   * @webref input:mouse\n   * @see PApplet#mouseX\n   * @see PApplet#mouseY\n   * @see PApplet#pmouseX\n   * @see PApplet#pmouseY\n   * @see PApplet#mousePressed\n   * @see PApplet#mousePressed()\n   * @see PApplet#mouseReleased()\n   * @see PApplet#mouseClicked()\n   * @see PApplet#mouseMoved()\n   * @see PApplet#mouseDragged()\n   * @see PApplet#mouseWheel(MouseEvent)\n   */\n  public int mouseButton;",
    "right" : "/**\n   * ( begin auto-generated from mouseButton.xml )\n   *\n   * Processing automatically tracks if the mouse button is pressed and which\n   * button is pressed. The value of the system variable <b>mouseButton</b>\n   * is either <b>LEFT</b>, <b>RIGHT</b>, or <b>CENTER</b> depending on which\n   * button is pressed.\n   *\n   * ( end auto-generated )\n   *\n   * <h3>Advanced:</h3>\n   *\n   * If running on Mac OS, a ctrl-click will be interpreted as the right-hand\n   * mouse button (unlike Java, which reports it as the left mouse).\n   * @webref input:mouse\n   * @see PApplet#mouseX\n   * @see PApplet#mouseY\n   * @see PApplet#pmouseX\n   * @see PApplet#pmouseY\n   * @see PApplet#mousePressed\n   * @see PApplet#mousePressed()\n   * @see PApplet#mouseReleased()\n   * @see PApplet#mouseClicked()\n   * @see PApplet#mouseMoved()\n   * @see PApplet#mouseDragged()\n   * @see PApplet#mouseWheel(MouseEvent)\n   */\n  public int mouseButton;",
    "info" : "FieldDeclaration[17175-18099]:FieldDeclaration[17175-18099]"
  }, {
    "left" : "",
    "right" : "",
    "info" : "FieldDeclaration[18103-18789]:FieldDeclaration[18103-18789]"
  }, {
    "left" : "",
    "right" : "",
    "info" : "FieldDeclaration[18794-18914]:FieldDeclaration[18794-18914]"
  }, {
    "left" : "",
    "right" : "",
    "info" : "FieldDeclaration[18918-20066]:FieldDeclaration[18918-20066]"
  }, {
    "left" : "/**\n   * ( begin auto-generated from keyCode.xml )\n   *\n   * The variable <b>keyCode</b> is used to detect special keys such as the\n   * UP, DOWN, LEFT, RIGHT arrow keys and ALT, CONTROL, SHIFT. When checking\n   * for these keys, it's first necessary to check and see if the key is\n   * coded. This is done with the conditional \"if (key == CODED)\" as shown in\n   * the example.\n   * <br/> <br/>\n   * The keys included in the ASCII specification (BACKSPACE, TAB, ENTER,\n   * RETURN, ESC, and DELETE) do not require checking to see if they key is\n   * coded, and you should simply use the <b>key</b> variable instead of\n   * <b>keyCode</b> If you're making cross-platform projects, note that the\n   * ENTER key is commonly used on PCs and Unix and the RETURN key is used\n   * instead on Macintosh. Check for both ENTER and RETURN to make sure your\n   * program will work for all platforms.\n   * <br/> <br/>\n   * For users familiar with Java, the values for UP and DOWN are simply\n   * shorter versions of Java's KeyEvent.VK_UP and KeyEvent.VK_DOWN. Other\n   * keyCode values can be found in the Java <a\n   * href=\"http://download.oracle.com/javase/6/docs/api/java/awt/event/KeyEvent.html\">KeyEvent</a> reference.\n   *\n   * ( end auto-generated )\n   *\n   * <h3>Advanced</h3>\n   * When \"key\" is set to CODED, this will contain a Java key code.\n   * <p>\n   * For the arrow keys, keyCode will be one of UP, DOWN, LEFT and RIGHT.\n   * Also available are ALT, CONTROL and SHIFT. A full set of constants\n   * can be obtained from java.awt.event.KeyEvent, from the VK_XXXX variables.\n   *\n   * @webref input:keyboard\n   * @see PApplet#key\n   * @see PApplet#keyPressed\n   * @see PApplet#keyPressed()\n   * @see PApplet#keyReleased()\n   */\n  public int keyCode;",
    "right" : "/**\n   * ( begin auto-generated from keyCode.xml )\n   *\n   * The variable <b>keyCode</b> is used to detect special keys such as the\n   * UP, DOWN, LEFT, RIGHT arrow keys and ALT, CONTROL, SHIFT. When checking\n   * for these keys, it's first necessary to check and see if the key is\n   * coded. This is done with the conditional \"if (key == CODED)\" as shown in\n   * the example.\n   * <br/> <br/>\n   * The keys included in the ASCII specification (BACKSPACE, TAB, ENTER,\n   * RETURN, ESC, and DELETE) do not require checking to see if they key is\n   * coded, and you should simply use the <b>key</b> variable instead of\n   * <b>keyCode</b> If you're making cross-platform projects, note that the\n   * ENTER key is commonly used on PCs and Unix and the RETURN key is used\n   * instead on Macintosh. Check for both ENTER and RETURN to make sure your\n   * program will work for all platforms.\n   * <br/> <br/>\n   * For users familiar with Java, the values for UP and DOWN are simply\n   * shorter versions of Java's KeyEvent.VK_UP and KeyEvent.VK_DOWN. Other\n   * keyCode values can be found in the Java <a\n   * href=\"http://download.oracle.com/javase/6/docs/api/java/awt/event/KeyEvent.html\">KeyEvent</a> reference.\n   *\n   * ( end auto-generated )\n   *\n   * <h3>Advanced</h3>\n   * When \"key\" is set to CODED, this will contain a Java key code.\n   * <p>\n   * For the arrow keys, keyCode will be one of UP, DOWN, LEFT and RIGHT.\n   * Also available are ALT, CONTROL and SHIFT. A full set of constants\n   * can be obtained from java.awt.event.KeyEvent, from the VK_XXXX variables.\n   *\n   * @webref input:keyboard\n   * @see PApplet#key\n   * @see PApplet#keyPressed\n   * @see PApplet#keyPressed()\n   * @see PApplet#keyReleased()\n   */\n  public int keyCode;",
    "info" : "FieldDeclaration[20070-21818]:FieldDeclaration[20070-21818]"
  }, {
    "left" : "",
    "right" : "",
    "info" : "FieldDeclaration[21822-22225]:FieldDeclaration[21822-22225]"
  }, {
    "left" : "/**\n   * The last KeyEvent object passed into a mouse function.\n   * @deprecated Use a key event handler that passes an event instead.\n   */\n  @Deprecated\n  public KeyEvent keyEvent;",
    "right" : "/**\n   * The last KeyEvent object passed into a mouse function.\n   * @deprecated Use a key event handler that passes an event instead.\n   */\n  @Deprecated\n  public KeyEvent keyEvent;",
    "info" : "FieldDeclaration[22229-22411]:FieldDeclaration[22229-22411]"
  }, {
    "left" : "",
    "right" : "",
    "info" : "FieldDeclaration[22415-22896]:FieldDeclaration[22415-22896]"
  }, {
    "left" : "",
    "right" : "",
    "info" : "FieldDeclaration[23394-23553]:FieldDeclaration[23394-23553]"
  }, {
    "left" : "",
    "right" : "",
    "info" : "FieldDeclaration[23557-24078]:FieldDeclaration[23557-24078]"
  }, {
    "left" : "protected boolean looping;",
    "right" : "protected boolean looping;",
    "info" : "FieldDeclaration[24082-24108]:FieldDeclaration[24082-24108]"
  }, {
    "left" : "",
    "right" : "",
    "info" : "FieldDeclaration[24112-24202]:FieldDeclaration[24112-24202]"
  }, {
    "left" : "/**\n   * ( begin auto-generated from frameCount.xml )\n   *\n   * The system variable <b>frameCount</b> contains the number of frames\n   * displayed since the program started. Inside <b>setup()</b> the value is\n   * 0 and and after the first iteration of draw it is 1, etc.\n   *\n   * ( end auto-generated )\n   * @webref environment\n   * @see PApplet#frameRate(float)\n   * @see PApplet#frameRate\n   */\n  public int frameCount;",
    "right" : "/**\n   * ( begin auto-generated from frameCount.xml )\n   *\n   * The system variable <b>frameCount</b> contains the number of frames\n   * displayed since the program started. Inside <b>setup()</b> the value is\n   * 0 and and after the first iteration of draw it is 1, etc.\n   *\n   * ( end auto-generated )\n   * @webref environment\n   * @see PApplet#frameRate(float)\n   * @see PApplet#frameRate\n   */\n  public int frameCount;",
    "info" : "FieldDeclaration[24206-24629]:FieldDeclaration[24206-24629]"
  }, {
    "left" : "",
    "right" : "",
    "info" : "FieldDeclaration[24633-24719]:FieldDeclaration[24633-24719]"
  }, {
    "left" : "/**\n   * true if exit() has been called so that things shut down\n   * once the main thread kicks off.\n   */\n  protected boolean exitCalled;",
    "right" : "/**\n   * true if exit() has been called so that things shut down\n   * once the main thread kicks off.\n   */\n  protected boolean exitCalled;",
    "info" : "FieldDeclaration[24874-25013]:FieldDeclaration[24874-25013]"
  }, {
    "left" : "",
    "right" : "",
    "info" : "FieldDeclaration[25070-25248]:FieldDeclaration[25070-25248]"
  }, {
    "left" : "static public final String ARGS_EXTERNAL = \"--external\";",
    "right" : "static public final String ARGS_EXTERNAL = \"--external\";",
    "info" : "FieldDeclaration[25252-25308]:FieldDeclaration[25252-25308]"
  }, {
    "left" : "/**\n   * Location for where to position the applet window on screen.\n   * <p>\n   * This is used by the editor to when saving the previous applet\n   * location, or could be used by other classes to launch at a\n   * specific position on-screen.\n   */\n  static public final String ARGS_LOCATION = \"--location\";",
    "right" : "/**\n   * Location for where to position the applet window on screen.\n   * <p>\n   * This is used by the editor to when saving the previous applet\n   * location, or could be used by other classes to launch at a\n   * specific position on-screen.\n   */\n  static public final String ARGS_LOCATION = \"--location\";",
    "info" : "FieldDeclaration[25312-25619]:FieldDeclaration[25312-25619]"
  }, {
    "left" : "/** Used by the PDE to suggest a display (set in prefs, passed on Run) */\n  static public final String ARGS_DISPLAY = \"--display\";",
    "right" : "/** Used by the PDE to suggest a display (set in prefs, passed on Run) */\n  static public final String ARGS_DISPLAY = \"--display\";",
    "info" : "FieldDeclaration[25623-25753]:FieldDeclaration[25623-25753]"
  }, {
    "left" : "static public final String ARGS_WINDOW_COLOR = \"--window-color\";",
    "right" : "static public final String ARGS_WINDOW_COLOR = \"--window-color\";",
    "info" : "FieldDeclaration[25820-25884]:FieldDeclaration[25820-25884]"
  }, {
    "left" : "static public final String ARGS_PRESENT = \"--present\";",
    "right" : "static public final String ARGS_PRESENT = \"--present\";",
    "info" : "FieldDeclaration[25888-25942]:FieldDeclaration[25888-25942]"
  }, {
    "left" : "",
    "right" : "",
    "info" : "FieldDeclaration[25946-26006]:FieldDeclaration[25946-26006]"
  }, {
    "left" : "static public final String ARGS_HIDE_STOP = \"--hide-stop\";",
    "right" : "static public final String ARGS_HIDE_STOP = \"--hide-stop\";",
    "info" : "FieldDeclaration[26010-26068]:FieldDeclaration[26010-26068]"
  }, {
    "left" : "",
    "right" : "",
    "info" : "FieldDeclaration[26072-26339]:FieldDeclaration[26072-26339]"
  }, {
    "left" : "/**\n   * When run externally to a PdeEditor,\n   * this is sent by the sketch when it quits.\n   */\n  static public final String EXTERNAL_STOP = \"__STOP__\";",
    "right" : "/**\n   * When run externally to a PdeEditor,\n   * this is sent by the sketch when it quits.\n   */\n  static public final String EXTERNAL_STOP = \"__STOP__\";",
    "info" : "FieldDeclaration[26343-26497]:FieldDeclaration[26343-26497]"
  }, {
    "left" : "",
    "right" : "",
    "info" : "FieldDeclaration[26501-26799]:FieldDeclaration[26501-26799]"
  }, {
    "left" : "",
    "right" : "",
    "info" : "FieldDeclaration[26803-26881]:FieldDeclaration[26803-26881]"
  }, {
    "left" : "",
    "right" : "",
    "info" : "FieldDeclaration[26885-26972]:FieldDeclaration[26885-26972]"
  }, {
    "left" : "",
    "right" : "",
    "info" : "FieldDeclaration[27058-27085]:FieldDeclaration[27058-27085]"
  }, {
    "left" : "",
    "right" : "",
    "info" : "FieldDeclaration[27090-27212]:FieldDeclaration[27090-27212]"
  }, {
    "left" : "/**\n   * Applet initialization. This can do GUI work because the components have\n   * not been 'realized' yet: things aren't visible, displayed, etc.\n   */\n  public void init() {\n//    println(\"init() called \" + Integer.toHexString(hashCode()));\n    // using a local version here since the class variable is deprecated\n//    Dimension screen = Toolkit.getDefaultToolkit().getScreenSize();\n//    screenWidth = screen.width;\n//    screenHeight = screen.height;\n\n    defaultSize = true;\n    finished = false; // just for clarity\n\n    // this will be cleared by draw() if it is not overridden\n    looping = true;\n    redraw = true;  // draw this guy at least once\n    firstMouse = true;\n\n    // calculated dynamically on first call\n//    // Removed in 2.1.2, brought back for 2.1.3. Usually sketchPath is set\n//    // inside runSketch(), but if this sketch takes care of calls to init()\n//    // when PApplet.main() is not used (i.e. it's in a Java application).\n//    // THe path needs to be set here so that loadXxxx() functions work.\n//    if (sketchPath == null) {\n//      sketchPath = calcSketchPath();\n//    }\n\n    // set during Surface.initFrame()\n//    // Figure out the available display width and height.\n//    // No major problem if this fails, we have to try again anyway in\n//    // handleDraw() on the first (== 0) frame.\n//    checkDisplaySize();\n\n//    // Set the default size, until the user specifies otherwise\n//    int w = sketchWidth();\n//    int h = sketchHeight();\n//    defaultSize = (w == DEFAULT_WIDTH) && (h == DEFAULT_HEIGHT);\n//\n//    g = makeGraphics(w, h, sketchRenderer(), null, true);\n//    // Fire component resize event\n//    setSize(w, h);\n//    setPreferredSize(new Dimension(w, h));\n//\n//    width = g.width;\n//    height = g.height;\n\n    surface.startThread();\n  }",
    "right" : "/**\n   * Applet initialization. This can do GUI work because the components have\n   * not been 'realized' yet: things aren't visible, displayed, etc.\n   */\n  public void init() {\n//    println(\"init() called \" + Integer.toHexString(hashCode()));\n    // using a local version here since the class variable is deprecated\n//    Dimension screen = Toolkit.getDefaultToolkit().getScreenSize();\n//    screenWidth = screen.width;\n//    screenHeight = screen.height;\n\n    defaultSize = true;\n    finished = false; // just for clarity\n\n    // this will be cleared by draw() if it is not overridden\n    looping = true;\n    redraw = true;  // draw this guy at least once\n    firstMouse = true;\n\n    // calculated dynamically on first call\n//    // Removed in 2.1.2, brought back for 2.1.3. Usually sketchPath is set\n//    // inside runSketch(), but if this sketch takes care of calls to init()\n//    // when PApplet.main() is not used (i.e. it's in a Java application).\n//    // THe path needs to be set here so that loadXxxx() functions work.\n//    if (sketchPath == null) {\n//      sketchPath = calcSketchPath();\n//    }\n\n    // set during Surface.initFrame()\n//    // Figure out the available display width and height.\n//    // No major problem if this fails, we have to try again anyway in\n//    // handleDraw() on the first (== 0) frame.\n//    checkDisplaySize();\n\n//    // Set the default size, until the user specifies otherwise\n//    int w = sketchWidth();\n//    int h = sketchHeight();\n//    defaultSize = (w == DEFAULT_WIDTH) && (h == DEFAULT_HEIGHT);\n//\n//    g = makeGraphics(w, h, sketchRenderer(), null, true);\n//    // Fire component resize event\n//    setSize(w, h);\n//    setPreferredSize(new Dimension(w, h));\n//\n//    width = g.width;\n//    height = g.height;\n\n    surface.startThread();\n  }",
    "info" : "MethodDeclaration[27434-29233]:MethodDeclaration[27434-29233]"
  }, {
    "left" : "boolean insideSettings;",
    "right" : "boolean insideSettings;",
    "info" : "FieldDeclaration[29319-29342]:FieldDeclaration[29319-29342]"
  }, {
    "left" : "",
    "right" : "",
    "info" : "FieldDeclaration[29346-29371]:FieldDeclaration[29346-29371]"
  }, {
    "left" : "",
    "right" : "",
    "info" : "FieldDeclaration[29395-29410]:FieldDeclaration[29395-29410]"
  }, {
    "left" : "boolean fullScreen;",
    "right" : "boolean fullScreen;",
    "info" : "FieldDeclaration[29475-29494]:FieldDeclaration[29475-29494]"
  }, {
    "left" : "int display = -1;",
    "right" : "int display = -1;",
    "info" : "FieldDeclaration[29497-29514]:FieldDeclaration[29497-29514]"
  }, {
    "left" : "GraphicsDevice[] displayDevices;",
    "right" : "GraphicsDevice[] displayDevices;",
    "info" : "FieldDeclaration[29533-29565]:FieldDeclaration[29533-29565]"
  }, {
    "left" : "",
    "right" : "",
    "info" : "FieldDeclaration[29672-29700]:FieldDeclaration[29672-29700]"
  }, {
    "left" : "",
    "right" : "",
    "info" : "FieldDeclaration[29704-29722]:FieldDeclaration[29704-29722]"
  }, {
    "left" : "OutputStream outputStream;",
    "right" : "OutputStream outputStream;",
    "info" : "FieldDeclaration[29725-29751]:FieldDeclaration[29725-29751]"
  }, {
    "left" : "int windowColor = 0xffDDDDDD;",
    "right" : "int windowColor = 0xffDDDDDD;",
    "info" : "FieldDeclaration[29958-29987]:FieldDeclaration[29958-29987]"
  }, {
    "left" : "package method String, args Object...) : boolean",
    "right" : "package method String, args Object...) : boolean",
    "info" : "MethodDeclaration[29992-30950]:MethodDeclaration[29992-30950]"
  }, {
    "left" : "package ) : void",
    "right" : "package ) : void",
    "info" : "MethodDeclaration[30955-33977]:MethodDeclaration[30955-33977]"
  }, {
    "left" : "public ) : void",
    "right" : "public ) : void",
    "info" : "MethodDeclaration[33275-33673]:MethodDeclaration[33275-33673]"
  }, {
    "left" : "public ) : void",
    "right" : "public ) : void",
    "info" : "MethodDeclaration[33982-34444]:MethodDeclaration[33982-34444]"
  }, {
    "left" : "final public int sketchWidth() {\n    return width;\n  }",
    "right" : "final public int sketchWidth() {\n    return width;\n  }",
    "info" : "MethodDeclaration[34449-34503]:MethodDeclaration[34449-34503]"
  }, {
    "left" : "final public int sketchHeight() {\n    return height;\n  }",
    "right" : "final public int sketchHeight() {\n    return height;\n  }",
    "info" : "MethodDeclaration[34508-34564]:MethodDeclaration[34508-34564]"
  }, {
    "left" : "final public String sketchRenderer() {\n    return renderer;\n  }",
    "right" : "final public String sketchRenderer() {\n    return renderer;\n  }",
    "info" : "MethodDeclaration[34569-34632]:MethodDeclaration[34569-34632]"
  }, {
    "left" : "public ) : int",
    "right" : "public ) : int",
    "info" : "MethodDeclaration[35316-35372]:MethodDeclaration[35316-35372]"
  }, {
    "left" : "public ) : boolean",
    "right" : "public ) : boolean",
    "info" : "MethodDeclaration[35377-35465]:MethodDeclaration[35377-35465]"
  }, {
    "left" : "public ) : int",
    "right" : "public ) : int",
    "info" : "MethodDeclaration[35868-35926]:MethodDeclaration[35868-35926]"
  }, {
    "left" : "public ) : String",
    "right" : "public ) : String",
    "info" : "MethodDeclaration[35931-36017]:MethodDeclaration[35931-36017]"
  }, {
    "left" : "public ) : OutputStream",
    "right" : "public ) : OutputStream",
    "info" : "MethodDeclaration[36022-36118]:MethodDeclaration[36022-36118]"
  }, {
    "left" : "public ) : int",
    "right" : "public ) : int",
    "info" : "MethodDeclaration[36123-36189]:MethodDeclaration[36123-36189]"
  }, {
    "left" : "final public int sketchPixelDensity() {\n    return pixelDensity;\n  }",
    "right" : "final public int sketchPixelDensity() {\n    return pixelDensity;\n  }",
    "info" : "MethodDeclaration[36194-36262]:MethodDeclaration[36194-36262]"
  }, {
    "left" : "public int displayDensity() {\n    if (display == SPAN) {\n      // walk through all displays, use lowest common denominator\n      for (int i = 0; i < displayDevices.length; i++) {\n        if (displayDensity(i) != 2) {\n          return 1;\n        }\n      }\n      return 2;\n    }\n    return displayDensity(display);\n  }",
    "right" : "public int displayDensity() {\n    if (display == SPAN) {\n      // walk through all displays, use lowest common denominator\n      for (int i = 0; i < displayDevices.length; i++) {\n        if (displayDensity(i) != 2) {\n          return 1;\n        }\n      }\n      return 2;\n    }\n    return displayDensity(display);\n  }",
    "info" : "MethodDeclaration[36348-36664]:MethodDeclaration[36348-36664]"
  }, {
    "left" : "static public int displayDensity(int display) {\n    if (PApplet.platform == PConstants.MACOSX) {\n      // This should probably be reset each time there's a display change.\n      // A 5-minute search didn't turn up any such event in the Java 7 API.\n      // Also, should we use the Toolkit associated with the editor window?\n      final String javaVendor = System.getProperty(\"java.vendor\");\n      if (javaVendor.contains(\"Oracle\")) {\n        GraphicsDevice device;\n        GraphicsEnvironment env = GraphicsEnvironment.getLocalGraphicsEnvironment();\n\n        if (display == -1) {\n          device = env.getDefaultScreenDevice();\n\n        } else if (display == SPAN) {\n          throw new RuntimeException(\"displayDensity() only works with specific display numbers\");\n\n        } else {\n          GraphicsDevice[] devices = env.getScreenDevices();\n          if (display > 0 && display <= devices.length) {\n            device = devices[display - 1];\n          } else {\n            if (devices.length == 1) {\n              System.err.println(\"Only one display is currently known, use displayDensity(1).\");\n            } else {\n              System.err.format(\"Your displays are numbered %d through %d, \" +\n                \"pass one of those numbers to displayDensity()\", 1, devices.length);\n            }\n            throw new RuntimeException(\"Display \" + display + \" does not exist.\");\n          }\n        }\n\n        try {\n          Field field = device.getClass().getDeclaredField(\"scale\");\n          if (field != null) {\n            field.setAccessible(true);\n            Object scale = field.get(device);\n\n            if (scale instanceof Integer && ((Integer)scale).intValue() == 2) {\n              return 2;\n            }\n          }\n        } catch (Exception ignore) { }\n      }\n    }\n    return 1;\n  }",
    "right" : "static public int displayDensity(int display) {\n    if (PApplet.platform == PConstants.MACOSX) {\n      // This should probably be reset each time there's a display change.\n      // A 5-minute search didn't turn up any such event in the Java 7 API.\n      // Also, should we use the Toolkit associated with the editor window?\n      final String javaVendor = System.getProperty(\"java.vendor\");\n      if (javaVendor.contains(\"Oracle\")) {\n        GraphicsDevice device;\n        GraphicsEnvironment env = GraphicsEnvironment.getLocalGraphicsEnvironment();\n\n        if (display == -1) {\n          device = env.getDefaultScreenDevice();\n\n        } else if (display == SPAN) {\n          throw new RuntimeException(\"displayDensity() only works with specific display numbers\");\n\n        } else {\n          GraphicsDevice[] devices = env.getScreenDevices();\n          if (display > 0 && display <= devices.length) {\n            device = devices[display - 1];\n          } else {\n            if (devices.length == 1) {\n              System.err.println(\"Only one display is currently known, use displayDensity(1).\");\n            } else {\n              System.err.format(\"Your displays are numbered %d through %d, \" +\n                \"pass one of those numbers to displayDensity()\", 1, devices.length);\n            }\n            throw new RuntimeException(\"Display \" + display + \" does not exist.\");\n          }\n        }\n\n        try {\n          Field field = device.getClass().getDeclaredField(\"scale\");\n          if (field != null) {\n            field.setAccessible(true);\n            Object scale = field.get(device);\n\n            if (scale instanceof Integer && ((Integer)scale).intValue() == 2) {\n              return 2;\n            }\n          }\n        } catch (Exception ignore) { }\n      }\n    }\n    return 1;\n  }",
    "info" : "MethodDeclaration[36669-38476]:MethodDeclaration[36669-38476]"
  }, {
    "left" : "public density int) : void",
    "right" : "public density int) : void",
    "info" : "MethodDeclaration[38480-39106]:MethodDeclaration[38480-39106]"
  }, {
    "left" : "/**\n   * Called by PSurface objects to set the width and height variables,\n   * and update the pixelWidth and pixelHeight variables.\n   */\n  public void setSize(int width, int height) {\n    this.width = width;\n    this.height = height;\n    pixelWidth = width * pixelDensity;\n    pixelHeight = height * pixelDensity;\n  }",
    "right" : "/**\n   * Called by PSurface objects to set the width and height variables,\n   * and update the pixelWidth and pixelHeight variables.\n   */\n  public void setSize(int width, int height) {\n    this.width = width;\n    this.height = height;\n    pixelWidth = width * pixelDensity;\n    pixelHeight = height * pixelDensity;\n  }",
    "info" : "MethodDeclaration[39111-39430]:MethodDeclaration[39111-39430]"
  }, {
    "left" : "public ) : void",
    "right" : "public ) : void",
    "info" : "MethodDeclaration[39516-39584]:MethodDeclaration[39516-39584]"
  }, {
    "left" : "public level int) : void",
    "right" : "public level int) : void",
    "info" : "MethodDeclaration[39588-39855]:MethodDeclaration[39588-39855]"
  }, {
    "left" : "/**\n   * @webref environment\n   */\n  public void noSmooth() {\n    if (insideSettings) {\n      this.smooth = 0;\n\n    } else if (this.smooth != 0) {\n      smoothWarning(\"noSmooth\");\n    }\n  }",
    "right" : "/**\n   * @webref environment\n   */\n  public void noSmooth() {\n    if (insideSettings) {\n      this.smooth = 0;\n\n    } else if (this.smooth != 0) {\n      smoothWarning(\"noSmooth\");\n    }\n  }",
    "info" : "MethodDeclaration[39859-40048]:MethodDeclaration[39859-40048]"
  }, {
    "left" : "private method String) : void",
    "right" : "private method String) : void",
    "info" : "MethodDeclaration[40053-40309]:MethodDeclaration[40053-40309]"
  }, {
    "left" : "public ) : PGraphics",
    "right" : "public ) : PGraphics",
    "info" : "MethodDeclaration[40395-40445]:MethodDeclaration[40395-40445]"
  }, {
    "left" : "public void orientation(int which) {\n    // ignore calls to the orientation command\n  }",
    "right" : "public void orientation(int which) {\n    // ignore calls to the orientation command\n  }",
    "info" : "MethodDeclaration[40528-40615]:MethodDeclaration[40528-40615]"
  }, {
    "left" : "public ) : void",
    "right" : "public ) : void",
    "info" : "MethodDeclaration[40620-41183]:MethodDeclaration[40620-41183]"
  }, {
    "left" : "public ) : void",
    "right" : "public ) : void",
    "info" : "MethodDeclaration[41188-42459]:MethodDeclaration[41188-42459]"
  }, {
    "left" : "public ) : void",
    "right" : "public ) : void",
    "info" : "MethodDeclaration[42464-42724]:MethodDeclaration[42464-42724]"
  }, {
    "left" : "/**\n   * Sketch has resumed. Called when switching tabs in a browser or\n   * swapping to this application on Android. Also called on startup.\n   * Use this to safely disable things like serial, sound, or sensors.\n   */\n  public void resume() { }",
    "right" : "/**\n   * Sketch has resumed. Called when switching tabs in a browser or\n   * swapping to this application on Android. Also called on startup.\n   * Use this to safely disable things like serial, sound, or sensors.\n   */\n  public void resume() { }",
    "info" : "MethodDeclaration[42729-42974]:MethodDeclaration[42729-42974]"
  }, {
    "left" : "/** Map of registered methods, stored by name. */\n  HashMap<String, RegisteredMethods> registerMap =\n    new HashMap<String, PApplet.RegisteredMethods>();",
    "right" : "/** Map of registered methods, stored by name. */\n  HashMap<String, RegisteredMethods> registerMap =\n    new HashMap<String, PApplet.RegisteredMethods>();",
    "info" : "FieldDeclaration[43600-43754]:FieldDeclaration[43600-43754]"
  }, {
    "left" : "",
    "right" : "",
    "info" : "TypeDeclaration[43759-46801]:TypeDeclaration[43759-46801]"
  }, {
    "left" : "int count;",
    "right" : "int count;",
    "info" : "FieldDeclaration[43789-43799]:FieldDeclaration[43789-43799]"
  }, {
    "left" : "Object[] objects;",
    "right" : "Object[] objects;",
    "info" : "FieldDeclaration[43804-43821]:FieldDeclaration[43804-43821]"
  }, {
    "left" : "",
    "right" : "",
    "info" : "FieldDeclaration[43943-43960]:FieldDeclaration[43943-43960]"
  }, {
    "left" : "",
    "right" : "",
    "info" : "FieldDeclaration[43965-44003]:FieldDeclaration[43965-44003]"
  }, {
    "left" : "package ) : void",
    "right" : "package ) : void",
    "info" : "MethodDeclaration[44010-44056]:MethodDeclaration[44010-44056]"
  }, {
    "left" : "void handle(Object[] args) {\n      for (int i = 0; i < count; i++) {\n        try {\n          methods[i].invoke(objects[i], args);\n        } catch (Exception e) {\n          // check for wrapped exception, get root exception\n          Throwable t;\n          if (e instanceof InvocationTargetException) {\n            InvocationTargetException ite = (InvocationTargetException) e;\n            t = ite.getCause();\n          } else {\n            t = e;\n          }\n          // check for RuntimeException, and allow to bubble up\n          if (t instanceof RuntimeException) {\n            // re-throw exception\n            throw (RuntimeException) t;\n          } else {\n            // trap and print as usual\n            t.printStackTrace();\n          }\n        }\n      }\n    }",
    "right" : "void handle(Object[] args) {\n      for (int i = 0; i < count; i++) {\n        try {\n          methods[i].invoke(objects[i], args);\n        } catch (Exception e) {\n          // check for wrapped exception, get root exception\n          Throwable t;\n          if (e instanceof InvocationTargetException) {\n            InvocationTargetException ite = (InvocationTargetException) e;\n            t = ite.getCause();\n          } else {\n            t = e;\n          }\n          // check for RuntimeException, and allow to bubble up\n          if (t instanceof RuntimeException) {\n            // re-throw exception\n            throw (RuntimeException) t;\n          } else {\n            // trap and print as usual\n            t.printStackTrace();\n          }\n        }\n      }\n    }",
    "info" : "MethodDeclaration[44063-44833]:MethodDeclaration[44063-44833]"
  }, {
    "left" : "void add(Object object, Method method) {\n      if (findIndex(object) == -1) {\n        if (objects == null) {\n          objects = new Object[5];\n          methods = new Method[5];\n\n        } else if (count == objects.length) {\n          objects = (Object[]) PApplet.expand(objects);\n          methods = (Method[]) PApplet.expand(methods);\n        }\n        objects[count] = object;\n        methods[count] = method;\n        count++;\n      } else {\n        die(method.getName() + \"() already added for this instance of \" +\n            object.getClass().getName());\n      }\n    }",
    "right" : "void add(Object object, Method method) {\n      if (findIndex(object) == -1) {\n        if (objects == null) {\n          objects = new Object[5];\n          methods = new Method[5];\n\n        } else if (count == objects.length) {\n          objects = (Object[]) PApplet.expand(objects);\n          methods = (Method[]) PApplet.expand(methods);\n        }\n        objects[count] = object;\n        methods[count] = method;\n        count++;\n      } else {\n        die(method.getName() + \"() already added for this instance of \" +\n            object.getClass().getName());\n      }\n    }",
    "info" : "MethodDeclaration[44840-45415]:MethodDeclaration[44840-45415]"
  }, {
    "left" : "/**\n     * Removes first object/method pair matched (and only the first,\n     * must be called multiple times if object is registered multiple times).\n     * Does not shrink array afterwards, silently returns if method not found.\n     */\n//    public void remove(Object object, Method method) {\n//      int index = findIndex(object, method);\n    public void remove(Object object) {\n      int index = findIndex(object);\n      if (index != -1) {\n        // shift remaining methods by one to preserve ordering\n        count--;\n        for (int i = index; i < count; i++) {\n          objects[i] = objects[i+1];\n          methods[i] = methods[i+1];\n        }\n        // clean things out for the gc's sake\n        objects[count] = null;\n        methods[count] = null;\n      }\n    }",
    "right" : "/**\n     * Removes first object/method pair matched (and only the first,\n     * must be called multiple times if object is registered multiple times).\n     * Does not shrink array afterwards, silently returns if method not found.\n     */\n//    public void remove(Object object, Method method) {\n//      int index = findIndex(object, method);\n    public void remove(Object object) {\n      int index = findIndex(object);\n      if (index != -1) {\n        // shift remaining methods by one to preserve ordering\n        count--;\n        for (int i = index; i < count; i++) {\n          objects[i] = objects[i+1];\n          methods[i] = methods[i+1];\n        }\n        // clean things out for the gc's sake\n        objects[count] = null;\n        methods[count] = null;\n      }\n    }",
    "info" : "MethodDeclaration[45422-46197]:MethodDeclaration[45422-46197]"
  }, {
    "left" : "protected int findIndex(Object object) {\n      for (int i = 0; i < count; i++) {\n        if (objects[i] == object) {\n//        if (objects[i] == object && methods[i].equals(method)) {\n          //objects[i].equals() might be overridden, so use == for safety\n          // since here we do care about actual object identity\n          //methods[i]==method is never true even for same method, so must use\n          // equals(), this should be safe because of object identity\n          return i;\n        }\n      }\n      return -1;\n    }",
    "right" : "protected int findIndex(Object object) {\n      for (int i = 0; i < count; i++) {\n        if (objects[i] == object) {\n//        if (objects[i] == object && methods[i].equals(method)) {\n          //objects[i].equals() might be overridden, so use == for safety\n          // since here we do care about actual object identity\n          //methods[i]==method is never true even for same method, so must use\n          // equals(), this should be safe because of object identity\n          return i;\n        }\n      }\n      return -1;\n    }",
    "info" : "MethodDeclaration[46266-46797]:MethodDeclaration[46266-46797]"
  }, {
    "left" : "public methodName String, target Object) : void",
    "right" : "public methodName String, target Object) : void",
    "info" : "MethodDeclaration[46806-48288]:MethodDeclaration[46806-48288]"
  }, {
    "left" : "private void registerNoArgs(String name, Object o) {\n    RegisteredMethods meth = registerMap.get(name);\n    if (meth == null) {\n      meth = new RegisteredMethods();\n      registerMap.put(name, meth);\n    }\n    Class<?> c = o.getClass();\n    try {\n      Method method = c.getMethod(name, new Class[] {});\n      meth.add(o, method);\n\n    } catch (NoSuchMethodException nsme) {\n      die(\"There is no public \" + name + \"() method in the class \" +\n          o.getClass().getName());\n\n    } catch (Exception e) {\n      die(\"Could not register \" + name + \" + () for \" + o, e);\n    }\n  }",
    "right" : "private void registerNoArgs(String name, Object o) {\n    RegisteredMethods meth = registerMap.get(name);\n    if (meth == null) {\n      meth = new RegisteredMethods();\n      registerMap.put(name, meth);\n    }\n    Class<?> c = o.getClass();\n    try {\n      Method method = c.getMethod(name, new Class[] {});\n      meth.add(o, method);\n\n    } catch (NoSuchMethodException nsme) {\n      die(\"There is no public \" + name + \"() method in the class \" +\n          o.getClass().getName());\n\n    } catch (Exception e) {\n      die(\"Could not register \" + name + \" + () for \" + o, e);\n    }\n  }",
    "info" : "MethodDeclaration[48293-48875]:MethodDeclaration[48293-48875]"
  }, {
    "left" : "private void registerWithArgs(String name, Object o, Class<?> cargs[]) {\n    RegisteredMethods meth = registerMap.get(name);\n    if (meth == null) {\n      meth = new RegisteredMethods();\n      registerMap.put(name, meth);\n    }\n    Class<?> c = o.getClass();\n    try {\n      Method method = c.getMethod(name, cargs);\n      meth.add(o, method);\n\n    } catch (NoSuchMethodException nsme) {\n      die(\"There is no public \" + name + \"() method in the class \" +\n          o.getClass().getName());\n\n    } catch (Exception e) {\n      die(\"Could not register \" + name + \" + () for \" + o, e);\n    }\n  }",
    "right" : "private void registerWithArgs(String name, Object o, Class<?> cargs[]) {\n    RegisteredMethods meth = registerMap.get(name);\n    if (meth == null) {\n      meth = new RegisteredMethods();\n      registerMap.put(name, meth);\n    }\n    Class<?> c = o.getClass();\n    try {\n      Method method = c.getMethod(name, cargs);\n      meth.add(o, method);\n\n    } catch (NoSuchMethodException nsme) {\n      die(\"There is no public \" + name + \"() method in the class \" +\n          o.getClass().getName());\n\n    } catch (Exception e) {\n      die(\"Could not register \" + name + \" + () for \" + o, e);\n    }\n  }",
    "info" : "MethodDeclaration[48880-49473]:MethodDeclaration[48880-49473]"
  }, {
    "left" : "public void unregisterMethod(String name, Object target) {\n    RegisteredMethods meth = registerMap.get(name);\n    if (meth == null) {\n      die(\"No registered methods with the name \" + name + \"() were found.\");\n    }\n    try {\n//      Method method = o.getClass().getMethod(name, new Class[] {});\n//      meth.remove(o, method);\n      meth.remove(target);\n    } catch (Exception e) {\n      die(\"Could not unregister \" + name + \"() for \" + target, e);\n    }\n  }",
    "right" : "public void unregisterMethod(String name, Object target) {\n    RegisteredMethods meth = registerMap.get(name);\n    if (meth == null) {\n      die(\"No registered methods with the name \" + name + \"() were found.\");\n    }\n    try {\n//      Method method = o.getClass().getMethod(name, new Class[] {});\n//      meth.remove(o, method);\n      meth.remove(target);\n    } catch (Exception e) {\n      die(\"Could not unregister \" + name + \"() for \" + target, e);\n    }\n  }",
    "info" : "MethodDeclaration[49619-50080]:MethodDeclaration[49619-50080]"
  }, {
    "left" : "protected methodName String) : void",
    "right" : "protected methodName String) : void",
    "info" : "MethodDeclaration[50085-50247]:MethodDeclaration[50085-50247]"
  }, {
    "left" : "protected methodName String, args ...) : void",
    "right" : "protected methodName String, args ...) : void",
    "info" : "MethodDeclaration[50252-50433]:MethodDeclaration[50252-50433]"
  }, {
    "left" : "/**\n   * ( begin auto-generated from setup.xml )\n   *\n   * The <b>setup()</b> function is called once when the program starts. It's\n   * used to define initial\n   * enviroment properties such as screen size and background color and to\n   * load media such as images\n   * and fonts as the program starts. There can only be one <b>setup()</b>\n   * function for each program and\n   * it shouldn't be called again after its initial execution. Note:\n   * Variables declared within\n   * <b>setup()</b> are not accessible within other functions, including\n   * <b>draw()</b>.\n   *\n   * ( end auto-generated )\n * @webref structure\n * @usage web_application\n * @see PApplet#size(int, int)\n * @see PApplet#loop()\n * @see PApplet#noLoop()\n * @see PApplet#draw()\n */\n  public void setup() {\n  }",
    "right" : "/**\n   * ( begin auto-generated from setup.xml )\n   *\n   * The <b>setup()</b> function is called once when the program starts. It's\n   * used to define initial\n   * enviroment properties such as screen size and background color and to\n   * load media such as images\n   * and fonts as the program starts. There can only be one <b>setup()</b>\n   * function for each program and\n   * it shouldn't be called again after its initial execution. Note:\n   * Variables declared within\n   * <b>setup()</b> are not accessible within other functions, including\n   * <b>draw()</b>.\n   *\n   * ( end auto-generated )\n * @webref structure\n * @usage web_application\n * @see PApplet#size(int, int)\n * @see PApplet#loop()\n * @see PApplet#noLoop()\n * @see PApplet#draw()\n */\n  public void setup() {\n  }",
    "info" : "MethodDeclaration[54532-55314]:MethodDeclaration[54532-55314]"
  }, {
    "left" : "/**\n   * ( begin auto-generated from draw.xml )\n   *\n   * Called directly after <b>setup()</b> and continuously executes the lines\n   * of code contained inside its block until the program is stopped or\n   * <b>noLoop()</b> is called. The <b>draw()</b> function is called\n   * automatically and should never be called explicitly. It should always be\n   * controlled with <b>noLoop()</b>, <b>redraw()</b> and <b>loop()</b>.\n   * After <b>noLoop()</b> stops the code in <b>draw()</b> from executing,\n   * <b>redraw()</b> causes the code inside <b>draw()</b> to execute once and\n   * <b>loop()</b> will causes the code inside <b>draw()</b> to execute\n   * continuously again. The number of times <b>draw()</b> executes in each\n   * second may be controlled with <b>frameRate()</b> function.\n   * There can only be one <b>draw()</b> function for each sketch\n   * and <b>draw()</b> must exist if you want the code to run continuously or\n   * to process events such as <b>mousePressed()</b>. Sometimes, you might\n   * have an empty call to <b>draw()</b> in your program as shown in the\n   * above example.\n   *\n   * ( end auto-generated )\n * @webref structure\n * @usage web_application\n * @see PApplet#setup()\n * @see PApplet#loop()\n * @see PApplet#noLoop()\n * @see PApplet#redraw()\n * @see PApplet#frameRate(float)\n * @see PGraphics#background(float, float, float, float)\n */\n  public void draw() {\n    // if no draw method, then shut things down\n    //System.out.println(\"no draw method, goodbye\");\n    finished = true;\n  }",
    "right" : "/**\n   * ( begin auto-generated from draw.xml )\n   *\n   * Called directly after <b>setup()</b> and continuously executes the lines\n   * of code contained inside its block until the program is stopped or\n   * <b>noLoop()</b> is called. The <b>draw()</b> function is called\n   * automatically and should never be called explicitly. It should always be\n   * controlled with <b>noLoop()</b>, <b>redraw()</b> and <b>loop()</b>.\n   * After <b>noLoop()</b> stops the code in <b>draw()</b> from executing,\n   * <b>redraw()</b> causes the code inside <b>draw()</b> to execute once and\n   * <b>loop()</b> will causes the code inside <b>draw()</b> to execute\n   * continuously again. The number of times <b>draw()</b> executes in each\n   * second may be controlled with <b>frameRate()</b> function.\n   * There can only be one <b>draw()</b> function for each sketch\n   * and <b>draw()</b> must exist if you want the code to run continuously or\n   * to process events such as <b>mousePressed()</b>. Sometimes, you might\n   * have an empty call to <b>draw()</b> in your program as shown in the\n   * above example.\n   *\n   * ( end auto-generated )\n * @webref structure\n * @usage web_application\n * @see PApplet#setup()\n * @see PApplet#loop()\n * @see PApplet#noLoop()\n * @see PApplet#redraw()\n * @see PApplet#frameRate(float)\n * @see PGraphics#background(float, float, float, float)\n */\n  public void draw() {\n    // if no draw method, then shut things down\n    //System.out.println(\"no draw method, goodbye\");\n    finished = true;\n  }",
    "info" : "MethodDeclaration[55316-56835]:MethodDeclaration[55316-56835]"
  }, {
    "left" : "/**\n   * Create a full-screen sketch using the default renderer.\n   */\n  public void fullScreen() {\n    if (!fullScreen) {\n      if (insideSettings(\"fullScreen\")) {\n        this.fullScreen = true;\n      }\n    }\n  }",
    "right" : "/**\n   * Create a full-screen sketch using the default renderer.\n   */\n  public void fullScreen() {\n    if (!fullScreen) {\n      if (insideSettings(\"fullScreen\")) {\n        this.fullScreen = true;\n      }\n    }\n  }",
    "info" : "MethodDeclaration[57261-57475]:MethodDeclaration[57261-57475]"
  }, {
    "left" : "public display int) : void",
    "right" : "public display int) : void",
    "info" : "MethodDeclaration[57480-57700]:MethodDeclaration[57480-57700]"
  }, {
    "left" : "public renderer String) : void",
    "right" : "public renderer String) : void",
    "info" : "MethodDeclaration[57703-58268]:MethodDeclaration[57703-58268]"
  }, {
    "left" : "/**\n   * @param display the screen to run the sketch on (1, 2, 3, etc.)\n   */\n  public void fullScreen(String renderer, int display) {\n    if (!fullScreen ||\n        !renderer.equals(this.renderer) ||\n        display != this.display) {\n      if (insideSettings(\"fullScreen\", renderer, display)) {\n        this.fullScreen = true;\n        this.renderer = renderer;\n        this.display = display;\n      }\n    }\n  }",
    "right" : "/**\n   * @param display the screen to run the sketch on (1, 2, 3, etc.)\n   */\n  public void fullScreen(String renderer, int display) {\n    if (!fullScreen ||\n        !renderer.equals(this.renderer) ||\n        display != this.display) {\n      if (insideSettings(\"fullScreen\", renderer, display)) {\n        this.fullScreen = true;\n        this.renderer = renderer;\n        this.display = display;\n      }\n    }\n  }",
    "info" : "MethodDeclaration[58273-58685]:MethodDeclaration[58273-58685]"
  }, {
    "left" : "/**\n   * ( begin auto-generated from size.xml )\n   *\n   * Defines the dimension of the display window in units of pixels. The\n   * <b>size()</b> function must be the first line in <b>setup()</b>. If\n   * <b>size()</b> is not used, the default size of the window is 100x100\n   * pixels. The system variables <b>width</b> and <b>height</b> are set by\n   * the parameters passed to this function.<br />\n   * <br />\n   * Do not use variables as the parameters to <b>size()</b> function,\n   * because it will cause problems when exporting your sketch. When\n   * variables are used, the dimensions of your sketch cannot be determined\n   * during export. Instead, employ numeric values in the <b>size()</b>\n   * statement, and then use the built-in <b>width</b> and <b>height</b>\n   * variables inside your program when the dimensions of the display window\n   * are needed.<br />\n   * <br />\n   * The <b>size()</b> function can only be used once inside a sketch, and\n   * cannot be used for resizing.<br/>\n   * <br/> <b>renderer</b> parameter selects which rendering engine to use.\n   * For example, if you will be drawing 3D shapes, use <b>P3D</b>, if you\n   * want to export images from a program as a PDF file use <b>PDF</b>. A\n   * brief description of the three primary renderers follows:<br />\n   * <br />\n   * <b>P2D</b> (Processing 2D) - The default renderer that supports two\n   * dimensional drawing.<br />\n   * <br />\n   * <b>P3D</b> (Processing 3D) - 3D graphics renderer that makes use of\n   * OpenGL-compatible graphics hardware.<br />\n   * <br />\n   * <b>PDF</b> - The PDF renderer draws 2D graphics directly to an Acrobat\n   * PDF file. This produces excellent results when you need vector shapes\n   * for high resolution output or printing. You must first use Import\n   * Library &rarr; PDF to make use of the library. More information can be\n   * found in the PDF library reference.<br />\n   * <br />\n   * The P3D renderer doesn't support <b>strokeCap()</b> or\n   * <b>strokeJoin()</b>, which can lead to ugly results when using\n   * <b>strokeWeight()</b>. (<a\n   * href=\"http://code.google.com/p/processing/issues/detail?id=123\">Issue\n   * 123</a>) <br />\n   * <br />\n   * The maximum width and height is limited by your operating system, and is\n   * usually the width and height of your actual screen. On some machines it\n   * may simply be the number of pixels on your current screen, meaning that\n   * a screen of 800x600 could support <b>size(1600, 300)</b>, since it's the\n   * same number of pixels. This varies widely so you'll have to try\n   * different rendering modes and sizes until you get what you're looking\n   * for. If you need something larger, use <b>createGraphics</b> to create a\n   * non-visible drawing surface.<br />\n   * <br />\n   * Again, the <b>size()</b> function must be the first line of the code (or\n   * first item inside setup). Any code that appears before the <b>size()</b>\n   * command may run more than once, which can lead to confusing results.\n   *\n   * ( end auto-generated )\n   *\n   * <h3>Advanced</h3>\n   * If using Java 1.3 or later, this will default to using\n   * PGraphics2, the Java2D-based renderer. If using Java 1.1,\n   * or if PGraphics2 is not available, then PGraphics will be used.\n   * To set your own renderer, use the other version of the size()\n   * method that takes a renderer as its last parameter.\n   * <p>\n   * If called once a renderer has already been set, this will\n   * use the previous renderer and simply resize it.\n   *\n   * @webref environment\n   * @param width width of the display window in units of pixels\n   * @param height height of the display window in units of pixels\n   * @see PApplet#width\n   * @see PApplet#height\n   */\n  public void size(int width, int height) {\n    // Check to make sure the width/height have actually changed. It's ok to\n    // have size() duplicated (and may be better to not remove it from where\n    // it sits in the code anyway when adding it to settings()). Only take\n    // action if things have changed.\n    if (width != this.width ||\n        height != this.height) {\n      if (insideSettings(\"size\", width, height)) {\n        this.width = width;\n        this.height = height;\n      }\n    }\n  }",
    "right" : "/**\n   * ( begin auto-generated from size.xml )\n   *\n   * Defines the dimension of the display window in units of pixels. The\n   * <b>size()</b> function must be the first line in <b>setup()</b>. If\n   * <b>size()</b> is not used, the default size of the window is 100x100\n   * pixels. The system variables <b>width</b> and <b>height</b> are set by\n   * the parameters passed to this function.<br />\n   * <br />\n   * Do not use variables as the parameters to <b>size()</b> function,\n   * because it will cause problems when exporting your sketch. When\n   * variables are used, the dimensions of your sketch cannot be determined\n   * during export. Instead, employ numeric values in the <b>size()</b>\n   * statement, and then use the built-in <b>width</b> and <b>height</b>\n   * variables inside your program when the dimensions of the display window\n   * are needed.<br />\n   * <br />\n   * The <b>size()</b> function can only be used once inside a sketch, and\n   * cannot be used for resizing.<br/>\n   * <br/> <b>renderer</b> parameter selects which rendering engine to use.\n   * For example, if you will be drawing 3D shapes, use <b>P3D</b>, if you\n   * want to export images from a program as a PDF file use <b>PDF</b>. A\n   * brief description of the three primary renderers follows:<br />\n   * <br />\n   * <b>P2D</b> (Processing 2D) - The default renderer that supports two\n   * dimensional drawing.<br />\n   * <br />\n   * <b>P3D</b> (Processing 3D) - 3D graphics renderer that makes use of\n   * OpenGL-compatible graphics hardware.<br />\n   * <br />\n   * <b>PDF</b> - The PDF renderer draws 2D graphics directly to an Acrobat\n   * PDF file. This produces excellent results when you need vector shapes\n   * for high resolution output or printing. You must first use Import\n   * Library &rarr; PDF to make use of the library. More information can be\n   * found in the PDF library reference.<br />\n   * <br />\n   * The P3D renderer doesn't support <b>strokeCap()</b> or\n   * <b>strokeJoin()</b>, which can lead to ugly results when using\n   * <b>strokeWeight()</b>. (<a\n   * href=\"http://code.google.com/p/processing/issues/detail?id=123\">Issue\n   * 123</a>) <br />\n   * <br />\n   * The maximum width and height is limited by your operating system, and is\n   * usually the width and height of your actual screen. On some machines it\n   * may simply be the number of pixels on your current screen, meaning that\n   * a screen of 800x600 could support <b>size(1600, 300)</b>, since it's the\n   * same number of pixels. This varies widely so you'll have to try\n   * different rendering modes and sizes until you get what you're looking\n   * for. If you need something larger, use <b>createGraphics</b> to create a\n   * non-visible drawing surface.<br />\n   * <br />\n   * Again, the <b>size()</b> function must be the first line of the code (or\n   * first item inside setup). Any code that appears before the <b>size()</b>\n   * command may run more than once, which can lead to confusing results.\n   *\n   * ( end auto-generated )\n   *\n   * <h3>Advanced</h3>\n   * If using Java 1.3 or later, this will default to using\n   * PGraphics2, the Java2D-based renderer. If using Java 1.1,\n   * or if PGraphics2 is not available, then PGraphics will be used.\n   * To set your own renderer, use the other version of the size()\n   * method that takes a renderer as its last parameter.\n   * <p>\n   * If called once a renderer has already been set, this will\n   * use the previous renderer and simply resize it.\n   *\n   * @webref environment\n   * @param width width of the display window in units of pixels\n   * @param height height of the display window in units of pixels\n   * @see PApplet#width\n   * @see PApplet#height\n   */\n  public void size(int width, int height) {\n    // Check to make sure the width/height have actually changed. It's ok to\n    // have size() duplicated (and may be better to not remove it from where\n    // it sits in the code anyway when adding it to settings()). Only take\n    // action if things have changed.\n    if (width != this.width ||\n        height != this.height) {\n      if (insideSettings(\"size\", width, height)) {\n        this.width = width;\n        this.height = height;\n      }\n    }\n  }",
    "info" : "MethodDeclaration[58690-62904]:MethodDeclaration[58690-62904]"
  }, {
    "left" : "public width int, height int, renderer String) : void",
    "right" : "public width int, height int, renderer String) : void",
    "info" : "MethodDeclaration[62909-63245]:MethodDeclaration[62909-63245]"
  }, {
    "left" : "/**\n   * @nowebref\n   */\n  public void size(int width, int height, String renderer, String path) {\n    // Don't bother checking path, it's probably been modified to absolute,\n    // so it would always trigger. But the alternative is comparing the\n    // canonical file, which seems overboard.\n    if (width != this.width ||\n        height != this.height ||\n        !renderer.equals(this.renderer)) {\n      if (insideSettings(\"size\", width, height, renderer, path)) {\n        this.width = width;\n        this.height = height;\n        this.renderer = renderer;\n        this.outputPath = path;\n      }\n    }\n\n    /*\n    if (!renderer.equals(sketchRenderer())) {\n      if (external) {\n        // The PDE should have parsed it, but something still went wrong\n        final String msg =\n          String.format(\"Something bad happened when calling \" +\n                        \"size(%d, %d, %s, %s)\", w, h, renderer, path);\n        throw new RuntimeException(msg);\n\n      } else {\n        System.err.println(\"Because you're not running from the PDE, add this to your code:\");\n        System.err.println(\"public String sketchRenderer() {\");\n        System.err.println(\"  return \\\"\" + renderer + \"\\\";\");\n        System.err.println(\"}\");\n        throw new RuntimeException(\"The sketchRenderer() method is not implemented.\");\n      }\n    }\n    */\n\n    // size() shouldn't actually do anything here [3.0a8]\n//    surface.setSize(w, h);\n    // this won't be absolute, which will piss off PDF [3.0a8]\n//    g.setPath(path);  // finally, a path\n\n//    // Run this from the EDT, just cuz it's AWT stuff (or maybe later Swing)\n//   EventQueue.invokeLater(new Runnable() {\n//     public void run() {\n//    // Set the preferred size so that the layout managers can handle it\n//    setPreferredSize(new Dimension(w, h));\n//    setSize(w, h);\n//     }\n//   });\n//\n//    // ensure that this is an absolute path\n//    if (path != null) path = savePath(path);\n//\n//    String currentRenderer = g.getClass().getName();\n//    if (currentRenderer.equals(renderer)) {\n////      // Avoid infinite loop of throwing exception to reset renderer\n////      resizeRenderer(w, h);\n//      surface.setSize(w, h);\n//\n//    } else {  // renderer change attempted\n//      // no longer kosher with 3.0a5\n//      throw new RuntimeException(\"Y'all need to implement sketchRenderer()\");\n//      /*\n//      // otherwise ok to fall through and create renderer below\n//      // the renderer is changing, so need to create a new object\n//      g = makeGraphics(w, h, renderer, path, true);\n//      this.width = w;\n//      this.height = h;\n//\n//      // fire resize event to make sure the applet is the proper size\n////      setSize(iwidth, iheight);\n//      // this is the function that will run if the user does their own\n//      // size() command inside setup, so set defaultSize to false.\n//      defaultSize = false;\n//\n//      // throw an exception so that setup() is called again\n//      // but with a properly sized render\n//      // this is for opengl, which needs a valid, properly sized\n//      // display before calling anything inside setup().\n//      throw new RendererChangeException();\n//      */\n//    }\n  }",
    "right" : "/**\n   * @nowebref\n   */\n  public void size(int width, int height, String renderer, String path) {\n    // Don't bother checking path, it's probably been modified to absolute,\n    // so it would always trigger. But the alternative is comparing the\n    // canonical file, which seems overboard.\n    if (width != this.width ||\n        height != this.height ||\n        !renderer.equals(this.renderer)) {\n      if (insideSettings(\"size\", width, height, renderer, path)) {\n        this.width = width;\n        this.height = height;\n        this.renderer = renderer;\n        this.outputPath = path;\n      }\n    }\n\n    /*\n    if (!renderer.equals(sketchRenderer())) {\n      if (external) {\n        // The PDE should have parsed it, but something still went wrong\n        final String msg =\n          String.format(\"Something bad happened when calling \" +\n                        \"size(%d, %d, %s, %s)\", w, h, renderer, path);\n        throw new RuntimeException(msg);\n\n      } else {\n        System.err.println(\"Because you're not running from the PDE, add this to your code:\");\n        System.err.println(\"public String sketchRenderer() {\");\n        System.err.println(\"  return \\\"\" + renderer + \"\\\";\");\n        System.err.println(\"}\");\n        throw new RuntimeException(\"The sketchRenderer() method is not implemented.\");\n      }\n    }\n    */\n\n    // size() shouldn't actually do anything here [3.0a8]\n//    surface.setSize(w, h);\n    // this won't be absolute, which will piss off PDF [3.0a8]\n//    g.setPath(path);  // finally, a path\n\n//    // Run this from the EDT, just cuz it's AWT stuff (or maybe later Swing)\n//   EventQueue.invokeLater(new Runnable() {\n//     public void run() {\n//    // Set the preferred size so that the layout managers can handle it\n//    setPreferredSize(new Dimension(w, h));\n//    setSize(w, h);\n//     }\n//   });\n//\n//    // ensure that this is an absolute path\n//    if (path != null) path = savePath(path);\n//\n//    String currentRenderer = g.getClass().getName();\n//    if (currentRenderer.equals(renderer)) {\n////      // Avoid infinite loop of throwing exception to reset renderer\n////      resizeRenderer(w, h);\n//      surface.setSize(w, h);\n//\n//    } else {  // renderer change attempted\n//      // no longer kosher with 3.0a5\n//      throw new RuntimeException(\"Y'all need to implement sketchRenderer()\");\n//      /*\n//      // otherwise ok to fall through and create renderer below\n//      // the renderer is changing, so need to create a new object\n//      g = makeGraphics(w, h, renderer, path, true);\n//      this.width = w;\n//      this.height = h;\n//\n//      // fire resize event to make sure the applet is the proper size\n////      setSize(iwidth, iheight);\n//      // this is the function that will run if the user does their own\n//      // size() command inside setup, so set defaultSize to false.\n//      defaultSize = false;\n//\n//      // throw an exception so that setup() is called again\n//      // but with a properly sized render\n//      // this is for opengl, which needs a valid, properly sized\n//      // display before calling anything inside setup().\n//      throw new RendererChangeException();\n//      */\n//    }\n  }",
    "info" : "MethodDeclaration[63250-66425]:MethodDeclaration[63250-66425]"
  }, {
    "left" : "public PGraphics createGraphics(int w, int h) {\n    return createGraphics(w, h, JAVA2D);\n  }",
    "right" : "public PGraphics createGraphics(int w, int h) {\n    return createGraphics(w, h, JAVA2D);\n  }",
    "info" : "MethodDeclaration[66430-66522]:MethodDeclaration[66430-66522]"
  }, {
    "left" : "/**\n   * ( begin auto-generated from createGraphics.xml )\n   *\n   * Creates and returns a new <b>PGraphics</b> object of the types P2D or\n   * P3D. Use this class if you need to draw into an off-screen graphics\n   * buffer. The PDF renderer requires the filename parameter. The DXF\n   * renderer should not be used with <b>createGraphics()</b>, it's only\n   * built for use with <b>beginRaw()</b> and <b>endRaw()</b>.<br />\n   * <br />\n   * It's important to call any drawing functions between <b>beginDraw()</b>\n   * and <b>endDraw()</b> statements. This is also true for any functions\n   * that affect drawing, such as <b>smooth()</b> or <b>colorMode()</b>.<br/>\n   * <br/> the main drawing surface which is completely opaque, surfaces\n   * created with <b>createGraphics()</b> can have transparency. This makes\n   * it possible to draw into a graphics and maintain the alpha channel. By\n   * using <b>save()</b> to write a PNG or TGA file, the transparency of the\n   * graphics object will be honored. Note that transparency levels are\n   * binary: pixels are either complete opaque or transparent. For the time\n   * being, this means that text characters will be opaque blocks. This will\n   * be fixed in a future release (<a\n   * href=\"http://code.google.com/p/processing/issues/detail?id=80\">Issue 80</a>).\n   *\n   * ( end auto-generated )\n   * <h3>Advanced</h3>\n   * Create an offscreen PGraphics object for drawing. This can be used\n   * for bitmap or vector images drawing or rendering.\n   * <UL>\n   * <LI>Do not use \"new PGraphicsXxxx()\", use this method. This method\n   * ensures that internal variables are set up properly that tie the\n   * new graphics context back to its parent PApplet.\n   * <LI>The basic way to create bitmap images is to use the <A\n   * HREF=\"http://processing.org/reference/saveFrame_.html\">saveFrame()</A>\n   * function.\n   * <LI>If you want to create a really large scene and write that,\n   * first make sure that you've allocated a lot of memory in the Preferences.\n   * <LI>If you want to create images that are larger than the screen,\n   * you should create your own PGraphics object, draw to that, and use\n   * <A HREF=\"http://processing.org/reference/save_.html\">save()</A>.\n   * <PRE>\n   *\n   * PGraphics big;\n   *\n   * void setup() {\n   *   big = createGraphics(3000, 3000);\n   *\n   *   big.beginDraw();\n   *   big.background(128);\n   *   big.line(20, 1800, 1800, 900);\n   *   // etc..\n   *   big.endDraw();\n   *\n   *   // make sure the file is written to the sketch folder\n   *   big.save(\"big.tif\");\n   * }\n   *\n   * </PRE>\n   * <LI>It's important to always wrap drawing to createGraphics() with\n   * beginDraw() and endDraw() (beginFrame() and endFrame() prior to\n   * revision 0115). The reason is that the renderer needs to know when\n   * drawing has stopped, so that it can update itself internally.\n   * This also handles calling the defaults() method, for people familiar\n   * with that.\n   * <LI>With Processing 0115 and later, it's possible to write images in\n   * formats other than the default .tga and .tiff. The exact formats and\n   * background information can be found in the developer's reference for\n   * <A HREF=\"http://dev.processing.org/reference/core/javadoc/processing/core/PImage.html#save(java.lang.String)\">PImage.save()</A>.\n   * </UL>\n   *\n   * @webref rendering\n   * @param w width in pixels\n   * @param h height in pixels\n   * @param renderer Either P2D, P3D, or PDF\n   * @see PGraphics#PGraphics\n   *\n   */\n  public PGraphics createGraphics(int w, int h, String renderer) {\n    return createGraphics(w, h, renderer, null);\n  }",
    "right" : "/**\n   * ( begin auto-generated from createGraphics.xml )\n   *\n   * Creates and returns a new <b>PGraphics</b> object of the types P2D or\n   * P3D. Use this class if you need to draw into an off-screen graphics\n   * buffer. The PDF renderer requires the filename parameter. The DXF\n   * renderer should not be used with <b>createGraphics()</b>, it's only\n   * built for use with <b>beginRaw()</b> and <b>endRaw()</b>.<br />\n   * <br />\n   * It's important to call any drawing functions between <b>beginDraw()</b>\n   * and <b>endDraw()</b> statements. This is also true for any functions\n   * that affect drawing, such as <b>smooth()</b> or <b>colorMode()</b>.<br/>\n   * <br/> the main drawing surface which is completely opaque, surfaces\n   * created with <b>createGraphics()</b> can have transparency. This makes\n   * it possible to draw into a graphics and maintain the alpha channel. By\n   * using <b>save()</b> to write a PNG or TGA file, the transparency of the\n   * graphics object will be honored. Note that transparency levels are\n   * binary: pixels are either complete opaque or transparent. For the time\n   * being, this means that text characters will be opaque blocks. This will\n   * be fixed in a future release (<a\n   * href=\"http://code.google.com/p/processing/issues/detail?id=80\">Issue 80</a>).\n   *\n   * ( end auto-generated )\n   * <h3>Advanced</h3>\n   * Create an offscreen PGraphics object for drawing. This can be used\n   * for bitmap or vector images drawing or rendering.\n   * <UL>\n   * <LI>Do not use \"new PGraphicsXxxx()\", use this method. This method\n   * ensures that internal variables are set up properly that tie the\n   * new graphics context back to its parent PApplet.\n   * <LI>The basic way to create bitmap images is to use the <A\n   * HREF=\"http://processing.org/reference/saveFrame_.html\">saveFrame()</A>\n   * function.\n   * <LI>If you want to create a really large scene and write that,\n   * first make sure that you've allocated a lot of memory in the Preferences.\n   * <LI>If you want to create images that are larger than the screen,\n   * you should create your own PGraphics object, draw to that, and use\n   * <A HREF=\"http://processing.org/reference/save_.html\">save()</A>.\n   * <PRE>\n   *\n   * PGraphics big;\n   *\n   * void setup() {\n   *   big = createGraphics(3000, 3000);\n   *\n   *   big.beginDraw();\n   *   big.background(128);\n   *   big.line(20, 1800, 1800, 900);\n   *   // etc..\n   *   big.endDraw();\n   *\n   *   // make sure the file is written to the sketch folder\n   *   big.save(\"big.tif\");\n   * }\n   *\n   * </PRE>\n   * <LI>It's important to always wrap drawing to createGraphics() with\n   * beginDraw() and endDraw() (beginFrame() and endFrame() prior to\n   * revision 0115). The reason is that the renderer needs to know when\n   * drawing has stopped, so that it can update itself internally.\n   * This also handles calling the defaults() method, for people familiar\n   * with that.\n   * <LI>With Processing 0115 and later, it's possible to write images in\n   * formats other than the default .tga and .tiff. The exact formats and\n   * background information can be found in the developer's reference for\n   * <A HREF=\"http://dev.processing.org/reference/core/javadoc/processing/core/PImage.html#save(java.lang.String)\">PImage.save()</A>.\n   * </UL>\n   *\n   * @webref rendering\n   * @param w width in pixels\n   * @param h height in pixels\n   * @param renderer Either P2D, P3D, or PDF\n   * @see PGraphics#PGraphics\n   *\n   */\n  public PGraphics createGraphics(int w, int h, String renderer) {\n    return createGraphics(w, h, renderer, null);\n  }",
    "info" : "MethodDeclaration[66527-70128]:MethodDeclaration[66527-70128]"
  }, {
    "left" : "public w int, h int, renderer String, path String) : PGraphics",
    "right" : "public w int, h int, renderer String, path String) : PGraphics",
    "info" : "MethodDeclaration[70133-70839]:MethodDeclaration[70133-70839]"
  }, {
    "left" : "protected w int, h int, renderer String, path String, primary boolean) : PGraphics",
    "right" : "protected w int, h int, renderer String, path String, primary boolean) : PGraphics",
    "info" : "MethodDeclaration[70984-74798]:MethodDeclaration[70984-74798]"
  }, {
    "left" : "/** Create default renderer, likely to be resized, but needed for surface init. */\n  protected PGraphics createPrimaryGraphics() {\n    return makeGraphics(sketchWidth(), sketchHeight(),\n                        sketchRenderer(), sketchOutputPath(), true);\n  }",
    "right" : "/** Create default renderer, likely to be resized, but needed for surface init. */\n  protected PGraphics createPrimaryGraphics() {\n    return makeGraphics(sketchWidth(), sketchHeight(),\n                        sketchRenderer(), sketchOutputPath(), true);\n  }",
    "info" : "MethodDeclaration[74803-75061]:MethodDeclaration[74803-75061]"
  }, {
    "left" : "public w int, h int, format int) : PImage",
    "right" : "public w int, h int, format int) : PImage",
    "info" : "MethodDeclaration[75066-76331]:MethodDeclaration[75066-76331]"
  }, {
    "left" : "protected boolean insideDraw;",
    "right" : "protected boolean insideDraw;",
    "info" : "FieldDeclaration[76403-76432]:FieldDeclaration[76403-76432]"
  }, {
    "left" : "/** Last time in nanoseconds that frameRate was checked */\n  protected long frameRateLastNanos = 0;",
    "right" : "/** Last time in nanoseconds that frameRate was checked */\n  protected long frameRateLastNanos = 0;",
    "info" : "FieldDeclaration[76436-76535]:FieldDeclaration[76436-76535]"
  }, {
    "left" : "public ) : void",
    "right" : "public ) : void",
    "info" : "MethodDeclaration[76540-79458]:MethodDeclaration[76540-79458]"
  }, {
    "left" : "/**\n   * ( begin auto-generated from redraw.xml )\n   *\n   * Executes the code within <b>draw()</b> one time. This functions allows\n   * the program to update the display window only when necessary, for\n   * example when an event registered by <b>mousePressed()</b> or\n   * <b>keyPressed()</b> occurs.\n   * <br/><br/> structuring a program, it only makes sense to call redraw()\n   * within events such as <b>mousePressed()</b>. This is because\n   * <b>redraw()</b> does not run <b>draw()</b> immediately (it only sets a\n   * flag that indicates an update is needed).\n   * <br/><br/> <b>redraw()</b> within <b>draw()</b> has no effect because\n   * <b>draw()</b> is continuously called anyway.\n   *\n   * ( end auto-generated )\n * @webref structure\n * @usage web_application\n * @see PApplet#draw()\n * @see PApplet#loop()\n * @see PApplet#noLoop()\n * @see PApplet#frameRate(float)\n */\n  synchronized public void redraw() {\n    if (!looping) {\n      redraw = true;\n//      if (thread != null) {\n//        // wake from sleep (necessary otherwise it'll be\n//        // up to 10 seconds before update)\n//        if (CRUSTY_THREADS) {\n//          thread.interrupt();\n//        } else {\n//          synchronized (blocker) {\n//            blocker.notifyAll();\n//          }\n//        }\n//      }\n    }\n  }",
    "right" : "/**\n   * ( begin auto-generated from redraw.xml )\n   *\n   * Executes the code within <b>draw()</b> one time. This functions allows\n   * the program to update the display window only when necessary, for\n   * example when an event registered by <b>mousePressed()</b> or\n   * <b>keyPressed()</b> occurs.\n   * <br/><br/> structuring a program, it only makes sense to call redraw()\n   * within events such as <b>mousePressed()</b>. This is because\n   * <b>redraw()</b> does not run <b>draw()</b> immediately (it only sets a\n   * flag that indicates an update is needed).\n   * <br/><br/> <b>redraw()</b> within <b>draw()</b> has no effect because\n   * <b>draw()</b> is continuously called anyway.\n   *\n   * ( end auto-generated )\n * @webref structure\n * @usage web_application\n * @see PApplet#draw()\n * @see PApplet#loop()\n * @see PApplet#noLoop()\n * @see PApplet#frameRate(float)\n */\n  synchronized public void redraw() {\n    if (!looping) {\n      redraw = true;\n//      if (thread != null) {\n//        // wake from sleep (necessary otherwise it'll be\n//        // up to 10 seconds before update)\n//        if (CRUSTY_THREADS) {\n//          thread.interrupt();\n//        } else {\n//          synchronized (blocker) {\n//            blocker.notifyAll();\n//          }\n//        }\n//      }\n    }\n  }",
    "info" : "MethodDeclaration[79681-80973]:MethodDeclaration[79681-80973]"
  }, {
    "left" : "public ) : void",
    "right" : "public ) : void",
    "info" : "MethodDeclaration[80975-81428]:MethodDeclaration[80975-81428]"
  }, {
    "left" : "public ) : void",
    "right" : "public ) : void",
    "info" : "MethodDeclaration[81430-82742]:MethodDeclaration[81430-82742]"
  }, {
    "left" : "InternalEventQueue eventQueue = new InternalEventQueue();",
    "right" : "InternalEventQueue eventQueue = new InternalEventQueue();",
    "info" : "FieldDeclaration[82814-82871]:FieldDeclaration[82814-82871]"
  }, {
    "left" : "",
    "right" : "",
    "info" : "TypeDeclaration[82876-83558]:TypeDeclaration[82876-83558]"
  }, {
    "left" : "protected Event queue[] = new Event[10];",
    "right" : "protected Event queue[] = new Event[10];",
    "info" : "FieldDeclaration[82914-82954]:FieldDeclaration[82914-82954]"
  }, {
    "left" : "protected int offset;",
    "right" : "protected int offset;",
    "info" : "FieldDeclaration[82959-82980]:FieldDeclaration[82959-82980]"
  }, {
    "left" : "protected int count;",
    "right" : "protected int count;",
    "info" : "FieldDeclaration[82985-83005]:FieldDeclaration[82985-83005]"
  }, {
    "left" : "synchronized void add(Event e) {\n      if (count == queue.length) {\n        queue = (Event[]) expand(queue);\n      }\n      queue[count++] = e;\n    }",
    "right" : "synchronized void add(Event e) {\n      if (count == queue.length) {\n        queue = (Event[]) expand(queue);\n      }\n      queue[count++] = e;\n    }",
    "info" : "MethodDeclaration[83011-83159]:MethodDeclaration[83011-83159]"
  }, {
    "left" : "synchronized Event remove() {\n      if (offset == count) {\n        throw new RuntimeException(\"Nothing left on the event queue.\");\n      }\n      Event outgoing = queue[offset++];\n      if (offset == count) {\n        // All done, time to reset\n        offset = 0;\n        count = 0;\n      }\n      return outgoing;\n    }",
    "right" : "synchronized Event remove() {\n      if (offset == count) {\n        throw new RuntimeException(\"Nothing left on the event queue.\");\n      }\n      Event outgoing = queue[offset++];\n      if (offset == count) {\n        // All done, time to reset\n        offset = 0;\n        count = 0;\n      }\n      return outgoing;\n    }",
    "info" : "MethodDeclaration[83165-83483]:MethodDeclaration[83165-83483]"
  }, {
    "left" : "package ) : boolean",
    "right" : "package ) : boolean",
    "info" : "MethodDeclaration[83489-83554]:MethodDeclaration[83489-83554]"
  }, {
    "left" : "/**\n   * Add an event to the internal event queue, or process it immediately if\n   * the sketch is not currently looping.\n   */\n  public void postEvent(processing.event.Event pe) {\n    eventQueue.add(pe);\n\n    if (!looping) {\n      dequeueEvents();\n    }\n  }",
    "right" : "/**\n   * Add an event to the internal event queue, or process it immediately if\n   * the sketch is not currently looping.\n   */\n  public void postEvent(processing.event.Event pe) {\n    eventQueue.add(pe);\n\n    if (!looping) {\n      dequeueEvents();\n    }\n  }",
    "info" : "MethodDeclaration[83563-83821]:MethodDeclaration[83563-83821]"
  }, {
    "left" : "protected void dequeueEvents() {\n    while (eventQueue.available()) {\n      Event e = eventQueue.remove();\n\n      switch (e.getFlavor()) {\n      case Event.MOUSE:\n        handleMouseEvent((MouseEvent) e);\n        break;\n      case Event.KEY:\n        handleKeyEvent((KeyEvent) e);\n        break;\n      }\n    }\n  }",
    "right" : "protected void dequeueEvents() {\n    while (eventQueue.available()) {\n      Event e = eventQueue.remove();\n\n      switch (e.getFlavor()) {\n      case Event.MOUSE:\n        handleMouseEvent((MouseEvent) e);\n        break;\n      case Event.KEY:\n        handleKeyEvent((KeyEvent) e);\n        break;\n      }\n    }\n  }",
    "info" : "MethodDeclaration[83826-84138]:MethodDeclaration[83826-84138]"
  }, {
    "left" : "/**\n   * Actually take action based on a mouse event.\n   * Internally updates mouseX, mouseY, mousePressed, and mouseEvent.\n   * Then it calls the event type with no params,\n   * i.e. mousePressed() or mouseReleased() that the user may have\n   * overloaded to do something more useful.\n   */\n  protected void handleMouseEvent(MouseEvent event) {\n    // http://dev.processing.org/bugs/show_bug.cgi?id=170\n    // also prevents mouseExited() on the mac from hosing the mouse\n    // position, because x/y are bizarre values on the exit event.\n    // see also the id check below.. both of these go together.\n    // Not necessary to set mouseX/Y on RELEASE events because the\n    // actual position will have been set by a PRESS or DRAG event.\n    // However, PRESS events might come without a preceeding move,\n    // if the sketch window gains focus on that PRESS.\n    final int action = event.getAction();\n    if (action == MouseEvent.DRAG ||\n        action == MouseEvent.MOVE ||\n        action == MouseEvent.PRESS) {\n      pmouseX = emouseX;\n      pmouseY = emouseY;\n      mouseX = event.getX();\n      mouseY = event.getY();\n    }\n\n    // Get the (already processed) button code\n    mouseButton = event.getButton();\n\n    /*\n    // Compatibility for older code (these have AWT object params, not P5)\n    if (mouseEventMethods != null) {\n      // Probably also good to check this, in case anyone tries to call\n      // postEvent() with an artificial event they've created.\n      if (event.getNative() != null) {\n        mouseEventMethods.handle(new Object[] { event.getNative() });\n      }\n    }\n    */\n\n    // this used to only be called on mouseMoved and mouseDragged\n    // change it back if people run into trouble\n    if (firstMouse) {\n      pmouseX = mouseX;\n      pmouseY = mouseY;\n      dmouseX = mouseX;\n      dmouseY = mouseY;\n      firstMouse = false;\n    }\n\n    mouseEvent = event;\n\n    // Do this up here in case a registered method relies on the\n    // boolean for mousePressed.\n\n    switch (action) {\n    case MouseEvent.PRESS:\n      mousePressed = true;\n      break;\n    case MouseEvent.RELEASE:\n      mousePressed = false;\n      break;\n    }\n\n    handleMethods(\"mouseEvent\", new Object[] { event });\n\n    switch (action) {\n    case MouseEvent.PRESS:\n//      mousePressed = true;\n      mousePressed(event);\n      break;\n    case MouseEvent.RELEASE:\n//      mousePressed = false;\n      mouseReleased(event);\n      break;\n    case MouseEvent.CLICK:\n      mouseClicked(event);\n      break;\n    case MouseEvent.DRAG:\n      mouseDragged(event);\n      break;\n    case MouseEvent.MOVE:\n      mouseMoved(event);\n      break;\n    case MouseEvent.ENTER:\n      mouseEntered(event);\n      break;\n    case MouseEvent.EXIT:\n      mouseExited(event);\n      break;\n    case MouseEvent.WHEEL:\n      mouseWheel(event);\n      break;\n    }\n\n    if ((action == MouseEvent.DRAG) ||\n        (action == MouseEvent.MOVE)) {\n      emouseX = mouseX;\n      emouseY = mouseY;\n    }\n  }",
    "right" : "/**\n   * Actually take action based on a mouse event.\n   * Internally updates mouseX, mouseY, mousePressed, and mouseEvent.\n   * Then it calls the event type with no params,\n   * i.e. mousePressed() or mouseReleased() that the user may have\n   * overloaded to do something more useful.\n   */\n  protected void handleMouseEvent(MouseEvent event) {\n    // http://dev.processing.org/bugs/show_bug.cgi?id=170\n    // also prevents mouseExited() on the mac from hosing the mouse\n    // position, because x/y are bizarre values on the exit event.\n    // see also the id check below.. both of these go together.\n    // Not necessary to set mouseX/Y on RELEASE events because the\n    // actual position will have been set by a PRESS or DRAG event.\n    // However, PRESS events might come without a preceeding move,\n    // if the sketch window gains focus on that PRESS.\n    final int action = event.getAction();\n    if (action == MouseEvent.DRAG ||\n        action == MouseEvent.MOVE ||\n        action == MouseEvent.PRESS) {\n      pmouseX = emouseX;\n      pmouseY = emouseY;\n      mouseX = event.getX();\n      mouseY = event.getY();\n    }\n\n    // Get the (already processed) button code\n    mouseButton = event.getButton();\n\n    /*\n    // Compatibility for older code (these have AWT object params, not P5)\n    if (mouseEventMethods != null) {\n      // Probably also good to check this, in case anyone tries to call\n      // postEvent() with an artificial event they've created.\n      if (event.getNative() != null) {\n        mouseEventMethods.handle(new Object[] { event.getNative() });\n      }\n    }\n    */\n\n    // this used to only be called on mouseMoved and mouseDragged\n    // change it back if people run into trouble\n    if (firstMouse) {\n      pmouseX = mouseX;\n      pmouseY = mouseY;\n      dmouseX = mouseX;\n      dmouseY = mouseY;\n      firstMouse = false;\n    }\n\n    mouseEvent = event;\n\n    // Do this up here in case a registered method relies on the\n    // boolean for mousePressed.\n\n    switch (action) {\n    case MouseEvent.PRESS:\n      mousePressed = true;\n      break;\n    case MouseEvent.RELEASE:\n      mousePressed = false;\n      break;\n    }\n\n    handleMethods(\"mouseEvent\", new Object[] { event });\n\n    switch (action) {\n    case MouseEvent.PRESS:\n//      mousePressed = true;\n      mousePressed(event);\n      break;\n    case MouseEvent.RELEASE:\n//      mousePressed = false;\n      mouseReleased(event);\n      break;\n    case MouseEvent.CLICK:\n      mouseClicked(event);\n      break;\n    case MouseEvent.DRAG:\n      mouseDragged(event);\n      break;\n    case MouseEvent.MOVE:\n      mouseMoved(event);\n      break;\n    case MouseEvent.ENTER:\n      mouseEntered(event);\n      break;\n    case MouseEvent.EXIT:\n      mouseExited(event);\n      break;\n    case MouseEvent.WHEEL:\n      mouseWheel(event);\n      break;\n    }\n\n    if ((action == MouseEvent.DRAG) ||\n        (action == MouseEvent.MOVE)) {\n      emouseX = mouseX;\n      emouseY = mouseY;\n    }\n  }",
    "info" : "MethodDeclaration[84210-87177]:MethodDeclaration[84210-87177]"
  }, {
    "left" : "/**\n   * ( begin auto-generated from mousePressed.xml )\n   *\n   * The <b>mousePressed()</b> function is called once after every time a\n   * mouse button is pressed. The <b>mouseButton</b> variable (see the\n   * related reference entry) can be used to determine which button has been pressed.\n   *\n   * ( end auto-generated )\n   * <h3>Advanced</h3>\n   *\n   * If you must, use\n   * int button = mouseEvent.getButton();\n   * to figure out which button was clicked. It will be one of:\n   * MouseEvent.BUTTON1, MouseEvent.BUTTON2, MouseEvent.BUTTON3\n   * Note, however, that this is completely inconsistent across\n   * platforms.\n   * @webref input:mouse\n   * @see PApplet#mouseX\n   * @see PApplet#mouseY\n   * @see PApplet#pmouseX\n   * @see PApplet#pmouseY\n   * @see PApplet#mousePressed\n   * @see PApplet#mouseReleased()\n   * @see PApplet#mouseClicked()\n   * @see PApplet#mouseMoved()\n   * @see PApplet#mouseDragged()\n   * @see PApplet#mouseButton\n   * @see PApplet#mouseWheel(MouseEvent)\n   */\n  public void mousePressed() { }",
    "right" : "/**\n   * ( begin auto-generated from mousePressed.xml )\n   *\n   * The <b>mousePressed()</b> function is called once after every time a\n   * mouse button is pressed. The <b>mouseButton</b> variable (see the\n   * related reference entry) can be used to determine which button has been pressed.\n   *\n   * ( end auto-generated )\n   * <h3>Advanced</h3>\n   *\n   * If you must, use\n   * int button = mouseEvent.getButton();\n   * to figure out which button was clicked. It will be one of:\n   * MouseEvent.BUTTON1, MouseEvent.BUTTON2, MouseEvent.BUTTON3\n   * Note, however, that this is completely inconsistent across\n   * platforms.\n   * @webref input:mouse\n   * @see PApplet#mouseX\n   * @see PApplet#mouseY\n   * @see PApplet#pmouseX\n   * @see PApplet#pmouseY\n   * @see PApplet#mousePressed\n   * @see PApplet#mouseReleased()\n   * @see PApplet#mouseClicked()\n   * @see PApplet#mouseMoved()\n   * @see PApplet#mouseDragged()\n   * @see PApplet#mouseButton\n   * @see PApplet#mouseWheel(MouseEvent)\n   */\n  public void mousePressed() { }",
    "info" : "MethodDeclaration[87182-88205]:MethodDeclaration[87182-88205]"
  }, {
    "left" : "public void mousePressed(MouseEvent event) {\n    mousePressed();\n  }",
    "right" : "public void mousePressed(MouseEvent event) {\n    mousePressed();\n  }",
    "info" : "MethodDeclaration[88210-88278]:MethodDeclaration[88210-88278]"
  }, {
    "left" : "public ) : void",
    "right" : "public ) : void",
    "info" : "MethodDeclaration[88283-88871]:MethodDeclaration[88283-88871]"
  }, {
    "left" : "public void mouseReleased(MouseEvent event) {\n    mouseReleased();\n  }",
    "right" : "public void mouseReleased(MouseEvent event) {\n    mouseReleased();\n  }",
    "info" : "MethodDeclaration[88876-88946]:MethodDeclaration[88876-88946]"
  }, {
    "left" : "public ) : void",
    "right" : "public ) : void",
    "info" : "MethodDeclaration[88951-89765]:MethodDeclaration[88951-89765]"
  }, {
    "left" : "public event MouseEvent) : void",
    "right" : "public event MouseEvent) : void",
    "info" : "MethodDeclaration[89770-89838]:MethodDeclaration[89770-89838]"
  }, {
    "left" : "public ) : void",
    "right" : "public ) : void",
    "info" : "MethodDeclaration[89843-90453]:MethodDeclaration[89843-90453]"
  }, {
    "left" : "public void mouseDragged(MouseEvent event) {\n    mouseDragged();\n  }",
    "right" : "public void mouseDragged(MouseEvent event) {\n    mouseDragged();\n  }",
    "info" : "MethodDeclaration[90458-90526]:MethodDeclaration[90458-90526]"
  }, {
    "left" : "/**\n   * ( begin auto-generated from mouseMoved.xml )\n   *\n   * The <b>mouseMoved()</b> function is called every time the mouse moves\n   * and a mouse button is not pressed.\n   *\n   * ( end auto-generated )\n   * @webref input:mouse\n   * @see PApplet#mouseX\n   * @see PApplet#mouseY\n   * @see PApplet#pmouseX\n   * @see PApplet#pmouseY\n   * @see PApplet#mousePressed\n   * @see PApplet#mousePressed()\n   * @see PApplet#mouseReleased()\n   * @see PApplet#mouseClicked()\n   * @see PApplet#mouseDragged()\n   * @see PApplet#mouseButton\n   * @see PApplet#mouseWheel(MouseEvent)\n   */\n  public void mouseMoved() { }",
    "right" : "/**\n   * ( begin auto-generated from mouseMoved.xml )\n   *\n   * The <b>mouseMoved()</b> function is called every time the mouse moves\n   * and a mouse button is not pressed.\n   *\n   * ( end auto-generated )\n   * @webref input:mouse\n   * @see PApplet#mouseX\n   * @see PApplet#mouseY\n   * @see PApplet#pmouseX\n   * @see PApplet#pmouseY\n   * @see PApplet#mousePressed\n   * @see PApplet#mousePressed()\n   * @see PApplet#mouseReleased()\n   * @see PApplet#mouseClicked()\n   * @see PApplet#mouseDragged()\n   * @see PApplet#mouseButton\n   * @see PApplet#mouseWheel(MouseEvent)\n   */\n  public void mouseMoved() { }",
    "info" : "MethodDeclaration[90531-91136]:MethodDeclaration[90531-91136]"
  }, {
    "left" : "public event MouseEvent) : void",
    "right" : "public event MouseEvent) : void",
    "info" : "MethodDeclaration[91141-91205]:MethodDeclaration[91141-91205]"
  }, {
    "left" : "public ) : void",
    "right" : "public ) : void",
    "info" : "MethodDeclaration[91210-91240]:MethodDeclaration[91210-91240]"
  }, {
    "left" : "public event MouseEvent) : void",
    "right" : "public event MouseEvent) : void",
    "info" : "MethodDeclaration[91245-91313]:MethodDeclaration[91245-91313]"
  }, {
    "left" : "public void mouseExited() { }",
    "right" : "public void mouseExited() { }",
    "info" : "MethodDeclaration[91318-91347]:MethodDeclaration[91318-91347]"
  }, {
    "left" : "public event MouseEvent) : void",
    "right" : "public event MouseEvent) : void",
    "info" : "MethodDeclaration[91352-91418]:MethodDeclaration[91352-91418]"
  }, {
    "left" : "/**\n   * @nowebref\n   */\n  public void mouseWheel() { }",
    "right" : "/**\n   * @nowebref\n   */\n  public void mouseWheel() { }",
    "info" : "MethodDeclaration[91422-91477]:MethodDeclaration[91422-91477]"
  }, {
    "left" : "/**\n   * The event.getAmount() method returns negative values if the mouse wheel\n   * if rotated up or away from the user and positive in the other direction.\n   * On OS X with \"natural\" scrolling enabled, the values are opposite.\n   *\n   * @webref input:mouse\n   * @param event the MouseEvent\n   * @see PApplet#mouseX\n   * @see PApplet#mouseY\n   * @see PApplet#pmouseX\n   * @see PApplet#pmouseY\n   * @see PApplet#mousePressed\n   * @see PApplet#mousePressed()\n   * @see PApplet#mouseReleased()\n   * @see PApplet#mouseClicked()\n   * @see PApplet#mouseMoved()\n   * @see PApplet#mouseDragged()\n   * @see PApplet#mouseButton\n   */\n  public void mouseWheel(MouseEvent event) {\n    mouseWheel();\n  }",
    "right" : "/**\n   * The event.getAmount() method returns negative values if the mouse wheel\n   * if rotated up or away from the user and positive in the other direction.\n   * On OS X with \"natural\" scrolling enabled, the values are opposite.\n   *\n   * @webref input:mouse\n   * @param event the MouseEvent\n   * @see PApplet#mouseX\n   * @see PApplet#mouseY\n   * @see PApplet#pmouseX\n   * @see PApplet#pmouseY\n   * @see PApplet#mousePressed\n   * @see PApplet#mousePressed()\n   * @see PApplet#mouseReleased()\n   * @see PApplet#mouseClicked()\n   * @see PApplet#mouseMoved()\n   * @see PApplet#mouseDragged()\n   * @see PApplet#mouseButton\n   */\n  public void mouseWheel(MouseEvent event) {\n    mouseWheel();\n  }",
    "info" : "MethodDeclaration[91481-92174]:MethodDeclaration[91481-92174]"
  }, {
    "left" : "protected void handleKeyEvent(KeyEvent event) {\n    keyEvent = event;\n    key = event.getKey();\n    keyCode = event.getKeyCode();\n\n    switch (event.getAction()) {\n    case KeyEvent.PRESS:\n      keyPressed = true;\n      keyPressed(keyEvent);\n      break;\n    case KeyEvent.RELEASE:\n      keyPressed = false;\n      keyReleased(keyEvent);\n      break;\n    case KeyEvent.TYPE:\n      keyTyped(keyEvent);\n      break;\n    }\n\n    /*\n    if (keyEventMethods != null) {\n      keyEventMethods.handle(new Object[] { event.getNative() });\n    }\n    */\n\n    handleMethods(\"keyEvent\", new Object[] { event });\n\n    // if someone else wants to intercept the key, they should\n    // set key to zero (or something besides the ESC).\n    if (event.getAction() == KeyEvent.PRESS) {\n      //if (key == java.awt.event.KeyEvent.VK_ESCAPE) {\n      if (key == ESC) {\n        exit();\n      }\n      // When running tethered to the Processing application, respond to\n      // Ctrl-W (or Cmd-W) events by closing the sketch. Not enabled when\n      // running independently, because this sketch may be one component\n      // embedded inside an application that has its own close behavior.\n      if (external &&\n          event.getKeyCode() == 'W' &&\n          ((event.isMetaDown() && platform == MACOSX) ||\n           (event.isControlDown() && platform != MACOSX))) {\n        // Can't use this native stuff b/c the native event might be NEWT\n//      if (external && event.getNative() instanceof java.awt.event.KeyEvent &&\n//          ((java.awt.event.KeyEvent) event.getNative()).getModifiers() ==\n//            Toolkit.getDefaultToolkit().getMenuShortcutKeyMask() &&\n//          event.getKeyCode() == 'W') {\n        exit();\n      }\n    }\n  }",
    "right" : "protected void handleKeyEvent(KeyEvent event) {\n    keyEvent = event;\n    key = event.getKey();\n    keyCode = event.getKeyCode();\n\n    switch (event.getAction()) {\n    case KeyEvent.PRESS:\n      keyPressed = true;\n      keyPressed(keyEvent);\n      break;\n    case KeyEvent.RELEASE:\n      keyPressed = false;\n      keyReleased(keyEvent);\n      break;\n    case KeyEvent.TYPE:\n      keyTyped(keyEvent);\n      break;\n    }\n\n    /*\n    if (keyEventMethods != null) {\n      keyEventMethods.handle(new Object[] { event.getNative() });\n    }\n    */\n\n    handleMethods(\"keyEvent\", new Object[] { event });\n\n    // if someone else wants to intercept the key, they should\n    // set key to zero (or something besides the ESC).\n    if (event.getAction() == KeyEvent.PRESS) {\n      //if (key == java.awt.event.KeyEvent.VK_ESCAPE) {\n      if (key == ESC) {\n        exit();\n      }\n      // When running tethered to the Processing application, respond to\n      // Ctrl-W (or Cmd-W) events by closing the sketch. Not enabled when\n      // running independently, because this sketch may be one component\n      // embedded inside an application that has its own close behavior.\n      if (external &&\n          event.getKeyCode() == 'W' &&\n          ((event.isMetaDown() && platform == MACOSX) ||\n           (event.isControlDown() && platform != MACOSX))) {\n        // Can't use this native stuff b/c the native event might be NEWT\n//      if (external && event.getNative() instanceof java.awt.event.KeyEvent &&\n//          ((java.awt.event.KeyEvent) event.getNative()).getModifiers() ==\n//            Toolkit.getDefaultToolkit().getMenuShortcutKeyMask() &&\n//          event.getKeyCode() == 'W') {\n        exit();\n      }\n    }\n  }",
    "info" : "MethodDeclaration[92247-93960]:MethodDeclaration[92247-93960]"
  }, {
    "left" : "public ) : void",
    "right" : "public ) : void",
    "info" : "MethodDeclaration[93965-97328]:MethodDeclaration[93965-97328]"
  }, {
    "left" : "public void keyPressed(KeyEvent event) {\n    keyPressed();\n  }",
    "right" : "public void keyPressed(KeyEvent event) {\n    keyPressed();\n  }",
    "info" : "MethodDeclaration[97333-97395]:MethodDeclaration[97333-97395]"
  }, {
    "left" : "/**\n   * ( begin auto-generated from keyReleased.xml )\n   *\n   * The <b>keyReleased()</b> function is called once every time a key is\n   * released. The key that was released will be stored in the <b>key</b>\n   * variable. See <b>key</b> and <b>keyReleased</b> for more information.\n   *\n   * ( end auto-generated )\n   * @webref input:keyboard\n   * @see PApplet#key\n   * @see PApplet#keyCode\n   * @see PApplet#keyPressed\n   * @see PApplet#keyPressed()\n   */\n  public void keyReleased() { }",
    "right" : "/**\n   * ( begin auto-generated from keyReleased.xml )\n   *\n   * The <b>keyReleased()</b> function is called once every time a key is\n   * released. The key that was released will be stored in the <b>key</b>\n   * variable. See <b>key</b> and <b>keyReleased</b> for more information.\n   *\n   * ( end auto-generated )\n   * @webref input:keyboard\n   * @see PApplet#key\n   * @see PApplet#keyCode\n   * @see PApplet#keyPressed\n   * @see PApplet#keyPressed()\n   */\n  public void keyReleased() { }",
    "info" : "MethodDeclaration[97400-97889]:MethodDeclaration[97400-97889]"
  }, {
    "left" : "public void keyReleased(KeyEvent event) {\n    keyReleased();\n  }",
    "right" : "public void keyReleased(KeyEvent event) {\n    keyReleased();\n  }",
    "info" : "MethodDeclaration[97894-97958]:MethodDeclaration[97894-97958]"
  }, {
    "left" : "/**\n   * ( begin auto-generated from keyTyped.xml )\n   *\n   * The <b>keyTyped()</b> function is called once every time a key is\n   * pressed, but action keys such as Ctrl, Shift, and Alt are ignored.\n   * Because of how operating systems handle key repeats, holding down a key\n   * will cause multiple calls to <b>keyTyped()</b>, the rate is set by the\n   * operating system and how each computer is configured.\n   *\n   * ( end auto-generated )\n   * @webref input:keyboard\n   * @see PApplet#keyPressed\n   * @see PApplet#key\n   * @see PApplet#keyCode\n   * @see PApplet#keyReleased()\n   */\n  public void keyTyped() { }",
    "right" : "/**\n   * ( begin auto-generated from keyTyped.xml )\n   *\n   * The <b>keyTyped()</b> function is called once every time a key is\n   * pressed, but action keys such as Ctrl, Shift, and Alt are ignored.\n   * Because of how operating systems handle key repeats, holding down a key\n   * will cause multiple calls to <b>keyTyped()</b>, the rate is set by the\n   * operating system and how each computer is configured.\n   *\n   * ( end auto-generated )\n   * @webref input:keyboard\n   * @see PApplet#keyPressed\n   * @see PApplet#key\n   * @see PApplet#keyCode\n   * @see PApplet#keyReleased()\n   */\n  public void keyTyped() { }",
    "info" : "MethodDeclaration[97963-98579]:MethodDeclaration[97963-98579]"
  }, {
    "left" : "public event KeyEvent) : void",
    "right" : "public event KeyEvent) : void",
    "info" : "MethodDeclaration[98584-98642]:MethodDeclaration[98584-98642]"
  }, {
    "left" : "public void focusGained() { }",
    "right" : "public void focusGained() { }",
    "info" : "MethodDeclaration[98853-98882]:MethodDeclaration[98853-98882]"
  }, {
    "left" : "public void focusLost() { }",
    "right" : "public void focusLost() { }",
    "info" : "MethodDeclaration[98887-98914]:MethodDeclaration[98887-98914]"
  }, {
    "left" : "public ) : int",
    "right" : "public ) : int",
    "info" : "MethodDeclaration[99010-99690]:MethodDeclaration[99010-99690]"
  }, {
    "left" : "public ) : int",
    "right" : "public ) : int",
    "info" : "MethodDeclaration[99694-100210]:MethodDeclaration[99694-100210]"
  }, {
    "left" : "public ) : int",
    "right" : "public ) : int",
    "info" : "MethodDeclaration[100214-100740]:MethodDeclaration[100214-100740]"
  }, {
    "left" : "public ) : int",
    "right" : "public ) : int",
    "info" : "MethodDeclaration[100744-101262]:MethodDeclaration[100744-101262]"
  }, {
    "left" : "/**\n   * ( begin auto-generated from day.xml )\n   *\n   * Processing communicates with the clock on your computer. The\n   * <b>day()</b> function returns the current day as a value from 1 - 31.\n   *\n   * ( end auto-generated )\n   * <h3>Advanced</h3>\n   * Get the current day of the month (1 through 31).\n   * <p>\n   * If you're looking for the day of the week (M-F or whatever)\n   * or day of the year (1..365) then use java's Calendar.get()\n   *\n   * @webref input:time_date\n   * @see PApplet#millis()\n   * @see PApplet#second()\n   * @see PApplet#minute()\n   * @see PApplet#hour()\n   * @see PApplet#month()\n   * @see PApplet#year()\n   */\n  static public int day() {\n    return Calendar.getInstance().get(Calendar.DAY_OF_MONTH);\n  }",
    "right" : "/**\n   * ( begin auto-generated from day.xml )\n   *\n   * Processing communicates with the clock on your computer. The\n   * <b>day()</b> function returns the current day as a value from 1 - 31.\n   *\n   * ( end auto-generated )\n   * <h3>Advanced</h3>\n   * Get the current day of the month (1 through 31).\n   * <p>\n   * If you're looking for the day of the week (M-F or whatever)\n   * or day of the year (1..365) then use java's Calendar.get()\n   *\n   * @webref input:time_date\n   * @see PApplet#millis()\n   * @see PApplet#second()\n   * @see PApplet#minute()\n   * @see PApplet#hour()\n   * @see PApplet#month()\n   * @see PApplet#year()\n   */\n  static public int day() {\n    return Calendar.getInstance().get(Calendar.DAY_OF_MONTH);\n  }",
    "info" : "MethodDeclaration[101266-101997]:MethodDeclaration[101266-101997]"
  }, {
    "left" : "public ) : int",
    "right" : "public ) : int",
    "info" : "MethodDeclaration[102001-102581]:MethodDeclaration[102001-102581]"
  }, {
    "left" : "/**\n   * ( begin auto-generated from year.xml )\n   *\n   * Processing communicates with the clock on your computer. The\n   * <b>year()</b> function returns the current year as an integer (2003,\n   * 2004, 2005, etc).\n   *\n   * ( end auto-generated )\n   * The <b>year()</b> function returns the current year as an integer (2003, 2004, 2005, etc).\n   *\n   * @webref input:time_date\n   * @see PApplet#millis()\n   * @see PApplet#second()\n   * @see PApplet#minute()\n   * @see PApplet#hour()\n   * @see PApplet#day()\n   * @see PApplet#month()\n   */\n  static public int year() {\n    return Calendar.getInstance().get(Calendar.YEAR);\n  }",
    "right" : "/**\n   * ( begin auto-generated from year.xml )\n   *\n   * Processing communicates with the clock on your computer. The\n   * <b>year()</b> function returns the current year as an integer (2003,\n   * 2004, 2005, etc).\n   *\n   * ( end auto-generated )\n   * The <b>year()</b> function returns the current year as an integer (2003, 2004, 2005, etc).\n   *\n   * @webref input:time_date\n   * @see PApplet#millis()\n   * @see PApplet#second()\n   * @see PApplet#minute()\n   * @see PApplet#hour()\n   * @see PApplet#day()\n   * @see PApplet#month()\n   */\n  static public int year() {\n    return Calendar.getInstance().get(Calendar.YEAR);\n  }",
    "info" : "MethodDeclaration[102585-103212]:MethodDeclaration[102585-103212]"
  }, {
    "left" : "public napTime int) : void",
    "right" : "public napTime int) : void",
    "info" : "MethodDeclaration[103321-104248]:MethodDeclaration[103321-104248]"
  }, {
    "left" : "/**\n   * ( begin auto-generated from frameRate.xml )\n   *\n   * Specifies the number of frames to be displayed every second. If the\n   * processor is not fast enough to maintain the specified rate, it will not\n   * be achieved. For example, the function call <b>frameRate(30)</b> will\n   * attempt to refresh 30 times a second. It is recommended to set the frame\n   * rate within <b>setup()</b>. The default rate is 60 frames per second.\n   *\n   * ( end auto-generated )\n   * @webref environment\n   * @param fps number of desired frames per second\n   * @see PApplet#frameRate\n   * @see PApplet#frameCount\n   * @see PApplet#setup()\n   * @see PApplet#draw()\n   * @see PApplet#loop()\n   * @see PApplet#noLoop()\n   * @see PApplet#redraw()\n   */\n  public void frameRate(float fps) {\n    surface.setFrameRate(fps);\n  }",
    "right" : "/**\n   * ( begin auto-generated from frameRate.xml )\n   *\n   * Specifies the number of frames to be displayed every second. If the\n   * processor is not fast enough to maintain the specified rate, it will not\n   * be achieved. For example, the function call <b>frameRate(30)</b> will\n   * attempt to refresh 30 times a second. It is recommended to set the frame\n   * rate within <b>setup()</b>. The default rate is 60 frames per second.\n   *\n   * ( end auto-generated )\n   * @webref environment\n   * @param fps number of desired frames per second\n   * @see PApplet#frameRate\n   * @see PApplet#frameCount\n   * @see PApplet#setup()\n   * @see PApplet#draw()\n   * @see PApplet#loop()\n   * @see PApplet#noLoop()\n   * @see PApplet#redraw()\n   */\n  public void frameRate(float fps) {\n    surface.setFrameRate(fps);\n  }",
    "info" : "MethodDeclaration[104253-105064]:MethodDeclaration[104253-105064]"
  }, {
    "left" : "public url String) : void",
    "right" : "public url String) : void",
    "info" : "MethodDeclaration[105136-106138]:MethodDeclaration[105136-106138]"
  }, {
    "left" : "",
    "right" : "",
    "info" : "FieldDeclaration[106143-106170]:FieldDeclaration[106143-106170]"
  }, {
    "left" : "public args String...) : Process",
    "right" : "public args String...) : Process",
    "info" : "MethodDeclaration[106175-109953]:MethodDeclaration[106175-109953]"
  }, {
    "left" : "public args String...) : Process",
    "right" : "public args String...) : Process",
    "info" : "MethodDeclaration[109958-110194]:MethodDeclaration[109958-110194]"
  }, {
    "left" : "public what String) : void",
    "right" : "public what String) : void",
    "info" : "MethodDeclaration[110458-110681]:MethodDeclaration[110458-110681]"
  }, {
    "left" : "/**\n   * Same as above but with an exception. Also needs work.\n   */\n  public void die(String what, Exception e) {\n    if (e != null) e.printStackTrace();\n    die(what);\n  }",
    "right" : "/**\n   * Same as above but with an exception. Also needs work.\n   */\n  public void die(String what, Exception e) {\n    if (e != null) e.printStackTrace();\n    die(what);\n  }",
    "info" : "MethodDeclaration[110686-110859]:MethodDeclaration[110686-110859]"
  }, {
    "left" : "/**\n   * ( begin auto-generated from exit.xml )\n   *\n   * Quits/stops/exits the program. Programs without a <b>draw()</b> function\n   * exit automatically after the last line has run, but programs with\n   * <b>draw()</b> run continuously until the program is manually stopped or\n   * <b>exit()</b> is run.<br />\n   * <br />\n   * Rather than terminating immediately, <b>exit()</b> will cause the sketch\n   * to exit after <b>draw()</b> has completed (or after <b>setup()</b>\n   * completes if called during the <b>setup()</b> function).<br />\n   * <br />\n   * For Java programmers, this is <em>not</em> the same as System.exit().\n   * Further, System.exit() should not be used because closing out an\n   * application while <b>draw()</b> is running may cause a crash\n   * (particularly with P3D).\n   *\n   * ( end auto-generated )\n   * @webref structure\n   */\n  public void exit() {\n    if (surface.isStopped()) {\n      // exit immediately, dispose() has already been called,\n      // meaning that the main thread has long since exited\n      exitActual();\n\n    } else if (looping) {\n      // dispose() will be called as the thread exits\n      finished = true;\n      // tell the code to call exitActual() to do a System.exit()\n      // once the next draw() has completed\n      exitCalled = true;\n\n    } else if (!looping) {\n      // if not looping, shut down things explicitly,\n      // because the main thread will be sleeping\n      dispose();\n\n      // now get out\n      exitActual();\n    }\n  }",
    "right" : "/**\n   * ( begin auto-generated from exit.xml )\n   *\n   * Quits/stops/exits the program. Programs without a <b>draw()</b> function\n   * exit automatically after the last line has run, but programs with\n   * <b>draw()</b> run continuously until the program is manually stopped or\n   * <b>exit()</b> is run.<br />\n   * <br />\n   * Rather than terminating immediately, <b>exit()</b> will cause the sketch\n   * to exit after <b>draw()</b> has completed (or after <b>setup()</b>\n   * completes if called during the <b>setup()</b> function).<br />\n   * <br />\n   * For Java programmers, this is <em>not</em> the same as System.exit().\n   * Further, System.exit() should not be used because closing out an\n   * application while <b>draw()</b> is running may cause a crash\n   * (particularly with P3D).\n   *\n   * ( end auto-generated )\n   * @webref structure\n   */\n  public void exit() {\n    if (surface.isStopped()) {\n      // exit immediately, dispose() has already been called,\n      // meaning that the main thread has long since exited\n      exitActual();\n\n    } else if (looping) {\n      // dispose() will be called as the thread exits\n      finished = true;\n      // tell the code to call exitActual() to do a System.exit()\n      // once the next draw() has completed\n      exitCalled = true;\n\n    } else if (!looping) {\n      // if not looping, shut down things explicitly,\n      // because the main thread will be sleeping\n      dispose();\n\n      // now get out\n      exitActual();\n    }\n  }",
    "info" : "MethodDeclaration[110864-112356]:MethodDeclaration[110864-112356]"
  }, {
    "left" : "public boolean exitCalled() {\n    return exitCalled;\n  }",
    "right" : "public boolean exitCalled() {\n    return exitCalled;\n  }",
    "info" : "MethodDeclaration[112361-112417]:MethodDeclaration[112361-112417]"
  }, {
    "left" : "public ) : void",
    "right" : "public ) : void",
    "info" : "MethodDeclaration[112422-112800]:MethodDeclaration[112422-112800]"
  }, {
    "left" : "public ) : void",
    "right" : "public ) : void",
    "info" : "MethodDeclaration[112805-113470]:MethodDeclaration[112805-113470]"
  }, {
    "left" : "/**\n   * Call a method in the current class based on its name.\n   * <p/>\n   * Note that the function being called must be public. Inside the PDE,\n   * 'public' is automatically added, but when used without the preprocessor,\n   * (like from Eclipse) you'll have to do it yourself.\n   */\n  public void method(String name) {\n    try {\n      Method method = getClass().getMethod(name, new Class[] {});\n      method.invoke(this, new Object[] { });\n\n    } catch (IllegalArgumentException e) {\n      e.printStackTrace();\n    } catch (IllegalAccessException e) {\n      e.printStackTrace();\n    } catch (InvocationTargetException e) {\n      e.getTargetException().printStackTrace();\n    } catch (NoSuchMethodException nsme) {\n      System.err.println(\"There is no public \" + name + \"() method \" +\n                         \"in the class \" + getClass().getName());\n    } catch (Exception e) {\n      e.printStackTrace();\n    }\n  }",
    "right" : "/**\n   * Call a method in the current class based on its name.\n   * <p/>\n   * Note that the function being called must be public. Inside the PDE,\n   * 'public' is automatically added, but when used without the preprocessor,\n   * (like from Eclipse) you'll have to do it yourself.\n   */\n  public void method(String name) {\n    try {\n      Method method = getClass().getMethod(name, new Class[] {});\n      method.invoke(this, new Object[] { });\n\n    } catch (IllegalArgumentException e) {\n      e.printStackTrace();\n    } catch (IllegalAccessException e) {\n      e.printStackTrace();\n    } catch (InvocationTargetException e) {\n      e.getTargetException().printStackTrace();\n    } catch (NoSuchMethodException nsme) {\n      System.err.println(\"There is no public \" + name + \"() method \" +\n                         \"in the class \" + getClass().getName());\n    } catch (Exception e) {\n      e.printStackTrace();\n    }\n  }",
    "info" : "MethodDeclaration[113543-114461]:MethodDeclaration[113543-114461]"
  }, {
    "left" : "public name String) : void",
    "right" : "public name String) : void",
    "info" : "MethodDeclaration[114466-115282]:MethodDeclaration[114466-115282]"
  }, {
    "left" : "public ) : void",
    "right" : "public ) : void",
    "info" : "MethodDeclaration[115187-115252]:MethodDeclaration[115187-115252]"
  }, {
    "left" : "/**\n   * ( begin auto-generated from save.xml )\n   *\n   * Saves an image from the display window. Images are saved in TIFF, TARGA,\n   * JPEG, and PNG format depending on the extension within the\n   * <b>filename</b> parameter. For example, \"image.tif\" will have a TIFF\n   * image and \"image.png\" will save a PNG image. If no extension is included\n   * in the filename, the image will save in TIFF format and <b>.tif</b> will\n   * be added to the name. These files are saved to the sketch's folder,\n   * which may be opened by selecting \"Show sketch folder\" from the \"Sketch\"\n   * menu. It is not possible to use <b>save()</b> while running the program\n   * in a web browser.\n   * <br/> images saved from the main drawing window will be opaque. To save\n   * images without a background, use <b>createGraphics()</b>.\n   *\n   * ( end auto-generated )\n   * @webref output:image\n   * @param filename any sequence of letters and numbers\n   * @see PApplet#saveFrame()\n   * @see PApplet#createGraphics(int, int, String)\n   */\n  public void save(String filename) {\n    g.save(savePath(filename));\n  }",
    "right" : "/**\n   * ( begin auto-generated from save.xml )\n   *\n   * Saves an image from the display window. Images are saved in TIFF, TARGA,\n   * JPEG, and PNG format depending on the extension within the\n   * <b>filename</b> parameter. For example, \"image.tif\" will have a TIFF\n   * image and \"image.png\" will save a PNG image. If no extension is included\n   * in the filename, the image will save in TIFF format and <b>.tif</b> will\n   * be added to the name. These files are saved to the sketch's folder,\n   * which may be opened by selecting \"Show sketch folder\" from the \"Sketch\"\n   * menu. It is not possible to use <b>save()</b> while running the program\n   * in a web browser.\n   * <br/> images saved from the main drawing window will be opaque. To save\n   * images without a background, use <b>createGraphics()</b>.\n   *\n   * ( end auto-generated )\n   * @webref output:image\n   * @param filename any sequence of letters and numbers\n   * @see PApplet#saveFrame()\n   * @see PApplet#createGraphics(int, int, String)\n   */\n  public void save(String filename) {\n    g.save(savePath(filename));\n  }",
    "info" : "MethodDeclaration[115376-116467]:MethodDeclaration[115376-116467]"
  }, {
    "left" : "/**\n   */\n  public void saveFrame() {\n    try {\n      g.save(savePath(\"screen-\" + nf(frameCount, 4) + \".tif\"));\n    } catch (SecurityException se) {\n      System.err.println(\"Can't use saveFrame() when running in a browser, \" +\n                         \"unless using a signed applet.\");\n    }\n  }",
    "right" : "/**\n   */\n  public void saveFrame() {\n    try {\n      g.save(savePath(\"screen-\" + nf(frameCount, 4) + \".tif\"));\n    } catch (SecurityException se) {\n      System.err.println(\"Can't use saveFrame() when running in a browser, \" +\n                         \"unless using a signed applet.\");\n    }\n  }",
    "info" : "MethodDeclaration[116472-116768]:MethodDeclaration[116472-116768]"
  }, {
    "left" : "/**\n   * ( begin auto-generated from saveFrame.xml )\n   *\n   * Saves a numbered sequence of images, one image each time the function is\n   * run. To save an image that is identical to the display window, run the\n   * function at the end of <b>draw()</b> or within mouse and key events such\n   * as <b>mousePressed()</b> and <b>keyPressed()</b>. If <b>saveFrame()</b>\n   * is called without parameters, it will save the files as screen-0000.tif,\n   * screen-0001.tif, etc. It is possible to specify the name of the sequence\n   * with the <b>filename</b> parameter and make the choice of saving TIFF,\n   * TARGA, PNG, or JPEG files with the <b>ext</b> parameter. These image\n   * sequences can be loaded into programs such as Apple's QuickTime software\n   * and made into movies. These files are saved to the sketch's folder,\n   * which may be opened by selecting \"Show sketch folder\" from the \"Sketch\"\n   * menu.<br />\n   * <br />\n   * It is not possible to use saveXxxxx() functions inside a web browser\n   * unless the sketch is <a\n   * href=\"http://wiki.processing.org/w/Sign_an_Applet\">signed applet</A>. To\n   * save a file back to a server, see the <a\n   * href=\"http://wiki.processing.org/w/Saving_files_to_a_web-server\">save to\n   * web</A> code snippet on the Processing Wiki.<br/>\n   * <br/ >\n   * All images saved from the main drawing window will be opaque. To save\n   * images without a background, use <b>createGraphics()</b>.\n   *\n   * ( end auto-generated )\n   * @webref output:image\n   * @see PApplet#save(String)\n   * @see PApplet#createGraphics(int, int, String, String)\n   * @see PApplet#frameCount\n   * @param filename any sequence of letters or numbers that ends with either \".tif\", \".tga\", \".jpg\", or \".png\"\n   */\n  public void saveFrame(String filename) {\n    try {\n      g.save(savePath(insertFrame(filename)));\n    } catch (SecurityException se) {\n      System.err.println(\"Can't use saveFrame() when running in a browser, \" +\n                         \"unless using a signed applet.\");\n    }\n  }",
    "right" : "/**\n   * ( begin auto-generated from saveFrame.xml )\n   *\n   * Saves a numbered sequence of images, one image each time the function is\n   * run. To save an image that is identical to the display window, run the\n   * function at the end of <b>draw()</b> or within mouse and key events such\n   * as <b>mousePressed()</b> and <b>keyPressed()</b>. If <b>saveFrame()</b>\n   * is called without parameters, it will save the files as screen-0000.tif,\n   * screen-0001.tif, etc. It is possible to specify the name of the sequence\n   * with the <b>filename</b> parameter and make the choice of saving TIFF,\n   * TARGA, PNG, or JPEG files with the <b>ext</b> parameter. These image\n   * sequences can be loaded into programs such as Apple's QuickTime software\n   * and made into movies. These files are saved to the sketch's folder,\n   * which may be opened by selecting \"Show sketch folder\" from the \"Sketch\"\n   * menu.<br />\n   * <br />\n   * It is not possible to use saveXxxxx() functions inside a web browser\n   * unless the sketch is <a\n   * href=\"http://wiki.processing.org/w/Sign_an_Applet\">signed applet</A>. To\n   * save a file back to a server, see the <a\n   * href=\"http://wiki.processing.org/w/Saving_files_to_a_web-server\">save to\n   * web</A> code snippet on the Processing Wiki.<br/>\n   * <br/ >\n   * All images saved from the main drawing window will be opaque. To save\n   * images without a background, use <b>createGraphics()</b>.\n   *\n   * ( end auto-generated )\n   * @webref output:image\n   * @see PApplet#save(String)\n   * @see PApplet#createGraphics(int, int, String, String)\n   * @see PApplet#frameCount\n   * @param filename any sequence of letters or numbers that ends with either \".tif\", \".tga\", \".jpg\", or \".png\"\n   */\n  public void saveFrame(String filename) {\n    try {\n      g.save(savePath(insertFrame(filename)));\n    } catch (SecurityException se) {\n      System.err.println(\"Can't use saveFrame() when running in a browser, \" +\n                         \"unless using a signed applet.\");\n    }\n  }",
    "info" : "MethodDeclaration[116773-118793]:MethodDeclaration[116773-118793]"
  }, {
    "left" : "public what String) : String",
    "right" : "public what String) : String",
    "info" : "MethodDeclaration[118798-119520]:MethodDeclaration[118798-119520]"
  }, {
    "left" : "public kind int) : void",
    "right" : "public kind int) : void",
    "info" : "MethodDeclaration[119612-119776]:MethodDeclaration[119612-119776]"
  }, {
    "left" : "/**\n   * Replace the cursor with the specified PImage. The x- and y-\n   * coordinate of the center will be the center of the image.\n   */\n  public void cursor(PImage img) {\n    cursor(img, img.width/2, img.height/2);\n  }",
    "right" : "/**\n   * Replace the cursor with the specified PImage. The x- and y-\n   * coordinate of the center will be the center of the image.\n   */\n  public void cursor(PImage img) {\n    cursor(img, img.width/2, img.height/2);\n  }",
    "info" : "MethodDeclaration[119781-120001]:MethodDeclaration[119781-120001]"
  }, {
    "left" : "/**\n   * ( begin auto-generated from cursor.xml )\n   *\n   * Sets the cursor to a predefined symbol, an image, or makes it visible if\n   * already hidden. If you are trying to set an image as the cursor, it is\n   * recommended to make the size 16x16 or 32x32 pixels. It is not possible\n   * to load an image as the cursor if you are exporting your program for the\n   * Web and not all MODES work with all Web browsers. The values for\n   * parameters <b>x</b> and <b>y</b> must be less than the dimensions of the image.\n   * <br /> <br />\n   * Setting or hiding the cursor generally does not work with \"Present\" mode\n   * (when running full-screen).\n   *\n   * ( end auto-generated )\n   * <h3>Advanced</h3>\n   * Set a custom cursor to an image with a specific hotspot.\n   * Only works with JDK 1.2 and later.\n   * Currently seems to be broken on Java 1.4 for Mac OS X\n   * <p>\n   * Based on code contributed by Amit Pitaru, plus additional\n   * code to handle Java versions via reflection by Jonathan Feinberg.\n   * Reflection removed for release 0128 and later.\n   * @webref environment\n   * @see PApplet#noCursor()\n   * @param img any variable of type PImage\n   * @param x the horizontal active spot of the cursor\n   * @param y the vertical active spot of the cursor\n   */\n  public void cursor(PImage img, int x, int y) {\n    surface.setCursor(img, x, y);\n  }",
    "right" : "/**\n   * ( begin auto-generated from cursor.xml )\n   *\n   * Sets the cursor to a predefined symbol, an image, or makes it visible if\n   * already hidden. If you are trying to set an image as the cursor, it is\n   * recommended to make the size 16x16 or 32x32 pixels. It is not possible\n   * to load an image as the cursor if you are exporting your program for the\n   * Web and not all MODES work with all Web browsers. The values for\n   * parameters <b>x</b> and <b>y</b> must be less than the dimensions of the image.\n   * <br /> <br />\n   * Setting or hiding the cursor generally does not work with \"Present\" mode\n   * (when running full-screen).\n   *\n   * ( end auto-generated )\n   * <h3>Advanced</h3>\n   * Set a custom cursor to an image with a specific hotspot.\n   * Only works with JDK 1.2 and later.\n   * Currently seems to be broken on Java 1.4 for Mac OS X\n   * <p>\n   * Based on code contributed by Amit Pitaru, plus additional\n   * code to handle Java versions via reflection by Jonathan Feinberg.\n   * Reflection removed for release 0128 and later.\n   * @webref environment\n   * @see PApplet#noCursor()\n   * @param img any variable of type PImage\n   * @param x the horizontal active spot of the cursor\n   * @param y the vertical active spot of the cursor\n   */\n  public void cursor(PImage img, int x, int y) {\n    surface.setCursor(img, x, y);\n  }",
    "info" : "MethodDeclaration[120006-121364]:MethodDeclaration[120006-121364]"
  }, {
    "left" : "public ) : void",
    "right" : "public ) : void",
    "info" : "MethodDeclaration[121369-121547]:MethodDeclaration[121369-121547]"
  }, {
    "left" : "/**\n   * ( begin auto-generated from noCursor.xml )\n   *\n   * Hides the cursor from view. Will not work when running the program in a\n   * web browser or when running in full screen (Present) mode.\n   *\n   * ( end auto-generated )\n   * <h3>Advanced</h3>\n   * Hide the cursor by creating a transparent image\n   * and using it as a custom cursor.\n   * @webref environment\n   * @see PApplet#cursor()\n   * @usage Application\n   */\n  public void noCursor() {\n    surface.hideCursor();\n  }",
    "right" : "/**\n   * ( begin auto-generated from noCursor.xml )\n   *\n   * Hides the cursor from view. Will not work when running the program in a\n   * web browser or when running in full screen (Present) mode.\n   *\n   * ( end auto-generated )\n   * <h3>Advanced</h3>\n   * Hide the cursor by creating a transparent image\n   * and using it as a custom cursor.\n   * @webref environment\n   * @see PApplet#cursor()\n   * @usage Application\n   */\n  public void noCursor() {\n    surface.hideCursor();\n  }",
    "info" : "MethodDeclaration[121552-122035]:MethodDeclaration[121552-122035]"
  }, {
    "left" : "public what byte) : void",
    "right" : "public what byte) : void",
    "info" : "MethodDeclaration[122104-123687]:MethodDeclaration[122104-123687]"
  }, {
    "left" : "static public void print(boolean what) {\n    System.out.print(what);\n    System.out.flush();\n  }",
    "right" : "static public void print(boolean what) {\n    System.out.print(what);\n    System.out.flush();\n  }",
    "info" : "MethodDeclaration[123691-123787]:MethodDeclaration[123691-123787]"
  }, {
    "left" : "public what char) : void",
    "right" : "public what char) : void",
    "info" : "MethodDeclaration[123791-123884]:MethodDeclaration[123791-123884]"
  }, {
    "left" : "public what int) : void",
    "right" : "public what int) : void",
    "info" : "MethodDeclaration[123888-123980]:MethodDeclaration[123888-123980]"
  }, {
    "left" : "public what long) : void",
    "right" : "public what long) : void",
    "info" : "MethodDeclaration[123984-124077]:MethodDeclaration[123984-124077]"
  }, {
    "left" : "public what float) : void",
    "right" : "public what float) : void",
    "info" : "MethodDeclaration[124081-124175]:MethodDeclaration[124081-124175]"
  }, {
    "left" : "static public void print(double what) {\n    System.out.print(what);\n    System.out.flush();\n  }",
    "right" : "static public void print(double what) {\n    System.out.print(what);\n    System.out.flush();\n  }",
    "info" : "MethodDeclaration[124179-124274]:MethodDeclaration[124179-124274]"
  }, {
    "left" : "static public void print(String what) {\n    System.out.print(what);\n    System.out.flush();\n  }",
    "right" : "static public void print(String what) {\n    System.out.print(what);\n    System.out.flush();\n  }",
    "info" : "MethodDeclaration[124278-124373]:MethodDeclaration[124278-124373]"
  }, {
    "left" : "/**\n   * @param variables list of data, separated by commas\n   */\n  static public void print(Object... variables) {\n    StringBuilder sb = new StringBuilder();\n    for (Object o : variables) {\n      if (sb.length() != 0) {\n        sb.append(\" \");\n      }\n      if (o == null) {\n        sb.append(\"null\");\n      } else {\n        sb.append(o.toString());\n      }\n    }\n    System.out.print(sb.toString());\n  }",
    "right" : "/**\n   * @param variables list of data, separated by commas\n   */\n  static public void print(Object... variables) {\n    StringBuilder sb = new StringBuilder();\n    for (Object o : variables) {\n      if (sb.length() != 0) {\n        sb.append(\" \");\n      }\n      if (o == null) {\n        sb.append(\"null\");\n      } else {\n        sb.append(o.toString());\n      }\n    }\n    System.out.print(sb.toString());\n  }",
    "info" : "MethodDeclaration[124377-124784]:MethodDeclaration[124377-124784]"
  }, {
    "left" : "/**\n   * ( begin auto-generated from println.xml )\n   *\n   * Writes to the text area of the Processing environment's console. This is\n   * often helpful for looking at the data a program is producing. Each call\n   * to this function creates a new line of output. Individual elements can\n   * be separated with quotes (\"\") and joined with the string concatenation\n   * operator (+). See <b>print()</b> for more about what to expect in the output.\n   * <br/><br/> <b>println()</b> on an array (by itself) will write the\n   * contents of the array to the console. This is often helpful for looking\n   * at the data a program is producing. A new line is put between each\n   * element of the array. This function can only print one dimensional\n   * arrays. For arrays with higher dimensions, the result will be closer to\n   * that of <b>print()</b>.\n   *\n   * ( end auto-generated )\n * @webref output:text_area\n * @usage IDE\n * @see PApplet#print(byte)\n * @see PApplet#printArray(Object)\n */\n  static public void println() {\n    System.out.println();\n  }",
    "right" : "/**\n   * ( begin auto-generated from println.xml )\n   *\n   * Writes to the text area of the Processing environment's console. This is\n   * often helpful for looking at the data a program is producing. Each call\n   * to this function creates a new line of output. Individual elements can\n   * be separated with quotes (\"\") and joined with the string concatenation\n   * operator (+). See <b>print()</b> for more about what to expect in the output.\n   * <br/><br/> <b>println()</b> on an array (by itself) will write the\n   * contents of the array to the console. This is often helpful for looking\n   * at the data a program is producing. A new line is put between each\n   * element of the array. This function can only print one dimensional\n   * arrays. For arrays with higher dimensions, the result will be closer to\n   * that of <b>print()</b>.\n   *\n   * ( end auto-generated )\n * @webref output:text_area\n * @usage IDE\n * @see PApplet#print(byte)\n * @see PApplet#printArray(Object)\n */\n  static public void println() {\n    System.out.println();\n  }",
    "info" : "MethodDeclaration[125026-126075]:MethodDeclaration[125026-126075]"
  }, {
    "left" : "public what byte) : void",
    "right" : "public what byte) : void",
    "info" : "MethodDeclaration[126078-126225]:MethodDeclaration[126078-126225]"
  }, {
    "left" : "static public void println(boolean what) {\n    System.out.println(what);\n    System.out.flush();\n  }",
    "right" : "static public void println(boolean what) {\n    System.out.println(what);\n    System.out.flush();\n  }",
    "info" : "MethodDeclaration[126229-126329]:MethodDeclaration[126229-126329]"
  }, {
    "left" : "public what char) : void",
    "right" : "public what char) : void",
    "info" : "MethodDeclaration[126333-126430]:MethodDeclaration[126333-126430]"
  }, {
    "left" : "static public void println(int what) {\n    System.out.println(what);\n    System.out.flush();\n  }",
    "right" : "static public void println(int what) {\n    System.out.println(what);\n    System.out.flush();\n  }",
    "info" : "MethodDeclaration[126434-126530]:MethodDeclaration[126434-126530]"
  }, {
    "left" : "static public void println(long what) {\n    System.out.println(what);\n    System.out.flush();\n  }",
    "right" : "static public void println(long what) {\n    System.out.println(what);\n    System.out.flush();\n  }",
    "info" : "MethodDeclaration[126534-126631]:MethodDeclaration[126534-126631]"
  }, {
    "left" : "static public void println(float what) {\n    System.out.println(what);\n    System.out.flush();\n  }",
    "right" : "static public void println(float what) {\n    System.out.println(what);\n    System.out.flush();\n  }",
    "info" : "MethodDeclaration[126635-126733]:MethodDeclaration[126635-126733]"
  }, {
    "left" : "static public void println(double what) {\n    System.out.println(what);\n    System.out.flush();\n  }",
    "right" : "static public void println(double what) {\n    System.out.println(what);\n    System.out.flush();\n  }",
    "info" : "MethodDeclaration[126737-126836]:MethodDeclaration[126737-126836]"
  }, {
    "left" : "public what String) : void",
    "right" : "public what String) : void",
    "info" : "MethodDeclaration[126840-126939]:MethodDeclaration[126840-126939]"
  }, {
    "left" : "public variables Object...) : void",
    "right" : "public variables Object...) : void",
    "info" : "MethodDeclaration[126943-127169]:MethodDeclaration[126943-127169]"
  }, {
    "left" : "public what Object) : void",
    "right" : "public what Object) : void",
    "info" : "MethodDeclaration[127726-128188]:MethodDeclaration[127726-128188]"
  }, {
    "left" : "/**\n   * ( begin auto-generated from printArray.xml )\n   *\n   * To come...\n   *\n   * ( end auto-generated )\n * @webref output:text_area\n * @param what one-dimensional array\n * @usage IDE\n * @see PApplet#print(byte)\n * @see PApplet#println()\n */\n  static public void printArray(Object what) {\n    if (what == null) {\n      // special case since this does fuggly things on > 1.1\n      System.out.println(\"null\");\n\n    } else {\n      String name = what.getClass().getName();\n      if (name.charAt(0) == '[') {\n        switch (name.charAt(1)) {\n        case '[':\n          // don't even mess with multi-dimensional arrays (case '[')\n          // or anything else that's not int, float, boolean, char\n          System.out.println(what);\n          break;\n\n        case 'L':\n          // print a 1D array of objects as individual elements\n          Object poo[] = (Object[]) what;\n          for (int i = 0; i < poo.length; i++) {\n            if (poo[i] instanceof String) {\n              System.out.println(\"[\" + i + \"] \\\"\" + poo[i] + \"\\\"\");\n            } else {\n              System.out.println(\"[\" + i + \"] \" + poo[i]);\n            }\n          }\n          break;\n\n        case 'Z':  // boolean\n          boolean zz[] = (boolean[]) what;\n          for (int i = 0; i < zz.length; i++) {\n            System.out.println(\"[\" + i + \"] \" + zz[i]);\n          }\n          break;\n\n        case 'B':  // byte\n          byte bb[] = (byte[]) what;\n          for (int i = 0; i < bb.length; i++) {\n            System.out.println(\"[\" + i + \"] \" + bb[i]);\n          }\n          break;\n\n        case 'C':  // char\n          char cc[] = (char[]) what;\n          for (int i = 0; i < cc.length; i++) {\n            System.out.println(\"[\" + i + \"] '\" + cc[i] + \"'\");\n          }\n          break;\n\n        case 'I':  // int\n          int ii[] = (int[]) what;\n          for (int i = 0; i < ii.length; i++) {\n            System.out.println(\"[\" + i + \"] \" + ii[i]);\n          }\n          break;\n\n        case 'J':  // int\n          long jj[] = (long[]) what;\n          for (int i = 0; i < jj.length; i++) {\n            System.out.println(\"[\" + i + \"] \" + jj[i]);\n          }\n          break;\n\n        case 'F':  // float\n          float ff[] = (float[]) what;\n          for (int i = 0; i < ff.length; i++) {\n            System.out.println(\"[\" + i + \"] \" + ff[i]);\n          }\n          break;\n\n        case 'D':  // double\n          double dd[] = (double[]) what;\n          for (int i = 0; i < dd.length; i++) {\n            System.out.println(\"[\" + i + \"] \" + dd[i]);\n          }\n          break;\n\n        default:\n          System.out.println(what);\n        }\n      } else {  // not an array\n        System.out.println(what);\n      }\n    }\n    System.out.flush();\n  }",
    "right" : "/**\n   * ( begin auto-generated from printArray.xml )\n   *\n   * To come...\n   *\n   * ( end auto-generated )\n * @webref output:text_area\n * @param what one-dimensional array\n * @usage IDE\n * @see PApplet#print(byte)\n * @see PApplet#println()\n */\n  static public void printArray(Object what) {\n    if (what == null) {\n      // special case since this does fuggly things on > 1.1\n      System.out.println(\"null\");\n\n    } else {\n      String name = what.getClass().getName();\n      if (name.charAt(0) == '[') {\n        switch (name.charAt(1)) {\n        case '[':\n          // don't even mess with multi-dimensional arrays (case '[')\n          // or anything else that's not int, float, boolean, char\n          System.out.println(what);\n          break;\n\n        case 'L':\n          // print a 1D array of objects as individual elements\n          Object poo[] = (Object[]) what;\n          for (int i = 0; i < poo.length; i++) {\n            if (poo[i] instanceof String) {\n              System.out.println(\"[\" + i + \"] \\\"\" + poo[i] + \"\\\"\");\n            } else {\n              System.out.println(\"[\" + i + \"] \" + poo[i]);\n            }\n          }\n          break;\n\n        case 'Z':  // boolean\n          boolean zz[] = (boolean[]) what;\n          for (int i = 0; i < zz.length; i++) {\n            System.out.println(\"[\" + i + \"] \" + zz[i]);\n          }\n          break;\n\n        case 'B':  // byte\n          byte bb[] = (byte[]) what;\n          for (int i = 0; i < bb.length; i++) {\n            System.out.println(\"[\" + i + \"] \" + bb[i]);\n          }\n          break;\n\n        case 'C':  // char\n          char cc[] = (char[]) what;\n          for (int i = 0; i < cc.length; i++) {\n            System.out.println(\"[\" + i + \"] '\" + cc[i] + \"'\");\n          }\n          break;\n\n        case 'I':  // int\n          int ii[] = (int[]) what;\n          for (int i = 0; i < ii.length; i++) {\n            System.out.println(\"[\" + i + \"] \" + ii[i]);\n          }\n          break;\n\n        case 'J':  // int\n          long jj[] = (long[]) what;\n          for (int i = 0; i < jj.length; i++) {\n            System.out.println(\"[\" + i + \"] \" + jj[i]);\n          }\n          break;\n\n        case 'F':  // float\n          float ff[] = (float[]) what;\n          for (int i = 0; i < ff.length; i++) {\n            System.out.println(\"[\" + i + \"] \" + ff[i]);\n          }\n          break;\n\n        case 'D':  // double\n          double dd[] = (double[]) what;\n          for (int i = 0; i < dd.length; i++) {\n            System.out.println(\"[\" + i + \"] \" + dd[i]);\n          }\n          break;\n\n        default:\n          System.out.println(what);\n        }\n      } else {  // not an array\n        System.out.println(what);\n      }\n    }\n    System.out.flush();\n  }",
    "info" : "MethodDeclaration[128192-130928]:MethodDeclaration[128192-130928]"
  }, {
    "left" : "static public void debug(String msg) {\n    if (DEBUG) println(msg);\n  }",
    "right" : "static public void debug(String msg) {\n    if (DEBUG) println(msg);\n  }",
    "info" : "MethodDeclaration[130933-131004]:MethodDeclaration[130933-131004]"
  }, {
    "left" : "/**\n   * ( begin auto-generated from abs.xml )\n   *\n   * Calculates the absolute value (magnitude) of a number. The absolute\n   * value of a number is always positive.\n   *\n   * ( end auto-generated )\n   * @webref math:calculation\n   * @param n number to compute\n   */\n  static public final float abs(float n) {\n    return (n < 0) ? -n : n;\n  }",
    "right" : "/**\n   * ( begin auto-generated from abs.xml )\n   *\n   * Calculates the absolute value (magnitude) of a number. The absolute\n   * value of a number is always positive.\n   *\n   * ( end auto-generated )\n   * @webref math:calculation\n   * @param n number to compute\n   */\n  static public final float abs(float n) {\n    return (n < 0) ? -n : n;\n  }",
    "info" : "MethodDeclaration[131624-131968]:MethodDeclaration[131624-131968]"
  }, {
    "left" : "public n int) : int",
    "right" : "public n int) : int",
    "info" : "MethodDeclaration[131972-132041]:MethodDeclaration[131972-132041]"
  }, {
    "left" : "public n float) : float",
    "right" : "public n float) : float",
    "info" : "MethodDeclaration[132043-132485]:MethodDeclaration[132043-132485]"
  }, {
    "left" : "public n float) : float",
    "right" : "public n float) : float",
    "info" : "MethodDeclaration[132487-133047]:MethodDeclaration[132487-133047]"
  }, {
    "left" : "public n float) : float",
    "right" : "public n float) : float",
    "info" : "MethodDeclaration[133049-133422]:MethodDeclaration[133049-133422]"
  }, {
    "left" : "public n float) : float",
    "right" : "public n float) : float",
    "info" : "MethodDeclaration[133424-133760]:MethodDeclaration[133424-133760]"
  }, {
    "left" : "/**\n   * ( begin auto-generated from pow.xml )\n   *\n   * Facilitates exponential expressions. The <b>pow()</b> function is an\n   * efficient way of multiplying numbers by themselves (or their reciprocal)\n   * in large quantities. For example, <b>pow(3, 5)</b> is equivalent to the\n   * expression 3*3*3*3*3 and <b>pow(3, -5)</b> is equivalent to 1 / 3*3*3*3*3.\n   *\n   * ( end auto-generated )\n   * @webref math:calculation\n   * @param n base of the exponential expression\n   * @param e power by which to raise the base\n   * @see PApplet#sqrt(float)\n   */\n  static public final float pow(float n, float e) {\n    return (float)Math.pow(n, e);\n  }",
    "right" : "/**\n   * ( begin auto-generated from pow.xml )\n   *\n   * Facilitates exponential expressions. The <b>pow()</b> function is an\n   * efficient way of multiplying numbers by themselves (or their reciprocal)\n   * in large quantities. For example, <b>pow(3, 5)</b> is equivalent to the\n   * expression 3*3*3*3*3 and <b>pow(3, -5)</b> is equivalent to 1 / 3*3*3*3*3.\n   *\n   * ( end auto-generated )\n   * @webref math:calculation\n   * @param n base of the exponential expression\n   * @param e power by which to raise the base\n   * @see PApplet#sqrt(float)\n   */\n  static public final float pow(float n, float e) {\n    return (float)Math.pow(n, e);\n  }",
    "info" : "MethodDeclaration[133762-134407]:MethodDeclaration[133762-134407]"
  }, {
    "left" : "public a int, b int) : int",
    "right" : "public a int, b int) : int",
    "info" : "MethodDeclaration[134409-134787]:MethodDeclaration[134409-134787]"
  }, {
    "left" : "public a float, b float) : float",
    "right" : "public a float, b float) : float",
    "info" : "MethodDeclaration[134791-134872]:MethodDeclaration[134791-134872]"
  }, {
    "left" : "public a int, b int, c int) : int",
    "right" : "public a int, b int, c int) : int",
    "info" : "MethodDeclaration[134972-135132]:MethodDeclaration[134972-135132]"
  }, {
    "left" : "public a float, b float, c float) : float",
    "right" : "public a float, b float, c float) : float",
    "info" : "MethodDeclaration[135137-135259]:MethodDeclaration[135137-135259]"
  }, {
    "left" : "public list ) : int",
    "right" : "public list ) : int",
    "info" : "MethodDeclaration[135264-135592]:MethodDeclaration[135264-135592]"
  }, {
    "left" : "public list ) : float",
    "right" : "public list ) : float",
    "info" : "MethodDeclaration[135596-135873]:MethodDeclaration[135596-135873]"
  }, {
    "left" : "public a int, b int) : int",
    "right" : "public a int, b int) : int",
    "info" : "MethodDeclaration[135878-136438]:MethodDeclaration[135878-136438]"
  }, {
    "left" : "public a float, b float) : float",
    "right" : "public a float, b float) : float",
    "info" : "MethodDeclaration[136442-136523]:MethodDeclaration[136442-136523]"
  }, {
    "left" : "public a int, b int, c int) : int",
    "right" : "public a int, b int, c int) : int",
    "info" : "MethodDeclaration[136626-136740]:MethodDeclaration[136626-136740]"
  }, {
    "left" : "/**\n   * ( begin auto-generated from min.xml )\n   *\n   * Determines the smallest value in a sequence of numbers.\n   *\n   * ( end auto-generated )\n   * @webref math:calculation\n   * @param a first number\n   * @param b second number\n   * @param c third number\n   * @see PApplet#max(float, float, float)\n   */\n  static public final float min(float a, float b, float c) {\n    return (a < b) ? ((a < c) ? a : c) : ((b < c) ? b : c);\n  }",
    "right" : "/**\n   * ( begin auto-generated from min.xml )\n   *\n   * Determines the smallest value in a sequence of numbers.\n   *\n   * ( end auto-generated )\n   * @webref math:calculation\n   * @param a first number\n   * @param b second number\n   * @param c third number\n   * @see PApplet#max(float, float, float)\n   */\n  static public final float min(float a, float b, float c) {\n    return (a < b) ? ((a < c) ? a : c) : ((b < c) ? b : c);\n  }",
    "info" : "MethodDeclaration[136742-137173]:MethodDeclaration[136742-137173]"
  }, {
    "left" : "public list ) : int",
    "right" : "public list ) : int",
    "info" : "MethodDeclaration[137318-137646]:MethodDeclaration[137318-137646]"
  }, {
    "left" : "public list ) : float",
    "right" : "public list ) : float",
    "info" : "MethodDeclaration[137650-137927]:MethodDeclaration[137650-137927]"
  }, {
    "left" : "static public final int constrain(int amt, int low, int high) {\n    return (amt < low) ? low : ((amt > high) ? high : amt);\n  }",
    "right" : "static public final int constrain(int amt, int low, int high) {\n    return (amt < low) ? low : ((amt > high) ? high : amt);\n  }",
    "info" : "MethodDeclaration[138416-138543]:MethodDeclaration[138416-138543]"
  }, {
    "left" : "/**\n   * ( begin auto-generated from constrain.xml )\n   *\n   * Constrains a value to not exceed a maximum and minimum value.\n   *\n   * ( end auto-generated )\n   * @webref math:calculation\n   * @param amt the value to constrain\n   * @param low minimum limit\n   * @param high maximum limit\n   * @see PApplet#max(float, float, float)\n   * @see PApplet#min(float, float, float)\n   */\n\n  static public final float constrain(float amt, float low, float high) {\n    return (amt < low) ? low : ((amt > high) ? high : amt);\n  }",
    "right" : "/**\n   * ( begin auto-generated from constrain.xml )\n   *\n   * Constrains a value to not exceed a maximum and minimum value.\n   *\n   * ( end auto-generated )\n   * @webref math:calculation\n   * @param amt the value to constrain\n   * @param low minimum limit\n   * @param high maximum limit\n   * @see PApplet#max(float, float, float)\n   * @see PApplet#min(float, float, float)\n   */\n\n  static public final float constrain(float amt, float low, float high) {\n    return (amt < low) ? low : ((amt > high) ? high : amt);\n  }",
    "info" : "MethodDeclaration[138545-139063]:MethodDeclaration[138545-139063]"
  }, {
    "left" : "/**\n   * ( begin auto-generated from sin.xml )\n   *\n   * Calculates the sine of an angle. This function expects the values of the\n   * <b>angle</b> parameter to be provided in radians (values from 0 to\n   * 6.28). Values are returned in the range -1 to 1.\n   *\n   * ( end auto-generated )\n   * @webref math:trigonometry\n   * @param angle an angle in radians\n   * @see PApplet#cos(float)\n   * @see PApplet#tan(float)\n   * @see PApplet#radians(float)\n   */\n  static public final float sin(float angle) {\n    return (float)Math.sin(angle);\n  }",
    "right" : "/**\n   * ( begin auto-generated from sin.xml )\n   *\n   * Calculates the sine of an angle. This function expects the values of the\n   * <b>angle</b> parameter to be provided in radians (values from 0 to\n   * 6.28). Values are returned in the range -1 to 1.\n   *\n   * ( end auto-generated )\n   * @webref math:trigonometry\n   * @param angle an angle in radians\n   * @see PApplet#cos(float)\n   * @see PApplet#tan(float)\n   * @see PApplet#radians(float)\n   */\n  static public final float sin(float angle) {\n    return (float)Math.sin(angle);\n  }",
    "info" : "MethodDeclaration[139065-139605]:MethodDeclaration[139065-139605]"
  }, {
    "left" : "/**\n   * ( begin auto-generated from cos.xml )\n   *\n   * Calculates the cosine of an angle. This function expects the values of\n   * the <b>angle</b> parameter to be provided in radians (values from 0 to\n   * PI*2). Values are returned in the range -1 to 1.\n   *\n   * ( end auto-generated )\n   * @webref math:trigonometry\n   * @param angle an angle in radians\n   * @see PApplet#sin(float)\n   * @see PApplet#tan(float)\n   * @see PApplet#radians(float)\n   */\n  static public final float cos(float angle) {\n    return (float)Math.cos(angle);\n  }",
    "right" : "/**\n   * ( begin auto-generated from cos.xml )\n   *\n   * Calculates the cosine of an angle. This function expects the values of\n   * the <b>angle</b> parameter to be provided in radians (values from 0 to\n   * PI*2). Values are returned in the range -1 to 1.\n   *\n   * ( end auto-generated )\n   * @webref math:trigonometry\n   * @param angle an angle in radians\n   * @see PApplet#sin(float)\n   * @see PApplet#tan(float)\n   * @see PApplet#radians(float)\n   */\n  static public final float cos(float angle) {\n    return (float)Math.cos(angle);\n  }",
    "info" : "MethodDeclaration[139607-140149]:MethodDeclaration[139607-140149]"
  }, {
    "left" : "public angle float) : float",
    "right" : "public angle float) : float",
    "info" : "MethodDeclaration[140151-140748]:MethodDeclaration[140151-140748]"
  }, {
    "left" : "public value float) : float",
    "right" : "public value float) : float",
    "info" : "MethodDeclaration[140750-141310]:MethodDeclaration[140750-141310]"
  }, {
    "left" : "public value float) : float",
    "right" : "public value float) : float",
    "info" : "MethodDeclaration[141312-141882]:MethodDeclaration[141312-141882]"
  }, {
    "left" : "/**\n   * ( begin auto-generated from atan.xml )\n   *\n   * The inverse of <b>tan()</b>, returns the arc tangent of a value. This\n   * function expects the values in the range of -Infinity to Infinity\n   * (exclusive) and values are returned in the range <b>-PI/2</b> to <b>PI/2 </b>.\n   *\n   * ( end auto-generated )\n   * @webref math:trigonometry\n   * @param value -Infinity to Infinity (exclusive)\n   * @see PApplet#tan(float)\n   * @see PApplet#asin(float)\n   * @see PApplet#acos(float)\n   */\n  static public final float atan(float value) {\n    return (float)Math.atan(value);\n  }",
    "right" : "/**\n   * ( begin auto-generated from atan.xml )\n   *\n   * The inverse of <b>tan()</b>, returns the arc tangent of a value. This\n   * function expects the values in the range of -Infinity to Infinity\n   * (exclusive) and values are returned in the range <b>-PI/2</b> to <b>PI/2 </b>.\n   *\n   * ( end auto-generated )\n   * @webref math:trigonometry\n   * @param value -Infinity to Infinity (exclusive)\n   * @see PApplet#tan(float)\n   * @see PApplet#asin(float)\n   * @see PApplet#acos(float)\n   */\n  static public final float atan(float value) {\n    return (float)Math.atan(value);\n  }",
    "info" : "MethodDeclaration[141884-142465]:MethodDeclaration[141884-142465]"
  }, {
    "left" : "/**\n   * ( begin auto-generated from atan2.xml )\n   *\n   * Calculates the angle (in radians) from a specified point to the\n   * coordinate origin as measured from the positive x-axis. Values are\n   * returned as a <b>float</b> in the range from <b>PI</b> to <b>-PI</b>.\n   * The <b>atan2()</b> function is most often used for orienting geometry to\n   * the position of the cursor.  Note: The y-coordinate of the point is the\n   * first parameter and the x-coordinate is the second due the the structure\n   * of calculating the tangent.\n   *\n   * ( end auto-generated )\n   * @webref math:trigonometry\n   * @param y y-coordinate of the point\n   * @param x x-coordinate of the point\n   * @see PApplet#tan(float)\n   */\n  static public final float atan2(float y, float x) {\n    return (float)Math.atan2(y, x);\n  }",
    "right" : "/**\n   * ( begin auto-generated from atan2.xml )\n   *\n   * Calculates the angle (in radians) from a specified point to the\n   * coordinate origin as measured from the positive x-axis. Values are\n   * returned as a <b>float</b> in the range from <b>PI</b> to <b>-PI</b>.\n   * The <b>atan2()</b> function is most often used for orienting geometry to\n   * the position of the cursor.  Note: The y-coordinate of the point is the\n   * first parameter and the x-coordinate is the second due the the structure\n   * of calculating the tangent.\n   *\n   * ( end auto-generated )\n   * @webref math:trigonometry\n   * @param y y-coordinate of the point\n   * @param x x-coordinate of the point\n   * @see PApplet#tan(float)\n   */\n  static public final float atan2(float y, float x) {\n    return (float)Math.atan2(y, x);\n  }",
    "info" : "MethodDeclaration[142467-143275]:MethodDeclaration[142467-143275]"
  }, {
    "left" : "/**\n   * ( begin auto-generated from degrees.xml )\n   *\n   * Converts a radian measurement to its corresponding value in degrees.\n   * Radians and degrees are two ways of measuring the same thing. There are\n   * 360 degrees in a circle and 2*PI radians in a circle. For example,\n   * 90&deg; = PI/2 = 1.5707964. All trigonometric functions in Processing\n   * require their parameters to be specified in radians.\n   *\n   * ( end auto-generated )\n   * @webref math:trigonometry\n   * @param radians radian value to convert to degrees\n   * @see PApplet#radians(float)\n   */\n  static public final float degrees(float radians) {\n    return radians * RAD_TO_DEG;\n  }",
    "right" : "/**\n   * ( begin auto-generated from degrees.xml )\n   *\n   * Converts a radian measurement to its corresponding value in degrees.\n   * Radians and degrees are two ways of measuring the same thing. There are\n   * 360 degrees in a circle and 2*PI radians in a circle. For example,\n   * 90&deg; = PI/2 = 1.5707964. All trigonometric functions in Processing\n   * require their parameters to be specified in radians.\n   *\n   * ( end auto-generated )\n   * @webref math:trigonometry\n   * @param radians radian value to convert to degrees\n   * @see PApplet#radians(float)\n   */\n  static public final float degrees(float radians) {\n    return radians * RAD_TO_DEG;\n  }",
    "info" : "MethodDeclaration[143277-143936]:MethodDeclaration[143277-143936]"
  }, {
    "left" : "public degrees float...) : float",
    "right" : "public degrees float...) : float",
    "info" : "MethodDeclaration[143938-144597]:MethodDeclaration[143938-144597]"
  }, {
    "left" : "public n float) : int",
    "right" : "public n float) : int",
    "info" : "MethodDeclaration[144599-145049]:MethodDeclaration[144599-145049]"
  }, {
    "left" : "/**\n   * ( begin auto-generated from floor.xml )\n   *\n   * Calculates the closest int value that is less than or equal to the value\n   * of the parameter.\n   *\n   * ( end auto-generated )\n   * @webref math:calculation\n   * @param n number to round down\n   * @see PApplet#ceil(float)\n   * @see PApplet#round(float)\n   */\n  static public final int floor(float n) {\n    return (int) Math.floor(n);\n  }",
    "right" : "/**\n   * ( begin auto-generated from floor.xml )\n   *\n   * Calculates the closest int value that is less than or equal to the value\n   * of the parameter.\n   *\n   * ( end auto-generated )\n   * @webref math:calculation\n   * @param n number to round down\n   * @see PApplet#ceil(float)\n   * @see PApplet#round(float)\n   */\n  static public final int floor(float n) {\n    return (int) Math.floor(n);\n  }",
    "info" : "MethodDeclaration[145051-145449]:MethodDeclaration[145051-145449]"
  }, {
    "left" : "public n float) : int",
    "right" : "public n float) : int",
    "info" : "MethodDeclaration[145451-145861]:MethodDeclaration[145451-145861]"
  }, {
    "left" : "static public final float mag(float a, float b) {\n    return (float)Math.sqrt(a*a + b*b);\n  }",
    "right" : "static public final float mag(float a, float b) {\n    return (float)Math.sqrt(a*a + b*b);\n  }",
    "info" : "MethodDeclaration[145866-145959]:MethodDeclaration[145866-145959]"
  }, {
    "left" : "public a float, b float, c float) : float",
    "right" : "public a float, b float, c float) : float",
    "info" : "MethodDeclaration[145961-146686]:MethodDeclaration[145961-146686]"
  }, {
    "left" : "public x1 float, y1 float, x2 float, y2 float) : float",
    "right" : "public x1 float, y1 float, x2 float, y2 float) : float",
    "info" : "MethodDeclaration[146691-146807]:MethodDeclaration[146691-146807]"
  }, {
    "left" : "/**\n   * ( begin auto-generated from dist.xml )\n   *\n   * Calculates the distance between two points.\n   *\n   * ( end auto-generated )\n   * @webref math:calculation\n   * @param x1 x-coordinate of the first point\n   * @param y1 y-coordinate of the first point\n   * @param z1 z-coordinate of the first point\n   * @param x2 x-coordinate of the second point\n   * @param y2 y-coordinate of the second point\n   * @param z2 z-coordinate of the second point\n   */\n  static public final float dist(float x1, float y1, float z1,\n                                 float x2, float y2, float z2) {\n    return sqrt(sq(x2-x1) + sq(y2-y1) + sq(z2-z1));\n  }",
    "right" : "/**\n   * ( begin auto-generated from dist.xml )\n   *\n   * Calculates the distance between two points.\n   *\n   * ( end auto-generated )\n   * @webref math:calculation\n   * @param x1 x-coordinate of the first point\n   * @param y1 y-coordinate of the first point\n   * @param z1 z-coordinate of the first point\n   * @param x2 x-coordinate of the second point\n   * @param y2 y-coordinate of the second point\n   * @param z2 z-coordinate of the second point\n   */\n  static public final float dist(float x1, float y1, float z1,\n                                 float x2, float y2, float z2) {\n    return sqrt(sq(x2-x1) + sq(y2-y1) + sq(z2-z1));\n  }",
    "info" : "MethodDeclaration[146809-147448]:MethodDeclaration[146809-147448]"
  }, {
    "left" : "/**\n   * ( begin auto-generated from lerp.xml )\n   *\n   * Calculates a number between two numbers at a specific increment. The\n   * <b>amt</b> parameter is the amount to interpolate between the two values\n   * where 0.0 equal to the first point, 0.1 is very near the first point,\n   * 0.5 is half-way in between, etc. The lerp function is convenient for\n   * creating motion along a straight path and for drawing dotted lines.\n   *\n   * ( end auto-generated )\n   * @webref math:calculation\n   * @param start first value\n   * @param stop second value\n   * @param amt float between 0.0 and 1.0\n   * @see PGraphics#curvePoint(float, float, float, float, float)\n   * @see PGraphics#bezierPoint(float, float, float, float, float)\n   * @see PVector#lerp(PVector, float)\n   * @see PGraphics#lerpColor(int, int, float)\n   */\n  static public final float lerp(float start, float stop, float amt) {\n    return start + (stop-start) * amt;\n  }",
    "right" : "/**\n   * ( begin auto-generated from lerp.xml )\n   *\n   * Calculates a number between two numbers at a specific increment. The\n   * <b>amt</b> parameter is the amount to interpolate between the two values\n   * where 0.0 equal to the first point, 0.1 is very near the first point,\n   * 0.5 is half-way in between, etc. The lerp function is convenient for\n   * creating motion along a straight path and for drawing dotted lines.\n   *\n   * ( end auto-generated )\n   * @webref math:calculation\n   * @param start first value\n   * @param stop second value\n   * @param amt float between 0.0 and 1.0\n   * @see PGraphics#curvePoint(float, float, float, float, float)\n   * @see PGraphics#bezierPoint(float, float, float, float, float)\n   * @see PVector#lerp(PVector, float)\n   * @see PGraphics#lerpColor(int, int, float)\n   */\n  static public final float lerp(float start, float stop, float amt) {\n    return start + (stop-start) * amt;\n  }",
    "info" : "MethodDeclaration[147450-148380]:MethodDeclaration[147450-148380]"
  }, {
    "left" : "/**\n   * ( begin auto-generated from norm.xml )\n   *\n   * Normalizes a number from another range into a value between 0 and 1.\n   * <br/> <br/>\n   * Identical to map(value, low, high, 0, 1);\n   * <br/> <br/>\n   * Numbers outside the range are not clamped to 0 and 1, because\n   * out-of-range values are often intentional and useful.\n   *\n   * ( end auto-generated )\n   * @webref math:calculation\n   * @param value the incoming value to be converted\n   * @param start lower bound of the value's current range\n   * @param stop upper bound of the value's current range\n   * @see PApplet#map(float, float, float, float, float)\n   * @see PApplet#lerp(float, float, float)\n   */\n  static public final float norm(float value, float start, float stop) {\n    return (value - start) / (stop - start);\n  }",
    "right" : "/**\n   * ( begin auto-generated from norm.xml )\n   *\n   * Normalizes a number from another range into a value between 0 and 1.\n   * <br/> <br/>\n   * Identical to map(value, low, high, 0, 1);\n   * <br/> <br/>\n   * Numbers outside the range are not clamped to 0 and 1, because\n   * out-of-range values are often intentional and useful.\n   *\n   * ( end auto-generated )\n   * @webref math:calculation\n   * @param value the incoming value to be converted\n   * @param start lower bound of the value's current range\n   * @param stop upper bound of the value's current range\n   * @see PApplet#map(float, float, float, float, float)\n   * @see PApplet#lerp(float, float, float)\n   */\n  static public final float norm(float value, float start, float stop) {\n    return (value - start) / (stop - start);\n  }",
    "info" : "MethodDeclaration[148384-149179]:MethodDeclaration[148384-149179]"
  }, {
    "left" : "public value float, start1 float, stop1 float, start2 float, stop2 float) : float",
    "right" : "public value float, start1 float, stop1 float, start2 float, stop2 float) : float",
    "info" : "MethodDeclaration[149183-150307]:MethodDeclaration[149183-150307]"
  }, {
    "left" : "",
    "right" : "",
    "info" : "FieldDeclaration[150668-150690]:FieldDeclaration[150668-150690]"
  }, {
    "left" : "public high float) : float",
    "right" : "public high float) : float",
    "info" : "MethodDeclaration[150694-151258]:MethodDeclaration[150694-151258]"
  }, {
    "left" : "public ) : float",
    "right" : "public ) : float",
    "info" : "MethodDeclaration[151262-152158]:MethodDeclaration[151262-152158]"
  }, {
    "left" : "public low float, high float) : float",
    "right" : "public low float, high float) : float",
    "info" : "MethodDeclaration[152163-153289]:MethodDeclaration[152163-153289]"
  }, {
    "left" : "public seed long) : void",
    "right" : "public seed long) : void",
    "info" : "MethodDeclaration[153293-153982]:MethodDeclaration[153293-153982]"
  }, {
    "left" : "static final int PERLIN_YWRAPB = 4;",
    "right" : "static final int PERLIN_YWRAPB = 4;",
    "info" : "FieldDeclaration[154436-154471]:FieldDeclaration[154436-154471]"
  }, {
    "left" : "",
    "right" : "",
    "info" : "FieldDeclaration[154474-154523]:FieldDeclaration[154474-154523]"
  }, {
    "left" : "static final int PERLIN_ZWRAPB = 8;",
    "right" : "static final int PERLIN_ZWRAPB = 8;",
    "info" : "FieldDeclaration[154526-154561]:FieldDeclaration[154526-154561]"
  }, {
    "left" : "",
    "right" : "",
    "info" : "FieldDeclaration[154564-154613]:FieldDeclaration[154564-154613]"
  }, {
    "left" : "",
    "right" : "",
    "info" : "FieldDeclaration[154616-154652]:FieldDeclaration[154616-154652]"
  }, {
    "left" : "",
    "right" : "",
    "info" : "FieldDeclaration[154656-154679]:FieldDeclaration[154656-154679]"
  }, {
    "left" : "float perlin_amp_falloff = 0.5f;",
    "right" : "float perlin_amp_falloff = 0.5f;",
    "info" : "FieldDeclaration[154710-154742]:FieldDeclaration[154710-154742]"
  }, {
    "left" : "",
    "right" : "",
    "info" : "FieldDeclaration[154857-154885]:FieldDeclaration[154857-154885]"
  }, {
    "left" : "float[] perlin_cosTable;",
    "right" : "float[] perlin_cosTable;",
    "info" : "FieldDeclaration[154888-154912]:FieldDeclaration[154888-154912]"
  }, {
    "left" : "",
    "right" : "",
    "info" : "FieldDeclaration[154915-154930]:FieldDeclaration[154915-154930]"
  }, {
    "left" : "Random perlinRandom;",
    "right" : "Random perlinRandom;",
    "info" : "FieldDeclaration[154934-154954]:FieldDeclaration[154934-154954]"
  }, {
    "left" : "/**\n   */\n  public float noise(float x) {\n    // is this legit? it's a dumb way to do it (but repair it later)\n    return noise(x, 0f, 0f);\n  }",
    "right" : "/**\n   */\n  public float noise(float x) {\n    // is this legit? it's a dumb way to do it (but repair it later)\n    return noise(x, 0f, 0f);\n  }",
    "info" : "MethodDeclaration[154959-155102]:MethodDeclaration[154959-155102]"
  }, {
    "left" : "public x float, y float) : float",
    "right" : "public x float, y float) : float",
    "info" : "MethodDeclaration[155106-155188]:MethodDeclaration[155106-155188]"
  }, {
    "left" : "public x float, y float, z float) : float",
    "right" : "public x float, y float, z float) : float",
    "info" : "MethodDeclaration[155192-159137]:MethodDeclaration[155192-159137]"
  }, {
    "left" : "private float noise_fsc(float i) {\n    // using bagel's cosine table instead\n    return 0.5f*(1.0f-perlin_cosTable[(int)(i*perlin_PI)%perlin_TWOPI]);\n  }",
    "right" : "private float noise_fsc(float i) {\n    // using bagel's cosine table instead\n    return 0.5f*(1.0f-perlin_cosTable[(int)(i*perlin_PI)%perlin_TWOPI]);\n  }",
    "info" : "MethodDeclaration[159250-159403]:MethodDeclaration[159250-159403]"
  }, {
    "left" : "/**\n   * ( begin auto-generated from noiseDetail.xml )\n   *\n   * Adjusts the character and level of detail produced by the Perlin noise\n   * function. Similar to harmonics in physics, noise is computed over\n   * several octaves. Lower octaves contribute more to the output signal and\n   * as such define the overal intensity of the noise, whereas higher octaves\n   * create finer grained details in the noise sequence. By default, noise is\n   * computed over 4 octaves with each octave contributing exactly half than\n   * its predecessor, starting at 50% strength for the 1st octave. This\n   * falloff amount can be changed by adding an additional function\n   * parameter. Eg. a falloff factor of 0.75 means each octave will now have\n   * 75% impact (25% less) of the previous lower octave. Any value between\n   * 0.0 and 1.0 is valid, however note that values greater than 0.5 might\n   * result in greater than 1.0 values returned by <b>noise()</b>.<br /><br\n   * />By changing these parameters, the signal created by the <b>noise()</b>\n   * function can be adapted to fit very specific needs and characteristics.\n   *\n   * ( end auto-generated )\n   * @webref math:random\n   * @param lod number of octaves to be used by the noise\n   * @param falloff falloff factor for each octave\n   * @see PApplet#noise(float, float, float)\n   */\n  public void noiseDetail(int lod) {\n    if (lod>0) perlin_octaves=lod;\n  }",
    "right" : "/**\n   * ( begin auto-generated from noiseDetail.xml )\n   *\n   * Adjusts the character and level of detail produced by the Perlin noise\n   * function. Similar to harmonics in physics, noise is computed over\n   * several octaves. Lower octaves contribute more to the output signal and\n   * as such define the overal intensity of the noise, whereas higher octaves\n   * create finer grained details in the noise sequence. By default, noise is\n   * computed over 4 octaves with each octave contributing exactly half than\n   * its predecessor, starting at 50% strength for the 1st octave. This\n   * falloff amount can be changed by adding an additional function\n   * parameter. Eg. a falloff factor of 0.75 means each octave will now have\n   * 75% impact (25% less) of the previous lower octave. Any value between\n   * 0.0 and 1.0 is valid, however note that values greater than 0.5 might\n   * result in greater than 1.0 values returned by <b>noise()</b>.<br /><br\n   * />By changing these parameters, the signal created by the <b>noise()</b>\n   * function can be adapted to fit very specific needs and characteristics.\n   *\n   * ( end auto-generated )\n   * @webref math:random\n   * @param lod number of octaves to be used by the noise\n   * @param falloff falloff factor for each octave\n   * @see PApplet#noise(float, float, float)\n   */\n  public void noiseDetail(int lod) {\n    if (lod>0) perlin_octaves=lod;\n  }",
    "info" : "MethodDeclaration[159601-161009]:MethodDeclaration[159601-161009]"
  }, {
    "left" : "/**\n   * @param falloff falloff factor for each octave\n   */\n  public void noiseDetail(int lod, float falloff) {\n    if (lod>0) perlin_octaves=lod;\n    if (falloff>0) perlin_amp_falloff=falloff;\n  }",
    "right" : "/**\n   * @param falloff falloff factor for each octave\n   */\n  public void noiseDetail(int lod, float falloff) {\n    if (lod>0) perlin_octaves=lod;\n    if (falloff>0) perlin_amp_falloff=falloff;\n  }",
    "info" : "MethodDeclaration[161013-161211]:MethodDeclaration[161013-161211]"
  }, {
    "left" : "/**\n   * ( begin auto-generated from noiseSeed.xml )\n   *\n   * Sets the seed value for <b>noise()</b>. By default, <b>noise()</b>\n   * produces different results each time the program is run. Set the\n   * <b>value</b> parameter to a constant to return the same pseudo-random\n   * numbers each time the software is run.\n   *\n   * ( end auto-generated )\n   * @webref math:random\n   * @param seed seed value\n   * @see PApplet#noise(float, float, float)\n   * @see PApplet#noiseDetail(int, float)\n   * @see PApplet#random(float,float)\n   * @see PApplet#randomSeed(long)\n   */\n  public void noiseSeed(long seed) {\n    if (perlinRandom == null) perlinRandom = new Random();\n    perlinRandom.setSeed(seed);\n    // force table reset after changing the random number seed [0122]\n    perlin = null;\n  }",
    "right" : "/**\n   * ( begin auto-generated from noiseSeed.xml )\n   *\n   * Sets the seed value for <b>noise()</b>. By default, <b>noise()</b>\n   * produces different results each time the program is run. Set the\n   * <b>value</b> parameter to a constant to return the same pseudo-random\n   * numbers each time the software is run.\n   *\n   * ( end auto-generated )\n   * @webref math:random\n   * @param seed seed value\n   * @see PApplet#noise(float, float, float)\n   * @see PApplet#noiseDetail(int, float)\n   * @see PApplet#random(float,float)\n   * @see PApplet#randomSeed(long)\n   */\n  public void noiseSeed(long seed) {\n    if (perlinRandom == null) perlinRandom = new Random();\n    perlinRandom.setSeed(seed);\n    // force table reset after changing the random number seed [0122]\n    perlin = null;\n  }",
    "info" : "MethodDeclaration[161215-162006]:MethodDeclaration[161215-162006]"
  }, {
    "left" : "",
    "right" : "",
    "info" : "FieldDeclaration[162085-162121]:FieldDeclaration[162085-162121]"
  }, {
    "left" : "public filename String) : PImage",
    "right" : "public filename String) : PImage",
    "info" : "MethodDeclaration[162125-164526]:MethodDeclaration[162125-164526]"
  }, {
    "left" : "/**\n   * @param extension type of image to load, for example \"png\", \"gif\", \"jpg\"\n   */\n  public PImage loadImage(String filename, String extension) { //, Object params) {\n    if (extension == null) {\n      String lower = filename.toLowerCase();\n      int dot = filename.lastIndexOf('.');\n      if (dot == -1) {\n        extension = \"unknown\";  // no extension found\n      }\n      extension = lower.substring(dot + 1);\n\n      // check for, and strip any parameters on the url, i.e.\n      // filename.jpg?blah=blah&something=that\n      int question = extension.indexOf('?');\n      if (question != -1) {\n        extension = extension.substring(0, question);\n      }\n    }\n\n    // just in case. them users will try anything!\n    extension = extension.toLowerCase();\n\n    if (extension.equals(\"tga\")) {\n      try {\n        PImage image = loadImageTGA(filename);\n//        if (params != null) {\n//          image.setParams(g, params);\n//        }\n        return image;\n      } catch (IOException e) {\n        e.printStackTrace();\n        return null;\n      }\n    }\n\n    if (extension.equals(\"tif\") || extension.equals(\"tiff\")) {\n      byte bytes[] = loadBytes(filename);\n      PImage image =  (bytes == null) ? null : PImage.loadTIFF(bytes);\n//      if (params != null) {\n//        image.setParams(g, params);\n//      }\n      return image;\n    }\n\n    // For jpeg, gif, and png, load them using createImage(),\n    // because the javax.imageio code was found to be much slower.\n    // http://dev.processing.org/bugs/show_bug.cgi?id=392\n    try {\n      if (extension.equals(\"jpg\") || extension.equals(\"jpeg\") ||\n          extension.equals(\"gif\") || extension.equals(\"png\") ||\n          extension.equals(\"unknown\")) {\n        byte bytes[] = loadBytes(filename);\n        if (bytes == null) {\n          return null;\n        } else {\n          //Image awtImage = Toolkit.getDefaultToolkit().createImage(bytes);\n          Image awtImage = new ImageIcon(bytes).getImage();\n\n          if (awtImage instanceof BufferedImage) {\n            BufferedImage buffImage = (BufferedImage) awtImage;\n            int space = buffImage.getColorModel().getColorSpace().getType();\n            if (space == ColorSpace.TYPE_CMYK) {\n              System.err.println(filename + \" is a CMYK image, \" +\n                                 \"only RGB images are supported.\");\n              return null;\n              /*\n              // wishful thinking, appears to not be supported\n              // https://community.oracle.com/thread/1272045?start=0&tstart=0\n              BufferedImage destImage =\n                new BufferedImage(buffImage.getWidth(),\n                                  buffImage.getHeight(),\n                                  BufferedImage.TYPE_3BYTE_BGR);\n              ColorConvertOp op = new ColorConvertOp(null);\n              op.filter(buffImage, destImage);\n              image = new PImage(destImage);\n              */\n            }\n          }\n\n          PImage image = new PImage(awtImage);\n          if (image.width == -1) {\n            System.err.println(\"The file \" + filename +\n                               \" contains bad image data, or may not be an image.\");\n          }\n\n          // if it's a .gif image, test to see if it has transparency\n          if (extension.equals(\"gif\") || extension.equals(\"png\")) {\n            image.checkAlpha();\n          }\n\n//          if (params != null) {\n//            image.setParams(g, params);\n//          }\n          return image;\n        }\n      }\n    } catch (Exception e) {\n      // show error, but move on to the stuff below, see if it'll work\n      e.printStackTrace();\n    }\n\n    if (loadImageFormats == null) {\n      loadImageFormats = ImageIO.getReaderFormatNames();\n    }\n    if (loadImageFormats != null) {\n      for (int i = 0; i < loadImageFormats.length; i++) {\n        if (extension.equals(loadImageFormats[i])) {\n          return loadImageIO(filename);\n//          PImage image = loadImageIO(filename);\n//          if (params != null) {\n//            image.setParams(g, params);\n//          }\n//          return image;\n        }\n      }\n    }\n\n    // failed, could not load image after all those attempts\n    System.err.println(\"Could not find a method to load \" + filename);\n    return null;\n  }",
    "right" : "/**\n   * @param extension type of image to load, for example \"png\", \"gif\", \"jpg\"\n   */\n  public PImage loadImage(String filename, String extension) { //, Object params) {\n    if (extension == null) {\n      String lower = filename.toLowerCase();\n      int dot = filename.lastIndexOf('.');\n      if (dot == -1) {\n        extension = \"unknown\";  // no extension found\n      }\n      extension = lower.substring(dot + 1);\n\n      // check for, and strip any parameters on the url, i.e.\n      // filename.jpg?blah=blah&something=that\n      int question = extension.indexOf('?');\n      if (question != -1) {\n        extension = extension.substring(0, question);\n      }\n    }\n\n    // just in case. them users will try anything!\n    extension = extension.toLowerCase();\n\n    if (extension.equals(\"tga\")) {\n      try {\n        PImage image = loadImageTGA(filename);\n//        if (params != null) {\n//          image.setParams(g, params);\n//        }\n        return image;\n      } catch (IOException e) {\n        e.printStackTrace();\n        return null;\n      }\n    }\n\n    if (extension.equals(\"tif\") || extension.equals(\"tiff\")) {\n      byte bytes[] = loadBytes(filename);\n      PImage image =  (bytes == null) ? null : PImage.loadTIFF(bytes);\n//      if (params != null) {\n//        image.setParams(g, params);\n//      }\n      return image;\n    }\n\n    // For jpeg, gif, and png, load them using createImage(),\n    // because the javax.imageio code was found to be much slower.\n    // http://dev.processing.org/bugs/show_bug.cgi?id=392\n    try {\n      if (extension.equals(\"jpg\") || extension.equals(\"jpeg\") ||\n          extension.equals(\"gif\") || extension.equals(\"png\") ||\n          extension.equals(\"unknown\")) {\n        byte bytes[] = loadBytes(filename);\n        if (bytes == null) {\n          return null;\n        } else {\n          //Image awtImage = Toolkit.getDefaultToolkit().createImage(bytes);\n          Image awtImage = new ImageIcon(bytes).getImage();\n\n          if (awtImage instanceof BufferedImage) {\n            BufferedImage buffImage = (BufferedImage) awtImage;\n            int space = buffImage.getColorModel().getColorSpace().getType();\n            if (space == ColorSpace.TYPE_CMYK) {\n              System.err.println(filename + \" is a CMYK image, \" +\n                                 \"only RGB images are supported.\");\n              return null;\n              /*\n              // wishful thinking, appears to not be supported\n              // https://community.oracle.com/thread/1272045?start=0&tstart=0\n              BufferedImage destImage =\n                new BufferedImage(buffImage.getWidth(),\n                                  buffImage.getHeight(),\n                                  BufferedImage.TYPE_3BYTE_BGR);\n              ColorConvertOp op = new ColorConvertOp(null);\n              op.filter(buffImage, destImage);\n              image = new PImage(destImage);\n              */\n            }\n          }\n\n          PImage image = new PImage(awtImage);\n          if (image.width == -1) {\n            System.err.println(\"The file \" + filename +\n                               \" contains bad image data, or may not be an image.\");\n          }\n\n          // if it's a .gif image, test to see if it has transparency\n          if (extension.equals(\"gif\") || extension.equals(\"png\")) {\n            image.checkAlpha();\n          }\n\n//          if (params != null) {\n//            image.setParams(g, params);\n//          }\n          return image;\n        }\n      }\n    } catch (Exception e) {\n      // show error, but move on to the stuff below, see if it'll work\n      e.printStackTrace();\n    }\n\n    if (loadImageFormats == null) {\n      loadImageFormats = ImageIO.getReaderFormatNames();\n    }\n    if (loadImageFormats != null) {\n      for (int i = 0; i < loadImageFormats.length; i++) {\n        if (extension.equals(loadImageFormats[i])) {\n          return loadImageIO(filename);\n//          PImage image = loadImageIO(filename);\n//          if (params != null) {\n//            image.setParams(g, params);\n//          }\n//          return image;\n        }\n      }\n    }\n\n    // failed, could not load image after all those attempts\n    System.err.println(\"Could not find a method to load \" + filename);\n    return null;\n  }",
    "info" : "MethodDeclaration[164902-169148]:MethodDeclaration[164902-169148]"
  }, {
    "left" : "public PImage requestImage(String filename) {\n//    return requestImage(filename, null, null);\n    return requestImage(filename, null);\n  }",
    "right" : "public PImage requestImage(String filename) {\n//    return requestImage(filename, null, null);\n    return requestImage(filename, null);\n  }",
    "info" : "MethodDeclaration[169153-169292]:MethodDeclaration[169153-169292]"
  }, {
    "left" : "/**\n   * ( begin auto-generated from requestImage.xml )\n   *\n   * This function load images on a separate thread so that your sketch does\n   * not freeze while images load during <b>setup()</b>. While the image is\n   * loading, its width and height will be 0. If an error occurs while\n   * loading the image, its width and height will be set to -1. You'll know\n   * when the image has loaded properly because its width and height will be\n   * greater than 0. Asynchronous image loading (particularly when\n   * downloading from a server) can dramatically improve performance.<br />\n   * <br/> <b>extension</b> parameter is used to determine the image type in\n   * cases where the image filename does not end with a proper extension.\n   * Specify the extension as the second parameter to <b>requestImage()</b>.\n   *\n   * ( end auto-generated )\n   *\n   * @webref image:loading_displaying\n   * @param filename name of the file to load, can be .gif, .jpg, .tga, or a handful of other image types depending on your platform\n   * @param extension the type of image to load, for example \"png\", \"gif\", \"jpg\"\n   * @see PImage\n   * @see PApplet#loadImage(String, String)\n   */\n  public PImage requestImage(String filename, String extension) {\n    PImage vessel = createImage(0, 0, ARGB);\n    AsyncImageLoader ail =\n      new AsyncImageLoader(filename, extension, vessel);\n    ail.start();\n    return vessel;\n  }",
    "right" : "/**\n   * ( begin auto-generated from requestImage.xml )\n   *\n   * This function load images on a separate thread so that your sketch does\n   * not freeze while images load during <b>setup()</b>. While the image is\n   * loading, its width and height will be 0. If an error occurs while\n   * loading the image, its width and height will be set to -1. You'll know\n   * when the image has loaded properly because its width and height will be\n   * greater than 0. Asynchronous image loading (particularly when\n   * downloading from a server) can dramatically improve performance.<br />\n   * <br/> <b>extension</b> parameter is used to determine the image type in\n   * cases where the image filename does not end with a proper extension.\n   * Specify the extension as the second parameter to <b>requestImage()</b>.\n   *\n   * ( end auto-generated )\n   *\n   * @webref image:loading_displaying\n   * @param filename name of the file to load, can be .gif, .jpg, .tga, or a handful of other image types depending on your platform\n   * @param extension the type of image to load, for example \"png\", \"gif\", \"jpg\"\n   * @see PImage\n   * @see PApplet#loadImage(String, String)\n   */\n  public PImage requestImage(String filename, String extension) {\n    PImage vessel = createImage(0, 0, ARGB);\n    AsyncImageLoader ail =\n      new AsyncImageLoader(filename, extension, vessel);\n    ail.start();\n    return vessel;\n  }",
    "info" : "MethodDeclaration[169297-170697]:MethodDeclaration[169297-170697]"
  }, {
    "left" : "",
    "right" : "",
    "info" : "FieldDeclaration[171009-171575]:FieldDeclaration[171009-171575]"
  }, {
    "left" : "",
    "right" : "",
    "info" : "FieldDeclaration[171578-171609]:FieldDeclaration[171578-171609]"
  }, {
    "left" : "class AsyncImageLoader extends Thread {\n    String filename;\n    String extension;\n    PImage vessel;\n\n    public AsyncImageLoader(String filename, String extension, PImage vessel) {\n      this.filename = filename;\n      this.extension = extension;\n      this.vessel = vessel;\n    }\n\n    @Override\n    public void run() {\n      while (requestImageCount == requestImageMax) {\n        try {\n          Thread.sleep(10);\n        } catch (InterruptedException e) { }\n      }\n      requestImageCount++;\n\n      PImage actual = loadImage(filename, extension);\n\n      // An error message should have already printed\n      if (actual == null) {\n        vessel.width = -1;\n        vessel.height = -1;\n\n      } else {\n        vessel.width = actual.width;\n        vessel.height = actual.height;\n        vessel.format = actual.format;\n        vessel.pixels = actual.pixels;\n\n        vessel.pixelWidth = actual.width;\n        vessel.pixelHeight = actual.height;\n        vessel.pixelDensity = 1;\n      }\n      requestImageCount--;\n    }\n  }",
    "right" : "class AsyncImageLoader extends Thread {\n    String filename;\n    String extension;\n    PImage vessel;\n\n    public AsyncImageLoader(String filename, String extension, PImage vessel) {\n      this.filename = filename;\n      this.extension = extension;\n      this.vessel = vessel;\n    }\n\n    @Override\n    public void run() {\n      while (requestImageCount == requestImageMax) {\n        try {\n          Thread.sleep(10);\n        } catch (InterruptedException e) { }\n      }\n      requestImageCount++;\n\n      PImage actual = loadImage(filename, extension);\n\n      // An error message should have already printed\n      if (actual == null) {\n        vessel.width = -1;\n        vessel.height = -1;\n\n      } else {\n        vessel.width = actual.width;\n        vessel.height = actual.height;\n        vessel.format = actual.format;\n        vessel.pixels = actual.pixels;\n\n        vessel.pixelWidth = actual.width;\n        vessel.pixelHeight = actual.height;\n        vessel.pixelDensity = 1;\n      }\n      requestImageCount--;\n    }\n  }",
    "info" : "TypeDeclaration[171613-172637]:TypeDeclaration[171613-172637]"
  }, {
    "left" : "",
    "right" : "",
    "info" : "FieldDeclaration[171657-171673]:FieldDeclaration[171657-171673]"
  }, {
    "left" : "",
    "right" : "",
    "info" : "FieldDeclaration[171678-171695]:FieldDeclaration[171678-171695]"
  }, {
    "left" : "",
    "right" : "",
    "info" : "FieldDeclaration[171700-171714]:FieldDeclaration[171700-171714]"
  }, {
    "left" : "public filename String, extension String, vessel PImage)",
    "right" : "public filename String, extension String, vessel PImage)",
    "info" : "MethodDeclaration[171720-171895]:MethodDeclaration[171720-171895]"
  }, {
    "left" : "public ) : void",
    "right" : "public ) : void",
    "info" : "MethodDeclaration[171901-172633]:MethodDeclaration[171901-172633]"
  }, {
    "left" : "/**\n   * Use Java 1.4 ImageIO methods to load an image.\n   */\n  protected PImage loadImageIO(String filename) {\n    InputStream stream = createInput(filename);\n    if (stream == null) {\n      System.err.println(\"The image \" + filename + \" could not be found.\");\n      return null;\n    }\n\n    try {\n      BufferedImage bi = ImageIO.read(stream);\n      PImage outgoing = new PImage(bi.getWidth(), bi.getHeight());\n      outgoing.parent = this;\n\n      bi.getRGB(0, 0, outgoing.width, outgoing.height,\n                outgoing.pixels, 0, outgoing.width);\n\n      // check the alpha for this image\n      // was gonna call getType() on the image to see if RGB or ARGB,\n      // but it's not actually useful, since gif images will come through\n      // as TYPE_BYTE_INDEXED, which means it'll still have to check for\n      // the transparency. also, would have to iterate through all the other\n      // types and guess whether alpha was in there, so.. just gonna stick\n      // with the old method.\n      outgoing.checkAlpha();\n\n      stream.close();\n      // return the image\n      return outgoing;\n\n    } catch (Exception e) {\n      e.printStackTrace();\n      return null;\n    }\n  }",
    "right" : "/**\n   * Use Java 1.4 ImageIO methods to load an image.\n   */\n  protected PImage loadImageIO(String filename) {\n    InputStream stream = createInput(filename);\n    if (stream == null) {\n      System.err.println(\"The image \" + filename + \" could not be found.\");\n      return null;\n    }\n\n    try {\n      BufferedImage bi = ImageIO.read(stream);\n      PImage outgoing = new PImage(bi.getWidth(), bi.getHeight());\n      outgoing.parent = this;\n\n      bi.getRGB(0, 0, outgoing.width, outgoing.height,\n                outgoing.pixels, 0, outgoing.width);\n\n      // check the alpha for this image\n      // was gonna call getType() on the image to see if RGB or ARGB,\n      // but it's not actually useful, since gif images will come through\n      // as TYPE_BYTE_INDEXED, which means it'll still have to check for\n      // the transparency. also, would have to iterate through all the other\n      // types and guess whether alpha was in there, so.. just gonna stick\n      // with the old method.\n      outgoing.checkAlpha();\n\n      stream.close();\n      // return the image\n      return outgoing;\n\n    } catch (Exception e) {\n      e.printStackTrace();\n      return null;\n    }\n  }",
    "info" : "MethodDeclaration[173207-174383]:MethodDeclaration[173207-174383]"
  }, {
    "left" : "protected filename String) : PImage",
    "right" : "protected filename String) : PImage",
    "info" : "MethodDeclaration[174388-180953]:MethodDeclaration[174388-180953]"
  }, {
    "left" : "public filename String) : XML",
    "right" : "public filename String) : XML",
    "info" : "MethodDeclaration[181551-181928]:MethodDeclaration[181551-181928]"
  }, {
    "left" : "public filename String, options String...) : XML",
    "right" : "public filename String, options String...) : XML",
    "info" : "MethodDeclaration[182014-182518]:MethodDeclaration[182014-182518]"
  }, {
    "left" : "/**\n   * @webref input:files\n   * @brief Converts String content to an XML object\n   * @param data the content to be parsed as XML\n   * @return an XML object, or null\n   * @see XML\n   * @see PApplet#loadXML(String)\n   * @see PApplet#saveXML(XML, String)\n   */\n  public XML parseXML(String xmlString) {\n    return parseXML(xmlString, null);\n  }",
    "right" : "/**\n   * @webref input:files\n   * @brief Converts String content to an XML object\n   * @param data the content to be parsed as XML\n   * @return an XML object, or null\n   * @see XML\n   * @see PApplet#loadXML(String)\n   * @see PApplet#saveXML(XML, String)\n   */\n  public XML parseXML(String xmlString) {\n    return parseXML(xmlString, null);\n  }",
    "info" : "MethodDeclaration[182523-182866]:MethodDeclaration[182523-182866]"
  }, {
    "left" : "public xmlString String, options String...) : XML",
    "right" : "public xmlString String, options String...) : XML",
    "info" : "MethodDeclaration[182871-183056]:MethodDeclaration[182871-183056]"
  }, {
    "left" : "public xml XML, filename String) : boolean",
    "right" : "public xml XML, filename String) : boolean",
    "info" : "MethodDeclaration[183061-183374]:MethodDeclaration[183061-183374]"
  }, {
    "left" : "public boolean saveXML(XML xml, String filename, String options) {\n    return xml.save(saveFile(filename), options);\n  }",
    "right" : "public boolean saveXML(XML xml, String filename, String options) {\n    return xml.save(saveFile(filename), options);\n  }",
    "info" : "MethodDeclaration[183379-183499]:MethodDeclaration[183379-183499]"
  }, {
    "left" : "public JSONObject parseJSONObject(String input) {\n    return new JSONObject(new StringReader(input));\n  }",
    "right" : "public JSONObject parseJSONObject(String input) {\n    return new JSONObject(new StringReader(input));\n  }",
    "info" : "MethodDeclaration[183504-183609]:MethodDeclaration[183504-183609]"
  }, {
    "left" : "public filename String) : JSONObject",
    "right" : "public filename String) : JSONObject",
    "info" : "MethodDeclaration[183614-184006]:MethodDeclaration[183614-184006]"
  }, {
    "left" : "static public JSONObject loadJSONObject(File file) {\n    return new JSONObject(createReader(file));\n  }",
    "right" : "static public JSONObject loadJSONObject(File file) {\n    return new JSONObject(createReader(file));\n  }",
    "info" : "MethodDeclaration[184011-184114]:MethodDeclaration[184011-184114]"
  }, {
    "left" : "public json JSONObject, filename String) : boolean",
    "right" : "public json JSONObject, filename String) : boolean",
    "info" : "MethodDeclaration[184119-184448]:MethodDeclaration[184119-184448]"
  }, {
    "left" : "public json JSONObject, filename String, options String...) : boolean",
    "right" : "public json JSONObject, filename String, options String...) : boolean",
    "info" : "MethodDeclaration[184453-184589]:MethodDeclaration[184453-184589]"
  }, {
    "left" : "public JSONArray parseJSONArray(String input) {\n    return new JSONArray(new StringReader(input));\n  }",
    "right" : "public JSONArray parseJSONArray(String input) {\n    return new JSONArray(new StringReader(input));\n  }",
    "info" : "MethodDeclaration[184594-184696]:MethodDeclaration[184594-184696]"
  }, {
    "left" : "public filename String) : JSONArray",
    "right" : "public filename String) : JSONArray",
    "info" : "MethodDeclaration[184701-185091]:MethodDeclaration[184701-185091]"
  }, {
    "left" : "static public JSONArray loadJSONArray(File file) {\n    return new JSONArray(createReader(file));\n  }",
    "right" : "static public JSONArray loadJSONArray(File file) {\n    return new JSONArray(createReader(file));\n  }",
    "info" : "MethodDeclaration[185096-185196]:MethodDeclaration[185096-185196]"
  }, {
    "left" : "public json JSONArray, filename String) : boolean",
    "right" : "public json JSONArray, filename String) : boolean",
    "info" : "MethodDeclaration[185201-185529]:MethodDeclaration[185201-185529]"
  }, {
    "left" : "public json JSONArray, filename String, options String...) : boolean",
    "right" : "public json JSONArray, filename String, options String...) : boolean",
    "info" : "MethodDeclaration[185534-185668]:MethodDeclaration[185534-185668]"
  }, {
    "left" : "public filename String) : Table",
    "right" : "public filename String) : Table",
    "info" : "MethodDeclaration[185885-186237]:MethodDeclaration[185885-186237]"
  }, {
    "left" : "public filename String, options String...) : Table",
    "right" : "public filename String, options String...) : Table",
    "info" : "MethodDeclaration[186242-187585]:MethodDeclaration[186242-187585]"
  }, {
    "left" : "public table Table, filename String) : boolean",
    "right" : "public table Table, filename String) : boolean",
    "info" : "MethodDeclaration[187590-187907]:MethodDeclaration[187590-187907]"
  }, {
    "left" : "/**\n   * @param options can be one of \"tsv\", \"csv\", \"bin\", or \"html\"\n   */\n  public boolean saveTable(Table table, String filename, String options) {\n//    String ext = checkExtension(filename);\n//    if (ext != null) {\n//      if (ext.equals(\"csv\") || ext.equals(\"tsv\") || ext.equals(\"bin\") || ext.equals(\"html\")) {\n//        if (options == null) {\n//          options = ext;\n//        } else {\n//          options = ext + \",\" + options;\n//        }\n//      }\n//    }\n\n    try {\n      // Figure out location and make sure the target path exists\n      File outputFile = saveFile(filename);\n      // Open a stream and take care of .gz if necessary\n      return table.save(outputFile, options);\n\n    } catch (IOException e) {\n      e.printStackTrace();\n      return false;\n    }\n  }",
    "right" : "/**\n   * @param options can be one of \"tsv\", \"csv\", \"bin\", or \"html\"\n   */\n  public boolean saveTable(Table table, String filename, String options) {\n//    String ext = checkExtension(filename);\n//    if (ext != null) {\n//      if (ext.equals(\"csv\") || ext.equals(\"tsv\") || ext.equals(\"bin\") || ext.equals(\"html\")) {\n//        if (options == null) {\n//          options = ext;\n//        } else {\n//          options = ext + \",\" + options;\n//        }\n//      }\n//    }\n\n    try {\n      // Figure out location and make sure the target path exists\n      File outputFile = saveFile(filename);\n      // Open a stream and take care of .gz if necessary\n      return table.save(outputFile, options);\n\n    } catch (IOException e) {\n      e.printStackTrace();\n      return false;\n    }\n  }",
    "info" : "MethodDeclaration[187912-188692]:MethodDeclaration[187912-188692]"
  }, {
    "left" : "/**\n   * ( begin auto-generated from loadFont.xml )\n   *\n   * Loads a font into a variable of type <b>PFont</b>. To load correctly,\n   * fonts must be located in the data directory of the current sketch. To\n   * create a font to use with Processing, select \"Create Font...\" from the\n   * Tools menu. This will create a font in the format Processing requires\n   * and also adds it to the current sketch's data directory.<br />\n   * <br />\n   * Like <b>loadImage()</b> and other functions that load data, the\n   * <b>loadFont()</b> function should not be used inside <b>draw()</b>,\n   * because it will slow down the sketch considerably, as the font will be\n   * re-loaded from the disk (or network) on each frame.<br />\n   * <br />\n   * For most renderers, Processing displays fonts using the .vlw font\n   * format, which uses images for each letter, rather than defining them\n   * through vector data. When <b>hint(ENABLE_NATIVE_FONTS)</b> is used with\n   * the JAVA2D renderer, the native version of a font will be used if it is\n   * installed on the user's machine.<br />\n   * <br />\n   * Using <b>createFont()</b> (instead of loadFont) enables vector data to\n   * be used with the JAVA2D (default) renderer setting. This can be helpful\n   * when many font sizes are needed, or when using any renderer based on\n   * JAVA2D, such as the PDF library.\n   *\n   * ( end auto-generated )\n  * @webref typography:loading_displaying\n  * @param filename name of the font to load\n  * @see PFont\n  * @see PGraphics#textFont(PFont, float)\n  * @see PApplet#createFont(String, float, boolean, char[])\n  */\n  public PFont loadFont(String filename) {\n    if (!filename.toLowerCase().endsWith(\".vlw\")) {\n      throw new IllegalArgumentException(\"loadFont() is for .vlw files, try createFont()\");\n    }\n    try {\n      InputStream input = createInput(filename);\n      return new PFont(input);\n\n    } catch (Exception e) {\n      die(\"Could not load font \" + filename + \". \" +\n          \"Make sure that the font has been copied \" +\n          \"to the data folder of your sketch.\", e);\n    }\n    return null;\n  }",
    "right" : "/**\n   * ( begin auto-generated from loadFont.xml )\n   *\n   * Loads a font into a variable of type <b>PFont</b>. To load correctly,\n   * fonts must be located in the data directory of the current sketch. To\n   * create a font to use with Processing, select \"Create Font...\" from the\n   * Tools menu. This will create a font in the format Processing requires\n   * and also adds it to the current sketch's data directory.<br />\n   * <br />\n   * Like <b>loadImage()</b> and other functions that load data, the\n   * <b>loadFont()</b> function should not be used inside <b>draw()</b>,\n   * because it will slow down the sketch considerably, as the font will be\n   * re-loaded from the disk (or network) on each frame.<br />\n   * <br />\n   * For most renderers, Processing displays fonts using the .vlw font\n   * format, which uses images for each letter, rather than defining them\n   * through vector data. When <b>hint(ENABLE_NATIVE_FONTS)</b> is used with\n   * the JAVA2D renderer, the native version of a font will be used if it is\n   * installed on the user's machine.<br />\n   * <br />\n   * Using <b>createFont()</b> (instead of loadFont) enables vector data to\n   * be used with the JAVA2D (default) renderer setting. This can be helpful\n   * when many font sizes are needed, or when using any renderer based on\n   * JAVA2D, such as the PDF library.\n   *\n   * ( end auto-generated )\n  * @webref typography:loading_displaying\n  * @param filename name of the font to load\n  * @see PFont\n  * @see PGraphics#textFont(PFont, float)\n  * @see PApplet#createFont(String, float, boolean, char[])\n  */\n  public PFont loadFont(String filename) {\n    if (!filename.toLowerCase().endsWith(\".vlw\")) {\n      throw new IllegalArgumentException(\"loadFont() is for .vlw files, try createFont()\");\n    }\n    try {\n      InputStream input = createInput(filename);\n      return new PFont(input);\n\n    } catch (Exception e) {\n      die(\"Could not load font \" + filename + \". \" +\n          \"Make sure that the font has been copied \" +\n          \"to the data folder of your sketch.\", e);\n    }\n    return null;\n  }",
    "info" : "MethodDeclaration[188779-190870]:MethodDeclaration[188779-190870]"
  }, {
    "left" : "protected size float) : PFont",
    "right" : "protected size float) : PFont",
    "info" : "MethodDeclaration[190875-191233]:MethodDeclaration[190875-191233]"
  }, {
    "left" : "public name String, size float) : PFont",
    "right" : "public name String, size float) : PFont",
    "info" : "MethodDeclaration[191238-191339]:MethodDeclaration[191238-191339]"
  }, {
    "left" : "public name String, size float, smooth boolean) : PFont",
    "right" : "public name String, size float, smooth boolean) : PFont",
    "info" : "MethodDeclaration[191344-191463]:MethodDeclaration[191344-191463]"
  }, {
    "left" : "public name String, size float, smooth boolean, charset ) : PFont",
    "right" : "public name String, size float, smooth boolean, charset ) : PFont",
    "info" : "MethodDeclaration[191468-195232]:MethodDeclaration[191468-195232]"
  }, {
    "left" : "/**\n   * Open a platform-specific file chooser dialog to select a file for input.\n   * After the selection is made, the selected File will be passed to the\n   * 'callback' function. If the dialog is closed or canceled, null will be\n   * sent to the function, so that the program is not waiting for additional\n   * input. The callback is necessary because of how threading works.\n   *\n   * <pre>\n   * void setup() {\n   *   selectInput(\"Select a file to process:\", \"fileSelected\");\n   * }\n   *\n   * void fileSelected(File selection) {\n   *   if (selection == null) {\n   *     println(\"Window was closed or the user hit cancel.\");\n   *   } else {\n   *     println(\"User selected \" + fileSeleted.getAbsolutePath());\n   *   }\n   * }\n   * </pre>\n   *\n   * For advanced users, the method must be 'public', which is true for all\n   * methods inside a sketch when run from the PDE, but must explicitly be\n   * set when using Eclipse or other development environments.\n   *\n   * @webref input:files\n   * @param prompt message to the user\n   * @param callback name of the method to be called when the selection is made\n   */\n  public void selectInput(String prompt, String callback) {\n    selectInput(prompt, callback, null);\n  }",
    "right" : "/**\n   * Open a platform-specific file chooser dialog to select a file for input.\n   * After the selection is made, the selected File will be passed to the\n   * 'callback' function. If the dialog is closed or canceled, null will be\n   * sent to the function, so that the program is not waiting for additional\n   * input. The callback is necessary because of how threading works.\n   *\n   * <pre>\n   * void setup() {\n   *   selectInput(\"Select a file to process:\", \"fileSelected\");\n   * }\n   *\n   * void fileSelected(File selection) {\n   *   if (selection == null) {\n   *     println(\"Window was closed or the user hit cancel.\");\n   *   } else {\n   *     println(\"User selected \" + fileSeleted.getAbsolutePath());\n   *   }\n   * }\n   * </pre>\n   *\n   * For advanced users, the method must be 'public', which is true for all\n   * methods inside a sketch when run from the PDE, but must explicitly be\n   * set when using Eclipse or other development environments.\n   *\n   * @webref input:files\n   * @param prompt message to the user\n   * @param callback name of the method to be called when the selection is made\n   */\n  public void selectInput(String prompt, String callback) {\n    selectInput(prompt, callback, null);\n  }",
    "info" : "MethodDeclaration[195849-197067]:MethodDeclaration[195849-197067]"
  }, {
    "left" : "public void selectInput(String prompt, String callback, File file) {\n    selectInput(prompt, callback, file, this);\n  }",
    "right" : "public void selectInput(String prompt, String callback, File file) {\n    selectInput(prompt, callback, file, this);\n  }",
    "info" : "MethodDeclaration[197072-197191]:MethodDeclaration[197072-197191]"
  }, {
    "left" : "public prompt String, callback String, file File, callbackObject Object) : void",
    "right" : "public prompt String, callback String, file File, callbackObject Object) : void",
    "info" : "MethodDeclaration[197196-197399]:MethodDeclaration[197196-197399]"
  }, {
    "left" : "public prompt String, callbackMethod String, file File, callbackObject Object, parent Frame) : void",
    "right" : "public prompt String, callbackMethod String, file File, callbackObject Object, parent Frame) : void",
    "info" : "MethodDeclaration[197404-197646]:MethodDeclaration[197404-197646]"
  }, {
    "left" : "public prompt String, callback String) : void",
    "right" : "public prompt String, callback String) : void",
    "info" : "MethodDeclaration[197651-197953]:MethodDeclaration[197651-197953]"
  }, {
    "left" : "public prompt String, callback String, file File) : void",
    "right" : "public prompt String, callback String, file File) : void",
    "info" : "MethodDeclaration[197957-198078]:MethodDeclaration[197957-198078]"
  }, {
    "left" : "public prompt String, callback String, file File, callbackObject Object) : void",
    "right" : "public prompt String, callback String, file File, callbackObject Object) : void",
    "info" : "MethodDeclaration[198083-198288]:MethodDeclaration[198083-198288]"
  }, {
    "left" : "public prompt String, callbackMethod String, file File, callbackObject Object, parent Frame) : void",
    "right" : "public prompt String, callbackMethod String, file File, callbackObject Object, parent Frame) : void",
    "info" : "MethodDeclaration[198293-198537]:MethodDeclaration[198293-198537]"
  }, {
    "left" : "static protected void selectImpl(final String prompt,\n                                   final String callbackMethod,\n                                   final File defaultSelection,\n                                   final Object callbackObject,\n                                   final Frame parentFrame,\n                                   final int mode) {\n    EventQueue.invokeLater(new Runnable() {\n      public void run() {\n        File selectedFile = null;\n\n        if (useNativeSelect) {\n          FileDialog dialog = new FileDialog(parentFrame, prompt, mode);\n          if (defaultSelection != null) {\n            dialog.setDirectory(defaultSelection.getParent());\n            dialog.setFile(defaultSelection.getName());\n          }\n          dialog.setVisible(true);\n          String directory = dialog.getDirectory();\n          String filename = dialog.getFile();\n          if (filename != null) {\n            selectedFile = new File(directory, filename);\n          }\n\n        } else {\n          JFileChooser chooser = new JFileChooser();\n          chooser.setDialogTitle(prompt);\n          if (defaultSelection != null) {\n            chooser.setSelectedFile(defaultSelection);\n          }\n\n          int result = -1;\n          if (mode == FileDialog.SAVE) {\n            result = chooser.showSaveDialog(parentFrame);\n          } else if (mode == FileDialog.LOAD) {\n            result = chooser.showOpenDialog(parentFrame);\n          }\n          if (result == JFileChooser.APPROVE_OPTION) {\n            selectedFile = chooser.getSelectedFile();\n          }\n        }\n        selectCallback(selectedFile, callbackMethod, callbackObject);\n      }\n    });\n  }",
    "right" : "static protected void selectImpl(final String prompt,\n                                   final String callbackMethod,\n                                   final File defaultSelection,\n                                   final Object callbackObject,\n                                   final Frame parentFrame,\n                                   final int mode) {\n    EventQueue.invokeLater(new Runnable() {\n      public void run() {\n        File selectedFile = null;\n\n        if (useNativeSelect) {\n          FileDialog dialog = new FileDialog(parentFrame, prompt, mode);\n          if (defaultSelection != null) {\n            dialog.setDirectory(defaultSelection.getParent());\n            dialog.setFile(defaultSelection.getName());\n          }\n          dialog.setVisible(true);\n          String directory = dialog.getDirectory();\n          String filename = dialog.getFile();\n          if (filename != null) {\n            selectedFile = new File(directory, filename);\n          }\n\n        } else {\n          JFileChooser chooser = new JFileChooser();\n          chooser.setDialogTitle(prompt);\n          if (defaultSelection != null) {\n            chooser.setSelectedFile(defaultSelection);\n          }\n\n          int result = -1;\n          if (mode == FileDialog.SAVE) {\n            result = chooser.showSaveDialog(parentFrame);\n          } else if (mode == FileDialog.LOAD) {\n            result = chooser.showOpenDialog(parentFrame);\n          }\n          if (result == JFileChooser.APPROVE_OPTION) {\n            selectedFile = chooser.getSelectedFile();\n          }\n        }\n        selectCallback(selectedFile, callbackMethod, callbackObject);\n      }\n    });\n  }",
    "info" : "MethodDeclaration[198542-200207]:MethodDeclaration[198542-200207]"
  }, {
    "left" : "public ) : void",
    "right" : "public ) : void",
    "info" : "MethodDeclaration[198951-200195]:MethodDeclaration[198951-200195]"
  }, {
    "left" : "public prompt String, callback String) : void",
    "right" : "public prompt String, callback String) : void",
    "info" : "MethodDeclaration[200212-200513]:MethodDeclaration[200212-200513]"
  }, {
    "left" : "public void selectFolder(String prompt, String callback, File file) {\n    selectFolder(prompt, callback, file, this);\n  }",
    "right" : "public void selectFolder(String prompt, String callback, File file) {\n    selectFolder(prompt, callback, file, this);\n  }",
    "info" : "MethodDeclaration[200518-200639]:MethodDeclaration[200518-200639]"
  }, {
    "left" : "public void selectFolder(String prompt, String callback,\n                           File file, Object callbackObject) {\n    selectFolder(prompt, callback, file, callbackObject, null); //selectFrame());\n  }",
    "right" : "public void selectFolder(String prompt, String callback,\n                           File file, Object callbackObject) {\n    selectFolder(prompt, callback, file, callbackObject, null); //selectFrame());\n  }",
    "info" : "MethodDeclaration[200644-200849]:MethodDeclaration[200644-200849]"
  }, {
    "left" : "public prompt String, callbackMethod String, defaultSelection File, callbackObject Object, parentFrame Frame) : void",
    "right" : "public prompt String, callbackMethod String, defaultSelection File, callbackObject Object, parentFrame Frame) : void",
    "info" : "MethodDeclaration[200854-202395]:MethodDeclaration[200854-202395]"
  }, {
    "left" : "public ) : void",
    "right" : "public ) : void",
    "info" : "MethodDeclaration[201207-202383]:MethodDeclaration[201207-202383]"
  }, {
    "left" : "private selectedFile File, callbackMethod String, callbackObject Object) : void",
    "right" : "private selectedFile File, callbackMethod String, callbackObject Object) : void",
    "info" : "MethodDeclaration[202400-203128]:MethodDeclaration[202400-203128]"
  }, {
    "left" : "public filename String) : String",
    "right" : "public filename String) : String",
    "info" : "MethodDeclaration[203218-203850]:MethodDeclaration[203218-203850]"
  }, {
    "left" : "public filename String) : BufferedReader",
    "right" : "public filename String) : BufferedReader",
    "info" : "MethodDeclaration[203949-204943]:MethodDeclaration[203949-204943]"
  }, {
    "left" : "public file File) : BufferedReader",
    "right" : "public file File) : BufferedReader",
    "info" : "MethodDeclaration[204948-205373]:MethodDeclaration[204948-205373]"
  }, {
    "left" : "/**\n   * @nowebref\n   * I want to read lines from a stream. If I have to type the\n   * following lines any more I'm gonna send Sun my medical bills.\n   */\n  static public BufferedReader createReader(InputStream input) {\n    InputStreamReader isr = null;\n    try {\n      isr = new InputStreamReader(input, \"UTF-8\");\n    } catch (UnsupportedEncodingException e) { }  // not gonna happen\n    return new BufferedReader(isr);\n  }",
    "right" : "/**\n   * @nowebref\n   * I want to read lines from a stream. If I have to type the\n   * following lines any more I'm gonna send Sun my medical bills.\n   */\n  static public BufferedReader createReader(InputStream input) {\n    InputStreamReader isr = null;\n    try {\n      isr = new InputStreamReader(input, \"UTF-8\");\n    } catch (UnsupportedEncodingException e) { }  // not gonna happen\n    return new BufferedReader(isr);\n  }",
    "info" : "MethodDeclaration[205378-205802]:MethodDeclaration[205378-205802]"
  }, {
    "left" : "public filename String) : PrintWriter",
    "right" : "public filename String) : PrintWriter",
    "info" : "MethodDeclaration[205807-206704]:MethodDeclaration[205807-206704]"
  }, {
    "left" : "/**\n   * @nowebref\n   * I want to print lines to a file. I have RSI from typing these\n   * eight lines of code so many times.\n   */\n  static public PrintWriter createWriter(File file) {\n    if (file == null) {\n      throw new RuntimeException(\"File passed to createWriter() was null\");\n    }\n    try {\n      createPath(file);  // make sure in-between folders exist\n      OutputStream output = new FileOutputStream(file);\n      if (file.getName().toLowerCase().endsWith(\".gz\")) {\n        output = new GZIPOutputStream(output);\n      }\n      return createWriter(output);\n\n    } catch (Exception e) {\n      throw new RuntimeException(\"Couldn't create a writer for \" +\n                                 file.getAbsolutePath(), e);\n    }\n  }",
    "right" : "/**\n   * @nowebref\n   * I want to print lines to a file. I have RSI from typing these\n   * eight lines of code so many times.\n   */\n  static public PrintWriter createWriter(File file) {\n    if (file == null) {\n      throw new RuntimeException(\"File passed to createWriter() was null\");\n    }\n    try {\n      createPath(file);  // make sure in-between folders exist\n      OutputStream output = new FileOutputStream(file);\n      if (file.getName().toLowerCase().endsWith(\".gz\")) {\n        output = new GZIPOutputStream(output);\n      }\n      return createWriter(output);\n\n    } catch (Exception e) {\n      throw new RuntimeException(\"Couldn't create a writer for \" +\n                                 file.getAbsolutePath(), e);\n    }\n  }",
    "info" : "MethodDeclaration[206709-207444]:MethodDeclaration[206709-207444]"
  }, {
    "left" : "/**\n   * @nowebref\n   * I want to print lines to a file. Why am I always explaining myself?\n   * It's the JavaSoft API engineers who need to explain themselves.\n   */\n  static public PrintWriter createWriter(OutputStream output) {\n    try {\n      BufferedOutputStream bos = new BufferedOutputStream(output, 8192);\n      OutputStreamWriter osw = new OutputStreamWriter(bos, \"UTF-8\");\n      return new PrintWriter(osw);\n    } catch (UnsupportedEncodingException e) { }  // not gonna happen\n    return null;\n  }",
    "right" : "/**\n   * @nowebref\n   * I want to print lines to a file. Why am I always explaining myself?\n   * It's the JavaSoft API engineers who need to explain themselves.\n   */\n  static public PrintWriter createWriter(OutputStream output) {\n    try {\n      BufferedOutputStream bos = new BufferedOutputStream(output, 8192);\n      OutputStreamWriter osw = new OutputStreamWriter(bos, \"UTF-8\");\n      return new PrintWriter(osw);\n    } catch (UnsupportedEncodingException e) { }  // not gonna happen\n    return null;\n  }",
    "info" : "MethodDeclaration[207448-207956]:MethodDeclaration[207448-207956]"
  }, {
    "left" : "/**\n   * ( begin auto-generated from createInput.xml )\n   *\n   * This is a function for advanced programmers to open a Java InputStream.\n   * It's useful if you want to use the facilities provided by PApplet to\n   * easily open files from the data folder or from a URL, but want an\n   * InputStream object so that you can use other parts of Java to take more\n   * control of how the stream is read.<br />\n   * <br />\n   * The filename passed in can be:<br />\n   * - A URL, for instance <b>openStream(\"http://processing.org/\")</b><br />\n   * - A file in the sketch's <b>data</b> folder<br />\n   * - The full path to a file to be opened locally (when running as an\n   * application)<br />\n   * <br />\n   * If the requested item doesn't exist, null is returned. If not online,\n   * this will also check to see if the user is asking for a file whose name\n   * isn't properly capitalized. If capitalization is different, an error\n   * will be printed to the console. This helps prevent issues that appear\n   * when a sketch is exported to the web, where case sensitivity matters, as\n   * opposed to running from inside the Processing Development Environment on\n   * Windows or Mac OS, where case sensitivity is preserved but ignored.<br />\n   * <br />\n   * If the file ends with <b>.gz</b>, the stream will automatically be gzip\n   * decompressed. If you don't want the automatic decompression, use the\n   * related function <b>createInputRaw()</b>.\n   * <br />\n   * In earlier releases, this function was called <b>openStream()</b>.<br />\n   * <br />\n   *\n   * ( end auto-generated )\n   *\n   * <h3>Advanced</h3>\n   * Simplified method to open a Java InputStream.\n   * <p>\n   * This method is useful if you want to use the facilities provided\n   * by PApplet to easily open things from the data folder or from a URL,\n   * but want an InputStream object so that you can use other Java\n   * methods to take more control of how the stream is read.\n   * <p>\n   * If the requested item doesn't exist, null is returned.\n   * (Prior to 0096, die() would be called, killing the applet)\n   * <p>\n   * For 0096+, the \"data\" folder is exported intact with subfolders,\n   * and openStream() properly handles subdirectories from the data folder\n   * <p>\n   * If not online, this will also check to see if the user is asking\n   * for a file whose name isn't properly capitalized. This helps prevent\n   * issues when a sketch is exported to the web, where case sensitivity\n   * matters, as opposed to Windows and the Mac OS default where\n   * case sensitivity is preserved but ignored.\n   * <p>\n   * It is strongly recommended that libraries use this method to open\n   * data files, so that the loading sequence is handled in the same way\n   * as functions like loadBytes(), loadImage(), etc.\n   * <p>\n   * The filename passed in can be:\n   * <UL>\n   * <LI>A URL, for instance openStream(\"http://processing.org/\");\n   * <LI>A file in the sketch's data folder\n   * <LI>Another file to be opened locally (when running as an application)\n   * </UL>\n   *\n   * @webref input:files\n   * @param filename the name of the file to use as input\n   * @see PApplet#createOutput(String)\n   * @see PApplet#selectOutput(String)\n   * @see PApplet#selectInput(String)\n   *\n   */\n  public InputStream createInput(String filename) {\n    InputStream input = createInputRaw(filename);\n    final String lower = filename.toLowerCase();\n    if ((input != null) &&\n        (lower.endsWith(\".gz\") || lower.endsWith(\".svgz\"))) {\n      try {\n        return new GZIPInputStream(input);\n      } catch (IOException e) {\n        e.printStackTrace();\n        return null;\n      }\n    }\n    return input;\n  }",
    "right" : "/**\n   * ( begin auto-generated from createInput.xml )\n   *\n   * This is a function for advanced programmers to open a Java InputStream.\n   * It's useful if you want to use the facilities provided by PApplet to\n   * easily open files from the data folder or from a URL, but want an\n   * InputStream object so that you can use other parts of Java to take more\n   * control of how the stream is read.<br />\n   * <br />\n   * The filename passed in can be:<br />\n   * - A URL, for instance <b>openStream(\"http://processing.org/\")</b><br />\n   * - A file in the sketch's <b>data</b> folder<br />\n   * - The full path to a file to be opened locally (when running as an\n   * application)<br />\n   * <br />\n   * If the requested item doesn't exist, null is returned. If not online,\n   * this will also check to see if the user is asking for a file whose name\n   * isn't properly capitalized. If capitalization is different, an error\n   * will be printed to the console. This helps prevent issues that appear\n   * when a sketch is exported to the web, where case sensitivity matters, as\n   * opposed to running from inside the Processing Development Environment on\n   * Windows or Mac OS, where case sensitivity is preserved but ignored.<br />\n   * <br />\n   * If the file ends with <b>.gz</b>, the stream will automatically be gzip\n   * decompressed. If you don't want the automatic decompression, use the\n   * related function <b>createInputRaw()</b>.\n   * <br />\n   * In earlier releases, this function was called <b>openStream()</b>.<br />\n   * <br />\n   *\n   * ( end auto-generated )\n   *\n   * <h3>Advanced</h3>\n   * Simplified method to open a Java InputStream.\n   * <p>\n   * This method is useful if you want to use the facilities provided\n   * by PApplet to easily open things from the data folder or from a URL,\n   * but want an InputStream object so that you can use other Java\n   * methods to take more control of how the stream is read.\n   * <p>\n   * If the requested item doesn't exist, null is returned.\n   * (Prior to 0096, die() would be called, killing the applet)\n   * <p>\n   * For 0096+, the \"data\" folder is exported intact with subfolders,\n   * and openStream() properly handles subdirectories from the data folder\n   * <p>\n   * If not online, this will also check to see if the user is asking\n   * for a file whose name isn't properly capitalized. This helps prevent\n   * issues when a sketch is exported to the web, where case sensitivity\n   * matters, as opposed to Windows and the Mac OS default where\n   * case sensitivity is preserved but ignored.\n   * <p>\n   * It is strongly recommended that libraries use this method to open\n   * data files, so that the loading sequence is handled in the same way\n   * as functions like loadBytes(), loadImage(), etc.\n   * <p>\n   * The filename passed in can be:\n   * <UL>\n   * <LI>A URL, for instance openStream(\"http://processing.org/\");\n   * <LI>A file in the sketch's data folder\n   * <LI>Another file to be opened locally (when running as an application)\n   * </UL>\n   *\n   * @webref input:files\n   * @param filename the name of the file to use as input\n   * @see PApplet#createOutput(String)\n   * @see PApplet#selectOutput(String)\n   * @see PApplet#selectInput(String)\n   *\n   */\n  public InputStream createInput(String filename) {\n    InputStream input = createInputRaw(filename);\n    final String lower = filename.toLowerCase();\n    if ((input != null) &&\n        (lower.endsWith(\".gz\") || lower.endsWith(\".svgz\"))) {\n      try {\n        return new GZIPInputStream(input);\n      } catch (IOException e) {\n        e.printStackTrace();\n        return null;\n      }\n    }\n    return input;\n  }",
    "info" : "MethodDeclaration[208247-211900]:MethodDeclaration[208247-211900]"
  }, {
    "left" : "/**\n   * Call openStream() without automatic gzip decompression.\n   */\n  public InputStream createInputRaw(String filename) {\n    if (filename == null) return null;\n\n    if (filename.length() == 0) {\n      // an error will be called by the parent function\n      //System.err.println(\"The filename passed to openStream() was empty.\");\n      return null;\n    }\n\n    // First check whether this looks like a URL. This will prevent online\n    // access logs from being spammed with GET /sketchfolder/http://blahblah\n    if (filename.contains(\":\")) {  // at least smells like URL\n      try {\n        URL url = new URL(filename);\n        URLConnection conn = url.openConnection();\n        HttpURLConnection httpConn = (HttpURLConnection) conn;\n        // Will not handle a protocol change (see below)\n        httpConn.setInstanceFollowRedirects(true);\n        int response = httpConn.getResponseCode();\n        // Normally will not follow HTTPS redirects from HTTP due to security concerns\n        // http://stackoverflow.com/questions/1884230/java-doesnt-follow-redirect-in-urlconnection/1884427\n        if (response >= 300 && response < 400) {\n          String newLocation = httpConn.getHeaderField(\"Location\");\n          return createInputRaw(newLocation);\n        }\n        return conn.getInputStream();\n\n      } catch (MalformedURLException mfue) {\n        // not a url, that's fine\n\n      } catch (FileNotFoundException fnfe) {\n        // Added in 0119 b/c Java 1.5 throws FNFE when URL not available.\n        // http://dev.processing.org/bugs/show_bug.cgi?id=403\n\n      } catch (IOException e) {\n        // changed for 0117, shouldn't be throwing exception\n        e.printStackTrace();\n        //System.err.println(\"Error downloading from URL \" + filename);\n        return null;\n        //throw new RuntimeException(\"Error downloading from URL \" + filename);\n      }\n    }\n\n    InputStream stream = null;\n\n    // Moved this earlier than the getResourceAsStream() checks, because\n    // calling getResourceAsStream() on a directory lists its contents.\n    // http://dev.processing.org/bugs/show_bug.cgi?id=716\n    try {\n      // First see if it's in a data folder. This may fail by throwing\n      // a SecurityException. If so, this whole block will be skipped.\n      File file = new File(dataPath(filename));\n      if (!file.exists()) {\n        // next see if it's just in the sketch folder\n        file = sketchFile(filename);\n      }\n\n      if (file.isDirectory()) {\n        return null;\n      }\n      if (file.exists()) {\n        try {\n          // handle case sensitivity check\n          String filePath = file.getCanonicalPath();\n          String filenameActual = new File(filePath).getName();\n          // make sure there isn't a subfolder prepended to the name\n          String filenameShort = new File(filename).getName();\n          // if the actual filename is the same, but capitalized\n          // differently, warn the user.\n          //if (filenameActual.equalsIgnoreCase(filenameShort) &&\n          //!filenameActual.equals(filenameShort)) {\n          if (!filenameActual.equals(filenameShort)) {\n            throw new RuntimeException(\"This file is named \" +\n                                       filenameActual + \" not \" +\n                                       filename + \". Rename the file \" +\n                                       \"or change your code.\");\n          }\n        } catch (IOException e) { }\n      }\n\n      // if this file is ok, may as well just load it\n      stream = new FileInputStream(file);\n      if (stream != null) return stream;\n\n      // have to break these out because a general Exception might\n      // catch the RuntimeException being thrown above\n    } catch (IOException ioe) {\n    } catch (SecurityException se) { }\n\n    // Using getClassLoader() prevents java from converting dots\n    // to slashes or requiring a slash at the beginning.\n    // (a slash as a prefix means that it'll load from the root of\n    // the jar, rather than trying to dig into the package location)\n    ClassLoader cl = getClass().getClassLoader();\n\n    // by default, data files are exported to the root path of the jar.\n    // (not the data folder) so check there first.\n    stream = cl.getResourceAsStream(\"data/\" + filename);\n    if (stream != null) {\n      String cn = stream.getClass().getName();\n      // this is an irritation of sun's java plug-in, which will return\n      // a non-null stream for an object that doesn't exist. like all good\n      // things, this is probably introduced in java 1.5. awesome!\n      // http://dev.processing.org/bugs/show_bug.cgi?id=359\n      if (!cn.equals(\"sun.plugin.cache.EmptyInputStream\")) {\n        return stream;\n      }\n    }\n\n    // When used with an online script, also need to check without the\n    // data folder, in case it's not in a subfolder called 'data'.\n    // http://dev.processing.org/bugs/show_bug.cgi?id=389\n    stream = cl.getResourceAsStream(filename);\n    if (stream != null) {\n      String cn = stream.getClass().getName();\n      if (!cn.equals(\"sun.plugin.cache.EmptyInputStream\")) {\n        return stream;\n      }\n    }\n\n    try {\n      // attempt to load from a local file, used when running as\n      // an application, or as a signed applet\n      try {  // first try to catch any security exceptions\n        try {\n          stream = new FileInputStream(dataPath(filename));\n          if (stream != null) return stream;\n        } catch (IOException e2) { }\n\n        try {\n          stream = new FileInputStream(sketchPath(filename));\n          if (stream != null) return stream;\n        } catch (Exception e) { }  // ignored\n\n        try {\n          stream = new FileInputStream(filename);\n          if (stream != null) return stream;\n        } catch (IOException e1) { }\n\n      } catch (SecurityException se) { }  // online, whups\n\n    } catch (Exception e) {\n      //die(e.getMessage(), e);\n      e.printStackTrace();\n    }\n\n    return null;\n  }",
    "right" : "/**\n   * Call openStream() without automatic gzip decompression.\n   */\n  public InputStream createInputRaw(String filename) {\n    if (filename == null) return null;\n\n    if (filename.length() == 0) {\n      // an error will be called by the parent function\n      //System.err.println(\"The filename passed to openStream() was empty.\");\n      return null;\n    }\n\n    // First check whether this looks like a URL. This will prevent online\n    // access logs from being spammed with GET /sketchfolder/http://blahblah\n    if (filename.contains(\":\")) {  // at least smells like URL\n      try {\n        URL url = new URL(filename);\n        URLConnection conn = url.openConnection();\n        HttpURLConnection httpConn = (HttpURLConnection) conn;\n        // Will not handle a protocol change (see below)\n        httpConn.setInstanceFollowRedirects(true);\n        int response = httpConn.getResponseCode();\n        // Normally will not follow HTTPS redirects from HTTP due to security concerns\n        // http://stackoverflow.com/questions/1884230/java-doesnt-follow-redirect-in-urlconnection/1884427\n        if (response >= 300 && response < 400) {\n          String newLocation = httpConn.getHeaderField(\"Location\");\n          return createInputRaw(newLocation);\n        }\n        return conn.getInputStream();\n\n      } catch (MalformedURLException mfue) {\n        // not a url, that's fine\n\n      } catch (FileNotFoundException fnfe) {\n        // Added in 0119 b/c Java 1.5 throws FNFE when URL not available.\n        // http://dev.processing.org/bugs/show_bug.cgi?id=403\n\n      } catch (IOException e) {\n        // changed for 0117, shouldn't be throwing exception\n        e.printStackTrace();\n        //System.err.println(\"Error downloading from URL \" + filename);\n        return null;\n        //throw new RuntimeException(\"Error downloading from URL \" + filename);\n      }\n    }\n\n    InputStream stream = null;\n\n    // Moved this earlier than the getResourceAsStream() checks, because\n    // calling getResourceAsStream() on a directory lists its contents.\n    // http://dev.processing.org/bugs/show_bug.cgi?id=716\n    try {\n      // First see if it's in a data folder. This may fail by throwing\n      // a SecurityException. If so, this whole block will be skipped.\n      File file = new File(dataPath(filename));\n      if (!file.exists()) {\n        // next see if it's just in the sketch folder\n        file = sketchFile(filename);\n      }\n\n      if (file.isDirectory()) {\n        return null;\n      }\n      if (file.exists()) {\n        try {\n          // handle case sensitivity check\n          String filePath = file.getCanonicalPath();\n          String filenameActual = new File(filePath).getName();\n          // make sure there isn't a subfolder prepended to the name\n          String filenameShort = new File(filename).getName();\n          // if the actual filename is the same, but capitalized\n          // differently, warn the user.\n          //if (filenameActual.equalsIgnoreCase(filenameShort) &&\n          //!filenameActual.equals(filenameShort)) {\n          if (!filenameActual.equals(filenameShort)) {\n            throw new RuntimeException(\"This file is named \" +\n                                       filenameActual + \" not \" +\n                                       filename + \". Rename the file \" +\n                                       \"or change your code.\");\n          }\n        } catch (IOException e) { }\n      }\n\n      // if this file is ok, may as well just load it\n      stream = new FileInputStream(file);\n      if (stream != null) return stream;\n\n      // have to break these out because a general Exception might\n      // catch the RuntimeException being thrown above\n    } catch (IOException ioe) {\n    } catch (SecurityException se) { }\n\n    // Using getClassLoader() prevents java from converting dots\n    // to slashes or requiring a slash at the beginning.\n    // (a slash as a prefix means that it'll load from the root of\n    // the jar, rather than trying to dig into the package location)\n    ClassLoader cl = getClass().getClassLoader();\n\n    // by default, data files are exported to the root path of the jar.\n    // (not the data folder) so check there first.\n    stream = cl.getResourceAsStream(\"data/\" + filename);\n    if (stream != null) {\n      String cn = stream.getClass().getName();\n      // this is an irritation of sun's java plug-in, which will return\n      // a non-null stream for an object that doesn't exist. like all good\n      // things, this is probably introduced in java 1.5. awesome!\n      // http://dev.processing.org/bugs/show_bug.cgi?id=359\n      if (!cn.equals(\"sun.plugin.cache.EmptyInputStream\")) {\n        return stream;\n      }\n    }\n\n    // When used with an online script, also need to check without the\n    // data folder, in case it's not in a subfolder called 'data'.\n    // http://dev.processing.org/bugs/show_bug.cgi?id=389\n    stream = cl.getResourceAsStream(filename);\n    if (stream != null) {\n      String cn = stream.getClass().getName();\n      if (!cn.equals(\"sun.plugin.cache.EmptyInputStream\")) {\n        return stream;\n      }\n    }\n\n    try {\n      // attempt to load from a local file, used when running as\n      // an application, or as a signed applet\n      try {  // first try to catch any security exceptions\n        try {\n          stream = new FileInputStream(dataPath(filename));\n          if (stream != null) return stream;\n        } catch (IOException e2) { }\n\n        try {\n          stream = new FileInputStream(sketchPath(filename));\n          if (stream != null) return stream;\n        } catch (Exception e) { }  // ignored\n\n        try {\n          stream = new FileInputStream(filename);\n          if (stream != null) return stream;\n        } catch (IOException e1) { }\n\n      } catch (SecurityException se) { }  // online, whups\n\n    } catch (Exception e) {\n      //die(e.getMessage(), e);\n      e.printStackTrace();\n    }\n\n    return null;\n  }",
    "info" : "MethodDeclaration[211905-217849]:MethodDeclaration[211905-217849]"
  }, {
    "left" : "public file File) : InputStream",
    "right" : "public file File) : InputStream",
    "info" : "MethodDeclaration[217853-218387]:MethodDeclaration[217853-218387]"
  }, {
    "left" : "/**\n   * ( begin auto-generated from loadBytes.xml )\n   *\n   * Reads the contents of a file or url and places it in a byte array. If a\n   * file is specified, it must be located in the sketch's \"data\"\n   * directory/folder.<br />\n   * <br />\n   * The filename parameter can also be a URL to a file found online. For\n   * security reasons, a Processing sketch found online can only download\n   * files from the same server from which it came. Getting around this\n   * restriction requires a <a\n   * href=\"http://wiki.processing.org/w/Sign_an_Applet\">signed applet</a>.\n   *\n   * ( end auto-generated )\n   * @webref input:files\n   * @param filename name of a file in the data folder or a URL.\n   * @see PApplet#loadStrings(String)\n   * @see PApplet#saveStrings(String, String[])\n   * @see PApplet#saveBytes(String, byte[])\n   *\n   */\n  public byte[] loadBytes(String filename) {\n    InputStream is = createInput(filename);\n    if (is != null) {\n      byte[] outgoing = loadBytes(is);\n      try {\n        is.close();\n      } catch (IOException e) {\n        e.printStackTrace();  // shouldn't happen\n      }\n      return outgoing;\n    }\n\n    System.err.println(\"The file \\\"\" + filename + \"\\\" \" +\n                       \"is missing or inaccessible, make sure \" +\n                       \"the URL is valid or that the file has been \" +\n                       \"added to your sketch and is readable.\");\n    return null;\n  }",
    "right" : "/**\n   * ( begin auto-generated from loadBytes.xml )\n   *\n   * Reads the contents of a file or url and places it in a byte array. If a\n   * file is specified, it must be located in the sketch's \"data\"\n   * directory/folder.<br />\n   * <br />\n   * The filename parameter can also be a URL to a file found online. For\n   * security reasons, a Processing sketch found online can only download\n   * files from the same server from which it came. Getting around this\n   * restriction requires a <a\n   * href=\"http://wiki.processing.org/w/Sign_an_Applet\">signed applet</a>.\n   *\n   * ( end auto-generated )\n   * @webref input:files\n   * @param filename name of a file in the data folder or a URL.\n   * @see PApplet#loadStrings(String)\n   * @see PApplet#saveStrings(String, String[])\n   * @see PApplet#saveBytes(String, byte[])\n   *\n   */\n  public byte[] loadBytes(String filename) {\n    InputStream is = createInput(filename);\n    if (is != null) {\n      byte[] outgoing = loadBytes(is);\n      try {\n        is.close();\n      } catch (IOException e) {\n        e.printStackTrace();  // shouldn't happen\n      }\n      return outgoing;\n    }\n\n    System.err.println(\"The file \\\"\" + filename + \"\\\" \" +\n                       \"is missing or inaccessible, make sure \" +\n                       \"the URL is valid or that the file has been \" +\n                       \"added to your sketch and is readable.\");\n    return null;\n  }",
    "info" : "MethodDeclaration[218392-219806]:MethodDeclaration[218392-219806]"
  }, {
    "left" : "public input InputStream) : ",
    "right" : "public input InputStream) : ",
    "info" : "MethodDeclaration[219810-220318]:MethodDeclaration[219810-220318]"
  }, {
    "left" : "public file File) : ",
    "right" : "public file File) : ",
    "info" : "MethodDeclaration[220322-220583]:MethodDeclaration[220322-220583]"
  }, {
    "left" : "public file File) : ",
    "right" : "public file File) : ",
    "info" : "MethodDeclaration[220587-220917]:MethodDeclaration[220587-220917]"
  }, {
    "left" : "public filename String) : ",
    "right" : "public filename String) : ",
    "info" : "MethodDeclaration[220921-223540]:MethodDeclaration[220921-223540]"
  }, {
    "left" : "/**\n   * @nowebref\n   */\n  static public String[] loadStrings(InputStream input) {\n    try {\n      BufferedReader reader =\n        new BufferedReader(new InputStreamReader(input, \"UTF-8\"));\n      return loadStrings(reader);\n    } catch (IOException e) {\n      e.printStackTrace();\n    }\n    return null;\n  }",
    "right" : "/**\n   * @nowebref\n   */\n  static public String[] loadStrings(InputStream input) {\n    try {\n      BufferedReader reader =\n        new BufferedReader(new InputStreamReader(input, \"UTF-8\"));\n      return loadStrings(reader);\n    } catch (IOException e) {\n      e.printStackTrace();\n    }\n    return null;\n  }",
    "info" : "MethodDeclaration[223544-223851]:MethodDeclaration[223544-223851]"
  }, {
    "left" : "public reader BufferedReader) : ",
    "right" : "public reader BufferedReader) : ",
    "info" : "MethodDeclaration[223856-224725]:MethodDeclaration[223856-224725]"
  }, {
    "left" : "/**\n   * ( begin auto-generated from createOutput.xml )\n   *\n   * Similar to <b>createInput()</b>, this creates a Java <b>OutputStream</b>\n   * for a given filename or path. The file will be created in the sketch\n   * folder, or in the same folder as an exported application.\n   * <br /><br />\n   * If the path does not exist, intermediate folders will be created. If an\n   * exception occurs, it will be printed to the console, and <b>null</b>\n   * will be returned.\n   * <br /><br />\n   * This function is a convenience over the Java approach that requires you\n   * to 1) create a FileOutputStream object, 2) determine the exact file\n   * location, and 3) handle exceptions. Exceptions are handled internally by\n   * the function, which is more appropriate for \"sketch\" projects.\n   * <br /><br />\n   * If the output filename ends with <b>.gz</b>, the output will be\n   * automatically GZIP compressed as it is written.\n   *\n   * ( end auto-generated )\n   * @webref output:files\n   * @param filename name of the file to open\n   * @see PApplet#createInput(String)\n   * @see PApplet#selectOutput()\n   */\n  public OutputStream createOutput(String filename) {\n    return createOutput(saveFile(filename));\n  }",
    "right" : "/**\n   * ( begin auto-generated from createOutput.xml )\n   *\n   * Similar to <b>createInput()</b>, this creates a Java <b>OutputStream</b>\n   * for a given filename or path. The file will be created in the sketch\n   * folder, or in the same folder as an exported application.\n   * <br /><br />\n   * If the path does not exist, intermediate folders will be created. If an\n   * exception occurs, it will be printed to the console, and <b>null</b>\n   * will be returned.\n   * <br /><br />\n   * This function is a convenience over the Java approach that requires you\n   * to 1) create a FileOutputStream object, 2) determine the exact file\n   * location, and 3) handle exceptions. Exceptions are handled internally by\n   * the function, which is more appropriate for \"sketch\" projects.\n   * <br /><br />\n   * If the output filename ends with <b>.gz</b>, the output will be\n   * automatically GZIP compressed as it is written.\n   *\n   * ( end auto-generated )\n   * @webref output:files\n   * @param filename name of the file to open\n   * @see PApplet#createInput(String)\n   * @see PApplet#selectOutput()\n   */\n  public OutputStream createOutput(String filename) {\n    return createOutput(saveFile(filename));\n  }",
    "info" : "MethodDeclaration[224816-226022]:MethodDeclaration[224816-226022]"
  }, {
    "left" : "public file File) : OutputStream",
    "right" : "public file File) : OutputStream",
    "info" : "MethodDeclaration[226026-226437]:MethodDeclaration[226026-226437]"
  }, {
    "left" : "/**\n   * ( begin auto-generated from saveStream.xml )\n   *\n   * Save the contents of a stream to a file in the sketch folder. This is\n   * basically <b>saveBytes(blah, loadBytes())</b>, but done more efficiently\n   * (and with less confusing syntax).<br />\n   * <br />\n   * When using the <b>targetFile</b> parameter, it writes to a <b>File</b>\n   * object for greater control over the file location. (Note that unlike\n   * some other functions, this will not automatically compress or uncompress\n   * gzip files.)\n   *\n   * ( end auto-generated )\n   *\n   * @webref output:files\n   * @param target name of the file to write to\n   * @param source location to read from (a filename, path, or URL)\n   * @see PApplet#createOutput(String)\n   */\n  public boolean saveStream(String target, String source) {\n    return saveStream(saveFile(target), source);\n  }",
    "right" : "/**\n   * ( begin auto-generated from saveStream.xml )\n   *\n   * Save the contents of a stream to a file in the sketch folder. This is\n   * basically <b>saveBytes(blah, loadBytes())</b>, but done more efficiently\n   * (and with less confusing syntax).<br />\n   * <br />\n   * When using the <b>targetFile</b> parameter, it writes to a <b>File</b>\n   * object for greater control over the file location. (Note that unlike\n   * some other functions, this will not automatically compress or uncompress\n   * gzip files.)\n   *\n   * ( end auto-generated )\n   *\n   * @webref output:files\n   * @param target name of the file to write to\n   * @param source location to read from (a filename, path, or URL)\n   * @see PApplet#createOutput(String)\n   */\n  public boolean saveStream(String target, String source) {\n    return saveStream(saveFile(target), source);\n  }",
    "info" : "MethodDeclaration[226442-227294]:MethodDeclaration[226442-227294]"
  }, {
    "left" : "/**\n   * Identical to the other saveStream(), but writes to a File\n   * object, for greater control over the file location.\n   * <p/>\n   * Note that unlike other api methods, this will not automatically\n   * compress or uncompress gzip files.\n   */\n  public boolean saveStream(File target, String source) {\n    return saveStream(target, createInputRaw(source));\n  }",
    "right" : "/**\n   * Identical to the other saveStream(), but writes to a File\n   * object, for greater control over the file location.\n   * <p/>\n   * Note that unlike other api methods, this will not automatically\n   * compress or uncompress gzip files.\n   */\n  public boolean saveStream(File target, String source) {\n    return saveStream(target, createInputRaw(source));\n  }",
    "info" : "MethodDeclaration[227298-227663]:MethodDeclaration[227298-227663]"
  }, {
    "left" : "/**\n   * @nowebref\n   */\n  public boolean saveStream(String target, InputStream source) {\n    return saveStream(saveFile(target), source);\n  }",
    "right" : "/**\n   * @nowebref\n   */\n  public boolean saveStream(String target, InputStream source) {\n    return saveStream(saveFile(target), source);\n  }",
    "info" : "MethodDeclaration[227667-227809]:MethodDeclaration[227667-227809]"
  }, {
    "left" : "/**\n   * @nowebref\n   */\n  static public boolean saveStream(File target, InputStream source) {\n    File tempFile = null;\n    try {\n      File parentDir = target.getParentFile();\n      // make sure that this path actually exists before writing\n      createPath(target);\n      tempFile = File.createTempFile(target.getName(), null, parentDir);\n      FileOutputStream targetStream = new FileOutputStream(tempFile);\n\n      saveStream(targetStream, source);\n      targetStream.close();\n      targetStream = null;\n\n      if (target.exists()) {\n        if (!target.delete()) {\n          System.err.println(\"Could not replace \" +\n                             target.getAbsolutePath() + \".\");\n        }\n      }\n      if (!tempFile.renameTo(target)) {\n        System.err.println(\"Could not rename temporary file \" +\n                           tempFile.getAbsolutePath());\n        return false;\n      }\n      return true;\n\n    } catch (IOException e) {\n      if (tempFile != null) {\n        tempFile.delete();\n      }\n      e.printStackTrace();\n      return false;\n    }\n  }",
    "right" : "/**\n   * @nowebref\n   */\n  static public boolean saveStream(File target, InputStream source) {\n    File tempFile = null;\n    try {\n      File parentDir = target.getParentFile();\n      // make sure that this path actually exists before writing\n      createPath(target);\n      tempFile = File.createTempFile(target.getName(), null, parentDir);\n      FileOutputStream targetStream = new FileOutputStream(tempFile);\n\n      saveStream(targetStream, source);\n      targetStream.close();\n      targetStream = null;\n\n      if (target.exists()) {\n        if (!target.delete()) {\n          System.err.println(\"Could not replace \" +\n                             target.getAbsolutePath() + \".\");\n        }\n      }\n      if (!tempFile.renameTo(target)) {\n        System.err.println(\"Could not rename temporary file \" +\n                           tempFile.getAbsolutePath());\n        return false;\n      }\n      return true;\n\n    } catch (IOException e) {\n      if (tempFile != null) {\n        tempFile.delete();\n      }\n      e.printStackTrace();\n      return false;\n    }\n  }",
    "info" : "MethodDeclaration[227813-228876]:MethodDeclaration[227813-228876]"
  }, {
    "left" : "public target OutputStream, source InputStream) : void",
    "right" : "public target OutputStream, source InputStream) : void",
    "info" : "MethodDeclaration[228880-229339]:MethodDeclaration[228880-229339]"
  }, {
    "left" : "/**\n   * ( begin auto-generated from saveBytes.xml )\n   *\n   * Opposite of <b>loadBytes()</b>, will write an entire array of bytes to a\n   * file. The data is saved in binary format. This file is saved to the\n   * sketch's folder, which is opened by selecting \"Show sketch folder\" from\n   * the \"Sketch\" menu.<br />\n   * <br />\n   * It is not possible to use saveXxxxx() functions inside a web browser\n   * unless the sketch is <a\n   * href=\"http://wiki.processing.org/w/Sign_an_Applet\">signed applet</A>. To\n   * save a file back to a server, see the <a\n   * href=\"http://wiki.processing.org/w/Saving_files_to_a_web-server\">save to\n   * web</A> code snippet on the Processing Wiki.\n   *\n   * ( end auto-generated )\n   *\n   * @webref output:files\n   * @param filename name of the file to write to\n   * @param data array of bytes to be written\n   * @see PApplet#loadStrings(String)\n   * @see PApplet#loadBytes(String)\n   * @see PApplet#saveStrings(String, String[])\n   */\n  public void saveBytes(String filename, byte[] data) {\n    saveBytes(saveFile(filename), data);\n  }",
    "right" : "/**\n   * ( begin auto-generated from saveBytes.xml )\n   *\n   * Opposite of <b>loadBytes()</b>, will write an entire array of bytes to a\n   * file. The data is saved in binary format. This file is saved to the\n   * sketch's folder, which is opened by selecting \"Show sketch folder\" from\n   * the \"Sketch\" menu.<br />\n   * <br />\n   * It is not possible to use saveXxxxx() functions inside a web browser\n   * unless the sketch is <a\n   * href=\"http://wiki.processing.org/w/Sign_an_Applet\">signed applet</A>. To\n   * save a file back to a server, see the <a\n   * href=\"http://wiki.processing.org/w/Saving_files_to_a_web-server\">save to\n   * web</A> code snippet on the Processing Wiki.\n   *\n   * ( end auto-generated )\n   *\n   * @webref output:files\n   * @param filename name of the file to write to\n   * @param data array of bytes to be written\n   * @see PApplet#loadStrings(String)\n   * @see PApplet#loadBytes(String)\n   * @see PApplet#saveStrings(String, String[])\n   */\n  public void saveBytes(String filename, byte[] data) {\n    saveBytes(saveFile(filename), data);\n  }",
    "info" : "MethodDeclaration[229344-230415]:MethodDeclaration[229344-230415]"
  }, {
    "left" : "public file File, data ) : void",
    "right" : "public file File, data ) : void",
    "info" : "MethodDeclaration[230420-231360]:MethodDeclaration[230420-231360]"
  }, {
    "left" : "/**\n   * @nowebref\n   * Spews a buffer of bytes to an OutputStream.\n   */\n  static public void saveBytes(OutputStream output, byte[] data) {\n    try {\n      output.write(data);\n      output.flush();\n\n    } catch (IOException e) {\n      e.printStackTrace();\n    }\n  }",
    "right" : "/**\n   * @nowebref\n   * Spews a buffer of bytes to an OutputStream.\n   */\n  static public void saveBytes(OutputStream output, byte[] data) {\n    try {\n      output.write(data);\n      output.flush();\n\n    } catch (IOException e) {\n      e.printStackTrace();\n    }\n  }",
    "info" : "MethodDeclaration[231365-231631]:MethodDeclaration[231365-231631]"
  }, {
    "left" : "public filename String, data String) : void",
    "right" : "public filename String, data String) : void",
    "info" : "MethodDeclaration[231642-232910]:MethodDeclaration[231642-232910]"
  }, {
    "left" : "public file File, data String) : void",
    "right" : "public file File, data String) : void",
    "info" : "MethodDeclaration[232915-233047]:MethodDeclaration[232915-233047]"
  }, {
    "left" : "public output OutputStream, data ) : void",
    "right" : "public output OutputStream, data ) : void",
    "info" : "MethodDeclaration[233052-233319]:MethodDeclaration[233052-233319]"
  }, {
    "left" : "protected ) : String",
    "right" : "protected ) : String",
    "info" : "MethodDeclaration[233391-234492]:MethodDeclaration[233391-234492]"
  }, {
    "left" : "public ) : String",
    "right" : "public ) : String",
    "info" : "MethodDeclaration[234497-234625]:MethodDeclaration[234497-234625]"
  }, {
    "left" : "/**\n   * Prepend the sketch folder path to the filename (or path) that is\n   * passed in. External libraries should use this function to save to\n   * the sketch folder.\n   * <p/>\n   * Note that when running as an applet inside a web browser,\n   * the sketchPath will be set to null, because security restrictions\n   * prevent applets from accessing that information.\n   * <p/>\n   * This will also cause an error if the sketch is not inited properly,\n   * meaning that init() was never called on the PApplet when hosted\n   * my some other main() or by other code. For proper use of init(),\n   * see the examples in the main description text for PApplet.\n   */\n  public String sketchPath(String where) {\n    if (sketchPath() == null) {\n      return where;\n    }\n    // isAbsolute() could throw an access exception, but so will writing\n    // to the local disk using the sketch path, so this is safe here.\n    // for 0120, added a try/catch anyways.\n    try {\n      if (new File(where).isAbsolute()) return where;\n    } catch (Exception e) { }\n\n    return sketchPath() + File.separator + where;\n  }",
    "right" : "/**\n   * Prepend the sketch folder path to the filename (or path) that is\n   * passed in. External libraries should use this function to save to\n   * the sketch folder.\n   * <p/>\n   * Note that when running as an applet inside a web browser,\n   * the sketchPath will be set to null, because security restrictions\n   * prevent applets from accessing that information.\n   * <p/>\n   * This will also cause an error if the sketch is not inited properly,\n   * meaning that init() was never called on the PApplet when hosted\n   * my some other main() or by other code. For proper use of init(),\n   * see the examples in the main description text for PApplet.\n   */\n  public String sketchPath(String where) {\n    if (sketchPath() == null) {\n      return where;\n    }\n    // isAbsolute() could throw an access exception, but so will writing\n    // to the local disk using the sketch path, so this is safe here.\n    // for 0120, added a try/catch anyways.\n    try {\n      if (new File(where).isAbsolute()) return where;\n    } catch (Exception e) { }\n\n    return sketchPath() + File.separator + where;\n  }",
    "info" : "MethodDeclaration[234630-235725]:MethodDeclaration[234630-235725]"
  }, {
    "left" : "public where String) : File",
    "right" : "public where String) : File",
    "info" : "MethodDeclaration[235730-235812]:MethodDeclaration[235730-235812]"
  }, {
    "left" : "/**\n   * Returns a path inside the applet folder to save to. Like sketchPath(),\n   * but creates any in-between folders so that things save properly.\n   * <p/>\n   * All saveXxxx() functions use the path to the sketch folder, rather than\n   * its data folder. Once exported, the data folder will be found inside the\n   * jar file of the exported application or applet. In this case, it's not\n   * possible to save data into the jar file, because it will often be running\n   * from a server, or marked in-use if running from a local file system.\n   * With this in mind, saving to the data path doesn't make sense anyway.\n   * If you know you're running locally, and want to save to the data folder,\n   * use <TT>saveXxxx(\"data/blah.dat\")</TT>.\n   */\n  public String savePath(String where) {\n    if (where == null) return null;\n    String filename = sketchPath(where);\n    createPath(filename);\n    return filename;\n  }",
    "right" : "/**\n   * Returns a path inside the applet folder to save to. Like sketchPath(),\n   * but creates any in-between folders so that things save properly.\n   * <p/>\n   * All saveXxxx() functions use the path to the sketch folder, rather than\n   * its data folder. Once exported, the data folder will be found inside the\n   * jar file of the exported application or applet. In this case, it's not\n   * possible to save data into the jar file, because it will often be running\n   * from a server, or marked in-use if running from a local file system.\n   * With this in mind, saving to the data path doesn't make sense anyway.\n   * If you know you're running locally, and want to save to the data folder,\n   * use <TT>saveXxxx(\"data/blah.dat\")</TT>.\n   */\n  public String savePath(String where) {\n    if (where == null) return null;\n    String filename = sketchPath(where);\n    createPath(filename);\n    return filename;\n  }",
    "info" : "MethodDeclaration[235817-236733]:MethodDeclaration[235817-236733]"
  }, {
    "left" : "public where String) : File",
    "right" : "public where String) : File",
    "info" : "MethodDeclaration[236738-236885]:MethodDeclaration[236738-236885]"
  }, {
    "left" : "static File desktopFolder;",
    "right" : "static File desktopFolder;",
    "info" : "FieldDeclaration[236890-236916]:FieldDeclaration[236890-236916]"
  }, {
    "left" : "public what String) : File",
    "right" : "public what String) : File",
    "info" : "MethodDeclaration[236920-237594]:MethodDeclaration[236920-237594]"
  }, {
    "left" : "public what String) : String",
    "right" : "public what String) : String",
    "info" : "MethodDeclaration[237599-237755]:MethodDeclaration[237599-237755]"
  }, {
    "left" : "/**\n   * Return a full path to an item in the data folder.\n   * <p>\n   * This is only available with applications, not applets or Android.\n   * On Windows and Linux, this is simply the data folder, which is located\n   * in the same directory as the EXE file and lib folders. On Mac OS X, this\n   * is a path to the data folder buried inside Contents/Java.\n   * For the latter point, that also means that the data folder should not be\n   * considered writable. Use sketchPath() for now, or inputPath() and\n   * outputPath() once they're available in the 2.0 release.\n   * <p>\n   * dataPath() is not supported with applets because applets have their data\n   * folder wrapped into the JAR file. To read data from the data folder that\n   * works with an applet, you should use other methods such as createInput(),\n   * createReader(), or loadStrings().\n   */\n  public String dataPath(String where) {\n    return dataFile(where).getAbsolutePath();\n  }",
    "right" : "/**\n   * Return a full path to an item in the data folder.\n   * <p>\n   * This is only available with applications, not applets or Android.\n   * On Windows and Linux, this is simply the data folder, which is located\n   * in the same directory as the EXE file and lib folders. On Mac OS X, this\n   * is a path to the data folder buried inside Contents/Java.\n   * For the latter point, that also means that the data folder should not be\n   * considered writable. Use sketchPath() for now, or inputPath() and\n   * outputPath() once they're available in the 2.0 release.\n   * <p>\n   * dataPath() is not supported with applets because applets have their data\n   * folder wrapped into the JAR file. To read data from the data folder that\n   * works with an applet, you should use other methods such as createInput(),\n   * createReader(), or loadStrings().\n   */\n  public String dataPath(String where) {\n    return dataFile(where).getAbsolutePath();\n  }",
    "info" : "MethodDeclaration[237760-238705]:MethodDeclaration[237760-238705]"
  }, {
    "left" : "public where String) : File",
    "right" : "public where String) : File",
    "info" : "MethodDeclaration[238710-239718]:MethodDeclaration[238710-239718]"
  }, {
    "left" : "public path String) : void",
    "right" : "public path String) : void",
    "info" : "MethodDeclaration[239978-240233]:MethodDeclaration[239978-240233]"
  }, {
    "left" : "static public void createPath(File file) {\n    try {\n      String parent = file.getParent();\n      if (parent != null) {\n        File unit = new File(parent);\n        if (!unit.exists()) unit.mkdirs();\n      }\n    } catch (SecurityException se) {\n      System.err.println(\"You don't have permissions to create \" +\n                         file.getAbsolutePath());\n    }\n  }",
    "right" : "static public void createPath(File file) {\n    try {\n      String parent = file.getParent();\n      if (parent != null) {\n        File unit = new File(parent);\n        if (!unit.exists()) unit.mkdirs();\n      }\n    } catch (SecurityException se) {\n      System.err.println(\"You don't have permissions to create \" +\n                         file.getAbsolutePath());\n    }\n  }",
    "info" : "MethodDeclaration[240238-240611]:MethodDeclaration[240238-240611]"
  }, {
    "left" : "public filename String) : String",
    "right" : "public filename String) : String",
    "info" : "MethodDeclaration[240616-241156]:MethodDeclaration[240616-241156]"
  }, {
    "left" : "static public String urlEncode(String str) {\n    try {\n      return URLEncoder.encode(str, \"UTF-8\");\n    } catch (UnsupportedEncodingException e) {  // oh c'mon\n      return null;\n    }\n  }",
    "right" : "static public String urlEncode(String str) {\n    try {\n      return URLEncoder.encode(str, \"UTF-8\");\n    } catch (UnsupportedEncodingException e) {  // oh c'mon\n      return null;\n    }\n  }",
    "info" : "MethodDeclaration[241247-241436]:MethodDeclaration[241247-241436]"
  }, {
    "left" : "static public String urlDecode(String str) {\n    try {\n      return URLDecoder.decode(str, \"UTF-8\");\n    } catch (UnsupportedEncodingException e) {  // safe per the JDK source\n      return null;\n    }\n  }",
    "right" : "static public String urlDecode(String str) {\n    try {\n      return URLDecoder.decode(str, \"UTF-8\");\n    } catch (UnsupportedEncodingException e) {  // safe per the JDK source\n      return null;\n    }\n  }",
    "info" : "MethodDeclaration[241441-241645]:MethodDeclaration[241441-241645]"
  }, {
    "left" : "public list byte) : ",
    "right" : "public list byte) : ",
    "info" : "MethodDeclaration[241729-242485]:MethodDeclaration[241729-242485]"
  }, {
    "left" : "public list , count int) : ",
    "right" : "public list , count int) : ",
    "info" : "MethodDeclaration[242489-242783]:MethodDeclaration[242489-242783]"
  }, {
    "left" : "static public char[] sort(char list[]) {\n    return sort(list, list.length);\n  }",
    "right" : "static public char[] sort(char list[]) {\n    return sort(list, list.length);\n  }",
    "info" : "MethodDeclaration[242787-242867]:MethodDeclaration[242787-242867]"
  }, {
    "left" : "public list , count int) : ",
    "right" : "public list , count int) : ",
    "info" : "MethodDeclaration[242871-243086]:MethodDeclaration[242871-243086]"
  }, {
    "left" : "public list int) : ",
    "right" : "public list int) : ",
    "info" : "MethodDeclaration[243090-243168]:MethodDeclaration[243090-243168]"
  }, {
    "left" : "public list , count int) : ",
    "right" : "public list , count int) : ",
    "info" : "MethodDeclaration[243172-243383]:MethodDeclaration[243172-243383]"
  }, {
    "left" : "public list float) : ",
    "right" : "public list float) : ",
    "info" : "MethodDeclaration[243387-243469]:MethodDeclaration[243387-243469]"
  }, {
    "left" : "public list , count int) : ",
    "right" : "public list , count int) : ",
    "info" : "MethodDeclaration[243473-243692]:MethodDeclaration[243473-243692]"
  }, {
    "left" : "public list String) : ",
    "right" : "public list String) : ",
    "info" : "MethodDeclaration[243696-243780]:MethodDeclaration[243696-243780]"
  }, {
    "left" : "static public String[] sort(String[] list, int count) {\n    String[] outgoing = new String[list.length];\n    System.arraycopy(list, 0, outgoing, 0, list.length);\n    Arrays.sort(outgoing, 0, count);\n    return outgoing;\n  }",
    "right" : "static public String[] sort(String[] list, int count) {\n    String[] outgoing = new String[list.length];\n    System.arraycopy(list, 0, outgoing, 0, list.length);\n    Arrays.sort(outgoing, 0, count);\n    return outgoing;\n  }",
    "info" : "MethodDeclaration[243784-244007]:MethodDeclaration[243784-244007]"
  }, {
    "left" : "/**\n   * ( begin auto-generated from arrayCopy.xml )\n   *\n   * Copies an array (or part of an array) to another array. The <b>src</b>\n   * array is copied to the <b>dst</b> array, beginning at the position\n   * specified by <b>srcPos</b> and into the position specified by\n   * <b>dstPos</b>. The number of elements to copy is determined by\n   * <b>length</b>. The simplified version with two arguments copies an\n   * entire array to another of the same size. It is equivalent to\n   * \"arrayCopy(src, 0, dst, 0, src.length)\". This function is far more\n   * efficient for copying array data than iterating through a <b>for</b> and\n   * copying each element.\n   *\n   * ( end auto-generated )\n   * @webref data:array_functions\n   * @param src the source array\n   * @param srcPosition starting position in the source array\n   * @param dst the destination array of the same data type as the source array\n   * @param dstPosition starting position in the destination array\n   * @param length number of array elements to be copied\n   * @see PApplet#concat(boolean[], boolean[])\n   */\n  static public void arrayCopy(Object src, int srcPosition,\n                               Object dst, int dstPosition,\n                               int length) {\n    System.arraycopy(src, srcPosition, dst, dstPosition, length);\n  }",
    "right" : "/**\n   * ( begin auto-generated from arrayCopy.xml )\n   *\n   * Copies an array (or part of an array) to another array. The <b>src</b>\n   * array is copied to the <b>dst</b> array, beginning at the position\n   * specified by <b>srcPos</b> and into the position specified by\n   * <b>dstPos</b>. The number of elements to copy is determined by\n   * <b>length</b>. The simplified version with two arguments copies an\n   * entire array to another of the same size. It is equivalent to\n   * \"arrayCopy(src, 0, dst, 0, src.length)\". This function is far more\n   * efficient for copying array data than iterating through a <b>for</b> and\n   * copying each element.\n   *\n   * ( end auto-generated )\n   * @webref data:array_functions\n   * @param src the source array\n   * @param srcPosition starting position in the source array\n   * @param dst the destination array of the same data type as the source array\n   * @param dstPosition starting position in the destination array\n   * @param length number of array elements to be copied\n   * @see PApplet#concat(boolean[], boolean[])\n   */\n  static public void arrayCopy(Object src, int srcPosition,\n                               Object dst, int dstPosition,\n                               int length) {\n    System.arraycopy(src, srcPosition, dst, dstPosition, length);\n  }",
    "info" : "MethodDeclaration[244102-245412]:MethodDeclaration[244102-245412]"
  }, {
    "left" : "public src Object, dst Object, length int) : void",
    "right" : "public src Object, dst Object, length int) : void",
    "info" : "MethodDeclaration[245416-245651]:MethodDeclaration[245416-245651]"
  }, {
    "left" : "public src Object, dst Object) : void",
    "right" : "public src Object, dst Object) : void",
    "info" : "MethodDeclaration[245655-245944]:MethodDeclaration[245655-245944]"
  }, {
    "left" : "public src Object, srcPosition int, dst Object, dstPosition int, length int) : void",
    "right" : "public src Object, srcPosition int, dst Object, dstPosition int, length int) : void",
    "info" : "MethodDeclaration[245953-246239]:MethodDeclaration[245953-246239]"
  }, {
    "left" : "/**\n   * @deprecated Use arrayCopy() instead.\n   */\n  static public void arraycopy(Object src, Object dst, int length) {\n    System.arraycopy(src, 0, dst, 0, length);\n  }",
    "right" : "/**\n   * @deprecated Use arrayCopy() instead.\n   */\n  static public void arraycopy(Object src, Object dst, int length) {\n    System.arraycopy(src, 0, dst, 0, length);\n  }",
    "info" : "MethodDeclaration[246243-246413]:MethodDeclaration[246243-246413]"
  }, {
    "left" : "public src Object, dst Object) : void",
    "right" : "public src Object, dst Object) : void",
    "info" : "MethodDeclaration[246417-246589]:MethodDeclaration[246417-246589]"
  }, {
    "left" : "/**\n   * ( begin auto-generated from expand.xml )\n   *\n   * Increases the size of an array. By default, this function doubles the\n   * size of the array, but the optional <b>newSize</b> parameter provides\n   * precise control over the increase in size.\n   * <br/> <br/>\n   * When using an array of objects, the data returned from the function must\n   * be cast to the object array's data type. For example: <em>SomeClass[]\n   * items = (SomeClass[]) expand(originalArray)</em>.\n   *\n   * ( end auto-generated )\n   *\n   * @webref data:array_functions\n   * @param list the array to expand\n   * @see PApplet#shorten(boolean[])\n   */\n  static public boolean[] expand(boolean list[]) {\n    return expand(list, list.length << 1);\n  }",
    "right" : "/**\n   * ( begin auto-generated from expand.xml )\n   *\n   * Increases the size of an array. By default, this function doubles the\n   * size of the array, but the optional <b>newSize</b> parameter provides\n   * precise control over the increase in size.\n   * <br/> <br/>\n   * When using an array of objects, the data returned from the function must\n   * be cast to the object array's data type. For example: <em>SomeClass[]\n   * items = (SomeClass[]) expand(originalArray)</em>.\n   *\n   * ( end auto-generated )\n   *\n   * @webref data:array_functions\n   * @param list the array to expand\n   * @see PApplet#shorten(boolean[])\n   */\n  static public boolean[] expand(boolean list[]) {\n    return expand(list, list.length << 1);\n  }",
    "info" : "MethodDeclaration[246593-247320]:MethodDeclaration[246593-247320]"
  }, {
    "left" : "public list boolean, newSize int) : ",
    "right" : "public list boolean, newSize int) : ",
    "info" : "MethodDeclaration[247324-247576]:MethodDeclaration[247324-247576]"
  }, {
    "left" : "public list byte) : ",
    "right" : "public list byte) : ",
    "info" : "MethodDeclaration[247580-247669]:MethodDeclaration[247580-247669]"
  }, {
    "left" : "public list byte, newSize int) : ",
    "right" : "public list byte, newSize int) : ",
    "info" : "MethodDeclaration[247673-247858]:MethodDeclaration[247673-247858]"
  }, {
    "left" : "static public char[] expand(char list[]) {\n    return expand(list, list.length << 1);\n  }",
    "right" : "static public char[] expand(char list[]) {\n    return expand(list, list.length << 1);\n  }",
    "info" : "MethodDeclaration[247862-247951]:MethodDeclaration[247862-247951]"
  }, {
    "left" : "public list char, newSize int) : ",
    "right" : "public list char, newSize int) : ",
    "info" : "MethodDeclaration[247955-248140]:MethodDeclaration[247955-248140]"
  }, {
    "left" : "static public int[] expand(int list[]) {\n    return expand(list, list.length << 1);\n  }",
    "right" : "static public int[] expand(int list[]) {\n    return expand(list, list.length << 1);\n  }",
    "info" : "MethodDeclaration[248144-248231]:MethodDeclaration[248144-248231]"
  }, {
    "left" : "public list int, newSize int) : ",
    "right" : "public list int, newSize int) : ",
    "info" : "MethodDeclaration[248235-248416]:MethodDeclaration[248235-248416]"
  }, {
    "left" : "static public long[] expand(long list[]) {\n    return expand(list, list.length << 1);\n  }",
    "right" : "static public long[] expand(long list[]) {\n    return expand(list, list.length << 1);\n  }",
    "info" : "MethodDeclaration[248420-248509]:MethodDeclaration[248420-248509]"
  }, {
    "left" : "static public long[] expand(long list[], int newSize) {\n    long temp[] = new long[newSize];\n    System.arraycopy(list, 0, temp, 0, Math.min(newSize, list.length));\n    return temp;\n  }",
    "right" : "static public long[] expand(long list[], int newSize) {\n    long temp[] = new long[newSize];\n    System.arraycopy(list, 0, temp, 0, Math.min(newSize, list.length));\n    return temp;\n  }",
    "info" : "MethodDeclaration[248513-248698]:MethodDeclaration[248513-248698]"
  }, {
    "left" : "static public float[] expand(float list[]) {\n    return expand(list, list.length << 1);\n  }",
    "right" : "static public float[] expand(float list[]) {\n    return expand(list, list.length << 1);\n  }",
    "info" : "MethodDeclaration[248702-248793]:MethodDeclaration[248702-248793]"
  }, {
    "left" : "public list float, newSize int) : ",
    "right" : "public list float, newSize int) : ",
    "info" : "MethodDeclaration[248797-248986]:MethodDeclaration[248797-248986]"
  }, {
    "left" : "public list double) : ",
    "right" : "public list double) : ",
    "info" : "MethodDeclaration[248990-249083]:MethodDeclaration[248990-249083]"
  }, {
    "left" : "static public double[] expand(double list[], int newSize) {\n    double temp[] = new double[newSize];\n    System.arraycopy(list, 0, temp, 0, Math.min(newSize, list.length));\n    return temp;\n  }",
    "right" : "static public double[] expand(double list[], int newSize) {\n    double temp[] = new double[newSize];\n    System.arraycopy(list, 0, temp, 0, Math.min(newSize, list.length));\n    return temp;\n  }",
    "info" : "MethodDeclaration[249087-249280]:MethodDeclaration[249087-249280]"
  }, {
    "left" : "static public String[] expand(String list[]) {\n    return expand(list, list.length << 1);\n  }",
    "right" : "static public String[] expand(String list[]) {\n    return expand(list, list.length << 1);\n  }",
    "info" : "MethodDeclaration[249284-249377]:MethodDeclaration[249284-249377]"
  }, {
    "left" : "public list String, newSize int) : ",
    "right" : "public list String, newSize int) : ",
    "info" : "MethodDeclaration[249381-249630]:MethodDeclaration[249381-249630]"
  }, {
    "left" : "public array Object) : Object",
    "right" : "public array Object) : Object",
    "info" : "MethodDeclaration[249633-249760]:MethodDeclaration[249633-249760]"
  }, {
    "left" : "static public Object expand(Object list, int newSize) {\n    Class<?> type = list.getClass().getComponentType();\n    Object temp = Array.newInstance(type, newSize);\n    System.arraycopy(list, 0, temp, 0,\n                     Math.min(Array.getLength(list), newSize));\n    return temp;\n  }",
    "right" : "static public Object expand(Object list, int newSize) {\n    Class<?> type = list.getClass().getComponentType();\n    Object temp = Array.newInstance(type, newSize);\n    System.arraycopy(list, 0, temp, 0,\n                     Math.min(Array.getLength(list), newSize));\n    return temp;\n  }",
    "info" : "MethodDeclaration[249764-250051]:MethodDeclaration[249764-250051]"
  }, {
    "left" : "/**\n   * ( begin auto-generated from append.xml )\n   *\n   * Expands an array by one element and adds data to the new position. The\n   * datatype of the <b>element</b> parameter must be the same as the\n   * datatype of the array.\n   * <br/> <br/>\n   * When using an array of objects, the data returned from the function must\n   * be cast to the object array's data type. For example: <em>SomeClass[]\n   * items = (SomeClass[]) append(originalArray, element)</em>.\n   *\n   * ( end auto-generated )\n   *\n   * @webref data:array_functions\n   * @param array array to append\n   * @param value new data for the array\n   * @see PApplet#shorten(boolean[])\n   * @see PApplet#expand(boolean[])\n   */\n  static public byte[] append(byte array[], byte value) {\n    array = expand(array, array.length + 1);\n    array[array.length-1] = value;\n    return array;\n  }",
    "right" : "/**\n   * ( begin auto-generated from append.xml )\n   *\n   * Expands an array by one element and adds data to the new position. The\n   * datatype of the <b>element</b> parameter must be the same as the\n   * datatype of the array.\n   * <br/> <br/>\n   * When using an array of objects, the data returned from the function must\n   * be cast to the object array's data type. For example: <em>SomeClass[]\n   * items = (SomeClass[]) append(originalArray, element)</em>.\n   *\n   * ( end auto-generated )\n   *\n   * @webref data:array_functions\n   * @param array array to append\n   * @param value new data for the array\n   * @see PApplet#shorten(boolean[])\n   * @see PApplet#expand(boolean[])\n   */\n  static public byte[] append(byte array[], byte value) {\n    array = expand(array, array.length + 1);\n    array[array.length-1] = value;\n    return array;\n  }",
    "info" : "MethodDeclaration[250177-251025]:MethodDeclaration[250177-251025]"
  }, {
    "left" : "static public char[] append(char array[], char value) {\n    array = expand(array, array.length + 1);\n    array[array.length-1] = value;\n    return array;\n  }",
    "right" : "static public char[] append(char array[], char value) {\n    array = expand(array, array.length + 1);\n    array[array.length-1] = value;\n    return array;\n  }",
    "info" : "MethodDeclaration[251029-251186]:MethodDeclaration[251029-251186]"
  }, {
    "left" : "static public int[] append(int array[], int value) {\n    array = expand(array, array.length + 1);\n    array[array.length-1] = value;\n    return array;\n  }",
    "right" : "static public int[] append(int array[], int value) {\n    array = expand(array, array.length + 1);\n    array[array.length-1] = value;\n    return array;\n  }",
    "info" : "MethodDeclaration[251190-251344]:MethodDeclaration[251190-251344]"
  }, {
    "left" : "public array float, value float) : ",
    "right" : "public array float, value float) : ",
    "info" : "MethodDeclaration[251348-251508]:MethodDeclaration[251348-251508]"
  }, {
    "left" : "public array String, value String) : ",
    "right" : "public array String, value String) : ",
    "info" : "MethodDeclaration[251512-251675]:MethodDeclaration[251512-251675]"
  }, {
    "left" : "static public Object append(Object array, Object value) {\n    int length = Array.getLength(array);\n    array = expand(array, length + 1);\n    Array.set(array, length, value);\n    return array;\n  }",
    "right" : "static public Object append(Object array, Object value) {\n    int length = Array.getLength(array);\n    array = expand(array, length + 1);\n    Array.set(array, length, value);\n    return array;\n  }",
    "info" : "MethodDeclaration[251679-251875]:MethodDeclaration[251679-251875]"
  }, {
    "left" : "public list boolean) : ",
    "right" : "public list boolean) : ",
    "info" : "MethodDeclaration[251879-252518]:MethodDeclaration[251879-252518]"
  }, {
    "left" : "public list byte) : ",
    "right" : "public list byte) : ",
    "info" : "MethodDeclaration[252522-252612]:MethodDeclaration[252522-252612]"
  }, {
    "left" : "public list char) : ",
    "right" : "public list char) : ",
    "info" : "MethodDeclaration[252616-252706]:MethodDeclaration[252616-252706]"
  }, {
    "left" : "public list int) : ",
    "right" : "public list int) : ",
    "info" : "MethodDeclaration[252710-252798]:MethodDeclaration[252710-252798]"
  }, {
    "left" : "public list float) : ",
    "right" : "public list float) : ",
    "info" : "MethodDeclaration[252802-252894]:MethodDeclaration[252802-252894]"
  }, {
    "left" : "public list String) : ",
    "right" : "public list String) : ",
    "info" : "MethodDeclaration[252898-252992]:MethodDeclaration[252898-252992]"
  }, {
    "left" : "static public Object shorten(Object list) {\n    int length = Array.getLength(list);\n    return subset(list, 0, length - 1);\n  }",
    "right" : "static public Object shorten(Object list) {\n    int length = Array.getLength(list);\n    return subset(list, 0, length - 1);\n  }",
    "info" : "MethodDeclaration[252996-253123]:MethodDeclaration[252996-253123]"
  }, {
    "left" : "/**\n   * ( begin auto-generated from splice.xml )\n   *\n   * Inserts a value or array of values into an existing array. The first two\n   * parameters must be of the same datatype. The <b>array</b> parameter\n   * defines the array which will be modified and the second parameter\n   * defines the data which will be inserted.\n   * <br/> <br/>\n   * When using an array of objects, the data returned from the function must\n   * be cast to the object array's data type. For example: <em>SomeClass[]\n   * items = (SomeClass[]) splice(array1, array2, index)</em>.\n   *\n   * ( end auto-generated )\n   * @webref data:array_functions\n   * @param list array to splice into\n   * @param value value to be spliced in\n   * @param index position in the array from which to insert data\n   * @see PApplet#concat(boolean[], boolean[])\n   * @see PApplet#subset(boolean[], int, int)\n   */\n  static final public boolean[] splice(boolean list[],\n                                       boolean value, int index) {\n    boolean outgoing[] = new boolean[list.length + 1];\n    System.arraycopy(list, 0, outgoing, 0, index);\n    outgoing[index] = value;\n    System.arraycopy(list, index, outgoing, index + 1,\n                     list.length - index);\n    return outgoing;\n  }",
    "right" : "/**\n   * ( begin auto-generated from splice.xml )\n   *\n   * Inserts a value or array of values into an existing array. The first two\n   * parameters must be of the same datatype. The <b>array</b> parameter\n   * defines the array which will be modified and the second parameter\n   * defines the data which will be inserted.\n   * <br/> <br/>\n   * When using an array of objects, the data returned from the function must\n   * be cast to the object array's data type. For example: <em>SomeClass[]\n   * items = (SomeClass[]) splice(array1, array2, index)</em>.\n   *\n   * ( end auto-generated )\n   * @webref data:array_functions\n   * @param list array to splice into\n   * @param value value to be spliced in\n   * @param index position in the array from which to insert data\n   * @see PApplet#concat(boolean[], boolean[])\n   * @see PApplet#subset(boolean[], int, int)\n   */\n  static final public boolean[] splice(boolean list[],\n                                       boolean value, int index) {\n    boolean outgoing[] = new boolean[list.length + 1];\n    System.arraycopy(list, 0, outgoing, 0, index);\n    outgoing[index] = value;\n    System.arraycopy(list, index, outgoing, index + 1,\n                     list.length - index);\n    return outgoing;\n  }",
    "info" : "MethodDeclaration[253128-254374]:MethodDeclaration[253128-254374]"
  }, {
    "left" : "public list boolean, value boolean, index int) : ",
    "right" : "public list boolean, value boolean, index int) : ",
    "info" : "MethodDeclaration[254378-254813]:MethodDeclaration[254378-254813]"
  }, {
    "left" : "static final public byte[] splice(byte list[],\n                                    byte value, int index) {\n    byte outgoing[] = new byte[list.length + 1];\n    System.arraycopy(list, 0, outgoing, 0, index);\n    outgoing[index] = value;\n    System.arraycopy(list, index, outgoing, index + 1,\n                     list.length - index);\n    return outgoing;\n  }",
    "right" : "static final public byte[] splice(byte list[],\n                                    byte value, int index) {\n    byte outgoing[] = new byte[list.length + 1];\n    System.arraycopy(list, 0, outgoing, 0, index);\n    outgoing[index] = value;\n    System.arraycopy(list, index, outgoing, index + 1,\n                     list.length - index);\n    return outgoing;\n  }",
    "info" : "MethodDeclaration[254817-255176]:MethodDeclaration[254817-255176]"
  }, {
    "left" : "public list byte, value byte, index int) : ",
    "right" : "public list byte, value byte, index int) : ",
    "info" : "MethodDeclaration[255180-255597]:MethodDeclaration[255180-255597]"
  }, {
    "left" : "public list char, value char, index int) : ",
    "right" : "public list char, value char, index int) : ",
    "info" : "MethodDeclaration[255602-255961]:MethodDeclaration[255602-255961]"
  }, {
    "left" : "static final public char[] splice(char list[],\n                                    char value[], int index) {\n    char outgoing[] = new char[list.length + value.length];\n    System.arraycopy(list, 0, outgoing, 0, index);\n    System.arraycopy(value, 0, outgoing, index, value.length);\n    System.arraycopy(list, index, outgoing, index + value.length,\n                     list.length - index);\n    return outgoing;\n  }",
    "right" : "static final public char[] splice(char list[],\n                                    char value[], int index) {\n    char outgoing[] = new char[list.length + value.length];\n    System.arraycopy(list, 0, outgoing, 0, index);\n    System.arraycopy(value, 0, outgoing, index, value.length);\n    System.arraycopy(list, index, outgoing, index + value.length,\n                     list.length - index);\n    return outgoing;\n  }",
    "info" : "MethodDeclaration[255965-256382]:MethodDeclaration[255965-256382]"
  }, {
    "left" : "static final public int[] splice(int list[],\n                                   int value, int index) {\n    int outgoing[] = new int[list.length + 1];\n    System.arraycopy(list, 0, outgoing, 0, index);\n    outgoing[index] = value;\n    System.arraycopy(list, index, outgoing, index + 1,\n                     list.length - index);\n    return outgoing;\n  }",
    "right" : "static final public int[] splice(int list[],\n                                   int value, int index) {\n    int outgoing[] = new int[list.length + 1];\n    System.arraycopy(list, 0, outgoing, 0, index);\n    outgoing[index] = value;\n    System.arraycopy(list, index, outgoing, index + 1,\n                     list.length - index);\n    return outgoing;\n  }",
    "info" : "MethodDeclaration[256386-256739]:MethodDeclaration[256386-256739]"
  }, {
    "left" : "public list int, value int, index int) : ",
    "right" : "public list int, value int, index int) : ",
    "info" : "MethodDeclaration[256743-257154]:MethodDeclaration[256743-257154]"
  }, {
    "left" : "public list float, value float, index int) : ",
    "right" : "public list float, value float, index int) : ",
    "info" : "MethodDeclaration[257158-257523]:MethodDeclaration[257158-257523]"
  }, {
    "left" : "public list float, value float, index int) : ",
    "right" : "public list float, value float, index int) : ",
    "info" : "MethodDeclaration[257527-257950]:MethodDeclaration[257527-257950]"
  }, {
    "left" : "static final public String[] splice(String list[],\n                                      String value, int index) {\n    String outgoing[] = new String[list.length + 1];\n    System.arraycopy(list, 0, outgoing, 0, index);\n    outgoing[index] = value;\n    System.arraycopy(list, index, outgoing, index + 1,\n                     list.length - index);\n    return outgoing;\n  }",
    "right" : "static final public String[] splice(String list[],\n                                      String value, int index) {\n    String outgoing[] = new String[list.length + 1];\n    System.arraycopy(list, 0, outgoing, 0, index);\n    outgoing[index] = value;\n    System.arraycopy(list, index, outgoing, index + 1,\n                     list.length - index);\n    return outgoing;\n  }",
    "info" : "MethodDeclaration[257954-258325]:MethodDeclaration[257954-258325]"
  }, {
    "left" : "static final public String[] splice(String list[],\n                                      String value[], int index) {\n    String outgoing[] = new String[list.length + value.length];\n    System.arraycopy(list, 0, outgoing, 0, index);\n    System.arraycopy(value, 0, outgoing, index, value.length);\n    System.arraycopy(list, index, outgoing, index + value.length,\n                     list.length - index);\n    return outgoing;\n  }",
    "right" : "static final public String[] splice(String list[],\n                                      String value[], int index) {\n    String outgoing[] = new String[list.length + value.length];\n    System.arraycopy(list, 0, outgoing, 0, index);\n    System.arraycopy(value, 0, outgoing, index, value.length);\n    System.arraycopy(list, index, outgoing, index + value.length,\n                     list.length - index);\n    return outgoing;\n  }",
    "info" : "MethodDeclaration[258329-258758]:MethodDeclaration[258329-258758]"
  }, {
    "left" : "static final public Object splice(Object list, Object value, int index) {\n    Class<?> type = list.getClass().getComponentType();\n    Object outgoing = null;\n    int length = Array.getLength(list);\n\n    // check whether item being spliced in is an array\n    if (value.getClass().getName().charAt(0) == '[') {\n      int vlength = Array.getLength(value);\n      outgoing = Array.newInstance(type, length + vlength);\n      System.arraycopy(list, 0, outgoing, 0, index);\n      System.arraycopy(value, 0, outgoing, index, vlength);\n      System.arraycopy(list, index, outgoing, index + vlength, length - index);\n\n    } else {\n      outgoing = Array.newInstance(type, length + 1);\n      System.arraycopy(list, 0, outgoing, 0, index);\n      Array.set(outgoing, index, value);\n      System.arraycopy(list, index, outgoing, index + 1, length - index);\n    }\n    return outgoing;\n  }",
    "right" : "static final public Object splice(Object list, Object value, int index) {\n    Class<?> type = list.getClass().getComponentType();\n    Object outgoing = null;\n    int length = Array.getLength(list);\n\n    // check whether item being spliced in is an array\n    if (value.getClass().getName().charAt(0) == '[') {\n      int vlength = Array.getLength(value);\n      outgoing = Array.newInstance(type, length + vlength);\n      System.arraycopy(list, 0, outgoing, 0, index);\n      System.arraycopy(value, 0, outgoing, index, vlength);\n      System.arraycopy(list, index, outgoing, index + vlength, length - index);\n\n    } else {\n      outgoing = Array.newInstance(type, length + 1);\n      System.arraycopy(list, 0, outgoing, 0, index);\n      Array.set(outgoing, index, value);\n      System.arraycopy(list, index, outgoing, index + 1, length - index);\n    }\n    return outgoing;\n  }",
    "info" : "MethodDeclaration[258762-259634]:MethodDeclaration[258762-259634]"
  }, {
    "left" : "static public boolean[] subset(boolean list[], int start) {\n    return subset(list, start, list.length - start);\n  }",
    "right" : "static public boolean[] subset(boolean list[], int start) {\n    return subset(list, start, list.length - start);\n  }",
    "info" : "MethodDeclaration[259638-259754]:MethodDeclaration[259638-259754]"
  }, {
    "left" : "public list boolean, start int, count int) : ",
    "right" : "public list boolean, start int, count int) : ",
    "info" : "MethodDeclaration[259757-260959]:MethodDeclaration[259757-260959]"
  }, {
    "left" : "static public byte[] subset(byte list[], int start) {\n    return subset(list, start, list.length - start);\n  }",
    "right" : "static public byte[] subset(byte list[], int start) {\n    return subset(list, start, list.length - start);\n  }",
    "info" : "MethodDeclaration[260963-261073]:MethodDeclaration[260963-261073]"
  }, {
    "left" : "static public byte[] subset(byte list[], int start, int count) {\n    byte output[] = new byte[count];\n    System.arraycopy(list, start, output, 0, count);\n    return output;\n  }",
    "right" : "static public byte[] subset(byte list[], int start, int count) {\n    byte output[] = new byte[count];\n    System.arraycopy(list, start, output, 0, count);\n    return output;\n  }",
    "info" : "MethodDeclaration[261077-261254]:MethodDeclaration[261077-261254]"
  }, {
    "left" : "static public char[] subset(char list[], int start) {\n    return subset(list, start, list.length - start);\n  }",
    "right" : "static public char[] subset(char list[], int start) {\n    return subset(list, start, list.length - start);\n  }",
    "info" : "MethodDeclaration[261259-261369]:MethodDeclaration[261259-261369]"
  }, {
    "left" : "public list char, start int, count int) : ",
    "right" : "public list char, start int, count int) : ",
    "info" : "MethodDeclaration[261373-261550]:MethodDeclaration[261373-261550]"
  }, {
    "left" : "public list int, start int) : ",
    "right" : "public list int, start int) : ",
    "info" : "MethodDeclaration[261554-261662]:MethodDeclaration[261554-261662]"
  }, {
    "left" : "public list int, start int, count int) : ",
    "right" : "public list int, start int, count int) : ",
    "info" : "MethodDeclaration[261666-261839]:MethodDeclaration[261666-261839]"
  }, {
    "left" : "static public float[] subset(float list[], int start) {\n    return subset(list, start, list.length - start);\n  }",
    "right" : "static public float[] subset(float list[], int start) {\n    return subset(list, start, list.length - start);\n  }",
    "info" : "MethodDeclaration[261843-261955]:MethodDeclaration[261843-261955]"
  }, {
    "left" : "static public float[] subset(float list[], int start, int count) {\n    float output[] = new float[count];\n    System.arraycopy(list, start, output, 0, count);\n    return output;\n  }",
    "right" : "static public float[] subset(float list[], int start, int count) {\n    float output[] = new float[count];\n    System.arraycopy(list, start, output, 0, count);\n    return output;\n  }",
    "info" : "MethodDeclaration[261959-262140]:MethodDeclaration[261959-262140]"
  }, {
    "left" : "public list String, start int) : ",
    "right" : "public list String, start int) : ",
    "info" : "MethodDeclaration[262145-262259]:MethodDeclaration[262145-262259]"
  }, {
    "left" : "static public String[] subset(String list[], int start, int count) {\n    String output[] = new String[count];\n    System.arraycopy(list, start, output, 0, count);\n    return output;\n  }",
    "right" : "static public String[] subset(String list[], int start, int count) {\n    String output[] = new String[count];\n    System.arraycopy(list, start, output, 0, count);\n    return output;\n  }",
    "info" : "MethodDeclaration[262263-262448]:MethodDeclaration[262263-262448]"
  }, {
    "left" : "public list Object, start int) : Object",
    "right" : "public list Object, start int) : Object",
    "info" : "MethodDeclaration[262453-262598]:MethodDeclaration[262453-262598]"
  }, {
    "left" : "static public Object subset(Object list, int start, int count) {\n    Class<?> type = list.getClass().getComponentType();\n    Object outgoing = Array.newInstance(type, count);\n    System.arraycopy(list, start, outgoing, 0, count);\n    return outgoing;\n  }",
    "right" : "static public Object subset(Object list, int start, int count) {\n    Class<?> type = list.getClass().getComponentType();\n    Object outgoing = Array.newInstance(type, count);\n    System.arraycopy(list, start, outgoing, 0, count);\n    return outgoing;\n  }",
    "info" : "MethodDeclaration[262602-262856]:MethodDeclaration[262602-262856]"
  }, {
    "left" : "/**\n   * ( begin auto-generated from concat.xml )\n   *\n   * Concatenates two arrays. For example, concatenating the array { 1, 2, 3\n   * } and the array { 4, 5, 6 } yields { 1, 2, 3, 4, 5, 6 }. Both parameters\n   * must be arrays of the same datatype.\n   * <br/> <br/>\n   * When using an array of objects, the data returned from the function must\n   * be cast to the object array's data type. For example: <em>SomeClass[]\n   * items = (SomeClass[]) concat(array1, array2)</em>.\n   *\n   * ( end auto-generated )\n  * @webref data:array_functions\n  * @param a first array to concatenate\n  * @param b second array to concatenate\n  * @see PApplet#splice(boolean[], boolean, int)\n  * @see PApplet#arrayCopy(Object, int, Object, int, int)\n  */\n  static public boolean[] concat(boolean a[], boolean b[]) {\n    boolean c[] = new boolean[a.length + b.length];\n    System.arraycopy(a, 0, c, 0, a.length);\n    System.arraycopy(b, 0, c, a.length, b.length);\n    return c;\n  }",
    "right" : "/**\n   * ( begin auto-generated from concat.xml )\n   *\n   * Concatenates two arrays. For example, concatenating the array { 1, 2, 3\n   * } and the array { 4, 5, 6 } yields { 1, 2, 3, 4, 5, 6 }. Both parameters\n   * must be arrays of the same datatype.\n   * <br/> <br/>\n   * When using an array of objects, the data returned from the function must\n   * be cast to the object array's data type. For example: <em>SomeClass[]\n   * items = (SomeClass[]) concat(array1, array2)</em>.\n   *\n   * ( end auto-generated )\n  * @webref data:array_functions\n  * @param a first array to concatenate\n  * @param b second array to concatenate\n  * @see PApplet#splice(boolean[], boolean, int)\n  * @see PApplet#arrayCopy(Object, int, Object, int, int)\n  */\n  static public boolean[] concat(boolean a[], boolean b[]) {\n    boolean c[] = new boolean[a.length + b.length];\n    System.arraycopy(a, 0, c, 0, a.length);\n    System.arraycopy(b, 0, c, a.length, b.length);\n    return c;\n  }",
    "info" : "MethodDeclaration[262860-263822]:MethodDeclaration[262860-263822]"
  }, {
    "left" : "public a byte, b byte) : ",
    "right" : "public a byte, b byte) : ",
    "info" : "MethodDeclaration[263826-264034]:MethodDeclaration[263826-264034]"
  }, {
    "left" : "public a char, b char) : ",
    "right" : "public a char, b char) : ",
    "info" : "MethodDeclaration[264038-264246]:MethodDeclaration[264038-264246]"
  }, {
    "left" : "static public int[] concat(int a[], int b[]) {\n    int c[] = new int[a.length + b.length];\n    System.arraycopy(a, 0, c, 0, a.length);\n    System.arraycopy(b, 0, c, a.length, b.length);\n    return c;\n  }",
    "right" : "static public int[] concat(int a[], int b[]) {\n    int c[] = new int[a.length + b.length];\n    System.arraycopy(a, 0, c, 0, a.length);\n    System.arraycopy(b, 0, c, a.length, b.length);\n    return c;\n  }",
    "info" : "MethodDeclaration[264250-264453]:MethodDeclaration[264250-264453]"
  }, {
    "left" : "static public float[] concat(float a[], float b[]) {\n    float c[] = new float[a.length + b.length];\n    System.arraycopy(a, 0, c, 0, a.length);\n    System.arraycopy(b, 0, c, a.length, b.length);\n    return c;\n  }",
    "right" : "static public float[] concat(float a[], float b[]) {\n    float c[] = new float[a.length + b.length];\n    System.arraycopy(a, 0, c, 0, a.length);\n    System.arraycopy(b, 0, c, a.length, b.length);\n    return c;\n  }",
    "info" : "MethodDeclaration[264457-264670]:MethodDeclaration[264457-264670]"
  }, {
    "left" : "static public String[] concat(String a[], String b[]) {\n    String c[] = new String[a.length + b.length];\n    System.arraycopy(a, 0, c, 0, a.length);\n    System.arraycopy(b, 0, c, a.length, b.length);\n    return c;\n  }",
    "right" : "static public String[] concat(String a[], String b[]) {\n    String c[] = new String[a.length + b.length];\n    System.arraycopy(a, 0, c, 0, a.length);\n    System.arraycopy(b, 0, c, a.length, b.length);\n    return c;\n  }",
    "info" : "MethodDeclaration[264674-264892]:MethodDeclaration[264674-264892]"
  }, {
    "left" : "static public Object concat(Object a, Object b) {\n    Class<?> type = a.getClass().getComponentType();\n    int alength = Array.getLength(a);\n    int blength = Array.getLength(b);\n    Object outgoing = Array.newInstance(type, alength + blength);\n    System.arraycopy(a, 0, outgoing, 0, alength);\n    System.arraycopy(b, 0, outgoing, alength, blength);\n    return outgoing;\n  }",
    "right" : "static public Object concat(Object a, Object b) {\n    Class<?> type = a.getClass().getComponentType();\n    int alength = Array.getLength(a);\n    int blength = Array.getLength(b);\n    Object outgoing = Array.newInstance(type, alength + blength);\n    System.arraycopy(a, 0, outgoing, 0, alength);\n    System.arraycopy(b, 0, outgoing, alength, blength);\n    return outgoing;\n  }",
    "info" : "MethodDeclaration[264896-265271]:MethodDeclaration[264896-265271]"
  }, {
    "left" : "/**\n   * ( begin auto-generated from reverse.xml )\n   *\n   * Reverses the order of an array.\n   *\n   * ( end auto-generated )\n  * @webref data:array_functions\n  * @param list booleans[], bytes[], chars[], ints[], floats[], or Strings[]\n  * @see PApplet#sort(String[], int)\n  */\n  static public boolean[] reverse(boolean list[]) {\n    boolean outgoing[] = new boolean[list.length];\n    int length1 = list.length - 1;\n    for (int i = 0; i < list.length; i++) {\n      outgoing[i] = list[length1 - i];\n    }\n    return outgoing;\n  }",
    "right" : "/**\n   * ( begin auto-generated from reverse.xml )\n   *\n   * Reverses the order of an array.\n   *\n   * ( end auto-generated )\n  * @webref data:array_functions\n  * @param list booleans[], bytes[], chars[], ints[], floats[], or Strings[]\n  * @see PApplet#sort(String[], int)\n  */\n  static public boolean[] reverse(boolean list[]) {\n    boolean outgoing[] = new boolean[list.length];\n    int length1 = list.length - 1;\n    for (int i = 0; i < list.length; i++) {\n      outgoing[i] = list[length1 - i];\n    }\n    return outgoing;\n  }",
    "info" : "MethodDeclaration[265281-265810]:MethodDeclaration[265281-265810]"
  }, {
    "left" : "static public byte[] reverse(byte list[]) {\n    byte outgoing[] = new byte[list.length];\n    int length1 = list.length - 1;\n    for (int i = 0; i < list.length; i++) {\n      outgoing[i] = list[length1 - i];\n    }\n    return outgoing;\n  }",
    "right" : "static public byte[] reverse(byte list[]) {\n    byte outgoing[] = new byte[list.length];\n    int length1 = list.length - 1;\n    for (int i = 0; i < list.length; i++) {\n      outgoing[i] = list[length1 - i];\n    }\n    return outgoing;\n  }",
    "info" : "MethodDeclaration[265814-266051]:MethodDeclaration[265814-266051]"
  }, {
    "left" : "public list char) : ",
    "right" : "public list char) : ",
    "info" : "MethodDeclaration[266055-266292]:MethodDeclaration[266055-266292]"
  }, {
    "left" : "static public int[] reverse(int list[]) {\n    int outgoing[] = new int[list.length];\n    int length1 = list.length - 1;\n    for (int i = 0; i < list.length; i++) {\n      outgoing[i] = list[length1 - i];\n    }\n    return outgoing;\n  }",
    "right" : "static public int[] reverse(int list[]) {\n    int outgoing[] = new int[list.length];\n    int length1 = list.length - 1;\n    for (int i = 0; i < list.length; i++) {\n      outgoing[i] = list[length1 - i];\n    }\n    return outgoing;\n  }",
    "info" : "MethodDeclaration[266296-266529]:MethodDeclaration[266296-266529]"
  }, {
    "left" : "static public float[] reverse(float list[]) {\n    float outgoing[] = new float[list.length];\n    int length1 = list.length - 1;\n    for (int i = 0; i < list.length; i++) {\n      outgoing[i] = list[length1 - i];\n    }\n    return outgoing;\n  }",
    "right" : "static public float[] reverse(float list[]) {\n    float outgoing[] = new float[list.length];\n    int length1 = list.length - 1;\n    for (int i = 0; i < list.length; i++) {\n      outgoing[i] = list[length1 - i];\n    }\n    return outgoing;\n  }",
    "info" : "MethodDeclaration[266533-266774]:MethodDeclaration[266533-266774]"
  }, {
    "left" : "static public String[] reverse(String list[]) {\n    String outgoing[] = new String[list.length];\n    int length1 = list.length - 1;\n    for (int i = 0; i < list.length; i++) {\n      outgoing[i] = list[length1 - i];\n    }\n    return outgoing;\n  }",
    "right" : "static public String[] reverse(String list[]) {\n    String outgoing[] = new String[list.length];\n    int length1 = list.length - 1;\n    for (int i = 0; i < list.length; i++) {\n      outgoing[i] = list[length1 - i];\n    }\n    return outgoing;\n  }",
    "info" : "MethodDeclaration[266778-267023]:MethodDeclaration[266778-267023]"
  }, {
    "left" : "public list Object) : Object",
    "right" : "public list Object) : Object",
    "info" : "MethodDeclaration[267027-267356]:MethodDeclaration[267027-267356]"
  }, {
    "left" : "/**\n   * ( begin auto-generated from trim.xml )\n   *\n   * Removes whitespace characters from the beginning and end of a String. In\n   * addition to standard whitespace characters such as space, carriage\n   * return, and tab, this function also removes the Unicode \"nbsp\" character.\n   *\n   * ( end auto-generated )\n   * @webref data:string_functions\n   * @param str any string\n   * @see PApplet#split(String, String)\n   * @see PApplet#join(String[], char)\n   */\n  static public String trim(String str) {\n    return str.replace('\\u00A0', ' ').trim();\n  }",
    "right" : "/**\n   * ( begin auto-generated from trim.xml )\n   *\n   * Removes whitespace characters from the beginning and end of a String. In\n   * addition to standard whitespace characters such as space, carriage\n   * return, and tab, this function also removes the Unicode \"nbsp\" character.\n   *\n   * ( end auto-generated )\n   * @webref data:string_functions\n   * @param str any string\n   * @see PApplet#split(String, String)\n   * @see PApplet#join(String[], char)\n   */\n  static public String trim(String str) {\n    return str.replace('\\u00A0', ' ').trim();\n  }",
    "info" : "MethodDeclaration[267443-267996]:MethodDeclaration[267443-267996]"
  }, {
    "left" : "public array ) : ",
    "right" : "public array ) : ",
    "info" : "MethodDeclaration[268000-268314]:MethodDeclaration[268000-268314]"
  }, {
    "left" : "public list , separator char) : String",
    "right" : "public list , separator char) : String",
    "info" : "MethodDeclaration[268319-269069]:MethodDeclaration[268319-269069]"
  }, {
    "left" : "public list , separator String) : String",
    "right" : "public list , separator String) : String",
    "info" : "MethodDeclaration[269074-269324]:MethodDeclaration[269074-269324]"
  }, {
    "left" : "public value String) : ",
    "right" : "public value String) : ",
    "info" : "MethodDeclaration[269329-269426]:MethodDeclaration[269329-269426]"
  }, {
    "left" : "public value String, delim String) : ",
    "right" : "public value String, delim String) : ",
    "info" : "MethodDeclaration[269431-270691]:MethodDeclaration[269431-270691]"
  }, {
    "left" : "public value String, delim char) : ",
    "right" : "public value String, delim char) : ",
    "info" : "MethodDeclaration[270696-273636]:MethodDeclaration[270696-273636]"
  }, {
    "left" : "static public String[] split(String value, String delim) {\n    ArrayList<String> items = new ArrayList<String>();\n    int index;\n    int offset = 0;\n    while ((index = value.indexOf(delim, offset)) != -1) {\n      items.add(value.substring(offset, index));\n      offset = index + delim.length();\n    }\n    items.add(value.substring(offset));\n    String[] outgoing = new String[items.size()];\n    items.toArray(outgoing);\n    return outgoing;\n  }",
    "right" : "static public String[] split(String value, String delim) {\n    ArrayList<String> items = new ArrayList<String>();\n    int index;\n    int offset = 0;\n    while ((index = value.indexOf(delim, offset)) != -1) {\n      items.add(value.substring(offset, index));\n      offset = index + delim.length();\n    }\n    items.add(value.substring(offset));\n    String[] outgoing = new String[items.size()];\n    items.toArray(outgoing);\n    return outgoing;\n  }",
    "info" : "MethodDeclaration[273641-274086]:MethodDeclaration[273641-274086]"
  }, {
    "left" : "static protected HashMap<String, Pattern> matchPatterns;",
    "right" : "static protected HashMap<String, Pattern> matchPatterns;",
    "info" : "FieldDeclaration[274091-274147]:FieldDeclaration[274091-274147]"
  }, {
    "left" : "static Pattern matchPattern(String regexp) {\n    Pattern p = null;\n    if (matchPatterns == null) {\n      matchPatterns = new HashMap<String, Pattern>();\n    } else {\n      p = matchPatterns.get(regexp);\n    }\n    if (p == null) {\n      if (matchPatterns.size() == 10) {\n        // Just clear out the match patterns here if more than 10 are being\n        // used. It's not terribly efficient, but changes that you have >10\n        // different match patterns are very slim, unless you're doing\n        // something really tricky (like custom match() methods), in which\n        // case match() won't be efficient anyway. (And you should just be\n        // using your own Java code.) The alternative is using a queue here,\n        // but that's a silly amount of work for negligible benefit.\n        matchPatterns.clear();\n      }\n      p = Pattern.compile(regexp, Pattern.MULTILINE | Pattern.DOTALL);\n      matchPatterns.put(regexp, p);\n    }\n    return p;\n  }",
    "right" : "static Pattern matchPattern(String regexp) {\n    Pattern p = null;\n    if (matchPatterns == null) {\n      matchPatterns = new HashMap<String, Pattern>();\n    } else {\n      p = matchPatterns.get(regexp);\n    }\n    if (p == null) {\n      if (matchPatterns.size() == 10) {\n        // Just clear out the match patterns here if more than 10 are being\n        // used. It's not terribly efficient, but changes that you have >10\n        // different match patterns are very slim, unless you're doing\n        // something really tricky (like custom match() methods), in which\n        // case match() won't be efficient anyway. (And you should just be\n        // using your own Java code.) The alternative is using a queue here,\n        // but that's a silly amount of work for negligible benefit.\n        matchPatterns.clear();\n      }\n      p = Pattern.compile(regexp, Pattern.MULTILINE | Pattern.DOTALL);\n      matchPatterns.put(regexp, p);\n    }\n    return p;\n  }",
    "info" : "MethodDeclaration[274151-275110]:MethodDeclaration[274151-275110]"
  }, {
    "left" : "public str String, regexp String) : ",
    "right" : "public str String, regexp String) : ",
    "info" : "MethodDeclaration[275115-277104]:MethodDeclaration[275115-277104]"
  }, {
    "left" : "/**\n   * ( begin auto-generated from matchAll.xml )\n   *\n   * This function is used to apply a regular expression to a piece of text,\n   * and return a list of matching groups (elements found inside parentheses)\n   * as a two-dimensional String array. No matches will return null. If no\n   * groups are specified in the regexp, but the sequence matches, a two\n   * dimensional array is still returned, but the second dimension is only of\n   * length one.<br />\n   * <br />\n   * To use the function, first check to see if the result is null. If the\n   * result is null, then the sequence did not match at all. If the sequence\n   * did match, a 2D array is returned. If there are groups (specified by\n   * sets of parentheses) in the regexp, then the contents of each will be\n   * returned in the array.\n   * Assuming, a loop with counter variable i, element [i][0] of a regexp\n   * match returns the entire matching string, and the match groups start at\n   * element [i][1] (the first group is [i][1], the second [i][2], and so\n   * on).<br />\n   * <br />\n   * The syntax can be found in the reference for Java's <a\n   * href=\"http://download.oracle.com/javase/6/docs/api/\">Pattern</a> class.\n   * For regular expression syntax, read the <a\n   * href=\"http://download.oracle.com/javase/tutorial/essential/regex/\">Java\n   * Tutorial</a> on the topic.\n   *\n   * ( end auto-generated )\n   * @webref data:string_functions\n   * @param str the String to be searched\n   * @param regexp the regexp to be used for matching\n   * @see PApplet#match(String, String)\n   * @see PApplet#split(String, String)\n   * @see PApplet#splitTokens(String, String)\n   * @see PApplet#join(String[], String)\n   * @see PApplet#trim(String)\n   */\n  static public String[][] matchAll(String str, String regexp) {\n    Pattern p = matchPattern(regexp);\n    Matcher m = p.matcher(str);\n    ArrayList<String[]> results = new ArrayList<String[]>();\n    int count = m.groupCount() + 1;\n    while (m.find()) {\n      String[] groups = new String[count];\n      for (int i = 0; i < count; i++) {\n        groups[i] = m.group(i);\n      }\n      results.add(groups);\n    }\n    if (results.isEmpty()) {\n      return null;\n    }\n    String[][] matches = new String[results.size()][count];\n    for (int i = 0; i < matches.length; i++) {\n      matches[i] = results.get(i);\n    }\n    return matches;\n  }",
    "right" : "/**\n   * ( begin auto-generated from matchAll.xml )\n   *\n   * This function is used to apply a regular expression to a piece of text,\n   * and return a list of matching groups (elements found inside parentheses)\n   * as a two-dimensional String array. No matches will return null. If no\n   * groups are specified in the regexp, but the sequence matches, a two\n   * dimensional array is still returned, but the second dimension is only of\n   * length one.<br />\n   * <br />\n   * To use the function, first check to see if the result is null. If the\n   * result is null, then the sequence did not match at all. If the sequence\n   * did match, a 2D array is returned. If there are groups (specified by\n   * sets of parentheses) in the regexp, then the contents of each will be\n   * returned in the array.\n   * Assuming, a loop with counter variable i, element [i][0] of a regexp\n   * match returns the entire matching string, and the match groups start at\n   * element [i][1] (the first group is [i][1], the second [i][2], and so\n   * on).<br />\n   * <br />\n   * The syntax can be found in the reference for Java's <a\n   * href=\"http://download.oracle.com/javase/6/docs/api/\">Pattern</a> class.\n   * For regular expression syntax, read the <a\n   * href=\"http://download.oracle.com/javase/tutorial/essential/regex/\">Java\n   * Tutorial</a> on the topic.\n   *\n   * ( end auto-generated )\n   * @webref data:string_functions\n   * @param str the String to be searched\n   * @param regexp the regexp to be used for matching\n   * @see PApplet#match(String, String)\n   * @see PApplet#split(String, String)\n   * @see PApplet#splitTokens(String, String)\n   * @see PApplet#join(String[], String)\n   * @see PApplet#trim(String)\n   */\n  static public String[][] matchAll(String str, String regexp) {\n    Pattern p = matchPattern(regexp);\n    Matcher m = p.matcher(str);\n    ArrayList<String[]> results = new ArrayList<String[]>();\n    int count = m.groupCount() + 1;\n    while (m.find()) {\n      String[] groups = new String[count];\n      for (int i = 0; i < count; i++) {\n        groups[i] = m.group(i);\n      }\n      results.add(groups);\n    }\n    if (results.isEmpty()) {\n      return null;\n    }\n    String[][] matches = new String[results.size()][count];\n    for (int i = 0; i < matches.length; i++) {\n      matches[i] = results.get(i);\n    }\n    return matches;\n  }",
    "info" : "MethodDeclaration[277109-279462]:MethodDeclaration[277109-279462]"
  }, {
    "left" : "/**\n   * <p>Convert an integer to a boolean. Because of how Java handles upgrading\n   * numbers, this will also cover byte and char (as they will upgrade to\n   * an int without any sort of explicit cast).</p>\n   * <p>The preprocessor will convert boolean(what) to parseBoolean(what).</p>\n   * @return false if 0, true if any other number\n   */\n  static final public boolean parseBoolean(int what) {\n    return (what != 0);\n  }",
    "right" : "/**\n   * <p>Convert an integer to a boolean. Because of how Java handles upgrading\n   * numbers, this will also cover byte and char (as they will upgrade to\n   * an int without any sort of explicit cast).</p>\n   * <p>The preprocessor will convert boolean(what) to parseBoolean(what).</p>\n   * @return false if 0, true if any other number\n   */\n  static final public boolean parseBoolean(int what) {\n    return (what != 0);\n  }",
    "info" : "MethodDeclaration[279860-280286]:MethodDeclaration[279860-280286]"
  }, {
    "left" : "public what String) : boolean",
    "right" : "public what String) : boolean",
    "info" : "MethodDeclaration[280434-280665]:MethodDeclaration[280434-280665]"
  }, {
    "left" : "public what int) : ",
    "right" : "public what int) : ",
    "info" : "MethodDeclaration[281585-281983]:MethodDeclaration[281585-281983]"
  }, {
    "left" : "static final public boolean[] parseBoolean(String what[]) {\n    boolean outgoing[] = new boolean[what.length];\n    for (int i = 0; i < what.length; i++) {\n      outgoing[i] = Boolean.parseBoolean(what[i]);\n    }\n    return outgoing;\n  }",
    "right" : "static final public boolean[] parseBoolean(String what[]) {\n    boolean outgoing[] = new boolean[what.length];\n    for (int i = 0; i < what.length; i++) {\n      outgoing[i] = Boolean.parseBoolean(what[i]);\n    }\n    return outgoing;\n  }",
    "info" : "MethodDeclaration[282293-282529]:MethodDeclaration[282293-282529]"
  }, {
    "left" : "public what boolean) : byte",
    "right" : "public what boolean) : byte",
    "info" : "MethodDeclaration[282607-282692]:MethodDeclaration[282607-282692]"
  }, {
    "left" : "static final public byte parseByte(char what) {\n    return (byte) what;\n  }",
    "right" : "static final public byte parseByte(char what) {\n    return (byte) what;\n  }",
    "info" : "MethodDeclaration[282696-282771]:MethodDeclaration[282696-282771]"
  }, {
    "left" : "public what int) : byte",
    "right" : "public what int) : byte",
    "info" : "MethodDeclaration[282775-282849]:MethodDeclaration[282775-282849]"
  }, {
    "left" : "public what float) : byte",
    "right" : "public what float) : byte",
    "info" : "MethodDeclaration[282853-282929]:MethodDeclaration[282853-282929]"
  }, {
    "left" : "static final public byte[] parseByte(boolean what[]) {\n    byte outgoing[] = new byte[what.length];\n    for (int i = 0; i < what.length; i++) {\n      outgoing[i] = what[i] ? (byte)1 : 0;\n    }\n    return outgoing;\n  }",
    "right" : "static final public byte[] parseByte(boolean what[]) {\n    byte outgoing[] = new byte[what.length];\n    for (int i = 0; i < what.length; i++) {\n      outgoing[i] = what[i] ? (byte)1 : 0;\n    }\n    return outgoing;\n  }",
    "info" : "MethodDeclaration[283147-283364]:MethodDeclaration[283147-283364]"
  }, {
    "left" : "static final public byte[] parseByte(char what[]) {\n    byte outgoing[] = new byte[what.length];\n    for (int i = 0; i < what.length; i++) {\n      outgoing[i] = (byte) what[i];\n    }\n    return outgoing;\n  }",
    "right" : "static final public byte[] parseByte(char what[]) {\n    byte outgoing[] = new byte[what.length];\n    for (int i = 0; i < what.length; i++) {\n      outgoing[i] = (byte) what[i];\n    }\n    return outgoing;\n  }",
    "info" : "MethodDeclaration[283368-283575]:MethodDeclaration[283368-283575]"
  }, {
    "left" : "static final public byte[] parseByte(int what[]) {\n    byte outgoing[] = new byte[what.length];\n    for (int i = 0; i < what.length; i++) {\n      outgoing[i] = (byte) what[i];\n    }\n    return outgoing;\n  }",
    "right" : "static final public byte[] parseByte(int what[]) {\n    byte outgoing[] = new byte[what.length];\n    for (int i = 0; i < what.length; i++) {\n      outgoing[i] = (byte) what[i];\n    }\n    return outgoing;\n  }",
    "info" : "MethodDeclaration[283579-283785]:MethodDeclaration[283579-283785]"
  }, {
    "left" : "static final public byte[] parseByte(float what[]) {\n    byte outgoing[] = new byte[what.length];\n    for (int i = 0; i < what.length; i++) {\n      outgoing[i] = (byte) what[i];\n    }\n    return outgoing;\n  }",
    "right" : "static final public byte[] parseByte(float what[]) {\n    byte outgoing[] = new byte[what.length];\n    for (int i = 0; i < what.length; i++) {\n      outgoing[i] = (byte) what[i];\n    }\n    return outgoing;\n  }",
    "info" : "MethodDeclaration[283789-283997]:MethodDeclaration[283789-283997]"
  }, {
    "left" : "public what byte) : char",
    "right" : "public what byte) : char",
    "info" : "MethodDeclaration[284442-284526]:MethodDeclaration[284442-284526]"
  }, {
    "left" : "public what int) : char",
    "right" : "public what int) : char",
    "info" : "MethodDeclaration[284530-284604]:MethodDeclaration[284530-284604]"
  }, {
    "left" : "public what byte) : ",
    "right" : "public what byte) : ",
    "info" : "MethodDeclaration[285142-285358]:MethodDeclaration[285142-285358]"
  }, {
    "left" : "public what int) : ",
    "right" : "public what int) : ",
    "info" : "MethodDeclaration[285362-285568]:MethodDeclaration[285362-285568]"
  }, {
    "left" : "static final public int parseInt(boolean what) {\n    return what ? 1 : 0;\n  }",
    "right" : "static final public int parseInt(boolean what) {\n    return what ? 1 : 0;\n  }",
    "info" : "MethodDeclaration[286130-286207]:MethodDeclaration[286130-286207]"
  }, {
    "left" : "public what byte) : int",
    "right" : "public what byte) : int",
    "info" : "MethodDeclaration[286211-286356]:MethodDeclaration[286211-286356]"
  }, {
    "left" : "/**\n   * Note that parseInt('5') is unlike String in the sense that it\n   * won't return 5, but the ascii value. This is because ((int) someChar)\n   * returns the ascii value, and parseInt() is just longhand for the cast.\n   */\n  static final public int parseInt(char what) {\n    return what;\n  }",
    "right" : "/**\n   * Note that parseInt('5') is unlike String in the sense that it\n   * won't return 5, but the ascii value. This is because ((int) someChar)\n   * returns the ascii value, and parseInt() is just longhand for the cast.\n   */\n  static final public int parseInt(char what) {\n    return what;\n  }",
    "info" : "MethodDeclaration[286360-286656]:MethodDeclaration[286360-286656]"
  }, {
    "left" : "/**\n   * Same as floor(), or an (int) cast.\n   */\n  static final public int parseInt(float what) {\n    return (int) what;\n  }",
    "right" : "/**\n   * Same as floor(), or an (int) cast.\n   */\n  static final public int parseInt(float what) {\n    return (int) what;\n  }",
    "info" : "MethodDeclaration[286660-286785]:MethodDeclaration[286660-286785]"
  }, {
    "left" : "/**\n   * Parse a String into an int value. Returns 0 if the value is bad.\n   */\n  static final public int parseInt(String what) {\n    return parseInt(what, 0);\n  }",
    "right" : "/**\n   * Parse a String into an int value. Returns 0 if the value is bad.\n   */\n  static final public int parseInt(String what) {\n    return parseInt(what, 0);\n  }",
    "info" : "MethodDeclaration[286789-286952]:MethodDeclaration[286789-286952]"
  }, {
    "left" : "/**\n   * Parse a String to an int, and provide an alternate value that\n   * should be used when the number is invalid.\n   */\n  static final public int parseInt(String what, int otherwise) {\n    try {\n      int offset = what.indexOf('.');\n      if (offset == -1) {\n        return Integer.parseInt(what);\n      } else {\n        return Integer.parseInt(what.substring(0, offset));\n      }\n    } catch (NumberFormatException e) { }\n    return otherwise;\n  }",
    "right" : "/**\n   * Parse a String to an int, and provide an alternate value that\n   * should be used when the number is invalid.\n   */\n  static final public int parseInt(String what, int otherwise) {\n    try {\n      int offset = what.indexOf('.');\n      if (offset == -1) {\n        return Integer.parseInt(what);\n      } else {\n        return Integer.parseInt(what.substring(0, offset));\n      }\n    } catch (NumberFormatException e) { }\n    return otherwise;\n  }",
    "info" : "MethodDeclaration[286956-287409]:MethodDeclaration[286956-287409]"
  }, {
    "left" : "static final public int[] parseInt(boolean what[]) {\n    int list[] = new int[what.length];\n    for (int i = 0; i < what.length; i++) {\n      list[i] = what[i] ? 1 : 0;\n    }\n    return list;\n  }",
    "right" : "static final public int[] parseInt(boolean what[]) {\n    int list[] = new int[what.length];\n    for (int i = 0; i < what.length; i++) {\n      list[i] = what[i] ? 1 : 0;\n    }\n    return list;\n  }",
    "info" : "MethodDeclaration[287487-287682]:MethodDeclaration[287487-287682]"
  }, {
    "left" : "static final public int[] parseInt(byte what[]) {  // note this unsigns\n    int list[] = new int[what.length];\n    for (int i = 0; i < what.length; i++) {\n      list[i] = (what[i] & 0xff);\n    }\n    return list;\n  }",
    "right" : "static final public int[] parseInt(byte what[]) {  // note this unsigns\n    int list[] = new int[what.length];\n    for (int i = 0; i < what.length; i++) {\n      list[i] = (what[i] & 0xff);\n    }\n    return list;\n  }",
    "info" : "MethodDeclaration[287686-287901]:MethodDeclaration[287686-287901]"
  }, {
    "left" : "static final public int[] parseInt(char what[]) {\n    int list[] = new int[what.length];\n    for (int i = 0; i < what.length; i++) {\n      list[i] = what[i];\n    }\n    return list;\n  }",
    "right" : "static final public int[] parseInt(char what[]) {\n    int list[] = new int[what.length];\n    for (int i = 0; i < what.length; i++) {\n      list[i] = what[i];\n    }\n    return list;\n  }",
    "info" : "MethodDeclaration[287905-288089]:MethodDeclaration[287905-288089]"
  }, {
    "left" : "public what float) : ",
    "right" : "public what float) : ",
    "info" : "MethodDeclaration[288093-288283]:MethodDeclaration[288093-288283]"
  }, {
    "left" : "public what String) : ",
    "right" : "public what String) : ",
    "info" : "MethodDeclaration[288287-288643]:MethodDeclaration[288287-288643]"
  }, {
    "left" : "public what String, missing int) : ",
    "right" : "public what String, missing int) : ",
    "info" : "MethodDeclaration[288647-289312]:MethodDeclaration[288647-289312]"
  }, {
    "left" : "/**\n   * Convert an int to a float value. Also handles bytes because of\n   * Java's rules for upgrading values.\n   */\n  static final public float parseFloat(int what) {  // also handles byte\n    return what;\n  }",
    "right" : "/**\n   * Convert an int to a float value. Also handles bytes because of\n   * Java's rules for upgrading values.\n   */\n  static final public float parseFloat(int what) {  // also handles byte\n    return what;\n  }",
    "info" : "MethodDeclaration[289485-289696]:MethodDeclaration[289485-289696]"
  }, {
    "left" : "static final public float parseFloat(String what) {\n    return parseFloat(what, Float.NaN);\n  }",
    "right" : "static final public float parseFloat(String what) {\n    return parseFloat(what, Float.NaN);\n  }",
    "info" : "MethodDeclaration[289700-289795]:MethodDeclaration[289700-289795]"
  }, {
    "left" : "static final public float parseFloat(String what, float otherwise) {\n    try {\n      return new Float(what).floatValue();\n    } catch (NumberFormatException e) { }\n\n    return otherwise;\n  }",
    "right" : "static final public float parseFloat(String what, float otherwise) {\n    try {\n      return new Float(what).floatValue();\n    } catch (NumberFormatException e) { }\n\n    return otherwise;\n  }",
    "info" : "MethodDeclaration[289799-289989]:MethodDeclaration[289799-289989]"
  }, {
    "left" : "public what byte) : ",
    "right" : "public what byte) : ",
    "info" : "MethodDeclaration[290511-290715]:MethodDeclaration[290511-290715]"
  }, {
    "left" : "static final public float[] parseFloat(int what[]) {\n    float floaties[] = new float[what.length];\n    for (int i = 0; i < what.length; i++) {\n      floaties[i] = what[i];\n    }\n    return floaties;\n  }",
    "right" : "static final public float[] parseFloat(int what[]) {\n    float floaties[] = new float[what.length];\n    for (int i = 0; i < what.length; i++) {\n      floaties[i] = what[i];\n    }\n    return floaties;\n  }",
    "info" : "MethodDeclaration[290719-290922]:MethodDeclaration[290719-290922]"
  }, {
    "left" : "public what String) : ",
    "right" : "public what String) : ",
    "info" : "MethodDeclaration[290926-291025]:MethodDeclaration[290926-291025]"
  }, {
    "left" : "public what String, missing float) : ",
    "right" : "public what String, missing float) : ",
    "info" : "MethodDeclaration[291029-291361]:MethodDeclaration[291029-291361]"
  }, {
    "left" : "static final public String str(boolean x) {\n    return String.valueOf(x);\n  }",
    "right" : "static final public String str(boolean x) {\n    return String.valueOf(x);\n  }",
    "info" : "MethodDeclaration[291439-291516]:MethodDeclaration[291439-291516]"
  }, {
    "left" : "static final public String str(byte x) {\n    return String.valueOf(x);\n  }",
    "right" : "static final public String str(byte x) {\n    return String.valueOf(x);\n  }",
    "info" : "MethodDeclaration[291520-291594]:MethodDeclaration[291520-291594]"
  }, {
    "left" : "static final public String str(char x) {\n    return String.valueOf(x);\n  }",
    "right" : "static final public String str(char x) {\n    return String.valueOf(x);\n  }",
    "info" : "MethodDeclaration[291598-291672]:MethodDeclaration[291598-291672]"
  }, {
    "left" : "public x int) : String",
    "right" : "public x int) : String",
    "info" : "MethodDeclaration[291676-291749]:MethodDeclaration[291676-291749]"
  }, {
    "left" : "static final public String str(float x) {\n    return String.valueOf(x);\n  }",
    "right" : "static final public String str(float x) {\n    return String.valueOf(x);\n  }",
    "info" : "MethodDeclaration[291753-291828]:MethodDeclaration[291753-291828]"
  }, {
    "left" : "public x boolean) : ",
    "right" : "public x boolean) : ",
    "info" : "MethodDeclaration[291906-292078]:MethodDeclaration[291906-292078]"
  }, {
    "left" : "static final public String[] str(byte x[]) {\n    String s[] = new String[x.length];\n    for (int i = 0; i < x.length; i++) s[i] = String.valueOf(x[i]);\n    return s;\n  }",
    "right" : "static final public String[] str(byte x[]) {\n    String s[] = new String[x.length];\n    for (int i = 0; i < x.length; i++) s[i] = String.valueOf(x[i]);\n    return s;\n  }",
    "info" : "MethodDeclaration[292082-292251]:MethodDeclaration[292082-292251]"
  }, {
    "left" : "public x char) : ",
    "right" : "public x char) : ",
    "info" : "MethodDeclaration[292255-292424]:MethodDeclaration[292255-292424]"
  }, {
    "left" : "static final public String[] str(int x[]) {\n    String s[] = new String[x.length];\n    for (int i = 0; i < x.length; i++) s[i] = String.valueOf(x[i]);\n    return s;\n  }",
    "right" : "static final public String[] str(int x[]) {\n    String s[] = new String[x.length];\n    for (int i = 0; i < x.length; i++) s[i] = String.valueOf(x[i]);\n    return s;\n  }",
    "info" : "MethodDeclaration[292428-292596]:MethodDeclaration[292428-292596]"
  }, {
    "left" : "static final public String[] str(float x[]) {\n    String s[] = new String[x.length];\n    for (int i = 0; i < x.length; i++) s[i] = String.valueOf(x[i]);\n    return s;\n  }",
    "right" : "static final public String[] str(float x[]) {\n    String s[] = new String[x.length];\n    for (int i = 0; i < x.length; i++) s[i] = String.valueOf(x[i]);\n    return s;\n  }",
    "info" : "MethodDeclaration[292600-292770]:MethodDeclaration[292600-292770]"
  }, {
    "left" : "",
    "right" : "",
    "info" : "FieldDeclaration[292870-292948]:FieldDeclaration[292870-292948]"
  }, {
    "left" : "static private int int_nf_digits;",
    "right" : "static private int int_nf_digits;",
    "info" : "FieldDeclaration[292951-292984]:FieldDeclaration[292951-292984]"
  }, {
    "left" : "static private boolean int_nf_commas;",
    "right" : "static private boolean int_nf_commas;",
    "info" : "FieldDeclaration[292987-293024]:FieldDeclaration[292987-293024]"
  }, {
    "left" : "static public String[] nf(int num[], int digits) {\n    String formatted[] = new String[num.length];\n    for (int i = 0; i < formatted.length; i++) {\n      formatted[i] = nf(num[i], digits);\n    }\n    return formatted;\n  }",
    "right" : "static public String[] nf(int num[], int digits) {\n    String formatted[] = new String[num.length];\n    for (int i = 0; i < formatted.length; i++) {\n      formatted[i] = nf(num[i], digits);\n    }\n    return formatted;\n  }",
    "info" : "MethodDeclaration[293028-293249]:MethodDeclaration[293028-293249]"
  }, {
    "left" : "public num int, digits int) : String",
    "right" : "public num int, digits int) : String",
    "info" : "MethodDeclaration[293253-294604]:MethodDeclaration[293253-294604]"
  }, {
    "left" : "/**\n   * ( begin auto-generated from nfc.xml )\n   *\n   * Utility function for formatting numbers into strings and placing\n   * appropriate commas to mark units of 1000. There are two versions, one\n   * for formatting ints and one for formatting an array of ints. The value\n   * for the <b>digits</b> parameter should always be a positive integer.\n   * <br/> <br/>\n   * For a non-US locale, this will insert periods instead of commas, or\n   * whatever is apprioriate for that region.\n   *\n   * ( end auto-generated )\n * @webref data:string_functions\n * @param num the number(s) to format\n * @see PApplet#nf(float, int, int)\n * @see PApplet#nfp(float, int, int)\n * @see PApplet#nfs(float, int, int)\n */\n  static public String[] nfc(int num[]) {\n    String formatted[] = new String[num.length];\n    for (int i = 0; i < formatted.length; i++) {\n      formatted[i] = nfc(num[i]);\n    }\n    return formatted;\n  }",
    "right" : "/**\n   * ( begin auto-generated from nfc.xml )\n   *\n   * Utility function for formatting numbers into strings and placing\n   * appropriate commas to mark units of 1000. There are two versions, one\n   * for formatting ints and one for formatting an array of ints. The value\n   * for the <b>digits</b> parameter should always be a positive integer.\n   * <br/> <br/>\n   * For a non-US locale, this will insert periods instead of commas, or\n   * whatever is apprioriate for that region.\n   *\n   * ( end auto-generated )\n * @webref data:string_functions\n * @param num the number(s) to format\n * @see PApplet#nf(float, int, int)\n * @see PApplet#nfp(float, int, int)\n * @see PApplet#nfs(float, int, int)\n */\n  static public String[] nfc(int num[]) {\n    String formatted[] = new String[num.length];\n    for (int i = 0; i < formatted.length; i++) {\n      formatted[i] = nfc(num[i]);\n    }\n    return formatted;\n  }",
    "info" : "MethodDeclaration[294606-295512]:MethodDeclaration[294606-295512]"
  }, {
    "left" : "/**\n   * nfc() or \"number format with commas\". This is an unfortunate misnomer\n   * because in locales where a comma is not the separator for numbers, it\n   * won't actually be outputting a comma, it'll use whatever makes sense for\n   * the locale.\n   */\n  static public String nfc(int num) {\n    if ((int_nf != null) &&\n        (int_nf_digits == 0) &&\n        int_nf_commas) {\n      return int_nf.format(num);\n    }\n\n    int_nf = NumberFormat.getInstance();\n    int_nf.setGroupingUsed(true);\n    int_nf_commas = true;\n    int_nf.setMinimumIntegerDigits(0);\n    int_nf_digits = 0;\n    return int_nf.format(num);\n  }",
    "right" : "/**\n   * nfc() or \"number format with commas\". This is an unfortunate misnomer\n   * because in locales where a comma is not the separator for numbers, it\n   * won't actually be outputting a comma, it'll use whatever makes sense for\n   * the locale.\n   */\n  static public String nfc(int num) {\n    if ((int_nf != null) &&\n        (int_nf_digits == 0) &&\n        int_nf_commas) {\n      return int_nf.format(num);\n    }\n\n    int_nf = NumberFormat.getInstance();\n    int_nf.setGroupingUsed(true);\n    int_nf_commas = true;\n    int_nf.setMinimumIntegerDigits(0);\n    int_nf_digits = 0;\n    return int_nf.format(num);\n  }",
    "info" : "MethodDeclaration[295517-296132]:MethodDeclaration[295517-296132]"
  }, {
    "left" : "public num int, digits int) : String",
    "right" : "public num int, digits int) : String",
    "info" : "MethodDeclaration[296368-297229]:MethodDeclaration[296368-297229]"
  }, {
    "left" : "static public String[] nfs(int num[], int digits) {\n    String formatted[] = new String[num.length];\n    for (int i = 0; i < formatted.length; i++) {\n      formatted[i] = nfs(num[i], digits);\n    }\n    return formatted;\n  }",
    "right" : "static public String[] nfs(int num[], int digits) {\n    String formatted[] = new String[num.length];\n    for (int i = 0; i < formatted.length; i++) {\n      formatted[i] = nfs(num[i], digits);\n    }\n    return formatted;\n  }",
    "info" : "MethodDeclaration[297233-297456]:MethodDeclaration[297233-297456]"
  }, {
    "left" : "public num int, digits int) : String",
    "right" : "public num int, digits int) : String",
    "info" : "MethodDeclaration[297617-298437]:MethodDeclaration[297617-298437]"
  }, {
    "left" : "static public String[] nfp(int num[], int digits) {\n    String formatted[] = new String[num.length];\n    for (int i = 0; i < formatted.length; i++) {\n      formatted[i] = nfp(num[i], digits);\n    }\n    return formatted;\n  }",
    "right" : "static public String[] nfp(int num[], int digits) {\n    String formatted[] = new String[num.length];\n    for (int i = 0; i < formatted.length; i++) {\n      formatted[i] = nfp(num[i], digits);\n    }\n    return formatted;\n  }",
    "info" : "MethodDeclaration[298441-298664]:MethodDeclaration[298441-298664]"
  }, {
    "left" : "static private NumberFormat float_nf;",
    "right" : "static private NumberFormat float_nf;",
    "info" : "FieldDeclaration[298767-298804]:FieldDeclaration[298767-298804]"
  }, {
    "left" : "",
    "right" : "",
    "info" : "FieldDeclaration[298807-298856]:FieldDeclaration[298807-298856]"
  }, {
    "left" : "static private boolean float_nf_commas;",
    "right" : "static private boolean float_nf_commas;",
    "info" : "FieldDeclaration[298859-298898]:FieldDeclaration[298859-298898]"
  }, {
    "left" : "static public String[] nf(float num[], int left, int right) {\n    String formatted[] = new String[num.length];\n    for (int i = 0; i < formatted.length; i++) {\n      formatted[i] = nf(num[i], left, right);\n    }\n    return formatted;\n  }",
    "right" : "static public String[] nf(float num[], int left, int right) {\n    String formatted[] = new String[num.length];\n    for (int i = 0; i < formatted.length; i++) {\n      formatted[i] = nf(num[i], left, right);\n    }\n    return formatted;\n  }",
    "info" : "MethodDeclaration[298902-299139]:MethodDeclaration[298902-299139]"
  }, {
    "left" : "/**\n * @param num[] the number(s) to format\n * @param left number of digits to the left of the decimal point\n * @param right number of digits to the right of the decimal point\n */\n  static public String nf(float num, int left, int right) {\n    if ((float_nf != null) &&\n        (float_nf_left == left) &&\n        (float_nf_right == right) &&\n        !float_nf_commas) {\n      return float_nf.format(num);\n    }\n\n    float_nf = NumberFormat.getInstance();\n    float_nf.setGroupingUsed(false);\n    float_nf_commas = false;\n\n    if (left != 0) float_nf.setMinimumIntegerDigits(left);\n    if (right != 0) {\n      float_nf.setMinimumFractionDigits(right);\n      float_nf.setMaximumFractionDigits(right);\n    }\n    float_nf_left = left;\n    float_nf_right = right;\n    return float_nf.format(num);\n  }",
    "right" : "/**\n * @param num[] the number(s) to format\n * @param left number of digits to the left of the decimal point\n * @param right number of digits to the right of the decimal point\n */\n  static public String nf(float num, int left, int right) {\n    if ((float_nf != null) &&\n        (float_nf_left == left) &&\n        (float_nf_right == right) &&\n        !float_nf_commas) {\n      return float_nf.format(num);\n    }\n\n    float_nf = NumberFormat.getInstance();\n    float_nf.setGroupingUsed(false);\n    float_nf_commas = false;\n\n    if (left != 0) float_nf.setMinimumIntegerDigits(left);\n    if (right != 0) {\n      float_nf.setMinimumFractionDigits(right);\n      float_nf.setMaximumFractionDigits(right);\n    }\n    float_nf_left = left;\n    float_nf_right = right;\n    return float_nf.format(num);\n  }",
    "info" : "MethodDeclaration[299140-299935]:MethodDeclaration[299140-299935]"
  }, {
    "left" : "public num float, right int) : ",
    "right" : "public num float, right int) : ",
    "info" : "MethodDeclaration[299937-300277]:MethodDeclaration[299937-300277]"
  }, {
    "left" : "public num float, right int) : String",
    "right" : "public num float, right int) : String",
    "info" : "MethodDeclaration[300282-300818]:MethodDeclaration[300282-300818]"
  }, {
    "left" : "public num float, left int, right int) : ",
    "right" : "public num float, left int, right int) : ",
    "info" : "MethodDeclaration[300822-301255]:MethodDeclaration[300822-301255]"
  }, {
    "left" : "public num float, left int, right int) : String",
    "right" : "public num float, left int, right int) : String",
    "info" : "MethodDeclaration[301259-301398]:MethodDeclaration[301259-301398]"
  }, {
    "left" : "public num float, left int, right int) : ",
    "right" : "public num float, left int, right int) : ",
    "info" : "MethodDeclaration[301401-301793]:MethodDeclaration[301401-301793]"
  }, {
    "left" : "static public String nfp(float num, int left, int right) {\n    return (num < 0) ? nf(num, left, right) :  ('+' + nf(num, left, right));\n  }",
    "right" : "static public String nfp(float num, int left, int right) {\n    return (num < 0) ? nf(num, left, right) :  ('+' + nf(num, left, right));\n  }",
    "info" : "MethodDeclaration[301797-301936]:MethodDeclaration[301797-301936]"
  }, {
    "left" : "/**\n   * ( begin auto-generated from hex.xml )\n   *\n   * Converts a byte, char, int, or color to a String containing the\n   * equivalent hexadecimal notation. For example color(0, 102, 153) will\n   * convert to the String \"FF006699\". This function can help make your geeky\n   * debugging sessions much happier.\n   * <br/> <br/>\n   * Note that the maximum number of digits is 8, because an int value can\n   * only represent up to 32 bits. Specifying more than eight digits will\n   * simply shorten the string to eight anyway.\n   *\n   * ( end auto-generated )\n   * @webref data:conversion\n   * @param value the value to convert\n   * @see PApplet#unhex(String)\n   * @see PApplet#binary(byte)\n   * @see PApplet#unbinary(String)\n   */\n  static final public String hex(byte value) {\n    return hex(value, 2);\n  }",
    "right" : "/**\n   * ( begin auto-generated from hex.xml )\n   *\n   * Converts a byte, char, int, or color to a String containing the\n   * equivalent hexadecimal notation. For example color(0, 102, 153) will\n   * convert to the String \"FF006699\". This function can help make your geeky\n   * debugging sessions much happier.\n   * <br/> <br/>\n   * Note that the maximum number of digits is 8, because an int value can\n   * only represent up to 32 bits. Specifying more than eight digits will\n   * simply shorten the string to eight anyway.\n   *\n   * ( end auto-generated )\n   * @webref data:conversion\n   * @param value the value to convert\n   * @see PApplet#unhex(String)\n   * @see PApplet#binary(byte)\n   * @see PApplet#unbinary(String)\n   */\n  static final public String hex(byte value) {\n    return hex(value, 2);\n  }",
    "info" : "MethodDeclaration[302037-302843]:MethodDeclaration[302037-302843]"
  }, {
    "left" : "public value char) : String",
    "right" : "public value char) : String",
    "info" : "MethodDeclaration[302847-302921]:MethodDeclaration[302847-302921]"
  }, {
    "left" : "static final public String hex(int value) {\n    return hex(value, 8);\n  }",
    "right" : "static final public String hex(int value) {\n    return hex(value, 8);\n  }",
    "info" : "MethodDeclaration[302925-302998]:MethodDeclaration[302925-302998]"
  }, {
    "left" : "public value int, digits int) : String",
    "right" : "public value int, digits int) : String",
    "info" : "MethodDeclaration[302999-303456]:MethodDeclaration[302999-303456]"
  }, {
    "left" : "/**\n   * ( begin auto-generated from unhex.xml )\n   *\n   * Converts a String representation of a hexadecimal number to its\n   * equivalent integer value.\n   *\n   * ( end auto-generated )\n   *\n   * @webref data:conversion\n   * @param value String to convert to an integer\n   * @see PApplet#hex(int, int)\n   * @see PApplet#binary(byte)\n   * @see PApplet#unbinary(String)\n   */\n  static final public int unhex(String value) {\n    // has to parse as a Long so that it'll work for numbers bigger than 2^31\n    return (int) (Long.parseLong(value, 16));\n  }",
    "right" : "/**\n   * ( begin auto-generated from unhex.xml )\n   *\n   * Converts a String representation of a hexadecimal number to its\n   * equivalent integer value.\n   *\n   * ( end auto-generated )\n   *\n   * @webref data:conversion\n   * @param value String to convert to an integer\n   * @see PApplet#hex(int, int)\n   * @see PApplet#binary(byte)\n   * @see PApplet#unbinary(String)\n   */\n  static final public int unhex(String value) {\n    // has to parse as a Long so that it'll work for numbers bigger than 2^31\n    return (int) (Long.parseLong(value, 16));\n  }",
    "info" : "MethodDeclaration[303459-304009]:MethodDeclaration[303459-304009]"
  }, {
    "left" : "public value byte) : String",
    "right" : "public value byte) : String",
    "info" : "MethodDeclaration[304019-304226]:MethodDeclaration[304019-304226]"
  }, {
    "left" : "public value char) : String",
    "right" : "public value char) : String",
    "info" : "MethodDeclaration[304230-304477]:MethodDeclaration[304230-304477]"
  }, {
    "left" : "/**\n   * Returns a String that contains the binary value of an int. The length\n   * depends on the size of the number itself. If you want a specific number\n   * of digits use binary(int what, int digits) to specify how many.\n   */\n  static final public String binary(int value) {\n    return binary(value, 32);\n  }",
    "right" : "/**\n   * Returns a String that contains the binary value of an int. The length\n   * depends on the size of the number itself. If you want a specific number\n   * of digits use binary(int what, int digits) to specify how many.\n   */\n  static final public String binary(int value) {\n    return binary(value, 32);\n  }",
    "info" : "MethodDeclaration[304481-304794]:MethodDeclaration[304481-304794]"
  }, {
    "left" : "public value int, digits int) : String",
    "right" : "public value int, digits int) : String",
    "info" : "MethodDeclaration[304940-306172]:MethodDeclaration[304940-306172]"
  }, {
    "left" : "/**\n   * ( begin auto-generated from unbinary.xml )\n   *\n   * Converts a String representation of a binary number to its equivalent\n   * integer value. For example, unbinary(\"00001000\") will return 8.\n   *\n   * ( end auto-generated )\n   * @webref data:conversion\n   * @param value String to convert to an integer\n   * @see PApplet#binary(byte)\n   * @see PApplet#hex(int,int)\n   * @see PApplet#unhex(String)\n   */\n  static final public int unbinary(String value) {\n    return Integer.parseInt(value, 2);\n  }",
    "right" : "/**\n   * ( begin auto-generated from unbinary.xml )\n   *\n   * Converts a String representation of a binary number to its equivalent\n   * integer value. For example, unbinary(\"00001000\") will return 8.\n   *\n   * ( end auto-generated )\n   * @webref data:conversion\n   * @param value String to convert to an integer\n   * @see PApplet#binary(byte)\n   * @see PApplet#hex(int,int)\n   * @see PApplet#unhex(String)\n   */\n  static final public int unbinary(String value) {\n    return Integer.parseInt(value, 2);\n  }",
    "info" : "MethodDeclaration[306176-306682]:MethodDeclaration[306176-306682]"
  }, {
    "left" : "/**\n   * ( begin auto-generated from color.xml )\n   *\n   * Creates colors for storing in variables of the <b>color</b> datatype.\n   * The parameters are interpreted as RGB or HSB values depending on the\n   * current <b>colorMode()</b>. The default mode is RGB values from 0 to 255\n   * and therefore, the function call <b>color(255, 204, 0)</b> will return a\n   * bright yellow color. More about how colors are stored can be found in\n   * the reference for the <a href=\"color_datatype.html\">color</a> datatype.\n   *\n   * ( end auto-generated )\n   * @webref color:creating_reading\n   * @param gray number specifying value between white and black\n   * @see PApplet#colorMode(int)\n   */\n  public final int color(int gray) {\n    if (g == null) {\n      if (gray > 255) gray = 255; else if (gray < 0) gray = 0;\n      return 0xff000000 | (gray << 16) | (gray << 8) | gray;\n    }\n    return g.color(gray);\n  }",
    "right" : "/**\n   * ( begin auto-generated from color.xml )\n   *\n   * Creates colors for storing in variables of the <b>color</b> datatype.\n   * The parameters are interpreted as RGB or HSB values depending on the\n   * current <b>colorMode()</b>. The default mode is RGB values from 0 to 255\n   * and therefore, the function call <b>color(255, 204, 0)</b> will return a\n   * bright yellow color. More about how colors are stored can be found in\n   * the reference for the <a href=\"color_datatype.html\">color</a> datatype.\n   *\n   * ( end auto-generated )\n   * @webref color:creating_reading\n   * @param gray number specifying value between white and black\n   * @see PApplet#colorMode(int)\n   */\n  public final int color(int gray) {\n    if (g == null) {\n      if (gray > 255) gray = 255; else if (gray < 0) gray = 0;\n      return 0xff000000 | (gray << 16) | (gray << 8) | gray;\n    }\n    return g.color(gray);\n  }",
    "info" : "MethodDeclaration[306886-307787]:MethodDeclaration[306886-307787]"
  }, {
    "left" : "public fgray float) : int",
    "right" : "public fgray float) : int",
    "info" : "MethodDeclaration[307792-308134]:MethodDeclaration[307792-308134]"
  }, {
    "left" : "public gray int, alpha int) : int",
    "right" : "public gray int, alpha int) : int",
    "info" : "MethodDeclaration[308139-308711]:MethodDeclaration[308139-308711]"
  }, {
    "left" : "/**\n   * @nowebref\n   */\n  public final int color(float fgray, float falpha) {\n    if (g == null) {\n      int gray = (int) fgray;\n      int alpha = (int) falpha;\n      if (gray > 255) gray = 255; else if (gray < 0) gray = 0;\n      if (alpha > 255) alpha = 255; else if (alpha < 0) alpha = 0;\n      return (alpha << 24) | (gray << 16) | (gray << 8) | gray;\n    }\n    return g.color(fgray, falpha);\n  }",
    "right" : "/**\n   * @nowebref\n   */\n  public final int color(float fgray, float falpha) {\n    if (g == null) {\n      int gray = (int) fgray;\n      int alpha = (int) falpha;\n      if (gray > 255) gray = 255; else if (gray < 0) gray = 0;\n      if (alpha > 255) alpha = 255; else if (alpha < 0) alpha = 0;\n      return (alpha << 24) | (gray << 16) | (gray << 8) | gray;\n    }\n    return g.color(fgray, falpha);\n  }",
    "info" : "MethodDeclaration[308716-309116]:MethodDeclaration[308716-309116]"
  }, {
    "left" : "public v1 int, v2 int, v3 int) : int",
    "right" : "public v1 int, v2 int, v3 int) : int",
    "info" : "MethodDeclaration[309121-309689]:MethodDeclaration[309121-309689]"
  }, {
    "left" : "public v1 int, v2 int, v3 int, alpha int) : int",
    "right" : "public v1 int, v2 int, v3 int, alpha int) : int",
    "info" : "MethodDeclaration[309694-310114]:MethodDeclaration[309694-310114]"
  }, {
    "left" : "public final int color(float v1, float v2, float v3) {\n    if (g == null) {\n      if (v1 > 255) v1 = 255; else if (v1 < 0) v1 = 0;\n      if (v2 > 255) v2 = 255; else if (v2 < 0) v2 = 0;\n      if (v3 > 255) v3 = 255; else if (v3 < 0) v3 = 0;\n\n      return 0xff000000 | ((int)v1 << 16) | ((int)v2 << 8) | (int)v3;\n    }\n    return g.color(v1, v2, v3);\n  }",
    "right" : "public final int color(float v1, float v2, float v3) {\n    if (g == null) {\n      if (v1 > 255) v1 = 255; else if (v1 < 0) v1 = 0;\n      if (v2 > 255) v2 = 255; else if (v2 < 0) v2 = 0;\n      if (v3 > 255) v3 = 255; else if (v3 < 0) v3 = 0;\n\n      return 0xff000000 | ((int)v1 << 16) | ((int)v2 << 8) | (int)v3;\n    }\n    return g.color(v1, v2, v3);\n  }",
    "info" : "MethodDeclaration[310119-310472]:MethodDeclaration[310119-310472]"
  }, {
    "left" : "public final int color(float v1, float v2, float v3, float alpha) {\n    if (g == null) {\n      if (alpha > 255) alpha = 255; else if (alpha < 0) alpha = 0;\n      if (v1 > 255) v1 = 255; else if (v1 < 0) v1 = 0;\n      if (v2 > 255) v2 = 255; else if (v2 < 0) v2 = 0;\n      if (v3 > 255) v3 = 255; else if (v3 < 0) v3 = 0;\n\n      return ((int)alpha << 24) | ((int)v1 << 16) | ((int)v2 << 8) | (int)v3;\n    }\n    return g.color(v1, v2, v3, alpha);\n  }",
    "right" : "public final int color(float v1, float v2, float v3, float alpha) {\n    if (g == null) {\n      if (alpha > 255) alpha = 255; else if (alpha < 0) alpha = 0;\n      if (v1 > 255) v1 = 255; else if (v1 < 0) v1 = 0;\n      if (v2 > 255) v2 = 255; else if (v2 < 0) v2 = 0;\n      if (v3 > 255) v3 = 255; else if (v3 < 0) v3 = 0;\n\n      return ((int)alpha << 24) | ((int)v1 << 16) | ((int)v2 << 8) | (int)v3;\n    }\n    return g.color(v1, v2, v3, alpha);\n  }",
    "info" : "MethodDeclaration[310477-310925]:MethodDeclaration[310477-310925]"
  }, {
    "left" : "/**\n   * ( begin auto-generated from lerpColor.xml )\n   *\n   * Calculates a color or colors between two color at a specific increment.\n   * The <b>amt</b> parameter is the amount to interpolate between the two\n   * values where 0.0 equal to the first point, 0.1 is very near the first\n   * point, 0.5 is half-way in between, etc.\n   *\n   * ( end auto-generated )\n   *\n   * @webref color:creating_reading\n   * @usage web_application\n   * @param c1 interpolate from this color\n   * @param c2 interpolate to this color\n   * @param amt between 0.0 and 1.0\n   * @see PImage#blendColor(int, int, int)\n   * @see PGraphics#color(float, float, float, float)\n   * @see PApplet#lerp(float, float, float)\n   */\n  public int lerpColor(int c1, int c2, float amt) {\n    if (g != null) {\n      return g.lerpColor(c1, c2, amt);\n    }\n    // use the default mode (RGB) if lerpColor is called before setup()\n    return PGraphics.lerpColor(c1, c2, amt, RGB);\n  }",
    "right" : "/**\n   * ( begin auto-generated from lerpColor.xml )\n   *\n   * Calculates a color or colors between two color at a specific increment.\n   * The <b>amt</b> parameter is the amount to interpolate between the two\n   * values where 0.0 equal to the first point, 0.1 is very near the first\n   * point, 0.5 is half-way in between, etc.\n   *\n   * ( end auto-generated )\n   *\n   * @webref color:creating_reading\n   * @usage web_application\n   * @param c1 interpolate from this color\n   * @param c2 interpolate to this color\n   * @param amt between 0.0 and 1.0\n   * @see PImage#blendColor(int, int, int)\n   * @see PGraphics#color(float, float, float, float)\n   * @see PApplet#lerp(float, float, float)\n   */\n  public int lerpColor(int c1, int c2, float amt) {\n    if (g != null) {\n      return g.lerpColor(c1, c2, amt);\n    }\n    // use the default mode (RGB) if lerpColor is called before setup()\n    return PGraphics.lerpColor(c1, c2, amt, RGB);\n  }",
    "info" : "MethodDeclaration[310930-311872]:MethodDeclaration[310930-311872]"
  }, {
    "left" : "static public int blendColor(int c1, int c2, int mode) {\n    return PImage.blendColor(c1, c2, mode);\n  }",
    "right" : "static public int blendColor(int c1, int c2, int mode) {\n    return PImage.blendColor(c1, c2, mode);\n  }",
    "info" : "MethodDeclaration[311877-311981]:MethodDeclaration[311877-311981]"
  }, {
    "left" : "package x int, y int) : void",
    "right" : "package x int, y int) : void",
    "info" : "MethodDeclaration[312054-312238]:MethodDeclaration[312054-312238]"
  }, {
    "left" : "package w int, h int) : void",
    "right" : "package w int, h int) : void",
    "info" : "MethodDeclaration[312243-312281]:MethodDeclaration[312243-312281]"
  }, {
    "left" : "/**\n   * main() method for running this class from the command line.\n   * <p>\n   * Usage: PApplet [options] &lt;class name&gt; [sketch args]\n   * <ul>\n   * <li>The [options] are one or several of the parameters seen below.\n   * <li>The class name is required. If you're running outside the PDE and\n   * your class is in a package, this should include the full name. That means\n   * that if the class is called Sketchy and the package is com.sketchycompany\n   * then com.sketchycompany.Sketchy should be used as the class name.\n   * <li>The [sketch args] are any command line parameters you want to send to\n   * the sketch itself. These will be passed into the args[] array in PApplet.\n   * <p>\n   * The simplest way to turn and sketch into an application is to\n   * add the following code to your program:\n   * <PRE>static public void main(String args[]) {\n   *   PApplet.main(\"YourSketchName\");\n   * }</PRE>\n   * That will properly launch your code from a double-clickable .jar\n   * or from the command line.\n   * <PRE>\n   * Parameters useful for launching or also used by the PDE:\n   *\n   * --location=x,y         Upper-lefthand corner of where the applet\n   *                        should appear on screen. If not used,\n   *                        the default is to center on the main screen.\n   *\n   * --present              Presentation mode: blanks the entire screen and\n   *                        shows the sketch by itself. If the sketch is\n   *                        smaller than the screen, the background around it\n   *                        will use the --window-color setting.\n   *\n   * --hide-stop            Use to hide the stop button in situations where\n   *                        you don't want to allow users to exit. also\n   *                        see the FAQ on information for capturing the ESC\n   *                        key when running in presentation mode.\n   *\n   * --stop-color=#xxxxxx   Color of the 'stop' text used to quit an\n   *                        sketch when it's in present mode.\n   *\n   * --window-color=#xxxxxx Background color of the window. The color used\n   *                        around the sketch when it's smaller than the\n   *                        minimum window size for the OS, and the matte\n   *                        color when using 'present' mode.\n   *\n   * --sketch-path          Location of where to save files from functions\n   *                        like saveStrings() or saveFrame(). defaults to\n   *                        the folder that the java application was\n   *                        launched from, which means if this isn't set by\n   *                        the pde, everything goes into the same folder\n   *                        as processing.exe.\n   *\n   * --display=n            Set what display should be used by this sketch.\n   *                        Displays are numbered starting from 1. This will\n   *                        be overridden by fullScreen() calls that specify\n   *                        a display. Omitting this option will cause the\n   *                        default display to be used.\n   *\n   * Parameters used by Processing when running via the PDE\n   *\n   * --external             set when the applet is being used by the PDE\n   *\n   * --editor-location=x,y  position of the upper-lefthand corner of the\n   *                        editor window, for placement of applet window\n   *\n   * All parameters *after* the sketch class name are passed to the sketch\n   * itself and available from its 'args' array while the sketch is running.\n   *\n   * @see PApplet#args\n   * </PRE>\n   */\n  static public void main(final String[] args) {\n    runSketch(args, null);\n  }",
    "right" : "/**\n   * main() method for running this class from the command line.\n   * <p>\n   * Usage: PApplet [options] &lt;class name&gt; [sketch args]\n   * <ul>\n   * <li>The [options] are one or several of the parameters seen below.\n   * <li>The class name is required. If you're running outside the PDE and\n   * your class is in a package, this should include the full name. That means\n   * that if the class is called Sketchy and the package is com.sketchycompany\n   * then com.sketchycompany.Sketchy should be used as the class name.\n   * <li>The [sketch args] are any command line parameters you want to send to\n   * the sketch itself. These will be passed into the args[] array in PApplet.\n   * <p>\n   * The simplest way to turn and sketch into an application is to\n   * add the following code to your program:\n   * <PRE>static public void main(String args[]) {\n   *   PApplet.main(\"YourSketchName\");\n   * }</PRE>\n   * That will properly launch your code from a double-clickable .jar\n   * or from the command line.\n   * <PRE>\n   * Parameters useful for launching or also used by the PDE:\n   *\n   * --location=x,y         Upper-lefthand corner of where the applet\n   *                        should appear on screen. If not used,\n   *                        the default is to center on the main screen.\n   *\n   * --present              Presentation mode: blanks the entire screen and\n   *                        shows the sketch by itself. If the sketch is\n   *                        smaller than the screen, the background around it\n   *                        will use the --window-color setting.\n   *\n   * --hide-stop            Use to hide the stop button in situations where\n   *                        you don't want to allow users to exit. also\n   *                        see the FAQ on information for capturing the ESC\n   *                        key when running in presentation mode.\n   *\n   * --stop-color=#xxxxxx   Color of the 'stop' text used to quit an\n   *                        sketch when it's in present mode.\n   *\n   * --window-color=#xxxxxx Background color of the window. The color used\n   *                        around the sketch when it's smaller than the\n   *                        minimum window size for the OS, and the matte\n   *                        color when using 'present' mode.\n   *\n   * --sketch-path          Location of where to save files from functions\n   *                        like saveStrings() or saveFrame(). defaults to\n   *                        the folder that the java application was\n   *                        launched from, which means if this isn't set by\n   *                        the pde, everything goes into the same folder\n   *                        as processing.exe.\n   *\n   * --display=n            Set what display should be used by this sketch.\n   *                        Displays are numbered starting from 1. This will\n   *                        be overridden by fullScreen() calls that specify\n   *                        a display. Omitting this option will cause the\n   *                        default display to be used.\n   *\n   * Parameters used by Processing when running via the PDE\n   *\n   * --external             set when the applet is being used by the PDE\n   *\n   * --editor-location=x,y  position of the upper-lefthand corner of the\n   *                        editor window, for placement of applet window\n   *\n   * All parameters *after* the sketch class name are passed to the sketch\n   * itself and available from its 'args' array while the sketch is running.\n   *\n   * @see PApplet#args\n   * </PRE>\n   */\n  static public void main(final String[] args) {\n    runSketch(args, null);\n  }",
    "info" : "MethodDeclaration[312364-316043]:MethodDeclaration[312364-316043]"
  }, {
    "left" : "/**\n   * Convenience method so that PApplet.main(\"YourSketch\") launches a sketch,\n   * rather than having to wrap it into a single element String array.\n   * @param mainClass name of the class to load (with package if any)\n   */\n  static public void main(final String mainClass) {\n    main(mainClass, null);\n  }",
    "right" : "/**\n   * Convenience method so that PApplet.main(\"YourSketch\") launches a sketch,\n   * rather than having to wrap it into a single element String array.\n   * @param mainClass name of the class to load (with package if any)\n   */\n  static public void main(final String mainClass) {\n    main(mainClass, null);\n  }",
    "info" : "MethodDeclaration[316048-316359]:MethodDeclaration[316048-316359]"
  }, {
    "left" : "/**\n   * Convenience method so that PApplet.main(\"YourSketch\", args) launches a\n   * sketch, rather than having to wrap it into a String array, and appending\n   * the 'args' array when not null.\n   * @param mainClass name of the class to load (with package if any)\n   * @param args command line arguments to pass to the sketch's 'args' array.\n   *             Note that this is *not* the same as the args passed to (and\n   *             understood by) PApplet such as --display.\n   */\n  static public void main(final String mainClass, final String[] sketchArgs) {\n    String[] args = new String[] { mainClass };\n    if (sketchArgs != null) {\n      args = concat(args, sketchArgs);\n    }\n    runSketch(args, null);\n  }",
    "right" : "/**\n   * Convenience method so that PApplet.main(\"YourSketch\", args) launches a\n   * sketch, rather than having to wrap it into a String array, and appending\n   * the 'args' array when not null.\n   * @param mainClass name of the class to load (with package if any)\n   * @param args command line arguments to pass to the sketch's 'args' array.\n   *             Note that this is *not* the same as the args passed to (and\n   *             understood by) PApplet such as --display.\n   */\n  static public void main(final String mainClass, final String[] sketchArgs) {\n    String[] args = new String[] { mainClass };\n    if (sketchArgs != null) {\n      args = concat(args, sketchArgs);\n    }\n    runSketch(args, null);\n  }",
    "info" : "MethodDeclaration[316364-317081]:MethodDeclaration[316364-317081]"
  }, {
    "left" : "public args , constructedSketch PApplet) : void",
    "right" : "public args , constructedSketch PApplet) : void",
    "info" : "MethodDeclaration[317389-317641]:MethodDeclaration[317389-325164]"
  }, {
    "left" : "protected PSurface initSurface() {/*int backgroundColor, int displayNum,\n                                 boolean fullScreen, boolean spanDisplays) {*/\n    g = createPrimaryGraphics();\n    surface = g.createSurface();\n\n    // if the PSurface calls setFrame() no need to create a fake frame\n    if (g.displayable() && frame == null) {\n      frame = new Frame() {\n        @Override\n        public void setResizable(boolean resizable) {\n          deprecationWarning(\"setResizable\");\n          surface.setResizable(resizable);\n        }\n\n        @Override\n        public void setVisible(boolean visible) {\n          deprecationWarning(\"setVisible\");\n          surface.setVisible(visible);\n        }\n\n        @Override\n        public void setTitle(String title) {\n          deprecationWarning(\"setTitle\");\n          surface.setTitle(title);\n        }\n\n        private void deprecationWarning(String method) {\n          PGraphics.showWarning(\"Use surface.\" + method + \"() instead of \" +\n                                \"frame.\" + method + \" in Processing 3\");\n        }\n      };\n\n      surface.initFrame(this); //, backgroundColor, displayNum, fullScreen, spanDisplays);\n      surface.setTitle(getClass().getName());\n\n    } else {\n      surface.initOffscreen(this);  // for PDF/PSurfaceNone and friends\n    }\n\n    init();\n    return surface;\n  }",
    "right" : "protected PSurface initSurface() {/*int backgroundColor, int displayNum,\n                                 boolean fullScreen, boolean spanDisplays) {*/\n    g = createPrimaryGraphics();\n    surface = g.createSurface();\n\n    // if the PSurface calls setFrame() no need to create a fake frame\n    if (g.displayable() && frame == null) {\n      frame = new Frame() {\n        @Override\n        public void setResizable(boolean resizable) {\n          deprecationWarning(\"setResizable\");\n          surface.setResizable(resizable);\n        }\n\n        @Override\n        public void setVisible(boolean visible) {\n          deprecationWarning(\"setVisible\");\n          surface.setVisible(visible);\n        }\n\n        @Override\n        public void setTitle(String title) {\n          deprecationWarning(\"setTitle\");\n          surface.setTitle(title);\n        }\n\n        private void deprecationWarning(String method) {\n          PGraphics.showWarning(\"Use surface.\" + method + \"() instead of \" +\n                                \"frame.\" + method + \" in Processing 3\");\n        }\n      };\n\n      surface.initFrame(this); //, backgroundColor, displayNum, fullScreen, spanDisplays);\n      surface.setTitle(getClass().getName());\n\n    } else {\n      surface.initOffscreen(this);  // for PDF/PSurfaceNone and friends\n    }\n\n    init();\n    return surface;\n  }",
    "info" : "MethodDeclaration[325139-326478]:MethodDeclaration[325169-326508]"
  }, {
    "left" : "public resizable boolean) : void",
    "right" : "public resizable boolean) : void",
    "info" : "MethodDeclaration[325509-325671]:MethodDeclaration[325539-325701]"
  }, {
    "left" : "public visible boolean) : void",
    "right" : "public visible boolean) : void",
    "info" : "MethodDeclaration[325681-325833]:MethodDeclaration[325711-325863]"
  }, {
    "left" : "public title String) : void",
    "right" : "public title String) : void",
    "info" : "MethodDeclaration[325843-325984]:MethodDeclaration[325873-326014]"
  }, {
    "left" : "private method String) : void",
    "right" : "private method String) : void",
    "info" : "MethodDeclaration[325994-326202]:MethodDeclaration[326024-326232]"
  }, {
    "left" : "/** Convenience method, should only be called by PSurface subclasses. */\n  static public void hideMenuBar() {\n    if (PApplet.platform == PConstants.MACOSX) {\n      // Call some native code to remove the menu bar on OS X. Not necessary\n      // on Linux and Windows, who are happy to make full screen windows.\n      japplemenubar.JAppleMenuBar.hide();\n    }\n  }",
    "right" : "/** Convenience method, should only be called by PSurface subclasses. */\n  static public void hideMenuBar() {\n    if (PApplet.platform == PConstants.MACOSX) {\n      // Call some native code to remove the menu bar on OS X. Not necessary\n      // on Linux and Windows, who are happy to make full screen windows.\n      japplemenubar.JAppleMenuBar.hide();\n    }\n  }",
    "info" : "MethodDeclaration[327323-327684]:MethodDeclaration[327353-327714]"
  }, {
    "left" : "protected args ...) : void",
    "right" : "protected args ...) : void",
    "info" : "MethodDeclaration[327689-328383]:MethodDeclaration[327719-328413]"
  }, {
    "left" : "protected ) : void",
    "right" : "protected ) : void",
    "info" : "MethodDeclaration[328388-328494]:MethodDeclaration[328418-328524]"
  }, {
    "left" : "public renderer String, filename String) : PGraphics",
    "right" : "public renderer String, filename String) : PGraphics",
    "info" : "MethodDeclaration[328566-329638]:MethodDeclaration[328596-329668]"
  }, {
    "left" : "/**\n   * @nowebref\n   * Begin recording (echoing) commands to the specified PGraphics object.\n   */\n  public void beginRecord(PGraphics recorder) {\n    this.recorder = recorder;\n    recorder.beginDraw();\n  }",
    "right" : "/**\n   * @nowebref\n   * Begin recording (echoing) commands to the specified PGraphics object.\n   */\n  public void beginRecord(PGraphics recorder) {\n    this.recorder = recorder;\n    recorder.beginDraw();\n  }",
    "info" : "MethodDeclaration[329643-329850]:MethodDeclaration[329673-329880]"
  }, {
    "left" : "public ) : void",
    "right" : "public ) : void",
    "info" : "MethodDeclaration[329854-330251]:MethodDeclaration[329884-330281]"
  }, {
    "left" : "public renderer String, filename String) : PGraphics",
    "right" : "public renderer String, filename String) : PGraphics",
    "info" : "MethodDeclaration[330256-332160]:MethodDeclaration[330286-332190]"
  }, {
    "left" : "public rawGraphics PGraphics) : void",
    "right" : "public rawGraphics PGraphics) : void",
    "info" : "MethodDeclaration[332166-332570]:MethodDeclaration[332196-332600]"
  }, {
    "left" : "/**\n   * ( begin auto-generated from endRaw.xml )\n   *\n   * Complement to <b>beginRaw()</b>; they must always be used together. See\n   * the <b>beginRaw()</b> reference for details.\n   *\n   * ( end auto-generated )\n   *\n   * @webref output:files\n   * @see PApplet#beginRaw(String, String)\n   */\n  public void endRaw() {\n    g.endRaw();\n  }",
    "right" : "/**\n   * ( begin auto-generated from endRaw.xml )\n   *\n   * Complement to <b>beginRaw()</b>; they must always be used together. See\n   * the <b>beginRaw()</b> reference for details.\n   *\n   * ( end auto-generated )\n   *\n   * @webref output:files\n   * @see PApplet#beginRaw(String, String)\n   */\n  public void endRaw() {\n    g.endRaw();\n  }",
    "info" : "MethodDeclaration[332575-332914]:MethodDeclaration[332605-332944]"
  }, {
    "left" : "public ) : void",
    "right" : "public ) : void",
    "info" : "MethodDeclaration[333168-334254]:MethodDeclaration[333198-334284]"
  }, {
    "left" : "public ) : void",
    "right" : "public ) : void",
    "info" : "MethodDeclaration[334257-335362]:MethodDeclaration[334287-335392]"
  }, {
    "left" : "public x1 int, y1 int, x2 int, y2 int) : void",
    "right" : "public x1 int, y1 int, x2 int, y2 int) : void",
    "info" : "MethodDeclaration[335366-335668]:MethodDeclaration[335396-335698]"
  }, {
    "left" : "public PGL beginPGL() {\n    return g.beginPGL();\n  }",
    "right" : "public PGL beginPGL() {\n    return g.beginPGL();\n  }",
    "info" : "MethodDeclaration[335984-336036]:MethodDeclaration[336014-336066]"
  }, {
    "left" : "public void endPGL() {\n    if (recorder != null) recorder.endPGL();\n    g.endPGL();\n  }",
    "right" : "public void endPGL() {\n    if (recorder != null) recorder.endPGL();\n    g.endPGL();\n  }",
    "info" : "MethodDeclaration[336041-336128]:MethodDeclaration[336071-336158]"
  }, {
    "left" : "public void flush() {\n    if (recorder != null) recorder.flush();\n    g.flush();\n  }",
    "right" : "public void flush() {\n    if (recorder != null) recorder.flush();\n    g.flush();\n  }",
    "info" : "MethodDeclaration[336133-336217]:MethodDeclaration[336163-336247]"
  }, {
    "left" : "public void hint(int which) {\n    if (recorder != null) recorder.hint(which);\n    g.hint(which);\n  }",
    "right" : "public void hint(int which) {\n    if (recorder != null) recorder.hint(which);\n    g.hint(which);\n  }",
    "info" : "MethodDeclaration[336222-336322]:MethodDeclaration[336252-336352]"
  }, {
    "left" : "/**\n   * Start a new shape of type POLYGON\n   */\n  public void beginShape() {\n    if (recorder != null) recorder.beginShape();\n    g.beginShape();\n  }",
    "right" : "/**\n   * Start a new shape of type POLYGON\n   */\n  public void beginShape() {\n    if (recorder != null) recorder.beginShape();\n    g.beginShape();\n  }",
    "info" : "MethodDeclaration[336327-336477]:MethodDeclaration[336357-336507]"
  }, {
    "left" : "/**\n   * ( begin auto-generated from beginShape.xml )\n   *\n   * Using the <b>beginShape()</b> and <b>endShape()</b> functions allow\n   * creating more complex forms. <b>beginShape()</b> begins recording\n   * vertices for a shape and <b>endShape()</b> stops recording. The value of\n   * the <b>MODE</b> parameter tells it which types of shapes to create from\n   * the provided vertices. With no mode specified, the shape can be any\n   * irregular polygon. The parameters available for beginShape() are POINTS,\n   * LINES, TRIANGLES, TRIANGLE_FAN, TRIANGLE_STRIP, QUADS, and QUAD_STRIP.\n   * After calling the <b>beginShape()</b> function, a series of\n   * <b>vertex()</b> commands must follow. To stop drawing the shape, call\n   * <b>endShape()</b>. The <b>vertex()</b> function with two parameters\n   * specifies a position in 2D and the <b>vertex()</b> function with three\n   * parameters specifies a position in 3D. Each shape will be outlined with\n   * the current stroke color and filled with the fill color.\n   * <br/> <br/>\n   * Transformations such as <b>translate()</b>, <b>rotate()</b>, and\n   * <b>scale()</b> do not work within <b>beginShape()</b>. It is also not\n   * possible to use other shapes, such as <b>ellipse()</b> or <b>rect()</b>\n   * within <b>beginShape()</b>.\n   * <br/> <br/>\n   * The P3D renderer settings allow <b>stroke()</b> and <b>fill()</b>\n   * settings to be altered per-vertex, however the default P2D renderer does\n   * not. Settings such as <b>strokeWeight()</b>, <b>strokeCap()</b>, and\n   * <b>strokeJoin()</b> cannot be changed while inside a\n   * <b>beginShape()</b>/<b>endShape()</b> block with any renderer.\n   *\n   * ( end auto-generated )\n   * @webref shape:vertex\n   * @param kind Either POINTS, LINES, TRIANGLES, TRIANGLE_FAN, TRIANGLE_STRIP, QUADS, or QUAD_STRIP\n   * @see PShape\n   * @see PGraphics#endShape()\n   * @see PGraphics#vertex(float, float, float, float, float)\n   * @see PGraphics#curveVertex(float, float, float)\n   * @see PGraphics#bezierVertex(float, float, float, float, float, float, float, float, float)\n   */\n  public void beginShape(int kind) {\n    if (recorder != null) recorder.beginShape(kind);\n    g.beginShape(kind);\n  }",
    "right" : "/**\n   * ( begin auto-generated from beginShape.xml )\n   *\n   * Using the <b>beginShape()</b> and <b>endShape()</b> functions allow\n   * creating more complex forms. <b>beginShape()</b> begins recording\n   * vertices for a shape and <b>endShape()</b> stops recording. The value of\n   * the <b>MODE</b> parameter tells it which types of shapes to create from\n   * the provided vertices. With no mode specified, the shape can be any\n   * irregular polygon. The parameters available for beginShape() are POINTS,\n   * LINES, TRIANGLES, TRIANGLE_FAN, TRIANGLE_STRIP, QUADS, and QUAD_STRIP.\n   * After calling the <b>beginShape()</b> function, a series of\n   * <b>vertex()</b> commands must follow. To stop drawing the shape, call\n   * <b>endShape()</b>. The <b>vertex()</b> function with two parameters\n   * specifies a position in 2D and the <b>vertex()</b> function with three\n   * parameters specifies a position in 3D. Each shape will be outlined with\n   * the current stroke color and filled with the fill color.\n   * <br/> <br/>\n   * Transformations such as <b>translate()</b>, <b>rotate()</b>, and\n   * <b>scale()</b> do not work within <b>beginShape()</b>. It is also not\n   * possible to use other shapes, such as <b>ellipse()</b> or <b>rect()</b>\n   * within <b>beginShape()</b>.\n   * <br/> <br/>\n   * The P3D renderer settings allow <b>stroke()</b> and <b>fill()</b>\n   * settings to be altered per-vertex, however the default P2D renderer does\n   * not. Settings such as <b>strokeWeight()</b>, <b>strokeCap()</b>, and\n   * <b>strokeJoin()</b> cannot be changed while inside a\n   * <b>beginShape()</b>/<b>endShape()</b> block with any renderer.\n   *\n   * ( end auto-generated )\n   * @webref shape:vertex\n   * @param kind Either POINTS, LINES, TRIANGLES, TRIANGLE_FAN, TRIANGLE_STRIP, QUADS, or QUAD_STRIP\n   * @see PShape\n   * @see PGraphics#endShape()\n   * @see PGraphics#vertex(float, float, float, float, float)\n   * @see PGraphics#curveVertex(float, float, float)\n   * @see PGraphics#bezierVertex(float, float, float, float, float, float, float, float, float)\n   */\n  public void beginShape(int kind) {\n    if (recorder != null) recorder.beginShape(kind);\n    g.beginShape(kind);\n  }",
    "info" : "MethodDeclaration[336482-338675]:MethodDeclaration[336512-338705]"
  }, {
    "left" : "/**\n   * Sets whether the upcoming vertex is part of an edge.\n   * Equivalent to glEdgeFlag(), for people familiar with OpenGL.\n   */\n  public void edge(boolean edge) {\n    if (recorder != null) recorder.edge(edge);\n    g.edge(edge);\n  }",
    "right" : "/**\n   * Sets whether the upcoming vertex is part of an edge.\n   * Equivalent to glEdgeFlag(), for people familiar with OpenGL.\n   */\n  public void edge(boolean edge) {\n    if (recorder != null) recorder.edge(edge);\n    g.edge(edge);\n  }",
    "info" : "MethodDeclaration[338680-338917]:MethodDeclaration[338710-338947]"
  }, {
    "left" : "public nx float, ny float, nz float) : void",
    "right" : "public nx float, ny float, nz float) : void",
    "info" : "MethodDeclaration[338922-339791]:MethodDeclaration[338952-339821]"
  }, {
    "left" : "public void attrib(String name, float... values) {\n    if (recorder != null) recorder.attrib(name, values);\n    g.attrib(name, values);\n  }",
    "right" : "public void attrib(String name, float... values) {\n    if (recorder != null) recorder.attrib(name, values);\n    g.attrib(name, values);\n  }",
    "info" : "MethodDeclaration[339796-339935]:MethodDeclaration[339826-339965]"
  }, {
    "left" : "public void attrib(String name, int... values) {\n    if (recorder != null) recorder.attrib(name, values);\n    g.attrib(name, values);\n  }",
    "right" : "public void attrib(String name, int... values) {\n    if (recorder != null) recorder.attrib(name, values);\n    g.attrib(name, values);\n  }",
    "info" : "MethodDeclaration[339940-340077]:MethodDeclaration[339970-340107]"
  }, {
    "left" : "public void attrib(String name, boolean... values) {\n    if (recorder != null) recorder.attrib(name, values);\n    g.attrib(name, values);\n  }",
    "right" : "public void attrib(String name, boolean... values) {\n    if (recorder != null) recorder.attrib(name, values);\n    g.attrib(name, values);\n  }",
    "info" : "MethodDeclaration[340082-340223]:MethodDeclaration[340112-340253]"
  }, {
    "left" : "/**\n   * ( begin auto-generated from textureMode.xml )\n   *\n   * Sets the coordinate space for texture mapping. There are two options,\n   * IMAGE, which refers to the actual coordinates of the image, and\n   * NORMAL, which refers to a normalized space of values ranging from 0\n   * to 1. The default mode is IMAGE. In IMAGE, if an image is 100 x 200\n   * pixels, mapping the image onto the entire size of a quad would require\n   * the points (0,0) (0,100) (100,200) (0,200). The same mapping in\n   * NORMAL_SPACE is (0,0) (0,1) (1,1) (0,1).\n   *\n   * ( end auto-generated )\n   * @webref image:textures\n   * @param mode either IMAGE or NORMAL\n   * @see PGraphics#texture(PImage)\n   * @see PGraphics#textureWrap(int)\n   */\n  public void textureMode(int mode) {\n    if (recorder != null) recorder.textureMode(mode);\n    g.textureMode(mode);\n  }",
    "right" : "/**\n   * ( begin auto-generated from textureMode.xml )\n   *\n   * Sets the coordinate space for texture mapping. There are two options,\n   * IMAGE, which refers to the actual coordinates of the image, and\n   * NORMAL, which refers to a normalized space of values ranging from 0\n   * to 1. The default mode is IMAGE. In IMAGE, if an image is 100 x 200\n   * pixels, mapping the image onto the entire size of a quad would require\n   * the points (0,0) (0,100) (100,200) (0,200). The same mapping in\n   * NORMAL_SPACE is (0,0) (0,1) (1,1) (0,1).\n   *\n   * ( end auto-generated )\n   * @webref image:textures\n   * @param mode either IMAGE or NORMAL\n   * @see PGraphics#texture(PImage)\n   * @see PGraphics#textureWrap(int)\n   */\n  public void textureMode(int mode) {\n    if (recorder != null) recorder.textureMode(mode);\n    g.textureMode(mode);\n  }",
    "info" : "MethodDeclaration[340228-341069]:MethodDeclaration[340258-341099]"
  }, {
    "left" : "public wrap int) : void",
    "right" : "public wrap int) : void",
    "info" : "MethodDeclaration[341074-341498]:MethodDeclaration[341104-341528]"
  }, {
    "left" : "/**\n   * ( begin auto-generated from texture.xml )\n   *\n   * Sets a texture to be applied to vertex points. The <b>texture()</b>\n   * function must be called between <b>beginShape()</b> and\n   * <b>endShape()</b> and before any calls to <b>vertex()</b>.\n   * <br/> <br/>\n   * When textures are in use, the fill color is ignored. Instead, use tint()\n   * to specify the color of the texture as it is applied to the shape.\n   *\n   * ( end auto-generated )\n   * @webref image:textures\n   * @param image reference to a PImage object\n   * @see PGraphics#textureMode(int)\n   * @see PGraphics#textureWrap(int)\n   * @see PGraphics#beginShape(int)\n   * @see PGraphics#endShape(int)\n   * @see PGraphics#vertex(float, float, float, float, float)\n   */\n  public void texture(PImage image) {\n    if (recorder != null) recorder.texture(image);\n    g.texture(image);\n  }",
    "right" : "/**\n   * ( begin auto-generated from texture.xml )\n   *\n   * Sets a texture to be applied to vertex points. The <b>texture()</b>\n   * function must be called between <b>beginShape()</b> and\n   * <b>endShape()</b> and before any calls to <b>vertex()</b>.\n   * <br/> <br/>\n   * When textures are in use, the fill color is ignored. Instead, use tint()\n   * to specify the color of the texture as it is applied to the shape.\n   *\n   * ( end auto-generated )\n   * @webref image:textures\n   * @param image reference to a PImage object\n   * @see PGraphics#textureMode(int)\n   * @see PGraphics#textureWrap(int)\n   * @see PGraphics#beginShape(int)\n   * @see PGraphics#endShape(int)\n   * @see PGraphics#vertex(float, float, float, float, float)\n   */\n  public void texture(PImage image) {\n    if (recorder != null) recorder.texture(image);\n    g.texture(image);\n  }",
    "info" : "MethodDeclaration[341503-342358]:MethodDeclaration[341533-342388]"
  }, {
    "left" : "public ) : void",
    "right" : "public ) : void",
    "info" : "MethodDeclaration[342363-342578]:MethodDeclaration[342393-342608]"
  }, {
    "left" : "public x float, y float) : void",
    "right" : "public x float, y float) : void",
    "info" : "MethodDeclaration[342583-342694]:MethodDeclaration[342613-342724]"
  }, {
    "left" : "public x float, y float, z float) : void",
    "right" : "public x float, y float, z float) : void",
    "info" : "MethodDeclaration[342699-342825]:MethodDeclaration[342729-342855]"
  }, {
    "left" : "public v ) : void",
    "right" : "public v ) : void",
    "info" : "MethodDeclaration[342830-343128]:MethodDeclaration[342860-343158]"
  }, {
    "left" : "public void vertex(float x, float y, float u, float v) {\n    if (recorder != null) recorder.vertex(x, y, u, v);\n    g.vertex(x, y, u, v);\n  }",
    "right" : "public void vertex(float x, float y, float u, float v) {\n    if (recorder != null) recorder.vertex(x, y, u, v);\n    g.vertex(x, y, u, v);\n  }",
    "info" : "MethodDeclaration[343133-343274]:MethodDeclaration[343163-343304]"
  }, {
    "left" : "/**\n   * ( begin auto-generated from vertex.xml )\n   *\n   * All shapes are constructed by connecting a series of vertices.\n   * <b>vertex()</b> is used to specify the vertex coordinates for points,\n   * lines, triangles, quads, and polygons and is used exclusively within the\n   * <b>beginShape()</b> and <b>endShape()</b> function.<br />\n   * <br />\n   * Drawing a vertex in 3D using the <b>z</b> parameter requires the P3D\n   * parameter in combination with size as shown in the above example.<br />\n   * <br />\n   * This function is also used to map a texture onto the geometry. The\n   * <b>texture()</b> function declares the texture to apply to the geometry\n   * and the <b>u</b> and <b>v</b> coordinates set define the mapping of this\n   * texture to the form. By default, the coordinates used for <b>u</b> and\n   * <b>v</b> are specified in relation to the image's size in pixels, but\n   * this relation can be changed with <b>textureMode()</b>.\n   *\n   * ( end auto-generated )\n * @webref shape:vertex\n * @param x x-coordinate of the vertex\n * @param y y-coordinate of the vertex\n * @param z z-coordinate of the vertex\n * @param u horizontal coordinate for the texture mapping\n * @param v vertical coordinate for the texture mapping\n * @see PGraphics#beginShape(int)\n * @see PGraphics#endShape(int)\n * @see PGraphics#bezierVertex(float, float, float, float, float, float, float, float, float)\n * @see PGraphics#quadraticVertex(float, float, float, float, float, float)\n * @see PGraphics#curveVertex(float, float, float)\n * @see PGraphics#texture(PImage)\n */\n  public void vertex(float x, float y, float z, float u, float v) {\n    if (recorder != null) recorder.vertex(x, y, z, u, v);\n    g.vertex(x, y, z, u, v);\n  }",
    "right" : "/**\n   * ( begin auto-generated from vertex.xml )\n   *\n   * All shapes are constructed by connecting a series of vertices.\n   * <b>vertex()</b> is used to specify the vertex coordinates for points,\n   * lines, triangles, quads, and polygons and is used exclusively within the\n   * <b>beginShape()</b> and <b>endShape()</b> function.<br />\n   * <br />\n   * Drawing a vertex in 3D using the <b>z</b> parameter requires the P3D\n   * parameter in combination with size as shown in the above example.<br />\n   * <br />\n   * This function is also used to map a texture onto the geometry. The\n   * <b>texture()</b> function declares the texture to apply to the geometry\n   * and the <b>u</b> and <b>v</b> coordinates set define the mapping of this\n   * texture to the form. By default, the coordinates used for <b>u</b> and\n   * <b>v</b> are specified in relation to the image's size in pixels, but\n   * this relation can be changed with <b>textureMode()</b>.\n   *\n   * ( end auto-generated )\n * @webref shape:vertex\n * @param x x-coordinate of the vertex\n * @param y y-coordinate of the vertex\n * @param z z-coordinate of the vertex\n * @param u horizontal coordinate for the texture mapping\n * @param v vertical coordinate for the texture mapping\n * @see PGraphics#beginShape(int)\n * @see PGraphics#endShape(int)\n * @see PGraphics#bezierVertex(float, float, float, float, float, float, float, float, float)\n * @see PGraphics#quadraticVertex(float, float, float, float, float, float)\n * @see PGraphics#curveVertex(float, float, float)\n * @see PGraphics#texture(PImage)\n */\n  public void vertex(float x, float y, float z, float u, float v) {\n    if (recorder != null) recorder.vertex(x, y, z, u, v);\n    g.vertex(x, y, z, u, v);\n  }",
    "info" : "MethodDeclaration[343277-345001]:MethodDeclaration[343307-345031]"
  }, {
    "left" : "public ) : void",
    "right" : "public ) : void",
    "info" : "MethodDeclaration[345006-345149]:MethodDeclaration[345036-345179]"
  }, {
    "left" : "/**\n   * @webref shape:vertex\n   */\n  public void endContour() {\n    if (recorder != null) recorder.endContour();\n    g.endContour();\n  }",
    "right" : "/**\n   * @webref shape:vertex\n   */\n  public void endContour() {\n    if (recorder != null) recorder.endContour();\n    g.endContour();\n  }",
    "info" : "MethodDeclaration[345154-345291]:MethodDeclaration[345184-345321]"
  }, {
    "left" : "public ) : void",
    "right" : "public ) : void",
    "info" : "MethodDeclaration[345296-345389]:MethodDeclaration[345326-345419]"
  }, {
    "left" : "/**\n   * ( begin auto-generated from endShape.xml )\n   *\n   * The <b>endShape()</b> function is the companion to <b>beginShape()</b>\n   * and may only be called after <b>beginShape()</b>. When <b>endshape()</b>\n   * is called, all of image data defined since the previous call to\n   * <b>beginShape()</b> is written into the image buffer. The constant CLOSE\n   * as the value for the MODE parameter to close the shape (to connect the\n   * beginning and the end).\n   *\n   * ( end auto-generated )\n   * @webref shape:vertex\n   * @param mode use CLOSE to close the shape\n   * @see PShape\n   * @see PGraphics#beginShape(int)\n   */\n  public void endShape(int mode) {\n    if (recorder != null) recorder.endShape(mode);\n    g.endShape(mode);\n  }",
    "right" : "/**\n   * ( begin auto-generated from endShape.xml )\n   *\n   * The <b>endShape()</b> function is the companion to <b>beginShape()</b>\n   * and may only be called after <b>beginShape()</b>. When <b>endshape()</b>\n   * is called, all of image data defined since the previous call to\n   * <b>beginShape()</b> is written into the image buffer. The constant CLOSE\n   * as the value for the MODE parameter to close the shape (to connect the\n   * beginning and the end).\n   *\n   * ( end auto-generated )\n   * @webref shape:vertex\n   * @param mode use CLOSE to close the shape\n   * @see PShape\n   * @see PGraphics#beginShape(int)\n   */\n  public void endShape(int mode) {\n    if (recorder != null) recorder.endShape(mode);\n    g.endShape(mode);\n  }",
    "info" : "MethodDeclaration[345394-346132]:MethodDeclaration[345424-346162]"
  }, {
    "left" : "/**\n   * @webref shape\n   * @param filename name of file to load, can be .svg or .obj\n   * @see PShape\n   * @see PApplet#createShape()\n   */\n  public PShape loadShape(String filename) {\n    return g.loadShape(filename);\n  }",
    "right" : "/**\n   * @webref shape\n   * @param filename name of file to load, can be .svg or .obj\n   * @see PShape\n   * @see PApplet#createShape()\n   */\n  public PShape loadShape(String filename) {\n    return g.loadShape(filename);\n  }",
    "info" : "MethodDeclaration[346137-346360]:MethodDeclaration[346167-346390]"
  }, {
    "left" : "/**\n   * @nowebref\n   */\n  public PShape loadShape(String filename, String options) {\n    return g.loadShape(filename, options);\n  }",
    "right" : "/**\n   * @nowebref\n   */\n  public PShape loadShape(String filename, String options) {\n    return g.loadShape(filename, options);\n  }",
    "info" : "MethodDeclaration[346365-346497]:MethodDeclaration[346395-346527]"
  }, {
    "left" : "/**\n   * @webref shape\n   * @see PShape\n   * @see PShape#endShape()\n   * @see PApplet#loadShape(String)\n   */\n  public PShape createShape() {\n    return g.createShape();\n  }",
    "right" : "/**\n   * @webref shape\n   * @see PShape\n   * @see PShape#endShape()\n   * @see PApplet#loadShape(String)\n   */\n  public PShape createShape() {\n    return g.createShape();\n  }",
    "info" : "MethodDeclaration[346502-346675]:MethodDeclaration[346532-346705]"
  }, {
    "left" : "public PShape createShape(int type) {\n    return g.createShape(type);\n  }",
    "right" : "public PShape createShape(int type) {\n    return g.createShape(type);\n  }",
    "info" : "MethodDeclaration[346680-346753]:MethodDeclaration[346710-346783]"
  }, {
    "left" : "/**\n   * @param kind either POINT, LINE, TRIANGLE, QUAD, RECT, ELLIPSE, ARC, BOX, SPHERE\n   * @param p parameters that match the kind of shape\n   */\n  public PShape createShape(int kind, float... p) {\n    return g.createShape(kind, p);\n  }",
    "right" : "/**\n   * @param kind either POINT, LINE, TRIANGLE, QUAD, RECT, ELLIPSE, ARC, BOX, SPHERE\n   * @param p parameters that match the kind of shape\n   */\n  public PShape createShape(int kind, float... p) {\n    return g.createShape(kind, p);\n  }",
    "info" : "MethodDeclaration[346758-346997]:MethodDeclaration[346788-347027]"
  }, {
    "left" : "public fragFilename String) : PShader",
    "right" : "public fragFilename String) : PShader",
    "info" : "MethodDeclaration[347002-347366]:MethodDeclaration[347032-347396]"
  }, {
    "left" : "public fragFilename String, vertFilename String) : PShader",
    "right" : "public fragFilename String, vertFilename String) : PShader",
    "info" : "MethodDeclaration[347371-347561]:MethodDeclaration[347401-347591]"
  }, {
    "left" : "/**\n   * ( begin auto-generated from shader.xml )\n   *\n   * This is a new reference entry for Processing 2.0. It will be updated shortly.\n   *\n   * ( end auto-generated )\n   *\n   * @webref rendering:shaders\n   * @param shader name of shader file\n   */\n  public void shader(PShader shader) {\n    if (recorder != null) recorder.shader(shader);\n    g.shader(shader);\n  }",
    "right" : "/**\n   * ( begin auto-generated from shader.xml )\n   *\n   * This is a new reference entry for Processing 2.0. It will be updated shortly.\n   *\n   * ( end auto-generated )\n   *\n   * @webref rendering:shaders\n   * @param shader name of shader file\n   */\n  public void shader(PShader shader) {\n    if (recorder != null) recorder.shader(shader);\n    g.shader(shader);\n  }",
    "info" : "MethodDeclaration[347566-347933]:MethodDeclaration[347596-347963]"
  }, {
    "left" : "/**\n   * @param kind type of shader, either POINTS, LINES, or TRIANGLES\n   */\n  public void shader(PShader shader, int kind) {\n    if (recorder != null) recorder.shader(shader, kind);\n    g.shader(shader, kind);\n  }",
    "right" : "/**\n   * @param kind type of shader, either POINTS, LINES, or TRIANGLES\n   */\n  public void shader(PShader shader, int kind) {\n    if (recorder != null) recorder.shader(shader, kind);\n    g.shader(shader, kind);\n  }",
    "info" : "MethodDeclaration[347938-348153]:MethodDeclaration[347968-348183]"
  }, {
    "left" : "/**\n   * ( begin auto-generated from resetShader.xml )\n   *\n   * This is a new reference entry for Processing 2.0. It will be updated shortly.\n   *\n   * ( end auto-generated )\n   *\n   * @webref rendering:shaders\n   */\n  public void resetShader() {\n    if (recorder != null) recorder.resetShader();\n    g.resetShader();\n  }",
    "right" : "/**\n   * ( begin auto-generated from resetShader.xml )\n   *\n   * This is a new reference entry for Processing 2.0. It will be updated shortly.\n   *\n   * ( end auto-generated )\n   *\n   * @webref rendering:shaders\n   */\n  public void resetShader() {\n    if (recorder != null) recorder.resetShader();\n    g.resetShader();\n  }",
    "info" : "MethodDeclaration[348158-348480]:MethodDeclaration[348188-348510]"
  }, {
    "left" : "public kind int) : void",
    "right" : "public kind int) : void",
    "info" : "MethodDeclaration[348485-348683]:MethodDeclaration[348515-348713]"
  }, {
    "left" : "/**\n   * @param shader the fragment shader to apply\n   */\n  public void filter(PShader shader) {\n    if (recorder != null) recorder.filter(shader);\n    g.filter(shader);\n  }",
    "right" : "/**\n   * @param shader the fragment shader to apply\n   */\n  public void filter(PShader shader) {\n    if (recorder != null) recorder.filter(shader);\n    g.filter(shader);\n  }",
    "info" : "MethodDeclaration[348688-348861]:MethodDeclaration[348718-348891]"
  }, {
    "left" : "public void clip(float a, float b, float c, float d) {\n    if (recorder != null) recorder.clip(a, b, c, d);\n    g.clip(a, b, c, d);\n  }",
    "right" : "public void clip(float a, float b, float c, float d) {\n    if (recorder != null) recorder.clip(a, b, c, d);\n    g.clip(a, b, c, d);\n  }",
    "info" : "MethodDeclaration[349115-349250]:MethodDeclaration[349145-349280]"
  }, {
    "left" : "public ) : void",
    "right" : "public ) : void",
    "info" : "MethodDeclaration[349297-349384]:MethodDeclaration[349327-349414]"
  }, {
    "left" : "/**\n   * ( begin auto-generated from blendMode.xml )\n   *\n   * This is a new reference entry for Processing 2.0. It will be updated shortly.\n   *\n   * ( end auto-generated )\n   *\n   * @webref rendering\n   * @param mode the blending mode to use\n   */\n  public void blendMode(int mode) {\n    if (recorder != null) recorder.blendMode(mode);\n    g.blendMode(mode);\n  }",
    "right" : "/**\n   * ( begin auto-generated from blendMode.xml )\n   *\n   * This is a new reference entry for Processing 2.0. It will be updated shortly.\n   *\n   * ( end auto-generated )\n   *\n   * @webref rendering\n   * @param mode the blending mode to use\n   */\n  public void blendMode(int mode) {\n    if (recorder != null) recorder.blendMode(mode);\n    g.blendMode(mode);\n  }",
    "info" : "MethodDeclaration[349389-349753]:MethodDeclaration[349419-349783]"
  }, {
    "left" : "public x2 float, y2 float, x3 float, y3 float, x4 float, y4 float) : void",
    "right" : "public x2 float, y2 float, x3 float, y3 float, x4 float, y4 float) : void",
    "info" : "MethodDeclaration[349758-350019]:MethodDeclaration[349788-350049]"
  }, {
    "left" : "public x2 float, y2 float, z2 float, x3 float, y3 float, z3 float, x4 float, y4 float, z4 float) : void",
    "right" : "public x2 float, y2 float, z2 float, x3 float, y3 float, z3 float, x4 float, y4 float, z4 float) : void",
    "info" : "MethodDeclaration[350022-351911]:MethodDeclaration[350052-351941]"
  }, {
    "left" : "/**\n   * @webref shape:vertex\n   * @param cx the x-coordinate of the control point\n   * @param cy the y-coordinate of the control point\n   * @param x3 the x-coordinate of the anchor point\n   * @param y3 the y-coordinate of the anchor point\n   * @see PGraphics#curveVertex(float, float, float)\n   * @see PGraphics#vertex(float, float, float, float, float)\n   * @see PGraphics#bezierVertex(float, float, float, float, float, float)\n   * @see PGraphics#bezier(float, float, float, float, float, float, float, float, float, float, float, float)\n   */\n  public void quadraticVertex(float cx, float cy,\n                              float x3, float y3) {\n    if (recorder != null) recorder.quadraticVertex(cx, cy, x3, y3);\n    g.quadraticVertex(cx, cy, x3, y3);\n  }",
    "right" : "/**\n   * @webref shape:vertex\n   * @param cx the x-coordinate of the control point\n   * @param cy the y-coordinate of the control point\n   * @param x3 the x-coordinate of the anchor point\n   * @param y3 the y-coordinate of the anchor point\n   * @see PGraphics#curveVertex(float, float, float)\n   * @see PGraphics#vertex(float, float, float, float, float)\n   * @see PGraphics#bezierVertex(float, float, float, float, float, float)\n   * @see PGraphics#bezier(float, float, float, float, float, float, float, float, float, float, float, float)\n   */\n  public void quadraticVertex(float cx, float cy,\n                              float x3, float y3) {\n    if (recorder != null) recorder.quadraticVertex(cx, cy, x3, y3);\n    g.quadraticVertex(cx, cy, x3, y3);\n  }",
    "info" : "MethodDeclaration[351916-352675]:MethodDeclaration[351946-352705]"
  }, {
    "left" : "/**\n   * @param cz the z-coordinate of the control point\n   * @param z3 the z-coordinate of the anchor point\n   */\n  public void quadraticVertex(float cx, float cy, float cz,\n                              float x3, float y3, float z3) {\n    if (recorder != null) recorder.quadraticVertex(cx, cy, cz, x3, y3, z3);\n    g.quadraticVertex(cx, cy, cz, x3, y3, z3);\n  }",
    "right" : "/**\n   * @param cz the z-coordinate of the control point\n   * @param z3 the z-coordinate of the anchor point\n   */\n  public void quadraticVertex(float cx, float cy, float cz,\n                              float x3, float y3, float z3) {\n    if (recorder != null) recorder.quadraticVertex(cx, cy, cz, x3, y3, z3);\n    g.quadraticVertex(cx, cy, cz, x3, y3, z3);\n  }",
    "info" : "MethodDeclaration[352680-353043]:MethodDeclaration[352710-353073]"
  }, {
    "left" : "/**\n   * ( begin auto-generated from curveVertex.xml )\n   *\n   * Specifies vertex coordinates for curves. This function may only be used\n   * between <b>beginShape()</b> and <b>endShape()</b> and only when there is\n   * no MODE parameter specified to <b>beginShape()</b>. The first and last\n   * points in a series of <b>curveVertex()</b> lines will be used to guide\n   * the beginning and end of a the curve. A minimum of four points is\n   * required to draw a tiny curve between the second and third points.\n   * Adding a fifth point with <b>curveVertex()</b> will draw the curve\n   * between the second, third, and fourth points. The <b>curveVertex()</b>\n   * function is an implementation of Catmull-Rom splines. Using the 3D\n   * version requires rendering with P3D (see the Environment reference for\n   * more information).\n   *\n   * ( end auto-generated )\n  *\n  * @webref shape:vertex\n  * @param x the x-coordinate of the vertex\n  * @param y the y-coordinate of the vertex\n  * @see PGraphics#curve(float, float, float, float, float, float, float, float, float, float, float, float)\n  * @see PGraphics#beginShape(int)\n  * @see PGraphics#endShape(int)\n  * @see PGraphics#vertex(float, float, float, float, float)\n  * @see PGraphics#bezier(float, float, float, float, float, float, float, float, float, float, float, float)\n  * @see PGraphics#quadraticVertex(float, float, float, float, float, float)\n  */\n  public void curveVertex(float x, float y) {\n    if (recorder != null) recorder.curveVertex(x, y);\n    g.curveVertex(x, y);\n  }",
    "right" : "/**\n   * ( begin auto-generated from curveVertex.xml )\n   *\n   * Specifies vertex coordinates for curves. This function may only be used\n   * between <b>beginShape()</b> and <b>endShape()</b> and only when there is\n   * no MODE parameter specified to <b>beginShape()</b>. The first and last\n   * points in a series of <b>curveVertex()</b> lines will be used to guide\n   * the beginning and end of a the curve. A minimum of four points is\n   * required to draw a tiny curve between the second and third points.\n   * Adding a fifth point with <b>curveVertex()</b> will draw the curve\n   * between the second, third, and fourth points. The <b>curveVertex()</b>\n   * function is an implementation of Catmull-Rom splines. Using the 3D\n   * version requires rendering with P3D (see the Environment reference for\n   * more information).\n   *\n   * ( end auto-generated )\n  *\n  * @webref shape:vertex\n  * @param x the x-coordinate of the vertex\n  * @param y the y-coordinate of the vertex\n  * @see PGraphics#curve(float, float, float, float, float, float, float, float, float, float, float, float)\n  * @see PGraphics#beginShape(int)\n  * @see PGraphics#endShape(int)\n  * @see PGraphics#vertex(float, float, float, float, float)\n  * @see PGraphics#bezier(float, float, float, float, float, float, float, float, float, float, float, float)\n  * @see PGraphics#quadraticVertex(float, float, float, float, float, float)\n  */\n  public void curveVertex(float x, float y) {\n    if (recorder != null) recorder.curveVertex(x, y);\n    g.curveVertex(x, y);\n  }",
    "info" : "MethodDeclaration[353047-354585]:MethodDeclaration[353077-354615]"
  }, {
    "left" : "/**\n   * @param z the z-coordinate of the vertex\n   */\n  public void curveVertex(float x, float y, float z) {\n    if (recorder != null) recorder.curveVertex(x, y, z);\n    g.curveVertex(x, y, z);\n  }",
    "right" : "/**\n   * @param z the z-coordinate of the vertex\n   */\n  public void curveVertex(float x, float y, float z) {\n    if (recorder != null) recorder.curveVertex(x, y, z);\n    g.curveVertex(x, y, z);\n  }",
    "info" : "MethodDeclaration[354590-354788]:MethodDeclaration[354620-354818]"
  }, {
    "left" : "/**\n   * ( begin auto-generated from point.xml )\n   *\n   * Draws a point, a coordinate in space at the dimension of one pixel. The\n   * first parameter is the horizontal value for the point, the second value\n   * is the vertical value for the point, and the optional third value is the\n   * depth value. Drawing this shape in 3D with the <b>z</b> parameter\n   * requires the P3D parameter in combination with <b>size()</b> as shown in\n   * the above example.\n   *\n   * ( end auto-generated )\n   *\n   * @webref shape:2d_primitives\n   * @param x x-coordinate of the point\n   * @param y y-coordinate of the point\n   */\n  public void point(float x, float y) {\n    if (recorder != null) recorder.point(x, y);\n    g.point(x, y);\n  }",
    "right" : "/**\n   * ( begin auto-generated from point.xml )\n   *\n   * Draws a point, a coordinate in space at the dimension of one pixel. The\n   * first parameter is the horizontal value for the point, the second value\n   * is the vertical value for the point, and the optional third value is the\n   * depth value. Drawing this shape in 3D with the <b>z</b> parameter\n   * requires the P3D parameter in combination with <b>size()</b> as shown in\n   * the above example.\n   *\n   * ( end auto-generated )\n   *\n   * @webref shape:2d_primitives\n   * @param x x-coordinate of the point\n   * @param y y-coordinate of the point\n   */\n  public void point(float x, float y) {\n    if (recorder != null) recorder.point(x, y);\n    g.point(x, y);\n  }",
    "info" : "MethodDeclaration[354793-355519]:MethodDeclaration[354823-355549]"
  }, {
    "left" : "public x float, y float, z float) : void",
    "right" : "public x float, y float, z float) : void",
    "info" : "MethodDeclaration[355524-355699]:MethodDeclaration[355554-355729]"
  }, {
    "left" : "/**\n   * ( begin auto-generated from line.xml )\n   *\n   * Draws a line (a direct path between two points) to the screen. The\n   * version of <b>line()</b> with four parameters draws the line in 2D.  To\n   * color a line, use the <b>stroke()</b> function. A line cannot be filled,\n   * therefore the <b>fill()</b> function will not affect the color of a\n   * line. 2D lines are drawn with a width of one pixel by default, but this\n   * can be changed with the <b>strokeWeight()</b> function. The version with\n   * six parameters allows the line to be placed anywhere within XYZ space.\n   * Drawing this shape in 3D with the <b>z</b> parameter requires the P3D\n   * parameter in combination with <b>size()</b> as shown in the above example.\n   *\n   * ( end auto-generated )\n   * @webref shape:2d_primitives\n   * @param x1 x-coordinate of the first point\n   * @param y1 y-coordinate of the first point\n   * @param x2 x-coordinate of the second point\n   * @param y2 y-coordinate of the second point\n   * @see PGraphics#strokeWeight(float)\n   * @see PGraphics#strokeJoin(int)\n   * @see PGraphics#strokeCap(int)\n   * @see PGraphics#beginShape()\n   */\n  public void line(float x1, float y1, float x2, float y2) {\n    if (recorder != null) recorder.line(x1, y1, x2, y2);\n    g.line(x1, y1, x2, y2);\n  }",
    "right" : "/**\n   * ( begin auto-generated from line.xml )\n   *\n   * Draws a line (a direct path between two points) to the screen. The\n   * version of <b>line()</b> with four parameters draws the line in 2D.  To\n   * color a line, use the <b>stroke()</b> function. A line cannot be filled,\n   * therefore the <b>fill()</b> function will not affect the color of a\n   * line. 2D lines are drawn with a width of one pixel by default, but this\n   * can be changed with the <b>strokeWeight()</b> function. The version with\n   * six parameters allows the line to be placed anywhere within XYZ space.\n   * Drawing this shape in 3D with the <b>z</b> parameter requires the P3D\n   * parameter in combination with <b>size()</b> as shown in the above example.\n   *\n   * ( end auto-generated )\n   * @webref shape:2d_primitives\n   * @param x1 x-coordinate of the first point\n   * @param y1 y-coordinate of the first point\n   * @param x2 x-coordinate of the second point\n   * @param y2 y-coordinate of the second point\n   * @see PGraphics#strokeWeight(float)\n   * @see PGraphics#strokeJoin(int)\n   * @see PGraphics#strokeCap(int)\n   * @see PGraphics#beginShape()\n   */\n  public void line(float x1, float y1, float x2, float y2) {\n    if (recorder != null) recorder.line(x1, y1, x2, y2);\n    g.line(x1, y1, x2, y2);\n  }",
    "info" : "MethodDeclaration[355704-356998]:MethodDeclaration[355734-357028]"
  }, {
    "left" : "/**\n   * @param z1 z-coordinate of the first point\n   * @param z2 z-coordinate of the second point\n   */\n  public void line(float x1, float y1, float z1,\n                   float x2, float y2, float z2) {\n    if (recorder != null) recorder.line(x1, y1, z1, x2, y2, z2);\n    g.line(x1, y1, z1, x2, y2, z2);\n  }",
    "right" : "/**\n   * @param z1 z-coordinate of the first point\n   * @param z2 z-coordinate of the second point\n   */\n  public void line(float x1, float y1, float z1,\n                   float x2, float y2, float z2) {\n    if (recorder != null) recorder.line(x1, y1, z1, x2, y2, z2);\n    g.line(x1, y1, z1, x2, y2, z2);\n  }",
    "info" : "MethodDeclaration[357003-357312]:MethodDeclaration[357033-357342]"
  }, {
    "left" : "/**\n   * ( begin auto-generated from triangle.xml )\n   *\n   * A triangle is a plane created by connecting three points. The first two\n   * arguments specify the first point, the middle two arguments specify the\n   * second point, and the last two arguments specify the third point.\n   *\n   * ( end auto-generated )\n   * @webref shape:2d_primitives\n   * @param x1 x-coordinate of the first point\n   * @param y1 y-coordinate of the first point\n   * @param x2 x-coordinate of the second point\n   * @param y2 y-coordinate of the second point\n   * @param x3 x-coordinate of the third point\n   * @param y3 y-coordinate of the third point\n   * @see PApplet#beginShape()\n   */\n  public void triangle(float x1, float y1, float x2, float y2,\n                       float x3, float y3) {\n    if (recorder != null) recorder.triangle(x1, y1, x2, y2, x3, y3);\n    g.triangle(x1, y1, x2, y2, x3, y3);\n  }",
    "right" : "/**\n   * ( begin auto-generated from triangle.xml )\n   *\n   * A triangle is a plane created by connecting three points. The first two\n   * arguments specify the first point, the middle two arguments specify the\n   * second point, and the last two arguments specify the third point.\n   *\n   * ( end auto-generated )\n   * @webref shape:2d_primitives\n   * @param x1 x-coordinate of the first point\n   * @param y1 y-coordinate of the first point\n   * @param x2 x-coordinate of the second point\n   * @param y2 y-coordinate of the second point\n   * @param x3 x-coordinate of the third point\n   * @param y3 y-coordinate of the third point\n   * @see PApplet#beginShape()\n   */\n  public void triangle(float x1, float y1, float x2, float y2,\n                       float x3, float y3) {\n    if (recorder != null) recorder.triangle(x1, y1, x2, y2, x3, y3);\n    g.triangle(x1, y1, x2, y2, x3, y3);\n  }",
    "info" : "MethodDeclaration[357317-358206]:MethodDeclaration[357347-358236]"
  }, {
    "left" : "/**\n   * ( begin auto-generated from quad.xml )\n   *\n   * A quad is a quadrilateral, a four sided polygon. It is similar to a\n   * rectangle, but the angles between its edges are not constrained to\n   * ninety degrees. The first pair of parameters (x1,y1) sets the first\n   * vertex and the subsequent pairs should proceed clockwise or\n   * counter-clockwise around the defined shape.\n   *\n   * ( end auto-generated )\n   * @webref shape:2d_primitives\n   * @param x1 x-coordinate of the first corner\n   * @param y1 y-coordinate of the first corner\n   * @param x2 x-coordinate of the second corner\n   * @param y2 y-coordinate of the second corner\n   * @param x3 x-coordinate of the third corner\n   * @param y3 y-coordinate of the third corner\n   * @param x4 x-coordinate of the fourth corner\n   * @param y4 y-coordinate of the fourth corner\n   */\n  public void quad(float x1, float y1, float x2, float y2,\n                   float x3, float y3, float x4, float y4) {\n    if (recorder != null) recorder.quad(x1, y1, x2, y2, x3, y3, x4, y4);\n    g.quad(x1, y1, x2, y2, x3, y3, x4, y4);\n  }",
    "right" : "/**\n   * ( begin auto-generated from quad.xml )\n   *\n   * A quad is a quadrilateral, a four sided polygon. It is similar to a\n   * rectangle, but the angles between its edges are not constrained to\n   * ninety degrees. The first pair of parameters (x1,y1) sets the first\n   * vertex and the subsequent pairs should proceed clockwise or\n   * counter-clockwise around the defined shape.\n   *\n   * ( end auto-generated )\n   * @webref shape:2d_primitives\n   * @param x1 x-coordinate of the first corner\n   * @param y1 y-coordinate of the first corner\n   * @param x2 x-coordinate of the second corner\n   * @param y2 y-coordinate of the second corner\n   * @param x3 x-coordinate of the third corner\n   * @param y3 y-coordinate of the third corner\n   * @param x4 x-coordinate of the fourth corner\n   * @param y4 y-coordinate of the fourth corner\n   */\n  public void quad(float x1, float y1, float x2, float y2,\n                   float x3, float y3, float x4, float y4) {\n    if (recorder != null) recorder.quad(x1, y1, x2, y2, x3, y3, x4, y4);\n    g.quad(x1, y1, x2, y2, x3, y3, x4, y4);\n  }",
    "info" : "MethodDeclaration[358211-359296]:MethodDeclaration[358241-359326]"
  }, {
    "left" : "/**\n   * ( begin auto-generated from rectMode.xml )\n   *\n   * Modifies the location from which rectangles draw. The default mode is\n   * <b>rectMode(CORNER)</b>, which specifies the location to be the upper\n   * left corner of the shape and uses the third and fourth parameters of\n   * <b>rect()</b> to specify the width and height. The syntax\n   * <b>rectMode(CORNERS)</b> uses the first and second parameters of\n   * <b>rect()</b> to set the location of one corner and uses the third and\n   * fourth parameters to set the opposite corner. The syntax\n   * <b>rectMode(CENTER)</b> draws the image from its center point and uses\n   * the third and forth parameters of <b>rect()</b> to specify the image's\n   * width and height. The syntax <b>rectMode(RADIUS)</b> draws the image\n   * from its center point and uses the third and forth parameters of\n   * <b>rect()</b> to specify half of the image's width and height. The\n   * parameter must be written in ALL CAPS because Processing is a case\n   * sensitive language. Note: In version 125, the mode named CENTER_RADIUS\n   * was shortened to RADIUS.\n   *\n   * ( end auto-generated )\n   * @webref shape:attributes\n   * @param mode either CORNER, CORNERS, CENTER, or RADIUS\n   * @see PGraphics#rect(float, float, float, float)\n   */\n  public void rectMode(int mode) {\n    if (recorder != null) recorder.rectMode(mode);\n    g.rectMode(mode);\n  }",
    "right" : "/**\n   * ( begin auto-generated from rectMode.xml )\n   *\n   * Modifies the location from which rectangles draw. The default mode is\n   * <b>rectMode(CORNER)</b>, which specifies the location to be the upper\n   * left corner of the shape and uses the third and fourth parameters of\n   * <b>rect()</b> to specify the width and height. The syntax\n   * <b>rectMode(CORNERS)</b> uses the first and second parameters of\n   * <b>rect()</b> to set the location of one corner and uses the third and\n   * fourth parameters to set the opposite corner. The syntax\n   * <b>rectMode(CENTER)</b> draws the image from its center point and uses\n   * the third and forth parameters of <b>rect()</b> to specify the image's\n   * width and height. The syntax <b>rectMode(RADIUS)</b> draws the image\n   * from its center point and uses the third and forth parameters of\n   * <b>rect()</b> to specify half of the image's width and height. The\n   * parameter must be written in ALL CAPS because Processing is a case\n   * sensitive language. Note: In version 125, the mode named CENTER_RADIUS\n   * was shortened to RADIUS.\n   *\n   * ( end auto-generated )\n   * @webref shape:attributes\n   * @param mode either CORNER, CORNERS, CENTER, or RADIUS\n   * @see PGraphics#rect(float, float, float, float)\n   */\n  public void rectMode(int mode) {\n    if (recorder != null) recorder.rectMode(mode);\n    g.rectMode(mode);\n  }",
    "info" : "MethodDeclaration[359301-360691]:MethodDeclaration[359331-360721]"
  }, {
    "left" : "/**\n   * ( begin auto-generated from rect.xml )\n   *\n   * Draws a rectangle to the screen. A rectangle is a four-sided shape with\n   * every angle at ninety degrees. By default, the first two parameters set\n   * the location of the upper-left corner, the third sets the width, and the\n   * fourth sets the height. These parameters may be changed with the\n   * <b>rectMode()</b> function.\n   *\n   * ( end auto-generated )\n   *\n   * @webref shape:2d_primitives\n   * @param a x-coordinate of the rectangle by default\n   * @param b y-coordinate of the rectangle by default\n   * @param c width of the rectangle by default\n   * @param d height of the rectangle by default\n   * @see PGraphics#rectMode(int)\n   * @see PGraphics#quad(float, float, float, float, float, float, float, float)\n   */\n  public void rect(float a, float b, float c, float d) {\n    if (recorder != null) recorder.rect(a, b, c, d);\n    g.rect(a, b, c, d);\n  }",
    "right" : "/**\n   * ( begin auto-generated from rect.xml )\n   *\n   * Draws a rectangle to the screen. A rectangle is a four-sided shape with\n   * every angle at ninety degrees. By default, the first two parameters set\n   * the location of the upper-left corner, the third sets the width, and the\n   * fourth sets the height. These parameters may be changed with the\n   * <b>rectMode()</b> function.\n   *\n   * ( end auto-generated )\n   *\n   * @webref shape:2d_primitives\n   * @param a x-coordinate of the rectangle by default\n   * @param b y-coordinate of the rectangle by default\n   * @param c width of the rectangle by default\n   * @param d height of the rectangle by default\n   * @see PGraphics#rectMode(int)\n   * @see PGraphics#quad(float, float, float, float, float, float, float, float)\n   */\n  public void rect(float a, float b, float c, float d) {\n    if (recorder != null) recorder.rect(a, b, c, d);\n    g.rect(a, b, c, d);\n  }",
    "info" : "MethodDeclaration[360696-361620]:MethodDeclaration[360726-361650]"
  }, {
    "left" : "/**\n   * @param r radii for all four corners\n   */\n  public void rect(float a, float b, float c, float d, float r) {\n    if (recorder != null) recorder.rect(a, b, c, d, r);\n    g.rect(a, b, c, d, r);\n  }",
    "right" : "/**\n   * @param r radii for all four corners\n   */\n  public void rect(float a, float b, float c, float d, float r) {\n    if (recorder != null) recorder.rect(a, b, c, d, r);\n    g.rect(a, b, c, d, r);\n  }",
    "info" : "MethodDeclaration[361625-361828]:MethodDeclaration[361655-361858]"
  }, {
    "left" : "/**\n   * @param tl radius for top-left corner\n   * @param tr radius for top-right corner\n   * @param br radius for bottom-right corner\n   * @param bl radius for bottom-left corner\n   */\n  public void rect(float a, float b, float c, float d,\n                   float tl, float tr, float br, float bl) {\n    if (recorder != null) recorder.rect(a, b, c, d, tl, tr, br, bl);\n    g.rect(a, b, c, d, tl, tr, br, bl);\n  }",
    "right" : "/**\n   * @param tl radius for top-left corner\n   * @param tr radius for top-right corner\n   * @param br radius for bottom-right corner\n   * @param bl radius for bottom-left corner\n   */\n  public void rect(float a, float b, float c, float d,\n                   float tl, float tr, float br, float bl) {\n    if (recorder != null) recorder.rect(a, b, c, d, tl, tr, br, bl);\n    g.rect(a, b, c, d, tl, tr, br, bl);\n  }",
    "info" : "MethodDeclaration[361833-362247]:MethodDeclaration[361863-362277]"
  }, {
    "left" : "/**\n   * ( begin auto-generated from ellipseMode.xml )\n   *\n   * The origin of the ellipse is modified by the <b>ellipseMode()</b>\n   * function. The default configuration is <b>ellipseMode(CENTER)</b>, which\n   * specifies the location of the ellipse as the center of the shape. The\n   * <b>RADIUS</b> mode is the same, but the width and height parameters to\n   * <b>ellipse()</b> specify the radius of the ellipse, rather than the\n   * diameter. The <b>CORNER</b> mode draws the shape from the upper-left\n   * corner of its bounding box. The <b>CORNERS</b> mode uses the four\n   * parameters to <b>ellipse()</b> to set two opposing corners of the\n   * ellipse's bounding box. The parameter must be written in ALL CAPS\n   * because Processing is a case-sensitive language.\n   *\n   * ( end auto-generated )\n   * @webref shape:attributes\n   * @param mode either CENTER, RADIUS, CORNER, or CORNERS\n   * @see PApplet#ellipse(float, float, float, float)\n   * @see PApplet#arc(float, float, float, float, float, float)\n   */\n  public void ellipseMode(int mode) {\n    if (recorder != null) recorder.ellipseMode(mode);\n    g.ellipseMode(mode);\n  }",
    "right" : "/**\n   * ( begin auto-generated from ellipseMode.xml )\n   *\n   * The origin of the ellipse is modified by the <b>ellipseMode()</b>\n   * function. The default configuration is <b>ellipseMode(CENTER)</b>, which\n   * specifies the location of the ellipse as the center of the shape. The\n   * <b>RADIUS</b> mode is the same, but the width and height parameters to\n   * <b>ellipse()</b> specify the radius of the ellipse, rather than the\n   * diameter. The <b>CORNER</b> mode draws the shape from the upper-left\n   * corner of its bounding box. The <b>CORNERS</b> mode uses the four\n   * parameters to <b>ellipse()</b> to set two opposing corners of the\n   * ellipse's bounding box. The parameter must be written in ALL CAPS\n   * because Processing is a case-sensitive language.\n   *\n   * ( end auto-generated )\n   * @webref shape:attributes\n   * @param mode either CENTER, RADIUS, CORNER, or CORNERS\n   * @see PApplet#ellipse(float, float, float, float)\n   * @see PApplet#arc(float, float, float, float, float, float)\n   */\n  public void ellipseMode(int mode) {\n    if (recorder != null) recorder.ellipseMode(mode);\n    g.ellipseMode(mode);\n  }",
    "info" : "MethodDeclaration[362252-363392]:MethodDeclaration[362282-363422]"
  }, {
    "left" : "public a float, b float, c float, d float) : void",
    "right" : "public a float, b float, c float, d float) : void",
    "info" : "MethodDeclaration[363397-364250]:MethodDeclaration[363427-364280]"
  }, {
    "left" : "public a float, b float, c float, d float, start float, stop float) : void",
    "right" : "public a float, b float, c float, d float, start float, stop float) : void",
    "info" : "MethodDeclaration[364255-365427]:MethodDeclaration[364285-365457]"
  }, {
    "left" : "public void arc(float a, float b, float c, float d,\n                  float start, float stop, int mode) {\n    if (recorder != null) recorder.arc(a, b, c, d, start, stop, mode);\n    g.arc(a, b, c, d, start, stop, mode);\n  }",
    "right" : "public void arc(float a, float b, float c, float d,\n                  float start, float stop, int mode) {\n    if (recorder != null) recorder.arc(a, b, c, d, start, stop, mode);\n    g.arc(a, b, c, d, start, stop, mode);\n  }",
    "info" : "MethodDeclaration[365487-365710]:MethodDeclaration[365517-365740]"
  }, {
    "left" : "public size float) : void",
    "right" : "public size float) : void",
    "info" : "MethodDeclaration[365715-366142]:MethodDeclaration[365745-366172]"
  }, {
    "left" : "public w float, h float, d float) : void",
    "right" : "public w float, h float, d float) : void",
    "info" : "MethodDeclaration[366147-366438]:MethodDeclaration[366177-366468]"
  }, {
    "left" : "/**\n   * ( begin auto-generated from sphereDetail.xml )\n   *\n   * Controls the detail used to render a sphere by adjusting the number of\n   * vertices of the sphere mesh. The default resolution is 30, which creates\n   * a fairly detailed sphere definition with vertices every 360/30 = 12\n   * degrees. If you're going to render a great number of spheres per frame,\n   * it is advised to reduce the level of detail using this function. The\n   * setting stays active until <b>sphereDetail()</b> is called again with a\n   * new parameter and so should <i>not</i> be called prior to every\n   * <b>sphere()</b> statement, unless you wish to render spheres with\n   * different settings, e.g. using less detail for smaller spheres or ones\n   * further away from the camera. To control the detail of the horizontal\n   * and vertical resolution independently, use the version of the functions\n   * with two parameters.\n   *\n   * ( end auto-generated )\n   *\n   * <h3>Advanced</h3>\n   * Code for sphereDetail() submitted by toxi [031031].\n   * Code for enhanced u/v version from davbol [080801].\n   *\n   * @param res number of segments (minimum 3) used per full circle revolution\n   * @webref shape:3d_primitives\n   * @see PGraphics#sphere(float)\n   */\n  public void sphereDetail(int res) {\n    if (recorder != null) recorder.sphereDetail(res);\n    g.sphereDetail(res);\n  }",
    "right" : "/**\n   * ( begin auto-generated from sphereDetail.xml )\n   *\n   * Controls the detail used to render a sphere by adjusting the number of\n   * vertices of the sphere mesh. The default resolution is 30, which creates\n   * a fairly detailed sphere definition with vertices every 360/30 = 12\n   * degrees. If you're going to render a great number of spheres per frame,\n   * it is advised to reduce the level of detail using this function. The\n   * setting stays active until <b>sphereDetail()</b> is called again with a\n   * new parameter and so should <i>not</i> be called prior to every\n   * <b>sphere()</b> statement, unless you wish to render spheres with\n   * different settings, e.g. using less detail for smaller spheres or ones\n   * further away from the camera. To control the detail of the horizontal\n   * and vertical resolution independently, use the version of the functions\n   * with two parameters.\n   *\n   * ( end auto-generated )\n   *\n   * <h3>Advanced</h3>\n   * Code for sphereDetail() submitted by toxi [031031].\n   * Code for enhanced u/v version from davbol [080801].\n   *\n   * @param res number of segments (minimum 3) used per full circle revolution\n   * @webref shape:3d_primitives\n   * @see PGraphics#sphere(float)\n   */\n  public void sphereDetail(int res) {\n    if (recorder != null) recorder.sphereDetail(res);\n    g.sphereDetail(res);\n  }",
    "info" : "MethodDeclaration[366443-367805]:MethodDeclaration[366473-367835]"
  }, {
    "left" : "/**\n   * @param ures number of segments used longitudinally per full circle revolutoin\n   * @param vres number of segments used latitudinally from top to bottom\n   */\n  public void sphereDetail(int ures, int vres) {\n    if (recorder != null) recorder.sphereDetail(ures, vres);\n    g.sphereDetail(ures, vres);\n  }",
    "right" : "/**\n   * @param ures number of segments used longitudinally per full circle revolutoin\n   * @param vres number of segments used latitudinally from top to bottom\n   */\n  public void sphereDetail(int ures, int vres) {\n    if (recorder != null) recorder.sphereDetail(ures, vres);\n    g.sphereDetail(ures, vres);\n  }",
    "info" : "MethodDeclaration[367810-368122]:MethodDeclaration[367840-368152]"
  }, {
    "left" : "public r float) : void",
    "right" : "public r float) : void",
    "info" : "MethodDeclaration[368127-369203]:MethodDeclaration[368157-369233]"
  }, {
    "left" : "public a float, b float, c float, d float, t float) : float",
    "right" : "public a float, b float, c float, d float, t float) : float",
    "info" : "MethodDeclaration[369208-370949]:MethodDeclaration[369238-370979]"
  }, {
    "left" : "/**\n   * ( begin auto-generated from bezierTangent.xml )\n   *\n   * Calculates the tangent of a point on a Bezier curve. There is a good\n   * definition of <a href=\"http://en.wikipedia.org/wiki/Tangent\"\n   * target=\"new\"><em>tangent</em> on Wikipedia</a>.\n   *\n   * ( end auto-generated )\n   *\n   * <h3>Advanced</h3>\n   * Code submitted by Dave Bollinger (davol) for release 0136.\n   *\n   * @webref shape:curves\n   * @param a coordinate of first point on the curve\n   * @param b coordinate of first control point\n   * @param c coordinate of second control point\n   * @param d coordinate of second point on the curve\n   * @param t value between 0 and 1\n   * @see PGraphics#bezier(float, float, float, float, float, float, float, float, float, float, float, float)\n   * @see PGraphics#bezierVertex(float, float, float, float, float, float)\n   * @see PGraphics#curvePoint(float, float, float, float, float)\n   */\n  public float bezierTangent(float a, float b, float c, float d, float t) {\n    return g.bezierTangent(a, b, c, d, t);\n  }",
    "right" : "/**\n   * ( begin auto-generated from bezierTangent.xml )\n   *\n   * Calculates the tangent of a point on a Bezier curve. There is a good\n   * definition of <a href=\"http://en.wikipedia.org/wiki/Tangent\"\n   * target=\"new\"><em>tangent</em> on Wikipedia</a>.\n   *\n   * ( end auto-generated )\n   *\n   * <h3>Advanced</h3>\n   * Code submitted by Dave Bollinger (davol) for release 0136.\n   *\n   * @webref shape:curves\n   * @param a coordinate of first point on the curve\n   * @param b coordinate of first control point\n   * @param c coordinate of second control point\n   * @param d coordinate of second point on the curve\n   * @param t value between 0 and 1\n   * @see PGraphics#bezier(float, float, float, float, float, float, float, float, float, float, float, float)\n   * @see PGraphics#bezierVertex(float, float, float, float, float, float)\n   * @see PGraphics#curvePoint(float, float, float, float, float)\n   */\n  public float bezierTangent(float a, float b, float c, float d, float t) {\n    return g.bezierTangent(a, b, c, d, t);\n  }",
    "info" : "MethodDeclaration[370954-371985]:MethodDeclaration[370984-372015]"
  }, {
    "left" : "public detail int) : void",
    "right" : "public detail int) : void",
    "info" : "MethodDeclaration[371990-372701]:MethodDeclaration[372020-372731]"
  }, {
    "left" : "public x1 float, y1 float, x2 float, y2 float, x3 float, y3 float, x4 float, y4 float) : void",
    "right" : "public x1 float, y1 float, x2 float, y2 float, x3 float, y3 float, x4 float, y4 float) : void",
    "info" : "MethodDeclaration[372706-372994]:MethodDeclaration[372736-373024]"
  }, {
    "left" : "public x1 float, y1 float, z1 float, x2 float, y2 float, z2 float, x3 float, y3 float, z3 float, x4 float, y4 float, z4 float) : void",
    "right" : "public x1 float, y1 float, z1 float, x2 float, y2 float, z2 float, x3 float, y3 float, z3 float, x4 float, y4 float, z4 float) : void",
    "info" : "MethodDeclaration[372999-375703]:MethodDeclaration[373029-375733]"
  }, {
    "left" : "/**\n   * ( begin auto-generated from curvePoint.xml )\n   *\n   * Evalutes the curve at point t for points a, b, c, d. The parameter t\n   * varies between 0 and 1, a and d are points on the curve, and b and c are\n   * the control points. This can be done once with the x coordinates and a\n   * second time with the y coordinates to get the location of a curve at t.\n   *\n   * ( end auto-generated )\n   *\n   * @webref shape:curves\n   * @param a coordinate of first point on the curve\n   * @param b coordinate of second point on the curve\n   * @param c coordinate of third point on the curve\n   * @param d coordinate of fourth point on the curve\n   * @param t value between 0 and 1\n   * @see PGraphics#curve(float, float, float, float, float, float, float, float, float, float, float, float)\n   * @see PGraphics#curveVertex(float, float)\n   * @see PGraphics#bezierPoint(float, float, float, float, float)\n   */\n  public float curvePoint(float a, float b, float c, float d, float t) {\n    return g.curvePoint(a, b, c, d, t);\n  }",
    "right" : "/**\n   * ( begin auto-generated from curvePoint.xml )\n   *\n   * Evalutes the curve at point t for points a, b, c, d. The parameter t\n   * varies between 0 and 1, a and d are points on the curve, and b and c are\n   * the control points. This can be done once with the x coordinates and a\n   * second time with the y coordinates to get the location of a curve at t.\n   *\n   * ( end auto-generated )\n   *\n   * @webref shape:curves\n   * @param a coordinate of first point on the curve\n   * @param b coordinate of second point on the curve\n   * @param c coordinate of third point on the curve\n   * @param d coordinate of fourth point on the curve\n   * @param t value between 0 and 1\n   * @see PGraphics#curve(float, float, float, float, float, float, float, float, float, float, float, float)\n   * @see PGraphics#curveVertex(float, float)\n   * @see PGraphics#bezierPoint(float, float, float, float, float)\n   */\n  public float curvePoint(float a, float b, float c, float d, float t) {\n    return g.curvePoint(a, b, c, d, t);\n  }",
    "info" : "MethodDeclaration[375708-376731]:MethodDeclaration[375738-376761]"
  }, {
    "left" : "public a float, b float, c float, d float, t float) : float",
    "right" : "public a float, b float, c float, d float, t float) : float",
    "info" : "MethodDeclaration[376736-377777]:MethodDeclaration[376766-377807]"
  }, {
    "left" : "public detail int) : void",
    "right" : "public detail int) : void",
    "info" : "MethodDeclaration[377782-378481]:MethodDeclaration[377812-378511]"
  }, {
    "left" : "/**\n   * ( begin auto-generated from curveTightness.xml )\n   *\n   * Modifies the quality of forms created with <b>curve()</b> and\n   * <b>curveVertex()</b>. The parameter <b>squishy</b> determines how the\n   * curve fits to the vertex points. The value 0.0 is the default value for\n   * <b>squishy</b> (this value defines the curves to be Catmull-Rom splines)\n   * and the value 1.0 connects all the points with straight lines. Values\n   * within the range -5.0 and 5.0 will deform the curves but will leave them\n   * recognizable and as values increase in magnitude, they will continue to deform.\n   *\n   * ( end auto-generated )\n   *\n   * @webref shape:curves\n   * @param tightness amount of deformation from the original vertices\n   * @see PGraphics#curve(float, float, float, float, float, float, float, float, float, float, float, float)\n   * @see PGraphics#curveVertex(float, float)\n   */\n  public void curveTightness(float tightness) {\n    if (recorder != null) recorder.curveTightness(tightness);\n    g.curveTightness(tightness);\n  }",
    "right" : "/**\n   * ( begin auto-generated from curveTightness.xml )\n   *\n   * Modifies the quality of forms created with <b>curve()</b> and\n   * <b>curveVertex()</b>. The parameter <b>squishy</b> determines how the\n   * curve fits to the vertex points. The value 0.0 is the default value for\n   * <b>squishy</b> (this value defines the curves to be Catmull-Rom splines)\n   * and the value 1.0 connects all the points with straight lines. Values\n   * within the range -5.0 and 5.0 will deform the curves but will leave them\n   * recognizable and as values increase in magnitude, they will continue to deform.\n   *\n   * ( end auto-generated )\n   *\n   * @webref shape:curves\n   * @param tightness amount of deformation from the original vertices\n   * @see PGraphics#curve(float, float, float, float, float, float, float, float, float, float, float, float)\n   * @see PGraphics#curveVertex(float, float)\n   */\n  public void curveTightness(float tightness) {\n    if (recorder != null) recorder.curveTightness(tightness);\n    g.curveTightness(tightness);\n  }",
    "info" : "MethodDeclaration[378486-379527]:MethodDeclaration[378516-379557]"
  }, {
    "left" : "public x1 float, y1 float, x2 float, y2 float, x3 float, y3 float, x4 float, y4 float) : void",
    "right" : "public x1 float, y1 float, x2 float, y2 float, x3 float, y3 float, x4 float, y4 float) : void",
    "info" : "MethodDeclaration[379532-381663]:MethodDeclaration[379562-381693]"
  }, {
    "left" : "public x1 float, y1 float, z1 float, x2 float, y2 float, z2 float, x3 float, y3 float, z3 float, x4 float, y4 float, z4 float) : void",
    "right" : "public x1 float, y1 float, z1 float, x2 float, y2 float, z2 float, x3 float, y3 float, z3 float, x4 float, y4 float, z4 float) : void",
    "info" : "MethodDeclaration[381669-382250]:MethodDeclaration[381699-382280]"
  }, {
    "left" : "/**\n   * ( begin auto-generated from imageMode.xml )\n   *\n   * Modifies the location from which images draw. The default mode is\n   * <b>imageMode(CORNER)</b>, which specifies the location to be the upper\n   * left corner and uses the fourth and fifth parameters of <b>image()</b>\n   * to set the image's width and height. The syntax\n   * <b>imageMode(CORNERS)</b> uses the second and third parameters of\n   * <b>image()</b> to set the location of one corner of the image and uses\n   * the fourth and fifth parameters to set the opposite corner. Use\n   * <b>imageMode(CENTER)</b> to draw images centered at the given x and y\n   * position.<br />\n   * <br />\n   * The parameter to <b>imageMode()</b> must be written in ALL CAPS because\n   * Processing is a case-sensitive language.\n   *\n   * ( end auto-generated )\n   *\n   * @webref image:loading_displaying\n   * @param mode either CORNER, CORNERS, or CENTER\n   * @see PApplet#loadImage(String, String)\n   * @see PImage\n   * @see PGraphics#image(PImage, float, float, float, float)\n   * @see PGraphics#background(float, float, float, float)\n   */\n  public void imageMode(int mode) {\n    if (recorder != null) recorder.imageMode(mode);\n    g.imageMode(mode);\n  }",
    "right" : "/**\n   * ( begin auto-generated from imageMode.xml )\n   *\n   * Modifies the location from which images draw. The default mode is\n   * <b>imageMode(CORNER)</b>, which specifies the location to be the upper\n   * left corner and uses the fourth and fifth parameters of <b>image()</b>\n   * to set the image's width and height. The syntax\n   * <b>imageMode(CORNERS)</b> uses the second and third parameters of\n   * <b>image()</b> to set the location of one corner of the image and uses\n   * the fourth and fifth parameters to set the opposite corner. Use\n   * <b>imageMode(CENTER)</b> to draw images centered at the given x and y\n   * position.<br />\n   * <br />\n   * The parameter to <b>imageMode()</b> must be written in ALL CAPS because\n   * Processing is a case-sensitive language.\n   *\n   * ( end auto-generated )\n   *\n   * @webref image:loading_displaying\n   * @param mode either CORNER, CORNERS, or CENTER\n   * @see PApplet#loadImage(String, String)\n   * @see PImage\n   * @see PGraphics#image(PImage, float, float, float, float)\n   * @see PGraphics#background(float, float, float, float)\n   */\n  public void imageMode(int mode) {\n    if (recorder != null) recorder.imageMode(mode);\n    g.imageMode(mode);\n  }",
    "info" : "MethodDeclaration[382255-383465]:MethodDeclaration[382285-383495]"
  }, {
    "left" : "/**\n   * ( begin auto-generated from image.xml )\n   *\n   * Displays images to the screen. The images must be in the sketch's \"data\"\n   * directory to load correctly. Select \"Add file...\" from the \"Sketch\" menu\n   * to add the image. Processing currently works with GIF, JPEG, and Targa\n   * images. The <b>img</b> parameter specifies the image to display and the\n   * <b>x</b> and <b>y</b> parameters define the location of the image from\n   * its upper-left corner. The image is displayed at its original size\n   * unless the <b>width</b> and <b>height</b> parameters specify a different\n   * size.<br />\n   * <br />\n   * The <b>imageMode()</b> function changes the way the parameters work. For\n   * example, a call to <b>imageMode(CORNERS)</b> will change the\n   * <b>width</b> and <b>height</b> parameters to define the x and y values\n   * of the opposite corner of the image.<br />\n   * <br />\n   * The color of an image may be modified with the <b>tint()</b> function.\n   * This function will maintain transparency for GIF and PNG images.\n   *\n   * ( end auto-generated )\n   *\n   * <h3>Advanced</h3>\n   * Starting with release 0124, when using the default (JAVA2D) renderer,\n   * smooth() will also improve image quality of resized images.\n   *\n   * @webref image:loading_displaying\n   * @param img the image to display\n   * @param a x-coordinate of the image\n   * @param b y-coordinate of the image\n   * @see PApplet#loadImage(String, String)\n   * @see PImage\n   * @see PGraphics#imageMode(int)\n   * @see PGraphics#tint(float)\n   * @see PGraphics#background(float, float, float, float)\n   * @see PGraphics#alpha(int)\n   */\n  public void image(PImage img, float a, float b) {\n    if (recorder != null) recorder.image(img, a, b);\n    g.image(img, a, b);\n  }",
    "right" : "/**\n   * ( begin auto-generated from image.xml )\n   *\n   * Displays images to the screen. The images must be in the sketch's \"data\"\n   * directory to load correctly. Select \"Add file...\" from the \"Sketch\" menu\n   * to add the image. Processing currently works with GIF, JPEG, and Targa\n   * images. The <b>img</b> parameter specifies the image to display and the\n   * <b>x</b> and <b>y</b> parameters define the location of the image from\n   * its upper-left corner. The image is displayed at its original size\n   * unless the <b>width</b> and <b>height</b> parameters specify a different\n   * size.<br />\n   * <br />\n   * The <b>imageMode()</b> function changes the way the parameters work. For\n   * example, a call to <b>imageMode(CORNERS)</b> will change the\n   * <b>width</b> and <b>height</b> parameters to define the x and y values\n   * of the opposite corner of the image.<br />\n   * <br />\n   * The color of an image may be modified with the <b>tint()</b> function.\n   * This function will maintain transparency for GIF and PNG images.\n   *\n   * ( end auto-generated )\n   *\n   * <h3>Advanced</h3>\n   * Starting with release 0124, when using the default (JAVA2D) renderer,\n   * smooth() will also improve image quality of resized images.\n   *\n   * @webref image:loading_displaying\n   * @param img the image to display\n   * @param a x-coordinate of the image\n   * @param b y-coordinate of the image\n   * @see PApplet#loadImage(String, String)\n   * @see PImage\n   * @see PGraphics#imageMode(int)\n   * @see PGraphics#tint(float)\n   * @see PGraphics#background(float, float, float, float)\n   * @see PGraphics#alpha(int)\n   */\n  public void image(PImage img, float a, float b) {\n    if (recorder != null) recorder.image(img, a, b);\n    g.image(img, a, b);\n  }",
    "info" : "MethodDeclaration[383470-385231]:MethodDeclaration[383500-385261]"
  }, {
    "left" : "/**\n   * @param c width to display the image\n   * @param d height to display the image\n   */\n  public void image(PImage img, float a, float b, float c, float d) {\n    if (recorder != null) recorder.image(img, a, b, c, d);\n    g.image(img, a, b, c, d);\n  }",
    "right" : "/**\n   * @param c width to display the image\n   * @param d height to display the image\n   */\n  public void image(PImage img, float a, float b, float c, float d) {\n    if (recorder != null) recorder.image(img, a, b, c, d);\n    g.image(img, a, b, c, d);\n  }",
    "info" : "MethodDeclaration[385236-385491]:MethodDeclaration[385266-385521]"
  }, {
    "left" : "/**\n   * Draw an image(), also specifying u/v coordinates.\n   * In this method, the  u, v coordinates are always based on image space\n   * location, regardless of the current textureMode().\n   *\n   * @nowebref\n   */\n  public void image(PImage img,\n                    float a, float b, float c, float d,\n                    int u1, int v1, int u2, int v2) {\n    if (recorder != null) recorder.image(img, a, b, c, d, u1, v1, u2, v2);\n    g.image(img, a, b, c, d, u1, v1, u2, v2);\n  }",
    "right" : "/**\n   * Draw an image(), also specifying u/v coordinates.\n   * In this method, the  u, v coordinates are always based on image space\n   * location, regardless of the current textureMode().\n   *\n   * @nowebref\n   */\n  public void image(PImage img,\n                    float a, float b, float c, float d,\n                    int u1, int v1, int u2, int v2) {\n    if (recorder != null) recorder.image(img, a, b, c, d, u1, v1, u2, v2);\n    g.image(img, a, b, c, d, u1, v1, u2, v2);\n  }",
    "info" : "MethodDeclaration[385496-385978]:MethodDeclaration[385526-386008]"
  }, {
    "left" : "/**\n   * ( begin auto-generated from shapeMode.xml )\n   *\n   * Modifies the location from which shapes draw. The default mode is\n   * <b>shapeMode(CORNER)</b>, which specifies the location to be the upper\n   * left corner of the shape and uses the third and fourth parameters of\n   * <b>shape()</b> to specify the width and height. The syntax\n   * <b>shapeMode(CORNERS)</b> uses the first and second parameters of\n   * <b>shape()</b> to set the location of one corner and uses the third and\n   * fourth parameters to set the opposite corner. The syntax\n   * <b>shapeMode(CENTER)</b> draws the shape from its center point and uses\n   * the third and forth parameters of <b>shape()</b> to specify the width\n   * and height. The parameter must be written in \"ALL CAPS\" because\n   * Processing is a case sensitive language.\n   *\n   * ( end auto-generated )\n   *\n   * @webref shape:loading_displaying\n   * @param mode either CORNER, CORNERS, CENTER\n   * @see PShape\n   * @see PGraphics#shape(PShape)\n   * @see PGraphics#rectMode(int)\n   */\n  public void shapeMode(int mode) {\n    if (recorder != null) recorder.shapeMode(mode);\n    g.shapeMode(mode);\n  }",
    "right" : "/**\n   * ( begin auto-generated from shapeMode.xml )\n   *\n   * Modifies the location from which shapes draw. The default mode is\n   * <b>shapeMode(CORNER)</b>, which specifies the location to be the upper\n   * left corner of the shape and uses the third and fourth parameters of\n   * <b>shape()</b> to specify the width and height. The syntax\n   * <b>shapeMode(CORNERS)</b> uses the first and second parameters of\n   * <b>shape()</b> to set the location of one corner and uses the third and\n   * fourth parameters to set the opposite corner. The syntax\n   * <b>shapeMode(CENTER)</b> draws the shape from its center point and uses\n   * the third and forth parameters of <b>shape()</b> to specify the width\n   * and height. The parameter must be written in \"ALL CAPS\" because\n   * Processing is a case sensitive language.\n   *\n   * ( end auto-generated )\n   *\n   * @webref shape:loading_displaying\n   * @param mode either CORNER, CORNERS, CENTER\n   * @see PShape\n   * @see PGraphics#shape(PShape)\n   * @see PGraphics#rectMode(int)\n   */\n  public void shapeMode(int mode) {\n    if (recorder != null) recorder.shapeMode(mode);\n    g.shapeMode(mode);\n  }",
    "info" : "MethodDeclaration[385983-387132]:MethodDeclaration[386013-387162]"
  }, {
    "left" : "public shape PShape) : void",
    "right" : "public shape PShape) : void",
    "info" : "MethodDeclaration[387137-387243]:MethodDeclaration[387167-387273]"
  }, {
    "left" : "public shape PShape, x float, y float) : void",
    "right" : "public shape PShape, x float, y float) : void",
    "info" : "MethodDeclaration[387248-388727]:MethodDeclaration[387278-388757]"
  }, {
    "left" : "/**\n   * @param a x-coordinate of the shape\n   * @param b y-coordinate of the shape\n   * @param c width to display the shape\n   * @param d height to display the shape\n   */\n  public void shape(PShape shape, float a, float b, float c, float d) {\n    if (recorder != null) recorder.shape(shape, a, b, c, d);\n    g.shape(shape, a, b, c, d);\n  }",
    "right" : "/**\n   * @param a x-coordinate of the shape\n   * @param b y-coordinate of the shape\n   * @param c width to display the shape\n   * @param d height to display the shape\n   */\n  public void shape(PShape shape, float a, float b, float c, float d) {\n    if (recorder != null) recorder.shape(shape, a, b, c, d);\n    g.shape(shape, a, b, c, d);\n  }",
    "info" : "MethodDeclaration[388732-389073]:MethodDeclaration[388762-389103]"
  }, {
    "left" : "public alignX int) : void",
    "right" : "public alignX int) : void",
    "info" : "MethodDeclaration[389078-389196]:MethodDeclaration[389108-389226]"
  }, {
    "left" : "/**\n   * ( begin auto-generated from textAlign.xml )\n   *\n   * Sets the current alignment for drawing text. The parameters LEFT,\n   * CENTER, and RIGHT set the display characteristics of the letters in\n   * relation to the values for the <b>x</b> and <b>y</b> parameters of the\n   * <b>text()</b> function.\n   * <br/> <br/>\n   * In Processing 0125 and later, an optional second parameter can be used\n   * to vertically align the text. BASELINE is the default, and the vertical\n   * alignment will be reset to BASELINE if the second parameter is not used.\n   * The TOP and CENTER parameters are straightforward. The BOTTOM parameter\n   * offsets the line based on the current <b>textDescent()</b>. For multiple\n   * lines, the final line will be aligned to the bottom, with the previous\n   * lines appearing above it.\n   * <br/> <br/>\n   * When using <b>text()</b> with width and height parameters, BASELINE is\n   * ignored, and treated as TOP. (Otherwise, text would by default draw\n   * outside the box, since BASELINE is the default setting. BASELINE is not\n   * a useful drawing mode for text drawn in a rectangle.)\n   * <br/> <br/>\n   * The vertical alignment is based on the value of <b>textAscent()</b>,\n   * which many fonts do not specify correctly. It may be necessary to use a\n   * hack and offset by a few pixels by hand so that the offset looks\n   * correct. To do this as less of a hack, use some percentage of\n   * <b>textAscent()</b> or <b>textDescent()</b> so that the hack works even\n   * if you change the size of the font.\n   *\n   * ( end auto-generated )\n   *\n   * @webref typography:attributes\n   * @param alignX horizontal alignment, either LEFT, CENTER, or RIGHT\n   * @param alignY vertical alignment, either TOP, BOTTOM, CENTER, or BASELINE\n   * @see PApplet#loadFont(String)\n   * @see PFont\n   * @see PGraphics#text(String, float, float)\n   * @see PGraphics#textSize(float)\n   * @see PGraphics#textAscent()\n   * @see PGraphics#textDescent()\n   */\n  public void textAlign(int alignX, int alignY) {\n    if (recorder != null) recorder.textAlign(alignX, alignY);\n    g.textAlign(alignX, alignY);\n  }",
    "right" : "/**\n   * ( begin auto-generated from textAlign.xml )\n   *\n   * Sets the current alignment for drawing text. The parameters LEFT,\n   * CENTER, and RIGHT set the display characteristics of the letters in\n   * relation to the values for the <b>x</b> and <b>y</b> parameters of the\n   * <b>text()</b> function.\n   * <br/> <br/>\n   * In Processing 0125 and later, an optional second parameter can be used\n   * to vertically align the text. BASELINE is the default, and the vertical\n   * alignment will be reset to BASELINE if the second parameter is not used.\n   * The TOP and CENTER parameters are straightforward. The BOTTOM parameter\n   * offsets the line based on the current <b>textDescent()</b>. For multiple\n   * lines, the final line will be aligned to the bottom, with the previous\n   * lines appearing above it.\n   * <br/> <br/>\n   * When using <b>text()</b> with width and height parameters, BASELINE is\n   * ignored, and treated as TOP. (Otherwise, text would by default draw\n   * outside the box, since BASELINE is the default setting. BASELINE is not\n   * a useful drawing mode for text drawn in a rectangle.)\n   * <br/> <br/>\n   * The vertical alignment is based on the value of <b>textAscent()</b>,\n   * which many fonts do not specify correctly. It may be necessary to use a\n   * hack and offset by a few pixels by hand so that the offset looks\n   * correct. To do this as less of a hack, use some percentage of\n   * <b>textAscent()</b> or <b>textDescent()</b> so that the hack works even\n   * if you change the size of the font.\n   *\n   * ( end auto-generated )\n   *\n   * @webref typography:attributes\n   * @param alignX horizontal alignment, either LEFT, CENTER, or RIGHT\n   * @param alignY vertical alignment, either TOP, BOTTOM, CENTER, or BASELINE\n   * @see PApplet#loadFont(String)\n   * @see PFont\n   * @see PGraphics#text(String, float, float)\n   * @see PGraphics#textSize(float)\n   * @see PGraphics#textAscent()\n   * @see PGraphics#textDescent()\n   */\n  public void textAlign(int alignX, int alignY) {\n    if (recorder != null) recorder.textAlign(alignX, alignY);\n    g.textAlign(alignX, alignY);\n  }",
    "info" : "MethodDeclaration[389201-391321]:MethodDeclaration[389231-391351]"
  }, {
    "left" : "public ) : float",
    "right" : "public ) : float",
    "info" : "MethodDeclaration[391326-391837]:MethodDeclaration[391356-391867]"
  }, {
    "left" : "public ) : float",
    "right" : "public ) : float",
    "info" : "MethodDeclaration[391842-392356]:MethodDeclaration[391872-392386]"
  }, {
    "left" : "public which PFont) : void",
    "right" : "public which PFont) : void",
    "info" : "MethodDeclaration[392361-393948]:MethodDeclaration[392391-393978]"
  }, {
    "left" : "public which PFont, size float) : void",
    "right" : "public which PFont, size float) : void",
    "info" : "MethodDeclaration[393953-394163]:MethodDeclaration[393983-394193]"
  }, {
    "left" : "public leading float) : void",
    "right" : "public leading float) : void",
    "info" : "MethodDeclaration[394168-394829]:MethodDeclaration[394198-394859]"
  }, {
    "left" : "/**\n   * ( begin auto-generated from textMode.xml )\n   *\n   * Sets the way text draws to the screen. In the default configuration, the\n   * <b>MODEL</b> mode, it's possible to rotate, scale, and place letters in\n   * two and three dimensional space.<br />\n   * <br />\n   * The <b>SHAPE</b> mode draws text using the the glyph outlines of\n   * individual characters rather than as textures. This mode is only\n   * supported with the <b>PDF</b> and <b>P3D</b> renderer settings. With the\n   * <b>PDF</b> renderer, you must call <b>textMode(SHAPE)</b> before any\n   * other drawing occurs. If the outlines are not available, then\n   * <b>textMode(SHAPE)</b> will be ignored and <b>textMode(MODEL)</b> will\n   * be used instead.<br />\n   * <br />\n   * The <b>textMode(SHAPE)</b> option in <b>P3D</b> can be combined with\n   * <b>beginRaw()</b> to write vector-accurate text to 2D and 3D output\n   * files, for instance <b>DXF</b> or <b>PDF</b>. The <b>SHAPE</b> mode is\n   * not currently optimized for <b>P3D</b>, so if recording shape data, use\n   * <b>textMode(MODEL)</b> until you're ready to capture the geometry with <b>beginRaw()</b>.\n   *\n   * ( end auto-generated )\n   *\n   * @webref typography:attributes\n   * @param mode either MODEL or SHAPE\n   * @see PApplet#loadFont(String)\n   * @see PFont#PFont\n   * @see PGraphics#text(String, float, float)\n   * @see PGraphics#textFont(PFont)\n   * @see PGraphics#beginRaw(PGraphics)\n   * @see PApplet#createFont(String, float, boolean)\n   */\n  public void textMode(int mode) {\n    if (recorder != null) recorder.textMode(mode);\n    g.textMode(mode);\n  }",
    "right" : "/**\n   * ( begin auto-generated from textMode.xml )\n   *\n   * Sets the way text draws to the screen. In the default configuration, the\n   * <b>MODEL</b> mode, it's possible to rotate, scale, and place letters in\n   * two and three dimensional space.<br />\n   * <br />\n   * The <b>SHAPE</b> mode draws text using the the glyph outlines of\n   * individual characters rather than as textures. This mode is only\n   * supported with the <b>PDF</b> and <b>P3D</b> renderer settings. With the\n   * <b>PDF</b> renderer, you must call <b>textMode(SHAPE)</b> before any\n   * other drawing occurs. If the outlines are not available, then\n   * <b>textMode(SHAPE)</b> will be ignored and <b>textMode(MODEL)</b> will\n   * be used instead.<br />\n   * <br />\n   * The <b>textMode(SHAPE)</b> option in <b>P3D</b> can be combined with\n   * <b>beginRaw()</b> to write vector-accurate text to 2D and 3D output\n   * files, for instance <b>DXF</b> or <b>PDF</b>. The <b>SHAPE</b> mode is\n   * not currently optimized for <b>P3D</b>, so if recording shape data, use\n   * <b>textMode(MODEL)</b> until you're ready to capture the geometry with <b>beginRaw()</b>.\n   *\n   * ( end auto-generated )\n   *\n   * @webref typography:attributes\n   * @param mode either MODEL or SHAPE\n   * @see PApplet#loadFont(String)\n   * @see PFont#PFont\n   * @see PGraphics#text(String, float, float)\n   * @see PGraphics#textFont(PFont)\n   * @see PGraphics#beginRaw(PGraphics)\n   * @see PApplet#createFont(String, float, boolean)\n   */\n  public void textMode(int mode) {\n    if (recorder != null) recorder.textMode(mode);\n    g.textMode(mode);\n  }",
    "info" : "MethodDeclaration[394834-396434]:MethodDeclaration[394864-396464]"
  }, {
    "left" : "public size float) : void",
    "right" : "public size float) : void",
    "info" : "MethodDeclaration[396439-397046]:MethodDeclaration[396469-397076]"
  }, {
    "left" : "public c char) : float",
    "right" : "public c char) : float",
    "info" : "MethodDeclaration[397051-397165]:MethodDeclaration[397081-397195]"
  }, {
    "left" : "/**\n   * ( begin auto-generated from textWidth.xml )\n   *\n   * Calculates and returns the width of any character or text string.\n   *\n   * ( end auto-generated )\n   *\n   * @webref typography:attributes\n   * @param str the String of characters to measure\n   * @see PApplet#loadFont(String)\n   * @see PFont#PFont\n   * @see PGraphics#text(String, float, float)\n   * @see PGraphics#textFont(PFont)\n   * @see PGraphics#textSize(float)\n   */\n  public float textWidth(String str) {\n    return g.textWidth(str);\n  }",
    "right" : "/**\n   * ( begin auto-generated from textWidth.xml )\n   *\n   * Calculates and returns the width of any character or text string.\n   *\n   * ( end auto-generated )\n   *\n   * @webref typography:attributes\n   * @param str the String of characters to measure\n   * @see PApplet#loadFont(String)\n   * @see PFont#PFont\n   * @see PGraphics#text(String, float, float)\n   * @see PGraphics#textFont(PFont)\n   * @see PGraphics#textSize(float)\n   */\n  public float textWidth(String str) {\n    return g.textWidth(str);\n  }",
    "info" : "MethodDeclaration[397170-397677]:MethodDeclaration[397200-397707]"
  }, {
    "left" : "public chars , start int, length int) : float",
    "right" : "public chars , start int, length int) : float",
    "info" : "MethodDeclaration[397682-397820]:MethodDeclaration[397712-397850]"
  }, {
    "left" : "/**\n   * ( begin auto-generated from text.xml )\n   *\n   * Draws text to the screen. Displays the information specified in the\n   * <b>data</b> or <b>stringdata</b> parameters on the screen in the\n   * position specified by the <b>x</b> and <b>y</b> parameters and the\n   * optional <b>z</b> parameter. A default font will be used unless a font\n   * is set with the <b>textFont()</b> function. Change the color of the text\n   * with the <b>fill()</b> function. The text displays in relation to the\n   * <b>textAlign()</b> function, which gives the option to draw to the left,\n   * right, and center of the coordinates.\n   * <br /><br />\n   * The <b>x2</b> and <b>y2</b> parameters define a rectangular area to\n   * display within and may only be used with string data. For text drawn\n   * inside a rectangle, the coordinates are interpreted based on the current\n   * <b>rectMode()</b> setting.\n   *\n   * ( end auto-generated )\n   *\n   * @webref typography:loading_displaying\n   * @param c the alphanumeric character to be displayed\n   * @param x x-coordinate of text\n   * @param y y-coordinate of text\n   * @see PGraphics#textAlign(int, int)\n   * @see PGraphics#textFont(PFont)\n   * @see PGraphics#textMode(int)\n   * @see PGraphics#textSize(float)\n   * @see PGraphics#textLeading(float)\n   * @see PGraphics#textWidth(String)\n   * @see PGraphics#textAscent()\n   * @see PGraphics#textDescent()\n   * @see PGraphics#rectMode(int)\n   * @see PGraphics#fill(int, float)\n   * @see_external String\n   */\n  public void text(char c, float x, float y) {\n    if (recorder != null) recorder.text(c, x, y);\n    g.text(c, x, y);\n  }",
    "right" : "/**\n   * ( begin auto-generated from text.xml )\n   *\n   * Draws text to the screen. Displays the information specified in the\n   * <b>data</b> or <b>stringdata</b> parameters on the screen in the\n   * position specified by the <b>x</b> and <b>y</b> parameters and the\n   * optional <b>z</b> parameter. A default font will be used unless a font\n   * is set with the <b>textFont()</b> function. Change the color of the text\n   * with the <b>fill()</b> function. The text displays in relation to the\n   * <b>textAlign()</b> function, which gives the option to draw to the left,\n   * right, and center of the coordinates.\n   * <br /><br />\n   * The <b>x2</b> and <b>y2</b> parameters define a rectangular area to\n   * display within and may only be used with string data. For text drawn\n   * inside a rectangle, the coordinates are interpreted based on the current\n   * <b>rectMode()</b> setting.\n   *\n   * ( end auto-generated )\n   *\n   * @webref typography:loading_displaying\n   * @param c the alphanumeric character to be displayed\n   * @param x x-coordinate of text\n   * @param y y-coordinate of text\n   * @see PGraphics#textAlign(int, int)\n   * @see PGraphics#textFont(PFont)\n   * @see PGraphics#textMode(int)\n   * @see PGraphics#textSize(float)\n   * @see PGraphics#textLeading(float)\n   * @see PGraphics#textWidth(String)\n   * @see PGraphics#textAscent()\n   * @see PGraphics#textDescent()\n   * @see PGraphics#rectMode(int)\n   * @see PGraphics#fill(int, float)\n   * @see_external String\n   */\n  public void text(char c, float x, float y) {\n    if (recorder != null) recorder.text(c, x, y);\n    g.text(c, x, y);\n  }",
    "info" : "MethodDeclaration[397825-399440]:MethodDeclaration[397855-399470]"
  }, {
    "left" : "/**\n   * @param z z-coordinate of text\n   */\n  public void text(char c, float x, float y, float z) {\n    if (recorder != null) recorder.text(c, x, y, z);\n    g.text(c, x, y, z);\n  }",
    "right" : "/**\n   * @param z z-coordinate of text\n   */\n  public void text(char c, float x, float y, float z) {\n    if (recorder != null) recorder.text(c, x, y, z);\n    g.text(c, x, y, z);\n  }",
    "info" : "MethodDeclaration[399445-399626]:MethodDeclaration[399475-399656]"
  }, {
    "left" : "/**\n   * <h3>Advanced</h3>\n   * Draw a chunk of text.\n   * Newlines that are \\n (Unix newline or linefeed char, ascii 10)\n   * are honored, but \\r (carriage return, Windows and Mac OS) are\n   * ignored.\n   */\n  public void text(String str, float x, float y) {\n    if (recorder != null) recorder.text(str, x, y);\n    g.text(str, x, y);\n  }",
    "right" : "/**\n   * <h3>Advanced</h3>\n   * Draw a chunk of text.\n   * Newlines that are \\n (Unix newline or linefeed char, ascii 10)\n   * are honored, but \\r (carriage return, Windows and Mac OS) are\n   * ignored.\n   */\n  public void text(String str, float x, float y) {\n    if (recorder != null) recorder.text(str, x, y);\n    g.text(str, x, y);\n  }",
    "info" : "MethodDeclaration[399631-399969]:MethodDeclaration[399661-399999]"
  }, {
    "left" : "/**\n   * <h3>Advanced</h3>\n   * Method to draw text from an array of chars. This method will usually be\n   * more efficient than drawing from a String object, because the String will\n   * not be converted to a char array before drawing.\n   * @param chars the alphanumberic symbols to be displayed\n   * @param start array index at which to start writing characters\n   * @param stop array index at which to stop writing characters\n   */\n  public void text(char[] chars, int start, int stop, float x, float y) {\n    if (recorder != null) recorder.text(chars, start, stop, x, y);\n    g.text(chars, start, stop, x, y);\n  }",
    "right" : "/**\n   * <h3>Advanced</h3>\n   * Method to draw text from an array of chars. This method will usually be\n   * more efficient than drawing from a String object, because the String will\n   * not be converted to a char array before drawing.\n   * @param chars the alphanumberic symbols to be displayed\n   * @param start array index at which to start writing characters\n   * @param stop array index at which to stop writing characters\n   */\n  public void text(char[] chars, int start, int stop, float x, float y) {\n    if (recorder != null) recorder.text(chars, start, stop, x, y);\n    g.text(chars, start, stop, x, y);\n  }",
    "info" : "MethodDeclaration[399974-400591]:MethodDeclaration[400004-400621]"
  }, {
    "left" : "/**\n   * Same as above but with a z coordinate.\n   */\n  public void text(String str, float x, float y, float z) {\n    if (recorder != null) recorder.text(str, x, y, z);\n    g.text(str, x, y, z);\n  }",
    "right" : "/**\n   * Same as above but with a z coordinate.\n   */\n  public void text(String str, float x, float y, float z) {\n    if (recorder != null) recorder.text(str, x, y, z);\n    g.text(str, x, y, z);\n  }",
    "info" : "MethodDeclaration[400596-400794]:MethodDeclaration[400626-400824]"
  }, {
    "left" : "public chars , start int, stop int, x float, y float, z float) : void",
    "right" : "public chars , start int, stop int, x float, y float, z float) : void",
    "info" : "MethodDeclaration[400799-401013]:MethodDeclaration[400829-401043]"
  }, {
    "left" : "public str String, x1 float, y1 float, x2 float, y2 float) : void",
    "right" : "public str String, x1 float, y1 float, x2 float, y2 float) : void",
    "info" : "MethodDeclaration[401018-402068]:MethodDeclaration[401048-402098]"
  }, {
    "left" : "public num int, x float, y float) : void",
    "right" : "public num int, x float, y float) : void",
    "info" : "MethodDeclaration[402073-402197]:MethodDeclaration[402103-402227]"
  }, {
    "left" : "public void text(int num, float x, float y, float z) {\n    if (recorder != null) recorder.text(num, x, y, z);\n    g.text(num, x, y, z);\n  }",
    "right" : "public void text(int num, float x, float y, float z) {\n    if (recorder != null) recorder.text(num, x, y, z);\n    g.text(num, x, y, z);\n  }",
    "info" : "MethodDeclaration[402202-402341]:MethodDeclaration[402232-402371]"
  }, {
    "left" : "/**\n   * This does a basic number formatting, to avoid the\n   * generally ugly appearance of printing floats.\n   * Users who want more control should use their own nf() cmmand,\n   * or if they want the long, ugly version of float,\n   * use String.valueOf() to convert the float to a String first.\n   *\n   * @param num the numeric value to be displayed\n   */\n  public void text(float num, float x, float y) {\n    if (recorder != null) recorder.text(num, x, y);\n    g.text(num, x, y);\n  }",
    "right" : "/**\n   * This does a basic number formatting, to avoid the\n   * generally ugly appearance of printing floats.\n   * Users who want more control should use their own nf() cmmand,\n   * or if they want the long, ugly version of float,\n   * use String.valueOf() to convert the float to a String first.\n   *\n   * @param num the numeric value to be displayed\n   */\n  public void text(float num, float x, float y) {\n    if (recorder != null) recorder.text(num, x, y);\n    g.text(num, x, y);\n  }",
    "info" : "MethodDeclaration[402346-402832]:MethodDeclaration[402376-402862]"
  }, {
    "left" : "public void text(float num, float x, float y, float z) {\n    if (recorder != null) recorder.text(num, x, y, z);\n    g.text(num, x, y, z);\n  }",
    "right" : "public void text(float num, float x, float y, float z) {\n    if (recorder != null) recorder.text(num, x, y, z);\n    g.text(num, x, y, z);\n  }",
    "info" : "MethodDeclaration[402837-402978]:MethodDeclaration[402867-403008]"
  }, {
    "left" : "public ) : void",
    "right" : "public ) : void",
    "info" : "MethodDeclaration[402983-403994]:MethodDeclaration[403013-404024]"
  }, {
    "left" : "public ) : void",
    "right" : "public ) : void",
    "info" : "MethodDeclaration[403999-404753]:MethodDeclaration[404029-404783]"
  }, {
    "left" : "/**\n   * ( begin auto-generated from translate.xml )\n   *\n   * Specifies an amount to displace objects within the display window. The\n   * <b>x</b> parameter specifies left/right translation, the <b>y</b>\n   * parameter specifies up/down translation, and the <b>z</b> parameter\n   * specifies translations toward/away from the screen. Using this function\n   * with the <b>z</b> parameter requires using P3D as a parameter in\n   * combination with size as shown in the above example. Transformations\n   * apply to everything that happens after and subsequent calls to the\n   * function accumulates the effect. For example, calling <b>translate(50,\n   * 0)</b> and then <b>translate(20, 0)</b> is the same as <b>translate(70,\n   * 0)</b>. If <b>translate()</b> is called within <b>draw()</b>, the\n   * transformation is reset when the loop begins again. This function can be\n   * further controlled by the <b>pushMatrix()</b> and <b>popMatrix()</b>.\n   *\n   * ( end auto-generated )\n   *\n   * @webref transform\n   * @param x left/right translation\n   * @param y up/down translation\n   * @see PGraphics#popMatrix()\n   * @see PGraphics#pushMatrix()\n   * @see PGraphics#rotate(float)\n   * @see PGraphics#rotateX(float)\n   * @see PGraphics#rotateY(float)\n   * @see PGraphics#rotateZ(float)\n   * @see PGraphics#scale(float, float, float)\n   */\n  public void translate(float x, float y) {\n    if (recorder != null) recorder.translate(x, y);\n    g.translate(x, y);\n  }",
    "right" : "/**\n   * ( begin auto-generated from translate.xml )\n   *\n   * Specifies an amount to displace objects within the display window. The\n   * <b>x</b> parameter specifies left/right translation, the <b>y</b>\n   * parameter specifies up/down translation, and the <b>z</b> parameter\n   * specifies translations toward/away from the screen. Using this function\n   * with the <b>z</b> parameter requires using P3D as a parameter in\n   * combination with size as shown in the above example. Transformations\n   * apply to everything that happens after and subsequent calls to the\n   * function accumulates the effect. For example, calling <b>translate(50,\n   * 0)</b> and then <b>translate(20, 0)</b> is the same as <b>translate(70,\n   * 0)</b>. If <b>translate()</b> is called within <b>draw()</b>, the\n   * transformation is reset when the loop begins again. This function can be\n   * further controlled by the <b>pushMatrix()</b> and <b>popMatrix()</b>.\n   *\n   * ( end auto-generated )\n   *\n   * @webref transform\n   * @param x left/right translation\n   * @param y up/down translation\n   * @see PGraphics#popMatrix()\n   * @see PGraphics#pushMatrix()\n   * @see PGraphics#rotate(float)\n   * @see PGraphics#rotateX(float)\n   * @see PGraphics#rotateY(float)\n   * @see PGraphics#rotateZ(float)\n   * @see PGraphics#scale(float, float, float)\n   */\n  public void translate(float x, float y) {\n    if (recorder != null) recorder.translate(x, y);\n    g.translate(x, y);\n  }",
    "info" : "MethodDeclaration[404758-406217]:MethodDeclaration[404788-406247]"
  }, {
    "left" : "public x float, y float, z float) : void",
    "right" : "public x float, y float, z float) : void",
    "info" : "MethodDeclaration[406222-406412]:MethodDeclaration[406252-406442]"
  }, {
    "left" : "public angle float) : void",
    "right" : "public angle float) : void",
    "info" : "MethodDeclaration[406417-407856]:MethodDeclaration[406447-407886]"
  }, {
    "left" : "/**\n   * ( begin auto-generated from rotateX.xml )\n   *\n   * Rotates a shape around the x-axis the amount specified by the\n   * <b>angle</b> parameter. Angles should be specified in radians (values\n   * from 0 to PI*2) or converted to radians with the <b>radians()</b>\n   * function. Objects are always rotated around their relative position to\n   * the origin and positive numbers rotate objects in a counterclockwise\n   * direction. Transformations apply to everything that happens after and\n   * subsequent calls to the function accumulates the effect. For example,\n   * calling <b>rotateX(PI/2)</b> and then <b>rotateX(PI/2)</b> is the same\n   * as <b>rotateX(PI)</b>. If <b>rotateX()</b> is called within the\n   * <b>draw()</b>, the transformation is reset when the loop begins again.\n   * This function requires using P3D as a third parameter to <b>size()</b>\n   * as shown in the example above.\n   *\n   * ( end auto-generated )\n   *\n   * @webref transform\n   * @param angle angle of rotation specified in radians\n   * @see PGraphics#popMatrix()\n   * @see PGraphics#pushMatrix()\n   * @see PGraphics#rotate(float)\n   * @see PGraphics#rotateY(float)\n   * @see PGraphics#rotateZ(float)\n   * @see PGraphics#scale(float, float, float)\n   * @see PGraphics#translate(float, float, float)\n   */\n  public void rotateX(float angle) {\n    if (recorder != null) recorder.rotateX(angle);\n    g.rotateX(angle);\n  }",
    "right" : "/**\n   * ( begin auto-generated from rotateX.xml )\n   *\n   * Rotates a shape around the x-axis the amount specified by the\n   * <b>angle</b> parameter. Angles should be specified in radians (values\n   * from 0 to PI*2) or converted to radians with the <b>radians()</b>\n   * function. Objects are always rotated around their relative position to\n   * the origin and positive numbers rotate objects in a counterclockwise\n   * direction. Transformations apply to everything that happens after and\n   * subsequent calls to the function accumulates the effect. For example,\n   * calling <b>rotateX(PI/2)</b> and then <b>rotateX(PI/2)</b> is the same\n   * as <b>rotateX(PI)</b>. If <b>rotateX()</b> is called within the\n   * <b>draw()</b>, the transformation is reset when the loop begins again.\n   * This function requires using P3D as a third parameter to <b>size()</b>\n   * as shown in the example above.\n   *\n   * ( end auto-generated )\n   *\n   * @webref transform\n   * @param angle angle of rotation specified in radians\n   * @see PGraphics#popMatrix()\n   * @see PGraphics#pushMatrix()\n   * @see PGraphics#rotate(float)\n   * @see PGraphics#rotateY(float)\n   * @see PGraphics#rotateZ(float)\n   * @see PGraphics#scale(float, float, float)\n   * @see PGraphics#translate(float, float, float)\n   */\n  public void rotateX(float angle) {\n    if (recorder != null) recorder.rotateX(angle);\n    g.rotateX(angle);\n  }",
    "info" : "MethodDeclaration[407861-409267]:MethodDeclaration[407891-409297]"
  }, {
    "left" : "/**\n   * ( begin auto-generated from rotateY.xml )\n   *\n   * Rotates a shape around the y-axis the amount specified by the\n   * <b>angle</b> parameter. Angles should be specified in radians (values\n   * from 0 to PI*2) or converted to radians with the <b>radians()</b>\n   * function. Objects are always rotated around their relative position to\n   * the origin and positive numbers rotate objects in a counterclockwise\n   * direction. Transformations apply to everything that happens after and\n   * subsequent calls to the function accumulates the effect. For example,\n   * calling <b>rotateY(PI/2)</b> and then <b>rotateY(PI/2)</b> is the same\n   * as <b>rotateY(PI)</b>. If <b>rotateY()</b> is called within the\n   * <b>draw()</b>, the transformation is reset when the loop begins again.\n   * This function requires using P3D as a third parameter to <b>size()</b>\n   * as shown in the examples above.\n   *\n   * ( end auto-generated )\n   *\n   * @webref transform\n   * @param angle angle of rotation specified in radians\n   * @see PGraphics#popMatrix()\n   * @see PGraphics#pushMatrix()\n   * @see PGraphics#rotate(float)\n   * @see PGraphics#rotateX(float)\n   * @see PGraphics#rotateZ(float)\n   * @see PGraphics#scale(float, float, float)\n   * @see PGraphics#translate(float, float, float)\n   */\n  public void rotateY(float angle) {\n    if (recorder != null) recorder.rotateY(angle);\n    g.rotateY(angle);\n  }",
    "right" : "/**\n   * ( begin auto-generated from rotateY.xml )\n   *\n   * Rotates a shape around the y-axis the amount specified by the\n   * <b>angle</b> parameter. Angles should be specified in radians (values\n   * from 0 to PI*2) or converted to radians with the <b>radians()</b>\n   * function. Objects are always rotated around their relative position to\n   * the origin and positive numbers rotate objects in a counterclockwise\n   * direction. Transformations apply to everything that happens after and\n   * subsequent calls to the function accumulates the effect. For example,\n   * calling <b>rotateY(PI/2)</b> and then <b>rotateY(PI/2)</b> is the same\n   * as <b>rotateY(PI)</b>. If <b>rotateY()</b> is called within the\n   * <b>draw()</b>, the transformation is reset when the loop begins again.\n   * This function requires using P3D as a third parameter to <b>size()</b>\n   * as shown in the examples above.\n   *\n   * ( end auto-generated )\n   *\n   * @webref transform\n   * @param angle angle of rotation specified in radians\n   * @see PGraphics#popMatrix()\n   * @see PGraphics#pushMatrix()\n   * @see PGraphics#rotate(float)\n   * @see PGraphics#rotateX(float)\n   * @see PGraphics#rotateZ(float)\n   * @see PGraphics#scale(float, float, float)\n   * @see PGraphics#translate(float, float, float)\n   */\n  public void rotateY(float angle) {\n    if (recorder != null) recorder.rotateY(angle);\n    g.rotateY(angle);\n  }",
    "info" : "MethodDeclaration[409272-410679]:MethodDeclaration[409302-410709]"
  }, {
    "left" : "public angle float) : void",
    "right" : "public angle float) : void",
    "info" : "MethodDeclaration[410684-412091]:MethodDeclaration[410714-412121]"
  }, {
    "left" : "public angle float, x float, y float, z float) : void",
    "right" : "public angle float, x float, y float, z float) : void",
    "info" : "MethodDeclaration[412096-412397]:MethodDeclaration[412126-412427]"
  }, {
    "left" : "public s float...) : void",
    "right" : "public s float...) : void",
    "info" : "MethodDeclaration[412402-413814]:MethodDeclaration[412432-413844]"
  }, {
    "left" : "/**\n   * <h3>Advanced</h3>\n   * Scale in X and Y. Equivalent to scale(sx, sy, 1).\n   *\n   * Not recommended for use in 3D, because the z-dimension is just\n   * scaled by 1, since there's no way to know what else to scale it by.\n   *\n   * @param x percentage to scale the object in the x-axis\n   * @param y percentage to scale the object in the y-axis\n   */\n  public void scale(float x, float y) {\n    if (recorder != null) recorder.scale(x, y);\n    g.scale(x, y);\n  }",
    "right" : "/**\n   * <h3>Advanced</h3>\n   * Scale in X and Y. Equivalent to scale(sx, sy, 1).\n   *\n   * Not recommended for use in 3D, because the z-dimension is just\n   * scaled by 1, since there's no way to know what else to scale it by.\n   *\n   * @param x percentage to scale the object in the x-axis\n   * @param y percentage to scale the object in the y-axis\n   */\n  public void scale(float x, float y) {\n    if (recorder != null) recorder.scale(x, y);\n    g.scale(x, y);\n  }",
    "info" : "MethodDeclaration[413819-414286]:MethodDeclaration[413849-414316]"
  }, {
    "left" : "public x float, y float, z float) : void",
    "right" : "public x float, y float, z float) : void",
    "info" : "MethodDeclaration[414291-414485]:MethodDeclaration[414321-414515]"
  }, {
    "left" : "public angle float) : void",
    "right" : "public angle float) : void",
    "info" : "MethodDeclaration[414490-415956]:MethodDeclaration[414520-415986]"
  }, {
    "left" : "public angle float) : void",
    "right" : "public angle float) : void",
    "info" : "MethodDeclaration[415961-417427]:MethodDeclaration[415991-417457]"
  }, {
    "left" : "public ) : void",
    "right" : "public ) : void",
    "info" : "MethodDeclaration[417432-417922]:MethodDeclaration[417462-417952]"
  }, {
    "left" : "/**\n   * ( begin auto-generated from applyMatrix.xml )\n   *\n   * Multiplies the current matrix by the one specified through the\n   * parameters. This is very slow because it will try to calculate the\n   * inverse of the transform, so avoid it whenever possible. The equivalent\n   * function in OpenGL is glMultMatrix().\n   *\n   * ( end auto-generated )\n   *\n   * @webref transform\n   * @source\n   * @see PGraphics#pushMatrix()\n   * @see PGraphics#popMatrix()\n   * @see PGraphics#resetMatrix()\n   * @see PGraphics#printMatrix()\n   */\n  public void applyMatrix(PMatrix source) {\n    if (recorder != null) recorder.applyMatrix(source);\n    g.applyMatrix(source);\n  }",
    "right" : "/**\n   * ( begin auto-generated from applyMatrix.xml )\n   *\n   * Multiplies the current matrix by the one specified through the\n   * parameters. This is very slow because it will try to calculate the\n   * inverse of the transform, so avoid it whenever possible. The equivalent\n   * function in OpenGL is glMultMatrix().\n   *\n   * ( end auto-generated )\n   *\n   * @webref transform\n   * @source\n   * @see PGraphics#pushMatrix()\n   * @see PGraphics#popMatrix()\n   * @see PGraphics#resetMatrix()\n   * @see PGraphics#printMatrix()\n   */\n  public void applyMatrix(PMatrix source) {\n    if (recorder != null) recorder.applyMatrix(source);\n    g.applyMatrix(source);\n  }",
    "info" : "MethodDeclaration[417927-418590]:MethodDeclaration[417957-418620]"
  }, {
    "left" : "public source PMatrix2D) : void",
    "right" : "public source PMatrix2D) : void",
    "info" : "MethodDeclaration[418595-418725]:MethodDeclaration[418625-418755]"
  }, {
    "left" : "/**\n   * @param n00 numbers which define the 4x4 matrix to be multiplied\n   * @param n01 numbers which define the 4x4 matrix to be multiplied\n   * @param n02 numbers which define the 4x4 matrix to be multiplied\n   * @param n10 numbers which define the 4x4 matrix to be multiplied\n   * @param n11 numbers which define the 4x4 matrix to be multiplied\n   * @param n12 numbers which define the 4x4 matrix to be multiplied\n   */\n  public void applyMatrix(float n00, float n01, float n02,\n                          float n10, float n11, float n12) {\n    if (recorder != null) recorder.applyMatrix(n00, n01, n02, n10, n11, n12);\n    g.applyMatrix(n00, n01, n02, n10, n11, n12);\n  }",
    "right" : "/**\n   * @param n00 numbers which define the 4x4 matrix to be multiplied\n   * @param n01 numbers which define the 4x4 matrix to be multiplied\n   * @param n02 numbers which define the 4x4 matrix to be multiplied\n   * @param n10 numbers which define the 4x4 matrix to be multiplied\n   * @param n11 numbers which define the 4x4 matrix to be multiplied\n   * @param n12 numbers which define the 4x4 matrix to be multiplied\n   */\n  public void applyMatrix(float n00, float n01, float n02,\n                          float n10, float n11, float n12) {\n    if (recorder != null) recorder.applyMatrix(n00, n01, n02, n10, n11, n12);\n    g.applyMatrix(n00, n01, n02, n10, n11, n12);\n  }",
    "info" : "MethodDeclaration[418730-419404]:MethodDeclaration[418760-419434]"
  }, {
    "left" : "public void applyMatrix(PMatrix3D source) {\n    if (recorder != null) recorder.applyMatrix(source);\n    g.applyMatrix(source);\n  }",
    "right" : "public void applyMatrix(PMatrix3D source) {\n    if (recorder != null) recorder.applyMatrix(source);\n    g.applyMatrix(source);\n  }",
    "info" : "MethodDeclaration[419409-419539]:MethodDeclaration[419439-419569]"
  }, {
    "left" : "public n00 float, n01 float, n02 float, n03 float, n10 float, n11 float, n12 float, n13 float, n20 float, n21 float, n22 float, n23 float, n30 float, n31 float, n32 float, n33 float) : void",
    "right" : "public n00 float, n01 float, n02 float, n03 float, n10 float, n11 float, n12 float, n13 float, n20 float, n21 float, n22 float, n23 float, n30 float, n31 float, n32 float, n33 float) : void",
    "info" : "MethodDeclaration[419544-420756]:MethodDeclaration[419574-420786]"
  }, {
    "left" : "public PMatrix getMatrix() {\n    return g.getMatrix();\n  }",
    "right" : "public PMatrix getMatrix() {\n    return g.getMatrix();\n  }",
    "info" : "MethodDeclaration[420761-420819]:MethodDeclaration[420791-420849]"
  }, {
    "left" : "public target PMatrix2D) : PMatrix2D",
    "right" : "public target PMatrix2D) : PMatrix2D",
    "info" : "MethodDeclaration[420824-421031]:MethodDeclaration[420854-421061]"
  }, {
    "left" : "/**\n   * Copy the current transformation matrix into the specified target.\n   * Pass in null to create a new matrix.\n   */\n  public PMatrix3D getMatrix(PMatrix3D target) {\n    return g.getMatrix(target);\n  }",
    "right" : "/**\n   * Copy the current transformation matrix into the specified target.\n   * Pass in null to create a new matrix.\n   */\n  public PMatrix3D getMatrix(PMatrix3D target) {\n    return g.getMatrix(target);\n  }",
    "info" : "MethodDeclaration[421036-421243]:MethodDeclaration[421066-421273]"
  }, {
    "left" : "public source PMatrix) : void",
    "right" : "public source PMatrix) : void",
    "info" : "MethodDeclaration[421248-421453]:MethodDeclaration[421278-421483]"
  }, {
    "left" : "/**\n   * Set the current transformation to the contents of the specified source.\n   */\n  public void setMatrix(PMatrix2D source) {\n    if (recorder != null) recorder.setMatrix(source);\n    g.setMatrix(source);\n  }",
    "right" : "/**\n   * Set the current transformation to the contents of the specified source.\n   */\n  public void setMatrix(PMatrix2D source) {\n    if (recorder != null) recorder.setMatrix(source);\n    g.setMatrix(source);\n  }",
    "info" : "MethodDeclaration[421458-421671]:MethodDeclaration[421488-421701]"
  }, {
    "left" : "public source PMatrix3D) : void",
    "right" : "public source PMatrix3D) : void",
    "info" : "MethodDeclaration[421676-421889]:MethodDeclaration[421706-421919]"
  }, {
    "left" : "/**\n   * ( begin auto-generated from printMatrix.xml )\n   *\n   * Prints the current matrix to the Console (the text window at the bottom\n   * of Processing).\n   *\n   * ( end auto-generated )\n   *\n   * @webref transform\n   * @see PGraphics#pushMatrix()\n   * @see PGraphics#popMatrix()\n   * @see PGraphics#resetMatrix()\n   * @see PGraphics#applyMatrix(PMatrix)\n   */\n  public void printMatrix() {\n    if (recorder != null) recorder.printMatrix();\n    g.printMatrix();\n  }",
    "right" : "/**\n   * ( begin auto-generated from printMatrix.xml )\n   *\n   * Prints the current matrix to the Console (the text window at the bottom\n   * of Processing).\n   *\n   * ( end auto-generated )\n   *\n   * @webref transform\n   * @see PGraphics#pushMatrix()\n   * @see PGraphics#popMatrix()\n   * @see PGraphics#resetMatrix()\n   * @see PGraphics#applyMatrix(PMatrix)\n   */\n  public void printMatrix() {\n    if (recorder != null) recorder.printMatrix();\n    g.printMatrix();\n  }",
    "info" : "MethodDeclaration[421894-422363]:MethodDeclaration[421924-422393]"
  }, {
    "left" : "public ) : void",
    "right" : "public ) : void",
    "info" : "MethodDeclaration[422368-423997]:MethodDeclaration[422398-424027]"
  }, {
    "left" : "/**\n   * ( begin auto-generated from endCamera.xml )\n   *\n   * The <b>beginCamera()</b> and <b>endCamera()</b> functions enable\n   * advanced customization of the camera space. Please see the reference for\n   * <b>beginCamera()</b> for a description of how the functions are used.\n   *\n   * ( end auto-generated )\n   *\n   * @webref lights_camera:camera\n   * @see PGraphics#camera(float, float, float, float, float, float, float, float, float)\n   */\n  public void endCamera() {\n    if (recorder != null) recorder.endCamera();\n    g.endCamera();\n  }",
    "right" : "/**\n   * ( begin auto-generated from endCamera.xml )\n   *\n   * The <b>beginCamera()</b> and <b>endCamera()</b> functions enable\n   * advanced customization of the camera space. Please see the reference for\n   * <b>beginCamera()</b> for a description of how the functions are used.\n   *\n   * ( end auto-generated )\n   *\n   * @webref lights_camera:camera\n   * @see PGraphics#camera(float, float, float, float, float, float, float, float, float)\n   */\n  public void endCamera() {\n    if (recorder != null) recorder.endCamera();\n    g.endCamera();\n  }",
    "info" : "MethodDeclaration[424002-424549]:MethodDeclaration[424032-424579]"
  }, {
    "left" : "/**\n   * ( begin auto-generated from camera.xml )\n   *\n   * Sets the position of the camera through setting the eye position, the\n   * center of the scene, and which axis is facing upward. Moving the eye\n   * position and the direction it is pointing (the center of the scene)\n   * allows the images to be seen from different angles. The version without\n   * any parameters sets the camera to the default position, pointing to the\n   * center of the display window with the Y axis as up. The default values\n   * are <b>camera(width/2.0, height/2.0, (height/2.0) / tan(PI*30.0 /\n   * 180.0), width/2.0, height/2.0, 0, 0, 1, 0)</b>. This function is similar\n   * to <b>gluLookAt()</b> in OpenGL, but it first clears the current camera settings.\n   *\n   * ( end auto-generated )\n   *\n   * @webref lights_camera:camera\n   * @see PGraphics#endCamera()\n   * @see PGraphics#frustum(float, float, float, float, float, float)\n   */\n  public void camera() {\n    if (recorder != null) recorder.camera();\n    g.camera();\n  }",
    "right" : "/**\n   * ( begin auto-generated from camera.xml )\n   *\n   * Sets the position of the camera through setting the eye position, the\n   * center of the scene, and which axis is facing upward. Moving the eye\n   * position and the direction it is pointing (the center of the scene)\n   * allows the images to be seen from different angles. The version without\n   * any parameters sets the camera to the default position, pointing to the\n   * center of the display window with the Y axis as up. The default values\n   * are <b>camera(width/2.0, height/2.0, (height/2.0) / tan(PI*30.0 /\n   * 180.0), width/2.0, height/2.0, 0, 0, 1, 0)</b>. This function is similar\n   * to <b>gluLookAt()</b> in OpenGL, but it first clears the current camera settings.\n   *\n   * ( end auto-generated )\n   *\n   * @webref lights_camera:camera\n   * @see PGraphics#endCamera()\n   * @see PGraphics#frustum(float, float, float, float, float, float)\n   */\n  public void camera() {\n    if (recorder != null) recorder.camera();\n    g.camera();\n  }",
    "info" : "MethodDeclaration[424554-425566]:MethodDeclaration[424584-425596]"
  }, {
    "left" : "/**\n * @param eyeX x-coordinate for the eye\n * @param eyeY y-coordinate for the eye\n * @param eyeZ z-coordinate for the eye\n * @param centerX x-coordinate for the center of the scene\n * @param centerY y-coordinate for the center of the scene\n * @param centerZ z-coordinate for the center of the scene\n * @param upX usually 0.0, 1.0, or -1.0\n * @param upY usually 0.0, 1.0, or -1.0\n * @param upZ usually 0.0, 1.0, or -1.0\n */\n  public void camera(float eyeX, float eyeY, float eyeZ,\n                     float centerX, float centerY, float centerZ,\n                     float upX, float upY, float upZ) {\n    if (recorder != null) recorder.camera(eyeX, eyeY, eyeZ, centerX, centerY, centerZ, upX, upY, upZ);\n    g.camera(eyeX, eyeY, eyeZ, centerX, centerY, centerZ, upX, upY, upZ);\n  }",
    "right" : "/**\n * @param eyeX x-coordinate for the eye\n * @param eyeY y-coordinate for the eye\n * @param eyeZ z-coordinate for the eye\n * @param centerX x-coordinate for the center of the scene\n * @param centerY y-coordinate for the center of the scene\n * @param centerZ z-coordinate for the center of the scene\n * @param upX usually 0.0, 1.0, or -1.0\n * @param upY usually 0.0, 1.0, or -1.0\n * @param upZ usually 0.0, 1.0, or -1.0\n */\n  public void camera(float eyeX, float eyeY, float eyeZ,\n                     float centerX, float centerY, float centerZ,\n                     float upX, float upY, float upZ) {\n    if (recorder != null) recorder.camera(eyeX, eyeY, eyeZ, centerX, centerY, centerZ, upX, upY, upZ);\n    g.camera(eyeX, eyeY, eyeZ, centerX, centerY, centerZ, upX, upY, upZ);\n  }",
    "info" : "MethodDeclaration[425569-426353]:MethodDeclaration[425599-426383]"
  }, {
    "left" : "/**\n   * ( begin auto-generated from printCamera.xml )\n   *\n   * Prints the current camera matrix to the Console (the text window at the\n   * bottom of Processing).\n   *\n   * ( end auto-generated )\n * @webref lights_camera:camera\n * @see PGraphics#camera(float, float, float, float, float, float, float, float, float)\n */\n  public void printCamera() {\n    if (recorder != null) recorder.printCamera();\n    g.printCamera();\n  }",
    "right" : "/**\n   * ( begin auto-generated from printCamera.xml )\n   *\n   * Prints the current camera matrix to the Console (the text window at the\n   * bottom of Processing).\n   *\n   * ( end auto-generated )\n * @webref lights_camera:camera\n * @see PGraphics#camera(float, float, float, float, float, float, float, float, float)\n */\n  public void printCamera() {\n    if (recorder != null) recorder.printCamera();\n    g.printCamera();\n  }",
    "info" : "MethodDeclaration[426356-426782]:MethodDeclaration[426386-426812]"
  }, {
    "left" : "/**\n   * ( begin auto-generated from ortho.xml )\n   *\n   * Sets an orthographic projection and defines a parallel clipping volume.\n   * All objects with the same dimension appear the same size, regardless of\n   * whether they are near or far from the camera. The parameters to this\n   * function specify the clipping volume where left and right are the\n   * minimum and maximum x values, top and bottom are the minimum and maximum\n   * y values, and near and far are the minimum and maximum z values. If no\n   * parameters are given, the default is used: ortho(0, width, 0, height,\n   * -10, 10).\n   *\n   * ( end auto-generated )\n   *\n   * @webref lights_camera:camera\n   */\n  public void ortho() {\n    if (recorder != null) recorder.ortho();\n    g.ortho();\n  }",
    "right" : "/**\n   * ( begin auto-generated from ortho.xml )\n   *\n   * Sets an orthographic projection and defines a parallel clipping volume.\n   * All objects with the same dimension appear the same size, regardless of\n   * whether they are near or far from the camera. The parameters to this\n   * function specify the clipping volume where left and right are the\n   * minimum and maximum x values, top and bottom are the minimum and maximum\n   * y values, and near and far are the minimum and maximum z values. If no\n   * parameters are given, the default is used: ortho(0, width, 0, height,\n   * -10, 10).\n   *\n   * ( end auto-generated )\n   *\n   * @webref lights_camera:camera\n   */\n  public void ortho() {\n    if (recorder != null) recorder.ortho();\n    g.ortho();\n  }",
    "info" : "MethodDeclaration[426787-427548]:MethodDeclaration[426817-427578]"
  }, {
    "left" : "public left float, right float, bottom float, top float) : void",
    "right" : "public left float, right float, bottom float, top float) : void",
    "info" : "MethodDeclaration[427553-427973]:MethodDeclaration[427583-428003]"
  }, {
    "left" : "public left float, right float, bottom float, top float, near float, far float) : void",
    "right" : "public left float, right float, bottom float, top float, near float, far float) : void",
    "info" : "MethodDeclaration[427978-428389]:MethodDeclaration[428008-428419]"
  }, {
    "left" : "/**\n   * ( begin auto-generated from perspective.xml )\n   *\n   * Sets a perspective projection applying foreshortening, making distant\n   * objects appear smaller than closer ones. The parameters define a viewing\n   * volume with the shape of truncated pyramid. Objects near to the front of\n   * the volume appear their actual size, while farther objects appear\n   * smaller. This projection simulates the perspective of the world more\n   * accurately than orthographic projection. The version of perspective\n   * without parameters sets the default perspective and the version with\n   * four parameters allows the programmer to set the area precisely. The\n   * default values are: perspective(PI/3.0, width/height, cameraZ/10.0,\n   * cameraZ*10.0) where cameraZ is ((height/2.0) / tan(PI*60.0/360.0));\n   *\n   * ( end auto-generated )\n   *\n   * @webref lights_camera:camera\n   */\n  public void perspective() {\n    if (recorder != null) recorder.perspective();\n    g.perspective();\n  }",
    "right" : "/**\n   * ( begin auto-generated from perspective.xml )\n   *\n   * Sets a perspective projection applying foreshortening, making distant\n   * objects appear smaller than closer ones. The parameters define a viewing\n   * volume with the shape of truncated pyramid. Objects near to the front of\n   * the volume appear their actual size, while farther objects appear\n   * smaller. This projection simulates the perspective of the world more\n   * accurately than orthographic projection. The version of perspective\n   * without parameters sets the default perspective and the version with\n   * four parameters allows the programmer to set the area precisely. The\n   * default values are: perspective(PI/3.0, width/height, cameraZ/10.0,\n   * cameraZ*10.0) where cameraZ is ((height/2.0) / tan(PI*60.0/360.0));\n   *\n   * ( end auto-generated )\n   *\n   * @webref lights_camera:camera\n   */\n  public void perspective() {\n    if (recorder != null) recorder.perspective();\n    g.perspective();\n  }",
    "info" : "MethodDeclaration[428394-429379]:MethodDeclaration[428424-429409]"
  }, {
    "left" : "public fovy float, aspect float, zNear float, zFar float) : void",
    "right" : "public fovy float, aspect float, zNear float, zFar float) : void",
    "info" : "MethodDeclaration[429384-429824]:MethodDeclaration[429414-429854]"
  }, {
    "left" : "public left float, right float, bottom float, top float, near float, far float) : void",
    "right" : "public left float, right float, bottom float, top float, near float, far float) : void",
    "info" : "MethodDeclaration[429829-431001]:MethodDeclaration[429859-431031]"
  }, {
    "left" : "/**\n   * ( begin auto-generated from printProjection.xml )\n   *\n   * Prints the current projection matrix to the Console (the text window at\n   * the bottom of Processing).\n   *\n   * ( end auto-generated )\n   *\n   * @webref lights_camera:camera\n   * @see PGraphics#camera(float, float, float, float, float, float, float, float, float)\n   */\n  public void printProjection() {\n    if (recorder != null) recorder.printProjection();\n    g.printProjection();\n  }",
    "right" : "/**\n   * ( begin auto-generated from printProjection.xml )\n   *\n   * Prints the current projection matrix to the Console (the text window at\n   * the bottom of Processing).\n   *\n   * ( end auto-generated )\n   *\n   * @webref lights_camera:camera\n   * @see PGraphics#camera(float, float, float, float, float, float, float, float, float)\n   */\n  public void printProjection() {\n    if (recorder != null) recorder.printProjection();\n    g.printProjection();\n  }",
    "info" : "MethodDeclaration[431006-431463]:MethodDeclaration[431036-431493]"
  }, {
    "left" : "/**\n   * ( begin auto-generated from screenX.xml )\n   *\n   * Takes a three-dimensional X, Y, Z position and returns the X value for\n   * where it will appear on a (two-dimensional) screen.\n   *\n   * ( end auto-generated )\n   *\n   * @webref lights_camera:coordinates\n   * @param x 3D x-coordinate to be mapped\n   * @param y 3D y-coordinate to be mapped\n   * @see PGraphics#screenY(float, float, float)\n   * @see PGraphics#screenZ(float, float, float)\n   */\n  public float screenX(float x, float y) {\n    return g.screenX(x, y);\n  }",
    "right" : "/**\n   * ( begin auto-generated from screenX.xml )\n   *\n   * Takes a three-dimensional X, Y, Z position and returns the X value for\n   * where it will appear on a (two-dimensional) screen.\n   *\n   * ( end auto-generated )\n   *\n   * @webref lights_camera:coordinates\n   * @param x 3D x-coordinate to be mapped\n   * @param y 3D y-coordinate to be mapped\n   * @see PGraphics#screenY(float, float, float)\n   * @see PGraphics#screenZ(float, float, float)\n   */\n  public float screenX(float x, float y) {\n    return g.screenX(x, y);\n  }",
    "info" : "MethodDeclaration[431468-431998]:MethodDeclaration[431498-432028]"
  }, {
    "left" : "/**\n   * ( begin auto-generated from screenY.xml )\n   *\n   * Takes a three-dimensional X, Y, Z position and returns the Y value for\n   * where it will appear on a (two-dimensional) screen.\n   *\n   * ( end auto-generated )\n   *\n   * @webref lights_camera:coordinates\n   * @param x 3D x-coordinate to be mapped\n   * @param y 3D y-coordinate to be mapped\n   * @see PGraphics#screenX(float, float, float)\n   * @see PGraphics#screenZ(float, float, float)\n   */\n  public float screenY(float x, float y) {\n    return g.screenY(x, y);\n  }",
    "right" : "/**\n   * ( begin auto-generated from screenY.xml )\n   *\n   * Takes a three-dimensional X, Y, Z position and returns the Y value for\n   * where it will appear on a (two-dimensional) screen.\n   *\n   * ( end auto-generated )\n   *\n   * @webref lights_camera:coordinates\n   * @param x 3D x-coordinate to be mapped\n   * @param y 3D y-coordinate to be mapped\n   * @see PGraphics#screenX(float, float, float)\n   * @see PGraphics#screenZ(float, float, float)\n   */\n  public float screenY(float x, float y) {\n    return g.screenY(x, y);\n  }",
    "info" : "MethodDeclaration[432003-432533]:MethodDeclaration[432033-432563]"
  }, {
    "left" : "/**\n   * @param z 3D z-coordinate to be mapped\n   */\n  public float screenX(float x, float y, float z) {\n    return g.screenX(x, y, z);\n  }",
    "right" : "/**\n   * @param z 3D z-coordinate to be mapped\n   */\n  public float screenX(float x, float y, float z) {\n    return g.screenX(x, y, z);\n  }",
    "info" : "MethodDeclaration[432538-432677]:MethodDeclaration[432568-432707]"
  }, {
    "left" : "public x float, y float, z float) : float",
    "right" : "public x float, y float, z float) : float",
    "info" : "MethodDeclaration[432682-432821]:MethodDeclaration[432712-432851]"
  }, {
    "left" : "/**\n   * ( begin auto-generated from screenZ.xml )\n   *\n   * Takes a three-dimensional X, Y, Z position and returns the Z value for\n   * where it will appear on a (two-dimensional) screen.\n   *\n   * ( end auto-generated )\n   *\n   * @webref lights_camera:coordinates\n   * @param x 3D x-coordinate to be mapped\n   * @param y 3D y-coordinate to be mapped\n   * @param z 3D z-coordinate to be mapped\n   * @see PGraphics#screenX(float, float, float)\n   * @see PGraphics#screenY(float, float, float)\n   */\n  public float screenZ(float x, float y, float z) {\n    return g.screenZ(x, y, z);\n  }",
    "right" : "/**\n   * ( begin auto-generated from screenZ.xml )\n   *\n   * Takes a three-dimensional X, Y, Z position and returns the Z value for\n   * where it will appear on a (two-dimensional) screen.\n   *\n   * ( end auto-generated )\n   *\n   * @webref lights_camera:coordinates\n   * @param x 3D x-coordinate to be mapped\n   * @param y 3D y-coordinate to be mapped\n   * @param z 3D z-coordinate to be mapped\n   * @see PGraphics#screenX(float, float, float)\n   * @see PGraphics#screenY(float, float, float)\n   */\n  public float screenZ(float x, float y, float z) {\n    return g.screenZ(x, y, z);\n  }",
    "info" : "MethodDeclaration[432826-433411]:MethodDeclaration[432856-433441]"
  }, {
    "left" : "public x float, y float, z float) : float",
    "right" : "public x float, y float, z float) : float",
    "info" : "MethodDeclaration[433416-434639]:MethodDeclaration[433446-434669]"
  }, {
    "left" : "public x float, y float, z float) : float",
    "right" : "public x float, y float, z float) : float",
    "info" : "MethodDeclaration[434644-435868]:MethodDeclaration[434674-435898]"
  }, {
    "left" : "/**\n   * ( begin auto-generated from modelZ.xml )\n   *\n   * Returns the three-dimensional X, Y, Z position in model space. This\n   * returns the Z value for a given coordinate based on the current set of\n   * transformations (scale, rotate, translate, etc.) The Z value can be used\n   * to place an object in space relative to the location of the original\n   * point once the transformations are no longer in use.<br />\n   * <br />\n   * In the example, the <b>modelX()</b>, <b>modelY()</b>, and\n   * <b>modelZ()</b> functions record the location of a box in space after\n   * being placed using a series of translate and rotate commands. After\n   * popMatrix() is called, those transformations no longer apply, but the\n   * (x, y, z) coordinate returned by the model functions is used to place\n   * another box in the same location.\n   *\n   * ( end auto-generated )\n   *\n   * @webref lights_camera:coordinates\n   * @param x 3D x-coordinate to be mapped\n   * @param y 3D y-coordinate to be mapped\n   * @param z 3D z-coordinate to be mapped\n   * @see PGraphics#modelX(float, float, float)\n   * @see PGraphics#modelY(float, float, float)\n   */\n  public float modelZ(float x, float y, float z) {\n    return g.modelZ(x, y, z);\n  }",
    "right" : "/**\n   * ( begin auto-generated from modelZ.xml )\n   *\n   * Returns the three-dimensional X, Y, Z position in model space. This\n   * returns the Z value for a given coordinate based on the current set of\n   * transformations (scale, rotate, translate, etc.) The Z value can be used\n   * to place an object in space relative to the location of the original\n   * point once the transformations are no longer in use.<br />\n   * <br />\n   * In the example, the <b>modelX()</b>, <b>modelY()</b>, and\n   * <b>modelZ()</b> functions record the location of a box in space after\n   * being placed using a series of translate and rotate commands. After\n   * popMatrix() is called, those transformations no longer apply, but the\n   * (x, y, z) coordinate returned by the model functions is used to place\n   * another box in the same location.\n   *\n   * ( end auto-generated )\n   *\n   * @webref lights_camera:coordinates\n   * @param x 3D x-coordinate to be mapped\n   * @param y 3D y-coordinate to be mapped\n   * @param z 3D z-coordinate to be mapped\n   * @see PGraphics#modelX(float, float, float)\n   * @see PGraphics#modelY(float, float, float)\n   */\n  public float modelZ(float x, float y, float z) {\n    return g.modelZ(x, y, z);\n  }",
    "info" : "MethodDeclaration[435873-437097]:MethodDeclaration[435903-437127]"
  }, {
    "left" : "public ) : void",
    "right" : "public ) : void",
    "info" : "MethodDeclaration[437102-438262]:MethodDeclaration[437132-438292]"
  }, {
    "left" : "/**\n   * ( begin auto-generated from popStyle.xml )\n   *\n   * The <b>pushStyle()</b> function saves the current style settings and\n   * <b>popStyle()</b> restores the prior settings; these functions are\n   * always used together. They allow you to change the style settings and\n   * later return to what you had. When a new style is started with\n   * <b>pushStyle()</b>, it builds on the current style information. The\n   * <b>pushStyle()</b> and <b>popStyle()</b> functions can be embedded to\n   * provide more control (see the second example above for a demonstration.)\n   *\n   * ( end auto-generated )\n   *\n   * @webref structure\n   * @see PGraphics#pushStyle()\n   */\n  public void popStyle() {\n    if (recorder != null) recorder.popStyle();\n    g.popStyle();\n  }",
    "right" : "/**\n   * ( begin auto-generated from popStyle.xml )\n   *\n   * The <b>pushStyle()</b> function saves the current style settings and\n   * <b>popStyle()</b> restores the prior settings; these functions are\n   * always used together. They allow you to change the style settings and\n   * later return to what you had. When a new style is started with\n   * <b>pushStyle()</b>, it builds on the current style information. The\n   * <b>pushStyle()</b> and <b>popStyle()</b> functions can be embedded to\n   * provide more control (see the second example above for a demonstration.)\n   *\n   * ( end auto-generated )\n   *\n   * @webref structure\n   * @see PGraphics#pushStyle()\n   */\n  public void popStyle() {\n    if (recorder != null) recorder.popStyle();\n    g.popStyle();\n  }",
    "info" : "MethodDeclaration[438267-439033]:MethodDeclaration[438297-439063]"
  }, {
    "left" : "public s PStyle) : void",
    "right" : "public s PStyle) : void",
    "info" : "MethodDeclaration[439038-439132]:MethodDeclaration[439068-439162]"
  }, {
    "left" : "public weight float) : void",
    "right" : "public weight float) : void",
    "info" : "MethodDeclaration[439137-440233]:MethodDeclaration[439167-440263]"
  }, {
    "left" : "/**\n   * ( begin auto-generated from strokeJoin.xml )\n   *\n   * Sets the style of the joints which connect line segments. These joints\n   * are either mitered, beveled, or rounded and specified with the\n   * corresponding parameters MITER, BEVEL, and ROUND. The default joint is\n   * MITER.\n   * <br/> <br/>\n   * This function is not available with the P3D renderer, (<a\n   * href=\"http://code.google.com/p/processing/issues/detail?id=123\">see\n   * Issue 123</a>). More information about the renderers can be found in the\n   * <b>size()</b> reference.\n   *\n   * ( end auto-generated )\n   *\n   * @webref shape:attributes\n   * @param join either MITER, BEVEL, ROUND\n   * @see PGraphics#stroke(int, float)\n   * @see PGraphics#strokeWeight(float)\n   * @see PGraphics#strokeCap(int)\n   */\n  public void strokeJoin(int join) {\n    if (recorder != null) recorder.strokeJoin(join);\n    g.strokeJoin(join);\n  }",
    "right" : "/**\n   * ( begin auto-generated from strokeJoin.xml )\n   *\n   * Sets the style of the joints which connect line segments. These joints\n   * are either mitered, beveled, or rounded and specified with the\n   * corresponding parameters MITER, BEVEL, and ROUND. The default joint is\n   * MITER.\n   * <br/> <br/>\n   * This function is not available with the P3D renderer, (<a\n   * href=\"http://code.google.com/p/processing/issues/detail?id=123\">see\n   * Issue 123</a>). More information about the renderers can be found in the\n   * <b>size()</b> reference.\n   *\n   * ( end auto-generated )\n   *\n   * @webref shape:attributes\n   * @param join either MITER, BEVEL, ROUND\n   * @see PGraphics#stroke(int, float)\n   * @see PGraphics#strokeWeight(float)\n   * @see PGraphics#strokeCap(int)\n   */\n  public void strokeJoin(int join) {\n    if (recorder != null) recorder.strokeJoin(join);\n    g.strokeJoin(join);\n  }",
    "info" : "MethodDeclaration[440238-441139]:MethodDeclaration[440268-441169]"
  }, {
    "left" : "public cap int) : void",
    "right" : "public cap int) : void",
    "info" : "MethodDeclaration[441144-442072]:MethodDeclaration[441174-442102]"
  }, {
    "left" : "public ) : void",
    "right" : "public ) : void",
    "info" : "MethodDeclaration[442077-442565]:MethodDeclaration[442107-442595]"
  }, {
    "left" : "public rgb int) : void",
    "right" : "public rgb int) : void",
    "info" : "MethodDeclaration[442570-444138]:MethodDeclaration[442600-444168]"
  }, {
    "left" : "/**\n   * @param alpha opacity of the stroke\n   */\n  public void stroke(int rgb, float alpha) {\n    if (recorder != null) recorder.stroke(rgb, alpha);\n    g.stroke(rgb, alpha);\n  }",
    "right" : "/**\n   * @param alpha opacity of the stroke\n   */\n  public void stroke(int rgb, float alpha) {\n    if (recorder != null) recorder.stroke(rgb, alpha);\n    g.stroke(rgb, alpha);\n  }",
    "info" : "MethodDeclaration[444143-444322]:MethodDeclaration[444173-444352]"
  }, {
    "left" : "/**\n   * @param gray specifies a value between white and black\n   */\n  public void stroke(float gray) {\n    if (recorder != null) recorder.stroke(gray);\n    g.stroke(gray);\n  }",
    "right" : "/**\n   * @param gray specifies a value between white and black\n   */\n  public void stroke(float gray) {\n    if (recorder != null) recorder.stroke(gray);\n    g.stroke(gray);\n  }",
    "info" : "MethodDeclaration[444327-444503]:MethodDeclaration[444357-444533]"
  }, {
    "left" : "public void stroke(float gray, float alpha) {\n    if (recorder != null) recorder.stroke(gray, alpha);\n    g.stroke(gray, alpha);\n  }",
    "right" : "public void stroke(float gray, float alpha) {\n    if (recorder != null) recorder.stroke(gray, alpha);\n    g.stroke(gray, alpha);\n  }",
    "info" : "MethodDeclaration[444508-444640]:MethodDeclaration[444538-444670]"
  }, {
    "left" : "public v1 float, v2 float, v3 float) : void",
    "right" : "public v1 float, v2 float, v3 float) : void",
    "info" : "MethodDeclaration[444645-445034]:MethodDeclaration[444675-445064]"
  }, {
    "left" : "public void stroke(float v1, float v2, float v3, float alpha) {\n    if (recorder != null) recorder.stroke(v1, v2, v3, alpha);\n    g.stroke(v1, v2, v3, alpha);\n  }",
    "right" : "public void stroke(float v1, float v2, float v3, float alpha) {\n    if (recorder != null) recorder.stroke(v1, v2, v3, alpha);\n    g.stroke(v1, v2, v3, alpha);\n  }",
    "info" : "MethodDeclaration[445039-445201]:MethodDeclaration[445069-445231]"
  }, {
    "left" : "public ) : void",
    "right" : "public ) : void",
    "info" : "MethodDeclaration[445206-445697]:MethodDeclaration[445236-445727]"
  }, {
    "left" : "public rgb int) : void",
    "right" : "public rgb int) : void",
    "info" : "MethodDeclaration[445702-447292]:MethodDeclaration[445732-447322]"
  }, {
    "left" : "public rgb int, alpha float) : void",
    "right" : "public rgb int, alpha float) : void",
    "info" : "MethodDeclaration[447297-447469]:MethodDeclaration[447327-447499]"
  }, {
    "left" : "/**\n   * @param gray specifies a value between white and black\n   */\n  public void tint(float gray) {\n    if (recorder != null) recorder.tint(gray);\n    g.tint(gray);\n  }",
    "right" : "/**\n   * @param gray specifies a value between white and black\n   */\n  public void tint(float gray) {\n    if (recorder != null) recorder.tint(gray);\n    g.tint(gray);\n  }",
    "info" : "MethodDeclaration[447474-447644]:MethodDeclaration[447504-447674]"
  }, {
    "left" : "public gray float, alpha float) : void",
    "right" : "public gray float, alpha float) : void",
    "info" : "MethodDeclaration[447649-447775]:MethodDeclaration[447679-447805]"
  }, {
    "left" : "public v1 float, v2 float, v3 float) : void",
    "right" : "public v1 float, v2 float, v3 float) : void",
    "info" : "MethodDeclaration[447778-448126]:MethodDeclaration[447808-448156]"
  }, {
    "left" : "public v1 float, v2 float, v3 float, alpha float) : void",
    "right" : "public v1 float, v2 float, v3 float, alpha float) : void",
    "info" : "MethodDeclaration[448131-448287]:MethodDeclaration[448161-448317]"
  }, {
    "left" : "public ) : void",
    "right" : "public ) : void",
    "info" : "MethodDeclaration[448292-448790]:MethodDeclaration[448322-448820]"
  }, {
    "left" : "public rgb int) : void",
    "right" : "public rgb int) : void",
    "info" : "MethodDeclaration[448795-450455]:MethodDeclaration[448825-450485]"
  }, {
    "left" : "public rgb int, alpha float) : void",
    "right" : "public rgb int, alpha float) : void",
    "info" : "MethodDeclaration[450460-450631]:MethodDeclaration[450490-450661]"
  }, {
    "left" : "/**\n   * @param gray number specifying value between white and black\n   */\n  public void fill(float gray) {\n    if (recorder != null) recorder.fill(gray);\n    g.fill(gray);\n  }",
    "right" : "/**\n   * @param gray number specifying value between white and black\n   */\n  public void fill(float gray) {\n    if (recorder != null) recorder.fill(gray);\n    g.fill(gray);\n  }",
    "info" : "MethodDeclaration[450636-450812]:MethodDeclaration[450666-450842]"
  }, {
    "left" : "public void fill(float gray, float alpha) {\n    if (recorder != null) recorder.fill(gray, alpha);\n    g.fill(gray, alpha);\n  }",
    "right" : "public void fill(float gray, float alpha) {\n    if (recorder != null) recorder.fill(gray, alpha);\n    g.fill(gray, alpha);\n  }",
    "info" : "MethodDeclaration[450817-450943]:MethodDeclaration[450847-450973]"
  }, {
    "left" : "/**\n   * @param v1 red or hue value (depending on current color mode)\n   * @param v2 green or saturation value (depending on current color mode)\n   * @param v3 blue or brightness value (depending on current color mode)\n   */\n  public void fill(float v1, float v2, float v3) {\n    if (recorder != null) recorder.fill(v1, v2, v3);\n    g.fill(v1, v2, v3);\n  }",
    "right" : "/**\n   * @param v1 red or hue value (depending on current color mode)\n   * @param v2 green or saturation value (depending on current color mode)\n   * @param v3 blue or brightness value (depending on current color mode)\n   */\n  public void fill(float v1, float v2, float v3) {\n    if (recorder != null) recorder.fill(v1, v2, v3);\n    g.fill(v1, v2, v3);\n  }",
    "info" : "MethodDeclaration[450948-451304]:MethodDeclaration[450978-451334]"
  }, {
    "left" : "public v1 float, v2 float, v3 float, alpha float) : void",
    "right" : "public v1 float, v2 float, v3 float, alpha float) : void",
    "info" : "MethodDeclaration[451309-451465]:MethodDeclaration[451339-451495]"
  }, {
    "left" : "public rgb int) : void",
    "right" : "public rgb int) : void",
    "info" : "MethodDeclaration[451470-452451]:MethodDeclaration[451500-452481]"
  }, {
    "left" : "/**\n * @param gray number specifying value between white and black\n */\n  public void ambient(float gray) {\n    if (recorder != null) recorder.ambient(gray);\n    g.ambient(gray);\n  }",
    "right" : "/**\n * @param gray number specifying value between white and black\n */\n  public void ambient(float gray) {\n    if (recorder != null) recorder.ambient(gray);\n    g.ambient(gray);\n  }",
    "info" : "MethodDeclaration[452454-452635]:MethodDeclaration[452484-452665]"
  }, {
    "left" : "/**\n * @param v1 red or hue value (depending on current color mode)\n * @param v2 green or saturation value (depending on current color mode)\n * @param v3 blue or brightness value (depending on current color mode)\n */\n  public void ambient(float v1, float v2, float v3) {\n    if (recorder != null) recorder.ambient(v1, v2, v3);\n    g.ambient(v1, v2, v3);\n  }",
    "right" : "/**\n * @param v1 red or hue value (depending on current color mode)\n * @param v2 green or saturation value (depending on current color mode)\n * @param v3 blue or brightness value (depending on current color mode)\n */\n  public void ambient(float v1, float v2, float v3) {\n    if (recorder != null) recorder.ambient(v1, v2, v3);\n    g.ambient(v1, v2, v3);\n  }",
    "info" : "MethodDeclaration[452638-452995]:MethodDeclaration[452668-453025]"
  }, {
    "left" : "public rgb int) : void",
    "right" : "public rgb int) : void",
    "info" : "MethodDeclaration[453000-453921]:MethodDeclaration[453030-453951]"
  }, {
    "left" : "public gray float) : void",
    "right" : "public gray float) : void",
    "info" : "MethodDeclaration[453924-454101]:MethodDeclaration[453954-454131]"
  }, {
    "left" : "/**\n * @param v1 red or hue value (depending on current color mode)\n * @param v2 green or saturation value (depending on current color mode)\n * @param v3 blue or brightness value (depending on current color mode)\n */\n  public void specular(float v1, float v2, float v3) {\n    if (recorder != null) recorder.specular(v1, v2, v3);\n    g.specular(v1, v2, v3);\n  }",
    "right" : "/**\n * @param v1 red or hue value (depending on current color mode)\n * @param v2 green or saturation value (depending on current color mode)\n * @param v3 blue or brightness value (depending on current color mode)\n */\n  public void specular(float v1, float v2, float v3) {\n    if (recorder != null) recorder.specular(v1, v2, v3);\n    g.specular(v1, v2, v3);\n  }",
    "info" : "MethodDeclaration[454104-454464]:MethodDeclaration[454134-454494]"
  }, {
    "left" : "public shine float) : void",
    "right" : "public shine float) : void",
    "info" : "MethodDeclaration[454469-455148]:MethodDeclaration[454499-455178]"
  }, {
    "left" : "public rgb int) : void",
    "right" : "public rgb int) : void",
    "info" : "MethodDeclaration[455153-455838]:MethodDeclaration[455183-455868]"
  }, {
    "left" : "/**\n   * gray number specifying value between white and black\n   */\n  public void emissive(float gray) {\n    if (recorder != null) recorder.emissive(gray);\n    g.emissive(gray);\n  }",
    "right" : "/**\n   * gray number specifying value between white and black\n   */\n  public void emissive(float gray) {\n    if (recorder != null) recorder.emissive(gray);\n    g.emissive(gray);\n  }",
    "info" : "MethodDeclaration[455843-456024]:MethodDeclaration[455873-456054]"
  }, {
    "left" : "/**\n   * @param v1 red or hue value (depending on current color mode)\n   * @param v2 green or saturation value (depending on current color mode)\n   * @param v3 blue or brightness value (depending on current color mode)\n   */\n  public void emissive(float v1, float v2, float v3) {\n    if (recorder != null) recorder.emissive(v1, v2, v3);\n    g.emissive(v1, v2, v3);\n  }",
    "right" : "/**\n   * @param v1 red or hue value (depending on current color mode)\n   * @param v2 green or saturation value (depending on current color mode)\n   * @param v3 blue or brightness value (depending on current color mode)\n   */\n  public void emissive(float v1, float v2, float v3) {\n    if (recorder != null) recorder.emissive(v1, v2, v3);\n    g.emissive(v1, v2, v3);\n  }",
    "info" : "MethodDeclaration[456029-456397]:MethodDeclaration[456059-456427]"
  }, {
    "left" : "/**\n   * ( begin auto-generated from lights.xml )\n   *\n   * Sets the default ambient light, directional light, falloff, and specular\n   * values. The defaults are ambientLight(128, 128, 128) and\n   * directionalLight(128, 128, 128, 0, 0, -1), lightFalloff(1, 0, 0), and\n   * lightSpecular(0, 0, 0). Lights need to be included in the draw() to\n   * remain persistent in a looping program. Placing them in the setup() of a\n   * looping program will cause them to only have an effect the first time\n   * through the loop.\n   *\n   * ( end auto-generated )\n   *\n   * @webref lights_camera:lights\n   * @usage web_application\n   * @see PGraphics#ambientLight(float, float, float, float, float, float)\n   * @see PGraphics#directionalLight(float, float, float, float, float, float)\n   * @see PGraphics#pointLight(float, float, float, float, float, float)\n   * @see PGraphics#spotLight(float, float, float, float, float, float, float, float, float, float, float)\n   * @see PGraphics#noLights()\n   */\n  public void lights() {\n    if (recorder != null) recorder.lights();\n    g.lights();\n  }",
    "right" : "/**\n   * ( begin auto-generated from lights.xml )\n   *\n   * Sets the default ambient light, directional light, falloff, and specular\n   * values. The defaults are ambientLight(128, 128, 128) and\n   * directionalLight(128, 128, 128, 0, 0, -1), lightFalloff(1, 0, 0), and\n   * lightSpecular(0, 0, 0). Lights need to be included in the draw() to\n   * remain persistent in a looping program. Placing them in the setup() of a\n   * looping program will cause them to only have an effect the first time\n   * through the loop.\n   *\n   * ( end auto-generated )\n   *\n   * @webref lights_camera:lights\n   * @usage web_application\n   * @see PGraphics#ambientLight(float, float, float, float, float, float)\n   * @see PGraphics#directionalLight(float, float, float, float, float, float)\n   * @see PGraphics#pointLight(float, float, float, float, float, float)\n   * @see PGraphics#spotLight(float, float, float, float, float, float, float, float, float, float, float)\n   * @see PGraphics#noLights()\n   */\n  public void lights() {\n    if (recorder != null) recorder.lights();\n    g.lights();\n  }",
    "info" : "MethodDeclaration[456402-457481]:MethodDeclaration[456432-457511]"
  }, {
    "left" : "public ) : void",
    "right" : "public ) : void",
    "info" : "MethodDeclaration[457486-458045]:MethodDeclaration[457516-458075]"
  }, {
    "left" : "public v1 float, v2 float, v3 float) : void",
    "right" : "public v1 float, v2 float, v3 float) : void",
    "info" : "MethodDeclaration[458050-459454]:MethodDeclaration[458080-459484]"
  }, {
    "left" : "public v1 float, v2 float, v3 float, x float, y float, z float) : void",
    "right" : "public v1 float, v2 float, v3 float, x float, y float, z float) : void",
    "info" : "MethodDeclaration[459459-459816]:MethodDeclaration[459489-459846]"
  }, {
    "left" : "/**\n   * ( begin auto-generated from directionalLight.xml )\n   *\n   * Adds a directional light. Directional light comes from one direction and\n   * is stronger when hitting a surface squarely and weaker if it hits at a a\n   * gentle angle. After hitting a surface, a directional lights scatters in\n   * all directions. Lights need to be included in the <b>draw()</b> to\n   * remain persistent in a looping program. Placing them in the\n   * <b>setup()</b> of a looping program will cause them to only have an\n   * effect the first time through the loop. The affect of the <b>v1</b>,\n   * <b>v2</b>, and <b>v3</b> parameters is determined by the current color\n   * mode. The <b>nx</b>, <b>ny</b>, and <b>nz</b> parameters specify the\n   * direction the light is facing. For example, setting <b>ny</b> to -1 will\n   * cause the geometry to be lit from below (the light is facing directly upward).\n   *\n   * ( end auto-generated )\n   *\n   * @webref lights_camera:lights\n   * @usage web_application\n   * @param v1 red or hue value (depending on current color mode)\n   * @param v2 green or saturation value (depending on current color mode)\n   * @param v3 blue or brightness value (depending on current color mode)\n   * @param nx direction along the x-axis\n   * @param ny direction along the y-axis\n   * @param nz direction along the z-axis\n   * @see PGraphics#lights()\n   * @see PGraphics#ambientLight(float, float, float, float, float, float)\n   * @see PGraphics#pointLight(float, float, float, float, float, float)\n   * @see PGraphics#spotLight(float, float, float, float, float, float, float, float, float, float, float)\n   */\n  public void directionalLight(float v1, float v2, float v3,\n                               float nx, float ny, float nz) {\n    if (recorder != null) recorder.directionalLight(v1, v2, v3, nx, ny, nz);\n    g.directionalLight(v1, v2, v3, nx, ny, nz);\n  }",
    "right" : "/**\n   * ( begin auto-generated from directionalLight.xml )\n   *\n   * Adds a directional light. Directional light comes from one direction and\n   * is stronger when hitting a surface squarely and weaker if it hits at a a\n   * gentle angle. After hitting a surface, a directional lights scatters in\n   * all directions. Lights need to be included in the <b>draw()</b> to\n   * remain persistent in a looping program. Placing them in the\n   * <b>setup()</b> of a looping program will cause them to only have an\n   * effect the first time through the loop. The affect of the <b>v1</b>,\n   * <b>v2</b>, and <b>v3</b> parameters is determined by the current color\n   * mode. The <b>nx</b>, <b>ny</b>, and <b>nz</b> parameters specify the\n   * direction the light is facing. For example, setting <b>ny</b> to -1 will\n   * cause the geometry to be lit from below (the light is facing directly upward).\n   *\n   * ( end auto-generated )\n   *\n   * @webref lights_camera:lights\n   * @usage web_application\n   * @param v1 red or hue value (depending on current color mode)\n   * @param v2 green or saturation value (depending on current color mode)\n   * @param v3 blue or brightness value (depending on current color mode)\n   * @param nx direction along the x-axis\n   * @param ny direction along the y-axis\n   * @param nz direction along the z-axis\n   * @see PGraphics#lights()\n   * @see PGraphics#ambientLight(float, float, float, float, float, float)\n   * @see PGraphics#pointLight(float, float, float, float, float, float)\n   * @see PGraphics#spotLight(float, float, float, float, float, float, float, float, float, float, float)\n   */\n  public void directionalLight(float v1, float v2, float v3,\n                               float nx, float ny, float nz) {\n    if (recorder != null) recorder.directionalLight(v1, v2, v3, nx, ny, nz);\n    g.directionalLight(v1, v2, v3, nx, ny, nz);\n  }",
    "info" : "MethodDeclaration[459821-461698]:MethodDeclaration[459851-461728]"
  }, {
    "left" : "public v1 float, v2 float, v3 float, x float, y float, z float) : void",
    "right" : "public v1 float, v2 float, v3 float, x float, y float, z float) : void",
    "info" : "MethodDeclaration[461703-463171]:MethodDeclaration[461733-463201]"
  }, {
    "left" : "public v1 float, v2 float, v3 float, x float, y float, z float, nx float, ny float, nz float, angle float, concentration float) : void",
    "right" : "public v1 float, v2 float, v3 float, x float, y float, z float, nx float, ny float, nz float, angle float, concentration float) : void",
    "info" : "MethodDeclaration[463176-465176]:MethodDeclaration[463206-465206]"
  }, {
    "left" : "/**\n   * ( begin auto-generated from lightFalloff.xml )\n   *\n   * Sets the falloff rates for point lights, spot lights, and ambient\n   * lights. The parameters are used to determine the falloff with the\n   * following equation:<br /><br />d = distance from light position to\n   * vertex position<br />falloff = 1 / (CONSTANT + d * LINEAR + (d*d) *\n   * QUADRATIC)<br /><br />Like <b>fill()</b>, it affects only the elements\n   * which are created after it in the code. The default value if\n   * <b>LightFalloff(1.0, 0.0, 0.0)</b>. Thinking about an ambient light with\n   * a falloff can be tricky. It is used, for example, if you wanted a region\n   * of your scene to be lit ambiently one color and another region to be lit\n   * ambiently by another color, you would use an ambient light with location\n   * and falloff. You can think of it as a point light that doesn't care\n   * which direction a surface is facing.\n   *\n   * ( end auto-generated )\n   *\n   * @webref lights_camera:lights\n   * @usage web_application\n   * @param constant constant value or determining falloff\n   * @param linear linear value for determining falloff\n   * @param quadratic quadratic value for determining falloff\n   * @see PGraphics#lights()\n   * @see PGraphics#ambientLight(float, float, float, float, float, float)\n   * @see PGraphics#pointLight(float, float, float, float, float, float)\n   * @see PGraphics#spotLight(float, float, float, float, float, float, float, float, float, float, float)\n   * @see PGraphics#lightSpecular(float, float, float)\n   */\n  public void lightFalloff(float constant, float linear, float quadratic) {\n    if (recorder != null) recorder.lightFalloff(constant, linear, quadratic);\n    g.lightFalloff(constant, linear, quadratic);\n  }",
    "right" : "/**\n   * ( begin auto-generated from lightFalloff.xml )\n   *\n   * Sets the falloff rates for point lights, spot lights, and ambient\n   * lights. The parameters are used to determine the falloff with the\n   * following equation:<br /><br />d = distance from light position to\n   * vertex position<br />falloff = 1 / (CONSTANT + d * LINEAR + (d*d) *\n   * QUADRATIC)<br /><br />Like <b>fill()</b>, it affects only the elements\n   * which are created after it in the code. The default value if\n   * <b>LightFalloff(1.0, 0.0, 0.0)</b>. Thinking about an ambient light with\n   * a falloff can be tricky. It is used, for example, if you wanted a region\n   * of your scene to be lit ambiently one color and another region to be lit\n   * ambiently by another color, you would use an ambient light with location\n   * and falloff. You can think of it as a point light that doesn't care\n   * which direction a surface is facing.\n   *\n   * ( end auto-generated )\n   *\n   * @webref lights_camera:lights\n   * @usage web_application\n   * @param constant constant value or determining falloff\n   * @param linear linear value for determining falloff\n   * @param quadratic quadratic value for determining falloff\n   * @see PGraphics#lights()\n   * @see PGraphics#ambientLight(float, float, float, float, float, float)\n   * @see PGraphics#pointLight(float, float, float, float, float, float)\n   * @see PGraphics#spotLight(float, float, float, float, float, float, float, float, float, float, float)\n   * @see PGraphics#lightSpecular(float, float, float)\n   */\n  public void lightFalloff(float constant, float linear, float quadratic) {\n    if (recorder != null) recorder.lightFalloff(constant, linear, quadratic);\n    g.lightFalloff(constant, linear, quadratic);\n  }",
    "info" : "MethodDeclaration[465181-466926]:MethodDeclaration[465211-466956]"
  }, {
    "left" : "public v1 float, v2 float, v3 float) : void",
    "right" : "public v1 float, v2 float, v3 float) : void",
    "info" : "MethodDeclaration[466931-468290]:MethodDeclaration[466961-468320]"
  }, {
    "left" : "/**\n   * ( begin auto-generated from background.xml )\n   *\n   * The <b>background()</b> function sets the color used for the background\n   * of the Processing window. The default background is light gray. In the\n   * <b>draw()</b> function, the background color is used to clear the\n   * display window at the beginning of each frame.\n   * <br/> <br/>\n   * An image can also be used as the background for a sketch, however its\n   * width and height must be the same size as the sketch window. To resize\n   * an image 'b' to the size of the sketch window, use b.resize(width, height).\n   * <br/> <br/>\n   * Images used as background will ignore the current <b>tint()</b> setting.\n   * <br/> <br/>\n   * It is not possible to use transparency (alpha) in background colors with\n   * the main drawing surface, however they will work properly with <b>createGraphics()</b>.\n   *\n   * ( end auto-generated )\n   *\n   * <h3>Advanced</h3>\n   * <p>Clear the background with a color that includes an alpha value. This can\n   * only be used with objects created by createGraphics(), because the main\n   * drawing surface cannot be set transparent.</p>\n   * <p>It might be tempting to use this function to partially clear the screen\n   * on each frame, however that's not how this function works. When calling\n   * background(), the pixels will be replaced with pixels that have that level\n   * of transparency. To do a semi-transparent overlay, use fill() with alpha\n   * and draw a rectangle.</p>\n   *\n   * @webref color:setting\n   * @usage web_application\n   * @param rgb any value of the color datatype\n   * @see PGraphics#stroke(float)\n   * @see PGraphics#fill(float)\n   * @see PGraphics#tint(float)\n   * @see PGraphics#colorMode(int)\n   */\n  public void background(int rgb) {\n    if (recorder != null) recorder.background(rgb);\n    g.background(rgb);\n  }",
    "right" : "/**\n   * ( begin auto-generated from background.xml )\n   *\n   * The <b>background()</b> function sets the color used for the background\n   * of the Processing window. The default background is light gray. In the\n   * <b>draw()</b> function, the background color is used to clear the\n   * display window at the beginning of each frame.\n   * <br/> <br/>\n   * An image can also be used as the background for a sketch, however its\n   * width and height must be the same size as the sketch window. To resize\n   * an image 'b' to the size of the sketch window, use b.resize(width, height).\n   * <br/> <br/>\n   * Images used as background will ignore the current <b>tint()</b> setting.\n   * <br/> <br/>\n   * It is not possible to use transparency (alpha) in background colors with\n   * the main drawing surface, however they will work properly with <b>createGraphics()</b>.\n   *\n   * ( end auto-generated )\n   *\n   * <h3>Advanced</h3>\n   * <p>Clear the background with a color that includes an alpha value. This can\n   * only be used with objects created by createGraphics(), because the main\n   * drawing surface cannot be set transparent.</p>\n   * <p>It might be tempting to use this function to partially clear the screen\n   * on each frame, however that's not how this function works. When calling\n   * background(), the pixels will be replaced with pixels that have that level\n   * of transparency. To do a semi-transparent overlay, use fill() with alpha\n   * and draw a rectangle.</p>\n   *\n   * @webref color:setting\n   * @usage web_application\n   * @param rgb any value of the color datatype\n   * @see PGraphics#stroke(float)\n   * @see PGraphics#fill(float)\n   * @see PGraphics#tint(float)\n   * @see PGraphics#colorMode(int)\n   */\n  public void background(int rgb) {\n    if (recorder != null) recorder.background(rgb);\n    g.background(rgb);\n  }",
    "info" : "MethodDeclaration[468295-470140]:MethodDeclaration[468325-470170]"
  }, {
    "left" : "/**\n   * @param alpha opacity of the background\n   */\n  public void background(int rgb, float alpha) {\n    if (recorder != null) recorder.background(rgb, alpha);\n    g.background(rgb, alpha);\n  }",
    "right" : "/**\n   * @param alpha opacity of the background\n   */\n  public void background(int rgb, float alpha) {\n    if (recorder != null) recorder.background(rgb, alpha);\n    g.background(rgb, alpha);\n  }",
    "info" : "MethodDeclaration[470145-470340]:MethodDeclaration[470175-470370]"
  }, {
    "left" : "/**\n   * @param gray specifies a value between white and black\n   */\n  public void background(float gray) {\n    if (recorder != null) recorder.background(gray);\n    g.background(gray);\n  }",
    "right" : "/**\n   * @param gray specifies a value between white and black\n   */\n  public void background(float gray) {\n    if (recorder != null) recorder.background(gray);\n    g.background(gray);\n  }",
    "info" : "MethodDeclaration[470345-470533]:MethodDeclaration[470375-470563]"
  }, {
    "left" : "public gray float, alpha float) : void",
    "right" : "public gray float, alpha float) : void",
    "info" : "MethodDeclaration[470538-470682]:MethodDeclaration[470568-470712]"
  }, {
    "left" : "public v1 float, v2 float, v3 float) : void",
    "right" : "public v1 float, v2 float, v3 float) : void",
    "info" : "MethodDeclaration[470687-471073]:MethodDeclaration[470717-471103]"
  }, {
    "left" : "public v1 float, v2 float, v3 float, alpha float) : void",
    "right" : "public v1 float, v2 float, v3 float, alpha float) : void",
    "info" : "MethodDeclaration[471078-471252]:MethodDeclaration[471108-471282]"
  }, {
    "left" : "/**\n   * @webref color:setting\n   */\n  public void clear() {\n    if (recorder != null) recorder.clear();\n    g.clear();\n  }",
    "right" : "/**\n   * @webref color:setting\n   */\n  public void clear() {\n    if (recorder != null) recorder.clear();\n    g.clear();\n  }",
    "info" : "MethodDeclaration[471257-471380]:MethodDeclaration[471287-471410]"
  }, {
    "left" : "/**\n   * Takes an RGB or ARGB image and sets it as the background.\n   * The width and height of the image must be the same size as the sketch.\n   * Use image.resize(width, height) to make short work of such a task.<br/>\n   * <br/>\n   * Note that even if the image is set as RGB, the high 8 bits of each pixel\n   * should be set opaque (0xFF000000) because the image data will be copied\n   * directly to the screen, and non-opaque background images may have strange\n   * behavior. Use image.filter(OPAQUE) to handle this easily.<br/>\n   * <br/>\n   * When using 3D, this will also clear the zbuffer (if it exists).\n   *\n   * @param image PImage to set as background (must be same size as the sketch window)\n   */\n  public void background(PImage image) {\n    if (recorder != null) recorder.background(image);\n    g.background(image);\n  }",
    "right" : "/**\n   * Takes an RGB or ARGB image and sets it as the background.\n   * The width and height of the image must be the same size as the sketch.\n   * Use image.resize(width, height) to make short work of such a task.<br/>\n   * <br/>\n   * Note that even if the image is set as RGB, the high 8 bits of each pixel\n   * should be set opaque (0xFF000000) because the image data will be copied\n   * directly to the screen, and non-opaque background images may have strange\n   * behavior. Use image.filter(OPAQUE) to handle this easily.<br/>\n   * <br/>\n   * When using 3D, this will also clear the zbuffer (if it exists).\n   *\n   * @param image PImage to set as background (must be same size as the sketch window)\n   */\n  public void background(PImage image) {\n    if (recorder != null) recorder.background(image);\n    g.background(image);\n  }",
    "info" : "MethodDeclaration[471385-472219]:MethodDeclaration[471415-472249]"
  }, {
    "left" : "/**\n   * ( begin auto-generated from colorMode.xml )\n   *\n   * Changes the way Processing interprets color data. By default, the\n   * parameters for <b>fill()</b>, <b>stroke()</b>, <b>background()</b>, and\n   * <b>color()</b> are defined by values between 0 and 255 using the RGB\n   * color model. The <b>colorMode()</b> function is used to change the\n   * numerical range used for specifying colors and to switch color systems.\n   * For example, calling <b>colorMode(RGB, 1.0)</b> will specify that values\n   * are specified between 0 and 1. The limits for defining colors are\n   * altered by setting the parameters range1, range2, range3, and range 4.\n   *\n   * ( end auto-generated )\n   *\n   * @webref color:setting\n   * @usage web_application\n   * @param mode Either RGB or HSB, corresponding to Red/Green/Blue and Hue/Saturation/Brightness\n   * @see PGraphics#background(float)\n   * @see PGraphics#fill(float)\n   * @see PGraphics#stroke(float)\n   */\n  public void colorMode(int mode) {\n    if (recorder != null) recorder.colorMode(mode);\n    g.colorMode(mode);\n  }",
    "right" : "/**\n   * ( begin auto-generated from colorMode.xml )\n   *\n   * Changes the way Processing interprets color data. By default, the\n   * parameters for <b>fill()</b>, <b>stroke()</b>, <b>background()</b>, and\n   * <b>color()</b> are defined by values between 0 and 255 using the RGB\n   * color model. The <b>colorMode()</b> function is used to change the\n   * numerical range used for specifying colors and to switch color systems.\n   * For example, calling <b>colorMode(RGB, 1.0)</b> will specify that values\n   * are specified between 0 and 1. The limits for defining colors are\n   * altered by setting the parameters range1, range2, range3, and range 4.\n   *\n   * ( end auto-generated )\n   *\n   * @webref color:setting\n   * @usage web_application\n   * @param mode Either RGB or HSB, corresponding to Red/Green/Blue and Hue/Saturation/Brightness\n   * @see PGraphics#background(float)\n   * @see PGraphics#fill(float)\n   * @see PGraphics#stroke(float)\n   */\n  public void colorMode(int mode) {\n    if (recorder != null) recorder.colorMode(mode);\n    g.colorMode(mode);\n  }",
    "info" : "MethodDeclaration[472224-473293]:MethodDeclaration[472254-473323]"
  }, {
    "left" : "/**\n   * @param max range for all color elements\n   */\n  public void colorMode(int mode, float max) {\n    if (recorder != null) recorder.colorMode(mode, max);\n    g.colorMode(mode, max);\n  }",
    "right" : "/**\n   * @param max range for all color elements\n   */\n  public void colorMode(int mode, float max) {\n    if (recorder != null) recorder.colorMode(mode, max);\n    g.colorMode(mode, max);\n  }",
    "info" : "MethodDeclaration[473298-473488]:MethodDeclaration[473328-473518]"
  }, {
    "left" : "public mode int, max1 float, max2 float, max3 float) : void",
    "right" : "public mode int, max1 float, max2 float, max3 float) : void",
    "info" : "MethodDeclaration[473493-473940]:MethodDeclaration[473523-473970]"
  }, {
    "left" : "/**\n   * @param maxA range for the alpha\n   */\n  public void colorMode(int mode,\n                        float max1, float max2, float max3, float maxA) {\n    if (recorder != null) recorder.colorMode(mode, max1, max2, max3, maxA);\n    g.colorMode(mode, max1, max2, max3, maxA);\n  }",
    "right" : "/**\n   * @param maxA range for the alpha\n   */\n  public void colorMode(int mode,\n                        float max1, float max2, float max3, float maxA) {\n    if (recorder != null) recorder.colorMode(mode, max1, max2, max3, maxA);\n    g.colorMode(mode, max1, max2, max3, maxA);\n  }",
    "info" : "MethodDeclaration[473945-474226]:MethodDeclaration[473975-474256]"
  }, {
    "left" : "public rgb int) : float",
    "right" : "public rgb int) : float",
    "info" : "MethodDeclaration[474231-474737]:MethodDeclaration[474261-474767]"
  }, {
    "left" : "public rgb int) : float",
    "right" : "public rgb int) : float",
    "info" : "MethodDeclaration[474742-475852]:MethodDeclaration[474772-475882]"
  }, {
    "left" : "/**\n   * ( begin auto-generated from green.xml )\n   *\n   * Extracts the green value from a color, scaled to match current\n   * <b>colorMode()</b>. This value is always returned as a  float so be\n   * careful not to assign it to an int value.<br /><br />The <b>green()</b>\n   * function is easy to use and undestand, but is slower than another\n   * technique. To achieve the same results when working in <b>colorMode(RGB,\n   * 255)</b>, but with greater speed, use the &gt;&gt; (right shift)\n   * operator with a bit mask. For example, the following two lines of code\n   * are equivalent:<br /><pre>float r1 = green(myColor);<br />float r2 =\n   * myColor &gt;&gt; 8 &amp; 0xFF;</pre>\n   *\n   * ( end auto-generated )\n   *\n   * @webref color:creating_reading\n   * @usage web_application\n   * @param rgb any value of the color datatype\n   * @see PGraphics#red(int)\n   * @see PGraphics#blue(int)\n   * @see PGraphics#alpha(int)\n   * @see PGraphics#hue(int)\n   * @see PGraphics#saturation(int)\n   * @see PGraphics#brightness(int)\n   * @see_external rightshift\n   */\n  public final float green(int rgb) {\n    return g.green(rgb);\n  }",
    "right" : "/**\n   * ( begin auto-generated from green.xml )\n   *\n   * Extracts the green value from a color, scaled to match current\n   * <b>colorMode()</b>. This value is always returned as a  float so be\n   * careful not to assign it to an int value.<br /><br />The <b>green()</b>\n   * function is easy to use and undestand, but is slower than another\n   * technique. To achieve the same results when working in <b>colorMode(RGB,\n   * 255)</b>, but with greater speed, use the &gt;&gt; (right shift)\n   * operator with a bit mask. For example, the following two lines of code\n   * are equivalent:<br /><pre>float r1 = green(myColor);<br />float r2 =\n   * myColor &gt;&gt; 8 &amp; 0xFF;</pre>\n   *\n   * ( end auto-generated )\n   *\n   * @webref color:creating_reading\n   * @usage web_application\n   * @param rgb any value of the color datatype\n   * @see PGraphics#red(int)\n   * @see PGraphics#blue(int)\n   * @see PGraphics#alpha(int)\n   * @see PGraphics#hue(int)\n   * @see PGraphics#saturation(int)\n   * @see PGraphics#brightness(int)\n   * @see_external rightshift\n   */\n  public final float green(int rgb) {\n    return g.green(rgb);\n  }",
    "info" : "MethodDeclaration[475857-476983]:MethodDeclaration[475887-477013]"
  }, {
    "left" : "public rgb int) : float",
    "right" : "public rgb int) : float",
    "info" : "MethodDeclaration[476988-478094]:MethodDeclaration[477018-478124]"
  }, {
    "left" : "/**\n   * ( begin auto-generated from hue.xml )\n   *\n   * Extracts the hue value from a color.\n   *\n   * ( end auto-generated )\n   * @webref color:creating_reading\n   * @usage web_application\n   * @param rgb any value of the color datatype\n   * @see PGraphics#red(int)\n   * @see PGraphics#green(int)\n   * @see PGraphics#blue(int)\n   * @see PGraphics#alpha(int)\n   * @see PGraphics#saturation(int)\n   * @see PGraphics#brightness(int)\n   */\n  public final float hue(int rgb) {\n    return g.hue(rgb);\n  }",
    "right" : "/**\n   * ( begin auto-generated from hue.xml )\n   *\n   * Extracts the hue value from a color.\n   *\n   * ( end auto-generated )\n   * @webref color:creating_reading\n   * @usage web_application\n   * @param rgb any value of the color datatype\n   * @see PGraphics#red(int)\n   * @see PGraphics#green(int)\n   * @see PGraphics#blue(int)\n   * @see PGraphics#alpha(int)\n   * @see PGraphics#saturation(int)\n   * @see PGraphics#brightness(int)\n   */\n  public final float hue(int rgb) {\n    return g.hue(rgb);\n  }",
    "info" : "MethodDeclaration[478099-478599]:MethodDeclaration[478129-478629]"
  }, {
    "left" : "/**\n   * ( begin auto-generated from saturation.xml )\n   *\n   * Extracts the saturation value from a color.\n   *\n   * ( end auto-generated )\n   * @webref color:creating_reading\n   * @usage web_application\n   * @param rgb any value of the color datatype\n   * @see PGraphics#red(int)\n   * @see PGraphics#green(int)\n   * @see PGraphics#blue(int)\n   * @see PGraphics#alpha(int)\n   * @see PGraphics#hue(int)\n   * @see PGraphics#brightness(int)\n   */\n  public final float saturation(int rgb) {\n    return g.saturation(rgb);\n  }",
    "right" : "/**\n   * ( begin auto-generated from saturation.xml )\n   *\n   * Extracts the saturation value from a color.\n   *\n   * ( end auto-generated )\n   * @webref color:creating_reading\n   * @usage web_application\n   * @param rgb any value of the color datatype\n   * @see PGraphics#red(int)\n   * @see PGraphics#green(int)\n   * @see PGraphics#blue(int)\n   * @see PGraphics#alpha(int)\n   * @see PGraphics#hue(int)\n   * @see PGraphics#brightness(int)\n   */\n  public final float saturation(int rgb) {\n    return g.saturation(rgb);\n  }",
    "info" : "MethodDeclaration[478604-479125]:MethodDeclaration[478634-479155]"
  }, {
    "left" : "/**\n   * ( begin auto-generated from brightness.xml )\n   *\n   * Extracts the brightness value from a color.\n   *\n   * ( end auto-generated )\n   *\n   * @webref color:creating_reading\n   * @usage web_application\n   * @param rgb any value of the color datatype\n   * @see PGraphics#red(int)\n   * @see PGraphics#green(int)\n   * @see PGraphics#blue(int)\n   * @see PGraphics#alpha(int)\n   * @see PGraphics#hue(int)\n   * @see PGraphics#saturation(int)\n   */\n  public final float brightness(int rgb) {\n    return g.brightness(rgb);\n  }",
    "right" : "/**\n   * ( begin auto-generated from brightness.xml )\n   *\n   * Extracts the brightness value from a color.\n   *\n   * ( end auto-generated )\n   *\n   * @webref color:creating_reading\n   * @usage web_application\n   * @param rgb any value of the color datatype\n   * @see PGraphics#red(int)\n   * @see PGraphics#green(int)\n   * @see PGraphics#blue(int)\n   * @see PGraphics#alpha(int)\n   * @see PGraphics#hue(int)\n   * @see PGraphics#saturation(int)\n   */\n  public final float brightness(int rgb) {\n    return g.brightness(rgb);\n  }",
    "info" : "MethodDeclaration[479130-479656]:MethodDeclaration[479160-479686]"
  }, {
    "left" : "/**\n   * @nowebref\n   * Interpolate between two colors. Like lerp(), but for the\n   * individual color components of a color supplied as an int value.\n   */\n  static public int lerpColor(int c1, int c2, float amt, int mode) {\n    return PGraphics.lerpColor(c1, c2, amt, mode);\n  }",
    "right" : "/**\n   * @nowebref\n   * Interpolate between two colors. Like lerp(), but for the\n   * individual color components of a color supplied as an int value.\n   */\n  static public int lerpColor(int c1, int c2, float amt, int mode) {\n    return PGraphics.lerpColor(c1, c2, amt, mode);\n  }",
    "info" : "MethodDeclaration[479661-479941]:MethodDeclaration[479691-479971]"
  }, {
    "left" : "public method String) : void",
    "right" : "public method String) : void",
    "info" : "MethodDeclaration[479946-480182]:MethodDeclaration[479976-480212]"
  }, {
    "left" : "public method String) : void",
    "right" : "public method String) : void",
    "info" : "MethodDeclaration[480187-480496]:MethodDeclaration[480217-480526]"
  }, {
    "left" : "public method String) : void",
    "right" : "public method String) : void",
    "info" : "MethodDeclaration[480501-480683]:MethodDeclaration[480531-480713]"
  }, {
    "left" : "public str String) : void",
    "right" : "public str String) : void",
    "info" : "MethodDeclaration[480688-480995]:MethodDeclaration[480718-481025]"
  }, {
    "left" : "public method String) : void",
    "right" : "public method String) : void",
    "info" : "MethodDeclaration[481000-481311]:MethodDeclaration[481030-481341]"
  }, {
    "left" : "/**\n   * ( begin auto-generated from PImage_get.xml )\n   *\n   * Reads the color of any pixel or grabs a section of an image. If no\n   * parameters are specified, the entire image is returned. Use the <b>x</b>\n   * and <b>y</b> parameters to get the value of one pixel. Get a section of\n   * the display window by specifying an additional <b>width</b> and\n   * <b>height</b> parameter. When getting an image, the <b>x</b> and\n   * <b>y</b> parameters define the coordinates for the upper-left corner of\n   * the image, regardless of the current <b>imageMode()</b>.<br />\n   * <br />\n   * If the pixel requested is outside of the image window, black is\n   * returned. The numbers returned are scaled according to the current color\n   * ranges, but only RGB values are returned by this function. For example,\n   * even though you may have drawn a shape with <b>colorMode(HSB)</b>, the\n   * numbers returned will be in RGB format.<br />\n   * <br />\n   * Getting the color of a single pixel with <b>get(x, y)</b> is easy, but\n   * not as fast as grabbing the data directly from <b>pixels[]</b>. The\n   * equivalent statement to <b>get(x, y)</b> using <b>pixels[]</b> is\n   * <b>pixels[y*width+x]</b>. See the reference for <b>pixels[]</b> for more information.\n   *\n   * ( end auto-generated )\n   *\n   * <h3>Advanced</h3>\n   * Returns an ARGB \"color\" type (a packed 32 bit int with the color.\n   * If the coordinate is outside the image, zero is returned\n   * (black, but completely transparent).\n   * <P>\n   * If the image is in RGB format (i.e. on a PVideo object),\n   * the value will get its high bits set, just to avoid cases where\n   * they haven't been set already.\n   * <P>\n   * If the image is in ALPHA format, this returns a white with its\n   * alpha value set.\n   * <P>\n   * This function is included primarily for beginners. It is quite\n   * slow because it has to check to see if the x, y that was provided\n   * is inside the bounds, and then has to check to see what image\n   * type it is. If you want things to be more efficient, access the\n   * pixels[] array directly.\n   *\n   * @webref image:pixels\n   * @brief Reads the color of any pixel or grabs a rectangle of pixels\n   * @usage web_application\n   * @param x x-coordinate of the pixel\n   * @param y y-coordinate of the pixel\n   * @see PApplet#set(int, int, int)\n   * @see PApplet#pixels\n   * @see PApplet#copy(PImage, int, int, int, int, int, int, int, int)\n   */\n  public int get(int x, int y) {\n    return g.get(x, y);\n  }",
    "right" : "/**\n   * ( begin auto-generated from PImage_get.xml )\n   *\n   * Reads the color of any pixel or grabs a section of an image. If no\n   * parameters are specified, the entire image is returned. Use the <b>x</b>\n   * and <b>y</b> parameters to get the value of one pixel. Get a section of\n   * the display window by specifying an additional <b>width</b> and\n   * <b>height</b> parameter. When getting an image, the <b>x</b> and\n   * <b>y</b> parameters define the coordinates for the upper-left corner of\n   * the image, regardless of the current <b>imageMode()</b>.<br />\n   * <br />\n   * If the pixel requested is outside of the image window, black is\n   * returned. The numbers returned are scaled according to the current color\n   * ranges, but only RGB values are returned by this function. For example,\n   * even though you may have drawn a shape with <b>colorMode(HSB)</b>, the\n   * numbers returned will be in RGB format.<br />\n   * <br />\n   * Getting the color of a single pixel with <b>get(x, y)</b> is easy, but\n   * not as fast as grabbing the data directly from <b>pixels[]</b>. The\n   * equivalent statement to <b>get(x, y)</b> using <b>pixels[]</b> is\n   * <b>pixels[y*width+x]</b>. See the reference for <b>pixels[]</b> for more information.\n   *\n   * ( end auto-generated )\n   *\n   * <h3>Advanced</h3>\n   * Returns an ARGB \"color\" type (a packed 32 bit int with the color.\n   * If the coordinate is outside the image, zero is returned\n   * (black, but completely transparent).\n   * <P>\n   * If the image is in RGB format (i.e. on a PVideo object),\n   * the value will get its high bits set, just to avoid cases where\n   * they haven't been set already.\n   * <P>\n   * If the image is in ALPHA format, this returns a white with its\n   * alpha value set.\n   * <P>\n   * This function is included primarily for beginners. It is quite\n   * slow because it has to check to see if the x, y that was provided\n   * is inside the bounds, and then has to check to see what image\n   * type it is. If you want things to be more efficient, access the\n   * pixels[] array directly.\n   *\n   * @webref image:pixels\n   * @brief Reads the color of any pixel or grabs a rectangle of pixels\n   * @usage web_application\n   * @param x x-coordinate of the pixel\n   * @param y y-coordinate of the pixel\n   * @see PApplet#set(int, int, int)\n   * @see PApplet#pixels\n   * @see PApplet#copy(PImage, int, int, int, int, int, int, int, int)\n   */\n  public int get(int x, int y) {\n    return g.get(x, y);\n  }",
    "info" : "MethodDeclaration[481316-483807]:MethodDeclaration[481346-483837]"
  }, {
    "left" : "public x int, y int, w int, h int) : PImage",
    "right" : "public x int, y int, w int, h int) : PImage",
    "info" : "MethodDeclaration[483812-483998]:MethodDeclaration[483842-484028]"
  }, {
    "left" : "public ) : PImage",
    "right" : "public ) : PImage",
    "info" : "MethodDeclaration[484003-484178]:MethodDeclaration[484033-484208]"
  }, {
    "left" : "public ) : PImage",
    "right" : "public ) : PImage",
    "info" : "MethodDeclaration[484183-484230]:MethodDeclaration[484213-484260]"
  }, {
    "left" : "public x int, y int, c int) : void",
    "right" : "public x int, y int, c int) : void",
    "info" : "MethodDeclaration[484235-485725]:MethodDeclaration[484265-485755]"
  }, {
    "left" : "/**\n   * <h3>Advanced</h3>\n   * Efficient method of drawing an image's pixels directly to this surface.\n   * No variations are employed, meaning that any scale, tint, or imageMode\n   * settings will be ignored.\n   *\n   * @param img image to copy into the original image\n   */\n  public void set(int x, int y, PImage img) {\n    if (recorder != null) recorder.set(x, y, img);\n    g.set(x, y, img);\n  }",
    "right" : "/**\n   * <h3>Advanced</h3>\n   * Efficient method of drawing an image's pixels directly to this surface.\n   * No variations are employed, meaning that any scale, tint, or imageMode\n   * settings will be ignored.\n   *\n   * @param img image to copy into the original image\n   */\n  public void set(int x, int y, PImage img) {\n    if (recorder != null) recorder.set(x, y, img);\n    g.set(x, y, img);\n  }",
    "info" : "MethodDeclaration[485730-486128]:MethodDeclaration[485760-486158]"
  }, {
    "left" : "/**\n   * ( begin auto-generated from PImage_mask.xml )\n   *\n   * Masks part of an image from displaying by loading another image and\n   * using it as an alpha channel. This mask image should only contain\n   * grayscale data, but only the blue color channel is used. The mask image\n   * needs to be the same size as the image to which it is applied.<br />\n   * <br />\n   * In addition to using a mask image, an integer array containing the alpha\n   * channel data can be specified directly. This method is useful for\n   * creating dynamically generated alpha masks. This array must be of the\n   * same length as the target image's pixels array and should contain only\n   * grayscale data of values between 0-255.\n   *\n   * ( end auto-generated )\n   *\n   * <h3>Advanced</h3>\n   *\n   * Set alpha channel for an image. Black colors in the source\n   * image will make the destination image completely transparent,\n   * and white will make things fully opaque. Gray values will\n   * be in-between steps.\n   * <P>\n   * Strictly speaking the \"blue\" value from the source image is\n   * used as the alpha color. For a fully grayscale image, this\n   * is correct, but for a color image it's not 100% accurate.\n   * For a more accurate conversion, first use filter(GRAY)\n   * which will make the image into a \"correct\" grayscale by\n   * performing a proper luminance-based conversion.\n   *\n   * @webref pimage:method\n   * @usage web_application\n   * @brief Masks part of an image with another image as an alpha channel\n   * @param maskArray array of integers used as the alpha channel, needs to be the same length as the image's pixel array\n   */\n  public void mask(PImage img) {\n    if (recorder != null) recorder.mask(img);\n    g.mask(img);\n  }",
    "right" : "/**\n   * ( begin auto-generated from PImage_mask.xml )\n   *\n   * Masks part of an image from displaying by loading another image and\n   * using it as an alpha channel. This mask image should only contain\n   * grayscale data, but only the blue color channel is used. The mask image\n   * needs to be the same size as the image to which it is applied.<br />\n   * <br />\n   * In addition to using a mask image, an integer array containing the alpha\n   * channel data can be specified directly. This method is useful for\n   * creating dynamically generated alpha masks. This array must be of the\n   * same length as the target image's pixels array and should contain only\n   * grayscale data of values between 0-255.\n   *\n   * ( end auto-generated )\n   *\n   * <h3>Advanced</h3>\n   *\n   * Set alpha channel for an image. Black colors in the source\n   * image will make the destination image completely transparent,\n   * and white will make things fully opaque. Gray values will\n   * be in-between steps.\n   * <P>\n   * Strictly speaking the \"blue\" value from the source image is\n   * used as the alpha color. For a fully grayscale image, this\n   * is correct, but for a color image it's not 100% accurate.\n   * For a more accurate conversion, first use filter(GRAY)\n   * which will make the image into a \"correct\" grayscale by\n   * performing a proper luminance-based conversion.\n   *\n   * @webref pimage:method\n   * @usage web_application\n   * @brief Masks part of an image with another image as an alpha channel\n   * @param maskArray array of integers used as the alpha channel, needs to be the same length as the image's pixel array\n   */\n  public void mask(PImage img) {\n    if (recorder != null) recorder.mask(img);\n    g.mask(img);\n  }",
    "info" : "MethodDeclaration[486133-487867]:MethodDeclaration[486163-487897]"
  }, {
    "left" : "public kind int) : void",
    "right" : "public kind int) : void",
    "info" : "MethodDeclaration[487872-487975]:MethodDeclaration[487902-488005]"
  }, {
    "left" : "public kind int, param float) : void",
    "right" : "public kind int, param float) : void",
    "info" : "MethodDeclaration[487980-490334]:MethodDeclaration[488010-490364]"
  }, {
    "left" : "/**\n   * ( begin auto-generated from PImage_copy.xml )\n   *\n   * Copies a region of pixels from one image into another. If the source and\n   * destination regions aren't the same size, it will automatically resize\n   * source pixels to fit the specified target region. No alpha information\n   * is used in the process, however if the source image has an alpha channel\n   * set, it will be copied as well.\n   * <br /><br />\n   * As of release 0149, this function ignores <b>imageMode()</b>.\n   *\n   * ( end auto-generated )\n   *\n   * @webref image:pixels\n   * @brief Copies the entire image\n   * @usage web_application\n   * @param sx X coordinate of the source's upper left corner\n   * @param sy Y coordinate of the source's upper left corner\n   * @param sw source image width\n   * @param sh source image height\n   * @param dx X coordinate of the destination's upper left corner\n   * @param dy Y coordinate of the destination's upper left corner\n   * @param dw destination image width\n   * @param dh destination image height\n   * @see PGraphics#alpha(int)\n   * @see PImage#blend(PImage, int, int, int, int, int, int, int, int, int)\n   */\n  public void copy(int sx, int sy, int sw, int sh,\n                   int dx, int dy, int dw, int dh) {\n    if (recorder != null) recorder.copy(sx, sy, sw, sh, dx, dy, dw, dh);\n    g.copy(sx, sy, sw, sh, dx, dy, dw, dh);\n  }",
    "right" : "/**\n   * ( begin auto-generated from PImage_copy.xml )\n   *\n   * Copies a region of pixels from one image into another. If the source and\n   * destination regions aren't the same size, it will automatically resize\n   * source pixels to fit the specified target region. No alpha information\n   * is used in the process, however if the source image has an alpha channel\n   * set, it will be copied as well.\n   * <br /><br />\n   * As of release 0149, this function ignores <b>imageMode()</b>.\n   *\n   * ( end auto-generated )\n   *\n   * @webref image:pixels\n   * @brief Copies the entire image\n   * @usage web_application\n   * @param sx X coordinate of the source's upper left corner\n   * @param sy Y coordinate of the source's upper left corner\n   * @param sw source image width\n   * @param sh source image height\n   * @param dx X coordinate of the destination's upper left corner\n   * @param dy Y coordinate of the destination's upper left corner\n   * @param dw destination image width\n   * @param dh destination image height\n   * @see PGraphics#alpha(int)\n   * @see PImage#blend(PImage, int, int, int, int, int, int, int, int, int)\n   */\n  public void copy(int sx, int sy, int sw, int sh,\n                   int dx, int dy, int dw, int dh) {\n    if (recorder != null) recorder.copy(sx, sy, sw, sh, dx, dy, dw, dh);\n    g.copy(sx, sy, sw, sh, dx, dy, dw, dh);\n  }",
    "info" : "MethodDeclaration[490339-491700]:MethodDeclaration[490369-491730]"
  }, {
    "left" : "public src PImage, sx int, sy int, sw int, sh int, dx int, dy int, dw int, dh int) : void",
    "right" : "public src PImage, sx int, sy int, sw int, sh int, dx int, dy int, dw int, dh int) : void",
    "info" : "MethodDeclaration[491703-492039]:MethodDeclaration[491733-492069]"
  }, {
    "left" : "public void blend(int sx, int sy, int sw, int sh,\n                    int dx, int dy, int dw, int dh, int mode) {\n    if (recorder != null) recorder.blend(sx, sy, sw, sh, dx, dy, dw, dh, mode);\n    g.blend(sx, sy, sw, sh, dx, dy, dw, dh, mode);\n  }",
    "right" : "public void blend(int sx, int sy, int sw, int sh,\n                    int dx, int dy, int dw, int dh, int mode) {\n    if (recorder != null) recorder.blend(sx, sy, sw, sh, dx, dy, dw, dh, mode);\n    g.blend(sx, sy, sw, sh, dx, dy, dw, dh, mode);\n  }",
    "info" : "MethodDeclaration[492044-492292]:MethodDeclaration[492074-492322]"
  }, {
    "left" : "/**\n   * ( begin auto-generated from PImage_blend.xml )\n   *\n   * Blends a region of pixels into the image specified by the <b>img</b>\n   * parameter. These copies utilize full alpha channel support and a choice\n   * of the following modes to blend the colors of source pixels (A) with the\n   * ones of pixels in the destination image (B):<br />\n   * <br />\n   * BLEND - linear interpolation of colours: C = A*factor + B<br />\n   * <br />\n   * ADD - additive blending with white clip: C = min(A*factor + B, 255)<br />\n   * <br />\n   * SUBTRACT - subtractive blending with black clip: C = max(B - A*factor,\n   * 0)<br />\n   * <br />\n   * DARKEST - only the darkest colour succeeds: C = min(A*factor, B)<br />\n   * <br />\n   * LIGHTEST - only the lightest colour succeeds: C = max(A*factor, B)<br />\n   * <br />\n   * DIFFERENCE - subtract colors from underlying image.<br />\n   * <br />\n   * EXCLUSION - similar to DIFFERENCE, but less extreme.<br />\n   * <br />\n   * MULTIPLY - Multiply the colors, result will always be darker.<br />\n   * <br />\n   * SCREEN - Opposite multiply, uses inverse values of the colors.<br />\n   * <br />\n   * OVERLAY - A mix of MULTIPLY and SCREEN. Multiplies dark values,\n   * and screens light values.<br />\n   * <br />\n   * HARD_LIGHT - SCREEN when greater than 50% gray, MULTIPLY when lower.<br />\n   * <br />\n   * SOFT_LIGHT - Mix of DARKEST and LIGHTEST.\n   * Works like OVERLAY, but not as harsh.<br />\n   * <br />\n   * DODGE - Lightens light tones and increases contrast, ignores darks.\n   * Called \"Color Dodge\" in Illustrator and Photoshop.<br />\n   * <br />\n   * BURN - Darker areas are applied, increasing contrast, ignores lights.\n   * Called \"Color Burn\" in Illustrator and Photoshop.<br />\n   * <br />\n   * All modes use the alpha information (highest byte) of source image\n   * pixels as the blending factor. If the source and destination regions are\n   * different sizes, the image will be automatically resized to match the\n   * destination size. If the <b>srcImg</b> parameter is not used, the\n   * display window is used as the source image.<br />\n   * <br />\n   * As of release 0149, this function ignores <b>imageMode()</b>.\n   *\n   * ( end auto-generated )\n   *\n   * @webref image:pixels\n   * @brief  Copies a pixel or rectangle of pixels using different blending modes\n   * @param src an image variable referring to the source image\n   * @param sx X coordinate of the source's upper left corner\n   * @param sy Y coordinate of the source's upper left corner\n   * @param sw source image width\n   * @param sh source image height\n   * @param dx X coordinate of the destinations's upper left corner\n   * @param dy Y coordinate of the destinations's upper left corner\n   * @param dw destination image width\n   * @param dh destination image height\n   * @param mode Either BLEND, ADD, SUBTRACT, LIGHTEST, DARKEST, DIFFERENCE, EXCLUSION, MULTIPLY, SCREEN, OVERLAY, HARD_LIGHT, SOFT_LIGHT, DODGE, BURN\n   *\n   * @see PApplet#alpha(int)\n   * @see PImage#copy(PImage, int, int, int, int, int, int, int, int)\n   * @see PImage#blendColor(int,int,int)\n   */\n  public void blend(PImage src,\n                    int sx, int sy, int sw, int sh,\n                    int dx, int dy, int dw, int dh, int mode) {\n    if (recorder != null) recorder.blend(src, sx, sy, sw, sh, dx, dy, dw, dh, mode);\n    g.blend(src, sx, sy, sw, sh, dx, dy, dw, dh, mode);\n  }",
    "right" : "/**\n   * ( begin auto-generated from PImage_blend.xml )\n   *\n   * Blends a region of pixels into the image specified by the <b>img</b>\n   * parameter. These copies utilize full alpha channel support and a choice\n   * of the following modes to blend the colors of source pixels (A) with the\n   * ones of pixels in the destination image (B):<br />\n   * <br />\n   * BLEND - linear interpolation of colours: C = A*factor + B<br />\n   * <br />\n   * ADD - additive blending with white clip: C = min(A*factor + B, 255)<br />\n   * <br />\n   * SUBTRACT - subtractive blending with black clip: C = max(B - A*factor,\n   * 0)<br />\n   * <br />\n   * DARKEST - only the darkest colour succeeds: C = min(A*factor, B)<br />\n   * <br />\n   * LIGHTEST - only the lightest colour succeeds: C = max(A*factor, B)<br />\n   * <br />\n   * DIFFERENCE - subtract colors from underlying image.<br />\n   * <br />\n   * EXCLUSION - similar to DIFFERENCE, but less extreme.<br />\n   * <br />\n   * MULTIPLY - Multiply the colors, result will always be darker.<br />\n   * <br />\n   * SCREEN - Opposite multiply, uses inverse values of the colors.<br />\n   * <br />\n   * OVERLAY - A mix of MULTIPLY and SCREEN. Multiplies dark values,\n   * and screens light values.<br />\n   * <br />\n   * HARD_LIGHT - SCREEN when greater than 50% gray, MULTIPLY when lower.<br />\n   * <br />\n   * SOFT_LIGHT - Mix of DARKEST and LIGHTEST.\n   * Works like OVERLAY, but not as harsh.<br />\n   * <br />\n   * DODGE - Lightens light tones and increases contrast, ignores darks.\n   * Called \"Color Dodge\" in Illustrator and Photoshop.<br />\n   * <br />\n   * BURN - Darker areas are applied, increasing contrast, ignores lights.\n   * Called \"Color Burn\" in Illustrator and Photoshop.<br />\n   * <br />\n   * All modes use the alpha information (highest byte) of source image\n   * pixels as the blending factor. If the source and destination regions are\n   * different sizes, the image will be automatically resized to match the\n   * destination size. If the <b>srcImg</b> parameter is not used, the\n   * display window is used as the source image.<br />\n   * <br />\n   * As of release 0149, this function ignores <b>imageMode()</b>.\n   *\n   * ( end auto-generated )\n   *\n   * @webref image:pixels\n   * @brief  Copies a pixel or rectangle of pixels using different blending modes\n   * @param src an image variable referring to the source image\n   * @param sx X coordinate of the source's upper left corner\n   * @param sy Y coordinate of the source's upper left corner\n   * @param sw source image width\n   * @param sh source image height\n   * @param dx X coordinate of the destinations's upper left corner\n   * @param dy Y coordinate of the destinations's upper left corner\n   * @param dw destination image width\n   * @param dh destination image height\n   * @param mode Either BLEND, ADD, SUBTRACT, LIGHTEST, DARKEST, DIFFERENCE, EXCLUSION, MULTIPLY, SCREEN, OVERLAY, HARD_LIGHT, SOFT_LIGHT, DODGE, BURN\n   *\n   * @see PApplet#alpha(int)\n   * @see PImage#copy(PImage, int, int, int, int, int, int, int, int)\n   * @see PImage#blendColor(int,int,int)\n   */\n  public void blend(PImage src,\n                    int sx, int sy, int sw, int sh,\n                    int dx, int dy, int dw, int dh, int mode) {\n    if (recorder != null) recorder.blend(src, sx, sy, sw, sh, dx, dy, dw, dh, mode);\n    g.blend(src, sx, sy, sw, sh, dx, dy, dw, dh, mode);\n  }",
    "info" : "MethodDeclaration[492297-495684]:MethodDeclaration[492327-495714]"
  } ],
  "mappings" : [
 {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[3889-3895]:Modifier[3889-3895]"
  }, {
    "left" : "PConstants",
    "right" : "PConstants",
    "info" : "SimpleType[3921-3931]:SimpleType[3921-3931]"
  }, {
    "left" : "static {\n    String osname = System.getProperty(\"os.name\");\n\n    if (osname.indexOf(\"Mac\") != -1) {\n      platform = MACOSX;\n\n    } else if (osname.indexOf(\"Windows\") != -1) {\n      platform = WINDOWS;\n\n    } else if (osname.equals(\"Linux\")) {  // true for the ibm vm\n      platform = LINUX;\n\n    } else {\n      platform = OTHER;\n    }\n  }",
    "right" : "static {\n    String osname = System.getProperty(\"os.name\");\n\n    if (osname.indexOf(\"Mac\") != -1) {\n      platform = MACOSX;\n\n    } else if (osname.indexOf(\"Windows\") != -1) {\n      platform = WINDOWS;\n\n    } else if (osname.equals(\"Linux\")) {  // true for the ibm vm\n      platform = LINUX;\n\n    } else {\n      platform = OTHER;\n    }\n  }",
    "info" : "Initializer[5989-6328]:Initializer[5989-6328]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5996-6328]:Block[5996-6328]"
  }, {
    "left" : "String osname = System.getProperty(\"os.name\");",
    "right" : "String osname = System.getProperty(\"os.name\");",
    "info" : "VariableDeclarationStatement[6002-6048]:VariableDeclarationStatement[6002-6048]"
  }, {
    "left" : "if (osname.indexOf(\"Mac\") != -1)",
    "right" : "if (osname.indexOf(\"Mac\") != -1)",
    "info" : "IfStatement[6054-6324]:IfStatement[6054-6324]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6087-6120]:Block[6087-6120]"
  }, {
    "left" : "platform = MACOSX;",
    "right" : "platform = MACOSX;",
    "info" : "ExpressionStatement[6095-6113]:ExpressionStatement[6095-6113]"
  }, {
    "left" : "if (osname.indexOf(\"Windows\") != -1)",
    "right" : "if (osname.indexOf(\"Windows\") != -1)",
    "info" : "IfStatement[6126-6324]:IfStatement[6126-6324]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6163-6197]:Block[6163-6197]"
  }, {
    "left" : "platform = WINDOWS;",
    "right" : "platform = WINDOWS;",
    "info" : "ExpressionStatement[6171-6190]:ExpressionStatement[6171-6190]"
  }, {
    "left" : "if (osname.equals(\"Linux\"))",
    "right" : "if (osname.equals(\"Linux\"))",
    "info" : "IfStatement[6203-6324]:IfStatement[6203-6324]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6231-6287]:Block[6231-6287]"
  }, {
    "left" : "platform = LINUX;",
    "right" : "platform = LINUX;",
    "info" : "ExpressionStatement[6263-6280]:ExpressionStatement[6263-6280]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6293-6324]:Block[6293-6324]"
  }, {
    "left" : "platform = OTHER;",
    "right" : "platform = OTHER;",
    "info" : "ExpressionStatement[6301-6318]:ExpressionStatement[6301-6318]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[27592-27598]:Modifier[27592-27598]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[27599-27603]:PrimitiveType[27599-27603]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[27611-29233]:Block[27611-29233]"
  }, {
    "left" : "defaultSize = true;",
    "right" : "defaultSize = true;",
    "info" : "ExpressionStatement[27898-27917]:ExpressionStatement[27898-27917]"
  }, {
    "left" : "finished = false;",
    "right" : "finished = false;",
    "info" : "ExpressionStatement[27922-27939]:ExpressionStatement[27922-27939]"
  }, {
    "left" : "looping = true;",
    "right" : "looping = true;",
    "info" : "ExpressionStatement[28027-28042]:ExpressionStatement[28027-28042]"
  }, {
    "left" : "redraw = true;",
    "right" : "redraw = true;",
    "info" : "ExpressionStatement[28047-28061]:ExpressionStatement[28047-28061]"
  }, {
    "left" : "firstMouse = true;",
    "right" : "firstMouse = true;",
    "info" : "ExpressionStatement[28098-28116]:ExpressionStatement[28098-28116]"
  }, {
    "left" : "surface.startThread();",
    "right" : "surface.startThread();",
    "info" : "ExpressionStatement[29207-29229]:ExpressionStatement[29207-29229]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[30178-30185]:PrimitiveType[30178-30185]"
  }, {
    "left" : "String method",
    "right" : "String method",
    "info" : "SingleVariableDeclaration[30201-30214]:SingleVariableDeclaration[30201-30214]"
  }, {
    "left" : "Object... args",
    "right" : "Object... args",
    "info" : "SingleVariableDeclaration[30216-30230]:SingleVariableDeclaration[30216-30230]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[30232-30950]:Block[30232-30950]"
  }, {
    "left" : "if (insideSettings)",
    "right" : "if (insideSettings)",
    "info" : "IfStatement[30238-30284]:IfStatement[30238-30284]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[30258-30284]:Block[30258-30284]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[30266-30278]:ReturnStatement[30266-30278]"
  }, {
    "left" : "final String url = \"https://processing.org/reference/\" + method + \"_.html\";",
    "right" : "final String url = \"https://processing.org/reference/\" + method + \"_.html\";",
    "info" : "VariableDeclarationStatement[30289-30364]:VariableDeclarationStatement[30289-30364]"
  }, {
    "left" : "if (!external)",
    "right" : "if (!external)",
    "info" : "IfStatement[30369-30862]:IfStatement[30369-30862]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[30384-30862]:Block[30384-30862]"
  }, {
    "left" : "StringList argList = new StringList(args);",
    "right" : "StringList argList = new StringList(args);",
    "info" : "VariableDeclarationStatement[30447-30489]:VariableDeclarationStatement[30447-30489]"
  }, {
    "left" : "System.err.println(\"When not using the PDE, \" + method + \"() can only be used inside settings().\");",
    "right" : "System.err.println(\"When not using the PDE, \" + method + \"() can only be used inside settings().\");",
    "info" : "ExpressionStatement[30496-30595]:ExpressionStatement[30496-30595]"
  }, {
    "left" : "System.err.println(\"Remove the \" + method + \"() method from setup(), and add the following:\");",
    "right" : "System.err.println(\"Remove the \" + method + \"() method from setup(), and add the following:\");",
    "info" : "ExpressionStatement[30602-30696]:ExpressionStatement[30602-30696]"
  }, {
    "left" : "System.err.println(\"public void settings() {\");",
    "right" : "System.err.println(\"public void settings() {\");",
    "info" : "ExpressionStatement[30703-30750]:ExpressionStatement[30703-30750]"
  }, {
    "left" : "System.err.println(\"  \" + method + \"(\" + argList.join(\", \") + \");\");",
    "right" : "System.err.println(\"  \" + method + \"(\" + argList.join(\", \") + \");\");",
    "info" : "ExpressionStatement[30757-30825]:ExpressionStatement[30757-30825]"
  }, {
    "left" : "System.err.println(\"}\");",
    "right" : "System.err.println(\"}\");",
    "info" : "ExpressionStatement[30832-30856]:ExpressionStatement[30832-30856]"
  }, {
    "left" : "throw new IllegalStateException(method + \"() cannot be used here, see \" + url);",
    "right" : "throw new IllegalStateException(method + \"() cannot be used here, see \" + url);",
    "info" : "ThrowStatement[30867-30946]:ThrowStatement[30867-30946]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[30955-30959]:PrimitiveType[30955-30959]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[30977-33977]:Block[30977-33977]"
  }, {
    "left" : "insideSettings = true;",
    "right" : "insideSettings = true;",
    "info" : "ExpressionStatement[30983-31005]:ExpressionStatement[30983-31005]"
  }, {
    "left" : "GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();",
    "right" : "GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();",
    "info" : "VariableDeclarationStatement[31413-31488]:VariableDeclarationStatement[31413-31488]"
  }, {
    "left" : "GraphicsDevice device = ge.getDefaultScreenDevice();",
    "right" : "GraphicsDevice device = ge.getDefaultScreenDevice();",
    "info" : "VariableDeclarationStatement[31493-31545]:VariableDeclarationStatement[31493-31545]"
  }, {
    "left" : "displayDevices = ge.getScreenDevices();",
    "right" : "displayDevices = ge.getScreenDevices();",
    "info" : "ExpressionStatement[31550-31589]:ExpressionStatement[31550-31589]"
  }, {
    "left" : "if (display > 0 && display <= displayDevices.length)",
    "right" : "if (display > 0 && display <= displayDevices.length)",
    "info" : "IfStatement[31753-31855]:IfStatement[31753-31855]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[31806-31855]:Block[31806-31855]"
  }, {
    "left" : "device = displayDevices[display-1];",
    "right" : "device = displayDevices[display-1];",
    "info" : "ExpressionStatement[31814-31849]:ExpressionStatement[31814-31849]"
  }, {
    "left" : "DisplayMode displayMode = device.getDisplayMode();",
    "right" : "DisplayMode displayMode = device.getDisplayMode();",
    "info" : "VariableDeclarationStatement[31932-31982]:VariableDeclarationStatement[31932-31982]"
  }, {
    "left" : "displayWidth = displayMode.getWidth();",
    "right" : "displayWidth = displayMode.getWidth();",
    "info" : "ExpressionStatement[31987-32025]:ExpressionStatement[31987-32025]"
  }, {
    "left" : "displayHeight = displayMode.getHeight();",
    "right" : "displayHeight = displayMode.getHeight();",
    "info" : "ExpressionStatement[32030-32070]:ExpressionStatement[32030-32070]"
  }, {
    "left" : "settings();",
    "right" : "settings();",
    "info" : "ExpressionStatement[32228-32239]:ExpressionStatement[32228-32239]"
  }, {
    "left" : "if (display == SPAN && platform == MACOSX)",
    "right" : "if (display == SPAN && platform == MACOSX)",
    "info" : "IfStatement[32245-33944]:IfStatement[32245-33944]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[32288-33944]:Block[32288-33944]"
  }, {
    "left" : "Process p = exec(\"defaults\", \"read\", \"com.apple.spaces\", \"spans-displays\");",
    "right" : "Process p = exec(\"defaults\", \"read\", \"com.apple.spaces\", \"spans-displays\");",
    "info" : "VariableDeclarationStatement[32409-32484]:VariableDeclarationStatement[32409-32484]"
  }, {
    "left" : "BufferedReader outReader = createReader(p.getInputStream());",
    "right" : "BufferedReader outReader = createReader(p.getInputStream());",
    "info" : "VariableDeclarationStatement[32491-32551]:VariableDeclarationStatement[32491-32551]"
  }, {
    "left" : "BufferedReader errReader = createReader(p.getErrorStream());",
    "right" : "BufferedReader errReader = createReader(p.getErrorStream());",
    "info" : "VariableDeclarationStatement[32558-32618]:VariableDeclarationStatement[32558-32618]"
  }, {
    "left" : "StringBuilder stdout = new StringBuilder();",
    "right" : "StringBuilder stdout = new StringBuilder();",
    "info" : "VariableDeclarationStatement[32625-32668]:VariableDeclarationStatement[32625-32668]"
  }, {
    "left" : "StringBuilder stderr = new StringBuilder();",
    "right" : "StringBuilder stderr = new StringBuilder();",
    "info" : "VariableDeclarationStatement[32675-32718]:VariableDeclarationStatement[32675-32718]"
  }, {
    "left" : "String line = null;",
    "right" : "String line = null;",
    "info" : "VariableDeclarationStatement[32725-32744]:VariableDeclarationStatement[32725-32744]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[32751-33019]:TryStatement[32751-33019]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[32755-32958]:Block[32755-32958]"
  }, {
    "left" : "while ((line = outReader.readLine()) != null)",
    "right" : "while ((line = outReader.readLine()) != null)",
    "info" : "WhileStatement[32765-32853]:WhileStatement[32765-32853]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[32811-32853]:Block[32811-32853]"
  }, {
    "left" : "stdout.append(line);",
    "right" : "stdout.append(line);",
    "info" : "ExpressionStatement[32823-32843]:ExpressionStatement[32823-32843]"
  }, {
    "left" : "while ((line = errReader.readLine()) != null)",
    "right" : "while ((line = errReader.readLine()) != null)",
    "info" : "WhileStatement[32862-32950]:WhileStatement[32862-32950]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[32908-32950]:Block[32908-32950]"
  }, {
    "left" : "stderr.append(line);",
    "right" : "stderr.append(line);",
    "info" : "ExpressionStatement[32920-32940]:ExpressionStatement[32920-32940]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[32981-33019]:Block[32981-33019]"
  }, {
    "left" : "e.printStackTrace();",
    "right" : "e.printStackTrace();",
    "info" : "ExpressionStatement[32991-33011]:ExpressionStatement[32991-33011]"
  }, {
    "left" : "int resultCode = -1;",
    "right" : "int resultCode = -1;",
    "info" : "VariableDeclarationStatement[33027-33047]:VariableDeclarationStatement[33027-33047]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[33054-33136]:TryStatement[33054-33136]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[33058-33101]:Block[33058-33101]"
  }, {
    "left" : "resultCode = p.waitFor();",
    "right" : "resultCode = p.waitFor();",
    "info" : "ExpressionStatement[33068-33093]:ExpressionStatement[33068-33093]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[33133-33136]:Block[33133-33136]"
  }, {
    "left" : "String result = trim(stdout.toString());",
    "right" : "String result = trim(stdout.toString());",
    "info" : "VariableDeclarationStatement[33144-33184]:VariableDeclarationStatement[33144-33184]"
  }, {
    "left" : "if (\"0\".equals(result))",
    "right" : "if (\"0\".equals(result))",
    "info" : "IfStatement[33191-33938]:IfStatement[33191-33938]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[33215-33693]:Block[33215-33693]"
  }, {
    "left" : "EventQueue.invokeLater(new Runnable() {\n          public void run() {\n            final String msg =\n              \"To use fullScreen(SPAN), first turn off “Displays have separate spaces”\\n\" +\n              \"in System Preferences \\u2192 Mission Control. Then log out and log back in.\";\n            JOptionPane.showMessageDialog(null, msg, \"Apple's Defaults Stink\",\n                                          JOptionPane.WARNING_MESSAGE);\n          }\n        });",
    "right" : "EventQueue.invokeLater(new Runnable() {\n          public void run() {\n            final String msg =\n              \"To use fullScreen(SPAN), first turn off “Displays have separate spaces”\\n\" +\n              \"in System Preferences \\u2192 Mission Control. Then log out and log back in.\";\n            JOptionPane.showMessageDialog(null, msg, \"Apple's Defaults Stink\",\n                                          JOptionPane.WARNING_MESSAGE);\n          }\n        });",
    "info" : "ExpressionStatement[33225-33685]:ExpressionStatement[33225-33685]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[33275-33281]:Modifier[33275-33281]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[33282-33286]:PrimitiveType[33282-33286]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[33293-33673]:Block[33293-33673]"
  }, {
    "left" : "final String msg =\n              \"To use fullScreen(SPAN), first turn off “Displays have separate spaces”\\n\" +\n              \"in System Preferences \\u2192 Mission Control. Then log out and log back in.\";",
    "right" : "final String msg =\n              \"To use fullScreen(SPAN), first turn off “Displays have separate spaces”\\n\" +\n              \"in System Preferences \\u2192 Mission Control. Then log out and log back in.\";",
    "info" : "VariableDeclarationStatement[33307-33510]:VariableDeclarationStatement[33307-33510]"
  }, {
    "left" : "JOptionPane.showMessageDialog(null, msg, \"Apple's Defaults Stink\",\n                                          JOptionPane.WARNING_MESSAGE);",
    "right" : "JOptionPane.showMessageDialog(null, msg, \"Apple's Defaults Stink\",\n                                          JOptionPane.WARNING_MESSAGE);",
    "info" : "ExpressionStatement[33523-33661]:ExpressionStatement[33523-33661]"
  }, {
    "left" : "if (!result.equals(\"1\"))",
    "right" : "if (!result.equals(\"1\"))",
    "info" : "IfStatement[33699-33938]:IfStatement[33699-33938]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[33724-33938]:Block[33724-33938]"
  }, {
    "left" : "System.err.println(\"Could not check the status of “Displays have separate spaces.”\");",
    "right" : "System.err.println(\"Could not check the status of “Displays have separate spaces.”\");",
    "info" : "ExpressionStatement[33734-33819]:ExpressionStatement[33734-33819]"
  }, {
    "left" : "System.err.format(\"Received message '%s' and result code %d.%n\", trim(stderr.toString()), resultCode);",
    "right" : "System.err.format(\"Received message '%s' and result code %d.%n\", trim(stderr.toString()), resultCode);",
    "info" : "ExpressionStatement[33828-33930]:ExpressionStatement[33828-33930]"
  }, {
    "left" : "insideSettings = false;",
    "right" : "insideSettings = false;",
    "info" : "ExpressionStatement[33950-33973]:ExpressionStatement[33950-33973]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[34303-34309]:Modifier[34303-34309]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[34310-34314]:PrimitiveType[34310-34314]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[34326-34444]:Block[34326-34444]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[34449-34454]:Modifier[34449-34454]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[34455-34461]:Modifier[34455-34461]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[34462-34465]:PrimitiveType[34462-34465]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[34480-34503]:Block[34480-34503]"
  }, {
    "left" : "return width;",
    "right" : "return width;",
    "info" : "ReturnStatement[34486-34499]:ReturnStatement[34486-34499]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[34508-34513]:Modifier[34508-34513]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[34514-34520]:Modifier[34514-34520]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[34521-34524]:PrimitiveType[34521-34524]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[34540-34564]:Block[34540-34564]"
  }, {
    "left" : "return height;",
    "right" : "return height;",
    "info" : "ReturnStatement[34546-34560]:ReturnStatement[34546-34560]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[34569-34574]:Modifier[34569-34574]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[34575-34581]:Modifier[34575-34581]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[34582-34588]:SimpleType[34582-34588]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[34606-34632]:Block[34606-34632]"
  }, {
    "left" : "return renderer;",
    "right" : "return renderer;",
    "info" : "ReturnStatement[34612-34628]:ReturnStatement[34612-34628]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[35316-35321]:Modifier[35316-35321]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[35322-35328]:Modifier[35322-35328]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[35329-35332]:PrimitiveType[35329-35332]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[35348-35372]:Block[35348-35372]"
  }, {
    "left" : "return smooth;",
    "right" : "return smooth;",
    "info" : "ReturnStatement[35354-35368]:ReturnStatement[35354-35368]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[35377-35382]:Modifier[35377-35382]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[35383-35389]:Modifier[35383-35389]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[35390-35397]:PrimitiveType[35390-35397]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[35417-35465]:Block[35417-35465]"
  }, {
    "left" : "return fullScreen;",
    "right" : "return fullScreen;",
    "info" : "ReturnStatement[35443-35461]:ReturnStatement[35443-35461]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[35868-35873]:Modifier[35868-35873]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[35874-35880]:Modifier[35874-35880]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[35881-35884]:PrimitiveType[35881-35884]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[35901-35926]:Block[35901-35926]"
  }, {
    "left" : "return display;",
    "right" : "return display;",
    "info" : "ReturnStatement[35907-35922]:ReturnStatement[35907-35922]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[35931-35936]:Modifier[35931-35936]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[35937-35943]:Modifier[35937-35943]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[35944-35950]:SimpleType[35944-35950]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[35970-36017]:Block[35970-36017]"
  }, {
    "left" : "return outputPath;",
    "right" : "return outputPath;",
    "info" : "ReturnStatement[35995-36013]:ReturnStatement[35995-36013]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[36022-36027]:Modifier[36022-36027]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[36028-36034]:Modifier[36028-36034]"
  }, {
    "left" : "OutputStream",
    "right" : "OutputStream",
    "info" : "SimpleType[36035-36047]:SimpleType[36035-36047]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[36069-36118]:Block[36069-36118]"
  }, {
    "left" : "return outputStream;",
    "right" : "return outputStream;",
    "info" : "ReturnStatement[36094-36114]:ReturnStatement[36094-36114]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[36123-36128]:Modifier[36123-36128]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[36129-36135]:Modifier[36129-36135]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[36136-36139]:PrimitiveType[36136-36139]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[36160-36189]:Block[36160-36189]"
  }, {
    "left" : "return windowColor;",
    "right" : "return windowColor;",
    "info" : "ReturnStatement[36166-36185]:ReturnStatement[36166-36185]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[36194-36199]:Modifier[36194-36199]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[36200-36206]:Modifier[36200-36206]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[36207-36210]:PrimitiveType[36207-36210]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[36232-36262]:Block[36232-36262]"
  }, {
    "left" : "return pixelDensity;",
    "right" : "return pixelDensity;",
    "info" : "ReturnStatement[36238-36258]:ReturnStatement[36238-36258]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[36348-36354]:Modifier[36348-36354]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[36355-36358]:PrimitiveType[36355-36358]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[36376-36664]:Block[36376-36664]"
  }, {
    "left" : "if (display == SPAN)",
    "right" : "if (display == SPAN)",
    "info" : "IfStatement[36382-36624]:IfStatement[36382-36624]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[36403-36624]:Block[36403-36624]"
  }, {
    "left" : "for (int i = 0; i < displayDevices.length; i++)",
    "right" : "for (int i = 0; i < displayDevices.length; i++)",
    "info" : "ForStatement[36477-36602]:ForStatement[36477-36602]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[36525-36602]:Block[36525-36602]"
  }, {
    "left" : "if (displayDensity(i) != 2)",
    "right" : "if (displayDensity(i) != 2)",
    "info" : "IfStatement[36535-36594]:IfStatement[36535-36594]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[36563-36594]:Block[36563-36594]"
  }, {
    "left" : "return 1;",
    "right" : "return 1;",
    "info" : "ReturnStatement[36575-36584]:ReturnStatement[36575-36584]"
  }, {
    "left" : "return 2;",
    "right" : "return 2;",
    "info" : "ReturnStatement[36609-36618]:ReturnStatement[36609-36618]"
  }, {
    "left" : "return displayDensity(display);",
    "right" : "return displayDensity(display);",
    "info" : "ReturnStatement[36629-36660]:ReturnStatement[36629-36660]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[36669-36675]:Modifier[36669-36675]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[36676-36682]:Modifier[36676-36682]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[36683-36686]:PrimitiveType[36683-36686]"
  }, {
    "left" : "int display",
    "right" : "int display",
    "info" : "SingleVariableDeclaration[36702-36713]:SingleVariableDeclaration[36702-36713]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[36715-38476]:Block[36715-38476]"
  }, {
    "left" : "if (PApplet.platform == PConstants.MACOSX)",
    "right" : "if (PApplet.platform == PConstants.MACOSX)",
    "info" : "IfStatement[36721-38458]:IfStatement[36721-38458]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[36764-38458]:Block[36764-38458]"
  }, {
    "left" : "final String javaVendor = System.getProperty(\"java.vendor\");",
    "right" : "final String javaVendor = System.getProperty(\"java.vendor\");",
    "info" : "VariableDeclarationStatement[36999-37059]:VariableDeclarationStatement[36999-37059]"
  }, {
    "left" : "if (javaVendor.contains(\"Oracle\"))",
    "right" : "if (javaVendor.contains(\"Oracle\"))",
    "info" : "IfStatement[37066-38452]:IfStatement[37066-38452]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[37101-38452]:Block[37101-38452]"
  }, {
    "left" : "GraphicsDevice device;",
    "right" : "GraphicsDevice device;",
    "info" : "VariableDeclarationStatement[37111-37133]:VariableDeclarationStatement[37111-37133]"
  }, {
    "left" : "GraphicsEnvironment env = GraphicsEnvironment.getLocalGraphicsEnvironment();",
    "right" : "GraphicsEnvironment env = GraphicsEnvironment.getLocalGraphicsEnvironment();",
    "info" : "VariableDeclarationStatement[37142-37218]:VariableDeclarationStatement[37142-37218]"
  }, {
    "left" : "if (display == -1)",
    "right" : "if (display == -1)",
    "info" : "IfStatement[37228-38074]:IfStatement[37228-38074]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[37247-37308]:Block[37247-37308]"
  }, {
    "left" : "device = env.getDefaultScreenDevice();",
    "right" : "device = env.getDefaultScreenDevice();",
    "info" : "ExpressionStatement[37259-37297]:ExpressionStatement[37259-37297]"
  }, {
    "left" : "if (display == SPAN)",
    "right" : "if (display == SPAN)",
    "info" : "IfStatement[37314-38074]:IfStatement[37314-38074]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[37335-37446]:Block[37335-37446]"
  }, {
    "left" : "throw new RuntimeException(\"displayDensity() only works with specific display numbers\");",
    "right" : "throw new RuntimeException(\"displayDensity() only works with specific display numbers\");",
    "info" : "ThrowStatement[37347-37435]:ThrowStatement[37347-37435]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[37452-38074]:Block[37452-38074]"
  }, {
    "left" : "GraphicsDevice[] devices = env.getScreenDevices();",
    "right" : "GraphicsDevice[] devices = env.getScreenDevices();",
    "info" : "VariableDeclarationStatement[37464-37514]:VariableDeclarationStatement[37464-37514]"
  }, {
    "left" : "if (display > 0 && display <= devices.length)",
    "right" : "if (display > 0 && display <= devices.length)",
    "info" : "IfStatement[37525-38064]:IfStatement[37525-38064]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[37571-37627]:Block[37571-37627]"
  }, {
    "left" : "device = devices[display - 1];",
    "right" : "device = devices[display - 1];",
    "info" : "ExpressionStatement[37585-37615]:ExpressionStatement[37585-37615]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[37633-38064]:Block[37633-38064]"
  }, {
    "left" : "if (devices.length == 1)",
    "right" : "if (devices.length == 1)",
    "info" : "IfStatement[37647-37969]:IfStatement[37647-37969]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[37672-37784]:Block[37672-37784]"
  }, {
    "left" : "System.err.println(\"Only one display is currently known, use displayDensity(1).\");",
    "right" : "System.err.println(\"Only one display is currently known, use displayDensity(1).\");",
    "info" : "ExpressionStatement[37688-37770]:ExpressionStatement[37688-37770]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[37790-37969]:Block[37790-37969]"
  }, {
    "left" : "System.err.format(\"Your displays are numbered %d through %d, \" +\n                \"pass one of those numbers to displayDensity()\", 1, devices.length);",
    "right" : "System.err.format(\"Your displays are numbered %d through %d, \" +\n                \"pass one of those numbers to displayDensity()\", 1, devices.length);",
    "info" : "ExpressionStatement[37806-37955]:ExpressionStatement[37806-37955]"
  }, {
    "left" : "throw new RuntimeException(\"Display \" + display + \" does not exist.\");",
    "right" : "throw new RuntimeException(\"Display \" + display + \" does not exist.\");",
    "info" : "ThrowStatement[37982-38052]:ThrowStatement[37982-38052]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[38084-38444]:TryStatement[38084-38444]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[38088-38415]:Block[38088-38415]"
  }, {
    "left" : "Field field = device.getClass().getDeclaredField(\"scale\");",
    "right" : "Field field = device.getClass().getDeclaredField(\"scale\");",
    "info" : "VariableDeclarationStatement[38100-38158]:VariableDeclarationStatement[38100-38158]"
  }, {
    "left" : "if (field != null)",
    "right" : "if (field != null)",
    "info" : "IfStatement[38169-38405]:IfStatement[38169-38405]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[38188-38405]:Block[38188-38405]"
  }, {
    "left" : "field.setAccessible(true);",
    "right" : "field.setAccessible(true);",
    "info" : "ExpressionStatement[38202-38228]:ExpressionStatement[38202-38228]"
  }, {
    "left" : "Object scale = field.get(device);",
    "right" : "Object scale = field.get(device);",
    "info" : "VariableDeclarationStatement[38241-38274]:VariableDeclarationStatement[38241-38274]"
  }, {
    "left" : "if (scale instanceof Integer && ((Integer)scale).intValue() == 2)",
    "right" : "if (scale instanceof Integer && ((Integer)scale).intValue() == 2)",
    "info" : "IfStatement[38288-38393]:IfStatement[38288-38393]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[38354-38393]:Block[38354-38393]"
  }, {
    "left" : "return 2;",
    "right" : "return 2;",
    "info" : "ReturnStatement[38370-38379]:ReturnStatement[38370-38379]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[38441-38444]:Block[38441-38444]"
  }, {
    "left" : "return 1;",
    "right" : "return 1;",
    "info" : "ReturnStatement[38463-38472]:ReturnStatement[38463-38472]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[38545-38551]:Modifier[38545-38551]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[38552-38556]:PrimitiveType[38552-38556]"
  }, {
    "left" : "int density",
    "right" : "int density",
    "info" : "SingleVariableDeclaration[38570-38581]:SingleVariableDeclaration[38570-38581]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[38583-39106]:Block[38583-39106]"
  }, {
    "left" : "if (density != this.pixelDensity)",
    "right" : "if (density != this.pixelDensity)",
    "info" : "IfStatement[38589-39102]:IfStatement[38589-39102]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[38623-39102]:Block[38623-39102]"
  }, {
    "left" : "if (insideSettings(\"pixelDensity\", density))",
    "right" : "if (insideSettings(\"pixelDensity\", density))",
    "info" : "IfStatement[38631-39096]:IfStatement[38631-39096]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[38676-39096]:Block[38676-39096]"
  }, {
    "left" : "if (density != 1 && density != 2)",
    "right" : "if (density != 1 && density != 2)",
    "info" : "IfStatement[38686-38806]:IfStatement[38686-38806]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[38720-38806]:Block[38720-38806]"
  }, {
    "left" : "throw new RuntimeException(\"pixelDensity() can only be 1 or 2\");",
    "right" : "throw new RuntimeException(\"pixelDensity() can only be 1 or 2\");",
    "info" : "ThrowStatement[38732-38796]:ThrowStatement[38732-38796]"
  }, {
    "left" : "if (density == 2 && displayDensity() == 1)",
    "right" : "if (density == 2 && displayDensity() == 1)",
    "info" : "IfStatement[38815-39088]:IfStatement[38815-39088]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[38858-39032]:Block[38858-39032]"
  }, {
    "left" : "throw new RuntimeException(\"pixelDensity(2) is not available for this display\");",
    "right" : "throw new RuntimeException(\"pixelDensity(2) is not available for this display\");",
    "info" : "ThrowStatement[38942-39022]:ThrowStatement[38942-39022]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[39038-39088]:Block[39038-39088]"
  }, {
    "left" : "this.pixelDensity = density;",
    "right" : "this.pixelDensity = density;",
    "info" : "ExpressionStatement[39050-39078]:ExpressionStatement[39050-39078]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[39252-39258]:Modifier[39252-39258]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[39259-39263]:PrimitiveType[39259-39263]"
  }, {
    "left" : "int width",
    "right" : "int width",
    "info" : "SingleVariableDeclaration[39272-39281]:SingleVariableDeclaration[39272-39281]"
  }, {
    "left" : "int height",
    "right" : "int height",
    "info" : "SingleVariableDeclaration[39283-39293]:SingleVariableDeclaration[39283-39293]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[39295-39430]:Block[39295-39430]"
  }, {
    "left" : "this.width = width;",
    "right" : "this.width = width;",
    "info" : "ExpressionStatement[39301-39320]:ExpressionStatement[39301-39320]"
  }, {
    "left" : "this.height = height;",
    "right" : "this.height = height;",
    "info" : "ExpressionStatement[39325-39346]:ExpressionStatement[39325-39346]"
  }, {
    "left" : "pixelWidth = width * pixelDensity;",
    "right" : "pixelWidth = width * pixelDensity;",
    "info" : "ExpressionStatement[39351-39385]:ExpressionStatement[39351-39385]"
  }, {
    "left" : "pixelHeight = height * pixelDensity;",
    "right" : "pixelHeight = height * pixelDensity;",
    "info" : "ExpressionStatement[39390-39426]:ExpressionStatement[39390-39426]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[39543-39549]:Modifier[39543-39549]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[39550-39554]:PrimitiveType[39550-39554]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[39564-39584]:Block[39564-39584]"
  }, {
    "left" : "smooth(1);",
    "right" : "smooth(1);",
    "info" : "ExpressionStatement[39570-39580]:ExpressionStatement[39570-39580]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[39690-39696]:Modifier[39690-39696]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[39697-39701]:PrimitiveType[39697-39701]"
  }, {
    "left" : "int level",
    "right" : "int level",
    "info" : "SingleVariableDeclaration[39709-39718]:SingleVariableDeclaration[39709-39718]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[39720-39855]:Block[39720-39855]"
  }, {
    "left" : "if (insideSettings)",
    "right" : "if (insideSettings)",
    "info" : "IfStatement[39726-39851]:IfStatement[39726-39851]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[39746-39781]:Block[39746-39781]"
  }, {
    "left" : "this.smooth = level;",
    "right" : "this.smooth = level;",
    "info" : "ExpressionStatement[39754-39774]:ExpressionStatement[39754-39774]"
  }, {
    "left" : "if (this.smooth != level)",
    "right" : "if (this.smooth != level)",
    "info" : "IfStatement[39787-39851]:IfStatement[39787-39851]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[39813-39851]:Block[39813-39851]"
  }, {
    "left" : "smoothWarning(\"smooth\");",
    "right" : "smoothWarning(\"smooth\");",
    "info" : "ExpressionStatement[39821-39845]:ExpressionStatement[39821-39845]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[39896-39902]:Modifier[39896-39902]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[39903-39907]:PrimitiveType[39903-39907]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[39919-40048]:Block[39919-40048]"
  }, {
    "left" : "if (insideSettings)",
    "right" : "if (insideSettings)",
    "info" : "IfStatement[39925-40044]:IfStatement[39925-40044]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[39945-39976]:Block[39945-39976]"
  }, {
    "left" : "this.smooth = 0;",
    "right" : "this.smooth = 0;",
    "info" : "ExpressionStatement[39953-39969]:ExpressionStatement[39953-39969]"
  }, {
    "left" : "if (this.smooth != 0)",
    "right" : "if (this.smooth != 0)",
    "info" : "IfStatement[39982-40044]:IfStatement[39982-40044]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[40004-40044]:Block[40004-40044]"
  }, {
    "left" : "smoothWarning(\"noSmooth\");",
    "right" : "smoothWarning(\"noSmooth\");",
    "info" : "ExpressionStatement[40012-40038]:ExpressionStatement[40012-40038]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[40053-40060]:Modifier[40053-40060]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[40061-40065]:PrimitiveType[40061-40065]"
  }, {
    "left" : "String method",
    "right" : "String method",
    "info" : "SingleVariableDeclaration[40080-40093]:SingleVariableDeclaration[40080-40093]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[40095-40309]:Block[40095-40309]"
  }, {
    "left" : "final String where = external ? \"setup\" : \"settings\";",
    "right" : "final String where = external ? \"setup\" : \"settings\";",
    "info" : "VariableDeclarationStatement[40173-40226]:VariableDeclarationStatement[40173-40226]"
  }, {
    "left" : "PGraphics.showWarning(\"%s() can only be used inside %s()\", method, where);",
    "right" : "PGraphics.showWarning(\"%s() can only be used inside %s()\", method, where);",
    "info" : "ExpressionStatement[40231-40305]:ExpressionStatement[40231-40305]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[40395-40401]:Modifier[40395-40401]"
  }, {
    "left" : "PGraphics",
    "right" : "PGraphics",
    "info" : "SimpleType[40402-40411]:SimpleType[40402-40411]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[40426-40445]:Block[40426-40445]"
  }, {
    "left" : "return g;",
    "right" : "return g;",
    "info" : "ReturnStatement[40432-40441]:ReturnStatement[40432-40441]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[40528-40534]:Modifier[40528-40534]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[40535-40539]:PrimitiveType[40535-40539]"
  }, {
    "left" : "int which",
    "right" : "int which",
    "info" : "SingleVariableDeclaration[40552-40561]:SingleVariableDeclaration[40552-40561]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[40563-40615]:Block[40563-40615]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[40988-40994]:Modifier[40988-40994]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[40995-40999]:PrimitiveType[40995-40999]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[41008-41183]:Block[41008-41183]"
  }, {
    "left" : "resume();",
    "right" : "resume();",
    "info" : "ExpressionStatement[41113-41122]:ExpressionStatement[41113-41122]"
  }, {
    "left" : "handleMethods(\"resume\");",
    "right" : "handleMethods(\"resume\");",
    "info" : "ExpressionStatement[41127-41151]:ExpressionStatement[41127-41151]"
  }, {
    "left" : "surface.resumeThread();",
    "right" : "surface.resumeThread();",
    "info" : "ExpressionStatement[41156-41179]:ExpressionStatement[41156-41179]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[41508-41514]:Modifier[41508-41514]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[41515-41519]:PrimitiveType[41515-41519]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[41527-42459]:Block[41527-42459]"
  }, {
    "left" : "pause();",
    "right" : "pause();",
    "info" : "ExpressionStatement[41948-41956]:ExpressionStatement[41948-41956]"
  }, {
    "left" : "handleMethods(\"pause\");",
    "right" : "handleMethods(\"pause\");",
    "info" : "ExpressionStatement[41961-41984]:ExpressionStatement[41961-41984]"
  }, {
    "left" : "surface.pauseThread();",
    "right" : "surface.pauseThread();",
    "info" : "ExpressionStatement[42120-42142]:ExpressionStatement[42120-42142]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[42701-42707]:Modifier[42701-42707]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[42708-42712]:PrimitiveType[42708-42712]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[42721-42724]:Block[42721-42724]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[42950-42956]:Modifier[42950-42956]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[42957-42961]:PrimitiveType[42957-42961]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[42971-42974]:Block[42971-42974]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[44010-44014]:PrimitiveType[44010-44014]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[44024-44056]:Block[44024-44056]"
  }, {
    "left" : "handle(emptyArgs);",
    "right" : "handle(emptyArgs);",
    "info" : "ExpressionStatement[44032-44050]:ExpressionStatement[44032-44050]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[44063-44067]:PrimitiveType[44063-44067]"
  }, {
    "left" : "Object[] args",
    "right" : "Object[] args",
    "info" : "SingleVariableDeclaration[44075-44088]:SingleVariableDeclaration[44075-44088]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[44090-44833]:Block[44090-44833]"
  }, {
    "left" : "for (int i = 0; i < count; i++)",
    "right" : "for (int i = 0; i < count; i++)",
    "info" : "ForStatement[44098-44827]:ForStatement[44098-44827]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[44130-44827]:Block[44130-44827]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[44140-44819]:TryStatement[44140-44819]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[44144-44202]:Block[44144-44202]"
  }, {
    "left" : "methods[i].invoke(objects[i], args);",
    "right" : "methods[i].invoke(objects[i], args);",
    "info" : "ExpressionStatement[44156-44192]:ExpressionStatement[44156-44192]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[44223-44819]:Block[44223-44819]"
  }, {
    "left" : "Throwable t;",
    "right" : "Throwable t;",
    "info" : "VariableDeclarationStatement[44296-44308]:VariableDeclarationStatement[44296-44308]"
  }, {
    "left" : "if (e instanceof InvocationTargetException)",
    "right" : "if (e instanceof InvocationTargetException)",
    "info" : "IfStatement[44319-44521]:IfStatement[44319-44521]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[44363-44483]:Block[44363-44483]"
  }, {
    "left" : "InvocationTargetException ite = (InvocationTargetException) e;",
    "right" : "InvocationTargetException ite = (InvocationTargetException) e;",
    "info" : "VariableDeclarationStatement[44377-44439]:VariableDeclarationStatement[44377-44439]"
  }, {
    "left" : "t = ite.getCause();",
    "right" : "t = ite.getCause();",
    "info" : "ExpressionStatement[44452-44471]:ExpressionStatement[44452-44471]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[44489-44521]:Block[44489-44521]"
  }, {
    "left" : "t = e;",
    "right" : "t = e;",
    "info" : "ExpressionStatement[44503-44509]:ExpressionStatement[44503-44509]"
  }, {
    "left" : "if (t instanceof RuntimeException)",
    "right" : "if (t instanceof RuntimeException)",
    "info" : "IfStatement[44596-44809]:IfStatement[44596-44809]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[44631-44718]:Block[44631-44718]"
  }, {
    "left" : "throw (RuntimeException) t;",
    "right" : "throw (RuntimeException) t;",
    "info" : "ThrowStatement[44679-44706]:ThrowStatement[44679-44706]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[44724-44809]:Block[44724-44809]"
  }, {
    "left" : "t.printStackTrace();",
    "right" : "t.printStackTrace();",
    "info" : "ExpressionStatement[44777-44797]:ExpressionStatement[44777-44797]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[44840-44844]:PrimitiveType[44840-44844]"
  }, {
    "left" : "Object object",
    "right" : "Object object",
    "info" : "SingleVariableDeclaration[44849-44862]:SingleVariableDeclaration[44849-44862]"
  }, {
    "left" : "Method method",
    "right" : "Method method",
    "info" : "SingleVariableDeclaration[44864-44877]:SingleVariableDeclaration[44864-44877]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[44879-45415]:Block[44879-45415]"
  }, {
    "left" : "if (findIndex(object) == -1)",
    "right" : "if (findIndex(object) == -1)",
    "info" : "IfStatement[44887-45409]:IfStatement[44887-45409]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[44916-45278]:Block[44916-45278]"
  }, {
    "left" : "if (objects == null)",
    "right" : "if (objects == null)",
    "info" : "IfStatement[44926-45187]:IfStatement[44926-45187]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[44947-45029]:Block[44947-45029]"
  }, {
    "left" : "objects = new Object[5];",
    "right" : "objects = new Object[5];",
    "info" : "ExpressionStatement[44959-44983]:ExpressionStatement[44959-44983]"
  }, {
    "left" : "methods = new Method[5];",
    "right" : "methods = new Method[5];",
    "info" : "ExpressionStatement[44994-45018]:ExpressionStatement[44994-45018]"
  }, {
    "left" : "if (count == objects.length)",
    "right" : "if (count == objects.length)",
    "info" : "IfStatement[45035-45187]:IfStatement[45035-45187]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[45064-45187]:Block[45064-45187]"
  }, {
    "left" : "objects = (Object[]) PApplet.expand(objects);",
    "right" : "objects = (Object[]) PApplet.expand(objects);",
    "info" : "ExpressionStatement[45076-45121]:ExpressionStatement[45076-45121]"
  }, {
    "left" : "methods = (Method[]) PApplet.expand(methods);",
    "right" : "methods = (Method[]) PApplet.expand(methods);",
    "info" : "ExpressionStatement[45132-45177]:ExpressionStatement[45132-45177]"
  }, {
    "left" : "objects[count] = object;",
    "right" : "objects[count] = object;",
    "info" : "ExpressionStatement[45196-45220]:ExpressionStatement[45196-45220]"
  }, {
    "left" : "methods[count] = method;",
    "right" : "methods[count] = method;",
    "info" : "ExpressionStatement[45229-45253]:ExpressionStatement[45229-45253]"
  }, {
    "left" : "count++;",
    "right" : "count++;",
    "info" : "ExpressionStatement[45262-45270]:ExpressionStatement[45262-45270]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[45284-45409]:Block[45284-45409]"
  }, {
    "left" : "die(method.getName() + \"() already added for this instance of \" +\n            object.getClass().getName());",
    "right" : "die(method.getName() + \"() already added for this instance of \" +\n            object.getClass().getName());",
    "info" : "ExpressionStatement[45294-45401]:ExpressionStatement[45294-45401]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[45768-45774]:Modifier[45768-45774]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[45775-45779]:PrimitiveType[45775-45779]"
  }, {
    "left" : "Object object",
    "right" : "Object object",
    "info" : "SingleVariableDeclaration[45787-45800]:SingleVariableDeclaration[45787-45800]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[45802-46197]:Block[45802-46197]"
  }, {
    "left" : "int index = findIndex(object);",
    "right" : "int index = findIndex(object);",
    "info" : "VariableDeclarationStatement[45810-45840]:VariableDeclarationStatement[45810-45840]"
  }, {
    "left" : "if (index != -1)",
    "right" : "if (index != -1)",
    "info" : "IfStatement[45847-46191]:IfStatement[45847-46191]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[45864-46191]:Block[45864-46191]"
  }, {
    "left" : "count--;",
    "right" : "count--;",
    "info" : "ExpressionStatement[45937-45945]:ExpressionStatement[45937-45945]"
  }, {
    "left" : "for (int i = index; i < count; i++)",
    "right" : "for (int i = index; i < count; i++)",
    "info" : "ForStatement[45954-46075]:ForStatement[45954-46075]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[45990-46075]:Block[45990-46075]"
  }, {
    "left" : "objects[i] = objects[i+1];",
    "right" : "objects[i] = objects[i+1];",
    "info" : "ExpressionStatement[46002-46028]:ExpressionStatement[46002-46028]"
  }, {
    "left" : "methods[i] = methods[i+1];",
    "right" : "methods[i] = methods[i+1];",
    "info" : "ExpressionStatement[46039-46065]:ExpressionStatement[46039-46065]"
  }, {
    "left" : "objects[count] = null;",
    "right" : "objects[count] = null;",
    "info" : "ExpressionStatement[46130-46152]:ExpressionStatement[46130-46152]"
  }, {
    "left" : "methods[count] = null;",
    "right" : "methods[count] = null;",
    "info" : "ExpressionStatement[46161-46183]:ExpressionStatement[46161-46183]"
  }, {
    "left" : "protected",
    "right" : "protected",
    "info" : "Modifier[46266-46275]:Modifier[46266-46275]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[46276-46279]:PrimitiveType[46276-46279]"
  }, {
    "left" : "Object object",
    "right" : "Object object",
    "info" : "SingleVariableDeclaration[46290-46303]:SingleVariableDeclaration[46290-46303]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[46305-46797]:Block[46305-46797]"
  }, {
    "left" : "for (int i = 0; i < count; i++)",
    "right" : "for (int i = 0; i < count; i++)",
    "info" : "ForStatement[46313-46774]:ForStatement[46313-46774]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[46345-46774]:Block[46345-46774]"
  }, {
    "left" : "if (objects[i] == object)",
    "right" : "if (objects[i] == object)",
    "info" : "IfStatement[46355-46766]:IfStatement[46355-46766]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[46381-46766]:Block[46381-46766]"
  }, {
    "left" : "return i;",
    "right" : "return i;",
    "info" : "ReturnStatement[46747-46756]:ReturnStatement[46747-46756]"
  }, {
    "left" : "return -1;",
    "right" : "return -1;",
    "info" : "ReturnStatement[46781-46791]:ReturnStatement[46781-46791]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[47730-47736]:Modifier[47730-47736]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[47737-47741]:PrimitiveType[47737-47741]"
  }, {
    "left" : "String methodName",
    "right" : "String methodName",
    "info" : "SingleVariableDeclaration[47757-47774]:SingleVariableDeclaration[47757-47774]"
  }, {
    "left" : "Object target",
    "right" : "Object target",
    "info" : "SingleVariableDeclaration[47776-47789]:SingleVariableDeclaration[47776-47789]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[47791-48288]:Block[47791-48288]"
  }, {
    "left" : "if (methodName.equals(\"mouseEvent\"))",
    "right" : "if (methodName.equals(\"mouseEvent\"))",
    "info" : "IfStatement[47797-48284]:IfStatement[47797-48284]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[47834-47939]:Block[47834-47939]"
  }, {
    "left" : "registerWithArgs(\"mouseEvent\", target, new Class[] { processing.event.MouseEvent.class });",
    "right" : "registerWithArgs(\"mouseEvent\", target, new Class[] { processing.event.MouseEvent.class });",
    "info" : "ExpressionStatement[47842-47932]:ExpressionStatement[47842-47932]"
  }, {
    "left" : "if (methodName.equals(\"keyEvent\"))",
    "right" : "if (methodName.equals(\"keyEvent\"))",
    "info" : "IfStatement[47945-48284]:IfStatement[47945-48284]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[47980-48081]:Block[47980-48081]"
  }, {
    "left" : "registerWithArgs(\"keyEvent\", target, new Class[] { processing.event.KeyEvent.class });",
    "right" : "registerWithArgs(\"keyEvent\", target, new Class[] { processing.event.KeyEvent.class });",
    "info" : "ExpressionStatement[47988-48074]:ExpressionStatement[47988-48074]"
  }, {
    "left" : "if (methodName.equals(\"touchEvent\"))",
    "right" : "if (methodName.equals(\"touchEvent\"))",
    "info" : "IfStatement[48087-48284]:IfStatement[48087-48284]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[48124-48229]:Block[48124-48229]"
  }, {
    "left" : "registerWithArgs(\"touchEvent\", target, new Class[] { processing.event.TouchEvent.class });",
    "right" : "registerWithArgs(\"touchEvent\", target, new Class[] { processing.event.TouchEvent.class });",
    "info" : "ExpressionStatement[48132-48222]:ExpressionStatement[48132-48222]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[48235-48284]:Block[48235-48284]"
  }, {
    "left" : "registerNoArgs(methodName, target);",
    "right" : "registerNoArgs(methodName, target);",
    "info" : "ExpressionStatement[48243-48278]:ExpressionStatement[48243-48278]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[48293-48300]:Modifier[48293-48300]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[48301-48305]:PrimitiveType[48301-48305]"
  }, {
    "left" : "String name",
    "right" : "String name",
    "info" : "SingleVariableDeclaration[48321-48332]:SingleVariableDeclaration[48321-48332]"
  }, {
    "left" : "Object o",
    "right" : "Object o",
    "info" : "SingleVariableDeclaration[48334-48342]:SingleVariableDeclaration[48334-48342]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[48344-48875]:Block[48344-48875]"
  }, {
    "left" : "RegisteredMethods meth = registerMap.get(name);",
    "right" : "RegisteredMethods meth = registerMap.get(name);",
    "info" : "VariableDeclarationStatement[48350-48397]:VariableDeclarationStatement[48350-48397]"
  }, {
    "left" : "if (meth == null)",
    "right" : "if (meth == null)",
    "info" : "IfStatement[48402-48500]:IfStatement[48402-48500]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[48420-48500]:Block[48420-48500]"
  }, {
    "left" : "meth = new RegisteredMethods();",
    "right" : "meth = new RegisteredMethods();",
    "info" : "ExpressionStatement[48428-48459]:ExpressionStatement[48428-48459]"
  }, {
    "left" : "registerMap.put(name, meth);",
    "right" : "registerMap.put(name, meth);",
    "info" : "ExpressionStatement[48466-48494]:ExpressionStatement[48466-48494]"
  }, {
    "left" : "Class<?> c = o.getClass();",
    "right" : "Class<?> c = o.getClass();",
    "info" : "VariableDeclarationStatement[48505-48531]:VariableDeclarationStatement[48505-48531]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[48536-48871]:TryStatement[48536-48871]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[48540-48632]:Block[48540-48632]"
  }, {
    "left" : "Method method = c.getMethod(name, new Class[] {});",
    "right" : "Method method = c.getMethod(name, new Class[] {});",
    "info" : "VariableDeclarationStatement[48548-48598]:VariableDeclarationStatement[48548-48598]"
  }, {
    "left" : "meth.add(o, method);",
    "right" : "meth.add(o, method);",
    "info" : "ExpressionStatement[48605-48625]:ExpressionStatement[48605-48625]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[48668-48780]:Block[48668-48780]"
  }, {
    "left" : "die(\"There is no public \" + name + \"() method in the class \" +\n          o.getClass().getName());",
    "right" : "die(\"There is no public \" + name + \"() method in the class \" +\n          o.getClass().getName());",
    "info" : "ExpressionStatement[48676-48773]:ExpressionStatement[48676-48773]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[48801-48871]:Block[48801-48871]"
  }, {
    "left" : "die(\"Could not register \" + name + \" + () for \" + o, e);",
    "right" : "die(\"Could not register \" + name + \" + () for \" + o, e);",
    "info" : "ExpressionStatement[48809-48865]:ExpressionStatement[48809-48865]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[48880-48887]:Modifier[48880-48887]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[48888-48892]:PrimitiveType[48888-48892]"
  }, {
    "left" : "String name",
    "right" : "String name",
    "info" : "SingleVariableDeclaration[48910-48921]:SingleVariableDeclaration[48910-48921]"
  }, {
    "left" : "Object o",
    "right" : "Object o",
    "info" : "SingleVariableDeclaration[48923-48931]:SingleVariableDeclaration[48923-48931]"
  }, {
    "left" : "Class<?> cargs[]",
    "right" : "Class<?> cargs[]",
    "info" : "SingleVariableDeclaration[48933-48949]:SingleVariableDeclaration[48933-48949]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[48951-49473]:Block[48951-49473]"
  }, {
    "left" : "RegisteredMethods meth = registerMap.get(name);",
    "right" : "RegisteredMethods meth = registerMap.get(name);",
    "info" : "VariableDeclarationStatement[48957-49004]:VariableDeclarationStatement[48957-49004]"
  }, {
    "left" : "if (meth == null)",
    "right" : "if (meth == null)",
    "info" : "IfStatement[49009-49107]:IfStatement[49009-49107]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[49027-49107]:Block[49027-49107]"
  }, {
    "left" : "meth = new RegisteredMethods();",
    "right" : "meth = new RegisteredMethods();",
    "info" : "ExpressionStatement[49035-49066]:ExpressionStatement[49035-49066]"
  }, {
    "left" : "registerMap.put(name, meth);",
    "right" : "registerMap.put(name, meth);",
    "info" : "ExpressionStatement[49073-49101]:ExpressionStatement[49073-49101]"
  }, {
    "left" : "Class<?> c = o.getClass();",
    "right" : "Class<?> c = o.getClass();",
    "info" : "VariableDeclarationStatement[49112-49138]:VariableDeclarationStatement[49112-49138]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[49143-49469]:TryStatement[49143-49469]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[49147-49230]:Block[49147-49230]"
  }, {
    "left" : "Method method = c.getMethod(name, cargs);",
    "right" : "Method method = c.getMethod(name, cargs);",
    "info" : "VariableDeclarationStatement[49155-49196]:VariableDeclarationStatement[49155-49196]"
  }, {
    "left" : "meth.add(o, method);",
    "right" : "meth.add(o, method);",
    "info" : "ExpressionStatement[49203-49223]:ExpressionStatement[49203-49223]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[49266-49378]:Block[49266-49378]"
  }, {
    "left" : "die(\"There is no public \" + name + \"() method in the class \" +\n          o.getClass().getName());",
    "right" : "die(\"There is no public \" + name + \"() method in the class \" +\n          o.getClass().getName());",
    "info" : "ExpressionStatement[49274-49371]:ExpressionStatement[49274-49371]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[49399-49469]:Block[49399-49469]"
  }, {
    "left" : "die(\"Could not register \" + name + \" + () for \" + o, e);",
    "right" : "die(\"Could not register \" + name + \" + () for \" + o, e);",
    "info" : "ExpressionStatement[49407-49463]:ExpressionStatement[49407-49463]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[49619-49625]:Modifier[49619-49625]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[49626-49630]:PrimitiveType[49626-49630]"
  }, {
    "left" : "String name",
    "right" : "String name",
    "info" : "SingleVariableDeclaration[49648-49659]:SingleVariableDeclaration[49648-49659]"
  }, {
    "left" : "Object target",
    "right" : "Object target",
    "info" : "SingleVariableDeclaration[49661-49674]:SingleVariableDeclaration[49661-49674]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[49676-50080]:Block[49676-50080]"
  }, {
    "left" : "RegisteredMethods meth = registerMap.get(name);",
    "right" : "RegisteredMethods meth = registerMap.get(name);",
    "info" : "VariableDeclarationStatement[49682-49729]:VariableDeclarationStatement[49682-49729]"
  }, {
    "left" : "if (meth == null)",
    "right" : "if (meth == null)",
    "info" : "IfStatement[49734-49836]:IfStatement[49734-49836]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[49752-49836]:Block[49752-49836]"
  }, {
    "left" : "die(\"No registered methods with the name \" + name + \"() were found.\");",
    "right" : "die(\"No registered methods with the name \" + name + \"() were found.\");",
    "info" : "ExpressionStatement[49760-49830]:ExpressionStatement[49760-49830]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[49841-50076]:TryStatement[49841-50076]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[49845-49981]:Block[49845-49981]"
  }, {
    "left" : "meth.remove(target);",
    "right" : "meth.remove(target);",
    "info" : "ExpressionStatement[49955-49975]:ExpressionStatement[49955-49975]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[50002-50076]:Block[50002-50076]"
  }, {
    "left" : "die(\"Could not unregister \" + name + \"() for \" + target, e);",
    "right" : "die(\"Could not unregister \" + name + \"() for \" + target, e);",
    "info" : "ExpressionStatement[50010-50070]:ExpressionStatement[50010-50070]"
  }, {
    "left" : "protected",
    "right" : "protected",
    "info" : "Modifier[50085-50094]:Modifier[50085-50094]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[50095-50099]:PrimitiveType[50095-50099]"
  }, {
    "left" : "String methodName",
    "right" : "String methodName",
    "info" : "SingleVariableDeclaration[50114-50131]:SingleVariableDeclaration[50114-50131]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[50133-50247]:Block[50133-50247]"
  }, {
    "left" : "RegisteredMethods meth = registerMap.get(methodName);",
    "right" : "RegisteredMethods meth = registerMap.get(methodName);",
    "info" : "VariableDeclarationStatement[50139-50192]:VariableDeclarationStatement[50139-50192]"
  }, {
    "left" : "if (meth != null)",
    "right" : "if (meth != null)",
    "info" : "IfStatement[50197-50243]:IfStatement[50197-50243]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[50215-50243]:Block[50215-50243]"
  }, {
    "left" : "meth.handle();",
    "right" : "meth.handle();",
    "info" : "ExpressionStatement[50223-50237]:ExpressionStatement[50223-50237]"
  }, {
    "left" : "protected",
    "right" : "protected",
    "info" : "Modifier[50252-50261]:Modifier[50252-50261]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[50262-50266]:PrimitiveType[50262-50266]"
  }, {
    "left" : "String methodName",
    "right" : "String methodName",
    "info" : "SingleVariableDeclaration[50281-50298]:SingleVariableDeclaration[50281-50298]"
  }, {
    "left" : "Object[] args",
    "right" : "Object[] args",
    "info" : "SingleVariableDeclaration[50300-50313]:SingleVariableDeclaration[50300-50313]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[50315-50433]:Block[50315-50433]"
  }, {
    "left" : "RegisteredMethods meth = registerMap.get(methodName);",
    "right" : "RegisteredMethods meth = registerMap.get(methodName);",
    "info" : "VariableDeclarationStatement[50321-50374]:VariableDeclarationStatement[50321-50374]"
  }, {
    "left" : "if (meth != null)",
    "right" : "if (meth != null)",
    "info" : "IfStatement[50379-50429]:IfStatement[50379-50429]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[50397-50429]:Block[50397-50429]"
  }, {
    "left" : "meth.handle(args);",
    "right" : "meth.handle(args);",
    "info" : "ExpressionStatement[50405-50423]:ExpressionStatement[50405-50423]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[55289-55295]:Modifier[55289-55295]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[55296-55300]:PrimitiveType[55296-55300]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[55309-55314]:Block[55309-55314]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[56689-56695]:Modifier[56689-56695]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[56696-56700]:PrimitiveType[56696-56700]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[56708-56835]:Block[56708-56835]"
  }, {
    "left" : "finished = true;",
    "right" : "finished = true;",
    "info" : "ExpressionStatement[56815-56831]:ExpressionStatement[56815-56831]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[57334-57340]:Modifier[57334-57340]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[57341-57345]:PrimitiveType[57341-57345]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[57359-57475]:Block[57359-57475]"
  }, {
    "left" : "if (!fullScreen)",
    "right" : "if (!fullScreen)",
    "info" : "IfStatement[57365-57471]:IfStatement[57365-57471]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[57382-57471]:Block[57382-57471]"
  }, {
    "left" : "if (insideSettings(\"fullScreen\"))",
    "right" : "if (insideSettings(\"fullScreen\"))",
    "info" : "IfStatement[57390-57465]:IfStatement[57390-57465]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[57424-57465]:Block[57424-57465]"
  }, {
    "left" : "this.fullScreen = true;",
    "right" : "this.fullScreen = true;",
    "info" : "ExpressionStatement[57434-57457]:ExpressionStatement[57434-57457]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[57480-57486]:Modifier[57480-57486]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[57487-57491]:PrimitiveType[57487-57491]"
  }, {
    "left" : "int display",
    "right" : "int display",
    "info" : "SingleVariableDeclaration[57503-57514]:SingleVariableDeclaration[57503-57514]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[57516-57700]:Block[57516-57700]"
  }, {
    "left" : "if (!fullScreen || display != this.display)",
    "right" : "if (!fullScreen || display != this.display)",
    "info" : "IfStatement[57522-57696]:IfStatement[57522-57696]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[57566-57696]:Block[57566-57696]"
  }, {
    "left" : "if (insideSettings(\"fullScreen\", display))",
    "right" : "if (insideSettings(\"fullScreen\", display))",
    "info" : "IfStatement[57574-57690]:IfStatement[57574-57690]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[57617-57690]:Block[57617-57690]"
  }, {
    "left" : "this.fullScreen = true;",
    "right" : "this.fullScreen = true;",
    "info" : "ExpressionStatement[57627-57650]:ExpressionStatement[57627-57650]"
  }, {
    "left" : "this.display = display;",
    "right" : "this.display = display;",
    "info" : "ExpressionStatement[57659-57682]:ExpressionStatement[57659-57682]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[58025-58031]:Modifier[58025-58031]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[58032-58036]:PrimitiveType[58032-58036]"
  }, {
    "left" : "String renderer",
    "right" : "String renderer",
    "info" : "SingleVariableDeclaration[58048-58063]:SingleVariableDeclaration[58048-58063]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[58065-58268]:Block[58065-58268]"
  }, {
    "left" : "if (!fullScreen ||\n        !renderer.equals(this.renderer))",
    "right" : "if (!fullScreen ||\n        !renderer.equals(this.renderer))",
    "info" : "IfStatement[58071-58264]:IfStatement[58071-58264]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[58131-58264]:Block[58131-58264]"
  }, {
    "left" : "if (insideSettings(\"fullScreen\", renderer))",
    "right" : "if (insideSettings(\"fullScreen\", renderer))",
    "info" : "IfStatement[58139-58258]:IfStatement[58139-58258]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[58183-58258]:Block[58183-58258]"
  }, {
    "left" : "this.fullScreen = true;",
    "right" : "this.fullScreen = true;",
    "info" : "ExpressionStatement[58193-58216]:ExpressionStatement[58193-58216]"
  }, {
    "left" : "this.renderer = renderer;",
    "right" : "this.renderer = renderer;",
    "info" : "ExpressionStatement[58225-58250]:ExpressionStatement[58225-58250]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[58353-58359]:Modifier[58353-58359]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[58360-58364]:PrimitiveType[58360-58364]"
  }, {
    "left" : "String renderer",
    "right" : "String renderer",
    "info" : "SingleVariableDeclaration[58376-58391]:SingleVariableDeclaration[58376-58391]"
  }, {
    "left" : "int display",
    "right" : "int display",
    "info" : "SingleVariableDeclaration[58393-58404]:SingleVariableDeclaration[58393-58404]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[58406-58685]:Block[58406-58685]"
  }, {
    "left" : "if (!fullScreen ||\n        !renderer.equals(this.renderer) ||\n        display != this.display)",
    "right" : "if (!fullScreen ||\n        !renderer.equals(this.renderer) ||\n        display != this.display)",
    "info" : "IfStatement[58412-58681]:IfStatement[58412-58681]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[58507-58681]:Block[58507-58681]"
  }, {
    "left" : "if (insideSettings(\"fullScreen\", renderer, display))",
    "right" : "if (insideSettings(\"fullScreen\", renderer, display))",
    "info" : "IfStatement[58515-58675]:IfStatement[58515-58675]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[58568-58675]:Block[58568-58675]"
  }, {
    "left" : "this.fullScreen = true;",
    "right" : "this.fullScreen = true;",
    "info" : "ExpressionStatement[58578-58601]:ExpressionStatement[58578-58601]"
  }, {
    "left" : "this.renderer = renderer;",
    "right" : "this.renderer = renderer;",
    "info" : "ExpressionStatement[58610-58635]:ExpressionStatement[58610-58635]"
  }, {
    "left" : "this.display = display;",
    "right" : "this.display = display;",
    "info" : "ExpressionStatement[58644-58667]:ExpressionStatement[58644-58667]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[62405-62411]:Modifier[62405-62411]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[62412-62416]:PrimitiveType[62412-62416]"
  }, {
    "left" : "int width",
    "right" : "int width",
    "info" : "SingleVariableDeclaration[62422-62431]:SingleVariableDeclaration[62422-62431]"
  }, {
    "left" : "int height",
    "right" : "int height",
    "info" : "SingleVariableDeclaration[62433-62443]:SingleVariableDeclaration[62433-62443]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[62445-62904]:Block[62445-62904]"
  }, {
    "left" : "if (width != this.width ||\n        height != this.height)",
    "right" : "if (width != this.width ||\n        height != this.height)",
    "info" : "IfStatement[62718-62900]:IfStatement[62718-62900]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[62776-62900]:Block[62776-62900]"
  }, {
    "left" : "if (insideSettings(\"size\", width, height))",
    "right" : "if (insideSettings(\"size\", width, height))",
    "info" : "IfStatement[62784-62894]:IfStatement[62784-62894]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[62827-62894]:Block[62827-62894]"
  }, {
    "left" : "this.width = width;",
    "right" : "this.width = width;",
    "info" : "ExpressionStatement[62837-62856]:ExpressionStatement[62837-62856]"
  }, {
    "left" : "this.height = height;",
    "right" : "this.height = height;",
    "info" : "ExpressionStatement[62865-62886]:ExpressionStatement[62865-62886]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[62909-62915]:Modifier[62909-62915]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[62916-62920]:PrimitiveType[62916-62920]"
  }, {
    "left" : "int width",
    "right" : "int width",
    "info" : "SingleVariableDeclaration[62926-62935]:SingleVariableDeclaration[62926-62935]"
  }, {
    "left" : "int height",
    "right" : "int height",
    "info" : "SingleVariableDeclaration[62937-62947]:SingleVariableDeclaration[62937-62947]"
  }, {
    "left" : "String renderer",
    "right" : "String renderer",
    "info" : "SingleVariableDeclaration[62949-62964]:SingleVariableDeclaration[62949-62964]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[62966-63245]:Block[62966-63245]"
  }, {
    "left" : "if (width != this.width ||\n        height != this.height ||\n        !renderer.equals(this.renderer))",
    "right" : "if (width != this.width ||\n        height != this.height ||\n        !renderer.equals(this.renderer))",
    "info" : "IfStatement[62972-63241]:IfStatement[62972-63241]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[63073-63241]:Block[63073-63241]"
  }, {
    "left" : "if (insideSettings(\"size\", width, height, renderer))",
    "right" : "if (insideSettings(\"size\", width, height, renderer))",
    "info" : "IfStatement[63081-63235]:IfStatement[63081-63235]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[63134-63235]:Block[63134-63235]"
  }, {
    "left" : "this.width = width;",
    "right" : "this.width = width;",
    "info" : "ExpressionStatement[63144-63163]:ExpressionStatement[63144-63163]"
  }, {
    "left" : "this.height = height;",
    "right" : "this.height = height;",
    "info" : "ExpressionStatement[63172-63193]:ExpressionStatement[63172-63193]"
  }, {
    "left" : "this.renderer = renderer;",
    "right" : "this.renderer = renderer;",
    "info" : "ExpressionStatement[63202-63227]:ExpressionStatement[63202-63227]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[63277-63283]:Modifier[63277-63283]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[63284-63288]:PrimitiveType[63284-63288]"
  }, {
    "left" : "int width",
    "right" : "int width",
    "info" : "SingleVariableDeclaration[63294-63303]:SingleVariableDeclaration[63294-63303]"
  }, {
    "left" : "int height",
    "right" : "int height",
    "info" : "SingleVariableDeclaration[63305-63315]:SingleVariableDeclaration[63305-63315]"
  }, {
    "left" : "String renderer",
    "right" : "String renderer",
    "info" : "SingleVariableDeclaration[63317-63332]:SingleVariableDeclaration[63317-63332]"
  }, {
    "left" : "String path",
    "right" : "String path",
    "info" : "SingleVariableDeclaration[63334-63345]:SingleVariableDeclaration[63334-63345]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[63347-66425]:Block[63347-66425]"
  }, {
    "left" : "if (width != this.width ||\n        height != this.height ||\n        !renderer.equals(this.renderer))",
    "right" : "if (width != this.width ||\n        height != this.height ||\n        !renderer.equals(this.renderer))",
    "info" : "IfStatement[63547-63854]:IfStatement[63547-63854]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[63648-63854]:Block[63648-63854]"
  }, {
    "left" : "if (insideSettings(\"size\", width, height, renderer, path))",
    "right" : "if (insideSettings(\"size\", width, height, renderer, path))",
    "info" : "IfStatement[63656-63848]:IfStatement[63656-63848]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[63715-63848]:Block[63715-63848]"
  }, {
    "left" : "this.width = width;",
    "right" : "this.width = width;",
    "info" : "ExpressionStatement[63725-63744]:ExpressionStatement[63725-63744]"
  }, {
    "left" : "this.height = height;",
    "right" : "this.height = height;",
    "info" : "ExpressionStatement[63753-63774]:ExpressionStatement[63753-63774]"
  }, {
    "left" : "this.renderer = renderer;",
    "right" : "this.renderer = renderer;",
    "info" : "ExpressionStatement[63783-63808]:ExpressionStatement[63783-63808]"
  }, {
    "left" : "this.outputPath = path;",
    "right" : "this.outputPath = path;",
    "info" : "ExpressionStatement[63817-63840]:ExpressionStatement[63817-63840]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[66430-66436]:Modifier[66430-66436]"
  }, {
    "left" : "PGraphics",
    "right" : "PGraphics",
    "info" : "SimpleType[66437-66446]:SimpleType[66437-66446]"
  }, {
    "left" : "int w",
    "right" : "int w",
    "info" : "SingleVariableDeclaration[66462-66467]:SingleVariableDeclaration[66462-66467]"
  }, {
    "left" : "int h",
    "right" : "int h",
    "info" : "SingleVariableDeclaration[66469-66474]:SingleVariableDeclaration[66469-66474]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[66476-66522]:Block[66476-66522]"
  }, {
    "left" : "return createGraphics(w, h, JAVA2D);",
    "right" : "return createGraphics(w, h, JAVA2D);",
    "info" : "ReturnStatement[66482-66518]:ReturnStatement[66482-66518]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[70011-70017]:Modifier[70011-70017]"
  }, {
    "left" : "PGraphics",
    "right" : "PGraphics",
    "info" : "SimpleType[70018-70027]:SimpleType[70018-70027]"
  }, {
    "left" : "int w",
    "right" : "int w",
    "info" : "SingleVariableDeclaration[70043-70048]:SingleVariableDeclaration[70043-70048]"
  }, {
    "left" : "int h",
    "right" : "int h",
    "info" : "SingleVariableDeclaration[70050-70055]:SingleVariableDeclaration[70050-70055]"
  }, {
    "left" : "String renderer",
    "right" : "String renderer",
    "info" : "SingleVariableDeclaration[70057-70072]:SingleVariableDeclaration[70057-70072]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[70074-70128]:Block[70074-70128]"
  }, {
    "left" : "return createGraphics(w, h, renderer, null);",
    "right" : "return createGraphics(w, h, renderer, null);",
    "info" : "ReturnStatement[70080-70124]:ReturnStatement[70080-70124]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[70353-70359]:Modifier[70353-70359]"
  }, {
    "left" : "PGraphics",
    "right" : "PGraphics",
    "info" : "SimpleType[70360-70369]:SimpleType[70360-70369]"
  }, {
    "left" : "int w",
    "right" : "int w",
    "info" : "SingleVariableDeclaration[70385-70390]:SingleVariableDeclaration[70385-70390]"
  }, {
    "left" : "int h",
    "right" : "int h",
    "info" : "SingleVariableDeclaration[70392-70397]:SingleVariableDeclaration[70392-70397]"
  }, {
    "left" : "String renderer",
    "right" : "String renderer",
    "info" : "SingleVariableDeclaration[70433-70448]:SingleVariableDeclaration[70433-70448]"
  }, {
    "left" : "String path",
    "right" : "String path",
    "info" : "SingleVariableDeclaration[70450-70461]:SingleVariableDeclaration[70450-70461]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[70463-70839]:Block[70463-70839]"
  }, {
    "left" : "return makeGraphics(w, h, renderer, path, false);",
    "right" : "return makeGraphics(w, h, renderer, path, false);",
    "info" : "ReturnStatement[70469-70518]:ReturnStatement[70469-70518]"
  }, {
    "left" : "protected",
    "right" : "protected",
    "info" : "Modifier[71159-71168]:Modifier[71159-71168]"
  }, {
    "left" : "PGraphics",
    "right" : "PGraphics",
    "info" : "SimpleType[71169-71178]:SimpleType[71169-71178]"
  }, {
    "left" : "int w",
    "right" : "int w",
    "info" : "SingleVariableDeclaration[71192-71197]:SingleVariableDeclaration[71192-71197]"
  }, {
    "left" : "int h",
    "right" : "int h",
    "info" : "SingleVariableDeclaration[71199-71204]:SingleVariableDeclaration[71199-71204]"
  }, {
    "left" : "String renderer",
    "right" : "String renderer",
    "info" : "SingleVariableDeclaration[71241-71256]:SingleVariableDeclaration[71241-71256]"
  }, {
    "left" : "String path",
    "right" : "String path",
    "info" : "SingleVariableDeclaration[71258-71269]:SingleVariableDeclaration[71258-71269]"
  }, {
    "left" : "boolean primary",
    "right" : "boolean primary",
    "info" : "SingleVariableDeclaration[71306-71321]:SingleVariableDeclaration[71306-71321]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[71323-74798]:Block[71323-74798]"
  }, {
    "left" : "if (!primary && !g.isGL())",
    "right" : "if (!primary && !g.isGL())",
    "info" : "IfStatement[71715-72040]:IfStatement[71715-72040]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[71742-72040]:Block[71742-72040]"
  }, {
    "left" : "if (renderer.equals(P2D))",
    "right" : "if (renderer.equals(P2D))",
    "info" : "IfStatement[71750-72034]:IfStatement[71750-72034]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[71776-71884]:Block[71776-71884]"
  }, {
    "left" : "throw new RuntimeException(\"createGraphics() with P2D requires size() to use P2D or P3D\");",
    "right" : "throw new RuntimeException(\"createGraphics() with P2D requires size() to use P2D or P3D\");",
    "info" : "ThrowStatement[71786-71876]:ThrowStatement[71786-71876]"
  }, {
    "left" : "if (renderer.equals(P3D))",
    "right" : "if (renderer.equals(P3D))",
    "info" : "IfStatement[71890-72034]:IfStatement[71890-72034]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[71916-72034]:Block[71916-72034]"
  }, {
    "left" : "throw new RuntimeException(\"createGraphics() with P3D or OPENGL requires size() to use P2D or P3D\");",
    "right" : "throw new RuntimeException(\"createGraphics() with P3D or OPENGL requires size() to use P2D or P3D\");",
    "info" : "ThrowStatement[71926-72026]:ThrowStatement[71926-72026]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[72046-74794]:TryStatement[72046-74794]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[72050-72628]:Block[72050-72628]"
  }, {
    "left" : "Class<?> rendererClass =\n        Thread.currentThread().getContextClassLoader().loadClass(renderer);",
    "right" : "Class<?> rendererClass =\n        Thread.currentThread().getContextClassLoader().loadClass(renderer);",
    "info" : "VariableDeclarationStatement[72058-72158]:VariableDeclarationStatement[72058-72158]"
  }, {
    "left" : "Constructor<?> constructor = rendererClass.getConstructor(new Class[] { });",
    "right" : "Constructor<?> constructor = rendererClass.getConstructor(new Class[] { });",
    "info" : "VariableDeclarationStatement[72166-72241]:VariableDeclarationStatement[72166-72241]"
  }, {
    "left" : "PGraphics pg = (PGraphics) constructor.newInstance();",
    "right" : "PGraphics pg = (PGraphics) constructor.newInstance();",
    "info" : "VariableDeclarationStatement[72248-72301]:VariableDeclarationStatement[72248-72301]"
  }, {
    "left" : "pg.setParent(this);",
    "right" : "pg.setParent(this);",
    "info" : "ExpressionStatement[72309-72328]:ExpressionStatement[72309-72328]"
  }, {
    "left" : "pg.setPrimary(primary);",
    "right" : "pg.setPrimary(primary);",
    "info" : "ExpressionStatement[72335-72358]:ExpressionStatement[72335-72358]"
  }, {
    "left" : "if (path != null)",
    "right" : "if (path != null)",
    "info" : "IfStatement[72365-72428]:IfStatement[72365-72428]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[72383-72428]:Block[72383-72428]"
  }, {
    "left" : "pg.setPath(savePath(path));",
    "right" : "pg.setPath(savePath(path));",
    "info" : "ExpressionStatement[72393-72420]:ExpressionStatement[72393-72420]"
  }, {
    "left" : "pg.setSize(w, h);",
    "right" : "pg.setSize(w, h);",
    "info" : "ExpressionStatement[72548-72565]:ExpressionStatement[72548-72565]"
  }, {
    "left" : "return pg;",
    "right" : "return pg;",
    "info" : "ReturnStatement[72611-72621]:ReturnStatement[72611-72621]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[72667-73340]:Block[72667-73340]"
  }, {
    "left" : "String msg = ite.getTargetException().getMessage();",
    "right" : "String msg = ite.getTargetException().getMessage();",
    "info" : "VariableDeclarationStatement[72675-72726]:VariableDeclarationStatement[72675-72726]"
  }, {
    "left" : "if ((msg != null) &&\n          (msg.indexOf(\"no jogl in java.library.path\") != -1))",
    "right" : "if ((msg != null) &&\n          (msg.indexOf(\"no jogl in java.library.path\") != -1))",
    "info" : "IfStatement[72733-73333]:IfStatement[72733-73333]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[72817-73039]:Block[72817-73039]"
  }, {
    "left" : "throw new RuntimeException(\"The jogl library folder needs to be \" +\n          \"specified with -Djava.library.path=/path/to/jogl\");",
    "right" : "throw new RuntimeException(\"The jogl library folder needs to be \" +\n          \"specified with -Djava.library.path=/path/to/jogl\");",
    "info" : "ThrowStatement[72900-73030]:ThrowStatement[72900-73030]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[73045-73333]:Block[73045-73333]"
  }, {
    "left" : "ite.getTargetException().printStackTrace();",
    "right" : "ite.getTargetException().printStackTrace();",
    "info" : "ExpressionStatement[73055-73098]:ExpressionStatement[73055-73098]"
  }, {
    "left" : "Throwable target = ite.getTargetException();",
    "right" : "Throwable target = ite.getTargetException();",
    "info" : "VariableDeclarationStatement[73107-73151]:VariableDeclarationStatement[73107-73151]"
  }, {
    "left" : "if (platform == MACOSX)",
    "right" : "if (platform == MACOSX)",
    "info" : "IfStatement[73160-73268]:IfStatement[73160-73268]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[73184-73268]:Block[73184-73268]"
  }, {
    "left" : "target.printStackTrace(System.out);",
    "right" : "target.printStackTrace(System.out);",
    "info" : "ExpressionStatement[73196-73231]:ExpressionStatement[73196-73231]"
  }, {
    "left" : "throw new RuntimeException(target.getMessage());",
    "right" : "throw new RuntimeException(target.getMessage());",
    "info" : "ThrowStatement[73277-73325]:ThrowStatement[73277-73325]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[73377-73944]:Block[73377-73944]"
  }, {
    "left" : "if (external)",
    "right" : "if (external)",
    "info" : "IfStatement[73615-73937]:IfStatement[73615-73937]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[73629-73792]:Block[73629-73792]"
  }, {
    "left" : "throw new RuntimeException(\"You need to use \\\"Import Library\\\" \" +\n                                   \"to add \" + renderer + \" to your sketch.\");",
    "right" : "throw new RuntimeException(\"You need to use \\\"Import Library\\\" \" +\n                                   \"to add \" + renderer + \" to your sketch.\");",
    "info" : "ThrowStatement[73639-73784]:ThrowStatement[73639-73784]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[73798-73937]:Block[73798-73937]"
  }, {
    "left" : "throw new RuntimeException(\"The \" + renderer +\n                                   \" renderer is not in the class path.\");",
    "right" : "throw new RuntimeException(\"The \" + renderer +\n                                   \" renderer is not in the class path.\");",
    "info" : "ThrowStatement[73808-73929]:ThrowStatement[73808-73929]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[73965-74794]:Block[73965-74794]"
  }, {
    "left" : "if ((e instanceof IllegalArgumentException) ||\n          (e instanceof NoSuchMethodException) ||\n          (e instanceof IllegalAccessException))",
    "right" : "if ((e instanceof IllegalArgumentException) ||\n          (e instanceof NoSuchMethodException) ||\n          (e instanceof IllegalAccessException))",
    "info" : "IfStatement[73973-74788]:IfStatement[73973-74788]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[74119-74580]:Block[74119-74580]"
  }, {
    "left" : "if (e.getMessage().contains(\"cannot be <= 0\"))",
    "right" : "if (e.getMessage().contains(\"cannot be <= 0\"))",
    "info" : "IfStatement[74129-74572]:IfStatement[74129-74572]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[74176-74367]:Block[74176-74367]"
  }, {
    "left" : "throw new RuntimeException(e);",
    "right" : "throw new RuntimeException(e);",
    "info" : "ThrowStatement[74326-74356]:ThrowStatement[74326-74356]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[74373-74572]:Block[74373-74572]"
  }, {
    "left" : "e.printStackTrace();",
    "right" : "e.printStackTrace();",
    "info" : "ExpressionStatement[74385-74405]:ExpressionStatement[74385-74405]"
  }, {
    "left" : "String msg = renderer + \" needs to be updated \" +\n            \"for the current release of Processing.\";",
    "right" : "String msg = renderer + \" needs to be updated \" +\n            \"for the current release of Processing.\";",
    "info" : "VariableDeclarationStatement[74416-74519]:VariableDeclarationStatement[74416-74519]"
  }, {
    "left" : "throw new RuntimeException(msg);",
    "right" : "throw new RuntimeException(msg);",
    "info" : "ThrowStatement[74530-74562]:ThrowStatement[74530-74562]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[74586-74788]:Block[74586-74788]"
  }, {
    "left" : "if (platform == MACOSX)",
    "right" : "if (platform == MACOSX)",
    "info" : "IfStatement[74596-74699]:IfStatement[74596-74699]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[74620-74699]:Block[74620-74699]"
  }, {
    "left" : "e.printStackTrace(System.out);",
    "right" : "e.printStackTrace(System.out);",
    "info" : "ExpressionStatement[74632-74662]:ExpressionStatement[74632-74662]"
  }, {
    "left" : "e.printStackTrace();",
    "right" : "e.printStackTrace();",
    "info" : "ExpressionStatement[74708-74728]:ExpressionStatement[74708-74728]"
  }, {
    "left" : "throw new RuntimeException(e.getMessage());",
    "right" : "throw new RuntimeException(e.getMessage());",
    "info" : "ThrowStatement[74737-74780]:ThrowStatement[74737-74780]"
  }, {
    "left" : "protected",
    "right" : "protected",
    "info" : "Modifier[74888-74897]:Modifier[74888-74897]"
  }, {
    "left" : "PGraphics",
    "right" : "PGraphics",
    "info" : "SimpleType[74898-74907]:SimpleType[74898-74907]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[74932-75061]:Block[74932-75061]"
  }, {
    "left" : "return makeGraphics(sketchWidth(), sketchHeight(),\n                        sketchRenderer(), sketchOutputPath(), true);",
    "right" : "return makeGraphics(sketchWidth(), sketchHeight(),\n                        sketchRenderer(), sketchOutputPath(), true);",
    "info" : "ReturnStatement[74938-75057]:ReturnStatement[74938-75057]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[76165-76171]:Modifier[76165-76171]"
  }, {
    "left" : "PImage",
    "right" : "PImage",
    "info" : "SimpleType[76172-76178]:SimpleType[76172-76178]"
  }, {
    "left" : "int w",
    "right" : "int w",
    "info" : "SingleVariableDeclaration[76191-76196]:SingleVariableDeclaration[76191-76196]"
  }, {
    "left" : "int h",
    "right" : "int h",
    "info" : "SingleVariableDeclaration[76198-76203]:SingleVariableDeclaration[76198-76203]"
  }, {
    "left" : "int format",
    "right" : "int format",
    "info" : "SingleVariableDeclaration[76205-76215]:SingleVariableDeclaration[76205-76215]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[76217-76331]:Block[76217-76331]"
  }, {
    "left" : "PImage image = new PImage(w, h, format);",
    "right" : "PImage image = new PImage(w, h, format);",
    "info" : "VariableDeclarationStatement[76223-76263]:VariableDeclarationStatement[76223-76263]"
  }, {
    "left" : "image.parent = this;",
    "right" : "image.parent = this;",
    "info" : "ExpressionStatement[76268-76288]:ExpressionStatement[76268-76288]"
  }, {
    "left" : "return image;",
    "right" : "return image;",
    "info" : "ReturnStatement[76314-76327]:ReturnStatement[76314-76327]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[76540-76546]:Modifier[76540-76546]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[76547-76551]:PrimitiveType[76547-76551]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[76565-79458]:Block[76565-79458]"
  }, {
    "left" : "if (g == null)",
    "right" : "if (g == null)",
    "info" : "IfStatement[76750-76772]:IfStatement[76750-76772]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[76765-76772]:ReturnStatement[76765-76772]"
  }, {
    "left" : "if (!looping && !redraw)",
    "right" : "if (!looping && !redraw)",
    "info" : "IfStatement[76777-76809]:IfStatement[76777-76809]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[76802-76809]:ReturnStatement[76802-76809]"
  }, {
    "left" : "if (insideDraw)",
    "right" : "if (insideDraw)",
    "info" : "IfStatement[77318-77429]:IfStatement[77318-77429]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[77334-77429]:Block[77334-77429]"
  }, {
    "left" : "System.err.println(\"handleDraw() called before finishing\");",
    "right" : "System.err.println(\"handleDraw() called before finishing\");",
    "info" : "ExpressionStatement[77342-77401]:ExpressionStatement[77342-77401]"
  }, {
    "left" : "System.exit(1);",
    "right" : "System.exit(1);",
    "info" : "ExpressionStatement[77408-77423]:ExpressionStatement[77408-77423]"
  }, {
    "left" : "insideDraw = true;",
    "right" : "insideDraw = true;",
    "info" : "ExpressionStatement[77435-77453]:ExpressionStatement[77435-77453]"
  }, {
    "left" : "g.beginDraw();",
    "right" : "g.beginDraw();",
    "info" : "ExpressionStatement[77458-77472]:ExpressionStatement[77458-77472]"
  }, {
    "left" : "if (recorder != null)",
    "right" : "if (recorder != null)",
    "info" : "IfStatement[77477-77534]:IfStatement[77477-77534]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[77499-77534]:Block[77499-77534]"
  }, {
    "left" : "recorder.beginDraw();",
    "right" : "recorder.beginDraw();",
    "info" : "ExpressionStatement[77507-77528]:ExpressionStatement[77507-77528]"
  }, {
    "left" : "long now = System.nanoTime();",
    "right" : "long now = System.nanoTime();",
    "info" : "VariableDeclarationStatement[77540-77569]:VariableDeclarationStatement[77540-77569]"
  }, {
    "left" : "if (frameCount == 0)",
    "right" : "if (frameCount == 0)",
    "info" : "IfStatement[77575-79160]:IfStatement[77575-79160]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[77596-78001]:Block[77596-78001]"
  }, {
    "left" : "setup();",
    "right" : "setup();",
    "info" : "ExpressionStatement[77762-77770]:ExpressionStatement[77762-77770]"
  }, {
    "left" : "defaultSize = false;",
    "right" : "defaultSize = false;",
    "info" : "ExpressionStatement[77974-77994]:ExpressionStatement[77974-77994]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[78007-79160]:Block[78007-79160]"
  }, {
    "left" : "double rate = 1000000.0 / ((now - frameRateLastNanos) / 1000000.0);",
    "right" : "double rate = 1000000.0 / ((now - frameRateLastNanos) / 1000000.0);",
    "info" : "VariableDeclarationStatement[78098-78165]:VariableDeclarationStatement[78098-78165]"
  }, {
    "left" : "float instantaneousRate = (float) (rate / 1000.0);",
    "right" : "float instantaneousRate = (float) (rate / 1000.0);",
    "info" : "VariableDeclarationStatement[78172-78222]:VariableDeclarationStatement[78172-78222]"
  }, {
    "left" : "frameRate = (frameRate * 0.9f) + (instantaneousRate * 0.1f);",
    "right" : "frameRate = (frameRate * 0.9f) + (instantaneousRate * 0.1f);",
    "info" : "ExpressionStatement[78229-78289]:ExpressionStatement[78229-78289]"
  }, {
    "left" : "if (frameCount != 0)",
    "right" : "if (frameCount != 0)",
    "info" : "IfStatement[78297-78357]:IfStatement[78297-78357]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[78318-78357]:Block[78318-78357]"
  }, {
    "left" : "handleMethods(\"pre\");",
    "right" : "handleMethods(\"pre\");",
    "info" : "ExpressionStatement[78328-78349]:ExpressionStatement[78328-78349]"
  }, {
    "left" : "pmouseX = dmouseX;",
    "right" : "pmouseX = dmouseX;",
    "info" : "ExpressionStatement[78495-78513]:ExpressionStatement[78495-78513]"
  }, {
    "left" : "pmouseY = dmouseY;",
    "right" : "pmouseY = dmouseY;",
    "info" : "ExpressionStatement[78520-78538]:ExpressionStatement[78520-78538]"
  }, {
    "left" : "draw();",
    "right" : "draw();",
    "info" : "ExpressionStatement[78583-78590]:ExpressionStatement[78583-78590]"
  }, {
    "left" : "dmouseX = mouseX;",
    "right" : "dmouseX = mouseX;",
    "info" : "ExpressionStatement[78709-78726]:ExpressionStatement[78709-78726]"
  }, {
    "left" : "dmouseY = mouseY;",
    "right" : "dmouseY = mouseY;",
    "info" : "ExpressionStatement[78733-78750]:ExpressionStatement[78733-78750]"
  }, {
    "left" : "dequeueEvents();",
    "right" : "dequeueEvents();",
    "info" : "ExpressionStatement[78980-78996]:ExpressionStatement[78980-78996]"
  }, {
    "left" : "handleMethods(\"draw\");",
    "right" : "handleMethods(\"draw\");",
    "info" : "ExpressionStatement[79004-79026]:ExpressionStatement[79004-79026]"
  }, {
    "left" : "redraw = false;",
    "right" : "redraw = false;",
    "info" : "ExpressionStatement[79034-79049]:ExpressionStatement[79034-79049]"
  }, {
    "left" : "g.endDraw();",
    "right" : "g.endDraw();",
    "info" : "ExpressionStatement[79165-79177]:ExpressionStatement[79165-79177]"
  }, {
    "left" : "if (recorder != null)",
    "right" : "if (recorder != null)",
    "info" : "IfStatement[79263-79318]:IfStatement[79263-79318]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[79285-79318]:Block[79285-79318]"
  }, {
    "left" : "recorder.endDraw();",
    "right" : "recorder.endDraw();",
    "info" : "ExpressionStatement[79293-79312]:ExpressionStatement[79293-79312]"
  }, {
    "left" : "insideDraw = false;",
    "right" : "insideDraw = false;",
    "info" : "ExpressionStatement[79323-79342]:ExpressionStatement[79323-79342]"
  }, {
    "left" : "if (frameCount != 0)",
    "right" : "if (frameCount != 0)",
    "info" : "IfStatement[79348-79405]:IfStatement[79348-79405]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[79369-79405]:Block[79369-79405]"
  }, {
    "left" : "handleMethods(\"post\");",
    "right" : "handleMethods(\"post\");",
    "info" : "ExpressionStatement[79377-79399]:ExpressionStatement[79377-79399]"
  }, {
    "left" : "frameRateLastNanos = now;",
    "right" : "frameRateLastNanos = now;",
    "info" : "ExpressionStatement[79411-79436]:ExpressionStatement[79411-79436]"
  }, {
    "left" : "frameCount++;",
    "right" : "frameCount++;",
    "info" : "ExpressionStatement[79441-79454]:ExpressionStatement[79441-79454]"
  }, {
    "left" : "synchronized",
    "right" : "synchronized",
    "info" : "Modifier[80562-80574]:Modifier[80562-80574]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[80575-80581]:Modifier[80575-80581]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[80582-80586]:PrimitiveType[80582-80586]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[80596-80973]:Block[80596-80973]"
  }, {
    "left" : "if (!looping)",
    "right" : "if (!looping)",
    "info" : "IfStatement[80602-80969]:IfStatement[80602-80969]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[80616-80969]:Block[80616-80969]"
  }, {
    "left" : "redraw = true;",
    "right" : "redraw = true;",
    "info" : "ExpressionStatement[80624-80638]:ExpressionStatement[80624-80638]"
  }, {
    "left" : "synchronized",
    "right" : "synchronized",
    "info" : "Modifier[81343-81355]:Modifier[81343-81355]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[81356-81362]:Modifier[81356-81362]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[81363-81367]:PrimitiveType[81363-81367]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[81375-81428]:Block[81375-81428]"
  }, {
    "left" : "if (!looping)",
    "right" : "if (!looping)",
    "info" : "IfStatement[81381-81424]:IfStatement[81381-81424]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[81395-81424]:Block[81395-81424]"
  }, {
    "left" : "looping = true;",
    "right" : "looping = true;",
    "info" : "ExpressionStatement[81403-81418]:ExpressionStatement[81403-81418]"
  }, {
    "left" : "synchronized",
    "right" : "synchronized",
    "info" : "Modifier[82655-82667]:Modifier[82655-82667]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[82668-82674]:Modifier[82668-82674]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[82675-82679]:PrimitiveType[82675-82679]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[82689-82742]:Block[82689-82742]"
  }, {
    "left" : "if (looping)",
    "right" : "if (looping)",
    "info" : "IfStatement[82695-82738]:IfStatement[82695-82738]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[82708-82738]:Block[82708-82738]"
  }, {
    "left" : "looping = false;",
    "right" : "looping = false;",
    "info" : "ExpressionStatement[82716-82732]:ExpressionStatement[82716-82732]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[82876-82882]:Modifier[82876-82882]"
  }, {
    "left" : "synchronized",
    "right" : "synchronized",
    "info" : "Modifier[83011-83023]:Modifier[83011-83023]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[83024-83028]:PrimitiveType[83024-83028]"
  }, {
    "left" : "Event e",
    "right" : "Event e",
    "info" : "SingleVariableDeclaration[83033-83040]:SingleVariableDeclaration[83033-83040]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[83042-83159]:Block[83042-83159]"
  }, {
    "left" : "if (count == queue.length)",
    "right" : "if (count == queue.length)",
    "info" : "IfStatement[83050-83127]:IfStatement[83050-83127]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[83077-83127]:Block[83077-83127]"
  }, {
    "left" : "queue = (Event[]) expand(queue);",
    "right" : "queue = (Event[]) expand(queue);",
    "info" : "ExpressionStatement[83087-83119]:ExpressionStatement[83087-83119]"
  }, {
    "left" : "queue[count++] = e;",
    "right" : "queue[count++] = e;",
    "info" : "ExpressionStatement[83134-83153]:ExpressionStatement[83134-83153]"
  }, {
    "left" : "synchronized",
    "right" : "synchronized",
    "info" : "Modifier[83165-83177]:Modifier[83165-83177]"
  }, {
    "left" : "Event",
    "right" : "Event",
    "info" : "SimpleType[83178-83183]:SimpleType[83178-83183]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[83193-83483]:Block[83193-83483]"
  }, {
    "left" : "if (offset == count)",
    "right" : "if (offset == count)",
    "info" : "IfStatement[83201-83303]:IfStatement[83201-83303]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[83222-83303]:Block[83222-83303]"
  }, {
    "left" : "throw new RuntimeException(\"Nothing left on the event queue.\");",
    "right" : "throw new RuntimeException(\"Nothing left on the event queue.\");",
    "info" : "ThrowStatement[83232-83295]:ThrowStatement[83232-83295]"
  }, {
    "left" : "Event outgoing = queue[offset++];",
    "right" : "Event outgoing = queue[offset++];",
    "info" : "VariableDeclarationStatement[83310-83343]:VariableDeclarationStatement[83310-83343]"
  }, {
    "left" : "if (offset == count)",
    "right" : "if (offset == count)",
    "info" : "IfStatement[83350-83454]:IfStatement[83350-83454]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[83371-83454]:Block[83371-83454]"
  }, {
    "left" : "offset = 0;",
    "right" : "offset = 0;",
    "info" : "ExpressionStatement[83416-83427]:ExpressionStatement[83416-83427]"
  }, {
    "left" : "count = 0;",
    "right" : "count = 0;",
    "info" : "ExpressionStatement[83436-83446]:ExpressionStatement[83436-83446]"
  }, {
    "left" : "return outgoing;",
    "right" : "return outgoing;",
    "info" : "ReturnStatement[83461-83477]:ReturnStatement[83461-83477]"
  }, {
    "left" : "synchronized",
    "right" : "synchronized",
    "info" : "Modifier[83489-83501]:Modifier[83489-83501]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[83502-83509]:PrimitiveType[83502-83509]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[83522-83554]:Block[83522-83554]"
  }, {
    "left" : "return count != 0;",
    "right" : "return count != 0;",
    "info" : "ReturnStatement[83530-83548]:ReturnStatement[83530-83548]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[83693-83699]:Modifier[83693-83699]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[83700-83704]:PrimitiveType[83700-83704]"
  }, {
    "left" : "processing.event.Event pe",
    "right" : "processing.event.Event pe",
    "info" : "SingleVariableDeclaration[83715-83740]:SingleVariableDeclaration[83715-83740]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[83742-83821]:Block[83742-83821]"
  }, {
    "left" : "eventQueue.add(pe);",
    "right" : "eventQueue.add(pe);",
    "info" : "ExpressionStatement[83748-83767]:ExpressionStatement[83748-83767]"
  }, {
    "left" : "if (!looping)",
    "right" : "if (!looping)",
    "info" : "IfStatement[83773-83817]:IfStatement[83773-83817]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[83787-83817]:Block[83787-83817]"
  }, {
    "left" : "dequeueEvents();",
    "right" : "dequeueEvents();",
    "info" : "ExpressionStatement[83795-83811]:ExpressionStatement[83795-83811]"
  }, {
    "left" : "protected",
    "right" : "protected",
    "info" : "Modifier[83826-83835]:Modifier[83826-83835]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[83836-83840]:PrimitiveType[83836-83840]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[83857-84138]:Block[83857-84138]"
  }, {
    "left" : "while (eventQueue.available())",
    "right" : "while (eventQueue.available())",
    "info" : "WhileStatement[83863-84134]:WhileStatement[83863-84134]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[83894-84134]:Block[83894-84134]"
  }, {
    "left" : "Event e = eventQueue.remove();",
    "right" : "Event e = eventQueue.remove();",
    "info" : "VariableDeclarationStatement[83902-83932]:VariableDeclarationStatement[83902-83932]"
  }, {
    "left" : "switch (e.getFlavor()) {\n      case Event.MOUSE:\n        handleMouseEvent((MouseEvent) e);\n        break;\n      case Event.KEY:\n        handleKeyEvent((KeyEvent) e);\n        break;\n      }",
    "right" : "switch (e.getFlavor()) {\n      case Event.MOUSE:\n        handleMouseEvent((MouseEvent) e);\n        break;\n      case Event.KEY:\n        handleKeyEvent((KeyEvent) e);\n        break;\n      }",
    "info" : "SwitchStatement[83940-84128]:SwitchStatement[83940-84128]"
  }, {
    "left" : "case Event.MOUSE:",
    "right" : "case Event.MOUSE:",
    "info" : "SwitchCase[83971-83988]:SwitchCase[83971-83988]"
  }, {
    "left" : "handleMouseEvent((MouseEvent) e);",
    "right" : "handleMouseEvent((MouseEvent) e);",
    "info" : "ExpressionStatement[83997-84030]:ExpressionStatement[83997-84030]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[84039-84045]:BreakStatement[84039-84045]"
  }, {
    "left" : "case Event.KEY:",
    "right" : "case Event.KEY:",
    "info" : "SwitchCase[84052-84067]:SwitchCase[84052-84067]"
  }, {
    "left" : "handleKeyEvent((KeyEvent) e);",
    "right" : "handleKeyEvent((KeyEvent) e);",
    "info" : "ExpressionStatement[84076-84105]:ExpressionStatement[84076-84105]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[84114-84120]:BreakStatement[84114-84120]"
  }, {
    "left" : "protected",
    "right" : "protected",
    "info" : "Modifier[84504-84513]:Modifier[84504-84513]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[84514-84518]:PrimitiveType[84514-84518]"
  }, {
    "left" : "MouseEvent event",
    "right" : "MouseEvent event",
    "info" : "SingleVariableDeclaration[84536-84552]:SingleVariableDeclaration[84536-84552]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[84554-87177]:Block[84554-87177]"
  }, {
    "left" : "final int action = event.getAction();",
    "right" : "final int action = event.getAction();",
    "info" : "VariableDeclarationStatement[85074-85111]:VariableDeclarationStatement[85074-85111]"
  }, {
    "left" : "if (action == MouseEvent.DRAG ||\n        action == MouseEvent.MOVE ||\n        action == MouseEvent.PRESS)",
    "right" : "if (action == MouseEvent.DRAG ||\n        action == MouseEvent.MOVE ||\n        action == MouseEvent.PRESS)",
    "info" : "IfStatement[85116-85337]:IfStatement[85116-85337]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[85222-85337]:Block[85222-85337]"
  }, {
    "left" : "pmouseX = emouseX;",
    "right" : "pmouseX = emouseX;",
    "info" : "ExpressionStatement[85230-85248]:ExpressionStatement[85230-85248]"
  }, {
    "left" : "pmouseY = emouseY;",
    "right" : "pmouseY = emouseY;",
    "info" : "ExpressionStatement[85255-85273]:ExpressionStatement[85255-85273]"
  }, {
    "left" : "mouseX = event.getX();",
    "right" : "mouseX = event.getX();",
    "info" : "ExpressionStatement[85280-85302]:ExpressionStatement[85280-85302]"
  }, {
    "left" : "mouseY = event.getY();",
    "right" : "mouseY = event.getY();",
    "info" : "ExpressionStatement[85309-85331]:ExpressionStatement[85309-85331]"
  }, {
    "left" : "mouseButton = event.getButton();",
    "right" : "mouseButton = event.getButton();",
    "info" : "ExpressionStatement[85390-85422]:ExpressionStatement[85390-85422]"
  }, {
    "left" : "if (firstMouse)",
    "right" : "if (firstMouse)",
    "info" : "IfStatement[85928-86073]:IfStatement[85928-86073]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[85944-86073]:Block[85944-86073]"
  }, {
    "left" : "pmouseX = mouseX;",
    "right" : "pmouseX = mouseX;",
    "info" : "ExpressionStatement[85952-85969]:ExpressionStatement[85952-85969]"
  }, {
    "left" : "pmouseY = mouseY;",
    "right" : "pmouseY = mouseY;",
    "info" : "ExpressionStatement[85976-85993]:ExpressionStatement[85976-85993]"
  }, {
    "left" : "dmouseX = mouseX;",
    "right" : "dmouseX = mouseX;",
    "info" : "ExpressionStatement[86000-86017]:ExpressionStatement[86000-86017]"
  }, {
    "left" : "dmouseY = mouseY;",
    "right" : "dmouseY = mouseY;",
    "info" : "ExpressionStatement[86024-86041]:ExpressionStatement[86024-86041]"
  }, {
    "left" : "firstMouse = false;",
    "right" : "firstMouse = false;",
    "info" : "ExpressionStatement[86048-86067]:ExpressionStatement[86048-86067]"
  }, {
    "left" : "mouseEvent = event;",
    "right" : "mouseEvent = event;",
    "info" : "ExpressionStatement[86079-86098]:ExpressionStatement[86079-86098]"
  }, {
    "left" : "switch (action) {\n    case MouseEvent.PRESS:\n      mousePressed = true;\n      break;\n    case MouseEvent.RELEASE:\n      mousePressed = false;\n      break;\n    }",
    "right" : "switch (action) {\n    case MouseEvent.PRESS:\n      mousePressed = true;\n      break;\n    case MouseEvent.RELEASE:\n      mousePressed = false;\n      break;\n    }",
    "info" : "SwitchStatement[86203-86363]:SwitchStatement[86203-86363]"
  }, {
    "left" : "case MouseEvent.PRESS:",
    "right" : "case MouseEvent.PRESS:",
    "info" : "SwitchCase[86225-86247]:SwitchCase[86225-86247]"
  }, {
    "left" : "mousePressed = true;",
    "right" : "mousePressed = true;",
    "info" : "ExpressionStatement[86254-86274]:ExpressionStatement[86254-86274]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[86281-86287]:BreakStatement[86281-86287]"
  }, {
    "left" : "case MouseEvent.RELEASE:",
    "right" : "case MouseEvent.RELEASE:",
    "info" : "SwitchCase[86292-86316]:SwitchCase[86292-86316]"
  }, {
    "left" : "mousePressed = false;",
    "right" : "mousePressed = false;",
    "info" : "ExpressionStatement[86323-86344]:ExpressionStatement[86323-86344]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[86351-86357]:BreakStatement[86351-86357]"
  }, {
    "left" : "handleMethods(\"mouseEvent\", new Object[] { event });",
    "right" : "handleMethods(\"mouseEvent\", new Object[] { event });",
    "info" : "ExpressionStatement[86369-86421]:ExpressionStatement[86369-86421]"
  }, {
    "left" : "switch (action) {\n    case MouseEvent.PRESS:\n//      mousePressed = true;\n      mousePressed(event);\n      break;\n    case MouseEvent.RELEASE:\n//      mousePressed = false;\n      mouseReleased(event);\n      break;\n    case MouseEvent.CLICK:\n      mouseClicked(event);\n      break;\n    case MouseEvent.DRAG:\n      mouseDragged(event);\n      break;\n    case MouseEvent.MOVE:\n      mouseMoved(event);\n      break;\n    case MouseEvent.ENTER:\n      mouseEntered(event);\n      break;\n    case MouseEvent.EXIT:\n      mouseExited(event);\n      break;\n    case MouseEvent.WHEEL:\n      mouseWheel(event);\n      break;\n    }",
    "right" : "switch (action) {\n    case MouseEvent.PRESS:\n//      mousePressed = true;\n      mousePressed(event);\n      break;\n    case MouseEvent.RELEASE:\n//      mousePressed = false;\n      mouseReleased(event);\n      break;\n    case MouseEvent.CLICK:\n      mouseClicked(event);\n      break;\n    case MouseEvent.DRAG:\n      mouseDragged(event);\n      break;\n    case MouseEvent.MOVE:\n      mouseMoved(event);\n      break;\n    case MouseEvent.ENTER:\n      mouseEntered(event);\n      break;\n    case MouseEvent.EXIT:\n      mouseExited(event);\n      break;\n    case MouseEvent.WHEEL:\n      mouseWheel(event);\n      break;\n    }",
    "info" : "SwitchStatement[86427-87040]:SwitchStatement[86427-87040]"
  }, {
    "left" : "case MouseEvent.PRESS:",
    "right" : "case MouseEvent.PRESS:",
    "info" : "SwitchCase[86449-86471]:SwitchCase[86449-86471]"
  }, {
    "left" : "mousePressed(event);",
    "right" : "mousePressed(event);",
    "info" : "ExpressionStatement[86507-86527]:ExpressionStatement[86507-86527]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[86534-86540]:BreakStatement[86534-86540]"
  }, {
    "left" : "case MouseEvent.RELEASE:",
    "right" : "case MouseEvent.RELEASE:",
    "info" : "SwitchCase[86545-86569]:SwitchCase[86545-86569]"
  }, {
    "left" : "mouseReleased(event);",
    "right" : "mouseReleased(event);",
    "info" : "ExpressionStatement[86606-86627]:ExpressionStatement[86606-86627]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[86634-86640]:BreakStatement[86634-86640]"
  }, {
    "left" : "case MouseEvent.CLICK:",
    "right" : "case MouseEvent.CLICK:",
    "info" : "SwitchCase[86645-86667]:SwitchCase[86645-86667]"
  }, {
    "left" : "mouseClicked(event);",
    "right" : "mouseClicked(event);",
    "info" : "ExpressionStatement[86674-86694]:ExpressionStatement[86674-86694]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[86701-86707]:BreakStatement[86701-86707]"
  }, {
    "left" : "case MouseEvent.DRAG:",
    "right" : "case MouseEvent.DRAG:",
    "info" : "SwitchCase[86712-86733]:SwitchCase[86712-86733]"
  }, {
    "left" : "mouseDragged(event);",
    "right" : "mouseDragged(event);",
    "info" : "ExpressionStatement[86740-86760]:ExpressionStatement[86740-86760]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[86767-86773]:BreakStatement[86767-86773]"
  }, {
    "left" : "case MouseEvent.MOVE:",
    "right" : "case MouseEvent.MOVE:",
    "info" : "SwitchCase[86778-86799]:SwitchCase[86778-86799]"
  }, {
    "left" : "mouseMoved(event);",
    "right" : "mouseMoved(event);",
    "info" : "ExpressionStatement[86806-86824]:ExpressionStatement[86806-86824]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[86831-86837]:BreakStatement[86831-86837]"
  }, {
    "left" : "case MouseEvent.ENTER:",
    "right" : "case MouseEvent.ENTER:",
    "info" : "SwitchCase[86842-86864]:SwitchCase[86842-86864]"
  }, {
    "left" : "mouseEntered(event);",
    "right" : "mouseEntered(event);",
    "info" : "ExpressionStatement[86871-86891]:ExpressionStatement[86871-86891]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[86898-86904]:BreakStatement[86898-86904]"
  }, {
    "left" : "case MouseEvent.EXIT:",
    "right" : "case MouseEvent.EXIT:",
    "info" : "SwitchCase[86909-86930]:SwitchCase[86909-86930]"
  }, {
    "left" : "mouseExited(event);",
    "right" : "mouseExited(event);",
    "info" : "ExpressionStatement[86937-86956]:ExpressionStatement[86937-86956]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[86963-86969]:BreakStatement[86963-86969]"
  }, {
    "left" : "case MouseEvent.WHEEL:",
    "right" : "case MouseEvent.WHEEL:",
    "info" : "SwitchCase[86974-86996]:SwitchCase[86974-86996]"
  }, {
    "left" : "mouseWheel(event);",
    "right" : "mouseWheel(event);",
    "info" : "ExpressionStatement[87003-87021]:ExpressionStatement[87003-87021]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[87028-87034]:BreakStatement[87028-87034]"
  }, {
    "left" : "if ((action == MouseEvent.DRAG) ||\n        (action == MouseEvent.MOVE))",
    "right" : "if ((action == MouseEvent.DRAG) ||\n        (action == MouseEvent.MOVE))",
    "info" : "IfStatement[87046-87173]:IfStatement[87046-87173]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[87118-87173]:Block[87118-87173]"
  }, {
    "left" : "emouseX = mouseX;",
    "right" : "emouseX = mouseX;",
    "info" : "ExpressionStatement[87126-87143]:ExpressionStatement[87126-87143]"
  }, {
    "left" : "emouseY = mouseY;",
    "right" : "emouseY = mouseY;",
    "info" : "ExpressionStatement[87150-87167]:ExpressionStatement[87150-87167]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[88175-88181]:Modifier[88175-88181]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[88182-88186]:PrimitiveType[88182-88186]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[88202-88205]:Block[88202-88205]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[88210-88216]:Modifier[88210-88216]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[88217-88221]:PrimitiveType[88217-88221]"
  }, {
    "left" : "MouseEvent event",
    "right" : "MouseEvent event",
    "info" : "SingleVariableDeclaration[88235-88251]:SingleVariableDeclaration[88235-88251]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[88253-88278]:Block[88253-88278]"
  }, {
    "left" : "mousePressed();",
    "right" : "mousePressed();",
    "info" : "ExpressionStatement[88259-88274]:ExpressionStatement[88259-88274]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[88840-88846]:Modifier[88840-88846]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[88847-88851]:PrimitiveType[88847-88851]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[88868-88871]:Block[88868-88871]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[88876-88882]:Modifier[88876-88882]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[88883-88887]:PrimitiveType[88883-88887]"
  }, {
    "left" : "MouseEvent event",
    "right" : "MouseEvent event",
    "info" : "SingleVariableDeclaration[88902-88918]:SingleVariableDeclaration[88902-88918]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[88920-88946]:Block[88920-88946]"
  }, {
    "left" : "mouseReleased();",
    "right" : "mouseReleased();",
    "info" : "ExpressionStatement[88926-88942]:ExpressionStatement[88926-88942]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[89735-89741]:Modifier[89735-89741]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[89742-89746]:PrimitiveType[89742-89746]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[89762-89765]:Block[89762-89765]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[89770-89776]:Modifier[89770-89776]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[89777-89781]:PrimitiveType[89777-89781]"
  }, {
    "left" : "MouseEvent event",
    "right" : "MouseEvent event",
    "info" : "SingleVariableDeclaration[89795-89811]:SingleVariableDeclaration[89795-89811]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[89813-89838]:Block[89813-89838]"
  }, {
    "left" : "mouseClicked();",
    "right" : "mouseClicked();",
    "info" : "ExpressionStatement[89819-89834]:ExpressionStatement[89819-89834]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[90423-90429]:Modifier[90423-90429]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[90430-90434]:PrimitiveType[90430-90434]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[90450-90453]:Block[90450-90453]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[90458-90464]:Modifier[90458-90464]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[90465-90469]:PrimitiveType[90465-90469]"
  }, {
    "left" : "MouseEvent event",
    "right" : "MouseEvent event",
    "info" : "SingleVariableDeclaration[90483-90499]:SingleVariableDeclaration[90483-90499]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[90501-90526]:Block[90501-90526]"
  }, {
    "left" : "mouseDragged();",
    "right" : "mouseDragged();",
    "info" : "ExpressionStatement[90507-90522]:ExpressionStatement[90507-90522]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[91108-91114]:Modifier[91108-91114]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[91115-91119]:PrimitiveType[91115-91119]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[91133-91136]:Block[91133-91136]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[91141-91147]:Modifier[91141-91147]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[91148-91152]:PrimitiveType[91148-91152]"
  }, {
    "left" : "MouseEvent event",
    "right" : "MouseEvent event",
    "info" : "SingleVariableDeclaration[91164-91180]:SingleVariableDeclaration[91164-91180]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[91182-91205]:Block[91182-91205]"
  }, {
    "left" : "mouseMoved();",
    "right" : "mouseMoved();",
    "info" : "ExpressionStatement[91188-91201]:ExpressionStatement[91188-91201]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[91210-91216]:Modifier[91210-91216]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[91217-91221]:PrimitiveType[91217-91221]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[91237-91240]:Block[91237-91240]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[91245-91251]:Modifier[91245-91251]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[91252-91256]:PrimitiveType[91252-91256]"
  }, {
    "left" : "MouseEvent event",
    "right" : "MouseEvent event",
    "info" : "SingleVariableDeclaration[91270-91286]:SingleVariableDeclaration[91270-91286]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[91288-91313]:Block[91288-91313]"
  }, {
    "left" : "mouseEntered();",
    "right" : "mouseEntered();",
    "info" : "ExpressionStatement[91294-91309]:ExpressionStatement[91294-91309]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[91318-91324]:Modifier[91318-91324]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[91325-91329]:PrimitiveType[91325-91329]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[91344-91347]:Block[91344-91347]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[91352-91358]:Modifier[91352-91358]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[91359-91363]:PrimitiveType[91359-91363]"
  }, {
    "left" : "MouseEvent event",
    "right" : "MouseEvent event",
    "info" : "SingleVariableDeclaration[91376-91392]:SingleVariableDeclaration[91376-91392]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[91394-91418]:Block[91394-91418]"
  }, {
    "left" : "mouseExited();",
    "right" : "mouseExited();",
    "info" : "ExpressionStatement[91400-91414]:ExpressionStatement[91400-91414]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[91449-91455]:Modifier[91449-91455]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[91456-91460]:PrimitiveType[91456-91460]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[91474-91477]:Block[91474-91477]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[92110-92116]:Modifier[92110-92116]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[92117-92121]:PrimitiveType[92117-92121]"
  }, {
    "left" : "MouseEvent event",
    "right" : "MouseEvent event",
    "info" : "SingleVariableDeclaration[92133-92149]:SingleVariableDeclaration[92133-92149]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[92151-92174]:Block[92151-92174]"
  }, {
    "left" : "mouseWheel();",
    "right" : "mouseWheel();",
    "info" : "ExpressionStatement[92157-92170]:ExpressionStatement[92157-92170]"
  }, {
    "left" : "protected",
    "right" : "protected",
    "info" : "Modifier[92247-92256]:Modifier[92247-92256]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[92257-92261]:PrimitiveType[92257-92261]"
  }, {
    "left" : "KeyEvent event",
    "right" : "KeyEvent event",
    "info" : "SingleVariableDeclaration[92277-92291]:SingleVariableDeclaration[92277-92291]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[92293-93960]:Block[92293-93960]"
  }, {
    "left" : "keyEvent = event;",
    "right" : "keyEvent = event;",
    "info" : "ExpressionStatement[92299-92316]:ExpressionStatement[92299-92316]"
  }, {
    "left" : "key = event.getKey();",
    "right" : "key = event.getKey();",
    "info" : "ExpressionStatement[92321-92342]:ExpressionStatement[92321-92342]"
  }, {
    "left" : "keyCode = event.getKeyCode();",
    "right" : "keyCode = event.getKeyCode();",
    "info" : "ExpressionStatement[92347-92376]:ExpressionStatement[92347-92376]"
  }, {
    "left" : "switch (event.getAction()) {\n    case KeyEvent.PRESS:\n      keyPressed = true;\n      keyPressed(keyEvent);\n      break;\n    case KeyEvent.RELEASE:\n      keyPressed = false;\n      keyReleased(keyEvent);\n      break;\n    case KeyEvent.TYPE:\n      keyTyped(keyEvent);\n      break;\n    }",
    "right" : "switch (event.getAction()) {\n    case KeyEvent.PRESS:\n      keyPressed = true;\n      keyPressed(keyEvent);\n      break;\n    case KeyEvent.RELEASE:\n      keyPressed = false;\n      keyReleased(keyEvent);\n      break;\n    case KeyEvent.TYPE:\n      keyTyped(keyEvent);\n      break;\n    }",
    "info" : "SwitchStatement[92382-92665]:SwitchStatement[92382-92665]"
  }, {
    "left" : "case KeyEvent.PRESS:",
    "right" : "case KeyEvent.PRESS:",
    "info" : "SwitchCase[92415-92435]:SwitchCase[92415-92435]"
  }, {
    "left" : "keyPressed = true;",
    "right" : "keyPressed = true;",
    "info" : "ExpressionStatement[92442-92460]:ExpressionStatement[92442-92460]"
  }, {
    "left" : "keyPressed(keyEvent);",
    "right" : "keyPressed(keyEvent);",
    "info" : "ExpressionStatement[92467-92488]:ExpressionStatement[92467-92488]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[92495-92501]:BreakStatement[92495-92501]"
  }, {
    "left" : "case KeyEvent.RELEASE:",
    "right" : "case KeyEvent.RELEASE:",
    "info" : "SwitchCase[92506-92528]:SwitchCase[92506-92528]"
  }, {
    "left" : "keyPressed = false;",
    "right" : "keyPressed = false;",
    "info" : "ExpressionStatement[92535-92554]:ExpressionStatement[92535-92554]"
  }, {
    "left" : "keyReleased(keyEvent);",
    "right" : "keyReleased(keyEvent);",
    "info" : "ExpressionStatement[92561-92583]:ExpressionStatement[92561-92583]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[92590-92596]:BreakStatement[92590-92596]"
  }, {
    "left" : "case KeyEvent.TYPE:",
    "right" : "case KeyEvent.TYPE:",
    "info" : "SwitchCase[92601-92620]:SwitchCase[92601-92620]"
  }, {
    "left" : "keyTyped(keyEvent);",
    "right" : "keyTyped(keyEvent);",
    "info" : "ExpressionStatement[92627-92646]:ExpressionStatement[92627-92646]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[92653-92659]:BreakStatement[92653-92659]"
  }, {
    "left" : "handleMethods(\"keyEvent\", new Object[] { event });",
    "right" : "handleMethods(\"keyEvent\", new Object[] { event });",
    "info" : "ExpressionStatement[92793-92843]:ExpressionStatement[92793-92843]"
  }, {
    "left" : "if (event.getAction() == KeyEvent.PRESS)",
    "right" : "if (event.getAction() == KeyEvent.PRESS)",
    "info" : "IfStatement[92967-93956]:IfStatement[92967-93956]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[93008-93956]:Block[93008-93956]"
  }, {
    "left" : "if (key == ESC)",
    "right" : "if (key == ESC)",
    "info" : "IfStatement[93072-93113]:IfStatement[93072-93113]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[93088-93113]:Block[93088-93113]"
  }, {
    "left" : "exit();",
    "right" : "exit();",
    "info" : "ExpressionStatement[93098-93105]:ExpressionStatement[93098-93105]"
  }, {
    "left" : "if (external &&\n          event.getKeyCode() == 'W' &&\n          ((event.isMetaDown() && platform == MACOSX) ||\n           (event.isControlDown() && platform != MACOSX)))",
    "right" : "if (external &&\n          event.getKeyCode() == 'W' &&\n          ((event.isMetaDown() && platform == MACOSX) ||\n           (event.isControlDown() && platform != MACOSX)))",
    "info" : "IfStatement[93413-93950]:IfStatement[93413-93950]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[93584-93950]:Block[93584-93950]"
  }, {
    "left" : "exit();",
    "right" : "exit();",
    "info" : "ExpressionStatement[93935-93942]:ExpressionStatement[93935-93942]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[97300-97306]:Modifier[97300-97306]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[97307-97311]:PrimitiveType[97307-97311]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[97325-97328]:Block[97325-97328]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[97333-97339]:Modifier[97333-97339]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[97340-97344]:PrimitiveType[97340-97344]"
  }, {
    "left" : "KeyEvent event",
    "right" : "KeyEvent event",
    "info" : "SingleVariableDeclaration[97356-97370]:SingleVariableDeclaration[97356-97370]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[97372-97395]:Block[97372-97395]"
  }, {
    "left" : "keyPressed();",
    "right" : "keyPressed();",
    "info" : "ExpressionStatement[97378-97391]:ExpressionStatement[97378-97391]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[97860-97866]:Modifier[97860-97866]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[97867-97871]:PrimitiveType[97867-97871]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[97886-97889]:Block[97886-97889]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[97894-97900]:Modifier[97894-97900]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[97901-97905]:PrimitiveType[97901-97905]"
  }, {
    "left" : "KeyEvent event",
    "right" : "KeyEvent event",
    "info" : "SingleVariableDeclaration[97918-97932]:SingleVariableDeclaration[97918-97932]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[97934-97958]:Block[97934-97958]"
  }, {
    "left" : "keyReleased();",
    "right" : "keyReleased();",
    "info" : "ExpressionStatement[97940-97954]:ExpressionStatement[97940-97954]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[98553-98559]:Modifier[98553-98559]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[98560-98564]:PrimitiveType[98560-98564]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[98576-98579]:Block[98576-98579]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[98584-98590]:Modifier[98584-98590]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[98591-98595]:PrimitiveType[98591-98595]"
  }, {
    "left" : "KeyEvent event",
    "right" : "KeyEvent event",
    "info" : "SingleVariableDeclaration[98605-98619]:SingleVariableDeclaration[98605-98619]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[98621-98642]:Block[98621-98642]"
  }, {
    "left" : "keyTyped();",
    "right" : "keyTyped();",
    "info" : "ExpressionStatement[98627-98638]:ExpressionStatement[98627-98638]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[98853-98859]:Modifier[98853-98859]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[98860-98864]:PrimitiveType[98860-98864]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[98879-98882]:Block[98879-98882]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[98887-98893]:Modifier[98887-98893]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[98894-98898]:PrimitiveType[98894-98898]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[98911-98914]:Block[98911-98914]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[99603-99609]:Modifier[99603-99609]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[99610-99613]:PrimitiveType[99610-99613]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[99623-99690]:Block[99623-99690]"
  }, {
    "left" : "return (int) (System.currentTimeMillis() - millisOffset);",
    "right" : "return (int) (System.currentTimeMillis() - millisOffset);",
    "info" : "ReturnStatement[99629-99686]:ReturnStatement[99629-99686]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[100122-100128]:Modifier[100122-100128]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[100129-100135]:Modifier[100129-100135]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[100136-100139]:PrimitiveType[100136-100139]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[100149-100210]:Block[100149-100210]"
  }, {
    "left" : "return Calendar.getInstance().get(Calendar.SECOND);",
    "right" : "return Calendar.getInstance().get(Calendar.SECOND);",
    "info" : "ReturnStatement[100155-100206]:ReturnStatement[100155-100206]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[100652-100658]:Modifier[100652-100658]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[100659-100665]:Modifier[100659-100665]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[100666-100669]:PrimitiveType[100666-100669]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[100679-100740]:Block[100679-100740]"
  }, {
    "left" : "return Calendar.getInstance().get(Calendar.MINUTE);",
    "right" : "return Calendar.getInstance().get(Calendar.MINUTE);",
    "info" : "ReturnStatement[100685-100736]:ReturnStatement[100685-100736]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[101171-101177]:Modifier[101171-101177]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[101178-101184]:Modifier[101178-101184]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[101185-101188]:PrimitiveType[101185-101188]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[101196-101262]:Block[101196-101262]"
  }, {
    "left" : "return Calendar.getInstance().get(Calendar.HOUR_OF_DAY);",
    "right" : "return Calendar.getInstance().get(Calendar.HOUR_OF_DAY);",
    "info" : "ReturnStatement[101202-101258]:ReturnStatement[101202-101258]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[101906-101912]:Modifier[101906-101912]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[101913-101919]:Modifier[101913-101919]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[101920-101923]:PrimitiveType[101920-101923]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[101930-101997]:Block[101930-101997]"
  }, {
    "left" : "return Calendar.getInstance().get(Calendar.DAY_OF_MONTH);",
    "right" : "return Calendar.getInstance().get(Calendar.DAY_OF_MONTH);",
    "info" : "ReturnStatement[101936-101993]:ReturnStatement[101936-101993]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[102430-102436]:Modifier[102430-102436]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[102437-102443]:Modifier[102437-102443]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[102444-102447]:PrimitiveType[102444-102447]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[102456-102581]:Block[102456-102581]"
  }, {
    "left" : "return Calendar.getInstance().get(Calendar.MONTH) + 1;",
    "right" : "return Calendar.getInstance().get(Calendar.MONTH) + 1;",
    "info" : "ReturnStatement[102523-102577]:ReturnStatement[102523-102577]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[103128-103134]:Modifier[103128-103134]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[103135-103141]:Modifier[103135-103141]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[103142-103145]:PrimitiveType[103142-103145]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[103153-103212]:Block[103153-103212]"
  }, {
    "left" : "return Calendar.getInstance().get(Calendar.YEAR);",
    "right" : "return Calendar.getInstance().get(Calendar.YEAR);",
    "info" : "ReturnStatement[103159-103208]:ReturnStatement[103159-103208]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[104062-104068]:Modifier[104062-104068]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[104069-104073]:PrimitiveType[104069-104073]"
  }, {
    "left" : "int napTime",
    "right" : "int napTime",
    "info" : "SingleVariableDeclaration[104080-104091]:SingleVariableDeclaration[104080-104091]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[104093-104248]:Block[104093-104248]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[104153-104228]:TryStatement[104153-104228]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[104157-104193]:Block[104157-104193]"
  }, {
    "left" : "Thread.sleep(napTime);",
    "right" : "Thread.sleep(napTime);",
    "info" : "ExpressionStatement[104165-104187]:ExpressionStatement[104165-104187]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[104225-104228]:Block[104225-104228]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[104995-105001]:Modifier[104995-105001]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[105002-105006]:PrimitiveType[105002-105006]"
  }, {
    "left" : "float fps",
    "right" : "float fps",
    "info" : "SingleVariableDeclaration[105017-105026]:SingleVariableDeclaration[105017-105026]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[105028-105064]:Block[105028-105064]"
  }, {
    "left" : "surface.setFrameRate(fps);",
    "right" : "surface.setFrameRate(fps);",
    "info" : "ExpressionStatement[105034-105060]:ExpressionStatement[105034-105060]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[105770-105776]:Modifier[105770-105776]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[105777-105781]:PrimitiveType[105777-105781]"
  }, {
    "left" : "String url",
    "right" : "String url",
    "info" : "SingleVariableDeclaration[105787-105797]:SingleVariableDeclaration[105787-105797]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[105799-106138]:Block[105799-106138]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[105805-106134]:TryStatement[105805-106134]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[105809-106013]:Block[105809-106013]"
  }, {
    "left" : "if (Desktop.isDesktopSupported())",
    "right" : "if (Desktop.isDesktopSupported())",
    "info" : "IfStatement[105817-106007]:IfStatement[105817-106007]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[105851-105911]:Block[105851-105911]"
  }, {
    "left" : "Desktop.getDesktop().browse(new URI(url));",
    "right" : "Desktop.getDesktop().browse(new URI(url));",
    "info" : "ExpressionStatement[105861-105903]:ExpressionStatement[105861-105903]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[105917-106007]:Block[105917-106007]"
  }, {
    "left" : "launch(url);",
    "right" : "launch(url);",
    "info" : "ExpressionStatement[105987-105999]:ExpressionStatement[105987-105999]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[106036-106070]:Block[106036-106070]"
  }, {
    "left" : "e.printStackTrace();",
    "right" : "e.printStackTrace();",
    "info" : "ExpressionStatement[106044-106064]:ExpressionStatement[106044-106064]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[106100-106134]:Block[106100-106134]"
  }, {
    "left" : "e.printStackTrace();",
    "right" : "e.printStackTrace();",
    "info" : "ExpressionStatement[106108-106128]:ExpressionStatement[106108-106128]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[108060-108066]:Modifier[108060-108066]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[108067-108073]:Modifier[108067-108073]"
  }, {
    "left" : "Process",
    "right" : "Process",
    "info" : "SimpleType[108074-108081]:SimpleType[108074-108081]"
  }, {
    "left" : "String... args",
    "right" : "String... args",
    "info" : "SingleVariableDeclaration[108089-108103]:SingleVariableDeclaration[108089-108103]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[108105-109953]:Block[108105-109953]"
  }, {
    "left" : "String[] params = null;",
    "right" : "String[] params = null;",
    "info" : "VariableDeclarationStatement[108111-108134]:VariableDeclarationStatement[108111-108134]"
  }, {
    "left" : "if (platform == WINDOWS)",
    "right" : "if (platform == WINDOWS)",
    "info" : "IfStatement[108140-109606]:IfStatement[108140-109606]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[108165-108436]:Block[108165-108436]"
  }, {
    "left" : "params = new String[] { \"cmd\", \"/c\" };",
    "right" : "params = new String[] { \"cmd\", \"/c\" };",
    "info" : "ExpressionStatement[108391-108429]:ExpressionStatement[108391-108429]"
  }, {
    "left" : "if (platform == MACOSX)",
    "right" : "if (platform == MACOSX)",
    "info" : "IfStatement[108442-109606]:IfStatement[108442-109606]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[108466-108514]:Block[108466-108514]"
  }, {
    "left" : "params = new String[] { \"open\" };",
    "right" : "params = new String[] { \"open\" };",
    "info" : "ExpressionStatement[108474-108507]:ExpressionStatement[108474-108507]"
  }, {
    "left" : "if (platform == LINUX)",
    "right" : "if (platform == LINUX)",
    "info" : "IfStatement[108520-109606]:IfStatement[108520-109606]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[108543-109606]:Block[108543-109606]"
  }, {
    "left" : "if (openLauncher == null)",
    "right" : "if (openLauncher == null)",
    "info" : "IfStatement[108551-108908]:IfStatement[108551-108908]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[108577-108908]:Block[108577-108908]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[108624-108900]:TryStatement[108624-108900]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[108628-108876]:Block[108628-108876]"
  }, {
    "left" : "Process p = Runtime.getRuntime().exec(new String[] { \"gnome-open\" });",
    "right" : "Process p = Runtime.getRuntime().exec(new String[] { \"gnome-open\" });",
    "info" : "VariableDeclarationStatement[108640-108709]:VariableDeclarationStatement[108640-108709]"
  }, {
    "left" : "p.waitFor();",
    "right" : "p.waitFor();",
    "info" : "ExpressionStatement[108737-108749]:ExpressionStatement[108737-108749]"
  }, {
    "left" : "openLauncher = \"gnome-open\";",
    "right" : "openLauncher = \"gnome-open\";",
    "info" : "ExpressionStatement[108838-108866]:ExpressionStatement[108838-108866]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[108897-108900]:Block[108897-108900]"
  }, {
    "left" : "if (openLauncher == null)",
    "right" : "if (openLauncher == null)",
    "info" : "IfStatement[108915-109186]:IfStatement[108915-109186]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[108941-109186]:Block[108941-109186]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[108984-109178]:TryStatement[108984-109178]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[108988-109154]:Block[108988-109154]"
  }, {
    "left" : "Process p = Runtime.getRuntime().exec(new String[] { \"kde-open\" });",
    "right" : "Process p = Runtime.getRuntime().exec(new String[] { \"kde-open\" });",
    "info" : "VariableDeclarationStatement[109000-109067]:VariableDeclarationStatement[109000-109067]"
  }, {
    "left" : "p.waitFor();",
    "right" : "p.waitFor();",
    "info" : "ExpressionStatement[109095-109107]:ExpressionStatement[109095-109107]"
  }, {
    "left" : "openLauncher = \"kde-open\";",
    "right" : "openLauncher = \"kde-open\";",
    "info" : "ExpressionStatement[109118-109144]:ExpressionStatement[109118-109144]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[109175-109178]:Block[109175-109178]"
  }, {
    "left" : "if (openLauncher == null)",
    "right" : "if (openLauncher == null)",
    "info" : "IfStatement[109193-109363]:IfStatement[109193-109363]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[109219-109363]:Block[109219-109363]"
  }, {
    "left" : "System.err.println(\"Could not find gnome-open or kde-open, \" +\n                           \"the open() command may not work.\");",
    "right" : "System.err.println(\"Could not find gnome-open or kde-open, \" +\n                           \"the open() command may not work.\");",
    "info" : "ExpressionStatement[109229-109355]:ExpressionStatement[109229-109355]"
  }, {
    "left" : "if (openLauncher != null)",
    "right" : "if (openLauncher != null)",
    "info" : "IfStatement[109370-109453]:IfStatement[109370-109453]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[109396-109453]:Block[109396-109453]"
  }, {
    "left" : "params = new String[] { openLauncher };",
    "right" : "params = new String[] { openLauncher };",
    "info" : "ExpressionStatement[109406-109445]:ExpressionStatement[109406-109445]"
  }, {
    "left" : "if (params != null)",
    "right" : "if (params != null)",
    "info" : "IfStatement[109611-109949]:IfStatement[109611-109949]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[109631-109911]:Block[109631-109911]"
  }, {
    "left" : "if (params[0].equals(args[0]))",
    "right" : "if (params[0].equals(args[0]))",
    "info" : "IfStatement[109706-109905]:IfStatement[109706-109905]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[109737-109822]:Block[109737-109822]"
  }, {
    "left" : "return exec(args);",
    "right" : "return exec(args);",
    "info" : "ReturnStatement[109796-109814]:ReturnStatement[109796-109814]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[109828-109905]:Block[109828-109905]"
  }, {
    "left" : "params = concat(params, args);",
    "right" : "params = concat(params, args);",
    "info" : "ExpressionStatement[109838-109868]:ExpressionStatement[109838-109868]"
  }, {
    "left" : "return exec(params);",
    "right" : "return exec(params);",
    "info" : "ReturnStatement[109877-109897]:ReturnStatement[109877-109897]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[109917-109949]:Block[109917-109949]"
  }, {
    "left" : "return exec(args);",
    "right" : "return exec(args);",
    "info" : "ReturnStatement[109925-109943]:ReturnStatement[109925-109943]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[109958-109964]:Modifier[109958-109964]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[109965-109971]:Modifier[109965-109971]"
  }, {
    "left" : "Process",
    "right" : "Process",
    "info" : "SimpleType[109972-109979]:SimpleType[109972-109979]"
  }, {
    "left" : "String... args",
    "right" : "String... args",
    "info" : "SingleVariableDeclaration[109985-109999]:SingleVariableDeclaration[109985-109999]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[110001-110194]:Block[110001-110194]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[110007-110190]:TryStatement[110007-110190]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[110011-110064]:Block[110011-110064]"
  }, {
    "left" : "return Runtime.getRuntime().exec(args);",
    "right" : "return Runtime.getRuntime().exec(args);",
    "info" : "ReturnStatement[110019-110058]:ReturnStatement[110019-110058]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[110085-110190]:Block[110085-110190]"
  }, {
    "left" : "e.printStackTrace();",
    "right" : "e.printStackTrace();",
    "info" : "ExpressionStatement[110093-110113]:ExpressionStatement[110093-110113]"
  }, {
    "left" : "throw new RuntimeException(\"Could not open \" + join(args, ' '));",
    "right" : "throw new RuntimeException(\"Could not open \" + join(args, ' '));",
    "info" : "ThrowStatement[110120-110184]:ThrowStatement[110120-110184]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[110594-110600]:Modifier[110594-110600]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[110601-110605]:PrimitiveType[110601-110605]"
  }, {
    "left" : "String what",
    "right" : "String what",
    "info" : "SingleVariableDeclaration[110610-110621]:SingleVariableDeclaration[110610-110621]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[110623-110681]:Block[110623-110681]"
  }, {
    "left" : "dispose();",
    "right" : "dispose();",
    "info" : "ExpressionStatement[110629-110639]:ExpressionStatement[110629-110639]"
  }, {
    "left" : "throw new RuntimeException(what);",
    "right" : "throw new RuntimeException(what);",
    "info" : "ThrowStatement[110644-110677]:ThrowStatement[110644-110677]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[110757-110763]:Modifier[110757-110763]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[110764-110768]:PrimitiveType[110764-110768]"
  }, {
    "left" : "String what",
    "right" : "String what",
    "info" : "SingleVariableDeclaration[110773-110784]:SingleVariableDeclaration[110773-110784]"
  }, {
    "left" : "Exception e",
    "right" : "Exception e",
    "info" : "SingleVariableDeclaration[110786-110797]:SingleVariableDeclaration[110786-110797]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[110799-110859]:Block[110799-110859]"
  }, {
    "left" : "if (e != null)",
    "right" : "if (e != null)",
    "info" : "IfStatement[110805-110840]:IfStatement[110805-110840]"
  }, {
    "left" : "e.printStackTrace();",
    "right" : "e.printStackTrace();",
    "info" : "ExpressionStatement[110820-110840]:ExpressionStatement[110820-110840]"
  }, {
    "left" : "die(what);",
    "right" : "die(what);",
    "info" : "ExpressionStatement[110845-110855]:ExpressionStatement[110845-110855]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[111723-111729]:Modifier[111723-111729]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[111730-111734]:PrimitiveType[111730-111734]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[111742-112356]:Block[111742-112356]"
  }, {
    "left" : "if (surface.isStopped())",
    "right" : "if (surface.isStopped())",
    "info" : "IfStatement[111748-112352]:IfStatement[111748-112352]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[111773-111923]:Block[111773-111923]"
  }, {
    "left" : "exitActual();",
    "right" : "exitActual();",
    "info" : "ExpressionStatement[111903-111916]:ExpressionStatement[111903-111916]"
  }, {
    "left" : "if (looping)",
    "right" : "if (looping)",
    "info" : "IfStatement[111929-112352]:IfStatement[111929-112352]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[111942-112162]:Block[111942-112162]"
  }, {
    "left" : "finished = true;",
    "right" : "finished = true;",
    "info" : "ExpressionStatement[112004-112020]:ExpressionStatement[112004-112020]"
  }, {
    "left" : "exitCalled = true;",
    "right" : "exitCalled = true;",
    "info" : "ExpressionStatement[112137-112155]:ExpressionStatement[112137-112155]"
  }, {
    "left" : "if (!looping)",
    "right" : "if (!looping)",
    "info" : "IfStatement[112168-112352]:IfStatement[112168-112352]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[112182-112352]:Block[112182-112352]"
  }, {
    "left" : "dispose();",
    "right" : "dispose();",
    "info" : "ExpressionStatement[112294-112304]:ExpressionStatement[112294-112304]"
  }, {
    "left" : "exitActual();",
    "right" : "exitActual();",
    "info" : "ExpressionStatement[112333-112346]:ExpressionStatement[112333-112346]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[112361-112367]:Modifier[112361-112367]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[112368-112375]:PrimitiveType[112368-112375]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[112389-112417]:Block[112389-112417]"
  }, {
    "left" : "return exitCalled;",
    "right" : "return exitCalled;",
    "info" : "ReturnStatement[112395-112413]:ReturnStatement[112395-112413]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[112643-112649]:Modifier[112643-112649]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[112650-112654]:PrimitiveType[112650-112654]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[112668-112800]:Block[112668-112800]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[112674-112796]:TryStatement[112674-112796]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[112678-112707]:Block[112678-112707]"
  }, {
    "left" : "System.exit(0);",
    "right" : "System.exit(0);",
    "info" : "ExpressionStatement[112686-112701]:ExpressionStatement[112686-112701]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[112736-112796]:Block[112736-112796]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[113103-113109]:Modifier[113103-113109]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[113110-113114]:PrimitiveType[113110-113114]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[113125-113470]:Block[113125-113470]"
  }, {
    "left" : "finished = true;",
    "right" : "finished = true;",
    "info" : "ExpressionStatement[113161-113177]:ExpressionStatement[113161-113177]"
  }, {
    "left" : "if (surface.stopThread())",
    "right" : "if (surface.stopThread())",
    "info" : "IfStatement[113265-113466]:IfStatement[113265-113466]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[113291-113466]:Block[113291-113466]"
  }, {
    "left" : "if (g != null)",
    "right" : "if (g != null)",
    "info" : "IfStatement[113328-113373]:IfStatement[113328-113373]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[113343-113373]:Block[113343-113373]"
  }, {
    "left" : "g.dispose();",
    "right" : "g.dispose();",
    "info" : "ExpressionStatement[113353-113365]:ExpressionStatement[113353-113365]"
  }, {
    "left" : "handleMethods(\"dispose\");",
    "right" : "handleMethods(\"dispose\");",
    "info" : "ExpressionStatement[113435-113460]:ExpressionStatement[113435-113460]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[113831-113837]:Modifier[113831-113837]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[113838-113842]:PrimitiveType[113838-113842]"
  }, {
    "left" : "String name",
    "right" : "String name",
    "info" : "SingleVariableDeclaration[113850-113861]:SingleVariableDeclaration[113850-113861]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[113863-114461]:Block[113863-114461]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[113869-114457]:TryStatement[113869-114457]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[113873-113992]:Block[113873-113992]"
  }, {
    "left" : "Method method = getClass().getMethod(name, new Class[] {});",
    "right" : "Method method = getClass().getMethod(name, new Class[] {});",
    "info" : "VariableDeclarationStatement[113881-113940]:VariableDeclarationStatement[113881-113940]"
  }, {
    "left" : "method.invoke(this, new Object[] { });",
    "right" : "method.invoke(this, new Object[] { });",
    "info" : "ExpressionStatement[113947-113985]:ExpressionStatement[113947-113985]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[114028-114062]:Block[114028-114062]"
  }, {
    "left" : "e.printStackTrace();",
    "right" : "e.printStackTrace();",
    "info" : "ExpressionStatement[114036-114056]:ExpressionStatement[114036-114056]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[114096-114130]:Block[114096-114130]"
  }, {
    "left" : "e.printStackTrace();",
    "right" : "e.printStackTrace();",
    "info" : "ExpressionStatement[114104-114124]:ExpressionStatement[114104-114124]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[114167-114222]:Block[114167-114222]"
  }, {
    "left" : "e.getTargetException().printStackTrace();",
    "right" : "e.getTargetException().printStackTrace();",
    "info" : "ExpressionStatement[114175-114216]:ExpressionStatement[114175-114216]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[114258-114402]:Block[114258-114402]"
  }, {
    "left" : "System.err.println(\"There is no public \" + name + \"() method \" +\n                         \"in the class \" + getClass().getName());",
    "right" : "System.err.println(\"There is no public \" + name + \"() method \" +\n                         \"in the class \" + getClass().getName());",
    "info" : "ExpressionStatement[114266-114396]:ExpressionStatement[114266-114396]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[114423-114457]:Block[114423-114457]"
  }, {
    "left" : "e.printStackTrace();",
    "right" : "e.printStackTrace();",
    "info" : "ExpressionStatement[114431-114451]:ExpressionStatement[114431-114451]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[115107-115113]:Modifier[115107-115113]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[115114-115118]:PrimitiveType[115114-115118]"
  }, {
    "left" : "final String name",
    "right" : "final String name",
    "info" : "SingleVariableDeclaration[115126-115143]:SingleVariableDeclaration[115126-115143]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[115145-115282]:Block[115145-115282]"
  }, {
    "left" : "Thread later = new Thread() {\n      @Override\n      public void run() {\n        method(name);\n      }\n    };",
    "right" : "Thread later = new Thread() {\n      @Override\n      public void run() {\n        method(name);\n      }\n    };",
    "info" : "VariableDeclarationStatement[115151-115259]:VariableDeclarationStatement[115151-115259]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[115187-115196]:MarkerAnnotation[115187-115196]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[115203-115209]:Modifier[115203-115209]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[115210-115214]:PrimitiveType[115210-115214]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[115221-115252]:Block[115221-115252]"
  }, {
    "left" : "method(name);",
    "right" : "method(name);",
    "info" : "ExpressionStatement[115231-115244]:ExpressionStatement[115231-115244]"
  }, {
    "left" : "later.start();",
    "right" : "later.start();",
    "info" : "ExpressionStatement[115264-115278]:ExpressionStatement[115264-115278]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[116396-116402]:Modifier[116396-116402]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[116403-116407]:PrimitiveType[116403-116407]"
  }, {
    "left" : "String filename",
    "right" : "String filename",
    "info" : "SingleVariableDeclaration[116413-116428]:SingleVariableDeclaration[116413-116428]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[116430-116467]:Block[116430-116467]"
  }, {
    "left" : "g.save(savePath(filename));",
    "right" : "g.save(savePath(filename));",
    "info" : "ExpressionStatement[116436-116463]:ExpressionStatement[116436-116463]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[116484-116490]:Modifier[116484-116490]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[116491-116495]:PrimitiveType[116491-116495]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[116508-116768]:Block[116508-116768]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[116514-116764]:TryStatement[116514-116764]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[116518-116589]:Block[116518-116589]"
  }, {
    "left" : "g.save(savePath(\"screen-\" + nf(frameCount, 4) + \".tif\"));",
    "right" : "g.save(savePath(\"screen-\" + nf(frameCount, 4) + \".tif\"));",
    "info" : "ExpressionStatement[116526-116583]:ExpressionStatement[116526-116583]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[116619-116764]:Block[116619-116764]"
  }, {
    "left" : "System.err.println(\"Can't use saveFrame() when running in a browser, \" +\n                         \"unless using a signed applet.\");",
    "right" : "System.err.println(\"Can't use saveFrame() when running in a browser, \" +\n                         \"unless using a signed applet.\");",
    "info" : "ExpressionStatement[116627-116758]:ExpressionStatement[116627-116758]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[118511-118517]:Modifier[118511-118517]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[118518-118522]:PrimitiveType[118518-118522]"
  }, {
    "left" : "String filename",
    "right" : "String filename",
    "info" : "SingleVariableDeclaration[118533-118548]:SingleVariableDeclaration[118533-118548]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[118550-118793]:Block[118550-118793]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[118556-118789]:TryStatement[118556-118789]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[118560-118614]:Block[118560-118614]"
  }, {
    "left" : "g.save(savePath(insertFrame(filename)));",
    "right" : "g.save(savePath(insertFrame(filename)));",
    "info" : "ExpressionStatement[118568-118608]:ExpressionStatement[118568-118608]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[118644-118789]:Block[118644-118789]"
  }, {
    "left" : "System.err.println(\"Can't use saveFrame() when running in a browser, \" +\n                         \"unless using a signed applet.\");",
    "right" : "System.err.println(\"Can't use saveFrame() when running in a browser, \" +\n                         \"unless using a signed applet.\");",
    "info" : "ExpressionStatement[118652-118783]:ExpressionStatement[118652-118783]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[119132-119138]:Modifier[119132-119138]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[119139-119145]:SimpleType[119139-119145]"
  }, {
    "left" : "String what",
    "right" : "String what",
    "info" : "SingleVariableDeclaration[119158-119169]:SingleVariableDeclaration[119158-119169]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[119171-119520]:Block[119171-119520]"
  }, {
    "left" : "int first = what.indexOf('#');",
    "right" : "int first = what.indexOf('#');",
    "info" : "VariableDeclarationStatement[119177-119207]:VariableDeclarationStatement[119177-119207]"
  }, {
    "left" : "int last = what.lastIndexOf('#');",
    "right" : "int last = what.lastIndexOf('#');",
    "info" : "VariableDeclarationStatement[119212-119245]:VariableDeclarationStatement[119212-119245]"
  }, {
    "left" : "if ((first != -1) && (last - first > 0))",
    "right" : "if ((first != -1) && (last - first > 0))",
    "info" : "IfStatement[119251-119485]:IfStatement[119251-119485]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[119292-119485]:Block[119292-119485]"
  }, {
    "left" : "String prefix = what.substring(0, first);",
    "right" : "String prefix = what.substring(0, first);",
    "info" : "VariableDeclarationStatement[119300-119341]:VariableDeclarationStatement[119300-119341]"
  }, {
    "left" : "int count = last - first + 1;",
    "right" : "int count = last - first + 1;",
    "info" : "VariableDeclarationStatement[119348-119377]:VariableDeclarationStatement[119348-119377]"
  }, {
    "left" : "String suffix = what.substring(last + 1);",
    "right" : "String suffix = what.substring(last + 1);",
    "info" : "VariableDeclarationStatement[119384-119425]:VariableDeclarationStatement[119384-119425]"
  }, {
    "left" : "return prefix + nf(frameCount, count) + suffix;",
    "right" : "return prefix + nf(frameCount, count) + suffix;",
    "info" : "ReturnStatement[119432-119479]:ReturnStatement[119432-119479]"
  }, {
    "left" : "return what;",
    "right" : "return what;",
    "info" : "ReturnStatement[119490-119502]:ReturnStatement[119490-119502]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[119713-119719]:Modifier[119713-119719]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[119720-119724]:PrimitiveType[119720-119724]"
  }, {
    "left" : "int kind",
    "right" : "int kind",
    "info" : "SingleVariableDeclaration[119732-119740]:SingleVariableDeclaration[119732-119740]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[119742-119776]:Block[119742-119776]"
  }, {
    "left" : "surface.setCursor(kind);",
    "right" : "surface.setCursor(kind);",
    "info" : "ExpressionStatement[119748-119772]:ExpressionStatement[119748-119772]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[119921-119927]:Modifier[119921-119927]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[119928-119932]:PrimitiveType[119928-119932]"
  }, {
    "left" : "PImage img",
    "right" : "PImage img",
    "info" : "SingleVariableDeclaration[119940-119950]:SingleVariableDeclaration[119940-119950]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[119952-120001]:Block[119952-120001]"
  }, {
    "left" : "cursor(img, img.width/2, img.height/2);",
    "right" : "cursor(img, img.width/2, img.height/2);",
    "info" : "ExpressionStatement[119958-119997]:ExpressionStatement[119958-119997]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[121280-121286]:Modifier[121280-121286]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[121287-121291]:PrimitiveType[121287-121291]"
  }, {
    "left" : "PImage img",
    "right" : "PImage img",
    "info" : "SingleVariableDeclaration[121299-121309]:SingleVariableDeclaration[121299-121309]"
  }, {
    "left" : "int x",
    "right" : "int x",
    "info" : "SingleVariableDeclaration[121311-121316]:SingleVariableDeclaration[121311-121316]"
  }, {
    "left" : "int y",
    "right" : "int y",
    "info" : "SingleVariableDeclaration[121318-121323]:SingleVariableDeclaration[121318-121323]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[121325-121364]:Block[121325-121364]"
  }, {
    "left" : "surface.setCursor(img, x, y);",
    "right" : "surface.setCursor(img, x, y);",
    "info" : "ExpressionStatement[121331-121360]:ExpressionStatement[121331-121360]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[121495-121501]:Modifier[121495-121501]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[121502-121506]:PrimitiveType[121502-121506]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[121516-121547]:Block[121516-121547]"
  }, {
    "left" : "surface.showCursor();",
    "right" : "surface.showCursor();",
    "info" : "ExpressionStatement[121522-121543]:ExpressionStatement[121522-121543]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[121981-121987]:Modifier[121981-121987]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[121988-121992]:PrimitiveType[121988-121992]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[122004-122035]:Block[122004-122035]"
  }, {
    "left" : "surface.hideCursor();",
    "right" : "surface.hideCursor();",
    "info" : "ExpressionStatement[122010-122031]:ExpressionStatement[122010-122031]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[123594-123600]:Modifier[123594-123600]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[123601-123607]:Modifier[123601-123607]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[123608-123612]:PrimitiveType[123608-123612]"
  }, {
    "left" : "byte what",
    "right" : "byte what",
    "info" : "SingleVariableDeclaration[123619-123628]:SingleVariableDeclaration[123619-123628]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[123630-123687]:Block[123630-123687]"
  }, {
    "left" : "System.out.print(what);",
    "right" : "System.out.print(what);",
    "info" : "ExpressionStatement[123636-123659]:ExpressionStatement[123636-123659]"
  }, {
    "left" : "System.out.flush();",
    "right" : "System.out.flush();",
    "info" : "ExpressionStatement[123664-123683]:ExpressionStatement[123664-123683]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[123691-123697]:Modifier[123691-123697]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[123698-123704]:Modifier[123698-123704]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[123705-123709]:PrimitiveType[123705-123709]"
  }, {
    "left" : "boolean what",
    "right" : "boolean what",
    "info" : "SingleVariableDeclaration[123716-123728]:SingleVariableDeclaration[123716-123728]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[123730-123787]:Block[123730-123787]"
  }, {
    "left" : "System.out.print(what);",
    "right" : "System.out.print(what);",
    "info" : "ExpressionStatement[123736-123759]:ExpressionStatement[123736-123759]"
  }, {
    "left" : "System.out.flush();",
    "right" : "System.out.flush();",
    "info" : "ExpressionStatement[123764-123783]:ExpressionStatement[123764-123783]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[123791-123797]:Modifier[123791-123797]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[123798-123804]:Modifier[123798-123804]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[123805-123809]:PrimitiveType[123805-123809]"
  }, {
    "left" : "char what",
    "right" : "char what",
    "info" : "SingleVariableDeclaration[123816-123825]:SingleVariableDeclaration[123816-123825]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[123827-123884]:Block[123827-123884]"
  }, {
    "left" : "System.out.print(what);",
    "right" : "System.out.print(what);",
    "info" : "ExpressionStatement[123833-123856]:ExpressionStatement[123833-123856]"
  }, {
    "left" : "System.out.flush();",
    "right" : "System.out.flush();",
    "info" : "ExpressionStatement[123861-123880]:ExpressionStatement[123861-123880]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[123888-123894]:Modifier[123888-123894]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[123895-123901]:Modifier[123895-123901]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[123902-123906]:PrimitiveType[123902-123906]"
  }, {
    "left" : "int what",
    "right" : "int what",
    "info" : "SingleVariableDeclaration[123913-123921]:SingleVariableDeclaration[123913-123921]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[123923-123980]:Block[123923-123980]"
  }, {
    "left" : "System.out.print(what);",
    "right" : "System.out.print(what);",
    "info" : "ExpressionStatement[123929-123952]:ExpressionStatement[123929-123952]"
  }, {
    "left" : "System.out.flush();",
    "right" : "System.out.flush();",
    "info" : "ExpressionStatement[123957-123976]:ExpressionStatement[123957-123976]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[123984-123990]:Modifier[123984-123990]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[123991-123997]:Modifier[123991-123997]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[123998-124002]:PrimitiveType[123998-124002]"
  }, {
    "left" : "long what",
    "right" : "long what",
    "info" : "SingleVariableDeclaration[124009-124018]:SingleVariableDeclaration[124009-124018]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[124020-124077]:Block[124020-124077]"
  }, {
    "left" : "System.out.print(what);",
    "right" : "System.out.print(what);",
    "info" : "ExpressionStatement[124026-124049]:ExpressionStatement[124026-124049]"
  }, {
    "left" : "System.out.flush();",
    "right" : "System.out.flush();",
    "info" : "ExpressionStatement[124054-124073]:ExpressionStatement[124054-124073]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[124081-124087]:Modifier[124081-124087]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[124088-124094]:Modifier[124088-124094]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[124095-124099]:PrimitiveType[124095-124099]"
  }, {
    "left" : "float what",
    "right" : "float what",
    "info" : "SingleVariableDeclaration[124106-124116]:SingleVariableDeclaration[124106-124116]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[124118-124175]:Block[124118-124175]"
  }, {
    "left" : "System.out.print(what);",
    "right" : "System.out.print(what);",
    "info" : "ExpressionStatement[124124-124147]:ExpressionStatement[124124-124147]"
  }, {
    "left" : "System.out.flush();",
    "right" : "System.out.flush();",
    "info" : "ExpressionStatement[124152-124171]:ExpressionStatement[124152-124171]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[124179-124185]:Modifier[124179-124185]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[124186-124192]:Modifier[124186-124192]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[124193-124197]:PrimitiveType[124193-124197]"
  }, {
    "left" : "double what",
    "right" : "double what",
    "info" : "SingleVariableDeclaration[124204-124215]:SingleVariableDeclaration[124204-124215]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[124217-124274]:Block[124217-124274]"
  }, {
    "left" : "System.out.print(what);",
    "right" : "System.out.print(what);",
    "info" : "ExpressionStatement[124223-124246]:ExpressionStatement[124223-124246]"
  }, {
    "left" : "System.out.flush();",
    "right" : "System.out.flush();",
    "info" : "ExpressionStatement[124251-124270]:ExpressionStatement[124251-124270]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[124278-124284]:Modifier[124278-124284]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[124285-124291]:Modifier[124285-124291]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[124292-124296]:PrimitiveType[124292-124296]"
  }, {
    "left" : "String what",
    "right" : "String what",
    "info" : "SingleVariableDeclaration[124303-124314]:SingleVariableDeclaration[124303-124314]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[124316-124373]:Block[124316-124373]"
  }, {
    "left" : "System.out.print(what);",
    "right" : "System.out.print(what);",
    "info" : "ExpressionStatement[124322-124345]:ExpressionStatement[124322-124345]"
  }, {
    "left" : "System.out.flush();",
    "right" : "System.out.flush();",
    "info" : "ExpressionStatement[124350-124369]:ExpressionStatement[124350-124369]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[124445-124451]:Modifier[124445-124451]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[124452-124458]:Modifier[124452-124458]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[124459-124463]:PrimitiveType[124459-124463]"
  }, {
    "left" : "Object... variables",
    "right" : "Object... variables",
    "info" : "SingleVariableDeclaration[124470-124489]:SingleVariableDeclaration[124470-124489]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[124491-124784]:Block[124491-124784]"
  }, {
    "left" : "StringBuilder sb = new StringBuilder();",
    "right" : "StringBuilder sb = new StringBuilder();",
    "info" : "VariableDeclarationStatement[124497-124536]:VariableDeclarationStatement[124497-124536]"
  }, {
    "left" : "for (Object o : variables)",
    "right" : "for (Object o : variables)",
    "info" : "EnhancedForStatement[124541-124743]:EnhancedForStatement[124541-124743]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[124568-124743]:Block[124568-124743]"
  }, {
    "left" : "if (sb.length() != 0)",
    "right" : "if (sb.length() != 0)",
    "info" : "IfStatement[124576-124631]:IfStatement[124576-124631]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[124598-124631]:Block[124598-124631]"
  }, {
    "left" : "sb.append(\" \");",
    "right" : "sb.append(\" \");",
    "info" : "ExpressionStatement[124608-124623]:ExpressionStatement[124608-124623]"
  }, {
    "left" : "if (o == null)",
    "right" : "if (o == null)",
    "info" : "IfStatement[124638-124737]:IfStatement[124638-124737]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[124653-124689]:Block[124653-124689]"
  }, {
    "left" : "sb.append(\"null\");",
    "right" : "sb.append(\"null\");",
    "info" : "ExpressionStatement[124663-124681]:ExpressionStatement[124663-124681]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[124695-124737]:Block[124695-124737]"
  }, {
    "left" : "sb.append(o.toString());",
    "right" : "sb.append(o.toString());",
    "info" : "ExpressionStatement[124705-124729]:ExpressionStatement[124705-124729]"
  }, {
    "left" : "System.out.print(sb.toString());",
    "right" : "System.out.print(sb.toString());",
    "info" : "ExpressionStatement[124748-124780]:ExpressionStatement[124748-124780]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[126015-126021]:Modifier[126015-126021]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[126022-126028]:Modifier[126022-126028]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[126029-126033]:PrimitiveType[126029-126033]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[126044-126075]:Block[126044-126075]"
  }, {
    "left" : "System.out.println();",
    "right" : "System.out.println();",
    "info" : "ExpressionStatement[126050-126071]:ExpressionStatement[126050-126071]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[126128-126134]:Modifier[126128-126134]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[126135-126141]:Modifier[126135-126141]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[126142-126146]:PrimitiveType[126142-126146]"
  }, {
    "left" : "byte what",
    "right" : "byte what",
    "info" : "SingleVariableDeclaration[126155-126164]:SingleVariableDeclaration[126155-126164]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[126166-126225]:Block[126166-126225]"
  }, {
    "left" : "System.out.println(what);",
    "right" : "System.out.println(what);",
    "info" : "ExpressionStatement[126172-126197]:ExpressionStatement[126172-126197]"
  }, {
    "left" : "System.out.flush();",
    "right" : "System.out.flush();",
    "info" : "ExpressionStatement[126202-126221]:ExpressionStatement[126202-126221]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[126229-126235]:Modifier[126229-126235]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[126236-126242]:Modifier[126236-126242]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[126243-126247]:PrimitiveType[126243-126247]"
  }, {
    "left" : "boolean what",
    "right" : "boolean what",
    "info" : "SingleVariableDeclaration[126256-126268]:SingleVariableDeclaration[126256-126268]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[126270-126329]:Block[126270-126329]"
  }, {
    "left" : "System.out.println(what);",
    "right" : "System.out.println(what);",
    "info" : "ExpressionStatement[126276-126301]:ExpressionStatement[126276-126301]"
  }, {
    "left" : "System.out.flush();",
    "right" : "System.out.flush();",
    "info" : "ExpressionStatement[126306-126325]:ExpressionStatement[126306-126325]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[126333-126339]:Modifier[126333-126339]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[126340-126346]:Modifier[126340-126346]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[126347-126351]:PrimitiveType[126347-126351]"
  }, {
    "left" : "char what",
    "right" : "char what",
    "info" : "SingleVariableDeclaration[126360-126369]:SingleVariableDeclaration[126360-126369]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[126371-126430]:Block[126371-126430]"
  }, {
    "left" : "System.out.println(what);",
    "right" : "System.out.println(what);",
    "info" : "ExpressionStatement[126377-126402]:ExpressionStatement[126377-126402]"
  }, {
    "left" : "System.out.flush();",
    "right" : "System.out.flush();",
    "info" : "ExpressionStatement[126407-126426]:ExpressionStatement[126407-126426]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[126434-126440]:Modifier[126434-126440]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[126441-126447]:Modifier[126441-126447]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[126448-126452]:PrimitiveType[126448-126452]"
  }, {
    "left" : "int what",
    "right" : "int what",
    "info" : "SingleVariableDeclaration[126461-126469]:SingleVariableDeclaration[126461-126469]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[126471-126530]:Block[126471-126530]"
  }, {
    "left" : "System.out.println(what);",
    "right" : "System.out.println(what);",
    "info" : "ExpressionStatement[126477-126502]:ExpressionStatement[126477-126502]"
  }, {
    "left" : "System.out.flush();",
    "right" : "System.out.flush();",
    "info" : "ExpressionStatement[126507-126526]:ExpressionStatement[126507-126526]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[126534-126540]:Modifier[126534-126540]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[126541-126547]:Modifier[126541-126547]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[126548-126552]:PrimitiveType[126548-126552]"
  }, {
    "left" : "long what",
    "right" : "long what",
    "info" : "SingleVariableDeclaration[126561-126570]:SingleVariableDeclaration[126561-126570]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[126572-126631]:Block[126572-126631]"
  }, {
    "left" : "System.out.println(what);",
    "right" : "System.out.println(what);",
    "info" : "ExpressionStatement[126578-126603]:ExpressionStatement[126578-126603]"
  }, {
    "left" : "System.out.flush();",
    "right" : "System.out.flush();",
    "info" : "ExpressionStatement[126608-126627]:ExpressionStatement[126608-126627]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[126635-126641]:Modifier[126635-126641]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[126642-126648]:Modifier[126642-126648]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[126649-126653]:PrimitiveType[126649-126653]"
  }, {
    "left" : "float what",
    "right" : "float what",
    "info" : "SingleVariableDeclaration[126662-126672]:SingleVariableDeclaration[126662-126672]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[126674-126733]:Block[126674-126733]"
  }, {
    "left" : "System.out.println(what);",
    "right" : "System.out.println(what);",
    "info" : "ExpressionStatement[126680-126705]:ExpressionStatement[126680-126705]"
  }, {
    "left" : "System.out.flush();",
    "right" : "System.out.flush();",
    "info" : "ExpressionStatement[126710-126729]:ExpressionStatement[126710-126729]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[126737-126743]:Modifier[126737-126743]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[126744-126750]:Modifier[126744-126750]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[126751-126755]:PrimitiveType[126751-126755]"
  }, {
    "left" : "double what",
    "right" : "double what",
    "info" : "SingleVariableDeclaration[126764-126775]:SingleVariableDeclaration[126764-126775]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[126777-126836]:Block[126777-126836]"
  }, {
    "left" : "System.out.println(what);",
    "right" : "System.out.println(what);",
    "info" : "ExpressionStatement[126783-126808]:ExpressionStatement[126783-126808]"
  }, {
    "left" : "System.out.flush();",
    "right" : "System.out.flush();",
    "info" : "ExpressionStatement[126813-126832]:ExpressionStatement[126813-126832]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[126840-126846]:Modifier[126840-126846]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[126847-126853]:Modifier[126847-126853]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[126854-126858]:PrimitiveType[126854-126858]"
  }, {
    "left" : "String what",
    "right" : "String what",
    "info" : "SingleVariableDeclaration[126867-126878]:SingleVariableDeclaration[126867-126878]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[126880-126939]:Block[126880-126939]"
  }, {
    "left" : "System.out.println(what);",
    "right" : "System.out.println(what);",
    "info" : "ExpressionStatement[126886-126911]:ExpressionStatement[126886-126911]"
  }, {
    "left" : "System.out.flush();",
    "right" : "System.out.flush();",
    "info" : "ExpressionStatement[126916-126935]:ExpressionStatement[126916-126935]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[127011-127017]:Modifier[127011-127017]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[127018-127024]:Modifier[127018-127024]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[127025-127029]:PrimitiveType[127025-127029]"
  }, {
    "left" : "Object... variables",
    "right" : "Object... variables",
    "info" : "SingleVariableDeclaration[127038-127057]:SingleVariableDeclaration[127038-127057]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[127059-127169]:Block[127059-127169]"
  }, {
    "left" : "print(variables);",
    "right" : "print(variables);",
    "info" : "ExpressionStatement[127133-127150]:ExpressionStatement[127133-127150]"
  }, {
    "left" : "println();",
    "right" : "println();",
    "info" : "ExpressionStatement[127155-127165]:ExpressionStatement[127155-127165]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[127929-127935]:Modifier[127929-127935]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[127936-127942]:Modifier[127936-127942]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[127943-127947]:PrimitiveType[127943-127947]"
  }, {
    "left" : "Object what",
    "right" : "Object what",
    "info" : "SingleVariableDeclaration[127956-127967]:SingleVariableDeclaration[127956-127967]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[127969-128188]:Block[127969-128188]"
  }, {
    "left" : "if (what == null)",
    "right" : "if (what == null)",
    "info" : "IfStatement[127975-128184]:IfStatement[127975-128184]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[127993-128034]:Block[127993-128034]"
  }, {
    "left" : "System.out.println(\"null\");",
    "right" : "System.out.println(\"null\");",
    "info" : "ExpressionStatement[128001-128028]:ExpressionStatement[128001-128028]"
  }, {
    "left" : "if (what.getClass().isArray())",
    "right" : "if (what.getClass().isArray())",
    "info" : "IfStatement[128040-128184]:IfStatement[128040-128184]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[128071-128102]:Block[128071-128102]"
  }, {
    "left" : "printArray(what);",
    "right" : "printArray(what);",
    "info" : "ExpressionStatement[128079-128096]:ExpressionStatement[128079-128096]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[128108-128184]:Block[128108-128184]"
  }, {
    "left" : "System.out.println(what.toString());",
    "right" : "System.out.println(what.toString());",
    "info" : "ExpressionStatement[128116-128152]:ExpressionStatement[128116-128152]"
  }, {
    "left" : "System.out.flush();",
    "right" : "System.out.flush();",
    "info" : "ExpressionStatement[128159-128178]:ExpressionStatement[128159-128178]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[128439-128445]:Modifier[128439-128445]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[128446-128452]:Modifier[128446-128452]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[128453-128457]:PrimitiveType[128453-128457]"
  }, {
    "left" : "Object what",
    "right" : "Object what",
    "info" : "SingleVariableDeclaration[128469-128480]:SingleVariableDeclaration[128469-128480]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[128482-130928]:Block[128482-130928]"
  }, {
    "left" : "if (what == null)",
    "right" : "if (what == null)",
    "info" : "IfStatement[128488-130900]:IfStatement[128488-130900]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[128506-128609]:Block[128506-128609]"
  }, {
    "left" : "System.out.println(\"null\");",
    "right" : "System.out.println(\"null\");",
    "info" : "ExpressionStatement[128575-128602]:ExpressionStatement[128575-128602]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[128615-130900]:Block[128615-130900]"
  }, {
    "left" : "String name = what.getClass().getName();",
    "right" : "String name = what.getClass().getName();",
    "info" : "VariableDeclarationStatement[128623-128663]:VariableDeclarationStatement[128623-128663]"
  }, {
    "left" : "if (name.charAt(0) == '[')",
    "right" : "if (name.charAt(0) == '[')",
    "info" : "IfStatement[128670-130894]:IfStatement[128670-130894]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[128697-130828]:Block[128697-130828]"
  }, {
    "left" : "switch (name.charAt(1)) {\n        case '[':\n          // don't even mess with multi-dimensional arrays (case '[')\n          // or anything else that's not int, float, boolean, char\n          System.out.println(what);\n          break;\n\n        case 'L':\n          // print a 1D array of objects as individual elements\n          Object poo[] = (Object[]) what;\n          for (int i = 0; i < poo.length; i++) {\n            if (poo[i] instanceof String) {\n              System.out.println(\"[\" + i + \"] \\\"\" + poo[i] + \"\\\"\");\n            } else {\n              System.out.println(\"[\" + i + \"] \" + poo[i]);\n            }\n          }\n          break;\n\n        case 'Z':  // boolean\n          boolean zz[] = (boolean[]) what;\n          for (int i = 0; i < zz.length; i++) {\n            System.out.println(\"[\" + i + \"] \" + zz[i]);\n          }\n          break;\n\n        case 'B':  // byte\n          byte bb[] = (byte[]) what;\n          for (int i = 0; i < bb.length; i++) {\n            System.out.println(\"[\" + i + \"] \" + bb[i]);\n          }\n          break;\n\n        case 'C':  // char\n          char cc[] = (char[]) what;\n          for (int i = 0; i < cc.length; i++) {\n            System.out.println(\"[\" + i + \"] '\" + cc[i] + \"'\");\n          }\n          break;\n\n        case 'I':  // int\n          int ii[] = (int[]) what;\n          for (int i = 0; i < ii.length; i++) {\n            System.out.println(\"[\" + i + \"] \" + ii[i]);\n          }\n          break;\n\n        case 'J':  // int\n          long jj[] = (long[]) what;\n          for (int i = 0; i < jj.length; i++) {\n            System.out.println(\"[\" + i + \"] \" + jj[i]);\n          }\n          break;\n\n        case 'F':  // float\n          float ff[] = (float[]) what;\n          for (int i = 0; i < ff.length; i++) {\n            System.out.println(\"[\" + i + \"] \" + ff[i]);\n          }\n          break;\n\n        case 'D':  // double\n          double dd[] = (double[]) what;\n          for (int i = 0; i < dd.length; i++) {\n            System.out.println(\"[\" + i + \"] \" + dd[i]);\n          }\n          break;\n\n        default:\n          System.out.println(what);\n        }",
    "right" : "switch (name.charAt(1)) {\n        case '[':\n          // don't even mess with multi-dimensional arrays (case '[')\n          // or anything else that's not int, float, boolean, char\n          System.out.println(what);\n          break;\n\n        case 'L':\n          // print a 1D array of objects as individual elements\n          Object poo[] = (Object[]) what;\n          for (int i = 0; i < poo.length; i++) {\n            if (poo[i] instanceof String) {\n              System.out.println(\"[\" + i + \"] \\\"\" + poo[i] + \"\\\"\");\n            } else {\n              System.out.println(\"[\" + i + \"] \" + poo[i]);\n            }\n          }\n          break;\n\n        case 'Z':  // boolean\n          boolean zz[] = (boolean[]) what;\n          for (int i = 0; i < zz.length; i++) {\n            System.out.println(\"[\" + i + \"] \" + zz[i]);\n          }\n          break;\n\n        case 'B':  // byte\n          byte bb[] = (byte[]) what;\n          for (int i = 0; i < bb.length; i++) {\n            System.out.println(\"[\" + i + \"] \" + bb[i]);\n          }\n          break;\n\n        case 'C':  // char\n          char cc[] = (char[]) what;\n          for (int i = 0; i < cc.length; i++) {\n            System.out.println(\"[\" + i + \"] '\" + cc[i] + \"'\");\n          }\n          break;\n\n        case 'I':  // int\n          int ii[] = (int[]) what;\n          for (int i = 0; i < ii.length; i++) {\n            System.out.println(\"[\" + i + \"] \" + ii[i]);\n          }\n          break;\n\n        case 'J':  // int\n          long jj[] = (long[]) what;\n          for (int i = 0; i < jj.length; i++) {\n            System.out.println(\"[\" + i + \"] \" + jj[i]);\n          }\n          break;\n\n        case 'F':  // float\n          float ff[] = (float[]) what;\n          for (int i = 0; i < ff.length; i++) {\n            System.out.println(\"[\" + i + \"] \" + ff[i]);\n          }\n          break;\n\n        case 'D':  // double\n          double dd[] = (double[]) what;\n          for (int i = 0; i < dd.length; i++) {\n            System.out.println(\"[\" + i + \"] \" + dd[i]);\n          }\n          break;\n\n        default:\n          System.out.println(what);\n        }",
    "info" : "SwitchStatement[128707-130820]:SwitchStatement[128707-130820]"
  }, {
    "left" : "case '[':",
    "right" : "case '[':",
    "info" : "SwitchCase[128741-128750]:SwitchCase[128741-128750]"
  }, {
    "left" : "System.out.println(what);",
    "right" : "System.out.println(what);",
    "info" : "ExpressionStatement[128898-128923]:ExpressionStatement[128898-128923]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[128934-128940]:BreakStatement[128934-128940]"
  }, {
    "left" : "case 'L':",
    "right" : "case 'L':",
    "info" : "SwitchCase[128950-128959]:SwitchCase[128950-128959]"
  }, {
    "left" : "Object poo[] = (Object[]) what;",
    "right" : "Object poo[] = (Object[]) what;",
    "info" : "VariableDeclarationStatement[129034-129065]:VariableDeclarationStatement[129034-129065]"
  }, {
    "left" : "for (int i = 0; i < poo.length; i++)",
    "right" : "for (int i = 0; i < poo.length; i++)",
    "info" : "ForStatement[129076-129332]:ForStatement[129076-129332]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[129113-129332]:Block[129113-129332]"
  }, {
    "left" : "if (poo[i] instanceof String)",
    "right" : "if (poo[i] instanceof String)",
    "info" : "IfStatement[129127-129320]:IfStatement[129127-129320]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[129157-129240]:Block[129157-129240]"
  }, {
    "left" : "System.out.println(\"[\" + i + \"] \\\"\" + poo[i] + \"\\\"\");",
    "right" : "System.out.println(\"[\" + i + \"] \\\"\" + poo[i] + \"\\\"\");",
    "info" : "ExpressionStatement[129173-129226]:ExpressionStatement[129173-129226]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[129246-129320]:Block[129246-129320]"
  }, {
    "left" : "System.out.println(\"[\" + i + \"] \" + poo[i]);",
    "right" : "System.out.println(\"[\" + i + \"] \" + poo[i]);",
    "info" : "ExpressionStatement[129262-129306]:ExpressionStatement[129262-129306]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[129343-129349]:BreakStatement[129343-129349]"
  }, {
    "left" : "case 'Z':",
    "right" : "case 'Z':",
    "info" : "SwitchCase[129359-129368]:SwitchCase[129359-129368]"
  }, {
    "left" : "boolean zz[] = (boolean[]) what;",
    "right" : "boolean zz[] = (boolean[]) what;",
    "info" : "VariableDeclarationStatement[129391-129423]:VariableDeclarationStatement[129391-129423]"
  }, {
    "left" : "for (int i = 0; i < zz.length; i++)",
    "right" : "for (int i = 0; i < zz.length; i++)",
    "info" : "ForStatement[129434-129539]:ForStatement[129434-129539]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[129470-129539]:Block[129470-129539]"
  }, {
    "left" : "System.out.println(\"[\" + i + \"] \" + zz[i]);",
    "right" : "System.out.println(\"[\" + i + \"] \" + zz[i]);",
    "info" : "ExpressionStatement[129484-129527]:ExpressionStatement[129484-129527]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[129550-129556]:BreakStatement[129550-129556]"
  }, {
    "left" : "case 'B':",
    "right" : "case 'B':",
    "info" : "SwitchCase[129566-129575]:SwitchCase[129566-129575]"
  }, {
    "left" : "byte bb[] = (byte[]) what;",
    "right" : "byte bb[] = (byte[]) what;",
    "info" : "VariableDeclarationStatement[129595-129621]:VariableDeclarationStatement[129595-129621]"
  }, {
    "left" : "for (int i = 0; i < bb.length; i++)",
    "right" : "for (int i = 0; i < bb.length; i++)",
    "info" : "ForStatement[129632-129737]:ForStatement[129632-129737]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[129668-129737]:Block[129668-129737]"
  }, {
    "left" : "System.out.println(\"[\" + i + \"] \" + bb[i]);",
    "right" : "System.out.println(\"[\" + i + \"] \" + bb[i]);",
    "info" : "ExpressionStatement[129682-129725]:ExpressionStatement[129682-129725]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[129748-129754]:BreakStatement[129748-129754]"
  }, {
    "left" : "case 'C':",
    "right" : "case 'C':",
    "info" : "SwitchCase[129764-129773]:SwitchCase[129764-129773]"
  }, {
    "left" : "char cc[] = (char[]) what;",
    "right" : "char cc[] = (char[]) what;",
    "info" : "VariableDeclarationStatement[129793-129819]:VariableDeclarationStatement[129793-129819]"
  }, {
    "left" : "for (int i = 0; i < cc.length; i++)",
    "right" : "for (int i = 0; i < cc.length; i++)",
    "info" : "ForStatement[129830-129942]:ForStatement[129830-129942]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[129866-129942]:Block[129866-129942]"
  }, {
    "left" : "System.out.println(\"[\" + i + \"] '\" + cc[i] + \"'\");",
    "right" : "System.out.println(\"[\" + i + \"] '\" + cc[i] + \"'\");",
    "info" : "ExpressionStatement[129880-129930]:ExpressionStatement[129880-129930]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[129953-129959]:BreakStatement[129953-129959]"
  }, {
    "left" : "case 'I':",
    "right" : "case 'I':",
    "info" : "SwitchCase[129969-129978]:SwitchCase[129969-129978]"
  }, {
    "left" : "int ii[] = (int[]) what;",
    "right" : "int ii[] = (int[]) what;",
    "info" : "VariableDeclarationStatement[129997-130021]:VariableDeclarationStatement[129997-130021]"
  }, {
    "left" : "for (int i = 0; i < ii.length; i++)",
    "right" : "for (int i = 0; i < ii.length; i++)",
    "info" : "ForStatement[130032-130137]:ForStatement[130032-130137]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[130068-130137]:Block[130068-130137]"
  }, {
    "left" : "System.out.println(\"[\" + i + \"] \" + ii[i]);",
    "right" : "System.out.println(\"[\" + i + \"] \" + ii[i]);",
    "info" : "ExpressionStatement[130082-130125]:ExpressionStatement[130082-130125]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[130148-130154]:BreakStatement[130148-130154]"
  }, {
    "left" : "case 'J':",
    "right" : "case 'J':",
    "info" : "SwitchCase[130164-130173]:SwitchCase[130164-130173]"
  }, {
    "left" : "long jj[] = (long[]) what;",
    "right" : "long jj[] = (long[]) what;",
    "info" : "VariableDeclarationStatement[130192-130218]:VariableDeclarationStatement[130192-130218]"
  }, {
    "left" : "for (int i = 0; i < jj.length; i++)",
    "right" : "for (int i = 0; i < jj.length; i++)",
    "info" : "ForStatement[130229-130334]:ForStatement[130229-130334]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[130265-130334]:Block[130265-130334]"
  }, {
    "left" : "System.out.println(\"[\" + i + \"] \" + jj[i]);",
    "right" : "System.out.println(\"[\" + i + \"] \" + jj[i]);",
    "info" : "ExpressionStatement[130279-130322]:ExpressionStatement[130279-130322]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[130345-130351]:BreakStatement[130345-130351]"
  }, {
    "left" : "case 'F':",
    "right" : "case 'F':",
    "info" : "SwitchCase[130361-130370]:SwitchCase[130361-130370]"
  }, {
    "left" : "float ff[] = (float[]) what;",
    "right" : "float ff[] = (float[]) what;",
    "info" : "VariableDeclarationStatement[130391-130419]:VariableDeclarationStatement[130391-130419]"
  }, {
    "left" : "for (int i = 0; i < ff.length; i++)",
    "right" : "for (int i = 0; i < ff.length; i++)",
    "info" : "ForStatement[130430-130535]:ForStatement[130430-130535]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[130466-130535]:Block[130466-130535]"
  }, {
    "left" : "System.out.println(\"[\" + i + \"] \" + ff[i]);",
    "right" : "System.out.println(\"[\" + i + \"] \" + ff[i]);",
    "info" : "ExpressionStatement[130480-130523]:ExpressionStatement[130480-130523]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[130546-130552]:BreakStatement[130546-130552]"
  }, {
    "left" : "case 'D':",
    "right" : "case 'D':",
    "info" : "SwitchCase[130562-130571]:SwitchCase[130562-130571]"
  }, {
    "left" : "double dd[] = (double[]) what;",
    "right" : "double dd[] = (double[]) what;",
    "info" : "VariableDeclarationStatement[130593-130623]:VariableDeclarationStatement[130593-130623]"
  }, {
    "left" : "for (int i = 0; i < dd.length; i++)",
    "right" : "for (int i = 0; i < dd.length; i++)",
    "info" : "ForStatement[130634-130739]:ForStatement[130634-130739]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[130670-130739]:Block[130670-130739]"
  }, {
    "left" : "System.out.println(\"[\" + i + \"] \" + dd[i]);",
    "right" : "System.out.println(\"[\" + i + \"] \" + dd[i]);",
    "info" : "ExpressionStatement[130684-130727]:ExpressionStatement[130684-130727]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[130750-130756]:BreakStatement[130750-130756]"
  }, {
    "left" : "default:",
    "right" : "default:",
    "info" : "SwitchCase[130766-130774]:SwitchCase[130766-130774]"
  }, {
    "left" : "System.out.println(what);",
    "right" : "System.out.println(what);",
    "info" : "ExpressionStatement[130785-130810]:ExpressionStatement[130785-130810]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[130834-130894]:Block[130834-130894]"
  }, {
    "left" : "System.out.println(what);",
    "right" : "System.out.println(what);",
    "info" : "ExpressionStatement[130861-130886]:ExpressionStatement[130861-130886]"
  }, {
    "left" : "System.out.flush();",
    "right" : "System.out.flush();",
    "info" : "ExpressionStatement[130905-130924]:ExpressionStatement[130905-130924]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[130933-130939]:Modifier[130933-130939]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[130940-130946]:Modifier[130940-130946]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[130947-130951]:PrimitiveType[130947-130951]"
  }, {
    "left" : "String msg",
    "right" : "String msg",
    "info" : "SingleVariableDeclaration[130958-130968]:SingleVariableDeclaration[130958-130968]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[130970-131004]:Block[130970-131004]"
  }, {
    "left" : "if (DEBUG)",
    "right" : "if (DEBUG)",
    "info" : "IfStatement[130976-131000]:IfStatement[130976-131000]"
  }, {
    "left" : "println(msg);",
    "right" : "println(msg);",
    "info" : "ExpressionStatement[130987-131000]:ExpressionStatement[130987-131000]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[131895-131901]:Modifier[131895-131901]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[131902-131908]:Modifier[131902-131908]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[131909-131914]:Modifier[131909-131914]"
  }, {
    "left" : "float",
    "right" : "float",
    "info" : "PrimitiveType[131915-131920]:PrimitiveType[131915-131920]"
  }, {
    "left" : "float n",
    "right" : "float n",
    "info" : "SingleVariableDeclaration[131925-131932]:SingleVariableDeclaration[131925-131932]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[131934-131968]:Block[131934-131968]"
  }, {
    "left" : "return (n < 0) ? -n : n;",
    "right" : "return (n < 0) ? -n : n;",
    "info" : "ReturnStatement[131940-131964]:ReturnStatement[131940-131964]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[131972-131978]:Modifier[131972-131978]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[131979-131985]:Modifier[131979-131985]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[131986-131991]:Modifier[131986-131991]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[131992-131995]:PrimitiveType[131992-131995]"
  }, {
    "left" : "int n",
    "right" : "int n",
    "info" : "SingleVariableDeclaration[132000-132005]:SingleVariableDeclaration[132000-132005]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[132007-132041]:Block[132007-132041]"
  }, {
    "left" : "return (n < 0) ? -n : n;",
    "right" : "return (n < 0) ? -n : n;",
    "info" : "ReturnStatement[132013-132037]:ReturnStatement[132013-132037]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[132426-132432]:Modifier[132426-132432]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[132433-132439]:Modifier[132433-132439]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[132440-132445]:Modifier[132440-132445]"
  }, {
    "left" : "float",
    "right" : "float",
    "info" : "PrimitiveType[132446-132451]:PrimitiveType[132446-132451]"
  }, {
    "left" : "float n",
    "right" : "float n",
    "info" : "SingleVariableDeclaration[132455-132462]:SingleVariableDeclaration[132455-132462]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[132464-132485]:Block[132464-132485]"
  }, {
    "left" : "return n*n;",
    "right" : "return n*n;",
    "info" : "ReturnStatement[132470-132481]:ReturnStatement[132470-132481]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[132970-132976]:Modifier[132970-132976]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[132977-132983]:Modifier[132977-132983]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[132984-132989]:Modifier[132984-132989]"
  }, {
    "left" : "float",
    "right" : "float",
    "info" : "PrimitiveType[132990-132995]:PrimitiveType[132990-132995]"
  }, {
    "left" : "float n",
    "right" : "float n",
    "info" : "SingleVariableDeclaration[133001-133008]:SingleVariableDeclaration[133001-133008]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[133010-133047]:Block[133010-133047]"
  }, {
    "left" : "return (float)Math.sqrt(n);",
    "right" : "return (float)Math.sqrt(n);",
    "info" : "ReturnStatement[133016-133043]:ReturnStatement[133016-133043]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[133347-133353]:Modifier[133347-133353]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[133354-133360]:Modifier[133354-133360]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[133361-133366]:Modifier[133361-133366]"
  }, {
    "left" : "float",
    "right" : "float",
    "info" : "PrimitiveType[133367-133372]:PrimitiveType[133367-133372]"
  }, {
    "left" : "float n",
    "right" : "float n",
    "info" : "SingleVariableDeclaration[133377-133384]:SingleVariableDeclaration[133377-133384]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[133386-133422]:Block[133386-133422]"
  }, {
    "left" : "return (float)Math.log(n);",
    "right" : "return (float)Math.log(n);",
    "info" : "ReturnStatement[133392-133418]:ReturnStatement[133392-133418]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[133685-133691]:Modifier[133685-133691]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[133692-133698]:Modifier[133692-133698]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[133699-133704]:Modifier[133699-133704]"
  }, {
    "left" : "float",
    "right" : "float",
    "info" : "PrimitiveType[133705-133710]:PrimitiveType[133705-133710]"
  }, {
    "left" : "float n",
    "right" : "float n",
    "info" : "SingleVariableDeclaration[133715-133722]:SingleVariableDeclaration[133715-133722]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[133724-133760]:Block[133724-133760]"
  }, {
    "left" : "return (float)Math.exp(n);",
    "right" : "return (float)Math.exp(n);",
    "info" : "ReturnStatement[133730-133756]:ReturnStatement[133730-133756]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[134320-134326]:Modifier[134320-134326]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[134327-134333]:Modifier[134327-134333]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[134334-134339]:Modifier[134334-134339]"
  }, {
    "left" : "float",
    "right" : "float",
    "info" : "PrimitiveType[134340-134345]:PrimitiveType[134340-134345]"
  }, {
    "left" : "float n",
    "right" : "float n",
    "info" : "SingleVariableDeclaration[134350-134357]:SingleVariableDeclaration[134350-134357]"
  }, {
    "left" : "float e",
    "right" : "float e",
    "info" : "SingleVariableDeclaration[134359-134366]:SingleVariableDeclaration[134359-134366]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[134368-134407]:Block[134368-134407]"
  }, {
    "left" : "return (float)Math.pow(n, e);",
    "right" : "return (float)Math.pow(n, e);",
    "info" : "ReturnStatement[134374-134403]:ReturnStatement[134374-134403]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[134712-134718]:Modifier[134712-134718]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[134719-134725]:Modifier[134719-134725]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[134726-134731]:Modifier[134726-134731]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[134732-134735]:PrimitiveType[134732-134735]"
  }, {
    "left" : "int a",
    "right" : "int a",
    "info" : "SingleVariableDeclaration[134740-134745]:SingleVariableDeclaration[134740-134745]"
  }, {
    "left" : "int b",
    "right" : "int b",
    "info" : "SingleVariableDeclaration[134747-134752]:SingleVariableDeclaration[134747-134752]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[134754-134787]:Block[134754-134787]"
  }, {
    "left" : "return (a > b) ? a : b;",
    "right" : "return (a > b) ? a : b;",
    "info" : "ReturnStatement[134760-134783]:ReturnStatement[134760-134783]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[134791-134797]:Modifier[134791-134797]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[134798-134804]:Modifier[134798-134804]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[134805-134810]:Modifier[134805-134810]"
  }, {
    "left" : "float",
    "right" : "float",
    "info" : "PrimitiveType[134811-134816]:PrimitiveType[134811-134816]"
  }, {
    "left" : "float a",
    "right" : "float a",
    "info" : "SingleVariableDeclaration[134821-134828]:SingleVariableDeclaration[134821-134828]"
  }, {
    "left" : "float b",
    "right" : "float b",
    "info" : "SingleVariableDeclaration[134830-134837]:SingleVariableDeclaration[134830-134837]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[134839-134872]:Block[134839-134872]"
  }, {
    "left" : "return (a > b) ? a : b;",
    "right" : "return (a > b) ? a : b;",
    "info" : "ReturnStatement[134845-134868]:ReturnStatement[134845-134868]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[135018-135024]:Modifier[135018-135024]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[135025-135031]:Modifier[135025-135031]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[135032-135037]:Modifier[135032-135037]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[135038-135041]:PrimitiveType[135038-135041]"
  }, {
    "left" : "int a",
    "right" : "int a",
    "info" : "SingleVariableDeclaration[135046-135051]:SingleVariableDeclaration[135046-135051]"
  }, {
    "left" : "int b",
    "right" : "int b",
    "info" : "SingleVariableDeclaration[135053-135058]:SingleVariableDeclaration[135053-135058]"
  }, {
    "left" : "int c",
    "right" : "int c",
    "info" : "SingleVariableDeclaration[135060-135065]:SingleVariableDeclaration[135060-135065]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[135067-135132]:Block[135067-135132]"
  }, {
    "left" : "return (a > b) ? ((a > c) ? a : c) : ((b > c) ? b : c);",
    "right" : "return (a > b) ? ((a > c) ? a : c) : ((b > c) ? b : c);",
    "info" : "ReturnStatement[135073-135128]:ReturnStatement[135073-135128]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[135137-135143]:Modifier[135137-135143]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[135144-135150]:Modifier[135144-135150]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[135151-135156]:Modifier[135151-135156]"
  }, {
    "left" : "float",
    "right" : "float",
    "info" : "PrimitiveType[135157-135162]:PrimitiveType[135157-135162]"
  }, {
    "left" : "float a",
    "right" : "float a",
    "info" : "SingleVariableDeclaration[135167-135174]:SingleVariableDeclaration[135167-135174]"
  }, {
    "left" : "float b",
    "right" : "float b",
    "info" : "SingleVariableDeclaration[135176-135183]:SingleVariableDeclaration[135176-135183]"
  }, {
    "left" : "float c",
    "right" : "float c",
    "info" : "SingleVariableDeclaration[135185-135192]:SingleVariableDeclaration[135185-135192]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[135194-135259]:Block[135194-135259]"
  }, {
    "left" : "return (a > b) ? ((a > c) ? a : c) : ((b > c) ? b : c);",
    "right" : "return (a > b) ? ((a > c) ? a : c) : ((b > c) ? b : c);",
    "info" : "ReturnStatement[135200-135255]:ReturnStatement[135200-135255]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[135321-135327]:Modifier[135321-135327]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[135328-135334]:Modifier[135328-135334]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[135335-135340]:Modifier[135335-135340]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[135341-135344]:PrimitiveType[135341-135344]"
  }, {
    "left" : "int[] list",
    "right" : "int[] list",
    "info" : "SingleVariableDeclaration[135349-135359]:SingleVariableDeclaration[135349-135359]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[135361-135592]:Block[135361-135592]"
  }, {
    "left" : "if (list.length == 0)",
    "right" : "if (list.length == 0)",
    "info" : "IfStatement[135367-135459]:IfStatement[135367-135459]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[135389-135459]:Block[135389-135459]"
  }, {
    "left" : "throw new ArrayIndexOutOfBoundsException(ERROR_MIN_MAX);",
    "right" : "throw new ArrayIndexOutOfBoundsException(ERROR_MIN_MAX);",
    "info" : "ThrowStatement[135397-135453]:ThrowStatement[135397-135453]"
  }, {
    "left" : "int max = list[0];",
    "right" : "int max = list[0];",
    "info" : "VariableDeclarationStatement[135464-135482]:VariableDeclarationStatement[135464-135482]"
  }, {
    "left" : "for (int i = 1; i < list.length; i++)",
    "right" : "for (int i = 1; i < list.length; i++)",
    "info" : "ForStatement[135487-135572]:ForStatement[135487-135572]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[135525-135572]:Block[135525-135572]"
  }, {
    "left" : "if (list[i] > max)",
    "right" : "if (list[i] > max)",
    "info" : "IfStatement[135533-135566]:IfStatement[135533-135566]"
  }, {
    "left" : "max = list[i];",
    "right" : "max = list[i];",
    "info" : "ExpressionStatement[135552-135566]:ExpressionStatement[135552-135566]"
  }, {
    "left" : "return max;",
    "right" : "return max;",
    "info" : "ReturnStatement[135577-135588]:ReturnStatement[135577-135588]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[135596-135602]:Modifier[135596-135602]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[135603-135609]:Modifier[135603-135609]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[135610-135615]:Modifier[135610-135615]"
  }, {
    "left" : "float",
    "right" : "float",
    "info" : "PrimitiveType[135616-135621]:PrimitiveType[135616-135621]"
  }, {
    "left" : "float[] list",
    "right" : "float[] list",
    "info" : "SingleVariableDeclaration[135626-135638]:SingleVariableDeclaration[135626-135638]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[135640-135873]:Block[135640-135873]"
  }, {
    "left" : "if (list.length == 0)",
    "right" : "if (list.length == 0)",
    "info" : "IfStatement[135646-135738]:IfStatement[135646-135738]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[135668-135738]:Block[135668-135738]"
  }, {
    "left" : "throw new ArrayIndexOutOfBoundsException(ERROR_MIN_MAX);",
    "right" : "throw new ArrayIndexOutOfBoundsException(ERROR_MIN_MAX);",
    "info" : "ThrowStatement[135676-135732]:ThrowStatement[135676-135732]"
  }, {
    "left" : "float max = list[0];",
    "right" : "float max = list[0];",
    "info" : "VariableDeclarationStatement[135743-135763]:VariableDeclarationStatement[135743-135763]"
  }, {
    "left" : "for (int i = 1; i < list.length; i++)",
    "right" : "for (int i = 1; i < list.length; i++)",
    "info" : "ForStatement[135768-135853]:ForStatement[135768-135853]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[135806-135853]:Block[135806-135853]"
  }, {
    "left" : "if (list[i] > max)",
    "right" : "if (list[i] > max)",
    "info" : "IfStatement[135814-135847]:IfStatement[135814-135847]"
  }, {
    "left" : "max = list[i];",
    "right" : "max = list[i];",
    "info" : "ExpressionStatement[135833-135847]:ExpressionStatement[135833-135847]"
  }, {
    "left" : "return max;",
    "right" : "return max;",
    "info" : "ReturnStatement[135858-135869]:ReturnStatement[135858-135869]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[136363-136369]:Modifier[136363-136369]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[136370-136376]:Modifier[136370-136376]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[136377-136382]:Modifier[136377-136382]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[136383-136386]:PrimitiveType[136383-136386]"
  }, {
    "left" : "int a",
    "right" : "int a",
    "info" : "SingleVariableDeclaration[136391-136396]:SingleVariableDeclaration[136391-136396]"
  }, {
    "left" : "int b",
    "right" : "int b",
    "info" : "SingleVariableDeclaration[136398-136403]:SingleVariableDeclaration[136398-136403]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[136405-136438]:Block[136405-136438]"
  }, {
    "left" : "return (a < b) ? a : b;",
    "right" : "return (a < b) ? a : b;",
    "info" : "ReturnStatement[136411-136434]:ReturnStatement[136411-136434]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[136442-136448]:Modifier[136442-136448]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[136449-136455]:Modifier[136449-136455]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[136456-136461]:Modifier[136456-136461]"
  }, {
    "left" : "float",
    "right" : "float",
    "info" : "PrimitiveType[136462-136467]:PrimitiveType[136462-136467]"
  }, {
    "left" : "float a",
    "right" : "float a",
    "info" : "SingleVariableDeclaration[136472-136479]:SingleVariableDeclaration[136472-136479]"
  }, {
    "left" : "float b",
    "right" : "float b",
    "info" : "SingleVariableDeclaration[136481-136488]:SingleVariableDeclaration[136481-136488]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[136490-136523]:Block[136490-136523]"
  }, {
    "left" : "return (a < b) ? a : b;",
    "right" : "return (a < b) ? a : b;",
    "info" : "ReturnStatement[136496-136519]:ReturnStatement[136496-136519]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[136626-136632]:Modifier[136626-136632]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[136633-136639]:Modifier[136633-136639]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[136640-136645]:Modifier[136640-136645]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[136646-136649]:PrimitiveType[136646-136649]"
  }, {
    "left" : "int a",
    "right" : "int a",
    "info" : "SingleVariableDeclaration[136654-136659]:SingleVariableDeclaration[136654-136659]"
  }, {
    "left" : "int b",
    "right" : "int b",
    "info" : "SingleVariableDeclaration[136661-136666]:SingleVariableDeclaration[136661-136666]"
  }, {
    "left" : "int c",
    "right" : "int c",
    "info" : "SingleVariableDeclaration[136668-136673]:SingleVariableDeclaration[136668-136673]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[136675-136740]:Block[136675-136740]"
  }, {
    "left" : "return (a < b) ? ((a < c) ? a : c) : ((b < c) ? b : c);",
    "right" : "return (a < b) ? ((a < c) ? a : c) : ((b < c) ? b : c);",
    "info" : "ReturnStatement[136681-136736]:ReturnStatement[136681-136736]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[137051-137057]:Modifier[137051-137057]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[137058-137064]:Modifier[137058-137064]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[137065-137070]:Modifier[137065-137070]"
  }, {
    "left" : "float",
    "right" : "float",
    "info" : "PrimitiveType[137071-137076]:PrimitiveType[137071-137076]"
  }, {
    "left" : "float a",
    "right" : "float a",
    "info" : "SingleVariableDeclaration[137081-137088]:SingleVariableDeclaration[137081-137088]"
  }, {
    "left" : "float b",
    "right" : "float b",
    "info" : "SingleVariableDeclaration[137090-137097]:SingleVariableDeclaration[137090-137097]"
  }, {
    "left" : "float c",
    "right" : "float c",
    "info" : "SingleVariableDeclaration[137099-137106]:SingleVariableDeclaration[137099-137106]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[137108-137173]:Block[137108-137173]"
  }, {
    "left" : "return (a < b) ? ((a < c) ? a : c) : ((b < c) ? b : c);",
    "right" : "return (a < b) ? ((a < c) ? a : c) : ((b < c) ? b : c);",
    "info" : "ReturnStatement[137114-137169]:ReturnStatement[137114-137169]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[137375-137381]:Modifier[137375-137381]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[137382-137388]:Modifier[137382-137388]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[137389-137394]:Modifier[137389-137394]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[137395-137398]:PrimitiveType[137395-137398]"
  }, {
    "left" : "int[] list",
    "right" : "int[] list",
    "info" : "SingleVariableDeclaration[137403-137413]:SingleVariableDeclaration[137403-137413]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[137415-137646]:Block[137415-137646]"
  }, {
    "left" : "if (list.length == 0)",
    "right" : "if (list.length == 0)",
    "info" : "IfStatement[137421-137513]:IfStatement[137421-137513]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[137443-137513]:Block[137443-137513]"
  }, {
    "left" : "throw new ArrayIndexOutOfBoundsException(ERROR_MIN_MAX);",
    "right" : "throw new ArrayIndexOutOfBoundsException(ERROR_MIN_MAX);",
    "info" : "ThrowStatement[137451-137507]:ThrowStatement[137451-137507]"
  }, {
    "left" : "int min = list[0];",
    "right" : "int min = list[0];",
    "info" : "VariableDeclarationStatement[137518-137536]:VariableDeclarationStatement[137518-137536]"
  }, {
    "left" : "for (int i = 1; i < list.length; i++)",
    "right" : "for (int i = 1; i < list.length; i++)",
    "info" : "ForStatement[137541-137626]:ForStatement[137541-137626]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[137579-137626]:Block[137579-137626]"
  }, {
    "left" : "if (list[i] < min)",
    "right" : "if (list[i] < min)",
    "info" : "IfStatement[137587-137620]:IfStatement[137587-137620]"
  }, {
    "left" : "min = list[i];",
    "right" : "min = list[i];",
    "info" : "ExpressionStatement[137606-137620]:ExpressionStatement[137606-137620]"
  }, {
    "left" : "return min;",
    "right" : "return min;",
    "info" : "ReturnStatement[137631-137642]:ReturnStatement[137631-137642]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[137650-137656]:Modifier[137650-137656]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[137657-137663]:Modifier[137657-137663]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[137664-137669]:Modifier[137664-137669]"
  }, {
    "left" : "float",
    "right" : "float",
    "info" : "PrimitiveType[137670-137675]:PrimitiveType[137670-137675]"
  }, {
    "left" : "float[] list",
    "right" : "float[] list",
    "info" : "SingleVariableDeclaration[137680-137692]:SingleVariableDeclaration[137680-137692]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[137694-137927]:Block[137694-137927]"
  }, {
    "left" : "if (list.length == 0)",
    "right" : "if (list.length == 0)",
    "info" : "IfStatement[137700-137792]:IfStatement[137700-137792]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[137722-137792]:Block[137722-137792]"
  }, {
    "left" : "throw new ArrayIndexOutOfBoundsException(ERROR_MIN_MAX);",
    "right" : "throw new ArrayIndexOutOfBoundsException(ERROR_MIN_MAX);",
    "info" : "ThrowStatement[137730-137786]:ThrowStatement[137730-137786]"
  }, {
    "left" : "float min = list[0];",
    "right" : "float min = list[0];",
    "info" : "VariableDeclarationStatement[137797-137817]:VariableDeclarationStatement[137797-137817]"
  }, {
    "left" : "for (int i = 1; i < list.length; i++)",
    "right" : "for (int i = 1; i < list.length; i++)",
    "info" : "ForStatement[137822-137907]:ForStatement[137822-137907]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[137860-137907]:Block[137860-137907]"
  }, {
    "left" : "if (list[i] < min)",
    "right" : "if (list[i] < min)",
    "info" : "IfStatement[137868-137901]:IfStatement[137868-137901]"
  }, {
    "left" : "min = list[i];",
    "right" : "min = list[i];",
    "info" : "ExpressionStatement[137887-137901]:ExpressionStatement[137887-137901]"
  }, {
    "left" : "return min;",
    "right" : "return min;",
    "info" : "ReturnStatement[137912-137923]:ReturnStatement[137912-137923]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[138416-138422]:Modifier[138416-138422]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[138423-138429]:Modifier[138423-138429]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[138430-138435]:Modifier[138430-138435]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[138436-138439]:PrimitiveType[138436-138439]"
  }, {
    "left" : "int amt",
    "right" : "int amt",
    "info" : "SingleVariableDeclaration[138450-138457]:SingleVariableDeclaration[138450-138457]"
  }, {
    "left" : "int low",
    "right" : "int low",
    "info" : "SingleVariableDeclaration[138459-138466]:SingleVariableDeclaration[138459-138466]"
  }, {
    "left" : "int high",
    "right" : "int high",
    "info" : "SingleVariableDeclaration[138468-138476]:SingleVariableDeclaration[138468-138476]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[138478-138543]:Block[138478-138543]"
  }, {
    "left" : "return (amt < low) ? low : ((amt > high) ? high : amt);",
    "right" : "return (amt < low) ? low : ((amt > high) ? high : amt);",
    "info" : "ReturnStatement[138484-138539]:ReturnStatement[138484-138539]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[138928-138934]:Modifier[138928-138934]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[138935-138941]:Modifier[138935-138941]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[138942-138947]:Modifier[138942-138947]"
  }, {
    "left" : "float",
    "right" : "float",
    "info" : "PrimitiveType[138948-138953]:PrimitiveType[138948-138953]"
  }, {
    "left" : "float amt",
    "right" : "float amt",
    "info" : "SingleVariableDeclaration[138964-138973]:SingleVariableDeclaration[138964-138973]"
  }, {
    "left" : "float low",
    "right" : "float low",
    "info" : "SingleVariableDeclaration[138975-138984]:SingleVariableDeclaration[138975-138984]"
  }, {
    "left" : "float high",
    "right" : "float high",
    "info" : "SingleVariableDeclaration[138986-138996]:SingleVariableDeclaration[138986-138996]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[138998-139063]:Block[138998-139063]"
  }, {
    "left" : "return (amt < low) ? low : ((amt > high) ? high : amt);",
    "right" : "return (amt < low) ? low : ((amt > high) ? high : amt);",
    "info" : "ReturnStatement[139004-139059]:ReturnStatement[139004-139059]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[139522-139528]:Modifier[139522-139528]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[139529-139535]:Modifier[139529-139535]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[139536-139541]:Modifier[139536-139541]"
  }, {
    "left" : "float",
    "right" : "float",
    "info" : "PrimitiveType[139542-139547]:PrimitiveType[139542-139547]"
  }, {
    "left" : "float angle",
    "right" : "float angle",
    "info" : "SingleVariableDeclaration[139552-139563]:SingleVariableDeclaration[139552-139563]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[139565-139605]:Block[139565-139605]"
  }, {
    "left" : "return (float)Math.sin(angle);",
    "right" : "return (float)Math.sin(angle);",
    "info" : "ReturnStatement[139571-139601]:ReturnStatement[139571-139601]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[140066-140072]:Modifier[140066-140072]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[140073-140079]:Modifier[140073-140079]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[140080-140085]:Modifier[140080-140085]"
  }, {
    "left" : "float",
    "right" : "float",
    "info" : "PrimitiveType[140086-140091]:PrimitiveType[140086-140091]"
  }, {
    "left" : "float angle",
    "right" : "float angle",
    "info" : "SingleVariableDeclaration[140096-140107]:SingleVariableDeclaration[140096-140107]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[140109-140149]:Block[140109-140149]"
  }, {
    "left" : "return (float)Math.cos(angle);",
    "right" : "return (float)Math.cos(angle);",
    "info" : "ReturnStatement[140115-140145]:ReturnStatement[140115-140145]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[140665-140671]:Modifier[140665-140671]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[140672-140678]:Modifier[140672-140678]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[140679-140684]:Modifier[140679-140684]"
  }, {
    "left" : "float",
    "right" : "float",
    "info" : "PrimitiveType[140685-140690]:PrimitiveType[140685-140690]"
  }, {
    "left" : "float angle",
    "right" : "float angle",
    "info" : "SingleVariableDeclaration[140695-140706]:SingleVariableDeclaration[140695-140706]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[140708-140748]:Block[140708-140748]"
  }, {
    "left" : "return (float)Math.tan(angle);",
    "right" : "return (float)Math.tan(angle);",
    "info" : "ReturnStatement[140714-140744]:ReturnStatement[140714-140744]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[141225-141231]:Modifier[141225-141231]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[141232-141238]:Modifier[141232-141238]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[141239-141244]:Modifier[141239-141244]"
  }, {
    "left" : "float",
    "right" : "float",
    "info" : "PrimitiveType[141245-141250]:PrimitiveType[141245-141250]"
  }, {
    "left" : "float value",
    "right" : "float value",
    "info" : "SingleVariableDeclaration[141256-141267]:SingleVariableDeclaration[141256-141267]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[141269-141310]:Block[141269-141310]"
  }, {
    "left" : "return (float)Math.asin(value);",
    "right" : "return (float)Math.asin(value);",
    "info" : "ReturnStatement[141275-141306]:ReturnStatement[141275-141306]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[141797-141803]:Modifier[141797-141803]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[141804-141810]:Modifier[141804-141810]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[141811-141816]:Modifier[141811-141816]"
  }, {
    "left" : "float",
    "right" : "float",
    "info" : "PrimitiveType[141817-141822]:PrimitiveType[141817-141822]"
  }, {
    "left" : "float value",
    "right" : "float value",
    "info" : "SingleVariableDeclaration[141828-141839]:SingleVariableDeclaration[141828-141839]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[141841-141882]:Block[141841-141882]"
  }, {
    "left" : "return (float)Math.acos(value);",
    "right" : "return (float)Math.acos(value);",
    "info" : "ReturnStatement[141847-141878]:ReturnStatement[141847-141878]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[142380-142386]:Modifier[142380-142386]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[142387-142393]:Modifier[142387-142393]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[142394-142399]:Modifier[142394-142399]"
  }, {
    "left" : "float",
    "right" : "float",
    "info" : "PrimitiveType[142400-142405]:PrimitiveType[142400-142405]"
  }, {
    "left" : "float value",
    "right" : "float value",
    "info" : "SingleVariableDeclaration[142411-142422]:SingleVariableDeclaration[142411-142422]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[142424-142465]:Block[142424-142465]"
  }, {
    "left" : "return (float)Math.atan(value);",
    "right" : "return (float)Math.atan(value);",
    "info" : "ReturnStatement[142430-142461]:ReturnStatement[142430-142461]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[143184-143190]:Modifier[143184-143190]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[143191-143197]:Modifier[143191-143197]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[143198-143203]:Modifier[143198-143203]"
  }, {
    "left" : "float",
    "right" : "float",
    "info" : "PrimitiveType[143204-143209]:PrimitiveType[143204-143209]"
  }, {
    "left" : "float y",
    "right" : "float y",
    "info" : "SingleVariableDeclaration[143216-143223]:SingleVariableDeclaration[143216-143223]"
  }, {
    "left" : "float x",
    "right" : "float x",
    "info" : "SingleVariableDeclaration[143225-143232]:SingleVariableDeclaration[143225-143232]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[143234-143275]:Block[143234-143275]"
  }, {
    "left" : "return (float)Math.atan2(y, x);",
    "right" : "return (float)Math.atan2(y, x);",
    "info" : "ReturnStatement[143240-143271]:ReturnStatement[143240-143271]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[143849-143855]:Modifier[143849-143855]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[143856-143862]:Modifier[143856-143862]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[143863-143868]:Modifier[143863-143868]"
  }, {
    "left" : "float",
    "right" : "float",
    "info" : "PrimitiveType[143869-143874]:PrimitiveType[143869-143874]"
  }, {
    "left" : "float radians",
    "right" : "float radians",
    "info" : "SingleVariableDeclaration[143883-143896]:SingleVariableDeclaration[143883-143896]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[143898-143936]:Block[143898-143936]"
  }, {
    "left" : "return radians * RAD_TO_DEG;",
    "right" : "return radians * RAD_TO_DEG;",
    "info" : "ReturnStatement[143904-143932]:ReturnStatement[143904-143932]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[144510-144516]:Modifier[144510-144516]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[144517-144523]:Modifier[144517-144523]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[144524-144529]:Modifier[144524-144529]"
  }, {
    "left" : "float",
    "right" : "float",
    "info" : "PrimitiveType[144530-144535]:PrimitiveType[144530-144535]"
  }, {
    "left" : "float degrees",
    "right" : "float degrees",
    "info" : "SingleVariableDeclaration[144544-144557]:SingleVariableDeclaration[144544-144557]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[144559-144597]:Block[144559-144597]"
  }, {
    "left" : "return degrees * DEG_TO_RAD;",
    "right" : "return degrees * DEG_TO_RAD;",
    "info" : "ReturnStatement[144565-144593]:ReturnStatement[144565-144593]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[144975-144981]:Modifier[144975-144981]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[144982-144988]:Modifier[144982-144988]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[144989-144994]:Modifier[144989-144994]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[144995-144998]:PrimitiveType[144995-144998]"
  }, {
    "left" : "float n",
    "right" : "float n",
    "info" : "SingleVariableDeclaration[145004-145011]:SingleVariableDeclaration[145004-145011]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[145013-145049]:Block[145013-145049]"
  }, {
    "left" : "return (int) Math.ceil(n);",
    "right" : "return (int) Math.ceil(n);",
    "info" : "ReturnStatement[145019-145045]:ReturnStatement[145019-145045]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[145373-145379]:Modifier[145373-145379]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[145380-145386]:Modifier[145380-145386]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[145387-145392]:Modifier[145387-145392]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[145393-145396]:PrimitiveType[145393-145396]"
  }, {
    "left" : "float n",
    "right" : "float n",
    "info" : "SingleVariableDeclaration[145403-145410]:SingleVariableDeclaration[145403-145410]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[145412-145449]:Block[145412-145449]"
  }, {
    "left" : "return (int) Math.floor(n);",
    "right" : "return (int) Math.floor(n);",
    "info" : "ReturnStatement[145418-145445]:ReturnStatement[145418-145445]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[145791-145797]:Modifier[145791-145797]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[145798-145804]:Modifier[145798-145804]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[145805-145810]:Modifier[145805-145810]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[145811-145814]:PrimitiveType[145811-145814]"
  }, {
    "left" : "float n",
    "right" : "float n",
    "info" : "SingleVariableDeclaration[145821-145828]:SingleVariableDeclaration[145821-145828]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[145830-145861]:Block[145830-145861]"
  }, {
    "left" : "return Math.round(n);",
    "right" : "return Math.round(n);",
    "info" : "ReturnStatement[145836-145857]:ReturnStatement[145836-145857]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[145866-145872]:Modifier[145866-145872]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[145873-145879]:Modifier[145873-145879]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[145880-145885]:Modifier[145880-145885]"
  }, {
    "left" : "float",
    "right" : "float",
    "info" : "PrimitiveType[145886-145891]:PrimitiveType[145886-145891]"
  }, {
    "left" : "float a",
    "right" : "float a",
    "info" : "SingleVariableDeclaration[145896-145903]:SingleVariableDeclaration[145896-145903]"
  }, {
    "left" : "float b",
    "right" : "float b",
    "info" : "SingleVariableDeclaration[145905-145912]:SingleVariableDeclaration[145905-145912]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[145914-145959]:Block[145914-145959]"
  }, {
    "left" : "return (float)Math.sqrt(a*a + b*b);",
    "right" : "return (float)Math.sqrt(a*a + b*b);",
    "info" : "ReturnStatement[145920-145955]:ReturnStatement[145920-145955]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[146578-146584]:Modifier[146578-146584]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[146585-146591]:Modifier[146585-146591]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[146592-146597]:Modifier[146592-146597]"
  }, {
    "left" : "float",
    "right" : "float",
    "info" : "PrimitiveType[146598-146603]:PrimitiveType[146598-146603]"
  }, {
    "left" : "float a",
    "right" : "float a",
    "info" : "SingleVariableDeclaration[146608-146615]:SingleVariableDeclaration[146608-146615]"
  }, {
    "left" : "float b",
    "right" : "float b",
    "info" : "SingleVariableDeclaration[146617-146624]:SingleVariableDeclaration[146617-146624]"
  }, {
    "left" : "float c",
    "right" : "float c",
    "info" : "SingleVariableDeclaration[146626-146633]:SingleVariableDeclaration[146626-146633]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[146635-146686]:Block[146635-146686]"
  }, {
    "left" : "return (float)Math.sqrt(a*a + b*b + c*c);",
    "right" : "return (float)Math.sqrt(a*a + b*b + c*c);",
    "info" : "ReturnStatement[146641-146682]:ReturnStatement[146641-146682]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[146691-146697]:Modifier[146691-146697]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[146698-146704]:Modifier[146698-146704]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[146705-146710]:Modifier[146705-146710]"
  }, {
    "left" : "float",
    "right" : "float",
    "info" : "PrimitiveType[146711-146716]:PrimitiveType[146711-146716]"
  }, {
    "left" : "float x1",
    "right" : "float x1",
    "info" : "SingleVariableDeclaration[146722-146730]:SingleVariableDeclaration[146722-146730]"
  }, {
    "left" : "float y1",
    "right" : "float y1",
    "info" : "SingleVariableDeclaration[146732-146740]:SingleVariableDeclaration[146732-146740]"
  }, {
    "left" : "float x2",
    "right" : "float x2",
    "info" : "SingleVariableDeclaration[146742-146750]:SingleVariableDeclaration[146742-146750]"
  }, {
    "left" : "float y2",
    "right" : "float y2",
    "info" : "SingleVariableDeclaration[146752-146760]:SingleVariableDeclaration[146752-146760]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[146762-146807]:Block[146762-146807]"
  }, {
    "left" : "return sqrt(sq(x2-x1) + sq(y2-y1));",
    "right" : "return sqrt(sq(x2-x1) + sq(y2-y1));",
    "info" : "ReturnStatement[146768-146803]:ReturnStatement[146768-146803]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[147267-147273]:Modifier[147267-147273]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[147274-147280]:Modifier[147274-147280]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[147281-147286]:Modifier[147281-147286]"
  }, {
    "left" : "float",
    "right" : "float",
    "info" : "PrimitiveType[147287-147292]:PrimitiveType[147287-147292]"
  }, {
    "left" : "float x1",
    "right" : "float x1",
    "info" : "SingleVariableDeclaration[147298-147306]:SingleVariableDeclaration[147298-147306]"
  }, {
    "left" : "float y1",
    "right" : "float y1",
    "info" : "SingleVariableDeclaration[147308-147316]:SingleVariableDeclaration[147308-147316]"
  }, {
    "left" : "float z1",
    "right" : "float z1",
    "info" : "SingleVariableDeclaration[147318-147326]:SingleVariableDeclaration[147318-147326]"
  }, {
    "left" : "float x2",
    "right" : "float x2",
    "info" : "SingleVariableDeclaration[147361-147369]:SingleVariableDeclaration[147361-147369]"
  }, {
    "left" : "float y2",
    "right" : "float y2",
    "info" : "SingleVariableDeclaration[147371-147379]:SingleVariableDeclaration[147371-147379]"
  }, {
    "left" : "float z2",
    "right" : "float z2",
    "info" : "SingleVariableDeclaration[147381-147389]:SingleVariableDeclaration[147381-147389]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[147391-147448]:Block[147391-147448]"
  }, {
    "left" : "return sqrt(sq(x2-x1) + sq(y2-y1) + sq(z2-z1));",
    "right" : "return sqrt(sq(x2-x1) + sq(y2-y1) + sq(z2-z1));",
    "info" : "ReturnStatement[147397-147444]:ReturnStatement[147397-147444]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[148269-148275]:Modifier[148269-148275]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[148276-148282]:Modifier[148276-148282]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[148283-148288]:Modifier[148283-148288]"
  }, {
    "left" : "float",
    "right" : "float",
    "info" : "PrimitiveType[148289-148294]:PrimitiveType[148289-148294]"
  }, {
    "left" : "float start",
    "right" : "float start",
    "info" : "SingleVariableDeclaration[148300-148311]:SingleVariableDeclaration[148300-148311]"
  }, {
    "left" : "float stop",
    "right" : "float stop",
    "info" : "SingleVariableDeclaration[148313-148323]:SingleVariableDeclaration[148313-148323]"
  }, {
    "left" : "float amt",
    "right" : "float amt",
    "info" : "SingleVariableDeclaration[148325-148334]:SingleVariableDeclaration[148325-148334]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[148336-148380]:Block[148336-148380]"
  }, {
    "left" : "return start + (stop-start) * amt;",
    "right" : "return start + (stop-start) * amt;",
    "info" : "ReturnStatement[148342-148376]:ReturnStatement[148342-148376]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[149060-149066]:Modifier[149060-149066]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[149067-149073]:Modifier[149067-149073]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[149074-149079]:Modifier[149074-149079]"
  }, {
    "left" : "float",
    "right" : "float",
    "info" : "PrimitiveType[149080-149085]:PrimitiveType[149080-149085]"
  }, {
    "left" : "float value",
    "right" : "float value",
    "info" : "SingleVariableDeclaration[149091-149102]:SingleVariableDeclaration[149091-149102]"
  }, {
    "left" : "float start",
    "right" : "float start",
    "info" : "SingleVariableDeclaration[149104-149115]:SingleVariableDeclaration[149104-149115]"
  }, {
    "left" : "float stop",
    "right" : "float stop",
    "info" : "SingleVariableDeclaration[149117-149127]:SingleVariableDeclaration[149117-149127]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[149129-149179]:Block[149129-149179]"
  }, {
    "left" : "return (value - start) / (stop - start);",
    "right" : "return (value - start) / (stop - start);",
    "info" : "ReturnStatement[149135-149175]:ReturnStatement[149135-149175]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[150063-150069]:Modifier[150063-150069]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[150070-150076]:Modifier[150070-150076]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[150077-150082]:Modifier[150077-150082]"
  }, {
    "left" : "float",
    "right" : "float",
    "info" : "PrimitiveType[150083-150088]:PrimitiveType[150083-150088]"
  }, {
    "left" : "float value",
    "right" : "float value",
    "info" : "SingleVariableDeclaration[150093-150104]:SingleVariableDeclaration[150093-150104]"
  }, {
    "left" : "float start1",
    "right" : "float start1",
    "info" : "SingleVariableDeclaration[150138-150150]:SingleVariableDeclaration[150138-150150]"
  }, {
    "left" : "float stop1",
    "right" : "float stop1",
    "info" : "SingleVariableDeclaration[150152-150163]:SingleVariableDeclaration[150152-150163]"
  }, {
    "left" : "float start2",
    "right" : "float start2",
    "info" : "SingleVariableDeclaration[150197-150209]:SingleVariableDeclaration[150197-150209]"
  }, {
    "left" : "float stop2",
    "right" : "float stop2",
    "info" : "SingleVariableDeclaration[150211-150222]:SingleVariableDeclaration[150211-150222]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[150224-150307]:Block[150224-150307]"
  }, {
    "left" : "return start2 + (stop2 - start2) * ((value - start1) / (stop1 - start1));",
    "right" : "return start2 + (stop2 - start2) * ((value - start1) / (stop1 - start1));",
    "info" : "ReturnStatement[150230-150303]:ReturnStatement[150230-150303]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[150711-150717]:Modifier[150711-150717]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[150718-150723]:Modifier[150718-150723]"
  }, {
    "left" : "float",
    "right" : "float",
    "info" : "PrimitiveType[150724-150729]:PrimitiveType[150724-150729]"
  }, {
    "left" : "float high",
    "right" : "float high",
    "info" : "SingleVariableDeclaration[150737-150747]:SingleVariableDeclaration[150737-150747]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[150749-151258]:Block[150749-151258]"
  }, {
    "left" : "if (high == 0 || high != high)",
    "right" : "if (high == 0 || high != high)",
    "info" : "IfStatement[150813-150867]:IfStatement[150813-150867]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[150844-150867]:Block[150844-150867]"
  }, {
    "left" : "return 0;",
    "right" : "return 0;",
    "info" : "ReturnStatement[150852-150861]:ReturnStatement[150852-150861]"
  }, {
    "left" : "if (internalRandom == null)",
    "right" : "if (internalRandom == null)",
    "info" : "IfStatement[150873-150945]:IfStatement[150873-150945]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[150901-150945]:Block[150901-150945]"
  }, {
    "left" : "internalRandom = new Random();",
    "right" : "internalRandom = new Random();",
    "info" : "ExpressionStatement[150909-150939]:ExpressionStatement[150909-150939]"
  }, {
    "left" : "float value = 0;",
    "right" : "float value = 0;",
    "info" : "VariableDeclarationStatement[151133-151149]:VariableDeclarationStatement[151133-151149]"
  }, {
    "left" : "do{...}",
    "right" : "do{...}",
    "info" : "DoStatement[151154-151236]:DoStatement[151154-151236]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[151157-151213]:Block[151157-151213]"
  }, {
    "left" : "value = internalRandom.nextFloat() * high;",
    "right" : "value = internalRandom.nextFloat() * high;",
    "info" : "ExpressionStatement[151165-151207]:ExpressionStatement[151165-151207]"
  }, {
    "left" : "return value;",
    "right" : "return value;",
    "info" : "ReturnStatement[151241-151254]:ReturnStatement[151241-151254]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[151990-151996]:Modifier[151990-151996]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[151997-152002]:Modifier[151997-152002]"
  }, {
    "left" : "float",
    "right" : "float",
    "info" : "PrimitiveType[152003-152008]:PrimitiveType[152003-152008]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[152026-152158]:Block[152026-152158]"
  }, {
    "left" : "if (internalRandom == null)",
    "right" : "if (internalRandom == null)",
    "info" : "IfStatement[152032-152104]:IfStatement[152032-152104]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[152060-152104]:Block[152060-152104]"
  }, {
    "left" : "internalRandom = new Random();",
    "right" : "internalRandom = new Random();",
    "info" : "ExpressionStatement[152068-152098]:ExpressionStatement[152068-152098]"
  }, {
    "left" : "return (float) internalRandom.nextGaussian();",
    "right" : "return (float) internalRandom.nextGaussian();",
    "info" : "ReturnStatement[152109-152154]:ReturnStatement[152109-152154]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[153142-153148]:Modifier[153142-153148]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[153149-153154]:Modifier[153149-153154]"
  }, {
    "left" : "float",
    "right" : "float",
    "info" : "PrimitiveType[153155-153160]:PrimitiveType[153155-153160]"
  }, {
    "left" : "float low",
    "right" : "float low",
    "info" : "SingleVariableDeclaration[153168-153177]:SingleVariableDeclaration[153168-153177]"
  }, {
    "left" : "float high",
    "right" : "float high",
    "info" : "SingleVariableDeclaration[153179-153189]:SingleVariableDeclaration[153179-153189]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[153191-153289]:Block[153191-153289]"
  }, {
    "left" : "if (low >= high)",
    "right" : "if (low >= high)",
    "info" : "IfStatement[153197-153225]:IfStatement[153197-153225]"
  }, {
    "left" : "return low;",
    "right" : "return low;",
    "info" : "ReturnStatement[153214-153225]:ReturnStatement[153214-153225]"
  }, {
    "left" : "float diff = high - low;",
    "right" : "float diff = high - low;",
    "info" : "VariableDeclarationStatement[153230-153254]:VariableDeclarationStatement[153230-153254]"
  }, {
    "left" : "return random(diff) + low;",
    "right" : "return random(diff) + low;",
    "info" : "ReturnStatement[153259-153285]:ReturnStatement[153259-153285]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[153826-153832]:Modifier[153826-153832]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[153833-153838]:Modifier[153833-153838]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[153839-153843]:PrimitiveType[153839-153843]"
  }, {
    "left" : "long seed",
    "right" : "long seed",
    "info" : "SingleVariableDeclaration[153855-153864]:SingleVariableDeclaration[153855-153864]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[153866-153982]:Block[153866-153982]"
  }, {
    "left" : "if (internalRandom == null)",
    "right" : "if (internalRandom == null)",
    "info" : "IfStatement[153872-153944]:IfStatement[153872-153944]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[153900-153944]:Block[153900-153944]"
  }, {
    "left" : "internalRandom = new Random();",
    "right" : "internalRandom = new Random();",
    "info" : "ExpressionStatement[153908-153938]:ExpressionStatement[153908-153938]"
  }, {
    "left" : "internalRandom.setSeed(seed);",
    "right" : "internalRandom.setSeed(seed);",
    "info" : "ExpressionStatement[153949-153978]:ExpressionStatement[153949-153978]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[154971-154977]:Modifier[154971-154977]"
  }, {
    "left" : "float",
    "right" : "float",
    "info" : "PrimitiveType[154978-154983]:PrimitiveType[154978-154983]"
  }, {
    "left" : "float x",
    "right" : "float x",
    "info" : "SingleVariableDeclaration[154990-154997]:SingleVariableDeclaration[154990-154997]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[154999-155102]:Block[154999-155102]"
  }, {
    "left" : "return noise(x, 0f, 0f);",
    "right" : "return noise(x, 0f, 0f);",
    "info" : "ReturnStatement[155074-155098]:ReturnStatement[155074-155098]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[155118-155124]:Modifier[155118-155124]"
  }, {
    "left" : "float",
    "right" : "float",
    "info" : "PrimitiveType[155125-155130]:PrimitiveType[155125-155130]"
  }, {
    "left" : "float x",
    "right" : "float x",
    "info" : "SingleVariableDeclaration[155137-155144]:SingleVariableDeclaration[155137-155144]"
  }, {
    "left" : "float y",
    "right" : "float y",
    "info" : "SingleVariableDeclaration[155146-155153]:SingleVariableDeclaration[155146-155153]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[155155-155188]:Block[155155-155188]"
  }, {
    "left" : "return noise(x, y, 0f);",
    "right" : "return noise(x, y, 0f);",
    "info" : "ReturnStatement[155161-155184]:ReturnStatement[155161-155184]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[157399-157405]:Modifier[157399-157405]"
  }, {
    "left" : "float",
    "right" : "float",
    "info" : "PrimitiveType[157406-157411]:PrimitiveType[157406-157411]"
  }, {
    "left" : "float x",
    "right" : "float x",
    "info" : "SingleVariableDeclaration[157418-157425]:SingleVariableDeclaration[157418-157425]"
  }, {
    "left" : "float y",
    "right" : "float y",
    "info" : "SingleVariableDeclaration[157427-157434]:SingleVariableDeclaration[157427-157434]"
  }, {
    "left" : "float z",
    "right" : "float z",
    "info" : "SingleVariableDeclaration[157436-157443]:SingleVariableDeclaration[157436-157443]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[157445-159137]:Block[157445-159137]"
  }, {
    "left" : "if (perlin == null)",
    "right" : "if (perlin == null)",
    "info" : "IfStatement[157451-157977]:IfStatement[157451-157977]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[157471-157977]:Block[157471-157977]"
  }, {
    "left" : "if (perlinRandom == null)",
    "right" : "if (perlinRandom == null)",
    "info" : "IfStatement[157479-157551]:IfStatement[157479-157551]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[157505-157551]:Block[157505-157551]"
  }, {
    "left" : "perlinRandom = new Random();",
    "right" : "perlinRandom = new Random();",
    "info" : "ExpressionStatement[157515-157543]:ExpressionStatement[157515-157543]"
  }, {
    "left" : "perlin = new float[PERLIN_SIZE + 1];",
    "right" : "perlin = new float[PERLIN_SIZE + 1];",
    "info" : "ExpressionStatement[157558-157594]:ExpressionStatement[157558-157594]"
  }, {
    "left" : "for (int i = 0; i < PERLIN_SIZE + 1; i++)",
    "right" : "for (int i = 0; i < PERLIN_SIZE + 1; i++)",
    "info" : "ForStatement[157601-157722]:ForStatement[157601-157722]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[157643-157722]:Block[157643-157722]"
  }, {
    "left" : "perlin[i] = perlinRandom.nextFloat();",
    "right" : "perlin[i] = perlinRandom.nextFloat();",
    "info" : "ExpressionStatement[157653-157690]:ExpressionStatement[157653-157690]"
  }, {
    "left" : "perlin_cosTable = PGraphics.cosLUT;",
    "right" : "perlin_cosTable = PGraphics.cosLUT;",
    "info" : "ExpressionStatement[157855-157890]:ExpressionStatement[157855-157890]"
  }, {
    "left" : "perlin_TWOPI = perlin_PI = PGraphics.SINCOS_LENGTH;",
    "right" : "perlin_TWOPI = perlin_PI = PGraphics.SINCOS_LENGTH;",
    "info" : "ExpressionStatement[157897-157948]:ExpressionStatement[157897-157948]"
  }, {
    "left" : "perlin_PI >>= 1;",
    "right" : "perlin_PI >>= 1;",
    "info" : "ExpressionStatement[157955-157971]:ExpressionStatement[157955-157971]"
  }, {
    "left" : "if (x<0)",
    "right" : "if (x<0)",
    "info" : "IfStatement[157983-157997]:IfStatement[157983-157997]"
  }, {
    "left" : "x=-x;",
    "right" : "x=-x;",
    "info" : "ExpressionStatement[157992-157997]:ExpressionStatement[157992-157997]"
  }, {
    "left" : "if (y<0)",
    "right" : "if (y<0)",
    "info" : "IfStatement[158002-158016]:IfStatement[158002-158016]"
  }, {
    "left" : "y=-y;",
    "right" : "y=-y;",
    "info" : "ExpressionStatement[158011-158016]:ExpressionStatement[158011-158016]"
  }, {
    "left" : "if (z<0)",
    "right" : "if (z<0)",
    "info" : "IfStatement[158021-158035]:IfStatement[158021-158035]"
  }, {
    "left" : "z=-z;",
    "right" : "z=-z;",
    "info" : "ExpressionStatement[158030-158035]:ExpressionStatement[158030-158035]"
  }, {
    "left" : "int xi=(int)x, yi=(int)y, zi=(int)z;",
    "right" : "int xi=(int)x, yi=(int)y, zi=(int)z;",
    "info" : "VariableDeclarationStatement[158041-158077]:VariableDeclarationStatement[158041-158077]"
  }, {
    "left" : "float xf = x - xi;",
    "right" : "float xf = x - xi;",
    "info" : "VariableDeclarationStatement[158082-158100]:VariableDeclarationStatement[158082-158100]"
  }, {
    "left" : "float yf = y - yi;",
    "right" : "float yf = y - yi;",
    "info" : "VariableDeclarationStatement[158105-158123]:VariableDeclarationStatement[158105-158123]"
  }, {
    "left" : "float zf = z - zi;",
    "right" : "float zf = z - zi;",
    "info" : "VariableDeclarationStatement[158128-158146]:VariableDeclarationStatement[158128-158146]"
  }, {
    "left" : "float rxf, ryf;",
    "right" : "float rxf, ryf;",
    "info" : "VariableDeclarationStatement[158151-158166]:VariableDeclarationStatement[158151-158166]"
  }, {
    "left" : "float r=0;",
    "right" : "float r=0;",
    "info" : "VariableDeclarationStatement[158172-158182]:VariableDeclarationStatement[158172-158182]"
  }, {
    "left" : "float ampl=0.5f;",
    "right" : "float ampl=0.5f;",
    "info" : "VariableDeclarationStatement[158187-158203]:VariableDeclarationStatement[158187-158203]"
  }, {
    "left" : "float n1,n2,n3;",
    "right" : "float n1,n2,n3;",
    "info" : "VariableDeclarationStatement[158209-158224]:VariableDeclarationStatement[158209-158224]"
  }, {
    "left" : "for (int i=0; i<perlin_octaves; i++)",
    "right" : "for (int i=0; i<perlin_octaves; i++)",
    "info" : "ForStatement[158230-159119]:ForStatement[158230-159119]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[158267-159119]:Block[158267-159119]"
  }, {
    "left" : "int of=xi+(yi<<PERLIN_YWRAPB)+(zi<<PERLIN_ZWRAPB);",
    "right" : "int of=xi+(yi<<PERLIN_YWRAPB)+(zi<<PERLIN_ZWRAPB);",
    "info" : "VariableDeclarationStatement[158275-158325]:VariableDeclarationStatement[158275-158325]"
  }, {
    "left" : "rxf=noise_fsc(xf);",
    "right" : "rxf=noise_fsc(xf);",
    "info" : "ExpressionStatement[158333-158351]:ExpressionStatement[158333-158351]"
  }, {
    "left" : "ryf=noise_fsc(yf);",
    "right" : "ryf=noise_fsc(yf);",
    "info" : "ExpressionStatement[158358-158376]:ExpressionStatement[158358-158376]"
  }, {
    "left" : "n1  = perlin[of&PERLIN_SIZE];",
    "right" : "n1  = perlin[of&PERLIN_SIZE];",
    "info" : "ExpressionStatement[158384-158413]:ExpressionStatement[158384-158413]"
  }, {
    "left" : "n1 += rxf*(perlin[(of+1)&PERLIN_SIZE]-n1);",
    "right" : "n1 += rxf*(perlin[(of+1)&PERLIN_SIZE]-n1);",
    "info" : "ExpressionStatement[158420-158462]:ExpressionStatement[158420-158462]"
  }, {
    "left" : "n2  = perlin[(of+PERLIN_YWRAP)&PERLIN_SIZE];",
    "right" : "n2  = perlin[(of+PERLIN_YWRAP)&PERLIN_SIZE];",
    "info" : "ExpressionStatement[158469-158513]:ExpressionStatement[158469-158513]"
  }, {
    "left" : "n2 += rxf*(perlin[(of+PERLIN_YWRAP+1)&PERLIN_SIZE]-n2);",
    "right" : "n2 += rxf*(perlin[(of+PERLIN_YWRAP+1)&PERLIN_SIZE]-n2);",
    "info" : "ExpressionStatement[158520-158575]:ExpressionStatement[158520-158575]"
  }, {
    "left" : "n1 += ryf*(n2-n1);",
    "right" : "n1 += ryf*(n2-n1);",
    "info" : "ExpressionStatement[158582-158600]:ExpressionStatement[158582-158600]"
  }, {
    "left" : "of += PERLIN_ZWRAP;",
    "right" : "of += PERLIN_ZWRAP;",
    "info" : "ExpressionStatement[158608-158627]:ExpressionStatement[158608-158627]"
  }, {
    "left" : "n2  = perlin[of&PERLIN_SIZE];",
    "right" : "n2  = perlin[of&PERLIN_SIZE];",
    "info" : "ExpressionStatement[158634-158663]:ExpressionStatement[158634-158663]"
  }, {
    "left" : "n2 += rxf*(perlin[(of+1)&PERLIN_SIZE]-n2);",
    "right" : "n2 += rxf*(perlin[(of+1)&PERLIN_SIZE]-n2);",
    "info" : "ExpressionStatement[158670-158712]:ExpressionStatement[158670-158712]"
  }, {
    "left" : "n3  = perlin[(of+PERLIN_YWRAP)&PERLIN_SIZE];",
    "right" : "n3  = perlin[(of+PERLIN_YWRAP)&PERLIN_SIZE];",
    "info" : "ExpressionStatement[158719-158763]:ExpressionStatement[158719-158763]"
  }, {
    "left" : "n3 += rxf*(perlin[(of+PERLIN_YWRAP+1)&PERLIN_SIZE]-n3);",
    "right" : "n3 += rxf*(perlin[(of+PERLIN_YWRAP+1)&PERLIN_SIZE]-n3);",
    "info" : "ExpressionStatement[158770-158825]:ExpressionStatement[158770-158825]"
  }, {
    "left" : "n2 += ryf*(n3-n2);",
    "right" : "n2 += ryf*(n3-n2);",
    "info" : "ExpressionStatement[158832-158850]:ExpressionStatement[158832-158850]"
  }, {
    "left" : "n1 += noise_fsc(zf)*(n2-n1);",
    "right" : "n1 += noise_fsc(zf)*(n2-n1);",
    "info" : "ExpressionStatement[158858-158886]:ExpressionStatement[158858-158886]"
  }, {
    "left" : "r += n1*ampl;",
    "right" : "r += n1*ampl;",
    "info" : "ExpressionStatement[158894-158907]:ExpressionStatement[158894-158907]"
  }, {
    "left" : "ampl *= perlin_amp_falloff;",
    "right" : "ampl *= perlin_amp_falloff;",
    "info" : "ExpressionStatement[158914-158941]:ExpressionStatement[158914-158941]"
  }, {
    "left" : "xi<<=1;",
    "right" : "xi<<=1;",
    "info" : "ExpressionStatement[158948-158955]:ExpressionStatement[158948-158955]"
  }, {
    "left" : "xf*=2;",
    "right" : "xf*=2;",
    "info" : "ExpressionStatement[158956-158962]:ExpressionStatement[158956-158962]"
  }, {
    "left" : "yi<<=1;",
    "right" : "yi<<=1;",
    "info" : "ExpressionStatement[158969-158976]:ExpressionStatement[158969-158976]"
  }, {
    "left" : "yf*=2;",
    "right" : "yf*=2;",
    "info" : "ExpressionStatement[158977-158983]:ExpressionStatement[158977-158983]"
  }, {
    "left" : "zi<<=1;",
    "right" : "zi<<=1;",
    "info" : "ExpressionStatement[158990-158997]:ExpressionStatement[158990-158997]"
  }, {
    "left" : "zf*=2;",
    "right" : "zf*=2;",
    "info" : "ExpressionStatement[158998-159004]:ExpressionStatement[158998-159004]"
  }, {
    "left" : "if (xf>=1.0f)",
    "right" : "if (xf>=1.0f)",
    "info" : "IfStatement[159012-159041]:IfStatement[159012-159041]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[159026-159041]:Block[159026-159041]"
  }, {
    "left" : "xi++;",
    "right" : "xi++;",
    "info" : "ExpressionStatement[159028-159033]:ExpressionStatement[159028-159033]"
  }, {
    "left" : "xf--;",
    "right" : "xf--;",
    "info" : "ExpressionStatement[159034-159039]:ExpressionStatement[159034-159039]"
  }, {
    "left" : "if (yf>=1.0f)",
    "right" : "if (yf>=1.0f)",
    "info" : "IfStatement[159048-159077]:IfStatement[159048-159077]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[159062-159077]:Block[159062-159077]"
  }, {
    "left" : "yi++;",
    "right" : "yi++;",
    "info" : "ExpressionStatement[159064-159069]:ExpressionStatement[159064-159069]"
  }, {
    "left" : "yf--;",
    "right" : "yf--;",
    "info" : "ExpressionStatement[159070-159075]:ExpressionStatement[159070-159075]"
  }, {
    "left" : "if (zf>=1.0f)",
    "right" : "if (zf>=1.0f)",
    "info" : "IfStatement[159084-159113]:IfStatement[159084-159113]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[159098-159113]:Block[159098-159113]"
  }, {
    "left" : "zi++;",
    "right" : "zi++;",
    "info" : "ExpressionStatement[159100-159105]:ExpressionStatement[159100-159105]"
  }, {
    "left" : "zf--;",
    "right" : "zf--;",
    "info" : "ExpressionStatement[159106-159111]:ExpressionStatement[159106-159111]"
  }, {
    "left" : "return r;",
    "right" : "return r;",
    "info" : "ReturnStatement[159124-159133]:ReturnStatement[159124-159133]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[159250-159257]:Modifier[159250-159257]"
  }, {
    "left" : "float",
    "right" : "float",
    "info" : "PrimitiveType[159258-159263]:PrimitiveType[159258-159263]"
  }, {
    "left" : "float i",
    "right" : "float i",
    "info" : "SingleVariableDeclaration[159274-159281]:SingleVariableDeclaration[159274-159281]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[159283-159403]:Block[159283-159403]"
  }, {
    "left" : "return 0.5f*(1.0f-perlin_cosTable[(int)(i*perlin_PI)%perlin_TWOPI]);",
    "right" : "return 0.5f*(1.0f-perlin_cosTable[(int)(i*perlin_PI)%perlin_TWOPI]);",
    "info" : "ReturnStatement[159331-159399]:ReturnStatement[159331-159399]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[160936-160942]:Modifier[160936-160942]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[160943-160947]:PrimitiveType[160943-160947]"
  }, {
    "left" : "int lod",
    "right" : "int lod",
    "info" : "SingleVariableDeclaration[160960-160967]:SingleVariableDeclaration[160960-160967]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[160969-161009]:Block[160969-161009]"
  }, {
    "left" : "if (lod>0)",
    "right" : "if (lod>0)",
    "info" : "IfStatement[160975-161005]:IfStatement[160975-161005]"
  }, {
    "left" : "perlin_octaves=lod;",
    "right" : "perlin_octaves=lod;",
    "info" : "ExpressionStatement[160986-161005]:ExpressionStatement[160986-161005]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[161076-161082]:Modifier[161076-161082]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[161083-161087]:PrimitiveType[161083-161087]"
  }, {
    "left" : "int lod",
    "right" : "int lod",
    "info" : "SingleVariableDeclaration[161100-161107]:SingleVariableDeclaration[161100-161107]"
  }, {
    "left" : "float falloff",
    "right" : "float falloff",
    "info" : "SingleVariableDeclaration[161109-161122]:SingleVariableDeclaration[161109-161122]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[161124-161211]:Block[161124-161211]"
  }, {
    "left" : "if (lod>0)",
    "right" : "if (lod>0)",
    "info" : "IfStatement[161130-161160]:IfStatement[161130-161160]"
  }, {
    "left" : "perlin_octaves=lod;",
    "right" : "perlin_octaves=lod;",
    "info" : "ExpressionStatement[161141-161160]:ExpressionStatement[161141-161160]"
  }, {
    "left" : "if (falloff>0)",
    "right" : "if (falloff>0)",
    "info" : "IfStatement[161165-161207]:IfStatement[161165-161207]"
  }, {
    "left" : "perlin_amp_falloff=falloff;",
    "right" : "perlin_amp_falloff=falloff;",
    "info" : "ExpressionStatement[161180-161207]:ExpressionStatement[161180-161207]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[161788-161794]:Modifier[161788-161794]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[161795-161799]:PrimitiveType[161795-161799]"
  }, {
    "left" : "long seed",
    "right" : "long seed",
    "info" : "SingleVariableDeclaration[161810-161819]:SingleVariableDeclaration[161810-161819]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[161821-162006]:Block[161821-162006]"
  }, {
    "left" : "if (perlinRandom == null)",
    "right" : "if (perlinRandom == null)",
    "info" : "IfStatement[161827-161881]:IfStatement[161827-161881]"
  }, {
    "left" : "perlinRandom = new Random();",
    "right" : "perlinRandom = new Random();",
    "info" : "ExpressionStatement[161853-161881]:ExpressionStatement[161853-161881]"
  }, {
    "left" : "perlinRandom.setSeed(seed);",
    "right" : "perlinRandom.setSeed(seed);",
    "info" : "ExpressionStatement[161886-161913]:ExpressionStatement[161886-161913]"
  }, {
    "left" : "perlin = null;",
    "right" : "perlin = null;",
    "info" : "ExpressionStatement[161988-162002]:ExpressionStatement[161988-162002]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[164396-164402]:Modifier[164396-164402]"
  }, {
    "left" : "PImage",
    "right" : "PImage",
    "info" : "SimpleType[164403-164409]:SimpleType[164403-164409]"
  }, {
    "left" : "String filename",
    "right" : "String filename",
    "info" : "SingleVariableDeclaration[164420-164435]:SingleVariableDeclaration[164420-164435]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[164437-164526]:Block[164437-164526]"
  }, {
    "left" : "return loadImage(filename, null);",
    "right" : "return loadImage(filename, null);",
    "info" : "ReturnStatement[164489-164522]:ReturnStatement[164489-164522]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[164991-164997]:Modifier[164991-164997]"
  }, {
    "left" : "PImage",
    "right" : "PImage",
    "info" : "SimpleType[164998-165004]:SimpleType[164998-165004]"
  }, {
    "left" : "String filename",
    "right" : "String filename",
    "info" : "SingleVariableDeclaration[165015-165030]:SingleVariableDeclaration[165015-165030]"
  }, {
    "left" : "String extension",
    "right" : "String extension",
    "info" : "SingleVariableDeclaration[165032-165048]:SingleVariableDeclaration[165032-165048]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[165050-169148]:Block[165050-169148]"
  }, {
    "left" : "if (extension == null)",
    "right" : "if (extension == null)",
    "info" : "IfStatement[165077-165569]:IfStatement[165077-165569]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[165100-165569]:Block[165100-165569]"
  }, {
    "left" : "String lower = filename.toLowerCase();",
    "right" : "String lower = filename.toLowerCase();",
    "info" : "VariableDeclarationStatement[165108-165146]:VariableDeclarationStatement[165108-165146]"
  }, {
    "left" : "int dot = filename.lastIndexOf('.');",
    "right" : "int dot = filename.lastIndexOf('.');",
    "info" : "VariableDeclarationStatement[165153-165189]:VariableDeclarationStatement[165153-165189]"
  }, {
    "left" : "if (dot == -1)",
    "right" : "if (dot == -1)",
    "info" : "IfStatement[165196-165274]:IfStatement[165196-165274]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[165211-165274]:Block[165211-165274]"
  }, {
    "left" : "extension = \"unknown\";",
    "right" : "extension = \"unknown\";",
    "info" : "ExpressionStatement[165221-165243]:ExpressionStatement[165221-165243]"
  }, {
    "left" : "extension = lower.substring(dot + 1);",
    "right" : "extension = lower.substring(dot + 1);",
    "info" : "ExpressionStatement[165281-165318]:ExpressionStatement[165281-165318]"
  }, {
    "left" : "int question = extension.indexOf('?');",
    "right" : "int question = extension.indexOf('?');",
    "info" : "VariableDeclarationStatement[165435-165473]:VariableDeclarationStatement[165435-165473]"
  }, {
    "left" : "if (question != -1)",
    "right" : "if (question != -1)",
    "info" : "IfStatement[165480-165563]:IfStatement[165480-165563]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[165500-165563]:Block[165500-165563]"
  }, {
    "left" : "extension = extension.substring(0, question);",
    "right" : "extension = extension.substring(0, question);",
    "info" : "ExpressionStatement[165510-165555]:ExpressionStatement[165510-165555]"
  }, {
    "left" : "extension = extension.toLowerCase();",
    "right" : "extension = extension.toLowerCase();",
    "info" : "ExpressionStatement[165626-165662]:ExpressionStatement[165626-165662]"
  }, {
    "left" : "if (extension.equals(\"tga\"))",
    "right" : "if (extension.equals(\"tga\"))",
    "info" : "IfStatement[165668-165959]:IfStatement[165668-165959]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[165697-165959]:Block[165697-165959]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[165705-165953]:TryStatement[165705-165953]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[165709-165871]:Block[165709-165871]"
  }, {
    "left" : "PImage image = loadImageTGA(filename);",
    "right" : "PImage image = loadImageTGA(filename);",
    "info" : "VariableDeclarationStatement[165719-165757]:VariableDeclarationStatement[165719-165757]"
  }, {
    "left" : "return image;",
    "right" : "return image;",
    "info" : "ReturnStatement[165850-165863]:ReturnStatement[165850-165863]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[165894-165953]:Block[165894-165953]"
  }, {
    "left" : "e.printStackTrace();",
    "right" : "e.printStackTrace();",
    "info" : "ExpressionStatement[165904-165924]:ExpressionStatement[165904-165924]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[165933-165945]:ReturnStatement[165933-165945]"
  }, {
    "left" : "if (extension.equals(\"tif\") || extension.equals(\"tiff\"))",
    "right" : "if (extension.equals(\"tif\") || extension.equals(\"tiff\"))",
    "info" : "IfStatement[165965-166240]:IfStatement[165965-166240]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[166022-166240]:Block[166022-166240]"
  }, {
    "left" : "byte bytes[] = loadBytes(filename);",
    "right" : "byte bytes[] = loadBytes(filename);",
    "info" : "VariableDeclarationStatement[166030-166065]:VariableDeclarationStatement[166030-166065]"
  }, {
    "left" : "PImage image =  (bytes == null) ? null : PImage.loadTIFF(bytes);",
    "right" : "PImage image =  (bytes == null) ? null : PImage.loadTIFF(bytes);",
    "info" : "VariableDeclarationStatement[166072-166136]:VariableDeclarationStatement[166072-166136]"
  }, {
    "left" : "return image;",
    "right" : "return image;",
    "info" : "ReturnStatement[166221-166234]:ReturnStatement[166221-166234]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[166433-168517]:TryStatement[166433-168517]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[166437-168391]:Block[166437-168391]"
  }, {
    "left" : "if (extension.equals(\"jpg\") || extension.equals(\"jpeg\") ||\n          extension.equals(\"gif\") || extension.equals(\"png\") ||\n          extension.equals(\"unknown\"))",
    "right" : "if (extension.equals(\"jpg\") || extension.equals(\"jpeg\") ||\n          extension.equals(\"gif\") || extension.equals(\"png\") ||\n          extension.equals(\"unknown\"))",
    "info" : "IfStatement[166445-168385]:IfStatement[166445-168385]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[166607-168385]:Block[166607-168385]"
  }, {
    "left" : "byte bytes[] = loadBytes(filename);",
    "right" : "byte bytes[] = loadBytes(filename);",
    "info" : "VariableDeclarationStatement[166617-166652]:VariableDeclarationStatement[166617-166652]"
  }, {
    "left" : "if (bytes == null)",
    "right" : "if (bytes == null)",
    "info" : "IfStatement[166661-168377]:IfStatement[166661-168377]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[166680-166714]:Block[166680-166714]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[166692-166704]:ReturnStatement[166692-166704]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[166720-168377]:Block[166720-168377]"
  }, {
    "left" : "Image awtImage = new ImageIcon(bytes).getImage();",
    "right" : "Image awtImage = new ImageIcon(bytes).getImage();",
    "info" : "VariableDeclarationStatement[166809-166858]:VariableDeclarationStatement[166809-166858]"
  }, {
    "left" : "if (awtImage instanceof BufferedImage)",
    "right" : "if (awtImage instanceof BufferedImage)",
    "info" : "IfStatement[166870-167833]:IfStatement[166870-167833]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[166909-167833]:Block[166909-167833]"
  }, {
    "left" : "BufferedImage buffImage = (BufferedImage) awtImage;",
    "right" : "BufferedImage buffImage = (BufferedImage) awtImage;",
    "info" : "VariableDeclarationStatement[166923-166974]:VariableDeclarationStatement[166923-166974]"
  }, {
    "left" : "int space = buffImage.getColorModel().getColorSpace().getType();",
    "right" : "int space = buffImage.getColorModel().getColorSpace().getType();",
    "info" : "VariableDeclarationStatement[166987-167051]:VariableDeclarationStatement[166987-167051]"
  }, {
    "left" : "if (space == ColorSpace.TYPE_CMYK)",
    "right" : "if (space == ColorSpace.TYPE_CMYK)",
    "info" : "IfStatement[167064-167821]:IfStatement[167064-167821]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[167099-167821]:Block[167099-167821]"
  }, {
    "left" : "System.err.println(filename + \" is a CMYK image, \" +\n                                 \"only RGB images are supported.\");",
    "right" : "System.err.println(filename + \" is a CMYK image, \" +\n                                 \"only RGB images are supported.\");",
    "info" : "ExpressionStatement[167115-167235]:ExpressionStatement[167115-167235]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[167250-167262]:ReturnStatement[167250-167262]"
  }, {
    "left" : "PImage image = new PImage(awtImage);",
    "right" : "PImage image = new PImage(awtImage);",
    "info" : "VariableDeclarationStatement[167845-167881]:VariableDeclarationStatement[167845-167881]"
  }, {
    "left" : "if (image.width == -1)",
    "right" : "if (image.width == -1)",
    "info" : "IfStatement[167892-168069]:IfStatement[167892-168069]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[167915-168069]:Block[167915-168069]"
  }, {
    "left" : "System.err.println(\"The file \" + filename +\n                               \" contains bad image data, or may not be an image.\");",
    "right" : "System.err.println(\"The file \" + filename +\n                               \" contains bad image data, or may not be an image.\");",
    "info" : "ExpressionStatement[167929-168057]:ExpressionStatement[167929-168057]"
  }, {
    "left" : "if (extension.equals(\"gif\") || extension.equals(\"png\"))",
    "right" : "if (extension.equals(\"gif\") || extension.equals(\"png\"))",
    "info" : "IfStatement[168151-168252]:IfStatement[168151-168252]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[168207-168252]:Block[168207-168252]"
  }, {
    "left" : "image.checkAlpha();",
    "right" : "image.checkAlpha();",
    "info" : "ExpressionStatement[168221-168240]:ExpressionStatement[168221-168240]"
  }, {
    "left" : "return image;",
    "right" : "return image;",
    "info" : "ReturnStatement[168354-168367]:ReturnStatement[168354-168367]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[168412-168517]:Block[168412-168517]"
  }, {
    "left" : "e.printStackTrace();",
    "right" : "e.printStackTrace();",
    "info" : "ExpressionStatement[168491-168511]:ExpressionStatement[168491-168511]"
  }, {
    "left" : "if (loadImageFormats == null)",
    "right" : "if (loadImageFormats == null)",
    "info" : "IfStatement[168523-168617]:IfStatement[168523-168617]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[168553-168617]:Block[168553-168617]"
  }, {
    "left" : "loadImageFormats = ImageIO.getReaderFormatNames();",
    "right" : "loadImageFormats = ImageIO.getReaderFormatNames();",
    "info" : "ExpressionStatement[168561-168611]:ExpressionStatement[168561-168611]"
  }, {
    "left" : "if (loadImageFormats != null)",
    "right" : "if (loadImageFormats != null)",
    "info" : "IfStatement[168622-168994]:IfStatement[168622-168994]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[168652-168994]:Block[168652-168994]"
  }, {
    "left" : "for (int i = 0; i < loadImageFormats.length; i++)",
    "right" : "for (int i = 0; i < loadImageFormats.length; i++)",
    "info" : "ForStatement[168660-168988]:ForStatement[168660-168988]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[168710-168988]:Block[168710-168988]"
  }, {
    "left" : "if (extension.equals(loadImageFormats[i]))",
    "right" : "if (extension.equals(loadImageFormats[i]))",
    "info" : "IfStatement[168720-168980]:IfStatement[168720-168980]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[168763-168980]:Block[168763-168980]"
  }, {
    "left" : "return loadImageIO(filename);",
    "right" : "return loadImageIO(filename);",
    "info" : "ReturnStatement[168775-168804]:ReturnStatement[168775-168804]"
  }, {
    "left" : "System.err.println(\"Could not find a method to load \" + filename);",
    "right" : "System.err.println(\"Could not find a method to load \" + filename);",
    "info" : "ExpressionStatement[169061-169127]:ExpressionStatement[169061-169127]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[169132-169144]:ReturnStatement[169132-169144]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[169153-169159]:Modifier[169153-169159]"
  }, {
    "left" : "PImage",
    "right" : "PImage",
    "info" : "SimpleType[169160-169166]:SimpleType[169160-169166]"
  }, {
    "left" : "String filename",
    "right" : "String filename",
    "info" : "SingleVariableDeclaration[169180-169195]:SingleVariableDeclaration[169180-169195]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[169197-169292]:Block[169197-169292]"
  }, {
    "left" : "return requestImage(filename, null);",
    "right" : "return requestImage(filename, null);",
    "info" : "ReturnStatement[169252-169288]:ReturnStatement[169252-169288]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[170465-170471]:Modifier[170465-170471]"
  }, {
    "left" : "PImage",
    "right" : "PImage",
    "info" : "SimpleType[170472-170478]:SimpleType[170472-170478]"
  }, {
    "left" : "String filename",
    "right" : "String filename",
    "info" : "SingleVariableDeclaration[170492-170507]:SingleVariableDeclaration[170492-170507]"
  }, {
    "left" : "String extension",
    "right" : "String extension",
    "info" : "SingleVariableDeclaration[170509-170525]:SingleVariableDeclaration[170509-170525]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[170527-170697]:Block[170527-170697]"
  }, {
    "left" : "PImage vessel = createImage(0, 0, ARGB);",
    "right" : "PImage vessel = createImage(0, 0, ARGB);",
    "info" : "VariableDeclarationStatement[170533-170573]:VariableDeclarationStatement[170533-170573]"
  }, {
    "left" : "AsyncImageLoader ail =\n      new AsyncImageLoader(filename, extension, vessel);",
    "right" : "AsyncImageLoader ail =\n      new AsyncImageLoader(filename, extension, vessel);",
    "info" : "VariableDeclarationStatement[170578-170657]:VariableDeclarationStatement[170578-170657]"
  }, {
    "left" : "ail.start();",
    "right" : "ail.start();",
    "info" : "ExpressionStatement[170662-170674]:ExpressionStatement[170662-170674]"
  }, {
    "left" : "return vessel;",
    "right" : "return vessel;",
    "info" : "ReturnStatement[170679-170693]:ReturnStatement[170679-170693]"
  }, {
    "left" : "Thread",
    "right" : "Thread",
    "info" : "SimpleType[171644-171650]:SimpleType[171644-171650]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[171720-171726]:Modifier[171720-171726]"
  }, {
    "left" : "String filename",
    "right" : "String filename",
    "info" : "SingleVariableDeclaration[171744-171759]:SingleVariableDeclaration[171744-171759]"
  }, {
    "left" : "String extension",
    "right" : "String extension",
    "info" : "SingleVariableDeclaration[171761-171777]:SingleVariableDeclaration[171761-171777]"
  }, {
    "left" : "PImage vessel",
    "right" : "PImage vessel",
    "info" : "SingleVariableDeclaration[171779-171792]:SingleVariableDeclaration[171779-171792]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[171794-171895]:Block[171794-171895]"
  }, {
    "left" : "this.filename = filename;",
    "right" : "this.filename = filename;",
    "info" : "ExpressionStatement[171802-171827]:ExpressionStatement[171802-171827]"
  }, {
    "left" : "this.extension = extension;",
    "right" : "this.extension = extension;",
    "info" : "ExpressionStatement[171834-171861]:ExpressionStatement[171834-171861]"
  }, {
    "left" : "this.vessel = vessel;",
    "right" : "this.vessel = vessel;",
    "info" : "ExpressionStatement[171868-171889]:ExpressionStatement[171868-171889]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[171901-171910]:MarkerAnnotation[171901-171910]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[171915-171921]:Modifier[171915-171921]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[171922-171926]:PrimitiveType[171922-171926]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[171933-172633]:Block[171933-172633]"
  }, {
    "left" : "while (requestImageCount == requestImageMax)",
    "right" : "while (requestImageCount == requestImageMax)",
    "info" : "WhileStatement[171941-172082]:WhileStatement[171941-172082]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[171986-172082]:Block[171986-172082]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[171996-172074]:TryStatement[171996-172074]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[172000-172039]:Block[172000-172039]"
  }, {
    "left" : "Thread.sleep(10);",
    "right" : "Thread.sleep(10);",
    "info" : "ExpressionStatement[172012-172029]:ExpressionStatement[172012-172029]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[172071-172074]:Block[172071-172074]"
  }, {
    "left" : "requestImageCount++;",
    "right" : "requestImageCount++;",
    "info" : "ExpressionStatement[172089-172109]:ExpressionStatement[172089-172109]"
  }, {
    "left" : "PImage actual = loadImage(filename, extension);",
    "right" : "PImage actual = loadImage(filename, extension);",
    "info" : "VariableDeclarationStatement[172117-172164]:VariableDeclarationStatement[172117-172164]"
  }, {
    "left" : "if (actual == null)",
    "right" : "if (actual == null)",
    "info" : "IfStatement[172226-172600]:IfStatement[172226-172600]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[172246-172311]:Block[172246-172311]"
  }, {
    "left" : "vessel.width = -1;",
    "right" : "vessel.width = -1;",
    "info" : "ExpressionStatement[172256-172274]:ExpressionStatement[172256-172274]"
  }, {
    "left" : "vessel.height = -1;",
    "right" : "vessel.height = -1;",
    "info" : "ExpressionStatement[172283-172302]:ExpressionStatement[172283-172302]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[172317-172600]:Block[172317-172600]"
  }, {
    "left" : "vessel.width = actual.width;",
    "right" : "vessel.width = actual.width;",
    "info" : "ExpressionStatement[172327-172355]:ExpressionStatement[172327-172355]"
  }, {
    "left" : "vessel.height = actual.height;",
    "right" : "vessel.height = actual.height;",
    "info" : "ExpressionStatement[172364-172394]:ExpressionStatement[172364-172394]"
  }, {
    "left" : "vessel.format = actual.format;",
    "right" : "vessel.format = actual.format;",
    "info" : "ExpressionStatement[172403-172433]:ExpressionStatement[172403-172433]"
  }, {
    "left" : "vessel.pixels = actual.pixels;",
    "right" : "vessel.pixels = actual.pixels;",
    "info" : "ExpressionStatement[172442-172472]:ExpressionStatement[172442-172472]"
  }, {
    "left" : "vessel.pixelWidth = actual.width;",
    "right" : "vessel.pixelWidth = actual.width;",
    "info" : "ExpressionStatement[172482-172515]:ExpressionStatement[172482-172515]"
  }, {
    "left" : "vessel.pixelHeight = actual.height;",
    "right" : "vessel.pixelHeight = actual.height;",
    "info" : "ExpressionStatement[172524-172559]:ExpressionStatement[172524-172559]"
  }, {
    "left" : "vessel.pixelDensity = 1;",
    "right" : "vessel.pixelDensity = 1;",
    "info" : "ExpressionStatement[172568-172592]:ExpressionStatement[172568-172592]"
  }, {
    "left" : "requestImageCount--;",
    "right" : "requestImageCount--;",
    "info" : "ExpressionStatement[172607-172627]:ExpressionStatement[172607-172627]"
  }, {
    "left" : "protected",
    "right" : "protected",
    "info" : "Modifier[173271-173280]:Modifier[173271-173280]"
  }, {
    "left" : "PImage",
    "right" : "PImage",
    "info" : "SimpleType[173281-173287]:SimpleType[173281-173287]"
  }, {
    "left" : "String filename",
    "right" : "String filename",
    "info" : "SingleVariableDeclaration[173300-173315]:SingleVariableDeclaration[173300-173315]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[173317-174383]:Block[173317-174383]"
  }, {
    "left" : "InputStream stream = createInput(filename);",
    "right" : "InputStream stream = createInput(filename);",
    "info" : "VariableDeclarationStatement[173323-173366]:VariableDeclarationStatement[173323-173366]"
  }, {
    "left" : "if (stream == null)",
    "right" : "if (stream == null)",
    "info" : "IfStatement[173371-173493]:IfStatement[173371-173493]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[173391-173493]:Block[173391-173493]"
  }, {
    "left" : "System.err.println(\"The image \" + filename + \" could not be found.\");",
    "right" : "System.err.println(\"The image \" + filename + \" could not be found.\");",
    "info" : "ExpressionStatement[173399-173468]:ExpressionStatement[173399-173468]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[173475-173487]:ReturnStatement[173475-173487]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[173499-174379]:TryStatement[173499-174379]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[173503-174305]:Block[173503-174305]"
  }, {
    "left" : "BufferedImage bi = ImageIO.read(stream);",
    "right" : "BufferedImage bi = ImageIO.read(stream);",
    "info" : "VariableDeclarationStatement[173511-173551]:VariableDeclarationStatement[173511-173551]"
  }, {
    "left" : "PImage outgoing = new PImage(bi.getWidth(), bi.getHeight());",
    "right" : "PImage outgoing = new PImage(bi.getWidth(), bi.getHeight());",
    "info" : "VariableDeclarationStatement[173558-173618]:VariableDeclarationStatement[173558-173618]"
  }, {
    "left" : "outgoing.parent = this;",
    "right" : "outgoing.parent = this;",
    "info" : "ExpressionStatement[173625-173648]:ExpressionStatement[173625-173648]"
  }, {
    "left" : "bi.getRGB(0, 0, outgoing.width, outgoing.height,\n                outgoing.pixels, 0, outgoing.width);",
    "right" : "bi.getRGB(0, 0, outgoing.width, outgoing.height,\n                outgoing.pixels, 0, outgoing.width);",
    "info" : "ExpressionStatement[173656-173757]:ExpressionStatement[173656-173757]"
  }, {
    "left" : "outgoing.checkAlpha();",
    "right" : "outgoing.checkAlpha();",
    "info" : "ExpressionStatement[174204-174226]:ExpressionStatement[174204-174226]"
  }, {
    "left" : "stream.close();",
    "right" : "stream.close();",
    "info" : "ExpressionStatement[174234-174249]:ExpressionStatement[174234-174249]"
  }, {
    "left" : "return outgoing;",
    "right" : "return outgoing;",
    "info" : "ReturnStatement[174282-174298]:ReturnStatement[174282-174298]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[174326-174379]:Block[174326-174379]"
  }, {
    "left" : "e.printStackTrace();",
    "right" : "e.printStackTrace();",
    "info" : "ExpressionStatement[174334-174354]:ExpressionStatement[174334-174354]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[174361-174373]:ReturnStatement[174361-174373]"
  }, {
    "left" : "protected",
    "right" : "protected",
    "info" : "Modifier[174949-174958]:Modifier[174949-174958]"
  }, {
    "left" : "PImage",
    "right" : "PImage",
    "info" : "SimpleType[174959-174965]:SimpleType[174959-174965]"
  }, {
    "left" : "String filename",
    "right" : "String filename",
    "info" : "SingleVariableDeclaration[174979-174994]:SingleVariableDeclaration[174979-174994]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[175003-175014]:SimpleType[175003-175014]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[175015-180953]:Block[175015-180953]"
  }, {
    "left" : "InputStream is = createInput(filename);",
    "right" : "InputStream is = createInput(filename);",
    "info" : "VariableDeclarationStatement[175021-175060]:VariableDeclarationStatement[175021-175060]"
  }, {
    "left" : "if (is == null)",
    "right" : "if (is == null)",
    "info" : "IfStatement[175065-175093]:IfStatement[175065-175093]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[175081-175093]:ReturnStatement[175081-175093]"
  }, {
    "left" : "byte header[] = new byte[18];",
    "right" : "byte header[] = new byte[18];",
    "info" : "VariableDeclarationStatement[175099-175128]:VariableDeclarationStatement[175099-175128]"
  }, {
    "left" : "int offset = 0;",
    "right" : "int offset = 0;",
    "info" : "VariableDeclarationStatement[175133-175148]:VariableDeclarationStatement[175133-175148]"
  }, {
    "left" : "do{...}",
    "right" : "do{...}",
    "info" : "DoStatement[175153-175310]:DoStatement[175153-175310]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[175156-175289]:Block[175156-175289]"
  }, {
    "left" : "int count = is.read(header, offset, header.length - offset);",
    "right" : "int count = is.read(header, offset, header.length - offset);",
    "info" : "VariableDeclarationStatement[175164-175224]:VariableDeclarationStatement[175164-175224]"
  }, {
    "left" : "if (count == -1)",
    "right" : "if (count == -1)",
    "info" : "IfStatement[175231-175260]:IfStatement[175231-175260]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[175248-175260]:ReturnStatement[175248-175260]"
  }, {
    "left" : "offset += count;",
    "right" : "offset += count;",
    "info" : "ExpressionStatement[175267-175283]:ExpressionStatement[175267-175283]"
  }, {
    "left" : "int format = 0;",
    "right" : "int format = 0;",
    "info" : "VariableDeclarationStatement[175826-175841]:VariableDeclarationStatement[175826-175841]"
  }, {
    "left" : "if (((header[2] == 3) || (header[2] == 11)) &&  // B&W, plus RLE or not\n        (header[16] == 8) &&  // 8 bits\n        ((header[17] == 0x8) || (header[17] == 0x28)))",
    "right" : "if (((header[2] == 3) || (header[2] == 11)) &&  // B&W, plus RLE or not\n        (header[16] == 8) &&  // 8 bits\n        ((header[17] == 0x8) || (header[17] == 0x28)))",
    "info" : "IfStatement[175847-176479]:IfStatement[175847-176479]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[176014-176063]:Block[176014-176063]"
  }, {
    "left" : "format = ALPHA;",
    "right" : "format = ALPHA;",
    "info" : "ExpressionStatement[176041-176056]:ExpressionStatement[176041-176056]"
  }, {
    "left" : "if (((header[2] == 2) || (header[2] == 10)) &&  // RGB, RLE or not\n               (header[16] == 24) &&  // 24 bits\n               ((header[17] == 0x20) || (header[17] == 0)))",
    "right" : "if (((header[2] == 2) || (header[2] == 10)) &&  // RGB, RLE or not\n               (header[16] == 24) &&  // 24 bits\n               ((header[17] == 0x20) || (header[17] == 0)))",
    "info" : "IfStatement[176069-176479]:IfStatement[176069-176479]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[176245-176284]:Block[176245-176284]"
  }, {
    "left" : "format = RGB;",
    "right" : "format = RGB;",
    "info" : "ExpressionStatement[176264-176277]:ExpressionStatement[176264-176277]"
  }, {
    "left" : "if (((header[2] == 2) || (header[2] == 10)) &&\n               (header[16] == 32) &&\n               ((header[17] == 0x8) || (header[17] == 0x28)))",
    "right" : "if (((header[2] == 2) || (header[2] == 10)) &&\n               (header[16] == 32) &&\n               ((header[17] == 0x8) || (header[17] == 0x28)))",
    "info" : "IfStatement[176290-176479]:IfStatement[176290-176479]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[176436-176479]:Block[176436-176479]"
  }, {
    "left" : "format = ARGB;",
    "right" : "format = ARGB;",
    "info" : "ExpressionStatement[176459-176473]:ExpressionStatement[176459-176473]"
  }, {
    "left" : "if (format == 0)",
    "right" : "if (format == 0)",
    "info" : "IfStatement[176485-176759]:IfStatement[176485-176759]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[176502-176759]:Block[176502-176759]"
  }, {
    "left" : "System.err.println(\"Unknown .tga file format for \" + filename);",
    "right" : "System.err.println(\"Unknown .tga file format for \" + filename);",
    "info" : "ExpressionStatement[176510-176573]:ExpressionStatement[176510-176573]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[176741-176753]:ReturnStatement[176741-176753]"
  }, {
    "left" : "int w = ((header[13] & 0xff) << 8) + (header[12] & 0xff);",
    "right" : "int w = ((header[13] & 0xff) << 8) + (header[12] & 0xff);",
    "info" : "VariableDeclarationStatement[176765-176822]:VariableDeclarationStatement[176765-176822]"
  }, {
    "left" : "int h = ((header[15] & 0xff) << 8) + (header[14] & 0xff);",
    "right" : "int h = ((header[15] & 0xff) << 8) + (header[14] & 0xff);",
    "info" : "VariableDeclarationStatement[176827-176884]:VariableDeclarationStatement[176827-176884]"
  }, {
    "left" : "PImage outgoing = createImage(w, h, format);",
    "right" : "PImage outgoing = createImage(w, h, format);",
    "info" : "VariableDeclarationStatement[176889-176933]:VariableDeclarationStatement[176889-176933]"
  }, {
    "left" : "boolean reversed = (header[17] & 0x20) == 0;",
    "right" : "boolean reversed = (header[17] & 0x20) == 0;",
    "info" : "VariableDeclarationStatement[177180-177224]:VariableDeclarationStatement[177180-177224]"
  }, {
    "left" : "if ((header[2] == 2) || (header[2] == 3))",
    "right" : "if ((header[2] == 2) || (header[2] == 3))",
    "info" : "IfStatement[177230-180912]:IfStatement[177230-180912]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[177272-178900]:Block[177272-178900]"
  }, {
    "left" : "if (reversed)",
    "right" : "if (reversed)",
    "info" : "IfStatement[177300-178893]:IfStatement[177300-178893]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[177314-178223]:Block[177314-178223]"
  }, {
    "left" : "int index = (h-1) * w;",
    "right" : "int index = (h-1) * w;",
    "info" : "VariableDeclarationStatement[177324-177346]:VariableDeclarationStatement[177324-177346]"
  }, {
    "left" : "switch (format) {\n        case ALPHA:\n          for (int y = h-1; y >= 0; y--) {\n            for (int x = 0; x < w; x++) {\n              outgoing.pixels[index + x] = is.read();\n            }\n            index -= w;\n          }\n          break;\n        case RGB:\n          for (int y = h-1; y >= 0; y--) {\n            for (int x = 0; x < w; x++) {\n              outgoing.pixels[index + x] =\n                is.read() | (is.read() << 8) | (is.read() << 16) |\n                0xff000000;\n            }\n            index -= w;\n          }\n          break;\n        case ARGB:\n          for (int y = h-1; y >= 0; y--) {\n            for (int x = 0; x < w; x++) {\n              outgoing.pixels[index + x] =\n                is.read() | (is.read() << 8) | (is.read() << 16) |\n                (is.read() << 24);\n            }\n            index -= w;\n          }\n        }",
    "right" : "switch (format) {\n        case ALPHA:\n          for (int y = h-1; y >= 0; y--) {\n            for (int x = 0; x < w; x++) {\n              outgoing.pixels[index + x] = is.read();\n            }\n            index -= w;\n          }\n          break;\n        case RGB:\n          for (int y = h-1; y >= 0; y--) {\n            for (int x = 0; x < w; x++) {\n              outgoing.pixels[index + x] =\n                is.read() | (is.read() << 8) | (is.read() << 16) |\n                0xff000000;\n            }\n            index -= w;\n          }\n          break;\n        case ARGB:\n          for (int y = h-1; y >= 0; y--) {\n            for (int x = 0; x < w; x++) {\n              outgoing.pixels[index + x] =\n                is.read() | (is.read() << 8) | (is.read() << 16) |\n                (is.read() << 24);\n            }\n            index -= w;\n          }\n        }",
    "info" : "SwitchStatement[177355-178215]:SwitchStatement[177355-178215]"
  }, {
    "left" : "case ALPHA:",
    "right" : "case ALPHA:",
    "info" : "SwitchCase[177381-177392]:SwitchCase[177381-177392]"
  }, {
    "left" : "for (int y = h-1; y >= 0; y--)",
    "right" : "for (int y = h-1; y >= 0; y--)",
    "info" : "ForStatement[177403-177581]:ForStatement[177403-177581]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[177434-177581]:Block[177434-177581]"
  }, {
    "left" : "for (int x = 0; x < w; x++)",
    "right" : "for (int x = 0; x < w; x++)",
    "info" : "ForStatement[177448-177545]:ForStatement[177448-177545]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[177476-177545]:Block[177476-177545]"
  }, {
    "left" : "outgoing.pixels[index + x] = is.read();",
    "right" : "outgoing.pixels[index + x] = is.read();",
    "info" : "ExpressionStatement[177492-177531]:ExpressionStatement[177492-177531]"
  }, {
    "left" : "index -= w;",
    "right" : "index -= w;",
    "info" : "ExpressionStatement[177558-177569]:ExpressionStatement[177558-177569]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[177592-177598]:BreakStatement[177592-177598]"
  }, {
    "left" : "case RGB:",
    "right" : "case RGB:",
    "info" : "SwitchCase[177607-177616]:SwitchCase[177607-177616]"
  }, {
    "left" : "for (int y = h-1; y >= 0; y--)",
    "right" : "for (int y = h-1; y >= 0; y--)",
    "info" : "ForStatement[177627-177889]:ForStatement[177627-177889]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[177658-177889]:Block[177658-177889]"
  }, {
    "left" : "for (int x = 0; x < w; x++)",
    "right" : "for (int x = 0; x < w; x++)",
    "info" : "ForStatement[177672-177853]:ForStatement[177672-177853]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[177700-177853]:Block[177700-177853]"
  }, {
    "left" : "outgoing.pixels[index + x] =\n                is.read() | (is.read() << 8) | (is.read() << 16) |\n                0xff000000;",
    "right" : "outgoing.pixels[index + x] =\n                is.read() | (is.read() << 8) | (is.read() << 16) |\n                0xff000000;",
    "info" : "ExpressionStatement[177716-177839]:ExpressionStatement[177716-177839]"
  }, {
    "left" : "index -= w;",
    "right" : "index -= w;",
    "info" : "ExpressionStatement[177866-177877]:ExpressionStatement[177866-177877]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[177900-177906]:BreakStatement[177900-177906]"
  }, {
    "left" : "case ARGB:",
    "right" : "case ARGB:",
    "info" : "SwitchCase[177915-177925]:SwitchCase[177915-177925]"
  }, {
    "left" : "for (int y = h-1; y >= 0; y--)",
    "right" : "for (int y = h-1; y >= 0; y--)",
    "info" : "ForStatement[177936-178205]:ForStatement[177936-178205]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[177967-178205]:Block[177967-178205]"
  }, {
    "left" : "for (int x = 0; x < w; x++)",
    "right" : "for (int x = 0; x < w; x++)",
    "info" : "ForStatement[177981-178169]:ForStatement[177981-178169]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[178009-178169]:Block[178009-178169]"
  }, {
    "left" : "outgoing.pixels[index + x] =\n                is.read() | (is.read() << 8) | (is.read() << 16) |\n                (is.read() << 24);",
    "right" : "outgoing.pixels[index + x] =\n                is.read() | (is.read() << 8) | (is.read() << 16) |\n                (is.read() << 24);",
    "info" : "ExpressionStatement[178025-178155]:ExpressionStatement[178025-178155]"
  }, {
    "left" : "index -= w;",
    "right" : "index -= w;",
    "info" : "ExpressionStatement[178182-178193]:ExpressionStatement[178182-178193]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[178229-178893]:Block[178229-178893]"
  }, {
    "left" : "int count = w * h;",
    "right" : "int count = w * h;",
    "info" : "VariableDeclarationStatement[178256-178274]:VariableDeclarationStatement[178256-178274]"
  }, {
    "left" : "switch (format) {\n        case ALPHA:\n          for (int i = 0; i < count; i++) {\n            outgoing.pixels[i] = is.read();\n          }\n          break;\n        case RGB:\n          for (int i = 0; i < count; i++) {\n            outgoing.pixels[i] =\n              is.read() | (is.read() << 8) | (is.read() << 16) |\n              0xff000000;\n          }\n          break;\n        case ARGB:\n          for (int i = 0; i < count; i++) {\n            outgoing.pixels[i] =\n              is.read() | (is.read() << 8) | (is.read() << 16) |\n              (is.read() << 24);\n          }\n          break;\n        }",
    "right" : "switch (format) {\n        case ALPHA:\n          for (int i = 0; i < count; i++) {\n            outgoing.pixels[i] = is.read();\n          }\n          break;\n        case RGB:\n          for (int i = 0; i < count; i++) {\n            outgoing.pixels[i] =\n              is.read() | (is.read() << 8) | (is.read() << 16) |\n              0xff000000;\n          }\n          break;\n        case ARGB:\n          for (int i = 0; i < count; i++) {\n            outgoing.pixels[i] =\n              is.read() | (is.read() << 8) | (is.read() << 16) |\n              (is.read() << 24);\n          }\n          break;\n        }",
    "info" : "SwitchStatement[178283-178885]:SwitchStatement[178283-178885]"
  }, {
    "left" : "case ALPHA:",
    "right" : "case ALPHA:",
    "info" : "SwitchCase[178309-178320]:SwitchCase[178309-178320]"
  }, {
    "left" : "for (int i = 0; i < count; i++)",
    "right" : "for (int i = 0; i < count; i++)",
    "info" : "ForStatement[178331-178420]:ForStatement[178331-178420]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[178363-178420]:Block[178363-178420]"
  }, {
    "left" : "outgoing.pixels[i] = is.read();",
    "right" : "outgoing.pixels[i] = is.read();",
    "info" : "ExpressionStatement[178377-178408]:ExpressionStatement[178377-178408]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[178431-178437]:BreakStatement[178431-178437]"
  }, {
    "left" : "case RGB:",
    "right" : "case RGB:",
    "info" : "SwitchCase[178446-178455]:SwitchCase[178446-178455]"
  }, {
    "left" : "for (int i = 0; i < count; i++)",
    "right" : "for (int i = 0; i < count; i++)",
    "info" : "ForStatement[178466-178635]:ForStatement[178466-178635]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[178498-178635]:Block[178498-178635]"
  }, {
    "left" : "outgoing.pixels[i] =\n              is.read() | (is.read() << 8) | (is.read() << 16) |\n              0xff000000;",
    "right" : "outgoing.pixels[i] =\n              is.read() | (is.read() << 8) | (is.read() << 16) |\n              0xff000000;",
    "info" : "ExpressionStatement[178512-178623]:ExpressionStatement[178512-178623]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[178646-178652]:BreakStatement[178646-178652]"
  }, {
    "left" : "case ARGB:",
    "right" : "case ARGB:",
    "info" : "SwitchCase[178661-178671]:SwitchCase[178661-178671]"
  }, {
    "left" : "for (int i = 0; i < count; i++)",
    "right" : "for (int i = 0; i < count; i++)",
    "info" : "ForStatement[178682-178858]:ForStatement[178682-178858]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[178714-178858]:Block[178714-178858]"
  }, {
    "left" : "outgoing.pixels[i] =\n              is.read() | (is.read() << 8) | (is.read() << 16) |\n              (is.read() << 24);",
    "right" : "outgoing.pixels[i] =\n              is.read() | (is.read() << 8) | (is.read() << 16) |\n              (is.read() << 24);",
    "info" : "ExpressionStatement[178728-178846]:ExpressionStatement[178728-178846]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[178869-178875]:BreakStatement[178869-178875]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[178906-180912]:Block[178906-180912]"
  }, {
    "left" : "int index = 0;",
    "right" : "int index = 0;",
    "info" : "VariableDeclarationStatement[178940-178954]:VariableDeclarationStatement[178940-178954]"
  }, {
    "left" : "int px[] = outgoing.pixels;",
    "right" : "int px[] = outgoing.pixels;",
    "info" : "VariableDeclarationStatement[178961-178988]:VariableDeclarationStatement[178961-178988]"
  }, {
    "left" : "while (index < px.length)",
    "right" : "while (index < px.length)",
    "info" : "WhileStatement[178996-180615]:WhileStatement[178996-180615]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[179022-180615]:Block[179022-180615]"
  }, {
    "left" : "int num = is.read();",
    "right" : "int num = is.read();",
    "info" : "VariableDeclarationStatement[179032-179052]:VariableDeclarationStatement[179032-179052]"
  }, {
    "left" : "boolean isRLE = (num & 0x80) != 0;",
    "right" : "boolean isRLE = (num & 0x80) != 0;",
    "info" : "VariableDeclarationStatement[179061-179095]:VariableDeclarationStatement[179061-179095]"
  }, {
    "left" : "if (isRLE)",
    "right" : "if (isRLE)",
    "info" : "IfStatement[179104-180607]:IfStatement[179104-180607]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[179115-179780]:Block[179115-179780]"
  }, {
    "left" : "num -= 127;",
    "right" : "num -= 127;",
    "info" : "ExpressionStatement[179127-179138]:ExpressionStatement[179127-179138]"
  }, {
    "left" : "int pixel = 0;",
    "right" : "int pixel = 0;",
    "info" : "VariableDeclarationStatement[179170-179184]:VariableDeclarationStatement[179170-179184]"
  }, {
    "left" : "switch (format) {\n          case ALPHA:\n            pixel = is.read();\n            break;\n          case RGB:\n            pixel = 0xFF000000 |\n              is.read() | (is.read() << 8) | (is.read() << 16);\n            //(is.read() << 16) | (is.read() << 8) | is.read();\n            break;\n          case ARGB:\n            pixel = is.read() |\n              (is.read() << 8) | (is.read() << 16) | (is.read() << 24);\n            break;\n          }",
    "right" : "switch (format) {\n          case ALPHA:\n            pixel = is.read();\n            break;\n          case RGB:\n            pixel = 0xFF000000 |\n              is.read() | (is.read() << 8) | (is.read() << 16);\n            //(is.read() << 16) | (is.read() << 8) | is.read();\n            break;\n          case ARGB:\n            pixel = is.read() |\n              (is.read() << 8) | (is.read() << 16) | (is.read() << 24);\n            break;\n          }",
    "info" : "SwitchStatement[179195-179640]:SwitchStatement[179195-179640]"
  }, {
    "left" : "case ALPHA:",
    "right" : "case ALPHA:",
    "info" : "SwitchCase[179223-179234]:SwitchCase[179223-179234]"
  }, {
    "left" : "pixel = is.read();",
    "right" : "pixel = is.read();",
    "info" : "ExpressionStatement[179247-179265]:ExpressionStatement[179247-179265]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[179278-179284]:BreakStatement[179278-179284]"
  }, {
    "left" : "case RGB:",
    "right" : "case RGB:",
    "info" : "SwitchCase[179295-179304]:SwitchCase[179295-179304]"
  }, {
    "left" : "pixel = 0xFF000000 |\n              is.read() | (is.read() << 8) | (is.read() << 16);",
    "right" : "pixel = 0xFF000000 |\n              is.read() | (is.read() << 8) | (is.read() << 16);",
    "info" : "ExpressionStatement[179317-179401]:ExpressionStatement[179317-179401]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[179478-179484]:BreakStatement[179478-179484]"
  }, {
    "left" : "case ARGB:",
    "right" : "case ARGB:",
    "info" : "SwitchCase[179495-179505]:SwitchCase[179495-179505]"
  }, {
    "left" : "pixel = is.read() |\n              (is.read() << 8) | (is.read() << 16) | (is.read() << 24);",
    "right" : "pixel = is.read() |\n              (is.read() << 8) | (is.read() << 16) | (is.read() << 24);",
    "info" : "ExpressionStatement[179518-179609]:ExpressionStatement[179518-179609]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[179622-179628]:BreakStatement[179622-179628]"
  }, {
    "left" : "for (int i = 0; i < num; i++)",
    "right" : "for (int i = 0; i < num; i++)",
    "info" : "ForStatement[179651-179770]:ForStatement[179651-179770]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[179681-179770]:Block[179681-179770]"
  }, {
    "left" : "px[index++] = pixel;",
    "right" : "px[index++] = pixel;",
    "info" : "ExpressionStatement[179695-179715]:ExpressionStatement[179695-179715]"
  }, {
    "left" : "if (index == px.length)",
    "right" : "if (index == px.length)",
    "info" : "IfStatement[179728-179758]:IfStatement[179728-179758]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[179752-179758]:BreakStatement[179752-179758]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[179786-180607]:Block[179786-180607]"
  }, {
    "left" : "num += 1;",
    "right" : "num += 1;",
    "info" : "ExpressionStatement[179840-179849]:ExpressionStatement[179840-179849]"
  }, {
    "left" : "switch (format) {\n          case ALPHA:\n            for (int i = 0; i < num; i++) {\n              px[index++] = is.read();\n            }\n            break;\n          case RGB:\n            for (int i = 0; i < num; i++) {\n              px[index++] = 0xFF000000 |\n                is.read() | (is.read() << 8) | (is.read() << 16);\n              //(is.read() << 16) | (is.read() << 8) | is.read();\n            }\n            break;\n          case ARGB:\n            for (int i = 0; i < num; i++) {\n              px[index++] = is.read() | //(is.read() << 24) |\n                (is.read() << 8) | (is.read() << 16) | (is.read() << 24);\n              //(is.read() << 16) | (is.read() << 8) | is.read();\n            }\n            break;\n          }",
    "right" : "switch (format) {\n          case ALPHA:\n            for (int i = 0; i < num; i++) {\n              px[index++] = is.read();\n            }\n            break;\n          case RGB:\n            for (int i = 0; i < num; i++) {\n              px[index++] = 0xFF000000 |\n                is.read() | (is.read() << 8) | (is.read() << 16);\n              //(is.read() << 16) | (is.read() << 8) | is.read();\n            }\n            break;\n          case ARGB:\n            for (int i = 0; i < num; i++) {\n              px[index++] = is.read() | //(is.read() << 24) |\n                (is.read() << 8) | (is.read() << 16) | (is.read() << 24);\n              //(is.read() << 16) | (is.read() << 8) | is.read();\n            }\n            break;\n          }",
    "info" : "SwitchStatement[179860-180597]:SwitchStatement[179860-180597]"
  }, {
    "left" : "case ALPHA:",
    "right" : "case ALPHA:",
    "info" : "SwitchCase[179888-179899]:SwitchCase[179888-179899]"
  }, {
    "left" : "for (int i = 0; i < num; i++)",
    "right" : "for (int i = 0; i < num; i++)",
    "info" : "ForStatement[179912-179996]:ForStatement[179912-179996]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[179942-179996]:Block[179942-179996]"
  }, {
    "left" : "px[index++] = is.read();",
    "right" : "px[index++] = is.read();",
    "info" : "ExpressionStatement[179958-179982]:ExpressionStatement[179958-179982]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[180009-180015]:BreakStatement[180009-180015]"
  }, {
    "left" : "case RGB:",
    "right" : "case RGB:",
    "info" : "SwitchCase[180026-180035]:SwitchCase[180026-180035]"
  }, {
    "left" : "for (int i = 0; i < num; i++)",
    "right" : "for (int i = 0; i < num; i++)",
    "info" : "ForStatement[180048-180266]:ForStatement[180048-180266]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[180078-180266]:Block[180078-180266]"
  }, {
    "left" : "px[index++] = 0xFF000000 |\n                is.read() | (is.read() << 8) | (is.read() << 16);",
    "right" : "px[index++] = 0xFF000000 |\n                is.read() | (is.read() << 8) | (is.read() << 16);",
    "info" : "ExpressionStatement[180094-180186]:ExpressionStatement[180094-180186]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[180279-180285]:BreakStatement[180279-180285]"
  }, {
    "left" : "case ARGB:",
    "right" : "case ARGB:",
    "info" : "SwitchCase[180296-180306]:SwitchCase[180296-180306]"
  }, {
    "left" : "for (int i = 0; i < num; i++)",
    "right" : "for (int i = 0; i < num; i++)",
    "info" : "ForStatement[180319-180566]:ForStatement[180319-180566]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[180349-180566]:Block[180349-180566]"
  }, {
    "left" : "px[index++] = is.read() | //(is.read() << 24) |\n                (is.read() << 8) | (is.read() << 16) | (is.read() << 24);",
    "right" : "px[index++] = is.read() | //(is.read() << 24) |\n                (is.read() << 8) | (is.read() << 16) | (is.read() << 24);",
    "info" : "ExpressionStatement[180365-180486]:ExpressionStatement[180365-180486]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[180579-180585]:BreakStatement[180579-180585]"
  }, {
    "left" : "if (!reversed)",
    "right" : "if (!reversed)",
    "info" : "IfStatement[180623-180906]:IfStatement[180623-180906]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[180638-180906]:Block[180638-180906]"
  }, {
    "left" : "int[] temp = new int[w];",
    "right" : "int[] temp = new int[w];",
    "info" : "VariableDeclarationStatement[180648-180672]:VariableDeclarationStatement[180648-180672]"
  }, {
    "left" : "for (int y = 0; y < h/2; y++)",
    "right" : "for (int y = 0; y < h/2; y++)",
    "info" : "ForStatement[180681-180898]:ForStatement[180681-180898]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[180711-180898]:Block[180711-180898]"
  }, {
    "left" : "int z = (h-1) - y;",
    "right" : "int z = (h-1) - y;",
    "info" : "VariableDeclarationStatement[180723-180741]:VariableDeclarationStatement[180723-180741]"
  }, {
    "left" : "System.arraycopy(px, y*w, temp, 0, w);",
    "right" : "System.arraycopy(px, y*w, temp, 0, w);",
    "info" : "ExpressionStatement[180752-180790]:ExpressionStatement[180752-180790]"
  }, {
    "left" : "System.arraycopy(px, z*w, px, y*w, w);",
    "right" : "System.arraycopy(px, z*w, px, y*w, w);",
    "info" : "ExpressionStatement[180801-180839]:ExpressionStatement[180801-180839]"
  }, {
    "left" : "System.arraycopy(temp, 0, px, z*w, w);",
    "right" : "System.arraycopy(temp, 0, px, z*w, w);",
    "info" : "ExpressionStatement[180850-180888]:ExpressionStatement[180850-180888]"
  }, {
    "left" : "is.close();",
    "right" : "is.close();",
    "info" : "ExpressionStatement[180917-180928]:ExpressionStatement[180917-180928]"
  }, {
    "left" : "return outgoing;",
    "right" : "return outgoing;",
    "info" : "ReturnStatement[180933-180949]:ReturnStatement[180933-180949]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[181851-181857]:Modifier[181851-181857]"
  }, {
    "left" : "XML",
    "right" : "XML",
    "info" : "SimpleType[181858-181861]:SimpleType[181858-181861]"
  }, {
    "left" : "String filename",
    "right" : "String filename",
    "info" : "SingleVariableDeclaration[181870-181885]:SingleVariableDeclaration[181870-181885]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[181887-181928]:Block[181887-181928]"
  }, {
    "left" : "return loadXML(filename, null);",
    "right" : "return loadXML(filename, null);",
    "info" : "ReturnStatement[181893-181924]:ReturnStatement[181893-181924]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[182041-182047]:Modifier[182041-182047]"
  }, {
    "left" : "XML",
    "right" : "XML",
    "info" : "SimpleType[182048-182051]:SimpleType[182048-182051]"
  }, {
    "left" : "String filename",
    "right" : "String filename",
    "info" : "SingleVariableDeclaration[182060-182075]:SingleVariableDeclaration[182060-182075]"
  }, {
    "left" : "String options",
    "right" : "String options",
    "info" : "SingleVariableDeclaration[182077-182091]:SingleVariableDeclaration[182077-182091]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[182093-182518]:Block[182093-182518]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[182099-182514]:TryStatement[182099-182514]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[182103-182293]:Block[182103-182293]"
  }, {
    "left" : "return new XML(createReader(filename), options);",
    "right" : "return new XML(createReader(filename), options);",
    "info" : "ReturnStatement[182111-182159]:ReturnStatement[182111-182159]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[182316-182361]:Block[182316-182361]"
  }, {
    "left" : "throw new RuntimeException(e);",
    "right" : "throw new RuntimeException(e);",
    "info" : "ThrowStatement[182324-182354]:ThrowStatement[182324-182354]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[182401-182446]:Block[182401-182446]"
  }, {
    "left" : "throw new RuntimeException(e);",
    "right" : "throw new RuntimeException(e);",
    "info" : "ThrowStatement[182409-182439]:ThrowStatement[182409-182439]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[182470-182514]:Block[182470-182514]"
  }, {
    "left" : "throw new RuntimeException(e);",
    "right" : "throw new RuntimeException(e);",
    "info" : "ThrowStatement[182478-182508]:ThrowStatement[182478-182508]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[182785-182791]:Modifier[182785-182791]"
  }, {
    "left" : "XML",
    "right" : "XML",
    "info" : "SimpleType[182792-182795]:SimpleType[182792-182795]"
  }, {
    "left" : "String xmlString",
    "right" : "String xmlString",
    "info" : "SingleVariableDeclaration[182805-182821]:SingleVariableDeclaration[182805-182821]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[182823-182866]:Block[182823-182866]"
  }, {
    "left" : "return parseXML(xmlString, null);",
    "right" : "return parseXML(xmlString, null);",
    "info" : "ReturnStatement[182829-182862]:ReturnStatement[182829-182862]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[182871-182877]:Modifier[182871-182877]"
  }, {
    "left" : "XML",
    "right" : "XML",
    "info" : "SimpleType[182878-182881]:SimpleType[182878-182881]"
  }, {
    "left" : "String xmlString",
    "right" : "String xmlString",
    "info" : "SingleVariableDeclaration[182891-182907]:SingleVariableDeclaration[182891-182907]"
  }, {
    "left" : "String options",
    "right" : "String options",
    "info" : "SingleVariableDeclaration[182909-182923]:SingleVariableDeclaration[182909-182923]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[182925-183056]:Block[182925-183056]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[182931-183052]:TryStatement[182931-183052]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[182935-182987]:Block[182935-182987]"
  }, {
    "left" : "return XML.parse(xmlString, options);",
    "right" : "return XML.parse(xmlString, options);",
    "info" : "ReturnStatement[182943-182980]:ReturnStatement[182943-182980]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[183008-183052]:Block[183008-183052]"
  }, {
    "left" : "throw new RuntimeException(e);",
    "right" : "throw new RuntimeException(e);",
    "info" : "ThrowStatement[183016-183046]:ThrowStatement[183016-183046]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[183279-183285]:Modifier[183279-183285]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[183286-183293]:PrimitiveType[183286-183293]"
  }, {
    "left" : "XML xml",
    "right" : "XML xml",
    "info" : "SingleVariableDeclaration[183302-183309]:SingleVariableDeclaration[183302-183309]"
  }, {
    "left" : "String filename",
    "right" : "String filename",
    "info" : "SingleVariableDeclaration[183311-183326]:SingleVariableDeclaration[183311-183326]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[183328-183374]:Block[183328-183374]"
  }, {
    "left" : "return saveXML(xml, filename, null);",
    "right" : "return saveXML(xml, filename, null);",
    "info" : "ReturnStatement[183334-183370]:ReturnStatement[183334-183370]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[183379-183385]:Modifier[183379-183385]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[183386-183393]:PrimitiveType[183386-183393]"
  }, {
    "left" : "XML xml",
    "right" : "XML xml",
    "info" : "SingleVariableDeclaration[183402-183409]:SingleVariableDeclaration[183402-183409]"
  }, {
    "left" : "String filename",
    "right" : "String filename",
    "info" : "SingleVariableDeclaration[183411-183426]:SingleVariableDeclaration[183411-183426]"
  }, {
    "left" : "String options",
    "right" : "String options",
    "info" : "SingleVariableDeclaration[183428-183442]:SingleVariableDeclaration[183428-183442]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[183444-183499]:Block[183444-183499]"
  }, {
    "left" : "return xml.save(saveFile(filename), options);",
    "right" : "return xml.save(saveFile(filename), options);",
    "info" : "ReturnStatement[183450-183495]:ReturnStatement[183450-183495]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[183504-183510]:Modifier[183504-183510]"
  }, {
    "left" : "JSONObject",
    "right" : "JSONObject",
    "info" : "SimpleType[183511-183521]:SimpleType[183511-183521]"
  }, {
    "left" : "String input",
    "right" : "String input",
    "info" : "SingleVariableDeclaration[183538-183550]:SingleVariableDeclaration[183538-183550]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[183552-183609]:Block[183552-183609]"
  }, {
    "left" : "return new JSONObject(new StringReader(input));",
    "right" : "return new JSONObject(new StringReader(input));",
    "info" : "ReturnStatement[183558-183605]:ReturnStatement[183558-183605]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[183900-183906]:Modifier[183900-183906]"
  }, {
    "left" : "JSONObject",
    "right" : "JSONObject",
    "info" : "SimpleType[183907-183917]:SimpleType[183907-183917]"
  }, {
    "left" : "String filename",
    "right" : "String filename",
    "info" : "SingleVariableDeclaration[183933-183948]:SingleVariableDeclaration[183933-183948]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[183950-184006]:Block[183950-184006]"
  }, {
    "left" : "return new JSONObject(createReader(filename));",
    "right" : "return new JSONObject(createReader(filename));",
    "info" : "ReturnStatement[183956-184002]:ReturnStatement[183956-184002]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[184011-184017]:Modifier[184011-184017]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[184018-184024]:Modifier[184018-184024]"
  }, {
    "left" : "JSONObject",
    "right" : "JSONObject",
    "info" : "SimpleType[184025-184035]:SimpleType[184025-184035]"
  }, {
    "left" : "File file",
    "right" : "File file",
    "info" : "SingleVariableDeclaration[184051-184060]:SingleVariableDeclaration[184051-184060]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[184062-184114]:Block[184062-184114]"
  }, {
    "left" : "return new JSONObject(createReader(file));",
    "right" : "return new JSONObject(createReader(file));",
    "info" : "ReturnStatement[184068-184110]:ReturnStatement[184068-184110]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[184330-184336]:Modifier[184330-184336]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[184337-184344]:PrimitiveType[184337-184344]"
  }, {
    "left" : "JSONObject json",
    "right" : "JSONObject json",
    "info" : "SingleVariableDeclaration[184360-184375]:SingleVariableDeclaration[184360-184375]"
  }, {
    "left" : "String filename",
    "right" : "String filename",
    "info" : "SingleVariableDeclaration[184377-184392]:SingleVariableDeclaration[184377-184392]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[184394-184448]:Block[184394-184448]"
  }, {
    "left" : "return saveJSONObject(json, filename, null);",
    "right" : "return saveJSONObject(json, filename, null);",
    "info" : "ReturnStatement[184400-184444]:ReturnStatement[184400-184444]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[184453-184459]:Modifier[184453-184459]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[184460-184467]:PrimitiveType[184460-184467]"
  }, {
    "left" : "JSONObject json",
    "right" : "JSONObject json",
    "info" : "SingleVariableDeclaration[184483-184498]:SingleVariableDeclaration[184483-184498]"
  }, {
    "left" : "String filename",
    "right" : "String filename",
    "info" : "SingleVariableDeclaration[184500-184515]:SingleVariableDeclaration[184500-184515]"
  }, {
    "left" : "String options",
    "right" : "String options",
    "info" : "SingleVariableDeclaration[184517-184531]:SingleVariableDeclaration[184517-184531]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[184533-184589]:Block[184533-184589]"
  }, {
    "left" : "return json.save(saveFile(filename), options);",
    "right" : "return json.save(saveFile(filename), options);",
    "info" : "ReturnStatement[184539-184585]:ReturnStatement[184539-184585]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[184594-184600]:Modifier[184594-184600]"
  }, {
    "left" : "JSONArray",
    "right" : "JSONArray",
    "info" : "SimpleType[184601-184610]:SimpleType[184601-184610]"
  }, {
    "left" : "String input",
    "right" : "String input",
    "info" : "SingleVariableDeclaration[184626-184638]:SingleVariableDeclaration[184626-184638]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[184640-184696]:Block[184640-184696]"
  }, {
    "left" : "return new JSONArray(new StringReader(input));",
    "right" : "return new JSONArray(new StringReader(input));",
    "info" : "ReturnStatement[184646-184692]:ReturnStatement[184646-184692]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[184988-184994]:Modifier[184988-184994]"
  }, {
    "left" : "JSONArray",
    "right" : "JSONArray",
    "info" : "SimpleType[184995-185004]:SimpleType[184995-185004]"
  }, {
    "left" : "String filename",
    "right" : "String filename",
    "info" : "SingleVariableDeclaration[185019-185034]:SingleVariableDeclaration[185019-185034]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[185036-185091]:Block[185036-185091]"
  }, {
    "left" : "return new JSONArray(createReader(filename));",
    "right" : "return new JSONArray(createReader(filename));",
    "info" : "ReturnStatement[185042-185087]:ReturnStatement[185042-185087]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[185096-185102]:Modifier[185096-185102]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[185103-185109]:Modifier[185103-185109]"
  }, {
    "left" : "JSONArray",
    "right" : "JSONArray",
    "info" : "SimpleType[185110-185119]:SimpleType[185110-185119]"
  }, {
    "left" : "File file",
    "right" : "File file",
    "info" : "SingleVariableDeclaration[185134-185143]:SingleVariableDeclaration[185134-185143]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[185145-185196]:Block[185145-185196]"
  }, {
    "left" : "return new JSONArray(createReader(file));",
    "right" : "return new JSONArray(createReader(file));",
    "info" : "ReturnStatement[185151-185192]:ReturnStatement[185151-185192]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[185414-185420]:Modifier[185414-185420]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[185421-185428]:PrimitiveType[185421-185428]"
  }, {
    "left" : "JSONArray json",
    "right" : "JSONArray json",
    "info" : "SingleVariableDeclaration[185443-185457]:SingleVariableDeclaration[185443-185457]"
  }, {
    "left" : "String filename",
    "right" : "String filename",
    "info" : "SingleVariableDeclaration[185459-185474]:SingleVariableDeclaration[185459-185474]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[185476-185529]:Block[185476-185529]"
  }, {
    "left" : "return saveJSONArray(json, filename, null);",
    "right" : "return saveJSONArray(json, filename, null);",
    "info" : "ReturnStatement[185482-185525]:ReturnStatement[185482-185525]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[185534-185540]:Modifier[185534-185540]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[185541-185548]:PrimitiveType[185541-185548]"
  }, {
    "left" : "JSONArray json",
    "right" : "JSONArray json",
    "info" : "SingleVariableDeclaration[185563-185577]:SingleVariableDeclaration[185563-185577]"
  }, {
    "left" : "String filename",
    "right" : "String filename",
    "info" : "SingleVariableDeclaration[185579-185594]:SingleVariableDeclaration[185579-185594]"
  }, {
    "left" : "String options",
    "right" : "String options",
    "info" : "SingleVariableDeclaration[185596-185610]:SingleVariableDeclaration[185596-185610]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[185612-185668]:Block[185612-185668]"
  }, {
    "left" : "return json.save(saveFile(filename), options);",
    "right" : "return json.save(saveFile(filename), options);",
    "info" : "ReturnStatement[185618-185664]:ReturnStatement[185618-185664]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[186154-186160]:Modifier[186154-186160]"
  }, {
    "left" : "Table",
    "right" : "Table",
    "info" : "SimpleType[186161-186166]:SimpleType[186161-186166]"
  }, {
    "left" : "String filename",
    "right" : "String filename",
    "info" : "SingleVariableDeclaration[186177-186192]:SingleVariableDeclaration[186177-186192]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[186194-186237]:Block[186194-186237]"
  }, {
    "left" : "return loadTable(filename, null);",
    "right" : "return loadTable(filename, null);",
    "info" : "ReturnStatement[186200-186233]:ReturnStatement[186200-186233]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[186789-186795]:Modifier[186789-186795]"
  }, {
    "left" : "Table",
    "right" : "Table",
    "info" : "SimpleType[186796-186801]:SimpleType[186796-186801]"
  }, {
    "left" : "String filename",
    "right" : "String filename",
    "info" : "SingleVariableDeclaration[186812-186827]:SingleVariableDeclaration[186812-186827]"
  }, {
    "left" : "String options",
    "right" : "String options",
    "info" : "SingleVariableDeclaration[186829-186843]:SingleVariableDeclaration[186829-186843]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[186845-187585]:Block[186845-187585]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[186851-187581]:TryStatement[186851-187581]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[186855-187505]:Block[186855-187505]"
  }, {
    "left" : "String optionStr = Table.extensionOptions(true, filename, options);",
    "right" : "String optionStr = Table.extensionOptions(true, filename, options);",
    "info" : "VariableDeclarationStatement[186863-186930]:VariableDeclarationStatement[186863-186930]"
  }, {
    "left" : "String[] optionList = trim(split(optionStr, ','));",
    "right" : "String[] optionList = trim(split(optionStr, ','));",
    "info" : "VariableDeclarationStatement[186937-186987]:VariableDeclarationStatement[186937-186987]"
  }, {
    "left" : "Table dictionary = null;",
    "right" : "Table dictionary = null;",
    "info" : "VariableDeclarationStatement[186995-187019]:VariableDeclarationStatement[186995-187019]"
  }, {
    "left" : "for (String opt : optionList)",
    "right" : "for (String opt : optionList)",
    "info" : "EnhancedForStatement[187026-187272]:EnhancedForStatement[187026-187272]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[187056-187272]:Block[187056-187272]"
  }, {
    "left" : "if (opt.startsWith(\"dictionary=\"))",
    "right" : "if (opt.startsWith(\"dictionary=\"))",
    "info" : "IfStatement[187066-187264]:IfStatement[187066-187264]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[187101-187264]:Block[187101-187264]"
  }, {
    "left" : "dictionary = loadTable(opt.substring(opt.indexOf('=') + 1), \"tsv\");",
    "right" : "dictionary = loadTable(opt.substring(opt.indexOf('=') + 1), \"tsv\");",
    "info" : "ExpressionStatement[187113-187180]:ExpressionStatement[187113-187180]"
  }, {
    "left" : "return dictionary.typedParse(createInput(filename), optionStr);",
    "right" : "return dictionary.typedParse(createInput(filename), optionStr);",
    "info" : "ReturnStatement[187191-187254]:ReturnStatement[187191-187254]"
  }, {
    "left" : "InputStream input = createInput(filename);",
    "right" : "InputStream input = createInput(filename);",
    "info" : "VariableDeclarationStatement[187279-187321]:VariableDeclarationStatement[187279-187321]"
  }, {
    "left" : "if (input == null)",
    "right" : "if (input == null)",
    "info" : "IfStatement[187328-187456]:IfStatement[187328-187456]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[187347-187456]:Block[187347-187456]"
  }, {
    "left" : "System.err.println(filename + \" does not exist or could not be read\");",
    "right" : "System.err.println(filename + \" does not exist or could not be read\");",
    "info" : "ExpressionStatement[187357-187427]:ExpressionStatement[187357-187427]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[187436-187448]:ReturnStatement[187436-187448]"
  }, {
    "left" : "return new Table(input, optionStr);",
    "right" : "return new Table(input, optionStr);",
    "info" : "ReturnStatement[187463-187498]:ReturnStatement[187463-187498]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[187528-187581]:Block[187528-187581]"
  }, {
    "left" : "e.printStackTrace();",
    "right" : "e.printStackTrace();",
    "info" : "ExpressionStatement[187536-187556]:ExpressionStatement[187536-187556]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[187563-187575]:ReturnStatement[187563-187575]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[187802-187808]:Modifier[187802-187808]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[187809-187816]:PrimitiveType[187809-187816]"
  }, {
    "left" : "Table table",
    "right" : "Table table",
    "info" : "SingleVariableDeclaration[187827-187838]:SingleVariableDeclaration[187827-187838]"
  }, {
    "left" : "String filename",
    "right" : "String filename",
    "info" : "SingleVariableDeclaration[187840-187855]:SingleVariableDeclaration[187840-187855]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[187857-187907]:Block[187857-187907]"
  }, {
    "left" : "return saveTable(table, filename, null);",
    "right" : "return saveTable(table, filename, null);",
    "info" : "ReturnStatement[187863-187903]:ReturnStatement[187863-187903]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[187989-187995]:Modifier[187989-187995]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[187996-188003]:PrimitiveType[187996-188003]"
  }, {
    "left" : "Table table",
    "right" : "Table table",
    "info" : "SingleVariableDeclaration[188014-188025]:SingleVariableDeclaration[188014-188025]"
  }, {
    "left" : "String filename",
    "right" : "String filename",
    "info" : "SingleVariableDeclaration[188027-188042]:SingleVariableDeclaration[188027-188042]"
  }, {
    "left" : "String options",
    "right" : "String options",
    "info" : "SingleVariableDeclaration[188044-188058]:SingleVariableDeclaration[188044-188058]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[188060-188692]:Block[188060-188692]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[188386-188688]:TryStatement[188386-188688]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[188390-188611]:Block[188390-188611]"
  }, {
    "left" : "File outputFile = saveFile(filename);",
    "right" : "File outputFile = saveFile(filename);",
    "info" : "VariableDeclarationStatement[188464-188501]:VariableDeclarationStatement[188464-188501]"
  }, {
    "left" : "return table.save(outputFile, options);",
    "right" : "return table.save(outputFile, options);",
    "info" : "ReturnStatement[188565-188604]:ReturnStatement[188565-188604]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[188634-188688]:Block[188634-188688]"
  }, {
    "left" : "e.printStackTrace();",
    "right" : "e.printStackTrace();",
    "info" : "ExpressionStatement[188642-188662]:ExpressionStatement[188642-188662]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[188669-188682]:ReturnStatement[188669-188682]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[190374-190380]:Modifier[190374-190380]"
  }, {
    "left" : "PFont",
    "right" : "PFont",
    "info" : "SimpleType[190381-190386]:SimpleType[190381-190386]"
  }, {
    "left" : "String filename",
    "right" : "String filename",
    "info" : "SingleVariableDeclaration[190396-190411]:SingleVariableDeclaration[190396-190411]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[190413-190870]:Block[190413-190870]"
  }, {
    "left" : "if (!filename.toLowerCase().endsWith(\".vlw\"))",
    "right" : "if (!filename.toLowerCase().endsWith(\".vlw\"))",
    "info" : "IfStatement[190419-190564]:IfStatement[190419-190564]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[190465-190564]:Block[190465-190564]"
  }, {
    "left" : "throw new IllegalArgumentException(\"loadFont() is for .vlw files, try createFont()\");",
    "right" : "throw new IllegalArgumentException(\"loadFont() is for .vlw files, try createFont()\");",
    "info" : "ThrowStatement[190473-190558]:ThrowStatement[190473-190558]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[190569-190849]:TryStatement[190569-190849]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[190573-190661]:Block[190573-190661]"
  }, {
    "left" : "InputStream input = createInput(filename);",
    "right" : "InputStream input = createInput(filename);",
    "info" : "VariableDeclarationStatement[190581-190623]:VariableDeclarationStatement[190581-190623]"
  }, {
    "left" : "return new PFont(input);",
    "right" : "return new PFont(input);",
    "info" : "ReturnStatement[190630-190654]:ReturnStatement[190630-190654]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[190682-190849]:Block[190682-190849]"
  }, {
    "left" : "die(\"Could not load font \" + filename + \". \" +\n          \"Make sure that the font has been copied \" +\n          \"to the data folder of your sketch.\", e);",
    "right" : "die(\"Could not load font \" + filename + \". \" +\n          \"Make sure that the font has been copied \" +\n          \"to the data folder of your sketch.\", e);",
    "info" : "ExpressionStatement[190690-190843]:ExpressionStatement[190690-190843]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[190854-190866]:ReturnStatement[190854-190866]"
  }, {
    "left" : "protected",
    "right" : "protected",
    "info" : "Modifier[190956-190965]:Modifier[190956-190965]"
  }, {
    "left" : "PFont",
    "right" : "PFont",
    "info" : "SimpleType[190966-190971]:SimpleType[190966-190971]"
  }, {
    "left" : "float size",
    "right" : "float size",
    "info" : "SingleVariableDeclaration[190990-191000]:SingleVariableDeclaration[190990-191000]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[191002-191233]:Block[191002-191233]"
  }, {
    "left" : "return createFont(\"Lucida Sans\", size, true, null);",
    "right" : "return createFont(\"Lucida Sans\", size, true, null);",
    "info" : "ReturnStatement[191178-191229]:ReturnStatement[191178-191229]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[191238-191244]:Modifier[191238-191244]"
  }, {
    "left" : "PFont",
    "right" : "PFont",
    "info" : "SimpleType[191245-191250]:SimpleType[191245-191250]"
  }, {
    "left" : "String name",
    "right" : "String name",
    "info" : "SingleVariableDeclaration[191262-191273]:SingleVariableDeclaration[191262-191273]"
  }, {
    "left" : "float size",
    "right" : "float size",
    "info" : "SingleVariableDeclaration[191275-191285]:SingleVariableDeclaration[191275-191285]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[191287-191339]:Block[191287-191339]"
  }, {
    "left" : "return createFont(name, size, true, null);",
    "right" : "return createFont(name, size, true, null);",
    "info" : "ReturnStatement[191293-191335]:ReturnStatement[191293-191335]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[191344-191350]:Modifier[191344-191350]"
  }, {
    "left" : "PFont",
    "right" : "PFont",
    "info" : "SimpleType[191351-191356]:SimpleType[191351-191356]"
  }, {
    "left" : "String name",
    "right" : "String name",
    "info" : "SingleVariableDeclaration[191368-191379]:SingleVariableDeclaration[191368-191379]"
  }, {
    "left" : "float size",
    "right" : "float size",
    "info" : "SingleVariableDeclaration[191381-191391]:SingleVariableDeclaration[191381-191391]"
  }, {
    "left" : "boolean smooth",
    "right" : "boolean smooth",
    "info" : "SingleVariableDeclaration[191393-191407]:SingleVariableDeclaration[191393-191407]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[191409-191463]:Block[191409-191463]"
  }, {
    "left" : "return createFont(name, size, smooth, null);",
    "right" : "return createFont(name, size, smooth, null);",
    "info" : "ReturnStatement[191415-191459]:ReturnStatement[191415-191459]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[194107-194113]:Modifier[194107-194113]"
  }, {
    "left" : "PFont",
    "right" : "PFont",
    "info" : "SimpleType[194114-194119]:SimpleType[194114-194119]"
  }, {
    "left" : "String name",
    "right" : "String name",
    "info" : "SingleVariableDeclaration[194131-194142]:SingleVariableDeclaration[194131-194142]"
  }, {
    "left" : "float size",
    "right" : "float size",
    "info" : "SingleVariableDeclaration[194144-194154]:SingleVariableDeclaration[194144-194154]"
  }, {
    "left" : "boolean smooth",
    "right" : "boolean smooth",
    "info" : "SingleVariableDeclaration[194182-194196]:SingleVariableDeclaration[194182-194196]"
  }, {
    "left" : "char[] charset",
    "right" : "char[] charset",
    "info" : "SingleVariableDeclaration[194198-194212]:SingleVariableDeclaration[194198-194212]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[194214-195232]:Block[194214-195232]"
  }, {
    "left" : "String lowerName = name.toLowerCase();",
    "right" : "String lowerName = name.toLowerCase();",
    "info" : "VariableDeclarationStatement[194220-194258]:VariableDeclarationStatement[194220-194258]"
  }, {
    "left" : "Font baseFont = null;",
    "right" : "Font baseFont = null;",
    "info" : "VariableDeclarationStatement[194263-194284]:VariableDeclarationStatement[194263-194284]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[194290-195228]:TryStatement[194290-195228]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[194294-195083]:Block[194294-195083]"
  }, {
    "left" : "InputStream stream = null;",
    "right" : "InputStream stream = null;",
    "info" : "VariableDeclarationStatement[194302-194328]:VariableDeclarationStatement[194302-194328]"
  }, {
    "left" : "if (lowerName.endsWith(\".otf\") || lowerName.endsWith(\".ttf\"))",
    "right" : "if (lowerName.endsWith(\".otf\") || lowerName.endsWith(\".ttf\"))",
    "info" : "IfStatement[194335-194917]:IfStatement[194335-194917]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[194397-194861]:Block[194397-194861]"
  }, {
    "left" : "stream = createInput(name);",
    "right" : "stream = createInput(name);",
    "info" : "ExpressionStatement[194407-194434]:ExpressionStatement[194407-194434]"
  }, {
    "left" : "if (stream == null)",
    "right" : "if (stream == null)",
    "info" : "IfStatement[194443-194777]:IfStatement[194443-194777]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[194463-194777]:Block[194463-194777]"
  }, {
    "left" : "System.err.println(\"The font \\\"\" + name + \"\\\" \" +\n                             \"is missing or inaccessible, make sure \" +\n                             \"the URL is valid or that the file has been \" +\n                             \"added to your sketch and is readable.\");",
    "right" : "System.err.println(\"The font \\\"\" + name + \"\\\" \" +\n                             \"is missing or inaccessible, make sure \" +\n                             \"the URL is valid or that the file has been \" +\n                             \"added to your sketch and is readable.\");",
    "info" : "ExpressionStatement[194475-194744]:ExpressionStatement[194475-194744]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[194755-194767]:ReturnStatement[194755-194767]"
  }, {
    "left" : "baseFont = Font.createFont(Font.TRUETYPE_FONT, createInput(name));",
    "right" : "baseFont = Font.createFont(Font.TRUETYPE_FONT, createInput(name));",
    "info" : "ExpressionStatement[194786-194852]:ExpressionStatement[194786-194852]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[194867-194917]:Block[194867-194917]"
  }, {
    "left" : "baseFont = PFont.findFont(name);",
    "right" : "baseFont = PFont.findFont(name);",
    "info" : "ExpressionStatement[194877-194909]:ExpressionStatement[194877-194909]"
  }, {
    "left" : "return new PFont(baseFont.deriveFont(size * pixelDensity),\n                       smooth, charset, stream != null,\n                       pixelDensity);",
    "right" : "return new PFont(baseFont.deriveFont(size * pixelDensity),\n                       smooth, charset, stream != null,\n                       pixelDensity);",
    "info" : "ReturnStatement[194924-195076]:ReturnStatement[194924-195076]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[195104-195228]:Block[195104-195228]"
  }, {
    "left" : "System.err.println(\"Problem with createFont(\\\"\" + name + \"\\\")\");",
    "right" : "System.err.println(\"Problem with createFont(\\\"\" + name + \"\\\")\");",
    "info" : "ExpressionStatement[195112-195176]:ExpressionStatement[195112-195176]"
  }, {
    "left" : "e.printStackTrace();",
    "right" : "e.printStackTrace();",
    "info" : "ExpressionStatement[195183-195203]:ExpressionStatement[195183-195203]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[195210-195222]:ReturnStatement[195210-195222]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[196965-196971]:Modifier[196965-196971]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[196972-196976]:PrimitiveType[196972-196976]"
  }, {
    "left" : "String prompt",
    "right" : "String prompt",
    "info" : "SingleVariableDeclaration[196989-197002]:SingleVariableDeclaration[196989-197002]"
  }, {
    "left" : "String callback",
    "right" : "String callback",
    "info" : "SingleVariableDeclaration[197004-197019]:SingleVariableDeclaration[197004-197019]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[197021-197067]:Block[197021-197067]"
  }, {
    "left" : "selectInput(prompt, callback, null);",
    "right" : "selectInput(prompt, callback, null);",
    "info" : "ExpressionStatement[197027-197063]:ExpressionStatement[197027-197063]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[197072-197078]:Modifier[197072-197078]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[197079-197083]:PrimitiveType[197079-197083]"
  }, {
    "left" : "String prompt",
    "right" : "String prompt",
    "info" : "SingleVariableDeclaration[197096-197109]:SingleVariableDeclaration[197096-197109]"
  }, {
    "left" : "String callback",
    "right" : "String callback",
    "info" : "SingleVariableDeclaration[197111-197126]:SingleVariableDeclaration[197111-197126]"
  }, {
    "left" : "File file",
    "right" : "File file",
    "info" : "SingleVariableDeclaration[197128-197137]:SingleVariableDeclaration[197128-197137]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[197139-197191]:Block[197139-197191]"
  }, {
    "left" : "selectInput(prompt, callback, file, this);",
    "right" : "selectInput(prompt, callback, file, this);",
    "info" : "ExpressionStatement[197145-197187]:ExpressionStatement[197145-197187]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[197196-197202]:Modifier[197196-197202]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[197203-197207]:PrimitiveType[197203-197207]"
  }, {
    "left" : "String prompt",
    "right" : "String prompt",
    "info" : "SingleVariableDeclaration[197220-197233]:SingleVariableDeclaration[197220-197233]"
  }, {
    "left" : "String callback",
    "right" : "String callback",
    "info" : "SingleVariableDeclaration[197235-197250]:SingleVariableDeclaration[197235-197250]"
  }, {
    "left" : "File file",
    "right" : "File file",
    "info" : "SingleVariableDeclaration[197278-197287]:SingleVariableDeclaration[197278-197287]"
  }, {
    "left" : "Object callbackObject",
    "right" : "Object callbackObject",
    "info" : "SingleVariableDeclaration[197289-197310]:SingleVariableDeclaration[197289-197310]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[197312-197399]:Block[197312-197399]"
  }, {
    "left" : "selectInput(prompt, callback, file, callbackObject, null);",
    "right" : "selectInput(prompt, callback, file, callbackObject, null);",
    "info" : "ExpressionStatement[197318-197376]:ExpressionStatement[197318-197376]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[197404-197410]:Modifier[197404-197410]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[197411-197417]:Modifier[197411-197417]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[197418-197422]:PrimitiveType[197418-197422]"
  }, {
    "left" : "String prompt",
    "right" : "String prompt",
    "info" : "SingleVariableDeclaration[197435-197448]:SingleVariableDeclaration[197435-197448]"
  }, {
    "left" : "String callbackMethod",
    "right" : "String callbackMethod",
    "info" : "SingleVariableDeclaration[197450-197471]:SingleVariableDeclaration[197450-197471]"
  }, {
    "left" : "File file",
    "right" : "File file",
    "info" : "SingleVariableDeclaration[197506-197515]:SingleVariableDeclaration[197506-197515]"
  }, {
    "left" : "Object callbackObject",
    "right" : "Object callbackObject",
    "info" : "SingleVariableDeclaration[197517-197538]:SingleVariableDeclaration[197517-197538]"
  }, {
    "left" : "Frame parent",
    "right" : "Frame parent",
    "info" : "SingleVariableDeclaration[197540-197552]:SingleVariableDeclaration[197540-197552]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[197554-197646]:Block[197554-197646]"
  }, {
    "left" : "selectImpl(prompt, callbackMethod, file, callbackObject, parent, FileDialog.LOAD);",
    "right" : "selectImpl(prompt, callbackMethod, file, callbackObject, parent, FileDialog.LOAD);",
    "info" : "ExpressionStatement[197560-197642]:ExpressionStatement[197560-197642]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[197849-197855]:Modifier[197849-197855]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[197856-197860]:PrimitiveType[197856-197860]"
  }, {
    "left" : "String prompt",
    "right" : "String prompt",
    "info" : "SingleVariableDeclaration[197874-197887]:SingleVariableDeclaration[197874-197887]"
  }, {
    "left" : "String callback",
    "right" : "String callback",
    "info" : "SingleVariableDeclaration[197889-197904]:SingleVariableDeclaration[197889-197904]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[197906-197953]:Block[197906-197953]"
  }, {
    "left" : "selectOutput(prompt, callback, null);",
    "right" : "selectOutput(prompt, callback, null);",
    "info" : "ExpressionStatement[197912-197949]:ExpressionStatement[197912-197949]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[197957-197963]:Modifier[197957-197963]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[197964-197968]:PrimitiveType[197964-197968]"
  }, {
    "left" : "String prompt",
    "right" : "String prompt",
    "info" : "SingleVariableDeclaration[197982-197995]:SingleVariableDeclaration[197982-197995]"
  }, {
    "left" : "String callback",
    "right" : "String callback",
    "info" : "SingleVariableDeclaration[197997-198012]:SingleVariableDeclaration[197997-198012]"
  }, {
    "left" : "File file",
    "right" : "File file",
    "info" : "SingleVariableDeclaration[198014-198023]:SingleVariableDeclaration[198014-198023]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[198025-198078]:Block[198025-198078]"
  }, {
    "left" : "selectOutput(prompt, callback, file, this);",
    "right" : "selectOutput(prompt, callback, file, this);",
    "info" : "ExpressionStatement[198031-198074]:ExpressionStatement[198031-198074]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[198083-198089]:Modifier[198083-198089]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[198090-198094]:PrimitiveType[198090-198094]"
  }, {
    "left" : "String prompt",
    "right" : "String prompt",
    "info" : "SingleVariableDeclaration[198108-198121]:SingleVariableDeclaration[198108-198121]"
  }, {
    "left" : "String callback",
    "right" : "String callback",
    "info" : "SingleVariableDeclaration[198123-198138]:SingleVariableDeclaration[198123-198138]"
  }, {
    "left" : "File file",
    "right" : "File file",
    "info" : "SingleVariableDeclaration[198167-198176]:SingleVariableDeclaration[198167-198176]"
  }, {
    "left" : "Object callbackObject",
    "right" : "Object callbackObject",
    "info" : "SingleVariableDeclaration[198178-198199]:SingleVariableDeclaration[198178-198199]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[198201-198288]:Block[198201-198288]"
  }, {
    "left" : "selectOutput(prompt, callback, file, callbackObject, null);",
    "right" : "selectOutput(prompt, callback, file, callbackObject, null);",
    "info" : "ExpressionStatement[198207-198266]:ExpressionStatement[198207-198266]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[198293-198299]:Modifier[198293-198299]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[198300-198306]:Modifier[198300-198306]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[198307-198311]:PrimitiveType[198307-198311]"
  }, {
    "left" : "String prompt",
    "right" : "String prompt",
    "info" : "SingleVariableDeclaration[198325-198338]:SingleVariableDeclaration[198325-198338]"
  }, {
    "left" : "String callbackMethod",
    "right" : "String callbackMethod",
    "info" : "SingleVariableDeclaration[198340-198361]:SingleVariableDeclaration[198340-198361]"
  }, {
    "left" : "File file",
    "right" : "File file",
    "info" : "SingleVariableDeclaration[198397-198406]:SingleVariableDeclaration[198397-198406]"
  }, {
    "left" : "Object callbackObject",
    "right" : "Object callbackObject",
    "info" : "SingleVariableDeclaration[198408-198429]:SingleVariableDeclaration[198408-198429]"
  }, {
    "left" : "Frame parent",
    "right" : "Frame parent",
    "info" : "SingleVariableDeclaration[198431-198443]:SingleVariableDeclaration[198431-198443]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[198445-198537]:Block[198445-198537]"
  }, {
    "left" : "selectImpl(prompt, callbackMethod, file, callbackObject, parent, FileDialog.SAVE);",
    "right" : "selectImpl(prompt, callbackMethod, file, callbackObject, parent, FileDialog.SAVE);",
    "info" : "ExpressionStatement[198451-198533]:ExpressionStatement[198451-198533]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[198542-198548]:Modifier[198542-198548]"
  }, {
    "left" : "protected",
    "right" : "protected",
    "info" : "Modifier[198549-198558]:Modifier[198549-198558]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[198559-198563]:PrimitiveType[198559-198563]"
  }, {
    "left" : "final String prompt",
    "right" : "final String prompt",
    "info" : "SingleVariableDeclaration[198575-198594]:SingleVariableDeclaration[198575-198594]"
  }, {
    "left" : "final String callbackMethod",
    "right" : "final String callbackMethod",
    "info" : "SingleVariableDeclaration[198631-198658]:SingleVariableDeclaration[198631-198658]"
  }, {
    "left" : "final File defaultSelection",
    "right" : "final File defaultSelection",
    "info" : "SingleVariableDeclaration[198695-198722]:SingleVariableDeclaration[198695-198722]"
  }, {
    "left" : "final Object callbackObject",
    "right" : "final Object callbackObject",
    "info" : "SingleVariableDeclaration[198759-198786]:SingleVariableDeclaration[198759-198786]"
  }, {
    "left" : "final Frame parentFrame",
    "right" : "final Frame parentFrame",
    "info" : "SingleVariableDeclaration[198823-198846]:SingleVariableDeclaration[198823-198846]"
  }, {
    "left" : "final int mode",
    "right" : "final int mode",
    "info" : "SingleVariableDeclaration[198883-198897]:SingleVariableDeclaration[198883-198897]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[198899-200207]:Block[198899-200207]"
  }, {
    "left" : "EventQueue.invokeLater(new Runnable() {\n      public void run() {\n        File selectedFile = null;\n\n        if (useNativeSelect) {\n          FileDialog dialog = new FileDialog(parentFrame, prompt, mode);\n          if (defaultSelection != null) {\n            dialog.setDirectory(defaultSelection.getParent());\n            dialog.setFile(defaultSelection.getName());\n          }\n          dialog.setVisible(true);\n          String directory = dialog.getDirectory();\n          String filename = dialog.getFile();\n          if (filename != null) {\n            selectedFile = new File(directory, filename);\n          }\n\n        } else {\n          JFileChooser chooser = new JFileChooser();\n          chooser.setDialogTitle(prompt);\n          if (defaultSelection != null) {\n            chooser.setSelectedFile(defaultSelection);\n          }\n\n          int result = -1;\n          if (mode == FileDialog.SAVE) {\n            result = chooser.showSaveDialog(parentFrame);\n          } else if (mode == FileDialog.LOAD) {\n            result = chooser.showOpenDialog(parentFrame);\n          }\n          if (result == JFileChooser.APPROVE_OPTION) {\n            selectedFile = chooser.getSelectedFile();\n          }\n        }\n        selectCallback(selectedFile, callbackMethod, callbackObject);\n      }\n    });",
    "right" : "EventQueue.invokeLater(new Runnable() {\n      public void run() {\n        File selectedFile = null;\n\n        if (useNativeSelect) {\n          FileDialog dialog = new FileDialog(parentFrame, prompt, mode);\n          if (defaultSelection != null) {\n            dialog.setDirectory(defaultSelection.getParent());\n            dialog.setFile(defaultSelection.getName());\n          }\n          dialog.setVisible(true);\n          String directory = dialog.getDirectory();\n          String filename = dialog.getFile();\n          if (filename != null) {\n            selectedFile = new File(directory, filename);\n          }\n\n        } else {\n          JFileChooser chooser = new JFileChooser();\n          chooser.setDialogTitle(prompt);\n          if (defaultSelection != null) {\n            chooser.setSelectedFile(defaultSelection);\n          }\n\n          int result = -1;\n          if (mode == FileDialog.SAVE) {\n            result = chooser.showSaveDialog(parentFrame);\n          } else if (mode == FileDialog.LOAD) {\n            result = chooser.showOpenDialog(parentFrame);\n          }\n          if (result == JFileChooser.APPROVE_OPTION) {\n            selectedFile = chooser.getSelectedFile();\n          }\n        }\n        selectCallback(selectedFile, callbackMethod, callbackObject);\n      }\n    });",
    "info" : "ExpressionStatement[198905-200203]:ExpressionStatement[198905-200203]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[198951-198957]:Modifier[198951-198957]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[198958-198962]:PrimitiveType[198958-198962]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[198969-200195]:Block[198969-200195]"
  }, {
    "left" : "File selectedFile = null;",
    "right" : "File selectedFile = null;",
    "info" : "VariableDeclarationStatement[198979-199004]:VariableDeclarationStatement[198979-199004]"
  }, {
    "left" : "if (useNativeSelect)",
    "right" : "if (useNativeSelect)",
    "info" : "IfStatement[199014-200117]:IfStatement[199014-200117]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[199035-199530]:Block[199035-199530]"
  }, {
    "left" : "FileDialog dialog = new FileDialog(parentFrame, prompt, mode);",
    "right" : "FileDialog dialog = new FileDialog(parentFrame, prompt, mode);",
    "info" : "VariableDeclarationStatement[199047-199109]:VariableDeclarationStatement[199047-199109]"
  }, {
    "left" : "if (defaultSelection != null)",
    "right" : "if (defaultSelection != null)",
    "info" : "IfStatement[199120-199282]:IfStatement[199120-199282]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[199150-199282]:Block[199150-199282]"
  }, {
    "left" : "dialog.setDirectory(defaultSelection.getParent());",
    "right" : "dialog.setDirectory(defaultSelection.getParent());",
    "info" : "ExpressionStatement[199164-199214]:ExpressionStatement[199164-199214]"
  }, {
    "left" : "dialog.setFile(defaultSelection.getName());",
    "right" : "dialog.setFile(defaultSelection.getName());",
    "info" : "ExpressionStatement[199227-199270]:ExpressionStatement[199227-199270]"
  }, {
    "left" : "dialog.setVisible(true);",
    "right" : "dialog.setVisible(true);",
    "info" : "ExpressionStatement[199293-199317]:ExpressionStatement[199293-199317]"
  }, {
    "left" : "String directory = dialog.getDirectory();",
    "right" : "String directory = dialog.getDirectory();",
    "info" : "VariableDeclarationStatement[199328-199369]:VariableDeclarationStatement[199328-199369]"
  }, {
    "left" : "String filename = dialog.getFile();",
    "right" : "String filename = dialog.getFile();",
    "info" : "VariableDeclarationStatement[199380-199415]:VariableDeclarationStatement[199380-199415]"
  }, {
    "left" : "if (filename != null)",
    "right" : "if (filename != null)",
    "info" : "IfStatement[199426-199519]:IfStatement[199426-199519]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[199448-199519]:Block[199448-199519]"
  }, {
    "left" : "selectedFile = new File(directory, filename);",
    "right" : "selectedFile = new File(directory, filename);",
    "info" : "ExpressionStatement[199462-199507]:ExpressionStatement[199462-199507]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[199536-200117]:Block[199536-200117]"
  }, {
    "left" : "JFileChooser chooser = new JFileChooser();",
    "right" : "JFileChooser chooser = new JFileChooser();",
    "info" : "VariableDeclarationStatement[199548-199590]:VariableDeclarationStatement[199548-199590]"
  }, {
    "left" : "chooser.setDialogTitle(prompt);",
    "right" : "chooser.setDialogTitle(prompt);",
    "info" : "ExpressionStatement[199601-199632]:ExpressionStatement[199601-199632]"
  }, {
    "left" : "if (defaultSelection != null)",
    "right" : "if (defaultSelection != null)",
    "info" : "IfStatement[199643-199741]:IfStatement[199643-199741]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[199673-199741]:Block[199673-199741]"
  }, {
    "left" : "chooser.setSelectedFile(defaultSelection);",
    "right" : "chooser.setSelectedFile(defaultSelection);",
    "info" : "ExpressionStatement[199687-199729]:ExpressionStatement[199687-199729]"
  }, {
    "left" : "int result = -1;",
    "right" : "int result = -1;",
    "info" : "VariableDeclarationStatement[199753-199769]:VariableDeclarationStatement[199753-199769]"
  }, {
    "left" : "if (mode == FileDialog.SAVE)",
    "right" : "if (mode == FileDialog.SAVE)",
    "info" : "IfStatement[199780-199986]:IfStatement[199780-199986]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[199809-199880]:Block[199809-199880]"
  }, {
    "left" : "result = chooser.showSaveDialog(parentFrame);",
    "right" : "result = chooser.showSaveDialog(parentFrame);",
    "info" : "ExpressionStatement[199823-199868]:ExpressionStatement[199823-199868]"
  }, {
    "left" : "if (mode == FileDialog.LOAD)",
    "right" : "if (mode == FileDialog.LOAD)",
    "info" : "IfStatement[199886-199986]:IfStatement[199886-199986]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[199915-199986]:Block[199915-199986]"
  }, {
    "left" : "result = chooser.showOpenDialog(parentFrame);",
    "right" : "result = chooser.showOpenDialog(parentFrame);",
    "info" : "ExpressionStatement[199929-199974]:ExpressionStatement[199929-199974]"
  }, {
    "left" : "if (result == JFileChooser.APPROVE_OPTION)",
    "right" : "if (result == JFileChooser.APPROVE_OPTION)",
    "info" : "IfStatement[199997-200107]:IfStatement[199997-200107]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[200040-200107]:Block[200040-200107]"
  }, {
    "left" : "selectedFile = chooser.getSelectedFile();",
    "right" : "selectedFile = chooser.getSelectedFile();",
    "info" : "ExpressionStatement[200054-200095]:ExpressionStatement[200054-200095]"
  }, {
    "left" : "selectCallback(selectedFile, callbackMethod, callbackObject);",
    "right" : "selectCallback(selectedFile, callbackMethod, callbackObject);",
    "info" : "ExpressionStatement[200126-200187]:ExpressionStatement[200126-200187]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[200409-200415]:Modifier[200409-200415]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[200416-200420]:PrimitiveType[200416-200420]"
  }, {
    "left" : "String prompt",
    "right" : "String prompt",
    "info" : "SingleVariableDeclaration[200434-200447]:SingleVariableDeclaration[200434-200447]"
  }, {
    "left" : "String callback",
    "right" : "String callback",
    "info" : "SingleVariableDeclaration[200449-200464]:SingleVariableDeclaration[200449-200464]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[200466-200513]:Block[200466-200513]"
  }, {
    "left" : "selectFolder(prompt, callback, null);",
    "right" : "selectFolder(prompt, callback, null);",
    "info" : "ExpressionStatement[200472-200509]:ExpressionStatement[200472-200509]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[200518-200524]:Modifier[200518-200524]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[200525-200529]:PrimitiveType[200525-200529]"
  }, {
    "left" : "String prompt",
    "right" : "String prompt",
    "info" : "SingleVariableDeclaration[200543-200556]:SingleVariableDeclaration[200543-200556]"
  }, {
    "left" : "String callback",
    "right" : "String callback",
    "info" : "SingleVariableDeclaration[200558-200573]:SingleVariableDeclaration[200558-200573]"
  }, {
    "left" : "File file",
    "right" : "File file",
    "info" : "SingleVariableDeclaration[200575-200584]:SingleVariableDeclaration[200575-200584]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[200586-200639]:Block[200586-200639]"
  }, {
    "left" : "selectFolder(prompt, callback, file, this);",
    "right" : "selectFolder(prompt, callback, file, this);",
    "info" : "ExpressionStatement[200592-200635]:ExpressionStatement[200592-200635]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[200644-200650]:Modifier[200644-200650]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[200651-200655]:PrimitiveType[200651-200655]"
  }, {
    "left" : "String prompt",
    "right" : "String prompt",
    "info" : "SingleVariableDeclaration[200669-200682]:SingleVariableDeclaration[200669-200682]"
  }, {
    "left" : "String callback",
    "right" : "String callback",
    "info" : "SingleVariableDeclaration[200684-200699]:SingleVariableDeclaration[200684-200699]"
  }, {
    "left" : "File file",
    "right" : "File file",
    "info" : "SingleVariableDeclaration[200728-200737]:SingleVariableDeclaration[200728-200737]"
  }, {
    "left" : "Object callbackObject",
    "right" : "Object callbackObject",
    "info" : "SingleVariableDeclaration[200739-200760]:SingleVariableDeclaration[200739-200760]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[200762-200849]:Block[200762-200849]"
  }, {
    "left" : "selectFolder(prompt, callback, file, callbackObject, null);",
    "right" : "selectFolder(prompt, callback, file, callbackObject, null);",
    "info" : "ExpressionStatement[200768-200827]:ExpressionStatement[200768-200827]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[200854-200860]:Modifier[200854-200860]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[200861-200867]:Modifier[200861-200867]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[200868-200872]:PrimitiveType[200868-200872]"
  }, {
    "left" : "final String prompt",
    "right" : "final String prompt",
    "info" : "SingleVariableDeclaration[200886-200905]:SingleVariableDeclaration[200886-200905]"
  }, {
    "left" : "final String callbackMethod",
    "right" : "final String callbackMethod",
    "info" : "SingleVariableDeclaration[200941-200968]:SingleVariableDeclaration[200941-200968]"
  }, {
    "left" : "final File defaultSelection",
    "right" : "final File defaultSelection",
    "info" : "SingleVariableDeclaration[201004-201031]:SingleVariableDeclaration[201004-201031]"
  }, {
    "left" : "final Object callbackObject",
    "right" : "final Object callbackObject",
    "info" : "SingleVariableDeclaration[201067-201094]:SingleVariableDeclaration[201067-201094]"
  }, {
    "left" : "final Frame parentFrame",
    "right" : "final Frame parentFrame",
    "info" : "SingleVariableDeclaration[201130-201153]:SingleVariableDeclaration[201130-201153]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[201155-202395]:Block[201155-202395]"
  }, {
    "left" : "EventQueue.invokeLater(new Runnable() {\n      public void run() {\n        File selectedFile = null;\n\n        if (platform == MACOSX && useNativeSelect != false) {\n          FileDialog fileDialog =\n            new FileDialog(parentFrame, prompt, FileDialog.LOAD);\n          System.setProperty(\"apple.awt.fileDialogForDirectories\", \"true\");\n          fileDialog.setVisible(true);\n          System.setProperty(\"apple.awt.fileDialogForDirectories\", \"false\");\n          String filename = fileDialog.getFile();\n          if (filename != null) {\n            selectedFile = new File(fileDialog.getDirectory(), fileDialog.getFile());\n          }\n        } else {\n          JFileChooser fileChooser = new JFileChooser();\n          fileChooser.setDialogTitle(prompt);\n          fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);\n          if (defaultSelection != null) {\n            fileChooser.setSelectedFile(defaultSelection);\n          }\n\n          int result = fileChooser.showOpenDialog(parentFrame);\n          if (result == JFileChooser.APPROVE_OPTION) {\n            selectedFile = fileChooser.getSelectedFile();\n          }\n        }\n        selectCallback(selectedFile, callbackMethod, callbackObject);\n      }\n    });",
    "right" : "EventQueue.invokeLater(new Runnable() {\n      public void run() {\n        File selectedFile = null;\n\n        if (platform == MACOSX && useNativeSelect != false) {\n          FileDialog fileDialog =\n            new FileDialog(parentFrame, prompt, FileDialog.LOAD);\n          System.setProperty(\"apple.awt.fileDialogForDirectories\", \"true\");\n          fileDialog.setVisible(true);\n          System.setProperty(\"apple.awt.fileDialogForDirectories\", \"false\");\n          String filename = fileDialog.getFile();\n          if (filename != null) {\n            selectedFile = new File(fileDialog.getDirectory(), fileDialog.getFile());\n          }\n        } else {\n          JFileChooser fileChooser = new JFileChooser();\n          fileChooser.setDialogTitle(prompt);\n          fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);\n          if (defaultSelection != null) {\n            fileChooser.setSelectedFile(defaultSelection);\n          }\n\n          int result = fileChooser.showOpenDialog(parentFrame);\n          if (result == JFileChooser.APPROVE_OPTION) {\n            selectedFile = fileChooser.getSelectedFile();\n          }\n        }\n        selectCallback(selectedFile, callbackMethod, callbackObject);\n      }\n    });",
    "info" : "ExpressionStatement[201161-202391]:ExpressionStatement[201161-202391]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[201207-201213]:Modifier[201207-201213]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[201214-201218]:PrimitiveType[201214-201218]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[201225-202383]:Block[201225-202383]"
  }, {
    "left" : "File selectedFile = null;",
    "right" : "File selectedFile = null;",
    "info" : "VariableDeclarationStatement[201235-201260]:VariableDeclarationStatement[201235-201260]"
  }, {
    "left" : "if (platform == MACOSX && useNativeSelect != false)",
    "right" : "if (platform == MACOSX && useNativeSelect != false)",
    "info" : "IfStatement[201270-202305]:IfStatement[201270-202305]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[201322-201807]:Block[201322-201807]"
  }, {
    "left" : "FileDialog fileDialog =\n            new FileDialog(parentFrame, prompt, FileDialog.LOAD);",
    "right" : "FileDialog fileDialog =\n            new FileDialog(parentFrame, prompt, FileDialog.LOAD);",
    "info" : "VariableDeclarationStatement[201334-201423]:VariableDeclarationStatement[201334-201423]"
  }, {
    "left" : "System.setProperty(\"apple.awt.fileDialogForDirectories\", \"true\");",
    "right" : "System.setProperty(\"apple.awt.fileDialogForDirectories\", \"true\");",
    "info" : "ExpressionStatement[201434-201499]:ExpressionStatement[201434-201499]"
  }, {
    "left" : "fileDialog.setVisible(true);",
    "right" : "fileDialog.setVisible(true);",
    "info" : "ExpressionStatement[201510-201538]:ExpressionStatement[201510-201538]"
  }, {
    "left" : "System.setProperty(\"apple.awt.fileDialogForDirectories\", \"false\");",
    "right" : "System.setProperty(\"apple.awt.fileDialogForDirectories\", \"false\");",
    "info" : "ExpressionStatement[201549-201615]:ExpressionStatement[201549-201615]"
  }, {
    "left" : "String filename = fileDialog.getFile();",
    "right" : "String filename = fileDialog.getFile();",
    "info" : "VariableDeclarationStatement[201626-201665]:VariableDeclarationStatement[201626-201665]"
  }, {
    "left" : "if (filename != null)",
    "right" : "if (filename != null)",
    "info" : "IfStatement[201676-201797]:IfStatement[201676-201797]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[201698-201797]:Block[201698-201797]"
  }, {
    "left" : "selectedFile = new File(fileDialog.getDirectory(), fileDialog.getFile());",
    "right" : "selectedFile = new File(fileDialog.getDirectory(), fileDialog.getFile());",
    "info" : "ExpressionStatement[201712-201785]:ExpressionStatement[201712-201785]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[201813-202305]:Block[201813-202305]"
  }, {
    "left" : "JFileChooser fileChooser = new JFileChooser();",
    "right" : "JFileChooser fileChooser = new JFileChooser();",
    "info" : "VariableDeclarationStatement[201825-201871]:VariableDeclarationStatement[201825-201871]"
  }, {
    "left" : "fileChooser.setDialogTitle(prompt);",
    "right" : "fileChooser.setDialogTitle(prompt);",
    "info" : "ExpressionStatement[201882-201917]:ExpressionStatement[201882-201917]"
  }, {
    "left" : "fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);",
    "right" : "fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);",
    "info" : "ExpressionStatement[201928-201992]:ExpressionStatement[201928-201992]"
  }, {
    "left" : "if (defaultSelection != null)",
    "right" : "if (defaultSelection != null)",
    "info" : "IfStatement[202003-202105]:IfStatement[202003-202105]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[202033-202105]:Block[202033-202105]"
  }, {
    "left" : "fileChooser.setSelectedFile(defaultSelection);",
    "right" : "fileChooser.setSelectedFile(defaultSelection);",
    "info" : "ExpressionStatement[202047-202093]:ExpressionStatement[202047-202093]"
  }, {
    "left" : "int result = fileChooser.showOpenDialog(parentFrame);",
    "right" : "int result = fileChooser.showOpenDialog(parentFrame);",
    "info" : "VariableDeclarationStatement[202117-202170]:VariableDeclarationStatement[202117-202170]"
  }, {
    "left" : "if (result == JFileChooser.APPROVE_OPTION)",
    "right" : "if (result == JFileChooser.APPROVE_OPTION)",
    "info" : "IfStatement[202181-202295]:IfStatement[202181-202295]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[202224-202295]:Block[202224-202295]"
  }, {
    "left" : "selectedFile = fileChooser.getSelectedFile();",
    "right" : "selectedFile = fileChooser.getSelectedFile();",
    "info" : "ExpressionStatement[202238-202283]:ExpressionStatement[202238-202283]"
  }, {
    "left" : "selectCallback(selectedFile, callbackMethod, callbackObject);",
    "right" : "selectCallback(selectedFile, callbackMethod, callbackObject);",
    "info" : "ExpressionStatement[202314-202375]:ExpressionStatement[202314-202375]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[202400-202406]:Modifier[202400-202406]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[202407-202414]:Modifier[202407-202414]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[202415-202419]:PrimitiveType[202415-202419]"
  }, {
    "left" : "File selectedFile",
    "right" : "File selectedFile",
    "info" : "SingleVariableDeclaration[202435-202452]:SingleVariableDeclaration[202435-202452]"
  }, {
    "left" : "String callbackMethod",
    "right" : "String callbackMethod",
    "info" : "SingleVariableDeclaration[202491-202512]:SingleVariableDeclaration[202491-202512]"
  }, {
    "left" : "Object callbackObject",
    "right" : "Object callbackObject",
    "info" : "SingleVariableDeclaration[202551-202572]:SingleVariableDeclaration[202551-202572]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[202574-203128]:Block[202574-203128]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[202580-203124]:TryStatement[202580-203124]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[202584-202829]:Block[202584-202829]"
  }, {
    "left" : "Class<?> callbackClass = callbackObject.getClass();",
    "right" : "Class<?> callbackClass = callbackObject.getClass();",
    "info" : "VariableDeclarationStatement[202592-202643]:VariableDeclarationStatement[202592-202643]"
  }, {
    "left" : "Method selectMethod =\n        callbackClass.getMethod(callbackMethod, new Class[] { File.class });",
    "right" : "Method selectMethod =\n        callbackClass.getMethod(callbackMethod, new Class[] { File.class });",
    "info" : "VariableDeclarationStatement[202650-202748]:VariableDeclarationStatement[202650-202748]"
  }, {
    "left" : "selectMethod.invoke(callbackObject, new Object[] { selectedFile });",
    "right" : "selectMethod.invoke(callbackObject, new Object[] { selectedFile });",
    "info" : "ExpressionStatement[202755-202822]:ExpressionStatement[202755-202822]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[202865-202937]:Block[202865-202937]"
  }, {
    "left" : "System.err.println(callbackMethod + \"() must be public\");",
    "right" : "System.err.println(callbackMethod + \"() must be public\");",
    "info" : "ExpressionStatement[202873-202930]:ExpressionStatement[202873-202930]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[202976-203013]:Block[202976-203013]"
  }, {
    "left" : "ite.printStackTrace();",
    "right" : "ite.printStackTrace();",
    "info" : "ExpressionStatement[202984-203006]:ExpressionStatement[202984-203006]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[203049-203124]:Block[203049-203124]"
  }, {
    "left" : "System.err.println(callbackMethod + \"() could not be found\");",
    "right" : "System.err.println(callbackMethod + \"() could not be found\");",
    "info" : "ExpressionStatement[203057-203118]:ExpressionStatement[203057-203118]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[203393-203399]:Modifier[203393-203399]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[203400-203406]:Modifier[203400-203406]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[203407-203413]:SimpleType[203407-203413]"
  }, {
    "left" : "String filename",
    "right" : "String filename",
    "info" : "SingleVariableDeclaration[203429-203444]:SingleVariableDeclaration[203429-203444]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[203446-203850]:Block[203446-203850]"
  }, {
    "left" : "if (filename.toLowerCase().endsWith(\".gz\"))",
    "right" : "if (filename.toLowerCase().endsWith(\".gz\"))",
    "info" : "IfStatement[203576-203690]:IfStatement[203576-203690]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[203620-203690]:Block[203620-203690]"
  }, {
    "left" : "filename = filename.substring(0, filename.length() - 3);",
    "right" : "filename = filename.substring(0, filename.length() - 3);",
    "info" : "ExpressionStatement[203628-203684]:ExpressionStatement[203628-203684]"
  }, {
    "left" : "int dotIndex = filename.lastIndexOf('.');",
    "right" : "int dotIndex = filename.lastIndexOf('.');",
    "info" : "VariableDeclarationStatement[203695-203736]:VariableDeclarationStatement[203695-203736]"
  }, {
    "left" : "if (dotIndex != -1)",
    "right" : "if (dotIndex != -1)",
    "info" : "IfStatement[203741-203829]:IfStatement[203741-203829]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[203761-203829]:Block[203761-203829]"
  }, {
    "left" : "return filename.substring(dotIndex + 1).toLowerCase();",
    "right" : "return filename.substring(dotIndex + 1).toLowerCase();",
    "info" : "ReturnStatement[203769-203823]:ReturnStatement[203769-203823]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[203834-203846]:ReturnStatement[203834-203846]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[204689-204695]:Modifier[204689-204695]"
  }, {
    "left" : "BufferedReader",
    "right" : "BufferedReader",
    "info" : "SimpleType[204696-204710]:SimpleType[204696-204710]"
  }, {
    "left" : "String filename",
    "right" : "String filename",
    "info" : "SingleVariableDeclaration[204724-204739]:SingleVariableDeclaration[204724-204739]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[204741-204943]:Block[204741-204943]"
  }, {
    "left" : "InputStream is = createInput(filename);",
    "right" : "InputStream is = createInput(filename);",
    "info" : "VariableDeclarationStatement[204747-204786]:VariableDeclarationStatement[204747-204786]"
  }, {
    "left" : "if (is == null)",
    "right" : "if (is == null)",
    "info" : "IfStatement[204791-204910]:IfStatement[204791-204910]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[204807-204910]:Block[204807-204910]"
  }, {
    "left" : "System.err.println(filename + \" does not exist or could not be read\");",
    "right" : "System.err.println(filename + \" does not exist or could not be read\");",
    "info" : "ExpressionStatement[204815-204885]:ExpressionStatement[204815-204885]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[204892-204904]:ReturnStatement[204892-204904]"
  }, {
    "left" : "return createReader(is);",
    "right" : "return createReader(is);",
    "info" : "ReturnStatement[204915-204939]:ReturnStatement[204915-204939]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[204975-204981]:Modifier[204975-204981]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[204982-204988]:Modifier[204982-204988]"
  }, {
    "left" : "BufferedReader",
    "right" : "BufferedReader",
    "info" : "SimpleType[204989-205003]:SimpleType[204989-205003]"
  }, {
    "left" : "File file",
    "right" : "File file",
    "info" : "SingleVariableDeclaration[205017-205026]:SingleVariableDeclaration[205017-205026]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[205028-205373]:Block[205028-205373]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[205034-205369]:TryStatement[205034-205369]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[205038-205231]:Block[205038-205231]"
  }, {
    "left" : "InputStream is = new FileInputStream(file);",
    "right" : "InputStream is = new FileInputStream(file);",
    "info" : "VariableDeclarationStatement[205046-205089]:VariableDeclarationStatement[205046-205089]"
  }, {
    "left" : "if (file.getName().toLowerCase().endsWith(\".gz\"))",
    "right" : "if (file.getName().toLowerCase().endsWith(\".gz\"))",
    "info" : "IfStatement[205096-205193]:IfStatement[205096-205193]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[205146-205193]:Block[205146-205193]"
  }, {
    "left" : "is = new GZIPInputStream(is);",
    "right" : "is = new GZIPInputStream(is);",
    "info" : "ExpressionStatement[205156-205185]:ExpressionStatement[205156-205185]"
  }, {
    "left" : "return createReader(is);",
    "right" : "return createReader(is);",
    "info" : "ReturnStatement[205200-205224]:ReturnStatement[205200-205224]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[205254-205369]:Block[205254-205369]"
  }, {
    "left" : "throw new RuntimeException(e);",
    "right" : "throw new RuntimeException(e);",
    "info" : "ThrowStatement[205333-205363]:ThrowStatement[205333-205363]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[205535-205541]:Modifier[205535-205541]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[205542-205548]:Modifier[205542-205548]"
  }, {
    "left" : "BufferedReader",
    "right" : "BufferedReader",
    "info" : "SimpleType[205549-205563]:SimpleType[205549-205563]"
  }, {
    "left" : "InputStream input",
    "right" : "InputStream input",
    "info" : "SingleVariableDeclaration[205577-205594]:SingleVariableDeclaration[205577-205594]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[205596-205802]:Block[205596-205802]"
  }, {
    "left" : "InputStreamReader isr = null;",
    "right" : "InputStreamReader isr = null;",
    "info" : "VariableDeclarationStatement[205602-205631]:VariableDeclarationStatement[205602-205631]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[205636-205741]:TryStatement[205636-205741]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[205640-205698]:Block[205640-205698]"
  }, {
    "left" : "isr = new InputStreamReader(input, \"UTF-8\");",
    "right" : "isr = new InputStreamReader(input, \"UTF-8\");",
    "info" : "ExpressionStatement[205648-205692]:ExpressionStatement[205648-205692]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[205738-205741]:Block[205738-205741]"
  }, {
    "left" : "return new BufferedReader(isr);",
    "right" : "return new BufferedReader(isr);",
    "info" : "ReturnStatement[205767-205798]:ReturnStatement[205767-205798]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[206605-206611]:Modifier[206605-206611]"
  }, {
    "left" : "PrintWriter",
    "right" : "PrintWriter",
    "info" : "SimpleType[206612-206623]:SimpleType[206612-206623]"
  }, {
    "left" : "String filename",
    "right" : "String filename",
    "info" : "SingleVariableDeclaration[206637-206652]:SingleVariableDeclaration[206637-206652]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[206654-206704]:Block[206654-206704]"
  }, {
    "left" : "return createWriter(saveFile(filename));",
    "right" : "return createWriter(saveFile(filename));",
    "info" : "ReturnStatement[206660-206700]:ReturnStatement[206660-206700]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[206843-206849]:Modifier[206843-206849]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[206850-206856]:Modifier[206850-206856]"
  }, {
    "left" : "PrintWriter",
    "right" : "PrintWriter",
    "info" : "SimpleType[206857-206868]:SimpleType[206857-206868]"
  }, {
    "left" : "File file",
    "right" : "File file",
    "info" : "SingleVariableDeclaration[206882-206891]:SingleVariableDeclaration[206882-206891]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[206893-207444]:Block[206893-207444]"
  }, {
    "left" : "if (file == null)",
    "right" : "if (file == null)",
    "info" : "IfStatement[206899-207000]:IfStatement[206899-207000]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[206917-207000]:Block[206917-207000]"
  }, {
    "left" : "throw new RuntimeException(\"File passed to createWriter() was null\");",
    "right" : "throw new RuntimeException(\"File passed to createWriter() was null\");",
    "info" : "ThrowStatement[206925-206994]:ThrowStatement[206925-206994]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[207005-207440]:TryStatement[207005-207440]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[207009-207284]:Block[207009-207284]"
  }, {
    "left" : "createPath(file);",
    "right" : "createPath(file);",
    "info" : "ExpressionStatement[207017-207034]:ExpressionStatement[207017-207034]"
  }, {
    "left" : "OutputStream output = new FileOutputStream(file);",
    "right" : "OutputStream output = new FileOutputStream(file);",
    "info" : "VariableDeclarationStatement[207080-207129]:VariableDeclarationStatement[207080-207129]"
  }, {
    "left" : "if (file.getName().toLowerCase().endsWith(\".gz\"))",
    "right" : "if (file.getName().toLowerCase().endsWith(\".gz\"))",
    "info" : "IfStatement[207136-207242]:IfStatement[207136-207242]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[207186-207242]:Block[207186-207242]"
  }, {
    "left" : "output = new GZIPOutputStream(output);",
    "right" : "output = new GZIPOutputStream(output);",
    "info" : "ExpressionStatement[207196-207234]:ExpressionStatement[207196-207234]"
  }, {
    "left" : "return createWriter(output);",
    "right" : "return createWriter(output);",
    "info" : "ReturnStatement[207249-207277]:ReturnStatement[207249-207277]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[207305-207440]:Block[207305-207440]"
  }, {
    "left" : "throw new RuntimeException(\"Couldn't create a writer for \" +\n                                 file.getAbsolutePath(), e);",
    "right" : "throw new RuntimeException(\"Couldn't create a writer for \" +\n                                 file.getAbsolutePath(), e);",
    "info" : "ThrowStatement[207313-207434]:ThrowStatement[207313-207434]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[207617-207623]:Modifier[207617-207623]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[207624-207630]:Modifier[207624-207630]"
  }, {
    "left" : "PrintWriter",
    "right" : "PrintWriter",
    "info" : "SimpleType[207631-207642]:SimpleType[207631-207642]"
  }, {
    "left" : "OutputStream output",
    "right" : "OutputStream output",
    "info" : "SingleVariableDeclaration[207656-207675]:SingleVariableDeclaration[207656-207675]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[207677-207956]:Block[207677-207956]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[207683-207914]:TryStatement[207683-207914]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[207687-207871]:Block[207687-207871]"
  }, {
    "left" : "BufferedOutputStream bos = new BufferedOutputStream(output, 8192);",
    "right" : "BufferedOutputStream bos = new BufferedOutputStream(output, 8192);",
    "info" : "VariableDeclarationStatement[207695-207761]:VariableDeclarationStatement[207695-207761]"
  }, {
    "left" : "OutputStreamWriter osw = new OutputStreamWriter(bos, \"UTF-8\");",
    "right" : "OutputStreamWriter osw = new OutputStreamWriter(bos, \"UTF-8\");",
    "info" : "VariableDeclarationStatement[207768-207830]:VariableDeclarationStatement[207768-207830]"
  }, {
    "left" : "return new PrintWriter(osw);",
    "right" : "return new PrintWriter(osw);",
    "info" : "ReturnStatement[207837-207865]:ReturnStatement[207837-207865]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[207911-207914]:Block[207911-207914]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[207940-207952]:ReturnStatement[207940-207952]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[211490-211496]:Modifier[211490-211496]"
  }, {
    "left" : "InputStream",
    "right" : "InputStream",
    "info" : "SimpleType[211497-211508]:SimpleType[211497-211508]"
  }, {
    "left" : "String filename",
    "right" : "String filename",
    "info" : "SingleVariableDeclaration[211521-211536]:SingleVariableDeclaration[211521-211536]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[211538-211900]:Block[211538-211900]"
  }, {
    "left" : "InputStream input = createInputRaw(filename);",
    "right" : "InputStream input = createInputRaw(filename);",
    "info" : "VariableDeclarationStatement[211544-211589]:VariableDeclarationStatement[211544-211589]"
  }, {
    "left" : "final String lower = filename.toLowerCase();",
    "right" : "final String lower = filename.toLowerCase();",
    "info" : "VariableDeclarationStatement[211594-211638]:VariableDeclarationStatement[211594-211638]"
  }, {
    "left" : "if ((input != null) &&\n        (lower.endsWith(\".gz\") || lower.endsWith(\".svgz\")))",
    "right" : "if ((input != null) &&\n        (lower.endsWith(\".gz\") || lower.endsWith(\".svgz\")))",
    "info" : "IfStatement[211643-211878]:IfStatement[211643-211878]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[211726-211878]:Block[211726-211878]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[211734-211872]:TryStatement[211734-211872]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[211738-211790]:Block[211738-211790]"
  }, {
    "left" : "return new GZIPInputStream(input);",
    "right" : "return new GZIPInputStream(input);",
    "info" : "ReturnStatement[211748-211782]:ReturnStatement[211748-211782]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[211813-211872]:Block[211813-211872]"
  }, {
    "left" : "e.printStackTrace();",
    "right" : "e.printStackTrace();",
    "info" : "ExpressionStatement[211823-211843]:ExpressionStatement[211823-211843]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[211852-211864]:ReturnStatement[211852-211864]"
  }, {
    "left" : "return input;",
    "right" : "return input;",
    "info" : "ReturnStatement[211883-211896]:ReturnStatement[211883-211896]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[211978-211984]:Modifier[211978-211984]"
  }, {
    "left" : "InputStream",
    "right" : "InputStream",
    "info" : "SimpleType[211985-211996]:SimpleType[211985-211996]"
  }, {
    "left" : "String filename",
    "right" : "String filename",
    "info" : "SingleVariableDeclaration[212012-212027]:SingleVariableDeclaration[212012-212027]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[212029-217849]:Block[212029-217849]"
  }, {
    "left" : "if (filename == null)",
    "right" : "if (filename == null)",
    "info" : "IfStatement[212035-212069]:IfStatement[212035-212069]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[212057-212069]:ReturnStatement[212057-212069]"
  }, {
    "left" : "if (filename.length() == 0)",
    "right" : "if (filename.length() == 0)",
    "info" : "IfStatement[212075-212263]:IfStatement[212075-212263]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[212103-212263]:Block[212103-212263]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[212245-212257]:ReturnStatement[212245-212257]"
  }, {
    "left" : "if (filename.contains(\":\"))",
    "right" : "if (filename.contains(\":\"))",
    "info" : "IfStatement[212421-213778]:IfStatement[212421-213778]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[212449-213778]:Block[212449-213778]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[212486-213772]:TryStatement[212486-213772]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[212490-213215]:Block[212490-213215]"
  }, {
    "left" : "URL url = new URL(filename);",
    "right" : "URL url = new URL(filename);",
    "info" : "VariableDeclarationStatement[212500-212528]:VariableDeclarationStatement[212500-212528]"
  }, {
    "left" : "URLConnection conn = url.openConnection();",
    "right" : "URLConnection conn = url.openConnection();",
    "info" : "VariableDeclarationStatement[212537-212579]:VariableDeclarationStatement[212537-212579]"
  }, {
    "left" : "HttpURLConnection httpConn = (HttpURLConnection) conn;",
    "right" : "HttpURLConnection httpConn = (HttpURLConnection) conn;",
    "info" : "VariableDeclarationStatement[212588-212642]:VariableDeclarationStatement[212588-212642]"
  }, {
    "left" : "httpConn.setInstanceFollowRedirects(true);",
    "right" : "httpConn.setInstanceFollowRedirects(true);",
    "info" : "ExpressionStatement[212708-212750]:ExpressionStatement[212708-212750]"
  }, {
    "left" : "int response = httpConn.getResponseCode();",
    "right" : "int response = httpConn.getResponseCode();",
    "info" : "VariableDeclarationStatement[212759-212801]:VariableDeclarationStatement[212759-212801]"
  }, {
    "left" : "if (response >= 300 && response < 400)",
    "right" : "if (response >= 300 && response < 400)",
    "info" : "IfStatement[213004-213168]:IfStatement[213004-213168]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[213043-213168]:Block[213043-213168]"
  }, {
    "left" : "String newLocation = httpConn.getHeaderField(\"Location\");",
    "right" : "String newLocation = httpConn.getHeaderField(\"Location\");",
    "info" : "VariableDeclarationStatement[213055-213112]:VariableDeclarationStatement[213055-213112]"
  }, {
    "left" : "return createInputRaw(newLocation);",
    "right" : "return createInputRaw(newLocation);",
    "info" : "ReturnStatement[213123-213158]:ReturnStatement[213123-213158]"
  }, {
    "left" : "return conn.getInputStream();",
    "right" : "return conn.getInputStream();",
    "info" : "ReturnStatement[213177-213206]:ReturnStatement[213177-213206]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[213251-213295]:Block[213251-213295]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[213331-213477]:Block[213331-213477]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[213500-213772]:Block[213500-213772]"
  }, {
    "left" : "e.printStackTrace();",
    "right" : "e.printStackTrace();",
    "info" : "ExpressionStatement[213571-213591]:ExpressionStatement[213571-213591]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[213672-213684]:ReturnStatement[213672-213684]"
  }, {
    "left" : "InputStream stream = null;",
    "right" : "InputStream stream = null;",
    "info" : "VariableDeclarationStatement[213784-213810]:VariableDeclarationStatement[213784-213810]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[214019-215670]:TryStatement[214019-215670]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[214023-215605]:Block[214023-215605]"
  }, {
    "left" : "File file = new File(dataPath(filename));",
    "right" : "File file = new File(dataPath(filename));",
    "info" : "VariableDeclarationStatement[214173-214214]:VariableDeclarationStatement[214173-214214]"
  }, {
    "left" : "if (!file.exists())",
    "right" : "if (!file.exists())",
    "info" : "IfStatement[214221-214341]:IfStatement[214221-214341]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[214241-214341]:Block[214241-214341]"
  }, {
    "left" : "file = sketchFile(filename);",
    "right" : "file = sketchFile(filename);",
    "info" : "ExpressionStatement[214305-214333]:ExpressionStatement[214305-214333]"
  }, {
    "left" : "if (file.isDirectory())",
    "right" : "if (file.isDirectory())",
    "info" : "IfStatement[214349-214403]:IfStatement[214349-214403]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[214373-214403]:Block[214373-214403]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[214383-214395]:ReturnStatement[214383-214395]"
  }, {
    "left" : "if (file.exists())",
    "right" : "if (file.exists())",
    "info" : "IfStatement[214410-215338]:IfStatement[214410-215338]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[214429-215338]:Block[214429-215338]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[214439-215330]:TryStatement[214439-215330]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[214443-215304]:Block[214443-215304]"
  }, {
    "left" : "String filePath = file.getCanonicalPath();",
    "right" : "String filePath = file.getCanonicalPath();",
    "info" : "VariableDeclarationStatement[214498-214540]:VariableDeclarationStatement[214498-214540]"
  }, {
    "left" : "String filenameActual = new File(filePath).getName();",
    "right" : "String filenameActual = new File(filePath).getName();",
    "info" : "VariableDeclarationStatement[214551-214604]:VariableDeclarationStatement[214551-214604]"
  }, {
    "left" : "String filenameShort = new File(filename).getName();",
    "right" : "String filenameShort = new File(filename).getName();",
    "info" : "VariableDeclarationStatement[214684-214736]:VariableDeclarationStatement[214684-214736]"
  }, {
    "left" : "if (!filenameActual.equals(filenameShort))",
    "right" : "if (!filenameActual.equals(filenameShort))",
    "info" : "IfStatement[214972-215294]:IfStatement[214972-215294]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[215015-215294]:Block[215015-215294]"
  }, {
    "left" : "throw new RuntimeException(\"This file is named \" +\n                                       filenameActual + \" not \" +\n                                       filename + \". Rename the file \" +\n                                       \"or change your code.\");",
    "right" : "throw new RuntimeException(\"This file is named \" +\n                                       filenameActual + \" not \" +\n                                       filename + \". Rename the file \" +\n                                       \"or change your code.\");",
    "info" : "ThrowStatement[215029-215282]:ThrowStatement[215029-215282]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[215327-215330]:Block[215327-215330]"
  }, {
    "left" : "stream = new FileInputStream(file);",
    "right" : "stream = new FileInputStream(file);",
    "info" : "ExpressionStatement[215400-215435]:ExpressionStatement[215400-215435]"
  }, {
    "left" : "if (stream != null)",
    "right" : "if (stream != null)",
    "info" : "IfStatement[215442-215476]:IfStatement[215442-215476]"
  }, {
    "left" : "return stream;",
    "right" : "return stream;",
    "info" : "ReturnStatement[215462-215476]:ReturnStatement[215462-215476]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[215630-215637]:Block[215630-215637]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[215667-215670]:Block[215667-215670]"
  }, {
    "left" : "ClassLoader cl = getClass().getClassLoader();",
    "right" : "ClassLoader cl = getClass().getClassLoader();",
    "info" : "VariableDeclarationStatement[215934-215979]:VariableDeclarationStatement[215934-215979]"
  }, {
    "left" : "stream = cl.getResourceAsStream(\"data/\" + filename);",
    "right" : "stream = cl.getResourceAsStream(\"data/\" + filename);",
    "info" : "ExpressionStatement[216108-216160]:ExpressionStatement[216108-216160]"
  }, {
    "left" : "if (stream != null)",
    "right" : "if (stream != null)",
    "info" : "IfStatement[216165-216605]:IfStatement[216165-216605]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[216185-216605]:Block[216185-216605]"
  }, {
    "left" : "String cn = stream.getClass().getName();",
    "right" : "String cn = stream.getClass().getName();",
    "info" : "VariableDeclarationStatement[216193-216233]:VariableDeclarationStatement[216193-216233]"
  }, {
    "left" : "if (!cn.equals(\"sun.plugin.cache.EmptyInputStream\"))",
    "right" : "if (!cn.equals(\"sun.plugin.cache.EmptyInputStream\"))",
    "info" : "IfStatement[216514-216599]:IfStatement[216514-216599]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[216567-216599]:Block[216567-216599]"
  }, {
    "left" : "return stream;",
    "right" : "return stream;",
    "info" : "ReturnStatement[216577-216591]:ReturnStatement[216577-216591]"
  }, {
    "left" : "stream = cl.getResourceAsStream(filename);",
    "right" : "stream = cl.getResourceAsStream(filename);",
    "info" : "ExpressionStatement[216807-216849]:ExpressionStatement[216807-216849]"
  }, {
    "left" : "if (stream != null)",
    "right" : "if (stream != null)",
    "info" : "IfStatement[216854-217020]:IfStatement[216854-217020]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[216874-217020]:Block[216874-217020]"
  }, {
    "left" : "String cn = stream.getClass().getName();",
    "right" : "String cn = stream.getClass().getName();",
    "info" : "VariableDeclarationStatement[216882-216922]:VariableDeclarationStatement[216882-216922]"
  }, {
    "left" : "if (!cn.equals(\"sun.plugin.cache.EmptyInputStream\"))",
    "right" : "if (!cn.equals(\"sun.plugin.cache.EmptyInputStream\"))",
    "info" : "IfStatement[216929-217014]:IfStatement[216929-217014]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[216982-217014]:Block[216982-217014]"
  }, {
    "left" : "return stream;",
    "right" : "return stream;",
    "info" : "ReturnStatement[216992-217006]:ReturnStatement[216992-217006]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[217026-217827]:TryStatement[217026-217827]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[217030-217740]:Block[217030-217740]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[217150-217715]:TryStatement[217150-217715]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[217154-217682]:Block[217154-217682]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[217211-217358]:TryStatement[217211-217358]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[217215-217331]:Block[217215-217331]"
  }, {
    "left" : "stream = new FileInputStream(dataPath(filename));",
    "right" : "stream = new FileInputStream(dataPath(filename));",
    "info" : "ExpressionStatement[217227-217276]:ExpressionStatement[217227-217276]"
  }, {
    "left" : "if (stream != null)",
    "right" : "if (stream != null)",
    "info" : "IfStatement[217287-217321]:IfStatement[217287-217321]"
  }, {
    "left" : "return stream;",
    "right" : "return stream;",
    "info" : "ReturnStatement[217307-217321]:ReturnStatement[217307-217321]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[217355-217358]:Block[217355-217358]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[217368-217514]:TryStatement[217368-217514]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[217372-217490]:Block[217372-217490]"
  }, {
    "left" : "stream = new FileInputStream(sketchPath(filename));",
    "right" : "stream = new FileInputStream(sketchPath(filename));",
    "info" : "ExpressionStatement[217384-217435]:ExpressionStatement[217384-217435]"
  }, {
    "left" : "if (stream != null)",
    "right" : "if (stream != null)",
    "info" : "IfStatement[217446-217480]:IfStatement[217446-217480]"
  }, {
    "left" : "return stream;",
    "right" : "return stream;",
    "info" : "ReturnStatement[217466-217480]:ReturnStatement[217466-217480]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[217511-217514]:Block[217511-217514]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[217536-217673]:TryStatement[217536-217673]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[217540-217646]:Block[217540-217646]"
  }, {
    "left" : "stream = new FileInputStream(filename);",
    "right" : "stream = new FileInputStream(filename);",
    "info" : "ExpressionStatement[217552-217591]:ExpressionStatement[217552-217591]"
  }, {
    "left" : "if (stream != null)",
    "right" : "if (stream != null)",
    "info" : "IfStatement[217602-217636]:IfStatement[217602-217636]"
  }, {
    "left" : "return stream;",
    "right" : "return stream;",
    "info" : "ReturnStatement[217622-217636]:ReturnStatement[217622-217636]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[217670-217673]:Block[217670-217673]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[217712-217715]:Block[217712-217715]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[217761-217827]:Block[217761-217827]"
  }, {
    "left" : "e.printStackTrace();",
    "right" : "e.printStackTrace();",
    "info" : "ExpressionStatement[217801-217821]:ExpressionStatement[217801-217821]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[217833-217845]:ReturnStatement[217833-217845]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[217880-217886]:Modifier[217880-217886]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[217887-217893]:Modifier[217887-217893]"
  }, {
    "left" : "InputStream",
    "right" : "InputStream",
    "info" : "SimpleType[217894-217905]:SimpleType[217894-217905]"
  }, {
    "left" : "File file",
    "right" : "File file",
    "info" : "SingleVariableDeclaration[217918-217927]:SingleVariableDeclaration[217918-217927]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[217929-218387]:Block[217929-218387]"
  }, {
    "left" : "if (file == null)",
    "right" : "if (file == null)",
    "info" : "IfStatement[217935-218043]:IfStatement[217935-218043]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[217953-218043]:Block[217953-218043]"
  }, {
    "left" : "throw new IllegalArgumentException(\"File passed to createInput() was null\");",
    "right" : "throw new IllegalArgumentException(\"File passed to createInput() was null\");",
    "info" : "ThrowStatement[217961-218037]:ThrowStatement[217961-218037]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[218048-218383]:TryStatement[218048-218383]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[218052-218242]:Block[218052-218242]"
  }, {
    "left" : "InputStream input = new FileInputStream(file);",
    "right" : "InputStream input = new FileInputStream(file);",
    "info" : "VariableDeclarationStatement[218060-218106]:VariableDeclarationStatement[218060-218106]"
  }, {
    "left" : "if (file.getName().toLowerCase().endsWith(\".gz\"))",
    "right" : "if (file.getName().toLowerCase().endsWith(\".gz\"))",
    "info" : "IfStatement[218113-218215]:IfStatement[218113-218215]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[218163-218215]:Block[218163-218215]"
  }, {
    "left" : "return new GZIPInputStream(input);",
    "right" : "return new GZIPInputStream(input);",
    "info" : "ReturnStatement[218173-218207]:ReturnStatement[218173-218207]"
  }, {
    "left" : "return input;",
    "right" : "return input;",
    "info" : "ReturnStatement[218222-218235]:ReturnStatement[218222-218235]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[218265-218383]:Block[218265-218383]"
  }, {
    "left" : "System.err.println(\"Could not createInput() for \" + file);",
    "right" : "System.err.println(\"Could not createInput() for \" + file);",
    "info" : "ExpressionStatement[218273-218331]:ExpressionStatement[218273-218331]"
  }, {
    "left" : "e.printStackTrace();",
    "right" : "e.printStackTrace();",
    "info" : "ExpressionStatement[218338-218358]:ExpressionStatement[218338-218358]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[218365-218377]:ReturnStatement[218365-218377]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[219226-219232]:Modifier[219226-219232]"
  }, {
    "left" : "byte[]",
    "right" : "byte[]",
    "info" : "ArrayType[219233-219239]:ArrayType[219233-219239]"
  }, {
    "left" : "String filename",
    "right" : "String filename",
    "info" : "SingleVariableDeclaration[219250-219265]:SingleVariableDeclaration[219250-219265]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[219267-219806]:Block[219267-219806]"
  }, {
    "left" : "InputStream is = createInput(filename);",
    "right" : "InputStream is = createInput(filename);",
    "info" : "VariableDeclarationStatement[219273-219312]:VariableDeclarationStatement[219273-219312]"
  }, {
    "left" : "if (is != null)",
    "right" : "if (is != null)",
    "info" : "IfStatement[219317-219524]:IfStatement[219317-219524]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[219333-219524]:Block[219333-219524]"
  }, {
    "left" : "byte[] outgoing = loadBytes(is);",
    "right" : "byte[] outgoing = loadBytes(is);",
    "info" : "VariableDeclarationStatement[219341-219373]:VariableDeclarationStatement[219341-219373]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[219380-219495]:TryStatement[219380-219495]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[219384-219413]:Block[219384-219413]"
  }, {
    "left" : "is.close();",
    "right" : "is.close();",
    "info" : "ExpressionStatement[219394-219405]:ExpressionStatement[219394-219405]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[219436-219495]:Block[219436-219495]"
  }, {
    "left" : "e.printStackTrace();",
    "right" : "e.printStackTrace();",
    "info" : "ExpressionStatement[219446-219466]:ExpressionStatement[219446-219466]"
  }, {
    "left" : "return outgoing;",
    "right" : "return outgoing;",
    "info" : "ReturnStatement[219502-219518]:ReturnStatement[219502-219518]"
  }, {
    "left" : "System.err.println(\"The file \\\"\" + filename + \"\\\" \" +\n                       \"is missing or inaccessible, make sure \" +\n                       \"the URL is valid or that the file has been \" +\n                       \"added to your sketch and is readable.\");",
    "right" : "System.err.println(\"The file \\\"\" + filename + \"\\\" \" +\n                       \"is missing or inaccessible, make sure \" +\n                       \"the URL is valid or that the file has been \" +\n                       \"added to your sketch and is readable.\");",
    "info" : "ExpressionStatement[219530-219785]:ExpressionStatement[219530-219785]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[219790-219802]:ReturnStatement[219790-219802]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[219837-219843]:Modifier[219837-219843]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[219844-219850]:Modifier[219844-219850]"
  }, {
    "left" : "byte[]",
    "right" : "byte[]",
    "info" : "ArrayType[219851-219857]:ArrayType[219851-219857]"
  }, {
    "left" : "InputStream input",
    "right" : "InputStream input",
    "info" : "SingleVariableDeclaration[219868-219885]:SingleVariableDeclaration[219868-219885]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[219887-220318]:Block[219887-220318]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[219893-220297]:TryStatement[219893-220297]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[219897-220169]:Block[219897-220169]"
  }, {
    "left" : "BufferedInputStream bis = new BufferedInputStream(input);",
    "right" : "BufferedInputStream bis = new BufferedInputStream(input);",
    "info" : "VariableDeclarationStatement[219905-219962]:VariableDeclarationStatement[219905-219962]"
  }, {
    "left" : "ByteArrayOutputStream out = new ByteArrayOutputStream();",
    "right" : "ByteArrayOutputStream out = new ByteArrayOutputStream();",
    "info" : "VariableDeclarationStatement[219969-220025]:VariableDeclarationStatement[219969-220025]"
  }, {
    "left" : "int c = bis.read();",
    "right" : "int c = bis.read();",
    "info" : "VariableDeclarationStatement[220033-220052]:VariableDeclarationStatement[220033-220052]"
  }, {
    "left" : "while (c != -1)",
    "right" : "while (c != -1)",
    "info" : "WhileStatement[220059-220130]:WhileStatement[220059-220130]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[220075-220130]:Block[220075-220130]"
  }, {
    "left" : "out.write(c);",
    "right" : "out.write(c);",
    "info" : "ExpressionStatement[220085-220098]:ExpressionStatement[220085-220098]"
  }, {
    "left" : "c = bis.read();",
    "right" : "c = bis.read();",
    "info" : "ExpressionStatement[220107-220122]:ExpressionStatement[220107-220122]"
  }, {
    "left" : "return out.toByteArray();",
    "right" : "return out.toByteArray();",
    "info" : "ReturnStatement[220137-220162]:ReturnStatement[220137-220162]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[220192-220297]:Block[220192-220297]"
  }, {
    "left" : "e.printStackTrace();",
    "right" : "e.printStackTrace();",
    "info" : "ExpressionStatement[220200-220220]:ExpressionStatement[220200-220220]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[220302-220314]:ReturnStatement[220302-220314]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[220349-220355]:Modifier[220349-220355]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[220356-220362]:Modifier[220356-220362]"
  }, {
    "left" : "byte[]",
    "right" : "byte[]",
    "info" : "ArrayType[220363-220369]:ArrayType[220363-220369]"
  }, {
    "left" : "File file",
    "right" : "File file",
    "info" : "SingleVariableDeclaration[220380-220389]:SingleVariableDeclaration[220380-220389]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[220391-220583]:Block[220391-220583]"
  }, {
    "left" : "InputStream is = createInput(file);",
    "right" : "InputStream is = createInput(file);",
    "info" : "VariableDeclarationStatement[220397-220432]:VariableDeclarationStatement[220397-220432]"
  }, {
    "left" : "byte[] byteArr = loadBytes(is);",
    "right" : "byte[] byteArr = loadBytes(is);",
    "info" : "VariableDeclarationStatement[220437-220468]:VariableDeclarationStatement[220437-220468]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[220473-220559]:TryStatement[220473-220559]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[220477-220502]:Block[220477-220502]"
  }, {
    "left" : "is.close();",
    "right" : "is.close();",
    "info" : "ExpressionStatement[220485-220496]:ExpressionStatement[220485-220496]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[220525-220559]:Block[220525-220559]"
  }, {
    "left" : "e.printStackTrace();",
    "right" : "e.printStackTrace();",
    "info" : "ExpressionStatement[220533-220553]:ExpressionStatement[220533-220553]"
  }, {
    "left" : "return byteArr;",
    "right" : "return byteArr;",
    "info" : "ReturnStatement[220564-220579]:ReturnStatement[220564-220579]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[220614-220620]:Modifier[220614-220620]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[220621-220627]:Modifier[220621-220627]"
  }, {
    "left" : "String[]",
    "right" : "String[]",
    "info" : "ArrayType[220628-220636]:ArrayType[220628-220636]"
  }, {
    "left" : "File file",
    "right" : "File file",
    "info" : "SingleVariableDeclaration[220649-220658]:SingleVariableDeclaration[220649-220658]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[220660-220917]:Block[220660-220917]"
  }, {
    "left" : "InputStream is = createInput(file);",
    "right" : "InputStream is = createInput(file);",
    "info" : "VariableDeclarationStatement[220666-220701]:VariableDeclarationStatement[220666-220701]"
  }, {
    "left" : "if (is != null)",
    "right" : "if (is != null)",
    "info" : "IfStatement[220706-220896]:IfStatement[220706-220896]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[220722-220896]:Block[220722-220896]"
  }, {
    "left" : "String[] outgoing = loadStrings(is);",
    "right" : "String[] outgoing = loadStrings(is);",
    "info" : "VariableDeclarationStatement[220730-220766]:VariableDeclarationStatement[220730-220766]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[220773-220867]:TryStatement[220773-220867]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[220777-220806]:Block[220777-220806]"
  }, {
    "left" : "is.close();",
    "right" : "is.close();",
    "info" : "ExpressionStatement[220787-220798]:ExpressionStatement[220787-220798]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[220829-220867]:Block[220829-220867]"
  }, {
    "left" : "e.printStackTrace();",
    "right" : "e.printStackTrace();",
    "info" : "ExpressionStatement[220839-220859]:ExpressionStatement[220839-220859]"
  }, {
    "left" : "return outgoing;",
    "right" : "return outgoing;",
    "info" : "ReturnStatement[220874-220890]:ReturnStatement[220874-220890]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[220901-220913]:ReturnStatement[220901-220913]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[222977-222983]:Modifier[222977-222983]"
  }, {
    "left" : "String[]",
    "right" : "String[]",
    "info" : "ArrayType[222984-222992]:ArrayType[222984-222992]"
  }, {
    "left" : "String filename",
    "right" : "String filename",
    "info" : "SingleVariableDeclaration[223005-223020]:SingleVariableDeclaration[223005-223020]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[223022-223540]:Block[223022-223540]"
  }, {
    "left" : "InputStream is = createInput(filename);",
    "right" : "InputStream is = createInput(filename);",
    "info" : "VariableDeclarationStatement[223028-223067]:VariableDeclarationStatement[223028-223067]"
  }, {
    "left" : "if (is != null)",
    "right" : "if (is != null)",
    "info" : "IfStatement[223072-223258]:IfStatement[223072-223258]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[223088-223258]:Block[223088-223258]"
  }, {
    "left" : "String[] strArr = loadStrings(is);",
    "right" : "String[] strArr = loadStrings(is);",
    "info" : "VariableDeclarationStatement[223096-223130]:VariableDeclarationStatement[223096-223130]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[223137-223231]:TryStatement[223137-223231]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[223141-223170]:Block[223141-223170]"
  }, {
    "left" : "is.close();",
    "right" : "is.close();",
    "info" : "ExpressionStatement[223151-223162]:ExpressionStatement[223151-223162]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[223193-223231]:Block[223193-223231]"
  }, {
    "left" : "e.printStackTrace();",
    "right" : "e.printStackTrace();",
    "info" : "ExpressionStatement[223203-223223]:ExpressionStatement[223203-223223]"
  }, {
    "left" : "return strArr;",
    "right" : "return strArr;",
    "info" : "ReturnStatement[223238-223252]:ReturnStatement[223238-223252]"
  }, {
    "left" : "System.err.println(\"The file \\\"\" + filename + \"\\\" \" +\n                       \"is missing or inaccessible, make sure \" +\n                       \"the URL is valid or that the file has been \" +\n                       \"added to your sketch and is readable.\");",
    "right" : "System.err.println(\"The file \\\"\" + filename + \"\\\" \" +\n                       \"is missing or inaccessible, make sure \" +\n                       \"the URL is valid or that the file has been \" +\n                       \"added to your sketch and is readable.\");",
    "info" : "ExpressionStatement[223264-223519]:ExpressionStatement[223264-223519]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[223524-223536]:ReturnStatement[223524-223536]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[223571-223577]:Modifier[223571-223577]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[223578-223584]:Modifier[223578-223584]"
  }, {
    "left" : "String[]",
    "right" : "String[]",
    "info" : "ArrayType[223585-223593]:ArrayType[223585-223593]"
  }, {
    "left" : "InputStream input",
    "right" : "InputStream input",
    "info" : "SingleVariableDeclaration[223606-223623]:SingleVariableDeclaration[223606-223623]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[223625-223851]:Block[223625-223851]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[223631-223830]:TryStatement[223631-223830]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[223635-223773]:Block[223635-223773]"
  }, {
    "left" : "BufferedReader reader =\n        new BufferedReader(new InputStreamReader(input, \"UTF-8\"));",
    "right" : "BufferedReader reader =\n        new BufferedReader(new InputStreamReader(input, \"UTF-8\"));",
    "info" : "VariableDeclarationStatement[223643-223733]:VariableDeclarationStatement[223643-223733]"
  }, {
    "left" : "return loadStrings(reader);",
    "right" : "return loadStrings(reader);",
    "info" : "ReturnStatement[223740-223767]:ReturnStatement[223740-223767]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[223796-223830]:Block[223796-223830]"
  }, {
    "left" : "e.printStackTrace();",
    "right" : "e.printStackTrace();",
    "info" : "ExpressionStatement[223804-223824]:ExpressionStatement[223804-223824]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[223835-223847]:ReturnStatement[223835-223847]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[223856-223862]:Modifier[223856-223862]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[223863-223869]:Modifier[223863-223869]"
  }, {
    "left" : "String[]",
    "right" : "String[]",
    "info" : "ArrayType[223870-223878]:ArrayType[223870-223878]"
  }, {
    "left" : "BufferedReader reader",
    "right" : "BufferedReader reader",
    "info" : "SingleVariableDeclaration[223891-223912]:SingleVariableDeclaration[223891-223912]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[223914-224725]:Block[223914-224725]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[223920-224704]:TryStatement[223920-224704]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[223924-224581]:Block[223924-224581]"
  }, {
    "left" : "String lines[] = new String[100];",
    "right" : "String lines[] = new String[100];",
    "info" : "VariableDeclarationStatement[223932-223965]:VariableDeclarationStatement[223932-223965]"
  }, {
    "left" : "int lineCount = 0;",
    "right" : "int lineCount = 0;",
    "info" : "VariableDeclarationStatement[223972-223990]:VariableDeclarationStatement[223972-223990]"
  }, {
    "left" : "String line = null;",
    "right" : "String line = null;",
    "info" : "VariableDeclarationStatement[223997-224016]:VariableDeclarationStatement[223997-224016]"
  }, {
    "left" : "while ((line = reader.readLine()) != null)",
    "right" : "while ((line = reader.readLine()) != null)",
    "info" : "WhileStatement[224023-224297]:WhileStatement[224023-224297]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[224066-224297]:Block[224066-224297]"
  }, {
    "left" : "if (lineCount == lines.length)",
    "right" : "if (lineCount == lines.length)",
    "info" : "IfStatement[224076-224254]:IfStatement[224076-224254]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[224107-224254]:Block[224107-224254]"
  }, {
    "left" : "String temp[] = new String[lineCount << 1];",
    "right" : "String temp[] = new String[lineCount << 1];",
    "info" : "VariableDeclarationStatement[224119-224162]:VariableDeclarationStatement[224119-224162]"
  }, {
    "left" : "System.arraycopy(lines, 0, temp, 0, lineCount);",
    "right" : "System.arraycopy(lines, 0, temp, 0, lineCount);",
    "info" : "ExpressionStatement[224173-224220]:ExpressionStatement[224173-224220]"
  }, {
    "left" : "lines = temp;",
    "right" : "lines = temp;",
    "info" : "ExpressionStatement[224231-224244]:ExpressionStatement[224231-224244]"
  }, {
    "left" : "lines[lineCount++] = line;",
    "right" : "lines[lineCount++] = line;",
    "info" : "ExpressionStatement[224263-224289]:ExpressionStatement[224263-224289]"
  }, {
    "left" : "reader.close();",
    "right" : "reader.close();",
    "info" : "ExpressionStatement[224304-224319]:ExpressionStatement[224304-224319]"
  }, {
    "left" : "if (lineCount == lines.length)",
    "right" : "if (lineCount == lines.length)",
    "info" : "IfStatement[224327-224389]:IfStatement[224327-224389]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[224358-224389]:Block[224358-224389]"
  }, {
    "left" : "return lines;",
    "right" : "return lines;",
    "info" : "ReturnStatement[224368-224381]:ReturnStatement[224368-224381]"
  }, {
    "left" : "String output[] = new String[lineCount];",
    "right" : "String output[] = new String[lineCount];",
    "info" : "VariableDeclarationStatement[224457-224497]:VariableDeclarationStatement[224457-224497]"
  }, {
    "left" : "System.arraycopy(lines, 0, output, 0, lineCount);",
    "right" : "System.arraycopy(lines, 0, output, 0, lineCount);",
    "info" : "ExpressionStatement[224504-224553]:ExpressionStatement[224504-224553]"
  }, {
    "left" : "return output;",
    "right" : "return output;",
    "info" : "ReturnStatement[224560-224574]:ReturnStatement[224560-224574]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[224604-224704]:Block[224604-224704]"
  }, {
    "left" : "e.printStackTrace();",
    "right" : "e.printStackTrace();",
    "info" : "ExpressionStatement[224612-224632]:ExpressionStatement[224612-224632]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[224709-224721]:ReturnStatement[224709-224721]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[225922-225928]:Modifier[225922-225928]"
  }, {
    "left" : "OutputStream",
    "right" : "OutputStream",
    "info" : "SimpleType[225929-225941]:SimpleType[225929-225941]"
  }, {
    "left" : "String filename",
    "right" : "String filename",
    "info" : "SingleVariableDeclaration[225955-225970]:SingleVariableDeclaration[225955-225970]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[225972-226022]:Block[225972-226022]"
  }, {
    "left" : "return createOutput(saveFile(filename));",
    "right" : "return createOutput(saveFile(filename));",
    "info" : "ReturnStatement[225978-226018]:ReturnStatement[225978-226018]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[226053-226059]:Modifier[226053-226059]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[226060-226066]:Modifier[226060-226066]"
  }, {
    "left" : "OutputStream",
    "right" : "OutputStream",
    "info" : "SimpleType[226067-226079]:SimpleType[226067-226079]"
  }, {
    "left" : "File file",
    "right" : "File file",
    "info" : "SingleVariableDeclaration[226093-226102]:SingleVariableDeclaration[226093-226102]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[226104-226437]:Block[226104-226437]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[226110-226416]:TryStatement[226110-226416]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[226114-226359]:Block[226114-226359]"
  }, {
    "left" : "createPath(file);",
    "right" : "createPath(file);",
    "info" : "ExpressionStatement[226122-226139]:ExpressionStatement[226122-226139]"
  }, {
    "left" : "FileOutputStream fos = new FileOutputStream(file);",
    "right" : "FileOutputStream fos = new FileOutputStream(file);",
    "info" : "VariableDeclarationStatement[226176-226226]:VariableDeclarationStatement[226176-226226]"
  }, {
    "left" : "if (file.getName().toLowerCase().endsWith(\".gz\"))",
    "right" : "if (file.getName().toLowerCase().endsWith(\".gz\"))",
    "info" : "IfStatement[226233-226334]:IfStatement[226233-226334]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[226283-226334]:Block[226283-226334]"
  }, {
    "left" : "return new GZIPOutputStream(fos);",
    "right" : "return new GZIPOutputStream(fos);",
    "info" : "ReturnStatement[226293-226326]:ReturnStatement[226293-226326]"
  }, {
    "left" : "return fos;",
    "right" : "return fos;",
    "info" : "ReturnStatement[226341-226352]:ReturnStatement[226341-226352]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[226382-226416]:Block[226382-226416]"
  }, {
    "left" : "e.printStackTrace();",
    "right" : "e.printStackTrace();",
    "info" : "ExpressionStatement[226390-226410]:ExpressionStatement[226390-226410]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[226421-226433]:ReturnStatement[226421-226433]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[227184-227190]:Modifier[227184-227190]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[227191-227198]:PrimitiveType[227191-227198]"
  }, {
    "left" : "String target",
    "right" : "String target",
    "info" : "SingleVariableDeclaration[227210-227223]:SingleVariableDeclaration[227210-227223]"
  }, {
    "left" : "String source",
    "right" : "String source",
    "info" : "SingleVariableDeclaration[227225-227238]:SingleVariableDeclaration[227225-227238]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[227240-227294]:Block[227240-227294]"
  }, {
    "left" : "return saveStream(saveFile(target), source);",
    "right" : "return saveStream(saveFile(target), source);",
    "info" : "ReturnStatement[227246-227290]:ReturnStatement[227246-227290]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[227549-227555]:Modifier[227549-227555]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[227556-227563]:PrimitiveType[227556-227563]"
  }, {
    "left" : "File target",
    "right" : "File target",
    "info" : "SingleVariableDeclaration[227575-227586]:SingleVariableDeclaration[227575-227586]"
  }, {
    "left" : "String source",
    "right" : "String source",
    "info" : "SingleVariableDeclaration[227588-227601]:SingleVariableDeclaration[227588-227601]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[227603-227663]:Block[227603-227663]"
  }, {
    "left" : "return saveStream(target, createInputRaw(source));",
    "right" : "return saveStream(target, createInputRaw(source));",
    "info" : "ReturnStatement[227609-227659]:ReturnStatement[227609-227659]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[227694-227700]:Modifier[227694-227700]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[227701-227708]:PrimitiveType[227701-227708]"
  }, {
    "left" : "String target",
    "right" : "String target",
    "info" : "SingleVariableDeclaration[227720-227733]:SingleVariableDeclaration[227720-227733]"
  }, {
    "left" : "InputStream source",
    "right" : "InputStream source",
    "info" : "SingleVariableDeclaration[227735-227753]:SingleVariableDeclaration[227735-227753]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[227755-227809]:Block[227755-227809]"
  }, {
    "left" : "return saveStream(saveFile(target), source);",
    "right" : "return saveStream(saveFile(target), source);",
    "info" : "ReturnStatement[227761-227805]:ReturnStatement[227761-227805]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[227840-227846]:Modifier[227840-227846]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[227847-227853]:Modifier[227847-227853]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[227854-227861]:PrimitiveType[227854-227861]"
  }, {
    "left" : "File target",
    "right" : "File target",
    "info" : "SingleVariableDeclaration[227873-227884]:SingleVariableDeclaration[227873-227884]"
  }, {
    "left" : "InputStream source",
    "right" : "InputStream source",
    "info" : "SingleVariableDeclaration[227886-227904]:SingleVariableDeclaration[227886-227904]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[227906-228876]:Block[227906-228876]"
  }, {
    "left" : "File tempFile = null;",
    "right" : "File tempFile = null;",
    "info" : "VariableDeclarationStatement[227912-227933]:VariableDeclarationStatement[227912-227933]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[227938-228872]:TryStatement[227938-228872]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[227942-228730]:Block[227942-228730]"
  }, {
    "left" : "File parentDir = target.getParentFile();",
    "right" : "File parentDir = target.getParentFile();",
    "info" : "VariableDeclarationStatement[227950-227990]:VariableDeclarationStatement[227950-227990]"
  }, {
    "left" : "createPath(target);",
    "right" : "createPath(target);",
    "info" : "ExpressionStatement[228062-228081]:ExpressionStatement[228062-228081]"
  }, {
    "left" : "tempFile = File.createTempFile(target.getName(), null, parentDir);",
    "right" : "tempFile = File.createTempFile(target.getName(), null, parentDir);",
    "info" : "ExpressionStatement[228088-228154]:ExpressionStatement[228088-228154]"
  }, {
    "left" : "FileOutputStream targetStream = new FileOutputStream(tempFile);",
    "right" : "FileOutputStream targetStream = new FileOutputStream(tempFile);",
    "info" : "VariableDeclarationStatement[228161-228224]:VariableDeclarationStatement[228161-228224]"
  }, {
    "left" : "saveStream(targetStream, source);",
    "right" : "saveStream(targetStream, source);",
    "info" : "ExpressionStatement[228232-228265]:ExpressionStatement[228232-228265]"
  }, {
    "left" : "targetStream.close();",
    "right" : "targetStream.close();",
    "info" : "ExpressionStatement[228272-228293]:ExpressionStatement[228272-228293]"
  }, {
    "left" : "targetStream = null;",
    "right" : "targetStream = null;",
    "info" : "ExpressionStatement[228300-228320]:ExpressionStatement[228300-228320]"
  }, {
    "left" : "if (target.exists())",
    "right" : "if (target.exists())",
    "info" : "IfStatement[228328-228514]:IfStatement[228328-228514]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[228349-228514]:Block[228349-228514]"
  }, {
    "left" : "if (!target.delete())",
    "right" : "if (!target.delete())",
    "info" : "IfStatement[228359-228506]:IfStatement[228359-228506]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[228381-228506]:Block[228381-228506]"
  }, {
    "left" : "System.err.println(\"Could not replace \" +\n                             target.getAbsolutePath() + \".\");",
    "right" : "System.err.println(\"Could not replace \" +\n                             target.getAbsolutePath() + \".\");",
    "info" : "ExpressionStatement[228393-228496]:ExpressionStatement[228393-228496]"
  }, {
    "left" : "if (!tempFile.renameTo(target))",
    "right" : "if (!tempFile.renameTo(target))",
    "info" : "IfStatement[228521-228704]:IfStatement[228521-228704]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[228553-228704]:Block[228553-228704]"
  }, {
    "left" : "System.err.println(\"Could not rename temporary file \" +\n                           tempFile.getAbsolutePath());",
    "right" : "System.err.println(\"Could not rename temporary file \" +\n                           tempFile.getAbsolutePath());",
    "info" : "ExpressionStatement[228563-228674]:ExpressionStatement[228563-228674]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[228683-228696]:ReturnStatement[228683-228696]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[228711-228723]:ReturnStatement[228711-228723]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[228753-228872]:Block[228753-228872]"
  }, {
    "left" : "if (tempFile != null)",
    "right" : "if (tempFile != null)",
    "info" : "IfStatement[228761-228819]:IfStatement[228761-228819]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[228783-228819]:Block[228783-228819]"
  }, {
    "left" : "tempFile.delete();",
    "right" : "tempFile.delete();",
    "info" : "ExpressionStatement[228793-228811]:ExpressionStatement[228793-228811]"
  }, {
    "left" : "e.printStackTrace();",
    "right" : "e.printStackTrace();",
    "info" : "ExpressionStatement[228826-228846]:ExpressionStatement[228826-228846]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[228853-228866]:ReturnStatement[228853-228866]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[228907-228913]:Modifier[228907-228913]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[228914-228920]:Modifier[228914-228920]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[228921-228925]:PrimitiveType[228921-228925]"
  }, {
    "left" : "OutputStream target",
    "right" : "OutputStream target",
    "info" : "SingleVariableDeclaration[228937-228956]:SingleVariableDeclaration[228937-228956]"
  }, {
    "left" : "InputStream source",
    "right" : "InputStream source",
    "info" : "SingleVariableDeclaration[228990-229008]:SingleVariableDeclaration[228990-229008]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[229017-229028]:SimpleType[229017-229028]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[229029-229339]:Block[229029-229339]"
  }, {
    "left" : "BufferedInputStream bis = new BufferedInputStream(source, 16384);",
    "right" : "BufferedInputStream bis = new BufferedInputStream(source, 16384);",
    "info" : "VariableDeclarationStatement[229035-229100]:VariableDeclarationStatement[229035-229100]"
  }, {
    "left" : "BufferedOutputStream bos = new BufferedOutputStream(target);",
    "right" : "BufferedOutputStream bos = new BufferedOutputStream(target);",
    "info" : "VariableDeclarationStatement[229105-229165]:VariableDeclarationStatement[229105-229165]"
  }, {
    "left" : "byte[] buffer = new byte[8192];",
    "right" : "byte[] buffer = new byte[8192];",
    "info" : "VariableDeclarationStatement[229171-229202]:VariableDeclarationStatement[229171-229202]"
  }, {
    "left" : "int bytesRead;",
    "right" : "int bytesRead;",
    "info" : "VariableDeclarationStatement[229207-229221]:VariableDeclarationStatement[229207-229221]"
  }, {
    "left" : "while ((bytesRead = bis.read(buffer)) != -1)",
    "right" : "while ((bytesRead = bis.read(buffer)) != -1)",
    "info" : "WhileStatement[229226-229317]:WhileStatement[229226-229317]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[229271-229317]:Block[229271-229317]"
  }, {
    "left" : "bos.write(buffer, 0, bytesRead);",
    "right" : "bos.write(buffer, 0, bytesRead);",
    "info" : "ExpressionStatement[229279-229311]:ExpressionStatement[229279-229311]"
  }, {
    "left" : "bos.flush();",
    "right" : "bos.flush();",
    "info" : "ExpressionStatement[229323-229335]:ExpressionStatement[229323-229335]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[230317-230323]:Modifier[230317-230323]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[230324-230328]:PrimitiveType[230324-230328]"
  }, {
    "left" : "String filename",
    "right" : "String filename",
    "info" : "SingleVariableDeclaration[230339-230354]:SingleVariableDeclaration[230339-230354]"
  }, {
    "left" : "byte[] data",
    "right" : "byte[] data",
    "info" : "SingleVariableDeclaration[230356-230367]:SingleVariableDeclaration[230356-230367]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[230369-230415]:Block[230369-230415]"
  }, {
    "left" : "saveBytes(saveFile(filename), data);",
    "right" : "saveBytes(saveFile(filename), data);",
    "info" : "ExpressionStatement[230375-230411]:ExpressionStatement[230375-230411]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[230515-230521]:Modifier[230515-230521]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[230522-230528]:Modifier[230522-230528]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[230529-230533]:PrimitiveType[230529-230533]"
  }, {
    "left" : "File file",
    "right" : "File file",
    "info" : "SingleVariableDeclaration[230544-230553]:SingleVariableDeclaration[230544-230553]"
  }, {
    "left" : "byte[] data",
    "right" : "byte[] data",
    "info" : "SingleVariableDeclaration[230555-230566]:SingleVariableDeclaration[230555-230566]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[230568-231360]:Block[230568-231360]"
  }, {
    "left" : "File tempFile = null;",
    "right" : "File tempFile = null;",
    "info" : "VariableDeclarationStatement[230574-230595]:VariableDeclarationStatement[230574-230595]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[230600-231356]:TryStatement[230600-231356]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[230604-231175]:Block[230604-231175]"
  }, {
    "left" : "File parentDir = file.getParentFile();",
    "right" : "File parentDir = file.getParentFile();",
    "info" : "VariableDeclarationStatement[230612-230650]:VariableDeclarationStatement[230612-230650]"
  }, {
    "left" : "tempFile = File.createTempFile(file.getName(), null, parentDir);",
    "right" : "tempFile = File.createTempFile(file.getName(), null, parentDir);",
    "info" : "ExpressionStatement[230657-230721]:ExpressionStatement[230657-230721]"
  }, {
    "left" : "OutputStream output = createOutput(tempFile);",
    "right" : "OutputStream output = createOutput(tempFile);",
    "info" : "VariableDeclarationStatement[230729-230774]:VariableDeclarationStatement[230729-230774]"
  }, {
    "left" : "saveBytes(output, data);",
    "right" : "saveBytes(output, data);",
    "info" : "ExpressionStatement[230781-230805]:ExpressionStatement[230781-230805]"
  }, {
    "left" : "output.close();",
    "right" : "output.close();",
    "info" : "ExpressionStatement[230812-230827]:ExpressionStatement[230812-230827]"
  }, {
    "left" : "output = null;",
    "right" : "output = null;",
    "info" : "ExpressionStatement[230834-230848]:ExpressionStatement[230834-230848]"
  }, {
    "left" : "if (file.exists())",
    "right" : "if (file.exists())",
    "info" : "IfStatement[230856-231001]:IfStatement[230856-231001]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[230875-231001]:Block[230875-231001]"
  }, {
    "left" : "if (!file.delete())",
    "right" : "if (!file.delete())",
    "info" : "IfStatement[230885-230993]:IfStatement[230885-230993]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[230905-230993]:Block[230905-230993]"
  }, {
    "left" : "System.err.println(\"Could not replace \" + file.getAbsolutePath());",
    "right" : "System.err.println(\"Could not replace \" + file.getAbsolutePath());",
    "info" : "ExpressionStatement[230917-230983]:ExpressionStatement[230917-230983]"
  }, {
    "left" : "if (!tempFile.renameTo(file))",
    "right" : "if (!tempFile.renameTo(file))",
    "info" : "IfStatement[231009-231168]:IfStatement[231009-231168]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[231039-231168]:Block[231039-231168]"
  }, {
    "left" : "System.err.println(\"Could not rename temporary file \" +\n                           tempFile.getAbsolutePath());",
    "right" : "System.err.println(\"Could not rename temporary file \" +\n                           tempFile.getAbsolutePath());",
    "info" : "ExpressionStatement[231049-231160]:ExpressionStatement[231049-231160]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[231198-231356]:Block[231198-231356]"
  }, {
    "left" : "System.err.println(\"error saving bytes to \" + file);",
    "right" : "System.err.println(\"error saving bytes to \" + file);",
    "info" : "ExpressionStatement[231206-231258]:ExpressionStatement[231206-231258]"
  }, {
    "left" : "if (tempFile != null)",
    "right" : "if (tempFile != null)",
    "info" : "IfStatement[231265-231323]:IfStatement[231265-231323]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[231287-231323]:Block[231287-231323]"
  }, {
    "left" : "tempFile.delete();",
    "right" : "tempFile.delete();",
    "info" : "ExpressionStatement[231297-231315]:ExpressionStatement[231297-231315]"
  }, {
    "left" : "e.printStackTrace();",
    "right" : "e.printStackTrace();",
    "info" : "ExpressionStatement[231330-231350]:ExpressionStatement[231330-231350]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[231441-231447]:Modifier[231441-231447]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[231448-231454]:Modifier[231448-231454]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[231455-231459]:PrimitiveType[231455-231459]"
  }, {
    "left" : "OutputStream output",
    "right" : "OutputStream output",
    "info" : "SingleVariableDeclaration[231470-231489]:SingleVariableDeclaration[231470-231489]"
  }, {
    "left" : "byte[] data",
    "right" : "byte[] data",
    "info" : "SingleVariableDeclaration[231491-231502]:SingleVariableDeclaration[231491-231502]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[231504-231631]:Block[231504-231631]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[231510-231627]:TryStatement[231510-231627]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[231514-231570]:Block[231514-231570]"
  }, {
    "left" : "output.write(data);",
    "right" : "output.write(data);",
    "info" : "ExpressionStatement[231522-231541]:ExpressionStatement[231522-231541]"
  }, {
    "left" : "output.flush();",
    "right" : "output.flush();",
    "info" : "ExpressionStatement[231548-231563]:ExpressionStatement[231548-231563]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[231593-231627]:Block[231593-231627]"
  }, {
    "left" : "e.printStackTrace();",
    "right" : "e.printStackTrace();",
    "info" : "ExpressionStatement[231601-231621]:ExpressionStatement[231601-231621]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[232806-232812]:Modifier[232806-232812]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[232813-232817]:PrimitiveType[232813-232817]"
  }, {
    "left" : "String filename",
    "right" : "String filename",
    "info" : "SingleVariableDeclaration[232830-232845]:SingleVariableDeclaration[232830-232845]"
  }, {
    "left" : "String data[]",
    "right" : "String data[]",
    "info" : "SingleVariableDeclaration[232847-232860]:SingleVariableDeclaration[232847-232860]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[232862-232910]:Block[232862-232910]"
  }, {
    "left" : "saveStrings(saveFile(filename), data);",
    "right" : "saveStrings(saveFile(filename), data);",
    "info" : "ExpressionStatement[232868-232906]:ExpressionStatement[232868-232906]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[232942-232948]:Modifier[232942-232948]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[232949-232955]:Modifier[232949-232955]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[232956-232960]:PrimitiveType[232956-232960]"
  }, {
    "left" : "File file",
    "right" : "File file",
    "info" : "SingleVariableDeclaration[232973-232982]:SingleVariableDeclaration[232973-232982]"
  }, {
    "left" : "String data[]",
    "right" : "String data[]",
    "info" : "SingleVariableDeclaration[232984-232997]:SingleVariableDeclaration[232984-232997]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[232999-233047]:Block[232999-233047]"
  }, {
    "left" : "saveStrings(createOutput(file), data);",
    "right" : "saveStrings(createOutput(file), data);",
    "info" : "ExpressionStatement[233005-233043]:ExpressionStatement[233005-233043]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[233079-233085]:Modifier[233079-233085]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[233086-233092]:Modifier[233086-233092]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[233093-233097]:PrimitiveType[233093-233097]"
  }, {
    "left" : "OutputStream output",
    "right" : "OutputStream output",
    "info" : "SingleVariableDeclaration[233110-233129]:SingleVariableDeclaration[233110-233129]"
  }, {
    "left" : "String[] data",
    "right" : "String[] data",
    "info" : "SingleVariableDeclaration[233131-233144]:SingleVariableDeclaration[233131-233144]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[233146-233319]:Block[233146-233319]"
  }, {
    "left" : "PrintWriter writer = createWriter(output);",
    "right" : "PrintWriter writer = createWriter(output);",
    "info" : "VariableDeclarationStatement[233152-233194]:VariableDeclarationStatement[233152-233194]"
  }, {
    "left" : "for (int i = 0; i < data.length; i++)",
    "right" : "for (int i = 0; i < data.length; i++)",
    "info" : "ForStatement[233199-233275]:ForStatement[233199-233275]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[233237-233275]:Block[233237-233275]"
  }, {
    "left" : "writer.println(data[i]);",
    "right" : "writer.println(data[i]);",
    "info" : "ExpressionStatement[233245-233269]:ExpressionStatement[233245-233269]"
  }, {
    "left" : "writer.flush();",
    "right" : "writer.flush();",
    "info" : "ExpressionStatement[233280-233295]:ExpressionStatement[233280-233295]"
  }, {
    "left" : "writer.close();",
    "right" : "writer.close();",
    "info" : "ExpressionStatement[233300-233315]:ExpressionStatement[233300-233315]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[233391-233397]:Modifier[233391-233397]"
  }, {
    "left" : "protected",
    "right" : "protected",
    "info" : "Modifier[233398-233407]:Modifier[233398-233407]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[233408-233414]:SimpleType[233408-233414]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[233432-234492]:Block[233432-234492]"
  }, {
    "left" : "String folder = null;",
    "right" : "String folder = null;",
    "info" : "VariableDeclarationStatement[233680-233701]:VariableDeclarationStatement[233680-233701]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[233706-234469]:TryStatement[233706-234469]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[233710-234414]:Block[233710-234414]"
  }, {
    "left" : "folder = System.getProperty(\"user.dir\");",
    "right" : "folder = System.getProperty(\"user.dir\");",
    "info" : "ExpressionStatement[233718-233758]:ExpressionStatement[233718-233758]"
  }, {
    "left" : "if (platform == MACOSX)",
    "right" : "if (platform == MACOSX)",
    "info" : "IfStatement[233892-234408]:IfStatement[233892-234408]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[233916-234408]:Block[233916-234408]"
  }, {
    "left" : "String jarPath =\n          PApplet.class.getProtectionDomain().getCodeSource().getLocation().getPath();",
    "right" : "String jarPath =\n          PApplet.class.getProtectionDomain().getCodeSource().getLocation().getPath();",
    "info" : "VariableDeclarationStatement[233926-234029]:VariableDeclarationStatement[233926-234029]"
  }, {
    "left" : "jarPath = urlDecode(jarPath);",
    "right" : "jarPath = urlDecode(jarPath);",
    "info" : "ExpressionStatement[234109-234138]:ExpressionStatement[234109-234138]"
  }, {
    "left" : "if (jarPath.contains(\"Contents/Java/\"))",
    "right" : "if (jarPath.contains(\"Contents/Java/\"))",
    "info" : "IfStatement[234147-234400]:IfStatement[234147-234400]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[234187-234400]:Block[234187-234400]"
  }, {
    "left" : "String appPath = jarPath.substring(0, jarPath.indexOf(\".app\") + 4);",
    "right" : "String appPath = jarPath.substring(0, jarPath.indexOf(\".app\") + 4);",
    "info" : "VariableDeclarationStatement[234199-234266]:VariableDeclarationStatement[234199-234266]"
  }, {
    "left" : "File containingFolder = new File(appPath).getParentFile();",
    "right" : "File containingFolder = new File(appPath).getParentFile();",
    "info" : "VariableDeclarationStatement[234277-234335]:VariableDeclarationStatement[234277-234335]"
  }, {
    "left" : "folder = containingFolder.getAbsolutePath();",
    "right" : "folder = containingFolder.getAbsolutePath();",
    "info" : "ExpressionStatement[234346-234390]:ExpressionStatement[234346-234390]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[234435-234469]:Block[234435-234469]"
  }, {
    "left" : "e.printStackTrace();",
    "right" : "e.printStackTrace();",
    "info" : "ExpressionStatement[234443-234463]:ExpressionStatement[234443-234463]"
  }, {
    "left" : "return folder;",
    "right" : "return folder;",
    "info" : "ReturnStatement[234474-234488]:ReturnStatement[234474-234488]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[234497-234503]:Modifier[234497-234503]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[234504-234510]:SimpleType[234504-234510]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[234524-234625]:Block[234524-234625]"
  }, {
    "left" : "if (sketchPath == null)",
    "right" : "if (sketchPath == null)",
    "info" : "IfStatement[234530-234598]:IfStatement[234530-234598]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[234554-234598]:Block[234554-234598]"
  }, {
    "left" : "sketchPath = calcSketchPath();",
    "right" : "sketchPath = calcSketchPath();",
    "info" : "ExpressionStatement[234562-234592]:ExpressionStatement[234562-234592]"
  }, {
    "left" : "return sketchPath;",
    "right" : "return sketchPath;",
    "info" : "ReturnStatement[234603-234621]:ReturnStatement[234603-234621]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[235291-235297]:Modifier[235291-235297]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[235298-235304]:SimpleType[235298-235304]"
  }, {
    "left" : "String where",
    "right" : "String where",
    "info" : "SingleVariableDeclaration[235316-235328]:SingleVariableDeclaration[235316-235328]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[235330-235725]:Block[235330-235725]"
  }, {
    "left" : "if (sketchPath() == null)",
    "right" : "if (sketchPath() == null)",
    "info" : "IfStatement[235336-235389]:IfStatement[235336-235389]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[235362-235389]:Block[235362-235389]"
  }, {
    "left" : "return where;",
    "right" : "return where;",
    "info" : "ReturnStatement[235370-235383]:ReturnStatement[235370-235383]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[235581-235670]:TryStatement[235581-235670]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[235585-235646]:Block[235585-235646]"
  }, {
    "left" : "if (new File(where).isAbsolute())",
    "right" : "if (new File(where).isAbsolute())",
    "info" : "IfStatement[235593-235640]:IfStatement[235593-235640]"
  }, {
    "left" : "return where;",
    "right" : "return where;",
    "info" : "ReturnStatement[235627-235640]:ReturnStatement[235627-235640]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[235667-235670]:Block[235667-235670]"
  }, {
    "left" : "return sketchPath() + File.separator + where;",
    "right" : "return sketchPath() + File.separator + where;",
    "info" : "ReturnStatement[235676-235721]:ReturnStatement[235676-235721]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[235730-235736]:Modifier[235730-235736]"
  }, {
    "left" : "File",
    "right" : "File",
    "info" : "SimpleType[235737-235741]:SimpleType[235737-235741]"
  }, {
    "left" : "String where",
    "right" : "String where",
    "info" : "SingleVariableDeclaration[235753-235765]:SingleVariableDeclaration[235753-235765]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[235767-235812]:Block[235767-235812]"
  }, {
    "left" : "return new File(sketchPath(where));",
    "right" : "return new File(sketchPath(where));",
    "info" : "ReturnStatement[235773-235808]:ReturnStatement[235773-235808]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[236567-236573]:Modifier[236567-236573]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[236574-236580]:SimpleType[236574-236580]"
  }, {
    "left" : "String where",
    "right" : "String where",
    "info" : "SingleVariableDeclaration[236590-236602]:SingleVariableDeclaration[236590-236602]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[236604-236733]:Block[236604-236733]"
  }, {
    "left" : "if (where == null)",
    "right" : "if (where == null)",
    "info" : "IfStatement[236610-236641]:IfStatement[236610-236641]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[236629-236641]:ReturnStatement[236629-236641]"
  }, {
    "left" : "String filename = sketchPath(where);",
    "right" : "String filename = sketchPath(where);",
    "info" : "VariableDeclarationStatement[236646-236682]:VariableDeclarationStatement[236646-236682]"
  }, {
    "left" : "createPath(filename);",
    "right" : "createPath(filename);",
    "info" : "ExpressionStatement[236687-236708]:ExpressionStatement[236687-236708]"
  }, {
    "left" : "return filename;",
    "right" : "return filename;",
    "info" : "ReturnStatement[236713-236729]:ReturnStatement[236713-236729]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[236807-236813]:Modifier[236807-236813]"
  }, {
    "left" : "File",
    "right" : "File",
    "info" : "SimpleType[236814-236818]:SimpleType[236814-236818]"
  }, {
    "left" : "String where",
    "right" : "String where",
    "info" : "SingleVariableDeclaration[236828-236840]:SingleVariableDeclaration[236828-236840]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[236842-236885]:Block[236842-236885]"
  }, {
    "left" : "return new File(savePath(where));",
    "right" : "return new File(savePath(where));",
    "info" : "ReturnStatement[236848-236881]:ReturnStatement[236848-236881]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[236977-236983]:Modifier[236977-236983]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[236984-236990]:Modifier[236984-236990]"
  }, {
    "left" : "File",
    "right" : "File",
    "info" : "SimpleType[236991-236995]:SimpleType[236991-236995]"
  }, {
    "left" : "String what",
    "right" : "String what",
    "info" : "SingleVariableDeclaration[237008-237019]:SingleVariableDeclaration[237008-237019]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[237021-237594]:Block[237021-237594]"
  }, {
    "left" : "if (desktopFolder == null)",
    "right" : "if (desktopFolder == null)",
    "info" : "IfStatement[237027-237548]:IfStatement[237027-237548]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[237054-237548]:Block[237054-237548]"
  }, {
    "left" : "desktopFolder = new File(System.getProperty(\"user.home\"), \"Desktop\");",
    "right" : "desktopFolder = new File(System.getProperty(\"user.home\"), \"Desktop\");",
    "info" : "ExpressionStatement[237145-237214]:ExpressionStatement[237145-237214]"
  }, {
    "left" : "if (!desktopFolder.exists())",
    "right" : "if (!desktopFolder.exists())",
    "info" : "IfStatement[237221-237542]:IfStatement[237221-237542]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[237250-237542]:Block[237250-237542]"
  }, {
    "left" : "if (platform == WINDOWS)",
    "right" : "if (platform == WINDOWS)",
    "info" : "IfStatement[237260-237534]:IfStatement[237260-237534]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[237285-237421]:Block[237285-237421]"
  }, {
    "left" : "FileSystemView filesys = FileSystemView.getFileSystemView();",
    "right" : "FileSystemView filesys = FileSystemView.getFileSystemView();",
    "info" : "VariableDeclarationStatement[237297-237357]:VariableDeclarationStatement[237297-237357]"
  }, {
    "left" : "desktopFolder = filesys.getHomeDirectory();",
    "right" : "desktopFolder = filesys.getHomeDirectory();",
    "info" : "ExpressionStatement[237368-237411]:ExpressionStatement[237368-237411]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[237427-237534]:Block[237427-237534]"
  }, {
    "left" : "throw new UnsupportedOperationException(\"Could not find a suitable desktop foldder\");",
    "right" : "throw new UnsupportedOperationException(\"Could not find a suitable desktop foldder\");",
    "info" : "ThrowStatement[237439-237524]:ThrowStatement[237439-237524]"
  }, {
    "left" : "return new File(desktopFolder, what);",
    "right" : "return new File(desktopFolder, what);",
    "info" : "ReturnStatement[237553-237590]:ReturnStatement[237553-237590]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[237656-237662]:Modifier[237656-237662]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[237663-237669]:Modifier[237663-237669]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[237670-237676]:SimpleType[237670-237676]"
  }, {
    "left" : "String what",
    "right" : "String what",
    "info" : "SingleVariableDeclaration[237689-237700]:SingleVariableDeclaration[237689-237700]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[237702-237755]:Block[237702-237755]"
  }, {
    "left" : "return desktopFile(what).getAbsolutePath();",
    "right" : "return desktopFile(what).getAbsolutePath();",
    "info" : "ReturnStatement[237708-237751]:ReturnStatement[237708-237751]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[238617-238623]:Modifier[238617-238623]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[238624-238630]:SimpleType[238624-238630]"
  }, {
    "left" : "String where",
    "right" : "String where",
    "info" : "SingleVariableDeclaration[238640-238652]:SingleVariableDeclaration[238640-238652]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[238654-238705]:Block[238654-238705]"
  }, {
    "left" : "return dataFile(where).getAbsolutePath();",
    "right" : "return dataFile(where).getAbsolutePath();",
    "info" : "ReturnStatement[238660-238701]:ReturnStatement[238660-238701]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[238847-238853]:Modifier[238847-238853]"
  }, {
    "left" : "File",
    "right" : "File",
    "info" : "SimpleType[238854-238858]:SimpleType[238854-238858]"
  }, {
    "left" : "String where",
    "right" : "String where",
    "info" : "SingleVariableDeclaration[238868-238880]:SingleVariableDeclaration[238868-238880]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[238882-239718]:Block[238882-239718]"
  }, {
    "left" : "File why = new File(where);",
    "right" : "File why = new File(where);",
    "info" : "VariableDeclarationStatement[239031-239058]:VariableDeclarationStatement[239031-239058]"
  }, {
    "left" : "if (why.isAbsolute())",
    "right" : "if (why.isAbsolute())",
    "info" : "IfStatement[239063-239096]:IfStatement[239063-239096]"
  }, {
    "left" : "return why;",
    "right" : "return why;",
    "info" : "ReturnStatement[239085-239096]:ReturnStatement[239085-239096]"
  }, {
    "left" : "String jarPath =\n      getClass().getProtectionDomain().getCodeSource().getLocation().getPath();",
    "right" : "String jarPath =\n      getClass().getProtectionDomain().getCodeSource().getLocation().getPath();",
    "info" : "VariableDeclarationStatement[239102-239198]:VariableDeclarationStatement[239102-239198]"
  }, {
    "left" : "if (jarPath.contains(\"Contents/Java/\"))",
    "right" : "if (jarPath.contains(\"Contents/Java/\"))",
    "info" : "IfStatement[239203-239568]:IfStatement[239203-239568]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[239243-239568]:Block[239243-239568]"
  }, {
    "left" : "File containingFolder = new File(urlDecode(jarPath)).getParentFile();",
    "right" : "File containingFolder = new File(urlDecode(jarPath)).getParentFile();",
    "info" : "VariableDeclarationStatement[239391-239460]:VariableDeclarationStatement[239391-239460]"
  }, {
    "left" : "File dataFolder = new File(containingFolder, \"data\");",
    "right" : "File dataFolder = new File(containingFolder, \"data\");",
    "info" : "VariableDeclarationStatement[239467-239520]:VariableDeclarationStatement[239467-239520]"
  }, {
    "left" : "return new File(dataFolder, where);",
    "right" : "return new File(dataFolder, where);",
    "info" : "ReturnStatement[239527-239562]:ReturnStatement[239527-239562]"
  }, {
    "left" : "return new File(sketchPath + File.separator + \"data\" + File.separator + where);",
    "right" : "return new File(sketchPath + File.separator + \"data\" + File.separator + where);",
    "info" : "ReturnStatement[239635-239714]:ReturnStatement[239635-239714]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[240153-240159]:Modifier[240153-240159]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[240160-240166]:Modifier[240160-240166]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[240167-240171]:PrimitiveType[240167-240171]"
  }, {
    "left" : "String path",
    "right" : "String path",
    "info" : "SingleVariableDeclaration[240183-240194]:SingleVariableDeclaration[240183-240194]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[240196-240233]:Block[240196-240233]"
  }, {
    "left" : "createPath(new File(path));",
    "right" : "createPath(new File(path));",
    "info" : "ExpressionStatement[240202-240229]:ExpressionStatement[240202-240229]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[240238-240244]:Modifier[240238-240244]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[240245-240251]:Modifier[240245-240251]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[240252-240256]:PrimitiveType[240252-240256]"
  }, {
    "left" : "File file",
    "right" : "File file",
    "info" : "SingleVariableDeclaration[240268-240277]:SingleVariableDeclaration[240268-240277]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[240279-240611]:Block[240279-240611]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[240285-240607]:TryStatement[240285-240607]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[240289-240453]:Block[240289-240453]"
  }, {
    "left" : "String parent = file.getParent();",
    "right" : "String parent = file.getParent();",
    "info" : "VariableDeclarationStatement[240297-240330]:VariableDeclarationStatement[240297-240330]"
  }, {
    "left" : "if (parent != null)",
    "right" : "if (parent != null)",
    "info" : "IfStatement[240337-240447]:IfStatement[240337-240447]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[240357-240447]:Block[240357-240447]"
  }, {
    "left" : "File unit = new File(parent);",
    "right" : "File unit = new File(parent);",
    "info" : "VariableDeclarationStatement[240367-240396]:VariableDeclarationStatement[240367-240396]"
  }, {
    "left" : "if (!unit.exists())",
    "right" : "if (!unit.exists())",
    "info" : "IfStatement[240405-240439]:IfStatement[240405-240439]"
  }, {
    "left" : "unit.mkdirs();",
    "right" : "unit.mkdirs();",
    "info" : "ExpressionStatement[240425-240439]:ExpressionStatement[240425-240439]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[240483-240607]:Block[240483-240607]"
  }, {
    "left" : "System.err.println(\"You don't have permissions to create \" +\n                         file.getAbsolutePath());",
    "right" : "System.err.println(\"You don't have permissions to create \" +\n                         file.getAbsolutePath());",
    "info" : "ExpressionStatement[240491-240601]:ExpressionStatement[240491-240601]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[240616-240622]:Modifier[240616-240622]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[240623-240629]:Modifier[240623-240629]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[240630-240636]:SimpleType[240630-240636]"
  }, {
    "left" : "String filename",
    "right" : "String filename",
    "info" : "SingleVariableDeclaration[240650-240665]:SingleVariableDeclaration[240650-240665]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[240667-241156]:Block[240667-241156]"
  }, {
    "left" : "String extension;",
    "right" : "String extension;",
    "info" : "VariableDeclarationStatement[240673-240690]:VariableDeclarationStatement[240673-240690]"
  }, {
    "left" : "String lower = filename.toLowerCase();",
    "right" : "String lower = filename.toLowerCase();",
    "info" : "VariableDeclarationStatement[240696-240734]:VariableDeclarationStatement[240696-240734]"
  }, {
    "left" : "int dot = filename.lastIndexOf('.');",
    "right" : "int dot = filename.lastIndexOf('.');",
    "info" : "VariableDeclarationStatement[240739-240775]:VariableDeclarationStatement[240739-240775]"
  }, {
    "left" : "if (dot == -1)",
    "right" : "if (dot == -1)",
    "info" : "IfStatement[240780-240854]:IfStatement[240780-240854]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[240795-240854]:Block[240795-240854]"
  }, {
    "left" : "extension = \"unknown\";",
    "right" : "extension = \"unknown\";",
    "info" : "ExpressionStatement[240803-240825]:ExpressionStatement[240803-240825]"
  }, {
    "left" : "extension = lower.substring(dot + 1);",
    "right" : "extension = lower.substring(dot + 1);",
    "info" : "ExpressionStatement[240859-240896]:ExpressionStatement[240859-240896]"
  }, {
    "left" : "int question = extension.indexOf('?');",
    "right" : "int question = extension.indexOf('?');",
    "info" : "VariableDeclarationStatement[241007-241045]:VariableDeclarationStatement[241007-241045]"
  }, {
    "left" : "if (question != -1)",
    "right" : "if (question != -1)",
    "info" : "IfStatement[241050-241129]:IfStatement[241050-241129]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[241070-241129]:Block[241070-241129]"
  }, {
    "left" : "extension = extension.substring(0, question);",
    "right" : "extension = extension.substring(0, question);",
    "info" : "ExpressionStatement[241078-241123]:ExpressionStatement[241078-241123]"
  }, {
    "left" : "return extension;",
    "right" : "return extension;",
    "info" : "ReturnStatement[241135-241152]:ReturnStatement[241135-241152]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[241247-241253]:Modifier[241247-241253]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[241254-241260]:Modifier[241254-241260]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[241261-241267]:SimpleType[241261-241267]"
  }, {
    "left" : "String str",
    "right" : "String str",
    "info" : "SingleVariableDeclaration[241278-241288]:SingleVariableDeclaration[241278-241288]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[241290-241436]:Block[241290-241436]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[241296-241432]:TryStatement[241296-241432]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[241300-241353]:Block[241300-241353]"
  }, {
    "left" : "return URLEncoder.encode(str, \"UTF-8\");",
    "right" : "return URLEncoder.encode(str, \"UTF-8\");",
    "info" : "ReturnStatement[241308-241347]:ReturnStatement[241308-241347]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[241393-241432]:Block[241393-241432]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[241414-241426]:ReturnStatement[241414-241426]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[241441-241447]:Modifier[241441-241447]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[241448-241454]:Modifier[241448-241454]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[241455-241461]:SimpleType[241455-241461]"
  }, {
    "left" : "String str",
    "right" : "String str",
    "info" : "SingleVariableDeclaration[241472-241482]:SingleVariableDeclaration[241472-241482]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[241484-241645]:Block[241484-241645]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[241490-241641]:TryStatement[241490-241641]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[241494-241547]:Block[241494-241547]"
  }, {
    "left" : "return URLDecoder.decode(str, \"UTF-8\");",
    "right" : "return URLDecoder.decode(str, \"UTF-8\");",
    "info" : "ReturnStatement[241502-241541]:ReturnStatement[241502-241541]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[241587-241641]:Block[241587-241641]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[241623-241635]:ReturnStatement[241623-241635]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[242405-242411]:Modifier[242405-242411]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[242412-242418]:Modifier[242412-242418]"
  }, {
    "left" : "byte[]",
    "right" : "byte[]",
    "info" : "ArrayType[242419-242425]:ArrayType[242419-242425]"
  }, {
    "left" : "byte list[]",
    "right" : "byte list[]",
    "info" : "SingleVariableDeclaration[242431-242442]:SingleVariableDeclaration[242431-242442]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[242444-242485]:Block[242444-242485]"
  }, {
    "left" : "return sort(list, list.length);",
    "right" : "return sort(list, list.length);",
    "info" : "ReturnStatement[242450-242481]:ReturnStatement[242450-242481]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[242568-242574]:Modifier[242568-242574]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[242575-242581]:Modifier[242575-242581]"
  }, {
    "left" : "byte[]",
    "right" : "byte[]",
    "info" : "ArrayType[242582-242588]:ArrayType[242582-242588]"
  }, {
    "left" : "byte[] list",
    "right" : "byte[] list",
    "info" : "SingleVariableDeclaration[242594-242605]:SingleVariableDeclaration[242594-242605]"
  }, {
    "left" : "int count",
    "right" : "int count",
    "info" : "SingleVariableDeclaration[242607-242616]:SingleVariableDeclaration[242607-242616]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[242618-242783]:Block[242618-242783]"
  }, {
    "left" : "byte[] outgoing = new byte[list.length];",
    "right" : "byte[] outgoing = new byte[list.length];",
    "info" : "VariableDeclarationStatement[242624-242664]:VariableDeclarationStatement[242624-242664]"
  }, {
    "left" : "System.arraycopy(list, 0, outgoing, 0, list.length);",
    "right" : "System.arraycopy(list, 0, outgoing, 0, list.length);",
    "info" : "ExpressionStatement[242669-242721]:ExpressionStatement[242669-242721]"
  }, {
    "left" : "Arrays.sort(outgoing, 0, count);",
    "right" : "Arrays.sort(outgoing, 0, count);",
    "info" : "ExpressionStatement[242726-242758]:ExpressionStatement[242726-242758]"
  }, {
    "left" : "return outgoing;",
    "right" : "return outgoing;",
    "info" : "ReturnStatement[242763-242779]:ReturnStatement[242763-242779]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[242787-242793]:Modifier[242787-242793]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[242794-242800]:Modifier[242794-242800]"
  }, {
    "left" : "char[]",
    "right" : "char[]",
    "info" : "ArrayType[242801-242807]:ArrayType[242801-242807]"
  }, {
    "left" : "char list[]",
    "right" : "char list[]",
    "info" : "SingleVariableDeclaration[242813-242824]:SingleVariableDeclaration[242813-242824]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[242826-242867]:Block[242826-242867]"
  }, {
    "left" : "return sort(list, list.length);",
    "right" : "return sort(list, list.length);",
    "info" : "ReturnStatement[242832-242863]:ReturnStatement[242832-242863]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[242871-242877]:Modifier[242871-242877]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[242878-242884]:Modifier[242878-242884]"
  }, {
    "left" : "char[]",
    "right" : "char[]",
    "info" : "ArrayType[242885-242891]:ArrayType[242885-242891]"
  }, {
    "left" : "char[] list",
    "right" : "char[] list",
    "info" : "SingleVariableDeclaration[242897-242908]:SingleVariableDeclaration[242897-242908]"
  }, {
    "left" : "int count",
    "right" : "int count",
    "info" : "SingleVariableDeclaration[242910-242919]:SingleVariableDeclaration[242910-242919]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[242921-243086]:Block[242921-243086]"
  }, {
    "left" : "char[] outgoing = new char[list.length];",
    "right" : "char[] outgoing = new char[list.length];",
    "info" : "VariableDeclarationStatement[242927-242967]:VariableDeclarationStatement[242927-242967]"
  }, {
    "left" : "System.arraycopy(list, 0, outgoing, 0, list.length);",
    "right" : "System.arraycopy(list, 0, outgoing, 0, list.length);",
    "info" : "ExpressionStatement[242972-243024]:ExpressionStatement[242972-243024]"
  }, {
    "left" : "Arrays.sort(outgoing, 0, count);",
    "right" : "Arrays.sort(outgoing, 0, count);",
    "info" : "ExpressionStatement[243029-243061]:ExpressionStatement[243029-243061]"
  }, {
    "left" : "return outgoing;",
    "right" : "return outgoing;",
    "info" : "ReturnStatement[243066-243082]:ReturnStatement[243066-243082]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[243090-243096]:Modifier[243090-243096]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[243097-243103]:Modifier[243097-243103]"
  }, {
    "left" : "int[]",
    "right" : "int[]",
    "info" : "ArrayType[243104-243109]:ArrayType[243104-243109]"
  }, {
    "left" : "int list[]",
    "right" : "int list[]",
    "info" : "SingleVariableDeclaration[243115-243125]:SingleVariableDeclaration[243115-243125]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[243127-243168]:Block[243127-243168]"
  }, {
    "left" : "return sort(list, list.length);",
    "right" : "return sort(list, list.length);",
    "info" : "ReturnStatement[243133-243164]:ReturnStatement[243133-243164]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[243172-243178]:Modifier[243172-243178]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[243179-243185]:Modifier[243179-243185]"
  }, {
    "left" : "int[]",
    "right" : "int[]",
    "info" : "ArrayType[243186-243191]:ArrayType[243186-243191]"
  }, {
    "left" : "int[] list",
    "right" : "int[] list",
    "info" : "SingleVariableDeclaration[243197-243207]:SingleVariableDeclaration[243197-243207]"
  }, {
    "left" : "int count",
    "right" : "int count",
    "info" : "SingleVariableDeclaration[243209-243218]:SingleVariableDeclaration[243209-243218]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[243220-243383]:Block[243220-243383]"
  }, {
    "left" : "int[] outgoing = new int[list.length];",
    "right" : "int[] outgoing = new int[list.length];",
    "info" : "VariableDeclarationStatement[243226-243264]:VariableDeclarationStatement[243226-243264]"
  }, {
    "left" : "System.arraycopy(list, 0, outgoing, 0, list.length);",
    "right" : "System.arraycopy(list, 0, outgoing, 0, list.length);",
    "info" : "ExpressionStatement[243269-243321]:ExpressionStatement[243269-243321]"
  }, {
    "left" : "Arrays.sort(outgoing, 0, count);",
    "right" : "Arrays.sort(outgoing, 0, count);",
    "info" : "ExpressionStatement[243326-243358]:ExpressionStatement[243326-243358]"
  }, {
    "left" : "return outgoing;",
    "right" : "return outgoing;",
    "info" : "ReturnStatement[243363-243379]:ReturnStatement[243363-243379]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[243387-243393]:Modifier[243387-243393]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[243394-243400]:Modifier[243394-243400]"
  }, {
    "left" : "float[]",
    "right" : "float[]",
    "info" : "ArrayType[243401-243408]:ArrayType[243401-243408]"
  }, {
    "left" : "float list[]",
    "right" : "float list[]",
    "info" : "SingleVariableDeclaration[243414-243426]:SingleVariableDeclaration[243414-243426]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[243428-243469]:Block[243428-243469]"
  }, {
    "left" : "return sort(list, list.length);",
    "right" : "return sort(list, list.length);",
    "info" : "ReturnStatement[243434-243465]:ReturnStatement[243434-243465]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[243473-243479]:Modifier[243473-243479]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[243480-243486]:Modifier[243480-243486]"
  }, {
    "left" : "float[]",
    "right" : "float[]",
    "info" : "ArrayType[243487-243494]:ArrayType[243487-243494]"
  }, {
    "left" : "float[] list",
    "right" : "float[] list",
    "info" : "SingleVariableDeclaration[243500-243512]:SingleVariableDeclaration[243500-243512]"
  }, {
    "left" : "int count",
    "right" : "int count",
    "info" : "SingleVariableDeclaration[243514-243523]:SingleVariableDeclaration[243514-243523]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[243525-243692]:Block[243525-243692]"
  }, {
    "left" : "float[] outgoing = new float[list.length];",
    "right" : "float[] outgoing = new float[list.length];",
    "info" : "VariableDeclarationStatement[243531-243573]:VariableDeclarationStatement[243531-243573]"
  }, {
    "left" : "System.arraycopy(list, 0, outgoing, 0, list.length);",
    "right" : "System.arraycopy(list, 0, outgoing, 0, list.length);",
    "info" : "ExpressionStatement[243578-243630]:ExpressionStatement[243578-243630]"
  }, {
    "left" : "Arrays.sort(outgoing, 0, count);",
    "right" : "Arrays.sort(outgoing, 0, count);",
    "info" : "ExpressionStatement[243635-243667]:ExpressionStatement[243635-243667]"
  }, {
    "left" : "return outgoing;",
    "right" : "return outgoing;",
    "info" : "ReturnStatement[243672-243688]:ReturnStatement[243672-243688]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[243696-243702]:Modifier[243696-243702]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[243703-243709]:Modifier[243703-243709]"
  }, {
    "left" : "String[]",
    "right" : "String[]",
    "info" : "ArrayType[243710-243718]:ArrayType[243710-243718]"
  }, {
    "left" : "String list[]",
    "right" : "String list[]",
    "info" : "SingleVariableDeclaration[243724-243737]:SingleVariableDeclaration[243724-243737]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[243739-243780]:Block[243739-243780]"
  }, {
    "left" : "return sort(list, list.length);",
    "right" : "return sort(list, list.length);",
    "info" : "ReturnStatement[243745-243776]:ReturnStatement[243745-243776]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[243784-243790]:Modifier[243784-243790]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[243791-243797]:Modifier[243791-243797]"
  }, {
    "left" : "String[]",
    "right" : "String[]",
    "info" : "ArrayType[243798-243806]:ArrayType[243798-243806]"
  }, {
    "left" : "String[] list",
    "right" : "String[] list",
    "info" : "SingleVariableDeclaration[243812-243825]:SingleVariableDeclaration[243812-243825]"
  }, {
    "left" : "int count",
    "right" : "int count",
    "info" : "SingleVariableDeclaration[243827-243836]:SingleVariableDeclaration[243827-243836]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[243838-244007]:Block[243838-244007]"
  }, {
    "left" : "String[] outgoing = new String[list.length];",
    "right" : "String[] outgoing = new String[list.length];",
    "info" : "VariableDeclarationStatement[243844-243888]:VariableDeclarationStatement[243844-243888]"
  }, {
    "left" : "System.arraycopy(list, 0, outgoing, 0, list.length);",
    "right" : "System.arraycopy(list, 0, outgoing, 0, list.length);",
    "info" : "ExpressionStatement[243893-243945]:ExpressionStatement[243893-243945]"
  }, {
    "left" : "Arrays.sort(outgoing, 0, count);",
    "right" : "Arrays.sort(outgoing, 0, count);",
    "info" : "ExpressionStatement[243950-243982]:ExpressionStatement[243950-243982]"
  }, {
    "left" : "return outgoing;",
    "right" : "return outgoing;",
    "info" : "ReturnStatement[243987-244003]:ReturnStatement[243987-244003]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[245180-245186]:Modifier[245180-245186]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[245187-245193]:Modifier[245187-245193]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[245194-245198]:PrimitiveType[245194-245198]"
  }, {
    "left" : "Object src",
    "right" : "Object src",
    "info" : "SingleVariableDeclaration[245209-245219]:SingleVariableDeclaration[245209-245219]"
  }, {
    "left" : "int srcPosition",
    "right" : "int srcPosition",
    "info" : "SingleVariableDeclaration[245221-245236]:SingleVariableDeclaration[245221-245236]"
  }, {
    "left" : "Object dst",
    "right" : "Object dst",
    "info" : "SingleVariableDeclaration[245269-245279]:SingleVariableDeclaration[245269-245279]"
  }, {
    "left" : "int dstPosition",
    "right" : "int dstPosition",
    "info" : "SingleVariableDeclaration[245281-245296]:SingleVariableDeclaration[245281-245296]"
  }, {
    "left" : "int length",
    "right" : "int length",
    "info" : "SingleVariableDeclaration[245329-245339]:SingleVariableDeclaration[245329-245339]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[245341-245412]:Block[245341-245412]"
  }, {
    "left" : "System.arraycopy(src, srcPosition, dst, dstPosition, length);",
    "right" : "System.arraycopy(src, srcPosition, dst, dstPosition, length);",
    "info" : "ExpressionStatement[245347-245408]:ExpressionStatement[245347-245408]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[245535-245541]:Modifier[245535-245541]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[245542-245548]:Modifier[245542-245548]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[245549-245553]:PrimitiveType[245549-245553]"
  }, {
    "left" : "Object src",
    "right" : "Object src",
    "info" : "SingleVariableDeclaration[245564-245574]:SingleVariableDeclaration[245564-245574]"
  }, {
    "left" : "Object dst",
    "right" : "Object dst",
    "info" : "SingleVariableDeclaration[245576-245586]:SingleVariableDeclaration[245576-245586]"
  }, {
    "left" : "int length",
    "right" : "int length",
    "info" : "SingleVariableDeclaration[245588-245598]:SingleVariableDeclaration[245588-245598]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[245600-245651]:Block[245600-245651]"
  }, {
    "left" : "System.arraycopy(src, 0, dst, 0, length);",
    "right" : "System.arraycopy(src, 0, dst, 0, length);",
    "info" : "ExpressionStatement[245606-245647]:ExpressionStatement[245606-245647]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[245826-245832]:Modifier[245826-245832]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[245833-245839]:Modifier[245833-245839]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[245840-245844]:PrimitiveType[245840-245844]"
  }, {
    "left" : "Object src",
    "right" : "Object src",
    "info" : "SingleVariableDeclaration[245855-245865]:SingleVariableDeclaration[245855-245865]"
  }, {
    "left" : "Object dst",
    "right" : "Object dst",
    "info" : "SingleVariableDeclaration[245867-245877]:SingleVariableDeclaration[245867-245877]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[245879-245944]:Block[245879-245944]"
  }, {
    "left" : "System.arraycopy(src, 0, dst, 0, Array.getLength(src));",
    "right" : "System.arraycopy(src, 0, dst, 0, Array.getLength(src));",
    "info" : "ExpressionStatement[245885-245940]:ExpressionStatement[245885-245940]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[246007-246013]:Modifier[246007-246013]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[246014-246020]:Modifier[246014-246020]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[246021-246025]:PrimitiveType[246021-246025]"
  }, {
    "left" : "Object src",
    "right" : "Object src",
    "info" : "SingleVariableDeclaration[246036-246046]:SingleVariableDeclaration[246036-246046]"
  }, {
    "left" : "int srcPosition",
    "right" : "int srcPosition",
    "info" : "SingleVariableDeclaration[246048-246063]:SingleVariableDeclaration[246048-246063]"
  }, {
    "left" : "Object dst",
    "right" : "Object dst",
    "info" : "SingleVariableDeclaration[246096-246106]:SingleVariableDeclaration[246096-246106]"
  }, {
    "left" : "int dstPosition",
    "right" : "int dstPosition",
    "info" : "SingleVariableDeclaration[246108-246123]:SingleVariableDeclaration[246108-246123]"
  }, {
    "left" : "int length",
    "right" : "int length",
    "info" : "SingleVariableDeclaration[246156-246166]:SingleVariableDeclaration[246156-246166]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[246168-246239]:Block[246168-246239]"
  }, {
    "left" : "System.arraycopy(src, srcPosition, dst, dstPosition, length);",
    "right" : "System.arraycopy(src, srcPosition, dst, dstPosition, length);",
    "info" : "ExpressionStatement[246174-246235]:ExpressionStatement[246174-246235]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[246297-246303]:Modifier[246297-246303]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[246304-246310]:Modifier[246304-246310]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[246311-246315]:PrimitiveType[246311-246315]"
  }, {
    "left" : "Object src",
    "right" : "Object src",
    "info" : "SingleVariableDeclaration[246326-246336]:SingleVariableDeclaration[246326-246336]"
  }, {
    "left" : "Object dst",
    "right" : "Object dst",
    "info" : "SingleVariableDeclaration[246338-246348]:SingleVariableDeclaration[246338-246348]"
  }, {
    "left" : "int length",
    "right" : "int length",
    "info" : "SingleVariableDeclaration[246350-246360]:SingleVariableDeclaration[246350-246360]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[246362-246413]:Block[246362-246413]"
  }, {
    "left" : "System.arraycopy(src, 0, dst, 0, length);",
    "right" : "System.arraycopy(src, 0, dst, 0, length);",
    "info" : "ExpressionStatement[246368-246409]:ExpressionStatement[246368-246409]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[246471-246477]:Modifier[246471-246477]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[246478-246484]:Modifier[246478-246484]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[246485-246489]:PrimitiveType[246485-246489]"
  }, {
    "left" : "Object src",
    "right" : "Object src",
    "info" : "SingleVariableDeclaration[246500-246510]:SingleVariableDeclaration[246500-246510]"
  }, {
    "left" : "Object dst",
    "right" : "Object dst",
    "info" : "SingleVariableDeclaration[246512-246522]:SingleVariableDeclaration[246512-246522]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[246524-246589]:Block[246524-246589]"
  }, {
    "left" : "System.arraycopy(src, 0, dst, 0, Array.getLength(src));",
    "right" : "System.arraycopy(src, 0, dst, 0, Array.getLength(src));",
    "info" : "ExpressionStatement[246530-246585]:ExpressionStatement[246530-246585]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[247225-247231]:Modifier[247225-247231]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[247232-247238]:Modifier[247232-247238]"
  }, {
    "left" : "boolean[]",
    "right" : "boolean[]",
    "info" : "ArrayType[247239-247248]:ArrayType[247239-247248]"
  }, {
    "left" : "boolean list[]",
    "right" : "boolean list[]",
    "info" : "SingleVariableDeclaration[247256-247270]:SingleVariableDeclaration[247256-247270]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[247272-247320]:Block[247272-247320]"
  }, {
    "left" : "return expand(list, list.length << 1);",
    "right" : "return expand(list, list.length << 1);",
    "info" : "ReturnStatement[247278-247316]:ReturnStatement[247278-247316]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[247379-247385]:Modifier[247379-247385]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[247386-247392]:Modifier[247386-247392]"
  }, {
    "left" : "boolean[]",
    "right" : "boolean[]",
    "info" : "ArrayType[247393-247402]:ArrayType[247393-247402]"
  }, {
    "left" : "boolean list[]",
    "right" : "boolean list[]",
    "info" : "SingleVariableDeclaration[247410-247424]:SingleVariableDeclaration[247410-247424]"
  }, {
    "left" : "int newSize",
    "right" : "int newSize",
    "info" : "SingleVariableDeclaration[247426-247437]:SingleVariableDeclaration[247426-247437]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[247439-247576]:Block[247439-247576]"
  }, {
    "left" : "boolean temp[] = new boolean[newSize];",
    "right" : "boolean temp[] = new boolean[newSize];",
    "info" : "VariableDeclarationStatement[247445-247483]:VariableDeclarationStatement[247445-247483]"
  }, {
    "left" : "System.arraycopy(list, 0, temp, 0, Math.min(newSize, list.length));",
    "right" : "System.arraycopy(list, 0, temp, 0, Math.min(newSize, list.length));",
    "info" : "ExpressionStatement[247488-247555]:ExpressionStatement[247488-247555]"
  }, {
    "left" : "return temp;",
    "right" : "return temp;",
    "info" : "ReturnStatement[247560-247572]:ReturnStatement[247560-247572]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[247580-247586]:Modifier[247580-247586]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[247587-247593]:Modifier[247587-247593]"
  }, {
    "left" : "byte[]",
    "right" : "byte[]",
    "info" : "ArrayType[247594-247600]:ArrayType[247594-247600]"
  }, {
    "left" : "byte list[]",
    "right" : "byte list[]",
    "info" : "SingleVariableDeclaration[247608-247619]:SingleVariableDeclaration[247608-247619]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[247621-247669]:Block[247621-247669]"
  }, {
    "left" : "return expand(list, list.length << 1);",
    "right" : "return expand(list, list.length << 1);",
    "info" : "ReturnStatement[247627-247665]:ReturnStatement[247627-247665]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[247673-247679]:Modifier[247673-247679]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[247680-247686]:Modifier[247680-247686]"
  }, {
    "left" : "byte[]",
    "right" : "byte[]",
    "info" : "ArrayType[247687-247693]:ArrayType[247687-247693]"
  }, {
    "left" : "byte list[]",
    "right" : "byte list[]",
    "info" : "SingleVariableDeclaration[247701-247712]:SingleVariableDeclaration[247701-247712]"
  }, {
    "left" : "int newSize",
    "right" : "int newSize",
    "info" : "SingleVariableDeclaration[247714-247725]:SingleVariableDeclaration[247714-247725]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[247727-247858]:Block[247727-247858]"
  }, {
    "left" : "byte temp[] = new byte[newSize];",
    "right" : "byte temp[] = new byte[newSize];",
    "info" : "VariableDeclarationStatement[247733-247765]:VariableDeclarationStatement[247733-247765]"
  }, {
    "left" : "System.arraycopy(list, 0, temp, 0, Math.min(newSize, list.length));",
    "right" : "System.arraycopy(list, 0, temp, 0, Math.min(newSize, list.length));",
    "info" : "ExpressionStatement[247770-247837]:ExpressionStatement[247770-247837]"
  }, {
    "left" : "return temp;",
    "right" : "return temp;",
    "info" : "ReturnStatement[247842-247854]:ReturnStatement[247842-247854]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[247862-247868]:Modifier[247862-247868]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[247869-247875]:Modifier[247869-247875]"
  }, {
    "left" : "char[]",
    "right" : "char[]",
    "info" : "ArrayType[247876-247882]:ArrayType[247876-247882]"
  }, {
    "left" : "char list[]",
    "right" : "char list[]",
    "info" : "SingleVariableDeclaration[247890-247901]:SingleVariableDeclaration[247890-247901]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[247903-247951]:Block[247903-247951]"
  }, {
    "left" : "return expand(list, list.length << 1);",
    "right" : "return expand(list, list.length << 1);",
    "info" : "ReturnStatement[247909-247947]:ReturnStatement[247909-247947]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[247955-247961]:Modifier[247955-247961]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[247962-247968]:Modifier[247962-247968]"
  }, {
    "left" : "char[]",
    "right" : "char[]",
    "info" : "ArrayType[247969-247975]:ArrayType[247969-247975]"
  }, {
    "left" : "char list[]",
    "right" : "char list[]",
    "info" : "SingleVariableDeclaration[247983-247994]:SingleVariableDeclaration[247983-247994]"
  }, {
    "left" : "int newSize",
    "right" : "int newSize",
    "info" : "SingleVariableDeclaration[247996-248007]:SingleVariableDeclaration[247996-248007]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[248009-248140]:Block[248009-248140]"
  }, {
    "left" : "char temp[] = new char[newSize];",
    "right" : "char temp[] = new char[newSize];",
    "info" : "VariableDeclarationStatement[248015-248047]:VariableDeclarationStatement[248015-248047]"
  }, {
    "left" : "System.arraycopy(list, 0, temp, 0, Math.min(newSize, list.length));",
    "right" : "System.arraycopy(list, 0, temp, 0, Math.min(newSize, list.length));",
    "info" : "ExpressionStatement[248052-248119]:ExpressionStatement[248052-248119]"
  }, {
    "left" : "return temp;",
    "right" : "return temp;",
    "info" : "ReturnStatement[248124-248136]:ReturnStatement[248124-248136]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[248144-248150]:Modifier[248144-248150]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[248151-248157]:Modifier[248151-248157]"
  }, {
    "left" : "int[]",
    "right" : "int[]",
    "info" : "ArrayType[248158-248163]:ArrayType[248158-248163]"
  }, {
    "left" : "int list[]",
    "right" : "int list[]",
    "info" : "SingleVariableDeclaration[248171-248181]:SingleVariableDeclaration[248171-248181]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[248183-248231]:Block[248183-248231]"
  }, {
    "left" : "return expand(list, list.length << 1);",
    "right" : "return expand(list, list.length << 1);",
    "info" : "ReturnStatement[248189-248227]:ReturnStatement[248189-248227]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[248235-248241]:Modifier[248235-248241]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[248242-248248]:Modifier[248242-248248]"
  }, {
    "left" : "int[]",
    "right" : "int[]",
    "info" : "ArrayType[248249-248254]:ArrayType[248249-248254]"
  }, {
    "left" : "int list[]",
    "right" : "int list[]",
    "info" : "SingleVariableDeclaration[248262-248272]:SingleVariableDeclaration[248262-248272]"
  }, {
    "left" : "int newSize",
    "right" : "int newSize",
    "info" : "SingleVariableDeclaration[248274-248285]:SingleVariableDeclaration[248274-248285]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[248287-248416]:Block[248287-248416]"
  }, {
    "left" : "int temp[] = new int[newSize];",
    "right" : "int temp[] = new int[newSize];",
    "info" : "VariableDeclarationStatement[248293-248323]:VariableDeclarationStatement[248293-248323]"
  }, {
    "left" : "System.arraycopy(list, 0, temp, 0, Math.min(newSize, list.length));",
    "right" : "System.arraycopy(list, 0, temp, 0, Math.min(newSize, list.length));",
    "info" : "ExpressionStatement[248328-248395]:ExpressionStatement[248328-248395]"
  }, {
    "left" : "return temp;",
    "right" : "return temp;",
    "info" : "ReturnStatement[248400-248412]:ReturnStatement[248400-248412]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[248420-248426]:Modifier[248420-248426]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[248427-248433]:Modifier[248427-248433]"
  }, {
    "left" : "long[]",
    "right" : "long[]",
    "info" : "ArrayType[248434-248440]:ArrayType[248434-248440]"
  }, {
    "left" : "long list[]",
    "right" : "long list[]",
    "info" : "SingleVariableDeclaration[248448-248459]:SingleVariableDeclaration[248448-248459]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[248461-248509]:Block[248461-248509]"
  }, {
    "left" : "return expand(list, list.length << 1);",
    "right" : "return expand(list, list.length << 1);",
    "info" : "ReturnStatement[248467-248505]:ReturnStatement[248467-248505]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[248513-248519]:Modifier[248513-248519]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[248520-248526]:Modifier[248520-248526]"
  }, {
    "left" : "long[]",
    "right" : "long[]",
    "info" : "ArrayType[248527-248533]:ArrayType[248527-248533]"
  }, {
    "left" : "long list[]",
    "right" : "long list[]",
    "info" : "SingleVariableDeclaration[248541-248552]:SingleVariableDeclaration[248541-248552]"
  }, {
    "left" : "int newSize",
    "right" : "int newSize",
    "info" : "SingleVariableDeclaration[248554-248565]:SingleVariableDeclaration[248554-248565]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[248567-248698]:Block[248567-248698]"
  }, {
    "left" : "long temp[] = new long[newSize];",
    "right" : "long temp[] = new long[newSize];",
    "info" : "VariableDeclarationStatement[248573-248605]:VariableDeclarationStatement[248573-248605]"
  }, {
    "left" : "System.arraycopy(list, 0, temp, 0, Math.min(newSize, list.length));",
    "right" : "System.arraycopy(list, 0, temp, 0, Math.min(newSize, list.length));",
    "info" : "ExpressionStatement[248610-248677]:ExpressionStatement[248610-248677]"
  }, {
    "left" : "return temp;",
    "right" : "return temp;",
    "info" : "ReturnStatement[248682-248694]:ReturnStatement[248682-248694]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[248702-248708]:Modifier[248702-248708]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[248709-248715]:Modifier[248709-248715]"
  }, {
    "left" : "float[]",
    "right" : "float[]",
    "info" : "ArrayType[248716-248723]:ArrayType[248716-248723]"
  }, {
    "left" : "float list[]",
    "right" : "float list[]",
    "info" : "SingleVariableDeclaration[248731-248743]:SingleVariableDeclaration[248731-248743]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[248745-248793]:Block[248745-248793]"
  }, {
    "left" : "return expand(list, list.length << 1);",
    "right" : "return expand(list, list.length << 1);",
    "info" : "ReturnStatement[248751-248789]:ReturnStatement[248751-248789]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[248797-248803]:Modifier[248797-248803]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[248804-248810]:Modifier[248804-248810]"
  }, {
    "left" : "float[]",
    "right" : "float[]",
    "info" : "ArrayType[248811-248818]:ArrayType[248811-248818]"
  }, {
    "left" : "float list[]",
    "right" : "float list[]",
    "info" : "SingleVariableDeclaration[248826-248838]:SingleVariableDeclaration[248826-248838]"
  }, {
    "left" : "int newSize",
    "right" : "int newSize",
    "info" : "SingleVariableDeclaration[248840-248851]:SingleVariableDeclaration[248840-248851]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[248853-248986]:Block[248853-248986]"
  }, {
    "left" : "float temp[] = new float[newSize];",
    "right" : "float temp[] = new float[newSize];",
    "info" : "VariableDeclarationStatement[248859-248893]:VariableDeclarationStatement[248859-248893]"
  }, {
    "left" : "System.arraycopy(list, 0, temp, 0, Math.min(newSize, list.length));",
    "right" : "System.arraycopy(list, 0, temp, 0, Math.min(newSize, list.length));",
    "info" : "ExpressionStatement[248898-248965]:ExpressionStatement[248898-248965]"
  }, {
    "left" : "return temp;",
    "right" : "return temp;",
    "info" : "ReturnStatement[248970-248982]:ReturnStatement[248970-248982]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[248990-248996]:Modifier[248990-248996]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[248997-249003]:Modifier[248997-249003]"
  }, {
    "left" : "double[]",
    "right" : "double[]",
    "info" : "ArrayType[249004-249012]:ArrayType[249004-249012]"
  }, {
    "left" : "double list[]",
    "right" : "double list[]",
    "info" : "SingleVariableDeclaration[249020-249033]:SingleVariableDeclaration[249020-249033]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[249035-249083]:Block[249035-249083]"
  }, {
    "left" : "return expand(list, list.length << 1);",
    "right" : "return expand(list, list.length << 1);",
    "info" : "ReturnStatement[249041-249079]:ReturnStatement[249041-249079]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[249087-249093]:Modifier[249087-249093]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[249094-249100]:Modifier[249094-249100]"
  }, {
    "left" : "double[]",
    "right" : "double[]",
    "info" : "ArrayType[249101-249109]:ArrayType[249101-249109]"
  }, {
    "left" : "double list[]",
    "right" : "double list[]",
    "info" : "SingleVariableDeclaration[249117-249130]:SingleVariableDeclaration[249117-249130]"
  }, {
    "left" : "int newSize",
    "right" : "int newSize",
    "info" : "SingleVariableDeclaration[249132-249143]:SingleVariableDeclaration[249132-249143]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[249145-249280]:Block[249145-249280]"
  }, {
    "left" : "double temp[] = new double[newSize];",
    "right" : "double temp[] = new double[newSize];",
    "info" : "VariableDeclarationStatement[249151-249187]:VariableDeclarationStatement[249151-249187]"
  }, {
    "left" : "System.arraycopy(list, 0, temp, 0, Math.min(newSize, list.length));",
    "right" : "System.arraycopy(list, 0, temp, 0, Math.min(newSize, list.length));",
    "info" : "ExpressionStatement[249192-249259]:ExpressionStatement[249192-249259]"
  }, {
    "left" : "return temp;",
    "right" : "return temp;",
    "info" : "ReturnStatement[249264-249276]:ReturnStatement[249264-249276]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[249284-249290]:Modifier[249284-249290]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[249291-249297]:Modifier[249291-249297]"
  }, {
    "left" : "String[]",
    "right" : "String[]",
    "info" : "ArrayType[249298-249306]:ArrayType[249298-249306]"
  }, {
    "left" : "String list[]",
    "right" : "String list[]",
    "info" : "SingleVariableDeclaration[249314-249327]:SingleVariableDeclaration[249314-249327]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[249329-249377]:Block[249329-249377]"
  }, {
    "left" : "return expand(list, list.length << 1);",
    "right" : "return expand(list, list.length << 1);",
    "info" : "ReturnStatement[249335-249373]:ReturnStatement[249335-249373]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[249381-249387]:Modifier[249381-249387]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[249388-249394]:Modifier[249388-249394]"
  }, {
    "left" : "String[]",
    "right" : "String[]",
    "info" : "ArrayType[249395-249403]:ArrayType[249395-249403]"
  }, {
    "left" : "String list[]",
    "right" : "String list[]",
    "info" : "SingleVariableDeclaration[249411-249424]:SingleVariableDeclaration[249411-249424]"
  }, {
    "left" : "int newSize",
    "right" : "int newSize",
    "info" : "SingleVariableDeclaration[249426-249437]:SingleVariableDeclaration[249426-249437]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[249439-249630]:Block[249439-249630]"
  }, {
    "left" : "String temp[] = new String[newSize];",
    "right" : "String temp[] = new String[newSize];",
    "info" : "VariableDeclarationStatement[249445-249481]:VariableDeclarationStatement[249445-249481]"
  }, {
    "left" : "System.arraycopy(list, 0, temp, 0, Math.min(newSize, list.length));",
    "right" : "System.arraycopy(list, 0, temp, 0, Math.min(newSize, list.length));",
    "info" : "ExpressionStatement[249542-249609]:ExpressionStatement[249542-249609]"
  }, {
    "left" : "return temp;",
    "right" : "return temp;",
    "info" : "ReturnStatement[249614-249626]:ReturnStatement[249614-249626]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[249658-249664]:Modifier[249658-249664]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[249665-249671]:Modifier[249665-249671]"
  }, {
    "left" : "Object",
    "right" : "Object",
    "info" : "SimpleType[249672-249678]:SimpleType[249672-249678]"
  }, {
    "left" : "Object array",
    "right" : "Object array",
    "info" : "SingleVariableDeclaration[249686-249698]:SingleVariableDeclaration[249686-249698]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[249700-249760]:Block[249700-249760]"
  }, {
    "left" : "return expand(array, Array.getLength(array) << 1);",
    "right" : "return expand(array, Array.getLength(array) << 1);",
    "info" : "ReturnStatement[249706-249756]:ReturnStatement[249706-249756]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[249764-249770]:Modifier[249764-249770]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[249771-249777]:Modifier[249771-249777]"
  }, {
    "left" : "Object",
    "right" : "Object",
    "info" : "SimpleType[249778-249784]:SimpleType[249778-249784]"
  }, {
    "left" : "Object list",
    "right" : "Object list",
    "info" : "SingleVariableDeclaration[249792-249803]:SingleVariableDeclaration[249792-249803]"
  }, {
    "left" : "int newSize",
    "right" : "int newSize",
    "info" : "SingleVariableDeclaration[249805-249816]:SingleVariableDeclaration[249805-249816]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[249818-250051]:Block[249818-250051]"
  }, {
    "left" : "Class<?> type = list.getClass().getComponentType();",
    "right" : "Class<?> type = list.getClass().getComponentType();",
    "info" : "VariableDeclarationStatement[249824-249875]:VariableDeclarationStatement[249824-249875]"
  }, {
    "left" : "Object temp = Array.newInstance(type, newSize);",
    "right" : "Object temp = Array.newInstance(type, newSize);",
    "info" : "VariableDeclarationStatement[249880-249927]:VariableDeclarationStatement[249880-249927]"
  }, {
    "left" : "System.arraycopy(list, 0, temp, 0,\n                     Math.min(Array.getLength(list), newSize));",
    "right" : "System.arraycopy(list, 0, temp, 0,\n                     Math.min(Array.getLength(list), newSize));",
    "info" : "ExpressionStatement[249932-250030]:ExpressionStatement[249932-250030]"
  }, {
    "left" : "return temp;",
    "right" : "return temp;",
    "info" : "ReturnStatement[250035-250047]:ReturnStatement[250035-250047]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[250868-250874]:Modifier[250868-250874]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[250875-250881]:Modifier[250875-250881]"
  }, {
    "left" : "byte[]",
    "right" : "byte[]",
    "info" : "ArrayType[250882-250888]:ArrayType[250882-250888]"
  }, {
    "left" : "byte array[]",
    "right" : "byte array[]",
    "info" : "SingleVariableDeclaration[250896-250908]:SingleVariableDeclaration[250896-250908]"
  }, {
    "left" : "byte value",
    "right" : "byte value",
    "info" : "SingleVariableDeclaration[250910-250920]:SingleVariableDeclaration[250910-250920]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[250922-251025]:Block[250922-251025]"
  }, {
    "left" : "array = expand(array, array.length + 1);",
    "right" : "array = expand(array, array.length + 1);",
    "info" : "ExpressionStatement[250928-250968]:ExpressionStatement[250928-250968]"
  }, {
    "left" : "array[array.length-1] = value;",
    "right" : "array[array.length-1] = value;",
    "info" : "ExpressionStatement[250973-251003]:ExpressionStatement[250973-251003]"
  }, {
    "left" : "return array;",
    "right" : "return array;",
    "info" : "ReturnStatement[251008-251021]:ReturnStatement[251008-251021]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[251029-251035]:Modifier[251029-251035]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[251036-251042]:Modifier[251036-251042]"
  }, {
    "left" : "char[]",
    "right" : "char[]",
    "info" : "ArrayType[251043-251049]:ArrayType[251043-251049]"
  }, {
    "left" : "char array[]",
    "right" : "char array[]",
    "info" : "SingleVariableDeclaration[251057-251069]:SingleVariableDeclaration[251057-251069]"
  }, {
    "left" : "char value",
    "right" : "char value",
    "info" : "SingleVariableDeclaration[251071-251081]:SingleVariableDeclaration[251071-251081]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[251083-251186]:Block[251083-251186]"
  }, {
    "left" : "array = expand(array, array.length + 1);",
    "right" : "array = expand(array, array.length + 1);",
    "info" : "ExpressionStatement[251089-251129]:ExpressionStatement[251089-251129]"
  }, {
    "left" : "array[array.length-1] = value;",
    "right" : "array[array.length-1] = value;",
    "info" : "ExpressionStatement[251134-251164]:ExpressionStatement[251134-251164]"
  }, {
    "left" : "return array;",
    "right" : "return array;",
    "info" : "ReturnStatement[251169-251182]:ReturnStatement[251169-251182]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[251190-251196]:Modifier[251190-251196]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[251197-251203]:Modifier[251197-251203]"
  }, {
    "left" : "int[]",
    "right" : "int[]",
    "info" : "ArrayType[251204-251209]:ArrayType[251204-251209]"
  }, {
    "left" : "int array[]",
    "right" : "int array[]",
    "info" : "SingleVariableDeclaration[251217-251228]:SingleVariableDeclaration[251217-251228]"
  }, {
    "left" : "int value",
    "right" : "int value",
    "info" : "SingleVariableDeclaration[251230-251239]:SingleVariableDeclaration[251230-251239]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[251241-251344]:Block[251241-251344]"
  }, {
    "left" : "array = expand(array, array.length + 1);",
    "right" : "array = expand(array, array.length + 1);",
    "info" : "ExpressionStatement[251247-251287]:ExpressionStatement[251247-251287]"
  }, {
    "left" : "array[array.length-1] = value;",
    "right" : "array[array.length-1] = value;",
    "info" : "ExpressionStatement[251292-251322]:ExpressionStatement[251292-251322]"
  }, {
    "left" : "return array;",
    "right" : "return array;",
    "info" : "ReturnStatement[251327-251340]:ReturnStatement[251327-251340]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[251348-251354]:Modifier[251348-251354]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[251355-251361]:Modifier[251355-251361]"
  }, {
    "left" : "float[]",
    "right" : "float[]",
    "info" : "ArrayType[251362-251369]:ArrayType[251362-251369]"
  }, {
    "left" : "float array[]",
    "right" : "float array[]",
    "info" : "SingleVariableDeclaration[251377-251390]:SingleVariableDeclaration[251377-251390]"
  }, {
    "left" : "float value",
    "right" : "float value",
    "info" : "SingleVariableDeclaration[251392-251403]:SingleVariableDeclaration[251392-251403]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[251405-251508]:Block[251405-251508]"
  }, {
    "left" : "array = expand(array, array.length + 1);",
    "right" : "array = expand(array, array.length + 1);",
    "info" : "ExpressionStatement[251411-251451]:ExpressionStatement[251411-251451]"
  }, {
    "left" : "array[array.length-1] = value;",
    "right" : "array[array.length-1] = value;",
    "info" : "ExpressionStatement[251456-251486]:ExpressionStatement[251456-251486]"
  }, {
    "left" : "return array;",
    "right" : "return array;",
    "info" : "ReturnStatement[251491-251504]:ReturnStatement[251491-251504]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[251512-251518]:Modifier[251512-251518]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[251519-251525]:Modifier[251519-251525]"
  }, {
    "left" : "String[]",
    "right" : "String[]",
    "info" : "ArrayType[251526-251534]:ArrayType[251526-251534]"
  }, {
    "left" : "String array[]",
    "right" : "String array[]",
    "info" : "SingleVariableDeclaration[251542-251556]:SingleVariableDeclaration[251542-251556]"
  }, {
    "left" : "String value",
    "right" : "String value",
    "info" : "SingleVariableDeclaration[251558-251570]:SingleVariableDeclaration[251558-251570]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[251572-251675]:Block[251572-251675]"
  }, {
    "left" : "array = expand(array, array.length + 1);",
    "right" : "array = expand(array, array.length + 1);",
    "info" : "ExpressionStatement[251578-251618]:ExpressionStatement[251578-251618]"
  }, {
    "left" : "array[array.length-1] = value;",
    "right" : "array[array.length-1] = value;",
    "info" : "ExpressionStatement[251623-251653]:ExpressionStatement[251623-251653]"
  }, {
    "left" : "return array;",
    "right" : "return array;",
    "info" : "ReturnStatement[251658-251671]:ReturnStatement[251658-251671]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[251679-251685]:Modifier[251679-251685]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[251686-251692]:Modifier[251686-251692]"
  }, {
    "left" : "Object",
    "right" : "Object",
    "info" : "SimpleType[251693-251699]:SimpleType[251693-251699]"
  }, {
    "left" : "Object array",
    "right" : "Object array",
    "info" : "SingleVariableDeclaration[251707-251719]:SingleVariableDeclaration[251707-251719]"
  }, {
    "left" : "Object value",
    "right" : "Object value",
    "info" : "SingleVariableDeclaration[251721-251733]:SingleVariableDeclaration[251721-251733]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[251735-251875]:Block[251735-251875]"
  }, {
    "left" : "int length = Array.getLength(array);",
    "right" : "int length = Array.getLength(array);",
    "info" : "VariableDeclarationStatement[251741-251777]:VariableDeclarationStatement[251741-251777]"
  }, {
    "left" : "array = expand(array, length + 1);",
    "right" : "array = expand(array, length + 1);",
    "info" : "ExpressionStatement[251782-251816]:ExpressionStatement[251782-251816]"
  }, {
    "left" : "Array.set(array, length, value);",
    "right" : "Array.set(array, length, value);",
    "info" : "ExpressionStatement[251821-251853]:ExpressionStatement[251821-251853]"
  }, {
    "left" : "return array;",
    "right" : "return array;",
    "info" : "ReturnStatement[251858-251871]:ReturnStatement[251858-251871]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[252422-252428]:Modifier[252422-252428]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[252429-252435]:Modifier[252429-252435]"
  }, {
    "left" : "boolean[]",
    "right" : "boolean[]",
    "info" : "ArrayType[252436-252445]:ArrayType[252436-252445]"
  }, {
    "left" : "boolean list[]",
    "right" : "boolean list[]",
    "info" : "SingleVariableDeclaration[252454-252468]:SingleVariableDeclaration[252454-252468]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[252470-252518]:Block[252470-252518]"
  }, {
    "left" : "return subset(list, 0, list.length-1);",
    "right" : "return subset(list, 0, list.length-1);",
    "info" : "ReturnStatement[252476-252514]:ReturnStatement[252476-252514]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[252522-252528]:Modifier[252522-252528]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[252529-252535]:Modifier[252529-252535]"
  }, {
    "left" : "byte[]",
    "right" : "byte[]",
    "info" : "ArrayType[252536-252542]:ArrayType[252536-252542]"
  }, {
    "left" : "byte list[]",
    "right" : "byte list[]",
    "info" : "SingleVariableDeclaration[252551-252562]:SingleVariableDeclaration[252551-252562]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[252564-252612]:Block[252564-252612]"
  }, {
    "left" : "return subset(list, 0, list.length-1);",
    "right" : "return subset(list, 0, list.length-1);",
    "info" : "ReturnStatement[252570-252608]:ReturnStatement[252570-252608]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[252616-252622]:Modifier[252616-252622]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[252623-252629]:Modifier[252623-252629]"
  }, {
    "left" : "char[]",
    "right" : "char[]",
    "info" : "ArrayType[252630-252636]:ArrayType[252630-252636]"
  }, {
    "left" : "char list[]",
    "right" : "char list[]",
    "info" : "SingleVariableDeclaration[252645-252656]:SingleVariableDeclaration[252645-252656]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[252658-252706]:Block[252658-252706]"
  }, {
    "left" : "return subset(list, 0, list.length-1);",
    "right" : "return subset(list, 0, list.length-1);",
    "info" : "ReturnStatement[252664-252702]:ReturnStatement[252664-252702]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[252710-252716]:Modifier[252710-252716]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[252717-252723]:Modifier[252717-252723]"
  }, {
    "left" : "int[]",
    "right" : "int[]",
    "info" : "ArrayType[252724-252729]:ArrayType[252724-252729]"
  }, {
    "left" : "int list[]",
    "right" : "int list[]",
    "info" : "SingleVariableDeclaration[252738-252748]:SingleVariableDeclaration[252738-252748]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[252750-252798]:Block[252750-252798]"
  }, {
    "left" : "return subset(list, 0, list.length-1);",
    "right" : "return subset(list, 0, list.length-1);",
    "info" : "ReturnStatement[252756-252794]:ReturnStatement[252756-252794]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[252802-252808]:Modifier[252802-252808]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[252809-252815]:Modifier[252809-252815]"
  }, {
    "left" : "float[]",
    "right" : "float[]",
    "info" : "ArrayType[252816-252823]:ArrayType[252816-252823]"
  }, {
    "left" : "float list[]",
    "right" : "float list[]",
    "info" : "SingleVariableDeclaration[252832-252844]:SingleVariableDeclaration[252832-252844]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[252846-252894]:Block[252846-252894]"
  }, {
    "left" : "return subset(list, 0, list.length-1);",
    "right" : "return subset(list, 0, list.length-1);",
    "info" : "ReturnStatement[252852-252890]:ReturnStatement[252852-252890]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[252898-252904]:Modifier[252898-252904]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[252905-252911]:Modifier[252905-252911]"
  }, {
    "left" : "String[]",
    "right" : "String[]",
    "info" : "ArrayType[252912-252920]:ArrayType[252912-252920]"
  }, {
    "left" : "String list[]",
    "right" : "String list[]",
    "info" : "SingleVariableDeclaration[252929-252942]:SingleVariableDeclaration[252929-252942]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[252944-252992]:Block[252944-252992]"
  }, {
    "left" : "return subset(list, 0, list.length-1);",
    "right" : "return subset(list, 0, list.length-1);",
    "info" : "ReturnStatement[252950-252988]:ReturnStatement[252950-252988]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[252996-253002]:Modifier[252996-253002]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[253003-253009]:Modifier[253003-253009]"
  }, {
    "left" : "Object",
    "right" : "Object",
    "info" : "SimpleType[253010-253016]:SimpleType[253010-253016]"
  }, {
    "left" : "Object list",
    "right" : "Object list",
    "info" : "SingleVariableDeclaration[253025-253036]:SingleVariableDeclaration[253025-253036]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[253038-253123]:Block[253038-253123]"
  }, {
    "left" : "int length = Array.getLength(list);",
    "right" : "int length = Array.getLength(list);",
    "info" : "VariableDeclarationStatement[253044-253079]:VariableDeclarationStatement[253044-253079]"
  }, {
    "left" : "return subset(list, 0, length - 1);",
    "right" : "return subset(list, 0, length - 1);",
    "info" : "ReturnStatement[253084-253119]:ReturnStatement[253084-253119]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[253997-254003]:Modifier[253997-254003]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[254004-254009]:Modifier[254004-254009]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[254010-254016]:Modifier[254010-254016]"
  }, {
    "left" : "boolean[]",
    "right" : "boolean[]",
    "info" : "ArrayType[254017-254026]:ArrayType[254017-254026]"
  }, {
    "left" : "boolean list[]",
    "right" : "boolean list[]",
    "info" : "SingleVariableDeclaration[254034-254048]:SingleVariableDeclaration[254034-254048]"
  }, {
    "left" : "boolean value",
    "right" : "boolean value",
    "info" : "SingleVariableDeclaration[254089-254102]:SingleVariableDeclaration[254089-254102]"
  }, {
    "left" : "int index",
    "right" : "int index",
    "info" : "SingleVariableDeclaration[254104-254113]:SingleVariableDeclaration[254104-254113]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[254115-254374]:Block[254115-254374]"
  }, {
    "left" : "boolean outgoing[] = new boolean[list.length + 1];",
    "right" : "boolean outgoing[] = new boolean[list.length + 1];",
    "info" : "VariableDeclarationStatement[254121-254171]:VariableDeclarationStatement[254121-254171]"
  }, {
    "left" : "System.arraycopy(list, 0, outgoing, 0, index);",
    "right" : "System.arraycopy(list, 0, outgoing, 0, index);",
    "info" : "ExpressionStatement[254176-254222]:ExpressionStatement[254176-254222]"
  }, {
    "left" : "outgoing[index] = value;",
    "right" : "outgoing[index] = value;",
    "info" : "ExpressionStatement[254227-254251]:ExpressionStatement[254227-254251]"
  }, {
    "left" : "System.arraycopy(list, index, outgoing, index + 1,\n                     list.length - index);",
    "right" : "System.arraycopy(list, index, outgoing, index + 1,\n                     list.length - index);",
    "info" : "ExpressionStatement[254256-254349]:ExpressionStatement[254256-254349]"
  }, {
    "left" : "return outgoing;",
    "right" : "return outgoing;",
    "info" : "ReturnStatement[254354-254370]:ReturnStatement[254354-254370]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[254378-254384]:Modifier[254378-254384]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[254385-254390]:Modifier[254385-254390]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[254391-254397]:Modifier[254391-254397]"
  }, {
    "left" : "boolean[]",
    "right" : "boolean[]",
    "info" : "ArrayType[254398-254407]:ArrayType[254398-254407]"
  }, {
    "left" : "boolean list[]",
    "right" : "boolean list[]",
    "info" : "SingleVariableDeclaration[254415-254429]:SingleVariableDeclaration[254415-254429]"
  }, {
    "left" : "boolean value[]",
    "right" : "boolean value[]",
    "info" : "SingleVariableDeclaration[254470-254485]:SingleVariableDeclaration[254470-254485]"
  }, {
    "left" : "int index",
    "right" : "int index",
    "info" : "SingleVariableDeclaration[254487-254496]:SingleVariableDeclaration[254487-254496]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[254498-254813]:Block[254498-254813]"
  }, {
    "left" : "boolean outgoing[] = new boolean[list.length + value.length];",
    "right" : "boolean outgoing[] = new boolean[list.length + value.length];",
    "info" : "VariableDeclarationStatement[254504-254565]:VariableDeclarationStatement[254504-254565]"
  }, {
    "left" : "System.arraycopy(list, 0, outgoing, 0, index);",
    "right" : "System.arraycopy(list, 0, outgoing, 0, index);",
    "info" : "ExpressionStatement[254570-254616]:ExpressionStatement[254570-254616]"
  }, {
    "left" : "System.arraycopy(value, 0, outgoing, index, value.length);",
    "right" : "System.arraycopy(value, 0, outgoing, index, value.length);",
    "info" : "ExpressionStatement[254621-254679]:ExpressionStatement[254621-254679]"
  }, {
    "left" : "System.arraycopy(list, index, outgoing, index + value.length,\n                     list.length - index);",
    "right" : "System.arraycopy(list, index, outgoing, index + value.length,\n                     list.length - index);",
    "info" : "ExpressionStatement[254684-254788]:ExpressionStatement[254684-254788]"
  }, {
    "left" : "return outgoing;",
    "right" : "return outgoing;",
    "info" : "ReturnStatement[254793-254809]:ReturnStatement[254793-254809]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[254817-254823]:Modifier[254817-254823]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[254824-254829]:Modifier[254824-254829]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[254830-254836]:Modifier[254830-254836]"
  }, {
    "left" : "byte[]",
    "right" : "byte[]",
    "info" : "ArrayType[254837-254843]:ArrayType[254837-254843]"
  }, {
    "left" : "byte list[]",
    "right" : "byte list[]",
    "info" : "SingleVariableDeclaration[254851-254862]:SingleVariableDeclaration[254851-254862]"
  }, {
    "left" : "byte value",
    "right" : "byte value",
    "info" : "SingleVariableDeclaration[254900-254910]:SingleVariableDeclaration[254900-254910]"
  }, {
    "left" : "int index",
    "right" : "int index",
    "info" : "SingleVariableDeclaration[254912-254921]:SingleVariableDeclaration[254912-254921]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[254923-255176]:Block[254923-255176]"
  }, {
    "left" : "byte outgoing[] = new byte[list.length + 1];",
    "right" : "byte outgoing[] = new byte[list.length + 1];",
    "info" : "VariableDeclarationStatement[254929-254973]:VariableDeclarationStatement[254929-254973]"
  }, {
    "left" : "System.arraycopy(list, 0, outgoing, 0, index);",
    "right" : "System.arraycopy(list, 0, outgoing, 0, index);",
    "info" : "ExpressionStatement[254978-255024]:ExpressionStatement[254978-255024]"
  }, {
    "left" : "outgoing[index] = value;",
    "right" : "outgoing[index] = value;",
    "info" : "ExpressionStatement[255029-255053]:ExpressionStatement[255029-255053]"
  }, {
    "left" : "System.arraycopy(list, index, outgoing, index + 1,\n                     list.length - index);",
    "right" : "System.arraycopy(list, index, outgoing, index + 1,\n                     list.length - index);",
    "info" : "ExpressionStatement[255058-255151]:ExpressionStatement[255058-255151]"
  }, {
    "left" : "return outgoing;",
    "right" : "return outgoing;",
    "info" : "ReturnStatement[255156-255172]:ReturnStatement[255156-255172]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[255180-255186]:Modifier[255180-255186]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[255187-255192]:Modifier[255187-255192]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[255193-255199]:Modifier[255193-255199]"
  }, {
    "left" : "byte[]",
    "right" : "byte[]",
    "info" : "ArrayType[255200-255206]:ArrayType[255200-255206]"
  }, {
    "left" : "byte list[]",
    "right" : "byte list[]",
    "info" : "SingleVariableDeclaration[255214-255225]:SingleVariableDeclaration[255214-255225]"
  }, {
    "left" : "byte value[]",
    "right" : "byte value[]",
    "info" : "SingleVariableDeclaration[255263-255275]:SingleVariableDeclaration[255263-255275]"
  }, {
    "left" : "int index",
    "right" : "int index",
    "info" : "SingleVariableDeclaration[255277-255286]:SingleVariableDeclaration[255277-255286]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[255288-255597]:Block[255288-255597]"
  }, {
    "left" : "byte outgoing[] = new byte[list.length + value.length];",
    "right" : "byte outgoing[] = new byte[list.length + value.length];",
    "info" : "VariableDeclarationStatement[255294-255349]:VariableDeclarationStatement[255294-255349]"
  }, {
    "left" : "System.arraycopy(list, 0, outgoing, 0, index);",
    "right" : "System.arraycopy(list, 0, outgoing, 0, index);",
    "info" : "ExpressionStatement[255354-255400]:ExpressionStatement[255354-255400]"
  }, {
    "left" : "System.arraycopy(value, 0, outgoing, index, value.length);",
    "right" : "System.arraycopy(value, 0, outgoing, index, value.length);",
    "info" : "ExpressionStatement[255405-255463]:ExpressionStatement[255405-255463]"
  }, {
    "left" : "System.arraycopy(list, index, outgoing, index + value.length,\n                     list.length - index);",
    "right" : "System.arraycopy(list, index, outgoing, index + value.length,\n                     list.length - index);",
    "info" : "ExpressionStatement[255468-255572]:ExpressionStatement[255468-255572]"
  }, {
    "left" : "return outgoing;",
    "right" : "return outgoing;",
    "info" : "ReturnStatement[255577-255593]:ReturnStatement[255577-255593]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[255602-255608]:Modifier[255602-255608]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[255609-255614]:Modifier[255609-255614]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[255615-255621]:Modifier[255615-255621]"
  }, {
    "left" : "char[]",
    "right" : "char[]",
    "info" : "ArrayType[255622-255628]:ArrayType[255622-255628]"
  }, {
    "left" : "char list[]",
    "right" : "char list[]",
    "info" : "SingleVariableDeclaration[255636-255647]:SingleVariableDeclaration[255636-255647]"
  }, {
    "left" : "char value",
    "right" : "char value",
    "info" : "SingleVariableDeclaration[255685-255695]:SingleVariableDeclaration[255685-255695]"
  }, {
    "left" : "int index",
    "right" : "int index",
    "info" : "SingleVariableDeclaration[255697-255706]:SingleVariableDeclaration[255697-255706]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[255708-255961]:Block[255708-255961]"
  }, {
    "left" : "char outgoing[] = new char[list.length + 1];",
    "right" : "char outgoing[] = new char[list.length + 1];",
    "info" : "VariableDeclarationStatement[255714-255758]:VariableDeclarationStatement[255714-255758]"
  }, {
    "left" : "System.arraycopy(list, 0, outgoing, 0, index);",
    "right" : "System.arraycopy(list, 0, outgoing, 0, index);",
    "info" : "ExpressionStatement[255763-255809]:ExpressionStatement[255763-255809]"
  }, {
    "left" : "outgoing[index] = value;",
    "right" : "outgoing[index] = value;",
    "info" : "ExpressionStatement[255814-255838]:ExpressionStatement[255814-255838]"
  }, {
    "left" : "System.arraycopy(list, index, outgoing, index + 1,\n                     list.length - index);",
    "right" : "System.arraycopy(list, index, outgoing, index + 1,\n                     list.length - index);",
    "info" : "ExpressionStatement[255843-255936]:ExpressionStatement[255843-255936]"
  }, {
    "left" : "return outgoing;",
    "right" : "return outgoing;",
    "info" : "ReturnStatement[255941-255957]:ReturnStatement[255941-255957]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[255965-255971]:Modifier[255965-255971]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[255972-255977]:Modifier[255972-255977]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[255978-255984]:Modifier[255978-255984]"
  }, {
    "left" : "char[]",
    "right" : "char[]",
    "info" : "ArrayType[255985-255991]:ArrayType[255985-255991]"
  }, {
    "left" : "char list[]",
    "right" : "char list[]",
    "info" : "SingleVariableDeclaration[255999-256010]:SingleVariableDeclaration[255999-256010]"
  }, {
    "left" : "char value[]",
    "right" : "char value[]",
    "info" : "SingleVariableDeclaration[256048-256060]:SingleVariableDeclaration[256048-256060]"
  }, {
    "left" : "int index",
    "right" : "int index",
    "info" : "SingleVariableDeclaration[256062-256071]:SingleVariableDeclaration[256062-256071]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[256073-256382]:Block[256073-256382]"
  }, {
    "left" : "char outgoing[] = new char[list.length + value.length];",
    "right" : "char outgoing[] = new char[list.length + value.length];",
    "info" : "VariableDeclarationStatement[256079-256134]:VariableDeclarationStatement[256079-256134]"
  }, {
    "left" : "System.arraycopy(list, 0, outgoing, 0, index);",
    "right" : "System.arraycopy(list, 0, outgoing, 0, index);",
    "info" : "ExpressionStatement[256139-256185]:ExpressionStatement[256139-256185]"
  }, {
    "left" : "System.arraycopy(value, 0, outgoing, index, value.length);",
    "right" : "System.arraycopy(value, 0, outgoing, index, value.length);",
    "info" : "ExpressionStatement[256190-256248]:ExpressionStatement[256190-256248]"
  }, {
    "left" : "System.arraycopy(list, index, outgoing, index + value.length,\n                     list.length - index);",
    "right" : "System.arraycopy(list, index, outgoing, index + value.length,\n                     list.length - index);",
    "info" : "ExpressionStatement[256253-256357]:ExpressionStatement[256253-256357]"
  }, {
    "left" : "return outgoing;",
    "right" : "return outgoing;",
    "info" : "ReturnStatement[256362-256378]:ReturnStatement[256362-256378]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[256386-256392]:Modifier[256386-256392]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[256393-256398]:Modifier[256393-256398]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[256399-256405]:Modifier[256399-256405]"
  }, {
    "left" : "int[]",
    "right" : "int[]",
    "info" : "ArrayType[256406-256411]:ArrayType[256406-256411]"
  }, {
    "left" : "int list[]",
    "right" : "int list[]",
    "info" : "SingleVariableDeclaration[256419-256429]:SingleVariableDeclaration[256419-256429]"
  }, {
    "left" : "int value",
    "right" : "int value",
    "info" : "SingleVariableDeclaration[256466-256475]:SingleVariableDeclaration[256466-256475]"
  }, {
    "left" : "int index",
    "right" : "int index",
    "info" : "SingleVariableDeclaration[256477-256486]:SingleVariableDeclaration[256477-256486]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[256488-256739]:Block[256488-256739]"
  }, {
    "left" : "int outgoing[] = new int[list.length + 1];",
    "right" : "int outgoing[] = new int[list.length + 1];",
    "info" : "VariableDeclarationStatement[256494-256536]:VariableDeclarationStatement[256494-256536]"
  }, {
    "left" : "System.arraycopy(list, 0, outgoing, 0, index);",
    "right" : "System.arraycopy(list, 0, outgoing, 0, index);",
    "info" : "ExpressionStatement[256541-256587]:ExpressionStatement[256541-256587]"
  }, {
    "left" : "outgoing[index] = value;",
    "right" : "outgoing[index] = value;",
    "info" : "ExpressionStatement[256592-256616]:ExpressionStatement[256592-256616]"
  }, {
    "left" : "System.arraycopy(list, index, outgoing, index + 1,\n                     list.length - index);",
    "right" : "System.arraycopy(list, index, outgoing, index + 1,\n                     list.length - index);",
    "info" : "ExpressionStatement[256621-256714]:ExpressionStatement[256621-256714]"
  }, {
    "left" : "return outgoing;",
    "right" : "return outgoing;",
    "info" : "ReturnStatement[256719-256735]:ReturnStatement[256719-256735]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[256743-256749]:Modifier[256743-256749]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[256750-256755]:Modifier[256750-256755]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[256756-256762]:Modifier[256756-256762]"
  }, {
    "left" : "int[]",
    "right" : "int[]",
    "info" : "ArrayType[256763-256768]:ArrayType[256763-256768]"
  }, {
    "left" : "int list[]",
    "right" : "int list[]",
    "info" : "SingleVariableDeclaration[256776-256786]:SingleVariableDeclaration[256776-256786]"
  }, {
    "left" : "int value[]",
    "right" : "int value[]",
    "info" : "SingleVariableDeclaration[256823-256834]:SingleVariableDeclaration[256823-256834]"
  }, {
    "left" : "int index",
    "right" : "int index",
    "info" : "SingleVariableDeclaration[256836-256845]:SingleVariableDeclaration[256836-256845]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[256847-257154]:Block[256847-257154]"
  }, {
    "left" : "int outgoing[] = new int[list.length + value.length];",
    "right" : "int outgoing[] = new int[list.length + value.length];",
    "info" : "VariableDeclarationStatement[256853-256906]:VariableDeclarationStatement[256853-256906]"
  }, {
    "left" : "System.arraycopy(list, 0, outgoing, 0, index);",
    "right" : "System.arraycopy(list, 0, outgoing, 0, index);",
    "info" : "ExpressionStatement[256911-256957]:ExpressionStatement[256911-256957]"
  }, {
    "left" : "System.arraycopy(value, 0, outgoing, index, value.length);",
    "right" : "System.arraycopy(value, 0, outgoing, index, value.length);",
    "info" : "ExpressionStatement[256962-257020]:ExpressionStatement[256962-257020]"
  }, {
    "left" : "System.arraycopy(list, index, outgoing, index + value.length,\n                     list.length - index);",
    "right" : "System.arraycopy(list, index, outgoing, index + value.length,\n                     list.length - index);",
    "info" : "ExpressionStatement[257025-257129]:ExpressionStatement[257025-257129]"
  }, {
    "left" : "return outgoing;",
    "right" : "return outgoing;",
    "info" : "ReturnStatement[257134-257150]:ReturnStatement[257134-257150]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[257158-257164]:Modifier[257158-257164]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[257165-257170]:Modifier[257165-257170]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[257171-257177]:Modifier[257171-257177]"
  }, {
    "left" : "float[]",
    "right" : "float[]",
    "info" : "ArrayType[257178-257185]:ArrayType[257178-257185]"
  }, {
    "left" : "float list[]",
    "right" : "float list[]",
    "info" : "SingleVariableDeclaration[257193-257205]:SingleVariableDeclaration[257193-257205]"
  }, {
    "left" : "float value",
    "right" : "float value",
    "info" : "SingleVariableDeclaration[257244-257255]:SingleVariableDeclaration[257244-257255]"
  }, {
    "left" : "int index",
    "right" : "int index",
    "info" : "SingleVariableDeclaration[257257-257266]:SingleVariableDeclaration[257257-257266]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[257268-257523]:Block[257268-257523]"
  }, {
    "left" : "float outgoing[] = new float[list.length + 1];",
    "right" : "float outgoing[] = new float[list.length + 1];",
    "info" : "VariableDeclarationStatement[257274-257320]:VariableDeclarationStatement[257274-257320]"
  }, {
    "left" : "System.arraycopy(list, 0, outgoing, 0, index);",
    "right" : "System.arraycopy(list, 0, outgoing, 0, index);",
    "info" : "ExpressionStatement[257325-257371]:ExpressionStatement[257325-257371]"
  }, {
    "left" : "outgoing[index] = value;",
    "right" : "outgoing[index] = value;",
    "info" : "ExpressionStatement[257376-257400]:ExpressionStatement[257376-257400]"
  }, {
    "left" : "System.arraycopy(list, index, outgoing, index + 1,\n                     list.length - index);",
    "right" : "System.arraycopy(list, index, outgoing, index + 1,\n                     list.length - index);",
    "info" : "ExpressionStatement[257405-257498]:ExpressionStatement[257405-257498]"
  }, {
    "left" : "return outgoing;",
    "right" : "return outgoing;",
    "info" : "ReturnStatement[257503-257519]:ReturnStatement[257503-257519]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[257527-257533]:Modifier[257527-257533]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[257534-257539]:Modifier[257534-257539]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[257540-257546]:Modifier[257540-257546]"
  }, {
    "left" : "float[]",
    "right" : "float[]",
    "info" : "ArrayType[257547-257554]:ArrayType[257547-257554]"
  }, {
    "left" : "float list[]",
    "right" : "float list[]",
    "info" : "SingleVariableDeclaration[257562-257574]:SingleVariableDeclaration[257562-257574]"
  }, {
    "left" : "float value[]",
    "right" : "float value[]",
    "info" : "SingleVariableDeclaration[257613-257626]:SingleVariableDeclaration[257613-257626]"
  }, {
    "left" : "int index",
    "right" : "int index",
    "info" : "SingleVariableDeclaration[257628-257637]:SingleVariableDeclaration[257628-257637]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[257639-257950]:Block[257639-257950]"
  }, {
    "left" : "float outgoing[] = new float[list.length + value.length];",
    "right" : "float outgoing[] = new float[list.length + value.length];",
    "info" : "VariableDeclarationStatement[257645-257702]:VariableDeclarationStatement[257645-257702]"
  }, {
    "left" : "System.arraycopy(list, 0, outgoing, 0, index);",
    "right" : "System.arraycopy(list, 0, outgoing, 0, index);",
    "info" : "ExpressionStatement[257707-257753]:ExpressionStatement[257707-257753]"
  }, {
    "left" : "System.arraycopy(value, 0, outgoing, index, value.length);",
    "right" : "System.arraycopy(value, 0, outgoing, index, value.length);",
    "info" : "ExpressionStatement[257758-257816]:ExpressionStatement[257758-257816]"
  }, {
    "left" : "System.arraycopy(list, index, outgoing, index + value.length,\n                     list.length - index);",
    "right" : "System.arraycopy(list, index, outgoing, index + value.length,\n                     list.length - index);",
    "info" : "ExpressionStatement[257821-257925]:ExpressionStatement[257821-257925]"
  }, {
    "left" : "return outgoing;",
    "right" : "return outgoing;",
    "info" : "ReturnStatement[257930-257946]:ReturnStatement[257930-257946]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[257954-257960]:Modifier[257954-257960]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[257961-257966]:Modifier[257961-257966]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[257967-257973]:Modifier[257967-257973]"
  }, {
    "left" : "String[]",
    "right" : "String[]",
    "info" : "ArrayType[257974-257982]:ArrayType[257974-257982]"
  }, {
    "left" : "String list[]",
    "right" : "String list[]",
    "info" : "SingleVariableDeclaration[257990-258003]:SingleVariableDeclaration[257990-258003]"
  }, {
    "left" : "String value",
    "right" : "String value",
    "info" : "SingleVariableDeclaration[258043-258055]:SingleVariableDeclaration[258043-258055]"
  }, {
    "left" : "int index",
    "right" : "int index",
    "info" : "SingleVariableDeclaration[258057-258066]:SingleVariableDeclaration[258057-258066]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[258068-258325]:Block[258068-258325]"
  }, {
    "left" : "String outgoing[] = new String[list.length + 1];",
    "right" : "String outgoing[] = new String[list.length + 1];",
    "info" : "VariableDeclarationStatement[258074-258122]:VariableDeclarationStatement[258074-258122]"
  }, {
    "left" : "System.arraycopy(list, 0, outgoing, 0, index);",
    "right" : "System.arraycopy(list, 0, outgoing, 0, index);",
    "info" : "ExpressionStatement[258127-258173]:ExpressionStatement[258127-258173]"
  }, {
    "left" : "outgoing[index] = value;",
    "right" : "outgoing[index] = value;",
    "info" : "ExpressionStatement[258178-258202]:ExpressionStatement[258178-258202]"
  }, {
    "left" : "System.arraycopy(list, index, outgoing, index + 1,\n                     list.length - index);",
    "right" : "System.arraycopy(list, index, outgoing, index + 1,\n                     list.length - index);",
    "info" : "ExpressionStatement[258207-258300]:ExpressionStatement[258207-258300]"
  }, {
    "left" : "return outgoing;",
    "right" : "return outgoing;",
    "info" : "ReturnStatement[258305-258321]:ReturnStatement[258305-258321]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[258329-258335]:Modifier[258329-258335]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[258336-258341]:Modifier[258336-258341]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[258342-258348]:Modifier[258342-258348]"
  }, {
    "left" : "String[]",
    "right" : "String[]",
    "info" : "ArrayType[258349-258357]:ArrayType[258349-258357]"
  }, {
    "left" : "String list[]",
    "right" : "String list[]",
    "info" : "SingleVariableDeclaration[258365-258378]:SingleVariableDeclaration[258365-258378]"
  }, {
    "left" : "String value[]",
    "right" : "String value[]",
    "info" : "SingleVariableDeclaration[258418-258432]:SingleVariableDeclaration[258418-258432]"
  }, {
    "left" : "int index",
    "right" : "int index",
    "info" : "SingleVariableDeclaration[258434-258443]:SingleVariableDeclaration[258434-258443]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[258445-258758]:Block[258445-258758]"
  }, {
    "left" : "String outgoing[] = new String[list.length + value.length];",
    "right" : "String outgoing[] = new String[list.length + value.length];",
    "info" : "VariableDeclarationStatement[258451-258510]:VariableDeclarationStatement[258451-258510]"
  }, {
    "left" : "System.arraycopy(list, 0, outgoing, 0, index);",
    "right" : "System.arraycopy(list, 0, outgoing, 0, index);",
    "info" : "ExpressionStatement[258515-258561]:ExpressionStatement[258515-258561]"
  }, {
    "left" : "System.arraycopy(value, 0, outgoing, index, value.length);",
    "right" : "System.arraycopy(value, 0, outgoing, index, value.length);",
    "info" : "ExpressionStatement[258566-258624]:ExpressionStatement[258566-258624]"
  }, {
    "left" : "System.arraycopy(list, index, outgoing, index + value.length,\n                     list.length - index);",
    "right" : "System.arraycopy(list, index, outgoing, index + value.length,\n                     list.length - index);",
    "info" : "ExpressionStatement[258629-258733]:ExpressionStatement[258629-258733]"
  }, {
    "left" : "return outgoing;",
    "right" : "return outgoing;",
    "info" : "ReturnStatement[258738-258754]:ReturnStatement[258738-258754]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[258762-258768]:Modifier[258762-258768]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[258769-258774]:Modifier[258769-258774]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[258775-258781]:Modifier[258775-258781]"
  }, {
    "left" : "Object",
    "right" : "Object",
    "info" : "SimpleType[258782-258788]:SimpleType[258782-258788]"
  }, {
    "left" : "Object list",
    "right" : "Object list",
    "info" : "SingleVariableDeclaration[258796-258807]:SingleVariableDeclaration[258796-258807]"
  }, {
    "left" : "Object value",
    "right" : "Object value",
    "info" : "SingleVariableDeclaration[258809-258821]:SingleVariableDeclaration[258809-258821]"
  }, {
    "left" : "int index",
    "right" : "int index",
    "info" : "SingleVariableDeclaration[258823-258832]:SingleVariableDeclaration[258823-258832]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[258834-259634]:Block[258834-259634]"
  }, {
    "left" : "Class<?> type = list.getClass().getComponentType();",
    "right" : "Class<?> type = list.getClass().getComponentType();",
    "info" : "VariableDeclarationStatement[258840-258891]:VariableDeclarationStatement[258840-258891]"
  }, {
    "left" : "Object outgoing = null;",
    "right" : "Object outgoing = null;",
    "info" : "VariableDeclarationStatement[258896-258919]:VariableDeclarationStatement[258896-258919]"
  }, {
    "left" : "int length = Array.getLength(list);",
    "right" : "int length = Array.getLength(list);",
    "info" : "VariableDeclarationStatement[258924-258959]:VariableDeclarationStatement[258924-258959]"
  }, {
    "left" : "if (value.getClass().getName().charAt(0) == '[')",
    "right" : "if (value.getClass().getName().charAt(0) == '[')",
    "info" : "IfStatement[259020-259609]:IfStatement[259020-259609]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[259069-259374]:Block[259069-259374]"
  }, {
    "left" : "int vlength = Array.getLength(value);",
    "right" : "int vlength = Array.getLength(value);",
    "info" : "VariableDeclarationStatement[259077-259114]:VariableDeclarationStatement[259077-259114]"
  }, {
    "left" : "outgoing = Array.newInstance(type, length + vlength);",
    "right" : "outgoing = Array.newInstance(type, length + vlength);",
    "info" : "ExpressionStatement[259121-259174]:ExpressionStatement[259121-259174]"
  }, {
    "left" : "System.arraycopy(list, 0, outgoing, 0, index);",
    "right" : "System.arraycopy(list, 0, outgoing, 0, index);",
    "info" : "ExpressionStatement[259181-259227]:ExpressionStatement[259181-259227]"
  }, {
    "left" : "System.arraycopy(value, 0, outgoing, index, vlength);",
    "right" : "System.arraycopy(value, 0, outgoing, index, vlength);",
    "info" : "ExpressionStatement[259234-259287]:ExpressionStatement[259234-259287]"
  }, {
    "left" : "System.arraycopy(list, index, outgoing, index + vlength, length - index);",
    "right" : "System.arraycopy(list, index, outgoing, index + vlength, length - index);",
    "info" : "ExpressionStatement[259294-259367]:ExpressionStatement[259294-259367]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[259380-259609]:Block[259380-259609]"
  }, {
    "left" : "outgoing = Array.newInstance(type, length + 1);",
    "right" : "outgoing = Array.newInstance(type, length + 1);",
    "info" : "ExpressionStatement[259388-259435]:ExpressionStatement[259388-259435]"
  }, {
    "left" : "System.arraycopy(list, 0, outgoing, 0, index);",
    "right" : "System.arraycopy(list, 0, outgoing, 0, index);",
    "info" : "ExpressionStatement[259442-259488]:ExpressionStatement[259442-259488]"
  }, {
    "left" : "Array.set(outgoing, index, value);",
    "right" : "Array.set(outgoing, index, value);",
    "info" : "ExpressionStatement[259495-259529]:ExpressionStatement[259495-259529]"
  }, {
    "left" : "System.arraycopy(list, index, outgoing, index + 1, length - index);",
    "right" : "System.arraycopy(list, index, outgoing, index + 1, length - index);",
    "info" : "ExpressionStatement[259536-259603]:ExpressionStatement[259536-259603]"
  }, {
    "left" : "return outgoing;",
    "right" : "return outgoing;",
    "info" : "ReturnStatement[259614-259630]:ReturnStatement[259614-259630]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[259638-259644]:Modifier[259638-259644]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[259645-259651]:Modifier[259645-259651]"
  }, {
    "left" : "boolean[]",
    "right" : "boolean[]",
    "info" : "ArrayType[259652-259661]:ArrayType[259652-259661]"
  }, {
    "left" : "boolean list[]",
    "right" : "boolean list[]",
    "info" : "SingleVariableDeclaration[259669-259683]:SingleVariableDeclaration[259669-259683]"
  }, {
    "left" : "int start",
    "right" : "int start",
    "info" : "SingleVariableDeclaration[259685-259694]:SingleVariableDeclaration[259685-259694]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[259696-259754]:Block[259696-259754]"
  }, {
    "left" : "return subset(list, start, list.length - start);",
    "right" : "return subset(list, start, list.length - start);",
    "info" : "ReturnStatement[259702-259750]:ReturnStatement[259702-259750]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[260770-260776]:Modifier[260770-260776]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[260777-260783]:Modifier[260777-260783]"
  }, {
    "left" : "boolean[]",
    "right" : "boolean[]",
    "info" : "ArrayType[260784-260793]:ArrayType[260784-260793]"
  }, {
    "left" : "boolean list[]",
    "right" : "boolean list[]",
    "info" : "SingleVariableDeclaration[260801-260815]:SingleVariableDeclaration[260801-260815]"
  }, {
    "left" : "int start",
    "right" : "int start",
    "info" : "SingleVariableDeclaration[260817-260826]:SingleVariableDeclaration[260817-260826]"
  }, {
    "left" : "int count",
    "right" : "int count",
    "info" : "SingleVariableDeclaration[260828-260837]:SingleVariableDeclaration[260828-260837]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[260839-260959]:Block[260839-260959]"
  }, {
    "left" : "boolean output[] = new boolean[count];",
    "right" : "boolean output[] = new boolean[count];",
    "info" : "VariableDeclarationStatement[260845-260883]:VariableDeclarationStatement[260845-260883]"
  }, {
    "left" : "System.arraycopy(list, start, output, 0, count);",
    "right" : "System.arraycopy(list, start, output, 0, count);",
    "info" : "ExpressionStatement[260888-260936]:ExpressionStatement[260888-260936]"
  }, {
    "left" : "return output;",
    "right" : "return output;",
    "info" : "ReturnStatement[260941-260955]:ReturnStatement[260941-260955]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[260963-260969]:Modifier[260963-260969]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[260970-260976]:Modifier[260970-260976]"
  }, {
    "left" : "byte[]",
    "right" : "byte[]",
    "info" : "ArrayType[260977-260983]:ArrayType[260977-260983]"
  }, {
    "left" : "byte list[]",
    "right" : "byte list[]",
    "info" : "SingleVariableDeclaration[260991-261002]:SingleVariableDeclaration[260991-261002]"
  }, {
    "left" : "int start",
    "right" : "int start",
    "info" : "SingleVariableDeclaration[261004-261013]:SingleVariableDeclaration[261004-261013]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[261015-261073]:Block[261015-261073]"
  }, {
    "left" : "return subset(list, start, list.length - start);",
    "right" : "return subset(list, start, list.length - start);",
    "info" : "ReturnStatement[261021-261069]:ReturnStatement[261021-261069]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[261077-261083]:Modifier[261077-261083]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[261084-261090]:Modifier[261084-261090]"
  }, {
    "left" : "byte[]",
    "right" : "byte[]",
    "info" : "ArrayType[261091-261097]:ArrayType[261091-261097]"
  }, {
    "left" : "byte list[]",
    "right" : "byte list[]",
    "info" : "SingleVariableDeclaration[261105-261116]:SingleVariableDeclaration[261105-261116]"
  }, {
    "left" : "int start",
    "right" : "int start",
    "info" : "SingleVariableDeclaration[261118-261127]:SingleVariableDeclaration[261118-261127]"
  }, {
    "left" : "int count",
    "right" : "int count",
    "info" : "SingleVariableDeclaration[261129-261138]:SingleVariableDeclaration[261129-261138]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[261140-261254]:Block[261140-261254]"
  }, {
    "left" : "byte output[] = new byte[count];",
    "right" : "byte output[] = new byte[count];",
    "info" : "VariableDeclarationStatement[261146-261178]:VariableDeclarationStatement[261146-261178]"
  }, {
    "left" : "System.arraycopy(list, start, output, 0, count);",
    "right" : "System.arraycopy(list, start, output, 0, count);",
    "info" : "ExpressionStatement[261183-261231]:ExpressionStatement[261183-261231]"
  }, {
    "left" : "return output;",
    "right" : "return output;",
    "info" : "ReturnStatement[261236-261250]:ReturnStatement[261236-261250]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[261259-261265]:Modifier[261259-261265]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[261266-261272]:Modifier[261266-261272]"
  }, {
    "left" : "char[]",
    "right" : "char[]",
    "info" : "ArrayType[261273-261279]:ArrayType[261273-261279]"
  }, {
    "left" : "char list[]",
    "right" : "char list[]",
    "info" : "SingleVariableDeclaration[261287-261298]:SingleVariableDeclaration[261287-261298]"
  }, {
    "left" : "int start",
    "right" : "int start",
    "info" : "SingleVariableDeclaration[261300-261309]:SingleVariableDeclaration[261300-261309]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[261311-261369]:Block[261311-261369]"
  }, {
    "left" : "return subset(list, start, list.length - start);",
    "right" : "return subset(list, start, list.length - start);",
    "info" : "ReturnStatement[261317-261365]:ReturnStatement[261317-261365]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[261373-261379]:Modifier[261373-261379]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[261380-261386]:Modifier[261380-261386]"
  }, {
    "left" : "char[]",
    "right" : "char[]",
    "info" : "ArrayType[261387-261393]:ArrayType[261387-261393]"
  }, {
    "left" : "char list[]",
    "right" : "char list[]",
    "info" : "SingleVariableDeclaration[261401-261412]:SingleVariableDeclaration[261401-261412]"
  }, {
    "left" : "int start",
    "right" : "int start",
    "info" : "SingleVariableDeclaration[261414-261423]:SingleVariableDeclaration[261414-261423]"
  }, {
    "left" : "int count",
    "right" : "int count",
    "info" : "SingleVariableDeclaration[261425-261434]:SingleVariableDeclaration[261425-261434]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[261436-261550]:Block[261436-261550]"
  }, {
    "left" : "char output[] = new char[count];",
    "right" : "char output[] = new char[count];",
    "info" : "VariableDeclarationStatement[261442-261474]:VariableDeclarationStatement[261442-261474]"
  }, {
    "left" : "System.arraycopy(list, start, output, 0, count);",
    "right" : "System.arraycopy(list, start, output, 0, count);",
    "info" : "ExpressionStatement[261479-261527]:ExpressionStatement[261479-261527]"
  }, {
    "left" : "return output;",
    "right" : "return output;",
    "info" : "ReturnStatement[261532-261546]:ReturnStatement[261532-261546]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[261554-261560]:Modifier[261554-261560]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[261561-261567]:Modifier[261561-261567]"
  }, {
    "left" : "int[]",
    "right" : "int[]",
    "info" : "ArrayType[261568-261573]:ArrayType[261568-261573]"
  }, {
    "left" : "int list[]",
    "right" : "int list[]",
    "info" : "SingleVariableDeclaration[261581-261591]:SingleVariableDeclaration[261581-261591]"
  }, {
    "left" : "int start",
    "right" : "int start",
    "info" : "SingleVariableDeclaration[261593-261602]:SingleVariableDeclaration[261593-261602]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[261604-261662]:Block[261604-261662]"
  }, {
    "left" : "return subset(list, start, list.length - start);",
    "right" : "return subset(list, start, list.length - start);",
    "info" : "ReturnStatement[261610-261658]:ReturnStatement[261610-261658]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[261666-261672]:Modifier[261666-261672]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[261673-261679]:Modifier[261673-261679]"
  }, {
    "left" : "int[]",
    "right" : "int[]",
    "info" : "ArrayType[261680-261685]:ArrayType[261680-261685]"
  }, {
    "left" : "int list[]",
    "right" : "int list[]",
    "info" : "SingleVariableDeclaration[261693-261703]:SingleVariableDeclaration[261693-261703]"
  }, {
    "left" : "int start",
    "right" : "int start",
    "info" : "SingleVariableDeclaration[261705-261714]:SingleVariableDeclaration[261705-261714]"
  }, {
    "left" : "int count",
    "right" : "int count",
    "info" : "SingleVariableDeclaration[261716-261725]:SingleVariableDeclaration[261716-261725]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[261727-261839]:Block[261727-261839]"
  }, {
    "left" : "int output[] = new int[count];",
    "right" : "int output[] = new int[count];",
    "info" : "VariableDeclarationStatement[261733-261763]:VariableDeclarationStatement[261733-261763]"
  }, {
    "left" : "System.arraycopy(list, start, output, 0, count);",
    "right" : "System.arraycopy(list, start, output, 0, count);",
    "info" : "ExpressionStatement[261768-261816]:ExpressionStatement[261768-261816]"
  }, {
    "left" : "return output;",
    "right" : "return output;",
    "info" : "ReturnStatement[261821-261835]:ReturnStatement[261821-261835]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[261843-261849]:Modifier[261843-261849]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[261850-261856]:Modifier[261850-261856]"
  }, {
    "left" : "float[]",
    "right" : "float[]",
    "info" : "ArrayType[261857-261864]:ArrayType[261857-261864]"
  }, {
    "left" : "float list[]",
    "right" : "float list[]",
    "info" : "SingleVariableDeclaration[261872-261884]:SingleVariableDeclaration[261872-261884]"
  }, {
    "left" : "int start",
    "right" : "int start",
    "info" : "SingleVariableDeclaration[261886-261895]:SingleVariableDeclaration[261886-261895]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[261897-261955]:Block[261897-261955]"
  }, {
    "left" : "return subset(list, start, list.length - start);",
    "right" : "return subset(list, start, list.length - start);",
    "info" : "ReturnStatement[261903-261951]:ReturnStatement[261903-261951]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[261959-261965]:Modifier[261959-261965]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[261966-261972]:Modifier[261966-261972]"
  }, {
    "left" : "float[]",
    "right" : "float[]",
    "info" : "ArrayType[261973-261980]:ArrayType[261973-261980]"
  }, {
    "left" : "float list[]",
    "right" : "float list[]",
    "info" : "SingleVariableDeclaration[261988-262000]:SingleVariableDeclaration[261988-262000]"
  }, {
    "left" : "int start",
    "right" : "int start",
    "info" : "SingleVariableDeclaration[262002-262011]:SingleVariableDeclaration[262002-262011]"
  }, {
    "left" : "int count",
    "right" : "int count",
    "info" : "SingleVariableDeclaration[262013-262022]:SingleVariableDeclaration[262013-262022]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[262024-262140]:Block[262024-262140]"
  }, {
    "left" : "float output[] = new float[count];",
    "right" : "float output[] = new float[count];",
    "info" : "VariableDeclarationStatement[262030-262064]:VariableDeclarationStatement[262030-262064]"
  }, {
    "left" : "System.arraycopy(list, start, output, 0, count);",
    "right" : "System.arraycopy(list, start, output, 0, count);",
    "info" : "ExpressionStatement[262069-262117]:ExpressionStatement[262069-262117]"
  }, {
    "left" : "return output;",
    "right" : "return output;",
    "info" : "ReturnStatement[262122-262136]:ReturnStatement[262122-262136]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[262145-262151]:Modifier[262145-262151]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[262152-262158]:Modifier[262152-262158]"
  }, {
    "left" : "String[]",
    "right" : "String[]",
    "info" : "ArrayType[262159-262167]:ArrayType[262159-262167]"
  }, {
    "left" : "String list[]",
    "right" : "String list[]",
    "info" : "SingleVariableDeclaration[262175-262188]:SingleVariableDeclaration[262175-262188]"
  }, {
    "left" : "int start",
    "right" : "int start",
    "info" : "SingleVariableDeclaration[262190-262199]:SingleVariableDeclaration[262190-262199]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[262201-262259]:Block[262201-262259]"
  }, {
    "left" : "return subset(list, start, list.length - start);",
    "right" : "return subset(list, start, list.length - start);",
    "info" : "ReturnStatement[262207-262255]:ReturnStatement[262207-262255]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[262263-262269]:Modifier[262263-262269]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[262270-262276]:Modifier[262270-262276]"
  }, {
    "left" : "String[]",
    "right" : "String[]",
    "info" : "ArrayType[262277-262285]:ArrayType[262277-262285]"
  }, {
    "left" : "String list[]",
    "right" : "String list[]",
    "info" : "SingleVariableDeclaration[262293-262306]:SingleVariableDeclaration[262293-262306]"
  }, {
    "left" : "int start",
    "right" : "int start",
    "info" : "SingleVariableDeclaration[262308-262317]:SingleVariableDeclaration[262308-262317]"
  }, {
    "left" : "int count",
    "right" : "int count",
    "info" : "SingleVariableDeclaration[262319-262328]:SingleVariableDeclaration[262319-262328]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[262330-262448]:Block[262330-262448]"
  }, {
    "left" : "String output[] = new String[count];",
    "right" : "String output[] = new String[count];",
    "info" : "VariableDeclarationStatement[262336-262372]:VariableDeclarationStatement[262336-262372]"
  }, {
    "left" : "System.arraycopy(list, start, output, 0, count);",
    "right" : "System.arraycopy(list, start, output, 0, count);",
    "info" : "ExpressionStatement[262377-262425]:ExpressionStatement[262377-262425]"
  }, {
    "left" : "return output;",
    "right" : "return output;",
    "info" : "ReturnStatement[262430-262444]:ReturnStatement[262430-262444]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[262453-262459]:Modifier[262453-262459]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[262460-262466]:Modifier[262460-262466]"
  }, {
    "left" : "Object",
    "right" : "Object",
    "info" : "SimpleType[262467-262473]:SimpleType[262467-262473]"
  }, {
    "left" : "Object list",
    "right" : "Object list",
    "info" : "SingleVariableDeclaration[262481-262492]:SingleVariableDeclaration[262481-262492]"
  }, {
    "left" : "int start",
    "right" : "int start",
    "info" : "SingleVariableDeclaration[262494-262503]:SingleVariableDeclaration[262494-262503]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[262505-262598]:Block[262505-262598]"
  }, {
    "left" : "int length = Array.getLength(list);",
    "right" : "int length = Array.getLength(list);",
    "info" : "VariableDeclarationStatement[262511-262546]:VariableDeclarationStatement[262511-262546]"
  }, {
    "left" : "return subset(list, start, length - start);",
    "right" : "return subset(list, start, length - start);",
    "info" : "ReturnStatement[262551-262594]:ReturnStatement[262551-262594]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[262602-262608]:Modifier[262602-262608]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[262609-262615]:Modifier[262609-262615]"
  }, {
    "left" : "Object",
    "right" : "Object",
    "info" : "SimpleType[262616-262622]:SimpleType[262616-262622]"
  }, {
    "left" : "Object list",
    "right" : "Object list",
    "info" : "SingleVariableDeclaration[262630-262641]:SingleVariableDeclaration[262630-262641]"
  }, {
    "left" : "int start",
    "right" : "int start",
    "info" : "SingleVariableDeclaration[262643-262652]:SingleVariableDeclaration[262643-262652]"
  }, {
    "left" : "int count",
    "right" : "int count",
    "info" : "SingleVariableDeclaration[262654-262663]:SingleVariableDeclaration[262654-262663]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[262665-262856]:Block[262665-262856]"
  }, {
    "left" : "Class<?> type = list.getClass().getComponentType();",
    "right" : "Class<?> type = list.getClass().getComponentType();",
    "info" : "VariableDeclarationStatement[262671-262722]:VariableDeclarationStatement[262671-262722]"
  }, {
    "left" : "Object outgoing = Array.newInstance(type, count);",
    "right" : "Object outgoing = Array.newInstance(type, count);",
    "info" : "VariableDeclarationStatement[262727-262776]:VariableDeclarationStatement[262727-262776]"
  }, {
    "left" : "System.arraycopy(list, start, outgoing, 0, count);",
    "right" : "System.arraycopy(list, start, outgoing, 0, count);",
    "info" : "ExpressionStatement[262781-262831]:ExpressionStatement[262781-262831]"
  }, {
    "left" : "return outgoing;",
    "right" : "return outgoing;",
    "info" : "ReturnStatement[262836-262852]:ReturnStatement[262836-262852]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[263599-263605]:Modifier[263599-263605]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[263606-263612]:Modifier[263606-263612]"
  }, {
    "left" : "boolean[]",
    "right" : "boolean[]",
    "info" : "ArrayType[263613-263622]:ArrayType[263613-263622]"
  }, {
    "left" : "boolean a[]",
    "right" : "boolean a[]",
    "info" : "SingleVariableDeclaration[263630-263641]:SingleVariableDeclaration[263630-263641]"
  }, {
    "left" : "boolean b[]",
    "right" : "boolean b[]",
    "info" : "SingleVariableDeclaration[263643-263654]:SingleVariableDeclaration[263643-263654]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[263656-263822]:Block[263656-263822]"
  }, {
    "left" : "boolean c[] = new boolean[a.length + b.length];",
    "right" : "boolean c[] = new boolean[a.length + b.length];",
    "info" : "VariableDeclarationStatement[263662-263709]:VariableDeclarationStatement[263662-263709]"
  }, {
    "left" : "System.arraycopy(a, 0, c, 0, a.length);",
    "right" : "System.arraycopy(a, 0, c, 0, a.length);",
    "info" : "ExpressionStatement[263714-263753]:ExpressionStatement[263714-263753]"
  }, {
    "left" : "System.arraycopy(b, 0, c, a.length, b.length);",
    "right" : "System.arraycopy(b, 0, c, a.length, b.length);",
    "info" : "ExpressionStatement[263758-263804]:ExpressionStatement[263758-263804]"
  }, {
    "left" : "return c;",
    "right" : "return c;",
    "info" : "ReturnStatement[263809-263818]:ReturnStatement[263809-263818]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[263826-263832]:Modifier[263826-263832]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[263833-263839]:Modifier[263833-263839]"
  }, {
    "left" : "byte[]",
    "right" : "byte[]",
    "info" : "ArrayType[263840-263846]:ArrayType[263840-263846]"
  }, {
    "left" : "byte a[]",
    "right" : "byte a[]",
    "info" : "SingleVariableDeclaration[263854-263862]:SingleVariableDeclaration[263854-263862]"
  }, {
    "left" : "byte b[]",
    "right" : "byte b[]",
    "info" : "SingleVariableDeclaration[263864-263872]:SingleVariableDeclaration[263864-263872]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[263874-264034]:Block[263874-264034]"
  }, {
    "left" : "byte c[] = new byte[a.length + b.length];",
    "right" : "byte c[] = new byte[a.length + b.length];",
    "info" : "VariableDeclarationStatement[263880-263921]:VariableDeclarationStatement[263880-263921]"
  }, {
    "left" : "System.arraycopy(a, 0, c, 0, a.length);",
    "right" : "System.arraycopy(a, 0, c, 0, a.length);",
    "info" : "ExpressionStatement[263926-263965]:ExpressionStatement[263926-263965]"
  }, {
    "left" : "System.arraycopy(b, 0, c, a.length, b.length);",
    "right" : "System.arraycopy(b, 0, c, a.length, b.length);",
    "info" : "ExpressionStatement[263970-264016]:ExpressionStatement[263970-264016]"
  }, {
    "left" : "return c;",
    "right" : "return c;",
    "info" : "ReturnStatement[264021-264030]:ReturnStatement[264021-264030]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[264038-264044]:Modifier[264038-264044]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[264045-264051]:Modifier[264045-264051]"
  }, {
    "left" : "char[]",
    "right" : "char[]",
    "info" : "ArrayType[264052-264058]:ArrayType[264052-264058]"
  }, {
    "left" : "char a[]",
    "right" : "char a[]",
    "info" : "SingleVariableDeclaration[264066-264074]:SingleVariableDeclaration[264066-264074]"
  }, {
    "left" : "char b[]",
    "right" : "char b[]",
    "info" : "SingleVariableDeclaration[264076-264084]:SingleVariableDeclaration[264076-264084]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[264086-264246]:Block[264086-264246]"
  }, {
    "left" : "char c[] = new char[a.length + b.length];",
    "right" : "char c[] = new char[a.length + b.length];",
    "info" : "VariableDeclarationStatement[264092-264133]:VariableDeclarationStatement[264092-264133]"
  }, {
    "left" : "System.arraycopy(a, 0, c, 0, a.length);",
    "right" : "System.arraycopy(a, 0, c, 0, a.length);",
    "info" : "ExpressionStatement[264138-264177]:ExpressionStatement[264138-264177]"
  }, {
    "left" : "System.arraycopy(b, 0, c, a.length, b.length);",
    "right" : "System.arraycopy(b, 0, c, a.length, b.length);",
    "info" : "ExpressionStatement[264182-264228]:ExpressionStatement[264182-264228]"
  }, {
    "left" : "return c;",
    "right" : "return c;",
    "info" : "ReturnStatement[264233-264242]:ReturnStatement[264233-264242]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[264250-264256]:Modifier[264250-264256]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[264257-264263]:Modifier[264257-264263]"
  }, {
    "left" : "int[]",
    "right" : "int[]",
    "info" : "ArrayType[264264-264269]:ArrayType[264264-264269]"
  }, {
    "left" : "int a[]",
    "right" : "int a[]",
    "info" : "SingleVariableDeclaration[264277-264284]:SingleVariableDeclaration[264277-264284]"
  }, {
    "left" : "int b[]",
    "right" : "int b[]",
    "info" : "SingleVariableDeclaration[264286-264293]:SingleVariableDeclaration[264286-264293]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[264295-264453]:Block[264295-264453]"
  }, {
    "left" : "int c[] = new int[a.length + b.length];",
    "right" : "int c[] = new int[a.length + b.length];",
    "info" : "VariableDeclarationStatement[264301-264340]:VariableDeclarationStatement[264301-264340]"
  }, {
    "left" : "System.arraycopy(a, 0, c, 0, a.length);",
    "right" : "System.arraycopy(a, 0, c, 0, a.length);",
    "info" : "ExpressionStatement[264345-264384]:ExpressionStatement[264345-264384]"
  }, {
    "left" : "System.arraycopy(b, 0, c, a.length, b.length);",
    "right" : "System.arraycopy(b, 0, c, a.length, b.length);",
    "info" : "ExpressionStatement[264389-264435]:ExpressionStatement[264389-264435]"
  }, {
    "left" : "return c;",
    "right" : "return c;",
    "info" : "ReturnStatement[264440-264449]:ReturnStatement[264440-264449]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[264457-264463]:Modifier[264457-264463]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[264464-264470]:Modifier[264464-264470]"
  }, {
    "left" : "float[]",
    "right" : "float[]",
    "info" : "ArrayType[264471-264478]:ArrayType[264471-264478]"
  }, {
    "left" : "float a[]",
    "right" : "float a[]",
    "info" : "SingleVariableDeclaration[264486-264495]:SingleVariableDeclaration[264486-264495]"
  }, {
    "left" : "float b[]",
    "right" : "float b[]",
    "info" : "SingleVariableDeclaration[264497-264506]:SingleVariableDeclaration[264497-264506]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[264508-264670]:Block[264508-264670]"
  }, {
    "left" : "float c[] = new float[a.length + b.length];",
    "right" : "float c[] = new float[a.length + b.length];",
    "info" : "VariableDeclarationStatement[264514-264557]:VariableDeclarationStatement[264514-264557]"
  }, {
    "left" : "System.arraycopy(a, 0, c, 0, a.length);",
    "right" : "System.arraycopy(a, 0, c, 0, a.length);",
    "info" : "ExpressionStatement[264562-264601]:ExpressionStatement[264562-264601]"
  }, {
    "left" : "System.arraycopy(b, 0, c, a.length, b.length);",
    "right" : "System.arraycopy(b, 0, c, a.length, b.length);",
    "info" : "ExpressionStatement[264606-264652]:ExpressionStatement[264606-264652]"
  }, {
    "left" : "return c;",
    "right" : "return c;",
    "info" : "ReturnStatement[264657-264666]:ReturnStatement[264657-264666]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[264674-264680]:Modifier[264674-264680]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[264681-264687]:Modifier[264681-264687]"
  }, {
    "left" : "String[]",
    "right" : "String[]",
    "info" : "ArrayType[264688-264696]:ArrayType[264688-264696]"
  }, {
    "left" : "String a[]",
    "right" : "String a[]",
    "info" : "SingleVariableDeclaration[264704-264714]:SingleVariableDeclaration[264704-264714]"
  }, {
    "left" : "String b[]",
    "right" : "String b[]",
    "info" : "SingleVariableDeclaration[264716-264726]:SingleVariableDeclaration[264716-264726]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[264728-264892]:Block[264728-264892]"
  }, {
    "left" : "String c[] = new String[a.length + b.length];",
    "right" : "String c[] = new String[a.length + b.length];",
    "info" : "VariableDeclarationStatement[264734-264779]:VariableDeclarationStatement[264734-264779]"
  }, {
    "left" : "System.arraycopy(a, 0, c, 0, a.length);",
    "right" : "System.arraycopy(a, 0, c, 0, a.length);",
    "info" : "ExpressionStatement[264784-264823]:ExpressionStatement[264784-264823]"
  }, {
    "left" : "System.arraycopy(b, 0, c, a.length, b.length);",
    "right" : "System.arraycopy(b, 0, c, a.length, b.length);",
    "info" : "ExpressionStatement[264828-264874]:ExpressionStatement[264828-264874]"
  }, {
    "left" : "return c;",
    "right" : "return c;",
    "info" : "ReturnStatement[264879-264888]:ReturnStatement[264879-264888]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[264896-264902]:Modifier[264896-264902]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[264903-264909]:Modifier[264903-264909]"
  }, {
    "left" : "Object",
    "right" : "Object",
    "info" : "SimpleType[264910-264916]:SimpleType[264910-264916]"
  }, {
    "left" : "Object a",
    "right" : "Object a",
    "info" : "SingleVariableDeclaration[264924-264932]:SingleVariableDeclaration[264924-264932]"
  }, {
    "left" : "Object b",
    "right" : "Object b",
    "info" : "SingleVariableDeclaration[264934-264942]:SingleVariableDeclaration[264934-264942]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[264944-265271]:Block[264944-265271]"
  }, {
    "left" : "Class<?> type = a.getClass().getComponentType();",
    "right" : "Class<?> type = a.getClass().getComponentType();",
    "info" : "VariableDeclarationStatement[264950-264998]:VariableDeclarationStatement[264950-264998]"
  }, {
    "left" : "int alength = Array.getLength(a);",
    "right" : "int alength = Array.getLength(a);",
    "info" : "VariableDeclarationStatement[265003-265036]:VariableDeclarationStatement[265003-265036]"
  }, {
    "left" : "int blength = Array.getLength(b);",
    "right" : "int blength = Array.getLength(b);",
    "info" : "VariableDeclarationStatement[265041-265074]:VariableDeclarationStatement[265041-265074]"
  }, {
    "left" : "Object outgoing = Array.newInstance(type, alength + blength);",
    "right" : "Object outgoing = Array.newInstance(type, alength + blength);",
    "info" : "VariableDeclarationStatement[265079-265140]:VariableDeclarationStatement[265079-265140]"
  }, {
    "left" : "System.arraycopy(a, 0, outgoing, 0, alength);",
    "right" : "System.arraycopy(a, 0, outgoing, 0, alength);",
    "info" : "ExpressionStatement[265145-265190]:ExpressionStatement[265145-265190]"
  }, {
    "left" : "System.arraycopy(b, 0, outgoing, alength, blength);",
    "right" : "System.arraycopy(b, 0, outgoing, alength, blength);",
    "info" : "ExpressionStatement[265195-265246]:ExpressionStatement[265195-265246]"
  }, {
    "left" : "return outgoing;",
    "right" : "return outgoing;",
    "info" : "ReturnStatement[265251-265267]:ReturnStatement[265251-265267]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[265561-265567]:Modifier[265561-265567]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[265568-265574]:Modifier[265568-265574]"
  }, {
    "left" : "boolean[]",
    "right" : "boolean[]",
    "info" : "ArrayType[265575-265584]:ArrayType[265575-265584]"
  }, {
    "left" : "boolean list[]",
    "right" : "boolean list[]",
    "info" : "SingleVariableDeclaration[265593-265607]:SingleVariableDeclaration[265593-265607]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[265609-265810]:Block[265609-265810]"
  }, {
    "left" : "boolean outgoing[] = new boolean[list.length];",
    "right" : "boolean outgoing[] = new boolean[list.length];",
    "info" : "VariableDeclarationStatement[265615-265661]:VariableDeclarationStatement[265615-265661]"
  }, {
    "left" : "int length1 = list.length - 1;",
    "right" : "int length1 = list.length - 1;",
    "info" : "VariableDeclarationStatement[265666-265696]:VariableDeclarationStatement[265666-265696]"
  }, {
    "left" : "for (int i = 0; i < list.length; i++)",
    "right" : "for (int i = 0; i < list.length; i++)",
    "info" : "ForStatement[265701-265785]:ForStatement[265701-265785]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[265739-265785]:Block[265739-265785]"
  }, {
    "left" : "outgoing[i] = list[length1 - i];",
    "right" : "outgoing[i] = list[length1 - i];",
    "info" : "ExpressionStatement[265747-265779]:ExpressionStatement[265747-265779]"
  }, {
    "left" : "return outgoing;",
    "right" : "return outgoing;",
    "info" : "ReturnStatement[265790-265806]:ReturnStatement[265790-265806]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[265814-265820]:Modifier[265814-265820]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[265821-265827]:Modifier[265821-265827]"
  }, {
    "left" : "byte[]",
    "right" : "byte[]",
    "info" : "ArrayType[265828-265834]:ArrayType[265828-265834]"
  }, {
    "left" : "byte list[]",
    "right" : "byte list[]",
    "info" : "SingleVariableDeclaration[265843-265854]:SingleVariableDeclaration[265843-265854]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[265856-266051]:Block[265856-266051]"
  }, {
    "left" : "byte outgoing[] = new byte[list.length];",
    "right" : "byte outgoing[] = new byte[list.length];",
    "info" : "VariableDeclarationStatement[265862-265902]:VariableDeclarationStatement[265862-265902]"
  }, {
    "left" : "int length1 = list.length - 1;",
    "right" : "int length1 = list.length - 1;",
    "info" : "VariableDeclarationStatement[265907-265937]:VariableDeclarationStatement[265907-265937]"
  }, {
    "left" : "for (int i = 0; i < list.length; i++)",
    "right" : "for (int i = 0; i < list.length; i++)",
    "info" : "ForStatement[265942-266026]:ForStatement[265942-266026]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[265980-266026]:Block[265980-266026]"
  }, {
    "left" : "outgoing[i] = list[length1 - i];",
    "right" : "outgoing[i] = list[length1 - i];",
    "info" : "ExpressionStatement[265988-266020]:ExpressionStatement[265988-266020]"
  }, {
    "left" : "return outgoing;",
    "right" : "return outgoing;",
    "info" : "ReturnStatement[266031-266047]:ReturnStatement[266031-266047]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[266055-266061]:Modifier[266055-266061]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[266062-266068]:Modifier[266062-266068]"
  }, {
    "left" : "char[]",
    "right" : "char[]",
    "info" : "ArrayType[266069-266075]:ArrayType[266069-266075]"
  }, {
    "left" : "char list[]",
    "right" : "char list[]",
    "info" : "SingleVariableDeclaration[266084-266095]:SingleVariableDeclaration[266084-266095]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[266097-266292]:Block[266097-266292]"
  }, {
    "left" : "char outgoing[] = new char[list.length];",
    "right" : "char outgoing[] = new char[list.length];",
    "info" : "VariableDeclarationStatement[266103-266143]:VariableDeclarationStatement[266103-266143]"
  }, {
    "left" : "int length1 = list.length - 1;",
    "right" : "int length1 = list.length - 1;",
    "info" : "VariableDeclarationStatement[266148-266178]:VariableDeclarationStatement[266148-266178]"
  }, {
    "left" : "for (int i = 0; i < list.length; i++)",
    "right" : "for (int i = 0; i < list.length; i++)",
    "info" : "ForStatement[266183-266267]:ForStatement[266183-266267]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[266221-266267]:Block[266221-266267]"
  }, {
    "left" : "outgoing[i] = list[length1 - i];",
    "right" : "outgoing[i] = list[length1 - i];",
    "info" : "ExpressionStatement[266229-266261]:ExpressionStatement[266229-266261]"
  }, {
    "left" : "return outgoing;",
    "right" : "return outgoing;",
    "info" : "ReturnStatement[266272-266288]:ReturnStatement[266272-266288]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[266296-266302]:Modifier[266296-266302]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[266303-266309]:Modifier[266303-266309]"
  }, {
    "left" : "int[]",
    "right" : "int[]",
    "info" : "ArrayType[266310-266315]:ArrayType[266310-266315]"
  }, {
    "left" : "int list[]",
    "right" : "int list[]",
    "info" : "SingleVariableDeclaration[266324-266334]:SingleVariableDeclaration[266324-266334]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[266336-266529]:Block[266336-266529]"
  }, {
    "left" : "int outgoing[] = new int[list.length];",
    "right" : "int outgoing[] = new int[list.length];",
    "info" : "VariableDeclarationStatement[266342-266380]:VariableDeclarationStatement[266342-266380]"
  }, {
    "left" : "int length1 = list.length - 1;",
    "right" : "int length1 = list.length - 1;",
    "info" : "VariableDeclarationStatement[266385-266415]:VariableDeclarationStatement[266385-266415]"
  }, {
    "left" : "for (int i = 0; i < list.length; i++)",
    "right" : "for (int i = 0; i < list.length; i++)",
    "info" : "ForStatement[266420-266504]:ForStatement[266420-266504]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[266458-266504]:Block[266458-266504]"
  }, {
    "left" : "outgoing[i] = list[length1 - i];",
    "right" : "outgoing[i] = list[length1 - i];",
    "info" : "ExpressionStatement[266466-266498]:ExpressionStatement[266466-266498]"
  }, {
    "left" : "return outgoing;",
    "right" : "return outgoing;",
    "info" : "ReturnStatement[266509-266525]:ReturnStatement[266509-266525]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[266533-266539]:Modifier[266533-266539]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[266540-266546]:Modifier[266540-266546]"
  }, {
    "left" : "float[]",
    "right" : "float[]",
    "info" : "ArrayType[266547-266554]:ArrayType[266547-266554]"
  }, {
    "left" : "float list[]",
    "right" : "float list[]",
    "info" : "SingleVariableDeclaration[266563-266575]:SingleVariableDeclaration[266563-266575]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[266577-266774]:Block[266577-266774]"
  }, {
    "left" : "float outgoing[] = new float[list.length];",
    "right" : "float outgoing[] = new float[list.length];",
    "info" : "VariableDeclarationStatement[266583-266625]:VariableDeclarationStatement[266583-266625]"
  }, {
    "left" : "int length1 = list.length - 1;",
    "right" : "int length1 = list.length - 1;",
    "info" : "VariableDeclarationStatement[266630-266660]:VariableDeclarationStatement[266630-266660]"
  }, {
    "left" : "for (int i = 0; i < list.length; i++)",
    "right" : "for (int i = 0; i < list.length; i++)",
    "info" : "ForStatement[266665-266749]:ForStatement[266665-266749]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[266703-266749]:Block[266703-266749]"
  }, {
    "left" : "outgoing[i] = list[length1 - i];",
    "right" : "outgoing[i] = list[length1 - i];",
    "info" : "ExpressionStatement[266711-266743]:ExpressionStatement[266711-266743]"
  }, {
    "left" : "return outgoing;",
    "right" : "return outgoing;",
    "info" : "ReturnStatement[266754-266770]:ReturnStatement[266754-266770]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[266778-266784]:Modifier[266778-266784]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[266785-266791]:Modifier[266785-266791]"
  }, {
    "left" : "String[]",
    "right" : "String[]",
    "info" : "ArrayType[266792-266800]:ArrayType[266792-266800]"
  }, {
    "left" : "String list[]",
    "right" : "String list[]",
    "info" : "SingleVariableDeclaration[266809-266822]:SingleVariableDeclaration[266809-266822]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[266824-267023]:Block[266824-267023]"
  }, {
    "left" : "String outgoing[] = new String[list.length];",
    "right" : "String outgoing[] = new String[list.length];",
    "info" : "VariableDeclarationStatement[266830-266874]:VariableDeclarationStatement[266830-266874]"
  }, {
    "left" : "int length1 = list.length - 1;",
    "right" : "int length1 = list.length - 1;",
    "info" : "VariableDeclarationStatement[266879-266909]:VariableDeclarationStatement[266879-266909]"
  }, {
    "left" : "for (int i = 0; i < list.length; i++)",
    "right" : "for (int i = 0; i < list.length; i++)",
    "info" : "ForStatement[266914-266998]:ForStatement[266914-266998]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[266952-266998]:Block[266952-266998]"
  }, {
    "left" : "outgoing[i] = list[length1 - i];",
    "right" : "outgoing[i] = list[length1 - i];",
    "info" : "ExpressionStatement[266960-266992]:ExpressionStatement[266960-266992]"
  }, {
    "left" : "return outgoing;",
    "right" : "return outgoing;",
    "info" : "ReturnStatement[267003-267019]:ReturnStatement[267003-267019]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[267027-267033]:Modifier[267027-267033]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[267034-267040]:Modifier[267034-267040]"
  }, {
    "left" : "Object",
    "right" : "Object",
    "info" : "SimpleType[267041-267047]:SimpleType[267041-267047]"
  }, {
    "left" : "Object list",
    "right" : "Object list",
    "info" : "SingleVariableDeclaration[267056-267067]:SingleVariableDeclaration[267056-267067]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[267069-267356]:Block[267069-267356]"
  }, {
    "left" : "Class<?> type = list.getClass().getComponentType();",
    "right" : "Class<?> type = list.getClass().getComponentType();",
    "info" : "VariableDeclarationStatement[267075-267126]:VariableDeclarationStatement[267075-267126]"
  }, {
    "left" : "int length = Array.getLength(list);",
    "right" : "int length = Array.getLength(list);",
    "info" : "VariableDeclarationStatement[267131-267166]:VariableDeclarationStatement[267131-267166]"
  }, {
    "left" : "Object outgoing = Array.newInstance(type, length);",
    "right" : "Object outgoing = Array.newInstance(type, length);",
    "info" : "VariableDeclarationStatement[267171-267221]:VariableDeclarationStatement[267171-267221]"
  }, {
    "left" : "for (int i = 0; i < length; i++)",
    "right" : "for (int i = 0; i < length; i++)",
    "info" : "ForStatement[267226-267331]:ForStatement[267226-267331]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[267259-267331]:Block[267259-267331]"
  }, {
    "left" : "Array.set(outgoing, i, Array.get(list, (length - 1) - i));",
    "right" : "Array.set(outgoing, i, Array.get(list, (length - 1) - i));",
    "info" : "ExpressionStatement[267267-267325]:ExpressionStatement[267267-267325]"
  }, {
    "left" : "return outgoing;",
    "right" : "return outgoing;",
    "info" : "ReturnStatement[267336-267352]:ReturnStatement[267336-267352]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[267907-267913]:Modifier[267907-267913]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[267914-267920]:Modifier[267914-267920]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[267921-267927]:SimpleType[267921-267927]"
  }, {
    "left" : "String str",
    "right" : "String str",
    "info" : "SingleVariableDeclaration[267933-267943]:SingleVariableDeclaration[267933-267943]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[267945-267996]:Block[267945-267996]"
  }, {
    "left" : "return str.replace('\\u00A0', ' ').trim();",
    "right" : "return str.replace('\\u00A0', ' ').trim();",
    "info" : "ReturnStatement[267951-267992]:ReturnStatement[267951-267992]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[268043-268049]:Modifier[268043-268049]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[268050-268056]:Modifier[268050-268056]"
  }, {
    "left" : "String[]",
    "right" : "String[]",
    "info" : "ArrayType[268057-268065]:ArrayType[268057-268065]"
  }, {
    "left" : "String[] array",
    "right" : "String[] array",
    "info" : "SingleVariableDeclaration[268071-268085]:SingleVariableDeclaration[268071-268085]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[268087-268314]:Block[268087-268314]"
  }, {
    "left" : "String[] outgoing = new String[array.length];",
    "right" : "String[] outgoing = new String[array.length];",
    "info" : "VariableDeclarationStatement[268093-268138]:VariableDeclarationStatement[268093-268138]"
  }, {
    "left" : "for (int i = 0; i < array.length; i++)",
    "right" : "for (int i = 0; i < array.length; i++)",
    "info" : "ForStatement[268143-268289]:ForStatement[268143-268289]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[268182-268289]:Block[268182-268289]"
  }, {
    "left" : "if (array[i] != null)",
    "right" : "if (array[i] != null)",
    "info" : "IfStatement[268190-268283]:IfStatement[268190-268283]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[268212-268283]:Block[268212-268283]"
  }, {
    "left" : "outgoing[i] = array[i].replace('\\u00A0', ' ').trim();",
    "right" : "outgoing[i] = array[i].replace('\\u00A0', ' ').trim();",
    "info" : "ExpressionStatement[268222-268275]:ExpressionStatement[268222-268275]"
  }, {
    "left" : "return outgoing;",
    "right" : "return outgoing;",
    "info" : "ReturnStatement[268294-268310]:ReturnStatement[268294-268310]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[268957-268963]:Modifier[268957-268963]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[268964-268970]:Modifier[268964-268970]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[268971-268977]:SimpleType[268971-268977]"
  }, {
    "left" : "String[] list",
    "right" : "String[] list",
    "info" : "SingleVariableDeclaration[268983-268996]:SingleVariableDeclaration[268983-268996]"
  }, {
    "left" : "char separator",
    "right" : "char separator",
    "info" : "SingleVariableDeclaration[268998-269012]:SingleVariableDeclaration[268998-269012]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[269014-269069]:Block[269014-269069]"
  }, {
    "left" : "return join(list, String.valueOf(separator));",
    "right" : "return join(list, String.valueOf(separator));",
    "info" : "ReturnStatement[269020-269065]:ReturnStatement[269020-269065]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[269074-269080]:Modifier[269074-269080]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[269081-269087]:Modifier[269081-269087]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[269088-269094]:SimpleType[269088-269094]"
  }, {
    "left" : "String[] list",
    "right" : "String[] list",
    "info" : "SingleVariableDeclaration[269100-269113]:SingleVariableDeclaration[269100-269113]"
  }, {
    "left" : "String separator",
    "right" : "String separator",
    "info" : "SingleVariableDeclaration[269115-269131]:SingleVariableDeclaration[269115-269131]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[269133-269324]:Block[269133-269324]"
  }, {
    "left" : "StringBuilder sb = new StringBuilder();",
    "right" : "StringBuilder sb = new StringBuilder();",
    "info" : "VariableDeclarationStatement[269139-269178]:VariableDeclarationStatement[269139-269178]"
  }, {
    "left" : "for (int i = 0; i < list.length; i++)",
    "right" : "for (int i = 0; i < list.length; i++)",
    "info" : "ForStatement[269183-269294]:ForStatement[269183-269294]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[269221-269294]:Block[269221-269294]"
  }, {
    "left" : "if (i != 0)",
    "right" : "if (i != 0)",
    "info" : "IfStatement[269229-269262]:IfStatement[269229-269262]"
  }, {
    "left" : "sb.append(separator);",
    "right" : "sb.append(separator);",
    "info" : "ExpressionStatement[269241-269262]:ExpressionStatement[269241-269262]"
  }, {
    "left" : "sb.append(list[i]);",
    "right" : "sb.append(list[i]);",
    "info" : "ExpressionStatement[269269-269288]:ExpressionStatement[269269-269288]"
  }, {
    "left" : "return sb.toString();",
    "right" : "return sb.toString();",
    "info" : "ReturnStatement[269299-269320]:ReturnStatement[269299-269320]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[269329-269335]:Modifier[269329-269335]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[269336-269342]:Modifier[269336-269342]"
  }, {
    "left" : "String[]",
    "right" : "String[]",
    "info" : "ArrayType[269343-269351]:ArrayType[269343-269351]"
  }, {
    "left" : "String value",
    "right" : "String value",
    "info" : "SingleVariableDeclaration[269364-269376]:SingleVariableDeclaration[269364-269376]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[269378-269426]:Block[269378-269426]"
  }, {
    "left" : "return splitTokens(value, WHITESPACE);",
    "right" : "return splitTokens(value, WHITESPACE);",
    "info" : "ReturnStatement[269384-269422]:ReturnStatement[269384-269422]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[270381-270387]:Modifier[270381-270387]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[270388-270394]:Modifier[270388-270394]"
  }, {
    "left" : "String[]",
    "right" : "String[]",
    "info" : "ArrayType[270395-270403]:ArrayType[270395-270403]"
  }, {
    "left" : "String value",
    "right" : "String value",
    "info" : "SingleVariableDeclaration[270416-270428]:SingleVariableDeclaration[270416-270428]"
  }, {
    "left" : "String delim",
    "right" : "String delim",
    "info" : "SingleVariableDeclaration[270430-270442]:SingleVariableDeclaration[270430-270442]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[270444-270691]:Block[270444-270691]"
  }, {
    "left" : "StringTokenizer toker = new StringTokenizer(value, delim);",
    "right" : "StringTokenizer toker = new StringTokenizer(value, delim);",
    "info" : "VariableDeclarationStatement[270450-270508]:VariableDeclarationStatement[270450-270508]"
  }, {
    "left" : "String pieces[] = new String[toker.countTokens()];",
    "right" : "String pieces[] = new String[toker.countTokens()];",
    "info" : "VariableDeclarationStatement[270513-270563]:VariableDeclarationStatement[270513-270563]"
  }, {
    "left" : "int index = 0;",
    "right" : "int index = 0;",
    "info" : "VariableDeclarationStatement[270569-270583]:VariableDeclarationStatement[270569-270583]"
  }, {
    "left" : "while (toker.hasMoreTokens())",
    "right" : "while (toker.hasMoreTokens())",
    "info" : "WhileStatement[270588-270668]:WhileStatement[270588-270668]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[270618-270668]:Block[270618-270668]"
  }, {
    "left" : "pieces[index++] = toker.nextToken();",
    "right" : "pieces[index++] = toker.nextToken();",
    "info" : "ExpressionStatement[270626-270662]:ExpressionStatement[270626-270662]"
  }, {
    "left" : "return pieces;",
    "right" : "return pieces;",
    "info" : "ReturnStatement[270673-270687]:ReturnStatement[270673-270687]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[272294-272300]:Modifier[272294-272300]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[272301-272307]:Modifier[272301-272307]"
  }, {
    "left" : "String[]",
    "right" : "String[]",
    "info" : "ArrayType[272308-272316]:ArrayType[272308-272316]"
  }, {
    "left" : "String value",
    "right" : "String value",
    "info" : "SingleVariableDeclaration[272323-272335]:SingleVariableDeclaration[272323-272335]"
  }, {
    "left" : "char delim",
    "right" : "char delim",
    "info" : "SingleVariableDeclaration[272337-272347]:SingleVariableDeclaration[272337-272347]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[272349-273636]:Block[272349-273636]"
  }, {
    "left" : "if (value == null)",
    "right" : "if (value == null)",
    "info" : "IfStatement[272482-272513]:IfStatement[272482-272513]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[272501-272513]:ReturnStatement[272501-272513]"
  }, {
    "left" : "char chars[] = value.toCharArray();",
    "right" : "char chars[] = value.toCharArray();",
    "info" : "VariableDeclarationStatement[272576-272611]:VariableDeclarationStatement[272576-272611]"
  }, {
    "left" : "int splitCount = 0;",
    "right" : "int splitCount = 0;",
    "info" : "VariableDeclarationStatement[272616-272635]:VariableDeclarationStatement[272616-272635]"
  }, {
    "left" : "for (int i = 0; i < chars.length; i++)",
    "right" : "for (int i = 0; i < chars.length; i++)",
    "info" : "ForStatement[272645-272734]:ForStatement[272645-272734]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[272684-272734]:Block[272684-272734]"
  }, {
    "left" : "if (chars[i] == delim)",
    "right" : "if (chars[i] == delim)",
    "info" : "IfStatement[272692-272728]:IfStatement[272692-272728]"
  }, {
    "left" : "splitCount++;",
    "right" : "splitCount++;",
    "info" : "ExpressionStatement[272715-272728]:ExpressionStatement[272715-272728]"
  }, {
    "left" : "if (splitCount == 0)",
    "right" : "if (splitCount == 0)",
    "info" : "IfStatement[273020-273133]:IfStatement[273020-273133]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[273041-273133]:Block[273041-273133]"
  }, {
    "left" : "String splits[] = new String[1];",
    "right" : "String splits[] = new String[1];",
    "info" : "VariableDeclarationStatement[273049-273081]:VariableDeclarationStatement[273049-273081]"
  }, {
    "left" : "splits[0] = value;",
    "right" : "splits[0] = value;",
    "info" : "ExpressionStatement[273088-273106]:ExpressionStatement[273088-273106]"
  }, {
    "left" : "return splits;",
    "right" : "return splits;",
    "info" : "ReturnStatement[273113-273127]:ReturnStatement[273113-273127]"
  }, {
    "left" : "String splits[] = new String[splitCount + 1];",
    "right" : "String splits[] = new String[splitCount + 1];",
    "info" : "VariableDeclarationStatement[273177-273222]:VariableDeclarationStatement[273177-273222]"
  }, {
    "left" : "int splitIndex = 0;",
    "right" : "int splitIndex = 0;",
    "info" : "VariableDeclarationStatement[273227-273246]:VariableDeclarationStatement[273227-273246]"
  }, {
    "left" : "int startIndex = 0;",
    "right" : "int startIndex = 0;",
    "info" : "VariableDeclarationStatement[273251-273270]:VariableDeclarationStatement[273251-273270]"
  }, {
    "left" : "for (int i = 0; i < chars.length; i++)",
    "right" : "for (int i = 0; i < chars.length; i++)",
    "info" : "ForStatement[273275-273474]:ForStatement[273275-273474]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[273314-273474]:Block[273314-273474]"
  }, {
    "left" : "if (chars[i] == delim)",
    "right" : "if (chars[i] == delim)",
    "info" : "IfStatement[273322-273468]:IfStatement[273322-273468]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[273345-273468]:Block[273345-273468]"
  }, {
    "left" : "splits[splitIndex++] =\n          new String(chars, startIndex, i-startIndex);",
    "right" : "splits[splitIndex++] =\n          new String(chars, startIndex, i-startIndex);",
    "info" : "ExpressionStatement[273355-273432]:ExpressionStatement[273355-273432]"
  }, {
    "left" : "startIndex = i + 1;",
    "right" : "startIndex = i + 1;",
    "info" : "ExpressionStatement[273441-273460]:ExpressionStatement[273441-273460]"
  }, {
    "left" : "splits[splitIndex] =\n        new String(chars, startIndex, chars.length-startIndex);",
    "right" : "splits[splitIndex] =\n        new String(chars, startIndex, chars.length-startIndex);",
    "info" : "ExpressionStatement[273521-273605]:ExpressionStatement[273521-273605]"
  }, {
    "left" : "return splits;",
    "right" : "return splits;",
    "info" : "ReturnStatement[273618-273632]:ReturnStatement[273618-273632]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[273641-273647]:Modifier[273641-273647]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[273648-273654]:Modifier[273648-273654]"
  }, {
    "left" : "String[]",
    "right" : "String[]",
    "info" : "ArrayType[273655-273663]:ArrayType[273655-273663]"
  }, {
    "left" : "String value",
    "right" : "String value",
    "info" : "SingleVariableDeclaration[273670-273682]:SingleVariableDeclaration[273670-273682]"
  }, {
    "left" : "String delim",
    "right" : "String delim",
    "info" : "SingleVariableDeclaration[273684-273696]:SingleVariableDeclaration[273684-273696]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[273698-274086]:Block[273698-274086]"
  }, {
    "left" : "ArrayList<String> items = new ArrayList<String>();",
    "right" : "ArrayList<String> items = new ArrayList<String>();",
    "info" : "VariableDeclarationStatement[273704-273754]:VariableDeclarationStatement[273704-273754]"
  }, {
    "left" : "int index;",
    "right" : "int index;",
    "info" : "VariableDeclarationStatement[273759-273769]:VariableDeclarationStatement[273759-273769]"
  }, {
    "left" : "int offset = 0;",
    "right" : "int offset = 0;",
    "info" : "VariableDeclarationStatement[273774-273789]:VariableDeclarationStatement[273774-273789]"
  }, {
    "left" : "while ((index = value.indexOf(delim, offset)) != -1)",
    "right" : "while ((index = value.indexOf(delim, offset)) != -1)",
    "info" : "WhileStatement[273794-273942]:WhileStatement[273794-273942]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[273847-273942]:Block[273847-273942]"
  }, {
    "left" : "items.add(value.substring(offset, index));",
    "right" : "items.add(value.substring(offset, index));",
    "info" : "ExpressionStatement[273855-273897]:ExpressionStatement[273855-273897]"
  }, {
    "left" : "offset = index + delim.length();",
    "right" : "offset = index + delim.length();",
    "info" : "ExpressionStatement[273904-273936]:ExpressionStatement[273904-273936]"
  }, {
    "left" : "items.add(value.substring(offset));",
    "right" : "items.add(value.substring(offset));",
    "info" : "ExpressionStatement[273947-273982]:ExpressionStatement[273947-273982]"
  }, {
    "left" : "String[] outgoing = new String[items.size()];",
    "right" : "String[] outgoing = new String[items.size()];",
    "info" : "VariableDeclarationStatement[273987-274032]:VariableDeclarationStatement[273987-274032]"
  }, {
    "left" : "items.toArray(outgoing);",
    "right" : "items.toArray(outgoing);",
    "info" : "ExpressionStatement[274037-274061]:ExpressionStatement[274037-274061]"
  }, {
    "left" : "return outgoing;",
    "right" : "return outgoing;",
    "info" : "ReturnStatement[274066-274082]:ReturnStatement[274066-274082]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[274151-274157]:Modifier[274151-274157]"
  }, {
    "left" : "Pattern",
    "right" : "Pattern",
    "info" : "SimpleType[274158-274165]:SimpleType[274158-274165]"
  }, {
    "left" : "String regexp",
    "right" : "String regexp",
    "info" : "SingleVariableDeclaration[274179-274192]:SingleVariableDeclaration[274179-274192]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[274194-275110]:Block[274194-275110]"
  }, {
    "left" : "Pattern p = null;",
    "right" : "Pattern p = null;",
    "info" : "VariableDeclarationStatement[274200-274217]:VariableDeclarationStatement[274200-274217]"
  }, {
    "left" : "if (matchPatterns == null)",
    "right" : "if (matchPatterns == null)",
    "info" : "IfStatement[274222-274360]:IfStatement[274222-274360]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[274249-274310]:Block[274249-274310]"
  }, {
    "left" : "matchPatterns = new HashMap<String, Pattern>();",
    "right" : "matchPatterns = new HashMap<String, Pattern>();",
    "info" : "ExpressionStatement[274257-274304]:ExpressionStatement[274257-274304]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[274316-274360]:Block[274316-274360]"
  }, {
    "left" : "p = matchPatterns.get(regexp);",
    "right" : "p = matchPatterns.get(regexp);",
    "info" : "ExpressionStatement[274324-274354]:ExpressionStatement[274324-274354]"
  }, {
    "left" : "if (p == null)",
    "right" : "if (p == null)",
    "info" : "IfStatement[274365-275092]:IfStatement[274365-275092]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[274380-275092]:Block[274380-275092]"
  }, {
    "left" : "if (matchPatterns.size() == 10)",
    "right" : "if (matchPatterns.size() == 10)",
    "info" : "IfStatement[274388-274979]:IfStatement[274388-274979]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[274420-274979]:Block[274420-274979]"
  }, {
    "left" : "matchPatterns.clear();",
    "right" : "matchPatterns.clear();",
    "info" : "ExpressionStatement[274949-274971]:ExpressionStatement[274949-274971]"
  }, {
    "left" : "p = Pattern.compile(regexp, Pattern.MULTILINE | Pattern.DOTALL);",
    "right" : "p = Pattern.compile(regexp, Pattern.MULTILINE | Pattern.DOTALL);",
    "info" : "ExpressionStatement[274986-275050]:ExpressionStatement[274986-275050]"
  }, {
    "left" : "matchPatterns.put(regexp, p);",
    "right" : "matchPatterns.put(regexp, p);",
    "info" : "ExpressionStatement[275057-275086]:ExpressionStatement[275057-275086]"
  }, {
    "left" : "return p;",
    "right" : "return p;",
    "info" : "ReturnStatement[275097-275106]:ReturnStatement[275097-275106]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[276748-276754]:Modifier[276748-276754]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[276755-276761]:Modifier[276755-276761]"
  }, {
    "left" : "String[]",
    "right" : "String[]",
    "info" : "ArrayType[276762-276770]:ArrayType[276762-276770]"
  }, {
    "left" : "String str",
    "right" : "String str",
    "info" : "SingleVariableDeclaration[276777-276787]:SingleVariableDeclaration[276777-276787]"
  }, {
    "left" : "String regexp",
    "right" : "String regexp",
    "info" : "SingleVariableDeclaration[276789-276802]:SingleVariableDeclaration[276789-276802]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[276804-277104]:Block[276804-277104]"
  }, {
    "left" : "Pattern p = matchPattern(regexp);",
    "right" : "Pattern p = matchPattern(regexp);",
    "info" : "VariableDeclarationStatement[276810-276843]:VariableDeclarationStatement[276810-276843]"
  }, {
    "left" : "Matcher m = p.matcher(str);",
    "right" : "Matcher m = p.matcher(str);",
    "info" : "VariableDeclarationStatement[276848-276875]:VariableDeclarationStatement[276848-276875]"
  }, {
    "left" : "if (m.find())",
    "right" : "if (m.find())",
    "info" : "IfStatement[276880-277083]:IfStatement[276880-277083]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[276894-277083]:Block[276894-277083]"
  }, {
    "left" : "int count = m.groupCount() + 1;",
    "right" : "int count = m.groupCount() + 1;",
    "info" : "VariableDeclarationStatement[276902-276933]:VariableDeclarationStatement[276902-276933]"
  }, {
    "left" : "String[] groups = new String[count];",
    "right" : "String[] groups = new String[count];",
    "info" : "VariableDeclarationStatement[276940-276976]:VariableDeclarationStatement[276940-276976]"
  }, {
    "left" : "for (int i = 0; i < count; i++)",
    "right" : "for (int i = 0; i < count; i++)",
    "info" : "ForStatement[276983-277056]:ForStatement[276983-277056]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[277015-277056]:Block[277015-277056]"
  }, {
    "left" : "groups[i] = m.group(i);",
    "right" : "groups[i] = m.group(i);",
    "info" : "ExpressionStatement[277025-277048]:ExpressionStatement[277025-277048]"
  }, {
    "left" : "return groups;",
    "right" : "return groups;",
    "info" : "ReturnStatement[277063-277077]:ReturnStatement[277063-277077]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[277088-277100]:ReturnStatement[277088-277100]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[278828-278834]:Modifier[278828-278834]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[278835-278841]:Modifier[278835-278841]"
  }, {
    "left" : "String[][]",
    "right" : "String[][]",
    "info" : "ArrayType[278842-278852]:ArrayType[278842-278852]"
  }, {
    "left" : "String str",
    "right" : "String str",
    "info" : "SingleVariableDeclaration[278862-278872]:SingleVariableDeclaration[278862-278872]"
  }, {
    "left" : "String regexp",
    "right" : "String regexp",
    "info" : "SingleVariableDeclaration[278874-278887]:SingleVariableDeclaration[278874-278887]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[278889-279462]:Block[278889-279462]"
  }, {
    "left" : "Pattern p = matchPattern(regexp);",
    "right" : "Pattern p = matchPattern(regexp);",
    "info" : "VariableDeclarationStatement[278895-278928]:VariableDeclarationStatement[278895-278928]"
  }, {
    "left" : "Matcher m = p.matcher(str);",
    "right" : "Matcher m = p.matcher(str);",
    "info" : "VariableDeclarationStatement[278933-278960]:VariableDeclarationStatement[278933-278960]"
  }, {
    "left" : "ArrayList<String[]> results = new ArrayList<String[]>();",
    "right" : "ArrayList<String[]> results = new ArrayList<String[]>();",
    "info" : "VariableDeclarationStatement[278965-279021]:VariableDeclarationStatement[278965-279021]"
  }, {
    "left" : "int count = m.groupCount() + 1;",
    "right" : "int count = m.groupCount() + 1;",
    "info" : "VariableDeclarationStatement[279026-279057]:VariableDeclarationStatement[279026-279057]"
  }, {
    "left" : "while (m.find())",
    "right" : "while (m.find())",
    "info" : "WhileStatement[279062-279236]:WhileStatement[279062-279236]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[279079-279236]:Block[279079-279236]"
  }, {
    "left" : "String[] groups = new String[count];",
    "right" : "String[] groups = new String[count];",
    "info" : "VariableDeclarationStatement[279087-279123]:VariableDeclarationStatement[279087-279123]"
  }, {
    "left" : "for (int i = 0; i < count; i++)",
    "right" : "for (int i = 0; i < count; i++)",
    "info" : "ForStatement[279130-279203]:ForStatement[279130-279203]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[279162-279203]:Block[279162-279203]"
  }, {
    "left" : "groups[i] = m.group(i);",
    "right" : "groups[i] = m.group(i);",
    "info" : "ExpressionStatement[279172-279195]:ExpressionStatement[279172-279195]"
  }, {
    "left" : "results.add(groups);",
    "right" : "results.add(groups);",
    "info" : "ExpressionStatement[279210-279230]:ExpressionStatement[279210-279230]"
  }, {
    "left" : "if (results.isEmpty())",
    "right" : "if (results.isEmpty())",
    "info" : "IfStatement[279241-279290]:IfStatement[279241-279290]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[279264-279290]:Block[279264-279290]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[279272-279284]:ReturnStatement[279272-279284]"
  }, {
    "left" : "String[][] matches = new String[results.size()][count];",
    "right" : "String[][] matches = new String[results.size()][count];",
    "info" : "VariableDeclarationStatement[279295-279350]:VariableDeclarationStatement[279295-279350]"
  }, {
    "left" : "for (int i = 0; i < matches.length; i++)",
    "right" : "for (int i = 0; i < matches.length; i++)",
    "info" : "ForStatement[279355-279438]:ForStatement[279355-279438]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[279396-279438]:Block[279396-279438]"
  }, {
    "left" : "matches[i] = results.get(i);",
    "right" : "matches[i] = results.get(i);",
    "info" : "ExpressionStatement[279404-279432]:ExpressionStatement[279404-279432]"
  }, {
    "left" : "return matches;",
    "right" : "return matches;",
    "info" : "ReturnStatement[279443-279458]:ReturnStatement[279443-279458]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[280206-280212]:Modifier[280206-280212]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[280213-280218]:Modifier[280213-280218]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[280219-280225]:Modifier[280219-280225]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[280226-280233]:PrimitiveType[280226-280233]"
  }, {
    "left" : "int what",
    "right" : "int what",
    "info" : "SingleVariableDeclaration[280247-280255]:SingleVariableDeclaration[280247-280255]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[280257-280286]:Block[280257-280286]"
  }, {
    "left" : "return (what != 0);",
    "right" : "return (what != 0);",
    "info" : "ReturnStatement[280263-280282]:ReturnStatement[280263-280282]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[280567-280573]:Modifier[280567-280573]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[280574-280579]:Modifier[280574-280579]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[280580-280586]:Modifier[280580-280586]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[280587-280594]:PrimitiveType[280587-280594]"
  }, {
    "left" : "String what",
    "right" : "String what",
    "info" : "SingleVariableDeclaration[280608-280619]:SingleVariableDeclaration[280608-280619]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[280621-280665]:Block[280621-280665]"
  }, {
    "left" : "return Boolean.parseBoolean(what);",
    "right" : "return Boolean.parseBoolean(what);",
    "info" : "ReturnStatement[280627-280661]:ReturnStatement[280627-280661]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[281765-281771]:Modifier[281765-281771]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[281772-281777]:Modifier[281772-281777]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[281778-281784]:Modifier[281778-281784]"
  }, {
    "left" : "boolean[]",
    "right" : "boolean[]",
    "info" : "ArrayType[281785-281794]:ArrayType[281785-281794]"
  }, {
    "left" : "int what[]",
    "right" : "int what[]",
    "info" : "SingleVariableDeclaration[281808-281818]:SingleVariableDeclaration[281808-281818]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[281820-281983]:Block[281820-281983]"
  }, {
    "left" : "boolean outgoing[] = new boolean[what.length];",
    "right" : "boolean outgoing[] = new boolean[what.length];",
    "info" : "VariableDeclarationStatement[281826-281872]:VariableDeclarationStatement[281826-281872]"
  }, {
    "left" : "for (int i = 0; i < what.length; i++)",
    "right" : "for (int i = 0; i < what.length; i++)",
    "info" : "ForStatement[281877-281958]:ForStatement[281877-281958]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[281915-281958]:Block[281915-281958]"
  }, {
    "left" : "outgoing[i] = (what[i] != 0);",
    "right" : "outgoing[i] = (what[i] != 0);",
    "info" : "ExpressionStatement[281923-281952]:ExpressionStatement[281923-281952]"
  }, {
    "left" : "return outgoing;",
    "right" : "return outgoing;",
    "info" : "ReturnStatement[281963-281979]:ReturnStatement[281963-281979]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[282293-282299]:Modifier[282293-282299]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[282300-282305]:Modifier[282300-282305]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[282306-282312]:Modifier[282306-282312]"
  }, {
    "left" : "boolean[]",
    "right" : "boolean[]",
    "info" : "ArrayType[282313-282322]:ArrayType[282313-282322]"
  }, {
    "left" : "String what[]",
    "right" : "String what[]",
    "info" : "SingleVariableDeclaration[282336-282349]:SingleVariableDeclaration[282336-282349]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[282351-282529]:Block[282351-282529]"
  }, {
    "left" : "boolean outgoing[] = new boolean[what.length];",
    "right" : "boolean outgoing[] = new boolean[what.length];",
    "info" : "VariableDeclarationStatement[282357-282403]:VariableDeclarationStatement[282357-282403]"
  }, {
    "left" : "for (int i = 0; i < what.length; i++)",
    "right" : "for (int i = 0; i < what.length; i++)",
    "info" : "ForStatement[282408-282504]:ForStatement[282408-282504]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[282446-282504]:Block[282446-282504]"
  }, {
    "left" : "outgoing[i] = Boolean.parseBoolean(what[i]);",
    "right" : "outgoing[i] = Boolean.parseBoolean(what[i]);",
    "info" : "ExpressionStatement[282454-282498]:ExpressionStatement[282454-282498]"
  }, {
    "left" : "return outgoing;",
    "right" : "return outgoing;",
    "info" : "ReturnStatement[282509-282525]:ReturnStatement[282509-282525]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[282607-282613]:Modifier[282607-282613]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[282614-282619]:Modifier[282614-282619]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[282620-282626]:Modifier[282620-282626]"
  }, {
    "left" : "byte",
    "right" : "byte",
    "info" : "PrimitiveType[282627-282631]:PrimitiveType[282627-282631]"
  }, {
    "left" : "boolean what",
    "right" : "boolean what",
    "info" : "SingleVariableDeclaration[282642-282654]:SingleVariableDeclaration[282642-282654]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[282656-282692]:Block[282656-282692]"
  }, {
    "left" : "return what ? (byte)1 : 0;",
    "right" : "return what ? (byte)1 : 0;",
    "info" : "ReturnStatement[282662-282688]:ReturnStatement[282662-282688]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[282696-282702]:Modifier[282696-282702]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[282703-282708]:Modifier[282703-282708]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[282709-282715]:Modifier[282709-282715]"
  }, {
    "left" : "byte",
    "right" : "byte",
    "info" : "PrimitiveType[282716-282720]:PrimitiveType[282716-282720]"
  }, {
    "left" : "char what",
    "right" : "char what",
    "info" : "SingleVariableDeclaration[282731-282740]:SingleVariableDeclaration[282731-282740]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[282742-282771]:Block[282742-282771]"
  }, {
    "left" : "return (byte) what;",
    "right" : "return (byte) what;",
    "info" : "ReturnStatement[282748-282767]:ReturnStatement[282748-282767]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[282775-282781]:Modifier[282775-282781]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[282782-282787]:Modifier[282782-282787]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[282788-282794]:Modifier[282788-282794]"
  }, {
    "left" : "byte",
    "right" : "byte",
    "info" : "PrimitiveType[282795-282799]:PrimitiveType[282795-282799]"
  }, {
    "left" : "int what",
    "right" : "int what",
    "info" : "SingleVariableDeclaration[282810-282818]:SingleVariableDeclaration[282810-282818]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[282820-282849]:Block[282820-282849]"
  }, {
    "left" : "return (byte) what;",
    "right" : "return (byte) what;",
    "info" : "ReturnStatement[282826-282845]:ReturnStatement[282826-282845]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[282853-282859]:Modifier[282853-282859]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[282860-282865]:Modifier[282860-282865]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[282866-282872]:Modifier[282866-282872]"
  }, {
    "left" : "byte",
    "right" : "byte",
    "info" : "PrimitiveType[282873-282877]:PrimitiveType[282873-282877]"
  }, {
    "left" : "float what",
    "right" : "float what",
    "info" : "SingleVariableDeclaration[282888-282898]:SingleVariableDeclaration[282888-282898]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[282900-282929]:Block[282900-282929]"
  }, {
    "left" : "return (byte) what;",
    "right" : "return (byte) what;",
    "info" : "ReturnStatement[282906-282925]:ReturnStatement[282906-282925]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[283147-283153]:Modifier[283147-283153]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[283154-283159]:Modifier[283154-283159]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[283160-283166]:Modifier[283160-283166]"
  }, {
    "left" : "byte[]",
    "right" : "byte[]",
    "info" : "ArrayType[283167-283173]:ArrayType[283167-283173]"
  }, {
    "left" : "boolean what[]",
    "right" : "boolean what[]",
    "info" : "SingleVariableDeclaration[283184-283198]:SingleVariableDeclaration[283184-283198]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[283200-283364]:Block[283200-283364]"
  }, {
    "left" : "byte outgoing[] = new byte[what.length];",
    "right" : "byte outgoing[] = new byte[what.length];",
    "info" : "VariableDeclarationStatement[283206-283246]:VariableDeclarationStatement[283206-283246]"
  }, {
    "left" : "for (int i = 0; i < what.length; i++)",
    "right" : "for (int i = 0; i < what.length; i++)",
    "info" : "ForStatement[283251-283339]:ForStatement[283251-283339]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[283289-283339]:Block[283289-283339]"
  }, {
    "left" : "outgoing[i] = what[i] ? (byte)1 : 0;",
    "right" : "outgoing[i] = what[i] ? (byte)1 : 0;",
    "info" : "ExpressionStatement[283297-283333]:ExpressionStatement[283297-283333]"
  }, {
    "left" : "return outgoing;",
    "right" : "return outgoing;",
    "info" : "ReturnStatement[283344-283360]:ReturnStatement[283344-283360]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[283368-283374]:Modifier[283368-283374]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[283375-283380]:Modifier[283375-283380]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[283381-283387]:Modifier[283381-283387]"
  }, {
    "left" : "byte[]",
    "right" : "byte[]",
    "info" : "ArrayType[283388-283394]:ArrayType[283388-283394]"
  }, {
    "left" : "char what[]",
    "right" : "char what[]",
    "info" : "SingleVariableDeclaration[283405-283416]:SingleVariableDeclaration[283405-283416]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[283418-283575]:Block[283418-283575]"
  }, {
    "left" : "byte outgoing[] = new byte[what.length];",
    "right" : "byte outgoing[] = new byte[what.length];",
    "info" : "VariableDeclarationStatement[283424-283464]:VariableDeclarationStatement[283424-283464]"
  }, {
    "left" : "for (int i = 0; i < what.length; i++)",
    "right" : "for (int i = 0; i < what.length; i++)",
    "info" : "ForStatement[283469-283550]:ForStatement[283469-283550]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[283507-283550]:Block[283507-283550]"
  }, {
    "left" : "outgoing[i] = (byte) what[i];",
    "right" : "outgoing[i] = (byte) what[i];",
    "info" : "ExpressionStatement[283515-283544]:ExpressionStatement[283515-283544]"
  }, {
    "left" : "return outgoing;",
    "right" : "return outgoing;",
    "info" : "ReturnStatement[283555-283571]:ReturnStatement[283555-283571]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[283579-283585]:Modifier[283579-283585]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[283586-283591]:Modifier[283586-283591]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[283592-283598]:Modifier[283592-283598]"
  }, {
    "left" : "byte[]",
    "right" : "byte[]",
    "info" : "ArrayType[283599-283605]:ArrayType[283599-283605]"
  }, {
    "left" : "int what[]",
    "right" : "int what[]",
    "info" : "SingleVariableDeclaration[283616-283626]:SingleVariableDeclaration[283616-283626]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[283628-283785]:Block[283628-283785]"
  }, {
    "left" : "byte outgoing[] = new byte[what.length];",
    "right" : "byte outgoing[] = new byte[what.length];",
    "info" : "VariableDeclarationStatement[283634-283674]:VariableDeclarationStatement[283634-283674]"
  }, {
    "left" : "for (int i = 0; i < what.length; i++)",
    "right" : "for (int i = 0; i < what.length; i++)",
    "info" : "ForStatement[283679-283760]:ForStatement[283679-283760]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[283717-283760]:Block[283717-283760]"
  }, {
    "left" : "outgoing[i] = (byte) what[i];",
    "right" : "outgoing[i] = (byte) what[i];",
    "info" : "ExpressionStatement[283725-283754]:ExpressionStatement[283725-283754]"
  }, {
    "left" : "return outgoing;",
    "right" : "return outgoing;",
    "info" : "ReturnStatement[283765-283781]:ReturnStatement[283765-283781]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[283789-283795]:Modifier[283789-283795]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[283796-283801]:Modifier[283796-283801]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[283802-283808]:Modifier[283802-283808]"
  }, {
    "left" : "byte[]",
    "right" : "byte[]",
    "info" : "ArrayType[283809-283815]:ArrayType[283809-283815]"
  }, {
    "left" : "float what[]",
    "right" : "float what[]",
    "info" : "SingleVariableDeclaration[283826-283838]:SingleVariableDeclaration[283826-283838]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[283840-283997]:Block[283840-283997]"
  }, {
    "left" : "byte outgoing[] = new byte[what.length];",
    "right" : "byte outgoing[] = new byte[what.length];",
    "info" : "VariableDeclarationStatement[283846-283886]:VariableDeclarationStatement[283846-283886]"
  }, {
    "left" : "for (int i = 0; i < what.length; i++)",
    "right" : "for (int i = 0; i < what.length; i++)",
    "info" : "ForStatement[283891-283972]:ForStatement[283891-283972]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[283929-283972]:Block[283929-283972]"
  }, {
    "left" : "outgoing[i] = (byte) what[i];",
    "right" : "outgoing[i] = (byte) what[i];",
    "info" : "ExpressionStatement[283937-283966]:ExpressionStatement[283937-283966]"
  }, {
    "left" : "return outgoing;",
    "right" : "return outgoing;",
    "info" : "ReturnStatement[283977-283993]:ReturnStatement[283977-283993]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[284442-284448]:Modifier[284442-284448]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[284449-284454]:Modifier[284449-284454]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[284455-284461]:Modifier[284455-284461]"
  }, {
    "left" : "char",
    "right" : "char",
    "info" : "PrimitiveType[284462-284466]:PrimitiveType[284462-284466]"
  }, {
    "left" : "byte what",
    "right" : "byte what",
    "info" : "SingleVariableDeclaration[284477-284486]:SingleVariableDeclaration[284477-284486]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[284488-284526]:Block[284488-284526]"
  }, {
    "left" : "return (char) (what & 0xff);",
    "right" : "return (char) (what & 0xff);",
    "info" : "ReturnStatement[284494-284522]:ReturnStatement[284494-284522]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[284530-284536]:Modifier[284530-284536]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[284537-284542]:Modifier[284537-284542]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[284543-284549]:Modifier[284543-284549]"
  }, {
    "left" : "char",
    "right" : "char",
    "info" : "PrimitiveType[284550-284554]:PrimitiveType[284550-284554]"
  }, {
    "left" : "int what",
    "right" : "int what",
    "info" : "SingleVariableDeclaration[284565-284573]:SingleVariableDeclaration[284565-284573]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[284575-284604]:Block[284575-284604]"
  }, {
    "left" : "return (char) what;",
    "right" : "return (char) what;",
    "info" : "ReturnStatement[284581-284600]:ReturnStatement[284581-284600]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[285142-285148]:Modifier[285142-285148]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[285149-285154]:Modifier[285149-285154]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[285155-285161]:Modifier[285155-285161]"
  }, {
    "left" : "char[]",
    "right" : "char[]",
    "info" : "ArrayType[285162-285168]:ArrayType[285162-285168]"
  }, {
    "left" : "byte what[]",
    "right" : "byte what[]",
    "info" : "SingleVariableDeclaration[285179-285190]:SingleVariableDeclaration[285179-285190]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[285192-285358]:Block[285192-285358]"
  }, {
    "left" : "char outgoing[] = new char[what.length];",
    "right" : "char outgoing[] = new char[what.length];",
    "info" : "VariableDeclarationStatement[285198-285238]:VariableDeclarationStatement[285198-285238]"
  }, {
    "left" : "for (int i = 0; i < what.length; i++)",
    "right" : "for (int i = 0; i < what.length; i++)",
    "info" : "ForStatement[285243-285333]:ForStatement[285243-285333]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[285281-285333]:Block[285281-285333]"
  }, {
    "left" : "outgoing[i] = (char) (what[i] & 0xff);",
    "right" : "outgoing[i] = (char) (what[i] & 0xff);",
    "info" : "ExpressionStatement[285289-285327]:ExpressionStatement[285289-285327]"
  }, {
    "left" : "return outgoing;",
    "right" : "return outgoing;",
    "info" : "ReturnStatement[285338-285354]:ReturnStatement[285338-285354]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[285362-285368]:Modifier[285362-285368]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[285369-285374]:Modifier[285369-285374]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[285375-285381]:Modifier[285375-285381]"
  }, {
    "left" : "char[]",
    "right" : "char[]",
    "info" : "ArrayType[285382-285388]:ArrayType[285382-285388]"
  }, {
    "left" : "int what[]",
    "right" : "int what[]",
    "info" : "SingleVariableDeclaration[285399-285409]:SingleVariableDeclaration[285399-285409]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[285411-285568]:Block[285411-285568]"
  }, {
    "left" : "char outgoing[] = new char[what.length];",
    "right" : "char outgoing[] = new char[what.length];",
    "info" : "VariableDeclarationStatement[285417-285457]:VariableDeclarationStatement[285417-285457]"
  }, {
    "left" : "for (int i = 0; i < what.length; i++)",
    "right" : "for (int i = 0; i < what.length; i++)",
    "info" : "ForStatement[285462-285543]:ForStatement[285462-285543]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[285500-285543]:Block[285500-285543]"
  }, {
    "left" : "outgoing[i] = (char) what[i];",
    "right" : "outgoing[i] = (char) what[i];",
    "info" : "ExpressionStatement[285508-285537]:ExpressionStatement[285508-285537]"
  }, {
    "left" : "return outgoing;",
    "right" : "return outgoing;",
    "info" : "ReturnStatement[285548-285564]:ReturnStatement[285548-285564]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[286130-286136]:Modifier[286130-286136]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[286137-286142]:Modifier[286137-286142]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[286143-286149]:Modifier[286143-286149]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[286150-286153]:PrimitiveType[286150-286153]"
  }, {
    "left" : "boolean what",
    "right" : "boolean what",
    "info" : "SingleVariableDeclaration[286163-286175]:SingleVariableDeclaration[286163-286175]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[286177-286207]:Block[286177-286207]"
  }, {
    "left" : "return what ? 1 : 0;",
    "right" : "return what ? 1 : 0;",
    "info" : "ReturnStatement[286183-286203]:ReturnStatement[286183-286203]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[286283-286289]:Modifier[286283-286289]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[286290-286295]:Modifier[286290-286295]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[286296-286302]:Modifier[286296-286302]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[286303-286306]:PrimitiveType[286303-286306]"
  }, {
    "left" : "byte what",
    "right" : "byte what",
    "info" : "SingleVariableDeclaration[286316-286325]:SingleVariableDeclaration[286316-286325]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[286327-286356]:Block[286327-286356]"
  }, {
    "left" : "return what & 0xff;",
    "right" : "return what & 0xff;",
    "info" : "ReturnStatement[286333-286352]:ReturnStatement[286333-286352]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[286590-286596]:Modifier[286590-286596]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[286597-286602]:Modifier[286597-286602]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[286603-286609]:Modifier[286603-286609]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[286610-286613]:PrimitiveType[286610-286613]"
  }, {
    "left" : "char what",
    "right" : "char what",
    "info" : "SingleVariableDeclaration[286623-286632]:SingleVariableDeclaration[286623-286632]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[286634-286656]:Block[286634-286656]"
  }, {
    "left" : "return what;",
    "right" : "return what;",
    "info" : "ReturnStatement[286640-286652]:ReturnStatement[286640-286652]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[286712-286718]:Modifier[286712-286718]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[286719-286724]:Modifier[286719-286724]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[286725-286731]:Modifier[286725-286731]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[286732-286735]:PrimitiveType[286732-286735]"
  }, {
    "left" : "float what",
    "right" : "float what",
    "info" : "SingleVariableDeclaration[286745-286755]:SingleVariableDeclaration[286745-286755]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[286757-286785]:Block[286757-286785]"
  }, {
    "left" : "return (int) what;",
    "right" : "return (int) what;",
    "info" : "ReturnStatement[286763-286781]:ReturnStatement[286763-286781]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[286871-286877]:Modifier[286871-286877]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[286878-286883]:Modifier[286878-286883]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[286884-286890]:Modifier[286884-286890]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[286891-286894]:PrimitiveType[286891-286894]"
  }, {
    "left" : "String what",
    "right" : "String what",
    "info" : "SingleVariableDeclaration[286904-286915]:SingleVariableDeclaration[286904-286915]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[286917-286952]:Block[286917-286952]"
  }, {
    "left" : "return parseInt(what, 0);",
    "right" : "return parseInt(what, 0);",
    "info" : "ReturnStatement[286923-286948]:ReturnStatement[286923-286948]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[287083-287089]:Modifier[287083-287089]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[287090-287095]:Modifier[287090-287095]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[287096-287102]:Modifier[287096-287102]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[287103-287106]:PrimitiveType[287103-287106]"
  }, {
    "left" : "String what",
    "right" : "String what",
    "info" : "SingleVariableDeclaration[287116-287127]:SingleVariableDeclaration[287116-287127]"
  }, {
    "left" : "int otherwise",
    "right" : "int otherwise",
    "info" : "SingleVariableDeclaration[287129-287142]:SingleVariableDeclaration[287129-287142]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[287144-287409]:Block[287144-287409]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[287150-287383]:TryStatement[287150-287383]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[287154-287347]:Block[287154-287347]"
  }, {
    "left" : "int offset = what.indexOf('.');",
    "right" : "int offset = what.indexOf('.');",
    "info" : "VariableDeclarationStatement[287162-287193]:VariableDeclarationStatement[287162-287193]"
  }, {
    "left" : "if (offset == -1)",
    "right" : "if (offset == -1)",
    "info" : "IfStatement[287200-287341]:IfStatement[287200-287341]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[287218-287266]:Block[287218-287266]"
  }, {
    "left" : "return Integer.parseInt(what);",
    "right" : "return Integer.parseInt(what);",
    "info" : "ReturnStatement[287228-287258]:ReturnStatement[287228-287258]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[287272-287341]:Block[287272-287341]"
  }, {
    "left" : "return Integer.parseInt(what.substring(0, offset));",
    "right" : "return Integer.parseInt(what.substring(0, offset));",
    "info" : "ReturnStatement[287282-287333]:ReturnStatement[287282-287333]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[287380-287383]:Block[287380-287383]"
  }, {
    "left" : "return otherwise;",
    "right" : "return otherwise;",
    "info" : "ReturnStatement[287388-287405]:ReturnStatement[287388-287405]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[287487-287493]:Modifier[287487-287493]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[287494-287499]:Modifier[287494-287499]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[287500-287506]:Modifier[287500-287506]"
  }, {
    "left" : "int[]",
    "right" : "int[]",
    "info" : "ArrayType[287507-287512]:ArrayType[287507-287512]"
  }, {
    "left" : "boolean what[]",
    "right" : "boolean what[]",
    "info" : "SingleVariableDeclaration[287522-287536]:SingleVariableDeclaration[287522-287536]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[287538-287682]:Block[287538-287682]"
  }, {
    "left" : "int list[] = new int[what.length];",
    "right" : "int list[] = new int[what.length];",
    "info" : "VariableDeclarationStatement[287544-287578]:VariableDeclarationStatement[287544-287578]"
  }, {
    "left" : "for (int i = 0; i < what.length; i++)",
    "right" : "for (int i = 0; i < what.length; i++)",
    "info" : "ForStatement[287583-287661]:ForStatement[287583-287661]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[287621-287661]:Block[287621-287661]"
  }, {
    "left" : "list[i] = what[i] ? 1 : 0;",
    "right" : "list[i] = what[i] ? 1 : 0;",
    "info" : "ExpressionStatement[287629-287655]:ExpressionStatement[287629-287655]"
  }, {
    "left" : "return list;",
    "right" : "return list;",
    "info" : "ReturnStatement[287666-287678]:ReturnStatement[287666-287678]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[287686-287692]:Modifier[287686-287692]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[287693-287698]:Modifier[287693-287698]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[287699-287705]:Modifier[287699-287705]"
  }, {
    "left" : "int[]",
    "right" : "int[]",
    "info" : "ArrayType[287706-287711]:ArrayType[287706-287711]"
  }, {
    "left" : "byte what[]",
    "right" : "byte what[]",
    "info" : "SingleVariableDeclaration[287721-287732]:SingleVariableDeclaration[287721-287732]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[287734-287901]:Block[287734-287901]"
  }, {
    "left" : "int list[] = new int[what.length];",
    "right" : "int list[] = new int[what.length];",
    "info" : "VariableDeclarationStatement[287762-287796]:VariableDeclarationStatement[287762-287796]"
  }, {
    "left" : "for (int i = 0; i < what.length; i++)",
    "right" : "for (int i = 0; i < what.length; i++)",
    "info" : "ForStatement[287801-287880]:ForStatement[287801-287880]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[287839-287880]:Block[287839-287880]"
  }, {
    "left" : "list[i] = (what[i] & 0xff);",
    "right" : "list[i] = (what[i] & 0xff);",
    "info" : "ExpressionStatement[287847-287874]:ExpressionStatement[287847-287874]"
  }, {
    "left" : "return list;",
    "right" : "return list;",
    "info" : "ReturnStatement[287885-287897]:ReturnStatement[287885-287897]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[287905-287911]:Modifier[287905-287911]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[287912-287917]:Modifier[287912-287917]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[287918-287924]:Modifier[287918-287924]"
  }, {
    "left" : "int[]",
    "right" : "int[]",
    "info" : "ArrayType[287925-287930]:ArrayType[287925-287930]"
  }, {
    "left" : "char what[]",
    "right" : "char what[]",
    "info" : "SingleVariableDeclaration[287940-287951]:SingleVariableDeclaration[287940-287951]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[287953-288089]:Block[287953-288089]"
  }, {
    "left" : "int list[] = new int[what.length];",
    "right" : "int list[] = new int[what.length];",
    "info" : "VariableDeclarationStatement[287959-287993]:VariableDeclarationStatement[287959-287993]"
  }, {
    "left" : "for (int i = 0; i < what.length; i++)",
    "right" : "for (int i = 0; i < what.length; i++)",
    "info" : "ForStatement[287998-288068]:ForStatement[287998-288068]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[288036-288068]:Block[288036-288068]"
  }, {
    "left" : "list[i] = what[i];",
    "right" : "list[i] = what[i];",
    "info" : "ExpressionStatement[288044-288062]:ExpressionStatement[288044-288062]"
  }, {
    "left" : "return list;",
    "right" : "return list;",
    "info" : "ReturnStatement[288073-288085]:ReturnStatement[288073-288085]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[288093-288099]:Modifier[288093-288099]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[288100-288106]:Modifier[288100-288106]"
  }, {
    "left" : "int[]",
    "right" : "int[]",
    "info" : "ArrayType[288107-288112]:ArrayType[288107-288112]"
  }, {
    "left" : "float what[]",
    "right" : "float what[]",
    "info" : "SingleVariableDeclaration[288122-288134]:SingleVariableDeclaration[288122-288134]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[288136-288283]:Block[288136-288283]"
  }, {
    "left" : "int inties[] = new int[what.length];",
    "right" : "int inties[] = new int[what.length];",
    "info" : "VariableDeclarationStatement[288142-288178]:VariableDeclarationStatement[288142-288178]"
  }, {
    "left" : "for (int i = 0; i < what.length; i++)",
    "right" : "for (int i = 0; i < what.length; i++)",
    "info" : "ForStatement[288183-288260]:ForStatement[288183-288260]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[288221-288260]:Block[288221-288260]"
  }, {
    "left" : "inties[i] = (int)what[i];",
    "right" : "inties[i] = (int)what[i];",
    "info" : "ExpressionStatement[288229-288254]:ExpressionStatement[288229-288254]"
  }, {
    "left" : "return inties;",
    "right" : "return inties;",
    "info" : "ReturnStatement[288265-288279]:ReturnStatement[288265-288279]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[288564-288570]:Modifier[288564-288570]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[288571-288577]:Modifier[288571-288577]"
  }, {
    "left" : "int[]",
    "right" : "int[]",
    "info" : "ArrayType[288578-288583]:ArrayType[288578-288583]"
  }, {
    "left" : "String what[]",
    "right" : "String what[]",
    "info" : "SingleVariableDeclaration[288593-288606]:SingleVariableDeclaration[288593-288606]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[288608-288643]:Block[288608-288643]"
  }, {
    "left" : "return parseInt(what, 0);",
    "right" : "return parseInt(what, 0);",
    "info" : "ReturnStatement[288614-288639]:ReturnStatement[288614-288639]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[289002-289008]:Modifier[289002-289008]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[289009-289015]:Modifier[289009-289015]"
  }, {
    "left" : "int[]",
    "right" : "int[]",
    "info" : "ArrayType[289016-289021]:ArrayType[289016-289021]"
  }, {
    "left" : "String what[]",
    "right" : "String what[]",
    "info" : "SingleVariableDeclaration[289031-289044]:SingleVariableDeclaration[289031-289044]"
  }, {
    "left" : "int missing",
    "right" : "int missing",
    "info" : "SingleVariableDeclaration[289046-289057]:SingleVariableDeclaration[289046-289057]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[289059-289312]:Block[289059-289312]"
  }, {
    "left" : "int output[] = new int[what.length];",
    "right" : "int output[] = new int[what.length];",
    "info" : "VariableDeclarationStatement[289065-289101]:VariableDeclarationStatement[289065-289101]"
  }, {
    "left" : "for (int i = 0; i < what.length; i++)",
    "right" : "for (int i = 0; i < what.length; i++)",
    "info" : "ForStatement[289106-289289]:ForStatement[289106-289289]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[289144-289289]:Block[289144-289289]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[289152-289283]:TryStatement[289152-289283]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[289156-289212]:Block[289156-289212]"
  }, {
    "left" : "output[i] = Integer.parseInt(what[i]);",
    "right" : "output[i] = Integer.parseInt(what[i]);",
    "info" : "ExpressionStatement[289166-289204]:ExpressionStatement[289166-289204]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[289245-289283]:Block[289245-289283]"
  }, {
    "left" : "output[i] = missing;",
    "right" : "output[i] = missing;",
    "info" : "ExpressionStatement[289255-289275]:ExpressionStatement[289255-289275]"
  }, {
    "left" : "return output;",
    "right" : "return output;",
    "info" : "ReturnStatement[289294-289308]:ReturnStatement[289294-289308]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[289605-289611]:Modifier[289605-289611]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[289612-289617]:Modifier[289612-289617]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[289618-289624]:Modifier[289618-289624]"
  }, {
    "left" : "float",
    "right" : "float",
    "info" : "PrimitiveType[289625-289630]:PrimitiveType[289625-289630]"
  }, {
    "left" : "int what",
    "right" : "int what",
    "info" : "SingleVariableDeclaration[289642-289650]:SingleVariableDeclaration[289642-289650]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[289652-289696]:Block[289652-289696]"
  }, {
    "left" : "return what;",
    "right" : "return what;",
    "info" : "ReturnStatement[289680-289692]:ReturnStatement[289680-289692]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[289700-289706]:Modifier[289700-289706]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[289707-289712]:Modifier[289707-289712]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[289713-289719]:Modifier[289713-289719]"
  }, {
    "left" : "float",
    "right" : "float",
    "info" : "PrimitiveType[289720-289725]:PrimitiveType[289720-289725]"
  }, {
    "left" : "String what",
    "right" : "String what",
    "info" : "SingleVariableDeclaration[289737-289748]:SingleVariableDeclaration[289737-289748]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[289750-289795]:Block[289750-289795]"
  }, {
    "left" : "return parseFloat(what, Float.NaN);",
    "right" : "return parseFloat(what, Float.NaN);",
    "info" : "ReturnStatement[289756-289791]:ReturnStatement[289756-289791]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[289799-289805]:Modifier[289799-289805]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[289806-289811]:Modifier[289806-289811]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[289812-289818]:Modifier[289812-289818]"
  }, {
    "left" : "float",
    "right" : "float",
    "info" : "PrimitiveType[289819-289824]:PrimitiveType[289819-289824]"
  }, {
    "left" : "String what",
    "right" : "String what",
    "info" : "SingleVariableDeclaration[289836-289847]:SingleVariableDeclaration[289836-289847]"
  }, {
    "left" : "float otherwise",
    "right" : "float otherwise",
    "info" : "SingleVariableDeclaration[289849-289864]:SingleVariableDeclaration[289849-289864]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[289866-289989]:Block[289866-289989]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[289872-289962]:TryStatement[289872-289962]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[289876-289926]:Block[289876-289926]"
  }, {
    "left" : "return new Float(what).floatValue();",
    "right" : "return new Float(what).floatValue();",
    "info" : "ReturnStatement[289884-289920]:ReturnStatement[289884-289920]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[289959-289962]:Block[289959-289962]"
  }, {
    "left" : "return otherwise;",
    "right" : "return otherwise;",
    "info" : "ReturnStatement[289968-289985]:ReturnStatement[289968-289985]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[290511-290517]:Modifier[290511-290517]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[290518-290523]:Modifier[290518-290523]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[290524-290530]:Modifier[290524-290530]"
  }, {
    "left" : "float[]",
    "right" : "float[]",
    "info" : "ArrayType[290531-290538]:ArrayType[290531-290538]"
  }, {
    "left" : "byte what[]",
    "right" : "byte what[]",
    "info" : "SingleVariableDeclaration[290550-290561]:SingleVariableDeclaration[290550-290561]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[290563-290715]:Block[290563-290715]"
  }, {
    "left" : "float floaties[] = new float[what.length];",
    "right" : "float floaties[] = new float[what.length];",
    "info" : "VariableDeclarationStatement[290569-290611]:VariableDeclarationStatement[290569-290611]"
  }, {
    "left" : "for (int i = 0; i < what.length; i++)",
    "right" : "for (int i = 0; i < what.length; i++)",
    "info" : "ForStatement[290616-290690]:ForStatement[290616-290690]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[290654-290690]:Block[290654-290690]"
  }, {
    "left" : "floaties[i] = what[i];",
    "right" : "floaties[i] = what[i];",
    "info" : "ExpressionStatement[290662-290684]:ExpressionStatement[290662-290684]"
  }, {
    "left" : "return floaties;",
    "right" : "return floaties;",
    "info" : "ReturnStatement[290695-290711]:ReturnStatement[290695-290711]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[290719-290725]:Modifier[290719-290725]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[290726-290731]:Modifier[290726-290731]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[290732-290738]:Modifier[290732-290738]"
  }, {
    "left" : "float[]",
    "right" : "float[]",
    "info" : "ArrayType[290739-290746]:ArrayType[290739-290746]"
  }, {
    "left" : "int what[]",
    "right" : "int what[]",
    "info" : "SingleVariableDeclaration[290758-290768]:SingleVariableDeclaration[290758-290768]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[290770-290922]:Block[290770-290922]"
  }, {
    "left" : "float floaties[] = new float[what.length];",
    "right" : "float floaties[] = new float[what.length];",
    "info" : "VariableDeclarationStatement[290776-290818]:VariableDeclarationStatement[290776-290818]"
  }, {
    "left" : "for (int i = 0; i < what.length; i++)",
    "right" : "for (int i = 0; i < what.length; i++)",
    "info" : "ForStatement[290823-290897]:ForStatement[290823-290897]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[290861-290897]:Block[290861-290897]"
  }, {
    "left" : "floaties[i] = what[i];",
    "right" : "floaties[i] = what[i];",
    "info" : "ExpressionStatement[290869-290891]:ExpressionStatement[290869-290891]"
  }, {
    "left" : "return floaties;",
    "right" : "return floaties;",
    "info" : "ReturnStatement[290902-290918]:ReturnStatement[290902-290918]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[290926-290932]:Modifier[290926-290932]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[290933-290938]:Modifier[290933-290938]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[290939-290945]:Modifier[290939-290945]"
  }, {
    "left" : "float[]",
    "right" : "float[]",
    "info" : "ArrayType[290946-290953]:ArrayType[290946-290953]"
  }, {
    "left" : "String what[]",
    "right" : "String what[]",
    "info" : "SingleVariableDeclaration[290965-290978]:SingleVariableDeclaration[290965-290978]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[290980-291025]:Block[290980-291025]"
  }, {
    "left" : "return parseFloat(what, Float.NaN);",
    "right" : "return parseFloat(what, Float.NaN);",
    "info" : "ReturnStatement[290986-291021]:ReturnStatement[290986-291021]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[291029-291035]:Modifier[291029-291035]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[291036-291041]:Modifier[291036-291041]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[291042-291048]:Modifier[291042-291048]"
  }, {
    "left" : "float[]",
    "right" : "float[]",
    "info" : "ArrayType[291049-291056]:ArrayType[291049-291056]"
  }, {
    "left" : "String what[]",
    "right" : "String what[]",
    "info" : "SingleVariableDeclaration[291068-291081]:SingleVariableDeclaration[291068-291081]"
  }, {
    "left" : "float missing",
    "right" : "float missing",
    "info" : "SingleVariableDeclaration[291083-291096]:SingleVariableDeclaration[291083-291096]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[291098-291361]:Block[291098-291361]"
  }, {
    "left" : "float output[] = new float[what.length];",
    "right" : "float output[] = new float[what.length];",
    "info" : "VariableDeclarationStatement[291104-291144]:VariableDeclarationStatement[291104-291144]"
  }, {
    "left" : "for (int i = 0; i < what.length; i++)",
    "right" : "for (int i = 0; i < what.length; i++)",
    "info" : "ForStatement[291149-291338]:ForStatement[291149-291338]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[291187-291338]:Block[291187-291338]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[291195-291332]:TryStatement[291195-291332]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[291199-291261]:Block[291199-291261]"
  }, {
    "left" : "output[i] = new Float(what[i]).floatValue();",
    "right" : "output[i] = new Float(what[i]).floatValue();",
    "info" : "ExpressionStatement[291209-291253]:ExpressionStatement[291209-291253]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[291294-291332]:Block[291294-291332]"
  }, {
    "left" : "output[i] = missing;",
    "right" : "output[i] = missing;",
    "info" : "ExpressionStatement[291304-291324]:ExpressionStatement[291304-291324]"
  }, {
    "left" : "return output;",
    "right" : "return output;",
    "info" : "ReturnStatement[291343-291357]:ReturnStatement[291343-291357]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[291439-291445]:Modifier[291439-291445]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[291446-291451]:Modifier[291446-291451]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[291452-291458]:Modifier[291452-291458]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[291459-291465]:SimpleType[291459-291465]"
  }, {
    "left" : "boolean x",
    "right" : "boolean x",
    "info" : "SingleVariableDeclaration[291470-291479]:SingleVariableDeclaration[291470-291479]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[291481-291516]:Block[291481-291516]"
  }, {
    "left" : "return String.valueOf(x);",
    "right" : "return String.valueOf(x);",
    "info" : "ReturnStatement[291487-291512]:ReturnStatement[291487-291512]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[291520-291526]:Modifier[291520-291526]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[291527-291532]:Modifier[291527-291532]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[291533-291539]:Modifier[291533-291539]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[291540-291546]:SimpleType[291540-291546]"
  }, {
    "left" : "byte x",
    "right" : "byte x",
    "info" : "SingleVariableDeclaration[291551-291557]:SingleVariableDeclaration[291551-291557]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[291559-291594]:Block[291559-291594]"
  }, {
    "left" : "return String.valueOf(x);",
    "right" : "return String.valueOf(x);",
    "info" : "ReturnStatement[291565-291590]:ReturnStatement[291565-291590]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[291598-291604]:Modifier[291598-291604]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[291605-291610]:Modifier[291605-291610]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[291611-291617]:Modifier[291611-291617]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[291618-291624]:SimpleType[291618-291624]"
  }, {
    "left" : "char x",
    "right" : "char x",
    "info" : "SingleVariableDeclaration[291629-291635]:SingleVariableDeclaration[291629-291635]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[291637-291672]:Block[291637-291672]"
  }, {
    "left" : "return String.valueOf(x);",
    "right" : "return String.valueOf(x);",
    "info" : "ReturnStatement[291643-291668]:ReturnStatement[291643-291668]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[291676-291682]:Modifier[291676-291682]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[291683-291688]:Modifier[291683-291688]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[291689-291695]:Modifier[291689-291695]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[291696-291702]:SimpleType[291696-291702]"
  }, {
    "left" : "int x",
    "right" : "int x",
    "info" : "SingleVariableDeclaration[291707-291712]:SingleVariableDeclaration[291707-291712]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[291714-291749]:Block[291714-291749]"
  }, {
    "left" : "return String.valueOf(x);",
    "right" : "return String.valueOf(x);",
    "info" : "ReturnStatement[291720-291745]:ReturnStatement[291720-291745]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[291753-291759]:Modifier[291753-291759]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[291760-291765]:Modifier[291760-291765]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[291766-291772]:Modifier[291766-291772]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[291773-291779]:SimpleType[291773-291779]"
  }, {
    "left" : "float x",
    "right" : "float x",
    "info" : "SingleVariableDeclaration[291784-291791]:SingleVariableDeclaration[291784-291791]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[291793-291828]:Block[291793-291828]"
  }, {
    "left" : "return String.valueOf(x);",
    "right" : "return String.valueOf(x);",
    "info" : "ReturnStatement[291799-291824]:ReturnStatement[291799-291824]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[291906-291912]:Modifier[291906-291912]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[291913-291918]:Modifier[291913-291918]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[291919-291925]:Modifier[291919-291925]"
  }, {
    "left" : "String[]",
    "right" : "String[]",
    "info" : "ArrayType[291926-291934]:ArrayType[291926-291934]"
  }, {
    "left" : "boolean x[]",
    "right" : "boolean x[]",
    "info" : "SingleVariableDeclaration[291939-291950]:SingleVariableDeclaration[291939-291950]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[291952-292078]:Block[291952-292078]"
  }, {
    "left" : "String s[] = new String[x.length];",
    "right" : "String s[] = new String[x.length];",
    "info" : "VariableDeclarationStatement[291958-291992]:VariableDeclarationStatement[291958-291992]"
  }, {
    "left" : "for (int i = 0; i < x.length; i++) s[i] = String.valueOf(x[i]);",
    "right" : "for (int i = 0; i < x.length; i++) s[i] = String.valueOf(x[i]);",
    "info" : "ForStatement[291997-292060]:ForStatement[291997-292060]"
  }, {
    "left" : "s[i] = String.valueOf(x[i]);",
    "right" : "s[i] = String.valueOf(x[i]);",
    "info" : "ExpressionStatement[292032-292060]:ExpressionStatement[292032-292060]"
  }, {
    "left" : "return s;",
    "right" : "return s;",
    "info" : "ReturnStatement[292065-292074]:ReturnStatement[292065-292074]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[292082-292088]:Modifier[292082-292088]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[292089-292094]:Modifier[292089-292094]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[292095-292101]:Modifier[292095-292101]"
  }, {
    "left" : "String[]",
    "right" : "String[]",
    "info" : "ArrayType[292102-292110]:ArrayType[292102-292110]"
  }, {
    "left" : "byte x[]",
    "right" : "byte x[]",
    "info" : "SingleVariableDeclaration[292115-292123]:SingleVariableDeclaration[292115-292123]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[292125-292251]:Block[292125-292251]"
  }, {
    "left" : "String s[] = new String[x.length];",
    "right" : "String s[] = new String[x.length];",
    "info" : "VariableDeclarationStatement[292131-292165]:VariableDeclarationStatement[292131-292165]"
  }, {
    "left" : "for (int i = 0; i < x.length; i++) s[i] = String.valueOf(x[i]);",
    "right" : "for (int i = 0; i < x.length; i++) s[i] = String.valueOf(x[i]);",
    "info" : "ForStatement[292170-292233]:ForStatement[292170-292233]"
  }, {
    "left" : "s[i] = String.valueOf(x[i]);",
    "right" : "s[i] = String.valueOf(x[i]);",
    "info" : "ExpressionStatement[292205-292233]:ExpressionStatement[292205-292233]"
  }, {
    "left" : "return s;",
    "right" : "return s;",
    "info" : "ReturnStatement[292238-292247]:ReturnStatement[292238-292247]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[292255-292261]:Modifier[292255-292261]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[292262-292267]:Modifier[292262-292267]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[292268-292274]:Modifier[292268-292274]"
  }, {
    "left" : "String[]",
    "right" : "String[]",
    "info" : "ArrayType[292275-292283]:ArrayType[292275-292283]"
  }, {
    "left" : "char x[]",
    "right" : "char x[]",
    "info" : "SingleVariableDeclaration[292288-292296]:SingleVariableDeclaration[292288-292296]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[292298-292424]:Block[292298-292424]"
  }, {
    "left" : "String s[] = new String[x.length];",
    "right" : "String s[] = new String[x.length];",
    "info" : "VariableDeclarationStatement[292304-292338]:VariableDeclarationStatement[292304-292338]"
  }, {
    "left" : "for (int i = 0; i < x.length; i++) s[i] = String.valueOf(x[i]);",
    "right" : "for (int i = 0; i < x.length; i++) s[i] = String.valueOf(x[i]);",
    "info" : "ForStatement[292343-292406]:ForStatement[292343-292406]"
  }, {
    "left" : "s[i] = String.valueOf(x[i]);",
    "right" : "s[i] = String.valueOf(x[i]);",
    "info" : "ExpressionStatement[292378-292406]:ExpressionStatement[292378-292406]"
  }, {
    "left" : "return s;",
    "right" : "return s;",
    "info" : "ReturnStatement[292411-292420]:ReturnStatement[292411-292420]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[292428-292434]:Modifier[292428-292434]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[292435-292440]:Modifier[292435-292440]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[292441-292447]:Modifier[292441-292447]"
  }, {
    "left" : "String[]",
    "right" : "String[]",
    "info" : "ArrayType[292448-292456]:ArrayType[292448-292456]"
  }, {
    "left" : "int x[]",
    "right" : "int x[]",
    "info" : "SingleVariableDeclaration[292461-292468]:SingleVariableDeclaration[292461-292468]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[292470-292596]:Block[292470-292596]"
  }, {
    "left" : "String s[] = new String[x.length];",
    "right" : "String s[] = new String[x.length];",
    "info" : "VariableDeclarationStatement[292476-292510]:VariableDeclarationStatement[292476-292510]"
  }, {
    "left" : "for (int i = 0; i < x.length; i++) s[i] = String.valueOf(x[i]);",
    "right" : "for (int i = 0; i < x.length; i++) s[i] = String.valueOf(x[i]);",
    "info" : "ForStatement[292515-292578]:ForStatement[292515-292578]"
  }, {
    "left" : "s[i] = String.valueOf(x[i]);",
    "right" : "s[i] = String.valueOf(x[i]);",
    "info" : "ExpressionStatement[292550-292578]:ExpressionStatement[292550-292578]"
  }, {
    "left" : "return s;",
    "right" : "return s;",
    "info" : "ReturnStatement[292583-292592]:ReturnStatement[292583-292592]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[292600-292606]:Modifier[292600-292606]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[292607-292612]:Modifier[292607-292612]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[292613-292619]:Modifier[292613-292619]"
  }, {
    "left" : "String[]",
    "right" : "String[]",
    "info" : "ArrayType[292620-292628]:ArrayType[292620-292628]"
  }, {
    "left" : "float x[]",
    "right" : "float x[]",
    "info" : "SingleVariableDeclaration[292633-292642]:SingleVariableDeclaration[292633-292642]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[292644-292770]:Block[292644-292770]"
  }, {
    "left" : "String s[] = new String[x.length];",
    "right" : "String s[] = new String[x.length];",
    "info" : "VariableDeclarationStatement[292650-292684]:VariableDeclarationStatement[292650-292684]"
  }, {
    "left" : "for (int i = 0; i < x.length; i++) s[i] = String.valueOf(x[i]);",
    "right" : "for (int i = 0; i < x.length; i++) s[i] = String.valueOf(x[i]);",
    "info" : "ForStatement[292689-292752]:ForStatement[292689-292752]"
  }, {
    "left" : "s[i] = String.valueOf(x[i]);",
    "right" : "s[i] = String.valueOf(x[i]);",
    "info" : "ExpressionStatement[292724-292752]:ExpressionStatement[292724-292752]"
  }, {
    "left" : "return s;",
    "right" : "return s;",
    "info" : "ReturnStatement[292757-292766]:ReturnStatement[292757-292766]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[293028-293034]:Modifier[293028-293034]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[293035-293041]:Modifier[293035-293041]"
  }, {
    "left" : "String[]",
    "right" : "String[]",
    "info" : "ArrayType[293042-293050]:ArrayType[293042-293050]"
  }, {
    "left" : "int num[]",
    "right" : "int num[]",
    "info" : "SingleVariableDeclaration[293054-293063]:SingleVariableDeclaration[293054-293063]"
  }, {
    "left" : "int digits",
    "right" : "int digits",
    "info" : "SingleVariableDeclaration[293065-293075]:SingleVariableDeclaration[293065-293075]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[293077-293249]:Block[293077-293249]"
  }, {
    "left" : "String formatted[] = new String[num.length];",
    "right" : "String formatted[] = new String[num.length];",
    "info" : "VariableDeclarationStatement[293083-293127]:VariableDeclarationStatement[293083-293127]"
  }, {
    "left" : "for (int i = 0; i < formatted.length; i++)",
    "right" : "for (int i = 0; i < formatted.length; i++)",
    "info" : "ForStatement[293132-293223]:ForStatement[293132-293223]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[293175-293223]:Block[293175-293223]"
  }, {
    "left" : "formatted[i] = nf(num[i], digits);",
    "right" : "formatted[i] = nf(num[i], digits);",
    "info" : "ExpressionStatement[293183-293217]:ExpressionStatement[293183-293217]"
  }, {
    "left" : "return formatted;",
    "right" : "return formatted;",
    "info" : "ReturnStatement[293228-293245]:ReturnStatement[293228-293245]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[294204-294210]:Modifier[294204-294210]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[294211-294217]:Modifier[294211-294217]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[294218-294224]:SimpleType[294218-294224]"
  }, {
    "left" : "int num",
    "right" : "int num",
    "info" : "SingleVariableDeclaration[294228-294235]:SingleVariableDeclaration[294228-294235]"
  }, {
    "left" : "int digits",
    "right" : "int digits",
    "info" : "SingleVariableDeclaration[294237-294247]:SingleVariableDeclaration[294237-294247]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[294249-294604]:Block[294249-294604]"
  }, {
    "left" : "if ((int_nf != null) &&\n        (int_nf_digits == digits) &&\n        !int_nf_commas)",
    "right" : "if ((int_nf != null) &&\n        (int_nf_digits == digits) &&\n        !int_nf_commas)",
    "info" : "IfStatement[294255-294380]:IfStatement[294255-294380]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[294340-294380]:Block[294340-294380]"
  }, {
    "left" : "return int_nf.format(num);",
    "right" : "return int_nf.format(num);",
    "info" : "ReturnStatement[294348-294374]:ReturnStatement[294348-294374]"
  }, {
    "left" : "int_nf = NumberFormat.getInstance();",
    "right" : "int_nf = NumberFormat.getInstance();",
    "info" : "ExpressionStatement[294386-294422]:ExpressionStatement[294386-294422]"
  }, {
    "left" : "int_nf.setGroupingUsed(false);",
    "right" : "int_nf.setGroupingUsed(false);",
    "info" : "ExpressionStatement[294427-294457]:ExpressionStatement[294427-294457]"
  }, {
    "left" : "int_nf_commas = false;",
    "right" : "int_nf_commas = false;",
    "info" : "ExpressionStatement[294475-294497]:ExpressionStatement[294475-294497]"
  }, {
    "left" : "int_nf.setMinimumIntegerDigits(digits);",
    "right" : "int_nf.setMinimumIntegerDigits(digits);",
    "info" : "ExpressionStatement[294502-294541]:ExpressionStatement[294502-294541]"
  }, {
    "left" : "int_nf_digits = digits;",
    "right" : "int_nf_digits = digits;",
    "info" : "ExpressionStatement[294546-294569]:ExpressionStatement[294546-294569]"
  }, {
    "left" : "return int_nf.format(num);",
    "right" : "return int_nf.format(num);",
    "info" : "ReturnStatement[294574-294600]:ReturnStatement[294574-294600]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[295309-295315]:Modifier[295309-295315]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[295316-295322]:Modifier[295316-295322]"
  }, {
    "left" : "String[]",
    "right" : "String[]",
    "info" : "ArrayType[295323-295331]:ArrayType[295323-295331]"
  }, {
    "left" : "int num[]",
    "right" : "int num[]",
    "info" : "SingleVariableDeclaration[295336-295345]:SingleVariableDeclaration[295336-295345]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[295347-295512]:Block[295347-295512]"
  }, {
    "left" : "String formatted[] = new String[num.length];",
    "right" : "String formatted[] = new String[num.length];",
    "info" : "VariableDeclarationStatement[295353-295397]:VariableDeclarationStatement[295353-295397]"
  }, {
    "left" : "for (int i = 0; i < formatted.length; i++)",
    "right" : "for (int i = 0; i < formatted.length; i++)",
    "info" : "ForStatement[295402-295486]:ForStatement[295402-295486]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[295445-295486]:Block[295445-295486]"
  }, {
    "left" : "formatted[i] = nfc(num[i]);",
    "right" : "formatted[i] = nfc(num[i]);",
    "info" : "ExpressionStatement[295453-295480]:ExpressionStatement[295453-295480]"
  }, {
    "left" : "return formatted;",
    "right" : "return formatted;",
    "info" : "ReturnStatement[295491-295508]:ReturnStatement[295491-295508]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[295774-295780]:Modifier[295774-295780]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[295781-295787]:Modifier[295781-295787]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[295788-295794]:SimpleType[295788-295794]"
  }, {
    "left" : "int num",
    "right" : "int num",
    "info" : "SingleVariableDeclaration[295799-295806]:SingleVariableDeclaration[295799-295806]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[295808-296132]:Block[295808-296132]"
  }, {
    "left" : "if ((int_nf != null) &&\n        (int_nf_digits == 0) &&\n        int_nf_commas)",
    "right" : "if ((int_nf != null) &&\n        (int_nf_digits == 0) &&\n        int_nf_commas)",
    "info" : "IfStatement[295814-295933]:IfStatement[295814-295933]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[295893-295933]:Block[295893-295933]"
  }, {
    "left" : "return int_nf.format(num);",
    "right" : "return int_nf.format(num);",
    "info" : "ReturnStatement[295901-295927]:ReturnStatement[295901-295927]"
  }, {
    "left" : "int_nf = NumberFormat.getInstance();",
    "right" : "int_nf = NumberFormat.getInstance();",
    "info" : "ExpressionStatement[295939-295975]:ExpressionStatement[295939-295975]"
  }, {
    "left" : "int_nf.setGroupingUsed(true);",
    "right" : "int_nf.setGroupingUsed(true);",
    "info" : "ExpressionStatement[295980-296009]:ExpressionStatement[295980-296009]"
  }, {
    "left" : "int_nf_commas = true;",
    "right" : "int_nf_commas = true;",
    "info" : "ExpressionStatement[296014-296035]:ExpressionStatement[296014-296035]"
  }, {
    "left" : "int_nf.setMinimumIntegerDigits(0);",
    "right" : "int_nf.setMinimumIntegerDigits(0);",
    "info" : "ExpressionStatement[296040-296074]:ExpressionStatement[296040-296074]"
  }, {
    "left" : "int_nf_digits = 0;",
    "right" : "int_nf_digits = 0;",
    "info" : "ExpressionStatement[296079-296097]:ExpressionStatement[296079-296097]"
  }, {
    "left" : "return int_nf.format(num);",
    "right" : "return int_nf.format(num);",
    "info" : "ReturnStatement[296102-296128]:ReturnStatement[296102-296128]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[297112-297118]:Modifier[297112-297118]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[297119-297125]:Modifier[297119-297125]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[297126-297132]:SimpleType[297126-297132]"
  }, {
    "left" : "int num",
    "right" : "int num",
    "info" : "SingleVariableDeclaration[297137-297144]:SingleVariableDeclaration[297137-297144]"
  }, {
    "left" : "int digits",
    "right" : "int digits",
    "info" : "SingleVariableDeclaration[297146-297156]:SingleVariableDeclaration[297146-297156]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[297158-297229]:Block[297158-297229]"
  }, {
    "left" : "return (num < 0) ? nf(num, digits) : (' ' + nf(num, digits));",
    "right" : "return (num < 0) ? nf(num, digits) : (' ' + nf(num, digits));",
    "info" : "ReturnStatement[297164-297225]:ReturnStatement[297164-297225]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[297233-297239]:Modifier[297233-297239]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[297240-297246]:Modifier[297240-297246]"
  }, {
    "left" : "String[]",
    "right" : "String[]",
    "info" : "ArrayType[297247-297255]:ArrayType[297247-297255]"
  }, {
    "left" : "int num[]",
    "right" : "int num[]",
    "info" : "SingleVariableDeclaration[297260-297269]:SingleVariableDeclaration[297260-297269]"
  }, {
    "left" : "int digits",
    "right" : "int digits",
    "info" : "SingleVariableDeclaration[297271-297281]:SingleVariableDeclaration[297271-297281]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[297283-297456]:Block[297283-297456]"
  }, {
    "left" : "String formatted[] = new String[num.length];",
    "right" : "String formatted[] = new String[num.length];",
    "info" : "VariableDeclarationStatement[297289-297333]:VariableDeclarationStatement[297289-297333]"
  }, {
    "left" : "for (int i = 0; i < formatted.length; i++)",
    "right" : "for (int i = 0; i < formatted.length; i++)",
    "info" : "ForStatement[297338-297430]:ForStatement[297338-297430]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[297381-297430]:Block[297381-297430]"
  }, {
    "left" : "formatted[i] = nfs(num[i], digits);",
    "right" : "formatted[i] = nfs(num[i], digits);",
    "info" : "ExpressionStatement[297389-297424]:ExpressionStatement[297389-297424]"
  }, {
    "left" : "return formatted;",
    "right" : "return formatted;",
    "info" : "ReturnStatement[297435-297452]:ReturnStatement[297435-297452]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[298320-298326]:Modifier[298320-298326]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[298327-298333]:Modifier[298327-298333]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[298334-298340]:SimpleType[298334-298340]"
  }, {
    "left" : "int num",
    "right" : "int num",
    "info" : "SingleVariableDeclaration[298345-298352]:SingleVariableDeclaration[298345-298352]"
  }, {
    "left" : "int digits",
    "right" : "int digits",
    "info" : "SingleVariableDeclaration[298354-298364]:SingleVariableDeclaration[298354-298364]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[298366-298437]:Block[298366-298437]"
  }, {
    "left" : "return (num < 0) ? nf(num, digits) : ('+' + nf(num, digits));",
    "right" : "return (num < 0) ? nf(num, digits) : ('+' + nf(num, digits));",
    "info" : "ReturnStatement[298372-298433]:ReturnStatement[298372-298433]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[298441-298447]:Modifier[298441-298447]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[298448-298454]:Modifier[298448-298454]"
  }, {
    "left" : "String[]",
    "right" : "String[]",
    "info" : "ArrayType[298455-298463]:ArrayType[298455-298463]"
  }, {
    "left" : "int num[]",
    "right" : "int num[]",
    "info" : "SingleVariableDeclaration[298468-298477]:SingleVariableDeclaration[298468-298477]"
  }, {
    "left" : "int digits",
    "right" : "int digits",
    "info" : "SingleVariableDeclaration[298479-298489]:SingleVariableDeclaration[298479-298489]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[298491-298664]:Block[298491-298664]"
  }, {
    "left" : "String formatted[] = new String[num.length];",
    "right" : "String formatted[] = new String[num.length];",
    "info" : "VariableDeclarationStatement[298497-298541]:VariableDeclarationStatement[298497-298541]"
  }, {
    "left" : "for (int i = 0; i < formatted.length; i++)",
    "right" : "for (int i = 0; i < formatted.length; i++)",
    "info" : "ForStatement[298546-298638]:ForStatement[298546-298638]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[298589-298638]:Block[298589-298638]"
  }, {
    "left" : "formatted[i] = nfp(num[i], digits);",
    "right" : "formatted[i] = nfp(num[i], digits);",
    "info" : "ExpressionStatement[298597-298632]:ExpressionStatement[298597-298632]"
  }, {
    "left" : "return formatted;",
    "right" : "return formatted;",
    "info" : "ReturnStatement[298643-298660]:ReturnStatement[298643-298660]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[298902-298908]:Modifier[298902-298908]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[298909-298915]:Modifier[298909-298915]"
  }, {
    "left" : "String[]",
    "right" : "String[]",
    "info" : "ArrayType[298916-298924]:ArrayType[298916-298924]"
  }, {
    "left" : "float num[]",
    "right" : "float num[]",
    "info" : "SingleVariableDeclaration[298928-298939]:SingleVariableDeclaration[298928-298939]"
  }, {
    "left" : "int left",
    "right" : "int left",
    "info" : "SingleVariableDeclaration[298941-298949]:SingleVariableDeclaration[298941-298949]"
  }, {
    "left" : "int right",
    "right" : "int right",
    "info" : "SingleVariableDeclaration[298951-298960]:SingleVariableDeclaration[298951-298960]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[298962-299139]:Block[298962-299139]"
  }, {
    "left" : "String formatted[] = new String[num.length];",
    "right" : "String formatted[] = new String[num.length];",
    "info" : "VariableDeclarationStatement[298968-299012]:VariableDeclarationStatement[298968-299012]"
  }, {
    "left" : "for (int i = 0; i < formatted.length; i++)",
    "right" : "for (int i = 0; i < formatted.length; i++)",
    "info" : "ForStatement[299017-299113]:ForStatement[299017-299113]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[299060-299113]:Block[299060-299113]"
  }, {
    "left" : "formatted[i] = nf(num[i], left, right);",
    "right" : "formatted[i] = nf(num[i], left, right);",
    "info" : "ExpressionStatement[299068-299107]:ExpressionStatement[299068-299107]"
  }, {
    "left" : "return formatted;",
    "right" : "return formatted;",
    "info" : "ReturnStatement[299118-299135]:ReturnStatement[299118-299135]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[299322-299328]:Modifier[299322-299328]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[299329-299335]:Modifier[299329-299335]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[299336-299342]:SimpleType[299336-299342]"
  }, {
    "left" : "float num",
    "right" : "float num",
    "info" : "SingleVariableDeclaration[299346-299355]:SingleVariableDeclaration[299346-299355]"
  }, {
    "left" : "int left",
    "right" : "int left",
    "info" : "SingleVariableDeclaration[299357-299365]:SingleVariableDeclaration[299357-299365]"
  }, {
    "left" : "int right",
    "right" : "int right",
    "info" : "SingleVariableDeclaration[299367-299376]:SingleVariableDeclaration[299367-299376]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[299378-299935]:Block[299378-299935]"
  }, {
    "left" : "if ((float_nf != null) &&\n        (float_nf_left == left) &&\n        (float_nf_right == right) &&\n        !float_nf_commas)",
    "right" : "if ((float_nf != null) &&\n        (float_nf_left == left) &&\n        (float_nf_right == right) &&\n        !float_nf_commas)",
    "info" : "IfStatement[299384-299550]:IfStatement[299384-299550]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[299508-299550]:Block[299508-299550]"
  }, {
    "left" : "return float_nf.format(num);",
    "right" : "return float_nf.format(num);",
    "info" : "ReturnStatement[299516-299544]:ReturnStatement[299516-299544]"
  }, {
    "left" : "float_nf = NumberFormat.getInstance();",
    "right" : "float_nf = NumberFormat.getInstance();",
    "info" : "ExpressionStatement[299556-299594]:ExpressionStatement[299556-299594]"
  }, {
    "left" : "float_nf.setGroupingUsed(false);",
    "right" : "float_nf.setGroupingUsed(false);",
    "info" : "ExpressionStatement[299599-299631]:ExpressionStatement[299599-299631]"
  }, {
    "left" : "float_nf_commas = false;",
    "right" : "float_nf_commas = false;",
    "info" : "ExpressionStatement[299636-299660]:ExpressionStatement[299636-299660]"
  }, {
    "left" : "if (left != 0)",
    "right" : "if (left != 0)",
    "info" : "IfStatement[299666-299720]:IfStatement[299666-299720]"
  }, {
    "left" : "float_nf.setMinimumIntegerDigits(left);",
    "right" : "float_nf.setMinimumIntegerDigits(left);",
    "info" : "ExpressionStatement[299681-299720]:ExpressionStatement[299681-299720]"
  }, {
    "left" : "if (right != 0)",
    "right" : "if (right != 0)",
    "info" : "IfStatement[299725-299844]:IfStatement[299725-299844]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[299741-299844]:Block[299741-299844]"
  }, {
    "left" : "float_nf.setMinimumFractionDigits(right);",
    "right" : "float_nf.setMinimumFractionDigits(right);",
    "info" : "ExpressionStatement[299749-299790]:ExpressionStatement[299749-299790]"
  }, {
    "left" : "float_nf.setMaximumFractionDigits(right);",
    "right" : "float_nf.setMaximumFractionDigits(right);",
    "info" : "ExpressionStatement[299797-299838]:ExpressionStatement[299797-299838]"
  }, {
    "left" : "float_nf_left = left;",
    "right" : "float_nf_left = left;",
    "info" : "ExpressionStatement[299849-299870]:ExpressionStatement[299849-299870]"
  }, {
    "left" : "float_nf_right = right;",
    "right" : "float_nf_right = right;",
    "info" : "ExpressionStatement[299875-299898]:ExpressionStatement[299875-299898]"
  }, {
    "left" : "return float_nf.format(num);",
    "right" : "return float_nf.format(num);",
    "info" : "ReturnStatement[299903-299931]:ReturnStatement[299903-299931]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[300054-300060]:Modifier[300054-300060]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[300061-300067]:Modifier[300061-300067]"
  }, {
    "left" : "String[]",
    "right" : "String[]",
    "info" : "ArrayType[300068-300076]:ArrayType[300068-300076]"
  }, {
    "left" : "float num[]",
    "right" : "float num[]",
    "info" : "SingleVariableDeclaration[300081-300092]:SingleVariableDeclaration[300081-300092]"
  }, {
    "left" : "int right",
    "right" : "int right",
    "info" : "SingleVariableDeclaration[300094-300103]:SingleVariableDeclaration[300094-300103]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[300105-300277]:Block[300105-300277]"
  }, {
    "left" : "String formatted[] = new String[num.length];",
    "right" : "String formatted[] = new String[num.length];",
    "info" : "VariableDeclarationStatement[300111-300155]:VariableDeclarationStatement[300111-300155]"
  }, {
    "left" : "for (int i = 0; i < formatted.length; i++)",
    "right" : "for (int i = 0; i < formatted.length; i++)",
    "info" : "ForStatement[300160-300251]:ForStatement[300160-300251]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[300203-300251]:Block[300203-300251]"
  }, {
    "left" : "formatted[i] = nfc(num[i], right);",
    "right" : "formatted[i] = nfc(num[i], right);",
    "info" : "ExpressionStatement[300211-300245]:ExpressionStatement[300211-300245]"
  }, {
    "left" : "return formatted;",
    "right" : "return formatted;",
    "info" : "ReturnStatement[300256-300273]:ReturnStatement[300256-300273]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[300282-300288]:Modifier[300282-300288]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[300289-300295]:Modifier[300289-300295]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[300296-300302]:SimpleType[300296-300302]"
  }, {
    "left" : "float num",
    "right" : "float num",
    "info" : "SingleVariableDeclaration[300307-300316]:SingleVariableDeclaration[300307-300316]"
  }, {
    "left" : "int right",
    "right" : "int right",
    "info" : "SingleVariableDeclaration[300318-300327]:SingleVariableDeclaration[300318-300327]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[300329-300818]:Block[300329-300818]"
  }, {
    "left" : "if ((float_nf != null) &&\n        (float_nf_left == 0) &&\n        (float_nf_right == right) &&\n        float_nf_commas)",
    "right" : "if ((float_nf != null) &&\n        (float_nf_left == 0) &&\n        (float_nf_right == right) &&\n        float_nf_commas)",
    "info" : "IfStatement[300335-300497]:IfStatement[300335-300497]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[300455-300497]:Block[300455-300497]"
  }, {
    "left" : "return float_nf.format(num);",
    "right" : "return float_nf.format(num);",
    "info" : "ReturnStatement[300463-300491]:ReturnStatement[300463-300491]"
  }, {
    "left" : "float_nf = NumberFormat.getInstance();",
    "right" : "float_nf = NumberFormat.getInstance();",
    "info" : "ExpressionStatement[300503-300541]:ExpressionStatement[300503-300541]"
  }, {
    "left" : "float_nf.setGroupingUsed(true);",
    "right" : "float_nf.setGroupingUsed(true);",
    "info" : "ExpressionStatement[300546-300577]:ExpressionStatement[300546-300577]"
  }, {
    "left" : "float_nf_commas = true;",
    "right" : "float_nf_commas = true;",
    "info" : "ExpressionStatement[300582-300605]:ExpressionStatement[300582-300605]"
  }, {
    "left" : "if (right != 0)",
    "right" : "if (right != 0)",
    "info" : "IfStatement[300611-300730]:IfStatement[300611-300730]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[300627-300730]:Block[300627-300730]"
  }, {
    "left" : "float_nf.setMinimumFractionDigits(right);",
    "right" : "float_nf.setMinimumFractionDigits(right);",
    "info" : "ExpressionStatement[300635-300676]:ExpressionStatement[300635-300676]"
  }, {
    "left" : "float_nf.setMaximumFractionDigits(right);",
    "right" : "float_nf.setMaximumFractionDigits(right);",
    "info" : "ExpressionStatement[300683-300724]:ExpressionStatement[300683-300724]"
  }, {
    "left" : "float_nf_left = 0;",
    "right" : "float_nf_left = 0;",
    "info" : "ExpressionStatement[300735-300753]:ExpressionStatement[300735-300753]"
  }, {
    "left" : "float_nf_right = right;",
    "right" : "float_nf_right = right;",
    "info" : "ExpressionStatement[300758-300781]:ExpressionStatement[300758-300781]"
  }, {
    "left" : "return float_nf.format(num);",
    "right" : "return float_nf.format(num);",
    "info" : "ReturnStatement[300786-300814]:ReturnStatement[300786-300814]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[301016-301022]:Modifier[301016-301022]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[301023-301029]:Modifier[301023-301029]"
  }, {
    "left" : "String[]",
    "right" : "String[]",
    "info" : "ArrayType[301030-301038]:ArrayType[301030-301038]"
  }, {
    "left" : "float num[]",
    "right" : "float num[]",
    "info" : "SingleVariableDeclaration[301043-301054]:SingleVariableDeclaration[301043-301054]"
  }, {
    "left" : "int left",
    "right" : "int left",
    "info" : "SingleVariableDeclaration[301056-301064]:SingleVariableDeclaration[301056-301064]"
  }, {
    "left" : "int right",
    "right" : "int right",
    "info" : "SingleVariableDeclaration[301066-301075]:SingleVariableDeclaration[301066-301075]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[301077-301255]:Block[301077-301255]"
  }, {
    "left" : "String formatted[] = new String[num.length];",
    "right" : "String formatted[] = new String[num.length];",
    "info" : "VariableDeclarationStatement[301083-301127]:VariableDeclarationStatement[301083-301127]"
  }, {
    "left" : "for (int i = 0; i < formatted.length; i++)",
    "right" : "for (int i = 0; i < formatted.length; i++)",
    "info" : "ForStatement[301132-301229]:ForStatement[301132-301229]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[301175-301229]:Block[301175-301229]"
  }, {
    "left" : "formatted[i] = nfs(num[i], left, right);",
    "right" : "formatted[i] = nfs(num[i], left, right);",
    "info" : "ExpressionStatement[301183-301223]:ExpressionStatement[301183-301223]"
  }, {
    "left" : "return formatted;",
    "right" : "return formatted;",
    "info" : "ReturnStatement[301234-301251]:ReturnStatement[301234-301251]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[301259-301265]:Modifier[301259-301265]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[301266-301272]:Modifier[301266-301272]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[301273-301279]:SimpleType[301273-301279]"
  }, {
    "left" : "float num",
    "right" : "float num",
    "info" : "SingleVariableDeclaration[301284-301293]:SingleVariableDeclaration[301284-301293]"
  }, {
    "left" : "int left",
    "right" : "int left",
    "info" : "SingleVariableDeclaration[301295-301303]:SingleVariableDeclaration[301295-301303]"
  }, {
    "left" : "int right",
    "right" : "int right",
    "info" : "SingleVariableDeclaration[301305-301314]:SingleVariableDeclaration[301305-301314]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[301316-301398]:Block[301316-301398]"
  }, {
    "left" : "return (num < 0) ? nf(num, left, right) :  (' ' + nf(num, left, right));",
    "right" : "return (num < 0) ? nf(num, left, right) :  (' ' + nf(num, left, right));",
    "info" : "ReturnStatement[301322-301394]:ReturnStatement[301322-301394]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[301554-301560]:Modifier[301554-301560]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[301561-301567]:Modifier[301561-301567]"
  }, {
    "left" : "String[]",
    "right" : "String[]",
    "info" : "ArrayType[301568-301576]:ArrayType[301568-301576]"
  }, {
    "left" : "float num[]",
    "right" : "float num[]",
    "info" : "SingleVariableDeclaration[301581-301592]:SingleVariableDeclaration[301581-301592]"
  }, {
    "left" : "int left",
    "right" : "int left",
    "info" : "SingleVariableDeclaration[301594-301602]:SingleVariableDeclaration[301594-301602]"
  }, {
    "left" : "int right",
    "right" : "int right",
    "info" : "SingleVariableDeclaration[301604-301613]:SingleVariableDeclaration[301604-301613]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[301615-301793]:Block[301615-301793]"
  }, {
    "left" : "String formatted[] = new String[num.length];",
    "right" : "String formatted[] = new String[num.length];",
    "info" : "VariableDeclarationStatement[301621-301665]:VariableDeclarationStatement[301621-301665]"
  }, {
    "left" : "for (int i = 0; i < formatted.length; i++)",
    "right" : "for (int i = 0; i < formatted.length; i++)",
    "info" : "ForStatement[301670-301767]:ForStatement[301670-301767]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[301713-301767]:Block[301713-301767]"
  }, {
    "left" : "formatted[i] = nfp(num[i], left, right);",
    "right" : "formatted[i] = nfp(num[i], left, right);",
    "info" : "ExpressionStatement[301721-301761]:ExpressionStatement[301721-301761]"
  }, {
    "left" : "return formatted;",
    "right" : "return formatted;",
    "info" : "ReturnStatement[301772-301789]:ReturnStatement[301772-301789]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[301797-301803]:Modifier[301797-301803]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[301804-301810]:Modifier[301804-301810]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[301811-301817]:SimpleType[301811-301817]"
  }, {
    "left" : "float num",
    "right" : "float num",
    "info" : "SingleVariableDeclaration[301822-301831]:SingleVariableDeclaration[301822-301831]"
  }, {
    "left" : "int left",
    "right" : "int left",
    "info" : "SingleVariableDeclaration[301833-301841]:SingleVariableDeclaration[301833-301841]"
  }, {
    "left" : "int right",
    "right" : "int right",
    "info" : "SingleVariableDeclaration[301843-301852]:SingleVariableDeclaration[301843-301852]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[301854-301936]:Block[301854-301936]"
  }, {
    "left" : "return (num < 0) ? nf(num, left, right) :  ('+' + nf(num, left, right));",
    "right" : "return (num < 0) ? nf(num, left, right) :  ('+' + nf(num, left, right));",
    "info" : "ReturnStatement[301860-301932]:ReturnStatement[301860-301932]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[302769-302775]:Modifier[302769-302775]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[302776-302781]:Modifier[302776-302781]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[302782-302788]:Modifier[302782-302788]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[302789-302795]:SimpleType[302789-302795]"
  }, {
    "left" : "byte value",
    "right" : "byte value",
    "info" : "SingleVariableDeclaration[302800-302810]:SingleVariableDeclaration[302800-302810]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[302812-302843]:Block[302812-302843]"
  }, {
    "left" : "return hex(value, 2);",
    "right" : "return hex(value, 2);",
    "info" : "ReturnStatement[302818-302839]:ReturnStatement[302818-302839]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[302847-302853]:Modifier[302847-302853]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[302854-302859]:Modifier[302854-302859]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[302860-302866]:Modifier[302860-302866]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[302867-302873]:SimpleType[302867-302873]"
  }, {
    "left" : "char value",
    "right" : "char value",
    "info" : "SingleVariableDeclaration[302878-302888]:SingleVariableDeclaration[302878-302888]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[302890-302921]:Block[302890-302921]"
  }, {
    "left" : "return hex(value, 4);",
    "right" : "return hex(value, 4);",
    "info" : "ReturnStatement[302896-302917]:ReturnStatement[302896-302917]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[302925-302931]:Modifier[302925-302931]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[302932-302937]:Modifier[302932-302937]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[302938-302944]:Modifier[302938-302944]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[302945-302951]:SimpleType[302945-302951]"
  }, {
    "left" : "int value",
    "right" : "int value",
    "info" : "SingleVariableDeclaration[302956-302965]:SingleVariableDeclaration[302956-302965]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[302967-302998]:Block[302967-302998]"
  }, {
    "left" : "return hex(value, 8);",
    "right" : "return hex(value, 8);",
    "info" : "ReturnStatement[302973-302994]:ReturnStatement[302973-302994]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[303059-303065]:Modifier[303059-303065]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[303066-303071]:Modifier[303066-303071]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[303072-303078]:Modifier[303072-303078]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[303079-303085]:SimpleType[303079-303085]"
  }, {
    "left" : "int value",
    "right" : "int value",
    "info" : "SingleVariableDeclaration[303090-303099]:SingleVariableDeclaration[303090-303099]"
  }, {
    "left" : "int digits",
    "right" : "int digits",
    "info" : "SingleVariableDeclaration[303101-303111]:SingleVariableDeclaration[303101-303111]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[303113-303456]:Block[303113-303456]"
  }, {
    "left" : "String stuff = Integer.toHexString(value).toUpperCase();",
    "right" : "String stuff = Integer.toHexString(value).toUpperCase();",
    "info" : "VariableDeclarationStatement[303119-303175]:VariableDeclarationStatement[303119-303175]"
  }, {
    "left" : "if (digits > 8)",
    "right" : "if (digits > 8)",
    "info" : "IfStatement[303180-303221]:IfStatement[303180-303221]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[303196-303221]:Block[303196-303221]"
  }, {
    "left" : "digits = 8;",
    "right" : "digits = 8;",
    "info" : "ExpressionStatement[303204-303215]:ExpressionStatement[303204-303215]"
  }, {
    "left" : "int length = stuff.length();",
    "right" : "int length = stuff.length();",
    "info" : "VariableDeclarationStatement[303227-303255]:VariableDeclarationStatement[303227-303255]"
  }, {
    "left" : "if (length > digits)",
    "right" : "if (length > digits)",
    "info" : "IfStatement[303260-303434]:IfStatement[303260-303434]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[303281-303336]:Block[303281-303336]"
  }, {
    "left" : "return stuff.substring(length - digits);",
    "right" : "return stuff.substring(length - digits);",
    "info" : "ReturnStatement[303289-303329]:ReturnStatement[303289-303329]"
  }, {
    "left" : "if (length < digits)",
    "right" : "if (length < digits)",
    "info" : "IfStatement[303342-303434]:IfStatement[303342-303434]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[303363-303434]:Block[303363-303434]"
  }, {
    "left" : "return \"00000000\".substring(8 - (digits-length)) + stuff;",
    "right" : "return \"00000000\".substring(8 - (digits-length)) + stuff;",
    "info" : "ReturnStatement[303371-303428]:ReturnStatement[303371-303428]"
  }, {
    "left" : "return stuff;",
    "right" : "return stuff;",
    "info" : "ReturnStatement[303439-303452]:ReturnStatement[303439-303452]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[303836-303842]:Modifier[303836-303842]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[303843-303848]:Modifier[303843-303848]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[303849-303855]:Modifier[303849-303855]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[303856-303859]:PrimitiveType[303856-303859]"
  }, {
    "left" : "String value",
    "right" : "String value",
    "info" : "SingleVariableDeclaration[303866-303878]:SingleVariableDeclaration[303866-303878]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[303880-304009]:Block[303880-304009]"
  }, {
    "left" : "return (int) (Long.parseLong(value, 16));",
    "right" : "return (int) (Long.parseLong(value, 16));",
    "info" : "ReturnStatement[303964-304005]:ReturnStatement[303964-304005]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[304146-304152]:Modifier[304146-304152]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[304153-304158]:Modifier[304153-304158]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[304159-304165]:Modifier[304159-304165]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[304166-304172]:SimpleType[304166-304172]"
  }, {
    "left" : "byte value",
    "right" : "byte value",
    "info" : "SingleVariableDeclaration[304180-304190]:SingleVariableDeclaration[304180-304190]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[304192-304226]:Block[304192-304226]"
  }, {
    "left" : "return binary(value, 8);",
    "right" : "return binary(value, 8);",
    "info" : "ReturnStatement[304198-304222]:ReturnStatement[304198-304222]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[304396-304402]:Modifier[304396-304402]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[304403-304408]:Modifier[304403-304408]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[304409-304415]:Modifier[304409-304415]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[304416-304422]:SimpleType[304416-304422]"
  }, {
    "left" : "char value",
    "right" : "char value",
    "info" : "SingleVariableDeclaration[304430-304440]:SingleVariableDeclaration[304430-304440]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[304442-304477]:Block[304442-304477]"
  }, {
    "left" : "return binary(value, 16);",
    "right" : "return binary(value, 16);",
    "info" : "ReturnStatement[304448-304473]:ReturnStatement[304448-304473]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[304714-304720]:Modifier[304714-304720]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[304721-304726]:Modifier[304721-304726]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[304727-304733]:Modifier[304727-304733]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[304734-304740]:SimpleType[304734-304740]"
  }, {
    "left" : "int value",
    "right" : "int value",
    "info" : "SingleVariableDeclaration[304748-304757]:SingleVariableDeclaration[304748-304757]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[304759-304794]:Block[304759-304794]"
  }, {
    "left" : "return binary(value, 32);",
    "right" : "return binary(value, 32);",
    "info" : "ReturnStatement[304765-304790]:ReturnStatement[304765-304790]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[305729-305735]:Modifier[305729-305735]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[305736-305741]:Modifier[305736-305741]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[305742-305748]:Modifier[305742-305748]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[305749-305755]:SimpleType[305749-305755]"
  }, {
    "left" : "int value",
    "right" : "int value",
    "info" : "SingleVariableDeclaration[305763-305772]:SingleVariableDeclaration[305763-305772]"
  }, {
    "left" : "int digits",
    "right" : "int digits",
    "info" : "SingleVariableDeclaration[305774-305784]:SingleVariableDeclaration[305774-305784]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[305786-306172]:Block[305786-306172]"
  }, {
    "left" : "String stuff = Integer.toBinaryString(value);",
    "right" : "String stuff = Integer.toBinaryString(value);",
    "info" : "VariableDeclarationStatement[305792-305837]:VariableDeclarationStatement[305792-305837]"
  }, {
    "left" : "if (digits > 32)",
    "right" : "if (digits > 32)",
    "info" : "IfStatement[305842-305885]:IfStatement[305842-305885]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[305859-305885]:Block[305859-305885]"
  }, {
    "left" : "digits = 32;",
    "right" : "digits = 32;",
    "info" : "ExpressionStatement[305867-305879]:ExpressionStatement[305867-305879]"
  }, {
    "left" : "int length = stuff.length();",
    "right" : "int length = stuff.length();",
    "info" : "VariableDeclarationStatement[305891-305919]:VariableDeclarationStatement[305891-305919]"
  }, {
    "left" : "if (length > digits)",
    "right" : "if (length > digits)",
    "info" : "IfStatement[305924-306150]:IfStatement[305924-306150]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[305945-306000]:Block[305945-306000]"
  }, {
    "left" : "return stuff.substring(length - digits);",
    "right" : "return stuff.substring(length - digits);",
    "info" : "ReturnStatement[305953-305993]:ReturnStatement[305953-305993]"
  }, {
    "left" : "if (length < digits)",
    "right" : "if (length < digits)",
    "info" : "IfStatement[306006-306150]:IfStatement[306006-306150]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[306027-306150]:Block[306027-306150]"
  }, {
    "left" : "int offset = 32 - (digits-length);",
    "right" : "int offset = 32 - (digits-length);",
    "info" : "VariableDeclarationStatement[306035-306069]:VariableDeclarationStatement[306035-306069]"
  }, {
    "left" : "return \"00000000000000000000000000000000\".substring(offset) + stuff;",
    "right" : "return \"00000000000000000000000000000000\".substring(offset) + stuff;",
    "info" : "ReturnStatement[306076-306144]:ReturnStatement[306076-306144]"
  }, {
    "left" : "return stuff;",
    "right" : "return stuff;",
    "info" : "ReturnStatement[306155-306168]:ReturnStatement[306155-306168]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[306591-306597]:Modifier[306591-306597]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[306598-306603]:Modifier[306598-306603]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[306604-306610]:Modifier[306604-306610]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[306611-306614]:PrimitiveType[306611-306614]"
  }, {
    "left" : "String value",
    "right" : "String value",
    "info" : "SingleVariableDeclaration[306624-306636]:SingleVariableDeclaration[306624-306636]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[306638-306682]:Block[306638-306682]"
  }, {
    "left" : "return Integer.parseInt(value, 2);",
    "right" : "return Integer.parseInt(value, 2);",
    "info" : "ReturnStatement[306644-306678]:ReturnStatement[306644-306678]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[307572-307578]:Modifier[307572-307578]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[307579-307584]:Modifier[307579-307584]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[307585-307588]:PrimitiveType[307585-307588]"
  }, {
    "left" : "int gray",
    "right" : "int gray",
    "info" : "SingleVariableDeclaration[307595-307603]:SingleVariableDeclaration[307595-307603]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[307605-307787]:Block[307605-307787]"
  }, {
    "left" : "if (g == null)",
    "right" : "if (g == null)",
    "info" : "IfStatement[307611-307757]:IfStatement[307611-307757]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[307626-307757]:Block[307626-307757]"
  }, {
    "left" : "if (gray > 255)",
    "right" : "if (gray > 255)",
    "info" : "IfStatement[307634-307690]:IfStatement[307634-307690]"
  }, {
    "left" : "gray = 255;",
    "right" : "gray = 255;",
    "info" : "ExpressionStatement[307650-307661]:ExpressionStatement[307650-307661]"
  }, {
    "left" : "if (gray < 0)",
    "right" : "if (gray < 0)",
    "info" : "IfStatement[307667-307690]:IfStatement[307667-307690]"
  }, {
    "left" : "gray = 0;",
    "right" : "gray = 0;",
    "info" : "ExpressionStatement[307681-307690]:ExpressionStatement[307681-307690]"
  }, {
    "left" : "return 0xff000000 | (gray << 16) | (gray << 8) | gray;",
    "right" : "return 0xff000000 | (gray << 16) | (gray << 8) | gray;",
    "info" : "ReturnStatement[307697-307751]:ReturnStatement[307697-307751]"
  }, {
    "left" : "return g.color(gray);",
    "right" : "return g.color(gray);",
    "info" : "ReturnStatement[307762-307783]:ReturnStatement[307762-307783]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[307885-307891]:Modifier[307885-307891]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[307892-307897]:Modifier[307892-307897]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[307898-307901]:PrimitiveType[307898-307901]"
  }, {
    "left" : "float fgray",
    "right" : "float fgray",
    "info" : "SingleVariableDeclaration[307908-307919]:SingleVariableDeclaration[307908-307919]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[307921-308134]:Block[307921-308134]"
  }, {
    "left" : "if (g == null)",
    "right" : "if (g == null)",
    "info" : "IfStatement[307927-308103]:IfStatement[307927-308103]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[307942-308103]:Block[307942-308103]"
  }, {
    "left" : "int gray = (int) fgray;",
    "right" : "int gray = (int) fgray;",
    "info" : "VariableDeclarationStatement[307950-307973]:VariableDeclarationStatement[307950-307973]"
  }, {
    "left" : "if (gray > 255)",
    "right" : "if (gray > 255)",
    "info" : "IfStatement[307980-308036]:IfStatement[307980-308036]"
  }, {
    "left" : "gray = 255;",
    "right" : "gray = 255;",
    "info" : "ExpressionStatement[307996-308007]:ExpressionStatement[307996-308007]"
  }, {
    "left" : "if (gray < 0)",
    "right" : "if (gray < 0)",
    "info" : "IfStatement[308013-308036]:IfStatement[308013-308036]"
  }, {
    "left" : "gray = 0;",
    "right" : "gray = 0;",
    "info" : "ExpressionStatement[308027-308036]:ExpressionStatement[308027-308036]"
  }, {
    "left" : "return 0xff000000 | (gray << 16) | (gray << 8) | gray;",
    "right" : "return 0xff000000 | (gray << 16) | (gray << 8) | gray;",
    "info" : "ReturnStatement[308043-308097]:ReturnStatement[308043-308097]"
  }, {
    "left" : "return g.color(fgray);",
    "right" : "return g.color(fgray);",
    "info" : "ReturnStatement[308108-308130]:ReturnStatement[308108-308130]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[308255-308261]:Modifier[308255-308261]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[308262-308267]:Modifier[308262-308267]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[308268-308271]:PrimitiveType[308268-308271]"
  }, {
    "left" : "int gray",
    "right" : "int gray",
    "info" : "SingleVariableDeclaration[308278-308286]:SingleVariableDeclaration[308278-308286]"
  }, {
    "left" : "int alpha",
    "right" : "int alpha",
    "info" : "SingleVariableDeclaration[308288-308297]:SingleVariableDeclaration[308288-308297]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[308299-308711]:Block[308299-308711]"
  }, {
    "left" : "if (g == null)",
    "right" : "if (g == null)",
    "info" : "IfStatement[308305-308674]:IfStatement[308305-308674]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[308320-308674]:Block[308320-308674]"
  }, {
    "left" : "if (alpha > 255)",
    "right" : "if (alpha > 255)",
    "info" : "IfStatement[308328-308388]:IfStatement[308328-308388]"
  }, {
    "left" : "alpha = 255;",
    "right" : "alpha = 255;",
    "info" : "ExpressionStatement[308345-308357]:ExpressionStatement[308345-308357]"
  }, {
    "left" : "if (alpha < 0)",
    "right" : "if (alpha < 0)",
    "info" : "IfStatement[308363-308388]:IfStatement[308363-308388]"
  }, {
    "left" : "alpha = 0;",
    "right" : "alpha = 0;",
    "info" : "ExpressionStatement[308378-308388]:ExpressionStatement[308378-308388]"
  }, {
    "left" : "if (gray > 255)",
    "right" : "if (gray > 255)",
    "info" : "IfStatement[308395-308668]:IfStatement[308395-308668]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[308411-308520]:Block[308411-308520]"
  }, {
    "left" : "return (alpha << 24) | (gray & 0xFFFFFF);",
    "right" : "return (alpha << 24) | (gray & 0xFFFFFF);",
    "info" : "ReturnStatement[308471-308512]:ReturnStatement[308471-308512]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[308526-308668]:Block[308526-308668]"
  }, {
    "left" : "return (alpha << 24) | (gray << 16) | (gray << 8) | gray;",
    "right" : "return (alpha << 24) | (gray << 16) | (gray << 8) | gray;",
    "info" : "ReturnStatement[308603-308660]:ReturnStatement[308603-308660]"
  }, {
    "left" : "return g.color(gray, alpha);",
    "right" : "return g.color(gray, alpha);",
    "info" : "ReturnStatement[308679-308707]:ReturnStatement[308679-308707]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[308743-308749]:Modifier[308743-308749]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[308750-308755]:Modifier[308750-308755]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[308756-308759]:PrimitiveType[308756-308759]"
  }, {
    "left" : "float fgray",
    "right" : "float fgray",
    "info" : "SingleVariableDeclaration[308766-308777]:SingleVariableDeclaration[308766-308777]"
  }, {
    "left" : "float falpha",
    "right" : "float falpha",
    "info" : "SingleVariableDeclaration[308779-308791]:SingleVariableDeclaration[308779-308791]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[308793-309116]:Block[308793-309116]"
  }, {
    "left" : "if (g == null)",
    "right" : "if (g == null)",
    "info" : "IfStatement[308799-309077]:IfStatement[308799-309077]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[308814-309077]:Block[308814-309077]"
  }, {
    "left" : "int gray = (int) fgray;",
    "right" : "int gray = (int) fgray;",
    "info" : "VariableDeclarationStatement[308822-308845]:VariableDeclarationStatement[308822-308845]"
  }, {
    "left" : "int alpha = (int) falpha;",
    "right" : "int alpha = (int) falpha;",
    "info" : "VariableDeclarationStatement[308852-308877]:VariableDeclarationStatement[308852-308877]"
  }, {
    "left" : "if (gray > 255)",
    "right" : "if (gray > 255)",
    "info" : "IfStatement[308884-308940]:IfStatement[308884-308940]"
  }, {
    "left" : "gray = 255;",
    "right" : "gray = 255;",
    "info" : "ExpressionStatement[308900-308911]:ExpressionStatement[308900-308911]"
  }, {
    "left" : "if (gray < 0)",
    "right" : "if (gray < 0)",
    "info" : "IfStatement[308917-308940]:IfStatement[308917-308940]"
  }, {
    "left" : "gray = 0;",
    "right" : "gray = 0;",
    "info" : "ExpressionStatement[308931-308940]:ExpressionStatement[308931-308940]"
  }, {
    "left" : "if (alpha > 255)",
    "right" : "if (alpha > 255)",
    "info" : "IfStatement[308947-309007]:IfStatement[308947-309007]"
  }, {
    "left" : "alpha = 255;",
    "right" : "alpha = 255;",
    "info" : "ExpressionStatement[308964-308976]:ExpressionStatement[308964-308976]"
  }, {
    "left" : "if (alpha < 0)",
    "right" : "if (alpha < 0)",
    "info" : "IfStatement[308982-309007]:IfStatement[308982-309007]"
  }, {
    "left" : "alpha = 0;",
    "right" : "alpha = 0;",
    "info" : "ExpressionStatement[308997-309007]:ExpressionStatement[308997-309007]"
  }, {
    "left" : "return (alpha << 24) | (gray << 16) | (gray << 8) | gray;",
    "right" : "return (alpha << 24) | (gray << 16) | (gray << 8) | gray;",
    "info" : "ReturnStatement[309014-309071]:ReturnStatement[309014-309071]"
  }, {
    "left" : "return g.color(fgray, falpha);",
    "right" : "return g.color(fgray, falpha);",
    "info" : "ReturnStatement[309082-309112]:ReturnStatement[309082-309112]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[309357-309363]:Modifier[309357-309363]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[309364-309369]:Modifier[309364-309369]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[309370-309373]:PrimitiveType[309370-309373]"
  }, {
    "left" : "int v1",
    "right" : "int v1",
    "info" : "SingleVariableDeclaration[309380-309386]:SingleVariableDeclaration[309380-309386]"
  }, {
    "left" : "int v2",
    "right" : "int v2",
    "info" : "SingleVariableDeclaration[309388-309394]:SingleVariableDeclaration[309388-309394]"
  }, {
    "left" : "int v3",
    "right" : "int v3",
    "info" : "SingleVariableDeclaration[309396-309402]:SingleVariableDeclaration[309396-309402]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[309404-309689]:Block[309404-309689]"
  }, {
    "left" : "if (g == null)",
    "right" : "if (g == null)",
    "info" : "IfStatement[309410-309653]:IfStatement[309410-309653]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[309425-309653]:Block[309425-309653]"
  }, {
    "left" : "if (v1 > 255)",
    "right" : "if (v1 > 255)",
    "info" : "IfStatement[309433-309481]:IfStatement[309433-309481]"
  }, {
    "left" : "v1 = 255;",
    "right" : "v1 = 255;",
    "info" : "ExpressionStatement[309447-309456]:ExpressionStatement[309447-309456]"
  }, {
    "left" : "if (v1 < 0)",
    "right" : "if (v1 < 0)",
    "info" : "IfStatement[309462-309481]:IfStatement[309462-309481]"
  }, {
    "left" : "v1 = 0;",
    "right" : "v1 = 0;",
    "info" : "ExpressionStatement[309474-309481]:ExpressionStatement[309474-309481]"
  }, {
    "left" : "if (v2 > 255)",
    "right" : "if (v2 > 255)",
    "info" : "IfStatement[309488-309536]:IfStatement[309488-309536]"
  }, {
    "left" : "v2 = 255;",
    "right" : "v2 = 255;",
    "info" : "ExpressionStatement[309502-309511]:ExpressionStatement[309502-309511]"
  }, {
    "left" : "if (v2 < 0)",
    "right" : "if (v2 < 0)",
    "info" : "IfStatement[309517-309536]:IfStatement[309517-309536]"
  }, {
    "left" : "v2 = 0;",
    "right" : "v2 = 0;",
    "info" : "ExpressionStatement[309529-309536]:ExpressionStatement[309529-309536]"
  }, {
    "left" : "if (v3 > 255)",
    "right" : "if (v3 > 255)",
    "info" : "IfStatement[309543-309591]:IfStatement[309543-309591]"
  }, {
    "left" : "v3 = 255;",
    "right" : "v3 = 255;",
    "info" : "ExpressionStatement[309557-309566]:ExpressionStatement[309557-309566]"
  }, {
    "left" : "if (v3 < 0)",
    "right" : "if (v3 < 0)",
    "info" : "IfStatement[309572-309591]:IfStatement[309572-309591]"
  }, {
    "left" : "v3 = 0;",
    "right" : "v3 = 0;",
    "info" : "ExpressionStatement[309584-309591]:ExpressionStatement[309584-309591]"
  }, {
    "left" : "return 0xff000000 | (v1 << 16) | (v2 << 8) | v3;",
    "right" : "return 0xff000000 | (v1 << 16) | (v2 << 8) | v3;",
    "info" : "ReturnStatement[309599-309647]:ReturnStatement[309599-309647]"
  }, {
    "left" : "return g.color(v1, v2, v3);",
    "right" : "return g.color(v1, v2, v3);",
    "info" : "ReturnStatement[309658-309685]:ReturnStatement[309658-309685]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[309694-309700]:Modifier[309694-309700]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[309701-309706]:Modifier[309701-309706]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[309707-309710]:PrimitiveType[309707-309710]"
  }, {
    "left" : "int v1",
    "right" : "int v1",
    "info" : "SingleVariableDeclaration[309717-309723]:SingleVariableDeclaration[309717-309723]"
  }, {
    "left" : "int v2",
    "right" : "int v2",
    "info" : "SingleVariableDeclaration[309725-309731]:SingleVariableDeclaration[309725-309731]"
  }, {
    "left" : "int v3",
    "right" : "int v3",
    "info" : "SingleVariableDeclaration[309733-309739]:SingleVariableDeclaration[309733-309739]"
  }, {
    "left" : "int alpha",
    "right" : "int alpha",
    "info" : "SingleVariableDeclaration[309741-309750]:SingleVariableDeclaration[309741-309750]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[309752-310114]:Block[309752-310114]"
  }, {
    "left" : "if (g == null)",
    "right" : "if (g == null)",
    "info" : "IfStatement[309758-310071]:IfStatement[309758-310071]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[309773-310071]:Block[309773-310071]"
  }, {
    "left" : "if (alpha > 255)",
    "right" : "if (alpha > 255)",
    "info" : "IfStatement[309781-309841]:IfStatement[309781-309841]"
  }, {
    "left" : "alpha = 255;",
    "right" : "alpha = 255;",
    "info" : "ExpressionStatement[309798-309810]:ExpressionStatement[309798-309810]"
  }, {
    "left" : "if (alpha < 0)",
    "right" : "if (alpha < 0)",
    "info" : "IfStatement[309816-309841]:IfStatement[309816-309841]"
  }, {
    "left" : "alpha = 0;",
    "right" : "alpha = 0;",
    "info" : "ExpressionStatement[309831-309841]:ExpressionStatement[309831-309841]"
  }, {
    "left" : "if (v1 > 255)",
    "right" : "if (v1 > 255)",
    "info" : "IfStatement[309848-309896]:IfStatement[309848-309896]"
  }, {
    "left" : "v1 = 255;",
    "right" : "v1 = 255;",
    "info" : "ExpressionStatement[309862-309871]:ExpressionStatement[309862-309871]"
  }, {
    "left" : "if (v1 < 0)",
    "right" : "if (v1 < 0)",
    "info" : "IfStatement[309877-309896]:IfStatement[309877-309896]"
  }, {
    "left" : "v1 = 0;",
    "right" : "v1 = 0;",
    "info" : "ExpressionStatement[309889-309896]:ExpressionStatement[309889-309896]"
  }, {
    "left" : "if (v2 > 255)",
    "right" : "if (v2 > 255)",
    "info" : "IfStatement[309903-309951]:IfStatement[309903-309951]"
  }, {
    "left" : "v2 = 255;",
    "right" : "v2 = 255;",
    "info" : "ExpressionStatement[309917-309926]:ExpressionStatement[309917-309926]"
  }, {
    "left" : "if (v2 < 0)",
    "right" : "if (v2 < 0)",
    "info" : "IfStatement[309932-309951]:IfStatement[309932-309951]"
  }, {
    "left" : "v2 = 0;",
    "right" : "v2 = 0;",
    "info" : "ExpressionStatement[309944-309951]:ExpressionStatement[309944-309951]"
  }, {
    "left" : "if (v3 > 255)",
    "right" : "if (v3 > 255)",
    "info" : "IfStatement[309958-310006]:IfStatement[309958-310006]"
  }, {
    "left" : "v3 = 255;",
    "right" : "v3 = 255;",
    "info" : "ExpressionStatement[309972-309981]:ExpressionStatement[309972-309981]"
  }, {
    "left" : "if (v3 < 0)",
    "right" : "if (v3 < 0)",
    "info" : "IfStatement[309987-310006]:IfStatement[309987-310006]"
  }, {
    "left" : "v3 = 0;",
    "right" : "v3 = 0;",
    "info" : "ExpressionStatement[309999-310006]:ExpressionStatement[309999-310006]"
  }, {
    "left" : "return (alpha << 24) | (v1 << 16) | (v2 << 8) | v3;",
    "right" : "return (alpha << 24) | (v1 << 16) | (v2 << 8) | v3;",
    "info" : "ReturnStatement[310014-310065]:ReturnStatement[310014-310065]"
  }, {
    "left" : "return g.color(v1, v2, v3, alpha);",
    "right" : "return g.color(v1, v2, v3, alpha);",
    "info" : "ReturnStatement[310076-310110]:ReturnStatement[310076-310110]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[310119-310125]:Modifier[310119-310125]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[310126-310131]:Modifier[310126-310131]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[310132-310135]:PrimitiveType[310132-310135]"
  }, {
    "left" : "float v1",
    "right" : "float v1",
    "info" : "SingleVariableDeclaration[310142-310150]:SingleVariableDeclaration[310142-310150]"
  }, {
    "left" : "float v2",
    "right" : "float v2",
    "info" : "SingleVariableDeclaration[310152-310160]:SingleVariableDeclaration[310152-310160]"
  }, {
    "left" : "float v3",
    "right" : "float v3",
    "info" : "SingleVariableDeclaration[310162-310170]:SingleVariableDeclaration[310162-310170]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[310172-310472]:Block[310172-310472]"
  }, {
    "left" : "if (g == null)",
    "right" : "if (g == null)",
    "info" : "IfStatement[310178-310436]:IfStatement[310178-310436]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[310193-310436]:Block[310193-310436]"
  }, {
    "left" : "if (v1 > 255)",
    "right" : "if (v1 > 255)",
    "info" : "IfStatement[310201-310249]:IfStatement[310201-310249]"
  }, {
    "left" : "v1 = 255;",
    "right" : "v1 = 255;",
    "info" : "ExpressionStatement[310215-310224]:ExpressionStatement[310215-310224]"
  }, {
    "left" : "if (v1 < 0)",
    "right" : "if (v1 < 0)",
    "info" : "IfStatement[310230-310249]:IfStatement[310230-310249]"
  }, {
    "left" : "v1 = 0;",
    "right" : "v1 = 0;",
    "info" : "ExpressionStatement[310242-310249]:ExpressionStatement[310242-310249]"
  }, {
    "left" : "if (v2 > 255)",
    "right" : "if (v2 > 255)",
    "info" : "IfStatement[310256-310304]:IfStatement[310256-310304]"
  }, {
    "left" : "v2 = 255;",
    "right" : "v2 = 255;",
    "info" : "ExpressionStatement[310270-310279]:ExpressionStatement[310270-310279]"
  }, {
    "left" : "if (v2 < 0)",
    "right" : "if (v2 < 0)",
    "info" : "IfStatement[310285-310304]:IfStatement[310285-310304]"
  }, {
    "left" : "v2 = 0;",
    "right" : "v2 = 0;",
    "info" : "ExpressionStatement[310297-310304]:ExpressionStatement[310297-310304]"
  }, {
    "left" : "if (v3 > 255)",
    "right" : "if (v3 > 255)",
    "info" : "IfStatement[310311-310359]:IfStatement[310311-310359]"
  }, {
    "left" : "v3 = 255;",
    "right" : "v3 = 255;",
    "info" : "ExpressionStatement[310325-310334]:ExpressionStatement[310325-310334]"
  }, {
    "left" : "if (v3 < 0)",
    "right" : "if (v3 < 0)",
    "info" : "IfStatement[310340-310359]:IfStatement[310340-310359]"
  }, {
    "left" : "v3 = 0;",
    "right" : "v3 = 0;",
    "info" : "ExpressionStatement[310352-310359]:ExpressionStatement[310352-310359]"
  }, {
    "left" : "return 0xff000000 | ((int)v1 << 16) | ((int)v2 << 8) | (int)v3;",
    "right" : "return 0xff000000 | ((int)v1 << 16) | ((int)v2 << 8) | (int)v3;",
    "info" : "ReturnStatement[310367-310430]:ReturnStatement[310367-310430]"
  }, {
    "left" : "return g.color(v1, v2, v3);",
    "right" : "return g.color(v1, v2, v3);",
    "info" : "ReturnStatement[310441-310468]:ReturnStatement[310441-310468]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[310477-310483]:Modifier[310477-310483]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[310484-310489]:Modifier[310484-310489]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[310490-310493]:PrimitiveType[310490-310493]"
  }, {
    "left" : "float v1",
    "right" : "float v1",
    "info" : "SingleVariableDeclaration[310500-310508]:SingleVariableDeclaration[310500-310508]"
  }, {
    "left" : "float v2",
    "right" : "float v2",
    "info" : "SingleVariableDeclaration[310510-310518]:SingleVariableDeclaration[310510-310518]"
  }, {
    "left" : "float v3",
    "right" : "float v3",
    "info" : "SingleVariableDeclaration[310520-310528]:SingleVariableDeclaration[310520-310528]"
  }, {
    "left" : "float alpha",
    "right" : "float alpha",
    "info" : "SingleVariableDeclaration[310530-310541]:SingleVariableDeclaration[310530-310541]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[310543-310925]:Block[310543-310925]"
  }, {
    "left" : "if (g == null)",
    "right" : "if (g == null)",
    "info" : "IfStatement[310549-310882]:IfStatement[310549-310882]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[310564-310882]:Block[310564-310882]"
  }, {
    "left" : "if (alpha > 255)",
    "right" : "if (alpha > 255)",
    "info" : "IfStatement[310572-310632]:IfStatement[310572-310632]"
  }, {
    "left" : "alpha = 255;",
    "right" : "alpha = 255;",
    "info" : "ExpressionStatement[310589-310601]:ExpressionStatement[310589-310601]"
  }, {
    "left" : "if (alpha < 0)",
    "right" : "if (alpha < 0)",
    "info" : "IfStatement[310607-310632]:IfStatement[310607-310632]"
  }, {
    "left" : "alpha = 0;",
    "right" : "alpha = 0;",
    "info" : "ExpressionStatement[310622-310632]:ExpressionStatement[310622-310632]"
  }, {
    "left" : "if (v1 > 255)",
    "right" : "if (v1 > 255)",
    "info" : "IfStatement[310639-310687]:IfStatement[310639-310687]"
  }, {
    "left" : "v1 = 255;",
    "right" : "v1 = 255;",
    "info" : "ExpressionStatement[310653-310662]:ExpressionStatement[310653-310662]"
  }, {
    "left" : "if (v1 < 0)",
    "right" : "if (v1 < 0)",
    "info" : "IfStatement[310668-310687]:IfStatement[310668-310687]"
  }, {
    "left" : "v1 = 0;",
    "right" : "v1 = 0;",
    "info" : "ExpressionStatement[310680-310687]:ExpressionStatement[310680-310687]"
  }, {
    "left" : "if (v2 > 255)",
    "right" : "if (v2 > 255)",
    "info" : "IfStatement[310694-310742]:IfStatement[310694-310742]"
  }, {
    "left" : "v2 = 255;",
    "right" : "v2 = 255;",
    "info" : "ExpressionStatement[310708-310717]:ExpressionStatement[310708-310717]"
  }, {
    "left" : "if (v2 < 0)",
    "right" : "if (v2 < 0)",
    "info" : "IfStatement[310723-310742]:IfStatement[310723-310742]"
  }, {
    "left" : "v2 = 0;",
    "right" : "v2 = 0;",
    "info" : "ExpressionStatement[310735-310742]:ExpressionStatement[310735-310742]"
  }, {
    "left" : "if (v3 > 255)",
    "right" : "if (v3 > 255)",
    "info" : "IfStatement[310749-310797]:IfStatement[310749-310797]"
  }, {
    "left" : "v3 = 255;",
    "right" : "v3 = 255;",
    "info" : "ExpressionStatement[310763-310772]:ExpressionStatement[310763-310772]"
  }, {
    "left" : "if (v3 < 0)",
    "right" : "if (v3 < 0)",
    "info" : "IfStatement[310778-310797]:IfStatement[310778-310797]"
  }, {
    "left" : "v3 = 0;",
    "right" : "v3 = 0;",
    "info" : "ExpressionStatement[310790-310797]:ExpressionStatement[310790-310797]"
  }, {
    "left" : "return ((int)alpha << 24) | ((int)v1 << 16) | ((int)v2 << 8) | (int)v3;",
    "right" : "return ((int)alpha << 24) | ((int)v1 << 16) | ((int)v2 << 8) | (int)v3;",
    "info" : "ReturnStatement[310805-310876]:ReturnStatement[310805-310876]"
  }, {
    "left" : "return g.color(v1, v2, v3, alpha);",
    "right" : "return g.color(v1, v2, v3, alpha);",
    "info" : "ReturnStatement[310887-310921]:ReturnStatement[310887-310921]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[311631-311637]:Modifier[311631-311637]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[311638-311641]:PrimitiveType[311638-311641]"
  }, {
    "left" : "int c1",
    "right" : "int c1",
    "info" : "SingleVariableDeclaration[311652-311658]:SingleVariableDeclaration[311652-311658]"
  }, {
    "left" : "int c2",
    "right" : "int c2",
    "info" : "SingleVariableDeclaration[311660-311666]:SingleVariableDeclaration[311660-311666]"
  }, {
    "left" : "float amt",
    "right" : "float amt",
    "info" : "SingleVariableDeclaration[311668-311677]:SingleVariableDeclaration[311668-311677]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[311679-311872]:Block[311679-311872]"
  }, {
    "left" : "if (g != null)",
    "right" : "if (g != null)",
    "info" : "IfStatement[311685-311746]:IfStatement[311685-311746]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[311700-311746]:Block[311700-311746]"
  }, {
    "left" : "return g.lerpColor(c1, c2, amt);",
    "right" : "return g.lerpColor(c1, c2, amt);",
    "info" : "ReturnStatement[311708-311740]:ReturnStatement[311708-311740]"
  }, {
    "left" : "return PGraphics.lerpColor(c1, c2, amt, RGB);",
    "right" : "return PGraphics.lerpColor(c1, c2, amt, RGB);",
    "info" : "ReturnStatement[311823-311868]:ReturnStatement[311823-311868]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[311877-311883]:Modifier[311877-311883]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[311884-311890]:Modifier[311884-311890]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[311891-311894]:PrimitiveType[311891-311894]"
  }, {
    "left" : "int c1",
    "right" : "int c1",
    "info" : "SingleVariableDeclaration[311906-311912]:SingleVariableDeclaration[311906-311912]"
  }, {
    "left" : "int c2",
    "right" : "int c2",
    "info" : "SingleVariableDeclaration[311914-311920]:SingleVariableDeclaration[311914-311920]"
  }, {
    "left" : "int mode",
    "right" : "int mode",
    "info" : "SingleVariableDeclaration[311922-311930]:SingleVariableDeclaration[311922-311930]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[311932-311981]:Block[311932-311981]"
  }, {
    "left" : "return PImage.blendColor(c1, c2, mode);",
    "right" : "return PImage.blendColor(c1, c2, mode);",
    "info" : "ReturnStatement[311938-311977]:ReturnStatement[311938-311977]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[312054-312058]:PrimitiveType[312054-312058]"
  }, {
    "left" : "int x",
    "right" : "int x",
    "info" : "SingleVariableDeclaration[312070-312075]:SingleVariableDeclaration[312070-312075]"
  }, {
    "left" : "int y",
    "right" : "int y",
    "info" : "SingleVariableDeclaration[312077-312082]:SingleVariableDeclaration[312077-312082]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[312084-312238]:Block[312084-312238]"
  }, {
    "left" : "if (!fullScreen)",
    "right" : "if (!fullScreen)",
    "info" : "IfStatement[312090-312234]:IfStatement[312090-312234]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[312107-312234]:Block[312107-312234]"
  }, {
    "left" : "System.err.println(EXTERNAL_MOVE + \" \" + x + \" \" + y);",
    "right" : "System.err.println(EXTERNAL_MOVE + \" \" + x + \" \" + y);",
    "info" : "ExpressionStatement[312115-312169]:ExpressionStatement[312115-312169]"
  }, {
    "left" : "System.err.flush();",
    "right" : "System.err.flush();",
    "info" : "ExpressionStatement[312176-312195]:ExpressionStatement[312176-312195]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[312243-312247]:PrimitiveType[312243-312247]"
  }, {
    "left" : "int w",
    "right" : "int w",
    "info" : "SingleVariableDeclaration[312261-312266]:SingleVariableDeclaration[312261-312266]"
  }, {
    "left" : "int h",
    "right" : "int h",
    "info" : "SingleVariableDeclaration[312268-312273]:SingleVariableDeclaration[312268-312273]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[312275-312281]:Block[312275-312281]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[315966-315972]:Modifier[315966-315972]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[315973-315979]:Modifier[315973-315979]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[315980-315984]:PrimitiveType[315980-315984]"
  }, {
    "left" : "final String[] args",
    "right" : "final String[] args",
    "info" : "SingleVariableDeclaration[315990-316009]:SingleVariableDeclaration[315990-316009]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[316011-316043]:Block[316011-316043]"
  }, {
    "left" : "runSketch(args, null);",
    "right" : "runSketch(args, null);",
    "info" : "ExpressionStatement[316017-316039]:ExpressionStatement[316017-316039]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[316279-316285]:Modifier[316279-316285]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[316286-316292]:Modifier[316286-316292]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[316293-316297]:PrimitiveType[316293-316297]"
  }, {
    "left" : "final String mainClass",
    "right" : "final String mainClass",
    "info" : "SingleVariableDeclaration[316303-316325]:SingleVariableDeclaration[316303-316325]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[316327-316359]:Block[316327-316359]"
  }, {
    "left" : "main(mainClass, null);",
    "right" : "main(mainClass, null);",
    "info" : "ExpressionStatement[316333-316355]:ExpressionStatement[316333-316355]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[316851-316857]:Modifier[316851-316857]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[316858-316864]:Modifier[316858-316864]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[316865-316869]:PrimitiveType[316865-316869]"
  }, {
    "left" : "final String mainClass",
    "right" : "final String mainClass",
    "info" : "SingleVariableDeclaration[316875-316897]:SingleVariableDeclaration[316875-316897]"
  }, {
    "left" : "final String[] sketchArgs",
    "right" : "final String[] sketchArgs",
    "info" : "SingleVariableDeclaration[316899-316924]:SingleVariableDeclaration[316899-316924]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[316926-317081]:Block[316926-317081]"
  }, {
    "left" : "String[] args = new String[] { mainClass };",
    "right" : "String[] args = new String[] { mainClass };",
    "info" : "VariableDeclarationStatement[316932-316975]:VariableDeclarationStatement[316932-316975]"
  }, {
    "left" : "if (sketchArgs != null)",
    "right" : "if (sketchArgs != null)",
    "info" : "IfStatement[316980-317050]:IfStatement[316980-317050]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[317004-317050]:Block[317004-317050]"
  }, {
    "left" : "args = concat(args, sketchArgs);",
    "right" : "args = concat(args, sketchArgs);",
    "info" : "ExpressionStatement[317012-317044]:ExpressionStatement[317012-317044]"
  }, {
    "left" : "runSketch(args, null);",
    "right" : "runSketch(args, null);",
    "info" : "ExpressionStatement[317055-317077]:ExpressionStatement[317055-317077]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[317389-317395]:Modifier[317389-317395]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[317396-317402]:Modifier[317396-317402]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[317403-317407]:PrimitiveType[317403-317407]"
  }, {
    "left" : "final String[] args",
    "right" : "final String[] args",
    "info" : "SingleVariableDeclaration[317418-317437]:SingleVariableDeclaration[317418-317437]"
  }, {
    "left" : "final PApplet constructedSketch",
    "right" : "final PApplet constructedSketch",
    "info" : "SingleVariableDeclaration[317470-317501]:SingleVariableDeclaration[317470-317501]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[317935-325134]:Block[317503-325164]"
  }, {
    "left" : "System.setProperty(\"sun.awt.noerasebackground\", \"true\");",
    "right" : "System.setProperty(\"sun.awt.noerasebackground\", \"true\");",
    "info" : "ExpressionStatement[318069-318125]:ExpressionStatement[318099-318155]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[318198-318587]:TryStatement[318228-318617]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[318202-318328]:Block[318232-318358]"
  }, {
    "left" : "Toolkit.getDefaultToolkit().setDynamicLayout(true);",
    "right" : "Toolkit.getDefaultToolkit().setDynamicLayout(true);",
    "info" : "ExpressionStatement[318271-318322]:ExpressionStatement[318301-318352]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[318357-318587]:Block[318387-318617]"
  }, {
    "left" : "System.err.println(\"Cannot run sketch without a display. Read this for possible solutions:\");",
    "right" : "System.err.println(\"Cannot run sketch without a display. Read this for possible solutions:\");",
    "info" : "ExpressionStatement[318365-318458]:ExpressionStatement[318395-318488]"
  }, {
    "left" : "System.err.println(\"https://github.com/processing/processing/wiki/Running-without-a-Display\");",
    "right" : "System.err.println(\"https://github.com/processing/processing/wiki/Running-without-a-Display\");",
    "info" : "ExpressionStatement[318465-318559]:ExpressionStatement[318495-318589]"
  }, {
    "left" : "System.exit(1);",
    "right" : "System.exit(1);",
    "info" : "ExpressionStatement[318566-318581]:ExpressionStatement[318596-318611]"
  }, {
    "left" : "System.setProperty(\"java.net.useSystemProxies\", \"true\");",
    "right" : "System.setProperty(\"java.net.useSystemProxies\", \"true\");",
    "info" : "ExpressionStatement[318653-318709]:ExpressionStatement[318683-318739]"
  }, {
    "left" : "if (args.length < 1)",
    "right" : "if (args.length < 1)",
    "info" : "IfStatement[318715-318923]:IfStatement[318745-318953]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[318736-318923]:Block[318766-318953]"
  }, {
    "left" : "System.err.println(\"Usage: PApplet [options] <class name> [sketch args]\");",
    "right" : "System.err.println(\"Usage: PApplet [options] <class name> [sketch args]\");",
    "info" : "ExpressionStatement[318744-318818]:ExpressionStatement[318774-318848]"
  }, {
    "left" : "System.err.println(\"See the Javadoc for PApplet for an explanation.\");",
    "right" : "System.err.println(\"See the Javadoc for PApplet for an explanation.\");",
    "info" : "ExpressionStatement[318825-318895]:ExpressionStatement[318855-318925]"
  }, {
    "left" : "System.exit(1);",
    "right" : "System.exit(1);",
    "info" : "ExpressionStatement[318902-318917]:ExpressionStatement[318932-318947]"
  }, {
    "left" : "boolean external = false;",
    "right" : "boolean external = false;",
    "info" : "VariableDeclarationStatement[318929-318954]:VariableDeclarationStatement[318959-318984]"
  }, {
    "left" : "int[] location = null;",
    "right" : "int[] location = null;",
    "info" : "VariableDeclarationStatement[318959-318981]:VariableDeclarationStatement[318989-319011]"
  }, {
    "left" : "int[] editorLocation = null;",
    "right" : "int[] editorLocation = null;",
    "info" : "VariableDeclarationStatement[318986-319014]:VariableDeclarationStatement[319016-319044]"
  }, {
    "left" : "String name = null;",
    "right" : "String name = null;",
    "info" : "VariableDeclarationStatement[319020-319039]:VariableDeclarationStatement[319050-319069]"
  }, {
    "left" : "int windowColor = 0;",
    "right" : "int windowColor = 0;",
    "info" : "VariableDeclarationStatement[319044-319064]:VariableDeclarationStatement[319074-319094]"
  }, {
    "left" : "int stopColor = 0xff808080;",
    "right" : "int stopColor = 0xff808080;",
    "info" : "VariableDeclarationStatement[319069-319096]:VariableDeclarationStatement[319099-319126]"
  }, {
    "left" : "boolean hideStop = false;",
    "right" : "boolean hideStop = false;",
    "info" : "VariableDeclarationStatement[319101-319126]:VariableDeclarationStatement[319131-319156]"
  }, {
    "left" : "int displayNum = -1;",
    "right" : "int displayNum = -1;",
    "info" : "VariableDeclarationStatement[319132-319152]:VariableDeclarationStatement[319162-319182]"
  }, {
    "left" : "boolean present = false;",
    "right" : "boolean present = false;",
    "info" : "VariableDeclarationStatement[319207-319231]:VariableDeclarationStatement[319237-319261]"
  }, {
    "left" : "String param = null, value = null;",
    "right" : "String param = null, value = null;",
    "info" : "VariableDeclarationStatement[319273-319307]:VariableDeclarationStatement[319303-319337]"
  }, {
    "left" : "String folder = calcSketchPath();",
    "right" : "String folder = calcSketchPath();",
    "info" : "VariableDeclarationStatement[319312-319345]:VariableDeclarationStatement[319342-319375]"
  }, {
    "left" : "int argIndex = 0;",
    "right" : "int argIndex = 0;",
    "info" : "VariableDeclarationStatement[319351-319368]:VariableDeclarationStatement[319381-319398]"
  }, {
    "left" : "while (argIndex < args.length)",
    "right" : "while (argIndex < args.length)",
    "info" : "WhileStatement[319373-321363]:WhileStatement[319403-321393]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[319404-321363]:Block[319434-321393]"
  }, {
    "left" : "int equals = args[argIndex].indexOf('=');",
    "right" : "int equals = args[argIndex].indexOf('=');",
    "info" : "VariableDeclarationStatement[319412-319453]:VariableDeclarationStatement[319442-319483]"
  }, {
    "left" : "if (equals != -1)",
    "right" : "if (equals != -1)",
    "info" : "IfStatement[319460-321339]:IfStatement[319490-321369]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[319478-320841]:Block[319508-320871]"
  }, {
    "left" : "param = args[argIndex].substring(0, equals);",
    "right" : "param = args[argIndex].substring(0, equals);",
    "info" : "ExpressionStatement[319488-319532]:ExpressionStatement[319518-319562]"
  }, {
    "left" : "value = args[argIndex].substring(equals + 1);",
    "right" : "value = args[argIndex].substring(equals + 1);",
    "info" : "ExpressionStatement[319541-319586]:ExpressionStatement[319571-319616]"
  }, {
    "left" : "if (param.equals(ARGS_EDITOR_LOCATION))",
    "right" : "if (param.equals(ARGS_EDITOR_LOCATION))",
    "info" : "IfStatement[319596-320832]:IfStatement[319626-320862]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[319636-319731]:Block[319666-319761]"
  }, {
    "left" : "external = true;",
    "right" : "external = true;",
    "info" : "ExpressionStatement[319648-319664]:ExpressionStatement[319678-319694]"
  }, {
    "left" : "editorLocation = parseInt(split(value, ','));",
    "right" : "editorLocation = parseInt(split(value, ','));",
    "info" : "ExpressionStatement[319675-319720]:ExpressionStatement[319705-319750]"
  }, {
    "left" : "if (param.equals(ARGS_DISPLAY))",
    "right" : "if (param.equals(ARGS_DISPLAY))",
    "info" : "IfStatement[319737-320832]:IfStatement[319767-320862]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[319769-319956]:Block[319799-319986]"
  }, {
    "left" : "displayNum = parseInt(value, -1);",
    "right" : "displayNum = parseInt(value, -1);",
    "info" : "ExpressionStatement[319781-319814]:ExpressionStatement[319811-319844]"
  }, {
    "left" : "if (displayNum == -1)",
    "right" : "if (displayNum == -1)",
    "info" : "IfStatement[319825-319945]:IfStatement[319855-319975]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[319847-319945]:Block[319877-319975]"
  }, {
    "left" : "System.err.println(\"Could not parse \" + value + \" for \" + ARGS_DISPLAY);",
    "right" : "System.err.println(\"Could not parse \" + value + \" for \" + ARGS_DISPLAY);",
    "info" : "ExpressionStatement[319861-319933]:ExpressionStatement[319891-319963]"
  }, {
    "left" : "if (param.equals(ARGS_WINDOW_COLOR))",
    "right" : "if (param.equals(ARGS_WINDOW_COLOR))",
    "info" : "IfStatement[319962-320832]:IfStatement[319992-320862]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[319999-320306]:Block[320029-320336]"
  }, {
    "left" : "if (value.charAt(0) == '#' && value.length() == 7)",
    "right" : "if (value.charAt(0) == '#' && value.length() == 7)",
    "info" : "IfStatement[320011-320295]:IfStatement[320041-320325]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[320062-320183]:Block[320092-320213]"
  }, {
    "left" : "value = value.substring(1);",
    "right" : "value = value.substring(1);",
    "info" : "ExpressionStatement[320076-320103]:ExpressionStatement[320106-320133]"
  }, {
    "left" : "windowColor = 0xff000000 | Integer.parseInt(value, 16);",
    "right" : "windowColor = 0xff000000 | Integer.parseInt(value, 16);",
    "info" : "ExpressionStatement[320116-320171]:ExpressionStatement[320146-320201]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[320189-320295]:Block[320219-320325]"
  }, {
    "left" : "System.err.println(ARGS_WINDOW_COLOR + \" should be a # followed by six digits\");",
    "right" : "System.err.println(ARGS_WINDOW_COLOR + \" should be a # followed by six digits\");",
    "info" : "ExpressionStatement[320203-320283]:ExpressionStatement[320233-320313]"
  }, {
    "left" : "if (param.equals(ARGS_STOP_COLOR))",
    "right" : "if (param.equals(ARGS_STOP_COLOR))",
    "info" : "IfStatement[320312-320832]:IfStatement[320342-320862]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[320347-320650]:Block[320377-320680]"
  }, {
    "left" : "if (value.charAt(0) == '#' && value.length() == 7)",
    "right" : "if (value.charAt(0) == '#' && value.length() == 7)",
    "info" : "IfStatement[320359-320639]:IfStatement[320389-320669]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[320410-320529]:Block[320440-320559]"
  }, {
    "left" : "value = value.substring(1);",
    "right" : "value = value.substring(1);",
    "info" : "ExpressionStatement[320424-320451]:ExpressionStatement[320454-320481]"
  }, {
    "left" : "stopColor = 0xff000000 | Integer.parseInt(value, 16);",
    "right" : "stopColor = 0xff000000 | Integer.parseInt(value, 16);",
    "info" : "ExpressionStatement[320464-320517]:ExpressionStatement[320494-320547]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[320535-320639]:Block[320565-320669]"
  }, {
    "left" : "System.err.println(ARGS_STOP_COLOR + \" should be a # followed by six digits\");",
    "right" : "System.err.println(ARGS_STOP_COLOR + \" should be a # followed by six digits\");",
    "info" : "ExpressionStatement[320549-320627]:ExpressionStatement[320579-320657]"
  }, {
    "left" : "if (param.equals(ARGS_SKETCH_FOLDER))",
    "right" : "if (param.equals(ARGS_SKETCH_FOLDER))",
    "info" : "IfStatement[320656-320832]:IfStatement[320686-320862]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[320694-320732]:Block[320724-320762]"
  }, {
    "left" : "folder = value;",
    "right" : "folder = value;",
    "info" : "ExpressionStatement[320706-320721]:ExpressionStatement[320736-320751]"
  }, {
    "left" : "if (param.equals(ARGS_LOCATION))",
    "right" : "if (param.equals(ARGS_LOCATION))",
    "info" : "IfStatement[320738-320832]:IfStatement[320768-320862]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[320771-320832]:Block[320801-320862]"
  }, {
    "left" : "location = parseInt(split(value, ','));",
    "right" : "location = parseInt(split(value, ','));",
    "info" : "ExpressionStatement[320783-320822]:ExpressionStatement[320813-320852]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[320847-321339]:Block[320877-321369]"
  }, {
    "left" : "if (args[argIndex].equals(ARGS_PRESENT))",
    "right" : "if (args[argIndex].equals(ARGS_PRESENT))",
    "info" : "IfStatement[320857-321331]:IfStatement[320887-321361]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[320898-321036]:Block[320928-321066]"
  }, {
    "left" : "present = true;",
    "right" : "present = true;",
    "info" : "ExpressionStatement[320910-320925]:ExpressionStatement[320940-320955]"
  }, {
    "left" : "if (args[argIndex].equals(ARGS_HIDE_STOP))",
    "right" : "if (args[argIndex].equals(ARGS_HIDE_STOP))",
    "info" : "IfStatement[321042-321331]:IfStatement[321072-321361]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[321085-321124]:Block[321115-321154]"
  }, {
    "left" : "hideStop = true;",
    "right" : "hideStop = true;",
    "info" : "ExpressionStatement[321097-321113]:ExpressionStatement[321127-321143]"
  }, {
    "left" : "if (args[argIndex].equals(ARGS_EXTERNAL))",
    "right" : "if (args[argIndex].equals(ARGS_EXTERNAL))",
    "info" : "IfStatement[321130-321331]:IfStatement[321160-321361]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[321172-321211]:Block[321202-321241]"
  }, {
    "left" : "external = true;",
    "right" : "external = true;",
    "info" : "ExpressionStatement[321184-321200]:ExpressionStatement[321214-321230]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[321217-321331]:Block[321247-321361]"
  }, {
    "left" : "name = args[argIndex];",
    "right" : "name = args[argIndex];",
    "info" : "ExpressionStatement[321229-321251]:ExpressionStatement[321259-321281]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[321262-321268]:BreakStatement[321292-321298]"
  }, {
    "left" : "argIndex++;",
    "right" : "argIndex++;",
    "info" : "ExpressionStatement[321346-321357]:ExpressionStatement[321376-321387]"
  }, {
    "left" : "final PApplet sketch;",
    "right" : "final PApplet sketch;",
    "info" : "VariableDeclarationStatement[321929-321950]:VariableDeclarationStatement[321959-321980]"
  }, {
    "left" : "if (constructedSketch != null)",
    "right" : "if (constructedSketch != null)",
    "info" : "IfStatement[321955-322268]:IfStatement[321985-322298]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[321986-322027]:Block[322016-322057]"
  }, {
    "left" : "sketch = constructedSketch;",
    "right" : "sketch = constructedSketch;",
    "info" : "ExpressionStatement[321994-322021]:ExpressionStatement[322024-322051]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[322033-322268]:Block[322063-322298]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[322041-322262]:TryStatement[322071-322292]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[322045-322193]:Block[322075-322223]"
  }, {
    "left" : "Class<?> c =\n          Thread.currentThread().getContextClassLoader().loadClass(name);",
    "right" : "Class<?> c =\n          Thread.currentThread().getContextClassLoader().loadClass(name);",
    "info" : "VariableDeclarationStatement[322055-322141]:VariableDeclarationStatement[322085-322171]"
  }, {
    "left" : "sketch = (PApplet) c.newInstance();",
    "right" : "sketch = (PApplet) c.newInstance();",
    "info" : "ExpressionStatement[322150-322185]:ExpressionStatement[322180-322215]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[322214-322262]:Block[322244-322292]"
  }, {
    "left" : "throw new RuntimeException(e);",
    "right" : "throw new RuntimeException(e);",
    "info" : "ThrowStatement[322224-322254]:ThrowStatement[322254-322284]"
  }, {
    "left" : "if (platform == MACOSX)",
    "right" : "if (platform == MACOSX)",
    "info" : "IfStatement[322274-322726]:IfStatement[322304-322756]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[322298-322726]:Block[322328-322756]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[322306-322720]:TryStatement[322336-322750]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[322310-322638]:Block[322340-322668]"
  }, {
    "left" : "final String td = \"processing.core.ThinkDifferent\";",
    "right" : "final String td = \"processing.core.ThinkDifferent\";",
    "info" : "VariableDeclarationStatement[322320-322371]:VariableDeclarationStatement[322350-322401]"
  }, {
    "left" : "Class<?> thinkDifferent =\n          Thread.currentThread().getContextClassLoader().loadClass(td);",
    "right" : "Class<?> thinkDifferent =\n          Thread.currentThread().getContextClassLoader().loadClass(td);",
    "info" : "VariableDeclarationStatement[322380-322477]:VariableDeclarationStatement[322410-322507]"
  }, {
    "left" : "Method method =\n          thinkDifferent.getMethod(\"init\", new Class[] { PApplet.class });",
    "right" : "Method method =\n          thinkDifferent.getMethod(\"init\", new Class[] { PApplet.class });",
    "info" : "VariableDeclarationStatement[322486-322576]:VariableDeclarationStatement[322516-322606]"
  }, {
    "left" : "method.invoke(null, new Object[] { sketch });",
    "right" : "method.invoke(null, new Object[] { sketch });",
    "info" : "ExpressionStatement[322585-322630]:ExpressionStatement[322615-322660]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[322659-322720]:Block[322689-322750]"
  }, {
    "left" : "e.printStackTrace();",
    "right" : "e.printStackTrace();",
    "info" : "ExpressionStatement[322669-322689]:ExpressionStatement[322699-322719]"
  }, {
    "left" : "sketch.display = displayNum;",
    "right" : "sketch.display = displayNum;",
    "info" : "ExpressionStatement[322862-322890]:ExpressionStatement[322892-322920]"
  }, {
    "left" : "sketch.handleSettings();",
    "right" : "sketch.handleSettings();",
    "info" : "ExpressionStatement[322977-323001]:ExpressionStatement[323007-323031]"
  }, {
    "left" : "sketch.sketchPath = folder;",
    "right" : "sketch.sketchPath = folder;",
    "info" : "ExpressionStatement[323165-323192]:ExpressionStatement[323195-323222]"
  }, {
    "left" : "if (args.length != argIndex + 1)",
    "right" : "if (args.length != argIndex + 1)",
    "info" : "IfStatement[323838-324094]:IfStatement[323868-324124]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[323871-324094]:Block[323901-324124]"
  }, {
    "left" : "sketch.args = PApplet.subset(args, argIndex + 1);",
    "right" : "sketch.args = PApplet.subset(args, argIndex + 1);",
    "info" : "ExpressionStatement[324039-324088]:ExpressionStatement[324069-324118]"
  }, {
    "left" : "sketch.external = external;",
    "right" : "sketch.external = external;",
    "info" : "ExpressionStatement[324100-324127]:ExpressionStatement[324130-324157]"
  }, {
    "left" : "if (windowColor != 0)",
    "right" : "if (windowColor != 0)",
    "info" : "IfStatement[324133-324202]:IfStatement[324163-324232]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[324155-324202]:Block[324185-324232]"
  }, {
    "left" : "sketch.windowColor = windowColor;",
    "right" : "sketch.windowColor = windowColor;",
    "info" : "ExpressionStatement[324163-324196]:ExpressionStatement[324193-324226]"
  }, {
    "left" : "PSurface surface = sketch.initSurface();",
    "right" : "PSurface surface = sketch.initSurface();",
    "info" : "VariableDeclarationStatement[324208-324248]:VariableDeclarationStatement[324238-324278]"
  }, {
    "left" : "if (present)",
    "right" : "if (present)",
    "info" : "IfStatement[324804-325007]:IfStatement[324834-325037]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[324817-324941]:Block[324847-324971]"
  }, {
    "left" : "if (hideStop)",
    "right" : "if (hideStop)",
    "info" : "IfStatement[324825-324896]:IfStatement[324855-324926]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[324839-324896]:Block[324869-324926]"
  }, {
    "left" : "stopColor = 0;",
    "right" : "stopColor = 0;",
    "info" : "ExpressionStatement[324849-324863]:ExpressionStatement[324879-324893]"
  }, {
    "left" : "surface.placePresent(stopColor);",
    "right" : "surface.placePresent(stopColor);",
    "info" : "ExpressionStatement[324903-324935]:ExpressionStatement[324933-324965]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[324947-325007]:Block[324977-325037]"
  }, {
    "left" : "surface.placeWindow(location, editorLocation);",
    "right" : "surface.placeWindow(location, editorLocation);",
    "info" : "ExpressionStatement[324955-325001]:ExpressionStatement[324985-325031]"
  }, {
    "left" : "if (external)",
    "right" : "if (external)",
    "info" : "IfStatement[325070-325130]:IfStatement[325100-325160]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[325084-325130]:Block[325114-325160]"
  }, {
    "left" : "surface.setupExternalMessages();",
    "right" : "surface.setupExternalMessages();",
    "info" : "ExpressionStatement[325092-325124]:ExpressionStatement[325122-325154]"
  }, {
    "left" : "protected",
    "right" : "protected",
    "info" : "Modifier[325139-325148]:Modifier[325169-325178]"
  }, {
    "left" : "PSurface",
    "right" : "PSurface",
    "info" : "SimpleType[325149-325157]:SimpleType[325179-325187]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[325172-326478]:Block[325202-326508]"
  }, {
    "left" : "g = createPrimaryGraphics();",
    "right" : "g = createPrimaryGraphics();",
    "info" : "ExpressionStatement[325295-325323]:ExpressionStatement[325325-325353]"
  }, {
    "left" : "surface = g.createSurface();",
    "right" : "surface = g.createSurface();",
    "info" : "ExpressionStatement[325328-325356]:ExpressionStatement[325358-325386]"
  }, {
    "left" : "if (g.displayable() && frame == null)",
    "right" : "if (g.displayable() && frame == null)",
    "info" : "IfStatement[325433-326441]:IfStatement[325463-326471]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[325471-326356]:Block[325501-326386]"
  }, {
    "left" : "frame = new Frame() {\n        @Override\n        public void setResizable(boolean resizable) {\n          deprecationWarning(\"setResizable\");\n          surface.setResizable(resizable);\n        }\n\n        @Override\n        public void setVisible(boolean visible) {\n          deprecationWarning(\"setVisible\");\n          surface.setVisible(visible);\n        }\n\n        @Override\n        public void setTitle(String title) {\n          deprecationWarning(\"setTitle\");\n          surface.setTitle(title);\n        }\n\n        private void deprecationWarning(String method) {\n          PGraphics.showWarning(\"Use surface.\" + method + \"() instead of \" +\n                                \"frame.\" + method + \" in Processing 3\");\n        }\n      };",
    "right" : "frame = new Frame() {\n        @Override\n        public void setResizable(boolean resizable) {\n          deprecationWarning(\"setResizable\");\n          surface.setResizable(resizable);\n        }\n\n        @Override\n        public void setVisible(boolean visible) {\n          deprecationWarning(\"setVisible\");\n          surface.setVisible(visible);\n        }\n\n        @Override\n        public void setTitle(String title) {\n          deprecationWarning(\"setTitle\");\n          surface.setTitle(title);\n        }\n\n        private void deprecationWarning(String method) {\n          PGraphics.showWarning(\"Use surface.\" + method + \"() instead of \" +\n                                \"frame.\" + method + \" in Processing 3\");\n        }\n      };",
    "info" : "ExpressionStatement[325479-326211]:ExpressionStatement[325509-326241]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[325509-325518]:MarkerAnnotation[325539-325548]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[325527-325533]:Modifier[325557-325563]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[325534-325538]:PrimitiveType[325564-325568]"
  }, {
    "left" : "boolean resizable",
    "right" : "boolean resizable",
    "info" : "SingleVariableDeclaration[325552-325569]:SingleVariableDeclaration[325582-325599]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[325571-325671]:Block[325601-325701]"
  }, {
    "left" : "deprecationWarning(\"setResizable\");",
    "right" : "deprecationWarning(\"setResizable\");",
    "info" : "ExpressionStatement[325583-325618]:ExpressionStatement[325613-325648]"
  }, {
    "left" : "surface.setResizable(resizable);",
    "right" : "surface.setResizable(resizable);",
    "info" : "ExpressionStatement[325629-325661]:ExpressionStatement[325659-325691]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[325681-325690]:MarkerAnnotation[325711-325720]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[325699-325705]:Modifier[325729-325735]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[325706-325710]:PrimitiveType[325736-325740]"
  }, {
    "left" : "boolean visible",
    "right" : "boolean visible",
    "info" : "SingleVariableDeclaration[325722-325737]:SingleVariableDeclaration[325752-325767]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[325739-325833]:Block[325769-325863]"
  }, {
    "left" : "deprecationWarning(\"setVisible\");",
    "right" : "deprecationWarning(\"setVisible\");",
    "info" : "ExpressionStatement[325751-325784]:ExpressionStatement[325781-325814]"
  }, {
    "left" : "surface.setVisible(visible);",
    "right" : "surface.setVisible(visible);",
    "info" : "ExpressionStatement[325795-325823]:ExpressionStatement[325825-325853]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[325843-325852]:MarkerAnnotation[325873-325882]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[325861-325867]:Modifier[325891-325897]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[325868-325872]:PrimitiveType[325898-325902]"
  }, {
    "left" : "String title",
    "right" : "String title",
    "info" : "SingleVariableDeclaration[325882-325894]:SingleVariableDeclaration[325912-325924]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[325896-325984]:Block[325926-326014]"
  }, {
    "left" : "deprecationWarning(\"setTitle\");",
    "right" : "deprecationWarning(\"setTitle\");",
    "info" : "ExpressionStatement[325908-325939]:ExpressionStatement[325938-325969]"
  }, {
    "left" : "surface.setTitle(title);",
    "right" : "surface.setTitle(title);",
    "info" : "ExpressionStatement[325950-325974]:ExpressionStatement[325980-326004]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[325994-326001]:Modifier[326024-326031]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[326002-326006]:PrimitiveType[326032-326036]"
  }, {
    "left" : "String method",
    "right" : "String method",
    "info" : "SingleVariableDeclaration[326026-326039]:SingleVariableDeclaration[326056-326069]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[326041-326202]:Block[326071-326232]"
  }, {
    "left" : "PGraphics.showWarning(\"Use surface.\" + method + \"() instead of \" +\n                                \"frame.\" + method + \" in Processing 3\");",
    "right" : "PGraphics.showWarning(\"Use surface.\" + method + \"() instead of \" +\n                                \"frame.\" + method + \" in Processing 3\");",
    "info" : "ExpressionStatement[326053-326192]:ExpressionStatement[326083-326222]"
  }, {
    "left" : "surface.initFrame(this);",
    "right" : "surface.initFrame(this);",
    "info" : "ExpressionStatement[326219-326243]:ExpressionStatement[326249-326273]"
  }, {
    "left" : "surface.setTitle(getClass().getName());",
    "right" : "surface.setTitle(getClass().getName());",
    "info" : "ExpressionStatement[326310-326349]:ExpressionStatement[326340-326379]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[326362-326441]:Block[326392-326471]"
  }, {
    "left" : "surface.initOffscreen(this);",
    "right" : "surface.initOffscreen(this);",
    "info" : "ExpressionStatement[326370-326398]:ExpressionStatement[326400-326428]"
  }, {
    "left" : "init();",
    "right" : "init();",
    "info" : "ExpressionStatement[326447-326454]:ExpressionStatement[326477-326484]"
  }, {
    "left" : "return surface;",
    "right" : "return surface;",
    "info" : "ReturnStatement[326459-326474]:ReturnStatement[326489-326504]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[327398-327404]:Modifier[327428-327434]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[327405-327411]:Modifier[327435-327441]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[327412-327416]:PrimitiveType[327442-327446]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[327431-327684]:Block[327461-327714]"
  }, {
    "left" : "if (PApplet.platform == PConstants.MACOSX)",
    "right" : "if (PApplet.platform == PConstants.MACOSX)",
    "info" : "IfStatement[327437-327680]:IfStatement[327467-327710]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[327480-327680]:Block[327510-327710]"
  }, {
    "left" : "japplemenubar.JAppleMenuBar.hide();",
    "right" : "japplemenubar.JAppleMenuBar.hide();",
    "info" : "ExpressionStatement[327639-327674]:ExpressionStatement[327669-327704]"
  }, {
    "left" : "protected",
    "right" : "protected",
    "info" : "Modifier[327935-327944]:Modifier[327965-327974]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[327945-327949]:PrimitiveType[327975-327979]"
  }, {
    "left" : "final String[] args",
    "right" : "final String[] args",
    "info" : "SingleVariableDeclaration[327960-327979]:SingleVariableDeclaration[327990-328009]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[327981-328383]:Block[328011-328413]"
  }, {
    "left" : "final String[] argsWithSketchName = new String[args.length + 1];",
    "right" : "final String[] argsWithSketchName = new String[args.length + 1];",
    "info" : "VariableDeclarationStatement[327987-328051]:VariableDeclarationStatement[328017-328081]"
  }, {
    "left" : "System.arraycopy(args, 0, argsWithSketchName, 0, args.length);",
    "right" : "System.arraycopy(args, 0, argsWithSketchName, 0, args.length);",
    "info" : "ExpressionStatement[328056-328118]:ExpressionStatement[328086-328148]"
  }, {
    "left" : "final String className = this.getClass().getSimpleName();",
    "right" : "final String className = this.getClass().getSimpleName();",
    "info" : "VariableDeclarationStatement[328123-328180]:VariableDeclarationStatement[328153-328210]"
  }, {
    "left" : "final String cleanedClass =\n      className.replaceAll(\"__[^_]+__\\\\$\", \"\").replaceAll(\"\\\\$\\\\d+\", \"\");",
    "right" : "final String cleanedClass =\n      className.replaceAll(\"__[^_]+__\\\\$\", \"\").replaceAll(\"\\\\$\\\\d+\", \"\");",
    "info" : "VariableDeclarationStatement[328185-328286]:VariableDeclarationStatement[328215-328316]"
  }, {
    "left" : "argsWithSketchName[args.length] = cleanedClass;",
    "right" : "argsWithSketchName[args.length] = cleanedClass;",
    "info" : "ExpressionStatement[328291-328338]:ExpressionStatement[328321-328368]"
  }, {
    "left" : "runSketch(argsWithSketchName, this);",
    "right" : "runSketch(argsWithSketchName, this);",
    "info" : "ExpressionStatement[328343-328379]:ExpressionStatement[328373-328409]"
  }, {
    "left" : "protected",
    "right" : "protected",
    "info" : "Modifier[328432-328441]:Modifier[328462-328471]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[328442-328446]:PrimitiveType[328472-328476]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[328459-328494]:Block[328489-328524]"
  }, {
    "left" : "runSketch(new String[0]);",
    "right" : "runSketch(new String[0]);",
    "info" : "ExpressionStatement[328465-328490]:ExpressionStatement[328495-328520]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[329423-329429]:Modifier[329453-329459]"
  }, {
    "left" : "PGraphics",
    "right" : "PGraphics",
    "info" : "SimpleType[329430-329439]:SimpleType[329460-329469]"
  }, {
    "left" : "String renderer",
    "right" : "String renderer",
    "info" : "SingleVariableDeclaration[329452-329467]:SingleVariableDeclaration[329482-329497]"
  }, {
    "left" : "String filename",
    "right" : "String filename",
    "info" : "SingleVariableDeclaration[329469-329484]:SingleVariableDeclaration[329499-329514]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[329486-329638]:Block[329516-329668]"
  }, {
    "left" : "filename = insertFrame(filename);",
    "right" : "filename = insertFrame(filename);",
    "info" : "ExpressionStatement[329492-329525]:ExpressionStatement[329522-329555]"
  }, {
    "left" : "PGraphics rec = createGraphics(width, height, renderer, filename);",
    "right" : "PGraphics rec = createGraphics(width, height, renderer, filename);",
    "info" : "VariableDeclarationStatement[329530-329596]:VariableDeclarationStatement[329560-329626]"
  }, {
    "left" : "beginRecord(rec);",
    "right" : "beginRecord(rec);",
    "info" : "ExpressionStatement[329601-329618]:ExpressionStatement[329631-329648]"
  }, {
    "left" : "return rec;",
    "right" : "return rec;",
    "info" : "ReturnStatement[329623-329634]:ReturnStatement[329653-329664]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[329745-329751]:Modifier[329775-329781]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[329752-329756]:PrimitiveType[329782-329786]"
  }, {
    "left" : "PGraphics recorder",
    "right" : "PGraphics recorder",
    "info" : "SingleVariableDeclaration[329769-329787]:SingleVariableDeclaration[329799-329817]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[329789-329850]:Block[329819-329880]"
  }, {
    "left" : "this.recorder = recorder;",
    "right" : "this.recorder = recorder;",
    "info" : "ExpressionStatement[329795-329820]:ExpressionStatement[329825-329850]"
  }, {
    "left" : "recorder.beginDraw();",
    "right" : "recorder.beginDraw();",
    "info" : "ExpressionStatement[329825-329846]:ExpressionStatement[329855-329876]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[330113-330119]:Modifier[330143-330149]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[330120-330124]:PrimitiveType[330150-330154]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[330137-330251]:Block[330167-330281]"
  }, {
    "left" : "if (recorder != null)",
    "right" : "if (recorder != null)",
    "info" : "IfStatement[330143-330247]:IfStatement[330173-330277]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[330165-330247]:Block[330195-330277]"
  }, {
    "left" : "recorder.endDraw();",
    "right" : "recorder.endDraw();",
    "info" : "ExpressionStatement[330173-330192]:ExpressionStatement[330203-330222]"
  }, {
    "left" : "recorder.dispose();",
    "right" : "recorder.dispose();",
    "info" : "ExpressionStatement[330199-330218]:ExpressionStatement[330229-330248]"
  }, {
    "left" : "recorder = null;",
    "right" : "recorder = null;",
    "info" : "ExpressionStatement[330225-330241]:ExpressionStatement[330255-330271]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[331949-331955]:Modifier[331979-331985]"
  }, {
    "left" : "PGraphics",
    "right" : "PGraphics",
    "info" : "SimpleType[331956-331965]:SimpleType[331986-331995]"
  }, {
    "left" : "String renderer",
    "right" : "String renderer",
    "info" : "SingleVariableDeclaration[331975-331990]:SingleVariableDeclaration[332005-332020]"
  }, {
    "left" : "String filename",
    "right" : "String filename",
    "info" : "SingleVariableDeclaration[331992-332007]:SingleVariableDeclaration[332022-332037]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[332009-332160]:Block[332039-332190]"
  }, {
    "left" : "filename = insertFrame(filename);",
    "right" : "filename = insertFrame(filename);",
    "info" : "ExpressionStatement[332015-332048]:ExpressionStatement[332045-332078]"
  }, {
    "left" : "PGraphics rec = createGraphics(width, height, renderer, filename);",
    "right" : "PGraphics rec = createGraphics(width, height, renderer, filename);",
    "info" : "VariableDeclarationStatement[332053-332119]:VariableDeclarationStatement[332083-332149]"
  }, {
    "left" : "g.beginRaw(rec);",
    "right" : "g.beginRaw(rec);",
    "info" : "ExpressionStatement[332124-332140]:ExpressionStatement[332154-332170]"
  }, {
    "left" : "return rec;",
    "right" : "return rec;",
    "info" : "ReturnStatement[332145-332156]:ReturnStatement[332175-332186]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[332492-332498]:Modifier[332522-332528]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[332499-332503]:PrimitiveType[332529-332533]"
  }, {
    "left" : "PGraphics rawGraphics",
    "right" : "PGraphics rawGraphics",
    "info" : "SingleVariableDeclaration[332513-332534]:SingleVariableDeclaration[332543-332564]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[332536-332570]:Block[332566-332600]"
  }, {
    "left" : "g.beginRaw(rawGraphics);",
    "right" : "g.beginRaw(rawGraphics);",
    "info" : "ExpressionStatement[332542-332566]:ExpressionStatement[332572-332596]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[332872-332878]:Modifier[332902-332908]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[332879-332883]:PrimitiveType[332909-332913]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[332893-332914]:Block[332923-332944]"
  }, {
    "left" : "g.endRaw();",
    "right" : "g.endRaw();",
    "info" : "ExpressionStatement[332899-332910]:ExpressionStatement[332929-332940]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[334181-334187]:Modifier[334211-334217]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[334188-334192]:PrimitiveType[334218-334222]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[334206-334254]:Block[334236-334284]"
  }, {
    "left" : "g.loadPixels();",
    "right" : "g.loadPixels();",
    "info" : "ExpressionStatement[334212-334227]:ExpressionStatement[334242-334257]"
  }, {
    "left" : "pixels = g.pixels;",
    "right" : "pixels = g.pixels;",
    "info" : "ExpressionStatement[334232-334250]:ExpressionStatement[334262-334280]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[335308-335314]:Modifier[335338-335344]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[335315-335319]:PrimitiveType[335345-335349]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[335335-335362]:Block[335365-335392]"
  }, {
    "left" : "g.updatePixels();",
    "right" : "g.updatePixels();",
    "info" : "ExpressionStatement[335341-335358]:ExpressionStatement[335371-335388]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[335570-335576]:Modifier[335600-335606]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[335577-335581]:PrimitiveType[335607-335611]"
  }, {
    "left" : "int x1",
    "right" : "int x1",
    "info" : "SingleVariableDeclaration[335595-335601]:SingleVariableDeclaration[335625-335631]"
  }, {
    "left" : "int y1",
    "right" : "int y1",
    "info" : "SingleVariableDeclaration[335603-335609]:SingleVariableDeclaration[335633-335639]"
  }, {
    "left" : "int x2",
    "right" : "int x2",
    "info" : "SingleVariableDeclaration[335611-335617]:SingleVariableDeclaration[335641-335647]"
  }, {
    "left" : "int y2",
    "right" : "int y2",
    "info" : "SingleVariableDeclaration[335619-335625]:SingleVariableDeclaration[335649-335655]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[335627-335668]:Block[335657-335698]"
  }, {
    "left" : "g.updatePixels(x1, y1, x2, y2);",
    "right" : "g.updatePixels(x1, y1, x2, y2);",
    "info" : "ExpressionStatement[335633-335664]:ExpressionStatement[335663-335694]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[335984-335990]:Modifier[336014-336020]"
  }, {
    "left" : "PGL",
    "right" : "PGL",
    "info" : "SimpleType[335991-335994]:SimpleType[336021-336024]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[336006-336036]:Block[336036-336066]"
  }, {
    "left" : "return g.beginPGL();",
    "right" : "return g.beginPGL();",
    "info" : "ReturnStatement[336012-336032]:ReturnStatement[336042-336062]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[336041-336047]:Modifier[336071-336077]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[336048-336052]:PrimitiveType[336078-336082]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[336062-336128]:Block[336092-336158]"
  }, {
    "left" : "if (recorder != null)",
    "right" : "if (recorder != null)",
    "info" : "IfStatement[336068-336108]:IfStatement[336098-336138]"
  }, {
    "left" : "recorder.endPGL();",
    "right" : "recorder.endPGL();",
    "info" : "ExpressionStatement[336090-336108]:ExpressionStatement[336120-336138]"
  }, {
    "left" : "g.endPGL();",
    "right" : "g.endPGL();",
    "info" : "ExpressionStatement[336113-336124]:ExpressionStatement[336143-336154]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[336133-336139]:Modifier[336163-336169]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[336140-336144]:PrimitiveType[336170-336174]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[336153-336217]:Block[336183-336247]"
  }, {
    "left" : "if (recorder != null)",
    "right" : "if (recorder != null)",
    "info" : "IfStatement[336159-336198]:IfStatement[336189-336228]"
  }, {
    "left" : "recorder.flush();",
    "right" : "recorder.flush();",
    "info" : "ExpressionStatement[336181-336198]:ExpressionStatement[336211-336228]"
  }, {
    "left" : "g.flush();",
    "right" : "g.flush();",
    "info" : "ExpressionStatement[336203-336213]:ExpressionStatement[336233-336243]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[336222-336228]:Modifier[336252-336258]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[336229-336233]:PrimitiveType[336259-336263]"
  }, {
    "left" : "int which",
    "right" : "int which",
    "info" : "SingleVariableDeclaration[336239-336248]:SingleVariableDeclaration[336269-336278]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[336250-336322]:Block[336280-336352]"
  }, {
    "left" : "if (recorder != null)",
    "right" : "if (recorder != null)",
    "info" : "IfStatement[336256-336299]:IfStatement[336286-336329]"
  }, {
    "left" : "recorder.hint(which);",
    "right" : "recorder.hint(which);",
    "info" : "ExpressionStatement[336278-336299]:ExpressionStatement[336308-336329]"
  }, {
    "left" : "g.hint(which);",
    "right" : "g.hint(which);",
    "info" : "ExpressionStatement[336304-336318]:ExpressionStatement[336334-336348]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[336378-336384]:Modifier[336408-336414]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[336385-336389]:PrimitiveType[336415-336419]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[336403-336477]:Block[336433-336507]"
  }, {
    "left" : "if (recorder != null)",
    "right" : "if (recorder != null)",
    "info" : "IfStatement[336409-336453]:IfStatement[336439-336483]"
  }, {
    "left" : "recorder.beginShape();",
    "right" : "recorder.beginShape();",
    "info" : "ExpressionStatement[336431-336453]:ExpressionStatement[336461-336483]"
  }, {
    "left" : "g.beginShape();",
    "right" : "g.beginShape();",
    "info" : "ExpressionStatement[336458-336473]:ExpressionStatement[336488-336503]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[338560-338566]:Modifier[338590-338596]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[338567-338571]:PrimitiveType[338597-338601]"
  }, {
    "left" : "int kind",
    "right" : "int kind",
    "info" : "SingleVariableDeclaration[338583-338591]:SingleVariableDeclaration[338613-338621]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[338593-338675]:Block[338623-338705]"
  }, {
    "left" : "if (recorder != null)",
    "right" : "if (recorder != null)",
    "info" : "IfStatement[338599-338647]:IfStatement[338629-338677]"
  }, {
    "left" : "recorder.beginShape(kind);",
    "right" : "recorder.beginShape(kind);",
    "info" : "ExpressionStatement[338621-338647]:ExpressionStatement[338651-338677]"
  }, {
    "left" : "g.beginShape(kind);",
    "right" : "g.beginShape(kind);",
    "info" : "ExpressionStatement[338652-338671]:ExpressionStatement[338682-338701]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[338816-338822]:Modifier[338846-338852]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[338823-338827]:PrimitiveType[338853-338857]"
  }, {
    "left" : "boolean edge",
    "right" : "boolean edge",
    "info" : "SingleVariableDeclaration[338833-338845]:SingleVariableDeclaration[338863-338875]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[338847-338917]:Block[338877-338947]"
  }, {
    "left" : "if (recorder != null)",
    "right" : "if (recorder != null)",
    "info" : "IfStatement[338853-338895]:IfStatement[338883-338925]"
  }, {
    "left" : "recorder.edge(edge);",
    "right" : "recorder.edge(edge);",
    "info" : "ExpressionStatement[338875-338895]:ExpressionStatement[338905-338925]"
  }, {
    "left" : "g.edge(edge);",
    "right" : "g.edge(edge);",
    "info" : "ExpressionStatement[338900-338913]:ExpressionStatement[338930-338943]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[339656-339662]:Modifier[339686-339692]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[339663-339667]:PrimitiveType[339693-339697]"
  }, {
    "left" : "float nx",
    "right" : "float nx",
    "info" : "SingleVariableDeclaration[339675-339683]:SingleVariableDeclaration[339705-339713]"
  }, {
    "left" : "float ny",
    "right" : "float ny",
    "info" : "SingleVariableDeclaration[339685-339693]:SingleVariableDeclaration[339715-339723]"
  }, {
    "left" : "float nz",
    "right" : "float nz",
    "info" : "SingleVariableDeclaration[339695-339703]:SingleVariableDeclaration[339725-339733]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[339705-339791]:Block[339735-339821]"
  }, {
    "left" : "if (recorder != null)",
    "right" : "if (recorder != null)",
    "info" : "IfStatement[339711-339761]:IfStatement[339741-339791]"
  }, {
    "left" : "recorder.normal(nx, ny, nz);",
    "right" : "recorder.normal(nx, ny, nz);",
    "info" : "ExpressionStatement[339733-339761]:ExpressionStatement[339763-339791]"
  }, {
    "left" : "g.normal(nx, ny, nz);",
    "right" : "g.normal(nx, ny, nz);",
    "info" : "ExpressionStatement[339766-339787]:ExpressionStatement[339796-339817]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[339796-339802]:Modifier[339826-339832]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[339803-339807]:PrimitiveType[339833-339837]"
  }, {
    "left" : "String name",
    "right" : "String name",
    "info" : "SingleVariableDeclaration[339815-339826]:SingleVariableDeclaration[339845-339856]"
  }, {
    "left" : "float... values",
    "right" : "float... values",
    "info" : "SingleVariableDeclaration[339828-339843]:SingleVariableDeclaration[339858-339873]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[339845-339935]:Block[339875-339965]"
  }, {
    "left" : "if (recorder != null)",
    "right" : "if (recorder != null)",
    "info" : "IfStatement[339851-339903]:IfStatement[339881-339933]"
  }, {
    "left" : "recorder.attrib(name, values);",
    "right" : "recorder.attrib(name, values);",
    "info" : "ExpressionStatement[339873-339903]:ExpressionStatement[339903-339933]"
  }, {
    "left" : "g.attrib(name, values);",
    "right" : "g.attrib(name, values);",
    "info" : "ExpressionStatement[339908-339931]:ExpressionStatement[339938-339961]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[339940-339946]:Modifier[339970-339976]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[339947-339951]:PrimitiveType[339977-339981]"
  }, {
    "left" : "String name",
    "right" : "String name",
    "info" : "SingleVariableDeclaration[339959-339970]:SingleVariableDeclaration[339989-340000]"
  }, {
    "left" : "int... values",
    "right" : "int... values",
    "info" : "SingleVariableDeclaration[339972-339985]:SingleVariableDeclaration[340002-340015]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[339987-340077]:Block[340017-340107]"
  }, {
    "left" : "if (recorder != null)",
    "right" : "if (recorder != null)",
    "info" : "IfStatement[339993-340045]:IfStatement[340023-340075]"
  }, {
    "left" : "recorder.attrib(name, values);",
    "right" : "recorder.attrib(name, values);",
    "info" : "ExpressionStatement[340015-340045]:ExpressionStatement[340045-340075]"
  }, {
    "left" : "g.attrib(name, values);",
    "right" : "g.attrib(name, values);",
    "info" : "ExpressionStatement[340050-340073]:ExpressionStatement[340080-340103]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[340082-340088]:Modifier[340112-340118]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[340089-340093]:PrimitiveType[340119-340123]"
  }, {
    "left" : "String name",
    "right" : "String name",
    "info" : "SingleVariableDeclaration[340101-340112]:SingleVariableDeclaration[340131-340142]"
  }, {
    "left" : "boolean... values",
    "right" : "boolean... values",
    "info" : "SingleVariableDeclaration[340114-340131]:SingleVariableDeclaration[340144-340161]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[340133-340223]:Block[340163-340253]"
  }, {
    "left" : "if (recorder != null)",
    "right" : "if (recorder != null)",
    "info" : "IfStatement[340139-340191]:IfStatement[340169-340221]"
  }, {
    "left" : "recorder.attrib(name, values);",
    "right" : "recorder.attrib(name, values);",
    "info" : "ExpressionStatement[340161-340191]:ExpressionStatement[340191-340221]"
  }, {
    "left" : "g.attrib(name, values);",
    "right" : "g.attrib(name, values);",
    "info" : "ExpressionStatement[340196-340219]:ExpressionStatement[340226-340249]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[340951-340957]:Modifier[340981-340987]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[340958-340962]:PrimitiveType[340988-340992]"
  }, {
    "left" : "int mode",
    "right" : "int mode",
    "info" : "SingleVariableDeclaration[340975-340983]:SingleVariableDeclaration[341005-341013]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[340985-341069]:Block[341015-341099]"
  }, {
    "left" : "if (recorder != null)",
    "right" : "if (recorder != null)",
    "info" : "IfStatement[340991-341040]:IfStatement[341021-341070]"
  }, {
    "left" : "recorder.textureMode(mode);",
    "right" : "recorder.textureMode(mode);",
    "info" : "ExpressionStatement[341013-341040]:ExpressionStatement[341043-341070]"
  }, {
    "left" : "g.textureMode(mode);",
    "right" : "g.textureMode(mode);",
    "info" : "ExpressionStatement[341045-341065]:ExpressionStatement[341075-341095]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[341380-341386]:Modifier[341410-341416]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[341387-341391]:PrimitiveType[341417-341421]"
  }, {
    "left" : "int wrap",
    "right" : "int wrap",
    "info" : "SingleVariableDeclaration[341404-341412]:SingleVariableDeclaration[341434-341442]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[341414-341498]:Block[341444-341528]"
  }, {
    "left" : "if (recorder != null)",
    "right" : "if (recorder != null)",
    "info" : "IfStatement[341420-341469]:IfStatement[341450-341499]"
  }, {
    "left" : "recorder.textureWrap(wrap);",
    "right" : "recorder.textureWrap(wrap);",
    "info" : "ExpressionStatement[341442-341469]:ExpressionStatement[341472-341499]"
  }, {
    "left" : "g.textureWrap(wrap);",
    "right" : "g.textureWrap(wrap);",
    "info" : "ExpressionStatement[341474-341494]:ExpressionStatement[341504-341524]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[342246-342252]:Modifier[342276-342282]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[342253-342257]:PrimitiveType[342283-342287]"
  }, {
    "left" : "PImage image",
    "right" : "PImage image",
    "info" : "SingleVariableDeclaration[342266-342278]:SingleVariableDeclaration[342296-342308]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[342280-342358]:Block[342310-342388]"
  }, {
    "left" : "if (recorder != null)",
    "right" : "if (recorder != null)",
    "info" : "IfStatement[342286-342332]:IfStatement[342316-342362]"
  }, {
    "left" : "recorder.texture(image);",
    "right" : "recorder.texture(image);",
    "info" : "ExpressionStatement[342308-342332]:ExpressionStatement[342338-342362]"
  }, {
    "left" : "g.texture(image);",
    "right" : "g.texture(image);",
    "info" : "ExpressionStatement[342337-342354]:ExpressionStatement[342367-342384]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[342482-342488]:Modifier[342512-342518]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[342489-342493]:PrimitiveType[342519-342523]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[342506-342578]:Block[342536-342608]"
  }, {
    "left" : "if (recorder != null)",
    "right" : "if (recorder != null)",
    "info" : "IfStatement[342512-342555]:IfStatement[342542-342585]"
  }, {
    "left" : "recorder.noTexture();",
    "right" : "recorder.noTexture();",
    "info" : "ExpressionStatement[342534-342555]:ExpressionStatement[342564-342585]"
  }, {
    "left" : "g.noTexture();",
    "right" : "g.noTexture();",
    "info" : "ExpressionStatement[342560-342574]:ExpressionStatement[342590-342604]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[342583-342589]:Modifier[342613-342619]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[342590-342594]:PrimitiveType[342620-342624]"
  }, {
    "left" : "float x",
    "right" : "float x",
    "info" : "SingleVariableDeclaration[342602-342609]:SingleVariableDeclaration[342632-342639]"
  }, {
    "left" : "float y",
    "right" : "float y",
    "info" : "SingleVariableDeclaration[342611-342618]:SingleVariableDeclaration[342641-342648]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[342620-342694]:Block[342650-342724]"
  }, {
    "left" : "if (recorder != null)",
    "right" : "if (recorder != null)",
    "info" : "IfStatement[342626-342670]:IfStatement[342656-342700]"
  }, {
    "left" : "recorder.vertex(x, y);",
    "right" : "recorder.vertex(x, y);",
    "info" : "ExpressionStatement[342648-342670]:ExpressionStatement[342678-342700]"
  }, {
    "left" : "g.vertex(x, y);",
    "right" : "g.vertex(x, y);",
    "info" : "ExpressionStatement[342675-342690]:ExpressionStatement[342705-342720]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[342699-342705]:Modifier[342729-342735]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[342706-342710]:PrimitiveType[342736-342740]"
  }, {
    "left" : "float x",
    "right" : "float x",
    "info" : "SingleVariableDeclaration[342718-342725]:SingleVariableDeclaration[342748-342755]"
  }, {
    "left" : "float y",
    "right" : "float y",
    "info" : "SingleVariableDeclaration[342727-342734]:SingleVariableDeclaration[342757-342764]"
  }, {
    "left" : "float z",
    "right" : "float z",
    "info" : "SingleVariableDeclaration[342736-342743]:SingleVariableDeclaration[342766-342773]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[342745-342825]:Block[342775-342855]"
  }, {
    "left" : "if (recorder != null)",
    "right" : "if (recorder != null)",
    "info" : "IfStatement[342751-342798]:IfStatement[342781-342828]"
  }, {
    "left" : "recorder.vertex(x, y, z);",
    "right" : "recorder.vertex(x, y, z);",
    "info" : "ExpressionStatement[342773-342798]:ExpressionStatement[342803-342828]"
  }, {
    "left" : "g.vertex(x, y, z);",
    "right" : "g.vertex(x, y, z);",
    "info" : "ExpressionStatement[342803-342821]:ExpressionStatement[342833-342851]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[343030-343036]:Modifier[343060-343066]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[343037-343041]:PrimitiveType[343067-343071]"
  }, {
    "left" : "float[] v",
    "right" : "float[] v",
    "info" : "SingleVariableDeclaration[343049-343058]:SingleVariableDeclaration[343079-343088]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[343060-343128]:Block[343090-343158]"
  }, {
    "left" : "if (recorder != null)",
    "right" : "if (recorder != null)",
    "info" : "IfStatement[343066-343107]:IfStatement[343096-343137]"
  }, {
    "left" : "recorder.vertex(v);",
    "right" : "recorder.vertex(v);",
    "info" : "ExpressionStatement[343088-343107]:ExpressionStatement[343118-343137]"
  }, {
    "left" : "g.vertex(v);",
    "right" : "g.vertex(v);",
    "info" : "ExpressionStatement[343112-343124]:ExpressionStatement[343142-343154]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[343133-343139]:Modifier[343163-343169]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[343140-343144]:PrimitiveType[343170-343174]"
  }, {
    "left" : "float x",
    "right" : "float x",
    "info" : "SingleVariableDeclaration[343152-343159]:SingleVariableDeclaration[343182-343189]"
  }, {
    "left" : "float y",
    "right" : "float y",
    "info" : "SingleVariableDeclaration[343161-343168]:SingleVariableDeclaration[343191-343198]"
  }, {
    "left" : "float u",
    "right" : "float u",
    "info" : "SingleVariableDeclaration[343170-343177]:SingleVariableDeclaration[343200-343207]"
  }, {
    "left" : "float v",
    "right" : "float v",
    "info" : "SingleVariableDeclaration[343179-343186]:SingleVariableDeclaration[343209-343216]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[343188-343274]:Block[343218-343304]"
  }, {
    "left" : "if (recorder != null)",
    "right" : "if (recorder != null)",
    "info" : "IfStatement[343194-343244]:IfStatement[343224-343274]"
  }, {
    "left" : "recorder.vertex(x, y, u, v);",
    "right" : "recorder.vertex(x, y, u, v);",
    "info" : "ExpressionStatement[343216-343244]:ExpressionStatement[343246-343274]"
  }, {
    "left" : "g.vertex(x, y, u, v);",
    "right" : "g.vertex(x, y, u, v);",
    "info" : "ExpressionStatement[343249-343270]:ExpressionStatement[343279-343300]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[344845-344851]:Modifier[344875-344881]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[344852-344856]:PrimitiveType[344882-344886]"
  }, {
    "left" : "float x",
    "right" : "float x",
    "info" : "SingleVariableDeclaration[344864-344871]:SingleVariableDeclaration[344894-344901]"
  }, {
    "left" : "float y",
    "right" : "float y",
    "info" : "SingleVariableDeclaration[344873-344880]:SingleVariableDeclaration[344903-344910]"
  }, {
    "left" : "float z",
    "right" : "float z",
    "info" : "SingleVariableDeclaration[344882-344889]:SingleVariableDeclaration[344912-344919]"
  }, {
    "left" : "float u",
    "right" : "float u",
    "info" : "SingleVariableDeclaration[344891-344898]:SingleVariableDeclaration[344921-344928]"
  }, {
    "left" : "float v",
    "right" : "float v",
    "info" : "SingleVariableDeclaration[344900-344907]:SingleVariableDeclaration[344930-344937]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[344909-345001]:Block[344939-345031]"
  }, {
    "left" : "if (recorder != null)",
    "right" : "if (recorder != null)",
    "info" : "IfStatement[344915-344968]:IfStatement[344945-344998]"
  }, {
    "left" : "recorder.vertex(x, y, z, u, v);",
    "right" : "recorder.vertex(x, y, z, u, v);",
    "info" : "ExpressionStatement[344937-344968]:ExpressionStatement[344967-344998]"
  }, {
    "left" : "g.vertex(x, y, z, u, v);",
    "right" : "g.vertex(x, y, z, u, v);",
    "info" : "ExpressionStatement[344973-344997]:ExpressionStatement[345003-345027]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[345044-345050]:Modifier[345074-345080]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[345051-345055]:PrimitiveType[345081-345085]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[345071-345149]:Block[345101-345179]"
  }, {
    "left" : "if (recorder != null)",
    "right" : "if (recorder != null)",
    "info" : "IfStatement[345077-345123]:IfStatement[345107-345153]"
  }, {
    "left" : "recorder.beginContour();",
    "right" : "recorder.beginContour();",
    "info" : "ExpressionStatement[345099-345123]:ExpressionStatement[345129-345153]"
  }, {
    "left" : "g.beginContour();",
    "right" : "g.beginContour();",
    "info" : "ExpressionStatement[345128-345145]:ExpressionStatement[345158-345175]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[345192-345198]:Modifier[345222-345228]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[345199-345203]:PrimitiveType[345229-345233]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[345217-345291]:Block[345247-345321]"
  }, {
    "left" : "if (recorder != null)",
    "right" : "if (recorder != null)",
    "info" : "IfStatement[345223-345267]:IfStatement[345253-345297]"
  }, {
    "left" : "recorder.endContour();",
    "right" : "recorder.endContour();",
    "info" : "ExpressionStatement[345245-345267]:ExpressionStatement[345275-345297]"
  }, {
    "left" : "g.endContour();",
    "right" : "g.endContour();",
    "info" : "ExpressionStatement[345272-345287]:ExpressionStatement[345302-345317]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[345296-345302]:Modifier[345326-345332]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[345303-345307]:PrimitiveType[345333-345337]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[345319-345389]:Block[345349-345419]"
  }, {
    "left" : "if (recorder != null)",
    "right" : "if (recorder != null)",
    "info" : "IfStatement[345325-345367]:IfStatement[345355-345397]"
  }, {
    "left" : "recorder.endShape();",
    "right" : "recorder.endShape();",
    "info" : "ExpressionStatement[345347-345367]:ExpressionStatement[345377-345397]"
  }, {
    "left" : "g.endShape();",
    "right" : "g.endShape();",
    "info" : "ExpressionStatement[345372-345385]:ExpressionStatement[345402-345415]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[346023-346029]:Modifier[346053-346059]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[346030-346034]:PrimitiveType[346060-346064]"
  }, {
    "left" : "int mode",
    "right" : "int mode",
    "info" : "SingleVariableDeclaration[346044-346052]:SingleVariableDeclaration[346074-346082]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[346054-346132]:Block[346084-346162]"
  }, {
    "left" : "if (recorder != null)",
    "right" : "if (recorder != null)",
    "info" : "IfStatement[346060-346106]:IfStatement[346090-346136]"
  }, {
    "left" : "recorder.endShape(mode);",
    "right" : "recorder.endShape(mode);",
    "info" : "ExpressionStatement[346082-346106]:ExpressionStatement[346112-346136]"
  }, {
    "left" : "g.endShape(mode);",
    "right" : "g.endShape(mode);",
    "info" : "ExpressionStatement[346111-346128]:ExpressionStatement[346141-346158]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[346280-346286]:Modifier[346310-346316]"
  }, {
    "left" : "PShape",
    "right" : "PShape",
    "info" : "SimpleType[346287-346293]:SimpleType[346317-346323]"
  }, {
    "left" : "String filename",
    "right" : "String filename",
    "info" : "SingleVariableDeclaration[346304-346319]:SingleVariableDeclaration[346334-346349]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[346321-346360]:Block[346351-346390]"
  }, {
    "left" : "return g.loadShape(filename);",
    "right" : "return g.loadShape(filename);",
    "info" : "ReturnStatement[346327-346356]:ReturnStatement[346357-346386]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[346392-346398]:Modifier[346422-346428]"
  }, {
    "left" : "PShape",
    "right" : "PShape",
    "info" : "SimpleType[346399-346405]:SimpleType[346429-346435]"
  }, {
    "left" : "String filename",
    "right" : "String filename",
    "info" : "SingleVariableDeclaration[346416-346431]:SingleVariableDeclaration[346446-346461]"
  }, {
    "left" : "String options",
    "right" : "String options",
    "info" : "SingleVariableDeclaration[346433-346447]:SingleVariableDeclaration[346463-346477]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[346449-346497]:Block[346479-346527]"
  }, {
    "left" : "return g.loadShape(filename, options);",
    "right" : "return g.loadShape(filename, options);",
    "info" : "ReturnStatement[346455-346493]:ReturnStatement[346485-346523]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[346614-346620]:Modifier[346644-346650]"
  }, {
    "left" : "PShape",
    "right" : "PShape",
    "info" : "SimpleType[346621-346627]:SimpleType[346651-346657]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[346642-346675]:Block[346672-346705]"
  }, {
    "left" : "return g.createShape();",
    "right" : "return g.createShape();",
    "info" : "ReturnStatement[346648-346671]:ReturnStatement[346678-346701]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[346680-346686]:Modifier[346710-346716]"
  }, {
    "left" : "PShape",
    "right" : "PShape",
    "info" : "SimpleType[346687-346693]:SimpleType[346717-346723]"
  }, {
    "left" : "int type",
    "right" : "int type",
    "info" : "SingleVariableDeclaration[346706-346714]:SingleVariableDeclaration[346736-346744]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[346716-346753]:Block[346746-346783]"
  }, {
    "left" : "return g.createShape(type);",
    "right" : "return g.createShape(type);",
    "info" : "ReturnStatement[346722-346749]:ReturnStatement[346752-346779]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[346909-346915]:Modifier[346939-346945]"
  }, {
    "left" : "PShape",
    "right" : "PShape",
    "info" : "SimpleType[346916-346922]:SimpleType[346946-346952]"
  }, {
    "left" : "int kind",
    "right" : "int kind",
    "info" : "SingleVariableDeclaration[346935-346943]:SingleVariableDeclaration[346965-346973]"
  }, {
    "left" : "float... p",
    "right" : "float... p",
    "info" : "SingleVariableDeclaration[346945-346955]:SingleVariableDeclaration[346975-346985]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[346957-346997]:Block[346987-347027]"
  }, {
    "left" : "return g.createShape(kind, p);",
    "right" : "return g.createShape(kind, p);",
    "info" : "ReturnStatement[346963-346993]:ReturnStatement[346993-347023]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[347275-347281]:Modifier[347305-347311]"
  }, {
    "left" : "PShader",
    "right" : "PShader",
    "info" : "SimpleType[347282-347289]:SimpleType[347312-347319]"
  }, {
    "left" : "String fragFilename",
    "right" : "String fragFilename",
    "info" : "SingleVariableDeclaration[347301-347320]:SingleVariableDeclaration[347331-347350]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[347322-347366]:Block[347352-347396]"
  }, {
    "left" : "return g.loadShader(fragFilename);",
    "right" : "return g.loadShader(fragFilename);",
    "info" : "ReturnStatement[347328-347362]:ReturnStatement[347358-347392]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[347435-347441]:Modifier[347465-347471]"
  }, {
    "left" : "PShader",
    "right" : "PShader",
    "info" : "SimpleType[347442-347449]:SimpleType[347472-347479]"
  }, {
    "left" : "String fragFilename",
    "right" : "String fragFilename",
    "info" : "SingleVariableDeclaration[347461-347480]:SingleVariableDeclaration[347491-347510]"
  }, {
    "left" : "String vertFilename",
    "right" : "String vertFilename",
    "info" : "SingleVariableDeclaration[347482-347501]:SingleVariableDeclaration[347512-347531]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[347503-347561]:Block[347533-347591]"
  }, {
    "left" : "return g.loadShader(fragFilename, vertFilename);",
    "right" : "return g.loadShader(fragFilename, vertFilename);",
    "info" : "ReturnStatement[347509-347557]:ReturnStatement[347539-347587]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[347820-347826]:Modifier[347850-347856]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[347827-347831]:PrimitiveType[347857-347861]"
  }, {
    "left" : "PShader shader",
    "right" : "PShader shader",
    "info" : "SingleVariableDeclaration[347839-347853]:SingleVariableDeclaration[347869-347883]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[347855-347933]:Block[347885-347963]"
  }, {
    "left" : "if (recorder != null)",
    "right" : "if (recorder != null)",
    "info" : "IfStatement[347861-347907]:IfStatement[347891-347937]"
  }, {
    "left" : "recorder.shader(shader);",
    "right" : "recorder.shader(shader);",
    "info" : "ExpressionStatement[347883-347907]:ExpressionStatement[347913-347937]"
  }, {
    "left" : "g.shader(shader);",
    "right" : "g.shader(shader);",
    "info" : "ExpressionStatement[347912-347929]:ExpressionStatement[347942-347959]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[348018-348024]:Modifier[348048-348054]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[348025-348029]:PrimitiveType[348055-348059]"
  }, {
    "left" : "PShader shader",
    "right" : "PShader shader",
    "info" : "SingleVariableDeclaration[348037-348051]:SingleVariableDeclaration[348067-348081]"
  }, {
    "left" : "int kind",
    "right" : "int kind",
    "info" : "SingleVariableDeclaration[348053-348061]:SingleVariableDeclaration[348083-348091]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[348063-348153]:Block[348093-348183]"
  }, {
    "left" : "if (recorder != null)",
    "right" : "if (recorder != null)",
    "info" : "IfStatement[348069-348121]:IfStatement[348099-348151]"
  }, {
    "left" : "recorder.shader(shader, kind);",
    "right" : "recorder.shader(shader, kind);",
    "info" : "ExpressionStatement[348091-348121]:ExpressionStatement[348121-348151]"
  }, {
    "left" : "g.shader(shader, kind);",
    "right" : "g.shader(shader, kind);",
    "info" : "ExpressionStatement[348126-348149]:ExpressionStatement[348156-348179]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[348378-348384]:Modifier[348408-348414]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[348385-348389]:PrimitiveType[348415-348419]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[348404-348480]:Block[348434-348510]"
  }, {
    "left" : "if (recorder != null)",
    "right" : "if (recorder != null)",
    "info" : "IfStatement[348410-348455]:IfStatement[348440-348485]"
  }, {
    "left" : "recorder.resetShader();",
    "right" : "recorder.resetShader();",
    "info" : "ExpressionStatement[348432-348455]:ExpressionStatement[348462-348485]"
  }, {
    "left" : "g.resetShader();",
    "right" : "g.resetShader();",
    "info" : "ExpressionStatement[348460-348476]:ExpressionStatement[348490-348506]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[348565-348571]:Modifier[348595-348601]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[348572-348576]:PrimitiveType[348602-348606]"
  }, {
    "left" : "int kind",
    "right" : "int kind",
    "info" : "SingleVariableDeclaration[348589-348597]:SingleVariableDeclaration[348619-348627]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[348599-348683]:Block[348629-348713]"
  }, {
    "left" : "if (recorder != null)",
    "right" : "if (recorder != null)",
    "info" : "IfStatement[348605-348654]:IfStatement[348635-348684]"
  }, {
    "left" : "recorder.resetShader(kind);",
    "right" : "recorder.resetShader(kind);",
    "info" : "ExpressionStatement[348627-348654]:ExpressionStatement[348657-348684]"
  }, {
    "left" : "g.resetShader(kind);",
    "right" : "g.resetShader(kind);",
    "info" : "ExpressionStatement[348659-348679]:ExpressionStatement[348689-348709]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[348748-348754]:Modifier[348778-348784]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[348755-348759]:PrimitiveType[348785-348789]"
  }, {
    "left" : "PShader shader",
    "right" : "PShader shader",
    "info" : "SingleVariableDeclaration[348767-348781]:SingleVariableDeclaration[348797-348811]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[348783-348861]:Block[348813-348891]"
  }, {
    "left" : "if (recorder != null)",
    "right" : "if (recorder != null)",
    "info" : "IfStatement[348789-348835]:IfStatement[348819-348865]"
  }, {
    "left" : "recorder.filter(shader);",
    "right" : "recorder.filter(shader);",
    "info" : "ExpressionStatement[348811-348835]:ExpressionStatement[348841-348865]"
  }, {
    "left" : "g.filter(shader);",
    "right" : "g.filter(shader);",
    "info" : "ExpressionStatement[348840-348857]:ExpressionStatement[348870-348887]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[349115-349121]:Modifier[349145-349151]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[349122-349126]:PrimitiveType[349152-349156]"
  }, {
    "left" : "float a",
    "right" : "float a",
    "info" : "SingleVariableDeclaration[349132-349139]:SingleVariableDeclaration[349162-349169]"
  }, {
    "left" : "float b",
    "right" : "float b",
    "info" : "SingleVariableDeclaration[349141-349148]:SingleVariableDeclaration[349171-349178]"
  }, {
    "left" : "float c",
    "right" : "float c",
    "info" : "SingleVariableDeclaration[349150-349157]:SingleVariableDeclaration[349180-349187]"
  }, {
    "left" : "float d",
    "right" : "float d",
    "info" : "SingleVariableDeclaration[349159-349166]:SingleVariableDeclaration[349189-349196]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[349168-349250]:Block[349198-349280]"
  }, {
    "left" : "if (recorder != null)",
    "right" : "if (recorder != null)",
    "info" : "IfStatement[349174-349222]:IfStatement[349204-349252]"
  }, {
    "left" : "recorder.clip(a, b, c, d);",
    "right" : "recorder.clip(a, b, c, d);",
    "info" : "ExpressionStatement[349196-349222]:ExpressionStatement[349226-349252]"
  }, {
    "left" : "g.clip(a, b, c, d);",
    "right" : "g.clip(a, b, c, d);",
    "info" : "ExpressionStatement[349227-349246]:ExpressionStatement[349257-349276]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[349297-349303]:Modifier[349327-349333]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[349304-349308]:PrimitiveType[349334-349338]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[349318-349384]:Block[349348-349414]"
  }, {
    "left" : "if (recorder != null)",
    "right" : "if (recorder != null)",
    "info" : "IfStatement[349324-349364]:IfStatement[349354-349394]"
  }, {
    "left" : "recorder.noClip();",
    "right" : "recorder.noClip();",
    "info" : "ExpressionStatement[349346-349364]:ExpressionStatement[349376-349394]"
  }, {
    "left" : "g.noClip();",
    "right" : "g.noClip();",
    "info" : "ExpressionStatement[349369-349380]:ExpressionStatement[349399-349410]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[349641-349647]:Modifier[349671-349677]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[349648-349652]:PrimitiveType[349678-349682]"
  }, {
    "left" : "int mode",
    "right" : "int mode",
    "info" : "SingleVariableDeclaration[349663-349671]:SingleVariableDeclaration[349693-349701]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[349673-349753]:Block[349703-349783]"
  }, {
    "left" : "if (recorder != null)",
    "right" : "if (recorder != null)",
    "info" : "IfStatement[349679-349726]:IfStatement[349709-349756]"
  }, {
    "left" : "recorder.blendMode(mode);",
    "right" : "recorder.blendMode(mode);",
    "info" : "ExpressionStatement[349701-349726]:ExpressionStatement[349731-349756]"
  }, {
    "left" : "g.blendMode(mode);",
    "right" : "g.blendMode(mode);",
    "info" : "ExpressionStatement[349731-349749]:ExpressionStatement[349761-349779]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[349758-349764]:Modifier[349788-349794]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[349765-349769]:PrimitiveType[349795-349799]"
  }, {
    "left" : "float x2",
    "right" : "float x2",
    "info" : "SingleVariableDeclaration[349783-349791]:SingleVariableDeclaration[349813-349821]"
  }, {
    "left" : "float y2",
    "right" : "float y2",
    "info" : "SingleVariableDeclaration[349793-349801]:SingleVariableDeclaration[349823-349831]"
  }, {
    "left" : "float x3",
    "right" : "float x3",
    "info" : "SingleVariableDeclaration[349830-349838]:SingleVariableDeclaration[349860-349868]"
  }, {
    "left" : "float y3",
    "right" : "float y3",
    "info" : "SingleVariableDeclaration[349840-349848]:SingleVariableDeclaration[349870-349878]"
  }, {
    "left" : "float x4",
    "right" : "float x4",
    "info" : "SingleVariableDeclaration[349877-349885]:SingleVariableDeclaration[349907-349915]"
  }, {
    "left" : "float y4",
    "right" : "float y4",
    "info" : "SingleVariableDeclaration[349887-349895]:SingleVariableDeclaration[349917-349925]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[349897-350019]:Block[349927-350049]"
  }, {
    "left" : "if (recorder != null)",
    "right" : "if (recorder != null)",
    "info" : "IfStatement[349903-349971]:IfStatement[349933-350001]"
  }, {
    "left" : "recorder.bezierVertex(x2, y2, x3, y3, x4, y4);",
    "right" : "recorder.bezierVertex(x2, y2, x3, y3, x4, y4);",
    "info" : "ExpressionStatement[349925-349971]:ExpressionStatement[349955-350001]"
  }, {
    "left" : "g.bezierVertex(x2, y2, x3, y3, x4, y4);",
    "right" : "g.bezierVertex(x2, y2, x3, y3, x4, y4);",
    "info" : "ExpressionStatement[349976-350015]:ExpressionStatement[350006-350045]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[351596-351602]:Modifier[351626-351632]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[351603-351607]:PrimitiveType[351633-351637]"
  }, {
    "left" : "float x2",
    "right" : "float x2",
    "info" : "SingleVariableDeclaration[351621-351629]:SingleVariableDeclaration[351651-351659]"
  }, {
    "left" : "float y2",
    "right" : "float y2",
    "info" : "SingleVariableDeclaration[351631-351639]:SingleVariableDeclaration[351661-351669]"
  }, {
    "left" : "float z2",
    "right" : "float z2",
    "info" : "SingleVariableDeclaration[351641-351649]:SingleVariableDeclaration[351671-351679]"
  }, {
    "left" : "float x3",
    "right" : "float x3",
    "info" : "SingleVariableDeclaration[351678-351686]:SingleVariableDeclaration[351708-351716]"
  }, {
    "left" : "float y3",
    "right" : "float y3",
    "info" : "SingleVariableDeclaration[351688-351696]:SingleVariableDeclaration[351718-351726]"
  }, {
    "left" : "float z3",
    "right" : "float z3",
    "info" : "SingleVariableDeclaration[351698-351706]:SingleVariableDeclaration[351728-351736]"
  }, {
    "left" : "float x4",
    "right" : "float x4",
    "info" : "SingleVariableDeclaration[351735-351743]:SingleVariableDeclaration[351765-351773]"
  }, {
    "left" : "float y4",
    "right" : "float y4",
    "info" : "SingleVariableDeclaration[351745-351753]:SingleVariableDeclaration[351775-351783]"
  }, {
    "left" : "float z4",
    "right" : "float z4",
    "info" : "SingleVariableDeclaration[351755-351763]:SingleVariableDeclaration[351785-351793]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[351765-351911]:Block[351795-351941]"
  }, {
    "left" : "if (recorder != null)",
    "right" : "if (recorder != null)",
    "info" : "IfStatement[351771-351851]:IfStatement[351801-351881]"
  }, {
    "left" : "recorder.bezierVertex(x2, y2, z2, x3, y3, z3, x4, y4, z4);",
    "right" : "recorder.bezierVertex(x2, y2, z2, x3, y3, z3, x4, y4, z4);",
    "info" : "ExpressionStatement[351793-351851]:ExpressionStatement[351823-351881]"
  }, {
    "left" : "g.bezierVertex(x2, y2, z2, x3, y3, z3, x4, y4, z4);",
    "right" : "g.bezierVertex(x2, y2, z2, x3, y3, z3, x4, y4, z4);",
    "info" : "ExpressionStatement[351856-351907]:ExpressionStatement[351886-351937]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[352465-352471]:Modifier[352495-352501]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[352472-352476]:PrimitiveType[352502-352506]"
  }, {
    "left" : "float cx",
    "right" : "float cx",
    "info" : "SingleVariableDeclaration[352493-352501]:SingleVariableDeclaration[352523-352531]"
  }, {
    "left" : "float cy",
    "right" : "float cy",
    "info" : "SingleVariableDeclaration[352503-352511]:SingleVariableDeclaration[352533-352541]"
  }, {
    "left" : "float x3",
    "right" : "float x3",
    "info" : "SingleVariableDeclaration[352543-352551]:SingleVariableDeclaration[352573-352581]"
  }, {
    "left" : "float y3",
    "right" : "float y3",
    "info" : "SingleVariableDeclaration[352553-352561]:SingleVariableDeclaration[352583-352591]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[352563-352675]:Block[352593-352705]"
  }, {
    "left" : "if (recorder != null)",
    "right" : "if (recorder != null)",
    "info" : "IfStatement[352569-352632]:IfStatement[352599-352662]"
  }, {
    "left" : "recorder.quadraticVertex(cx, cy, x3, y3);",
    "right" : "recorder.quadraticVertex(cx, cy, x3, y3);",
    "info" : "ExpressionStatement[352591-352632]:ExpressionStatement[352621-352662]"
  }, {
    "left" : "g.quadraticVertex(cx, cy, x3, y3);",
    "right" : "g.quadraticVertex(cx, cy, x3, y3);",
    "info" : "ExpressionStatement[352637-352671]:ExpressionStatement[352667-352701]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[352797-352803]:Modifier[352827-352833]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[352804-352808]:PrimitiveType[352834-352838]"
  }, {
    "left" : "float cx",
    "right" : "float cx",
    "info" : "SingleVariableDeclaration[352825-352833]:SingleVariableDeclaration[352855-352863]"
  }, {
    "left" : "float cy",
    "right" : "float cy",
    "info" : "SingleVariableDeclaration[352835-352843]:SingleVariableDeclaration[352865-352873]"
  }, {
    "left" : "float cz",
    "right" : "float cz",
    "info" : "SingleVariableDeclaration[352845-352853]:SingleVariableDeclaration[352875-352883]"
  }, {
    "left" : "float x3",
    "right" : "float x3",
    "info" : "SingleVariableDeclaration[352885-352893]:SingleVariableDeclaration[352915-352923]"
  }, {
    "left" : "float y3",
    "right" : "float y3",
    "info" : "SingleVariableDeclaration[352895-352903]:SingleVariableDeclaration[352925-352933]"
  }, {
    "left" : "float z3",
    "right" : "float z3",
    "info" : "SingleVariableDeclaration[352905-352913]:SingleVariableDeclaration[352935-352943]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[352915-353043]:Block[352945-353073]"
  }, {
    "left" : "if (recorder != null)",
    "right" : "if (recorder != null)",
    "info" : "IfStatement[352921-352992]:IfStatement[352951-353022]"
  }, {
    "left" : "recorder.quadraticVertex(cx, cy, cz, x3, y3, z3);",
    "right" : "recorder.quadraticVertex(cx, cy, cz, x3, y3, z3);",
    "info" : "ExpressionStatement[352943-352992]:ExpressionStatement[352973-353022]"
  }, {
    "left" : "g.quadraticVertex(cx, cy, cz, x3, y3, z3);",
    "right" : "g.quadraticVertex(cx, cy, cz, x3, y3, z3);",
    "info" : "ExpressionStatement[352997-353039]:ExpressionStatement[353027-353069]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[354459-354465]:Modifier[354489-354495]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[354466-354470]:PrimitiveType[354496-354500]"
  }, {
    "left" : "float x",
    "right" : "float x",
    "info" : "SingleVariableDeclaration[354483-354490]:SingleVariableDeclaration[354513-354520]"
  }, {
    "left" : "float y",
    "right" : "float y",
    "info" : "SingleVariableDeclaration[354492-354499]:SingleVariableDeclaration[354522-354529]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[354501-354585]:Block[354531-354615]"
  }, {
    "left" : "if (recorder != null)",
    "right" : "if (recorder != null)",
    "info" : "IfStatement[354507-354556]:IfStatement[354537-354586]"
  }, {
    "left" : "recorder.curveVertex(x, y);",
    "right" : "recorder.curveVertex(x, y);",
    "info" : "ExpressionStatement[354529-354556]:ExpressionStatement[354559-354586]"
  }, {
    "left" : "g.curveVertex(x, y);",
    "right" : "g.curveVertex(x, y);",
    "info" : "ExpressionStatement[354561-354581]:ExpressionStatement[354591-354611]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[354647-354653]:Modifier[354677-354683]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[354654-354658]:PrimitiveType[354684-354688]"
  }, {
    "left" : "float x",
    "right" : "float x",
    "info" : "SingleVariableDeclaration[354671-354678]:SingleVariableDeclaration[354701-354708]"
  }, {
    "left" : "float y",
    "right" : "float y",
    "info" : "SingleVariableDeclaration[354680-354687]:SingleVariableDeclaration[354710-354717]"
  }, {
    "left" : "float z",
    "right" : "float z",
    "info" : "SingleVariableDeclaration[354689-354696]:SingleVariableDeclaration[354719-354726]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[354698-354788]:Block[354728-354818]"
  }, {
    "left" : "if (recorder != null)",
    "right" : "if (recorder != null)",
    "info" : "IfStatement[354704-354756]:IfStatement[354734-354786]"
  }, {
    "left" : "recorder.curveVertex(x, y, z);",
    "right" : "recorder.curveVertex(x, y, z);",
    "info" : "ExpressionStatement[354726-354756]:ExpressionStatement[354756-354786]"
  }, {
    "left" : "g.curveVertex(x, y, z);",
    "right" : "g.curveVertex(x, y, z);",
    "info" : "ExpressionStatement[354761-354784]:ExpressionStatement[354791-354814]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[355411-355417]:Modifier[355441-355447]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[355418-355422]:PrimitiveType[355448-355452]"
  }, {
    "left" : "float x",
    "right" : "float x",
    "info" : "SingleVariableDeclaration[355429-355436]:SingleVariableDeclaration[355459-355466]"
  }, {
    "left" : "float y",
    "right" : "float y",
    "info" : "SingleVariableDeclaration[355438-355445]:SingleVariableDeclaration[355468-355475]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[355447-355519]:Block[355477-355549]"
  }, {
    "left" : "if (recorder != null)",
    "right" : "if (recorder != null)",
    "info" : "IfStatement[355453-355496]:IfStatement[355483-355526]"
  }, {
    "left" : "recorder.point(x, y);",
    "right" : "recorder.point(x, y);",
    "info" : "ExpressionStatement[355475-355496]:ExpressionStatement[355505-355526]"
  }, {
    "left" : "g.point(x, y);",
    "right" : "g.point(x, y);",
    "info" : "ExpressionStatement[355501-355515]:ExpressionStatement[355531-355545]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[355576-355582]:Modifier[355606-355612]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[355583-355587]:PrimitiveType[355613-355617]"
  }, {
    "left" : "float x",
    "right" : "float x",
    "info" : "SingleVariableDeclaration[355594-355601]:SingleVariableDeclaration[355624-355631]"
  }, {
    "left" : "float y",
    "right" : "float y",
    "info" : "SingleVariableDeclaration[355603-355610]:SingleVariableDeclaration[355633-355640]"
  }, {
    "left" : "float z",
    "right" : "float z",
    "info" : "SingleVariableDeclaration[355612-355619]:SingleVariableDeclaration[355642-355649]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[355621-355699]:Block[355651-355729]"
  }, {
    "left" : "if (recorder != null)",
    "right" : "if (recorder != null)",
    "info" : "IfStatement[355627-355673]:IfStatement[355657-355703]"
  }, {
    "left" : "recorder.point(x, y, z);",
    "right" : "recorder.point(x, y, z);",
    "info" : "ExpressionStatement[355649-355673]:ExpressionStatement[355679-355703]"
  }, {
    "left" : "g.point(x, y, z);",
    "right" : "g.point(x, y, z);",
    "info" : "ExpressionStatement[355678-355695]:ExpressionStatement[355708-355725]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[356851-356857]:Modifier[356881-356887]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[356858-356862]:PrimitiveType[356888-356892]"
  }, {
    "left" : "float x1",
    "right" : "float x1",
    "info" : "SingleVariableDeclaration[356868-356876]:SingleVariableDeclaration[356898-356906]"
  }, {
    "left" : "float y1",
    "right" : "float y1",
    "info" : "SingleVariableDeclaration[356878-356886]:SingleVariableDeclaration[356908-356916]"
  }, {
    "left" : "float x2",
    "right" : "float x2",
    "info" : "SingleVariableDeclaration[356888-356896]:SingleVariableDeclaration[356918-356926]"
  }, {
    "left" : "float y2",
    "right" : "float y2",
    "info" : "SingleVariableDeclaration[356898-356906]:SingleVariableDeclaration[356928-356936]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[356908-356998]:Block[356938-357028]"
  }, {
    "left" : "if (recorder != null)",
    "right" : "if (recorder != null)",
    "info" : "IfStatement[356914-356966]:IfStatement[356944-356996]"
  }, {
    "left" : "recorder.line(x1, y1, x2, y2);",
    "right" : "recorder.line(x1, y1, x2, y2);",
    "info" : "ExpressionStatement[356936-356966]:ExpressionStatement[356966-356996]"
  }, {
    "left" : "g.line(x1, y1, x2, y2);",
    "right" : "g.line(x1, y1, x2, y2);",
    "info" : "ExpressionStatement[356971-356994]:ExpressionStatement[357001-357024]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[357110-357116]:Modifier[357140-357146]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[357117-357121]:PrimitiveType[357147-357151]"
  }, {
    "left" : "float x1",
    "right" : "float x1",
    "info" : "SingleVariableDeclaration[357127-357135]:SingleVariableDeclaration[357157-357165]"
  }, {
    "left" : "float y1",
    "right" : "float y1",
    "info" : "SingleVariableDeclaration[357137-357145]:SingleVariableDeclaration[357167-357175]"
  }, {
    "left" : "float z1",
    "right" : "float z1",
    "info" : "SingleVariableDeclaration[357147-357155]:SingleVariableDeclaration[357177-357185]"
  }, {
    "left" : "float x2",
    "right" : "float x2",
    "info" : "SingleVariableDeclaration[357176-357184]:SingleVariableDeclaration[357206-357214]"
  }, {
    "left" : "float y2",
    "right" : "float y2",
    "info" : "SingleVariableDeclaration[357186-357194]:SingleVariableDeclaration[357216-357224]"
  }, {
    "left" : "float z2",
    "right" : "float z2",
    "info" : "SingleVariableDeclaration[357196-357204]:SingleVariableDeclaration[357226-357234]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[357206-357312]:Block[357236-357342]"
  }, {
    "left" : "if (recorder != null)",
    "right" : "if (recorder != null)",
    "info" : "IfStatement[357212-357272]:IfStatement[357242-357302]"
  }, {
    "left" : "recorder.line(x1, y1, z1, x2, y2, z2);",
    "right" : "recorder.line(x1, y1, z1, x2, y2, z2);",
    "info" : "ExpressionStatement[357234-357272]:ExpressionStatement[357264-357302]"
  }, {
    "left" : "g.line(x1, y1, z1, x2, y2, z2);",
    "right" : "g.line(x1, y1, z1, x2, y2, z2);",
    "info" : "ExpressionStatement[357277-357308]:ExpressionStatement[357307-357338]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[357988-357994]:Modifier[358018-358024]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[357995-357999]:PrimitiveType[358025-358029]"
  }, {
    "left" : "float x1",
    "right" : "float x1",
    "info" : "SingleVariableDeclaration[358009-358017]:SingleVariableDeclaration[358039-358047]"
  }, {
    "left" : "float y1",
    "right" : "float y1",
    "info" : "SingleVariableDeclaration[358019-358027]:SingleVariableDeclaration[358049-358057]"
  }, {
    "left" : "float x2",
    "right" : "float x2",
    "info" : "SingleVariableDeclaration[358029-358037]:SingleVariableDeclaration[358059-358067]"
  }, {
    "left" : "float y2",
    "right" : "float y2",
    "info" : "SingleVariableDeclaration[358039-358047]:SingleVariableDeclaration[358069-358077]"
  }, {
    "left" : "float x3",
    "right" : "float x3",
    "info" : "SingleVariableDeclaration[358072-358080]:SingleVariableDeclaration[358102-358110]"
  }, {
    "left" : "float y3",
    "right" : "float y3",
    "info" : "SingleVariableDeclaration[358082-358090]:SingleVariableDeclaration[358112-358120]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[358092-358206]:Block[358122-358236]"
  }, {
    "left" : "if (recorder != null)",
    "right" : "if (recorder != null)",
    "info" : "IfStatement[358098-358162]:IfStatement[358128-358192]"
  }, {
    "left" : "recorder.triangle(x1, y1, x2, y2, x3, y3);",
    "right" : "recorder.triangle(x1, y1, x2, y2, x3, y3);",
    "info" : "ExpressionStatement[358120-358162]:ExpressionStatement[358150-358192]"
  }, {
    "left" : "g.triangle(x1, y1, x2, y2, x3, y3);",
    "right" : "g.triangle(x1, y1, x2, y2, x3, y3);",
    "info" : "ExpressionStatement[358167-358202]:ExpressionStatement[358197-358232]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[359058-359064]:Modifier[359088-359094]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[359065-359069]:PrimitiveType[359095-359099]"
  }, {
    "left" : "float x1",
    "right" : "float x1",
    "info" : "SingleVariableDeclaration[359075-359083]:SingleVariableDeclaration[359105-359113]"
  }, {
    "left" : "float y1",
    "right" : "float y1",
    "info" : "SingleVariableDeclaration[359085-359093]:SingleVariableDeclaration[359115-359123]"
  }, {
    "left" : "float x2",
    "right" : "float x2",
    "info" : "SingleVariableDeclaration[359095-359103]:SingleVariableDeclaration[359125-359133]"
  }, {
    "left" : "float y2",
    "right" : "float y2",
    "info" : "SingleVariableDeclaration[359105-359113]:SingleVariableDeclaration[359135-359143]"
  }, {
    "left" : "float x3",
    "right" : "float x3",
    "info" : "SingleVariableDeclaration[359134-359142]:SingleVariableDeclaration[359164-359172]"
  }, {
    "left" : "float y3",
    "right" : "float y3",
    "info" : "SingleVariableDeclaration[359144-359152]:SingleVariableDeclaration[359174-359182]"
  }, {
    "left" : "float x4",
    "right" : "float x4",
    "info" : "SingleVariableDeclaration[359154-359162]:SingleVariableDeclaration[359184-359192]"
  }, {
    "left" : "float y4",
    "right" : "float y4",
    "info" : "SingleVariableDeclaration[359164-359172]:SingleVariableDeclaration[359194-359202]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[359174-359296]:Block[359204-359326]"
  }, {
    "left" : "if (recorder != null)",
    "right" : "if (recorder != null)",
    "info" : "IfStatement[359180-359248]:IfStatement[359210-359278]"
  }, {
    "left" : "recorder.quad(x1, y1, x2, y2, x3, y3, x4, y4);",
    "right" : "recorder.quad(x1, y1, x2, y2, x3, y3, x4, y4);",
    "info" : "ExpressionStatement[359202-359248]:ExpressionStatement[359232-359278]"
  }, {
    "left" : "g.quad(x1, y1, x2, y2, x3, y3, x4, y4);",
    "right" : "g.quad(x1, y1, x2, y2, x3, y3, x4, y4);",
    "info" : "ExpressionStatement[359253-359292]:ExpressionStatement[359283-359322]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[360582-360588]:Modifier[360612-360618]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[360589-360593]:PrimitiveType[360619-360623]"
  }, {
    "left" : "int mode",
    "right" : "int mode",
    "info" : "SingleVariableDeclaration[360603-360611]:SingleVariableDeclaration[360633-360641]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[360613-360691]:Block[360643-360721]"
  }, {
    "left" : "if (recorder != null)",
    "right" : "if (recorder != null)",
    "info" : "IfStatement[360619-360665]:IfStatement[360649-360695]"
  }, {
    "left" : "recorder.rectMode(mode);",
    "right" : "recorder.rectMode(mode);",
    "info" : "ExpressionStatement[360641-360665]:ExpressionStatement[360671-360695]"
  }, {
    "left" : "g.rectMode(mode);",
    "right" : "g.rectMode(mode);",
    "info" : "ExpressionStatement[360670-360687]:ExpressionStatement[360700-360717]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[361485-361491]:Modifier[361515-361521]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[361492-361496]:PrimitiveType[361522-361526]"
  }, {
    "left" : "float a",
    "right" : "float a",
    "info" : "SingleVariableDeclaration[361502-361509]:SingleVariableDeclaration[361532-361539]"
  }, {
    "left" : "float b",
    "right" : "float b",
    "info" : "SingleVariableDeclaration[361511-361518]:SingleVariableDeclaration[361541-361548]"
  }, {
    "left" : "float c",
    "right" : "float c",
    "info" : "SingleVariableDeclaration[361520-361527]:SingleVariableDeclaration[361550-361557]"
  }, {
    "left" : "float d",
    "right" : "float d",
    "info" : "SingleVariableDeclaration[361529-361536]:SingleVariableDeclaration[361559-361566]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[361538-361620]:Block[361568-361650]"
  }, {
    "left" : "if (recorder != null)",
    "right" : "if (recorder != null)",
    "info" : "IfStatement[361544-361592]:IfStatement[361574-361622]"
  }, {
    "left" : "recorder.rect(a, b, c, d);",
    "right" : "recorder.rect(a, b, c, d);",
    "info" : "ExpressionStatement[361566-361592]:ExpressionStatement[361596-361622]"
  }, {
    "left" : "g.rect(a, b, c, d);",
    "right" : "g.rect(a, b, c, d);",
    "info" : "ExpressionStatement[361597-361616]:ExpressionStatement[361627-361646]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[361678-361684]:Modifier[361708-361714]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[361685-361689]:PrimitiveType[361715-361719]"
  }, {
    "left" : "float a",
    "right" : "float a",
    "info" : "SingleVariableDeclaration[361695-361702]:SingleVariableDeclaration[361725-361732]"
  }, {
    "left" : "float b",
    "right" : "float b",
    "info" : "SingleVariableDeclaration[361704-361711]:SingleVariableDeclaration[361734-361741]"
  }, {
    "left" : "float c",
    "right" : "float c",
    "info" : "SingleVariableDeclaration[361713-361720]:SingleVariableDeclaration[361743-361750]"
  }, {
    "left" : "float d",
    "right" : "float d",
    "info" : "SingleVariableDeclaration[361722-361729]:SingleVariableDeclaration[361752-361759]"
  }, {
    "left" : "float r",
    "right" : "float r",
    "info" : "SingleVariableDeclaration[361731-361738]:SingleVariableDeclaration[361761-361768]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[361740-361828]:Block[361770-361858]"
  }, {
    "left" : "if (recorder != null)",
    "right" : "if (recorder != null)",
    "info" : "IfStatement[361746-361797]:IfStatement[361776-361827]"
  }, {
    "left" : "recorder.rect(a, b, c, d, r);",
    "right" : "recorder.rect(a, b, c, d, r);",
    "info" : "ExpressionStatement[361768-361797]:ExpressionStatement[361798-361827]"
  }, {
    "left" : "g.rect(a, b, c, d, r);",
    "right" : "g.rect(a, b, c, d, r);",
    "info" : "ExpressionStatement[361802-361824]:ExpressionStatement[361832-361854]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[362021-362027]:Modifier[362051-362057]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[362028-362032]:PrimitiveType[362058-362062]"
  }, {
    "left" : "float a",
    "right" : "float a",
    "info" : "SingleVariableDeclaration[362038-362045]:SingleVariableDeclaration[362068-362075]"
  }, {
    "left" : "float b",
    "right" : "float b",
    "info" : "SingleVariableDeclaration[362047-362054]:SingleVariableDeclaration[362077-362084]"
  }, {
    "left" : "float c",
    "right" : "float c",
    "info" : "SingleVariableDeclaration[362056-362063]:SingleVariableDeclaration[362086-362093]"
  }, {
    "left" : "float d",
    "right" : "float d",
    "info" : "SingleVariableDeclaration[362065-362072]:SingleVariableDeclaration[362095-362102]"
  }, {
    "left" : "float tl",
    "right" : "float tl",
    "info" : "SingleVariableDeclaration[362093-362101]:SingleVariableDeclaration[362123-362131]"
  }, {
    "left" : "float tr",
    "right" : "float tr",
    "info" : "SingleVariableDeclaration[362103-362111]:SingleVariableDeclaration[362133-362141]"
  }, {
    "left" : "float br",
    "right" : "float br",
    "info" : "SingleVariableDeclaration[362113-362121]:SingleVariableDeclaration[362143-362151]"
  }, {
    "left" : "float bl",
    "right" : "float bl",
    "info" : "SingleVariableDeclaration[362123-362131]:SingleVariableDeclaration[362153-362161]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[362133-362247]:Block[362163-362277]"
  }, {
    "left" : "if (recorder != null)",
    "right" : "if (recorder != null)",
    "info" : "IfStatement[362139-362203]:IfStatement[362169-362233]"
  }, {
    "left" : "recorder.rect(a, b, c, d, tl, tr, br, bl);",
    "right" : "recorder.rect(a, b, c, d, tl, tr, br, bl);",
    "info" : "ExpressionStatement[362161-362203]:ExpressionStatement[362191-362233]"
  }, {
    "left" : "g.rect(a, b, c, d, tl, tr, br, bl);",
    "right" : "g.rect(a, b, c, d, tl, tr, br, bl);",
    "info" : "ExpressionStatement[362208-362243]:ExpressionStatement[362238-362273]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[363274-363280]:Modifier[363304-363310]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[363281-363285]:PrimitiveType[363311-363315]"
  }, {
    "left" : "int mode",
    "right" : "int mode",
    "info" : "SingleVariableDeclaration[363298-363306]:SingleVariableDeclaration[363328-363336]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[363308-363392]:Block[363338-363422]"
  }, {
    "left" : "if (recorder != null)",
    "right" : "if (recorder != null)",
    "info" : "IfStatement[363314-363363]:IfStatement[363344-363393]"
  }, {
    "left" : "recorder.ellipseMode(mode);",
    "right" : "recorder.ellipseMode(mode);",
    "info" : "ExpressionStatement[363336-363363]:ExpressionStatement[363366-363393]"
  }, {
    "left" : "g.ellipseMode(mode);",
    "right" : "g.ellipseMode(mode);",
    "info" : "ExpressionStatement[363368-363388]:ExpressionStatement[363398-363418]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[364106-364112]:Modifier[364136-364142]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[364113-364117]:PrimitiveType[364143-364147]"
  }, {
    "left" : "float a",
    "right" : "float a",
    "info" : "SingleVariableDeclaration[364126-364133]:SingleVariableDeclaration[364156-364163]"
  }, {
    "left" : "float b",
    "right" : "float b",
    "info" : "SingleVariableDeclaration[364135-364142]:SingleVariableDeclaration[364165-364172]"
  }, {
    "left" : "float c",
    "right" : "float c",
    "info" : "SingleVariableDeclaration[364144-364151]:SingleVariableDeclaration[364174-364181]"
  }, {
    "left" : "float d",
    "right" : "float d",
    "info" : "SingleVariableDeclaration[364153-364160]:SingleVariableDeclaration[364183-364190]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[364162-364250]:Block[364192-364280]"
  }, {
    "left" : "if (recorder != null)",
    "right" : "if (recorder != null)",
    "info" : "IfStatement[364168-364219]:IfStatement[364198-364249]"
  }, {
    "left" : "recorder.ellipse(a, b, c, d);",
    "right" : "recorder.ellipse(a, b, c, d);",
    "info" : "ExpressionStatement[364190-364219]:ExpressionStatement[364220-364249]"
  }, {
    "left" : "g.ellipse(a, b, c, d);",
    "right" : "g.ellipse(a, b, c, d);",
    "info" : "ExpressionStatement[364224-364246]:ExpressionStatement[364254-364276]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[365226-365232]:Modifier[365256-365262]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[365233-365237]:PrimitiveType[365263-365267]"
  }, {
    "left" : "float a",
    "right" : "float a",
    "info" : "SingleVariableDeclaration[365242-365249]:SingleVariableDeclaration[365272-365279]"
  }, {
    "left" : "float b",
    "right" : "float b",
    "info" : "SingleVariableDeclaration[365251-365258]:SingleVariableDeclaration[365281-365288]"
  }, {
    "left" : "float c",
    "right" : "float c",
    "info" : "SingleVariableDeclaration[365260-365267]:SingleVariableDeclaration[365290-365297]"
  }, {
    "left" : "float d",
    "right" : "float d",
    "info" : "SingleVariableDeclaration[365269-365276]:SingleVariableDeclaration[365299-365306]"
  }, {
    "left" : "float start",
    "right" : "float start",
    "info" : "SingleVariableDeclaration[365296-365307]:SingleVariableDeclaration[365326-365337]"
  }, {
    "left" : "float stop",
    "right" : "float stop",
    "info" : "SingleVariableDeclaration[365309-365319]:SingleVariableDeclaration[365339-365349]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[365321-365427]:Block[365351-365457]"
  }, {
    "left" : "if (recorder != null)",
    "right" : "if (recorder != null)",
    "info" : "IfStatement[365327-365387]:IfStatement[365357-365417]"
  }, {
    "left" : "recorder.arc(a, b, c, d, start, stop);",
    "right" : "recorder.arc(a, b, c, d, start, stop);",
    "info" : "ExpressionStatement[365349-365387]:ExpressionStatement[365379-365417]"
  }, {
    "left" : "g.arc(a, b, c, d, start, stop);",
    "right" : "g.arc(a, b, c, d, start, stop);",
    "info" : "ExpressionStatement[365392-365423]:ExpressionStatement[365422-365453]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[365487-365493]:Modifier[365517-365523]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[365494-365498]:PrimitiveType[365524-365528]"
  }, {
    "left" : "float a",
    "right" : "float a",
    "info" : "SingleVariableDeclaration[365503-365510]:SingleVariableDeclaration[365533-365540]"
  }, {
    "left" : "float b",
    "right" : "float b",
    "info" : "SingleVariableDeclaration[365512-365519]:SingleVariableDeclaration[365542-365549]"
  }, {
    "left" : "float c",
    "right" : "float c",
    "info" : "SingleVariableDeclaration[365521-365528]:SingleVariableDeclaration[365551-365558]"
  }, {
    "left" : "float d",
    "right" : "float d",
    "info" : "SingleVariableDeclaration[365530-365537]:SingleVariableDeclaration[365560-365567]"
  }, {
    "left" : "float start",
    "right" : "float start",
    "info" : "SingleVariableDeclaration[365557-365568]:SingleVariableDeclaration[365587-365598]"
  }, {
    "left" : "float stop",
    "right" : "float stop",
    "info" : "SingleVariableDeclaration[365570-365580]:SingleVariableDeclaration[365600-365610]"
  }, {
    "left" : "int mode",
    "right" : "int mode",
    "info" : "SingleVariableDeclaration[365582-365590]:SingleVariableDeclaration[365612-365620]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[365592-365710]:Block[365622-365740]"
  }, {
    "left" : "if (recorder != null)",
    "right" : "if (recorder != null)",
    "info" : "IfStatement[365598-365664]:IfStatement[365628-365694]"
  }, {
    "left" : "recorder.arc(a, b, c, d, start, stop, mode);",
    "right" : "recorder.arc(a, b, c, d, start, stop, mode);",
    "info" : "ExpressionStatement[365620-365664]:ExpressionStatement[365650-365694]"
  }, {
    "left" : "g.arc(a, b, c, d, start, stop, mode);",
    "right" : "g.arc(a, b, c, d, start, stop, mode);",
    "info" : "ExpressionStatement[365669-365706]:ExpressionStatement[365699-365736]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[366046-366052]:Modifier[366076-366082]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[366053-366057]:PrimitiveType[366083-366087]"
  }, {
    "left" : "float size",
    "right" : "float size",
    "info" : "SingleVariableDeclaration[366062-366072]:SingleVariableDeclaration[366092-366102]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[366074-366142]:Block[366104-366172]"
  }, {
    "left" : "if (recorder != null)",
    "right" : "if (recorder != null)",
    "info" : "IfStatement[366080-366121]:IfStatement[366110-366151]"
  }, {
    "left" : "recorder.box(size);",
    "right" : "recorder.box(size);",
    "info" : "ExpressionStatement[366102-366121]:ExpressionStatement[366132-366151]"
  }, {
    "left" : "g.box(size);",
    "right" : "g.box(size);",
    "info" : "ExpressionStatement[366126-366138]:ExpressionStatement[366156-366168]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[366321-366327]:Modifier[366351-366357]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[366328-366332]:PrimitiveType[366358-366362]"
  }, {
    "left" : "float w",
    "right" : "float w",
    "info" : "SingleVariableDeclaration[366337-366344]:SingleVariableDeclaration[366367-366374]"
  }, {
    "left" : "float h",
    "right" : "float h",
    "info" : "SingleVariableDeclaration[366346-366353]:SingleVariableDeclaration[366376-366383]"
  }, {
    "left" : "float d",
    "right" : "float d",
    "info" : "SingleVariableDeclaration[366355-366362]:SingleVariableDeclaration[366385-366392]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[366364-366438]:Block[366394-366468]"
  }, {
    "left" : "if (recorder != null)",
    "right" : "if (recorder != null)",
    "info" : "IfStatement[366370-366414]:IfStatement[366400-366444]"
  }, {
    "left" : "recorder.box(w, h, d);",
    "right" : "recorder.box(w, h, d);",
    "info" : "ExpressionStatement[366392-366414]:ExpressionStatement[366422-366444]"
  }, {
    "left" : "g.box(w, h, d);",
    "right" : "g.box(w, h, d);",
    "info" : "ExpressionStatement[366419-366434]:ExpressionStatement[366449-366464]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[367687-367693]:Modifier[367717-367723]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[367694-367698]:PrimitiveType[367724-367728]"
  }, {
    "left" : "int res",
    "right" : "int res",
    "info" : "SingleVariableDeclaration[367712-367719]:SingleVariableDeclaration[367742-367749]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[367721-367805]:Block[367751-367835]"
  }, {
    "left" : "if (recorder != null)",
    "right" : "if (recorder != null)",
    "info" : "IfStatement[367727-367776]:IfStatement[367757-367806]"
  }, {
    "left" : "recorder.sphereDetail(res);",
    "right" : "recorder.sphereDetail(res);",
    "info" : "ExpressionStatement[367749-367776]:ExpressionStatement[367779-367806]"
  }, {
    "left" : "g.sphereDetail(res);",
    "right" : "g.sphereDetail(res);",
    "info" : "ExpressionStatement[367781-367801]:ExpressionStatement[367811-367831]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[367979-367985]:Modifier[368009-368015]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[367986-367990]:PrimitiveType[368016-368020]"
  }, {
    "left" : "int ures",
    "right" : "int ures",
    "info" : "SingleVariableDeclaration[368004-368012]:SingleVariableDeclaration[368034-368042]"
  }, {
    "left" : "int vres",
    "right" : "int vres",
    "info" : "SingleVariableDeclaration[368014-368022]:SingleVariableDeclaration[368044-368052]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[368024-368122]:Block[368054-368152]"
  }, {
    "left" : "if (recorder != null)",
    "right" : "if (recorder != null)",
    "info" : "IfStatement[368030-368086]:IfStatement[368060-368116]"
  }, {
    "left" : "recorder.sphereDetail(ures, vres);",
    "right" : "recorder.sphereDetail(ures, vres);",
    "info" : "ExpressionStatement[368052-368086]:ExpressionStatement[368082-368116]"
  }, {
    "left" : "g.sphereDetail(ures, vres);",
    "right" : "g.sphereDetail(ures, vres);",
    "info" : "ExpressionStatement[368091-368118]:ExpressionStatement[368121-368148]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[369107-369113]:Modifier[369137-369143]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[369114-369118]:PrimitiveType[369144-369148]"
  }, {
    "left" : "float r",
    "right" : "float r",
    "info" : "SingleVariableDeclaration[369126-369133]:SingleVariableDeclaration[369156-369163]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[369135-369203]:Block[369165-369233]"
  }, {
    "left" : "if (recorder != null)",
    "right" : "if (recorder != null)",
    "info" : "IfStatement[369141-369182]:IfStatement[369171-369212]"
  }, {
    "left" : "recorder.sphere(r);",
    "right" : "recorder.sphere(r);",
    "info" : "ExpressionStatement[369163-369182]:ExpressionStatement[369193-369212]"
  }, {
    "left" : "g.sphere(r);",
    "right" : "g.sphere(r);",
    "info" : "ExpressionStatement[369187-369199]:ExpressionStatement[369217-369229]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[370833-370839]:Modifier[370863-370869]"
  }, {
    "left" : "float",
    "right" : "float",
    "info" : "PrimitiveType[370840-370845]:PrimitiveType[370870-370875]"
  }, {
    "left" : "float a",
    "right" : "float a",
    "info" : "SingleVariableDeclaration[370858-370865]:SingleVariableDeclaration[370888-370895]"
  }, {
    "left" : "float b",
    "right" : "float b",
    "info" : "SingleVariableDeclaration[370867-370874]:SingleVariableDeclaration[370897-370904]"
  }, {
    "left" : "float c",
    "right" : "float c",
    "info" : "SingleVariableDeclaration[370876-370883]:SingleVariableDeclaration[370906-370913]"
  }, {
    "left" : "float d",
    "right" : "float d",
    "info" : "SingleVariableDeclaration[370885-370892]:SingleVariableDeclaration[370915-370922]"
  }, {
    "left" : "float t",
    "right" : "float t",
    "info" : "SingleVariableDeclaration[370894-370901]:SingleVariableDeclaration[370924-370931]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[370903-370949]:Block[370933-370979]"
  }, {
    "left" : "return g.bezierPoint(a, b, c, d, t);",
    "right" : "return g.bezierPoint(a, b, c, d, t);",
    "info" : "ReturnStatement[370909-370945]:ReturnStatement[370939-370975]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[371865-371871]:Modifier[371895-371901]"
  }, {
    "left" : "float",
    "right" : "float",
    "info" : "PrimitiveType[371872-371877]:PrimitiveType[371902-371907]"
  }, {
    "left" : "float a",
    "right" : "float a",
    "info" : "SingleVariableDeclaration[371892-371899]:SingleVariableDeclaration[371922-371929]"
  }, {
    "left" : "float b",
    "right" : "float b",
    "info" : "SingleVariableDeclaration[371901-371908]:SingleVariableDeclaration[371931-371938]"
  }, {
    "left" : "float c",
    "right" : "float c",
    "info" : "SingleVariableDeclaration[371910-371917]:SingleVariableDeclaration[371940-371947]"
  }, {
    "left" : "float d",
    "right" : "float d",
    "info" : "SingleVariableDeclaration[371919-371926]:SingleVariableDeclaration[371949-371956]"
  }, {
    "left" : "float t",
    "right" : "float t",
    "info" : "SingleVariableDeclaration[371928-371935]:SingleVariableDeclaration[371958-371965]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[371937-371985]:Block[371967-372015]"
  }, {
    "left" : "return g.bezierTangent(a, b, c, d, t);",
    "right" : "return g.bezierTangent(a, b, c, d, t);",
    "info" : "ReturnStatement[371943-371981]:ReturnStatement[371973-372011]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[372574-372580]:Modifier[372604-372610]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[372581-372585]:PrimitiveType[372611-372615]"
  }, {
    "left" : "int detail",
    "right" : "int detail",
    "info" : "SingleVariableDeclaration[372599-372609]:SingleVariableDeclaration[372629-372639]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[372611-372701]:Block[372641-372731]"
  }, {
    "left" : "if (recorder != null)",
    "right" : "if (recorder != null)",
    "info" : "IfStatement[372617-372669]:IfStatement[372647-372699]"
  }, {
    "left" : "recorder.bezierDetail(detail);",
    "right" : "recorder.bezierDetail(detail);",
    "info" : "ExpressionStatement[372639-372669]:ExpressionStatement[372669-372699]"
  }, {
    "left" : "g.bezierDetail(detail);",
    "right" : "g.bezierDetail(detail);",
    "info" : "ExpressionStatement[372674-372697]:ExpressionStatement[372704-372727]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[372706-372712]:Modifier[372736-372742]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[372713-372717]:PrimitiveType[372743-372747]"
  }, {
    "left" : "float x1",
    "right" : "float x1",
    "info" : "SingleVariableDeclaration[372725-372733]:SingleVariableDeclaration[372755-372763]"
  }, {
    "left" : "float y1",
    "right" : "float y1",
    "info" : "SingleVariableDeclaration[372735-372743]:SingleVariableDeclaration[372765-372773]"
  }, {
    "left" : "float x2",
    "right" : "float x2",
    "info" : "SingleVariableDeclaration[372766-372774]:SingleVariableDeclaration[372796-372804]"
  }, {
    "left" : "float y2",
    "right" : "float y2",
    "info" : "SingleVariableDeclaration[372776-372784]:SingleVariableDeclaration[372806-372814]"
  }, {
    "left" : "float x3",
    "right" : "float x3",
    "info" : "SingleVariableDeclaration[372807-372815]:SingleVariableDeclaration[372837-372845]"
  }, {
    "left" : "float y3",
    "right" : "float y3",
    "info" : "SingleVariableDeclaration[372817-372825]:SingleVariableDeclaration[372847-372855]"
  }, {
    "left" : "float x4",
    "right" : "float x4",
    "info" : "SingleVariableDeclaration[372848-372856]:SingleVariableDeclaration[372878-372886]"
  }, {
    "left" : "float y4",
    "right" : "float y4",
    "info" : "SingleVariableDeclaration[372858-372866]:SingleVariableDeclaration[372888-372896]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[372868-372994]:Block[372898-373024]"
  }, {
    "left" : "if (recorder != null)",
    "right" : "if (recorder != null)",
    "info" : "IfStatement[372874-372944]:IfStatement[372904-372974]"
  }, {
    "left" : "recorder.bezier(x1, y1, x2, y2, x3, y3, x4, y4);",
    "right" : "recorder.bezier(x1, y1, x2, y2, x3, y3, x4, y4);",
    "info" : "ExpressionStatement[372896-372944]:ExpressionStatement[372926-372974]"
  }, {
    "left" : "g.bezier(x1, y1, x2, y2, x3, y3, x4, y4);",
    "right" : "g.bezier(x1, y1, x2, y2, x3, y3, x4, y4);",
    "info" : "ExpressionStatement[372949-372990]:ExpressionStatement[372979-373020]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[375343-375349]:Modifier[375373-375379]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[375350-375354]:PrimitiveType[375380-375384]"
  }, {
    "left" : "float x1",
    "right" : "float x1",
    "info" : "SingleVariableDeclaration[375362-375370]:SingleVariableDeclaration[375392-375400]"
  }, {
    "left" : "float y1",
    "right" : "float y1",
    "info" : "SingleVariableDeclaration[375372-375380]:SingleVariableDeclaration[375402-375410]"
  }, {
    "left" : "float z1",
    "right" : "float z1",
    "info" : "SingleVariableDeclaration[375382-375390]:SingleVariableDeclaration[375412-375420]"
  }, {
    "left" : "float x2",
    "right" : "float x2",
    "info" : "SingleVariableDeclaration[375413-375421]:SingleVariableDeclaration[375443-375451]"
  }, {
    "left" : "float y2",
    "right" : "float y2",
    "info" : "SingleVariableDeclaration[375423-375431]:SingleVariableDeclaration[375453-375461]"
  }, {
    "left" : "float z2",
    "right" : "float z2",
    "info" : "SingleVariableDeclaration[375433-375441]:SingleVariableDeclaration[375463-375471]"
  }, {
    "left" : "float x3",
    "right" : "float x3",
    "info" : "SingleVariableDeclaration[375464-375472]:SingleVariableDeclaration[375494-375502]"
  }, {
    "left" : "float y3",
    "right" : "float y3",
    "info" : "SingleVariableDeclaration[375474-375482]:SingleVariableDeclaration[375504-375512]"
  }, {
    "left" : "float z3",
    "right" : "float z3",
    "info" : "SingleVariableDeclaration[375484-375492]:SingleVariableDeclaration[375514-375522]"
  }, {
    "left" : "float x4",
    "right" : "float x4",
    "info" : "SingleVariableDeclaration[375515-375523]:SingleVariableDeclaration[375545-375553]"
  }, {
    "left" : "float y4",
    "right" : "float y4",
    "info" : "SingleVariableDeclaration[375525-375533]:SingleVariableDeclaration[375555-375563]"
  }, {
    "left" : "float z4",
    "right" : "float z4",
    "info" : "SingleVariableDeclaration[375535-375543]:SingleVariableDeclaration[375565-375573]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[375545-375703]:Block[375575-375733]"
  }, {
    "left" : "if (recorder != null)",
    "right" : "if (recorder != null)",
    "info" : "IfStatement[375551-375637]:IfStatement[375581-375667]"
  }, {
    "left" : "recorder.bezier(x1, y1, z1, x2, y2, z2, x3, y3, z3, x4, y4, z4);",
    "right" : "recorder.bezier(x1, y1, z1, x2, y2, z2, x3, y3, z3, x4, y4, z4);",
    "info" : "ExpressionStatement[375573-375637]:ExpressionStatement[375603-375667]"
  }, {
    "left" : "g.bezier(x1, y1, z1, x2, y2, z2, x3, y3, z3, x4, y4, z4);",
    "right" : "g.bezier(x1, y1, z1, x2, y2, z2, x3, y3, z3, x4, y4, z4);",
    "info" : "ExpressionStatement[375642-375699]:ExpressionStatement[375672-375729]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[376617-376623]:Modifier[376647-376653]"
  }, {
    "left" : "float",
    "right" : "float",
    "info" : "PrimitiveType[376624-376629]:PrimitiveType[376654-376659]"
  }, {
    "left" : "float a",
    "right" : "float a",
    "info" : "SingleVariableDeclaration[376641-376648]:SingleVariableDeclaration[376671-376678]"
  }, {
    "left" : "float b",
    "right" : "float b",
    "info" : "SingleVariableDeclaration[376650-376657]:SingleVariableDeclaration[376680-376687]"
  }, {
    "left" : "float c",
    "right" : "float c",
    "info" : "SingleVariableDeclaration[376659-376666]:SingleVariableDeclaration[376689-376696]"
  }, {
    "left" : "float d",
    "right" : "float d",
    "info" : "SingleVariableDeclaration[376668-376675]:SingleVariableDeclaration[376698-376705]"
  }, {
    "left" : "float t",
    "right" : "float t",
    "info" : "SingleVariableDeclaration[376677-376684]:SingleVariableDeclaration[376707-376714]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[376686-376731]:Block[376716-376761]"
  }, {
    "left" : "return g.curvePoint(a, b, c, d, t);",
    "right" : "return g.curvePoint(a, b, c, d, t);",
    "info" : "ReturnStatement[376692-376727]:ReturnStatement[376722-376757]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[377659-377665]:Modifier[377689-377695]"
  }, {
    "left" : "float",
    "right" : "float",
    "info" : "PrimitiveType[377666-377671]:PrimitiveType[377696-377701]"
  }, {
    "left" : "float a",
    "right" : "float a",
    "info" : "SingleVariableDeclaration[377685-377692]:SingleVariableDeclaration[377715-377722]"
  }, {
    "left" : "float b",
    "right" : "float b",
    "info" : "SingleVariableDeclaration[377694-377701]:SingleVariableDeclaration[377724-377731]"
  }, {
    "left" : "float c",
    "right" : "float c",
    "info" : "SingleVariableDeclaration[377703-377710]:SingleVariableDeclaration[377733-377740]"
  }, {
    "left" : "float d",
    "right" : "float d",
    "info" : "SingleVariableDeclaration[377712-377719]:SingleVariableDeclaration[377742-377749]"
  }, {
    "left" : "float t",
    "right" : "float t",
    "info" : "SingleVariableDeclaration[377721-377728]:SingleVariableDeclaration[377751-377758]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[377730-377777]:Block[377760-377807]"
  }, {
    "left" : "return g.curveTangent(a, b, c, d, t);",
    "right" : "return g.curveTangent(a, b, c, d, t);",
    "info" : "ReturnStatement[377736-377773]:ReturnStatement[377766-377803]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[378357-378363]:Modifier[378387-378393]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[378364-378368]:PrimitiveType[378394-378398]"
  }, {
    "left" : "int detail",
    "right" : "int detail",
    "info" : "SingleVariableDeclaration[378381-378391]:SingleVariableDeclaration[378411-378421]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[378393-378481]:Block[378423-378511]"
  }, {
    "left" : "if (recorder != null)",
    "right" : "if (recorder != null)",
    "info" : "IfStatement[378399-378450]:IfStatement[378429-378480]"
  }, {
    "left" : "recorder.curveDetail(detail);",
    "right" : "recorder.curveDetail(detail);",
    "info" : "ExpressionStatement[378421-378450]:ExpressionStatement[378451-378480]"
  }, {
    "left" : "g.curveDetail(detail);",
    "right" : "g.curveDetail(detail);",
    "info" : "ExpressionStatement[378455-378477]:ExpressionStatement[378485-378507]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[379383-379389]:Modifier[379413-379419]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[379390-379394]:PrimitiveType[379420-379424]"
  }, {
    "left" : "float tightness",
    "right" : "float tightness",
    "info" : "SingleVariableDeclaration[379410-379425]:SingleVariableDeclaration[379440-379455]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[379427-379527]:Block[379457-379557]"
  }, {
    "left" : "if (recorder != null)",
    "right" : "if (recorder != null)",
    "info" : "IfStatement[379433-379490]:IfStatement[379463-379520]"
  }, {
    "left" : "recorder.curveTightness(tightness);",
    "right" : "recorder.curveTightness(tightness);",
    "info" : "ExpressionStatement[379455-379490]:ExpressionStatement[379485-379520]"
  }, {
    "left" : "g.curveTightness(tightness);",
    "right" : "g.curveTightness(tightness);",
    "info" : "ExpressionStatement[379495-379523]:ExpressionStatement[379525-379553]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[381381-381387]:Modifier[381411-381417]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[381388-381392]:PrimitiveType[381418-381422]"
  }, {
    "left" : "float x1",
    "right" : "float x1",
    "info" : "SingleVariableDeclaration[381399-381407]:SingleVariableDeclaration[381429-381437]"
  }, {
    "left" : "float y1",
    "right" : "float y1",
    "info" : "SingleVariableDeclaration[381409-381417]:SingleVariableDeclaration[381439-381447]"
  }, {
    "left" : "float x2",
    "right" : "float x2",
    "info" : "SingleVariableDeclaration[381439-381447]:SingleVariableDeclaration[381469-381477]"
  }, {
    "left" : "float y2",
    "right" : "float y2",
    "info" : "SingleVariableDeclaration[381449-381457]:SingleVariableDeclaration[381479-381487]"
  }, {
    "left" : "float x3",
    "right" : "float x3",
    "info" : "SingleVariableDeclaration[381479-381487]:SingleVariableDeclaration[381509-381517]"
  }, {
    "left" : "float y3",
    "right" : "float y3",
    "info" : "SingleVariableDeclaration[381489-381497]:SingleVariableDeclaration[381519-381527]"
  }, {
    "left" : "float x4",
    "right" : "float x4",
    "info" : "SingleVariableDeclaration[381519-381527]:SingleVariableDeclaration[381549-381557]"
  }, {
    "left" : "float y4",
    "right" : "float y4",
    "info" : "SingleVariableDeclaration[381529-381537]:SingleVariableDeclaration[381559-381567]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[381539-381663]:Block[381569-381693]"
  }, {
    "left" : "if (recorder != null)",
    "right" : "if (recorder != null)",
    "info" : "IfStatement[381545-381614]:IfStatement[381575-381644]"
  }, {
    "left" : "recorder.curve(x1, y1, x2, y2, x3, y3, x4, y4);",
    "right" : "recorder.curve(x1, y1, x2, y2, x3, y3, x4, y4);",
    "info" : "ExpressionStatement[381567-381614]:ExpressionStatement[381597-381644]"
  }, {
    "left" : "g.curve(x1, y1, x2, y2, x3, y3, x4, y4);",
    "right" : "g.curve(x1, y1, x2, y2, x3, y3, x4, y4);",
    "info" : "ExpressionStatement[381619-381659]:ExpressionStatement[381649-381689]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[381896-381902]:Modifier[381926-381932]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[381903-381907]:PrimitiveType[381933-381937]"
  }, {
    "left" : "float x1",
    "right" : "float x1",
    "info" : "SingleVariableDeclaration[381914-381922]:SingleVariableDeclaration[381944-381952]"
  }, {
    "left" : "float y1",
    "right" : "float y1",
    "info" : "SingleVariableDeclaration[381924-381932]:SingleVariableDeclaration[381954-381962]"
  }, {
    "left" : "float z1",
    "right" : "float z1",
    "info" : "SingleVariableDeclaration[381934-381942]:SingleVariableDeclaration[381964-381972]"
  }, {
    "left" : "float x2",
    "right" : "float x2",
    "info" : "SingleVariableDeclaration[381964-381972]:SingleVariableDeclaration[381994-382002]"
  }, {
    "left" : "float y2",
    "right" : "float y2",
    "info" : "SingleVariableDeclaration[381974-381982]:SingleVariableDeclaration[382004-382012]"
  }, {
    "left" : "float z2",
    "right" : "float z2",
    "info" : "SingleVariableDeclaration[381984-381992]:SingleVariableDeclaration[382014-382022]"
  }, {
    "left" : "float x3",
    "right" : "float x3",
    "info" : "SingleVariableDeclaration[382014-382022]:SingleVariableDeclaration[382044-382052]"
  }, {
    "left" : "float y3",
    "right" : "float y3",
    "info" : "SingleVariableDeclaration[382024-382032]:SingleVariableDeclaration[382054-382062]"
  }, {
    "left" : "float z3",
    "right" : "float z3",
    "info" : "SingleVariableDeclaration[382034-382042]:SingleVariableDeclaration[382064-382072]"
  }, {
    "left" : "float x4",
    "right" : "float x4",
    "info" : "SingleVariableDeclaration[382064-382072]:SingleVariableDeclaration[382094-382102]"
  }, {
    "left" : "float y4",
    "right" : "float y4",
    "info" : "SingleVariableDeclaration[382074-382082]:SingleVariableDeclaration[382104-382112]"
  }, {
    "left" : "float z4",
    "right" : "float z4",
    "info" : "SingleVariableDeclaration[382084-382092]:SingleVariableDeclaration[382114-382122]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[382094-382250]:Block[382124-382280]"
  }, {
    "left" : "if (recorder != null)",
    "right" : "if (recorder != null)",
    "info" : "IfStatement[382100-382185]:IfStatement[382130-382215]"
  }, {
    "left" : "recorder.curve(x1, y1, z1, x2, y2, z2, x3, y3, z3, x4, y4, z4);",
    "right" : "recorder.curve(x1, y1, z1, x2, y2, z2, x3, y3, z3, x4, y4, z4);",
    "info" : "ExpressionStatement[382122-382185]:ExpressionStatement[382152-382215]"
  }, {
    "left" : "g.curve(x1, y1, z1, x2, y2, z2, x3, y3, z3, x4, y4, z4);",
    "right" : "g.curve(x1, y1, z1, x2, y2, z2, x3, y3, z3, x4, y4, z4);",
    "info" : "ExpressionStatement[382190-382246]:ExpressionStatement[382220-382276]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[383353-383359]:Modifier[383383-383389]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[383360-383364]:PrimitiveType[383390-383394]"
  }, {
    "left" : "int mode",
    "right" : "int mode",
    "info" : "SingleVariableDeclaration[383375-383383]:SingleVariableDeclaration[383405-383413]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[383385-383465]:Block[383415-383495]"
  }, {
    "left" : "if (recorder != null)",
    "right" : "if (recorder != null)",
    "info" : "IfStatement[383391-383438]:IfStatement[383421-383468]"
  }, {
    "left" : "recorder.imageMode(mode);",
    "right" : "recorder.imageMode(mode);",
    "info" : "ExpressionStatement[383413-383438]:ExpressionStatement[383443-383468]"
  }, {
    "left" : "g.imageMode(mode);",
    "right" : "g.imageMode(mode);",
    "info" : "ExpressionStatement[383443-383461]:ExpressionStatement[383473-383491]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[385101-385107]:Modifier[385131-385137]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[385108-385112]:PrimitiveType[385138-385142]"
  }, {
    "left" : "PImage img",
    "right" : "PImage img",
    "info" : "SingleVariableDeclaration[385119-385129]:SingleVariableDeclaration[385149-385159]"
  }, {
    "left" : "float a",
    "right" : "float a",
    "info" : "SingleVariableDeclaration[385131-385138]:SingleVariableDeclaration[385161-385168]"
  }, {
    "left" : "float b",
    "right" : "float b",
    "info" : "SingleVariableDeclaration[385140-385147]:SingleVariableDeclaration[385170-385177]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[385149-385231]:Block[385179-385261]"
  }, {
    "left" : "if (recorder != null)",
    "right" : "if (recorder != null)",
    "info" : "IfStatement[385155-385203]:IfStatement[385185-385233]"
  }, {
    "left" : "recorder.image(img, a, b);",
    "right" : "recorder.image(img, a, b);",
    "info" : "ExpressionStatement[385177-385203]:ExpressionStatement[385207-385233]"
  }, {
    "left" : "g.image(img, a, b);",
    "right" : "g.image(img, a, b);",
    "info" : "ExpressionStatement[385208-385227]:ExpressionStatement[385238-385257]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[385331-385337]:Modifier[385361-385367]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[385338-385342]:PrimitiveType[385368-385372]"
  }, {
    "left" : "PImage img",
    "right" : "PImage img",
    "info" : "SingleVariableDeclaration[385349-385359]:SingleVariableDeclaration[385379-385389]"
  }, {
    "left" : "float a",
    "right" : "float a",
    "info" : "SingleVariableDeclaration[385361-385368]:SingleVariableDeclaration[385391-385398]"
  }, {
    "left" : "float b",
    "right" : "float b",
    "info" : "SingleVariableDeclaration[385370-385377]:SingleVariableDeclaration[385400-385407]"
  }, {
    "left" : "float c",
    "right" : "float c",
    "info" : "SingleVariableDeclaration[385379-385386]:SingleVariableDeclaration[385409-385416]"
  }, {
    "left" : "float d",
    "right" : "float d",
    "info" : "SingleVariableDeclaration[385388-385395]:SingleVariableDeclaration[385418-385425]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[385397-385491]:Block[385427-385521]"
  }, {
    "left" : "if (recorder != null)",
    "right" : "if (recorder != null)",
    "info" : "IfStatement[385403-385457]:IfStatement[385433-385487]"
  }, {
    "left" : "recorder.image(img, a, b, c, d);",
    "right" : "recorder.image(img, a, b, c, d);",
    "info" : "ExpressionStatement[385425-385457]:ExpressionStatement[385455-385487]"
  }, {
    "left" : "g.image(img, a, b, c, d);",
    "right" : "g.image(img, a, b, c, d);",
    "info" : "ExpressionStatement[385462-385487]:ExpressionStatement[385492-385517]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[385714-385720]:Modifier[385744-385750]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[385721-385725]:PrimitiveType[385751-385755]"
  }, {
    "left" : "PImage img",
    "right" : "PImage img",
    "info" : "SingleVariableDeclaration[385732-385742]:SingleVariableDeclaration[385762-385772]"
  }, {
    "left" : "float a",
    "right" : "float a",
    "info" : "SingleVariableDeclaration[385764-385771]:SingleVariableDeclaration[385794-385801]"
  }, {
    "left" : "float b",
    "right" : "float b",
    "info" : "SingleVariableDeclaration[385773-385780]:SingleVariableDeclaration[385803-385810]"
  }, {
    "left" : "float c",
    "right" : "float c",
    "info" : "SingleVariableDeclaration[385782-385789]:SingleVariableDeclaration[385812-385819]"
  }, {
    "left" : "float d",
    "right" : "float d",
    "info" : "SingleVariableDeclaration[385791-385798]:SingleVariableDeclaration[385821-385828]"
  }, {
    "left" : "int u1",
    "right" : "int u1",
    "info" : "SingleVariableDeclaration[385820-385826]:SingleVariableDeclaration[385850-385856]"
  }, {
    "left" : "int v1",
    "right" : "int v1",
    "info" : "SingleVariableDeclaration[385828-385834]:SingleVariableDeclaration[385858-385864]"
  }, {
    "left" : "int u2",
    "right" : "int u2",
    "info" : "SingleVariableDeclaration[385836-385842]:SingleVariableDeclaration[385866-385872]"
  }, {
    "left" : "int v2",
    "right" : "int v2",
    "info" : "SingleVariableDeclaration[385844-385850]:SingleVariableDeclaration[385874-385880]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[385852-385978]:Block[385882-386008]"
  }, {
    "left" : "if (recorder != null)",
    "right" : "if (recorder != null)",
    "info" : "IfStatement[385858-385928]:IfStatement[385888-385958]"
  }, {
    "left" : "recorder.image(img, a, b, c, d, u1, v1, u2, v2);",
    "right" : "recorder.image(img, a, b, c, d, u1, v1, u2, v2);",
    "info" : "ExpressionStatement[385880-385928]:ExpressionStatement[385910-385958]"
  }, {
    "left" : "g.image(img, a, b, c, d, u1, v1, u2, v2);",
    "right" : "g.image(img, a, b, c, d, u1, v1, u2, v2);",
    "info" : "ExpressionStatement[385933-385974]:ExpressionStatement[385963-386004]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[387020-387026]:Modifier[387050-387056]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[387027-387031]:PrimitiveType[387057-387061]"
  }, {
    "left" : "int mode",
    "right" : "int mode",
    "info" : "SingleVariableDeclaration[387042-387050]:SingleVariableDeclaration[387072-387080]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[387052-387132]:Block[387082-387162]"
  }, {
    "left" : "if (recorder != null)",
    "right" : "if (recorder != null)",
    "info" : "IfStatement[387058-387105]:IfStatement[387088-387135]"
  }, {
    "left" : "recorder.shapeMode(mode);",
    "right" : "recorder.shapeMode(mode);",
    "info" : "ExpressionStatement[387080-387105]:ExpressionStatement[387110-387135]"
  }, {
    "left" : "g.shapeMode(mode);",
    "right" : "g.shapeMode(mode);",
    "info" : "ExpressionStatement[387110-387128]:ExpressionStatement[387140-387158]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[387137-387143]:Modifier[387167-387173]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[387144-387148]:PrimitiveType[387174-387178]"
  }, {
    "left" : "PShape shape",
    "right" : "PShape shape",
    "info" : "SingleVariableDeclaration[387155-387167]:SingleVariableDeclaration[387185-387197]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[387169-387243]:Block[387199-387273]"
  }, {
    "left" : "if (recorder != null)",
    "right" : "if (recorder != null)",
    "info" : "IfStatement[387175-387219]:IfStatement[387205-387249]"
  }, {
    "left" : "recorder.shape(shape);",
    "right" : "recorder.shape(shape);",
    "info" : "ExpressionStatement[387197-387219]:ExpressionStatement[387227-387249]"
  }, {
    "left" : "g.shape(shape);",
    "right" : "g.shape(shape);",
    "info" : "ExpressionStatement[387224-387239]:ExpressionStatement[387254-387269]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[388591-388597]:Modifier[388621-388627]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[388598-388602]:PrimitiveType[388628-388632]"
  }, {
    "left" : "PShape shape",
    "right" : "PShape shape",
    "info" : "SingleVariableDeclaration[388609-388621]:SingleVariableDeclaration[388639-388651]"
  }, {
    "left" : "float x",
    "right" : "float x",
    "info" : "SingleVariableDeclaration[388623-388630]:SingleVariableDeclaration[388653-388660]"
  }, {
    "left" : "float y",
    "right" : "float y",
    "info" : "SingleVariableDeclaration[388632-388639]:SingleVariableDeclaration[388662-388669]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[388641-388727]:Block[388671-388757]"
  }, {
    "left" : "if (recorder != null)",
    "right" : "if (recorder != null)",
    "info" : "IfStatement[388647-388697]:IfStatement[388677-388727]"
  }, {
    "left" : "recorder.shape(shape, x, y);",
    "right" : "recorder.shape(shape, x, y);",
    "info" : "ExpressionStatement[388669-388697]:ExpressionStatement[388699-388727]"
  }, {
    "left" : "g.shape(shape, x, y);",
    "right" : "g.shape(shape, x, y);",
    "info" : "ExpressionStatement[388702-388723]:ExpressionStatement[388732-388753]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[388907-388913]:Modifier[388937-388943]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[388914-388918]:PrimitiveType[388944-388948]"
  }, {
    "left" : "PShape shape",
    "right" : "PShape shape",
    "info" : "SingleVariableDeclaration[388925-388937]:SingleVariableDeclaration[388955-388967]"
  }, {
    "left" : "float a",
    "right" : "float a",
    "info" : "SingleVariableDeclaration[388939-388946]:SingleVariableDeclaration[388969-388976]"
  }, {
    "left" : "float b",
    "right" : "float b",
    "info" : "SingleVariableDeclaration[388948-388955]:SingleVariableDeclaration[388978-388985]"
  }, {
    "left" : "float c",
    "right" : "float c",
    "info" : "SingleVariableDeclaration[388957-388964]:SingleVariableDeclaration[388987-388994]"
  }, {
    "left" : "float d",
    "right" : "float d",
    "info" : "SingleVariableDeclaration[388966-388973]:SingleVariableDeclaration[388996-389003]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[388975-389073]:Block[389005-389103]"
  }, {
    "left" : "if (recorder != null)",
    "right" : "if (recorder != null)",
    "info" : "IfStatement[388981-389037]:IfStatement[389011-389067]"
  }, {
    "left" : "recorder.shape(shape, a, b, c, d);",
    "right" : "recorder.shape(shape, a, b, c, d);",
    "info" : "ExpressionStatement[389003-389037]:ExpressionStatement[389033-389067]"
  }, {
    "left" : "g.shape(shape, a, b, c, d);",
    "right" : "g.shape(shape, a, b, c, d);",
    "info" : "ExpressionStatement[389042-389069]:ExpressionStatement[389072-389099]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[389078-389084]:Modifier[389108-389114]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[389085-389089]:PrimitiveType[389115-389119]"
  }, {
    "left" : "int alignX",
    "right" : "int alignX",
    "info" : "SingleVariableDeclaration[389100-389110]:SingleVariableDeclaration[389130-389140]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[389112-389196]:Block[389142-389226]"
  }, {
    "left" : "if (recorder != null)",
    "right" : "if (recorder != null)",
    "info" : "IfStatement[389118-389167]:IfStatement[389148-389197]"
  }, {
    "left" : "recorder.textAlign(alignX);",
    "right" : "recorder.textAlign(alignX);",
    "info" : "ExpressionStatement[389140-389167]:ExpressionStatement[389170-389197]"
  }, {
    "left" : "g.textAlign(alignX);",
    "right" : "g.textAlign(alignX);",
    "info" : "ExpressionStatement[389172-389192]:ExpressionStatement[389202-389222]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[391175-391181]:Modifier[391205-391211]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[391182-391186]:PrimitiveType[391212-391216]"
  }, {
    "left" : "int alignX",
    "right" : "int alignX",
    "info" : "SingleVariableDeclaration[391197-391207]:SingleVariableDeclaration[391227-391237]"
  }, {
    "left" : "int alignY",
    "right" : "int alignY",
    "info" : "SingleVariableDeclaration[391209-391219]:SingleVariableDeclaration[391239-391249]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[391221-391321]:Block[391251-391351]"
  }, {
    "left" : "if (recorder != null)",
    "right" : "if (recorder != null)",
    "info" : "IfStatement[391227-391284]:IfStatement[391257-391314]"
  }, {
    "left" : "recorder.textAlign(alignX, alignY);",
    "right" : "recorder.textAlign(alignX, alignY);",
    "info" : "ExpressionStatement[391249-391284]:ExpressionStatement[391279-391314]"
  }, {
    "left" : "g.textAlign(alignX, alignY);",
    "right" : "g.textAlign(alignX, alignY);",
    "info" : "ExpressionStatement[391289-391317]:ExpressionStatement[391319-391347]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[391779-391785]:Modifier[391809-391815]"
  }, {
    "left" : "float",
    "right" : "float",
    "info" : "PrimitiveType[391786-391791]:PrimitiveType[391816-391821]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[391805-391837]:Block[391835-391867]"
  }, {
    "left" : "return g.textAscent();",
    "right" : "return g.textAscent();",
    "info" : "ReturnStatement[391811-391833]:ReturnStatement[391841-391863]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[392296-392302]:Modifier[392326-392332]"
  }, {
    "left" : "float",
    "right" : "float",
    "info" : "PrimitiveType[392303-392308]:PrimitiveType[392333-392338]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[392323-392356]:Block[392353-392386]"
  }, {
    "left" : "return g.textDescent();",
    "right" : "return g.textDescent();",
    "info" : "ReturnStatement[392329-392352]:ReturnStatement[392359-392382]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[393834-393840]:Modifier[393864-393870]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[393841-393845]:PrimitiveType[393871-393875]"
  }, {
    "left" : "PFont which",
    "right" : "PFont which",
    "info" : "SingleVariableDeclaration[393855-393866]:SingleVariableDeclaration[393885-393896]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[393868-393948]:Block[393898-393978]"
  }, {
    "left" : "if (recorder != null)",
    "right" : "if (recorder != null)",
    "info" : "IfStatement[393874-393921]:IfStatement[393904-393951]"
  }, {
    "left" : "recorder.textFont(which);",
    "right" : "recorder.textFont(which);",
    "info" : "ExpressionStatement[393896-393921]:ExpressionStatement[393926-393951]"
  }, {
    "left" : "g.textFont(which);",
    "right" : "g.textFont(which);",
    "info" : "ExpressionStatement[393926-393944]:ExpressionStatement[393956-393974]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[394025-394031]:Modifier[394055-394061]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[394032-394036]:PrimitiveType[394062-394066]"
  }, {
    "left" : "PFont which",
    "right" : "PFont which",
    "info" : "SingleVariableDeclaration[394046-394057]:SingleVariableDeclaration[394076-394087]"
  }, {
    "left" : "float size",
    "right" : "float size",
    "info" : "SingleVariableDeclaration[394059-394069]:SingleVariableDeclaration[394089-394099]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[394071-394163]:Block[394101-394193]"
  }, {
    "left" : "if (recorder != null)",
    "right" : "if (recorder != null)",
    "info" : "IfStatement[394077-394130]:IfStatement[394107-394160]"
  }, {
    "left" : "recorder.textFont(which, size);",
    "right" : "recorder.textFont(which, size);",
    "info" : "ExpressionStatement[394099-394130]:ExpressionStatement[394129-394160]"
  }, {
    "left" : "g.textFont(which, size);",
    "right" : "g.textFont(which, size);",
    "info" : "ExpressionStatement[394135-394159]:ExpressionStatement[394165-394189]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[394700-394706]:Modifier[394730-394736]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[394707-394711]:PrimitiveType[394737-394741]"
  }, {
    "left" : "float leading",
    "right" : "float leading",
    "info" : "SingleVariableDeclaration[394724-394737]:SingleVariableDeclaration[394754-394767]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[394739-394829]:Block[394769-394859]"
  }, {
    "left" : "if (recorder != null)",
    "right" : "if (recorder != null)",
    "info" : "IfStatement[394745-394797]:IfStatement[394775-394827]"
  }, {
    "left" : "recorder.textLeading(leading);",
    "right" : "recorder.textLeading(leading);",
    "info" : "ExpressionStatement[394767-394797]:ExpressionStatement[394797-394827]"
  }, {
    "left" : "g.textLeading(leading);",
    "right" : "g.textLeading(leading);",
    "info" : "ExpressionStatement[394802-394825]:ExpressionStatement[394832-394855]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[396325-396331]:Modifier[396355-396361]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[396332-396336]:PrimitiveType[396362-396366]"
  }, {
    "left" : "int mode",
    "right" : "int mode",
    "info" : "SingleVariableDeclaration[396346-396354]:SingleVariableDeclaration[396376-396384]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[396356-396434]:Block[396386-396464]"
  }, {
    "left" : "if (recorder != null)",
    "right" : "if (recorder != null)",
    "info" : "IfStatement[396362-396408]:IfStatement[396392-396438]"
  }, {
    "left" : "recorder.textMode(mode);",
    "right" : "recorder.textMode(mode);",
    "info" : "ExpressionStatement[396384-396408]:ExpressionStatement[396414-396438]"
  }, {
    "left" : "g.textMode(mode);",
    "right" : "g.textMode(mode);",
    "info" : "ExpressionStatement[396413-396430]:ExpressionStatement[396443-396460]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[396935-396941]:Modifier[396965-396971]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[396942-396946]:PrimitiveType[396972-396976]"
  }, {
    "left" : "float size",
    "right" : "float size",
    "info" : "SingleVariableDeclaration[396956-396966]:SingleVariableDeclaration[396986-396996]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[396968-397046]:Block[396998-397076]"
  }, {
    "left" : "if (recorder != null)",
    "right" : "if (recorder != null)",
    "info" : "IfStatement[396974-397020]:IfStatement[397004-397050]"
  }, {
    "left" : "recorder.textSize(size);",
    "right" : "recorder.textSize(size);",
    "info" : "ExpressionStatement[396996-397020]:ExpressionStatement[397026-397050]"
  }, {
    "left" : "g.textSize(size);",
    "right" : "g.textSize(size);",
    "info" : "ExpressionStatement[397025-397042]:ExpressionStatement[397055-397072]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[397102-397108]:Modifier[397132-397138]"
  }, {
    "left" : "float",
    "right" : "float",
    "info" : "PrimitiveType[397109-397114]:PrimitiveType[397139-397144]"
  }, {
    "left" : "char c",
    "right" : "char c",
    "info" : "SingleVariableDeclaration[397125-397131]:SingleVariableDeclaration[397155-397161]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[397133-397165]:Block[397163-397195]"
  }, {
    "left" : "return g.textWidth(c);",
    "right" : "return g.textWidth(c);",
    "info" : "ReturnStatement[397139-397161]:ReturnStatement[397169-397191]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[397608-397614]:Modifier[397638-397644]"
  }, {
    "left" : "float",
    "right" : "float",
    "info" : "PrimitiveType[397615-397620]:PrimitiveType[397645-397650]"
  }, {
    "left" : "String str",
    "right" : "String str",
    "info" : "SingleVariableDeclaration[397631-397641]:SingleVariableDeclaration[397661-397671]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[397643-397677]:Block[397673-397707]"
  }, {
    "left" : "return g.textWidth(str);",
    "right" : "return g.textWidth(str);",
    "info" : "ReturnStatement[397649-397673]:ReturnStatement[397679-397703]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[397709-397715]:Modifier[397739-397745]"
  }, {
    "left" : "float",
    "right" : "float",
    "info" : "PrimitiveType[397716-397721]:PrimitiveType[397746-397751]"
  }, {
    "left" : "char[] chars",
    "right" : "char[] chars",
    "info" : "SingleVariableDeclaration[397732-397744]:SingleVariableDeclaration[397762-397774]"
  }, {
    "left" : "int start",
    "right" : "int start",
    "info" : "SingleVariableDeclaration[397746-397755]:SingleVariableDeclaration[397776-397785]"
  }, {
    "left" : "int length",
    "right" : "int length",
    "info" : "SingleVariableDeclaration[397757-397767]:SingleVariableDeclaration[397787-397797]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[397769-397820]:Block[397799-397850]"
  }, {
    "left" : "return g.textWidth(chars, start, length);",
    "right" : "return g.textWidth(chars, start, length);",
    "info" : "ReturnStatement[397775-397816]:ReturnStatement[397805-397846]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[399321-399327]:Modifier[399351-399357]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[399328-399332]:PrimitiveType[399358-399362]"
  }, {
    "left" : "char c",
    "right" : "char c",
    "info" : "SingleVariableDeclaration[399338-399344]:SingleVariableDeclaration[399368-399374]"
  }, {
    "left" : "float x",
    "right" : "float x",
    "info" : "SingleVariableDeclaration[399346-399353]:SingleVariableDeclaration[399376-399383]"
  }, {
    "left" : "float y",
    "right" : "float y",
    "info" : "SingleVariableDeclaration[399355-399362]:SingleVariableDeclaration[399385-399392]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[399364-399440]:Block[399394-399470]"
  }, {
    "left" : "if (recorder != null)",
    "right" : "if (recorder != null)",
    "info" : "IfStatement[399370-399415]:IfStatement[399400-399445]"
  }, {
    "left" : "recorder.text(c, x, y);",
    "right" : "recorder.text(c, x, y);",
    "info" : "ExpressionStatement[399392-399415]:ExpressionStatement[399422-399445]"
  }, {
    "left" : "g.text(c, x, y);",
    "right" : "g.text(c, x, y);",
    "info" : "ExpressionStatement[399420-399436]:ExpressionStatement[399450-399466]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[399492-399498]:Modifier[399522-399528]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[399499-399503]:PrimitiveType[399529-399533]"
  }, {
    "left" : "char c",
    "right" : "char c",
    "info" : "SingleVariableDeclaration[399509-399515]:SingleVariableDeclaration[399539-399545]"
  }, {
    "left" : "float x",
    "right" : "float x",
    "info" : "SingleVariableDeclaration[399517-399524]:SingleVariableDeclaration[399547-399554]"
  }, {
    "left" : "float y",
    "right" : "float y",
    "info" : "SingleVariableDeclaration[399526-399533]:SingleVariableDeclaration[399556-399563]"
  }, {
    "left" : "float z",
    "right" : "float z",
    "info" : "SingleVariableDeclaration[399535-399542]:SingleVariableDeclaration[399565-399572]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[399544-399626]:Block[399574-399656]"
  }, {
    "left" : "if (recorder != null)",
    "right" : "if (recorder != null)",
    "info" : "IfStatement[399550-399598]:IfStatement[399580-399628]"
  }, {
    "left" : "recorder.text(c, x, y, z);",
    "right" : "recorder.text(c, x, y, z);",
    "info" : "ExpressionStatement[399572-399598]:ExpressionStatement[399602-399628]"
  }, {
    "left" : "g.text(c, x, y, z);",
    "right" : "g.text(c, x, y, z);",
    "info" : "ExpressionStatement[399603-399622]:ExpressionStatement[399633-399652]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[399842-399848]:Modifier[399872-399878]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[399849-399853]:PrimitiveType[399879-399883]"
  }, {
    "left" : "String str",
    "right" : "String str",
    "info" : "SingleVariableDeclaration[399859-399869]:SingleVariableDeclaration[399889-399899]"
  }, {
    "left" : "float x",
    "right" : "float x",
    "info" : "SingleVariableDeclaration[399871-399878]:SingleVariableDeclaration[399901-399908]"
  }, {
    "left" : "float y",
    "right" : "float y",
    "info" : "SingleVariableDeclaration[399880-399887]:SingleVariableDeclaration[399910-399917]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[399889-399969]:Block[399919-399999]"
  }, {
    "left" : "if (recorder != null)",
    "right" : "if (recorder != null)",
    "info" : "IfStatement[399895-399942]:IfStatement[399925-399972]"
  }, {
    "left" : "recorder.text(str, x, y);",
    "right" : "recorder.text(str, x, y);",
    "info" : "ExpressionStatement[399917-399942]:ExpressionStatement[399947-399972]"
  }, {
    "left" : "g.text(str, x, y);",
    "right" : "g.text(str, x, y);",
    "info" : "ExpressionStatement[399947-399965]:ExpressionStatement[399977-399995]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[400411-400417]:Modifier[400441-400447]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[400418-400422]:PrimitiveType[400448-400452]"
  }, {
    "left" : "char[] chars",
    "right" : "char[] chars",
    "info" : "SingleVariableDeclaration[400428-400440]:SingleVariableDeclaration[400458-400470]"
  }, {
    "left" : "int start",
    "right" : "int start",
    "info" : "SingleVariableDeclaration[400442-400451]:SingleVariableDeclaration[400472-400481]"
  }, {
    "left" : "int stop",
    "right" : "int stop",
    "info" : "SingleVariableDeclaration[400453-400461]:SingleVariableDeclaration[400483-400491]"
  }, {
    "left" : "float x",
    "right" : "float x",
    "info" : "SingleVariableDeclaration[400463-400470]:SingleVariableDeclaration[400493-400500]"
  }, {
    "left" : "float y",
    "right" : "float y",
    "info" : "SingleVariableDeclaration[400472-400479]:SingleVariableDeclaration[400502-400509]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[400481-400591]:Block[400511-400621]"
  }, {
    "left" : "if (recorder != null)",
    "right" : "if (recorder != null)",
    "info" : "IfStatement[400487-400549]:IfStatement[400517-400579]"
  }, {
    "left" : "recorder.text(chars, start, stop, x, y);",
    "right" : "recorder.text(chars, start, stop, x, y);",
    "info" : "ExpressionStatement[400509-400549]:ExpressionStatement[400539-400579]"
  }, {
    "left" : "g.text(chars, start, stop, x, y);",
    "right" : "g.text(chars, start, stop, x, y);",
    "info" : "ExpressionStatement[400554-400587]:ExpressionStatement[400584-400617]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[400652-400658]:Modifier[400682-400688]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[400659-400663]:PrimitiveType[400689-400693]"
  }, {
    "left" : "String str",
    "right" : "String str",
    "info" : "SingleVariableDeclaration[400669-400679]:SingleVariableDeclaration[400699-400709]"
  }, {
    "left" : "float x",
    "right" : "float x",
    "info" : "SingleVariableDeclaration[400681-400688]:SingleVariableDeclaration[400711-400718]"
  }, {
    "left" : "float y",
    "right" : "float y",
    "info" : "SingleVariableDeclaration[400690-400697]:SingleVariableDeclaration[400720-400727]"
  }, {
    "left" : "float z",
    "right" : "float z",
    "info" : "SingleVariableDeclaration[400699-400706]:SingleVariableDeclaration[400729-400736]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[400708-400794]:Block[400738-400824]"
  }, {
    "left" : "if (recorder != null)",
    "right" : "if (recorder != null)",
    "info" : "IfStatement[400714-400764]:IfStatement[400744-400794]"
  }, {
    "left" : "recorder.text(str, x, y, z);",
    "right" : "recorder.text(str, x, y, z);",
    "info" : "ExpressionStatement[400736-400764]:ExpressionStatement[400766-400794]"
  }, {
    "left" : "g.text(str, x, y, z);",
    "right" : "g.text(str, x, y, z);",
    "info" : "ExpressionStatement[400769-400790]:ExpressionStatement[400799-400820]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[400799-400805]:Modifier[400829-400835]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[400806-400810]:PrimitiveType[400836-400840]"
  }, {
    "left" : "char[] chars",
    "right" : "char[] chars",
    "info" : "SingleVariableDeclaration[400816-400828]:SingleVariableDeclaration[400846-400858]"
  }, {
    "left" : "int start",
    "right" : "int start",
    "info" : "SingleVariableDeclaration[400830-400839]:SingleVariableDeclaration[400860-400869]"
  }, {
    "left" : "int stop",
    "right" : "int stop",
    "info" : "SingleVariableDeclaration[400841-400849]:SingleVariableDeclaration[400871-400879]"
  }, {
    "left" : "float x",
    "right" : "float x",
    "info" : "SingleVariableDeclaration[400870-400877]:SingleVariableDeclaration[400900-400907]"
  }, {
    "left" : "float y",
    "right" : "float y",
    "info" : "SingleVariableDeclaration[400879-400886]:SingleVariableDeclaration[400909-400916]"
  }, {
    "left" : "float z",
    "right" : "float z",
    "info" : "SingleVariableDeclaration[400888-400895]:SingleVariableDeclaration[400918-400925]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[400897-401013]:Block[400927-401043]"
  }, {
    "left" : "if (recorder != null)",
    "right" : "if (recorder != null)",
    "info" : "IfStatement[400903-400968]:IfStatement[400933-400998]"
  }, {
    "left" : "recorder.text(chars, start, stop, x, y, z);",
    "right" : "recorder.text(chars, start, stop, x, y, z);",
    "info" : "ExpressionStatement[400925-400968]:ExpressionStatement[400955-400998]"
  }, {
    "left" : "g.text(chars, start, stop, x, y, z);",
    "right" : "g.text(chars, start, stop, x, y, z);",
    "info" : "ExpressionStatement[400973-401009]:ExpressionStatement[401003-401039]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[401899-401905]:Modifier[401929-401935]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[401906-401910]:PrimitiveType[401936-401940]"
  }, {
    "left" : "String str",
    "right" : "String str",
    "info" : "SingleVariableDeclaration[401916-401926]:SingleVariableDeclaration[401946-401956]"
  }, {
    "left" : "float x1",
    "right" : "float x1",
    "info" : "SingleVariableDeclaration[401928-401936]:SingleVariableDeclaration[401958-401966]"
  }, {
    "left" : "float y1",
    "right" : "float y1",
    "info" : "SingleVariableDeclaration[401938-401946]:SingleVariableDeclaration[401968-401976]"
  }, {
    "left" : "float x2",
    "right" : "float x2",
    "info" : "SingleVariableDeclaration[401948-401956]:SingleVariableDeclaration[401978-401986]"
  }, {
    "left" : "float y2",
    "right" : "float y2",
    "info" : "SingleVariableDeclaration[401958-401966]:SingleVariableDeclaration[401988-401996]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[401968-402068]:Block[401998-402098]"
  }, {
    "left" : "if (recorder != null)",
    "right" : "if (recorder != null)",
    "info" : "IfStatement[401974-402031]:IfStatement[402004-402061]"
  }, {
    "left" : "recorder.text(str, x1, y1, x2, y2);",
    "right" : "recorder.text(str, x1, y1, x2, y2);",
    "info" : "ExpressionStatement[401996-402031]:ExpressionStatement[402026-402061]"
  }, {
    "left" : "g.text(str, x1, y1, x2, y2);",
    "right" : "g.text(str, x1, y1, x2, y2);",
    "info" : "ExpressionStatement[402036-402064]:ExpressionStatement[402066-402094]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[402073-402079]:Modifier[402103-402109]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[402080-402084]:PrimitiveType[402110-402114]"
  }, {
    "left" : "int num",
    "right" : "int num",
    "info" : "SingleVariableDeclaration[402090-402097]:SingleVariableDeclaration[402120-402127]"
  }, {
    "left" : "float x",
    "right" : "float x",
    "info" : "SingleVariableDeclaration[402099-402106]:SingleVariableDeclaration[402129-402136]"
  }, {
    "left" : "float y",
    "right" : "float y",
    "info" : "SingleVariableDeclaration[402108-402115]:SingleVariableDeclaration[402138-402145]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[402117-402197]:Block[402147-402227]"
  }, {
    "left" : "if (recorder != null)",
    "right" : "if (recorder != null)",
    "info" : "IfStatement[402123-402170]:IfStatement[402153-402200]"
  }, {
    "left" : "recorder.text(num, x, y);",
    "right" : "recorder.text(num, x, y);",
    "info" : "ExpressionStatement[402145-402170]:ExpressionStatement[402175-402200]"
  }, {
    "left" : "g.text(num, x, y);",
    "right" : "g.text(num, x, y);",
    "info" : "ExpressionStatement[402175-402193]:ExpressionStatement[402205-402223]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[402202-402208]:Modifier[402232-402238]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[402209-402213]:PrimitiveType[402239-402243]"
  }, {
    "left" : "int num",
    "right" : "int num",
    "info" : "SingleVariableDeclaration[402219-402226]:SingleVariableDeclaration[402249-402256]"
  }, {
    "left" : "float x",
    "right" : "float x",
    "info" : "SingleVariableDeclaration[402228-402235]:SingleVariableDeclaration[402258-402265]"
  }, {
    "left" : "float y",
    "right" : "float y",
    "info" : "SingleVariableDeclaration[402237-402244]:SingleVariableDeclaration[402267-402274]"
  }, {
    "left" : "float z",
    "right" : "float z",
    "info" : "SingleVariableDeclaration[402246-402253]:SingleVariableDeclaration[402276-402283]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[402255-402341]:Block[402285-402371]"
  }, {
    "left" : "if (recorder != null)",
    "right" : "if (recorder != null)",
    "info" : "IfStatement[402261-402311]:IfStatement[402291-402341]"
  }, {
    "left" : "recorder.text(num, x, y, z);",
    "right" : "recorder.text(num, x, y, z);",
    "info" : "ExpressionStatement[402283-402311]:ExpressionStatement[402313-402341]"
  }, {
    "left" : "g.text(num, x, y, z);",
    "right" : "g.text(num, x, y, z);",
    "info" : "ExpressionStatement[402316-402337]:ExpressionStatement[402346-402367]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[402706-402712]:Modifier[402736-402742]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[402713-402717]:PrimitiveType[402743-402747]"
  }, {
    "left" : "float num",
    "right" : "float num",
    "info" : "SingleVariableDeclaration[402723-402732]:SingleVariableDeclaration[402753-402762]"
  }, {
    "left" : "float x",
    "right" : "float x",
    "info" : "SingleVariableDeclaration[402734-402741]:SingleVariableDeclaration[402764-402771]"
  }, {
    "left" : "float y",
    "right" : "float y",
    "info" : "SingleVariableDeclaration[402743-402750]:SingleVariableDeclaration[402773-402780]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[402752-402832]:Block[402782-402862]"
  }, {
    "left" : "if (recorder != null)",
    "right" : "if (recorder != null)",
    "info" : "IfStatement[402758-402805]:IfStatement[402788-402835]"
  }, {
    "left" : "recorder.text(num, x, y);",
    "right" : "recorder.text(num, x, y);",
    "info" : "ExpressionStatement[402780-402805]:ExpressionStatement[402810-402835]"
  }, {
    "left" : "g.text(num, x, y);",
    "right" : "g.text(num, x, y);",
    "info" : "ExpressionStatement[402810-402828]:ExpressionStatement[402840-402858]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[402837-402843]:Modifier[402867-402873]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[402844-402848]:PrimitiveType[402874-402878]"
  }, {
    "left" : "float num",
    "right" : "float num",
    "info" : "SingleVariableDeclaration[402854-402863]:SingleVariableDeclaration[402884-402893]"
  }, {
    "left" : "float x",
    "right" : "float x",
    "info" : "SingleVariableDeclaration[402865-402872]:SingleVariableDeclaration[402895-402902]"
  }, {
    "left" : "float y",
    "right" : "float y",
    "info" : "SingleVariableDeclaration[402874-402881]:SingleVariableDeclaration[402904-402911]"
  }, {
    "left" : "float z",
    "right" : "float z",
    "info" : "SingleVariableDeclaration[402883-402890]:SingleVariableDeclaration[402913-402920]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[402892-402978]:Block[402922-403008]"
  }, {
    "left" : "if (recorder != null)",
    "right" : "if (recorder != null)",
    "info" : "IfStatement[402898-402948]:IfStatement[402928-402978]"
  }, {
    "left" : "recorder.text(num, x, y, z);",
    "right" : "recorder.text(num, x, y, z);",
    "info" : "ExpressionStatement[402920-402948]:ExpressionStatement[402950-402978]"
  }, {
    "left" : "g.text(num, x, y, z);",
    "right" : "g.text(num, x, y, z);",
    "info" : "ExpressionStatement[402953-402974]:ExpressionStatement[402983-403004]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[403895-403901]:Modifier[403925-403931]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[403902-403906]:PrimitiveType[403932-403936]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[403920-403994]:Block[403950-404024]"
  }, {
    "left" : "if (recorder != null)",
    "right" : "if (recorder != null)",
    "info" : "IfStatement[403926-403970]:IfStatement[403956-404000]"
  }, {
    "left" : "recorder.pushMatrix();",
    "right" : "recorder.pushMatrix();",
    "info" : "ExpressionStatement[403948-403970]:ExpressionStatement[403978-404000]"
  }, {
    "left" : "g.pushMatrix();",
    "right" : "g.pushMatrix();",
    "info" : "ExpressionStatement[403975-403990]:ExpressionStatement[404005-404020]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[404657-404663]:Modifier[404687-404693]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[404664-404668]:PrimitiveType[404694-404698]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[404681-404753]:Block[404711-404783]"
  }, {
    "left" : "if (recorder != null)",
    "right" : "if (recorder != null)",
    "info" : "IfStatement[404687-404730]:IfStatement[404717-404760]"
  }, {
    "left" : "recorder.popMatrix();",
    "right" : "recorder.popMatrix();",
    "info" : "ExpressionStatement[404709-404730]:ExpressionStatement[404739-404760]"
  }, {
    "left" : "g.popMatrix();",
    "right" : "g.popMatrix();",
    "info" : "ExpressionStatement[404735-404749]:ExpressionStatement[404765-404779]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[406097-406103]:Modifier[406127-406133]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[406104-406108]:PrimitiveType[406134-406138]"
  }, {
    "left" : "float x",
    "right" : "float x",
    "info" : "SingleVariableDeclaration[406119-406126]:SingleVariableDeclaration[406149-406156]"
  }, {
    "left" : "float y",
    "right" : "float y",
    "info" : "SingleVariableDeclaration[406128-406135]:SingleVariableDeclaration[406158-406165]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[406137-406217]:Block[406167-406247]"
  }, {
    "left" : "if (recorder != null)",
    "right" : "if (recorder != null)",
    "info" : "IfStatement[406143-406190]:IfStatement[406173-406220]"
  }, {
    "left" : "recorder.translate(x, y);",
    "right" : "recorder.translate(x, y);",
    "info" : "ExpressionStatement[406165-406190]:ExpressionStatement[406195-406220]"
  }, {
    "left" : "g.translate(x, y);",
    "right" : "g.translate(x, y);",
    "info" : "ExpressionStatement[406195-406213]:ExpressionStatement[406225-406243]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[406277-406283]:Modifier[406307-406313]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[406284-406288]:PrimitiveType[406314-406318]"
  }, {
    "left" : "float x",
    "right" : "float x",
    "info" : "SingleVariableDeclaration[406299-406306]:SingleVariableDeclaration[406329-406336]"
  }, {
    "left" : "float y",
    "right" : "float y",
    "info" : "SingleVariableDeclaration[406308-406315]:SingleVariableDeclaration[406338-406345]"
  }, {
    "left" : "float z",
    "right" : "float z",
    "info" : "SingleVariableDeclaration[406317-406324]:SingleVariableDeclaration[406347-406354]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[406326-406412]:Block[406356-406442]"
  }, {
    "left" : "if (recorder != null)",
    "right" : "if (recorder != null)",
    "info" : "IfStatement[406332-406382]:IfStatement[406362-406412]"
  }, {
    "left" : "recorder.translate(x, y, z);",
    "right" : "recorder.translate(x, y, z);",
    "info" : "ExpressionStatement[406354-406382]:ExpressionStatement[406384-406412]"
  }, {
    "left" : "g.translate(x, y, z);",
    "right" : "g.translate(x, y, z);",
    "info" : "ExpressionStatement[406387-406408]:ExpressionStatement[406417-406438]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[407748-407754]:Modifier[407778-407784]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[407755-407759]:PrimitiveType[407785-407789]"
  }, {
    "left" : "float angle",
    "right" : "float angle",
    "info" : "SingleVariableDeclaration[407767-407778]:SingleVariableDeclaration[407797-407808]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[407780-407856]:Block[407810-407886]"
  }, {
    "left" : "if (recorder != null)",
    "right" : "if (recorder != null)",
    "info" : "IfStatement[407786-407831]:IfStatement[407816-407861]"
  }, {
    "left" : "recorder.rotate(angle);",
    "right" : "recorder.rotate(angle);",
    "info" : "ExpressionStatement[407808-407831]:ExpressionStatement[407838-407861]"
  }, {
    "left" : "g.rotate(angle);",
    "right" : "g.rotate(angle);",
    "info" : "ExpressionStatement[407836-407852]:ExpressionStatement[407866-407882]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[409156-409162]:Modifier[409186-409192]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[409163-409167]:PrimitiveType[409193-409197]"
  }, {
    "left" : "float angle",
    "right" : "float angle",
    "info" : "SingleVariableDeclaration[409176-409187]:SingleVariableDeclaration[409206-409217]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[409189-409267]:Block[409219-409297]"
  }, {
    "left" : "if (recorder != null)",
    "right" : "if (recorder != null)",
    "info" : "IfStatement[409195-409241]:IfStatement[409225-409271]"
  }, {
    "left" : "recorder.rotateX(angle);",
    "right" : "recorder.rotateX(angle);",
    "info" : "ExpressionStatement[409217-409241]:ExpressionStatement[409247-409271]"
  }, {
    "left" : "g.rotateX(angle);",
    "right" : "g.rotateX(angle);",
    "info" : "ExpressionStatement[409246-409263]:ExpressionStatement[409276-409293]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[410568-410574]:Modifier[410598-410604]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[410575-410579]:PrimitiveType[410605-410609]"
  }, {
    "left" : "float angle",
    "right" : "float angle",
    "info" : "SingleVariableDeclaration[410588-410599]:SingleVariableDeclaration[410618-410629]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[410601-410679]:Block[410631-410709]"
  }, {
    "left" : "if (recorder != null)",
    "right" : "if (recorder != null)",
    "info" : "IfStatement[410607-410653]:IfStatement[410637-410683]"
  }, {
    "left" : "recorder.rotateY(angle);",
    "right" : "recorder.rotateY(angle);",
    "info" : "ExpressionStatement[410629-410653]:ExpressionStatement[410659-410683]"
  }, {
    "left" : "g.rotateY(angle);",
    "right" : "g.rotateY(angle);",
    "info" : "ExpressionStatement[410658-410675]:ExpressionStatement[410688-410705]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[411980-411986]:Modifier[412010-412016]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[411987-411991]:PrimitiveType[412017-412021]"
  }, {
    "left" : "float angle",
    "right" : "float angle",
    "info" : "SingleVariableDeclaration[412000-412011]:SingleVariableDeclaration[412030-412041]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[412013-412091]:Block[412043-412121]"
  }, {
    "left" : "if (recorder != null)",
    "right" : "if (recorder != null)",
    "info" : "IfStatement[412019-412065]:IfStatement[412049-412095]"
  }, {
    "left" : "recorder.rotateZ(angle);",
    "right" : "recorder.rotateZ(angle);",
    "info" : "ExpressionStatement[412041-412065]:ExpressionStatement[412071-412095]"
  }, {
    "left" : "g.rotateZ(angle);",
    "right" : "g.rotateZ(angle);",
    "info" : "ExpressionStatement[412070-412087]:ExpressionStatement[412100-412117]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[412244-412250]:Modifier[412274-412280]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[412251-412255]:PrimitiveType[412281-412285]"
  }, {
    "left" : "float angle",
    "right" : "float angle",
    "info" : "SingleVariableDeclaration[412263-412274]:SingleVariableDeclaration[412293-412304]"
  }, {
    "left" : "float x",
    "right" : "float x",
    "info" : "SingleVariableDeclaration[412276-412283]:SingleVariableDeclaration[412306-412313]"
  }, {
    "left" : "float y",
    "right" : "float y",
    "info" : "SingleVariableDeclaration[412285-412292]:SingleVariableDeclaration[412315-412322]"
  }, {
    "left" : "float z",
    "right" : "float z",
    "info" : "SingleVariableDeclaration[412294-412301]:SingleVariableDeclaration[412324-412331]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[412303-412397]:Block[412333-412427]"
  }, {
    "left" : "if (recorder != null)",
    "right" : "if (recorder != null)",
    "info" : "IfStatement[412309-412363]:IfStatement[412339-412393]"
  }, {
    "left" : "recorder.rotate(angle, x, y, z);",
    "right" : "recorder.rotate(angle, x, y, z);",
    "info" : "ExpressionStatement[412331-412363]:ExpressionStatement[412361-412393]"
  }, {
    "left" : "g.rotate(angle, x, y, z);",
    "right" : "g.rotate(angle, x, y, z);",
    "info" : "ExpressionStatement[412368-412393]:ExpressionStatement[412398-412423]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[413721-413727]:Modifier[413751-413757]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[413728-413732]:PrimitiveType[413758-413762]"
  }, {
    "left" : "float s",
    "right" : "float s",
    "info" : "SingleVariableDeclaration[413739-413746]:SingleVariableDeclaration[413769-413776]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[413748-413814]:Block[413778-413844]"
  }, {
    "left" : "if (recorder != null)",
    "right" : "if (recorder != null)",
    "info" : "IfStatement[413754-413794]:IfStatement[413784-413824]"
  }, {
    "left" : "recorder.scale(s);",
    "right" : "recorder.scale(s);",
    "info" : "ExpressionStatement[413776-413794]:ExpressionStatement[413806-413824]"
  }, {
    "left" : "g.scale(s);",
    "right" : "g.scale(s);",
    "info" : "ExpressionStatement[413799-413810]:ExpressionStatement[413829-413840]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[414178-414184]:Modifier[414208-414214]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[414185-414189]:PrimitiveType[414215-414219]"
  }, {
    "left" : "float x",
    "right" : "float x",
    "info" : "SingleVariableDeclaration[414196-414203]:SingleVariableDeclaration[414226-414233]"
  }, {
    "left" : "float y",
    "right" : "float y",
    "info" : "SingleVariableDeclaration[414205-414212]:SingleVariableDeclaration[414235-414242]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[414214-414286]:Block[414244-414316]"
  }, {
    "left" : "if (recorder != null)",
    "right" : "if (recorder != null)",
    "info" : "IfStatement[414220-414263]:IfStatement[414250-414293]"
  }, {
    "left" : "recorder.scale(x, y);",
    "right" : "recorder.scale(x, y);",
    "info" : "ExpressionStatement[414242-414263]:ExpressionStatement[414272-414293]"
  }, {
    "left" : "g.scale(x, y);",
    "right" : "g.scale(x, y);",
    "info" : "ExpressionStatement[414268-414282]:ExpressionStatement[414298-414312]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[414362-414368]:Modifier[414392-414398]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[414369-414373]:PrimitiveType[414399-414403]"
  }, {
    "left" : "float x",
    "right" : "float x",
    "info" : "SingleVariableDeclaration[414380-414387]:SingleVariableDeclaration[414410-414417]"
  }, {
    "left" : "float y",
    "right" : "float y",
    "info" : "SingleVariableDeclaration[414389-414396]:SingleVariableDeclaration[414419-414426]"
  }, {
    "left" : "float z",
    "right" : "float z",
    "info" : "SingleVariableDeclaration[414398-414405]:SingleVariableDeclaration[414428-414435]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[414407-414485]:Block[414437-414515]"
  }, {
    "left" : "if (recorder != null)",
    "right" : "if (recorder != null)",
    "info" : "IfStatement[414413-414459]:IfStatement[414443-414489]"
  }, {
    "left" : "recorder.scale(x, y, z);",
    "right" : "recorder.scale(x, y, z);",
    "info" : "ExpressionStatement[414435-414459]:ExpressionStatement[414465-414489]"
  }, {
    "left" : "g.scale(x, y, z);",
    "right" : "g.scale(x, y, z);",
    "info" : "ExpressionStatement[414464-414481]:ExpressionStatement[414494-414511]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[415848-415854]:Modifier[415878-415884]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[415855-415859]:PrimitiveType[415885-415889]"
  }, {
    "left" : "float angle",
    "right" : "float angle",
    "info" : "SingleVariableDeclaration[415867-415878]:SingleVariableDeclaration[415897-415908]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[415880-415956]:Block[415910-415986]"
  }, {
    "left" : "if (recorder != null)",
    "right" : "if (recorder != null)",
    "info" : "IfStatement[415886-415931]:IfStatement[415916-415961]"
  }, {
    "left" : "recorder.shearX(angle);",
    "right" : "recorder.shearX(angle);",
    "info" : "ExpressionStatement[415908-415931]:ExpressionStatement[415938-415961]"
  }, {
    "left" : "g.shearX(angle);",
    "right" : "g.shearX(angle);",
    "info" : "ExpressionStatement[415936-415952]:ExpressionStatement[415966-415982]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[417319-417325]:Modifier[417349-417355]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[417326-417330]:PrimitiveType[417356-417360]"
  }, {
    "left" : "float angle",
    "right" : "float angle",
    "info" : "SingleVariableDeclaration[417338-417349]:SingleVariableDeclaration[417368-417379]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[417351-417427]:Block[417381-417457]"
  }, {
    "left" : "if (recorder != null)",
    "right" : "if (recorder != null)",
    "info" : "IfStatement[417357-417402]:IfStatement[417387-417432]"
  }, {
    "left" : "recorder.shearY(angle);",
    "right" : "recorder.shearY(angle);",
    "info" : "ExpressionStatement[417379-417402]:ExpressionStatement[417409-417432]"
  }, {
    "left" : "g.shearY(angle);",
    "right" : "g.shearY(angle);",
    "info" : "ExpressionStatement[417407-417423]:ExpressionStatement[417437-417453]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[417820-417826]:Modifier[417850-417856]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[417827-417831]:PrimitiveType[417857-417861]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[417846-417922]:Block[417876-417952]"
  }, {
    "left" : "if (recorder != null)",
    "right" : "if (recorder != null)",
    "info" : "IfStatement[417852-417897]:IfStatement[417882-417927]"
  }, {
    "left" : "recorder.resetMatrix();",
    "right" : "recorder.resetMatrix();",
    "info" : "ExpressionStatement[417874-417897]:ExpressionStatement[417904-417927]"
  }, {
    "left" : "g.resetMatrix();",
    "right" : "g.resetMatrix();",
    "info" : "ExpressionStatement[417902-417918]:ExpressionStatement[417932-417948]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[418462-418468]:Modifier[418492-418498]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[418469-418473]:PrimitiveType[418499-418503]"
  }, {
    "left" : "PMatrix source",
    "right" : "PMatrix source",
    "info" : "SingleVariableDeclaration[418486-418500]:SingleVariableDeclaration[418516-418530]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[418502-418590]:Block[418532-418620]"
  }, {
    "left" : "if (recorder != null)",
    "right" : "if (recorder != null)",
    "info" : "IfStatement[418508-418559]:IfStatement[418538-418589]"
  }, {
    "left" : "recorder.applyMatrix(source);",
    "right" : "recorder.applyMatrix(source);",
    "info" : "ExpressionStatement[418530-418559]:ExpressionStatement[418560-418589]"
  }, {
    "left" : "g.applyMatrix(source);",
    "right" : "g.applyMatrix(source);",
    "info" : "ExpressionStatement[418564-418586]:ExpressionStatement[418594-418616]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[418595-418601]:Modifier[418625-418631]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[418602-418606]:PrimitiveType[418632-418636]"
  }, {
    "left" : "PMatrix2D source",
    "right" : "PMatrix2D source",
    "info" : "SingleVariableDeclaration[418619-418635]:SingleVariableDeclaration[418649-418665]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[418637-418725]:Block[418667-418755]"
  }, {
    "left" : "if (recorder != null)",
    "right" : "if (recorder != null)",
    "info" : "IfStatement[418643-418694]:IfStatement[418673-418724]"
  }, {
    "left" : "recorder.applyMatrix(source);",
    "right" : "recorder.applyMatrix(source);",
    "info" : "ExpressionStatement[418665-418694]:ExpressionStatement[418695-418724]"
  }, {
    "left" : "g.applyMatrix(source);",
    "right" : "g.applyMatrix(source);",
    "info" : "ExpressionStatement[418699-418721]:ExpressionStatement[418729-418751]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[419156-419162]:Modifier[419186-419192]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[419163-419167]:PrimitiveType[419193-419197]"
  }, {
    "left" : "float n00",
    "right" : "float n00",
    "info" : "SingleVariableDeclaration[419180-419189]:SingleVariableDeclaration[419210-419219]"
  }, {
    "left" : "float n01",
    "right" : "float n01",
    "info" : "SingleVariableDeclaration[419191-419200]:SingleVariableDeclaration[419221-419230]"
  }, {
    "left" : "float n02",
    "right" : "float n02",
    "info" : "SingleVariableDeclaration[419202-419211]:SingleVariableDeclaration[419232-419241]"
  }, {
    "left" : "float n10",
    "right" : "float n10",
    "info" : "SingleVariableDeclaration[419239-419248]:SingleVariableDeclaration[419269-419278]"
  }, {
    "left" : "float n11",
    "right" : "float n11",
    "info" : "SingleVariableDeclaration[419250-419259]:SingleVariableDeclaration[419280-419289]"
  }, {
    "left" : "float n12",
    "right" : "float n12",
    "info" : "SingleVariableDeclaration[419261-419270]:SingleVariableDeclaration[419291-419300]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[419272-419404]:Block[419302-419434]"
  }, {
    "left" : "if (recorder != null)",
    "right" : "if (recorder != null)",
    "info" : "IfStatement[419278-419351]:IfStatement[419308-419381]"
  }, {
    "left" : "recorder.applyMatrix(n00, n01, n02, n10, n11, n12);",
    "right" : "recorder.applyMatrix(n00, n01, n02, n10, n11, n12);",
    "info" : "ExpressionStatement[419300-419351]:ExpressionStatement[419330-419381]"
  }, {
    "left" : "g.applyMatrix(n00, n01, n02, n10, n11, n12);",
    "right" : "g.applyMatrix(n00, n01, n02, n10, n11, n12);",
    "info" : "ExpressionStatement[419356-419400]:ExpressionStatement[419386-419430]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[419409-419415]:Modifier[419439-419445]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[419416-419420]:PrimitiveType[419446-419450]"
  }, {
    "left" : "PMatrix3D source",
    "right" : "PMatrix3D source",
    "info" : "SingleVariableDeclaration[419433-419449]:SingleVariableDeclaration[419463-419479]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[419451-419539]:Block[419481-419569]"
  }, {
    "left" : "if (recorder != null)",
    "right" : "if (recorder != null)",
    "info" : "IfStatement[419457-419508]:IfStatement[419487-419538]"
  }, {
    "left" : "recorder.applyMatrix(source);",
    "right" : "recorder.applyMatrix(source);",
    "info" : "ExpressionStatement[419479-419508]:ExpressionStatement[419509-419538]"
  }, {
    "left" : "g.applyMatrix(source);",
    "right" : "g.applyMatrix(source);",
    "info" : "ExpressionStatement[419513-419535]:ExpressionStatement[419543-419565]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[420246-420252]:Modifier[420276-420282]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[420253-420257]:PrimitiveType[420283-420287]"
  }, {
    "left" : "float n00",
    "right" : "float n00",
    "info" : "SingleVariableDeclaration[420270-420279]:SingleVariableDeclaration[420300-420309]"
  }, {
    "left" : "float n01",
    "right" : "float n01",
    "info" : "SingleVariableDeclaration[420281-420290]:SingleVariableDeclaration[420311-420320]"
  }, {
    "left" : "float n02",
    "right" : "float n02",
    "info" : "SingleVariableDeclaration[420292-420301]:SingleVariableDeclaration[420322-420331]"
  }, {
    "left" : "float n03",
    "right" : "float n03",
    "info" : "SingleVariableDeclaration[420303-420312]:SingleVariableDeclaration[420333-420342]"
  }, {
    "left" : "float n10",
    "right" : "float n10",
    "info" : "SingleVariableDeclaration[420340-420349]:SingleVariableDeclaration[420370-420379]"
  }, {
    "left" : "float n11",
    "right" : "float n11",
    "info" : "SingleVariableDeclaration[420351-420360]:SingleVariableDeclaration[420381-420390]"
  }, {
    "left" : "float n12",
    "right" : "float n12",
    "info" : "SingleVariableDeclaration[420362-420371]:SingleVariableDeclaration[420392-420401]"
  }, {
    "left" : "float n13",
    "right" : "float n13",
    "info" : "SingleVariableDeclaration[420373-420382]:SingleVariableDeclaration[420403-420412]"
  }, {
    "left" : "float n20",
    "right" : "float n20",
    "info" : "SingleVariableDeclaration[420410-420419]:SingleVariableDeclaration[420440-420449]"
  }, {
    "left" : "float n21",
    "right" : "float n21",
    "info" : "SingleVariableDeclaration[420421-420430]:SingleVariableDeclaration[420451-420460]"
  }, {
    "left" : "float n22",
    "right" : "float n22",
    "info" : "SingleVariableDeclaration[420432-420441]:SingleVariableDeclaration[420462-420471]"
  }, {
    "left" : "float n23",
    "right" : "float n23",
    "info" : "SingleVariableDeclaration[420443-420452]:SingleVariableDeclaration[420473-420482]"
  }, {
    "left" : "float n30",
    "right" : "float n30",
    "info" : "SingleVariableDeclaration[420480-420489]:SingleVariableDeclaration[420510-420519]"
  }, {
    "left" : "float n31",
    "right" : "float n31",
    "info" : "SingleVariableDeclaration[420491-420500]:SingleVariableDeclaration[420521-420530]"
  }, {
    "left" : "float n32",
    "right" : "float n32",
    "info" : "SingleVariableDeclaration[420502-420511]:SingleVariableDeclaration[420532-420541]"
  }, {
    "left" : "float n33",
    "right" : "float n33",
    "info" : "SingleVariableDeclaration[420513-420522]:SingleVariableDeclaration[420543-420552]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[420524-420756]:Block[420554-420786]"
  }, {
    "left" : "if (recorder != null)",
    "right" : "if (recorder != null)",
    "info" : "IfStatement[420530-420653]:IfStatement[420560-420683]"
  }, {
    "left" : "recorder.applyMatrix(n00, n01, n02, n03, n10, n11, n12, n13, n20, n21, n22, n23, n30, n31, n32, n33);",
    "right" : "recorder.applyMatrix(n00, n01, n02, n03, n10, n11, n12, n13, n20, n21, n22, n23, n30, n31, n32, n33);",
    "info" : "ExpressionStatement[420552-420653]:ExpressionStatement[420582-420683]"
  }, {
    "left" : "g.applyMatrix(n00, n01, n02, n03, n10, n11, n12, n13, n20, n21, n22, n23, n30, n31, n32, n33);",
    "right" : "g.applyMatrix(n00, n01, n02, n03, n10, n11, n12, n13, n20, n21, n22, n23, n30, n31, n32, n33);",
    "info" : "ExpressionStatement[420658-420752]:ExpressionStatement[420688-420782]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[420761-420767]:Modifier[420791-420797]"
  }, {
    "left" : "PMatrix",
    "right" : "PMatrix",
    "info" : "SimpleType[420768-420775]:SimpleType[420798-420805]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[420788-420819]:Block[420818-420849]"
  }, {
    "left" : "return g.getMatrix();",
    "right" : "return g.getMatrix();",
    "info" : "ReturnStatement[420794-420815]:ReturnStatement[420824-420845]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[420949-420955]:Modifier[420979-420985]"
  }, {
    "left" : "PMatrix2D",
    "right" : "PMatrix2D",
    "info" : "SimpleType[420956-420965]:SimpleType[420986-420995]"
  }, {
    "left" : "PMatrix2D target",
    "right" : "PMatrix2D target",
    "info" : "SingleVariableDeclaration[420976-420992]:SingleVariableDeclaration[421006-421022]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[420994-421031]:Block[421024-421061]"
  }, {
    "left" : "return g.getMatrix(target);",
    "right" : "return g.getMatrix(target);",
    "info" : "ReturnStatement[421000-421027]:ReturnStatement[421030-421057]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[421161-421167]:Modifier[421191-421197]"
  }, {
    "left" : "PMatrix3D",
    "right" : "PMatrix3D",
    "info" : "SimpleType[421168-421177]:SimpleType[421198-421207]"
  }, {
    "left" : "PMatrix3D target",
    "right" : "PMatrix3D target",
    "info" : "SingleVariableDeclaration[421188-421204]:SingleVariableDeclaration[421218-421234]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[421206-421243]:Block[421236-421273]"
  }, {
    "left" : "return g.getMatrix(target);",
    "right" : "return g.getMatrix(target);",
    "info" : "ReturnStatement[421212-421239]:ReturnStatement[421242-421269]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[421331-421337]:Modifier[421361-421367]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[421338-421342]:PrimitiveType[421368-421372]"
  }, {
    "left" : "PMatrix source",
    "right" : "PMatrix source",
    "info" : "SingleVariableDeclaration[421353-421367]:SingleVariableDeclaration[421383-421397]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[421369-421453]:Block[421399-421483]"
  }, {
    "left" : "if (recorder != null)",
    "right" : "if (recorder != null)",
    "info" : "IfStatement[421375-421424]:IfStatement[421405-421454]"
  }, {
    "left" : "recorder.setMatrix(source);",
    "right" : "recorder.setMatrix(source);",
    "info" : "ExpressionStatement[421397-421424]:ExpressionStatement[421427-421454]"
  }, {
    "left" : "g.setMatrix(source);",
    "right" : "g.setMatrix(source);",
    "info" : "ExpressionStatement[421429-421449]:ExpressionStatement[421459-421479]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[421547-421553]:Modifier[421577-421583]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[421554-421558]:PrimitiveType[421584-421588]"
  }, {
    "left" : "PMatrix2D source",
    "right" : "PMatrix2D source",
    "info" : "SingleVariableDeclaration[421569-421585]:SingleVariableDeclaration[421599-421615]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[421587-421671]:Block[421617-421701]"
  }, {
    "left" : "if (recorder != null)",
    "right" : "if (recorder != null)",
    "info" : "IfStatement[421593-421642]:IfStatement[421623-421672]"
  }, {
    "left" : "recorder.setMatrix(source);",
    "right" : "recorder.setMatrix(source);",
    "info" : "ExpressionStatement[421615-421642]:ExpressionStatement[421645-421672]"
  }, {
    "left" : "g.setMatrix(source);",
    "right" : "g.setMatrix(source);",
    "info" : "ExpressionStatement[421647-421667]:ExpressionStatement[421677-421697]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[421765-421771]:Modifier[421795-421801]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[421772-421776]:PrimitiveType[421802-421806]"
  }, {
    "left" : "PMatrix3D source",
    "right" : "PMatrix3D source",
    "info" : "SingleVariableDeclaration[421787-421803]:SingleVariableDeclaration[421817-421833]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[421805-421889]:Block[421835-421919]"
  }, {
    "left" : "if (recorder != null)",
    "right" : "if (recorder != null)",
    "info" : "IfStatement[421811-421860]:IfStatement[421841-421890]"
  }, {
    "left" : "recorder.setMatrix(source);",
    "right" : "recorder.setMatrix(source);",
    "info" : "ExpressionStatement[421833-421860]:ExpressionStatement[421863-421890]"
  }, {
    "left" : "g.setMatrix(source);",
    "right" : "g.setMatrix(source);",
    "info" : "ExpressionStatement[421865-421885]:ExpressionStatement[421895-421915]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[422261-422267]:Modifier[422291-422297]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[422268-422272]:PrimitiveType[422298-422302]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[422287-422363]:Block[422317-422393]"
  }, {
    "left" : "if (recorder != null)",
    "right" : "if (recorder != null)",
    "info" : "IfStatement[422293-422338]:IfStatement[422323-422368]"
  }, {
    "left" : "recorder.printMatrix();",
    "right" : "recorder.printMatrix();",
    "info" : "ExpressionStatement[422315-422338]:ExpressionStatement[422345-422368]"
  }, {
    "left" : "g.printMatrix();",
    "right" : "g.printMatrix();",
    "info" : "ExpressionStatement[422343-422359]:ExpressionStatement[422373-422389]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[423895-423901]:Modifier[423925-423931]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[423902-423906]:PrimitiveType[423932-423936]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[423921-423997]:Block[423951-424027]"
  }, {
    "left" : "if (recorder != null)",
    "right" : "if (recorder != null)",
    "info" : "IfStatement[423927-423972]:IfStatement[423957-424002]"
  }, {
    "left" : "recorder.beginCamera();",
    "right" : "recorder.beginCamera();",
    "info" : "ExpressionStatement[423949-423972]:ExpressionStatement[423979-424002]"
  }, {
    "left" : "g.beginCamera();",
    "right" : "g.beginCamera();",
    "info" : "ExpressionStatement[423977-423993]:ExpressionStatement[424007-424023]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[424453-424459]:Modifier[424483-424489]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[424460-424464]:PrimitiveType[424490-424494]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[424477-424549]:Block[424507-424579]"
  }, {
    "left" : "if (recorder != null)",
    "right" : "if (recorder != null)",
    "info" : "IfStatement[424483-424526]:IfStatement[424513-424556]"
  }, {
    "left" : "recorder.endCamera();",
    "right" : "recorder.endCamera();",
    "info" : "ExpressionStatement[424505-424526]:ExpressionStatement[424535-424556]"
  }, {
    "left" : "g.endCamera();",
    "right" : "g.endCamera();",
    "info" : "ExpressionStatement[424531-424545]:ExpressionStatement[424561-424575]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[425479-425485]:Modifier[425509-425515]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[425486-425490]:PrimitiveType[425516-425520]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[425500-425566]:Block[425530-425596]"
  }, {
    "left" : "if (recorder != null)",
    "right" : "if (recorder != null)",
    "info" : "IfStatement[425506-425546]:IfStatement[425536-425576]"
  }, {
    "left" : "recorder.camera();",
    "right" : "recorder.camera();",
    "info" : "ExpressionStatement[425528-425546]:ExpressionStatement[425558-425576]"
  }, {
    "left" : "g.camera();",
    "right" : "g.camera();",
    "info" : "ExpressionStatement[425551-425562]:ExpressionStatement[425581-425592]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[425996-426002]:Modifier[426026-426032]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[426003-426007]:PrimitiveType[426033-426037]"
  }, {
    "left" : "float eyeX",
    "right" : "float eyeX",
    "info" : "SingleVariableDeclaration[426015-426025]:SingleVariableDeclaration[426045-426055]"
  }, {
    "left" : "float eyeY",
    "right" : "float eyeY",
    "info" : "SingleVariableDeclaration[426027-426037]:SingleVariableDeclaration[426057-426067]"
  }, {
    "left" : "float eyeZ",
    "right" : "float eyeZ",
    "info" : "SingleVariableDeclaration[426039-426049]:SingleVariableDeclaration[426069-426079]"
  }, {
    "left" : "float centerX",
    "right" : "float centerX",
    "info" : "SingleVariableDeclaration[426072-426085]:SingleVariableDeclaration[426102-426115]"
  }, {
    "left" : "float centerY",
    "right" : "float centerY",
    "info" : "SingleVariableDeclaration[426087-426100]:SingleVariableDeclaration[426117-426130]"
  }, {
    "left" : "float centerZ",
    "right" : "float centerZ",
    "info" : "SingleVariableDeclaration[426102-426115]:SingleVariableDeclaration[426132-426145]"
  }, {
    "left" : "float upX",
    "right" : "float upX",
    "info" : "SingleVariableDeclaration[426138-426147]:SingleVariableDeclaration[426168-426177]"
  }, {
    "left" : "float upY",
    "right" : "float upY",
    "info" : "SingleVariableDeclaration[426149-426158]:SingleVariableDeclaration[426179-426188]"
  }, {
    "left" : "float upZ",
    "right" : "float upZ",
    "info" : "SingleVariableDeclaration[426160-426169]:SingleVariableDeclaration[426190-426199]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[426171-426353]:Block[426201-426383]"
  }, {
    "left" : "if (recorder != null)",
    "right" : "if (recorder != null)",
    "info" : "IfStatement[426177-426275]:IfStatement[426207-426305]"
  }, {
    "left" : "recorder.camera(eyeX, eyeY, eyeZ, centerX, centerY, centerZ, upX, upY, upZ);",
    "right" : "recorder.camera(eyeX, eyeY, eyeZ, centerX, centerY, centerZ, upX, upY, upZ);",
    "info" : "ExpressionStatement[426199-426275]:ExpressionStatement[426229-426305]"
  }, {
    "left" : "g.camera(eyeX, eyeY, eyeZ, centerX, centerY, centerZ, upX, upY, upZ);",
    "right" : "g.camera(eyeX, eyeY, eyeZ, centerX, centerY, centerZ, upX, upY, upZ);",
    "info" : "ExpressionStatement[426280-426349]:ExpressionStatement[426310-426379]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[426680-426686]:Modifier[426710-426716]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[426687-426691]:PrimitiveType[426717-426721]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[426706-426782]:Block[426736-426812]"
  }, {
    "left" : "if (recorder != null)",
    "right" : "if (recorder != null)",
    "info" : "IfStatement[426712-426757]:IfStatement[426742-426787]"
  }, {
    "left" : "recorder.printCamera();",
    "right" : "recorder.printCamera();",
    "info" : "ExpressionStatement[426734-426757]:ExpressionStatement[426764-426787]"
  }, {
    "left" : "g.printCamera();",
    "right" : "g.printCamera();",
    "info" : "ExpressionStatement[426762-426778]:ExpressionStatement[426792-426808]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[427464-427470]:Modifier[427494-427500]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[427471-427475]:PrimitiveType[427501-427505]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[427484-427548]:Block[427514-427578]"
  }, {
    "left" : "if (recorder != null)",
    "right" : "if (recorder != null)",
    "info" : "IfStatement[427490-427529]:IfStatement[427520-427559]"
  }, {
    "left" : "recorder.ortho();",
    "right" : "recorder.ortho();",
    "info" : "ExpressionStatement[427512-427529]:ExpressionStatement[427542-427559]"
  }, {
    "left" : "g.ortho();",
    "right" : "g.ortho();",
    "info" : "ExpressionStatement[427534-427544]:ExpressionStatement[427564-427574]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[427773-427779]:Modifier[427803-427809]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[427780-427784]:PrimitiveType[427810-427814]"
  }, {
    "left" : "float left",
    "right" : "float left",
    "info" : "SingleVariableDeclaration[427791-427801]:SingleVariableDeclaration[427821-427831]"
  }, {
    "left" : "float right",
    "right" : "float right",
    "info" : "SingleVariableDeclaration[427803-427814]:SingleVariableDeclaration[427833-427844]"
  }, {
    "left" : "float bottom",
    "right" : "float bottom",
    "info" : "SingleVariableDeclaration[427836-427848]:SingleVariableDeclaration[427866-427878]"
  }, {
    "left" : "float top",
    "right" : "float top",
    "info" : "SingleVariableDeclaration[427850-427859]:SingleVariableDeclaration[427880-427889]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[427861-427973]:Block[427891-428003]"
  }, {
    "left" : "if (recorder != null)",
    "right" : "if (recorder != null)",
    "info" : "IfStatement[427867-427930]:IfStatement[427897-427960]"
  }, {
    "left" : "recorder.ortho(left, right, bottom, top);",
    "right" : "recorder.ortho(left, right, bottom, top);",
    "info" : "ExpressionStatement[427889-427930]:ExpressionStatement[427919-427960]"
  }, {
    "left" : "g.ortho(left, right, bottom, top);",
    "right" : "g.ortho(left, right, bottom, top);",
    "info" : "ExpressionStatement[427935-427969]:ExpressionStatement[427965-427999]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[428124-428130]:Modifier[428154-428160]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[428131-428135]:PrimitiveType[428161-428165]"
  }, {
    "left" : "float left",
    "right" : "float left",
    "info" : "SingleVariableDeclaration[428142-428152]:SingleVariableDeclaration[428172-428182]"
  }, {
    "left" : "float right",
    "right" : "float right",
    "info" : "SingleVariableDeclaration[428154-428165]:SingleVariableDeclaration[428184-428195]"
  }, {
    "left" : "float bottom",
    "right" : "float bottom",
    "info" : "SingleVariableDeclaration[428187-428199]:SingleVariableDeclaration[428217-428229]"
  }, {
    "left" : "float top",
    "right" : "float top",
    "info" : "SingleVariableDeclaration[428201-428210]:SingleVariableDeclaration[428231-428240]"
  }, {
    "left" : "float near",
    "right" : "float near",
    "info" : "SingleVariableDeclaration[428232-428242]:SingleVariableDeclaration[428262-428272]"
  }, {
    "left" : "float far",
    "right" : "float far",
    "info" : "SingleVariableDeclaration[428244-428253]:SingleVariableDeclaration[428274-428283]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[428255-428389]:Block[428285-428419]"
  }, {
    "left" : "if (recorder != null)",
    "right" : "if (recorder != null)",
    "info" : "IfStatement[428261-428335]:IfStatement[428291-428365]"
  }, {
    "left" : "recorder.ortho(left, right, bottom, top, near, far);",
    "right" : "recorder.ortho(left, right, bottom, top, near, far);",
    "info" : "ExpressionStatement[428283-428335]:ExpressionStatement[428313-428365]"
  }, {
    "left" : "g.ortho(left, right, bottom, top, near, far);",
    "right" : "g.ortho(left, right, bottom, top, near, far);",
    "info" : "ExpressionStatement[428340-428385]:ExpressionStatement[428370-428415]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[429277-429283]:Modifier[429307-429313]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[429284-429288]:PrimitiveType[429314-429318]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[429303-429379]:Block[429333-429409]"
  }, {
    "left" : "if (recorder != null)",
    "right" : "if (recorder != null)",
    "info" : "IfStatement[429309-429354]:IfStatement[429339-429384]"
  }, {
    "left" : "recorder.perspective();",
    "right" : "recorder.perspective();",
    "info" : "ExpressionStatement[429331-429354]:ExpressionStatement[429361-429384]"
  }, {
    "left" : "g.perspective();",
    "right" : "g.perspective();",
    "info" : "ExpressionStatement[429359-429375]:ExpressionStatement[429389-429405]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[429623-429629]:Modifier[429653-429659]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[429630-429634]:PrimitiveType[429660-429664]"
  }, {
    "left" : "float fovy",
    "right" : "float fovy",
    "info" : "SingleVariableDeclaration[429647-429657]:SingleVariableDeclaration[429677-429687]"
  }, {
    "left" : "float aspect",
    "right" : "float aspect",
    "info" : "SingleVariableDeclaration[429659-429671]:SingleVariableDeclaration[429689-429701]"
  }, {
    "left" : "float zNear",
    "right" : "float zNear",
    "info" : "SingleVariableDeclaration[429673-429684]:SingleVariableDeclaration[429703-429714]"
  }, {
    "left" : "float zFar",
    "right" : "float zFar",
    "info" : "SingleVariableDeclaration[429686-429696]:SingleVariableDeclaration[429716-429726]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[429698-429824]:Block[429728-429854]"
  }, {
    "left" : "if (recorder != null)",
    "right" : "if (recorder != null)",
    "info" : "IfStatement[429704-429774]:IfStatement[429734-429804]"
  }, {
    "left" : "recorder.perspective(fovy, aspect, zNear, zFar);",
    "right" : "recorder.perspective(fovy, aspect, zNear, zFar);",
    "info" : "ExpressionStatement[429726-429774]:ExpressionStatement[429756-429804]"
  }, {
    "left" : "g.perspective(fovy, aspect, zNear, zFar);",
    "right" : "g.perspective(fovy, aspect, zNear, zFar);",
    "info" : "ExpressionStatement[429779-429820]:ExpressionStatement[429809-429850]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[430726-430732]:Modifier[430756-430762]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[430733-430737]:PrimitiveType[430763-430767]"
  }, {
    "left" : "float left",
    "right" : "float left",
    "info" : "SingleVariableDeclaration[430746-430756]:SingleVariableDeclaration[430776-430786]"
  }, {
    "left" : "float right",
    "right" : "float right",
    "info" : "SingleVariableDeclaration[430758-430769]:SingleVariableDeclaration[430788-430799]"
  }, {
    "left" : "float bottom",
    "right" : "float bottom",
    "info" : "SingleVariableDeclaration[430793-430805]:SingleVariableDeclaration[430823-430835]"
  }, {
    "left" : "float top",
    "right" : "float top",
    "info" : "SingleVariableDeclaration[430807-430816]:SingleVariableDeclaration[430837-430846]"
  }, {
    "left" : "float near",
    "right" : "float near",
    "info" : "SingleVariableDeclaration[430840-430850]:SingleVariableDeclaration[430870-430880]"
  }, {
    "left" : "float far",
    "right" : "float far",
    "info" : "SingleVariableDeclaration[430852-430861]:SingleVariableDeclaration[430882-430891]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[430863-431001]:Block[430893-431031]"
  }, {
    "left" : "if (recorder != null)",
    "right" : "if (recorder != null)",
    "info" : "IfStatement[430869-430945]:IfStatement[430899-430975]"
  }, {
    "left" : "recorder.frustum(left, right, bottom, top, near, far);",
    "right" : "recorder.frustum(left, right, bottom, top, near, far);",
    "info" : "ExpressionStatement[430891-430945]:ExpressionStatement[430921-430975]"
  }, {
    "left" : "g.frustum(left, right, bottom, top, near, far);",
    "right" : "g.frustum(left, right, bottom, top, near, far);",
    "info" : "ExpressionStatement[430950-430997]:ExpressionStatement[430980-431027]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[431349-431355]:Modifier[431379-431385]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[431356-431360]:PrimitiveType[431386-431390]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[431379-431463]:Block[431409-431493]"
  }, {
    "left" : "if (recorder != null)",
    "right" : "if (recorder != null)",
    "info" : "IfStatement[431385-431434]:IfStatement[431415-431464]"
  }, {
    "left" : "recorder.printProjection();",
    "right" : "recorder.printProjection();",
    "info" : "ExpressionStatement[431407-431434]:ExpressionStatement[431437-431464]"
  }, {
    "left" : "g.printProjection();",
    "right" : "g.printProjection();",
    "info" : "ExpressionStatement[431439-431459]:ExpressionStatement[431469-431489]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[431926-431932]:Modifier[431956-431962]"
  }, {
    "left" : "float",
    "right" : "float",
    "info" : "PrimitiveType[431933-431938]:PrimitiveType[431963-431968]"
  }, {
    "left" : "float x",
    "right" : "float x",
    "info" : "SingleVariableDeclaration[431947-431954]:SingleVariableDeclaration[431977-431984]"
  }, {
    "left" : "float y",
    "right" : "float y",
    "info" : "SingleVariableDeclaration[431956-431963]:SingleVariableDeclaration[431986-431993]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[431965-431998]:Block[431995-432028]"
  }, {
    "left" : "return g.screenX(x, y);",
    "right" : "return g.screenX(x, y);",
    "info" : "ReturnStatement[431971-431994]:ReturnStatement[432001-432024]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[432461-432467]:Modifier[432491-432497]"
  }, {
    "left" : "float",
    "right" : "float",
    "info" : "PrimitiveType[432468-432473]:PrimitiveType[432498-432503]"
  }, {
    "left" : "float x",
    "right" : "float x",
    "info" : "SingleVariableDeclaration[432482-432489]:SingleVariableDeclaration[432512-432519]"
  }, {
    "left" : "float y",
    "right" : "float y",
    "info" : "SingleVariableDeclaration[432491-432498]:SingleVariableDeclaration[432521-432528]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[432500-432533]:Block[432530-432563]"
  }, {
    "left" : "return g.screenY(x, y);",
    "right" : "return g.screenY(x, y);",
    "info" : "ReturnStatement[432506-432529]:ReturnStatement[432536-432559]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[432593-432599]:Modifier[432623-432629]"
  }, {
    "left" : "float",
    "right" : "float",
    "info" : "PrimitiveType[432600-432605]:PrimitiveType[432630-432635]"
  }, {
    "left" : "float x",
    "right" : "float x",
    "info" : "SingleVariableDeclaration[432614-432621]:SingleVariableDeclaration[432644-432651]"
  }, {
    "left" : "float y",
    "right" : "float y",
    "info" : "SingleVariableDeclaration[432623-432630]:SingleVariableDeclaration[432653-432660]"
  }, {
    "left" : "float z",
    "right" : "float z",
    "info" : "SingleVariableDeclaration[432632-432639]:SingleVariableDeclaration[432662-432669]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[432641-432677]:Block[432671-432707]"
  }, {
    "left" : "return g.screenX(x, y, z);",
    "right" : "return g.screenX(x, y, z);",
    "info" : "ReturnStatement[432647-432673]:ReturnStatement[432677-432703]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[432737-432743]:Modifier[432767-432773]"
  }, {
    "left" : "float",
    "right" : "float",
    "info" : "PrimitiveType[432744-432749]:PrimitiveType[432774-432779]"
  }, {
    "left" : "float x",
    "right" : "float x",
    "info" : "SingleVariableDeclaration[432758-432765]:SingleVariableDeclaration[432788-432795]"
  }, {
    "left" : "float y",
    "right" : "float y",
    "info" : "SingleVariableDeclaration[432767-432774]:SingleVariableDeclaration[432797-432804]"
  }, {
    "left" : "float z",
    "right" : "float z",
    "info" : "SingleVariableDeclaration[432776-432783]:SingleVariableDeclaration[432806-432813]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[432785-432821]:Block[432815-432851]"
  }, {
    "left" : "return g.screenY(x, y, z);",
    "right" : "return g.screenY(x, y, z);",
    "info" : "ReturnStatement[432791-432817]:ReturnStatement[432821-432847]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[433327-433333]:Modifier[433357-433363]"
  }, {
    "left" : "float",
    "right" : "float",
    "info" : "PrimitiveType[433334-433339]:PrimitiveType[433364-433369]"
  }, {
    "left" : "float x",
    "right" : "float x",
    "info" : "SingleVariableDeclaration[433348-433355]:SingleVariableDeclaration[433378-433385]"
  }, {
    "left" : "float y",
    "right" : "float y",
    "info" : "SingleVariableDeclaration[433357-433364]:SingleVariableDeclaration[433387-433394]"
  }, {
    "left" : "float z",
    "right" : "float z",
    "info" : "SingleVariableDeclaration[433366-433373]:SingleVariableDeclaration[433396-433403]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[433375-433411]:Block[433405-433441]"
  }, {
    "left" : "return g.screenZ(x, y, z);",
    "right" : "return g.screenZ(x, y, z);",
    "info" : "ReturnStatement[433381-433407]:ReturnStatement[433411-433437]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[434557-434563]:Modifier[434587-434593]"
  }, {
    "left" : "float",
    "right" : "float",
    "info" : "PrimitiveType[434564-434569]:PrimitiveType[434594-434599]"
  }, {
    "left" : "float x",
    "right" : "float x",
    "info" : "SingleVariableDeclaration[434577-434584]:SingleVariableDeclaration[434607-434614]"
  }, {
    "left" : "float y",
    "right" : "float y",
    "info" : "SingleVariableDeclaration[434586-434593]:SingleVariableDeclaration[434616-434623]"
  }, {
    "left" : "float z",
    "right" : "float z",
    "info" : "SingleVariableDeclaration[434595-434602]:SingleVariableDeclaration[434625-434632]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[434604-434639]:Block[434634-434669]"
  }, {
    "left" : "return g.modelX(x, y, z);",
    "right" : "return g.modelX(x, y, z);",
    "info" : "ReturnStatement[434610-434635]:ReturnStatement[434640-434665]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[435786-435792]:Modifier[435816-435822]"
  }, {
    "left" : "float",
    "right" : "float",
    "info" : "PrimitiveType[435793-435798]:PrimitiveType[435823-435828]"
  }, {
    "left" : "float x",
    "right" : "float x",
    "info" : "SingleVariableDeclaration[435806-435813]:SingleVariableDeclaration[435836-435843]"
  }, {
    "left" : "float y",
    "right" : "float y",
    "info" : "SingleVariableDeclaration[435815-435822]:SingleVariableDeclaration[435845-435852]"
  }, {
    "left" : "float z",
    "right" : "float z",
    "info" : "SingleVariableDeclaration[435824-435831]:SingleVariableDeclaration[435854-435861]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[435833-435868]:Block[435863-435898]"
  }, {
    "left" : "return g.modelY(x, y, z);",
    "right" : "return g.modelY(x, y, z);",
    "info" : "ReturnStatement[435839-435864]:ReturnStatement[435869-435894]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[437015-437021]:Modifier[437045-437051]"
  }, {
    "left" : "float",
    "right" : "float",
    "info" : "PrimitiveType[437022-437027]:PrimitiveType[437052-437057]"
  }, {
    "left" : "float x",
    "right" : "float x",
    "info" : "SingleVariableDeclaration[437035-437042]:SingleVariableDeclaration[437065-437072]"
  }, {
    "left" : "float y",
    "right" : "float y",
    "info" : "SingleVariableDeclaration[437044-437051]:SingleVariableDeclaration[437074-437081]"
  }, {
    "left" : "float z",
    "right" : "float z",
    "info" : "SingleVariableDeclaration[437053-437060]:SingleVariableDeclaration[437083-437090]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[437062-437097]:Block[437092-437127]"
  }, {
    "left" : "return g.modelZ(x, y, z);",
    "right" : "return g.modelZ(x, y, z);",
    "info" : "ReturnStatement[437068-437093]:ReturnStatement[437098-437123]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[438166-438172]:Modifier[438196-438202]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[438173-438177]:PrimitiveType[438203-438207]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[438190-438262]:Block[438220-438292]"
  }, {
    "left" : "if (recorder != null)",
    "right" : "if (recorder != null)",
    "info" : "IfStatement[438196-438239]:IfStatement[438226-438269]"
  }, {
    "left" : "recorder.pushStyle();",
    "right" : "recorder.pushStyle();",
    "info" : "ExpressionStatement[438218-438239]:ExpressionStatement[438248-438269]"
  }, {
    "left" : "g.pushStyle();",
    "right" : "g.pushStyle();",
    "info" : "ExpressionStatement[438244-438258]:ExpressionStatement[438274-438288]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[438940-438946]:Modifier[438970-438976]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[438947-438951]:PrimitiveType[438977-438981]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[438963-439033]:Block[438993-439063]"
  }, {
    "left" : "if (recorder != null)",
    "right" : "if (recorder != null)",
    "info" : "IfStatement[438969-439011]:IfStatement[438999-439041]"
  }, {
    "left" : "recorder.popStyle();",
    "right" : "recorder.popStyle();",
    "info" : "ExpressionStatement[438991-439011]:ExpressionStatement[439021-439041]"
  }, {
    "left" : "g.popStyle();",
    "right" : "g.popStyle();",
    "info" : "ExpressionStatement[439016-439029]:ExpressionStatement[439046-439059]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[439038-439044]:Modifier[439068-439074]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[439045-439049]:PrimitiveType[439075-439079]"
  }, {
    "left" : "PStyle s",
    "right" : "PStyle s",
    "info" : "SingleVariableDeclaration[439056-439064]:SingleVariableDeclaration[439086-439094]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[439066-439132]:Block[439096-439162]"
  }, {
    "left" : "if (recorder != null)",
    "right" : "if (recorder != null)",
    "info" : "IfStatement[439072-439112]:IfStatement[439102-439142]"
  }, {
    "left" : "recorder.style(s);",
    "right" : "recorder.style(s);",
    "info" : "ExpressionStatement[439094-439112]:ExpressionStatement[439124-439142]"
  }, {
    "left" : "g.style(s);",
    "right" : "g.style(s);",
    "info" : "ExpressionStatement[439117-439128]:ExpressionStatement[439147-439158]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[440104-440110]:Modifier[440134-440140]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[440111-440115]:PrimitiveType[440141-440145]"
  }, {
    "left" : "float weight",
    "right" : "float weight",
    "info" : "SingleVariableDeclaration[440129-440141]:SingleVariableDeclaration[440159-440171]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[440143-440233]:Block[440173-440263]"
  }, {
    "left" : "if (recorder != null)",
    "right" : "if (recorder != null)",
    "info" : "IfStatement[440149-440201]:IfStatement[440179-440231]"
  }, {
    "left" : "recorder.strokeWeight(weight);",
    "right" : "recorder.strokeWeight(weight);",
    "info" : "ExpressionStatement[440171-440201]:ExpressionStatement[440201-440231]"
  }, {
    "left" : "g.strokeWeight(weight);",
    "right" : "g.strokeWeight(weight);",
    "info" : "ExpressionStatement[440206-440229]:ExpressionStatement[440236-440259]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[441024-441030]:Modifier[441054-441060]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[441031-441035]:PrimitiveType[441061-441065]"
  }, {
    "left" : "int join",
    "right" : "int join",
    "info" : "SingleVariableDeclaration[441047-441055]:SingleVariableDeclaration[441077-441085]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[441057-441139]:Block[441087-441169]"
  }, {
    "left" : "if (recorder != null)",
    "right" : "if (recorder != null)",
    "info" : "IfStatement[441063-441111]:IfStatement[441093-441141]"
  }, {
    "left" : "recorder.strokeJoin(join);",
    "right" : "recorder.strokeJoin(join);",
    "info" : "ExpressionStatement[441085-441111]:ExpressionStatement[441115-441141]"
  }, {
    "left" : "g.strokeJoin(join);",
    "right" : "g.strokeJoin(join);",
    "info" : "ExpressionStatement[441116-441135]:ExpressionStatement[441146-441165]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[441963-441969]:Modifier[441993-441999]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[441970-441974]:PrimitiveType[442000-442004]"
  }, {
    "left" : "int cap",
    "right" : "int cap",
    "info" : "SingleVariableDeclaration[441985-441992]:SingleVariableDeclaration[442015-442022]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[441994-442072]:Block[442024-442102]"
  }, {
    "left" : "if (recorder != null)",
    "right" : "if (recorder != null)",
    "info" : "IfStatement[442000-442046]:IfStatement[442030-442076]"
  }, {
    "left" : "recorder.strokeCap(cap);",
    "right" : "recorder.strokeCap(cap);",
    "info" : "ExpressionStatement[442022-442046]:ExpressionStatement[442052-442076]"
  }, {
    "left" : "g.strokeCap(cap);",
    "right" : "g.strokeCap(cap);",
    "info" : "ExpressionStatement[442051-442068]:ExpressionStatement[442081-442098]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[442472-442478]:Modifier[442502-442508]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[442479-442483]:PrimitiveType[442509-442513]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[442495-442565]:Block[442525-442595]"
  }, {
    "left" : "if (recorder != null)",
    "right" : "if (recorder != null)",
    "info" : "IfStatement[442501-442543]:IfStatement[442531-442573]"
  }, {
    "left" : "recorder.noStroke();",
    "right" : "recorder.noStroke();",
    "info" : "ExpressionStatement[442523-442543]:ExpressionStatement[442553-442573]"
  }, {
    "left" : "g.noStroke();",
    "right" : "g.noStroke();",
    "info" : "ExpressionStatement[442548-442561]:ExpressionStatement[442578-442591]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[444038-444044]:Modifier[444068-444074]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[444045-444049]:PrimitiveType[444075-444079]"
  }, {
    "left" : "int rgb",
    "right" : "int rgb",
    "info" : "SingleVariableDeclaration[444057-444064]:SingleVariableDeclaration[444087-444094]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[444066-444138]:Block[444096-444168]"
  }, {
    "left" : "if (recorder != null)",
    "right" : "if (recorder != null)",
    "info" : "IfStatement[444072-444115]:IfStatement[444102-444145]"
  }, {
    "left" : "recorder.stroke(rgb);",
    "right" : "recorder.stroke(rgb);",
    "info" : "ExpressionStatement[444094-444115]:ExpressionStatement[444124-444145]"
  }, {
    "left" : "g.stroke(rgb);",
    "right" : "g.stroke(rgb);",
    "info" : "ExpressionStatement[444120-444134]:ExpressionStatement[444150-444164]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[444195-444201]:Modifier[444225-444231]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[444202-444206]:PrimitiveType[444232-444236]"
  }, {
    "left" : "int rgb",
    "right" : "int rgb",
    "info" : "SingleVariableDeclaration[444214-444221]:SingleVariableDeclaration[444244-444251]"
  }, {
    "left" : "float alpha",
    "right" : "float alpha",
    "info" : "SingleVariableDeclaration[444223-444234]:SingleVariableDeclaration[444253-444264]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[444236-444322]:Block[444266-444352]"
  }, {
    "left" : "if (recorder != null)",
    "right" : "if (recorder != null)",
    "info" : "IfStatement[444242-444292]:IfStatement[444272-444322]"
  }, {
    "left" : "recorder.stroke(rgb, alpha);",
    "right" : "recorder.stroke(rgb, alpha);",
    "info" : "ExpressionStatement[444264-444292]:ExpressionStatement[444294-444322]"
  }, {
    "left" : "g.stroke(rgb, alpha);",
    "right" : "g.stroke(rgb, alpha);",
    "info" : "ExpressionStatement[444297-444318]:ExpressionStatement[444327-444348]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[444398-444404]:Modifier[444428-444434]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[444405-444409]:PrimitiveType[444435-444439]"
  }, {
    "left" : "float gray",
    "right" : "float gray",
    "info" : "SingleVariableDeclaration[444417-444427]:SingleVariableDeclaration[444447-444457]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[444429-444503]:Block[444459-444533]"
  }, {
    "left" : "if (recorder != null)",
    "right" : "if (recorder != null)",
    "info" : "IfStatement[444435-444479]:IfStatement[444465-444509]"
  }, {
    "left" : "recorder.stroke(gray);",
    "right" : "recorder.stroke(gray);",
    "info" : "ExpressionStatement[444457-444479]:ExpressionStatement[444487-444509]"
  }, {
    "left" : "g.stroke(gray);",
    "right" : "g.stroke(gray);",
    "info" : "ExpressionStatement[444484-444499]:ExpressionStatement[444514-444529]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[444508-444514]:Modifier[444538-444544]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[444515-444519]:PrimitiveType[444545-444549]"
  }, {
    "left" : "float gray",
    "right" : "float gray",
    "info" : "SingleVariableDeclaration[444527-444537]:SingleVariableDeclaration[444557-444567]"
  }, {
    "left" : "float alpha",
    "right" : "float alpha",
    "info" : "SingleVariableDeclaration[444539-444550]:SingleVariableDeclaration[444569-444580]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[444552-444640]:Block[444582-444670]"
  }, {
    "left" : "if (recorder != null)",
    "right" : "if (recorder != null)",
    "info" : "IfStatement[444558-444609]:IfStatement[444588-444639]"
  }, {
    "left" : "recorder.stroke(gray, alpha);",
    "right" : "recorder.stroke(gray, alpha);",
    "info" : "ExpressionStatement[444580-444609]:ExpressionStatement[444610-444639]"
  }, {
    "left" : "g.stroke(gray, alpha);",
    "right" : "g.stroke(gray, alpha);",
    "info" : "ExpressionStatement[444614-444636]:ExpressionStatement[444644-444666]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[444899-444905]:Modifier[444929-444935]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[444906-444910]:PrimitiveType[444936-444940]"
  }, {
    "left" : "float v1",
    "right" : "float v1",
    "info" : "SingleVariableDeclaration[444918-444926]:SingleVariableDeclaration[444948-444956]"
  }, {
    "left" : "float v2",
    "right" : "float v2",
    "info" : "SingleVariableDeclaration[444928-444936]:SingleVariableDeclaration[444958-444966]"
  }, {
    "left" : "float v3",
    "right" : "float v3",
    "info" : "SingleVariableDeclaration[444938-444946]:SingleVariableDeclaration[444968-444976]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[444948-445034]:Block[444978-445064]"
  }, {
    "left" : "if (recorder != null)",
    "right" : "if (recorder != null)",
    "info" : "IfStatement[444954-445004]:IfStatement[444984-445034]"
  }, {
    "left" : "recorder.stroke(v1, v2, v3);",
    "right" : "recorder.stroke(v1, v2, v3);",
    "info" : "ExpressionStatement[444976-445004]:ExpressionStatement[445006-445034]"
  }, {
    "left" : "g.stroke(v1, v2, v3);",
    "right" : "g.stroke(v1, v2, v3);",
    "info" : "ExpressionStatement[445009-445030]:ExpressionStatement[445039-445060]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[445039-445045]:Modifier[445069-445075]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[445046-445050]:PrimitiveType[445076-445080]"
  }, {
    "left" : "float v1",
    "right" : "float v1",
    "info" : "SingleVariableDeclaration[445058-445066]:SingleVariableDeclaration[445088-445096]"
  }, {
    "left" : "float v2",
    "right" : "float v2",
    "info" : "SingleVariableDeclaration[445068-445076]:SingleVariableDeclaration[445098-445106]"
  }, {
    "left" : "float v3",
    "right" : "float v3",
    "info" : "SingleVariableDeclaration[445078-445086]:SingleVariableDeclaration[445108-445116]"
  }, {
    "left" : "float alpha",
    "right" : "float alpha",
    "info" : "SingleVariableDeclaration[445088-445099]:SingleVariableDeclaration[445118-445129]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[445101-445201]:Block[445131-445231]"
  }, {
    "left" : "if (recorder != null)",
    "right" : "if (recorder != null)",
    "info" : "IfStatement[445107-445164]:IfStatement[445137-445194]"
  }, {
    "left" : "recorder.stroke(v1, v2, v3, alpha);",
    "right" : "recorder.stroke(v1, v2, v3, alpha);",
    "info" : "ExpressionStatement[445129-445164]:ExpressionStatement[445159-445194]"
  }, {
    "left" : "g.stroke(v1, v2, v3, alpha);",
    "right" : "g.stroke(v1, v2, v3, alpha);",
    "info" : "ExpressionStatement[445169-445197]:ExpressionStatement[445199-445227]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[445610-445616]:Modifier[445640-445646]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[445617-445621]:PrimitiveType[445647-445651]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[445631-445697]:Block[445661-445727]"
  }, {
    "left" : "if (recorder != null)",
    "right" : "if (recorder != null)",
    "info" : "IfStatement[445637-445677]:IfStatement[445667-445707]"
  }, {
    "left" : "recorder.noTint();",
    "right" : "recorder.noTint();",
    "info" : "ExpressionStatement[445659-445677]:ExpressionStatement[445689-445707]"
  }, {
    "left" : "g.noTint();",
    "right" : "g.noTint();",
    "info" : "ExpressionStatement[445682-445693]:ExpressionStatement[445712-445723]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[447198-447204]:Modifier[447228-447234]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[447205-447209]:PrimitiveType[447235-447239]"
  }, {
    "left" : "int rgb",
    "right" : "int rgb",
    "info" : "SingleVariableDeclaration[447215-447222]:SingleVariableDeclaration[447245-447252]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[447224-447292]:Block[447254-447322]"
  }, {
    "left" : "if (recorder != null)",
    "right" : "if (recorder != null)",
    "info" : "IfStatement[447230-447271]:IfStatement[447260-447301]"
  }, {
    "left" : "recorder.tint(rgb);",
    "right" : "recorder.tint(rgb);",
    "info" : "ExpressionStatement[447252-447271]:ExpressionStatement[447282-447301]"
  }, {
    "left" : "g.tint(rgb);",
    "right" : "g.tint(rgb);",
    "info" : "ExpressionStatement[447276-447288]:ExpressionStatement[447306-447318]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[447348-447354]:Modifier[447378-447384]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[447355-447359]:PrimitiveType[447385-447389]"
  }, {
    "left" : "int rgb",
    "right" : "int rgb",
    "info" : "SingleVariableDeclaration[447365-447372]:SingleVariableDeclaration[447395-447402]"
  }, {
    "left" : "float alpha",
    "right" : "float alpha",
    "info" : "SingleVariableDeclaration[447374-447385]:SingleVariableDeclaration[447404-447415]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[447387-447469]:Block[447417-447499]"
  }, {
    "left" : "if (recorder != null)",
    "right" : "if (recorder != null)",
    "info" : "IfStatement[447393-447441]:IfStatement[447423-447471]"
  }, {
    "left" : "recorder.tint(rgb, alpha);",
    "right" : "recorder.tint(rgb, alpha);",
    "info" : "ExpressionStatement[447415-447441]:ExpressionStatement[447445-447471]"
  }, {
    "left" : "g.tint(rgb, alpha);",
    "right" : "g.tint(rgb, alpha);",
    "info" : "ExpressionStatement[447446-447465]:ExpressionStatement[447476-447495]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[447545-447551]:Modifier[447575-447581]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[447552-447556]:PrimitiveType[447582-447586]"
  }, {
    "left" : "float gray",
    "right" : "float gray",
    "info" : "SingleVariableDeclaration[447562-447572]:SingleVariableDeclaration[447592-447602]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[447574-447644]:Block[447604-447674]"
  }, {
    "left" : "if (recorder != null)",
    "right" : "if (recorder != null)",
    "info" : "IfStatement[447580-447622]:IfStatement[447610-447652]"
  }, {
    "left" : "recorder.tint(gray);",
    "right" : "recorder.tint(gray);",
    "info" : "ExpressionStatement[447602-447622]:ExpressionStatement[447632-447652]"
  }, {
    "left" : "g.tint(gray);",
    "right" : "g.tint(gray);",
    "info" : "ExpressionStatement[447627-447640]:ExpressionStatement[447657-447670]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[447649-447655]:Modifier[447679-447685]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[447656-447660]:PrimitiveType[447686-447690]"
  }, {
    "left" : "float gray",
    "right" : "float gray",
    "info" : "SingleVariableDeclaration[447666-447676]:SingleVariableDeclaration[447696-447706]"
  }, {
    "left" : "float alpha",
    "right" : "float alpha",
    "info" : "SingleVariableDeclaration[447678-447689]:SingleVariableDeclaration[447708-447719]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[447691-447775]:Block[447721-447805]"
  }, {
    "left" : "if (recorder != null)",
    "right" : "if (recorder != null)",
    "info" : "IfStatement[447697-447746]:IfStatement[447727-447776]"
  }, {
    "left" : "recorder.tint(gray, alpha);",
    "right" : "recorder.tint(gray, alpha);",
    "info" : "ExpressionStatement[447719-447746]:ExpressionStatement[447749-447776]"
  }, {
    "left" : "g.tint(gray, alpha);",
    "right" : "g.tint(gray, alpha);",
    "info" : "ExpressionStatement[447751-447771]:ExpressionStatement[447781-447801]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[447997-448003]:Modifier[448027-448033]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[448004-448008]:PrimitiveType[448034-448038]"
  }, {
    "left" : "float v1",
    "right" : "float v1",
    "info" : "SingleVariableDeclaration[448014-448022]:SingleVariableDeclaration[448044-448052]"
  }, {
    "left" : "float v2",
    "right" : "float v2",
    "info" : "SingleVariableDeclaration[448024-448032]:SingleVariableDeclaration[448054-448062]"
  }, {
    "left" : "float v3",
    "right" : "float v3",
    "info" : "SingleVariableDeclaration[448034-448042]:SingleVariableDeclaration[448064-448072]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[448044-448126]:Block[448074-448156]"
  }, {
    "left" : "if (recorder != null)",
    "right" : "if (recorder != null)",
    "info" : "IfStatement[448050-448098]:IfStatement[448080-448128]"
  }, {
    "left" : "recorder.tint(v1, v2, v3);",
    "right" : "recorder.tint(v1, v2, v3);",
    "info" : "ExpressionStatement[448072-448098]:ExpressionStatement[448102-448128]"
  }, {
    "left" : "g.tint(v1, v2, v3);",
    "right" : "g.tint(v1, v2, v3);",
    "info" : "ExpressionStatement[448103-448122]:ExpressionStatement[448133-448152]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[448131-448137]:Modifier[448161-448167]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[448138-448142]:PrimitiveType[448168-448172]"
  }, {
    "left" : "float v1",
    "right" : "float v1",
    "info" : "SingleVariableDeclaration[448148-448156]:SingleVariableDeclaration[448178-448186]"
  }, {
    "left" : "float v2",
    "right" : "float v2",
    "info" : "SingleVariableDeclaration[448158-448166]:SingleVariableDeclaration[448188-448196]"
  }, {
    "left" : "float v3",
    "right" : "float v3",
    "info" : "SingleVariableDeclaration[448168-448176]:SingleVariableDeclaration[448198-448206]"
  }, {
    "left" : "float alpha",
    "right" : "float alpha",
    "info" : "SingleVariableDeclaration[448178-448189]:SingleVariableDeclaration[448208-448219]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[448191-448287]:Block[448221-448317]"
  }, {
    "left" : "if (recorder != null)",
    "right" : "if (recorder != null)",
    "info" : "IfStatement[448197-448252]:IfStatement[448227-448282]"
  }, {
    "left" : "recorder.tint(v1, v2, v3, alpha);",
    "right" : "recorder.tint(v1, v2, v3, alpha);",
    "info" : "ExpressionStatement[448219-448252]:ExpressionStatement[448249-448282]"
  }, {
    "left" : "g.tint(v1, v2, v3, alpha);",
    "right" : "g.tint(v1, v2, v3, alpha);",
    "info" : "ExpressionStatement[448257-448283]:ExpressionStatement[448287-448313]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[448703-448709]:Modifier[448733-448739]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[448710-448714]:PrimitiveType[448740-448744]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[448724-448790]:Block[448754-448820]"
  }, {
    "left" : "if (recorder != null)",
    "right" : "if (recorder != null)",
    "info" : "IfStatement[448730-448770]:IfStatement[448760-448800]"
  }, {
    "left" : "recorder.noFill();",
    "right" : "recorder.noFill();",
    "info" : "ExpressionStatement[448752-448770]:ExpressionStatement[448782-448800]"
  }, {
    "left" : "g.noFill();",
    "right" : "g.noFill();",
    "info" : "ExpressionStatement[448775-448786]:ExpressionStatement[448805-448816]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[450361-450367]:Modifier[450391-450397]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[450368-450372]:PrimitiveType[450398-450402]"
  }, {
    "left" : "int rgb",
    "right" : "int rgb",
    "info" : "SingleVariableDeclaration[450378-450385]:SingleVariableDeclaration[450408-450415]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[450387-450455]:Block[450417-450485]"
  }, {
    "left" : "if (recorder != null)",
    "right" : "if (recorder != null)",
    "info" : "IfStatement[450393-450434]:IfStatement[450423-450464]"
  }, {
    "left" : "recorder.fill(rgb);",
    "right" : "recorder.fill(rgb);",
    "info" : "ExpressionStatement[450415-450434]:ExpressionStatement[450445-450464]"
  }, {
    "left" : "g.fill(rgb);",
    "right" : "g.fill(rgb);",
    "info" : "ExpressionStatement[450439-450451]:ExpressionStatement[450469-450481]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[450510-450516]:Modifier[450540-450546]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[450517-450521]:PrimitiveType[450547-450551]"
  }, {
    "left" : "int rgb",
    "right" : "int rgb",
    "info" : "SingleVariableDeclaration[450527-450534]:SingleVariableDeclaration[450557-450564]"
  }, {
    "left" : "float alpha",
    "right" : "float alpha",
    "info" : "SingleVariableDeclaration[450536-450547]:SingleVariableDeclaration[450566-450577]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[450549-450631]:Block[450579-450661]"
  }, {
    "left" : "if (recorder != null)",
    "right" : "if (recorder != null)",
    "info" : "IfStatement[450555-450603]:IfStatement[450585-450633]"
  }, {
    "left" : "recorder.fill(rgb, alpha);",
    "right" : "recorder.fill(rgb, alpha);",
    "info" : "ExpressionStatement[450577-450603]:ExpressionStatement[450607-450633]"
  }, {
    "left" : "g.fill(rgb, alpha);",
    "right" : "g.fill(rgb, alpha);",
    "info" : "ExpressionStatement[450608-450627]:ExpressionStatement[450638-450657]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[450713-450719]:Modifier[450743-450749]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[450720-450724]:PrimitiveType[450750-450754]"
  }, {
    "left" : "float gray",
    "right" : "float gray",
    "info" : "SingleVariableDeclaration[450730-450740]:SingleVariableDeclaration[450760-450770]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[450742-450812]:Block[450772-450842]"
  }, {
    "left" : "if (recorder != null)",
    "right" : "if (recorder != null)",
    "info" : "IfStatement[450748-450790]:IfStatement[450778-450820]"
  }, {
    "left" : "recorder.fill(gray);",
    "right" : "recorder.fill(gray);",
    "info" : "ExpressionStatement[450770-450790]:ExpressionStatement[450800-450820]"
  }, {
    "left" : "g.fill(gray);",
    "right" : "g.fill(gray);",
    "info" : "ExpressionStatement[450795-450808]:ExpressionStatement[450825-450838]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[450817-450823]:Modifier[450847-450853]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[450824-450828]:PrimitiveType[450854-450858]"
  }, {
    "left" : "float gray",
    "right" : "float gray",
    "info" : "SingleVariableDeclaration[450834-450844]:SingleVariableDeclaration[450864-450874]"
  }, {
    "left" : "float alpha",
    "right" : "float alpha",
    "info" : "SingleVariableDeclaration[450846-450857]:SingleVariableDeclaration[450876-450887]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[450859-450943]:Block[450889-450973]"
  }, {
    "left" : "if (recorder != null)",
    "right" : "if (recorder != null)",
    "info" : "IfStatement[450865-450914]:IfStatement[450895-450944]"
  }, {
    "left" : "recorder.fill(gray, alpha);",
    "right" : "recorder.fill(gray, alpha);",
    "info" : "ExpressionStatement[450887-450914]:ExpressionStatement[450917-450944]"
  }, {
    "left" : "g.fill(gray, alpha);",
    "right" : "g.fill(gray, alpha);",
    "info" : "ExpressionStatement[450919-450939]:ExpressionStatement[450949-450969]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[451175-451181]:Modifier[451205-451211]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[451182-451186]:PrimitiveType[451212-451216]"
  }, {
    "left" : "float v1",
    "right" : "float v1",
    "info" : "SingleVariableDeclaration[451192-451200]:SingleVariableDeclaration[451222-451230]"
  }, {
    "left" : "float v2",
    "right" : "float v2",
    "info" : "SingleVariableDeclaration[451202-451210]:SingleVariableDeclaration[451232-451240]"
  }, {
    "left" : "float v3",
    "right" : "float v3",
    "info" : "SingleVariableDeclaration[451212-451220]:SingleVariableDeclaration[451242-451250]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[451222-451304]:Block[451252-451334]"
  }, {
    "left" : "if (recorder != null)",
    "right" : "if (recorder != null)",
    "info" : "IfStatement[451228-451276]:IfStatement[451258-451306]"
  }, {
    "left" : "recorder.fill(v1, v2, v3);",
    "right" : "recorder.fill(v1, v2, v3);",
    "info" : "ExpressionStatement[451250-451276]:ExpressionStatement[451280-451306]"
  }, {
    "left" : "g.fill(v1, v2, v3);",
    "right" : "g.fill(v1, v2, v3);",
    "info" : "ExpressionStatement[451281-451300]:ExpressionStatement[451311-451330]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[451309-451315]:Modifier[451339-451345]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[451316-451320]:PrimitiveType[451346-451350]"
  }, {
    "left" : "float v1",
    "right" : "float v1",
    "info" : "SingleVariableDeclaration[451326-451334]:SingleVariableDeclaration[451356-451364]"
  }, {
    "left" : "float v2",
    "right" : "float v2",
    "info" : "SingleVariableDeclaration[451336-451344]:SingleVariableDeclaration[451366-451374]"
  }, {
    "left" : "float v3",
    "right" : "float v3",
    "info" : "SingleVariableDeclaration[451346-451354]:SingleVariableDeclaration[451376-451384]"
  }, {
    "left" : "float alpha",
    "right" : "float alpha",
    "info" : "SingleVariableDeclaration[451356-451367]:SingleVariableDeclaration[451386-451397]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[451369-451465]:Block[451399-451495]"
  }, {
    "left" : "if (recorder != null)",
    "right" : "if (recorder != null)",
    "info" : "IfStatement[451375-451430]:IfStatement[451405-451460]"
  }, {
    "left" : "recorder.fill(v1, v2, v3, alpha);",
    "right" : "recorder.fill(v1, v2, v3, alpha);",
    "info" : "ExpressionStatement[451397-451430]:ExpressionStatement[451427-451460]"
  }, {
    "left" : "g.fill(v1, v2, v3, alpha);",
    "right" : "g.fill(v1, v2, v3, alpha);",
    "info" : "ExpressionStatement[451435-451461]:ExpressionStatement[451465-451491]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[452348-452354]:Modifier[452378-452384]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[452355-452359]:PrimitiveType[452385-452389]"
  }, {
    "left" : "int rgb",
    "right" : "int rgb",
    "info" : "SingleVariableDeclaration[452368-452375]:SingleVariableDeclaration[452398-452405]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[452377-452451]:Block[452407-452481]"
  }, {
    "left" : "if (recorder != null)",
    "right" : "if (recorder != null)",
    "info" : "IfStatement[452383-452427]:IfStatement[452413-452457]"
  }, {
    "left" : "recorder.ambient(rgb);",
    "right" : "recorder.ambient(rgb);",
    "info" : "ExpressionStatement[452405-452427]:ExpressionStatement[452435-452457]"
  }, {
    "left" : "g.ambient(rgb);",
    "right" : "g.ambient(rgb);",
    "info" : "ExpressionStatement[452432-452447]:ExpressionStatement[452462-452477]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[452527-452533]:Modifier[452557-452563]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[452534-452538]:PrimitiveType[452564-452568]"
  }, {
    "left" : "float gray",
    "right" : "float gray",
    "info" : "SingleVariableDeclaration[452547-452557]:SingleVariableDeclaration[452577-452587]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[452559-452635]:Block[452589-452665]"
  }, {
    "left" : "if (recorder != null)",
    "right" : "if (recorder != null)",
    "info" : "IfStatement[452565-452610]:IfStatement[452595-452640]"
  }, {
    "left" : "recorder.ambient(gray);",
    "right" : "recorder.ambient(gray);",
    "info" : "ExpressionStatement[452587-452610]:ExpressionStatement[452617-452640]"
  }, {
    "left" : "g.ambient(gray);",
    "right" : "g.ambient(gray);",
    "info" : "ExpressionStatement[452615-452631]:ExpressionStatement[452645-452661]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[452857-452863]:Modifier[452887-452893]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[452864-452868]:PrimitiveType[452894-452898]"
  }, {
    "left" : "float v1",
    "right" : "float v1",
    "info" : "SingleVariableDeclaration[452877-452885]:SingleVariableDeclaration[452907-452915]"
  }, {
    "left" : "float v2",
    "right" : "float v2",
    "info" : "SingleVariableDeclaration[452887-452895]:SingleVariableDeclaration[452917-452925]"
  }, {
    "left" : "float v3",
    "right" : "float v3",
    "info" : "SingleVariableDeclaration[452897-452905]:SingleVariableDeclaration[452927-452935]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[452907-452995]:Block[452937-453025]"
  }, {
    "left" : "if (recorder != null)",
    "right" : "if (recorder != null)",
    "info" : "IfStatement[452913-452964]:IfStatement[452943-452994]"
  }, {
    "left" : "recorder.ambient(v1, v2, v3);",
    "right" : "recorder.ambient(v1, v2, v3);",
    "info" : "ExpressionStatement[452935-452964]:ExpressionStatement[452965-452994]"
  }, {
    "left" : "g.ambient(v1, v2, v3);",
    "right" : "g.ambient(v1, v2, v3);",
    "info" : "ExpressionStatement[452969-452991]:ExpressionStatement[452999-453021]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[453815-453821]:Modifier[453845-453851]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[453822-453826]:PrimitiveType[453852-453856]"
  }, {
    "left" : "int rgb",
    "right" : "int rgb",
    "info" : "SingleVariableDeclaration[453836-453843]:SingleVariableDeclaration[453866-453873]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[453845-453921]:Block[453875-453951]"
  }, {
    "left" : "if (recorder != null)",
    "right" : "if (recorder != null)",
    "info" : "IfStatement[453851-453896]:IfStatement[453881-453926]"
  }, {
    "left" : "recorder.specular(rgb);",
    "right" : "recorder.specular(rgb);",
    "info" : "ExpressionStatement[453873-453896]:ExpressionStatement[453903-453926]"
  }, {
    "left" : "g.specular(rgb);",
    "right" : "g.specular(rgb);",
    "info" : "ExpressionStatement[453901-453917]:ExpressionStatement[453931-453947]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[453990-453996]:Modifier[454020-454026]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[453997-454001]:PrimitiveType[454027-454031]"
  }, {
    "left" : "float gray",
    "right" : "float gray",
    "info" : "SingleVariableDeclaration[454011-454021]:SingleVariableDeclaration[454041-454051]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[454023-454101]:Block[454053-454131]"
  }, {
    "left" : "if (recorder != null)",
    "right" : "if (recorder != null)",
    "info" : "IfStatement[454029-454075]:IfStatement[454059-454105]"
  }, {
    "left" : "recorder.specular(gray);",
    "right" : "recorder.specular(gray);",
    "info" : "ExpressionStatement[454051-454075]:ExpressionStatement[454081-454105]"
  }, {
    "left" : "g.specular(gray);",
    "right" : "g.specular(gray);",
    "info" : "ExpressionStatement[454080-454097]:ExpressionStatement[454110-454127]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[454323-454329]:Modifier[454353-454359]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[454330-454334]:PrimitiveType[454360-454364]"
  }, {
    "left" : "float v1",
    "right" : "float v1",
    "info" : "SingleVariableDeclaration[454344-454352]:SingleVariableDeclaration[454374-454382]"
  }, {
    "left" : "float v2",
    "right" : "float v2",
    "info" : "SingleVariableDeclaration[454354-454362]:SingleVariableDeclaration[454384-454392]"
  }, {
    "left" : "float v3",
    "right" : "float v3",
    "info" : "SingleVariableDeclaration[454364-454372]:SingleVariableDeclaration[454394-454402]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[454374-454464]:Block[454404-454494]"
  }, {
    "left" : "if (recorder != null)",
    "right" : "if (recorder != null)",
    "info" : "IfStatement[454380-454432]:IfStatement[454410-454462]"
  }, {
    "left" : "recorder.specular(v1, v2, v3);",
    "right" : "recorder.specular(v1, v2, v3);",
    "info" : "ExpressionStatement[454402-454432]:ExpressionStatement[454432-454462]"
  }, {
    "left" : "g.specular(v1, v2, v3);",
    "right" : "g.specular(v1, v2, v3);",
    "info" : "ExpressionStatement[454437-454460]:ExpressionStatement[454467-454490]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[455031-455037]:Modifier[455061-455067]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[455038-455042]:PrimitiveType[455068-455072]"
  }, {
    "left" : "float shine",
    "right" : "float shine",
    "info" : "SingleVariableDeclaration[455053-455064]:SingleVariableDeclaration[455083-455094]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[455066-455148]:Block[455096-455178]"
  }, {
    "left" : "if (recorder != null)",
    "right" : "if (recorder != null)",
    "info" : "IfStatement[455072-455120]:IfStatement[455102-455150]"
  }, {
    "left" : "recorder.shininess(shine);",
    "right" : "recorder.shininess(shine);",
    "info" : "ExpressionStatement[455094-455120]:ExpressionStatement[455124-455150]"
  }, {
    "left" : "g.shininess(shine);",
    "right" : "g.shininess(shine);",
    "info" : "ExpressionStatement[455125-455144]:ExpressionStatement[455155-455174]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[455732-455738]:Modifier[455762-455768]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[455739-455743]:PrimitiveType[455769-455773]"
  }, {
    "left" : "int rgb",
    "right" : "int rgb",
    "info" : "SingleVariableDeclaration[455753-455760]:SingleVariableDeclaration[455783-455790]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[455762-455838]:Block[455792-455868]"
  }, {
    "left" : "if (recorder != null)",
    "right" : "if (recorder != null)",
    "info" : "IfStatement[455768-455813]:IfStatement[455798-455843]"
  }, {
    "left" : "recorder.emissive(rgb);",
    "right" : "recorder.emissive(rgb);",
    "info" : "ExpressionStatement[455790-455813]:ExpressionStatement[455820-455843]"
  }, {
    "left" : "g.emissive(rgb);",
    "right" : "g.emissive(rgb);",
    "info" : "ExpressionStatement[455818-455834]:ExpressionStatement[455848-455864]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[455913-455919]:Modifier[455943-455949]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[455920-455924]:PrimitiveType[455950-455954]"
  }, {
    "left" : "float gray",
    "right" : "float gray",
    "info" : "SingleVariableDeclaration[455934-455944]:SingleVariableDeclaration[455964-455974]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[455946-456024]:Block[455976-456054]"
  }, {
    "left" : "if (recorder != null)",
    "right" : "if (recorder != null)",
    "info" : "IfStatement[455952-455998]:IfStatement[455982-456028]"
  }, {
    "left" : "recorder.emissive(gray);",
    "right" : "recorder.emissive(gray);",
    "info" : "ExpressionStatement[455974-455998]:ExpressionStatement[456004-456028]"
  }, {
    "left" : "g.emissive(gray);",
    "right" : "g.emissive(gray);",
    "info" : "ExpressionStatement[456003-456020]:ExpressionStatement[456033-456050]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[456256-456262]:Modifier[456286-456292]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[456263-456267]:PrimitiveType[456293-456297]"
  }, {
    "left" : "float v1",
    "right" : "float v1",
    "info" : "SingleVariableDeclaration[456277-456285]:SingleVariableDeclaration[456307-456315]"
  }, {
    "left" : "float v2",
    "right" : "float v2",
    "info" : "SingleVariableDeclaration[456287-456295]:SingleVariableDeclaration[456317-456325]"
  }, {
    "left" : "float v3",
    "right" : "float v3",
    "info" : "SingleVariableDeclaration[456297-456305]:SingleVariableDeclaration[456327-456335]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[456307-456397]:Block[456337-456427]"
  }, {
    "left" : "if (recorder != null)",
    "right" : "if (recorder != null)",
    "info" : "IfStatement[456313-456365]:IfStatement[456343-456395]"
  }, {
    "left" : "recorder.emissive(v1, v2, v3);",
    "right" : "recorder.emissive(v1, v2, v3);",
    "info" : "ExpressionStatement[456335-456365]:ExpressionStatement[456365-456395]"
  }, {
    "left" : "g.emissive(v1, v2, v3);",
    "right" : "g.emissive(v1, v2, v3);",
    "info" : "ExpressionStatement[456370-456393]:ExpressionStatement[456400-456423]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[457394-457400]:Modifier[457424-457430]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[457401-457405]:PrimitiveType[457431-457435]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[457415-457481]:Block[457445-457511]"
  }, {
    "left" : "if (recorder != null)",
    "right" : "if (recorder != null)",
    "info" : "IfStatement[457421-457461]:IfStatement[457451-457491]"
  }, {
    "left" : "recorder.lights();",
    "right" : "recorder.lights();",
    "info" : "ExpressionStatement[457443-457461]:ExpressionStatement[457473-457491]"
  }, {
    "left" : "g.lights();",
    "right" : "g.lights();",
    "info" : "ExpressionStatement[457466-457477]:ExpressionStatement[457496-457507]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[457952-457958]:Modifier[457982-457988]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[457959-457963]:PrimitiveType[457989-457993]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[457975-458045]:Block[458005-458075]"
  }, {
    "left" : "if (recorder != null)",
    "right" : "if (recorder != null)",
    "info" : "IfStatement[457981-458023]:IfStatement[458011-458053]"
  }, {
    "left" : "recorder.noLights();",
    "right" : "recorder.noLights();",
    "info" : "ExpressionStatement[458003-458023]:ExpressionStatement[458033-458053]"
  }, {
    "left" : "g.noLights();",
    "right" : "g.noLights();",
    "info" : "ExpressionStatement[458028-458041]:ExpressionStatement[458058-458071]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[459301-459307]:Modifier[459331-459337]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[459308-459312]:PrimitiveType[459338-459342]"
  }, {
    "left" : "float v1",
    "right" : "float v1",
    "info" : "SingleVariableDeclaration[459326-459334]:SingleVariableDeclaration[459356-459364]"
  }, {
    "left" : "float v2",
    "right" : "float v2",
    "info" : "SingleVariableDeclaration[459336-459344]:SingleVariableDeclaration[459366-459374]"
  }, {
    "left" : "float v3",
    "right" : "float v3",
    "info" : "SingleVariableDeclaration[459346-459354]:SingleVariableDeclaration[459376-459384]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[459356-459454]:Block[459386-459484]"
  }, {
    "left" : "if (recorder != null)",
    "right" : "if (recorder != null)",
    "info" : "IfStatement[459362-459418]:IfStatement[459392-459448]"
  }, {
    "left" : "recorder.ambientLight(v1, v2, v3);",
    "right" : "recorder.ambientLight(v1, v2, v3);",
    "info" : "ExpressionStatement[459384-459418]:ExpressionStatement[459414-459448]"
  }, {
    "left" : "g.ambientLight(v1, v2, v3);",
    "right" : "g.ambientLight(v1, v2, v3);",
    "info" : "ExpressionStatement[459423-459450]:ExpressionStatement[459453-459480]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[459591-459597]:Modifier[459621-459627]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[459598-459602]:PrimitiveType[459628-459632]"
  }, {
    "left" : "float v1",
    "right" : "float v1",
    "info" : "SingleVariableDeclaration[459616-459624]:SingleVariableDeclaration[459646-459654]"
  }, {
    "left" : "float v2",
    "right" : "float v2",
    "info" : "SingleVariableDeclaration[459626-459634]:SingleVariableDeclaration[459656-459664]"
  }, {
    "left" : "float v3",
    "right" : "float v3",
    "info" : "SingleVariableDeclaration[459636-459644]:SingleVariableDeclaration[459666-459674]"
  }, {
    "left" : "float x",
    "right" : "float x",
    "info" : "SingleVariableDeclaration[459673-459680]:SingleVariableDeclaration[459703-459710]"
  }, {
    "left" : "float y",
    "right" : "float y",
    "info" : "SingleVariableDeclaration[459682-459689]:SingleVariableDeclaration[459712-459719]"
  }, {
    "left" : "float z",
    "right" : "float z",
    "info" : "SingleVariableDeclaration[459691-459698]:SingleVariableDeclaration[459721-459728]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[459700-459816]:Block[459730-459846]"
  }, {
    "left" : "if (recorder != null)",
    "right" : "if (recorder != null)",
    "info" : "IfStatement[459706-459771]:IfStatement[459736-459801]"
  }, {
    "left" : "recorder.ambientLight(v1, v2, v3, x, y, z);",
    "right" : "recorder.ambientLight(v1, v2, v3, x, y, z);",
    "info" : "ExpressionStatement[459728-459771]:ExpressionStatement[459758-459801]"
  }, {
    "left" : "g.ambientLight(v1, v2, v3, x, y, z);",
    "right" : "g.ambientLight(v1, v2, v3, x, y, z);",
    "info" : "ExpressionStatement[459776-459812]:ExpressionStatement[459806-459842]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[461448-461454]:Modifier[461478-461484]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[461455-461459]:PrimitiveType[461485-461489]"
  }, {
    "left" : "float v1",
    "right" : "float v1",
    "info" : "SingleVariableDeclaration[461477-461485]:SingleVariableDeclaration[461507-461515]"
  }, {
    "left" : "float v2",
    "right" : "float v2",
    "info" : "SingleVariableDeclaration[461487-461495]:SingleVariableDeclaration[461517-461525]"
  }, {
    "left" : "float v3",
    "right" : "float v3",
    "info" : "SingleVariableDeclaration[461497-461505]:SingleVariableDeclaration[461527-461535]"
  }, {
    "left" : "float nx",
    "right" : "float nx",
    "info" : "SingleVariableDeclaration[461538-461546]:SingleVariableDeclaration[461568-461576]"
  }, {
    "left" : "float ny",
    "right" : "float ny",
    "info" : "SingleVariableDeclaration[461548-461556]:SingleVariableDeclaration[461578-461586]"
  }, {
    "left" : "float nz",
    "right" : "float nz",
    "info" : "SingleVariableDeclaration[461558-461566]:SingleVariableDeclaration[461588-461596]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[461568-461698]:Block[461598-461728]"
  }, {
    "left" : "if (recorder != null)",
    "right" : "if (recorder != null)",
    "info" : "IfStatement[461574-461646]:IfStatement[461604-461676]"
  }, {
    "left" : "recorder.directionalLight(v1, v2, v3, nx, ny, nz);",
    "right" : "recorder.directionalLight(v1, v2, v3, nx, ny, nz);",
    "info" : "ExpressionStatement[461596-461646]:ExpressionStatement[461626-461676]"
  }, {
    "left" : "g.directionalLight(v1, v2, v3, nx, ny, nz);",
    "right" : "g.directionalLight(v1, v2, v3, nx, ny, nz);",
    "info" : "ExpressionStatement[461651-461694]:ExpressionStatement[461681-461724]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[462954-462960]:Modifier[462984-462990]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[462961-462965]:PrimitiveType[462991-462995]"
  }, {
    "left" : "float v1",
    "right" : "float v1",
    "info" : "SingleVariableDeclaration[462977-462985]:SingleVariableDeclaration[463007-463015]"
  }, {
    "left" : "float v2",
    "right" : "float v2",
    "info" : "SingleVariableDeclaration[462987-462995]:SingleVariableDeclaration[463017-463025]"
  }, {
    "left" : "float v3",
    "right" : "float v3",
    "info" : "SingleVariableDeclaration[462997-463005]:SingleVariableDeclaration[463027-463035]"
  }, {
    "left" : "float x",
    "right" : "float x",
    "info" : "SingleVariableDeclaration[463032-463039]:SingleVariableDeclaration[463062-463069]"
  }, {
    "left" : "float y",
    "right" : "float y",
    "info" : "SingleVariableDeclaration[463041-463048]:SingleVariableDeclaration[463071-463078]"
  }, {
    "left" : "float z",
    "right" : "float z",
    "info" : "SingleVariableDeclaration[463050-463057]:SingleVariableDeclaration[463080-463087]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[463059-463171]:Block[463089-463201]"
  }, {
    "left" : "if (recorder != null)",
    "right" : "if (recorder != null)",
    "info" : "IfStatement[463065-463128]:IfStatement[463095-463158]"
  }, {
    "left" : "recorder.pointLight(v1, v2, v3, x, y, z);",
    "right" : "recorder.pointLight(v1, v2, v3, x, y, z);",
    "info" : "ExpressionStatement[463087-463128]:ExpressionStatement[463117-463158]"
  }, {
    "left" : "g.pointLight(v1, v2, v3, x, y, z);",
    "right" : "g.pointLight(v1, v2, v3, x, y, z);",
    "info" : "ExpressionStatement[463133-463167]:ExpressionStatement[463163-463197]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[464783-464789]:Modifier[464813-464819]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[464790-464794]:PrimitiveType[464820-464824]"
  }, {
    "left" : "float v1",
    "right" : "float v1",
    "info" : "SingleVariableDeclaration[464805-464813]:SingleVariableDeclaration[464835-464843]"
  }, {
    "left" : "float v2",
    "right" : "float v2",
    "info" : "SingleVariableDeclaration[464815-464823]:SingleVariableDeclaration[464845-464853]"
  }, {
    "left" : "float v3",
    "right" : "float v3",
    "info" : "SingleVariableDeclaration[464825-464833]:SingleVariableDeclaration[464855-464863]"
  }, {
    "left" : "float x",
    "right" : "float x",
    "info" : "SingleVariableDeclaration[464859-464866]:SingleVariableDeclaration[464889-464896]"
  }, {
    "left" : "float y",
    "right" : "float y",
    "info" : "SingleVariableDeclaration[464868-464875]:SingleVariableDeclaration[464898-464905]"
  }, {
    "left" : "float z",
    "right" : "float z",
    "info" : "SingleVariableDeclaration[464877-464884]:SingleVariableDeclaration[464907-464914]"
  }, {
    "left" : "float nx",
    "right" : "float nx",
    "info" : "SingleVariableDeclaration[464910-464918]:SingleVariableDeclaration[464940-464948]"
  }, {
    "left" : "float ny",
    "right" : "float ny",
    "info" : "SingleVariableDeclaration[464920-464928]:SingleVariableDeclaration[464950-464958]"
  }, {
    "left" : "float nz",
    "right" : "float nz",
    "info" : "SingleVariableDeclaration[464930-464938]:SingleVariableDeclaration[464960-464968]"
  }, {
    "left" : "float angle",
    "right" : "float angle",
    "info" : "SingleVariableDeclaration[464964-464975]:SingleVariableDeclaration[464994-465005]"
  }, {
    "left" : "float concentration",
    "right" : "float concentration",
    "info" : "SingleVariableDeclaration[464977-464996]:SingleVariableDeclaration[465007-465026]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[464998-465176]:Block[465028-465206]"
  }, {
    "left" : "if (recorder != null)",
    "right" : "if (recorder != null)",
    "info" : "IfStatement[465004-465100]:IfStatement[465034-465130]"
  }, {
    "left" : "recorder.spotLight(v1, v2, v3, x, y, z, nx, ny, nz, angle, concentration);",
    "right" : "recorder.spotLight(v1, v2, v3, x, y, z, nx, ny, nz, angle, concentration);",
    "info" : "ExpressionStatement[465026-465100]:ExpressionStatement[465056-465130]"
  }, {
    "left" : "g.spotLight(v1, v2, v3, x, y, z, nx, ny, nz, angle, concentration);",
    "right" : "g.spotLight(v1, v2, v3, x, y, z, nx, ny, nz, angle, concentration);",
    "info" : "ExpressionStatement[465105-465172]:ExpressionStatement[465135-465202]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[466722-466728]:Modifier[466752-466758]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[466729-466733]:PrimitiveType[466759-466763]"
  }, {
    "left" : "float constant",
    "right" : "float constant",
    "info" : "SingleVariableDeclaration[466747-466761]:SingleVariableDeclaration[466777-466791]"
  }, {
    "left" : "float linear",
    "right" : "float linear",
    "info" : "SingleVariableDeclaration[466763-466775]:SingleVariableDeclaration[466793-466805]"
  }, {
    "left" : "float quadratic",
    "right" : "float quadratic",
    "info" : "SingleVariableDeclaration[466777-466792]:SingleVariableDeclaration[466807-466822]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[466794-466926]:Block[466824-466956]"
  }, {
    "left" : "if (recorder != null)",
    "right" : "if (recorder != null)",
    "info" : "IfStatement[466800-466873]:IfStatement[466830-466903]"
  }, {
    "left" : "recorder.lightFalloff(constant, linear, quadratic);",
    "right" : "recorder.lightFalloff(constant, linear, quadratic);",
    "info" : "ExpressionStatement[466822-466873]:ExpressionStatement[466852-466903]"
  }, {
    "left" : "g.lightFalloff(constant, linear, quadratic);",
    "right" : "g.lightFalloff(constant, linear, quadratic);",
    "info" : "ExpressionStatement[466878-466922]:ExpressionStatement[466908-466952]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[468134-468140]:Modifier[468164-468170]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[468141-468145]:PrimitiveType[468171-468175]"
  }, {
    "left" : "float v1",
    "right" : "float v1",
    "info" : "SingleVariableDeclaration[468160-468168]:SingleVariableDeclaration[468190-468198]"
  }, {
    "left" : "float v2",
    "right" : "float v2",
    "info" : "SingleVariableDeclaration[468170-468178]:SingleVariableDeclaration[468200-468208]"
  }, {
    "left" : "float v3",
    "right" : "float v3",
    "info" : "SingleVariableDeclaration[468180-468188]:SingleVariableDeclaration[468210-468218]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[468190-468290]:Block[468220-468320]"
  }, {
    "left" : "if (recorder != null)",
    "right" : "if (recorder != null)",
    "info" : "IfStatement[468196-468253]:IfStatement[468226-468283]"
  }, {
    "left" : "recorder.lightSpecular(v1, v2, v3);",
    "right" : "recorder.lightSpecular(v1, v2, v3);",
    "info" : "ExpressionStatement[468218-468253]:ExpressionStatement[468248-468283]"
  }, {
    "left" : "g.lightSpecular(v1, v2, v3);",
    "right" : "g.lightSpecular(v1, v2, v3);",
    "info" : "ExpressionStatement[468258-468286]:ExpressionStatement[468288-468316]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[470028-470034]:Modifier[470058-470064]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[470035-470039]:PrimitiveType[470065-470069]"
  }, {
    "left" : "int rgb",
    "right" : "int rgb",
    "info" : "SingleVariableDeclaration[470051-470058]:SingleVariableDeclaration[470081-470088]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[470060-470140]:Block[470090-470170]"
  }, {
    "left" : "if (recorder != null)",
    "right" : "if (recorder != null)",
    "info" : "IfStatement[470066-470113]:IfStatement[470096-470143]"
  }, {
    "left" : "recorder.background(rgb);",
    "right" : "recorder.background(rgb);",
    "info" : "ExpressionStatement[470088-470113]:ExpressionStatement[470118-470143]"
  }, {
    "left" : "g.background(rgb);",
    "right" : "g.background(rgb);",
    "info" : "ExpressionStatement[470118-470136]:ExpressionStatement[470148-470166]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[470201-470207]:Modifier[470231-470237]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[470208-470212]:PrimitiveType[470238-470242]"
  }, {
    "left" : "int rgb",
    "right" : "int rgb",
    "info" : "SingleVariableDeclaration[470224-470231]:SingleVariableDeclaration[470254-470261]"
  }, {
    "left" : "float alpha",
    "right" : "float alpha",
    "info" : "SingleVariableDeclaration[470233-470244]:SingleVariableDeclaration[470263-470274]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[470246-470340]:Block[470276-470370]"
  }, {
    "left" : "if (recorder != null)",
    "right" : "if (recorder != null)",
    "info" : "IfStatement[470252-470306]:IfStatement[470282-470336]"
  }, {
    "left" : "recorder.background(rgb, alpha);",
    "right" : "recorder.background(rgb, alpha);",
    "info" : "ExpressionStatement[470274-470306]:ExpressionStatement[470304-470336]"
  }, {
    "left" : "g.background(rgb, alpha);",
    "right" : "g.background(rgb, alpha);",
    "info" : "ExpressionStatement[470311-470336]:ExpressionStatement[470341-470366]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[470416-470422]:Modifier[470446-470452]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[470423-470427]:PrimitiveType[470453-470457]"
  }, {
    "left" : "float gray",
    "right" : "float gray",
    "info" : "SingleVariableDeclaration[470439-470449]:SingleVariableDeclaration[470469-470479]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[470451-470533]:Block[470481-470563]"
  }, {
    "left" : "if (recorder != null)",
    "right" : "if (recorder != null)",
    "info" : "IfStatement[470457-470505]:IfStatement[470487-470535]"
  }, {
    "left" : "recorder.background(gray);",
    "right" : "recorder.background(gray);",
    "info" : "ExpressionStatement[470479-470505]:ExpressionStatement[470509-470535]"
  }, {
    "left" : "g.background(gray);",
    "right" : "g.background(gray);",
    "info" : "ExpressionStatement[470510-470529]:ExpressionStatement[470540-470559]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[470538-470544]:Modifier[470568-470574]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[470545-470549]:PrimitiveType[470575-470579]"
  }, {
    "left" : "float gray",
    "right" : "float gray",
    "info" : "SingleVariableDeclaration[470561-470571]:SingleVariableDeclaration[470591-470601]"
  }, {
    "left" : "float alpha",
    "right" : "float alpha",
    "info" : "SingleVariableDeclaration[470573-470584]:SingleVariableDeclaration[470603-470614]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[470586-470682]:Block[470616-470712]"
  }, {
    "left" : "if (recorder != null)",
    "right" : "if (recorder != null)",
    "info" : "IfStatement[470592-470647]:IfStatement[470622-470677]"
  }, {
    "left" : "recorder.background(gray, alpha);",
    "right" : "recorder.background(gray, alpha);",
    "info" : "ExpressionStatement[470614-470647]:ExpressionStatement[470644-470677]"
  }, {
    "left" : "g.background(gray, alpha);",
    "right" : "g.background(gray, alpha);",
    "info" : "ExpressionStatement[470652-470678]:ExpressionStatement[470682-470708]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[470926-470932]:Modifier[470956-470962]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[470933-470937]:PrimitiveType[470963-470967]"
  }, {
    "left" : "float v1",
    "right" : "float v1",
    "info" : "SingleVariableDeclaration[470949-470957]:SingleVariableDeclaration[470979-470987]"
  }, {
    "left" : "float v2",
    "right" : "float v2",
    "info" : "SingleVariableDeclaration[470959-470967]:SingleVariableDeclaration[470989-470997]"
  }, {
    "left" : "float v3",
    "right" : "float v3",
    "info" : "SingleVariableDeclaration[470969-470977]:SingleVariableDeclaration[470999-471007]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[470979-471073]:Block[471009-471103]"
  }, {
    "left" : "if (recorder != null)",
    "right" : "if (recorder != null)",
    "info" : "IfStatement[470985-471039]:IfStatement[471015-471069]"
  }, {
    "left" : "recorder.background(v1, v2, v3);",
    "right" : "recorder.background(v1, v2, v3);",
    "info" : "ExpressionStatement[471007-471039]:ExpressionStatement[471037-471069]"
  }, {
    "left" : "g.background(v1, v2, v3);",
    "right" : "g.background(v1, v2, v3);",
    "info" : "ExpressionStatement[471044-471069]:ExpressionStatement[471074-471099]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[471078-471084]:Modifier[471108-471114]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[471085-471089]:PrimitiveType[471115-471119]"
  }, {
    "left" : "float v1",
    "right" : "float v1",
    "info" : "SingleVariableDeclaration[471101-471109]:SingleVariableDeclaration[471131-471139]"
  }, {
    "left" : "float v2",
    "right" : "float v2",
    "info" : "SingleVariableDeclaration[471111-471119]:SingleVariableDeclaration[471141-471149]"
  }, {
    "left" : "float v3",
    "right" : "float v3",
    "info" : "SingleVariableDeclaration[471121-471129]:SingleVariableDeclaration[471151-471159]"
  }, {
    "left" : "float alpha",
    "right" : "float alpha",
    "info" : "SingleVariableDeclaration[471131-471142]:SingleVariableDeclaration[471161-471172]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[471144-471252]:Block[471174-471282]"
  }, {
    "left" : "if (recorder != null)",
    "right" : "if (recorder != null)",
    "info" : "IfStatement[471150-471211]:IfStatement[471180-471241]"
  }, {
    "left" : "recorder.background(v1, v2, v3, alpha);",
    "right" : "recorder.background(v1, v2, v3, alpha);",
    "info" : "ExpressionStatement[471172-471211]:ExpressionStatement[471202-471241]"
  }, {
    "left" : "g.background(v1, v2, v3, alpha);",
    "right" : "g.background(v1, v2, v3, alpha);",
    "info" : "ExpressionStatement[471216-471248]:ExpressionStatement[471246-471278]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[471296-471302]:Modifier[471326-471332]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[471303-471307]:PrimitiveType[471333-471337]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[471316-471380]:Block[471346-471410]"
  }, {
    "left" : "if (recorder != null)",
    "right" : "if (recorder != null)",
    "info" : "IfStatement[471322-471361]:IfStatement[471352-471391]"
  }, {
    "left" : "recorder.clear();",
    "right" : "recorder.clear();",
    "info" : "ExpressionStatement[471344-471361]:ExpressionStatement[471374-471391]"
  }, {
    "left" : "g.clear();",
    "right" : "g.clear();",
    "info" : "ExpressionStatement[471366-471376]:ExpressionStatement[471396-471406]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[472098-472104]:Modifier[472128-472134]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[472105-472109]:PrimitiveType[472135-472139]"
  }, {
    "left" : "PImage image",
    "right" : "PImage image",
    "info" : "SingleVariableDeclaration[472121-472133]:SingleVariableDeclaration[472151-472163]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[472135-472219]:Block[472165-472249]"
  }, {
    "left" : "if (recorder != null)",
    "right" : "if (recorder != null)",
    "info" : "IfStatement[472141-472190]:IfStatement[472171-472220]"
  }, {
    "left" : "recorder.background(image);",
    "right" : "recorder.background(image);",
    "info" : "ExpressionStatement[472163-472190]:ExpressionStatement[472193-472220]"
  }, {
    "left" : "g.background(image);",
    "right" : "g.background(image);",
    "info" : "ExpressionStatement[472195-472215]:ExpressionStatement[472225-472245]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[473181-473187]:Modifier[473211-473217]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[473188-473192]:PrimitiveType[473218-473222]"
  }, {
    "left" : "int mode",
    "right" : "int mode",
    "info" : "SingleVariableDeclaration[473203-473211]:SingleVariableDeclaration[473233-473241]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[473213-473293]:Block[473243-473323]"
  }, {
    "left" : "if (recorder != null)",
    "right" : "if (recorder != null)",
    "info" : "IfStatement[473219-473266]:IfStatement[473249-473296]"
  }, {
    "left" : "recorder.colorMode(mode);",
    "right" : "recorder.colorMode(mode);",
    "info" : "ExpressionStatement[473241-473266]:ExpressionStatement[473271-473296]"
  }, {
    "left" : "g.colorMode(mode);",
    "right" : "g.colorMode(mode);",
    "info" : "ExpressionStatement[473271-473289]:ExpressionStatement[473301-473319]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[473355-473361]:Modifier[473385-473391]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[473362-473366]:PrimitiveType[473392-473396]"
  }, {
    "left" : "int mode",
    "right" : "int mode",
    "info" : "SingleVariableDeclaration[473377-473385]:SingleVariableDeclaration[473407-473415]"
  }, {
    "left" : "float max",
    "right" : "float max",
    "info" : "SingleVariableDeclaration[473387-473396]:SingleVariableDeclaration[473417-473426]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[473398-473488]:Block[473428-473518]"
  }, {
    "left" : "if (recorder != null)",
    "right" : "if (recorder != null)",
    "info" : "IfStatement[473404-473456]:IfStatement[473434-473486]"
  }, {
    "left" : "recorder.colorMode(mode, max);",
    "right" : "recorder.colorMode(mode, max);",
    "info" : "ExpressionStatement[473426-473456]:ExpressionStatement[473456-473486]"
  }, {
    "left" : "g.colorMode(mode, max);",
    "right" : "g.colorMode(mode, max);",
    "info" : "ExpressionStatement[473461-473484]:ExpressionStatement[473491-473514]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[473756-473762]:Modifier[473786-473792]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[473763-473767]:PrimitiveType[473793-473797]"
  }, {
    "left" : "int mode",
    "right" : "int mode",
    "info" : "SingleVariableDeclaration[473778-473786]:SingleVariableDeclaration[473808-473816]"
  }, {
    "left" : "float max1",
    "right" : "float max1",
    "info" : "SingleVariableDeclaration[473788-473798]:SingleVariableDeclaration[473818-473828]"
  }, {
    "left" : "float max2",
    "right" : "float max2",
    "info" : "SingleVariableDeclaration[473800-473810]:SingleVariableDeclaration[473830-473840]"
  }, {
    "left" : "float max3",
    "right" : "float max3",
    "info" : "SingleVariableDeclaration[473812-473822]:SingleVariableDeclaration[473842-473852]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[473824-473940]:Block[473854-473970]"
  }, {
    "left" : "if (recorder != null)",
    "right" : "if (recorder != null)",
    "info" : "IfStatement[473830-473895]:IfStatement[473860-473925]"
  }, {
    "left" : "recorder.colorMode(mode, max1, max2, max3);",
    "right" : "recorder.colorMode(mode, max1, max2, max3);",
    "info" : "ExpressionStatement[473852-473895]:ExpressionStatement[473882-473925]"
  }, {
    "left" : "g.colorMode(mode, max1, max2, max3);",
    "right" : "g.colorMode(mode, max1, max2, max3);",
    "info" : "ExpressionStatement[473900-473936]:ExpressionStatement[473930-473966]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[473994-474000]:Modifier[474024-474030]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[474001-474005]:PrimitiveType[474031-474035]"
  }, {
    "left" : "int mode",
    "right" : "int mode",
    "info" : "SingleVariableDeclaration[474016-474024]:SingleVariableDeclaration[474046-474054]"
  }, {
    "left" : "float max1",
    "right" : "float max1",
    "info" : "SingleVariableDeclaration[474050-474060]:SingleVariableDeclaration[474080-474090]"
  }, {
    "left" : "float max2",
    "right" : "float max2",
    "info" : "SingleVariableDeclaration[474062-474072]:SingleVariableDeclaration[474092-474102]"
  }, {
    "left" : "float max3",
    "right" : "float max3",
    "info" : "SingleVariableDeclaration[474074-474084]:SingleVariableDeclaration[474104-474114]"
  }, {
    "left" : "float maxA",
    "right" : "float maxA",
    "info" : "SingleVariableDeclaration[474086-474096]:SingleVariableDeclaration[474116-474126]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[474098-474226]:Block[474128-474256]"
  }, {
    "left" : "if (recorder != null)",
    "right" : "if (recorder != null)",
    "info" : "IfStatement[474104-474175]:IfStatement[474134-474205]"
  }, {
    "left" : "recorder.colorMode(mode, max1, max2, max3, maxA);",
    "right" : "recorder.colorMode(mode, max1, max2, max3, maxA);",
    "info" : "ExpressionStatement[474126-474175]:ExpressionStatement[474156-474205]"
  }, {
    "left" : "g.colorMode(mode, max1, max2, max3, maxA);",
    "right" : "g.colorMode(mode, max1, max2, max3, maxA);",
    "info" : "ExpressionStatement[474180-474222]:ExpressionStatement[474210-474252]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[474673-474679]:Modifier[474703-474709]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[474680-474685]:Modifier[474710-474715]"
  }, {
    "left" : "float",
    "right" : "float",
    "info" : "PrimitiveType[474686-474691]:PrimitiveType[474716-474721]"
  }, {
    "left" : "int rgb",
    "right" : "int rgb",
    "info" : "SingleVariableDeclaration[474698-474705]:SingleVariableDeclaration[474728-474735]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[474707-474737]:Block[474737-474767]"
  }, {
    "left" : "return g.alpha(rgb);",
    "right" : "return g.alpha(rgb);",
    "info" : "ReturnStatement[474713-474733]:ReturnStatement[474743-474763]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[475792-475798]:Modifier[475822-475828]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[475799-475804]:Modifier[475829-475834]"
  }, {
    "left" : "float",
    "right" : "float",
    "info" : "PrimitiveType[475805-475810]:PrimitiveType[475835-475840]"
  }, {
    "left" : "int rgb",
    "right" : "int rgb",
    "info" : "SingleVariableDeclaration[475815-475822]:SingleVariableDeclaration[475845-475852]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[475824-475852]:Block[475854-475882]"
  }, {
    "left" : "return g.red(rgb);",
    "right" : "return g.red(rgb);",
    "info" : "ReturnStatement[475830-475848]:ReturnStatement[475860-475878]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[476919-476925]:Modifier[476949-476955]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[476926-476931]:Modifier[476956-476961]"
  }, {
    "left" : "float",
    "right" : "float",
    "info" : "PrimitiveType[476932-476937]:PrimitiveType[476962-476967]"
  }, {
    "left" : "int rgb",
    "right" : "int rgb",
    "info" : "SingleVariableDeclaration[476944-476951]:SingleVariableDeclaration[476974-476981]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[476953-476983]:Block[476983-477013]"
  }, {
    "left" : "return g.green(rgb);",
    "right" : "return g.green(rgb);",
    "info" : "ReturnStatement[476959-476979]:ReturnStatement[476989-477009]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[478032-478038]:Modifier[478062-478068]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[478039-478044]:Modifier[478069-478074]"
  }, {
    "left" : "float",
    "right" : "float",
    "info" : "PrimitiveType[478045-478050]:PrimitiveType[478075-478080]"
  }, {
    "left" : "int rgb",
    "right" : "int rgb",
    "info" : "SingleVariableDeclaration[478056-478063]:SingleVariableDeclaration[478086-478093]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[478065-478094]:Block[478095-478124]"
  }, {
    "left" : "return g.blue(rgb);",
    "right" : "return g.blue(rgb);",
    "info" : "ReturnStatement[478071-478090]:ReturnStatement[478101-478120]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[478539-478545]:Modifier[478569-478575]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[478546-478551]:Modifier[478576-478581]"
  }, {
    "left" : "float",
    "right" : "float",
    "info" : "PrimitiveType[478552-478557]:PrimitiveType[478582-478587]"
  }, {
    "left" : "int rgb",
    "right" : "int rgb",
    "info" : "SingleVariableDeclaration[478562-478569]:SingleVariableDeclaration[478592-478599]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[478571-478599]:Block[478601-478629]"
  }, {
    "left" : "return g.hue(rgb);",
    "right" : "return g.hue(rgb);",
    "info" : "ReturnStatement[478577-478595]:ReturnStatement[478607-478625]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[479051-479057]:Modifier[479081-479087]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[479058-479063]:Modifier[479088-479093]"
  }, {
    "left" : "float",
    "right" : "float",
    "info" : "PrimitiveType[479064-479069]:PrimitiveType[479094-479099]"
  }, {
    "left" : "int rgb",
    "right" : "int rgb",
    "info" : "SingleVariableDeclaration[479081-479088]:SingleVariableDeclaration[479111-479118]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[479090-479125]:Block[479120-479155]"
  }, {
    "left" : "return g.saturation(rgb);",
    "right" : "return g.saturation(rgb);",
    "info" : "ReturnStatement[479096-479121]:ReturnStatement[479126-479151]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[479582-479588]:Modifier[479612-479618]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[479589-479594]:Modifier[479619-479624]"
  }, {
    "left" : "float",
    "right" : "float",
    "info" : "PrimitiveType[479595-479600]:PrimitiveType[479625-479630]"
  }, {
    "left" : "int rgb",
    "right" : "int rgb",
    "info" : "SingleVariableDeclaration[479612-479619]:SingleVariableDeclaration[479642-479649]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[479621-479656]:Block[479651-479686]"
  }, {
    "left" : "return g.brightness(rgb);",
    "right" : "return g.brightness(rgb);",
    "info" : "ReturnStatement[479627-479652]:ReturnStatement[479657-479682]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[479820-479826]:Modifier[479850-479856]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[479827-479833]:Modifier[479857-479863]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[479834-479837]:PrimitiveType[479864-479867]"
  }, {
    "left" : "int c1",
    "right" : "int c1",
    "info" : "SingleVariableDeclaration[479848-479854]:SingleVariableDeclaration[479878-479884]"
  }, {
    "left" : "int c2",
    "right" : "int c2",
    "info" : "SingleVariableDeclaration[479856-479862]:SingleVariableDeclaration[479886-479892]"
  }, {
    "left" : "float amt",
    "right" : "float amt",
    "info" : "SingleVariableDeclaration[479864-479873]:SingleVariableDeclaration[479894-479903]"
  }, {
    "left" : "int mode",
    "right" : "int mode",
    "info" : "SingleVariableDeclaration[479875-479883]:SingleVariableDeclaration[479905-479913]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[479885-479941]:Block[479915-479971]"
  }, {
    "left" : "return PGraphics.lerpColor(c1, c2, amt, mode);",
    "right" : "return PGraphics.lerpColor(c1, c2, amt, mode);",
    "info" : "ReturnStatement[479891-479937]:ReturnStatement[479921-479967]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[480086-480092]:Modifier[480116-480122]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[480093-480099]:Modifier[480123-480129]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[480100-480104]:PrimitiveType[480130-480134]"
  }, {
    "left" : "String method",
    "right" : "String method",
    "info" : "SingleVariableDeclaration[480122-480135]:SingleVariableDeclaration[480152-480165]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[480137-480182]:Block[480167-480212]"
  }, {
    "left" : "PGraphics.showDepthWarning(method);",
    "right" : "PGraphics.showDepthWarning(method);",
    "info" : "ExpressionStatement[480143-480178]:ExpressionStatement[480173-480208]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[480394-480400]:Modifier[480424-480430]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[480401-480407]:Modifier[480431-480437]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[480408-480412]:PrimitiveType[480438-480442]"
  }, {
    "left" : "String method",
    "right" : "String method",
    "info" : "SingleVariableDeclaration[480433-480446]:SingleVariableDeclaration[480463-480476]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[480448-480496]:Block[480478-480526]"
  }, {
    "left" : "PGraphics.showDepthWarningXYZ(method);",
    "right" : "PGraphics.showDepthWarningXYZ(method);",
    "info" : "ExpressionStatement[480454-480492]:ExpressionStatement[480484-480522]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[480585-480591]:Modifier[480615-480621]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[480592-480598]:Modifier[480622-480628]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[480599-480603]:PrimitiveType[480629-480633]"
  }, {
    "left" : "String method",
    "right" : "String method",
    "info" : "SingleVariableDeclaration[480622-480635]:SingleVariableDeclaration[480652-480665]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[480637-480683]:Block[480667-480713]"
  }, {
    "left" : "PGraphics.showMethodWarning(method);",
    "right" : "PGraphics.showMethodWarning(method);",
    "info" : "ExpressionStatement[480643-480679]:ExpressionStatement[480673-480709]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[480897-480903]:Modifier[480927-480933]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[480904-480910]:Modifier[480934-480940]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[480911-480915]:PrimitiveType[480941-480945]"
  }, {
    "left" : "String str",
    "right" : "String str",
    "info" : "SingleVariableDeclaration[480937-480947]:SingleVariableDeclaration[480967-480977]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[480949-480995]:Block[480979-481025]"
  }, {
    "left" : "PGraphics.showVariationWarning(str);",
    "right" : "PGraphics.showVariationWarning(str);",
    "info" : "ExpressionStatement[480955-480991]:ExpressionStatement[480985-481021]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[481211-481217]:Modifier[481241-481247]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[481218-481224]:Modifier[481248-481254]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[481225-481229]:PrimitiveType[481255-481259]"
  }, {
    "left" : "String method",
    "right" : "String method",
    "info" : "SingleVariableDeclaration[481249-481262]:SingleVariableDeclaration[481279-481292]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[481264-481311]:Block[481294-481341]"
  }, {
    "left" : "PGraphics.showMissingWarning(method);",
    "right" : "PGraphics.showMissingWarning(method);",
    "info" : "ExpressionStatement[481270-481307]:ExpressionStatement[481300-481337]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[483749-483755]:Modifier[483779-483785]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[483756-483759]:PrimitiveType[483786-483789]"
  }, {
    "left" : "int x",
    "right" : "int x",
    "info" : "SingleVariableDeclaration[483764-483769]:SingleVariableDeclaration[483794-483799]"
  }, {
    "left" : "int y",
    "right" : "int y",
    "info" : "SingleVariableDeclaration[483771-483776]:SingleVariableDeclaration[483801-483806]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[483778-483807]:Block[483808-483837]"
  }, {
    "left" : "return g.get(x, y);",
    "right" : "return g.get(x, y);",
    "info" : "ReturnStatement[483784-483803]:ReturnStatement[483814-483833]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[483917-483923]:Modifier[483947-483953]"
  }, {
    "left" : "PImage",
    "right" : "PImage",
    "info" : "SimpleType[483924-483930]:SimpleType[483954-483960]"
  }, {
    "left" : "int x",
    "right" : "int x",
    "info" : "SingleVariableDeclaration[483935-483940]:SingleVariableDeclaration[483965-483970]"
  }, {
    "left" : "int y",
    "right" : "int y",
    "info" : "SingleVariableDeclaration[483942-483947]:SingleVariableDeclaration[483972-483977]"
  }, {
    "left" : "int w",
    "right" : "int w",
    "info" : "SingleVariableDeclaration[483949-483954]:SingleVariableDeclaration[483979-483984]"
  }, {
    "left" : "int h",
    "right" : "int h",
    "info" : "SingleVariableDeclaration[483956-483961]:SingleVariableDeclaration[483986-483991]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[483963-483998]:Block[483993-484028]"
  }, {
    "left" : "return g.get(x, y, w, h);",
    "right" : "return g.get(x, y, w, h);",
    "info" : "ReturnStatement[483969-483994]:ReturnStatement[483999-484024]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[484133-484139]:Modifier[484163-484169]"
  }, {
    "left" : "PImage",
    "right" : "PImage",
    "info" : "SimpleType[484140-484146]:SimpleType[484170-484176]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[484153-484178]:Block[484183-484208]"
  }, {
    "left" : "return g.get();",
    "right" : "return g.get();",
    "info" : "ReturnStatement[484159-484174]:ReturnStatement[484189-484204]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[484183-484189]:Modifier[484213-484219]"
  }, {
    "left" : "PImage",
    "right" : "PImage",
    "info" : "SimpleType[484190-484196]:SimpleType[484220-484226]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[484204-484230]:Block[484234-484260]"
  }, {
    "left" : "return g.copy();",
    "right" : "return g.copy();",
    "info" : "ReturnStatement[484210-484226]:ReturnStatement[484240-484256]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[485614-485620]:Modifier[485644-485650]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[485621-485625]:PrimitiveType[485651-485655]"
  }, {
    "left" : "int x",
    "right" : "int x",
    "info" : "SingleVariableDeclaration[485630-485635]:SingleVariableDeclaration[485660-485665]"
  }, {
    "left" : "int y",
    "right" : "int y",
    "info" : "SingleVariableDeclaration[485637-485642]:SingleVariableDeclaration[485667-485672]"
  }, {
    "left" : "int c",
    "right" : "int c",
    "info" : "SingleVariableDeclaration[485644-485649]:SingleVariableDeclaration[485674-485679]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[485651-485725]:Block[485681-485755]"
  }, {
    "left" : "if (recorder != null)",
    "right" : "if (recorder != null)",
    "info" : "IfStatement[485657-485701]:IfStatement[485687-485731]"
  }, {
    "left" : "recorder.set(x, y, c);",
    "right" : "recorder.set(x, y, c);",
    "info" : "ExpressionStatement[485679-485701]:ExpressionStatement[485709-485731]"
  }, {
    "left" : "g.set(x, y, c);",
    "right" : "g.set(x, y, c);",
    "info" : "ExpressionStatement[485706-485721]:ExpressionStatement[485736-485751]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[486008-486014]:Modifier[486038-486044]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[486015-486019]:PrimitiveType[486045-486049]"
  }, {
    "left" : "int x",
    "right" : "int x",
    "info" : "SingleVariableDeclaration[486024-486029]:SingleVariableDeclaration[486054-486059]"
  }, {
    "left" : "int y",
    "right" : "int y",
    "info" : "SingleVariableDeclaration[486031-486036]:SingleVariableDeclaration[486061-486066]"
  }, {
    "left" : "PImage img",
    "right" : "PImage img",
    "info" : "SingleVariableDeclaration[486038-486048]:SingleVariableDeclaration[486068-486078]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[486050-486128]:Block[486080-486158]"
  }, {
    "left" : "if (recorder != null)",
    "right" : "if (recorder != null)",
    "info" : "IfStatement[486056-486102]:IfStatement[486086-486132]"
  }, {
    "left" : "recorder.set(x, y, img);",
    "right" : "recorder.set(x, y, img);",
    "info" : "ExpressionStatement[486078-486102]:ExpressionStatement[486108-486132]"
  }, {
    "left" : "g.set(x, y, img);",
    "right" : "g.set(x, y, img);",
    "info" : "ExpressionStatement[486107-486124]:ExpressionStatement[486137-486154]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[487770-487776]:Modifier[487800-487806]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[487777-487781]:PrimitiveType[487807-487811]"
  }, {
    "left" : "PImage img",
    "right" : "PImage img",
    "info" : "SingleVariableDeclaration[487787-487797]:SingleVariableDeclaration[487817-487827]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[487799-487867]:Block[487829-487897]"
  }, {
    "left" : "if (recorder != null)",
    "right" : "if (recorder != null)",
    "info" : "IfStatement[487805-487846]:IfStatement[487835-487876]"
  }, {
    "left" : "recorder.mask(img);",
    "right" : "recorder.mask(img);",
    "info" : "ExpressionStatement[487827-487846]:ExpressionStatement[487857-487876]"
  }, {
    "left" : "g.mask(img);",
    "right" : "g.mask(img);",
    "info" : "ExpressionStatement[487851-487863]:ExpressionStatement[487881-487893]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[487872-487878]:Modifier[487902-487908]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[487879-487883]:PrimitiveType[487909-487913]"
  }, {
    "left" : "int kind",
    "right" : "int kind",
    "info" : "SingleVariableDeclaration[487891-487899]:SingleVariableDeclaration[487921-487929]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[487901-487975]:Block[487931-488005]"
  }, {
    "left" : "if (recorder != null)",
    "right" : "if (recorder != null)",
    "info" : "IfStatement[487907-487951]:IfStatement[487937-487981]"
  }, {
    "left" : "recorder.filter(kind);",
    "right" : "recorder.filter(kind);",
    "info" : "ExpressionStatement[487929-487951]:ExpressionStatement[487959-487981]"
  }, {
    "left" : "g.filter(kind);",
    "right" : "g.filter(kind);",
    "info" : "ExpressionStatement[487956-487971]:ExpressionStatement[487986-488001]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[490204-490210]:Modifier[490234-490240]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[490211-490215]:PrimitiveType[490241-490245]"
  }, {
    "left" : "int kind",
    "right" : "int kind",
    "info" : "SingleVariableDeclaration[490223-490231]:SingleVariableDeclaration[490253-490261]"
  }, {
    "left" : "float param",
    "right" : "float param",
    "info" : "SingleVariableDeclaration[490233-490244]:SingleVariableDeclaration[490263-490274]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[490246-490334]:Block[490276-490364]"
  }, {
    "left" : "if (recorder != null)",
    "right" : "if (recorder != null)",
    "info" : "IfStatement[490252-490303]:IfStatement[490282-490333]"
  }, {
    "left" : "recorder.filter(kind, param);",
    "right" : "recorder.filter(kind, param);",
    "info" : "ExpressionStatement[490274-490303]:ExpressionStatement[490304-490333]"
  }, {
    "left" : "g.filter(kind, param);",
    "right" : "g.filter(kind, param);",
    "info" : "ExpressionStatement[490308-490330]:ExpressionStatement[490338-490360]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[491478-491484]:Modifier[491508-491514]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[491485-491489]:PrimitiveType[491515-491519]"
  }, {
    "left" : "int sx",
    "right" : "int sx",
    "info" : "SingleVariableDeclaration[491495-491501]:SingleVariableDeclaration[491525-491531]"
  }, {
    "left" : "int sy",
    "right" : "int sy",
    "info" : "SingleVariableDeclaration[491503-491509]:SingleVariableDeclaration[491533-491539]"
  }, {
    "left" : "int sw",
    "right" : "int sw",
    "info" : "SingleVariableDeclaration[491511-491517]:SingleVariableDeclaration[491541-491547]"
  }, {
    "left" : "int sh",
    "right" : "int sh",
    "info" : "SingleVariableDeclaration[491519-491525]:SingleVariableDeclaration[491549-491555]"
  }, {
    "left" : "int dx",
    "right" : "int dx",
    "info" : "SingleVariableDeclaration[491546-491552]:SingleVariableDeclaration[491576-491582]"
  }, {
    "left" : "int dy",
    "right" : "int dy",
    "info" : "SingleVariableDeclaration[491554-491560]:SingleVariableDeclaration[491584-491590]"
  }, {
    "left" : "int dw",
    "right" : "int dw",
    "info" : "SingleVariableDeclaration[491562-491568]:SingleVariableDeclaration[491592-491598]"
  }, {
    "left" : "int dh",
    "right" : "int dh",
    "info" : "SingleVariableDeclaration[491570-491576]:SingleVariableDeclaration[491600-491606]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[491578-491700]:Block[491608-491730]"
  }, {
    "left" : "if (recorder != null)",
    "right" : "if (recorder != null)",
    "info" : "IfStatement[491584-491652]:IfStatement[491614-491682]"
  }, {
    "left" : "recorder.copy(sx, sy, sw, sh, dx, dy, dw, dh);",
    "right" : "recorder.copy(sx, sy, sw, sh, dx, dy, dw, dh);",
    "info" : "ExpressionStatement[491606-491652]:ExpressionStatement[491636-491682]"
  }, {
    "left" : "g.copy(sx, sy, sw, sh, dx, dy, dw, dh);",
    "right" : "g.copy(sx, sy, sw, sh, dx, dy, dw, dh);",
    "info" : "ExpressionStatement[491657-491696]:ExpressionStatement[491687-491726]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[491776-491782]:Modifier[491806-491812]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[491783-491787]:PrimitiveType[491813-491817]"
  }, {
    "left" : "PImage src",
    "right" : "PImage src",
    "info" : "SingleVariableDeclaration[491793-491803]:SingleVariableDeclaration[491823-491833]"
  }, {
    "left" : "int sx",
    "right" : "int sx",
    "info" : "SingleVariableDeclaration[491824-491830]:SingleVariableDeclaration[491854-491860]"
  }, {
    "left" : "int sy",
    "right" : "int sy",
    "info" : "SingleVariableDeclaration[491832-491838]:SingleVariableDeclaration[491862-491868]"
  }, {
    "left" : "int sw",
    "right" : "int sw",
    "info" : "SingleVariableDeclaration[491840-491846]:SingleVariableDeclaration[491870-491876]"
  }, {
    "left" : "int sh",
    "right" : "int sh",
    "info" : "SingleVariableDeclaration[491848-491854]:SingleVariableDeclaration[491878-491884]"
  }, {
    "left" : "int dx",
    "right" : "int dx",
    "info" : "SingleVariableDeclaration[491875-491881]:SingleVariableDeclaration[491905-491911]"
  }, {
    "left" : "int dy",
    "right" : "int dy",
    "info" : "SingleVariableDeclaration[491883-491889]:SingleVariableDeclaration[491913-491919]"
  }, {
    "left" : "int dw",
    "right" : "int dw",
    "info" : "SingleVariableDeclaration[491891-491897]:SingleVariableDeclaration[491921-491927]"
  }, {
    "left" : "int dh",
    "right" : "int dh",
    "info" : "SingleVariableDeclaration[491899-491905]:SingleVariableDeclaration[491929-491935]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[491907-492039]:Block[491937-492069]"
  }, {
    "left" : "if (recorder != null)",
    "right" : "if (recorder != null)",
    "info" : "IfStatement[491913-491986]:IfStatement[491943-492016]"
  }, {
    "left" : "recorder.copy(src, sx, sy, sw, sh, dx, dy, dw, dh);",
    "right" : "recorder.copy(src, sx, sy, sw, sh, dx, dy, dw, dh);",
    "info" : "ExpressionStatement[491935-491986]:ExpressionStatement[491965-492016]"
  }, {
    "left" : "g.copy(src, sx, sy, sw, sh, dx, dy, dw, dh);",
    "right" : "g.copy(src, sx, sy, sw, sh, dx, dy, dw, dh);",
    "info" : "ExpressionStatement[491991-492035]:ExpressionStatement[492021-492065]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[492044-492050]:Modifier[492074-492080]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[492051-492055]:PrimitiveType[492081-492085]"
  }, {
    "left" : "int sx",
    "right" : "int sx",
    "info" : "SingleVariableDeclaration[492062-492068]:SingleVariableDeclaration[492092-492098]"
  }, {
    "left" : "int sy",
    "right" : "int sy",
    "info" : "SingleVariableDeclaration[492070-492076]:SingleVariableDeclaration[492100-492106]"
  }, {
    "left" : "int sw",
    "right" : "int sw",
    "info" : "SingleVariableDeclaration[492078-492084]:SingleVariableDeclaration[492108-492114]"
  }, {
    "left" : "int sh",
    "right" : "int sh",
    "info" : "SingleVariableDeclaration[492086-492092]:SingleVariableDeclaration[492116-492122]"
  }, {
    "left" : "int dx",
    "right" : "int dx",
    "info" : "SingleVariableDeclaration[492114-492120]:SingleVariableDeclaration[492144-492150]"
  }, {
    "left" : "int dy",
    "right" : "int dy",
    "info" : "SingleVariableDeclaration[492122-492128]:SingleVariableDeclaration[492152-492158]"
  }, {
    "left" : "int dw",
    "right" : "int dw",
    "info" : "SingleVariableDeclaration[492130-492136]:SingleVariableDeclaration[492160-492166]"
  }, {
    "left" : "int dh",
    "right" : "int dh",
    "info" : "SingleVariableDeclaration[492138-492144]:SingleVariableDeclaration[492168-492174]"
  }, {
    "left" : "int mode",
    "right" : "int mode",
    "info" : "SingleVariableDeclaration[492146-492154]:SingleVariableDeclaration[492176-492184]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[492156-492292]:Block[492186-492322]"
  }, {
    "left" : "if (recorder != null)",
    "right" : "if (recorder != null)",
    "info" : "IfStatement[492162-492237]:IfStatement[492192-492267]"
  }, {
    "left" : "recorder.blend(sx, sy, sw, sh, dx, dy, dw, dh, mode);",
    "right" : "recorder.blend(sx, sy, sw, sh, dx, dy, dw, dh, mode);",
    "info" : "ExpressionStatement[492184-492237]:ExpressionStatement[492214-492267]"
  }, {
    "left" : "g.blend(sx, sy, sw, sh, dx, dy, dw, dh, mode);",
    "right" : "g.blend(sx, sy, sw, sh, dx, dy, dw, dh, mode);",
    "info" : "ExpressionStatement[492242-492288]:ExpressionStatement[492272-492318]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[495394-495400]:Modifier[495424-495430]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[495401-495405]:PrimitiveType[495431-495435]"
  }, {
    "left" : "PImage src",
    "right" : "PImage src",
    "info" : "SingleVariableDeclaration[495412-495422]:SingleVariableDeclaration[495442-495452]"
  }, {
    "left" : "int sx",
    "right" : "int sx",
    "info" : "SingleVariableDeclaration[495444-495450]:SingleVariableDeclaration[495474-495480]"
  }, {
    "left" : "int sy",
    "right" : "int sy",
    "info" : "SingleVariableDeclaration[495452-495458]:SingleVariableDeclaration[495482-495488]"
  }, {
    "left" : "int sw",
    "right" : "int sw",
    "info" : "SingleVariableDeclaration[495460-495466]:SingleVariableDeclaration[495490-495496]"
  }, {
    "left" : "int sh",
    "right" : "int sh",
    "info" : "SingleVariableDeclaration[495468-495474]:SingleVariableDeclaration[495498-495504]"
  }, {
    "left" : "int dx",
    "right" : "int dx",
    "info" : "SingleVariableDeclaration[495496-495502]:SingleVariableDeclaration[495526-495532]"
  }, {
    "left" : "int dy",
    "right" : "int dy",
    "info" : "SingleVariableDeclaration[495504-495510]:SingleVariableDeclaration[495534-495540]"
  }, {
    "left" : "int dw",
    "right" : "int dw",
    "info" : "SingleVariableDeclaration[495512-495518]:SingleVariableDeclaration[495542-495548]"
  }, {
    "left" : "int dh",
    "right" : "int dh",
    "info" : "SingleVariableDeclaration[495520-495526]:SingleVariableDeclaration[495550-495556]"
  }, {
    "left" : "int mode",
    "right" : "int mode",
    "info" : "SingleVariableDeclaration[495528-495536]:SingleVariableDeclaration[495558-495566]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[495538-495684]:Block[495568-495714]"
  }, {
    "left" : "if (recorder != null)",
    "right" : "if (recorder != null)",
    "info" : "IfStatement[495544-495624]:IfStatement[495574-495654]"
  }, {
    "left" : "recorder.blend(src, sx, sy, sw, sh, dx, dy, dw, dh, mode);",
    "right" : "recorder.blend(src, sx, sy, sw, sh, dx, dy, dw, dh, mode);",
    "info" : "ExpressionStatement[495566-495624]:ExpressionStatement[495596-495654]"
  }, {
    "left" : "g.blend(src, sx, sy, sw, sh, dx, dy, dw, dh, mode);",
    "right" : "g.blend(src, sx, sy, sw, sh, dx, dy, dw, dh, mode);",
    "info" : "ExpressionStatement[495629-495680]:ExpressionStatement[495659-495710]"
  } ]
}