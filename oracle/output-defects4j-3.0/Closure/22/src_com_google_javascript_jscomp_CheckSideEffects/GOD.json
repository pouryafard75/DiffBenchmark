{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "CheckSideEffects",
      "right" : "CheckSideEffects",
      "info" : "TypeDeclaration[1018-7469]:TypeDeclaration[1018-6504]"
    }, {
      "left" : "static final DiagnosticType USELESS_CODE_ERROR = DiagnosticType.warning(\n      \"JSC_USELESS_CODE\",\n      \"Suspicious code. {0}\");",
      "right" : "static final DiagnosticType USELESS_CODE_ERROR = DiagnosticType.warning(\n      \"JSC_USELESS_CODE\",\n      \"Suspicious code. {0}\");",
      "info" : "FieldDeclaration[1435-1564]:FieldDeclaration[1435-1564]"
    }, {
      "left" : "static final String PROTECTOR_FN = \"JSCOMPILER_PRESERVE\";",
      "right" : "static final String PROTECTOR_FN = \"JSCOMPILER_PRESERVE\";",
      "info" : "FieldDeclaration[1568-1625]:FieldDeclaration[1568-1625]"
    }, {
      "left" : "private final CheckLevel level;",
      "right" : "private final CheckLevel level;",
      "info" : "FieldDeclaration[1629-1660]:FieldDeclaration[1629-1660]"
    }, {
      "left" : "private final List<Node> problemNodes = Lists.newArrayList();",
      "right" : "private final List<Node> problemNodes = Lists.newArrayList();",
      "info" : "FieldDeclaration[1664-1725]:FieldDeclaration[1664-1725]"
    }, {
      "left" : "private final AbstractCompiler compiler;",
      "right" : "private final AbstractCompiler compiler;",
      "info" : "FieldDeclaration[1729-1769]:FieldDeclaration[1729-1769]"
    }, {
      "left" : "private final boolean protectSideEffectFreeCode;",
      "right" : "private final boolean protectSideEffectFreeCode;",
      "info" : "FieldDeclaration[1773-1821]:FieldDeclaration[1773-1821]"
    }, {
      "left" : "CheckSideEffects(AbstractCompiler compiler, CheckLevel level,\n      boolean protectSideEffectFreeCode)",
      "right" : "CheckSideEffects(AbstractCompiler compiler, CheckLevel level,\n      boolean protectSideEffectFreeCode)",
      "info" : "MethodDeclaration[1825-2051]:MethodDeclaration[1825-2051]"
    }, {
      "left" : "public void process(Node externs, Node root)",
      "right" : "public void process(Node externs, Node root)",
      "info" : "MethodDeclaration[2055-2508]:MethodDeclaration[2055-2508]"
    }, {
      "left" : "public void hotSwapScript(Node scriptRoot, Node originalRoot)",
      "right" : "public void hotSwapScript(Node scriptRoot, Node originalRoot)",
      "info" : "MethodDeclaration[2512-2647]:MethodDeclaration[2512-2647]"
    }, {
      "left" : "public void visit(NodeTraversal t, Node n, Node parent)",
      "right" : "public void visit(NodeTraversal t, Node n, Node parent)",
      "info" : "MethodDeclaration[2651-5392]:MethodDeclaration[2651-4427]"
    }, {
      "left" : "private void protectSideEffects()",
      "right" : "private void protectSideEffects()",
      "info" : "MethodDeclaration[5396-6069]:MethodDeclaration[4431-5104]"
    }, {
      "left" : "private void addExtern()",
      "right" : "private void addExtern()",
      "info" : "MethodDeclaration[6073-6590]:MethodDeclaration[5108-5625]"
    }, {
      "left" : "StripProtection",
      "right" : "StripProtection",
      "info" : "TypeDeclaration[6594-7467]:TypeDeclaration[5629-6502]"
    }, {
      "left" : "private final AbstractCompiler compiler;",
      "right" : "private final AbstractCompiler compiler;",
      "info" : "FieldDeclaration[6740-6780]:FieldDeclaration[5775-5815]"
    }, {
      "left" : "StripProtection(AbstractCompiler compiler)",
      "right" : "StripProtection(AbstractCompiler compiler)",
      "info" : "MethodDeclaration[6786-6868]:MethodDeclaration[5821-5903]"
    }, {
      "left" : "public void process(Node externs, Node root)",
      "right" : "public void process(Node externs, Node root)",
      "info" : "MethodDeclaration[6874-6992]:MethodDeclaration[5909-6027]"
    }, {
      "left" : "public void visit(NodeTraversal t, Node n, Node parent)",
      "right" : "public void visit(NodeTraversal t, Node n, Node parent)",
      "info" : "MethodDeclaration[6998-7463]:MethodDeclaration[6033-6498]"
    } ],
    "mappings" : [
 {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[1332-1337]:Modifier[1332-1337]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[1338-1343]:TYPE_DECLARATION_KIND[1338-1343]"
    }, {
      "left" : "CheckSideEffects",
      "right" : "CheckSideEffects",
      "info" : "SimpleName[1344-1360]:SimpleName[1344-1360]"
    }, {
      "left" : "AbstractPostOrderCallback",
      "right" : "AbstractPostOrderCallback",
      "info" : "SimpleType[1369-1394]:SimpleType[1369-1394]"
    }, {
      "left" : "HotSwapCompilerPass",
      "right" : "HotSwapCompilerPass",
      "info" : "SimpleType[1410-1429]:SimpleType[1410-1429]"
    }, {
      "left" : "CheckSideEffects",
      "right" : "CheckSideEffects",
      "info" : "SimpleName[1825-1841]:SimpleName[1825-1841]"
    }, {
      "left" : "AbstractCompiler compiler",
      "right" : "AbstractCompiler compiler",
      "info" : "SingleVariableDeclaration[1842-1867]:SingleVariableDeclaration[1842-1867]"
    }, {
      "left" : "CheckLevel level",
      "right" : "CheckLevel level",
      "info" : "SingleVariableDeclaration[1869-1885]:SingleVariableDeclaration[1869-1885]"
    }, {
      "left" : "boolean protectSideEffectFreeCode",
      "right" : "boolean protectSideEffectFreeCode",
      "info" : "SingleVariableDeclaration[1893-1926]:SingleVariableDeclaration[1893-1926]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1928-2051]:Block[1928-2051]"
    }, {
      "left" : "this.compiler = compiler;",
      "right" : "this.compiler = compiler;",
      "info" : "ExpressionStatement[1934-1959]:ExpressionStatement[1934-1959]"
    }, {
      "left" : "this.level = level;",
      "right" : "this.level = level;",
      "info" : "ExpressionStatement[1964-1983]:ExpressionStatement[1964-1983]"
    }, {
      "left" : "this.protectSideEffectFreeCode = protectSideEffectFreeCode;",
      "right" : "this.protectSideEffectFreeCode = protectSideEffectFreeCode;",
      "info" : "ExpressionStatement[1988-2047]:ExpressionStatement[1988-2047]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[2055-2064]:MarkerAnnotation[2055-2064]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[2067-2073]:Modifier[2067-2073]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[2074-2078]:PrimitiveType[2074-2078]"
    }, {
      "left" : "process",
      "right" : "process",
      "info" : "SimpleName[2079-2086]:SimpleName[2079-2086]"
    }, {
      "left" : "Node externs",
      "right" : "Node externs",
      "info" : "SingleVariableDeclaration[2087-2099]:SingleVariableDeclaration[2087-2099]"
    }, {
      "left" : "Node root",
      "right" : "Node root",
      "info" : "SingleVariableDeclaration[2101-2110]:SingleVariableDeclaration[2101-2110]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2112-2508]:Block[2112-2508]"
    }, {
      "left" : "NodeTraversal.traverse(compiler, root, this);",
      "right" : "NodeTraversal.traverse(compiler, root, this);",
      "info" : "ExpressionStatement[2118-2163]:ExpressionStatement[2118-2163]"
    }, {
      "left" : "if (protectSideEffectFreeCode)",
      "right" : "if (protectSideEffectFreeCode)",
      "info" : "IfStatement[2438-2504]:IfStatement[2438-2504]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2469-2504]:Block[2469-2504]"
    }, {
      "left" : "protectSideEffects();",
      "right" : "protectSideEffects();",
      "info" : "ExpressionStatement[2477-2498]:ExpressionStatement[2477-2498]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[2512-2521]:MarkerAnnotation[2512-2521]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[2524-2530]:Modifier[2524-2530]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[2531-2535]:PrimitiveType[2531-2535]"
    }, {
      "left" : "hotSwapScript",
      "right" : "hotSwapScript",
      "info" : "SimpleName[2536-2549]:SimpleName[2536-2549]"
    }, {
      "left" : "Node scriptRoot",
      "right" : "Node scriptRoot",
      "info" : "SingleVariableDeclaration[2550-2565]:SingleVariableDeclaration[2550-2565]"
    }, {
      "left" : "Node originalRoot",
      "right" : "Node originalRoot",
      "info" : "SingleVariableDeclaration[2567-2584]:SingleVariableDeclaration[2567-2584]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2586-2647]:Block[2586-2647]"
    }, {
      "left" : "NodeTraversal.traverse(compiler, scriptRoot, this);",
      "right" : "NodeTraversal.traverse(compiler, scriptRoot, this);",
      "info" : "ExpressionStatement[2592-2643]:ExpressionStatement[2592-2643]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[2651-2660]:MarkerAnnotation[2651-2660]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[2663-2669]:Modifier[2663-2669]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[2670-2674]:PrimitiveType[2670-2674]"
    }, {
      "left" : "visit",
      "right" : "visit",
      "info" : "SimpleName[2675-2680]:SimpleName[2675-2680]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[2681-2696]:SingleVariableDeclaration[2681-2696]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[2698-2704]:SingleVariableDeclaration[2698-2704]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[2706-2717]:SingleVariableDeclaration[2706-2717]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2719-5392]:Block[2719-4427]"
    }, {
      "left" : "if (n.isEmpty() ||\n        n.isComma())",
      "right" : "if (n.isEmpty() ||\n        n.isComma())",
      "info" : "IfStatement[2974-3035]:IfStatement[2974-3035]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3014-3035]:Block[3014-3035]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[3022-3029]:ReturnStatement[3022-3029]"
    }, {
      "left" : "if (parent == null)",
      "right" : "if (parent == null)",
      "info" : "IfStatement[3041-3082]:IfStatement[3041-3082]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3061-3082]:Block[3061-3082]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[3069-3076]:ReturnStatement[3069-3076]"
    }, {
      "left" : "boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);",
      "right" : "boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);",
      "info" : "VariableDeclarationStatement[4415-4473]:VariableDeclarationStatement[3588-3646]"
    }, {
      "left" : "boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());",
      "right" : "boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());",
      "info" : "VariableDeclarationStatement[4478-4542]:VariableDeclarationStatement[3651-3715]"
    }, {
      "left" : "if (!isResultUsed &&\n        (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler())))",
      "right" : "if (!isResultUsed &&\n        (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler())))",
      "info" : "IfStatement[4547-5388]:IfStatement[3720-4423]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4642-5388]:Block[3815-4423]"
    }, {
      "left" : "if (n.isQualifiedName() && n.getJSDocInfo() != null)",
      "right" : "if (n.isQualifiedName() && n.getJSDocInfo() != null)",
      "info" : "IfStatement[4650-4781]:IfStatement[3508-3582]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4703-4728]:Block[3561-3582]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[4713-4720]:ReturnStatement[3569-3576]"
    }, {
      "left" : "if (n.isExprResult())",
      "right" : "if (n.isExprResult() || n.isBlock())",
      "info" : "IfStatement[4734-4781]:IfStatement[3301-3359]"
    }, {
      "left" : "n.isExprResult()",
      "right" : "n.isExprResult()",
      "info" : "MethodInvocation[4738-4754]:MethodInvocation[3305-3321]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4756-4781]:Block[3338-3359]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[4766-4773]:ReturnStatement[3346-3353]"
    }, {
      "left" : "String msg = \"This code lacks side-effects. Is there a bug?\";",
      "right" : "String msg = \"This code lacks side-effects. Is there a bug?\";",
      "info" : "VariableDeclarationStatement[4788-4849]:VariableDeclarationStatement[3823-3884]"
    }, {
      "left" : "if (n.isString())",
      "right" : "if (n.isString())",
      "info" : "IfStatement[4856-5099]:IfStatement[3891-4134]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4874-4945]:Block[3909-3980]"
    }, {
      "left" : "msg = \"Is there a missing '+' on the previous line?\";",
      "right" : "msg = \"Is there a missing '+' on the previous line?\";",
      "info" : "ExpressionStatement[4884-4937]:ExpressionStatement[3919-3972]"
    }, {
      "left" : "if (isSimpleOp)",
      "right" : "if (isSimpleOp)",
      "info" : "IfStatement[4951-5099]:IfStatement[3986-4134]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4967-5099]:Block[4002-4134]"
    }, {
      "left" : "msg = \"The result of the '\" + Token.name(n.getType()).toLowerCase() +\n            \"' operator is not being used.\";",
      "right" : "msg = \"The result of the '\" + Token.name(n.getType()).toLowerCase() +\n            \"' operator is not being used.\";",
      "info" : "ExpressionStatement[4977-5091]:ExpressionStatement[4012-4126]"
    }, {
      "left" : "t.getCompiler().report(\n          t.makeError(n, level, USELESS_CODE_ERROR, msg));",
      "right" : "t.getCompiler().report(\n          t.makeError(n, level, USELESS_CODE_ERROR, msg));",
      "info" : "ExpressionStatement[5107-5189]:ExpressionStatement[4142-4224]"
    }, {
      "left" : "if (!NodeUtil.isStatement(n))",
      "right" : "if (!NodeUtil.isStatement(n))",
      "info" : "IfStatement[5314-5382]:IfStatement[4349-4417]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5344-5382]:Block[4379-4417]"
    }, {
      "left" : "problemNodes.add(n);",
      "right" : "problemNodes.add(n);",
      "info" : "ExpressionStatement[5354-5374]:ExpressionStatement[4389-4409]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[5579-5586]:Modifier[4614-4621]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[5587-5591]:PrimitiveType[4622-4626]"
    }, {
      "left" : "protectSideEffects",
      "right" : "protectSideEffects",
      "info" : "SimpleName[5592-5610]:SimpleName[4627-4645]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5613-6069]:Block[4648-5104]"
    }, {
      "left" : "if (!problemNodes.isEmpty())",
      "right" : "if (!problemNodes.isEmpty())",
      "info" : "IfStatement[5619-6065]:IfStatement[4654-5100]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5648-6065]:Block[4683-5100]"
    }, {
      "left" : "addExtern();",
      "right" : "addExtern();",
      "info" : "ExpressionStatement[5656-5668]:ExpressionStatement[4691-4703]"
    }, {
      "left" : "for (Node n : problemNodes)",
      "right" : "for (Node n : problemNodes)",
      "info" : "EnhancedForStatement[5675-6024]:EnhancedForStatement[4710-5059]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5703-6024]:Block[4738-5059]"
    }, {
      "left" : "Node name = IR.name(PROTECTOR_FN).srcref(n);",
      "right" : "Node name = IR.name(PROTECTOR_FN).srcref(n);",
      "info" : "VariableDeclarationStatement[5713-5757]:VariableDeclarationStatement[4748-4792]"
    }, {
      "left" : "name.putBooleanProp(Node.IS_CONSTANT_NAME, true);",
      "right" : "name.putBooleanProp(Node.IS_CONSTANT_NAME, true);",
      "info" : "ExpressionStatement[5766-5815]:ExpressionStatement[4801-4850]"
    }, {
      "left" : "Node replacement = IR.call(name).srcref(n);",
      "right" : "Node replacement = IR.call(name).srcref(n);",
      "info" : "VariableDeclarationStatement[5824-5867]:VariableDeclarationStatement[4859-4902]"
    }, {
      "left" : "replacement.putBooleanProp(Node.FREE_CALL, true);",
      "right" : "replacement.putBooleanProp(Node.FREE_CALL, true);",
      "info" : "ExpressionStatement[5876-5925]:ExpressionStatement[4911-4960]"
    }, {
      "left" : "n.getParent().replaceChild(n, replacement);",
      "right" : "n.getParent().replaceChild(n, replacement);",
      "info" : "ExpressionStatement[5934-5977]:ExpressionStatement[4969-5012]"
    }, {
      "left" : "replacement.addChildToBack(n);",
      "right" : "replacement.addChildToBack(n);",
      "info" : "ExpressionStatement[5986-6016]:ExpressionStatement[5021-5051]"
    }, {
      "left" : "compiler.reportCodeChange();",
      "right" : "compiler.reportCodeChange();",
      "info" : "ExpressionStatement[6031-6059]:ExpressionStatement[5066-5094]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[6073-6080]:Modifier[5108-5115]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[6081-6085]:PrimitiveType[5116-5120]"
    }, {
      "left" : "addExtern",
      "right" : "addExtern",
      "info" : "SimpleName[6086-6095]:SimpleName[5121-5130]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6098-6590]:Block[5133-5625]"
    }, {
      "left" : "Node name = IR.name(PROTECTOR_FN);",
      "right" : "Node name = IR.name(PROTECTOR_FN);",
      "info" : "VariableDeclarationStatement[6104-6138]:VariableDeclarationStatement[5139-5173]"
    }, {
      "left" : "name.putBooleanProp(Node.IS_CONSTANT_NAME, true);",
      "right" : "name.putBooleanProp(Node.IS_CONSTANT_NAME, true);",
      "info" : "ExpressionStatement[6143-6192]:ExpressionStatement[5178-5227]"
    }, {
      "left" : "Node var = IR.var(name);",
      "right" : "Node var = IR.var(name);",
      "info" : "VariableDeclarationStatement[6197-6221]:VariableDeclarationStatement[5232-5256]"
    }, {
      "left" : "JSDocInfoBuilder builder = new JSDocInfoBuilder(false);",
      "right" : "JSDocInfoBuilder builder = new JSDocInfoBuilder(false);",
      "info" : "VariableDeclarationStatement[6307-6362]:VariableDeclarationStatement[5342-5397]"
    }, {
      "left" : "builder.recordNoAlias();",
      "right" : "builder.recordNoAlias();",
      "info" : "ExpressionStatement[6367-6391]:ExpressionStatement[5402-5426]"
    }, {
      "left" : "var.setJSDocInfo(builder.build(var));",
      "right" : "var.setJSDocInfo(builder.build(var));",
      "info" : "ExpressionStatement[6396-6433]:ExpressionStatement[5431-5468]"
    }, {
      "left" : "CompilerInput input = compiler.getSynthesizedExternsInput();",
      "right" : "CompilerInput input = compiler.getSynthesizedExternsInput();",
      "info" : "VariableDeclarationStatement[6438-6498]:VariableDeclarationStatement[5473-5533]"
    }, {
      "left" : "input.getAstRoot(compiler).addChildrenToBack(var);",
      "right" : "input.getAstRoot(compiler).addChildrenToBack(var);",
      "info" : "ExpressionStatement[6503-6553]:ExpressionStatement[5538-5588]"
    }, {
      "left" : "compiler.reportCodeChange();",
      "right" : "compiler.reportCodeChange();",
      "info" : "ExpressionStatement[6558-6586]:ExpressionStatement[5593-5621]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[6646-6652]:Modifier[5681-5687]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[6653-6658]:TYPE_DECLARATION_KIND[5688-5693]"
    }, {
      "left" : "StripProtection",
      "right" : "StripProtection",
      "info" : "SimpleName[6659-6674]:SimpleName[5694-5709]"
    }, {
      "left" : "AbstractPostOrderCallback",
      "right" : "AbstractPostOrderCallback",
      "info" : "SimpleType[6683-6708]:SimpleType[5718-5743]"
    }, {
      "left" : "CompilerPass",
      "right" : "CompilerPass",
      "info" : "SimpleType[6720-6732]:SimpleType[5755-5767]"
    }, {
      "left" : "StripProtection",
      "right" : "StripProtection",
      "info" : "SimpleName[6786-6801]:SimpleName[5821-5836]"
    }, {
      "left" : "AbstractCompiler compiler",
      "right" : "AbstractCompiler compiler",
      "info" : "SingleVariableDeclaration[6802-6827]:SingleVariableDeclaration[5837-5862]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6829-6868]:Block[5864-5903]"
    }, {
      "left" : "this.compiler = compiler;",
      "right" : "this.compiler = compiler;",
      "info" : "ExpressionStatement[6837-6862]:ExpressionStatement[5872-5897]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[6874-6883]:MarkerAnnotation[5909-5918]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[6888-6894]:Modifier[5923-5929]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[6895-6899]:PrimitiveType[5930-5934]"
    }, {
      "left" : "process",
      "right" : "process",
      "info" : "SimpleName[6900-6907]:SimpleName[5935-5942]"
    }, {
      "left" : "Node externs",
      "right" : "Node externs",
      "info" : "SingleVariableDeclaration[6908-6920]:SingleVariableDeclaration[5943-5955]"
    }, {
      "left" : "Node root",
      "right" : "Node root",
      "info" : "SingleVariableDeclaration[6922-6931]:SingleVariableDeclaration[5957-5966]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6933-6992]:Block[5968-6027]"
    }, {
      "left" : "NodeTraversal.traverse(compiler, root, this);",
      "right" : "NodeTraversal.traverse(compiler, root, this);",
      "info" : "ExpressionStatement[6941-6986]:ExpressionStatement[5976-6021]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[6998-7007]:MarkerAnnotation[6033-6042]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[7012-7018]:Modifier[6047-6053]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[7019-7023]:PrimitiveType[6054-6058]"
    }, {
      "left" : "visit",
      "right" : "visit",
      "info" : "SimpleName[7024-7029]:SimpleName[6059-6064]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[7030-7045]:SingleVariableDeclaration[6065-6080]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[7047-7053]:SingleVariableDeclaration[6082-6088]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[7055-7066]:SingleVariableDeclaration[6090-6101]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7068-7463]:Block[6103-6498]"
    }, {
      "left" : "if (n.isCall())",
      "right" : "if (n.isCall())",
      "info" : "IfStatement[7076-7457]:IfStatement[6111-6492]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7092-7457]:Block[6127-6492]"
    }, {
      "left" : "Node target = n.getFirstChild();",
      "right" : "Node target = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[7102-7134]:VariableDeclarationStatement[6137-6169]"
    }, {
      "left" : "if (target.isName() && target.getString().equals(PROTECTOR_FN))",
      "right" : "if (target.isName() && target.getString().equals(PROTECTOR_FN))",
      "info" : "IfStatement[7264-7449]:IfStatement[6299-6484]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7328-7449]:Block[6363-6484]"
    }, {
      "left" : "Node expr = n.getLastChild();",
      "right" : "Node expr = n.getLastChild();",
      "info" : "VariableDeclarationStatement[7340-7369]:VariableDeclarationStatement[6375-6404]"
    }, {
      "left" : "n.detachChildren();",
      "right" : "n.detachChildren();",
      "info" : "ExpressionStatement[7380-7399]:ExpressionStatement[6415-6434]"
    }, {
      "left" : "parent.replaceChild(n, expr);",
      "right" : "parent.replaceChild(n, expr);",
      "info" : "ExpressionStatement[7410-7439]:ExpressionStatement[6445-6474]"
    } ]
  },
  "interFileMappings" : { }
}