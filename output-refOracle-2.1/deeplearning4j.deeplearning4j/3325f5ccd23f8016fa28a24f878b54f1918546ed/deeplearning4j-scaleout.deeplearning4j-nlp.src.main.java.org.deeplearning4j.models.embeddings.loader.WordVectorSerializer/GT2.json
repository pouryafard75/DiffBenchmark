{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "WordVectorSerializer",
      "right" : "WordVectorSerializer",
      "info" : "TypeDeclaration[2095-16706]:TypeDeclaration[2095-17828]"
    }, {
      "left" : "private static final int MAX_SIZE = 50;",
      "right" : "private static final int MAX_SIZE = 50;",
      "info" : "FieldDeclaration[2197-2236]:FieldDeclaration[2257-2296]"
    }, {
      "left" : "private static final Logger log = LoggerFactory.getLogger(WordVectorSerializer.class);",
      "right" : "private static final Logger log = LoggerFactory.getLogger(WordVectorSerializer.class);",
      "info" : "FieldDeclaration[2241-2327]:FieldDeclaration[2301-2387]"
    }, {
      "left" : "public static Word2Vec loadGoogleModel(File modelFile, boolean binary)\n        throws IOException",
      "right" : "public static Word2Vec loadGoogleModel(File modelFile, boolean binary)\n        throws IOException",
      "info" : "MethodDeclaration[2333-2815]:MethodDeclaration[2393-2867]"
    }, {
      "left" : "private static Word2Vec readTextModel(File modelFile)\n        throws  IOException, NumberFormatException",
      "right" : "private static Word2Vec readTextModel(File modelFile)\n        throws IOException, NumberFormatException",
      "info" : "MethodDeclaration[2821-4607]:MethodDeclaration[3665-5375]"
    }, {
      "left" : "private static Word2Vec readBinaryModel(File modelFile)\n        throws NumberFormatException, IOException",
      "right" : "private static Word2Vec readBinaryModel(File modelFile, boolean linebreaks)\n        throws NumberFormatException, IOException",
      "info" : "MethodDeclaration[4613-6555]:MethodDeclaration[5381-7612]"
    }, {
      "left" : "public static float readFloat(InputStream is) throws IOException",
      "right" : "public static float readFloat(InputStream is)\n        throws IOException",
      "info" : "MethodDeclaration[6562-6956]:MethodDeclaration[7618-8024]"
    }, {
      "left" : "public static float getFloat(byte[] b)",
      "right" : "public static float getFloat(byte[] b)",
      "info" : "MethodDeclaration[6962-7483]:MethodDeclaration[8030-8555]"
    }, {
      "left" : "public static String readString(DataInputStream dis)\n        throws IOException",
      "right" : "public static String readString(DataInputStream dis)\n        throws IOException",
      "info" : "MethodDeclaration[7490-8312]:MethodDeclaration[8561-9383]"
    }, {
      "left" : "public static void writeWordVectors(InMemoryLookupTable lookupTable, InMemoryLookupCache cache,\n            String path)\n        throws IOException",
      "right" : "public static void writeWordVectors(InMemoryLookupTable lookupTable, InMemoryLookupCache cache,\n            String path)\n                throws IOException",
      "info" : "MethodDeclaration[8318-9540]:MethodDeclaration[9389-10631]"
    }, {
      "left" : "public static void writeWordVectors(Word2Vec vec, String path)\n        throws IOException",
      "right" : "public static void writeWordVectors(Word2Vec vec, String path)\n        throws IOException",
      "info" : "MethodDeclaration[9546-10799]:MethodDeclaration[10637-11890]"
    }, {
      "left" : "public static WordVectors fromTableAndVocab(WeightLookupTable table, VocabCache vocab)",
      "right" : "public static WordVectors fromTableAndVocab(WeightLookupTable table, VocabCache vocab)",
      "info" : "MethodDeclaration[10805-11303]:MethodDeclaration[11896-12394]"
    }, {
      "left" : "public static WordVectors fromPair(Pair<InMemoryLookupTable, VocabCache> pair)",
      "right" : "public static WordVectors fromPair(Pair<InMemoryLookupTable, VocabCache> pair)",
      "info" : "MethodDeclaration[11309-11776]:MethodDeclaration[12400-12871]"
    }, {
      "left" : "public static WordVectors loadTxtVectors(File vectorsFile)\n        throws FileNotFoundException",
      "right" : "public static WordVectors loadTxtVectors(File vectorsFile)\n        throws FileNotFoundException",
      "info" : "MethodDeclaration[11782-12245]:MethodDeclaration[12877-13363]"
    }, {
      "left" : "public static Pair<InMemoryLookupTable, VocabCache> loadTxt(File vectorsFile)\n        throws FileNotFoundException",
      "right" : "public static Pair<InMemoryLookupTable, VocabCache> loadTxt(File vectorsFile)\n        throws FileNotFoundException",
      "info" : "MethodDeclaration[12251-14056]:MethodDeclaration[13369-15178]"
    }, {
      "left" : "public static void writeTsneFormat(Glove vec, INDArray tsne, File csv)\n        throws Exception",
      "right" : "public static void writeTsneFormat(Glove vec, INDArray tsne, File csv)\n        throws Exception",
      "info" : "MethodDeclaration[14062-15381]:MethodDeclaration[15184-16503]"
    }, {
      "left" : "public static void writeTsneFormat(Word2Vec vec, INDArray tsne, File csv)\n        throws Exception",
      "right" : "public static void writeTsneFormat(Word2Vec vec, INDArray tsne, File csv)\n        throws Exception",
      "info" : "MethodDeclaration[15387-16703]:MethodDeclaration[16509-17825]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2729-2815]:Block[2789-2867]"
    }, {
      "left" : "return binary ? readBinaryModel(modelFile) : readTextModel(modelFile);",
      "right" : "return loadGoogleModel(modelFile, binary, DEFAULT_LINEBREAKS);",
      "info" : "ReturnStatement[2739-2809]:ReturnStatement[2799-2861]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3086-4607]:Block[3929-5375]"
    }, {
      "left" : "InMemoryLookupTable lookupTable;",
      "right" : "InMemoryLookupTable lookupTable;",
      "info" : "VariableDeclarationStatement[3096-3128]:VariableDeclarationStatement[3939-3971]"
    }, {
      "left" : "VocabCache cache;",
      "right" : "VocabCache cache;",
      "info" : "VariableDeclarationStatement[3137-3154]:VariableDeclarationStatement[3980-3997]"
    }, {
      "left" : "INDArray syn0;",
      "right" : "INDArray syn0;",
      "info" : "VariableDeclarationStatement[3163-3177]:VariableDeclarationStatement[4006-4020]"
    }, {
      "left" : "BufferedReader reader = new BufferedReader(new FileReader(modelFile));",
      "right" : "BufferedReader reader = new BufferedReader(new FileReader(modelFile));",
      "info" : "VariableDeclarationStatement[3186-3256]:VariableDeclarationStatement[4029-4099]"
    }, {
      "left" : "String line = reader.readLine();",
      "right" : "String line = reader.readLine();",
      "info" : "VariableDeclarationStatement[3265-3297]:VariableDeclarationStatement[4108-4140]"
    }, {
      "left" : "String[] initial = line.split(\" \");",
      "right" : "String[] initial = line.split(\" \");",
      "info" : "VariableDeclarationStatement[3306-3341]:VariableDeclarationStatement[4149-4184]"
    }, {
      "left" : "int words = Integer.parseInt(initial[0]);",
      "right" : "int words = Integer.parseInt(initial[0]);",
      "info" : "VariableDeclarationStatement[3350-3391]:VariableDeclarationStatement[4193-4234]"
    }, {
      "left" : "int layerSize = Integer.parseInt(initial[1]);",
      "right" : "int layerSize = Integer.parseInt(initial[1]);",
      "info" : "VariableDeclarationStatement[3400-3445]:VariableDeclarationStatement[4243-4288]"
    }, {
      "left" : "syn0 = Nd4j.create(words, layerSize);",
      "right" : "syn0 = Nd4j.create(words, layerSize);",
      "info" : "ExpressionStatement[3454-3491]:ExpressionStatement[4297-4334]"
    }, {
      "left" : "cache = new InMemoryLookupCache();",
      "right" : "cache = new InMemoryLookupCache();",
      "info" : "ExpressionStatement[3501-3535]:ExpressionStatement[4344-4378]"
    }, {
      "left" : "int currLine = 0;",
      "right" : "int currLine = 0;",
      "info" : "VariableDeclarationStatement[3545-3562]:VariableDeclarationStatement[4388-4405]"
    }, {
      "left" : "while ((line = reader.readLine()) != null)",
      "right" : "while ((line = reader.readLine()) != null)",
      "info" : "WhileStatement[3571-4269]:WhileStatement[4414-5037]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3614-4269]:Block[4457-5037]"
    }, {
      "left" : "String[] split = line.split(\" \");",
      "right" : "String[] split = line.split(\" \");",
      "info" : "VariableDeclarationStatement[3628-3661]:VariableDeclarationStatement[4471-4504]"
    }, {
      "left" : "assert split.length == layerSize + 1;",
      "right" : "assert split.length == layerSize + 1;",
      "info" : "AssertStatement[3674-3711]:AssertStatement[4517-4554]"
    }, {
      "left" : "String word = split[0];",
      "right" : "String word = split[0];",
      "info" : "VariableDeclarationStatement[3724-3747]:VariableDeclarationStatement[4567-4590]"
    }, {
      "left" : "float[] vector = new float[split.length - 1];",
      "right" : "float[] vector = new float[split.length - 1];",
      "info" : "VariableDeclarationStatement[3836-3881]:VariableDeclarationStatement[4604-4649]"
    }, {
      "left" : "for (int i = 1; i < split.length; i++)",
      "right" : "for (int i = 1; i < split.length; i++)",
      "info" : "ForStatement[3894-4008]:ForStatement[4662-4776]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3933-4008]:Block[4701-4776]"
    }, {
      "left" : "vector[i - 1] = Float.parseFloat(split[i]);",
      "right" : "vector[i - 1] = Float.parseFloat(split[i]);",
      "info" : "ExpressionStatement[3951-3994]:ExpressionStatement[4719-4762]"
    }, {
      "left" : "syn0.putRow(currLine, Transforms.unitVec(Nd4j.create(vector)));",
      "right" : "syn0.putRow(currLine, Transforms.unitVec(Nd4j.create(vector)));",
      "info" : "ExpressionStatement[4022-4085]:ExpressionStatement[4790-4853]"
    }, {
      "left" : "cache.addWordToIndex(cache.numWords(), word);",
      "right" : "cache.addWordToIndex(cache.numWords(), word);",
      "info" : "ExpressionStatement[4099-4144]:ExpressionStatement[4867-4912]"
    }, {
      "left" : "cache.addToken(new VocabWord(1, word));",
      "right" : "cache.addToken(new VocabWord(1, word));",
      "info" : "ExpressionStatement[4157-4196]:ExpressionStatement[4925-4964]"
    }, {
      "left" : "cache.putVocabWord(word);",
      "right" : "cache.putVocabWord(word);",
      "info" : "ExpressionStatement[4209-4234]:ExpressionStatement[4977-5002]"
    }, {
      "left" : "currLine++;",
      "right" : "currLine++;",
      "info" : "ExpressionStatement[4248-4259]:ExpressionStatement[5016-5027]"
    }, {
      "left" : "lookupTable = (InMemoryLookupTable) new InMemoryLookupTable.Builder().cache(cache)\n                .vectorLength(layerSize).build();",
      "right" : "lookupTable = (InMemoryLookupTable) new InMemoryLookupTable.Builder().cache(cache)\n                .vectorLength(layerSize).build();",
      "info" : "ExpressionStatement[4279-4411]:ExpressionStatement[5047-5179]"
    }, {
      "left" : "lookupTable.setSyn0(syn0);",
      "right" : "lookupTable.setSyn0(syn0);",
      "info" : "ExpressionStatement[4420-4446]:ExpressionStatement[5188-5214]"
    }, {
      "left" : "Word2Vec ret = new Word2Vec();",
      "right" : "Word2Vec ret = new Word2Vec();",
      "info" : "VariableDeclarationStatement[4456-4486]:VariableDeclarationStatement[5224-5254]"
    }, {
      "left" : "ret.setVocab(cache);",
      "right" : "ret.setVocab(cache);",
      "info" : "ExpressionStatement[4495-4515]:ExpressionStatement[5263-5283]"
    }, {
      "left" : "ret.setLookupTable(lookupTable);",
      "right" : "ret.setLookupTable(lookupTable);",
      "info" : "ExpressionStatement[4524-4556]:ExpressionStatement[5292-5324]"
    }, {
      "left" : "reader.close();",
      "right" : "reader.close();",
      "info" : "ExpressionStatement[4566-4581]:ExpressionStatement[5334-5349]"
    }, {
      "left" : "return ret;",
      "right" : "return ret;",
      "info" : "ReturnStatement[4590-4601]:ReturnStatement[5358-5369]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4892-6555]:Block[5930-7612]"
    }, {
      "left" : "InMemoryLookupTable lookupTable;",
      "right" : "InMemoryLookupTable lookupTable;",
      "info" : "VariableDeclarationStatement[4902-4934]:VariableDeclarationStatement[5940-5972]"
    }, {
      "left" : "VocabCache cache;",
      "right" : "VocabCache cache;",
      "info" : "VariableDeclarationStatement[4943-4960]:VariableDeclarationStatement[5981-5998]"
    }, {
      "left" : "INDArray syn0;",
      "right" : "INDArray syn0;",
      "info" : "VariableDeclarationStatement[4969-4983]:VariableDeclarationStatement[6007-6021]"
    }, {
      "left" : "int words, size;",
      "right" : "int words, size;",
      "info" : "VariableDeclarationStatement[4992-5008]:VariableDeclarationStatement[6030-6046]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[5017-6383]:TryStatement[6055-7439]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5341-6383]:Block[6380-7439]"
    }, {
      "left" : "words = Integer.parseInt(readString(dis));",
      "right" : "words = Integer.parseInt(readString(dis));",
      "info" : "ExpressionStatement[5355-5397]:ExpressionStatement[6394-6436]"
    }, {
      "left" : "size = Integer.parseInt(readString(dis));",
      "right" : "size = Integer.parseInt(readString(dis));",
      "info" : "ExpressionStatement[5410-5451]:ExpressionStatement[6449-6490]"
    }, {
      "left" : "syn0 = Nd4j.create(words, size);",
      "right" : "syn0 = Nd4j.create(words, size);",
      "info" : "ExpressionStatement[5464-5496]:ExpressionStatement[6503-6535]"
    }, {
      "left" : "cache = new InMemoryLookupCache(false);",
      "right" : "cache = new InMemoryLookupCache(false);",
      "info" : "ExpressionStatement[5509-5548]:ExpressionStatement[6548-6587]"
    }, {
      "left" : "lookupTable = (InMemoryLookupTable) new InMemoryLookupTable.Builder().cache(cache)\n                    .vectorLength(size).build();",
      "right" : "lookupTable = (InMemoryLookupTable) new InMemoryLookupTable.Builder().cache(cache)\n                    .vectorLength(size).build();",
      "info" : "ExpressionStatement[5561-5692]:ExpressionStatement[6600-6731]"
    }, {
      "left" : "String word;",
      "right" : "String word;",
      "info" : "VariableDeclarationStatement[5706-5718]:VariableDeclarationStatement[6745-6757]"
    }, {
      "left" : "for (int i = 0; i < words; i++)",
      "right" : "for (int i = 0; i < words; i++)",
      "info" : "ForStatement[5731-6373]:ForStatement[6770-7429]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5763-6373]:Block[6802-7429]"
    }, {
      "left" : "word = readString(dis);",
      "right" : "word = readString(dis);",
      "info" : "ExpressionStatement[5782-5805]:ExpressionStatement[6821-6844]"
    }, {
      "left" : "log.trace(\"Loading \" + word + \" with word \" + i);",
      "right" : "log.trace(\"Loading \" + word + \" with word \" + i);",
      "info" : "ExpressionStatement[5822-5871]:ExpressionStatement[6861-6910]"
    }, {
      "left" : "if (word.isEmpty())",
      "right" : "if (linebreaks)",
      "info" : "IfStatement[5888-5957]:IfStatement[7330-7415]"
    }, {
      "left" : "float[] vector = new float[size];",
      "right" : "float[] vector = new float[size];",
      "info" : "VariableDeclarationStatement[5975-6008]:VariableDeclarationStatement[6928-6961]"
    }, {
      "left" : "for (int j = 0; j < size; j++)",
      "right" : "for (int j = 0; j < size; j++)",
      "info" : "ForStatement[6026-6124]:ForStatement[6979-7077]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6057-6124]:Block[7010-7077]"
    }, {
      "left" : "vector[j] = readFloat(dis);",
      "right" : "vector[j] = readFloat(dis);",
      "info" : "ExpressionStatement[6079-6106]:ExpressionStatement[7032-7059]"
    }, {
      "left" : "syn0.putRow(i, Transforms.unitVec(Nd4j.create(vector)));",
      "right" : "syn0.putRow(i, Transforms.unitVec(Nd4j.create(vector)));",
      "info" : "ExpressionStatement[6142-6198]:ExpressionStatement[7095-7151]"
    }, {
      "left" : "cache.addWordToIndex(cache.numWords(), word);",
      "right" : "cache.addWordToIndex(cache.numWords(), word);",
      "info" : "ExpressionStatement[6216-6261]:ExpressionStatement[7169-7214]"
    }, {
      "left" : "cache.addToken(new VocabWord(1, word));",
      "right" : "cache.addToken(new VocabWord(1, word));",
      "info" : "ExpressionStatement[6278-6317]:ExpressionStatement[7231-7270]"
    }, {
      "left" : "cache.putVocabWord(word);",
      "right" : "cache.putVocabWord(word);",
      "info" : "ExpressionStatement[6334-6359]:ExpressionStatement[7287-7312]"
    }, {
      "left" : "Word2Vec ret = new Word2Vec();",
      "right" : "Word2Vec ret = new Word2Vec();",
      "info" : "VariableDeclarationStatement[6393-6423]:VariableDeclarationStatement[7449-7479]"
    }, {
      "left" : "lookupTable.setSyn0(syn0);",
      "right" : "lookupTable.setSyn0(syn0);",
      "info" : "ExpressionStatement[6433-6459]:ExpressionStatement[7489-7515]"
    }, {
      "left" : "ret.setVocab(cache);",
      "right" : "ret.setVocab(cache);",
      "info" : "ExpressionStatement[6468-6488]:ExpressionStatement[7524-7544]"
    }, {
      "left" : "ret.setLookupTable(lookupTable);",
      "right" : "ret.setLookupTable(lookupTable);",
      "info" : "ExpressionStatement[6497-6529]:ExpressionStatement[7553-7585]"
    }, {
      "left" : "return ret;",
      "right" : "return ret;",
      "info" : "ReturnStatement[6538-6549]:ReturnStatement[7594-7605]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6857-6956]:Block[7925-8024]"
    }, {
      "left" : "byte[] bytes = new byte[4];",
      "right" : "byte[] bytes = new byte[4];",
      "info" : "VariableDeclarationStatement[6867-6894]:VariableDeclarationStatement[7935-7962]"
    }, {
      "left" : "is.read(bytes);",
      "right" : "is.read(bytes);",
      "info" : "ExpressionStatement[6903-6918]:ExpressionStatement[7971-7986]"
    }, {
      "left" : "return getFloat(bytes);",
      "right" : "return getFloat(bytes);",
      "info" : "ReturnStatement[6927-6950]:ReturnStatement[7995-8018]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7231-7483]:Block[8303-8555]"
    }, {
      "left" : "int accum = 0;",
      "right" : "int accum = 0;",
      "info" : "VariableDeclarationStatement[7241-7255]:VariableDeclarationStatement[8313-8327]"
    }, {
      "left" : "accum = accum | (b[0] & 0xff) << 0;",
      "right" : "accum = accum | (b[0] & 0xff) << 0;",
      "info" : "ExpressionStatement[7264-7299]:ExpressionStatement[8336-8371]"
    }, {
      "left" : "accum = accum | (b[1] & 0xff) << 8;",
      "right" : "accum = accum | (b[1] & 0xff) << 8;",
      "info" : "ExpressionStatement[7308-7343]:ExpressionStatement[8380-8415]"
    }, {
      "left" : "accum = accum | (b[2] & 0xff) << 16;",
      "right" : "accum = accum | (b[2] & 0xff) << 16;",
      "info" : "ExpressionStatement[7352-7388]:ExpressionStatement[8424-8460]"
    }, {
      "left" : "accum = accum | (b[3] & 0xff) << 24;",
      "right" : "accum = accum | (b[3] & 0xff) << 24;",
      "info" : "ExpressionStatement[7397-7433]:ExpressionStatement[8469-8505]"
    }, {
      "left" : "return Float.intBitsToFloat(accum);",
      "right" : "return Float.intBitsToFloat(accum);",
      "info" : "ReturnStatement[7442-7477]:ReturnStatement[8514-8549]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7806-8312]:Block[8877-9383]"
    }, {
      "left" : "byte[] bytes = new byte[MAX_SIZE];",
      "right" : "byte[] bytes = new byte[MAX_SIZE];",
      "info" : "VariableDeclarationStatement[7816-7850]:VariableDeclarationStatement[8887-8921]"
    }, {
      "left" : "byte b = dis.readByte();",
      "right" : "byte b = dis.readByte();",
      "info" : "VariableDeclarationStatement[7859-7883]:VariableDeclarationStatement[8930-8954]"
    }, {
      "left" : "int i = -1;",
      "right" : "int i = -1;",
      "info" : "VariableDeclarationStatement[7892-7903]:VariableDeclarationStatement[8963-8974]"
    }, {
      "left" : "StringBuilder sb = new StringBuilder();",
      "right" : "StringBuilder sb = new StringBuilder();",
      "info" : "VariableDeclarationStatement[7912-7951]:VariableDeclarationStatement[8983-9022]"
    }, {
      "left" : "while (b != 32 && b != 10)",
      "right" : "while (b != 32 && b != 10)",
      "info" : "WhileStatement[7960-8228]:WhileStatement[9031-9299]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7987-8228]:Block[9058-9299]"
    }, {
      "left" : "i++;",
      "right" : "i++;",
      "info" : "ExpressionStatement[8001-8005]:ExpressionStatement[9072-9076]"
    }, {
      "left" : "bytes[i] = b;",
      "right" : "bytes[i] = b;",
      "info" : "ExpressionStatement[8018-8031]:ExpressionStatement[9089-9102]"
    }, {
      "left" : "b = dis.readByte();",
      "right" : "b = dis.readByte();",
      "info" : "ExpressionStatement[8044-8063]:ExpressionStatement[9115-9134]"
    }, {
      "left" : "if (i == 49)",
      "right" : "if (i == 49)",
      "info" : "IfStatement[8076-8218]:IfStatement[9147-9289]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8089-8218]:Block[9160-9289]"
    }, {
      "left" : "sb.append(new String(bytes));",
      "right" : "sb.append(new String(bytes));",
      "info" : "ExpressionStatement[8107-8136]:ExpressionStatement[9178-9207]"
    }, {
      "left" : "i = -1;",
      "right" : "i = -1;",
      "info" : "ExpressionStatement[8153-8160]:ExpressionStatement[9224-9231]"
    }, {
      "left" : "bytes = new byte[MAX_SIZE];",
      "right" : "bytes = new byte[MAX_SIZE];",
      "info" : "ExpressionStatement[8177-8204]:ExpressionStatement[9248-9275]"
    }, {
      "left" : "sb.append(new String(bytes, 0, i + 1));",
      "right" : "sb.append(new String(bytes, 0, i + 1));",
      "info" : "ExpressionStatement[8237-8276]:ExpressionStatement[9308-9347]"
    }, {
      "left" : "return sb.toString();",
      "right" : "return sb.toString();",
      "info" : "ReturnStatement[8285-8306]:ReturnStatement[9356-9377]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8709-9540]:Block[9800-10631]"
    }, {
      "left" : "BufferedWriter write = new BufferedWriter(new FileWriter(new File(path), false));",
      "right" : "BufferedWriter write = new BufferedWriter(new FileWriter(new File(path), false));",
      "info" : "VariableDeclarationStatement[8719-8800]:VariableDeclarationStatement[9810-9891]"
    }, {
      "left" : "for (int i = 0; i < lookupTable.getSyn0().rows(); i++)",
      "right" : "for (int i = 0; i < lookupTable.getSyn0().rows(); i++)",
      "info" : "ForStatement[8809-9486]:ForStatement[9900-10577]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8864-9486]:Block[9955-10577]"
    }, {
      "left" : "String word = cache.wordAtIndex(i);",
      "right" : "String word = cache.wordAtIndex(i);",
      "info" : "VariableDeclarationStatement[8878-8913]:VariableDeclarationStatement[9969-10004]"
    }, {
      "left" : "if (word == null)",
      "right" : "if (word == null)",
      "info" : "IfStatement[8926-8985]:IfStatement[10017-10076]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8944-8985]:Block[10035-10076]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[8962-8971]:ContinueStatement[10053-10062]"
    }, {
      "left" : "StringBuilder sb = new StringBuilder();",
      "right" : "StringBuilder sb = new StringBuilder();",
      "info" : "VariableDeclarationStatement[8998-9037]:VariableDeclarationStatement[10089-10128]"
    }, {
      "left" : "sb.append(word.replaceAll(\" \", \"_\"));",
      "right" : "sb.append(word.replaceAll(\" \", \"_\"));",
      "info" : "ExpressionStatement[9050-9087]:ExpressionStatement[10141-10178]"
    }, {
      "left" : "sb.append(\" \");",
      "right" : "sb.append(\" \");",
      "info" : "ExpressionStatement[9100-9115]:ExpressionStatement[10191-10206]"
    }, {
      "left" : "INDArray wordVector = lookupTable.vector(word);",
      "right" : "INDArray wordVector = lookupTable.vector(word);",
      "info" : "VariableDeclarationStatement[9128-9175]:VariableDeclarationStatement[10219-10266]"
    }, {
      "left" : "for (int j = 0; j < wordVector.length(); j++)",
      "right" : "for (int j = 0; j < wordVector.length(); j++)",
      "info" : "ForStatement[9188-9406]:ForStatement[10279-10497]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9234-9406]:Block[10325-10497]"
    }, {
      "left" : "sb.append(wordVector.getDouble(j));",
      "right" : "sb.append(wordVector.getDouble(j));",
      "info" : "ExpressionStatement[9252-9287]:ExpressionStatement[10343-10378]"
    }, {
      "left" : "if (j < wordVector.length() - 1)",
      "right" : "if (j < wordVector.length() - 1)",
      "info" : "IfStatement[9304-9392]:IfStatement[10395-10483]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9337-9392]:Block[10428-10483]"
    }, {
      "left" : "sb.append(\" \");",
      "right" : "sb.append(\" \");",
      "info" : "ExpressionStatement[9359-9374]:ExpressionStatement[10450-10465]"
    }, {
      "left" : "sb.append(\"\\n\");",
      "right" : "sb.append(\"\\n\");",
      "info" : "ExpressionStatement[9419-9435]:ExpressionStatement[10510-10526]"
    }, {
      "left" : "write.write(sb.toString());",
      "right" : "write.write(sb.toString());",
      "info" : "ExpressionStatement[9448-9475]:ExpressionStatement[10539-10566]"
    }, {
      "left" : "write.flush();",
      "right" : "write.flush();",
      "info" : "ExpressionStatement[9496-9510]:ExpressionStatement[10587-10601]"
    }, {
      "left" : "write.close();",
      "right" : "write.close();",
      "info" : "ExpressionStatement[9519-9533]:ExpressionStatement[10610-10624]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9895-10799]:Block[10986-11890]"
    }, {
      "left" : "BufferedWriter write = new BufferedWriter(new FileWriter(new File(path), false));",
      "right" : "BufferedWriter write = new BufferedWriter(new FileWriter(new File(path), false));",
      "info" : "VariableDeclarationStatement[9905-9986]:VariableDeclarationStatement[10996-11077]"
    }, {
      "left" : "int words = 0;",
      "right" : "int words = 0;",
      "info" : "VariableDeclarationStatement[9995-10009]:VariableDeclarationStatement[11086-11100]"
    }, {
      "left" : "for (String word : vec.vocab().words())",
      "right" : "for (String word : vec.vocab().words())",
      "info" : "EnhancedForStatement[10018-10658]:EnhancedForStatement[11109-11749]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10058-10658]:Block[11149-11749]"
    }, {
      "left" : "if (word == null)",
      "right" : "if (word == null)",
      "info" : "IfStatement[10072-10131]:IfStatement[11163-11222]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10090-10131]:Block[11181-11222]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[10108-10117]:ContinueStatement[11199-11208]"
    }, {
      "left" : "StringBuilder sb = new StringBuilder();",
      "right" : "StringBuilder sb = new StringBuilder();",
      "info" : "VariableDeclarationStatement[10144-10183]:VariableDeclarationStatement[11235-11274]"
    }, {
      "left" : "sb.append(word.replaceAll(\" \", \"_\"));",
      "right" : "sb.append(word.replaceAll(\" \", \"_\"));",
      "info" : "ExpressionStatement[10196-10233]:ExpressionStatement[11287-11324]"
    }, {
      "left" : "sb.append(\" \");",
      "right" : "sb.append(\" \");",
      "info" : "ExpressionStatement[10246-10261]:ExpressionStatement[11337-11352]"
    }, {
      "left" : "INDArray wordVector = vec.getWordVectorMatrix(word);",
      "right" : "INDArray wordVector = vec.getWordVectorMatrix(word);",
      "info" : "VariableDeclarationStatement[10274-10326]:VariableDeclarationStatement[11365-11417]"
    }, {
      "left" : "for (int j = 0; j < wordVector.length(); j++)",
      "right" : "for (int j = 0; j < wordVector.length(); j++)",
      "info" : "ForStatement[10339-10557]:ForStatement[11430-11648]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10385-10557]:Block[11476-11648]"
    }, {
      "left" : "sb.append(wordVector.getDouble(j));",
      "right" : "sb.append(wordVector.getDouble(j));",
      "info" : "ExpressionStatement[10403-10438]:ExpressionStatement[11494-11529]"
    }, {
      "left" : "if (j < wordVector.length() - 1)",
      "right" : "if (j < wordVector.length() - 1)",
      "info" : "IfStatement[10455-10543]:IfStatement[11546-11634]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10488-10543]:Block[11579-11634]"
    }, {
      "left" : "sb.append(\" \");",
      "right" : "sb.append(\" \");",
      "info" : "ExpressionStatement[10510-10525]:ExpressionStatement[11601-11616]"
    }, {
      "left" : "sb.append(\"\\n\");",
      "right" : "sb.append(\"\\n\");",
      "info" : "ExpressionStatement[10570-10586]:ExpressionStatement[11661-11677]"
    }, {
      "left" : "write.write(sb.toString());",
      "right" : "write.write(sb.toString());",
      "info" : "ExpressionStatement[10599-10626]:ExpressionStatement[11690-11717]"
    }, {
      "left" : "words++;",
      "right" : "words++;",
      "info" : "ExpressionStatement[10639-10647]:ExpressionStatement[11730-11738]"
    }, {
      "left" : "log.info(\"Wrote \" + words + \" with size of \" + vec.lookupTable().layerSize());",
      "right" : "log.info(\"Wrote \" + words + \" with size of \" + vec.lookupTable().layerSize());",
      "info" : "ExpressionStatement[10668-10746]:ExpressionStatement[11759-11837]"
    }, {
      "left" : "write.flush();",
      "right" : "write.flush();",
      "info" : "ExpressionStatement[10755-10769]:ExpressionStatement[11846-11860]"
    }, {
      "left" : "write.close();",
      "right" : "write.close();",
      "info" : "ExpressionStatement[10778-10792]:ExpressionStatement[11869-11883]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11143-11303]:Block[12234-12394]"
    }, {
      "left" : "WordVectorsImpl vectors = new WordVectorsImpl();",
      "right" : "WordVectorsImpl vectors = new WordVectorsImpl();",
      "info" : "VariableDeclarationStatement[11153-11201]:VariableDeclarationStatement[12244-12292]"
    }, {
      "left" : "vectors.setLookupTable(table);",
      "right" : "vectors.setLookupTable(table);",
      "info" : "ExpressionStatement[11210-11240]:ExpressionStatement[12301-12331]"
    }, {
      "left" : "vectors.setVocab(vocab);",
      "right" : "vectors.setVocab(vocab);",
      "info" : "ExpressionStatement[11249-11273]:ExpressionStatement[12340-12364]"
    }, {
      "left" : "return vectors;",
      "right" : "return vectors;",
      "info" : "ReturnStatement[11282-11297]:ReturnStatement[12373-12388]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11595-11776]:Block[12690-12871]"
    }, {
      "left" : "WordVectorsImpl vectors = new WordVectorsImpl();",
      "right" : "WordVectorsImpl vectors = new WordVectorsImpl();",
      "info" : "VariableDeclarationStatement[11605-11653]:VariableDeclarationStatement[12700-12748]"
    }, {
      "left" : "vectors.setLookupTable(pair.getFirst());",
      "right" : "vectors.setLookupTable(pair.getFirst());",
      "info" : "ExpressionStatement[11662-11702]:ExpressionStatement[12757-12797]"
    }, {
      "left" : "vectors.setVocab(pair.getSecond());",
      "right" : "vectors.setVocab(pair.getSecond());",
      "info" : "ExpressionStatement[11711-11746]:ExpressionStatement[12806-12841]"
    }, {
      "left" : "return vectors;",
      "right" : "return vectors;",
      "info" : "ReturnStatement[11755-11770]:ReturnStatement[12850-12865]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12132-12245]:Block[13250-13363]"
    }, {
      "left" : "Pair<InMemoryLookupTable, VocabCache> pair = loadTxt(vectorsFile);",
      "right" : "Pair<InMemoryLookupTable, VocabCache> pair = loadTxt(vectorsFile);",
      "info" : "VariableDeclarationStatement[12142-12208]:VariableDeclarationStatement[13260-13326]"
    }, {
      "left" : "return fromPair(pair);",
      "right" : "return fromPair(pair);",
      "info" : "ReturnStatement[12217-12239]:ReturnStatement[13335-13357]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12592-14056]:Block[13714-15178]"
    }, {
      "left" : "BufferedReader write = new BufferedReader(new FileReader(vectorsFile));",
      "right" : "BufferedReader write = new BufferedReader(new FileReader(vectorsFile));",
      "info" : "VariableDeclarationStatement[12602-12673]:VariableDeclarationStatement[13724-13795]"
    }, {
      "left" : "VocabCache cache = new InMemoryLookupCache();",
      "right" : "VocabCache cache = new InMemoryLookupCache();",
      "info" : "VariableDeclarationStatement[12682-12727]:VariableDeclarationStatement[13804-13849]"
    }, {
      "left" : "InMemoryLookupTable lookupTable;",
      "right" : "InMemoryLookupTable lookupTable;",
      "info" : "VariableDeclarationStatement[12737-12769]:VariableDeclarationStatement[13859-13891]"
    }, {
      "left" : "LineIterator iter = IOUtils.lineIterator(write);",
      "right" : "LineIterator iter = IOUtils.lineIterator(write);",
      "info" : "VariableDeclarationStatement[12779-12827]:VariableDeclarationStatement[13901-13949]"
    }, {
      "left" : "List<INDArray> arrays = new ArrayList<>();",
      "right" : "List<INDArray> arrays = new ArrayList<>();",
      "info" : "VariableDeclarationStatement[12836-12878]:VariableDeclarationStatement[13958-14000]"
    }, {
      "left" : "while (iter.hasNext())",
      "right" : "while (iter.hasNext())",
      "info" : "WhileStatement[12887-13518]:WhileStatement[14009-14640]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12910-13518]:Block[14032-14640]"
    }, {
      "left" : "String line = iter.nextLine();",
      "right" : "String line = iter.nextLine();",
      "info" : "VariableDeclarationStatement[12924-12954]:VariableDeclarationStatement[14046-14076]"
    }, {
      "left" : "String[] split = line.split(\" \");",
      "right" : "String[] split = line.split(\" \");",
      "info" : "VariableDeclarationStatement[12967-13000]:VariableDeclarationStatement[14089-14122]"
    }, {
      "left" : "String word = split[0];",
      "right" : "String word = split[0];",
      "info" : "VariableDeclarationStatement[13013-13036]:VariableDeclarationStatement[14135-14158]"
    }, {
      "left" : "VocabWord word1 = new VocabWord(1.0, word);",
      "right" : "VocabWord word1 = new VocabWord(1.0, word);",
      "info" : "VariableDeclarationStatement[13049-13092]:VariableDeclarationStatement[14171-14214]"
    }, {
      "left" : "cache.addToken(word1);",
      "right" : "cache.addToken(word1);",
      "info" : "ExpressionStatement[13105-13127]:ExpressionStatement[14227-14249]"
    }, {
      "left" : "cache.addWordToIndex(cache.numWords(), word);",
      "right" : "cache.addWordToIndex(cache.numWords(), word);",
      "info" : "ExpressionStatement[13140-13185]:ExpressionStatement[14262-14307]"
    }, {
      "left" : "word1.setIndex(cache.numWords());",
      "right" : "word1.setIndex(cache.numWords());",
      "info" : "ExpressionStatement[13198-13231]:ExpressionStatement[14320-14353]"
    }, {
      "left" : "cache.putVocabWord(word);",
      "right" : "cache.putVocabWord(word);",
      "info" : "ExpressionStatement[13244-13269]:ExpressionStatement[14366-14391]"
    }, {
      "left" : "INDArray row = Nd4j.create(Nd4j.createBuffer(split.length - 1));",
      "right" : "INDArray row = Nd4j.create(Nd4j.createBuffer(split.length - 1));",
      "info" : "VariableDeclarationStatement[13282-13346]:VariableDeclarationStatement[14404-14468]"
    }, {
      "left" : "for (int i = 1; i < split.length; i++)",
      "right" : "for (int i = 1; i < split.length; i++)",
      "info" : "ForStatement[13359-13479]:ForStatement[14481-14601]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13398-13479]:Block[14520-14601]"
    }, {
      "left" : "row.putScalar(i - 1, Float.parseFloat(split[i]));",
      "right" : "row.putScalar(i - 1, Float.parseFloat(split[i]));",
      "info" : "ExpressionStatement[13416-13465]:ExpressionStatement[14538-14587]"
    }, {
      "left" : "arrays.add(row);",
      "right" : "arrays.add(row);",
      "info" : "ExpressionStatement[13492-13508]:ExpressionStatement[14614-14630]"
    }, {
      "left" : "INDArray syn = Nd4j.create(new int[] { arrays.size(), arrays.get(0).columns() });",
      "right" : "INDArray syn = Nd4j.create(new int[] { arrays.size(), arrays.get(0).columns() });",
      "info" : "VariableDeclarationStatement[13528-13609]:VariableDeclarationStatement[14650-14731]"
    }, {
      "left" : "for (int i = 0; i < syn.rows(); i++)",
      "right" : "for (int i = 0; i < syn.rows(); i++)",
      "info" : "ForStatement[13618-13708]:ForStatement[14740-14830]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13655-13708]:Block[14777-14830]"
    }, {
      "left" : "syn.putRow(i, arrays.get(i));",
      "right" : "syn.putRow(i, arrays.get(i));",
      "info" : "ExpressionStatement[13669-13698]:ExpressionStatement[14791-14820]"
    }, {
      "left" : "lookupTable = (InMemoryLookupTable) new InMemoryLookupTable.Builder()\n                .vectorLength(arrays.get(0).columns())\n                .useAdaGrad(false).cache(cache)\n                .build();",
      "right" : "lookupTable = (InMemoryLookupTable) new InMemoryLookupTable.Builder()\n                .vectorLength(arrays.get(0).columns())\n                .useAdaGrad(false).cache(cache)\n                .build();",
      "info" : "ExpressionStatement[13718-13916]:ExpressionStatement[14840-15038]"
    }, {
      "left" : "Nd4j.clearNans(syn);",
      "right" : "Nd4j.clearNans(syn);",
      "info" : "ExpressionStatement[13925-13945]:ExpressionStatement[15047-15067]"
    }, {
      "left" : "lookupTable.setSyn0(syn);",
      "right" : "lookupTable.setSyn0(syn);",
      "info" : "ExpressionStatement[13954-13979]:ExpressionStatement[15076-15101]"
    }, {
      "left" : "iter.close();",
      "right" : "iter.close();",
      "info" : "ExpressionStatement[13989-14002]:ExpressionStatement[15111-15124]"
    }, {
      "left" : "return new Pair<>(lookupTable, cache);",
      "right" : "return new Pair<>(lookupTable, cache);",
      "info" : "ReturnStatement[14012-14050]:ReturnStatement[15134-15172]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14425-15381]:Block[15547-16503]"
    }, {
      "left" : "BufferedWriter write = new BufferedWriter(new FileWriter(csv));",
      "right" : "BufferedWriter write = new BufferedWriter(new FileWriter(csv));",
      "info" : "VariableDeclarationStatement[14435-14498]:VariableDeclarationStatement[15557-15620]"
    }, {
      "left" : "int words = 0;",
      "right" : "int words = 0;",
      "info" : "VariableDeclarationStatement[14507-14521]:VariableDeclarationStatement[15629-15643]"
    }, {
      "left" : "InMemoryLookupCache l = (InMemoryLookupCache) vec.vocab();",
      "right" : "InMemoryLookupCache l = (InMemoryLookupCache) vec.vocab();",
      "info" : "VariableDeclarationStatement[14530-14588]:VariableDeclarationStatement[15652-15710]"
    }, {
      "left" : "for (String word : vec.vocab().words())",
      "right" : "for (String word : vec.vocab().words())",
      "info" : "EnhancedForStatement[14597-15234]:EnhancedForStatement[15719-16356]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14637-15234]:Block[15759-16356]"
    }, {
      "left" : "if (word == null)",
      "right" : "if (word == null)",
      "info" : "IfStatement[14651-14710]:IfStatement[15773-15832]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14669-14710]:Block[15791-15832]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[14687-14696]:ContinueStatement[15809-15818]"
    }, {
      "left" : "StringBuilder sb = new StringBuilder();",
      "right" : "StringBuilder sb = new StringBuilder();",
      "info" : "VariableDeclarationStatement[14723-14762]:VariableDeclarationStatement[15845-15884]"
    }, {
      "left" : "INDArray wordVector = tsne.getRow(l.wordFor(word).getIndex());",
      "right" : "INDArray wordVector = tsne.getRow(l.wordFor(word).getIndex());",
      "info" : "VariableDeclarationStatement[14775-14837]:VariableDeclarationStatement[15897-15959]"
    }, {
      "left" : "for (int j = 0; j < wordVector.length(); j++)",
      "right" : "for (int j = 0; j < wordVector.length(); j++)",
      "info" : "ForStatement[14850-15068]:ForStatement[15972-16190]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14896-15068]:Block[16018-16190]"
    }, {
      "left" : "sb.append(wordVector.getDouble(j));",
      "right" : "sb.append(wordVector.getDouble(j));",
      "info" : "ExpressionStatement[14914-14949]:ExpressionStatement[16036-16071]"
    }, {
      "left" : "if (j < wordVector.length() - 1)",
      "right" : "if (j < wordVector.length() - 1)",
      "info" : "IfStatement[14966-15054]:IfStatement[16088-16176]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14999-15054]:Block[16121-16176]"
    }, {
      "left" : "sb.append(\",\");",
      "right" : "sb.append(\",\");",
      "info" : "ExpressionStatement[15021-15036]:ExpressionStatement[16143-16158]"
    }, {
      "left" : "sb.append(\",\");",
      "right" : "sb.append(\",\");",
      "info" : "ExpressionStatement[15081-15096]:ExpressionStatement[16203-16218]"
    }, {
      "left" : "sb.append(word);",
      "right" : "sb.append(word);",
      "info" : "ExpressionStatement[15109-15125]:ExpressionStatement[16231-16247]"
    }, {
      "left" : "sb.append(\" \");",
      "right" : "sb.append(\" \");",
      "info" : "ExpressionStatement[15138-15153]:ExpressionStatement[16260-16275]"
    }, {
      "left" : "sb.append(\"\\n\");",
      "right" : "sb.append(\"\\n\");",
      "info" : "ExpressionStatement[15167-15183]:ExpressionStatement[16289-16305]"
    }, {
      "left" : "write.write(sb.toString());",
      "right" : "write.write(sb.toString());",
      "info" : "ExpressionStatement[15196-15223]:ExpressionStatement[16318-16345]"
    }, {
      "left" : "log.info(\"Wrote \" + words + \" with size of \" + vec.lookupTable().getVectorLength());",
      "right" : "log.info(\"Wrote \" + words + \" with size of \" + vec.lookupTable().getVectorLength());",
      "info" : "ExpressionStatement[15244-15328]:ExpressionStatement[16366-16450]"
    }, {
      "left" : "write.flush();",
      "right" : "write.flush();",
      "info" : "ExpressionStatement[15337-15351]:ExpressionStatement[16459-16473]"
    }, {
      "left" : "write.close();",
      "right" : "write.close();",
      "info" : "ExpressionStatement[15360-15374]:ExpressionStatement[16482-16496]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15753-16703]:Block[16875-17825]"
    }, {
      "left" : "BufferedWriter write = new BufferedWriter(new FileWriter(csv));",
      "right" : "BufferedWriter write = new BufferedWriter(new FileWriter(csv));",
      "info" : "VariableDeclarationStatement[15763-15826]:VariableDeclarationStatement[16885-16948]"
    }, {
      "left" : "int words = 0;",
      "right" : "int words = 0;",
      "info" : "VariableDeclarationStatement[15835-15849]:VariableDeclarationStatement[16957-16971]"
    }, {
      "left" : "InMemoryLookupCache l = (InMemoryLookupCache) vec.vocab();",
      "right" : "InMemoryLookupCache l = (InMemoryLookupCache) vec.vocab();",
      "info" : "VariableDeclarationStatement[15858-15916]:VariableDeclarationStatement[16980-17038]"
    }, {
      "left" : "for (String word : vec.vocab().words())",
      "right" : "for (String word : vec.vocab().words())",
      "info" : "EnhancedForStatement[15925-16562]:EnhancedForStatement[17047-17684]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15965-16562]:Block[17087-17684]"
    }, {
      "left" : "if (word == null)",
      "right" : "if (word == null)",
      "info" : "IfStatement[15979-16038]:IfStatement[17101-17160]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15997-16038]:Block[17119-17160]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[16015-16024]:ContinueStatement[17137-17146]"
    }, {
      "left" : "StringBuilder sb = new StringBuilder();",
      "right" : "StringBuilder sb = new StringBuilder();",
      "info" : "VariableDeclarationStatement[16051-16090]:VariableDeclarationStatement[17173-17212]"
    }, {
      "left" : "INDArray wordVector = tsne.getRow(l.wordFor(word).getIndex());",
      "right" : "INDArray wordVector = tsne.getRow(l.wordFor(word).getIndex());",
      "info" : "VariableDeclarationStatement[16103-16165]:VariableDeclarationStatement[17225-17287]"
    }, {
      "left" : "for (int j = 0; j < wordVector.length(); j++)",
      "right" : "for (int j = 0; j < wordVector.length(); j++)",
      "info" : "ForStatement[16178-16396]:ForStatement[17300-17518]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16224-16396]:Block[17346-17518]"
    }, {
      "left" : "sb.append(wordVector.getDouble(j));",
      "right" : "sb.append(wordVector.getDouble(j));",
      "info" : "ExpressionStatement[16242-16277]:ExpressionStatement[17364-17399]"
    }, {
      "left" : "if (j < wordVector.length() - 1)",
      "right" : "if (j < wordVector.length() - 1)",
      "info" : "IfStatement[16294-16382]:IfStatement[17416-17504]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16327-16382]:Block[17449-17504]"
    }, {
      "left" : "sb.append(\",\");",
      "right" : "sb.append(\",\");",
      "info" : "ExpressionStatement[16349-16364]:ExpressionStatement[17471-17486]"
    }, {
      "left" : "sb.append(\",\");",
      "right" : "sb.append(\",\");",
      "info" : "ExpressionStatement[16409-16424]:ExpressionStatement[17531-17546]"
    }, {
      "left" : "sb.append(word);",
      "right" : "sb.append(word);",
      "info" : "ExpressionStatement[16437-16453]:ExpressionStatement[17559-17575]"
    }, {
      "left" : "sb.append(\" \");",
      "right" : "sb.append(\" \");",
      "info" : "ExpressionStatement[16466-16481]:ExpressionStatement[17588-17603]"
    }, {
      "left" : "sb.append(\"\\n\");",
      "right" : "sb.append(\"\\n\");",
      "info" : "ExpressionStatement[16495-16511]:ExpressionStatement[17617-17633]"
    }, {
      "left" : "write.write(sb.toString());",
      "right" : "write.write(sb.toString());",
      "info" : "ExpressionStatement[16524-16551]:ExpressionStatement[17646-17673]"
    }, {
      "left" : "log.info(\"Wrote \" + words + \" with size of \" + vec.lookupTable().layerSize());",
      "right" : "log.info(\"Wrote \" + words + \" with size of \" + vec.lookupTable().layerSize());",
      "info" : "ExpressionStatement[16572-16650]:ExpressionStatement[17694-17772]"
    }, {
      "left" : "write.flush();",
      "right" : "write.flush();",
      "info" : "ExpressionStatement[16659-16673]:ExpressionStatement[17781-17795]"
    }, {
      "left" : "write.close();",
      "right" : "write.close();",
      "info" : "ExpressionStatement[16682-16696]:ExpressionStatement[17804-17818]"
    } ]
  },
  "interFileMappings" : { }
}