{
  "matchedElements" : [
 {
    "left" : "class : PolygonsSet",
    "right" : "class : PolygonsSet",
    "info" : "TypeDeclaration[1896-19956]:TypeDeclaration[1896-19981]"
  }, {
    "left" : "vertices",
    "right" : "vertices",
    "info" : "FieldDeclaration[2070-2149]:FieldDeclaration[2070-2149]"
  }, {
    "left" : "public PolygonsSet()",
    "right" : "public PolygonsSet()",
    "info" : "MethodDeclaration[2155-2271]:MethodDeclaration[2155-2271]"
  }, {
    "left" : "public PolygonsSet(tree )",
    "right" : "public PolygonsSet(tree )",
    "info" : "MethodDeclaration[2277-2860]:MethodDeclaration[2277-2860]"
  }, {
    "left" : "public PolygonsSet(boundary )",
    "right" : "public PolygonsSet(boundary )",
    "info" : "MethodDeclaration[2866-4186]:MethodDeclaration[2866-4186]"
  }, {
    "left" : "public PolygonsSet(xMin double, xMax double, yMin double, yMax double)",
    "right" : "public PolygonsSet(xMin double, xMax double, yMin double, yMax double)",
    "info" : "MethodDeclaration[4192-4622]:MethodDeclaration[4192-4622]"
  }, {
    "left" : "private boxBoundary(xMin double, xMax double, yMin double, yMax double) : ",
    "right" : "private boxBoundary(xMin double, xMax double, yMin double, yMax double) : ",
    "info" : "MethodDeclaration[4628-5527]:MethodDeclaration[4628-5527]"
  }, {
    "left" : "public buildNew(tree ) : ",
    "right" : "public buildNew(tree ) : ",
    "info" : "MethodDeclaration[5533-5678]:MethodDeclaration[5533-5678]"
  }, {
    "left" : "protected computeGeometricalProperties() : void",
    "right" : "protected computeGeometricalProperties() : void",
    "info" : "MethodDeclaration[5684-7578]:MethodDeclaration[5684-7603]"
  }, {
    "left" : "public getVertices() : ",
    "right" : "public getVertices() : ",
    "info" : "MethodDeclaration[7584-12496]:MethodDeclaration[7609-12521]"
  }, {
    "left" : "private followLoop(node , sorted ) : ",
    "right" : "private followLoop(node , sorted ) : ",
    "info" : "MethodDeclaration[12502-15185]:MethodDeclaration[12527-15210]"
  }, {
    "left" : "class : ComparableSegment",
    "right" : "class : ComparableSegment",
    "info" : "TypeDeclaration[15191-17341]:TypeDeclaration[15216-17366]"
  }, {
    "left" : "sortingKey",
    "right" : "sortingKey",
    "info" : "FieldDeclaration[15359-15419]:FieldDeclaration[15384-15444]"
  }, {
    "left" : "public ComparableSegment(start , end , line )",
    "right" : "public ComparableSegment(start , end , line )",
    "info" : "MethodDeclaration[15429-15961]:MethodDeclaration[15454-15986]"
  }, {
    "left" : "public ComparableSegment(start , dx double, dy double)",
    "right" : "public ComparableSegment(start , dx double, dy double)",
    "info" : "MethodDeclaration[15971-16597]:MethodDeclaration[15996-16622]"
  }, {
    "left" : "public compareTo(o ) : int",
    "right" : "public compareTo(o ) : int",
    "info" : "MethodDeclaration[16607-16750]:MethodDeclaration[16632-16775]"
  }, {
    "left" : "public equals(other ) : boolean",
    "right" : "public equals(other ) : boolean",
    "info" : "MethodDeclaration[16760-17114]:MethodDeclaration[16785-17139]"
  }, {
    "left" : "public hashCode() : int",
    "right" : "public hashCode() : int",
    "info" : "MethodDeclaration[17124-17334]:MethodDeclaration[17149-17359]"
  }, {
    "left" : "class : SegmentsBuilder",
    "right" : "class : SegmentsBuilder",
    "info" : "TypeDeclaration[17347-19953]:TypeDeclaration[17372-19978]"
  }, {
    "left" : "sorted",
    "right" : "sorted",
    "info" : "FieldDeclaration[17472-17546]:FieldDeclaration[17497-17571]"
  }, {
    "left" : "public SegmentsBuilder()",
    "right" : "public SegmentsBuilder()",
    "info" : "MethodDeclaration[17556-17682]:MethodDeclaration[17581-17707]"
  }, {
    "left" : "public visitOrder(node ) : ",
    "right" : "public visitOrder(node ) : ",
    "info" : "MethodDeclaration[17692-17830]:MethodDeclaration[17717-17855]"
  }, {
    "left" : "public visitInternalNode(node ) : void",
    "right" : "public visitInternalNode(node ) : void",
    "info" : "MethodDeclaration[17840-18370]:MethodDeclaration[17865-18395]"
  }, {
    "left" : "public visitLeafNode(node ) : void",
    "right" : "public visitLeafNode(node ) : void",
    "info" : "MethodDeclaration[18380-18479]:MethodDeclaration[18405-18504]"
  }, {
    "left" : "private addContribution(sub , reversed boolean) : void",
    "right" : "private addContribution(sub , reversed boolean) : void",
    "info" : "MethodDeclaration[18489-19768]:MethodDeclaration[18514-19793]"
  }, {
    "left" : "public getSorted() : ",
    "right" : "public getSorted() : ",
    "info" : "MethodDeclaration[19778-19946]:MethodDeclaration[19803-19971]"
  } ],
  "mappings" : [
 {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[2226-2232]:Modifier[2226-2232]"
  }, {
    "left" : "PolygonsSet",
    "right" : "PolygonsSet",
    "info" : "SimpleName[2233-2244]:SimpleName[2233-2244]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[2247-2271]:Block[2247-2271]"
  }, {
    "left" : "super();",
    "right" : "super();",
    "info" : "SuperConstructorInvocation[2257-2265]:SuperConstructorInvocation[2257-2265]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[2780-2786]:Modifier[2780-2786]"
  }, {
    "left" : "PolygonsSet",
    "right" : "PolygonsSet",
    "info" : "SimpleName[2787-2798]:SimpleName[2787-2798]"
  }, {
    "left" : "final BSPTree<Euclidean2D> tree",
    "right" : "final BSPTree<Euclidean2D> tree",
    "info" : "SingleVariableDeclaration[2799-2830]:SingleVariableDeclaration[2799-2830]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[2832-2860]:Block[2832-2860]"
  }, {
    "left" : "super(tree);",
    "right" : "super(tree);",
    "info" : "SuperConstructorInvocation[2842-2854]:SuperConstructorInvocation[2842-2854]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[4080-4086]:Modifier[4080-4086]"
  }, {
    "left" : "PolygonsSet",
    "right" : "PolygonsSet",
    "info" : "SimpleName[4087-4098]:SimpleName[4087-4098]"
  }, {
    "left" : "final Collection<SubHyperplane<Euclidean2D>> boundary",
    "right" : "final Collection<SubHyperplane<Euclidean2D>> boundary",
    "info" : "SingleVariableDeclaration[4099-4152]:SingleVariableDeclaration[4099-4152]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4154-4186]:Block[4154-4186]"
  }, {
    "left" : "super(boundary);",
    "right" : "super(boundary);",
    "info" : "SuperConstructorInvocation[4164-4180]:SuperConstructorInvocation[4164-4180]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[4445-4451]:Modifier[4445-4451]"
  }, {
    "left" : "PolygonsSet",
    "right" : "PolygonsSet",
    "info" : "SimpleName[4452-4463]:SimpleName[4452-4463]"
  }, {
    "left" : "final double xMin",
    "right" : "final double xMin",
    "info" : "SingleVariableDeclaration[4464-4481]:SingleVariableDeclaration[4464-4481]"
  }, {
    "left" : "final double xMax",
    "right" : "final double xMax",
    "info" : "SingleVariableDeclaration[4483-4500]:SingleVariableDeclaration[4483-4500]"
  }, {
    "left" : "final double yMin",
    "right" : "final double yMin",
    "info" : "SingleVariableDeclaration[4525-4542]:SingleVariableDeclaration[4525-4542]"
  }, {
    "left" : "final double yMax",
    "right" : "final double yMax",
    "info" : "SingleVariableDeclaration[4544-4561]:SingleVariableDeclaration[4544-4561]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4563-4622]:Block[4563-4622]"
  }, {
    "left" : "super(boxBoundary(xMin, xMax, yMin, yMax));",
    "right" : "super(boxBoundary(xMin, xMax, yMin, yMax));",
    "info" : "SuperConstructorInvocation[4573-4616]:SuperConstructorInvocation[4573-4616]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[4950-4957]:Modifier[4950-4957]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[4958-4964]:Modifier[4958-4964]"
  }, {
    "left" : "Line[]",
    "right" : "Line[]",
    "info" : "ArrayType[4965-4971]:ArrayType[4965-4971]"
  }, {
    "left" : "boxBoundary",
    "right" : "boxBoundary",
    "info" : "SimpleName[4972-4983]:SimpleName[4972-4983]"
  }, {
    "left" : "final double xMin",
    "right" : "final double xMin",
    "info" : "SingleVariableDeclaration[4984-5001]:SingleVariableDeclaration[4984-5001]"
  }, {
    "left" : "final double xMax",
    "right" : "final double xMax",
    "info" : "SingleVariableDeclaration[5003-5020]:SingleVariableDeclaration[5003-5020]"
  }, {
    "left" : "final double yMin",
    "right" : "final double yMin",
    "info" : "SingleVariableDeclaration[5060-5077]:SingleVariableDeclaration[5060-5077]"
  }, {
    "left" : "final double yMax",
    "right" : "final double yMax",
    "info" : "SingleVariableDeclaration[5079-5096]:SingleVariableDeclaration[5079-5096]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5098-5527]:Block[5098-5527]"
  }, {
    "left" : "final Vector2D minMin = new Vector2D(xMin, yMin);",
    "right" : "final Vector2D minMin = new Vector2D(xMin, yMin);",
    "info" : "VariableDeclarationStatement[5108-5157]:VariableDeclarationStatement[5108-5157]"
  }, {
    "left" : "final Vector2D minMax = new Vector2D(xMin, yMax);",
    "right" : "final Vector2D minMax = new Vector2D(xMin, yMax);",
    "info" : "VariableDeclarationStatement[5166-5215]:VariableDeclarationStatement[5166-5215]"
  }, {
    "left" : "final Vector2D maxMin = new Vector2D(xMax, yMin);",
    "right" : "final Vector2D maxMin = new Vector2D(xMax, yMin);",
    "info" : "VariableDeclarationStatement[5224-5273]:VariableDeclarationStatement[5224-5273]"
  }, {
    "left" : "final Vector2D maxMax = new Vector2D(xMax, yMax);",
    "right" : "final Vector2D maxMax = new Vector2D(xMax, yMax);",
    "info" : "VariableDeclarationStatement[5282-5331]:VariableDeclarationStatement[5282-5331]"
  }, {
    "left" : "return new Line[] {\n            new Line(minMin, maxMin),\n            new Line(maxMin, maxMax),\n            new Line(maxMax, minMax),\n            new Line(minMax, minMin)\n        };",
    "right" : "return new Line[] {\n            new Line(minMin, maxMin),\n            new Line(maxMin, maxMax),\n            new Line(maxMax, minMax),\n            new Line(minMax, minMin)\n        };",
    "info" : "ReturnStatement[5340-5521]:ReturnStatement[5340-5521]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[5558-5567]:MarkerAnnotation[5558-5567]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[5572-5578]:Modifier[5572-5578]"
  }, {
    "left" : "PolygonsSet",
    "right" : "PolygonsSet",
    "info" : "SimpleType[5579-5590]:SimpleType[5579-5590]"
  }, {
    "left" : "buildNew",
    "right" : "buildNew",
    "info" : "SimpleName[5591-5599]:SimpleName[5591-5599]"
  }, {
    "left" : "final BSPTree<Euclidean2D> tree",
    "right" : "final BSPTree<Euclidean2D> tree",
    "info" : "SingleVariableDeclaration[5600-5631]:SingleVariableDeclaration[5600-5631]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5633-5678]:Block[5633-5678]"
  }, {
    "left" : "return new PolygonsSet(tree);",
    "right" : "return new PolygonsSet(tree);",
    "info" : "ReturnStatement[5643-5672]:ReturnStatement[5643-5672]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[5709-5718]:MarkerAnnotation[5709-5718]"
  }, {
    "left" : "protected",
    "right" : "protected",
    "info" : "Modifier[5723-5732]:Modifier[5723-5732]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[5733-5737]:PrimitiveType[5733-5737]"
  }, {
    "left" : "computeGeometricalProperties",
    "right" : "computeGeometricalProperties",
    "info" : "SimpleName[5738-5766]:SimpleName[5738-5766]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5769-7578]:Block[5769-7603]"
  }, {
    "left" : "final Vector2D[][] v = getVertices();",
    "right" : "final Vector2D[][] v = getVertices();",
    "info" : "VariableDeclarationStatement[5780-5817]:VariableDeclarationStatement[5780-5817]"
  }, {
    "left" : "if (v.length == 0)",
    "right" : "if (v.length == 0)",
    "info" : "IfStatement[5827-7571]:IfStatement[5827-7596]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5846-6233]:Block[5846-6258]"
  }, {
    "left" : "final BSPTree<Euclidean2D> tree = getTree(false);",
    "right" : "final BSPTree<Euclidean2D> tree = getTree(false);",
    "info" : "VariableDeclarationStatement[5860-5909]:VariableDeclarationStatement[5860-5909]"
  }, {
    "left" : "if ((Boolean) tree.getAttribute())",
    "right" : "if (tree.getCut() == null && (Boolean) tree.getAttribute())",
    "info" : "IfStatement[5922-6223]:IfStatement[5922-6248]"
  }, {
    "left" : "(Boolean) tree.getAttribute()",
    "right" : "(Boolean) tree.getAttribute()",
    "info" : "CastExpression[5926-5955]:CastExpression[5951-5980]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5957-6123]:Block[5982-6148]"
  }, {
    "left" : "setSize(Double.POSITIVE_INFINITY);",
    "right" : "setSize(Double.POSITIVE_INFINITY);",
    "info" : "ExpressionStatement[6030-6064]:ExpressionStatement[6055-6089]"
  }, {
    "left" : "setBarycenter(Vector2D.NaN);",
    "right" : "setBarycenter(Vector2D.NaN);",
    "info" : "ExpressionStatement[6081-6109]:ExpressionStatement[6106-6134]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6129-6223]:Block[6154-6248]"
  }, {
    "left" : "setSize(0);",
    "right" : "setSize(0);",
    "info" : "ExpressionStatement[6147-6158]:ExpressionStatement[6172-6183]"
  }, {
    "left" : "setBarycenter(new Vector2D(0, 0));",
    "right" : "setBarycenter(new Vector2D(0, 0));",
    "info" : "ExpressionStatement[6175-6209]:ExpressionStatement[6200-6234]"
  }, {
    "left" : "if (v[0][0] == null)",
    "right" : "if (v[0][0] == null)",
    "info" : "IfStatement[6239-7571]:IfStatement[6264-7596]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6260-6431]:Block[6285-6456]"
  }, {
    "left" : "setSize(Double.POSITIVE_INFINITY);",
    "right" : "setSize(Double.POSITIVE_INFINITY);",
    "info" : "ExpressionStatement[6346-6380]:ExpressionStatement[6371-6405]"
  }, {
    "left" : "setBarycenter(Vector2D.NaN);",
    "right" : "setBarycenter(Vector2D.NaN);",
    "info" : "ExpressionStatement[6393-6421]:ExpressionStatement[6418-6446]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6437-7571]:Block[6462-7596]"
  }, {
    "left" : "double sum  = 0;",
    "right" : "double sum  = 0;",
    "info" : "VariableDeclarationStatement[6532-6548]:VariableDeclarationStatement[6557-6573]"
  }, {
    "left" : "double sumX = 0;",
    "right" : "double sumX = 0;",
    "info" : "VariableDeclarationStatement[6561-6577]:VariableDeclarationStatement[6586-6602]"
  }, {
    "left" : "double sumY = 0;",
    "right" : "double sumY = 0;",
    "info" : "VariableDeclarationStatement[6590-6606]:VariableDeclarationStatement[6615-6631]"
  }, {
    "left" : "for (Vector2D[] loop : v)",
    "right" : "for (Vector2D[] loop : v)",
    "info" : "EnhancedForStatement[6620-7202]:EnhancedForStatement[6645-7227]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6646-7202]:Block[6671-7227]"
  }, {
    "left" : "double x1 = loop[loop.length - 1].getX();",
    "right" : "double x1 = loop[loop.length - 1].getX();",
    "info" : "VariableDeclarationStatement[6664-6705]:VariableDeclarationStatement[6689-6730]"
  }, {
    "left" : "double y1 = loop[loop.length - 1].getY();",
    "right" : "double y1 = loop[loop.length - 1].getY();",
    "info" : "VariableDeclarationStatement[6722-6763]:VariableDeclarationStatement[6747-6788]"
  }, {
    "left" : "for (final Vector2D point : loop)",
    "right" : "for (final Vector2D point : loop)",
    "info" : "EnhancedForStatement[6780-7188]:EnhancedForStatement[6805-7213]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6814-7188]:Block[6839-7213]"
  }, {
    "left" : "final double x0 = x1;",
    "right" : "final double x0 = x1;",
    "info" : "VariableDeclarationStatement[6836-6857]:VariableDeclarationStatement[6861-6882]"
  }, {
    "left" : "final double y0 = y1;",
    "right" : "final double y0 = y1;",
    "info" : "VariableDeclarationStatement[6878-6899]:VariableDeclarationStatement[6903-6924]"
  }, {
    "left" : "x1 = point.getX();",
    "right" : "x1 = point.getX();",
    "info" : "ExpressionStatement[6920-6938]:ExpressionStatement[6945-6963]"
  }, {
    "left" : "y1 = point.getY();",
    "right" : "y1 = point.getY();",
    "info" : "ExpressionStatement[6959-6977]:ExpressionStatement[6984-7002]"
  }, {
    "left" : "final double factor = x0 * y1 - y0 * x1;",
    "right" : "final double factor = x0 * y1 - y0 * x1;",
    "info" : "VariableDeclarationStatement[6998-7038]:VariableDeclarationStatement[7023-7063]"
  }, {
    "left" : "sum  += factor;",
    "right" : "sum  += factor;",
    "info" : "ExpressionStatement[7059-7074]:ExpressionStatement[7084-7099]"
  }, {
    "left" : "sumX += factor * (x0 + x1);",
    "right" : "sumX += factor * (x0 + x1);",
    "info" : "ExpressionStatement[7095-7122]:ExpressionStatement[7120-7147]"
  }, {
    "left" : "sumY += factor * (y0 + y1);",
    "right" : "sumY += factor * (y0 + y1);",
    "info" : "ExpressionStatement[7143-7170]:ExpressionStatement[7168-7195]"
  }, {
    "left" : "if (sum < 0)",
    "right" : "if (sum < 0)",
    "info" : "IfStatement[7216-7560]:IfStatement[7241-7585]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7229-7424]:Block[7254-7449]"
  }, {
    "left" : "setSize(Double.POSITIVE_INFINITY);",
    "right" : "setSize(Double.POSITIVE_INFINITY);",
    "info" : "ExpressionStatement[7331-7365]:ExpressionStatement[7356-7390]"
  }, {
    "left" : "setBarycenter(Vector2D.NaN);",
    "right" : "setBarycenter(Vector2D.NaN);",
    "info" : "ExpressionStatement[7382-7410]:ExpressionStatement[7407-7435]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7430-7560]:Block[7455-7585]"
  }, {
    "left" : "setSize(sum / 2);",
    "right" : "setSize(sum / 2);",
    "info" : "ExpressionStatement[7448-7465]:ExpressionStatement[7473-7490]"
  }, {
    "left" : "setBarycenter(new Vector2D(sumX / (3 * sum), sumY / (3 * sum)));",
    "right" : "setBarycenter(new Vector2D(sumX / (3 * sum), sumY / (3 * sum)));",
    "info" : "ExpressionStatement[7482-7546]:ExpressionStatement[7507-7571]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[8933-8939]:Modifier[8958-8964]"
  }, {
    "left" : "Vector2D[][]",
    "right" : "Vector2D[][]",
    "info" : "ArrayType[8940-8952]:ArrayType[8965-8977]"
  }, {
    "left" : "getVertices",
    "right" : "getVertices",
    "info" : "SimpleName[8953-8964]:SimpleName[8978-8989]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8967-12496]:Block[8992-12521]"
  }, {
    "left" : "if (vertices == null)",
    "right" : "if (vertices == null)",
    "info" : "IfStatement[8977-12455]:IfStatement[9002-12480]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8999-12455]:Block[9024-12480]"
  }, {
    "left" : "if (getTree(false).getCut() == null)",
    "right" : "if (getTree(false).getCut() == null)",
    "info" : "IfStatement[9013-12445]:IfStatement[9038-12470]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9050-9111]:Block[9075-9136]"
  }, {
    "left" : "vertices = new Vector2D[0][];",
    "right" : "vertices = new Vector2D[0][];",
    "info" : "ExpressionStatement[9068-9097]:ExpressionStatement[9093-9122]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9117-12445]:Block[9142-12470]"
  }, {
    "left" : "final SegmentsBuilder visitor = new SegmentsBuilder();",
    "right" : "final SegmentsBuilder visitor = new SegmentsBuilder();",
    "info" : "VariableDeclarationStatement[9204-9258]:VariableDeclarationStatement[9229-9283]"
  }, {
    "left" : "getTree(true).visit(visitor);",
    "right" : "getTree(true).visit(visitor);",
    "info" : "ExpressionStatement[9275-9304]:ExpressionStatement[9300-9329]"
  }, {
    "left" : "final AVLTree<ComparableSegment> sorted = visitor.getSorted();",
    "right" : "final AVLTree<ComparableSegment> sorted = visitor.getSorted();",
    "info" : "VariableDeclarationStatement[9321-9383]:VariableDeclarationStatement[9346-9408]"
  }, {
    "left" : "final ArrayList<List<ComparableSegment>> loops = new ArrayList<List<ComparableSegment>>();",
    "right" : "final ArrayList<List<ComparableSegment>> loops = new ArrayList<List<ComparableSegment>>();",
    "info" : "VariableDeclarationStatement[9552-9642]:VariableDeclarationStatement[9577-9667]"
  }, {
    "left" : "while (!sorted.isEmpty())",
    "right" : "while (!sorted.isEmpty())",
    "info" : "WhileStatement[9659-9977]:WhileStatement[9684-10002]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9685-9977]:Block[9710-10002]"
  }, {
    "left" : "final AVLTree<ComparableSegment>.Node node = sorted.getSmallest();",
    "right" : "final AVLTree<ComparableSegment>.Node node = sorted.getSmallest();",
    "info" : "VariableDeclarationStatement[9707-9773]:VariableDeclarationStatement[9732-9798]"
  }, {
    "left" : "final List<ComparableSegment> loop = followLoop(node, sorted);",
    "right" : "final List<ComparableSegment> loop = followLoop(node, sorted);",
    "info" : "VariableDeclarationStatement[9794-9856]:VariableDeclarationStatement[9819-9881]"
  }, {
    "left" : "if (loop != null)",
    "right" : "if (loop != null)",
    "info" : "IfStatement[9877-9959]:IfStatement[9902-9984]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9895-9959]:Block[9920-9984]"
  }, {
    "left" : "loops.add(loop);",
    "right" : "loops.add(loop);",
    "info" : "ExpressionStatement[9921-9937]:ExpressionStatement[9946-9962]"
  }, {
    "left" : "vertices = new Vector2D[loops.size()][];",
    "right" : "vertices = new Vector2D[loops.size()][];",
    "info" : "ExpressionStatement[10065-10105]:ExpressionStatement[10090-10130]"
  }, {
    "left" : "int i = 0;",
    "right" : "int i = 0;",
    "info" : "VariableDeclarationStatement[10122-10132]:VariableDeclarationStatement[10147-10157]"
  }, {
    "left" : "for (final List<ComparableSegment> loop : loops)",
    "right" : "for (final List<ComparableSegment> loop : loops)",
    "info" : "EnhancedForStatement[10150-12430]:EnhancedForStatement[10175-12455]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10199-12430]:Block[10224-12455]"
  }, {
    "left" : "if (loop.size() < 2)",
    "right" : "if (loop.size() < 2)",
    "info" : "IfStatement[10221-12412]:IfStatement[10246-12437]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10242-10643]:Block[10267-10668]"
  }, {
    "left" : "final Line line = loop.get(0).getLine();",
    "right" : "final Line line = loop.get(0).getLine();",
    "info" : "VariableDeclarationStatement[10316-10356]:VariableDeclarationStatement[10341-10381]"
  }, {
    "left" : "vertices[i++] = new Vector2D[] {\n                            null,\n                            line.toSpace(new Vector1D(-Float.MAX_VALUE)),\n                            line.toSpace(new Vector1D(+Float.MAX_VALUE))\n                        };",
    "right" : "vertices[i++] = new Vector2D[] {\n                            null,\n                            line.toSpace(new Vector1D(-Float.MAX_VALUE)),\n                            line.toSpace(new Vector1D(+Float.MAX_VALUE))\n                        };",
    "info" : "ExpressionStatement[10381-10621]:ExpressionStatement[10406-10646]"
  }, {
    "left" : "if (loop.get(0).getStart() == null)",
    "right" : "if (loop.get(0).getStart() == null)",
    "info" : "IfStatement[10649-12412]:IfStatement[10674-12437]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10685-12083]:Block[10710-12108]"
  }, {
    "left" : "final Vector2D[] array = new Vector2D[loop.size() + 2];",
    "right" : "final Vector2D[] array = new Vector2D[loop.size() + 2];",
    "info" : "VariableDeclarationStatement[10777-10832]:VariableDeclarationStatement[10802-10857]"
  }, {
    "left" : "int j = 0;",
    "right" : "int j = 0;",
    "info" : "VariableDeclarationStatement[10857-10867]:VariableDeclarationStatement[10882-10892]"
  }, {
    "left" : "for (Segment segment : loop)",
    "right" : "for (Segment segment : loop)",
    "info" : "EnhancedForStatement[10892-12014]:EnhancedForStatement[10917-12039]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10921-12014]:Block[10946-12039]"
  }, {
    "left" : "if (j == 0)",
    "right" : "if (j == 0)",
    "info" : "IfStatement[10952-11378]:IfStatement[10977-11403]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10964-11378]:Block[10989-11403]"
  }, {
    "left" : "double x = segment.getLine().toSubSpace(segment.getEnd()).getX();",
    "right" : "double x = segment.getLine().toSubSpace(segment.getEnd()).getX();",
    "info" : "VariableDeclarationStatement[11066-11131]:VariableDeclarationStatement[11091-11156]"
  }, {
    "left" : "x -= FastMath.max(1.0, FastMath.abs(x / 2));",
    "right" : "x -= FastMath.max(1.0, FastMath.abs(x / 2));",
    "info" : "ExpressionStatement[11164-11208]:ExpressionStatement[11189-11233]"
  }, {
    "left" : "array[j++] = null;",
    "right" : "array[j++] = null;",
    "info" : "ExpressionStatement[11241-11259]:ExpressionStatement[11266-11284]"
  }, {
    "left" : "array[j++] = segment.getLine().toSpace(new Vector1D(x));",
    "right" : "array[j++] = segment.getLine().toSpace(new Vector1D(x));",
    "info" : "ExpressionStatement[11292-11348]:ExpressionStatement[11317-11373]"
  }, {
    "left" : "if (j < (array.length - 1))",
    "right" : "if (j < (array.length - 1))",
    "info" : "IfStatement[11408-11579]:IfStatement[11433-11604]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11436-11579]:Block[11461-11604]"
  }, {
    "left" : "array[j++] = segment.getEnd();",
    "right" : "array[j++] = segment.getEnd();",
    "info" : "ExpressionStatement[11519-11549]:ExpressionStatement[11544-11574]"
  }, {
    "left" : "if (j == (array.length - 1))",
    "right" : "if (j == (array.length - 1))",
    "info" : "IfStatement[11609-11987]:IfStatement[11634-12012]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11638-11987]:Block[11663-12012]"
  }, {
    "left" : "double x = segment.getLine().toSubSpace(segment.getStart()).getX();",
    "right" : "double x = segment.getLine().toSubSpace(segment.getStart()).getX();",
    "info" : "VariableDeclarationStatement[11724-11791]:VariableDeclarationStatement[11749-11816]"
  }, {
    "left" : "x += FastMath.max(1.0, FastMath.abs(x / 2));",
    "right" : "x += FastMath.max(1.0, FastMath.abs(x / 2));",
    "info" : "ExpressionStatement[11824-11868]:ExpressionStatement[11849-11893]"
  }, {
    "left" : "array[j++] = segment.getLine().toSpace(new Vector1D(x));",
    "right" : "array[j++] = segment.getLine().toSpace(new Vector1D(x));",
    "info" : "ExpressionStatement[11901-11957]:ExpressionStatement[11926-11982]"
  }, {
    "left" : "vertices[i++] = array;",
    "right" : "vertices[i++] = array;",
    "info" : "ExpressionStatement[12039-12061]:ExpressionStatement[12064-12086]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12089-12412]:Block[12114-12437]"
  }, {
    "left" : "final Vector2D[] array = new Vector2D[loop.size()];",
    "right" : "final Vector2D[] array = new Vector2D[loop.size()];",
    "info" : "VariableDeclarationStatement[12115-12166]:VariableDeclarationStatement[12140-12191]"
  }, {
    "left" : "int j = 0;",
    "right" : "int j = 0;",
    "info" : "VariableDeclarationStatement[12191-12201]:VariableDeclarationStatement[12216-12226]"
  }, {
    "left" : "for (Segment segment : loop)",
    "right" : "for (Segment segment : loop)",
    "info" : "EnhancedForStatement[12226-12343]:EnhancedForStatement[12251-12368]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12255-12343]:Block[12280-12368]"
  }, {
    "left" : "array[j++] = segment.getStart();",
    "right" : "array[j++] = segment.getStart();",
    "info" : "ExpressionStatement[12285-12317]:ExpressionStatement[12310-12342]"
  }, {
    "left" : "vertices[i++] = array;",
    "right" : "vertices[i++] = array;",
    "info" : "ExpressionStatement[12368-12390]:ExpressionStatement[12393-12415]"
  }, {
    "left" : "return vertices.clone();",
    "right" : "return vertices.clone();",
    "info" : "ReturnStatement[12465-12489]:ReturnStatement[12490-12514]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[12808-12815]:Modifier[12833-12840]"
  }, {
    "left" : "List<ComparableSegment>",
    "right" : "List<ComparableSegment>",
    "info" : "ParameterizedType[12816-12839]:ParameterizedType[12841-12864]"
  }, {
    "left" : "followLoop",
    "right" : "followLoop",
    "info" : "SimpleName[12840-12850]:SimpleName[12865-12875]"
  }, {
    "left" : "final AVLTree<ComparableSegment>.Node node",
    "right" : "final AVLTree<ComparableSegment>.Node node",
    "info" : "SingleVariableDeclaration[12851-12893]:SingleVariableDeclaration[12876-12918]"
  }, {
    "left" : "final AVLTree<ComparableSegment> sorted",
    "right" : "final AVLTree<ComparableSegment> sorted",
    "info" : "SingleVariableDeclaration[12942-12981]:SingleVariableDeclaration[12967-13006]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12983-15185]:Block[13008-15210]"
  }, {
    "left" : "final ArrayList<ComparableSegment> loop = new ArrayList<ComparableSegment>();",
    "right" : "final ArrayList<ComparableSegment> loop = new ArrayList<ComparableSegment>();",
    "info" : "VariableDeclarationStatement[12994-13071]:VariableDeclarationStatement[13019-13096]"
  }, {
    "left" : "ComparableSegment segment = node.getElement();",
    "right" : "ComparableSegment segment = node.getElement();",
    "info" : "VariableDeclarationStatement[13080-13126]:VariableDeclarationStatement[13105-13151]"
  }, {
    "left" : "loop.add(segment);",
    "right" : "loop.add(segment);",
    "info" : "ExpressionStatement[13135-13153]:ExpressionStatement[13160-13178]"
  }, {
    "left" : "final Vector2D globalStart = segment.getStart();",
    "right" : "final Vector2D globalStart = segment.getStart();",
    "info" : "VariableDeclarationStatement[13162-13210]:VariableDeclarationStatement[13187-13235]"
  }, {
    "left" : "Vector2D end = segment.getEnd();",
    "right" : "Vector2D end = segment.getEnd();",
    "info" : "VariableDeclarationStatement[13219-13251]:VariableDeclarationStatement[13244-13276]"
  }, {
    "left" : "node.delete();",
    "right" : "node.delete();",
    "info" : "ExpressionStatement[13260-13274]:ExpressionStatement[13285-13299]"
  }, {
    "left" : "final boolean open = segment.getStart() == null;",
    "right" : "final boolean open = segment.getStart() == null;",
    "info" : "VariableDeclarationStatement[13330-13378]:VariableDeclarationStatement[13355-13403]"
  }, {
    "left" : "while ((end != null) && (open || (globalStart.distance(end) > 1.0e-10)))",
    "right" : "while ((end != null) && (open || (globalStart.distance(end) > 1.0e-10)))",
    "info" : "WhileStatement[13388-14906]:WhileStatement[13413-14931]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13461-14906]:Block[13486-14931]"
  }, {
    "left" : "AVLTree<ComparableSegment>.Node selectedNode = null;",
    "right" : "AVLTree<ComparableSegment>.Node selectedNode = null;",
    "info" : "VariableDeclarationStatement[13555-13607]:VariableDeclarationStatement[13580-13632]"
  }, {
    "left" : "ComparableSegment       selectedSegment  = null;",
    "right" : "ComparableSegment       selectedSegment  = null;",
    "info" : "VariableDeclarationStatement[13620-13668]:VariableDeclarationStatement[13645-13693]"
  }, {
    "left" : "double                  selectedDistance = Double.POSITIVE_INFINITY;",
    "right" : "double                  selectedDistance = Double.POSITIVE_INFINITY;",
    "info" : "VariableDeclarationStatement[13681-13749]:VariableDeclarationStatement[13706-13774]"
  }, {
    "left" : "final ComparableSegment lowerLeft        = new ComparableSegment(end, -1.0e-10, -1.0e-10);",
    "right" : "final ComparableSegment lowerLeft        = new ComparableSegment(end, -1.0e-10, -1.0e-10);",
    "info" : "VariableDeclarationStatement[13762-13852]:VariableDeclarationStatement[13787-13877]"
  }, {
    "left" : "final ComparableSegment upperRight       = new ComparableSegment(end, +1.0e-10, +1.0e-10);",
    "right" : "final ComparableSegment upperRight       = new ComparableSegment(end, +1.0e-10, +1.0e-10);",
    "info" : "VariableDeclarationStatement[13865-13955]:VariableDeclarationStatement[13890-13980]"
  }, {
    "left" : "for (AVLTree<ComparableSegment>.Node n = sorted.getNotSmaller(lowerLeft);\n                 (n != null) && (n.getElement().compareTo(upperRight) <= 0);\n                 n = n.getNext())",
    "right" : "for (AVLTree<ComparableSegment>.Node n = sorted.getNotSmaller(lowerLeft);\n                 (n != null) && (n.getElement().compareTo(upperRight) <= 0);\n                 n = n.getNext())",
    "info" : "ForStatement[13968-14492]:ForStatement[13993-14517]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14153-14492]:Block[14178-14517]"
  }, {
    "left" : "segment = n.getElement();",
    "right" : "segment = n.getElement();",
    "info" : "ExpressionStatement[14171-14196]:ExpressionStatement[14196-14221]"
  }, {
    "left" : "final double distance = end.distance(segment.getStart());",
    "right" : "final double distance = end.distance(segment.getStart());",
    "info" : "VariableDeclarationStatement[14213-14270]:VariableDeclarationStatement[14238-14295]"
  }, {
    "left" : "if (distance < selectedDistance)",
    "right" : "if (distance < selectedDistance)",
    "info" : "IfStatement[14287-14478]:IfStatement[14312-14503]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14320-14478]:Block[14345-14503]"
  }, {
    "left" : "selectedNode     = n;",
    "right" : "selectedNode     = n;",
    "info" : "ExpressionStatement[14342-14363]:ExpressionStatement[14367-14388]"
  }, {
    "left" : "selectedSegment  = segment;",
    "right" : "selectedSegment  = segment;",
    "info" : "ExpressionStatement[14384-14411]:ExpressionStatement[14409-14436]"
  }, {
    "left" : "selectedDistance = distance;",
    "right" : "selectedDistance = distance;",
    "info" : "ExpressionStatement[14432-14460]:ExpressionStatement[14457-14485]"
  }, {
    "left" : "if (selectedDistance > 1.0e-10)",
    "right" : "if (selectedDistance > 1.0e-10)",
    "info" : "IfStatement[14506-14776]:IfStatement[14531-14801]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14538-14776]:Block[14563-14801]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[14750-14762]:ReturnStatement[14775-14787]"
  }, {
    "left" : "end = selectedSegment.getEnd();",
    "right" : "end = selectedSegment.getEnd();",
    "info" : "ExpressionStatement[14790-14821]:ExpressionStatement[14815-14846]"
  }, {
    "left" : "loop.add(selectedSegment);",
    "right" : "loop.add(selectedSegment);",
    "info" : "ExpressionStatement[14834-14860]:ExpressionStatement[14859-14885]"
  }, {
    "left" : "selectedNode.delete();",
    "right" : "selectedNode.delete();",
    "info" : "ExpressionStatement[14873-14895]:ExpressionStatement[14898-14920]"
  }, {
    "left" : "if ((loop.size() == 2) && !open)",
    "right" : "if ((loop.size() == 2) && !open)",
    "info" : "IfStatement[14916-15064]:IfStatement[14941-15089]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14949-15064]:Block[14974-15089]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[15042-15054]:ReturnStatement[15067-15079]"
  }, {
    "left" : "if ((end == null) && !open)",
    "right" : "if ((end == null) && !open)",
    "info" : "IfStatement[15074-15156]:IfStatement[15099-15181]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15102-15156]:Block[15127-15181]"
  }, {
    "left" : "throw new MathInternalError();",
    "right" : "throw new MathInternalError();",
    "info" : "ThrowStatement[15116-15146]:ThrowStatement[15141-15171]"
  }, {
    "left" : "return loop;",
    "right" : "return loop;",
    "info" : "ReturnStatement[15166-15178]:ReturnStatement[15191-15203]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[15252-15259]:Modifier[15277-15284]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[15260-15266]:Modifier[15285-15291]"
  }, {
    "left" : "class",
    "right" : "class",
    "info" : "TYPE_DECLARATION_KIND[15267-15272]:TYPE_DECLARATION_KIND[15292-15297]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[15619-15625]:Modifier[15644-15650]"
  }, {
    "left" : "ComparableSegment",
    "right" : "ComparableSegment",
    "info" : "SimpleName[15626-15643]:SimpleName[15651-15668]"
  }, {
    "left" : "final Vector2D start",
    "right" : "final Vector2D start",
    "info" : "SingleVariableDeclaration[15644-15664]:SingleVariableDeclaration[15669-15689]"
  }, {
    "left" : "final Vector2D end",
    "right" : "final Vector2D end",
    "info" : "SingleVariableDeclaration[15666-15684]:SingleVariableDeclaration[15691-15709]"
  }, {
    "left" : "final Line line",
    "right" : "final Line line",
    "info" : "SingleVariableDeclaration[15686-15701]:SingleVariableDeclaration[15711-15726]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15703-15961]:Block[15728-15986]"
  }, {
    "left" : "super(start, end, line);",
    "right" : "super(start, end, line);",
    "info" : "SuperConstructorInvocation[15717-15741]:SuperConstructorInvocation[15742-15766]"
  }, {
    "left" : "sortingKey = (start == null) ?\n                         new OrderedTuple(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY) :\n                         new OrderedTuple(start.getX(), start.getY());",
    "right" : "sortingKey = (start == null) ?\n                         new OrderedTuple(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY) :\n                         new OrderedTuple(start.getX(), start.getY());",
    "info" : "ExpressionStatement[15754-15951]:ExpressionStatement[15779-15976]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[16387-16393]:Modifier[16412-16418]"
  }, {
    "left" : "ComparableSegment",
    "right" : "ComparableSegment",
    "info" : "SimpleName[16394-16411]:SimpleName[16419-16436]"
  }, {
    "left" : "final Vector2D start",
    "right" : "final Vector2D start",
    "info" : "SingleVariableDeclaration[16412-16432]:SingleVariableDeclaration[16437-16457]"
  }, {
    "left" : "final double dx",
    "right" : "final double dx",
    "info" : "SingleVariableDeclaration[16434-16449]:SingleVariableDeclaration[16459-16474]"
  }, {
    "left" : "final double dy",
    "right" : "final double dy",
    "info" : "SingleVariableDeclaration[16451-16466]:SingleVariableDeclaration[16476-16491]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16468-16597]:Block[16493-16622]"
  }, {
    "left" : "super(null, null, null);",
    "right" : "super(null, null, null);",
    "info" : "SuperConstructorInvocation[16482-16506]:SuperConstructorInvocation[16507-16531]"
  }, {
    "left" : "sortingKey = new OrderedTuple(start.getX() + dx, start.getY() + dy);",
    "right" : "sortingKey = new OrderedTuple(start.getX() + dx, start.getY() + dy);",
    "info" : "ExpressionStatement[16519-16587]:ExpressionStatement[16544-16612]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[16636-16642]:Modifier[16661-16667]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[16643-16646]:PrimitiveType[16668-16671]"
  }, {
    "left" : "compareTo",
    "right" : "compareTo",
    "info" : "SimpleName[16647-16656]:SimpleName[16672-16681]"
  }, {
    "left" : "final ComparableSegment o",
    "right" : "final ComparableSegment o",
    "info" : "SingleVariableDeclaration[16657-16682]:SingleVariableDeclaration[16682-16707]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16684-16750]:Block[16709-16775]"
  }, {
    "left" : "return sortingKey.compareTo(o.sortingKey);",
    "right" : "return sortingKey.compareTo(o.sortingKey);",
    "info" : "ReturnStatement[16698-16740]:ReturnStatement[16723-16765]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[16789-16798]:MarkerAnnotation[16814-16823]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[16807-16813]:Modifier[16832-16838]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[16814-16821]:PrimitiveType[16839-16846]"
  }, {
    "left" : "equals",
    "right" : "equals",
    "info" : "SimpleName[16822-16828]:SimpleName[16847-16853]"
  }, {
    "left" : "final Object other",
    "right" : "final Object other",
    "info" : "SingleVariableDeclaration[16829-16847]:SingleVariableDeclaration[16854-16872]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16849-17114]:Block[16874-17139]"
  }, {
    "left" : "if (this == other)",
    "right" : "if (this == other)",
    "info" : "IfStatement[16863-17104]:IfStatement[16888-17129]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16882-16926]:Block[16907-16951]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[16900-16912]:ReturnStatement[16925-16937]"
  }, {
    "left" : "if (other instanceof ComparableSegment)",
    "right" : "if (other instanceof ComparableSegment)",
    "info" : "IfStatement[16932-17104]:IfStatement[16957-17129]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16972-17053]:Block[16997-17078]"
  }, {
    "left" : "return compareTo((ComparableSegment) other) == 0;",
    "right" : "return compareTo((ComparableSegment) other) == 0;",
    "info" : "ReturnStatement[16990-17039]:ReturnStatement[17015-17064]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17059-17104]:Block[17084-17129]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[17077-17090]:ReturnStatement[17102-17115]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[17153-17162]:MarkerAnnotation[17178-17187]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[17171-17177]:Modifier[17196-17202]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[17178-17181]:PrimitiveType[17203-17206]"
  }, {
    "left" : "hashCode",
    "right" : "hashCode",
    "info" : "SimpleName[17182-17190]:SimpleName[17207-17215]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17193-17334]:Block[17218-17359]"
  }, {
    "left" : "return getStart().hashCode() ^ getEnd().hashCode() ^\n                   getLine().hashCode() ^ sortingKey.hashCode();",
    "right" : "return getStart().hashCode() ^ getEnd().hashCode() ^\n                   getLine().hashCode() ^ sortingKey.hashCode();",
    "info" : "ReturnStatement[17207-17324]:ReturnStatement[17232-17349]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[17385-17392]:Modifier[17410-17417]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[17393-17399]:Modifier[17418-17424]"
  }, {
    "left" : "class",
    "right" : "class",
    "info" : "TYPE_DECLARATION_KIND[17400-17405]:TYPE_DECLARATION_KIND[17425-17430]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[17591-17597]:Modifier[17616-17622]"
  }, {
    "left" : "SegmentsBuilder",
    "right" : "SegmentsBuilder",
    "info" : "SimpleName[17598-17613]:SimpleName[17623-17638]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17616-17682]:Block[17641-17707]"
  }, {
    "left" : "sorted = new AVLTree<ComparableSegment>();",
    "right" : "sorted = new AVLTree<ComparableSegment>();",
    "info" : "ExpressionStatement[17630-17672]:ExpressionStatement[17655-17697]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[17721-17727]:Modifier[17746-17752]"
  }, {
    "left" : "Order",
    "right" : "Order",
    "info" : "SimpleType[17728-17733]:SimpleType[17753-17758]"
  }, {
    "left" : "visitOrder",
    "right" : "visitOrder",
    "info" : "SimpleName[17734-17744]:SimpleName[17759-17769]"
  }, {
    "left" : "final BSPTree<Euclidean2D> node",
    "right" : "final BSPTree<Euclidean2D> node",
    "info" : "SingleVariableDeclaration[17745-17776]:SingleVariableDeclaration[17770-17801]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17778-17830]:Block[17803-17855]"
  }, {
    "left" : "return Order.MINUS_SUB_PLUS;",
    "right" : "return Order.MINUS_SUB_PLUS;",
    "info" : "ReturnStatement[17792-17820]:ReturnStatement[17817-17845]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[17869-17875]:Modifier[17894-17900]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[17876-17880]:PrimitiveType[17901-17905]"
  }, {
    "left" : "visitInternalNode",
    "right" : "visitInternalNode",
    "info" : "SimpleName[17881-17898]:SimpleName[17906-17923]"
  }, {
    "left" : "final BSPTree<Euclidean2D> node",
    "right" : "final BSPTree<Euclidean2D> node",
    "info" : "SingleVariableDeclaration[17899-17930]:SingleVariableDeclaration[17924-17955]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17932-18370]:Block[17957-18395]"
  }, {
    "left" : "@SuppressWarnings(\"unchecked\")\n            final BoundaryAttribute<Euclidean2D> attribute = (BoundaryAttribute<Euclidean2D>) node.getAttribute();",
    "right" : "@SuppressWarnings(\"unchecked\")\n            final BoundaryAttribute<Euclidean2D> attribute = (BoundaryAttribute<Euclidean2D>) node.getAttribute();",
    "info" : "VariableDeclarationStatement[17946-18091]:VariableDeclarationStatement[17971-18116]"
  }, {
    "left" : "if (attribute.getPlusOutside() != null)",
    "right" : "if (attribute.getPlusOutside() != null)",
    "info" : "IfStatement[18104-18227]:IfStatement[18129-18252]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18144-18227]:Block[18169-18252]"
  }, {
    "left" : "addContribution(attribute.getPlusOutside(), false);",
    "right" : "addContribution(attribute.getPlusOutside(), false);",
    "info" : "ExpressionStatement[18162-18213]:ExpressionStatement[18187-18238]"
  }, {
    "left" : "if (attribute.getPlusInside() != null)",
    "right" : "if (attribute.getPlusInside() != null)",
    "info" : "IfStatement[18240-18360]:IfStatement[18265-18385]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18279-18360]:Block[18304-18385]"
  }, {
    "left" : "addContribution(attribute.getPlusInside(), true);",
    "right" : "addContribution(attribute.getPlusInside(), true);",
    "info" : "ExpressionStatement[18297-18346]:ExpressionStatement[18322-18371]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[18409-18415]:Modifier[18434-18440]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[18416-18420]:PrimitiveType[18441-18445]"
  }, {
    "left" : "visitLeafNode",
    "right" : "visitLeafNode",
    "info" : "SimpleName[18421-18434]:SimpleName[18446-18459]"
  }, {
    "left" : "final BSPTree<Euclidean2D> node",
    "right" : "final BSPTree<Euclidean2D> node",
    "info" : "SingleVariableDeclaration[18435-18466]:SingleVariableDeclaration[18460-18491]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18468-18479]:Block[18493-18504]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[18669-18676]:Modifier[18694-18701]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[18677-18681]:PrimitiveType[18702-18706]"
  }, {
    "left" : "addContribution",
    "right" : "addContribution",
    "info" : "SimpleName[18682-18697]:SimpleName[18707-18722]"
  }, {
    "left" : "final SubHyperplane<Euclidean2D> sub",
    "right" : "final SubHyperplane<Euclidean2D> sub",
    "info" : "SingleVariableDeclaration[18698-18734]:SingleVariableDeclaration[18723-18759]"
  }, {
    "left" : "final boolean reversed",
    "right" : "final boolean reversed",
    "info" : "SingleVariableDeclaration[18736-18758]:SingleVariableDeclaration[18761-18783]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18760-19768]:Block[18785-19793]"
  }, {
    "left" : "@SuppressWarnings(\"unchecked\")\n            final AbstractSubHyperplane<Euclidean2D, Euclidean1D> absSub =\n                (AbstractSubHyperplane<Euclidean2D, Euclidean1D>) sub;",
    "right" : "@SuppressWarnings(\"unchecked\")\n            final AbstractSubHyperplane<Euclidean2D, Euclidean1D> absSub =\n                (AbstractSubHyperplane<Euclidean2D, Euclidean1D>) sub;",
    "info" : "VariableDeclarationStatement[18774-18950]:VariableDeclarationStatement[18799-18975]"
  }, {
    "left" : "final Line line      = (Line) sub.getHyperplane();",
    "right" : "final Line line      = (Line) sub.getHyperplane();",
    "info" : "VariableDeclarationStatement[18963-19013]:VariableDeclarationStatement[18988-19038]"
  }, {
    "left" : "final List<Interval> intervals = ((IntervalsSet) absSub.getRemainingRegion()).asList();",
    "right" : "final List<Interval> intervals = ((IntervalsSet) absSub.getRemainingRegion()).asList();",
    "info" : "VariableDeclarationStatement[19026-19113]:VariableDeclarationStatement[19051-19138]"
  }, {
    "left" : "for (final Interval i : intervals)",
    "right" : "for (final Interval i : intervals)",
    "info" : "EnhancedForStatement[19126-19758]:EnhancedForStatement[19151-19783]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[19161-19758]:Block[19186-19783]"
  }, {
    "left" : "final Vector2D start = Double.isInfinite(i.getLower()) ?\n                                      null : (Vector2D) line.toSpace(new Vector1D(i.getLower()));",
    "right" : "final Vector2D start = Double.isInfinite(i.getLower()) ?\n                                      null : (Vector2D) line.toSpace(new Vector1D(i.getLower()));",
    "info" : "VariableDeclarationStatement[19179-19333]:VariableDeclarationStatement[19204-19358]"
  }, {
    "left" : "final Vector2D end   = Double.isInfinite(i.getUpper()) ?\n                                      null : (Vector2D) line.toSpace(new Vector1D(i.getUpper()));",
    "right" : "final Vector2D end   = Double.isInfinite(i.getUpper()) ?\n                                      null : (Vector2D) line.toSpace(new Vector1D(i.getUpper()));",
    "info" : "VariableDeclarationStatement[19350-19504]:VariableDeclarationStatement[19375-19529]"
  }, {
    "left" : "if (reversed)",
    "right" : "if (reversed)",
    "info" : "IfStatement[19521-19744]:IfStatement[19546-19769]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[19535-19643]:Block[19560-19668]"
  }, {
    "left" : "sorted.insert(new ComparableSegment(end, start, line.getReverse()));",
    "right" : "sorted.insert(new ComparableSegment(end, start, line.getReverse()));",
    "info" : "ExpressionStatement[19557-19625]:ExpressionStatement[19582-19650]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[19649-19744]:Block[19674-19769]"
  }, {
    "left" : "sorted.insert(new ComparableSegment(start, end, line));",
    "right" : "sorted.insert(new ComparableSegment(start, end, line));",
    "info" : "ExpressionStatement[19671-19726]:ExpressionStatement[19696-19751]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[19862-19868]:Modifier[19887-19893]"
  }, {
    "left" : "AVLTree<ComparableSegment>",
    "right" : "AVLTree<ComparableSegment>",
    "info" : "ParameterizedType[19869-19895]:ParameterizedType[19894-19920]"
  }, {
    "left" : "getSorted",
    "right" : "getSorted",
    "info" : "SimpleName[19896-19905]:SimpleName[19921-19930]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[19908-19946]:Block[19933-19971]"
  }, {
    "left" : "return sorted;",
    "right" : "return sorted;",
    "info" : "ReturnStatement[19922-19936]:ReturnStatement[19947-19961]"
  } ]
}