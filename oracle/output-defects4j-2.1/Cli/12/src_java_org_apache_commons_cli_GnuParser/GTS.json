{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "GnuParser",
      "right" : "GnuParser",
      "info" : "TypeDeclaration[889-3737]:TypeDeclaration[889-4054]"
    }, {
      "left" : "protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",
      "right" : "protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",
      "info" : "MethodDeclaration[1160-3735]:MethodDeclaration[1160-4052]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2103-3735]:Block[2103-4052]"
    }, {
      "left" : "List tokens = new ArrayList();",
      "right" : "List tokens = new ArrayList();",
      "info" : "VariableDeclarationStatement[2113-2143]:VariableDeclarationStatement[2113-2143]"
    }, {
      "left" : "boolean eatTheRest = false;",
      "right" : "boolean eatTheRest = false;",
      "info" : "VariableDeclarationStatement[2153-2180]:VariableDeclarationStatement[2153-2180]"
    }, {
      "left" : "for (int i = 0; i < arguments.length; i++)",
      "right" : "for (int i = 0; i < arguments.length; i++)",
      "info" : "ForStatement[2190-3659]:ForStatement[2190-3976]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2241-3659]:Block[2241-3976]"
    }, {
      "left" : "String arg = arguments[i];",
      "right" : "String arg = arguments[i];",
      "info" : "VariableDeclarationStatement[2255-2281]:VariableDeclarationStatement[2255-2281]"
    }, {
      "left" : "if (\"--\".equals(arg))",
      "right" : "if (\"--\".equals(arg))",
      "info" : "IfStatement[2295-3457]:IfStatement[2295-3774]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2329-2413]:Block[2329-2413]"
    }, {
      "left" : "eatTheRest = true;",
      "right" : "eatTheRest = true;",
      "info" : "ExpressionStatement[2347-2365]:ExpressionStatement[2347-2365]"
    }, {
      "left" : "tokens.add(\"--\");",
      "right" : "tokens.add(\"--\");",
      "info" : "ExpressionStatement[2382-2399]:ExpressionStatement[2382-2399]"
    }, {
      "left" : "if (\"-\".equals(arg))",
      "right" : "if (\"-\".equals(arg))",
      "info" : "IfStatement[2431-3457]:IfStatement[2431-3774]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2464-2512]:Block[2464-2512]"
    }, {
      "left" : "tokens.add(\"-\");",
      "right" : "tokens.add(\"-\");",
      "info" : "ExpressionStatement[2482-2498]:ExpressionStatement[2482-2498]"
    }, {
      "left" : "if (arg.startsWith(\"-\"))",
      "right" : "if (arg.startsWith(\"-\"))",
      "info" : "IfStatement[2530-3457]:IfStatement[2530-3774]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2567-3379]:Block[2567-3696]"
    }, {
      "left" : "String opt = Util.stripLeadingHyphens(arg);",
      "right" : "String opt = Util.stripLeadingHyphens(arg);",
      "info" : "VariableDeclarationStatement[2585-2628]:VariableDeclarationStatement[2585-2628]"
    }, {
      "left" : "if (options.hasOption(opt))",
      "right" : "if (options.hasOption(opt))",
      "info" : "IfStatement[2646-3365]:IfStatement[2646-3682]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2690-2746]:Block[2690-2746]"
    }, {
      "left" : "tokens.add(arg);",
      "right" : "tokens.add(arg);",
      "info" : "ExpressionStatement[2712-2728]:ExpressionStatement[2712-2728]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2784-3365]:Block[2784-3682]"
    }, {
      "left" : "if (options.hasOption(arg.substring(0, 2)))",
      "right" : "if (options.hasOption(arg.substring(0, 2)))",
      "info" : "IfStatement[2806-3347]:IfStatement[3190-3664]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2870-3183]:Block[3254-3500]"
    }, {
      "left" : "tokens.add(arg.substring(0, 2));",
      "right" : "tokens.add(arg.substring(0, 2));",
      "info" : "ExpressionStatement[3051-3083]:ExpressionStatement[3368-3400]"
    }, {
      "left" : "tokens.add(arg.substring(2));",
      "right" : "tokens.add(arg.substring(2));",
      "info" : "ExpressionStatement[3114-3143]:ExpressionStatement[3431-3460]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3229-3347]:Block[3546-3664]"
    }, {
      "left" : "eatTheRest = stopAtNonOption;",
      "right" : "eatTheRest = stopAtNonOption;",
      "info" : "ExpressionStatement[3255-3284]:ExpressionStatement[3572-3601]"
    }, {
      "left" : "tokens.add(arg);",
      "right" : "tokens.add(arg);",
      "info" : "ExpressionStatement[3309-3325]:ExpressionStatement[3626-3642]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3409-3457]:Block[3726-3774]"
    }, {
      "left" : "tokens.add(arg);",
      "right" : "tokens.add(arg);",
      "info" : "ExpressionStatement[3427-3443]:ExpressionStatement[3744-3760]"
    }, {
      "left" : "if (eatTheRest)",
      "right" : "if (eatTheRest)",
      "info" : "IfStatement[3471-3649]:IfStatement[3788-3966]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3499-3649]:Block[3816-3966]"
    }, {
      "left" : "for (i++; i < arguments.length; i++)",
      "right" : "for (i++; i < arguments.length; i++)",
      "info" : "ForStatement[3517-3635]:ForStatement[3834-3952]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3570-3635]:Block[3887-3952]"
    }, {
      "left" : "tokens.add(arguments[i]);",
      "right" : "tokens.add(arguments[i]);",
      "info" : "ExpressionStatement[3592-3617]:ExpressionStatement[3909-3934]"
    }, {
      "left" : "return (String[]) tokens.toArray(new String[tokens.size()]);",
      "right" : "return (String[]) tokens.toArray(new String[tokens.size()]);",
      "info" : "ReturnStatement[3669-3729]:ReturnStatement[3986-4046]"
    } ]
  },
  "interFileMappings" : { }
}