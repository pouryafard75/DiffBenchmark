{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "private static final long serialVersionUID = 1L;",
      "right" : "private static final long serialVersionUID = 1L;",
      "info" : "FieldDeclaration[2608-2755]:FieldDeclaration[2608-2755]"
    }, {
      "left" : "private static final ConcurrentMap<Locale,TimeZoneStrategy> tzsCache=\n        new ConcurrentHashMap<Locale,TimeZoneStrategy>(3);",
      "right" : "private static final ConcurrentMap<Locale,TimeZoneStrategy> tzsCache=\n        new ConcurrentHashMap<Locale,TimeZoneStrategy>(3);",
      "info" : "FieldDeclaration[2761-2889]:FieldDeclaration[2761-2889]"
    }, {
      "left" : "static final Locale JAPANESE_IMPERIAL = new Locale(\"ja\",\"JP\",\"JP\");",
      "right" : "static final Locale JAPANESE_IMPERIAL = new Locale(\"ja\",\"JP\",\"JP\");",
      "info" : "FieldDeclaration[2895-2962]:FieldDeclaration[2895-2962]"
    }, {
      "left" : "private final String pattern;",
      "right" : "private final String pattern;",
      "info" : "FieldDeclaration[2991-3020]:FieldDeclaration[2991-3020]"
    }, {
      "left" : "private final TimeZone timeZone;",
      "right" : "private final TimeZone timeZone;",
      "info" : "FieldDeclaration[3025-3057]:FieldDeclaration[3025-3057]"
    }, {
      "left" : "private final Locale locale;",
      "right" : "private final Locale locale;",
      "info" : "FieldDeclaration[3062-3090]:FieldDeclaration[3062-3090]"
    }, {
      "left" : "private transient Pattern parsePattern;",
      "right" : "private transient Pattern parsePattern;",
      "info" : "FieldDeclaration[3118-3157]:FieldDeclaration[3118-3157]"
    }, {
      "left" : "private transient Strategy[] strategies;",
      "right" : "private transient Strategy[] strategies;",
      "info" : "FieldDeclaration[3162-3202]:FieldDeclaration[3162-3202]"
    }, {
      "left" : "private transient int thisYear;",
      "right" : "private transient int thisYear;",
      "info" : "FieldDeclaration[3207-3238]:FieldDeclaration[3207-3238]"
    }, {
      "left" : "private transient ConcurrentMap<Integer, KeyValue[]> nameValues;",
      "right" : "private transient ConcurrentMap<Integer, KeyValue[]> nameValues;",
      "info" : "FieldDeclaration[3243-3307]:FieldDeclaration[3243-3307]"
    }, {
      "left" : "private transient String currentFormatField;",
      "right" : "private transient String currentFormatField;",
      "info" : "FieldDeclaration[3364-3408]:FieldDeclaration[3364-3408]"
    }, {
      "left" : "private transient Strategy nextStrategy;",
      "right" : "private transient Strategy nextStrategy;",
      "info" : "FieldDeclaration[3413-3453]:FieldDeclaration[3413-3453]"
    }, {
      "left" : "protected FastDateParser(String pattern, TimeZone timeZone, Locale locale)",
      "right" : "protected FastDateParser(String pattern, TimeZone timeZone, Locale locale)",
      "info" : "MethodDeclaration[3459-3902]:MethodDeclaration[3459-3902]"
    }, {
      "left" : "public String getPattern()",
      "right" : "public String getPattern()",
      "info" : "MethodDeclaration[5669-5741]:MethodDeclaration[5885-5957]"
    }, {
      "left" : "public TimeZone getTimeZone()",
      "right" : "public TimeZone getTimeZone()",
      "info" : "MethodDeclaration[5843-5919]:MethodDeclaration[6059-6135]"
    }, {
      "left" : "public Locale getLocale()",
      "right" : "public Locale getLocale()",
      "info" : "MethodDeclaration[6019-6089]:MethodDeclaration[6235-6305]"
    }, {
      "left" : "Pattern getParsePattern()",
      "right" : "Pattern getParsePattern()",
      "info" : "MethodDeclaration[6149-6211]:MethodDeclaration[6365-6427]"
    }, {
      "left" : "public boolean equals(Object obj)",
      "right" : "public boolean equals(Object obj)",
      "info" : "MethodDeclaration[6309-6832]:MethodDeclaration[6525-7048]"
    }, {
      "left" : "public int hashCode()",
      "right" : "public int hashCode()",
      "info" : "MethodDeclaration[6838-7098]:MethodDeclaration[7054-7314]"
    }, {
      "left" : "public String toString()",
      "right" : "public String toString()",
      "info" : "MethodDeclaration[7104-7351]:MethodDeclaration[7320-7567]"
    }, {
      "left" : "private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException",
      "right" : "private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException",
      "info" : "MethodDeclaration[7454-7932]:MethodDeclaration[7670-8148]"
    }, {
      "left" : "public Object parseObject(String source) throws ParseException",
      "right" : "public Object parseObject(String source) throws ParseException",
      "info" : "MethodDeclaration[8050-8164]:MethodDeclaration[8266-8380]"
    }, {
      "left" : "public Date parse(String source) throws ParseException",
      "right" : "public Date parse(String source) throws ParseException",
      "info" : "MethodDeclaration[8276-8944]:MethodDeclaration[8492-9160]"
    }, {
      "left" : "public Object parseObject(String source, ParsePosition pos)",
      "right" : "public Object parseObject(String source, ParsePosition pos)",
      "info" : "MethodDeclaration[9087-9203]:MethodDeclaration[9303-9419]"
    }, {
      "left" : "public Date parse(String source, ParsePosition pos)",
      "right" : "public Date parse(String source, ParsePosition pos)",
      "info" : "MethodDeclaration[9340-9997]:MethodDeclaration[9556-10213]"
    }, {
      "left" : "private static StringBuilder escapeRegex(StringBuilder regex, String value, boolean unquote)",
      "right" : "private static StringBuilder escapeRegex(StringBuilder regex, String value, boolean unquote)",
      "info" : "MethodDeclaration[10112-11260]:MethodDeclaration[10328-11476]"
    }, {
      "left" : "KeyValue",
      "right" : "KeyValue",
      "info" : "TypeDeclaration[11266-11660]:TypeDeclaration[11482-11876]"
    }, {
      "left" : "public String key;",
      "right" : "public String key;",
      "info" : "FieldDeclaration[11364-11382]:FieldDeclaration[11580-11598]"
    }, {
      "left" : "public int value;",
      "right" : "public int value;",
      "info" : "FieldDeclaration[11391-11408]:FieldDeclaration[11607-11624]"
    }, {
      "left" : "public KeyValue(String key, int value)",
      "right" : "public KeyValue(String key, int value)",
      "info" : "MethodDeclaration[11418-11654]:MethodDeclaration[11634-11870]"
    }, {
      "left" : "private static final Comparator<KeyValue> IGNORE_CASE_COMPARATOR = new Comparator<KeyValue> () {\n        @Override\n        public int compare(KeyValue left, KeyValue right) {\n            return left.key.compareToIgnoreCase(right.key);\n        }\n    };",
      "right" : "private static final Comparator<KeyValue> IGNORE_CASE_COMPARATOR = new Comparator<KeyValue> () {\n        @Override\n        public int compare(KeyValue left, KeyValue right) {\n            return left.key.compareToIgnoreCase(right.key);\n        }\n    };",
      "info" : "FieldDeclaration[11666-11971]:FieldDeclaration[11882-12187]"
    }, {
      "left" : "public int compare(KeyValue left, KeyValue right)",
      "right" : "public int compare(KeyValue left, KeyValue right)",
      "info" : "MethodDeclaration[11825-11964]:MethodDeclaration[12041-12180]"
    }, {
      "left" : "KeyValue[] getDisplayNames(int field)",
      "right" : "KeyValue[] getDisplayNames(int field)",
      "info" : "MethodDeclaration[11977-13953]:MethodDeclaration[12193-14169]"
    }, {
      "left" : "private String[] toArray(Map<String, Integer> era)",
      "right" : "private String[] toArray(Map<String, Integer> era)",
      "info" : "MethodDeclaration[13959-14412]:MethodDeclaration[14175-14628]"
    }, {
      "left" : "private static KeyValue[] createKeyValues(String[] longValues, String[] shortValues)",
      "right" : "private static KeyValue[] createKeyValues(String[] longValues, String[] shortValues)",
      "info" : "MethodDeclaration[14418-15021]:MethodDeclaration[14634-15237]"
    }, {
      "left" : "private static int count(String[] values)",
      "right" : "private static int count(String[] values)",
      "info" : "MethodDeclaration[15027-15509]:MethodDeclaration[15243-15725]"
    }, {
      "left" : "private static int copy(KeyValue[] fieldKeyValues, int offset, String[] values)",
      "right" : "private static int copy(KeyValue[] fieldKeyValues, int offset, String[] values)",
      "info" : "MethodDeclaration[15515-16214]:MethodDeclaration[15731-16430]"
    }, {
      "left" : "int adjustYear(int twoDigitYear)",
      "right" : "int adjustYear(int twoDigitYear)",
      "info" : "MethodDeclaration[16220-16643]:MethodDeclaration[16436-16859]"
    }, {
      "left" : "boolean isNextNumber()",
      "right" : "boolean isNextNumber()",
      "info" : "MethodDeclaration[16649-16844]:MethodDeclaration[16865-17060]"
    }, {
      "left" : "int getFieldWidth()",
      "right" : "int getFieldWidth()",
      "info" : "MethodDeclaration[16850-17052]:MethodDeclaration[17066-17268]"
    }, {
      "left" : "Strategy",
      "right" : "Strategy",
      "info" : "TypeDeclaration[17058-18111]:TypeDeclaration[17274-18327]"
    }, {
      "left" : "boolean isNumber();",
      "right" : "boolean isNumber();",
      "info" : "MethodDeclaration[17178-17302]:MethodDeclaration[17394-17518]"
    }, {
      "left" : "void setCalendar(FastDateParser parser, Calendar cal, String value);",
      "right" : "void setCalendar(FastDateParser parser, Calendar cal, String value);",
      "info" : "MethodDeclaration[17311-17635]:MethodDeclaration[17527-17851]"
    }, {
      "left" : "boolean addRegex(FastDateParser parser, StringBuilder regex);",
      "right" : "boolean addRegex(FastDateParser parser, StringBuilder regex);",
      "info" : "MethodDeclaration[17644-18105]:MethodDeclaration[17860-18321]"
    }, {
      "left" : "private static final Pattern formatPattern= Pattern.compile(\n            \"D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++\");",
      "right" : "private static final Pattern formatPattern= Pattern.compile(\n            \"D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++\");",
      "info" : "FieldDeclaration[18117-18385]:FieldDeclaration[18333-18601]"
    }, {
      "left" : "private Strategy getStrategy(String formatField)",
      "right" : "private Strategy getStrategy(String formatField)",
      "info" : "MethodDeclaration[18391-20448]:MethodDeclaration[18607-20664]"
    }, {
      "left" : "CopyQuotedStrategy",
      "right" : "CopyQuotedStrategy",
      "info" : "TypeDeclaration[20454-21596]:TypeDeclaration[20670-21812]"
    }, {
      "left" : "private final String formatField;",
      "right" : "private final String formatField;",
      "info" : "FieldDeclaration[20620-20653]:FieldDeclaration[20836-20869]"
    }, {
      "left" : "CopyQuotedStrategy(String formatField)",
      "right" : "CopyQuotedStrategy(String formatField)",
      "info" : "MethodDeclaration[20663-20914]:MethodDeclaration[20879-21130]"
    }, {
      "left" : "public boolean isNumber()",
      "right" : "public boolean isNumber()",
      "info" : "MethodDeclaration[20924-21194]:MethodDeclaration[21140-21410]"
    }, {
      "left" : "public boolean addRegex(FastDateParser parser, StringBuilder regex)",
      "right" : "public boolean addRegex(FastDateParser parser, StringBuilder regex)",
      "info" : "MethodDeclaration[21204-21427]:MethodDeclaration[21420-21643]"
    }, {
      "left" : "public void setCalendar(FastDateParser parser, Calendar cal, String value)",
      "right" : "public void setCalendar(FastDateParser parser, Calendar cal, String value)",
      "info" : "MethodDeclaration[21437-21590]:MethodDeclaration[21653-21806]"
    }, {
      "left" : "TextStrategy",
      "right" : "TextStrategy",
      "info" : "TypeDeclaration[21602-23330]:TypeDeclaration[21818-23546]"
    }, {
      "left" : "private final int field;",
      "right" : "private final int field;",
      "info" : "FieldDeclaration[21749-21773]:FieldDeclaration[21965-21989]"
    }, {
      "left" : "TextStrategy(int field)",
      "right" : "TextStrategy(int field)",
      "info" : "MethodDeclaration[21783-21973]:MethodDeclaration[21999-22189]"
    }, {
      "left" : "public boolean isNumber()",
      "right" : "public boolean isNumber()",
      "info" : "MethodDeclaration[21983-22113]:MethodDeclaration[22199-22329]"
    }, {
      "left" : "public boolean addRegex(FastDateParser parser, StringBuilder regex)",
      "right" : "public boolean addRegex(FastDateParser parser, StringBuilder regex)",
      "info" : "MethodDeclaration[22123-22537]:MethodDeclaration[22339-22753]"
    }, {
      "left" : "public void setCalendar(FastDateParser parser, Calendar cal, String value)",
      "right" : "public void setCalendar(FastDateParser parser, Calendar cal, String value)",
      "info" : "MethodDeclaration[22547-23324]:MethodDeclaration[22763-23540]"
    }, {
      "left" : "NumberStrategy",
      "right" : "NumberStrategy",
      "info" : "TypeDeclaration[23336-24728]:TypeDeclaration[23552-24944]"
    }, {
      "left" : "protected final int field;",
      "right" : "protected final int field;",
      "info" : "FieldDeclaration[23487-23513]:FieldDeclaration[23703-23729]"
    }, {
      "left" : "NumberStrategy(int field)",
      "right" : "NumberStrategy(int field)",
      "info" : "MethodDeclaration[23523-23718]:MethodDeclaration[23739-23934]"
    }, {
      "left" : "public boolean isNumber()",
      "right" : "public boolean isNumber()",
      "info" : "MethodDeclaration[23728-23857]:MethodDeclaration[23944-24073]"
    }, {
      "left" : "public boolean addRegex(FastDateParser parser, StringBuilder regex)",
      "right" : "public boolean addRegex(FastDateParser parser, StringBuilder regex)",
      "info" : "MethodDeclaration[23867-24262]:MethodDeclaration[24083-24478]"
    }, {
      "left" : "public void setCalendar(FastDateParser parser, Calendar cal, String value)",
      "right" : "public void setCalendar(FastDateParser parser, Calendar cal, String value)",
      "info" : "MethodDeclaration[24272-24486]:MethodDeclaration[24488-24702]"
    }, {
      "left" : "public int modify(int iValue)",
      "right" : "public int modify(int iValue)",
      "info" : "MethodDeclaration[24496-24722]:MethodDeclaration[24712-24938]"
    }, {
      "left" : "private static final Strategy ABBREVIATED_YEAR_STRATEGY = new NumberStrategy(Calendar.YEAR) {\n        \n        @Override\n        public void setCalendar(FastDateParser parser, Calendar cal, String value) {\n            int iValue= Integer.parseInt(value);\n            if(iValue<100) {\n                iValue= parser.adjustYear(iValue);\n            }\n            cal.set(Calendar.YEAR, iValue);\n        }\n    };",
      "right" : "private static final Strategy ABBREVIATED_YEAR_STRATEGY = new NumberStrategy(Calendar.YEAR) {\n        \n        @Override\n        public void setCalendar(FastDateParser parser, Calendar cal, String value) {\n            int iValue= Integer.parseInt(value);\n            if(iValue<100) {\n                iValue= parser.adjustYear(iValue);\n            }\n            cal.set(Calendar.YEAR, iValue);\n        }\n    };",
      "info" : "FieldDeclaration[24734-25183]:FieldDeclaration[24950-25399]"
    }, {
      "left" : "public void setCalendar(FastDateParser parser, Calendar cal, String value)",
      "right" : "public void setCalendar(FastDateParser parser, Calendar cal, String value)",
      "info" : "MethodDeclaration[24836-25176]:MethodDeclaration[25052-25392]"
    }, {
      "left" : "TimeZoneStrategy",
      "right" : "TimeZoneStrategy",
      "info" : "TypeDeclaration[25189-27667]:TypeDeclaration[25405-27883]"
    }, {
      "left" : "final String validTimeZoneChars;",
      "right" : "final String validTimeZoneChars;",
      "info" : "FieldDeclaration[25345-25377]:FieldDeclaration[25561-25593]"
    }, {
      "left" : "final SortedMap<String, TimeZone> tzNames= new TreeMap<String, TimeZone>(String.CASE_INSENSITIVE_ORDER);",
      "right" : "final SortedMap<String, TimeZone> tzNames= new TreeMap<String, TimeZone>(String.CASE_INSENSITIVE_ORDER);",
      "info" : "FieldDeclaration[25386-25490]:FieldDeclaration[25602-25706]"
    }, {
      "left" : "TimeZoneStrategy(Locale locale)",
      "right" : "TimeZoneStrategy(Locale locale)",
      "info" : "MethodDeclaration[25500-26608]:MethodDeclaration[25716-26824]"
    }, {
      "left" : "public boolean isNumber()",
      "right" : "public boolean isNumber()",
      "info" : "MethodDeclaration[26618-26748]:MethodDeclaration[26834-26964]"
    }, {
      "left" : "public boolean addRegex(FastDateParser parser, StringBuilder regex)",
      "right" : "public boolean addRegex(FastDateParser parser, StringBuilder regex)",
      "info" : "MethodDeclaration[26758-26975]:MethodDeclaration[26974-27191]"
    }, {
      "left" : "public void setCalendar(FastDateParser parser, Calendar cal, String value)",
      "right" : "public void setCalendar(FastDateParser parser, Calendar cal, String value)",
      "info" : "MethodDeclaration[26985-27661]:MethodDeclaration[27201-27877]"
    }, {
      "left" : "private static final Strategy ERA_STRATEGY = new TextStrategy(Calendar.ERA);",
      "right" : "private static final Strategy ERA_STRATEGY = new TextStrategy(Calendar.ERA);",
      "info" : "FieldDeclaration[27674-27750]:FieldDeclaration[27890-27966]"
    }, {
      "left" : "private static final Strategy DAY_OF_WEEK_STRATEGY = new TextStrategy(Calendar.DAY_OF_WEEK);",
      "right" : "private static final Strategy DAY_OF_WEEK_STRATEGY = new TextStrategy(Calendar.DAY_OF_WEEK);",
      "info" : "FieldDeclaration[27755-27847]:FieldDeclaration[27971-28063]"
    }, {
      "left" : "private static final Strategy AM_PM_STRATEGY = new TextStrategy(Calendar.AM_PM);",
      "right" : "private static final Strategy AM_PM_STRATEGY = new TextStrategy(Calendar.AM_PM);",
      "info" : "FieldDeclaration[27852-27932]:FieldDeclaration[28068-28148]"
    }, {
      "left" : "private static final Strategy TEXT_MONTH_STRATEGY = new TextStrategy(Calendar.MONTH);",
      "right" : "private static final Strategy TEXT_MONTH_STRATEGY = new TextStrategy(Calendar.MONTH);",
      "info" : "FieldDeclaration[27937-28022]:FieldDeclaration[28153-28238]"
    }, {
      "left" : "private static final Strategy NUMBER_MONTH_STRATEGY = new NumberStrategy(Calendar.MONTH) {\n        @Override\n        public int modify(int iValue) {\n            return iValue-1;\n        }\n    };",
      "right" : "private static final Strategy NUMBER_MONTH_STRATEGY = new NumberStrategy(Calendar.MONTH) {\n        @Override\n        public int modify(int iValue) {\n            return iValue-1;\n        }\n    };",
      "info" : "FieldDeclaration[28028-28222]:FieldDeclaration[28244-28438]"
    }, {
      "left" : "public int modify(int iValue)",
      "right" : "public int modify(int iValue)",
      "info" : "MethodDeclaration[28127-28215]:MethodDeclaration[28343-28431]"
    }, {
      "left" : "private static final Strategy LITERAL_YEAR_STRATEGY = new NumberStrategy(Calendar.YEAR);",
      "right" : "private static final Strategy LITERAL_YEAR_STRATEGY = new NumberStrategy(Calendar.YEAR);",
      "info" : "FieldDeclaration[28227-28315]:FieldDeclaration[28443-28531]"
    }, {
      "left" : "private static final Strategy WEEK_OF_YEAR_STRATEGY = new NumberStrategy(Calendar.WEEK_OF_YEAR);",
      "right" : "private static final Strategy WEEK_OF_YEAR_STRATEGY = new NumberStrategy(Calendar.WEEK_OF_YEAR);",
      "info" : "FieldDeclaration[28320-28416]:FieldDeclaration[28536-28632]"
    }, {
      "left" : "private static final Strategy WEEK_OF_MONTH_STRATEGY = new NumberStrategy(Calendar.WEEK_OF_MONTH);",
      "right" : "private static final Strategy WEEK_OF_MONTH_STRATEGY = new NumberStrategy(Calendar.WEEK_OF_MONTH);",
      "info" : "FieldDeclaration[28421-28519]:FieldDeclaration[28637-28735]"
    }, {
      "left" : "private static final Strategy DAY_OF_YEAR_STRATEGY = new NumberStrategy(Calendar.DAY_OF_YEAR);",
      "right" : "private static final Strategy DAY_OF_YEAR_STRATEGY = new NumberStrategy(Calendar.DAY_OF_YEAR);",
      "info" : "FieldDeclaration[28524-28618]:FieldDeclaration[28740-28834]"
    }, {
      "left" : "private static final Strategy DAY_OF_MONTH_STRATEGY = new NumberStrategy(Calendar.DAY_OF_MONTH);",
      "right" : "private static final Strategy DAY_OF_MONTH_STRATEGY = new NumberStrategy(Calendar.DAY_OF_MONTH);",
      "info" : "FieldDeclaration[28623-28719]:FieldDeclaration[28839-28935]"
    }, {
      "left" : "private static final Strategy DAY_OF_WEEK_IN_MONTH_STRATEGY = new NumberStrategy(Calendar.DAY_OF_WEEK_IN_MONTH);",
      "right" : "private static final Strategy DAY_OF_WEEK_IN_MONTH_STRATEGY = new NumberStrategy(Calendar.DAY_OF_WEEK_IN_MONTH);",
      "info" : "FieldDeclaration[28724-28836]:FieldDeclaration[28940-29052]"
    }, {
      "left" : "private static final Strategy HOUR_OF_DAY_STRATEGY = new NumberStrategy(Calendar.HOUR_OF_DAY);",
      "right" : "private static final Strategy HOUR_OF_DAY_STRATEGY = new NumberStrategy(Calendar.HOUR_OF_DAY);",
      "info" : "FieldDeclaration[28841-28935]:FieldDeclaration[29057-29151]"
    }, {
      "left" : "private static final Strategy MODULO_HOUR_OF_DAY_STRATEGY = new NumberStrategy(Calendar.HOUR_OF_DAY) {\n        @Override\n        public int modify(int iValue) {\n            return iValue%24;\n        }\n    };",
      "right" : "private static final Strategy MODULO_HOUR_OF_DAY_STRATEGY = new NumberStrategy(Calendar.HOUR_OF_DAY) {\n        @Override\n        public int modify(int iValue) {\n            return iValue%24;\n        }\n    };",
      "info" : "FieldDeclaration[28940-29147]:FieldDeclaration[29156-29363]"
    }, {
      "left" : "public int modify(int iValue)",
      "right" : "public int modify(int iValue)",
      "info" : "MethodDeclaration[29051-29140]:MethodDeclaration[29267-29356]"
    }, {
      "left" : "private static final Strategy MODULO_HOUR_STRATEGY = new NumberStrategy(Calendar.HOUR) {\n        @Override\n        public int modify(int iValue) {\n            return iValue%12;\n        }\n    };",
      "right" : "private static final Strategy MODULO_HOUR_STRATEGY = new NumberStrategy(Calendar.HOUR) {\n        @Override\n        public int modify(int iValue) {\n            return iValue%12;\n        }\n    };",
      "info" : "FieldDeclaration[29152-29345]:FieldDeclaration[29368-29561]"
    }, {
      "left" : "public int modify(int iValue)",
      "right" : "public int modify(int iValue)",
      "info" : "MethodDeclaration[29249-29338]:MethodDeclaration[29465-29554]"
    }, {
      "left" : "private static final Strategy HOUR_STRATEGY = new NumberStrategy(Calendar.HOUR);",
      "right" : "private static final Strategy HOUR_STRATEGY = new NumberStrategy(Calendar.HOUR);",
      "info" : "FieldDeclaration[29350-29430]:FieldDeclaration[29566-29646]"
    }, {
      "left" : "private static final Strategy MINUTE_STRATEGY = new NumberStrategy(Calendar.MINUTE);",
      "right" : "private static final Strategy MINUTE_STRATEGY = new NumberStrategy(Calendar.MINUTE);",
      "info" : "FieldDeclaration[29435-29519]:FieldDeclaration[29651-29735]"
    }, {
      "left" : "private static final Strategy SECOND_STRATEGY = new NumberStrategy(Calendar.SECOND);",
      "right" : "private static final Strategy SECOND_STRATEGY = new NumberStrategy(Calendar.SECOND);",
      "info" : "FieldDeclaration[29524-29608]:FieldDeclaration[29740-29824]"
    }, {
      "left" : "private static final Strategy MILLISECOND_STRATEGY = new NumberStrategy(Calendar.MILLISECOND);",
      "right" : "private static final Strategy MILLISECOND_STRATEGY = new NumberStrategy(Calendar.MILLISECOND);",
      "info" : "FieldDeclaration[29613-29707]:FieldDeclaration[29829-29923]"
    } ],
    "mappings" : [
 {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[3708-3717]:Modifier[3708-3717]"
    }, {
      "left" : "FastDateParser",
      "right" : "FastDateParser",
      "info" : "SimpleName[3718-3732]:SimpleName[3718-3732]"
    }, {
      "left" : "String pattern",
      "right" : "String pattern",
      "info" : "SingleVariableDeclaration[3733-3747]:SingleVariableDeclaration[3733-3747]"
    }, {
      "left" : "TimeZone timeZone",
      "right" : "TimeZone timeZone",
      "info" : "SingleVariableDeclaration[3749-3766]:SingleVariableDeclaration[3749-3766]"
    }, {
      "left" : "Locale locale",
      "right" : "Locale locale",
      "info" : "SingleVariableDeclaration[3768-3781]:SingleVariableDeclaration[3768-3781]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3783-3902]:Block[3783-3902]"
    }, {
      "left" : "this.pattern = pattern;",
      "right" : "this.pattern = pattern;",
      "info" : "ExpressionStatement[3793-3816]:ExpressionStatement[3793-3816]"
    }, {
      "left" : "this.timeZone = timeZone;",
      "right" : "this.timeZone = timeZone;",
      "info" : "ExpressionStatement[3825-3850]:ExpressionStatement[3825-3850]"
    }, {
      "left" : "this.locale = locale;",
      "right" : "this.locale = locale;",
      "info" : "ExpressionStatement[3859-3880]:ExpressionStatement[3859-3880]"
    }, {
      "left" : "init();",
      "right" : "init();",
      "info" : "ExpressionStatement[3889-3896]:ExpressionStatement[3889-3896]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[5669-5678]:MarkerAnnotation[5885-5894]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[5683-5689]:Modifier[5899-5905]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[5690-5696]:SimpleType[5906-5912]"
    }, {
      "left" : "getPattern",
      "right" : "getPattern",
      "info" : "SimpleName[5697-5707]:SimpleName[5913-5923]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5710-5741]:Block[5926-5957]"
    }, {
      "left" : "return pattern;",
      "right" : "return pattern;",
      "info" : "ReturnStatement[5720-5735]:ReturnStatement[5936-5951]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[5843-5852]:MarkerAnnotation[6059-6068]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[5857-5863]:Modifier[6073-6079]"
    }, {
      "left" : "TimeZone",
      "right" : "TimeZone",
      "info" : "SimpleType[5864-5872]:SimpleType[6080-6088]"
    }, {
      "left" : "getTimeZone",
      "right" : "getTimeZone",
      "info" : "SimpleName[5873-5884]:SimpleName[6089-6100]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5887-5919]:Block[6103-6135]"
    }, {
      "left" : "return timeZone;",
      "right" : "return timeZone;",
      "info" : "ReturnStatement[5897-5913]:ReturnStatement[6113-6129]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[6019-6028]:MarkerAnnotation[6235-6244]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[6033-6039]:Modifier[6249-6255]"
    }, {
      "left" : "Locale",
      "right" : "Locale",
      "info" : "SimpleType[6040-6046]:SimpleType[6256-6262]"
    }, {
      "left" : "getLocale",
      "right" : "getLocale",
      "info" : "SimpleName[6047-6056]:SimpleName[6263-6272]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6059-6089]:Block[6275-6305]"
    }, {
      "left" : "return locale;",
      "right" : "return locale;",
      "info" : "ReturnStatement[6069-6083]:ReturnStatement[6285-6299]"
    }, {
      "left" : "Pattern",
      "right" : "Pattern",
      "info" : "SimpleType[6149-6156]:SimpleType[6365-6372]"
    }, {
      "left" : "getParsePattern",
      "right" : "getParsePattern",
      "info" : "SimpleName[6157-6172]:SimpleName[6373-6388]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6175-6211]:Block[6391-6427]"
    }, {
      "left" : "return parsePattern;",
      "right" : "return parsePattern;",
      "info" : "ReturnStatement[6185-6205]:ReturnStatement[6401-6421]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[6502-6511]:MarkerAnnotation[6718-6727]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[6516-6522]:Modifier[6732-6738]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[6523-6530]:PrimitiveType[6739-6746]"
    }, {
      "left" : "equals",
      "right" : "equals",
      "info" : "SimpleName[6531-6537]:SimpleName[6747-6753]"
    }, {
      "left" : "Object obj",
      "right" : "Object obj",
      "info" : "SingleVariableDeclaration[6538-6548]:SingleVariableDeclaration[6754-6764]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6550-6832]:Block[6766-7048]"
    }, {
      "left" : "if (! (obj instanceof FastDateParser))",
      "right" : "if (! (obj instanceof FastDateParser))",
      "info" : "IfStatement[6560-6637]:IfStatement[6776-6853]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6600-6637]:Block[6816-6853]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[6614-6627]:ReturnStatement[6830-6843]"
    }, {
      "left" : "FastDateParser other = (FastDateParser) obj;",
      "right" : "FastDateParser other = (FastDateParser) obj;",
      "info" : "VariableDeclarationStatement[6646-6690]:VariableDeclarationStatement[6862-6906]"
    }, {
      "left" : "return pattern.equals(other.pattern)\n            && timeZone.equals(other.timeZone)\n            && locale.equals(other.locale);",
      "right" : "return pattern.equals(other.pattern)\n            && timeZone.equals(other.timeZone)\n            && locale.equals(other.locale);",
      "info" : "ReturnStatement[6699-6826]:ReturnStatement[6915-7042]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[6966-6975]:MarkerAnnotation[7182-7191]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[6980-6986]:Modifier[7196-7202]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[6987-6990]:PrimitiveType[7203-7206]"
    }, {
      "left" : "hashCode",
      "right" : "hashCode",
      "info" : "SimpleName[6991-6999]:SimpleName[7207-7215]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7002-7098]:Block[7218-7314]"
    }, {
      "left" : "return pattern.hashCode() + 13 * (timeZone.hashCode() + 13 * locale.hashCode());",
      "right" : "return pattern.hashCode() + 13 * (timeZone.hashCode() + 13 * locale.hashCode());",
      "info" : "ReturnStatement[7012-7092]:ReturnStatement[7228-7308]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[7215-7224]:MarkerAnnotation[7431-7440]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[7229-7235]:Modifier[7445-7451]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[7236-7242]:SimpleType[7452-7458]"
    }, {
      "left" : "toString",
      "right" : "toString",
      "info" : "SimpleName[7243-7251]:SimpleName[7459-7467]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7254-7351]:Block[7470-7567]"
    }, {
      "left" : "return \"FastDateParser[\" + pattern + \",\" + locale + \",\" + timeZone.getID() + \"]\";",
      "right" : "return \"FastDateParser[\" + pattern + \",\" + locale + \",\" + timeZone.getID() + \"]\";",
      "info" : "ReturnStatement[7264-7345]:ReturnStatement[7480-7561]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[7788-7795]:Modifier[8004-8011]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[7796-7800]:PrimitiveType[8012-8016]"
    }, {
      "left" : "readObject",
      "right" : "readObject",
      "info" : "SimpleName[7801-7811]:SimpleName[8017-8027]"
    }, {
      "left" : "ObjectInputStream in",
      "right" : "ObjectInputStream in",
      "info" : "SingleVariableDeclaration[7812-7832]:SingleVariableDeclaration[8028-8048]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[7841-7852]:SimpleType[8057-8068]"
    }, {
      "left" : "ClassNotFoundException",
      "right" : "ClassNotFoundException",
      "info" : "SimpleType[7854-7876]:SimpleType[8070-8092]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7877-7932]:Block[8093-8148]"
    }, {
      "left" : "in.defaultReadObject();",
      "right" : "in.defaultReadObject();",
      "info" : "ExpressionStatement[7887-7910]:ExpressionStatement[8103-8126]"
    }, {
      "left" : "init();",
      "right" : "init();",
      "info" : "ExpressionStatement[7919-7926]:ExpressionStatement[8135-8142]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[8050-8059]:MarkerAnnotation[8266-8275]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[8064-8070]:Modifier[8280-8286]"
    }, {
      "left" : "Object",
      "right" : "Object",
      "info" : "SimpleType[8071-8077]:SimpleType[8287-8293]"
    }, {
      "left" : "parseObject",
      "right" : "parseObject",
      "info" : "SimpleName[8078-8089]:SimpleName[8294-8305]"
    }, {
      "left" : "String source",
      "right" : "String source",
      "info" : "SingleVariableDeclaration[8090-8103]:SingleVariableDeclaration[8306-8319]"
    }, {
      "left" : "ParseException",
      "right" : "ParseException",
      "info" : "SimpleType[8112-8126]:SimpleType[8328-8342]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8127-8164]:Block[8343-8380]"
    }, {
      "left" : "return parse(source);",
      "right" : "return parse(source);",
      "info" : "ReturnStatement[8137-8158]:ReturnStatement[8353-8374]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[8276-8285]:MarkerAnnotation[8492-8501]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[8290-8296]:Modifier[8506-8512]"
    }, {
      "left" : "Date",
      "right" : "Date",
      "info" : "SimpleType[8297-8301]:SimpleType[8513-8517]"
    }, {
      "left" : "parse",
      "right" : "parse",
      "info" : "SimpleName[8302-8307]:SimpleName[8518-8523]"
    }, {
      "left" : "String source",
      "right" : "String source",
      "info" : "SingleVariableDeclaration[8308-8321]:SingleVariableDeclaration[8524-8537]"
    }, {
      "left" : "ParseException",
      "right" : "ParseException",
      "info" : "SimpleType[8330-8344]:SimpleType[8546-8560]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8345-8944]:Block[8561-9160]"
    }, {
      "left" : "Date date= parse(source, new ParsePosition(0));",
      "right" : "Date date= parse(source, new ParsePosition(0));",
      "info" : "VariableDeclarationStatement[8355-8402]:VariableDeclarationStatement[8571-8618]"
    }, {
      "left" : "if(date==null)",
      "right" : "if(date==null)",
      "info" : "IfStatement[8411-8917]:IfStatement[8627-9133]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8426-8917]:Block[8642-9133]"
    }, {
      "left" : "if (locale.equals(JAPANESE_IMPERIAL))",
      "right" : "if (locale.equals(JAPANESE_IMPERIAL))",
      "info" : "IfStatement[8490-8791]:IfStatement[8706-9007]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8528-8791]:Block[8744-9007]"
    }, {
      "left" : "throw new ParseException(\n                        \"(The \" +locale + \" locale does not support dates before 1868 AD)\\n\" +\n                                \"Unparseable date: \\\"\"+source+\"\\\" does not match \"+parsePattern.pattern(), 0);",
      "right" : "throw new ParseException(\n                        \"(The \" +locale + \" locale does not support dates before 1868 AD)\\n\" +\n                                \"Unparseable date: \\\"\"+source+\"\\\" does not match \"+parsePattern.pattern(), 0);",
      "info" : "ThrowStatement[8546-8777]:ThrowStatement[8762-8993]"
    }, {
      "left" : "throw new ParseException(\"Unparseable date: \\\"\"+source+\"\\\" does not match \"+parsePattern.pattern(), 0);",
      "right" : "throw new ParseException(\"Unparseable date: \\\"\"+source+\"\\\" does not match \"+parsePattern.pattern(), 0);",
      "info" : "ThrowStatement[8804-8907]:ThrowStatement[9020-9123]"
    }, {
      "left" : "return date;",
      "right" : "return date;",
      "info" : "ReturnStatement[8926-8938]:ReturnStatement[9142-9154]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[9087-9096]:MarkerAnnotation[9303-9312]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[9101-9107]:Modifier[9317-9323]"
    }, {
      "left" : "Object",
      "right" : "Object",
      "info" : "SimpleType[9108-9114]:SimpleType[9324-9330]"
    }, {
      "left" : "parseObject",
      "right" : "parseObject",
      "info" : "SimpleName[9115-9126]:SimpleName[9331-9342]"
    }, {
      "left" : "String source",
      "right" : "String source",
      "info" : "SingleVariableDeclaration[9127-9140]:SingleVariableDeclaration[9343-9356]"
    }, {
      "left" : "ParsePosition pos",
      "right" : "ParsePosition pos",
      "info" : "SingleVariableDeclaration[9142-9159]:SingleVariableDeclaration[9358-9375]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9161-9203]:Block[9377-9419]"
    }, {
      "left" : "return parse(source, pos);",
      "right" : "return parse(source, pos);",
      "info" : "ReturnStatement[9171-9197]:ReturnStatement[9387-9413]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[9340-9349]:MarkerAnnotation[9556-9565]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[9354-9360]:Modifier[9570-9576]"
    }, {
      "left" : "Date",
      "right" : "Date",
      "info" : "SimpleType[9361-9365]:SimpleType[9577-9581]"
    }, {
      "left" : "parse",
      "right" : "parse",
      "info" : "SimpleName[9366-9371]:SimpleName[9582-9587]"
    }, {
      "left" : "String source",
      "right" : "String source",
      "info" : "SingleVariableDeclaration[9372-9385]:SingleVariableDeclaration[9588-9601]"
    }, {
      "left" : "ParsePosition pos",
      "right" : "ParsePosition pos",
      "info" : "SingleVariableDeclaration[9387-9404]:SingleVariableDeclaration[9603-9620]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9406-9997]:Block[9622-10213]"
    }, {
      "left" : "int offset= pos.getIndex();",
      "right" : "int offset= pos.getIndex();",
      "info" : "VariableDeclarationStatement[9416-9443]:VariableDeclarationStatement[9632-9659]"
    }, {
      "left" : "Matcher matcher= parsePattern.matcher(source.substring(offset));",
      "right" : "Matcher matcher= parsePattern.matcher(source.substring(offset));",
      "info" : "VariableDeclarationStatement[9452-9516]:VariableDeclarationStatement[9668-9732]"
    }, {
      "left" : "if(!matcher.lookingAt())",
      "right" : "if(!matcher.lookingAt())",
      "info" : "IfStatement[9525-9586]:IfStatement[9741-9802]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9550-9586]:Block[9766-9802]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[9564-9576]:ReturnStatement[9780-9792]"
    }, {
      "left" : "Calendar cal= Calendar.getInstance(timeZone, locale);",
      "right" : "Calendar cal= Calendar.getInstance(timeZone, locale);",
      "info" : "VariableDeclarationStatement[9676-9729]:VariableDeclarationStatement[9892-9945]"
    }, {
      "left" : "cal.clear();",
      "right" : "cal.clear();",
      "info" : "ExpressionStatement[9738-9750]:ExpressionStatement[9954-9966]"
    }, {
      "left" : "for(int i=0; i<strategies.length)",
      "right" : "for(int i=0; i<strategies.length)",
      "info" : "ForStatement[9760-9917]:ForStatement[9976-10133]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9795-9917]:Block[10011-10133]"
    }, {
      "left" : "Strategy strategy= strategies[i++];",
      "right" : "Strategy strategy= strategies[i++];",
      "info" : "VariableDeclarationStatement[9809-9844]:VariableDeclarationStatement[10025-10060]"
    }, {
      "left" : "strategy.setCalendar(this, cal, matcher.group(i));",
      "right" : "strategy.setCalendar(this, cal, matcher.group(i));",
      "info" : "ExpressionStatement[9857-9907]:ExpressionStatement[10073-10123]"
    }, {
      "left" : "pos.setIndex(offset+matcher.end());",
      "right" : "pos.setIndex(offset+matcher.end());",
      "info" : "ExpressionStatement[9926-9961]:ExpressionStatement[10142-10177]"
    }, {
      "left" : "return cal.getTime();",
      "right" : "return cal.getTime();",
      "info" : "ReturnStatement[9970-9991]:ReturnStatement[10186-10207]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[10392-10399]:Modifier[10608-10615]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[10400-10406]:Modifier[10616-10622]"
    }, {
      "left" : "StringBuilder",
      "right" : "StringBuilder",
      "info" : "SimpleType[10407-10420]:SimpleType[10623-10636]"
    }, {
      "left" : "escapeRegex",
      "right" : "escapeRegex",
      "info" : "SimpleName[10421-10432]:SimpleName[10637-10648]"
    }, {
      "left" : "StringBuilder regex",
      "right" : "StringBuilder regex",
      "info" : "SingleVariableDeclaration[10433-10452]:SingleVariableDeclaration[10649-10668]"
    }, {
      "left" : "String value",
      "right" : "String value",
      "info" : "SingleVariableDeclaration[10454-10466]:SingleVariableDeclaration[10670-10682]"
    }, {
      "left" : "boolean unquote",
      "right" : "boolean unquote",
      "info" : "SingleVariableDeclaration[10468-10483]:SingleVariableDeclaration[10684-10699]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10485-11260]:Block[10701-11476]"
    }, {
      "left" : "for(int i= 0; i<value.length(); ++i)",
      "right" : "for(int i= 0; i<value.length(); ++i)",
      "info" : "ForStatement[10495-11232]:ForStatement[10711-11448]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10532-11232]:Block[10748-11448]"
    }, {
      "left" : "char c= value.charAt(i);",
      "right" : "char c= value.charAt(i);",
      "info" : "VariableDeclarationStatement[10546-10570]:VariableDeclarationStatement[10762-10786]"
    }, {
      "left" : "switch(c) {\n            case '\\'':\n                if(unquote) {\n                    if(++i==value.length()) {\n                        return regex;\n                    }\n                    c= value.charAt(i);\n                }\n                break;\n            case '?':\n            case '[':\n            case ']':\n            case '(':\n            case ')':\n            case '{':\n            case '}':\n            case '\\\\':\n            case '|':\n            case '*':\n            case '+':\n            case '^':\n            case '$':\n            case '.':\n                regex.append('\\\\');\n            }",
      "right" : "switch(c) {\n            case '\\'':\n                if(unquote) {\n                    if(++i==value.length()) {\n                        return regex;\n                    }\n                    c= value.charAt(i);\n                }\n                break;\n            case '?':\n            case '[':\n            case ']':\n            case '(':\n            case ')':\n            case '{':\n            case '}':\n            case '\\\\':\n            case '|':\n            case '*':\n            case '+':\n            case '^':\n            case '$':\n            case '.':\n                regex.append('\\\\');\n            }",
      "info" : "SwitchStatement[10583-11193]:SwitchStatement[10799-11409]"
    }, {
      "left" : "case '\\'':",
      "right" : "case '\\'':",
      "info" : "SwitchCase[10607-10617]:SwitchCase[10823-10833]"
    }, {
      "left" : "if(unquote)",
      "right" : "if(unquote)",
      "info" : "IfStatement[10634-10811]:IfStatement[10850-11027]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10646-10811]:Block[10862-11027]"
    }, {
      "left" : "if(++i==value.length())",
      "right" : "if(++i==value.length())",
      "info" : "IfStatement[10668-10753]:IfStatement[10884-10969]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10692-10753]:Block[10908-10969]"
    }, {
      "left" : "return regex;",
      "right" : "return regex;",
      "info" : "ReturnStatement[10718-10731]:ReturnStatement[10934-10947]"
    }, {
      "left" : "c= value.charAt(i);",
      "right" : "c= value.charAt(i);",
      "info" : "ExpressionStatement[10774-10793]:ExpressionStatement[10990-11009]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[10828-10834]:BreakStatement[11044-11050]"
    }, {
      "left" : "case '?':",
      "right" : "case '?':",
      "info" : "SwitchCase[10847-10856]:SwitchCase[11063-11072]"
    }, {
      "left" : "case '[':",
      "right" : "case '[':",
      "info" : "SwitchCase[10869-10878]:SwitchCase[11085-11094]"
    }, {
      "left" : "case ']':",
      "right" : "case ']':",
      "info" : "SwitchCase[10891-10900]:SwitchCase[11107-11116]"
    }, {
      "left" : "case '(':",
      "right" : "case '(':",
      "info" : "SwitchCase[10913-10922]:SwitchCase[11129-11138]"
    }, {
      "left" : "case ')':",
      "right" : "case ')':",
      "info" : "SwitchCase[10935-10944]:SwitchCase[11151-11160]"
    }, {
      "left" : "case '{':",
      "right" : "case '{':",
      "info" : "SwitchCase[10957-10966]:SwitchCase[11173-11182]"
    }, {
      "left" : "case '}':",
      "right" : "case '}':",
      "info" : "SwitchCase[10979-10988]:SwitchCase[11195-11204]"
    }, {
      "left" : "case '\\\\':",
      "right" : "case '\\\\':",
      "info" : "SwitchCase[11001-11011]:SwitchCase[11217-11227]"
    }, {
      "left" : "case '|':",
      "right" : "case '|':",
      "info" : "SwitchCase[11024-11033]:SwitchCase[11240-11249]"
    }, {
      "left" : "case '*':",
      "right" : "case '*':",
      "info" : "SwitchCase[11046-11055]:SwitchCase[11262-11271]"
    }, {
      "left" : "case '+':",
      "right" : "case '+':",
      "info" : "SwitchCase[11068-11077]:SwitchCase[11284-11293]"
    }, {
      "left" : "case '^':",
      "right" : "case '^':",
      "info" : "SwitchCase[11090-11099]:SwitchCase[11306-11315]"
    }, {
      "left" : "case '$':",
      "right" : "case '$':",
      "info" : "SwitchCase[11112-11121]:SwitchCase[11328-11337]"
    }, {
      "left" : "case '.':",
      "right" : "case '.':",
      "info" : "SwitchCase[11134-11143]:SwitchCase[11350-11359]"
    }, {
      "left" : "regex.append('\\\\');",
      "right" : "regex.append('\\\\');",
      "info" : "ExpressionStatement[11160-11179]:ExpressionStatement[11376-11395]"
    }, {
      "left" : "regex.append(c);",
      "right" : "regex.append(c);",
      "info" : "ExpressionStatement[11206-11222]:ExpressionStatement[11422-11438]"
    }, {
      "left" : "return regex;",
      "right" : "return regex;",
      "info" : "ReturnStatement[11241-11254]:ReturnStatement[11457-11470]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[11324-11331]:Modifier[11540-11547]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[11332-11338]:Modifier[11548-11554]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[11339-11344]:TYPE_DECLARATION_KIND[11555-11560]"
    }, {
      "left" : "KeyValue",
      "right" : "KeyValue",
      "info" : "SimpleName[11345-11353]:SimpleName[11561-11569]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[11546-11552]:Modifier[11762-11768]"
    }, {
      "left" : "KeyValue",
      "right" : "KeyValue",
      "info" : "SimpleName[11553-11561]:SimpleName[11769-11777]"
    }, {
      "left" : "String key",
      "right" : "String key",
      "info" : "SingleVariableDeclaration[11562-11572]:SingleVariableDeclaration[11778-11788]"
    }, {
      "left" : "int value",
      "right" : "int value",
      "info" : "SingleVariableDeclaration[11574-11583]:SingleVariableDeclaration[11790-11799]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11585-11654]:Block[11801-11870]"
    }, {
      "left" : "this.key= key;",
      "right" : "this.key= key;",
      "info" : "ExpressionStatement[11599-11613]:ExpressionStatement[11815-11829]"
    }, {
      "left" : "this.value= value;",
      "right" : "this.value= value;",
      "info" : "ExpressionStatement[11626-11644]:ExpressionStatement[11842-11860]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[11825-11834]:MarkerAnnotation[12041-12050]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[11843-11849]:Modifier[12059-12065]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[11850-11853]:PrimitiveType[12066-12069]"
    }, {
      "left" : "compare",
      "right" : "compare",
      "info" : "SimpleName[11854-11861]:SimpleName[12070-12077]"
    }, {
      "left" : "KeyValue left",
      "right" : "KeyValue left",
      "info" : "SingleVariableDeclaration[11862-11875]:SingleVariableDeclaration[12078-12091]"
    }, {
      "left" : "KeyValue right",
      "right" : "KeyValue right",
      "info" : "SingleVariableDeclaration[11877-11891]:SingleVariableDeclaration[12093-12107]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11893-11964]:Block[12109-12180]"
    }, {
      "left" : "return left.key.compareToIgnoreCase(right.key);",
      "right" : "return left.key.compareToIgnoreCase(right.key);",
      "info" : "ReturnStatement[11907-11954]:ReturnStatement[12123-12170]"
    }, {
      "left" : "KeyValue[]",
      "right" : "KeyValue[]",
      "info" : "ArrayType[12155-12165]:ArrayType[12371-12381]"
    }, {
      "left" : "getDisplayNames",
      "right" : "getDisplayNames",
      "info" : "SimpleName[12166-12181]:SimpleName[12382-12397]"
    }, {
      "left" : "int field",
      "right" : "int field",
      "info" : "SingleVariableDeclaration[12182-12191]:SingleVariableDeclaration[12398-12407]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12193-13953]:Block[12409-14169]"
    }, {
      "left" : "Integer fieldInt = Integer.valueOf(field);",
      "right" : "Integer fieldInt = Integer.valueOf(field);",
      "info" : "VariableDeclarationStatement[12203-12245]:VariableDeclarationStatement[12419-12461]"
    }, {
      "left" : "KeyValue[] fieldKeyValues= nameValues.get(fieldInt);",
      "right" : "KeyValue[] fieldKeyValues= nameValues.get(fieldInt);",
      "info" : "VariableDeclarationStatement[12254-12306]:VariableDeclarationStatement[12470-12522]"
    }, {
      "left" : "if(fieldKeyValues==null)",
      "right" : "if(fieldKeyValues==null)",
      "info" : "IfStatement[12315-13916]:IfStatement[12531-14132]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12340-13916]:Block[12556-14132]"
    }, {
      "left" : "DateFormatSymbols symbols= DateFormatSymbols.getInstance(locale);",
      "right" : "DateFormatSymbols symbols= DateFormatSymbols.getInstance(locale);",
      "info" : "VariableDeclarationStatement[12354-12419]:VariableDeclarationStatement[12570-12635]"
    }, {
      "left" : "switch(field) {\n            case Calendar.ERA:\n                // DateFormatSymbols#getEras() only returns AD/BC or translations\n                // It does not work for the Thai Buddhist or Japanese Imperial calendars.\n                // see: https://issues.apache.org/jira/browse/TRINIDAD-2126\n                Calendar c = Calendar.getInstance(locale);\n                // N.B. Some calendars have different short and long symbols, e.g. ja_JP_JP\n                String[] shortEras = toArray(c.getDisplayNames(Calendar.ERA, Calendar.SHORT, locale));\n                String[] longEras = toArray(c.getDisplayNames(Calendar.ERA, Calendar.LONG, locale));\n                fieldKeyValues= createKeyValues(longEras, shortEras);\n                break;\n            case Calendar.DAY_OF_WEEK:\n                fieldKeyValues= createKeyValues(symbols.getWeekdays(), symbols.getShortWeekdays());\n                break;\n            case Calendar.AM_PM:\n                fieldKeyValues= createKeyValues(symbols.getAmPmStrings(), null);\n                break;\n            case Calendar.MONTH:\n                fieldKeyValues= createKeyValues(symbols.getMonths(), symbols.getShortMonths());\n                break;\n            default:\n                throw new IllegalArgumentException(\"Invalid field value \"+field);\n            }",
      "right" : "switch(field) {\n            case Calendar.ERA:\n                // DateFormatSymbols#getEras() only returns AD/BC or translations\n                // It does not work for the Thai Buddhist or Japanese Imperial calendars.\n                // see: https://issues.apache.org/jira/browse/TRINIDAD-2126\n                Calendar c = Calendar.getInstance(locale);\n                // N.B. Some calendars have different short and long symbols, e.g. ja_JP_JP\n                String[] shortEras = toArray(c.getDisplayNames(Calendar.ERA, Calendar.SHORT, locale));\n                String[] longEras = toArray(c.getDisplayNames(Calendar.ERA, Calendar.LONG, locale));\n                fieldKeyValues= createKeyValues(longEras, shortEras);\n                break;\n            case Calendar.DAY_OF_WEEK:\n                fieldKeyValues= createKeyValues(symbols.getWeekdays(), symbols.getShortWeekdays());\n                break;\n            case Calendar.AM_PM:\n                fieldKeyValues= createKeyValues(symbols.getAmPmStrings(), null);\n                break;\n            case Calendar.MONTH:\n                fieldKeyValues= createKeyValues(symbols.getMonths(), symbols.getShortMonths());\n                break;\n            default:\n                throw new IllegalArgumentException(\"Invalid field value \"+field);\n            }",
      "info" : "SwitchStatement[12432-13742]:SwitchStatement[12648-13958]"
    }, {
      "left" : "case Calendar.ERA:",
      "right" : "case Calendar.ERA:",
      "info" : "SwitchCase[12460-12478]:SwitchCase[12676-12694]"
    }, {
      "left" : "Calendar c = Calendar.getInstance(locale);",
      "right" : "Calendar c = Calendar.getInstance(locale);",
      "info" : "VariableDeclarationStatement[12743-12785]:VariableDeclarationStatement[12959-13001]"
    }, {
      "left" : "String[] shortEras = toArray(c.getDisplayNames(Calendar.ERA, Calendar.SHORT, locale));",
      "right" : "String[] shortEras = toArray(c.getDisplayNames(Calendar.ERA, Calendar.SHORT, locale));",
      "info" : "VariableDeclarationStatement[12894-12980]:VariableDeclarationStatement[13110-13196]"
    }, {
      "left" : "String[] longEras = toArray(c.getDisplayNames(Calendar.ERA, Calendar.LONG, locale));",
      "right" : "String[] longEras = toArray(c.getDisplayNames(Calendar.ERA, Calendar.LONG, locale));",
      "info" : "VariableDeclarationStatement[12997-13081]:VariableDeclarationStatement[13213-13297]"
    }, {
      "left" : "fieldKeyValues= createKeyValues(longEras, shortEras);",
      "right" : "fieldKeyValues= createKeyValues(longEras, shortEras);",
      "info" : "ExpressionStatement[13098-13151]:ExpressionStatement[13314-13367]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[13168-13174]:BreakStatement[13384-13390]"
    }, {
      "left" : "case Calendar.DAY_OF_WEEK:",
      "right" : "case Calendar.DAY_OF_WEEK:",
      "info" : "SwitchCase[13187-13213]:SwitchCase[13403-13429]"
    }, {
      "left" : "fieldKeyValues= createKeyValues(symbols.getWeekdays(), symbols.getShortWeekdays());",
      "right" : "fieldKeyValues= createKeyValues(symbols.getWeekdays(), symbols.getShortWeekdays());",
      "info" : "ExpressionStatement[13230-13313]:ExpressionStatement[13446-13529]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[13330-13336]:BreakStatement[13546-13552]"
    }, {
      "left" : "case Calendar.AM_PM:",
      "right" : "case Calendar.AM_PM:",
      "info" : "SwitchCase[13349-13369]:SwitchCase[13565-13585]"
    }, {
      "left" : "fieldKeyValues= createKeyValues(symbols.getAmPmStrings(), null);",
      "right" : "fieldKeyValues= createKeyValues(symbols.getAmPmStrings(), null);",
      "info" : "ExpressionStatement[13386-13450]:ExpressionStatement[13602-13666]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[13467-13473]:BreakStatement[13683-13689]"
    }, {
      "left" : "case Calendar.MONTH:",
      "right" : "case Calendar.MONTH:",
      "info" : "SwitchCase[13486-13506]:SwitchCase[13702-13722]"
    }, {
      "left" : "fieldKeyValues= createKeyValues(symbols.getMonths(), symbols.getShortMonths());",
      "right" : "fieldKeyValues= createKeyValues(symbols.getMonths(), symbols.getShortMonths());",
      "info" : "ExpressionStatement[13523-13602]:ExpressionStatement[13739-13818]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[13619-13625]:BreakStatement[13835-13841]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[13638-13646]:SwitchCase[13854-13862]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Invalid field value \"+field);",
      "right" : "throw new IllegalArgumentException(\"Invalid field value \"+field);",
      "info" : "ThrowStatement[13663-13728]:ThrowStatement[13879-13944]"
    }, {
      "left" : "KeyValue[] prior = nameValues.putIfAbsent(fieldInt, fieldKeyValues);",
      "right" : "KeyValue[] prior = nameValues.putIfAbsent(fieldInt, fieldKeyValues);",
      "info" : "VariableDeclarationStatement[13755-13823]:VariableDeclarationStatement[13971-14039]"
    }, {
      "left" : "if(prior!=null)",
      "right" : "if(prior!=null)",
      "info" : "IfStatement[13836-13906]:IfStatement[14052-14122]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13852-13906]:Block[14068-14122]"
    }, {
      "left" : "fieldKeyValues= prior;",
      "right" : "fieldKeyValues= prior;",
      "info" : "ExpressionStatement[13870-13892]:ExpressionStatement[14086-14108]"
    }, {
      "left" : "return fieldKeyValues;",
      "right" : "return fieldKeyValues;",
      "info" : "ReturnStatement[13925-13947]:ReturnStatement[14141-14163]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[13959-13966]:Modifier[14175-14182]"
    }, {
      "left" : "String[]",
      "right" : "String[]",
      "info" : "ArrayType[13967-13975]:ArrayType[14183-14191]"
    }, {
      "left" : "toArray",
      "right" : "toArray",
      "info" : "SimpleName[13976-13983]:SimpleName[14192-14199]"
    }, {
      "left" : "Map<String, Integer> era",
      "right" : "Map<String, Integer> era",
      "info" : "SingleVariableDeclaration[13984-14008]:SingleVariableDeclaration[14200-14224]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14010-14412]:Block[14226-14628]"
    }, {
      "left" : "String[] eras = new String[era.size()];",
      "right" : "String[] eras = new String[era.size()];",
      "info" : "VariableDeclarationStatement[14020-14059]:VariableDeclarationStatement[14236-14275]"
    }, {
      "left" : "for(Map.Entry<String, Integer> me : era.entrySet())",
      "right" : "for(Map.Entry<String, Integer> me : era.entrySet())",
      "info" : "EnhancedForStatement[14102-14385]:EnhancedForStatement[14318-14601]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14154-14385]:Block[14370-14601]"
    }, {
      "left" : "int idx = me.getValue().intValue();",
      "right" : "int idx = me.getValue().intValue();",
      "info" : "VariableDeclarationStatement[14168-14203]:VariableDeclarationStatement[14384-14419]"
    }, {
      "left" : "final String key = me.getKey();",
      "right" : "final String key = me.getKey();",
      "info" : "VariableDeclarationStatement[14216-14247]:VariableDeclarationStatement[14432-14463]"
    }, {
      "left" : "if (key == null)",
      "right" : "if (key == null)",
      "info" : "IfStatement[14260-14346]:IfStatement[14476-14562]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14277-14346]:Block[14493-14562]"
    }, {
      "left" : "throw new IllegalArgumentException();",
      "right" : "throw new IllegalArgumentException();",
      "info" : "ThrowStatement[14295-14332]:ThrowStatement[14511-14548]"
    }, {
      "left" : "eras[idx] = key;",
      "right" : "eras[idx] = key;",
      "info" : "ExpressionStatement[14359-14375]:ExpressionStatement[14575-14591]"
    }, {
      "left" : "return eras;",
      "right" : "return eras;",
      "info" : "ReturnStatement[14394-14406]:ReturnStatement[14610-14622]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[14670-14677]:Modifier[14886-14893]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[14678-14684]:Modifier[14894-14900]"
    }, {
      "left" : "KeyValue[]",
      "right" : "KeyValue[]",
      "info" : "ArrayType[14685-14695]:ArrayType[14901-14911]"
    }, {
      "left" : "createKeyValues",
      "right" : "createKeyValues",
      "info" : "SimpleName[14696-14711]:SimpleName[14912-14927]"
    }, {
      "left" : "String[] longValues",
      "right" : "String[] longValues",
      "info" : "SingleVariableDeclaration[14712-14731]:SingleVariableDeclaration[14928-14947]"
    }, {
      "left" : "String[] shortValues",
      "right" : "String[] shortValues",
      "info" : "SingleVariableDeclaration[14733-14753]:SingleVariableDeclaration[14949-14969]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14755-15021]:Block[14971-15237]"
    }, {
      "left" : "KeyValue[] fieldKeyValues= new KeyValue[count(longValues)+count(shortValues)];",
      "right" : "KeyValue[] fieldKeyValues= new KeyValue[count(longValues)+count(shortValues)];",
      "info" : "VariableDeclarationStatement[14765-14843]:VariableDeclarationStatement[14981-15059]"
    }, {
      "left" : "copy(fieldKeyValues, copy(fieldKeyValues, 0, longValues), shortValues);",
      "right" : "copy(fieldKeyValues, copy(fieldKeyValues, 0, longValues), shortValues);",
      "info" : "ExpressionStatement[14852-14923]:ExpressionStatement[15068-15139]"
    }, {
      "left" : "Arrays.sort(fieldKeyValues, IGNORE_CASE_COMPARATOR);",
      "right" : "Arrays.sort(fieldKeyValues, IGNORE_CASE_COMPARATOR);",
      "info" : "ExpressionStatement[14932-14984]:ExpressionStatement[15148-15200]"
    }, {
      "left" : "return fieldKeyValues;",
      "right" : "return fieldKeyValues;",
      "info" : "ReturnStatement[14993-15015]:ReturnStatement[15209-15231]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[15238-15245]:Modifier[15454-15461]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[15246-15252]:Modifier[15462-15468]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[15253-15256]:PrimitiveType[15469-15472]"
    }, {
      "left" : "count",
      "right" : "count",
      "info" : "SimpleName[15257-15262]:SimpleName[15473-15478]"
    }, {
      "left" : "String[] values",
      "right" : "String[] values",
      "info" : "SingleVariableDeclaration[15263-15278]:SingleVariableDeclaration[15479-15494]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15280-15509]:Block[15496-15725]"
    }, {
      "left" : "int count= 0;",
      "right" : "int count= 0;",
      "info" : "VariableDeclarationStatement[15290-15303]:VariableDeclarationStatement[15506-15519]"
    }, {
      "left" : "if(values!=null)",
      "right" : "if(values!=null)",
      "info" : "IfStatement[15312-15481]:IfStatement[15528-15697]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15329-15481]:Block[15545-15697]"
    }, {
      "left" : "for(String value : values)",
      "right" : "for(String value : values)",
      "info" : "EnhancedForStatement[15343-15471]:EnhancedForStatement[15559-15687]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15370-15471]:Block[15586-15687]"
    }, {
      "left" : "if(value.length()>0)",
      "right" : "if(value.length()>0)",
      "info" : "IfStatement[15388-15457]:IfStatement[15604-15673]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15409-15457]:Block[15625-15673]"
    }, {
      "left" : "++count;",
      "right" : "++count;",
      "info" : "ExpressionStatement[15431-15439]:ExpressionStatement[15647-15655]"
    }, {
      "left" : "return count;",
      "right" : "return count;",
      "info" : "ReturnStatement[15490-15503]:ReturnStatement[15706-15719]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[15835-15842]:Modifier[16051-16058]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[15843-15849]:Modifier[16059-16065]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[15850-15853]:PrimitiveType[16066-16069]"
    }, {
      "left" : "copy",
      "right" : "copy",
      "info" : "SimpleName[15854-15858]:SimpleName[16070-16074]"
    }, {
      "left" : "KeyValue[] fieldKeyValues",
      "right" : "KeyValue[] fieldKeyValues",
      "info" : "SingleVariableDeclaration[15859-15884]:SingleVariableDeclaration[16075-16100]"
    }, {
      "left" : "int offset",
      "right" : "int offset",
      "info" : "SingleVariableDeclaration[15886-15896]:SingleVariableDeclaration[16102-16112]"
    }, {
      "left" : "String[] values",
      "right" : "String[] values",
      "info" : "SingleVariableDeclaration[15898-15913]:SingleVariableDeclaration[16114-16129]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15915-16214]:Block[16131-16430]"
    }, {
      "left" : "if(values!=null)",
      "right" : "if(values!=null)",
      "info" : "IfStatement[15925-16185]:IfStatement[16141-16401]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15942-16185]:Block[16158-16401]"
    }, {
      "left" : "for(int i= 0; i<values.length; ++i)",
      "right" : "for(int i= 0; i<values.length; ++i)",
      "info" : "ForStatement[15956-16175]:ForStatement[16172-16391]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15992-16175]:Block[16208-16391]"
    }, {
      "left" : "String value= values[i];",
      "right" : "String value= values[i];",
      "info" : "VariableDeclarationStatement[16010-16034]:VariableDeclarationStatement[16226-16250]"
    }, {
      "left" : "if(value.length()>0)",
      "right" : "if(value.length()>0)",
      "info" : "IfStatement[16051-16161]:IfStatement[16267-16377]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16072-16161]:Block[16288-16377]"
    }, {
      "left" : "fieldKeyValues[offset++]= new KeyValue(value, i);",
      "right" : "fieldKeyValues[offset++]= new KeyValue(value, i);",
      "info" : "ExpressionStatement[16094-16143]:ExpressionStatement[16310-16359]"
    }, {
      "left" : "return offset;",
      "right" : "return offset;",
      "info" : "ReturnStatement[16194-16208]:ReturnStatement[16410-16424]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[16448-16451]:PrimitiveType[16664-16667]"
    }, {
      "left" : "adjustYear",
      "right" : "adjustYear",
      "info" : "SimpleName[16452-16462]:SimpleName[16668-16678]"
    }, {
      "left" : "int twoDigitYear",
      "right" : "int twoDigitYear",
      "info" : "SingleVariableDeclaration[16463-16479]:SingleVariableDeclaration[16679-16695]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16481-16643]:Block[16697-16859]"
    }, {
      "left" : "int trial= twoDigitYear + thisYear - thisYear%100;",
      "right" : "int trial= twoDigitYear + thisYear - thisYear%100;",
      "info" : "VariableDeclarationStatement[16491-16541]:VariableDeclarationStatement[16707-16757]"
    }, {
      "left" : "if(trial < thisYear+20)",
      "right" : "if(trial < thisYear+20)",
      "info" : "IfStatement[16550-16611]:IfStatement[16766-16827]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16574-16611]:Block[16790-16827]"
    }, {
      "left" : "return trial;",
      "right" : "return trial;",
      "info" : "ReturnStatement[16588-16601]:ReturnStatement[16804-16817]"
    }, {
      "left" : "return trial-100;",
      "right" : "return trial-100;",
      "info" : "ReturnStatement[16620-16637]:ReturnStatement[16836-16853]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[16752-16759]:PrimitiveType[16968-16975]"
    }, {
      "left" : "isNextNumber",
      "right" : "isNextNumber",
      "info" : "SimpleName[16760-16772]:SimpleName[16976-16988]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16775-16844]:Block[16991-17060]"
    }, {
      "left" : "return nextStrategy!=null && nextStrategy.isNumber();",
      "right" : "return nextStrategy!=null && nextStrategy.isNumber();",
      "info" : "ReturnStatement[16785-16838]:ReturnStatement[17001-17054]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[16981-16984]:PrimitiveType[17197-17200]"
    }, {
      "left" : "getFieldWidth",
      "right" : "getFieldWidth",
      "info" : "SimpleName[16985-16998]:SimpleName[17201-17214]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17001-17052]:Block[17217-17268]"
    }, {
      "left" : "return currentFormatField.length();",
      "right" : "return currentFormatField.length();",
      "info" : "ReturnStatement[17011-17046]:ReturnStatement[17227-17262]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[17141-17148]:Modifier[17357-17364]"
    }, {
      "left" : "interface",
      "right" : "interface",
      "info" : "TYPE_DECLARATION_KIND[17149-17158]:TYPE_DECLARATION_KIND[17365-17374]"
    }, {
      "left" : "Strategy",
      "right" : "Strategy",
      "info" : "SimpleName[17159-17167]:SimpleName[17375-17383]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[17283-17290]:PrimitiveType[17499-17506]"
    }, {
      "left" : "isNumber",
      "right" : "isNumber",
      "info" : "SimpleName[17291-17299]:SimpleName[17507-17515]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[17567-17571]:PrimitiveType[17783-17787]"
    }, {
      "left" : "setCalendar",
      "right" : "setCalendar",
      "info" : "SimpleName[17572-17583]:SimpleName[17788-17799]"
    }, {
      "left" : "FastDateParser parser",
      "right" : "FastDateParser parser",
      "info" : "SingleVariableDeclaration[17584-17605]:SingleVariableDeclaration[17800-17821]"
    }, {
      "left" : "Calendar cal",
      "right" : "Calendar cal",
      "info" : "SingleVariableDeclaration[17607-17619]:SingleVariableDeclaration[17823-17835]"
    }, {
      "left" : "String value",
      "right" : "String value",
      "info" : "SingleVariableDeclaration[17621-17633]:SingleVariableDeclaration[17837-17849]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[18044-18051]:PrimitiveType[18260-18267]"
    }, {
      "left" : "addRegex",
      "right" : "addRegex",
      "info" : "SimpleName[18052-18060]:SimpleName[18268-18276]"
    }, {
      "left" : "FastDateParser parser",
      "right" : "FastDateParser parser",
      "info" : "SingleVariableDeclaration[18061-18082]:SingleVariableDeclaration[18277-18298]"
    }, {
      "left" : "StringBuilder regex",
      "right" : "StringBuilder regex",
      "info" : "SingleVariableDeclaration[18084-18103]:SingleVariableDeclaration[18300-18319]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[18618-18625]:Modifier[18834-18841]"
    }, {
      "left" : "Strategy",
      "right" : "Strategy",
      "info" : "SimpleType[18626-18634]:SimpleType[18842-18850]"
    }, {
      "left" : "getStrategy",
      "right" : "getStrategy",
      "info" : "SimpleName[18635-18646]:SimpleName[18851-18862]"
    }, {
      "left" : "String formatField",
      "right" : "String formatField",
      "info" : "SingleVariableDeclaration[18647-18665]:SingleVariableDeclaration[18863-18881]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18667-20448]:Block[18883-20664]"
    }, {
      "left" : "switch(formatField.charAt(0)) {\n        case '\\'':\n            if(formatField.length()>2) {\n                formatField= formatField.substring(1, formatField.length()-1);\n            }\n            //$FALL-THROUGH$\n        default:\n            return new CopyQuotedStrategy(formatField);\n        case 'D':\n            return DAY_OF_YEAR_STRATEGY;\n        case 'E':\n            return DAY_OF_WEEK_STRATEGY;\n        case 'F':\n            return DAY_OF_WEEK_IN_MONTH_STRATEGY;\n        case 'G':\n            return ERA_STRATEGY;\n        case 'H':\n            return MODULO_HOUR_OF_DAY_STRATEGY;\n        case 'K':\n            return HOUR_STRATEGY;\n        case 'M':\n            return formatField.length()>=3 ?TEXT_MONTH_STRATEGY :NUMBER_MONTH_STRATEGY;\n        case 'S':\n            return MILLISECOND_STRATEGY;\n        case 'W':\n            return WEEK_OF_MONTH_STRATEGY;\n        case 'Z':\n            break;\n        case 'a':\n            return AM_PM_STRATEGY;\n        case 'd':\n            return DAY_OF_MONTH_STRATEGY;\n        case 'h':\n            return MODULO_HOUR_STRATEGY;\n        case 'k':\n            return HOUR_OF_DAY_STRATEGY;\n        case 'm':\n            return MINUTE_STRATEGY;\n        case 's':\n            return SECOND_STRATEGY;\n        case 'w':\n            return WEEK_OF_YEAR_STRATEGY;\n        case 'y':\n            return formatField.length()>2 ?LITERAL_YEAR_STRATEGY :ABBREVIATED_YEAR_STRATEGY;\n        case 'z':\n            break;\n        }",
      "right" : "switch(formatField.charAt(0)) {\n        case '\\'':\n            if(formatField.length()>2) {\n                formatField= formatField.substring(1, formatField.length()-1);\n            }\n            //$FALL-THROUGH$\n        default:\n            return new CopyQuotedStrategy(formatField);\n        case 'D':\n            return DAY_OF_YEAR_STRATEGY;\n        case 'E':\n            return DAY_OF_WEEK_STRATEGY;\n        case 'F':\n            return DAY_OF_WEEK_IN_MONTH_STRATEGY;\n        case 'G':\n            return ERA_STRATEGY;\n        case 'H':\n            return MODULO_HOUR_OF_DAY_STRATEGY;\n        case 'K':\n            return HOUR_STRATEGY;\n        case 'M':\n            return formatField.length()>=3 ?TEXT_MONTH_STRATEGY :NUMBER_MONTH_STRATEGY;\n        case 'S':\n            return MILLISECOND_STRATEGY;\n        case 'W':\n            return WEEK_OF_MONTH_STRATEGY;\n        case 'Z':\n            break;\n        case 'a':\n            return AM_PM_STRATEGY;\n        case 'd':\n            return DAY_OF_MONTH_STRATEGY;\n        case 'h':\n            return MODULO_HOUR_STRATEGY;\n        case 'k':\n            return HOUR_OF_DAY_STRATEGY;\n        case 'm':\n            return MINUTE_STRATEGY;\n        case 's':\n            return SECOND_STRATEGY;\n        case 'w':\n            return WEEK_OF_YEAR_STRATEGY;\n        case 'y':\n            return formatField.length()>2 ?LITERAL_YEAR_STRATEGY :ABBREVIATED_YEAR_STRATEGY;\n        case 'z':\n            break;\n        }",
      "info" : "SwitchStatement[18677-20138]:SwitchStatement[18893-20354]"
    }, {
      "left" : "case '\\'':",
      "right" : "case '\\'':",
      "info" : "SwitchCase[18717-18727]:SwitchCase[18933-18943]"
    }, {
      "left" : "if(formatField.length()>2)",
      "right" : "if(formatField.length()>2)",
      "info" : "IfStatement[18740-18861]:IfStatement[18956-19077]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18767-18861]:Block[18983-19077]"
    }, {
      "left" : "formatField= formatField.substring(1, formatField.length()-1);",
      "right" : "formatField= formatField.substring(1, formatField.length()-1);",
      "info" : "ExpressionStatement[18785-18847]:ExpressionStatement[19001-19063]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[18899-18907]:SwitchCase[19115-19123]"
    }, {
      "left" : "return new CopyQuotedStrategy(formatField);",
      "right" : "return new CopyQuotedStrategy(formatField);",
      "info" : "ReturnStatement[18920-18963]:ReturnStatement[19136-19179]"
    }, {
      "left" : "case 'D':",
      "right" : "case 'D':",
      "info" : "SwitchCase[18972-18981]:SwitchCase[19188-19197]"
    }, {
      "left" : "return DAY_OF_YEAR_STRATEGY;",
      "right" : "return DAY_OF_YEAR_STRATEGY;",
      "info" : "ReturnStatement[18994-19022]:ReturnStatement[19210-19238]"
    }, {
      "left" : "case 'E':",
      "right" : "case 'E':",
      "info" : "SwitchCase[19031-19040]:SwitchCase[19247-19256]"
    }, {
      "left" : "return DAY_OF_WEEK_STRATEGY;",
      "right" : "return DAY_OF_WEEK_STRATEGY;",
      "info" : "ReturnStatement[19053-19081]:ReturnStatement[19269-19297]"
    }, {
      "left" : "case 'F':",
      "right" : "case 'F':",
      "info" : "SwitchCase[19090-19099]:SwitchCase[19306-19315]"
    }, {
      "left" : "return DAY_OF_WEEK_IN_MONTH_STRATEGY;",
      "right" : "return DAY_OF_WEEK_IN_MONTH_STRATEGY;",
      "info" : "ReturnStatement[19112-19149]:ReturnStatement[19328-19365]"
    }, {
      "left" : "case 'G':",
      "right" : "case 'G':",
      "info" : "SwitchCase[19158-19167]:SwitchCase[19374-19383]"
    }, {
      "left" : "return ERA_STRATEGY;",
      "right" : "return ERA_STRATEGY;",
      "info" : "ReturnStatement[19180-19200]:ReturnStatement[19396-19416]"
    }, {
      "left" : "case 'H':",
      "right" : "case 'H':",
      "info" : "SwitchCase[19209-19218]:SwitchCase[19425-19434]"
    }, {
      "left" : "return MODULO_HOUR_OF_DAY_STRATEGY;",
      "right" : "return MODULO_HOUR_OF_DAY_STRATEGY;",
      "info" : "ReturnStatement[19231-19266]:ReturnStatement[19447-19482]"
    }, {
      "left" : "case 'K':",
      "right" : "case 'K':",
      "info" : "SwitchCase[19275-19284]:SwitchCase[19491-19500]"
    }, {
      "left" : "return HOUR_STRATEGY;",
      "right" : "return HOUR_STRATEGY;",
      "info" : "ReturnStatement[19297-19318]:ReturnStatement[19513-19534]"
    }, {
      "left" : "case 'M':",
      "right" : "case 'M':",
      "info" : "SwitchCase[19327-19336]:SwitchCase[19543-19552]"
    }, {
      "left" : "return formatField.length()>=3 ?TEXT_MONTH_STRATEGY :NUMBER_MONTH_STRATEGY;",
      "right" : "return formatField.length()>=3 ?TEXT_MONTH_STRATEGY :NUMBER_MONTH_STRATEGY;",
      "info" : "ReturnStatement[19349-19424]:ReturnStatement[19565-19640]"
    }, {
      "left" : "case 'S':",
      "right" : "case 'S':",
      "info" : "SwitchCase[19433-19442]:SwitchCase[19649-19658]"
    }, {
      "left" : "return MILLISECOND_STRATEGY;",
      "right" : "return MILLISECOND_STRATEGY;",
      "info" : "ReturnStatement[19455-19483]:ReturnStatement[19671-19699]"
    }, {
      "left" : "case 'W':",
      "right" : "case 'W':",
      "info" : "SwitchCase[19492-19501]:SwitchCase[19708-19717]"
    }, {
      "left" : "return WEEK_OF_MONTH_STRATEGY;",
      "right" : "return WEEK_OF_MONTH_STRATEGY;",
      "info" : "ReturnStatement[19514-19544]:ReturnStatement[19730-19760]"
    }, {
      "left" : "case 'Z':",
      "right" : "case 'Z':",
      "info" : "SwitchCase[19553-19562]:SwitchCase[19769-19778]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[19575-19581]:BreakStatement[19791-19797]"
    }, {
      "left" : "case 'a':",
      "right" : "case 'a':",
      "info" : "SwitchCase[19590-19599]:SwitchCase[19806-19815]"
    }, {
      "left" : "return AM_PM_STRATEGY;",
      "right" : "return AM_PM_STRATEGY;",
      "info" : "ReturnStatement[19612-19634]:ReturnStatement[19828-19850]"
    }, {
      "left" : "case 'd':",
      "right" : "case 'd':",
      "info" : "SwitchCase[19643-19652]:SwitchCase[19859-19868]"
    }, {
      "left" : "return DAY_OF_MONTH_STRATEGY;",
      "right" : "return DAY_OF_MONTH_STRATEGY;",
      "info" : "ReturnStatement[19665-19694]:ReturnStatement[19881-19910]"
    }, {
      "left" : "case 'h':",
      "right" : "case 'h':",
      "info" : "SwitchCase[19703-19712]:SwitchCase[19919-19928]"
    }, {
      "left" : "return MODULO_HOUR_STRATEGY;",
      "right" : "return MODULO_HOUR_STRATEGY;",
      "info" : "ReturnStatement[19725-19753]:ReturnStatement[19941-19969]"
    }, {
      "left" : "case 'k':",
      "right" : "case 'k':",
      "info" : "SwitchCase[19762-19771]:SwitchCase[19978-19987]"
    }, {
      "left" : "return HOUR_OF_DAY_STRATEGY;",
      "right" : "return HOUR_OF_DAY_STRATEGY;",
      "info" : "ReturnStatement[19784-19812]:ReturnStatement[20000-20028]"
    }, {
      "left" : "case 'm':",
      "right" : "case 'm':",
      "info" : "SwitchCase[19821-19830]:SwitchCase[20037-20046]"
    }, {
      "left" : "return MINUTE_STRATEGY;",
      "right" : "return MINUTE_STRATEGY;",
      "info" : "ReturnStatement[19843-19866]:ReturnStatement[20059-20082]"
    }, {
      "left" : "case 's':",
      "right" : "case 's':",
      "info" : "SwitchCase[19875-19884]:SwitchCase[20091-20100]"
    }, {
      "left" : "return SECOND_STRATEGY;",
      "right" : "return SECOND_STRATEGY;",
      "info" : "ReturnStatement[19897-19920]:ReturnStatement[20113-20136]"
    }, {
      "left" : "case 'w':",
      "right" : "case 'w':",
      "info" : "SwitchCase[19929-19938]:SwitchCase[20145-20154]"
    }, {
      "left" : "return WEEK_OF_YEAR_STRATEGY;",
      "right" : "return WEEK_OF_YEAR_STRATEGY;",
      "info" : "ReturnStatement[19951-19980]:ReturnStatement[20167-20196]"
    }, {
      "left" : "case 'y':",
      "right" : "case 'y':",
      "info" : "SwitchCase[19989-19998]:SwitchCase[20205-20214]"
    }, {
      "left" : "return formatField.length()>2 ?LITERAL_YEAR_STRATEGY :ABBREVIATED_YEAR_STRATEGY;",
      "right" : "return formatField.length()>2 ?LITERAL_YEAR_STRATEGY :ABBREVIATED_YEAR_STRATEGY;",
      "info" : "ReturnStatement[20011-20091]:ReturnStatement[20227-20307]"
    }, {
      "left" : "case 'z':",
      "right" : "case 'z':",
      "info" : "SwitchCase[20100-20109]:SwitchCase[20316-20325]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[20122-20128]:BreakStatement[20338-20344]"
    }, {
      "left" : "TimeZoneStrategy tzs= tzsCache.get(locale);",
      "right" : "TimeZoneStrategy tzs= tzsCache.get(locale);",
      "info" : "VariableDeclarationStatement[20147-20190]:VariableDeclarationStatement[20363-20406]"
    }, {
      "left" : "if(tzs==null)",
      "right" : "if(tzs==null)",
      "info" : "IfStatement[20199-20422]:IfStatement[20415-20638]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20213-20422]:Block[20429-20638]"
    }, {
      "left" : "tzs= new TimeZoneStrategy(locale);",
      "right" : "tzs= new TimeZoneStrategy(locale);",
      "info" : "ExpressionStatement[20227-20261]:ExpressionStatement[20443-20477]"
    }, {
      "left" : "TimeZoneStrategy inCache= tzsCache.putIfAbsent(locale, tzs);",
      "right" : "TimeZoneStrategy inCache= tzsCache.putIfAbsent(locale, tzs);",
      "info" : "VariableDeclarationStatement[20274-20334]:VariableDeclarationStatement[20490-20550]"
    }, {
      "left" : "if(inCache!=null)",
      "right" : "if(inCache!=null)",
      "info" : "IfStatement[20347-20412]:IfStatement[20563-20628]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20365-20412]:Block[20581-20628]"
    }, {
      "left" : "return inCache;",
      "right" : "return inCache;",
      "info" : "ReturnStatement[20383-20398]:ReturnStatement[20599-20614]"
    }, {
      "left" : "return tzs;",
      "right" : "return tzs;",
      "info" : "ReturnStatement[20431-20442]:ReturnStatement[20647-20658]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[20550-20557]:Modifier[20766-20773]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[20558-20564]:Modifier[20774-20780]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[20565-20570]:TYPE_DECLARATION_KIND[20781-20786]"
    }, {
      "left" : "CopyQuotedStrategy",
      "right" : "CopyQuotedStrategy",
      "info" : "SimpleName[20571-20589]:SimpleName[20787-20805]"
    }, {
      "left" : "Strategy",
      "right" : "Strategy",
      "info" : "SimpleType[20601-20609]:SimpleType[20817-20825]"
    }, {
      "left" : "CopyQuotedStrategy",
      "right" : "CopyQuotedStrategy",
      "info" : "SimpleName[20821-20839]:SimpleName[21037-21055]"
    }, {
      "left" : "String formatField",
      "right" : "String formatField",
      "info" : "SingleVariableDeclaration[20840-20858]:SingleVariableDeclaration[21056-21074]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20860-20914]:Block[21076-21130]"
    }, {
      "left" : "this.formatField= formatField;",
      "right" : "this.formatField= formatField;",
      "info" : "ExpressionStatement[20874-20904]:ExpressionStatement[21090-21120]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[20973-20982]:MarkerAnnotation[21189-21198]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[20991-20997]:Modifier[21207-21213]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[20998-21005]:PrimitiveType[21214-21221]"
    }, {
      "left" : "isNumber",
      "right" : "isNumber",
      "info" : "SimpleName[21006-21014]:SimpleName[21222-21230]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21017-21194]:Block[21233-21410]"
    }, {
      "left" : "char c= formatField.charAt(0);",
      "right" : "char c= formatField.charAt(0);",
      "info" : "VariableDeclarationStatement[21031-21061]:VariableDeclarationStatement[21247-21277]"
    }, {
      "left" : "if(c=='\\'')",
      "right" : "if(c=='\\'')",
      "info" : "IfStatement[21074-21143]:IfStatement[21290-21359]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21086-21143]:Block[21302-21359]"
    }, {
      "left" : "c= formatField.charAt(1);",
      "right" : "c= formatField.charAt(1);",
      "info" : "ExpressionStatement[21104-21129]:ExpressionStatement[21320-21345]"
    }, {
      "left" : "return Character.isDigit(c);",
      "right" : "return Character.isDigit(c);",
      "info" : "ReturnStatement[21156-21184]:ReturnStatement[21372-21400]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[21253-21262]:MarkerAnnotation[21469-21478]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[21271-21277]:Modifier[21487-21493]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[21278-21285]:PrimitiveType[21494-21501]"
    }, {
      "left" : "addRegex",
      "right" : "addRegex",
      "info" : "SimpleName[21286-21294]:SimpleName[21502-21510]"
    }, {
      "left" : "FastDateParser parser",
      "right" : "FastDateParser parser",
      "info" : "SingleVariableDeclaration[21295-21316]:SingleVariableDeclaration[21511-21532]"
    }, {
      "left" : "StringBuilder regex",
      "right" : "StringBuilder regex",
      "info" : "SingleVariableDeclaration[21318-21337]:SingleVariableDeclaration[21534-21553]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21339-21427]:Block[21555-21643]"
    }, {
      "left" : "escapeRegex(regex, formatField, true);",
      "right" : "escapeRegex(regex, formatField, true);",
      "info" : "ExpressionStatement[21353-21391]:ExpressionStatement[21569-21607]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[21404-21417]:ReturnStatement[21620-21633]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[21486-21495]:MarkerAnnotation[21702-21711]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[21504-21510]:Modifier[21720-21726]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[21511-21515]:PrimitiveType[21727-21731]"
    }, {
      "left" : "setCalendar",
      "right" : "setCalendar",
      "info" : "SimpleName[21516-21527]:SimpleName[21732-21743]"
    }, {
      "left" : "FastDateParser parser",
      "right" : "FastDateParser parser",
      "info" : "SingleVariableDeclaration[21528-21549]:SingleVariableDeclaration[21744-21765]"
    }, {
      "left" : "Calendar cal",
      "right" : "Calendar cal",
      "info" : "SingleVariableDeclaration[21551-21563]:SingleVariableDeclaration[21767-21779]"
    }, {
      "left" : "String value",
      "right" : "String value",
      "info" : "SingleVariableDeclaration[21565-21577]:SingleVariableDeclaration[21781-21793]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21579-21590]:Block[21795-21806]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[21685-21692]:Modifier[21901-21908]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[21693-21699]:Modifier[21909-21915]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[21700-21705]:TYPE_DECLARATION_KIND[21916-21921]"
    }, {
      "left" : "TextStrategy",
      "right" : "TextStrategy",
      "info" : "SimpleName[21706-21718]:SimpleName[21922-21934]"
    }, {
      "left" : "Strategy",
      "right" : "Strategy",
      "info" : "SimpleType[21730-21738]:SimpleType[21946-21954]"
    }, {
      "left" : "TextStrategy",
      "right" : "TextStrategy",
      "info" : "SimpleName[21907-21919]:SimpleName[22123-22135]"
    }, {
      "left" : "int field",
      "right" : "int field",
      "info" : "SingleVariableDeclaration[21920-21929]:SingleVariableDeclaration[22136-22145]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21931-21973]:Block[22147-22189]"
    }, {
      "left" : "this.field= field;",
      "right" : "this.field= field;",
      "info" : "ExpressionStatement[21945-21963]:ExpressionStatement[22161-22179]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[22032-22041]:MarkerAnnotation[22248-22257]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[22050-22056]:Modifier[22266-22272]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[22057-22064]:PrimitiveType[22273-22280]"
    }, {
      "left" : "isNumber",
      "right" : "isNumber",
      "info" : "SimpleName[22065-22073]:SimpleName[22281-22289]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22076-22113]:Block[22292-22329]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[22090-22103]:ReturnStatement[22306-22319]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[22172-22181]:MarkerAnnotation[22388-22397]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[22190-22196]:Modifier[22406-22412]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[22197-22204]:PrimitiveType[22413-22420]"
    }, {
      "left" : "addRegex",
      "right" : "addRegex",
      "info" : "SimpleName[22205-22213]:SimpleName[22421-22429]"
    }, {
      "left" : "FastDateParser parser",
      "right" : "FastDateParser parser",
      "info" : "SingleVariableDeclaration[22214-22235]:SingleVariableDeclaration[22430-22451]"
    }, {
      "left" : "StringBuilder regex",
      "right" : "StringBuilder regex",
      "info" : "SingleVariableDeclaration[22237-22256]:SingleVariableDeclaration[22453-22472]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22258-22537]:Block[22474-22753]"
    }, {
      "left" : "regex.append('(');",
      "right" : "regex.append('(');",
      "info" : "ExpressionStatement[22272-22290]:ExpressionStatement[22488-22506]"
    }, {
      "left" : "for(KeyValue textKeyValue : parser.getDisplayNames(field))",
      "right" : "for(KeyValue textKeyValue : parser.getDisplayNames(field))",
      "info" : "EnhancedForStatement[22303-22450]:EnhancedForStatement[22519-22666]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22362-22450]:Block[22578-22666]"
    }, {
      "left" : "escapeRegex(regex, textKeyValue.key, false).append('|');",
      "right" : "escapeRegex(regex, textKeyValue.key, false).append('|');",
      "info" : "ExpressionStatement[22380-22436]:ExpressionStatement[22596-22652]"
    }, {
      "left" : "regex.setCharAt(regex.length()-1, ')');",
      "right" : "regex.setCharAt(regex.length()-1, ')');",
      "info" : "ExpressionStatement[22463-22502]:ExpressionStatement[22679-22718]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[22515-22527]:ReturnStatement[22731-22743]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[22596-22605]:MarkerAnnotation[22812-22821]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[22614-22620]:Modifier[22830-22836]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[22621-22625]:PrimitiveType[22837-22841]"
    }, {
      "left" : "setCalendar",
      "right" : "setCalendar",
      "info" : "SimpleName[22626-22637]:SimpleName[22842-22853]"
    }, {
      "left" : "FastDateParser parser",
      "right" : "FastDateParser parser",
      "info" : "SingleVariableDeclaration[22638-22659]:SingleVariableDeclaration[22854-22875]"
    }, {
      "left" : "Calendar cal",
      "right" : "Calendar cal",
      "info" : "SingleVariableDeclaration[22661-22673]:SingleVariableDeclaration[22877-22889]"
    }, {
      "left" : "String value",
      "right" : "String value",
      "info" : "SingleVariableDeclaration[22675-22687]:SingleVariableDeclaration[22891-22903]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22689-23324]:Block[22905-23540]"
    }, {
      "left" : "KeyValue[] textKeyValues= parser.getDisplayNames(field);",
      "right" : "KeyValue[] textKeyValues= parser.getDisplayNames(field);",
      "info" : "VariableDeclarationStatement[22703-22759]:VariableDeclarationStatement[22919-22975]"
    }, {
      "left" : "int idx= Arrays.binarySearch(textKeyValues, new KeyValue(value, -1), IGNORE_CASE_COMPARATOR);",
      "right" : "int idx= Arrays.binarySearch(textKeyValues, new KeyValue(value, -1), IGNORE_CASE_COMPARATOR);",
      "info" : "VariableDeclarationStatement[22772-22865]:VariableDeclarationStatement[22988-23081]"
    }, {
      "left" : "if(idx<0)",
      "right" : "if(idx<0)",
      "info" : "IfStatement[22878-23260]:IfStatement[23094-23476]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22888-23260]:Block[23104-23476]"
    }, {
      "left" : "StringBuilder sb= new StringBuilder(value);",
      "right" : "StringBuilder sb= new StringBuilder(value);",
      "info" : "VariableDeclarationStatement[22906-22949]:VariableDeclarationStatement[23122-23165]"
    }, {
      "left" : "sb.append(\" not in (\");",
      "right" : "sb.append(\" not in (\");",
      "info" : "ExpressionStatement[22966-22989]:ExpressionStatement[23182-23205]"
    }, {
      "left" : "for(KeyValue textKeyValue : textKeyValues)",
      "right" : "for(KeyValue textKeyValue : textKeyValues)",
      "info" : "EnhancedForStatement[23006-23129]:EnhancedForStatement[23222-23345]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23049-23129]:Block[23265-23345]"
    }, {
      "left" : "sb.append(textKeyValue.key).append(' ');",
      "right" : "sb.append(textKeyValue.key).append(' ');",
      "info" : "ExpressionStatement[23071-23111]:ExpressionStatement[23287-23327]"
    }, {
      "left" : "sb.setCharAt(sb.length()-1, ')');",
      "right" : "sb.setCharAt(sb.length()-1, ')');",
      "info" : "ExpressionStatement[23146-23179]:ExpressionStatement[23362-23395]"
    }, {
      "left" : "throw new IllegalArgumentException(sb.toString());",
      "right" : "throw new IllegalArgumentException(sb.toString());",
      "info" : "ThrowStatement[23196-23246]:ThrowStatement[23412-23462]"
    }, {
      "left" : "cal.set(field, textKeyValues[idx].value);",
      "right" : "cal.set(field, textKeyValues[idx].value);",
      "info" : "ExpressionStatement[23273-23314]:ExpressionStatement[23489-23530]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[23421-23428]:Modifier[23637-23644]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[23429-23435]:Modifier[23645-23651]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[23436-23441]:TYPE_DECLARATION_KIND[23652-23657]"
    }, {
      "left" : "NumberStrategy",
      "right" : "NumberStrategy",
      "info" : "SimpleName[23442-23456]:SimpleName[23658-23672]"
    }, {
      "left" : "Strategy",
      "right" : "Strategy",
      "info" : "SimpleType[23468-23476]:SimpleType[23684-23692]"
    }, {
      "left" : "NumberStrategy",
      "right" : "NumberStrategy",
      "info" : "SimpleName[23649-23663]:SimpleName[23865-23879]"
    }, {
      "left" : "int field",
      "right" : "int field",
      "info" : "SingleVariableDeclaration[23664-23673]:SingleVariableDeclaration[23880-23889]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23675-23718]:Block[23891-23934]"
    }, {
      "left" : "this.field= field;",
      "right" : "this.field= field;",
      "info" : "ExpressionStatement[23690-23708]:ExpressionStatement[23906-23924]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[23777-23786]:MarkerAnnotation[23993-24002]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[23795-23801]:Modifier[24011-24017]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[23802-23809]:PrimitiveType[24018-24025]"
    }, {
      "left" : "isNumber",
      "right" : "isNumber",
      "info" : "SimpleName[23810-23818]:SimpleName[24026-24034]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23821-23857]:Block[24037-24073]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[23835-23847]:ReturnStatement[24051-24063]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[23916-23925]:MarkerAnnotation[24132-24141]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[23934-23940]:Modifier[24150-24156]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[23941-23948]:PrimitiveType[24157-24164]"
    }, {
      "left" : "addRegex",
      "right" : "addRegex",
      "info" : "SimpleName[23949-23957]:SimpleName[24165-24173]"
    }, {
      "left" : "FastDateParser parser",
      "right" : "FastDateParser parser",
      "info" : "SingleVariableDeclaration[23958-23979]:SingleVariableDeclaration[24174-24195]"
    }, {
      "left" : "StringBuilder regex",
      "right" : "StringBuilder regex",
      "info" : "SingleVariableDeclaration[23981-24000]:SingleVariableDeclaration[24197-24216]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24002-24262]:Block[24218-24478]"
    }, {
      "left" : "if(parser.isNextNumber())",
      "right" : "if(parser.isNextNumber())",
      "info" : "IfStatement[24016-24227]:IfStatement[24232-24443]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24042-24147]:Block[24258-24363]"
    }, {
      "left" : "regex.append(\"(\\\\p{IsNd}{\").append(parser.getFieldWidth()).append(\"}+)\");",
      "right" : "regex.append(\"(\\\\p{IsNd}{\").append(parser.getFieldWidth()).append(\"}+)\");",
      "info" : "ExpressionStatement[24060-24133]:ExpressionStatement[24276-24349]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24165-24227]:Block[24381-24443]"
    }, {
      "left" : "regex.append(\"(\\\\p{IsNd}++)\");",
      "right" : "regex.append(\"(\\\\p{IsNd}++)\");",
      "info" : "ExpressionStatement[24183-24213]:ExpressionStatement[24399-24429]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[24240-24252]:ReturnStatement[24456-24468]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[24321-24330]:MarkerAnnotation[24537-24546]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[24339-24345]:Modifier[24555-24561]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[24346-24350]:PrimitiveType[24562-24566]"
    }, {
      "left" : "setCalendar",
      "right" : "setCalendar",
      "info" : "SimpleName[24351-24362]:SimpleName[24567-24578]"
    }, {
      "left" : "FastDateParser parser",
      "right" : "FastDateParser parser",
      "info" : "SingleVariableDeclaration[24363-24384]:SingleVariableDeclaration[24579-24600]"
    }, {
      "left" : "Calendar cal",
      "right" : "Calendar cal",
      "info" : "SingleVariableDeclaration[24386-24398]:SingleVariableDeclaration[24602-24614]"
    }, {
      "left" : "String value",
      "right" : "String value",
      "info" : "SingleVariableDeclaration[24400-24412]:SingleVariableDeclaration[24616-24628]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24414-24486]:Block[24630-24702]"
    }, {
      "left" : "cal.set(field, modify(Integer.parseInt(value)));",
      "right" : "cal.set(field, modify(Integer.parseInt(value)));",
      "info" : "ExpressionStatement[24428-24476]:ExpressionStatement[24644-24692]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[24654-24660]:Modifier[24870-24876]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[24661-24664]:PrimitiveType[24877-24880]"
    }, {
      "left" : "modify",
      "right" : "modify",
      "info" : "SimpleName[24665-24671]:SimpleName[24881-24887]"
    }, {
      "left" : "int iValue",
      "right" : "int iValue",
      "info" : "SingleVariableDeclaration[24672-24682]:SingleVariableDeclaration[24888-24898]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24684-24722]:Block[24900-24938]"
    }, {
      "left" : "return iValue;",
      "right" : "return iValue;",
      "info" : "ReturnStatement[24698-24712]:ReturnStatement[24914-24928]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[24885-24894]:MarkerAnnotation[25101-25110]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[24903-24909]:Modifier[25119-25125]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[24910-24914]:PrimitiveType[25126-25130]"
    }, {
      "left" : "setCalendar",
      "right" : "setCalendar",
      "info" : "SimpleName[24915-24926]:SimpleName[25131-25142]"
    }, {
      "left" : "FastDateParser parser",
      "right" : "FastDateParser parser",
      "info" : "SingleVariableDeclaration[24927-24948]:SingleVariableDeclaration[25143-25164]"
    }, {
      "left" : "Calendar cal",
      "right" : "Calendar cal",
      "info" : "SingleVariableDeclaration[24950-24962]:SingleVariableDeclaration[25166-25178]"
    }, {
      "left" : "String value",
      "right" : "String value",
      "info" : "SingleVariableDeclaration[24964-24976]:SingleVariableDeclaration[25180-25192]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24978-25176]:Block[25194-25392]"
    }, {
      "left" : "int iValue= Integer.parseInt(value);",
      "right" : "int iValue= Integer.parseInt(value);",
      "info" : "VariableDeclarationStatement[24992-25028]:VariableDeclarationStatement[25208-25244]"
    }, {
      "left" : "if(iValue<100)",
      "right" : "if(iValue<100)",
      "info" : "IfStatement[25041-25122]:IfStatement[25257-25338]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25056-25122]:Block[25272-25338]"
    }, {
      "left" : "iValue= parser.adjustYear(iValue);",
      "right" : "iValue= parser.adjustYear(iValue);",
      "info" : "ExpressionStatement[25074-25108]:ExpressionStatement[25290-25324]"
    }, {
      "left" : "cal.set(Calendar.YEAR, iValue);",
      "right" : "cal.set(Calendar.YEAR, iValue);",
      "info" : "ExpressionStatement[25135-25166]:ExpressionStatement[25351-25382]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[25276-25283]:Modifier[25492-25499]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[25284-25290]:Modifier[25500-25506]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[25291-25296]:TYPE_DECLARATION_KIND[25507-25512]"
    }, {
      "left" : "TimeZoneStrategy",
      "right" : "TimeZoneStrategy",
      "info" : "SimpleName[25297-25313]:SimpleName[25513-25529]"
    }, {
      "left" : "Strategy",
      "right" : "Strategy",
      "info" : "SimpleType[25325-25333]:SimpleType[25541-25549]"
    }, {
      "left" : "TimeZoneStrategy",
      "right" : "TimeZoneStrategy",
      "info" : "SimpleName[25615-25631]:SimpleName[25831-25847]"
    }, {
      "left" : "Locale locale",
      "right" : "Locale locale",
      "info" : "SingleVariableDeclaration[25632-25645]:SingleVariableDeclaration[25848-25861]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25647-26608]:Block[25863-26824]"
    }, {
      "left" : "for(String id : TimeZone.getAvailableIDs())",
      "right" : "for(String id : TimeZone.getAvailableIDs())",
      "info" : "EnhancedForStatement[25661-26263]:EnhancedForStatement[25877-26479]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25705-26263]:Block[25921-26479]"
    }, {
      "left" : "if(id.startsWith(\"GMT\"))",
      "right" : "if(id.startsWith(\"GMT\"))",
      "info" : "IfStatement[25723-25797]:IfStatement[25939-26013]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25748-25797]:Block[25964-26013]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[25770-25779]:ContinueStatement[25986-25995]"
    }, {
      "left" : "TimeZone tz= TimeZone.getTimeZone(id);",
      "right" : "TimeZone tz= TimeZone.getTimeZone(id);",
      "info" : "VariableDeclarationStatement[25814-25852]:VariableDeclarationStatement[26030-26068]"
    }, {
      "left" : "tzNames.put(tz.getDisplayName(false, TimeZone.SHORT, locale), tz);",
      "right" : "tzNames.put(tz.getDisplayName(false, TimeZone.SHORT, locale), tz);",
      "info" : "ExpressionStatement[25869-25935]:ExpressionStatement[26085-26151]"
    }, {
      "left" : "tzNames.put(tz.getDisplayName(false, TimeZone.LONG, locale), tz);",
      "right" : "tzNames.put(tz.getDisplayName(false, TimeZone.LONG, locale), tz);",
      "info" : "ExpressionStatement[25952-26017]:ExpressionStatement[26168-26233]"
    }, {
      "left" : "if(tz.useDaylightTime())",
      "right" : "if(tz.useDaylightTime())",
      "info" : "IfStatement[26034-26249]:IfStatement[26250-26465]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26059-26249]:Block[26275-26465]"
    }, {
      "left" : "tzNames.put(tz.getDisplayName(true, TimeZone.SHORT, locale), tz);",
      "right" : "tzNames.put(tz.getDisplayName(true, TimeZone.SHORT, locale), tz);",
      "info" : "ExpressionStatement[26081-26146]:ExpressionStatement[26297-26362]"
    }, {
      "left" : "tzNames.put(tz.getDisplayName(true, TimeZone.LONG, locale), tz);",
      "right" : "tzNames.put(tz.getDisplayName(true, TimeZone.LONG, locale), tz);",
      "info" : "ExpressionStatement[26167-26231]:ExpressionStatement[26383-26447]"
    }, {
      "left" : "StringBuilder sb= new StringBuilder();",
      "right" : "StringBuilder sb= new StringBuilder();",
      "info" : "VariableDeclarationStatement[26276-26314]:VariableDeclarationStatement[26492-26530]"
    }, {
      "left" : "sb.append(\"(GMT[+\\\\-]\\\\d{0,1}\\\\d{2}|[+\\\\-]\\\\d{2}:?\\\\d{2}|\");",
      "right" : "sb.append(\"(GMT[+\\\\-]\\\\d{0,1}\\\\d{2}|[+\\\\-]\\\\d{2}:?\\\\d{2}|\");",
      "info" : "ExpressionStatement[26327-26387]:ExpressionStatement[26543-26603]"
    }, {
      "left" : "for(String id : tzNames.keySet())",
      "right" : "for(String id : tzNames.keySet())",
      "info" : "EnhancedForStatement[26400-26505]:EnhancedForStatement[26616-26721]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26434-26505]:Block[26650-26721]"
    }, {
      "left" : "escapeRegex(sb, id, false).append('|');",
      "right" : "escapeRegex(sb, id, false).append('|');",
      "info" : "ExpressionStatement[26452-26491]:ExpressionStatement[26668-26707]"
    }, {
      "left" : "sb.setCharAt(sb.length()-1, ')');",
      "right" : "sb.setCharAt(sb.length()-1, ')');",
      "info" : "ExpressionStatement[26518-26551]:ExpressionStatement[26734-26767]"
    }, {
      "left" : "validTimeZoneChars= sb.toString();",
      "right" : "validTimeZoneChars= sb.toString();",
      "info" : "ExpressionStatement[26564-26598]:ExpressionStatement[26780-26814]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[26667-26676]:MarkerAnnotation[26883-26892]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[26685-26691]:Modifier[26901-26907]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[26692-26699]:PrimitiveType[26908-26915]"
    }, {
      "left" : "isNumber",
      "right" : "isNumber",
      "info" : "SimpleName[26700-26708]:SimpleName[26916-26924]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26711-26748]:Block[26927-26964]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[26725-26738]:ReturnStatement[26941-26954]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[26807-26816]:MarkerAnnotation[27023-27032]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[26825-26831]:Modifier[27041-27047]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[26832-26839]:PrimitiveType[27048-27055]"
    }, {
      "left" : "addRegex",
      "right" : "addRegex",
      "info" : "SimpleName[26840-26848]:SimpleName[27056-27064]"
    }, {
      "left" : "FastDateParser parser",
      "right" : "FastDateParser parser",
      "info" : "SingleVariableDeclaration[26849-26870]:SingleVariableDeclaration[27065-27086]"
    }, {
      "left" : "StringBuilder regex",
      "right" : "StringBuilder regex",
      "info" : "SingleVariableDeclaration[26872-26891]:SingleVariableDeclaration[27088-27107]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26893-26975]:Block[27109-27191]"
    }, {
      "left" : "regex.append(validTimeZoneChars);",
      "right" : "regex.append(validTimeZoneChars);",
      "info" : "ExpressionStatement[26907-26940]:ExpressionStatement[27123-27156]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[26953-26965]:ReturnStatement[27169-27181]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[27034-27043]:MarkerAnnotation[27250-27259]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[27052-27058]:Modifier[27268-27274]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[27059-27063]:PrimitiveType[27275-27279]"
    }, {
      "left" : "setCalendar",
      "right" : "setCalendar",
      "info" : "SimpleName[27064-27075]:SimpleName[27280-27291]"
    }, {
      "left" : "FastDateParser parser",
      "right" : "FastDateParser parser",
      "info" : "SingleVariableDeclaration[27076-27097]:SingleVariableDeclaration[27292-27313]"
    }, {
      "left" : "Calendar cal",
      "right" : "Calendar cal",
      "info" : "SingleVariableDeclaration[27099-27111]:SingleVariableDeclaration[27315-27327]"
    }, {
      "left" : "String value",
      "right" : "String value",
      "info" : "SingleVariableDeclaration[27113-27125]:SingleVariableDeclaration[27329-27341]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27127-27661]:Block[27343-27877]"
    }, {
      "left" : "TimeZone tz;",
      "right" : "TimeZone tz;",
      "info" : "VariableDeclarationStatement[27141-27153]:VariableDeclarationStatement[27357-27369]"
    }, {
      "left" : "if(value.charAt(0)=='+' || value.charAt(0)=='-')",
      "right" : "if(value.charAt(0)=='+' || value.charAt(0)=='-')",
      "info" : "IfStatement[27166-27618]:IfStatement[27382-27834]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27215-27285]:Block[27431-27501]"
    }, {
      "left" : "tz= TimeZone.getTimeZone(\"GMT\"+value);",
      "right" : "tz= TimeZone.getTimeZone(\"GMT\"+value);",
      "info" : "ExpressionStatement[27233-27271]:ExpressionStatement[27449-27487]"
    }, {
      "left" : "if(value.startsWith(\"GMT\"))",
      "right" : "if(value.startsWith(\"GMT\"))",
      "info" : "IfStatement[27303-27618]:IfStatement[27519-27834]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27331-27395]:Block[27547-27611]"
    }, {
      "left" : "tz= TimeZone.getTimeZone(value);",
      "right" : "tz= TimeZone.getTimeZone(value);",
      "info" : "ExpressionStatement[27349-27381]:ExpressionStatement[27565-27597]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27413-27618]:Block[27629-27834]"
    }, {
      "left" : "tz= tzNames.get(value);",
      "right" : "tz= tzNames.get(value);",
      "info" : "ExpressionStatement[27431-27454]:ExpressionStatement[27647-27670]"
    }, {
      "left" : "if(tz==null)",
      "right" : "if(tz==null)",
      "info" : "IfStatement[27471-27604]:IfStatement[27687-27820]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27484-27604]:Block[27700-27820]"
    }, {
      "left" : "throw new IllegalArgumentException(value + \" is not a supported timezone name\");",
      "right" : "throw new IllegalArgumentException(value + \" is not a supported timezone name\");",
      "info" : "ThrowStatement[27506-27586]:ThrowStatement[27722-27802]"
    }, {
      "left" : "cal.setTimeZone(tz);",
      "right" : "cal.setTimeZone(tz);",
      "info" : "ExpressionStatement[27631-27651]:ExpressionStatement[27847-27867]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[28127-28136]:MarkerAnnotation[28343-28352]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[28145-28151]:Modifier[28361-28367]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[28152-28155]:PrimitiveType[28368-28371]"
    }, {
      "left" : "modify",
      "right" : "modify",
      "info" : "SimpleName[28156-28162]:SimpleName[28372-28378]"
    }, {
      "left" : "int iValue",
      "right" : "int iValue",
      "info" : "SingleVariableDeclaration[28163-28173]:SingleVariableDeclaration[28379-28389]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28175-28215]:Block[28391-28431]"
    }, {
      "left" : "return iValue-1;",
      "right" : "return iValue-1;",
      "info" : "ReturnStatement[28189-28205]:ReturnStatement[28405-28421]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[29051-29060]:MarkerAnnotation[29267-29276]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[29069-29075]:Modifier[29285-29291]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[29076-29079]:PrimitiveType[29292-29295]"
    }, {
      "left" : "modify",
      "right" : "modify",
      "info" : "SimpleName[29080-29086]:SimpleName[29296-29302]"
    }, {
      "left" : "int iValue",
      "right" : "int iValue",
      "info" : "SingleVariableDeclaration[29087-29097]:SingleVariableDeclaration[29303-29313]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29099-29140]:Block[29315-29356]"
    }, {
      "left" : "return iValue%24;",
      "right" : "return iValue%24;",
      "info" : "ReturnStatement[29113-29130]:ReturnStatement[29329-29346]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[29249-29258]:MarkerAnnotation[29465-29474]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[29267-29273]:Modifier[29483-29489]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[29274-29277]:PrimitiveType[29490-29493]"
    }, {
      "left" : "modify",
      "right" : "modify",
      "info" : "SimpleName[29278-29284]:SimpleName[29494-29500]"
    }, {
      "left" : "int iValue",
      "right" : "int iValue",
      "info" : "SingleVariableDeclaration[29285-29295]:SingleVariableDeclaration[29501-29511]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29297-29338]:Block[29513-29554]"
    }, {
      "left" : "return iValue%12;",
      "right" : "return iValue%12;",
      "info" : "ReturnStatement[29311-29328]:ReturnStatement[29527-29544]"
    } ]
  },
  "interFileMappings" : { }
}