{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "ClosureCodingConvention",
      "right" : "ClosureCodingConvention",
      "info" : "TypeDeclaration[1159-12725]:TypeDeclaration[1159-12761]"
    }, {
      "left" : "private static final long serialVersionUID = 1L;",
      "right" : "private static final long serialVersionUID = 1L;",
      "info" : "FieldDeclaration[1314-1362]:FieldDeclaration[1314-1362]"
    }, {
      "left" : "static final DiagnosticType OBJECTLIT_EXPECTED = DiagnosticType.warning(\n      \"JSC_REFLECT_OBJECTLIT_EXPECTED\",\n      \"Object literal expected as second argument\");",
      "right" : "static final DiagnosticType OBJECTLIT_EXPECTED = DiagnosticType.warning(\n      \"JSC_REFLECT_OBJECTLIT_EXPECTED\",\n      \"Object literal expected as second argument\");",
      "info" : "FieldDeclaration[1366-1531]:FieldDeclaration[1366-1531]"
    }, {
      "left" : "public void applySubclassRelationship(FunctionType parentCtor,\n      FunctionType childCtor, SubclassType type)",
      "right" : "public void applySubclassRelationship(FunctionType parentCtor,\n      FunctionType childCtor, SubclassType type)",
      "info" : "MethodDeclaration[1535-2077]:MethodDeclaration[1535-2077]"
    }, {
      "left" : "public SubclassRelationship getClassesDefinedByCall(Node callNode)",
      "right" : "public SubclassRelationship getClassesDefinedByCall(Node callNode)",
      "info" : "MethodDeclaration[2081-4284]:MethodDeclaration[2081-4284]"
    }, {
      "left" : "private SubclassType typeofClassDefiningName(Node callName)",
      "right" : "private SubclassType typeofClassDefiningName(Node callName)",
      "info" : "MethodDeclaration[4288-5190]:MethodDeclaration[4288-5190]"
    }, {
      "left" : "public boolean isSuperClassReference(String propertyName)",
      "right" : "public boolean isSuperClassReference(String propertyName)",
      "info" : "MethodDeclaration[5194-5316]:MethodDeclaration[5194-5316]"
    }, {
      "left" : "private boolean endsWithPrototype(Node qualifiedName)",
      "right" : "private boolean endsWithPrototype(Node qualifiedName)",
      "info" : "MethodDeclaration[5320-5660]:MethodDeclaration[5320-5660]"
    }, {
      "left" : "public String extractClassNameIfProvide(Node node, Node parent",
      "right" : "public String extractClassNameIfProvide(Node node, Node parent",
      "info" : "MethodDeclaration[5664-5944]:MethodDeclaration[5664-5944]"
    }, {
      "left" : "public String extractClassNameIfRequire(Node node, Node parent",
      "right" : "public String extractClassNameIfRequire(Node node, Node parent",
      "info" : "MethodDeclaration[5948-6228]:MethodDeclaration[5948-6228]"
    }, {
      "left" : "private static String extractClassNameIfGoog(Node node, Node parent,\n      String functionName",
      "right" : "private static String extractClassNameIfGoog(Node node, Node parent,\n      String functionName",
      "info" : "MethodDeclaration[6232-6791]:MethodDeclaration[6232-6827]"
    }, {
      "left" : "public String getExportPropertyFunction()",
      "right" : "public String getExportPropertyFunction()",
      "info" : "MethodDeclaration[6795-6998]:MethodDeclaration[6831-7034]"
    }, {
      "left" : "public String getExportSymbolFunction()",
      "right" : "public String getExportSymbolFunction()",
      "info" : "MethodDeclaration[7002-7198]:MethodDeclaration[7038-7234]"
    }, {
      "left" : "public List<String> identifyTypeDeclarationCall(Node n)",
      "right" : "public List<String> identifyTypeDeclarationCall(Node n)",
      "info" : "MethodDeclaration[7202-7851]:MethodDeclaration[7238-7887]"
    }, {
      "left" : "public String getAbstractMethodName()",
      "right" : "public String getAbstractMethodName()",
      "info" : "MethodDeclaration[7855-7944]:MethodDeclaration[7891-7980]"
    }, {
      "left" : "public String getSingletonGetterClassName(Node callNode)",
      "right" : "public String getSingletonGetterClassName(Node callNode)",
      "info" : "MethodDeclaration[7948-8419]:MethodDeclaration[7984-8455]"
    }, {
      "left" : "public void applySingletonGetter(FunctionType functionType,\n      FunctionType getterType, ObjectType objectType)",
      "right" : "public void applySingletonGetter(FunctionType functionType,\n      FunctionType getterType, ObjectType objectType)",
      "info" : "MethodDeclaration[8423-8756]:MethodDeclaration[8459-8792]"
    }, {
      "left" : "public String getGlobalObject()",
      "right" : "public String getGlobalObject()",
      "info" : "MethodDeclaration[8760-8835]:MethodDeclaration[8796-8871]"
    }, {
      "left" : "private final Set<String> propertyTestFunctions = ImmutableSet.of(\n      \"goog.isDef\", \"goog.isNull\", \"goog.isDefAndNotNull\",\n      \"goog.isString\", \"goog.isNumber\", \"goog.isBoolean\",\n      \"goog.isFunction\", \"goog.isArray\", \"goog.isObject\");",
      "right" : "private final Set<String> propertyTestFunctions = ImmutableSet.of(\n      \"goog.isDef\", \"goog.isNull\", \"goog.isDefAndNotNull\",\n      \"goog.isString\", \"goog.isNumber\", \"goog.isBoolean\",\n      \"goog.isFunction\", \"goog.isArray\", \"goog.isObject\");",
      "info" : "FieldDeclaration[8839-9081]:FieldDeclaration[8875-9117]"
    }, {
      "left" : "public boolean isPropertyTestFunction(Node call)",
      "right" : "public boolean isPropertyTestFunction(Node call)",
      "info" : "MethodDeclaration[9085-9307]:MethodDeclaration[9121-9343]"
    }, {
      "left" : "public ObjectLiteralCast getObjectLiteralCast(NodeTraversal t,\n      Node callNode)",
      "right" : "public ObjectLiteralCast getObjectLiteralCast(NodeTraversal t,\n      Node callNode)",
      "info" : "MethodDeclaration[9311-10217]:MethodDeclaration[9347-10253]"
    }, {
      "left" : "public boolean isOptionalParameter(Node parameter)",
      "right" : "public boolean isOptionalParameter(Node parameter)",
      "info" : "MethodDeclaration[10221-10307]:MethodDeclaration[10257-10343]"
    }, {
      "left" : "public boolean isVarArgsParameter(Node parameter)",
      "right" : "public boolean isVarArgsParameter(Node parameter)",
      "info" : "MethodDeclaration[10311-10396]:MethodDeclaration[10347-10432]"
    }, {
      "left" : "public boolean isPrivate(String name)",
      "right" : "public boolean isPrivate(String name)",
      "info" : "MethodDeclaration[10400-10473]:MethodDeclaration[10436-10509]"
    }, {
      "left" : "public Collection<AssertionFunctionSpec> getAssertionFunctions()",
      "right" : "public Collection<AssertionFunctionSpec> getAssertionFunctions()",
      "info" : "MethodDeclaration[10477-11431]:MethodDeclaration[10513-11467]"
    }, {
      "left" : "public Bind describeFunctionBind(Node n)",
      "right" : "public Bind describeFunctionBind(Node n)",
      "info" : "MethodDeclaration[11435-12614]:MethodDeclaration[11471-12650]"
    }, {
      "left" : "private Node safeNext(Node n)",
      "right" : "private Node safeNext(Node n)",
      "info" : "MethodDeclaration[12618-12723]:MethodDeclaration[12654-12759]"
    } ],
    "mappings" : [
 {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[1240-1246]:Modifier[1240-1246]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[1247-1252]:TYPE_DECLARATION_KIND[1247-1252]"
    }, {
      "left" : "ClosureCodingConvention",
      "right" : "ClosureCodingConvention",
      "info" : "SimpleName[1253-1276]:SimpleName[1253-1276]"
    }, {
      "left" : "DefaultCodingConvention",
      "right" : "DefaultCodingConvention",
      "info" : "SimpleType[1285-1308]:SimpleType[1285-1308]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[1670-1679]:MarkerAnnotation[1670-1679]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[1682-1688]:Modifier[1682-1688]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[1689-1693]:PrimitiveType[1689-1693]"
    }, {
      "left" : "applySubclassRelationship",
      "right" : "applySubclassRelationship",
      "info" : "SimpleName[1694-1719]:SimpleName[1694-1719]"
    }, {
      "left" : "FunctionType parentCtor",
      "right" : "FunctionType parentCtor",
      "info" : "SingleVariableDeclaration[1720-1743]:SingleVariableDeclaration[1720-1743]"
    }, {
      "left" : "FunctionType childCtor",
      "right" : "FunctionType childCtor",
      "info" : "SingleVariableDeclaration[1751-1773]:SingleVariableDeclaration[1751-1773]"
    }, {
      "left" : "SubclassType type",
      "right" : "SubclassType type",
      "info" : "SingleVariableDeclaration[1775-1792]:SingleVariableDeclaration[1775-1792]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1794-2077]:Block[1794-2077]"
    }, {
      "left" : "if (type == SubclassType.INHERITS)",
      "right" : "if (type == SubclassType.INHERITS)",
      "info" : "IfStatement[1800-2073]:IfStatement[1800-2073]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1835-2073]:Block[1835-2073]"
    }, {
      "left" : "childCtor.defineDeclaredProperty(\"superClass_\",\n          parentCtor.getPrototype(), parentCtor.getSource());",
      "right" : "childCtor.defineDeclaredProperty(\"superClass_\",\n          parentCtor.getPrototype(), parentCtor.getSource());",
      "info" : "ExpressionStatement[1843-1952]:ExpressionStatement[1843-1952]"
    }, {
      "left" : "childCtor.getPrototype().defineDeclaredProperty(\"constructor\",\n          childCtor, parentCtor.getSource());",
      "right" : "childCtor.getPrototype().defineDeclaredProperty(\"constructor\",\n          childCtor, parentCtor.getSource());",
      "info" : "ExpressionStatement[1959-2067]:ExpressionStatement[1959-2067]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[2261-2270]:MarkerAnnotation[2261-2270]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[2273-2279]:Modifier[2273-2279]"
    }, {
      "left" : "SubclassRelationship",
      "right" : "SubclassRelationship",
      "info" : "SimpleType[2280-2300]:SimpleType[2280-2300]"
    }, {
      "left" : "getClassesDefinedByCall",
      "right" : "getClassesDefinedByCall",
      "info" : "SimpleName[2301-2324]:SimpleName[2301-2324]"
    }, {
      "left" : "Node callNode",
      "right" : "Node callNode",
      "info" : "SingleVariableDeclaration[2325-2338]:SingleVariableDeclaration[2325-2338]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2340-4284]:Block[2340-4284]"
    }, {
      "left" : "Node callName = callNode.getFirstChild();",
      "right" : "Node callName = callNode.getFirstChild();",
      "info" : "VariableDeclarationStatement[2346-2387]:VariableDeclarationStatement[2346-2387]"
    }, {
      "left" : "SubclassType type = typeofClassDefiningName(callName);",
      "right" : "SubclassType type = typeofClassDefiningName(callName);",
      "info" : "VariableDeclarationStatement[2392-2446]:VariableDeclarationStatement[2392-2446]"
    }, {
      "left" : "if (type != null)",
      "right" : "if (type != null)",
      "info" : "IfStatement[2451-4262]:IfStatement[2451-4262]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2469-4262]:Block[2469-4262]"
    }, {
      "left" : "Node subclass = null;",
      "right" : "Node subclass = null;",
      "info" : "VariableDeclarationStatement[2477-2498]:VariableDeclarationStatement[2477-2498]"
    }, {
      "left" : "Node superclass = callNode.getLastChild();",
      "right" : "Node superclass = callNode.getLastChild();",
      "info" : "VariableDeclarationStatement[2505-2547]:VariableDeclarationStatement[2505-2547]"
    }, {
      "left" : "boolean isDeprecatedCall = callNode.getChildCount() == 2 &&\n          callName.getType() == Token.GETPROP;",
      "right" : "boolean isDeprecatedCall = callNode.getChildCount() == 2 &&\n          callName.getType() == Token.GETPROP;",
      "info" : "VariableDeclarationStatement[2924-3030]:VariableDeclarationStatement[2924-3030]"
    }, {
      "left" : "if (isDeprecatedCall)",
      "right" : "if (isDeprecatedCall)",
      "info" : "IfStatement[3037-3326]:IfStatement[3037-3326]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3059-3154]:Block[3059-3154]"
    }, {
      "left" : "subclass = callName.getFirstChild();",
      "right" : "subclass = callName.getFirstChild();",
      "info" : "ExpressionStatement[3110-3146]:ExpressionStatement[3110-3146]"
    }, {
      "left" : "if (callNode.getChildCount() == 3)",
      "right" : "if (callNode.getChildCount() == 3)",
      "info" : "IfStatement[3160-3326]:IfStatement[3160-3326]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3195-3290]:Block[3195-3290]"
    }, {
      "left" : "subclass = callName.getNext();",
      "right" : "subclass = callName.getNext();",
      "info" : "ExpressionStatement[3252-3282]:ExpressionStatement[3252-3282]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3296-3326]:Block[3296-3326]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[3306-3318]:ReturnStatement[3306-3318]"
    }, {
      "left" : "if (type == SubclassType.MIXIN)",
      "right" : "if (type == SubclassType.MIXIN)",
      "info" : "IfStatement[3334-3822]:IfStatement[3334-3822]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3366-3822]:Block[3366-3822]"
    }, {
      "left" : "if (!endsWithPrototype(superclass))",
      "right" : "if (!endsWithPrototype(superclass))",
      "info" : "IfStatement[3470-3540]:IfStatement[3470-3540]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3506-3540]:Block[3506-3540]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[3518-3530]:ReturnStatement[3518-3530]"
    }, {
      "left" : "if (!isDeprecatedCall)",
      "right" : "if (!isDeprecatedCall)",
      "info" : "IfStatement[3549-3765]:IfStatement[3549-3765]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3572-3765]:Block[3572-3765]"
    }, {
      "left" : "if (!endsWithPrototype(subclass))",
      "right" : "if (!endsWithPrototype(subclass))",
      "info" : "IfStatement[3584-3656]:IfStatement[3584-3656]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3618-3656]:Block[3618-3656]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[3632-3644]:ReturnStatement[3632-3644]"
    }, {
      "left" : "subclass = subclass.getFirstChild();",
      "right" : "subclass = subclass.getFirstChild();",
      "info" : "ExpressionStatement[3719-3755]:ExpressionStatement[3719-3755]"
    }, {
      "left" : "superclass = superclass.getFirstChild();",
      "right" : "superclass = superclass.getFirstChild();",
      "info" : "ExpressionStatement[3774-3814]:ExpressionStatement[3774-3814]"
    }, {
      "left" : "if (subclass != null &&\n          subclass.isUnscopedQualifiedName() &&\n          superclass.isUnscopedQualifiedName())",
      "right" : "if (subclass != null &&\n          subclass.isUnscopedQualifiedName() &&\n          superclass.isUnscopedQualifiedName())",
      "info" : "IfStatement[4058-4256]:IfStatement[4058-4256]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4178-4256]:Block[4178-4256]"
    }, {
      "left" : "return new SubclassRelationship(type, subclass, superclass);",
      "right" : "return new SubclassRelationship(type, subclass, superclass);",
      "info" : "ReturnStatement[4188-4248]:ReturnStatement[4188-4248]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[4268-4280]:ReturnStatement[4268-4280]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[4453-4460]:Modifier[4453-4460]"
    }, {
      "left" : "SubclassType",
      "right" : "SubclassType",
      "info" : "SimpleType[4461-4473]:SimpleType[4461-4473]"
    }, {
      "left" : "typeofClassDefiningName",
      "right" : "typeofClassDefiningName",
      "info" : "SimpleName[4474-4497]:SimpleName[4474-4497]"
    }, {
      "left" : "Node callName",
      "right" : "Node callName",
      "info" : "SingleVariableDeclaration[4498-4511]:SingleVariableDeclaration[4498-4511]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4513-5190]:Block[4513-5190]"
    }, {
      "left" : "String methodName = null;",
      "right" : "String methodName = null;",
      "info" : "VariableDeclarationStatement[4594-4619]:VariableDeclarationStatement[4594-4619]"
    }, {
      "left" : "if (callName.getType() == Token.GETPROP)",
      "right" : "if (callName.getType() == Token.GETPROP)",
      "info" : "IfStatement[4624-4961]:IfStatement[4624-4961]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4665-4728]:Block[4665-4728]"
    }, {
      "left" : "methodName = callName.getLastChild().getString();",
      "right" : "methodName = callName.getLastChild().getString();",
      "info" : "ExpressionStatement[4673-4722]:ExpressionStatement[4673-4722]"
    }, {
      "left" : "if (callName.getType() == Token.NAME)",
      "right" : "if (callName.getType() == Token.NAME)",
      "info" : "IfStatement[4734-4961]:IfStatement[4734-4961]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4772-4961]:Block[4772-4961]"
    }, {
      "left" : "String name = callName.getString();",
      "right" : "String name = callName.getString();",
      "info" : "VariableDeclarationStatement[4780-4815]:VariableDeclarationStatement[4780-4815]"
    }, {
      "left" : "int dollarIndex = name.lastIndexOf('$');",
      "right" : "int dollarIndex = name.lastIndexOf('$');",
      "info" : "VariableDeclarationStatement[4822-4862]:VariableDeclarationStatement[4822-4862]"
    }, {
      "left" : "if (dollarIndex != -1)",
      "right" : "if (dollarIndex != -1)",
      "info" : "IfStatement[4869-4955]:IfStatement[4869-4955]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4892-4955]:Block[4892-4955]"
    }, {
      "left" : "methodName = name.substring(dollarIndex + 1);",
      "right" : "methodName = name.substring(dollarIndex + 1);",
      "info" : "ExpressionStatement[4902-4947]:ExpressionStatement[4902-4947]"
    }, {
      "left" : "if (methodName != null)",
      "right" : "if (methodName != null)",
      "info" : "IfStatement[4967-5169]:IfStatement[4967-5169]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4991-5169]:Block[4991-5169]"
    }, {
      "left" : "if (methodName.equals(\"inherits\"))",
      "right" : "if (methodName.equals(\"inherits\"))",
      "info" : "IfStatement[4999-5163]:IfStatement[4999-5163]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5034-5081]:Block[5034-5081]"
    }, {
      "left" : "return SubclassType.INHERITS;",
      "right" : "return SubclassType.INHERITS;",
      "info" : "ReturnStatement[5044-5073]:ReturnStatement[5044-5073]"
    }, {
      "left" : "if (methodName.equals(\"mixin\"))",
      "right" : "if (methodName.equals(\"mixin\"))",
      "info" : "IfStatement[5087-5163]:IfStatement[5087-5163]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5119-5163]:Block[5119-5163]"
    }, {
      "left" : "return SubclassType.MIXIN;",
      "right" : "return SubclassType.MIXIN;",
      "info" : "ReturnStatement[5129-5155]:ReturnStatement[5129-5155]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[5174-5186]:ReturnStatement[5174-5186]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[5194-5203]:MarkerAnnotation[5194-5203]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[5206-5212]:Modifier[5206-5212]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[5213-5220]:PrimitiveType[5213-5220]"
    }, {
      "left" : "isSuperClassReference",
      "right" : "isSuperClassReference",
      "info" : "SimpleName[5221-5242]:SimpleName[5221-5242]"
    }, {
      "left" : "String propertyName",
      "right" : "String propertyName",
      "info" : "SingleVariableDeclaration[5243-5262]:SingleVariableDeclaration[5243-5262]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5264-5316]:Block[5264-5316]"
    }, {
      "left" : "return \"superClass_\".equals(propertyName);",
      "right" : "return \"superClass_\".equals(propertyName);",
      "info" : "ReturnStatement[5270-5312]:ReturnStatement[5270-5312]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[5476-5483]:Modifier[5476-5483]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[5484-5491]:PrimitiveType[5484-5491]"
    }, {
      "left" : "endsWithPrototype",
      "right" : "endsWithPrototype",
      "info" : "SimpleName[5492-5509]:SimpleName[5492-5509]"
    }, {
      "left" : "Node qualifiedName",
      "right" : "Node qualifiedName",
      "info" : "SingleVariableDeclaration[5510-5528]:SingleVariableDeclaration[5510-5528]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5530-5660]:Block[5530-5660]"
    }, {
      "left" : "return qualifiedName.getType() == Token.GETPROP &&\n        qualifiedName.getLastChild().getString().equals(\"prototype\");",
      "right" : "return qualifiedName.getType() == Token.GETPROP &&\n        qualifiedName.getLastChild().getString().equals(\"prototype\");",
      "info" : "ReturnStatement[5536-5656]:ReturnStatement[5536-5656]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[5799-5808]:MarkerAnnotation[5799-5808]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[5811-5817]:Modifier[5811-5817]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[5818-5824]:SimpleType[5818-5824]"
    }, {
      "left" : "extractClassNameIfProvide",
      "right" : "extractClassNameIfProvide",
      "info" : "SimpleName[5825-5850]:SimpleName[5825-5850]"
    }, {
      "left" : "Node node",
      "right" : "Node node",
      "info" : "SingleVariableDeclaration[5851-5860]:SingleVariableDeclaration[5851-5860]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[5862-5873]:SingleVariableDeclaration[5862-5873]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5874-5944]:Block[5874-5944]"
    }, {
      "left" : "return extractClassNameIfGoog(node, parent, \"goog.provide\");",
      "right" : "return extractClassNameIfGoog(node, parent, \"goog.provide\");",
      "info" : "ReturnStatement[5880-5940]:ReturnStatement[5880-5940]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[6083-6092]:MarkerAnnotation[6083-6092]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[6095-6101]:Modifier[6095-6101]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[6102-6108]:SimpleType[6102-6108]"
    }, {
      "left" : "extractClassNameIfRequire",
      "right" : "extractClassNameIfRequire",
      "info" : "SimpleName[6109-6134]:SimpleName[6109-6134]"
    }, {
      "left" : "Node node",
      "right" : "Node node",
      "info" : "SingleVariableDeclaration[6135-6144]:SingleVariableDeclaration[6135-6144]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[6146-6157]:SingleVariableDeclaration[6146-6157]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6158-6228]:Block[6158-6228]"
    }, {
      "left" : "return extractClassNameIfGoog(node, parent, \"goog.require\");",
      "right" : "return extractClassNameIfGoog(node, parent, \"goog.require\");",
      "info" : "ReturnStatement[6164-6224]:ReturnStatement[6164-6224]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[6232-6239]:Modifier[6232-6239]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[6240-6246]:Modifier[6240-6246]"
    }, {
      "left" : "extractClassNameIfGoog",
      "right" : "extractClassNameIfGoog",
      "info" : "SimpleName[6254-6276]:SimpleName[6254-6276]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6327-6791]:Block[6327-6827]"
    }, {
      "left" : "String className = null;",
      "right" : "String className = null;",
      "info" : "VariableDeclarationStatement[6333-6357]:VariableDeclarationStatement[6333-6357]"
    }, {
      "left" : "if (NodeUtil.isExprCall(parent))",
      "right" : "if (NodeUtil.isExprCall(parent))",
      "info" : "IfStatement[6362-6765]:IfStatement[6362-6801]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6395-6765]:Block[6395-6801]"
    }, {
      "left" : "Node callee = node.getFirstChild();",
      "right" : "Node callee = node.getFirstChild();",
      "info" : "VariableDeclarationStatement[6403-6438]:VariableDeclarationStatement[6403-6438]"
    }, {
      "left" : "if (callee != null && callee.getType() == Token.GETPROP)",
      "right" : "if (callee != null && callee.getType() == Token.GETPROP)",
      "info" : "IfStatement[6445-6759]:IfStatement[6445-6795]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6502-6759]:Block[6502-6795]"
    }, {
      "left" : "String qualifiedName = callee.getQualifiedName();",
      "right" : "String qualifiedName = callee.getQualifiedName();",
      "info" : "VariableDeclarationStatement[6512-6561]:VariableDeclarationStatement[6512-6561]"
    }, {
      "left" : "if (functionName.equals(qualifiedName))",
      "right" : "if (functionName.equals(qualifiedName))",
      "info" : "IfStatement[6570-6751]:IfStatement[6570-6787]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6610-6751]:Block[6610-6787]"
    }, {
      "left" : "Node target = callee.getNext();",
      "right" : "Node target = callee.getNext();",
      "info" : "VariableDeclarationStatement[6622-6653]:VariableDeclarationStatement[6622-6653]"
    }, {
      "left" : "if (target != null)",
      "right" : "if (target != null && target.getType() == Token.STRING)",
      "info" : "IfStatement[6664-6741]:IfStatement[6664-6777]"
    }, {
      "left" : "target != null",
      "right" : "target != null",
      "info" : "InfixExpression[6668-6682]:InfixExpression[6668-6682]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6684-6741]:Block[6720-6777]"
    }, {
      "left" : "className = target.getString();",
      "right" : "className = target.getString();",
      "info" : "ExpressionStatement[6698-6729]:ExpressionStatement[6734-6765]"
    }, {
      "left" : "return className;",
      "right" : "return className;",
      "info" : "ReturnStatement[6770-6787]:ReturnStatement[6806-6823]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[6905-6914]:MarkerAnnotation[6941-6950]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[6917-6923]:Modifier[6953-6959]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[6924-6930]:SimpleType[6960-6966]"
    }, {
      "left" : "getExportPropertyFunction",
      "right" : "getExportPropertyFunction",
      "info" : "SimpleName[6931-6956]:SimpleName[6967-6992]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6959-6998]:Block[6995-7034]"
    }, {
      "left" : "return \"goog.exportProperty\";",
      "right" : "return \"goog.exportProperty\";",
      "info" : "ReturnStatement[6965-6994]:ReturnStatement[7001-7030]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[7109-7118]:MarkerAnnotation[7145-7154]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[7121-7127]:Modifier[7157-7163]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[7128-7134]:SimpleType[7164-7170]"
    }, {
      "left" : "getExportSymbolFunction",
      "right" : "getExportSymbolFunction",
      "info" : "SimpleName[7135-7158]:SimpleName[7171-7194]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7161-7198]:Block[7197-7234]"
    }, {
      "left" : "return \"goog.exportSymbol\";",
      "right" : "return \"goog.exportSymbol\";",
      "info" : "ReturnStatement[7167-7194]:ReturnStatement[7203-7230]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[7202-7211]:MarkerAnnotation[7238-7247]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[7214-7220]:Modifier[7250-7256]"
    }, {
      "left" : "List<String>",
      "right" : "List<String>",
      "info" : "ParameterizedType[7221-7233]:ParameterizedType[7257-7269]"
    }, {
      "left" : "identifyTypeDeclarationCall",
      "right" : "identifyTypeDeclarationCall",
      "info" : "SimpleName[7234-7261]:SimpleName[7270-7297]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[7262-7268]:SingleVariableDeclaration[7298-7304]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7270-7851]:Block[7306-7887]"
    }, {
      "left" : "Node callName = n.getFirstChild();",
      "right" : "Node callName = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[7276-7310]:VariableDeclarationStatement[7312-7346]"
    }, {
      "left" : "if (\"goog.addDependency\".equals(callName.getQualifiedName()) &&\n        n.getChildCount() >= 3)",
      "right" : "if (\"goog.addDependency\".equals(callName.getQualifiedName()) &&\n        n.getChildCount() >= 3)",
      "info" : "IfStatement[7315-7830]:IfStatement[7351-7866]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7411-7830]:Block[7447-7866]"
    }, {
      "left" : "Node typeArray = callName.getNext().getNext();",
      "right" : "Node typeArray = callName.getNext().getNext();",
      "info" : "VariableDeclarationStatement[7419-7465]:VariableDeclarationStatement[7455-7501]"
    }, {
      "left" : "if (typeArray.getType() == Token.ARRAYLIT)",
      "right" : "if (typeArray.getType() == Token.ARRAYLIT)",
      "info" : "IfStatement[7472-7824]:IfStatement[7508-7860]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7515-7824]:Block[7551-7860]"
    }, {
      "left" : "List<String> typeNames = Lists.newArrayList();",
      "right" : "List<String> typeNames = Lists.newArrayList();",
      "info" : "VariableDeclarationStatement[7525-7571]:VariableDeclarationStatement[7561-7607]"
    }, {
      "left" : "for (Node name = typeArray.getFirstChild(); name != null;\n             name = name.getNext())",
      "right" : "for (Node name = typeArray.getFirstChild(); name != null;\n             name = name.getNext())",
      "info" : "ForStatement[7580-7790]:ForStatement[7616-7826]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7674-7790]:Block[7710-7826]"
    }, {
      "left" : "if (name.getType() == Token.STRING)",
      "right" : "if (name.getType() == Token.STRING)",
      "info" : "IfStatement[7686-7780]:IfStatement[7722-7816]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7722-7780]:Block[7758-7816]"
    }, {
      "left" : "typeNames.add(name.getString());",
      "right" : "typeNames.add(name.getString());",
      "info" : "ExpressionStatement[7736-7768]:ExpressionStatement[7772-7804]"
    }, {
      "left" : "return typeNames;",
      "right" : "return typeNames;",
      "info" : "ReturnStatement[7799-7816]:ReturnStatement[7835-7852]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[7835-7847]:ReturnStatement[7871-7883]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[7855-7864]:MarkerAnnotation[7891-7900]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[7867-7873]:Modifier[7903-7909]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[7874-7880]:SimpleType[7910-7916]"
    }, {
      "left" : "getAbstractMethodName",
      "right" : "getAbstractMethodName",
      "info" : "SimpleName[7881-7902]:SimpleName[7917-7938]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7905-7944]:Block[7941-7980]"
    }, {
      "left" : "return \"goog.abstractMethod\";",
      "right" : "return \"goog.abstractMethod\";",
      "info" : "ReturnStatement[7911-7940]:ReturnStatement[7947-7976]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[7948-7957]:MarkerAnnotation[7984-7993]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[7960-7966]:Modifier[7996-8002]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[7967-7973]:SimpleType[8003-8009]"
    }, {
      "left" : "getSingletonGetterClassName",
      "right" : "getSingletonGetterClassName",
      "info" : "SimpleName[7974-8001]:SimpleName[8010-8037]"
    }, {
      "left" : "Node callNode",
      "right" : "Node callNode",
      "info" : "SingleVariableDeclaration[8002-8015]:SingleVariableDeclaration[8038-8051]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8017-8419]:Block[8053-8455]"
    }, {
      "left" : "Node callArg = callNode.getFirstChild();",
      "right" : "Node callArg = callNode.getFirstChild();",
      "info" : "VariableDeclarationStatement[8023-8063]:VariableDeclarationStatement[8059-8099]"
    }, {
      "left" : "String callName = callArg.getQualifiedName();",
      "right" : "String callName = callArg.getQualifiedName();",
      "info" : "VariableDeclarationStatement[8068-8113]:VariableDeclarationStatement[8104-8149]"
    }, {
      "left" : "if (!(\"goog.addSingletonGetter\".equals(callName) ||\n          \"goog$addSingletonGetter\".equals(callName)) ||\n        callNode.getChildCount() != 2)",
      "right" : "if (!(\"goog.addSingletonGetter\".equals(callName) ||\n          \"goog$addSingletonGetter\".equals(callName)) ||\n        callNode.getChildCount() != 2)",
      "info" : "IfStatement[8191-8365]:IfStatement[8227-8401]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8339-8365]:Block[8375-8401]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[8347-8359]:ReturnStatement[8383-8395]"
    }, {
      "left" : "return callArg.getNext().getQualifiedName();",
      "right" : "return callArg.getNext().getQualifiedName();",
      "info" : "ReturnStatement[8371-8415]:ReturnStatement[8407-8451]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[8423-8432]:MarkerAnnotation[8459-8468]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[8435-8441]:Modifier[8471-8477]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[8442-8446]:PrimitiveType[8478-8482]"
    }, {
      "left" : "applySingletonGetter",
      "right" : "applySingletonGetter",
      "info" : "SimpleName[8447-8467]:SimpleName[8483-8503]"
    }, {
      "left" : "FunctionType functionType",
      "right" : "FunctionType functionType",
      "info" : "SingleVariableDeclaration[8468-8493]:SingleVariableDeclaration[8504-8529]"
    }, {
      "left" : "FunctionType getterType",
      "right" : "FunctionType getterType",
      "info" : "SingleVariableDeclaration[8501-8524]:SingleVariableDeclaration[8537-8560]"
    }, {
      "left" : "ObjectType objectType",
      "right" : "ObjectType objectType",
      "info" : "SingleVariableDeclaration[8526-8547]:SingleVariableDeclaration[8562-8583]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8549-8756]:Block[8585-8792]"
    }, {
      "left" : "functionType.defineDeclaredProperty(\"getInstance\", getterType,\n        functionType.getSource());",
      "right" : "functionType.defineDeclaredProperty(\"getInstance\", getterType,\n        functionType.getSource());",
      "info" : "ExpressionStatement[8555-8652]:ExpressionStatement[8591-8688]"
    }, {
      "left" : "functionType.defineDeclaredProperty(\"instance_\", objectType,\n        functionType.getSource());",
      "right" : "functionType.defineDeclaredProperty(\"instance_\", objectType,\n        functionType.getSource());",
      "info" : "ExpressionStatement[8657-8752]:ExpressionStatement[8693-8788]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[8760-8769]:MarkerAnnotation[8796-8805]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[8772-8778]:Modifier[8808-8814]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[8779-8785]:SimpleType[8815-8821]"
    }, {
      "left" : "getGlobalObject",
      "right" : "getGlobalObject",
      "info" : "SimpleName[8786-8801]:SimpleName[8822-8837]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8804-8835]:Block[8840-8871]"
    }, {
      "left" : "return \"goog.global\";",
      "right" : "return \"goog.global\";",
      "info" : "ReturnStatement[8810-8831]:ReturnStatement[8846-8867]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[9085-9094]:MarkerAnnotation[9121-9130]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[9097-9103]:Modifier[9133-9139]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[9104-9111]:PrimitiveType[9140-9147]"
    }, {
      "left" : "isPropertyTestFunction",
      "right" : "isPropertyTestFunction",
      "info" : "SimpleName[9112-9134]:SimpleName[9148-9170]"
    }, {
      "left" : "Node call",
      "right" : "Node call",
      "info" : "SingleVariableDeclaration[9135-9144]:SingleVariableDeclaration[9171-9180]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9146-9307]:Block[9182-9343]"
    }, {
      "left" : "Preconditions.checkArgument(call.getType() == Token.CALL);",
      "right" : "Preconditions.checkArgument(call.getType() == Token.CALL);",
      "info" : "ExpressionStatement[9152-9210]:ExpressionStatement[9188-9246]"
    }, {
      "left" : "return propertyTestFunctions.contains(\n        call.getFirstChild().getQualifiedName());",
      "right" : "return propertyTestFunctions.contains(\n        call.getFirstChild().getQualifiedName());",
      "info" : "ReturnStatement[9215-9303]:ReturnStatement[9251-9339]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[9311-9320]:MarkerAnnotation[9347-9356]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[9323-9329]:Modifier[9359-9365]"
    }, {
      "left" : "ObjectLiteralCast",
      "right" : "ObjectLiteralCast",
      "info" : "SimpleType[9330-9347]:SimpleType[9366-9383]"
    }, {
      "left" : "getObjectLiteralCast",
      "right" : "getObjectLiteralCast",
      "info" : "SimpleName[9348-9368]:SimpleName[9384-9404]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[9369-9384]:SingleVariableDeclaration[9405-9420]"
    }, {
      "left" : "Node callNode",
      "right" : "Node callNode",
      "info" : "SingleVariableDeclaration[9392-9405]:SingleVariableDeclaration[9428-9441]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9407-10217]:Block[9443-10253]"
    }, {
      "left" : "Preconditions.checkArgument(callNode.getType() == Token.CALL);",
      "right" : "Preconditions.checkArgument(callNode.getType() == Token.CALL);",
      "info" : "ExpressionStatement[9413-9475]:ExpressionStatement[9449-9511]"
    }, {
      "left" : "Node callName = callNode.getFirstChild();",
      "right" : "Node callName = callNode.getFirstChild();",
      "info" : "VariableDeclarationStatement[9480-9521]:VariableDeclarationStatement[9516-9557]"
    }, {
      "left" : "if (!\"goog.reflect.object\".equals(callName.getQualifiedName()) ||\n        callNode.getChildCount() != 3)",
      "right" : "if (!\"goog.reflect.object\".equals(callName.getQualifiedName()) ||\n        callNode.getChildCount() != 3)",
      "info" : "IfStatement[9526-9657]:IfStatement[9562-9693]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9631-9657]:Block[9667-9693]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[9639-9651]:ReturnStatement[9675-9687]"
    }, {
      "left" : "Node typeNode = callName.getNext();",
      "right" : "Node typeNode = callName.getNext();",
      "info" : "VariableDeclarationStatement[9663-9698]:VariableDeclarationStatement[9699-9734]"
    }, {
      "left" : "if (!typeNode.isQualifiedName())",
      "right" : "if (!typeNode.isQualifiedName())",
      "info" : "IfStatement[9703-9762]:IfStatement[9739-9798]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9736-9762]:Block[9772-9798]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[9744-9756]:ReturnStatement[9780-9792]"
    }, {
      "left" : "Node objectNode = typeNode.getNext();",
      "right" : "Node objectNode = typeNode.getNext();",
      "info" : "VariableDeclarationStatement[9768-9805]:VariableDeclarationStatement[9804-9841]"
    }, {
      "left" : "if (objectNode.getType() != Token.OBJECTLIT)",
      "right" : "if (objectNode.getType() != Token.OBJECTLIT)",
      "info" : "IfStatement[9810-10096]:IfStatement[9846-10132]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9855-10096]:Block[9891-10132]"
    }, {
      "left" : "t.getCompiler().report(JSError.make(t.getSourceName(), callNode,\n                                          OBJECTLIT_EXPECTED));",
      "right" : "t.getCompiler().report(JSError.make(t.getSourceName(), callNode,\n                                          OBJECTLIT_EXPECTED));",
      "info" : "ExpressionStatement[9943-10071]:ExpressionStatement[9979-10107]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[10078-10090]:ReturnStatement[10114-10126]"
    }, {
      "left" : "return new ObjectLiteralCast(typeNode.getQualifiedName(),\n                                 typeNode.getNext());",
      "right" : "return new ObjectLiteralCast(typeNode.getQualifiedName(),\n                                 typeNode.getNext());",
      "info" : "ReturnStatement[10102-10213]:ReturnStatement[10138-10249]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[10221-10230]:MarkerAnnotation[10257-10266]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[10233-10239]:Modifier[10269-10275]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[10240-10247]:PrimitiveType[10276-10283]"
    }, {
      "left" : "isOptionalParameter",
      "right" : "isOptionalParameter",
      "info" : "SimpleName[10248-10267]:SimpleName[10284-10303]"
    }, {
      "left" : "Node parameter",
      "right" : "Node parameter",
      "info" : "SingleVariableDeclaration[10268-10282]:SingleVariableDeclaration[10304-10318]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10284-10307]:Block[10320-10343]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[10290-10303]:ReturnStatement[10326-10339]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[10311-10320]:MarkerAnnotation[10347-10356]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[10323-10329]:Modifier[10359-10365]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[10330-10337]:PrimitiveType[10366-10373]"
    }, {
      "left" : "isVarArgsParameter",
      "right" : "isVarArgsParameter",
      "info" : "SimpleName[10338-10356]:SimpleName[10374-10392]"
    }, {
      "left" : "Node parameter",
      "right" : "Node parameter",
      "info" : "SingleVariableDeclaration[10357-10371]:SingleVariableDeclaration[10393-10407]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10373-10396]:Block[10409-10432]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[10379-10392]:ReturnStatement[10415-10428]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[10400-10409]:MarkerAnnotation[10436-10445]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[10412-10418]:Modifier[10448-10454]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[10419-10426]:PrimitiveType[10455-10462]"
    }, {
      "left" : "isPrivate",
      "right" : "isPrivate",
      "info" : "SimpleName[10427-10436]:SimpleName[10463-10472]"
    }, {
      "left" : "String name",
      "right" : "String name",
      "info" : "SingleVariableDeclaration[10437-10448]:SingleVariableDeclaration[10473-10484]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10450-10473]:Block[10486-10509]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[10456-10469]:ReturnStatement[10492-10505]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[10477-10486]:MarkerAnnotation[10513-10522]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[10489-10495]:Modifier[10525-10531]"
    }, {
      "left" : "Collection<AssertionFunctionSpec>",
      "right" : "Collection<AssertionFunctionSpec>",
      "info" : "ParameterizedType[10496-10529]:ParameterizedType[10532-10565]"
    }, {
      "left" : "getAssertionFunctions",
      "right" : "getAssertionFunctions",
      "info" : "SimpleName[10530-10551]:SimpleName[10566-10587]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10554-11431]:Block[10590-11467]"
    }, {
      "left" : "return ImmutableList.<AssertionFunctionSpec>of(\n        new AssertionFunctionSpec(\"goog.asserts.assert\"),\n        new AssertionFunctionSpec(\"goog.asserts.assertNumber\",\n            JSTypeNative.NUMBER_TYPE),\n        new AssertionFunctionSpec(\"goog.asserts.assertString\",\n            JSTypeNative.STRING_TYPE),\n        new AssertionFunctionSpec(\"goog.asserts.assertFunction\",\n            JSTypeNative.FUNCTION_INSTANCE_TYPE),\n        new AssertionFunctionSpec(\"goog.asserts.assertObject\",\n            JSTypeNative.OBJECT_TYPE),\n        new AssertionFunctionSpec(\"goog.asserts.assertArray\",\n            JSTypeNative.ARRAY_TYPE),\n        // TODO(agrieve): It would be better if this could make the first\n        // parameter the type of the second parameter.\n        new AssertionFunctionSpec(\"goog.asserts.assertInstanceof\",\n            JSTypeNative.OBJECT_TYPE)\n    );",
      "right" : "return ImmutableList.<AssertionFunctionSpec>of(\n        new AssertionFunctionSpec(\"goog.asserts.assert\"),\n        new AssertionFunctionSpec(\"goog.asserts.assertNumber\",\n            JSTypeNative.NUMBER_TYPE),\n        new AssertionFunctionSpec(\"goog.asserts.assertString\",\n            JSTypeNative.STRING_TYPE),\n        new AssertionFunctionSpec(\"goog.asserts.assertFunction\",\n            JSTypeNative.FUNCTION_INSTANCE_TYPE),\n        new AssertionFunctionSpec(\"goog.asserts.assertObject\",\n            JSTypeNative.OBJECT_TYPE),\n        new AssertionFunctionSpec(\"goog.asserts.assertArray\",\n            JSTypeNative.ARRAY_TYPE),\n        // TODO(agrieve): It would be better if this could make the first\n        // parameter the type of the second parameter.\n        new AssertionFunctionSpec(\"goog.asserts.assertInstanceof\",\n            JSTypeNative.OBJECT_TYPE)\n    );",
      "info" : "ReturnStatement[10560-11427]:ReturnStatement[10596-11463]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[11435-11444]:MarkerAnnotation[11471-11480]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[11447-11453]:Modifier[11483-11489]"
    }, {
      "left" : "Bind",
      "right" : "Bind",
      "info" : "SimpleType[11454-11458]:SimpleType[11490-11494]"
    }, {
      "left" : "describeFunctionBind",
      "right" : "describeFunctionBind",
      "info" : "SimpleName[11459-11479]:SimpleName[11495-11515]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[11480-11486]:SingleVariableDeclaration[11516-11522]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11488-12614]:Block[11524-12650]"
    }, {
      "left" : "Bind result = super.describeFunctionBind(n);",
      "right" : "Bind result = super.describeFunctionBind(n);",
      "info" : "VariableDeclarationStatement[11494-11538]:VariableDeclarationStatement[11530-11574]"
    }, {
      "left" : "if (result != null)",
      "right" : "if (result != null)",
      "info" : "IfStatement[11543-11591]:IfStatement[11579-11627]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11563-11591]:Block[11599-11627]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[11571-11585]:ReturnStatement[11607-11621]"
    }, {
      "left" : "if (n.getType() != Token.CALL)",
      "right" : "if (n.getType() != Token.CALL)",
      "info" : "IfStatement[11711-11768]:IfStatement[11747-11804]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11742-11768]:Block[11778-11804]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[11750-11762]:ReturnStatement[11786-11798]"
    }, {
      "left" : "Node callTarget = n.getFirstChild();",
      "right" : "Node callTarget = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[11774-11810]:VariableDeclarationStatement[11810-11846]"
    }, {
      "left" : "String name = callTarget.getQualifiedName();",
      "right" : "String name = callTarget.getQualifiedName();",
      "info" : "VariableDeclarationStatement[11815-11859]:VariableDeclarationStatement[11851-11895]"
    }, {
      "left" : "if (name != null)",
      "right" : "if (name != null)",
      "info" : "IfStatement[11864-12592]:IfStatement[11900-12628]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11882-12592]:Block[11918-12628]"
    }, {
      "left" : "if (name.equals(\"goog.bind\")\n          || name.equals(\"goog$bind\"))",
      "right" : "if (name.equals(\"goog.bind\")\n          || name.equals(\"goog$bind\"))",
      "info" : "IfStatement[11890-12245]:IfStatement[11926-12281]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11958-12245]:Block[11994-12281]"
    }, {
      "left" : "Node fn = callTarget.getNext();",
      "right" : "Node fn = callTarget.getNext();",
      "info" : "VariableDeclarationStatement[12009-12040]:VariableDeclarationStatement[12045-12076]"
    }, {
      "left" : "if (fn == null)",
      "right" : "if (fn == null)",
      "info" : "IfStatement[12049-12099]:IfStatement[12085-12135]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12065-12099]:Block[12101-12135]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[12077-12089]:ReturnStatement[12113-12125]"
    }, {
      "left" : "Node thisValue = safeNext(fn);",
      "right" : "Node thisValue = safeNext(fn);",
      "info" : "VariableDeclarationStatement[12108-12138]:VariableDeclarationStatement[12144-12174]"
    }, {
      "left" : "Node parameters = safeNext(thisValue);",
      "right" : "Node parameters = safeNext(thisValue);",
      "info" : "VariableDeclarationStatement[12147-12185]:VariableDeclarationStatement[12183-12221]"
    }, {
      "left" : "return new Bind(fn, thisValue, parameters);",
      "right" : "return new Bind(fn, thisValue, parameters);",
      "info" : "ReturnStatement[12194-12237]:ReturnStatement[12230-12273]"
    }, {
      "left" : "if (name.equals(\"goog.partial\") || name.equals(\"goog$partial\"))",
      "right" : "if (name.equals(\"goog.partial\") || name.equals(\"goog$partial\"))",
      "info" : "IfStatement[12253-12586]:IfStatement[12289-12622]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12317-12586]:Block[12353-12622]"
    }, {
      "left" : "Node fn = callTarget.getNext();",
      "right" : "Node fn = callTarget.getNext();",
      "info" : "VariableDeclarationStatement[12365-12396]:VariableDeclarationStatement[12401-12432]"
    }, {
      "left" : "if (fn == null)",
      "right" : "if (fn == null)",
      "info" : "IfStatement[12405-12455]:IfStatement[12441-12491]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12421-12455]:Block[12457-12491]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[12433-12445]:ReturnStatement[12469-12481]"
    }, {
      "left" : "Node thisValue = null;",
      "right" : "Node thisValue = null;",
      "info" : "VariableDeclarationStatement[12464-12486]:VariableDeclarationStatement[12500-12522]"
    }, {
      "left" : "Node parameters = safeNext(fn);",
      "right" : "Node parameters = safeNext(fn);",
      "info" : "VariableDeclarationStatement[12495-12526]:VariableDeclarationStatement[12531-12562]"
    }, {
      "left" : "return new Bind(fn, thisValue, parameters);",
      "right" : "return new Bind(fn, thisValue, parameters);",
      "info" : "ReturnStatement[12535-12578]:ReturnStatement[12571-12614]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[12598-12610]:ReturnStatement[12634-12646]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[12618-12625]:Modifier[12654-12661]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[12626-12630]:SimpleType[12662-12666]"
    }, {
      "left" : "safeNext",
      "right" : "safeNext",
      "info" : "SimpleName[12631-12639]:SimpleName[12667-12675]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[12640-12646]:SingleVariableDeclaration[12676-12682]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12648-12723]:Block[12684-12759]"
    }, {
      "left" : "if (n != null)",
      "right" : "if (n != null)",
      "info" : "IfStatement[12654-12702]:IfStatement[12690-12738]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12669-12702]:Block[12705-12738]"
    }, {
      "left" : "return n.getNext();",
      "right" : "return n.getNext();",
      "info" : "ReturnStatement[12677-12696]:ReturnStatement[12713-12732]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[12707-12719]:ReturnStatement[12743-12755]"
    } ]
  },
  "interFileMappings" : { }
}