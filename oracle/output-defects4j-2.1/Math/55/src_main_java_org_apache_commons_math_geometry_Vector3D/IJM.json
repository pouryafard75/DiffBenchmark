{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "Vector3D",
      "right" : "Vector3D",
      "info" : "TypeDeclaration[1101-18357]:TypeDeclaration[1101-19205]"
    }, {
      "left" : "public static final Vector3D ZERO   = new Vector3D(0, 0, 0);",
      "right" : "public static final Vector3D ZERO   = new Vector3D(0, 0, 0);",
      "info" : "FieldDeclaration[1331-1436]:FieldDeclaration[1331-1436]"
    }, {
      "left" : "public static final Vector3D PLUS_I = new Vector3D(1, 0, 0);",
      "right" : "public static final Vector3D PLUS_I = new Vector3D(1, 0, 0);",
      "info" : "FieldDeclaration[1440-1556]:FieldDeclaration[1440-1556]"
    }, {
      "left" : "public static final Vector3D MINUS_I = new Vector3D(-1, 0, 0);",
      "right" : "public static final Vector3D MINUS_I = new Vector3D(-1, 0, 0);",
      "info" : "FieldDeclaration[1560-1695]:FieldDeclaration[1560-1695]"
    }, {
      "left" : "public static final Vector3D PLUS_J = new Vector3D(0, 1, 0);",
      "right" : "public static final Vector3D PLUS_J = new Vector3D(0, 1, 0);",
      "info" : "FieldDeclaration[1699-1816]:FieldDeclaration[1699-1816]"
    }, {
      "left" : "public static final Vector3D MINUS_J = new Vector3D(0, -1, 0);",
      "right" : "public static final Vector3D MINUS_J = new Vector3D(0, -1, 0);",
      "info" : "FieldDeclaration[1820-1956]:FieldDeclaration[1820-1956]"
    }, {
      "left" : "public static final Vector3D PLUS_K = new Vector3D(0, 0, 1);",
      "right" : "public static final Vector3D PLUS_K = new Vector3D(0, 0, 1);",
      "info" : "FieldDeclaration[1960-2076]:FieldDeclaration[1960-2076]"
    }, {
      "left" : "public static final Vector3D MINUS_K = new Vector3D(0, 0, -1);",
      "right" : "public static final Vector3D MINUS_K = new Vector3D(0, 0, -1);",
      "info" : "FieldDeclaration[2080-2216]:FieldDeclaration[2080-2216]"
    }, {
      "left" : "public static final Vector3D NaN = new Vector3D(Double.NaN, Double.NaN, Double.NaN);",
      "right" : "public static final Vector3D NaN = new Vector3D(Double.NaN, Double.NaN, Double.NaN);",
      "info" : "FieldDeclaration[2255-2390]:FieldDeclaration[2255-2390]"
    }, {
      "left" : "public static final Vector3D POSITIVE_INFINITY =\n      new Vector3D(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);",
      "right" : "public static final Vector3D POSITIVE_INFINITY =\n      new Vector3D(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);",
      "info" : "FieldDeclaration[2431-2642]:FieldDeclaration[2431-2642]"
    }, {
      "left" : "public static final Vector3D NEGATIVE_INFINITY =\n      new Vector3D(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);",
      "right" : "public static final Vector3D NEGATIVE_INFINITY =\n      new Vector3D(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);",
      "info" : "FieldDeclaration[2646-2857]:FieldDeclaration[2646-2857]"
    }, {
      "left" : "private static final Vector3DFormat DEFAULT_FORMAT =\n      Vector3DFormat.getInstance();",
      "right" : "private static final Vector3DFormat DEFAULT_FORMAT =\n      Vector3DFormat.getInstance();",
      "info" : "FieldDeclaration[2861-2974]:FieldDeclaration[2861-2974]"
    }, {
      "left" : "private static final long serialVersionUID = 5133268763396045979L;",
      "right" : "private static final long serialVersionUID = 5133268763396045979L;",
      "info" : "FieldDeclaration[2978-3086]:FieldDeclaration[2978-3086]"
    }, {
      "left" : "private final double x;",
      "right" : "private final double x;",
      "info" : "FieldDeclaration[3090-3132]:FieldDeclaration[3090-3132]"
    }, {
      "left" : "private final double y;",
      "right" : "private final double y;",
      "info" : "FieldDeclaration[3136-3178]:FieldDeclaration[3136-3178]"
    }, {
      "left" : "private final double z;",
      "right" : "private final double z;",
      "info" : "FieldDeclaration[3182-3222]:FieldDeclaration[3182-3222]"
    }, {
      "left" : "public Vector3D(double x, double y, double z)",
      "right" : "public Vector3D(double x, double y, double z)",
      "info" : "MethodDeclaration[3226-3519]:MethodDeclaration[3226-3519]"
    }, {
      "left" : "public Vector3D(double alpha, double delta)",
      "right" : "public Vector3D(double alpha, double delta)",
      "info" : "MethodDeclaration[3523-4063]:MethodDeclaration[3523-4063]"
    }, {
      "left" : "public Vector3D(double a, Vector3D u)",
      "right" : "public Vector3D(double a, Vector3D u)",
      "info" : "MethodDeclaration[4067-4372]:MethodDeclaration[4067-4372]"
    }, {
      "left" : "public Vector3D(double a1, Vector3D u1, double a2, Vector3D u2)",
      "right" : "public Vector3D(double a1, Vector3D u1, double a2, Vector3D u2)",
      "info" : "MethodDeclaration[4376-4863]:MethodDeclaration[4376-4863]"
    }, {
      "left" : "public Vector3D(double a1, Vector3D u1, double a2, Vector3D u2,\n                  double a3, Vector3D u3)",
      "right" : "public Vector3D(double a1, Vector3D u1, double a2, Vector3D u2,\n                  double a3, Vector3D u3)",
      "info" : "MethodDeclaration[4867-5522]:MethodDeclaration[4867-5522]"
    }, {
      "left" : "public Vector3D(double a1, Vector3D u1, double a2, Vector3D u2,\n                  double a3, Vector3D u3, double a4, Vector3D u4)",
      "right" : "public Vector3D(double a1, Vector3D u1, double a2, Vector3D u2,\n                  double a3, Vector3D u3, double a4, Vector3D u4)",
      "info" : "MethodDeclaration[5526-6330]:MethodDeclaration[5526-6330]"
    }, {
      "left" : "public double getX()",
      "right" : "public double getX()",
      "info" : "MethodDeclaration[6334-6498]:MethodDeclaration[6334-6498]"
    }, {
      "left" : "public double getY()",
      "right" : "public double getY()",
      "info" : "MethodDeclaration[6502-6666]:MethodDeclaration[6502-6666]"
    }, {
      "left" : "public double getZ()",
      "right" : "public double getZ()",
      "info" : "MethodDeclaration[6670-6830]:MethodDeclaration[6670-6830]"
    }, {
      "left" : "public double getNorm1()",
      "right" : "public double getNorm1()",
      "info" : "MethodDeclaration[6834-7030]:MethodDeclaration[6834-7030]"
    }, {
      "left" : "public double getNorm()",
      "right" : "public double getNorm()",
      "info" : "MethodDeclaration[7034-7211]:MethodDeclaration[7034-7211]"
    }, {
      "left" : "public double getNormSq()",
      "right" : "public double getNormSq()",
      "info" : "MethodDeclaration[7215-7392]:MethodDeclaration[7215-7392]"
    }, {
      "left" : "public double getNormInf()",
      "right" : "public double getNormInf()",
      "info" : "MethodDeclaration[7396-7632]:MethodDeclaration[7396-7632]"
    }, {
      "left" : "public double getAlpha()",
      "right" : "public double getAlpha()",
      "info" : "MethodDeclaration[7636-7848]:MethodDeclaration[7636-7848]"
    }, {
      "left" : "public double getDelta()",
      "right" : "public double getDelta()",
      "info" : "MethodDeclaration[7852-8080]:MethodDeclaration[7852-8080]"
    }, {
      "left" : "public Vector3D add(Vector3D v)",
      "right" : "public Vector3D add(Vector3D v)",
      "info" : "MethodDeclaration[8084-8269]:MethodDeclaration[8084-8269]"
    }, {
      "left" : "public Vector3D add(double factor, Vector3D v)",
      "right" : "public Vector3D add(double factor, Vector3D v)",
      "info" : "MethodDeclaration[8273-8570]:MethodDeclaration[8273-8570]"
    }, {
      "left" : "public Vector3D subtract(Vector3D v)",
      "right" : "public Vector3D subtract(Vector3D v)",
      "info" : "MethodDeclaration[8574-8776]:MethodDeclaration[8574-8776]"
    }, {
      "left" : "public Vector3D subtract(double factor, Vector3D v)",
      "right" : "public Vector3D subtract(double factor, Vector3D v)",
      "info" : "MethodDeclaration[8780-9099]:MethodDeclaration[8780-9099]"
    }, {
      "left" : "public Vector3D normalize()",
      "right" : "public Vector3D normalize()",
      "info" : "MethodDeclaration[9103-9471]:MethodDeclaration[9103-9471]"
    }, {
      "left" : "public Vector3D orthogonal()",
      "right" : "public Vector3D orthogonal()",
      "info" : "MethodDeclaration[9475-10825]:MethodDeclaration[9475-10825]"
    }, {
      "left" : "public static double angle(Vector3D v1, Vector3D v2)",
      "right" : "public static double angle(Vector3D v1, Vector3D v2)",
      "info" : "MethodDeclaration[10829-12088]:MethodDeclaration[10829-12088]"
    }, {
      "left" : "public Vector3D negate()",
      "right" : "public Vector3D negate()",
      "info" : "MethodDeclaration[12092-12265]:MethodDeclaration[12092-12265]"
    }, {
      "left" : "public Vector3D scalarMultiply(double a)",
      "right" : "public Vector3D scalarMultiply(double a)",
      "info" : "MethodDeclaration[12269-12454]:MethodDeclaration[12269-12454]"
    }, {
      "left" : "public boolean isNaN()",
      "right" : "public boolean isNaN()",
      "info" : "MethodDeclaration[12458-12717]:MethodDeclaration[12458-12717]"
    }, {
      "left" : "public boolean isInfinite()",
      "right" : "public boolean isInfinite()",
      "info" : "MethodDeclaration[12721-13068]:MethodDeclaration[12721-13068]"
    }, {
      "left" : "public boolean equals(Object other)",
      "right" : "public boolean equals(Object other)",
      "info" : "MethodDeclaration[13072-14148]:MethodDeclaration[13072-14148]"
    }, {
      "left" : "public int hashCode()",
      "right" : "public int hashCode()",
      "info" : "MethodDeclaration[14152-14492]:MethodDeclaration[14152-14492]"
    }, {
      "left" : "public static double dotProduct(Vector3D v1, Vector3D v2)",
      "right" : "public static double dotProduct(Vector3D v1, Vector3D v2)",
      "info" : "MethodDeclaration[14496-14755]:MethodDeclaration[14496-14755]"
    }, {
      "left" : "public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2)",
      "right" : "public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2)",
      "info" : "MethodDeclaration[14759-15731]:MethodDeclaration[14759-16579]"
    }, {
      "left" : "public static double distance1(Vector3D v1, Vector3D v2)",
      "right" : "public static double distance1(Vector3D v1, Vector3D v2)",
      "info" : "MethodDeclaration[15735-16348]:MethodDeclaration[16583-17196]"
    }, {
      "left" : "public static double distance(Vector3D v1, Vector3D v2)",
      "right" : "public static double distance(Vector3D v1, Vector3D v2)",
      "info" : "MethodDeclaration[16352-16951]:MethodDeclaration[17200-17799]"
    }, {
      "left" : "public static double distanceInf(Vector3D v1, Vector3D v2)",
      "right" : "public static double distanceInf(Vector3D v1, Vector3D v2)",
      "info" : "MethodDeclaration[16955-17610]:MethodDeclaration[17803-18458]"
    }, {
      "left" : "public static double distanceSq(Vector3D v1, Vector3D v2)",
      "right" : "public static double distanceSq(Vector3D v1, Vector3D v2)",
      "info" : "MethodDeclaration[17614-18158]:MethodDeclaration[18462-19006]"
    }, {
      "left" : "public String toString()",
      "right" : "public String toString()",
      "info" : "MethodDeclaration[18162-18354]:MethodDeclaration[19010-19202]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3466-3519]:Block[3466-3519]"
    }, {
      "left" : "this.x = x;",
      "right" : "this.x = x;",
      "info" : "ExpressionStatement[3472-3483]:ExpressionStatement[3472-3483]"
    }, {
      "left" : "this.y = y;",
      "right" : "this.y = y;",
      "info" : "ExpressionStatement[3488-3499]:ExpressionStatement[3488-3499]"
    }, {
      "left" : "this.z = z;",
      "right" : "this.z = z;",
      "info" : "ExpressionStatement[3504-3515]:ExpressionStatement[3504-3515]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3891-4063]:Block[3891-4063]"
    }, {
      "left" : "double cosDelta = FastMath.cos(delta);",
      "right" : "double cosDelta = FastMath.cos(delta);",
      "info" : "VariableDeclarationStatement[3897-3935]:VariableDeclarationStatement[3897-3935]"
    }, {
      "left" : "this.x = FastMath.cos(alpha) * cosDelta;",
      "right" : "this.x = FastMath.cos(alpha) * cosDelta;",
      "info" : "ExpressionStatement[3940-3980]:ExpressionStatement[3940-3980]"
    }, {
      "left" : "this.y = FastMath.sin(alpha) * cosDelta;",
      "right" : "this.y = FastMath.sin(alpha) * cosDelta;",
      "info" : "ExpressionStatement[3985-4025]:ExpressionStatement[3985-4025]"
    }, {
      "left" : "this.z = FastMath.sin(delta);",
      "right" : "this.z = FastMath.sin(delta);",
      "info" : "ExpressionStatement[4030-4059]:ExpressionStatement[4030-4059]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4301-4372]:Block[4301-4372]"
    }, {
      "left" : "this.x = a * u.x;",
      "right" : "this.x = a * u.x;",
      "info" : "ExpressionStatement[4307-4324]:ExpressionStatement[4307-4324]"
    }, {
      "left" : "this.y = a * u.y;",
      "right" : "this.y = a * u.y;",
      "info" : "ExpressionStatement[4329-4346]:ExpressionStatement[4329-4346]"
    }, {
      "left" : "this.z = a * u.z;",
      "right" : "this.z = a * u.z;",
      "info" : "ExpressionStatement[4351-4368]:ExpressionStatement[4351-4368]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4750-4863]:Block[4750-4863]"
    }, {
      "left" : "this.x = a1 * u1.x + a2 * u2.x;",
      "right" : "this.x = a1 * u1.x + a2 * u2.x;",
      "info" : "ExpressionStatement[4756-4787]:ExpressionStatement[4756-4787]"
    }, {
      "left" : "this.y = a1 * u1.y + a2 * u2.y;",
      "right" : "this.y = a1 * u1.y + a2 * u2.y;",
      "info" : "ExpressionStatement[4792-4823]:ExpressionStatement[4792-4823]"
    }, {
      "left" : "this.z = a1 * u1.z + a2 * u2.z;",
      "right" : "this.z = a1 * u1.z + a2 * u2.z;",
      "info" : "ExpressionStatement[4828-4859]:ExpressionStatement[4828-4859]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5373-5522]:Block[5373-5522]"
    }, {
      "left" : "this.x = a1 * u1.x + a2 * u2.x + a3 * u3.x;",
      "right" : "this.x = a1 * u1.x + a2 * u2.x + a3 * u3.x;",
      "info" : "ExpressionStatement[5379-5422]:ExpressionStatement[5379-5422]"
    }, {
      "left" : "this.y = a1 * u1.y + a2 * u2.y + a3 * u3.y;",
      "right" : "this.y = a1 * u1.y + a2 * u2.y + a3 * u3.y;",
      "info" : "ExpressionStatement[5427-5470]:ExpressionStatement[5427-5470]"
    }, {
      "left" : "this.z = a1 * u1.z + a2 * u2.z + a3 * u3.z;",
      "right" : "this.z = a1 * u1.z + a2 * u2.z + a3 * u3.z;",
      "info" : "ExpressionStatement[5475-5518]:ExpressionStatement[5475-5518]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6145-6330]:Block[6145-6330]"
    }, {
      "left" : "this.x = a1 * u1.x + a2 * u2.x + a3 * u3.x + a4 * u4.x;",
      "right" : "this.x = a1 * u1.x + a2 * u2.x + a3 * u3.x + a4 * u4.x;",
      "info" : "ExpressionStatement[6151-6206]:ExpressionStatement[6151-6206]"
    }, {
      "left" : "this.y = a1 * u1.y + a2 * u2.y + a3 * u3.y + a4 * u4.y;",
      "right" : "this.y = a1 * u1.y + a2 * u2.y + a3 * u3.y + a4 * u4.y;",
      "info" : "ExpressionStatement[6211-6266]:ExpressionStatement[6211-6266]"
    }, {
      "left" : "this.z = a1 * u1.z + a2 * u2.z + a3 * u3.z + a4 * u4.z;",
      "right" : "this.z = a1 * u1.z + a2 * u2.z + a3 * u3.z + a4 * u4.z;",
      "info" : "ExpressionStatement[6271-6326]:ExpressionStatement[6271-6326]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6479-6498]:Block[6479-6498]"
    }, {
      "left" : "return x;",
      "right" : "return x;",
      "info" : "ReturnStatement[6485-6494]:ReturnStatement[6485-6494]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6647-6666]:Block[6647-6666]"
    }, {
      "left" : "return y;",
      "right" : "return y;",
      "info" : "ReturnStatement[6653-6662]:ReturnStatement[6653-6662]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6811-6830]:Block[6811-6830]"
    }, {
      "left" : "return z;",
      "right" : "return z;",
      "info" : "ReturnStatement[6817-6826]:ReturnStatement[6817-6826]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6961-7030]:Block[6961-7030]"
    }, {
      "left" : "return FastMath.abs(x) + FastMath.abs(y) + FastMath.abs(z);",
      "right" : "return FastMath.abs(x) + FastMath.abs(y) + FastMath.abs(z);",
      "info" : "ReturnStatement[6967-7026]:ReturnStatement[6967-7026]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7156-7211]:Block[7156-7211]"
    }, {
      "left" : "return FastMath.sqrt (x * x + y * y + z * z);",
      "right" : "return FastMath.sqrt (x * x + y * y + z * z);",
      "info" : "ReturnStatement[7162-7207]:ReturnStatement[7162-7207]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7353-7392]:Block[7353-7392]"
    }, {
      "left" : "return x * x + y * y + z * z;",
      "right" : "return x * x + y * y + z * z;",
      "info" : "ReturnStatement[7359-7388]:ReturnStatement[7359-7388]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7537-7632]:Block[7537-7632]"
    }, {
      "left" : "return FastMath.max(FastMath.max(FastMath.abs(x), FastMath.abs(y)), FastMath.abs(z));",
      "right" : "return FastMath.max(FastMath.max(FastMath.abs(x), FastMath.abs(y)), FastMath.abs(z));",
      "info" : "ReturnStatement[7543-7628]:ReturnStatement[7543-7628]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7810-7848]:Block[7810-7848]"
    }, {
      "left" : "return FastMath.atan2(y, x);",
      "right" : "return FastMath.atan2(y, x);",
      "info" : "ReturnStatement[7816-7844]:ReturnStatement[7816-7844]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8034-8080]:Block[8034-8080]"
    }, {
      "left" : "return FastMath.asin(z / getNorm());",
      "right" : "return FastMath.asin(z / getNorm());",
      "info" : "ReturnStatement[8040-8076]:ReturnStatement[8040-8076]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8212-8269]:Block[8212-8269]"
    }, {
      "left" : "return new Vector3D(x + v.x, y + v.y, z + v.z);",
      "right" : "return new Vector3D(x + v.x, y + v.y, z + v.z);",
      "info" : "ReturnStatement[8218-8265]:ReturnStatement[8218-8265]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8486-8570]:Block[8486-8570]"
    }, {
      "left" : "return new Vector3D(x + factor * v.x, y + factor * v.y, z + factor * v.z);",
      "right" : "return new Vector3D(x + factor * v.x, y + factor * v.y, z + factor * v.z);",
      "info" : "ReturnStatement[8492-8566]:ReturnStatement[8492-8566]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8719-8776]:Block[8719-8776]"
    }, {
      "left" : "return new Vector3D(x - v.x, y - v.y, z - v.z);",
      "right" : "return new Vector3D(x - v.x, y - v.y, z - v.z);",
      "info" : "ReturnStatement[8725-8772]:ReturnStatement[8725-8772]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9015-9099]:Block[9015-9099]"
    }, {
      "left" : "return new Vector3D(x - factor * v.x, y - factor * v.y, z - factor * v.z);",
      "right" : "return new Vector3D(x - factor * v.x, y - factor * v.y, z - factor * v.z);",
      "info" : "ReturnStatement[9021-9095]:ReturnStatement[9021-9095]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9287-9471]:Block[9287-9471]"
    }, {
      "left" : "double s = getNorm();",
      "right" : "double s = getNorm();",
      "info" : "VariableDeclarationStatement[9293-9314]:VariableDeclarationStatement[9293-9314]"
    }, {
      "left" : "if (s == 0)",
      "right" : "if (s == 0)",
      "info" : "IfStatement[9319-9433]:IfStatement[9319-9433]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9331-9433]:Block[9331-9433]"
    }, {
      "left" : "throw new MathArithmeticException(LocalizedFormats.CANNOT_NORMALIZE_A_ZERO_NORM_VECTOR);",
      "right" : "throw new MathArithmeticException(LocalizedFormats.CANNOT_NORMALIZE_A_ZERO_NORM_VECTOR);",
      "info" : "ThrowStatement[9339-9427]:ThrowStatement[9339-9427]"
    }, {
      "left" : "return scalarMultiply(1 / s);",
      "right" : "return scalarMultiply(1 / s);",
      "info" : "ReturnStatement[9438-9467]:ReturnStatement[9438-9467]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10224-10825]:Block[10224-10825]"
    }, {
      "left" : "double threshold = 0.6 * getNorm();",
      "right" : "double threshold = 0.6 * getNorm();",
      "info" : "VariableDeclarationStatement[10231-10266]:VariableDeclarationStatement[10231-10266]"
    }, {
      "left" : "if (threshold == 0)",
      "right" : "if (threshold == 0)",
      "info" : "IfStatement[10271-10367]:IfStatement[10271-10367]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10291-10367]:Block[10291-10367]"
    }, {
      "left" : "throw new MathArithmeticException(LocalizedFormats.ZERO_NORM);",
      "right" : "throw new MathArithmeticException(LocalizedFormats.ZERO_NORM);",
      "info" : "ThrowStatement[10299-10361]:ThrowStatement[10299-10361]"
    }, {
      "left" : "if ((x >= -threshold) && (x <= threshold))",
      "right" : "if ((x >= -threshold) && (x <= threshold))",
      "info" : "IfStatement[10373-10709]:IfStatement[10373-10709]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10416-10538]:Block[10416-10538]"
    }, {
      "left" : "double inverse  = 1 / FastMath.sqrt(y * y + z * z);",
      "right" : "double inverse  = 1 / FastMath.sqrt(y * y + z * z);",
      "info" : "VariableDeclarationStatement[10424-10475]:VariableDeclarationStatement[10424-10475]"
    }, {
      "left" : "return new Vector3D(0, inverse * z, -inverse * y);",
      "right" : "return new Vector3D(0, inverse * z, -inverse * y);",
      "info" : "ReturnStatement[10482-10532]:ReturnStatement[10482-10532]"
    }, {
      "left" : "if ((y >= -threshold) && (y <= threshold))",
      "right" : "if ((y >= -threshold) && (y <= threshold))",
      "info" : "IfStatement[10544-10709]:IfStatement[10544-10709]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10587-10709]:Block[10587-10709]"
    }, {
      "left" : "double inverse  = 1 / FastMath.sqrt(x * x + z * z);",
      "right" : "double inverse  = 1 / FastMath.sqrt(x * x + z * z);",
      "info" : "VariableDeclarationStatement[10595-10646]:VariableDeclarationStatement[10595-10646]"
    }, {
      "left" : "return new Vector3D(-inverse * z, 0, inverse * x);",
      "right" : "return new Vector3D(-inverse * z, 0, inverse * x);",
      "info" : "ReturnStatement[10653-10703]:ReturnStatement[10653-10703]"
    }, {
      "left" : "double inverse  = 1 / FastMath.sqrt(x * x + y * y);",
      "right" : "double inverse  = 1 / FastMath.sqrt(x * x + y * y);",
      "info" : "VariableDeclarationStatement[10714-10765]:VariableDeclarationStatement[10714-10765]"
    }, {
      "left" : "return new Vector3D(inverse * y, -inverse * x, 0);",
      "right" : "return new Vector3D(inverse * y, -inverse * x, 0);",
      "info" : "ReturnStatement[10770-10820]:ReturnStatement[10770-10820]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11410-12088]:Block[11410-12088]"
    }, {
      "left" : "double normProduct = v1.getNorm() * v2.getNorm();",
      "right" : "double normProduct = v1.getNorm() * v2.getNorm();",
      "info" : "VariableDeclarationStatement[11417-11466]:VariableDeclarationStatement[11417-11466]"
    }, {
      "left" : "if (normProduct == 0)",
      "right" : "if (normProduct == 0)",
      "info" : "IfStatement[11471-11569]:IfStatement[11471-11569]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11493-11569]:Block[11493-11569]"
    }, {
      "left" : "throw new MathArithmeticException(LocalizedFormats.ZERO_NORM);",
      "right" : "throw new MathArithmeticException(LocalizedFormats.ZERO_NORM);",
      "info" : "ThrowStatement[11501-11563]:ThrowStatement[11501-11563]"
    }, {
      "left" : "double dot = dotProduct(v1, v2);",
      "right" : "double dot = dotProduct(v1, v2);",
      "info" : "VariableDeclarationStatement[11575-11607]:VariableDeclarationStatement[11575-11607]"
    }, {
      "left" : "double threshold = normProduct * 0.9999;",
      "right" : "double threshold = normProduct * 0.9999;",
      "info" : "VariableDeclarationStatement[11612-11652]:VariableDeclarationStatement[11612-11652]"
    }, {
      "left" : "if ((dot < -threshold) || (dot > threshold))",
      "right" : "if ((dot < -threshold) || (dot > threshold))",
      "info" : "IfStatement[11657-11973]:IfStatement[11657-11973]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11702-11973]:Block[11702-11973]"
    }, {
      "left" : "Vector3D v3 = crossProduct(v1, v2);",
      "right" : "Vector3D v3 = crossProduct(v1, v2);",
      "info" : "VariableDeclarationStatement[11774-11809]:VariableDeclarationStatement[11774-11809]"
    }, {
      "left" : "if (dot >= 0)",
      "right" : "if (dot >= 0)",
      "info" : "IfStatement[11816-11897]:IfStatement[11816-11897]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11830-11897]:Block[11830-11897]"
    }, {
      "left" : "return FastMath.asin(v3.getNorm() / normProduct);",
      "right" : "return FastMath.asin(v3.getNorm() / normProduct);",
      "info" : "ReturnStatement[11840-11889]:ReturnStatement[11840-11889]"
    }, {
      "left" : "return FastMath.PI - FastMath.asin(v3.getNorm() / normProduct);",
      "right" : "return FastMath.PI - FastMath.asin(v3.getNorm() / normProduct);",
      "info" : "ReturnStatement[11904-11967]:ReturnStatement[11904-11967]"
    }, {
      "left" : "return FastMath.acos(dot / normProduct);",
      "right" : "return FastMath.acos(dot / normProduct);",
      "info" : "ReturnStatement[12043-12083]:ReturnStatement[12043-12083]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12223-12265]:Block[12223-12265]"
    }, {
      "left" : "return new Vector3D(-x, -y, -z);",
      "right" : "return new Vector3D(-x, -y, -z);",
      "info" : "ReturnStatement[12229-12261]:ReturnStatement[12229-12261]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12403-12454]:Block[12403-12454]"
    }, {
      "left" : "return new Vector3D(a * x, a * y, a * z);",
      "right" : "return new Vector3D(a * x, a * y, a * z);",
      "info" : "ReturnStatement[12409-12450]:ReturnStatement[12409-12450]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12644-12717]:Block[12644-12717]"
    }, {
      "left" : "return Double.isNaN(x) || Double.isNaN(y) || Double.isNaN(z);",
      "right" : "return Double.isNaN(x) || Double.isNaN(y) || Double.isNaN(z);",
      "info" : "ReturnStatement[12652-12713]:ReturnStatement[12652-12713]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12966-13068]:Block[12966-13068]"
    }, {
      "left" : "return !isNaN() && (Double.isInfinite(x) || Double.isInfinite(y) || Double.isInfinite(z));",
      "right" : "return !isNaN() && (Double.isInfinite(x) || Double.isInfinite(y) || Double.isInfinite(z));",
      "info" : "ReturnStatement[12974-13064]:ReturnStatement[12974-13064]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13862-14148]:Block[13862-14148]"
    }, {
      "left" : "if (this == other)",
      "right" : "if (this == other)",
      "info" : "IfStatement[13869-13914]:IfStatement[13869-13914]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13888-13914]:Block[13888-13914]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[13896-13908]:ReturnStatement[13896-13908]"
    }, {
      "left" : "if (other instanceof Vector3D)",
      "right" : "if (other instanceof Vector3D)",
      "info" : "IfStatement[13920-14126]:IfStatement[13920-14126]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13951-14126]:Block[13951-14126]"
    }, {
      "left" : "final Vector3D rhs = (Vector3D)other;",
      "right" : "final Vector3D rhs = (Vector3D)other;",
      "info" : "VariableDeclarationStatement[13959-13996]:VariableDeclarationStatement[13959-13996]"
    }, {
      "left" : "if (rhs.isNaN())",
      "right" : "if (rhs.isNaN())",
      "info" : "IfStatement[14003-14060]:IfStatement[14003-14060]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14020-14060]:Block[14020-14060]"
    }, {
      "left" : "return this.isNaN();",
      "right" : "return this.isNaN();",
      "info" : "ReturnStatement[14032-14052]:ReturnStatement[14032-14052]"
    }, {
      "left" : "return (x == rhs.x) && (y == rhs.y) && (z == rhs.z);",
      "right" : "return (x == rhs.x) && (y == rhs.y) && (z == rhs.z);",
      "info" : "ReturnStatement[14068-14120]:ReturnStatement[14068-14120]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[14131-14144]:ReturnStatement[14131-14144]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14347-14492]:Block[14347-14492]"
    }, {
      "left" : "if (isNaN())",
      "right" : "if (isNaN())",
      "info" : "IfStatement[14355-14397]:IfStatement[14355-14397]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14368-14397]:Block[14368-14397]"
    }, {
      "left" : "return 8;",
      "right" : "return 8;",
      "info" : "ReturnStatement[14380-14389]:ReturnStatement[14380-14389]"
    }, {
      "left" : "return 31 * (23 * MathUtils.hash(x) +  19 * MathUtils.hash(y) +  MathUtils.hash(z));",
      "right" : "return 31 * (23 * MathUtils.hash(x) +  19 * MathUtils.hash(y) +  MathUtils.hash(z));",
      "info" : "ReturnStatement[14404-14488]:ReturnStatement[14404-14488]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14698-14755]:Block[14698-14755]"
    }, {
      "left" : "return v1.x * v2.x + v1.y * v2.y + v1.z * v2.z;",
      "right" : "return v1.x * v2.x + v1.y * v2.y + v1.z * v2.z;",
      "info" : "ReturnStatement[14704-14751]:ReturnStatement[14704-14751]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14999-15731]:Block[14999-16579]"
    }, {
      "left" : "return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);",
      "right" : "return new Vector3D(y3 * z2 - z3 * y2, z3 * x2 - x3 * z2, x3 * y2 - y3 * x2);",
      "info" : "ReturnStatement[15625-15726]:ReturnStatement[16497-16574]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16171-16348]:Block[17019-17196]"
    }, {
      "left" : "final double dx = FastMath.abs(v2.x - v1.x);",
      "right" : "final double dx = FastMath.abs(v2.x - v1.x);",
      "info" : "VariableDeclarationStatement[16177-16221]:VariableDeclarationStatement[17025-17069]"
    }, {
      "left" : "final double dy = FastMath.abs(v2.y - v1.y);",
      "right" : "final double dy = FastMath.abs(v2.y - v1.y);",
      "info" : "VariableDeclarationStatement[16226-16270]:VariableDeclarationStatement[17074-17118]"
    }, {
      "left" : "final double dz = FastMath.abs(v2.z - v1.z);",
      "right" : "final double dz = FastMath.abs(v2.z - v1.z);",
      "info" : "VariableDeclarationStatement[16275-16319]:VariableDeclarationStatement[17123-17167]"
    }, {
      "left" : "return dx + dy + dz;",
      "right" : "return dx + dy + dz;",
      "info" : "ReturnStatement[16324-16344]:ReturnStatement[17172-17192]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16786-16951]:Block[17634-17799]"
    }, {
      "left" : "final double dx = v2.x - v1.x;",
      "right" : "final double dx = v2.x - v1.x;",
      "info" : "VariableDeclarationStatement[16792-16822]:VariableDeclarationStatement[17640-17670]"
    }, {
      "left" : "final double dy = v2.y - v1.y;",
      "right" : "final double dy = v2.y - v1.y;",
      "info" : "VariableDeclarationStatement[16827-16857]:VariableDeclarationStatement[17675-17705]"
    }, {
      "left" : "final double dz = v2.z - v1.z;",
      "right" : "final double dz = v2.z - v1.z;",
      "info" : "VariableDeclarationStatement[16862-16892]:VariableDeclarationStatement[17710-17740]"
    }, {
      "left" : "return FastMath.sqrt(dx * dx + dy * dy + dz * dz);",
      "right" : "return FastMath.sqrt(dx * dx + dy * dy + dz * dz);",
      "info" : "ReturnStatement[16897-16947]:ReturnStatement[17745-17795]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17407-17610]:Block[18255-18458]"
    }, {
      "left" : "final double dx = FastMath.abs(v2.x - v1.x);",
      "right" : "final double dx = FastMath.abs(v2.x - v1.x);",
      "info" : "VariableDeclarationStatement[17413-17457]:VariableDeclarationStatement[18261-18305]"
    }, {
      "left" : "final double dy = FastMath.abs(v2.y - v1.y);",
      "right" : "final double dy = FastMath.abs(v2.y - v1.y);",
      "info" : "VariableDeclarationStatement[17462-17506]:VariableDeclarationStatement[18310-18354]"
    }, {
      "left" : "final double dz = FastMath.abs(v2.z - v1.z);",
      "right" : "final double dz = FastMath.abs(v2.z - v1.z);",
      "info" : "VariableDeclarationStatement[17511-17555]:VariableDeclarationStatement[18359-18403]"
    }, {
      "left" : "return FastMath.max(FastMath.max(dx, dy), dz);",
      "right" : "return FastMath.max(FastMath.max(dx, dy), dz);",
      "info" : "ReturnStatement[17560-17606]:ReturnStatement[18408-18454]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18008-18158]:Block[18856-19006]"
    }, {
      "left" : "final double dx = v2.x - v1.x;",
      "right" : "final double dx = v2.x - v1.x;",
      "info" : "VariableDeclarationStatement[18014-18044]:VariableDeclarationStatement[18862-18892]"
    }, {
      "left" : "final double dy = v2.y - v1.y;",
      "right" : "final double dy = v2.y - v1.y;",
      "info" : "VariableDeclarationStatement[18049-18079]:VariableDeclarationStatement[18897-18927]"
    }, {
      "left" : "final double dz = v2.z - v1.z;",
      "right" : "final double dz = v2.z - v1.z;",
      "info" : "VariableDeclarationStatement[18084-18114]:VariableDeclarationStatement[18932-18962]"
    }, {
      "left" : "return dx * dx + dy * dy + dz * dz;",
      "right" : "return dx * dx + dy * dy + dz * dz;",
      "info" : "ReturnStatement[18119-18154]:ReturnStatement[18967-19002]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18307-18354]:Block[19155-19202]"
    }, {
      "left" : "return DEFAULT_FORMAT.format(this);",
      "right" : "return DEFAULT_FORMAT.format(this);",
      "info" : "ReturnStatement[18315-18350]:ReturnStatement[19163-19198]"
    } ]
  },
  "interFileMappings" : { }
}